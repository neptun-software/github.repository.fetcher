{
  "metadata": {
    "timestamp": 1736561453595,
    "page": 108,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "svc-develop-team/so-vits-svc",
      "stars": 26275,
      "defaultBranch": "4.1-Stable",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0185546875,
          "content": "* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.44921875,
          "content": "\n# Created by https://www.toptal.com/developers/gitignore/api/python\n# Edit at https://www.toptal.com/developers/gitignore?templates=python\n\n### Python ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\ncheckpoints/\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\npytestdebug.log\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\ndoc/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# End of https://www.toptal.com/developers/gitignore/api/python\n\n/shelf/\n/workspace.xml\n\ndataset\ndataset_raw\nraw\nresults\ninference/chunks_temp.json\nlogs\nhubert/checkpoint_best_legacy_500.pt\nconfigs/config.json\nfilelists/test.txt\nfilelists/train.txt\nfilelists/val.txt\n.idea/\n.vscode/\n.idea/modules.xml\n.idea/so-vits-svc.iml\n.idea/vcs.xml\n.idea/inspectionProfiles/profiles_settings.xml\n.idea/inspectionProfiles/Project_Default.xml\npretrain/\n.vscode/launch.json\n\ntrained/**/\n"
        },
        {
          "name": ".ruff.toml",
          "type": "blob",
          "size": 0.0986328125,
          "content": "select = [\"E\", \"F\", \"I\"]\n\n# Never enforce `E501` (line length violations).\nignore = [\"E501\", \"E741\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 33.7138671875,
          "content": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 37.2431640625,
          "content": "<div align=\"center\">\r\n<img alt=\"LOGO\" src=\"https://avatars.githubusercontent.com/u/127122328?s=400&u=5395a98a4f945a3a50cb0cc96c2747505d190dbc&v=4\" width=\"300\" height=\"300\" />\r\n  \r\n# SoftVC VITS Singing Voice Conversion\r\n\r\n[**English**](./README.md) | [**中文简体**](./README_zh_CN.md)\r\n\r\n[![Open In Colab](https://img.shields.io/badge/Colab-F9AB00?style=for-the-badge&logo=googlecolab&color=525252)](https://colab.research.google.com/github/svc-develop-team/so-vits-svc/blob/4.1-Stable/sovits4_for_colab.ipynb)\r\n[![Licence](https://img.shields.io/badge/LICENSE-AGPL3.0-green.svg?style=for-the-badge)](https://github.com/svc-develop-team/so-vits-svc/blob/4.1-Stable/LICENSE)\r\n\r\nThis round of limited time update is coming to an end, the warehouse will enter the Archieve state, please know\r\n\r\n</div>\r\n\r\n> ✨ A studio that contains visible f0 editor, speaker mix timeline editor and other features (Where the Onnx models are used) : [MoeVoiceStudio](https://github.com/NaruseMioShirakana/MoeVoiceStudio)\r\n\r\n> ✨ A fork with a greatly improved user interface: [34j/so-vits-svc-fork](https://github.com/34j/so-vits-svc-fork)\r\n\r\n> ✨ A client supports real-time conversion: [w-okada/voice-changer](https://github.com/w-okada/voice-changer)\r\n\r\n**This project differs fundamentally from VITS, as it focuses on Singing Voice Conversion (SVC) rather than Text-to-Speech (TTS). In this project, TTS functionality is not supported, and VITS is incapable of performing SVC tasks. It's important to note that the models used in these two projects are not interchangeable or universally applicable.**\r\n\r\n## Announcement\r\n\r\nThe purpose of this project was to enable developers to have their beloved anime characters perform singing tasks. The developers' intention was to focus solely on fictional characters and avoid any involvement of real individuals, anything related to real individuals deviates from the developer's original intention.\r\n\r\n## Disclaimer\r\n\r\nThis project is an open-source, offline endeavor, and all members of SvcDevelopTeam, as well as other developers and maintainers involved (hereinafter referred to as contributors), have no control over the project. The contributors have never provided any form of assistance to any organization or individual, including but not limited to dataset extraction, dataset processing, computing support, training support, inference, and so on. The contributors do not and cannot be aware of the purposes for which users utilize the project. Therefore, any AI models and synthesized audio produced through the training of this project are unrelated to the contributors. Any issues or consequences arising from their use are the sole responsibility of the user.\r\n\r\nThis project is run completely offline and does not collect any user information or gather user input data. Therefore, contributors to this project are not aware of all user input and models and therefore are not responsible for any user input.\r\n\r\nThis project serves as a framework only and does not possess speech synthesis functionality by itself. All functionalities require users to train the models independently. Furthermore, this project does not come bundled with any models, and any secondary distributed projects are independent of the contributors of this project.\r\n\r\n## 📏 Terms of Use\r\n\r\n# Warning: Please ensure that you address any authorization issues related to the dataset on your own. You bear full responsibility for any problems arising from the usage of non-authorized datasets for training, as well as any resulting consequences. The repository and its maintainer, svc develop team, disclaim any association with or liability for the consequences. \r\n\r\n1. This project is exclusively established for academic purposes, aiming to facilitate communication and learning. It is not intended for deployment in production environments.\r\n2. Any sovits-based video posted to a video platform must clearly specify in the introduction the input source vocals and audio used for the voice changer conversion, e.g., if you use someone else's video/audio and convert it by separating the vocals as the input source, you must give a clear link to the original video or music; if you use your own vocals or a voice synthesized by another voice synthesis engine as the input source, you must also state this in your introduction.\r\n3. You are solely responsible for any infringement issues caused by the input source and all consequences. When using other commercial vocal synthesis software as an input source, please ensure that you comply with the regulations of that software, noting that the regulations of many vocal synthesis engines explicitly state that they cannot be used to convert input sources!\r\n4. Engaging in illegal activities, as well as religious and political activities, is strictly prohibited when using this project. The project developers vehemently oppose the aforementioned activities. If you disagree with this provision, the usage of the project is prohibited.\r\n5. If you continue to use the program, you will be deemed to have agreed to the terms and conditions set forth in README and README has discouraged you and is not responsible for any subsequent problems.\r\n6. If you intend to employ this project for any other purposes, kindly contact and inform the maintainers of this repository in advance.\r\n\r\n## 📝 Model Introduction\r\n\r\nThe singing voice conversion model uses SoftVC content encoder to extract speech features from the source audio. These feature vectors are directly fed into VITS without the need for conversion to a text-based intermediate representation. As a result, the pitch and intonations of the original audio are preserved. Meanwhile, the vocoder was replaced with [NSF HiFiGAN](https://github.com/openvpi/DiffSinger/tree/refactor/modules/nsf_hifigan) to solve the problem of sound interruption.\r\n\r\n### 🆕 4.1-Stable Version Update Content\r\n\r\n- Feature input is changed to the 12th Layer of [Content Vec](https://github.com/auspicious3000/contentvec) Transformer output, And compatible with 4.0 branches.\r\n- Update the shallow diffusion, you can use the shallow diffusion model to improve the sound quality.\r\n- Added Whisper-PPG encoder support\r\n- Added static/dynamic sound fusion\r\n- Added loudness embedding\r\n- Added Functionality of feature retrieval from [RVC](https://github.com/RVC-Project/Retrieval-based-Voice-Conversion-WebUI)\r\n  \r\n### 🆕 Questions about compatibility with the 4.0 model\r\n\r\n- To support the 4.0 model and incorporate the speech encoder, you can make modifications to the `config.json` file. Add the `speech_encoder` field to the \"model\" section as shown below:\r\n\r\n```\r\n  \"model\": {\r\n    .........\r\n    \"ssl_dim\": 256,\r\n    \"n_speakers\": 200,\r\n    \"speech_encoder\":\"vec256l9\"\r\n  }\r\n```\r\n\r\n### 🆕 Shallow diffusion\r\n![Diagram](shadowdiffusion.png)\r\n\r\n## 💬 Python Version\r\n\r\nBased on our testing, we have determined that the project runs stable on `Python 3.8.9`.\r\n\r\n## 📥 Pre-trained Model Files\r\n\r\n#### **Required**\r\n\r\n**You need to select one encoder from the list below**\r\n\r\n##### **1. If using contentvec as speech encoder(recommended)**\r\n\r\n`vec768l12` and `vec256l9` require the encoder\r\n\r\n- ContentVec: [checkpoint_best_legacy_500.pt](https://ibm.box.com/s/z1wgl1stco8ffooyatzdwsqn2psd9lrr)\r\n  - Place it under the `pretrain` directory\r\n\r\nOr download the following ContentVec, which is only 199MB in size but has the same effect:\r\n- ContentVec: [hubert_base.pt](https://huggingface.co/lj1995/VoiceConversionWebUI/resolve/main/hubert_base.pt)\r\n  - Change the file name to `checkpoint_best_legacy_500.pt` and place it in the `pretrain` directory\r\n\r\n```shell\r\n# contentvec\r\nwget -P pretrain/ https://huggingface.co/lj1995/VoiceConversionWebUI/resolve/main/hubert_base.pt -O checkpoint_best_legacy_500.pt\r\n# Alternatively, you can manually download and place it in the hubert directory\r\n```\r\n\r\n##### **2. If hubertsoft is used as the speech encoder**\r\n- soft vc hubert: [hubert-soft-0d54a1f4.pt](https://github.com/bshall/hubert/releases/download/v0.1/hubert-soft-0d54a1f4.pt)\r\n  - Place it under the `pretrain` directory\r\n\r\n##### **3. If whisper-ppg as the encoder**\r\n- download model at [medium.pt](https://openaipublic.azureedge.net/main/whisper/models/345ae4da62f9b3d59415adc60127b97c714f32e89e936602e85993674d08dcb1/medium.pt), the model fits `whisper-ppg`\r\n- or download model at [large-v2.pt](https://openaipublic.azureedge.net/main/whisper/models/81f7c96c852ee8fc832187b0132e569d6c3065a3252ed18e56effd0b6a73e524/large-v2.pt), the model fits `whisper-ppg-large`\r\n  - Place it under the `pretrain` directory\r\n  \r\n##### **4. If cnhubertlarge as the encoder**\r\n- download model at [chinese-hubert-large-fairseq-ckpt.pt](https://huggingface.co/TencentGameMate/chinese-hubert-large/resolve/main/chinese-hubert-large-fairseq-ckpt.pt)\r\n  - Place it under the `pretrain` directory\r\n\r\n##### **5. If dphubert as the encoder**\r\n- download model at [DPHuBERT-sp0.75.pth](https://huggingface.co/pyf98/DPHuBERT/resolve/main/DPHuBERT-sp0.75.pth)\r\n  - Place it under the `pretrain` directory\r\n\r\n##### **6. If WavLM is used as the encoder**\r\n- download model at  [WavLM-Base+.pt](https://valle.blob.core.windows.net/share/wavlm/WavLM-Base+.pt?sv=2020-08-04&st=2023-03-01T07%3A51%3A05Z&se=2033-03-02T07%3A51%3A00Z&sr=c&sp=rl&sig=QJXmSJG9DbMKf48UDIU1MfzIro8HQOf3sqlNXiflY1I%3D), the model fits `wavlmbase+`\r\n  - Place it under the `pretrain` directory\r\n\r\n##### **7. If OnnxHubert/ContentVec as the encoder**\r\n- download model at [MoeSS-SUBModel](https://huggingface.co/NaruseMioShirakana/MoeSS-SUBModel/tree/main)\r\n  - Place it under the `pretrain` directory\r\n\r\n#### **List of Encoders**\r\n- \"vec768l12\"\r\n- \"vec256l9\"\r\n- \"vec256l9-onnx\"\r\n- \"vec256l12-onnx\"\r\n- \"vec768l9-onnx\"\r\n- \"vec768l12-onnx\"\r\n- \"hubertsoft-onnx\"\r\n- \"hubertsoft\"\r\n- \"whisper-ppg\"\r\n- \"cnhubertlarge\"\r\n- \"dphubert\"\r\n- \"whisper-ppg-large\"\r\n- \"wavlmbase+\"\r\n\r\n#### **Optional(Strongly recommend)**\r\n\r\n- Pre-trained model files: `G_0.pth` `D_0.pth`\r\n  - Place them under the `logs/44k` directory\r\n\r\n- Diffusion model pretraining base model file: `model_0.pt`\r\n  - Put it in the `logs/44k/diffusion` directory\r\n\r\nGet Sovits Pre-trained model from svc-develop-team(TBD) or anywhere else.\r\n\r\nDiffusion model references [Diffusion-SVC](https://github.com/CNChTu/Diffusion-SVC) diffusion model. The pre-trained diffusion model is universal with the DDSP-SVC's. You can go to [Diffusion-SVC](https://github.com/CNChTu/Diffusion-SVC)'s repo to get the pre-trained diffusion model.\r\n\r\nWhile the pretrained model typically does not pose copyright concerns, it is essential to remain vigilant. It is advisable to consult with the author beforehand or carefully review the description to ascertain the permissible usage of the model. This helps ensure compliance with any specified guidelines or restrictions regarding its utilization.\r\n\r\n#### **Optional(Select as Required)**\r\n\r\n##### NSF-HIFIGAN\r\n\r\nIf you are using the `NSF-HIFIGAN enhancer` or `shallow diffusion`, you will need to download the pre-trained NSF-HIFIGAN model.\r\n\r\n- Pre-trained NSF-HIFIGAN Vocoder: [nsf_hifigan_20221211.zip](https://github.com/openvpi/vocoders/releases/download/nsf-hifigan-v1/nsf_hifigan_20221211.zip)\r\n  - Unzip and place the four files under the `pretrain/nsf_hifigan` directory\r\n\r\n```shell\r\n# nsf_hifigan\r\nwget -P pretrain/ https://github.com/openvpi/vocoders/releases/download/nsf-hifigan-v1/nsf_hifigan_20221211.zip\r\nunzip -od pretrain/nsf_hifigan pretrain/nsf_hifigan_20221211.zip\r\n# Alternatively, you can manually download and place it in the pretrain/nsf_hifigan directory\r\n# URL: https://github.com/openvpi/vocoders/releases/tag/nsf-hifigan-v1\r\n```\r\n\r\n##### RMVPE\r\n\r\nIf you are using the `rmvpe` F0 Predictor, you will need to download the pre-trained RMVPE model.\r\n\r\n+ download model at [rmvpe.zip](https://github.com/yxlllc/RMVPE/releases/download/230917/rmvpe.zip), this weight is recommended.\r\n  + unzip `rmvpe.zip`，and rename the `model.pt` file to `rmvpe.pt` and place it under the `pretrain` directory.\r\n\r\n- ~~download model at [rmvpe.pt](https://huggingface.co/datasets/ylzz1997/rmvpe_pretrain_model/resolve/main/rmvpe.pt)~~\r\n  - ~~Place it under the `pretrain` directory~~\r\n\r\n##### FCPE(Preview version)\r\n\r\n[FCPE(Fast Context-base Pitch Estimator)](https://github.com/CNChTu/MelPE) is a dedicated F0 predictor designed for real-time voice conversion and will become the preferred F0 predictor for sovits real-time voice conversion in the future.(The paper is being written)\r\n\r\nIf you are using the `fcpe` F0 Predictor, you will need to download the pre-trained FCPE model.\r\n\r\n- download model at [fcpe.pt](https://huggingface.co/datasets/ylzz1997/rmvpe_pretrain_model/resolve/main/fcpe.pt)\r\n  - Place it under the `pretrain` directory\r\n\r\n## 📊 Dataset Preparation\r\n\r\nSimply place the dataset in the `dataset_raw` directory with the following file structure:\r\n\r\n```\r\ndataset_raw\r\n├───speaker0\r\n│   ├───xxx1-xxx1.wav\r\n│   ├───...\r\n│   └───Lxx-0xx8.wav\r\n└───speaker1\r\n    ├───xx2-0xxx2.wav\r\n    ├───...\r\n    └───xxx7-xxx007.wav\r\n```\r\nThere are no specific restrictions on the format of the name for each audio file (naming conventions such as `000001.wav` to `999999.wav` are also valid), but the file type must be `WAV``.\r\n\r\nYou can customize the speaker's name as showed below:\r\n\r\n```\r\ndataset_raw\r\n└───suijiSUI\r\n    ├───1.wav\r\n    ├───...\r\n    └───25788785-20221210-200143-856_01_(Vocals)_0_0.wav\r\n```\r\n\r\n## 🛠️ Preprocessing\r\n\r\n### 0. Slice audio\r\n\r\nTo avoid video memory overflow during training or pre-processing, it is recommended to limit the length of audio clips. Cutting the audio to a length of \"5s - 15s\" is more recommended. Slightly longer times are acceptable, however, excessively long clips may cause problems such as `torch.cuda.OutOfMemoryError`.\r\n\r\nTo facilitate the slicing process, you can use [audio-slicer-GUI](https://github.com/flutydeer/audio-slicer) or [audio-slicer-CLI](https://github.com/openvpi/audio-slicer)\r\n\r\nIn general, only the `Minimum Interval` needs to be adjusted. For spoken audio, the default value usually suffices, while for singing audio, it can be adjusted to around `100` or even `50`, depending on the specific requirements.\r\n\r\nAfter slicing, it is recommended to remove any audio clips that are excessively long or too short.\r\n\r\n**If you are using whisper-ppg encoder for training, the audio clips must shorter than 30s.**\r\n\r\n### 1. Resample to 44100Hz and mono\r\n\r\n```shell\r\npython resample.py\r\n```\r\n\r\n#### Cautions\r\n\r\nAlthough this project has resample.py scripts for resampling, mono and loudness matching, the default loudness matching is to match to 0db. This can cause damage to the sound quality. While python's loudness matching package pyloudnorm does not limit the level, this can lead to sonic boom. Therefore, it is recommended to consider using professional sound processing software, such as `adobe audition` for loudness matching. If you are already using other software for loudness matching, add the parameter `-skip_loudnorm` to the run command:\r\n\r\n```shell\r\npython resample.py --skip_loudnorm\r\n```\r\n\r\n### 2. Automatically split the dataset into training and validation sets, and generate configuration files.\r\n\r\n```shell\r\npython preprocess_flist_config.py --speech_encoder vec768l12\r\n```\r\n\r\nspeech_encoder has the following options\r\n\r\n```\r\nvec768l12\r\nvec256l9\r\nhubertsoft\r\nwhisper-ppg\r\ncnhubertlarge\r\ndphubert\r\nwhisper-ppg-large\r\nwavlmbase+\r\n```\r\n\r\nIf the speech_encoder argument is omitted, the default value is `vec768l12`\r\n\r\n**Use loudness embedding**\r\n\r\nAdd `--vol_aug` if you want to enable loudness embedding:\r\n\r\n```shell\r\npython preprocess_flist_config.py --speech_encoder vec768l12 --vol_aug\r\n```\r\n\r\nAfter enabling loudness embedding, the trained model will match the loudness of the input source; otherwise, it will match the loudness of the training set.\r\n\r\n#### You can modify some parameters in the generated config.json and diffusion.yaml\r\n\r\n* `keep_ckpts`: Keep the the the number of previous models during training. Set to `0` to keep them all. Default is `3`.\r\n\r\n* `all_in_mem`: Load all dataset to RAM. It can be enabled when the disk IO of some platforms is too low and the system memory is **much larger** than your dataset.\r\n  \r\n* `batch_size`: The amount of data loaded to the GPU for a single training session can be adjusted to a size lower than the GPU memory capacity.\r\n\r\n* `vocoder_name`: Select a vocoder. The default is `nsf-hifigan`.\r\n\r\n##### diffusion.yaml\r\n\r\n* `cache_all_data`: Load all dataset to RAM. It can be enabled when the disk IO of some platforms is too low and the system memory is **much larger** than your dataset.\r\n\r\n* `duration`: The duration of the audio slicing during training, can be adjusted according to the size of the video memory, **Note: this value must be less than the minimum time of the audio in the training set!**\r\n\r\n* `batch_size`: The amount of data loaded to the GPU for a single training session can be adjusted to a size lower than the video memory capacity.\r\n\r\n* `timesteps`: The total number of steps in the diffusion model, which defaults to 1000.\r\n\r\n* `k_step_max`: Training can only train `k_step_max` step diffusion to save training time, note that the value must be less than `timesteps`, 0 is to train the entire diffusion model, **Note: if you do not train the entire diffusion model will not be able to use only_diffusion!**\r\n\r\n##### **List of Vocoders**\r\n\r\n```\r\nnsf-hifigan\r\nnsf-snake-hifigan\r\n```\r\n\r\n### 3. Generate hubert and f0\r\n\r\n```shell\r\npython preprocess_hubert_f0.py --f0_predictor dio\r\n```\r\n\r\nf0_predictor has the following options\r\n\r\n```\r\ncrepe\r\ndio\r\npm\r\nharvest\r\nrmvpe\r\nfcpe\r\n```\r\n\r\nIf the training set is too noisy,it is recommended to use `crepe` to handle f0\r\n\r\nIf the f0_predictor parameter is omitted, the default value is `rmvpe`\r\n\r\nIf you want shallow diffusion (optional), you need to add the `--use_diff` parameter, for example:\r\n\r\n```shell\r\npython preprocess_hubert_f0.py --f0_predictor dio --use_diff\r\n```\r\n\r\n**Speed Up preprocess**\r\n\r\nIf your dataset is pretty large,you can increase the param `--num_processes` like that:\r\n\r\n```shell\r\npython preprocess_hubert_f0.py --f0_predictor dio --num_processes 8\r\n```\r\nAll the worker will be assigned to different GPU if you have more than one GPUs.\r\n\r\nAfter completing the above steps, the dataset directory will contain the preprocessed data, and the dataset_raw folder can be deleted.\r\n\r\n## 🏋️‍ Training\r\n\r\n### Sovits Model\r\n\r\n```shell\r\npython train.py -c configs/config.json -m 44k\r\n```\r\n\r\n### Diffusion Model (optional)\r\n\r\nIf the shallow diffusion function is needed, the diffusion model needs to be trained. The diffusion model training method is as follows:\r\n\r\n```shell\r\npython train_diff.py -c configs/diffusion.yaml\r\n```\r\n\r\nDuring training, the model files will be saved to `logs/44k`, and the diffusion model will be saved to `logs/44k/diffusion`\r\n\r\n## 🤖 Inference\r\n\r\nUse [inference_main.py](https://github.com/svc-develop-team/so-vits-svc/blob/4.0/inference_main.py)\r\n\r\n```shell\r\n# Example\r\npython inference_main.py -m \"logs/44k/G_30400.pth\" -c \"configs/config.json\" -n \"君の知らない物語-src.wav\" -t 0 -s \"nen\"\r\n```\r\n\r\nRequired parameters:\r\n- `-m` | `--model_path`: path to the model.\r\n- `-c` | `--config_path`: path to the configuration file.\r\n- `-n` | `--clean_names`: a list of wav file names located in the `raw` folder.\r\n- `-t` | `--trans`: pitch shift, supports positive and negative (semitone) values.\r\n- `-s` | `--spk_list`: Select the speaker ID to use for conversion.\r\n- `-cl` | `--clip`: Forced audio clipping, set to 0 to disable(default), setting it to a non-zero value (duration in seconds) to enable.\r\n\r\nOptional parameters: see the next section\r\n- `-lg` | `--linear_gradient`: The cross fade length of two audio slices in seconds. If there is a discontinuous voice after forced slicing, you can adjust this value. Otherwise, it is recommended to use the default value of 0.\r\n- `-f0p` | `--f0_predictor`: Select a F0 predictor, options are `crepe`, `pm`, `dio`, `harvest`, `rmvpe`,`fcpe`, default value is `pm`(note: f0 mean pooling will be enable when using `crepe`)\r\n- `-a` | `--auto_predict_f0`: automatic pitch prediction, do not enable this when converting singing voices as it can cause serious pitch issues.\r\n- `-cm` | `--cluster_model_path`: Cluster model or feature retrieval index path, if left blank, it will be automatically set as the default path of these models. If there is no training cluster or feature retrieval, fill in at will.\r\n- `-cr` | `--cluster_infer_ratio`: The proportion of clustering scheme or feature retrieval ranges from 0 to 1. If there is no training clustering model or feature retrieval, the default is 0.\r\n- `-eh` | `--enhance`: Whether to use NSF_HIFIGAN enhancer, this option has certain effect on sound quality enhancement for some models with few training sets, but has negative effect on well-trained models, so it is disabled by default.\r\n- `-shd` | `--shallow_diffusion`: Whether to use shallow diffusion, which can solve some electrical sound problems after use. This option is disabled by default. When this option is enabled, NSF_HIFIGAN enhancer will be disabled\r\n- `-usm` | `--use_spk_mix`: whether to use dynamic voice fusion\r\n- `-lea` | `--loudness_envelope_adjustment`：The adjustment of the input source's loudness envelope in relation to the fusion ratio of the output loudness envelope. The closer to 1, the more the output loudness envelope is used\r\n- `-fr` | `--feature_retrieval`：Whether to use feature retrieval If clustering model is used, it will be disabled, and `cm` and `cr` parameters will become the index path and mixing ratio of feature retrieval\r\n  \r\nShallow diffusion settings:\r\n- `-dm` | `--diffusion_model_path`: Diffusion model path\r\n- `-dc` | `--diffusion_config_path`: Diffusion config file path\r\n- `-ks` | `--k_step`: The larger the number of k_steps, the closer it is to the result of the diffusion model. The default is 100\r\n- `-od` | `--only_diffusion`: Whether to use Only diffusion mode, which does not load the sovits model to only use diffusion model inference\r\n- `-se` | `--second_encoding`：which involves applying an additional encoding to the original audio before shallow diffusion. This option can yield varying results - sometimes positive and sometimes negative.\r\n\r\n### Cautions\r\n\r\nIf inferencing using `whisper-ppg` speech encoder, you need to set `--clip` to 25 and `-lg` to 1. Otherwise it will fail to infer properly.\r\n\r\n## 🤔 Optional Settings\r\n\r\nIf you are satisfied with the previous results, or if you do not feel you understand what follows, you can skip it and it will have no effect on the use of the model. The impact of these optional settings mentioned is relatively small, and while they may have some impact on specific datasets, in most cases the difference may not be significant.\r\n\r\n### Automatic f0 prediction\r\n\r\nDuring the training of the 4.0 model, an f0 predictor is also trained, which enables automatic pitch prediction during voice conversion. However, if the results are not satisfactory, manual pitch prediction can be used instead. Please note that when converting singing voices, it is advised not to enable this feature as it may cause significant pitch shifting.\r\n\r\n- Set `auto_predict_f0` to `true` in `inference_main.py`.\r\n\r\n### Cluster-based timbre leakage control\r\n\r\nIntroduction: The clustering scheme implemented in this model aims to reduce timbre leakage and enhance the similarity of the trained model to the target's timbre, although the effect may not be very pronounced. However, relying solely on clustering can reduce the model's clarity and make it sound less distinct. Therefore, a fusion method is adopted in this model to control the balance between the clustering and non-clustering approaches. This allows manual adjustment of the trade-off between \"sounding like the target's timbre\" and \"have clear enunciation\" to find an optimal balance.\r\n\r\nNo changes are required in the existing steps. Simply train an additional clustering model, which incurs relatively low training costs.\r\n\r\n- Training process:\r\n  - Train on a machine with good CPU performance. According to extant experience, it takes about 4 minutes to train each speaker on a Tencent Cloud machine with 6-core CPU.\r\n  - Execute `python cluster/train_cluster.py`. The output model will be saved in `logs/44k/kmeans_10000.pt`.\r\n  - The clustering model can currently be trained using the gpu by executing `python cluster/train_cluster.py --gpu`\r\n- Inference process:\r\n  - Specify `cluster_model_path` in `inference_main.py`. If not specified, the default is `logs/44k/kmeans_10000.pt`.\r\n  - Specify `cluster_infer_ratio` in `inference_main.py`, where `0` means not using clustering at all, `1` means only using clustering, and usually `0.5` is sufficient.\r\n\r\n### Feature retrieval\r\n\r\nIntroduction: As with the clustering scheme, the timbre leakage can be reduced, the enunciation is slightly better than clustering, but it will reduce the inference speed. By employing the fusion method, it becomes possible to linearly control the balance between feature retrieval and non-feature retrieval, allowing for fine-tuning of the desired proportion.\r\n\r\n- Training process: \r\n  First, it needs to be executed after generating hubert and f0: \r\n\r\n```shell\r\npython train_index.py -c configs/config.json\r\n```\r\n\r\nThe output of the model will be in `logs/44k/feature_and_index.pkl`\r\n\r\n- Inference process: \r\n  - The `--feature_retrieval` needs to be formulated first, and the clustering mode automatically switches to the feature retrieval mode.\r\n  - Specify `cluster_model_path` in `inference_main.py`. If not specified, the default is `logs/44k/feature_and_index.pkl`.\r\n  - Specify `cluster_infer_ratio` in `inference_main.py`, where `0` means not using feature retrieval at all, `1` means only using feature retrieval, and usually `0.5` is sufficient.\r\n\r\n## 🗜️ Model compression\r\n\r\nThe generated model contains data that is needed for further training. If you confirm that the model is final and not be used in further training, it is safe to remove these data to get smaller file size (about 1/3).\r\n\r\n```shell\r\n# Example\r\npython compress_model.py -c=\"configs/config.json\" -i=\"logs/44k/G_30400.pth\" -o=\"logs/44k/release.pth\"\r\n```\r\n\r\n## 👨‍🔧 Timbre mixing\r\n\r\n### Static Tone Mixing\r\n\r\n**Refer to `webUI.py` file for stable Timbre mixing of the gadget/lab feature.**\r\n\r\nIntroduction: This function can combine multiple models into one model (convex combination or linear combination of multiple model parameters) to create mixed voice that do not exist in reality\r\n\r\n**Note:**\r\n1. This feature is only supported for single-speaker models\r\n2. If you force a multi-speaker model, it is critical to make sure there are the same number of speakers in each model. This will ensure that sounds with the same SpeakerID can be mixed correctly.\r\n3. Ensure that the `model` fields in config.json of all models to be mixed are the same\r\n4. The mixed model can use any config.json file from the models being synthesized. However, the clustering model will not be functional after mixed.\r\n5. When batch uploading models, it is best to put the models into a folder and upload them together after selecting them\r\n6. It is suggested to adjust the mixing ratio between 0 and 100, or to other numbers, but unknown effects will occur in the linear combination mode\r\n7. After mixing, the file named output.pth will be saved in the root directory of the project\r\n8. Convex combination mode will perform Softmax to add the mix ratio to 1, while linear combination mode will not\r\n\r\n### Dynamic timbre mixing\r\n\r\n**Refer to the `spkmix.py` file for an introduction to dynamic timbre mixing**\r\n\r\nCharacter mix track writing rules:\r\n\r\nRole ID: \\[\\[Start time 1, end time 1, start value 1, start value 1], [Start time 2, end time 2, start value 2]]\r\n\r\nThe start time must be the same as the end time of the previous one. The first start time must be 0, and the last end time must be 1 (time ranges from 0 to 1).\r\n\r\nAll roles must be filled in. For unused roles, fill \\[\\[0., 1., 0., 0.]]\r\n\r\nThe fusion value can be filled in arbitrarily, and the linear change from the start value to the end value within the specified period of time. The \r\n\r\ninternal linear combination will be automatically guaranteed to be 1 (convex combination condition), so it can be used safely\r\n\r\nUse the `--use_spk_mix` parameter when reasoning to enable dynamic timbre mixing\r\n\r\n## 📤 Exporting to Onnx\r\n\r\nUse [onnx_export.py](https://github.com/svc-develop-team/so-vits-svc/blob/4.0/onnx_export.py)\r\n\r\n- Create a folder named `checkpoints` and open it\r\n- Create a folder in the `checkpoints` folder as your project folder, naming it after your project, for example `aziplayer`\r\n- Rename your model as `model.pth`, the configuration file as `config.json`, and place them in the `aziplayer` folder you just created\r\n- Modify `\"NyaruTaffy\"` in `path = \"NyaruTaffy\"` in [onnx_export.py](https://github.com/svc-develop-team/so-vits-svc/blob/4.0/onnx_export.py) to your project name, `path = \"aziplayer\"`（onnx_export_speaker_mix makes you can mix speaker's voice）\r\n- Run [onnx_export.py](https://github.com/svc-develop-team/so-vits-svc/blob/4.0/onnx_export.py)\r\n- Wait for it to finish running. A `model.onnx` will be generated in your project folder, which is the exported model.\r\n\r\nNote: For Hubert Onnx models, please use the models provided by MoeSS. Currently, they cannot be exported on their own (Hubert in fairseq has many unsupported operators and things involving constants that can cause errors or result in problems with the input/output shape and results when exported.)\r\n\r\n\r\n## 📎 Reference\r\n\r\n| URL | Designation | Title | Implementation Source |\r\n| --- | ----------- | ----- | --------------------- |\r\n|[2106.06103](https://arxiv.org/abs/2106.06103) | VITS (Synthesizer)| Conditional Variational Autoencoder with Adversarial Learning for End-to-End Text-to-Speech | [jaywalnut310/vits](https://github.com/jaywalnut310/vits) |\r\n|[2111.02392](https://arxiv.org/abs/2111.02392) | SoftVC (Speech Encoder)| A Comparison of Discrete and Soft Speech Units for Improved Voice Conversion | [bshall/hubert](https://github.com/bshall/hubert) |\r\n|[2204.09224](https://arxiv.org/abs/2204.09224) | ContentVec (Speech Encoder)| ContentVec: An Improved Self-Supervised Speech Representation by Disentangling Speakers | [auspicious3000/contentvec](https://github.com/auspicious3000/contentvec) |\r\n|[2212.04356](https://arxiv.org/abs/2212.04356) | Whisper (Speech Encoder) | Robust Speech Recognition via Large-Scale Weak Supervision | [openai/whisper](https://github.com/openai/whisper) |\r\n|[2110.13900](https://arxiv.org/abs/2110.13900) | WavLM (Speech Encoder) | WavLM: Large-Scale Self-Supervised Pre-Training for Full Stack Speech Processing | [microsoft/unilm/wavlm](https://github.com/microsoft/unilm/tree/master/wavlm) |\r\n|[2305.17651](https://arxiv.org/abs/2305.17651) | DPHubert (Speech Encoder) | DPHuBERT: Joint Distillation and Pruning of Self-Supervised Speech Models | [pyf98/DPHuBERT](https://github.com/pyf98/DPHuBERT) |\r\n|[DOI:10.21437/Interspeech.2017-68](http://dx.doi.org/10.21437/Interspeech.2017-68) | Harvest (F0 Predictor) | Harvest: A high-performance fundamental frequency estimator from speech signals | [mmorise/World/harvest](https://github.com/mmorise/World/blob/master/src/harvest.cpp) |\r\n|[aes35-000039](https://www.aes.org/e-lib/online/browse.cfm?elib=15165) | Dio (F0 Predictor) | Fast and reliable F0 estimation method based on the period extraction of vocal fold vibration of singing voice and speech | [mmorise/World/dio](https://github.com/mmorise/World/blob/master/src/dio.cpp) |\r\n|[8461329](https://ieeexplore.ieee.org/document/8461329) | Crepe (F0 Predictor) | Crepe: A Convolutional Representation for Pitch Estimation | [maxrmorrison/torchcrepe](https://github.com/maxrmorrison/torchcrepe) |\r\n|[DOI:10.1016/j.wocn.2018.07.001](https://doi.org/10.1016/j.wocn.2018.07.001) | Parselmouth (F0 Predictor) | Introducing Parselmouth: A Python interface to Praat | [YannickJadoul/Parselmouth](https://github.com/YannickJadoul/Parselmouth) |\r\n|[2306.15412v2](https://arxiv.org/abs/2306.15412v2) | RMVPE (F0 Predictor) | RMVPE: A Robust Model for Vocal Pitch Estimation in Polyphonic Music | [Dream-High/RMVPE](https://github.com/Dream-High/RMVPE) |\r\n|[2010.05646](https://arxiv.org/abs/2010.05646) | HIFIGAN (Vocoder) | HiFi-GAN: Generative Adversarial Networks for Efficient and High Fidelity Speech Synthesis | [jik876/hifi-gan](https://github.com/jik876/hifi-gan) |\r\n|[1810.11946](https://arxiv.org/abs/1810.11946.pdf) | NSF (Vocoder) | Neural source-filter-based waveform model for statistical parametric speech synthesis | [openvpi/DiffSinger/modules/nsf_hifigan](https://github.com/openvpi/DiffSinger/tree/refactor/modules/nsf_hifigan)\r\n|[2006.08195](https://arxiv.org/abs/2006.08195) | Snake (Vocoder) | Neural Networks Fail to Learn Periodic Functions and How to Fix It | [EdwardDixon/snake](https://github.com/EdwardDixon/snake)\r\n|[2105.02446v3](https://arxiv.org/abs/2105.02446v3) | Shallow Diffusion (PostProcessing)| DiffSinger: Singing Voice Synthesis via Shallow Diffusion Mechanism | [CNChTu/Diffusion-SVC](https://github.com/CNChTu/Diffusion-SVC) |\r\n|[K-means](https://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=01D65490BADCC216F350D06F84D721AD?doi=10.1.1.308.8619&rep=rep1&type=pdf) | Feature K-means Clustering (PreProcessing)| Some methods for classification and analysis of multivariate observations | This repo |\r\n| | Feature TopK Retrieval (PreProcessing)| Retrieval based Voice Conversion | [RVC-Project/Retrieval-based-Voice-Conversion-WebUI](https://github.com/RVC-Project/Retrieval-based-Voice-Conversion-WebUI) |\r\n| | whisper ppg| whisper ppg | [PlayVoice/whisper_ppg](https://github.com/PlayVoice/whisper_ppg) |\r\n| | bigvgan| bigvgan | [PlayVoice/so-vits-svc-5.0](https://github.com/PlayVoice/so-vits-svc-5.0/tree/bigvgan-mix-v2/vits_decoder/alias) |\r\n\r\n\r\n## ☀️ Previous contributors\r\n\r\nFor some reason the author deleted the original repository. Because of the negligence of the organization members, the contributor list was cleared because all files were directly reuploaded to this repository at the beginning of the reconstruction of this repository. Now add a previous contributor list to README.md.\r\n\r\n*Some members have not listed according to their personal wishes.*\r\n\r\n<table>\r\n  <tr>\r\n    <td align=\"center\"><a href=\"https://github.com/MistEO\"><img src=\"https://avatars.githubusercontent.com/u/18511905?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>MistEO</b></sub></a><br /></td>\r\n    <td align=\"center\"><a href=\"https://github.com/XiaoMiku01\"><img src=\"https://avatars.githubusercontent.com/u/54094119?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>XiaoMiku01</b></sub></a><br /></td>\r\n    <td align=\"center\"><a href=\"https://github.com/ForsakenRei\"><img src=\"https://avatars.githubusercontent.com/u/23041178?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>しぐれ</b></sub></a><br /></td>\r\n    <td align=\"center\"><a href=\"https://github.com/TomoGaSukunai\"><img src=\"https://avatars.githubusercontent.com/u/25863522?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>TomoGaSukunai</b></sub></a><br /></td>\r\n    <td align=\"center\"><a href=\"https://github.com/Plachtaa\"><img src=\"https://avatars.githubusercontent.com/u/112609742?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Plachtaa</b></sub></a><br /></td>\r\n    <td align=\"center\"><a href=\"https://github.com/zdxiaoda\"><img src=\"https://avatars.githubusercontent.com/u/45501959?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>zd小达</b></sub></a><br /></td>\r\n    <td align=\"center\"><a href=\"https://github.com/Archivoice\"><img src=\"https://avatars.githubusercontent.com/u/107520869?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>凍聲響世</b></sub></a><br /></td>\r\n  </tr>\r\n</table>\r\n\r\n## 📚 Some legal provisions for reference\r\n\r\n#### Any country, region, organization, or individual using this project must comply with the following laws.\r\n\r\n#### 《民法典》\r\n\r\n##### 第一千零一十九条 \r\n\r\n任何组织或者个人不得以丑化、污损，或者利用信息技术手段伪造等方式侵害他人的肖像权。未经肖像权人同意，不得制作、使用、公开肖像权人的肖像，但是法律另有规定的除外。未经肖像权人同意，肖像作品权利人不得以发表、复制、发行、出租、展览等方式使用或者公开肖像权人的肖像。对自然人声音的保护，参照适用肖像权保护的有关规定。\r\n\r\n#####  第一千零二十四条 \r\n\r\n【名誉权】民事主体享有名誉权。任何组织或者个人不得以侮辱、诽谤等方式侵害他人的名誉权。  \r\n\r\n#####  第一千零二十七条\r\n\r\n【作品侵害名誉权】行为人发表的文学、艺术作品以真人真事或者特定人为描述对象，含有侮辱、诽谤内容，侵害他人名誉权的，受害人有权依法请求该行为人承担民事责任。行为人发表的文学、艺术作品不以特定人为描述对象，仅其中的情节与该特定人的情况相似的，不承担民事责任。  \r\n\r\n#### 《[中华人民共和国宪法](http://www.gov.cn/guoqing/2018-03/22/content_5276318.htm)》\r\n\r\n#### 《[中华人民共和国刑法](http://gongbao.court.gov.cn/Details/f8e30d0689b23f57bfc782d21035c3.html?sw=%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E5%88%91%E6%B3%95)》\r\n\r\n#### 《[中华人民共和国民法典](http://gongbao.court.gov.cn/Details/51eb6750b8361f79be8f90d09bc202.html)》\r\n\r\n#### 《[中华人民共和国合同法](http://www.npc.gov.cn/zgrdw/npc/lfzt/rlyw/2016-07/01/content_1992739.htm)》\r\n\r\n## 💪 Thanks to all contributors for their efforts\r\n<a href=\"https://github.com/svc-develop-team/so-vits-svc/graphs/contributors\" target=\"_blank\">\r\n  <img src=\"https://contrib.rocks/image?repo=svc-develop-team/so-vits-svc\" />\r\n</a>\r\n"
        },
        {
          "name": "README_zh_CN.md",
          "type": "blob",
          "size": 31.9169921875,
          "content": "<div align=\"center\">\r\n<img alt=\"LOGO\" src=\"https://avatars.githubusercontent.com/u/127122328?s=400&u=5395a98a4f945a3a50cb0cc96c2747505d190dbc&v=4\" width=\"300\" height=\"300\" />\r\n\r\n# SoftVC VITS Singing Voice Conversion\r\n\r\n[**English**](./README.md) | [**中文简体**](./README_zh_CN.md)\r\n\r\n[![在Google Cloab中打开](https://img.shields.io/badge/Colab-F9AB00?style=for-the-badge&logo=googlecolab&color=525252)](https://colab.research.google.com/github/svc-develop-team/so-vits-svc/blob/4.1-Stable/sovits4_for_colab.ipynb)\r\n[![LICENSE](https://img.shields.io/badge/LICENSE-AGPL3.0-green.svg?style=for-the-badge)](https://github.com/svc-develop-team/so-vits-svc/blob/4.1-Stable/LICENSE)\r\n\r\n本轮限时更新即将结束，仓库将进入Archieve状态，望周知\r\n\r\n</div>\r\n\r\n\r\n#### ✨ 带有 F0 曲线编辑器，角色混合时间轴编辑器的推理端 (Onnx 模型的用途）: [MoeVoiceStudio](https://github.com/NaruseMioShirakana/MoeVoiceStudio)\r\n\r\n#### ✨ 改善了交互的一个分支推荐: [34j/so-vits-svc-fork](https://github.com/34j/so-vits-svc-fork)\r\n\r\n#### ✨ 支持实时转换的一个客户端: [w-okada/voice-changer](https://github.com/w-okada/voice-changer)\r\n\r\n**本项目与 Vits 有着根本上的不同。Vits 是 TTS，本项目是 SVC。本项目无法实现 TTS，Vits 也无法实现 SVC，这两个项目的模型是完全不通用的。**\r\n\r\n## 重要通知\r\n\r\n这个项目是为了让开发者最喜欢的动画角色唱歌而开发的，任何涉及真人的东西都与开发者的意图背道而驰。\r\n\r\n## 声明\r\n\r\n本项目为开源、离线的项目，SvcDevelopTeam 的所有成员与本项目的所有开发者以及维护者（以下简称贡献者）对本项目没有控制力。本项目的贡献者从未向任何组织或个人提供包括但不限于数据集提取、数据集加工、算力支持、训练支持、推理等一切形式的帮助；本项目的贡献者不知晓也无法知晓使用者使用该项目的用途。故一切基于本项目训练的 AI 模型和合成的音频都与本项目贡献者无关。一切由此造成的问题由使用者自行承担。\r\n\r\n此项目完全离线运行，不能收集任何用户信息或获取用户输入数据。因此，这个项目的贡献者不知道所有的用户输入和模型，因此不负责任何用户输入。\r\n\r\n本项目只是一个框架项目，本身并没有语音合成的功能，所有的功能都需要用户自己训练模型。同时，这个项目没有任何模型，任何二次分发的项目都与这个项目的贡献者无关。\r\n\r\n## 📏 使用规约\r\n\r\n# Warning：请自行解决数据集授权问题，禁止使用非授权数据集进行训练！任何由于使用非授权数据集进行训练造成的问题，需自行承担全部责任和后果！与仓库、仓库维护者、svc develop team 无关！\r\n\r\n1. 本项目是基于学术交流目的建立，仅供交流与学习使用，并非为生产环境准备。\r\n2. 任何发布到视频平台的基于 sovits 制作的视频，都必须要在简介明确指明用于变声器转换的输入源歌声、音频，例如：使用他人发布的视频 / 音频，通过分离的人声作为输入源进行转换的，必须要给出明确的原视频、音乐链接；若使用是自己的人声，或是使用其他歌声合成引擎合成的声音作为输入源进行转换的，也必须在简介加以说明。\r\n3. 由输入源造成的侵权问题需自行承担全部责任和一切后果。使用其他商用歌声合成软件作为输入源时，请确保遵守该软件的使用条例，注意，许多歌声合成引擎使用条例中明确指明不可用于输入源进行转换！\r\n4. 禁止使用该项目从事违法行为与宗教、政治等活动，该项目维护者坚决抵制上述行为，不同意此条则禁止使用该项目。\r\n5. 继续使用视为已同意本仓库 README 所述相关条例，本仓库 README 已进行劝导义务，不对后续可能存在问题负责。\r\n6. 如果将此项目用于任何其他企划，请提前联系并告知本仓库作者，十分感谢。\r\n\r\n## 📝 模型简介\r\n\r\n歌声音色转换模型，通过 SoftVC 内容编码器提取源音频语音特征，与 F0 同时输入 VITS 替换原本的文本输入达到歌声转换的效果。同时，更换声码器为 [NSF HiFiGAN](https://github.com/openvpi/DiffSinger/tree/refactor/modules/nsf_hifigan) 解决断音问题。\r\n\r\n### 🆕 4.1-Stable 版本更新内容\r\n\r\n+ 特征输入更换为 [Content Vec](https://github.com/auspicious3000/contentvec) 的第 12 层 Transformer 输出，并兼容 4.0 分支\r\n+ 更新浅层扩散，可以使用浅层扩散模型提升音质\r\n+ 增加 whisper 语音编码器的支持\r\n+ 增加静态/动态声线融合\r\n+ 增加响度嵌入\r\n+ 增加特征检索，来自于 [RVC](https://github.com/RVC-Project/Retrieval-based-Voice-Conversion-WebUI)\r\n\r\n### 🆕 关于兼容 4.0 模型的问题\r\n\r\n+ 可通过修改 4.0 模型的 config.json 对 4.0 的模型进行支持，需要在 config.json 的 model 字段中添加 speech_encoder 字段，具体见下\r\n\r\n```\r\n  \"model\": {\r\n    .........\r\n    \"ssl_dim\": 256,\r\n    \"n_speakers\": 200,\r\n    \"speech_encoder\":\"vec256l9\"\r\n  }\r\n```\r\n\r\n### 🆕 关于浅扩散\r\n![Diagram](shadowdiffusion.png)\r\n\r\n## 💬 关于 Python 版本问题\r\n\r\n在进行测试后，我们认为`Python 3.8.9`能够稳定地运行该项目\r\n\r\n## 📥 预先下载的模型文件\r\n\r\n#### **必须项**\r\n\r\n**以下编码器需要选择一个使用**\r\n\r\n##### **1. 若使用 contentvec 作为声音编码器（推荐）**\r\n\r\n`vec768l12`与`vec256l9` 需要该编码器\r\n\r\n+ contentvec ：[checkpoint_best_legacy_500.pt](https://ibm.box.com/s/z1wgl1stco8ffooyatzdwsqn2psd9lrr)\r\n  + 放在`pretrain`目录下\r\n\r\n或者下载下面的 ContentVec，大小只有 199MB，但效果相同：\r\n+ contentvec ：[hubert_base.pt](https://huggingface.co/lj1995/VoiceConversionWebUI/resolve/main/hubert_base.pt)\r\n  + 将文件名改为`checkpoint_best_legacy_500.pt`后，放在`pretrain`目录下\r\n\r\n```shell\r\n# contentvec\r\nwget -P pretrain/ https://huggingface.co/lj1995/VoiceConversionWebUI/resolve/main/hubert_base.pt -O checkpoint_best_legacy_500.pt\r\n# 也可手动下载放在 pretrain 目录\r\n```\r\n\r\n##### **2. 若使用 hubertsoft 作为声音编码器**\r\n+ soft vc hubert：[hubert-soft-0d54a1f4.pt](https://github.com/bshall/hubert/releases/download/v0.1/hubert-soft-0d54a1f4.pt)\r\n  + 放在`pretrain`目录下\r\n\r\n##### **3. 若使用 Whisper-ppg 作为声音编码器**\r\n+ 下载模型 [medium.pt](https://openaipublic.azureedge.net/main/whisper/models/345ae4da62f9b3d59415adc60127b97c714f32e89e936602e85993674d08dcb1/medium.pt), 该模型适配`whisper-ppg`\r\n+ 下载模型 [large-v2.pt](https://openaipublic.azureedge.net/main/whisper/models/81f7c96c852ee8fc832187b0132e569d6c3065a3252ed18e56effd0b6a73e524/large-v2.pt), 该模型适配`whisper-ppg-large`\r\n  + 放在`pretrain`目录下\r\n\r\n##### **4. 若使用 cnhubertlarge 作为声音编码器**\r\n+ 下载模型 [chinese-hubert-large-fairseq-ckpt.pt](https://huggingface.co/TencentGameMate/chinese-hubert-large/resolve/main/chinese-hubert-large-fairseq-ckpt.pt)\r\n  + 放在`pretrain`目录下\r\n\r\n##### **5. 若使用 dphubert 作为声音编码器**\r\n+ 下载模型 [DPHuBERT-sp0.75.pth](https://huggingface.co/pyf98/DPHuBERT/resolve/main/DPHuBERT-sp0.75.pth)\r\n  + 放在`pretrain`目录下\r\n\r\n##### **6. 若使用 WavLM 作为声音编码器**\r\n+ 下载模型 [WavLM-Base+.pt](https://valle.blob.core.windows.net/share/wavlm/WavLM-Base+.pt?sv=2020-08-04&st=2023-03-01T07%3A51%3A05Z&se=2033-03-02T07%3A51%3A00Z&sr=c&sp=rl&sig=QJXmSJG9DbMKf48UDIU1MfzIro8HQOf3sqlNXiflY1I%3D), 该模型适配`wavlmbase+`\r\n  + 放在`pretrain`目录下\r\n\r\n##### **7. 若使用 OnnxHubert/ContentVec 作为声音编码器**\r\n+ 下载模型 [MoeSS-SUBModel](https://huggingface.co/NaruseMioShirakana/MoeSS-SUBModel/tree/main)\r\n  + 放在`pretrain`目录下\r\n\r\n#### **编码器列表**\r\n- \"vec768l12\"\r\n- \"vec256l9\"\r\n- \"vec256l9-onnx\"\r\n- \"vec256l12-onnx\"\r\n- \"vec768l9-onnx\"\r\n- \"vec768l12-onnx\"\r\n- \"hubertsoft-onnx\"\r\n- \"hubertsoft\"\r\n- \"whisper-ppg\"\r\n- \"cnhubertlarge\"\r\n- \"dphubert\"\r\n- \"whisper-ppg-large\"\r\n- \"wavlmbase+\"\r\n\r\n#### **可选项（强烈建议使用）**\r\n\r\n+ 预训练底模文件： `G_0.pth` `D_0.pth`\r\n  + 放在`logs/44k`目录下\r\n\r\n+ 扩散模型预训练底模文件： `model_0.pt`\r\n  + 放在`logs/44k/diffusion`目录下\r\n\r\n从 svc-develop-team（待定）或任何其他地方获取 Sovits 底模\r\n\r\n扩散模型引用了 [Diffusion-SVC](https://github.com/CNChTu/Diffusion-SVC) 的 Diffusion Model，底模与 [Diffusion-SVC](https://github.com/CNChTu/Diffusion-SVC) 的扩散模型底模通用，可以去 [Diffusion-SVC](https://github.com/CNChTu/Diffusion-SVC) 获取扩散模型的底模\r\n\r\n虽然底模一般不会引起什么版权问题，但还是请注意一下，比如事先询问作者，又或者作者在模型描述中明确写明了可行的用途\r\n\r\n#### **可选项（根据情况选择）**\r\n\r\n##### NSF-HIFIGAN\r\n\r\n如果使用`NSF-HIFIGAN 增强器`或`浅层扩散`的话，需要下载预训练的 NSF-HIFIGAN 模型，如果不需要可以不下载\r\n\r\n+ 预训练的 NSF-HIFIGAN 声码器 ：[nsf_hifigan_20221211.zip](https://github.com/openvpi/vocoders/releases/download/nsf-hifigan-v1/nsf_hifigan_20221211.zip)\r\n  + 解压后，将四个文件放在`pretrain/nsf_hifigan`目录下\r\n\r\n```shell\r\n# nsf_hifigan\r\nwget -P pretrain/ https://github.com/openvpi/vocoders/releases/download/nsf-hifigan-v1/nsf_hifigan_20221211.zip\r\nunzip -od pretrain/nsf_hifigan pretrain/nsf_hifigan_20221211.zip\r\n# 也可手动下载放在 pretrain/nsf_hifigan 目录\r\n# 地址：https://github.com/openvpi/vocoders/releases/tag/nsf-hifigan-v1\r\n```\r\n\r\n##### RMVPE\r\n\r\n如果使用`rmvpe`F0预测器的话，需要下载预训练的 RMVPE 模型\r\n\r\n+ 下载模型[rmvpe.zip](https://github.com/yxlllc/RMVPE/releases/download/230917/rmvpe.zip)，目前首推该权重。\r\n  + 解压缩`rmvpe.zip`，并将其中的`model.pt`文件改名为`rmvpe.pt`并放在`pretrain`目录下\r\n\r\n+ ~~下载模型 [rmvpe.pt](https://huggingface.co/datasets/ylzz1997/rmvpe_pretrain_model/resolve/main/rmvpe.pt)~~\r\n  + ~~放在`pretrain`目录下~~\r\n\r\n##### FCPE(预览版)\r\n\r\n> 你说的对,但是[FCPE](https://github.com/CNChTu/MelPE)是由svc-develop-team自主研发的一款全新的F0预测器，后面忘了\r\n\r\n[FCPE(Fast Context-base Pitch Estimator)](https://github.com/CNChTu/MelPE)是一个为实时语音转换所设计的专用F0预测器，他将在未来成为Sovits实时语音转换的首选F0预测器.（论文未来会有的）\r\n\r\n如果使用 `fcpe` F0预测器的话，需要下载预训练的 FCPE 模型\r\n\r\n+ 下载模型 [fcpe.pt](https://huggingface.co/datasets/ylzz1997/rmvpe_pretrain_model/resolve/main/fcpe.pt)\r\n  + 放在`pretrain`目录下\r\n\r\n\r\n## 📊 数据集准备\r\n\r\n仅需要以以下文件结构将数据集放入 dataset_raw 目录即可。\r\n\r\n```\r\ndataset_raw\r\n├───speaker0\r\n│   ├───xxx1-xxx1.wav\r\n│   ├───...\r\n│   └───Lxx-0xx8.wav\r\n└───speaker1\r\n    ├───xx2-0xxx2.wav\r\n    ├───...\r\n    └───xxx7-xxx007.wav\r\n```\r\n对于每一个音频文件的名称并没有格式的限制(`000001.wav`~`999999.wav`之类的命名方式也是合法的)，不过文件类型必须是`wav`。\r\n\r\n可以自定义说话人名称\r\n\r\n```\r\ndataset_raw\r\n└───suijiSUI\r\n    ├───1.wav\r\n    ├───...\r\n    └───25788785-20221210-200143-856_01_(Vocals)_0_0.wav\r\n```\r\n\r\n## 🛠️ 数据预处理\r\n\r\n### 0. 音频切片\r\n\r\n将音频切片至`5s - 15s`, 稍微长点也无伤大雅，实在太长可能会导致训练中途甚至预处理就爆显存\r\n\r\n可以使用 [audio-slicer-GUI](https://github.com/flutydeer/audio-slicer)、[audio-slicer-CLI](https://github.com/openvpi/audio-slicer)\r\n\r\n一般情况下只需调整其中的`Minimum Interval`，普通陈述素材通常保持默认即可，歌唱素材可以调整至`100`甚至`50`\r\n\r\n切完之后手动删除过长过短的音频\r\n\r\n**如果你使用 Whisper-ppg 声音编码器进行训练，所有的切片长度必须小于 30s**\r\n\r\n### 1. 重采样至 44100Hz 单声道\r\n\r\n```shell\r\npython resample.py\r\n```\r\n\r\n#### 注意\r\n\r\n虽然本项目拥有重采样、转换单声道与响度匹配的脚本 resample.py，但是默认的响度匹配是匹配到 0db。这可能会造成音质的受损。而 python 的响度匹配包 pyloudnorm 无法对电平进行压限，这会导致爆音。所以建议可以考虑使用专业声音处理软件如`adobe audition`等软件做响度匹配处理。若已经使用其他软件做响度匹配，可以在运行上述命令时添加`--skip_loudnorm`跳过响度匹配步骤。如：\r\n\r\n```shell\r\npython resample.py --skip_loudnorm\r\n```\r\n\r\n### 2. 自动划分训练集、验证集，以及自动生成配置文件\r\n\r\n```shell\r\npython preprocess_flist_config.py --speech_encoder vec768l12\r\n```\r\n\r\nspeech_encoder 拥有以下选择\r\n\r\n```\r\nvec768l12\r\nvec256l9\r\nhubertsoft\r\nwhisper-ppg\r\nwhisper-ppg-large\r\ncnhubertlarge\r\ndphubert\r\nwavlmbase+\r\n```\r\n\r\n如果省略 speech_encoder 参数，默认值为 vec768l12\r\n\r\n**使用响度嵌入**\r\n\r\n若使用响度嵌入，需要增加`--vol_aug`参数，比如：\r\n\r\n```shell\r\npython preprocess_flist_config.py --speech_encoder vec768l12 --vol_aug\r\n```\r\n使用后训练出的模型将匹配到输入源响度，否则为训练集响度。\r\n\r\n#### 此时可以在生成的 config.json 与 diffusion.yaml 修改部分参数\r\n\r\n##### config.json\r\n\r\n* `keep_ckpts`：训练时保留最后几个模型，`0`为保留所有，默认只保留最后`3`个\r\n\r\n* `all_in_mem`：加载所有数据集到内存中，某些平台的硬盘 IO 过于低下、同时内存容量 **远大于** 数据集体积时可以启用\r\n\r\n* `batch_size`：单次训练加载到 GPU 的数据量，调整到低于显存容量的大小即可\r\n\r\n* `vocoder_name` : 选择一种声码器，默认为`nsf-hifigan`.\r\n\r\n##### diffusion.yaml\r\n\r\n* `cache_all_data`：加载所有数据集到内存中，某些平台的硬盘 IO 过于低下、同时内存容量 **远大于** 数据集体积时可以启用\r\n\r\n* `duration`：训练时音频切片时长，可根据显存大小调整，**注意，该值必须小于训练集内音频的最短时间！**\r\n\r\n* `batch_size`：单次训练加载到 GPU 的数据量，调整到低于显存容量的大小即可\r\n\r\n* `timesteps` : 扩散模型总步数，默认为 1000.\r\n\r\n* `k_step_max` : 训练时可仅训练`k_step_max`步扩散以节约训练时间，注意，该值必须小于`timesteps`，0 为训练整个扩散模型，**注意，如果不训练整个扩散模型将无法使用仅扩散模型推理！**\r\n\r\n##### **声码器列表**\r\n\r\n```\r\nnsf-hifigan\r\nnsf-snake-hifigan\r\n```\r\n\r\n### 3. 生成 hubert 与 f0\r\n\r\n```shell\r\npython preprocess_hubert_f0.py --f0_predictor dio\r\n```\r\n\r\nf0_predictor 拥有以下选择\r\n\r\n```\r\ncrepe\r\ndio\r\npm\r\nharvest\r\nrmvpe\r\nfcpe\r\n```\r\n\r\n如果训练集过于嘈杂，请使用 crepe 处理 f0\r\n\r\n如果省略 f0_predictor 参数，默认值为 rmvpe\r\n\r\n尚若需要浅扩散功能（可选），需要增加--use_diff 参数，比如\r\n\r\n```shell\r\npython preprocess_hubert_f0.py --f0_predictor dio --use_diff\r\n```\r\n\r\n**加速预处理**\r\n如若您的数据集比较大，可以尝试添加`--num_processes`参数：\r\n```shell\r\npython preprocess_hubert_f0.py --f0_predictor dio --use_diff --num_processes 8\r\n```\r\n所有的Workers会被自动分配到多个线程上\r\n\r\n执行完以上步骤后 dataset 目录便是预处理完成的数据，可以删除 dataset_raw 文件夹了\r\n\r\n## 🏋️‍ 训练\r\n\r\n### 主模型训练\r\n\r\n```shell\r\npython train.py -c configs/config.json -m 44k\r\n```\r\n\r\n### 扩散模型（可选）\r\n\r\n尚若需要浅扩散功能，需要训练扩散模型，扩散模型训练方法为：\r\n\r\n```shell\r\npython train_diff.py -c configs/diffusion.yaml\r\n```\r\n\r\n模型训练结束后，模型文件保存在`logs/44k`目录下，扩散模型在`logs/44k/diffusion`下\r\n\r\n## 🤖 推理\r\n\r\n使用 [inference_main.py](inference_main.py)\r\n\r\n```shell\r\n# 例\r\npython inference_main.py -m \"logs/44k/G_30400.pth\" -c \"configs/config.json\" -n \"君の知らない物語-src.wav\" -t 0 -s \"nen\"\r\n```\r\n\r\n必填项部分：\r\n+ `-m` | `--model_path`：模型路径\r\n+ `-c` | `--config_path`：配置文件路径\r\n+ `-n` | `--clean_names`：wav 文件名列表，放在 raw 文件夹下\r\n+ `-t` | `--trans`：音高调整，支持正负（半音）\r\n+ `-s` | `--spk_list`：合成目标说话人名称\r\n+ `-cl` | `--clip`：音频强制切片，默认 0 为自动切片，单位为秒/s\r\n\r\n可选项部分：部分具体见下一节\r\n+ `-lg` | `--linear_gradient`：两段音频切片的交叉淡入长度，如果强制切片后出现人声不连贯可调整该数值，如果连贯建议采用默认值 0，单位为秒\r\n+ `-f0p` | `--f0_predictor`：选择 F0 预测器，可选择 crepe,pm,dio,harvest,rmvpe,fcpe, 默认为 pm（注意：crepe 为原 F0 使用均值滤波器）\r\n+ `-a` | `--auto_predict_f0`：语音转换自动预测音高，转换歌声时不要打开这个会严重跑调\r\n+ `-cm` | `--cluster_model_path`：聚类模型或特征检索索引路径，留空则自动设为各方案模型的默认路径，如果没有训练聚类或特征检索则随便填\r\n+ `-cr` | `--cluster_infer_ratio`：聚类方案或特征检索占比，范围 0-1，若没有训练聚类模型或特征检索则默认 0 即可\r\n+ `-eh` | `--enhance`：是否使用 NSF_HIFIGAN 增强器，该选项对部分训练集少的模型有一定的音质增强效果，但是对训练好的模型有反面效果，默认关闭\r\n+ `-shd` | `--shallow_diffusion`：是否使用浅层扩散，使用后可解决一部分电音问题，默认关闭，该选项打开时，NSF_HIFIGAN 增强器将会被禁止\r\n+ `-usm` | `--use_spk_mix`：是否使用角色融合/动态声线融合\r\n+ `-lea` | `--loudness_envelope_adjustment`：输入源响度包络替换输出响度包络融合比例，越靠近 1 越使用输出响度包络\r\n+ `-fr` | `--feature_retrieval`：是否使用特征检索，如果使用聚类模型将被禁用，且 cm 与 cr 参数将会变成特征检索的索引路径与混合比例\r\n\r\n浅扩散设置：\r\n+ `-dm` | `--diffusion_model_path`：扩散模型路径\r\n+ `-dc` | `--diffusion_config_path`：扩散模型配置文件路径\r\n+ `-ks` | `--k_step`：扩散步数，越大越接近扩散模型的结果，默认 100\r\n+ `-od` | `--only_diffusion`：纯扩散模式，该模式不会加载 sovits 模型，以扩散模型推理\r\n+ `-se` | `--second_encoding`：二次编码，浅扩散前会对原始音频进行二次编码，玄学选项，有时候效果好，有时候效果差\r\n\r\n### 注意！\r\n\r\n如果使用`whisper-ppg` 声音编码器进行推理，需要将`--clip`设置为 25，`-lg`设置为 1。否则将无法正常推理。\r\n\r\n## 🤔 可选项\r\n\r\n如果前面的效果已经满意，或者没看明白下面在讲啥，那后面的内容都可以忽略，不影响模型使用（这些可选项影响比较小，可能在某些特定数据上有点效果，但大部分情况似乎都感知不太明显）\r\n\r\n### 自动 f0 预测\r\n\r\n4.0 模型训练过程会训练一个 f0 预测器，对于语音转换可以开启自动音高预测，如果效果不好也可以使用手动的，但转换歌声时请不要启用此功能！！！会严重跑调！！\r\n+ 在 inference_main 中设置 auto_predict_f0 为 true 即可\r\n\r\n### 聚类音色泄漏控制\r\n\r\n介绍：聚类方案可以减小音色泄漏，使得模型训练出来更像目标的音色（但其实不是特别明显），但是单纯的聚类方案会降低模型的咬字（会口齿不清）（这个很明显），本模型采用了融合的方式，可以线性控制聚类方案与非聚类方案的占比，也就是可以手动在\"像目标音色\" 和 \"咬字清晰\" 之间调整比例，找到合适的折中点\r\n\r\n使用聚类前面的已有步骤不用进行任何的变动，只需要额外训练一个聚类模型，虽然效果比较有限，但训练成本也比较低\r\n\r\n+ 训练过程：\r\n  + 使用 cpu 性能较好的机器训练，据我的经验在腾讯云 6 核 cpu 训练每个 speaker 需要约 4 分钟即可完成训练\r\n  + 执行`python cluster/train_cluster.py`，模型的输出会在`logs/44k/kmeans_10000.pt`\r\n  + 聚类模型目前可以使用 gpu 进行训练，执行`python cluster/train_cluster.py --gpu`\r\n+ 推理过程：\r\n  + `inference_main.py`中指定`cluster_model_path` 为模型输出文件，留空则默认为`logs/44k/kmeans_10000.pt`\r\n  + `inference_main.py`中指定`cluster_infer_ratio`，`0`为完全不使用聚类，`1`为只使用聚类，通常设置`0.5`即可\r\n\r\n### 特征检索\r\n\r\n介绍：跟聚类方案一样可以减小音色泄漏，咬字比聚类稍好，但会降低推理速度，采用了融合的方式，可以线性控制特征检索与非特征检索的占比，\r\n\r\n+ 训练过程：\r\n  首先需要在生成 hubert 与 f0 后执行：\r\n\r\n```shell\r\npython train_index.py -c configs/config.json\r\n```\r\n\r\n模型的输出会在`logs/44k/feature_and_index.pkl`\r\n\r\n+ 推理过程：\r\n  + 需要首先指定`--feature_retrieval`，此时聚类方案会自动切换到特征检索方案\r\n  + `inference_main.py`中指定`cluster_model_path` 为模型输出文件，留空则默认为`logs/44k/feature_and_index.pkl`\r\n  + `inference_main.py`中指定`cluster_infer_ratio`，`0`为完全不使用特征检索，`1`为只使用特征检索，通常设置`0.5`即可\r\n\r\n\r\n## 🗜️ 模型压缩\r\n\r\n生成的模型含有继续训练所需的信息。如果确认不再训练，可以移除模型中此部分信息，得到约 1/3 大小的最终模型。\r\n\r\n使用 [compress_model.py](compress_model.py)\r\n\r\n```shell\r\n# 例\r\npython compress_model.py -c=\"configs/config.json\" -i=\"logs/44k/G_30400.pth\" -o=\"logs/44k/release.pth\"\r\n```\r\n\r\n## 👨‍🔧 声线混合\r\n\r\n### 静态声线混合\r\n\r\n**参考`webUI.py`文件中，小工具/实验室特性的静态声线融合。**\r\n\r\n介绍：该功能可以将多个声音模型合成为一个声音模型（多个模型参数的凸组合或线性组合），从而制造出现实中不存在的声线\r\n**注意：**\r\n\r\n1. 该功能仅支持单说话人的模型\r\n2. 如果强行使用多说话人模型，需要保证多个模型的说话人数量相同，这样可以混合同一个 SpaekerID 下的声音\r\n3. 保证所有待混合模型的 config.json 中的 model 字段是相同的\r\n4. 输出的混合模型可以使用待合成模型的任意一个 config.json，但聚类模型将不能使用\r\n5. 批量上传模型的时候最好把模型放到一个文件夹选中后一起上传\r\n6. 混合比例调整建议大小在 0-100 之间，也可以调为其他数字，但在线性组合模式下会出现未知的效果\r\n7. 混合完毕后，文件将会保存在项目根目录中，文件名为 output.pth\r\n8. 凸组合模式会将混合比例执行 Softmax 使混合比例相加为 1，而线性组合模式不会\r\n\r\n### 动态声线混合\r\n\r\n**参考`spkmix.py`文件中关于动态声线混合的介绍**\r\n\r\n角色混合轨道 编写规则：\r\n\r\n角色 ID : \\[\\[起始时间 1, 终止时间 1, 起始数值 1, 起始数值 1], [起始时间 2, 终止时间 2, 起始数值 2, 起始数值 2]]\r\n\r\n起始时间和前一个的终止时间必须相同，第一个起始时间必须为 0，最后一个终止时间必须为 1 （时间的范围为 0-1）\r\n\r\n全部角色必须填写，不使用的角色填、[\\[0., 1., 0., 0.]] 即可\r\n\r\n融合数值可以随便填，在指定的时间段内从起始数值线性变化为终止数值，内部会自动确保线性组合为 1（凸组合条件），可以放心使用\r\n\r\n推理的时候使用`--use_spk_mix`参数即可启用动态声线混合\r\n\r\n## 📤 Onnx 导出\r\n\r\n使用 [onnx_export.py](onnx_export.py)\r\n\r\n+ 新建文件夹：`checkpoints` 并打开\r\n+ 在`checkpoints`文件夹中新建一个文件夹作为项目文件夹，文件夹名为你的项目名称，比如`aziplayer`\r\n+ 将你的模型更名为`model.pth`，配置文件更名为`config.json`，并放置到刚才创建的`aziplayer`文件夹下\r\n+ 将 [onnx_export.py](onnx_export.py) 中`path = \"NyaruTaffy\"` 的 `\"NyaruTaffy\"` 修改为你的项目名称，`path = \"aziplayer\" (onnx_export_speaker_mix，为支持角色混合的 onnx 导出）`\r\n+ 运行 [onnx_export.py](onnx_export.py)\r\n+ 等待执行完毕，在你的项目文件夹下会生成一个`model.onnx`，即为导出的模型\r\n\r\n注意：Hubert Onnx 模型请使用 MoeSS 提供的模型，目前无法自行导出（fairseq 中 Hubert 有不少 onnx 不支持的算子和涉及到常量的东西，在导出时会报错或者导出的模型输入输出 shape 和结果都有问题）\r\n\r\n## 📎 引用及论文\r\n\r\n| URL | 名称 | 标题 | 源码 |\r\n| --- | ----------- | ----- | --------------------- |\r\n|[2106.06103](https://arxiv.org/abs/2106.06103) | VITS (Synthesizer)| Conditional Variational Autoencoder with Adversarial Learning for End-to-End Text-to-Speech | [jaywalnut310/vits](https://github.com/jaywalnut310/vits) |\r\n|[2111.02392](https://arxiv.org/abs/2111.02392) | SoftVC (Speech Encoder)| A Comparison of Discrete and Soft Speech Units for Improved Voice Conversion | [bshall/hubert](https://github.com/bshall/hubert) |\r\n|[2204.09224](https://arxiv.org/abs/2204.09224) | ContentVec (Speech Encoder)| ContentVec: An Improved Self-Supervised Speech Representation by Disentangling Speakers | [auspicious3000/contentvec](https://github.com/auspicious3000/contentvec) |\r\n|[2212.04356](https://arxiv.org/abs/2212.04356) | Whisper (Speech Encoder) | Robust Speech Recognition via Large-Scale Weak Supervision | [openai/whisper](https://github.com/openai/whisper) |\r\n|[2110.13900](https://arxiv.org/abs/2110.13900) | WavLM (Speech Encoder) | WavLM: Large-Scale Self-Supervised Pre-Training for Full Stack Speech Processing | [microsoft/unilm/wavlm](https://github.com/microsoft/unilm/tree/master/wavlm) |\r\n|[2305.17651](https://arxiv.org/abs/2305.17651) | DPHubert (Speech Encoder) | DPHuBERT: Joint Distillation and Pruning of Self-Supervised Speech Models | [pyf98/DPHuBERT](https://github.com/pyf98/DPHuBERT) |\r\n|[DOI:10.21437/Interspeech.2017-68](http://dx.doi.org/10.21437/Interspeech.2017-68) | Harvest (F0 Predictor) | Harvest: A high-performance fundamental frequency estimator from speech signals | [mmorise/World/harvest](https://github.com/mmorise/World/blob/master/src/harvest.cpp) |\r\n|[aes35-000039](https://www.aes.org/e-lib/online/browse.cfm?elib=15165) | Dio (F0 Predictor) | Fast and reliable F0 estimation method based on the period extraction of vocal fold vibration of singing voice and speech | [mmorise/World/dio](https://github.com/mmorise/World/blob/master/src/dio.cpp) |\r\n|[8461329](https://ieeexplore.ieee.org/document/8461329) | Crepe (F0 Predictor) | Crepe: A Convolutional Representation for Pitch Estimation | [maxrmorrison/torchcrepe](https://github.com/maxrmorrison/torchcrepe) |\r\n|[DOI:10.1016/j.wocn.2018.07.001](https://doi.org/10.1016/j.wocn.2018.07.001) | Parselmouth (F0 Predictor) | Introducing Parselmouth: A Python interface to Praat | [YannickJadoul/Parselmouth](https://github.com/YannickJadoul/Parselmouth) |\r\n|[2306.15412v2](https://arxiv.org/abs/2306.15412v2) | RMVPE (F0 Predictor) | RMVPE: A Robust Model for Vocal Pitch Estimation in Polyphonic Music | [Dream-High/RMVPE](https://github.com/Dream-High/RMVPE) |\r\n|[2010.05646](https://arxiv.org/abs/2010.05646) | HIFIGAN (Vocoder) | HiFi-GAN: Generative Adversarial Networks for Efficient and High Fidelity Speech Synthesis | [jik876/hifi-gan](https://github.com/jik876/hifi-gan) |\r\n|[1810.11946](https://arxiv.org/abs/1810.11946.pdf) | NSF (Vocoder) | Neural source-filter-based waveform model for statistical parametric speech synthesis | [openvpi/DiffSinger/modules/nsf_hifigan](https://github.com/openvpi/DiffSinger/tree/refactor/modules/nsf_hifigan)\r\n|[2006.08195](https://arxiv.org/abs/2006.08195) | Snake (Vocoder) | Neural Networks Fail to Learn Periodic Functions and How to Fix It | [EdwardDixon/snake](https://github.com/EdwardDixon/snake)\r\n|[2105.02446v3](https://arxiv.org/abs/2105.02446v3) | Shallow Diffusion (PostProcessing)| DiffSinger: Singing Voice Synthesis via Shallow Diffusion Mechanism | [CNChTu/Diffusion-SVC](https://github.com/CNChTu/Diffusion-SVC) |\r\n|[K-means](https://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=01D65490BADCC216F350D06F84D721AD?doi=10.1.1.308.8619&rep=rep1&type=pdf) | Feature K-means Clustering (PreProcessing)| Some methods for classification and analysis of multivariate observations | 本代码库 |\r\n| | Feature TopK Retrieval (PreProcessing)| Retrieval based Voice Conversion | [RVC-Project/Retrieval-based-Voice-Conversion-WebUI](https://github.com/RVC-Project/Retrieval-based-Voice-Conversion-WebUI) |\r\n\r\n## ☀️ 旧贡献者\r\n\r\n因为某些原因原作者进行了删库处理，本仓库重建之初由于组织成员疏忽直接重新上传了所有文件导致以前的 contributors 全部木大，现在在 README 里重新添加一个旧贡献者列表\r\n\r\n*某些成员已根据其个人意愿不将其列出*\r\n\r\n<table>\r\n  <tr>\r\n    <td align=\"center\"><a href=\"https://github.com/MistEO\"><img src=\"https://avatars.githubusercontent.com/u/18511905?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>MistEO</b></sub></a><br /></td>\r\n    <td align=\"center\"><a href=\"https://github.com/XiaoMiku01\"><img src=\"https://avatars.githubusercontent.com/u/54094119?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>XiaoMiku01</b></sub></a><br /></td>\r\n    <td align=\"center\"><a href=\"https://github.com/ForsakenRei\"><img src=\"https://avatars.githubusercontent.com/u/23041178?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>しぐれ</b></sub></a><br /></td>\r\n    <td align=\"center\"><a href=\"https://github.com/TomoGaSukunai\"><img src=\"https://avatars.githubusercontent.com/u/25863522?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>TomoGaSukunai</b></sub></a><br /></td>\r\n    <td align=\"center\"><a href=\"https://github.com/Plachtaa\"><img src=\"https://avatars.githubusercontent.com/u/112609742?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Plachtaa</b></sub></a><br /></td>\r\n    <td align=\"center\"><a href=\"https://github.com/zdxiaoda\"><img src=\"https://avatars.githubusercontent.com/u/45501959?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>zd 小达</b></sub></a><br /></td>\r\n    <td align=\"center\"><a href=\"https://github.com/Archivoice\"><img src=\"https://avatars.githubusercontent.com/u/107520869?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>凍聲響世</b></sub></a><br /></td>\r\n  </tr>\r\n</table>\r\n\r\n## 📚 一些法律条例参考\r\n\r\n#### 任何国家，地区，组织和个人使用此项目必须遵守以下法律\r\n\r\n#### 《民法典》\r\n\r\n##### 第一千零一十九条\r\n\r\n任何组织或者个人不得以丑化、污损，或者利用信息技术手段伪造等方式侵害他人的肖像权。未经肖像权人同意，不得制作、使用、公开肖像权人的肖像，但是法律另有规定的除外。未经肖像权人同意，肖像作品权利人不得以发表、复制、发行、出租、展览等方式使用或者公开肖像权人的肖像。对自然人声音的保护，参照适用肖像权保护的有关规定。\r\n\r\n##### 第一千零二十四条\r\n\r\n【名誉权】民事主体享有名誉权。任何组织或者个人不得以侮辱、诽谤等方式侵害他人的名誉权。\r\n\r\n##### 第一千零二十七条\r\n\r\n【作品侵害名誉权】行为人发表的文学、艺术作品以真人真事或者特定人为描述对象，含有侮辱、诽谤内容，侵害他人名誉权的，受害人有权依法请求该行为人承担民事责任。行为人发表的文学、艺术作品不以特定人为描述对象，仅其中的情节与该特定人的情况相似的，不承担民事责任。\r\n\r\n#### 《[中华人民共和国宪法](http://www.gov.cn/guoqing/2018-03/22/content_5276318.htm)》\r\n\r\n#### 《[中华人民共和国刑法](http://gongbao.court.gov.cn/Details/f8e30d0689b23f57bfc782d21035c3.html?sw=中华人民共和国刑法)》\r\n\r\n#### 《[中华人民共和国民法典](http://gongbao.court.gov.cn/Details/51eb6750b8361f79be8f90d09bc202.html)》\r\n\r\n#### 《[中华人民共和国合同法](http://www.npc.gov.cn/zgrdw/npc/lfzt/rlyw/2016-07/01/content_1992739.htm)》\r\n\r\n## 💪 感谢所有的贡献者\r\n<a href=\"https://github.com/svc-develop-team/so-vits-svc/graphs/contributors\" target=\"_blank\">\r\n  <img src=\"https://contrib.rocks/image?repo=svc-develop-team/so-vits-svc\" />\r\n</a>\r\n"
        },
        {
          "name": "cluster",
          "type": "tree",
          "content": null
        },
        {
          "name": "compress_model.py",
          "type": "blob",
          "size": 2.3037109375,
          "content": "from collections import OrderedDict\r\n\r\nimport torch\r\n\r\nimport utils\r\nfrom models import SynthesizerTrn\r\n\r\n\r\ndef copyStateDict(state_dict):\r\n    if list(state_dict.keys())[0].startswith('module'):\r\n        start_idx = 1\r\n    else:\r\n        start_idx = 0\r\n    new_state_dict = OrderedDict()\r\n    for k, v in state_dict.items():\r\n        name = ','.join(k.split('.')[start_idx:])\r\n        new_state_dict[name] = v\r\n    return new_state_dict\r\n\r\n\r\ndef removeOptimizer(config: str, input_model: str, ishalf: bool, output_model: str):\r\n    hps = utils.get_hparams_from_file(config)\r\n\r\n    net_g = SynthesizerTrn(hps.data.filter_length // 2 + 1,\r\n                           hps.train.segment_size // hps.data.hop_length,\r\n                           **hps.model)\r\n\r\n    optim_g = torch.optim.AdamW(net_g.parameters(),\r\n                                hps.train.learning_rate,\r\n                                betas=hps.train.betas,\r\n                                eps=hps.train.eps)\r\n\r\n    state_dict_g = torch.load(input_model, map_location=\"cpu\")\r\n    new_dict_g = copyStateDict(state_dict_g)\r\n    keys = []\r\n    for k, v in new_dict_g['model'].items():\r\n        if \"enc_q\" in k: continue  # noqa: E701\r\n        keys.append(k)\r\n    \r\n    new_dict_g = {k: new_dict_g['model'][k].half() for k in keys} if ishalf else {k: new_dict_g['model'][k] for k in keys}\r\n\r\n    torch.save(\r\n        {\r\n            'model': new_dict_g,\r\n            'iteration': 0,\r\n            'optimizer': optim_g.state_dict(),\r\n            'learning_rate': 0.0001\r\n        }, output_model)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    import argparse\r\n    parser = argparse.ArgumentParser()\r\n    parser.add_argument(\"-c\",\r\n                        \"--config\",\r\n                        type=str,\r\n                        default='configs/config.json')\r\n    parser.add_argument(\"-i\", \"--input\", type=str)\r\n    parser.add_argument(\"-o\", \"--output\", type=str, default=None)\r\n    parser.add_argument('-hf', '--half', action='store_true', default=False, help='Save as FP16')\r\n    \r\n    args = parser.parse_args()\r\n\r\n    output = args.output\r\n\r\n    if output is None:\r\n        import os.path\r\n        filename, ext = os.path.splitext(args.input)\r\n        half = \"_half\" if args.half else \"\"\r\n        output = filename + \"_release\" + half + ext\r\n\r\n    removeOptimizer(args.config, args.input, args.half, output)"
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "configs_template",
          "type": "tree",
          "content": null
        },
        {
          "name": "data_utils.py",
          "type": "blob",
          "size": 6.8740234375,
          "content": "import os\nimport random\n\nimport numpy as np\nimport torch\nimport torch.utils.data\n\nimport utils\nfrom modules.mel_processing import spectrogram_torch\nfrom utils import load_filepaths_and_text, load_wav_to_torch\n\n# import h5py\n\n\n\"\"\"Multi speaker version\"\"\"\n\n\nclass TextAudioSpeakerLoader(torch.utils.data.Dataset):\n    \"\"\"\n        1) loads audio, speaker_id, text pairs\n        2) normalizes text and converts them to sequences of integers\n        3) computes spectrograms from audio files.\n    \"\"\"\n\n    def __init__(self, audiopaths, hparams, all_in_mem: bool = False, vol_aug: bool = True):\n        self.audiopaths = load_filepaths_and_text(audiopaths)\n        self.hparams = hparams\n        self.max_wav_value = hparams.data.max_wav_value\n        self.sampling_rate = hparams.data.sampling_rate\n        self.filter_length = hparams.data.filter_length\n        self.hop_length = hparams.data.hop_length\n        self.win_length = hparams.data.win_length\n        self.unit_interpolate_mode = hparams.data.unit_interpolate_mode\n        self.sampling_rate = hparams.data.sampling_rate\n        self.use_sr = hparams.train.use_sr\n        self.spec_len = hparams.train.max_speclen\n        self.spk_map = hparams.spk\n        self.vol_emb = hparams.model.vol_embedding\n        self.vol_aug = hparams.train.vol_aug and vol_aug\n        random.seed(1234)\n        random.shuffle(self.audiopaths)\n        \n        self.all_in_mem = all_in_mem\n        if self.all_in_mem:\n            self.cache = [self.get_audio(p[0]) for p in self.audiopaths]\n\n    def get_audio(self, filename):\n        filename = filename.replace(\"\\\\\", \"/\")\n        audio, sampling_rate = load_wav_to_torch(filename)\n        if sampling_rate != self.sampling_rate:\n            raise ValueError(\n                \"Sample Rate not match. Expect {} but got {} from {}\".format(\n                    self.sampling_rate, sampling_rate, filename))\n        audio_norm = audio / self.max_wav_value\n        audio_norm = audio_norm.unsqueeze(0)\n        spec_filename = filename.replace(\".wav\", \".spec.pt\")\n\n        # Ideally, all data generated after Mar 25 should have .spec.pt\n        if os.path.exists(spec_filename):\n            spec = torch.load(spec_filename)\n        else:\n            spec = spectrogram_torch(audio_norm, self.filter_length,\n                                     self.sampling_rate, self.hop_length, self.win_length,\n                                     center=False)\n            spec = torch.squeeze(spec, 0)\n            torch.save(spec, spec_filename)\n\n        spk = filename.split(\"/\")[-2]\n        spk = torch.LongTensor([self.spk_map[spk]])\n\n        f0, uv = np.load(filename + \".f0.npy\",allow_pickle=True)\n        \n        f0 = torch.FloatTensor(np.array(f0,dtype=float))\n        uv = torch.FloatTensor(np.array(uv,dtype=float))\n\n        c = torch.load(filename+ \".soft.pt\")\n        c = utils.repeat_expand_2d(c.squeeze(0), f0.shape[0], mode=self.unit_interpolate_mode)\n        if self.vol_emb:\n            volume_path = filename + \".vol.npy\"\n            volume = np.load(volume_path)\n            volume = torch.from_numpy(volume).float()\n        else:\n            volume = None\n\n        lmin = min(c.size(-1), spec.size(-1))\n        assert abs(c.size(-1) - spec.size(-1)) < 3, (c.size(-1), spec.size(-1), f0.shape, filename)\n        assert abs(audio_norm.shape[1]-lmin * self.hop_length) < 3 * self.hop_length\n        spec, c, f0, uv = spec[:, :lmin], c[:, :lmin], f0[:lmin], uv[:lmin]\n        audio_norm = audio_norm[:, :lmin * self.hop_length]\n        if volume is not None:\n            volume = volume[:lmin]\n        return c, f0, spec, audio_norm, spk, uv, volume\n\n    def random_slice(self, c, f0, spec, audio_norm, spk, uv, volume):\n        # if spec.shape[1] < 30:\n        #     print(\"skip too short audio:\", filename)\n        #     return None\n\n        if random.choice([True, False]) and self.vol_aug and volume is not None:\n            max_amp = float(torch.max(torch.abs(audio_norm))) + 1e-5\n            max_shift = min(1, np.log10(1/max_amp))\n            log10_vol_shift = random.uniform(-1, max_shift)\n            audio_norm = audio_norm * (10 ** log10_vol_shift)\n            volume = volume * (10 ** log10_vol_shift)\n            spec = spectrogram_torch(audio_norm,\n            self.hparams.data.filter_length,\n            self.hparams.data.sampling_rate,\n            self.hparams.data.hop_length,\n            self.hparams.data.win_length,\n            center=False)[0]\n\n        if spec.shape[1] > 800:\n            start = random.randint(0, spec.shape[1]-800)\n            end = start + 790\n            spec, c, f0, uv = spec[:, start:end], c[:, start:end], f0[start:end], uv[start:end]\n            audio_norm = audio_norm[:, start * self.hop_length : end * self.hop_length]\n            if volume is not None:\n                volume = volume[start:end]\n        return c, f0, spec, audio_norm, spk, uv,volume\n\n    def __getitem__(self, index):\n        if self.all_in_mem:\n            return self.random_slice(*self.cache[index])\n        else:\n            return self.random_slice(*self.get_audio(self.audiopaths[index][0]))\n\n    def __len__(self):\n        return len(self.audiopaths)\n\n\nclass TextAudioCollate:\n\n    def __call__(self, batch):\n        batch = [b for b in batch if b is not None]\n\n        input_lengths, ids_sorted_decreasing = torch.sort(\n            torch.LongTensor([x[0].shape[1] for x in batch]),\n            dim=0, descending=True)\n\n        max_c_len = max([x[0].size(1) for x in batch])\n        max_wav_len = max([x[3].size(1) for x in batch])\n\n        lengths = torch.LongTensor(len(batch))\n\n        c_padded = torch.FloatTensor(len(batch), batch[0][0].shape[0], max_c_len)\n        f0_padded = torch.FloatTensor(len(batch), max_c_len)\n        spec_padded = torch.FloatTensor(len(batch), batch[0][2].shape[0], max_c_len)\n        wav_padded = torch.FloatTensor(len(batch), 1, max_wav_len)\n        spkids = torch.LongTensor(len(batch), 1)\n        uv_padded = torch.FloatTensor(len(batch), max_c_len)\n        volume_padded = torch.FloatTensor(len(batch), max_c_len)\n\n        c_padded.zero_()\n        spec_padded.zero_()\n        f0_padded.zero_()\n        wav_padded.zero_()\n        uv_padded.zero_()\n        volume_padded.zero_()\n\n        for i in range(len(ids_sorted_decreasing)):\n            row = batch[ids_sorted_decreasing[i]]\n\n            c = row[0]\n            c_padded[i, :, :c.size(1)] = c\n            lengths[i] = c.size(1)\n\n            f0 = row[1]\n            f0_padded[i, :f0.size(0)] = f0\n\n            spec = row[2]\n            spec_padded[i, :, :spec.size(1)] = spec\n\n            wav = row[3]\n            wav_padded[i, :, :wav.size(1)] = wav\n\n            spkids[i, 0] = row[4]\n\n            uv = row[5]\n            uv_padded[i, :uv.size(0)] = uv\n            volume = row[6]\n            if volume is not None:\n                volume_padded[i, :volume.size(0)] = volume\n            else :\n                volume_padded = None\n        return c_padded, f0_padded, spec_padded, wav_padded, spkids, lengths, uv_padded, volume_padded\n"
        },
        {
          "name": "dataset_raw",
          "type": "tree",
          "content": null
        },
        {
          "name": "diffusion",
          "type": "tree",
          "content": null
        },
        {
          "name": "edgetts",
          "type": "tree",
          "content": null
        },
        {
          "name": "export_index_for_onnx.py",
          "type": "blob",
          "size": 0.4013671875,
          "content": "import os\nimport pickle\n\nimport faiss\n\npath = \"crs\"\nindexs_file_path = f\"checkpoints/{path}/feature_and_index.pkl\"\nindexs_out_dir = f\"checkpoints/{path}/\"\n\nwith open(\"feature_and_index.pkl\",mode=\"rb\") as f:\n    indexs = pickle.load(f)\n\nfor k in indexs:\n    print(f\"Save {k} index\")\n    faiss.write_index(\n        indexs[k],\n        os.path.join(indexs_out_dir,f\"Index-{k}.index\")\n    )\n\nprint(\"Saved all index\")"
        },
        {
          "name": "filelists",
          "type": "tree",
          "content": null
        },
        {
          "name": "flask_api.py",
          "type": "blob",
          "size": 2.50390625,
          "content": "import io\nimport logging\n\nimport soundfile\nimport torch\nimport torchaudio\nfrom flask import Flask, request, send_file\nfrom flask_cors import CORS\n\nfrom inference.infer_tool import RealTimeVC, Svc\n\napp = Flask(__name__)\n\nCORS(app)\n\nlogging.getLogger('numba').setLevel(logging.WARNING)\n\n\n@app.route(\"/voiceChangeModel\", methods=[\"POST\"])\ndef voice_change_model():\n    request_form = request.form\n    wave_file = request.files.get(\"sample\", None)\n    # 变调信息\n    f_pitch_change = float(request_form.get(\"fPitchChange\", 0))\n    # DAW所需的采样率\n    daw_sample = int(float(request_form.get(\"sampleRate\", 0)))\n    speaker_id = int(float(request_form.get(\"sSpeakId\", 0)))\n    # http获得wav文件并转换\n    input_wav_path = io.BytesIO(wave_file.read())\n\n    # 模型推理\n    if raw_infer:\n        # out_audio, out_sr = svc_model.infer(speaker_id, f_pitch_change, input_wav_path)\n        out_audio, out_sr = svc_model.infer(speaker_id, f_pitch_change, input_wav_path, cluster_infer_ratio=0,\n                                            auto_predict_f0=False, noice_scale=0.4, f0_filter=False)\n        tar_audio = torchaudio.functional.resample(out_audio, svc_model.target_sample, daw_sample)\n    else:\n        out_audio = svc.process(svc_model, speaker_id, f_pitch_change, input_wav_path, cluster_infer_ratio=0,\n                                auto_predict_f0=False, noice_scale=0.4, f0_filter=False)\n        tar_audio = torchaudio.functional.resample(torch.from_numpy(out_audio), svc_model.target_sample, daw_sample)\n    # 返回音频\n    out_wav_path = io.BytesIO()\n    soundfile.write(out_wav_path, tar_audio.cpu().numpy(), daw_sample, format=\"wav\")\n    out_wav_path.seek(0)\n    return send_file(out_wav_path, download_name=\"temp.wav\", as_attachment=True)\n\n\nif __name__ == '__main__':\n    # 启用则为直接切片合成，False为交叉淡化方式\n    # vst插件调整0.3-0.5s切片时间可以降低延迟，直接切片方法会有连接处爆音、交叉淡化会有轻微重叠声音\n    # 自行选择能接受的方法，或将vst最大切片时间调整为1s，此处设为Ture，延迟大音质稳定一些\n    raw_infer = True\n    # 每个模型和config是唯一对应的\n    model_name = \"logs/32k/G_174000-Copy1.pth\"\n    config_name = \"configs/config.json\"\n    cluster_model_path = \"logs/44k/kmeans_10000.pt\"\n    svc_model = Svc(model_name, config_name, cluster_model_path=cluster_model_path)\n    svc = RealTimeVC()\n    # 此处与vst插件对应，不建议更改\n    app.run(port=6842, host=\"0.0.0.0\", debug=False, threaded=False)\n"
        },
        {
          "name": "flask_api_full_song.py",
          "type": "blob",
          "size": 2.08203125,
          "content": "import io\n\nimport numpy as np\nimport soundfile\nfrom flask import Flask, request, send_file\n\nfrom inference import infer_tool, slicer\n\napp = Flask(__name__)\n\n\n@app.route(\"/wav2wav\", methods=[\"POST\"])\ndef wav2wav():\n    request_form = request.form\n    audio_path = request_form.get(\"audio_path\", None)  # wav文件地址\n    tran = int(float(request_form.get(\"tran\", 0)))  # 音调\n    spk = request_form.get(\"spk\", 0)  # 说话人(id或者name都可以,具体看你的config)\n    wav_format = request_form.get(\"wav_format\", 'wav')  # 范围文件格式\n    infer_tool.format_wav(audio_path)\n    chunks = slicer.cut(audio_path, db_thresh=-40)\n    audio_data, audio_sr = slicer.chunks2audio(audio_path, chunks)\n\n    audio = []\n    for (slice_tag, data) in audio_data:\n        print(f'#=====segment start, {round(len(data) / audio_sr, 3)}s======')\n\n        length = int(np.ceil(len(data) / audio_sr * svc_model.target_sample))\n        if slice_tag:\n            print('jump empty segment')\n            _audio = np.zeros(length)\n        else:\n            # padd\n            pad_len = int(audio_sr * 0.5)\n            data = np.concatenate([np.zeros([pad_len]), data, np.zeros([pad_len])])\n            raw_path = io.BytesIO()\n            soundfile.write(raw_path, data, audio_sr, format=\"wav\")\n            raw_path.seek(0)\n            out_audio, out_sr = svc_model.infer(spk, tran, raw_path)\n            svc_model.clear_empty()\n            _audio = out_audio.cpu().numpy()\n            pad_len = int(svc_model.target_sample * 0.5)\n            _audio = _audio[pad_len:-pad_len]\n\n        audio.extend(list(infer_tool.pad_array(_audio, length)))\n    out_wav_path = io.BytesIO()\n    soundfile.write(out_wav_path, audio, svc_model.target_sample, format=wav_format)\n    out_wav_path.seek(0)\n    return send_file(out_wav_path, download_name=f\"temp.{wav_format}\", as_attachment=True)\n\n\nif __name__ == '__main__':\n    model_name = \"logs/44k/G_60000.pth\"  # 模型地址\n    config_name = \"configs/config.json\"  # config地址\n    svc_model = infer_tool.Svc(model_name, config_name)\n    app.run(port=1145, host=\"0.0.0.0\", debug=False, threaded=False)\n"
        },
        {
          "name": "inference",
          "type": "tree",
          "content": null
        },
        {
          "name": "inference_main.py",
          "type": "blob",
          "size": 9.130859375,
          "content": "import logging\n\nimport soundfile\n\nfrom inference import infer_tool\nfrom inference.infer_tool import Svc\nfrom spkmix import spk_mix_map\n\nlogging.getLogger('numba').setLevel(logging.WARNING)\nchunks_dict = infer_tool.read_temp(\"inference/chunks_temp.json\")\n\n\n\ndef main():\n    import argparse\n\n    parser = argparse.ArgumentParser(description='sovits4 inference')\n\n    # 一定要设置的部分\n    parser.add_argument('-m', '--model_path', type=str, default=\"logs/44k/G_37600.pth\", help='模型路径')\n    parser.add_argument('-c', '--config_path', type=str, default=\"logs/44k/config.json\", help='配置文件路径')\n    parser.add_argument('-cl', '--clip', type=float, default=0, help='音频强制切片，默认0为自动切片，单位为秒/s')\n    parser.add_argument('-n', '--clean_names', type=str, nargs='+', default=[\"君の知らない物語-src.wav\"], help='wav文件名列表，放在raw文件夹下')\n    parser.add_argument('-t', '--trans', type=int, nargs='+', default=[0], help='音高调整，支持正负（半音）')\n    parser.add_argument('-s', '--spk_list', type=str, nargs='+', default=['buyizi'], help='合成目标说话人名称')\n    \n    # 可选项部分\n    parser.add_argument('-a', '--auto_predict_f0', action='store_true', default=False, help='语音转换自动预测音高，转换歌声时不要打开这个会严重跑调')\n    parser.add_argument('-cm', '--cluster_model_path', type=str, default=\"\", help='聚类模型或特征检索索引路径，留空则自动设为各方案模型的默认路径，如果没有训练聚类或特征检索则随便填')\n    parser.add_argument('-cr', '--cluster_infer_ratio', type=float, default=0, help='聚类方案或特征检索占比，范围0-1，若没有训练聚类模型或特征检索则默认0即可')\n    parser.add_argument('-lg', '--linear_gradient', type=float, default=0, help='两段音频切片的交叉淡入长度，如果强制切片后出现人声不连贯可调整该数值，如果连贯建议采用默认值0，单位为秒')\n    parser.add_argument('-f0p', '--f0_predictor', type=str, default=\"pm\", help='选择F0预测器,可选择crepe,pm,dio,harvest,rmvpe,fcpe默认为pm(注意：crepe为原F0使用均值滤波器)')\n    parser.add_argument('-eh', '--enhance', action='store_true', default=False, help='是否使用NSF_HIFIGAN增强器,该选项对部分训练集少的模型有一定的音质增强效果，但是对训练好的模型有反面效果，默认关闭')\n    parser.add_argument('-shd', '--shallow_diffusion', action='store_true', default=False, help='是否使用浅层扩散，使用后可解决一部分电音问题，默认关闭，该选项打开时，NSF_HIFIGAN增强器将会被禁止')\n    parser.add_argument('-usm', '--use_spk_mix', action='store_true', default=False, help='是否使用角色融合')\n    parser.add_argument('-lea', '--loudness_envelope_adjustment', type=float, default=1, help='输入源响度包络替换输出响度包络融合比例，越靠近1越使用输出响度包络')\n    parser.add_argument('-fr', '--feature_retrieval', action='store_true', default=False, help='是否使用特征检索，如果使用聚类模型将被禁用，且cm与cr参数将会变成特征检索的索引路径与混合比例')\n\n    # 浅扩散设置\n    parser.add_argument('-dm', '--diffusion_model_path', type=str, default=\"logs/44k/diffusion/model_0.pt\", help='扩散模型路径')\n    parser.add_argument('-dc', '--diffusion_config_path', type=str, default=\"logs/44k/diffusion/config.yaml\", help='扩散模型配置文件路径')\n    parser.add_argument('-ks', '--k_step', type=int, default=100, help='扩散步数，越大越接近扩散模型的结果，默认100')\n    parser.add_argument('-se', '--second_encoding', action='store_true', default=False, help='二次编码，浅扩散前会对原始音频进行二次编码，玄学选项，有时候效果好，有时候效果差')\n    parser.add_argument('-od', '--only_diffusion', action='store_true', default=False, help='纯扩散模式，该模式不会加载sovits模型，以扩散模型推理')\n    \n\n    # 不用动的部分\n    parser.add_argument('-sd', '--slice_db', type=int, default=-40, help='默认-40，嘈杂的音频可以-30，干声保留呼吸可以-50')\n    parser.add_argument('-d', '--device', type=str, default=None, help='推理设备，None则为自动选择cpu和gpu')\n    parser.add_argument('-ns', '--noice_scale', type=float, default=0.4, help='噪音级别，会影响咬字和音质，较为玄学')\n    parser.add_argument('-p', '--pad_seconds', type=float, default=0.5, help='推理音频pad秒数，由于未知原因开头结尾会有异响，pad一小段静音段后就不会出现')\n    parser.add_argument('-wf', '--wav_format', type=str, default='flac', help='音频输出格式')\n    parser.add_argument('-lgr', '--linear_gradient_retain', type=float, default=0.75, help='自动音频切片后，需要舍弃每段切片的头尾。该参数设置交叉长度保留的比例，范围0-1,左开右闭')\n    parser.add_argument('-eak', '--enhancer_adaptive_key', type=int, default=0, help='使增强器适应更高的音域(单位为半音数)|默认为0')\n    parser.add_argument('-ft', '--f0_filter_threshold', type=float, default=0.05,help='F0过滤阈值，只有使用crepe时有效. 数值范围从0-1. 降低该值可减少跑调概率，但会增加哑音')\n\n\n    args = parser.parse_args()\n\n    clean_names = args.clean_names\n    trans = args.trans\n    spk_list = args.spk_list\n    slice_db = args.slice_db\n    wav_format = args.wav_format\n    auto_predict_f0 = args.auto_predict_f0\n    cluster_infer_ratio = args.cluster_infer_ratio\n    noice_scale = args.noice_scale\n    pad_seconds = args.pad_seconds\n    clip = args.clip\n    lg = args.linear_gradient\n    lgr = args.linear_gradient_retain\n    f0p = args.f0_predictor\n    enhance = args.enhance\n    enhancer_adaptive_key = args.enhancer_adaptive_key\n    cr_threshold = args.f0_filter_threshold\n    diffusion_model_path = args.diffusion_model_path\n    diffusion_config_path = args.diffusion_config_path\n    k_step = args.k_step\n    only_diffusion = args.only_diffusion\n    shallow_diffusion = args.shallow_diffusion\n    use_spk_mix = args.use_spk_mix\n    second_encoding = args.second_encoding\n    loudness_envelope_adjustment = args.loudness_envelope_adjustment\n\n    if cluster_infer_ratio != 0:\n        if args.cluster_model_path == \"\":\n            if args.feature_retrieval:  # 若指定了占比但没有指定模型路径，则按是否使用特征检索分配默认的模型路径\n                args.cluster_model_path = \"logs/44k/feature_and_index.pkl\"\n            else:\n                args.cluster_model_path = \"logs/44k/kmeans_10000.pt\"\n    else:  # 若未指定占比，则无论是否指定模型路径，都将其置空以避免之后的模型加载\n        args.cluster_model_path = \"\"\n\n    svc_model = Svc(args.model_path,\n                    args.config_path,\n                    args.device,\n                    args.cluster_model_path,\n                    enhance,\n                    diffusion_model_path,\n                    diffusion_config_path,\n                    shallow_diffusion,\n                    only_diffusion,\n                    use_spk_mix,\n                    args.feature_retrieval)\n    \n    infer_tool.mkdir([\"raw\", \"results\"])\n    \n    if len(spk_mix_map)<=1:\n        use_spk_mix = False\n    if use_spk_mix:\n        spk_list = [spk_mix_map]\n    \n    infer_tool.fill_a_to_b(trans, clean_names)\n    for clean_name, tran in zip(clean_names, trans):\n        raw_audio_path = f\"raw/{clean_name}\"\n        if \".\" not in raw_audio_path:\n            raw_audio_path += \".wav\"\n        infer_tool.format_wav(raw_audio_path)\n        for spk in spk_list:\n            kwarg = {\n                \"raw_audio_path\" : raw_audio_path,\n                \"spk\" : spk,\n                \"tran\" : tran,\n                \"slice_db\" : slice_db,\n                \"cluster_infer_ratio\" : cluster_infer_ratio,\n                \"auto_predict_f0\" : auto_predict_f0,\n                \"noice_scale\" : noice_scale,\n                \"pad_seconds\" : pad_seconds,\n                \"clip_seconds\" : clip,\n                \"lg_num\": lg,\n                \"lgr_num\" : lgr,\n                \"f0_predictor\" : f0p,\n                \"enhancer_adaptive_key\" : enhancer_adaptive_key,\n                \"cr_threshold\" : cr_threshold,\n                \"k_step\":k_step,\n                \"use_spk_mix\":use_spk_mix,\n                \"second_encoding\":second_encoding,\n                \"loudness_envelope_adjustment\":loudness_envelope_adjustment\n            }\n            audio = svc_model.slice_inference(**kwarg)\n            key = \"auto\" if auto_predict_f0 else f\"{tran}key\"\n            cluster_name = \"\" if cluster_infer_ratio == 0 else f\"_{cluster_infer_ratio}\"\n            isdiffusion = \"sovits\"\n            if shallow_diffusion :\n                isdiffusion = \"sovdiff\"\n            if only_diffusion :\n                isdiffusion = \"diff\"\n            if use_spk_mix:\n                spk = \"spk_mix\"\n            res_path = f'results/{clean_name}_{key}_{spk}{cluster_name}_{isdiffusion}_{f0p}.{wav_format}'\n            soundfile.write(res_path, audio, svc_model.target_sample, format=wav_format)\n            svc_model.clear_empty()\n            \nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "logs",
          "type": "tree",
          "content": null
        },
        {
          "name": "models.py",
          "type": "blob",
          "size": 19.986328125,
          "content": "import torch\nfrom torch import nn\nfrom torch.nn import Conv1d, Conv2d\nfrom torch.nn import functional as F\nfrom torch.nn.utils import spectral_norm, weight_norm\n\nimport modules.attentions as attentions\nimport modules.commons as commons\nimport modules.modules as modules\nimport utils\nfrom modules.commons import get_padding\nfrom utils import f0_to_coarse\n\n\nclass ResidualCouplingBlock(nn.Module):\n    def __init__(self,\n                 channels,\n                 hidden_channels,\n                 kernel_size,\n                 dilation_rate,\n                 n_layers,\n                 n_flows=4,\n                 gin_channels=0,\n                 share_parameter=False\n                 ):\n        super().__init__()\n        self.channels = channels\n        self.hidden_channels = hidden_channels\n        self.kernel_size = kernel_size\n        self.dilation_rate = dilation_rate\n        self.n_layers = n_layers\n        self.n_flows = n_flows\n        self.gin_channels = gin_channels\n\n        self.flows = nn.ModuleList()\n\n        self.wn = modules.WN(hidden_channels, kernel_size, dilation_rate, n_layers, p_dropout=0, gin_channels=gin_channels) if share_parameter else None\n\n        for i in range(n_flows):\n            self.flows.append(\n                modules.ResidualCouplingLayer(channels, hidden_channels, kernel_size, dilation_rate, n_layers,\n                                              gin_channels=gin_channels, mean_only=True, wn_sharing_parameter=self.wn))\n            self.flows.append(modules.Flip())\n\n    def forward(self, x, x_mask, g=None, reverse=False):\n        if not reverse:\n            for flow in self.flows:\n                x, _ = flow(x, x_mask, g=g, reverse=reverse)\n        else:\n            for flow in reversed(self.flows):\n                x = flow(x, x_mask, g=g, reverse=reverse)\n        return x\n\nclass TransformerCouplingBlock(nn.Module):\n    def __init__(self,\n                 channels,\n                 hidden_channels,\n                 filter_channels,\n                 n_heads,\n                 n_layers,\n                 kernel_size,\n                 p_dropout,\n                 n_flows=4,\n                 gin_channels=0,\n                 share_parameter=False\n                 ):\n            \n        super().__init__()\n        self.channels = channels\n        self.hidden_channels = hidden_channels\n        self.kernel_size = kernel_size\n        self.n_layers = n_layers\n        self.n_flows = n_flows\n        self.gin_channels = gin_channels\n\n        self.flows = nn.ModuleList()\n\n        self.wn = attentions.FFT(hidden_channels, filter_channels, n_heads, n_layers, kernel_size, p_dropout, isflow = True, gin_channels = self.gin_channels) if share_parameter else None\n\n        for i in range(n_flows):\n            self.flows.append(\n                modules.TransformerCouplingLayer(channels, hidden_channels, kernel_size, n_layers, n_heads, p_dropout, filter_channels, mean_only=True, wn_sharing_parameter=self.wn, gin_channels = self.gin_channels))\n            self.flows.append(modules.Flip())\n\n    def forward(self, x, x_mask, g=None, reverse=False):\n        if not reverse:\n            for flow in self.flows:\n                x, _ = flow(x, x_mask, g=g, reverse=reverse)\n        else:\n            for flow in reversed(self.flows):\n                x = flow(x, x_mask, g=g, reverse=reverse)\n        return x\n\n\nclass Encoder(nn.Module):\n    def __init__(self,\n                 in_channels,\n                 out_channels,\n                 hidden_channels,\n                 kernel_size,\n                 dilation_rate,\n                 n_layers,\n                 gin_channels=0):\n        super().__init__()\n        self.in_channels = in_channels\n        self.out_channels = out_channels\n        self.hidden_channels = hidden_channels\n        self.kernel_size = kernel_size\n        self.dilation_rate = dilation_rate\n        self.n_layers = n_layers\n        self.gin_channels = gin_channels\n\n        self.pre = nn.Conv1d(in_channels, hidden_channels, 1)\n        self.enc = modules.WN(hidden_channels, kernel_size, dilation_rate, n_layers, gin_channels=gin_channels)\n        self.proj = nn.Conv1d(hidden_channels, out_channels * 2, 1)\n\n    def forward(self, x, x_lengths, g=None):\n        # print(x.shape,x_lengths.shape)\n        x_mask = torch.unsqueeze(commons.sequence_mask(x_lengths, x.size(2)), 1).to(x.dtype)\n        x = self.pre(x) * x_mask\n        x = self.enc(x, x_mask, g=g)\n        stats = self.proj(x) * x_mask\n        m, logs = torch.split(stats, self.out_channels, dim=1)\n        z = (m + torch.randn_like(m) * torch.exp(logs)) * x_mask\n        return z, m, logs, x_mask\n\n\nclass TextEncoder(nn.Module):\n    def __init__(self,\n                 out_channels,\n                 hidden_channels,\n                 kernel_size,\n                 n_layers,\n                 gin_channels=0,\n                 filter_channels=None,\n                 n_heads=None,\n                 p_dropout=None):\n        super().__init__()\n        self.out_channels = out_channels\n        self.hidden_channels = hidden_channels\n        self.kernel_size = kernel_size\n        self.n_layers = n_layers\n        self.gin_channels = gin_channels\n        self.proj = nn.Conv1d(hidden_channels, out_channels * 2, 1)\n        self.f0_emb = nn.Embedding(256, hidden_channels)\n\n        self.enc_ = attentions.Encoder(\n            hidden_channels,\n            filter_channels,\n            n_heads,\n            n_layers,\n            kernel_size,\n            p_dropout)\n\n    def forward(self, x, x_mask, f0=None, noice_scale=1):\n        x = x + self.f0_emb(f0).transpose(1, 2)\n        x = self.enc_(x * x_mask, x_mask)\n        stats = self.proj(x) * x_mask\n        m, logs = torch.split(stats, self.out_channels, dim=1)\n        z = (m + torch.randn_like(m) * torch.exp(logs) * noice_scale) * x_mask\n\n        return z, m, logs, x_mask\n\n\nclass DiscriminatorP(torch.nn.Module):\n    def __init__(self, period, kernel_size=5, stride=3, use_spectral_norm=False):\n        super(DiscriminatorP, self).__init__()\n        self.period = period\n        self.use_spectral_norm = use_spectral_norm\n        norm_f = weight_norm if use_spectral_norm is False else spectral_norm\n        self.convs = nn.ModuleList([\n            norm_f(Conv2d(1, 32, (kernel_size, 1), (stride, 1), padding=(get_padding(kernel_size, 1), 0))),\n            norm_f(Conv2d(32, 128, (kernel_size, 1), (stride, 1), padding=(get_padding(kernel_size, 1), 0))),\n            norm_f(Conv2d(128, 512, (kernel_size, 1), (stride, 1), padding=(get_padding(kernel_size, 1), 0))),\n            norm_f(Conv2d(512, 1024, (kernel_size, 1), (stride, 1), padding=(get_padding(kernel_size, 1), 0))),\n            norm_f(Conv2d(1024, 1024, (kernel_size, 1), 1, padding=(get_padding(kernel_size, 1), 0))),\n        ])\n        self.conv_post = norm_f(Conv2d(1024, 1, (3, 1), 1, padding=(1, 0)))\n\n    def forward(self, x):\n        fmap = []\n\n        # 1d to 2d\n        b, c, t = x.shape\n        if t % self.period != 0:  # pad first\n            n_pad = self.period - (t % self.period)\n            x = F.pad(x, (0, n_pad), \"reflect\")\n            t = t + n_pad\n        x = x.view(b, c, t // self.period, self.period)\n\n        for l in self.convs:\n            x = l(x)\n            x = F.leaky_relu(x, modules.LRELU_SLOPE)\n            fmap.append(x)\n        x = self.conv_post(x)\n        fmap.append(x)\n        x = torch.flatten(x, 1, -1)\n\n        return x, fmap\n\n\nclass DiscriminatorS(torch.nn.Module):\n    def __init__(self, use_spectral_norm=False):\n        super(DiscriminatorS, self).__init__()\n        norm_f = weight_norm if use_spectral_norm is False else spectral_norm\n        self.convs = nn.ModuleList([\n            norm_f(Conv1d(1, 16, 15, 1, padding=7)),\n            norm_f(Conv1d(16, 64, 41, 4, groups=4, padding=20)),\n            norm_f(Conv1d(64, 256, 41, 4, groups=16, padding=20)),\n            norm_f(Conv1d(256, 1024, 41, 4, groups=64, padding=20)),\n            norm_f(Conv1d(1024, 1024, 41, 4, groups=256, padding=20)),\n            norm_f(Conv1d(1024, 1024, 5, 1, padding=2)),\n        ])\n        self.conv_post = norm_f(Conv1d(1024, 1, 3, 1, padding=1))\n\n    def forward(self, x):\n        fmap = []\n\n        for l in self.convs:\n            x = l(x)\n            x = F.leaky_relu(x, modules.LRELU_SLOPE)\n            fmap.append(x)\n        x = self.conv_post(x)\n        fmap.append(x)\n        x = torch.flatten(x, 1, -1)\n\n        return x, fmap\n\n\nclass MultiPeriodDiscriminator(torch.nn.Module):\n    def __init__(self, use_spectral_norm=False):\n        super(MultiPeriodDiscriminator, self).__init__()\n        periods = [2, 3, 5, 7, 11]\n\n        discs = [DiscriminatorS(use_spectral_norm=use_spectral_norm)]\n        discs = discs + [DiscriminatorP(i, use_spectral_norm=use_spectral_norm) for i in periods]\n        self.discriminators = nn.ModuleList(discs)\n\n    def forward(self, y, y_hat):\n        y_d_rs = []\n        y_d_gs = []\n        fmap_rs = []\n        fmap_gs = []\n        for i, d in enumerate(self.discriminators):\n            y_d_r, fmap_r = d(y)\n            y_d_g, fmap_g = d(y_hat)\n            y_d_rs.append(y_d_r)\n            y_d_gs.append(y_d_g)\n            fmap_rs.append(fmap_r)\n            fmap_gs.append(fmap_g)\n\n        return y_d_rs, y_d_gs, fmap_rs, fmap_gs\n\n\nclass SpeakerEncoder(torch.nn.Module):\n    def __init__(self, mel_n_channels=80, model_num_layers=3, model_hidden_size=256, model_embedding_size=256):\n        super(SpeakerEncoder, self).__init__()\n        self.lstm = nn.LSTM(mel_n_channels, model_hidden_size, model_num_layers, batch_first=True)\n        self.linear = nn.Linear(model_hidden_size, model_embedding_size)\n        self.relu = nn.ReLU()\n\n    def forward(self, mels):\n        self.lstm.flatten_parameters()\n        _, (hidden, _) = self.lstm(mels)\n        embeds_raw = self.relu(self.linear(hidden[-1]))\n        return embeds_raw / torch.norm(embeds_raw, dim=1, keepdim=True)\n\n    def compute_partial_slices(self, total_frames, partial_frames, partial_hop):\n        mel_slices = []\n        for i in range(0, total_frames - partial_frames, partial_hop):\n            mel_range = torch.arange(i, i + partial_frames)\n            mel_slices.append(mel_range)\n\n        return mel_slices\n\n    def embed_utterance(self, mel, partial_frames=128, partial_hop=64):\n        mel_len = mel.size(1)\n        last_mel = mel[:, -partial_frames:]\n\n        if mel_len > partial_frames:\n            mel_slices = self.compute_partial_slices(mel_len, partial_frames, partial_hop)\n            mels = list(mel[:, s] for s in mel_slices)\n            mels.append(last_mel)\n            mels = torch.stack(tuple(mels), 0).squeeze(1)\n\n            with torch.no_grad():\n                partial_embeds = self(mels)\n            embed = torch.mean(partial_embeds, axis=0).unsqueeze(0)\n            # embed = embed / torch.linalg.norm(embed, 2)\n        else:\n            with torch.no_grad():\n                embed = self(last_mel)\n\n        return embed\n\nclass F0Decoder(nn.Module):\n    def __init__(self,\n                 out_channels,\n                 hidden_channels,\n                 filter_channels,\n                 n_heads,\n                 n_layers,\n                 kernel_size,\n                 p_dropout,\n                 spk_channels=0):\n        super().__init__()\n        self.out_channels = out_channels\n        self.hidden_channels = hidden_channels\n        self.filter_channels = filter_channels\n        self.n_heads = n_heads\n        self.n_layers = n_layers\n        self.kernel_size = kernel_size\n        self.p_dropout = p_dropout\n        self.spk_channels = spk_channels\n\n        self.prenet = nn.Conv1d(hidden_channels, hidden_channels, 3, padding=1)\n        self.decoder = attentions.FFT(\n            hidden_channels,\n            filter_channels,\n            n_heads,\n            n_layers,\n            kernel_size,\n            p_dropout)\n        self.proj = nn.Conv1d(hidden_channels, out_channels, 1)\n        self.f0_prenet = nn.Conv1d(1, hidden_channels, 3, padding=1)\n        self.cond = nn.Conv1d(spk_channels, hidden_channels, 1)\n\n    def forward(self, x, norm_f0, x_mask, spk_emb=None):\n        x = torch.detach(x)\n        if (spk_emb is not None):\n            x = x + self.cond(spk_emb)\n        x += self.f0_prenet(norm_f0)\n        x = self.prenet(x) * x_mask\n        x = self.decoder(x * x_mask, x_mask)\n        x = self.proj(x) * x_mask\n        return x\n\n\nclass SynthesizerTrn(nn.Module):\n    \"\"\"\n    Synthesizer for Training\n    \"\"\"\n\n    def __init__(self,\n                 spec_channels,\n                 segment_size,\n                 inter_channels,\n                 hidden_channels,\n                 filter_channels,\n                 n_heads,\n                 n_layers,\n                 kernel_size,\n                 p_dropout,\n                 resblock,\n                 resblock_kernel_sizes,\n                 resblock_dilation_sizes,\n                 upsample_rates,\n                 upsample_initial_channel,\n                 upsample_kernel_sizes,\n                 gin_channels,\n                 ssl_dim,\n                 n_speakers,\n                 sampling_rate=44100,\n                 vol_embedding=False,\n                 vocoder_name = \"nsf-hifigan\",\n                 use_depthwise_conv = False,\n                 use_automatic_f0_prediction = True,\n                 flow_share_parameter = False,\n                 n_flow_layer = 4,\n                 n_layers_trans_flow = 3,\n                 use_transformer_flow = False,\n                 **kwargs):\n\n        super().__init__()\n        self.spec_channels = spec_channels\n        self.inter_channels = inter_channels\n        self.hidden_channels = hidden_channels\n        self.filter_channels = filter_channels\n        self.n_heads = n_heads\n        self.n_layers = n_layers\n        self.kernel_size = kernel_size\n        self.p_dropout = p_dropout\n        self.resblock = resblock\n        self.resblock_kernel_sizes = resblock_kernel_sizes\n        self.resblock_dilation_sizes = resblock_dilation_sizes\n        self.upsample_rates = upsample_rates\n        self.upsample_initial_channel = upsample_initial_channel\n        self.upsample_kernel_sizes = upsample_kernel_sizes\n        self.segment_size = segment_size\n        self.gin_channels = gin_channels\n        self.ssl_dim = ssl_dim\n        self.vol_embedding = vol_embedding\n        self.emb_g = nn.Embedding(n_speakers, gin_channels)\n        self.use_depthwise_conv = use_depthwise_conv\n        self.use_automatic_f0_prediction = use_automatic_f0_prediction\n        self.n_layers_trans_flow = n_layers_trans_flow\n        if vol_embedding:\n           self.emb_vol = nn.Linear(1, hidden_channels)\n\n        self.pre = nn.Conv1d(ssl_dim, hidden_channels, kernel_size=5, padding=2)\n\n        self.enc_p = TextEncoder(\n            inter_channels,\n            hidden_channels,\n            filter_channels=filter_channels,\n            n_heads=n_heads,\n            n_layers=n_layers,\n            kernel_size=kernel_size,\n            p_dropout=p_dropout\n        )\n        hps = {\n            \"sampling_rate\": sampling_rate,\n            \"inter_channels\": inter_channels,\n            \"resblock\": resblock,\n            \"resblock_kernel_sizes\": resblock_kernel_sizes,\n            \"resblock_dilation_sizes\": resblock_dilation_sizes,\n            \"upsample_rates\": upsample_rates,\n            \"upsample_initial_channel\": upsample_initial_channel,\n            \"upsample_kernel_sizes\": upsample_kernel_sizes,\n            \"gin_channels\": gin_channels,\n            \"use_depthwise_conv\":use_depthwise_conv\n        }\n        \n        modules.set_Conv1dModel(self.use_depthwise_conv)\n\n        if vocoder_name == \"nsf-hifigan\":\n            from vdecoder.hifigan.models import Generator\n            self.dec = Generator(h=hps)\n        elif vocoder_name == \"nsf-snake-hifigan\":\n            from vdecoder.hifiganwithsnake.models import Generator\n            self.dec = Generator(h=hps)\n        else:\n            print(\"[?] Unkown vocoder: use default(nsf-hifigan)\")\n            from vdecoder.hifigan.models import Generator\n            self.dec = Generator(h=hps)\n\n        self.enc_q = Encoder(spec_channels, inter_channels, hidden_channels, 5, 1, 16, gin_channels=gin_channels)\n        if use_transformer_flow:\n            self.flow = TransformerCouplingBlock(inter_channels, hidden_channels, filter_channels, n_heads, n_layers_trans_flow, 5, p_dropout, n_flow_layer,  gin_channels=gin_channels, share_parameter= flow_share_parameter)\n        else:\n            self.flow = ResidualCouplingBlock(inter_channels, hidden_channels, 5, 1, n_flow_layer, gin_channels=gin_channels, share_parameter= flow_share_parameter)\n        if self.use_automatic_f0_prediction:\n            self.f0_decoder = F0Decoder(\n                1,\n                hidden_channels,\n                filter_channels,\n                n_heads,\n                n_layers,\n                kernel_size,\n                p_dropout,\n                spk_channels=gin_channels\n            )\n        self.emb_uv = nn.Embedding(2, hidden_channels)\n        self.character_mix = False\n\n    def EnableCharacterMix(self, n_speakers_map, device):\n        self.speaker_map = torch.zeros((n_speakers_map, 1, 1, self.gin_channels)).to(device)\n        for i in range(n_speakers_map):\n            self.speaker_map[i] = self.emb_g(torch.LongTensor([[i]]).to(device))\n        self.speaker_map = self.speaker_map.unsqueeze(0).to(device)\n        self.character_mix = True\n\n    def forward(self, c, f0, uv, spec, g=None, c_lengths=None, spec_lengths=None, vol = None):\n        g = self.emb_g(g).transpose(1,2)\n\n        # vol proj\n        vol = self.emb_vol(vol[:,:,None]).transpose(1,2) if vol is not None and self.vol_embedding else 0\n\n        # ssl prenet\n        x_mask = torch.unsqueeze(commons.sequence_mask(c_lengths, c.size(2)), 1).to(c.dtype)\n        x = self.pre(c) * x_mask + self.emb_uv(uv.long()).transpose(1,2) + vol\n        \n        # f0 predict\n        if self.use_automatic_f0_prediction:\n            lf0 = 2595. * torch.log10(1. + f0.unsqueeze(1) / 700.) / 500\n            norm_lf0 = utils.normalize_f0(lf0, x_mask, uv)\n            pred_lf0 = self.f0_decoder(x, norm_lf0, x_mask, spk_emb=g)\n        else:\n            lf0 = 0\n            norm_lf0 = 0\n            pred_lf0 = 0\n        # encoder\n        z_ptemp, m_p, logs_p, _ = self.enc_p(x, x_mask, f0=f0_to_coarse(f0))\n        z, m_q, logs_q, spec_mask = self.enc_q(spec, spec_lengths, g=g)\n\n        # flow\n        z_p = self.flow(z, spec_mask, g=g)\n        z_slice, pitch_slice, ids_slice = commons.rand_slice_segments_with_pitch(z, f0, spec_lengths, self.segment_size)\n\n        # nsf decoder\n        o = self.dec(z_slice, g=g, f0=pitch_slice)\n\n        return o, ids_slice, spec_mask, (z, z_p, m_p, logs_p, m_q, logs_q), pred_lf0, norm_lf0, lf0\n\n    @torch.no_grad()\n    def infer(self, c, f0, uv, g=None, noice_scale=0.35, seed=52468, predict_f0=False, vol = None):\n\n        if c.device == torch.device(\"cuda\"):\n            torch.cuda.manual_seed_all(seed)\n        else:\n            torch.manual_seed(seed)\n\n        c_lengths = (torch.ones(c.size(0)) * c.size(-1)).to(c.device)\n\n        if self.character_mix and len(g) > 1:   # [N, S]  *  [S, B, 1, H]\n            g = g.reshape((g.shape[0], g.shape[1], 1, 1, 1))  # [N, S, B, 1, 1]\n            g = g * self.speaker_map  # [N, S, B, 1, H]\n            g = torch.sum(g, dim=1) # [N, 1, B, 1, H]\n            g = g.transpose(0, -1).transpose(0, -2).squeeze(0) # [B, H, N]\n        else:\n            if g.dim() == 1:\n                g = g.unsqueeze(0)\n            g = self.emb_g(g).transpose(1, 2)\n        \n        x_mask = torch.unsqueeze(commons.sequence_mask(c_lengths, c.size(2)), 1).to(c.dtype)\n        # vol proj\n        \n        vol = self.emb_vol(vol[:,:,None]).transpose(1,2) if vol is not None and self.vol_embedding else 0\n\n        x = self.pre(c) * x_mask + self.emb_uv(uv.long()).transpose(1, 2) + vol\n\n        \n        if self.use_automatic_f0_prediction and predict_f0:\n            lf0 = 2595. * torch.log10(1. + f0.unsqueeze(1) / 700.) / 500\n            norm_lf0 = utils.normalize_f0(lf0, x_mask, uv, random_scale=False)\n            pred_lf0 = self.f0_decoder(x, norm_lf0, x_mask, spk_emb=g)\n            f0 = (700 * (torch.pow(10, pred_lf0 * 500 / 2595) - 1)).squeeze(1)\n        \n        z_p, m_p, logs_p, c_mask = self.enc_p(x, x_mask, f0=f0_to_coarse(f0), noice_scale=noice_scale)\n        z = self.flow(z_p, c_mask, g=g, reverse=True)\n        o = self.dec(z * c_mask, g=g, f0=f0)\n        return o,f0\n\n"
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "onnx_export.py",
          "type": "blob",
          "size": 4.201171875,
          "content": "import argparse\nimport json\n\nimport torch\n\nimport utils\nfrom onnxexport.model_onnx_speaker_mix import SynthesizerTrn\n\nparser = argparse.ArgumentParser(description='SoVitsSvc OnnxExport')\n\ndef OnnxExport(path=None):\n    device = torch.device(\"cpu\")\n    hps = utils.get_hparams_from_file(f\"checkpoints/{path}/config.json\")\n    SVCVITS = SynthesizerTrn(\n        hps.data.filter_length // 2 + 1,\n        hps.train.segment_size // hps.data.hop_length,\n        **hps.model)\n    _ = utils.load_checkpoint(f\"checkpoints/{path}/model.pth\", SVCVITS, None)\n    _ = SVCVITS.eval().to(device)\n    for i in SVCVITS.parameters():\n        i.requires_grad = False\n    \n    num_frames = 200\n\n    test_hidden_unit = torch.rand(1, num_frames, SVCVITS.gin_channels)\n    test_pitch = torch.rand(1, num_frames)\n    test_vol = torch.rand(1, num_frames)\n    test_mel2ph = torch.LongTensor(torch.arange(0, num_frames)).unsqueeze(0)\n    test_uv = torch.ones(1, num_frames, dtype=torch.float32)\n    test_noise = torch.randn(1, 192, num_frames)\n    test_sid = torch.LongTensor([0])\n    export_mix = True\n    if len(hps.spk) < 2:\n        export_mix = False\n    \n    if export_mix:\n        spk_mix = []\n        n_spk = len(hps.spk)\n        for i in range(n_spk):\n            spk_mix.append(1.0/float(n_spk))\n        test_sid = torch.tensor(spk_mix)\n        SVCVITS.export_chara_mix(hps.spk)\n        test_sid = test_sid.unsqueeze(0)\n        test_sid = test_sid.repeat(num_frames, 1)\n    \n    SVCVITS.eval()\n\n    if export_mix:\n        daxes = {\n            \"c\": [0, 1],\n            \"f0\": [1],\n            \"mel2ph\": [1],\n            \"uv\": [1],\n            \"noise\": [2],\n            \"sid\":[0]\n        }\n    else:\n        daxes = {\n            \"c\": [0, 1],\n            \"f0\": [1],\n            \"mel2ph\": [1],\n            \"uv\": [1],\n            \"noise\": [2]\n        }\n    \n    input_names = [\"c\", \"f0\", \"mel2ph\", \"uv\", \"noise\", \"sid\"]\n    output_names = [\"audio\", ]\n\n    if SVCVITS.vol_embedding:\n        input_names.append(\"vol\")\n        vol_dadict = {\"vol\" : [1]}\n        daxes.update(vol_dadict)\n        test_inputs = (\n            test_hidden_unit.to(device),\n            test_pitch.to(device),\n            test_mel2ph.to(device),\n            test_uv.to(device),\n            test_noise.to(device),\n            test_sid.to(device),\n            test_vol.to(device)\n        )\n    else:\n        test_inputs = (\n            test_hidden_unit.to(device),\n            test_pitch.to(device),\n            test_mel2ph.to(device),\n            test_uv.to(device),\n            test_noise.to(device),\n            test_sid.to(device)\n        )\n\n    # SVCVITS = torch.jit.script(SVCVITS)\n    SVCVITS(test_hidden_unit.to(device),\n            test_pitch.to(device),\n            test_mel2ph.to(device),\n            test_uv.to(device),\n            test_noise.to(device),\n            test_sid.to(device),\n            test_vol.to(device))\n\n    SVCVITS.dec.OnnxExport()\n\n    torch.onnx.export(\n        SVCVITS,\n        test_inputs,\n        f\"checkpoints/{path}/{path}_SoVits.onnx\",\n        dynamic_axes=daxes,\n        do_constant_folding=False,\n        opset_version=16,\n        verbose=False,\n        input_names=input_names,\n        output_names=output_names\n    )\n\n    vec_lay = \"layer-12\" if SVCVITS.gin_channels == 768 else \"layer-9\"\n    spklist = []\n    for key in hps.spk.keys():\n        spklist.append(key)\n\n    MoeVSConf = {\n        \"Folder\" : f\"{path}\",\n        \"Name\" : f\"{path}\",\n        \"Type\" : \"SoVits\",\n        \"Rate\" : hps.data.sampling_rate,\n        \"Hop\" : hps.data.hop_length,\n        \"Hubert\": f\"vec-{SVCVITS.gin_channels}-{vec_lay}\",\n        \"SoVits4\": True,\n        \"SoVits3\": False,\n        \"CharaMix\": export_mix,\n        \"Volume\": SVCVITS.vol_embedding,\n        \"HiddenSize\": SVCVITS.gin_channels,\n        \"Characters\": spklist,\n        \"Cluster\": \"\"\n    }\n\n    with open(f\"checkpoints/{path}.json\", 'w') as MoeVsConfFile:\n        json.dump(MoeVSConf, MoeVsConfFile, indent = 4)\n\n\nif __name__ == '__main__':\n    parser.add_argument('-n', '--model_name', type=str, default=\"TransformerFlow\", help='模型文件夹名（根目录下新建ckeckpoints文件夹，在此文件夹下建立一个新的文件夹，放置模型，该文件夹名即为此项）')\n    args = parser.parse_args()\n    path = args.model_name\n    OnnxExport(path)\n"
        },
        {
          "name": "onnx_export_old.py",
          "type": "blob",
          "size": 2.1298828125,
          "content": "import torch\n\nimport utils\nfrom onnxexport.model_onnx import SynthesizerTrn\n\n\ndef main(NetExport):\n    path = \"SoVits4.0\"\n    if NetExport:\n        device = torch.device(\"cpu\")\n        hps = utils.get_hparams_from_file(f\"checkpoints/{path}/config.json\")\n        SVCVITS = SynthesizerTrn(\n            hps.data.filter_length // 2 + 1,\n            hps.train.segment_size // hps.data.hop_length,\n            **hps.model)\n        _ = utils.load_checkpoint(f\"checkpoints/{path}/model.pth\", SVCVITS, None)\n        _ = SVCVITS.eval().to(device)\n        for i in SVCVITS.parameters():\n            i.requires_grad = False\n        \n        n_frame = 10\n        test_hidden_unit = torch.rand(1, n_frame, 256)\n        test_pitch = torch.rand(1, n_frame)\n        test_mel2ph = torch.arange(0, n_frame, dtype=torch.int64)[None] # torch.LongTensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]).unsqueeze(0)\n        test_uv = torch.ones(1, n_frame, dtype=torch.float32)\n        test_noise = torch.randn(1, 192, n_frame)\n        test_sid = torch.LongTensor([0])\n        input_names = [\"c\", \"f0\", \"mel2ph\", \"uv\", \"noise\", \"sid\"]\n        output_names = [\"audio\", ]\n        \n        torch.onnx.export(SVCVITS,\n                          (\n                              test_hidden_unit.to(device),\n                              test_pitch.to(device),\n                              test_mel2ph.to(device),\n                              test_uv.to(device),\n                              test_noise.to(device),\n                              test_sid.to(device)\n                          ),\n                          f\"checkpoints/{path}/model.onnx\",\n                          dynamic_axes={\n                              \"c\": [0, 1],\n                              \"f0\": [1],\n                              \"mel2ph\": [1],\n                              \"uv\": [1],\n                              \"noise\": [2],\n                          },\n                          do_constant_folding=False,\n                          opset_version=16,\n                          verbose=False,\n                          input_names=input_names,\n                          output_names=output_names)\n\n\nif __name__ == '__main__':\n    main(True)\n"
        },
        {
          "name": "onnxexport",
          "type": "tree",
          "content": null
        },
        {
          "name": "preprocess_flist_config.py",
          "type": "blob",
          "size": 4.791015625,
          "content": "import argparse\nimport json\nimport os\nimport re\nimport wave\nfrom random import shuffle\n\nfrom loguru import logger\nfrom tqdm import tqdm\n\nimport diffusion.logger.utils as du\n\npattern = re.compile(r'^[\\.a-zA-Z0-9_\\/]+$')\n\ndef get_wav_duration(file_path):\n    try:\n        with wave.open(file_path, 'rb') as wav_file:\n            # 获取音频帧数\n            n_frames = wav_file.getnframes()\n            # 获取采样率\n            framerate = wav_file.getframerate()\n            # 计算时长（秒）\n            return n_frames / float(framerate)\n    except Exception as e:\n        logger.error(f\"Reading {file_path}\")\n        raise e\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--train_list\", type=str, default=\"./filelists/train.txt\", help=\"path to train list\")\n    parser.add_argument(\"--val_list\", type=str, default=\"./filelists/val.txt\", help=\"path to val list\")\n    parser.add_argument(\"--source_dir\", type=str, default=\"./dataset/44k\", help=\"path to source dir\")\n    parser.add_argument(\"--speech_encoder\", type=str, default=\"vec768l12\", help=\"choice a speech encoder|'vec768l12','vec256l9','hubertsoft','whisper-ppg','cnhubertlarge','dphubert','whisper-ppg-large','wavlmbase+'\")\n    parser.add_argument(\"--vol_aug\", action=\"store_true\", help=\"Whether to use volume embedding and volume augmentation\")\n    parser.add_argument(\"--tiny\", action=\"store_true\", help=\"Whether to train sovits tiny\")\n    args = parser.parse_args()\n    \n    config_template =  json.load(open(\"configs_template/config_tiny_template.json\")) if args.tiny else json.load(open(\"configs_template/config_template.json\"))\n    train = []\n    val = []\n    idx = 0\n    spk_dict = {}\n    spk_id = 0\n\n    for speaker in tqdm(os.listdir(args.source_dir)):\n        spk_dict[speaker] = spk_id\n        spk_id += 1\n        wavs = []\n\n        for file_name in os.listdir(os.path.join(args.source_dir, speaker)):\n            if not file_name.endswith(\"wav\"):\n                continue\n            if file_name.startswith(\".\"):\n                continue\n\n            file_path = \"/\".join([args.source_dir, speaker, file_name])\n\n            if not pattern.match(file_name):\n                logger.warning(\"Detected non-ASCII file name: \" + file_path)\n\n            if get_wav_duration(file_path) < 0.3:\n                logger.info(\"Skip too short audio: \" + file_path)\n                continue\n\n            wavs.append(file_path)\n\n        shuffle(wavs)\n        train += wavs[2:]\n        val += wavs[:2]\n\n    shuffle(train)\n    shuffle(val)\n\n    logger.info(\"Writing \" + args.train_list)\n    with open(args.train_list, \"w\") as f:\n        for fname in tqdm(train):\n            wavpath = fname\n            f.write(wavpath + \"\\n\")\n\n    logger.info(\"Writing \" + args.val_list)\n    with open(args.val_list, \"w\") as f:\n        for fname in tqdm(val):\n            wavpath = fname\n            f.write(wavpath + \"\\n\")\n\n\n    d_config_template = du.load_config(\"configs_template/diffusion_template.yaml\")\n    d_config_template[\"model\"][\"n_spk\"] = spk_id\n    d_config_template[\"data\"][\"encoder\"] = args.speech_encoder\n    d_config_template[\"spk\"] = spk_dict\n    \n    config_template[\"spk\"] = spk_dict\n    config_template[\"model\"][\"n_speakers\"] = spk_id\n    config_template[\"model\"][\"speech_encoder\"] = args.speech_encoder\n    \n    if args.speech_encoder == \"vec768l12\" or args.speech_encoder == \"dphubert\" or args.speech_encoder == \"wavlmbase+\":\n        config_template[\"model\"][\"ssl_dim\"] = config_template[\"model\"][\"filter_channels\"] = config_template[\"model\"][\"gin_channels\"] = 768\n        d_config_template[\"data\"][\"encoder_out_channels\"] = 768\n    elif args.speech_encoder == \"vec256l9\" or args.speech_encoder == 'hubertsoft':\n        config_template[\"model\"][\"ssl_dim\"] = config_template[\"model\"][\"gin_channels\"] = 256\n        d_config_template[\"data\"][\"encoder_out_channels\"] = 256\n    elif args.speech_encoder == \"whisper-ppg\" or args.speech_encoder == 'cnhubertlarge':\n        config_template[\"model\"][\"ssl_dim\"] = config_template[\"model\"][\"filter_channels\"] = config_template[\"model\"][\"gin_channels\"] = 1024\n        d_config_template[\"data\"][\"encoder_out_channels\"] = 1024\n    elif args.speech_encoder == \"whisper-ppg-large\":\n        config_template[\"model\"][\"ssl_dim\"] = config_template[\"model\"][\"filter_channels\"] = config_template[\"model\"][\"gin_channels\"] = 1280\n        d_config_template[\"data\"][\"encoder_out_channels\"] = 1280\n        \n    if args.vol_aug:\n        config_template[\"train\"][\"vol_aug\"] = config_template[\"model\"][\"vol_embedding\"] = True\n\n    if args.tiny:\n        config_template[\"model\"][\"filter_channels\"] = 512\n\n    logger.info(\"Writing to configs/config.json\")\n    with open(\"configs/config.json\", \"w\") as f:\n        json.dump(config_template, f, indent=2)\n    logger.info(\"Writing to configs/diffusion.yaml\")\n    du.save_config(\"configs/diffusion.yaml\",d_config_template)\n"
        },
        {
          "name": "preprocess_hubert_f0.py",
          "type": "blob",
          "size": 6.708984375,
          "content": "import argparse\nimport logging\nimport os\nimport random\nfrom concurrent.futures import ProcessPoolExecutor\nfrom glob import glob\nfrom random import shuffle\n\nimport librosa\nimport numpy as np\nimport torch\nimport torch.multiprocessing as mp\nfrom loguru import logger\nfrom tqdm import tqdm\n\nimport diffusion.logger.utils as du\nimport utils\nfrom diffusion.vocoder import Vocoder\nfrom modules.mel_processing import spectrogram_torch\n\nlogging.getLogger(\"numba\").setLevel(logging.WARNING)\nlogging.getLogger(\"matplotlib\").setLevel(logging.WARNING)\n\nhps = utils.get_hparams_from_file(\"configs/config.json\")\ndconfig = du.load_config(\"configs/diffusion.yaml\")\nsampling_rate = hps.data.sampling_rate\nhop_length = hps.data.hop_length\nspeech_encoder = hps[\"model\"][\"speech_encoder\"]\n\n\ndef process_one(filename, hmodel, f0p, device, diff=False, mel_extractor=None):\n    wav, sr = librosa.load(filename, sr=sampling_rate)\n    audio_norm = torch.FloatTensor(wav)\n    audio_norm = audio_norm.unsqueeze(0)\n    soft_path = filename + \".soft.pt\"\n    if not os.path.exists(soft_path):\n        wav16k = librosa.resample(wav, orig_sr=sampling_rate, target_sr=16000)\n        wav16k = torch.from_numpy(wav16k).to(device)\n        c = hmodel.encoder(wav16k)\n        torch.save(c.cpu(), soft_path)\n\n    f0_path = filename + \".f0.npy\"\n    if not os.path.exists(f0_path):\n        f0_predictor = utils.get_f0_predictor(f0p,sampling_rate=sampling_rate, hop_length=hop_length,device=None,threshold=0.05)\n        f0,uv = f0_predictor.compute_f0_uv(\n            wav\n        )\n        np.save(f0_path, np.asanyarray((f0,uv),dtype=object))\n\n\n    spec_path = filename.replace(\".wav\", \".spec.pt\")\n    if not os.path.exists(spec_path):\n        # Process spectrogram\n        # The following code can't be replaced by torch.FloatTensor(wav)\n        # because load_wav_to_torch return a tensor that need to be normalized\n\n        if sr != hps.data.sampling_rate:\n            raise ValueError(\n                \"{} SR doesn't match target {} SR\".format(\n                    sr, hps.data.sampling_rate\n                )\n            )\n\n        #audio_norm = audio / hps.data.max_wav_value\n\n        spec = spectrogram_torch(\n            audio_norm,\n            hps.data.filter_length,\n            hps.data.sampling_rate,\n            hps.data.hop_length,\n            hps.data.win_length,\n            center=False,\n        )\n        spec = torch.squeeze(spec, 0)\n        torch.save(spec, spec_path)\n\n    if diff or hps.model.vol_embedding:\n        volume_path = filename + \".vol.npy\"\n        volume_extractor = utils.Volume_Extractor(hop_length)\n        if not os.path.exists(volume_path):\n            volume = volume_extractor.extract(audio_norm)\n            np.save(volume_path, volume.to('cpu').numpy())\n\n    if diff:\n        mel_path = filename + \".mel.npy\"\n        if not os.path.exists(mel_path) and mel_extractor is not None:\n            mel_t = mel_extractor.extract(audio_norm.to(device), sampling_rate)\n            mel = mel_t.squeeze().to('cpu').numpy()\n            np.save(mel_path, mel)\n        aug_mel_path = filename + \".aug_mel.npy\"\n        aug_vol_path = filename + \".aug_vol.npy\"\n        max_amp = float(torch.max(torch.abs(audio_norm))) + 1e-5\n        max_shift = min(1, np.log10(1/max_amp))\n        log10_vol_shift = random.uniform(-1, max_shift)\n        keyshift = random.uniform(-5, 5)\n        if mel_extractor is not None:\n            aug_mel_t = mel_extractor.extract(audio_norm * (10 ** log10_vol_shift), sampling_rate, keyshift = keyshift)\n        aug_mel = aug_mel_t.squeeze().to('cpu').numpy()\n        aug_vol = volume_extractor.extract(audio_norm * (10 ** log10_vol_shift))\n        if not os.path.exists(aug_mel_path):\n            np.save(aug_mel_path,np.asanyarray((aug_mel,keyshift),dtype=object))\n        if not os.path.exists(aug_vol_path):\n            np.save(aug_vol_path,aug_vol.to('cpu').numpy())\n\n\ndef process_batch(file_chunk, f0p, diff=False, mel_extractor=None, device=\"cpu\"):\n    logger.info(\"Loading speech encoder for content...\")\n    rank = mp.current_process()._identity\n    rank = rank[0] if len(rank) > 0 else 0\n    if torch.cuda.is_available():\n        gpu_id = rank % torch.cuda.device_count()\n        device = torch.device(f\"cuda:{gpu_id}\")\n    logger.info(f\"Rank {rank} uses device {device}\")\n    hmodel = utils.get_speech_encoder(speech_encoder, device=device)\n    logger.info(f\"Loaded speech encoder for rank {rank}\")\n    for filename in tqdm(file_chunk, position = rank):\n        process_one(filename, hmodel, f0p, device, diff, mel_extractor)\n\ndef parallel_process(filenames, num_processes, f0p, diff, mel_extractor, device):\n    with ProcessPoolExecutor(max_workers=num_processes) as executor:\n        tasks = []\n        for i in range(num_processes):\n            start = int(i * len(filenames) / num_processes)\n            end = int((i + 1) * len(filenames) / num_processes)\n            file_chunk = filenames[start:end]\n            tasks.append(executor.submit(process_batch, file_chunk, f0p, diff, mel_extractor, device=device))\n        for task in tqdm(tasks, position = 0):\n            task.result()\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-d', '--device', type=str, default=None)\n    parser.add_argument(\n        \"--in_dir\", type=str, default=\"dataset/44k\", help=\"path to input dir\"\n    )\n    parser.add_argument(\n        '--use_diff',action='store_true', help='Whether to use the diffusion model'\n    )\n    parser.add_argument(\n        '--f0_predictor', type=str, default=\"rmvpe\", help='Select F0 predictor, can select crepe,pm,dio,harvest,rmvpe,fcpe|default: pm(note: crepe is original F0 using mean filter)'\n    )\n    parser.add_argument(\n        '--num_processes', type=int, default=1, help='You are advised to set the number of processes to the same as the number of CPU cores'\n    )\n    args = parser.parse_args()\n    f0p = args.f0_predictor\n    device = args.device\n    if device is None:\n        device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n\n    print(speech_encoder)\n    logger.info(\"Using device: \" + str(device))\n    logger.info(\"Using SpeechEncoder: \" + speech_encoder)\n    logger.info(\"Using extractor: \" + f0p)\n    logger.info(\"Using diff Mode: \" + str(args.use_diff))\n\n    if args.use_diff:\n        print(\"use_diff\")\n        print(\"Loading Mel Extractor...\")\n        mel_extractor = Vocoder(dconfig.vocoder.type, dconfig.vocoder.ckpt, device=device)\n        print(\"Loaded Mel Extractor.\")\n    else:\n        mel_extractor = None\n    filenames = glob(f\"{args.in_dir}/*/*.wav\", recursive=True)  # [:10]\n    shuffle(filenames)\n    mp.set_start_method(\"spawn\", force=True)\n\n    num_processes = args.num_processes\n    if num_processes == 0:\n        num_processes = os.cpu_count()\n\n    parallel_process(filenames, num_processes, f0p, args.use_diff, mel_extractor, device)\n"
        },
        {
          "name": "pretrain",
          "type": "tree",
          "content": null
        },
        {
          "name": "raw",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.328125,
          "content": "ffmpeg-python\nFlask\nFlask_Cors\ngradio>=3.7.0\nnumpy==1.23.5\npyworld\nscipy==1.10.0\nSoundFile==0.12.1\ntorch\ntorchaudio\ntorchcrepe\ntqdm\nrich\nloguru\nscikit-maad\npraat-parselmouth\nonnx\nonnxsim\nonnxoptimizer\nfairseq==0.12.2\nlibrosa==0.9.1\ntensorboard\ntensorboardX\ntransformers\nedge_tts\nlangdetect\npyyaml\npynvml\nfaiss-cpu\neinops\nlocal_attention"
        },
        {
          "name": "requirements_onnx_encoder.txt",
          "type": "blob",
          "size": 0.3642578125,
          "content": "Flask\r\nFlask_Cors\r\ngradio>=3.7.0\r\nnumpy==1.23.0\r\npyworld==0.2.5\r\nscipy==1.10.0\r\nSoundFile==0.12.1\r\ntorch==1.13.1\r\ntorchaudio==0.13.1\r\ntorchcrepe\r\ntqdm\r\nrich.progress\r\nloguru\r\nscikit-maad\r\npraat-parselmouth\r\nonnx\r\nonnxsim\r\nonnxoptimizer\r\nonnxruntime-gpu\r\nlibrosa==0.9.1\r\ntensorboard\r\ntensorboardX\r\nedge_tts\r\nlangdetect\r\npyyaml\r\npynvml\r\ntransformers\r\nffmpeg-python\r\nfaiss-cpu"
        },
        {
          "name": "requirements_win.txt",
          "type": "blob",
          "size": 0.4150390625,
          "content": "librosa==0.9.1\nfairseq==0.12.2\nffmpeg-python\nFlask==2.1.2\nFlask_Cors==3.0.10\ngradio>=3.7.0\nnumpy\nplaysound==1.3.0\nPyAudio==0.2.12\npydub==0.25.1\npyworld==0.3.0\nrequests==2.28.1\nscipy==1.7.3\nsounddevice==0.4.5\nSoundFile==0.10.3.post1\nstarlette==0.19.1\ntqdm==4.63.0\nrich\nloguru\ntorchcrepe\nscikit-maad\npraat-parselmouth\nonnx\nonnxsim\nonnxoptimizer\ntensorboard\ntensorboardX\ntransformers\nedge_tts\nlangdetect\npyyaml\npynvml\nfaiss-cpu\n"
        },
        {
          "name": "resample.py",
          "type": "blob",
          "size": 3.25390625,
          "content": "import argparse\nimport concurrent.futures\nimport os\nfrom concurrent.futures import ProcessPoolExecutor\nfrom multiprocessing import cpu_count\n\nimport librosa\nimport numpy as np\nfrom rich.progress import track\nfrom scipy.io import wavfile\n\n\ndef load_wav(wav_path):\n    return librosa.load(wav_path, sr=None)\n\n\ndef trim_wav(wav, top_db=40):\n    return librosa.effects.trim(wav, top_db=top_db)\n\n\ndef normalize_peak(wav, threshold=1.0):\n    peak = np.abs(wav).max()\n    if peak > threshold:\n        wav = 0.98 * wav / peak\n    return wav\n\n\ndef resample_wav(wav, sr, target_sr):\n    return librosa.resample(wav, orig_sr=sr, target_sr=target_sr)\n\n\ndef save_wav_to_path(wav, save_path, sr):\n    wavfile.write(\n        save_path,\n        sr,\n        (wav * np.iinfo(np.int16).max).astype(np.int16)\n    )\n\n\ndef process(item):\n    spkdir, wav_name, args = item\n    speaker = spkdir.replace(\"\\\\\", \"/\").split(\"/\")[-1]\n\n    wav_path = os.path.join(args.in_dir, speaker, wav_name)\n    if os.path.exists(wav_path) and '.wav' in wav_path:\n        os.makedirs(os.path.join(args.out_dir2, speaker), exist_ok=True)\n\n        wav, sr = load_wav(wav_path)\n        wav, _ = trim_wav(wav)\n        wav = normalize_peak(wav)\n        resampled_wav = resample_wav(wav, sr, args.sr2)\n\n        if not args.skip_loudnorm:\n            resampled_wav /= np.max(np.abs(resampled_wav))\n\n        save_path2 = os.path.join(args.out_dir2, speaker, wav_name)\n        save_wav_to_path(resampled_wav, save_path2, args.sr2)\n\n\n\"\"\"\ndef process_all_speakers():\n    process_count = 30 if os.cpu_count() > 60 else (os.cpu_count() - 2 if os.cpu_count() > 4 else 1)\n\n    with ThreadPoolExecutor(max_workers=process_count) as executor:\n        for speaker in speakers:\n            spk_dir = os.path.join(args.in_dir, speaker)\n            if os.path.isdir(spk_dir):\n                print(spk_dir)\n                futures = [executor.submit(process, (spk_dir, i, args)) for i in os.listdir(spk_dir) if i.endswith(\"wav\")]\n                for _ in tqdm(concurrent.futures.as_completed(futures), total=len(futures)):\n                    pass\n\"\"\"\n# multi process\n\n\ndef process_all_speakers():\n    process_count = 30 if os.cpu_count() > 60 else (os.cpu_count() - 2 if os.cpu_count() > 4 else 1)\n    with ProcessPoolExecutor(max_workers=process_count) as executor:\n        for speaker in speakers:\n            spk_dir = os.path.join(args.in_dir, speaker)\n            if os.path.isdir(spk_dir):\n                print(spk_dir)\n                futures = [executor.submit(process, (spk_dir, i, args)) for i in os.listdir(spk_dir) if i.endswith(\"wav\")]\n                for _ in track(concurrent.futures.as_completed(futures), total=len(futures), description=\"resampling:\"):\n                    pass\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--sr2\", type=int, default=44100, help=\"sampling rate\")\n    parser.add_argument(\"--in_dir\", type=str, default=\"./dataset_raw\", help=\"path to source dir\")\n    parser.add_argument(\"--out_dir2\", type=str, default=\"./dataset/44k\", help=\"path to target dir\")\n    parser.add_argument(\"--skip_loudnorm\", action=\"store_true\", help=\"Skip loudness matching if you have done it\")\n    args = parser.parse_args()\n\n    print(f\"CPU count: {cpu_count()}\")\n    speakers = os.listdir(args.in_dir)\n    process_all_speakers()\n"
        },
        {
          "name": "shadowdiffusion.png",
          "type": "blob",
          "size": 506.533203125,
          "content": null
        },
        {
          "name": "sovits4_for_colab.ipynb",
          "type": "blob",
          "size": 24.767578125,
          "content": "{\n \"cells\": [\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"2q0l56aFQhAM\"\n   },\n   \"source\": [\n    \"# Terms of Use\\n\",\n    \"\\n\",\n    \"### Please solve the authorization problem of the dataset on your own. You shall be solely responsible for any problems caused by the use of non-authorized datasets for training and all consequences thereof.The repository and its maintainer, svc develop team, have nothing to do with the consequences!\\n\",\n    \"\\n\",\n    \"1. This project is established for academic exchange purposes only and is intended for communication and learning purposes. It is not intended for production environments.\\n\",\n    \"2. Any videos based on sovits that are published on video platforms must clearly indicate in the description that they are used for voice changing and specify the input source of the voice or audio, for example, using videos or audios published by others and separating the vocals as input source for conversion, which must provide clear original video or music links. If your own voice or other synthesized voices from other commercial vocal synthesis software are used as the input source for conversion, you must also explain it in the description.\\n\",\n    \"3. You shall be solely responsible for any infringement problems caused by the input source. When using other commercial vocal synthesis software as input source, please ensure that you comply with the terms of use of the software. Note that many vocal synthesis engines clearly state in their terms of use that they cannot be used for input source conversion.\\n\",\n    \"4. Continuing to use this project is deemed as agreeing to the relevant provisions stated in this repository README. This repository README has the obligation to persuade, and is not responsible for any subsequent problems that may arise.\\n\",\n    \"5. If you distribute this repository's code or publish any results produced by this project publicly (including but not limited to video sharing platforms), please indicate the original author and code source (this repository).\\n\",\n    \"6. If you use this project for any other plan, please contact and inform the author of this repository in advance. Thank you very much.\\n\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"M_RcDbVPhivj\"\n   },\n   \"source\": [\n    \"## **Note:**\\n\",\n    \"## **Make sure there is no a directory named `sovits4data` in your google drive at the first time you use this notebook.**\\n\",\n    \"## **It will be created to store some necessary files.** \\n\",\n    \"## **For sure you can change it to another directory by modifying `sovits_data_dir` variable.**\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"fHaw6hGEa_Nk\"\n   },\n   \"source\": [\n    \"# **Initialize environment**\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"0gQcIZ8RsOkn\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Connect to colab runtime and check GPU\\n\",\n    \"\\n\",\n    \"#@markdown # Connect to colab runtime and check GPU\\n\",\n    \"\\n\",\n    \"#@markdown\\n\",\n    \"\\n\",\n    \"!nvidia-smi\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"0YUGpYrXhMck\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Clone repository and install requirements\\n\",\n    \"\\n\",\n    \"#@markdown # Clone repository and install requirements\\n\",\n    \"\\n\",\n    \"#@markdown\\n\",\n    \"\\n\",\n    \"#@markdown ### After the execution is completed, the runtime will **automatically restart**\\n\",\n    \"\\n\",\n    \"#@markdown\\n\",\n    \"\\n\",\n    \"!git clone https://github.com/svc-develop-team/so-vits-svc -b 4.1-Stable\\n\",\n    \"%cd /content/so-vits-svc\\n\",\n    \"%pip install --upgrade pip setuptools\\n\",\n    \"%pip install -r requirements.txt --extra-index-url https://download.pytorch.org/whl/cu118\\n\",\n    \"exit()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"wmUkpUmfn_Hs\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Mount google drive and select which directories to sync with google drive\\n\",\n    \"\\n\",\n    \"#@markdown # Mount google drive and select which directories to sync with google drive\\n\",\n    \"\\n\",\n    \"#@markdown\\n\",\n    \"\\n\",\n    \"from google.colab import drive\\n\",\n    \"drive.mount(\\\"/content/drive\\\")\\n\",\n    \"\\n\",\n    \"#@markdown Directory to store **necessary files**, dont miss the slash at the end👇.\\n\",\n    \"sovits_data_dir = \\\"/content/drive/MyDrive/sovits4data/\\\"  #@param {type:\\\"string\\\"}\\n\",\n    \"#@markdown By default it will create a `sovits4data/` folder in your google drive.\\n\",\n    \"RAW_DIR = sovits_data_dir + \\\"raw/\\\"\\n\",\n    \"RESULTS_DIR = sovits_data_dir + \\\"results/\\\"\\n\",\n    \"FILELISTS_DIR = sovits_data_dir + \\\"filelists/\\\"\\n\",\n    \"CONFIGS_DIR = sovits_data_dir + \\\"configs/\\\"\\n\",\n    \"LOGS_DIR = sovits_data_dir + \\\"logs/44k/\\\"\\n\",\n    \"\\n\",\n    \"#@markdown\\n\",\n    \"\\n\",\n    \"#@markdown ### These folders will be synced with your google drvie\\n\",\n    \"\\n\",\n    \"#@markdown　### **Strongly recommend to check all.**\\n\",\n    \"\\n\",\n    \"#@markdown Sync **input audios** and **output audios**\\n\",\n    \"sync_raw_and_results = True  #@param {type:\\\"boolean\\\"}\\n\",\n    \"if sync_raw_and_results:\\n\",\n    \"  !mkdir -p {RAW_DIR}\\n\",\n    \"  !mkdir -p {RESULTS_DIR}\\n\",\n    \"  !rm -rf /content/so-vits-svc/raw\\n\",\n    \"  !rm -rf /content/so-vits-svc/results\\n\",\n    \"  !ln -s {RAW_DIR} /content/so-vits-svc/raw\\n\",\n    \"  !ln -s {RESULTS_DIR} /content/so-vits-svc/results\\n\",\n    \"\\n\",\n    \"#@markdown Sync **config** and **models**\\n\",\n    \"sync_configs_and_logs = True  #@param {type:\\\"boolean\\\"}\\n\",\n    \"if sync_configs_and_logs:\\n\",\n    \"  !mkdir -p {FILELISTS_DIR}\\n\",\n    \"  !mkdir -p {CONFIGS_DIR}\\n\",\n    \"  !mkdir -p {LOGS_DIR}\\n\",\n    \"  !rm -rf /content/so-vits-svc/filelists\\n\",\n    \"  !rm -rf /content/so-vits-svc/configs\\n\",\n    \"  !rm -rf /content/so-vits-svc/logs/44k\\n\",\n    \"  !ln -s {FILELISTS_DIR} /content/so-vits-svc/filelists\\n\",\n    \"  !ln -s {CONFIGS_DIR} /content/so-vits-svc/configs\\n\",\n    \"  !ln -s {LOGS_DIR} /content/so-vits-svc/logs/44k\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"G_PMPCN6wvgZ\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Get pretrained model(Optional but strongly recommend).\\n\",\n    \"\\n\",\n    \"#@markdown # Get pretrained model(Optional but strongly recommend).\\n\",\n    \"\\n\",\n    \"#@markdown\\n\",\n    \"\\n\",\n    \"#@markdown - Pre-trained model files: `G_0.pth` `D_0.pth`\\n\",\n    \"#@markdown   - Place them under /sovits4data/logs/44k/ in your google drive manualy\\n\",\n    \"\\n\",\n    \"#@markdown Get them from svc-develop-team(TBD) or anywhere else.\\n\",\n    \"\\n\",\n    \"#@markdown Although the pretrained model generally does not cause any copyright problems, please pay attention to it. For example, ask the author in advance, or the author has indicated the feasible use in the description clearly.\\n\",\n    \"\\n\",\n    \"download_pretrained_model = True #@param {type:\\\"boolean\\\"}\\n\",\n    \"D_0_URL = \\\"https://huggingface.co/datasets/ms903/sovits4.0-768vec-layer12/resolve/main/sovits_768l12_pre_large_320k/clean_D_320000.pth\\\" #@param [\\\"https://huggingface.co/datasets/ms903/sovits4.0-768vec-layer12/resolve/main/sovits_768l12_pre_large_320k/clean_D_320000.pth\\\", \\\"https://huggingface.co/1asbgdh/sovits4.0-volemb-vec768/resolve/main/clean_D_320000.pth\\\", \\\"https://huggingface.co/datasets/ms903/sovits4.0-768vec-layer12/resolve/main/vol_emb/clean_D_320000.pth\\\"] {allow-input: true}\\n\",\n    \"G_0_URL = \\\"https://huggingface.co/datasets/ms903/sovits4.0-768vec-layer12/resolve/main/sovits_768l12_pre_large_320k/clean_G_320000.pth\\\" #@param [\\\"https://huggingface.co/datasets/ms903/sovits4.0-768vec-layer12/resolve/main/sovits_768l12_pre_large_320k/clean_G_320000.pth\\\", \\\"https://huggingface.co/1asbgdh/sovits4.0-volemb-vec768/resolve/main/clean_G_320000.pth\\\", \\\"https://huggingface.co/datasets/ms903/sovits4.0-768vec-layer12/resolve/main/vol_emb/clean_G_320000.pth\\\"] {allow-input: true}\\n\",\n    \"\\n\",\n    \"download_pretrained_diffusion_model = True #@param {type:\\\"boolean\\\"}\\n\",\n    \"diff_model_URL = \\\"https://huggingface.co/datasets/ms903/Diff-SVC-refactor-pre-trained-model/resolve/main/fix_pitch_add_vctk_600k/model_0.pt\\\" #@param {type:\\\"string\\\"}\\n\",\n    \"\\n\",\n    \"%cd /content/so-vits-svc\\n\",\n    \"\\n\",\n    \"if download_pretrained_model:\\n\",\n    \"    !curl -L {D_0_URL} -o logs/44k/D_0.pth\\n\",\n    \"    !md5sum logs/44k/D_0.pth\\n\",\n    \"    !curl -L {G_0_URL} -o logs/44k/G_0.pth\\n\",\n    \"    !md5sum logs/44k/G_0.pth\\n\",\n    \"\\n\",\n    \"if download_pretrained_diffusion_model:\\n\",\n    \"    !mkdir -p logs/44k/diffusion\\n\",\n    \"    !curl -L {diff_model_URL} -o logs/44k/diffusion/model_0.pt\\n\",\n    \"    !md5sum logs/44k/diffusion/model_0.pt\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"k1qadJBFehMo\"\n   },\n   \"source\": [\n    \"# **Dataset preprocessing**\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"kBlju6Q3lSM6\"\n   },\n   \"source\": [\n    \"Pack and upload your raw dataset(dataset_raw/) to your google drive.\\n\",\n    \"\\n\",\n    \"Makesure the file structure in your zip file looks like this:\\n\",\n    \"\\n\",\n    \"```\\n\",\n    \"YourZIPforSingleSpeakers.zip\\n\",\n    \"└───speaker\\n\",\n    \"    ├───xxx1-xxx1.wav\\n\",\n    \"    ├───...\\n\",\n    \"    └───Lxx-0xx8.wav\\n\",\n    \"```\\n\",\n    \"\\n\",\n    \"```\\n\",\n    \"YourZIPforMultipleSpeakers.zip\\n\",\n    \"├───speaker0\\n\",\n    \"│   ├───xxx1-xxx1.wav\\n\",\n    \"│   ├───...\\n\",\n    \"│   └───Lxx-0xx8.wav\\n\",\n    \"└───speaker1\\n\",\n    \"    ├───xx2-0xxx2.wav\\n\",\n    \"    ├───...\\n\",\n    \"    └───xxx7-xxx007.wav\\n\",\n    \"```\\n\",\n    \"\\n\",\n    \"**Even if there is only one speaker, a folder named `{speaker_name}` is needed.**\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"U05CXlAipvJR\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Get raw dataset from google drive\\n\",\n    \"\\n\",\n    \"#@markdown # Get raw dataset from google drive\\n\",\n    \"\\n\",\n    \"#@markdown\\n\",\n    \"\\n\",\n    \"#@markdown Directory where **your zip file** located in, dont miss the slash at the end👇.\\n\",\n    \"sovits_data_dir = \\\"/content/drive/MyDrive/sovits4data/\\\"  #@param {type:\\\"string\\\"}\\n\",\n    \"#@markdown Filename of **your zip file**, do NOT be \\\"dataset.zip\\\"\\n\",\n    \"zip_filename = \\\"YourZIPFilenameofRawDataset.zip\\\"  #@param {type:\\\"string\\\"}\\n\",\n    \"ZIP_PATH = sovits_data_dir + zip_filename\\n\",\n    \"\\n\",\n    \"!unzip -od /content/so-vits-svc/dataset_raw {ZIP_PATH}\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"_ThKTzYs5CfL\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Resample to 44100Hz and mono\\n\",\n    \"\\n\",\n    \"#@markdown # Resample to 44100Hz and mono\\n\",\n    \"\\n\",\n    \"#@markdown\\n\",\n    \"\\n\",\n    \"%cd /content/so-vits-svc\\n\",\n    \"!python resample.py\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"svITReeL5N8K\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Divide filelists and generate config.json\\n\",\n    \"\\n\",\n    \"#@markdown # Divide filelists and generate config.json\\n\",\n    \"\\n\",\n    \"#@markdown\\n\",\n    \"\\n\",\n    \"%cd /content/so-vits-svc\\n\",\n    \"\\n\",\n    \"speech_encoder = \\\"vec768l12\\\" #@param [\\\"vec768l12\\\", \\\"vec256l9\\\", \\\"hubertsoft\\\", \\\"whisper-ppg\\\", \\\"whisper-ppg-large\\\"]\\n\",\n    \"use_vol_aug = False #@param {type:\\\"boolean\\\"}\\n\",\n    \"vol_aug = \\\"--vol_aug\\\" if use_vol_aug else \\\"\\\"\\n\",\n    \"\\n\",\n    \"from pretrain.meta import download_dict\\n\",\n    \"download_dict = download_dict()\\n\",\n    \"\\n\",\n    \"url = download_dict[speech_encoder][\\\"url\\\"]\\n\",\n    \"output = download_dict[speech_encoder][\\\"output\\\"]\\n\",\n    \"\\n\",\n    \"import os\\n\",\n    \"if not os.path.exists(output):\\n\",\n    \"  !curl -L {url} -o {output}\\n\",\n    \"  !md5sum {output}\\n\",\n    \"\\n\",\n    \"!python preprocess_flist_config.py --speech_encoder={speech_encoder} {vol_aug}\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"xHUXMi836DMe\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Generate hubert and f0\\n\",\n    \"\\n\",\n    \"#@markdown # Generate hubert and f0\\n\",\n    \"\\n\",\n    \"#@markdown\\n\",\n    \"%cd /content/so-vits-svc\\n\",\n    \"\\n\",\n    \"f0_predictor = \\\"crepe\\\" #@param [\\\"crepe\\\", \\\"pm\\\", \\\"dio\\\", \\\"harvest\\\", \\\"rmvpe\\\", \\\"fcpe\\\"]\\n\",\n    \"use_diff = True #@param {type:\\\"boolean\\\"}\\n\",\n    \"\\n\",\n    \"import os\\n\",\n    \"if f0_predictor == \\\"rmvpe\\\" and not os.path.exists(\\\"./pretrain/rmvpe.pt\\\"):\\n\",\n    \"  !curl -L https://huggingface.co/datasets/ylzz1997/rmvpe_pretrain_model/resolve/main/rmvpe.pt -o pretrain/rmvpe.pt\\n\",\n    \"\\n\",\n    \"if f0_predictor == \\\"fcpe\\\" and not os.path.exists(\\\"./pretrain/fcpe.pt\\\"):\\n\",\n    \"  !curl -L https://huggingface.co/datasets/ylzz1997/rmvpe_pretrain_model/resolve/main/fcpe.pt -o pretrain/fcpe.pt\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"diff_param = \\\"\\\"\\n\",\n    \"if use_diff:\\n\",\n    \"  diff_param = \\\"--use_diff\\\"\\n\",\n    \"\\n\",\n    \"  if not os.path.exists(\\\"./pretrain/nsf_hifigan/model\\\"):\\n\",\n    \"    !curl -L https://github.com/openvpi/vocoders/releases/download/nsf-hifigan-v1/nsf_hifigan_20221211.zip -o nsf_hifigan_20221211.zip\\n\",\n    \"    !md5sum nsf_hifigan_20221211.zip\\n\",\n    \"    !unzip nsf_hifigan_20221211.zip\\n\",\n    \"    !rm -rf pretrain/nsf_hifigan\\n\",\n    \"    !mv -v nsf_hifigan pretrain\\n\",\n    \"\\n\",\n    \"!python preprocess_hubert_f0.py --f0_predictor={f0_predictor} {diff_param}\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"Wo4OTmTAUXgj\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Save the preprocessed dataset to google drive\\n\",\n    \"\\n\",\n    \"#@markdown # Save the preprocessed dataset to google drive\\n\",\n    \"\\n\",\n    \"#@markdown\\n\",\n    \"\\n\",\n    \"#@markdown You can save the dataset and related files to your google drive for the next training\\n\",\n    \"\\n\",\n    \"#@markdown **Directory for saving**, dont miss the slash at the end👇.\\n\",\n    \"sovits_data_dir = \\\"/content/drive/MyDrive/sovits4data/\\\" #@param {type:\\\"string\\\"}\\n\",\n    \"\\n\",\n    \"#@markdown There will be a `dataset.zip` contained `dataset/` in your google drive, which is preprocessed data.\\n\",\n    \"\\n\",\n    \"!mkdir -p {sovits_data_dir}\\n\",\n    \"!zip -r dataset.zip /content/so-vits-svc/dataset\\n\",\n    \"!cp -vr dataset.zip \\\"{sovits_data_dir}\\\"\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"P2G6v_6zblWK\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Unzip preprocessed dataset from google drive directly if you have preprocessed already.\\n\",\n    \"\\n\",\n    \"#@markdown # Unzip preprocessed dataset from google drive directly if you have preprocessed already.\\n\",\n    \"\\n\",\n    \"#@markdown\\n\",\n    \"\\n\",\n    \"#@markdown Directory where **your preprocessed dataset** located in, dont miss the slash at the end👇.\\n\",\n    \"sovits_data_dir = \\\"/content/drive/MyDrive/sovits4data/\\\" #@param {type:\\\"string\\\"}\\n\",\n    \"CONFIG = sovits_data_dir + \\\"configs/\\\"\\n\",\n    \"FILELISTS = sovits_data_dir + \\\"filelists/\\\"\\n\",\n    \"DATASET = sovits_data_dir + \\\"dataset.zip\\\"\\n\",\n    \"\\n\",\n    \"!cp -vr {CONFIG} /content/so-vits-svc/\\n\",\n    \"!cp -vr {FILELISTS} /content/so-vits-svc/\\n\",\n    \"!unzip {DATASET} -d /\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"ENoH-pShel7w\"\n   },\n   \"source\": [\n    \"# **Trainning**\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"-hEFFTCfZf57\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Start training\\n\",\n    \"\\n\",\n    \"#@markdown # Start training\\n\",\n    \"\\n\",\n    \"#@markdown If you want to use pre-trained models, upload them to /sovits4data/logs/44k/ in your google drive manualy.\\n\",\n    \"\\n\",\n    \"#@markdown\\n\",\n    \"\\n\",\n    \"%cd /content/so-vits-svc\\n\",\n    \"\\n\",\n    \"#@markdown Whether to enable tensorboard\\n\",\n    \"tensorboard_on = True  #@param {type:\\\"boolean\\\"}\\n\",\n    \"\\n\",\n    \"if tensorboard_on:\\n\",\n    \"  %load_ext tensorboard\\n\",\n    \"  %tensorboard --logdir logs/44k\\n\",\n    \"\\n\",\n    \"config_path = \\\"configs/config.json\\\"\\n\",\n    \"\\n\",\n    \"from pretrain.meta import get_speech_encoder\\n\",\n    \"url, output = get_speech_encoder(config_path)\\n\",\n    \"\\n\",\n    \"import os\\n\",\n    \"if not os.path.exists(output):\\n\",\n    \"  !curl -L {url} -o {output}\\n\",\n    \"\\n\",\n    \"!python train.py -c {config_path} -m 44k\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"ZThaMxmIJgWy\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Train cluster model (Optional)\\n\",\n    \"\\n\",\n    \"#@markdown # Train cluster model (Optional)\\n\",\n    \"\\n\",\n    \"#@markdown #### Details see [README.md#cluster-based-timbre-leakage-control](https://github.com/svc-develop-team/so-vits-svc#cluster-based-timbre-leakage-control)\\n\",\n    \"\\n\",\n    \"#@markdown\\n\",\n    \"\\n\",\n    \"%cd /content/so-vits-svc\\n\",\n    \"!python cluster/train_cluster.py --gpu\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Train index model (Optional)\\n\",\n    \"\\n\",\n    \"#@markdown # Train index model (Optional)\\n\",\n    \"\\n\",\n    \"#@markdown #### Details see [README.md#feature-retrieval](https://github.com/svc-develop-team/so-vits-svc#feature-retrieval)\\n\",\n    \"\\n\",\n    \"#@markdown\\n\",\n    \"\\n\",\n    \"%cd /content/so-vits-svc\\n\",\n    \"!python train_index.py -c configs/config.json\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Train diffusion model (Optional)\\n\",\n    \"\\n\",\n    \"#@markdown # Train diffusion model (Optional)\\n\",\n    \"\\n\",\n    \"#@markdown #### Details see [README.md#-about-shallow-diffusion](https://github.com/svc-develop-team/so-vits-svc#-about-shallow-diffusion)\\n\",\n    \"\\n\",\n    \"#@markdown\\n\",\n    \"\\n\",\n    \"%cd /content/so-vits-svc\\n\",\n    \"\\n\",\n    \"import os\\n\",\n    \"if not os.path.exists(\\\"./pretrain/nsf_hifigan/model\\\"):\\n\",\n    \"  !curl -L https://github.com/openvpi/vocoders/releases/download/nsf-hifigan-v1/nsf_hifigan_20221211.zip -o nsf_hifigan_20221211.zip\\n\",\n    \"  !unzip nsf_hifigan_20221211.zip\\n\",\n    \"  !rm -rf pretrain/nsf_hifigan\\n\",\n    \"  !mv -v nsf_hifigan pretrain\\n\",\n    \"\\n\",\n    \"#@markdown Whether to enable tensorboard\\n\",\n    \"tensorboard_on = True  #@param {type:\\\"boolean\\\"}\\n\",\n    \"\\n\",\n    \"if tensorboard_on:\\n\",\n    \"  %load_ext tensorboard\\n\",\n    \"  %tensorboard --logdir logs/44k\\n\",\n    \"\\n\",\n    \"!python train_diff.py -c configs/diffusion.yaml\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# keep colab alive\\n\",\n    \"Open the devtools and copy & paste to run the scrips.\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"```JavaScript\\n\",\n    \"const ping = () => {\\n\",\n    \"  const btn = document.querySelector(\\\"colab-connect-button\\\");\\n\",\n    \"  const inner_btn = btn.shadowRoot.querySelector(\\\"#connect\\\");\\n\",\n    \"  if (inner_btn) {\\n\",\n    \"    inner_btn.click();\\n\",\n    \"    console.log(\\\"Clicked on connect button\\\");\\n\",\n    \"  } else {\\n\",\n    \"    console.log(\\\"connect button not found\\\");\\n\",\n    \"  }\\n\",\n    \"\\n\",\n    \"  const nextTime = 50000 + Math.random() * 10000;\\n\",\n    \"\\n\",\n    \"  setTimeout(ping, nextTime);\\n\",\n    \"};\\n\",\n    \"\\n\",\n    \"ping();\\n\",\n    \"```\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"oCnbX-OT897k\"\n   },\n   \"source\": [\n    \"# **Inference**\\n\",\n    \"### Upload wav files from this notebook\\n\",\n    \"### **OR**\\n\",\n    \"### Upload to `sovits4data/raw/` in your google drive manualy (should be faster)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"#title Download nsf_hifigan if you need it\\n\",\n    \"\\n\",\n    \"%cd /content/so-vits-svc\\n\",\n    \"!curl -L https://github.com/openvpi/vocoders/releases/download/nsf-hifigan-v1/nsf_hifigan_20221211.zip -o /content/so-vits-svc/nsf_hifigan_20221211.zip\\n\",\n    \"!unzip nsf_hifigan_20221211.zip\\n\",\n    \"!rm -rf pretrain/nsf_hifigan\\n\",\n    \"!mv -v nsf_hifigan pretrain\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"colab\": {\n     \"base_uri\": \"https://localhost:8080/\",\n     \"height\": 75\n    },\n    \"executionInfo\": {\n     \"elapsed\": 94633,\n     \"status\": \"ok\",\n     \"timestamp\": 1678591088790,\n     \"user\": {\n      \"displayName\": \"謬紗特\",\n      \"userId\": \"09445825975794260265\"\n     },\n     \"user_tz\": -480\n    },\n    \"id\": \"XUsmGkgCMD_Q\",\n    \"outputId\": \"8bbfde13-030a-4ba0-bbdb-7eb6b89c02b4\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Upload wav files, the filename should not contain any special symbols like `#` `$` `(` `)`\\n\",\n    \"\\n\",\n    \"#@markdown # Upload wav files, the filename should not contain any special symbols like `#` `$` `(` `)`\\n\",\n    \"\\n\",\n    \"#@markdown\\n\",\n    \"\\n\",\n    \"%cd /content/so-vits-svc\\n\",\n    \"%run wav_upload.py --type audio\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"dYnKuKTIj3z1\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Start inference (and download)\\n\",\n    \"\\n\",\n    \"#@markdown # Start inference (and download)\\n\",\n    \"\\n\",\n    \"#@markdown Parameters see [README.MD#Inference](https://github.com/svc-develop-team/so-vits-svc#-inference)\\n\",\n    \"\\n\",\n    \"#@markdown\\n\",\n    \"\\n\",\n    \"wav_filename = \\\"YourWAVFile.wav\\\"  #@param {type:\\\"string\\\"}\\n\",\n    \"model_filename = \\\"G_210000.pth\\\"  #@param {type:\\\"string\\\"}\\n\",\n    \"model_path = \\\"/content/so-vits-svc/logs/44k/\\\" + model_filename\\n\",\n    \"speaker = \\\"YourSpeaker\\\"  #@param {type:\\\"string\\\"}\\n\",\n    \"trans = \\\"0\\\"  #@param {type:\\\"string\\\"}\\n\",\n    \"cluster_infer_ratio = \\\"0\\\"  #@param {type:\\\"string\\\"}\\n\",\n    \"auto_predict_f0 = False  #@param {type:\\\"boolean\\\"}\\n\",\n    \"apf = \\\"\\\"\\n\",\n    \"if auto_predict_f0:\\n\",\n    \"  apf = \\\" -a \\\"\\n\",\n    \"\\n\",\n    \"f0_predictor = \\\"crepe\\\" #@param [\\\"crepe\\\", \\\"pm\\\", \\\"dio\\\", \\\"harvest\\\", \\\"rmvpe\\\", \\\"fcpe\\\"]\\n\",\n    \"\\n\",\n    \"enhance = False  #@param {type:\\\"boolean\\\"}\\n\",\n    \"ehc = \\\"\\\"\\n\",\n    \"if enhance:\\n\",\n    \"  ehc = \\\" -eh \\\"\\n\",\n    \"#@markdown\\n\",\n    \"\\n\",\n    \"#@markdown Generally keep default:\\n\",\n    \"config_filename = \\\"config.json\\\"  #@param {type:\\\"string\\\"}\\n\",\n    \"config_path = \\\"/content/so-vits-svc/configs/\\\" + config_filename\\n\",\n    \"\\n\",\n    \"from pretrain.meta import get_speech_encoder\\n\",\n    \"url, output = get_speech_encoder(config_path)\\n\",\n    \"\\n\",\n    \"import os\\n\",\n    \"\\n\",\n    \"if f0_predictor == \\\"rmvpe\\\" and not os.path.exists(\\\"./pretrain/rmvpe.pt\\\"):\\n\",\n    \"  !curl -L https://huggingface.co/datasets/ylzz1997/rmvpe_pretrain_model/resolve/main/rmvpe.pt -o pretrain/rmvpe.pt\\n\",\n    \"\\n\",\n    \"if f0_predictor == \\\"fcpe\\\" and not os.path.exists(\\\"./pretrain/fcpe.pt\\\"):\\n\",\n    \"  !curl -L https://huggingface.co/datasets/ylzz1997/rmvpe_pretrain_model/resolve/main/fcpe.pt -o pretrain/fcpe.pt\\n\",\n    \"\\n\",\n    \"if not os.path.exists(output):\\n\",\n    \"  !curl -L {url} -o {output}\\n\",\n    \"\\n\",\n    \"kmeans_filenname = \\\"kmeans_10000.pt\\\"  #@param {type:\\\"string\\\"}\\n\",\n    \"kmeans_path = \\\"/content/so-vits-svc/logs/44k/\\\" + kmeans_filenname\\n\",\n    \"slice_db = \\\"-40\\\"  #@param {type:\\\"string\\\"}\\n\",\n    \"wav_format = \\\"flac\\\"  #@param {type:\\\"string\\\"}\\n\",\n    \"\\n\",\n    \"key = \\\"auto\\\" if auto_predict_f0 else f\\\"{trans}key\\\"\\n\",\n    \"cluster_name = \\\"\\\" if cluster_infer_ratio == \\\"0\\\" else f\\\"_{cluster_infer_ratio}\\\"\\n\",\n    \"isdiffusion = \\\"sovits\\\"\\n\",\n    \"wav_output = f\\\"/content/so-vits-svc/results/{wav_filename}_{key}_{speaker}{cluster_name}_{isdiffusion}_{f0_predictor}.{wav_format}\\\"\\n\",\n    \"\\n\",\n    \"%cd /content/so-vits-svc\\n\",\n    \"!python inference_main.py -n {wav_filename} -m {model_path} -s {speaker} -t {trans} -cr {cluster_infer_ratio} -c {config_path} -cm {kmeans_path} -sd {slice_db} -wf {wav_format} {apf} --f0_predictor={f0_predictor} {ehc}\\n\",\n    \"\\n\",\n    \"#@markdown\\n\",\n    \"\\n\",\n    \"#@markdown If you dont want to download from here, uncheck this.\\n\",\n    \"download_after_inference = True  #@param {type:\\\"boolean\\\"}\\n\",\n    \"\\n\",\n    \"if download_after_inference:\\n\",\n    \"  from google.colab import files\\n\",\n    \"  files.download(wav_output)\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"accelerator\": \"GPU\",\n  \"colab\": {\n   \"provenance\": [\n    {\n     \"file_id\": \"19fxpo-ZoL_ShEUeZIZi6Di-YioWrEyhR\",\n     \"timestamp\": 1678516497580\n    },\n    {\n     \"file_id\": \"1rCUOOVG7-XQlVZuWRAj5IpGrMM8t07pE\",\n     \"timestamp\": 1673086970071\n    },\n    {\n     \"file_id\": \"1Ul5SmzWiSHBj0MaKA0B682C-RZKOycwF\",\n     \"timestamp\": 1670483515921\n    }\n   ]\n  },\n  \"gpuClass\": \"standard\",\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.16\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 0\n}\n"
        },
        {
          "name": "spkmix.py",
          "type": "blob",
          "size": 0.7548828125,
          "content": "# 角色混合轨道 编写规则：\n# 角色ID : [[起始时间1, 终止时间1, 起始数值1, 起始数值1], [起始时间2, 终止时间2, 起始数值2, 起始数值2]]\n# 起始时间和前一个的终止时间必须相同，第一个起始时间必须为0，最后一个终止时间必须为1 （时间的范围为0-1）\n# 全部角色必须填写，不使用的角色填[[0., 1., 0., 0.]]即可\n# 融合数值可以随便填，在指定的时间段内从起始数值线性变化为终止数值，内部会自动确保线性组合为1，可以放心使用\n\nspk_mix_map = {\n    0 : [[0., 0.5, 1, 0.5], [0.5, 1, 0.5, 1]],\n    1 : [[0., 0.35, 1, 0.5], [0.35, 0.75, 0.75, 1], [0.75, 1, 0.45, 1]],\n    2 : [[0., 0.35, 1, 0.5], [0.35, 0.75, 0.75, 1], [0.75, 1, 0.45, 1]]\n}"
        },
        {
          "name": "train.py",
          "type": "blob",
          "size": 13.876953125,
          "content": "import logging\nimport multiprocessing\nimport os\nimport time\n\nimport torch\nimport torch.distributed as dist\nimport torch.multiprocessing as mp\nfrom torch.cuda.amp import GradScaler, autocast\nfrom torch.nn import functional as F\nfrom torch.nn.parallel import DistributedDataParallel as DDP\nfrom torch.utils.data import DataLoader\nfrom torch.utils.tensorboard import SummaryWriter\n\nimport modules.commons as commons\nimport utils\nfrom data_utils import TextAudioCollate, TextAudioSpeakerLoader\nfrom models import (\n    MultiPeriodDiscriminator,\n    SynthesizerTrn,\n)\nfrom modules.losses import discriminator_loss, feature_loss, generator_loss, kl_loss\nfrom modules.mel_processing import mel_spectrogram_torch, spec_to_mel_torch\n\nlogging.getLogger('matplotlib').setLevel(logging.WARNING)\nlogging.getLogger('numba').setLevel(logging.WARNING)\n\ntorch.backends.cudnn.benchmark = True\nglobal_step = 0\nstart_time = time.time()\n\n# os.environ['TORCH_DISTRIBUTED_DEBUG'] = 'INFO'\n\n\ndef main():\n    \"\"\"Assume Single Node Multi GPUs Training Only\"\"\"\n    assert torch.cuda.is_available(), \"CPU training is not allowed.\"\n    hps = utils.get_hparams()\n\n    n_gpus = torch.cuda.device_count()\n    os.environ['MASTER_ADDR'] = 'localhost'\n    os.environ['MASTER_PORT'] = hps.train.port\n\n    mp.spawn(run, nprocs=n_gpus, args=(n_gpus, hps,))\n\n\ndef run(rank, n_gpus, hps):\n    global global_step\n    if rank == 0:\n        logger = utils.get_logger(hps.model_dir)\n        logger.info(hps)\n        utils.check_git_hash(hps.model_dir)\n        writer = SummaryWriter(log_dir=hps.model_dir)\n        writer_eval = SummaryWriter(log_dir=os.path.join(hps.model_dir, \"eval\"))\n    \n    # for pytorch on win, backend use gloo    \n    dist.init_process_group(backend=  'gloo' if os.name == 'nt' else 'nccl', init_method='env://', world_size=n_gpus, rank=rank)\n    torch.manual_seed(hps.train.seed)\n    torch.cuda.set_device(rank)\n    collate_fn = TextAudioCollate()\n    all_in_mem = hps.train.all_in_mem   # If you have enough memory, turn on this option to avoid disk IO and speed up training.\n    train_dataset = TextAudioSpeakerLoader(hps.data.training_files, hps, all_in_mem=all_in_mem)\n    num_workers = 5 if multiprocessing.cpu_count() > 4 else multiprocessing.cpu_count()\n    if all_in_mem:\n        num_workers = 0\n    train_loader = DataLoader(train_dataset, num_workers=num_workers, shuffle=False, pin_memory=True,\n                              batch_size=hps.train.batch_size, collate_fn=collate_fn)\n    if rank == 0:\n        eval_dataset = TextAudioSpeakerLoader(hps.data.validation_files, hps, all_in_mem=all_in_mem,vol_aug = False)\n        eval_loader = DataLoader(eval_dataset, num_workers=1, shuffle=False,\n                                 batch_size=1, pin_memory=False,\n                                 drop_last=False, collate_fn=collate_fn)\n\n    net_g = SynthesizerTrn(\n        hps.data.filter_length // 2 + 1,\n        hps.train.segment_size // hps.data.hop_length,\n        **hps.model).cuda(rank)\n    net_d = MultiPeriodDiscriminator(hps.model.use_spectral_norm).cuda(rank)\n    optim_g = torch.optim.AdamW(\n        net_g.parameters(),\n        hps.train.learning_rate,\n        betas=hps.train.betas,\n        eps=hps.train.eps)\n    optim_d = torch.optim.AdamW(\n        net_d.parameters(),\n        hps.train.learning_rate,\n        betas=hps.train.betas,\n        eps=hps.train.eps)\n    net_g = DDP(net_g, device_ids=[rank])  # , find_unused_parameters=True)\n    net_d = DDP(net_d, device_ids=[rank])\n\n    skip_optimizer = False\n    try:\n        _, _, _, epoch_str = utils.load_checkpoint(utils.latest_checkpoint_path(hps.model_dir, \"G_*.pth\"), net_g,\n                                                   optim_g, skip_optimizer)\n        _, _, _, epoch_str = utils.load_checkpoint(utils.latest_checkpoint_path(hps.model_dir, \"D_*.pth\"), net_d,\n                                                   optim_d, skip_optimizer)\n        epoch_str = max(epoch_str, 1)\n        name=utils.latest_checkpoint_path(hps.model_dir, \"D_*.pth\")\n        global_step=int(name[name.rfind(\"_\")+1:name.rfind(\".\")])+1\n        #global_step = (epoch_str - 1) * len(train_loader)\n    except Exception:\n        print(\"load old checkpoint failed...\")\n        epoch_str = 1\n        global_step = 0\n    if skip_optimizer:\n        epoch_str = 1\n        global_step = 0\n\n    warmup_epoch = hps.train.warmup_epochs\n    scheduler_g = torch.optim.lr_scheduler.ExponentialLR(optim_g, gamma=hps.train.lr_decay, last_epoch=epoch_str - 2)\n    scheduler_d = torch.optim.lr_scheduler.ExponentialLR(optim_d, gamma=hps.train.lr_decay, last_epoch=epoch_str - 2)\n\n    scaler = GradScaler(enabled=hps.train.fp16_run)\n\n    for epoch in range(epoch_str, hps.train.epochs + 1):\n        # set up warm-up learning rate\n        if epoch <= warmup_epoch:\n            for param_group in optim_g.param_groups:\n                param_group['lr'] = hps.train.learning_rate / warmup_epoch * epoch\n            for param_group in optim_d.param_groups:\n                param_group['lr'] = hps.train.learning_rate / warmup_epoch * epoch\n        # training\n        if rank == 0:\n            train_and_evaluate(rank, epoch, hps, [net_g, net_d], [optim_g, optim_d], [scheduler_g, scheduler_d], scaler,\n                               [train_loader, eval_loader], logger, [writer, writer_eval])\n        else:\n            train_and_evaluate(rank, epoch, hps, [net_g, net_d], [optim_g, optim_d], [scheduler_g, scheduler_d], scaler,\n                               [train_loader, None], None, None)\n        # update learning rate\n        scheduler_g.step()\n        scheduler_d.step()\n\n\ndef train_and_evaluate(rank, epoch, hps, nets, optims, schedulers, scaler, loaders, logger, writers):\n    net_g, net_d = nets\n    optim_g, optim_d = optims\n    scheduler_g, scheduler_d = schedulers\n    train_loader, eval_loader = loaders\n    if writers is not None:\n        writer, writer_eval = writers\n    \n    half_type = torch.bfloat16 if hps.train.half_type==\"bf16\" else torch.float16\n\n    # train_loader.batch_sampler.set_epoch(epoch)\n    global global_step\n\n    net_g.train()\n    net_d.train()\n    for batch_idx, items in enumerate(train_loader):\n        c, f0, spec, y, spk, lengths, uv,volume = items\n        g = spk.cuda(rank, non_blocking=True)\n        spec, y = spec.cuda(rank, non_blocking=True), y.cuda(rank, non_blocking=True)\n        c = c.cuda(rank, non_blocking=True)\n        f0 = f0.cuda(rank, non_blocking=True)\n        uv = uv.cuda(rank, non_blocking=True)\n        lengths = lengths.cuda(rank, non_blocking=True)\n        mel = spec_to_mel_torch(\n            spec,\n            hps.data.filter_length,\n            hps.data.n_mel_channels,\n            hps.data.sampling_rate,\n            hps.data.mel_fmin,\n            hps.data.mel_fmax)\n        \n        with autocast(enabled=hps.train.fp16_run, dtype=half_type):\n            y_hat, ids_slice, z_mask, \\\n            (z, z_p, m_p, logs_p, m_q, logs_q), pred_lf0, norm_lf0, lf0 = net_g(c, f0, uv, spec, g=g, c_lengths=lengths,\n                                                                                spec_lengths=lengths,vol = volume)\n\n            y_mel = commons.slice_segments(mel, ids_slice, hps.train.segment_size // hps.data.hop_length)\n            y_hat_mel = mel_spectrogram_torch(\n                y_hat.squeeze(1),\n                hps.data.filter_length,\n                hps.data.n_mel_channels,\n                hps.data.sampling_rate,\n                hps.data.hop_length,\n                hps.data.win_length,\n                hps.data.mel_fmin,\n                hps.data.mel_fmax\n            )\n            y = commons.slice_segments(y, ids_slice * hps.data.hop_length, hps.train.segment_size)  # slice\n\n            # Discriminator\n            y_d_hat_r, y_d_hat_g, _, _ = net_d(y, y_hat.detach())\n\n            with autocast(enabled=False, dtype=half_type):\n                loss_disc, losses_disc_r, losses_disc_g = discriminator_loss(y_d_hat_r, y_d_hat_g)\n                loss_disc_all = loss_disc\n        \n        optim_d.zero_grad()\n        scaler.scale(loss_disc_all).backward()\n        scaler.unscale_(optim_d)\n        grad_norm_d = commons.clip_grad_value_(net_d.parameters(), None)\n        scaler.step(optim_d)\n        \n\n        with autocast(enabled=hps.train.fp16_run, dtype=half_type):\n            # Generator\n            y_d_hat_r, y_d_hat_g, fmap_r, fmap_g = net_d(y, y_hat)\n            with autocast(enabled=False, dtype=half_type):\n                loss_mel = F.l1_loss(y_mel, y_hat_mel) * hps.train.c_mel\n                loss_kl = kl_loss(z_p, logs_q, m_p, logs_p, z_mask) * hps.train.c_kl\n                loss_fm = feature_loss(fmap_r, fmap_g)\n                loss_gen, losses_gen = generator_loss(y_d_hat_g)\n                loss_lf0 = F.mse_loss(pred_lf0, lf0) if net_g.module.use_automatic_f0_prediction else 0\n                loss_gen_all = loss_gen + loss_fm + loss_mel + loss_kl + loss_lf0\n        optim_g.zero_grad()\n        scaler.scale(loss_gen_all).backward()\n        scaler.unscale_(optim_g)\n        grad_norm_g = commons.clip_grad_value_(net_g.parameters(), None)\n        scaler.step(optim_g)\n        scaler.update()\n\n        if rank == 0:\n            if global_step % hps.train.log_interval == 0:\n                lr = optim_g.param_groups[0]['lr']\n                losses = [loss_disc, loss_gen, loss_fm, loss_mel, loss_kl]\n                reference_loss=0\n                for i in losses:\n                    reference_loss += i\n                logger.info('Train Epoch: {} [{:.0f}%]'.format(\n                    epoch,\n                    100. * batch_idx / len(train_loader)))\n                logger.info(f\"Losses: {[x.item() for x in losses]}, step: {global_step}, lr: {lr}, reference_loss: {reference_loss}\")\n\n                scalar_dict = {\"loss/g/total\": loss_gen_all, \"loss/d/total\": loss_disc_all, \"learning_rate\": lr,\n                               \"grad_norm_d\": grad_norm_d, \"grad_norm_g\": grad_norm_g}\n                scalar_dict.update({\"loss/g/fm\": loss_fm, \"loss/g/mel\": loss_mel, \"loss/g/kl\": loss_kl,\n                                    \"loss/g/lf0\": loss_lf0})\n\n                # scalar_dict.update({\"loss/g/{}\".format(i): v for i, v in enumerate(losses_gen)})\n                # scalar_dict.update({\"loss/d_r/{}\".format(i): v for i, v in enumerate(losses_disc_r)})\n                # scalar_dict.update({\"loss/d_g/{}\".format(i): v for i, v in enumerate(losses_disc_g)})\n                image_dict = {\n                    \"slice/mel_org\": utils.plot_spectrogram_to_numpy(y_mel[0].data.cpu().numpy()),\n                    \"slice/mel_gen\": utils.plot_spectrogram_to_numpy(y_hat_mel[0].data.cpu().numpy()),\n                    \"all/mel\": utils.plot_spectrogram_to_numpy(mel[0].data.cpu().numpy())\n                }\n\n                if net_g.module.use_automatic_f0_prediction:\n                    image_dict.update({\n                        \"all/lf0\": utils.plot_data_to_numpy(lf0[0, 0, :].cpu().numpy(),\n                                                              pred_lf0[0, 0, :].detach().cpu().numpy()),\n                        \"all/norm_lf0\": utils.plot_data_to_numpy(lf0[0, 0, :].cpu().numpy(),\n                                                                   norm_lf0[0, 0, :].detach().cpu().numpy())\n                    })\n\n                utils.summarize(\n                    writer=writer,\n                    global_step=global_step,\n                    images=image_dict,\n                    scalars=scalar_dict\n                )\n\n            if global_step % hps.train.eval_interval == 0:\n                evaluate(hps, net_g, eval_loader, writer_eval)\n                utils.save_checkpoint(net_g, optim_g, hps.train.learning_rate, epoch,\n                                      os.path.join(hps.model_dir, \"G_{}.pth\".format(global_step)))\n                utils.save_checkpoint(net_d, optim_d, hps.train.learning_rate, epoch,\n                                      os.path.join(hps.model_dir, \"D_{}.pth\".format(global_step)))\n                keep_ckpts = getattr(hps.train, 'keep_ckpts', 0)\n                if keep_ckpts > 0:\n                    utils.clean_checkpoints(path_to_models=hps.model_dir, n_ckpts_to_keep=keep_ckpts, sort_by_time=True)\n\n        global_step += 1\n\n    if rank == 0:\n        global start_time\n        now = time.time()\n        durtaion = format(now - start_time, '.2f')\n        logger.info(f'====> Epoch: {epoch}, cost {durtaion} s')\n        start_time = now\n\n\ndef evaluate(hps, generator, eval_loader, writer_eval):\n    generator.eval()\n    image_dict = {}\n    audio_dict = {}\n    with torch.no_grad():\n        for batch_idx, items in enumerate(eval_loader):\n            c, f0, spec, y, spk, _, uv,volume = items\n            g = spk[:1].cuda(0)\n            spec, y = spec[:1].cuda(0), y[:1].cuda(0)\n            c = c[:1].cuda(0)\n            f0 = f0[:1].cuda(0)\n            uv= uv[:1].cuda(0)\n            if volume is not None:\n                volume = volume[:1].cuda(0)\n            mel = spec_to_mel_torch(\n                spec,\n                hps.data.filter_length,\n                hps.data.n_mel_channels,\n                hps.data.sampling_rate,\n                hps.data.mel_fmin,\n                hps.data.mel_fmax)\n            y_hat,_ = generator.module.infer(c, f0, uv, g=g,vol = volume)\n\n            y_hat_mel = mel_spectrogram_torch(\n                y_hat.squeeze(1).float(),\n                hps.data.filter_length,\n                hps.data.n_mel_channels,\n                hps.data.sampling_rate,\n                hps.data.hop_length,\n                hps.data.win_length,\n                hps.data.mel_fmin,\n                hps.data.mel_fmax\n            )\n\n            audio_dict.update({\n                f\"gen/audio_{batch_idx}\": y_hat[0],\n                f\"gt/audio_{batch_idx}\": y[0]\n            })\n        image_dict.update({\n            \"gen/mel\": utils.plot_spectrogram_to_numpy(y_hat_mel[0].cpu().numpy()),\n            \"gt/mel\": utils.plot_spectrogram_to_numpy(mel[0].cpu().numpy())\n        })\n    utils.summarize(\n        writer=writer_eval,\n        global_step=global_step,\n        images=image_dict,\n        audios=audio_dict,\n        audio_sampling_rate=hps.data.sampling_rate\n    )\n    generator.train()\n\n\nif __name__ == \"__main__\":\n    main()"
        },
        {
          "name": "train_diff.py",
          "type": "blob",
          "size": 2.53125,
          "content": "import argparse\n\nimport torch\nfrom loguru import logger\nfrom torch.optim import lr_scheduler\n\nfrom diffusion.data_loaders import get_data_loaders\nfrom diffusion.logger import utils\nfrom diffusion.solver import train\nfrom diffusion.unit2mel import Unit2Mel\nfrom diffusion.vocoder import Vocoder\n\n\ndef parse_args(args=None, namespace=None):\n    \"\"\"Parse command-line arguments.\"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"-c\",\n        \"--config\",\n        type=str,\n        required=True,\n        help=\"path to the config file\")\n    return parser.parse_args(args=args, namespace=namespace)\n\n\nif __name__ == '__main__':\n    # parse commands\n    cmd = parse_args()\n    \n    # load config\n    args = utils.load_config(cmd.config)\n    logger.info(' > config:'+ cmd.config)\n    logger.info(' > exp:'+ args.env.expdir)\n    \n    # load vocoder\n    vocoder = Vocoder(args.vocoder.type, args.vocoder.ckpt, device=args.device)\n    \n    # load model\n    model = Unit2Mel(\n                args.data.encoder_out_channels, \n                args.model.n_spk,\n                args.model.use_pitch_aug,\n                vocoder.dimension,\n                args.model.n_layers,\n                args.model.n_chans,\n                args.model.n_hidden,\n                args.model.timesteps,\n                args.model.k_step_max\n                )\n    \n    logger.info(f' > Now model timesteps is {model.timesteps}, and k_step_max is {model.k_step_max}')\n    \n    # load parameters\n    optimizer = torch.optim.AdamW(model.parameters())\n    initial_global_step, model, optimizer = utils.load_model(args.env.expdir, model, optimizer, device=args.device)\n    for param_group in optimizer.param_groups:\n        param_group['initial_lr'] = args.train.lr\n        param_group['lr'] = args.train.lr * (args.train.gamma ** max(((initial_global_step-2)//args.train.decay_step),0) )\n        param_group['weight_decay'] = args.train.weight_decay\n    scheduler = lr_scheduler.StepLR(optimizer, step_size=args.train.decay_step, gamma=args.train.gamma,last_epoch=initial_global_step-2)\n    \n    # device\n    if args.device == 'cuda':\n        torch.cuda.set_device(args.env.gpu_id)\n    model.to(args.device)\n    \n    for state in optimizer.state.values():\n        for k, v in state.items():\n            if torch.is_tensor(v):\n                state[k] = v.to(args.device)\n                    \n    # datas\n    loader_train, loader_valid = get_data_loaders(args, whole_audio=False)\n    \n    # run\n    train(args, initial_global_step, model, optimizer, scheduler, vocoder, loader_train, loader_valid)\n    \n"
        },
        {
          "name": "train_index.py",
          "type": "blob",
          "size": 0.8525390625,
          "content": "import argparse\nimport os\nimport pickle\n\nimport utils\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--root_dir\", type=str, default=\"dataset/44k\", help=\"path to root dir\"\n    )\n    parser.add_argument('-c', '--config', type=str, default=\"./configs/config.json\",\n                    help='JSON file for configuration')\n    parser.add_argument(\n        \"--output_dir\", type=str, default=\"logs/44k\", help=\"path to output dir\"\n    )\n\n    args = parser.parse_args()\n\n    hps = utils.get_hparams_from_file(args.config)\n    spk_dic = hps.spk\n    result = {}\n    \n    for k,v in spk_dic.items():\n        print(f\"now, index {k} feature...\")\n        index = utils.train_index(k,args.root_dir)\n        result[v] = index\n\n    with open(os.path.join(args.output_dir,\"feature_and_index.pkl\"),\"wb\") as f:\n        pickle.dump(result,f)"
        },
        {
          "name": "trained",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils.py",
          "type": "blob",
          "size": 20.234375,
          "content": "import argparse\nimport glob\nimport json\nimport logging\nimport os\nimport re\nimport subprocess\nimport sys\nimport traceback\nfrom multiprocessing import cpu_count\n\nimport faiss\nimport librosa\nimport numpy as np\nimport torch\nfrom scipy.io.wavfile import read\nfrom sklearn.cluster import MiniBatchKMeans\nfrom torch.nn import functional as F\n\nMATPLOTLIB_FLAG = False\n\nlogging.basicConfig(stream=sys.stdout, level=logging.WARN)\nlogger = logging\n\nf0_bin = 256\nf0_max = 1100.0\nf0_min = 50.0\nf0_mel_min = 1127 * np.log(1 + f0_min / 700)\nf0_mel_max = 1127 * np.log(1 + f0_max / 700)\n\ndef normalize_f0(f0, x_mask, uv, random_scale=True):\n    # calculate means based on x_mask\n    uv_sum = torch.sum(uv, dim=1, keepdim=True)\n    uv_sum[uv_sum == 0] = 9999\n    means = torch.sum(f0[:, 0, :] * uv, dim=1, keepdim=True) / uv_sum\n\n    if random_scale:\n        factor = torch.Tensor(f0.shape[0], 1).uniform_(0.8, 1.2).to(f0.device)\n    else:\n        factor = torch.ones(f0.shape[0], 1).to(f0.device)\n    # normalize f0 based on means and factor\n    f0_norm = (f0 - means.unsqueeze(-1)) * factor.unsqueeze(-1)\n    if torch.isnan(f0_norm).any():\n        exit(0)\n    return f0_norm * x_mask\ndef plot_data_to_numpy(x, y):\n    global MATPLOTLIB_FLAG\n    if not MATPLOTLIB_FLAG:\n        import matplotlib\n        matplotlib.use(\"Agg\")\n        MATPLOTLIB_FLAG = True\n        mpl_logger = logging.getLogger('matplotlib')\n        mpl_logger.setLevel(logging.WARNING)\n    import matplotlib.pylab as plt\n    import numpy as np\n\n    fig, ax = plt.subplots(figsize=(10, 2))\n    plt.plot(x)\n    plt.plot(y)\n    plt.tight_layout()\n\n    fig.canvas.draw()\n    data = np.fromstring(fig.canvas.tostring_rgb(), dtype=np.uint8, sep='')\n    data = data.reshape(fig.canvas.get_width_height()[::-1] + (3,))\n    plt.close()\n    return data\n\n\ndef f0_to_coarse(f0):\n  f0_mel = 1127 * (1 + f0 / 700).log()\n  a = (f0_bin - 2) / (f0_mel_max - f0_mel_min)\n  b = f0_mel_min * a - 1.\n  f0_mel = torch.where(f0_mel > 0, f0_mel * a - b, f0_mel)\n  # torch.clip_(f0_mel, min=1., max=float(f0_bin - 1))\n  f0_coarse = torch.round(f0_mel).long()\n  f0_coarse = f0_coarse * (f0_coarse > 0)\n  f0_coarse = f0_coarse + ((f0_coarse < 1) * 1)\n  f0_coarse = f0_coarse * (f0_coarse < f0_bin)\n  f0_coarse = f0_coarse + ((f0_coarse >= f0_bin) * (f0_bin - 1))\n  return f0_coarse\n\ndef get_content(cmodel, y):\n    with torch.no_grad():\n        c = cmodel.extract_features(y.squeeze(1))[0]\n    c = c.transpose(1, 2)\n    return c\n\ndef get_f0_predictor(f0_predictor,hop_length,sampling_rate,**kargs):\n    if f0_predictor == \"pm\":\n        from modules.F0Predictor.PMF0Predictor import PMF0Predictor\n        f0_predictor_object = PMF0Predictor(hop_length=hop_length,sampling_rate=sampling_rate)\n    elif f0_predictor == \"crepe\":\n        from modules.F0Predictor.CrepeF0Predictor import CrepeF0Predictor\n        f0_predictor_object = CrepeF0Predictor(hop_length=hop_length,sampling_rate=sampling_rate,device=kargs[\"device\"],threshold=kargs[\"threshold\"])\n    elif f0_predictor == \"harvest\":\n        from modules.F0Predictor.HarvestF0Predictor import HarvestF0Predictor\n        f0_predictor_object = HarvestF0Predictor(hop_length=hop_length,sampling_rate=sampling_rate)\n    elif f0_predictor == \"dio\":\n        from modules.F0Predictor.DioF0Predictor import DioF0Predictor\n        f0_predictor_object = DioF0Predictor(hop_length=hop_length,sampling_rate=sampling_rate) \n    elif f0_predictor == \"rmvpe\":\n        from modules.F0Predictor.RMVPEF0Predictor import RMVPEF0Predictor\n        f0_predictor_object = RMVPEF0Predictor(hop_length=hop_length,sampling_rate=sampling_rate,dtype=torch.float32 ,device=kargs[\"device\"],threshold=kargs[\"threshold\"])\n    elif f0_predictor == \"fcpe\":\n        from modules.F0Predictor.FCPEF0Predictor import FCPEF0Predictor\n        f0_predictor_object = FCPEF0Predictor(hop_length=hop_length,sampling_rate=sampling_rate,dtype=torch.float32 ,device=kargs[\"device\"],threshold=kargs[\"threshold\"])\n    else:\n        raise Exception(\"Unknown f0 predictor\")\n    return f0_predictor_object\n\ndef get_speech_encoder(speech_encoder,device=None,**kargs):\n    if speech_encoder == \"vec768l12\":\n        from vencoder.ContentVec768L12 import ContentVec768L12\n        speech_encoder_object = ContentVec768L12(device = device)\n    elif speech_encoder == \"vec256l9\":\n        from vencoder.ContentVec256L9 import ContentVec256L9\n        speech_encoder_object = ContentVec256L9(device = device)\n    elif speech_encoder == \"vec256l9-onnx\":\n        from vencoder.ContentVec256L9_Onnx import ContentVec256L9_Onnx\n        speech_encoder_object = ContentVec256L9_Onnx(device = device)\n    elif speech_encoder == \"vec256l12-onnx\":\n        from vencoder.ContentVec256L12_Onnx import ContentVec256L12_Onnx\n        speech_encoder_object = ContentVec256L12_Onnx(device = device)\n    elif speech_encoder == \"vec768l9-onnx\":\n        from vencoder.ContentVec768L9_Onnx import ContentVec768L9_Onnx\n        speech_encoder_object = ContentVec768L9_Onnx(device = device)\n    elif speech_encoder == \"vec768l12-onnx\":\n        from vencoder.ContentVec768L12_Onnx import ContentVec768L12_Onnx\n        speech_encoder_object = ContentVec768L12_Onnx(device = device)\n    elif speech_encoder == \"hubertsoft-onnx\":\n        from vencoder.HubertSoft_Onnx import HubertSoft_Onnx\n        speech_encoder_object = HubertSoft_Onnx(device = device)\n    elif speech_encoder == \"hubertsoft\":\n        from vencoder.HubertSoft import HubertSoft\n        speech_encoder_object = HubertSoft(device = device)\n    elif speech_encoder == \"whisper-ppg\":\n        from vencoder.WhisperPPG import WhisperPPG\n        speech_encoder_object = WhisperPPG(device = device)\n    elif speech_encoder == \"cnhubertlarge\":\n        from vencoder.CNHubertLarge import CNHubertLarge\n        speech_encoder_object = CNHubertLarge(device = device)\n    elif speech_encoder == \"dphubert\":\n        from vencoder.DPHubert import DPHubert\n        speech_encoder_object = DPHubert(device = device)\n    elif speech_encoder == \"whisper-ppg-large\":\n        from vencoder.WhisperPPGLarge import WhisperPPGLarge\n        speech_encoder_object = WhisperPPGLarge(device = device)\n    elif speech_encoder == \"wavlmbase+\":\n        from vencoder.WavLMBasePlus import WavLMBasePlus\n        speech_encoder_object = WavLMBasePlus(device = device)\n    else:\n        raise Exception(\"Unknown speech encoder\")\n    return speech_encoder_object \n\ndef load_checkpoint(checkpoint_path, model, optimizer=None, skip_optimizer=False):\n    assert os.path.isfile(checkpoint_path)\n    checkpoint_dict = torch.load(checkpoint_path, map_location='cpu')\n    iteration = checkpoint_dict['iteration']\n    learning_rate = checkpoint_dict['learning_rate']\n    if optimizer is not None and not skip_optimizer and checkpoint_dict['optimizer'] is not None:\n        optimizer.load_state_dict(checkpoint_dict['optimizer'])\n    saved_state_dict = checkpoint_dict['model']\n    model = model.to(list(saved_state_dict.values())[0].dtype)\n    if hasattr(model, 'module'):\n        state_dict = model.module.state_dict()\n    else:\n        state_dict = model.state_dict()\n    new_state_dict = {}\n    for k, v in state_dict.items():\n        try:\n            # assert \"dec\" in k or \"disc\" in k\n            # print(\"load\", k)\n            new_state_dict[k] = saved_state_dict[k]\n            assert saved_state_dict[k].shape == v.shape, (saved_state_dict[k].shape, v.shape)\n        except Exception:\n            if \"enc_q\" not in k or \"emb_g\" not in k:\n              print(\"%s is not in the checkpoint,please check your checkpoint.If you're using pretrain model,just ignore this warning.\" % k)\n              logger.info(\"%s is not in the checkpoint\" % k)\n              new_state_dict[k] = v\n    if hasattr(model, 'module'):\n        model.module.load_state_dict(new_state_dict)\n    else:\n        model.load_state_dict(new_state_dict)\n    print(\"load \")\n    logger.info(\"Loaded checkpoint '{}' (iteration {})\".format(\n        checkpoint_path, iteration))\n    return model, optimizer, learning_rate, iteration\n\n\ndef save_checkpoint(model, optimizer, learning_rate, iteration, checkpoint_path):\n  logger.info(\"Saving model and optimizer state at iteration {} to {}\".format(\n    iteration, checkpoint_path))\n  if hasattr(model, 'module'):\n    state_dict = model.module.state_dict()\n  else:\n    state_dict = model.state_dict()\n  torch.save({'model': state_dict,\n              'iteration': iteration,\n              'optimizer': optimizer.state_dict(),\n              'learning_rate': learning_rate}, checkpoint_path)\n\ndef clean_checkpoints(path_to_models='logs/44k/', n_ckpts_to_keep=2, sort_by_time=True):\n  \"\"\"Freeing up space by deleting saved ckpts\n\n  Arguments:\n  path_to_models    --  Path to the model directory\n  n_ckpts_to_keep   --  Number of ckpts to keep, excluding G_0.pth and D_0.pth\n  sort_by_time      --  True -> chronologically delete ckpts\n                        False -> lexicographically delete ckpts\n  \"\"\"\n  ckpts_files = [f for f in os.listdir(path_to_models) if os.path.isfile(os.path.join(path_to_models, f))]\n  def name_key(_f):\n      return int(re.compile(\"._(\\\\d+)\\\\.pth\").match(_f).group(1))\n  def time_key(_f):\n      return os.path.getmtime(os.path.join(path_to_models, _f))\n  sort_key = time_key if sort_by_time else name_key\n  def x_sorted(_x):\n      return sorted([f for f in ckpts_files if f.startswith(_x) and not f.endswith(\"_0.pth\")], key=sort_key)\n  to_del = [os.path.join(path_to_models, fn) for fn in\n            (x_sorted('G')[:-n_ckpts_to_keep] + x_sorted('D')[:-n_ckpts_to_keep])]\n  def del_info(fn):\n      return logger.info(f\".. Free up space by deleting ckpt {fn}\")\n  def del_routine(x):\n      return [os.remove(x), del_info(x)]\n  [del_routine(fn) for fn in to_del]\n\ndef summarize(writer, global_step, scalars={}, histograms={}, images={}, audios={}, audio_sampling_rate=22050):\n  for k, v in scalars.items():\n    writer.add_scalar(k, v, global_step)\n  for k, v in histograms.items():\n    writer.add_histogram(k, v, global_step)\n  for k, v in images.items():\n    writer.add_image(k, v, global_step, dataformats='HWC')\n  for k, v in audios.items():\n    writer.add_audio(k, v, global_step, audio_sampling_rate)\n\n\ndef latest_checkpoint_path(dir_path, regex=\"G_*.pth\"):\n  f_list = glob.glob(os.path.join(dir_path, regex))\n  f_list.sort(key=lambda f: int(\"\".join(filter(str.isdigit, f))))\n  x = f_list[-1]\n  print(x)\n  return x\n\n\ndef plot_spectrogram_to_numpy(spectrogram):\n  global MATPLOTLIB_FLAG\n  if not MATPLOTLIB_FLAG:\n    import matplotlib\n    matplotlib.use(\"Agg\")\n    MATPLOTLIB_FLAG = True\n    mpl_logger = logging.getLogger('matplotlib')\n    mpl_logger.setLevel(logging.WARNING)\n  import matplotlib.pylab as plt\n  import numpy as np\n\n  fig, ax = plt.subplots(figsize=(10,2))\n  im = ax.imshow(spectrogram, aspect=\"auto\", origin=\"lower\",\n                  interpolation='none')\n  plt.colorbar(im, ax=ax)\n  plt.xlabel(\"Frames\")\n  plt.ylabel(\"Channels\")\n  plt.tight_layout()\n\n  fig.canvas.draw()\n  data = np.fromstring(fig.canvas.tostring_rgb(), dtype=np.uint8, sep='')\n  data = data.reshape(fig.canvas.get_width_height()[::-1] + (3,))\n  plt.close()\n  return data\n\n\ndef plot_alignment_to_numpy(alignment, info=None):\n  global MATPLOTLIB_FLAG\n  if not MATPLOTLIB_FLAG:\n    import matplotlib\n    matplotlib.use(\"Agg\")\n    MATPLOTLIB_FLAG = True\n    mpl_logger = logging.getLogger('matplotlib')\n    mpl_logger.setLevel(logging.WARNING)\n  import matplotlib.pylab as plt\n  import numpy as np\n\n  fig, ax = plt.subplots(figsize=(6, 4))\n  im = ax.imshow(alignment.transpose(), aspect='auto', origin='lower',\n                  interpolation='none')\n  fig.colorbar(im, ax=ax)\n  xlabel = 'Decoder timestep'\n  if info is not None:\n      xlabel += '\\n\\n' + info\n  plt.xlabel(xlabel)\n  plt.ylabel('Encoder timestep')\n  plt.tight_layout()\n\n  fig.canvas.draw()\n  data = np.fromstring(fig.canvas.tostring_rgb(), dtype=np.uint8, sep='')\n  data = data.reshape(fig.canvas.get_width_height()[::-1] + (3,))\n  plt.close()\n  return data\n\n\ndef load_wav_to_torch(full_path):\n  sampling_rate, data = read(full_path)\n  return torch.FloatTensor(data.astype(np.float32)), sampling_rate\n\n\ndef load_filepaths_and_text(filename, split=\"|\"):\n  with open(filename, encoding='utf-8') as f:\n    filepaths_and_text = [line.strip().split(split) for line in f]\n  return filepaths_and_text\n\n\ndef get_hparams(init=True):\n  parser = argparse.ArgumentParser()\n  parser.add_argument('-c', '--config', type=str, default=\"./configs/config.json\",\n                      help='JSON file for configuration')\n  parser.add_argument('-m', '--model', type=str, required=True,\n                      help='Model name')\n\n  args = parser.parse_args()\n  model_dir = os.path.join(\"./logs\", args.model)\n\n  if not os.path.exists(model_dir):\n    os.makedirs(model_dir)\n\n  config_path = args.config\n  config_save_path = os.path.join(model_dir, \"config.json\")\n  if init:\n    with open(config_path, \"r\") as f:\n      data = f.read()\n    with open(config_save_path, \"w\") as f:\n      f.write(data)\n  else:\n    with open(config_save_path, \"r\") as f:\n      data = f.read()\n  config = json.loads(data)\n\n  hparams = HParams(**config)\n  hparams.model_dir = model_dir\n  return hparams\n\n\ndef get_hparams_from_dir(model_dir):\n  config_save_path = os.path.join(model_dir, \"config.json\")\n  with open(config_save_path, \"r\") as f:\n    data = f.read()\n  config = json.loads(data)\n\n  hparams =HParams(**config)\n  hparams.model_dir = model_dir\n  return hparams\n\n\ndef get_hparams_from_file(config_path, infer_mode = False):\n  with open(config_path, \"r\") as f:\n    data = f.read()\n  config = json.loads(data)\n  hparams =HParams(**config) if not infer_mode else InferHParams(**config)\n  return hparams\n\n\ndef check_git_hash(model_dir):\n  source_dir = os.path.dirname(os.path.realpath(__file__))\n  if not os.path.exists(os.path.join(source_dir, \".git\")):\n    logger.warn(\"{} is not a git repository, therefore hash value comparison will be ignored.\".format(\n      source_dir\n    ))\n    return\n\n  cur_hash = subprocess.getoutput(\"git rev-parse HEAD\")\n\n  path = os.path.join(model_dir, \"githash\")\n  if os.path.exists(path):\n    saved_hash = open(path).read()\n    if saved_hash != cur_hash:\n      logger.warn(\"git hash values are different. {}(saved) != {}(current)\".format(\n        saved_hash[:8], cur_hash[:8]))\n  else:\n    open(path, \"w\").write(cur_hash)\n\n\ndef get_logger(model_dir, filename=\"train.log\"):\n  global logger\n  logger = logging.getLogger(os.path.basename(model_dir))\n  logger.setLevel(logging.DEBUG)\n\n  formatter = logging.Formatter(\"%(asctime)s\\t%(name)s\\t%(levelname)s\\t%(message)s\")\n  if not os.path.exists(model_dir):\n    os.makedirs(model_dir)\n  h = logging.FileHandler(os.path.join(model_dir, filename))\n  h.setLevel(logging.DEBUG)\n  h.setFormatter(formatter)\n  logger.addHandler(h)\n  return logger\n\n\ndef repeat_expand_2d(content, target_len, mode = 'left'):\n    # content : [h, t]\n    return repeat_expand_2d_left(content, target_len) if mode == 'left' else repeat_expand_2d_other(content, target_len, mode)\n\n\n\ndef repeat_expand_2d_left(content, target_len):\n    # content : [h, t]\n\n    src_len = content.shape[-1]\n    target = torch.zeros([content.shape[0], target_len], dtype=torch.float).to(content.device)\n    temp = torch.arange(src_len+1) * target_len / src_len\n    current_pos = 0\n    for i in range(target_len):\n        if i < temp[current_pos+1]:\n            target[:, i] = content[:, current_pos]\n        else:\n            current_pos += 1\n            target[:, i] = content[:, current_pos]\n\n    return target\n\n\n# mode : 'nearest'| 'linear'| 'bilinear'| 'bicubic'| 'trilinear'| 'area'\ndef repeat_expand_2d_other(content, target_len, mode = 'nearest'):\n    # content : [h, t]\n    content = content[None,:,:]\n    target = F.interpolate(content,size=target_len,mode=mode)[0]\n    return target\n\n\ndef mix_model(model_paths,mix_rate,mode):\n  mix_rate = torch.FloatTensor(mix_rate)/100\n  model_tem = torch.load(model_paths[0])\n  models = [torch.load(path)[\"model\"] for path in model_paths]\n  if mode == 0:\n     mix_rate = F.softmax(mix_rate,dim=0)\n  for k in model_tem[\"model\"].keys():\n     model_tem[\"model\"][k] = torch.zeros_like(model_tem[\"model\"][k])\n     for i,model in enumerate(models):\n        model_tem[\"model\"][k] += model[k]*mix_rate[i]\n  torch.save(model_tem,os.path.join(os.path.curdir,\"output.pth\"))\n  return os.path.join(os.path.curdir,\"output.pth\")\n  \ndef change_rms(data1, sr1, data2, sr2, rate):  # 1是输入音频，2是输出音频,rate是2的占比 from RVC\n    # print(data1.max(),data2.max())\n    rms1 = librosa.feature.rms(\n        y=data1, frame_length=sr1 // 2 * 2, hop_length=sr1 // 2\n    )  # 每半秒一个点\n    rms2 = librosa.feature.rms(y=data2.detach().cpu().numpy(), frame_length=sr2 // 2 * 2, hop_length=sr2 // 2)\n    rms1 = torch.from_numpy(rms1).to(data2.device)\n    rms1 = F.interpolate(\n        rms1.unsqueeze(0), size=data2.shape[0], mode=\"linear\"\n    ).squeeze()\n    rms2 = torch.from_numpy(rms2).to(data2.device)\n    rms2 = F.interpolate(\n        rms2.unsqueeze(0), size=data2.shape[0], mode=\"linear\"\n    ).squeeze()\n    rms2 = torch.max(rms2, torch.zeros_like(rms2) + 1e-6)\n    data2 *= (\n        torch.pow(rms1, torch.tensor(1 - rate))\n        * torch.pow(rms2, torch.tensor(rate - 1))\n    )\n    return data2\n\ndef train_index(spk_name,root_dir = \"dataset/44k/\"):  #from: RVC https://github.com/RVC-Project/Retrieval-based-Voice-Conversion-WebUI\n    n_cpu = cpu_count()\n    print(\"The feature index is constructing.\")\n    exp_dir = os.path.join(root_dir,spk_name)\n    listdir_res = []\n    for file in os.listdir(exp_dir):\n       if \".wav.soft.pt\" in file:\n          listdir_res.append(os.path.join(exp_dir,file))\n    if len(listdir_res) == 0:\n        raise Exception(\"You need to run preprocess_hubert_f0.py!\")\n    npys = []\n    for name in sorted(listdir_res):\n        phone = torch.load(name)[0].transpose(-1,-2).numpy()\n        npys.append(phone)\n    big_npy = np.concatenate(npys, 0)\n    big_npy_idx = np.arange(big_npy.shape[0])\n    np.random.shuffle(big_npy_idx)\n    big_npy = big_npy[big_npy_idx]\n    if big_npy.shape[0] > 2e5:\n        # if(1):\n        info = \"Trying doing kmeans %s shape to 10k centers.\" % big_npy.shape[0]\n        print(info)\n        try:\n            big_npy = (\n                MiniBatchKMeans(\n                    n_clusters=10000,\n                    verbose=True,\n                    batch_size=256 * n_cpu,\n                    compute_labels=False,\n                    init=\"random\",\n                )\n                .fit(big_npy)\n                .cluster_centers_\n            )\n        except Exception:\n            info = traceback.format_exc()\n            print(info)\n    n_ivf = min(int(16 * np.sqrt(big_npy.shape[0])), big_npy.shape[0] // 39)\n    index = faiss.index_factory(big_npy.shape[1] , \"IVF%s,Flat\" % n_ivf)\n    index_ivf = faiss.extract_index_ivf(index)  #\n    index_ivf.nprobe = 1\n    index.train(big_npy)\n    batch_size_add = 8192\n    for i in range(0, big_npy.shape[0], batch_size_add):\n        index.add(big_npy[i : i + batch_size_add])\n    # faiss.write_index(\n    #     index,\n    #     f\"added_{spk_name}.index\"\n    # )\n    print(\"Successfully build index\")\n    return index\n\n\nclass HParams():\n  def __init__(self, **kwargs):\n    for k, v in kwargs.items():\n      if type(v) == dict:\n        v = HParams(**v)\n      self[k] = v\n\n  def keys(self):\n    return self.__dict__.keys()\n\n  def items(self):\n    return self.__dict__.items()\n\n  def values(self):\n    return self.__dict__.values()\n\n  def __len__(self):\n    return len(self.__dict__)\n\n  def __getitem__(self, key):\n    return getattr(self, key)\n\n  def __setitem__(self, key, value):\n    return setattr(self, key, value)\n\n  def __contains__(self, key):\n    return key in self.__dict__\n\n  def __repr__(self):\n    return self.__dict__.__repr__()\n\n  def get(self,index):\n    return self.__dict__.get(index)\n\n  \nclass InferHParams(HParams):\n  def __init__(self, **kwargs):\n    for k, v in kwargs.items():\n      if type(v) == dict:\n        v = InferHParams(**v)\n      self[k] = v\n\n  def __getattr__(self,index):\n    return self.get(index)\n\n\nclass Volume_Extractor:\n    def __init__(self, hop_size = 512):\n        self.hop_size = hop_size\n        \n    def extract(self, audio): # audio: 2d tensor array\n        if not isinstance(audio,torch.Tensor):\n           audio = torch.Tensor(audio)\n        n_frames = int(audio.size(-1) // self.hop_size)\n        audio2 = audio ** 2\n        audio2 = torch.nn.functional.pad(audio2, (int(self.hop_size // 2), int((self.hop_size + 1) // 2)), mode = 'reflect')\n        volume = torch.nn.functional.unfold(audio2[:,None,None,:],(1,self.hop_size),stride=self.hop_size)[:,:,:n_frames].mean(dim=1)[0]\n        volume = torch.sqrt(volume)\n        return volume\n"
        },
        {
          "name": "vdecoder",
          "type": "tree",
          "content": null
        },
        {
          "name": "vencoder",
          "type": "tree",
          "content": null
        },
        {
          "name": "wav_upload.py",
          "type": "blob",
          "size": 0.896484375,
          "content": "import argparse\nimport os\nimport shutil\n\nfrom google.colab import files\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--type\", type=str, required=True, help=\"type of file to upload\")\n    args = parser.parse_args()\n    file_type = args.type\n\n    basepath = os.getcwd()\n    uploaded = files.upload() # 上传文件\n    assert(file_type in ['zip', 'audio'])\n    if file_type == \"zip\":\n        upload_path = \"./upload/\"\n        for filename in uploaded.keys():\n            #将上传的文件移动到指定的位置上\n            shutil.move(os.path.join(basepath, filename), os.path.join(upload_path, \"userzip.zip\"))\n    elif file_type == \"audio\":\n        upload_path = \"./raw/\"\n        for filename in uploaded.keys():\n            #将上传的文件移动到指定的位置上\n            shutil.move(os.path.join(basepath, filename), os.path.join(upload_path, filename))"
        },
        {
          "name": "webUI.py",
          "type": "blob",
          "size": 23.89453125,
          "content": "import glob\nimport json\nimport logging\nimport os\nimport re\nimport subprocess\nimport sys\nimport time\nimport traceback\nfrom itertools import chain\nfrom pathlib import Path\n\n# os.system(\"wget -P cvec/ https://huggingface.co/spaces/innnky/nanami/resolve/main/checkpoint_best_legacy_500.pt\")\nimport gradio as gr\nimport librosa\nimport numpy as np\nimport soundfile\nimport torch\n\nfrom compress_model import removeOptimizer\nfrom edgetts.tts_voices import SUPPORTED_LANGUAGES\nfrom inference.infer_tool import Svc\nfrom utils import mix_model\n\nlogging.getLogger('numba').setLevel(logging.WARNING)\nlogging.getLogger('markdown_it').setLevel(logging.WARNING)\nlogging.getLogger('urllib3').setLevel(logging.WARNING)\nlogging.getLogger('matplotlib').setLevel(logging.WARNING)\nlogging.getLogger('multipart').setLevel(logging.WARNING)\n\nmodel = None\nspk = None\ndebug = False\n\nlocal_model_root = './trained'\n\ncuda = {}\nif torch.cuda.is_available():\n    for i in range(torch.cuda.device_count()):\n        device_name = torch.cuda.get_device_properties(i).name\n        cuda[f\"CUDA:{i} {device_name}\"] = f\"cuda:{i}\"\n\ndef upload_mix_append_file(files,sfiles):\n    try:\n        if(sfiles is None):\n            file_paths = [file.name for file in files]\n        else:\n            file_paths = [file.name for file in chain(files,sfiles)]\n        p = {file:100 for file in file_paths}\n        return file_paths,mix_model_output1.update(value=json.dumps(p,indent=2))\n    except Exception as e:\n        if debug:\n            traceback.print_exc()\n        raise gr.Error(e)\n\ndef mix_submit_click(js,mode):\n    try:\n        assert js.lstrip()!=\"\"\n        modes = {\"凸组合\":0, \"线性组合\":1}\n        mode = modes[mode]\n        data = json.loads(js)\n        data = list(data.items())\n        model_path,mix_rate = zip(*data)\n        path = mix_model(model_path,mix_rate,mode)\n        return f\"成功，文件被保存在了{path}\"\n    except Exception as e:\n        if debug:\n            traceback.print_exc()\n        raise gr.Error(e)\n\ndef updata_mix_info(files):\n    try:\n        if files is None :\n            return mix_model_output1.update(value=\"\")\n        p = {file.name:100 for file in files}\n        return mix_model_output1.update(value=json.dumps(p,indent=2))\n    except Exception as e:\n        if debug:\n            traceback.print_exc()\n        raise gr.Error(e)\n\ndef modelAnalysis(model_path,config_path,cluster_model_path,device,enhance,diff_model_path,diff_config_path,only_diffusion,use_spk_mix,local_model_enabled,local_model_selection):\n    global model\n    try:\n        device = cuda[device] if \"CUDA\" in device else device\n        cluster_filepath = os.path.split(cluster_model_path.name) if cluster_model_path is not None else \"no_cluster\"\n        # get model and config path\n        if (local_model_enabled):\n            # local path\n            model_path = glob.glob(os.path.join(local_model_selection, '*.pth'))[0]\n            config_path = glob.glob(os.path.join(local_model_selection, '*.json'))[0]\n        else:\n            # upload from webpage\n            model_path = model_path.name\n            config_path = config_path.name\n        fr = \".pkl\" in cluster_filepath[1]\n        model = Svc(model_path,\n                config_path,\n                device=device if device != \"Auto\" else None,\n                cluster_model_path = cluster_model_path.name if cluster_model_path is not None else \"\",\n                nsf_hifigan_enhance=enhance,\n                diffusion_model_path = diff_model_path.name if diff_model_path is not None else \"\",\n                diffusion_config_path = diff_config_path.name if diff_config_path is not None else \"\",\n                shallow_diffusion = True if diff_model_path is not None else False,\n                only_diffusion = only_diffusion,\n                spk_mix_enable = use_spk_mix,\n                feature_retrieval = fr\n                )\n        spks = list(model.spk2id.keys())\n        device_name = torch.cuda.get_device_properties(model.dev).name if \"cuda\" in str(model.dev) else str(model.dev)\n        msg = f\"成功加载模型到设备{device_name}上\\n\"\n        if cluster_model_path is None:\n            msg += \"未加载聚类模型或特征检索模型\\n\"\n        elif fr:\n            msg += f\"特征检索模型{cluster_filepath[1]}加载成功\\n\"\n        else:\n            msg += f\"聚类模型{cluster_filepath[1]}加载成功\\n\"\n        if diff_model_path is None:\n            msg += \"未加载扩散模型\\n\"\n        else:\n            msg += f\"扩散模型{diff_model_path.name}加载成功\\n\"\n        msg += \"当前模型的可用音色：\\n\"\n        for i in spks:\n            msg += i + \" \"\n        return sid.update(choices = spks,value=spks[0]), msg\n    except Exception as e:\n        if debug:\n            traceback.print_exc()\n        raise gr.Error(e)\n\n    \ndef modelUnload():\n    global model\n    if model is None:\n        return sid.update(choices = [],value=\"\"),\"没有模型需要卸载!\"\n    else:\n        model.unload_model()\n        model = None\n        torch.cuda.empty_cache()\n        return sid.update(choices = [],value=\"\"),\"模型卸载完毕!\"\n    \ndef vc_infer(output_format, sid, audio_path, truncated_basename, vc_transform, auto_f0, cluster_ratio, slice_db, noise_scale, pad_seconds, cl_num, lg_num, lgr_num, f0_predictor, enhancer_adaptive_key, cr_threshold, k_step, use_spk_mix, second_encoding, loudness_envelope_adjustment):\n    global model\n    _audio = model.slice_inference(\n        audio_path,\n        sid,\n        vc_transform,\n        slice_db,\n        cluster_ratio,\n        auto_f0,\n        noise_scale,\n        pad_seconds,\n        cl_num,\n        lg_num,\n        lgr_num,\n        f0_predictor,\n        enhancer_adaptive_key,\n        cr_threshold,\n        k_step,\n        use_spk_mix,\n        second_encoding,\n        loudness_envelope_adjustment\n    )  \n    model.clear_empty()\n    #构建保存文件的路径，并保存到results文件夹内\n    str(int(time.time()))\n    if not os.path.exists(\"results\"):\n        os.makedirs(\"results\")\n    key = \"auto\" if auto_f0 else f\"{int(vc_transform)}key\"\n    cluster = \"_\" if cluster_ratio == 0 else f\"_{cluster_ratio}_\"\n    isdiffusion = \"sovits\"\n    if model.shallow_diffusion:\n        isdiffusion = \"sovdiff\"\n\n    if model.only_diffusion:\n        isdiffusion = \"diff\"\n    \n    output_file_name = 'result_'+truncated_basename+f'_{sid}_{key}{cluster}{isdiffusion}.{output_format}'\n    output_file = os.path.join(\"results\", output_file_name)\n    soundfile.write(output_file, _audio, model.target_sample, format=output_format)\n    return output_file\n\ndef vc_fn(sid, input_audio, output_format, vc_transform, auto_f0,cluster_ratio, slice_db, noise_scale,pad_seconds,cl_num,lg_num,lgr_num,f0_predictor,enhancer_adaptive_key,cr_threshold,k_step,use_spk_mix,second_encoding,loudness_envelope_adjustment):\n    global model\n    try:\n        if input_audio is None:\n            return \"You need to upload an audio\", None\n        if model is None:\n            return \"You need to upload an model\", None\n        if getattr(model, 'cluster_model', None) is None and model.feature_retrieval is False:\n            if cluster_ratio != 0:\n                return \"You need to upload an cluster model or feature retrieval model before assigning cluster ratio!\", None\n        #print(input_audio)    \n        audio, sampling_rate = soundfile.read(input_audio)\n        #print(audio.shape,sampling_rate)\n        if np.issubdtype(audio.dtype, np.integer):\n            audio = (audio / np.iinfo(audio.dtype).max).astype(np.float32)\n        #print(audio.dtype)\n        if len(audio.shape) > 1:\n            audio = librosa.to_mono(audio.transpose(1, 0))\n        # 未知原因Gradio上传的filepath会有一个奇怪的固定后缀，这里去掉\n        truncated_basename = Path(input_audio).stem[:-6]\n        processed_audio = os.path.join(\"raw\", f\"{truncated_basename}.wav\")\n        soundfile.write(processed_audio, audio, sampling_rate, format=\"wav\")\n        output_file = vc_infer(output_format, sid, processed_audio, truncated_basename, vc_transform, auto_f0, cluster_ratio, slice_db, noise_scale, pad_seconds, cl_num, lg_num, lgr_num, f0_predictor, enhancer_adaptive_key, cr_threshold, k_step, use_spk_mix, second_encoding, loudness_envelope_adjustment)\n\n        return \"Success\", output_file\n    except Exception as e:\n        if debug:\n            traceback.print_exc()\n        raise gr.Error(e)\n\ndef text_clear(text):\n    return re.sub(r\"[\\n\\,\\(\\) ]\", \"\", text)\n\ndef vc_fn2(_text, _lang, _gender, _rate, _volume, sid, output_format, vc_transform, auto_f0,cluster_ratio, slice_db, noise_scale,pad_seconds,cl_num,lg_num,lgr_num,f0_predictor,enhancer_adaptive_key,cr_threshold, k_step,use_spk_mix,second_encoding,loudness_envelope_adjustment):\n    global model\n    try:\n        if model is None:\n            return \"You need to upload an model\", None\n        if getattr(model, 'cluster_model', None) is None and model.feature_retrieval is False:\n            if cluster_ratio != 0:\n                return \"You need to upload an cluster model or feature retrieval model before assigning cluster ratio!\", None\n        _rate = f\"+{int(_rate*100)}%\" if _rate >= 0 else f\"{int(_rate*100)}%\"\n        _volume = f\"+{int(_volume*100)}%\" if _volume >= 0 else f\"{int(_volume*100)}%\"\n        if _lang == \"Auto\":\n            _gender = \"Male\" if _gender == \"男\" else \"Female\"\n            subprocess.run([sys.executable, \"edgetts/tts.py\", _text, _lang, _rate, _volume, _gender])\n        else:\n            subprocess.run([sys.executable, \"edgetts/tts.py\", _text, _lang, _rate, _volume])\n        target_sr = 44100\n        y, sr = librosa.load(\"tts.wav\")\n        resampled_y = librosa.resample(y, orig_sr=sr, target_sr=target_sr)\n        soundfile.write(\"tts.wav\", resampled_y, target_sr, subtype = \"PCM_16\")\n        input_audio = \"tts.wav\"\n        #audio, _ = soundfile.read(input_audio)\n        output_file_path = vc_infer(output_format, sid, input_audio, \"tts\", vc_transform, auto_f0, cluster_ratio, slice_db, noise_scale, pad_seconds, cl_num, lg_num, lgr_num, f0_predictor, enhancer_adaptive_key, cr_threshold, k_step, use_spk_mix, second_encoding, loudness_envelope_adjustment)\n        os.remove(\"tts.wav\")\n        return \"Success\", output_file_path\n    except Exception as e:\n        if debug: traceback.print_exc()  # noqa: E701\n        raise gr.Error(e)\n\ndef model_compression(_model):\n    if _model == \"\":\n        return \"请先选择要压缩的模型\"\n    else:\n        model_path = os.path.split(_model.name)\n        filename, extension = os.path.splitext(model_path[1])\n        output_model_name = f\"{filename}_compressed{extension}\"\n        output_path = os.path.join(os.getcwd(), output_model_name)\n        removeOptimizer(_model.name, output_path)\n        return f\"模型已成功被保存在了{output_path}\"\n\ndef scan_local_models():\n    res = []\n    candidates = glob.glob(os.path.join(local_model_root, '**', '*.json'), recursive=True)\n    candidates = set([os.path.dirname(c) for c in candidates])\n    for candidate in candidates:\n        jsons = glob.glob(os.path.join(candidate, '*.json'))\n        pths = glob.glob(os.path.join(candidate, '*.pth'))\n        if (len(jsons) == 1 and len(pths) == 1):\n            # must contain exactly one json and one pth file\n            res.append(candidate)\n    return res\n\ndef local_model_refresh_fn():\n    choices = scan_local_models()\n    return gr.Dropdown.update(choices=choices)\n\ndef debug_change():\n    global debug\n    debug = debug_button.value\n\nwith gr.Blocks(\n    theme=gr.themes.Base(\n        primary_hue = gr.themes.colors.green,\n        font=[\"Source Sans Pro\", \"Arial\", \"sans-serif\"],\n        font_mono=['JetBrains mono', \"Consolas\", 'Courier New']\n    ),\n) as app:\n    with gr.Tabs():\n        with gr.TabItem(\"推理\"):\n            gr.Markdown(value=\"\"\"\n                So-vits-svc 4.0 推理 webui\n                \"\"\")\n            with gr.Row(variant=\"panel\"):\n                with gr.Column():\n                    gr.Markdown(value=\"\"\"\n                        <font size=2> 模型设置</font>\n                        \"\"\")\n                    with gr.Tabs():\n                        # invisible checkbox that tracks tab status\n                        local_model_enabled = gr.Checkbox(value=False, visible=False)\n                        with gr.TabItem('上传') as local_model_tab_upload:\n                            with gr.Row():\n                                model_path = gr.File(label=\"选择模型文件\")\n                                config_path = gr.File(label=\"选择配置文件\")\n                        with gr.TabItem('本地') as local_model_tab_local:\n                            gr.Markdown(f'模型应当放置于{local_model_root}文件夹下')\n                            local_model_refresh_btn = gr.Button('刷新本地模型列表')\n                            local_model_selection = gr.Dropdown(label='选择模型文件夹', choices=[], interactive=True)\n                    with gr.Row():\n                        diff_model_path = gr.File(label=\"选择扩散模型文件\")\n                        diff_config_path = gr.File(label=\"选择扩散模型配置文件\")\n                    cluster_model_path = gr.File(label=\"选择聚类模型或特征检索文件（没有可以不选）\")\n                    device = gr.Dropdown(label=\"推理设备，默认为自动选择CPU和GPU\", choices=[\"Auto\",*cuda.keys(),\"cpu\"], value=\"Auto\")\n                    enhance = gr.Checkbox(label=\"是否使用NSF_HIFIGAN增强,该选项对部分训练集少的模型有一定的音质增强效果，但是对训练好的模型有反面效果，默认关闭\", value=False)\n                    only_diffusion = gr.Checkbox(label=\"是否使用全扩散推理，开启后将不使用So-VITS模型，仅使用扩散模型进行完整扩散推理，默认关闭\", value=False)\n                with gr.Column():\n                    gr.Markdown(value=\"\"\"\n                        <font size=3>左侧文件全部选择完毕后(全部文件模块显示download)，点击“加载模型”进行解析：</font>\n                        \"\"\")\n                    model_load_button = gr.Button(value=\"加载模型\", variant=\"primary\")\n                    model_unload_button = gr.Button(value=\"卸载模型\", variant=\"primary\")\n                    sid = gr.Dropdown(label=\"音色（说话人）\")\n                    sid_output = gr.Textbox(label=\"Output Message\")\n\n\n            with gr.Row(variant=\"panel\"):\n                with gr.Column():\n                    gr.Markdown(value=\"\"\"\n                        <font size=2> 推理设置</font>\n                        \"\"\")\n                    auto_f0 = gr.Checkbox(label=\"自动f0预测，配合聚类模型f0预测效果更好,会导致变调功能失效（仅限转换语音，歌声勾选此项会究极跑调）\", value=False)\n                    f0_predictor = gr.Dropdown(label=\"选择F0预测器,可选择crepe,pm,dio,harvest,rmvpe,默认为pm(注意：crepe为原F0使用均值滤波器)\", choices=[\"pm\",\"dio\",\"harvest\",\"crepe\",\"rmvpe\"], value=\"pm\")\n                    vc_transform = gr.Number(label=\"变调（整数，可以正负，半音数量，升高八度就是12）\", value=0)\n                    cluster_ratio = gr.Number(label=\"聚类模型/特征检索混合比例，0-1之间，0即不启用聚类/特征检索。使用聚类/特征检索能提升音色相似度，但会导致咬字下降（如果使用建议0.5左右）\", value=0)\n                    slice_db = gr.Number(label=\"切片阈值\", value=-40)\n                    output_format = gr.Radio(label=\"音频输出格式\", choices=[\"wav\", \"flac\", \"mp3\"], value = \"wav\")\n                    noise_scale = gr.Number(label=\"noise_scale 建议不要动，会影响音质，玄学参数\", value=0.4)\n                    k_step = gr.Slider(label=\"浅扩散步数，只有使用了扩散模型才有效，步数越大越接近扩散模型的结果\", value=100, minimum = 1, maximum = 1000)\n                with gr.Column():\n                    pad_seconds = gr.Number(label=\"推理音频pad秒数，由于未知原因开头结尾会有异响，pad一小段静音段后就不会出现\", value=0.5)\n                    cl_num = gr.Number(label=\"音频自动切片，0为不切片，单位为秒(s)\", value=0)\n                    lg_num = gr.Number(label=\"两端音频切片的交叉淡入长度，如果自动切片后出现人声不连贯可调整该数值，如果连贯建议采用默认值0，注意，该设置会影响推理速度，单位为秒/s\", value=0)\n                    lgr_num = gr.Number(label=\"自动音频切片后，需要舍弃每段切片的头尾。该参数设置交叉长度保留的比例，范围0-1,左开右闭\", value=0.75)\n                    enhancer_adaptive_key = gr.Number(label=\"使增强器适应更高的音域(单位为半音数)|默认为0\", value=0)\n                    cr_threshold = gr.Number(label=\"F0过滤阈值，只有启动crepe时有效. 数值范围从0-1. 降低该值可减少跑调概率，但会增加哑音\", value=0.05)\n                    loudness_envelope_adjustment = gr.Number(label=\"输入源响度包络替换输出响度包络融合比例，越靠近1越使用输出响度包络\", value = 0)\n                    second_encoding = gr.Checkbox(label = \"二次编码，浅扩散前会对原始音频进行二次编码，玄学选项，效果时好时差，默认关闭\", value=False)\n                    use_spk_mix = gr.Checkbox(label = \"动态声线融合\", value = False, interactive = False)\n            with gr.Tabs():\n                with gr.TabItem(\"音频转音频\"):\n                    vc_input3 = gr.Audio(label=\"选择音频\", type=\"filepath\")\n                    vc_submit = gr.Button(\"音频转换\", variant=\"primary\")\n                with gr.TabItem(\"文字转音频\"):\n                    text2tts=gr.Textbox(label=\"在此输入要转译的文字。注意，使用该功能建议打开F0预测，不然会很怪\")\n                    with gr.Row():\n                        tts_gender = gr.Radio(label = \"说话人性别\", choices = [\"男\",\"女\"], value = \"男\")\n                        tts_lang = gr.Dropdown(label = \"选择语言，Auto为根据输入文字自动识别\", choices=SUPPORTED_LANGUAGES, value = \"Auto\")\n                        tts_rate = gr.Slider(label = \"TTS语音变速（倍速相对值）\", minimum = -1, maximum = 3, value = 0, step = 0.1)\n                        tts_volume = gr.Slider(label = \"TTS语音音量（相对值）\", minimum = -1, maximum = 1.5, value = 0, step = 0.1)\n                    vc_submit2 = gr.Button(\"文字转换\", variant=\"primary\")\n            with gr.Row():\n                with gr.Column():\n                    vc_output1 = gr.Textbox(label=\"Output Message\")\n                with gr.Column():\n                    vc_output2 = gr.Audio(label=\"Output Audio\", interactive=False)\n\n        with gr.TabItem(\"小工具/实验室特性\"):\n            gr.Markdown(value=\"\"\"\n                        <font size=2> So-vits-svc 4.0 小工具/实验室特性</font>\n                        \"\"\")\n            with gr.Tabs():\n                with gr.TabItem(\"静态声线融合\"):\n                    gr.Markdown(value=\"\"\"\n                        <font size=2> 介绍:该功能可以将多个声音模型合成为一个声音模型(多个模型参数的凸组合或线性组合)，从而制造出现实中不存在的声线 \n                                          注意：\n                                          1.该功能仅支持单说话人的模型\n                                          2.如果强行使用多说话人模型，需要保证多个模型的说话人数量相同，这样可以混合同一个SpaekerID下的声音\n                                          3.保证所有待混合模型的config.json中的model字段是相同的\n                                          4.输出的混合模型可以使用待合成模型的任意一个config.json，但聚类模型将不能使用\n                                          5.批量上传模型的时候最好把模型放到一个文件夹选中后一起上传\n                                          6.混合比例调整建议大小在0-100之间，也可以调为其他数字，但在线性组合模式下会出现未知的效果\n                                          7.混合完毕后，文件将会保存在项目根目录中，文件名为output.pth\n                                          8.凸组合模式会将混合比例执行Softmax使混合比例相加为1，而线性组合模式不会\n                        </font>\n                        \"\"\")\n                    mix_model_path = gr.Files(label=\"选择需要混合模型文件\")\n                    mix_model_upload_button = gr.UploadButton(\"选择/追加需要混合模型文件\", file_count=\"multiple\")\n                    mix_model_output1 = gr.Textbox(\n                                            label=\"混合比例调整，单位/%\",\n                                            interactive = True\n                                         )\n                    mix_mode = gr.Radio(choices=[\"凸组合\", \"线性组合\"], label=\"融合模式\",value=\"凸组合\",interactive = True)\n                    mix_submit = gr.Button(\"声线融合启动\", variant=\"primary\")\n                    mix_model_output2 = gr.Textbox(\n                                            label=\"Output Message\"\n                                         )\n                    mix_model_path.change(updata_mix_info,[mix_model_path],[mix_model_output1])\n                    mix_model_upload_button.upload(upload_mix_append_file, [mix_model_upload_button,mix_model_path], [mix_model_path,mix_model_output1])\n                    mix_submit.click(mix_submit_click, [mix_model_output1,mix_mode], [mix_model_output2])\n                \n                with gr.TabItem(\"模型压缩工具\"):\n                    gr.Markdown(value=\"\"\"\n                        该工具可以实现对模型的体积压缩，在**不影响模型推理功能**的情况下，将原本约600M的So-VITS模型压缩至约200M, 大大减少了硬盘的压力。\n                        **注意：压缩后的模型将无法继续训练，请在确认封炉后再压缩。**\n                    \"\"\")\n                    model_to_compress = gr.File(label=\"模型上传\")\n                    compress_model_btn = gr.Button(\"压缩模型\", variant=\"primary\")\n                    compress_model_output = gr.Textbox(label=\"输出信息\", value=\"\")\n\n                    compress_model_btn.click(model_compression, [model_to_compress], [compress_model_output])\n                    \n                    \n    with gr.Tabs():\n        with gr.Row(variant=\"panel\"):\n            with gr.Column():\n                gr.Markdown(value=\"\"\"\n                    <font size=2> WebUI设置</font>\n                    \"\"\")\n                debug_button = gr.Checkbox(label=\"Debug模式，如果向社区反馈BUG需要打开，打开后控制台可以显示具体错误提示\", value=debug)\n        # refresh local model list\n        local_model_refresh_btn.click(local_model_refresh_fn, outputs=local_model_selection)\n        # set local enabled/disabled on tab switch\n        local_model_tab_upload.select(lambda: False, outputs=local_model_enabled)\n        local_model_tab_local.select(lambda: True, outputs=local_model_enabled)\n        \n        vc_submit.click(vc_fn, [sid, vc_input3, output_format, vc_transform,auto_f0,cluster_ratio, slice_db, noise_scale,pad_seconds,cl_num,lg_num,lgr_num,f0_predictor,enhancer_adaptive_key,cr_threshold,k_step,use_spk_mix,second_encoding,loudness_envelope_adjustment], [vc_output1, vc_output2])\n        vc_submit2.click(vc_fn2, [text2tts, tts_lang, tts_gender, tts_rate, tts_volume, sid, output_format, vc_transform,auto_f0,cluster_ratio, slice_db, noise_scale,pad_seconds,cl_num,lg_num,lgr_num,f0_predictor,enhancer_adaptive_key,cr_threshold,k_step,use_spk_mix,second_encoding,loudness_envelope_adjustment], [vc_output1, vc_output2])\n\n        debug_button.change(debug_change,[],[])\n        model_load_button.click(modelAnalysis,[model_path,config_path,cluster_model_path,device,enhance,diff_model_path,diff_config_path,only_diffusion,use_spk_mix,local_model_enabled,local_model_selection],[sid,sid_output])\n        model_unload_button.click(modelUnload,[],[sid,sid_output])\n    os.system(\"start http://127.0.0.1:7860\")\n    app.launch()\n\n\n \n"
        }
      ]
    }
  ]
}