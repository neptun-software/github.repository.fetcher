{
  "metadata": {
    "timestamp": 1736561437825,
    "page": 87,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "numpy/numpy",
      "stars": 28527,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".cirrus.star",
          "type": "blob",
          "size": 1.798828125,
          "content": "# The guide to programming cirrus-ci tasks using starlark is found at\n# https://cirrus-ci.org/guide/programming-tasks/\n#\n# In this simple starlark script we simply check conditions for whether\n# a CI run should go ahead. If the conditions are met, then we just\n# return the yaml containing the tasks to be run.\n\nload(\"cirrus\", \"env\", \"fs\", \"http\")\n\ndef main(ctx):\n    ######################################################################\n    # Should wheels be built?\n    # Only test on the numpy/numpy repository\n    ######################################################################\n\n    if env.get(\"CIRRUS_REPO_FULL_NAME\") != \"numpy/numpy\":\n        return []\n\n    # only run the wheels entry on a cron job\n    if env.get(\"CIRRUS_CRON\", \"\") == \"nightly\":\n        return fs.read(\"tools/ci/cirrus_wheels.yml\")\n\n    # Obtain commit message for the event. Unfortunately CIRRUS_CHANGE_MESSAGE\n    # only contains the actual commit message on a non-PR trigger event.\n    # For a PR event it contains the PR title and description.\n    SHA = env.get(\"CIRRUS_CHANGE_IN_REPO\")\n    url = \"https://api.github.com/repos/numpy/numpy/git/commits/\" + SHA\n    dct = http.get(url).json()\n\n    commit_msg = dct[\"message\"]\n    if \"[skip cirrus]\" in  commit_msg or \"[skip ci]\" in commit_msg:\n        return []\n\n    wheel = False\n    labels = env.get(\"CIRRUS_PR_LABELS\", \"\")\n    pr_number = env.get(\"CIRRUS_PR\", \"-1\")\n    tag = env.get(\"CIRRUS_TAG\", \"\")\n\n    if \"[wheel build]\" in commit_msg:\n        wheel = True\n\n    # if int(pr_number) > 0 and (\"14 - Release\" in labels or \"36 - Build\" in labels):\n    #     wheel = True\n\n    if tag.startswith(\"v\") and \"dev0\" not in tag:\n        wheel = True\n\n    if wheel:\n        return fs.read(\"tools/ci/cirrus_wheels.yml\")\n\n    if int(pr_number) < 0:\n        return []\n\n    return fs.read(\"tools/ci/cirrus_arm.yml\")\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.1064453125,
          "content": "# A clang-format style that approximates Python's PEP 7\n# Useful for IDE integration\n#\n# Based on Paul Ganssle's version at\n# https://gist.github.com/pganssle/0e3a5f828b4d07d79447f6ced8e7e4db\n# and modified for NumPy\nBasedOnStyle: Google\nAlignAfterOpenBracket: Align\nAllowShortEnumsOnASingleLine: false\nAllowShortIfStatementsOnASingleLine: false\nAlwaysBreakAfterReturnType: TopLevel\nBreakBeforeBraces: Stroustrup\nColumnLimit: 79\nContinuationIndentWidth: 8\nDerivePointerAlignment: false\nIndentWidth: 4\nIncludeBlocks: Regroup\nIncludeCategories:\n  - Regex:           '^[<\"](Python|structmember|pymem)\\.h'\n    Priority:        -3\n    CaseSensitive:   true\n  - Regex:           '^\"numpy/'\n    Priority:        -2\n  - Regex:           '^\"(npy_pycompat|npy_config)'\n    Priority:        -1\n  - Regex:           '^\"[[:alnum:]_.]+\"'\n    Priority:        1\n  - Regex:           '^<[[:alnum:]_.]+\"'\n    Priority:        2\nLanguage: Cpp\nPointerAlignment: Right\nReflowComments: true\nSpaceBeforeParens: ControlStatements\nSpacesInParentheses: false\nStatementMacros: [PyObject_HEAD, PyObject_VAR_HEAD, PyObject_HEAD_EXTRA]\nTabWidth: 4\nUseTab: Never\n"
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.224609375,
          "content": "codecov:\n  notify:\n    require_ci_to_pass: no\n    after_n_builds: 1\ncoverage:\n  status:\n    project:\n      default:\n        informational: true\n    patch:\n      default:\n        informational: true\n    changes: false\ncomment: off\n"
        },
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.0732421875,
          "content": "[run]\nbranch = True\ninclude = */numpy/*\ndisable_warnings = include-ignored\n"
        },
        {
          "name": ".ctags.d",
          "type": "blob",
          "size": 0.0185546875,
          "content": "--langmaps=c:+.src\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.6142578125,
          "content": "root = true\n\n[*.{c,cxx,h,hpp}]\n# https://numpy.org/neps/nep-0045-c_style_guide.html\nindent_size = 4\nindent_style = space\nmax_line_length = 80\ntrim_trailing_whitespace = true\n\n[*.{py,pyi,pxd}]\n# https://peps.python.org/pep-0008/\ncharset = utf-8\nend_of_line = lf\nindent_size = 4\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.py]\n# Keep in sync with `tools/lint_diff.ini` and `tools/linter.py`\n# https://pycodestyle.pycqa.org/en/latest/intro.html#configuration\nmax_line_length = 88\n\n[*.pyi]\n# https://typing.readthedocs.io/en/latest/guides/writing_stubs.html#style-guide\nmax_line_length = 130\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.373046875,
          "content": "# Highlight our custom templating language as C, since it's hopefully better\n# than nothing. This also affects repo statistics.\n*.c.src   text linguist-language=C\n*.inc.src text linguist-language=C\n*.h.src   text linguist-language=C\n*.pyx.in  text linguist-language=Python\n*.pxd.in  text linguist-language=Python\n\n# Mark some files as vendored\nnumpy/linalg/lapack_lite/f2c.c linguist-vendored\nnumpy/linalg/lapack_lite/f2c.h linguist-vendored\nnumpy/_core/include/numpy/libdivide/* linguist-vendored\nnumpy/_core/src/umath/svml/* linguist-vendored\nnumpy/_core/src/common/dlpack/dlpack.h linguist-vendored\n\n# Mark some files as generated\nnumpy/linalg/lapack_lite/f2c_*.c linguist-generated\nnumpy/linalg/lapack_lite/lapack_lite_names.h linguist-generated\n\n# version generated from pyproject.toml during build\nnumpy/version.py linguist-generated\n\n# Configuration files\n*.ini text\n*.cfg text\n./numpy/_core/npymath.ini.in text\n./numpy/_core/mlib.ini.in text\n\n# Python sources\n*.py    text diff=python\n*.pxd   text diff=python\n*.pyx   text diff=python\n*.pyi   text diff=python\n\n# C/C++ sources\n*.c     text diff=c\n*.h     text diff=c\n*.cc    text diff=cpp\n*.cxx   text diff=cpp\n*.cpp   text diff=cpp\n*.hpp   text diff=cpp\n*.hh    text diff=cpp\n\n# Fortran sources\n*.f     text diff=fortran\n*.for   text diff=fortran\n*.f90   text diff=fortran\n*.f95   text diff=fortran\n*.f03   text diff=fortran\n\n# JavaScript\n*.js    text\n\n# F2py\n./doc/source/f2py/*.pyf text\n./doc/source/f2py/*.dat text\n\n# Documents\n*.md    text diff=markdown\n*.txt   text\n*.rst   text\n*.pdf   binary\n*.css   text diff=css\n*.html  text diff=html\n\n# Graphics\n*.png   binary\n*.ico   binary\n*.dia   binary\n*.gif   binary\n*.odg   binary\n*.fig   text\n*.svg   text\n# SVG is treated as an asset (binary) by default. If you want\n# to treat it as binary, use the following line instead.\n# *.svg    binary\n\n# Scripts\n*.sh    text eol=lf\n*.sed   text\n# These are explicitly windows files and should use crlf\n*.bat   text eol=crlf\n*.cmd   text eol=crlf\n\n# Serialisation\n*.json  text\n*.toml  text\n*.xml   text\n*.yaml  text\n*.yml   text\n\n# Data files\n*.csv   text\n*.pkl   binary\n*.fits  binary\n*.npy   binary\n*.npz   binary\n\n# Misc.\n*.swg   text\n*.patch text\n./doc/neps/index.rst.tmpl text\n./benchmarks/asv_compare.conf.json.tpl text\n./tools/swig/test/*.i text\n./doc/source/dev/gitwash/git_links.inc text\n./doc/source/reference/simd/*.inc text\n./numpy/_core/src/_simd/*.inc text diff=c\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.2666015625,
          "content": "# Editor temporary/working/backup files #\n#########################################\n.#*\n[#]*#\n*~\n*$\n*.bak\n*.diff\n.idea/\n*.iml\n*.ipr\n*.iws\n*.org\n.project\npmip\n*.rej\n.settings/\n.*.sw[nop]\n.sw[nop]\n*.tmp\n*.vim\n.vscode\ntags\ncscope.out\n# gnu global\nGPATH\nGRTAGS\nGSYMS\nGTAGS\n.cache\n.mypy_cache/\n\n# Compiled source #\n###################\n*.a\n*.com\n*.class\n*.dll\n*.exe\n*.o\n*.o.d\n*.py[ocd]\n*.so\n*.mod\n\n# Packages #\n############\n# it's better to unpack these files and commit the raw source\n# git has its own built in compression methods\n*.7z\n*.bz2\n*.bzip2\n*.dmg\n*.gz\n*.iso\n*.jar\n*.rar\n*.tar\n*.tbz2\n*.tgz\n*.zip\n\n# Python files #\n################\n# meson build/installation directories\nbuild\nbuild-install\n# meson python output\n.mesonpy-native-file.ini\n# sphinx build directory\n_build\n# dist directory is where sdist/wheel end up\ndist\ndoc/build\ndoc/docenv\ndoc/cdoc/build\n# Egg metadata\n*.egg-info\n# The shelf plugin uses this dir\n./.shelf\n.cache\npip-wheel-metadata\n.python-version\n# virtual envs\nnumpy-dev/\nvenv/\n\n# Paver generated files #\n#########################\n/release\n\n# Logs and databases #\n######################\n*.log\n*.sql\n*.sqlite\n\n# Patches #\n###########\n*.patch\n*.diff\n\n# Do not ignore the following patches: #\n########################################\n!tools/ci/emscripten/0001-do-not-set-meson-environment-variable-pyodide-gh-4502.patch\n\n# OS generated files #\n######################\n.DS_Store*\n.VolumeIcon.icns\n.fseventsd\nIcon?\n.gdb_history\nehthumbs.db\nThumbs.db\n.directory\n\n# pytest generated files #\n##########################\n/.pytest_cache\n\n# doc build generated files #\n#############################\ndoc/source/savefig/\ndoc/source/**/generated/\ndoc/source/release/notes-towncrier.rst\n\n# Things specific to this project #\n###################################\nbenchmarks/results\nbenchmarks/html\nbenchmarks/env\nbenchmarks/numpy\nbenchmarks/_asv_compare.conf.json\ntest.obj\ntools/swig/test/Array_wrap.cxx\ntools/swig/test/Farray_wrap.cxx\ntools/swig/test/Farray.py\ntools/swig/test/Flat_wrap.cxx\ntools/swig/test/Flat.py\ntools/swig/test/Fortran_wrap.cxx\ntools/swig/test/Fortran.py\ntools/swig/test/Matrix_wrap.cxx\ntools/swig/test/Matrix.py\ntools/swig/test/Tensor_wrap.cxx\ntools/swig/test/Tensor.py\ntools/swig/test/Vector.py\ntools/swig/test/Vector_wrap.cxx\ntools/swig/test/Array.py\n.openblas\nnumpy/_distributor_init_local.py\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.861328125,
          "content": "[submodule \"doc/source/_static/scipy-mathjax\"]\n\tpath = doc/source/_static/scipy-mathjax\n\turl = https://github.com/scipy/scipy-mathjax.git\n[submodule \"numpy/_core/src/umath/svml\"]\n\tpath = numpy/_core/src/umath/svml\n\turl = https://github.com/numpy/SVML.git\n[submodule \"numpy/_core/src/npysort/x86-simd-sort\"]\n\tpath = numpy/_core/src/npysort/x86-simd-sort\n\turl = https://github.com/intel/x86-simd-sort\n[submodule \"vendored-meson/meson\"]\n\tpath = vendored-meson/meson\n\turl = https://github.com/numpy/meson.git\n[submodule \"numpy/_core/src/highway\"]\n\tpath = numpy/_core/src/highway\n\turl = https://github.com/google/highway.git\n[submodule \"numpy/fft/pocketfft\"]\n\tpath = numpy/fft/pocketfft\n\turl = https://github.com/mreineck/pocketfft\n[submodule \"numpy/_core/src/common/pythoncapi-compat\"]\n\tpath = numpy/_core/src/common/pythoncapi-compat\n\turl = https://github.com/python/pythoncapi-compat\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 38.470703125,
          "content": "# Prevent git from showing duplicate names with commands like \"git shortlog\"\n# See the manpage of git-shortlog for details.\n# The syntax is:\n# Name that should be used <email that should be used> Bad name <bad email>\n#\n# You can skip Bad name if it is the same as the one that should be used, and is unique.\n#\n# This file is up-to-date if the command git log --format=\"%aN <%aE>\" | sort -u\n# gives no duplicates.\n!8bitmp3 <19637339+8bitmp3@users.noreply.github.com>\n!Algorithmist-Girl <36552319+Algorithmist-Girl@users.noreply.github.com>\n!DWesl <22566757+DWesl@users.noreply.github.com>\n!Dreamge <geetaakshata@gmail.com>\n!Endolith <endolith@gmail.com>\n!GalaxySnail <ylc991@163.com>\n!Illviljan <14371165+Illviljan@users.noreply.github.com>\n!LSchroefl <65246829+LSchroefl@users.noreply.github.com>\n!Lbogula <bogulala7@gmail.com>\n!Lisa <34400837+lyzlisa@users.noreply.github.com>\n!Patrick <39380924+xamm@users.noreply.github.com>\n!Scian <65375075+hoony6134@users.noreply.github.com>\n!Searchingdays <pachatyabhaskar@gmail.com>\n!amagicmuffin <2014wcheng@gmail.com>\n!bersbersbers <12128514+bersbersbers@users.noreply.github.com>\n!code-review-doctor <contact+django-doctor-test@richardtier.co.uk>\n!cook-1229 <70235336+cook-1229@users.noreply.github.com>\n!dg3192 <113710955+dg3192@users.noreply.github.com>\n!ellaella12 <githubwork111@gmail.com>\n!ellaella12 <githubwork111@gmail.com> <120079323+ellaella12@users.noreply.github.com>\n!fengluoqiuwu <fengluoqiuwu@gmail.com>\n!fengluoqiuwu <fengluoqiuwu@gmail.com> <163119756+fengluoqiuwu@users.noreply.github.com>\n!h-vetinari <h.vetinari@gmx.com>\n!h6197627 <44726212+h6197627@users.noreply.github.com>\n!hutauf <mathemichi@gmx.de>\n!jbCodeHub <besselingcodehub@gmail.com>\n!juztamau5 <juztamau5@gmail.com>\n!legoffant <58195095+legoffant@users.noreply.github.com>\n!liang3zy22 <35164941+liang3zy22@users.noreply.github.com>\n!luzpaz <kunda@scribus.net>\n!luzpaz <kunda@scribus.net> <luzpaz@users.noreply.github.com>\n!matoro <matoro@users.noreply.github.com>\n!mcp292 <mcp292@nau.edu>\n!mgunyho <20118130+mgunyho@users.noreply.github.com>\n!msavinash <73682349+msavinash@users.noreply.github.com>\n!musvaage <musvaage@users.noreply.github.com>\n!mykykh <49101849+mykykh@users.noreply.github.com>\n!nullSoup <34267803+nullSoup@users.noreply.github.com>\n!ogidig5 <82846833+ogidig5@users.noreply.github.com>\n!partev <petrosyan@gmail.com>\n!pkubaj <pkubaj@FreeBSD.org>\n!pmvz <pmvz_github@outlook.com>\n!pojaghi <36278217+pojaghi@users.noreply.github.com>\n!pratiklp00 <pratikp@linux.ibm.com>\n!sfolje0 <sfolje0@github>\n!spacescientist <aspacescientist@protonmail.com> <spacescientist@pm.me>\n!stefan6419846 <stefan6419846@gmail.com>\n!stefan6419846 <stefan6419846@gmail.com> <96178532+stefan6419846@users.noreply.github.com>\n!tajbinjohn <tajbinjohn@gmail.com>\n!tautaus <sunt9751@gmail.com>\n!undermyumbrella1 <keiwork111@gmail.com>\n!vahidmech <vahidmech@github.com>\n!xoviat <49173759+xoviat@users.noreply.github.com>\n!xoviat <49173759+xoviat@users.noreply.github.com> <xoviat@users.noreply.github.com>\n!yan-wyb <yan-wyb@foxmail.com>\n!yetanothercheer <yetanothercheer@protonmail.com>\nAaron Baecker <abaecker@localhost>\nAdrin Jalali <adrin.jalali@gmail.com>\nAbraham Medina <abhram_medina@yahoo.com>\nArun Kota <arunkumarkota@gmail.com>\nArun Kota <arunkumarkota@gmail.com> Arun Kota <arunkota@Aruns-iMac.local>\nAarthi Agurusa <agurusa@gmail.com>\nAdarsh Singh <adarshsng090@gmail.com> ADARSH SINGH <adarshsng090@gmail.com>\nAditi Saluja <136131452+salujaditi14@users.noreply.github.com>\nAndrei Batomunkuev <abatomunkuev@myseneca.ca>\nAjay DS <turingman@protonmail.com>\nAjay DS <turingman@protonmail.com> <ajayds2001@gmail.com>\nAjay Kumar Janapareddi <ajayjanapareddi@gmail.com>\nAlan Fontenot <logeaux@yahoo.com>\nAlan Fontenot <logeaux@yahoo.com> <36168460+logeaux@users.noreply.github.com>\nAbdul Muneer <abdulmuneer@gmail.com>\nAbhilash Barigidad <abhilash.ub@gmail.com>\nAbhilash Barigidad <abhilash.ub@gmail.com> <64172584+abhilash42@users.noreply.github.com>\nAbhinav Reddy <abhinav071197@gmail.com>\nAbel Aoun <aoun@cerfacs.fr>\nAdam Ginsburg <adam.g.ginsburg@gmail.com> <keflavich@gmail.com>\nAerik Pawson <45904740+aerikpawson@users.noreply.github.com>\nAhmet Can Solak <asolak14@ku.edu.tr>\nAmrit Krishnan <amrit110@gmail.com>\nAmrit Krishnan <amrit110@gmail.com> <amritk@vectorinstitute.ai>\nAlban Desmaison <desmaison.alban@gmail.com>\nAlbert Jornet Puig <albert.jornet@ic3.cat>\nAlberto Rubiales <arubiales11@gmail.com>\nAles Crocaro <alescrocaro@gmail.com>\nAlex Rockhill <aprockhill206@gmail.com>\nAlex Griffing <argriffi@ncsu.edu>\nAlex Griffing <argriffi@ncsu.edu> <argriffing@gmail.com>\nAlex Griffing <argriffi@ncsu.edu> <argriffing@users.noreply.github.com>\nAlex Henrie <alexhenrie24@gmail.com> <alex.henrie@utah.edu>\nAlex Low <aleksandrosansan@gmail.com>\nAlex Rogozhnikov <iamfullofspam@gmail.com> <arogozhnikov@users.noreply.github.com>\nAlex Thomas <alexthomas93@users.noreply.github.com>\nAlexander Belopolsky <abalkin@enlnt.com>\nAlexander Belopolsky <abalkin@enlnt.com> <a@enlnt.com>\nAlexander Belopolsky <abalkin@enlnt.com> <abalkin@users.noreply.github.com>\nAlexander Belopolsky <abalkin@enlnt.com> sasha <sasha@localhost>\nAlexander Hunt <alexander.l.hunt951@gmail.com>\nAlexander Jung <kontakt@ajung.name>\nAlexander Shadchin <alexandr.shadchin@gmail.com>\nAlexander Shadchin <alexandr.shadchin@gmail.com> <shadchin@yandex-team.ru>\nAlizé Papp <68250865+alize-papp@users.noreply.github.com>\nAllan Haldane <allan.haldane@gmail.com> <ealloc@gmail.com>\nAl-Baraa El-Hag <a.elhag01@gmail.com> <48454648+a-elhag@users.noreply.github.com>\nAlok Singhal <gandalf013@gmail.com> Alok Singhal <alok@merfinllc.com>\nAlyssa Quek <alyssaquek@gmail.com>\nAndrea Bianchi<andrea_bianchi@outlook.com>\nAndrea Bianchi<andrea_bianchi@outlook.com> andrea-bia <andrea-bia@users.noreply.github.com>\nAnkit Dwivedi <adwivedi@microsoft.com>\nAnkit Dwivedi <adwivedi@microsoft.com> <ankit_dwivedi@outlook.com>\nAnkur Singh <ankursingh91002@gmail.com>\nAnkur Singh <ankursingh91002@gmail.com> <98346896+ankur0904@users.noreply.github.com>\nAmir Sarabadani <ladsgroup@gmail.com>\nAnas Khan <anasalimkhan@gmail.com> <anas.khan96@outlook.com>\nAnatoly Techtonik <techtonik@gmail.com>\nAndras Deak <deak.andris@gmail.com> <adeak@users.noreply.github.com>\nAndrea Olivo <andryandrew@gmail.com>\nAndrea Pattori <andrea.pattori@gmail.com>\nAndrea Sangalli <and-sang@outlook.com> <53617841+and-sang@users.noreply.github.com>\nAndreas Klöckner <inform@tiker.net>\nAndreas Schwab <schwab@suse.de> <schwab@linux-m68k.org>\nAndrei Kucharavy <ank@andreikucharavy.com>\nAndrej Zhilenkov <azhilenkov@gmail.com>\nAndrew Lawson <andrew.lawson@nag.co.uk> <andrewl@olney.nag.co.uk>\nAnirudh Subramanian <anirudh2290@ufl.edu>\nAnne Archibald <peridot.faceted@gmail.com>\nAnne Archibald <peridot.faceted@gmail.com> <archibald@astron.nl>\nAnne Bonner <bonn0062@yahoo.com> <35413198+bonn0062@users.noreply.github.com>\nAnthony Vo <anthonyhvo12@gmail.com> <43098273+anthonyhvo12@users.noreply.github.com>\nAntoine Pitrou <antoine@python.org> <pitrou@free.fr>\nAnton Prosekin <jncots@users.noreply.github.com>\nAnže Starič <anze.staric@gmail.com>\nArfy Slowy <slowy.arfy@gmail.com>\nArnaud Ma <arnaudma.code@gmail.com>\nAron Ahmadia <aron@ahmadia.net>\nArun Kota <arunkumarkota@gmail.com>\nArun Kota <arunkota@Aruns-iMac.local>\nArun Pa <arunppsg@gmail.com>\nArun Palaniappen <arun.palaniappan1999@gmail.com>\nArun Persaud <apersaud@lbl.gov> <arun@nubati.net>\nAshutosh Singh <ashutoshsinghrkt@gmail.com>\nAshutosh Singh <ashutoshsinghrkt@gmail.com> <55102089+Ashutosh619-sudo@users.noreply.github.com>\nÅsmund Hjulstad <ahju@statoil.com> <asmund@hjulstad.com>\nAuke Wiggers <wiggers.auke@gmail.com>\nAustin Ran <504977925@qq.com>\nBadhri Narayanan Krishnakumar <badhrinarayanan.k@gmail.com>\nBhavuk Kalra <bhavukkalra1786@gmail.com>\nBhavuk Kalra <bhavukkalra1786@gmail.com> <ybhavukkalra1786@gmail.com>\nBangcheng Yang <bangchengyang@hotmail.com>\nBhargav V <12525622+brpy@users.noreply.github.com>\nBas van Beek <b.f.van.beek@vu.nl> <43369155+BvB93@users.noreply.github.com>\nBehzad Nouri <behzadnouri@gmail.com>\nBen Nathanson <github@bigriver.xyz>\nBen Woodruff <bmwoodruff@gmail.com>\nBenjamin Root <ben.v.root@gmail.com>\nBenjamin Root <ben.v.root@gmail.com> weathergod <?@?>\nBernardt Duvenhage <bernardt.duvenhage@gmail.com>\nBenoit Prabel <benoit.prabel@cea.fr>\nBernie Gray <bfgray3@users.noreply.github.com>\nBertrand Lefebvre <bertrand.l3f@gmail.com>\nBharat Raghunathan <bharatraghunthan9767@gmail.com>\nBharat Raghunathan <bharatraghunthan9767@gmail.com> <bharatr@symphonyai.com>\nBob Eldering <eldering@jive.eu>\nBram Ton <bram@cbbg.nl>\nBram Ton <bram@cbbg.nl> <b.t.ton@saxion.nl>\nBram Ton <bram@cbbg.nl> <github@cbbg.nl>\nBrent Brewington <brent.brewington@gmail.com>\nBrett R Murphy <bmurphy@enthought.com>\nBrian Soto <iambriansoto@gmail.com>\nBrian Soto <iambriansoto@gmail.com> <Iamsoto@users.noreply.github.com>\nBrian Soto <iambriansoto@gmail.com> <theintrocode@gmail.com>\nBrigitta Sipőcz <bsipocz@gmail.com>\nBrigitta Sipőcz <bsipocz@gmail.com> <b.sipocz@gmail.com>\nBrock Mendel <jbrockmendel@gmail.com>\nBryan Van de Ven <bryanv@continuum.io> Bryan Van de Ven <bryan@Laptop-3.local>\nBryan Van de Ven <bryanv@continuum.io> Bryan Van de Ven <bryan@laptop.local>\nBrénainn Woodsend <bwoodsend@gmail.com>\nBui Duc Minh <buiducminh287@gmail.com> <41239569+Mibu287@users.noreply.github.com>\nCaio Agiani <agianicaio@gmail.com>\nCarl Kleffner <cmkleffner@gmail.com>\nCarl Leake <leakec57@gmail.com>\nCarlos Henrique Hermanny Moreira da Silva <chhermanny@gmail.com>\nCarlos Henrique Hermanny Moreira da Silva <chhermanny@gmail.com> <121122527+carlosilva10260@users.noreply.github.com>\nCédric Hannotier <f380cedric@users.noreply.github.com>\nCharles Stern <62192187+cisaacstern@users.noreply.github.com>\nChiara Marmo <chiara.marmo@inria.fr>\nChiara Marmo <chiara.marmo@inria.fr> <marmochiaskl@gmail.com>\nChiara Marmo <chiara.marmo@inria.fr> <cmarmo@users.noreply.github.com>\nChris Barker <Chris.Barker@noaa.gov> <chris.barker@local>\nChris Burns <chris.burns@localhost>\nChris Fu (傅立业) <17433201@qq.com>\nChris Holland <chrisholland3553@gmail.com> <41524756+ChrisAHolland@users.noreply.github.com>\nChris Kerr <debdepba@dasganma.tk> <cjk34@cam.ac.uk>\nChris Vavaliaris <cv1038@wildcats.unh.edu>\nChristian Clauss <cclauss@bluewin.ch>\nChristopher Dahlin <christopher@dahlin.tech> <christopher@tracsense.tech>\nChristopher Hanley <chanley@gmail.com>\nChristoph Buchner <bilderbuchi@phononoia.at>\nChristoph Gohlke <cgohlke@uci.edu>\nChristoph Gohlke <cgohlke@uci.edu> <cjgohlke@gmail.com>\nChristoph Gohlke <cgohlke@uci.edu> cgholke <?@?>\nChun-Wei Chen <jacky82226@gmail.com>\nChunlin Fang <fangchunlin@huawei.com>\nChunlin Fang <fangchunlin@huawei.com> <834352945@qq.com>\nChunlin Fang <fangchunlin@huawei.com> <qiyu8@foxmail.com>\nCobalt Yang <RibomBalt@users.noreply.github.com>\nColin Snyder <8csnyder@gmail.com> <47012605+colinsnyder@users.noreply.github.com>\nConstanza Fierro <constanza.fierro94@gmail.com>\nDahyun Kim <dahyun@kakao.com>\nDaniel B Allan <daniel.b.allan@gmail.com>\nDaniel da Silva <mail@danieldasilva.org> <daniel@meltingwax.net>\nDaniel da Silva <mail@danieldasilva.org> <var.mail.daniel@gmail.com>\nDaniel Hrisca <daniel.hrisca@gmail.com>\nDaniel J Farrell <danieljfarrel@me.com>\nDaniel Montes <53720019+Aerysv@users.noreply.github.com>\nDaniel Müllner <Daniel Müllner muellner@math.stanford.edu>\nDaniel Müllner <Daniel Müllner muellner@math.stanford.edu> Daniel <muellner@localhost.localdomain>\nDaniel Rasmussen <daniel.rasmussen@appliedbrainresearch.com>\nDaniel G. A. Smith <dgasmith@icloud.com>\nDaniel G. A. Smith <dgasmith@icloud.com> <malorian@me.com>\nDario Mory <daaawx@gmail.com>\nDave Goel <deego3@gmail.com>\nDavid Badnar <bdvd001@gmail.com>\nDavid Cortes <david.cortes.rivera@gmail.com>\nDavid Huard <david.huard@gmail.com> dhuard <dhuard@localhost>\nDavid M Cooke <cookedm@localhost>\nDavid Nicholson <davidjn@google.com> <dnic12345@gmail.com>\nDavid Ochoa <ochoadavid@gmail.com>\nDavid Pitchford <david.t.pitchford@gmail.com> <david.t.pitchford@gmail.com>\nDavid Prosin <davidprosin@gmail.com>\nDavide Dal Bosco <davidemcwood@gmail.com> <62077652+davidedalbosco@users.noreply.github.com>\nDawid Zych <dawid.zych@yandex.com>\nDennis Zollo <dzollo@swift-nav.com>\nDerek Homeier <derek@astro.physik.uni-goettingen.de>\nDerek Homeier <derek@astro.physik.uni-goettingen.de> <dhomeie@gwdg.de>\nDerek Homeier <derek@astro.physik.uni-goettingen.de> <derek@astro.phsik.uni-goettingen.de>\nDerrick Williams <myutat@gmail.com>\nDevin Shanahan <dshanahan88@gmail.com>\nDaval Parmar <53395856+DhavalParmar61@users.noreply.github.com>\nDigya Acharya <digyaacharyaa@gmail.com>\nDima Pasechnik <dima@pasechnik.info>\nDima Pasechnik <dima@pasechnik.info> <dimpase@gmail.com>\nDimitri Papadopoulos Orfanos <3234522+DimitriPapadopoulos@users.noreply.github.com>\nDing Liu <nimrodcowboy@gmail.com>\nDing Liu <nimrodcowboy@gmail.com> <Nimrodcowboy@gmail.com>\nD.J. Ramones <dj@reversedelay.net>\nD.J. Ramones <dj@reversedelay.net> <50655786+djramones@users.noreply.github.com>\nDmitriy Shalyga <zuko3d@gmail.com>\nDmitry Belov <dmbelov@gmail.com>\nDustan Levenstein <dlevenstein@gmail.com> <43019642+dustanlevenstein@users.noreply.github.com>\nDylan Cutler <dylancutler@google.com>\nEd Schofield <edschofield@localhost>\nEgor Zindy <ezindy@gmail.com>\nÉlie Goudout <eliegoudout@hotmail.com> \nÉlie Goudout <eliegoudout@hotmail.com> <114467748+eliegoudout@users.noreply.github.com>\nElliott M. Forney <elliott.forney@gmail.com>\nErik M. Bray <erik.m.bray@gmail.com>\nErik M. Bray <erik.m.bray@gmail.com> <erik.bray@lri.fr>\nErik M. Bray <erik.m.bray@gmail.com> <embray@stsci.edu>\nEric Fode <ericfode@gmail.com> Eric Fode <ericfode@linuxlaptop.(none)>\nEric Quintero <eric.antonio.quintero@gmail.com>\nEric Xie <161030123+EngineerEricXie@users.noreply.github.com>\nErnest N. Mamikonyan <ernest.mamikonyan@gmail.com>\nEskild Eriksen <eskild.eriksen122@gmail.com>\nEskild Eriksen <eskild.eriksen122@gmail.com> <42120229+iameskild@users.noreply.github.com>\nEskild Eriksen <eskild.eriksen122@gmail.com> <eskild@doublee.io>\nEtienne Guesnet <etienne.guesnet.external@atos.net> <51407514+EGuesnet@users.noreply.github.com>\nEva Jau <evaj@posteo.de>\nEvgeni Burovski <evgeny.burovskiy@gmail.com> Evgeni Burovski <evgeni@burovski.me>\nEvgeny Toder <evgeny.toder@jpmorgan.com>\nFernando Perez <Fernando.Perez@berkeley.edu> <fperez@fperez.org>\nFilip Trojan <f.trojan@centrum.cz> <Tarantula2018>\nFrançois Le Lay <mfworx@gmail.com> <fly@spotify.com>\nFrank Breitling <frank.breitling@gmx.de>\nFriedrich Dunne <dunneff@tcd.ie> dunneff <dunneff@tcd.ie>\nFrederic Bastien <nouiz@nouiz.org> Frederic <nouiz@nouiz.org>\nFX Coudert <fxcoudert@gmail.com>\nGael Varoquaux <gael.varoquaux@normalesup.org>\nGagandeep Singh <gdp.1807@gmail.com>\nGavin Zhang <zhanggan@cn.ibm.com>\nGerrit Holl <gerrit.holl@gmail.com> <gerrit.holl@utoronto.ca>\nGerrit Holl <gerrit.holl@gmail.com> <g.holl@reading.ac.uk>\nGiuseppe Venturini <ggventurini@users.noreply.github.com>\nGolnaz Irannejad <golnazirannejad@gmail.com>\nGopal Singh Meena <gopalmeena94@gmail.com>\nGreg Knoll <gregory@bccn-berlin.de>\nGreg Yang <sorcererofdm@gmail.com>\nGreg Young <gfyoung17@gmail.com>\nGreg Young <gfyoung17@gmail.com> <gfyoung@mit.edu>\nGregory R. Lee <grlee77@gmail.com>\nGregory R. Lee <grlee77@gmail.com> <gregory.lee@cchmc.org>\nGuo Ci <zguoci@gmail.com> guoci <zguoci@gmail.com>\nGuo Shuai <gs0801@foxmail.com>\nHabiba Hye <habiba.hye@gmail.com>\nHabiba Hye <habiba.hye@gmail.com> <145866308+HabibiHye@users.noreply.github.com>\nHameer Abbasi <einstein.edison@gmail.com> <hameerabbasi@yahoo.com>\nHannah Aizenman <story645@gmail.com>\nHan Genuit <hangenuit@gmail.com>\nHanno Klemm <hanno.klemm@maerskoil.com> hklemm <hanno.klemm@maerskoil.com>\nHarsh Mishra <erbeusgriffincasper@gmail.com>\nHelder Oliveira <heldercro@gmail.com>\nHemil Desai <desai38@purdue.edu>\nHimanshu <addyjeridiq@gmail.com>\nHiroyuki V. Yamazaki <hiroyuki.vincent.yamazaki@gmail.com>\nHugo van Kemenade <hugovk@users.noreply.github.com>\nIantra Solari <iantrasolari@gmail.com>\nI-Shen Leong <i-shenl@activestate.com>\nIshan Purekar <eshanpurekar@gmail.com>\nImen Rajhi <imen.rajhi.ir@gmail.com>\nInessa Pawson <albuscode@gmail.com>\nIrina Maria Mocan <28827042+IrinaMaria@users.noreply.github.com>\nIrvin Probst <irvin.probst@ensta-bretagne.fr>\nIshan Koradia <ikoradia@umich.edu>\nIshan Koradia <ikoradia@umich.edu> <39583356+Ishankoradia@users.noreply.github.com>\nIvan Meleshko <vn.mlshk@gmail.com>\nIsabela Presedo-Floyd <irpf.design@gmail.com> <ipresedo@calpoly.edu>\nGanesh Kathiresan <ganesh3597@gmail.com>\nGerhard Hobler <gerhard.hobler@tuwien.ac.at>\nGiannis Zapantis <sdi1900059@di.uoa.gr>\nGuillaume Peillex <guillaume.peillex@gmail.com>\nJack J. Woehr <jwoehr@softwoehr.com>\nJacob M. Casey <jacobcasey.999@gmail.com>\nJakob Stevens Haas <37048747+Jacob-Stevens-Haas@users.noreply.github.com>\nJaime Fernandez <jaime.frio@gmail.com>\nJaime Fernandez <jaime.frio@gmail.com> <jaime.fernandez@hp.com>\nJaime Fernandez <jaime.frio@gmail.com> <jaimefrio@google.com>\nJake Close <jsclose@umich.edu>\nJake VanderPlas <jakevdp@gmail.com>\nJake VanderPlas <jakevdp@gmail.com> <jakevdp@google.com>\nJake VanderPlas <jakevdp@gmail.com> <jakevdp@yahoo.com>\nJakob Jakobson <jakobjakobson13@posteo.de>\nJakob Jakobson <jakobjakobson13@posteo.de> <43045863+jakobjakobson13@users.noreply.github.com>\nJames Bourbeau <jrbourbeau@gmail.com> <jrbourbeau@users.noreply.github.com>\nJames Joseph Thomas <jimjoe@gmx.net>\nJames Joseph Thomas <jimjoe@gmx.net> quotuva <q6b4i9o3@duck.com>\nJames Oliver <46758370+jamesoliverh@users.noreply.github.com>\nJames Webber <jamestwebber@gmail.com>\nJamie Macey <dodgerbarker@gmail.com>\nJan Schlüter <jan.schlueter@ofai.at> <github@jan-schlueter.de>\nJanus Heide <janusheide@gmail.com>\nJarrod Millman <millman@berkeley.edu> Jarrod Millman <jarrod.millman@gmail.com>\nJason Grout <jason-github@creativetrax.com> <jason.grout@drake.edu>\nJason King <pizza@netspace.net.au>\nJay Bourque <jay.bourque@continuum.io>\nJean Utke <jutke@allstate.com>\nJeff VanOss <vanossj@gmail.com> <vanossj@users.noreply.github.com>\nJeffrey Yancey <jeffrey@octane5.com> <3820914+jeffyancey@users.noreply.github.com>\nJeremy Lay <jlay80@gmail.com>\nJérémie du Boisberranger <jeremie.du-boisberranger@inria.fr> jeremiedbb <34657725+jeremiedbb@users.noreply.github.com>\nJérome Eertmans <jeertmans@icloud.com>\nJérôme Richard <jeromerichard111@msn.com> <ubuntu@ip-172-31-17-195.eu-west-3.compute.internal>\nJerome Kelleher <jerome.kelleher@ed.ac.uk>\nJessé Pires <jesserocha@alunos.utfpr.edu.br>\nJessi J Zhao <35235453+jessijzhao@users.noreply.github.com>\nJhong-Ken Chen (陳仲肯) <kenny.kuo.fs@gmail.com>\nJhong-Ken Chen (陳仲肯) <kenny.kuo.fs@gmail.com> <37182101+kennychenfs@users.noreply.github.com>\nJohann Faouzi <johann.faouzi@gmail.com> <johann.faouzi@icm-institute.org>\nJohann Rohwer <j.m.rohwer@gmail.com>\nJohann Rohwer <j.m.rohwer@gmail.com> jmrohwer <jmrohwer@users.noreply.github.com>\nJohannes Hampp <johannes.hampp@zeu.uni-giessen.de> <42553970+euronion@users.noreply.github.com>\nJohannes Kaisinger <johannes.kaisinger@gmail.com>\nJohannes Kaisinger <johannes.kaisinger@gmail.com> <KybernetikJo@users.noreply.github.com>\nJohannes Schönberger <hannesschoenberger@gmail.com> <jschoenberger@demuc.de>\nJohn Darbyshire <24256554+attack68@users.noreply.github.com> <24256554+attack68@users.noreply.github.com>\nJohn Hagen <johnthagen@gmail.com> <johnthagen@users.noreply.github.com>\nJohn Kirkham <jakirkham@gmail.com>\nJohn Kirkham <jakirkham@gmail.com> <kirkhamj@janelia.hhmi.org>\nJohnathon Cusick <jonathan.cusick09@gmail.com>\nJohnson Sun <20457146+j3soon@users.noreply.github.com>\nJonas I. Liechti <jonas.i.liechti@gmail.com>\nJonas I. Liechti <jonas.i.liechti@gmail.com> <jonas.i.liechti@protonmail.ch>\nJonas I. Liechti <jonas.i.liechti@gmail.com> <jonas.liechti@uzh.ch>\nJoren Hammudoglu <jhammudoglu@gmail.com>\nJory Klaverstijn <j.klaverstijn@student.rug.nl>\nJory Klaverstijn <j.klaverstijn@student.rug.nl> <63673224+JoryKlaverstijn@users.noreply.github.com>\nJoseph Fox-Rabinovitz <jfoxrabinovitz@gmail.com>\nJoseph Fox-Rabinovitz <jfoxrabinovitz@gmail.com> <joseph.r.fox-rabinovitz@nasa.gov>\nJoseph Fox-Rabinovitz <jfoxrabinovitz@gmail.com> <madphysicist@users.noreply.github.com>\nJoseph Martinot-Lagarde <contrebasse@gmail.com> <joseph.martinot-lagarde@onera.fr>\nJoshua Himmens <joshua.himmens@gmail.com>\nJoyce Brum <joycebrum@google.com>\nJoão Fontes Gonçalves <jfontesgoncalves@gmail.com>\nJulia Poo <julia.poo.poo.poo@gmail.com>\nJulia Poo <julia.poo.poo.poo@gmail.com> <57632293+JuliaPoo@users.noreply.github.com>\nJulian Taylor <juliantaylor108@gmail.com>\nJulian Taylor <juliantaylor108@gmail.com> <jtaylor.debian@googlemail.com>\nJulian Taylor <juliantaylor108@gmail.com> <jtaylor108@googlemail.com>\nJulien Lhermitte <jrmlhermitte@gmail.com> Julien Lhermitte <lhermitte@bnl.gov>\nJulien Schueller <julien.schueller@gmail.com>\nJunyan Ou <junyan.ou189@gmail.com>\nJustus Magin <keewis@posteo.de>\nJustus Magin <keewis@posteo.de> <keewis@users.noreply.github.com>\nKai Striega <kaistriega@gmail.com>\nKai Striega <kaistriega@gmail.com> <kaistriega+github@gmail.com>\nKasia Leszek <kati.leszek@gmail.com>\nKasia Leszek <kati.leszek@gmail.com> <39829548+katleszek@users.noreply.github.com>\nKaran Dhir <karan.dhir@berkeley.edu> <kurrandhir@gmail.com>\nKarel Planken <71339309+kplanken@users.noreply.github.com>\nKarthik Gangula <56480632+gangula-karthik@users.noreply.github.com>\nKarthik Kaiplody <logontokarthikk@gmail.com>\nKeller Meier <max.kellermeier@hotmail.de>\nKenny Huynh <hkennyv@gmail.com>\nKevin Granados <kevingranados62@gmail.com>\nKevin Granados <kevingranados62@gmail.com> <54990613+NectDz@users.noreply.github.com>\nKevin Sheppard <kevin.k.sheppard@gmail.com> <bashtage@users.noreply.github.com>\nKevin Sheppard <kevin.k.sheppard@gmail.com> <kevin.sheppard@gmail.com>\nKerem Hallaç <hallackerem@gmail.com>\nKhaled Ben Abdallah Okuda <khaled.ben.okuda@gmail.com>\nKiko Correoso <kachine@protonmail.com> kikocorreoso <kikocorreoso@gmail.com>\nKiko Correoso <kachine@protonmail.com> kikocorreoso <kikocorreoso@users.noreply.github.com>\nKira Prokopenko <kp2pml30@gmail.com>\nKonrad Kapp <k_kapp@yahoo.com>\nKristoffer Pedersen <rosengreenpedersen@gmail.com>\nKristoffer Pedersen <rosengreenpedersen@gmail.com> <rosengreenpedersen@proton.me>\nKriti Singh <kritisingh1.ks@gmail.com>\nKmol Yuan <pyslvs@gmail.com>\nKumud Lakara <55556183+kumudlakara@users.noreply.github.com>\nLalit Musmade <lalitmusmade2@gmail.com>\nLars Buitinck <larsmans@gmail.com> Lars Buitinck <l.buitinck@esciencecenter.nl>\nLars Buitinck <larsmans@gmail.com> Lars Buitinck <L.J.Buitinck@uva.nl>\nLars Grüter <lagru@mailbox.org>\nLars Grüter <lagru@mailbox.org> <lagru@users.noreply.github.com>\nLeona Taric <numpy@huawei.com>\nLeona Taric <numpy@huawei.com> <92495067+LeonaTaric@users.noreply.github.com>\nLeonardus Chen <leonardus.chen@gmail.com>\nLiangyu Zhang <me@azuk.top>\nLicht Takeuchi <licht-t@outlook.jp> <licht-t@math.dis.titech.ac.jp>\nLorenzo Mammana <mammanalorenzo@outlook.it> <lorenzom96@hotmail.it>\nLillian Zha <lillianzha@gmail.com>\nLillian Zha <lillianzha@gmail.com> <lz2527@columbia.edu>\nLinus Sommer <linus.sommer@protonmail.com>\nLinus Sommer <linus.sommer@protonmail.com> <95619282+linus-md@users.noreply.github.com>\nLu Yun Chi <32014765+LuYunChi@users.noreply.github.com>\nLuis Pedro Coelho <luis@luispedro.org> <lpc@cmu.edu>\nLucas Colley <lucas.colley8@gmail.com>\nLuke Zoltan Kelley <lkelley@cfa.harvard.edu>\nMadhulika Jain Chambers <madhulikajain@gmail.com> <53166646+madhulikajc@users.noreply.github.com>\nMagdalena Proszewska <magdalena.proszewska@gmail.com>\nMagdalena Proszewska <magdalena.proszewska@gmail.com> <38814059+mproszewska@users.noreply.github.com>\nMalik Idrees Hasan Khan <77000356+MalikIdreesHasanKhan@users.noreply.github.com>C\nManoj Kumar <manojkumarsivaraj334@gmail.com>\nMarcel Loose <gmloose@users.noreply.github.com>\nMarcin Podhajski <podhajskimarcin@gmail.com> <36967358+m-podhajski@users.noreply.github.com>\nMargret Pax <pax.margret@tutanota.com>\nMargret Pax <pax.margret@tutanota.com> <13646646+paxcodes@users.noreply.github.com>\nMark DePristo <mdepristo@synapdx.com>\nMark J. Olson <46202915+molsonkiko@users.noreply.github.com>\nMark Weissman <mw9050@gmail.com>\nMark Wiebe <mwwiebe@gmail.com>\nMark Wiebe <mwwiebe@gmail.com> <mwiebe@continuum.io>\nMark Wiebe <mwwiebe@gmail.com> <mwiebe@enthought.com>\nMark Wiebe <mwwiebe@gmail.com> <mwiebe@georg.(none)>\nMars Lee <mlee@quansight.com>\nMars Lee <mlee@quansight.com> <46167686+MarsBarLee@users.noreply.github.com>\nMarten van Kerkwijk <mhvk@astro.utoronto.ca>\nMarten van Kerkwijk <mhvk@astro.utoronto.ca> <mhvk@weasel.astro.utoronto.ca>\nMartin Goodson <martingoodson@gmail.com>\nMartin Reinecke <martin@mpa-garching.mpg.de>\nMartin Teichmann <martin.teichmann@xfel.eu> <lkb.teichmann@gmail.com>\nMary Conley <sleeplessinseattle.dev@gmail.com>\nMasashi Kishimoto <drehbleistift@gmail.com>\nMatheus Vieira Portela <matheus.v.portela@gmail.com>\nMatheus Santana Patriarca <matheussantanapatriarca2019@outlook.com>\nMathieu Lamarre <mlamarre@ea.com> <mathieu@vlam3d.com>\nMatías Ríos <riosm@dickinson.edu>\nMatt Hancock <not.matt.hancock@gmail.com> <mhancock743@gmail.com>\nMatt Ord <Matthew.ord1@gmail.com>\nMatt Ord <Matthew.ord1@gmail.com> <55235095+Matt-Ord@users.noreply.github.com>\nMatt Thompson <mathomp4@users.noreply.github.com>\nMatthias Bussonnier <bussonniermatthias@gmail.com>\nMartino Sorbaro <martino.sorbaro@ed.ac.uk>\nMárton Gunyhó <marci@gunyho.com> <marci.gunyho@gmail.com>\nMattheus Ueckermann <empeeu@yahoo.com>\nMatthew Barber <quitesimplymatt@gmail.com>\nMatthew Harrigan <harrigan.matthew@gmail.com>\nMatthias Bussonnier <bussonniermatthias@gmail.com> <mbussonnier@ucmerced.edu>\nMatthias Schaufelberger <schaufim@gmail.com>\nMatthias Schaufelberger <schaufim@gmail.com> <45293673+maisevector@users.noreply.github.com>\nMatthieu Darbois <mayeut@users.noreply.github.com>\nMatti Picus <matti.picus@gmail.com>\nMatti Picus <matti.picus@gmail.com> mattip <mattip@users.noreply.github.com>\nMaya Anderson <maya.anderson.ibm@gmail.com>\nMaya Anderson <maya.anderson.ibm@gmail.com> <63074550+andersonm-ibm@users.noreply.github.com>\nMaximilian Konrad <maximilianlukaskonrad@hotmail.de>\nMelissa Weber Mendonça <melissawm@gmail.com>\nMelissa Weber Mendonça <melissawm@gmail.com> <melissawm.github@gmail.com>\nMeltem Eren Copur <mecopur@outlook.com>\nMichael Behrisch <oss@behrisch.de> behrisch <behrisch@users.sourceforge.net>\nMichael Droettboom <mdboom@gmail.com> mdroe <mdroe@localhost>\nMichael Dubravski <mdubravski@gmail.com>\nMichael Dubravski <mdubravski@gmail.com> <41096057+mdubravski@users.noreply.github.com>\nMichael Felt <aixtools@gmail.com> <aixtools@users.noreply.github.com>\nMichael Hirsch <scivision@users.noreply.github.com>\nMichael K. Tran  <trankmichael@gmail.com>\nMichael Kiffer <michaelkiffer@gmail.com>\nMichael Martin <mmartin4242@gmail.com>\nMichael Schnaitter <schnaitterm@knights.ucf.edu> <schnaitterm@users.noreply.github.com>\nMichael Siebert <michael.siebert2k@gmail.com>\nMichael Seifert <michaelseifert04@yahoo.de>\nMichel Fruchart <michel.fruchart@ens-lyon.org> <fruchart@users.noreply.github.com>\nMike Toews <mwtoews@gmail.com>\nMiki Watanabe (渡邉 美希) <miki.watanabe@watanabenoMacBook-Pro.local>\nMiles Cranmer <miles.cranmer@gmail.com>\nMilica Dančuk <smicaus@yahoo.com>\nMilica Dančuk <smicaus@yahoo.com> love-bees <33499899+love-bees@users.noreply.github.com>\nMircea Akos Bruma <bruma.mircea.a@gmail.com>\nMircea Akos Bruma <bruma.mircea.a@gmail.com> <akos@debian-gnu-linux-vm.localdomain>\nMitchell Faas <Faas.Mitchell@gmail.com> <35742861+Mitchell-Faas@users.noreply.github.com>\nMohaned Qunaibit <qunaibit@users.noreply.github.com>\nMuhammad Kasim <firman.kasim@gmail.com>\nMuhammed Muhsin <muhsinibnalazeez@gmail.com>\nMukulika Pahari <mukulikapahari@gmail.com>\nMukulika Pahari <mukulikapahari@gmail.com> <60316606+Mukulikaa@users.noreply.github.com>\nMunira Alduraibi <alduraibimunirah@gmail.com>\nNamami Shanker <namami2011@gmail.com>\nNamami Shanker <namami2011@gmail.com> NamamiShanker <NamamiShanker@users.noreply.github.com>\nNathan Goldbaum <nathan.goldbaum@gmail.com>\nNathan Goldbaum <nathan.goldbaum@gmail.com> <ngoldbaum@users.noreply.github.com> \nNathaniel J. Smith <njs@pobox.com>\nNaveen Arunachalam <notatroll.troll@gmail.com> naveenarun <notatroll.troll@gmail.com>\nNeil Girdhar <mistersheik@gmail.com>\nNick Papior <nickpapior@gmail.com>\nNicola Soranzo <nicola.soranzo@gmail.com> <nicola.soranzo@earlham.ac.uk>\nNicolas Scheffer <nicolas.scheffer@sri.com> Nicolas Scheffer <scheffer@speech.sri.com>\nNicholas A. Del Grosso <delgrosso@bio.lmu.de> nickdg <delgrosso@bio.lmu.de>\nNicholas McKibben <nicholas.bgp@gmail.com>\nNick Minkyu Lee <mknicklee@protonmail.com> fivemok <9394929+fivemok@users.noreply.github.com>\nNyakku Shigure <sigure.qaq@gmail.com>\nNorwid Behrnd <nbehrnd@yahoo.com>\nNorwid Behrnd <nbehrnd@yahoo.com> <nbehrnd@users.noreply.github.com>\nOleksiy Kononenko <Oleksiy.S.Kononenko@gmail.com>\nOleksiy Kononenko <Oleksiy.S.Kononenko@gmail.com> <35204136+oleksiyskononenko@users.noreply.github.com>\nOliver Eberle <oliver_eberle@web.de>\nOlivier Barthelemy <perso.olivier.barthelemy@gmail.com>\nOlivier Mattelaer <oliviermattelaer@users.noreply.github.com>\nOmar Ali <Omarh90@gmail.com>\nOmid Rajaei <rajaei.net@gmail.com>\nOmid Rajaei <rajaei.net@gmail.com> <89868505+rajaeinet@users.noreply.github.com>\nOndřej Čertík <ondrej.certik@gmail.com>\nOscar Armas-Luy <oscar.armasluy@protonmail.com>\nÓscar Villellas Guillén <oscar.villellas@continuum.io>\nPablo Losada <pablo@hawz.es>\nPablo Losada <pablo@hawz.es> <48804010+TheHawz@users.noreply.github.com>\nPanos Mavrogiorgos <pmav99@users.noreply.github.com>\nPantelis Antonoudiou <pantelis.antonoudiou@gmail.com>\nPantelis Antonoudiou <pantelis.antonoudiou@gmail.com> <pantelis71@hotmail.com>\nPat Miller <patmiller@localhost> patmiller <patmiller@localhost>\nPaul Ivanov <pivanov5@bloomberg.net> <pi@berkeley.edu>\nPaul Ivanov <pivanov5@bloomberg.net> <paul.ivanov@local>\nPaul Jacobson <hpj3@myuw.net>\nPaul Juma Otieno <oti22001@byui.edu>\nPaul Juma Otieno <oti22001@byui.edu> <103896399+otieno-juma@users.noreply.github.com>\nPaul Reece <paulreece2@gmail.com>\nPaul YS Lee <leeyspaul@gmail.com> Paul <leeyspaul@users.noreply.github.com>\nPey Lian Lim <lim@stsci.edu>\nPey Lian Lim <lim@stsci.edu> <2090236+pllim@users.noreply.github.com>\nPearu Peterson <pearu.peterson@gmail.com> <pearu@pearu-laptop.(none)>\nPete Peeradej Tanruangporn <pete.tanru@gmail.com>\nPeter Bell <peterbell10@live.co.uk>\nPeter J Cock <p.j.a.cock@googlemail.com>\nPeter Kämpf <P-Kaempf@users.noreply.github.com>\nPeyton Murray <peynmurray@gmail.com>\nPhil Elson <pelson.pub@gmail.com>\nPierre GM <pierregmcode@gmail.com>\nPierre GM <pierregmcode@gmail.com> pierregm <pierregm@localhost>\nPiotr Gaiński <dociebieaniuszlem@gmail.com>\nPiotr Gaiński <dociebieaniuszlem@gmail.com> Pan Jan <rumcajsgajos@gmail.com>\nPrabhu Ramachandran <prabhu@localhost> prabhu <prabhu@localhost>\nPrathmesh Shirsat <patushir@gmail.com>\nPrathmesh Shirsat <patushir@gmail.com> <55539563+Fayyr@users.noreply.github.com>\nPrithvi Singh <prithvisinghtewatia@gmail.com>\nPrithvi Singh <42640176+prithvitewatia@users.noreply.github.com>\nPrzemyslaw Bartosik <sendthenote@gmail.com>\nRaghuveer Devulapalli <me.raghuveer@gmail.com> <raghuveer.devulapalli@intel.com>\nRaghuveer Devulapalli <me.raghuveer@gmail.com> <44766858+r-devulap@users.noreply.github.com>\nRajas Rade <raderajas@gmail.com> lkdmttg7 <inprovertmer07@gmail.com>\nRakesh Vasudevan <rakesh.nvasudev@gmail.com>\nRalf Gommers <ralf.gommers@gmail.com> <ralf.gommers@googlemail.com>\nRalf Gommers <ralf.gommers@gmail.com> rgommers <rgommers@users.noreply.github.com>\nRehas Sachdeva <aquannie@gmail.com>\nRichard Howe <45905457+rmhowe425@users.noreply.github.com>\nRitta Narita <narittan@gmail.com>\nRiya Sharma <navneet.nmk@gmail.com>\nRobert Kern <rkern@enthought.com> <robert.kern@gmail.com>\nRobert LU <robberphex@gmail.com>\nRobert T. McGibbon <rmcgibbo@gmail.com>\nRohit Goswami <rog32@hi.is>\nRohit Goswami <rog32@hi.is> <rohit.goswami@aol.com>\nRohit Goswami <rog32@hi.is> <r95g10@gmail.com>\nRoland Kaufmann <rka081+numpy@uib.no> <roland.kaufmann@uni.no>\nRoman Yurchak <rth.yurchak@gmail.com> <rth.yurchak@pm.me>\nRonan Lamy <ronan.lamy@gmail.com> Ronan Lamy <Ronan.Lamy@normalesup.org>\nRostan Tabet<rostan.tabet@gmail.com>\nRoy Jacobson <roi.jacobson1@gmail.com>\nRussell Hewett <rhewett@mit.edu>\nRyan Blakemore <rbtnet@gmail.com>\nRyan Polley <rypolley@gmail.com> <rypolley+github@gmail.com>\nRyan Soklaski <rsoklaski@gmail.com> <ry26099@mit.edu>\nRyan Soklaski <rsoklaski@gmail.com> <ryan.soklaski@gmail.com>\nSabrina Simao <sabrina_simao@hotmail.com>\nSabrina Simao <sabrina_simao@hotmail.com> SabrinaSimao <sabrinass@al.insper.edu.br>\nSadi Gulcelik <sadigulcelik@gmail.com>\nSadi Gulcelik <sadigulcelik@gmail.com> <sg3790@columbia.edu>\nSam Preston <j.sam.preston@gmail.com>\nSam Radhakrishnan <sk09idm@gmail.com> = <=> # committed without an email address\nSamesh Lakhotia <samesh.lakhotia@gmail.com>\nSamesh Lakhotia <samesh.lakhotia@gmail.com> <43701530+sameshl@users.noreply.github.com>\nSami Salonen <ssalonen@gmail.com> <sami.salonen@eniram.fi>\nSamuel Albanie <albanie@users.noreply.github.com>\nSanchez Gonzalez Alvaro <as12513@imperial.ac.uk>\nSanya Sinha <83265366+ssanya942@users.noreply.github.com>\nSaransh Chopra <saransh0701@gmail.com>\nSaullo Giovani <saullogiovani@gmail.com>\nSaurabh Mehta <e.samehta@gmail.com>\nSayantika Banik <sayantikabanik122@gmail.com>\nSchrijvers Luc <begasus@gmail.com>\nSean Cheah <cheah_sean@yahoo.com>\nSean Cheah <cheah_sean@yahoo.com> <67928790+thalassemia@users.noreply.github.com>\nSebastian Berg <sebastian@sipsolutions.net>\nSebastian Schleehauf <slepton@posteo.de>\nSerge Guelton <serge.guelton@telecom-bretagne.eu>\nSergei Vorfolomeev <svorfolomeev@vmssoftware.com> <39548292+vorfol@users.noreply.github.com>\nShuangchi He <yulvchi@qq.com>\nShaurya Barkund <64537538+Shaurya19@users.noreply.github.com>\nShubham Gupta <mastershubham@gmail.com>\nShubham Gupta <mastershubham@gmail.com> <63910248+shubham11941140@users.noreply.github.com>\nShekhar Prasad Rajak <shekharrajak@live.com>\nShen Zhou <shen_zhou@u.nus.edu>\nShreya Singh <shreyas1696@gmail.com>\nShota Kawabuchi <shota.kawabuchi+GitHub@gmail.com>\nSiavash Eliasi <siavashserver@gmail.com>\nSimon Altrogge <8720147+SimonAltrogge@users.noreply.github.com>\nSimon Conseil <contact@saimon.org> <simon.conseil@univ-lyon1.fr>\nSimon Gasse <simon.gasse@gmail.com>\nSimon Gasse <simon.gasse@gmail.com> <sgasse@users.noreply.github.com>\nSista Seetaram <hanumaseetaram@gmail.com>\nSista Seetaram <hanumaseetaram@gmail.com> <65669128+sistaseetaram@users.noreply.github.com>\nSlava Gorloff <31761951+gorloffslava@users.noreply.github.com>\nSøren Rasmussen <soren.rasmussen@alexandra.dk> <47032123+sorenrasmussenai@users.noreply.github.com>\nSpencer Hill <spencerahill@gmail.com> <shill@atmos.ucla.edu>\nSrimukh Sripada <git@srimukh.com>\nStan Ulbrych <89152624+StanFromIreland@users.noreply.github.com>\nStefan Behnel <stefan_ml@behnel.de>\nStefan van der Walt <stefanv@berkeley.edu> <sjvdwalt@gmail.com>\nStefan van der Walt <stefanv@berkeley.edu> <stefan@sun.ac.za>\nStephan Hoyer <shoyer@gmail.com> <shoyer@climate.com>\nStephan Hoyer <shoyer@gmail.com> <shoyer@google.com>\nStephen Worsley <stephen.worsley@metoffice.gov.uk> <49274989+stephenworsley@users.noreply.github.com>\nSteve Stagg <stestagg@gmail.com> <ste@sta.gg>\nSteven J Kern <kern.steven0@gmail.com>\nStuart Archibald <stuart.archibald@googlemail.com> <stuart@opengamma.com>\nStuart Archibald <stuart.archibald@googlemail.com> <stuartarchibald@users.noreply.github.com>\nSuryaChand P <psschand@gmail.com>\nSylvain Ferriol <ninousf@gmail.com>\nTakanori Hirano <takanori17h@gmail.com>\nTheodoros Nikolaou <nikolaoutheod@gmail.com>\nTalha Mohsin <talha.bm201@gmail.com>\nTalha Mohsin <talha.bm201@gmail.com> <131553190+talhabm@users.noreply.github.com>\nThomas A Caswell <tcaswell@gmail.com> <tcaswell@bnl.gov>\nThomas Kluyver <takowl@gmail.com> <thomas@kluyver.me.uk>\nThomas Orgis <thomas.orgis@uni-hamburg.de>\nTim Cera <tim@cerazone.net> <tcera@sjrwmd.com>\nTim Teichmann <t.teichmann@dashdos.com>\nTim Teichmann <t.teichmann@dashdos.com> <44259103+tteichmann@users.noreply.github.com>\nTirth Patel <tirthasheshpatel@gmail.com>\nTobias Pitters <tobias.pitters@gmail.com> <tobias.pitters@gmx.de>\nTobias Pitters <tobias.pitters@gmail.com> <31857876+CloseChoice@users.noreply.github.com>\nTobias Uelwer <tobias.uelwer@googlemail.com> <tobias.uelwer@uni-duesseldorf.de>\nTom Boyd <tboyd@scitec.com> <pezcore@users.noreply.github.com>\nTom Poole <t.b.poole@gmail.com>\nTong Zou <tongzou@uw.edu>\nTony LaTorre <tlatorre@uchicago.edu>\nToshiki Kataoka <kataoka@preferred.jp> <tos.lunar@gmail.com>\nTravis Oliphant <teoliphant@gmail.com>\nTravis Oliphant <teoliphant@gmail.com> <oliphant@enthought.com>\nTravis Oliphant <teoliphant@gmail.com> <travis@continuum.io>\nVahid Tavanashad <120411540+vtavana@users.noreply.github.com>\nValentin Haenel <valentin@haenel.co> <valentin.haenel@gmx.de>\nValentin Haenel <valentin@haenel.co> <vhaenel@anaconda.com>\nVardhaman Kalloli <83634399+cyai@users.noreply.github.com>\nVarun Nayyar <nayyarv@gmail.com> <nayyarv@users.noreply.github.com>\nVictor Herdeiro <victor.oriedreh@gmail.com>\nVijayakumar Z <zvijayakumar@gmail.com>\nVinith Kishore <vinith.kishore@unibas.ch>\nVinith Kishore <vinith.kishore@unibas.ch> <85550536+vinith2@users.noreply.github.com>\nVrinda Narayan <talk2vrinda@gmail.com>\nVrinda Narayan <talk2vrinda@gmail.com> <vrinda18120@iiitd.ac.in>\nVrinda Narayan <talk2vrinda@gmail.com> <48102157+vrindaaa@users.noreply.github.com>\nWansoo Kim <rladhkstn8@gmail.com>\nWarrick Ball <W.H.Ball@bham.ac.uk>\nWarrick Ball <W.H.Ball@bham.ac.uk> <warrickball@users.noreply.github.com>\nWarren Weckesser <warren.weckesser@gmail.com>\nWarren Weckesser <warren.weckesser@gmail.com> <warren.weckesser@enthought.com>\nWeitang Li <liwt31@163.com>\nWendell Smith <wendellwsmith@gmail.com> <wackywendell@gmail.com>\nWilliam Spotz <wfspotz@sandia.gov> <wfspotz@sandia.gov@localhost>\nWim Glenn <wim.glenn@melbourneit.com.au>\nWojtek Ruszczewski <git@wr.waw.pl>\nWojciech Rzadkowski <wojciech.rzadkowski@gmail.com> <33913808+wrzadkow@users.noreply.github.com>\nXiangyi Wang <xiangyi-wang@users.noreply.github.com>\nYamada Fuyuka <yamada.fuyuka@jp.fuijitsu.com>\nYang Hau <yuanyanghau@gmail.com>\nYang Hau <yuanyanghau@gmail.com> <vulxj0j8j8@gmail.com>\nYang Wang <yangwang@iscas.ac.cn>\nYash Pethe <yashpethe26@gmail.com>\nYash Pethe <yashpethe26@gmail.com> <83630710+patient74@users.noreply.github.com>\nYashasvi Misra <yashasvimisra_bh@srmuniv.edu.in>\nYashasvi Misra <yashasvimisra_bh@srmuniv.edu.in> <54177363+yashasvimisra2798@users.noreply.github.com>\nYogesh Raisinghani <vanshita12004@gmail.com> <46864533+raisinghanii@users.noreply.github.com>\nYounes Sandi <unes.sandi1@gmail.com>\nYounes Sandi <unes.sandi1@gmail.com> <65843206+Unessam@users.noreply.github.com>\nYu Feng <rainwoodman@gmail.com> <feyu@google.com>\nYuji Kanagawa <yuji.kngw.80s.revive@gmail.com>\nYuki K <drsuaimqjgar@gmail.com>\nYury Kirienko <yury.kirienko@gmail.com>\nZac Hatfield-Dodds <zac.hatfield.dodds@gmail.com>\nZach Brugh <111941670+zachbrugh@users.noreply.github.com>\nZé Vinícius <jvmirca@gmail.com>\nZhang Na <zhangna@loongson.cn>\nZixu Zhao <zixu.zhao.tireless@gmail.com>\nZiyan Zhou <ziyan.zhou@mujin.co.jp>\nZieji Pohz <poh.ziji@gmail.com>\nZieji Pohz <poh.ziji@gmail.com> <8103276+zjpoh@users.noreply.github.com>\nZolboo Erdenebaatar <erdenebz@dickinson.edu>\nZolisa Bleki <zolisa.bleki@gmail.com>\nZolisa Bleki <zolisa.bleki@gmail.com> <44142765+zoj613@users.noreply.github.com>\n"
        },
        {
          "name": ".spin",
          "type": "tree",
          "content": null
        },
        {
          "name": "CITATION.bib",
          "type": "blob",
          "size": 0.875,
          "content": "@ARTICLE{2020NumPy-Array,\n  author  = {Harris, Charles R. and Millman, K. Jarrod and\n            van der Walt, Stéfan J and Gommers, Ralf and\n            Virtanen, Pauli and Cournapeau, David and\n            Wieser, Eric and Taylor, Julian and Berg, Sebastian and\n            Smith, Nathaniel J. and Kern, Robert and Picus, Matti and\n            Hoyer, Stephan and van Kerkwijk, Marten H. and\n            Brett, Matthew and Haldane, Allan and\n            Fernández del Río, Jaime and Wiebe, Mark and\n            Peterson, Pearu and Gérard-Marchant, Pierre and\n            Sheppard, Kevin and Reddy, Tyler and Weckesser, Warren and\n            Abbasi, Hameer and Gohlke, Christoph and\n            Oliphant, Travis E.},\n  title   = {Array programming with {NumPy}},\n  journal = {Nature},\n  year    = {2020},\n  volume  = {585},\n  pages   = {357–362},\n  doi     = {10.1038/s41586-020-2649-2}\n}\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 0.642578125,
          "content": "===============================\nNumPy's Contributing guidelines\n===============================\n\nWelcome to the NumPy community! We're excited to have you here.\nWhether you're new to open source or experienced, your contributions\nhelp us grow.\n\nPull requests (PRs) are always welcome, but making a PR is just the\nstart. Please respond to comments and requests for changes to help\nmove the process forward. Please follow our\n`Code of Conduct <https://numpy.org/code-of-conduct/>`__, which applies\nto all interactions, including issues and PRs.\n\nFor more, please read https://www.numpy.org/devdocs/dev/index.html\n\nThank you for contributing, and happy coding!\n"
        },
        {
          "name": "INSTALL.rst",
          "type": "blob",
          "size": 5.2255859375,
          "content": "Building and installing NumPy\n+++++++++++++++++++++++++++++\n\n**IMPORTANT**: the below notes are about building NumPy, which for most users\nis *not* the recommended way to install NumPy.  Instead, use either a complete\nscientific Python distribution (recommended) or a binary installer - see\nhttps://scipy.org/install.html.\n\n\n.. Contents::\n\nPrerequisites\n=============\n\nBuilding NumPy requires the following installed software:\n\n1) Python__ 3.11.x or newer.\n\n   Please note that the Python development headers also need to be installed,\n   e.g., on Debian/Ubuntu one needs to install both `python3` and\n   `python3-dev`. On Windows and macOS this is normally not an issue.\n\n2) Cython >= 3.0.6\n\n3) pytest__ (optional)\n\n   This is required for testing NumPy, but not for using it.\n\n4) Hypothesis__ (optional) 5.3.0 or later\n\n   This is required for testing NumPy, but not for using it.\n\nPython__ https://www.python.org/\npytest__ https://docs.pytest.org/en/stable/\nHypothesis__ https://hypothesis.readthedocs.io/en/latest/\n\n\n.. note::\n\n   If you want to build NumPy in order to work on NumPy itself, use\n   ``spin``.  For more details, see\n   https://numpy.org/devdocs/dev/development_environment.html\n\n.. note::\n\n   More extensive information on building NumPy is maintained at\n   https://numpy.org/devdocs/building/#building-numpy-from-source\n\n\nBasic installation\n==================\n\nIf this is a clone of the NumPy git repository, then first initialize\nthe ``git`` submodules::\n\n    git submodule update --init\n\nTo install NumPy, run::\n\n    pip install .\n\nThis will compile NumPy on all available CPUs and install it into the active\nenvironment.\n\nTo run the build from the source folder for development purposes, use the\n``spin`` development CLI::\n\n    spin build    # installs in-tree under `build-install/`\n    spin ipython  # drop into an interpreter where `import numpy` picks up the local build\n\nAlternatively, use an editable install with::\n\n    pip install -e . --no-build-isolation\n\nSee `Requirements for Installing Packages <https://packaging.python.org/tutorials/installing-packages/>`_\nfor more details.\n\n\nChoosing compilers\n==================\n\nNumPy needs C and C++ compilers, and for development versions also needs\nCython.  A Fortran compiler isn't needed to build NumPy itself; the\n``numpy.f2py`` tests will be skipped when running the test suite if no Fortran\ncompiler is available. \n\nFor more options including selecting compilers, setting custom compiler flags\nand controlling parallelism, see\nhttps://scipy.github.io/devdocs/building/compilers_and_options.html\n\nWindows\n-------\n\nOn Windows, building from source can be difficult (in particular if you need to\nbuild SciPy as well, because that requires a Fortran compiler). Currently, the\nmost robust option is to use MSVC (for NumPy only). If you also need SciPy,\nyou can either use MSVC + Intel Fortran or the Intel compiler suite.\nIntel itself maintains a good `application note\n<https://software.intel.com/en-us/articles/numpyscipy-with-intel-mkl>`_\non this.\n\nIf you want to use a free compiler toolchain, our current recommendation is to\nuse Docker or Windows subsystem for Linux (WSL).  See\nhttps://scipy.github.io/devdocs/dev/contributor/contributor_toc.html#development-environment\nfor more details.\n\n\nBuilding with optimized BLAS support\n====================================\n\nConfiguring which BLAS/LAPACK is used if you have multiple libraries installed\nis done via a ``--config-settings`` CLI flag - if not given, the default choice\nis OpenBLAS. If your installed library is in a non-standard location, selecting\nthat location is done via a pkg-config ``.pc`` file.\nSee https://scipy.github.io/devdocs/building/blas_lapack.html for more details.\n\nWindows\n-------\n\nThe Intel compilers work with Intel MKL, see the application note linked above.\n\nFor an overview of the state of BLAS/LAPACK libraries on Windows, see\n`here <https://mingwpy.github.io/blas_lapack.html>`_.\n\nmacOS\n-----\n\nOn macOS >= 13.3, you can use Apple's Accelerate library. On older macOS versions,\nAccelerate has bugs and we recommend using OpenBLAS or (on x86-64) Intel MKL.\n\nUbuntu/Debian\n-------------\n\nFor best performance, a development package providing BLAS and CBLAS should be\ninstalled.  Some of the options available are:\n\n- ``libblas-dev``: reference BLAS (not very optimized)\n- ``libatlas-base-dev``: generic tuned ATLAS, it is recommended to tune it to\n  the available hardware, see /usr/share/doc/libatlas3-base/README.Debian for\n  instructions\n- ``libopenblas-base``: fast and runtime detected so no tuning required but a\n  very recent version is needed (>=0.2.15 is recommended).  Older versions of\n  OpenBLAS suffered from correctness issues on some CPUs.\n\nThe package linked to when numpy is loaded can be chosen after installation via\nthe alternatives mechanism::\n\n    update-alternatives --config libblas.so.3\n    update-alternatives --config liblapack.so.3\n\nOr by preloading a specific BLAS library with::\n\n    LD_PRELOAD=/usr/lib/atlas-base/atlas/libblas.so.3 python ...\n\n\nBuild issues\n============\n\nIf you run into build issues and need help, the NumPy and SciPy\n`mailing list <https://scipy.org/scipylib/mailing-lists.html>`_ is the best\nplace to ask. If the issue is clearly a bug in NumPy, please file an issue (or\neven better, a pull request) at https://github.com/numpy/numpy.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.5068359375,
          "content": "Copyright (c) 2005-2025, NumPy Developers.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n       notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n       copyright notice, this list of conditions and the following\n       disclaimer in the documentation and/or other materials provided\n       with the distribution.\n\n    * Neither the name of the NumPy Developers nor the names of any\n       contributors may be used to endorse or promote products derived\n       from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "LICENSES_bundled.txt",
          "type": "blob",
          "size": 0.951171875,
          "content": "The NumPy repository and source distributions bundle several libraries that are\ncompatibly licensed.  We list these here.\n\nName: lapack-lite\nFiles: numpy/linalg/lapack_lite/*\nLicense: BSD-3-Clause\n  For details, see numpy/linalg/lapack_lite/LICENSE.txt\n\nName: dragon4\nFiles: numpy/_core/src/multiarray/dragon4.c\nLicense: MIT\n  For license text, see numpy/_core/src/multiarray/dragon4.c\n\nName: libdivide\nFiles: numpy/_core/include/numpy/libdivide/*\nLicense: Zlib\n  For license text, see numpy/_core/include/numpy/libdivide/LICENSE.txt\n\n\nNote that the following files are vendored in the repository and sdist but not\ninstalled in built numpy packages:\n\nName: Meson\nFiles: vendored-meson/meson/*\nLicense: Apache 2.0\n  For license text, see vendored-meson/meson/COPYING\n\nName: spin\nFiles: .spin/cmds.py\nLicense: BSD-3\n  For license text, see .spin/LICENSE\n\nName: tempita\nFiles: numpy/_build_utils/tempita/*\nLicense: MIT\n  For details, see numpy/_build_utils/tempita/LICENCE.txt\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.884765625,
          "content": "<h1 align=\"center\">\n<img src=\"https://raw.githubusercontent.com/numpy/numpy/main/branding/logo/primary/numpylogo.svg\" width=\"300\">\n</h1><br>\n\n\n[![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](\nhttps://numfocus.org)\n[![PyPI Downloads](https://img.shields.io/pypi/dm/numpy.svg?label=PyPI%20downloads)](\nhttps://pypi.org/project/numpy/)\n[![Conda Downloads](https://img.shields.io/conda/dn/conda-forge/numpy.svg?label=Conda%20downloads)](\nhttps://anaconda.org/conda-forge/numpy)\n[![Stack Overflow](https://img.shields.io/badge/stackoverflow-Ask%20questions-blue.svg)](\nhttps://stackoverflow.com/questions/tagged/numpy)\n[![Nature Paper](https://img.shields.io/badge/DOI-10.1038%2Fs41586--020--2649--2-blue)](\nhttps://doi.org/10.1038/s41586-020-2649-2)\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/numpy/numpy/badge)](https://securityscorecards.dev/viewer/?uri=github.com/numpy/numpy)\n\n\nNumPy is the fundamental package for scientific computing with Python.\n\n- **Website:** https://www.numpy.org\n- **Documentation:** https://numpy.org/doc\n- **Mailing list:** https://mail.python.org/mailman/listinfo/numpy-discussion\n- **Source code:** https://github.com/numpy/numpy\n- **Contributing:** https://www.numpy.org/devdocs/dev/index.html\n- **Bug reports:** https://github.com/numpy/numpy/issues\n- **Report a security vulnerability:** https://tidelift.com/docs/security\n\nIt provides:\n\n- a powerful N-dimensional array object\n- sophisticated (broadcasting) functions\n- tools for integrating C/C++ and Fortran code\n- useful linear algebra, Fourier transform, and random number capabilities\n\nTesting:\n\nNumPy requires `pytest` and `hypothesis`.  Tests can then be run after installation with:\n\n    python -c \"import numpy, sys; sys.exit(numpy.test() is False)\"\n\nCode of Conduct\n----------------------\n\nNumPy is a community-driven open source project developed by a diverse group of\n[contributors](https://numpy.org/teams/). The NumPy leadership has made a strong\ncommitment to creating an open, inclusive, and positive community. Please read the\n[NumPy Code of Conduct](https://numpy.org/code-of-conduct/) for guidance on how to interact\nwith others in a way that makes our community thrive.\n\nCall for Contributions\n----------------------\n\nThe NumPy project welcomes your expertise and enthusiasm!\n\nSmall improvements or fixes are always appreciated. If you are considering larger contributions\nto the source code, please contact us through the [mailing\nlist](https://mail.python.org/mailman/listinfo/numpy-discussion) first.\n\nWriting code isn’t the only way to contribute to NumPy. You can also:\n- review pull requests\n- help us stay on top of new and old issues\n- develop tutorials, presentations, and other educational materials\n- maintain and improve [our website](https://github.com/numpy/numpy.org)\n- develop graphic design for our brand assets and promotional materials\n- translate website content\n- help with outreach and onboard new contributors\n- write grant proposals and help with other fundraising efforts\n\nFor more information about the ways you can contribute to NumPy, visit [our website](https://numpy.org/contribute/). \nIf you’re unsure where to start or how your skills fit in, reach out! You can\nask on the mailing list or here, on GitHub, by opening a new issue or leaving a\ncomment on a relevant issue that is already open.\n\nOur preferred channels of communication are all public, but if you’d like to\nspeak to us in private first, contact our community coordinators at\nnumpy-team@googlegroups.com or on Slack (write numpy-team@googlegroups.com for\nan invitation).\n\nWe also have a biweekly community call, details of which are announced on the\nmailing list. You are very welcome to join.\n\nIf you are new to contributing to open source, [this\nguide](https://opensource.guide/how-to-contribute/) helps explain why, what,\nand how to successfully get involved.\n"
        },
        {
          "name": "THANKS.txt",
          "type": "blob",
          "size": 3.1748046875,
          "content": "Travis Oliphant for the NumPy core, the NumPy guide, various\n    bug-fixes and code contributions.\nPaul Dubois, who implemented the original Masked Arrays.\nPearu Peterson for f2py, numpy.distutils and help with code\n    organization.\nRobert Kern for mtrand, bug fixes, help with distutils, code\n    organization, strided tricks and much more.\nEric Jones for planning and code contributions.\nFernando Perez for code snippets, ideas, bugfixes, and testing.\nEd Schofield for matrix.py patches, bugfixes, testing, and docstrings.\nRobert Cimrman for array set operations and numpy.distutils help.\nJohn Hunter for code snippets from matplotlib.\nChris Hanley for help with records.py, testing, and bug fixes.\nTravis Vaught for administration, community coordination and\n    marketing.\nJoe Cooper, Jeff Strunk for administration.\nEric Firing for bugfixes.\nArnd Baecker for 64-bit testing.\nDavid Cooke for many code improvements including the auto-generated C-API,\n    and optimizations.\nAndrew Straw for help with the web-page, documentation, packaging and\n    testing.\nAlexander Belopolsky (Sasha) for Masked array bug-fixes and tests,\n    rank-0 array improvements, scalar math help and other code additions.\nFrancesc Altet for unicode, work on nested record arrays, and bug-fixes.\nTim Hochberg for getting the build working on MSVC, optimization\n    improvements, and code review.\nCharles (Chuck) Harris for the sorting code originally written for\n    Numarray and for improvements to polyfit, many bug fixes, delving\n    into the C code, release management, and documentation.\nDavid Huard for histogram improvements including 2-D and d-D code and\n    other bug-fixes.\nStefan van der Walt for numerous bug-fixes, testing and documentation.\nAlbert Strasheim for documentation, bug-fixes, regression tests and\n    Valgrind expertise.\nDavid Cournapeau for build support, doc-and-bug fixes, and code\n    contributions including fast_clipping.\nJarrod Millman for release management, community coordination, and code\n    clean up.\nChris Burns for work on memory mapped arrays and bug-fixes.\nPauli Virtanen for documentation, bug-fixes, lookfor and the\n    documentation editor.\nA.M. Archibald for no-copy-reshape code, strided array tricks,\n    documentation and bug-fixes.\nPierre Gerard-Marchant for rewriting masked array functionality.\nRoberto de Almeida for the buffered array iterator.\nAlan McIntyre for updating the NumPy test framework to use nose, improve\n    the test coverage, and enhancing the test system documentation.\nJoe Harrington for administering the 2008 Documentation Sprint.\nMark Wiebe for the new NumPy iterator, the float16 data type, improved\n    low-level data type operations, and other NumPy core improvements.\n\nNumPy is based on the Numeric (Jim Hugunin, Paul Dubois, Konrad\nHinsen, and David Ascher) and NumArray (Perry Greenfield, J Todd\nMiller, Rick White and Paul Barrett) projects.  We thank them for\npaving the way ahead.\n\nInstitutions\n------------\n\nEnthought for providing resources and finances for development of NumPy.\nUC Berkeley for providing travel money and hosting numerous sprints.\nThe University of Central Florida for funding the 2008 Documentation Marathon.\nThe University of Stellenbosch for hosting the buildbot.\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 2.9287109375,
          "content": "trigger:\n  # start a new build for every push\n  batch: False\n  branches:\n    include:\n      - main\n      - maintenance/*\n\n\npr:\n  branches:\n    include:\n    - '*'  # must quote since \"*\" is a YAML reserved character; we want a string\n\n\nstages:\n\n- stage: Check\n  jobs:\n    - job: Skip\n      pool:\n        vmImage: 'ubuntu-20.04'\n      variables:\n        DECODE_PERCENTS: 'false'\n        RET: 'true'\n      steps:\n      - bash: |\n          git_log=`git log --max-count=1 --skip=1 --pretty=format:\"%B\" | tr \"\\n\" \" \"`\n          echo \"##vso[task.setvariable variable=log]$git_log\"\n      - bash: echo \"##vso[task.setvariable variable=RET]false\"\n        condition: or(contains(variables.log, '[skip azp]'), contains(variables.log, '[azp skip]'), contains(variables.log, '[skip ci]'), contains(variables.log, '[ci skip]'))\n      - bash: echo \"##vso[task.setvariable variable=start_main;isOutput=true]$RET\"\n        name: result\n\n- stage: ComprehensiveTests\n  condition: and(succeeded(), eq(dependencies.Check.outputs['Skip.result.start_main'], 'true'))\n  dependsOn: Check\n  jobs:\n\n  - job: Lint\n    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))\n    pool:\n      vmImage: 'ubuntu-20.04'\n    steps:\n    - task: UsePythonVersion@0\n      inputs:\n        versionSpec: '3.11'\n        addToPath: true\n        architecture: 'x64'\n    - script: >-\n        python -m pip install -r requirements/linter_requirements.txt\n      displayName: 'Install tools'\n      # pip 21.1 emits a pile of garbage messages to annoy users :)\n      #      failOnStderr: true\n    - script: |\n        python tools/linter.py\n      displayName: 'Run Lint Checks'\n      failOnStderr: true\n\n  - job: Linux_Python_311_32bit_full_with_asserts\n    pool:\n      vmImage: 'ubuntu-20.04'\n    steps:\n    - script: |\n        git submodule update --init\n      displayName: 'Fetch submodules'\n    - script: |\n            # yum does not have a ninja package, so use the PyPI one\n            docker run -v $(pwd):/numpy -e CFLAGS=\"-msse2 -std=c99 -UNDEBUG\" \\\n            -e F77=gfortran-5 -e F90=gfortran-5 quay.io/pypa/manylinux2014_i686 \\\n            /bin/bash -xc \"source /numpy/tools/ci/run_32_bit_linux_docker.sh\"\n      displayName: 'Run 32-bit manylinux2014 Docker Build / Tests'\n\n  - job: Windows\n    timeoutInMinutes: 120\n    pool:\n      vmImage: 'windows-2019'\n    strategy:\n      maxParallel: 3\n      matrix:\n          Python311-64bit-fast:\n            PYTHON_VERSION: '3.11'\n            PYTHON_ARCH: 'x64'\n            TEST_MODE: fast\n            BITS: 64\n          Python312-64bit-full:\n            PYTHON_VERSION: '3.12'\n            PYTHON_ARCH: 'x64'\n            TEST_MODE: full\n            BITS: 64\n            _USE_BLAS_ILP64: '1'\n# TODO pypy: uncomment when pypy3.11 comes out\n#          PyPy310-64bit-fast:\n#            PYTHON_VERSION: 'pypy3.10'\n#            PYTHON_ARCH: 'x64'\n#            TEST_MODE: fast\n#            BITS: 64\n#            _USE_BLAS_ILP64: '1'\n\n    steps:\n    - template: azure-steps-windows.yml\n"
        },
        {
          "name": "azure-steps-windows.yml",
          "type": "blob",
          "size": 2.0830078125,
          "content": "steps:\n- script: git submodule update --init\n  displayName: 'Fetch submodules'\n- task: UsePythonVersion@0\n  inputs:\n    versionSpec: $(PYTHON_VERSION)\n    addToPath: true\n    architecture: $(PYTHON_ARCH)\n\n- script: python -m pip install --upgrade pip wheel\n  displayName: 'Install tools'\n\n- script: python -m pip install -r requirements/test_requirements.txt\n  displayName: 'Install dependencies; some are optional to avoid test skips'\n\n- powershell: |\n    choco install -y --stoponfirstfailure --checksum 6004DF17818F5A6DBF19CB335CC92702 pkgconfiglite\n  displayName: 'Install utilities'\n\n- powershell: |\n    # Note: ensure the `pip install .` command remains the last one here,\n    # to avoid \"green on failure\" issues\n    If ( Test-Path env:DISABLE_BLAS ) {\n        python -m pip install . -v -Csetup-args=\"--vsenv\" -Csetup-args=\"-Dblas=none\" -Csetup-args=\"-Dlapack=none\" -Csetup-args=\"-Dallow-noblas=true\"\n    }\n    elseif ( Test-Path env:_USE_BLAS_ILP64 ) {\n        pip install -r requirements/ci_requirements.txt\n        spin config-openblas --with-scipy-openblas=64\n        $env:PKG_CONFIG_PATH=\"$pwd/.openblas\"\n        python -m pip install . -v -Csetup-args=\"--vsenv\"\n    } else {\n        pip install -r requirements/ci_requirements.txt\n        spin config-openblas --with-scipy-openblas=32\n        $env:PKG_CONFIG_PATH=\"$pwd/.openblas\"\n        python -m pip install . -v -Csetup-args=\"--vsenv\" \n    }\n  displayName: 'Build NumPy'\n\n- powershell: |\n    cd tools  # avoid root dir to not pick up source tree\n    # Get a gfortran onto the path for f2py tests\n    $env:PATH = \"c:\\\\rtools43\\\\x86_64-w64-mingw32.static.posix\\\\bin;$env:PATH\"\n    If ( $env:TEST_MODE -eq \"full\" ) {\n      pytest --pyargs numpy -rsx --junitxml=junit/test-results.xml\n    } else {\n      pytest --pyargs numpy -m \"not slow\" -rsx --junitxml=junit/test-results.xml\n    }\n  displayName: 'Run NumPy Test Suite'\n\n- task: PublishTestResults@2\n  condition: succeededOrFailed()\n  inputs:\n    testResultsFiles: '**/test-*.xml'\n    failTaskOnFailedTests: true\n    testRunTitle: 'Publish test results for Python $(PYTHON_VERSION) $(BITS)-bit $(TEST_MODE) Windows'\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "branding",
          "type": "tree",
          "content": null
        },
        {
          "name": "building_with_meson.md",
          "type": "blob",
          "size": 1.8251953125,
          "content": "# Building with Meson\n\n_Note: this is for early adopters. It has been tested on Linux and macOS, and\nwith Python 3.10-3.12. There is one CI job to keep the build stable. This may\nhave rough edges, please open an issue if you run into a problem._\n\n### Developer build\n\n**Install build tools:** Use one of:\n\n- `mamba env create -f environment.yml && mamba activate numpy-dev`\n\n- `python -m pip install -r requirements/build_requirements.txt`\n  *Note: also make sure you have `pkg-config` and the usual system dependencies\n  for NumPy*\n\nThen install spin:\n- `python -m pip install spin`\n\n**Compile and install:** `spin build`\n\nThis builds in the `build/` directory, and installs into the `build-install` directory.\n\nThen run the test suite or a shell via `spin`:\n```\nspin test\nspin ipython\n```\n\nAlternatively, to use the package, add it to your `PYTHONPATH`:\n```\nexport PYTHONPATH=${PWD}/build/lib64/python3.10/site-packages  # may vary\npytest --pyargs numpy\n```\n\n\n### pip install\n\nNote that `pip` will use the default build system, which is now Meson.\nCommands such as `pip install .` or `pip install --no-build-isolation .`\nwill work as expected, as does building an sdist or wheel with `python -m build`,\nor `pip install -e . --no-build-isolation` for an editable install.\nFor a more complete developer experience than editable installs, consider using\n`spin` instead though (see above).\n\n\n### Workaround for a hiccup on Fedora\n\n- Fedora does not distribute `openblas.pc`. Install the following file in `~/lib/pkgconfig/openblas.pc`:\n\n```\nprefix=/usr\nincludedir=${prefix}/include\nlibdir=${prefix}/lib64\n\nName: openblas\nDescription: OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version\nVersion: 0.3.19\nCflags: -I${includedir}/openblas\nLibs: -L${libdir} -lopenblas\n```\n\nThen build with:\n\n```\nspin build -- -Dpkg_config_path=${HOME}/lib/pkgconfig\n```\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "environment.yml",
          "type": "blob",
          "size": 0.9345703125,
          "content": "# To use:\n#\n#   $ conda env create -f environment.yml  # `mamba` works too for this command\n#   $ conda activate numpy-dev\n#\nname: numpy-dev\nchannels:\n  - conda-forge\ndependencies:\n  - python=3.12  # need to pin to avoid issues with builds\n  - cython>=3.0\n  - compilers\n  - openblas\n  - nomkl\n  - setuptools==65.5.1\n  - ninja\n  - pkg-config\n  - meson-python\n  - spin==0.13\n  - ccache\n  # For testing\n  - pytest\n  - pytest-cov\n  - pytest-xdist\n  - hypothesis\n  # For type annotations\n  - typing_extensions>=4.2.0  # needed for python < 3.10\n  - mypy=1.14.1\n  - orjson  # makes mypy faster\n  # For building docs\n  - sphinx>=4.5.0\n  - sphinx-copybutton\n  - sphinx-design\n  - numpydoc=1.4.0\n  - ipython\n  - scipy\n  - pandas\n  - matplotlib\n  - pydata-sphinx-theme>=0.15.2\n  - doxygen\n  - towncrier\n  # NOTE: breathe 4.33.0 collides with sphinx.ext.graphviz\n  - breathe>4.33.0\n  # For linting\n  - ruff=0.8.3\n  - gitpython\n  # Used in some tests\n  - cffi\n  - pytz\n"
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 3.4228515625,
          "content": "project(\n  'NumPy',\n  'c', 'cpp', 'cython',\n  version: run_command(\n    # This should become `numpy/_version.py` in NumPy 2.0\n    ['numpy/_build_utils/gitversion.py'],\n    check: true).stdout().strip(),\n  license: 'BSD-3',\n  meson_version: '>=1.2.99',  # version in vendored-meson is 1.2.99\n  default_options: [\n    'buildtype=debugoptimized',\n    'b_ndebug=if-release',\n    'c_std=c11',\n    'cpp_std=c++17',\n    'pkgconfig.relocatable=true',\n  ],\n)\n\nfs = import('fs')\n\ncc = meson.get_compiler('c')\ncpp = meson.get_compiler('cpp')\ncy = meson.get_compiler('cython')\n\n# Check compiler is recent enough (see the SciPy Toolchain Roadmap for details)\nif cc.get_id() == 'gcc'\n  if not cc.version().version_compare('>=9.3')\n    error('NumPy requires GCC >= 9.3')\n  endif\nelif cc.get_id() == 'msvc'\n  if not cc.version().version_compare('>=19.20')\n    error('NumPy requires at least vc142 (default with Visual Studio 2019) ' + \\\n          'when building with MSVC')\n  endif\nendif\nif not cy.version().version_compare('>=3.0.6')\n  error('NumPy requires Cython >= 3.0.6')\nendif\n\npy = import('python').find_installation(pure: false)\npy_dep = py.dependency()\n\nif not cc.has_header('Python.h', dependencies: py_dep)\n  error('Cannot compile `Python.h`. Perhaps you need to install python-dev|python-devel')\nendif\n\n# Add default compile flags for any compiler that supports them.\n# Note that MSVC does not support strict aliasing at all, and neither do the\n# Intel compilers on Windows, so the `-fno` flavor of the flag should be fine.\nadd_project_arguments(\n  cc.get_supported_arguments( '-fno-strict-aliasing'), language : 'c'\n)\n#\n# Clang defaults to a non-strict floating error point model, but we need strict\n# behavior. `-ftrapping-math` is equivalent to `-ffp-exception-behavior=strict`.\n# This flag is also required to prevent the activation of SIMD partial load workarounds.\n# For further clarification, refer to gh-24461.\ncc_id = cc.get_id()\nif cc_id.startswith('clang')\n  # Determine the compiler flags for trapping math exceptions.\n  trapping_math = {\n    'clang-cl': '/clang:-ftrapping-math',\n  }.get(cc_id, '-ftrapping-math')\n  # Check if the compiler supports the trapping math flag.\n  if cc.has_argument(trapping_math)\n    # TODO: Consider upgrading the vendored Meson to 1.3.0 to support the parameter `werror`\n    # Detect whether the compiler actually supports strict handling of floating-point exceptions\n    # by treating warnings as errors.\n    if cc.compiles('int main() { return 0; }', args: [trapping_math, '-Werror'])\n      trapping_math = [trapping_math, '-DNPY_HAVE_CLANG_FPSTRICT']\n    else\n      # Suppress warnings about unsupported floating-point optimization.\n      trapping_math = [trapping_math, '-Wno-unsupported-floating-point-opt']\n      # Inform the user about the workaround.\n      message(\n        'NumPy is being built against a version of Clang that does not strictly enforce ' +\n        'floating-point exception handling. Workarounds will be used, which may impact performance.\\n' +\n        'Consider upgrading Clang to the latest version.'\n      )\n    endif\n    add_project_arguments(trapping_math, language: ['c', 'cpp'])\n  endif\nendif\n\nif host_machine.system() == 'darwin' and cc.has_link_argument('-Wl,-ld_classic')\n  # New linker introduced in macOS 14 not working yet with at least OpenBLAS in Spack,\n  # see gh-24964 (and linked scipy issue from there).\n  add_project_link_arguments('-Wl,-ld_classic', language : ['c', 'cpp'])\nendif\n\nsubdir('meson_cpu')\nsubdir('numpy')\n"
        },
        {
          "name": "meson.options",
          "type": "blob",
          "size": 2.6005859375,
          "content": "option('blas', type: 'string', value: 'auto',\n        description: 'Option for BLAS library selection. By default, try to find any in the order given by `blas-order`')\noption('lapack', type: 'string', value: 'auto',\n        description: 'Option for LAPACK library selection. By default, try to find any in the order given by `lapack-order`')\noption('allow-noblas', type: 'boolean', value: true,\n        description: 'If set to true, allow building with (slow!) internal fallback routines')\noption('blas-order', type: 'array', value: ['auto'],\n       description: 'Order of BLAS libraries to search for. E.g.: mkl,openblas,blis,blas')\noption('lapack-order', type: 'array', value: ['auto'],\n       description: 'Order of LAPACK libraries to search for. E.g.: mkl,openblas,lapack')\noption('use-ilp64', type: 'boolean', value: false,\n       description: 'Use ILP64 (64-bit integer) BLAS and LAPACK interfaces')\noption('blas-symbol-suffix', type: 'string', value: 'auto',\n        description: 'BLAS and LAPACK symbol suffix to use, if any')\noption('mkl-threading', type: 'string', value: 'auto',\n        description: 'MKL threading method, one of: `seq`, `iomp`, `gomp`, `tbb`')\noption('disable-svml', type: 'boolean', value: false,\n        description: 'Disable building against SVML')\noption('disable-highway', type: 'boolean', value: false,\n        description: 'Disables SIMD-optimized operations related to Google Highway')\noption('disable-intel-sort', type: 'boolean', value: false,\n        description: 'Disables SIMD-optimized operations related to Intel x86-simd-sort')\noption('disable-threading', type: 'boolean', value: false,\n        description: 'Disable threading support (see `NPY_ALLOW_THREADS` docs)')\noption('disable-optimization', type: 'boolean', value: false,\n        description: 'Disable CPU optimized code (dispatch,simd,unroll...)')\noption('cpu-baseline', type: 'string', value: 'min',\n        description: 'Minimal set of required CPU features')\noption('cpu-dispatch', type: 'string', value: 'max -xop -fma4',\n        description: 'Dispatched set of additional CPU features')\noption('test-simd', type: 'array',\n        value: [\n          'BASELINE', 'SSE2', 'SSE42', 'XOP', 'FMA4',\n          'AVX2', 'FMA3', 'AVX2,FMA3', 'AVX512F', 'AVX512_SKX',\n          'VSX', 'VSX2', 'VSX3', 'VSX4',\n          'NEON', 'ASIMD',\n          'VX', 'VXE', 'VXE2',\n          'LSX',\n        ],\n        description: 'Specify a list of CPU features to be tested against NumPy SIMD interface')\noption('test-simd-args', type: 'string', value: '',\n        description: 'Extra args to be passed to the `_simd` module that is used for testing the NumPy SIMD interface')\n"
        },
        {
          "name": "meson_cpu",
          "type": "tree",
          "content": null
        },
        {
          "name": "numpy",
          "type": "tree",
          "content": null
        },
        {
          "name": "pavement.py",
          "type": "blob",
          "size": 4.9951171875,
          "content": "r\"\"\"\nThis paver file is intended to help with the release process as much as\npossible. It relies on virtualenv to generate 'bootstrap' environments as\nindependent from the user system as possible (e.g. to make sure the sphinx doc\nis built against the built numpy, not an installed one).\n\nBuilding changelog + notes\n==========================\n\nAssumes you have git and the binaries/tarballs in installers/::\n\n    paver write_release\n    paver write_note\n\nThis automatically put the checksum into README.rst, and writes the Changelog.\n\nTODO\n====\n    - the script is messy, lots of global variables\n    - make it more easily customizable (through command line args)\n    - missing targets: install & test, sdist test, debian packaging\n    - fix bdist_mpkg: we build the same source twice -> how to make sure we use\n      the same underlying python for egg install in venv and for bdist_mpkg\n\"\"\"\nimport os\nimport hashlib\nimport textwrap\n\n# The paver package needs to be installed to run tasks\nimport paver\nfrom paver.easy import Bunch, options, task, sh\n\n\n#-----------------------------------\n# Things to be changed for a release\n#-----------------------------------\n\n# Path to the release notes\nRELEASE_NOTES = 'doc/source/release/2.3.0-notes.rst'\n\n\n#-------------------------------------------------------\n# Hardcoded build/install dirs, virtualenv options, etc.\n#-------------------------------------------------------\n\n# Where to put the release installers\noptions(installers=Bunch(releasedir=\"release\",\n                         installersdir=os.path.join(\"release\", \"installers\")),)\n\n\n#-------------\n# README stuff\n#-------------\n\ndef _compute_hash(idirs, hashfunc):\n    \"\"\"Hash files using given hashfunc.\n\n    Parameters\n    ----------\n    idirs : directory path\n        Directory containing files to be hashed.\n    hashfunc : hash function\n        Function to be used to hash the files.\n\n    \"\"\"\n    released = paver.path.path(idirs).listdir()\n    checksums = []\n    for fpath in sorted(released):\n        with open(fpath, 'rb') as fin:\n            fhash = hashfunc(fin.read())\n            checksums.append(\n                '%s  %s' % (fhash.hexdigest(), os.path.basename(fpath)))\n    return checksums\n\n\ndef compute_md5(idirs):\n    \"\"\"Compute md5 hash of files in idirs.\n\n    Parameters\n    ----------\n    idirs : directory path\n        Directory containing files to be hashed.\n\n    \"\"\"\n    return _compute_hash(idirs, hashlib.md5)\n\n\ndef compute_sha256(idirs):\n    \"\"\"Compute sha256 hash of files in idirs.\n\n    Parameters\n    ----------\n    idirs : directory path\n        Directory containing files to be hashed.\n\n    \"\"\"\n    # better checksum so gpg signed README.rst containing the sums can be used\n    # to verify the binaries instead of signing all binaries\n    return _compute_hash(idirs, hashlib.sha256)\n\n\ndef write_release_task(options, filename='README'):\n    \"\"\"Append hashes of release files to release notes.\n\n    This appends file hashes to the release notes and creates\n    four README files of the result in various formats:\n\n    - README.rst\n    - README.rst.gpg\n    - README.md\n    - README.md.gpg\n\n    The md file are created using `pandoc` so that the links are\n    properly updated. The gpg files are kept separate, so that\n    the unsigned files may be edited before signing if needed.\n\n    Parameters\n    ----------\n    options :\n        Set by ``task`` decorator.\n    filename : str\n        Filename of the modified notes. The file is written\n        in the release directory.\n\n    \"\"\"\n    idirs = options.installers.installersdir\n    notes = paver.path.path(RELEASE_NOTES)\n    rst_readme = paver.path.path(filename + '.rst')\n    md_readme = paver.path.path(filename + '.md')\n\n    # append hashes\n    with open(rst_readme, 'w') as freadme:\n        with open(notes) as fnotes:\n            freadme.write(fnotes.read())\n\n        freadme.writelines(textwrap.dedent(\n            \"\"\"\n            Checksums\n            =========\n\n            MD5\n            ---\n            ::\n\n            \"\"\"))\n        freadme.writelines([f'    {c}\\n' for c in compute_md5(idirs)])\n\n        freadme.writelines(textwrap.dedent(\n            \"\"\"\n            SHA256\n            ------\n            ::\n\n            \"\"\"))\n        freadme.writelines([f'    {c}\\n' for c in compute_sha256(idirs)])\n\n    # generate md file using pandoc before signing\n    sh(f\"pandoc -s -o {md_readme} {rst_readme}\")\n\n    # Sign files\n    if hasattr(options, 'gpg_key'):\n        cmd = f'gpg --clearsign --armor --default_key {options.gpg_key}'\n    else:\n        cmd = 'gpg --clearsign --armor'\n\n    sh(cmd + f' --output {rst_readme}.gpg {rst_readme}')\n    sh(cmd + f' --output {md_readme}.gpg {md_readme}')\n\n\n@task\ndef write_release(options):\n    \"\"\"Write the README files.\n\n    Two README files are generated from the release notes, one in ``rst``\n    markup for the general release, the other in ``md`` markup for the github\n    release notes.\n\n    Parameters\n    ----------\n    options :\n        Set by ``task`` decorator.\n\n    \"\"\"\n    rdir = options.installers.releasedir\n    write_release_task(options, os.path.join(rdir, 'README'))\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 7.080078125,
          "content": "[build-system]\nbuild-backend = \"mesonpy\"\nrequires = [\n    \"meson-python>=0.15.0\",\n    \"Cython>=3.0.6\",  # keep in sync with version check in meson.build\n]\n\n[project]\nname = \"numpy\"\nversion = \"2.3.0.dev0\"\n# TODO: add `license-files` once PEP 639 is accepted (see meson-python#88)\nlicense = {file = \"LICENSE.txt\"}\n\ndescription = \"Fundamental package for array computing in Python\"\nauthors = [{name = \"Travis E. Oliphant et al.\"}]\nmaintainers = [\n    {name = \"NumPy Developers\", email=\"numpy-discussion@python.org\"},\n]\nrequires-python = \">=3.11\"\nreadme = \"README.md\"\nclassifiers = [\n    'Development Status :: 5 - Production/Stable',\n    'Intended Audience :: Science/Research',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: BSD License',\n    'Programming Language :: C',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.11',\n    'Programming Language :: Python :: 3.12',\n    'Programming Language :: Python :: 3.13',\n    'Programming Language :: Python :: 3 :: Only',\n    'Programming Language :: Python :: Implementation :: CPython',\n    'Topic :: Software Development',\n    'Topic :: Scientific/Engineering',\n    'Typing :: Typed',\n    'Operating System :: Microsoft :: Windows',\n    'Operating System :: POSIX',\n    'Operating System :: Unix',\n    'Operating System :: MacOS',\n]\n\n[project.scripts]\nf2py = 'numpy.f2py.f2py2e:main'\nnumpy-config = 'numpy._configtool:main'\n\n[project.entry-points.array_api]\nnumpy = 'numpy'\n\n[project.entry-points.pyinstaller40]\nhook-dirs = 'numpy:_pyinstaller_hooks_dir'\n\n[project.urls]\nhomepage = \"https://numpy.org\"\ndocumentation = \"https://numpy.org/doc/\"\nsource = \"https://github.com/numpy/numpy\"\ndownload = \"https://pypi.org/project/numpy/#files\"\ntracker = \"https://github.com/numpy/numpy/issues\"\n\"release notes\" = \"https://numpy.org/doc/stable/release\"\n\n[tool.towncrier]\n    single_file = false\n    filename = \"doc/source/release/notes-towncrier.rst\"\n    directory = \"doc/release/upcoming_changes/\"\n    issue_format = \"`gh-{issue} <https://github.com/numpy/numpy/pull/{issue}>`__\"\n    template = \"doc/release/upcoming_changes/template.rst\"\n    underlines = \"~=\"\n    all_bullets = false\n\n\n    [[tool.towncrier.type]]\n        directory = \"highlight\"\n        name = \"Highlights\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"new_function\"\n        name = \"New functions\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"python_removal\"\n        name = \"NumPy 2.0 Python API removals\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"deprecation\"\n        name = \"Deprecations\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"future\"\n        name = \"Future Changes\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"expired\"\n        name = \"Expired deprecations\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"compatibility\"\n        name = \"Compatibility notes\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"c_api\"\n        name = \"C API changes\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"c_api_removal\"\n        name = \"NumPy 2.0 C API removals\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"new_feature\"\n        name = \"New Features\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"improvement\"\n        name = \"Improvements\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"performance\"\n        name = \"Performance improvements and changes\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"change\"\n        name = \"Changes\"\n        showcontent = true\n\n\n[tool.cibuildwheel]\n# Note: the below skip command doesn't do much currently, the platforms to\n# build wheels for in CI are controlled in `.github/workflows/wheels.yml` and\n# `tools/ci/cirrus_wheels.yml`.\nbuild-frontend = \"build\"\nskip = \"cp36-* cp37-* cp-38* pp37-* *-manylinux_i686 *_ppc64le *_s390x *_universal2\"\nbefore-build = \"bash {project}/tools/wheels/cibw_before_build.sh {project}\"\n# The build will use openblas64 everywhere, except on arm64 macOS >=14.0 (uses Accelerate)\nconfig-settings = \"setup-args=-Duse-ilp64=true setup-args=-Dallow-noblas=false build-dir=build\"\nbefore-test = \"pip install -r {project}/requirements/test_requirements.txt\"\ntest-command = \"bash {project}/tools/wheels/cibw_test_command.sh {project}\"\n\n[tool.cibuildwheel.linux]\nmanylinux-x86_64-image = \"manylinux2014\"\nmanylinux-aarch64-image = \"manylinux2014\"\nmusllinux-x86_64-image = \"musllinux_1_2\"\n\n[tool.cibuildwheel.pyodide]\nconfig-settings = \"build-dir=build setup-args=--cross-file=$PWD/tools/ci/emscripten/emscripten.meson.cross setup-args=-Dblas=none setup-args=-Dlapack=none\"\n\n[tool.cibuildwheel.linux.environment]\n# RUNNER_OS is a GitHub Actions specific env var; define it here so it works on Cirrus CI too\nRUNNER_OS=\"Linux\"\n# /project will be the $PWD equivalent inside the docker used to build the wheel\nPKG_CONFIG_PATH=\"/project/.openblas\"\nLD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/project/.openblas/lib\"\n\n[tool.cibuildwheel.macos]\n# universal2 wheels are not supported (see gh-21233), use `delocate-fuse` if you need them\n# note that universal2 wheels are not built, they're listed in the tool.cibuildwheel.skip\n# section\n# Not clear why the DYLD_LIBRARY_PATH is not passed through from the environment\nrepair-wheel-command = [\n  \"export DYLD_LIBRARY_PATH=$PWD/.openblas/lib\",\n  \"echo DYLD_LIBRARY_PATH $DYLD_LIBRARY_PATH\",\n  \"delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}\",\n]\n\n[tool.cibuildwheel.windows]\n# This does not work, use CIBW_ENVIRONMENT_WINDOWS\nenvironment = {PKG_CONFIG_PATH=\"./.openblas\"}\nconfig-settings = \"setup-args=--vsenv setup-args=-Dallow-noblas=false build-dir=build\"\nrepair-wheel-command = \"bash -el ./tools/wheels/repair_windows.sh {wheel} {dest_dir}\"\n\n[[tool.cibuildwheel.overrides]]\nselect = \"*-win32\"\nconfig-settings = \"setup-args=--vsenv setup-args=-Dallow-noblas=true build-dir=build\"\nrepair-wheel-command = \"\"\n\n[[tool.cibuildwheel.overrides]]\nselect = \"*pyodide*\"\nbefore-test = \"pip install -r {project}/requirements/emscripten_test_requirements.txt\"\n# Pyodide ensures that the wheels are already repaired by auditwheel-emscripten\nrepair-wheel-command = \"\"\ntest-command = \"python -m pytest --pyargs numpy -m 'not slow'\"\n\n[tool.meson-python]\nmeson = 'vendored-meson/meson/meson.py'\n\n[tool.meson-python.args]\ninstall = ['--tags=runtime,python-runtime,tests,devel']\n\n[tool.spin]\npackage = 'numpy'\n\n[tool.spin.meson]\ncli = 'vendored-meson/meson/meson.py'\n\n[tool.spin.commands]\n\"Build\" = [\n  \".spin/cmds.py:build\",\n  \".spin/cmds.py:test\",\n  \".spin/cmds.py:mypy\",\n  \".spin/cmds.py:config_openblas\",\n  \".spin/cmds.py:lint\",\n]\n\"Environments\" = [\n  \"spin.cmds.meson.run\",\n  \".spin/cmds.py:ipython\",\n  \".spin/cmds.py:python\",\n  \"spin.cmds.meson.gdb\",\n  \"spin.cmds.meson.lldb\"\n]\n\"Documentation\" = [\n  \".spin/cmds.py:docs\",\n  \".spin/cmds.py:changelog\",\n  \".spin/cmds.py:notes\",\n  \".spin/cmds.py:check_docs\",\n  \".spin/cmds.py:check_tutorials\",\n]\n\"Metrics\" = [\".spin/cmds.py:bench\"]\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 1.306640625,
          "content": "[pytest]\naddopts = -l\nnorecursedirs = doc tools numpy/linalg/lapack_lite numpy/_core/code_generators numpy/_core/src/common/pythoncapi-compat\ndoctest_optionflags = NORMALIZE_WHITESPACE ELLIPSIS ALLOW_UNICODE ALLOW_BYTES\njunit_family=xunit2\n\nfilterwarnings =\n    error\n# Filter out annoying import messages.\n    ignore:Not importing directory\n    ignore:numpy.dtype size changed\n    ignore:numpy.ufunc size changed\n    ignore::UserWarning:cpuinfo,\n    ignore: divide by zero encountered in log\n    ignore: invalid value encountered in log\n# Matrix PendingDeprecationWarning.\n    ignore:the matrix subclass is not\n    ignore:Importing from numpy.matlib is\n# pytest warning when using PYTHONOPTIMIZE\n    ignore:assertions not in test modules or plugins:pytest.PytestConfigWarning\n# TODO: remove below when array_api user warning is removed\n    ignore:The numpy.array_api submodule is still experimental. See NEP 47.\n# ignore matplotlib headless warning for pyplot\n    ignore:Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.:UserWarning\n# Ignore DeprecationWarnings from distutils\n    ignore::DeprecationWarning:.*distutils\n    ignore:\\n\\n  `numpy.distutils`:DeprecationWarning\n# Ignore DeprecationWarning from typing.mypy_plugin\n    ignore:`numpy.typing.mypy_plugin` is deprecated:DeprecationWarning\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "ruff.toml",
          "type": "blob",
          "size": 0.751953125,
          "content": "exclude = [\n    \"numpy/__config__.py\",\n    \"numpy/distutils\",\n    \"numpy/typing/_char_codes.py\",\n    \"numpy/typing/tests/data\",\n    \"spin/cmds.py\",\n    # Submodules.\n    \"doc/source/_static/scipy-mathjax\",\n    \"vendored-meson/meson\",\n    \"numpy/fft/pocketfft\",\n    \"numpy/_core/src/umath/svml\",\n    \"numpy/_core/src/npysort/x86-simd-sort\",\n    \"numpy/_core/src/highway\",\n    \"numpy/_core/src/common/pythoncapi-compat\",\n]\n\n[lint]\npreview = true\nextend-select = [ \"E\" ]\nignore = [\n    \"F\",     # TODO: enable Pyflakes rules\n    \"E241\",\n    \"E251\",\n    \"E265\",\n    \"E266\",\n    \"E302\",\n    \"E402\",\n    \"E501\",  # TODO: Line too long\n    \"E712\",\n    \"E721\",\n    \"E731\",\n    \"E741\",\n    \"W291\",\n    \"W293\",\n    \"W391\",\n]\n\n[lint.per-file-ignores]\n\"test*.py\" = [\"E201\", \"E714\"]\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendored-meson",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}