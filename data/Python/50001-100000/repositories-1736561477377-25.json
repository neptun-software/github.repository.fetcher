{
  "metadata": {
    "timestamp": 1736561477377,
    "page": 25,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "scikit-learn/scikit-learn",
      "stars": 60725,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".binder",
          "type": "tree",
          "content": null
        },
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".cirrus.star",
          "type": "blob",
          "size": 1.408203125,
          "content": "# This script uses starlark for configuring when a cirrus CI job runs:\n# https://cirrus-ci.org/guide/programming-tasks/\n\nload(\"cirrus\", \"env\", \"fs\", \"http\")\n\ndef main(ctx):\n    # Only run for scikit-learn/scikit-learn. For debugging on a fork, you can\n    # comment out the following condition.\n    if env.get(\"CIRRUS_REPO_FULL_NAME\") != \"scikit-learn/scikit-learn\":\n        return []\n\n    arm_wheel_yaml = \"build_tools/cirrus/arm_wheel.yml\"\n    arm_tests_yaml = \"build_tools/cirrus/arm_tests.yml\"\n\n    # Nightly jobs always run\n    if env.get(\"CIRRUS_CRON\", \"\") == \"nightly\":\n        return fs.read(arm_wheel_yaml) + fs.read(arm_tests_yaml)\n\n    # Get commit message for event. We can not use `git` here because there is\n    # no command line access in starlark. Thus we need to query the GitHub API\n    # for the commit message. Note that `CIRRUS_CHANGE_MESSAGE` can not be used\n    # because it is set to the PR's title and not the latest commit message.\n    SHA = env.get(\"CIRRUS_CHANGE_IN_REPO\")\n    REPO = env.get(\"CIRRUS_REPO_FULL_NAME\")\n    url = \"https://api.github.com/repos/\" + REPO + \"/git/commits/\" + SHA\n    response = http.get(url).json()\n    commit_msg = response[\"message\"]\n\n    jobs_to_run = \"\"\n\n    if \"[cd build]\" in commit_msg or \"[cd build cirrus]\" in commit_msg:\n        jobs_to_run += fs.read(arm_wheel_yaml)\n\n    if \"[cirrus arm]\" in commit_msg:\n        jobs_to_run += fs.read(arm_tests_yaml)\n\n    return jobs_to_run\n"
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.9599609375,
          "content": "comment: false\n\ncoverage:\n  status:\n    project:\n      default:\n        # Commits pushed to main should not make the overall\n        # project coverage decrease by more than 1%:\n        target: auto\n        threshold: 1%\n    patch:\n      default:\n        # Be tolerant on slight code coverage diff on PRs to limit\n        # noisy red coverage status on github PRs.\n        # Note: The coverage stats are still uploaded\n        # to codecov so that PR reviewers can see uncovered lines\n        target: auto\n        threshold: 1%\n\ncodecov:\n  notify:\n    # Prevent coverage status to upload multiple times for parallel and long\n    # running CI pipelines. This configuration is particularly useful on PRs\n    # to avoid confusion. Note that this value is set to the number of Azure\n    # Pipeline jobs uploading coverage reports.\n    after_n_builds: 6\n\nignore:\n- \"sklearn/externals\"\n- \"sklearn/_build_utils\"\n- \"sklearn/__check_build\"\n- \"sklearn/_min_dependencies.py\"\n- \"**/conftest.py\"\n"
        },
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.3359375,
          "content": "[run]\n# Use statement coverage rather than branch coverage because\n# COVERAGE_CORE=sysmon can make branch coverage slower rather than faster. See\n# https://github.com/nedbat/coveragepy/issues/1812 for more details.\nbranch = False\nsource = sklearn\nparallel = True\nomit =\n    */sklearn/externals/*\n    */sklearn/_build_utils/*\n    */benchmarks/*\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 1.052734375,
          "content": "# Since git version 2.23, git-blame has a feature to ignore\n# certain commits.\n#\n# This file contains a list of commits that are not likely what\n# you are looking for in `git blame`. You can set this file as\n# a default ignore file for blame by running the following\n# command.\n#\n# $ git config blame.ignoreRevsFile .git-blame-ignore-revs\n\n# PR 18948: Migrate code style to Black\n82df48934eba1df9a1ed3be98aaace8eada59e6e\n\n# PR 20294: Use target_version >= 3.7 in Black\n351ace7935a4ea685171cc6d174890f08facd561\n\n# PR 20412: Use experimental_string_processing=true in Black\n3ae7c7615343bbd36acece57825d8b0d70fd9da4\n\n# PR 20502: Runs Black on examples\n70a185ae59b4362633d18b0d0083abb1b6f7370c\n\n# PR 22474: Update to Black 22.1.0\n1fc86b6aacd89da44a3b4e8abf7c3e2ba4336ffe\n\n# PR 22983: Update to Black 22.3.0\nd4aad64b1eb2e42e76f49db2ccfbe4b4660d092b\n\n# PR 26110: Update black to 23.3.0\n893d5accaf9d16f447645e704f85a216187564f7\n\n# PR 26649: Add isort and ruff rules\n42173fdb34b5aded79664e045cada719dfbe39dc\n\n# PR #28802: Update black to 24.3.0\nc4c546355667b070edd5c892b206aa4a97af9a0b\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1533203125,
          "content": ".* export-ignore\nasv_benchmarks export-ignore\nazure-pipelines.yml export-ignore\nbenchmarks export-ignore\nbuild_tools export-ignore\nmaint_tools export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.2685546875,
          "content": "*.pyc*\n*.so\n*.pyd\n*~\n.#*\n*.lprof\n*.swp\n*.swo\n.DS_Store\nbuild\nsklearn/datasets/__config__.py\nsklearn/**/*.html\n\ndist/\nMANIFEST\ndoc/sg_execution_times.rst\ndoc/_build/\ndoc/api/*.rst\ndoc/auto_examples/\ndoc/css/*\n!doc/css/.gitkeep\ndoc/modules/generated/\ndoc/datasets/generated/\ndoc/developers/maintainer.rst\ndoc/index.rst\ndoc/min_dependency_table.rst\ndoc/min_dependency_substitutions.rst\n# release notes generated by towncrier\ndoc/whats_new/notes-towncrier.rst\n\n*.pdf\npip-log.txt\nscikit_learn.egg-info/\n.coverage\ncoverage\n*.py,cover\n.tags*\ntags\ncovtype.data.gz\n20news-18828/\n20news-18828.tar.gz\ncoverages.zip\nsamples.zip\ndoc/coverages.zip\ndoc/samples.zip\ncoverages\nsamples\ndoc/coverages\ndoc/samples\n*.prof\n.tox/\n.coverage\npip-wheel-metadata\n\nlfw_preprocessed/\nnips2010_pdf/\n\n*.nt.bz2\n*.tar.gz\n*.tgz\n\nexamples/cluster/joblib\nreuters/\nbenchmarks/bench_covertype_data/\nbenchmarks/HIGGS.csv.gz\nbench_pca_solvers.csv\n\n*.prefs\n.pydevproject\n.idea\n.vscode\n# used by pyenv\n.python-version\n\n*.c\n*.cpp\n\n!/**/src/**/*.c\n!/**/src/**/*.cpp\n*.sln\n*.pyproj\n\n# Used by py.test\n.cache\n.pytest_cache/\n_configtest.o.d\n\n# Used by mypy\n.mypy_cache/\n\n# virtualenv from advanced installation guide\nsklearn-env/\n\n# Default JupyterLite content\njupyterlite_contents\n\n# file recognised by vscode IDEs containing env variables\n.env\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 7.0927734375,
          "content": "Alexandre Gramfort <alexandre.gramfort@inria.fr> <alexandre.gramfort@gmail.com>\nAlexandre Gramfort <alexandre.gramfort@inria.fr> <alexandre.gramfort@m4x.org>\nAlexandre Gramfort <alexandre.gramfort@inria.fr> <gramfort@localhost.(none)>\nAlexandre Saint <snt.alex@gmail.com>\nAndreas Mueller <amueller@ais.uni-bonn.de>\nAndreas Mueller <amueller@ais.uni-bonn.de> <Andreas Mueller@MSRC-3645211.europe.corp.microsoft.com>\nAndreas Mueller <amueller@ais.uni-bonn.de> <amueller@ais.uni-bonn.de>\nAndreas Mueller <amueller@ais.uni-bonn.de> <amueller@templateimage.ista.local>\nAndreas Mueller <amueller@ais.uni-bonn.de> <andy@marvin>\nAndreas Mueller <amueller@ais.uni-bonn.de> <t3kcit@gmail.com>\nArnaud Joly <a.joly@ulg.ac.be>\nArnaud Joly <a.joly@ulg.ac.be> <arnaud.joly@yahoo.com>\nArnaud Joly <a.joly@ulg.ac.be> <arnaud.v.joly@gmail.com>\nAnne-Laure Fouque <afouque@is208050.(none)> <af216607@is206635.intra.cea.fr>\nAriel Rokem <arokem@berkeley.edu> arokem <arokem@berkeley.edu>\nBala Subrahmanyam Varanasi <balu@agiliq.com>\nBertrand Thirion <bertrand.thirion@inria.fr>\nBrandyn A. White <bwhite@dappervision.com>\nBrian Cheung <bcheung5@gmail.com> <bcheung@rocky.rfmh.org>\nBrian Cheung <bcheung5@gmail.com> <briancheung>\nBrian Cheung <bcheung5@gmail.com> <cow@rusty.(none)>\nBrian Holt <bh00038@cvplws63.eps.surrey.ac.uk> <bdholt1@gmail.com>\nChristian Osendorfer <osendorf@gmail.com>\nClay Woolam <clay@woolam.org>\nDanny Sullivan <dsullivan7@hotmail.com> <dbsullivan23@gmail.com>\nDenis Engemann <denis-alexander.engemann@inria.fr>\nDenis Engemann <denis-alexander.engemann@inria.fr> <denis.engemann@gmail.com>\nDenis Engemann <denis-alexander.engemann@inria.fr> <dengemann@Deniss-MacBook-Pro.local>\nDenis Engemann <denis-alexander.engemann@inria.fr> dengemann <denis.engemann@gmail.com>\nDiego Molla <dmollaaliod@gmail.com> <diego@diego-desktop.(none)>\nDraXus <draxus@gmail.com> draxus <draxus@hammer.ugr>\nEdouard DUCHESNAY <ed203246@is206877.intra.cea.fr> <duchesnay@is143433.(none)>\nEdouard DUCHESNAY <ed203246@is206877.intra.cea.fr> <edouard.duchesnay@gmail.com>\nEdouard DUCHESNAY <ed203246@is206877.intra.cea.fr> <edouard@is2206219.(none)>\nEmmanuelle Gouillart <emmanuelle.gouillart@nsup.org>\nEmmanuelle Gouillart <emmanuelle.gouillart@nsup.org> <emma@aleph.(none)>\nEustache Diemert <eustache@diemert.fr>\nFabian Pedregosa <fabian.pedregosa@inria.fr>\nFabian Pedregosa <fabian.pedregosa@inria.fr> <fabian@fseoane.net>\nFabian Pedregosa <fabian.pedregosa@inria.fr> <f@bianp.net>\nFederico Vaggi <vaggi.federico@gmail.com>\nFederico Vaggi <vaggi.federico@gmail.com> <vaggi.federico@GMAIL.COM>\nGael Varoquaux <gael.varoquaux@inria.fr>\nGael Varoquaux <gael.varoquaux@inria.fr> <gael.varoquaux@normalesup.org>\nGael Varoquaux <gael.varoquaux@inria.fr> <varoquau@normalesup.org>\nGiorgio Patrini <giorgio.patrini@nicta.com.au>\nGiorgio Patrini <giorgio.patrini@nicta.com.au> <giorgiop@users.noreply.github.com>\nGilles Louppe <g.louppe@gmail.com> <g.louppe@ulg.ac.be>\nHamzeh Alsalhi <93hamsal@gmail.com>\nHarikrishnan S <hihari777@gmail.com>\nHendrik Heuer <hendrikheuer@gmail.com>\nHenry Lin <hlin117@gmail.com>\nHrishikesh Huilgolkar <hrishikesh911@gmail.com> <hrishikesh@QE-IND-WKS007.(none)>\nHugo Bowne-Anderson <hugobowne@gmail.com>\nImaculate <imaculatemosha@yahoo.com>\nImmanuel Bayer <mane.desk@gmail.com>\nJacob Schreiber <jmschreiber91@gmail.com>\nJacob Schreiber <jmschreiber91@gmail.com> <jmschr@cs.washington.edu>\nJake VanderPlas <vanderplas@astro.washington.edu> <jakevdp@yahoo.com>\nJake VanderPlas <vanderplas@astro.washington.edu> <jakevdp@gmail.com>\nJake VanderPlas <vanderplas@astro.washington.edu> <vanderplas@astro.washington.edu>\nJames Bergstra <james.bergstra@gmail.com>\nJaques Grobler <jaques.grobler@inria.fr> <jaquesgrobler@gmail.com>\nJan Schlüter <scikit-learn@jan-schlueter.de>\nJean Kossaifi <jean.kossaifi@gmail.com>\nJean Kossaifi <jean.kossaifi@gmail.com> <jkossaifi@is208616.intra.cea.fr>\nJean Kossaifi <jean.kossaifi@gmail.com> <kossaifi@is208616.intra.cea.fr>\nJoel Nothman <joel.nothman@gmail.com> <jnothman@student.usyd.edu.au>\nKyle Kastner <kastnerkyle@gmail.com>\nLars Buitinck <L.J.Buitinck@uva.nl> <Lars@.(none)>\nLars Buitinck <L.J.Buitinck@uva.nl> <l.j.buitinck@uva.nl>\nLars Buitinck <L.J.Buitinck@uva.nl> <larsmans@gmail.com>\nLars Buitinck <L.J.Buitinck@uva.nl> <larsmans@users.noreply.github.com>\nLars Buitinck <L.J.Buitinck@uva.nl> <l.buitinck@esciencecenter.nl>\nLoic Esteve <loic.esteve@ymail.com>\nManoj Kumar <manojkumarsivaraj334@gmail.com>\nMatthieu Perrot <matthieu.perrot@cea.fr> <revilyo@earth.(none)>\nMaheshakya Wijewardena <maheshakya@wso2.com>\nMichael Bommarito <michael@bommaritollc.com>\nMichael Eickenberg <michael.eickenberg@gmail.com>\nMichael Eickenberg <michael.eickenberg@gmail.com> <me232320@is146139.intra.cea.fr>\nSamuel Charron <samuel.charron@data-publica.com> <samuel.charron@gmail.com>\nSergio Medina <sergio.medina@inria.fr> <smedina@work4labs.com>\nNelle Varoquaux <nelle.varoquaux@gmail.com>\nNelle Varoquaux <nelle.varoquaux@gmail.com> <nelle@phgroup.com>\nNelle Varoquaux <nelle.varoquaux@gmail.com> <nelle@varoquaux@gmail.com>\nNicolas Goix <goix.nicolas@gmail.com>\nNicolas Pinto <pinto@alum.mit.edu> <pinto@mit.edu>\nNoel Dawe <Noel.Dawe@cern.ch> <noel.dawe@gmail.com>\nNoel Dawe <Noel.Dawe@cern.ch> <noel.dAwe@cern.ch>\nOlivier Grisel <olivier.grisel@ensta.org> <ogrisel@turingcarpet.(none)>\nOlivier Grisel <olivier.grisel@ensta.org> <olivier.grisel@ensta.org>\nOlivier Hervieu <olivier.hervieu@gmail.com> <olivier.hervieu@tinyclues.com>\nPaul Butler <paulgb@gmail.com>\nPeter Prettenhofer <peter.prettenhofer@gmail.com>\nRaghav RV <rvraghav93@gmail.com>\nRaghav RV <rvraghav93@gmail.com> <ragvrv@gmail.com>\nRobert Layton <robertlayton@gmail.com>\nRoman Sinayev <roman.sinayev@gmail.com>\nRoman Sinayev <roman.sinayev@gmail.com> <roman@y570.(none)>\nRonald Phlypo <Ronald.Phlypo@inria.fr>\nSatrajit Ghosh <satra@mit.edu> <satrajit.ghosh@gmail.com>\nSebastian Raschka <se.raschka@me.com>\nSebastian Raschka <mail@sebastianraschka.com> <se.raschka@me.com>\nShiqiao Du <lucidfrontier.45@gmail.com>\nShiqiao Du <lucidfrontier.45@gmail.com> <s.du@freebit.net>\nThomas Unterthiner <thomas.unterthiner@gmx.net>\nTim Sheerman-Chase <t.sheerman-chase@surrey.ac.uk> <ts00051@ts00051-desktop.(none)>\nVincent Dubourg <vincent.dubourg@gmail.com>\nVincent Dubourg <vincent.dubourg@gmail.com> <dubourg@PTlami14.(none)>\nVincent Michel <vincent.michel@inria.fr> <vincent.michel@logilab.fr>\nVincent Michel <vincent.michel@inria.fr> <vincent@axon.(none)>\nVincent Michel <vincent.michel@inria.fr> <vincent@vincent.org>\nVincent Michel <vincent.michel@inria.fr> <vm.michel@gmail.com>\nVincent Michel <vincent.michel@inria.fr> <vmic@crater2.logilab.fr>\nVincent Schut <schut@sarvision.nl> <vincent@TIMO.(none)>\nVirgile Fritsch <virgile.fritsch@gmail.com>\nVirgile Fritsch <virgile.fritsch@gmail.com> <virgile@virgile-Precision-M4400.(none)>\nVlad Niculae <vlad@vene.ro>\nWei Li <kuantkid@gmail.com>\nWei Li <kuantkid@gmail.com> <kuantkid+github@gmail.com>\nX006 <x006@x006-icsl.(none)> <x006@x006laptop.(none)>\nXinfan Meng <mxf3306@gmail.com> <mxf@chomsky.localdomain>\nYannick Schwartz <yannick.schwartz@inria.fr> <yannick.schwartz@cea.fr>\nYannick Schwartz <yannick.schwartz@inria.fr> <ys218403@is220245.(none)>\nYannick Schwartz <yannick.schwartz@inria.fr> <yannick.schwartz@gmail.com>\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.0810546875,
          "content": "repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.3.0\n    hooks:\n    -   id: check-yaml\n    -   id: end-of-file-fixer\n    -   id: trailing-whitespace\n-   repo: https://github.com/astral-sh/ruff-pre-commit\n    # Ruff version.\n    rev: v0.5.1\n    hooks:\n    -   id: ruff\n        args: [\"--fix\", \"--output-format=full\"]\n-   repo: https://github.com/psf/black\n    rev: 24.3.0\n    hooks:\n    -   id: black\n-   repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.9.0\n    hooks:\n     -  id: mypy\n        files: sklearn/\n        additional_dependencies: [pytest==6.2.4]\n-   repo: https://github.com/MarcoGorelli/cython-lint\n    rev: v0.15.0\n    hooks:\n    # TODO: add the double-quote-cython-strings hook when it's usability has improved:\n    # possibility to pass a directory and use it as a check instead of auto-formatter.\n    -   id: cython-lint\n-   repo: https://github.com/pre-commit/mirrors-prettier\n    rev: v2.7.1\n    hooks:\n    -   id: prettier\n        files: ^doc/scss/|^doc/js/scripts/\n        exclude: ^doc/js/scripts/vendor/\n        types_or: [\"scss\", \"javascript\"]\n"
        },
        {
          "name": ".spin",
          "type": "tree",
          "content": null
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 1.3408203125,
          "content": "cff-version: 1.2.0\ntitle: scikit-learn\ntype: software\nauthors:\n  - name: \"The scikit-learn developers\"\nmessage: \"If you use scikit-learn in a scientific publication, we would appreciate citations to the following paper:\"\npreferred-citation:\n  type: article\n  title: \"Scikit-learn: Machine Learning in Python\"\n  authors:\n  - family-names: \"Pedregosa\"\n    given-names: \"Fabian\"\n  - family-names: \"Varoquaux\"\n    given-names: \"Gaël\"\n  - family-names: \"Gramfort\"\n    given-names: \"Alexandre\"\n  - family-names: \"Michel\"\n    given-names: \"Vincent\"\n  - family-names: \"Thirion\"\n    given-names: \"Bertrand\"\n  - family-names: \"Grisel\"\n    given-names: \"Olivier\"\n  - family-names: \"Blondel\"\n    given-names: \"Mathieu\"\n  - family-names: \"Prettenhofer\"\n    given-names: \"Peter\"\n  - family-names: \"Weiss\"\n    given-names: \"Ron\"\n  - family-names: \"Dubourg\"\n    given-names: \"Vincent\"\n  - family-names: \"Vanderplas\"\n    given-names: \"Jake\"\n  - family-names: \"Passos\"\n    given-names: \"Alexandre\"\n  - family-names: \"Cournapeau\"\n    given-names: \"David\"\n  - family-names: \"Brucher\"\n    given-names: \"Matthieu\"\n  - family-names: \"Perrot\"\n    given-names: \"Matthieu\"\n  - family-names: \"Duchesnay\"\n    given-names: \"Édouard\"\n  journal: \"Journal of Machine Learning Research\"\n  volume: 12\n  start: 2825\n  end: 2830\n  year: 2011\n  url: \"https://jmlr.csail.mit.edu/papers/v12/pedregosa11a.html\"\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.6298828125,
          "content": "# Code of Conduct\n\nWe are a community based on openness, as well as friendly and didactic discussions.\n\nWe aspire to treat everybody equally, and value their contributions.\n\nDecisions are made based on technical merit and consensus.\n\nCode is not the only way to help the project. Reviewing pull requests,\nanswering questions to help others on mailing lists or issues, organizing and\nteaching tutorials, working on the website, improving the documentation, are\nall priceless contributions.\n\nWe abide by the principles of openness, respect, and consideration of others of\nthe Python Software Foundation: https://www.python.org/psf/codeofconduct/\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.0625,
          "content": "\nContributing to scikit-learn\n============================\n\nThe latest contributing guide is available in the repository at\n`doc/developers/contributing.rst`, or online at:\n\nhttps://scikit-learn.org/dev/developers/contributing.html\n\nThere are many ways to contribute to scikit-learn, with the most common ones\nbeing contribution of code or documentation to the project. Improving the\ndocumentation is no less important than improving the library itself. If you\nfind a typo in the documentation, or have made improvements, do not hesitate to\nsend an email to the mailing list or preferably submit a GitHub pull request.\nDocumentation can be found under the\n[doc/](https://github.com/scikit-learn/scikit-learn/tree/main/doc) directory.\n\nBut there are many other ways to help. In particular answering queries on the\n[issue tracker](https://github.com/scikit-learn/scikit-learn/issues),\ninvestigating bugs, and [reviewing other developers' pull\nrequests](https://scikit-learn.org/dev/developers/contributing.html#code-review-guidelines)\nare very valuable contributions that decrease the burden on the project\nmaintainers.\n\nAnother way to contribute is to report issues you're facing, and give a \"thumbs\nup\" on issues that others reported and that are relevant to you. It also helps\nus if you spread the word: reference the project from your blog and articles,\nlink to it from your website, or simply star it in GitHub to say \"I use it\".\n\nQuick links\n-----------\n\n* [Submitting a bug report or feature request](https://scikit-learn.org/dev/developers/contributing.html#submitting-a-bug-report-or-a-feature-request)\n* [Contributing code](https://scikit-learn.org/dev/developers/contributing.html#contributing-code)\n* [Coding guidelines](https://scikit-learn.org/dev/developers/develop.html#coding-guidelines)\n* [Tips to read current code](https://scikit-learn.org/dev/developers/contributing.html#reading-the-existing-code-base)\n\nCode of Conduct\n---------------\n\nWe abide by the principles of openness, respect, and consideration of others\nof the Python Software Foundation: https://www.python.org/psf/codeofconduct/.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.49609375,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2007-2024 The scikit-learn developers.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.9345703125,
          "content": "# simple makefile to simplify repetitive build env management tasks under posix\n\nPYTHON ?= python\nDEFAULT_MESON_BUILD_DIR = build/cp$(shell python -c 'import sys; print(f\"{sys.version_info.major}{sys.version_info.minor}\")' )\n\nall:\n\t@echo \"Please use 'make <target>' where <target> is one of\"\n\t@echo \"  dev                  build scikit-learn with Meson\"\n\t@echo \"  clean                clean scikit-learn Meson build. Very rarely needed,\"\n\t@echo \"                       since meson-python recompiles on import.\"\n\n.PHONY: all\n\ndev: dev-meson\n\ndev-meson:\n\tpip install --verbose --no-build-isolation --editable . --config-settings editable-verbose=true\n\nclean: clean-meson\n\nclean-meson:\n\tpip uninstall -y scikit-learn\n\t# It seems in some cases removing the folder avoids weird compilation\n\t# errors (e.g. when switching from numpy>=2 to numpy<2). For some\n\t# reason ninja clean -C $(DEFAULT_MESON_BUILD_DIR) is not\n\t# enough.\n\trm -rf $(DEFAULT_MESON_BUILD_DIR)\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 7.4814453125,
          "content": ".. -*- mode: rst -*-\n\n|Azure| |CirrusCI| |Codecov| |CircleCI| |Nightly wheels| |Black| |PythonVersion| |PyPi| |DOI| |Benchmark|\n\n.. |Azure| image:: https://dev.azure.com/scikit-learn/scikit-learn/_apis/build/status/scikit-learn.scikit-learn?branchName=main\n   :target: https://dev.azure.com/scikit-learn/scikit-learn/_build/latest?definitionId=1&branchName=main\n\n.. |CircleCI| image:: https://circleci.com/gh/scikit-learn/scikit-learn/tree/main.svg?style=shield\n   :target: https://circleci.com/gh/scikit-learn/scikit-learn\n\n.. |CirrusCI| image:: https://img.shields.io/cirrus/github/scikit-learn/scikit-learn/main?label=Cirrus%20CI\n   :target: https://cirrus-ci.com/github/scikit-learn/scikit-learn/main\n\n.. |Codecov| image:: https://codecov.io/gh/scikit-learn/scikit-learn/branch/main/graph/badge.svg?token=Pk8G9gg3y9\n   :target: https://codecov.io/gh/scikit-learn/scikit-learn\n\n.. |Nightly wheels| image:: https://github.com/scikit-learn/scikit-learn/workflows/Wheel%20builder/badge.svg?event=schedule\n   :target: https://github.com/scikit-learn/scikit-learn/actions?query=workflow%3A%22Wheel+builder%22+event%3Aschedule\n\n.. |PythonVersion| image:: https://img.shields.io/pypi/pyversions/scikit-learn.svg\n   :target: https://pypi.org/project/scikit-learn/\n\n.. |PyPi| image:: https://img.shields.io/pypi/v/scikit-learn\n   :target: https://pypi.org/project/scikit-learn\n\n.. |Black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n\n.. |DOI| image:: https://zenodo.org/badge/21369/scikit-learn/scikit-learn.svg\n   :target: https://zenodo.org/badge/latestdoi/21369/scikit-learn/scikit-learn\n\n.. |Benchmark| image:: https://img.shields.io/badge/Benchmarked%20by-asv-blue\n   :target: https://scikit-learn.org/scikit-learn-benchmarks\n\n.. |PythonMinVersion| replace:: 3.9\n.. |NumPyMinVersion| replace:: 1.19.5\n.. |SciPyMinVersion| replace:: 1.6.0\n.. |JoblibMinVersion| replace:: 1.2.0\n.. |ThreadpoolctlMinVersion| replace:: 3.1.0\n.. |MatplotlibMinVersion| replace:: 3.3.4\n.. |Scikit-ImageMinVersion| replace:: 0.17.2\n.. |PandasMinVersion| replace:: 1.2.0\n.. |SeabornMinVersion| replace:: 0.9.0\n.. |PytestMinVersion| replace:: 7.1.2\n.. |PlotlyMinVersion| replace:: 5.14.0\n\n.. image:: https://raw.githubusercontent.com/scikit-learn/scikit-learn/main/doc/logos/scikit-learn-logo.png\n  :target: https://scikit-learn.org/\n\n**scikit-learn** is a Python module for machine learning built on top of\nSciPy and is distributed under the 3-Clause BSD license.\n\nThe project was started in 2007 by David Cournapeau as a Google Summer\nof Code project, and since then many volunteers have contributed. See\nthe `About us <https://scikit-learn.org/dev/about.html#authors>`__ page\nfor a list of core contributors.\n\nIt is currently maintained by a team of volunteers.\n\nWebsite: https://scikit-learn.org\n\nInstallation\n------------\n\nDependencies\n~~~~~~~~~~~~\n\nscikit-learn requires:\n\n- Python (>= |PythonMinVersion|)\n- NumPy (>= |NumPyMinVersion|)\n- SciPy (>= |SciPyMinVersion|)\n- joblib (>= |JoblibMinVersion|)\n- threadpoolctl (>= |ThreadpoolctlMinVersion|)\n\n=======\n\n**Scikit-learn 0.20 was the last version to support Python 2.7 and Python 3.4.**\nscikit-learn 1.0 and later require Python 3.7 or newer.\nscikit-learn 1.1 and later require Python 3.8 or newer.\n\nScikit-learn plotting capabilities (i.e., functions start with ``plot_`` and\nclasses end with ``Display``) require Matplotlib (>= |MatplotlibMinVersion|).\nFor running the examples Matplotlib >= |MatplotlibMinVersion| is required.\nA few examples require scikit-image >= |Scikit-ImageMinVersion|, a few examples\nrequire pandas >= |PandasMinVersion|, some examples require seaborn >=\n|SeabornMinVersion| and plotly >= |PlotlyMinVersion|.\n\nUser installation\n~~~~~~~~~~~~~~~~~\n\nIf you already have a working installation of NumPy and SciPy,\nthe easiest way to install scikit-learn is using ``pip``::\n\n    pip install -U scikit-learn\n\nor ``conda``::\n\n    conda install -c conda-forge scikit-learn\n\nThe documentation includes more detailed `installation instructions <https://scikit-learn.org/stable/install.html>`_.\n\n\nChangelog\n---------\n\nSee the `changelog <https://scikit-learn.org/dev/whats_new.html>`__\nfor a history of notable changes to scikit-learn.\n\nDevelopment\n-----------\n\nWe welcome new contributors of all experience levels. The scikit-learn\ncommunity goals are to be helpful, welcoming, and effective. The\n`Development Guide <https://scikit-learn.org/stable/developers/index.html>`_\nhas detailed information about contributing code, documentation, tests, and\nmore. We've included some basic information in this README.\n\nImportant links\n~~~~~~~~~~~~~~~\n\n- Official source code repo: https://github.com/scikit-learn/scikit-learn\n- Download releases: https://pypi.org/project/scikit-learn/\n- Issue tracker: https://github.com/scikit-learn/scikit-learn/issues\n\nSource code\n~~~~~~~~~~~\n\nYou can check the latest sources with the command::\n\n    git clone https://github.com/scikit-learn/scikit-learn.git\n\nContributing\n~~~~~~~~~~~~\n\nTo learn more about making a contribution to scikit-learn, please see our\n`Contributing guide\n<https://scikit-learn.org/dev/developers/contributing.html>`_.\n\nTesting\n~~~~~~~\n\nAfter installation, you can launch the test suite from outside the source\ndirectory (you will need to have ``pytest`` >= |PyTestMinVersion| installed)::\n\n    pytest sklearn\n\nSee the web page https://scikit-learn.org/dev/developers/contributing.html#testing-and-improving-test-coverage\nfor more information.\n\n    Random number generation can be controlled during testing by setting\n    the ``SKLEARN_SEED`` environment variable.\n\nSubmitting a Pull Request\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBefore opening a Pull Request, have a look at the\nfull Contributing page to make sure your code complies\nwith our guidelines: https://scikit-learn.org/stable/developers/index.html\n\nProject History\n---------------\n\nThe project was started in 2007 by David Cournapeau as a Google Summer\nof Code project, and since then many volunteers have contributed. See\nthe `About us <https://scikit-learn.org/dev/about.html#authors>`__ page\nfor a list of core contributors.\n\nThe project is currently maintained by a team of volunteers.\n\n**Note**: `scikit-learn` was previously referred to as `scikits.learn`.\n\nHelp and Support\n----------------\n\nDocumentation\n~~~~~~~~~~~~~\n\n- HTML documentation (stable release): https://scikit-learn.org\n- HTML documentation (development version): https://scikit-learn.org/dev/\n- FAQ: https://scikit-learn.org/stable/faq.html\n\nCommunication\n~~~~~~~~~~~~~\n\n- Mailing list: https://mail.python.org/mailman/listinfo/scikit-learn\n- Logos & Branding: https://github.com/scikit-learn/scikit-learn/tree/main/doc/logos\n- Blog: https://blog.scikit-learn.org\n- Calendar: https://blog.scikit-learn.org/calendar/\n- Twitter: https://twitter.com/scikit_learn\n- Stack Overflow: https://stackoverflow.com/questions/tagged/scikit-learn\n- GitHub Discussions: https://github.com/scikit-learn/scikit-learn/discussions\n- Website: https://scikit-learn.org\n- LinkedIn: https://www.linkedin.com/company/scikit-learn\n- Bluesky: https://bsky.app/profile/scikit-learn.org\n- YouTube: https://www.youtube.com/channel/UCJosFjYm0ZYVUARxuOZqnnw/playlists\n- Facebook: https://www.facebook.com/scikitlearnofficial/\n- Instagram: https://www.instagram.com/scikitlearnofficial/\n- TikTok: https://www.tiktok.com/@scikit.learn\n- Mastodon: https://mastodon.social/@sklearn@fosstodon.org\n- Discord: https://discord.gg/h9qyrK8Jc8\n\n\nCitation\n~~~~~~~~\n\nIf you use scikit-learn in a scientific publication, we would appreciate citations: https://scikit-learn.org/stable/about.html#citing-scikit-learn\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.69140625,
          "content": "# Security Policy\n\n## Supported Versions\n\n| Version       | Supported          |\n| ------------- | ------------------ |\n| 1.6.0         | :white_check_mark: |\n| < 1.6.0       | :x:                |\n\n## Reporting a Vulnerability\n\nPlease report security vulnerabilities by email to `security@scikit-learn.org`.\nThis email is an alias to a subset of the scikit-learn maintainers' team.\n\nIf the security vulnerability is accepted, a patch will be crafted privately\nin order to prepare a dedicated bugfix release as timely as possible (depending\non the complexity of the fix).\n\nIn addition to sending the report by email, you can also report security\nvulnerabilities to [tidelift](https://tidelift.com/security).\n"
        },
        {
          "name": "asv_benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 11.1630859375,
          "content": "# Adapted from https://github.com/pandas-dev/pandas/blob/master/azure-pipelines.yml\nschedules:\n- cron: \"30 2 * * *\"\n  displayName: Run nightly build\n  branches:\n    include:\n    - main\n  always: true\n\njobs:\n- job: git_commit\n  displayName: Get Git Commit\n  pool:\n    vmImage: ubuntu-20.04\n  steps:\n    - bash: python build_tools/azure/get_commit_message.py\n      name: commit\n      displayName: Get source version message\n\n- job: linting\n  dependsOn: [git_commit]\n  condition: |\n    and(\n      succeeded(),\n      not(contains(dependencies['git_commit']['outputs']['commit.message'], '[lint skip]')),\n      not(contains(dependencies['git_commit']['outputs']['commit.message'], '[ci skip]'))\n    )\n  displayName: Linting\n  pool:\n    vmImage: ubuntu-20.04\n  steps:\n    - task: UsePythonVersion@0\n      inputs:\n        versionSpec: '3.9'\n    - bash: |\n        source build_tools/shared.sh\n        # Include pytest compatibility with mypy\n        pip install pytest $(get_dep ruff min) $(get_dep mypy min) $(get_dep black min) cython-lint\n      displayName: Install linters\n    - bash: |\n        ./build_tools/linting.sh\n      displayName: Run linters\n    - bash: |\n        pip install ninja meson scipy\n        python build_tools/check-meson-openmp-dependencies.py\n      displayName: Run Meson OpenMP checks\n\n\n- template: build_tools/azure/posix.yml\n  parameters:\n    name: Linux_Nightly\n    vmImage: ubuntu-20.04\n    dependsOn: [git_commit, linting]\n    condition: |\n      and(\n        succeeded(),\n        not(contains(dependencies['git_commit']['outputs']['commit.message'], '[ci skip]')),\n        or(eq(variables['Build.Reason'], 'Schedule'),\n           contains(dependencies['git_commit']['outputs']['commit.message'], '[scipy-dev]'\n          )\n        )\n      )\n    matrix:\n      pylatest_pip_scipy_dev:\n        DISTRIB: 'conda-pip-scipy-dev'\n        LOCK_FILE: './build_tools/azure/pylatest_pip_scipy_dev_linux-64_conda.lock'\n        SKLEARN_WARNINGS_AS_ERRORS: '1'\n        CHECK_PYTEST_SOFT_DEPENDENCY: 'true'\n\n- template: build_tools/azure/posix.yml\n  # CPython 3.13 free-threaded build\n  parameters:\n    name: Linux_free_threaded\n    vmImage: ubuntu-22.04\n    dependsOn: [git_commit, linting]\n    condition: |\n      and(\n        succeeded(),\n        not(contains(dependencies['git_commit']['outputs']['commit.message'], '[ci skip]')),\n        or(eq(variables['Build.Reason'], 'Schedule'),\n           contains(dependencies['git_commit']['outputs']['commit.message'], '[free-threaded]'\n          )\n        )\n      )\n    matrix:\n      pylatest_free_threaded:\n        PYTHON_GIL: '0'\n        DISTRIB: 'conda-free-threaded'\n        LOCK_FILE: './build_tools/azure/pylatest_free_threaded_linux-64_conda.lock'\n        COVERAGE: 'false'\n\n- job: Linux_Nightly_Pyodide\n  pool:\n    vmImage: ubuntu-22.04\n  variables:\n    # Need to match Python version and Emscripten version for the correct\n    # Pyodide version. For example, for Pyodide version 0.25.1, see\n    # https://github.com/pyodide/pyodide/blob/0.25.1/Makefile.envs\n    PYODIDE_VERSION: '0.26.0'\n    EMSCRIPTEN_VERSION: '3.1.58'\n    PYTHON_VERSION: '3.12.1'\n\n  dependsOn: [git_commit, linting]\n  condition: |\n    and(\n      succeeded(),\n      not(contains(dependencies['git_commit']['outputs']['commit.message'], '[ci skip]')),\n      or(eq(variables['Build.Reason'], 'Schedule'),\n         contains(dependencies['git_commit']['outputs']['commit.message'], '[pyodide]'\n        )\n      )\n    )\n  steps:\n    - task: UsePythonVersion@0\n      inputs:\n        versionSpec: $(PYTHON_VERSION)\n        addToPath: true\n\n    - bash: bash build_tools/azure/install_pyodide.sh\n      displayName: Build Pyodide wheel\n\n    - bash: bash build_tools/azure/test_script_pyodide.sh\n      displayName: Test Pyodide wheel\n\n# Will run all the time regardless of linting outcome.\n- template: build_tools/azure/posix.yml\n  parameters:\n    name: Linux_Runs\n    vmImage: ubuntu-20.04\n    dependsOn: [git_commit]\n    condition: |\n      and(\n        succeeded(),\n        not(contains(dependencies['git_commit']['outputs']['commit.message'], '[ci skip]'))\n      )\n    matrix:\n      pylatest_conda_forge_mkl:\n        DISTRIB: 'conda'\n        LOCK_FILE: './build_tools/azure/pylatest_conda_forge_mkl_linux-64_conda.lock'\n        COVERAGE: 'true'\n        SKLEARN_TESTS_GLOBAL_RANDOM_SEED: '42'  # default global random seed\n        # Tests that require large downloads over the networks are skipped in CI.\n        # Here we make sure, that they are still run on a regular basis.\n        ${{ if eq(variables['Build.Reason'], 'Schedule') }}:\n          SKLEARN_SKIP_NETWORK_TESTS: '0'\n        SCIPY_ARRAY_API: '1'\n\n# Check compilation with Ubuntu 22.04 LTS (Jammy Jellyfish) and scipy from conda-forge\n# By default the CI is sequential, where `Ubuntu_Jammy_Jellyfish` runs first and\n# the others jobs are run only if `Ubuntu_Jammy_Jellyfish` succeeds.\n# When \"[azure parallel]\" is in the commit message, `Ubuntu_Jammy_Jellyfish` will\n# run in parallel with the rest of the jobs. On Azure, the job's name will be\n# `Ubuntu_Jammy_Jellyfish_Parallel`.\n- template: build_tools/azure/posix-all-parallel.yml\n  parameters:\n    name: Ubuntu_Jammy_Jellyfish\n    vmImage: ubuntu-22.04\n    dependsOn: [git_commit, linting]\n    condition: |\n      and(\n        succeeded(),\n        not(contains(dependencies['git_commit']['outputs']['commit.message'], '[ci skip]'))\n      )\n    commitMessage: dependencies['git_commit']['outputs']['commit.message']\n    matrix:\n      pymin_conda_forge_openblas_ubuntu_2204:\n        DISTRIB: 'conda'\n        LOCK_FILE: './build_tools/azure/pymin_conda_forge_openblas_ubuntu_2204_linux-64_conda.lock'\n        SKLEARN_WARNINGS_AS_ERRORS: '1'\n        COVERAGE: 'false'\n        SKLEARN_TESTS_GLOBAL_RANDOM_SEED: '0'  # non-default seed\n\n- template: build_tools/azure/posix.yml\n  parameters:\n    name: Ubuntu_Atlas\n    vmImage: ubuntu-22.04\n    dependsOn: [linting, git_commit, Ubuntu_Jammy_Jellyfish]\n    # Runs when dependencies succeeded or skipped\n    condition: |\n      and(\n        not(or(failed(), canceled())),\n        not(contains(dependencies['git_commit']['outputs']['commit.message'], '[ci skip]'))\n      )\n    matrix:\n      # Linux environment to test that scikit-learn can be built against\n      # versions of numpy, scipy with ATLAS that comes with Ubuntu Jammy Jellyfish 22.04\n      # i.e. numpy 1.21.5 and scipy 1.8.0\n      ubuntu_atlas:\n        DISTRIB: 'ubuntu'\n        LOCK_FILE: './build_tools/azure/ubuntu_atlas_lock.txt'\n        COVERAGE: 'false'\n        SKLEARN_TESTS_GLOBAL_RANDOM_SEED: '1'  # non-default seed\n\n- template: build_tools/azure/posix.yml\n  parameters:\n    name: Linux\n    vmImage: ubuntu-20.04\n    dependsOn: [linting, git_commit, Ubuntu_Jammy_Jellyfish]\n    # Runs when dependencies succeeded or skipped\n    condition: |\n      and(\n        not(or(failed(), canceled())),\n        not(contains(dependencies['git_commit']['outputs']['commit.message'], '[ci skip]'))\n      )\n    matrix:\n      # Linux + Python 3.9 build with minimum supported version of dependencies\n      pymin_conda_forge_openblas_min_dependencies:\n        DISTRIB: 'conda'\n        LOCK_FILE: './build_tools/azure/pymin_conda_forge_openblas_min_dependencies_linux-64_conda.lock'\n        # Enable debug Cython directives to capture IndexError exceptions in\n        # combination with the -Werror::pytest.PytestUnraisableExceptionWarning\n        # flag for pytest.\n        # https://github.com/scikit-learn/scikit-learn/pull/24438\n        SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES: '1'\n        SKLEARN_RUN_FLOAT32_TESTS: '1'\n        SKLEARN_TESTS_GLOBAL_RANDOM_SEED: '2'  # non-default seed\n      # Linux environment to test the latest available dependencies.\n      # It runs tests requiring lightgbm, pandas and PyAMG.\n      pylatest_pip_openblas_pandas:\n        DISTRIB: 'conda-pip-latest'\n        LOCK_FILE: './build_tools/azure/pylatest_pip_openblas_pandas_linux-64_conda.lock'\n        CHECK_PYTEST_SOFT_DEPENDENCY: 'true'\n        SKLEARN_WARNINGS_AS_ERRORS: '1'\n        SKLEARN_TESTS_GLOBAL_RANDOM_SEED: '3'  # non-default seed\n        # disable pytest-xdist to have 1 job where OpenMP and BLAS are not single\n        # threaded because by default the tests configuration (sklearn/conftest.py)\n        # makes sure that they are single threaded in each xdist subprocess.\n        PYTEST_XDIST_VERSION: 'none'\n        PIP_BUILD_ISOLATION: 'true'\n        SCIPY_ARRAY_API: '1'\n\n- template: build_tools/azure/posix-docker.yml\n  parameters:\n    name: Linux_Docker\n    vmImage: ubuntu-20.04\n    dependsOn: [linting, git_commit, Ubuntu_Jammy_Jellyfish]\n    # Runs when dependencies succeeded or skipped\n    condition: |\n      and(\n        not(or(failed(), canceled())),\n        not(contains(dependencies['git_commit']['outputs']['commit.message'], '[ci skip]'))\n      )\n    matrix:\n      debian_32bit:\n        DOCKER_CONTAINER: 'i386/debian:trixie'\n        DISTRIB: 'debian-32'\n        COVERAGE: \"true\"\n        LOCK_FILE: './build_tools/azure/debian_32bit_lock.txt'\n        # disable pytest xdist due to unknown bug with 32-bit container\n        PYTEST_XDIST_VERSION: 'none'\n        SKLEARN_TESTS_GLOBAL_RANDOM_SEED: '4'  # non-default seed\n\n- template: build_tools/azure/posix.yml\n  parameters:\n    name: macOS\n    vmImage: macOS-13\n    dependsOn: [linting, git_commit, Ubuntu_Jammy_Jellyfish]\n    # Runs when dependencies succeeded or skipped\n    condition: |\n      and(\n        not(or(failed(), canceled())),\n        not(contains(dependencies['git_commit']['outputs']['commit.message'], '[ci skip]'))\n      )\n    matrix:\n      pylatest_conda_forge_mkl:\n        DISTRIB: 'conda'\n        LOCK_FILE: './build_tools/azure/pylatest_conda_forge_mkl_osx-64_conda.lock'\n        SKLEARN_TESTS_GLOBAL_RANDOM_SEED: '5'  # non-default seed\n        SCIPY_ARRAY_API: '1'\n      pylatest_conda_mkl_no_openmp:\n        DISTRIB: 'conda'\n        LOCK_FILE: './build_tools/azure/pylatest_conda_mkl_no_openmp_osx-64_conda.lock'\n        SKLEARN_TEST_NO_OPENMP: 'true'\n        SKLEARN_SKIP_OPENMP_TEST: 'true'\n        SKLEARN_TESTS_GLOBAL_RANDOM_SEED: '6'  # non-default seed\n\n- template: build_tools/azure/windows.yml\n  parameters:\n    name: Windows\n    vmImage: windows-latest\n    dependsOn: [linting, git_commit, Ubuntu_Jammy_Jellyfish]\n    # Runs when dependencies succeeded or skipped\n    condition: |\n      and(\n        not(or(failed(), canceled())),\n        not(contains(dependencies['git_commit']['outputs']['commit.message'], '[ci skip]'))\n      )\n    matrix:\n      pymin_conda_forge_mkl:\n        DISTRIB: 'conda'\n        LOCK_FILE: ./build_tools/azure/pymin_conda_forge_mkl_win-64_conda.lock\n        SKLEARN_WARNINGS_AS_ERRORS: '1'\n        # The Azure Windows runner is typically much slower than other CI\n        # runners due to the lack of compiler cache. Running the tests with\n        # coverage enabled make them run extra slower. Since very few parts of\n        # code should have windows-specific code branches, it should be enable\n        # to restrict the code coverage collection to the non-windows runners.\n        COVERAGE: 'false'\n        # Enable debug Cython directives to capture IndexError exceptions in\n        # combination with the -Werror::pytest.PytestUnraisableExceptionWarning\n        # flag for pytest.\n        # https://github.com/scikit-learn/scikit-learn/pull/24438\n        SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES: '1'\n        SKLEARN_TESTS_GLOBAL_RANDOM_SEED: '7'  # non-default seed\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "maint_tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 1.5791015625,
          "content": "project(\n  'scikit-learn',\n  'c', 'cpp', 'cython',\n  version: run_command('sklearn/_build_utils/version.py', check: true).stdout().strip(),\n  license: 'BSD-3',\n  meson_version: '>= 1.1.0',\n  default_options: [\n    'c_std=c11',\n    'cpp_std=c++14',\n  ],\n)\n\ncc = meson.get_compiler('c')\ncpp = meson.get_compiler('cpp')\ncython = meson.get_compiler('cython')\n\n# Check compiler is recent enough (see \"Toolchain Roadmap\" for details)\nif cc.get_id() == 'gcc'\n  if not cc.version().version_compare('>=8.0')\n    error('scikit-learn requires GCC >= 8.0')\n  endif\nelif cc.get_id() == 'msvc'\n  if not cc.version().version_compare('>=19.20')\n    error('scikit-learn requires at least vc142 (default with Visual Studio 2019) ' + \\\n          'when building with MSVC')\n  endif\nendif\n\n_global_c_args = cc.get_supported_arguments(\n  '-Wno-unused-but-set-variable',\n  '-Wno-unused-function',\n  '-Wno-conversion',\n  '-Wno-misleading-indentation',\n)\nadd_project_arguments(_global_c_args, language : 'c')\n\n# We need -lm for all C code (assuming it uses math functions, which is safe to\n# assume for scikit-learn). For C++ it isn't needed, because libstdc++/libc++ is\n# guaranteed to depend on it.\nm_dep = cc.find_library('m', required : false)\nif m_dep.found()\n  add_project_link_arguments('-lm', language : 'c')\nendif\n\ntempita = files('sklearn/_build_utils/tempita.py')\n\npy = import('python').find_installation(pure: false)\n\n# Copy all the .py files to the install dir, rather than using\n# py.install_sources and needing to list them explicitely one by one\ninstall_subdir('sklearn', install_dir: py.get_install_dir())\n\nsubdir('sklearn')\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 13.37109375,
          "content": "[project]\nname = \"scikit-learn\"\ndynamic = [\"version\"]\ndescription = \"A set of python modules for machine learning and data mining\"\nreadme = \"README.rst\"\nmaintainers = [\n    {name = \"scikit-learn developers\", email=\"scikit-learn@python.org\"},\n]\ndependencies = [\n  \"numpy>=1.19.5\",\n  \"scipy>=1.6.0\",\n  \"joblib>=1.2.0\",\n  \"threadpoolctl>=3.1.0\",\n]\nrequires-python = \">=3.9\"\nlicense = {file = \"COPYING\"}\nclassifiers=[\n  \"Intended Audience :: Science/Research\",\n  \"Intended Audience :: Developers\",\n  \"License :: OSI Approved :: BSD License\",\n  \"Programming Language :: C\",\n  \"Programming Language :: Python\",\n  \"Topic :: Software Development\",\n  \"Topic :: Scientific/Engineering\",\n  \"Development Status :: 5 - Production/Stable\",\n  \"Operating System :: Microsoft :: Windows\",\n  \"Operating System :: POSIX\",\n  \"Operating System :: Unix\",\n  \"Operating System :: MacOS\",\n  \"Programming Language :: Python :: 3\",\n  \"Programming Language :: Python :: 3.9\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n  \"Programming Language :: Python :: 3.12\",\n  \"Programming Language :: Python :: 3.13\",\n  \"Programming Language :: Python :: Implementation :: CPython\",\n]\n\n[project.urls]\nhomepage = \"https://scikit-learn.org\"\nsource = \"https://github.com/scikit-learn/scikit-learn\"\ndownload = \"https://pypi.org/project/scikit-learn/#files\"\ntracker = \"https://github.com/scikit-learn/scikit-learn/issues\"\n\"release notes\" = \"https://scikit-learn.org/stable/whats_new\"\n\n[project.optional-dependencies]\nbuild = [\"numpy>=1.19.5\", \"scipy>=1.6.0\", \"cython>=3.0.10\", \"meson-python>=0.16.0\"]\ninstall = [\"numpy>=1.19.5\", \"scipy>=1.6.0\", \"joblib>=1.2.0\", \"threadpoolctl>=3.1.0\"]\nbenchmark = [\"matplotlib>=3.3.4\", \"pandas>=1.2.0\", \"memory_profiler>=0.57.0\"]\ndocs = [\n    \"matplotlib>=3.3.4\",\n    \"scikit-image>=0.17.2\",\n    \"pandas>=1.2.0\",\n    \"seaborn>=0.9.0\",\n    \"memory_profiler>=0.57.0\",\n    \"sphinx>=7.3.7\",\n    \"sphinx-copybutton>=0.5.2\",\n    \"sphinx-gallery>=0.17.1\",\n    \"numpydoc>=1.2.0\",\n    \"Pillow>=7.1.2\",\n    \"pooch>=1.6.0\",\n    \"sphinx-prompt>=1.4.0\",\n    \"sphinxext-opengraph>=0.9.1\",\n    \"plotly>=5.14.0\",\n    \"polars>=0.20.30\",\n    \"sphinx-design>=0.5.0\",\n    \"sphinx-design>=0.6.0\",\n    \"sphinxcontrib-sass>=0.3.4\",\n    \"pydata-sphinx-theme>=0.15.3\",\n    \"sphinx-remove-toctrees>=1.0.0.post1\",\n    \"towncrier>=24.8.0\",\n]\nexamples = [\n    \"matplotlib>=3.3.4\",\n    \"scikit-image>=0.17.2\",\n    \"pandas>=1.2.0\",\n    \"seaborn>=0.9.0\",\n    \"pooch>=1.6.0\",\n    \"plotly>=5.14.0\",\n]\ntests = [\n    \"matplotlib>=3.3.4\",\n    \"scikit-image>=0.17.2\",\n    \"pandas>=1.2.0\",\n    \"pytest>=7.1.2\",\n    \"pytest-cov>=2.9.0\",\n    \"ruff>=0.5.1\",\n    \"black>=24.3.0\",\n    \"mypy>=1.9\",\n    \"pyamg>=4.0.0\",\n    \"polars>=0.20.30\",\n    \"pyarrow>=12.0.0\",\n    \"numpydoc>=1.2.0\",\n    \"pooch>=1.6.0\",\n]\nmaintenance = [\"conda-lock==2.5.6\"]\n\n[build-system]\nbuild-backend = \"mesonpy\"\n# Minimum requirements for the build system to execute.\nrequires = [\n    \"meson-python>=0.16.0\",\n    \"Cython>=3.0.10\",\n    \"numpy>=2\",\n    \"scipy>=1.6.0\",\n]\n\n[tool.black]\nline-length = 88\ntarget-version = ['py39', 'py310', 'py311']\npreview = true\nexclude = '''\n/(\n    \\.eggs         # exclude a few common directories in the\n  | \\.git          # root of the project\n  | \\.mypy_cache\n  | \\.vscode\n  | build\n  | dist\n  | doc/_build\n  | doc/auto_examples\n  | sklearn/externals\n  | asv_benchmarks/env\n)/\n'''\n\n[tool.ruff]\n# max line length for black\nline-length = 88\ntarget-version = \"py38\"\nexclude=[\n    \".git\",\n    \"__pycache__\",\n    \"dist\",\n    \"sklearn/externals\",\n    \"doc/_build\",\n    \"doc/auto_examples\",\n    \"build\",\n    \"asv_benchmarks/env\",\n    \"asv_benchmarks/html\",\n    \"asv_benchmarks/results\",\n    \"asv_benchmarks/benchmarks/cache\",\n]\n\n[tool.ruff.lint]\n# This enables us to use CPY001: copyright header check\npreview = true\n# This enables us to use the explicit preview rules that we want only\nexplicit-preview-rules = true\n# all rules can be found here: https://beta.ruff.rs/docs/rules/\nselect = [\"E\", \"F\", \"W\", \"I\", \"CPY001\"]\nignore=[\n    # space before : (needed for how black formats slicing)\n    \"E203\",\n    # do not assign a lambda expression, use a def\n    \"E731\",\n    # do not use variables named 'l', 'O', or 'I'\n    \"E741\",\n    # E721 is in preview (july 2024) and gives many false positives.\n    # Use `is` and `is not` for type comparisons, or `isinstance()` for\n    # isinstance checks\n    \"E721\",\n    # F841 is in preview (july 2024), and we don't care much about it.\n    # Local variable ... is assigned to but never used\n    \"F841\",\n]\n\n[tool.ruff.lint.flake8-copyright]\nnotice-rgx = \"\\\\#\\\\ Authors:\\\\ The\\\\ scikit\\\\-learn\\\\ developers\\\\\\r?\\\\\\n\\\\#\\\\ SPDX\\\\-License\\\\-Identifier:\\\\ BSD\\\\-3\\\\-Clause\"\n\n[tool.ruff.lint.per-file-ignores]\n# It's fine not to put the import at the top of the file in the examples\n# folder.\n\"examples/*\"=[\"E402\"]\n\"doc/conf.py\"=[\"E402\"]\n\"**/tests/*\"=[\"CPY001\"]\n\"asv_benchmarks/*\"=[\"CPY001\"]\n\"benchmarks/*\"=[\"CPY001\"]\n\"doc/*\"=[\"CPY001\"]\n\"build_tools/*\"=[\"CPY001\"]\n\"sklearn/_build_utils/*\"=[\"CPY001\"]\n\"maint_tools/*\"=[\"CPY001\"]\n\".spin/*\"=[\"CPY001\"]\n\".github/*\"=[\"CPY001\"]\n# __doc__ is too long (>4096 chars) and therefore false positive on copyright check\n\"examples/model_selection/plot_precision_recall.py\"=[\"CPY001\"]\n\"examples/svm/plot_rbf_parameters.py\"=[\"CPY001\"]\n# __all__ has un-imported names\n\"sklearn/__init__.py\"=[\"F822\"]\n\n\n[tool.cython-lint]\n# Ignore the same error codes as ruff\n# + E501 (line too long) because keeping it < 88 in cython\n# often makes code less readable.\nignore = [\n    # multiple spaces/tab after comma\n    'E24',\n    # space before : (needed for how black formats slicing)\n    'E203',\n    # line too long\n    'E501',\n    # do not assign a lambda expression, use a def\n    'E731',\n    # do not use variables named 'l', 'O', or 'I'\n    'E741',\n    # line break before binary operator\n    'W503',\n    # line break after binary operator\n    'W504',\n]\n# Exclude files are generated from tempita templates\nexclude= '''\n(\n    asv_benchmarks/\n  | sklearn/_loss/_loss.pyx\n  | sklearn/linear_model/_sag_fast.pyx\n  | sklearn/linear_model/_sgd_fast.pyx\n  | sklearn/utils/_seq_dataset.pyx\n  | sklearn/utils/_seq_dataset.pxd\n  | sklearn/utils/_weight_vector.pyx\n  | sklearn/utils/_weight_vector.pxd\n  | sklearn/metrics/_dist_metrics.pyx\n  | sklearn/metrics/_dist_metrics.pxd\n  | sklearn/metrics/_pairwise_distances_reduction/_argkmin.pxd\n  | sklearn/metrics/_pairwise_distances_reduction/_argkmin.pyx\n  | sklearn/metrics/_pairwise_distances_reduction/_argkmin_classmode.pyx\n  | sklearn/metrics/_pairwise_distances_reduction/_base.pxd\n  | sklearn/metrics/_pairwise_distances_reduction/_base.pyx\n  | sklearn/metrics/_pairwise_distances_reduction/_datasets_pair.pxd\n  | sklearn/metrics/_pairwise_distances_reduction/_datasets_pair.pyx\n  | sklearn/metrics/_pairwise_distances_reduction/_middle_term_computer.pxd\n  | sklearn/metrics/_pairwise_distances_reduction/_middle_term_computer.pyx\n  | sklearn/metrics/_pairwise_distances_reduction/_radius_neighbors.pxd\n  | sklearn/metrics/_pairwise_distances_reduction/_radius_neighbors.pyx\n)\n'''\n\n[tool.check-sdist]\n# These settings should match .gitattributes\nsdist-only = []\ngit-only = [\".*\", \"asv_benchmarks\", \"azure-pipelines.yml\", \"benchmarks\", \"build_tools\", \"maint_tools\"]\ndefault-ignore = false\n\n[tool.spin]\npackage = \"sklearn\"  # name of your package\n\n[tool.spin.commands]\n\"Build\" = [\n  \"spin.cmds.pip.install\",\n  \"spin.cmds.meson.test\",\n  \".spin/cmds.py:clean\",\n]\n\"Documentation\" = [\n  \"spin.cmds.meson.docs\"\n]\n\n[tool.changelog-bot]\n    [tool.changelog-bot.towncrier_changelog]\n        enabled = true\n        verify_pr_number = true\n        changelog_noop_label = \"No Changelog Needed\"\n        whatsnew_pattern = 'doc/whatsnew/upcoming_changes/[^/]+/\\d+\\.[^.]+\\.rst'\n\n[tool.towncrier]\n    package = \"sklearn\"\n    filename = \"doc/whats_new/v1.7.rst\"\n    single_file = true\n    directory = \"doc/whats_new/upcoming_changes\"\n    issue_format = \":pr:`{issue}`\"\n    template = \"doc/whats_new/upcoming_changes/towncrier_template.rst.jinja2\"\n    all_bullets = false\n\n    [[tool.towncrier.type]]\n        directory = \"major-feature\"\n        name = \"|MajorFeature|\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"feature\"\n        name = \"|Feature|\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"efficiency\"\n        name = \"|Efficiency|\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"enhancement\"\n        name = \"|Enhancement|\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"fix\"\n        name = \"|Fix|\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"api\"\n        name = \"|API|\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"other\"\n        name = \"\"\n        showcontent = true\n\n    [[tool.towncrier.section]]\n        name = \"Security\"\n        path = \"security\"\n\n    [[tool.towncrier.section]]\n        name = \"Changed models\"\n        path = \"changed-models\"\n\n    [[tool.towncrier.section]]\n        name = \"Changes impacting many modules\"\n        path = \"many-modules\"\n\n    [[tool.towncrier.section]]\n        name = \"Support for Array API\"\n        path = \"array-api\"\n\n    [[tool.towncrier.section]]\n        name = \"Metadata routing\"\n        path = \"metadata-routing\"\n\n    [[tool.towncrier.section]]\n        name = \"custom-top-level\"\n        path = \"custom-top-level\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.base`\"\n        path = \"sklearn.base\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.calibration`\"\n        path = \"sklearn.calibration\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.cluster`\"\n        path = \"sklearn.cluster\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.compose`\"\n        path = \"sklearn.compose\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.covariance`\"\n        path = \"sklearn.covariance\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.cross_decomposition`\"\n        path = \"sklearn.cross_decomposition\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.datasets`\"\n        path = \"sklearn.datasets\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.decomposition`\"\n        path = \"sklearn.decomposition\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.discriminant_analysis`\"\n        path = \"sklearn.discriminant_analysis\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.dummy`\"\n        path = \"sklearn.dummy\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.ensemble`\"\n        path = \"sklearn.ensemble\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.exceptions`\"\n        path = \"sklearn.exceptions\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.feature_extraction`\"\n        path = \"sklearn.feature_extraction\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.feature_selection`\"\n        path = \"sklearn.feature_selection\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.frozen`\"\n        path = \"sklearn.frozen\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.gaussian_process`\"\n        path = \"sklearn.gaussian_process\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.impute`\"\n        path = \"sklearn.impute\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.inspection`\"\n        path = \"sklearn.inspection\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.isotonic`\"\n        path = \"sklearn.isotonic\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.kernel_approximation`\"\n        path = \"sklearn.kernel_approximation\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.kernel_ridge`\"\n        path = \"sklearn.kernel_ridge\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.linear_model`\"\n        path = \"sklearn.linear_model\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.manifold`\"\n        path = \"sklearn.manifold\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.metrics`\"\n        path = \"sklearn.metrics\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.mixture`\"\n        path = \"sklearn.mixture\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.model_selection`\"\n        path = \"sklearn.model_selection\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.multiclass`\"\n        path = \"sklearn.multiclass\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.multioutput`\"\n        path = \"sklearn.multioutput\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.naive_bayes`\"\n        path = \"sklearn.naive_bayes\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.neighbors`\"\n        path = \"sklearn.neighbors\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.neural_network`\"\n        path = \"sklearn.neural_network\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.pipeline`\"\n        path = \"sklearn.pipeline\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.preprocessing`\"\n        path = \"sklearn.preprocessing\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.random_projection`\"\n        path = \"sklearn.random_projection\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.semi_supervised`\"\n        path = \"sklearn.semi_supervised\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.svm`\"\n        path = \"sklearn.svm\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.tree`\"\n        path = \"sklearn.tree\"\n\n    [[tool.towncrier.section]]\n        name = \":mod:`sklearn.utils`\"\n        path = \"sklearn.utils\"\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.671875,
          "content": "[options]\npackages = find:\n\n[options.packages.find]\ninclude = sklearn*\n\n[aliases]\ntest = pytest\n\n[tool:pytest]\n# disable-pytest-warnings should be removed once we rewrite tests\n# using yield with parametrize\ndoctest_optionflags = NORMALIZE_WHITESPACE ELLIPSIS\ntestpaths = sklearn\naddopts =\n    --doctest-modules\n    --disable-pytest-warnings\n    --color=yes\n\n[mypy]\nignore_missing_imports = True\nallow_redefinition = True\nexclude=\n    sklearn/externals\n\n[mypy-joblib.*]\nfollow_imports = skip\n\n[codespell]\nskip = ./.git,./.mypy_cache,./sklearn/feature_extraction/_stop_words.py,./doc/_build,./doc/auto_examples,./doc/modules/generated\nignore-words = build_tools/codespell_ignore_words.txt\n"
        },
        {
          "name": "sklearn",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}