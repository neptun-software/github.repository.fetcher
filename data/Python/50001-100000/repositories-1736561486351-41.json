{
  "metadata": {
    "timestamp": 1736561486351,
    "page": 41,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjQy",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Z4nzu/hackingtool",
      "stars": 51272,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.556640625,
          "content": "# Created by https://www.toptal.com/developers/gitignore/api/python,venv\n# Edit at https://www.toptal.com/developers/gitignore?templates=python,venv\n\n### Python ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n.idea/\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\n### Python Patch ###\n# Poetry local configuration file - https://python-poetry.org/docs/configuration/#local-configuration\npoetry.toml\n\n# ruff\n.ruff_cache/\n\n### venv ###\n# Virtualenv\n# http://iamzed.com/2009/05/07/a-primer-on-virtualenv/\n[Bb]in\n[Ii]nclude\n[Ll]ib\n[Ll]ib64\n[Ll]ocal\n[Ss]cripts\npyvenv.cfg\npip-selfcheck.json\n\n# End of https://www.toptal.com/developers/gitignore/api/python,venv\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.4365234375,
          "content": "FROM kalilinux/kali-rolling:latest\nRUN apt-get update && \\\n    apt-get install -y git python3-pip figlet sudo && \\\n    apt-get install -y boxes php curl xdotool wget\n\nWORKDIR /root/hackingtool\nCOPY requirements.txt ./\nRUN pip3 install --no-cache-dir boxes flask lolcat requests -r requirements.txt\nCOPY . .\nRUN true && echo \"/root/hackingtool/\" > /home/hackingtoolpath.txt;\nEXPOSE 1-65535\nENTRYPOINT [\"python3\", \"/root/hackingtool/hackingtool.py\"]"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2020 Mr.Z4nzu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.2568359375,
          "content": "### All in One Hacking tool For Hackers🥇\n![](https://img.shields.io/github/license/Z4nzu/hackingtool)\n![](https://img.shields.io/github/issues/Z4nzu/hackingtool)\n![](https://img.shields.io/github/issues-closed/Z4nzu/hackingtool)\n![](https://img.shields.io/badge/Python-3-blue)\n![](https://img.shields.io/github/forks/Z4nzu/hackingtool)\n![](https://img.shields.io/github/stars/Z4nzu/hackingtool)\n![](https://img.shields.io/github/last-commit/Z4nzu/hackingtool)\n[![HitCount](http://hits.dwyl.com/Z4nzu/hackingtool.svg)](http://hits.dwyl.com/Z4nzu/hackingtool)\n![](https://img.shields.io/badge/platform-Linux%20%7C%20KaliLinux%20%7C%20ParrotOs-blue)\n\n#### Install Kali Linux in WIndows10 Without VirtualBox [YOUTUBE](https://youtu.be/BsFhpIDcd9I) or use Docker\n\n## Update Available V1.2.0 🚀 \n- [✔] Installation Bug Fixed\n- [x] Added New Tools \n    - [x] Reverse Engineering\n    - [x] RAT Tools\n    - [x] Web Crawling \n    - [x] Payload Injector\n- [x] Multitor Tools update\n- [X] Added Tool in wifijamming\n- [X] Added Tool in steganography\n\n\n\n# Hackingtool Menu 🧰\n- [Anonymously Hiding Tools](#anonymously-hiding-tools)\n- [Information gathering tools](#information-gathering-tools)\n- [Wordlist Generator](#wordlist-generator)\n- [Wireless attack tools](#wireless-attack-tools)\n- [SQL Injection Tools](#sql-injection-tools)\n- [Phishing attack tools](#phishing-attack-tools)\n- [Web Attack tools](#web-attack-tools)\n- [Post exploitation tools](#post-exploitation-tools)\n- [Forensic tools](#forensic-tools)\n- [Payload creation tools](#payload-creation-tools)\n- [Exploit framework](#exploit-framework)\n- [Reverse engineering tools](#reverse-engineering-tools)\n- [DDOS Attack Tools](#ddos-attack-tools)\n- [Remote Administrator Tools (RAT)](#remote-administrator-tools--rat-)\n- [XSS Attack Tools](#xss-attack-tools)\n- [Steganograhy tools](#steganograhy-tools)\n- [Other tools](#other-tools)\n    - [SocialMedia Bruteforce](#socialmedia-bruteforce)\n    - [Android Hacking tools](#android-hacking-tools)\n    - [IDN Homograph Attack](#idn-homograph-attack)\n    - [Email Verify tools](#email-verify-tools)\n    - [Hash cracking tools](#hash-cracking-tools)\n    - [Wifi Deauthenticate](#wifi-deauthenticate)\n    - [SocialMedia Finder](#socialmedia-finder)\n    - [Payload Injector](#payload-injector)\n    - [Web crawling](#web-crawling)\n    - [Mix tools](#mix-tools)\n\n\n### Anonymously Hiding Tools\n- [Anonmously Surf](https://github.com/Und3rf10w/kali-anonsurf)\n- [Multitor](https://github.com/trimstray/multitor)\n### Information gathering tools\n- [Network Map (nmap)](https://github.com/nmap/nmap)\n- [Dracnmap](https://github.com/Screetsec/Dracnmap)\n- Port scanning\n- Host to IP \n- [Xerosploit](https://github.com/LionSec/xerosploit)\n- [RED HAWK (All In One Scanning)](https://github.com/Tuhinshubhra/RED_HAWK)\n- [ReconSpider(For All Scanning)](https://github.com/bhavsec/reconspider)\n- IsItDown (Check Website Down/Up)\n- [Infoga - Email OSINT](https://github.com/m4ll0k/Infoga)\n- [ReconDog](https://github.com/s0md3v/ReconDog)\n- [Striker](https://github.com/s0md3v/Striker)\n- [SecretFinder (like API & etc)](https://github.com/m4ll0k/SecretFinder)\n- [Find Info Using Shodan](https://github.com/m4ll0k/Shodanfy.py)\n- [Port Scanner - rang3r (Python 2.7)](https://github.com/floriankunushevci/rang3r)\n- [Port Scanner - Ranger Reloaded (Python 3+)](https://github.com/joeyagreco/ranger-reloaded)\n- [Breacher](https://github.com/s0md3v/Breacher)\n### Wordlist Generator\n- [Cupp](https://github.com/Mebus/cupp.git)\n- [WordlistCreator](https://github.com/Z4nzu/wlcreator)\n- [Goblin WordGenerator](https://github.com/UndeadSec/GoblinWordGenerator.git)\n- [Password list (1.4 Billion Clear Text Password)](https://github.com/Viralmaniar/SMWYG-Show-Me-What-You-Got)\n### Wireless attack tools\n- [WiFi-Pumpkin](https://github.com/P0cL4bs/wifipumpkin3)\n- [pixiewps](https://github.com/wiire/pixiewps)\n- [Bluetooth Honeypot GUI Framework](https://github.com/andrewmichaelsmith/bluepot)\n- [Fluxion](https://github.com/thehackingsage/Fluxion)\n- [Wifiphisher](https://github.com/wifiphisher/wifiphisher)\n- [Wifite](https://github.com/derv82/wifite2)\n- [EvilTwin](https://github.com/Z4nzu/fakeap)\n- [Fastssh](https://github.com/Z4nzu/fastssh)\n- Howmanypeople\n### SQL Injection Tools\n- [Sqlmap tool](https://github.com/sqlmapproject/sqlmap)\n- [NoSqlMap](https://github.com/codingo/NoSQLMap)\n- [Damn Small SQLi Scanner](https://github.com/stamparm/DSSS)\n- [Explo](https://github.com/dtag-dev-sec/explo)\n- [Blisqy - Exploit Time-based blind-SQL injection](https://github.com/JohnTroony/Blisqy)\n- [Leviathan - Wide Range Mass Audit Toolkit](https://github.com/leviathan-framework/leviathan)\n- [SQLScan](https://github.com/Cvar1984/sqlscan)\n### Phishing attack tools\n- [Setoolkit](https://github.com/trustedsec/social-engineer-toolkit)\n- [SocialFish](https://github.com/UndeadSec/SocialFish)\n- [HiddenEye](https://github.com/DarkSecDevelopers/HiddenEye)\n- [Evilginx2](https://github.com/kgretzky/evilginx2)\n- [I-See_You(Get Location using phishing attack)](https://github.com/Viralmaniar/I-See-You)\n- [SayCheese (Grab target's Webcam Shots)](https://github.com/hangetzzu/saycheese)\n- [QR Code Jacking](https://github.com/cryptedwolf/ohmyqr)\n- [ShellPhish](https://github.com/An0nUD4Y/shellphish)\n- [BlackPhish](https://github.com/iinc0gnit0/BlackPhish)\n### Web Attack tools\n- [Web2Attack](https://github.com/santatic/web2attack)\n- Skipfish\n- [SubDomain Finder](https://github.com/aboul3la/Sublist3r)\n- [CheckURL](https://github.com/UndeadSec/checkURL)\n- [Blazy(Also Find ClickJacking)](https://github.com/UltimateHackers/Blazy)\n- [Sub-Domain TakeOver](https://github.com/m4ll0k/takeover)\n- [Dirb](https://gitlab.com/kalilinux/packages/dirb)\n### Post exploitation tools\n- [Vegile - Ghost In The Shell](https://github.com/Screetsec/Vegile)\n- [Chrome Keylogger](https://github.com/UndeadSec/HeraKeylogger)\n### Forensic tools\n- Autopsy\n- Wireshark\n- [Bulk extractor](https://github.com/simsong/bulk_extractor)\n- [Disk Clone and ISO Image Acquire](https://guymager.sourceforge.io/)\n- [Toolsley](https://www.toolsley.com/)\n- [Volatility3](https://github.com/volatilityfoundation/volatility3/)\n### Payload creation tools\n- [The FatRat](https://github.com/Screetsec/TheFatRat)\n- [Brutal](https://github.com/Screetsec/Brutal)\n- [Stitch](https://nathanlopez.github.io/Stitch)\n- [MSFvenom Payload Creator](https://github.com/g0tmi1k/msfpc)\n- [Venom Shellcode Generator](https://github.com/r00t-3xp10it/venom)\n- [Spycam](https://github.com/indexnotfound404/spycam)\n- [Mob-Droid](https://github.com/kinghacker0/Mob-Droid)\n- [Enigma](https://github.com/UndeadSec/Enigma)\n### Exploit framework\n- [RouterSploit](https://github.com/threat9/routersploit)\n- [WebSploit](https://github.com/The404Hacking/websploit )\n- [Commix](https://github.com/commixproject/commix)\n- [Web2Attack](https://github.com/santatic/web2attack)\n### Reverse engineering tools\n- [Androguard](https://github.com/androguard/androguard )\n- [Apk2Gold](https://github.com/lxdvs/apk2gold )\n- [JadX](https://github.com/skylot/jadx)\n### DDOS Attack Tools\n- SlowLoris\n- [Asyncrone | Multifunction SYN Flood DDoS Weapon](https://github.com/fatihsnsy/aSYNcrone)\n- [UFOnet](https://github.com/epsylon/ufonet)\n- [GoldenEye](https://github.com/jseidl/GoldenEye)\n### Remote Administrator Tools (RAT)\n- [Stitch](https://github.com/nathanlopez/Stitch)\n- [Pyshell](https://github.com/knassar702/pyshell)\n### XSS Attack Tools\n- [DalFox(Finder of XSS)](https://github.com/hahwul/dalfox)\n- [XSS Payload Generator](https://github.com/capture0x/XSS-LOADER.git)\n- [Extended XSS Searcher and Finder](https://github.com/Damian89/extended-xss-search)\n- [XSS-Freak](https://github.com/PR0PH3CY33/XSS-Freak)\n- [XSpear](https://github.com/hahwul/XSpear)\n- [XSSCon](https://github.com/menkrep1337/XSSCon)\n- [XanXSS](https://github.com/Ekultek/XanXSS)\n- [Advanced XSS Detection Suite](https://github.com/UltimateHackers/XSStrike)\n- [RVuln](https://github.com/iinc0gnit0/RVuln)\n- [Cyclops](https://github.com/v8blink/Chromium-based-XSS-Taint-Tracking) \n### Steganograhy tools\n- SteganoHide\n- StegnoCracker\n- [StegoCracker](https://github.com/W1LDN16H7/StegoCracker)\n- [Whitespace](https://github.com/beardog108/snow10)\n### Other tools\n#### SocialMedia Bruteforce\n- [Instagram Attack](https://github.com/chinoogawa/instaBrute)\n- [AllinOne SocialMedia Attack](https://github.com/Matrix07ksa/Brute_Force)\n- [Facebook Attack](https://github.com/Matrix07ksa/Brute_Force)\n- [Application Checker](https://github.com/jakuta-tech/underhanded)\n#### Android Hacking tools\n- [Keydroid](https://github.com/F4dl0/keydroid)\n- [MySMS](https://github.com/papusingh2sms/mysms)\n- [Lockphish (Grab target LOCK PIN)](https://github.com/JasonJerry/lockphish)\n- [DroidCam (Capture Image)](https://github.com/kinghacker0/WishFish)\n- [EvilApp (Hijack Session)](https://github.com/crypticterminal/EvilApp)\n- [HatCloud(Bypass CloudFlare for IP)](https://github.com/HatBashBR/HatCloud)\n#### IDN Homograph Attack\n- [EvilURL](https://github.com/UndeadSec/EvilURL)\n#### Email Verify tools\n- [Knockmail](https://github.com/4w4k3/KnockMail)\n#### Hash cracking tools\n- [Hash Buster](https://github.com/s0md3v/Hash-Buster)\n#### Wifi Deauthenticate\n- [WifiJammer-NG](https://github.com/MisterBianco/wifijammer-ng)\n- [KawaiiDeauther](https://github.com/aryanrtm/KawaiiDeauther)\n#### SocialMedia Finder\n- [Find SocialMedia By Facial Recognation System](https://github.com/Greenwolf/social_mapper)\n- [Find SocialMedia By UserName](https://github.com/xHak9x/finduser)\n- [Sherlock](https://github.com/sherlock-project/sherlock)\n- [SocialScan | Username or Email](https://github.com/iojw/socialscan)\n#### Payload Injector\n- [Debinject](https://github.com/UndeadSec/Debinject)\n- [Pixload](https://github.com/chinarulezzz/pixload)\n#### Web crawling\n- [Gospider](https://github.com/jaeles-project/gospider)\n#### Mix tools\n- Terminal Multiplexer\n\n\n![](https://github.com/Z4nzu/hackingtool/blob/master/images/A00.png)\n![](https://github.com/Z4nzu/hackingtool/blob/master/images/A0.png)\n![](https://github.com/Z4nzu/hackingtool/blob/master/images/A1.png)\n![](https://github.com/Z4nzu/hackingtool/blob/master/images/A2.png)\n![](https://github.com/Z4nzu/hackingtool/blob/master/images/A4.png)\n\n## Installation For Linux <img src=\"https://konpa.github.io/devicon/devicon.git/icons/linux/linux-original.svg\" alt=\"linux\" width=\"25\" height=\"25\"/></p><p align=\"center\">\n\n\n### !! RUN HACKINGTOOL AS ROOT !! \n\n\n## Steps are given below : \n\n\n## Step : 1 Download hackingtool\n\n    git clone https://github.com/Z4nzu/hackingtool.git\n\n## Step : 2 Give Permission to hackingtool\n    \n    chmod -R 755 hackingtool  \n\n## Step : 3 Move to hackingtool directory\n\n    cd hackingtool\n\n## Step : 4 Run hackingtool\n    \n    sudo bash install.sh\n\n## Step : 5 For installing tools in directory\n\n    sudo hackingtool\n\n\n## Use image with Docker\n\n### Create Docker Image\n- Create the docker image \n\n```bash\ndocker buitl -t vgpastor/hackingtool .\n```\n\n### Run as container \n\n```bash\ndocker-compose up -d\n```\n\n### Interact with terminal\n\n- Get into the container \n```bash\ndocker exec -it hackingtool bash\n```\n**OUTPUT:**\n```bash\nSelect Best Option : \n\n              [1] Kali Linux / Parrot-Os (apt)\n              [2] Arch Linux (pacman)\n              [0] Exit \n```\nEnter the options and continue.\n\n- If need open other ports you can edit the docker-compose.yml file\n- Volumes are mounted in the container to persist data and can share files between the host and the container\n\n\n#### Thanks to original Author of the tools used in hackingtool\n\n<img src =\"https://img.shields.io/badge/Important-notice-red\" />\n<h4>Please Don't Use for illegal Activity</h4>\n\n### To do \n- [ ] Release Tool \n- [ ] Add Tools for CTF\n- [ ] Want to do automatic \n\n## Social Media :mailbox_with_no_mail:\n[![Twitter](https://img.shields.io/twitter/url?color=%231DA1F2&label=follow&logo=twitter&logoColor=%231DA1F2&style=flat-square&url=https%3A%2F%2Fwww.reddit.com%2Fuser%2FFatChicken277)](https://twitter.com/_Zinzu07)\n[![GitHub](https://img.shields.io/badge/-GitHub-181717?style=flat-square&logo=github&link=https://github.com/Z4nzu/)](https://github.com/Z4nzu/)\n##### Your Favourite Tool is not in hackingtool or Suggestions Please [CLICK HERE](https://forms.gle/b235JoCKyUq5iM3t8)\n![Z4nzu's github stats](https://github-readme-stats.vercel.app/api?username=Z4nzu&show_icons=true&title_color=fff&icon_color=79ff97&text_color=9f9f9f&bg_color=151515)\n\n#### Don't Forgot to share with Your Friends \n### The new Update get will soon stay updated\n#### Thank you..!!\n"
        },
        {
          "name": "README_template.md",
          "type": "blob",
          "size": 3.10546875,
          "content": "### All in One Hacking tool For Hackers🥇\n![](https://img.shields.io/github/license/Z4nzu/hackingtool)\n![](https://img.shields.io/github/issues/Z4nzu/hackingtool)\n![](https://img.shields.io/github/issues-closed/Z4nzu/hackingtool)\n![](https://img.shields.io/badge/Python-3-blue)\n![](https://img.shields.io/github/forks/Z4nzu/hackingtool)\n![](https://img.shields.io/github/stars/Z4nzu/hackingtool)\n![](https://img.shields.io/github/last-commit/Z4nzu/hackingtool)\n[![HitCount](http://hits.dwyl.com/Z4nzu/hackingtool.svg)](http://hits.dwyl.com/Z4nzu/hackingtool)\n![](https://img.shields.io/badge/platform-Linux%20%7C%20KaliLinux%20%7C%20ParrotOs-blue)\n\n#### How to run the Kali Linux CLI on Windows 10 without running a VM [YOUTUBE](https://youtu.be/BsFhpIDcd9I)\n\n## Update available V1.1.0 🚀 \n- [x] Added New Tools \n    - [x] Reverse Engineering\n    - [x] RAT Tools\n    - [x] Web Crawling \n    - [x] Payload Injector\n- [x] Multitor Tools update\n- [X] Added Tool in Wifi-Jamming\n\n\n# Hackingtool Menu 🧰\n\n![](https://github.com/Z4nzu/hackingtool/blob/master/images/A00.png)\n![](https://github.com/Z4nzu/hackingtool/blob/master/images/A0.png)\n![](https://github.com/Z4nzu/hackingtool/blob/master/images/A1.png)\n![](https://github.com/Z4nzu/hackingtool/blob/master/images/A2.png)\n![](https://github.com/Z4nzu/hackingtool/blob/master/images/A4.png)\n\n## Installation guide for Linux <img src=\"https://konpa.github.io/devicon/devicon.git/icons/linux/linux-original.svg\" alt=\"linux\" width=\"25\" height=\"25\"/></p><p align=\"center\">\n\n#### THIS TOOL MUST BE RUN AS ROOT !!! run these following commands below ONE AT A TIME \n\n    git clone https://github.com/Z4nzu/hackingtool.git\n    \n    chmod -R 755 hackingtool  \n    \n    cd hackingtool\n    \n    sudo pip3 install -r requirements.txt\n    \n    bash install.sh\n    \n    sudo hackingtool\n\nAfter all steps are completed, run the following command ---> **root@kaliLinux:~** **hackingtool**\n\n#### Thanks to original Author of the tools used in hackingtool\n\n<img src =\"https://img.shields.io/badge/Important-notice-red\" />\n<h4>Please Don't Use for illegal Activity</h4>\n\n### To do \n- [ ] Fully release tool \n- [ ] Add Tools for CTF\n- [ ] Want to do automatic \n\n## Social Media :mailbox_with_no_mail:\n[![Twitter](https://img.shields.io/twitter/url?color=%231DA1F2&label=follow&logo=twitter&logoColor=%231DA1F2&style=flat-square&url=https%3A%2F%2Fwww.reddit.com%2Fuser%2FFatChicken277)](https://twitter.com/_Zinzu07)\n[![GitHub](https://img.shields.io/badge/-GitHub-181717?style=flat-square&logo=github&link=https://github.com/Z4nzu/)](https://github.com/Z4nzu/)\n##### If you favorite tool is not included, or you have any suggestions, please [CLICK HERE](https://forms.gle/b235JoCKyUq5iM3t8)\n![Z4nzu's github stats](https://github-readme-stats.vercel.app/api?username=Z4nzu&show_icons=true&title_color=fff&icon_color=79ff97&text_color=9f9f9f&bg_color=151515)\n\n<a href=\"https://www.buymeacoffee.com/Zinzu\" target=\"_blank\"><img src=\"https://cdn.buymeacoffee.com/buttons/arial-yellow.png\" alt=\"Buy Me A Coffee\" style=\"height: 50px !important;width: 50px !important;\"></a>\n\n#### Don't forget to share this tool with your friends!\n#### Thank you!!!\n"
        },
        {
          "name": "core.py",
          "type": "blob",
          "size": 5.4365234375,
          "content": "import os\nimport sys\nimport webbrowser\nfrom platform import system\nfrom traceback import print_exc\nfrom typing import Callable\nfrom typing import List\nfrom typing import Tuple\n\n\ndef clear_screen():\n    os.system(\"cls\" if system() == \"Windows\" else \"clear\")\n\n\ndef validate_input(ip, val_range):\n    val_range = val_range or []\n    try:\n        ip = int(ip)\n        if ip in val_range:\n            return ip\n    except Exception:\n        return None\n    return None\n\n\nclass HackingTool(object):\n    # About the HackingTool\n    TITLE: str = \"\"  # used to show info in the menu\n    DESCRIPTION: str = \"\"\n\n    INSTALL_COMMANDS: List[str] = []\n    INSTALLATION_DIR: str = \"\"\n\n    UNINSTALL_COMMANDS: List[str] = []\n\n    RUN_COMMANDS: List[str] = []\n\n    OPTIONS: List[Tuple[str, Callable]] = []\n\n    PROJECT_URL: str = \"\"\n\n    def __init__(self, options = None, installable: bool = True,\n                 runnable: bool = True):\n        options = options or []\n        if isinstance(options, list):\n            self.OPTIONS = []\n            if installable:\n                self.OPTIONS.append(('Install', self.install))\n            if runnable:\n                self.OPTIONS.append(('Run', self.run))\n            self.OPTIONS.extend(options)\n        else:\n            raise Exception(\n                \"options must be a list of (option_name, option_fn) tuples\")\n\n    def show_info(self):\n        desc = self.DESCRIPTION\n        if self.PROJECT_URL:\n            desc += '\\n\\t[*] '\n            desc += self.PROJECT_URL\n        os.system(f'echo \"{desc}\"|boxes -d boy | lolcat')\n\n    def show_options(self, parent = None):\n        clear_screen()\n        self.show_info()\n        for index, option in enumerate(self.OPTIONS):\n            print(f\"[{index + 1}] {option[0]}\")\n        if self.PROJECT_URL:\n            print(f\"[{98}] Open project page\")\n        print(f\"[{99}] Back to {parent.TITLE if parent is not None else 'Exit'}\")\n        option_index = input(\"Select an option : \").strip()\n        try:\n            option_index = int(option_index)\n            if option_index - 1 in range(len(self.OPTIONS)):\n                ret_code = self.OPTIONS[option_index - 1][1]()\n                if ret_code != 99:\n                    input(\"\\n\\nPress ENTER to continue:\").strip()\n            elif option_index == 98:\n                self.show_project_page()\n            elif option_index == 99:\n                if parent is None:\n                    sys.exit()\n                return 99\n        except (TypeError, ValueError):\n            print(\"Please enter a valid option\")\n            input(\"\\n\\nPress ENTER to continue:\").strip()\n        except Exception:\n            print_exc()\n            input(\"\\n\\nPress ENTER to continue:\").strip()\n        return self.show_options(parent = parent)\n\n    def before_install(self):\n        pass\n\n    def install(self):\n        self.before_install()\n        if isinstance(self.INSTALL_COMMANDS, (list, tuple)):\n            for INSTALL_COMMAND in self.INSTALL_COMMANDS:\n                os.system(INSTALL_COMMAND)\n            self.after_install()\n\n    def after_install(self):\n        print(\"Successfully installed!\")\n\n    def before_uninstall(self) -> bool:\n        \"\"\" Ask for confirmation from the user and return \"\"\"\n        return True\n\n    def uninstall(self):\n        if self.before_uninstall():\n            if isinstance(self.UNINSTALL_COMMANDS, (list, tuple)):\n                for UNINSTALL_COMMAND in self.UNINSTALL_COMMANDS:\n                    os.system(UNINSTALL_COMMAND)\n            self.after_uninstall()\n\n    def after_uninstall(self):\n        pass\n\n    def before_run(self):\n        pass\n\n    def run(self):\n        self.before_run()\n        if isinstance(self.RUN_COMMANDS, (list, tuple)):\n            for RUN_COMMAND in self.RUN_COMMANDS:\n                os.system(RUN_COMMAND)\n            self.after_run()\n\n    def after_run(self):\n        pass\n\n    def is_installed(self, dir_to_check = None):\n        print(\"Unimplemented: DO NOT USE\")\n        return \"?\"\n\n    def show_project_page(self):\n        webbrowser.open_new_tab(self.PROJECT_URL)\n\n\nclass HackingToolsCollection(object):\n    TITLE: str = \"\"  # used to show info in the menu\n    DESCRIPTION: str = \"\"\n    TOOLS = []  # type: List[Any[HackingTool, HackingToolsCollection]]\n\n    def __init__(self):\n        pass\n\n    def show_info(self):\n        os.system(\"figlet -f standard -c {} | lolcat\".format(self.TITLE))\n        # os.system(f'echo \"{self.DESCRIPTION}\"|boxes -d boy | lolcat')\n        # print(self.DESCRIPTION)\n\n    def show_options(self, parent = None):\n        clear_screen()\n        self.show_info()\n        for index, tool in enumerate(self.TOOLS):\n            print(f\"[{index} {tool.TITLE}\")\n        print(f\"[{99}] Back to {parent.TITLE if parent is not None else 'Exit'}\")\n        tool_index = input(\"Choose a tool to proceed: \").strip()\n        try:\n            tool_index = int(tool_index)\n            if tool_index in range(len(self.TOOLS)):\n                ret_code = self.TOOLS[tool_index].show_options(parent = self)\n                if ret_code != 99:\n                    input(\"\\n\\nPress ENTER to continue:\").strip()\n            elif tool_index == 99:\n                if parent is None:\n                    sys.exit()\n                return 99\n        except (TypeError, ValueError):\n            print(\"Please enter a valid option\")\n            input(\"\\n\\nPress ENTER to continue:\").strip()\n        except Exception:\n            print_exc()\n            input(\"\\n\\nPress ENTER to continue:\").strip()\n        return self.show_options(parent = parent)\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.19921875,
          "content": "version: \"3.9\"\nservices:\n  hackingtool:\n    image: vgpastor/hackingtool\n    container_name: hackingtool\n    stdin_open: true\n    tty: true\n    volumes:\n      - .:/root/hackingtool\n    ports:\n      - 22:22"
        },
        {
          "name": "generate_readme.py",
          "type": "blob",
          "size": 1.4345703125,
          "content": "import re\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\nfrom hackingtool import all_tools\n\n\ndef sanitize_anchor(s):\n    return re.sub(r\"\\W\", \"-\", s.lower())\n\n\ndef get_toc(tools, indentation = \"\"):\n    md = \"\"\n    for tool in tools:\n        if isinstance(tool, HackingToolsCollection):\n            md += (indentation + \"- [{}](#{})\\n\".format(\n                tool.TITLE, sanitize_anchor(tool.TITLE)))\n            md += get_toc(tool.TOOLS, indentation = indentation + '    ')\n    return md\n\n\ndef get_tools_toc(tools, indentation = \"##\"):\n    md = \"\"\n    for tool in tools:\n        if isinstance(tool, HackingToolsCollection):\n            md += (indentation + \"# {}\\n\".format(tool.TITLE))\n            md += get_tools_toc(tool.TOOLS, indentation = indentation + '#')\n        elif isinstance(tool, HackingTool):\n            if tool.PROJECT_URL:\n                md += (\"- [{}]({})\\n\".format(tool.TITLE, tool.PROJECT_URL))\n            else:\n                md += (\"- {}\\n\".format(tool.TITLE))\n    return md\n\n\ndef generate_readme():\n    toc = get_toc(all_tools[:-1])\n    tools_desc = get_tools_toc(all_tools[:-1])\n\n    with open(\"README_template.md\") as fh:\n        readme_template = fh.read()\n\n    readme_template = readme_template.replace(\"{{toc}}\", toc)\n    readme_template = readme_template.replace(\"{{tools}}\", tools_desc)\n\n    with open(\"README.md\", \"w\") as fh:\n        fh.write(readme_template)\n\n\nif __name__ == '__main__':\n    generate_readme()\n"
        },
        {
          "name": "hackingtool.py",
          "type": "blob",
          "size": 5.9482421875,
          "content": "#!/usr/bin/env python3\n# Version 1.1.0\nimport os\nimport sys\nimport webbrowser\nfrom platform import system\nfrom time import sleep\n\nfrom core import HackingToolsCollection\nfrom tools.anonsurf import AnonSurfTools\nfrom tools.ddos import DDOSTools\nfrom tools.exploit_frameworks import ExploitFrameworkTools\nfrom tools.forensic_tools import ForensicTools\nfrom tools.information_gathering_tools import InformationGatheringTools\nfrom tools.other_tools import OtherTools\nfrom tools.payload_creator import PayloadCreatorTools\nfrom tools.phising_attack import PhishingAttackTools\nfrom tools.post_exploitation import PostExploitationTools\nfrom tools.remote_administration import RemoteAdministrationTools\nfrom tools.reverse_engineering import ReverseEngineeringTools\nfrom tools.sql_tools import SqlInjectionTools\nfrom tools.steganography import SteganographyTools\nfrom tools.tool_manager import ToolManager\nfrom tools.webattack import WebAttackTools\nfrom tools.wireless_attack_tools import WirelessAttackTools\nfrom tools.wordlist_generator import WordlistGeneratorTools\nfrom tools.xss_attack import XSSAttackTools\n\nlogo = \"\"\"\\033[33m\n   ▄█    █▄       ▄████████  ▄████████    ▄█   ▄█▄  ▄█  ███▄▄▄▄      ▄██████▄           ███      ▄██████▄   ▄██████▄   ▄█       \n  ███    ███     ███    ███ ███    ███   ███ ▄███▀ ███  ███▀▀▀██▄   ███    ███      ▀█████████▄ ███    ███ ███    ███ ███       \n  ███    ███     ███    ███ ███    █▀    ███▐██▀   ███▌ ███   ███   ███    █▀          ▀███▀▀██ ███    ███ ███    ███ ███       \n ▄███▄▄▄▄███▄▄   ███    ███ ███         ▄█████▀    ███▌ ███   ███  ▄███                 ███   ▀ ███    ███ ███    ███ ███       \n▀▀███▀▀▀▀███▀  ▀███████████ ███        ▀▀█████▄    ███▌ ███   ███ ▀▀███ ████▄           ███     ███    ███ ███    ███ ███       \n  ███    ███     ███    ███ ███    █▄    ███▐██▄   ███  ███   ███   ███    ███          ███     ███    ███ ███    ███ ███       \n  ███    ███     ███    ███ ███    ███   ███ ▀███▄ ███  ███   ███   ███    ███          ███     ███    ███ ███    ███ ███▌    ▄ \n  ███    █▀      ███    █▀  ████████▀    ███   ▀█▀ █▀    ▀█   █▀    ████████▀          ▄████▀    ▀██████▀   ▀██████▀  █████▄▄██ \n                                         ▀                                                                            ▀                             \n                                    \\033[34m[✔] https://github.com/Z4nzu/hackingtool   [✔]\n                                    \\033[34m[✔]            Version 1.1.0               [✔]\n                                    \\033[91m[X] Please Don't Use For illegal Activity  [X]\n\\033[97m \"\"\"\n\nall_tools = [\n    AnonSurfTools(),\n    InformationGatheringTools(),\n    WordlistGeneratorTools(),\n    WirelessAttackTools(),\n    SqlInjectionTools(),\n    PhishingAttackTools(),\n    WebAttackTools(),\n    PostExploitationTools(),\n    ForensicTools(),\n    PayloadCreatorTools(),\n    ExploitFrameworkTools(),\n    ReverseEngineeringTools(),\n    DDOSTools(),\n    RemoteAdministrationTools(),\n    XSSAttackTools(),\n    SteganographyTools(),\n    OtherTools(),\n    ToolManager()\n]\n\n\nclass AllTools(HackingToolsCollection):\n    TITLE = \"All tools\"\n    TOOLS = all_tools\n\n    def show_info(self):\n        print(logo + '\\033[0m \\033[97m')\n\n\nif __name__ == \"__main__\":\n    try:\n        if system() == 'Linux':\n            fpath = os.path.expanduser(\"~/hackingtoolpath.txt\")\n            if not os.path.exists(fpath):\n                os.system('clear')\n                # run.menu()\n                print(\"\"\"\n                        [@] Set Path (All your tools will be installed in that directory)\n                        [1] Manual \n                        [2] Default\n                \"\"\")\n                choice = input(\"Z4nzu =>> \").strip()\n\n                if choice == \"1\":\n                    inpath = input(\"Enter Path (with Directory Name) >> \").strip()\n                    with open(fpath, \"w\") as f:\n                        f.write(inpath)\n                    print(\"Successfully Set Path to: {}\".format(inpath))\n                elif choice == \"2\":\n                    autopath = \"/home/hackingtool/\"\n                    with open(fpath, \"w\") as f:\n                        f.write(autopath)\n                    print(\"Your Default Path Is: {}\".format(autopath))\n                    sleep(3)\n                else:\n                    print(\"Try Again..!!\")\n                    sys.exit(0)\n\n            with open(fpath) as f:\n                archive = f.readline()\n                os.makedirs(archive, exist_ok=True)\n                os.chdir(archive)\n                AllTools().show_options()\n\n        # If not Linux and probably Windows\n        elif system() == \"Windows\":\n            print(\n                r\"\\033[91m Please Run This Tool On A Debian System For Best Results\\e[00m\"\n            )\n            sleep(2)\n            webbrowser.open_new_tab(\"https://tinyurl.com/y522modc\")\n\n        else:\n            print(\"Please Check Your System or Open New Issue ...\")\n\n    except KeyboardInterrupt:\n        print(\"\\nExiting ..!!!\")\n        sleep(2)\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 7.81640625,
          "content": "#!/bin/bash\n\nset -e\n\nclear\n\nRED='\\e[1;31m'\nGREEN='\\e[1;32m'\nYELLOW='\\e[1;33m'\nBLUE='\\e[1;34m'\nCYAN='\\e[1;36m'\nWHITE='\\e[1;37m'\nORANGE='\\e[1;93m'\nNC='\\e[0m'\n\nif [[ $EUID -ne 0 ]]; then\n   echo -e \"${RED}This script must be run as root\"\n   exit 1\nfi\n\nCOLOR_NUM=$((RANDOM % 7))\n# Assign a color variable based on the random number\ncase $COLOR_NUM in\n    0) COLOR=$RED;;\n    1) COLOR=$GREEN;;\n    2) COLOR=$YELLOW;;\n    3) COLOR=$BLUE;;\n    4) COLOR=$CYAN;;\n    5) COLOR=$ORANGE;;\n    *) COLOR=$WHITE;;\nesac\n\necho -e \"${COLOR}\"\necho \"\"\necho \"   ▄█    █▄       ▄████████  ▄████████    ▄█   ▄█▄  ▄█  ███▄▄▄▄      ▄██████▄           ███      ▄██████▄   ▄██████▄   ▄█       \";\necho \"  ███    ███     ███    ███ ███    ███   ███ ▄███▀ ███  ███▀▀▀██▄   ███    ███      ▀█████████▄ ███    ███ ███    ███ ███       \";\necho \"  ███    ███     ███    ███ ███    █▀    ███▐██▀   ███▌ ███   ███   ███    █▀          ▀███▀▀██ ███    ███ ███    ███ ███       \";\necho \" ▄███▄▄▄▄███▄▄   ███    ███ ███         ▄█████▀    ███▌ ███   ███  ▄███                 ███   ▀ ███    ███ ███    ███ ███       \";\necho \"▀▀███▀▀▀▀███▀  ▀███████████ ███        ▀▀█████▄    ███▌ ███   ███ ▀▀███ ████▄           ███     ███    ███ ███    ███ ███       \";\necho \"  ███    ███     ███    ███ ███    █▄    ███▐██▄   ███  ███   ███   ███    ███          ███     ███    ███ ███    ███ ███       \";\necho \"  ███    ███     ███    ███ ███    ███   ███ ▀███▄ ███  ███   ███   ███    ███          ███     ███    ███ ███    ███ ███▌    ▄ \";\necho \"  ███    █▀      ███    █▀  ████████▀    ███   ▀█▀ █▀    ▀█   █▀    ████████▀          ▄████▀    ▀██████▀   ▀██████▀  █████▄▄██ \";\necho \"                                         ▀                                                                            ▀         \";\n\necho -e \"${BLUE}                                    https://github.com/Z4nzu/hackingtool ${NC}\"\necho -e \"${RED}                                     [!] This Tool Must Run As ROOT [!]${NC}\\n\"\necho -e \"${CYAN}              Select Best Option : \\n\"\necho -e \"${WHITE}              [1] Kali Linux / Parrot-Os (apt)\"\necho -e \"${WHITE}              [2] Arch Linux (pacman)\" # added arch linux support because of feature request #231\necho -e \"${WHITE}              [0] Exit \"\n\necho -e \"${COLOR}┌──($USER㉿$HOST)-[$(pwd)]\"\nchoice=$1\nif [[ ! $choice =~ ^[1-2]+$ ]]; then\n    read -p \"└─$>>\" choice\nfi\n\n# Define installation directories\ninstall_dir=\"/usr/share/hackingtool\"\nbin_dir=\"/usr/bin\"\n\n# Check if the user chose a valid option and perform the installation steps\nif [[ $choice =~ ^[1-2]+$ ]]; then\n    echo -e \"${YELLOW}[*] Checking Internet Connection ..${NC}\"\n    echo \"\";\n    if curl -s -m 10 https://www.google.com > /dev/null || curl -s -m 10 https://www.github.com > /dev/null; then\n        echo -e \"${GREEN}[✔] Internet connection is OK [✔]${NC}\"\n        echo \"\";\n        echo -e \"${YELLOW}[*] Updating package list ...\"\n        # Perform installation steps based on the user's choice\n        if [[ $choice == 1 ]]; then\n            sudo apt update -y && sudo apt upgrade -y\n            sudo apt-get install -y git python3-pip figlet boxes php curl xdotool wget -y ;\n        elif [[ $choice == 2 ]]; then\n            sudo pacman -Suy -y\n            sudo pacman -S python-pip -y  \n        else\n            exit\n        fi\n        echo \"\";\n        echo -e \"${YELLOW}[*] Checking directories...${NC}\"\n        if [[ -d \"$install_dir\" ]]; then\n            echo -e -n \"${RED}[!] The directory $install_dir already exists. Do you want to replace it? [y/n]: ${NC}\"\n            read input\n            if [[ $input == \"y\" ]] || [[ $input == \"Y\" ]]; then\n                echo -e \"${YELLOW}[*]Removing existing module.. ${NC}\"\n                sudo rm -rf \"$install_dir\"\n            else\n                echo -e \"${RED}[✘]Installation Not Required[✘] ${NC}\"\n                exit\n            fi\n        fi\n        echo \"\";\n        echo -e \"${YELLOW}[✔] Downloading hackingtool...${NC}\"\n        if sudo git clone https://github.com/Z4nzu/hackingtool.git $install_dir; then\n            # Install virtual environment\n            echo -e \"${YELLOW}[*] Installing Virtual Environment...${NC}\"\n            if [[ $choice == 1 ]]; then\n              sudo apt install python3-venv -y\n            elif [[ $choice == 2 ]]; then\n              echo \"Python 3.3+ comes with a module called venv.\";\n            fi\n            echo \"\";\n            # Create a virtual environment for the tool\n            echo -e \"${YELLOW}[*] Creating virtual environment...\"\n            sudo python3 -m venv $install_dir/venv\n            source $install_dir/venv/bin/activate\n            # Install requirements\n            echo -e \"${GREEN}[✔] Virtual Environment successfully [✔]${NC}\";\n            echo \"\";\n            echo -e \"${YELLOW}[*] Installing requirements...${NC}\"\n            if [[ $choice == 1 ]]; then\n                pip3 install -r $install_dir/requirements.txt\n                sudo apt install figlet -y\n            elif [[ $choice == 2 ]]; then\n                pip3 install -r $install_dir/requirements.txt\n                sudo -u $SUDO_USER git clone https://aur.archlinux.org/boxes.git && cd boxes\n                sudo -u $SUDO_USER makepkg -si\n                sudo pacman -S figlet -y\n            fi\n            # Create a shell script to launch the tool\n            echo -e \"${YELLOW}[*] Creating a shell script to launch the tool...\"\n#            echo '#!/bin/bash' > hackingtool.sh\n            echo '#!/bin/bash' > $install_dir/hackingtool.sh\n            echo \"source $install_dir/venv/bin/activate\" >> $install_dir/hackingtool.sh\n            echo \"python3 $install_dir/hackingtool.py \\$@\" >> $install_dir/hackingtool.sh\n            chmod +x $install_dir/hackingtool.sh\n            sudo mv $install_dir/hackingtool.sh $bin_dir/hackingtool\n            echo -e \"${GREEN}[✔] Script created successfully [✔]\"\n        else\n            echo -e \"${RED}[✘] Failed to download Hackingtool [✘]\"\n            exit 1\n        fi\n\n    else\n       echo -e \"${RED}[✘] Internet connection is not available [✘]${NC}\"\n       exit 1\n    fi\n\n    if [ -d $install_dir ]; then\n        echo \"\";\n        echo -e \"${GREEN}[✔] Successfully Installed [✔]\";\n        echo \"\";\n        echo \"\";\n        echo -e  \"${ORANGE}[+]+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[+]\"\n        echo     \"[+]                                                             [+]\"\n        echo -e  \"${ORANGE}[+]     ✔✔✔ Now Just Type In Terminal (hackingtool) ✔✔✔      [+]\"\n        echo     \"[+]                                                             [+]\"\n        echo -e  \"${ORANGE}[+]+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[+]\"\n    else\n        echo -e \"${RED}[✘] Installation Failed !!! [✘]\";\n        exit 1\n    fi\n\nelif [[ $choice == 0 ]]; then\n    echo -e \"${RED}[✘] Exiting tool [✘]\"\n    exit 1\nelse\n    echo -e \"${RED}[!] Select Valid Option [!]\"\nfi\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0263671875,
          "content": "boxes\nflask\nlolcat\nrequests"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "update.sh",
          "type": "blob",
          "size": 2.1474609375,
          "content": "#!/bin/bash\n\nRED='\\e[1;31m'\nGREEN='\\e[1;32m'\nYELLOW='\\e[1;33m'\nBLUE='\\e[1;34m'\n\necho \"███████╗██╗  ██╗███╗   ██╗███████╗██╗   ██╗    \";\necho \"╚══███╔╝██║  ██║████╗  ██║╚══███╔╝██║   ██║    \";\necho \"  ███╔╝ ███████║██╔██╗ ██║  ███╔╝ ██║   ██║    \";\necho \" ███╔╝  ╚════██║██║╚██╗██║ ███╔╝  ██║   ██║    \";\necho \"███████╗     ██║██║ ╚████║███████╗╚██████╔╝    \";\necho \"╚══════╝     ╚═╝╚═╝  ╚═══╝╚══════╝ ╚═════╝     \";\necho \"                                               \";\n\n# Check if the script is run as root\nif [[ $EUID -ne 0 ]]; then\n   echo -e \"${RED}[ERROR]\\e[0m This script must be run as root.\"\n   exit 1\nfi\n\ninstall_dir=\"/usr/share/hackingtool\"\n# Change to the directory containing the install.sh script\ncd $install_dir || { echo -e \"${RED}[ERROR]\\e[0m Could not change to directory containing install.sh.\"; exit 1; }\necho -e \"${YELLOW}[*] Checking Internet Connection ..${NC}\"\necho \"\";\nif curl -s -m 10 https://www.google.com > /dev/null || curl -s -m 10 https://www.github.com > /dev/null; then\n    echo -e \"${GREEN}[✔] Internet connection is OK [✔]${NC}\"\n    echo \"\"\nelse\n    echo -e \"${RED}[✘] Please check your internet connection[✘]\"\n    echo \"\"\n    exit 1\nfi\necho -e \"[*]Marking hackingtool directory as safe-directory\"\ngit config --global --add safe.directory $install_dir\n# Update the repository and the tool itself\necho -e \"${BLUE}[INFO]\\e[0m Updating repository and tool...\"\nif ! sudo git pull; then\n    echo -e \"${RED}[ERROR]\\e[0m Failed to update repository or tool.\"\n    exit 1\nfi\n\n# Re-run the installation script\necho -e \"${GREEN}[INFO]\\e[0m Running installation script...\"\nif ! sudo bash install.sh; then\n    echo -e \"${RED}[ERROR]\\e[0m Failed to run installation script.\"\n    exit 1\nfi\n\necho -e \"${GREEN}[SUCCESS]\\e[0m Tool updated successfully.\"\n"
        }
      ]
    }
  ]
}