{
  "metadata": {
    "timestamp": 1736561486811,
    "page": 42,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjQy",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Textualize/rich",
      "stars": 50277,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.19921875,
          "content": "[run]\nomit = rich/jupyter.py\n    rich/_windows.py\n    rich/_timer.py\n    rich/diagnose.py\n\n[report]\nexclude_lines =\n    pragma: no cover\n    if TYPE_CHECKING:\n    if __name__ == \"__main__\":\n    @overload\n"
        },
        {
          "name": ".faq",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.3427734375,
          "content": "*.ipynb\n.pytype\n.DS_Store\n.vscode\n.idea/\nmypy_report\ndocs/build\ndocs/source/_build\ntools/*.txt\nplayground/\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n# airspeed velocity\nbenchmarks/env/\nbenchmarks/html/\n\nsandbox/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.2470703125,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\nexclude: benchmarks/\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n      - id: check-ast\n      - id: check-builtin-literals\n      - id: check-case-conflict\n      - id: check-merge-conflict\n      - id: check-json\n      - id: check-toml\n      - id: check-yaml\n      - id: end-of-file-fixer\n      - id: mixed-line-ending\n      - id: check-vcs-permalinks\n      - id: check-shebang-scripts-are-executable\n      - id: trailing-whitespace\n  - repo: https://github.com/pre-commit/pygrep-hooks\n    rev: v1.10.0\n    hooks:\n      - id: python-check-mock-methods\n      - id: python-no-log-warn\n      - id: python-use-type-annotations\n      - id: rst-directive-colons\n      - id: rst-inline-touching-normal\n  - repo: https://github.com/hadialqattan/pycln\n    rev: v2.2.2\n    hooks:\n      - id: pycln\n        args: [--all]\n  - repo: https://github.com/psf/black-pre-commit-mirror\n    rev: 23.11.0\n    hooks:\n      - id: black\n        exclude: ^benchmarks/\n  - repo: https://github.com/PyCQA/isort\n    rev: 5.12.0\n    hooks:\n      - id: isort\n        name: isort (python)\n        language_version: \"3.11\"\n        args: [\"--profile\", \"black\"]\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.421875,
          "content": "# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/source/conf.py\n\n# Optionally build your docs in additional formats such as PDF and ePub\nformats: all\n\npython:\n  version: 3.8\n  install:\n    - requirements: docs/requirements.txt\n    - method: pip\n      path: .\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 69.2783203125,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n\n## [13.9.4] - 2024-11-01\n\n### Changed\n\n- Optimizations to cell_len which may speed up Rich / Textual output https://github.com/Textualize/rich/pull/3546\n\n## [13.9.3] - 2024-10-22\n\n### Fixed\n\n- Fixed broken regex that may have resulted in poor performance. https://github.com/Textualize/rich/pull/3535\n\n## [13.9.2] - 2024-10-04\n\n### Fixed\n\n- Fixed `Table` columns not highlighting when added by `add_row` https://github.com/Textualize/rich/issues/3517\n- Fixed an issue with Segment.split_cells reported in Textual https://github.com/Textualize/textual/issues/5090\n\n## [13.9.1] - 2024-10-01\n\n### Fixed\n\n- Fixed typing_extensions dependency\n\n## [13.9.0] - 2024-10-01\n\n### Changed\n\n- Dropped support for Python3.7 https://github.com/Textualize/rich/pull/3509\n- Rich will display tracebacks with finely grained error locations on python 3.11+ https://github.com/Textualize/rich/pull/3486\n\n### Fixed\n\n- Fixed issue with Segment._split_cells https://github.com/Textualize/rich/pull/3506\n- Fix auto detection of terminal size on Windows https://github.com/Textualize/rich/pull/2916\n- `Text.style` now respected in Panel title/subtitle https://github.com/Textualize/rich/pull/3509\n\n## [13.8.1] - 2024-09-10\n\n### Fixed\n\n- Added support for Python 3.13 https://github.com/Textualize/rich/pull/3481\n- Fixed infinite loop when appending Text to same instance https://github.com/Textualize/rich/pull/3480\n\n## [13.8.0] - 2024-08-26\n\n### Fixed\n\n- Fixed `Table` rendering of box elements so \"footer\" elements truly appear at bottom of table, \"mid\" elements in main table body.\n- Fixed styles in Panel when Text objects are used for title https://github.com/Textualize/rich/pull/3401\n- Fix pretty repr for `collections.deque` https://github.com/Textualize/rich/pull/2864\n- Thread used in progress.track will exit if an exception occurs in a generator https://github.com/Textualize/rich/pull/3402\n- Progress track thread is now a daemon thread https://github.com/Textualize/rich/pull/3402\n- Fixed cached hash preservation upon clearing meta and links https://github.com/Textualize/rich/issues/2942\n- Fixed overriding the `background_color` of `Syntax` not including padding https://github.com/Textualize/rich/issues/3295\n- Fixed pretty printing of dataclasses with a default repr in Python 3.13 https://github.com/Textualize/rich/pull/3455\n- Fixed selective enabling of highlighting when disabled in the `Console` https://github.com/Textualize/rich/issues/3419\n- Fixed BrokenPipeError writing an error message https://github.com/Textualize/rich/pull/3468\n- Fixed superfluous space above Markdown tables https://github.com/Textualize/rich/pull/3469\n- Fixed issue with record and capture interaction https://github.com/Textualize/rich/pull/3470\n- Fixed control codes breaking in `append_tokens` https://github.com/Textualize/rich/pull/3471\n- Fixed exception pretty printing a dataclass with missing fields https://github.com/Textualize/rich/pull/3472\n\n### Changed\n\n- `RichHandler` errors and warnings will now use different colors (red and yellow) https://github.com/Textualize/rich/issues/2825\n- Removed the empty line printed in jupyter while using `Progress` https://github.com/Textualize/rich/pull/2616\n- Running tests in environment with `FORCE_COLOR` or `NO_COLOR` environment variables\n- ansi decoder will now strip problematic private escape sequences (like `\\x1b7`) https://github.com/Textualize/rich/pull/3278/\n- Tree's ASCII_GUIDES and TREE_GUIDES constants promoted to class attributes\n- `rich.Text.highlight_regex` now accepts a regular expression object https://github.com/Textualize/rich/pull/3347\n\n### Added\n\n- Adds a `case_sensitive` parameter to `prompt.Prompt`. This determines if the\n  response is treated as case-sensitive. Defaults to `True`.\n- Added `Console.on_broken_pipe` https://github.com/Textualize/rich/pull/3468\n\n## [13.7.1] - 2024-02-28\n\n\n### Fixed\n\n- Updated the widths of some characters https://github.com/Textualize/rich/pull/3289\n\n### Added\n\n- Included a `name` attribute to the `Spinner` class https://github.com/Textualize/rich/pull/3359\n\n## [13.7.0] - 2023-11-15\n\n### Added\n\n- Adds missing parameters to Panel.fit https://github.com/Textualize/rich/issues/3142\n\n### Fixed\n\n- Some text goes missing during wrapping when it contains double width characters https://github.com/Textualize/rich/issues/3176\n- Ensure font is correctly inherited in exported HTML https://github.com/Textualize/rich/issues/3104\n- Fixed typing for `FloatPrompt`.\n\n## [13.6.0] - 2023-09-30\n\n### Added\n\n- Added Python 3.12 to classifiers.\n\n## [13.5.3] - 2023-09-17\n\n### Fixed\n\n- Markdown table rendering issue with inline styles and links https://github.com/Textualize/rich/issues/3115\n- Fix Markdown code blocks on a light background https://github.com/Textualize/rich/issues/3123\n\n## [13.5.2] - 2023-08-01\n\n### Fixed\n\n- Fixed Text.expand_tabs assertion error\n\n## [13.5.1] - 2023-07-31\n\n### Fixed\n\n- Fix tilde character (`~`) not included in link regex when printing to console https://github.com/Textualize/rich/issues/3057\n\n## [13.5.0] - 2023-07-29\n\n### Fixed\n\n- Fixed Text.expand_tabs not expanding spans.\n- Fixed TimeElapsedColumn from showing negative.\n- Fix for escaping strings with a trailing backslash https://github.com/Textualize/rich/issues/2987\n- Fixed exception in Markdown with partial table https://github.com/Textualize/rich/issues/3053\n- Fixed the HTML export template so that the `<html>` tag comes before the `<head>` tag https://github.com/Textualize/rich/issues/3021\n- Fixed issue with custom classes overwriting `__eq__` https://github.com/Textualize/rich/issues/2875\n- Fix rich.pretty.install breakage in iPython https://github.com/Textualize/rich/issues/3013\n\n### Added\n\n- Added Text.extend_style method.\n- Added Span.extend method.\n\n### Changed\n\n- Text.tab_size now defaults to `None` to indicate that Console.tab_size should be used.\n\n## [13.4.2] - 2023-06-12\n\n### Changed\n\n- Relaxed markdown-it-py dependency\n\n## [13.4.1] - 2023-05-31\n\n### Fixed\n\n- Fixed typing extensions import in markdown https://github.com/Textualize/rich/issues/2979\n\n## [13.4.0] - 2023-05-31\n\n### Added\n\n- Added support for tables in `Markdown` https://github.com/Textualize/rich/pull/2977\n\n## [13.3.5] - 2023-04-27\n\n### Fixed\n\n- Fixed italic indent guides in SVG output\n\n## [13.3.4] - 2023-04-12\n\n### Fixed\n\n- Fixed for `is_terminal` ignoring FORCE_COLOR https://github.com/Textualize/rich/pull/2923\n\n## [13.3.3] - 2023-02-27\n\n### Added\n\n- Added Style.clear_meta_and_links\n\n## [13.3.2] - 2023-02-04\n\n### Fixed\n\n- Reversed `pre` and `code` tags in base HTML format https://github.com/Textualize/rich/pull/2642\n- Fix syntax error when building with nuitka https://github.com/Textualize/rich/pull/2635\n- Fixed pretty printing of empty dataclass https://github.com/Textualize/rich/issues/2819\n- Use `Console(stderr=True)` in `rich.traceback.install` to support io redirection.\n- Fixes superfluous spaces in html output https://github.com/Textualize/rich/issues/2832\n- Fixed duplicate output in Jupyter https://github.com/Textualize/rich/pulls/2804\n- Filter ANSI character-encoding-change codes in `Text.from_ansi` parser\n- Fixes traceback failing when a frame filename is unreadable https://github.com/Textualize/rich/issues/2821\n- Fix for live update rendering console markup https://github.com/Textualize/rich/issues/2726\n\n### Added\n\n- Added Polish README\n\n\n### Changed\n\n- `rich.progress.track()` will now show the elapsed time after finishing the task https://github.com/Textualize/rich/pull/2659\n\n## [13.3.1] - 2023-01-28\n\n### Fixed\n\n- Fixed truecolor to eight bit color conversion https://github.com/Textualize/rich/pull/2785\n\n## [13.3.0] - 2023-01-27\n\n### Fixed\n\n- Fixed failing tests due to Pygments dependency https://github.com/Textualize/rich/issues/2757\n- Relaxed ipywidgets https://github.com/Textualize/rich/issues/2767\n\n### Added\n\n- Added `encoding` parameter in `Theme.read`\n\n\n## [13.2.0] - 2023-01-19\n\n### Changed\n\n- Switch Markdown parsing from commonmark to markdown-it-py https://github.com/Textualize/rich/pull/2439\n\n## [13.1.0] - 2023-01-14\n\n### Fixed\n\n- Fixed wrong filenames in Jupyter tracebacks https://github.com/Textualize/rich/issues/2271\n\n### Added\n\n- Added locals_hide_dunder and locals_hide_sunder to Tracebacks, to hide double underscore and single underscore locals. https://github.com/Textualize/rich/pull/2754\n\n### Changed\n\n- Tracebacks will now hide double underscore names from locals by default. Set `locals_hide_dunder=False` to restore previous behaviour.\n\n## [13.0.1] - 2023-01-06\n\n### Fixed\n\n- Fixed issue with Segment.split_cells for mixed single and double cell widths\n\n## [13.0.0] - 2022-12-30\n\n### Fixed\n\n- Reversed `pre` and `code` tags in base HTML format https://github.com/Textualize/rich/pull/2642\n- Improved detection of `attrs` library, that isn't confused by the presence of the `attr` library.\n- Fixed issue with `locals_max_length` parameter not being respected in Traceback https://github.com/Textualize/rich/issues/2649\n- Handling of broken `fileno` made more robust. Fixes https://github.com/Textualize/rich/issues/2645\n- Fixed missing `fileno` on FileProxy\n\n### Fixed\n\n- Fix type of `spinner_style` argument in `Console.status` https://github.com/Textualize/rich/pull/2613.\n\n### Changed\n\n- Bumped minimum Python version to 3.7 https://github.com/Textualize/rich/pull/2567\n- Pretty-printing of \"tagged\" `__repr__` results is now greedy when matching tags https://github.com/Textualize/rich/pull/2565\n- `progress.track` now supports deriving total from `__length_hint__`\n\n### Added\n\n- Add type annotation for key_separator of pretty.Node https://github.com/Textualize/rich/issues/2625\n\n\n## [12.6.0] - 2022-10-02\n\n### Added\n\n- Parse ANSI escape sequences in pretty repr https://github.com/Textualize/rich/pull/2470\n- Add support for `FORCE_COLOR` env var https://github.com/Textualize/rich/pull/2449\n- Allow a `max_depth` argument to be passed to the `install()` hook https://github.com/Textualize/rich/issues/2486\n- Document using `None` as name in `__rich_repr__` for tuple positional args https://github.com/Textualize/rich/pull/2379\n- Add `font_aspect_ratio` parameter in SVG export https://github.com/Textualize/rich/pull/2539/files\n- Added `Table.add_section` method. https://github.com/Textualize/rich/pull/2544\n\n### Fixed\n\n- Handle stdout/stderr being null https://github.com/Textualize/rich/pull/2513\n- Fix NO_COLOR support on legacy Windows https://github.com/Textualize/rich/pull/2458\n- Fix pretty printer handling of cyclic references https://github.com/Textualize/rich/pull/2524\n- Fix missing `mode` property on file wrapper breaking uploads via `requests` https://github.com/Textualize/rich/pull/2495\n- Fix mismatching default value of parameter `ensure_ascii` https://github.com/Textualize/rich/pull/2538\n- Remove unused height parameter in `Layout` class https://github.com/Textualize/rich/pull/2540\n- Fixed exception in Syntax.__rich_measure__ for empty files\n\n### Changed\n\n- Removed border from code blocks in Markdown\n\n## [12.5.2] - 2022-07-18\n\n### Added\n\n- Add Turkish Readme.\n\n## [12.5.1] - 2022-07-11\n\n### Fixed\n\n- Fixed missing typing extensions dependency on 3.9 https://github.com/Textualize/rich/issues/2386\n- Fixed Databricks Notebook is not detected as Jupyter environment. https://github.com/Textualize/rich/issues/2422\n\n## [12.5.0] - 2022-07-11\n\n### Added\n\n- Environment variables `JUPYTER_COLUMNS` and `JUPYTER_LINES` to control width and height of console in Jupyter\n- Markdown friendly `Box` style, `MARKDOWN`, for rendering tables ready to copy into markdown files\n- `inspect` will prefix coroutine functions with `async def`\n- `Style.__add__` will no longer return `NotImplemented`\n- Remove rich.\\_lru_cache\n\n### Changed\n\n- Default width of Jupyter console size is increased to 115\n- Optimized Segment.divide\n\n### Fixed\n\n- Fix Rich clobbering cursor style on Windows https://github.com/Textualize/rich/pull/2339\n- Fix text wrapping edge case https://github.com/Textualize/rich/pull/2296\n- Allow exceptions that are raised while a Live is rendered to be displayed and/or processed https://github.com/Textualize/rich/pull/2305\n- Fix crashes that can happen with `inspect` when docstrings contain some special control codes https://github.com/Textualize/rich/pull/2294\n- Fix edges used in first row of tables when `show_header=False` https://github.com/Textualize/rich/pull/2330\n- Fix interaction between `Capture` contexts and `Console(record=True)` https://github.com/Textualize/rich/pull/2343\n- Fixed hash issue in Styles class https://github.com/Textualize/rich/pull/2346\n- Fixed bug in `Segment.split_and_crop_lines`\n\n## [12.4.4] - 2022-05-24\n\n### Changed\n\n- Added clipping per line to SVG output to avoid box characters overlapping\n- Optimized SVG output\n\n## [12.4.3] - 2022-05-23\n\n### Changed\n\n- Further tweaks to SVG character matrix\n- Added clip rect to SVG to prevent box characters overlapping bottom of terminal\n\n## [12.4.2] - 2022-05-23\n\n### Fixed\n\n- Fix for SVG on Firefox\n\n### Changed\n\n- Removed excess margin from SVG, tweaked cell sizes to better render block characters\n\n## [12.4.1] - 2022-05-08\n\n### Fixed\n\n- Fix for default background color in SVG export https://github.com/Textualize/rich/issues/2260\n\n### Changed\n\n- Added a keyline around SVG terminals which is visible on dark backgrounds\n\n### Changed\n\n- Added a keyline around SVG terminals which is visible on dark backgrounds\n\n## [12.4.0] - 2022-05-07\n\n### Changed\n\n- Rebuilt SVG export to create a simpler SVG that is more portable\n- Fix render_lines crash when render height was negative https://github.com/Textualize/rich/pull/2246\n- Make objects from `rich.progress.open` forward the name of the internal handle https://github.com/Textualize/rich/pull/2254\n\n### Added\n\n- Add `padding` to Syntax constructor https://github.com/Textualize/rich/pull/2247\n\n## [12.3.0] - 2022-04-26\n\n### Added\n\n- Ability to change terminal window title https://github.com/Textualize/rich/pull/2200\n- Added show_speed parameter to progress.track which will show the speed when the total is not known\n- Python blocks can now opt out from being rendered in tracebacks's frames, by setting a `_rich_traceback_omit = True` in their local scope https://github.com/Textualize/rich/issues/2207\n\n### Fixed\n\n- Fall back to `sys.__stderr__` on POSIX systems when trying to get the terminal size (fix issues when Rich is piped to another process)\n- Fixed markup escaping issue https://github.com/Textualize/rich/issues/2187\n- Safari - Box appearing around SVG export https://github.com/Textualize/rich/pull/2201\n- Fixed recursion error in Jupyter progress bars https://github.com/Textualize/rich/issues/2047\n- Complex numbers are now identified by the highlighter https://github.com/Textualize/rich/issues/2214\n- Fix crash on IDLE and forced is_terminal detection to False because IDLE can't do escape codes https://github.com/Textualize/rich/issues/2222\n- Fixed missing blank line in traceback rendering https://github.com/Textualize/rich/issues/2206\n- Fixed running Rich with the current working dir was deleted https://github.com/Textualize/rich/issues/2197\n\n### Changed\n\n- Setting `total=None` on progress is now possible, and will display pulsing animation\n- Micro-optimization for Segment.divide\n\n## [12.2.0] - 2022-04-05\n\n### Changed\n\n- Bumped typing-extensions minimum to 4.0.0\n- Bumped minimum Python version to 3.6.3\n\n## [12.1.0] - 2022-04-03\n\n### Added\n\n- Progress.open and Progress.wrap_file method to track the progress while reading from a file or file-like object https://github.com/textualize/rich/pull/1759\n- SVG export functionality https://github.com/Textualize/rich/pull/2101\n- Adding Indonesian translation\n\n### Fixed\n\n- Add missing `end` keyword argument to `Text.from_markup` https://github.com/Textualize/rich/pull/2095\n- Fallback to text lexer when no lexer guessed https://github.com/Textualize/rich/pull/2133\n- Fixed issue with decoding ANSI reset https://github.com/Textualize/rich/issues/2112\n\n## [12.0.1] - 2022-03-22\n\n### Changed\n\n- Improve performance of cell_length https://github.com/Textualize/rich/pull/2061\n- Improve performance of chop_cells https://github.com/Textualize/rich/pull/2077\n\n### Fixed\n\n- Fix capturing stdout on legacy Windows https://github.com/Textualize/rich/pull/2066\n\n## [12.0.0] - 2022-03-10\n\n### Added\n\n- Added options to TimeRemainingColumn to render a compact time format and render elapsed time when a task is\n  finished. https://github.com/Textualize/rich/pull/1992\n- Added ProgressColumn `MofNCompleteColumn` to display raw `completed/total` column (similar to DownloadColumn,\n  but displays values as ints, does not convert to floats or add bit/bytes units).\n  https://github.com/Textualize/rich/pull/1941\n- Replace Colorama with win32 renderer https://github.com/Textualize/rich/pull/1993\n- Add support for namedtuples to `Pretty` https://github.com/Textualize/rich/pull/2031\n\n### Fixed\n\n- In Jupyter mode make the link target be set to \"\\_blank\"\n- Fix some issues with markup handling around \"[\" characters https://github.com/Textualize/rich/pull/1950\n- Fix syntax lexer guessing.\n- Fixed Pretty measure not respecting expand_all https://github.com/Textualize/rich/issues/1998\n- Collapsed definitions for single-character spinners, to save memory and reduce import time.\n- Fix print_json indent type in `__init__.py`\n- Fix error when inspecting object defined in REPL https://github.com/Textualize/rich/pull/2037\n- Fix incorrect highlighting of non-indented JSON https://github.com/Textualize/rich/pull/2038\n- Fixed height reset in complex renderables https://github.com/Textualize/rich/issues/2042\n\n### Changed\n\n- Improved support for enum.Flag in ReprHighlighter https://github.com/Textualize/rich/pull/1920\n- Tree now respects justify=None, i.e. won't pad to right https://github.com/Textualize/rich/issues/1690\n- Removed rich.tabulate which was marked for deprecation\n- Deprecated rich.align.AlignValues in favor of AlignMethod\n\n## [11.2.0] - 2022-02-08\n\n### Added\n\n- Add support for US spelling of \"gray\" in ANSI color names https://github.com/Textualize/rich/issues/1890\n- Added `rich.diagnose.report` to expose environment debugging logic as function https://github.com/Textualize/rich/pull/1917\n- Added classmethod `Progress.get_default_columns()` to get the default list of progress bar columns https://github.com/Textualize/rich/pull/1894\n\n### Fixed\n\n- Fixed performance issue in measuring text\n\n### Fixed\n\n- Fixed test failures on PyPy3 https://github.com/Textualize/rich/pull/1904\n\n## [11.1.0] - 2022-01-28\n\n### Added\n\n- Workaround for edge case of object from Faiss with no `__class__` https://github.com/Textualize/rich/issues/1838\n- Add Traditional Chinese readme\n- Add `Syntax.guess_lexer`, add support for more lexers (e.g. Django templates etc.) https://github.com/Textualize/rich/pull/1869\n- Add `lexer` parameter to `Syntax.from_path` to allow for overrides https://github.com/Textualize/rich/pull/1873\n\n### Fixed\n\n- Workaround for edge case of object from Faiss with no `__class__` https://github.com/Textualize/rich/issues/1838\n- Ensure `Syntax` always justifies left https://github.com/Textualize/rich/pull/1872\n- Handle classes in inspect when methods=True https://github.com/Textualize/rich/pull/1874\n\n## [11.0.0] - 2022-01-09\n\n### Added\n\n- Added max_depth arg to pretty printing https://github.com/Textualize/rich/issues/1585\n- Added `vertical_align` to Table.add_row https://github.com/Textualize/rich/issues/1590\n\n### Fixed\n\n- Fixed issue with pretty repr in jupyter notebook https://github.com/Textualize/rich/issues/1717\n- Fix Traceback theme defaults override user supplied styles https://github.com/Textualize/rich/issues/1786\n\n### Changed\n\n- **breaking** Deprecated rich.console.RenderGroup, now named rich.console.Group\n- **breaking** `Syntax.__init__` parameter `lexer_name` renamed to `lexer`\n- Syntax constructor accepts both str and now a pygments lexer https://github.com/Textualize/rich/pull/1748\n\n## [10.16.2] - 2021-01-02\n\n### Fixed\n\n- Fixed @ not being escaped in markup\n\n## [10.16.1] - 2021-12-15\n\n### Fixed\n\n- Fixed issues with overlapping tags https://github.com/textualize/rich/issues/1755\n\n## [10.16.0] - 2021-12-12\n\n### Fixed\n\n- Double print of progress bar in Jupyter https://github.com/textualize/rich/issues/1737\n\n### Added\n\n- Added Text.markup property https://github.com/textualize/rich/issues/1751\n\n## [10.15.2] - 2021-12-02\n\n### Fixed\n\n- Deadlock issue https://github.com/textualize/rich/issues/1734\n\n## [10.15.1] - 2021-11-29\n\n### Fixed\n\n- Reverted thread-safety fix for Live that introduced deadlock potential\n\n## [10.15.0] - 2021-11-28\n\n### Added\n\n- Added dynamic_progress.py to examples\n- Added ConsoleOptions.update_height\n- Fixed Padding not respecting height\n\n### Changed\n\n- Some optimizations for simple strings (with only single cell widths)\n\n### Fixed\n\n- Fixed issue with progress bar not rendering markup https://github.com/textualize/rich/issues/1721\n- Fixed race condition when exiting Live https://github.com/textualize/rich/issues/1530\n\n## [10.14.0] - 2021-11-16\n\n### Fixed\n\n- Fixed progress speed not updating when total doesn't change\n- Fixed superfluous new line in Status https://github.com/textualize/rich/issues/1662\n- Fixed Windows legacy width again\n- Fixed infinite loop in set_cell_size https://github.com/textualize/rich/issues/1682\n\n### Added\n\n- Added file protocol to URL highlighter https://github.com/textualize/rich/issues/1681\n- Added rich.protocol.rich_cast\n\n### Changed\n\n- Allowed `__rich__` to work recursively\n- Allowed Text classes to work with sep in print https://github.com/textualize/rich/issues/1689\n\n### Added\n\n- Added a `rich.text.Text.from_ansi` helper method for handling pre-formatted input strings https://github.com/textualize/rich/issues/1670\n\n## [10.13.0] - 2021-11-07\n\n### Added\n\n- Added json.dumps parameters to print_json https://github.com/textualize/rich/issues/1638\n\n### Fixed\n\n- Fixed an edge case bug when console module try to detect if they are in a tty at the end of a pytest run\n- Fixed a bug where logging handler raises an exception when running with pythonw (related to https://bugs.python.org/issue13807)\n- Fixed issue with TERM env vars that have more than one hyphen https://github.com/textualize/rich/issues/1640\n- Fixed missing new line after progress bar when terminal is not interactive https://github.com/textualize/rich/issues/1606\n- Fixed exception in IPython when disabling pprint with %pprint https://github.com/textualize/rich/issues/1646\n- Fixed issue where values longer than the console width produced invalid JSON https://github.com/textualize/rich/issues/1653\n- Fixes trailing comma when pretty printing dataclass with last field repr=False https://github.com/textualize/rich/issues/1599\n\n## Changed\n\n- Markdown codeblocks now word-wrap https://github.com/textualize/rich/issues/1515\n\n## [10.12.0] - 2021-10-06\n\n### Updated\n\n- Official Py3.10 release\n\n### Fixed\n\n- Fixed detection of custom repr when pretty printing dataclasses\n\n## [10.11.0] - 2021-09-24\n\n### Added\n\n- Added `suppress` parameter to tracebacks\n- Added `max_frames` parameter to tracebacks\n\n## [10.10.0] - 2021-09-18\n\n### Added\n\n- Added stdin support to `rich.json`\n\n### Fixed\n\n- Fixed pretty printing of objects with fo magic with **getattr** https://github.com/textualize/rich/issues/1492\n\n## [10.9.0] - 2021-08-29\n\n### Added\n\n- Added data parameter to print_json method / function\n- Added an --indent parameter to python -m rich.json\n\n### Changed\n\n- Changed default indent of JSON to 2 (down from 4)\n- Changed highlighting of JSON keys to new style (bold blue)\n\n## [10.8.0] - 2021-08-28\n\n### Added\n\n- Added Panel.subtitle\n- Added Panel.subtitle_align\n- Added rich.json.JSON\n- Added rich.print_json and Console.print_json\n\n### Fixed\n\n- Fixed a bug where calling `rich.reconfigure` within a `pytest_configure` hook would lead to a crash\n- Fixed highlight not being passed through options https://github.com/textualize/rich/issues/1404\n\n## [10.7.0] - 2021-08-05\n\n### Added\n\n- Added Text.apply_meta\n- Added meta argument to Text.assemble\n- Added Style.from_meta\n- Added Style.on\n- Added Text.on\n\n### Changed\n\n- Changed `RenderGroup` to `Group` and `render_group` to `group` (old names remain for compatibility but will be deprecated in the future)\n- Changed `rich.repr.RichReprResult` to `rich.repr.Result` (old names remain for compatibility but will be deprecated in the future)\n- Changed meta serialization to use pickle rather than marshal to permit callables\n\n## [10.6.0] - 2021-07-12\n\n### Deprecated\n\n- Added deprecation warning for tabulate_mapping which will be removed in v11.0.0\n\n### Added\n\n- Added precision argument to filesize.decimal\n- Added separator argument to filesize.decimal\n- Added \\_rich_traceback_guard to Traceback\n- Added emoji_variant to Console\n- Added -emoji and -text variant selectors to emoji code\n\n### Fixed\n\n- Fixed issue with adjoining color tags https://github.com/textualize/rich/issues/1334\n\n### Changed\n\n- Changed Console.size to use unproxied stdin and stdout\n\n## [10.5.0] - 2021-07-05\n\n### Fixed\n\n- Fixed Pandas objects not pretty printing https://github.com/textualize/rich/issues/1305\n- Fixed https://github.com/textualize/rich/issues/1256\n- Fixed typing with rich.repr.auto decorator\n- Fixed repr error formatting https://github.com/textualize/rich/issues/1326\n\n### Added\n\n- Added new_line_start argument to Console.print\n- Added Segment.divide method\n- Added Segment.split_cells method\n- Added segment.SegmentLines class\n\n## [10.4.0] - 2021-06-18\n\n### Added\n\n- Added Style.meta\n- Added rich.repr.auto decorator\n\n### Fixed\n\n- Fixed error pretty printing classes with special **rich_repr** method\n\n## [10.3.0] - 2021-06-09\n\n### Added\n\n- Added Console.size setter\n- Added Console.width setter\n- Added Console.height setter\n- Added angular style Rich reprs\n- Added an IPython extension. Load via `%load_ext rich`\n\n### Changed\n\n- Changed the logic for retrieving the calling frame in console logs to a faster one for the Python implementations that support it.\n\n## [10.2.2] - 2021-05-19\n\n### Fixed\n\n- Fixed status not rendering console markup https://github.com/textualize/rich/issues/1244\n\n## [10.2.1] - 2021-05-17\n\n### Fixed\n\n- Fixed panel in Markdown exploding https://github.com/textualize/rich/issues/1234\n\n## [10.2.0] - 2021-05-12\n\n### Added\n\n- Added syntax for call, i.e. \"Foo(bar)\"\n- Added Console.measure as a convenient alias for Measurement.get\n- Added support for pretty printing attrs objects\n- Added mappingproxy to pretty print\n- Added UserDict and UserList support to pretty printer\n\n### Changed\n\n- Changed colorama init to set strip=False\n- Changed highlighter for False, True, None to not match in the middle of a word. i.e. NoneType is no longer highlighted as None\n\n### Fixed\n\n- Fixed initial blank lines removed from Syntax https://github.com/textualize/rich/issues/1214\n\n## [10.1.0] - 2021-04-03\n\n### Fixed\n\n- Fixed support for jupyter qtconsole and similar Jupyter environments\n\n## [10.0.1] - 2021-03-30\n\n### Fixed\n\n- Fixed race condition that duplicated lines in progress https://github.com/textualize/rich/issues/1144\n\n## [10.0.0] - 2021-03-27\n\n### Changed\n\n- Made pydoc import lazy as at least one use found it slow to import https://github.com/textualize/rich/issues/1104\n- Modified string highlighting to not match in the middle of a word, so that apostrophes are not considered strings\n- New way of encoding control codes in Segment\n- New signature for Control class\n- Changed Layout.split to use new Splitter class\n- Improved layout.tree\n- Changed default theme color for repr.number to cyan\n- `__rich_measure__` signature changed to accept ConsoleOptions rather than max_width\n- `text` parameter to rich.spinner.Spinner changed to RenderableType\n\n### Added\n\n- Added `__rich_repr__` protocol method to Pretty\n- Added rich.region.Region\n- Added ConsoleOptions.update_dimensions\n- Added rich.console.ScreenUpdate\n- Added Console.is_alt_screen\n- Added Control.segment, Control.bell, Control.home, Control.move_to, Control.clear, Control.show_cursor, Control.alt_screen\n- Added Console.update_screen and Console.update_screen_lines\n- Added Layout.add_split, Layout.split_column, Layout.split_row, layout.refresh\n- Added new Rich repr protocol `__rich_repr__`\n\n### Fixed\n\n- Fixed table style taking precedence over row style https://github.com/textualize/rich/issues/1129\n- Fixed incorrect measurement of Text with new lines and whitespace https://github.com/textualize/rich/issues/1133\n- Made type annotations consistent for various `total` keyword arguments in `rich.progress` and rich.`progress_bar`\n- Disabled Progress no longer displays itself when starting https://github.com/textualize/rich/pull/1125\n- Animations no longer reset when updating rich.status.Status\n\n## [9.13.0] - 2021-03-06\n\n### Added\n\n- Pretty printer now supports dataclasses\n\n### Fixed\n\n- Fixed Syntax background https://github.com/textualize/rich/issues/1088\n- Fix for double tracebacks when no formatter https://github.com/textualize/rich/issues/1079\n\n### Changed\n\n- Added ws and wss to url highlighter\n\n## [9.12.4] - 2021-03-01\n\n### Fixed\n\n- Fixed custom formatters with rich tracebacks in RichHandler https://github.com/textualize/rich/issues/1079\n\n### Changed\n\n- Allow highly compressed table cells to go to 0 width\n- Optimization to remove empty styles in various places\n\n## [9.12.3] - 2021-02-28\n\n### Changed\n\n- Optimized Padding\n\n## [9.12.2] - 2021-02-27\n\n### Added\n\n- Added ConsoleOptions.copy\n\n### Changed\n\n- Optimized ConsoleOptions.update\n\n## [9.12.1] - 2021-02-27\n\n### Fixed\n\n- Fixed deadlock in Progress https://github.com/textualize/rich/issues/1061\n\n### Added\n\n- Added Task.finished_speed\n\n### Changed\n\n- Froze TransferSpeedColumn speed when task is finished\n- Added SIGINT handler to downloader.py example\n- Optimization for large tables\n\n## [9.12.0] - 2021-02-24\n\n### Fixed\n\n- Fixed issue with Syntax and missing lines in Layout https://github.com/textualize/rich/issues/1050\n- Fixed issue with nested markdown elements https://github.com/textualize/rich/issues/1036\n- Fixed new lines not invoking render hooks https://github.com/textualize/rich/issues/1052\n- Fixed Align setting height to child https://github.com/textualize/rich/issues/1057\n\n### Changed\n\n- Printing a table with no columns now result in a blank line https://github.com/textualize/rich/issues/1044\n\n### Added\n\n- Added height to Panel\n\n## [9.11.1] - 2021-02-20\n\n### Fixed\n\n- Fixed table with expand=False not expanding when justify=\"center\"\n- Fixed single renderable in Layout not respecting height\n- Fixed COLUMNS and LINES env var https://github.com/textualize/rich/issues/1019\n- Layout now respects minimum_size when fixes sizes are greater than available space\n- HTML export now changes link underline score to match terminal https://github.com/textualize/rich/issues/1009\n\n### Changed\n\n- python -m rich.markdown and rich.syntax show usage with no file\n\n### Added\n\n- Added height parameter to Layout\n- Added python -m rich.segment\n\n## [9.11.0] - 2021-02-15\n\n### Fixed\n\n- Fixed error message for tracebacks with broken `__str__` https://github.com/textualize/rich/issues/980\n- Fixed markup edge case https://github.com/textualize/rich/issues/987\n\n### Added\n\n- Added cheeky sponsorship request to test card\n- Added `quiet` argument to Console constructor\n- Added support for a callback function to format timestamps (allows presentation of milliseconds)\n- Added Console.set_alt_screen and Console.screen\n- Added height to ConsoleOptions\n- Added `vertical` parameter to Align\n- Added Layout class\n\n### Changed\n\n- Pretty.overflow now defaults to None\n- Panel now respects options.height\n- Traceback lexer defaults to Python if no extension on source\n- Added ConsoleDimensions size attribute to ConsoleOptions so that size can't change mid-render\n\n## [9.10.0] - 2021-01-27\n\n### Changed\n\n- Some optimizations for Text\n- Further optimized Tracebacks by not tokenizing code more that necessary\n- Table Column.header_style and Column.footer_style are now added to Table header/footer style\n\n## [9.9.0] - 2021-01-23\n\n### Changed\n\n- Extended Windows palette to 16 colors\n- Modified windows palette to Windows 10 colors\n- Change regex for attrib_name to be more performant\n- Optimized traceback generation\n\n### Fixed\n\n- Fix double line tree guides on Windows\n- Fixed Tracebacks ignoring initial blank lines\n- Partial fix for tracebacks not finding source after chdir\n- Fixed error message when code in tracebacks doesn't have an extension https://github.com/textualize/rich/issues/996\n\n### Added\n\n- Added post_style argument to Segment.apply_style\n\n## [9.8.2] - 2021-01-15\n\n### Fixed\n\n- Fixed deadlock in live https://github.com/textualize/rich/issues/927\n\n## [9.8.1] - 2021-01-13\n\n### Fixed\n\n- Fixed rich.inspect failing with attributes that claim to be callable but aren't https://github.com/textualize/rich/issues/916\n\n## [9.8.0] - 2021-01-11\n\n### Added\n\n- Added **rich_measure** for tree\n- Added rich.align.VerticalCenter\n\n### Changed\n\n- The `style` argument on Align now applies to background only\n- Changed display of progress bars in no_color mode for clarity\n- Console property `size` will fall back to getting the terminal size of stdout it stdin fails, this allows size to be correctly determined when piping\n\n### Fixed\n\n- Fixed panel cropping when shrunk too bar\n- Allow passing markdown over STDIN when using `python -m rich.markdown`\n- Fix printing MagicMock.mock_calls https://github.com/textualize/rich/issues/903\n\n## [9.7.0] - 2021-01-09\n\n### Added\n\n- Added rich.tree\n- Added no_color argument to Console\n\n## [9.6.2] - 2021-01-07\n\n### Fixed\n\n- Fixed markup escaping edge case https://github.com/textualize/rich/issues/878\n- Double tag escape, i.e. `\"\\\\[foo]\"` results in a backslash plus `[foo]` tag\n- Fixed header_style not applying to headers in positional args https://github.com/textualize/rich/issues/953\n\n## [9.6.1] - 2020-12-31\n\n### Fixed\n\n- Fixed encoding error on Windows when loading code for Tracebacks\n\n## [9.6.0] - 2020-12-30\n\n### Changed\n\n- MarkupError exception raise from None to omit internal exception\n- Factored out RichHandler.render and RichHandler.render_message for easier extending\n- Display pretty printed value in rich.inspect\n\n### Added\n\n- Added Progress.TimeElapsedColumn\n- Added IPython support to pretty.install\n\n### Fixed\n\n- Fixed display of locals in Traceback for stdin\n\n## [9.5.1] - 2020-12-19\n\n### Fixed\n\n- Fixed terminal size detection on Windows https://github.com/textualize/rich/issues/836\n- Fixed hex number highlighting\n\n## [9.5.0] - 2020-12-18\n\n### Changed\n\n- If file is not specified on Console then the Console.file will return the current sys.stdout. Prior to 9.5.0 sys.stdout was cached on the Console, which could break code that wrapped sys.stdout after the Console was constructed.\n- Changed `Color.__str__` to not include ansi codes\n- Changed Console.size to get the terminal dimensions via sys.stdin. This means that if you set file to be an io.StringIO file then the width will be set to the current terminal dimensions and not a default of 80.\n\n### Added\n\n- Added stderr parameter to Console\n- Added rich.reconfigure\n- Added `Color.__rich__`\n- Added Console.soft_wrap\n- Added Console.style parameter\n- Added Table.highlight parameter to enable highlighting of cells\n- Added Panel.highlight parameter to enable highlighting of panel title\n- Added highlight to ConsoleOptions\n\n### Fixed\n\n- Fixed double output in rich.live https://github.com/textualize/rich/issues/485\n- Fixed Console.out highlighting not reflecting defaults https://github.com/textualize/rich/issues/827\n- FileProxy now raises TypeError for empty non-str arguments https://github.com/textualize/rich/issues/828\n\n## [9.4.0] - 2020-12-12\n\n### Added\n\n- Added rich.live https://github.com/textualize/rich/pull/382\n- Added align parameter to Rule and Console.rule\n- Added rich.Status class and Console.status\n- Added getitem to Text\n- Added style parameter to Console.log\n- Added rich.diagnose command\n\n### Changed\n\n- Table.add_row style argument now applies to entire line and not just cells\n- Added end_section parameter to Table.add_row to force a line underneath row\n\n## Fixed\n\n- Fixed suppressed traceback context https://github.com/textualize/rich/issues/468\n\n## [9.3.0] - 2020-12-1\n\n### Added\n\n- Added get_datetime parameter to Console, to allow for repeatable tests\n- Added get_time parameter to Console\n- Added rich.abc.RichRenderable\n- Added expand_all to rich.pretty.install()\n- Added locals_max_length, and locals_max_string to Traceback and logging.RichHandler\n- Set defaults of max_length and max_string for Traceback to 10 and 80\n- Added disable argument to Progress\n\n### Changed\n\n- Reformatted test card (python -m rich)\n\n### Fixed\n\n- Fixed redirecting of stderr in Progress\n- Fixed broken expanded tuple of one https://github.com/textualize/rich/issues/445\n- Fixed traceback message with `from` exceptions\n- Fixed justify argument not working in console.log https://github.com/textualize/rich/issues/460\n\n## [9.2.0] - 2020-11-08\n\n### Added\n\n- Added tracebacks_show_locals parameter to RichHandler\n- Added max_string to Pretty\n- Added rich.ansi.AnsiDecoder\n- Added decoding of ansi codes to captured stdout in Progress\n- Added expand_all to rich.pretty.pprint\n\n### Changed\n\n- Applied dim=True to indent guide styles\n- Factored out RichHandler.get_style_and_level to allow for overriding in subclasses\n- Hid progress bars from html export\n- rich.pretty.pprint now soft wraps\n\n## [9.1.0] - 2020-10-23\n\n### Added\n\n- Added Text.with_indentation_guide\n- Added Text.detect_indentation\n- Added Pretty.indent_guides\n- Added Syntax.indent_guides\n- Added indent_guides parameter on pretty.install\n- Added rich.pretty.pprint\n- Added max_length to Pretty\n\n### Changed\n\n- Enabled indent guides on Tracebacks\n\n### Fixed\n\n- Fixed negative time remaining in Progress bars https://github.com/textualize/rich/issues/378\n\n## [9.0.1] - 2020-10-19\n\n### Fixed\n\n- Fixed broken ANSI codes in input on windows legacy https://github.com/textualize/rich/issues/393\n\n## [9.0.0] - 2020-10-18\n\n### Fixed\n\n- Progress download column now displays decimal units\n\n### Added\n\n- Support for Python 3.9\n- Added legacy_windows to ConsoleOptions\n- Added ascii_only to ConsoleOptions\n- Added box.SQUARE_DOUBLE_HEAD\n- Added highlighting of EUI-48 and EUI-64 (MAC addresses)\n- Added Console.pager\n- Added Console.out\n- Added binary_units in progress download column\n- Added Progress.reset\n- Added Style.background_style property\n- Added Bar renderable https://github.com/textualize/rich/pull/361\n- Added Table.min_width\n- Added table.Column.min_width and table.Column.max_width, and same to Table.add_column\n\n### Changed\n\n- Dropped box.get_safe_box function in favor of Box.substitute\n- Changed default padding in Panel from 0 to (0, 1) https://github.com/textualize/rich/issues/385\n- Table with row_styles will extend background color between cells if the box has no vertical dividerhttps://github.com/textualize/rich/issues/383\n- Changed default of fit kwarg in render_group() from False to True\n- Renamed rich.bar to rich.progress_bar, and Bar class to ProgressBar, rich.bar is now the new solid bar class\n\n### Fixed\n\n- Fixed typo in `Style.transparent_background` method name.\n\n## [8.0.0] - 2020-10-03\n\n### Added\n\n- Added Console.bell method\n- Added Set to types that Console.print will automatically pretty print\n- Added show_locals to Traceback\n- Added theme stack mechanism, see Console.push_theme and Console.pop_theme\n\n### Changed\n\n- Changed Style.empty to Style.null to better reflect what it does\n- Optimized combining styles involving a null style\n- Change error messages in Style.parse to read better\n\n### Fixed\n\n- Fixed Table.\\_\\_rich_measure\\_\\_\n- Fixed incorrect calculation of fixed width columns\n\n## [7.1.0] - 2020-09-26\n\n### Added\n\n- Added Console.begin_capture, Console.end_capture and Console.capture\n- Added Table.title_justify and Table.caption_justify https://github.com/textualize/rich/issues/301\n\n### Changed\n\n- Improved formatting of exceptions\n- Enabled Rich exceptions in logging https://github.com/taliraj\n- UTF-8 encoding is now mentioned in HTML head section\n\n### Removed\n\n- Removed line_numbers argument from traceback.install, which was undocumented and did nothing\n\n## [7.0.0] - 2020-09-18\n\n### Added\n\n- New ansi_dark and ansi_light themes\n- Added Text.append_tokens for fast appending of string + Style pairs\n- Added Text.remove_suffix\n- Added Text.append_tokens\n\n### Changed\n\n- Text.tabs_to_spaces was renamed to Text.expand_tabs, which works in place rather than returning a new instance\n- Renamed Column.index to Column.\\_index\n- Optimized Style.combine and Style.chain\n- Optimized text rendering by fixing internal cache mechanism\n- Optimized hash generation for Styles\n\n## [6.2.0] - 2020-09-13\n\n### Added\n\n- Added inline code highlighting to Markdown\n\n## [6.1.2] - 2020-09-11\n\n### Added\n\n- Added ipv4 and ipv6 to ReprHighlighter\n\n### Changed\n\n- The `#` sign is included in url highlighting\n\n### Fixed\n\n- Fixed force-color switch in rich.syntax and rich.markdown commands\n\n## [6.1.1] - 2020-09-07\n\n### Changed\n\n- Restored \"def\" in inspect signature\n\n## [6.1.0] - 2020-09-07\n\n### Added\n\n- New inspect module\n- Added os.\\_Environ to pretty print\n\n### Fixed\n\n- Prevented recursive renderables from getting stuck\n\n## Changed\n\n- force_terminal and force_jupyter can now be used to force the disabled state, or left as None to auto-detect.\n- Panel now expands to fit title if supplied\n\n## [6.0.0] - 2020-08-25\n\n### Fixed\n\n- Fixed use of `__rich__` cast\n\n### Changed\n\n- New algorithm to pretty print which fits more on a line if possible\n- Deprecated `character` parameter in Rule and Console.rule, in favor of `characters`\n- Optimized Syntax.from_path to avoid searching all lexers, which also speeds up tracebacks\n\n### Added\n\n- Added soft_wrap flag to Console.print\n\n## [5.2.1] - 2020-08-19\n\n### Fixed\n\n- Fixed underscore with display hook https://github.com/textualize/rich/issues/235\n\n## [5.2.0] - 2020-08-14\n\n### Changed\n\n- Added crop argument to Console.print\n- Added \"ignore\" overflow method\n- Added multiple characters per rule @hedythedev https://github.com/textualize/rich/pull/207\n\n## [5.1.2] - 2020-08-10\n\n### Fixed\n\n- Further optimized pretty printing ~5X.\n\n## [5.1.1] - 2020-08-09\n\n### Fixed\n\n- Optimized pretty printing ~3X faster\n\n## [5.1.0] - 2020-08-08\n\n### Added\n\n- Added Text.cell_len\n- Added helpful message regarding unicode decoding errors https://github.com/textualize/rich/issues/212\n- Added display hook with pretty.install()\n\n### Fixed\n\n- Fixed deprecation warnings re backslash https://github.com/textualize/rich/issues/210\n- Fixed repr highlighting of scientific notation, e.g. 1e100\n\n### Changed\n\n- Implemented pretty printing, and removed pprintpp from dependencies\n- Optimized Text.join\n\n## [5.0.0] - 2020-08-02\n\n### Changed\n\n- Change to console markup syntax to not parse Python structures as markup, i.e. `[1,2,3]` is treated as a literal, not a tag.\n- Standard color numbers syntax has changed to `\"color(<number>)\"` so that `[5]` (for example) is considered a literal.\n- Markup escape method has changed from double brackets to preceding with a backslash, so `foo[[]]` would be `foo\\[bar]`\n\n## [4.2.2] - 2020-07-30\n\n### Changed\n\n- Added thread to automatically call update() in progress.track(). Replacing previous adaptive algorithm.\n- Second attempt at working around https://bugs.python.org/issue37871\n\n## [4.2.1] - 2020-07-29\n\n### Added\n\n- Added show_time and show_level parameters to RichHandler https://github.com/textualize/rich/pull/182\n\n### Fixed\n\n- Fixed progress.track iterator exiting early https://github.com/textualize/rich/issues/189\n- Added workaround for Python bug https://bugs.python.org/issue37871, fixing https://github.com/textualize/rich/issues/186\n\n### Changed\n\n- Set overflow=fold for log messages https://github.com/textualize/rich/issues/190\n\n## [4.2.0] - 2020-07-27\n\n### Fixed\n\n- Fixed missing new lines https://github.com/textualize/rich/issues/178\n- Fixed Progress.track https://github.com/textualize/rich/issues/184\n- Remove control codes from exported text https://github.com/textualize/rich/issues/181\n- Implemented auto-detection and color rendition of 16-color mode\n\n## [4.1.0] - 2020-07-26\n\n### Changed\n\n- Optimized progress.track for very quick iterations\n- Force default size of 80x25 if get_terminal_size reports size of 0,0\n\n## [4.0.0] - 2020-07-23\n\nMajor version bump for a breaking change to `Text.stylize signature`, which corrects a minor but irritating API wart. The style now comes first and the `start` and `end` offsets default to the entire text. This allows for `text.stylize_all(style)` to be replaced with `text.stylize(style)`. The `start` and `end` offsets now support negative indexing, so `text.stylize(\"bold\", -1)` makes the last character bold.\n\n### Added\n\n- Added markup switch to RichHandler https://github.com/textualize/rich/issues/171\n\n### Changed\n\n- Change signature of Text.stylize to accept style first\n- Remove Text.stylize_all which is no longer necessary\n\n### Fixed\n\n- Fixed rendering of Confirm prompt https://github.com/textualize/rich/issues/170\n\n## [3.4.1] - 2020-07-22\n\n### Fixed\n\n- Fixed incorrect default of expand in Table.grid\n\n## [3.4.0] - 2020-07-22\n\n### Added\n\n- Added stream parameter to Console.input\n- Added password parameter to Console.input\n- Added description parameter to Progress.update\n- Added rich.prompt\n- Added detecting 'dumb' terminals\n- Added Text.styled alternative constructor\n\n### Fixes\n\n- Fixed progress bars so that they are readable when color is disabled\n\n## [3.3.2] - 2020-07-14\n\n### Changed\n\n- Optimized Text.pad\n\n### Added\n\n- Added rich.scope\n- Change log_locals to use scope.render_scope\n- Added title parameter to Columns\n\n## [3.3.1] - 2020-07-13\n\n### Added\n\n- box.ASCII_DOUBLE_HEAD\n\n### Changed\n\n- Removed replace of -- --- ... from Markdown, as it made it impossible to include CLI info\n\n## [3.3.0] - 2020-07-12\n\n### Added\n\n- Added title and title_align options to Panel\n- Added pad and width parameters to Align\n- Added end parameter to Rule\n- Added Text.pad and Text.align methods\n- Added leading parameter to Table\n\n## [3.2.0] - 2020-07-10\n\n### Added\n\n- Added Align.left Align.center Align.right shortcuts\n- Added Panel.fit shortcut\n- Added align parameter to Columns\n\n### Fixed\n\n- Align class now pads to the right, like Text\n- ipywidgets added as an optional dependency\n- Issue with Panel and background color\n- Fixed missing `__bool__` on Segment\n\n### Changed\n\n- Added `border_style` argument to Panel (note, `style` now applies to interior of the panel)\n\n## [3.1.0] - 2020-07-09\n\n### Changed\n\n- Progress bars now work in Jupyter\n\n## Added\n\n- Added refresh_per_second to progress.track\n- Added styles to BarColumn and progress.track\n\n## [3.0.5] - 2020-07-07\n\n### Fixed\n\n- Fixed Windows version number require for truecolor\n\n## [3.0.4] - 2020-07-07\n\n### Changed\n\n- More precise detection of Windows console https://github.com/textualize/rich/issues/140\n\n## [3.0.3] - 2020-07-03\n\n### Fixed\n\n- Fixed edge case with wrapped and overflowed text\n\n### Changed\n\n- New algorithm for compressing table that priorities smaller columns\n\n### Added\n\n- Added safe_box parameter to Console constructor\n\n## [3.0.2] - 2020-07-02\n\n### Added\n\n- Added rich.styled.Styled class to apply styles to renderable\n- Table.add_row now has an optional style parameter\n- Added table_movie.py to examples\n\n### Changed\n\n- Modified box options to use half line characters at edges\n- Non no_wrap columns will now shrink below minimum width if table is compressed\n\n## [3.0.1] - 2020-06-30\n\n### Added\n\n- Added box.ASCII2\n- Added markup argument to logging extra\n\n### Changed\n\n- Setting a non-None width now implies expand=True\n\n## [3.0.0] - 2020-06-28\n\n### Changed\n\n- Enabled supported box chars for legacy Windows, and introduce `safe_box` flag\n- Disable hyperlinks on legacy Windows\n- Constructors for Rule and Panel now have keyword only arguments (reason for major version bump)\n- Table.add_colum added keyword only arguments\n\n### Fixed\n\n- Fixed Table measure\n\n## [2.3.1] - 2020-06-26\n\n### Fixed\n\n- Disabled legacy_windows if jupyter is detected https://github.com/textualize/rich/issues/125\n\n## [2.3.0] - 2020-06-26\n\n### Fixed\n\n- Fixed highlighting of paths / filenames\n- Corrected docs for RichHandler which erroneously said default console writes to stderr\n\n### Changed\n\n- Allowed `style` parameter for `highlight_regex` to be a callable that returns a style\n\n### Added\n\n- Added optional highlighter parameter to RichHandler\n\n## [2.2.6] - 2020-06-24\n\n### Changed\n\n- Store a \"link id\" on Style instance, so links containing different styles are highlighted together. (https://github.com/textualize/rich/pull/123)\n\n## [2.2.5] - 2020-06-23\n\n### Fixed\n\n- Fixed justify of tables (https://github.com/textualize/rich/issues/117)\n\n## [2.2.4] - 2020-06-21\n\n### Added\n\n- Added enable_link_path to RichHandler\n- Added legacy_windows switch to Console constructor\n\n## [2.2.3] - 2020-06-15\n\n### Fixed\n\n- Fixed console.log hyperlink not containing full path\n\n### Changed\n\n- Used random number for hyperlink id\n\n## [2.2.2] - 2020-06-14\n\n### Changed\n\n- Exposed RichHandler highlighter as a class var\n\n## [2.2.1] - 2020-06-14\n\n### Changed\n\n- Linked path in log render to file\n\n## [2.2.0] - 2020-06-14\n\n### Added\n\n- Added redirect_stdout and redirect_stderr to Progress\n\n### Changed\n\n- printing to console with an active Progress doesn't break visuals\n\n## [2.1.0] - 2020-06-11\n\n### Added\n\n- Added 'transient' option to Progress\n\n### Changed\n\n- Truncated overly long text in Rule with ellipsis overflow\n\n## [2.0.1] - 2020-06-10\n\n### Added\n\n- Added expand option to Padding\n\n### Changed\n\n- Some minor optimizations in Text\n\n### Fixed\n\n- Fixed broken rule with CJK text\n\n## [2.0.0] - 2020-06-06\n\n### Added\n\n- Added overflow methods\n- Added no_wrap option to print()\n- Added width option to print\n- Improved handling of compressed tables\n\n### Fixed\n\n- Fixed erroneous space at end of log\n- Fixed erroneous space at end of progress bar\n\n### Changed\n\n- Renamed \\_ratio.ratio_divide to \\_ratio.ratio_distribute\n- Renamed JustifyValues to JustifyMethod (backwards incompatible)\n- Optimized \\_trim_spans\n- Enforced keyword args in Console / Text interfaces (backwards incompatible)\n- Return self from text.append\n\n## [1.3.1] - 2020-06-01\n\n### Changed\n\n- Changed defaults of Table.grid\n- Polished listdir.py example\n\n### Added\n\n- Added width argument to Columns\n\n### Fixed\n\n- Fixed for `columns_first` argument in Columns\n- Fixed incorrect padding in columns with fixed width\n\n## [1.3.0] - 2020-05-31\n\n### Added\n\n- Added rich.get_console() function to get global console instance.\n- Added Columns class\n\n### Changed\n\n- Updated `markdown.Heading.create()` to work with subclassing.\n- Console now transparently works with Jupyter\n\n### Fixed\n\n- Fixed issue with broken table with show_edge=False and a non-None box arg\n\n## [1.2.3] - 2020-05-24\n\n### Added\n\n- Added `padding` parameter to Panel\n- Added 'indeterminate' state when progress bars aren't started\n\n### Fixed\n\n- Fixed Progress deadlock https://github.com/textualize/rich/issues/90\n\n### Changed\n\n- Auto-detect \"truecolor\" color system when in Windows Terminal\n\n## [1.2.2] - 2020-05-22\n\n### Fixed\n\n- Issue with right aligned wrapped text adding extra spaces\n\n## [1.2.1] - 2020-05-22\n\n### Fixed\n\n- Issue with sum and Style\n\n## [1.2.0] - 2020-05-22\n\n### Added\n\n- Support for double underline, framed, encircled, and overlined attributes\n\n### Changed\n\n- Optimized Style\n- Changed methods `__console__` to `__rich_console__`, and `__measure__` to `__rich_measure__`\n\n## [1.1.9] - 2020-05-20\n\n### Fixed\n\n- Exception when BarColumn.bar_width == None\n\n## [1.1.8] - 2020-05-20\n\n### Changed\n\n- Optimizations for Segment, Console and Table\n\n### Added\n\n- Added Console.clear method\n- Added exporting of links to HTML\n\n## [1.1.7] - 2020-05-19\n\n### Added\n\n- Added collapse_padding option to Table.\n\n### Changed\n\n- Some style attributes may be abbreviated (b for bold, i for italic etc). Previously abbreviations worked in console markup but only one at a time, i.e. \"[b]Hello[/]\" but not \"[b i]Hello[/]\" -- now they work everywhere.\n- Renamed 'text' property on Text to 'plain'. i.e. text.plain returns a string version of the Text instance.\n\n### Fixed\n\n- Fixed zero division if total is 0 in progress bar\n\n## [1.1.6] - 2020-05-17\n\n### Added\n\n- Added rich.align.Align class\n- Added justify argument to Console.print and console.log\n\n## [1.1.5] - 2020-05-15\n\n### Changed\n\n- Changed progress bars to write to stdout on terminal and hide on non-terminal\n\n## [1.1.4] - 2020-05-15\n\n### Fixed\n\n- Fixed incorrect file and link in progress.log\n- Fixes for legacy windows: Bar, Panel, and Rule now use ASCII characters\n- show_cursor is now a no-op on legacy windows\n\n### Added\n\n- Added Console.input\n\n### Changed\n\n- Disable progress bars when not writing to a terminal\n\n## [1.1.3] - 2020-05-14\n\n### Fixed\n\n- Issue with progress of one line`\n\n## [1.1.2] - 2020-05-14\n\n### Added\n\n- Added -p switch to python -m rich.markdown to page output\n- Added Console.control to output control codes\n\n### Changed\n\n- Changed Console log_time_format to no longer require a space at the end\n- Added print and log to Progress to render terminal output when progress is active\n\n## [1.1.1] - 2020-05-12\n\n### Changed\n\n- Stripped cursor moving control codes from text\n\n## [1.1.0] - 2020-05-10\n\n### Added\n\n- Added hyperlinks to Style and markup\n- Added justify and code theme switches to markdown command\n\n## [1.0.3] - 2020-05-08\n\n### Added\n\n- Added `python -m rich.syntax` command\n\n## [1.0.2] - 2020-05-08\n\n### Fixed\n\n- Issue with Windows legacy support https://github.com/textualize/rich/issues/59\n\n## [1.0.1] - 2020-05-08\n\n### Changed\n\n- Applied console markup after highlighting\n- Documented highlighting\n- Changed Markup parser to handle overlapping styles\n- Relaxed dependency on colorama\n- Allowed Theme to accept values as style definitions (str) as well as Style instances\n- Added a panel to emphasize code in Markdown\n\n### Added\n\n- Added markup.escape\n- Added `python -m rich.theme` command\n- Added `python -m rich.markdown` command\n- Added rendering of images in Readme (links only)\n\n### Fixed\n\n- Fixed Text.assemble not working with strings https://github.com/textualize/rich/issues/57\n- Fixed table when column widths must be compressed to fit\n\n## [1.0.0] - 2020-05-03\n\n### Changed\n\n- Improvements to repr highlighter to highlight URLs\n\n## [0.8.13] - 2020-04-28\n\n### Fixed\n\n- Fixed incorrect markdown rendering for quotes and changed style\n\n## [0.8.12] - 2020-04-21\n\n### Fixed\n\n- Removed debug print from rich.progress\n\n## [0.8.11] - 2020-04-14\n\n### Added\n\n- Added Table.show_lines to render lines between rows\n\n### Changed\n\n- Added markup escape with double square brackets\n\n## [0.8.10] - 2020-04-12\n\n### Fixed\n\n- Fix row_styles applying to header\n\n## [0.8.9] - 2020-04-12\n\n### Changed\n\n- Added force_terminal option to `Console.__init__`\n\n### Added\n\n- Added Table.row_styles to enable zebra striping.\n\n## [0.8.8] - 2020-03-31\n\n### Fixed\n\n- Fixed background in Syntax\n\n## [0.8.7] - 2020-03-31\n\n### Fixed\n\n- Broken wrapping of long lines\n- Fixed wrapping in Syntax\n\n### Changed\n\n- Added word_wrap option to Syntax, which defaults to False.\n- Added word_wrap option to Traceback.\n\n## [0.8.6] - 2020-03-29\n\n### Added\n\n- Experimental Jupyter notebook support: from rich.jupyter import print\n\n## [0.8.5] - 2020-03-29\n\n### Changed\n\n- Smarter number parsing regex for repr highlighter\n\n### Added\n\n- uuid highlighter for repr\n\n## [0.8.4] - 2020-03-28\n\n### Added\n\n- Added 'test card', run python -m rich\n\n### Changed\n\n- Detected windows terminal, defaulting to colorama support\n\n### Fixed\n\n- Fixed table scaling issue\n\n## [0.8.3] - 2020-03-27\n\n### Fixed\n\n- CJK right align\n\n## [0.8.2] - 2020-03-27\n\n### Changed\n\n- Fixed issue with 0 speed resulting in zero division error\n- Changed signature of Progress.update\n- Made calling start() a second time a no-op\n\n## [0.8.1] - 2020-03-22\n\n### Added\n\n- Added progress.DownloadColumn\n\n## [0.8.0] - 2020-03-17\n\n### Added\n\n- CJK support\n- Console level highlight flag\n- Added encoding argument to Syntax.from_path\n\n### Changed\n\n- Dropped support for Windows command prompt (try https://www.microsoft.com/en-gb/p/windows-terminal-preview/)\n- Added task_id to Progress.track\n\n## [0.7.2] - 2020-03-15\n\n### Fixed\n\n- KeyError for missing pygments style\n\n## [0.7.1] - 2020-03-13\n\n### Fixed\n\n- Issue with control codes being used in length calculation\n\n### Changed\n\n- Remove current_style concept, which wasn't really used and was problematic for concurrency\n\n## [0.7.0] - 2020-03-12\n\n### Changed\n\n- Added width option to Panel\n- Change special method `__render_width__` to `__measure__`\n- Dropped the \"markdown style\" syntax in console markup\n- Optimized style rendering\n\n### Added\n\n- Added Console.show_cursor method\n- Added Progress bars\n\n### Fixed\n\n- Fixed wrapping when a single word was too large to fit in a line\n\n## [0.6.0] - 2020-03-03\n\n### Added\n\n- Added tab_size to Console and Text\n- Added protocol.is_renderable for runtime check\n- Added emoji switch to Console\n- Added inherit boolean to Theme\n- Made Console thread safe, with a thread local buffer\n\n### Changed\n\n- Console.markup attribute now effects Table\n- SeparatedConsoleRenderable and RichCast types\n\n### Fixed\n\n- Fixed tabs breaking rendering by converting to spaces\n\n## [0.5.0] - 2020-02-23\n\n### Changed\n\n- Replaced `__console_str__` with `__rich__`\n\n## [0.4.1] - 2020-02-22\n\n### Fixed\n\n- Readme links in PyPI\n\n## [0.4.0] - 2020-02-22\n\n### Added\n\n- Added Traceback rendering and handler\n- Added rich.constrain\n- Added rich.rule\n\n### Fixed\n\n- Fixed unnecessary padding\n\n## [0.3.3] - 2020-02-04\n\n### Fixed\n\n- Fixed Windows color support\n- Fixed line width on windows issue (https://github.com/textualize/rich/issues/7)\n- Fixed Pretty print on Windows\n\n## [0.3.2] - 2020-01-26\n\n### Added\n\n- Added rich.logging\n\n## [0.3.1] - 2020-01-22\n\n### Added\n\n- Added colorama for Windows support\n\n## [0.3.0] - 2020-01-19\n\n### Added\n\n- First official release, API still to be stabilized\n\n[13.9.4]: https://github.com/textualize/rich/compare/v13.9.3...v13.9.4\n[13.9.3]: https://github.com/textualize/rich/compare/v13.9.2...v13.9.3\n[13.9.2]: https://github.com/textualize/rich/compare/v13.9.1...v13.9.2\n[13.9.1]: https://github.com/textualize/rich/compare/v13.9.0...v13.9.1\n[13.9.0]: https://github.com/textualize/rich/compare/v13.8.1...v13.9.0\n[13.8.1]: https://github.com/textualize/rich/compare/v13.8.0...v13.8.1\n[13.8.0]: https://github.com/textualize/rich/compare/v13.7.1...v13.8.0\n[13.7.1]: https://github.com/textualize/rich/compare/v13.7.0...v13.7.1\n[13.7.0]: https://github.com/textualize/rich/compare/v13.6.0...v13.7.0\n[13.6.0]: https://github.com/textualize/rich/compare/v13.5.3...v13.6.0\n[13.5.3]: https://github.com/textualize/rich/compare/v13.5.2...v13.5.3\n[13.5.2]: https://github.com/textualize/rich/compare/v13.5.1...v13.5.2\n[13.5.1]: https://github.com/textualize/rich/compare/v13.5.0...v13.5.1\n[13.5.0]: https://github.com/textualize/rich/compare/v13.4.2...v13.5.0\n[13.4.2]: https://github.com/textualize/rich/compare/v13.4.1...v13.4.2\n[13.4.1]: https://github.com/textualize/rich/compare/v13.4.0...v13.4.1\n[13.4.0]: https://github.com/textualize/rich/compare/v13.3.5...v13.4.0\n[13.3.5]: https://github.com/textualize/rich/compare/v13.3.4...v13.3.5\n[13.3.4]: https://github.com/textualize/rich/compare/v13.3.3...v13.3.4\n[13.3.3]: https://github.com/textualize/rich/compare/v13.3.2...v13.3.3\n[13.3.2]: https://github.com/textualize/rich/compare/v13.3.1...v13.3.2\n[13.3.1]: https://github.com/textualize/rich/compare/v13.3.0...v13.3.1\n[13.3.0]: https://github.com/textualize/rich/compare/v13.2.0...v13.3.0\n[13.2.0]: https://github.com/textualize/rich/compare/v13.1.0...v13.2.0\n[13.1.0]: https://github.com/textualize/rich/compare/v13.0.1...v13.1.0\n[13.0.1]: https://github.com/textualize/rich/compare/v13.0.0...v13.0.1\n[13.0.0]: https://github.com/textualize/rich/compare/v12.6.0...v13.0.0\n[12.6.0]: https://github.com/textualize/rich/compare/v12.5.2...v12.6.0\n[12.5.2]: https://github.com/textualize/rich/compare/v12.5.1...v12.5.2\n[12.5.1]: https://github.com/textualize/rich/compare/v12.5.0...v12.5.1\n[12.5.0]: https://github.com/textualize/rich/compare/v12.4.4...v12.5.0\n[12.4.4]: https://github.com/textualize/rich/compare/v12.4.3...v12.4.4\n[12.4.3]: https://github.com/textualize/rich/compare/v12.4.2...v12.4.3\n[12.4.2]: https://github.com/textualize/rich/compare/v12.4.1...v12.4.2\n[12.4.1]: https://github.com/textualize/rich/compare/v12.4.0...v12.4.1\n[12.4.0]: https://github.com/textualize/rich/compare/v12.3.0...v12.4.0\n[12.3.0]: https://github.com/textualize/rich/compare/v12.2.0...v12.3.0\n[12.2.0]: https://github.com/textualize/rich/compare/v12.1.0...v12.2.0\n[12.1.0]: https://github.com/textualize/rich/compare/v12.0.1...v12.1.0\n[12.0.1]: https://github.com/textualize/rich/compare/v12.0.0...v12.0.1\n[12.0.0]: https://github.com/textualize/rich/compare/v11.2.0...v12.0.0\n[11.2.0]: https://github.com/textualize/rich/compare/v11.1.0...v11.2.0\n[11.1.0]: https://github.com/textualize/rich/compare/v11.0.0...v11.1.0\n[11.0.0]: https://github.com/textualize/rich/compare/v10.16.1...v11.0.0\n[10.16.2]: https://github.com/textualize/rich/compare/v10.16.1...v10.16.2\n[10.16.1]: https://github.com/textualize/rich/compare/v10.16.0...v10.16.1\n[10.16.0]: https://github.com/textualize/rich/compare/v10.15.2...v10.16.0\n[10.15.2]: https://github.com/textualize/rich/compare/v10.15.1...v10.15.2\n[10.15.1]: https://github.com/textualize/rich/compare/v10.15.0...v10.15.1\n[10.15.0]: https://github.com/textualize/rich/compare/v10.14.0...v10.15.0\n[10.14.0]: https://github.com/textualize/rich/compare/v10.13.0...v10.14.0\n[10.13.0]: https://github.com/textualize/rich/compare/v10.12.0...v10.13.0\n[10.12.0]: https://github.com/textualize/rich/compare/v10.11.0...v10.12.0\n[10.11.0]: https://github.com/textualize/rich/compare/v10.10.0...v10.11.0\n[10.10.0]: https://github.com/textualize/rich/compare/v10.9.0...v10.10.0\n[10.9.0]: https://github.com/textualize/rich/compare/v10.8.0...v10.9.0\n[10.8.0]: https://github.com/textualize/rich/compare/v10.7.0...v10.8.0\n[10.7.0]: https://github.com/textualize/rich/compare/v10.6.0...v10.7.0\n[10.6.0]: https://github.com/textualize/rich/compare/v10.5.0...v10.6.0\n[10.5.0]: https://github.com/textualize/rich/compare/v10.4.0...v10.5.0\n[10.4.0]: https://github.com/textualize/rich/compare/v10.3.0...v10.4.0\n[10.3.0]: https://github.com/textualize/rich/compare/v10.2.2...v10.3.0\n[10.2.2]: https://github.com/textualize/rich/compare/v10.2.1...v10.2.2\n[10.2.1]: https://github.com/textualize/rich/compare/v10.2.0...v10.2.1\n[10.2.0]: https://github.com/textualize/rich/compare/v10.1.0...v10.2.0\n[10.1.0]: https://github.com/textualize/rich/compare/v10.0.1...v10.1.0\n[10.0.1]: https://github.com/textualize/rich/compare/v10.0.0...v10.0.1\n[10.0.0]: https://github.com/textualize/rich/compare/v9.13.0...v10.0.0\n[9.13.0]: https://github.com/textualize/rich/compare/v9.12.4...v9.13.0\n[9.12.4]: https://github.com/textualize/rich/compare/v9.12.3...v9.12.4\n[9.12.3]: https://github.com/textualize/rich/compare/v9.12.2...v9.12.3\n[9.12.2]: https://github.com/textualize/rich/compare/v9.12.1...v9.12.2\n[9.12.1]: https://github.com/textualize/rich/compare/v9.12.0...v9.12.1\n[9.12.0]: https://github.com/textualize/rich/compare/v9.11.1...v9.12.0\n[9.11.1]: https://github.com/textualize/rich/compare/v9.11.0...v9.11.1\n[9.11.0]: https://github.com/textualize/rich/compare/v9.10.0...v9.11.0\n[9.10.0]: https://github.com/textualize/rich/compare/v9.9.0...v9.10.0\n[9.9.0]: https://github.com/textualize/rich/compare/v9.8.2...v9.9.0\n[9.8.2]: https://github.com/textualize/rich/compare/v9.8.1...v9.8.2\n[9.8.1]: https://github.com/textualize/rich/compare/v9.8.0...v9.8.1\n[9.8.0]: https://github.com/textualize/rich/compare/v9.7.0...v9.8.0\n[9.7.0]: https://github.com/textualize/rich/compare/v9.6.2...v9.7.0\n[9.6.2]: https://github.com/textualize/rich/compare/v9.6.1...v9.6.2\n[9.6.1]: https://github.com/textualize/rich/compare/v9.6.0...v9.6.1\n[9.6.0]: https://github.com/textualize/rich/compare/v9.5.1...v9.6.0\n[9.5.1]: https://github.com/textualize/rich/compare/v9.5.0...v9.5.1\n[9.5.0]: https://github.com/textualize/rich/compare/v9.4.0...v9.5.0\n[9.4.0]: https://github.com/textualize/rich/compare/v9.3.0...v9.4.0\n[9.3.0]: https://github.com/textualize/rich/compare/v9.2.0...v9.3.0\n[9.2.0]: https://github.com/textualize/rich/compare/v9.1.0...v9.2.0\n[9.1.0]: https://github.com/textualize/rich/compare/v9.0.1...v9.1.0\n[9.0.1]: https://github.com/textualize/rich/compare/v9.0.0...v9.0.1\n[9.0.0]: https://github.com/textualize/rich/compare/v8.0.0...v9.0.0\n[8.0.0]: https://github.com/textualize/rich/compare/v7.1.0...v8.0.0\n[7.1.0]: https://github.com/textualize/rich/compare/v7.0.0...v7.1.0\n[7.0.0]: https://github.com/textualize/rich/compare/v6.2.0...v7.0.0\n[6.2.0]: https://github.com/textualize/rich/compare/v6.1.2...v6.2.0\n[6.1.2]: https://github.com/textualize/rich/compare/v6.1.1...v6.1.2\n[6.1.1]: https://github.com/textualize/rich/compare/v6.1.0...v6.1.1\n[6.1.0]: https://github.com/textualize/rich/compare/v6.0.0...v6.1.0\n[6.0.0]: https://github.com/textualize/rich/compare/v5.2.1...v6.0.0\n[5.2.1]: https://github.com/textualize/rich/compare/v5.2.0...v5.2.1\n[5.2.0]: https://github.com/textualize/rich/compare/v5.1.2...v5.2.0\n[5.1.2]: https://github.com/textualize/rich/compare/v5.1.1...v5.1.2\n[5.1.1]: https://github.com/textualize/rich/compare/v5.1.0...v5.1.1\n[5.1.0]: https://github.com/textualize/rich/compare/v5.0.0...v5.1.0\n[5.0.0]: https://github.com/textualize/rich/compare/v4.2.2...v5.0.0\n[4.2.2]: https://github.com/textualize/rich/compare/v4.2.1...v4.2.2\n[4.2.1]: https://github.com/textualize/rich/compare/v4.2.0...v4.2.1\n[4.2.0]: https://github.com/textualize/rich/compare/v4.1.0...v4.2.0\n[4.1.0]: https://github.com/textualize/rich/compare/v4.0.0...v4.1.0\n[4.0.0]: https://github.com/textualize/rich/compare/v3.4.1...v4.0.0\n[3.4.1]: https://github.com/textualize/rich/compare/v3.4.0...v3.4.1\n[3.4.0]: https://github.com/textualize/rich/compare/v3.3.2...v3.4.0\n[3.3.2]: https://github.com/textualize/rich/compare/v3.3.1...v3.3.2\n[3.3.1]: https://github.com/textualize/rich/compare/v3.3.0...v3.3.1\n[3.3.0]: https://github.com/textualize/rich/compare/v3.2.0...v3.3.0\n[3.2.0]: https://github.com/textualize/rich/compare/v3.1.0...v3.2.0\n[3.1.0]: https://github.com/textualize/rich/compare/v3.0.5...v3.1.0\n[3.0.5]: https://github.com/textualize/rich/compare/v3.0.4...v3.0.5\n[3.0.4]: https://github.com/textualize/rich/compare/v3.0.3...v3.0.4\n[3.0.3]: https://github.com/textualize/rich/compare/v3.0.2...v3.0.3\n[3.0.2]: https://github.com/textualize/rich/compare/v3.0.1...v3.0.2\n[3.0.1]: https://github.com/textualize/rich/compare/v3.0.0...v3.0.1\n[3.0.0]: https://github.com/textualize/rich/compare/v2.3.1...v3.0.0\n[2.3.1]: https://github.com/textualize/rich/compare/v2.3.0...v2.3.1\n[2.3.0]: https://github.com/textualize/rich/compare/v2.2.6...v2.3.0\n[2.2.6]: https://github.com/textualize/rich/compare/v2.2.5...v2.2.6\n[2.2.5]: https://github.com/textualize/rich/compare/v2.2.4...v2.2.5\n[2.2.4]: https://github.com/textualize/rich/compare/v2.2.3...v2.2.4\n[2.2.3]: https://github.com/textualize/rich/compare/v2.2.2...v2.2.3\n[2.2.2]: https://github.com/textualize/rich/compare/v2.2.1...v2.2.2\n[2.2.1]: https://github.com/textualize/rich/compare/v2.2.0...v2.2.1\n[2.2.0]: https://github.com/textualize/rich/compare/v2.1.0...v2.2.0\n[2.1.0]: https://github.com/textualize/rich/compare/v2.0.1...v2.1.0\n[2.0.1]: https://github.com/textualize/rich/compare/v2.0.0...v2.0.1\n[2.0.0]: https://github.com/textualize/rich/compare/v1.3.1...v2.0.0\n[1.3.1]: https://github.com/textualize/rich/compare/v1.3.0...v1.3.1\n[1.3.0]: https://github.com/textualize/rich/compare/v1.2.3...v1.3.0\n[1.2.3]: https://github.com/textualize/rich/compare/v1.2.2...v1.2.3\n[1.2.2]: https://github.com/textualize/rich/compare/v1.2.1...v1.2.2\n[1.2.1]: https://github.com/textualize/rich/compare/v1.2.0...v1.2.1\n[1.2.0]: https://github.com/textualize/rich/compare/v1.1.9...v1.2.0\n[1.1.9]: https://github.com/textualize/rich/compare/v1.1.8...v1.1.9\n[1.1.8]: https://github.com/textualize/rich/compare/v1.1.7...v1.1.8\n[1.1.7]: https://github.com/textualize/rich/compare/v1.1.6...v1.1.7\n[1.1.6]: https://github.com/textualize/rich/compare/v1.1.5...v1.1.6\n[1.1.5]: https://github.com/textualize/rich/compare/v1.1.4...v1.1.5\n[1.1.4]: https://github.com/textualize/rich/compare/v1.1.3...v1.1.4\n[1.1.3]: https://github.com/textualize/rich/compare/v1.1.2...v1.1.3\n[1.1.2]: https://github.com/textualize/rich/compare/v1.1.1...v1.1.2\n[1.1.1]: https://github.com/textualize/rich/compare/v1.1.0...v1.1.1\n[1.1.0]: https://github.com/textualize/rich/compare/v1.0.3...v1.1.0\n[1.0.3]: https://github.com/textualize/rich/compare/v1.0.2...v1.0.3\n[1.0.2]: https://github.com/textualize/rich/compare/v1.0.1...v1.0.2\n[1.0.1]: https://github.com/textualize/rich/compare/v1.0.0...v1.0.1\n[1.0.0]: https://github.com/textualize/rich/compare/v0.8.13...v1.0.0\n[0.8.13]: https://github.com/textualize/rich/compare/v0.8.12...v0.8.13\n[0.8.12]: https://github.com/textualize/rich/compare/v0.8.11...v0.8.12\n[0.8.11]: https://github.com/textualize/rich/compare/v0.8.10...v0.8.11\n[0.8.10]: https://github.com/textualize/rich/compare/v0.8.9...v0.8.10\n[0.8.9]: https://github.com/textualize/rich/compare/v0.8.8...v0.8.9\n[0.8.8]: https://github.com/textualize/rich/compare/v0.8.7...v0.8.8\n[0.8.7]: https://github.com/textualize/rich/compare/v0.8.6...v0.8.7\n[0.8.6]: https://github.com/textualize/rich/compare/v0.8.5...v0.8.6\n[0.8.5]: https://github.com/textualize/rich/compare/v0.8.4...v0.8.5\n[0.8.4]: https://github.com/textualize/rich/compare/v0.8.3...v0.8.4\n[0.8.3]: https://github.com/textualize/rich/compare/v0.8.2...v0.8.3\n[0.8.2]: https://github.com/textualize/rich/compare/v0.8.1...v0.8.2\n[0.8.1]: https://github.com/textualize/rich/compare/v0.8.0...v0.8.1\n[0.8.0]: https://github.com/textualize/rich/compare/v0.7.2...v0.8.0\n[0.7.2]: https://github.com/textualize/rich/compare/v0.7.1...v0.7.2\n[0.7.1]: https://github.com/textualize/rich/compare/v0.7.0...v0.7.1\n[0.7.0]: https://github.com/textualize/rich/compare/v0.6.0...v0.7.0\n[0.6.0]: https://github.com/textualize/rich/compare/v0.5.0...v0.6.0\n[0.5.0]: https://github.com/textualize/rich/compare/v0.4.1...v0.5.0\n[0.4.1]: https://github.com/textualize/rich/compare/v0.4.0...v0.4.1\n[0.4.0]: https://github.com/textualize/rich/compare/v0.3.3...v0.4.0\n[0.3.3]: https://github.com/textualize/rich/compare/v0.3.2...v0.3.3\n[0.3.2]: https://github.com/textualize/rich/compare/v0.3.1...v0.3.2\n[0.3.1]: https://github.com/textualize/rich/compare/v0.3.0...v0.3.1\n[0.3.0]: https://github.com/textualize/rich/compare/v0.2.0...v0.3.0\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2705078125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socioeconomic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at will@textualize.io. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.703125,
          "content": "# Contributing to Rich\n\nThis project welcomes contributions in the form of Pull Requests.\nFor clear bug-fixes / typos etc. just submit a PR.\nFor new features or if there is any doubt in how to fix a bug, you might want\nto open an issue prior to starting work, or email willmcgugan+rich@gmail.com\nto discuss it first.\n\n## Prerequisites\n\nRich uses [poetry](https://python-poetry.org/docs/) for packaging and\ndependency management. To start developing with Rich, install Poetry\nusing the [recommended method](https://python-poetry.org/docs/#installation).\n\nNext, you'll need to create a _fork_ (your own personal copy) of the Rich repository, and clone that fork \non to your local machine. GitHub offers a great tutorial for this process [here](https://docs.github.com/en/get-started/quickstart/fork-a-repo).\nAfter following this guide, you'll have a local copy of the Rich project installed.\n\nEnter the directory containing your copy of Rich (`cd rich`).\n\nPoetry can be used to create an isolated _virtual environment_ for the project:\n\n```\npoetry shell\n```\n\nThe first time we run `poetry shell`, such an isolated environment is created and forever associated with our project.\nAny time we wish to enter this virtual environment again, we simply run `poetry shell` again.\n\nNow we can install the dependencies of Rich into the virtual environment:\n\n```\npoetry install\n```\n\nThe rest of this guide assumes you're inside the virtual environment.\nIf you're having difficulty running any of the commands that follow,\nensure you're inside the virtual environment by running `poetry shell`.\n\n## Developing\n\nAt this point, you're ready to start developing.\nSome things to consider while developing Rich code include:\n\n* Ensure new code is documented in docstrings\n* Avoid abbreviations in variable or class names\n* Aim for consistency in coding style and API design\n\nBefore each [commit](https://github.com/git-guides/git-commit), you should:\n\n1. Run the tests and ensure they pass\n2. Ensure type-checking passes\n3. Format the code using `black`\n\nThese steps are described in the following sections.\n\n### Tests\n\nRun tests with the following command:\n\n```\nmake test\n```\n\nOr if you don't have `make`, run the following:\n\n```\npytest --cov-report term-missing --cov=rich tests/ -vv\n```\n\nNew code should ideally have tests and not break existing tests.\n\nThe \"Coverage Report\" that gets printed to the terminal after the tests run can be used\nto identify lines of code that haven't been covered by tests.\nIf any of the new lines you've added or modified appear in this report, you should strongly consider adding tests which exercise them.\n\n### Type Checking\n\nRich uses type annotations throughout, and `mypy` to do the checking.\nRun the following to type check Rich:\n\n```\nmake typecheck\n```\n\nOr if you don't have `make`:\n\n```\nmypy -p rich --config-file= --ignore-missing-imports --no-implicit-optional --warn-unreachable\n```\n\nPlease add type annotations for all new code, and ensure that type checking succeeds before creating a pull request.\n\n### Code Formatting\n\nRich uses [`black`](https://github.com/psf/black) for code formatting.\nI recommend setting up black in your editor to format on save.\n\nTo run black from the command line, use `make format-check` to check your formatting,\nand use `make format` to format and write to the files.\n\n### Consider Documentation\n\nConsider whether the change you made would benefit from documentation - if the feature has any user impact at all, the answer is almost certainly yes!\nDocumentation can be found in the `docs` directory.\nThere are some additional dependencies required to build the documentation. \nThese dependencies can be installed by running (from the `docs` directory):\n\n```\npip install -r requirements.txt\n```\n\nAfter updating the documentation, you can build them (from the project root directory) by running:\n\n```\nmake docs\n```\n\nThis will generate the static HTML for the documentation site at `docs/build/html`.\n\n### Update CHANGELOG and CONTRIBUTORS\n\nBefore submitting your pull request, update the `CHANGELOG.md` file describing, briefly, what you've done.\nBe sure to follow the format seen in the rest of the document.\n\nIf this is your first time contributing to Rich:\n\n1. Welcome!\n2. Be sure to add your name to `CONTRIBUTORS.md`.\n\n### Pre-Commit\n\nWe strongly recommend you [install the pre-commit hooks](https://pre-commit.com/#installation) included in the repository.\nThese automatically run some of the checks described earlier each time you run `git commit`,\nand over time can reduce development overhead quite considerably.\n\n## Creating A Pull Request\n\nOnce your happy with your change and have ensured that all steps above have been followed (and checks have passed), you can create a pull request.\nGitHub offers a guide on how to do this [here](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork).\nPlease ensure that you include a good description of what your change does in your pull request, and link it to any relevant issues or discussions.\n\nWhen you create your pull request, we'll run the checks described earlier. If they fail, please attempt to fix them as we're unlikely to be able to review your code until then.\nIf you've exhausted all options on trying to fix a failing check, feel free to leave a note saying so in the pull request and someone may be able to offer assistance.\n\n### Code Review\n\nAfter the checks in your pull request pass, someone will review your code.\nThere may be some discussion and, in most cases, a few iterations will be required to find a solution that works best.\n\n## Afterwards\n\nWhen the pull request is approved, it will be merged into the `master` branch.\nYour change will only be available to users the next time Rich is released. \n"
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 4.2119140625,
          "content": "# Contributors\n\nThe following people have contributed to the development of Rich:\n\n<!-- Add your name below, sort alphabetically by surname. Link to GitHub profile / your home page. -->\n\n- [Patrick Arminio](https://github.com/patrick91)\n- [Gregory Beauregard](https://github.com/GBeauregard/pyffstream)\n- [Artur Borecki](https://github.com/pufereq)\n- [Pedro Aaron](https://github.com/paaaron)\n- [Robin Bowes](https://github.com/yo61)\n- [Dennis Brakhane](https://github.com/brakhane)\n- [Darren Burns](https://github.com/darrenburns)\n- [Ceyda Cinarel](https://github.com/cceyda)\n- [Jim Crist-Harif](https://github.com/jcrist)\n- [Ed Davis](https://github.com/davised)\n- [Pete Davison](https://github.com/pd93)\n- [James Estevez](https://github.com/jstvz)\n- [Jonathan Eunice](https://github.com/jonathan-3play)\n- [Aryaz Eghbali](https://github.com/AryazE)\n- [Oleksis Fraga](https://github.com/oleksis)\n- [Andy Gimblett](https://github.com/gimbo)\n- [Kai Giokas](https://github.com/kaisforza)\n- [Tom Gooding](https://github.com/TomJGooding)\n- [Michał Górny](https://github.com/mgorny)\n- [Nok Lam Chan](https://github.com/noklam)\n- [Leron Gray](https://github.com/daddycocoaman)\n- [Andre Hora](https://github.com/andrehora)\n- [Kenneth Hoste](https://github.com/boegel)\n- [Lanqing Huang](https://github.com/lqhuang)\n- [Finn Hughes](https://github.com/finnhughes)\n- [Logan Hunt](https://github.com/dosisod)\n- [JP Hutchins](https://github.com/JPhutchins)\n- [Ionite](https://github.com/ionite34)\n- [Josh Karpel](https://github.com/JoshKarpel)\n- [Jan Katins](https://github.com/jankatins)\n- [Hugo van Kemenade](https://github.com/hugovk)\n- [Andrew Kettmann](https://github.com/akettmann)\n- [Alexander Krasnikov](https://github.com/askras)\n- [Martin Larralde](https://github.com/althonos)\n- [Hedy Li](https://github.com/hedythedev)\n- [Henry Mai](https://github.com/tanducmai)\n- [Luka Mamukashvili](https://github.com/UltraStudioLTD)\n- [Alexander Mancevice](https://github.com/amancevice)\n- [Will McGugan](https://github.com/willmcgugan)\n- [Paul McGuire](https://github.com/ptmcg)\n- [Antony Milne](https://github.com/AntonyMilneQB)\n- [Michael Milton](https://github.com/multimeric)\n- [Martina Oefelein](https://github.com/oefe)\n- [Nathan Page](https://github.com/nathanrpage97)\n- [Dave Pearson](https://github.com/davep/)\n- [Avi Perl](https://github.com/avi-perl)\n- [Laurent Peuch](https://github.com/psycojoker)\n- [Ronny Pfannschmidt](https://github.com/RonnyPfannschmidt/)\n- [Olivier Philippon](https://github.com/DrBenton)\n- [Kylian Point](https://github.com/p0lux)\n- [Kyle Pollina](https://github.com/kylepollina)\n- [Sebastián Ramírez](https://github.com/tiangolo)\n- [Grant Ramsay](https://github.com/seapagan)\n- [Felipe Guedes](https://github.com/guedesfelipe)\n- [Min RK](https://github.com/minrk)\n- [Clément Robert](https://github.com/neutrinoceros)\n- [Brian Rutledge](https://github.com/bhrutledge)\n- [Tushar Sadhwani](https://github.com/tusharsadhwani)\n- [Luca Salvarani](https://github.com/LukeSavefrogs)\n- [Paul Sanders](https://github.com/sanders41)\n- [Louis Sautier](https://github.com/sbraz)\n- [Tim Savage](https://github.com/timsavage)\n- [Anthony Shaw](https://github.com/tonybaloney)\n- [Nicolas Simonds](https://github.com/0xDEC0DE)\n- [Aaron Stephens](https://github.com/aaronst)\n- [Karolina Surma](https://github.com/befeleme)\n- [Gabriele N. Tornetta](https://github.com/p403n1x87)\n- [Nils Vu](https://github.com/nilsvu)\n- [Arian Mollik Wasi](https://github.com/wasi-master)\n- [Jan van Wijk](https://github.com/jdvanwijk)\n- [Handhika Yanuar Pratama](https://github.com/theDreamer911)\n- [za](https://github.com/za)\n- [Motahhar Mokfi](https://github.com/motahhar)\n- [Tomer Shalev](https://github.com/tomers)\n- [Serkan UYSAL](https://github.com/uysalserkan)\n- [Zhe Huang](https://github.com/onlyacat)\n- [Adrian Zuber](https://github.com/xadrianzetx)\n- [Ke Sun](https://github.com/ksun212)\n- [Qiming Xu](https://github.com/xqm32)\n- [James Addison](https://github.com/jayaddison)\n- [Pierro](https://github.com/xpierroz)\n- [Bernhard Wagner](https://github.com/bwagner)\n- [Aaron Beaudoin](https://github.com/AaronBeaudoin)\n- [Sam Woodward](https://github.com/PyWoody)\n- [L. Yeung](https://github.com/lewis-yeung)\n- [chthollyphile](https://github.com/chthollyphile)\n- [Jonathan Helmus](https://github.com/jjhelmus)\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 5.0166015625,
          "content": "\n# Frequently Asked Questions\n- [How do I log a renderable?](#how-do-i-log-a-renderable)\n- [How do I render console markup in RichHandler?](#how-do-i-render-console-markup-in-richhandler)\n- [Natively inserted ANSI escape sequence characters break alignment of Panel.](#natively-inserted-ansi-escape-sequence-characters-break-alignment-of-panel)\n- [python -m rich.spinner shows extra lines.](#python--m-richspinner-shows-extra-lines)\n- [Rich is automatically installing traceback handler.](#rich-is-automatically-installing-traceback-handler)\n- [Strange colors in console output.](#strange-colors-in-console-output)\n- [Why does content in square brackets disappear?](#why-does-content-in-square-brackets-disappear)\n- [Why does emoji break alignment in a Table or Panel?](#why-does-emoji-break-alignment-in-a-table-or-panel)\n\n<a name=\"how-do-i-log-a-renderable\"></a>\n## How do I log a renderable?\n\nPython's logging module is designed to work with strings. Consequently you won't be able to log Rich renderables (Table, Tree, etc) by calling `logger.debug` or other similar method.\n\nYou could use the [capture](https://rich.readthedocs.io/en/latest/console.html#capturing-output) API to convert the renderable to a string and log that. However I would advise against it.\n\nLogging supports configurable back-ends, which means that a log message could go somewhere other than the terminal -- which may not correctly render the formatting and style produced by Rich.\n\nIf you are only logging with a file-handler to stdout, then you probably don't need to use the logging module at all. Consider using [Console.log](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.log) which will render anything that you can print with Rich, with a timestamp.\n\n<a name=\"how-do-i-render-console-markup-in-richhandler\"></a>\n## How do I render console markup in RichHandler?\n\nConsole markup won't work anywhere else, other than `RichHandler` -- which is why they are disabled by default.\n\nSee the docs if you want to [enable console markup](https://rich.readthedocs.io/en/latest/logging.html#logging-handler) in the logging handler.\n\n<a name=\"natively-inserted-ansi-escape-sequence-characters-break-alignment-of-panel\"></a>\n## Natively inserted ANSI escape sequence characters break alignment of Panel.\n\nIf you print ansi escape sequences for color and style you may find the output breaks your output.\nYou may find that border characters in Panel and Table are in the wrong place, for example.\n\nAs a general rule, you should allow Rich to generate all ansi escape sequences, so it can correctly account for these invisible characters.\nIf you can't avoid a string with escape codes, you can convert it to an equivalent `Text` instance with `Text.from_ansi`.\n\n<a name=\"python--m-richspinner-shows-extra-lines\"></a>\n## python -m rich.spinner shows extra lines.\n\nThe spinner example is know to break on some terminals (Windows in particular).\n\nSome terminals don't display emoji with the correct width, which means Rich can't always align them accurately inside a panel.\n\n<a name=\"rich-is-automatically-installing-traceback-handler\"></a>\n## Rich is automatically installing traceback handler.\n\nRich will never install the traceback handler automatically.\n\nIf you are getting Rich tracebacks and you don't want them, then some other piece of software is calling `rich.traceback.install()`.\n\n<a name=\"strange-colors-in-console-output\"></a>\n## Strange colors in console output.\n\nRich will highlight certain patterns in your output such as numbers, strings, and other objects like IP addresses.\n\nOccasionally this may also highlight parts of your output you didn't intend. See the [docs on highlighting](https://rich.readthedocs.io/en/latest/highlighting.html) for how to disable highlighting.\n\n<a name=\"why-does-content-in-square-brackets-disappear\"></a>\n## Why does content in square brackets disappear?\n\nRich will treat text within square brackets as *markup tags*, for instance `\"[bold]This is bold[/bold]\"`.\n\nIf you are printing strings with literally square brackets you can either disable markup, or escape your strings.\nSee the docs on [console markup](https://rich.readthedocs.io/en/latest/markup.html) for how to do this.\n\n<a name=\"why-does-emoji-break-alignment-in-a-table-or-panel\"></a>\n## Why does emoji break alignment in a Table or Panel?\n\nCertain emoji take up double space within the terminal. Unfortunately, terminals don't always agree how wide a given character should be.\n\nRich has no way of knowing how wide a character will be on any given terminal. This can break alignment in containers like Table and Panel, where Rich needs to know the width of the content.\n\nThere are also *multiple codepoints* characters, such as country flags, and emoji modifiers, which produce wildly different results across terminal emulators.\n\nFortunately, most characters will work just fine. But you may have to avoid using the emojis that break alignment. You will get good results if you stick to emoji released on or before version 9 of the Unicode database,\n\n<hr>\n\nGenerated by [FAQtory](https://github.com/willmcgugan/faqtory)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03125,
          "content": "Copyright (c) 2020 Will McGugan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.2998046875,
          "content": "test:\n\tTERM=unknown pytest --cov-report term-missing --cov=rich tests/ -vv\ntest-no-cov:\n\tTERM=unknown pytest tests/ -vv\nformat-check:\n\tblack --check .\nformat:\n\tblack .\ntypecheck:\n\tmypy -p rich --no-incremental\ntypecheck-report:\n\tmypy -p rich --html-report mypy_report\n.PHONY: docs\ndocs:\n\tcd docs; make html\n"
        },
        {
          "name": "README.cn.md",
          "type": "blob",
          "size": 16.794921875,
          "content": "[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\n[![codecov](https://codecov.io/gh/Textualize/rich/branch/master/graph/badge.svg)](https://codecov.io/gh/Textualize/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\n\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\n • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\n • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\n • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)\n • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\n • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\n • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)\n • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\n • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)\n • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\n • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)\n • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\n • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)\n • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)\n  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)\n • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n\nRich 是一个 Python 库，可以为您在终端中提供富文本和精美格式。\n\n[Rich 的 API](https://rich.readthedocs.io/en/latest/) 让在终端输出颜色和样式变得很简单。此外，Rich 还可以绘制漂亮的表格、进度条、markdown、语法高亮的源代码以及栈回溯信息（tracebacks）等——开箱即用。\n\n![功能纵览](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\n有关 Rich 的视频介绍，请参见\n[@fishnets88](https://twitter.com/fishnets88) 录制的\n[calmcode.io](https://calmcode.io/rich/introduction.html)。\n\n## 兼容性\n\nRich 适用于 Linux，OSX 和 Windows。真彩色/表情符号可与新的 Windows 终端一起使用，Windows 的经典终端仅限 8 种颜色。\n\nRich 还可以与 [Jupyter 笔记本](https://jupyter.org/)一起使用，而无需其他配置。\n\n## 安装说明\n\n使用`pip`或其他 PyPI 软件包管理器进行安装。\n\n```sh\npython -m pip install rich\n```\n\n## Rich 的打印功能\n\n想毫不费力地将 Rich 的输出功能添加到您的应用程序中，您只需导入 [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) 方法，它和 Python 内置的同名函数有着完全一致的函数签名。试试看：\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## 在交互式命令行（REPL）中使用 Rich\n\nRich 可以被安装到 Python 交互式命令行中，那样做以后，任何数据结构都可以被漂亮的打印出来，自带语法高亮。\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## 使用控制台\n\n想要对 Rich 终端内容进行更多控制，请您导入并构造一个[控制台](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console)对象。\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nConsole 对象包含一个`print`方法，它和语言内置的`print`函数有着相似的接口。下面是一段使用样例：\n\n```python\nconsole.print(\"Hello\", \"World!\")\n```\n\n您可能已经料到，这时终端上会显示“ Hello World！”。请注意，与内置的“print”函数不同，Rich 会将文字自动换行以适合终端宽度。\n\n有好几种方法可以为输出添加颜色和样式。您可以通过添加`style`关键字参数来为整个输出设置样式。例子如下：\n\n```python\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\n输出如下图：\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\n\n这个范例一次只设置了一行文字的样式。如果想获得更细腻更复杂的样式，Rich 可以渲染一个特殊的标记，其语法类似于[bbcode](https://en.wikipedia.org/wiki/BBCode)。示例如下：\n\n```python\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n![控制台标记](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\n\n使用`Console`对象，你可以花最少的工夫生成复杂的输出。更详细的内容可查阅 [Console API](https://rich.readthedocs.io/en/latest/console.html) 文档。\n\n## Rich Inspect\n\nRich 提供一个 [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) 函数来给任意的 Python 对象打印报告，比如类（class）、实例（instance）和内置对象（builtin）等。\n\n```python\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)\n\n查看  [inspect 文档](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect)详细了解。\n\n# Rich 库内容\n\nRich 包含了一系列内置的 _可渲染类型(renderables)_ ，你可以用它们为命令行程序构建出优雅的输出，也可以拿它们来辅助调试你的代码。\n\n点击以下标题查看详细：\n\n<details>\n<summary>日志（Log）</summary>\n\nConsole 对象有一个与`print()`类似的`log()`方法，但它会多输出一列内容，里面包含当前时间以及调用方法的文件行号。默认情况下，Rich 将针对 Python 结构和 repr 字符串添加语法高亮。如果您记录一个集合（如字典或列表），Rich 会把它漂亮地打印出来，使其切合可用空间。下面是其中一些功能的示例：\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\n以上范例的输出如下：\n\n![日志](https://github.com/textualize/rich/raw/master/imgs/log.png)\n\n注意其中的`log_locals`参数会输出一个表格，该表格包含调用 log 方法的局部变量。\n\nlog 方法既可用于将常驻进程（例如服务器进程）的日志打印到终端，在调试时也是个好帮手。\n\n</details>\n<details>\n<summary>日志处理器（Logging Handler）</summary>\n\n您还可以使用内置的[处理器类](https://rich.readthedocs.io/en/latest/logging.html)来对 Python 的 logging 模块的输出进行格式化和着色。下面是输出示例：\n\n![记录](https://github.com/textualize/rich/raw/master/imgs/logging.png)\n\n</details>\n\n<details>\n<summary>Emoji 表情</summary>\n\n将名称放在两个冒号之间即可在控制台输出中插入 emoji 表情符。示例如下：\n\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\n请谨慎地使用此功能。\n\n</details>\n\n<details>\n<summary>表格（Tables）</summary>\n\nRich 可以使用 Unicode 框字符来呈现多变的[表格](https://rich.readthedocs.io/en/latest/tables.html)。Rich 包含多种边框，样式，单元格对齐等格式设置的选项。下面是一个简单的示例：\n\n```python\nfrom rich.console import Console\nfrom rich.table import Column, Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\n该示例的输出如下：\n\n![表格](https://github.com/textualize/rich/raw/master/imgs/table.png)\n\n请注意，控制台标记的呈现方式与`print()`和`log()`相同。实际上，由 Rich 渲染的任何内容都可以添加到标题/行（甚至其他表格）中。\n\n`Table`类很聪明，可以调整列的大小以适合终端的可用宽度，并能根据需要对文字折行。下面是相同的示例，输出与比上表小的终端上：\n\n![表格 2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\n\n</details>\n\n<details>\n<summary>进度条（Progress Bars）</summary>\n\nRich 可以渲染多种“无闪烁”的[进度](https://rich.readthedocs.io/en/latest/progress.html)条图形，以跟踪长时间运行的任务。\n\n基本用法：用`track`函数调用任何程序并迭代结果。下面是一个例子：\n\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\n添加多个进度条并不难。以下是从文档中获取的示例：\n\n![进度](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\n这些列可以配置为显示您所需的任何详细信息。内置列包括完成百分比，文件大小，文件速度和剩余时间。下面是显示正在进行的下载的示例：\n\n![进度](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\n\n要自己尝试一下，请参阅[examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py)，它可以在显示进度的同时下载多个 URL。\n\n</details>\n\n<details>\n<summary>状态动画（Status）</summary>\n\n对于那些很难计算进度的情况，你可以使用 [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) 方法，它会展示一个“环形旋转（spinner）”的动画和文字信息。这个动画并不会妨碍你正常使用控制台。下面是个例子：\n\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\n这会往终端生成以下输出：\n\n![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\n\n这个旋转动画借鉴自 [cli-spinners](https://www.npmjs.com/package/cli-spinners) 项目。你可以通过`spinner`参数指定一种动画效果。执行以下命令来查看所有可选值：\n\n```\npython -m rich.spinner\n```\n\n这会往终端输出以下内容：\n\n![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\n\n</details>\n\n<details>\n<summary>树（Tree）</summary>\n\nRich 可以渲染一个包含引导线的[树（tree）](https://rich.readthedocs.io/en/latest/tree.html)。对于展示文件目录结构和其他分级数据来说，树是理想选择。\n\n树的标签可以是简单文本或任何 Rich 能渲染的东西。执行以下命令查看演示：\n\n```\npython -m rich.tree\n```\n\n这会产生以下输出：\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)\n\n[tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) 是一个展示任意目录的文件树视图的样例文件，类似于 Linux 中的 `tree` 命令。\n\n</details>\n\n<details>\n<summary>列（Columns）</summary>\n\nRich 可以将内容通过排列整齐的，具有相等或最佳的宽度的[列](https://rich.readthedocs.io/en/latest/columns.html)来呈现。下面是（macOS / Linux）`ls`命令的一个非常基本的克隆，用于用列来显示目录列表：\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\n以下屏幕截图是[列示例](https://github.com/textualize/rich/blob/master/examples/columns.py)的输出，该列显示了从 API 提取的数据：\n\n![列](https://github.com/textualize/rich/raw/master/imgs/columns.png)\n\n</details>\n\n<details>\n<summary>Markdown</summary>\n\nRich 可以呈现[markdown](https://rich.readthedocs.io/en/latest/markdown.html)，并可相当不错的将其格式转移到终端。\n\n为了渲染 markdown，请导入`Markdown`类，并使用包含 markdown 代码的字符串来构造它，然后将其打印到控制台。例子如下：\n\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\n该例子的输出如下图：\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\n\n</details>\n\n<details>\n<summary>语法高亮（Syntax Highlighting）</summary>\n\nRich 使用[pygments](https://pygments.org/)库来实现[语法高亮显示](https://rich.readthedocs.io/en/latest/syntax.html)。用法类似于渲染 markdown。构造一个`Syntax`对象并将其打印到控制台。下面是一个例子：\n\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\n输出如下：\n\n![语法](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\n\n</details>\n\n<details>\n<summary>栈回溯信息（Tracebacks）</summary>\n\nRich 可以渲染出漂亮的[栈回溯信息](https://rich.readthedocs.io/en/latest/traceback.html)，它比标准的 Python 格式更容易阅读，且能显示更多的代码。您可以将 Rich 设置为默认的栈回溯处理程序，这样所有未捕获的异常都将由 Rich 为渲染。\n\n下面是在 OSX（在 Linux 上也类似）系统的效果：\n\n![回溯](https://github.com/textualize/rich/raw/master/imgs/traceback.png)\n\n</details>\n\n所有的 Rich 可渲染对象都采用了 [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html) 协议，你可以用该协议实现你独有的 Rich 内容。\n\n## 使用 Rich 的项目\n\n这里是一些使用 Rich 的项目:\n\n- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)\n  一个用于三维神经解剖数据可视化的 python 包\n- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)\n  自动解密工具\n- [emeryberger/scalene](https://github.com/emeryberger/scalene)\n  一个高性能、高精度的 Python CPU 和内存剖析器\n- [hedythedev/StarCli](https://github.com/hedythedev/starcli)\n  通过命令行浏览 GitHub 热门项目\n- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)\n  这个工具可以扫描一些常见的、有漏洞的组件（openssl、libpng、libxml2、expat和其他一些组件），让你知道你的系统是否包含有已知漏洞的常用库。\n- [nf-core/tools](https://github.com/nf)\n  包含 nf-core 社区帮助工具的 Python 包\n- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)\n  pdb + rich 的库，增强调试功能\n- [plant99/felicette](https://github.com/plant99/felicette)\n  傻瓜式卫星图像\n- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)\n  使用 Selenium 和 pytest 使自动化和测试速度提高10倍，包括电池\n- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)\n  自动将字幕与视频同步\n- [tryolabs/norfair](https://github.com/tryolabs/norfair)\n  轻量级 Python 库，用于向任何检测器添加实时 2D 对象跟踪\n- +[还有很多](https://github.com/textualize/rich/network/dependents)!\n"
        },
        {
          "name": "README.de-ch.md",
          "type": "blob",
          "size": 18.359375,
          "content": "[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\n[![codecov](https://codecov.io/gh/Textualize/rich/branch/master/graph/badge.svg)](https://codecov.io/gh/Textualize/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\n\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\n • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\n • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\n • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)\n • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\n • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\n • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)\n • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\n • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)\n • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\n • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)\n • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\n • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)\n • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)\n  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)\n • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n\nRich isch ä Python Library för _rich_ Text ond ganz schöni formatiärig im Törminäl\n\nD [Rich API](https://rich.readthedocs.io/en/latest/) machts ganz eifach zom Farbä ond Stiil zu de Törminälusgob hinzu z füäge. Rich cha au schöni Tabelle, Progressbare, Markdown, Syntax hervorhebe, Tracebäcks und meh darstelle — fix fertig usem Böxli.\n\n![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\nE Video Iifüärig öber Rich geds onder [calmcode.io](https://calmcode.io/rich/introduction.html) vo [@fishnets88](https://twitter.com/fishnets88).\n\nLueg was [anderi öber Rich säged](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).\n\n## Kompatibilität\n\nRich funktioniert mit Linux, OSX ond Windows. True color / emoji funktioniert mit em neue Windows Törminäl, s klassische Törminäl isch of 16 Farbe limitiärt. Rich brucht Python 3.6.3 oder neuer.\n\nRich funktioniert mit [Jupyter notebooks](https://jupyter.org/) ohni irgendwelchä zuäsätzloche konfiguration.\n\n## Installation\n\nInstallation mit `pip` oder mit dim liäblings PyPI Päckli-Manager.\n\n```sh\npython -m pip install rich\n```\n\nFür das do us zum d Rich usgob im Törminäl z teste:\n\n```sh\npython -m rich\n```\n\n## Rich Print\n\nZom ohni Ufwand Rich Usgob zu dinnere Applikation hinzuäfüäge, chasch eifach d [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) Methodä importiäre, weli di glich Signatuur hed wiä d Builtin Python Funktion. Versuech das:\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## Rich REPL\n\nRich cha i de Python REPL installiert werde so dass irgend e Datestruktuur hübsch usgeh ond Highlighted wird.\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## Console bruchä\n\nFür meh kontrolle öber de Törminäl inhalt, importiär und instanziär e [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) Objekt.\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nS Console Objekt hät e `print` Methode mitäre absichtloch gliche Schnittstell wiä d Builtin `print` Funktion. Do es Bispiil wiä mos brucht:\n\n```python\nconsole.print(\"Hello\", \"World!\")\n```\n\nWiä erwartet wird `\"Hello World!\"` im Törminäl usgeh. Beach das im gägesatz zu de Builtin `print` Funktion, Rich de text so ombricht das es id Törminäl breiti ine passt.\n\nEs ged es paar Wäg zom Farb und Stiil zu de Usgob hinzuä z füäge. Me cha en stiil a de ganze Usgob zuäwiise i dem mo s Schlösselwortargument `style` verwendet. Do es Bispiil:\n\n```python\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\nD Usgob gsiät öppe ä so us:\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\n\nDa isch guät für d Gstalltig vom Text pro Liniä. Vör ä granularäri Gstalltig hed Rich e spezielli Markup mitäre ähnloche Befehlsufbau wiä [bbcode](https://en.wikipedia.org/wiki/BBCode). Do es Bispiil:\n\n```python\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\n\nDu chasch mitmäne Console Objekt mit wenig Ufwand aasprechendi Usgob erziile. Lueg do d [Console API](https://rich.readthedocs.io/en/latest/console.html) Dokumentation für d Details a.\n\n## Rich Inspect\n\nRich hät e [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) Funktion wo cha Bricht öber jeglochi Python Objekt, wie Class, Instanz oder Builtin erstelle.\n\n```python\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)\n\nLueg do d [inspect Dokumentation](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) für d Details a.\n\n# Rich-Bibliothek\n\nRich häd ä Aazahl vo integriäte _renderables_ wo du chasch verwende zum eleganti Usgobe i dinner e CLI generiäre ond der hälfed bim debugge vo dim Code.\n\nDrock of di folgende Öberschrifte für d Details:\n\n<details>\n<summary>Log</summary>\n\nS Console Objekt hät e `log()` Methode wo verglichbar zu de `print()` Schnittstell isch aber zuäsätzloch no e Spaltä för di aktuäll Zitt und d Datai mit de Zille wo de Ufruäf macht us git. Standardmässig tuät Rich es Syntax Highlighting für Python Strukturä sowiä repr Text machä. Went e Collection (wiä zum Bispiil dict oder list) loggsch wird Rich das hübsch Usgeh so dass es i de verfüägbari Platz ine passt. Do es Bispiil für e paar vo dene Funktionä.\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\nDas do obe gid di folgend Usgob:\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)\n\nBeachte s Argument `log_locals` wo innere Tabelle di lokalä Variable us gid zur Zitt wo d Methodä ufgruäfä worde isch.\n\nD log Methodä cha zum is Törminäl inne z Logge für langläbige Applikationä wie Server brucht werde isch aber au fürs Debuggä ganz e netti Hilf.\n\n</details>\n<details>\n<summary>Logging Handler</summary>\n\nDu chasch au d Builtin [Handler Class](https://rich.readthedocs.io/en/latest/logging.html) verwende zum d Usgob vom Python logging Module z formatiäre und iifärbe. Do es Bispiil vo de Usgob:\n\n![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)\n\n</details>\n\n<details>\n<summary>Emoji</summary>\n\nZom e Emoji i de Konsoleusgob iizfüäge tuä de name züschet zwei Doppelpünkt. Do es Bispiil:\n\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\nBitte verwend diä Funktion gschiid.\n\n</details>\n\n<details>\n<summary>Tabelle</summary>\n\nRich cha flexiibäl [Tabelle](https://rich.readthedocs.io/en/latest/tables.html) mit Boxä us Unicodezeiche generiäre. Es gid e Viilzahl vo Formatiärigsoptionä für Ränder, Stiil, Zelleusrichtig ond so witter.\n\n![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)\n\nD Animation obe isch mit [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) us em Bispiil-Ordner erstellt worde.\n\nDo es eifachs Tabelle-Bispiil:\n\n```python\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\nDas gid di folgend Usgob:\n\n![table](https://github.com/textualize/rich/raw/master/imgs/table.png)\n\nBeacht das d Konsole Markup glich wie bi `print()` ond `log()` generiärt wird. Ond zwor cha alles wo vo Rich generiert werde cha au im Chopf / Zille iigfüägt werde (sogar anderi Tabellene).\n\nD Klass `Table` isch gschiid gnuäg yum d Spaltebreite am verfüägbare Platz im Törminäl aazpasse und de Text gegäbenefalls umzbreche. Do isch s gliche Bispiil mit em Törminäl chlinner als d Tabelle vo obe:\n\n![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\n\n</details>\n\n<details>\n<summary>Progress Bars</summary>\n\nRich cha meereri flackerfreii [Progress](https://rich.readthedocs.io/en/latest/progress.html) Bars darstelle zum langläbigi Tasks verfolgä.\n\nZur eifache Benutzig irgend e Sequenz id `track` Funktion ine packe und über s Resultat iteriäre. Do es Bispiil:\n\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\nEs isch nöd vill schwiriger zum mehräri Progress Bars hinzuä zfüäge. Do es Bispiil us de Doku:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\nD Spaltä cha so konfiguriärt werde das alli gwünschte Details aazeigt werded. D Built-in Spalte beinhaltät Prozentsatz, Dateigrössi, Dateigschwindikeit ond öbrigi Zitt. Do isch e andos Bispiil wo en laufände Download zeigt:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\n\nZums selber usprobiäre lueg [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) a, wo cha glichzittig mehräri URLs abelade und de Fortschritt aazeige.\n\n</details>\n\n<details>\n<summary>Status</summary>\n\nFör Situatione wos schwär isch zum de Fortschritt z berechne, chasch d [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) Methode verwende wo en 'spinner' animiärt und e Nochricht darstellt. D Animation haltet di nöd ab d Konsole witter normal z bruche. Do es Bispiil:\n\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\nDas gid di folgendi Usgob im Törminäl.\n\n![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\n\nD Spinner Animatione sind vo [cli-spinners](https://www.npmjs.com/package/cli-spinners) usglehnt. Du chasch en speziifischä Spinner mit em `spinner` Parameter uswähle. Start de folgend Befehl zom die verfüägbare Wert z gsiä:\n\n```\npython -m rich.spinner\n```\n\nDe Befehl obe generiärt di folgändi Usgob im Törminäl:\n\n![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\n\n</details>\n\n<details>\n<summary>Tree</summary>\n\nRich cha en [tree](https://rich.readthedocs.io/en/latest/tree.html) mit Hilfsliniä generiäre. En Tree isch ideal zom darstelle vo Dateistruktuure oder anderi hirarchischi Date.\n\nS Label vom Tree cha en eifache Text or alles andere wo Rich cha rendere. Start das Folgendi für e Demonstation:\n\n```\npython -m rich.tree\n```\n\nDas generiärt di folgend Usgob:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)\n\nLueg s Bispiil Script [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) für e Darstellig vo irgend eim Ordner als Tree, glich wie de Linux Befehl `tree`.\n\n</details>\n\n<details>\n<summary>Spaltene</summary>\n\nRich cha Inhalt i hübsche [Spaltene](https://rich.readthedocs.io/en/latest/columns.html) darstelle mit glichä oder optimale Breiti. Do isch e ganz eifachi kopii vom (MacOS / Linux) `ls` Befehl wo Ordner in Spaltene darstellt\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\nDe folgend Screenshot isch d Usgob vom [Spalte-Bispiil](https://github.com/textualize/rich/blob/master/examples/columns.py), wo Date vonnere API hollt ond in Spaltene darstellt:\n\n![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)\n\n</details>\n\n<details>\n<summary>Markdown</summary>\n\nRich cha [markdown](https://rich.readthedocs.io/en/latest/markdown.html) übersetze ond leistet vernünftigi Ärbät bim formatiärige is Törminäl z übersetze.\n\nZum Markdown z übersetze importier d Klass `Markdown` und instanzier es mitem Markdown Text. Nocher gid mos uf de Konsolä us. Do es Bispiil:\n\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\nDas wird d Usgob ungefär wie s Folgende geh:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\n\n</details>\n\n<details>\n<summary>Syntax Highlighting</summary>\n\nRich brucht d [pygments](https://pygments.org/) Library für d [Syntax Highlighting](https://rich.readthedocs.io/en/latest/syntax.html). S Bruche isch ähnloch zum Markdown übersetze; instanziär e `Syntax` Objekt ond gibs uf de Konsolä us. Do es Bispiil:\n\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\nDas wird d Usgob ungefär wie s Folgende geh:\n\n![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\n\n</details>\n\n<details>\n<summary>Tracebacks</summary>\n\nRich cha [wunderschöni Tracebacks](https://rich.readthedocs.io/en/latest/traceback.html) generiäre wo eifach zum läse sind und meh Code als de Standard-Python-Traceback darstellt. Du chasch Rich als default Traceback Handler setzä ond alli nöd abfangene Exceptions werded mit Rich dargstellt.\n\nSo gsiets ungefär ufemen OSX (ähnloch uf Linux) us:\n\n![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)\n\n</details>\n\nAlli Rich Renderables bruched s [Console-Protokoll](https://rich.readthedocs.io/en/latest/protocol.html), wo mo au für d eige Entwicklig vo Rich-Inhalt cha bruche.\n\n# Rich für Ondernemä\n\nVerfüägbar als Tidelift Abo.\n\nDe Betreue vo Rich ond tuusigi anderi Päkli schaffed mit Tidelift zum komerziälle Support und Wartig für Open Source Päkli wo du zum Baue vo dinnere Applikation bruchsch. Spar Zit, reduziär s Risiko ond verbessere d Code Health mit em bezahle vo de Wartig für gnau die Päkli wo mo brucht. [Lärn meh.](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n# Projekt wo Rich bruched\n\nDo es paar Projekt wo Rich verwended:\n\n- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)\n  a python package for the visualization of three dimensional neuro-anatomical data\n- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)\n  Automated decryption tool\n- [emeryberger/scalene](https://github.com/emeryberger/scalene)\n  a high-performance, high-precision CPU and memory profiler for Python\n- [hedythedev/StarCli](https://github.com/hedythedev/starcli)\n  Browse GitHub trending projects from your command line\n- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)\n  This tool scans for a number of common, vulnerable components (openssl, libpng, libxml2, expat and a few others) to let you know if your system includes common libraries with known vulnerabilities.\n- [nf-core/tools](https://github.com/nf-core/tools)\n  Python package with helper tools for the nf-core community.\n- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)\n  pdb + Rich library for enhanced debugging\n- [plant99/felicette](https://github.com/plant99/felicette)\n  Satellite imagery for dummies.\n- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)\n  Automate & test 10x faster with Selenium & pytest. Batteries included.\n- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)\n  Automagically synchronize subtitles with video.\n- [tryolabs/norfair](https://github.com/tryolabs/norfair)\n  Lightweight Python library for adding real-time 2D object tracking to any detector.\n- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Ansible-lint checks playbooks for practices and behaviour that could potentially be improved\n- [ansible-community/molecule](https://github.com/ansible-community/molecule) Ansible Molecule testing framework\n- +[Vieli meh](https://github.com/textualize/rich/network/dependents)!\n\n<!-- This is a test, no need to translate -->\n"
        },
        {
          "name": "README.de.md",
          "type": "blob",
          "size": 19.7490234375,
          "content": "[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\r\n[![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\r\n[![codecov](https://codecov.io/gh/Textualize/rich/branch/master/graph/badge.svg)](https://codecov.io/gh/Textualize/rich)\r\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\r\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\r\n\r\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\r\n\r\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\r\n • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\r\n • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\r\n • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)\r\n • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\r\n • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\r\n • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)\r\n • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\r\n • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)\r\n • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\r\n • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)\r\n • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\r\n • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)\r\n • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)\r\n  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)\r\n • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)\r\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\r\n\r\nRich ist eine Python-Bibliothek für _rich_ Text und schöne Formatierung im Terminal.\r\n\r\nDie [Rich API](https://rich.readthedocs.io/en/latest/) erleichtert das Hinzufügen von Farbe und Stil zur Terminalausgabe. Rich kann auch schöne Tabellen, Fortschrittsbalken, Markdowns, durch Syntax hervorgehobenen Quellcode, Tracebacks und mehr sofort rendern.\r\n\r\n![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)\r\n\r\nEine Video-Einführung in Rich findest du unter [quietcode.io](https://calmcode.io/rich/introduction.html) von [@ fishnets88](https://twitter.com/fishnets88).\r\n\r\nSchau hier, was [andere über Rich sagen](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).\r\n\r\n## Kompatibilität\r\n\r\nRich läuft unter Linux, OSX und Windows. True Color / Emoji funktionieren mit dem neuen Windows-Terminal. Das klassische Terminal ist auf 16 Farben beschränkt. Rich benötigt Python 3.6.3 oder höher.\r\n\r\nRich funktioniert ohne zusätzliche Konfiguration mit [Jupyter Notebooks](https://jupyter.org/).\r\n\r\n## Installation\r\n\r\nInstallation mit `pip` oder deinem bevorzugten PyPI-Paketmanager.\r\n\r\n```sh\r\npython -m pip install rich\r\n```\r\n\r\nFühre die folgenden Schritte aus, um die Rich-Ausgabe auf deinem Terminal zu testen:\r\n\r\n```sh\r\npython -m rich\r\n```\r\n\r\n## Rich Print\r\n\r\nUm deiner Anwendung mühelos eine Rich-Ausgabe hinzuzufügen, kannst du die Methode [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) importieren, die dieselbe Signatur wie die integrierte Python-Funktion hat. Versuche das:\r\n\r\n```python\r\nfrom rich import print\r\n\r\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\r\n```\r\n\r\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\r\n\r\n## Rich REPL\r\n\r\nRich kann in Python REPL installiert werden, so dass alle Datenstrukturen schön ausgegeben und hervorgehoben werden.\r\n\r\n```python\r\n>>> from rich import pretty\r\n>>> pretty.install()\r\n```\r\n\r\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\r\n\r\n## Verwenden der Konsole\r\n\r\nImportiere und erstelle ein [Konsolen-Objekt](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console), um mehr Kontrolle über umfangreiche Terminalinhalte zu erhalten.\r\n\r\n```python\r\nfrom rich.console import Console\r\n\r\nconsole = Console()\r\n```\r\n\r\nDas Konsolenobjekt verfügt über eine `print`-Methode, die eine absichtlich gleiche Schnittstelle zur integrierten `print`-Funktion aufweist. Hier ein Anwendungsbeispiel:\r\n\r\n```python\r\nconsole.print(\"Hello\", \"World!\")\r\n```\r\n\r\nWie zu erwarten, wird `\"Hello World!\"` im Terminal ausgegeben. Beachte, dass Rich im Gegensatz zur integrierten `print`-Funktion deinen Text so umbricht, dass er in die Terminalbreite passt.\r\n\r\nEs gibt verschiedene Möglichkeiten, deiner Ausgabe Farbe und Stil hinzuzufügen. Du kannst einen Stil für die gesamte Ausgabe festlegen, indem du ein Schlüsselwortargument `style` hinzufügst. Hier ein Beispiel:\r\n\r\n```python\r\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\r\n```\r\n\r\nDie Ausgabe wird in etwa wie folgt aussehen:\r\n\r\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\r\n\r\nDas ist gut, um jeweils eine Textzeile zu stylen. Für eine detailliertere Gestaltung bietet Rich ein spezielles Markup an, das in der Syntax ähnlich [bbcode](https://en.wikipedia.org/wiki/BBCode) ist. Hier ein Beispiel:\r\n\r\n```python\r\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\r\n```\r\n\r\n![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\r\n\r\nDu kannst ein Console-Objekt verwenden, um mit minimalem Aufwand anspruchsvolle Ausgaben zu erzeugen. Siehe [Konsolen-API](https://rich.readthedocs.io/en/latest/console.html) für Details.\r\n\r\n## Rich Inspect\r\n\r\nRich hat eine Funktion [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect), die einen Bericht über jedes Python-Objekt, wie Klasse, Instanz oder builtin, erzeugen kann.\r\n\r\n```python\r\n>>> my_list = [\"foo\", \"bar\"]\r\n>>> from rich import inspect\r\n>>> inspect(my_list, methods=True)\r\n```\r\n\r\n![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)\r\n\r\nSiehe [Doks Inspektor](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) für Details.\r\n\r\n# Rich-Bibliothek\r\n\r\nRich enthält eine Reihe von eingebauten _renderables_, die du verwenden kannst, um elegante Ausgaben in deiner CLI zu erzeugen und dir beim Debuggen deines Codes zu helfen.\r\n\r\nKlicke auf die folgenden Überschriften, um Details zu erfahren:\r\n\r\n<details>\r\n<summary>Log</summary>\r\n\r\nDas Console-Objekt hat eine `log()`-Methode, die die gleiche Schnittstelle wie `print()` hat, aber zusätzlich eine Spalte für die aktuelle Zeit und die Datei und Zeile, die den Aufruf gemacht hat, ausgibt. Standardmäßig führt Rich die Syntaxhervorhebung für Python-Strukturen und für repr-Strings durch. Wenn du eine Sammlung (z.B. ein Diktat oder eine Liste) protokollierst, wird Rich diese so hübsch ausgeben, dass sie in den verfügbaren Platz passt. Hier ein Beispiel für einige dieser Funktionen.\r\n\r\n```python\r\nfrom rich.console import Console\r\nconsole = Console()\r\n\r\ntest_data = [\r\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\r\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\r\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\r\n]\r\n\r\ndef test_log():\r\n    enabled = False\r\n    context = {\r\n        \"foo\": \"bar\",\r\n    }\r\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\r\n    console.log(\"Hello from\", console, \"!\")\r\n    console.log(test_data, log_locals=True)\r\n\r\n\r\ntest_log()\r\n```\r\n\r\nDie obige Funktion erzeugt die folgende Ausgabe:\r\n\r\n![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)\r\n\r\nBeachte das Argument `log_locals`, das eine Tabelle mit den lokalen Variablen ausgibt, in der die log-Methode aufgerufen wurde.\r\n\r\nDie log-Methode kann für die Protokollierung auf dem Terminal für langlaufende Anwendungen wie Server verwendet werden, ist aber auch eine sehr schöne Hilfe bei der Fehlersuche.\r\n\r\n</details>\r\n<details>\r\n<summary>Logging Handler</summary>\r\n\r\nDu kannst auch die eingebaute [Handler-Klasse](https://rich.readthedocs.io/en/latest/logging.html) verwenden, um die Ausgabe von Pythons Logging-Modul zu formatieren und einzufärben. Hier ein Beispiel für die Ausgabe:\r\n\r\n![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Emoji</summary>\r\n\r\nUm ein Emoji in die Konsolenausgabe einzufügen, setze den Namen zwischen zwei Doppelpunkte. Hier ein Beispiel:\r\n\r\n```python\r\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\r\n😃 🧛 💩 👍 🦝\r\n```\r\n\r\nBitte verwenden Sie diese Funktion mit Bedacht.\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Tabellen</summary>\r\n\r\nRich kann flexible [Tabellen](https://rich.readthedocs.io/en/latest/tables.html) mit Unicode-Box-Characters darstellen. Es gibt eine Vielzahl von Formatierungsmöglichkeiten für Rahmen, Stile, Zellausrichtung usw.\r\n\r\n![Film-Tabelle](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)\r\n\r\nDie obige Animation wurde mit [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) im Verzeichnis `examples` erzeugt.\r\n\r\nHier ist ein einfacheres Tabellenbeispiel:\r\n\r\n```python\r\nfrom rich.console import Console\r\nfrom rich.table import Table\r\n\r\nconsole = Console()\r\n\r\ntable = Table(show_header=True, header_style=\"bold magenta\")\r\ntable.add_column(\"Date\", style=\"dim\", width=12)\r\ntable.add_column(\"Title\")\r\ntable.add_column(\"Production Budget\", justify=\"right\")\r\ntable.add_column(\"Box Office\", justify=\"right\")\r\ntable.add_row(\r\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\r\n)\r\ntable.add_row(\r\n    \"May 25, 2018\",\r\n    \"[red]Solo[/red]: A Star Wars Story\",\r\n    \"$275,000,000\",\r\n    \"$393,151,347\",\r\n)\r\ntable.add_row(\r\n    \"Dec 15, 2017\",\r\n    \"Star Wars Ep. VIII: The Last Jedi\",\r\n    \"$262,000,000\",\r\n    \"[bold]$1,332,539,889[/bold]\",\r\n)\r\n\r\nconsole.print(table)\r\n```\r\n\r\nDies erzeugt diese Ausgabe:\r\n\r\n![Tabelle](https://github.com/textualize/rich/raw/master/imgs/table.png)\r\n\r\nBeachte, dass das Konsolen-Markup auf die gleiche Weise gerendert wird wie `print()` und `log()`. Tatsächlich kann alles, was von Rich gerendert werden kann, in den Kopfzeilen/Zeilen enthalten sein (sogar andere Tabellen).\r\n\r\nDie Klasse `Table` ist intelligent genug, um die Größe der Spalten an die verfügbare Breite des Terminals anzupassen und den Text wie erforderlich umzubrechen. Hier ist das gleiche Beispiel, wobei das Terminal kleiner als bei der obigen Tabelle ist:\r\n\r\n![Tabelle2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Fortschrittsbalken</summary>\r\n\r\nRich kann mehrere flackerfreie [Fortschrittsbalken](https://rich.readthedocs.io/en/latest/progress.html) darstellen, um langlaufende Aufgaben zu verfolgen.\r\n\r\nEinfachste Anwendung ist, eine beliebige Sequenz in die Funktion `track` einzupacken und  über das Ergebnis zu iterieren. Hier ein Beispiel:\r\n\r\n```python\r\nfrom rich.progress import track\r\n\r\nfor step in track(range(100)):\r\n    do_step(step)\r\n```\r\n\r\nEs ist nicht viel schwieriger, mehrere Fortschrittsbalken hinzuzufügen. Hier ein Beispiel aus der Doku:\r\n\r\n![Fortschritt](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\r\n\r\nDie Spalten können so konfiguriert werden, dass sie alle gewünschten Details anzeigen. Zu den eingebauten Spalten gehören Prozentsatz der Fertigstellung, Dateigröße, Downloadgeschwindigkeit und verbleibende Zeit. Hier ist ein weiteres Beispiel, das einen laufenden Download anzeigt:\r\n\r\n![Fortschritt](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\r\n\r\nUm dies selbst auszuprobieren, sieh dir [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) an, das mehrere URLs gleichzeitig herunterladen kann und dabei den Fortschritt anzeigt.\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Status</summary>\r\n\r\nFür Situationen, in denen es schwierig ist, den Fortschritt zu berechnen, kannst du die Methode [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) verwenden, die eine 'Spinner'-Animation und eine Meldung anzeigt. Die Animation hindert dich nicht daran, die Konsole wie gewohnt zu verwenden. Hier ein Beispiel:\r\n\r\n```python\r\nfrom time import sleep\r\nfrom rich.console import Console\r\n\r\nconsole = Console()\r\ntasks = [f\"task {n}\" for n in range(1, 11)]\r\n\r\nwith console.status(\"[bold green]Working on tasks...\") as status:\r\n    while tasks:\r\n        task = tasks.pop(0)\r\n        sleep(1)\r\n        console.log(f\"{task} complete\")\r\n```\r\n\r\nDies erzeugt diese Ausgabe im Terminal.\r\n\r\n![Status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\r\n\r\nDie Spinner-Animationen wurden von [cli-spinners](https://www.npmjs.com/package/cli-spinners) geliehen. Du kannst einen Spinner auswählen, indem du den Parameter `spinner` angibst. Führe den folgenden Befehl aus, um die verfügbaren Werte zu sehen:\r\n\r\n```\r\npython -m rich.spinner\r\n```\r\n\r\nDer obige Befehl erzeugt die folgende Ausgabe im Terminal:\r\n\r\n![Spinner](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Baum</summary>\r\n\r\nRich kann einen [Baum](https://rich.readthedocs.io/en/latest/tree.html) mit Hilfslinien darstellen. Ein Baum ist ideal, um eine Dateistruktur oder andere hierarchische Daten darzustellen.\r\n\r\nDie Beschriftungen des Baums können einfacher Text oder alles andere sein, was Rich rendern kann. Führe den folgenden Befehl zur Demonstration aus:\r\n\r\n```\r\npython -m rich.tree\r\n```\r\n\r\nDies erzeugt diese Ausgabe:\r\n\r\n![Markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)\r\n\r\nSiehe das Beispiel [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) für ein Skript, das eine Baumansicht eines beliebigen Verzeichnisses anzeigt, ähnlich dem Linux-Befehl `tree`.\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Spalten</summary>\r\n\r\nRich kann Inhalte sauber in [Spalten](https://rich.readthedocs.io/en/latest/columns.html) mit gleicher oder optimaler Breite darstellen. Hier ist ein sehr einfacher Klon des (MacOS / Linux) `ls`-Befehls, der eine Verzeichnisliste in Spalten anzeigt:\r\n\r\n```python\r\nimport os\r\nimport sys\r\n\r\nfrom rich import print\r\nfrom rich.columns import Columns\r\n\r\ndirectory = os.listdir(sys.argv[1])\r\nprint(Columns(directory))\r\n```\r\n\r\nDer folgende Screenshot ist die Ausgabe von [Spalten-Beispiel](https://github.com/textualize/rich/blob/master/examples/columns.py), das Daten, die aus einer API kommen, in Spalten anzeigt:\r\n\r\n![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Markdown</summary>\r\n\r\nRich kann [Markdown](https://rich.readthedocs.io/en/latest/markdown.html) rendern und leistet vernünftige Arbeit bei der Übersetzung der Formatierung ins Terminal.\r\n\r\nUm Markdown zu rendern, importiere die Klasse `Markdown` und konstruiere einen String mit Markdown-Code. Gib ihn dann auf der Konsole aus. Hier ein Beispiel:\r\n\r\n```python\r\nfrom rich.console import Console\r\nfrom rich.markdown import Markdown\r\n\r\nconsole = Console()\r\nwith open(\"README.md\") as readme:\r\n    markdown = Markdown(readme.read())\r\nconsole.print(markdown)\r\n```\r\n\r\nDies erzeugt diese Ausgabe:\r\n\r\n![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Syntax-Hervorhebung</summary>\r\n\r\nRich verwendet die Bibliothek [pygments](https://pygments.org/) zur Implementierung von [Syntax-Hervorhebung](https://rich.readthedocs.io/en/latest/syntax.html). Die Verwendung ist gleich dem Rendern von Markdown; konstruieren Sie ein `Syntax`-Objekt und gib es auf der Konsole aus. Hier ein Beispiel:\r\n\r\n```python\r\nfrom rich.console import Console\r\nfrom rich.syntax import Syntax\r\n\r\nmy_code = '''\r\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\r\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\r\n    iter_values = iter(values)\r\n    try:\r\n        previous_value = next(iter_values)\r\n    except StopIteration:\r\n        return\r\n    first = True\r\n    for value in iter_values:\r\n        yield first, False, previous_value\r\n        first = False\r\n        previous_value = value\r\n    yield first, True, previous_value\r\n'''\r\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\r\nconsole = Console()\r\nconsole.print(syntax)\r\n```\r\n\r\nDies erzeugt die folgende Ausgabe:\r\n\r\n![Syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Tracebacks</summary>\r\n\r\nRich kann [schöne Tracebacks](https://rich.readthedocs.io/en/latest/traceback.html) rendern, die einfacher zu lesen sind und mehr Code anzeigen, als die Standard-Python-Tracebacks. Du kannst Rich als Standard-Traceback-Handler festlegen, so dass alle nicht abgefangenen Exceptions von Rich gerendert werden.\r\n\r\nSo sieht es unter OSX aus (ähnlich unter Linux):\r\n\r\n![Traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)\r\n\r\n</details>\r\n\r\nAlle Rich-Renderables verwenden das [Konsolen-Protokoll](https://rich.readthedocs.io/en/latest/protocol.html), das du auch für die Implementierung deiner eigenen Rich-Inhalte verwenden kannst.\r\n\r\n# Rich für Unternehmen\r\n\r\nVerfügbar als Teil des Tidelift-Abonnements.\r\n\r\nDie Betreuer von Rich und tausenden anderen Paketen arbeiten mit Tidelift zusammen, um kommerziellen Support und Wartung für die Open-Source-Pakete zu bieten, die du zur Erstellung deiner Anwendungen verwendest. Spare Zeit, reduziere Risiken und verbessere den Zustand des Codes, während du die Betreuer genau der Pakete bezahlen, die du verwendest. [Erfahre hier mehr.](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\r\n\r\n# Projekte, die Rich verwenden\r\n\r\nHier sind ein paar Projekte, die Rich verwenden:\r\n\r\n- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)\r\n  ein Python-Paket zur Visualisierung dreidimensionaler neuro-anatomischer Daten\r\n- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)\r\n  Automatisiertes Entschlüsselungswerkzeug\r\n- [emeryberger/scalene](https://github.com/emeryberger/scalene)\r\n  ein leistungsstarker, hochpräziser CPU- und Speicher-Profiler für Python\r\n- [hedythedev/StarCli](https://github.com/hedythedev/starcli)\r\n  Durchsuchen von GitHub-Trending-Projekten in der Kommandozeile\r\n- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)\r\n  Dieses Tool scannt nach einer Reihe von verbreiteten, verwundbaren Komponenten (openssl, libpng, libxml2, expat und ein paar andere), um dir mitzuteilen, ob dein System verbreitete Bibliotheken mit bekannten Sicherheitslücken enthält.\r\n- [nf-core/tools](https://github.com/nf-core/tools)\r\n  Python-Paket mit Hilfswerkzeugen für die nf-core-Gemeinschaft.\r\n- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)\r\n  pdb + Rich-Bibliothek für erweitertes Debugging\r\n- [plant99/felicette](https://github.com/plant99/felicette)\r\n  Satellitenbilder für Dummies.\r\n- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)\r\n  Automatisiere & Teste 10x schneller mit Selenium & pytest. Inklusive Batterien.\r\n- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)\r\n  Automatisch Untertitel mit Video synchronisieren.\r\n- [tryolabs/norfair](https://github.com/tryolabs/norfair)\r\n  Leichtgewichtige Python-Bibliothek zum Hinzufügen von 2D-Objektverfolgung in Echtzeit zu jedem Detektor.\r\n- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Ansible-lint prüft Playbooks auf Praktiken und Verhalten, die möglicherweise verbessert werden könnten\r\n- [ansible-community/molecule](https://github.com/ansible-community/molecule) Ansible Molecule-Testing-Framework\r\n- +[Viele weitere](https://github.com/textualize/rich/network/dependents)!\r\n"
        },
        {
          "name": "README.es.md",
          "type": "blob",
          "size": 19.138671875,
          "content": "[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\n[![codecov](https://codecov.io/gh/Textualize/rich/branch/master/graph/badge.svg)](https://codecov.io/gh/Textualize/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\n\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\n • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\n • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\n • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)\n • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\n • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\n • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)\n • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\n • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)\n • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\n • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)\n • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\n • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)\n • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)\n  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)\n • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n\nRich es un paquete de Python para texto _enriquecido_ y un hermoso formato en la terminal.\n\nLa [API Rich](https://rich.readthedocs.io/en/latest/) facilita la adición de color y estilo a la salida del terminal. Rich también puede representar tablas bonitas, barras de progreso, markdown, código fuente resaltado por sintaxis, trazas y más — listo para usar.\n\n![Funciones](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\nPara ver un vídeo de introducción a Rich, consulte [calmcode.io](https://calmcode.io/rich/introduction.html) de [@fishnets88](https://twitter.com/fishnets88).\n\nVea lo que [la gente dice sobre Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).\n\n## Compatibilidad\n\nRich funciona con Linux, OSX y Windows. True color / emoji funciona con la nueva Terminal de Windows, la terminal clásica está limitada a 8 colores. Rich requiere Python 3.6.3 o posterior.\n\nRich funciona con [Jupyter notebooks](https://jupyter.org/) sin necesidad de configuración adicional.\n\n## Instalación\n\nInstale con `pip` o su administrador de paquetes PyPI favorito.\n\n```sh\npython -m pip install rich\n```\n\nEjecute lo siguiente para probar la salida de Rich sobre su terminal:\n\n```sh\npython -m rich\n```\n\n## Función print de Rich\n\nPara agregar sin esfuerzo resultados enriquecidos a su aplicación, puede importar el método [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start), que tiene la misma firma que el método incorporado de Python. Prueba esto:\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## Rich REPL\n\nRich se puede instalar en Python REPL, por lo que cualquier estructura de datos se imprimirá y resaltará bastante.\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## Usando la consola\n\nPara tener más control sobre el contenido enriquecido del terminal, importe y cree un objeto [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console).\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nEl objeto Console tiene un método `print` que tiene una interfaz intencionalmente similar a la función incorporada `print`. Aquí tienes un ejemplo de uso:\n\n```python\nconsole.print(\"Hello\", \"World!\")\n```\n\nComo era de esperar, esto imprimirá `\"Hello World!\"` en la terminal. Tenga en cuenta que, a diferencia de la función `print` incorporada, Rich ajustará su texto para ajustarlo al ancho de la terminal.\n\nHay algunas formas de agregar color y estilo a su salida. Puede establecer un estilo para toda la salida agregando un argumento de palabra clave `style`. He aquí un ejemplo:\n\n```python\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\nLa salida será similar a la siguiente:\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\n\nEso está bien para diseñar una línea de texto a la vez. Para un estilo más fino, Rich presenta un marcado especial que es similar en sintaxis a [bbcode](https://en.wikipedia.org/wiki/BBCode). He aquí un ejemplo:\n\n```python\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\n\nUsted puede usar el objeto Console para generar salida sofisticada con mínimo esfuerzo. Ver la documentación [API Console](https://rich.readthedocs.io/en/latest/console.html) para detalles.\n\n## Rich Inspector\n\nRich tiene ua función [inspeccionar](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) cual puede producir un reporte sobre cualquier objeto Python, como clases, instancia o builtin.\n\n```python\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)\n\nVer la [documentación inspector](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) para detalles.\n\n# Paquete Rich\n\nRich contiene un número de builtin _renderables_ que puedes usar para crear salida elegante en su CLI y ayudarle a depurar su código.\n\nHaga clic en los siguientes títulos para obtener más detalles:\n\n<details>\n<summary>Registro de consola</summary>\n\nEl objeto Console tiene un método `log()` que tiene una interfaz similar a `print()`, pero también muestra una columna para la hora actual y el archivo y la línea que realizó la llamada. De forma predeterminada, Rich resaltará la sintaxis de las estructuras de Python y de las cadenas de reproducción. Si registra una colección (es decir, un diccionario o una lista), Rich la imprimirá de forma bonita para que quepa en el espacio disponible. A continuación, se muestra un ejemplo de algunas de estas funciones.\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\nLo anterior produce el siguiente resultado:\n\n![Registro](https://github.com/textualize/rich/raw/master/imgs/log.png)\n\nTenga en cuenta el argumento `log_locals`, que genera una tabla que contiene las variables locales donde se llamó al método log.\n\nEl método de registro podría usarse para iniciar sesión en el terminal para aplicaciones de larga ejecución, como servidores, pero también es una ayuda de depuración muy buena.\n\n</details>\n<details>\n<summary>Controlador de registro</summary>\n\nTambién puede usar la [Handler class](https://rich.readthedocs.io/en/latest/logging.html) incorporada  para formatear y colorear la salida del módulo de registro de Python. Aquí hay un ejemplo de la salida:\n\n![Registro](https://github.com/textualize/rich/raw/master/imgs/logging.png)\n</details>\n\n<details>\n<summary>Emoji</summary>\n\nPara insertar un emoji en la salida de la consola, coloque el nombre entre dos puntos. He aquí un ejemplo:\n\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\nUtilice esta función con prudencia.\n</details>\n\n<details>\n<summary>Tablas</summary>\n\nRich puede renderizar [tablas](https://rich.readthedocs.io/en/latest/tables.html) flexibles con caracteres de cuadro Unicode. Existe una gran variedad de opciones de formato para bordes, estilos, alineación de celdas, etc.\n\n![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)\n\nLa animación anterior se generó con [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) en el directorio de ejemplos.\n\nAquí hay un ejemplo de tabla más simple:\n\n```python\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\nEsto produce la siguiente salida:\n\n![table](https://github.com/textualize/rich/raw/master/imgs/table.png)\n\nTenga en cuenta que el marcado de la consola se representa de la misma manera que `print()` y `log()`. De hecho, cualquier cosa que Rich pueda representar se puede incluir en los encabezados / filas (incluso en otras tablas).\n\nLa clase `Table` es lo suficientemente inteligente como para cambiar el tamaño de las columnas para que se ajusten al ancho disponible de la terminal, ajustando el texto según sea necesario. Este es el mismo ejemplo, con la terminal más pequeña que la tabla anterior:\n\n![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\n\n</details>\n\n<details>\n<summary>Barras de progreso</summary>\n\nRich puede representar varias barras de [progreso](https://rich.readthedocs.io/en/latest/progress.html) sin parpadeos para realizar un seguimiento de las tareas de larga duración.\n\nPara un uso básico, envuelva cualquier secuencia en la función `track` e itere sobre el resultado. He aquí un ejemplo:\n\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\nNo es mucho más difícil agregar varias barras de progreso. Aquí hay un ejemplo tomado de la documentación:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\nLas columnas pueden configurarse para mostrar los detalles que desee. Las columnas integradas incluyen porcentaje completado, tamaño de archivo, velocidad de archivo y tiempo restante. Aquí hay otro ejemplo que muestra una descarga en progreso:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\n\nPara probar esto usted mismo, consulte [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) que puede descargar varias URL simultáneamente mientras muestra el progreso.\n\n</details>\n\n<details>\n<summary>Estado</summary>\n\nPara situaciones en las que es difícil calcular el progreso, puede utilizar el método [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) que mostrará una animación y un mensaje de \"spinner\". La animación no le impedirá usar la consola con normalidad. He aquí un ejemplo:\n\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\nEsto genera la siguiente salida en el terminal.\n\n![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\n\nLas animaciones de spinner fueron tomadas de [cli-spinners](https://www.npmjs.com/package/cli-spinners). Puede seleccionar un spinner especificando el `spinner` parameter. Ejecute el siguiente comando para ver los valores disponibles:\n\n```\npython -m rich.spinner\n```\n\nEl comando anterior genera la siguiente salida en la terminal:\n\n![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\n\n</details>\n\n<details>\n<summary>Árbol</summary>\n\nRich genera un [tree](https://rich.readthedocs.io/en/latest/tree.html) con líneas de guía. Un árbol es ideal para mostrar una estructura de archivos, o cualquier otro dato jerárquico.\n\nLas etiquetas del árbol pueden ser texto simple o cualquier otra cosa que Rich pueda mostar. Ejecuta lo siguiente para una demostración:\n\n```\npython -m rich.tree\n```\n\nEsto genera la siguiente salida:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)\n\nVer el ejemplo [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) para un script que muestra una vista de  árbol de cualquier directorio, similar a el comando de linux `tree`.\n\n</details>\n\n<details>\n<summary>Columnas</summary>\n\nRich puede representar contenido en [columnas](https://rich.readthedocs.io/en/latest/columns.html) ordenadas con un ancho igual u óptimo. Aquí hay un clon muy básico del comando (MacOS / Linux) `ls` que muestra una lista de directorios en columnas:\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\nLa siguiente captura de pantalla es el resultado del [ejemplo de columnas](https://github.com/textualize/rich/blob/master/examples/columns.py) que muestra los datos extraídos de una API en columnas:\n\n![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)\n\n</details>\n\n<details>\n<summary>Markdown</summary>\n\nRich puede renderizar [markdown](https://rich.readthedocs.io/en/latest/markdown.html) y hace un trabajo razonable al traducir el formato al terminal.\n\nPara renderizar markdown, importe la clase `Markdown` y constrúyala con una cadena que contenga el código de markdown. Luego imprímalo en la consola. He aquí un ejemplo:\n\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\nEsto producirá una salida similar a la siguiente:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\n\n</details>\n\n<details>\n<summary>Resaltado de sintaxis</summary>\n\nRich usa el paquete [pygments](https://pygments.org/) para implementar [resaltado de sintaxis](https://rich.readthedocs.io/en/latest/syntax.html). El uso es similar a renderizar markdown; construya un objeto `Syntax` e imprímalo en la consola. He aquí un ejemplo:\n\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\nEsto producirá el siguiente resultado:\n\n![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\n\n</details>\n\n<details>\n<summary>Tracebacks</summary>\n\nRich puede representar [tracebacks hermosos](https://rich.readthedocs.io/en/latest/traceback.html) que son más fáciles de leer y muestran más código que los tracebacks estándar de Python. Puede configurar Rich como el controlador tracebacks predeterminado para que todas las excepciones sin capturar sean procesadas por Rich.\n\nAsí es como se ve en OSX (similar en Linux):\n\n![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)\n\n</details>\n\nTodos los renderizables enriquecidos utilizan el [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html), que también puede utilizar para implementar su propio contenido Rich.\n\n# Rich para empresas\n\nDisponible como parte de la suscripción a Tidelift.\n\nLos mantenedores de Rich y miles de otros paquetes están trabajando con Tidelift para brindar soporte comercial y mantenimiento para los paquetes de código abierto que usa para construir sus aplicaciones. Ahorre tiempo, reduzca el riesgo y mejore el estado del código, mientras paga a los mantenedores de los paquetes exactos que utiliza. [Más información](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n# Proyecto usando Rich\n\nAquí hay algunos proyectos que usan Rich:\n\n- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)\n  un paquete de Python para la visualización de datos neuroanatómicos tridimensionales\n- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)\n  Herramienta de descifrado automatizado\n- [emeryberger/scalene](https://github.com/emeryberger/scalene)\n  un perfilador de memoria y CPU de alta precisión y alto rendimiento para Python\n- [hedythedev/StarCli](https://github.com/hedythedev/starcli)\n  Explore los proyectos de tendencias de GitHub desde su línea de comando\n- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)\n  Esta herramienta busca una serie de componentes vulnerables comunes (openssl, libpng, libxml2, expat y algunos otros) para informarle si su sistema incluye bibliotecas comunes con vulnerabilidades conocidas.\n- [nf-core/tools](https://github.com/nf)\n  Paquete de Python con herramientas auxiliares para la comunidad nf-core.\n- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)\n  pdb + biblioteca Rich para una depuración mejorada\n- [plant99/felicette](https://github.com/plant99/felicette)\n  Imágenes de satélite para tontos.\n- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)\n  Automatice y pruebe 10 veces más rápido con Selenium y pytest. Baterias incluidas.\n- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)\n  Sincronice automáticamente los subtítulos con el video.\n- [tryolabs/norfair](https://github.com/tryolabs/norfair)\n  Libreria de Python para agregar tracking a cualquier detector.\n- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Ansible-lint comprueba los playbooks en busca de prácticas y comportamientos que podrían mejorarse\n- [ansible-community/molecule](https://github.com/ansible-community/molecule) Marco de prueba de Ansible Molecule\n- +¡[Muchos más](https://github.com/textualize/rich/network/dependents)!\n"
        },
        {
          "name": "README.fa.md",
          "type": "blob",
          "size": 22.4931640625,
          "content": "[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich/13.2.0)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\n\n[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/textualize/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\n\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\n • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\n • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\n • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)\n • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\n • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\n • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)\n • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\n • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)\n • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\n • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)\n • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\n • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)\n • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)\n • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)\n • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n\nریچ یک کتاب خانه پایتون برای متن های _باشکوه_ و قالب بندی زیبا در ترمینال است.\n\n[ریچ](https://rich.readthedocs.io/en/latest/) افزودن رنگ و سبک به خروجی ترمینال را آسان می‌کند.\nریچ همچنین می‌تواند جدول های زیبا، نوار های پیشرفت\n(progress bars),\nمارک داون\n(MarkDown),\nترکیب سورس کد های برجسته شده,\nردیاب ها\n(Tracebacks),\nو غیره را به صورت خودکار در ترمینال نمایش دهد.\n\n\n![قابلیت ها](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\nبرای معرفی ویدئویی ریچ این ویدئو را ببینید [calmcode.io](https://calmcode.io/rich/introduction.html) توسط [@fishnets88](https://twitter.com/fishnets88).\n\nببینید [مردم در مورد ریچ چه میگویند](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).\n\n## سازگاری\n\nریچ با لینوکس، مک او اس و ویندوز کار می کند.\nرنگ واقعی / ایموجی با ترمینال جدید ویندوز کار می کند، ترمینال کلاسیک به 16 رنگ محدود شده است.\nریچ به پایتون\n3.6.3\nیا جدیدتر نیاز دارد.\n\nریچ با  [ژوپیتر نوت بوک (Jupyter notebooks)](https://jupyter.org/)\nبدون نیازمندی اضافه ای کار می کند.\n\n## نصب کردن\n\nبا `pip`\nیا با مدیر بسته (package manager)\nمورد علاقه خودتان نصب کنید.\n\n```sh\npython -m pip install rich\n```\n\nبرای آزمایش ریچ در ترمینال خودتان، این را اجرا کنید:\n\n```sh\npython -m rich\n```\n\n## Rich Print\n\nبرای اضافه کردن راحت خروجی ریچ به برنامه خودتان، شما می توانید \n[rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start)\nرا به پروژه خودتان اضافه\n(Import)\nکنید که اثر یکسانی مشابه تابع داخلی پایتون دارد. \nاین قطعه کد را امتحان کنید:\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## Rich REPL\n\nریچ می تواند در Python REPL,\nنصب شود.\nکه هر نوعی از اطلاعات را به زیبایی چاپ می کند و به زیبایی برجسته می کند.\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## استفاده از Console\n\nبرای پایش بیشتر از محتوای ترمینال ریچ،\n[Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console)\nرا اضافه (Import)\nکنید و یک شیء (Object) بسازید.\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nشی Console\nیک تابع با نام `print`\nدارد که مشابه تابع `print`\nداخلی پایتون است.\nکد زیر یک مثال از استفاده آن است:\n\n```python\nconsole.print(\"Hello\", \"World!\")\n```\n\nهمانطور که احتمالا انتظار داشتید، این کد در ترمینال\n`\"Hello World!\"`\nچاپ می کند.\nدر نظر داشته باشید که این شبیه به تابع\n`print`\nداخلی پایتون نیست.\nریچ متن شما را به صورت کلمه‌ای\n(واژه بندی شده)\nدر نظر میگیرد تا در عرض\n(width)\nترمینال قرار بگیرد.\n\nاینها تعدادی راه برای افزودن رنگ و سبک (Style)\nبه خروجی خودتان است.\nشما می توانید با اضافه کردن کلمه کلیدی\n`style`\nبرای خروجی های خود سبک و استایل در نظر بگیرید.\nکد زیر مثال استفاده از آن است:\n\n```python\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\nخروجی چیزی شبیه به این است:\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\n\nتا اینجا برای سبک و استایل دادن به یک خط خوب است. برای سبکی با دانه بندی (Finely Grained Styling)، ریچ یک نشانه گذاری خاص ارائه می دهند که چیزی شبیه به [bbcode](https://en.wikipedia.org/wiki/BBCode) است. مثال آن به صورت زیر است:\n\n```python\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\n\nشما می توانید از یک شیء Console برای تولید خروجی پیچیده، با کمترین تلاش استفاده کنید. برای جزئیات بیشتر به  [Console API](https://rich.readthedocs.io/en/latest/console.html)  مراجعه کنید.\n\n## Rich Inspect\n\nریچ دارای یک تابع `inspect` است که می تواند یک گزارش از هر شیء از پایتون، مثل کلاس (Class)، نمونه (Instance) یا توابع (Builtin) را تولید کند.\n\n```python\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)\n\nبرای جزئیات بیشتر به [inspect docs](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) مراجعه کنید.\n\n# Rich Library\n\nریچ شامل تعدادی از توابع _قابل اجرا_ داخلی است که شما می توانید برای ایجاد خروجی برازنده و مناسب در ترمینال (CLI) خود استفاده کنید و به شما برای تصحیح (Debug) کد کمک می کند.\n\nبرای جزئیات بیشتر روی سر فصل های زیر کلیک کنید:\n\n<details>\n<summary>Log</summary>\n\nشیء Console دارای یک تابع `()log` است که رفتاری مشابه `()print` دارد، اما همچنین یک ستون برای نمایش زمان، فایل مربوطه و شماره خطِ کدِ اجرا شده در نظر می گیرد. به صورت پیشفرض، ریچ علائم (syntax) را برای ساختار های پایتون و برای رشته (String)\nهای repr برجسته می کند. اگر شما یک مجموعه (دیکشنری یا لیست) را چاپ کنید، ریچ به زیبایی آن را در فضای موجود چاپ می کند. مثال زیر نمایش برخی ویژگی های آن است:\n\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\nقطعه کد بالا، خروجی زیر را تولد می کند:\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)\n\nبه متغیر های `log_locals` توجه کنید، جایی که تابع log صدا زده می شود، یک جدول که شامل متغیر های محلی است در خروجی نمایش داده می شود.\n\nتابع log میتواند برای گزارش گیری در ترمینال برای برنامه هایی با اجراهای طولانی مدت، مثل سرور استفاده شود؛ اما همچنین کمک بسیار مناسب و خوبی برای تصحیح (debugging) برخی خطاهاست.\n\n</details>\n<details>\n<summary>Logging Handler</summary>\n\nهمچنین شما می توانید از [Handler class](https://rich.readthedocs.io/en/latest/logging.html) های داخلی برای فرمت دادن و رنگی کردن خروجی از ماژول گزارش پایتون (Python's logging module) استفاده کنید. کد زیر یک مثال از خروجی را نشان می دهد:\n\n![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)\n\n</details>\n\n<details>\n<summary>Emoji</summary>\n\nبرای افزودن یک ایموجی به خروجی ترمینال، اسم آن را بین دو نقطه (colon) قرار دهید. قطعه کد زیر مثال آن است:\n\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\nلطفا از این ویژگی خردمندانه و عاقلانه استفاده کنید.\n\n</details>\n\n<details>\n<summary>Tables</summary>\n\nریچ توانایی آن را دارد که [جداول](https://rich.readthedocs.io/en/latest/tables.html) انعطاف پذیری را با کارکتر های یونیکد (unicode) بسازد.\n\n![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)\n\nانیمشن بالا با استفاده از [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) در دایرکتوری (پوشه) تست ساخته شده است.\n\nاین یک مثال ساده از جدول است:\n\n```python\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\nاین کد خروجی زیر را تولید می کند:\n\n![table](https://github.com/textualize/rich/raw/master/imgs/table.png)\n\nتوجه داشته باشید که نشانه گذاری کنسول به همان روش  `print()` و `log()` پردازش می شود. در واقع، هر چیزی که توسط Rich قابل رندر است در هدرها / ردیف ها (حتی جداول دیگر) ممکن است گنجانده شود.\n\nکلاس `Table` به اندازه کافی هوشمند است که اندازه ستون ها را متناسب با عرض موجود ترمینال تغییر دهد و متن را در صورت لزوم بسته بندی کند. این همان مثال با ترمینال کوچکتر از جدول بالاست:\n\n![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\n\n</details>\n\n<details>\n<summary>Progress Bars</summary>\n\nریچ می تواند چندین نوار پیشرفت ([progress](https://rich.readthedocs.io/en/latest/progress.html)) را بدون ناهماهنگی و اختلال برای پیگیری وظایف طولانی مدت پردازش کند.\n\nبرای استفاده اولیه، هر دنباله ای را در تابع `track` بسته بندی کنید و روی نتیجه تکرار کنید. مثال آن به صورت زیر است:\n\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\nاضافه کردن چندین نوار پیشرفت خیلی سخت نیست. مثال آن که برگرفته از اسناد و داکیومنت میباشد به صورت زیر است:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\nستون ها ممکن است به گونه ای پیکربندی شوند که جزئیاتی را که می خواهید نشان دهند. ستون های از پیش تعیین شده شامل درصد کامل شده، اندازه فایل، سرعت فایل و زمان باقی مانده است. در زیر مثال دیگری وجود دارد که دانلود در حال انجام را نشان می دهد:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\n\nبرای اینکه خودتان این را امتحان کنید، فایل [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) را ببینید که می‌تواند چندین لینک URL را به طور همزمان بارگیری کند و پیشرفت را نشان دهد.\n\n</details>\n\n<details>\n<summary>Status</summary>\n\nبرای موقعیت هایی که محاسبه پیشرفت، دشوار است، می توانید از روش [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) استفاده کنید که یک پیام و یک انیمیشن چرخنده (spinner) را نمایش می‌دهد. این انیمیشن شما را از استفاده عادی از کنسول باز نمی دارد. مثال آن به صورت زیر است:\n\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\nاین کد خروجی زیر را در ترمینال ایجاد می کند.\n\n![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\n\nدر انیمیشن های چرخنده از [cli-spinners](https://www.npmjs.com/package/cli-spinners) استفاده شده است. شما می توانید با تعیین پارامتر `spinner` یک چرخنده را انتخاب کنید. برای مشاهده موارد موجود، دستور زیر را اجرا کنید:\n\n```\npython -m rich.spinner\n```\n\nدستور بالا خروجی زیر را در ترمینال ایجاد می کند:\n\n![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\n\n</details>\n\n<details>\n<summary>Tree</summary>\n\nریچ می تواند یک [tree](https://rich.readthedocs.io/en/latest/tree.html) را با خطوط راهنما نمایش دهد. یک درخت برای نمایش ساختار فایل یا هر داده سلسله مراتبی دیگر مناسب است.\n\nبرچسب (labels) های درخت می توانند متن ساده یا هر چیز دیگری که ریچ می تواند نمایش دهد باشد. برای نمایش موارد گفته شده دستور زیر را اجرا کنید:\n\n```\npython -m rich.tree\n```\n\nاین کد خروجی زیر را ایجاد می کند:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)\n\nمثال [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) را برای اسکریپتی ببینید که نمایش درختی از هر دایرکتوری را نمایش می دهد، شبیه به فرمان `tree` در لینوکس است.\n\n</details>\n\n<details>\n<summary>Columns</summary>\n\nریچ می تواند محتوا را به صورت [columns](https://rich.readthedocs.io/en/latest/columns.html) مرتب با عرض مساوی یا بهینه ارائه دهد. مثال زیر یک شبیه سازی بسیار ابتدایی از دستور `ls` در (مک او اس / لینوکس) است که فهرست دایرکتوری را در ستون ها نمایش می دهد:\n\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\nتصویر زیر خروجی [columns example](https://github.com/textualize/rich/blob/master/examples/columns.py) است که داده های استخراج شده از یک API را در ستون ها نمایش می دهد:\n\n![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)\n\n</details>\n\n<details>\n<summary>Markdown</summary>\n\nریچ میتواند [markdown](https://rich.readthedocs.io/en/latest/markdown.html) را پردازش کند و کار مناسبی را برای فرمت بندی آن در ترمینال انجام میدهد.\n\nبرای پردازش markdown کافی است تا کلاس `Markdown` آنرا فرا خوانی کرده و یک شی از آن را بسازید و متن حاوی markdown  را به آن بدهید. در نهایت آنرا در کنسول و ترمینال چاپ کنید. مثال آن به صورت زیر است:\n\n\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\nخروجی کد بالا چیزی شبیه به تصویر زیر را تولید می کند:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\n\n</details>\n\n<details>\n<summary>Syntax Highlighting</summary>\n\nریچ از کتابخانه [pygments](https://pygments.org/) برای پیاده سازی[syntax highlighting](https://rich.readthedocs.io/en/latest/syntax.html) استفاده می کند. استفاده از آن مشابه پردازش markdown هاست؛ یک شی `Syntax` بسازید و آن را برای کنسول چاپ کنید. مثال آن به صورت زیر است:\n\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\nاین کد خروجی زیر را ایجاد می کند:\n\n![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\n\n</details>\n\n<details>\n<summary>Tracebacks</summary>\n\nریچ می تواند [tracebacks](https://rich.readthedocs.io/en/latest/traceback.html) های زیبایی را نمایش دهد که خواندن آن آسان تر است و کد بیشتری را نسبت به `traceback` های استاندارد پایتون نشان می دهد. شما می توانید ریچ را به عنوان کنترل کننده اصلی `tracebacks` تنظیم کنید تا همه استثناهای کشف نشده توسط ریچ ارائه شوند.\n\nدر مک او اس به صورت زیر نمایش داده می شود (در لینوکس نیز مشابه این است):\n\n![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)\n\n</details>\n\nهمه ریچ های قابل نمایش از\n[Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html)\nاستفاده می کنند،\nبنابراین شما می توانید برای پیاده سازی محتوای ریچ خود نیز از آن استفاده کنید.\n\n# Rich CLI\n\nهمچنین [Rich CLI](https://github.com/textualize/rich-cli) را که برای برنامه های دستوری (command line)، توسط Rich ساخته شده است ببینید. برجسته سازی کد (Syntax highlight code)، پردازش کردن مارک دون، نمایش فایل های CSV در جدول ها و موارد بیشتر، به صورت مستقیم از خط فرمان و ترمینال.\n\n\n\n![Rich CLI](https://raw.githubusercontent.com/Textualize/rich-cli/main/imgs/rich-cli-splash.jpg)\n\n# Textual\n\nهمچنین (پروژه) خواهر ریچ [Textual](https://github.com/Textualize/textual) را ببینید، که با استفاده از آن شما می توانید رابط های کاربری پیچیده را در ترمینال بسازید.\n\n![Textual screenshot](https://raw.githubusercontent.com/Textualize/textual/main/imgs/textual.png)\n\n# پروژه هایی که از ریچ استفاده می کنند\n\nبرای دیدن چند نمونه از پروژه هایی که از ریچ استفاده می کنند، به [Rich Gallery](https://www.textualize.io/rich/gallery) در [Textualize.io](https://www.textualize.io) سر بزنید.\n\nآیا می خواهید پروژه خودتان را به گالری اضافه کنید؟ شما می توانید! کافیست [از این دستورات](https://www.textualize.io/gallery-instructions) پیروی کنید.\n"
        },
        {
          "name": "README.fr.md",
          "type": "blob",
          "size": 19.826171875,
          "content": "[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\n[![codecov](https://codecov.io/gh/Textualize/rich/branch/master/graph/badge.svg)](https://codecov.io/gh/Textualize/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\n\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\n • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\n • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\n • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)\n • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\n • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\n • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)\n • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\n • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)\n • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\n • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)\n • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\n • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)\n • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)\n  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)\n • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n\nRich est une bibliothèque Python pour le _rich_ texte et la mise en forme dans le terminal.\n\nL'[API Rich](https://rich.readthedocs.io/en/latest/) permet d'ajouter facilement de la couleur et du style sur le texte du terminal. Rich peut également rendre de jolis tableaux, des barres de progression, du markdown, du code source avec de la coloration syntaxique, des messages d'erreurs et bien d'autres choses encore, et ce dès le départ.\n\n![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\nPour une introduction vidéo à Rich, voir [camelcode.io](https://calmcode.io/rich/introduction.html) par [@ fishnets88](https://twitter.com/fishnets88)\n\nVoyez ce que [les gens disent de Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/)\n\n## Compatibilité\n\nRich fonctionne avec Linux, OSX et Windows. True color / emoji fonctionne avec le nouveau Terminal Windows, le terminal classique est limité à 16 couleurs. Rich nécessite Python 3.6.3 ou plus.\n\nRich fonctionne avec les notebooks Jupyter sans configuration supplémentaire.\n\n## Installation\n\nInstallez avec `pip` ou votre gestionnaire de paquets PyPI préféré.\n\n```sh\npython -m pip install rich\n```\n\nExécutez ce qui suit pour tester la sortie de Rich sur votre terminal :\n\n```sh\npython -m rich\n```\n\n## Rich Print\n\nPour ajouter sans effort une sortie Rich à votre application, vous pouvez importer la méthode [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start), qui a la même signature que la fonction Python intégrée. Essayez ceci :\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## Rich REPL\n\nRich peut être installé dans le REPL de Python, de sorte que toutes les structures de données soient joliment affichées et mises en évidence.\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## Utilisation de Console\n\nPour mieux contrôler le contenu rich du terminal, importez et construisez une classe [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console)\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nLa classe Console possède une méthode `print` dont l'interface est intentionnellement similaire à celle de la fonction `print` native. Voici un exemple d'utilisation :\n\n```python\nconsole.print(\"Hello\", \"World!\")\n```\n\nComme vous pouvez vous y attendre, cela va afficher \"Hello World !\" sur le terminal. Notez que, contrairement à la fonction d'affichage intégrée, Rich mettra votre texte en forme pour qu'il tienne dans la largeur du terminal.\n\nIl y a plusieurs façons d'ajouter de la couleur et du style à votre sortie de texte. Vous pouvez définir un style pour l'ensemble de la sortie de texte en ajoutant un argument de mot-clé style. Voici un exemple :\n\n```python\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\nLa sortie de texte sera quelque chose comme ce qui suit :\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\n\nC'est très bien pour styliser une ligne de texte à la fois. Pour un style plus fin, Rich rend un balisage spécial dont la syntaxe est similaire à celle du [bbcode](https://en.wikipedia.org/wiki/BBCode). Voici un exemple :\n\n```python\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\n\nVous pouvez utiliser un objet Console pour générer une sortie sophistiquée avec un effort minimal. Consultez la documentation de l'[API Console](https://rich.readthedocs.io/en/latest/console.html) pour plus de détails.\n\n## Rich Inspect\n\nRich possède une fonction [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) qui peut produire un rapport sur n'importe quel objet Python, comme une classe, une instance ou une fonction intégrée.\n\n```python\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)\n\nConsultez la [documentation d'inspect](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) pour plus de détails.\n\n## Bibliothèque Rich\nRich contient un certain nombre _d'éléments de rendu_ intégrés que vous pouvez utiliser pour créer une sortie élégante dans votre CLI et vous aider à déboguer votre code.\n\nCliquez sur les rubriques suivantes pour plus de détails :\n\n<details>\n<summary>Log</summary>\n\nL'objet Console a une méthode `log()` qui a une interface similaire à `print()`, mais qui rend aussi une colonne pour l'heure actuelle, le fichier et la ligne qui ont fait l'appel. Par défaut, Rich fera la coloration syntaxique des structures Python et des chaînes repr. Si vous enregistrez une collection (i.e. un dict ou une liste) Rich affichera la collection de façon à ce qu'elle tienne dans l'espace disponible. Voici un exemple de certaines de ces fonctionnalités.\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\nL'opération ci-dessus produit le résultat suivant :\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)\n\nNotez l'argument `log_locals`, qui produit un tableau contenant les variables locales où la méthode log a été appelée.\n\nLa méthode log peut être utilisée pour la journalisation vers le terminal pour les applications qui tournent longtemps, comme les serveurs, mais c'est aussi une très bonne aide au débogage.\n</details>\n\n<details>\n<summary>Journalisation</summary>\n\nVous pouvez également utiliser la classe intégrée [Handler](https://rich.readthedocs.io/en/latest/logging.html) pour formater et coloriser les textes de sortie du module de journalisation de Python. Voici un exemple de texte de sortie :\n\n![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)\n</details>\n\n<details>\n<summary>Emoji</summary>\n\nPour insérer un emoji dans la sortie de la console, placez le nom entre deux points. Voici un exemple :\n\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\nVeuillez utiliser cette fonction à bon escient.\n</details>\n\n<details>\n<summary>Tableaux</summary>\n\nRich peut rendre des [tableaux](https://rich.readthedocs.io/en/latest/tables.html) flexibles avec des caractères unicodes. Il existe une grande variété d'options de formatage pour les bordures, les styles, l'alignement des cellules, etc.\n\n![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)\n\nL'animation ci-dessus a été générée avec [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) dans le répertoire des exemples.\n\nVoici un exemple de tableau plus simple :\n\n```python\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\nCela produit le résultat suivant :\n\n![table](https://github.com/textualize/rich/raw/master/imgs/table.png)\n\nNotez que les balises de la console sont rendues de la même manière que `print()` et `log()`. De fait, tout ce qui peut être rendu par Rich peut être inclus dans les en-têtes / lignes (même d'autres tables).\n\nLa classe `Table` est suffisamment intelligente pour redimensionner les colonnes en fonction de la largeur disponible du terminal, en enveloppant et en réduisant le texte si nécessaire. Voici le même exemple, avec un terminal plus petit que le tableau ci-dessus :\n\n![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\n</details>\n\n<details>\n<summary>Barres de progression</summary>\n\nRich peut afficher plusieurs [barres de progression](https://rich.readthedocs.io/en/latest/progress.html) sans scintillement pour suivre les tâches de longue périodes.\n\nPour une utilisation basique, créez une boucle sur n'importe quelle séquence dans la fonction `track` et itérez sur le résultat. Voici un exemple :\n\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\nIl n'est pas beaucoup plus difficile d'ajouter plusieurs barres de progression. Voici un exemple tiré de la documentation :\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\nLes colonnes peuvent être configurées pour afficher tous les détails que vous souhaitez. Les colonnes intégrées comprennent le pourcentage d'achèvement, la taille du fichier, la vitesse du fichier et le temps restant. Voici un autre exemple montrant un téléchargement en cours :\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\n\nPour l'essayer vous-même, testez [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) qui peut télécharger plusieurs URL simultanément tout en affichant la progression au fil du temps.\n\n</details>\n\n<details>\n<summary>Statut</summary>\n\nPour les situations où il est difficile de calculer la progression, vous pouvez utiliser la méthode [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) qui affichera une animation et un message de type \"spinner\". L'animation ne vous empêchera pas d'utiliser la console normalement. Voici un exemple :\n\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\nCela génère la sortie suivante dans le terminal.\n\n![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\n\nLes animations des characteres d'animations ont été empruntées à [cli-spinners](https://www.npmjs.com/package/cli-spinners). Vous pouvez en sélectionner un en spécifiant le paramètre `spinner`. Exécutez la commande suivante pour voir les valeurs disponibles :\n\n```\npython -m rich.spinner\n```\n\nLa commande ci-dessus génère la sortie suivante dans le terminal :\n\n![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\n</details>\n\n<details>\n<summary>Arborescence</summary>\n\nRich peut affiché une [arborescence](https://rich.readthedocs.io/en/latest/tree.html) avec des lignes de repère. Une arborescence est idéale pour afficher une structure de fichiers, ou toute autre donnée hiérarchique.\n\nLes étiquettes de cette arborescence peuvent être du texte simple ou tout autre élément que Rich peut rendre. Exécutez ce qui suit pour une démonstration :\n\n```\npython -m rich.tree\n```\n\nLa commande ci-dessus génère la sortie suivante dans le terminal :\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)\n\nVoir l'exemple [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) pour un script qui affiche une vue arborescente de n'importe quel répertoire, similaire à la commande linux `tree`.\n\n</details>\n\n<details>\n<summary>Colonnes</summary>\n\nRich peut rendre du contenu en [colonnes](https://rich.readthedocs.io/en/latest/columns.html) avec une largeur égale ou optimale. Voici un clone très basique de la commande `ls` (MacOS / Linux) qui affiche une liste de répertoires en colonnes :\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\nLa capture d'écran suivante est le résultat de [columns example](https://github.com/textualize/rich/blob/master/examples/columns.py) qui affiche les données extraites d'une API en colonnes :\n\n![colonne](https://github.com/textualize/rich/raw/master/imgs/columns.png)\n\n</details>\n\n<details>\n<summary>Markdown</summary>\n\nRich peut rendre le [markdown](https://rich.readthedocs.io/en/latest/markdown.html) et fait un travail raisonnable pour traduire le formatage dans le terminal.\n\nPour rendre du markdown, importez la classe `Markdown` et construisez-la avec une chaîne contenant du code markdown. Ensuite, affichez-la dans la console. Voici un exemple :\n\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\nCela produira un résultat semblable à ce qui suit :\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\n \n</details>\n\n<details>\n<summary>Mise en couleur de la syntaxe</summary>\n\nRich utilise la bibliothèque [pygments](https://pygments.org/) pour implémenter la [coloration syntaxique](https://rich.readthedocs.io/en/latest/syntax.html). L'utilisation est similaire au rendu de markdown ; construire un objet `Syntax` et afficher celui-ci sur la console. Voici un exemple :\n\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\nCela produira le résultat suivant :\n\n![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\n</details>\n\n<details>\n<summary>Tracebacks</summary>\n\nRich peut rendre des [traçages d'erreurs](https://rich.readthedocs.io/en/latest/traceback.html) plus faciles à lire et qui montrent plus de code que les traçages d'erreurs standard de Python. Vous pouvez définir Rich comme le gestionnaire d'erreurs par défaut afin que toutes les exceptions/erreurs non capturées soient rendues par Rich.\n\nVoici à quoi cela ressemble sous OSX (similaire sous Linux) :\n\n![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)\n\n</details>\n\nTous les éléments de rendu utilisent le [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html), que vous pouvez également utiliser pour mettre en œuvre votre propre contenu Rich.\n\n# Rich pour les entreprises\n\nDisponible dans le cadre de l'abonnement Tidelift.\n\nLes mainteneurs de Rich et de milliers d'autres paquets collaborent avec Tidelift pour fournir un support et une maintenance commerciale pour les paquets open source que vous utilisez pour construire vos applications. Gagnez du temps, réduisez les risques et améliorez votre qualité de code, tout en payant les mainteneurs des paquets que vous utilisez. [En savoir plus](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n# Projets utilisant Rich\n\n- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)\n  un package python pour la visualisation de données neuro-anatomiques tridimensionnelles\n- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)\n  Outil de déchiffrage automatisé\n- [emeryberger/scalene](https://github.com/emeryberger/scalene)\n  un profileur de CPU et de mémoire haute performance et haute précision pour Python\n- [hedythedev/StarCli](https://github.com/hedythedev/starcli)\n  Parcourir les projets tendances de GitHub à partir de votre ligne de commande\n- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)\n  Cet outil recherche un certain nombre de composants courants et vulnérables (openssl, libpng, libxml2, expat et quelques autres) pour vous indiquer si votre système comprend des bibliothèques présentant des vulnérabilités connues.\n- [nf-core/tools](https://github.com/nf-core/tools)\n  Paquet Python contenant des outils d'aide pour la communauté nf-core.\n- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)\n  pdb + bibliothèque Rich pour un débogage amélioré\n- [plant99/felicette](https://github.com/plant99/felicette)\n  L'imagerie satellite pour les nuls.\n- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)\n  Automatisez et testez 10 fois plus vite avec Selenium et pytest. Piles incluses.\n- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)\n  Synchronisation automatique des sous-titres avec la vidéo.\n- [tryolabs/norfair](https://github.com/tryolabs/norfair)\n  Bibliothèque Python légère pour ajouter le suivi d'objets 2D en temps réel à n'importe quel détecteur.\n- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Ansible-lint vérifie dans les playbooks les pratiques et comportements qui pourraient être améliorés.\n- [ansible-community/molecule](https://github.com/ansible-community/molecule) Cadre de test Ansible Molecule.\n- [Beaucoup d'autres](https://github.com/textualize/rich/network/dependents) !\n"
        },
        {
          "name": "README.hi.md",
          "type": "blob",
          "size": 30.689453125,
          "content": "[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\n[![codecov](https://codecov.io/gh/Textualize/rich/branch/master/graph/badge.svg)](https://codecov.io/gh/Textualize/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\n\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\n • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\n • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\n • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)\n • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\n • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\n • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)\n • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\n • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)\n • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\n • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)\n • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\n • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)\n • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)\n  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)\n • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n\nRich टर्मिनल में _समृद्ध_ पाठ और सुंदर स्वरूपण के लिए एक Python संग्रह है।\n\n\n[Rich API](https://rich.readthedocs.io/en/latest/) टर्मिनल उत्पादन में रंग और शैली डालना आसान बनाता है। Rich सुंदर सारणियाँ, प्रगति सूचक डंडे, markdown, रचनाक्रम चिन्हांकित स्त्रोत कोड, ट्रेसबैक आदि प्रस्तुत कर सकता है - बिना कुछ बदले।\n\n![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\nRich के वीडियो परिचय के लिए देखें [@fishnets88](https://twitter.com/fishnets88) द्वारा बनाई गई [calmcode.io](https://calmcode.io/rich/introduction.html)।\n\n\nदेखें [लोग रिच के बारे में क्या कह रहे हैं](https://www.willmcgugan.com/blog/pages/post/rich-tweets/)।\n\n## अनुकूलता\n\nRich Linux, OSX, और Windows के साथ चल सकता है। सच्चा रंग/इमोजी नए Windows टर्मिनल के साथ काम करता है, पुराना टर्मिनल १६ रंगों तक ही सीमित है। Rich के लिए Python ३.६.१ या बाद का होना आवश्यक है।\n\nRich बिना किसी अतिरिक्त विन्यास के [Jupyter नोटबुक](https://jupyter.org/) के साथ काम करता है।\n\n## स्थापना करना\n\n`pip` या अपने पसंदीदा PyPI संकुल प्रबंधक (package manager) के द्वारा आप इसे स्थापित कर सकते हैं।\n\n```sh\npython -m pip install rich\n```\n\nआपके टर्मिनल पर Rich उत्पादन का परीक्षण करने के लिए यह चलाएं:\n```sh\npython -m rich\n```\n\n## Rich Print\n\nअपने अनुप्रयोग में सरलता से समृद्ध उत्पादन जोड़ने के लिए, आप [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) क्रिया को आयात कर सकते हैं, जिसका हस्ताक्षर अंतर्निहित Python क्रिया के समान है। यह चलाने की कोशिश करें:\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## Rich REPL\n\nRich को Python REPL में स्थापित किया जा सकता है, ताकि कोई भी डेटा संरचनाएं सुंदरता से छपे तथा चिह्नांकित हों।\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## कॉनसोल (Console) का इस्तेमाल करना\n\nसमृद्ध टर्मिनल वस्तुओं पर अधिक नियंत्रण के लिए, आयात और निर्मित करें एक [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) वस्तु को।\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nConsole वस्तु के पास एक `print` क्रिया है जिसका अंतरापृष्ठ जानबूझ कर अंतर्निहित `print` क्रिया के सामान है। इसके इस्तेमाल का एक उदाहरण :\n```python\nconsole.print(\"Hello\", \"World!\")\n```\n\n\nजैसा आप उम्मीद कर रहे होंगे, यह टर्मिनल पर `\"Hello World!\"` छाप देगा। ध्यान दें की अंतर्निहित `print` क्रिया के भिन्न, Rich आपके पाठ को \"वर्ड-रैप\" कर देगा ताकि वह टर्मिनल की चौड़ाई में फस सके।\n\nअपने उत्पादन में रंग और शैली डालने के लिए एक से अधिक तरीके हैं। `style` कीवर्ड तर्क जोड़कर आप सम्पूर्ण उत्पादन के लिए शैली निर्धारित कर सकते हैं। इसका एक उदाहरण:\n```python\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\nउत्पादन कुछ इस प्रकार का होगा:\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\n\n\nये एक बारी में एक पंक्ति का शैलीकरण करने के लिए तो ठीक है। अधिक बारीकी से शैलीकरण करने के लिए, Rich एक विशेष मार्कअप को प्रदर्शित करता है जो रचनाक्रम में [bbcode](https://en.wikipedia.org/wiki/BBCode) से मिलता-जुलता है। इसका एक उदाहरण:\n\n```python\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\n\nकम-से-कम मेहनत में परिष्कृत उत्पादन उत्पन्न करने के लिए आप एक Console वस्तु का उपयोग कर सकते हैं। अधिक जानकारी के लिए आप [Console API](https://rich.readthedocs.io/en/latest/console.html) का प्रलेख पढ़ सकते हैं।\n\n## Rich Inspect\n\nRich में एक [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) फलन उपलब्ध है जो किसी भी Python वस्तु, जैसे की क्लास, इन्स्टैन्स या अंतर्निहित पर प्रतिवेदन उत्पादित कर सकता है।\n```python\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)\n\nअधिक जानकारी के लिए [inspect का प्रलेखन](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) पढ़ें।\n\n# Rich संग्रह\n\nRich में कई अंतर्निहित _प्रतिपाद्य_ मौजूद हैं जिनका इस्तेमाल करके आप अपने CLI में सुंदर उत्पादन उत्पन्न कर सकते हैं तथा अपने कोड का दोषमार्जन (डीबग) करने में सहायता प सकते हैं।\n\n\nजानकारी के लिए निम्न शीर्षकों पर क्लिक करें:\n\n<details>\n<summary>लॉग (Log)</summary>\n\nConsole वस्तु के पास एक `log()` फलन होता है जिसका अंतरापृष्ठ `print()` से मिलता है, पर साथ में वर्तमान समय और आवाहन करने वाली पंक्ति के लिए एक खाना प्रस्तुत करता है। व्यक्तिक्रम तौर पर Rich Python संरचनाएं एवं repr मालाओं (स्ट्रिंगों) पर रचनाक्रम चिह्नांकन करेगा। यदि आप एक संग्रह (यानि एक डिक्शनेरी या एक सूची) को लॉग करते हैं तो Rich उसे सुंदरता से छापेगा ताकि वह उपलब्ध जगह में फस सके। इनमें से कुछ विशेषताओं का उदहरण प्रस्तुत है:\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\nउपर्युक्त कोड से निम्न उत्पादन उत्पन्न होता है:\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)\n\nध्यान दें `log_levels` तर्क की तरफ, जो एक सारणी उत्पादित करता है जिसमे लॉग फलन के आवाहन के स्थान के स्थानिये चर युक्त हैं।\n\nलॉग फलन का इस्तेमाल परिसेवकों (सर्वर) जैसे लंबे समय के लिये चलने वाले अनुप्रयोगों के लिए टर्मिनल पर प्रचालेखन के लिए किया जा सकता है, पर यह एक बहुत अच्छा दोषमार्जन सहायक भी है।\n\n</details>\n<details>\n<summary>प्रचालेखन संचालक</summary>\n\nPython के `logging` मापांक से आए हुए उत्पादन का संरूपण एवं रंगीकरण करने के लिए आप अंतर्निहित [Handler वर्ग](https://rich.readthedocs.io/en/latest/logging.html) का भी इस्तेमाल कर सकते हैं। उत्पादन का एक उपहरण प्रस्तुत है:\n\n![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)\n\n</details>\n\n<details>\n<summary>इमोजी</summary>\n\nConsole उत्पादन में इमोजी डालने के लिए नाम को दो अपूर्ण विरामों (:) के बीच रखें। इसका एक उदाहरण:\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\nकृपया इसका इस्तेमाल समझदारी से करें।\n</details>\n\n<details>\n<summary>सारणियाँ</summary>\n\nRich यूनिकोड डिब्बा अक्षरों की सहायता से लचीली [सारणियाँ](https://rich.readthedocs.io/en/latest/tables.html) प्रदर्शित कर सकता है। सीमाएँ, शैलियाँ, कक्ष संरेखण आदि के लिए कई सारे स्वरूपण विकल्प उपलब्ध हैं।\n\n![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)\n\nउपर्युक्त अनुप्राणन examples डायरेक्टरी के [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) से बनाया गया है।\n\nइससे सरल संचिका का उदाहरण:\n```python\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\nइससे निम्नलिखित उत्पादन उत्पन्न होता है:\n\n![table](https://github.com/textualize/rich/raw/master/imgs/table.png)\n\nध्यान दें की कॉनसोल मार्कअप `print()` और `log()` की तरह ही प्रदर्शित होते हैं। वास्तव में, कोई भी वस्तु जो Rich के द्वारा प्रदर्शनीय है वह शीर्षकों / पंक्तियों (दूसरी संचिकाओं में भी) में युक्त किया जा सकता है।\n\n`Table` वर्ग इतनी बुद्धिमान है की वह टर्मिनल की उपलब्ध चौड़ाई में फ़साने के लिए स्तंभों का आकार बदल सकता है, आवश्यकता के अनुसार पाठ को लपेटते हुए। यह वही उदाहरण है, टर्मिनल को उपर्युक्त संचिका से छोटा रखते हुए:\n\n![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\n\n</details>\n\n<details>\n<summary>प्रगति सूचक डंडे</summary>\n\nलंबे समय तक चलने वाले कार्यों पर नज़र रखने के लिए Rich अनेक झिलमिलाहट-मुक्त [प्रगति सूचक](https://rich.readthedocs.io/en/latest/progress.html) डंडे प्रदर्शित कर सकता है।\n\nबुनियादी उपयोग के लिए, किसी भी क्रम को `track` फलन में लपेटें और परिणाम पर पुनरावर्तन करें। इसका एक उदाहरण:\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\nअनेक प्रगति सूचक डंडे जोड़ने इससे अधिक कठिन नहीं है। ये रहा एक उदाहरण जो प्रलेखन से उठाया गया है:\n![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\nस्तंभों का विन्यास इस प्रकार किया जा सकता है की आपकी इच्छानुसार विवरण दिखाए जाएँ। अंतर्निहित स्तंभ में प्रतिशत पूरा, संचिका आकार, संचिका गति तथा शेष समय युक्त होते हैं। ये रहा एक और उदाहरण एक चालू डाउनलोड को दर्शाते हुए।\n![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\n\nइसे स्वयं आजमाने के लिए, देखें [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) जो अनेक URL एक साथ डाउनलोड करते हुए प्रगति दर्शाता है।\n</details>\n\n<details>\n<summary>स्थिति</summary>\n\nऐसी परिस्थितियों में जहां प्रगति की गणना करना कठिन हों, आप [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) (स्थिति) फलन का उपयोग कर सकते हैं जो एक 'स्पिनर' अनुप्राणन और संदेश दर्शाएगा। अनुप्राणन आपको सामान्य तरीके से कॉनसोल को इस्तेमाल करने से नहीं रोकेगा। ये एक उदाहरण:\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\nइससे टर्मिनल में निम्नलिखित उत्पादन उत्पन्न होता है:\n![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\n\nस्पिनर अनुप्राणन [cli-spinners](https://www.npmjs.com/package/cli-spinners) से उधारे गए थे। आप `spinner` प्राचल को उल्लिखित करके स्पिनर चुन सकते हैं। उपलब्ध विकल्प देखने के लिए निम्नलिखित आदेश चलकर देखें:\n```\npython -m rich.spinner\n```\n\nउपर्युक्त आदेश टर्मिनल में निम्नलिखित उत्पादन उतपन्न करता है:\n![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\n\n</details>\n\n<details>\n<summary>वृक्ष</summary>\n\nRich मरकदर्शक रेखाओं से [tree](https://rich.readthedocs.io/en/latest/tree.html) (वृक्ष) प्रदर्शित कर सकता है। संचिता संरचना, अथवा कोई भी और पदानुक्रमित डेटा दर्शाने के लिए वृक्ष एक आदर्श विकल्प है।\n\nवृक्ष के नाम सरल पाठ्यांश या कुछ भी और जो Rich प्रदर्शित कर सके। इसके एक प्रदर्शन के लिए निम्नलिखित को चलाएं:\n```\npython -m rich.tree\n```\n\nइससे निम्न उत्पादन उत्पन्न होता है:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)\n\nदेखें उदाहरण [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) एक क्रमादेश के लिए जो किसी भी डायरेक्टरी का वृक्ष दृश्य (ट्री व्यू) दर्शाएगा, लिनक्स के `tree` आदेश के समान।\n\n</details>\n\n<details>\n<summary>स्तंभ</summary>\n\n\nRich सामग्री को समान अथवा श्रेष्ट चौड़ाई के साथ स्पष्ट [स्तंभ](https://rich.readthedocs.io/en/latest/columns.html) प्रदर्शित कार सकता है। यही (MacOS / Linux) `ls` आदेश का बहुत बुनियादी प्रतिरूप प्रस्तुत किया गया है जो स्तंभों में डायरेक्टरी सूची को दर्शाता है।\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\nनिम्न स्क्रीनशॉट [स्तंभों के उदाहरण](https://github.com/textualize/rich/blob/master/examples/columns.py) का उत्पादन है जो एक API से खींचे गए डेटा को स्तंभों में प्रदर्शित करता है:\n![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)\n\n</details>\n\n<details>\n<summary>Markdown</summary>\n\nRich [markdown](https://rich.readthedocs.io/en/latest/markdown.html) को प्रदर्शित कार सकता है और स्वरूपण का अनुवाद टर्मिनल पर करने में उचित कार्य करता है।\n\n\nMarkdown प्रदर्शित करने के लिए आप `Markdown` वर्ग को आयात कार सकते हैं और उसे markdown कोड युक्त अक्षरमाला के साथ निर्मित कर सकते हैं। फिर उसे कॉनसोल पर छापें। एक उदाहरण प्रस्तुत है:\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\nइससे कुछ इस प्रकार का उत्पादन उत्पन्न होगा:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\n\n</details>\n\n<details>\n<summary>रचनाक्रम चिह्नांकन</summary>\n\nRich [रचनाक्रम चिह्नांकन](https://rich.readthedocs.io/en/latest/syntax.html) के लिए [pygments](https://pygments.org/) संग्रह का उपयोग करता है। उपयोग markdown को प्रदर्शित करने से मिलता-जुलता है; एक `Syntax` वस्तु निर्मित करें और उसे कॉनसोल पर छापें। एक उदाहरण:\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\nThis will produce the following output:\nइससे निम्न उत्पादन उत्पन्न होता है:\n\n![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\n\n</details>\n\n<details>\n<summary>ट्रेसबैक</summary>\n\nRich [खूबसूरत ट्रेसबैक](https://rich.readthedocs.io/en/latest/traceback.html) दर्शा सकता है जो पढ़ने में आसान तथा मानक Python ट्रेसबैकों से अधिक कोड दिखाता है। आप Rich को व्यक्तीक्रम ट्रेसबैक संचालक भी निर्धारित कार सकते हैं ताकि सभी बेपकड़ अपवाद Rich के द्वारा प्रदर्शित हों।\n\nOSX (Linux पर समान) पर यह कुछ इस प्रकार दिखता है:\n![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)\n\n</details>\n\nसभी Rich प्रतिपाद्य [कॉनसोल प्रोटोकॉल](https://rich.readthedocs.io/en/latest/protocol.html) का उपयोग करते हैं, जिसे आप स्वयं की Rich सामग्री बनाने के लिए भी इस्तेमाल कार सकते हैं।\n\n# उद्यम के लिए Rich\n\nTidelift Subscription के हिस्से के तौर पर उपलब्ध।\n\nRich एवं सहस्त्रों और संग्रहों के पालक आपके अनुप्रयोगों को बनाने के लिए इस्तेमाल किए जाने वाले खुले स्त्रोत संग्रहों के लिए व्यावसायिक सहायता तथा रखरखाव देने के लिए Tidelift के साथ काम कार रहे हैं। समय बचाइए, जोखिम काम कीजिए, और कोड स्वास्थ सुधारें, और साथ में जिन संग्रहों को आप इस्तेमाल करते हैं उनके पालकों को भुगतान करें। [अधिक जानें।](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n# Rich का उपयोग करने वाली परियोजनाएँ\n\nये रहे कुछ परियोजनाएँ जो Rich इस्तेमाल करते हैं।\n- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)\n  त्रिविम न्यूरो-संरचनात्मक डेटा का चित्रण करने के लिए एक Python संग्रह\n- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)\n  स्वचालित विकोडन उपकरण\n- [emeryberger/scalene](https://github.com/emeryberger/scalene)\n  Python के लिए एक उच्च-प्रदर्शन, उच्च-सूक्ष्मता CPU एवं स्मृति प्रोफाइलर\n- [hedythedev/StarCli](https://github.com/hedythedev/starcli)\n  अपनी आदेश पंक्ति (कमांड लाइन) से GitHub रुझानि परियोजिनाएं ब्राउज़ करें\n- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)\n  यह उपकरण कई साधारण, भेद्य घटकों (openssl, libpng, libxml2, expat और कुछ और) के लिए जांच करता है ताकि आपको बता सके की क्या आपके तंत्र में जानी हुई कमज़ोरियों वाले संग्रह युक्त हैं।\n- [nf-core/tools](https://github.com/nf-core/tools)\n  nf-core समुदाय के लिए सहायक उपकरणों युक्त Python संग्रह\n- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)\n  उन्नत दोषमार्जन के लिए pdb + Rich संग्रह\n- [plant99/felicette](https://github.com/plant99/felicette)\n  पुतलों के लिए उपग्रह चित्र\n- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)\n  Selenium और pytest के साथ १० गुना तेज़ स्वचालन एवं परीक्षण करें। बैटरी शामिल।\n- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)\n  स्वतः उपशीर्षकों को वीडियो के साथ समकालित करें।\n- [tryolabs/norfair](https://github.com/tryolabs/norfair)\n  किसी भी संसूचक में सद्य-अनुक्रिया द्विविम वस्तु ट्रैकिंग जोड़ने के लिए एक हल्का Python संग्रह।\n- [ansible/ansible-lint](https://github.com/ansible/ansible-lint)\n  Ansible-lint उन आचरणों और व्यवहारों के लिए प्लेबुकों में जाँच करता है जिन्हे संभावित रूप से सुधारा जा सकता है\n- [ansible-community/molecule](https://github.com/ansible-community/molecule) Ansible Molecule testing framework\n  Ansible Molecule परीक्षण ढांचा\n- +[कई और](https://github.com/textualize/rich/network/dependents)!\n\n<!-- This is a test, no need to translate -->\n"
        },
        {
          "name": "README.id.md",
          "type": "blob",
          "size": 19.900390625,
          "content": "[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich/13.2.0)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\n\n[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/textualize/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\n\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\n • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\n • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\n • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)\n • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\n • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\n • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)\n • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\n • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)\n • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\n • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)\n • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\n • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)\n • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)\n • [Indonesian readme](https://github.com/textualize/rich/blob/master/README.id.md)\n  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)\n • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n\nRich adalah library Python yang membantu _memperindah_ tampilan output suatu program di terminal.\n\n[Rich API](https://rich.readthedocs.io/en/latest/) dapat digunakan untuk mempermudah dalam penambahan gaya dan pewarnaan output di terminal. Rich juga mendukung fitur lain seperti pembuatan tabel, bar progress, penulisan markdown, penghilightan syntax source code, tracebacks, dan masih banyak lagi.\n\n![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\nSebagai pengenalan Rich saksikan video berikut [calmcode.io](https://calmcode.io/rich/introduction.html) oleh [@fishnets88](https://twitter.com/fishnets88).\n\nLihat pendapat [pengguna yang telah menggunakan Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).\n\n## Kompabilitas\n\nRich dapat berjalan di Linux, OSX, dan Windows. Warna tambahan / emoji dapat berjalan di Windows Terminal baru, untuk terminal lama pewarnaan terbatas ke dalam 16 warna. Rich memerlukan versi Python 3.6.3 atau ke atas.\n\nRich dapat berjalan di [Jupyter notebooks](https://jupyter.org/) tanpa memerlukan konfigurasi tambahan.\n\n## Instalasi\n\nInstall dengan `pip` atau paket manager favorit anda.\n\n```sh\npython -m pip install rich\n```\n\nJalankan perintah berikut untuk menguji Rich di terminal anda:\n\n```sh\npython -m rich\n```\n\n## Rich Print\n\nUntuk menambahkan rich sebagai output program anda, lakukan import method [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start), yang memiliki signature sama dengan fungsi built-in Python. Coba jalankan program berikut:\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## Rich REPL\n\nRich dapat diinstal ke dalam Python REPL sehingga setiap struktur data akan ditampilkan dengan indah dan terhighlight.\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## Penggunaan Console\n\nUntuk kontrol lebih terhadap konten terminal, lakukan import dan susun suatu [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) object.\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nConsole object memiliki method `print` yang berfungsi serupa dengan built-in `print`. Berikut adalah contoh penggunaannya:\n\n```python\nconsole.print(\"Hello\", \"World!\")\n```\n\nSeperti yang anda perkirakan, perintah tersebut akan menampilkan `\"Hello World!\"` sebagai output di terminal. Catatan, perbedaan dengan fungsi built-in `print`, Rich membuat teks termampatkan disesuaikan dengan lebar terminal.\n\nTerdapat beberapa cara untuk melakukan penambahan warna dan gaya output dari program anda. Anda dapat mengatur keseluruhan output dengan menambahkan keyword argumen `style`. Berikut adalah contoh penerapannya:\n\n```python\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\nOutput dari perintah tersebut akan tampak sebagai berikut:\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\n\nMelakukan perubahan tampilan teks output dalam satu waktu mungkin sudah baik. Tetapi untuk membuat tampilan lebih rapi, Rich mendukung fitur rendering menggunakan pemformatan spesial dimana syntaxnya serupa dengan [bbcode](https://en.wikipedia.org/wiki/BBCode). Berikut adalah contoh penerapannya:\n\n```python\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\n\nAnda dapat menggunakan console object untuk menciptakan keluaran yang indah dengan usaha yang sedikit. Kunjungi [Console API](https://rich.readthedocs.io/en/latest/console.html) untuk informasi lebih lengkap.\n\n## Rich Inspect\n\nRich memiliki fungsi [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) yang dapat membuat laporan untuk setiap Python object, seperti class, instance, atau built-in.\n\n```python\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)\n\nKunjungi [dokumentasi inspect](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) untuk detail lebih lanjut.\n\n# Rich Library\n\nRich mengandung sejumlah built-in yang bersifat _renderables_, artinya anda dapat menciptakan output yang elegant pda program CLI anda serta dapat membantu dalam proses debugging program anda.\n\nKlik pilihan berikut untuk detail lebih lanjut:\n\n<details>\n<summary>Log</summary>\n\nConsole object mempunyai method bernama `log()` yang serupa dengan `print()`, tetapi juga mendukung fitur perenderan kolom waktu terkini serta baris file yang melakukan pemanggilan fungsi tertentu. Secara default Rich akan menghilight syntax untuk struktur python dan REPR strings. Jika anda melakukan log pada sekumpulan data (misal dictionary atau list) Rich akan memperindah output yang ditampilkan serta disesuaikan dengan ukuran terminal yang tersedia. Berikut adalah contoh penerapan dari beberapa fitur ini.\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\nPerintah di atas akan menampilkan output sebagai berikut:\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)\n\nSebagai catatan, argumen `log_locals` berupa tabel yang berisikan variabel lokal yang menunjukkan lokasi dimana log tersebut dipanggil.\n\nMethod log ini dapat digunakan untuk mencatat aktivitas terminal yang berjalan lama seperti servers, tetapi method ini juga sangat baik untuk membantu dalam proses debugging.\n\n</details>\n<details>\n<summary>Penanganan Logging</summary>\n\nAnda dapat juga menggunakan builtin [Handler class](https://rich.readthedocs.io/en/latest/logging.html) untuk memformat dan mewarnai output dari module logging Python. Berikut adalah contoh penerapannya:\n\n![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)\n\n</details>\n\n<details>\n<summary>Emoji</summary>\n\nUntuk menambahkan emoji sebagai output di console, tuliskan nama emoji diantara dua buah titik dua (:). Berikut adalah contoh penerapannya:\n\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\nMohon gunakan fitur ini dengan bijak.\n\n</details>\n\n<details>\n<summary>Tabel</summary>\n\nRich mendukung perenderan [tabel](https://rich.readthedocs.io/en/latest/tables.html) secara fleksibel dengan karakter unicode. Terdapat variasi sangat besar untuk opsi pemformatan seperti pengaturan border, gaya tabel, perataan teks di dalam cell, dan lain sebagainya.\n\n![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)\n\nAnimasi di atas dibuat dengan program [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) pada direktori examples.\n\nBerikut adalah contoh tabel sederhana:\n\n```python\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\nProgram di atas akan menghasilkan output sebagai berikut:\n\n![tabel](https://github.com/textualize/rich/raw/master/imgs/table.png)\n\nSebagai catatan console markup dirender sama seperti `print()` dan `log()`. Faktanya, untuk segala bentuk hal yang dapat dirender menggunakan Rich dapat disisipkan ke dalam header / baris (bahkan tabel lain).\n\nClass `Table` memiliki kemampuan yang baik untuk mengatur ukuran kolom supaya sesuai dengan lebar yang disediakan oleh terminal. Berikut adalah contoh penerapannya, dengan terminal memiliki ukuran yang lebih kecil dibandingkan tabel di atas:\n\n![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\n\n</details>\n\n<details>\n<summary>Bar Progress</summary>\n\nRich dapat merender beragam bar [progress](https://rich.readthedocs.io/en/latest/progress.html) interaktif untuk memantau kemajuan yang telah dicapai oleh program yang berjalan lama.\n\nUntuk penggunaan dasar, masukan setiap urutan yang hendak dijadikan ke dalam bentuk progress ke dalam fungsi 'track' dan  iterasikan urutan tersebut di atas outputnya. Berikut adalah contoh penerapannya:\n\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\nTidaklah sulit untuk menambahkan beberapa bar progress sekaligus. Berikut adalah contoh implementasi yang diambil dari file dokumentasi:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\nBagian kolom dapat dikonfigurasikan sesuai dengan kebutuhan. Built-in kolom juga memiliki fitur presentasi seleasi, ukuran file, kecepatan file, dan waktu sisa. Berikut adalah contoh menampilkan bar progress ketika mengunduh suatu file:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\n\nUntuk bereksperimen, periksa [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) yang dapat menampilkan beberapa progress bar  pengunduhan dari beberapa alamat URL sekaligus.\n\n</details>\n\n<details>\n<summary>Status</summary>\n\nUntuk kondisi dimana perhitungan sulit dilakukan dengan perhitunggan progress, gunakan method [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) berikut yang menampilkan animasi 'spinner' dan pesan. Animasi tersebut tidak mencegah penggunaan console seperti keadaan normal. Berikut adalah contoh penerapannya:\n\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\nProgram di atas akan menghasilkan output sebagai berikut.\n\n![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\n\nAnimasi spinner tersebut diambil dari [cli-spinners](https://www.npmjs.com/package/cli-spinners). Anda dapat menentukan spinner yang hendak digunakan dengan menspesifikannya di parameter `spinner`. Jalankan perintah berikut untuk melihat parameter yang tersedia:\n\n```\npython -m rich.spinner\n```\n\nPerintah di atas akan menghasilkan output sebagai berikut:\n\n![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\n\n</details>\n\n<details>\n<summary>Tree</summary>\n\nRich dapat merender perintah [tree](https://rich.readthedocs.io/en/latest/tree.html) beserta dengan garis penunjuk. Suatu perintah tree idealnya digunakan untuk menampilkan struktur suatu file atau data hierarki lainnya.\n\nLabel dari tree dapat berupa teks sederhana atau apapun yang dapat dirender oleh Rich, untuk contoh, jalankan perintah berikut:\n\n```\npython -m rich.tree\n```\n\nProgram di atas akan menghasilkan output sebagai berikut:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)\n\nPeriksa contoh program [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) untuk menampilkan tampilan tree view dari direktori apapun, perintah ini serupa dengan `tree` pada linux.\n\n</details>\n\n<details>\n<summary>Kolom</summary>\n\nRich dapat merender konten [kolom](https://rich.readthedocs.io/en/latest/columns.html) secara rapi dengan ukuran lebar yang sama atau optimal. Berikut adalah hasil kloning perintah dasar dari (MacOS / Linux) yaitu `ls` untuk melakukan listing direktori menggunakan kolom:\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\nScreenshot berikut merupakan output dari [contoh kolom](https://github.com/textualize/rich/blob/master/examples/columns.py) yang menampilkan data yang diambil melalui API ke dalam bentuk kolom:\n\n![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)\n\n</details>\n\n<details>\n<summary>Markdown</summary>\n\nRich dapat merender [markdown](https://rich.readthedocs.io/en/latest/markdown.html) dan melakukan tugasnya untuk menerjemahkan format tersebut supaya dapat ditampilkan di terminal.\n\nUntuk dapat merender markdown, import class `Markdown` dan inputkan string yang mengandung markdown tersebut. Lalu cetak ke dalam console. Berikut adalah contoh penerapannya:\n\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\nProgram di atas akan menghasilkan output seperti berikut:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\n\n</details>\n\n<details>\n<summary>Penghilightan Syntax</summary>\n\nRich memanfaatkan library [pygments](https://pygments.org/) supaya dapat melakukan [penghilightan syntax](https://rich.readthedocs.io/en/latest/syntax.html). Penggunaannya serupa dengan merender markdown; susun object `Syntax` dan cetak output pada console. Berikut adalah contoh penerapannya:\n\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\nProgram di atas akan menghasilkan output sebagai berikut:\n\n![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\n\n</details>\n\n<details>\n<summary>Tracebacks</summary>\n\nRich dapat merender [tracebacks dengan indah](https://rich.readthedocs.io/en/latest/traceback.html) yang membuatnya mudah untuk dibaca dan menampilkan program yang dibuat lebih baik dibandingkan fitur standar Python. Anda dapat mengatur Rich sebagai traceback handler secara default sehingga setiap pesan exceptions akan dirender melalui Rich.\n\nBerikut adalah tampilannya pada OSX (serupa dengan Linux):\n\n![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)\n\n</details>\n\nSemua perenderan Rich menggunakan [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html), anda dapat juga mengimplementasikannya pada konten Rich milik anda.\n\n# Rich CLI\n\n\nBaca juga [Rich CLI](https://github.com/textualize/rich-cli) sebuah program command line yang dibuat menggunakan Rich. Penghilightan syntax, perenderan markdown, menampilkan CSVs ke dalam tabel, dan masih banyak lagi, secara langsung melalui command prompt.\n\n\n![Rich CLI](https://raw.githubusercontent.com/Textualize/rich-cli/main/imgs/rich-cli-splash.jpg)\n\n\n# Projek yang telah menggunakan Rich\n\nBerikut adalah beberpa projek yang menggunakan Rich:\n\n- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)\n  Sebuah package Python untuk visualisasi data neuro-anatomi tiga dimensi.\n- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)\n  Tools yang digunakan untuk melakukan deskripsi otomatis.\n- [emeryberger/scalene](https://github.com/emeryberger/scalene)\n  profiler memori dan CPU untuk Python yang memiliki nilai performa dan presisi tinggi.\n- [hedythedev/StarCli](https://github.com/hedythedev/starcli)\n  Melakukan penelusuran projek terkenal GitHub melalui command line.\n- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)\n  Tools ini dapat digunakan untuk melakukan scanning pada komponen yang rentan  (openssl, libpng, libxml2, expat and a few others) untuk membuat anda mengetahui sistem anda mempunyai library yang telah diketahui kerentanannya.\n- [nf-core/tools](https://github.com/nf-core/tools)\n  package Python dengan tools bantuan untuk komunitas nf-core.\n- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)\n  gabungan library pdb + Rich library untuk memperindah proses debugging.\n- [plant99/felicette](https://github.com/plant99/felicette)\n  gambar citra satelit untuk pemula.\n- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)\n  tools otomatisasi dan test testing 10x lebih cepat dibandingkan dengan Selenium & pytest. Termasuk didalamnya baterai.\n- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)\n  tools sinkronisasi subtitle dengan video.\n- [tryolabs/norfair](https://github.com/tryolabs/norfair)\n  Library Python ringan untuk menambahkan deteksi objek secara real-time pada objek 2D pada suatu detektor.\n- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Sebuah ansible-lint untuk memeriksa playbooks yang digunakan sebagai practices and behaviour yang secara potensial dapat ditingkatkan.\n- [ansible-community/molecule](https://github.com/ansible-community/molecule) Ansible Molecule untuk framework testing\n- +[Lebih banyak lagi](https://github.com/textualize/rich/network/dependents)!\n\n<!-- This is a test, no need to translate -->\n"
        },
        {
          "name": "README.it.md",
          "type": "blob",
          "size": 18.6552734375,
          "content": "[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![codecov](https://codecov.io/gh/Textualize/rich/branch/master/graph/badge.svg)](https://codecov.io/gh/Textualize/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\n\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\n • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\n • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\n • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)\n • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\n • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\n • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)\n • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\n • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)\n • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\n • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)\n • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\n • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)\n • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)\n  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)\n • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n\n\nRich è una libreria Python per un testo _rich_ e con una piacevole formattazione nel terminale.\n\nLe [Rich API](https://rich.readthedocs.io/en/latest/) permettono di aggiungere facilmente colore e stile all'output del terminale. Rich permette di visualizzare tabelle, barre di avanzamento, markdown, evidenziazione della sintassi, tracebacks, e molto altro ancora — tutto già pronto all'uso.\n\n![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\nPer una video-introduzione di Rich puoi vedere [calmcode.io](https://calmcode.io/rich/introduction.html) by [@fishnets88](https://twitter.com/fishnets88).\n\nGuarda cosa [le persone dicono su Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).\n\n## Compatibilità\n\nRich funziona su Linux, OSX, e Windows. True color / emoji funzionano con il nuovo Windows Terminal, il terminale classico è limitato a 16 colori. Rich richiede Python 3.6.3 o superiore.\n\nRich funziona con i [Jupyter notebooks](https://jupyter.org/) senza configurazioni aggiuntive.\n\n## Installazione\n\nInstalla con `pip` o il tuo PyPI package manager preferito.\n\n```sh\npython -m pip install rich\n```\n\nEsegui il seguente comando per testare l'output di Rich sul tuo terminale:\n\n```sh\npython -m rich\n```\n\n## Rich Print\n\nUtilizzare rich è semplicissimo, ti basta importare il metodo [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start), che ha la stessa signature della funzione builtin in Python. Prova:\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## Rich REPL\n\nRich può essere installo in Python REPL, in questo modo ogni struttura dati sarà visualizzata in modo gradevole ed evidenziato.\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## Utilizzo di Console\n\nPer un maggiore personalizzazione dei contenuti puoi importare ed instanziare un oggetto [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console).\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nL'oggetto Console ha il metodo `print` che utilizza volutamente un interfaccia simile a quella del `print` originale. Ad esempio:\n\n```python\nconsole.print(\"Hello\", \"World!\")\n```\n\nCome puoi immaginare, questo stamperà `\"Hello World!\"` sul terminale. Nota che diversamente dalla funzione builtin `print`, Rich potrebbe portare a capo il testo per rispettare le dimensioni del terminale.\n\nCi sono diversi modi di aggiungere stile e colore al tuo output. Puoi impostare uno stile per l'intero output utilizzando l'argomento keyword `style`. Ad esempio:\n\n```python\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\nL'output sarà qualcosa tipo:\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\n\nQuesto va bene per applicare uno stile ad una linea di testo alla volta. Per uno stile più ricercato, puoi utilizzare uno speciale linguaggio di markup che è simile nella sintassi a [bbcode](https://en.wikipedia.org/wiki/BBCode). Ad esempio:\n\n```python\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\n\nPuoi utilizzare l'oggetto Console per generare output sofisticati con il minimo sforzo. Vedi la docs di [Console API](https://rich.readthedocs.io/en/latest/console.html) per ulteriori dettagli.\n\n## Rich Inspect\n\nRich ha una funzione [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) che può produrre un report per un qualsiasi oggetto Python, come una classe, un instanza, o un builtin.\n\n```python\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)\n\nVedi [inspect docs](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) per ulteriori dettagli.\n\n# Rich Library\n\nRich contiene alcuni builtin _renderables_ che puoi utilizzare per creare eleganti output nella tua CLI e aiutarti nel debug del tuo codice.\n\nFai click sulle seguenti intestazioni per ulteriori dettagli:\n\n<details>\n<summary>Log</summary>\n\nL'oggetto Console ha un metodo `log()` che utilizza un'interfaccia simile a `print()`, ma visualizza anche una colonna con l'ora corrente, il file e la linea che hanno generato la chiamata. Di default Rich evidenzierà le strutture Python e le stringhe repr. Se logghi un oggetto di tipo collection (e.s. un dict o una lista) Rich automaticamente abbellirà l'output in modo che possa entrare nello spazio disponibile. Ecco qui un esempio di alcune delle feature discusse:\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\nIl codice appena mostrato produce il seguente output:\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)\n\nNota l'argomento `log_locals`, che visualizza una tabella contenente le variabili locali dove il metodo log è stato chiamato.\n\nIl metodo log può essere usato per il logging su terminale di applicazioni che solitamente girano su server, ma ha anche uno scopo orientato al debugging.\n\n</details>\n<details>\n<summary>Logging Handler</summary>\n\nPuoi anche utilizzare la classe builtin [Handler](https://rich.readthedocs.io/en/latest/logging.html) per formattare e colorare l'output dal modulo logging di Python. Ecco un esempio dell'output:\n\n![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)\n\n</details>\n\n<details>\n<summary>Emoji</summary>\n\nPer inserire un emoji nell'output della console inseriscine il nome in mezzo a due ':'. Ad esempio:\n\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\nUsa questa feature saggiamente.\n\n</details>\n\n<details>\n<summary>Tables</summary>\n\nRich può visualizzare [tabelle](https://rich.readthedocs.io/en/latest/tables.html) flessibili con caratteri unicode. C'è una vasta gamma di opzioni per la formattazione di bordi, stili, allineamenti di celle etc.\n\n![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)\n\nQuesta animazione è stata realizzata con [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) presente nella directory examples.\n\nEcco qui un semplice esempio di tabella:\n\n```python\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\nQuesto produce il seguente output:\n\n![table](https://github.com/textualize/rich/raw/master/imgs/table.png)\n\nNota che il console markup è visualizzato nello stesso modo di `print()` e `log()`. Infatti, tutto ciò che è visualizzabile da Rich può essere incluso nelle intestazioni / righe (anche altre tabelle).\n\nLa classe `Table` è abbastanza smart da ridimensionare le colonne per entrare nello spazio residuo del terminale, wrappando il testo come richiesto. Ad esempio, con il terminale reso più piccolo della tabella sopra:\n\n![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\n\n</details>\n\n<details>\n<summary>Barre di avanzamento</summary>\n\nRich può visualizzare, senza sfarfallio, multiple barre [di avanzamento](https://rich.readthedocs.io/en/latest/progress.html) per tenere traccia di task di lunga durata.\n\nPer un utilizzo base, wrappa ogni 'step' con la funzione `track` e itera sul risultato. Ad esempio:\n\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\nNon è difficile aggiungere barre di avanzamento multiple. Ecco un esempio dalla documentazione:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\nLe colonne possono essere configurate per visualizzare qualsiasi dettaglio tu voglia. Le colonne built-in includono percentuale di completamente, dimensione del file, velocità, e tempo rimasto. Ecco un altro esempio che mostra un download in corso:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\n\nPer testare tu stesso, vedi [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) che può scaricare multipli URL simultaneamente mentre mostra lo stato di avanzamento.\n\n</details>\n\n<details>\n<summary>Status</summary>\n\nPer situazioni in cui è difficile calcolare l'avanzamento, puoi utilizzare il metodo [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) che mostrerà un animazione 'spinner' e un messaggio. L'animazione non ti impedisce di utilizzare la console normalmente. Ad esempio:\n\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\nQuesto produrrà il seguente output nel terminale.\n\n![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\n\nL'animazione dello spinner è ispirata da [cli-spinners](https://www.npmjs.com/package/cli-spinners). Puoi selezionarne uno specificando `spinner` tra i parametri. Esegui il seguente comando per visualizzare le possibili opzioni:\n\n```shell\npython -m rich.spinner\n```\n\nQuesto produrrà il seguente output nel terminale.\n\n![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\n\n</details>\n\n<details>\n<summary>Albero</summary>\n\nRich può visualizzare un [albero](https://rich.readthedocs.io/en/latest/tree.html) con linee guida. Un albero è ideale per mostrare la struttura di un file, o altri dati gerarchici.\n\nLe etichette dell'albero possono essere semplice testo o qualsiasi altra cosa che Rich può visualizzare. Esegui il seguente comando per una dimostrazione:\n\n```shell\npython -m rich.tree\n```\n\nQuesto produrrà il seguente output:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)\n\nVedi l'esempio [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) per uno script che mostra una vista ad albero di ogni directory, simile a quella del comando linux `tree`.\n\n</details>\n\n<details>\n<summary>Colonne</summary>\n\nRich può visualizzare contenuti in [colonne](https://rich.readthedocs.io/en/latest/columns.html) ordinate con larghezza uguale o ottimale. Ecco qui un clone base del comando (MacOS / Linux) `ls` che mostra il contenuto di una directory in colonna:\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\nIl seguente screenshot è l'output dell'[esempio di columns](https://github.com/textualize/rich/blob/master/examples/columns.py) che visualizza i dati ottenuti da un API in colonna:\n\n![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)\n\n</details>\n\n<details>\n<summary>Markdown</summary>\n\nRich può visualizzare [markdown](https://rich.readthedocs.io/en/latest/markdown.html) e tradurlo in modo da visualizzarlo su terminale.\n\nPer visualizzare markdown importa la classe `Markdown` e instanziala con una stringa contenente codice markdown. Dopo stampala sulla console. Ad esempio:\n\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\nQuesto produrrà un output simile al seguente:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\n\n</details>\n\n<details>\n<summary>Evidenziazione della sintassi</summary>\n\nRich utilizza la libreria [pygments](https://pygments.org/) per implementare il [syntax highlighting](https://rich.readthedocs.io/en/latest/syntax.html). L'utilizzo è simile a quello per visualizzare markdown; instanzia un oggetto `Syntax` e stampalo sulla console. Ad esempio:\n\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Itera e genera una tupla con un flag per il primo e ultimo valore.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\nQuesto produrrà il seguente output:\n\n![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\n\n</details>\n\n<details>\n<summary>Tracebacks</summary>\n\nRich può visualizzare [gradevoli tracebacks](https://rich.readthedocs.io/en/latest/traceback.html) che sono più semplici da leggere e che mostrano più codice rispetto ai Python tracebacks. Puoi impostare Rich come il traceback handler di default, in questo modo tutte le eccezioni non gestiti saranno visualizzate da Rich.\n\nEcco come appare su OSX (simile a Linux):\n\n![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)\n\n</details>\n\nTutti i Rich renderables utilizzano [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html), che puoi utilizzare per implementare nuovi contenuti su Rich.\n\n# Rich per le aziende\n\nDisponibile come parte dell'iscrizione a Tidelift.\n\nLo sviluppatore di Rich e migliaia di altri packages lavorano con Tidelift per garantire supporto commerciale e mantenimento per i pacchetti open source che utilizzi per costruire le tue applicazioni. Risparmia tempo, riduci i rischi, e migliora la vita del codice, pagando i mantenitori dello stesso package che utilizzi. [Ulteriori informazioni.](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n# Progetti che usano Rich\n\nEcco alcuni progetti che utilizzano Rich:\n\n- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)\n  a python package for the visualization of three dimensional neuro-anatomical data\n- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)\n  Automated decryption tool\n- [emeryberger/scalene](https://github.com/emeryberger/scalene)\n  a high-performance, high-precision CPU and memory profiler for Python\n- [hedythedev/StarCli](https://github.com/hedythedev/starcli)\n  Browse GitHub trending projects from your command line\n- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)\n  This tool scans for a number of common, vulnerable components (openssl, libpng, libxml2, expat and a few others) to let you know if your system includes common libraries with known vulnerabilities.\n- [nf-core/tools](https://github.com/nf-core/tools)\n  Python package with helper tools for the nf-core community.\n- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)\n  pdb + Rich library for enhanced debugging\n- [plant99/felicette](https://github.com/plant99/felicette)\n  Satellite imagery for dummies.\n- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)\n  Automate & test 10x faster with Selenium & pytest. Batteries included.\n- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)\n  Automagically synchronize subtitles with video.\n- [tryolabs/norfair](https://github.com/tryolabs/norfair)\n  Lightweight Python library for adding real-time 2D object tracking to any detector.\n- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Ansible-lint checks playbooks for practices and behaviour that could potentially be improved\n- [ansible-community/molecule](https://github.com/ansible-community/molecule) Ansible Molecule testing framework\n- +[Many more](https://github.com/textualize/rich/network/dependents)!\n\n<!-- This is a test, no need to translate -->\n"
        },
        {
          "name": "README.ja.md",
          "type": "blob",
          "size": 20.1494140625,
          "content": "[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\n[![codecov](https://codecov.io/gh/Textualize/rich/branch/master/graph/badge.svg)](https://codecov.io/gh/Textualize/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\n\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\n • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\n • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\n • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)\n • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\n • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\n • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)\n • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\n • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)\n • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\n • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)\n • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\n • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)\n • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)\n  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)\n • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n\nRichは、 _リッチ_ なテキストや美しい書式設定をターミナルで行うためのPythonライブラリです。\n\n[Rich API](https://rich.readthedocs.io/en/latest/)を使用すると、ターミナルの出力に色やスタイルを簡単に追加することができます。 Richはきれいなテーブル、プログレスバー、マークダウン、シンタックスハイライトされたソースコード、トレースバックなどをすぐに生成・表示することもできます。\n\n![機能](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\nRichの紹介動画はこちらをご覧ください。 [calmcode.io](https://calmcode.io/rich/introduction.html) by [@fishnets88](https://twitter.com/fishnets88).\n\n[Richについての人々の感想を見る。](https://www.willmcgugan.com/blog/pages/post/rich-tweets/)\n\n## 互換性\n\nRichはLinux、OSX、Windowsに対応しています。True colorと絵文字は新しい Windows ターミナルで動作しますが、古いターミナルでは8色に制限されています。Richを使用するにはPythonのバージョンは3.6.3以降が必要です。\n\nRichは追加の設定を行わずとも、[Jupyter notebooks](https://jupyter.org/)で動作します。\n\n## インストール\n\n`pip` や、あなたのお気に入りのPyPIパッケージマネージャを使ってインストールしてください。\n\n```sh\npython -m pip install rich\n```\n\n以下のコマンドを実行して、ターミナルでリッチの出力をテストできます:\n\n```sh\npython -m rich\n```\n\n## Richのprint関数\n\n簡単にリッチな出力をアプリケーションに追加するには、Pythonの組み込み関数と同じ名前を持つ [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) メソッドをインポートすることで実現できます。こちらを試してみてください:\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## Rich REPL\n\nRichはPythonのREPLでインストールすることができ、データ構造がきれいに表示され、ハイライトされます。\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## Rich Inspect\n\nRichにはPythonオブジェクトやクラス、インスタンス、組み込み関数などに関するレポートを作成することができる、[inspect関数](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect)があります。\n\n```python\n>>> from rich import inspect\n>>> inspect(str, methods=True)\n```\n\n## Consoleの使い方\n\nリッチなターミナルコンテンツをより制御していくには、[Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) オブジェクトをインポートして構築していきます。\n\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nConsole オブジェクトには `print` メソッドがあり、これは組み込み関数の `print` と意図的に似たインターフェイスを持っています。\n以下に使用例を示します:\n\n```python\nconsole.print(\"Hello\", \"World!\")\n```\n\nあなたが予想した通り、これは `\"Hello World!\"` をターミナルに表示します。組み込み関数の `print` とは異なり、Rich はターミナルの幅に合わせてテキストをワードラップすることに注意してください。\n\n出力結果に色やスタイルを追加する方法はいくつかあります。キーワード引数に `style` を追加することで、出力結果全体のスタイルを設定することができます。以下に例を示します:\n\n```python\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\n以下のように出力されます:\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\n\nこの方法は一行のテキストを一度にスタイリングするのに適しています。\nより細かくスタイリングを行うために、Richは[bbcode](https://en.wikipedia.org/wiki/BBCode)に似た構文の特別なマークアップを表示することができます。\nこれはその例です:\n\n```python\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\n\n### Console logging\n\nConsoleオブジェクトには `log()` メソッドがあり、これは `print()` と同じインターフェイスを持ちますが、現在の時刻と呼び出しを行ったファイルと行数についてもカラムに表示します。デフォルトでは、RichはPythonの構造体とrepr文字列のシンタックスハイライトを行います。もしコレクション(例: dictやlist)をログに記録した場合、Richはそれを利用可能なスペースに収まるようにきれいに表示します。以下に、これらの機能のいくつかの例を示します。\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\n上の例では以下のような出力が得られます:\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)\n\n`log_locals`という引数についてですが、これは、logメソッドが呼び出されたローカル変数を含むテーブルを出力します。\n\nlogメソッドはサーバのような長時間稼働しているアプリケーションのターミナルへのloggingとして使用できますが、デバッグ時に非常に役に立つ手段でもあります。\n\n### Logging Handler\n\nまた、内蔵されている[Handler class](https://rich.readthedocs.io/en/latest/logging.html)を用いて、Pythonのloggingモジュールからの出力をフォーマットしたり、色付けしたりすることもできます。以下に出力の例を示します。\n\n![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)\n\n## 絵文字(Emoji)\n\nコンソールの出力に絵文字を挿入するには、2つのコロンの間に名前を入れます。例を示します:\n\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\nこの機能をうまく活用してみてください。\n\n## テーブル\n\nRichはユニコードの枠を用いて柔軟に[テーブル](https://rich.readthedocs.io/en/latest/tables.html)を表示することができます。 罫線、スタイル、セルの配置などの書式設定のためのオプションが豊富にあります。\n\n![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)\n\n上のアニメーションは、examplesディレクトリの[table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py)で生成したものです。\n\nもう少し簡単な表の例を示します:\n\n```python\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\nこれにより、以下のような出力が得られます:\n\n![table](https://github.com/textualize/rich/raw/master/imgs/table.png)\n\nコンソール上でのマークアップは`print()` や `log()` と同じように表示されることに注意してください。実際には、Rich が表示可能なものはすべてヘッダや行に含めることができます (それが他のテーブルであっても、です)。\n\n`Table`クラスは、ターミナルの利用可能な幅に合わせてカラムのサイズを変更したり、必要に応じてテキストを折り返したりするのに十分なスマートさを持っています。\nこれは先ほどと同じ例で、ターミナルを上のテーブルよりも小さくしたものです。\n\n![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\n\n## プログレスバー\n\nRichでは複数のちらつきのないの[プログレスバー](https://rich.readthedocs.io/en/latest/progress.html)を表示して、長時間のタスクを追跡することができます。\n\n基本的な使い方としては、任意のシーケンスを `track` 関数でラップし、その結果を繰り返し処理します。以下に例を示します:\n\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\n複数のプログレスバーを追加するのはそれほど大変ではありません。以下はドキュメントから抜粋した例です:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\nカラムには任意の詳細を表示するように設定することができます。組み込まれているカラムには、完了率、ファイルサイズ、ファイル速度、残り時間が含まれています。ここでは、進行中のダウンロードを表示する別の例を示します:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\n\nこちらを自分で試して見るには、進捗状況を表示しながら複数のURLを同時にダウンロードできる [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) を参照してみてください。\n\n## ステータス\n\n進捗状況を計算するのが難しい場合は、[status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status)メソッドを使用して、「スピナー」アニメーションとメッセージを表示させることができます。通常、アニメーションはコンソールの使用を妨げることはありません。ここに例を示します:\n\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\nこれにより、ターミナルには以下のような出力が生成されます。\n\n![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\n\nスピナーのアニメーションは [cli-spinners](https://www.npmjs.com/package/cli-spinners) から拝借しました。`spinner`パラメータを指定することでスピナーを選択することができます。以下のコマンドを実行して、利用可能な値を確認してください:\n\n```\npython -m rich.spinner\n```\n\n上記コマンドは、ターミナルで以下のような出力を生成します:\n\n![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\n\n## ツリー\n\nRichはガイドライン付きの[ツリー](https://rich.readthedocs.io/en/latest/tree.html)を表示することができます。ツリーはファイル構造などの階層データを表示するのに適しています。\n\nツリーのラベルは、シンプルなテキストや、Richが表示できるものであれば何でも表示することができます。以下を実行してデモを行います:\n\n```\npython -m rich.tree\n```\n\nこれにより、次のような出力が生成されます:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)\n\nlinuxの `tree` コマンドと同様に、任意のディレクトリのツリー表示を行うスクリプトについては、[tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py)の例を参照してください。\n\n## カラム\n\nRich は、コンテンツをきれいな [カラム](https://rich.readthedocs.io/en/latest/columns.html) で等幅、または最適な幅で表示することができます。これは(MacOS / Linux) の `ls` コマンドのとても基本的なクローンで、ディレクトリ一覧をカラムで表示します。\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\n以下のスクリーンショットは、APIから引っ張ってきたデータをカラムで表示する[columns example](https://github.com/textualize/rich/blob/master/examples/columns.py)による出力です:\n\n![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)\n\n## マークダウン\n\nRichは[マークダウン](https://rich.readthedocs.io/en/latest/markdown.html)を使用することができ、フォーマットをターミナル向けに変換するための良い仕事をしてくれます。\n\nマークダウンを使用するには、`Markdown`クラスをインポートし、マークダウンコードを含む文字列で構成します。そしてそれをコンソールに表示します。これは例です:\n\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\nこれにより、以下のような出力が得られます:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\n\n## シンタックスハイライト\n\nRichは [シンタックスハイライト](https://rich.readthedocs.io/en/latest/syntax.html) を実装するために [pygments](https://pygments.org/) ライブラリを使用しています。使い方はマークダウンを使用するのと似ています。 `Syntax` オブジェクトを構築してコンソールに表示します。以下にその例を示します:\n\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\nこれにより、以下のような出力が得られます:\n\n![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\n\n## トレースバック\n\nRich は [美しいトレースバック](https://rich.readthedocs.io/en/latest/traceback.html) を表示することができ、通常のPythonのトレースバックよりも読みやすく、より多くのコードを表示することができます。Richをデフォルトのトレースバックハンドラとして設定することで、捕捉されなかった例外はすべてRichによって表示されるようになります。\n\nOSXではこのような表示となります（Linuxでも似たような表示になります）:\n\n![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)\n\n## Richを使用したプロジェクト\n\nここでは、Richを使用したいくつかのプロジェクトを紹介します:\n\n- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)\n  3次元の神経解剖学的データを可視化するpythonパッケージ\n- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)\n  自動化された復号化ツール\n- [emeryberger/scalene](https://github.com/emeryberger/scalene)\n  Python用の高性能・高精度 CPU/メモリプロファイラ\n- [hedythedev/StarCli](https://github.com/hedythedev/starcli)\n  コマンドラインから GitHub のトレンドプロジェクトを閲覧できます\n- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)\n  このツールは、一般的な脆弱性のあるコンポーネント(openssl, libpng, libxml2, expat, その他いくつか)をスキャンし、お使いのシステムに既知の脆弱性のある一般的なライブラリが含まれているかどうかを知らせてくれます。\n- [nf-core/tools](https://github.com/nf-core/tools)\n  nf-core コミュニティのためのヘルパーツールを含む Python パッケージ。\n- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)\n  pdb + Richライブラリによる、強化されたデバッグツール。\n- [plant99/felicette](https://github.com/plant99/felicette)\n  ダミーのための衛星画像。\n- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)\n  Seleniumとpytestで10倍速の自動化とテスト。バッテリーも含まれています。\n- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)\n  字幕を自動的にビデオと同期させます。\n- [tryolabs/norfair](https://github.com/tryolabs/norfair)\n  あらゆる検出器にリアルタイムの2Dオブジェクトトラッキングを追加するための軽量なPythonライブラリ。\n- [ansible/ansible-lint](https://github.com/ansible/ansible-lint)\n  Ansible-lint がplaybooksをチェックして、改善できる可能性のあるプラクティスや動作を確認します。\n- [ansible-community/molecule](https://github.com/ansible-community/molecule)\n  Ansible Moleculeのテストフレームワーク\n- +[Many more](https://github.com/textualize/rich/network/dependents)!\n"
        },
        {
          "name": "README.kr.md",
          "type": "blob",
          "size": 20.291015625,
          "content": "[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\n[![codecov](https://codecov.io/gh/Textualize/rich/branch/master/graph/badge.svg)](https://codecov.io/gh/Textualize/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\n\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\n • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\n • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\n • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)\n • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\n • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\n • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)\n • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\n • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)\n • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\n • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)\n • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\n • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)\n • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)\n  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)\n • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n\nRich는 터미널에서 _풍부한(rich)_ 텍스트와 아름다운 서식을 지원하기 위한 파이썬 라이브러리입니다.\n\n[Rich API](https://rich.readthedocs.io/en/latest/)는 터미널 출력에 색깔과 스타일을 입히기 쉽게 도와줍니다. 또한 Rich는 별다른 설정 없이 표, 진행 바, 마크다운, 소스코드 구문 강조, tracebacks 등을 예쁘게 보여줄 수 있습니다.\n\n![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\nRich에 대한 동영상 설명을 보시려면 [@fishnets88](https://twitter.com/fishnets88)의 [calmcode.io](https://calmcode.io/rich/introduction.html)를 확인 바랍니다.\n\n[사람들의 Rich에 대한 의견](https://www.willmcgugan.com/blog/pages/post/rich-tweets/)을 확인해보세요.\n\n## 호환성\n\nRich는 리눅스, OSX, 윈도우에서 동작합니다. 트루 컬러 / 이모지는 새로운 윈도우 터미널에서 동작하지만 구형 터미널에서는 16가지 색으로 제한됩니다. Rich는 파이썬 3.6.3 버전 혹은 그 이후 버전이 필요합니다.\n\nRich는 [Jupyter notebooks](https://jupyter.org/)에서 별도의 설정없이 바로 동작합니다.\n\n## 설치\n\n`pip` 또는 좋아하는 PyPI 패키지 매니저로 설치하세요.\n\n```sh\npython -m pip install rich\n```\n\n아래 명령어를 통해 터미널에서 Rich 출력을 테스트해보세요.\n\n```sh\npython -m rich\n```\n\n## Rich Print\n\n간단하게 당신의 어플리케이션에 rich한 출력을 추가하려면, 파이썬 내장 함수와 signature가 같은 [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) 메서드를 import 할 수 있습니다.\n따라해보세요:\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## Rich REPL\n\nRich는 파이썬 REPL에도 설치할 수 있습니다. 어떤 데이터 구조라도 예쁘게 출력하거나 강조할 수 있습니다.\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## 콘솔 사용하기\n\nrich 터미널을 더욱 잘 활용하려면, import 한 뒤 [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) 객체를 생성해주세요.\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\n콘솔 객체에는 `print` 메서드가 있는데, 내부적으로 내장 `print` 함수와 유사한 인터페이스를 가지고 있습니다. 아래는 예제입니다:\n\n```python\nconsole.print(\"Hello\", \"World!\")\n```\n\n예상대로 `\"Hello World!\"`이 터미널에 출력될 것입니다. 내장 `print` 함수와 달리, Rich는 터미널 폭에 맞춰 자동 줄바꿈(word-wrap)을 적용하는 것에 유의하세요.\n\n출력에 색깔과 스타일을 입히는 방법은 몇가지가 있습니다. `style` 키워드 전달인자를 추가해 전체 출력에 대해 스타일을 변경할 수 있습니다. 예제는 다음과 같습니다:\n\n```python\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\n다음과 같이 출력됩니다:\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\n\n텍스트 한 줄을 한 번에 수정하는 것도 좋습니다. 더욱 세세하게 스타일을 변경하기 위해, Rich는 [bbcode](https://en.wikipedia.org/wiki/BBCode)와 구문이 비슷한 별도의 마크업을 렌더링 할 수 있습니다. 예제는 다음과 같습니다.\n\n```python\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\n\nConsole 객체를 활용해 적은 노력으로 복잡한 출력을 손쉽게 만들 수 있습니다. 자세한 내용은 [Console API](https://rich.readthedocs.io/en/latest/console.html) 문서를 확인해주세요.\n\n## Rich Inspect\n\nRich는 class나 instance, builtin 같은 파이썬 객체의 레포트를 생성하는 [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) 함수를 포함합니다\n\n```python\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)\n\n자세한 내용은 [inspect docs](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) 문서를 확인해주세요.\n\n# Rich Library\n\nRich는 CLI에서 우아하게 출력하거나 코드 디버깅을 돕도록 다양한 빌트인 _렌더링을_ 포함하고 있습니다.\n\n자세한 내용을 확인하려면 제목을 눌러주세요:\n\n<details>\n<summary>Log</summary>\n\nConsole 객체는 `print()`와 인터페이스가 유사한 `log()` 메서드를 가지고 있습니다. `Log()`는 호출이 이루어진 파일과 라인, 현재 시간도 같이 출력합니다. 기본적으로 Rich는 파이썬 구조체와 repr string에 대해 신택스 하이라이팅을 지원합니다. 만약 당신이 collection(예를 들어 dict나 list)을 로깅한다면, Rich는 표현 가능한 공간에 맞춰 예쁘게 출력해줍니다. 이러한 기능들에 대한 예시입니다:\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\n위 코드의 실행 결과는 다음과 같습니다:\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)\n\n`log_locals` 인자를 사용하면 log 메서드가 호출된 곳의 로컬 변수들을 표로 보여준다는 것도 알아두세요.\n\n로그 메서드는 서버처럼 오랫동안 실행되는 어플리케이션을 터미널로 로깅할때 사용할 수 있지만 디버깅 할 때도 매우 좋습니다.\n\n</details>\n<details>\n<summary>Logging Handler</summary>\n\n또한 내장된 [Handler class](https://rich.readthedocs.io/en/latest/logging.html)를 사용해 파이썬의 로깅 모듈의 출력을 형태를 꾸미거나 색을 입힐 수 있습니다. 다음은 예제입니다:\n\n![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)\n\n</details>\n\n<details>\n<summary>Emoji(이모지)</summary>\n\n콘솔 출력에 이모지를 넣으려면 두 콜론(:) 사이에 이모지 이름을 넣어주세요. 다음은 예제입니다:\n\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\n부디 이 기능을 잘 사용해주세요.\n\n</details>\n\n<details>\n<summary>Tables(표)</summary>\n\nRich는 유니코드 박스 문자와 함께 [표](https://rich.readthedocs.io/en/latest/tables.html)를 자유롭게 렌더링할 수 있습니다. 가장자리, 스타일, 셀 정렬 등을 정말 다양하게 구성할 수 있습니다.\n\n![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)\n\n위의 애니메이션은 example 디렉토리의 [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py)로 생성되었습니다.\n\n더 간단한 표 예제입니다:\n\n```python\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\n이는 다음과 같이 출력됩니다:\n\n![table](https://github.com/textualize/rich/raw/master/imgs/table.png)\n\n콘솔 출력은 `print()`나 `log()`와 같은 방식으로 렌더링 된다는 것을 주의하세요. 사실, Rich로 표현할 수 있는 것은 무엇이든 headers / rows (심지어 다른 표들도)에 포함할 수 있습니다.\n\n`Table` 클래스는 터미널의 폭에 맞춰 필요한 만큼 줄을 내리고 열 길이를 스스로 조절합니다. 위의 표보다 작은 터미널에서 만들어진 표 예시입니다:\n\n![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\n\n</details>\n\n<details>\n<summary>Progress Bars(진행 바)</summary>\n\nRich는 오래 걸리는 작업들을 위해 깜빡임 없는 [진행](https://rich.readthedocs.io/en/latest/progress.html) 바를 여러개 표현할 수 있습니다.\n\n기본적인 사용을 위해선 아무 sequence나 `track` 함수로 감싸고 결과를 반복해주세요. 다음은 예제입니다:\n\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\n여러개의 진행 바를 추가하는 것도 어렵지 않습니다. 아래는 공식문서에서 따온 예시입니다:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\n칼럼들은 수정해 원하는 세부정보를 보여줄 수도 있습니다. 기본으로 내장된 칼럼들은 완료 퍼센티지, 파일 크기, 파일 속도, 남은 시간입니다. 다운로드 진행을 보여주는 다른 예제입니다:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\n\n직접 해보시려면, 진행 바와 함께 여러개의 URL들을 동시에 다운로드 받는 예제인 [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py)를 확인해주세요.\n\n</details>\n\n<details>\n<summary>Status(상태)</summary>\n\n진행 상황을 계산하기 어려운 경우, [상태](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) 메서드를 사용할 수 있습니다. 이 메서드는 '스피너' 애니메이션과 메세지를 표시합니다. 애니메이션은 당신이 콘솔을 정상적으로 사용하는 것을 막지 못합니다. 다음은 예제입니다:\n\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\n이 예제는 터미널에 아래와 같이 출력합니다.\n\n![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\n\n스피너 애니메이션은 [cli-spinners](https://www.npmjs.com/package/cli-spinners)에서 빌려왔습니다. `spinner` 파라미터를 선택해서 특정 스피너를 선택할 수도 있습니다. 어떤 값을 선택할 수 있는지는 아래 명령어를 통해 확인할 수 있습니다:\n\n```\npython -m rich.spinner\n```\n\n위의 명령어를 입력하면 아래와 같은 출력됩니다:\n\n![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\n\n</details>\n\n<details>\n<summary>Tree(트리)</summary>\n\nRich는 가이드라인과 함께 [트리](https://rich.readthedocs.io/en/latest/tree.html)를 표현할 수 있습니다. 파일 구조나, 계층적 데이터를 보여주는데 적합합니다.\n\n트리의 라벨은 간단한 텍스트나 Rich로 표현할 수 있는 것은 모든지 가능합니다. 아래의 예시를 따라해보세요:\n\n```\npython -m rich.tree\n```\n\n이는 아래와 같이 출력됩니다:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)\n\n리눅스의 `tree` 명령어처럼 아무 디렉토리의 트리를 보여주는 스크립트 예제를 보시려면 [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py)를 확인해주세요.\n\n</details>\n\n<details>\n<summary>Columns(칼럼)</summary>\n\nRich는 내용을 같거나 적절한 폭으로 깔끔하게 [칼럼](https://rich.readthedocs.io/en/latest/columns.html)을 표현할 수 있습니다. 아래 예제는 종렬로 디렉토리 리스트를 보여주는 (MacOS / Linux)의 `ls` 명령어의 기본적인 클론입니다:\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\n아래 스크린샷은 API에서 뽑은 데이터를 종렬로 표현하는 [칼럼 예제](https://github.com/textualize/rich/blob/master/examples/columns.py)의 출력 결과입니다:\n\n![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)\n\n</details>\n\n<details>\n<summary>Markdown(마크다운)</summary>\n\nRich는 [마크다운](https://rich.readthedocs.io/en/latest/markdown.html)을 표현하거나 형태를 터미널에 맞추어 적절히 변환할 수 있습니다.\n\n마크다운을 표현하기 위해서는 `Markdown` 클래스를 import하고 마크다운을 포함하고 있는 문자열을 통해 객체를 생성해주세요. 다음은 예제입니다:\n\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\n위 코드는 아래와 같은 출력 결과를 만들 것입니다:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\n\n</details>\n\n<details>\n<summary>Syntax Highlighting(구문 강조)</summary>\n\nRich는 [구문 강조](https://rich.readthedocs.io/en/latest/syntax.html) 기능을 수행하기 위해 [pygments](https://pygments.org/) 라이브러리를 사용합니다. 사용법은 마크다운과 유사합니다. `Syntax` 객체를 생성하고 콘솔에 출력하세요. 예제는 다음과 같습니다:\n\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\n위 코드는 아래와 같은 출력 결과를 만들 것입니다:\n\n![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\n\n</details>\n\n<details>\n<summary>Tracebacks</summary>\n\nRich는 [예쁜 tracebacks](https://rich.readthedocs.io/en/latest/traceback.html)을 표현할 수 있습니다. 이것은 읽기도 더 쉽고 일반적인 파이썬 tracebacks 보다 더 많은 코드를 보여줍니다. uncaught exceptions가 Rich로 출력되도록 Rich를 기본 Traceback 핸들러로 설정할 수도 있습니다.\n\nOSX에서는 이렇게 출력됩니다 (리눅스도 유사함):\n\n![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)\n\n</details>\n\n모든 Rich로 표현 가능한 것들은 [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html)를 사용합니다. 이것을 사용해서 자신의 Rich 컨텐츠를 렌더링할 수도 있습니다.\n\n# 엔터프라이즈를 위한 Rich\n\nTidelift 구독의 일환으로 가능합니다.\n\nRich를 포함한 수천가지 다른 패키지들의 메인테이너들은 당신이 앱을 만들기 위해 사용하는 오픈소스 패키지의 상업적인 지원과 유지보수를 위해 Tidelift와 함께 일하고 있습니다. 당신이 사용하는 패키지의 메인테이너에게 비용을 지불하는 대신 시간을 절약하고, 리스크를 줄이고, 코드의 품질을 향상시킬 수 있습니다. [더 자세한 정보는 여기를 참고바랍니다.](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n# Rich를 사용하는 프로젝트들\n\nRich를 사용하는 몇가지 프로젝트들입니다:\n\n- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)\n  신경해부학 데이터의 3차원 시각화를 위한 파이썬 패키지\n- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)\n  자동 암호해독 툴\n- [emeryberger/scalene](https://github.com/emeryberger/scalene)\n  파이썬을 위한 고성능, 높은 정밀도의 CPU / Memory 프로파일러\n- [hedythedev/StarCli](https://github.com/hedythedev/starcli)\n  당신의 커맨드라인에서 GitHub 트렌딩 프로젝트들을 검색해보세요\n- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)\n  이 툴은 여러 공통적이고 취약한 컴포넨트들(openssl, libpng, libxml2, expat 과 몇가지 더)을 스캔해, 이미 알려진 취약점을 가진 일반 라이브러리가 당신의 시스템에 있는지 알려줍니다.\n- [nf-core/tools](https://github.com/nf-core/tools)\n  nf-core 커뮤니티를 위한 도우미 도구를 포함한 파이썬 패키지.\n- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)\n  개선된 디버깅을 위한 pdb + Rich 라이브러리\n- [plant99/felicette](https://github.com/plant99/felicette)\n  더미 위성 이미지\n- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)\n  Selenium & pytest로 10배 더 빠르게 자동화 & 테스트하세요. 배터리도 포함되어 있습니다.\n- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)\n  자동으로 자막과 영상의 싱크를 맞추세요.\n- [tryolabs/norfair](https://github.com/tryolabs/norfair)\n  모든 탐지된 것에 실시간으로 2D 오브젝트 트래킹을 추가하는 경량화된 파이썬 라이브러리.\n- [ansible/ansible-lint](https://github.com/ansible/ansible-lint)\n  Ansible-lint가 playbooks를 확인해 잠재적으로 개선될 수 있는 practices나 동작을 확인합니다.\n- [ansible-community/molecule](https://github.com/ansible-community/molecule)\n  Ansible Molecule의 테스트 프레임워크\n- +[Many more](https://github.com/textualize/rich/network/dependents)!\n\n<!-- This is a test, no need to translate -->\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.4970703125,
          "content": "[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich/13.2.0)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\n\n[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\n\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\n • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\n • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\n • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)\n • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\n • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\n • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)\n • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\n • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)\n • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\n • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)\n • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\n • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)\n • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)\n • [Indonesian readme](https://github.com/textualize/rich/blob/master/README.id.md)\n • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)\n • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n\n\nRich is a Python library for _rich_ text and beautiful formatting in the terminal.\n\nThe [Rich API](https://rich.readthedocs.io/en/latest/) makes it easy to add color and style to terminal output. Rich can also render pretty tables, progress bars, markdown, syntax highlighted source code, tracebacks, and more — out of the box.\n\n![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\nFor a video introduction to Rich see [calmcode.io](https://calmcode.io/rich/introduction.html) by [@fishnets88](https://twitter.com/fishnets88).\n\nSee what [people are saying about Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).\n\n## Compatibility\n\nRich works with Linux, macOS and Windows. True color / emoji works with new Windows Terminal, classic terminal is limited to 16 colors. Rich requires Python 3.8 or later.\n\nRich works with [Jupyter notebooks](https://jupyter.org/) with no additional configuration required.\n\n## Installing\n\nInstall with `pip` or your favorite PyPI package manager.\n\n```sh\npython -m pip install rich\n```\n\nRun the following to test Rich output on your terminal:\n\n```sh\npython -m rich\n```\n\n## Rich Print\n\nTo effortlessly add rich output to your application, you can import the [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) method, which has the same signature as the builtin Python function. Try this:\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## Rich REPL\n\nRich can be installed in the Python REPL, so that any data structures will be pretty printed and highlighted.\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## Using the Console\n\nFor more control over rich terminal content, import and construct a [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) object.\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nThe Console object has a `print` method which has an intentionally similar interface to the builtin `print` function. Here's an example of use:\n\n```python\nconsole.print(\"Hello\", \"World!\")\n```\n\nAs you might expect, this will print `\"Hello World!\"` to the terminal. Note that unlike the builtin `print` function, Rich will word-wrap your text to fit within the terminal width.\n\nThere are a few ways of adding color and style to your output. You can set a style for the entire output by adding a `style` keyword argument. Here's an example:\n\n```python\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\nThe output will be something like the following:\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\n\nThat's fine for styling a line of text at a time. For more finely grained styling, Rich renders a special markup which is similar in syntax to [bbcode](https://en.wikipedia.org/wiki/BBCode). Here's an example:\n\n```python\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\n\nYou can use a Console object to generate sophisticated output with minimal effort. See the [Console API](https://rich.readthedocs.io/en/latest/console.html) docs for details.\n\n## Rich Inspect\n\nRich has an [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) function which can produce a report on any Python object, such as class, instance, or builtin.\n\n```python\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)\n\nSee the [inspect docs](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) for details.\n\n# Rich Library\n\nRich contains a number of builtin _renderables_ you can use to create elegant output in your CLI and help you debug your code.\n\nClick the following headings for details:\n\n<details>\n<summary>Log</summary>\n\nThe Console object has a `log()` method which has a similar interface to `print()`, but also renders a column for the current time and the file and line which made the call. By default Rich will do syntax highlighting for Python structures and for repr strings. If you log a collection (i.e. a dict or a list) Rich will pretty print it so that it fits in the available space. Here's an example of some of these features.\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\nThe above produces the following output:\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)\n\nNote the `log_locals` argument, which outputs a table containing the local variables where the log method was called.\n\nThe log method could be used for logging to the terminal for long running applications such as servers, but is also a very nice debugging aid.\n\n</details>\n<details>\n<summary>Logging Handler</summary>\n\nYou can also use the builtin [Handler class](https://rich.readthedocs.io/en/latest/logging.html) to format and colorize output from Python's logging module. Here's an example of the output:\n\n![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)\n\n</details>\n\n<details>\n<summary>Emoji</summary>\n\nTo insert an emoji in to console output place the name between two colons. Here's an example:\n\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\nPlease use this feature wisely.\n\n</details>\n\n<details>\n<summary>Tables</summary>\n\nRich can render flexible [tables](https://rich.readthedocs.io/en/latest/tables.html) with unicode box characters. There is a large variety of formatting options for borders, styles, cell alignment etc.\n\n![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)\n\nThe animation above was generated with [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) in the examples directory.\n\nHere's a simpler table example:\n\n```python\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\nThis produces the following output:\n\n![table](https://github.com/textualize/rich/raw/master/imgs/table.png)\n\nNote that console markup is rendered in the same way as `print()` and `log()`. In fact, anything that is renderable by Rich may be included in the headers / rows (even other tables).\n\nThe `Table` class is smart enough to resize columns to fit the available width of the terminal, wrapping text as required. Here's the same example, with the terminal made smaller than the table above:\n\n![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\n\n</details>\n\n<details>\n<summary>Progress Bars</summary>\n\nRich can render multiple flicker-free [progress](https://rich.readthedocs.io/en/latest/progress.html) bars to track long-running tasks.\n\nFor basic usage, wrap any sequence in the `track` function and iterate over the result. Here's an example:\n\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\nIt's not much harder to add multiple progress bars. Here's an example taken from the docs:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\nThe columns may be configured to show any details you want. Built-in columns include percentage complete, file size, file speed, and time remaining. Here's another example showing a download in progress:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\n\nTo try this out yourself, see [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) which can download multiple URLs simultaneously while displaying progress.\n\n</details>\n\n<details>\n<summary>Status</summary>\n\nFor situations where it is hard to calculate progress, you can use the [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) method which will display a 'spinner' animation and message. The animation won't prevent you from using the console as normal. Here's an example:\n\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\nThis generates the following output in the terminal.\n\n![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\n\nThe spinner animations were borrowed from [cli-spinners](https://www.npmjs.com/package/cli-spinners). You can select a spinner by specifying the `spinner` parameter. Run the following command to see the available values:\n\n```\npython -m rich.spinner\n```\n\nThe above command generates the following output in the terminal:\n\n![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\n\n</details>\n\n<details>\n<summary>Tree</summary>\n\nRich can render a [tree](https://rich.readthedocs.io/en/latest/tree.html) with guide lines. A tree is ideal for displaying a file structure, or any other hierarchical data.\n\nThe labels of the tree can be simple text or anything else Rich can render. Run the following for a demonstration:\n\n```\npython -m rich.tree\n```\n\nThis generates the following output:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)\n\nSee the [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) example for a script that displays a tree view of any directory, similar to the linux `tree` command.\n\n</details>\n\n<details>\n<summary>Columns</summary>\n\nRich can render content in neat [columns](https://rich.readthedocs.io/en/latest/columns.html) with equal or optimal width. Here's a very basic clone of the (MacOS / Linux) `ls` command which displays a directory listing in columns:\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\nThe following screenshot is the output from the [columns example](https://github.com/textualize/rich/blob/master/examples/columns.py) which displays data pulled from an API in columns:\n\n![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)\n\n</details>\n\n<details>\n<summary>Markdown</summary>\n\nRich can render [markdown](https://rich.readthedocs.io/en/latest/markdown.html) and does a reasonable job of translating the formatting to the terminal.\n\nTo render markdown import the `Markdown` class and construct it with a string containing markdown code. Then print it to the console. Here's an example:\n\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\nThis will produce output something like the following:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\n\n</details>\n\n<details>\n<summary>Syntax Highlighting</summary>\n\nRich uses the [pygments](https://pygments.org/) library to implement [syntax highlighting](https://rich.readthedocs.io/en/latest/syntax.html). Usage is similar to rendering markdown; construct a `Syntax` object and print it to the console. Here's an example:\n\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\nThis will produce the following output:\n\n![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\n\n</details>\n\n<details>\n<summary>Tracebacks</summary>\n\nRich can render [beautiful tracebacks](https://rich.readthedocs.io/en/latest/traceback.html) which are easier to read and show more code than standard Python tracebacks. You can set Rich as the default traceback handler so all uncaught exceptions will be rendered by Rich.\n\nHere's what it looks like on OSX (similar on Linux):\n\n![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)\n\n</details>\n\nAll Rich renderables make use of the [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html), which you can also use to implement your own Rich content.\n\n# Rich CLI\n\n\nSee also [Rich CLI](https://github.com/textualize/rich-cli) for a command line application powered by Rich. Syntax highlight code, render markdown, display CSVs in tables, and more, directly from the command prompt.\n\n\n![Rich CLI](https://raw.githubusercontent.com/Textualize/rich-cli/main/imgs/rich-cli-splash.jpg)\n\n# Textual\n\nSee also Rich's sister project, [Textual](https://github.com/Textualize/textual), which you can use to build sophisticated User Interfaces in the terminal.\n\n![Textual screenshot](https://raw.githubusercontent.com/Textualize/textual/main/imgs/textual.png)\n"
        },
        {
          "name": "README.pl.md",
          "type": "blob",
          "size": 16.333984375,
          "content": "[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich/13.2.0)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\n\n[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\n\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\n • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\n • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\n • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)\n • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\n • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\n • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)\n • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\n • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)\n • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\n • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)\n • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\n • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)\n • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)\n • [Indonesian readme](https://github.com/textualize/rich/blob/master/README.id.md)\n • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)\n • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n\n\nRich to bilbioteka Pythona dla tekstów _rich_ i pięknego formatowania w terminalu.\n\n[Rich API](https://rich.readthedocs.io/en/latest/) sprawia, że dodanie kolorów i stylów do wyjścia terminala jest proste. Rich może również wyświetlać ładne tabele, paski postępu, markdown, podświetlenie składni kodu źródłowego, ślady wsteczne (tracebacki), i jeszcze więcej - od ręki.\n\n![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\nWprowadzenie wideo do Richa na [calmcode.io](https://calmcode.io/rich/introduction.html) stworzonym przez [@fishnets88](https://twitter.com/fishnets88).\n\nZobacz co [inni mówią o Richu](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).\n\n## Kompatybilność\n\nRich działa na systemach operacyjnych Linux, OSX i Windows. True color / emoji współgra z nowym Terminalem Windows, klasyczny terminal jest ograniczony do 16 kolorów. Rich wymaga Pythona 3.7 lub nowszego.\n\nRich działa z [notatnikami Jupyter](https://jupyter.org) bez potrzeby dodatkowej konfiguracji.\n\n## Instalacja\n\nZainstaluj z użyciem `pip` lub twojego ulubionego menedżera pakietów PyPI.\n\n```sh\npython -m pip install rich\n```\n\nUruchom komendę poniżej aby przetestować wyjście Rich na twoim terminalu:\n\n```sh\npython -m rich\n```\n\n## Rich Print\n\nBy bezproblemowo dodać wyjście rich do twojej aplikacji, możesz zaimportować metodę [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start), która ma tą samą sygnaturę jak wbudowana funkcja Pythona. Wypróbuj:\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## Rich REPL\n\nRich może zostać zainstalowany w REPL, żeby wszystkie struktury danych były ładnie wypisane i podświetlone.\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## Używanie konsoli\n\nDla większej kontroli nad bogatą zawartością terminala, zaimportuj i skonstruuj objekt [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console).\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nObjekt Console ma metodę `print`, mającą celowo podobny interfejs do wbudowanej funkcji `print`. Tu jest przykład użycia:\n\n```python\nconsole.print(\"Hello\", \"World!\")\n```\n\nJak można się spodziewać wyświetli to `\"Hello World!\"` do terminala. Warto zauważyć, że Rich automatycznie zawija tekst, aby mieścił się on w szerokości terminala.\n\nJest kilka możliwości dodania koloru i stylu do wyjścia terminala. Możesz ustawić styl dla całego wyjścia, dodając argument `style`. Na przykład:\n\n```python\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\nWyjście będzie wyglądało tak:\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\n\nJest to w porządku dla stylizacji jednej linijki tekstu. Dla dokładniejszej stylizacj, Rich wyświetla specjalny format markup podobny w składni do [bbcode](https://en.wikipedia.org/wiki/BBCode). Przykład poniżej:\n\n```python\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\n\nMożesz użyć objektu Console, aby wygenerować skomplikowane wyjście bez problemu. Więcej informacji odnośnie Console API w [dokumentacji](https://rich.readthedocs.io/en/latest/console.html).\n\n## Rich Inspect\n\nRich ma funkcję [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect), która może produkować raporty na jakimkolwiek objekcie Python, jak np. klasa, instancja, lub wbudowana funkcja.\n\n```python\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)\n\nWięcej informacji na temat funkcji inspect w [dokumentacji](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect).\n\n## Biblioteka Rich\n\nRich zawiera wiele wbudowanych _renderables_, które możesz użyć do stworzenia eleganckiego wyjścia w twoim CLI i pomóc ci w debugowaniu twojego kodu.\n\nKliknij poniższe nagłówki, żeby poznać detale:\n\n<details>\n<summary>Log</summary>\n\nObjekt Console ma metodę `log()`, mającą podobny interfejs do `print()`, ale wyświetla również kolumnę zawierającą aktualny czas oraz plik i linijkę, która wywołała powyższą metodę. Domyślnie Rich podświetla składnię dla struktur Pythona i ciągów repr. Jeśli zlogujesz kolekcję (czyli listę `list` lub słownik `dict`), Rich ją ładnie wypisze tak, żeby zmieściła się w dostępnym miejscu. Poniżej znajduje się przykład tych funkcji.\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\nPowyższy kod wyświetla poniższy tekst:\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)\n\nIstnieje argument `log_locals`, który wyświetla tabelę zawierającą zmienne lokalne z kąd wywołano metodę  log.\n\nMetoda log może być używana do logowania do terminala dla długo działających aplikacji takich jak serwery, ale jest również bardzo dobrą pomocą w debugowaniu.\n\n</details>\n<details>\n<summary>Handler Logów</summary>\n\nMożesz także użyć wbudowanej [klasy Handler](https://rich.readthedocs.io/en/latest/logging.html), aby zformatować i pokolorować wyjście z modułu logging Pythona. Przykład poniżej:\n\n![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)\n\n</details>\n\n<details>\n<summary>Emoji</summary>\n\nŻeby wstawić emoji do wyjścia konsoli, umieść jego nazwę pomiędzy dwoma dwukropkami, na przykład:\n\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\nKorzystaj z tej funkcji rozsądnie.\n\n</details>\n\n<details>\n<summary>Tabele</summary>\n\nRich może wyświetlać elastyczne [tabele](https://rich.readthedocs.io/en/latest/tables.html) ze znakami unicode box. Istnieje duża różnorodność opcji formatowania, stylów, wyrównywania komórek itp.\n\n![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)\n\nPowyższa animacja została wygenerowana z [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) w folderze examples.\n\nPoniżej prostszy przykład:\n\n```python\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\nTen kod wyświetla poniższy tekst:\n\n![table](https://github.com/textualize/rich/raw/master/imgs/table.png)\n\nMarkup konsoli jest renderowany w ten sam sposób co `print()` i `log()`. Tak naprawdę wszystko co może być wyświetlone przez Richa może być zawarte w nagłówkach / wierszach (nawet inne tabele).\n\nKlasa `Table` jest na tyle mądra, że zmienia wielkość kolumn, aby zmieścić się w dostępnej szerokości terminala, zawijając tekst jeśli potrzeba. Poniżej ten sam przykład z mniejszą wielkością terminala:\n\n![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\n\n</details>\n\n<details>\n<summary>Paski Postępu</summary>\n\nRich może renderować wiele niemrugających pasków [postępu](https://rich.readthedocs.io/en/latest/progress.html), aby można było śledzić długo trwające zadania.\n\nDla podstawowego użycia, owiń jakąkolwiek sekwencję w funkcji `track` i iteruj nad wynikiem. Przykład poniżej:\n\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\nNie jest trudniejsze dodanie wielu pasków postępu. Poniżej przykład z dokumentacji:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\nKolumny mogą być skonfigurowane, tak aby wyświetlać jakiekolwiek detale chcesz. Wbudowane kolumny zawierają stopień ukończenia (w %), wielkość pliku, szybkość operacji i pozostały czas. Poniżej kolejny przykład pokazujący pobieranie w toku.\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\n\nMożesz wypróbować tę funkcję samemu, patrz [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py), który może pobierać wiele URLów jednocześnie, pokazując postęp.\n\n</details>\n\n<details>\n<summary>Status</summary>\n\nW sytuacjach, gdzie ciężko jest wyliczyć postęp, można użyć metody [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status), która wyświetli animację 'spinnera' i wiadomość. Animacja nie przeszkodzi ci w używaniu konsoli normalnie. Przykład poniżej:\n\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\nGeneruje to następującą linijkę.\n\n![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\n\nAnimacje spinnera zostały zapożyczone z [cli-spinners](https://www.npmjs.com/package/cli-spinners). Możesz wybrać spinnera określając parametr `spinner`. Wykonaj następującą komendę, aby zobaczyć dostępne wartości:\n\n```\npython -m rich.spinner\n```\n\nTo polecenie generuje następujący tekst:\n\n![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\\\n\n</details>\n\n<details>\n<summary>Tree</summary>\n\nRich może renderować drzewo - [tree](https://rich.readthedocs.io/en/latest/tree.html) zgodnie z wytycznymi. Drzewo jest idealne do wyświetlania struktury pliku, albo jakiekolwiek inne dane hierarchiczne.\n\nEtykiety drzewa mogą być prostym tekstem albo czymkolwiek innym, co może wyświetlić Rich. Wykonaj poniższe polecenie dla demonstracji:\n\n```\npython -m rich.tree\n```\n\nTo polecenie generuje następujący tekst:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)\n\nW pliku [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) znajduje się przykład skryptu wyświetlającego widok drzewa jakiegokolwiek folderu, podobnie do linuxowej komendy `tree`.\n\n</details>\n\n<details>\n<summary>Kolumny</summary>\n\nRich może wyświetlać zawartość w schludnych [kolumnach](https://rich.readthedocs.io/en/latest/columns.html) z równą, lub optymalną szerokością. Poniżej znajduje się bardzo podstawowy klon komendy (MacOSa / Linuxa) `ls`, która wyświetla zawartość folderu w kolumnach:\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\nPoniższy zrzut ekranu prezentuje wyjście [przykładu kolumn](https://github.com/textualize/rich/blob/master/examples/columns.py), wyświetlającego dane pobrane z API w kolumnach:\n\n![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)\n\n</details>\n\n<details>\n<summary>Markdown</summary>\n\nRich może renderować [markdown](https://rich.readthedocs.io/en/latest/markdown.html) i wykonuje niezłą pracę tłumaczenia formatowania do terminalu.\n\nAby wyrenderować markdown, zaimportuj klasę `Markdown` i skonstruuj z ciągiem zawierającym kod markdown. Potem wydrukuj ją do konsoli. Przykład poniżej:\n\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\nTen kod wyświetli tekst w stylu:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\n\n</details>\n\n<details>\n<summary>Podświetlanie kodu źródłowego</summary>\n\nRich używa biblioteki [pygments](https://pygments.org/), żeby zaimplementować [podświetlanie kodu źródłowego](https://rich.readthedocs.io/en/latest/syntax.html). Użycie jest podobne do renderowania markdownu; skonstruuj objekt `Syntax` i wydrukuj go do konsoli. Przykład poniżej:\n\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\nTen kod wyświetli:\n\n![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\n\n</details>\n\n<details>\n<summary>Tracebacki</summary>\n\nRich może renderować [piękne tracebacki](https://rich.readthedocs.io/en/latest/traceback.html), będące łatwiejsze do czytania i wyświetlają więcej kodu niż standardowe tracebacki Pythona. Można ustawić Richa jako domyślny handler tracebacków, żeby wszystkie niewyłapane wyjątki (błędy) były renderowane przez Richa.\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n"
        },
        {
          "name": "README.pt-br.md",
          "type": "blob",
          "size": 19.2744140625,
          "content": "[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\n[![codecov](https://codecov.io/gh/Textualize/rich/branch/master/graph/badge.svg)](https://codecov.io/gh/Textualize/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\n\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\n • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\n • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\n • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)\n • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\n • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\n • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)\n • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\n • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)\n • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\n • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)\n • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\n • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)\n  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)\n • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n\nRich é uma biblioteca Python para _rich_ text e formatação de estilos no terminal.\n\nA [API do Rich](https://rich.readthedocs.io/en/latest/) permite adicionar cores e estilos no output do terminal de forma fácil. Rich também permite formataçao de tabelas, barra de progresso, markdown, highlight de sintaxe de código fonte, rastreio de erros (traceback) e muito mais.\n\n![Funcões](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\nPara mais detalhes, veja um vídeo de introdução so Rich em [calmcode.io](https://calmcode.io/rich/introduction.html) por [@fishnets88](https://twitter.com/fishnets88).\n\nVeja aqui [o que estão falando sobre o Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).\n\n## Compatibilidade\n\nRich funciona no Linux, OSX e Windows. True color / emoji funciona no novo Terminal do Windows, o terminal classico é limitado a 16 cores. Rich requer Python 3.6.3 ou superior.\n\nRich funciona com [Jupyter notebooks](https://jupyter.org/) sem a necessidade de configurações adicionais.\n\n## Instalação\n\nInstale usando `pip` ou seu gerenciador de pacotes PyPI favorito.\n\n```sh\npython -m pip install rich\n```\n\nExecute o seguinte comando para testar o output do Rich no seu terminal:\n\n```sh\npython -m rich\n```\n\n## Print do Rich\n\nPara adicionar as as funções de formatação do rich na sua aplicação de forma fácil, simplesmente importe o metodo [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) que tem a mesma assinatura da função nativa do Python. Por exemplo:\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## REPL do Rich\n\nO Rich pode ser instalado no REPL do Python fazendo com que qualquer estrutura de dados seja exibida formatada e com highlights.\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## Usando o Console\n\nPara ter mais controle sobre a formatação do conteudo no terminal, importe e instancie um objeto do [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console).\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nObjetos do tipo Console tem um metodo `print` que tem a interface intencionalmente similar à função `print` nativa. Veja a seguir um exeplo de uso:\n\n```python\nconsole.print(\"Hello\", \"World!\")\n```\n\nComo esperado, este comando vai imprimir `\"Hello World!\"` no terminal. Porém, observe que, diferente da função `print` nativa, o Rich vai quebrar a linha entre palavras (word-wrap) no seu texto para caber na largura do terminal.\n\nExistem algumas formas de adicionar cores e estilos nos outputs. É possivel aplicar um estilo para todo output adicionando o argumento nomeado `style`. Por exemplo:\n\n```python\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\nO resultado vai ser algo como:\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\n\nIsso funciona bem para formatar cada linha do texto individualmente. Para maior controle sobre a formatação, o Rich renderiza um markup especial com uma sintaxe similar ao [bbcode](https://en.wikipedia.org/wiki/BBCode). Veja o exemplo a seguir:\n\n```python\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\n\nVoce pode usar o objeto do Console para gerar facilmente uma saída para o terminal sofisticada. Veja a documentação da [API do Console](https://rich.readthedocs.io/en/latest/console.html) para mais detalhes.\n\n## Inspect do Rich\n\nO Rich tem uma função [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) que gera um relatório de qualquer objeto no Python, como classes, instâncias ou funções nativas.\n\n```python\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)\n\nConfira a [documentação do inspect](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) para mais detalhes.\n\n# A biblioteca Rich\n\nO Rich possui vários _renderizáveis_ nativos que podem ser usados para criar outputs elegantes no seu CLI e ajudar a debugar o código.\n\nClique nos itens a seguir para expandir os detalhes:\n\n<details>\n<summary>Log</summary>\n\nO objeto Console tem um método `log()` com uma interface similar ao `print()` mas que também imprime uma coluna com a hora atual, nome do arquivo e linha onde foi executado. Por padrão, o Rich vai fazer highlight de sintaxe para extruturas do Python e para repr strings. Se você usar o `log()` para imprimir uma _collection_ (por exemplo um dicionário ou uma lista), o Rich vai imprimir formatado de uma forma que caiba no espaço disponível. Veja a seguir alguns exemplos dessas funções:\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\nO código acima vai produzir algo parecido com:\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)\n\nNote o argumento `log_locals` que imprime uma tabela com as variáveis locais no contexto em que o método `log()` foi chamado.\n\nO método `log()` pode ser usado para logar no terminal em aplicações de processos longos como servidores, mas é também uma ferramenta ótima para debugar.\n\n</details>\n<details>\n<summary>Logging Handler</summary>\n\nVocê também pode usar a [classe Handler](https://rich.readthedocs.io/en/latest/logging.html) nativa para formatar e colorir o output do módulo `logging` do Python. Veja aqui um exemplo do output:\n\n![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)\n\n</details>\n\n<details>\n<summary>Emoji</summary>\n\nPara imprimir um emoji no console, coloque o nome do emoji entre dois \":\" (dois pontos). Por exemplo:\n\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\nPor favor use esse recurso com sabedoria.\n\n</details>\n\n<details>\n<summary>Tabelas</summary>\n\nO Rich pode imprimir [tables](https://rich.readthedocs.io/en/latest/tables.html) flexíveis usando caracteres unicode como bordas. Existem várias opções de formatação de bordas, estilos, alinhamento das celulas, etc.\n\n![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)\n\nA animação acima foi gerada com o arquivo [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) da pasta de exemplos.\n\nVeja um exemplo mais simples:\n\n```python\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\nQue gera o seguinte resultado:\n\n![table](https://github.com/textualize/rich/raw/master/imgs/table.png)\n\nObserve que o markup é renderizado da mesma que em `print()` e `log()`. Na verdade, tudo que é renderizável pelo Rich pode ser incluído nos cabeçalhos ou linhas (até mesmo outras tabelas).\n\nA classe `Table` é inteligente o suficiente para ajustar o tamanho das colunas para caber na largura do terminal, quebrando o texto em novas linhas quando necessário. Veja o mesmo exemplo a seguir, só que desta vez com um terminal menor do que o tamanho original da tabela:\n\n![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\n\n</details>\n\n<details>\n<summary>Barra de Progresso</summary>\n\nO Rich consegue renderizar de forma eficiente múltiplas [barras de progresso](https://rich.readthedocs.io/en/latest/progress.html) que podem ser usadas para rastrear o estado de processos longos.\n\nUma forma simples de usar é passando o iterável para a função `track` e iterar normalmente sobre o retorno. Veja o exemplo a seguir:\n\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\nAdicionar múltiplas barras de progresso também é simples. Veja outro exemplo que existe na documentação:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\nAs colunas podem ser configuradas pra mostrar qualquer detalho necessário. As colunas nativas incluem a porcentagem completa, tamanho de arquivo, velocidade do arquivo e tempo restante. O exemplo a seguir mostra o progresso de um download:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\n\nPara testar isso no seu terminal, use o arquivo [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) para fazer o download de múltiplas URLs simultaneamente, exibindo o progresso de cada download.\n\n</details>\n\n<details>\n<summary>Status</summary>\n\nEm casos em que é dificil calcular o progresso da tarefa, você pode usar o método [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) que exibe uma animação de um \"spinner\" e a mensagem. A animação não impede em nada o uso do `console`. Veja o exemplo a seguir:\n\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\nEste código resultará no seguinte output no terminal:\n\n![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\n\nAs animações do \"spinner\" foram emprestadas do [cli-spinners](https://www.npmjs.com/package/cli-spinners). É possível escolher um estilo de \"spinner\" usando o parametro `spinner`. Execute o comando a seguir para ver todos os tipos de \"spinner\" disponíveis.\n\n```\npython -m rich.spinner\n```\n\nO comando acima deve exibir o seguinte no seu terminal:\n\n![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\n\n</details>\n\n<details>\n<summary>Árvore</summary>\n\nO Rich pode renderizar [árvores](https://rich.readthedocs.io/en/latest/tree.html) com linhas de identação. Uma árvore é a forma ideal de exibir uma estrutura de arquivos ou qualquer outra apresentação hierárquica de dados.\n\nOs titulos dos itens da árvore podem ser textos simples ou qualquer coisa que o Rich pode renderizar. Execute o comando a seguir para uma demonstração:\n\n```\npython -m rich.tree\n```\n\nIsso gera o seguinte resultado:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)\n\nVeja o exemplo em [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) de um código que gera uma árvore de exibição de um dicionário, semelhante ao comando `tree` do linux.\n\n</details>\n\n<details>\n<summary>Colunas</summary>\n\nO Rich pode renderizar conteúdos em [colunas](https://rich.readthedocs.io/en/latest/columns.html) bem formatadas com tamanhos iguais ou otimizados. O exemplo a seguir é uma cópia básica do comando `ls` (presente no MacOS / Linux) que mostra o conteúdo de uma pasta organizado em colunas:\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\nO screenshot a seguir é do resultado do [exemplo de colunas](https://github.com/textualize/rich/blob/master/examples/columns.py) formatando em colunas os dados extraídos de uma API:\n\n![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)\n\n</details>\n\n<details>\n<summary>Markdown</summary>\n\nO Rich pode renderizar [markdown](https://rich.readthedocs.io/en/latest/markdown.html) e faz um bom trabalho de conversão do formato para o terminal.\n\nPara renderizar markdown, importe a classe `Markdown` e instancie com a string que contém o código markdown. Depois, imprima o objeto no console. Por exemplo:\n\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\nIsso produzirá um resultado como:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\n\n</details>\n\n<details>\n<summary>Highlight de Sintaxe</summary>\n\nO Rich usa a biblioteca [pygments](https://pygments.org/) para implementar o [highlight de sintaxe](https://rich.readthedocs.io/en/latest/syntax.html). O uso é similar à renderização de markdown, instancie um objeto da classe `Syntax` imprima no console. Por exemplo:\n\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\nEste código gerará o seguinte resultado:\n\n![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\n\n</details>\n\n<details>\n<summary>Rastreio de Erros (tracebacks)</summary>\n\nO Rich renderiza [tracebacks formatados](https://rich.readthedocs.io/en/latest/traceback.html) que são fáceis de ler e mostra mais código do que os tracebacks padrão do Python. É possivel configurar o Rich como o gerenciador padrão de tracebacks para que todas as excessões inesperadas sejam renderizadas pelo Rich.\n\nVeja o resultado disso no OSX (resultados semelhantes no Linux):\n\n![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)\n\n</details>\n\nTodos os renderizáveis do Rich usam o [Protocolo do Console](https://rich.readthedocs.io/en/latest/protocol.html), que você pode usar para implementar o seu próprio conteúdo Rich.\n\n# Rich para empresas\n\nDisponível como parte da assinatura Tidelift.\n\nOs mantenedores do Rich e milhares de outros pacotes estão trabalhando com o Tidelift para disponibilizar suporte comercial e manutenção de projetos de código aberto usados nas suas aplicações. Economize tempo, reduza riscos e melhore a qualidade do código enquanto paga os mantenedores dos pacotes exatos que você usa. [Mais detalhes.](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n# Projetos usando Rich\n\nAqui estão alguns projetos que usam o Rich:\n\n- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)\n  a python package for the visualization of three dimensional neuro-anatomical data\n  um pacote python para visualisação tridimensional de dados neuro-atômicos.\n- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)\n  ferramenta de descriptografia autoatizada.\n- [emeryberger/scalene](https://github.com/emeryberger/scalene)\n  um analisador de CPU e memória de alta performance e alta precisão para Python\n- [hedythedev/StarCli](https://github.com/hedythedev/starcli)\n  Explore projetos de destaque no GitHub pela linha de comando do terminal\n- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)\n  Essa ferramenta verifica a vulnerabilidade de diversos componentes populares (openssl, libpng, libxml2, expat e outros) presentes no seu sistema e alerta para possíveis vulnerabilidades conhecidas.\n- [nf-core/tools](https://github.com/nf-core/tools)\n  pacote Python com ferramentas auxiliares par a comunidade nf-core.\n- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)\n  pdb + Rich para auxiliar no debug\n- [plant99/felicette](https://github.com/plant99/felicette)\n  Imagem de satélites para iniciantes.\n- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)\n  Automatize & teste 10x mais rápido com Selenium & pytest. Baterias inclusas.\n- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)\n  Automagicamente sincronize legendas com vídeos.\n- [tryolabs/norfair](https://github.com/tryolabs/norfair)\n  Biblioteca Python para adicionar rastreio em tempo real de objetos 2D em qualquer detector.\n- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Ansible-lint verifica boas práticas e comportamento que podem ser melhorados.\n- [ansible-community/molecule](https://github.com/ansible-community/molecule) Framework de test para Ansible Molecule\n- +[Muitos outros](https://github.com/textualize/rich/network/dependents)!\n\n<!-- This is a test, no need to translate -->\n"
        },
        {
          "name": "README.ru.md",
          "type": "blob",
          "size": 25.845703125,
          "content": "[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich/13.2.0)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\n\n[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![codecov](https://codecov.io/gh/Textualize/rich/branch/master/graph/badge.svg)](https://codecov.io/gh/Textualize/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\n\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\n • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\n • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\n • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)\n • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\n • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\n • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)\n • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\n • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)\n • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\n • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)\n • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\n • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)\n • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)\n  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)\n • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n\nRich это Python библиотека, позволяющая отображать _красивый_ текст и форматировать терминал.\n\n[Rich API](https://rich.readthedocs.io/en/latest/) упрощает добавление цветов и стилей к выводу терминала. Rich также позволяет отображать красивые таблицы, прогресс бары, markdown, код с подсветкой синтаксиса, ошибки, и т.д. — прямо после установки.\n\n![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\nСмотрите видеоинструкцию  [calmcode.io](https://calmcode.io/rich/introduction.html) от [@fishnets88](https://twitter.com/fishnets88).\n\nПосмотрите [что люди думают о Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).\n\n## Cовместимость\n\nRich работает с Linux, OSX и Windows. True color / эмоджи работают с новым терминалом Windows, классический терминал лимитирован 16 цветами. Rich требует Python 3.6.3 или более новый.\n\nRich работает с [Jupyter notebooks](https://jupyter.org/) без дополнительной конфигурации.\n\n## Установка\n\nУстановите с помощью `pip` или вашего любимого PyPI менеджера пакетов.\n\n```sh\npython -m pip install rich\n```\n\nЗапустите следующую команду, чтобы проверить Rich вывод в вашем терминале:\n\n```sh\npython -m rich\n```\n\n## Rich Print\n\nПростейший способ получить красивый вывод это импортировать метод [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start), он принимает такие же аргументы что и стандартный метод `print`. Попробуйте:\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## Rich REPL\n\nRich может быть установлен в Python REPL, так, все данные будут выведены через Rich.\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## Использование класса Console\n\nДля большего контроля над терминалом Rich, импортируйте и инициализируйте класс [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console).\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nУ класса Сonsole есть метод `print` который имеет идентичный встроенной функции функционал `print`. Вот пример использования:\n\n```python\nconsole.print(\"Hello\", \"World!\")\n```\n\nКак вы могли догадаться, это выведет `Hello World!` в терминал. Запомните что, в отличии от встроенной функции `print`, Rich настроит переносы слов так, чтобы ваш текст соответствовал ширине терминала.\n\nЕсть несколько способов добавить цвет и стиль к вашему выводу. Вы можете выбрать стиль для всего вывода добавив аргумент `style`. Вот пример:\n\n```python\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\nВывод будет выглядеть примерно так:\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\n\nЭтого достаточно чтобы стилизовать 1 строку. Для более детальной стилизации, Rich использует специальную разметку похожую по синтаксису на [bbcode](https://en.wikipedia.org/wiki/BBCode). Вот пример:\n\n```python\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\n\nВы можете использовать класс Console чтобы генерировать красивый вывод с минимальными усилиями. Для получения детальной информации смотрите [документацию Console API](https://rich.readthedocs.io/en/latest/console.html).\n\n## Rich Inspect\n\nВ Rich имеется функция [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) которая может украсить любой Python объект, например класс, переменную, или функцию.\n\n```python\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)\n\nДля получения детальной информации смотрите [документацию inspect](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect).\n\n# Библиотека Rich\n\nRich содержит несколько встроенных _визуализаций_ которые вы можете использовать чтобы сделать красивый вывод в вашем CLI, а также они помогают в отладке кода.\n\nВот несколько вещей которые может делать Rich (нажмите чтобы узнать больше):\n\n<details>\n<summary>Лог</summary>\n\nВ классе Сonsole есть метод `log()` который имеет интерфейс, аналогичный `print()`, но также отображает колонку текущим временем, именем файла и номером строки кода в которой был вызван метод. По умолчанию Rich будет подсвечивать синтаксис для структур Python и для строк repr. Если вы передадите в метод коллекцию (т.е. dict или list) Rich выведет её так, чтобы она разместилась в доступном пространстве. Вот пример использования этого метода.\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\nПриведенный выше код выведет это:\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)\n\n\nОбратите внимание на аргумент `log_locals`, который выводит таблицу, содержащую локальные переменные функции, в которой был вызван метод log.\n\nМетод может быть использован для вывода данных в терминал в длительно работающих программ, таких как сервера, но он также может помочь в отладке.\n\n</details>\n<details>\n<summary>Обработчик Логов</summary>\n\nВы также можете использовать встроенный [класс Handler](https://rich.readthedocs.io/en/latest/logging.html) чтобы форматировать и раскрашивать вывод из встроенной библиотеки logging. Вот пример вывода:\n\n![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)\n\n</details>\n\n<details>\n<summary>Эмоджи</summary>\n\nЧтобы вставить эмоджи в вывод консоли, поместите его название между двумя двоеточиями. Вот пример:\n\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\nПожалуйста, используйте эту функцию с умом.\n\n</details>\n\n<details>\n<summary>Таблицы</summary>\n\nRich может отображать гибкие настраиваемые [таблицы](https://rich.readthedocs.io/en/latest/tables.html) с помощью символов unicode. Есть большое количество вариантов границ, стилей, выравниваний ячеек и т.п.\n\n![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)\n\nЭта анимация была сгенерирована с помощью [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) в папке примеров.\n\nВот пример более простой таблицы:\n\n```python\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\nЭтот пример выводит:\n\n![table](https://github.com/textualize/rich/raw/master/imgs/table.png)\n\nОбратите внимание, что разметка осуществляется таким же способом, что и `print()` и `log()`. На самом деле, все, что может быть отображено Rich, может быть включено в заголовки / строки (даже в другие таблицы).\n\nКласс `Table` достаточно умный чтобы менять размер столбцов, так, чтобы они заполняли доступную ширину терминала, обёртывая текст как нужно. Вот тот же самый пример с терминалом меньше таблицы:\n\n![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\n\n</details>\n\n<details>\n<summary>Прогресс Бары</summary>\n\nRich может отображать несколько плавных [прогресс](https://rich.readthedocs.io/en/latest/progress.html) баров чтобы отслеживать долго-идущие задания.\n\nДля базового использования, оберните любую последовательность в функцию `track` и выполните итерации по результату. Вот пример:\n\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\nДобавить несколько индикаторов выполнения не намного сложнее. Вот пример взятый из документации:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\nСтолбцы могут быть сконфигурированы таким образом, чтобы отображать любые сведения, которые вы хотите. Стандартные столбцы содержат проценты выполнения, размер файлы, скорость файла и оставшееся время. Вот ещё пример показывающий прогресс загрузки:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\n\nЧтобы попробовать самому, скачайте [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py), который может загружать несколько URL-адресов одновременно, отображая прогресс.\n\n</details>\n\n<details>\n<summary>Статус</summary>\n\nДля ситуаций где сложно вычислить прогресс, вы можете использовать метод [статус](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) который будет отображать крутящуюся анимацию и сообщение. Анимация не помешает вам использовать консоль в обычном режиме. Вот пример:\n\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\nЭто сгенерирует вот такой вывод в консоль.\n\n![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\n\nКрутящиеся анимации были взяты из [cli-spinners](https://www.npmjs.com/package/cli-spinners). Вы можете выбрать одну из них указав параметр `spinner`. Введите следующую команду чтобы посмотреть доступные анимации:\n\n```\npython -m rich.spinner\n```\n\nПриведенная выше команда сгенерирует следующий вывод в терминале:\n\n![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\n\n</details>\n\n<details>\n<summary>Дерево</summary>\n\nRich может отобразить [дерево](https://rich.readthedocs.io/en/latest/tree.html) с направляющими уровнями. Дерево идеально подходит для отображения структуры файлов или любых других иерархических данных.\n\nМетки дерева могут быть содержать простой текст или чем-либо еще, что может отобразить Rich. Запустите следующую команду для демонстрации:\n\n```\npython -m rich.tree\n```\n\nЭто генерирует следующий вывод:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)\n\nСмотрите пример [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) скрипта,который отображает древовидное представление любого каталога, аналогично команде linux `tree`.\n\n</details>\n\n<details>\n<summary>Колонки</summary>\n\nRich может отображать контент в аккуратных [колонках](https://rich.readthedocs.io/en/latest/columns.html) с равной или оптимальной шириной. Вот очень простой пример клона команды `ls` (MacOS / Linux) который отображает список файлов из папки в виде колонок:\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\nСледующий снимок экрана является [примером колонок](https://github.com/textualize/rich/blob/master/examples/columns.py) который изображает данные взятые из API в столбцах:\n\n![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)\n\n</details>\n\n<details>\n<summary>Markdown</summary>\n\nRich может отображать [markdown](https://rich.readthedocs.io/en/latest/markdown.html), проделывая неплохую работу в форматировании под терминал.\n\nЧтобы отобразить markdown импортируйте класс `Markdown` и инициализируйте его с помощью строки содержащей код markdown. Затем распечатайте его в консоли. Вот пример:\n\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\nЭто выведет что-то похожее на это:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\n\n</details>\n\n<details>\n<summary>Подсветка синтаксиса</summary>\n\nRich использует библиотеку [pygments](https://pygments.org/) чтобы выполнить [подсветку синтаксиса](https://rich.readthedocs.io/en/latest/syntax.html). Использование аналогично рендерингу markdown; создайте объект `Syntax` и выведите его на консоль. Вот пример:\n\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\nЭто выведет что-то похожее на это:\n\n![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\n\n</details>\n\n<details>\n<summary>Ошибки</summary>\n\nRich может отображать [красивый стек ошибок](https://rich.readthedocs.io/en/latest/traceback.html), который проще читать, и показывает больше информации чем стандартные стек ошибок Python. Вы можете установить Rich как стандартный обработчик ошибок чтобы все не перехваченные исключения отображались Rich.\n\nВот как это выглядит на OSX (похоже на Linux):\n\n![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)\n\n</details>\n\nВсе визуализации Rich используют [протокол Console](https://rich.readthedocs.io/en/latest/protocol.html), который позволяет вам добавлять свой собственный Rich контент.\n\n# Rich CLI\n\nСмотрите также [Rich CLI](https://github.com/textualize/rich-cli) для получения информации о приложении командной строки, работающего на базе Rich. Подсветка синтаксиса кода, рендеринг markdown, отображение CSV-файлов в таблицах и многое другое доступно непосредственно из командной строки.\n\n\n![Rich CLI](https://raw.githubusercontent.com/Textualize/rich-cli/main/imgs/rich-cli-splash.jpg)\n\n# Textual\n\nСмотрите также дочерний проект Rich, [Textual](https://github.com/Textualize/textual), который вы можете использовать для создания сложных пользовательских интерфейсов в терминале.\n\n# Rich для предприятий\n\nRich доступен как часть подписки Tidelift.\n\nМентейнеры проекта Rich, как и тысячи других разработчиков работают с подпиской Tidelift чтобы предоставить коммерческую поддержку и поддержку для проектов с открытым кодом, которые вы используете для создания своих приложений. Экономьте время, устраняйте риски и улучшайте состояние вашего кода, одновременно платя спонсорам проектов, которые вы используете. [Узнайте больше.](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n# Проекты использующие Rich\n\nВот несколько проектов использующих Rich:\n\n- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)\n  библиотека Python для визуализации нейроанатомических данных в 3 измерениях\n- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)\n  автоматизированная утилита для расшифровки\n- [emeryberger/scalene](https://github.com/emeryberger/scalene)\n  Высокая производительность, высокая точность CPU и профилировщик памяти для Python\n- [hedythedev/StarCli](https://github.com/hedythedev/starcli)\n  Просматривайте трендовые проекты GitHub прямо из вашего терминала\n- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)\n  Эта утилита сканирует известные уязвимости (openssl, libpng, libxml2, expat and a few others) чтобы уведомить вас, если ваша система использует библиотеки с известными уязвимостями.\n- [nf-core/tools](https://github.com/nf-core/tools)\n  Библиотека Python с полезными инструментами для сообщества nf-core.\n- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)\n  pdb + Rich библиотека для улучшенного дебаггинга\n- [plant99/felicette](https://github.com/plant99/felicette)\n  Изображения со спутников для чайников.\n- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)\n  Автоматизируйте и тестируйте в 10 раз быстрее с Selenium и pytest. Батарейки включены.\n- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)\n  Автоматически синхронизируйте субтитры с видео.\n- [tryolabs/norfair](https://github.com/tryolabs/norfair)\n  Простая библиотека Python для добавления 2D отслеживания к любому детектеру в реальном времени.\n- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Ansible-lint проверяет пьесы для практик и поведений которые могут быть исправлены\n- [ansible-community/molecule](https://github.com/ansible-community/molecule) Ansible Molecule тестинг фреймворк\n- +[Ещё больше](https://github.com/textualize/rich/network/dependents)!\n\n<!-- This is a test, no need to translate -->\n"
        },
        {
          "name": "README.sv.md",
          "type": "blob",
          "size": 18.83984375,
          "content": "[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\n[![codecov](https://codecov.io/gh/Textualize/rich/branch/master/graph/badge.svg)](https://codecov.io/gh/Textualize/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\n\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\n • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\n • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\n • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)\n • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\n • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\n • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)\n • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\n • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)\n • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\n • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)\n • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\n • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)\n  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)\n • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n\nRich är ett Python bibliotek för _rich_ text och vacker formattering i terminalen.\n\n[Rich API](https://rich.readthedocs.io/en/latest/) gör det enkelt att lägga till färg och stil till terminal utmatning. Rich kan också framställa fina tabeller, framstegsfält, märkspråk, syntaxmarkerad källkod, tillbaka-spårning, och mera - redo att använda.\n\n![Funktioner](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\nFör en video demonstration av Rich kolla [calmcode.io](https://calmcode.io/rich/introduction.html) av [@fishnets88](https://twitter.com/fishnets88).\n\nSe vad [folk pratar om Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).\n\n## Kompatibilitet\n\nRich funkar med Linux, OSX, och Windows. Sann färg / emoji funkar med nya Windows Terminalen, klassiska terminal är begränsad till 8 färger. Rich kräver Python 3.6.3 eller senare.\n\nRich funkar med [Jupyter notebooks](https://jupyter.org/) utan någon ytterligare konfiguration behövd.\n\n## Installering\n\nInstallera med `pip` eller din favorita PyPI packet hanterare.\n\n```sh\npython -m pip install rich\n```\n\nKör följade följande för att testa Rich utmatning i din terminal:\n\n```sh\npython -m rich\n```\n\n## Rich utskrivningsfunktion\n\nFör att enkelt lägga till rich utmatning i din applikation, kan du importera [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) metoden, vilket har den samma signatur som den inbyggda Python funktionen. Testa detta:\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## Rich REPL\n\nRich kan installeras i Python REPL, så att varje datastruktur kommer att skrivas ut fint och markeras.\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## Användning av konsolen\n\nFör mer kontroll över rich terminal innehållsutmatning, importera och konstruera ett [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) objekt.\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\n`Console` objektet har en `print` metod vilket har ett avsiktligt liknande gränssnitt till den inbyggda `print` funktionen. Här är ett exempel av användningen:\n\n```python\nconsole.print(\"Hello\", \"World!\")\n```\n\nSom du möjligtvis anar, detta kommer skriva ut `\"Hello World!\"` till terminalen. Notera att till skillnad från den inbyggda `print` funktionen, Rich kommer att radbryta din text så att den passar inom terminalbredden.\n\nDet finns ett par sätt att lägga till färg och stil till din utmatning. Du kan sätta en stil för hela utmatningen genom att addera ett `style` nyckelord argument. Här är ett exempel:\n\n```python\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\nUtmatningen kommer bli något liknande:\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\n\nDet är bra för att ge stil till en textrad åt gången. För mer finkornad stilisering, Rich framställer en speciell märkspråk vilket liknar [bbcode](https://en.wikipedia.org/wiki/BBCode) i syntax. Här är ett exempel:\n\n```python\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n![Konsol märkspråk](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\n\nDu kan använda ett `Console` objekt för att generera sofistikerad utmatning med minimal ansträngning. Se [Console API](https://rich.readthedocs.io/en/latest/console.html) dokument för detaljer.\n\n## Rich Inspektera\n\nRich har en [inspektionsfunktion](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) som kan producera en rapport om vilket Python objekt som helst, till exempel klass, instans, eller inbyggt.\n\n```python\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)\n\nSee [inspektionsdokumentationen](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) för detaljer.\n\n# Rich Library\n\nRich innehåller ett antal av inbyggda _renderables_ som du kan använda för att skapa elegant utmatning i din kommandotolk och hjälpa dig felsöka din kod.\n\nKlicka på följande rubriker för detaljer:\n\n<details>\n<summary>Logga</summary>\n\n`Console` objektet har en `log()` metod vilket har liknande gränssnitt som `print()`, men framställer även en kolumn för den nuvarande tid och fil samt rad vilket gjorde anroppet. Som standard kommer Rich att markera syntax för Python strukturer och för repr strängar. Ifall du loggar en samling (det vill säga en ordbok eller en lista) kommer Rich att finskriva ut det så att det passar i det tillgängliga utrymme. Här är ett exempel av dessa funktioner.\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\nDet ovanstående har följande utmatning:\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)\n\nNotera `log_locals` argumentet, vilket utmatar en tabell innehållandes de lokala variablerna varifrån log metoden kallades från.\n\nLog metoden kan användas för att logga till terminal för långkörande applikationer så som servrar, men är också en väldigt bra felsökningsverktyg.\n\n</details>\n<details>\n<summary>Loggningshanterare</summary>\n\nDu kan också använda den inbyggda [Handler klassen](https://rich.readthedocs.io/en/latest/logging.html) för att formatera och färglägga utmatningen från Pythons loggningsmodul. Här är ett exempel av utmatningen:\n\n![Loggning](https://github.com/textualize/rich/raw/master/imgs/logging.png)\n\n</details>\n\n<details>\n<summary>Emoji</summary>\n\nFör att infoga en emoji till konsolutmatningen placera namnet mellan två kolon. Här är ett exempel:\n\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\nVänligen använd denna funktion klokt.\n\n</details>\n\n<details>\n<summary>Tabeller</summary>\n\nRich kan framställa flexibla [tabeller](https://rich.readthedocs.io/en/latest/tables.html) med unicode boxkaraktärer. Det finns en stor mängd av formateringsalternativ för gränser, stilar, och celljustering etc.\n\n![Tabell film](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)\n\nAnimationen ovan genererades utav [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) i exempelkatalogen.\n\nHär är ett exempel av en enklare tabell:\n\n```python\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\nDetta producerar följande utmatning:\n\n![tabell](https://github.com/textualize/rich/raw/master/imgs/table.png)\n\nNotera att konsol märkspråk är framställt på samma sätt som `print()` och `log()`. I själva verket, vad som helst som är framställt av Rich kan inkluderas i rubriker / rader (även andra tabeller).\n\n`Table` klassen är smart nog att storleksändra kolumner att passa den tillgängliga bredden av terminalen, och slår in text ifall det behövs. Här är samma exempel, med terminalen gjord mindre än tabell ovan:\n\n![tabell2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\n\n</details>\n\n<details>\n<summary>Framstegsfält</summary>\n\nRich kan framställa flera flimmerfria [framstegsfält](https://rich.readthedocs.io/en/latest/progress.html) för att följa långvariga uppgifter.\n\nFör grundläggande användning, slå in valfri sekvens i `track` funktion och iterera över resultatet. Här är ett exempel:\n\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\nDet är inte mycket svårare att lägga till flera framstegsfält. Här är ett exempel tagen från dokumentationen:\n\n![framsteg](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\nDessa kolumner kan konfigureras att visa vilka detaljer du vill. Inbyggda kolumner inkluderar procentuell färdig, filstorlek, filhastighet, och återstående tid. Här är ännu ett exempel som visar en pågående nedladdning:\n\n![framsteg](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\n\nFör att själv testa detta, kolla [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) vilket kan ladda ner flera URLs samtidigt medan visar framsteg.\n\n</details>\n\n<details>\n<summary>Status</summary>\n\nFör situationer där det är svårt att beräkna framsteg, kan du använda [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) metoden vilket kommer visa en 'snurra' animation och meddelande. Animationen hindrar dig inte från att använda konsolen som normalt. Här är ett exempel:\n\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\nDetta genererar följande utmatning i terminalen.\n\n![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\n\nSnurra animationen är lånad ifrån [cli-spinners](https://www.npmjs.com/package/cli-spinners). Du kan välja en snurra genom att specifiera `spinner` parametern. Kör följande kommando för att se tillgängliga värden:\n\n```\npython -m rich.spinner\n```\n\nKommandot ovan genererar följande utmatning i terminalen:\n\n![Snurror](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\n\n</details>\n\n<details>\n<summary>Träd</summary>\n\nRich kan framställa ett [träd](https://rich.readthedocs.io/en/latest/tree.html) med riktlinjer. Ett träd är idealt för att visa en filstruktur, eller andra hierarkiska data.\n\nEtiketter på trädet kan vara enkelt text eller något annat som Rich kan framställa. Kör följande för en demonstration:\n\n```\npython -m rich.tree\n```\n\nDetta genererar följande utmatning:\n\n![märkspråk](https://github.com/textualize/rich/raw/master/imgs/tree.png)\n\nSe [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) exemplet för ett skript som visar en trädvy av vilken katalog som helst, som liknar linux `tree` kommandot.\n\n</details>\n\n<details>\n<summary>Kolumner</summary>\n\nRich kan framställa innehåll i prydliga [kolumner](https://rich.readthedocs.io/en/latest/columns.html) med lika eller optimal bredd. Här är en grundläggande klon av (MacOS / Linux) `ls` kommandot vilket visar en kataloglista i kolumner:\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\nFöljande skärmdump är resultatet från [kolumner exempelet](https://github.com/textualize/rich/blob/master/examples/columns.py) vilket visar data tagen från ett API i kolumner:\n\n![kolumner](https://github.com/textualize/rich/raw/master/imgs/columns.png)\n\n</details>\n\n<details>\n<summary>Märkspråk</summary>\n\nRich kan framställa [märkspråk](https://rich.readthedocs.io/en/latest/markdown.html) och gör ett rimligt jobb med att översätta formateringen till terminalen.\n\nFör att framställa märkspråk importera `Markdown` klassen och konstruera den med en sträng innehållandes märkspråkskod. Mata sedan ut det till konsolen. Här är ett exempel:\n\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\nDetta kommer att producera utmatning som liknar följande:\n\n![märkspråk](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\n\n</details>\n\n<details>\n<summary>Syntaxmarkering</summary>\n\nRich använder [pygments](https://pygments.org/) biblioteket för att implementera [syntax markering](https://rich.readthedocs.io/en/latest/syntax.html). Användningen är liknande till framställa märkspråk; konstruera ett `Syntax` objekt och skriv ut den till konsolen. Här är ett exempel:\n\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\nDetta kommer producera följande utmatning:\n\n![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\n\n</details>\n\n<details>\n<summary>Tillbaka-spårning</summary>\n\nRich kan framställa [vackra tillbaka-spårningar](https://rich.readthedocs.io/en/latest/traceback.html) vilket är enklare att läsa och visar mer kod än vanliga Python tillbaka-spårningar. Du kan sätta Rich som standard tillbaka-spårningshanterare så att alla ofångade undantag kommer att framställas av Rich.\n\nSå här ser det ut på OSX (liknande på Linux):\n\n![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)\n\n</details>\n\nAlla Rich framställsbara använder sig av [konsolprotokollet](https://rich.readthedocs.io/en/latest/protocol.html), som du också kan använda för att implementera ditt eget Rich-innehåll.\n\n# Rich för företag\n\nTillgänglig som en del av Tidelift-prenumerationen.\n\nUnderhållarna av Rich och tusentals andra paket arbetar med Tidelift för att leverera kommersiellt stöd och underhåll för de öppen källkodspaket som du kan använda för att bygga dina applikationer. Spara tid, reducera risk, och förbättra kodhälsan, samtidigt som du betalar underhållarna för exakt de paket du använder [Lär dig mer.](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n# Projekt som använder sig av Rich\n\nHär är ett par projekt som använder Rich:\n\n- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)\n  ett python packet för visualisering av tredimensionell neuro-anatomiska data\n- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)\n  Automatiserat dekrypteringsverktyg\n- [emeryberger/scalene](https://github.com/emeryberger/scalene)\n  en högpresterande processor med hög precision och minnesprofilerare för Python\n- [hedythedev/StarCli](https://github.com/hedythedev/starcli)\n  Bläddra bland trendande projekt i Github från din kommandotolk\n- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)\n  Detta verktyg skannar efter vanliga, sårbara komponenter (openssl, libpng, libxml2, expat och en del andra) för att låta dig veta ifall ditt system inkluderar vanliga bibliotek med kända sårbarheter.\n- [nf-core/tools](https://github.com/nf-core/tools)\n  Python packet med hjälpverktyg för nf-core gemenskapen.\n- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)\n  pdb + Rich bibliotek för förbättrad felsökning.\n- [plant99/felicette](https://github.com/plant99/felicette)\n  Satellitbilder för nybörjare.\n- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)\n  Automatisera & testa 10x snabbare med Selenium & pytest. Batterier inkluderat.\n- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)\n  Automagiskt synkronisera undertexter med video.\n- [tryolabs/norfair](https://github.com/tryolabs/norfair)\n  Lättvikt Python bibliotek för att addera 2d-objektspårning i realtid till vilken detektor som helst.\n- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Ansible-lint kontroller playbooks för dess metoder och beteenden som potentiellt kan förbättras\n- [ansible-community/molecule](https://github.com/ansible-community/molecule) Ansible Molecule ramverk för testning\n- +[Many more](https://github.com/textualize/rich/network/dependents)!\n"
        },
        {
          "name": "README.tr.md",
          "type": "blob",
          "size": 17.2626953125,
          "content": "[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich/13.2.0)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\n\n[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\n\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\n • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\n • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\n • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)\n • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\n • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\n • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)\n • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\n • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)\n • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\n • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)\n • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\n • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)\n • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)\n • [Indonesian readme](https://github.com/textualize/rich/blob/master/README.id.md)\n • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)\n • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n\n\nBir Python kütüphanesi olan __rich__, terminal üzerinde gösterişli çıktılar almanızı sağlayan bir araçtır.\n\n[Rich API](https://rich.readthedocs.io/en/latest/) kullanarak terminal çıktılarınıza stil ekleyebilir ve renklendirebilirsiniz. Aynı zamanda tabloları, ilerleme çubuklarını, markdown stillerini, kaynak koddaki söz dizimi gösterimlerini ve bir çok şeyi rich kullanarak yapabilirsiniz.\n\n![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\nRich'e video ile göz atmak için [@fishnets88](https://twitter.com/fishnets88) tarafından oluşturulan [calmcode.io](https://calmcode.io/rich/introduction.html) sitesine bakabilirsiniz.\n\nİnsanların [rich hakkında yazdıkları son yazılar](https://www.willmcgugan.com/blog/pages/post/rich-tweets).\n\n## Uyumluluk\n\nRich Linux, OSX ve Windows üzerinde çalışabilir. Windows'un yeni terminalinde de doğru bir şekilde çalışabilir, eski terminalde 16 renk olduğu için istenilen sonuçlar elde edilemeyebilir. Aynı zamanda Rich'in çalışabilmesi için ortamda minimum Python 3.6.3 veya daha yeni bir sürüm olması gerekmektedir.\n\nRich [Jupyter notebook](https://jupyter.org/) üzerinde hiç bir ek yükleme gerektirmeden çalışabilir.\n\n## Yükleme\n\n`pip` üzerinden veya kullanmış olduğunuz PyPI paket yöneticiniz üzerinden indirebilirsiniz.\n\n```sh\npython -m pip install rich\n```\n\nAşağıdaki komut satırını çalıştırarak çıktınızı terminal üzerinden görebilirsiniz.\n\n\n```sh\npython -m rich\n```\n\n## Rich Print\n\n[rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) methodunu yükleyerek, Rich'i kullanmaya başlayabilirsiniz.\n\n```python\nfrom rich import print\n\nprint(\"Merhaba, [bold magenta]Dünya[/bold magenta]!\", \":vampire:\", locals())\n```\n\nBuradaki yazıyı değiştiremediğim için siz hello world olarak görüyorsunuz. :D\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## Rich REPL\n\nRich Python REPL içerisine yüklenebilir, böylece herhangi bir veri tipini güzelce terminal çıktısı olarak verebilir.\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## Terminali Nasıl Kullanılır?\n\nÇıktılarınız üzerinde daha fazla hakimiyet kurmak isterseniz, [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console)'u import edip objesini kullanabilirsiniz.\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nConsole objesi tıpkı Python içerisinde hazır gelen `print` methoduna benziyor, tabii daha fazlası da var.\nKullanımı aşağıdaki örnek gibi olacaktır:\n\n```python\nconsole.print(\"Merhaba\", \"Dünya!\")\n```\n\nSizin de tahmin edebileceğiniz gibi terminal çıktımız `\"Merhaba Dünya!\"` olacaktır. Standart `print` fonksiyonundan farklı olarak Console `print` fonksiyonu terminale sığmayan yazıları kaydırma özelliğine sahiptir.\n\nYazılarımıza birden fazla şekilde renk ekleyebiliriz. Bunlardan ek basit olan şekli, `style` argümanına rengimizi vermek. Aşağıda nasıl kullanılacağına dair bir örnek bulabilirsiniz.\n\n```python\nconsole.print(\"Merhaba\", \"Dünya!\", style=\"bold red\")\n```\n\nEğer çıktıyı değiştirmeseydim aşağıdaki gibi bir görüntü ile karşılaşacaktınız:\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\n\nTek seferde bir yazıyı renklendirmek için kullanışlı bir yöntem olsa da, eğer çıktımızın sadece belirli bölgelerinde değişiklik yapacaksak [bbcode](https://en.wikipedia.org/wiki/BBCode) söz dizimini kullanmalıyız. Bunun için de bir örnek:\n\n```python\nconsole.print(\"[bold red]Mustafa Kemal Atatürk[/bold red] [u](1881 - 10 Kasım 1938)[/u], [i]Türk asker ve devlet adamıdır[/i]. [bold cyan]Türk Kurtuluş Savaşı'nın başkomutanı ve Türkiye Cumhuriyeti'nin kurucusudur[/bold cyan].\")\n```\n\n![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\n\nConsole objesini kullanarak sofistike bir çok çıktıyı minimum efor ile oluşturabilirsiniz. [Console API](https://rich.readthedocs.io/en/latest/console.html) dökümanına göz atarak daha fazla bilgi elde edebilirsiniz.\n\n## Rich Inspect\n\nRich [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) adında bir fonksiyona sahiptir ve bu fonksiyon bize bir Python objesininin özelliklerini gösterir.\n\n```python\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)\n\n[Bu dökümana](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) göz atarak daha fazla bilgi elde edebilirsiniz...\n\n# Rich Kütüphaneleri\n\nRich içerisinde terminal üzerinde kullandığınızda çıktılarınızı gösterişli kılacak çok fazla yapıya sahiptir.\n\nBu yapıların detayları için ilgili başlıklara tıklayın:\n\n<details>\n<summary>Log</summary>\n\nConsole objesi içerisinde `log()` methodunu barındırır, bu tıpkı `print()` methodu gibi davranır fakat buna ek olarak bastırıldığı zamanı da ekrana yansıtır. Bu duruma ek olarak Rich Syntax Highlighting'de gerçekleştirir.\nAşağıda örnek kod parçası:\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\nVe bu kod parçasının çıktısı:\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)\n\n`log_locals` argümanı, local olarak bulunan değişkenleri tablo olarak ekrana bastırır.\n\n</details>\n<details>\n<summary>Logging Handler</summary>\n\nPython'un logging modülünü de [Handler sınıfı](https://rich.readthedocs.io/en/latest/logging.html) ile formatlayıp renklendirebiliriz.\n\n![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)\n\n</details>\n\n<details>\n<summary>Emoji</summary>\n\nEmojileri de kullanabilirsiniz, kullanımı markdown emojileri ile aynı.\n\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\nBu özelliği doğru yerlerde kullanmakta fayda var tabii.\n\n</details>\n\n<details>\n<summary>Tables</summary>\n\nRich kullanıcılarına esnek bir [tablo](https://rich.readthedocs.io/en/latest/tables.html) imkanı sunar, birden fazla şekilde formatlayıp, stillendirip kullanabilirsiniz.\n\n![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)\n\nYukarıdaki tablo örneği [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) örnek kodu ile oluşturulmuştur.\n\nBasit bir tablo örneği:\n\n```python\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\nKodun çıktısı aşağıdaki gibi olmaktadır:\n\n![table](https://github.com/textualize/rich/raw/master/imgs/table.png)\n\nNote that console markup is rendered in the same way as `print()` and `log()`. In fact, anything that is renderable by Rich may be included in the headers / rows (even other tables).\n\n`Table` sınıfı kendini terminal ekranına göre ayarlayabilir, genişletip, küçültebilir. Burada bunun ile alakalı bir örnek görüyorsunuz.\n\n![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\n\n</details>\n\n<details>\n<summary>Progress Bars</summary>\n\nUzun işlerinizi göstermek için Rich size birden fazla [progress](https://rich.readthedocs.io/en/latest/progress.html) bar sunuyor.\n\nBasit bir kullanım için, herhangi bir adımınızı `track` fonksiyonu ile kapsayıp döngüye alın.\n\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\nAşağıdaki görsellerde de görüleceği üzere birden fazla kez progress bar kullanabilirsiniz, ve dökümandan da anlaşılacağı üzere bu hiç de zor bir iş değil.\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\nKolonlar kullanıcı tarafından ayarlanabilir, indirme hızını, dosya boyutunu yüzdesel olarak gösterimi gibi bir çok şekilde gösterim sağlayabilir.\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\n\nEğer siz de denemek isterseniz [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) koduna bakarak ve çalıştırarak indirme yapabilirsiniz.\n\n</details>\n\n<details>\n<summary>Status</summary>\n\nEğer hesaplamanız gereken uzun işler varsa ve bunu progress bar ile gösteremiyorsanız yardımınıza [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) methodu yetişecektir.\n\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\nYukarıdaki kod parçacığı aşağıdaki gibi bir çıktı üretecektir.\n\n![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\n\nSpin animasyonu [cli-spinners](https://www.npmjs.com/package/cli-spinners) kütüphanesinden alınmıştır. `spinner` parametresi ile seçeceğiniz spin şekilini kullanabilirsiniz. \n\n```\npython -m rich.spinner\n```\n\nÇıktısı aşağıdaki gibi bir sonuç üretecektir:\n\n![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\n\n</details>\n\n<details>\n<summary>Tree</summary>\n\nRich bir [tree](https://rich.readthedocs.io/en/latest/tree.html) yapısını yardımcı çizgiler ile bastırabilir. Bu yapı bir dosya yapısını göstermek için veya hiyerarşik veri yapılarını göstermek için kullanılabilir.\n\nLabel yapısı ise basit bir text veya Rich üzerinde bastırılabilen her hangi bir yapı olabilir.\n\n```\npython -m rich.tree\n```\n\nKodun çıkartacağı görüntü şu olacaktır:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)\n\n[tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) örnek dosyası ile linux'da bulunan `tree` kodunu rich üzerinden simüle edebilirsiniz.\n\n</details>\n\n<details>\n<summary>Columns</summary>\n\nRich içerikleri [kolon](https://rich.readthedocs.io/en/latest/columns.html) olarak eşit veya optimal aralıklarla gösterebilir.\n\nBurada basit bir `ls` klonunu görüyorsunz.\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\nYukarıdaki yapıya [columns example](https://github.com/textualize/rich/blob/master/examples/columns.py) bağlantısı üzerinden ulaşabilirsiniz.\n\n![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)\n\n</details>\n\n<details>\n<summary>Markdown</summary>\n\nRich [markdown](https://rich.readthedocs.io/en/latest/markdown.html) stillerini ve çevirme işlemlerini de ekranda gösterebilir.\n\nSadece yapılması gereken `Markdown` sınıfını import edip, içeriğini doldurup ekrana bastırmak.\n\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\nAşağıdaki gibi bir çıktıya ulaşacağız.\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\n\n</details>\n\n<details>\n<summary>Syntax Highlighting</summary>\n\nRich içerisinde [syntax highlighting](https://rich.readthedocs.io/en/latest/syntax.html) için [pygments](https://pygments.org/) kütüphanesini kullanıyor. Tıpkı markdown'da olduğu gibi, bir tane `Syntax` objesi oluşturup bu objeyi terminale bastırıyoruz.\nÖrnek:\n\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\nYukarıdaki kod parçası aşağıdaki gibi bir çıktı üretecektir.\n\n![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\n\n</details>\n\n<details>\n<summary>Tracebacks</summary>\n\nRich sahip olduğu güzel [traceback](https://rich.readthedocs.io/en/latest/traceback.html)'ler yaratabilir. Böylece daha okunabilir ve daha kolay anlaşılabilen bir yapıya sahip olursunuz.\n\nBurada OSX üzerinde (tıpkı Linux gibi) bir traceback çıktısı görüyorsunuz.\n\n![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)\n\n</details>\n\nTüm rich yapıları [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html) kullanılarak gerçekleştirilmiştir, siz de kendi içeriğinizi Rich'e aktarabilirsiniz.\n\n# Rich CLI\n\nAynı zamanda [Rich CLI](https://github.com/textualize/rich-cli) uygulamasını da kontrol edin. Bu uygulama ile konsol çıktılarınızı renklendirebilir, kod çıktılarınıza syntax uygulayabilir, markdown gösterebilir, CSV dosyasını görüntüleyebilir ve daha bir çok şey yapabilirsiniz.\n\n\n![Rich CLI](https://raw.githubusercontent.com/Textualize/rich-cli/main/imgs/rich-cli-splash.jpg)\n\n# Textual\n\nRich'in kardeş projesi olan [Textual](https://github.com/Textualize/textual)'a da bir göz atın. Textual ile konsol çıktılarınıza bir UI oluşturup, gruplayıp görselleştirebilirsiniz.\n\n![Textual screenshot](https://raw.githubusercontent.com/Textualize/textual/main/imgs/textual.png)\n\n# Rich kullanılan Projeler\n\n[Rich Galeri](https://www.textualize.io/rich/gallery)si üzerinden, rich kullanılan son uygulamalara [Textualize.io](https://www.textualize.io) üzerinden göz atabiirsiniz.\n\nEğer siz de projenizi galeriye eklemek istiyorsanız [bu adımları](https://www.textualize.io/gallery-instructions) takip ederek ekleyebilirsiniz.\n\n<!-- This is a test, no need to translate -->\n"
        },
        {
          "name": "README.zh-tw.md",
          "type": "blob",
          "size": 17.626953125,
          "content": "[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\n[![codecov](https://codecov.io/gh/Textualize/rich/branch/master/graph/badge.svg)](https://codecov.io/gh/Textualize/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\n\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\n • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\n • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\n • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)\n • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\n • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\n • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)\n • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\n • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)\n • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\n • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)\n • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\n • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)\n • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)\n  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)\n • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n\nRich 是一款提供終端機介面中 _豐富的_ 文字效果及精美的格式設定的 Python 函式庫。\n\n[Rich API](https://rich.readthedocs.io/en/latest/) 讓終端機介面加上色彩及樣式變得易如反掌。Rich 也可以繪製漂亮的表格、進度條、Markdown、語法醒目標示的程式碼、Traceback（追溯）……。\n\n![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\n關於 Rich 的介紹，請參見 [@fishnets88](https://twitter.com/fishnets88) 在 [calmcode.io](https://calmcode.io/rich/introduction.html) 錄製的影片。\n\n[看看其他人對於 Rich 的討論](https://www.willmcgugan.com/blog/pages/post/rich-tweets/)。\n\n## 相容性\n\nRich 可在 Linux、macOS、Windows 上運作。在新的 Windows Terminal 中可支援顯示全彩及 Emoji，但傳統的終端機中僅支援 16 色。Rich 最低需要的 Python 版本為 3.6.3。\n\nRich 可在 [Jupyter notebooks](https://jupyter.org/) 上使用，無須額外設定。\n\n## 安裝\n\n以 `pip` 或 PyPI 套件管理器安裝。\n\n```sh\npython -m pip install rich\n```\n\n以此命令測試 Rich 在終端機的輸出效果：\n\n```sh\npython -m rich\n```\n\n## Rich Print\n\n匯入 [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) 方法就可以輕鬆地讓程式進行 rich 輸出，rich print 與 Python 內建的函式用法相似。試試：\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## Rich REPL\n\nRich 可以安裝在 Python REPL 中，如此一來就可以漂亮的輸出與突顯標示任何資料結構。\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## 使用 Console\n\n匯入並建構 [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) 物件，以更全面地控制 rich 終端機內容。\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nConsole 物件有個 `print` 方法，且刻意設計的與內建 `print` 函式相似。參考此範例：\n\n```python\nconsole.print(\"Hello\", \"World!\")\n```\n\n如同預期的，這會將 `\"Hello World!\"` 印在終端機。須注意不同於內建的 `print` 函式，Rich 會自動將過長的文字換行，以符合終端機的寬度。\n\n有幾種加上顏色及樣式的方式。您可以用 `style` 引數設定輸出內容的樣式，參考此範例：\n\n```python\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\n輸出結果如下圖：\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\n\n介紹完了如何對整行文字設定樣式，接著來看看更細部的使用。Rich 可以接受類似 [bbcode](https://en.wikipedia.org/wiki/BBCode) 的語法，對個別文字設定樣式。參考此範例：\n\n```python\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\n\n您可以用 Console 物件不費吹灰之力地達成細膩的輸出效果。參閱 [Console API](https://rich.readthedocs.io/en/latest/console.html) 說明文件以了解細節。\n\n## Rich Inspect\n\nRich 提供了 [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) 函式，可以對任何 Python 物件，如 class、instance 或 builtin ，為其產生一份報告。\n\n```python\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)\n\n參閱 [inspect 說明文件](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) 以了解細節。\n\n# Rich 函式庫\n\nRich 包含了一系列可繪製的物件，您可以使用它們來印出精美的畫面，或者協助偵錯程式碼。\n\n按一下子標題以了解細節：\n\n<details>\n<summary>Log</summary>\n\nConsole 物件提供了 `log()` 方法，使用方式與 `print()` 類似，但還多了一欄來顯示目前時間、進行呼叫的檔案及行號。預設情況下 Rich 會語法醒目標示 Python 的結構及 repr 字串。若使用於字典或串列這類集合性物件，Rich 會將其漂亮地印出來，以符合可用空間。此範例示範了這些功能。\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\n上面的程式碼會產生下圖結果：\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)\n\n注意到 `log_locals` 引數，可用來輸出一張表格，用來顯示 log 方法被呼叫時，區域變數的內容。\n\nlog 方法可用於伺服器上長時間運作的程式，也很適合一般程式偵錯用途。\n\n</details>\n<details>\n<summary>Logging Handler</summary>\n\n您也可以使用內建的 [Handler 類別](https://rich.readthedocs.io/en/latest/logging.html) 來將 Python logging 模組的輸出內容格式化並賦予色彩：\n\n![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)\n\n</details>\n\n<details>\n<summary>Emoji</summary>\n\n以一對冒號包住表情符號的名稱，來透過 console 插入 Emoji。參考範例：\n\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\n請謹慎使用此功能。\n\n</details>\n\n<details>\n<summary>表格</summary>\n\nRich 可以用 unicode box 字元繪製彈性的 [表格](https://rich.readthedocs.io/en/latest/tables.html)。格式設定十分多元，包含框線、樣式、儲存格對齊……。\n\n![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)\n\n上圖的動畫效果是以 [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) 產生的，該檔案位於 examples 資料夾。\n\n參考這個簡單的表格範例：\n\n```python\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\n執行結果如圖：\n\n![table](https://github.com/textualize/rich/raw/master/imgs/table.png)\n\n請留意，主控台標記的呈現方式與 `print()`、`log()` 相同。事實上，由 Rich 繪製的任何東西都可以被放在任何標題、列，甚至其他表格裡。\n\n`Table` 類別很聰明，能夠自動調整欄寬來配合終端機的大小，也會在需要時自動將文字換行。此範例的程式碼與上一個相同，然而終端機變小了一點：\n\n![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\n\n</details>\n\n<details>\n<summary>進度條</summary>\n\nRich 可繪製多個不閃爍的 [進度條](https://rich.readthedocs.io/en/latest/progress.html)，以追蹤需時較久的工作。\n\n基本的使用方式，是將序列放在 `track` 函式中，再對其結果疊代。參考此範例：\n\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\n新增多個進度條也不是難事，來看看說明文件中的範例：\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\n您可以調整要顯示的狀態欄位。內建的欄位包含完成百分比、檔案大小、讀寫速度及剩餘時間。來看看另一個用來顯示下載進度的範例：\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\n\n想嘗試看看嗎？您可以在 [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) 取得此範例程式。此程式可以在下載多個檔案時顯示各自的進度。\n\n</details>\n\n<details>\n<summary>狀態</summary>\n\n有些狀況下很難估計進度，就可以使用 [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) 方法，此方法會顯示「spinner」動畫及訊息。該動畫播放時，仍可正常操作主控台。參考此範例：\n\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\n終端機的顯示效果如下：\n\n![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\n\n該 spinner 動畫乃借用自 [cli-spinners](https://www.npmjs.com/package/cli-spinners)。可以用 `spinner` 參數指定 spinner 樣式。執行此命令以顯示可用的值：\n\n```\npython -m rich.spinner\n```\n\n此命令在終端機的輸出結果如下圖：\n\n![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\n\n</details>\n\n<details>\n<summary>樹</summary>\n\nRich 可以用導引線繪製一棵 [樹](https://rich.readthedocs.io/en/latest/tree.html)。樹很適合用來顯示檔案結構，或其他繼承性的資料。\n\n可以用文字或其他 Rich 能繪製的元素作為樹的標籤。執行下列程式碼來看看效果：\n\n```\npython -m rich.tree\n```\n\n這會產生下圖的結果：\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)\n\n您可以參考 [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) 範例程式，此程式可以樹狀圖展示目錄結構，如同 Linux 的 `tree` 命令。\n\n</details>\n\n<details>\n<summary>資料欄</summary>\n\nRich 可以將內容呈現於整齊的 [資料欄](https://rich.readthedocs.io/en/latest/columns.html) 中，其欄寬可為等寬或最適寬度。此範例仿作了 macOS / Linux 系統中 `ls` 命令的基本功能，可以用資料欄列出目錄：\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\n此螢幕截圖為 [資料欄範例](https://github.com/textualize/rich/blob/master/examples/columns.py) 的輸出結果。此程式從某 API 取得資料，並以資料欄呈現：\n\n![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)\n\n</details>\n\n<details>\n<summary>Markdown</summary>\n\nRich 可以繪製 [Markdown](https://rich.readthedocs.io/en/latest/markdown.html) 並處理了將其轉換為終端機格式的大量工作。\n\n先匯入 `Markdown` 類別，再以內容為 Markdown 語言的字串建構一個物件，接著將其印到 console。參考此範例：\n\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\n執行結果如下圖：\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\n\n</details>\n\n<details>\n<summary>語法醒目標示</summary>\n\nRich 使用了 [pygments](https://pygments.org/) 函式庫來實作 [語法醒目標示](https://rich.readthedocs.io/en/latest/syntax.html) 功能。使用方式與繪製 Markdown 相似，先建構 `Syntax` 物件並將其印到 console。參考此範例：\n\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\n執行結果如下圖：\n\n![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\n\n</details>\n\n<details>\n<summary>Tracebacks（追溯）</summary>\n\nRich 可以繪製 [漂亮的 tracebacks](https://rich.readthedocs.io/en/latest/traceback.html)，相較標準的 Python traceback 顯示了更多程式碼且更好懂。您可以將 Rich 設為預設的 traceback handler（處理常式），如此一來所有未接住的例外都由 Rich 呈現。\n\n它在 macOS 上執行的效果如圖（Linux 上差異不大）：\n\n![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)\n\n</details>\n\n所有可由 Rich 繪製的物件都用到了 [Console 協定](https://rich.readthedocs.io/en/latest/protocol.html)，您也可以依此實作自訂的 Rich 內容。\n\n# Rich 企業版\n\n可在 Tidelift 訂閱方案取得。\n\nRich 及其他數以千計的套件維護者正與 Tidelift 合作，以提供開放原始碼套件的商業性支援。此計畫能協助您節省時間、避開風險，同時也讓套件的維護者獲得報酬。[了解更多。](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n# 使用 Rich 的專案\n\n以下列出幾個使用 Rich 的專案：\n\n- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)\n  a python package for the visualization of three dimensional neuro-anatomical data\n- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)\n  Automated decryption tool\n- [emeryberger/scalene](https://github.com/emeryberger/scalene)\n  a high-performance, high-precision CPU and memory profiler for Python\n- [hedythedev/StarCli](https://github.com/hedythedev/starcli)\n  Browse GitHub trending projects from your command line\n- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)\n  This tool scans for a number of common, vulnerable components (openssl, libpng, libxml2, expat and a few others) to let you know if your system includes common libraries with known vulnerabilities.\n- [nf-core/tools](https://github.com/nf-core/tools)\n  Python package with helper tools for the nf-core community.\n- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)\n  pdb + Rich library for enhanced debugging\n- [plant99/felicette](https://github.com/plant99/felicette)\n  Satellite imagery for dummies.\n- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)\n  Automate & test 10x faster with Selenium & pytest. Batteries included.\n- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)\n  Automagically synchronize subtitles with video.\n- [tryolabs/norfair](https://github.com/tryolabs/norfair)\n  Lightweight Python library for adding real-time 2D object tracking to any detector.\n- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Ansible-lint checks playbooks for practices and behaviour that could potentially be improved\n- [ansible-community/molecule](https://github.com/ansible-community/molecule) Ansible Molecule testing framework\n- +[Many more](https://github.com/textualize/rich/network/dependents)!\n\n<!-- This is a test, no need to translate -->\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.1884765625,
          "content": "## Security contact information\n\nTo report a security vulnerability, please use the [Tidelift security contact](https://tidelift.com/security). Tidelift will coordinate the fix and disclosure.\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "asv.conf.json",
          "type": "blob",
          "size": 0.83984375,
          "content": "{\n  \"version\": 1,\n  \"project\": \"rich\",\n  \"project_url\": \"https://github.com/Textualize/rich\",\n  \"repo\": \".\",\n  \"repo_subdir\": \"\",\n  \"install_command\": [\n    \"in-dir={env_dir} python -mpip install {wheel_file}\"\n  ],\n  \"uninstall_command\": [\n    \"return-code=any python -mpip uninstall -y {project}\"\n  ],\n  \"build_command\": [\n    \"pip install poetry\",\n    \"python setup.py build\",\n    \"PIP_NO_BUILD_ISOLATION=false python -mpip wheel --no-deps --no-index -w {build_cache_dir} {build_dir}\"\n  ],\n  \"branches\": [\n    \"master\"\n  ],\n  \"html_dir\": \"./benchmarks/html\",\n  \"results_dir\": \"./benchmarks/results\",\n  \"env_dir\": \"./benchmarks/env\",\n  \"dvcs\": \"git\",\n  \"environment_type\": \"virtualenv\",\n  \"install_timeout\": 180,\n  \"show_commit_url\": \"http://github.com/Textualize/rich/commit/\",\n  \"pythons\": [\n    \"3.10\"\n  ],\n  \"matrix\": {\n    \"setuptools\": [\"59.2.0\"]\n  }\n}\n"
        },
        {
          "name": "asvhashfile",
          "type": "blob",
          "size": 0.177734375,
          "content": "v10.0.0\nv10.2.2\nv10.6.0\nv10.7.0\nv10.8.0\nv10.9.0\nv11.0.0\nv11.1.0\nv11.2.0\nv12.0.0\nv12.0.1\nv12.1.0\nv12.2.0\nv12.3.0\nv12.4.0\nv12.4.1\nv12.4.2\nv12.4.3\nv12.4.4\nv12.5.0\nv8.0.0\nv9.13.0\nv9.5.1\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "faq.yml",
          "type": "blob",
          "size": 0.291015625,
          "content": "# FAQtory settings\n\nfaq_url: \"https://github.com/textualize/rich/blob/master/FAQ.md\" # Replace this with the URL to your FAQ.md!\n\nquestions_path: \"./questions\" # Where questions should be stored\noutput_path: \"./FAQ.md\" # Where FAQ.md should be generated \ntemplates_path: \".faq\" # Path to templates\n"
        },
        {
          "name": "imgs",
          "type": "tree",
          "content": null
        },
        {
          "name": "make.bat",
          "type": "blob",
          "size": 0.7802734375,
          "content": "@ECHO OFF\r\n\r\npushd %~dp0\r\n\r\nREM Command file for Sphinx documentation\r\n\r\nif \"%SPHINXBUILD%\" == \"\" (\r\n\tset SPHINXBUILD=sphinx-build\r\n)\r\nset SOURCEDIR=source\r\nset BUILDDIR=build\r\n\r\nif \"%1\" == \"\" goto help\r\n\r\n%SPHINXBUILD% >NUL 2>NUL\r\nif errorlevel 9009 (\r\n\techo.\r\n\techo.The 'sphinx-build' command was not found. Make sure you have Sphinx\r\n\techo.installed, then set the SPHINXBUILD environment variable to point\r\n\techo.to the full path of the 'sphinx-build' executable. Alternatively you\r\n\techo.may add the Sphinx directory to PATH.\r\n\techo.\r\n\techo.If you don't have Sphinx installed, grab it from\r\n\techo.http://sphinx-doc.org/\r\n\texit /b 1\r\n)\r\n\r\n%SPHINXBUILD% -M %1 %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%\r\ngoto end\r\n\r\n:help\r\n%SPHINXBUILD% -M help %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%\r\n\r\n:end\r\npopd\r\n"
        },
        {
          "name": "poetry.lock",
          "type": "blob",
          "size": 53.25390625,
          "content": "# This file is automatically @generated by Poetry 1.8.2 and should not be changed by hand.\n\n[[package]]\nname = \"appnope\"\nversion = \"0.1.4\"\ndescription = \"Disable App Nap on macOS >= 10.9\"\noptional = true\npython-versions = \">=3.6\"\nfiles = [\n    {file = \"appnope-0.1.4-py2.py3-none-any.whl\", hash = \"sha256:502575ee11cd7a28c0205f379b525beefebab9d161b7c964670864014ed7213c\"},\n    {file = \"appnope-0.1.4.tar.gz\", hash = \"sha256:1de3860566df9caf38f01f86f65e0e13e379af54f9e4bee1e66b48f2efffd1ee\"},\n]\n\n[[package]]\nname = \"asttokens\"\nversion = \"2.4.1\"\ndescription = \"Annotate AST trees with source code positions\"\noptional = true\npython-versions = \"*\"\nfiles = [\n    {file = \"asttokens-2.4.1-py2.py3-none-any.whl\", hash = \"sha256:051ed49c3dcae8913ea7cd08e46a606dba30b79993209636c4875bc1d637bc24\"},\n    {file = \"asttokens-2.4.1.tar.gz\", hash = \"sha256:b03869718ba9a6eb027e134bfdf69f38a236d681c83c160d510768af11254ba0\"},\n]\n\n[package.dependencies]\nsix = \">=1.12.0\"\n\n[package.extras]\nastroid = [\"astroid (>=1,<2)\", \"astroid (>=2,<4)\"]\ntest = [\"astroid (>=1,<2)\", \"astroid (>=2,<4)\", \"pytest\"]\n\n[[package]]\nname = \"asv\"\nversion = \"0.5.1\"\ndescription = \"Airspeed Velocity: A simple Python history benchmarking tool\"\noptional = false\npython-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\"\nfiles = [\n    {file = \"asv-0.5.1.tar.gz\", hash = \"sha256:805fc3cc46c0bcf3e7baeaa16a12e4b92f1276c25490db4cb80fc541afa52bfc\"},\n]\n\n[package.dependencies]\nsix = \">=1.4\"\n\n[package.extras]\nhg = [\"python-hglib (>=1.5)\"]\ntesting = [\"feedparser\", \"filelock\", \"numpy\", \"pip\", \"pytest (>=4.4.0)\", \"pytest (>=4.4.0,<5.0)\", \"pytest-faulthandler\", \"pytest-faulthandler (<2.0)\", \"pytest-rerunfailures (>=8.0)\", \"pytest-rerunfailures (>=8.0,<9.0)\", \"pytest-timeout\", \"pytest-xdist\", \"python-hglib\", \"scipy\", \"selenium\", \"setuptools\", \"six\", \"virtualenv (>=1.7)\", \"wheel\"]\n\n[[package]]\nname = \"attrs\"\nversion = \"21.4.0\"\ndescription = \"Classes Without Boilerplate\"\noptional = false\npython-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\"\nfiles = [\n    {file = \"attrs-21.4.0-py2.py3-none-any.whl\", hash = \"sha256:2d27e3784d7a565d36ab851fe94887c5eccd6a463168875832a1be79c82828b4\"},\n    {file = \"attrs-21.4.0.tar.gz\", hash = \"sha256:626ba8234211db98e869df76230a137c4c40a12d72445c45d5f5b716f076e2fd\"},\n]\n\n[package.extras]\ndev = [\"cloudpickle\", \"coverage[toml] (>=5.0.2)\", \"furo\", \"hypothesis\", \"mypy\", \"pre-commit\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"six\", \"sphinx\", \"sphinx-notfound-page\", \"zope.interface\"]\ndocs = [\"furo\", \"sphinx\", \"sphinx-notfound-page\", \"zope.interface\"]\ntests = [\"cloudpickle\", \"coverage[toml] (>=5.0.2)\", \"hypothesis\", \"mypy\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"six\", \"zope.interface\"]\ntests-no-zope = [\"cloudpickle\", \"coverage[toml] (>=5.0.2)\", \"hypothesis\", \"mypy\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"six\"]\n\n[[package]]\nname = \"backcall\"\nversion = \"0.2.0\"\ndescription = \"Specifications for callback functions passed in to an API\"\noptional = true\npython-versions = \"*\"\nfiles = [\n    {file = \"backcall-0.2.0-py2.py3-none-any.whl\", hash = \"sha256:fbbce6a29f263178a1f7915c1940bde0ec2b2a967566fe1c65c1dfb7422bd255\"},\n    {file = \"backcall-0.2.0.tar.gz\", hash = \"sha256:5cbdbf27be5e7cfadb448baf0aa95508f91f2bbc6c6437cd9cd06e2a4c215e1e\"},\n]\n\n[[package]]\nname = \"black\"\nversion = \"22.12.0\"\ndescription = \"The uncompromising code formatter.\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"black-22.12.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9eedd20838bd5d75b80c9f5487dbcb06836a43833a37846cf1d8c1cc01cef59d\"},\n    {file = \"black-22.12.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:159a46a4947f73387b4d83e87ea006dbb2337eab6c879620a3ba52699b1f4351\"},\n    {file = \"black-22.12.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d30b212bffeb1e252b31dd269dfae69dd17e06d92b87ad26e23890f3efea366f\"},\n    {file = \"black-22.12.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:7412e75863aa5c5411886804678b7d083c7c28421210180d67dfd8cf1221e1f4\"},\n    {file = \"black-22.12.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:c116eed0efb9ff870ded8b62fe9f28dd61ef6e9ddd28d83d7d264a38417dcee2\"},\n    {file = \"black-22.12.0-cp37-cp37m-win_amd64.whl\", hash = \"sha256:1f58cbe16dfe8c12b7434e50ff889fa479072096d79f0a7f25e4ab8e94cd8350\"},\n    {file = \"black-22.12.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:77d86c9f3db9b1bf6761244bc0b3572a546f5fe37917a044e02f3166d5aafa7d\"},\n    {file = \"black-22.12.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:82d9fe8fee3401e02e79767016b4907820a7dc28d70d137eb397b92ef3cc5bfc\"},\n    {file = \"black-22.12.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:101c69b23df9b44247bd88e1d7e90154336ac4992502d4197bdac35dd7ee3320\"},\n    {file = \"black-22.12.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:559c7a1ba9a006226f09e4916060982fd27334ae1998e7a38b3f33a37f7a2148\"},\n    {file = \"black-22.12.0-py3-none-any.whl\", hash = \"sha256:436cc9167dd28040ad90d3b404aec22cedf24a6e4d7de221bec2730ec0c97bcf\"},\n    {file = \"black-22.12.0.tar.gz\", hash = \"sha256:229351e5a18ca30f447bf724d007f890f97e13af070bb6ad4c0a441cd7596a2f\"},\n]\n\n[package.dependencies]\nclick = \">=8.0.0\"\nmypy-extensions = \">=0.4.3\"\npathspec = \">=0.9.0\"\nplatformdirs = \">=2\"\ntomli = {version = \">=1.1.0\", markers = \"python_full_version < \\\"3.11.0a7\\\"\"}\ntyping-extensions = {version = \">=3.10.0.0\", markers = \"python_version < \\\"3.10\\\"\"}\n\n[package.extras]\ncolorama = [\"colorama (>=0.4.3)\"]\nd = [\"aiohttp (>=3.7.4)\"]\njupyter = [\"ipython (>=7.8.0)\", \"tokenize-rt (>=3.2.0)\"]\nuvloop = [\"uvloop (>=0.15.2)\"]\n\n[[package]]\nname = \"cfgv\"\nversion = \"3.4.0\"\ndescription = \"Validate configuration and produce human readable error messages.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"cfgv-3.4.0-py2.py3-none-any.whl\", hash = \"sha256:b7265b1f29fd3316bfcd2b330d63d024f2bfd8bcb8b0272f8e19a504856c48f9\"},\n    {file = \"cfgv-3.4.0.tar.gz\", hash = \"sha256:e52591d4c5f5dead8e0f673fb16db7949d2cfb3f7da4582893288f0ded8fe560\"},\n]\n\n[[package]]\nname = \"click\"\nversion = \"8.1.7\"\ndescription = \"Composable command line interface toolkit\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"click-8.1.7-py3-none-any.whl\", hash = \"sha256:ae74fb96c20a0277a1d615f1e4d73c8414f5a98db8b799a7931d1582f3390c28\"},\n    {file = \"click-8.1.7.tar.gz\", hash = \"sha256:ca9853ad459e787e2192211578cc907e7594e294c7ccc834310722b41b9ca6de\"},\n]\n\n[package.dependencies]\ncolorama = {version = \"*\", markers = \"platform_system == \\\"Windows\\\"\"}\n\n[[package]]\nname = \"colorama\"\nversion = \"0.4.6\"\ndescription = \"Cross-platform colored terminal text.\"\noptional = false\npython-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7\"\nfiles = [\n    {file = \"colorama-0.4.6-py2.py3-none-any.whl\", hash = \"sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6\"},\n    {file = \"colorama-0.4.6.tar.gz\", hash = \"sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44\"},\n]\n\n[[package]]\nname = \"comm\"\nversion = \"0.2.2\"\ndescription = \"Jupyter Python Comm implementation, for usage in ipykernel, xeus-python etc.\"\noptional = true\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"comm-0.2.2-py3-none-any.whl\", hash = \"sha256:e6fb86cb70ff661ee8c9c14e7d36d6de3b4066f1441be4063df9c5009f0a64d3\"},\n    {file = \"comm-0.2.2.tar.gz\", hash = \"sha256:3fd7a84065306e07bea1773df6eb8282de51ba82f77c72f9c85716ab11fe980e\"},\n]\n\n[package.dependencies]\ntraitlets = \">=4\"\n\n[package.extras]\ntest = [\"pytest\"]\n\n[[package]]\nname = \"coverage\"\nversion = \"7.6.1\"\ndescription = \"Code coverage measurement for Python\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"coverage-7.6.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:b06079abebbc0e89e6163b8e8f0e16270124c154dc6e4a47b413dd538859af16\"},\n    {file = \"coverage-7.6.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:cf4b19715bccd7ee27b6b120e7e9dd56037b9c0681dcc1adc9ba9db3d417fa36\"},\n    {file = \"coverage-7.6.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e61c0abb4c85b095a784ef23fdd4aede7a2628478e7baba7c5e3deba61070a02\"},\n    {file = \"coverage-7.6.1-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:fd21f6ae3f08b41004dfb433fa895d858f3f5979e7762d052b12aef444e29afc\"},\n    {file = \"coverage-7.6.1-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8f59d57baca39b32db42b83b2a7ba6f47ad9c394ec2076b084c3f029b7afca23\"},\n    {file = \"coverage-7.6.1-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:a1ac0ae2b8bd743b88ed0502544847c3053d7171a3cff9228af618a068ed9c34\"},\n    {file = \"coverage-7.6.1-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:e6a08c0be454c3b3beb105c0596ebdc2371fab6bb90c0c0297f4e58fd7e1012c\"},\n    {file = \"coverage-7.6.1-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:f5796e664fe802da4f57a168c85359a8fbf3eab5e55cd4e4569fbacecc903959\"},\n    {file = \"coverage-7.6.1-cp310-cp310-win32.whl\", hash = \"sha256:7bb65125fcbef8d989fa1dd0e8a060999497629ca5b0efbca209588a73356232\"},\n    {file = \"coverage-7.6.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:3115a95daa9bdba70aea750db7b96b37259a81a709223c8448fa97727d546fe0\"},\n    {file = \"coverage-7.6.1-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:7dea0889685db8550f839fa202744652e87c60015029ce3f60e006f8c4462c93\"},\n    {file = \"coverage-7.6.1-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:ed37bd3c3b063412f7620464a9ac1314d33100329f39799255fb8d3027da50d3\"},\n    {file = \"coverage-7.6.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d85f5e9a5f8b73e2350097c3756ef7e785f55bd71205defa0bfdaf96c31616ff\"},\n    {file = \"coverage-7.6.1-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:9bc572be474cafb617672c43fe989d6e48d3c83af02ce8de73fff1c6bb3c198d\"},\n    {file = \"coverage-7.6.1-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0c0420b573964c760df9e9e86d1a9a622d0d27f417e1a949a8a66dd7bcee7bc6\"},\n    {file = \"coverage-7.6.1-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:1f4aa8219db826ce6be7099d559f8ec311549bfc4046f7f9fe9b5cea5c581c56\"},\n    {file = \"coverage-7.6.1-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:fc5a77d0c516700ebad189b587de289a20a78324bc54baee03dd486f0855d234\"},\n    {file = \"coverage-7.6.1-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:b48f312cca9621272ae49008c7f613337c53fadca647d6384cc129d2996d1133\"},\n    {file = \"coverage-7.6.1-cp311-cp311-win32.whl\", hash = \"sha256:1125ca0e5fd475cbbba3bb67ae20bd2c23a98fac4e32412883f9bcbaa81c314c\"},\n    {file = \"coverage-7.6.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:8ae539519c4c040c5ffd0632784e21b2f03fc1340752af711f33e5be83a9d6c6\"},\n    {file = \"coverage-7.6.1-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:95cae0efeb032af8458fc27d191f85d1717b1d4e49f7cb226cf526ff28179778\"},\n    {file = \"coverage-7.6.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:5621a9175cf9d0b0c84c2ef2b12e9f5f5071357c4d2ea6ca1cf01814f45d2391\"},\n    {file = \"coverage-7.6.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:260933720fdcd75340e7dbe9060655aff3af1f0c5d20f46b57f262ab6c86a5e8\"},\n    {file = \"coverage-7.6.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:07e2ca0ad381b91350c0ed49d52699b625aab2b44b65e1b4e02fa9df0e92ad2d\"},\n    {file = \"coverage-7.6.1-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:c44fee9975f04b33331cb8eb272827111efc8930cfd582e0320613263ca849ca\"},\n    {file = \"coverage-7.6.1-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:877abb17e6339d96bf08e7a622d05095e72b71f8afd8a9fefc82cf30ed944163\"},\n    {file = \"coverage-7.6.1-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:3e0cadcf6733c09154b461f1ca72d5416635e5e4ec4e536192180d34ec160f8a\"},\n    {file = \"coverage-7.6.1-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:c3c02d12f837d9683e5ab2f3d9844dc57655b92c74e286c262e0fc54213c216d\"},\n    {file = \"coverage-7.6.1-cp312-cp312-win32.whl\", hash = \"sha256:e05882b70b87a18d937ca6768ff33cc3f72847cbc4de4491c8e73880766718e5\"},\n    {file = \"coverage-7.6.1-cp312-cp312-win_amd64.whl\", hash = \"sha256:b5d7b556859dd85f3a541db6a4e0167b86e7273e1cdc973e5b175166bb634fdb\"},\n    {file = \"coverage-7.6.1-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:a4acd025ecc06185ba2b801f2de85546e0b8ac787cf9d3b06e7e2a69f925b106\"},\n    {file = \"coverage-7.6.1-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:a6d3adcf24b624a7b778533480e32434a39ad8fa30c315208f6d3e5542aeb6e9\"},\n    {file = \"coverage-7.6.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d0c212c49b6c10e6951362f7c6df3329f04c2b1c28499563d4035d964ab8e08c\"},\n    {file = \"coverage-7.6.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:6e81d7a3e58882450ec4186ca59a3f20a5d4440f25b1cff6f0902ad890e6748a\"},\n    {file = \"coverage-7.6.1-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:78b260de9790fd81e69401c2dc8b17da47c8038176a79092a89cb2b7d945d060\"},\n    {file = \"coverage-7.6.1-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:a78d169acd38300060b28d600344a803628c3fd585c912cacc9ea8790fe96862\"},\n    {file = \"coverage-7.6.1-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:2c09f4ce52cb99dd7505cd0fc8e0e37c77b87f46bc9c1eb03fe3bc9991085388\"},\n    {file = \"coverage-7.6.1-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:6878ef48d4227aace338d88c48738a4258213cd7b74fd9a3d4d7582bb1d8a155\"},\n    {file = \"coverage-7.6.1-cp313-cp313-win32.whl\", hash = \"sha256:44df346d5215a8c0e360307d46ffaabe0f5d3502c8a1cefd700b34baf31d411a\"},\n    {file = \"coverage-7.6.1-cp313-cp313-win_amd64.whl\", hash = \"sha256:8284cf8c0dd272a247bc154eb6c95548722dce90d098c17a883ed36e67cdb129\"},\n    {file = \"coverage-7.6.1-cp313-cp313t-macosx_10_13_x86_64.whl\", hash = \"sha256:d3296782ca4eab572a1a4eca686d8bfb00226300dcefdf43faa25b5242ab8a3e\"},\n    {file = \"coverage-7.6.1-cp313-cp313t-macosx_11_0_arm64.whl\", hash = \"sha256:502753043567491d3ff6d08629270127e0c31d4184c4c8d98f92c26f65019962\"},\n    {file = \"coverage-7.6.1-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6a89ecca80709d4076b95f89f308544ec8f7b4727e8a547913a35f16717856cb\"},\n    {file = \"coverage-7.6.1-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:a318d68e92e80af8b00fa99609796fdbcdfef3629c77c6283566c6f02c6d6704\"},\n    {file = \"coverage-7.6.1-cp313-cp313t-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:13b0a73a0896988f053e4fbb7de6d93388e6dd292b0d87ee51d106f2c11b465b\"},\n    {file = \"coverage-7.6.1-cp313-cp313t-musllinux_1_2_aarch64.whl\", hash = \"sha256:4421712dbfc5562150f7554f13dde997a2e932a6b5f352edcce948a815efee6f\"},\n    {file = \"coverage-7.6.1-cp313-cp313t-musllinux_1_2_i686.whl\", hash = \"sha256:166811d20dfea725e2e4baa71fffd6c968a958577848d2131f39b60043400223\"},\n    {file = \"coverage-7.6.1-cp313-cp313t-musllinux_1_2_x86_64.whl\", hash = \"sha256:225667980479a17db1048cb2bf8bfb39b8e5be8f164b8f6628b64f78a72cf9d3\"},\n    {file = \"coverage-7.6.1-cp313-cp313t-win32.whl\", hash = \"sha256:170d444ab405852903b7d04ea9ae9b98f98ab6d7e63e1115e82620807519797f\"},\n    {file = \"coverage-7.6.1-cp313-cp313t-win_amd64.whl\", hash = \"sha256:b9f222de8cded79c49bf184bdbc06630d4c58eec9459b939b4a690c82ed05657\"},\n    {file = \"coverage-7.6.1-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:6db04803b6c7291985a761004e9060b2bca08da6d04f26a7f2294b8623a0c1a0\"},\n    {file = \"coverage-7.6.1-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:f1adfc8ac319e1a348af294106bc6a8458a0f1633cc62a1446aebc30c5fa186a\"},\n    {file = \"coverage-7.6.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a95324a9de9650a729239daea117df21f4b9868ce32e63f8b650ebe6cef5595b\"},\n    {file = \"coverage-7.6.1-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:b43c03669dc4618ec25270b06ecd3ee4fa94c7f9b3c14bae6571ca00ef98b0d3\"},\n    {file = \"coverage-7.6.1-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8929543a7192c13d177b770008bc4e8119f2e1f881d563fc6b6305d2d0ebe9de\"},\n    {file = \"coverage-7.6.1-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:a09ece4a69cf399510c8ab25e0950d9cf2b42f7b3cb0374f95d2e2ff594478a6\"},\n    {file = \"coverage-7.6.1-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:9054a0754de38d9dbd01a46621636689124d666bad1936d76c0341f7d71bf569\"},\n    {file = \"coverage-7.6.1-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:0dbde0f4aa9a16fa4d754356a8f2e36296ff4d83994b2c9d8398aa32f222f989\"},\n    {file = \"coverage-7.6.1-cp38-cp38-win32.whl\", hash = \"sha256:da511e6ad4f7323ee5702e6633085fb76c2f893aaf8ce4c51a0ba4fc07580ea7\"},\n    {file = \"coverage-7.6.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:3f1156e3e8f2872197af3840d8ad307a9dd18e615dc64d9ee41696f287c57ad8\"},\n    {file = \"coverage-7.6.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:abd5fd0db5f4dc9289408aaf34908072f805ff7792632250dcb36dc591d24255\"},\n    {file = \"coverage-7.6.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:547f45fa1a93154bd82050a7f3cddbc1a7a4dd2a9bf5cb7d06f4ae29fe94eaf8\"},\n    {file = \"coverage-7.6.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:645786266c8f18a931b65bfcefdbf6952dd0dea98feee39bd188607a9d307ed2\"},\n    {file = \"coverage-7.6.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:9e0b2df163b8ed01d515807af24f63de04bebcecbd6c3bfeff88385789fdf75a\"},\n    {file = \"coverage-7.6.1-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:609b06f178fe8e9f89ef676532760ec0b4deea15e9969bf754b37f7c40326dbc\"},\n    {file = \"coverage-7.6.1-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:702855feff378050ae4f741045e19a32d57d19f3e0676d589df0575008ea5004\"},\n    {file = \"coverage-7.6.1-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:2bdb062ea438f22d99cba0d7829c2ef0af1d768d1e4a4f528087224c90b132cb\"},\n    {file = \"coverage-7.6.1-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:9c56863d44bd1c4fe2abb8a4d6f5371d197f1ac0ebdee542f07f35895fc07f36\"},\n    {file = \"coverage-7.6.1-cp39-cp39-win32.whl\", hash = \"sha256:6e2cd258d7d927d09493c8df1ce9174ad01b381d4729a9d8d4e38670ca24774c\"},\n    {file = \"coverage-7.6.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:06a737c882bd26d0d6ee7269b20b12f14a8704807a01056c80bb881a4b2ce6ca\"},\n    {file = \"coverage-7.6.1-pp38.pp39.pp310-none-any.whl\", hash = \"sha256:e9a6e0eb86070e8ccaedfbd9d38fec54864f3125ab95419970575b42af7541df\"},\n    {file = \"coverage-7.6.1.tar.gz\", hash = \"sha256:953510dfb7b12ab69d20135a0662397f077c59b1e6379a768e97c59d852ee51d\"},\n]\n\n[package.dependencies]\ntomli = {version = \"*\", optional = true, markers = \"python_full_version <= \\\"3.11.0a6\\\" and extra == \\\"toml\\\"\"}\n\n[package.extras]\ntoml = [\"tomli\"]\n\n[[package]]\nname = \"decorator\"\nversion = \"5.1.1\"\ndescription = \"Decorators for Humans\"\noptional = true\npython-versions = \">=3.5\"\nfiles = [\n    {file = \"decorator-5.1.1-py3-none-any.whl\", hash = \"sha256:b8c3f85900b9dc423225913c5aace94729fe1fa9763b38939a95226f02d37186\"},\n    {file = \"decorator-5.1.1.tar.gz\", hash = \"sha256:637996211036b6385ef91435e4fae22989472f9d571faba8927ba8253acbc330\"},\n]\n\n[[package]]\nname = \"distlib\"\nversion = \"0.3.8\"\ndescription = \"Distribution utilities\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"distlib-0.3.8-py2.py3-none-any.whl\", hash = \"sha256:034db59a0b96f8ca18035f36290806a9a6e6bd9d1ff91e45a7f172eb17e51784\"},\n    {file = \"distlib-0.3.8.tar.gz\", hash = \"sha256:1530ea13e350031b6312d8580ddb6b27a104275a31106523b8f123787f494f64\"},\n]\n\n[[package]]\nname = \"exceptiongroup\"\nversion = \"1.2.2\"\ndescription = \"Backport of PEP 654 (exception groups)\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"exceptiongroup-1.2.2-py3-none-any.whl\", hash = \"sha256:3111b9d131c238bec2f8f516e123e14ba243563fb135d3fe885990585aa7795b\"},\n    {file = \"exceptiongroup-1.2.2.tar.gz\", hash = \"sha256:47c2edf7c6738fafb49fd34290706d1a1a2f4d1c6df275526b62cbb4aa5393cc\"},\n]\n\n[package.extras]\ntest = [\"pytest (>=6)\"]\n\n[[package]]\nname = \"executing\"\nversion = \"2.1.0\"\ndescription = \"Get the currently executing AST node of a frame, and other information\"\noptional = true\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"executing-2.1.0-py2.py3-none-any.whl\", hash = \"sha256:8d63781349375b5ebccc3142f4b30350c0cd9c79f921cde38be2be4637e98eaf\"},\n    {file = \"executing-2.1.0.tar.gz\", hash = \"sha256:8ea27ddd260da8150fa5a708269c4a10e76161e2496ec3e587da9e3c0fe4b9ab\"},\n]\n\n[package.extras]\ntests = [\"asttokens (>=2.1.0)\", \"coverage\", \"coverage-enable-subprocess\", \"ipython\", \"littleutils\", \"pytest\", \"rich\"]\n\n[[package]]\nname = \"filelock\"\nversion = \"3.16.1\"\ndescription = \"A platform independent file lock.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"filelock-3.16.1-py3-none-any.whl\", hash = \"sha256:2082e5703d51fbf98ea75855d9d5527e33d8ff23099bec374a134febee6946b0\"},\n    {file = \"filelock-3.16.1.tar.gz\", hash = \"sha256:c249fbfcd5db47e5e2d6d62198e565475ee65e4831e2561c8e313fa7eb961435\"},\n]\n\n[package.extras]\ndocs = [\"furo (>=2024.8.6)\", \"sphinx (>=8.0.2)\", \"sphinx-autodoc-typehints (>=2.4.1)\"]\ntesting = [\"covdefaults (>=2.3)\", \"coverage (>=7.6.1)\", \"diff-cover (>=9.2)\", \"pytest (>=8.3.3)\", \"pytest-asyncio (>=0.24)\", \"pytest-cov (>=5)\", \"pytest-mock (>=3.14)\", \"pytest-timeout (>=2.3.1)\", \"virtualenv (>=20.26.4)\"]\ntyping = [\"typing-extensions (>=4.12.2)\"]\n\n[[package]]\nname = \"identify\"\nversion = \"2.6.1\"\ndescription = \"File identification library for Python\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"identify-2.6.1-py2.py3-none-any.whl\", hash = \"sha256:53863bcac7caf8d2ed85bd20312ea5dcfc22226800f6d6881f232d861db5a8f0\"},\n    {file = \"identify-2.6.1.tar.gz\", hash = \"sha256:91478c5fb7c3aac5ff7bf9b4344f803843dc586832d5f110d672b19aa1984c98\"},\n]\n\n[package.extras]\nlicense = [\"ukkonen\"]\n\n[[package]]\nname = \"iniconfig\"\nversion = \"2.0.0\"\ndescription = \"brain-dead simple config-ini parsing\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"iniconfig-2.0.0-py3-none-any.whl\", hash = \"sha256:b6a85871a79d2e3b22d2d1b94ac2824226a63c6b741c88f7ae975f18b6778374\"},\n    {file = \"iniconfig-2.0.0.tar.gz\", hash = \"sha256:2d91e135bf72d31a410b17c16da610a82cb55f6b0477d1a902134b24a455b8b3\"},\n]\n\n[[package]]\nname = \"ipython\"\nversion = \"8.12.3\"\ndescription = \"IPython: Productive Interactive Computing\"\noptional = true\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"ipython-8.12.3-py3-none-any.whl\", hash = \"sha256:b0340d46a933d27c657b211a329d0be23793c36595acf9e6ef4164bc01a1804c\"},\n    {file = \"ipython-8.12.3.tar.gz\", hash = \"sha256:3910c4b54543c2ad73d06579aa771041b7d5707b033bd488669b4cf544e3b363\"},\n]\n\n[package.dependencies]\nappnope = {version = \"*\", markers = \"sys_platform == \\\"darwin\\\"\"}\nbackcall = \"*\"\ncolorama = {version = \"*\", markers = \"sys_platform == \\\"win32\\\"\"}\ndecorator = \"*\"\njedi = \">=0.16\"\nmatplotlib-inline = \"*\"\npexpect = {version = \">4.3\", markers = \"sys_platform != \\\"win32\\\"\"}\npickleshare = \"*\"\nprompt-toolkit = \">=3.0.30,<3.0.37 || >3.0.37,<3.1.0\"\npygments = \">=2.4.0\"\nstack-data = \"*\"\ntraitlets = \">=5\"\ntyping-extensions = {version = \"*\", markers = \"python_version < \\\"3.10\\\"\"}\n\n[package.extras]\nall = [\"black\", \"curio\", \"docrepr\", \"ipykernel\", \"ipyparallel\", \"ipywidgets\", \"matplotlib\", \"matplotlib (!=3.2.0)\", \"nbconvert\", \"nbformat\", \"notebook\", \"numpy (>=1.21)\", \"pandas\", \"pytest (<7)\", \"pytest (<7.1)\", \"pytest-asyncio\", \"qtconsole\", \"setuptools (>=18.5)\", \"sphinx (>=1.3)\", \"sphinx-rtd-theme\", \"stack-data\", \"testpath\", \"trio\", \"typing-extensions\"]\nblack = [\"black\"]\ndoc = [\"docrepr\", \"ipykernel\", \"matplotlib\", \"pytest (<7)\", \"pytest (<7.1)\", \"pytest-asyncio\", \"setuptools (>=18.5)\", \"sphinx (>=1.3)\", \"sphinx-rtd-theme\", \"stack-data\", \"testpath\", \"typing-extensions\"]\nkernel = [\"ipykernel\"]\nnbconvert = [\"nbconvert\"]\nnbformat = [\"nbformat\"]\nnotebook = [\"ipywidgets\", \"notebook\"]\nparallel = [\"ipyparallel\"]\nqtconsole = [\"qtconsole\"]\ntest = [\"pytest (<7.1)\", \"pytest-asyncio\", \"testpath\"]\ntest-extra = [\"curio\", \"matplotlib (!=3.2.0)\", \"nbformat\", \"numpy (>=1.21)\", \"pandas\", \"pytest (<7.1)\", \"pytest-asyncio\", \"testpath\", \"trio\"]\n\n[[package]]\nname = \"ipywidgets\"\nversion = \"8.1.5\"\ndescription = \"Jupyter interactive widgets\"\noptional = true\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"ipywidgets-8.1.5-py3-none-any.whl\", hash = \"sha256:3290f526f87ae6e77655555baba4f36681c555b8bdbbff430b70e52c34c86245\"},\n    {file = \"ipywidgets-8.1.5.tar.gz\", hash = \"sha256:870e43b1a35656a80c18c9503bbf2d16802db1cb487eec6fab27d683381dde17\"},\n]\n\n[package.dependencies]\ncomm = \">=0.1.3\"\nipython = \">=6.1.0\"\njupyterlab-widgets = \">=3.0.12,<3.1.0\"\ntraitlets = \">=4.3.1\"\nwidgetsnbextension = \">=4.0.12,<4.1.0\"\n\n[package.extras]\ntest = [\"ipykernel\", \"jsonschema\", \"pytest (>=3.6.0)\", \"pytest-cov\", \"pytz\"]\n\n[[package]]\nname = \"jedi\"\nversion = \"0.19.1\"\ndescription = \"An autocompletion tool for Python that can be used for text editors.\"\noptional = true\npython-versions = \">=3.6\"\nfiles = [\n    {file = \"jedi-0.19.1-py2.py3-none-any.whl\", hash = \"sha256:e983c654fe5c02867aef4cdfce5a2fbb4a50adc0af145f70504238f18ef5e7e0\"},\n    {file = \"jedi-0.19.1.tar.gz\", hash = \"sha256:cf0496f3651bc65d7174ac1b7d043eff454892c708a87d1b683e57b569927ffd\"},\n]\n\n[package.dependencies]\nparso = \">=0.8.3,<0.9.0\"\n\n[package.extras]\ndocs = [\"Jinja2 (==2.11.3)\", \"MarkupSafe (==1.1.1)\", \"Pygments (==2.8.1)\", \"alabaster (==0.7.12)\", \"babel (==2.9.1)\", \"chardet (==4.0.0)\", \"commonmark (==0.8.1)\", \"docutils (==0.17.1)\", \"future (==0.18.2)\", \"idna (==2.10)\", \"imagesize (==1.2.0)\", \"mock (==1.0.1)\", \"packaging (==20.9)\", \"pyparsing (==2.4.7)\", \"pytz (==2021.1)\", \"readthedocs-sphinx-ext (==2.1.4)\", \"recommonmark (==0.5.0)\", \"requests (==2.25.1)\", \"six (==1.15.0)\", \"snowballstemmer (==2.1.0)\", \"sphinx (==1.8.5)\", \"sphinx-rtd-theme (==0.4.3)\", \"sphinxcontrib-serializinghtml (==1.1.4)\", \"sphinxcontrib-websupport (==1.2.4)\", \"urllib3 (==1.26.4)\"]\nqa = [\"flake8 (==5.0.4)\", \"mypy (==0.971)\", \"types-setuptools (==67.2.0.1)\"]\ntesting = [\"Django\", \"attrs\", \"colorama\", \"docopt\", \"pytest (<7.0.0)\"]\n\n[[package]]\nname = \"jupyterlab-widgets\"\nversion = \"3.0.13\"\ndescription = \"Jupyter interactive widgets for JupyterLab\"\noptional = true\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"jupyterlab_widgets-3.0.13-py3-none-any.whl\", hash = \"sha256:e3cda2c233ce144192f1e29914ad522b2f4c40e77214b0cc97377ca3d323db54\"},\n    {file = \"jupyterlab_widgets-3.0.13.tar.gz\", hash = \"sha256:a2966d385328c1942b683a8cd96b89b8dd82c8b8f81dda902bb2bc06d46f5bed\"},\n]\n\n[[package]]\nname = \"markdown-it-py\"\nversion = \"3.0.0\"\ndescription = \"Python port of markdown-it. Markdown parsing, done right!\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"markdown-it-py-3.0.0.tar.gz\", hash = \"sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb\"},\n    {file = \"markdown_it_py-3.0.0-py3-none-any.whl\", hash = \"sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1\"},\n]\n\n[package.dependencies]\nmdurl = \">=0.1,<1.0\"\n\n[package.extras]\nbenchmarking = [\"psutil\", \"pytest\", \"pytest-benchmark\"]\ncode-style = [\"pre-commit (>=3.0,<4.0)\"]\ncompare = [\"commonmark (>=0.9,<1.0)\", \"markdown (>=3.4,<4.0)\", \"mistletoe (>=1.0,<2.0)\", \"mistune (>=2.0,<3.0)\", \"panflute (>=2.3,<3.0)\"]\nlinkify = [\"linkify-it-py (>=1,<3)\"]\nplugins = [\"mdit-py-plugins\"]\nprofiling = [\"gprof2dot\"]\nrtd = [\"jupyter_sphinx\", \"mdit-py-plugins\", \"myst-parser\", \"pyyaml\", \"sphinx\", \"sphinx-copybutton\", \"sphinx-design\", \"sphinx_book_theme\"]\ntesting = [\"coverage\", \"pytest\", \"pytest-cov\", \"pytest-regressions\"]\n\n[[package]]\nname = \"matplotlib-inline\"\nversion = \"0.1.7\"\ndescription = \"Inline Matplotlib backend for Jupyter\"\noptional = true\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"matplotlib_inline-0.1.7-py3-none-any.whl\", hash = \"sha256:df192d39a4ff8f21b1895d72e6a13f5fcc5099f00fa84384e0ea28c2cc0653ca\"},\n    {file = \"matplotlib_inline-0.1.7.tar.gz\", hash = \"sha256:8423b23ec666be3d16e16b60bdd8ac4e86e840ebd1dd11a30b9f117f2fa0ab90\"},\n]\n\n[package.dependencies]\ntraitlets = \"*\"\n\n[[package]]\nname = \"mdurl\"\nversion = \"0.1.2\"\ndescription = \"Markdown URL utilities\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"mdurl-0.1.2-py3-none-any.whl\", hash = \"sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8\"},\n    {file = \"mdurl-0.1.2.tar.gz\", hash = \"sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba\"},\n]\n\n[[package]]\nname = \"mypy\"\nversion = \"1.11.2\"\ndescription = \"Optional static typing for Python\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"mypy-1.11.2-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:d42a6dd818ffce7be66cce644f1dff482f1d97c53ca70908dff0b9ddc120b77a\"},\n    {file = \"mypy-1.11.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:801780c56d1cdb896eacd5619a83e427ce436d86a3bdf9112527f24a66618fef\"},\n    {file = \"mypy-1.11.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:41ea707d036a5307ac674ea172875f40c9d55c5394f888b168033177fce47383\"},\n    {file = \"mypy-1.11.2-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:6e658bd2d20565ea86da7d91331b0eed6d2eee22dc031579e6297f3e12c758c8\"},\n    {file = \"mypy-1.11.2-cp310-cp310-win_amd64.whl\", hash = \"sha256:478db5f5036817fe45adb7332d927daa62417159d49783041338921dcf646fc7\"},\n    {file = \"mypy-1.11.2-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:75746e06d5fa1e91bfd5432448d00d34593b52e7e91a187d981d08d1f33d4385\"},\n    {file = \"mypy-1.11.2-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:a976775ab2256aadc6add633d44f100a2517d2388906ec4f13231fafbb0eccca\"},\n    {file = \"mypy-1.11.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:cd953f221ac1379050a8a646585a29574488974f79d8082cedef62744f0a0104\"},\n    {file = \"mypy-1.11.2-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:57555a7715c0a34421013144a33d280e73c08df70f3a18a552938587ce9274f4\"},\n    {file = \"mypy-1.11.2-cp311-cp311-win_amd64.whl\", hash = \"sha256:36383a4fcbad95f2657642a07ba22ff797de26277158f1cc7bd234821468b1b6\"},\n    {file = \"mypy-1.11.2-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:e8960dbbbf36906c5c0b7f4fbf2f0c7ffb20f4898e6a879fcf56a41a08b0d318\"},\n    {file = \"mypy-1.11.2-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:06d26c277962f3fb50e13044674aa10553981ae514288cb7d0a738f495550b36\"},\n    {file = \"mypy-1.11.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:6e7184632d89d677973a14d00ae4d03214c8bc301ceefcdaf5c474866814c987\"},\n    {file = \"mypy-1.11.2-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:3a66169b92452f72117e2da3a576087025449018afc2d8e9bfe5ffab865709ca\"},\n    {file = \"mypy-1.11.2-cp312-cp312-win_amd64.whl\", hash = \"sha256:969ea3ef09617aff826885a22ece0ddef69d95852cdad2f60c8bb06bf1f71f70\"},\n    {file = \"mypy-1.11.2-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:37c7fa6121c1cdfcaac97ce3d3b5588e847aa79b580c1e922bb5d5d2902df19b\"},\n    {file = \"mypy-1.11.2-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:4a8a53bc3ffbd161b5b2a4fff2f0f1e23a33b0168f1c0778ec70e1a3d66deb86\"},\n    {file = \"mypy-1.11.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:2ff93107f01968ed834f4256bc1fc4475e2fecf6c661260066a985b52741ddce\"},\n    {file = \"mypy-1.11.2-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:edb91dded4df17eae4537668b23f0ff6baf3707683734b6a818d5b9d0c0c31a1\"},\n    {file = \"mypy-1.11.2-cp38-cp38-win_amd64.whl\", hash = \"sha256:ee23de8530d99b6db0573c4ef4bd8f39a2a6f9b60655bf7a1357e585a3486f2b\"},\n    {file = \"mypy-1.11.2-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:801ca29f43d5acce85f8e999b1e431fb479cb02d0e11deb7d2abb56bdaf24fd6\"},\n    {file = \"mypy-1.11.2-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:af8d155170fcf87a2afb55b35dc1a0ac21df4431e7d96717621962e4b9192e70\"},\n    {file = \"mypy-1.11.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:f7821776e5c4286b6a13138cc935e2e9b6fde05e081bdebf5cdb2bb97c9df81d\"},\n    {file = \"mypy-1.11.2-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:539c570477a96a4e6fb718b8d5c3e0c0eba1f485df13f86d2970c91f0673148d\"},\n    {file = \"mypy-1.11.2-cp39-cp39-win_amd64.whl\", hash = \"sha256:3f14cd3d386ac4d05c5a39a51b84387403dadbd936e17cb35882134d4f8f0d24\"},\n    {file = \"mypy-1.11.2-py3-none-any.whl\", hash = \"sha256:b499bc07dbdcd3de92b0a8b29fdf592c111276f6a12fe29c30f6c417dd546d12\"},\n    {file = \"mypy-1.11.2.tar.gz\", hash = \"sha256:7f9993ad3e0ffdc95c2a14b66dee63729f021968bff8ad911867579c65d13a79\"},\n]\n\n[package.dependencies]\nmypy-extensions = \">=1.0.0\"\ntomli = {version = \">=1.1.0\", markers = \"python_version < \\\"3.11\\\"\"}\ntyping-extensions = \">=4.6.0\"\n\n[package.extras]\ndmypy = [\"psutil (>=4.0)\"]\ninstall-types = [\"pip\"]\nmypyc = [\"setuptools (>=50)\"]\nreports = [\"lxml\"]\n\n[[package]]\nname = \"mypy-extensions\"\nversion = \"1.0.0\"\ndescription = \"Type system extensions for programs checked with the mypy type checker.\"\noptional = false\npython-versions = \">=3.5\"\nfiles = [\n    {file = \"mypy_extensions-1.0.0-py3-none-any.whl\", hash = \"sha256:4392f6c0eb8a5668a69e23d168ffa70f0be9ccfd32b5cc2d26a34ae5b844552d\"},\n    {file = \"mypy_extensions-1.0.0.tar.gz\", hash = \"sha256:75dbf8955dc00442a438fc4d0666508a9a97b6bd41aa2f0ffe9d2f2725af0782\"},\n]\n\n[[package]]\nname = \"nodeenv\"\nversion = \"1.9.1\"\ndescription = \"Node.js virtual environment builder\"\noptional = false\npython-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7\"\nfiles = [\n    {file = \"nodeenv-1.9.1-py2.py3-none-any.whl\", hash = \"sha256:ba11c9782d29c27c70ffbdda2d7415098754709be8a7056d79a737cd901155c9\"},\n    {file = \"nodeenv-1.9.1.tar.gz\", hash = \"sha256:6ec12890a2dab7946721edbfbcd91f3319c6ccc9aec47be7c7e6b7011ee6645f\"},\n]\n\n[[package]]\nname = \"packaging\"\nversion = \"24.1\"\ndescription = \"Core utilities for Python packages\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"packaging-24.1-py3-none-any.whl\", hash = \"sha256:5b8f2217dbdbd2f7f384c41c628544e6d52f2d0f53c6d0c3ea61aa5d1d7ff124\"},\n    {file = \"packaging-24.1.tar.gz\", hash = \"sha256:026ed72c8ed3fcce5bf8950572258698927fd1dbda10a5e981cdf0ac37f4f002\"},\n]\n\n[[package]]\nname = \"parso\"\nversion = \"0.8.4\"\ndescription = \"A Python Parser\"\noptional = true\npython-versions = \">=3.6\"\nfiles = [\n    {file = \"parso-0.8.4-py2.py3-none-any.whl\", hash = \"sha256:a418670a20291dacd2dddc80c377c5c3791378ee1e8d12bffc35420643d43f18\"},\n    {file = \"parso-0.8.4.tar.gz\", hash = \"sha256:eb3a7b58240fb99099a345571deecc0f9540ea5f4dd2fe14c2a99d6b281ab92d\"},\n]\n\n[package.extras]\nqa = [\"flake8 (==5.0.4)\", \"mypy (==0.971)\", \"types-setuptools (==67.2.0.1)\"]\ntesting = [\"docopt\", \"pytest\"]\n\n[[package]]\nname = \"pathspec\"\nversion = \"0.12.1\"\ndescription = \"Utility library for gitignore style pattern matching of file paths.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"pathspec-0.12.1-py3-none-any.whl\", hash = \"sha256:a0d503e138a4c123b27490a4f7beda6a01c6f288df0e4a8b79c7eb0dc7b4cc08\"},\n    {file = \"pathspec-0.12.1.tar.gz\", hash = \"sha256:a482d51503a1ab33b1c67a6c3813a26953dbdc71c31dacaef9a838c4e29f5712\"},\n]\n\n[[package]]\nname = \"pexpect\"\nversion = \"4.9.0\"\ndescription = \"Pexpect allows easy control of interactive console applications.\"\noptional = true\npython-versions = \"*\"\nfiles = [\n    {file = \"pexpect-4.9.0-py2.py3-none-any.whl\", hash = \"sha256:7236d1e080e4936be2dc3e326cec0af72acf9212a7e1d060210e70a47e253523\"},\n    {file = \"pexpect-4.9.0.tar.gz\", hash = \"sha256:ee7d41123f3c9911050ea2c2dac107568dc43b2d3b0c7557a33212c398ead30f\"},\n]\n\n[package.dependencies]\nptyprocess = \">=0.5\"\n\n[[package]]\nname = \"pickleshare\"\nversion = \"0.7.5\"\ndescription = \"Tiny 'shelve'-like database with concurrency support\"\noptional = true\npython-versions = \"*\"\nfiles = [\n    {file = \"pickleshare-0.7.5-py2.py3-none-any.whl\", hash = \"sha256:9649af414d74d4df115d5d718f82acb59c9d418196b7b4290ed47a12ce62df56\"},\n    {file = \"pickleshare-0.7.5.tar.gz\", hash = \"sha256:87683d47965c1da65cdacaf31c8441d12b8044cdec9aca500cd78fc2c683afca\"},\n]\n\n[[package]]\nname = \"platformdirs\"\nversion = \"4.3.6\"\ndescription = \"A small Python package for determining appropriate platform-specific dirs, e.g. a `user data dir`.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"platformdirs-4.3.6-py3-none-any.whl\", hash = \"sha256:73e575e1408ab8103900836b97580d5307456908a03e92031bab39e4554cc3fb\"},\n    {file = \"platformdirs-4.3.6.tar.gz\", hash = \"sha256:357fb2acbc885b0419afd3ce3ed34564c13c9b95c89360cd9563f73aa5e2b907\"},\n]\n\n[package.extras]\ndocs = [\"furo (>=2024.8.6)\", \"proselint (>=0.14)\", \"sphinx (>=8.0.2)\", \"sphinx-autodoc-typehints (>=2.4)\"]\ntest = [\"appdirs (==1.4.4)\", \"covdefaults (>=2.3)\", \"pytest (>=8.3.2)\", \"pytest-cov (>=5)\", \"pytest-mock (>=3.14)\"]\ntype = [\"mypy (>=1.11.2)\"]\n\n[[package]]\nname = \"pluggy\"\nversion = \"1.5.0\"\ndescription = \"plugin and hook calling mechanisms for python\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"pluggy-1.5.0-py3-none-any.whl\", hash = \"sha256:44e1ad92c8ca002de6377e165f3e0f1be63266ab4d554740532335b9d75ea669\"},\n    {file = \"pluggy-1.5.0.tar.gz\", hash = \"sha256:2cffa88e94fdc978c4c574f15f9e59b7f4201d439195c3715ca9e2486f1d0cf1\"},\n]\n\n[package.extras]\ndev = [\"pre-commit\", \"tox\"]\ntesting = [\"pytest\", \"pytest-benchmark\"]\n\n[[package]]\nname = \"pre-commit\"\nversion = \"2.21.0\"\ndescription = \"A framework for managing and maintaining multi-language pre-commit hooks.\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"pre_commit-2.21.0-py2.py3-none-any.whl\", hash = \"sha256:e2f91727039fc39a92f58a588a25b87f936de6567eed4f0e673e0507edc75bad\"},\n    {file = \"pre_commit-2.21.0.tar.gz\", hash = \"sha256:31ef31af7e474a8d8995027fefdfcf509b5c913ff31f2015b4ec4beb26a6f658\"},\n]\n\n[package.dependencies]\ncfgv = \">=2.0.0\"\nidentify = \">=1.0.0\"\nnodeenv = \">=0.11.1\"\npyyaml = \">=5.1\"\nvirtualenv = \">=20.10.0\"\n\n[[package]]\nname = \"prompt-toolkit\"\nversion = \"3.0.48\"\ndescription = \"Library for building powerful interactive command lines in Python\"\noptional = true\npython-versions = \">=3.7.0\"\nfiles = [\n    {file = \"prompt_toolkit-3.0.48-py3-none-any.whl\", hash = \"sha256:f49a827f90062e411f1ce1f854f2aedb3c23353244f8108b89283587397ac10e\"},\n    {file = \"prompt_toolkit-3.0.48.tar.gz\", hash = \"sha256:d6623ab0477a80df74e646bdbc93621143f5caf104206aa29294d53de1a03d90\"},\n]\n\n[package.dependencies]\nwcwidth = \"*\"\n\n[[package]]\nname = \"ptyprocess\"\nversion = \"0.7.0\"\ndescription = \"Run a subprocess in a pseudo terminal\"\noptional = true\npython-versions = \"*\"\nfiles = [\n    {file = \"ptyprocess-0.7.0-py2.py3-none-any.whl\", hash = \"sha256:4b41f3967fce3af57cc7e94b888626c18bf37a083e3651ca8feeb66d492fef35\"},\n    {file = \"ptyprocess-0.7.0.tar.gz\", hash = \"sha256:5c5d0a3b48ceee0b48485e0c26037c0acd7d29765ca3fbb5cb3831d347423220\"},\n]\n\n[[package]]\nname = \"pure-eval\"\nversion = \"0.2.3\"\ndescription = \"Safely evaluate AST nodes without side effects\"\noptional = true\npython-versions = \"*\"\nfiles = [\n    {file = \"pure_eval-0.2.3-py3-none-any.whl\", hash = \"sha256:1db8e35b67b3d218d818ae653e27f06c3aa420901fa7b081ca98cbedc874e0d0\"},\n    {file = \"pure_eval-0.2.3.tar.gz\", hash = \"sha256:5f4e983f40564c576c7c8635ae88db5956bb2229d7e9237d03b3c0b0190eaf42\"},\n]\n\n[package.extras]\ntests = [\"pytest\"]\n\n[[package]]\nname = \"pygments\"\nversion = \"2.18.0\"\ndescription = \"Pygments is a syntax highlighting package written in Python.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"pygments-2.18.0-py3-none-any.whl\", hash = \"sha256:b8e6aca0523f3ab76fee51799c488e38782ac06eafcf95e7ba832985c8e7b13a\"},\n    {file = \"pygments-2.18.0.tar.gz\", hash = \"sha256:786ff802f32e91311bff3889f6e9a86e81505fe99f2735bb6d60ae0c5004f199\"},\n]\n\n[package.extras]\nwindows-terminal = [\"colorama (>=0.4.6)\"]\n\n[[package]]\nname = \"pytest\"\nversion = \"7.4.4\"\ndescription = \"pytest: simple powerful testing with Python\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"pytest-7.4.4-py3-none-any.whl\", hash = \"sha256:b090cdf5ed60bf4c45261be03239c2c1c22df034fbffe691abe93cd80cea01d8\"},\n    {file = \"pytest-7.4.4.tar.gz\", hash = \"sha256:2cf0005922c6ace4a3e2ec8b4080eb0d9753fdc93107415332f50ce9e7994280\"},\n]\n\n[package.dependencies]\ncolorama = {version = \"*\", markers = \"sys_platform == \\\"win32\\\"\"}\nexceptiongroup = {version = \">=1.0.0rc8\", markers = \"python_version < \\\"3.11\\\"\"}\niniconfig = \"*\"\npackaging = \"*\"\npluggy = \">=0.12,<2.0\"\ntomli = {version = \">=1.0.0\", markers = \"python_version < \\\"3.11\\\"\"}\n\n[package.extras]\ntesting = [\"argcomplete\", \"attrs (>=19.2.0)\", \"hypothesis (>=3.56)\", \"mock\", \"nose\", \"pygments (>=2.7.2)\", \"requests\", \"setuptools\", \"xmlschema\"]\n\n[[package]]\nname = \"pytest-cov\"\nversion = \"3.0.0\"\ndescription = \"Pytest plugin for measuring coverage.\"\noptional = false\npython-versions = \">=3.6\"\nfiles = [\n    {file = \"pytest-cov-3.0.0.tar.gz\", hash = \"sha256:e7f0f5b1617d2210a2cabc266dfe2f4c75a8d32fb89eafb7ad9d06f6d076d470\"},\n    {file = \"pytest_cov-3.0.0-py3-none-any.whl\", hash = \"sha256:578d5d15ac4a25e5f961c938b85a05b09fdaae9deef3bb6de9a6e766622ca7a6\"},\n]\n\n[package.dependencies]\ncoverage = {version = \">=5.2.1\", extras = [\"toml\"]}\npytest = \">=4.6\"\n\n[package.extras]\ntesting = [\"fields\", \"hunter\", \"process-tests\", \"pytest-xdist\", \"six\", \"virtualenv\"]\n\n[[package]]\nname = \"pyyaml\"\nversion = \"6.0.2\"\ndescription = \"YAML parser and emitter for Python\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"PyYAML-6.0.2-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:0a9a2848a5b7feac301353437eb7d5957887edbf81d56e903999a75a3d743086\"},\n    {file = \"PyYAML-6.0.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:29717114e51c84ddfba879543fb232a6ed60086602313ca38cce623c1d62cfbf\"},\n    {file = \"PyYAML-6.0.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:8824b5a04a04a047e72eea5cec3bc266db09e35de6bdfe34c9436ac5ee27d237\"},\n    {file = \"PyYAML-6.0.2-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:7c36280e6fb8385e520936c3cb3b8042851904eba0e58d277dca80a5cfed590b\"},\n    {file = \"PyYAML-6.0.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ec031d5d2feb36d1d1a24380e4db6d43695f3748343d99434e6f5f9156aaa2ed\"},\n    {file = \"PyYAML-6.0.2-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:936d68689298c36b53b29f23c6dbb74de12b4ac12ca6cfe0e047bedceea56180\"},\n    {file = \"PyYAML-6.0.2-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:23502f431948090f597378482b4812b0caae32c22213aecf3b55325e049a6c68\"},\n    {file = \"PyYAML-6.0.2-cp310-cp310-win32.whl\", hash = \"sha256:2e99c6826ffa974fe6e27cdb5ed0021786b03fc98e5ee3c5bfe1fd5015f42b99\"},\n    {file = \"PyYAML-6.0.2-cp310-cp310-win_amd64.whl\", hash = \"sha256:a4d3091415f010369ae4ed1fc6b79def9416358877534caf6a0fdd2146c87a3e\"},\n    {file = \"PyYAML-6.0.2-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:cc1c1159b3d456576af7a3e4d1ba7e6924cb39de8f67111c735f6fc832082774\"},\n    {file = \"PyYAML-6.0.2-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:1e2120ef853f59c7419231f3bf4e7021f1b936f6ebd222406c3b60212205d2ee\"},\n    {file = \"PyYAML-6.0.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5d225db5a45f21e78dd9358e58a98702a0302f2659a3c6cd320564b75b86f47c\"},\n    {file = \"PyYAML-6.0.2-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:5ac9328ec4831237bec75defaf839f7d4564be1e6b25ac710bd1a96321cc8317\"},\n    {file = \"PyYAML-6.0.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3ad2a3decf9aaba3d29c8f537ac4b243e36bef957511b4766cb0057d32b0be85\"},\n    {file = \"PyYAML-6.0.2-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:ff3824dc5261f50c9b0dfb3be22b4567a6f938ccce4587b38952d85fd9e9afe4\"},\n    {file = \"PyYAML-6.0.2-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:797b4f722ffa07cc8d62053e4cff1486fa6dc094105d13fea7b1de7d8bf71c9e\"},\n    {file = \"PyYAML-6.0.2-cp311-cp311-win32.whl\", hash = \"sha256:11d8f3dd2b9c1207dcaf2ee0bbbfd5991f571186ec9cc78427ba5bd32afae4b5\"},\n    {file = \"PyYAML-6.0.2-cp311-cp311-win_amd64.whl\", hash = \"sha256:e10ce637b18caea04431ce14fabcf5c64a1c61ec9c56b071a4b7ca131ca52d44\"},\n    {file = \"PyYAML-6.0.2-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:c70c95198c015b85feafc136515252a261a84561b7b1d51e3384e0655ddf25ab\"},\n    {file = \"PyYAML-6.0.2-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:ce826d6ef20b1bc864f0a68340c8b3287705cae2f8b4b1d932177dcc76721725\"},\n    {file = \"PyYAML-6.0.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1f71ea527786de97d1a0cc0eacd1defc0985dcf6b3f17bb77dcfc8c34bec4dc5\"},\n    {file = \"PyYAML-6.0.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:9b22676e8097e9e22e36d6b7bda33190d0d400f345f23d4065d48f4ca7ae0425\"},\n    {file = \"PyYAML-6.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:80bab7bfc629882493af4aa31a4cfa43a4c57c83813253626916b8c7ada83476\"},\n    {file = \"PyYAML-6.0.2-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:0833f8694549e586547b576dcfaba4a6b55b9e96098b36cdc7ebefe667dfed48\"},\n    {file = \"PyYAML-6.0.2-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:8b9c7197f7cb2738065c481a0461e50ad02f18c78cd75775628afb4d7137fb3b\"},\n    {file = \"PyYAML-6.0.2-cp312-cp312-win32.whl\", hash = \"sha256:ef6107725bd54b262d6dedcc2af448a266975032bc85ef0172c5f059da6325b4\"},\n    {file = \"PyYAML-6.0.2-cp312-cp312-win_amd64.whl\", hash = \"sha256:7e7401d0de89a9a855c839bc697c079a4af81cf878373abd7dc625847d25cbd8\"},\n    {file = \"PyYAML-6.0.2-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:efdca5630322a10774e8e98e1af481aad470dd62c3170801852d752aa7a783ba\"},\n    {file = \"PyYAML-6.0.2-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:50187695423ffe49e2deacb8cd10510bc361faac997de9efef88badc3bb9e2d1\"},\n    {file = \"PyYAML-6.0.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0ffe8360bab4910ef1b9e87fb812d8bc0a308b0d0eef8c8f44e0254ab3b07133\"},\n    {file = \"PyYAML-6.0.2-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:17e311b6c678207928d649faa7cb0d7b4c26a0ba73d41e99c4fff6b6c3276484\"},\n    {file = \"PyYAML-6.0.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:70b189594dbe54f75ab3a1acec5f1e3faa7e8cf2f1e08d9b561cb41b845f69d5\"},\n    {file = \"PyYAML-6.0.2-cp313-cp313-musllinux_1_1_aarch64.whl\", hash = \"sha256:41e4e3953a79407c794916fa277a82531dd93aad34e29c2a514c2c0c5fe971cc\"},\n    {file = \"PyYAML-6.0.2-cp313-cp313-musllinux_1_1_x86_64.whl\", hash = \"sha256:68ccc6023a3400877818152ad9a1033e3db8625d899c72eacb5a668902e4d652\"},\n    {file = \"PyYAML-6.0.2-cp313-cp313-win32.whl\", hash = \"sha256:bc2fa7c6b47d6bc618dd7fb02ef6fdedb1090ec036abab80d4681424b84c1183\"},\n    {file = \"PyYAML-6.0.2-cp313-cp313-win_amd64.whl\", hash = \"sha256:8388ee1976c416731879ac16da0aff3f63b286ffdd57cdeb95f3f2e085687563\"},\n    {file = \"PyYAML-6.0.2-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:24471b829b3bf607e04e88d79542a9d48bb037c2267d7927a874e6c205ca7e9a\"},\n    {file = \"PyYAML-6.0.2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d7fded462629cfa4b685c5416b949ebad6cec74af5e2d42905d41e257e0869f5\"},\n    {file = \"PyYAML-6.0.2-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:d84a1718ee396f54f3a086ea0a66d8e552b2ab2017ef8b420e92edbc841c352d\"},\n    {file = \"PyYAML-6.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9056c1ecd25795207ad294bcf39f2db3d845767be0ea6e6a34d856f006006083\"},\n    {file = \"PyYAML-6.0.2-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:82d09873e40955485746739bcb8b4586983670466c23382c19cffecbf1fd8706\"},\n    {file = \"PyYAML-6.0.2-cp38-cp38-win32.whl\", hash = \"sha256:43fa96a3ca0d6b1812e01ced1044a003533c47f6ee8aca31724f78e93ccc089a\"},\n    {file = \"PyYAML-6.0.2-cp38-cp38-win_amd64.whl\", hash = \"sha256:01179a4a8559ab5de078078f37e5c1a30d76bb88519906844fd7bdea1b7729ff\"},\n    {file = \"PyYAML-6.0.2-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:688ba32a1cffef67fd2e9398a2efebaea461578b0923624778664cc1c914db5d\"},\n    {file = \"PyYAML-6.0.2-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:a8786accb172bd8afb8be14490a16625cbc387036876ab6ba70912730faf8e1f\"},\n    {file = \"PyYAML-6.0.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d8e03406cac8513435335dbab54c0d385e4a49e4945d2909a581c83647ca0290\"},\n    {file = \"PyYAML-6.0.2-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:f753120cb8181e736c57ef7636e83f31b9c0d1722c516f7e86cf15b7aa57ff12\"},\n    {file = \"PyYAML-6.0.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3b1fdb9dc17f5a7677423d508ab4f243a726dea51fa5e70992e59a7411c89d19\"},\n    {file = \"PyYAML-6.0.2-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:0b69e4ce7a131fe56b7e4d770c67429700908fc0752af059838b1cfb41960e4e\"},\n    {file = \"PyYAML-6.0.2-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:a9f8c2e67970f13b16084e04f134610fd1d374bf477b17ec1599185cf611d725\"},\n    {file = \"PyYAML-6.0.2-cp39-cp39-win32.whl\", hash = \"sha256:6395c297d42274772abc367baaa79683958044e5d3835486c16da75d2a694631\"},\n    {file = \"PyYAML-6.0.2-cp39-cp39-win_amd64.whl\", hash = \"sha256:39693e1f8320ae4f43943590b49779ffb98acb81f788220ea932a6b6c51004d8\"},\n    {file = \"pyyaml-6.0.2.tar.gz\", hash = \"sha256:d584d9ec91ad65861cc08d42e834324ef890a082e591037abe114850ff7bbc3e\"},\n]\n\n[[package]]\nname = \"six\"\nversion = \"1.16.0\"\ndescription = \"Python 2 and 3 compatibility utilities\"\noptional = false\npython-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*\"\nfiles = [\n    {file = \"six-1.16.0-py2.py3-none-any.whl\", hash = \"sha256:8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254\"},\n    {file = \"six-1.16.0.tar.gz\", hash = \"sha256:1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926\"},\n]\n\n[[package]]\nname = \"stack-data\"\nversion = \"0.6.3\"\ndescription = \"Extract data from python stack frames and tracebacks for informative displays\"\noptional = true\npython-versions = \"*\"\nfiles = [\n    {file = \"stack_data-0.6.3-py3-none-any.whl\", hash = \"sha256:d5558e0c25a4cb0853cddad3d77da9891a08cb85dd9f9f91b9f8cd66e511e695\"},\n    {file = \"stack_data-0.6.3.tar.gz\", hash = \"sha256:836a778de4fec4dcd1dcd89ed8abff8a221f58308462e1c4aa2a3cf30148f0b9\"},\n]\n\n[package.dependencies]\nasttokens = \">=2.1.0\"\nexecuting = \">=1.2.0\"\npure-eval = \"*\"\n\n[package.extras]\ntests = [\"cython\", \"littleutils\", \"pygments\", \"pytest\", \"typeguard\"]\n\n[[package]]\nname = \"tomli\"\nversion = \"2.0.1\"\ndescription = \"A lil' TOML parser\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"tomli-2.0.1-py3-none-any.whl\", hash = \"sha256:939de3e7a6161af0c887ef91b7d41a53e7c5a1ca976325f429cb46ea9bc30ecc\"},\n    {file = \"tomli-2.0.1.tar.gz\", hash = \"sha256:de526c12914f0c550d15924c62d72abc48d6fe7364aa87328337a31007fe8a4f\"},\n]\n\n[[package]]\nname = \"traitlets\"\nversion = \"5.14.3\"\ndescription = \"Traitlets Python configuration system\"\noptional = true\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"traitlets-5.14.3-py3-none-any.whl\", hash = \"sha256:b74e89e397b1ed28cc831db7aea759ba6640cb3de13090ca145426688ff1ac4f\"},\n    {file = \"traitlets-5.14.3.tar.gz\", hash = \"sha256:9ed0579d3502c94b4b3732ac120375cda96f923114522847de4b3bb98b96b6b7\"},\n]\n\n[package.extras]\ndocs = [\"myst-parser\", \"pydata-sphinx-theme\", \"sphinx\"]\ntest = [\"argcomplete (>=3.0.3)\", \"mypy (>=1.7.0)\", \"pre-commit\", \"pytest (>=7.0,<8.2)\", \"pytest-mock\", \"pytest-mypy-testing\"]\n\n[[package]]\nname = \"typing-extensions\"\nversion = \"4.12.2\"\ndescription = \"Backported and Experimental Type Hints for Python 3.8+\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"typing_extensions-4.12.2-py3-none-any.whl\", hash = \"sha256:04e5ca0351e0f3f85c6853954072df659d0d13fac324d0072316b67d7794700d\"},\n    {file = \"typing_extensions-4.12.2.tar.gz\", hash = \"sha256:1a7ead55c7e559dd4dee8856e3a88b41225abfe1ce8df57b7c13915fe121ffb8\"},\n]\n\n[[package]]\nname = \"virtualenv\"\nversion = \"20.26.6\"\ndescription = \"Virtual Python Environment builder\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"virtualenv-20.26.6-py3-none-any.whl\", hash = \"sha256:7345cc5b25405607a624d8418154577459c3e0277f5466dd79c49d5e492995f2\"},\n    {file = \"virtualenv-20.26.6.tar.gz\", hash = \"sha256:280aede09a2a5c317e409a00102e7077c6432c5a38f0ef938e643805a7ad2c48\"},\n]\n\n[package.dependencies]\ndistlib = \">=0.3.7,<1\"\nfilelock = \">=3.12.2,<4\"\nplatformdirs = \">=3.9.1,<5\"\n\n[package.extras]\ndocs = [\"furo (>=2023.7.26)\", \"proselint (>=0.13)\", \"sphinx (>=7.1.2,!=7.3)\", \"sphinx-argparse (>=0.4)\", \"sphinxcontrib-towncrier (>=0.2.1a0)\", \"towncrier (>=23.6)\"]\ntest = [\"covdefaults (>=2.3)\", \"coverage (>=7.2.7)\", \"coverage-enable-subprocess (>=1)\", \"flaky (>=3.7)\", \"packaging (>=23.1)\", \"pytest (>=7.4)\", \"pytest-env (>=0.8.2)\", \"pytest-freezer (>=0.4.8)\", \"pytest-mock (>=3.11.1)\", \"pytest-randomly (>=3.12)\", \"pytest-timeout (>=2.1)\", \"setuptools (>=68)\", \"time-machine (>=2.10)\"]\n\n[[package]]\nname = \"wcwidth\"\nversion = \"0.2.13\"\ndescription = \"Measures the displayed width of unicode strings in a terminal\"\noptional = true\npython-versions = \"*\"\nfiles = [\n    {file = \"wcwidth-0.2.13-py2.py3-none-any.whl\", hash = \"sha256:3da69048e4540d84af32131829ff948f1e022c1c6bdb8d6102117aac784f6859\"},\n    {file = \"wcwidth-0.2.13.tar.gz\", hash = \"sha256:72ea0c06399eb286d978fdedb6923a9eb47e1c486ce63e9b4e64fc18303972b5\"},\n]\n\n[[package]]\nname = \"widgetsnbextension\"\nversion = \"4.0.13\"\ndescription = \"Jupyter interactive widgets for Jupyter Notebook\"\noptional = true\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"widgetsnbextension-4.0.13-py3-none-any.whl\", hash = \"sha256:74b2692e8500525cc38c2b877236ba51d34541e6385eeed5aec15a70f88a6c71\"},\n    {file = \"widgetsnbextension-4.0.13.tar.gz\", hash = \"sha256:ffcb67bc9febd10234a362795f643927f4e0c05d9342c727b65d2384f8feacb6\"},\n]\n\n[extras]\njupyter = [\"ipywidgets\"]\n\n[metadata]\nlock-version = \"2.0\"\npython-versions = \">=3.8.0\"\ncontent-hash = \"804a37e7036779a41ab3dfe0cab6324de5095f81684e7db724ba803b26159b60\"\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.779296875,
          "content": "[tool.poetry]\nname = \"rich\"\nhomepage = \"https://github.com/Textualize/rich\"\ndocumentation = \"https://rich.readthedocs.io/en/latest/\"\nversion = \"13.9.4\"\ndescription = \"Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal\"\nauthors = [\"Will McGugan <willmcgugan@gmail.com>\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Environment :: Console\",\n    \"Framework :: IPython\",\n    \"Intended Audience :: Developers\",\n    \"Operating System :: Microsoft :: Windows\",\n    \"Operating System :: MacOS\",\n    \"Operating System :: POSIX :: Linux\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n    \"Typing :: Typed\",\n]\ninclude = [\"rich/py.typed\"]\n\n\n[tool.poetry.dependencies]\npython = \">=3.8.0\"\ntyping-extensions = { version = \">=4.0.0, <5.0\", python = \"<3.11\" }\npygments = \"^2.13.0\"\nipywidgets = { version = \">=7.5.1,<9\", optional = true }\nmarkdown-it-py = \">=2.2.0\"\n\n[tool.poetry.extras]\njupyter = [\"ipywidgets\"]\n\n[tool.poetry.dev-dependencies]\npytest = \"^7.0.0\"\nblack = \"^22.6\"\nmypy = \"^1.11\"\npytest-cov = \"^3.0.0\"\nattrs = \"^21.4.0\"\npre-commit = \"^2.17.0\"\nasv = \"^0.5.1\"\n\n[build-system]\nrequires = [\"poetry-core>=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n\n\n[tool.mypy]\nfiles = [\"rich\"]\nshow_error_codes = true\nstrict = true\nenable_error_code = [\"ignore-without-code\", \"redundant-expr\", \"truthy-bool\"]\n\n\n[[tool.mypy.overrides]]\nmodule = [\"pygments.*\", \"IPython.*\", \"ipywidgets.*\"]\nignore_missing_imports = true\n\n\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\n\n[tool.isort]\nprofile = \"black\"\n"
        },
        {
          "name": "questions",
          "type": "tree",
          "content": null
        },
        {
          "name": "rich",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.19140625,
          "content": "#!/usr/bin/env python\n\n# This is a shim to hopefully allow Github to detect the package, build is done with poetry\n\nimport setuptools\n\nif __name__ == \"__main__\":\n    setuptools.setup(name=\"rich\")\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.0146484375,
          "content": "[tox]\nminversion = 4.0.0\nenvlist =\n    lint\n    docs\n    py{38,39,310,311,312,313}\nisolated_build = True\n\n[testenv]\ndescription = Run unit-testing\ndeps =\n    poetry\n# do not put * in passenv as it may break builds due to reduced isolation\npassenv =\n    CI\n    GITHUB_*\n    HOME\n    PYTEST_*\n    SSH_AUTH_SOCK\n    TERM\nsetenv =\n    PYTHONDONTWRITEBYTECODE=1\n    PYTHONUNBUFFERED=1\ncommands =\n    poetry install\n    pytest --cov-report term-missing --cov=rich tests/ {posargs}\n\n[testenv:lint]\ndescription = Runs all linting tasks\ncommands_pre =\n    poetry install -vv --with lint\ncommands =\n    ; poetry install --only dev\n    # as long GHA pipelines are not configured to use tox, we should call\n    # `make` in order to make testing similar and prevent divergence.\n    make format-check\n    make typecheck\ndeps =\n    poetry\nskip_install = true\nallowlist_externals =\n    make\n    poetry\n\n[testenv:docs]\ndescription = Builds documentation\nchangedir = docs\ndeps =\n    -r docs/requirements.txt\ncommands =\n    sphinx-build -M html source build\n"
        }
      ]
    }
  ]
}