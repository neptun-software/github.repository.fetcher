{
  "metadata": {
    "timestamp": 1736561481815,
    "page": 33,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ageitgey/face_recognition",
      "stars": 53889,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.28515625,
          "content": "# http://editorconfig.org\n\nroot = true\n\n[*]\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\ninsert_final_newline = true\ncharset = utf-8\nend_of_line = lf\n\n[*.bat]\nindent_style = tab\nend_of_line = crlf\n\n[LICENSE]\ninsert_final_newline = false\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7763671875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n.DS_Store\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# pyenv python configuration file\n.python-version\n\n.idea/\n"
        },
        {
          "name": "AUTHORS.rst",
          "type": "blob",
          "size": 0.5595703125,
          "content": "=======\nAuthors\n=======\n\n* Adam Geitgey <ageitgey@gmail.com>\n\nThanks\n------\n\n* Many, many thanks to Davis King (@nulhom)\n  for creating dlib and for providing the trained facial feature detection and face encoding models\n  used in this library.\n* Thanks to everyone who works on all the awesome Python data science libraries like numpy, scipy, scikit-image,\n  pillow, etc, etc that makes this kind of stuff so easy and fun in Python.\n* Thanks to Cookiecutter and the audreyr/cookiecutter-pypackage project template\n  for making Python project packaging way more tolerable.\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 2.728515625,
          "content": ".. highlight:: shell\n\n============\nContributing\n============\n\nContributions are welcome, and they are greatly appreciated! Every\nlittle bit helps, and credit will always be given.\n\nYou can contribute in many ways:\n\nTypes of Contributions\n----------------------\n\nReport Bugs\n~~~~~~~~~~~\n\nReport bugs at https://github.com/ageitgey/face_recognition/issues.\n\nIf you are reporting a bug, please include:\n\n* Your operating system name and version.\n* Any details about your local setup that might be helpful in troubleshooting.\n* Detailed steps to reproduce the bug.\n\nSubmit Feedback\n~~~~~~~~~~~~~~~\n\nThe best way to send feedback is to file an issue at https://github.com/ageitgey/face_recognition/issues.\n\nIf you are proposing a feature:\n\n* Explain in detail how it would work.\n* Keep the scope as narrow as possible, to make it easier to implement.\n* Remember that this is a volunteer-driven project, and that contributions\n  are welcome :)\n\nGet Started!\n------------\n\nReady to contribute? Here's how to set up `face_recognition` for local development.\n\n1. Fork the `face_recognition` repo on GitHub.\n2. Clone your fork locally::\n\n    $ git clone git@github.com:your_name_here/face_recognition.git\n\n3. Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development::\n\n    $ mkvirtualenv face_recognition\n    $ cd face_recognition/\n    $ python setup.py develop\n\n4. Create a branch for local development::\n\n    $ git checkout -b name-of-your-bugfix-or-feature\n\n   Now you can make your changes locally.\n\n5. When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox::\n\n    $ flake8 face_recognition tests\n    $ python setup.py test or py.test\n    $ tox\n\n   To get flake8 and tox, just pip install them into your virtualenv.\n\n6. Commit your changes and push your branch to GitHub::\n\n    $ git add .\n    $ git commit -m \"Your detailed description of your changes.\"\n    $ git push origin name-of-your-bugfix-or-feature\n\n7. Submit a pull request through the GitHub website.\n\nPull Request Guidelines\n-----------------------\n\nBefore you submit a pull request, check that it meets these guidelines:\n\n1. The pull request should include tests.\n2. If the pull request adds functionality, the docs should be updated. Put\n   your new functionality into a function with a docstring, and add the\n   feature to the list in README.rst.\n3. The pull request should work for Python 2.7, 3.5, 3.6, 3.7 and 3.8, and for PyPy. Check\n   https://travis-ci.org/ageitgey/face_recognition/pull_requests\n   and make sure that the tests pass for all supported Python versions.\n\nTips\n----\n\nTo run a subset of tests::\n\n\n    $ python -m unittest tests.test_face_recognition\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.41015625,
          "content": "# This is a sample Dockerfile you can modify to deploy your own app based on face_recognition\n\nFROM python:3.10.3-slim-bullseye\n\nRUN apt-get -y update\nRUN apt-get install -y --fix-missing \\\n    build-essential \\\n    cmake \\\n    gfortran \\\n    git \\\n    wget \\\n    curl \\\n    graphicsmagick \\\n    libgraphicsmagick1-dev \\\n    libatlas-base-dev \\\n    libavcodec-dev \\\n    libavformat-dev \\\n    libgtk2.0-dev \\\n    libjpeg-dev \\\n    liblapack-dev \\\n    libswscale-dev \\\n    pkg-config \\\n    python3-dev \\\n    python3-numpy \\\n    software-properties-common \\\n    zip \\\n    && apt-get clean && rm -rf /tmp/* /var/tmp/*\n\nRUN cd ~ && \\\n    mkdir -p dlib && \\\n    git clone -b 'v19.9' --single-branch https://github.com/davisking/dlib.git dlib/ && \\\n    cd  dlib/ && \\\n    python3 setup.py install --yes USE_AVX_INSTRUCTIONS\n\n\n# The rest of this file just runs an example script.\n\n# If you wanted to use this Dockerfile to run your own app instead, maybe you would do this:\n# COPY . /root/your_app_or_whatever\n# RUN cd /root/your_app_or_whatever && \\\n#     pip3 install -r requirements.txt\n# RUN whatever_command_you_run_to_start_your_app\n\nCOPY . /root/face_recognition\nRUN cd /root/face_recognition && \\\n    pip3 install -r requirements.txt && \\\n    python3 setup.py install\n\n# Add pip3 install opencv-python==4.1.2.30 if you want to run the live webcam examples\n\nCMD cd /root/face_recognition/examples && \\\n    python3 recognize_faces_in_pictures.py\n"
        },
        {
          "name": "Dockerfile.gpu",
          "type": "blob",
          "size": 1.0654296875,
          "content": "# This is a sample Dockerfile you can modify to deploy your own app based on face_recognition on the GPU\n# In order to run Docker in the GPU you will need to install Nvidia-Docker: https://github.com/NVIDIA/nvidia-docker\n\nFROM nvidia/cuda:9.0-cudnn7-devel\n\n# Install face recognition dependencies\n\nRUN apt update -y; apt install -y \\\ngit \\\ncmake \\\nlibsm6 \\\nlibxext6 \\\nlibxrender-dev \\\npython3 \\\npython3-pip\n\nRUN pip3 install scikit-build\n\n# Install compilers\n\nRUN apt install -y software-properties-common\nRUN add-apt-repository ppa:ubuntu-toolchain-r/test\nRUN apt update -y; apt install -y gcc-6 g++-6\n\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 50\nRUN update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 50\n\n#Install dlib \n\nRUN git clone -b 'v19.16' --single-branch https://github.com/davisking/dlib.git\nRUN mkdir -p /dlib/build\n\nRUN cmake -H/dlib -B/dlib/build -DDLIB_USE_CUDA=1 -DUSE_AVX_INSTRUCTIONS=1\nRUN cmake --build /dlib/build\n\nRUN cd /dlib; python3 /dlib/setup.py install\n\n# Install the face recognition package\n\nRUN pip3 install face_recognition\n"
        },
        {
          "name": "HISTORY.rst",
          "type": "blob",
          "size": 3.26171875,
          "content": "History\n=======\n\n1.4.0 (2020-09-26)\n------------------\n\n* Dropping support for Python 2.x\n* --upsample a parameter for command line face_recognition\n\n1.3.0 (2020-02-20)\n------------------\n\n* Drop support for Python 3.4 and add 3.8\n* Blink detection example\n\n\n1.2.3 (2018-08-21)\n------------------\n\n* You can now pass model=\"small\" to face_landmarks() to use the 5-point face model instead of the 68-point model.\n* Now officially supporting Python 3.7\n* New example of using this library in a Jupyter Notebook\n\n1.2.2 (2018-04-02)\n------------------\n\n* Added the face_detection CLI command\n* Removed dependencies on scipy to make installation easier\n* Cleaned up KNN example and fixed a bug with drawing fonts to label detected faces in the demo\n\n\n1.2.1 (2018-02-01)\n------------------\n\n* Fixed version numbering inside of module code.\n\n\n1.2.0 (2018-02-01)\n------------------\n\n* Fixed a bug where batch size parameter didn't work correctly when doing batch face detections on GPU.\n* Updated OpenCV examples to do proper BGR -> RGB conversion\n* Updated webcam examples to avoid common mistakes and reduce support questions\n* Added a KNN classification example\n* Added an example of automatically blurring faces in images or videos\n* Updated Dockerfile example to use dlib v19.9 which removes the boost dependency.\n\n\n1.1.0 (2017-09-23)\n------------------\n\n* Will use dlib's 5-point face pose estimator when possible for speed (instead of 68-point face pose esimator)\n* dlib v19.7 is now the minimum required version\n* face_recognition_models v0.3.0 is now the minimum required version\n\n\n1.0.0 (2017-08-29)\n------------------\n\n* Added support for dlib's CNN face detection model via model=\"cnn\" parameter on face detecion call\n* Added support for GPU batched face detections using dlib's CNN face detector model\n* Added find_faces_in_picture_cnn.py to examples\n* Added find_faces_in_batches.py to examples\n* Added face_rec_from_video_file.py to examples\n* dlib v19.5 is now the minimum required version\n* face_recognition_models v0.2.0 is now the minimum required version\n\n\n0.2.2 (2017-07-07)\n------------------\n\n* Added --show-distance to cli\n* Fixed a bug where --tolerance was ignored in cli if testing a single image\n* Added benchmark.py to examples\n\n\n0.2.1 (2017-07-03)\n------------------\n\n* Added --tolerance to cli\n\n\n0.2.0 (2017-06-03)\n------------------\n\n* The CLI can now take advantage of multiple CPUs. Just pass in the -cpus X parameter where X is the number of CPUs to use.\n* Added face_distance.py example\n* Improved CLI tests to actually test the CLI functionality\n* Updated facerec_on_raspberry_pi.py to capture in rgb (not bgr) format.\n\n\n0.1.14 (2017-04-22)\n-------------------\n\n* Fixed a ValueError crash when using the CLI on Python 2.7\n\n\n0.1.13 (2017-04-20)\n-------------------\n\n* Raspberry Pi support.\n\n\n0.1.12 (2017-04-13)\n-------------------\n\n* Fixed: Face landmarks wasn't returning all chin points.\n\n\n0.1.11 (2017-03-30)\n-------------------\n\n* Fixed a minor bug in the command-line interface.\n\n\n0.1.10 (2017-03-21)\n-------------------\n\n* Minor pref improvements with face comparisons.\n* Test updates.\n\n\n0.1.9 (2017-03-16)\n------------------\n\n* Fix minimum scipy version required.\n\n\n0.1.8 (2017-03-16)\n------------------\n\n* Fix missing Pillow dependency.\n\n\n0.1.7 (2017-03-13)\n------------------\n\n* First working release.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "\nMIT License\n\nCopyright (c) 2021, Adam Geitgey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2578125,
          "content": "\ninclude AUTHORS.rst\n\ninclude CONTRIBUTING.rst\ninclude HISTORY.rst\ninclude LICENSE\ninclude README.rst\n\nrecursive-include tests *\nrecursive-exclude * __pycache__\nrecursive-exclude * *.py[co]\n\nrecursive-include docs *.rst conf.py Makefile make.bat *.jpg *.png *.gif\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.232421875,
          "content": ".PHONY: clean clean-test clean-pyc clean-build docs help\n.DEFAULT_GOAL := help\ndefine BROWSER_PYSCRIPT\nimport os, webbrowser, sys\ntry:\n\tfrom urllib import pathname2url\nexcept:\n\tfrom urllib.request import pathname2url\n\nwebbrowser.open(\"file://\" + pathname2url(os.path.abspath(sys.argv[1])))\nendef\nexport BROWSER_PYSCRIPT\n\ndefine PRINT_HELP_PYSCRIPT\nimport re, sys\n\nfor line in sys.stdin:\n\tmatch = re.match(r'^([a-zA-Z_-]+):.*?## (.*)$$', line)\n\tif match:\n\t\ttarget, help = match.groups()\n\t\tprint(\"%-20s %s\" % (target, help))\nendef\nexport PRINT_HELP_PYSCRIPT\nBROWSER := python3 -c \"$$BROWSER_PYSCRIPT\"\n\nhelp:\n\t@python3 -c \"$$PRINT_HELP_PYSCRIPT\" < $(MAKEFILE_LIST)\n\nclean: clean-build clean-pyc clean-test ## remove all build, test, coverage and Python artifacts\n\n\nclean-build: ## remove build artifacts\n\trm -fr build/\n\trm -fr dist/\n\trm -fr .eggs/\n\tfind . -name '*.egg-info' -exec rm -fr {} +\n\tfind . -name '*.egg' -exec rm -f {} +\n\nclean-pyc: ## remove Python file artifacts\n\tfind . -name '*.pyc' -exec rm -f {} +\n\tfind . -name '*.pyo' -exec rm -f {} +\n\tfind . -name '*~' -exec rm -f {} +\n\tfind . -name '__pycache__' -exec rm -fr {} +\n\nclean-test: ## remove test and coverage artifacts\n\trm -fr .tox/\n\trm -f .coverage\n\trm -fr htmlcov/\n\nlint: ## check style with flake8\n\tflake8 face_recognition tests\n\ntest: ## run tests quickly with the default Python\n\n\t\tpython3 setup.py test\n\ntest-all: ## run tests on every Python version with tox\n\ttox\n\ncoverage: ## check code coverage quickly with the default Python\n\n\t\tcoverage run --source face_recognition setup.py test\n\n\t\tcoverage report -m\n\t\tcoverage html\n\t\t$(BROWSER) htmlcov/index.html\n\ndocs: ## generate Sphinx HTML documentation, including API docs\n\tsphinx-apidoc -o docs/ face_recognition\n\t$(MAKE) -C docs clean\n\t$(MAKE) -C docs html\n\t$(BROWSER) docs/_build/html/index.html\n\nservedocs: docs ## compile the docs watching for changes\n\twatchmedo shell-command -p '*.rst' -c '$(MAKE) -C docs html' -R -D .\n\nrelease: clean ## package and upload a release\n\tpython3 setup.py sdist\n\tpython3 setup.py bdist_wheel\n\ttwine upload dist/*\n\ndist: clean ## builds source and wheel package\n\tpython3 setup.py sdist\n\tpython3 setup.py bdist_wheel\n\tls -l dist\n\ninstall: clean ## install the package to the active Python's site-packages\n\tpython3 setup.py install\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.96875,
          "content": "# Face Recognition\n\n_You can also read a translated version of this file [in Chinese 简体中文版](https://github.com/ageitgey/face_recognition/blob/master/README_Simplified_Chinese.md) or [in Korean 한국어](https://github.com/ageitgey/face_recognition/blob/master/README_Korean.md) or [in Japanese 日本語](https://github.com/m-i-k-i/face_recognition/blob/master/README_Japanese.md)._\n\nRecognize and manipulate faces from Python or from the command line with\nthe world's simplest face recognition library.\n\nBuilt using [dlib](http://dlib.net/)'s state-of-the-art face recognition\nbuilt with deep learning. The model has an accuracy of 99.38% on the\n[Labeled Faces in the Wild](http://vis-www.cs.umass.edu/lfw/) benchmark.\n\nThis also provides a simple `face_recognition` command line tool that lets\nyou do face recognition on a folder of images from the command line!\n\n\n[![PyPI](https://img.shields.io/pypi/v/face_recognition.svg)](https://pypi.python.org/pypi/face_recognition)\n[![Build Status](https://github.com/ageitgey/face_recognition/workflows/CI/badge.svg?branch=master&event=push)](https://github.com/ageitgey/face_recognition/actions?query=workflow%3ACI)\n[![Documentation Status](https://readthedocs.org/projects/face-recognition/badge/?version=latest)](http://face-recognition.readthedocs.io/en/latest/?badge=latest)\n\n## Features\n\n#### Find faces in pictures\n\nFind all the faces that appear in a picture:\n\n![](https://cloud.githubusercontent.com/assets/896692/23625227/42c65360-025d-11e7-94ea-b12f28cb34b4.png)\n\n```python\nimport face_recognition\nimage = face_recognition.load_image_file(\"your_file.jpg\")\nface_locations = face_recognition.face_locations(image)\n```\n\n#### Find and manipulate facial features in pictures\n\nGet the locations and outlines of each person's eyes, nose, mouth and chin.\n\n![](https://cloud.githubusercontent.com/assets/896692/23625282/7f2d79dc-025d-11e7-8728-d8924596f8fa.png)\n\n```python\nimport face_recognition\nimage = face_recognition.load_image_file(\"your_file.jpg\")\nface_landmarks_list = face_recognition.face_landmarks(image)\n```\n\nFinding facial features is super useful for lots of important stuff. But you can also use it for really stupid stuff\nlike applying [digital make-up](https://github.com/ageitgey/face_recognition/blob/master/examples/digital_makeup.py) (think 'Meitu'):\n\n![](https://cloud.githubusercontent.com/assets/896692/23625283/80638760-025d-11e7-80a2-1d2779f7ccab.png)\n\n#### Identify faces in pictures\n\nRecognize who appears in each photo.\n\n![](https://cloud.githubusercontent.com/assets/896692/23625229/45e049b6-025d-11e7-89cc-8a71cf89e713.png)\n\n```python\nimport face_recognition\nknown_image = face_recognition.load_image_file(\"biden.jpg\")\nunknown_image = face_recognition.load_image_file(\"unknown.jpg\")\n\nbiden_encoding = face_recognition.face_encodings(known_image)[0]\nunknown_encoding = face_recognition.face_encodings(unknown_image)[0]\n\nresults = face_recognition.compare_faces([biden_encoding], unknown_encoding)\n```\n\nYou can even use this library with other Python libraries to do real-time face recognition:\n\n![](https://cloud.githubusercontent.com/assets/896692/24430398/36f0e3f0-13cb-11e7-8258-4d0c9ce1e419.gif)\n\nSee [this example](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py) for the code.\n\n## Online Demos\n\nUser-contributed shared Jupyter notebook demo (not officially supported): [![Deepnote](https://beta.deepnote.org/buttons/try-in-a-jupyter-notebook.svg)](https://beta.deepnote.org/launch?template=face_recognition)\n\n## Installation\n\n### Requirements\n\n  * Python 3.3+ or Python 2.7\n  * macOS or Linux (Windows not officially supported, but might work)\n\n### Installation Options:\n\n#### Installing on Mac or Linux\n\nFirst, make sure you have dlib already installed with Python bindings:\n\n  * [How to install dlib from source on macOS or Ubuntu](https://gist.github.com/ageitgey/629d75c1baac34dfa5ca2a1928a7aeaf)\n  \nThen, make sure you have cmake installed:  \n \n```brew install cmake```\n\nFinally, install this module from pypi using `pip3` (or `pip2` for Python 2):\n\n```bash\npip3 install face_recognition\n```\n\nAlternatively, you can try this library with [Docker](https://www.docker.com/), see [this section](#deployment).\n\nIf you are having trouble with installation, you can also try out a\n[pre-configured VM](https://medium.com/@ageitgey/try-deep-learning-in-python-now-with-a-fully-pre-configured-vm-1d97d4c3e9b).\n\n#### Installing on an Nvidia Jetson Nano board\n\n * [Jetson Nano installation instructions](https://medium.com/@ageitgey/build-a-hardware-based-face-recognition-system-for-150-with-the-nvidia-jetson-nano-and-python-a25cb8c891fd)\n   * Please follow the instructions in the article carefully. There is current a bug in the CUDA libraries on the Jetson Nano that will cause this library to fail silently if you don't follow the instructions in the article to comment out a line in dlib and recompile it.\n\n#### Installing on Raspberry Pi 2+\n\n  * [Raspberry Pi 2+ installation instructions](https://gist.github.com/ageitgey/1ac8dbe8572f3f533df6269dab35df65)\n\n#### Installing on FreeBSD\n\n```bash\npkg install graphics/py-face_recognition\n```\n\n#### Installing on Windows\n\nWhile Windows isn't officially supported, helpful users have posted instructions on how to install this library:\n\n  * [@masoudr's Windows 10 installation guide (dlib + face_recognition)](https://github.com/ageitgey/face_recognition/issues/175#issue-257710508)\n\n#### Installing a pre-configured Virtual Machine image\n\n  * [Download the pre-configured VM image](https://medium.com/@ageitgey/try-deep-learning-in-python-now-with-a-fully-pre-configured-vm-1d97d4c3e9b) (for VMware Player or VirtualBox).\n\n## Usage\n\n### Command-Line Interface\n\nWhen you install `face_recognition`, you get two simple command-line \nprograms:\n\n* `face_recognition` - Recognize faces in a photograph or folder full for \n   photographs.\n* `face_detection` - Find faces in a photograph or folder full for photographs.\n\n#### `face_recognition` command line tool\n\nThe `face_recognition` command lets you recognize faces in a photograph or \nfolder full  for photographs.\n\nFirst, you need to provide a folder with one picture of each person you\nalready know. There should be one image file for each person with the\nfiles named according to who is in the picture:\n\n![known](https://cloud.githubusercontent.com/assets/896692/23582466/8324810e-00df-11e7-82cf-41515eba704d.png)\n\nNext, you need a second folder with the files you want to identify:\n\n![unknown](https://cloud.githubusercontent.com/assets/896692/23582465/81f422f8-00df-11e7-8b0d-75364f641f58.png)\n\nThen in you simply run the command `face_recognition`, passing in\nthe folder of known people and the folder (or single image) with unknown\npeople and it tells you who is in each image:\n\n```bash\n$ face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/\n\n/unknown_pictures/unknown.jpg,Barack Obama\n/face_recognition_test/unknown_pictures/unknown.jpg,unknown_person\n```\n\nThere's one line in the output for each face. The data is comma-separated\nwith the filename and the name of the person found.\n\nAn `unknown_person` is a face in the image that didn't match anyone in\nyour folder of known people.\n\n#### `face_detection` command line tool\n\nThe `face_detection` command lets you find the location (pixel coordinatates) \nof any faces in an image.\n\nJust run the command `face_detection`, passing in a folder of images \nto check (or a single image):\n\n```bash\n$ face_detection  ./folder_with_pictures/\n\nexamples/image1.jpg,65,215,169,112\nexamples/image2.jpg,62,394,211,244\nexamples/image2.jpg,95,941,244,792\n```\n\nIt prints one line for each face that was detected. The coordinates\nreported are the top, right, bottom and left coordinates of the face (in pixels).\n \n##### Adjusting Tolerance / Sensitivity\n\nIf you are getting multiple matches for the same person, it might be that\nthe people in your photos look very similar and a lower tolerance value\nis needed to make face comparisons more strict.\n\nYou can do that with the `--tolerance` parameter. The default tolerance\nvalue is 0.6 and lower numbers make face comparisons more strict:\n\n```bash\n$ face_recognition --tolerance 0.54 ./pictures_of_people_i_know/ ./unknown_pictures/\n\n/unknown_pictures/unknown.jpg,Barack Obama\n/face_recognition_test/unknown_pictures/unknown.jpg,unknown_person\n```\n\nIf you want to see the face distance calculated for each match in order\nto adjust the tolerance setting, you can use `--show-distance true`:\n\n```bash\n$ face_recognition --show-distance true ./pictures_of_people_i_know/ ./unknown_pictures/\n\n/unknown_pictures/unknown.jpg,Barack Obama,0.378542298956785\n/face_recognition_test/unknown_pictures/unknown.jpg,unknown_person,None\n```\n\n##### More Examples\n\nIf you simply want to know the names of the people in each photograph but don't\ncare about file names, you could do this:\n\n```bash\n$ face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/ | cut -d ',' -f2\n\nBarack Obama\nunknown_person\n```\n\n##### Speeding up Face Recognition\n\nFace recognition can be done in parallel if you have a computer with\nmultiple CPU cores. For example, if your system has 4 CPU cores, you can\nprocess about 4 times as many images in the same amount of time by using\nall your CPU cores in parallel.\n\nIf you are using Python 3.4 or newer, pass in a `--cpus <number_of_cpu_cores_to_use>` parameter:\n\n```bash\n$ face_recognition --cpus 4 ./pictures_of_people_i_know/ ./unknown_pictures/\n```\n\nYou can also pass in `--cpus -1` to use all CPU cores in your system.\n\n#### Python Module\n\nYou can import the `face_recognition` module and then easily manipulate\nfaces with just a couple of lines of code. It's super easy!\n\nAPI Docs: [https://face-recognition.readthedocs.io](https://face-recognition.readthedocs.io/en/latest/face_recognition.html).\n\n##### Automatically find all the faces in an image\n\n```python\nimport face_recognition\n\nimage = face_recognition.load_image_file(\"my_picture.jpg\")\nface_locations = face_recognition.face_locations(image)\n\n# face_locations is now an array listing the co-ordinates of each face!\n```\n\nSee [this example](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture.py)\n to try it out.\n\nYou can also opt-in to a somewhat more accurate deep-learning-based face detection model.\n\nNote: GPU acceleration (via NVidia's CUDA library) is required for good\nperformance with this model. You'll also want to enable CUDA support\nwhen compliling `dlib`.\n\n```python\nimport face_recognition\n\nimage = face_recognition.load_image_file(\"my_picture.jpg\")\nface_locations = face_recognition.face_locations(image, model=\"cnn\")\n\n# face_locations is now an array listing the co-ordinates of each face!\n```\n\nSee [this example](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture_cnn.py)\n to try it out.\n\nIf you have a lot of images and a GPU, you can also\n[find faces in batches](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_batches.py).\n\n##### Automatically locate the facial features of a person in an image\n\n```python\nimport face_recognition\n\nimage = face_recognition.load_image_file(\"my_picture.jpg\")\nface_landmarks_list = face_recognition.face_landmarks(image)\n\n# face_landmarks_list is now an array with the locations of each facial feature in each face.\n# face_landmarks_list[0]['left_eye'] would be the location and outline of the first person's left eye.\n```\n\nSee [this example](https://github.com/ageitgey/face_recognition/blob/master/examples/find_facial_features_in_picture.py)\n to try it out.\n\n##### Recognize faces in images and identify who they are\n\n```python\nimport face_recognition\n\npicture_of_me = face_recognition.load_image_file(\"me.jpg\")\nmy_face_encoding = face_recognition.face_encodings(picture_of_me)[0]\n\n# my_face_encoding now contains a universal 'encoding' of my facial features that can be compared to any other picture of a face!\n\nunknown_picture = face_recognition.load_image_file(\"unknown.jpg\")\nunknown_face_encoding = face_recognition.face_encodings(unknown_picture)[0]\n\n# Now we can see the two face encodings are of the same person with `compare_faces`!\n\nresults = face_recognition.compare_faces([my_face_encoding], unknown_face_encoding)\n\nif results[0] == True:\n    print(\"It's a picture of me!\")\nelse:\n    print(\"It's not a picture of me!\")\n```\n\nSee [this example](https://github.com/ageitgey/face_recognition/blob/master/examples/recognize_faces_in_pictures.py)\n to try it out.\n\n## Python Code Examples\n\nAll the examples are available [here](https://github.com/ageitgey/face_recognition/tree/master/examples).\n\n\n#### Face Detection\n\n* [Find faces in a photograph](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture.py)\n* [Find faces in a photograph (using deep learning)](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture_cnn.py)\n* [Find faces in batches of images w/ GPU (using deep learning)](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_batches.py)\n* [Blur all the faces in a live video using your webcam (Requires OpenCV to be installed)](https://github.com/ageitgey/face_recognition/blob/master/examples/blur_faces_on_webcam.py)\n\n#### Facial Features\n\n* [Identify specific facial features in a photograph](https://github.com/ageitgey/face_recognition/blob/master/examples/find_facial_features_in_picture.py)\n* [Apply (horribly ugly) digital make-up](https://github.com/ageitgey/face_recognition/blob/master/examples/digital_makeup.py)\n\n#### Facial Recognition\n\n* [Find and recognize unknown faces in a photograph based on photographs of known people](https://github.com/ageitgey/face_recognition/blob/master/examples/recognize_faces_in_pictures.py)\n* [Identify and draw boxes around each person in a photo](https://github.com/ageitgey/face_recognition/blob/master/examples/identify_and_draw_boxes_on_faces.py)\n* [Compare faces by numeric face distance instead of only True/False matches](https://github.com/ageitgey/face_recognition/blob/master/examples/face_distance.py)\n* [Recognize faces in live video using your webcam - Simple / Slower Version (Requires OpenCV to be installed)](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam.py)\n* [Recognize faces in live video using your webcam - Faster Version (Requires OpenCV to be installed)](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py)\n* [Recognize faces in a video file and write out new video file (Requires OpenCV to be installed)](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_video_file.py)\n* [Recognize faces on a Raspberry Pi w/ camera](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_on_raspberry_pi.py)\n* [Run a web service to recognize faces via HTTP (Requires Flask to be installed)](https://github.com/ageitgey/face_recognition/blob/master/examples/web_service_example.py)\n* [Recognize faces with a K-nearest neighbors classifier](https://github.com/ageitgey/face_recognition/blob/master/examples/face_recognition_knn.py)\n* [Train multiple images per person then recognize faces using a SVM](https://github.com/ageitgey/face_recognition/blob/master/examples/face_recognition_svm.py)\n\n## Creating a Standalone Executable\nIf you want to create a standalone executable that can run without the need to install `python` or `face_recognition`, you can use [PyInstaller](https://github.com/pyinstaller/pyinstaller). However, it requires some custom configuration to work with this library. See [this issue](https://github.com/ageitgey/face_recognition/issues/357) for how to do it.\n\n## Articles and Guides that cover `face_recognition`\n\n- My article on how Face Recognition works: [Modern Face Recognition with Deep Learning](https://medium.com/@ageitgey/machine-learning-is-fun-part-4-modern-face-recognition-with-deep-learning-c3cffc121d78)\n  - Covers the algorithms and how they generally work\n- [Face recognition with OpenCV, Python, and deep learning](https://www.pyimagesearch.com/2018/06/18/face-recognition-with-opencv-python-and-deep-learning/) by Adrian Rosebrock\n  - Covers how to use face recognition in practice\n- [Raspberry Pi Face Recognition](https://www.pyimagesearch.com/2018/06/25/raspberry-pi-face-recognition/) by Adrian Rosebrock\n  - Covers how to use this on a Raspberry Pi\n- [Face clustering with Python](https://www.pyimagesearch.com/2018/07/09/face-clustering-with-python/) by Adrian Rosebrock\n  - Covers how to automatically cluster photos based on who appears in each photo using unsupervised learning\n\n## How Face Recognition Works\n\nIf you want to learn how face location and recognition work instead of\ndepending on a black box library, [read my article](https://medium.com/@ageitgey/machine-learning-is-fun-part-4-modern-face-recognition-with-deep-learning-c3cffc121d78).\n\n## Caveats\n\n* The face recognition model is trained on adults and does not work very well on children. It tends to mix\n  up children quite easy using the default comparison threshold of 0.6.\n* Accuracy may vary between ethnic groups. Please see [this wiki page](https://github.com/ageitgey/face_recognition/wiki/Face-Recognition-Accuracy-Problems#question-face-recognition-works-well-with-european-individuals-but-overall-accuracy-is-lower-with-asian-individuals) for more details.\n\n## <a name=\"deployment\">Deployment to Cloud Hosts (Heroku, AWS, etc)</a>\n\nSince `face_recognition` depends on `dlib` which is written in C++, it can be tricky to deploy an app\nusing it to a cloud hosting provider like Heroku or AWS.\n\nTo make things easier, there's an example Dockerfile in this repo that shows how to run an app built with\n`face_recognition` in a [Docker](https://www.docker.com/) container. With that, you should be able to deploy\nto any service that supports Docker images.\n\nYou can try the Docker image locally by running: `docker-compose up --build`\n\nThere are also [several prebuilt Docker images.](docker/README.md)\n\nLinux users with a GPU (drivers >= 384.81) and [Nvidia-Docker](https://github.com/NVIDIA/nvidia-docker) installed can run the example on the GPU: Open the [docker-compose.yml](docker-compose.yml) file and uncomment the `dockerfile: Dockerfile.gpu` and `runtime: nvidia` lines.\n\n## Having problems?\n\nIf you run into problems, please read the [Common Errors](https://github.com/ageitgey/face_recognition/wiki/Common-Errors) section of the wiki before filing a github issue.\n\n## Thanks\n\n* Many, many thanks to [Davis King](https://github.com/davisking) ([@nulhom](https://twitter.com/nulhom))\n  for creating dlib and for providing the trained facial feature detection and face encoding models\n  used in this library. For more information on the ResNet that powers the face encodings, check out\n  his [blog post](http://blog.dlib.net/2017/02/high-quality-face-recognition-with-deep.html).\n* Thanks to everyone who works on all the awesome Python data science libraries like numpy, scipy, scikit-image,\n  pillow, etc, etc that makes this kind of stuff so easy and fun in Python.\n* Thanks to [Cookiecutter](https://github.com/audreyr/cookiecutter) and the\n  [audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage) project template\n  for making Python project packaging way more tolerable.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 17.1123046875,
          "content": "Face Recognition\n================\n\n| Recognize and manipulate faces from Python or from the command line\n  with\n| the world's simplest face recognition library.\n\n| Built using `dlib <http://dlib.net/>`__'s state-of-the-art face\n  recognition\n| built with deep learning. The model has an accuracy of 99.38% on the\n| `Labeled Faces in the Wild <http://vis-www.cs.umass.edu/lfw/>`__\n  benchmark.\n\n| This also provides a simple ``face_recognition`` command line tool\n  that lets\n| you do face recognition on a folder of images from the command line!\n\n| |PyPI|\n| |Build Status|\n| |Documentation Status|\n\nFeatures\n--------\n\nFind faces in pictures\n^^^^^^^^^^^^^^^^^^^^^^\n\nFind all the faces that appear in a picture:\n\n|image3|\n\n.. code:: python\n\n    import face_recognition\n    image = face_recognition.load_image_file(\"your_file.jpg\")\n    face_locations = face_recognition.face_locations(image)\n\nFind and manipulate facial features in pictures\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGet the locations and outlines of each person's eyes, nose, mouth and\nchin.\n\n|image4|\n\n.. code:: python\n\n    import face_recognition\n    image = face_recognition.load_image_file(\"your_file.jpg\")\n    face_landmarks_list = face_recognition.face_landmarks(image)\n\n| Finding facial features is super useful for lots of important stuff.\n  But you can also use for really stupid stuff\n| like applying `digital\n  make-up <https://github.com/ageitgey/face_recognition/blob/master/examples/digital_makeup.py>`__\n  (think 'Meitu'):\n\n|image5|\n\nIdentify faces in pictures\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nRecognize who appears in each photo.\n\n|image6|\n\n.. code:: python\n\n    import face_recognition\n    known_image = face_recognition.load_image_file(\"biden.jpg\")\n    unknown_image = face_recognition.load_image_file(\"unknown.jpg\")\n\n    biden_encoding = face_recognition.face_encodings(known_image)[0]\n    unknown_encoding = face_recognition.face_encodings(unknown_image)[0]\n\n    results = face_recognition.compare_faces([biden_encoding], unknown_encoding)\n\nYou can even use this library with other Python libraries to do\nreal-time face recognition:\n\n|image7|\n\nSee `this\nexample <https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py>`__\nfor the code.\n\nInstallation\n------------\n\nRequirements\n^^^^^^^^^^^^\n\n-  Python 3.3+ or Python 2.7\n-  macOS or Linux (Windows not officially supported, but might work)\n\nInstalling on Mac or Linux\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFirst, make sure you have dlib already installed with Python bindings:\n\n-  `How to install dlib from source on macOS or\n   Ubuntu <https://gist.github.com/ageitgey/629d75c1baac34dfa5ca2a1928a7aeaf>`__\n\nThen, install this module from pypi using ``pip3`` (or ``pip2`` for\nPython 2):\n\n.. code:: bash\n\n    pip3 install face_recognition\n\n| If you are having trouble with installation, you can also try out a\n| `pre-configured\n  VM <https://medium.com/@ageitgey/try-deep-learning-in-python-now-with-a-fully-pre-configured-vm-1d97d4c3e9b>`__.\n\nInstalling on Raspberry Pi 2+\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  `Raspberry Pi 2+ installation\n   instructions <https://gist.github.com/ageitgey/1ac8dbe8572f3f533df6269dab35df65>`__\n\nInstalling on Windows\n^^^^^^^^^^^^^^^^^^^^^\n\nWhile Windows isn't officially supported, helpful users have posted\ninstructions on how to install this library:\n\n-  `@masoudr's Windows 10 installation guide (dlib +\n   face\\_recognition) <https://github.com/ageitgey/face_recognition/issues/175#issue-257710508>`__\n\nInstalling a pre-configured Virtual Machine image\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  `Download the pre-configured VM\n   image <https://medium.com/@ageitgey/try-deep-learning-in-python-now-with-a-fully-pre-configured-vm-1d97d4c3e9b>`__\n   (for VMware Player or VirtualBox).\n\nUsage\n-----\n\nCommand-Line Interface\n^^^^^^^^^^^^^^^^^^^^^^\n\n| When you install ``face_recognition``, you get a simple command-line\n  program\n| called ``face_recognition`` that you can use to recognize faces in a\n| photograph or folder full for photographs.\n\n| First, you need to provide a folder with one picture of each person\n  you\n| already know. There should be one image file for each person with the\n| files named according to who is in the picture:\n\n|known|\n\nNext, you need a second folder with the files you want to identify:\n\n|unknown|\n\n| Then in you simply run the command ``face_recognition``, passing in\n| the folder of known people and the folder (or single image) with\n  unknown\n| people and it tells you who is in each image:\n\n.. code:: bash\n\n    $ face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/\n\n    /unknown_pictures/unknown.jpg,Barack Obama\n    /face_recognition_test/unknown_pictures/unknown.jpg,unknown_person\n\n| There's one line in the output for each face. The data is\n  comma-separated\n| with the filename and the name of the person found.\n\n| An ``unknown_person`` is a face in the image that didn't match anyone\n  in\n| your folder of known people.\n\nAdjusting Tolerance / Sensitivity\n'''''''''''''''''''''''''''''''''\n\n| If you are getting multiple matches for the same person, it might be\n  that\n| the people in your photos look very similar and a lower tolerance\n  value\n| is needed to make face comparisons more strict.\n\n| You can do that with the ``--tolerance`` parameter. The default\n  tolerance\n| value is 0.6 and lower numbers make face comparisons more strict:\n\n.. code:: bash\n\n    $ face_recognition --tolerance 0.54 ./pictures_of_people_i_know/ ./unknown_pictures/\n\n    /unknown_pictures/unknown.jpg,Barack Obama\n    /face_recognition_test/unknown_pictures/unknown.jpg,unknown_person\n\n| If you want to see the face distance calculated for each match in\n  order\n| to adjust the tolerance setting, you can use ``--show-distance true``:\n\n.. code:: bash\n\n    $ face_recognition --show-distance true ./pictures_of_people_i_know/ ./unknown_pictures/\n\n    /unknown_pictures/unknown.jpg,Barack Obama,0.378542298956785\n    /face_recognition_test/unknown_pictures/unknown.jpg,unknown_person,None\n\nMore Examples\n'''''''''''''\n\n| If you simply want to know the names of the people in each photograph\n  but don't\n| care about file names, you could do this:\n\n.. code:: bash\n\n    $ face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/ | cut -d ',' -f2\n\n    Barack Obama\n    unknown_person\n\nSpeeding up Face Recognition\n''''''''''''''''''''''''''''\n\n| Face recognition can be done in parallel if you have a computer with\n| multiple CPU cores. For example if your system has 4 CPU cores, you\n  can\n| process about 4 times as many images in the same amount of time by\n  using\n| all your CPU cores in parallel.\n\nIf you are using Python 3.4 or newer, pass in a\n``--cpus <number_of_cpu_cores_to_use>`` parameter:\n\n.. code:: bash\n\n    $ face_recognition --cpus 4 ./pictures_of_people_i_know/ ./unknown_pictures/\n\nYou can also pass in ``--cpus -1`` to use all CPU cores in your system.\n\nPython Module\n^^^^^^^^^^^^^\n\n| You can import the ``face_recognition`` module and then easily\n  manipulate\n| faces with just a couple of lines of code. It's super easy!\n\nAPI Docs:\n`https://face-recognition.readthedocs.io <https://face-recognition.readthedocs.io/en/latest/face_recognition.html>`__.\n\nAutomatically find all the faces in an image\n''''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    import face_recognition\n\n    image = face_recognition.load_image_file(\"my_picture.jpg\")\n    face_locations = face_recognition.face_locations(image)\n\n    # face_locations is now an array listing the co-ordinates of each face!\n\n| See `this\n  example <https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture.py>`__\n| to try it out.\n\nYou can also opt-in to a somewhat more accurate deep-learning-based face\ndetection model.\n\n| Note: GPU acceleration (via nvidia's CUDA library) is required for\n  good\n| performance with this model. You'll also want to enable CUDA support\n| when compliling ``dlib``.\n\n.. code:: python\n\n    import face_recognition\n\n    image = face_recognition.load_image_file(\"my_picture.jpg\")\n    face_locations = face_recognition.face_locations(image, model=\"cnn\")\n\n    # face_locations is now an array listing the co-ordinates of each face!\n\n| See `this\n  example <https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture_cnn.py>`__\n| to try it out.\n\n| If you have a lot of images and a GPU, you can also\n| `find faces in\n  batches <https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_batches.py>`__.\n\nAutomatically locate the facial features of a person in an image\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    import face_recognition\n\n    image = face_recognition.load_image_file(\"my_picture.jpg\")\n    face_landmarks_list = face_recognition.face_landmarks(image)\n\n    # face_landmarks_list is now an array with the locations of each facial feature in each face.\n    # face_landmarks_list[0]['left_eye'] would be the location and outline of the first person's left eye.\n\n| See `this\n  example <https://github.com/ageitgey/face_recognition/blob/master/examples/find_facial_features_in_picture.py>`__\n| to try it out.\n\nRecognize faces in images and identify who they are\n'''''''''''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    import face_recognition\n\n    picture_of_me = face_recognition.load_image_file(\"me.jpg\")\n    my_face_encoding = face_recognition.face_encodings(picture_of_me)[0]\n\n    # my_face_encoding now contains a universal 'encoding' of my facial features that can be compared to any other picture of a face!\n\n    unknown_picture = face_recognition.load_image_file(\"unknown.jpg\")\n    unknown_face_encoding = face_recognition.face_encodings(unknown_picture)[0]\n\n    # Now we can see the two face encodings are of the same person with `compare_faces`!\n\n    results = face_recognition.compare_faces([my_face_encoding], unknown_face_encoding)\n\n    if results[0] == True:\n        print(\"It's a picture of me!\")\n    else:\n        print(\"It's not a picture of me!\")\n\n| See `this\n  example <https://github.com/ageitgey/face_recognition/blob/master/examples/recognize_faces_in_pictures.py>`__\n| to try it out.\n\nPython Code Examples\n--------------------\n\nAll the examples are available\n`here <https://github.com/ageitgey/face_recognition/tree/master/examples>`__.\n\nFace Detection\n^^^^^^^^^^^^^^\n\n-  `Find faces in a\n   photograph <https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture.py>`__\n-  `Find faces in a photograph (using deep\n   learning) <https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture_cnn.py>`__\n-  `Find faces in batches of images w/ GPU (using deep\n   learning) <https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_batches.py>`__\n\nFacial Features\n^^^^^^^^^^^^^^^\n\n-  `Identify specific facial features in a\n   photograph <https://github.com/ageitgey/face_recognition/blob/master/examples/find_facial_features_in_picture.py>`__\n-  `Apply (horribly ugly) digital\n   make-up <https://github.com/ageitgey/face_recognition/blob/master/examples/digital_makeup.py>`__\n\nFacial Recognition\n^^^^^^^^^^^^^^^^^^\n\n-  `Find and recognize unknown faces in a photograph based on\n   photographs of known\n   people <https://github.com/ageitgey/face_recognition/blob/master/examples/recognize_faces_in_pictures.py>`__\n-  `Compare faces by numeric face distance instead of only True/False\n   matches <https://github.com/ageitgey/face_recognition/blob/master/examples/face_distance.py>`__\n-  `Recognize faces in live video using your webcam - Simple / Slower\n   Version (Requires OpenCV to be\n   installed) <https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam.py>`__\n-  `Recognize faces in live video using your webcam - Faster Version\n   (Requires OpenCV to be\n   installed) <https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py>`__\n-  `Recognize faces in a video file and write out new video file\n   (Requires OpenCV to be\n   installed) <https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_video_file.py>`__\n-  `Recognize faces on a Raspberry Pi w/\n   camera <https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_on_raspberry_pi.py>`__\n-  `Run a web service to recognize faces via HTTP (Requires Flask to be\n   installed) <https://github.com/ageitgey/face_recognition/blob/master/examples/web_service_example.py>`__\n-  `Recognize faces with a K-nearest neighbors\n   classifier <https://github.com/ageitgey/face_recognition/blob/master/examples/face_recognition_knn.py>`__\n\n   .. rubric:: How Face Recognition Works\n      :name: how-face-recognition-works\n\n| If you want to learn how face location and recognition work instead of\n| depending on a black box library, `read my\n  article <https://medium.com/@ageitgey/machine-learning-is-fun-part-4-modern-face-recognition-with-deep-learning-c3cffc121d78>`__.\n\nCaveats\n-------\n\n-  The face recognition model is trained on adults and does not work\n   very well on children. It tends to mix\n   up children quite easy using the default comparison threshold of 0.6.\n\nDeployment to Cloud Hosts (Heroku, AWS, etc)\n--------------------------------------------\n\n| Since ``face_recognition`` depends on ``dlib`` which is written in\n  C++, it can be tricky to deploy an app\n| using it to a cloud hosting provider like Heroku or AWS.\n\n| To make things easier, there's an example Dockerfile in this repo that\n  shows how to run an app built with\n| ``face_recognition`` in a `Docker <https://www.docker.com/>`__\n  container. With that, you should be able to deploy\n| to any service that supports Docker images.\n\nCommon Issues\n-------------\n\nIssue: ``Illegal instruction (core dumped)`` when using\nface\\_recognition or running examples.\n\n| Solution: ``dlib`` is compiled with SSE4 or AVX support, but your CPU\n  is too old and doesn't support that.\n| You'll need to recompile ``dlib`` after `making the code change\n  outlined\n  here <https://github.com/ageitgey/face_recognition/issues/11#issuecomment-287398611>`__.\n\nIssue:\n``RuntimeError: Unsupported image type, must be 8bit gray or RGB image.``\nwhen running the webcam examples.\n\nSolution: Your webcam probably isn't set up correctly with OpenCV. `Look\nhere for\nmore <https://github.com/ageitgey/face_recognition/issues/21#issuecomment-287779524>`__.\n\nIssue: ``MemoryError`` when running ``pip2 install face_recognition``\n\n| Solution: The face\\_recognition\\_models file is too big for your\n  available pip cache memory. Instead,\n| try ``pip2 --no-cache-dir install face_recognition`` to avoid the\n  issue.\n\nIssue:\n``AttributeError: 'module' object has no attribute 'face_recognition_model_v1'``\n\nSolution: The version of ``dlib`` you have installed is too old. You\nneed version 19.7 or newer. Upgrade ``dlib``.\n\nIssue:\n``Attribute Error: 'Module' object has no attribute 'cnn_face_detection_model_v1'``\n\nSolution: The version of ``dlib`` you have installed is too old. You\nneed version 19.7 or newer. Upgrade ``dlib``.\n\nIssue: ``TypeError: imread() got an unexpected keyword argument 'mode'``\n\nSolution: The version of ``scipy`` you have installed is too old. You\nneed version 0.17 or newer. Upgrade ``scipy``.\n\nThanks\n------\n\n-  Many, many thanks to `Davis King <https://github.com/davisking>`__\n   (`@nulhom <https://twitter.com/nulhom>`__)\n   for creating dlib and for providing the trained facial feature\n   detection and face encoding models\n   used in this library. For more information on the ResNet that powers\n   the face encodings, check out\n   his `blog\n   post <http://blog.dlib.net/2017/02/high-quality-face-recognition-with-deep.html>`__.\n-  Thanks to everyone who works on all the awesome Python data science\n   libraries like numpy, scipy, scikit-image,\n   pillow, etc, etc that makes this kind of stuff so easy and fun in\n   Python.\n-  Thanks to `Cookiecutter <https://github.com/audreyr/cookiecutter>`__\n   and the\n   `audreyr/cookiecutter-pypackage <https://github.com/audreyr/cookiecutter-pypackage>`__\n   project template\n   for making Python project packaging way more tolerable.\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/face_recognition.svg\n   :target: https://pypi.python.org/pypi/face_recognition\n.. |Build Status| image:: https://travis-ci.org/ageitgey/face_recognition.svg?branch=master\n   :target: https://travis-ci.org/ageitgey/face_recognition\n.. |Documentation Status| image:: https://readthedocs.org/projects/face-recognition/badge/?version=latest\n   :target: http://face-recognition.readthedocs.io/en/latest/?badge=latest\n.. |image3| image:: https://cloud.githubusercontent.com/assets/896692/23625227/42c65360-025d-11e7-94ea-b12f28cb34b4.png\n.. |image4| image:: https://cloud.githubusercontent.com/assets/896692/23625282/7f2d79dc-025d-11e7-8728-d8924596f8fa.png\n.. |image5| image:: https://cloud.githubusercontent.com/assets/896692/23625283/80638760-025d-11e7-80a2-1d2779f7ccab.png\n.. |image6| image:: https://cloud.githubusercontent.com/assets/896692/23625229/45e049b6-025d-11e7-89cc-8a71cf89e713.png\n.. |image7| image:: https://cloud.githubusercontent.com/assets/896692/24430398/36f0e3f0-13cb-11e7-8258-4d0c9ce1e419.gif\n.. |known| image:: https://cloud.githubusercontent.com/assets/896692/23582466/8324810e-00df-11e7-82cf-41515eba704d.png\n.. |unknown| image:: https://cloud.githubusercontent.com/assets/896692/23582465/81f422f8-00df-11e7-8b0d-75364f641f58.png\n\n"
        },
        {
          "name": "README_Japanese.md",
          "type": "blob",
          "size": 21.62890625,
          "content": "\n# Face Recognition\n\n_このファイルは [英語（オリジナル） in English](https://github.com/ageitgey/face_recognition/blob/master/README.md)、 [中国語 简体中文版](https://github.com/ageitgey/face_recognition/blob/master/README_Simplified_Chinese.md) 、 [韓国語 한국어](https://github.com/ageitgey/face_recognition/blob/master/README_Korean.md)で読むこともできます。_\n\n\n世界で最もシンプルな顔認識ライブラリを使って、Pythonやコマンドラインで顔を認識・操作することができるライブラリです。\n\n[dlib](http://dlib.net/)のディープラーニングを用いた最先端の顔認識を使用して構築されており、このモデルは[Labeled Faces in the Wild](http://vis-www.cs.umass.edu/lfw/)ベンチマークにて99.38%の正解率を記録しています。\n\nシンプルな`face_recognition`コマンドラインツールも用意しており、コマンドラインでフォルダ内の画像を顔認識することもできます。\n\n[![PyPI](https://img.shields.io/pypi/v/face_recognition.svg)](https://pypi.python.org/pypi/face_recognition)\n[![Build Status](https://travis-ci.org/ageitgey/face_recognition.svg?branch=master)](https://travis-ci.org/ageitgey/face_recognition)\n[![Documentation Status](https://readthedocs.org/projects/face-recognition/badge/?version=latest)](http://face-recognition.readthedocs.io/en/latest/?badge=latest)\n\n## 特徴\n\n#### 画像から顔を探す\n\n画像に写っているすべての顔を探します。\n\n![](https://cloud.githubusercontent.com/assets/896692/23625227/42c65360-025d-11e7-94ea-b12f28cb34b4.png)\n\n```python\nimport face_recognition\nimage = face_recognition.load_image_file(\"your_file.jpg\")\nface_locations = face_recognition.face_locations(image)\n```\n#### 画像から顔の特徴を取得する\n\n画像の中の顔から目、鼻、口、あごの場所と輪郭を得ることができます。\n\n![](https://cloud.githubusercontent.com/assets/896692/23625282/7f2d79dc-025d-11e7-8728-d8924596f8fa.png)\n\n```python\nimport face_recognition\nimage = face_recognition.load_image_file(\"your_file.jpg\")\nface_landmarks_list = face_recognition.face_landmarks(image)\n```\n\n顔の特徴を見つけることは多くの重要なことに役立ちますが、[デジタルメイクアップ](https://github.com/ageitgey/face_recognition/blob/master/examples/digital_makeup.py) のようにさほど重要ではないことにも使うことができます。\n\n![](https://cloud.githubusercontent.com/assets/896692/23625283/80638760-025d-11e7-80a2-1d2779f7ccab.png)\n\n#### 画像の中の顔を特定する\n\nそれぞれの画像に写っている人物を認識します。\n\n![](https://cloud.githubusercontent.com/assets/896692/23625229/45e049b6-025d-11e7-89cc-8a71cf89e713.png)\n\n```python\nimport face_recognition\nknown_image = face_recognition.load_image_file(\"biden.jpg\")\nunknown_image = face_recognition.load_image_file(\"unknown.jpg\")\n\nbiden_encoding = face_recognition.face_encodings(known_image)[0]\nunknown_encoding = face_recognition.face_encodings(unknown_image)[0]\n\nresults = face_recognition.compare_faces([biden_encoding], unknown_encoding)\n```\n\n他のPythonライブラリと一緒に用いてリアルタイムに顔認識することも可能です。\n\n![](https://cloud.githubusercontent.com/assets/896692/24430398/36f0e3f0-13cb-11e7-8258-4d0c9ce1e419.gif)\n\n試す場合は[こちらのサンプルコード](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py) を参照してください。\n\n## デモ\n\nユーザーがコントリビュートした共有のJupyter notebookのデモがあります。（公式なサポートはありません）[![Deepnote](https://beta.deepnote.org/buttons/try-in-a-jupyter-notebook.svg)](https://beta.deepnote.org/launch?template=face_recognition)\n\n## インストール\n\n### 必要なもの\n\n * Python 3.3+ もしくは Python 2.7\n * macOS もしくは Linux (Windowsは公式にはサポートしていませんが動くかもしれません)\n\n### インストールオプション：\n\n#### MacもしくはLinuxにインストール\n\nはじめに、dlibをインストールします。（Pythonの拡張機能も有効にします）\n\n  * [macOSもしくはUbuntuにdlibをソースコードからインストールする方法](https://gist.github.com/ageitgey/629d75c1baac34dfa5ca2a1928a7aeaf)\n\n次に、このモジュールをpypiから`pip3`（Python2の場合は`pip2`）を使ってインストールします。\n\n```bash\npip3 install face_recognition\n```\n\nあるいは、[Docker](https://www.docker.com/)でこのライブラリを試すこともできます。詳しくは [こちらのセクション](#deployment)を参照してください。\n\nもし、インストールが上手くいかない場合は、すでに用意されているVMイメージで試すこともできます。詳しくは[事前構成済みのVM](https://medium.com/@ageitgey/try-deep-learning-in-python-now-with-a-fully-pre-configured-vm-1d97d4c3e9b)を参照してください。(VMware Player もしくは VirtualBoxが対象)\n\n#### Nvidia Jetson Nanoボードにインストール\n\n * [Jetson Nanoインストール手順](https://medium.com/@ageitgey/build-a-hardware-based-face-recognition-system-for-150-with-the-nvidia-jetson-nano-and-python-a25cb8c891fd)\n   * この記事の手順通りにインストールを行ってください。現在、Jetson NanoのCUDAライブラリにはバグがあり、記事の手順通りにdlibの一行をコメントアウトし再コンパイルしないと失敗する恐れがあります。\n\n#### Raspberry Pi 2+にインストール\n\n  * [Raspberry Pi 2+インストール手順](https://gist.github.com/ageitgey/1ac8dbe8572f3f533df6269dab35df65)\n\n#### Windowsにインストール\n\nWindowsは公式サポートされていませんが、役立つインストール手順が投稿されています。\n\n * [@masoudr's Windows 10 インストールガイド (dlib + face_recognition)](https://github.com/ageitgey/face_recognition/issues/175#issue-257710508)\n\n<!--\n\n#### Installing a pre-configured Virtual Machine image\n\n  * [Download the pre-configured VM image](https://medium.com/@ageitgey/try-deep-learning-in-python-now-with-a-fully-pre-configured-vm-1d97d4c3e9b) (for VMware Player or VirtualBox). -->\n\n## 使用方法\n\n### コマンドライン\n\n`face_recognition`をインストールすると、2つのシンプルなコマンドラインがついてきます。\n\n* `face_recognition` - 画像もしくはフォルダの中の複数の画像から顔を認識します\n\n* `face_detection` - 画像もしくはフォルダの中の複数の画像から顔を検出します\n\n#### `face_recognition` コマンドラインツール\n\n`face_recognition` コマンドによって、画像もしくはフォルダの中の複数の画像から顔を認識することができます。\n\nまずは、フォルダに知っている人たちの画像を一枚ずつ入れます。一人につき１枚の画像ファイルを用意し、画像のファイル名はその画像に写っている人物の名前にします。\n\n![知っている人](https://cloud.githubusercontent.com/assets/896692/23582466/8324810e-00df-11e7-82cf-41515eba704d.png)\n\n次に、2つ目のフォルダに特定したい画像を入れます。\n\n![知らない人](https://cloud.githubusercontent.com/assets/896692/23582465/81f422f8-00df-11e7-8b0d-75364f641f58.png)\n\nそして、`face_recognition`コマンドを実行し、知っている人の画像を入れたフォルダのパスと特定したい画像のフォルダ（もしくは画像ファイル）のパスを渡すと、それぞれの画像に誰がいるのかが分かります。\n\n```bash\n$ face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/\n\n/unknown_pictures/unknown.jpg,Barack Obama\n/face_recognition_test/unknown_pictures/unknown.jpg,unknown_person\n```\n\n一つの顔につき一行が出力され、ファイル名と特定した人物の名前がカンマ区切りで表示されます。\n\n`unknown_person`は知っている人の画像の中の誰ともマッチしなかった顔です。\n\n#### `face_detection` コマンドラインツール\n\n`face_detection` コマンドによって、画像の中にある顔の位置（ピクセル座標）を検出することができます。\n\n`face_detection` コマンドを実行し、顔を検出したい画像を入れたフォルダ（もしくは画像ファイル）のパスを渡してあげるだけです。\n\n```bash\n$ face_detection  ./folder_with_pictures/\n\nexamples/image1.jpg,65,215,169,112\nexamples/image2.jpg,62,394,211,244\nexamples/image2.jpg,95,941,244,792\n```\n\n検出された顔一つにつき一行が出力され、顔の上・右・下・左の座標（ピクセル単位）が表示されます。\n\n##### 許容誤差の調整 / 感度\n\nもし同一人物に対して複数の一致があった場合、画像の中に写っている人たちの顔が非常に似ている可能性があるので、顔の比較をより厳しくするために許容誤差の値を下げる必要があります。\n\n`--tolerance` コマンドによってそれが可能になります。デフォルトの許容誤差の値（tolerance value）を0.6よりも低くすると、より厳密に顔の比較をすることができます。\n\n```bash\n$ face_recognition --tolerance 0.54 ./pictures_of_people_i_know/ ./unknown_pictures/\n\n/unknown_pictures/unknown.jpg,Barack Obama\n/face_recognition_test/unknown_pictures/unknown.jpg,unknown_person\n```\n\nもし許容誤差の設定を調整するために一致した顔の距離値（face distance）を確認したい場合は `--show-distance true` を使ってください。\n\n```bash\n$ face_recognition --show-distance true ./pictures_of_people_i_know/ ./unknown_pictures/\n\n/unknown_pictures/unknown.jpg,Barack Obama,0.378542298956785\n/face_recognition_test/unknown_pictures/unknown.jpg,unknown_person,None\n```\n\n##### その他の例\n\nファイル名は出力せずに人物の名前だけを表示することもできます。\n\n```bash\n$ face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/ | cut -d ',' -f2\n\nBarack Obama\nunknown_person\n```\n\n##### Face Recognition の高速化\n\nマルチコア搭載コンピューターの場合は並列で実行することも可能です。例えば4CPUコアの場合、同じ時間で約4倍の画像を処理することができます。\n\nPython 3.4 以上を使っている場合は`--cpus <number_of_cpu_cores_to_use>` パラメータを渡します。\n\n```bash\n$ face_recognition --cpus 4 ./pictures_of_people_i_know/ ./unknown_pictures/\n```\n\n`--cpus -1` のパラメータを渡すことで、システムのすべてのCPUコアを使うことも可能です。\n\n#### Pythonモジュール\n\n`face_recognition` モジュールをインポートすると、数行のコードでとても簡単に操作を行うことができます。\n\nAPI Docs: [https://face-recognition.readthedocs.io](https://face-recognition.readthedocs.io/en/latest/face_recognition.html).\n\n##### 自動的に画像の中のすべての顔を見つける\n\n```python\nimport face_recognition\n\nimage = face_recognition.load_image_file(\"my_picture.jpg\")\nface_locations = face_recognition.face_locations(image)\n\n# face_locations is now an array listing the co-ordinates of each face!\n```\n\n試す場合は[こちらのサンプルコード](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture.py)を参照してください。\n\nさらに正確でディープラーニングをもとにした顔検出モデルを選択することも可能です。\n\n注意：このモデルで良いパフォーマンスを出すにはGPUアクセラレーション（NVidiaのCUDAライブラリ経由）が必要です。また、`dlib` をコンパイルする際にCUDAサポートを有効にする必要あります。\n\n```python\nimport face_recognition\n\nimage = face_recognition.load_image_file(\"my_picture.jpg\")\nface_locations = face_recognition.face_locations(image, model=\"cnn\")\n\n# face_locations is now an array listing the co-ordinates of each face!\n```\n\n試す場合は[こちらのサンプルコード](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture_cnn.py)を参照してください。\n\n大量の画像をGPUを使って処理する場合は、[こちらのサンプルコード](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_batches.py)のようにバッチ処理することも可能です。\n\n##### 自動的に画像の中の顔特徴を見つける\n\n```python\nimport face_recognition\n\nimage = face_recognition.load_image_file(\"my_picture.jpg\")\nface_landmarks_list = face_recognition.face_landmarks(image)\n\n# face_landmarks_list is now an array with the locations of each facial feature in each face.\n# face_landmarks_list[0]['left_eye'] would be the location and outline of the first person's left eye.\n```\n\n試す場合は[こちらのサンプルコード](https://github.com/ageitgey/face_recognition/blob/master/examples/find_facial_features_in_picture.py)を参照してください。\n\n##### 画像の中の顔を認識し、その人物を特定する\n\n```python\nimport face_recognition\n\npicture_of_me = face_recognition.load_image_file(\"me.jpg\")\nmy_face_encoding = face_recognition.face_encodings(picture_of_me)[0]\n\n# my_face_encoding now contains a universal 'encoding' of my facial features that can be compared to any other picture of a face!\n\nunknown_picture = face_recognition.load_image_file(\"unknown.jpg\")\nunknown_face_encoding = face_recognition.face_encodings(unknown_picture)[0]\n\n# Now we can see the two face encodings are of the same person with `compare_faces`!\n\nresults = face_recognition.compare_faces([my_face_encoding], unknown_face_encoding)\n\nif results[0] == True:\n    print(\"It's a picture of me!\")\nelse:\n    print(\"It's not a picture of me!\")\n```\n\n試す場合は[こちらのサンプルコード](https://github.com/ageitgey/face_recognition/blob/master/examples/recognize_faces_in_pictures.py)を参照してください。\n\n## Pythonコードのサンプル\n\nすべてのサンプルは[こちら](https://github.com/ageitgey/face_recognition/tree/master/examples)で見ることができます。\n\n#### 顔検出\n\n* [画像から顔を見つける](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture.py)\n* [画像から顔を見つける（ディープラーニングを使用する）](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture_cnn.py)\n* [大量の画像からGPUを用いて顔を見つける（ディープラーニングを使用する）](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_batches.py)\n* [WEBカメラによるライブ動画のすべての顔をぼかす(OpenCVのインストールが必要)](https://github.com/ageitgey/face_recognition/blob/master/examples/blur_faces_on_webcam.py)\n\n#### 顔の特徴\n\n* [画像から顔の特徴を特定する](https://github.com/ageitgey/face_recognition/blob/master/examples/find_facial_features_in_picture.py)\n* [デジタルメイクアップを施す](https://github.com/ageitgey/face_recognition/blob/master/examples/digital_makeup.py)\n\n#### 顔認識\n\n* [知っている人の画像をもとに画像の中の知らない顔を発見する](https://github.com/ageitgey/face_recognition/blob/master/examples/recognize_faces_in_pictures.py)\n* [画像の中の顔を四角で囲む](https://github.com/ageitgey/face_recognition/blob/master/examples/identify_and_draw_boxes_on_faces.py)\n* [顔の距離値（face distance）によって比較する](https://github.com/ageitgey/face_recognition/blob/master/examples/face_distance.py)\n* [WEBカメラによるライブ動画で顔認識する シンプル／低速バージョン (OpenCVのインストールが必要)](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam.py)\n* [WEBカメラによるライブ動画で顔認識する - 高速バージョン (OpenCVのインストールが必要)](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py)\n* [動画ファイルを顔認識して新しいファイルに書き出す (OpenCVのインストールが必要)](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_video_file.py)\n* [カメラ付きのRaspberry Piによって顔認識する](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_on_raspberry_pi.py)\n* [顔認識ウェブサービスをHTTP経由で実行する(Flaskのインストールが必要)](https://github.com/ageitgey/face_recognition/blob/master/examples/web_service_example.py)\n* [k近傍法で顔認識する](https://github.com/ageitgey/face_recognition/blob/master/examples/face_recognition_knn.py)\n* [人物ごとに複数の画像をトレーニングし、SVM（サポートベクターマシン）を用いて顔認識する](https://github.com/ageitgey/face_recognition/blob/master/examples/face_recognition_svm.py)\n\n## スタンドアロンの実行ファイルの作成\n\n`python` や `face_recognition`のインストールをせずに実行することができるスタンドアロンの実行ファイルを作る場合は、[PyInstaller](https://github.com/pyinstaller/pyinstaller)を使います。しかし、このライブラリを使用するにはカスタム設定が必要です。\n\n## `face_recognition`をカバーする記事とガイド\n\n- 顔認識の仕組みについての記事: [ディープラーニングによる最新の顔認識](https://medium.com/@ageitgey/machine-learning-is-fun-part-4-modern-face-recognition-with-deep-learning-c3cffc121d78)\n  - アルゴリズムとそれらがどのように動くかを取り上げています。\n- Adrian Rosebrock氏の [OpenCV、Python、ディープラーニングによる顔認識](https://www.pyimagesearch.com/2018/06/18/face-recognition-with-opencv-python-and-deep-learning/)\n  - 実際に顔認識を使用する方法について取り上げています。\n- Adrian Rosebrock氏の [Raspberry Pi 顔認識](https://www.pyimagesearch.com/2018/06/25/raspberry-pi-face-recognition/)\n  - Raspberry Piで使用する方法について取り上げています。\n- Adrian Rosebrock氏の [Pythonによる顔のクラスタリング](https://www.pyimagesearch.com/2018/07/09/face-clustering-with-python/)\n  - それぞれの画像に出現する人物に基づき、教師なし学習を用いて自動的に画像をクラスター化する方法について取り上げています。\n\n## 顔認識の仕組み\n\nブラックボックスライブラリに依存せず、顔の位置や認識の仕組みを知りたい方は[こちらの記事](https://medium.com/@ageitgey/machine-learning-is-fun-part-4-modern-face-recognition-with-deep-learning-c3cffc121d78)を読んでください。\n\n## 注意事項\n\n* この顔認識モデルは大人でトレーニングされており、子どもではあまり上手く機能しません。比較する閾値をデフォルト（0.6）のままで使用すると子どもを混同しやすくなります。\n\n* 精度は民族グループによって異なる可能性があります。詳しくは[こちらのwikiページ](https://github.com/ageitgey/face_recognition/wiki/Face-Recognition-Accuracy-Problems#question-face-recognition-works-well-with-european-individuals-but-overall-accuracy-is-lower-with-asian-individuals)を参照してください。\n\n## <a name=\"deployment\">クラウドにデプロイ (Heroku, AWSなど)</a>\n\n`face_recognition`はC++で書かれた`dlib`に依存しているため、HerokuやAWSのようなクラウドサーバにこれらを使ったアプリをデプロイするのは難しい場合があります。\n\nそれを簡単にするために、このレポジトリには[Docker](https://www.docker.com/)コンテナ内で`face_recognition`のビルドされたアプリを実行する方法を示したサンプルDockerfileがあります。これによって、Dockerイメージをサポートしているすべてのサービスにデプロイできるようになるはずです。\n\nコマンドを実行し、ローカルでDockerイメージを試すことができます。: `docker-compose up --build`\n\nGPU (drivers >= 384.81) および [Nvidia-Docker](https://github.com/NVIDIA/nvidia-docker) がインストールされているLinuxユーザーはGPUでサンプルを実行することができます。[docker-compose.yml](docker-compose.yml) を開き、`dockerfile: Dockerfile.gpu`と`runtime: nvidia`の行をコメントアウトしてください。\n\n## なにか問題が発生したら\n\nもし問題が発生した場合はGitHubにIssueをあげる前に、まずはwikiの[よくあるエラー](https://github.com/ageitgey/face_recognition/wiki/Common-Errors)をお読みください\n\n## 謝意\n\n* dlibを作り、このライブラリで使っているトレーニングされた顔の特徴検出とフェイスエンコーディングモデルを提供してくれた[Davis King](https://github.com/davisking) ([@nulhom](https://twitter.com/nulhom))、本当にありがとうございます。\n  フェイスエンコーディングを動かしているResNetについての情報は彼の[ブログ](http://blog.dlib.net/2017/02/high-quality-face-recognition-with-deep.html)を見てください。\n\n* このようなライブラリがPythonで簡単に楽しくできるためのnumpy, scipy, scikit-image, pillow など全ての素晴らしいPythonデータサイエンスライブラリに取り組んでいる人たちに感謝しています。\n\n* Pythonプロジェクトのパッケージングをより易しくする[Cookiecutter](https://github.com/audreyr/cookiecutter)と[audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage)に感謝しています。"
        },
        {
          "name": "README_Korean.md",
          "type": "blob",
          "size": 20.0546875,
          "content": "# Face Recognition\n\n본 문서는 _[중국어 简体中文版](https://github.com/ageitgey/face_recognition/blob/master/README_Simplified_Chinese.md) 로부터 번역되어 한국 사용자들의 기여를 통해 만들어진 문서입니다. \n\n본 라이브러리는 세계에서 가장 간단한 얼굴 인식 라이브러리로, Python 또는 명령 줄(CLI)에서 얼굴을 인식하고 조작해 볼 수 있습니다.\n\n본 라이브러리는 딥러닝 기반으로 제작된 [dlib](http://dlib.net/)의 최첨단 얼굴 인식 기능을 사용하여 구축되었습니다. 이 모델은 [Labeled Faces in the Wild](http://vis-www.cs.umass.edu/lfw/) 기준으로 99.38%의 정확도를 가집니다.\n\n또한, 명령 줄(CLI)에서 이미지 폴더 안에 있는 얼굴 인식 기능을 위한 간단한 `face_recognition` 도구를 제공합니다!\n\n\n[![PyPI](https://img.shields.io/pypi/v/face_recognition.svg)](https://pypi.python.org/pypi/face_recognition)\n[![Build Status](https://travis-ci.org/ageitgey/face_recognition.svg?branch=master)](https://travis-ci.org/ageitgey/face_recognition)\n[![Documentation Status](https://readthedocs.org/projects/face-recognition/badge/?version=latest)](http://face-recognition.readthedocs.io/en/latest/?badge=latest)\n\n## 특징\n\n#### 사진에서 얼굴 찾기\n\n사진에 등장하는 모든 얼굴들을 찾습니다:\n\n![](https://cloud.githubusercontent.com/assets/896692/23625227/42c65360-025d-11e7-94ea-b12f28cb34b4.png)\n\n```python\nimport face_recognition\nimage = face_recognition.load_image_file(\"your_file.jpg\")\nface_locations = face_recognition.face_locations(image)\n```\n\n#### 사진에 있는 얼굴의 특징을 찾기&조작하기\n\n각각의 사람의 눈, 코, 입, 턱의 위치와 윤곽을 잡아냅니다.\n\n![](https://cloud.githubusercontent.com/assets/896692/23625282/7f2d79dc-025d-11e7-8728-d8924596f8fa.png)\n\n```python\nimport face_recognition\nimage = face_recognition.load_image_file(\"your_file.jpg\")\nface_landmarks_list = face_recognition.face_landmarks(image)\n```\n\n얼굴의 특징을 찾는 기능은 여러 중요한 일들에 유용하게 쓰입니다. 예를 들어 [디지털 메이크업](https://github.com/ageitgey/face_recognition/blob/master/examples/digital_makeup.py) (Meitu 같은 것)을 적용하는 것과 같은 정말 멍청한 것들에도 쓰일 수 있습니다:\n\n![](https://cloud.githubusercontent.com/assets/896692/23625283/80638760-025d-11e7-80a2-1d2779f7ccab.png)\n\n#### 사진 속 얼굴의 신원 확인하기 \n\n각각의 사진에서 누가 등장하였는지 인식합니다.\n\n![](https://cloud.githubusercontent.com/assets/896692/23625229/45e049b6-025d-11e7-89cc-8a71cf89e713.png)\n\n```python\nimport face_recognition\nknown_image = face_recognition.load_image_file(\"biden.jpg\")\nunknown_image = face_recognition.load_image_file(\"unknown.jpg\")\n\nbiden_encoding = face_recognition.face_encodings(known_image)[0]\nunknown_encoding = face_recognition.face_encodings(unknown_image)[0]\n\nresults = face_recognition.compare_faces([biden_encoding], unknown_encoding)\n```\n\n이 라이브러리를 다른 Python 라이브러리와 함께 사용한다면 실시간 얼굴 인식도 가능합니다:\n\n![](https://cloud.githubusercontent.com/assets/896692/24430398/36f0e3f0-13cb-11e7-8258-4d0c9ce1e419.gif)\n\n코드에 대해서는 [이 예제](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py) 를 참조하십시오.\n\n## 온라인 데모\n\n실제 사용자가 공유한 Jupyter notebook demo (공식은 아닙니다): [![Deepnote](https://beta.deepnote.org/buttons/try-in-a-jupyter-notebook.svg)](https://beta.deepnote.org/launch?template=face_recognition)\n\n## 설치\n\n### 요구 사항\n\n  * Python 3.3+ 또는 Python 2.7\n  * macOS 또는 Linux (Windows는 공식적으로 지원하지 않으나, 작동할 수도 있음)\n\n### 설치 옵션들:\n\n#### Mac 또는 Linux에서의 설치\n\n우선, Python 바인딩을 통해 dlib이 이미 설치가 되어있는지를 확인해야 합니다:\n\n  * [macOS 또는 Ubuntu에서 소스에서 dlib을 설치하는 방법](https://gist.github.com/ageitgey/629d75c1baac34dfa5ca2a1928a7aeaf)\n\n다음으로, `pip3` (또는 Python2의 경우 `pip2`)을 사용하여 pypi에서의 모듈을 설치하십시오:\n\n```bash\npip3 install face_recognition\n```\n\n또는, [이 부분](#deployment)을 참조하여, [Docker](https://www.docker.com/)로 이 라이브러리를 시도해보십시오.\n\n설치에 대해 문제가 발생하였으면, [미리 구성된 VM](https://medium.com/@ageitgey/try-deep-learning-in-python-now-with-a-fully-pre-configured-vm-1d97d4c3e9b)을 사용해 볼 수도 있습니다.\n\n#### Raspberry Pi 2+에서의 설치\n\n  * [Raspberry Pi 2+ 설치 설명서](https://gist.github.com/ageitgey/1ac8dbe8572f3f533df6269dab35df65)\n\n#### Windows에서 설치하기\n\nWindows는 공식적으로 지원하지는 않지만, 친절한 유저들이 이 라이브러리를 어떻게 설치하는지 설명서를 작성했습니다:\n\n  * [@masoudr의 Windows 10 설치 가이드 (dlib + face_recognition)](https://github.com/ageitgey/face_recognition/issues/175#issue-257710508)\n\n#### 미리 구성된 가상머신 이미지(VM)를 설치하기\n\n  * [미리 구성된 VM 이미지를 다운로드하기](https://medium.com/@ageitgey/try-deep-learning-in-python-now-with-a-fully-pre-configured-vm-1d97d4c3e9b) (VMware Player 또는 VirtualBox용).\n\n## 사용법\n\n### 명령 줄 인터페이스\n\n`face_recognition`을 설치하면, 두 가지 간단한 명령 줄(CLI) 프로그램을 얻습니다:\n\n* `face_recognition` - 사진 혹은 사진이 들어있는 폴더에서, 얼굴을 인식합니다.\n* `face_detection` - 사진 혹은 사진이 들어있는 폴더에서, 얼굴을 찾습니다.\n\n#### `face_recognition` 명령 줄 도구\n\n`face_recognition` 명령을 사용하면 사진 혹은 사진이 들어있는 폴더에서, 얼굴을 인식할 수 있습니다.\n\n그러기 위해서는 먼저, 이미 알고 있는(인식하고자 하는) 각 사람의 사진 한 장이 폴더에 있어야 합니다. 그리고 사진 속 그 사람의 이름을 딴 이미지 파일이 각각 하나씩 있어야 합니다:\n\n![known](https://cloud.githubusercontent.com/assets/896692/23582466/8324810e-00df-11e7-82cf-41515eba704d.png)\n\n다음으로, 식별하고 싶은 파일들이 있는 두 번째 폴더가 필요합니다:\n\n![unknown](https://cloud.githubusercontent.com/assets/896692/23582465/81f422f8-00df-11e7-8b0d-75364f641f58.png)\n\n그런 다음, 알고 있는 사람의 폴더와 모르는 사람의 폴더(또는 단일 이미지)를 전달하는 `face_recognition` 명령을 실행하면, 각 이미지에 있는 사람이 누군지 알 수 있습니다:\n\n```bash\n$ face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/\n\n/unknown_pictures/unknown.jpg,Barack Obama\n/face_recognition_test/unknown_pictures/unknown.jpg,unknown_person\n```\n\n각각의 얼굴의 결과는 한 줄로 나타납니다. 각 줄은 파일 이름과 식별된 결과인 사람 이름이 쉼표로 구분되어 나타납니다.\n\n`unknown_person`은 이미지 속에 알고 있는 사람의 폴더에 있는 그 누구와도 일치하지 않는 얼굴임을 의미합니다.\n\n#### `face_detection` 명령 줄 도구\n\n`face_detection` 명령을 사용하면 이미지에서 얼굴의 위치 (픽셀 좌표)를 찾을 수 있습니다.\n\n`face_detection` 명령을 실행하여 검사 할 이미지 폴더 (또는 단일 이미지)를 전달하십시오:\n\n```bash\n$ face_detection  ./folder_with_pictures/\n\nexamples/image1.jpg,65,215,169,112\nexamples/image2.jpg,62,394,211,244\nexamples/image2.jpg,95,941,244,792\n```\n\n감지된 각 얼굴에 대해 한 줄씩 인쇄합니다. 결과값의 좌표는 각각 얼굴의 위쪽, 오른쪽, 아래쪽 및 왼쪽 좌표 (픽셀 단위)입니다.\n \n##### 오차 조절 / 민감도\n\n같은 사람에 대해 여러 개의 항목을 얻었다면, 사진에 있는 사람들이 매우 유사하게 보이기 때문이며 더욱 엄격한 얼굴 비교를 위해 낮은 허용치(tolerance value)가 필요합니다.\n\n`--tolerance` 변수를 이용하여 이를 수행할 수 있습니다. 기본 허용치 값은 0.6이며 숫자가 낮으면 더욱 엄격한 얼굴 비교가 가능합니다:\n\n```bash\n$ face_recognition --tolerance 0.54 ./pictures_of_people_i_know/ ./unknown_pictures/\n\n/unknown_pictures/unknown.jpg,Barack Obama\n/face_recognition_test/unknown_pictures/unknown.jpg,unknown_person\n```\n\n허용치 설정을 조정하기 위해, 각 식별에서의 얼굴 거리를 알고 싶다면 `--show-distance true`를 통해 볼 수 있습니다:\n\n```bash\n$ face_recognition --show-distance true ./pictures_of_people_i_know/ ./unknown_pictures/\n\n/unknown_pictures/unknown.jpg,Barack Obama,0.378542298956785\n/face_recognition_test/unknown_pictures/unknown.jpg,unknown_person,None\n```\n\n##### 더 많은 예제들\n\n파일 이름은 신경 쓰지 않고 각 사진에 있는 사람들의 이름만을 알고 싶다면 다음과 같이 할 수 있습니다:\n\n```bash\n$ face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/ | cut -d ',' -f2\n\nBarack Obama\nunknown_person\n```\n\n##### 얼굴 인식 속도 향상\n\n여러 개의 CPU 코어가 있는 컴퓨터를 사용한다면, 얼굴 인식을 동시에 수행할 수 있습니다. 예를 들면, 4개의 CPU 코어가 있는 환경에서는, 모든 CPU 코어를 병렬로 사용하여 같은 시간 동안 약 4배의 이미지들을 처리할 수 있습니다.\n\nPython 3.4 이상을 사용하는 경우 `--cpus <number_of_cpu_cores_to_use>` 에 매개 변수(parameter)를 전달하십시오:\n\n```bash\n$ face_recognition --cpus 4 ./pictures_of_people_i_know/ ./unknown_pictures/\n```\n\n또한 `--cpus -1`을 전달하여 시스템의 모든 CPU 코어를 사용할 수도 있습니다.\n\n#### Python 모듈\n\n`face_recognition` 모듈을 불러와(import) 단 몇 줄의 코드만으로 얼굴 조작을 쉽게 할 수 있습니다. 이는 매우 간단합니다!\n\nAPI 문서: [https://face-recognition.readthedocs.io](https://face-recognition.readthedocs.io/en/latest/face_recognition.html).\n\n##### 이미지의 모든 얼굴을 자동으로 찾기\n\n```python\nimport face_recognition\n\nimage = face_recognition.load_image_file(\"my_picture.jpg\")\nface_locations = face_recognition.face_locations(image)\n\n# face_locations is now an array listing the co-ordinates of each face!\n```\n\n[이 예제](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture.py) 를 사용하여 테스트 해 보십시오.\n\n좀 더 정확한 딥 러닝 기반의 얼굴 탐지 모델을 채택할 수도 있습니다.\n\n참고: 이 모델의 성능을 높이려면 (NVidia의 CUDA 라이브러리를 통한) GPU 가속이 필요합니다. 또한 `dlib`을 컴파일링할 때 CUDA 지원(support)을 활성화 할 수 있습니다.\n\n```python\nimport face_recognition\n\nimage = face_recognition.load_image_file(\"my_picture.jpg\")\nface_locations = face_recognition.face_locations(image, model=\"cnn\")\n\n# face_locations is now an array listing the co-ordinates of each face!\n```\n\n[이 예제](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture_cnn.py) 를 사용하여 테스트 해 보십시오.\n\n이미지와 GPU가 둘 다 많은 경우, [얼굴을 일괄적으로 찾을](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_batches.py) 수도 있습니다.\n\n##### 이미지에서 자동으로 사람의 얼굴 특징 찾기\n\n```python\nimport face_recognition\n\nimage = face_recognition.load_image_file(\"my_picture.jpg\")\nface_landmarks_list = face_recognition.face_landmarks(image)\n\n# face_landmarks_list is now an array with the locations of each facial feature in each face.\n# face_landmarks_list[0]['left_eye'] would be the location and outline of the first person's left eye.\n```\n\n[이 예제](https://github.com/ageitgey/face_recognition/blob/master/examples/find_facial_features_in_picture.py) 를 사용하여 테스트 해 보십시오.\n\n##### 이미지에서 얼굴을 인식하고 누구인지 식별하기\n\n```python\nimport face_recognition\n\npicture_of_me = face_recognition.load_image_file(\"me.jpg\")\nmy_face_encoding = face_recognition.face_encodings(picture_of_me)[0]\n\n# my_face_encoding은 이제 어느 얼굴과도 비교할 수 있는 내가 가진 얼굴 특징의 보편적인 인코딩을 포함하게 되었습니다. \n\nunknown_picture = face_recognition.load_image_file(\"unknown.jpg\")\nunknown_face_encoding = face_recognition.face_encodings(unknown_picture)[0]\n\n# 이제 `compare_faces`를 통해 두 얼굴이 같은 얼굴인지 비교할 수 있습니다!\n\nresults = face_recognition.compare_faces([my_face_encoding], unknown_face_encoding)\n\nif results[0] == True:\n    print(\"It's a picture of me!\")\nelse:\n    print(\"It's not a picture of me!\")\n```\n\n[이 예제](https://github.com/ageitgey/face_recognition/blob/master/examples/recognize_faces_in_pictures.py) 를 사용하여 테스트 해 보십시오.\n\n## Python 코드 예제\n\n모든 예제는 [여기](https://github.com/ageitgey/face_recognition/tree/master/examples) 에 있습니다.\n\n\n#### 얼굴 탐지\n\n* [사진에서 얼굴 찾기](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture.py)\n* [사진에서 얼굴 찾기(딥 러닝 사용)](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture_cnn.py)\n* [이미지 모음에서 얼굴 찾기 w/ GPU (딥 러닝 사용)](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_batches.py)\n* [웹캠을 사용하여 라이브 비디오의 모든 얼굴을 흐리게 처리하기 (OpenCV가 설치되어 있어야 함)](https://github.com/ageitgey/face_recognition/blob/master/examples/blur_faces_on_webcam.py)\n\n#### 얼굴의 특징\n\n* [사진의 특정 얼굴 특징 확인하기](https://github.com/ageitgey/face_recognition/blob/master/examples/find_facial_features_in_picture.py)\n* [Apply (horribly ugly) digital make-up](https://github.com/ageitgey/face_recognition/blob/master/examples/digital_makeup.py)\n\n#### 얼굴 인식\n\n* [알고있는 사람들의 사진을 기반으로 사진에서 알 수 없는 얼굴을 찾고 인식하기](https://github.com/ageitgey/face_recognition/blob/master/examples/recognize_faces_in_pictures.py)\n* [사진 안의 각 사람들을 식별하고 주의에 상자를 그리기](https://github.com/ageitgey/face_recognition/blob/master/examples/identify_and_draw_boxes_on_faces.py)\n* [얼굴 구분을 참/거짓 구분 대신 숫자로 비교하기](https://github.com/ageitgey/face_recognition/blob/master/examples/face_distance.py)\n* [웹캠을 사용하여 라이브 비디오의 얼굴 인식하기 - 간단함 / 느린 버전 (OpenCV가 설치되어 있어야 함)](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam.py)\n* [웹캠을 사용하여 라이브 비디오의 얼굴 인식하기 - 빠른 버전 (OpenCV가 설치되어 있어야 함)](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py)\n* [비디오 파일에서 얼굴을 인식하고 새 비디오 파일을 작성하기 (OpenCV가 설치되어 있어야 함)](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_video_file.py)\n* [Raspberry Pi w/ camera에서의 얼굴 인식하기](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_on_raspberry_pi.py)\n* [HTTP를 통해 얼굴을 인식하는 웹 서비스 실행하기 (Flask가 설치되어 있어야 함)](https://github.com/ageitgey/face_recognition/blob/master/examples/web_service_example.py)\n* [K-nearest neighbors classifier를 통한 얼굴 인식하기](https://github.com/ageitgey/face_recognition/blob/master/examples/face_recognition_knn.py)\n\n## 독립적인 실행 파일 만들기\n`Python`이나 `face_recognition`을 설치할 필요 없이 실행할 수 있는 독립적인 실행형 실행 파일을 만들려면 [PyInstaller](https://github.com/pyinstaller/pyinstaller) 를 사용하면 됩니다. 그러나, 이 라이브러리로 작업하려면 어느 정도의 설정 커스텀이 필요합니다. 방법에 대해서는 [이 이슈](https://github.com/ageitgey/face_recognition/issues/357) 를 참조하십시오.\n\n## `face_recognition`을 다루는 글 및 가이드\n\n- 얼굴 인식이 어떻게 작동하는지에 관한 글: [딥 러닝을 통한 현대적 얼굴 인식](https://medium.com/@ageitgey/machine-learning-is-fun-part-4-modern-face-recognition-with-deep-learning-c3cffc121d78)\n  - 알고리즘과 알고리즘이 일반적으로 어떻게 작동하는지\n- Adrian Rosebrock의 [OpenCV, Python 및 딥 러닝을 통한 얼굴 인식](https://www.pyimagesearch.com/2018/06/18/face-recognition-with-opencv-python-and-deep-learning/)\n  - 실제로 얼굴 인식을 사용하는 법\n- Adrian Rosebrock의 [Raspberry Pi 얼굴 인식](https://www.pyimagesearch.com/2018/06/25/raspberry-pi-face-recognition/)\n  - Raspberry Pi에서 어떻게 사용하는지\n- Adrian Rosebrock의 [Python 얼굴 클러스터링](https://www.pyimagesearch.com/2018/07/09/face-clustering-with-python/) by Adrian Rosebrock\n  - 비지도 학습을 사용하여 각 사진에 나타나는 사람을 기반으로 사진을 자동 클러스터하는 방법\n\n## 얼굴 인식이 작동하는지\n\nblack box 라이브러리에 의존하는 대신 얼굴 위치와 인식이 어떻게 작동하는지 알고 싶으시다면 [이 글](https://medium.com/@ageitgey/machine-learning-is-fun-part-4-modern-face-recognition-with-deep-learning-c3cffc121d78) 을 읽으십시오.\n\n## 주의 사항\n\n* 얼굴 인식의 모델은 성인에 대한 데이터를 통해 훈련이 되었으며 따라서 어린이의 경우에는 잘 적용이 되지 않습니다. 0.6의 기본 임계 값을 사용한다면 어린이들의 얼굴을 구분하지 못하는 경향이 있습니다.\n* 소수 민족마다 정확성이 다를 수 있습니다. 자세한 내용은 [이 위키 페이지](https://github.com/ageitgey/face_recognition/wiki/Face-Recognition-Accuracy-Problems#question-face-recognition-works-well-with-european-individuals-but-overall-accuracy-is-lower-with-asian-individuals) 를 참조하십시오.\n\n## <a name=\"deployment\">클라우드 호스트에 배포 (Heroku, AWS, 기타 등)</a>\n\n`face_recognition`은 C++로 작성된 `dlib`에 의존하기 때문에, Heroku 또는 AWS와 같은 클라우드 호스팅 제공 업체에 이를 사용하는 앱을 배포하는 것은 까다로울 수 있습니다.\n\n더 쉬운 작업을 위해, [Docker](https://www.docker.com/) container에서 `face_recognition`으로 빌드 된 앱을 실행하는 방법을 보여주는 이 repo의 Dockerfile 예제가 있습니다. 이를 통해 Docker 이미지를 지원하는 모든 서비스에 배포할 수 있어야합니다.\n\n다음을 실행하여 Docker 이미지를 로컬로 시도 할 수 있습니다: `docker-compose up --build`\n\nGPU (드라이버 >= 384.81) 및 [Nvidia-Docker](https://github.com/NVIDIA/nvidia-docker) 가 설치된 Linux 사용자는 GPU에서 예제를 실행할 수 있습니다: [docker-compose.yml](docker-compose.yml) 파일을 열고 `dockerfile : Dockerfile.gpu` 및 `runtime : nvidia` 행의 주석 처리를 제거합니다.\n\n## 문제가 있으십니까?\n\n문제가 발생하면 github 문제를 제기하기 전에 위키의 [일반적인 오류](https://github.com/ageitgey/face_recognition/wiki/Common-Errors) 섹션을 읽어보십시오.\n\n## 감사의 말\n\n* `dlib`를 만들고 이 라이브러리에 사용된 얼굴 인식 기능과 얼굴 인코딩 모델을 제공한 [Davis King](https://github.com/davisking) ([@nulhom](https://twitter.com/nulhom)) 에게 많은 감사를 드립니다. 얼굴 인코딩을 지원하는 ResNet에 대한 자세한 내용은 [블로그 게시물](http://blog.dlib.net/2017/02/high-quality-face-recognition-with-deep.html) 을 확인하십시오.\n* numpy, scipy, scikit-image, pillow 등의 모든 멋진 파이썬 데이터 과학 라이브러리에서 일하는 모든 사람들에게 감사합니다. 이런 종류의 것들을 파이썬에서 쉽고 재미있게 만듭니다.\n* [Cookiecutter](https://github.com/audreyr/cookiecutter)\n와 [audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage)\n 프로젝트 템플릿 덕분에 파이썬 프로젝트 패키징 방식이 더 괜찮아 졌습니다.\n"
        },
        {
          "name": "README_Simplified_Chinese.md",
          "type": "blob",
          "size": 19.201171875,
          "content": "# Face Recognition 人脸识别\n\n> 译者注：\n>\n> 本项目[face_recognition](https://github.com/ageitgey/face_recognition)是一个强大、简单、易上手的人脸识别开源项目，并且配备了完整的开发文档和应用案例，特别是兼容树莓派系统。\n>\n> 为了便于中国开发者研究学习人脸识别、贡献代码，我将本项目README文件翻译成中文。\n>\n> 向本项目的所有贡献者致敬。\n>\n> 英译汉：同济大学开源软件协会 [子豪兄Tommy](https://github.com/TommyZihao)\n>\n> Translator's note:\n>\n> [face_recognition](https://github.com/ageitgey/face_recognition) is a powerful, simple and easy-to-use face recognition open source project with complete development documents and application cases, especially it is compatible with Raspberry Pi.\n>\n> In order to facilitate Chinese software developers to learn, make progress in face recognition development and source code contributions, I translated README file into simplified Chinese.\n>\n> Salute to all contributors to this project.\n>\n> Translator: Tommy in Tongji Univerisity Opensource Association  [子豪兄Tommy](https://github.com/TommyZihao)\n\n\n\n本项目是世界上最简洁的人脸识别库，你可以使用Python和命令行工具提取、识别、操作人脸。\n\n本项目的人脸识别是基于业内领先的C++开源库 [dlib](http://dlib.net/)中的深度学习模型，用[Labeled Faces in the Wild](http://vis-www.cs.umass.edu/lfw/)人脸数据集进行测试，有高达99.38%的准确率。但对小孩和亚洲人脸的识别准确率尚待提升。\n\n> [Labeled Faces in the Wild](http://vis-www.cs.umass.edu/lfw/)是美国麻省大学安姆斯特分校（University of Massachusetts Amherst)制作的人脸数据集，该数据集包含了从网络收集的13,000多张面部图像。\n\n本项目提供了简易的`face_recognition`命令行工具，你可以用它处理整个文件夹里的图片。\n\n[![PyPI](https://img.shields.io/pypi/v/face_recognition.svg)](https://pypi.python.org/pypi/face_recognition)\n[![Build Status](https://travis-ci.org/ageitgey/face_recognition.svg?branch=master)](https://travis-ci.org/ageitgey/face_recognition)\n[![Documentation Status](https://readthedocs.org/projects/face-recognition/badge/?version=latest)](http://face-recognition.readthedocs.io/en/latest/?badge=latest)\n\n## 特性\n\n#### 从图片里找到人脸\n\n定位图片中的所有人脸：\n\n![](https://cloud.githubusercontent.com/assets/896692/23625227/42c65360-025d-11e7-94ea-b12f28cb34b4.png)\n\n```python\nimport face_recognition\nimage = face_recognition.load_image_file(\"your_file.jpg\")\nface_locations = face_recognition.face_locations(image)\n```\n\n#### 识别人脸关键点\n\n识别人脸关键点，包括眼睛、鼻子、嘴和下巴。\n\n![](https://cloud.githubusercontent.com/assets/896692/23625282/7f2d79dc-025d-11e7-8728-d8924596f8fa.png)\n\n```python\nimport face_recognition\nimage = face_recognition.load_image_file(\"your_file.jpg\")\nface_landmarks_list = face_recognition.face_landmarks(image)\n```\n\n识别人脸关键点在很多领域都有用处，但同样你也可以把这个功能玩坏，比如本项目的 [digital make-up](https://github.com/ageitgey/face_recognition/blob/master/examples/digital_makeup.py)自动化妆案例（就像美图秀秀一样）。\n\n![](https://cloud.githubusercontent.com/assets/896692/23625283/80638760-025d-11e7-80a2-1d2779f7ccab.png)\n\n#### 识别图片中的人是谁\n\n![](https://cloud.githubusercontent.com/assets/896692/23625229/45e049b6-025d-11e7-89cc-8a71cf89e713.png)\n\n```python\nimport face_recognition\nknown_image = face_recognition.load_image_file(\"biden.jpg\")\nunknown_image = face_recognition.load_image_file(\"unknown.jpg\")\n\nbiden_encoding = face_recognition.face_encodings(known_image)[0]\nunknown_encoding = face_recognition.face_encodings(unknown_image)[0]\n\nresults = face_recognition.compare_faces([biden_encoding], unknown_encoding)\n```\n\n你也可以配合其它的Python库（比如opencv）实现实时人脸检测：\n\n![](https://cloud.githubusercontent.com/assets/896692/24430398/36f0e3f0-13cb-11e7-8258-4d0c9ce1e419.gif)\n\n看这个案例 [实时人脸检测](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py) 。\n\n## 安装\n\n### 环境配置\n\n- Python 3.3+ or Python 2.7\n- macOS or Linux \n- Windows并不是我们官方支持的，但也许也能用\n\n### 不同操作系统的安装方法\n\n#### 在 Mac 或者 Linux上安装本项目\n\nFirst, make sure you have dlib already installed with Python bindings:\n\n第一步，安装dlib和相关Python依赖：\n\n- [如何在macOS或者Ubuntu上安装dlib](https://gist.github.com/ageitgey/629d75c1baac34dfa5ca2a1928a7aeaf)\n\nThen, install this module from pypi using `pip3` (or `pip2` for Python 2):\n\n```bash\npip3 install face_recognition\n```\n\n如果你遇到了幺蛾子，可以用Ubuntu虚拟机安装本项目，看下面这个教程。\n[如何使用Adam Geitgey大神提供的Ubuntu虚拟机镜像文件安装配置虚拟机，本项目已经包含在镜像中](https://medium.com/@ageitgey/try-deep-learning-in-python-now-with-a-fully-pre-configured-vm-1d97d4c3e9b).\n\n#### 在 Mac 或者 Linux上安装本项目 2  \n\n修改你的pip镜像源为清华镜像，然后使用`pip install face_recognition`,可以自动帮你安装各种依赖，包括dlib。只是在安装dlib的时候可能会出问题，因为dlib需要编译，出现的问题一般是`gcc`或者`g++`版本的问题，所以在`pip install face_recognition`之前，可以通过在命令行键入  \n\n    export CC=/usr/local/bin/gcc\n    export CXX=/usr/local/bin/g++  \n    \n来指定你gcc和g++对应的位置，（这两句话会临时修改当前终端的环境变量/usr/local/bin/gcc对应你自己gcc或者g++所在目录）。\n\n#### 在树莓派上安装\n\n- [树莓派安装指南](https://gist.github.com/ageitgey/1ac8dbe8572f3f533df6269dab35df65)\n\n#### 在Windows上安装\n\n虽然本项目官方并不支持Windows，但一些大神们摸索出了在Windows上运行本项目的方法：\n\n- [@masoudr写的教程：如何在Win10系统上安装 dlib库和  face_recognition项目](https://github.com/ageitgey/face_recognition/issues/175#issue-257710508)\n\n#### 使用Ubuntu虚拟机镜像文件安装配置虚拟机，本项目已经包含在这个镜像中\n\n- [如何使用Adam Geitgey大神提供的Ubuntu虚拟机镜像文件安装配置虚拟机，本项目已经包含在镜像中](https://medium.com/@ageitgey/try-deep-learning-in-python-now-with-a-fully-pre-configured-vm-1d97d4c3e9b)（需要电脑中安装VMWare Player 或者 VirtualBox）\n\n## 使用方法\n\n### 命令行界面\n\n当你安装好了本项目，你可以使用两种命令行工具：\n\n- `face_recognition` - 在单张图片或一个图片文件夹中认出是谁的脸。\n- `face_detection` - 在单张图片或一个图片文件夹中定位人脸位置。\n\n#### `face_recognition` 命令行工具\n\n`face_recognition`命令行工具可以在单张图片或一个图片文件夹中认出是谁的脸。\n\n首先，你得有一个你已经知道名字的人脸图片文件夹，一个人一张图，图片的文件名即为对应的人的名字：\n\n![known](https://cloud.githubusercontent.com/assets/896692/23582466/8324810e-00df-11e7-82cf-41515eba704d.png)\n\n然后，你需要第二个图片文件夹，文件夹里面是你希望识别的图片：\n\n![unknown](https://cloud.githubusercontent.com/assets/896692/23582465/81f422f8-00df-11e7-8b0d-75364f641f58.png)\n\n然后，你在命令行中切换到这两个文件夹所在路径，然后使用`face_recognition`命令行，传入这两个图片文件夹，然后就会输出未知图片中人的名字：\n\n```bash\n$ face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/\n\n/unknown_pictures/unknown.jpg,Barack Obama\n/face_recognition_test/unknown_pictures/unknown.jpg,unknown_person\n```\n\n输出结果的每一行对应着图片中的一张脸，图片名字和对应人脸识别结果用逗号分开。\n\n如果结果输出了`unknown_person`，那么代表这张脸没有对应上已知人脸图片文件夹中的任何一个人。\n\n#### `face_detection` 命令行工具\n\n`face_detection`命令行工具可以在单张图片或一个图片文件夹中定位人脸位置（输出像素点坐标）。\n\n在命令行中使用`face_detection`，传入一个图片文件夹或单张图片文件来进行人脸位置检测：\n\n```bash\n$ face_detection  ./folder_with_pictures/\n\nexamples/image1.jpg,65,215,169,112\nexamples/image2.jpg,62,394,211,244\nexamples/image2.jpg,95,941,244,792\n```\n\n输出结果的每一行都对应图片中的一张脸，输出坐标代表着这张脸的上、右、下、左像素点坐标。\n\n##### 调整人脸识别的容错率和敏感度\n\n如果一张脸识别出不止一个结果，那么这意味着他和其他人长的太像了（本项目对于小孩和亚洲人的人脸识别准确率有待提升）。你可以把容错率调低一些，使识别结果更加严格。\n\n通过传入参数 `--tolerance` 来实现这个功能，默认的容错率是0.6，容错率越低，识别越严格准确。\n\n```bash\n$ face_recognition --tolerance 0.54 ./pictures_of_people_i_know/ ./unknown_pictures/\n\n/unknown_pictures/unknown.jpg,Barack Obama\n/face_recognition_test/unknown_pictures/unknown.jpg,unknown_person\n```\n\n如果你想看人脸匹配的具体数值，可以传入参数 `--show-distance true`：\n\n```bash\n$ face_recognition --show-distance true ./pictures_of_people_i_know/ ./unknown_pictures/\n\n/unknown_pictures/unknown.jpg,Barack Obama,0.378542298956785\n/face_recognition_test/unknown_pictures/unknown.jpg,unknown_person,None\n```\n\n##### 更多的例子\n\n如果你并不在乎图片的文件名，只想知道文件夹中的图片里有谁，可以用这个管道命令：\n\n```bash\n$ face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/ | cut -d ',' -f2\n\nBarack Obama\nunknown_person\n```\n\n##### 加速人脸识别运算\n\n如果你的CPU是多核的，你可以通过并行运算加速人脸识别。例如，如果你的CPU有四个核心，那么你可以通过并行运算提升大概四倍的运算速度。\n\n如果你使用Python3.4或更新的版本，可以传入 `--cpus <number_of_cpu_cores_to_use>` 参数：\n\n```bash\n$ face_recognition --cpus 4 ./pictures_of_people_i_know/ ./unknown_pictures/\n```\n\n你可以传入 `--cpus -1`参数来调用cpu的所有核心。\n\n> 子豪兄批注：树莓派3B有4个CPU核心，传入多核参数可以显著提升图片识别的速度（亲测）。\n\n#### Python 模块:`face_recognition`\n\n在Python中，你可以导入`face_recognition`模块，调用我们提供的丰富的API接口，用几行代码就可以轻松玩转各种人脸识别功能！\n\nAPI 接口文档: [https://face-recognition.readthedocs.io](https://face-recognition.readthedocs.io/en/latest/face_recognition.html)\n\n##### 在图片中定位人脸的位置\n\n```python\nimport face_recognition\n\nimage = face_recognition.load_image_file(\"my_picture.jpg\")\nface_locations = face_recognition.face_locations(image)\n\n# face_locations is now an array listing the co-ordinates of each face!\n```\n\n看 [案例：定位拜登的脸](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture.py)\n\n![案例：定位拜登的脸](https://upload-images.jianshu.io/upload_images/13714448-b4ce08c6ba699c5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n你也可以使用深度学习模型达到更加精准的人脸定位。\n\n注意：这种方法需要GPU加速（通过英伟达显卡的CUDA库驱动），你在编译安装`dlib`的时候也需要开启CUDA支持。\n\n```python\nimport face_recognition\n\nimage = face_recognition.load_image_file(\"my_picture.jpg\")\nface_locations = face_recognition.face_locations(image, model=\"cnn\")\n\n# face_locations is now an array listing the co-ordinates of each face!\n```\n\n看 [案例：使用卷积神经网络深度学习模型定位拜登的脸](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture_cnn.py)\n\n如果你有很多图片需要识别，同时又有GPU，那么你可以参考这个例子：[案例：使用卷积神经网络深度学习模型批量识别图片中的人脸](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_batches.py).\n\n##### 识别单张图片中人脸的关键点\n\n```python\nimport face_recognition\n\nimage = face_recognition.load_image_file(\"my_picture.jpg\")\nface_landmarks_list = face_recognition.face_landmarks(image)\n\n# face_landmarks_list is now an array with the locations of each facial feature in each face.\n# face_landmarks_list[0]['left_eye'] would be the location and outline of the first person's left eye.\n```\n\n看这个案例 [案例：提取奥巴马和拜登的面部关键点](https://github.com/ageitgey/face_recognition/blob/master/examples/find_facial_features_in_picture.py)\n![案例：提取奥巴马和拜登的面部关键点](https://upload-images.jianshu.io/upload_images/13714448-734e8b4f5592ed4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##### 识别图片中的人是谁\n\n```python\nimport face_recognition\n\npicture_of_me = face_recognition.load_image_file(\"me.jpg\")\nmy_face_encoding = face_recognition.face_encodings(picture_of_me)[0]\n\n# my_face_encoding now contains a universal 'encoding' of my facial features that can be compared to any other picture of a face!\n\nunknown_picture = face_recognition.load_image_file(\"unknown.jpg\")\nunknown_face_encoding = face_recognition.face_encodings(unknown_picture)[0]\n\n# Now we can see the two face encodings are of the same person with `compare_faces`!\n\nresults = face_recognition.compare_faces([my_face_encoding], unknown_face_encoding)\n\nif results[0] == True:\n    print(\"It's a picture of me!\")\nelse:\n    print(\"It's not a picture of me!\")\n```\n\n看这个案例 [案例：是奥巴马还是拜登？](https://github.com/ageitgey/face_recognition/blob/master/examples/recognize_faces_in_pictures.py)\n\n## Python 案例\n\n所有案例都在这个链接中 [也就是examples文件夹](https://github.com/ageitgey/face_recognition/tree/master/examples).\n\n#### 人脸定位\n\n- [案例：定位拜登的脸](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture.py)\n- [案例：使用卷积神经网络深度学习模型定位拜登的脸](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture_cnn.py)\n- [案例：使用卷积神经网络深度学习模型批量识别图片中的人脸](https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_batches.py)\n- [案例：把来自网络摄像头视频里的人脸高斯模糊（需要安装OpenCV）](https://github.com/ageitgey/face_recognition/blob/master/examples/blur_faces_on_webcam.py)\n\n#### 人脸关键点识别\n\n- [案例：提取奥巴马和拜登的面部关键点](https://github.com/ageitgey/face_recognition/blob/master/examples/find_facial_features_in_picture.py)\n- [案例：给美国副总统拜登涂美妆](https://github.com/ageitgey/face_recognition/blob/master/examples/digital_makeup.py)\n\n#### 人脸识别\n\n- [案例：是奥巴马还是拜登？](https://github.com/ageitgey/face_recognition/blob/master/examples/recognize_faces_in_pictures.py)\n- [案例：人脸识别之后在原图上画框框并标注姓名](https://github.com/ageitgey/face_recognition/blob/master/examples/identify_and_draw_boxes_on_faces.py)\n- [案例：在不同精度上比较两个人脸是否属于一个人](https://github.com/ageitgey/face_recognition/blob/master/examples/face_distance.py)\n- [案例：从摄像头获取视频进行人脸识别-较慢版（需要安装OpenCV）](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam.py)\n- [案例：从摄像头获取视频进行人脸识别-较快版（需要安装OpenCV）](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py)\n- [案例：从视频文件中识别人脸并把识别结果输出为新的视频文件（需要安装OpenCV）](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_video_file.py)\n- [案例：通过树莓派摄像头进行人脸个数统计及人脸身份识别](https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_on_raspberry_pi.py)\n- [案例：通过浏览器HTTP访问网络服务器进行人脸识别（需要安装Flask后端开发框架）)](https://github.com/ageitgey/face_recognition/blob/master/examples/web_service_example.py)\n- [案例：基于K最近邻KNN分类算法进行人脸识别](https://github.com/ageitgey/face_recognition/blob/master/examples/face_recognition_knn.py)\n\n## 关于 `face_recognition`的文章和教程\n\n- 本项目作者写的一篇文章 [Modern Face Recognition with Deep Learning](https://medium.com/@ageitgey/machine-learning-is-fun-part-4-modern-face-recognition-with-deep-learning-c3cffc121d78)\n  - 主要内容：基本算法和原理\n- [Face recognition with OpenCV, Python, and deep learning](https://www.pyimagesearch.com/2018/06/18/face-recognition-with-opencv-python-and-deep-learning/) by Adrian Rosebrock\n  - 主要内容：如何实际使用本项目\n- [Raspberry Pi Face Recognition](https://www.pyimagesearch.com/2018/06/25/raspberry-pi-face-recognition/) by Adrian Rosebrock\n  - 主要内容：如何在树莓派上使用本项目\n- [Face clustering with Python](https://www.pyimagesearch.com/2018/07/09/face-clustering-with-python/) by Adrian Rosebrock\n  - 主要内容：使用非监督学习算法实现把图片中的人脸高斯模糊\n\n## 人脸识别的原理\n\n如果你想更深入了解人脸识别这个黑箱的原理 [读这篇文章](https://medium.com/@ageitgey/machine-learning-is-fun-part-4-modern-face-recognition-with-deep-learning-c3cffc121d78)。\n\n> 子豪兄批注：一定要看这篇文章，讲的既有趣又有料。\n\n## 警告说明\n\n- 本项目的人脸识别模型是基于成年人的，在孩子身上效果可能一般。如果图片中有孩子的话，建议把临界值设为0.6.\n- 不同人种的识别结果可能不同， [看wiki百科页面](https://github.com/ageitgey/face_recognition/wiki/Face-Recognition-Accuracy-Problems#question-face-recognition-works-well-with-european-individuals-but-overall-accuracy-is-lower-with-asian-individuals) 查看更多细节。\n\n## 把本项目部署在云服务器上 (Heroku, AWS等)\n\n本项目是基于C++库`dlib`的，所以把本项目部署在Heroku或者AWS的云端服务器上是很明智的。\n\n为了简化这个过程，有一个Dockerfile案例，教你怎么把`face_recognition`开发的app封装成[Docker](https://www.docker.com/) 容器文件，你可以把它部署在所以支持Docker镜像文件的云服务上。\n\n## 出了幺蛾子？\n\n如果出了问题，请在Github提交Issue之前查看 [常见错误](https://github.com/ageitgey/face_recognition/wiki/Common-Errors) 。\n\n## 鸣谢\n\n- 非常感谢 [Davis King](https://github.com/davisking) ([@nulhom](https://twitter.com/nulhom))创建了`dlib`库，提供了响应的人脸关键点检测和人脸编码相关的模型，你可以查看 [blog post](http://blog.dlib.net/2017/02/high-quality-face-recognition-with-deep.html)这个网页获取更多有关ResNet的信息。\n- 感谢每一个相关Python模块（包括numpy,scipy,scikit-image,pillow等）的贡献者。\n- 感谢 [Cookiecutter](https://github.com/audreyr/cookiecutter) 和[audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage) 项目模板，使得Python的打包方式更容易接受。\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.4853515625,
          "content": "version: '2.3'\n\nservices:\n  face_recognition:\n    image: face_recognition\n    container_name: face_recognition\n    working_dir: /face_recognition/examples\n    build:\n      context: .\n      #Uncomment this line to run the example on the GPU (requires Nvidia-Docker)\n      # dockerfile: Dockerfile.gpu \n    command: python3 -u find_faces_in_picture_cnn.py\n    volumes:\n      - ./:/face_recognition\n    #Uncomment this line to run the example on the GPU (requires Nvidia-Docker)\n    # runtime: nvidia"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "face_recognition",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.048828125,
          "content": "[build-system]\nrequires = [\"setuptools\", \"wheel\"]\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0732421875,
          "content": "face_recognition_models\nClick>=6.0\ndlib>=19.3.0\nnumpy\nPillow\nscipy>=0.17.0\n"
        },
        {
          "name": "requirements_dev.txt",
          "type": "blob",
          "size": 0.1943359375,
          "content": "pip==21.1\nbumpversion==0.5.3\nwheel==0.29.0\nwatchdog==0.8.3\nflake8\ntox==2.3.1\ncoverage==4.1\nSphinx==1.4.8\ncryptography==3.3.2\npyyaml>=4.2b1\nface_recognition_models\nClick>=6.0\ndlib>=19.3.0\nnumpy\nscipy\n"
        },
        {
          "name": "requirements_docs.txt",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.49609375,
          "content": "[bumpversion]\ncurrent_version = 1.4.0\ncommit = True\ntag = True\n\n[bumpversion:file:setup.py]\nsearch = version='{current_version}'\nreplace = version='{new_version}'\n\n[bumpversion:file:face_recognition/__init__.py]\nsearch = __version__ = '{current_version}'\nreplace = __version__ = '{new_version}'\n\n[bdist_wheel]\nuniversal = 1\n\n[flake8]\nexclude =\n    .github,\n    .idea,\n    .eggs,\n    examples,\n    docs,\n    .tox,\n    bin,\n    dist,\n    tools,\n    *.egg-info,\n    __init__.py,\n    *.yml\nmax-line-length = 160\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.7109375,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom setuptools import setup\n\nwith open('README.rst') as readme_file:\n    readme = readme_file.read()\n\nwith open('HISTORY.rst') as history_file:\n    history = history_file.read()\n\nrequirements = [\n    'face_recognition_models>=0.3.0',\n    'Click>=6.0',\n    'dlib>=19.7',\n    'numpy',\n    'Pillow'\n]\n\ntest_requirements = [\n    'tox',\n    'flake8'\n]\n\nsetup(\n    name='face_recognition',\n    version='1.4.0',\n    description=\"Recognize faces from Python or from the command line\",\n    long_description=readme + '\\n\\n' + history,\n    author=\"Adam Geitgey\",\n    author_email='ageitgey@gmail.com',\n    url='https://github.com/ageitgey/face_recognition',\n    packages=[\n        'face_recognition',\n    ],\n    package_dir={'face_recognition': 'face_recognition'},\n    package_data={\n        'face_recognition': ['models/*.dat']\n    },\n    entry_points={\n        'console_scripts': [\n            'face_recognition=face_recognition.face_recognition_cli:main',\n            'face_detection=face_recognition.face_detection_cli:main'\n        ]\n    },\n    install_requires=requirements,\n    license=\"MIT license\",\n    zip_safe=False,\n    keywords='face_recognition',\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n    ],\n    test_suite='tests',\n    tests_require=test_requirements\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.2919921875,
          "content": "[tox]\nenvlist =\n    py27\n    py35\n    py36\n    py37\n    py38\n    flake8\n\n\n[gh-actions]\npython =\n    3.5: py35, flake8\n    3.6: py36, flake8\n    3.7: py37, flake8\n    3.8: py38, flake8\n\n\n[testenv]\ncommands =\n    python -m unittest discover\n\n\n[testenv:flake8]\ndeps =\n    flake8\n\ncommands =\n    flake8\n"
        }
      ]
    }
  ]
}