{
  "metadata": {
    "timestamp": 1736561317996,
    "page": 329,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ytisf/theZoo",
      "stars": 11473,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4716796875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n*.sln    merge=union\n*.csproj merge=union\n*.vbproj merge=union\n*.fsproj merge=union\n*.dbproj merge=union\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.328125,
          "content": "bin/\ntmp/\n*.idea/\n*.pydevproject\n*.pyd\n*.pyc\n.DS_Store\n__pycache__\nsql/\n*.Cache\nThumbs.db\n$RECYCLE.BIN/\nDesktop.ini\nconf/eula_run.conf\n.git/\ndev_zone/\n\n# Egg\nlogo/\nvenv/*\n\n\n*.py[co]\n# Packages\n*.egg\n*.egg-info\ndist/\nbuild/\neggs/\nparts/\nvar/\nsdist/\ndevelop-eggs/\n.installed.cfg\n\n# Installer logs\npip-log.txt\n\nimports/*.pyd\nimports/*.pyc\n"
        },
        {
          "name": "CODE-OF-CONDUCT.md",
          "type": "blob",
          "size": 5.8974609375,
          "content": "# Code of Conduct\n\nThis code of conduct outlines our expectations for participants within the [theZoo](https://www.github.com/ytisf/theZoo/) community, as well as steps to reporting unacceptable behaviour. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honoured. Anyone who violates this code of conduct may be banned from the community.\n\nOur open source community strives to:\n\n* **Be friendly and patient.**\n* **Be welcoming**: We strive to be a community that welcomes and supports people of all backgrounds and identities. This includes, but is not limited to members of any race, ethnicity, culture, national origin, colour, immigration status, social and economic class, educational level, sex, sexual orientation, gender identity and expression, age, size, family status, political belief, religion, and mental and physical ability.\n* **Be considerate**: Your work will be used by other people, and you in turn will depend on the work of others. Any decision you take will affect users and colleagues, and you should take those consequences into account when making decisions. Remember that we're a world-wide community, so you might not be communicating in someone else's primary language.\n* **Be respectful**:  Not all of us will agree all the time, but disagreement is no excuse for poor behaviour and poor manners. We might all experience some frustration now and then, but we cannot allow that frustration to turn into a personal attack. It’s important to remember that a community where people feel uncomfortable or threatened is not a productive one.\n* **Be careful in the words that you choose**: we are a community of professionals, and we conduct ourselves professionally. Be kind to others. Do not insult or put down other participants. Harassment and other exclusionary behaviour aren't acceptable. This includes, but is not limited to:\n  * Violent threats or language directed against another person.\n  * Discriminatory jokes and language.\n  * Posting sexually explicit or violent material.\n  * Posting (or threatening to post) other people's personally identifying information (\"doxing\").\n  * Personal insults, especially those using racist or sexist terms.\n  * Unwelcome sexual attention.\n  * Advocating for, or encouraging, any of the above behaviour.\n  * Repeated harassment of others. In general, if someone asks you to stop, then stop.\n* **When we disagree, try to understand why**: Disagreements, both social and technical, happen all the time. It is important that we resolve disagreements and differing views constructively. Remember that we’re different. The strength of our community comes from its diversity, people from a wide range of backgrounds. Different people have different perspectives on issues. Being unable to understand why someone holds a viewpoint doesn’t mean that they’re wrong. Don’t forget that it is human to err and blaming each other doesn’t get us anywhere. Instead, focus on helping to resolve issues and learning from mistakes.\n\nThis code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.\n\n### Diversity Statement\n\nWe encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong.\n\nAlthough this list cannot be exhaustive, we explicitly honour diversity in age, gender, gender identity or expression, culture, ethnicity, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected\ncharacteristics above, including participants with disabilities.\n\n### Unacceptable Behaviour\n\nHarassment may include but not limited to the following:\n\n- Offensive, inappropriate, or unwanted comments related to gender, gender identity or expression, sexual orientation, disability, physical appearance, body size, race, ethnicity, national origin, religion, or age, or other protected categories under applicable law.\n- Visual harassment eg. sexual imagery or use of sexual language at Docker community events\n- Disrespect towards differences of opinion\n- Deliberate intimidation, stalking, harassing photography or recording\n- Sustained disruption of talks or other events\n- Inappropriate or unwanted physical contact\n- Intimidation or bullying (online or in-person)\n- Unwelcome sexual attention\n\n### Reporting Issues\n\nIf you experience or witness unacceptable behaviour—or have any other concerns—please report it by contacting us via [this email address](mailto:thezoo+codeofconduct@morirt.com). All reports will be handled with discretion.\n\nAnyone asked to stop unacceptable behaviour is expected to comply immediately. If an individual engages in unacceptable behaviour the representative may take any action they deem appropriate, up to and including a permanent ban from our community without warning.\n\n## Thanks\n\nThis code of conduct is based on the [Open Code of Conduct](https://github.com/todogroup/opencodeofconduct) from the [TODOGroup](http://todogroup.org).\n\nPortions derived from the [Slack Developer Community Code of Conduct](https://api.slack.com/docs/community-code-of-conduct), [The Ada Initiative](https://adainitiative.org/2014/02/18/howto-design-a-code-of-conduct-for-your-community/), [geekfeminism.org](https://geekfeminism.org/about/code-of-conduct/)  and [Docker Code of Conduct](https://raw.githubusercontent.com/docker/code-of-conduct/master/code-of-conduct-EN.md).\n\nWe are thankful for their work and all the communities who have paved the way with code of conducts.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.5009765625,
          "content": "# Contributing to theZoo\n\nFirst off, thank you for taking the time to contribute to `theZoo`.\n\nThe following is a set of guidelines as how to contribute, be it by Pull requests or by opening tickets and raising issues. Use your best judgment and feel free to propose changes to this document as well.\n\n## Contribution\n### Reporting Bugs\nBefore creating bug reports please check the `bugs` section on GitHub. It might already be there... When you are creating a bug report, please include as many details as possible. General bug openings with 'this does not work' are probably just going to be closed as they are impossible to triage.\n\nExplain the problem and include additional details to help maintainers reproduce the problem:\n\n* Use a clear and descriptive title for the issue to identify the problem.\n* Describe the exact steps which reproduce the problem in as many details as possible.\n* Include system information (Python version, OS version, etc.).\n* Explain which behaviour you expected to see instead and why.\n\n**DO NOT** open bugs for malware not executing unless you are confident that the file itself is broken. Some malware won't run in virtualisation, some have anti debugging and some are DLLs. We can always recommend more information on the topic such as [this wonderful book](https://www.amazon.com/Practical-Malware-Analysis-Hands-Dissecting). But `theZoo`'s bug tracking system is not a support channel.   \n\n### Requesting Samples\nIf a particular sample is of interest to you and it cannot be find the `theZoo` kindly [send an email to](mailto:thezoo+codeofconduct@morirt.com). Please do **not** open up an bug/feature request for a sample. We will attempt to upload that sample in the next batch.\n\n### Database Contributions\nPlease see `prep_file.py` to assist you in creating the directory you need. However, this will not fill out the database. You can use any of the SQLite3 editors out there to add it to the database [`conf/maldb.db`]. Make sure you are accurate about your description, tags and info. The reliability and accuracy of the database is the main purpose for the existence of `theZoo`. Without a credible database this is just another malware dump.\n\nEdit the database and remember that file paths are case sensitive.  \n\n### Suggesting Enhancements\nSimilar to **Reporting Bugs** section. Please be descriptive. What exactly it is that you would like and what is the workflow you are seeing. The more descriptive you are the more likely it is for others in the community to vote for this and we will know to prioritise it.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 0.4599609375,
          "content": "# License\n\n## theZoo\n`theZoo` was written by us and is under GPLv3. \n\n## Samples\nThe samples and codes in `theZoo` are not written or created by us and therefore are not under the same licensing. \nAny software/samples/code under the `malware` folder is not licensed under the GPLv3 as the rest of the `theZoo` code. \nComponents under GPLv3 license only contain components of `theZoo` with complete exclusion of any and all items which are considered as malicious samples."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.8759765625,
          "content": "# theZoo - A Live Malware Repository\n\n[![Contributions Welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=round)](https://github.com/ytisf/theZoo/issues)\n[![HitCount](http://hits.dwyl.com/ytisf/theZoo.svg)](http://hits.dwyl.com/ytisf/theZoo)\n[![GitHub stars](https://img.shields.io/github/stars/ytisf/theZoo.svg?style=social&label=Star&maxAge=2592000)](https://GitHub.com/ytisf/theZoo/stargazers/)\n[![made-with-python](https://img.shields.io/badge/Made%20with-Python-1f425f.svg)](https://www.python.org/)\n\n![Logo](https://github.com/ytisf/theZoo/raw/gh-pages/MalDB-Logo-Thumb.png)\n\ntheZoo is a project created to make the possibility of malware analysis open and available to the public. Since we have found out that almost all versions of malware are very hard to come by in a way which will allow analysis, we have decided to gather all of them for you in an accessible and safe way.\ntheZoo was born by Yuval tisf Nativ and is now maintained by Shahak Shalev.\n\n**theZoo is open and welcoming visitors!**\n\nIf you are about to interact with our community please make sure to read our `CODE-OF-CONDUCT.md` prior to doing so. If you plan to contribute, first - thank you. However, do make sure to follow the standards on `CONTRIBUTING.md`.\n\n## Disclaimer\ntheZoo's purpose is to allow the study of malware and enable people who are interested in malware analysis (or maybe even as a part of their job) to have access to live malware, analyse the ways they operate, and maybe even enable advanced and savvy  people to block specific malware within their own environment.\n\n**Please remember that these are live and dangerous malware! They come encrypted and locked for a reason!  Do NOT run them unless you are absolutely sure of what you are doing! They are to be used only for educational purposes (and we mean that!) !!!**\n\nWe recommend running them in a VM which has no internet connection (or an internal virtual network if you must) and without guest additions or any equivalents. Some of them are worms and will automatically try to spread out. Running them unconstrained means that you **will infect yourself or others with vicious and dangerous malware!!!**\n\n## Getting Started\n\nClone the repository with `git clone https://www.github.com/ytisf/theZoo`. Go to the directory and run `pip install --user -r requirements.txt`. This should install all latest requirements needed. In total can be \"scripted\" like so:\n\n```bash\ngit clone https://www.github.com/ytisf/theZoo\ncd theZoo\npip install --user -r requirements.txt\n```\n\nStart by running the console:\n\n`python theZoo.py`\n\n\n## License\ntheZoo - the most awesome free malware database on the air\nCopyright (C) 2015-2021, Yuval Nativ, Lahad Ludar, 5fingers\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nYou can also find more information in `LICENSE.md`.\n\n**License section does not apply to any of malicious samples in theZoo's repository which includes samples and source code, reversed or otherwise.**\n\n## Documentation and Notes\n\n### Background\ntheZoo's objective is to offer a fast and easy way of retrieving malware samples and source code in an organized fashion in hopes of promoting malware research.\n\n### Root Files\nSince version 0.42 theZoo has been undergoing dramatic changes. It now runs in both CLI and ARGVS modes. You can call the program with the same command line arguments as before.\nThe current default state of theZoo runtime is the CLI. The following files and directories are responsible for the application's behaviour.\n\n`/conf` - The conf folder holds files relevant to the particular running of the program but are not part of the application. You can find the EULA file in the conf and more.\n\n`/imports` - Contains .py import files used by the rest of the application\n\n`/malware/Binaries` - The actual malwares samples - be careful! These are very live.\n\n`/malware/Source` -  Malware source code.  \n\nMalware under the folder `Original` is supposed to be (NO PROMISES!) the original source of the malware that leaked. Malware under the folder `Reversed` is either reversed, decompiled or partially reconstructed.\n\n\n## Directory Structure:\nEach directory is composed of 4 files:\n- Malware files in an encrypted ZIP archive.\n- SHA256 sum of the 1st file.\n- MD5 sum of the 1st file.\n- Password file for the archive.\n\n\n## Bugs and Reports\n\nThe repository holding all files is currently\n\thttps://github.com/ytisf/theZoo\n\n### Submit Malware\nGet the file you want to submit and just run `python prep_file.py file_tosubmit.exe`. It will create a directory for you. Then just submit that along with the changes to the `conf/maldb.db` so that we know which malware it is.\n\n### Change Log for v0.60:\n- [x] Moved DB to SQLite3.\n- [x] Searching overhaul to a freestyle fashion.\n- [x] Fixed \"get\" command.\n- [x] More & more malwares.\n\n### Change Log for v0.50:\n- [x] Better and easier UI.\n- [x] Aligned printing of malwares.\n- [x] Command line arguments are now working.\n- [x] Added 10 more malwares (cool ones) to the DB.\n\n### Change Log for v0.42:\n- [x] Fix EULA for proper disclaimer.\n- [x] More precise searching and indexing including platform and more.\n- [x] Added 10 new malwares.\n- [x] Git update of platform and new malware.\n- [x] Fix display of search.\n- [x] Enable support for platform and architecture in indexing.\n- [x] Separate between database and application.\n- [x] UI improvements.\n\n### Change Log for v0.43:\n- [X] Verify argv to be working properly. (fixes in v0.5)\n- [X] Virus-Total upload and indexing module. - Not possible due to restrictions of VT.\n- [X] Automatic reporting system for malwares which are not indexed in the framework.\n\n### Change Log for v0.50:\n- [X] Malware analysis pack has been removed to reduce clone size.\n- [X] More documentation has been added.\n- [X] Removed debugging function which were dead in the code.\n\n### Predicted Change Log for v1.0\n- [X] Fix auto-complete for malware frameworks. (thanks to 5fingers)\n- [X] Consider changing DB to XML or SQLite3. (Sheksa - done :))\n- [X] Better UI features.\n- [ ] Fix and make 'light' version without malwares with _MalwareFetch function.\n\n### Hopeful\n- [ ] A GUI.\n- [ ] Package releases.\n\nIf you have any suggestions or malware that you have indexed (in the manner laid out in the documentation) please send it to us to - thezoo-submissions [a-t] morirt [.d0t.] com - so we can add it for everyone's enjoyment.\n\n## Shout outs\n\n- Thanks to @LogoiLab for the licensing change submission.\n"
        },
        {
          "name": "conf",
          "type": "tree",
          "content": null
        },
        {
          "name": "imports",
          "type": "tree",
          "content": null
        },
        {
          "name": "malware",
          "type": "tree",
          "content": null
        },
        {
          "name": "prep_file.py",
          "type": "blob",
          "size": 3.357421875,
          "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nName: Prep File\nAuthor: ytisf\nDate of Creation: Unknown\nLast Modified: April 05, 2024\n\nDev: K4YT3X\nLast Modified: August 21, 2019\n\nLicensed under the GNU General Public License Version 3 (GNU GPL v3),\n    available at: https://www.gnu.org/licenses/gpl-3.0.txt\n(C) 2014-2019 ytisf\n\"\"\"\n\n# built-in imports\nimport sys\nimport time\nimport hashlib\nimport pathlib\nimport traceback\n\ntry:\n    import pyzipper\nexcept ImportError as e:\n    print('Could not import \"pyzipper\". Did you install requirements?', file=sys.stderr)\n    print('You can always just get \"pyzipper\" by \"pip install --user pyzipper\"', file=sys.stderr)\n    raise e\n\n\nCOMPRESSION_PASSWORD = 'infected'\nOUTPUT_FOLDER = pathlib.Path('OUTPUT')\n\n\ndef print_help():\n    \"\"\" print help message\n\n    print program help message and return None\n    \"\"\"\n    print(f'usage: {__file__} [INPUT_FILE]')\n    return\n\n\ndef prepare_file(file_path):\n    \"\"\" prep file from file path for submission\n\n    take file name, encrypt in ZIP with password 'infected', create MD5\n    and SHA1 sums and store all of that in a directory of it's own\n\n    Arguments:\n        file_path {pathlib.Path} -- path object of input file\n    \"\"\"\n    OUTPUT_FOLDER.mkdir(parents=True, exist_ok=True)\n\n    # create ZIP Archive\n    # we are using 7z because \"zipfile\" did not support adding a password\n    # Apparently \"pyminizip\" works just as well.\n    print('Info: Creating encrypted ZIP archive')\n    with pyzipper.AESZipFile(OUTPUT_FOLDER / f'{file_path.name}.zip', 'w', compression=pyzipper.ZIP_LZMA, encryption=pyzipper.WZ_AES) as zip_file:\n        zip_file.setpassword(COMPRESSION_PASSWORD.encode())\n        zip_file.write(file_path)\n    print('Info: Created ZIP archive')\n\n    # calculating file hashes\n    md5sum = hashlib.md5(open(OUTPUT_FOLDER / f'{file_path.name}.zip', 'rb').read()).hexdigest()\n    sha1sum = hashlib.sha1(open(OUTPUT_FOLDER / f'{file_path.name}.zip', 'rb').read()).hexdigest()\n\n    # writing file hashes and password to files\n    open(OUTPUT_FOLDER / f'{file_path.name}.md5', 'w').write(md5sum)\n    open(OUTPUT_FOLDER / f'{file_path.name}.sha', 'w').write(sha1sum)\n    open(OUTPUT_FOLDER / f'{file_path.name}.pass', 'w').write(COMPRESSION_PASSWORD)\n\n\n# start timer\nstart_time = time.time()\n\n# if this file is being imported\nif __name__ != '__main__':\n    print('Error: This file cannot be imported', file=sys.stderr)\n    ImportError('File not importable')\n\n# check if there's a right amount of arguments provided\nif len(sys.argv) != 2:\n    print_help()\n    exit(1)\n\n# convert input file path into file object\ntry:\n    input_file = pathlib.Path(sys.argv[1])\nexcept Exception:\n    print('Error: input file format invalid', file=sys.stderr)\n\n# input file validity check\nif not input_file.is_file():\n    print_help()\n    print(f'Seems like {str(input_file)} is not a file', file=sys.stderr)\n    exit(1)\n\n# zip file\ntry:\n    prepare_file(input_file)\nexcept Exception:\n    print('Unexpected exception has been caught')\n    print('Compression has failed')\n    print('Please report the following error message to us so we can fix it')\n    traceback.print_exc()\n    exit(1)\n\nprint('Script finished')\nprint(f'Time taken: {round((time.time() - start_time), 5)} seconds')\nprint('Please don\\'t forget to add details to \"conf/maldb.db\" and placing the folder in the appropriate directory')\nprint('Thanks for helping us to get this accessible to everyone')\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.025390625,
          "content": "urllib3\npyminizip\npyzipper"
        },
        {
          "name": "theZoo.py",
          "type": "blob",
          "size": 3.501953125,
          "content": "#!/usr/bin/env python\n\n    # Malware DB - the most awesome free malware database on the air\n    # Copyright (C) 2014-2025, Yuval Nativ, Lahad Ludar, 5Fingers\n\n    # This program is free software: you can redistribute it and/or modify\n    # it under the terms of the GNU General Public License as published by\n    # the Free Software Foundation, either version 3 of the License, or\n    #(at your option) any later version.\n\n    # This program is distributed in the hope that it will be useful,\n    # but WITHOUT ANY WARRANTY; without even the implied warranty of\n    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    # GNU General Public License for more details.\n\n    # You should have received a copy of the GNU General Public License\n    # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nimport sys\nimport os\nfrom optparse import OptionParser\nfrom imports.update_handler import Updater\nfrom imports import manysearches\nfrom imports import muchmuchstrings\nfrom imports.eula_handler import EULA\nfrom imports.globals import vars\nfrom imports.terminal_handler import Controller\nfrom imports import db_handler\n\n__version__ = \"0.6.0 Moat\"\n__codename__ = \"Moat\"\n__appname__ = \"theZoo\"\n__authors__ = [\"Yuval Nativ\", \"Shahak Shalev\", \"Lahad Ludar\", \"5Fingers\"]\n__licensev__ = \"GPL v3.0\"\n__maintainer = \"Yuval Nativ & Shahak Shalev\"\n__status__ = \"Beta\"\n\n\ndef main():\n\n    # Much much imports :)\n    updateHandler = Updater\n    eulaHandler = EULA()\n    bannerHandler = muchmuchstrings.banners()\n    db = db_handler.DBHandler()\n    terminalHandler = Controller()\n\n    def filter_array(array, colum, value):\n        ret_array = [row for row in array if value in row[colum]]\n        return ret_array\n\n    def getArgvs():\n        parser = OptionParser()\n        parser = OptionParser()\n        parser.add_option(\"-f\", \"--filter\", dest=\"mal_filter\", default=[],\n                          help=\"Filter the malwares.\", action=\"append\")\n        parser.add_option(\"-u\", \"--update\", dest=\"update_bol\", default=0,\n                          help=\"Updates the DB of theZoo.\", action=\"store_true\")\n        parser.add_option(\"-v\", \"--version\", dest=\"ver_bol\", default=0,\n                          help=\"Shows version and licensing information.\", action=\"store_true\")\n        parser.add_option(\"-w\", \"--license\", dest=\"license_bol\", default=0,\n                          help=\"Prints the GPLv3 license information.\", action=\"store_true\")\n        (options, args) = parser.parse_args()\n        return options\n\n    # Here actually starts Main()\n    arguments = getArgvs()\n\n    # Checking for EULA Agreement\n    a = eulaHandler.check_eula_file()\n    if a == 0:\n        eulaHandler.prompt_eula()\n\n    # Get arguments\n\n    # Check if update flag is on\n    if arguments.update_bol == 1:\n        a = Updater()\n        with open('conf/db.ver', 'r') as f:\n            a.update_db(f.readline())\n        sys.exit(1)\n\n    # Check if version flag is on\n    if arguments.ver_bol == 1:\n        print(vars.maldb_banner)\n        sys.exit(1)\n\n    # Check if license flag is on\n    if arguments.license_bol == 1:\n        bannerHandler.print_license()\n        sys.exit(1)\n\n    if len(arguments.mal_filter) > 0:\n        manySearch = manysearches.MuchSearch()\n        print(vars.maldb_banner)\n        manySearch.sort(arguments.mal_filter)\n        sys.exit(1)\n\n    # Initiate normal run. No arguments given.\n    os.system('cls' if os.name == 'nt' else 'clear')\n    print(vars.maldb_banner)\n    while 1:\n        terminalHandler.MainMenu()\n    sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        }
      ]
    }
  ]
}