{
  "metadata": {
    "timestamp": 1736561155102,
    "page": 106,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kivy/kivy",
      "stars": 17913,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".ci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4716796875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n*.sln    merge=union\n*.csproj merge=union\n*.vbproj merge=union\n*.fsproj merge=union\n*.dbproj merge=union\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.4150390625,
          "content": ".coverage\nKivy.egg-info\nKivy-*.dist-info\n*.so\n*.pyd\n*.pyc\n*.pyo\n*.py#\n*~\n*.swp\n*.DS_Store\n*.kpf\nbuild/*\ndoc/build\ndoc/autobuild.py-done*\ndoc/sources/api-*.rst\ndoc/sources/examples/gen__*.rst\ndoc/sources/examples/gallery.rst\ndoc/sources/examples/index.rst\nexamples/*/bin\nexamples/*/.buildozer\nkivy/*.c\nkivy/*.pyd\nkivy/core/text/_text_pango.c\nkivy/core/text/text_layout.c\nkivy/core/text/text_layout.pyd\nkivy/core/window/window_info.c\nkivy/graphics/*.c\nkivy/graphics/*.cpp\nkivy/graphics/*.pyd\nkivy/graphics/cgl_backend/*.c\nkivy/graphics/cgl_backend/*.pyd\nkivy/graphics/cgl.h\nkivy/include/config.h\nkivy/include/config.pxi\nkivy/lib/gstplayer/_gstplayer.c\nkivy/core/camera/camera_avfoundation.c\nkivy/tests/build\nkivy/tests/results\nkivy/tests/image-testsuite\nkivy/garden\n.last_known_portable_deps_hash\ndeps.zip\nKivy.dmg\niosbuild\nkivy/core/image/osxcoreimage.c\nkivy/core/window/sdl.c\npython\npython.exe\n.idea\ndist\nhtmlcov\nkivy/deps/*\n!kivy/deps/__init__.py\nkivy.deps*\nkivy/version.py\nresults.png\nkivy-dependencies\n\nMANIFEST\n\nkivy/core/image/img_imageio.c\nkivy/core/audio/audio_sdl2.c\nkivy/core/text/text_sdlttf.c\nkivy/core/window/window_x11.c\nkivy/lib/vidcore_lite/bcm.c\nkivy/lib/vidcore_lite/bcm.h\nkivy/lib/vidcore_lite/egl.c\nkivy/core/image/_img_sdl2.c\nkivy/core/text/_text_sdl2.c\nkivy/core/window/_window_sdl2.c\n\n# PyDev\n.project\n.pydevproject\n.settings/\n\n# Virtualenv\nvenv\n\n# Emacs\n.projectile\n\nkivy/setupconfig.py\n\nkivy/core/clipboard/_clipboard_sdl2.c\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.5615234375,
          "content": "# .readthedocs.yml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: doc/sources/conf.py\n\n# Optionally build your docs in additional formats such as PDF and ePub\nformats: all\n\n# Optionally set the version of Python and requirements required to build your docs\npython:\n  version: 3\n  install:\n    - requirements: doc/doc-requirements.txt\n    - method: pip\n      path: .\n    - method: setuptools\n      path: .\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 1.8671875,
          "content": "Authors & Contributors of the Kivy Framework\n============================================\n\nCore Developers\n---------------\n\n * Mathieu Virbel <mathieu __at__ kivy.org>\n * Gabriel Pettier / tshirtman <gabriel __at__ kivy.org>\n * Akshay Arora <akshay __at__ kivy.org>\n * Thomas-Karl Pietrowski <thopiekar __at__ gmail.com>\n * Ben Rousch <brousch __at__ gmail.com>\n * Jacob Kovac <kovac1066 __at__ gmail.com>\n * Alexander Taylor <alexanderjohntaylor __at__ gmail.com>\n * Matthew Einhorn <moiein2000 __at__ gmail.com>\n * Richard Larkin / ZenCODE <zenkey.zencode __at__ gmail.com>\n * Ryan Pessa <dkived __at__ gmail.com>\n * Sebastian Armin <dessant __at__ kivy.org>\n * Peter Badida <keyweeusr __at__ gmail.com>\n\n\nContributors\n------------\n\n * Ilya Cassina <ilya.cassina __at__ gmail.com>\n * Jay Bradley <j.bradley __at__ napier.ac.uk>\n * Nathanaël Lécaudé <lecaude __at__ gmail.com>\n * Sharath Patali <sharath.patali __at__ gmail.com>\n * Tommaso Piazza <tommaso.piazza __at__ gmail.com>\n * Trevor Lockley <thatsyouremail __at__ gmail.com>\n * bernt\n * Terje Skjaeveland (bionoid)\n * George Sebastian (georgs)\n * Gabriel Ortega\n * Arnaud Waels (triselectif)\n * Thomas Hirsch\n * Joakim Gebart\n * Rosemary Sebastian\n * Jonathan Schemoul\n * Sam Brotherton (sbrother)\n\n\nGraphics\n--------\n\n * Vincent Autin <autinvincent __at__ gmail.com>\n\n\nSpecial Thanks\n--------------\n\n * Alex Teiche <xelapond __at__ gmail.com>\n * Felipe Moura <felipe.celer __at__ gmail.com>\n * Riley Dutton <rileydutton __at__ gmail.com>\n * Uday Karan <uday.karan __at__ gmail.com>\n * Damien Marchal <damien.marchal __at__ lifl.fr>\n * Tommy Bjorling <tommy.bjorling __at__ gmail.com>\n\n\nPast Core Developers\n--------------------\n\n * Thomas Hansen <thomas __at__ kivy.org>\n * Christopher Denter <christopher __at__ kivy.org>\n * Edwin Marshall <edwin __at__ kivy.org>\n * Jeff Pittman <geogeff __at__ geogeff.org>\n * Brian Knapp <knapp __at__ kivy.org>\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.7353515625,
          "content": "In the interest of fostering an open and welcoming community, we as \ncontributors and maintainers need to ensure participation in our project and \nour sister projects is a harassment-free and positive experience for everyone. \nIt is vital that all interaction is conducted in a manner conveying respect, \nopen-mindedness and gratitude.\n\nWe have adopted V2.1 of the \n[Contributor Covenant Code of Conduct](https://www.contributor-covenant.org/version/2/1/code_of_conduct/).\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to any of our [core developers](https://kivy.org/about.html) via \n[Discord](https://chat.kivy.org). (You might like to check which have been recently \nactive on Discord to get a faster response.)\n"
        },
        {
          "name": "CONTACT.md",
          "type": "blob",
          "size": 2.1865234375,
          "content": "# Contacting the Kivy Team\n\nAre you having trouble using the Kivy framework, or any of its related \nprojects? Is there an error you don't understand? Are you trying to figure out \nhow to use it? We have volunteers who can help!\n\nBefore you start, please read our [FAQ](FAQ.md): It is the fastest way to solve\n the most common problems.\n\nThe [Kivy Discord Server](https://chat.kivy.org) allows you to chat with people\n in real-time and share code snippets. There are several channels marked for \nsupport (if you aren't sure which to use, try #support1).\n\nPlease **hang around** in Discord for an answer. We are mostly based in Europe,\n so take into account any timezone issues. If you leave before a response, we \ncan't get back to you.\n\n[Kivy's GitHub Discussions](https://github.com/orgs/kivy/discussions) is \nanother forum where support questions are welcome, and our volunteers are \nlistening. If it takes more time to consider an answer, you will be notified \nwhen you get a response.\n\nYou might like to check our issue trackers out on GitHub. There is the main \n[Kivy issue tracker](https://github.com/kivy/kivy/issues), and one for each Kivy subproject. Feel free to check \nif others have had the same problem as you, but please don't submit a bug report\nuntil it is confirmed as very likely to be a bug in Kivy. (New feature requests\nare welcome.) Please ask us for help at one of the above forums about what\nto check and what information to include before submitting an issue.\n\nThere are also independent communities on \n[StackOverflow](https://stackoverflow.com/questions/tagged/kivy) and \n[Reddit](https://www.reddit.com/r/kivy/) that accept Kivy-related support\nrequests.\n\n## Other Ways to Contact Us\n\nThe Kivy team is built of volunteer developers like you, and we always need \nmore help.\n\nIf you want to give back to the community, please see our [Contribution \nGuide](CONTRIBUTING.md) for plenty of ideas about you can help out with your \ntime, no matter your level of expertise.\n\nIf you would like to help with your wallet or purse instead, we gratefully \naccept [backers and sponsors and donations](https://opencollective.com/kivy). Come and talk to us on [Kivy Discord Server](https://chat.kivy.org) if you have\nquestions."
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 24.54296875,
          "content": "# Contribution Guidelines\n\nKivy is a large product used by many thousands of developers for free, but it\nis built entirely by the contributions of volunteers. We welcome (and rely on)\nusers who want to give back to the community by contributing to the project.\n\nContributions can come in many forms. This\nchapter discusses how you can help us.\n\nExcept where specified, this chapter applies to the entire Kivy ecosystem: the\nKivy framework and all the sibling projects. However, check the documentation\nof individual projects - some have special instructions (including, for example,\npython-for-android).\n\n## Ways you can help out\n\n* The most direct way is submitting source code changes: bug-fixes, new code\nand documentation amendments to improve the products. See [Code\nContributions](#code-contributions) and [Documentation\nContributions](#documentation-contributions) below for   detailed instructions.\n\n* Submitting bug reports and new feature suggestions in our Issue trackers is\n  also welcome.\n\n  If you are asking \"Why did I get this error?\" or \"How do I implement this?\"\n  please **don't** raise an issue yet. Take it to our support channels instead\n  (see [Contact Us](CONTACT.md)); until we   can be fairly confident it is a bug\n  in the Kivy ecosystem, it isn't ready to be raised as an issue. That said,\n  we *do* want to hear about even the most minor typos or problems you find.\n\n  See [Reporting An Issue](#reporting-an-issue) below for detailed instructions.\n\n* You could help out by looking at the issues that other people have raised.\n\n  * Tell us whether you can reproduce the error (on similar and/or different\n    platforms). If the problem has already been fixed and no-one noticed, let\n    us know!\n\n  * If the submitter was unclear, shed whatever light you can. Submitting a\n    short piece of code that demonstrates the problem is incredibly helpful.\n    Providing details logs can give others the clues that they need.\n\n  * Got some coding skills?\n\n    * If you are new to Kivy, consider looking at the `Easy` or\n      `Good First Issue` tags on each project while you learn the process.\n\n    * Try some debugging? Even if you can't propose a solution, pointing out\n      where the current code (or documentation) is wrong can be the difference\n      between an issue floundering and getting quickly solved.\n\n    * If you are a little more experienced, then take a look for issues where\n      someone has proposed a detailed solution without submitting a PR. That's\n      a great opportunity for a quick win.\n\n    * Want to be a real hero? Become a foster parent for an old open PR, where\n      the submitter has bitten off more than they can chew. It will need you to\n      understand the problem they were solving, and understand how they were\n      trying to solve it. You'll need to review it, and fix problems yourself.\n      You will need to rebase it, so it can be merged. Then submit it again,\n      and advocate for it until it is merged.\n\n  * You know what is even rarer than coding skills on an open source project?\n    Writing skills! If you can write clearly, there are plenty of documentation\n    improvements that have been identified.\n\n    * Can you identify a common question from support? Add the answer to the\n      appropriate project's FAQ (e.g. [the Kivy Framework FAQ](FAQ.md)) and\n      save people time.\n\n* You don't need to find a bug or come up with a new idea to contribute to the\n  code base.\n\n  * Review some code. See if you can spot flaws before they become bugs.\n\n  * Refactor some code. Make it easier for the next person to understand and\n    modify.\n\n  * Add some unit-tests. It can be difficult to persuade occasional\n    contributors to include sufficient unit tests. A solid bank of unit-tests\n    makes further development much faster - your small effort can have\n    long-term benefits. See\n    [Kivy Framework Unit Tests](#kivy-framework-unit-tests) for\n    more about how our unit-tests are structured. Don't be afraid to refactor if\n    the original code is hard to test.\n\n* Kivy is extensible. You can add a new Widget or a new Python-For-Android\n  recipe, and have your code re-used by the community.\n  [Kivy Garden](https://kivy-garden.github.io/) is an independent project to\n  publish and promote third-party Widgets for Kivy.\n\n* Outside the code and documentation, there are still so many ways to help.\n\n  * Monitor the Discussions and Support Channels, and help beginners out.\n\n  * Evangelise: Tell people about Kivy and what you are using it for. Give a\n    talk about Kivy.\n\n  * Submit your project to the Kivy gallery to show people what it can do.\n\n    * Even if you don't want it showcased, tell us what you've done! It is very\n      motivational to see others using your code successfully.\n\n  * Persuade your organization to become a\n    [sponsor](https://opencollective.com/kivy).\n\nThere is no shortage of ways you can help The Open Source community is built on\nvolunteers contributing what they can when they can. Even if you aren't an\nexperienced coder, you can make those that are more productive.\n\n\n## Planning\n\nIf you want to discuss your contributions before you make them,\nto get feedback and advice, you can ask us on the `#dev` channel of our\n[Discord server](https://chat.kivy.org).\n\nThe GitHub issue trackers are a more formal tracking mechanism, and\noffer lots of opportunities to help out in ways that aren't just\nsubmitting new code.\n\n## Code of Conduct\n\nWe have adopted a Code of Conduct in the interest of fostering an open and\nwelcoming community. See our [Code of Conduct](CODE_OF_CONDUCT.md) for the\ndetails.\n\n## Reporting an Issue\n\nIf you found anything wrong - a bug in Kivy, missing documentation, incorrect\nspelling or just unclear examples -  please take two minutes to report the\nissue. If you are unsure, please try our support channels first; see\n[Contact Us](CONTACT.md) for details.\n\nIf you can produce a small example of a program that fails, it helps immensely:\n\n1. Move your logging level to debug by editing\n   `<user_directory>/.kivy/config.ini`:\n\n       [kivy]\n       log_level = debug\n\n2. Execute your code again, and copy/paste the complete output to\n   [GitHub's gist](http://gist.github.com/), including the log from Kivy and\n   the Python backtrace.\n\nTo raise the issue:\n\n1. Open the GitHub issue database appropriate for the project - e.g.\n[Kivy Framework](https://github.com/kivy/kivy/issues/),\n[Buildozer](https://github.com/kivy/buildozer/issues/),\n[python-for-android](https://github.com/kivy/python-for-android/issues/),\n[kivy-ios](https://github.com/kivy/kivy-ios/issues/),\netc.\n2. Set the title of your issue - use it to describe the problem succintly.\n3. Explain exactly what to do to reproduce the issue and paste the link of the\n   output posted on [GitHub's gist](http://gist.github.com/).\n4. Use the Preview tab to check how it looks - if you've pasted logs straight in\nat can cause formatting chaos.\n5. Submit it and you're done!\n\n## Code Contributions\n\nCode contributions (patches, new features) are the most obvious way to help with\nthe project's development. Since this is so common we ask you to follow our\nworkflow to most efficiently work with us. Adhering to our workflow ensures that\nyour contribution won't be forgotten or lost. Also, your name will always be\nassociated with the change you made, which basically means eternal fame in our\ncode history (you can opt out if you don't want that).\n\n### Coding style\n\n- If you haven't done it yet, read\n  [PEP8](http://www.python.org/dev/peps/pep-0008/) about coding style in Python.\n\n- If you  are working on the Kivy Framework, you can automate style checks on\n  GitHub commit:\n\n  If are developing on Unix or OSX or otherwise have `make` installed, change\n  to the Kivy source directory, and simply run:\n\n      make hook\n\n  This will pass the code added to the git staging zone (about to be committed)\n  through a checker program when you do a commit, and ensure that you didn't\n  introduce style errors. If you did, the commit will be rejected: please correct the\n  errors and try again.\n\n  The checker used is [pre-commit](https://pre-commit.com/). If you need to\n  skip a particular check see its\n  [documentation](https://pre-commit.com/#temporarily-disabling-hooks),\n  but, in summmary, on Linux, putting `SKIP=hookname` in front of `git commit`\n  will skip that hook. The name of the offending hook is shown when it fails.\n\n### Performance\n\n- Take care of performance issues: read\n  [Python performance tips](http://wiki.python.org/moin/PythonSpeed/PerformanceTips).\n- CPU-intensive parts of Kivy are written in Cython: if you are doing a lot of\n  computation, consider using it too.\n\n### Git & GitHub\n\nWe use git as our version control system for our code base. If you have never\nused git or a similar DVCS (or even any VCS) before, we strongly suggest you\ntake a look at the great documentation that is available for git online.\nThe [Git Community Book](http://book.git-scm.com/) or the\n[Git Videos](https://git-scm.com/videos) are both great ways to learn git.\nTrust us when we say that git is a great tool. It may seem daunting at first,\nbut after a while you'll (hopefully) love it as much as we do. Teaching you git,\nhowever, is well beyond the scope of this document.\n\nAlso, we use [GitHub](http://github.com) to host our code. In the following we\nwill assume that you have a (free) GitHub account. While this part is optional,\nit allows for a tight integration between your patches and our upstream code\nbase. If you don't want to use GitHub, we assume you know what you are doing anyway.\n\n### Code Workflow\n\nThese instructions are written from the perspective of the Kivy framework, but their\nequivalents apply to other Kivy sibling projects.\n\nThe initial setup to begin with our workflow only needs to be done once.\nFollow the regular installation instructions but don't clone the repository.\nInstead, make a fork. Here are the steps:\n\n1. Log in to GitHub\n2. Create a fork of the appropriate repository (e.g.\n   [Kivy framework repository](https://github.com/kivy/kivy)) by\n   clicking the *fork* button.\n3. Clone your fork of our repository to your computer. Your fork will have\n   the git remote name 'origin' and you will be on branch 'master'::\n\n        git clone https://github.com/username/kivy.git\n\n   (Replace `kivy` if it isn't the Kivy framework repository.)\n\n4. Compile and set up PYTHONPATH or install.\n5. Add the kivy repo as a remote source::\n\n        git remote add kivy https://github.com/kivy/kivy.git\n\n    (Replace `kivy` and URL if it isn't the Kivy framework repository.)\n\nNow, whenever you want to create a patch, you follow the following steps:\n\n1. See if there is a ticket in our bug tracker for the fix or feature and\n    announce that you'll be working on it if it doesn't yet have an assignee.\n2. Create a new, appropriately named branch in your local repository for\n    that specific feature or bugfix.\n    (Keeping a new branch per feature makes sure we can easily pull in your\n    changes without pulling any other stuff that is not supposed to be pulled.)::\n\n        git checkout -b new_feature\n\n3. Modify the code to do what you want (e.g. fix it).\n4. Test the code. Add automated unit-tests to show it works. Do this even for\n   small fixes. You never know whether you have introduced some weird bug\n   without testing.\n5. Do one or more minimal, atomic commits per fix or per feature.\n   Minimal/Atomic means *keep the commit clean*. Don't commit other stuff that\n   doesn't logically belong to this fix or feature. This is **not** about\n   creating one commit per line changed. Use ``git add -p`` if necessary.\n6. Give each commit an appropriate commit message, so that others who are\n   not familiar with the matter get a good idea of what you changed.\n7. Once you are satisfied with your changes, pull our upstream repository and\n   merge it with you local repository. We can pull your stuff, but since you know\n   exactly what's changed, you should do the merge::\n\n        git pull kivy master\n\n8. Push your local branch into your remote repository on GitHub::\n\n        git push origin new_feature\n\n9. Send a *Pull Request* with a description of what you changed via the button\n   in the GitHub interface of your repository. (This is why we forked\n   initially. Your repository is linked against ours.)\n\nWarning:  If you change parts of the code base that require compilation, you\n        will have to recompile in order for your changes to take effect. The ``make``\n        command will do that for you (see the Makefile if you want to know\n        what it does). If you need to clean your current directory from compiled\n        files, execute ``make clean``. If you want to get rid of **all** files that are\n        not under version control, run ``make distclean``\n        (**Caution:** If your changes are not under version control, this\n        command will delete them!)\n\nNow we will receive your pull request. We will check whether your changes are\nclean and make sense (if you talked to us before doing all of this we will have\ntold you whether it makes sense or not). If so, we will pull them, and you will\nget instant karma. Congratulations, you're a hero!\n\n## Documentation Contributions\n\nDocumentation contributions generally follow the same workflow as code contributions,\nbut are just a bit more lax.\n\n1. Follow the instructions above\n\n   1. Fork the repository.\n   2. Clone your fork to your computer.\n   3. Setup kivy repo as a remote source.\n\n2. Install python-sphinx. (See [doc/README.md](doc/README.md) for assistance.)\n\n3. Use [ReStructuredText Markup](http://docutils.sourceforge.net/rst.html) to\n   make changes to the HTML documentation in docs/sources.\n\nTo submit a documentation update, use the following steps:\n\n1. Create a new, appropriately named branch in your local repository::\n\n        git checkout -b my_docs_update\n\n2. Modify the documentation with your correction or improvement.\n3. Re-generate the HTML pages, and review your update::\n\n        make html\n\n4. Give each commit an appropriate commit message, so that others who are not familiar with\n   the matter get a good idea of what you changed.\n5. Keep each commit focused on a single related theme. Don't commit other stuff that doesn't\n   logically belong to this update.\n\n6. Push to your remote repository on GitHub::\n\n        git push\n\n7. Send a *Pull Request* with a description of what you changed via the button in the\n       GitHub interface of your repository.\n\nWe don't ask you to go through all the hassle just to correct a single typo, but for more\ncomplex contributions, please follow the suggested workflow.\n\n### Docstrings\n\nEvery module/class/method/function needs a docstring, so use the following keywords\nwhen relevant:\n\n- `.. versionadded::` to mark the version in which the feature was added.\n- `.. versionchanged::` to mark the version in which the behaviour of the feature was\n  changed.\n- `.. note::` to add additional info about how to use the feature or related\n  feature.\n- `.. warning::` to indicate a potential issue the user might run into using\n  the feature.\n- `.. deprecated::` to indicate when a feature started being deprecated.\n\nExamples::\n\n    def my_new_feature(self, arg):\n        \"\"\"\n        New feature is awesome\n\n        .. versionadded:: 1.1.4\n\n        .. note:: This new feature will likely blow your mind\n\n        .. warning:: Please take a seat before trying this feature\n        \"\"\"\n\nWhen referring to other parts of the api use:\n\n- ``:mod:`~kivy.module``` to refer to a module\n- ``:class:`~kivy.module.Class``` to refer to a class\n- ``:meth:`~kivy.module.Class.method``` to refer to a method\n- ``:doc:`api-kivy.module``` to refer to the documentation of a module (same\n  for a class and a method)\n\nReplace `module`, `class` and `method` with their real names, and\nuse '.' to separate submodule names, e.g::\n\n    :mod:`~kivy.uix.floatlayout`\n    :class:`~kivy.uix.floatlayout.FloatLayout`\n    :meth:`~kivy.core.window.WindowBase.toggle_fullscreen`\n    :doc:`/api-kivy.core.window`\n\nThe markers `:doc:` and `:mod:` are essentially the same, except for an anchor\nin the url which makes `:doc:` preferred for the cleaner url.\n\nTo build your documentation, run::\n\n    make html\n\nIf you updated your kivy install, and have some trouble compiling docs, run::\n\n    make clean force html\n\nThe docs will be generated in `docs/build/html`. For more information on\ndocstring formatting, please refer to the official\n[Sphinx Documentation](http://sphinx-doc.org/).\n\n## Kivy Framework Unit Tests\n\nThese instructions are specific to the Kivy framework (i.e. kivy/kivy in GitHub).\n\nTests are located in the `kivy/tests` folder. If you find a bug in Kivy, a good\nthing to do is to write a minimal case showing the issue and to ask on the\nsupport chnnels if the behaviour shown is intended or a real bug. If you\ncontribute your code as a\n[unittest](https://docs.python.org/3/library/unittest.html), it will prevent the\nbug from coming back unnoticed in the future (a \"regression\"), and will\nmake Kivy a better, stronger project. Writing a unittest is a great\nway to get familiar with Kivy's code while contributing something useful.\n\nUnit tests are separated into two cases:\n\n* Non-graphical unit tests: these are standard unit tests that can run in a\n  console\n* Graphical unit tests: these need a GL context, and if requested, work via\n  image comparison\n\nTo be able to run unit tests, you need to install [pytest](https://pytest.org/),\nand [coverage](http://nedbatchelder.com/code/coverage/). You can use pip for\nthat::\n\n    sudo pip install kivy[dev]\n\nThen, in the kivy directory::\n\n    make test\n\n### How it works\n\nAll the tests are located in `kivy/tests`, and the filename starts with\n`test_<name>.py`. Pytest will automatically gather all the files and classes\ninside this folder, and use them to generate test cases.\n\nTo write a test, create a file that respects the previous naming, then\nstart with this template::\n\n    import unittest\n\n    class XXXTestCase(unittest.TestCase):\n\n        def setUp(self):\n            # import class and prepare everything here.\n            pass\n\n        def test_YYY(self):\n            # place your test case here\n            a = 1\n            self.assertEqual(a, 1)\n\nReplace `XXX` with an appropriate name that covers your tests cases, then\nreplace `YYY` with the name of your test. If you have any doubts, check how\nthe other tests have been written.\n\nThen, to execute them, just run::\n\n    make test\n\nIf you want to execute that file only, you can run::\n\n    pytest kivy/tests/test_yourtestcase.py\n\nor include this simple `unittest.main()` call at the end of the file and run\nthe test with `python test_yourtestcase.py`::\n\n    if __name__ == '__main__':\n        unittest.main()\n\n\n### Graphical unit tests\n\nWhile simple unit tests are fine and useful to keep things granular, in certain\ncases we need to test Kivy after the GL Window is created to interact with the\ngraphics, widgets and to test more advanced stuff such as widget, modules,\nvarious cases of input and interaction with everything that becomes available\nonly after the Window is created and Kivy properly initialized.\n\nThese tests are executed the same way as the ordinary unit tests i.e. either\nwith `pytest` or via `unittest.main()`.\n\nHere are two similar examples with different approaches of running the app.\nIn the first one you are setting up the required stuff manually and the\n`tearDown()` of the `GraphicUnitTest` will attempt to clean it after you::\n\n    from kivy.tests.common import GraphicUnitTest\n\n    class MyTestCase(GraphicUnitTest):\n\n        def test_runtouchapp(self):\n            # non-integrated approach\n            from kivy.app import runTouchApp\n            from kivy.uix.button import Button\n\n            button = Button()\n            runTouchApp(button)\n\n            # get your Window instance safely\n            from kivy.base import EventLoop\n            EventLoop.ensure_window()\n            window = EventLoop.window\n\n            # your asserts\n            self.assertEqual(window.children[0], button)\n            self.assertEqual(\n                window.children[0].height,\n                window.height\n            )\n\nIn the second test case both `setUp()` and `tearDown()` work together with\n`GraphicUnitTest.render()`. This is the basic setup it does automatically:\n\n* Window is sized to 320 x 240 px\n* Only the default Config is used during the test, it's restricted with the\n  `KIVY_USE_DEFAULTCONFIG` environment variable\n* Any input (mouse/touch/...) is *removed* and if you need to test it, either\n  mock it or manually add it\n* Window's canvas is cleared before displaying any widget tree\n\nWarning: Do NOT use absolute numbers in your tests to preserve the functionality\nacross the all resolutions. Instead, use e.g. relative position or size and\nmultiply it by the `Window.size` in your test.\n\n\n\n    from kivy.tests.common import GraphicUnitTest, UnitTestTouch\n\n    class MyTestCase(GraphicUnitTest):\n\n        def test_render(self):\n            from kivy.uix.button import Button\n\n            # with GraphicUnitTest.render() you basically do this:\n            # runTouchApp(Button()) + some setup before\n            button = Button()\n            self.render(button)\n\n            # get your Window instance safely\n            from kivy.base import EventLoop\n            EventLoop.ensure_window()\n            window = EventLoop.window\n\n            touch = UnitTestTouch(\n                *[s / 2.0 for s in window.size]\n            )\n\n            # bind something to test the touch with\n            button.bind(\n                on_release=lambda instance: setattr(\n                    instance, 'test_released', True\n                )\n            )\n\n            # then let's touch the Window's center\n            touch.touch_down()\n            touch.touch_up()\n            self.assertTrue(button.test_released)\n\n\n    if __name__ == '__main__':\n        import unittest\n        unittest.main()\n\nNote: Make sure you check the source of `kivy.tests.common` before writing\ncomprehensive test cases.\n\n\n### GL unit tests\n\nGL unit test are more difficult. You must know that even if OpenGL is a\nstandard, the output/rendering is not. It depends on your GPU and the driver\nused. For these tests, the goal is to save the output of the rendering at\nframe X, and compare it to a reference image.\n\nCurrently, images are generated at 320x240 pixels, in *png* format.\n\nNote: Currently, image comparison is done per-pixel. This means the reference\n    image that you generate will only be correct for your GPU/driver. If\n    somebody can implement image comparison with \"delta\" support, patches\n    are welcome :)\n\nTo execute GL unit tests, you need to create a directory::\n\n    mkdir kivy/tests/results\n    KIVY_UNITTEST_SCREENSHOTS=1 make test\n\nThe results directory will contain all the reference images and the\ngenerated images. After the first execution, if the results directory is empty,\nno comparison will be done. It will use the generated images as reference.\nAfter the second execution, all the images will be compared to the reference\nimages.\n\nA html file is available to show the comparison before/after the test, and a\nsnippet of the associated unit test. It will be generated at:\n\n    kivy/tests/build/index.html\n\nNote: The build directory is cleaned after each call to `make test`. If you don't\n    want that, just use pytest command.\n\n#### Writing GL Unit tests\n\n\nThe idea is to create a root widget, as you would do in\n`kivy.app.App.build`, or in `kivy.base.runTouchApp`.\nYou'll give that root widget to a rendering function which will capture the\noutput in X Window frames.\n\nHere is an example::\n\n    from kivy.tests.common import GraphicUnitTest\n\n    class VertexInstructionTestCase(GraphicUnitTest):\n\n        def test_ellipse(self):\n            from kivy.uix.widget import Widget\n            from kivy.graphics import Ellipse, Color\n            r = self.render\n\n            # create a root widget\n            wid = Widget()\n\n            # put some graphics instruction on it\n            with wid.canvas:\n                Color(1, 1, 1)\n                self.e = Ellipse(pos=(100, 100), size=(200, 100))\n\n            # render, and capture it directly\n            r(wid)\n\n            # as alternative, you can capture in 2 frames:\n            r(wid, 2)\n\n            # or in 10 frames\n            r(wid, 10)\n\nEach call to `self.render` (or `r` in our example) will generate an image named\nas follows::\n\n    <classname>_<funcname>-<r-call-count>.png\n\n`r-call-count` represents the number of times that `self.render` is called\ninside the test function.\n\nThe reference images are named::\n\n    ref_<classname>_<funcname>-<r-call-count>.png\n\nYou can easily replace the reference image with a new one if you wish.\n\n### Coverage reports\n\nCoverage is based on the execution of previous tests. Statistics on code\ncoverage are automatically calculated during execution. You can generate an HTML\nreport of the coverage with the command::\n\n    make cover\n\nThen, open `kivy/htmlcov/index.html` with your favorite web browser.\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 16.1318359375,
          "content": "# FAQ for Kivy Framework\n\n## Introduction\n[Kivy](http://kivy.org) is an open-source Python framework for developing \nGUI apps that work cross-platform, including desktop, mobile and embedded \nplatforms.\n\n### Sibling Projects with FAQs:\n\nAs well as the [Kivy framework](https://github.com/kivy/kivy), there are a\nnumber of sibling projects maintained by the same team. Some have their own FAQs, including: \n\n* [FAQ](https://github.com/kivy/buildozer/blob/master/FAQ.md) for \n[Buildozer](https://github.com/kivy/buildozer/): a development tool for turning Python applications into binary \npackages ready for installation on any of a number of platforms, including mobile devices.\n* [FAQ](https://github.com/kivy/plyer/blob/master/FAQ.md) for [Plyer](https://github.com/kivy/plyer):\na platform-independent Python API for accessing hardware features of various platforms (Android, iOS, macOS, Linux and\nWindows).\n* [FAQ](https://github.com/kivy/pyjnius/blob/master/FAQ.md) for [PyJNIus](https://github.com/kivy/pyjnius):\na Python library for accessing Java classes using the Java Native Interface (JNI).\n* [FAQ](https://github.com/kivy/python-for-android/blob/master/FAQ.md) for \n[python-for-android](https://github.com/kivy/python-for-android):\na development tool that packages Python apps into binaries that can run on Android devices.\n* [FAQ](https://github.com/kivy/kivy-ios/blob/master/FAQ.md) for [Kivy for iOS](https://github.com/kivy/kivy-ios):\na toolchain to compile the necessary libraries for iOS to run Kivy applications, and manage the creation of Xcode\nprojects.\n\n## Project Questions\n\n### Why do you use Python? Isn't it slow?\n\nLet us try to give a thorough answer; please bear with us.\n\nPython is a very agile language that allows you to do many things\nin a (by comparison) short time.\nFor many development scenarios, we strongly prefer writing our\napplication quickly in a high-level language such as Python, testing\nit, then optionally optimizing it.\n\nBut what about speed?\nIf you compare execution speeds of implementations for a certain set of\nalgorithms (esp. number crunching) you will find that Python is a lot\nslower than say, C++.\nNow you may be even more convinced that it's not a good idea in our\ncase to use Python. Drawing sophisticated graphics (and we are\nnot talking about your grandmother's OpenGL here) is computationally\nquite expensive and given that we often want to do that for rich user\nexperiences, that would be a fair argument.\n**But**, in virtually every case your application ends up spending\nmost of the time (by far) executing the same part of the code.\nIn Kivy, for example, these parts are event dispatching and graphics\ndrawing. Now Python allows you to do something to make these parts\nmuch faster.\n\nBy using Cython, you can compile your code down to the C level,\nand from there your usual C compiler optimizes things. This is\na pretty pain free process and if you add some hints to your\ncode, the result becomes even faster. We are talking about a speed-up\nin performance by a factors like 30 or much more; it greatly depends on your code. \nIn Kivy, we did this for\nyou and implemented the portions of our code, where efficiency really\nis critical, on the C level.\n\nFor graphics drawing, we also leverage today's GPUs which are, for\nsome tasks such as graphics rasterization, much more efficient than a\nCPU. Kivy does as much as is reasonable on the GPU to maximize\nperformance. If you use our Canvas API to do the drawing, there is\neven a compiler that we invented which optimizes your drawing code\nautomatically. If you keep your drawing mostly on the GPU,\nmuch of your program's execution speed is not determined by the\nprogramming language used, but by the graphics hardware you throw at\nit.\n\nWe believe that these (and other) optimizations that Kivy does for you\nalready make most applications fast enough by far. Often you will even\nwant to limit the speed of the application in order not to waste\nresources.\n\nBut even if this is not sufficient, you still have the option of using\nCython for your own code to *greatly* speed it up.\n\nTrust us when we say that we have given this very careful thought.\nWe have performed many different benchmarks and come up with some\nclever optimizations to make your application run smoothly.\n\n### What versions of Python does Kivy support?\n\nTypically, all the versions of Python that [haven't reached End of Life](https://devguide.python.org/versions/).\n\nThere may be some delays as new versions of Python are released, while we wait for our dependencies to add support.\n\nTo find the answer for the latest released versions, check the Python Package Index (PyPI) for [Kivy](https://pypi.org/project/Kivy/).\nIf you are developing app for other platforms, check [Buildozer](https://pypi.org/project/buildozer/), \n[python-for-android](https://pypi.org/project/python-for-android/), and [kivy-ios](https://pypi.org/project/kivy-ios/),\nas appropriate.\n\n### Do you accept patches?\n\nYes, we love patches. Obviously we don't accept every patch. Your patch has to be consistent\nwith our styleguide and, more importantly, make sense. Come talk to us on Discord before you come up with bigger\nchanges, especially new features.\n\nMake sure to read [our contribution guidelines](FAQ.md).\n\n### Does the Kivy project participate in Google's Summer of Code?\n\nPotential students sometimes ask whether we participate in GSoC.\nThe clear answer is: Indeed. :-)\n\nIf you want to participate as a student and want to maximize your\nchances of being accepted, start talking to us today and try fixing\nsome smaller (or larger, if you can ;-) problems to get used to our\nworkflow. If we know you can work well with us, that'd be a big plus.\n\nHere's a checklist:\n\n* Make sure to read through the website and at least skim the documentation.\n* Look at the source code.\n* Read our contribution guidelines.\n* Pick an idea that you think is interesting from the ideas list (see link\n  above) or come up with your own idea.\n* Do some research **yourself**. GSoC is not about us teaching you something\n  and you getting paid for that. It is about you trying to achieve agreed upon\n  goals by yourself with our support. The main driving force in this should be,\n  obviously, yourself.  Many students come up and ask what they should\n  do. Well, we don't know because we know neither your interests nor your\n  skills. Show us you're serious about it and take initiative.\n* Write a draft proposal about what you want to do. Include what you understand\n  the current state is (very roughly), what you would like to improve and how,\n  etc.\n* Discuss that proposal with us in a timely manner. Get feedback.\n* Be patient! Especially on Discord. We will try to get to you if we're available.\n  If not, send an email and just wait. Most questions are already answered in\n  the docs or somewhere else and can be found with some research. If your\n  questions don't reflect that you've actually thought through what you're\n  asking, it might not be well received.\n\n### How does Kivy relate to other projects:\n\n#### Is Kivy related to KivyMD?\n\n[KivyMD](https://kivymd.readthedocs.io/en/1.1.1/) is a separate project to Kivy - \nit is run by a different team. It builds powerful and beautiful widgets for use \nwith Kivy. \n\n#### Is Kivy's python-for-android related to Scripting Layer for Android (SL4A)?\n\nDespite having the same name, Kivy's python-for-android is not related to the\npython-for-android project from SL4A, Py4A, or android-python27. They are\ndistinctly different projects with different goals. You may be able to use\nPy4A with Kivy, but no code or effort has been made to do so. The Kivy team\nfeels that our python-for-android is the best solution for us going forward,\nand attempts to integrate with and support Py4A is not a good use of our time.\n\n#### Is Kivy related to PyMT?\n\nOur developers are professionals and are pretty savvy in their\narea of expertise. However, before Kivy came around there was (and\nstill is) a project named PyMT that was led by our core developers.\nWe learned a great deal from that project during the time that we\ndeveloped it. In the more than two years of research and development\nwe found many interesting ways to improve the design of our\nframework. We have performed numerous benchmarks and as it turns out,\nto achieve the great speed and flexibility that Kivy has, we had to\nrewrite quite a big portion of the codebase, making this a\nbackwards-incompatible but future-proof decision.\nMost notable are the performance increases, which are just incredible.\nKivy starts and operates just so much faster, due to these heavy\noptimizations.\n\nWe also had the opportunity to work with businesses and associations\nusing PyMT. We were able to test our product on a large diversity of\nsetups and made PyMT work on all of them. Writing a system such as\nKivy or PyMT is one thing. Making it work under all these different\nconditions is another. We have a good background here, and brought our\nknowledge to Kivy.\n\nFurthermore, since some of our core developers decided to drop their full-time\njobs and turn to this project completely, it was decided that a more\nprofessional foundation had to be laid. Kivy is that foundation. It is\nsupposed to be a stable and professional product.\nTechnically, Kivy is not really a successor to PyMT because there is\nno easy migration path between them. However, the goal is the same:\nProducing high-quality applications for novel user interfaces.\nThis is why we encourage everyone to base new projects on Kivy instead\nof PyMT.\n\nActive development of PyMT has stalled. Maintenance patches are still\naccepted.\n\n#### Is Kivy related to kivy3, kivy4 and kivy5?\n\nThere is a defunct project in PyPI called `kivy3`. It was developed to \nenhance Kivy to add 3D graphics, but it was not developed by the Kivy team; \nit does not represent the successor to Kivy.\n\nThere are projects in PyPI called `kivy4` and `kivy5`. They claim to be \nMIT-licensed projects but do not include source code. They are not produced \nby the Kivy Team, and we would always recommend caution before installing \nbinaries from unknown sources.\n\n## Technical Questions\n\n### Can I write apps that support my local language?\n\nThe Kivy team is distributed globally and understands the importance of handling\ninternationalization of software. They are actively working on \n[a number of fronts](https://github.com/kivy/kivy/issues/8444) to make Kivy \nsupport languages from around the world more seamlessly. It is challenging as \nKivy is built on a number of technologies and platforms, with differing \nsupport for display and input of Unicode, Right-to-Left languages, etc.\n\nThis guide, [*Supporting Arabic Alphabet in Kivy for Building Cross-Platform Applications*](https://medium.com/@ahmedfgad/supporting-arabic-alphabet-in-kivy-for-building-cross-platform-applications-7a1e7c14a068), \nprovides helpful advice in handling many languages, not just Arabic.\n\nFor [True Type fonts (TTF)](https://en.wikipedia.org/wiki/TrueType) on platforms\nusing SDL/SDL2 for graphics, setting a Label's [font_script_name](https://kivy.org/doc/stable/api-kivy.uix.label.html#kivy.uix.label.Label.font_script_name) correctly [can avoid rendering issues](https://github.com/kivy/kivy/issues/7227) with some fonts.\n\n### Should I make a property a Kivy class-level property?\n\nRecall from the [Kivy Properties documentation](https://kivy.org/doc/stable/api-kivy.properties.html#kivy.properties) that the services provided by making something a Kivy Property are:\n\n* Value Checking / Validation: When you assign a new value to a property, the value is checked against validation constraints. For example, validation for an OptionProperty will make sure that the value is in a predefined list of possibilities. Validation for a NumericProperty will check that your value is a numeric type. This prevents many errors early on.\n* Observer Pattern: You can specify what should happen when a property’s value changes. You can bind your own function as a callback to changes of a Property. If, for example, you want a piece of code to be called when a widget’s pos property changes, you can bind a function to it.\n* Better Memory Management: The same instance of a property is shared across multiple widget instances.\n\nThus, if you think you will want to use any of those services in conjunction with an attribute, you should probably default to making that attribute a Kivy property. (Occasionally there may be a performance penalty in doing so, but generally speaking, it is advisable to err on the side of using what the Kivy devs have provided, and then later re-factor if such a performance hit becomes noticeable and detrimental. Just remember to avoid using Kivy \"keywords,\" which vary somewhat from class to class, when re-factoring, lest you over-ride something unintentionally.)\n\n### Challenging Error messages \n\nHere are some error messages that users have found difficult to debug.\n\n#### I get a \"Unable to get a Window, abort.\" error. What do I do?\n\n  If Kivy cannot instantiate a Window core provider (mostly SDL2), you'll see\nthis. The underlying issue depends on many things:\n\n  - Check your installation. Twice.\n  - Check that your graphics driver support OpenGL 2.1 at the minimum. Otherwise, Kivy can't run.\n  - If you use windows and ANGLE (`KIVY_GL_BACKEND=angle_sdl2`), check that you have DirectX 9 support.\n  - If your platform doesn't support OpenGL, SDL2 cannot initialize OpenGL.\n  - Don't mix the architecture of the dependencies (e.g. Python 64-bit and 32-bit extensions/SDL2)\n  - Don't mix python installation: e.g. if you have Python and Anaconda installed, the Python actually run may be different than you think. Similarly, if you have multiple Python versions available on the ``PATH``, they may clash.\n  - Check your PATH to ensure that other programs in it do not provide the same dlls as Kivy/Python, or bad stuff can happen.\n    - This commonly happens if some other program that uses similar dependencies as Kivy adds itself to the `PATH` so that Kivy's dependencies clash with theirs.\n    - Please read [this](https://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them) and [this](https://www.digitalcitizen.life/simple-questions-what-are-environment-variables) for more details on ``PATH``.\n    - The best tool to troubleshoot this is with [Dependency Walker](http://www.dependencywalker.com/) explained [here](https://www.thewindowsclub.com/dependency-walker-download>) and [here](https://kb.froglogic.com/display/KB/Analyzing+dependencies+with+Dependency+Walker).\n    - But ensure that you're launching it from the identical environment that you start Python.\n  - Ensure you have all dependencies installed (like `kivy_deps.sdl2`).\n  - Maybe your drivers have some missing OpenGL symbols? Try to switch to another graphics backend with ``KIVY_GL_BACKEND``.\n  - Maybe your [Pycharm configuration is incorrect](https://stackoverflow.com/questions/49466785/kivy-error-python-2-7-sdl2-import-error).\n\n#### I get a \"Fatal Python error: (pygame parachute) Segmentation Fault\" error. What went wrong?\n\n  Most of time, this issue is due to the usage of old graphics drivers. Install the\nlatest graphics driver available for your graphics card, and it should be ok.\n\n  If not, this means you have probably triggered some OpenGL code without an\navailable OpenGL context. If you are loading images, atlases, using graphics\ninstructions, you must spawn a Window first:\n\n * method 1 (preferred)\n\n       from kivy.base import EventLoop\n       EventLoop.ensure_window()\n\n * method 2\n \n       from kivy.core.window import Window\n\n  If not, please make a bug report. [Instructions are here](https://kivy.org/doc/stable/contribute.html).\nThat kind of error can be very hard, so please give us all the information you can give about your environment and\nexecution.\n\n#### I get an \"undefined symbol: glGenerateMipmap\" error. How do I fix it?\n\n  Your graphics card or its drivers might be too old. Update your graphics drivers to the\nlatest available version and retry.\n\n\n#### I get an \"ImportError: No module named _event\". How come?\n\n  If you use Kivy from our development version, you must compile it before\nusing it. Check [installation guide](https://kivy.org/doc/stable/gettingstarted/installation.html) for more information.\n\n## Android Questions\n\nAndroid-related FAQ issues are documented in the \n[Python-For-Android FAQ](https://github.com/kivy/python-for-android/blob/develop/FAQ.md).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.068359375,
          "content": "MIT License\n\nCopyright (c) 2010-2025 Kivy Team and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.341796875,
          "content": "include *AUTHORS *LICENSE *README.md *pyproject.toml\nrecursive-include doc *\nrecursive-include examples *\nrecursive-include kivy/data *.png *.jpg *.ttf *.kv *.fs *.vs *.json *.gif *.atlas *.ico\nrecursive-include kivy/tools *.png *.txt *.bat *.sh *.py\nrecursive-include kivy/tests *.py *.png\nrecursive-include kivy *.pyd *.pyx *.c *.pxi *.h *.pxd *.m\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 5.115234375,
          "content": "\nPYTHON = python3\nifeq (, $(shell which $(PYTHON) 2> /dev/null ))\n  PYTHON := python\nendif\n\nifeq (, $(shell which $(PYTHON) 2> /dev/null))\n  $(error \"PYTHON=$(PYTHON) not found in $(PATH)\")\nendif\n\nPYTHON_VERSION_MIN=3.0\nPYTHON_VERSION=$(shell $(PYTHON) -c 'import sys; print(\"%d.%d\"% sys.version_info[0:2])' )\nPYTHON_VERSION_OK=$(shell $(PYTHON) -c 'import sys;\\\n  print(int(float(\"%d.%d\"% sys.version_info[0:2]) >= $(PYTHON_VERSION_MIN)))' )\n\nifeq ($(PYTHON_VERSION_OK),0)\n  $(error \"detected Python $(PYTHON_VERSION) need Python >= $(PYTHON_VERSION_MIN)\")\nendif\nCHECKSCRIPT = -m ruff check\nKIVY_DIR = kivy/\nPYTEST = $(PYTHON) -m pytest\nKIVY_USE_DEFAULTCONFIG = 1\nHOSTPYTHON = $(KIVYIOSROOT)/tmp/Python-$(PYTHON_VERSION)/hostpython\n\nGIT_COMMAND := $(shell which git)\n\nIOSPATH := $(PATH):/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin\n\nBUILD_OPTS       =\n\nINSTALL_OPTIONS  =\nINSTALL_ROOT     =\nINSTALL_PREFIX   =\nINSTALL_LAYOUT   =\n\nifneq ($(INSTALL_ROOT),)\n\tINSTALL_OPTIONS += --root=$(INSTALL_ROOT)\nendif\nifneq ($(INSTALL_PREFIX),)\n\tINSTALL_OPTIONS += --prefix=$(INSTALL_PREFIX)\nendif\n\n.PHONY: build force mesabuild pdf style hook test batchtest cover clean distclean theming\n\nbuild:\n\t$(PYTHON) -m pip install -e . $(BUILD_OPTS)\n\nmesabuild:\n\tenv USE_MESAGL=1 $(PYTHON) -m pip install -e . $(BUILD_OPTS)\n\nios:\n\t-ln -s $(KIVYIOSROOT)/Python-2.7.1/python\n\t-ln -s $(KIVYIOSROOT)/Python-2.7.1/python.exe\n\n\t-rm -rdf iosbuild/\n\tmkdir iosbuild\n\n\techo \"First build ========================================\"\n\t-PATH=\"$(IOSPATH)\" $(HOSTPYTHON) setup.py build_ext -g\n\techo \"cythoning ==========================================\"\n\tfind . -name *.pyx -exec cython {} \\;\n\techo \"Second build =======================================\"\n\tPATH=\"$(IOSPATH)\" $(HOSTPYTHON) setup.py build_ext -g\n\tPATH=\"$(IOSPATH)\" $(HOSTPYTHON) setup.py install -O2 --root iosbuild\n\t# Strip away the large stuff\n\tfind iosbuild/ | grep -E '.*\\.(py|pyc|so\\.o|so\\.a|so\\.libs)$$' | xargs rm\n\t-rm -rdf \"$(BUILDROOT)/python/lib/python2.7/site-packages/kivy\"\n\t# Copy to python for iOS installation\n\tcp -R \"iosbuild/usr/local/lib/python2.7/site-packages/kivy\" \"$(BUILDROOT)/python/lib/python2.7/site-packages\"\n\npdf: build\n\t-cd doc && $(MAKE) pdf\n\tcd doc && $(MAKE) pdf\n\nhtml: build\n\tcd doc && $(MAKE) html\n\nhtml-embedded:\n\tenv USE_EMBEDSIGNATURE=1 $(MAKE) force\n\t$(MAKE) -C doc html\n\nstyle:\n\t$(PYTHON) $(CHECKSCRIPT) .\n\nhook:\n\t# Install pre-commit git hook to check your changes for styleguide\n\t# consistency.\n\tpre-commit install -f --config=kivy/tools/precommit_hooks/pre-commit-config.yaml\n\nimage-testsuite:\n\tmkdir -p \"${KIVY_DIR}tests/image-testsuite\"\n\t-${KIVY_DIR}tools/image-testsuite/imagemagick-testsuite.sh \"${KIVY_DIR}tests/image-testsuite\"\n\ntest:\n\t# Run tests and print output.\n\t-rm -rf kivy/tests/build\n\tenv KIVY_NO_ARGS=1 $(PYTEST) kivy/tests\n\ntest-to-txt:\n\t# Run tests with missing line stats and save output to 'coverage.txt'.\n\t-rm -rf kivy/tests/build\n\tenv KIVY_NO_ARGS=1 $(PYTEST) --cov-report term-missing --cov=kivy kivy/tests > coverage.txt\n\ntest-to-xml:\n\t# Run tests with missing line stats and save output to 'coverage.xml'.\n\t-rm -rf kivy/tests/build\n\tenv KIVY_NO_ARGS=1 $(PYTEST) --cov-report xml --cov-report term-missing --cov=kivy kivy/tests\n\ncover:\n\t# Note: This option does not currently support the missing lines analysis.\n\tcoverage html --include='$(KIVY_DIR)*' --omit '$(KIVY_DIR)data/*,$(KIVY_DIR)lib/*,$(KIVY_DIR)tools/*,$(KIVY_DIR)tests/*'\n\ninstall:\n\t$(PYTHON) -m pip install -e . $(INSTALL_OPTIONS)\n\nclean:\n\t$(MAKE) -C doc clean\n\t-rm -rf build\n\t-rm -rf htmlcov\n\t-rm -f .coverage\n\t-rm -rf kivy/tests/build\n\t-find kivy -iname '*.so' -exec rm {} \\;\n\t-find kivy -iname '*.pyd' -exec rm {} \\;\n\t-find kivy -iname '*.pyc' -exec rm {} \\;\n\t-find kivy -iname '*.pyo' -exec rm {} \\;\n\t-find kivy -iname '*.pyx' -exec sh -c 'echo `dirname {}`/`basename {} .pyx`.c' \\; | xargs ls -d 2>/dev/null | xargs -r rm\n\t-find kivy -iname '*.pyx' -exec sh -c 'echo `dirname {}`/`basename {} .pyx`.cpp' \\; | xargs ls -d 2>/dev/null | xargs -r rm\n\ndistclean: clean\nifneq ($(GIT_COMMAND),)\nifneq ($(git rev-parse --git-dir 2> /dev/null),)\n\t@echo \"Using GIT at $(GIT_COMMAND) to make a distclean...\"\n\t-git clean -dxf -e debian\nelse\n\t@echo \"Not in a git directory to make a distclean...\"\nendif\nelse\n\t@echo \"GIT not found to make a distclean...\"\nendif\n\ntheming:\n\t$(PYTHON) -m kivy.atlas kivy/data/images/defaulttheme 512 kivy/tools/theming/defaulttheme/*.png\n\nhelp:\n\t@echo \"Please use \\`make <target>' where <target> is one of\"\n\t@echo \"  build          for a standard build (install) in editable mode\"\n\t@echo \"  clean          remove generated and compiled files\"\n\t@echo \"  cover          create an html coverage report of unittests\"\n\t@echo \"  dist-clean     clean then use 'git clean'\"\n\t@echo \"  hook           add Pep-8 checking as a git precommit hook\"\n\t@echo \"  html           to make standalone HTML files\"\n\t@echo \"  install        install with extra options\"\n\t@echo \"  mesabuild      for a build with MesaGL\"\n\t@echo \"  style          to check Python code for style issues\"\n\t@echo \"  test           run unittests (pytest)\"\n\t@echo \"  theming        create a default theme atlas\"\n\t@echo \"  \"\n\t@echo \"You can also 'cd doc && make help' to build more documentation types\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.599609375,
          "content": "Kivy\n====\n\n<img align=\"right\" height=\"256\" src=\"https://raw.githubusercontent.com/kivy/kivy/master/kivy/data/logo/kivy-icon-256.png\"/>\n\n[Kivy](https://www.kivy.org) is an open-source [Python](https://python.org) framework\nfor developing GUI apps that work cross-platform, including desktop, mobile and\nembedded platforms.\n\nThe aim is to allow for quick and easy interaction design and rapid prototyping\nwhilst making your code reusable and deployable: Innovative user interfaces made\neasy.\n\nKivy is written in Python and [Cython](https://cython.org/) and is built on\n[OpenGL ES 2.0](https://www.khronos.org/opengles/). It supports various input \ndevices and has an extensive (and extensible) widget library. With the\nsame codebase, you can target Windows, macOS, Linux (including Raspberry Pi OS),\nAndroid, and iOS. All Kivy widgets are built with multitouch support.\n\nKivy is [MIT licensed](LICENSE), actively developed by a great community and is\nsupported by many projects managed by the \n[Kivy Organization](https://www.kivy.org/about.html).\n\n[![Backers on Open Collective](https://opencollective.com/kivy/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/kivy/sponsors/badge.svg)](#sponsors)\n[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg)](CODE_OF_CONDUCT.md)\n[![GitHub contributors](https://img.shields.io/github/contributors-anon/kivy/kivy)](https://github.com/kivy/kivy/graphs/contributors)\n\n![PyPI - Version](https://img.shields.io/pypi/v/kivy)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/kivy)\n\n[![Windows Unittests Status](https://github.com/kivy/kivy/workflows/Windows%20Unittests/badge.svg)](https://github.com/kivy/kivy/actions?query=workflow%3A%22Windows+Unittests%22)\n[![Ubuntu Unittests Status](https://github.com/kivy/kivy/workflows/Ubuntu%20Unittests/badge.svg)](https://github.com/kivy/kivy/actions?query=workflow%3A%22Ubuntu+Unittests%22)\n[![OSX Unittests Status](https://github.com/kivy/kivy/workflows/OSX%20Unittests/badge.svg)](https://github.com/kivy/kivy/actions?query=workflow%3A%22OSX+Unittests%22)\n[![Coverage Status](https://coveralls.io/repos/kivy/kivy/badge.svg?branch=master)](https://coveralls.io/r/kivy/kivy?branch=master)\n\n[![Windows wheels Status](https://github.com/kivy/kivy/workflows/Windows%20wheels/badge.svg)](https://github.com/kivy/kivy/actions?query=workflow%3A%22Windows+wheels%22)\n[![Manylinux wheels Status](https://github.com/kivy/kivy/workflows/Manylinux%20wheels/badge.svg)](https://github.com/kivy/kivy/actions?query=workflow%3A%22Manylinux+wheels%22)\n[![Raspberry Pi wheels Status](https://github.com/kivy/kivy/workflows/RPi%20wheels/badge.svg)](https://github.com/kivy/kivy/actions?query=workflow%3A%22RPi+wheels%22)\n[![OSX wheels Status](https://github.com/kivy/kivy/workflows/OSX%20wheels%2Fapp/badge.svg)](https://github.com/kivy/kivy/actions?query=workflow%3A%22OSX+wheels%2Fapp%22)\n\nInstallation, Documentation and Examples\n----------------------------------------\n\nExtensive installation instructions as well as tutorials and general\ndocumentation, including an API reference, can be found at https://www.kivy.org/docs.\nA [PDF version](https://media.readthedocs.org/pdf/kivy/latest/kivy.pdf) is also available.\n\nKivy ships with many examples which can be found in the `examples` folder.\n\nSupport\n-------\n\nAre you having trouble using the Kivy framework, or any of its related projects?\nIs there an error you don’t understand? Are you trying to figure out how to use \nit? We have volunteers who can help!\n\nThe best channels to contact us for support are listed in the latest \n[Contact Us](CONTACT.md) document.\n\nContributing\n------------\n\nWe love pull requests and discussing novel ideas. Check out our\n[latest contribution guide](CONTRIBUTING.md) and\nfeel free to improve Kivy.\n\nIt gives details of the best places online to discuss the development with the\ncore developers and other enthusiasts.\n\nSibling projects\n----------------\n\nThe Kivy team manager a number of additional projects that support the Kivy \neco-system.\n\n- [Buildozer](https://github.com/kivy/buildozer):  a development tool for turning Python applications into binary packages ready for installation on\n  any of a number of platforms, including mobile devices.\n- [Plyer](https://github.com/kivy/plyer): a platform-independent Python API for accessing hardware features of various platforms (Android, iOS,\n  macOS, Linux and Windows).\n- [PyJNIus](https://github.com/kivy/pyjnius): a Python library for accessing Java classes using the Java Native Interface (JNI).\n- [Pyobjus](https://github.com/kivy/pyobjus): Python module for accessing Objective-C classes as Python classes using \n  Objective-C runtime reflection.\n- [Python for Android](https://github.com/kivy/python-for-android): a development tool that packages Python apps into binaries that can run on Android devices.\n- [Kivy iOS](https://github.com/kivy/kivy-ios): a toolchain to compile the necessary libraries for iOS to run Kivy applications, and manage the\n  creation of Xcode projects.\n- [Audiostream](https://github.com/kivy/audiostream): library for direct access\n  to the microphone and speaker.\n- [KivEnt](https://github.com/kivy/kivent): entity-based game engine for Kivy.\n- [Oscpy](https://github.com/kivy/oscpy/): a Python implementation of Open Sound Control (OSC) network protocol.\n- [Garden](https://github.com/kivy-garden): widgets and libraries created and\n  maintained by users.\n\nLicenses\n--------\n\n- Kivy is released under the terms of the MIT License. Please refer to the\n  [LICENSE](LICENSE) file.\n- The provided fonts Roboto and Roboto Mono are licensed and\n  distributed under the terms of the\n  [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0).\n  The DejaVuSans (used for the virtual keyboard) license can be viewed\n  [here](https://github.com/dejavu-fonts/dejavu-fonts/blob/master/LICENSE).\n- The current UI design has been adapted from Moblintouch theme's SVGs\n  and is licensed under the terms of the\n  [LGPLv2.1](https://www.gnu.org/licenses/old-licenses/lgpl-2.1).\n\n\n## Code of Conduct\n\nIn the interest of fostering an open and welcoming community, we as \ncontributors and maintainers need to ensure participation in our project and \nour sister projects is a harassment-free and positive experience for everyone. \nIt is vital that all interaction is conducted in a manner conveying respect, \nopen-mindedness and gratitude.\n\nPlease consult the [latest Code of Conduct](https://github.com/kivy/kivy/blob/master/CODE_OF_CONDUCT.md).\n\n## Contributors\n\nThis project exists thanks to \n[all the people who contribute](https://github.com/kivy/kivy/graphs/contributors).\n[[Become a contributor](CONTRIBUTING.md)].\n\n<img src=\"https://contrib.nn.ci/api?repo=kivy/kivy&pages=5&no_bot=true&radius=22&cols=18\">\n\n## Backers\n\nThank you to [all of our backers](https://opencollective.com/kivy)! \n🙏 [[Become a backer](https://opencollective.com/kivy#backer)]\n\n<img src=\"https://opencollective.com/kivy/backers.svg?width=890&avatarHeight=44&button=false\">\n\n## Sponsors\n\nSpecial thanks to \n[all of our sponsors, past and present](https://opencollective.com/kivy).\nSupport this project by \n[[becoming a sponsor](https://opencollective.com/kivy#sponsor)].\n\nHere are our top current sponsors. Please click through to see their websites,\nand support them as they support us. \n\n<!--- See https://github.com/orgs/kivy/discussions/15 for explanation of this code. -->\n<a href=\"https://opencollective.com/kivy/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/3/avatar.svg\"></a>\n\n<a href=\"https://opencollective.com/kivy/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/7/avatar.svg\"></a>\n\n<a href=\"https://opencollective.com/kivy/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/11/avatar.svg\"></a>\n\n<a href=\"https://opencollective.com/kivy/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/15/avatar.svg\"></a>\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "kivy",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.0380859375,
          "content": "[build-system]\nrequires = [\n    \"setuptools~=75.6.0\",\n    \"wheel~=0.45.1\",\n    \"packaging~=24.0\",\n    \"cython>=0.29.1,<=3.0.11\",\n    'kivy_deps.gstreamer_dev~=0.3.3; sys_platform == \"win32\"',\n    'kivy_deps.sdl2_dev~=0.8.0; sys_platform == \"win32\"',\n    'kivy_deps.glew_dev~=0.3.1; sys_platform == \"win32\"',\n    'kivy_deps.gstreamer~=0.3.3; sys_platform == \"win32\"',\n    'kivy_deps.sdl2~=0.8.0; sys_platform == \"win32\"',\n    'kivy_deps.glew~=0.3.1; sys_platform == \"win32\"',\n]\n\n[tool.pytest.ini_options]\naddopts = \"--benchmark-skip --benchmark-warmup=on --benchmark-warmup-iterations=5 --benchmark-disable-gc --benchmark-name=short --benchmark-sort=mean --benchmark-group-by=fullfunc --benchmark-storage=.benchmarks-kivy --benchmark-save=kivy\"\nmarkers = \"incremental: mark a test as incremental.\"\n\n[tool.ruff]\nexclude = [\n    \"__pycache__\",\n    \".tox\",\n    \".git/\",\n    \"doc/\",\n    \"build/\",\n    \".eggs/\",\n    \"venv/\",\n]\nlint.extend-ignore = [\n    \"E402\",\n    \"E722\",\n    \"E731\",\n    \"E741\",\n    \"F401\",\n    \"F841\",\n]\nlint.select = [\n    \"E\",\n    \"F\",\n    \"W\",\n]\n"
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 0.111328125,
          "content": "{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n    \"config:recommended\"\n  ]\n}\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.5576171875,
          "content": "[kivy]\ncython_min=0.29.1\ncython_max=3.0.11\ncython_exclude=\npython_versions=3.9 - 3.13\n\n[coverage:run]\nparallel = True\nbranch = True\nomit =\n    */pyinstaller/*_widget/*\nplugins =\n    kivy.tools.coverage\nconcurrency = thread, multiprocessing\n\n[options]\npython_requires = >=3.9\ninstall_requires =\n    Kivy-Garden>=0.1.4\n    docutils\n    pygments\n    requests\n    filetype\n    kivy_deps.angle~=0.4.0; sys_platform == \"win32\"\n    kivy_deps.sdl2~=0.8.0; sys_platform == \"win32\"\n    kivy_deps.glew~=0.3.1; sys_platform == \"win32\"\n    pypiwin32; sys_platform == \"win32\"\n\n[options.extras_require]\ntuio = oscpy\ndev =\n    pytest>=3.6\n    pytest-cov\n    pytest_asyncio!=0.11.0\n    pytest-timeout\n    pytest-benchmark\n    pyinstaller\n    sphinx~=6.2.1\n    sphinxcontrib-jquery~=4.1\n    kivy_deps.gstreamer_dev~=0.3.3; sys_platform == \"win32\"\n    kivy_deps.sdl2_dev~=0.8.0; sys_platform == \"win32\"\n    kivy_deps.glew_dev~=0.3.1; sys_platform == \"win32\"\n    pre-commit\n    responses\n    ruff>=0.8.3,<1.0.0\nbase =\n    pillow>=9.5.0,<11\nmedia =\n    kivy_deps.gstreamer~=0.3.3; sys_platform == \"win32\"\n    ffpyplayer; sys_platform == \"linux\" or sys_platform == \"darwin\"\nfull =\n    pillow>=9.5.0,<11\n    kivy_deps.gstreamer~=0.3.3; sys_platform == \"win32\"\n    ffpyplayer; sys_platform == \"linux\" or sys_platform == \"darwin\"\ngstreamer =\n    kivy_deps.gstreamer~=0.3.3; sys_platform == \"win32\"\n    # don't use 0.4.0 because it was deleted\nangle =\n    kivy_deps.angle~=0.4.0; sys_platform == \"win32\"\nsdl2 =\n    kivy_deps.sdl2~=0.8.0; sys_platform == \"win32\"\nglew =\n    kivy_deps.glew~=0.3.1; sys_platform == \"win32\"\n\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 50.0234375,
          "content": "#\n# Kivy - Cross-platform UI framework\n# https://kivy.org/\n#\n\nimport sys\nbuild_examples = False\nif \"--build_examples\" in sys.argv:\n    build_examples = True\n    sys.argv.remove(\"--build_examples\")\n\nfrom kivy.utils import pi_version\nfrom copy import deepcopy\nimport os\nfrom os.path import join, dirname, exists, basename, isdir\nfrom os import walk, environ, makedirs\nfrom collections import OrderedDict\nfrom time import sleep\nfrom pathlib import Path\nimport logging\nimport sysconfig\nimport textwrap\nimport tempfile\n\nfrom setuptools import Distribution, Extension, find_packages, setup\nfrom setuptools.command.build_ext import build_ext\n\nif sys.version_info[0] == 2:\n    logging.critical(\n        'Unsupported Python version detected!: Kivy 2.0.0 and higher does not '\n        'support Python 2. Please upgrade to Python 3, or downgrade Kivy to '\n        '1.11.1 - the last Kivy release that still supports Python 2.')\n\n\ndef ver_equal(self, other):\n    return self.version == other\n\n\ndef get_description():\n    with open(join(dirname(__file__), 'README.md'), 'rb') as fileh:\n        return fileh.read().decode(\"utf8\").replace('\\r\\n', '\\n')\n\n\ndef getoutput(cmd, env=None):\n    import subprocess\n    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE,\n                         stderr=subprocess.PIPE, env=env)\n    p.wait()\n    if p.returncode:  # if not returncode == 0\n        print('WARNING: A problem occurred while running {0} (code {1})\\n'\n              .format(cmd, p.returncode))\n        stderr_content = p.stderr.read()\n        if stderr_content:\n            print('{0}\\n'.format(stderr_content))\n        return \"\"\n    return p.stdout.read()\n\n\ndef pkgconfig(*packages, **kw):\n    flag_map = {'-I': 'include_dirs', '-L': 'library_dirs', '-l': 'libraries'}\n    lenviron = None\n\n    if platform == 'win32':\n        pconfig = join(sys.prefix, 'libs', 'pkgconfig')\n        if isdir(pconfig):\n            lenviron = environ.copy()\n            lenviron['PKG_CONFIG_PATH'] = '{};{}'.format(\n                environ.get('PKG_CONFIG_PATH', ''), pconfig)\n\n    if KIVY_DEPS_ROOT and platform != 'win32':\n        lenviron = environ.copy()\n        lenviron[\"PKG_CONFIG_PATH\"] = \"{}:{}:{}\".format(\n            environ.get(\"PKG_CONFIG_PATH\", \"\"),\n            join(\n                KIVY_DEPS_ROOT, \"dist\", \"lib\", \"pkgconfig\"\n            ),\n            join(\n                KIVY_DEPS_ROOT, \"dist\", \"lib64\", \"pkgconfig\"\n            ),\n        )\n\n    cmd = 'pkg-config --libs --cflags {}'.format(' '.join(packages))\n    results = getoutput(cmd, lenviron).split()\n    for token in results:\n        ext = token[:2].decode('utf-8')\n        flag = flag_map.get(ext)\n        if not flag:\n            continue\n        kw.setdefault(flag, []).append(token[2:].decode('utf-8'))\n    return kw\n\n\ndef get_isolated_env_paths():\n    try:\n        # sdl2_dev is installed before setup.py is run, when installing from\n        # source due to pyproject.toml. However, it is installed to a\n        # pip isolated env, which we need to add to compiler\n        import kivy_deps.sdl2_dev as sdl2_dev\n    except ImportError:\n        return [], []\n\n    root = os.path.abspath(join(sdl2_dev.__path__[0], '../../../..'))\n    includes = [join(root, 'Include')] if isdir(join(root, 'Include')) else []\n    libs = [join(root, 'libs')] if isdir(join(root, 'libs')) else []\n    return includes, libs\n\n\ndef check_c_source_compiles(code, include_dirs=None):\n    \"\"\"Check if C code compiles.\n    This function can be used to check if a specific feature is available on\n    the current platform, and therefore enable or disable some modules.\n    \"\"\"\n\n    def get_compiler():\n        \"\"\"Get the compiler instance used by setuptools.\n        This is a bit hacky, but seems the only way to get the compiler instance\n        used by setuptools, without using private APIs or the deprecated\n        distutils module. (See: https://github.com/pypa/setuptools/issues/2806)\n        \"\"\"\n        fake_dist_build_ext = Distribution().get_command_obj(\"build_ext\")\n        fake_dist_build_ext.finalize_options()\n        # register an extension to ensure a compiler is created\n        fake_dist_build_ext.extensions = [Extension(\"ignored\", [\"ignored.c\"])]\n        # disable building fake extensions\n        fake_dist_build_ext.build_extensions = lambda: None\n        # run to populate self.compiler\n        fake_dist_build_ext.run()\n        return fake_dist_build_ext.compiler\n\n    # Create a temporary file which contains the code\n    with tempfile.TemporaryDirectory() as tmpdir:\n        temp_file = os.path.join(tmpdir, \"test.c\")\n        with open(temp_file, \"w\", encoding=\"utf-8\") as tf:\n            tf.write(code)\n        try:\n            get_compiler().compile(\n                [temp_file], extra_postargs=[], include_dirs=include_dirs\n            )\n        except Exception as ex:\n            print(ex)\n            return False\n    return True\n\n\n# -----------------------------------------------------------------------------\n\n# Determine on which platform we are\n\nbuild_examples = build_examples or \\\n    os.environ.get('KIVY_BUILD_EXAMPLES', '0') == '1'\n\nplatform = sys.platform\n\n# Detect Python for android project (http://github.com/kivy/python-for-android)\nndkplatform = environ.get('NDKPLATFORM')\nif ndkplatform is not None and environ.get('LIBLINK'):\n    platform = 'android'\nkivy_ios_root = environ.get('KIVYIOSROOT', None)\nif kivy_ios_root is not None:\n    platform = 'ios'\n# proprietary broadcom video core drivers\nif exists('/opt/vc/include/bcm_host.h'):\n    used_pi_version = pi_version\n    # Force detected Raspberry Pi version for cross-builds, if needed\n    if 'KIVY_RPI_VERSION' in environ:\n        used_pi_version = int(environ['KIVY_RPI_VERSION'])\n    # The proprietary broadcom video core drivers are not available on the\n    # Raspberry Pi 4\n    if (used_pi_version or 4) < 4:\n        platform = 'rpi'\n# use mesa video core drivers\nif environ.get('VIDEOCOREMESA', None) == '1':\n    platform = 'vc'\nmali_paths = (\n    '/usr/lib/arm-linux-gnueabihf/libMali.so',\n    '/usr/lib/arm-linux-gnueabihf/mali-egl/libmali.so',\n    '/usr/local/mali-egl/libmali.so')\nif any((exists(path) for path in mali_paths)):\n    platform = 'mali'\n\n# Needed when cross-compiling\nif environ.get('KIVY_CROSS_PLATFORM'):\n    platform = environ.get('KIVY_CROSS_PLATFORM')\n\n# If the user has specified a KIVY_DEPS_ROOT, use that as the root for\n# (ATM only SDL) dependencies. Otherwise, use the default locations.\nKIVY_DEPS_ROOT = os.environ.get('KIVY_DEPS_ROOT', None)\n\n# if KIVY_DEPS_ROOT is None and platform is linux or darwin show a warning\n# message, because using a system provided SDL2 is not recommended.\n# (will be shown only in verbose mode)\nif KIVY_DEPS_ROOT is None and platform in ('linux', 'darwin'):\n    print(\"###############################################\")\n    print(\"WARNING: KIVY_DEPS_ROOT is not set, using system provided SDL\")\n    print(\"which is not recommended as it may be incompatible with Kivy.\")\n    print(\"Please build dependencies from source via the provided script\")\n    print(\"and set KIVY_DEPS_ROOT to the root of the dependencies directory.\")\n    print(\"###############################################\")\n\n\n# -----------------------------------------------------------------------------\n# Detect options\n#\nc_options = OrderedDict()\nc_options['use_rpi_vidcore_lite'] = platform == 'rpi'\nc_options['use_egl'] = False\nc_options['use_opengl_es2'] = None\nc_options['use_opengl_mock'] = environ.get('READTHEDOCS', None) == 'True'\nc_options['use_sdl2'] = None\nc_options['use_pangoft2'] = None\nc_options['use_ios'] = False\nc_options['use_android'] = False\nc_options['use_mesagl'] = False\nc_options['use_x11'] = False\nc_options['use_wayland'] = False\nc_options['use_gstreamer'] = None\nc_options['use_avfoundation'] = platform in ['darwin', 'ios']\nc_options['use_osx_frameworks'] = platform == 'darwin'\nc_options['use_angle_gl_backend'] = platform in ['darwin', 'ios']\nc_options['debug_gl'] = False\n\n# Set the alpha size, this will be 0 on the Raspberry Pi and 8 on all other\n# platforms, so SDL2 works without X11\nc_options['kivy_sdl_gl_alpha_size'] = 8 if pi_version is None else 0\n\n# now check if environ is changing the default values\nfor key in list(c_options.keys()):\n    ukey = key.upper()\n    if ukey in environ:\n        # kivy_sdl_gl_alpha_size should be an integer, the rest are booleans\n        value = int(environ[ukey])\n        if key != 'kivy_sdl_gl_alpha_size':\n            value = bool(value)\n        print('Environ change {0} -> {1}'.format(key, value))\n        c_options[key] = value\n\nuse_embed_signature = environ.get('USE_EMBEDSIGNATURE', '0') == '1'\nuse_embed_signature = use_embed_signature or bool(\n    platform not in ('ios', 'android'))\n\n# -----------------------------------------------------------------------------\n# We want to be able to install kivy as a wheel without a dependency\n# on cython, but we also want to use cython where possible as a setup\n# time dependency through `pyproject.toml` if building from source.\n\n# There are issues with using cython at all on some platforms;\n# exclude them from using or declaring cython.\n\n# This determines whether Cython specific functionality may be used.\ncan_use_cython = True\n\nif platform in ('ios', 'android'):\n    # NEVER use or declare cython on these platforms\n    print('Not using cython on %s' % platform)\n    can_use_cython = False\n\n\n# -----------------------------------------------------------------------------\n# Setup classes\n\n# the build path where kivy is being compiled\nsrc_path = build_path = dirname(__file__)\nprint(\"Current directory is: {}\".format(os.getcwd()))\nprint(\"Source and initial build directory is: {}\".format(src_path))\n\n# __version__ is imported by exec, but help linter not complain\n__version__ = None\nwith open(join(src_path, 'kivy', '_version.py'), encoding=\"utf-8\") as f:\n    exec(f.read())\n\n\nclass KivyBuildExt(build_ext, object):\n\n    def finalize_options(self):\n        super().finalize_options()\n\n        # Build the extensions in parallel if the options has not been set\n        if hasattr(self, 'parallel') and self.parallel is None:\n            # Use a maximum of 4 cores. If cpu_count returns None, then parallel\n            # build will be disabled\n            self.parallel = min(4, os.cpu_count() or 0)\n            if self.parallel:\n                print('Building extensions in parallel using {} cores'.format(\n                    self.parallel))\n\n        global build_path\n        if (self.build_lib is not None and exists(self.build_lib) and\n                not self.inplace):\n            build_path = self.build_lib\n            print(\"Updated build directory to: {}\".format(build_path))\n\n    def build_extensions(self):\n        # build files\n        config_h_fn = ('include', 'config.h')\n        config_pxi_fn = ('include', 'config.pxi')\n        config_py_fn = ('setupconfig.py', )\n\n        # generate headers\n        config_h = '// Autogenerated file for Kivy C configuration\\n'\n        config_pxi = '# Autogenerated file for Kivy Cython configuration\\n'\n        config_py = '# Autogenerated file for Kivy configuration\\n'\n        config_py += 'CYTHON_MIN = {0}\\nCYTHON_MAX = {1}\\n'.format(\n            repr(MIN_CYTHON_STRING), repr(MAX_CYTHON_STRING))\n        config_py += 'CYTHON_BAD = {0}\\n'.format(repr(', '.join(map(\n            str, CYTHON_UNSUPPORTED))))\n\n        # generate content\n        print('Build configuration is:')\n        for opt, value in c_options.items():\n            # kivy_sdl_gl_alpha_size is already an integer\n            if opt != 'kivy_sdl_gl_alpha_size':\n                value = int(bool(value))\n            print(' * {0} = {1}'.format(opt, value))\n            opt = opt.upper()\n            config_h += '#define __{0} {1}\\n'.format(opt, value)\n            config_pxi += 'DEF {0} = {1}\\n'.format(opt, value)\n            config_py += '{0} = {1}\\n'.format(opt, value)\n        debug = bool(self.debug)\n        print(' * debug = {0}'.format(debug))\n\n        config_pxi += 'DEF DEBUG = {0}\\n'.format(debug)\n        config_py += 'DEBUG = {0}\\n'.format(debug)\n        config_pxi += 'DEF PLATFORM = \"{0}\"\\n'.format(platform)\n        config_py += 'PLATFORM = \"{0}\"\\n'.format(platform)\n        for fn, content in (\n                (config_h_fn, config_h), (config_pxi_fn, config_pxi),\n                (config_py_fn, config_py)):\n            build_fn = expand(build_path, *fn)\n            if self.update_if_changed(build_fn, content):\n                print('Updated {}'.format(build_fn))\n            src_fn = expand(src_path, *fn)\n            if src_fn != build_fn and self.update_if_changed(src_fn, content):\n                print('Updated {}'.format(src_fn))\n\n        c = self.compiler.compiler_type\n        print('Detected compiler is {}'.format(c))\n        if c != 'msvc':\n            for e in self.extensions:\n                e.extra_link_args += ['-lm']\n\n        super().build_extensions()\n\n    def update_if_changed(self, fn, content):\n        need_update = True\n        if exists(fn):\n            with open(fn) as fd:\n                need_update = fd.read() != content\n        if need_update:\n            directory_name = dirname(fn)\n            if not exists(directory_name):\n                makedirs(directory_name)\n            with open(fn, 'w') as fd:\n                fd.write(content)\n        return need_update\n\n\ndef _check_and_fix_sdl2_mixer(f_path):\n    # Between SDL_mixer 2.0.1 and 2.0.4, the included frameworks changed\n    # smpeg2 have been replaced with mpg123, but there is no need to fix.\n    smpeg2_path = (\"{}/Versions/A/Frameworks/smpeg2.framework\"\n                   \"/Versions/A/smpeg2\").format(f_path)\n    if not exists(smpeg2_path):\n        return\n\n    print(\"Check if SDL2_mixer smpeg2 have an @executable_path\")\n    rpath_from = (\"@executable_path/../Frameworks/SDL2.framework\"\n                  \"/Versions/A/SDL2\")\n    rpath_to = \"@rpath/../../../../SDL2.framework/Versions/A/SDL2\"\n    output = getoutput((\"otool -L '{}'\").format(smpeg2_path)).decode('utf-8')\n    if \"@executable_path\" not in output:\n        return\n\n    print(\"WARNING: Your SDL2_mixer version is invalid\")\n    print(\"WARNING: The smpeg2 framework embedded in SDL2_mixer contains a\")\n    print(\"WARNING: reference to @executable_path that will fail the\")\n    print(\"WARNING: execution of your application.\")\n    print(\"WARNING: We are going to change:\")\n    print(\"WARNING: from: {}\".format(rpath_from))\n    print(\"WARNING: to: {}\".format(rpath_to))\n    getoutput(\"install_name_tool -change {} {} {}\".format(\n        rpath_from, rpath_to, smpeg2_path))\n\n    output = getoutput((\"otool -L '{}'\").format(smpeg2_path))\n    if b\"@executable_path\" not in output:\n        print(\"WARNING: Change successfully applied!\")\n        print(\"WARNING: You'll never see this message again.\")\n    else:\n        print(\"WARNING: Unable to apply the changes, sorry.\")\n\n\n# -----------------------------------------------------------------------------\nprint(\"Python path is:\\n{}\\n\".format('\\n'.join(sys.path)))\n# extract version (simulate doc generation, kivy will be not imported)\nenviron['KIVY_DOC_INCLUDE'] = '1'\nimport kivy\n\n# Cython check\n# on python-for-android and kivy-ios, cython usage is external\nfrom kivy.tools.packaging.cython_cfg import get_cython_versions, get_cython_msg\nCYTHON_REQUIRES_STRING, MIN_CYTHON_STRING, MAX_CYTHON_STRING, \\\n    CYTHON_UNSUPPORTED = get_cython_versions()\ncython_min_msg, cython_max_msg, cython_unsupported_msg = get_cython_msg()\n\nif can_use_cython:\n    import Cython\n    from packaging import version\n    print('\\nFound Cython at', Cython.__file__)\n\n    cy_version_str = Cython.__version__\n    cy_ver = version.parse(cy_version_str)\n    print('Detected supported Cython version {}'.format(cy_version_str))\n\n    if cy_ver < version.Version(MIN_CYTHON_STRING):\n        print(cython_min_msg)\n    elif cy_ver in CYTHON_UNSUPPORTED:\n        print(cython_unsupported_msg)\n    elif cy_ver > version.Version(MAX_CYTHON_STRING):\n        print(cython_max_msg)\n    sleep(1)\n\n# extra build commands go in the cmdclass dict {'command-name': CommandClass}\n# see tools.packaging.{platform}.build.py for custom build commands for\n# portable packages. Also e.g. we use build_ext command from cython if its\n# installed for c extensions.\nfrom kivy.tools.packaging.factory import FactoryBuild\ncmdclass = {\n    'build_factory': FactoryBuild,\n    'build_ext': KivyBuildExt}\n\ntry:\n    # add build rules for portable packages to cmdclass\n    if platform == 'win32':\n        from kivy.tools.packaging.win32.build import WindowsPortableBuild\n        cmdclass['build_portable'] = WindowsPortableBuild\n    elif platform == 'darwin':\n        from kivy.tools.packaging.osx.build import OSXPortableBuild\n        cmdclass['build_portable'] = OSXPortableBuild\nexcept ImportError:\n    print('User distribution detected, avoid portable command.')\n\n# Detect which opengl version headers to use\nif platform in ('android', 'darwin', 'ios', 'rpi', 'mali', 'vc'):\n    c_options['use_opengl_es2'] = True\nelif c_options['use_opengl_es2'] is None:\n    c_options['use_opengl_es2'] = \\\n        environ.get('KIVY_GRAPHICS', '').lower() == 'gles'\n\nprint('Using this graphics system: {}'.format(\n    ['OpenGL', 'OpenGL ES 2'][int(c_options['use_opengl_es2'] or False)]))\n\n# check if we are in a kivy-ios build\nif platform == 'ios':\n    print('Kivy-IOS project environment detect, use it.')\n    print('Kivy-IOS project located at {0}'.format(kivy_ios_root))\n    c_options['use_ios'] = True\n    c_options['use_sdl2'] = True\n\nelif platform == 'android':\n    c_options['use_android'] = True\n\n# detect gstreamer, only on desktop\n# works if we forced the options or in autodetection\nif platform not in ('ios', 'android') and (c_options['use_gstreamer']\n                                           in (None, True)):\n    gstreamer_valid = False\n    if c_options['use_osx_frameworks'] and platform == 'darwin':\n        # check the existence of frameworks\n        f_path = '/Library/Frameworks/GStreamer.framework'\n        if not exists(f_path):\n            c_options['use_gstreamer'] = False\n            print('GStreamer framework not found, fallback on pkg-config')\n        else:\n            print('GStreamer framework found')\n            gstreamer_valid = True\n            c_options['use_gstreamer'] = True\n            gst_flags = {\n                'extra_link_args': [\n                    '-F/Library/Frameworks',\n                    '-Xlinker', '-rpath',\n                    '-Xlinker', '/Library/Frameworks',\n                    '-Xlinker', '-headerpad',\n                    '-Xlinker', '190',\n                    '-framework', 'GStreamer'],\n                'include_dirs': [join(f_path, 'Headers')]}\n    elif platform == 'win32':\n        gst_flags = pkgconfig('gstreamer-1.0')\n        if 'libraries' in gst_flags:\n            print('GStreamer found via pkg-config')\n            gstreamer_valid = True\n            c_options['use_gstreamer'] = True\n        else:\n            _includes = get_isolated_env_paths()[0] + [\n                sysconfig.get_path(\"include\")\n            ]\n            for include_dir in _includes:\n                if exists(join(include_dir, 'gst', 'gst.h')):\n                    print('GStreamer found via gst.h')\n                    gstreamer_valid = True\n                    c_options['use_gstreamer'] = True\n                    gst_flags = {\n                        'libraries':\n                            ['gstreamer-1.0', 'glib-2.0', 'gobject-2.0']}\n                    break\n\n    if not gstreamer_valid:\n        # use pkg-config approach instead\n        gst_flags = pkgconfig('gstreamer-1.0')\n        if 'libraries' in gst_flags:\n            print('GStreamer found via pkg-config')\n            c_options['use_gstreamer'] = True\n\n\n# detect SDL2, only on desktop and iOS, or android if explicitly enabled\n# works if we forced the options or in autodetection\nsdl2_flags = {}\nsdl2_source = None\nif platform == 'win32' and c_options['use_sdl2'] is None:\n    c_options['use_sdl2'] = True\n\ncan_autodetect_sdl2 = (\n    platform not in (\"android\",) and c_options[\"use_sdl2\"] is None\n)\nif c_options['use_sdl2'] or can_autodetect_sdl2:\n\n    sdl2_valid = False\n    if c_options['use_osx_frameworks'] and platform == 'darwin':\n        # check the existence of frameworks\n        if KIVY_DEPS_ROOT:\n            default_sdl2_frameworks_search_path = join(\n                KIVY_DEPS_ROOT, \"dist\", \"Frameworks\"\n            )\n        else:\n            default_sdl2_frameworks_search_path = \"/Library/Frameworks\"\n        sdl2_frameworks_search_path = environ.get(\n            \"KIVY_SDL2_FRAMEWORKS_SEARCH_PATH\",\n            default_sdl2_frameworks_search_path\n        )\n        sdl2_valid = True\n\n        sdl2_flags = {\n            'extra_link_args': [\n                '-F{}'.format(sdl2_frameworks_search_path),\n                '-Xlinker', '-rpath',\n                '-Xlinker', sdl2_frameworks_search_path,\n                '-Xlinker', '-headerpad',\n                '-Xlinker', '190'],\n            'include_dirs': [],\n            'extra_compile_args': ['-F{}'.format(sdl2_frameworks_search_path)]\n        }\n\n        for name in ('SDL2', 'SDL2_ttf', 'SDL2_image', 'SDL2_mixer'):\n            f_path = '{}/{}.framework'.format(sdl2_frameworks_search_path, name)\n            if not exists(f_path):\n                print('Missing framework {}'.format(f_path))\n                sdl2_valid = False\n                continue\n            sdl2_flags['extra_link_args'] += ['-framework', name]\n            sdl2_flags['include_dirs'] += [join(f_path, 'Headers')]\n            print('Found sdl2 frameworks: {}'.format(f_path))\n            if name == 'SDL2_mixer':\n                _check_and_fix_sdl2_mixer(f_path)\n\n        if not sdl2_valid:\n            c_options['use_sdl2'] = False\n            print('SDL2 frameworks not found, fallback on pkg-config')\n        else:\n            c_options['use_sdl2'] = True\n            sdl2_source = 'macos-frameworks'\n            print('Activate SDL2 compilation')\n\n    if not sdl2_valid and platform != \"ios\":\n        # use pkg-config approach instead\n        sdl2_flags = pkgconfig('sdl2', 'SDL2_ttf', 'SDL2_image', 'SDL2_mixer')\n        if 'libraries' in sdl2_flags:\n            print('SDL2 found via pkg-config')\n            c_options['use_sdl2'] = True\n            sdl2_source = 'pkg-config'\n\n\n# -----------------------------------------------------------------------------\n# declare flags\n\ndef expand(root, *args):\n    return join(root, 'kivy', *args)\n\n\nclass CythonExtension(Extension):\n\n    def __init__(self, *args, **kwargs):\n        Extension.__init__(self, *args, **kwargs)\n        self.cython_directives = {\n            'c_string_encoding': 'utf-8',\n            'profile': 'USE_PROFILE' in environ,\n            'embedsignature': use_embed_signature,\n            'language_level': 3,\n            'unraisable_tracebacks': True,\n        }\n\n\ndef merge(d1, *args):\n    d1 = deepcopy(d1)\n    for d2 in args:\n        for key, value in d2.items():\n            value = deepcopy(value)\n            if key in d1:\n                d1[key].extend(value)\n            else:\n                d1[key] = value\n    return d1\n\n\ndef determine_base_flags():\n    includes, libs = get_isolated_env_paths()\n\n    flags = {\n        'libraries': [],\n        'include_dirs': [join(src_path, 'kivy', 'include')] + includes,\n        'library_dirs': [] + libs,\n        'extra_link_args': [],\n        'extra_compile_args': []}\n    if c_options['use_ios']:\n        sysroot = environ.get('IOSSDKROOT', environ.get('SDKROOT'))\n        if not sysroot:\n            raise Exception('IOSSDKROOT is not set')\n        flags['include_dirs'] += [sysroot]\n        flags['extra_compile_args'] += ['-isysroot', sysroot]\n        flags['extra_link_args'] += ['-isysroot', sysroot]\n    elif platform.startswith('freebsd'):\n        flags['include_dirs'] += [join(\n            environ.get('LOCALBASE', '/usr/local'), 'include')]\n        flags['library_dirs'] += [join(\n            environ.get('LOCALBASE', '/usr/local'), 'lib')]\n    elif platform == 'darwin' and c_options['use_osx_frameworks']:\n        v = os.uname()\n        if v[2] >= '13.0.0':\n            if 'SDKROOT' in environ:\n                sysroot = join(environ['SDKROOT'], 'System/Library/Frameworks')\n            else:\n                # use xcode-select to search on the right Xcode path\n                # XXX use the best SDK available instead of a specific one\n                import platform as _platform\n                xcode_dev = getoutput('xcode-select -p').splitlines()[0]\n                sdk_mac_ver = '.'.join(_platform.mac_ver()[0].split('.')[:2])\n                print('Xcode detected at {}, and using OS X{} sdk'.format(\n                    xcode_dev, sdk_mac_ver))\n                sysroot = join(\n                    xcode_dev.decode('utf-8'),\n                    'Platforms/MacOSX.platform/Developer/SDKs',\n                    'MacOSX{}.sdk'.format(sdk_mac_ver),\n                    'System/Library/Frameworks')\n        else:\n            sysroot = ('/System/Library/Frameworks/'\n                       'ApplicationServices.framework/Frameworks')\n        flags['extra_compile_args'] += ['-F%s' % sysroot]\n        flags['extra_link_args'] += ['-F%s' % sysroot]\n    elif platform == 'win32':\n        flags['include_dirs'] += [sysconfig.get_path('include')]\n        flags['library_dirs'] += [join(sys.prefix, \"libs\")]\n    return flags\n\n\ndef determine_angle_flags():\n    flags = {'include_dirs': [], 'libraries': []}\n\n    default_include_dir = \"\"\n    default_lib_dir = \"\"\n\n    if KIVY_DEPS_ROOT:\n\n        default_include_dir = os.path.join(KIVY_DEPS_ROOT, \"dist\", \"include\")\n        default_lib_dir = os.path.join(KIVY_DEPS_ROOT, \"dist\", \"lib\")\n\n    kivy_angle_include_dir = environ.get(\n        \"KIVY_ANGLE_INCLUDE_DIR\", default_include_dir\n    )\n    kivy_angle_lib_dir = environ.get(\n        \"KIVY_ANGLE_LIB_DIR\", default_lib_dir\n    )\n\n    if platform == \"darwin\":\n        flags['libraries'] = ['EGL', 'GLESv2']\n        flags['library_dirs'] = [kivy_angle_lib_dir]\n        flags['include_dirs'] = [kivy_angle_include_dir]\n        flags['extra_link_args'] = [\n            \"-Wl,-rpath,{}\".format(kivy_angle_lib_dir)\n        ]\n    elif platform == \"ios\":\n        flags['include_dirs'] = [kivy_angle_include_dir]\n    else:\n        raise Exception(\"ANGLE is not supported on this platform\")\n\n    return flags\n\n\ndef determine_gl_flags():\n    kivy_graphics_include = join(src_path, 'kivy', 'include')\n    flags = {'include_dirs': [kivy_graphics_include], 'libraries': []}\n    base_flags = {'include_dirs': [kivy_graphics_include], 'libraries': []}\n    cross_sysroot = environ.get('KIVY_CROSS_SYSROOT')\n\n    if c_options['use_opengl_mock']:\n        return flags, base_flags\n\n    if c_options['use_angle_gl_backend']:\n        return determine_angle_flags(), base_flags\n\n    if platform == 'win32':\n        flags['libraries'] = ['opengl32', 'glew32']\n    elif platform == 'ios':\n        flags['libraries'] = ['GLESv2']\n        flags['extra_link_args'] = ['-framework', 'OpenGLES']\n    elif platform == 'darwin':\n        flags['extra_link_args'] = ['-framework', 'OpenGL']\n    elif platform.startswith('freebsd'):\n        flags['libraries'] = ['GL']\n    elif platform.startswith('openbsd'):\n        flags['include_dirs'] = ['/usr/X11R6/include']\n        flags['library_dirs'] = ['/usr/X11R6/lib']\n        flags['libraries'] = ['GL']\n    elif platform == 'android':\n        flags['include_dirs'] = [join(ndkplatform, 'usr', 'include')]\n        flags['library_dirs'] = [join(ndkplatform, 'usr', 'lib')]\n        flags['libraries'] = ['GLESv2']\n    elif platform == 'rpi':\n\n        if not cross_sysroot:\n            flags['include_dirs'] = [\n                '/opt/vc/include',\n                '/opt/vc/include/interface/vcos/pthreads',\n                '/opt/vc/include/interface/vmcs_host/linux']\n            flags['library_dirs'] = ['/opt/vc/lib']\n            brcm_lib_files = (\n                '/opt/vc/lib/libbrcmEGL.so',\n                '/opt/vc/lib/libbrcmGLESv2.so')\n\n        else:\n            print(\"KIVY_CROSS_SYSROOT: \" + cross_sysroot)\n            flags['include_dirs'] = [\n                cross_sysroot + '/usr/include',\n                cross_sysroot + '/usr/include/interface/vcos/pthreads',\n                cross_sysroot + '/usr/include/interface/vmcs_host/linux']\n            flags['library_dirs'] = [cross_sysroot + '/usr/lib']\n            brcm_lib_files = (\n                cross_sysroot + '/usr/lib/libbrcmEGL.so',\n                cross_sysroot + '/usr/lib/libbrcmGLESv2.so')\n\n        if all((exists(lib) for lib in brcm_lib_files)):\n            print('Found brcmEGL and brcmGLES library files '\n                  'for rpi platform at ' + dirname(brcm_lib_files[0]))\n            gl_libs = ['brcmEGL', 'brcmGLESv2']\n        else:\n            print(\n                'Failed to find brcmEGL and brcmGLESv2 library files '\n                'for rpi platform, falling back to EGL and GLESv2.')\n            gl_libs = ['EGL', 'GLESv2']\n        flags['libraries'] = ['bcm_host'] + gl_libs\n    elif platform in ['mali', 'vc']:\n        flags['include_dirs'] = ['/usr/include/']\n        flags['library_dirs'] = ['/usr/lib/arm-linux-gnueabihf']\n        flags['libraries'] = ['GLESv2']\n        c_options['use_x11'] = True\n        c_options['use_egl'] = True\n    else:\n        flags['libraries'] = ['GL']\n    return flags, base_flags\n\n\ndef determine_sdl2():\n    flags = {}\n    if not c_options['use_sdl2']:\n        return flags\n\n    # If darwin has already been configured with frameworks, don't\n    # configure sdl2 via libs.\n    # TODO: Move framework configuration here.\n    if sdl2_source == \"macos-frameworks\":\n        return sdl2_flags\n\n    default_sdl2_path = None\n\n    if KIVY_DEPS_ROOT:\n\n        default_sdl2_path = os.pathsep.join(\n            [\n                join(KIVY_DEPS_ROOT, \"dist\", \"lib\"),\n                join(KIVY_DEPS_ROOT, \"dist\", \"lib64\"),\n                join(KIVY_DEPS_ROOT, \"dist\", \"include\", \"SDL2\"),\n            ]\n        )\n\n    kivy_sdl2_path = environ.get('KIVY_SDL2_PATH', default_sdl2_path)\n\n    includes, _ = get_isolated_env_paths()\n\n    # no pkgconfig info, or we want to use a specific sdl2 path, so perform\n    # manual configuration\n    flags['libraries'] = ['SDL2', 'SDL2_ttf', 'SDL2_image', 'SDL2_mixer']\n\n    sdl2_paths = kivy_sdl2_path.split(os.pathsep) if kivy_sdl2_path else []\n\n    if not sdl2_paths:\n        # Try to find sdl2 in default locations if we don't have a custom path\n        sdl2_paths = []\n        for include in includes + [join(sys.prefix, 'include')]:\n            sdl_inc = join(include, 'SDL2')\n            if isdir(sdl_inc):\n                sdl2_paths.append(sdl_inc)\n        sdl2_paths.extend(['/usr/local/include/SDL2', '/usr/include/SDL2'])\n\n    flags['include_dirs'] = sdl2_paths\n    flags['extra_link_args'] = []\n    flags['extra_compile_args'] = []\n    flags['library_dirs'] = (\n        sdl2_paths if sdl2_paths else\n        ['/usr/local/lib/'])\n\n    if kivy_sdl2_path:\n        # If we have a custom path, we need to add the rpath to the linker\n        # so that the libraries can be found and loaded without having to\n        # set LD_LIBRARY_PATH every time.\n        flags[\"extra_link_args\"] = [\n            f\"-Wl,-rpath,{l_path}\"\n            for l_path in sdl2_paths\n            if l_path.endswith(\"lib\")\n        ]\n\n    if sdl2_flags:\n        flags = merge(flags, sdl2_flags)\n\n    # ensure headers for all the SDL2 and sub libraries are available\n    libs_to_check = ['SDL', 'SDL_mixer', 'SDL_ttf', 'SDL_image']\n    can_compile = True\n    for lib in libs_to_check:\n        found = False\n        for d in flags['include_dirs']:\n            fn = join(d, '{}.h'.format(lib))\n            if exists(fn):\n                found = True\n                print('SDL2: found {} header at {}'.format(lib, fn))\n                break\n\n        if not found:\n            print('SDL2: missing sub library {}'.format(lib))\n            can_compile = False\n\n    if not can_compile:\n        c_options['use_sdl2'] = False\n        return {}\n\n    return flags\n\n\nbase_flags = determine_base_flags()\ngl_flags, gl_flags_base = determine_gl_flags()\n\n# -----------------------------------------------------------------------------\n# sources to compile\n# all the dependencies have been found manually with:\n# grep -inr -E '(cimport|include)' kivy/graphics/context_instructions.{pxd,pyx}\ngraphics_dependencies = {\n    'boxshadow.pxd': ['fbo.pxd', 'context_instructions.pxd',\n                      'vertex_instructions.pxd', 'instructions.pxd'],\n    'boxshadow.pyx': ['fbo.pxd', 'context_instructions.pxd',\n                      'instructions.pyx'],\n    'buffer.pyx': ['common.pxi'],\n    'context.pxd': ['instructions.pxd', 'texture.pxd', 'vbo.pxd', 'cgl.pxd'],\n    'cgl.pxd': ['common.pxi', 'config.pxi', 'gl_redirect.h'],\n    'compiler.pxd': ['instructions.pxd'],\n    'compiler.pyx': ['context_instructions.pxd'],\n    'cgl.pyx': ['cgl.pxd'],\n    'cgl_mock.pyx': ['cgl.pxd'],\n    'cgl_sdl2.pyx': ['cgl.pxd'],\n    'cgl_gl.pyx': ['cgl.pxd'],\n    'cgl_glew.pyx': ['cgl.pxd'],\n    'context_instructions.pxd': [\n        'transformation.pxd', 'instructions.pxd', 'texture.pxd'],\n    'fbo.pxd': ['cgl.pxd', 'instructions.pxd', 'texture.pxd'],\n    'fbo.pyx': [\n        'config.pxi', 'opcodes.pxi', 'transformation.pxd', 'context.pxd'],\n    'gl_instructions.pyx': [\n        'config.pxi', 'opcodes.pxi', 'cgl.pxd', 'instructions.pxd'],\n    'instructions.pxd': [\n        'vbo.pxd', 'context_instructions.pxd', 'compiler.pxd', 'shader.pxd',\n        'texture.pxd', '../_event.pxd'],\n    'instructions.pyx': [\n        'config.pxi', 'opcodes.pxi', 'cgl.pxd',\n        'context.pxd', 'common.pxi', 'vertex.pxd', 'transformation.pxd'],\n    'opengl.pyx': [\n        'config.pxi', 'common.pxi', 'cgl.pxd', 'gl_redirect.h'],\n    'opengl_utils.pyx': [\n        'opengl_utils_def.pxi', 'cgl.pxd', ],\n    'shader.pxd': ['cgl.pxd', 'transformation.pxd', 'vertex.pxd'],\n    'shader.pyx': [\n        'config.pxi', 'common.pxi', 'cgl.pxd',\n        'vertex.pxd', 'transformation.pxd', 'context.pxd',\n        'gl_debug_logger.pxi'],\n    'stencil_instructions.pxd': ['instructions.pxd'],\n    'stencil_instructions.pyx': [\n        'config.pxi', 'opcodes.pxi', 'cgl.pxd',\n        'gl_debug_logger.pxi'],\n    'scissor_instructions.pyx': [\n        'config.pxi', 'opcodes.pxi', 'cgl.pxd'],\n    'svg.pyx': ['config.pxi', 'common.pxi', 'texture.pxd', 'instructions.pxd',\n                'vertex_instructions.pxd', 'tesselator.pxd'],\n    'texture.pxd': ['cgl.pxd'],\n    'texture.pyx': [\n        'config.pxi', 'common.pxi', 'opengl_utils_def.pxi', 'context.pxd',\n        'cgl.pxd', 'opengl_utils.pxd',\n        'img_tools.pxi', 'gl_debug_logger.pxi'],\n    'vbo.pxd': ['buffer.pxd', 'cgl.pxd', 'vertex.pxd'],\n    'vbo.pyx': [\n        'config.pxi', 'common.pxi', 'context.pxd',\n        'instructions.pxd', 'shader.pxd', 'gl_debug_logger.pxi'],\n    'vertex.pxd': ['cgl.pxd'],\n    'vertex.pyx': ['config.pxi', 'common.pxi'],\n    'vertex_instructions.pyx': [\n        'config.pxi', 'common.pxi', 'vbo.pxd', 'vertex.pxd',\n        'instructions.pxd', 'vertex_instructions.pxd',\n        'cgl.pxd', 'texture.pxd', 'vertex_instructions_line.pxi'],\n    'vertex_instructions_line.pxi': ['stencil_instructions.pxd']}\n\nsources = {\n    '_event.pyx': merge(base_flags, {'depends': ['properties.pxd']}),\n    '_clock.pyx': {},\n    'weakproxy.pyx': {},\n    'properties.pyx': merge(\n        base_flags, {'depends': ['_event.pxd', '_metrics.pxd']}),\n    '_metrics.pyx': merge(base_flags, {'depends': ['_event.pxd']}),\n    'graphics/buffer.pyx': merge(base_flags, gl_flags_base),\n    'graphics/context.pyx': merge(base_flags, gl_flags_base),\n    'graphics/compiler.pyx': merge(base_flags, gl_flags_base),\n    'graphics/context_instructions.pyx': merge(base_flags, gl_flags_base),\n    'graphics/fbo.pyx': merge(base_flags, gl_flags_base),\n    'graphics/gl_instructions.pyx': merge(base_flags, gl_flags_base),\n    'graphics/instructions.pyx': merge(base_flags, gl_flags_base),\n    'graphics/opengl.pyx': merge(base_flags, gl_flags_base),\n    'graphics/opengl_utils.pyx': merge(base_flags, gl_flags_base),\n    'graphics/shader.pyx': merge(base_flags, gl_flags_base),\n    'graphics/stencil_instructions.pyx': merge(base_flags, gl_flags_base),\n    'graphics/scissor_instructions.pyx': merge(base_flags, gl_flags_base),\n    'graphics/texture.pyx': merge(base_flags, gl_flags_base),\n    'graphics/transformation.pyx': merge(base_flags, gl_flags_base),\n    'graphics/vbo.pyx': merge(base_flags, gl_flags_base),\n    'graphics/vertex.pyx': merge(base_flags, gl_flags_base),\n    'graphics/vertex_instructions.pyx': merge(base_flags, gl_flags_base),\n    'graphics/cgl.pyx': merge(base_flags, gl_flags_base),\n    'graphics/cgl_backend/cgl_mock.pyx': merge(base_flags, gl_flags_base),\n    'graphics/cgl_backend/cgl_gl.pyx': merge(base_flags, gl_flags),\n    'graphics/cgl_backend/cgl_glew.pyx': merge(base_flags, gl_flags),\n    'graphics/cgl_backend/cgl_sdl2.pyx': merge(base_flags, gl_flags_base),\n    'graphics/cgl_backend/cgl_angle.pyx': merge(base_flags, gl_flags),\n    'graphics/cgl_backend/cgl_debug.pyx': merge(base_flags, gl_flags_base),\n    'graphics/egl_backend/egl_angle.pyx': merge(base_flags, gl_flags),\n    'core/text/text_layout.pyx': base_flags,\n    'core/window/window_info.pyx': base_flags,\n    'graphics/tesselator.pyx': merge(base_flags, {\n        'include_dirs': ['kivy/lib/libtess2/Include'],\n        'c_depends': [\n            'lib/libtess2/Source/bucketalloc.c',\n            'lib/libtess2/Source/dict.c',\n            'lib/libtess2/Source/geom.c',\n            'lib/libtess2/Source/mesh.c',\n            'lib/libtess2/Source/priorityq.c',\n            'lib/libtess2/Source/sweep.c',\n            'lib/libtess2/Source/tess.c'\n        ]\n    }),\n    'graphics/svg.pyx': merge(base_flags, gl_flags_base),\n    'graphics/boxshadow.pyx': merge(base_flags, gl_flags_base)\n}\n\nif c_options[\"use_sdl2\"]:\n    sdl2_flags = determine_sdl2()\n\nif c_options['use_sdl2'] and sdl2_flags:\n    sources['graphics/cgl_backend/cgl_sdl2.pyx'] = merge(\n        sources['graphics/cgl_backend/cgl_sdl2.pyx'], sdl2_flags)\n    sdl2_depends = {'depends': ['lib/sdl2.pxi']}\n    for source_file in ('core/window/_window_sdl2.pyx',\n                        'core/image/_img_sdl2.pyx',\n                        'core/text/_text_sdl2.pyx',\n                        'core/audio_output/audio_sdl2.pyx',\n                        'core/clipboard/_clipboard_sdl2.pyx'):\n        sources[source_file] = merge(\n            base_flags, sdl2_flags, sdl2_depends)\n\nif c_options['use_pangoft2'] in (None, True) and platform not in (\n                                      'android', 'ios', 'win32'):\n    pango_flags = pkgconfig('pangoft2')\n    if pango_flags and 'libraries' in pango_flags:\n        print('Pango: pangoft2 found via pkg-config')\n        c_options['use_pangoft2'] = True\n        pango_depends = {'depends': [\n            'lib/pango/pangoft2.pxi',\n            'lib/pango/pangoft2.h']}\n        sources['core/text/_text_pango.pyx'] = merge(\n                base_flags, pango_flags, pango_depends)\n        print(sources['core/text/_text_pango.pyx'])\n\nif platform in ('darwin', 'ios'):\n    # activate ImageIO provider for our core image\n    if platform == 'ios':\n        osx_flags = {'extra_link_args': [\n            '-framework', 'Foundation',\n            '-framework', 'UIKit',\n            '-framework', 'AudioToolbox',\n            '-framework', 'CoreGraphics',\n            '-framework', 'QuartzCore',\n            '-framework', 'ImageIO',\n            '-framework', 'Accelerate']}\n    else:\n        osx_flags = {'extra_link_args': [\n            '-framework', 'ApplicationServices']}\n    osx_flags['extra_compile_args'] = ['-ObjC++']\n    sources['core/image/img_imageio.pyx'] = merge(\n        base_flags, osx_flags)\n\nif c_options['use_avfoundation']:\n    import platform as _platform\n    mac_ver = [int(x) for x in _platform.mac_ver()[0].split('.')[:2]]\n    if mac_ver >= [10, 7] or platform == 'ios':\n        osx_flags = {\n            'extra_link_args': ['-framework', 'AVFoundation'],\n            'extra_compile_args': ['-ObjC++']\n        }\n        sources['core/camera/camera_avfoundation.pyx'] = merge(\n            base_flags, osx_flags)\n    else:\n        print('AVFoundation cannot be used, OSX >= 10.7 is required')\n\nif c_options[\"use_angle_gl_backend\"]:\n\n    # kivy.graphics.egl_backend.egl_angle is always compiled,\n    # but it only acts as a proxy to the real implementation.\n\n    if platform in (\"darwin\", \"ios\"):\n\n        sources[\"graphics/egl_backend/egl_angle_metal.pyx\"] = merge(\n            base_flags,\n            merge(\n                gl_flags,\n                {\n                    \"extra_compile_args\": [\"-ObjC++\"],\n                }\n            )\n        )\n        sources[\"graphics/egl_backend/egl_angle.pyx\"] = merge(\n            sources[\"graphics/egl_backend/egl_angle.pyx\"],\n            {\n                \"extra_compile_args\": [\"-ObjC++\"],\n            }\n        )\n\nif c_options['use_rpi_vidcore_lite']:\n\n    # DISPMANX is only available on old versions of Raspbian (Buster).\n    # For this reason, we need to be sure that EGL_DISPMANX_* is available\n    # before compiling the vidcore_lite module, even if we're on a RPi.\n    HAVE_DISPMANX = check_c_source_compiles(\n        textwrap.dedent(\n            \"\"\"\n        #include <bcm_host.h>\n        #include <EGL/eglplatform.h>\n        int main(int argc, char **argv) {\n            EGL_DISPMANX_WINDOW_T window;\n            bcm_host_init();\n        }\n        \"\"\"\n        ),\n        include_dirs=gl_flags[\"include_dirs\"],\n    )\n    if HAVE_DISPMANX:\n        sources['lib/vidcore_lite/egl.pyx'] = merge(\n            base_flags, gl_flags)\n        sources['lib/vidcore_lite/bcm.pyx'] = merge(\n            base_flags, gl_flags)\n\nif c_options['use_x11']:\n    libs = ['Xrender', 'X11']\n    if c_options['use_egl']:\n        libs += ['EGL']\n    else:\n        libs += ['GL']\n    sources['core/window/window_x11.pyx'] = merge(\n        base_flags, gl_flags, {\n            # FIXME add an option to depend on them but not compile them\n            # cause keytab is included in core, and core is included in\n            # window_x11\n            #\n            # 'depends': [\n            #    'core/window/window_x11_keytab.c',\n            #    'core/window/window_x11_core.c'],\n            'libraries': libs})\n\nif c_options['use_gstreamer']:\n    sources['lib/gstplayer/_gstplayer.pyx'] = merge(\n        base_flags, gst_flags, {\n            'depends': ['lib/gstplayer/_gstplayer.h']})\n\n# -----------------------------------------------------------------------------\n# extension modules\n\n\ndef get_dependencies(name, deps=None):\n    if deps is None:\n        deps = []\n    for dep in graphics_dependencies.get(name, []):\n        if dep not in deps:\n            deps.append(dep)\n            get_dependencies(dep, deps)\n    return deps\n\n\ndef resolve_dependencies(fn, depends):\n    fn = basename(fn)\n    deps = []\n    get_dependencies(fn, deps)\n    get_dependencies(fn.replace('.pyx', '.pxd'), deps)\n\n    deps_final = []\n    paths_to_test = ['graphics', 'include']\n    for dep in deps:\n        found = False\n        for path in paths_to_test:\n            filename = expand(src_path, path, dep)\n            if exists(filename):\n                deps_final.append(filename)\n                found = True\n                break\n        if not found:\n            print('ERROR: Dependency for {} not resolved: {}'.format(\n                fn, dep\n            ))\n\n    return deps_final\n\n\ndef get_extensions_from_sources(sources):\n\n    def _get_cythonized_source_extension(cython_file: str, flags: dict) -> str:\n        # The cythonized file can be either a .c or .cpp file\n        # depending on the language tag in the .pyx file, or the\n        # flag passed to the extension.\n\n        # If the language tag or the flag is not set, we assume\n        # the file is a .c file.\n\n        def _to_extension(language: str) -> str:\n            return \"cpp\" if language == \"c++\" else \"c\"\n\n        if \"language\" in flags:\n            return _to_extension(flags[\"language\"])\n\n        with open(cython_file, \"r\", encoding=\"utf-8\") as _source_file:\n            for line in _source_file:\n\n                line = line.lstrip()\n                if not line:\n                    continue\n                if line[0] != \"#\":\n                    break\n\n                line = line[1:].lstrip()\n                if not line.startswith(\"distutils:\"):\n                    continue\n\n                distutils_settings_key, _, distutils_settings_value = [\n                    s.strip() for s in line[len(\"distutils:\"):].partition(\"=\")\n                ]\n                if distutils_settings_key == \"language\":\n                    return _to_extension(distutils_settings_value)\n\n        return _to_extension(\"c\")\n\n    ext_modules = []\n    if environ.get('KIVY_FAKE_BUILDEXT'):\n        print('Fake build_ext asked, will generate only .h/.c')\n        return ext_modules\n    for pyx, flags in sources.items():\n        is_graphics = pyx.startswith('graphics')\n        pyx_path = expand(src_path, pyx)\n        depends = [expand(src_path, x) for x in flags.pop('depends', [])]\n        c_depends = [expand(src_path, x) for x in flags.pop('c_depends', [])]\n        if not can_use_cython:\n            # can't use cython, so use the .c or .cpp files instead.\n            _ext = _get_cythonized_source_extension(pyx_path, flags)\n            pyx_path = f\"{pyx_path[:-4]}.{_ext}\"\n        if is_graphics:\n            depends = resolve_dependencies(pyx_path, depends)\n        f_depends = [x for x in depends if x.rsplit('.', 1)[-1] in (\n            'c', 'cpp', 'm')]\n        module_name = '.'.join(['kivy'] + pyx[:-4].split('/'))\n        flags_clean = {'depends': depends}\n        for key, value in flags.items():\n            if len(value):\n                flags_clean[key] = value\n        ext_modules.append(CythonExtension(\n            module_name, [pyx_path] + f_depends + c_depends, **flags_clean))\n    return ext_modules\n\n\next_modules = get_extensions_from_sources(sources)\n\n\n# -----------------------------------------------------------------------------\n# automatically detect data files\nsplit_examples = int(environ.get('KIVY_SPLIT_EXAMPLES', '0'))\ndata_file_prefix = 'share/kivy-'\nexamples = {}\nexamples_allowed_ext = ('readme', 'py', 'wav', 'png', 'jpg', 'svg', 'json',\n                        'avi', 'gif', 'txt', 'ttf', 'obj', 'mtl', 'kv', 'mpg',\n                        'glsl', 'zip')\nfor root, subFolders, files in walk('examples'):\n    for fn in files:\n        ext = fn.split('.')[-1].lower()\n        if ext not in examples_allowed_ext:\n            continue\n        filename = join(root, fn)\n        directory = '%s%s' % (data_file_prefix, dirname(filename))\n        if directory not in examples:\n            examples[directory] = []\n        examples[directory].append(filename)\n\nbinary_deps = []\nbinary_deps_path = join(src_path, 'kivy', 'binary_deps')\nif isdir(binary_deps_path):\n    for root, dirnames, filenames in walk(binary_deps_path):\n        for fname in filenames:\n            binary_deps.append(\n                join(root.replace(binary_deps_path, 'binary_deps'), fname))\n\n\ndef glob_paths(*patterns, excludes=('.pyc', )):\n    files = []\n    base = Path(join(src_path, 'kivy'))\n\n    for pat in patterns:\n        for f in base.glob(pat):\n            if f.suffix in excludes:\n                continue\n            files.append(str(f.relative_to(base)))\n    return files\n\n\n# -----------------------------------------------------------------------------\n# setup !\nif not build_examples:\n    setup(\n        name='Kivy',\n        version=__version__,\n        author='Kivy Team and other contributors',\n        author_email='kivy-dev@googlegroups.com',\n        url='http://kivy.org',\n        project_urls={\n            'Source': 'https://github.com/kivy/kivy',\n            'Documentation': 'https://kivy.org/doc/stable/',\n            'Bug Reports': \"https://github.com/kivy/kivy/issues\",\n        },\n        license='MIT',\n        description=(\n            'An open-source Python framework for developing '\n            'GUI apps that work cross-platform, including '\n            'desktop, mobile and embedded platforms.'),\n        long_description=get_description(),\n        long_description_content_type='text/markdown',\n        ext_modules=ext_modules,\n        cmdclass=cmdclass,\n        packages=find_packages(include=['kivy*']),\n        package_dir={'kivy': 'kivy'},\n        package_data={\n            'kivy':\n                glob_paths('*.pxd', '*.pxi') +\n                glob_paths('**/*.pxd', '**/*.pxi') +\n                glob_paths('data/**/*.*') +\n                glob_paths('include/**/*.*') +\n                glob_paths('tools/**/*.*', excludes=('.pyc', '.enc')) +\n                glob_paths('graphics/**/*.h') +\n                glob_paths('tests/**/*.*') +\n                [\n                    'setupconfig.py',\n                ] + binary_deps\n        },\n        data_files=[] if split_examples else list(examples.items()),\n        classifiers=[\n            'Development Status :: 5 - Production/Stable',\n            'Environment :: MacOS X',\n            'Environment :: Win32 (MS Windows)',\n            'Environment :: X11 Applications',\n            'Intended Audience :: Developers',\n            'Intended Audience :: End Users/Desktop',\n            'Intended Audience :: Information Technology',\n            'Intended Audience :: Science/Research',\n            'License :: OSI Approved :: MIT License',\n            'Natural Language :: English',\n            'Operating System :: MacOS :: MacOS X',\n            'Operating System :: Microsoft :: Windows',\n            'Operating System :: POSIX :: BSD :: FreeBSD',\n            'Operating System :: POSIX :: Linux',\n            'Programming Language :: Python :: 3.9',\n            'Programming Language :: Python :: 3.10',\n            'Programming Language :: Python :: 3.11',\n            'Programming Language :: Python :: 3.12',\n            'Programming Language :: Python :: 3.13',\n            'Topic :: Artistic Software',\n            'Topic :: Games/Entertainment',\n            'Topic :: Multimedia :: Graphics :: 3D Rendering',\n            'Topic :: Multimedia :: Graphics :: Capture :: Digital Camera',\n            'Topic :: Multimedia :: Graphics :: Presentation',\n            'Topic :: Multimedia :: Graphics :: Viewers',\n            'Topic :: Multimedia :: Sound/Audio :: Players :: MP3',\n            'Topic :: Multimedia :: Video :: Display',\n            'Topic :: Scientific/Engineering :: Human Machine Interfaces',\n            'Topic :: Scientific/Engineering :: Visualization',\n            ('Topic :: Software Development :: Libraries :: '\n             'Application Frameworks'),\n            'Topic :: Software Development :: User Interfaces'])\nelse:\n    setup(\n        name='Kivy-examples',\n        version=__version__,\n        author='Kivy Team and other contributors',\n        author_email='kivy-dev@googlegroups.com',\n        url='http://kivy.org',\n        license='MIT',\n        description=('Kivy examples.'),\n        long_description_content_type='text/markdown',\n        long_description=get_description(),\n        data_files=list(examples.items()))\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}