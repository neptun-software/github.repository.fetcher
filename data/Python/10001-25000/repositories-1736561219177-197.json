{
  "metadata": {
    "timestamp": 1736561219177,
    "page": 197,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ansible/awx",
      "stars": 14218,
      "defaultBranch": "devel",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.955078125,
          "content": "---\n\ncodecov:\n  notify:\n    after_n_builds: 6  # Number of test matrix+lint jobs uploading coverage\n    wait_for_ci: false\n\n  require_ci_to_pass: false\n\n  token: >-  # repo-scoped, upload-only, needed for stability in PRs from forks\n    2b8c7a7a-7293-4a00-bf02-19bd55a1389b\n\ncomment:\n  require_changes: true\n\ncoverage:\n  range: 100..100\n  status:\n    patch:\n      default:\n        target: 100%\n      pytest:\n        target: 100%\n        flags:\n          - pytest\n      typing:\n        flags:\n          - MyPy\n    project:\n      default:\n        target: 100%\n      lib:\n        flags:\n          - pytest\n        paths:\n          - awx/\n        target: 75%\n      tests:\n        flags:\n          - pytest\n        paths:\n          - tests/\n          - >-\n            **/test/\n          - >-\n            **/tests/\n          - >-\n            **/test/**\n          - >-\n            **/tests/**\n        target: 95%\n      typing:\n        flags:\n          - MyPy\n        target: 100%\n\n...\n"
        },
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.5263671875,
          "content": "[report]\n# Regexes for lines to exclude from consideration\nexclude_also =\n    # Don't complain about missing debug-only code:\n    def __repr__\n    if self\\.debug\n\n    # Don't complain if tests don't hit defensive assertion code:\n    raise AssertionError\n    raise NotImplementedError\n\n    # Don't complain if non-runnable code isn't run:\n    if 0:\n    if __name__ == .__main__.:\n\n    ^\\s*@pytest\\.mark\\.xfail\n\n[run]\nbranch = True\nomit =\n    awx/main/migrations/*\nsource =\n    .\nsource_pkgs =\n    awx\n\n[xml]\noutput = ./reports/coverage.xml\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.015625,
          "content": "Dockerfile\n.git\n"
        },
        {
          "name": ".env",
          "type": "blob",
          "size": 0.07421875,
          "content": "PYTHONUNBUFFERED=true\nSELENIUM_DOCKER_TAG=latest\nCOMPOSE_PROJECT_NAME=tools\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.1279296875,
          "content": "# Ignore generated schema\nswagger.json\nschema.json\nreference-schema.json\n\n# Tags\n.tags\n.tags1\n\n# User level pre-commit hooks\npre-commit-user\n\n# Tower\nawx-dev\nawx/settings/local_*.py*\nawx/*.sqlite3\nawx/*.sqlite3_*\nawx/job_status\nawx/projects\nawx/job_output\nawx/public/media\nawx/public/static\nawx/main/fixtures\nawx/*.log\ntower/tower_warnings.log\ncelerybeat-schedule\nrsyslog.pid\ntools/docker-compose/ansible/awx_dump.sql\ntools/docker-compose/Dockerfile\ntools/docker-compose/_build\ntools/docker-compose/_sources\ntools/docker-compose/overrides/\ntools/docker-compose-minikube/_sources\n\n!tools/docker-compose/editable_dependencies\ntools/docker-compose/editable_dependencies/*\n!tools/docker-compose/editable_dependencies/README.md\n!tools/docker-compose/editable_dependencies/install.sh\n\n# Tower setup playbook testing\nsetup/test/roles/postgresql\n**/provision_docker\n\n# Python & setuptools\n__pycache__\n/build\n/deb-build\n/reprepro\n/rpm-build\n/tar-build\n/setup-bundle-build\n/dist\n/*.egg-info\n*.py[c,o]\n/.eggs\n\n# JavaScript\n/Gruntfile.js\n/Brocfile.js\n/bower.json\n/testem.yml\n**/coverage\n/.istanbul.yml\n**/node_modules/**\n/tmp\n**/npm-debug.log*\n\n# Testing\n.cache\n.coverage\n.tox\ncoverage.xml\nhtmlcov\npep8.txt\nscratch\ntestem.log\nawx/awx_test.sqlite3-journal\n.pytest_cache/\n\n# Mac OS X\n*.DS_Store\n\n# VSCode\n.vscode/\n\n# Editors\n*.sw[poj]\n*~\n\n# Vagrant\n/Vagrantfile\ntools/vagrant/local.yml\n.vagrant*\n\n# Virtualbox\nansible-tower-*-ova\nansible-tower-*.box\n\n# Setup\nsetup.log\nbackup.log\nrestore.log\nsetup/tower_setup_conf.yml\nsetup/setup.log\nsetup/inventory\ntower-backup-*\n\n# Ansible\n**/*.retry\n\n# Other\n.tower_cycle\nenv/*\nnohup.out\nreports\n*.bak\n*.bak[0-9]\n*.dot\n*.log\n*.log.[0-9]\n*.results\nlocal/\n*.mo\nrequirements/vendor\n.i18n_built\n.idea/*\n*credentials*.y*ml*\n\n# AWX python libs populated by requirements.txt\nawx/lib/.deps_built\nawx/lib/site-packages\nvenv/*\nuse_dev_supervisor.txt\n\n\n# Ansible module tests\n/awx_collection_test_venv/\n/awx_collection/*.tar.gz\n/sanity/\n/awx_collection_build/\n\n.idea/*\n*.unison.tmp\n*.#\n/_build/\n/_build_kube_dev/\n/Dockerfile\n/Dockerfile.dev\n/Dockerfile.kube-dev\n\nawx/ui/src\nawx/ui/build\n\n# Docs build stuff\ndocs/docsite/build/\n_readthedocs/\n\n# Pyenv\n.python-version\n"
        },
        {
          "name": ".gitleaks.toml",
          "type": "blob",
          "size": 0.1484375,
          "content": "[allowlist]\ndescription = \"Documentation contains example secrets and passwords\"\npaths = [\n  \"docs/docsite/rst/administration/oauth2_token_auth.rst\",\n]\n"
        },
        {
          "name": ".pip-tools.toml",
          "type": "blob",
          "size": 0.09375,
          "content": "[tool.pip-tools]\nresolver = \"backtracking\"\nallow-unsafe = true\nstrip-extras = true\nquiet = true\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.396484375,
          "content": "# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: >-\n      3.11\n  commands:\n    - pip install --user tox\n    - python3 -m tox -e docs --notest -v\n    - python3 -m tox -e docs --skip-pkg-install -q\n    - mkdir -p _readthedocs/html/\n    - mv docs/docsite/build/html/* _readthedocs/html/\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": ".yamllint",
          "type": "blob",
          "size": 0.361328125,
          "content": "---\nignore: |\n  .github\n  .tox\n  awx/main/tests/data/inventory/plugins/**\n  # vault files\n  awx/main/tests/data/ansible_utils/playbooks/valid/vault.yml\n  tools/docker-compose/_sources\n  # django template files\n  awx/api/templates/instance_install_bundle/**\n  .readthedocs.yaml\n  tools/loki\n  tools/otel\n\nextends: default\n\nrules:\n  line-length: disable\n  truthy: disable\n"
        },
        {
          "name": "API_STANDARDS.md",
          "type": "blob",
          "size": 2.49609375,
          "content": "Coding Standards and Practices\n==============================\n\nThis is not meant to be a style document so much as a practices document for ensuring performance and convention in the AWX API.\n\nPaginate Everything\n===================\n\nAnything that returns a collection must be paginated.\n\nAssume large data sets\n======================\n\nDon't test exclusively with small data.  Assume 1000-10000 hosts in all operations, with years of event data.\n\nSome of our users have 30,000 machines they manage.\n\nAPI performance\n===============\n\nIn general, the expected response time for any API call is something like 1/4 of a second or less.  Signs of slow API\nperformance should be regularly checked, particularly for missing indexes.\n\nMissing Indexes\n===============\n\nAny filters the UI uses should be indexed.\n\nMigrations\n==========\n\nAlways think about any existing data when adding any new fields.  It's ok to wait in upgrade time to get the database to be \nconsistent.\n\nLimit Queries\n=============\n\nThe number of queries made should be constant time and must not vary with the size of the result set.\n\nConsider RBAC\n=============\n\nThe returns of all collections must be filtered by who has access to view them, without exception\n\nDiscoverability\n===============\n\nAll API endpoints must be able to be traversed from \"/\", and have comments, where possible, explaining their purpose\n\nFriendly Comments\n=================\n\nAll API comments are exposed by the API browser and must be fit for customers.   Avoid jokes in API comments and error\nmessages, as well as FIXME comments in places that the API will display.\n\nUI Sanity\n=========\n\nWhere possible the API should provide API endpoints that feed raw data into the UI, the UI should not have to do lots of\ndata transformations, as it is going to be less responsive and able to do these things.\n\nWhen requiring a collection of times of size N, the UI must not make any extra API queries for each item in the result set\n\nEffective Usage of Query Sets\n=============================\n\nThe system must return Django result sets rather than building JSON in memory in nearly all cases.  Use things like\nexclude and joins, and let the database do the work.\n\nSerializers\n===========\n\nNo database queries may be made in serializers because these are executed once per item, rather than paginated.\n\nREST verbs\n==========\n\nREST verbs should be RESTy.  Don't use GETs to do things that should be a PUT or POST.\n\nUnit tests\n==========\n\nEvery URL/route must have unit test coverage.  Consider both positive and negative tests.\n\n\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.2958984375,
          "content": "# Changelog\n\n**Note:** This file is deprecated and will be removed at some point in a future release.\n\nStarting with AWX 20, release notes are published to [GitHub Releases](https://github.com/ansible/awx/releases).\n\nFor older release notes, see https://github.com/ansible/awx/blob/19.3.0/CHANGELOG.md.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 10.513671875,
          "content": "# AWX\n\nHi there! We're excited to have you as a contributor.\n\nHave questions about this document or anything not covered here? Create a topic using the [AWX tag on the Ansible Forum](https://forum.ansible.com/tag/awx).\n\n## Table of contents\n\n- [Things to know prior to submitting code](#things-to-know-prior-to-submitting-code)\n- [Setting up your development environment](#setting-up-your-development-environment)\n  - [Prerequisites](#prerequisites)\n    - [Docker](#docker)\n    - [Docker compose](#docker-compose)\n    - [Frontend Development](#frontend-development)\n  - [Build and Run the Development Environment](#build-and-run-the-development-environment)\n    - [Fork and clone the AWX repo](#fork-and-clone-the-awx-repo)\n  - [Building API Documentation](#building-api-documentation)\n  - [Accessing the AWX web interface](#accessing-the-awx-web-interface)\n  - [Purging containers and images](#purging-containers-and-images)\n  - [Pre commit hooks](#pre-commit-hooks)\n- [What should I work on?](#what-should-i-work-on)\n  - [Translations](#translations)\n- [Submitting Pull Requests](#submitting-pull-requests)\n- [Reporting Issues](#reporting-issues)\n- [Getting Help](#getting-help)\n\n## Things to know prior to submitting code\n\n- All code submissions are done through pull requests against the `devel` branch.\n- You must use `git commit --signoff` for any commit to be merged, and agree that usage of --signoff constitutes agreement with the terms of [DCO 1.1](./DCO_1_1.md).\n- Take care to make sure no merge commits are in the submission, and use `git rebase` vs `git merge` for this reason.\n  - If collaborating with someone else on the same branch, consider using `--force-with-lease` instead of `--force`. This will prevent you from accidentally overwriting commits pushed by someone else. For more information, see [git push docs](https://git-scm.com/docs/git-push#git-push---force-with-leaseltrefnamegt).\n- If submitting a large code change, it's a good idea to create a [forum topic tagged with 'awx'](https://forum.ansible.com/tag/awx), and talk about what you would like to do or add first. This not only helps everyone know what's going on, it also helps save time and effort, if the community decides some changes are needed.\n- We ask all of our community members and contributors to adhere to the [Ansible code of conduct](http://docs.ansible.com/ansible/latest/community/code_of_conduct.html). If you have questions, or need assistance, please reach out to our community team at [codeofconduct@ansible.com](mailto:codeofconduct@ansible.com)\n\n## Setting up your development environment\n\nThe AWX development environment workflow and toolchain uses Docker and the docker-compose tool, to provide dependencies, services, and databases necessary to run all of the components. It also bind-mounts the local source tree into the development container, making it possible to observe and test changes in real time.\n\n### Prerequisites\n\n#### Docker\n\nPrior to starting the development services, you'll need `docker` and `docker-compose`. On Linux, you can generally find these in your distro's packaging, but you may find that Docker themselves maintain a separate repo that tracks more closely to the latest releases.\n\nFor macOS and Windows, we recommend [Docker for Mac](https://www.docker.com/docker-mac) and [Docker for Windows](https://www.docker.com/docker-windows) respectively.\n\nFor Linux platforms, refer to the following from Docker:\n\n- **Fedora** - https://docs.docker.com/engine/installation/linux/docker-ce/fedora/\n\n- **CentOS** - https://docs.docker.com/engine/installation/linux/docker-ce/centos/\n\n- **Ubuntu** - https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/\n\n- **Debian** - https://docs.docker.com/engine/installation/linux/docker-ce/debian/\n\n- **Arch** - https://wiki.archlinux.org/index.php/Docker\n\n#### Docker Compose\n\nIf you're not using Docker for Mac, or Docker for Windows, you may need, or choose to, install the `docker-compose` Python module separately.\n\n```bash\n(host)$ pip3 install docker-compose\n```\n\n#### Frontend Development\n\nSee [the ansible-ui development documentation](https://github.com/ansible/ansible-ui/blob/main/CONTRIBUTING.md).\n\n#### Fork and clone the AWX repo\n\nIf you have not done so already, you'll need to fork the AWX repo on GitHub. For more on how to do this, see [Fork a Repo](https://help.github.com/articles/fork-a-repo/).\n\n### Build and Run the Development Environment\n\nSee the [README.md](./tools/docker-compose/README.md) for docs on how to build the awx_devel image and run the development environment.\n\n### Building API Documentation\n\nAWX includes support for building [Swagger/OpenAPI documentation](https://swagger.io). To build the documentation locally, run:\n\n```bash\n(container)/awx_devel$ make swagger\n```\n\nThis will write a file named `swagger.json` that contains the API specification in OpenAPI format. A variety of online tools are available for translating this data into more consumable formats (such as HTML). http://editor.swagger.io is an example of one such service.\n\n### Accessing the AWX web interface\n\nYou can now log into the AWX web interface at [https://localhost:8043](https://localhost:8043), and access the API directly at [https://localhost:8043/api/](https://localhost:8043/api/).\n\n[Create an admin user](./tools/docker-compose/README.md#create-an-admin-user) if needed.\n\n### Purging containers and images\n\nWhen necessary, remove any AWX containers and images by running the following:\n\n```bash\n(host)$ make docker-clean\n```\n\n### Pre commit hooks\n\nWhen you attempt to perform a `git commit` there will be a pre-commit hook that gets run before the commit is allowed to your local repository. For example, python's [black](https://pypi.org/project/black/) will be run to test the formatting of any python files.\n\nWhile you can use environment variables to skip the pre-commit hooks GitHub will run similar tests and prevent merging of PRs if the tests do not pass.\n\n If you would like to add additional commit hooks for your own usage you can create a directory in the root of the repository called `pre-commit-user`. Any executable file in that directory will be executed as part of the pre-commit hooks. If any of the pre-commit checks fail the commit will be halted. For your convenience in user scripts, a variable called `CHANGED_FILES` will be set with any changed files present in the commit.\n\n## What should I work on?\n\nWe have a [\"good first issue\" label](https://github.com/ansible/awx/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22) we put on some issues that might be a good starting point for new contributors.\n\nFixing bugs and updating the documentation are always appreciated, so reviewing the backlog of issues is always a good place to start.\n\nFor feature work, take a look at the current [Enhancements](https://github.com/ansible/awx/issues?q=is%3Aissue+is%3Aopen+label%3Atype%3Aenhancement).\n\nIf it has someone assigned to it then that person is the person responsible for working the enhancement. If you feel like you could contribute then reach out to that person.\n\n**NOTES**\n\n> Issue assignment will only be done for maintainers of the project. If you decide to work on an issue, please feel free to add a comment in the issue to let others know that you are working on it; but know that we will accept the first pull request from whomever is able to fix an issue. Once your PR is accepted we can add you as an assignee to an issue upon request.\n\n\n> If you work in a part of the codebase that is going through active development, your changes may be rejected, or you may be asked to `rebase`. A good idea before starting work is to have a discussion with us in the [Ansible Forum](https://forum.ansible.com/tag/awx).\n\n> If you're planning to develop features or fixes for the UI, please review the [UI Developer doc](https://github.com/ansible/ansible-ui/blob/main/CONTRIBUTING.md).\n\n### Translations\n\nAt this time we do not accept PRs for adding additional language translations as we have an automated process for generating our translations. This is because translations require constant care as new strings are added and changed in the code base. Because of this the .po files are overwritten during every translation release cycle. We also can't support a lot of translations on AWX as its an open source project and each language adds time and cost to maintain. If you would like to see AWX translated into a new language please create an issue and ask others you know to upvote the issue. Our translation team will review the needs of the community and see what they can do around supporting additional language.\n\nIf you find an issue with an existing translation, please see the [Reporting Issues](#reporting-issues) section to open an issue and our translation team will work with you on a resolution.\n\n\n## Submitting Pull Requests\n\nFixes and Features for AWX will go through the Github pull request process. Submit your pull request (PR) against the `devel` branch.\n\nHere are a few things you can do to help the visibility of your change, and increase the likelihood that it will be accepted:\n\n- No issues when running linters/code checkers\n  - Python: black: `(container)/awx_devel$ make black`\n- No issues from unit tests\n  - Python: py.test: `(container)/awx_devel$ make test`\n- Write tests for new functionality, update/add tests for bug fixes\n- Make the smallest change possible\n- Write good commit messages. See [How to write a Git commit message](https://chris.beams.io/posts/git-commit/).\n\nIt's generally a good idea to discuss features with us first by engaging on the [Ansible Forum](https://forum.ansible.com/tag/awx).\n\nWe like to keep our commit history clean, and will require resubmission of pull requests that contain merge commits. Use `git pull --rebase`, rather than\n`git pull`, and `git rebase`, rather than `git merge`.\n\nSometimes it might take us a while to fully review your PR. We try to keep the `devel` branch in good working order, and so we review requests carefully. Please be patient.\n\nWhen your PR is initially submitted the checks will not be run until a maintainer allows them to be. Once a maintainer has done a quick review of your work the PR will have the linter and unit tests run against them via GitHub Actions, and the status reported in the PR.\n\n## Reporting Issues\n\nWe welcome your feedback, and encourage you to file an issue when you run into a problem. But before opening a new issues, we ask that you please view our [Issues guide](./ISSUES.md).\n\n## Getting Help\n\nIf you require additional assistance, please submit your question to the [Ansible Forum](https://forum.ansible.com/tag/awx).\n\nFor extra information on debugging tools, see [Debugging](./docs/debugging/).\n"
        },
        {
          "name": "DATA_MIGRATION.md",
          "type": "blob",
          "size": 0.44140625,
          "content": "# Migrating Data Between AWX Installations\n\n## Introduction\n\nEarly versions of AWX did not support seamless upgrades between major versions and required the use of a backup and restore tool to perform upgrades.\n\nAs of version 18.0, `awx-operator` is the preferred install/upgrade method. Users who wish to upgrade modern AWX installations should follow the instructions at:\n\nhttps://github.com/ansible/awx-operator/blob/devel/docs/upgrade/upgrading.md\n"
        },
        {
          "name": "DCO_1_1.md",
          "type": "blob",
          "size": 1.58203125,
          "content": "DCO\n===\n\nAll contributors must use `git commit --signoff` for any\ncommit to be merged, and agree that usage of --signoff constitutes\nagreement with the terms of DCO 1.1, which appears below:\n\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 2.2119140625,
          "content": "Table of Contents\n=================\n\n   * [Installing AWX](#installing-awx)\n      * [The AWX Operator](#the-awx-operator)\n   * [Installing the AWX CLI](#installing-the-awx-cli)\n      * [Building the CLI Documentation](#building-the-cli-documentation)\n\n\n# Installing AWX\n\n:warning: NOTE |\n--- |\nIf you're installing an older release of AWX (prior to 18.0), these instructions have changed.  Take a look at your version specific instructions, e.g., for AWX 17.0.1, see: [https://github.com/ansible/awx/blob/17.0.1/INSTALL.md](https://github.com/ansible/awx/blob/17.0.1/INSTALL.md)\nIf you're attempting to migrate an older Docker-based AWX installation, see: [Migrating Data from Local Docker](https://github.com/ansible/awx/blob/devel/tools/docker-compose/docs/data_migration.md) |\n\n## The AWX Operator\n\nStarting in version 18.0, the [AWX Operator](https://github.com/ansible/awx-operator) is the preferred way to install AWX. Please refer to the [AWX Operator](https://github.com/ansible/awx-operator) documentation.\n\nAWX can also alternatively be installed and [run in Docker](./tools/docker-compose/README.md), but this install path is only recommended for development/test-oriented deployments, and has no official published release.\n\n# Installing the AWX CLI\n\n`awx` is the official command-line client for AWX.  It:\n\n* Uses naming and structure consistent with the AWX HTTP API\n* Provides consistent output formats with optional machine-parsable formats\n* To the extent possible, auto-detects API versions, available endpoints, and\n  feature support across multiple versions of AWX.\n\nPotential uses include:\n\n* Configuring and launching jobs/playbooks\n* Checking on the status and output of job runs\n* Managing objects like organizations, users, teams, etc...\n\nThe preferred way to install the AWX CLI is through pip directly from PyPI:\n\n    pip3 install awxkit\n    awx --help\n\n## Building the CLI Documentation\n\nTo build the docs, spin up a real AWX server, `pip3 install sphinx sphinxcontrib-autoprogram`, and run:\n\n    ~ cd awxkit/awxkit/cli/docs\n    ~ TOWER_HOST=https://awx.example.org TOWER_USERNAME=example TOWER_PASSWORD=secret make clean html\n    ~ cd build/html/ && python -m http.server\n    Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ..\n"
        },
        {
          "name": "ISSUES.md",
          "type": "blob",
          "size": 4.931640625,
          "content": "# Issues\n\n## Reporting\n\nUse the GitHub [issue tracker](https://github.com/ansible/awx/issues) for filing bugs. In order to save time, and help us respond to issues quickly, make sure to fill out as much of the issue template\nas possible. Version information, and an accurate reproducing scenario are critical to helping us identify the problem.\n\nPlease don't use the issue tracker as a way to ask how to do something. Instead, use the [Ansible Forum](https://forum.ansible.com/tag/awx).\n\nBefore opening a new issue, please use the issue search feature to see if what you're experiencing has already been reported. If you have any extra detail to provide, please comment. Otherwise, rather than posting a \"me too\" comment, please consider giving it a [\"thumbs up\"](https://github.com/blog/2119-add-reactions-to-pull-requests-issues-and-comment) to give us an indication of the severity of the problem.\n\n### UI Issues\n\nWhen reporting issues for the UI, we also appreciate having screen shots and any error messages from the web browser's console. It's not unusual for browser extensions\nand plugins to cause problems. Reporting those will also help speed up analyzing and resolving UI bugs.\n\n### API and backend issues\n\nFor the API and backend services, please capture all of the logs that you can from the time the problem occurred.\n\n## How issues are resolved\n\nWe triage our issues into high, medium, and low, and tag them with the relevant component (e.g. api, ui, installer, etc.). We typically focus on higher priority issues first. There aren't hard and fast rules for determining the severity of an issue, but generally high priority issues have an increased likelihood of breaking existing functionality, and negatively impacting a large number of users.\n\nIf your issue isn't considered high priority, then please be patient as it may take some time to get to it.\n\n\n### Issue states\n\n`state:needs_triage` This issue has not been looked at by a person yet and still needs to be triaged. This is the initial state for all new issues/pull requests.\n\n`state:needs_info` The issue needs more information. This could be more debug output, more specifics out the system such as version information. Any detail that is currently preventing this issue from moving forward. This should be considered a blocked state.\n\n`state:needs_review` The issue/pull request needs to be reviewed by other maintainers and contributors. This is usually used when there is a question out to another maintainer or when a person is less familiar with an area of the code base the issue is for.\n\n`state:needs_revision` More commonly used on pull requests, this state represents that there are changes that are being waited on.\n\n`state:in_progress` The issue is actively being worked on and you should be in contact with who ever is assigned if you are also working on or plan to work on a similar issue.\n\n`state:in_testing` The issue or pull request is currently being tested.\n\n\n### AWX Issue Bot (awxbot)\nWe use an issue bot to help us label and organize incoming issues, this bot, awxbot, is a version of [ansible/ansibullbot](https://github.com/ansible/ansibullbot).\n\n#### Overview\n\nAWXbot performs many functions:\n\n * Respond quickly to issues and pull requests.\n * Identify the maintainers responsible for reviewing pull requests.\n * Identify issues and pull request types and components (e.g. type:bug, component: api)\n\n#### For issue submitters\n\nThe bot requires a minimal subset of information from the issue template:\n\n * issue type\n * component\n * summary\n\nIf any of those items are missing your issue will still get the `needs_triage` label, but may end up being responded to slower than issues that have the complete set of information.\nSo please use the template whenever possible.\n\nCurrently you can expect the bot to add common labels such as `state:needs_triage`, `type:bug`, `type:enhancement`, `component:ui`, etc...\nThese labels are determined by the template data. Please use the template and fill it out as accurately as possible.\n\nThe `state:needs_triage` label will remain on your issue until a person has looked at it.\n\n#### For pull request submitters\n\nThe bot requires a minimal subset of information from the pull request template:\n\n * issue type\n * component\n * summary\n\nIf any of those items are missing your pull request will still get the `needs_triage` label, but may end up being responded to slower than other pull requests that have a complete set of information.\n\nCurrently you can expect awxbot to add common labels such as `state:needs_triage`, `type:bug`, `component:docs`, etc...\nThese labels are determined by the template data. Please use the template and fill it out as accurately as possible.\n\nThe `state:needs_triage` label will remain on your pull request until a person has looked at it.\n\nYou can also expect the bot to CC maintainers of specific areas of the code, this will notify them that there is a pull request by placing a comment on the pull request.\nThe comment will look something like `CC @matburt @wwitzel3 ...`.\n\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 9.0859375,
          "content": "Apache License\n==============\n\n_Version 2.0, January 2004_  \n_&lt;<http://www.apache.org/licenses/>&gt;_\n\n### Terms and Conditions for use, reproduction, and distribution\n\n#### 1. Definitions\n\n“License” shall mean the terms and conditions for use, reproduction, and\ndistribution as defined by Sections 1 through 9 of this document.\n\n“Licensor” shall mean the copyright owner or entity authorized by the copyright\nowner that is granting the License.\n\n“Legal Entity” shall mean the union of the acting entity and all other entities\nthat control, are controlled by, or are under common control with that entity.\nFor the purposes of this definition, “control” means **(i)** the power, direct or\nindirect, to cause the direction or management of such entity, whether by\ncontract or otherwise, or **(ii)** ownership of fifty percent (50%) or more of the\noutstanding shares, or **(iii)** beneficial ownership of such entity.\n\n“You” (or “Your”) shall mean an individual or Legal Entity exercising\npermissions granted by this License.\n\n“Source” form shall mean the preferred form for making modifications, including\nbut not limited to software source code, documentation source, and configuration\nfiles.\n\n“Object” form shall mean any form resulting from mechanical transformation or\ntranslation of a Source form, including but not limited to compiled object code,\ngenerated documentation, and conversions to other media types.\n\n“Work” shall mean the work of authorship, whether in Source or Object form, made\navailable under the License, as indicated by a copyright notice that is included\nin or attached to the work (an example is provided in the Appendix below).\n\n“Derivative Works” shall mean any work, whether in Source or Object form, that\nis based on (or derived from) the Work and for which the editorial revisions,\nannotations, elaborations, or other modifications represent, as a whole, an\noriginal work of authorship. For the purposes of this License, Derivative Works\nshall not include works that remain separable from, or merely link (or bind by\nname) to the interfaces of, the Work and Derivative Works thereof.\n\n“Contribution” shall mean any work of authorship, including the original version\nof the Work and any modifications or additions to that Work or Derivative Works\nthereof, that is intentionally submitted to Licensor for inclusion in the Work\nby the copyright owner or by an individual or Legal Entity authorized to submit\non behalf of the copyright owner. For the purposes of this definition,\n“submitted” means any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems, and\nissue tracking systems that are managed by, or on behalf of, the Licensor for\nthe purpose of discussing and improving the Work, but excluding communication\nthat is conspicuously marked or otherwise designated in writing by the copyright\nowner as “Not a Contribution.”\n\n“Contributor” shall mean Licensor and any individual or Legal Entity on behalf\nof whom a Contribution has been received by Licensor and subsequently\nincorporated within the Work.\n\n#### 2. Grant of Copyright License\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable copyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the Work and such\nDerivative Works in Source or Object form.\n\n#### 3. Grant of Patent License\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable (except as stated in this section) patent license to make, have\nmade, use, offer to sell, sell, import, and otherwise transfer the Work, where\nsuch license applies only to those patent claims licensable by such Contributor\nthat are necessarily infringed by their Contribution(s) alone or by combination\nof their Contribution(s) with the Work to which such Contribution(s) was\nsubmitted. If You institute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work or a\nContribution incorporated within the Work constitutes direct or contributory\npatent infringement, then any patent licenses granted to You under this License\nfor that Work shall terminate as of the date such litigation is filed.\n\n#### 4. Redistribution\n\nYou may reproduce and distribute copies of the Work or Derivative Works thereof\nin any medium, with or without modifications, and in Source or Object form,\nprovided that You meet the following conditions:\n\n* **(a)** You must give any other recipients of the Work or Derivative Works a copy of\nthis License; and\n* **(b)** You must cause any modified files to carry prominent notices stating that You\nchanged the files; and\n* **(c)** You must retain, in the Source form of any Derivative Works that You distribute,\nall copyright, patent, trademark, and attribution notices from the Source form\nof the Work, excluding those notices that do not pertain to any part of the\nDerivative Works; and\n* **(d)** If the Work includes a “NOTICE” text file as part of its distribution, then any\nDerivative Works that You distribute must include a readable copy of the\nattribution notices contained within such NOTICE file, excluding those notices\nthat do not pertain to any part of the Derivative Works, in at least one of the\nfollowing places: within a NOTICE text file distributed as part of the\nDerivative Works; within the Source form or documentation, if provided along\nwith the Derivative Works; or, within a display generated by the Derivative\nWorks, if and wherever such third-party notices normally appear. The contents of\nthe NOTICE file are for informational purposes only and do not modify the\nLicense. You may add Your own attribution notices within Derivative Works that\nYou distribute, alongside or as an addendum to the NOTICE text from the Work,\nprovided that such additional attribution notices cannot be construed as\nmodifying the License.\n\nYou may add Your own copyright statement to Your modifications and may provide\nadditional or different license terms and conditions for use, reproduction, or\ndistribution of Your modifications, or for any such Derivative Works as a whole,\nprovided Your use, reproduction, and distribution of the Work otherwise complies\nwith the conditions stated in this License.\n\n#### 5. Submission of Contributions\n\nUnless You explicitly state otherwise, any Contribution intentionally submitted\nfor inclusion in the Work by You to the Licensor shall be under the terms and\nconditions of this License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify the terms of\nany separate license agreement you may have executed with Licensor regarding\nsuch Contributions.\n\n#### 6. Trademarks\n\nThis License does not grant permission to use the trade names, trademarks,\nservice marks, or product names of the Licensor, except as required for\nreasonable and customary use in describing the origin of the Work and\nreproducing the content of the NOTICE file.\n\n#### 7. Disclaimer of Warranty\n\nUnless required by applicable law or agreed to in writing, Licensor provides the\nWork (and each Contributor provides its Contributions) on an “AS IS” BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,\nincluding, without limitation, any warranties or conditions of TITLE,\nNON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are\nsolely responsible for determining the appropriateness of using or\nredistributing the Work and assume any risks associated with Your exercise of\npermissions under this License.\n\n#### 8. Limitation of Liability\n\nIn no event and under no legal theory, whether in tort (including negligence),\ncontract, or otherwise, unless required by applicable law (such as deliberate\nand grossly negligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special, incidental,\nor consequential damages of any character arising as a result of this License or\nout of the use or inability to use the Work (including but not limited to\ndamages for loss of goodwill, work stoppage, computer failure or malfunction, or\nany and all other commercial damages or losses), even if such Contributor has\nbeen advised of the possibility of such damages.\n\n#### 9. Accepting Warranty or Additional Liability\n\nWhile redistributing the Work or Derivative Works thereof, You may choose to\noffer, and charge a fee for, acceptance of support, warranty, indemnity, or\nother liability obligations and/or rights consistent with this License. However,\nin accepting such obligations, You may act only on Your own behalf and on Your\nsole responsibility, not on behalf of any other Contributor, and only if You\nagree to indemnify, defend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason of your\naccepting any such warranty or additional liability.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.9990234375,
          "content": "recursive-include awx *.py\nrecursive-include awx *.po\nrecursive-include awx *.mo\nrecursive-include awx/static *\nrecursive-include awx/templates *.html\nrecursive-include awx/api/templates *.md *.html *.yml\nrecursive-include awx/ui/build *\nrecursive-include awx/playbooks *.yml\nrecursive-include awx/lib/site-packages *\nrecursive-include awx/plugins *.ps1\nrecursive-include requirements *.txt\nrecursive-include requirements *.yml\nrecursive-include config *\nrecursive-include licenses *\nrecursive-exclude awx devonly.py*\nrecursive-exclude awx/api/tests *\nrecursive-exclude awx/main/tests *\nrecursive-exclude awx/settings local_settings.py*\ninclude tools/scripts/request_tower_configuration.sh\ninclude tools/scripts/request_tower_configuration.ps1\ninclude tools/scripts/automation-controller-service\ninclude tools/scripts/rsyslog-4xx-recovery\ninclude tools/scripts/awx-python\ninclude awx/playbooks/library/mkfifo.py\ninclude tools/sosreport/*\ninclude VERSION\ninclude COPYING\ninclude Makefile\nprune awx/public\nprune awx/projects\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 26.27734375,
          "content": "-include awx/ui/Makefile\n\nPYTHON := $(notdir $(shell for i in python3.11 python3; do command -v $$i; done|sed 1q))\nSHELL := bash\nDOCKER_COMPOSE ?= docker compose\nOFFICIAL ?= no\nNODE ?= node\nNPM_BIN ?= npm\nKIND_BIN ?= $(shell which kind)\nCHROMIUM_BIN=/tmp/chrome-linux/chrome\nGIT_BRANCH ?= $(shell git rev-parse --abbrev-ref HEAD)\nMANAGEMENT_COMMAND ?= awx-manage\nVERSION ?= $(shell $(PYTHON) tools/scripts/scm_version.py 2> /dev/null)\n\n# ansible-test requires semver compatable version, so we allow overrides to hack it\nCOLLECTION_VERSION ?= $(shell $(PYTHON) tools/scripts/scm_version.py | cut -d . -f 1-3)\n# args for the ansible-test sanity command\nCOLLECTION_SANITY_ARGS ?= --docker\n# collection unit testing directories\nCOLLECTION_TEST_DIRS ?= awx_collection/test/awx\n# collection integration test directories (defaults to all)\nCOLLECTION_TEST_TARGET ?=\n# args for collection install\nCOLLECTION_PACKAGE ?= awx\nCOLLECTION_NAMESPACE ?= awx\nCOLLECTION_INSTALL = $(HOME)/.ansible/collections/ansible_collections/$(COLLECTION_NAMESPACE)/$(COLLECTION_PACKAGE)\nCOLLECTION_TEMPLATE_VERSION ?= false\n\n# NOTE: This defaults the container image version to the branch that's active\nCOMPOSE_TAG ?= $(GIT_BRANCH)\nMAIN_NODE_TYPE ?= hybrid\n# If set to true docker-compose will also start a pgbouncer instance and use it\nPGBOUNCER ?= false\n# If set to true docker-compose will also start a splunk instance\nSPLUNK ?= false\n# If set to true docker-compose will also start a prometheus instance\nPROMETHEUS ?= false\n# If set to true docker-compose will also start a grafana instance\nGRAFANA ?= false\n# If set to true docker-compose will also start a hashicorp vault instance\nVAULT ?= false\n# If set to true docker-compose will also start a hashicorp vault instance with TLS enabled\nVAULT_TLS ?= false\n# If set to true docker-compose will also start an OpenTelemetry Collector instance\nOTEL ?= false\n# If set to true docker-compose will also start a Loki instance\nLOKI ?= false\n# If set to true docker-compose will install editable dependencies\nEDITABLE_DEPENDENCIES ?= false\n# If set to true, use tls for postgres connection\nPG_TLS ?= false\n\nVENV_BASE ?= /var/lib/awx/venv\n\nDEV_DOCKER_OWNER ?= ansible\n# Docker will only accept lowercase, so github names like Paul need to be paul\nDEV_DOCKER_OWNER_LOWER = $(shell echo $(DEV_DOCKER_OWNER) | tr A-Z a-z)\nDEV_DOCKER_TAG_BASE ?= ghcr.io/$(DEV_DOCKER_OWNER_LOWER)\nDEVEL_IMAGE_NAME ?= $(DEV_DOCKER_TAG_BASE)/awx_devel:$(COMPOSE_TAG)\nIMAGE_KUBE_DEV=$(DEV_DOCKER_TAG_BASE)/awx_kube_devel:$(COMPOSE_TAG)\nIMAGE_KUBE=$(DEV_DOCKER_TAG_BASE)/awx:$(COMPOSE_TAG)\n\n# Common command to use for running ansible-playbook\nANSIBLE_PLAYBOOK ?= ansible-playbook -e ansible_python_interpreter=$(PYTHON)\n\nRECEPTOR_IMAGE ?= quay.io/ansible/receptor:devel\n\n# Python packages to install only from source (not from binary wheels)\n# Comma separated list\nSRC_ONLY_PKGS ?= cffi,pycparser,psycopg,twilio\n# These should be upgraded in the AWX and Ansible venv before attempting\n# to install the actual requirements\nVENV_BOOTSTRAP ?= pip==21.2.4 setuptools==70.3.0 setuptools_scm[toml]==8.1.0 wheel==0.45.1 cython==3.0.11\n\nNAME ?= awx\n\n# TAR build parameters\nSDIST_TAR_NAME=$(NAME)-$(VERSION)\n\nSDIST_COMMAND ?= sdist\nSDIST_TAR_FILE ?= $(SDIST_TAR_NAME).tar.gz\n\nI18N_FLAG_FILE = .i18n_built\n\n## PLATFORMS defines the target platforms for  the manager image be build to provide support to multiple\nPLATFORMS ?= linux/amd64,linux/arm64  # linux/ppc64le,linux/s390x\n\n# Set up cache variables for image builds, allowing to control whether cache is used or not, ex:\n# DOCKER_CACHE=--no-cache make docker-compose-build\nifeq ($(DOCKER_CACHE),)\n DOCKER_DEVEL_CACHE_FLAG=--cache-from=$(DEVEL_IMAGE_NAME)\n DOCKER_KUBE_DEV_CACHE_FLAG=--cache-from=$(IMAGE_KUBE_DEV)\n DOCKER_KUBE_CACHE_FLAG=--cache-from=$(IMAGE_KUBE)\nelse\n DOCKER_DEVEL_CACHE_FLAG=$(DOCKER_CACHE)\n DOCKER_KUBE_DEV_CACHE_FLAG=$(DOCKER_CACHE)\n DOCKER_KUBE_CACHE_FLAG=$(DOCKER_CACHE)\nendif\n\n.PHONY: awx-link clean clean-tmp clean-venv requirements requirements_dev \\\n\tdevelop refresh adduser migrate dbchange \\\n\treceiver test test_unit test_coverage coverage_html \\\n\tsdist \\\n\tVERSION PYTHON_VERSION docker-compose-sources \\\n\t.git/hooks/pre-commit\n\nclean-tmp:\n\trm -rf tmp/\n\nclean-venv:\n\trm -rf venv/\n\nclean-dist:\n\trm -rf dist\n\nclean-schema:\n\trm -rf swagger.json\n\trm -rf schema.json\n\trm -rf reference-schema.json\n\nclean-languages:\n\trm -f $(I18N_FLAG_FILE)\n\tfind ./awx/locale/ -type f -regex '.*\\.mo$$' -delete\n\n## Remove temporary build files, compiled Python files.\nclean: clean-api clean-awxkit clean-dist\n\trm -rf awx/public\n\trm -rf awx/lib/site-packages\n\trm -rf awx/job_status\n\trm -rf awx/job_output\n\trm -rf reports\n\trm -rf tmp\n\trm -rf $(I18N_FLAG_FILE)\n\tmkdir tmp\n\nclean-api:\n\trm -rf build $(NAME)-$(VERSION) *.egg-info\n\trm -rf .tox\n\tfind . -type f -regex \".*\\.py[co]$$\" -delete\n\tfind . -type d -name \"__pycache__\" -delete\n\trm -f awx/awx_test.sqlite3*\n\trm -rf requirements/vendor\n\trm -rf awx/projects\n\nclean-awxkit:\n\trm -rf awxkit/*.egg-info awxkit/.tox awxkit/build/*\n\n## convenience target to assert environment variables are defined\nguard-%:\n\t@if [ \"$${$*}\" = \"\" ]; then \\\n\t    echo \"The required environment variable '$*' is not set\"; \\\n\t    exit 1; \\\n\tfi\n\nvirtualenv: virtualenv_awx\n\n# flit is needed for offline install of certain packages, specifically ptyprocess\n# it is needed for setup, but not always recognized as a setup dependency\n# similar to pip, setuptools, and wheel, these are all needed here as a bootstrapping issues\nvirtualenv_awx:\n\tif [ \"$(VENV_BASE)\" ]; then \\\n\t\tif [ ! -d \"$(VENV_BASE)\" ]; then \\\n\t\t\tmkdir $(VENV_BASE); \\\n\t\tfi; \\\n\t\tif [ ! -d \"$(VENV_BASE)/awx\" ]; then \\\n\t\t\t$(PYTHON) -m venv $(VENV_BASE)/awx; \\\n\t\t\t$(VENV_BASE)/awx/bin/pip install $(PIP_OPTIONS) $(VENV_BOOTSTRAP); \\\n\t\tfi; \\\n\tfi\n\n## Install third-party requirements needed for AWX's environment.\n# this does not use system site packages intentionally\nrequirements_awx: virtualenv_awx\n\tif [[ \"$(PIP_OPTIONS)\" == *\"--no-index\"* ]]; then \\\n\t    cat requirements/requirements.txt requirements/requirements_local.txt | $(VENV_BASE)/awx/bin/pip install $(PIP_OPTIONS) -r /dev/stdin ; \\\n\telse \\\n\t    cat requirements/requirements.txt requirements/requirements_git.txt | $(VENV_BASE)/awx/bin/pip install $(PIP_OPTIONS) --no-binary $(SRC_ONLY_PKGS) -r /dev/stdin ; \\\n\tfi\n\t$(VENV_BASE)/awx/bin/pip uninstall --yes -r requirements/requirements_tower_uninstall.txt\n\nrequirements_awx_dev:\n\t$(VENV_BASE)/awx/bin/pip install -r requirements/requirements_dev.txt\n\nrequirements: requirements_awx\n\nrequirements_dev: requirements_awx requirements_awx_dev\n\nrequirements_test: requirements\n\n## \"Install\" awx package in development mode.\ndevelop:\n\t@if [ \"$(VIRTUAL_ENV)\" ]; then \\\n\t    pip uninstall -y awx; \\\n\t    $(PYTHON) setup.py develop; \\\n\telse \\\n\t    pip uninstall -y awx; \\\n\t    $(PYTHON) setup.py develop; \\\n\tfi\n\nversion_file:\n\tmkdir -p /var/lib/awx/; \\\n\tif [ \"$(VENV_BASE)\" ]; then \\\n\t\t. $(VENV_BASE)/awx/bin/activate; \\\n\tfi; \\\n\t$(PYTHON) -c \"import awx; print(awx.__version__)\" > /var/lib/awx/.awx_version; \\\n\n## Refresh development environment after pulling new code.\nrefresh: clean requirements_dev version_file develop migrate\n\n## Create Django superuser.\nadduser:\n\t$(MANAGEMENT_COMMAND) createsuperuser\n\n## Create database tables and apply any new migrations.\nmigrate:\n\tif [ \"$(VENV_BASE)\" ]; then \\\n\t\t. $(VENV_BASE)/awx/bin/activate; \\\n\tfi; \\\n\t$(MANAGEMENT_COMMAND) migrate --noinput\n\n## Run after making changes to the models to create a new migration.\ndbchange:\n\t$(MANAGEMENT_COMMAND) makemigrations\n\ncollectstatic:\n\t@if [ \"$(VENV_BASE)\" ]; then \\\n\t\t. $(VENV_BASE)/awx/bin/activate; \\\n\tfi; \\\n\t$(PYTHON) manage.py collectstatic --clear --noinput > /dev/null 2>&1\n\nuwsgi: collectstatic\n\t@if [ \"$(VENV_BASE)\" ]; then \\\n\t\t. $(VENV_BASE)/awx/bin/activate; \\\n\tfi; \\\n\tuwsgi /etc/tower/uwsgi.ini\n\nawx-autoreload:\n\t@/awx_devel/tools/docker-compose/awx-autoreload /awx_devel/awx\n\ndaphne:\n\t@if [ \"$(VENV_BASE)\" ]; then \\\n\t\t. $(VENV_BASE)/awx/bin/activate; \\\n\tfi; \\\n\tdaphne -b 127.0.0.1 -p 8051 awx.asgi:channel_layer\n\n## Run to start the background task dispatcher for development.\ndispatcher:\n\t@if [ \"$(VENV_BASE)\" ]; then \\\n\t\t. $(VENV_BASE)/awx/bin/activate; \\\n\tfi; \\\n\t$(PYTHON) manage.py run_dispatcher\n\n## Run to start the zeromq callback receiver\nreceiver:\n\t@if [ \"$(VENV_BASE)\" ]; then \\\n\t\t. $(VENV_BASE)/awx/bin/activate; \\\n\tfi; \\\n\t$(PYTHON) manage.py run_callback_receiver\n\nnginx:\n\tnginx -g \"daemon off;\"\n\njupyter:\n\t@if [ \"$(VENV_BASE)\" ]; then \\\n\t\t. $(VENV_BASE)/awx/bin/activate; \\\n\tfi; \\\n\t$(MANAGEMENT_COMMAND) shell_plus --notebook\n\n## Start the rsyslog configurer process in background in development environment.\nrun-rsyslog-configurer:\n\t@if [ \"$(VENV_BASE)\" ]; then \\\n\t\t. $(VENV_BASE)/awx/bin/activate; \\\n\tfi; \\\n\t$(PYTHON) manage.py run_rsyslog_configurer\n\n## Start cache_clear process in background in development environment.\nrun-cache-clear:\n\t@if [ \"$(VENV_BASE)\" ]; then \\\n\t\t. $(VENV_BASE)/awx/bin/activate; \\\n\tfi; \\\n\t$(PYTHON) manage.py run_cache_clear\n\n## Start the wsrelay process in background in development environment.\nrun-wsrelay:\n\t@if [ \"$(VENV_BASE)\" ]; then \\\n\t\t. $(VENV_BASE)/awx/bin/activate; \\\n\tfi; \\\n\t$(PYTHON) manage.py run_wsrelay\n\n## Start the heartbeat process in background in development environment.\nrun-ws-heartbeat:\n\t@if [ \"$(VENV_BASE)\" ]; then \\\n\t\t. $(VENV_BASE)/awx/bin/activate; \\\n\tfi; \\\n\t$(PYTHON) manage.py run_ws_heartbeat\n\nreports:\n\tmkdir -p $@\n\nblack: reports\n\t@command -v black >/dev/null 2>&1 || { echo \"could not find black on your PATH, you may need to \\`pip install black\\`, or set AWX_IGNORE_BLACK=1\" && exit 1; }\n\t@(set -o pipefail && $@ $(BLACK_ARGS) awx awxkit awx_collection | tee reports/$@.report)\n\n.git/hooks/pre-commit:\n\t@echo \"if [ -x pre-commit.sh ]; then\" > .git/hooks/pre-commit\n\t@echo \"    ./pre-commit.sh;\" >> .git/hooks/pre-commit\n\t@echo \"fi\" >> .git/hooks/pre-commit\n\t@chmod +x .git/hooks/pre-commit\n\ngenschema: reports\n\t$(MAKE) swagger PYTEST_ARGS=\"--genschema --create-db \"\n\tmv swagger.json schema.json\n\nswagger: reports\n\t@if [ \"$(VENV_BASE)\" ]; then \\\n\t\t. $(VENV_BASE)/awx/bin/activate; \\\n\tfi; \\\n\t(set -o pipefail && py.test --cov --cov-report=xml --junitxml=reports/junit.xml $(PYTEST_ARGS) awx/conf/tests/functional awx/main/tests/functional/api awx/main/tests/docs | tee reports/$@.report)\n\t@if [ \"${GITHUB_ACTIONS}\" = \"true\" ]; \\\n\tthen \\\n\t  echo 'cov-report-files=reports/coverage.xml' >> \"${GITHUB_OUTPUT}\"; \\\n\t  echo 'test-result-files=reports/junit.xml' >> \"${GITHUB_OUTPUT}\"; \\\n\tfi\n\ncheck: black\n\napi-lint:\n\tBLACK_ARGS=\"--check\" $(MAKE) black\n\tflake8 awx\n\tyamllint -s .\n\n## Run egg_info_dev to generate awx.egg-info for development.\nawx-link:\n\t[ -d \"/awx_devel/awx.egg-info\" ] || $(PYTHON) /awx_devel/tools/scripts/egg_info_dev\n\nTEST_DIRS ?= awx/main/tests/unit awx/main/tests/functional awx/conf/tests\nPYTEST_ARGS ?= -n auto\n## Run all API unit tests.\ntest:\n\tif [ \"$(VENV_BASE)\" ]; then \\\n\t\t. $(VENV_BASE)/awx/bin/activate; \\\n\tfi; \\\n\tPYTHONDONTWRITEBYTECODE=1 py.test -p no:cacheprovider $(PYTEST_ARGS) $(TEST_DIRS)\n\tcd awxkit && $(VENV_BASE)/awx/bin/tox -re py3\n\tawx-manage check_migrations --dry-run --check  -n 'missing_migration_file'\n\nlive_test:\n\tcd awx/main/tests/live && py.test tests/\n\n## Run all API unit tests with coverage enabled.\ntest_coverage:\n\t$(MAKE) test PYTEST_ARGS=\"--create-db --cov --cov-report=xml --junitxml=reports/junit.xml\"\n\t@if [ \"${GITHUB_ACTIONS}\" = \"true\" ]; \\\n\tthen \\\n\t  echo 'cov-report-files=awxkit/coverage.xml,reports/coverage.xml' >> \"${GITHUB_OUTPUT}\"; \\\n\t  echo 'test-result-files=awxkit/report.xml,reports/junit.xml' >> \"${GITHUB_OUTPUT}\"; \\\n\tfi\n\ntest_migrations:\n\tPYTHONDONTWRITEBYTECODE=1 py.test -p no:cacheprovider --migrations -m migration_test --create-db --cov=awx --cov-report=xml --junitxml=reports/junit.xml $(PYTEST_ARGS) $(TEST_DIRS)\n\t@if [ \"${GITHUB_ACTIONS}\" = \"true\" ]; \\\n\tthen \\\n\t  echo 'cov-report-files=reports/coverage.xml' >> \"${GITHUB_OUTPUT}\"; \\\n\t  echo 'test-result-files=reports/junit.xml' >> \"${GITHUB_OUTPUT}\"; \\\n\tfi\n\n## Runs AWX_DOCKER_CMD inside a new docker container.\ndocker-runner:\n\tdocker run -u $(shell id -u) --rm -v $(shell pwd):/awx_devel/:Z $(AWX_DOCKER_ARGS) --workdir=/awx_devel $(DEVEL_IMAGE_NAME) $(AWX_DOCKER_CMD)\n\ntest_collection:\n\trm -f $(shell ls -d $(VENV_BASE)/awx/lib/python* | head -n 1)/no-global-site-packages.txt\n\tif [ \"$(VENV_BASE)\" ]; then \\\n\t\t. $(VENV_BASE)/awx/bin/activate; \\\n\tfi && \\\n\tif ! [ -x \"$(shell command -v ansible-playbook)\" ]; then pip install ansible-core; fi\n\tansible --version\n\tpy.test $(COLLECTION_TEST_DIRS) --cov --cov-report=xml --junitxml=reports/junit.xml -v\n\t@if [ \"${GITHUB_ACTIONS}\" = \"true\" ]; \\\n\tthen \\\n\t  echo 'cov-report-files=reports/coverage.xml' >> \"${GITHUB_OUTPUT}\"; \\\n\t  echo 'test-result-files=reports/junit.xml' >> \"${GITHUB_OUTPUT}\"; \\\n\tfi\n\t# The python path needs to be modified so that the tests can find Ansible within the container\n\t# First we will use anything expility set as PYTHONPATH\n\t# Second we will load any libraries out of the virtualenv (if it's unspecified that should be ok because python should not load out of an empty directory)\n\t# Finally we will add the system path so that the tests can find the ansible libraries\n\ntest_collection_all: test_collection\n\n# WARNING: symlinking a collection is fundamentally unstable\n# this is for rapid development iteration with playbooks, do not use with other test targets\nsymlink_collection:\n\trm -rf $(COLLECTION_INSTALL)\n\tmkdir -p ~/.ansible/collections/ansible_collections/$(COLLECTION_NAMESPACE)  # in case it does not exist\n\tln -s $(shell pwd)/awx_collection $(COLLECTION_INSTALL)\n\nawx_collection_build: $(shell find awx_collection -type f)\n\t$(ANSIBLE_PLAYBOOK) -i localhost, awx_collection/tools/template_galaxy.yml \\\n\t  -e collection_package=$(COLLECTION_PACKAGE) \\\n\t  -e collection_namespace=$(COLLECTION_NAMESPACE) \\\n\t  -e collection_version=$(COLLECTION_VERSION) \\\n\t  -e '{\"awx_template_version\": $(COLLECTION_TEMPLATE_VERSION)}'\n\tansible-galaxy collection build awx_collection_build --force --output-path=awx_collection_build\n\nbuild_collection: awx_collection_build\n\ninstall_collection: build_collection\n\trm -rf $(COLLECTION_INSTALL)\n\tansible-galaxy collection install awx_collection_build/$(COLLECTION_NAMESPACE)-$(COLLECTION_PACKAGE)-$(COLLECTION_VERSION).tar.gz\n\ntest_collection_sanity:\n\trm -rf awx_collection_build/\n\trm -rf $(COLLECTION_INSTALL)\n\tif ! [ -x \"$(shell command -v ansible-test)\" ]; then pip install ansible-core; fi\n\tansible --version\n\tCOLLECTION_VERSION=1.0.0 $(MAKE) install_collection\n\tcd $(COLLECTION_INSTALL) && \\\n\t\tansible-test sanity $(COLLECTION_SANITY_ARGS) --coverage --junit && \\\n\t\tansible-test coverage xml --requirements --group-by command --group-by version\n\t@if [ \"${GITHUB_ACTIONS}\" = \"true\" ]; \\\n\tthen \\\n\t  echo cov-report-files=\"$$(find \"$(COLLECTION_INSTALL)/tests/output/reports/\" -type f -name 'coverage=sanity*.xml' -print0 | tr '\\0' ',' | sed 's#,$$##')\" >> \"${GITHUB_OUTPUT}\"; \\\n\t  echo test-result-files=\"$$(find \"$(COLLECTION_INSTALL)/tests/output/junit/\" -type f -name '*.xml' -print0 | tr '\\0' ',' | sed 's#,$$##')\" >> \"${GITHUB_OUTPUT}\"; \\\n\tfi\n\ntest_collection_integration: install_collection\n\tcd $(COLLECTION_INSTALL) && \\\n\t\tansible-test integration --coverage -vvv $(COLLECTION_TEST_TARGET) && \\\n\t\tansible-test coverage xml --requirements --group-by command --group-by version\n\t@if [ \"${GITHUB_ACTIONS}\" = \"true\" ]; \\\n\tthen \\\n\t  echo cov-report-files=\"$$(find \"$(COLLECTION_INSTALL)/tests/output/reports/\" -type f -name 'coverage=integration*.xml' -print0 | tr '\\0' ',' | sed 's#,$$##')\" >> \"${GITHUB_OUTPUT}\"; \\\n\tfi\n\ntest_unit:\n\t@if [ \"$(VENV_BASE)\" ]; then \\\n\t\t. $(VENV_BASE)/awx/bin/activate; \\\n\tfi; \\\n\tpy.test awx/main/tests/unit awx/conf/tests/unit\n\n## Output test coverage as HTML (into htmlcov directory).\ncoverage_html:\n\tcoverage html\n\n## Run API unit tests across multiple Python/Django versions with Tox.\ntest_tox:\n\ttox -v\n\n\nDATA_GEN_PRESET = \"\"\n## Make fake data\nbulk_data:\n\t@if [ \"$(VENV_BASE)\" ]; then \\\n\t\t. $(VENV_BASE)/awx/bin/activate; \\\n\tfi; \\\n\t$(PYTHON) tools/data_generators/rbac_dummy_data_generator.py --preset=$(DATA_GEN_PRESET)\n\ndist/$(SDIST_TAR_FILE):\n\t$(PYTHON) -m build -s\n\tln -sf $(SDIST_TAR_FILE) dist/awx.tar.gz\n\nsdist: dist/$(SDIST_TAR_FILE)\n\techo $(HEADLESS)\n\t@echo \"#############################################\"\n\t@echo \"Artifacts:\"\n\t@echo dist/$(SDIST_TAR_FILE)\n\t@echo \"#############################################\"\n\n# This directory is bind-mounted inside of the development container and\n# needs to be pre-created for permissions to be set correctly. Otherwise,\n# Docker will create this directory as root.\nawx/projects:\n\t@mkdir -p $@\n\nCOMPOSE_UP_OPTS ?=\nCOMPOSE_OPTS ?=\nCONTROL_PLANE_NODE_COUNT ?= 1\nEXECUTION_NODE_COUNT ?= 0\nMINIKUBE_CONTAINER_GROUP ?= false\nMINIKUBE_SETUP ?= false # if false, run minikube separately\nEXTRA_SOURCES_ANSIBLE_OPTS ?=\n\nifneq ($(ADMIN_PASSWORD),)\n\tEXTRA_SOURCES_ANSIBLE_OPTS := -e admin_password=$(ADMIN_PASSWORD) $(EXTRA_SOURCES_ANSIBLE_OPTS)\nendif\n\ndocker-compose-sources: .git/hooks/pre-commit\n\t@if [ $(MINIKUBE_CONTAINER_GROUP) = true ]; then\\\n\t    $(ANSIBLE_PLAYBOOK) -i tools/docker-compose/inventory -e minikube_setup=$(MINIKUBE_SETUP) tools/docker-compose-minikube/deploy.yml; \\\n\tfi;\n\n\t$(ANSIBLE_PLAYBOOK) -i tools/docker-compose/inventory tools/docker-compose/ansible/sources.yml \\\n\t    -e awx_image=$(DEV_DOCKER_TAG_BASE)/awx_devel \\\n\t    -e awx_image_tag=$(COMPOSE_TAG) \\\n\t    -e receptor_image=$(RECEPTOR_IMAGE) \\\n\t    -e control_plane_node_count=$(CONTROL_PLANE_NODE_COUNT) \\\n\t    -e execution_node_count=$(EXECUTION_NODE_COUNT) \\\n\t    -e minikube_container_group=$(MINIKUBE_CONTAINER_GROUP) \\\n\t    -e enable_pgbouncer=$(PGBOUNCER) \\\n\t    -e enable_splunk=$(SPLUNK) \\\n\t    -e enable_prometheus=$(PROMETHEUS) \\\n\t    -e enable_grafana=$(GRAFANA) \\\n\t    -e enable_vault=$(VAULT) \\\n\t    -e vault_tls=$(VAULT_TLS) \\\n\t    -e enable_otel=$(OTEL) \\\n\t    -e enable_loki=$(LOKI) \\\n\t    -e install_editable_dependencies=$(EDITABLE_DEPENDENCIES) \\\n\t    -e pg_tls=$(PG_TLS) \\\n\t    $(EXTRA_SOURCES_ANSIBLE_OPTS)\n\ndocker-compose: awx/projects docker-compose-sources\n\tansible-galaxy install --ignore-certs -r tools/docker-compose/ansible/requirements.yml;\n\t$(ANSIBLE_PLAYBOOK) -i tools/docker-compose/inventory tools/docker-compose/ansible/initialize_containers.yml \\\n\t    -e enable_vault=$(VAULT) \\\n\t    -e vault_tls=$(VAULT_TLS); \\\n\t$(MAKE) docker-compose-up\n\ndocker-compose-up:\n\t$(DOCKER_COMPOSE) -f tools/docker-compose/_sources/docker-compose.yml $(COMPOSE_OPTS) up $(COMPOSE_UP_OPTS) --remove-orphans\n\ndocker-compose-down:\n\t$(DOCKER_COMPOSE) -f tools/docker-compose/_sources/docker-compose.yml $(COMPOSE_OPTS) down --remove-orphans\n\ndocker-compose-credential-plugins: awx/projects docker-compose-sources\n\techo -e \"\\033[0;31mTo generate a CyberArk Conjur API key: docker exec -it tools_conjur_1 conjurctl account create quick-start\\033[0m\"\n\t$(DOCKER_COMPOSE) -f tools/docker-compose/_sources/docker-compose.yml -f tools/docker-credential-plugins-override.yml up --no-recreate awx_1 --remove-orphans\n\ndocker-compose-test: awx/projects docker-compose-sources\n\t$(DOCKER_COMPOSE) -f tools/docker-compose/_sources/docker-compose.yml run --rm --service-ports awx_1 /bin/bash\n\ndocker-compose-runtest: awx/projects docker-compose-sources\n\t$(DOCKER_COMPOSE) -f tools/docker-compose/_sources/docker-compose.yml run --rm --service-ports awx_1 /start_tests.sh\n\ndocker-compose-build-swagger: awx/projects docker-compose-sources\n\t$(DOCKER_COMPOSE) -f tools/docker-compose/_sources/docker-compose.yml run --rm --service-ports --no-deps awx_1 /start_tests.sh swagger\n\nSCHEMA_DIFF_BASE_BRANCH ?= devel\ndetect-schema-change: genschema\n\tcurl https://s3.amazonaws.com/awx-public-ci-files/$(SCHEMA_DIFF_BASE_BRANCH)/schema.json -o reference-schema.json\n\t# Ignore differences in whitespace with -b\n\tdiff -u -b reference-schema.json schema.json\n\ndocker-compose-clean: awx/projects\n\t$(DOCKER_COMPOSE) -f tools/docker-compose/_sources/docker-compose.yml rm -sf\n\ndocker-compose-container-group-clean:\n\t@if [ -f \"tools/docker-compose-minikube/_sources/minikube\" ]; then \\\n\t    tools/docker-compose-minikube/_sources/minikube delete; \\\n\tfi\n\trm -rf tools/docker-compose-minikube/_sources/\n\n.PHONY: Dockerfile.dev\n## Generate Dockerfile.dev for awx_devel image\nDockerfile.dev: tools/ansible/roles/dockerfile/templates/Dockerfile.j2\n\t$(ANSIBLE_PLAYBOOK) tools/ansible/dockerfile.yml \\\n\t\t-e dockerfile_name=Dockerfile.dev \\\n\t\t-e build_dev=True \\\n\t\t-e receptor_image=$(RECEPTOR_IMAGE)\n\n## Build awx_devel image for docker compose development environment\ndocker-compose-build: Dockerfile.dev\n\tDOCKER_BUILDKIT=1 docker build \\\n\t\t-f Dockerfile.dev \\\n\t\t-t $(DEVEL_IMAGE_NAME) \\\n\t\t--build-arg BUILDKIT_INLINE_CACHE=1 \\\n\t\t$(DOCKER_DEVEL_CACHE_FLAG) .\n\n.PHONY: docker-compose-buildx\n## Build awx_devel image for docker compose development environment for multiple architectures\ndocker-compose-buildx: Dockerfile.dev\n\t- docker buildx create --name docker-compose-buildx\n\tdocker buildx use docker-compose-buildx\n\t- docker buildx build \\\n\t\t--push \\\n\t\t--build-arg BUILDKIT_INLINE_CACHE=1 \\\n\t\t$(DOCKER_DEVEL_CACHE_FLAG) \\\n\t\t--platform=$(PLATFORMS) \\\n\t\t--tag $(DEVEL_IMAGE_NAME) \\\n\t\t-f Dockerfile.dev .\n\t- docker buildx rm docker-compose-buildx\n\ndocker-clean:\n\t-$(foreach container_id,$(shell docker ps -f name=tools_awx -aq && docker ps -f name=tools_receptor -aq),docker stop $(container_id); docker rm -f $(container_id);)\n\t-$(foreach image_id,$(shell docker images --filter=reference='*/*/*awx_devel*' --filter=reference='*/*awx_devel*' --filter=reference='*awx_devel*' -aq),docker rmi --force $(image_id);)\n\ndocker-clean-volumes: docker-compose-clean docker-compose-container-group-clean\n\tdocker volume rm -f tools_var_lib_awx tools_awx_db tools_awx_db_15 tools_vault_1 tools_grafana_storage tools_prometheus_storage $(shell docker volume ls --filter name=tools_redis_socket_ -q)\n\ndocker-refresh: docker-clean docker-compose\n\n## Docker Development Environment with Elastic Stack Connected\ndocker-compose-elk: awx/projects docker-compose-sources\n\t$(DOCKER_COMPOSE) -f tools/docker-compose/_sources/docker-compose.yml -f tools/elastic/docker-compose.logstash-link.yml -f tools/elastic/docker-compose.elastic-override.yml up --no-recreate\n\ndocker-compose-cluster-elk: awx/projects docker-compose-sources\n\t$(DOCKER_COMPOSE) -f tools/docker-compose/_sources/docker-compose.yml -f tools/elastic/docker-compose.logstash-link-cluster.yml -f tools/elastic/docker-compose.elastic-override.yml up --no-recreate\n\ndocker-compose-container-group:\n\tMINIKUBE_CONTAINER_GROUP=true $(MAKE) docker-compose\n\nclean-elk:\n\tdocker stop tools_kibana_1\n\tdocker stop tools_logstash_1\n\tdocker stop tools_elasticsearch_1\n\tdocker rm tools_logstash_1\n\tdocker rm tools_elasticsearch_1\n\tdocker rm tools_kibana_1\n\nVERSION:\n\t@echo \"awx: $(VERSION)\"\n\nPYTHON_VERSION:\n\t@echo \"$(subst python,,$(PYTHON))\"\n\n.PHONY: version-for-buildyml\nversion-for-buildyml:\n\t@echo $(firstword $(subst +, ,$(VERSION)))\n# version-for-buildyml prints a special version string for build.yml,\n# chopping off the sha after the '+' sign.\n# tools/ansible/build.yml was doing this: make print-VERSION | cut -d + -f -1\n# This does the same thing in native make without\n# the pipe or the extra processes, and now the pb does `make version-for-buildyml`\n# Example:\n# \t22.1.1.dev38+g523c0d9781 becomes 22.1.1.dev38\n\n.PHONY: Dockerfile\n## Generate Dockerfile for awx image\nDockerfile: tools/ansible/roles/dockerfile/templates/Dockerfile.j2\n\t$(ANSIBLE_PLAYBOOK) tools/ansible/dockerfile.yml \\\n\t\t-e receptor_image=$(RECEPTOR_IMAGE) \\\n\t\t-e headless=$(HEADLESS)\n\n## Build awx image for deployment on Kubernetes environment.\nawx-kube-build: Dockerfile\n\tDOCKER_BUILDKIT=1 docker build -f Dockerfile \\\n\t\t--build-arg VERSION=$(VERSION) \\\n\t\t--build-arg SETUPTOOLS_SCM_PRETEND_VERSION=$(VERSION) \\\n\t\t--build-arg HEADLESS=$(HEADLESS) \\\n\t\t$(DOCKER_KUBE_CACHE_FLAG) \\\n\t\t-t $(IMAGE_KUBE) .\n\n## Build multi-arch awx image for deployment on Kubernetes environment.\nawx-kube-buildx: Dockerfile\n\t- docker buildx create --name awx-kube-buildx\n\tdocker buildx use awx-kube-buildx\n\t- docker buildx build \\\n\t\t--push \\\n\t\t--build-arg VERSION=$(VERSION) \\\n\t\t--build-arg SETUPTOOLS_SCM_PRETEND_VERSION=$(VERSION) \\\n\t\t--build-arg HEADLESS=$(HEADLESS) \\\n\t\t--platform=$(PLATFORMS) \\\n\t\t$(DOCKER_KUBE_CACHE_FLAG) \\\n\t\t--tag $(IMAGE_KUBE) \\\n\t\t-f Dockerfile .\n\t- docker buildx rm awx-kube-buildx\n\n\n.PHONY: Dockerfile.kube-dev\n## Generate Docker.kube-dev for awx_kube_devel image\nDockerfile.kube-dev: tools/ansible/roles/dockerfile/templates/Dockerfile.j2\n\t$(ANSIBLE_PLAYBOOK) tools/ansible/dockerfile.yml \\\n\t    -e dockerfile_name=Dockerfile.kube-dev \\\n\t    -e kube_dev=True \\\n\t    -e template_dest=_build_kube_dev \\\n\t    -e receptor_image=$(RECEPTOR_IMAGE)\n\n## Build awx_kube_devel image for development on local Kubernetes environment.\nawx-kube-dev-build: Dockerfile.kube-dev\n\tDOCKER_BUILDKIT=1 docker build -f Dockerfile.kube-dev \\\n\t    --build-arg BUILDKIT_INLINE_CACHE=1 \\\n\t     $(DOCKER_KUBE_DEV_CACHE_FLAG) \\\n\t    -t $(IMAGE_KUBE_DEV) .\n\n## Build and push multi-arch awx_kube_devel image for development on local Kubernetes environment.\nawx-kube-dev-buildx: Dockerfile.kube-dev\n\t- docker buildx create --name awx-kube-dev-buildx\n\tdocker buildx use awx-kube-dev-buildx\n\t- docker buildx build \\\n\t\t--push \\\n\t\t--build-arg BUILDKIT_INLINE_CACHE=1 \\\n\t\t$(DOCKER_KUBE_DEV_CACHE_FLAG) \\\n\t\t--platform=$(PLATFORMS) \\\n\t\t--tag $(IMAGE_KUBE_DEV) \\\n\t\t-f Dockerfile.kube-dev .\n\t- docker buildx rm awx-kube-dev-buildx\n\nkind-dev-load: awx-kube-dev-build\n\t$(KIND_BIN) load docker-image $(IMAGE_KUBE_DEV)\n\n# Translation TASKS\n# --------------------------------------\n\n## generate API django .pot .po\nmessages:\n\t@if [ \"$(VENV_BASE)\" ]; then \\\n\t\t. $(VENV_BASE)/awx/bin/activate; \\\n\tfi; \\\n\t$(PYTHON) manage.py makemessages -l en_us --keep-pot\n\n.PHONY: print-%\nprint-%:\n\t@echo $($*)\n\n# HELP related targets\n# --------------------------------------\n\nHELP_FILTER=.PHONY\n\n## Display help targets\nhelp:\n\t@printf \"Available targets:\\n\"\n\t@$(MAKE) -s help/generate | grep -vE \"\\w($(HELP_FILTER))\"\n\n## Display help for all targets\nhelp/all:\n\t@printf \"Available targets:\\n\"\n\t@$(MAKE) -s help/generate\n\n## Generate help output from MAKEFILE_LIST\nhelp/generate:\n\t@awk '/^[-a-zA-Z_0-9%:\\\\\\.\\/]+:/ { \\\n\t\thelpMessage = match(lastLine, /^## (.*)/); \\\n\t\tif (helpMessage) { \\\n\t\t\thelpCommand = $$1; \\\n\t\t\thelpMessage = substr(lastLine, RSTART + 3, RLENGTH); \\\n\t\t\tgsub(\"\\\\\\\\\", \"\", helpCommand); \\\n\t\t\tgsub(\":+$$\", \"\", helpCommand); \\\n\t\t\tprintf \"  \\x1b[32;01m%-35s\\x1b[0m %s\\n\", helpCommand, helpMessage; \\\n\t\t} else { \\\n\t\t\thelpCommand = $$1; \\\n\t\t\tgsub(\"\\\\\\\\\", \"\", helpCommand); \\\n\t\t\tgsub(\":+$$\", \"\", helpCommand); \\\n\t\t\tprintf \"  \\x1b[32;01m%-35s\\x1b[0m %s\\n\", helpCommand, \"No help available\"; \\\n\t\t} \\\n\t} \\\n\t{ lastLine = $$0 }' $(MAKEFILE_LIST) | sort -u\n\t@printf \"\\n\"\n\n## Display help for ui targets\nhelp/ui:\n\t@$(MAKE) -s help MAKEFILE_LIST=\"awx/ui/Makefile\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.466796875,
          "content": "[![CI](https://github.com/ansible/awx/actions/workflows/ci.yml/badge.svg?branch=devel)](https://github.com/ansible/awx/actions/workflows/ci.yml) [![codecov](https://codecov.io/github/ansible/awx/graph/badge.svg?token=4L4GSP9IAR)](https://codecov.io/github/ansible/awx) [![Code of Conduct](https://img.shields.io/badge/code%20of%20conduct-Ansible-yellow.svg)](https://docs.ansible.com/ansible/latest/community/code_of_conduct.html) [![Apache v2 License](https://img.shields.io/badge/license-Apache%202.0-brightgreen.svg)](https://github.com/ansible/awx/blob/devel/LICENSE.md) [![AWX on the Ansible Forum](https://img.shields.io/badge/mailing%20list-AWX-orange.svg)](https://forum.ansible.com/tag/awx)\n[![Ansible Matrix](https://img.shields.io/badge/matrix-Ansible%20Community-blueviolet.svg?logo=matrix)](https://chat.ansible.im/#/welcome) [![Ansible Discourse](https://img.shields.io/badge/discourse-Ansible%20Community-yellowgreen.svg?logo=discourse)](https://forum.ansible.com)\n\n<img src=\"https://raw.githubusercontent.com/ansible/awx-logos/master/awx/ui/client/assets/logo-login.svg?sanitize=true\" width=200 alt=\"AWX\" />\n\nAWX provides a web-based user interface, REST API, and task engine built on top of [Ansible](https://github.com/ansible/ansible). It is one of the upstream projects for [Red Hat Ansible Automation Platform](https://www.ansible.com/products/automation-platform).\n\nTo install AWX, please view the [Install guide](./INSTALL.md).\n\nTo learn more about using AWX, view the [AWX docs site](https://ansible.readthedocs.io/projects/awx/en/latest/).\n\nThe AWX Project Frequently Asked Questions can be found [here](https://www.ansible.com/awx-project-faq).\n\nThe AWX logos and branding assets are covered by [our trademark guidelines](https://github.com/ansible/awx-logos/blob/master/TRADEMARKS.md).\n\nContributing\n------------\n\n- Refer to the [Contributing guide](./CONTRIBUTING.md) to get started developing, testing, and building AWX.\n- All code submissions are made through pull requests against the `devel` branch.\n- All contributors must use `git commit --signoff` for any commit to be merged and agree that usage of `--signoff` constitutes agreement with the terms of [DCO 1.1](./DCO_1_1.md)\n- Take care to make sure no merge commits are in the submission, and use `git rebase` vs. `git merge` for this reason.\n- If submitting a large code change, it's a good idea to join discuss via the [Ansible Forum](https://forum.ansible.com/tag/awx). This helps everyone know what's going on, and it also helps save time and effort if the community decides some changes are needed.\n\nReporting Issues\n----------------\n\nIf you're experiencing a problem that you feel is a bug in AWX or have ideas for improving AWX, we encourage you to open an issue and share your feedback. But before opening a new issue, we ask that you please take a look at our [Issues guide](./ISSUES.md).\n\nCode of Conduct\n---------------\n\nWe require all of our community members and contributors to adhere to the [Ansible code of conduct](http://docs.ansible.com/ansible/latest/community/code_of_conduct.html). If you have questions or need assistance, please reach out to our community team at [codeofconduct@ansible.com](mailto:codeofconduct@ansible.com)\n\nGet Involved\n------------\n\nWe welcome your feedback and ideas via the [Ansible Forum](https://forum.ansible.com/tag/awx).\n\nFor a full list of all the ways to talk with the Ansible Community, see the [AWX Communication guide](https://ansible.readthedocs.io/projects/awx/en/latest/contributor/communication.html).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.2578125,
          "content": "For all security related bugs, email security@ansible.com instead of using this issue tracker and you will receive a prompt response.\n\nFor more information on the Ansible community's practices regarding responsible disclosure, see https://www.ansible.com/security\n"
        },
        {
          "name": "awx",
          "type": "tree",
          "content": null
        },
        {
          "name": "awx_collection",
          "type": "tree",
          "content": null
        },
        {
          "name": "awxkit",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "manage.py",
          "type": "blob",
          "size": 0.146484375,
          "content": "#!/usr/bin/env python\n\n# Copyright (c) 2015 Ansible, Inc.\n# All Rights Reserved.\n\nif __name__ == '__main__':\n    from awx import manage\n\n    manage()\n"
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 0.080078125,
          "content": "{\n  \"name\": \"awx\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {}\n}\n"
        },
        {
          "name": "pre-commit.sh",
          "type": "blob",
          "size": 0.908203125,
          "content": "#!/usr/bin/env bash\nif [ -z $AWX_IGNORE_BLACK ] ; then\n\tpython_files_changed=$(git diff --cached --name-only --diff-filter=AM awx/ awxkit/ tools/ | grep -E '\\.py$')\n\tif [ \"x$python_files_changed\" != \"x\" ] ; then\n        \tblack --check $python_files_changed || \\\n\t\tif [ $? != 0 ] ; then\n        \t\techo 'To fix this, run `make black` to auto-format your code prior to commit, or set AWX_IGNORE_BLACK=1'\n        \t\texit 1\n\t\tfi\n\tfi\nfi\n\nif [ -z $AWX_IGNORE_USER ] ; then\n\tFAIL=0\n\texport CHANGED_FILES=$(git diff --cached --name-only --diff-filter=AM)\n\tif [ -d ./pre-commit-user ] ; then\n\t\tfor SCRIPT in `find ./pre-commit-user -type f` ; do\n\t\t\tif [ -x $SCRIPT ] ; then\n\t\t\t\techo \"Running user pre-commit hook $SCRIPT\"\n\t\t\t\t$SCRIPT\n\t\t\t\tif [ $? != 0 ] ; then\n\t\t\t\t\techo \"User test $SCRIPT failed\"\n\t\t\t       \t\tFAIL=1\n\t\t\t\tfi\n\t\t\tfi\n\t\tdone\n\tfi\n\tif [ $FAIL == 1 ] ; then\n\t\techo \"One or more user tests failed, see messages above\"\n\t\texit 1\n\tfi\nfi\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.39453125,
          "content": "[build-system]\nrequires = [\"setuptools>=45\", \"setuptools_scm[toml]>=6.2\"]\nbuild-backend = \"setuptools.build_meta\"\n\n# Do not uncomment the line below. We need to be able to override the version via a file, and this\n# causes the \"version\" key in setup.cfg to be ignored.\n# [tool.setuptools_scm]\n\n[tool.black]\nline-length = 160\nfast = true\nskip-string-normalization = true\nextend-exclude = \"awx_collection\"\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 6.8046875,
          "content": "[pytest]\nDJANGO_SETTINGS_MODULE = awx.main.tests.settings_for_test\npython_files = *.py\naddopts = --reuse-db --nomigrations --tb=native\nmarkers =\n    ac: access control test\n    survey: tests related to survey feature\n    inventory_import: tests of code used by inventory import command\n    defined_in_file:\n    job_permissions:\n    activity_stream_access:\n    job_runtime_vars:\n    fixture_args:\n\nfilterwarnings =\n  error\n\n  # NOTE: The following are introduced upgrading python 3.11 to python 3.12\n  # FIXME: Upgrade django-polymorphic https://github.com/jazzband/django-polymorphic/pull/541\n  once:Deprecated call to `pkg_resources.declare_namespace\\('sphinxcontrib'\\)`.\\nImplementing implicit namespace packages \\(as specified in PEP 420\\) is preferred to `pkg_resources.declare_namespace`.:DeprecationWarning\n\n  # FIXME: Upgrade protobuf https://github.com/protocolbuffers/protobuf/issues/15077\n  once:Type google._upb._message.* uses PyType_Spec with a metaclass that has custom tp_new:DeprecationWarning\n\n  # FIXME: Upgrade python-dateutil https://github.com/dateutil/dateutil/issues/1340\n  once:datetime.datetime.utcfromtimestamp\\(\\) is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC:DeprecationWarning\n\n  # NOTE: the following are present using python 3.11\n  # FIXME: Set `USE_TZ` to `True`.\n  once:The default value of USE_TZ will change from False to True in Django 5.0. Set USE_TZ to False in your project settings if you want to keep the current default behavior.:django.utils.deprecation.RemovedInDjango50Warning:django.conf\n\n  # FIXME: Delete this entry once `USE_L10N` use is removed.\n  once:The USE_L10N setting is deprecated. Starting with Django 5.0, localized formatting of data will always be enabled. For example Django will display numbers and dates using the format of the current locale.:django.utils.deprecation.RemovedInDjango50Warning:django.conf\n\n  # FIXME: Delete this entry once `pyparsing` is updated.\n  once:module 'sre_constants' is deprecated:DeprecationWarning:_pytest.assertion.rewrite\n\n  # FIXME: Delete this entry once `polymorphic` is updated.\n  once:pkg_resources is deprecated as an API. See https.//setuptools.pypa.io/en/latest/pkg_resources.html:DeprecationWarning:_pytest.assertion.rewrite\n\n  # FIXME: Delete this entry once `zope` is updated.\n  once:Deprecated call to `pkg_resources.declare_namespace.'zope'.`.\\nImplementing implicit namespace packages .as specified in PEP 420. is preferred to `pkg_resources.declare_namespace`. See https.//setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages:DeprecationWarning:\n\n  # FIXME: Delete this entry once `coreapi` is updated.\n  once:'cgi' is deprecated and slated for removal in Python 3.13:DeprecationWarning:_pytest.assertion.rewrite\n\n  # FIXME: Delete this entry once the use of `distutils` is exterminated from the repo.\n  once:The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives:DeprecationWarning:_pytest.assertion.rewrite\n\n  # FIXME: Delete this entry once `coreapi` is deleted from the dependencies\n  # FIXME: and is no longer imported at runtime.\n  once:CoreAPI compatibility is deprecated and will be removed in DRF 3.17:rest_framework.RemovedInDRF317Warning:rest_framework.schemas.coreapi\n\n  # FIXME: Delete this entry once naive dates aren't passed to DB lookup\n  # FIXME: methods. Not sure where, might be in awx's views or in DAB.\n  once:DateTimeField User.date_joined received a naive datetime .2020-01-01 00.00.00. while time zone support is active.:RuntimeWarning:django.db.models.fields\n\n  # FIXME: Delete this entry once the deprecation is acted upon.\n  once:'index_together' is deprecated. Use 'Meta.indexes' in 'main.\\w+' instead.:django.utils.deprecation.RemovedInDjango51Warning:django.db.models.options\n\n  # FIXME: Update `awx.main.migrations._dab_rbac` and delete this entry.\n  # once:Using QuerySet.iterator.. after prefetch_related.. without specifying chunk_size is deprecated.:django.utils.deprecation.RemovedInDjango50Warning:django.db.models.query\n  once:Using QuerySet.iterator.. after prefetch_related.. without specifying chunk_size is deprecated.:django.utils.deprecation.RemovedInDjango50Warning:awx.main.migrations._dab_rbac\n\n  # FIXME: Delete this entry once the **broken** always-true assertions in the\n  # FIXME: following tests are fixed:\n  # * `awx/main/tests/unit/utils/test_common.py::TestHostnameRegexValidator::test_good_call`\n  # * `awx/main/tests/unit/utils/test_common.py::TestHostnameRegexValidator::test_bad_call_with_inverse`\n  once:assertion is always true, perhaps remove parentheses\\?:pytest.PytestAssertRewriteWarning:\n\n  # FIXME: Figure this out, fix and then delete the entry. It's not entirely\n  # FIXME: clear what emits it and where.\n  once:Pagination may yield inconsistent results with an unordered object_list. .class 'awx.main.models.workflow.WorkflowJobTemplateNode'. QuerySet.:django.core.paginator.UnorderedObjectListWarning:django.core.paginator\n\n  # FIXME: Figure this out, fix and then delete the entry.\n  once::django.core.paginator.UnorderedObjectListWarning:rest_framework.pagination\n\n  # FIXME: Replace use of `distro.linux_distribution()` via a context manager\n  # FIXME: in `awx/main/analytics/collectors.py` and then delete the entry.\n  once:distro.linux_distribution.. is deprecated. It should only be used as a compatibility shim with Python's platform.linux_distribution... Please use distro.id.., distro.version.. and distro.name.. instead.:DeprecationWarning:awx.main.analytics.collectors\n\n  # FIXME: Figure this out, fix and then delete the entry.\n  once:\\nUsing ProtocolTypeRouter without an explicit \"http\" key is deprecated.\\nGiven that you have not passed the \"http\" you likely should use Django's\\nget_asgi_application...:DeprecationWarning:awx.main.routing\n\n  # FIXME: Figure this out, fix and then delete the entry.\n  once:Channel's inbuilt http protocol AsgiHandler is deprecated. Use Django's get_asgi_application.. instead.:DeprecationWarning:channels.routing\n\n  # FIXME: Use `codecs.open()` via a context manager\n  # FIXME: in `awx/main/utils/ansible.py` to close hanging file descriptors\n  # FIXME: and then delete the entry.\n  once:unclosed file <_io.BufferedReader name='[^']+'>:ResourceWarning:awx.main.utils.ansible\n\n  # FIXME: Use `open()` via a context manager\n  # FIXME: in `awx/main/tests/unit/test_tasks.py` to close hanging file\n  # FIXME: descriptors and then delete the entry.\n  once:unclosed file <_io.TextIOWrapper name='[^']+' mode='r' encoding='UTF-8'>:ResourceWarning:awx.main.tests.unit.test_tasks\n\n# https://docs.pytest.org/en/stable/usage.html#creating-junitxml-format-files\njunit_duration_report = call\n# xunit1 contains more metadata than xunit2 so it's better for CI UIs:\njunit_family = xunit1\njunit_logging = all\njunit_log_passing_tests = true\njunit_suite_name = awx_test_suite\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.2431640625,
          "content": "[metadata]\nname = awx\nauthor = Red Hat\nauthor_email = info@ansible.com\nversion = attr: awx.get_version\n\n[options]\npackages =\n    awx\nzip_safe = False\ninclude_package_data = True\n\n[options.entry_points]\nconsole_scripts =\n    awx-manage = awx:manage\n\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.03515625,
          "content": "[tox]\nisolated_build = True\n\n[testenv:linters]\ndeps =\n  black\n  flake8\n  yamllint\nallowlist_externals = make\nsetenv =\n  BLACK_ARGS = --check\n  PYTHON = python3\ncommands =\n  make black\n  flake8 awx awxkit awx_collection\n  yamllint -s .\n\n[flake8]\nselect = F401,F402,F821,F823,F841,F811,E265,E266,F541,W605,E722,F822,F523,W291,F405\nexclude = env,awx_collection_build\n\n[testenv:pip-compile-docs]\ndescription = Compile docs build lockfiles\ndeps =\n  # pip-tools config file support was introduced in v7\n  pip-tools >= 7\ncommands =\n  {envpython} -m piptools compile \\\n    --output-file=docs/docsite/requirements.txt \\\n    docs/docsite/requirements.in \\\n    {posargs:--upgrade}\n\n[testenv:docs]\ndescription = Build documentation\ndeps =\n  -r{toxinidir}/docs/docsite/requirements.in\n  -c{toxinidir}/docs/docsite/requirements.txt\ncommands =\n  python {toxinidir}/docs/docsite/rst/rest_api/_swagger/download-json.py\n  sphinx-build -T -E -W -n --keep-going {tty:--color} -j auto -c docs/docsite -d docs/docsite/build/doctrees -b html docs/docsite/rst docs/docsite/build/html\n"
        }
      ]
    }
  ]
}