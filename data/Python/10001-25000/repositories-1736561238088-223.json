{
  "metadata": {
    "timestamp": 1736561238088,
    "page": 223,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "state-spaces/mamba",
      "stars": 13748,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.05078125,
          "content": "*__pycache__/\n*.egg-info/\nbuild/\n**.so\n*.hip\n*_hip.*"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.140625,
          "content": "[submodule \"3rdparty/lm-evaluation-harness\"]\n\tpath = 3rdparty/lm-evaluation-harness\n\turl = https://github.com/EleutherAI/lm-evaluation-harness/\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.0517578125,
          "content": "Tri Dao, tri@tridao.me\nAlbert Gu, agu@andrew.cmu.edu\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.08203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2023 Tri Dao, Albert Gu\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.220703125,
          "content": "# Mamba\n\n![Mamba](assets/selection.png \"Selective State Space\")\n> **Mamba: Linear-Time Sequence Modeling with Selective State Spaces**\\\n> Albert Gu*, Tri Dao*\\\n> Paper: https://arxiv.org/abs/2312.00752\n\n![Mamba-2](assets/ssd_algorithm.png \"State Space Dual Model\")\n> **Transformers are SSMs: Generalized Models and Efficient Algorithms**\\\n>     **Through Structured State Space Duality**\\\n> Tri Dao*, Albert Gu*\\\n> Paper: https://arxiv.org/abs/2405.21060\n\n## About\n\nMamba is a new state space model architecture showing promising performance on information-dense data such as language modeling, where previous subquadratic models fall short of Transformers.\nIt is based on the line of progress on [structured state space models](https://github.com/state-spaces/s4),\nwith an efficient hardware-aware design and implementation in the spirit of [FlashAttention](https://github.com/Dao-AILab/flash-attention).\n\n## Installation\n\n- [Option] `pip install causal-conv1d>=1.4.0`: an efficient implementation of a simple causal Conv1d layer used inside the Mamba block.\n- `pip install mamba-ssm`: the core Mamba package.\n- `pip install mamba-ssm[causal-conv1d]`: To install core Mamba package and causal-conv1d.\n- `pip install mamba-ssm[dev]`: To install core Mamba package and dev depdencies.\n\nIt can also be built from source with `pip install .` from this repository.\n\nTry passing `--no-build-isolation` to `pip` if installation encounters difficulties either when building from source or installing from PyPi. Common `pip` complaints that can be resolved in this way include PyTorch versions, but other cases exist as well.\n\nOther requirements:\n- Linux\n- NVIDIA GPU\n- PyTorch 1.12+\n- CUDA 11.6+\n\nFor AMD cards, see additional prerequisites below.\n\n## Usage\n\nWe expose several levels of interface with the Mamba model.\n\n### Selective SSM\n\nMamba is based on a selective SSM layer, which is the focus of the paper (Section 3; Algorithm 2).\n\nSource: [ops/selective_scan_interface.py](mamba_ssm/ops/selective_scan_interface.py).\n\n### Mamba Block\n\nThe main module of this repository is the Mamba architecture block wrapping the selective SSM.\n\nSource: [modules/mamba_simple.py](mamba_ssm/modules/mamba_simple.py).\n\nUsage:\n``` python\nimport torch\nfrom mamba_ssm import Mamba\n\nbatch, length, dim = 2, 64, 16\nx = torch.randn(batch, length, dim).to(\"cuda\")\nmodel = Mamba(\n    # This module uses roughly 3 * expand * d_model^2 parameters\n    d_model=dim, # Model dimension d_model\n    d_state=16,  # SSM state expansion factor\n    d_conv=4,    # Local convolution width\n    expand=2,    # Block expansion factor\n).to(\"cuda\")\ny = model(x)\nassert y.shape == x.shape\n```\n\n### Mamba-2\n\nThe Mamba-2 block is implemented at [modules/mamba2.py](mamba_ssm/modules/mamba2.py).\n\nA simpler version is at [modules/mamba2_simple.py](mamba_ssm/modules/mamba2_simple.py)\n\nThe usage is similar to Mamba(-1):\n``` python\nfrom mamba_ssm import Mamba2\nmodel = Mamba2(\n    # This module uses roughly 3 * expand * d_model^2 parameters\n    d_model=dim, # Model dimension d_model\n    d_state=64,  # SSM state expansion factor, typically 64 or 128\n    d_conv=4,    # Local convolution width\n    expand=2,    # Block expansion factor\n).to(\"cuda\")\ny = model(x)\nassert y.shape == x.shape\n```\n\n#### SSD\n\nA minimal version of the inner SSD module (Listing 1 from the Mamba-2 paper) with conversion between \"discrete\" and \"continuous\" SSM versions\nis at [modules/ssd_minimal.py](mamba_ssm/modules/ssd_minimal.py).\n\n### Mamba Language Model\n\nFinally, we provide an example of a complete language model: a deep sequence model backbone (with repeating Mamba blocks) + language model head.\n\nSource: [models/mixer_seq_simple.py](mamba_ssm/models/mixer_seq_simple.py).\n\nThis is an example of how to integrate Mamba into an end-to-end neural network.\nThis example is used in the generation scripts below.\n\n\n## Pretrained Models\n\nPretrained models are uploaded to\n[Hugging Face](https://huggingface.co/state-spaces): `mamba-130m`, `mamba-370m`,\n`mamba-790m`, `mamba-1.4b`, `mamba-2.8b`, `mamba2-130m`, `mamba2-370m`,\n`mamba2-780m`, `mamba2-1.3b`, `mamba2-2.7b`, `transformerpp-2.7b`, `mamba2attn-2.7b`, trained on 300B tokens on the Pile, as well as `mamba-2.8b-slimpj`\n(trained on 600B tokens on the SlimPajama dataset).\n\n\nThe models will be autodownloaded by the generation script below.\n\nThese models were trained on the [Pile](https://huggingface.co/datasets/EleutherAI/pile), and follow the standard model dimensions described by GPT-3 and followed by many open source models:\n\n| Parameters | Layers | Model dim. | \n|------------|--------|------------|\n| 130M       | 24     | 768        |\n| 370M       | 48     | 1024       |\n| 790M       | 48     | 1536       |\n| 1.4B       | 48     | 2048       |\n| 2.8B       | 64     | 2560       |\n\n(The layer count of Mamba doubles that of a Transformer with similar size, as two Mamba blocks are needed for each \"layer\" (MHA block + MLP block) of a Transformer.)\n\nNote: these are base models trained only for 300B tokens, without any form of downstream modification (instruction tuning, etc.).\nPerformance is expected to be comparable or better than other architectures trained on similar data, but not to match larger or fine-tuned models.\n\n\n## Evaluations\n\nTo run zero-shot evaluations of models (corresponding to Table 3 of the paper),\nwe use the\n[lm-evaluation-harness](https://github.com/EleutherAI/lm-evaluation-harness)\nlibrary.\n\n1. Install `lm-evaluation-harness` by `pip install lm-eval==0.4.2`.\n2. Run evaluation with (more documentation at the [lm-evaluation-harness](https://github.com/EleutherAI/lm-evaluation-harness/tree/big-refactor) repo):\n``` sh\nlm_eval --model mamba_ssm --model_args pretrained=state-spaces/mamba-130m --tasks lambada_openai,hellaswag,piqa,arc_easy,arc_challenge,winogrande,openbookqa --device cuda --batch_size 256\npython evals/lm_harness_eval.py --model hf --model_args pretrained=EleutherAI/pythia-160m --tasks lambada_openai,hellaswag,piqa,arc_easy,arc_challenge,winogrande --device cuda --batch_size 64\n```\n\nTo reproduce the results on the `mamba-2.8b-slimpj` model reported in the blogposts:\n``` sh\nlm_eval --model mamba_ssm --model_args pretrained=state-spaces/mamba-2.8b-slimpj --tasks boolq,piqa,hellaswag,winogrande,arc_easy,arc_challenge,openbookqa,race,truthfulqa_mc2 --device cuda --batch_size 256\nlm_eval --model mamba_ssm --model_args pretrained=state-spaces/mamba-2.8b-slimpj --tasks mmlu --num_fewshot 5 --device cuda --batch_size 256\n```\n\nTo run evaluations on Mamba-2 models, simply replace the model names:\n``` sh\nlm_eval --model mamba_ssm --model_args pretrained=state-spaces/mamba2-2.7b --tasks lambada_openai,hellaswag,piqa,arc_easy,arc_challenge,winogrande,openbookqa --device cuda --batch_size 256\nlm_eval --model mamba_ssm --model_args pretrained=state-spaces/transformerpp-2.7b --tasks lambada_openai,hellaswag,piqa,arc_easy,arc_challenge,winogrande,openbookqa --device cuda --batch_size 256\nlm_eval --model mamba_ssm --model_args pretrained=state-spaces/mamba2attn-2.7b --tasks lambada_openai,hellaswag,piqa,arc_easy,arc_challenge,winogrande,openbookqa --device cuda --batch_size 256\n```\n\nNote that the result of each task might differ from reported values by 0.1-0.3 due to noise in the evaluation process.\n\n## Inference\n\nThe script [benchmarks/benchmark_generation_mamba_simple.py](benchmarks/benchmark_generation_mamba_simple.py)\n1. autoloads a model from the Hugging Face Hub,\n2. generates completions of a user-specified prompt,\n3. benchmarks the inference speed of this generation.\n\nOther configurable options include the top-p (nucleus sampling) probability, and the softmax temperature.\n\n### Examples\n\nTo test generation latency (e.g. batch size = 1) with different sampling strategies:\n\n``` sh\npython benchmarks/benchmark_generation_mamba_simple.py --model-name \"state-spaces/mamba-2.8b\" --prompt \"My cat wrote all this CUDA code for a new language model and\" --topp 0.9 --temperature 0.7 --repetition-penalty 1.2\npython benchmarks/benchmark_generation_mamba_simple.py --model-name \"EleutherAI/pythia-2.8b\" --prompt \"My cat wrote all this CUDA code for a new language model and\" --topp 0.9 --temperature 0.7 --repetition-penalty 1.2\npython benchmarks/benchmark_generation_mamba_simple.py --model-name \"state-spaces/mamba-2.8b\" --prompt \"My cat wrote all this CUDA code for a new language model and\" --minp 0.05 --topk 0 --temperature 0.7 --repetition-penalty 1.2\n```\n\nTo test generation throughput with random prompts (e.g. large batch size):\n``` sh\npython benchmarks/benchmark_generation_mamba_simple.py --model-name \"state-spaces/mamba-2.8b\" --batch 64\npython benchmarks/benchmark_generation_mamba_simple.py --model-name \"EleutherAI/pythia-2.8b\" --batch 64\n```\n\nWith Mamba-2, you just need to change the model name:\n``` sh\npython benchmarks/benchmark_generation_mamba_simple.py --model-name \"state-spaces/mamba2-2.7b\" --prompt \"My cat wrote all this CUDA code for a new language model and\" --topp 0.9 --temperature 0.7 --repetition-penalty 1.2\n```\n\n\n## Troubleshooting\n\n### Precision\nOur models were trained using PyTorch [AMP](https://pytorch.org/docs/stable/amp.html) for mixed precision. AMP keeps model parameters in float32 and casts to half precision when necessary.\nOn the other hand, other frameworks like DeepSpeed store parameters in float16 and upcasts when necessary (e.g. for optimizer accumulation).\n\nWe've observed that higher precision for the main model parameters may be necessary, because SSMs are sensitive to their recurrent dynamics. If you are experiencing instabilities,\nas a first step please try a framework storing parameters in fp32 (such as AMP).\n\n### Initialization\nSome parts of the model have initializations inherited from prior work on S4 models.\nFor [example](https://github.com/state-spaces/mamba/blob/f0affcf69f06d1d06cef018ff640bf080a11c421/mamba_ssm/modules/mamba_simple.py#L102), the $\\Delta$ parameter has a targeted range by initializing the bias of its linear projection.\nHowever, some frameworks may have post-initialization hooks (e.g. setting all bias terms in `nn.Linear` modules to zero).\nIf this is the case, you may have to add custom logic (e.g. this [line](https://github.com/state-spaces/mamba/blob/f0affcf69f06d1d06cef018ff640bf080a11c421/mamba_ssm/modules/mamba_simple.py#L104) turns off re-initializing in our trainer, but would be a no-op in any other framework)\nthat is specific to the training framework.\n\n## Additional Prerequisites for AMD cards\n\n### Patching ROCm\n\nIf you are on ROCm 6.0, run the following steps to avoid errors during compilation. This is not required for ROCm 6.1 onwards.\n\n1. Locate your ROCm installation directory. This is typically found at `/opt/rocm/`, but may vary depending on your installation.\n\n2. Apply the Patch. Run with `sudo` in case you encounter permission issues.\n   ```bash\n    patch /opt/rocm/include/hip/amd_detail/amd_hip_bf16.h < rocm_patch/rocm6_0.patch \n   ```\n\n\n## Citation\n\nIf you use this codebase, or otherwise find our work valuable, please cite Mamba:\n```\n@article{mamba,\n  title={Mamba: Linear-Time Sequence Modeling with Selective State Spaces},\n  author={Gu, Albert and Dao, Tri},\n  journal={arXiv preprint arXiv:2312.00752},\n  year={2023}\n}\n\n@inproceedings{mamba2,\n  title={Transformers are {SSM}s: Generalized Models and Efficient Algorithms Through Structured State Space Duality},\n  author={Dao, Tri and Gu, Albert},\n  booktitle={International Conference on Machine Learning (ICML)},\n  year={2024}\n}\n\n```\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "csrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "evals",
          "type": "tree",
          "content": null
        },
        {
          "name": "mamba_ssm",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.953125,
          "content": "[project]\nname = \"mamba_ssm\"\ndescription = \"Mamba state-space model\"\nreadme = \"README.md\"\nauthors = [\n    { name = \"Tri Dao\", email = \"tri@tridao.me\" },\n    { name = \"Albert Gu\", email = \"agu@cs.cmu.edu\" }\n]\nrequires-python = \">= 3.9\"\ndynamic = [\"version\"]\nlicense = { file = \"LICENSE\" }  # Include a LICENSE file in your repo\nkeywords = [\"cuda\", \"pytorch\", \"state-space model\"]\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"Operating System :: Unix\"\n]\ndependencies = [\n    \"torch\",\n    \"ninja\",\n    \"einops\",\n    \"transformers\",\n    \"packaging\",\n    \"setuptools>=61.0.0\",\n]\n[project.urls]\nRepository = \"https://github.com/state-spaces/mamba\"\n\n[project.optional-dependencies]\ncausal-conv1d = [\n    \"causal-conv1d>=1.2.0\"\n]\ndev = [\n    \"pytest\"\n]\n\n\n[build-system]\nrequires = [\n    \"setuptools>=61.0.0\",\n    \"wheel\",\n    \"torch\",\n    \"packaging\",\n    \"ninja\",\n]\nbuild-backend = \"setuptools.build_meta\"\n"
        },
        {
          "name": "rocm_patch",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 13.3515625,
          "content": "# Copyright (c) 2023, Albert Gu, Tri Dao.\nimport sys\nimport warnings\nimport os\nimport re\nimport ast\nfrom pathlib import Path\nfrom packaging.version import parse, Version\nimport platform\nimport shutil\n\nfrom setuptools import setup, find_packages\nimport subprocess\n\nimport urllib.request\nimport urllib.error\nfrom wheel.bdist_wheel import bdist_wheel as _bdist_wheel\n\nimport torch\nfrom torch.utils.cpp_extension import (\n    BuildExtension,\n    CUDAExtension,\n    CUDA_HOME,\n    HIP_HOME\n)\n\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\n    long_description = fh.read()\n\n\n# ninja build does not work unless include_dirs are abs path\nthis_dir = os.path.dirname(os.path.abspath(__file__))\n\nPACKAGE_NAME = \"mamba_ssm\"\n\nBASE_WHEEL_URL = \"https://github.com/state-spaces/mamba/releases/download/{tag_name}/{wheel_name}\"\n\n# FORCE_BUILD: Force a fresh build locally, instead of attempting to find prebuilt wheels\n# SKIP_CUDA_BUILD: Intended to allow CI to use a simple `python setup.py sdist` run to copy over raw files, without any cuda compilation\nFORCE_BUILD = os.getenv(\"MAMBA_FORCE_BUILD\", \"FALSE\") == \"TRUE\"\nSKIP_CUDA_BUILD = os.getenv(\"MAMBA_SKIP_CUDA_BUILD\", \"FALSE\") == \"TRUE\"\n# For CI, we want the option to build with C++11 ABI since the nvcr images use C++11 ABI\nFORCE_CXX11_ABI = os.getenv(\"MAMBA_FORCE_CXX11_ABI\", \"FALSE\") == \"TRUE\"\n\n\ndef get_platform():\n    \"\"\"\n    Returns the platform name as used in wheel filenames.\n    \"\"\"\n    if sys.platform.startswith(\"linux\"):\n        return \"linux_x86_64\"\n    elif sys.platform == \"darwin\":\n        mac_version = \".\".join(platform.mac_ver()[0].split(\".\")[:2])\n        return f\"macosx_{mac_version}_x86_64\"\n    elif sys.platform == \"win32\":\n        return \"win_amd64\"\n    else:\n        raise ValueError(\"Unsupported platform: {}\".format(sys.platform))\n\n\ndef get_cuda_bare_metal_version(cuda_dir):\n    raw_output = subprocess.check_output(\n        [cuda_dir + \"/bin/nvcc\", \"-V\"], universal_newlines=True\n    )\n    output = raw_output.split()\n    release_idx = output.index(\"release\") + 1\n    bare_metal_ver = parse(output[release_idx].split(\",\")[0])\n\n    return raw_output, bare_metal_ver\n\n\ndef get_hip_version(rocm_dir):\n\n    hipcc_bin = \"hipcc\" if rocm_dir is None else os.path.join(rocm_dir, \"bin\", \"hipcc\")\n    try:\n        raw_output = subprocess.check_output(\n            [hipcc_bin, \"--version\"], universal_newlines=True\n        )\n    except Exception as e:\n        print(\n            f\"hip installation not found: {e} ROCM_PATH={os.environ.get('ROCM_PATH')}\"\n        )\n        return None, None\n\n    for line in raw_output.split(\"\\n\"):\n        if \"HIP version\" in line:\n            rocm_version = parse(line.split()[-1].rstrip('-').replace('-', '+')) # local version is not parsed correctly\n            return line, rocm_version\n\n    return None, None\n\n\ndef get_torch_hip_version():\n\n    if torch.version.hip:\n        return parse(torch.version.hip.split()[-1].rstrip('-').replace('-', '+'))\n    else:\n        return None\n\n\ndef check_if_hip_home_none(global_option: str) -> None:\n\n    if HIP_HOME is not None:\n        return\n    # warn instead of error because user could be downloading prebuilt wheels, so hipcc won't be necessary\n    # in that case.\n    warnings.warn(\n        f\"{global_option} was requested, but hipcc was not found.  Are you sure your environment has hipcc available?\"\n    )\n\n\ndef check_if_cuda_home_none(global_option: str) -> None:\n    if CUDA_HOME is not None:\n        return\n    # warn instead of error because user could be downloading prebuilt wheels, so nvcc won't be necessary\n    # in that case.\n    warnings.warn(\n        f\"{global_option} was requested, but nvcc was not found.  Are you sure your environment has nvcc available?  \"\n        \"If you're installing within a container from https://hub.docker.com/r/pytorch/pytorch, \"\n        \"only images whose names contain 'devel' will provide nvcc.\"\n    )\n\n\ndef append_nvcc_threads(nvcc_extra_args):\n    return nvcc_extra_args + [\"--threads\", \"4\"]\n\n\ncmdclass = {}\next_modules = []\n\n\nHIP_BUILD = bool(torch.version.hip)\n\nif not SKIP_CUDA_BUILD:\n    print(\"\\n\\ntorch.__version__  = {}\\n\\n\".format(torch.__version__))\n    TORCH_MAJOR = int(torch.__version__.split(\".\")[0])\n    TORCH_MINOR = int(torch.__version__.split(\".\")[1])\n\n    cc_flag = []\n\n    if HIP_BUILD:\n        check_if_hip_home_none(PACKAGE_NAME)\n\n        rocm_home = os.getenv(\"ROCM_PATH\")\n        _, hip_version = get_hip_version(rocm_home)\n\n        if HIP_HOME is not None:\n            if hip_version < Version(\"6.0\"):\n                raise RuntimeError(\n                    f\"{PACKAGE_NAME} is only supported on ROCm 6.0 and above.  \"\n                    \"Note: make sure HIP has a supported version by running hipcc --version.\"\n                )\n            if hip_version == Version(\"6.0\"):\n                warnings.warn(\n                    f\"{PACKAGE_NAME} requires a patch to be applied when running on ROCm 6.0. \"\n                    \"Refer to the README.md for detailed instructions.\",\n                    UserWarning\n                )\n\n        cc_flag.append(\"-DBUILD_PYTHON_PACKAGE\")\n\n    else:\n        check_if_cuda_home_none(PACKAGE_NAME)\n        # Check, if CUDA11 is installed for compute capability 8.0\n\n        if CUDA_HOME is not None:\n            _, bare_metal_version = get_cuda_bare_metal_version(CUDA_HOME)\n            if bare_metal_version < Version(\"11.6\"):\n                raise RuntimeError(\n                    f\"{PACKAGE_NAME} is only supported on CUDA 11.6 and above.  \"\n                    \"Note: make sure nvcc has a supported version by running nvcc -V.\"\n                )\n\n        cc_flag.append(\"-gencode\")\n        cc_flag.append(\"arch=compute_53,code=sm_53\")\n        cc_flag.append(\"-gencode\")\n        cc_flag.append(\"arch=compute_62,code=sm_62\")\n        cc_flag.append(\"-gencode\")\n        cc_flag.append(\"arch=compute_70,code=sm_70\")\n        cc_flag.append(\"-gencode\")\n        cc_flag.append(\"arch=compute_72,code=sm_72\")\n        cc_flag.append(\"-gencode\")\n        cc_flag.append(\"arch=compute_80,code=sm_80\")\n        cc_flag.append(\"-gencode\")\n        cc_flag.append(\"arch=compute_87,code=sm_87\")\n\n        if bare_metal_version >= Version(\"11.8\"):\n            cc_flag.append(\"-gencode\")\n            cc_flag.append(\"arch=compute_90,code=sm_90\")\n\n\n    # HACK: The compiler flag -D_GLIBCXX_USE_CXX11_ABI is set to be the same as\n    # torch._C._GLIBCXX_USE_CXX11_ABI\n    # https://github.com/pytorch/pytorch/blob/8472c24e3b5b60150096486616d98b7bea01500b/torch/utils/cpp_extension.py#L920\n    if FORCE_CXX11_ABI:\n        torch._C._GLIBCXX_USE_CXX11_ABI = True\n\n    if HIP_BUILD:\n\n        extra_compile_args = {\n            \"cxx\": [\"-O3\", \"-std=c++17\"],\n            \"nvcc\": [\n                \"-O3\",\n                \"-std=c++17\",\n                f\"--offload-arch={os.getenv('HIP_ARCHITECTURES', 'native')}\",\n                \"-U__CUDA_NO_HALF_OPERATORS__\",\n                \"-U__CUDA_NO_HALF_CONVERSIONS__\",\n                \"-fgpu-flush-denormals-to-zero\",\n            ]\n            + cc_flag,\n        }\n    else:\n        extra_compile_args = {\n            \"cxx\": [\"-O3\", \"-std=c++17\"],\n            \"nvcc\": append_nvcc_threads(\n                [\n                    \"-O3\",\n                    \"-std=c++17\",\n                    \"-U__CUDA_NO_HALF_OPERATORS__\",\n                    \"-U__CUDA_NO_HALF_CONVERSIONS__\",\n                    \"-U__CUDA_NO_BFLOAT16_OPERATORS__\",\n                    \"-U__CUDA_NO_BFLOAT16_CONVERSIONS__\",\n                    \"-U__CUDA_NO_BFLOAT162_OPERATORS__\",\n                    \"-U__CUDA_NO_BFLOAT162_CONVERSIONS__\",\n                    \"--expt-relaxed-constexpr\",\n                    \"--expt-extended-lambda\",\n                    \"--use_fast_math\",\n                    \"--ptxas-options=-v\",\n                    \"-lineinfo\",\n                ]\n                + cc_flag\n            ),\n        }\n\n    ext_modules.append(\n        CUDAExtension(\n            name=\"selective_scan_cuda\",\n            sources=[\n                \"csrc/selective_scan/selective_scan.cpp\",\n                \"csrc/selective_scan/selective_scan_fwd_fp32.cu\",\n                \"csrc/selective_scan/selective_scan_fwd_fp16.cu\",\n                \"csrc/selective_scan/selective_scan_fwd_bf16.cu\",\n                \"csrc/selective_scan/selective_scan_bwd_fp32_real.cu\",\n                \"csrc/selective_scan/selective_scan_bwd_fp32_complex.cu\",\n                \"csrc/selective_scan/selective_scan_bwd_fp16_real.cu\",\n                \"csrc/selective_scan/selective_scan_bwd_fp16_complex.cu\",\n                \"csrc/selective_scan/selective_scan_bwd_bf16_real.cu\",\n                \"csrc/selective_scan/selective_scan_bwd_bf16_complex.cu\",\n            ],\n            extra_compile_args=extra_compile_args,\n            include_dirs=[Path(this_dir) / \"csrc\" / \"selective_scan\"],\n        )\n    )\n\n\ndef get_package_version():\n    with open(Path(this_dir) / PACKAGE_NAME / \"__init__.py\", \"r\") as f:\n        version_match = re.search(r\"^__version__\\s*=\\s*(.*)$\", f.read(), re.MULTILINE)\n    public_version = ast.literal_eval(version_match.group(1))\n    local_version = os.environ.get(\"MAMBA_LOCAL_VERSION\")\n    if local_version:\n        return f\"{public_version}+{local_version}\"\n    else:\n        return str(public_version)\n\n\ndef get_wheel_url():\n    # Determine the version numbers that will be used to determine the correct wheel\n    torch_version_raw = parse(torch.__version__)\n\n    if HIP_BUILD:\n        # We're using the HIP version used to build torch, not the one currently installed\n        torch_hip_version = get_torch_hip_version()\n        hip_ver = f\"{torch_hip_version.major}{torch_hip_version.minor}\"\n    else:\n        # We're using the CUDA version used to build torch, not the one currently installed\n        # _, cuda_version_raw = get_cuda_bare_metal_version(CUDA_HOME)\n        torch_cuda_version = parse(torch.version.cuda)\n        # For CUDA 11, we only compile for CUDA 11.8, and for CUDA 12 we only compile for CUDA 12.3\n        # to save CI time. Minor versions should be compatible.\n        torch_cuda_version = parse(\"11.8\") if torch_cuda_version.major == 11 else parse(\"12.3\")\n        cuda_version = f\"{torch_cuda_version.major}\"\n\n    gpu_compute_version = hip_ver if HIP_BUILD else cuda_version\n    cuda_or_hip = \"hip\" if HIP_BUILD else \"cu\"\n\n    python_version = f\"cp{sys.version_info.major}{sys.version_info.minor}\"\n    platform_name = get_platform()\n    mamba_ssm_version = get_package_version()\n    torch_version = f\"{torch_version_raw.major}.{torch_version_raw.minor}\"\n    cxx11_abi = str(torch._C._GLIBCXX_USE_CXX11_ABI).upper()\n\n    # Determine wheel URL based on CUDA version, torch version, python version and OS\n    wheel_filename = f\"{PACKAGE_NAME}-{mamba_ssm_version}+{cuda_or_hip}{gpu_compute_version}torch{torch_version}cxx11abi{cxx11_abi}-{python_version}-{python_version}-{platform_name}.whl\"\n    wheel_url = BASE_WHEEL_URL.format(\n        tag_name=f\"v{mamba_ssm_version}\", wheel_name=wheel_filename\n    )\n    return wheel_url, wheel_filename\n\n\nclass CachedWheelsCommand(_bdist_wheel):\n    \"\"\"\n    The CachedWheelsCommand plugs into the default bdist wheel, which is ran by pip when it cannot\n    find an existing wheel (which is currently the case for all installs). We use\n    the environment parameters to detect whether there is already a pre-built version of a compatible\n    wheel available and short-circuits the standard full build pipeline.\n    \"\"\"\n\n    def run(self):\n        if FORCE_BUILD:\n            return super().run()\n\n        wheel_url, wheel_filename = get_wheel_url()\n        print(\"Guessing wheel URL: \", wheel_url)\n        try:\n            urllib.request.urlretrieve(wheel_url, wheel_filename)\n\n            # Make the archive\n            # Lifted from the root wheel processing command\n            # https://github.com/pypa/wheel/blob/cf71108ff9f6ffc36978069acb28824b44ae028e/src/wheel/bdist_wheel.py#LL381C9-L381C85\n            if not os.path.exists(self.dist_dir):\n                os.makedirs(self.dist_dir)\n\n            impl_tag, abi_tag, plat_tag = self.get_tag()\n            archive_basename = f\"{self.wheel_dist_name}-{impl_tag}-{abi_tag}-{plat_tag}\"\n\n            wheel_path = os.path.join(self.dist_dir, archive_basename + \".whl\")\n            print(\"Raw wheel path\", wheel_path)\n            shutil.move(wheel_filename, wheel_path)\n        except urllib.error.HTTPError:\n            print(\"Precompiled wheel not found. Building from source...\")\n            # If the wheel could not be downloaded, build from source\n            super().run()\n\nsetup(\n    name=PACKAGE_NAME,\n    version=get_package_version(),\n    packages=find_packages(\n        exclude=(\n            \"build\",\n            \"csrc\",\n            \"include\",\n            \"tests\",\n            \"dist\",\n            \"docs\",\n            \"benchmarks\",\n            \"mamba_ssm.egg-info\",\n        )\n    ),\n    author=\"Tri Dao, Albert Gu\",\n    author_email=\"tri@tridao.me, agu@cs.cmu.edu\",\n    description=\"Mamba state-space model\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/state-spaces/mamba\",\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: Unix\",\n    ],\n    ext_modules=ext_modules,\n    cmdclass={\"bdist_wheel\": CachedWheelsCommand, \"build_ext\": BuildExtension}\n    if ext_modules\n    else {\n        \"bdist_wheel\": CachedWheelsCommand,\n    },\n    python_requires=\">=3.9\",\n    install_requires=[\n        \"torch\",\n        \"packaging\",\n        \"ninja\",\n        \"einops\",\n        # \"triton\",\n        \"transformers\",\n        # \"causal_conv1d>=1.4.0\",\n    ],\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}