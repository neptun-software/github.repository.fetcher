{
  "metadata": {
    "timestamp": 1736561318778,
    "page": 330,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jianchang512/pyvideotrans",
      "stars": 11464,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.041015625,
          "content": "*.exe filter=lfs diff=lfs merge=lfs -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5048828125,
          "content": "*.log\n*.srt\n.git\n.github\n.idea\ntmp\nimages\nmodels/*.pt\nmodels/models--Systran--faster-whisper-base\nmodels/models--Systran--faster-whisper-tiny\ndev\nvenv\nf5-tts\napidata\nvenv.bak\ndist\nsource\nbuild\ntest.py\nffmpeg/ffmpeg.exe\nffmpeg/ffprobe.exe\nffmpeg/ffplay.exe\nffmpeg/ytwin32.exe\nytlinux\nytdarwin\n__pycache__\n*.spec\n*.ui\n*.bak\n*.aac\n*副本.py\npretrained_models\nelevenlabs.json\npack.bat\npack-api.bat\ngitcmd.bat\ngoogle.txt\nvideotrans/translator/freechatgpt.py\nvideotrans/cfg.json\nvideotrans/params.json\n/tmp/\nruntime\nf5-tts"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3251953125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.2470703125,
          "content": "简体中文 | [English](docs/EN/README_EN.md) | [pt-BR](docs/pt-BR/README_pt-BR.md) | [Italian](docs/IT/README_IT.md) | [Spanish](docs/ES/README_ES.md) / [捐助](docs/about.md) / [Discord](https://discord.gg/y9gUweVCCJ) / 微信公众号：`pyvideotrans`\n\n# 视频翻译配音工具\n\n这是一个视频翻译配音工具，可将一种语言的视频翻译为指定语言的视频，自动生成和添加该语言的字幕和配音。并支持API调用\n\n\n语音识别支持 `faster-whisper`和`openai-whisper`本地离线模型 及 `OpenAI SpeechToText API`  `GoogleSpeech` `阿里中文语音识别模型`和豆包模型，并支持自定义语音识别api.\n\n文字翻译支持 `微软翻译|Google翻译|百度翻译|腾讯翻译|ChatGPT|AzureAI|Gemini|DeepL|DeepLX|字节火山|离线翻译OTT`\n\n文字合成语音支持 `Microsoft Edge tts` `Google tts` `Azure AI TTS` `Openai TTS` `Elevenlabs TTS` `自定义TTS服务器api` `GPT-SoVITS` [clone-voice](https://github.com/jianchang512/clone-voice)  [ChatTTS-ui](https://github.com/jianchang512/ChatTTS-ui)  [Fish TTS](https://github.com/fishaudio/fish-speech)  [CosyVoice](https://github.com/FunAudioLLM/CosyVoice)\n\n允许保留背景伴奏音乐等(基于uvr5)\n\n支持的语言：中文简繁、英语、韩语、日语、俄语、法语、德语、意大利语、西班牙语、葡萄牙语、越南语、泰国语、阿拉伯语、土耳其语、匈牙利语、印度语、乌克兰语、哈萨克语、印尼语、马来语、捷克语、波兰语、荷兰语、瑞典语/其他语言可选自动检测\n\n\n> **[赞助商]**\n> \n> [![](https://github.com/user-attachments/assets/5348c86e-2d5f-44c7-bc1b-3cc5f077e710)](https://gpt302.saaslink.net/teRK8Y)\n>  [302.AI](https://gpt302.saaslink.net/teRK8Y)是一个按需付费的一站式AI应用平台，开放平台，开源生态, [302.AI开源地址](https://gpt302.saaslink.net/teRK8Y)\n> \n> 集合了最新最全的AI模型和品牌/按需付费零月费/管理和使用分离/所有AI能力均提供API/每周推出2-3个新应用\n\n\n# 主要用途和功能\n\n【自动翻译视频并配音】将视频中的声音翻译为另一种语言的配音，并嵌入该语言字幕\n\n【语音识别/将音频视频转为字幕】可批量将音频、视频文件中的人类说话声，识别为文字并导出为srt字幕文件\n\n【语音合成/字幕配音】根据本地已有的srt字幕文件创建配音，支持单个或批量字幕\n\n【翻译字幕文件】将一个或多个srt字幕文件翻译为其他语言的字幕文件\n\n【合并视频和音频】批量将视频文件和音频文件一一对应合并\n\n【合并视频和srt字幕】批量将视频文件srt字幕文件一一对应合并\n\n【为视频添加图片水印】批量将视频文件中嵌入图片水印\n\n【从视频中提取音频】从视频中分离为音频文件和无声视频\n\n【音频视频格式转换】批量将音频视频进行格式转换\n\n【字幕编辑并导出多格式】支持导入srt、vtt、ass格式字幕，编辑后可设置字体样式、色彩等导出对应格式字幕\n\n【字幕格式转换】批量将字幕文件进行 srt/ass/vtt 格式互转\n\n【下载油管视频】可从youtube上下载视频\n\n【人声背景乐分离】\n\n【API调用】支持 语音合成、语言识别、字幕翻译、视频翻译接口调用\n\n----\n\n![pyvideotrans-home](https://github.com/user-attachments/assets/b2f95a7f-b4e5-4a6d-b2a5-eb6cd22531e0)\n\n[![Open In Colab](https://img.shields.io/badge/Colab-F9AB00?style=for-the-badge&logo=googlecolab&color=525252)](https://colab.research.google.com/drive/1kPTeAMz3LnWRnGmabcz4AWW42hiehmfm?usp=sharing)\n\n# 预打包版本(仅win10/win11可用，MacOS/Linux系统使用源码部署)\n\n> 使用pyinstaller打包，未做免杀和签名，杀软可能报毒，请加入信任名单或使用源码部署\n\n0. [点击去下载预打包版,解压到无空格的英文目录后，双击 sp.exe (https://github.com/jianchang512/pyvideotrans/releases)\n\n1. 解压到英文路径下，并且路径中不含有空格。解压后双击 sp.exe  (若遇到权限问题可右键使用管理员权限打开)\n\n4. 注意：必须解压后使用，不可直接压缩包内双击使用，也不可解压后移动sp.exe文件到其他位置\n\n\n# MacOS源码部署\n\n0. 打开终端窗口，分别执行如下命令\n\t\n\t> 执行前确保已安装 Homebrew，如果你没有安装 Homebrew,那么需要先安装\n\t>\n\t> 执行命令安装 Homebrew：  `/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"`\n\t>\n\t> 安装完成后，执行： `eval $(brew --config)`\n\t>\n\n    ```\n    brew install libsndfile\n\n    brew install ffmpeg\n\n    brew install git\n\n    brew install python@3.10\n\n    ```\n\n    继续执行\n\n    ```\n    export PATH=\"/usr/local/opt/python@3.10/bin:$PATH\"\n\n    source ~/.bash_profile \n\t\n\tsource ~/.zshrc\n\n    ```\n\n\n\n1. 创建不含空格和中文的文件夹，在终端中进入该文件夹。\n2. 终端中执行命令 `git clone https://github.com/jianchang512/pyvideotrans `\n3. 执行命令 `cd pyvideotrans`\n4. 继续执行 `python -m venv venv`\n5. 继续执行命令 `source ./venv/bin/activate`，执行完毕查看确认终端命令提示符已变成已`(venv)`开头,以下命令必须确定终端提示符是以`(venv)`开头\n6. 执行 `pip install -r requirements.txt `，如果提示失败，执行如下2条命令切换pip镜像到阿里镜像\n\n    ```\n    pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\n    pip config set install.trusted-host mirrors.aliyun.com\n    ```\n\n    然后重新执行\n    如果已切换到阿里镜像源，仍提示失败，请尝试执行 `pip install -r requirements.txt`\n\n7. `python sp.py` 打开软件界面\n\n\n\n# Linux 源码部署\n\n0. CentOS/RHEL系依次执行如下命令安装 python3.10\n\n```\n\nsudo yum update\n\nsudo yum groupinstall \"Development Tools\"\n\nsudo yum install openssl-devel bzip2-devel libffi-devel\n\ncd /tmp\n\nwget https://www.python.org/ftp/python/3.10.4/Python-3.10.4.tgz\n\ntar xzf Python-3.10.4.tgz\n\ncd Python-3.10.4\n\n./configure — enable-optimizations\n\nsudo make && sudo make install\n\nsudo alternatives — install /usr/bin/python3 python3 /usr/local/bin/python3.10 1\n\nsudo yum install -y ffmpeg\n\n```\n\n1. Ubuntu/Debian系执行如下命令安装python3.10\n\n```\n\napt update && apt upgrade -y\n\napt install software-properties-common -y\n\nadd-apt-repository ppa:deadsnakes/ppa\n\napt update\n\nsudo apt-get install libxcb-cursor0\n\napt install python3.10\n\ncurl -sS https://bootstrap.pypa.io/get-pip.py | python3.10\n\nsudo update-alternatives --install /usr/bin/python python /usr/local/bin/python3.10  1\n\nsudo update-alternatives --config python\n\napt-get install ffmpeg\n\n```\n\n\n**打开任意一个终端，执行 `python3 -V`，如果显示 “3.10.4”，说明安装成功，否则失败**\n\n\n1. 创建个不含空格和中文的文件夹， 从终端打开该文件夹。\n3. 终端中执行命令 `git clone https://github.com/jianchang512/pyvideotrans`\n4. 继续执行命令 `cd pyvideotrans`\n5. 继续执行 `python -m venv venv`\n6. 继续执行命令 `source .\\venv\\scripts\\activate`，执行完毕查看确认终端命令提示符已变成已`(venv)`开头,以下命令必须确定终端提示符是以`(venv)`开头\n7. 执行 `pip install -r requirements.txt`，如果提示失败，执行如下2条命令切换pip镜像到阿里镜像\n\n    ```\n\n    pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\n    pip config set install.trusted-host mirrors.aliyun.com\n\n    ```\n\n    然后重新执行,如果已切换到阿里镜像源，仍提示失败，请尝试执行 `pip install -r requirements.txt `\n8. 如果要使用CUDA加速，分别执行\n\n    `pip uninstall -y torch torchaudio`\n\n    `pip install torch==2.2.0 torchaudio==2.2.0 --index-url https://download.pytorch.org/whl/cu118`\n\n    `pip install nvidia-cublas-cu11 nvidia-cudnn-cu11`\n\n9. linux 如果要启用cuda加速，必须有英伟达显卡，并且配置好了CUDA11.8+环境,请自行搜索 \"Linux CUDA 安装\"\n\n\n10. `python sp.py` 打开软件界面\n\n\n# Window10/11 源码部署\n\n0. 打开 https://www.python.org/downloads/ 下载 windows3.10，下载后双击，一路next，注意要选中“Add to PATH”\n\n   **打开一个cmd，执行 `python -V`，如果输出不是 `3.10.4`,说明安装出错，或没有加入 `Add to PATH`,请重新安装**\n\n1. 打开 https://github.com/git-for-windows/git/releases/download/v2.45.0.windows.1/Git-2.45.0-64-bit.exe ，下载git，下载后双击一路下一步。\n2. 找个不含空格和中文的文件夹，地址栏中输入 `cmd`回车，打开终端，以下命令均在该终端中执行\n3. 执行命令 `git clone https://github.com/jianchang512/pyvideotrans`\n4. 继续执行命令 `cd pyvideotrans`\n5. 继续执行 `python -m venv venv`\n6. 继续执行命令 `venv\\Scripts\\activate`,执行后请查看确认命令行开头已变成了`(venv)`,否则说明出错\n7. 执行 `pip install -r requirements.txt `，如果提示失败，执行如下2条命令切换pip镜像到阿里镜像\n\n    ```\n\n    pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\n    pip config set install.trusted-host mirrors.aliyun.com\n\n    ```\n\n    然后重新执行,如果已切换到阿里镜像源，仍提示失败，请尝试执行 `pip install -r requirements.txt`\n8.  如果要使用CUDA加速，分别执行\n\n    `pip uninstall -y torch torchaudio`\n\n    `pip install torch==2.2.0 torchaudio==2.2.0 --index-url https://download.pytorch.org/whl/cu118`\n\n\n9. windows  如果要启用cuda加速，必须有英伟达显卡，并且配置好了CUDA11.8+环境，具体安装见 [CUDA加速支持](https://pyvideotrans.com/gpu.html)\n\n10. 解压 ffmpeg.zip 到当前源码目录下，提示覆盖则覆盖，解压后确保源码下的ffmepg文件夹内能看到 ffmpeg.exe ffprobe.exe ytwin32.exe,\n\n11. `python sp.py` 打开软件界面\n\n\n\n#  源码部署问题说明\n\n1. 默认使用 ctranslate2的4.x版本，仅支持CUDA12.x版本，如果你的cuda低于12，并且无法升级cuda到12.x，请执行命令卸载ctranslate2然后重新安装\n\n```\n\npip uninstall -y ctranslate2\n\npip install ctranslate2==3.24.0\n\n```\n\n2. 可能会遇到 `xx module not found ` 之类错误，请打开 requirements.txt，搜索该 xx 模块，然后将xx后的 ==及等会后的版本号去掉\n\n\n\n\n# 使用教程和文档\n\n请查看 https://pyvideotrans.com\n\n\n# 语音识别模型:\n\n   下载地址： https://pyvideotrans.com/model.html\n\n\n\n# 视频教程(第三方)\n\n[Mac下源码部署/b站](https://www.bilibili.com/video/BV1tK421y7rd/)\n\n[用Gemini Api 给视频翻译设置方法/b站](https://b23.tv/fED1dS3)\n\n[如何下载和安装](https://www.bilibili.com/video/BV1Gr421s7cN/)\n\n\n# 软件预览截图\n\n![pyvideotrans-home](https://github.com/user-attachments/assets/b2f95a7f-b4e5-4a6d-b2a5-eb6cd22531e0)\n\n![image](https://github.com/user-attachments/assets/b5d1b5fb-c579-477c-bca4-6c5e9aa14d7d)\n\n\n\n# 相关联项目\n\n[ChatTTS-ui:使用ChatTTS合成声音的UI界面](https://github.com/jianchang512/ChatTTS-ui)\n\n[OTT:本地离线文字翻译工具](https://github.com/jianchang512/ott)\n\n[声音克隆工具:用任意音色合成语音](https://github.com/jianchang512/clone-voice)\n\n[语音识别工具:本地离线的语音识别转文字工具](https://github.com/jianchang512/stt)\n\n[人声背景乐分离:人声和背景音乐分离工具](https://github.com/jianchang512/vocal-separate)\n\n[GPT-SoVITS的api.py改良版](https://github.com/jianchang512/gptsovits-api)\n\n[适配 CosyVoice 的 api.py](https://github.com/jianchang512/cosyvoice-api)\n\n\n## 致谢\n\n> 本程序主要依赖的部分开源项目\n\n1. [ffmpeg](https://github.com/FFmpeg/FFmpeg)\n2. [PySide6](https://pypi.org/project/PySide6/)\n3. [edge-tts](https://github.com/rany2/edge-tts)\n4. [faster-whisper](https://github.com/SYSTRAN/faster-whisper)\n5. [openai-whisper](https://github.com/openai/whisper)\n6. [pydub](https://github.com/jiaaro/pydub)\n\n## 关注作者微信公众号\n\n<img width=\"200\" src=\"https://github.com/jianchang512/pyvideotrans/assets/3378335/f9337111-9084-41fe-8840-1fb8fedca92d\">\n\n\n如果觉得该项目对你有价值，并希望该项目能一直稳定持续维护，欢迎捐助\n\n<img width=\"200\" src=\"https://github.com/user-attachments/assets/5e8688ef-47c3-4a3c-a016-e60f73ccc4dc\">\n\n\n<img width=\"200\" src=\"https://github.com/jianchang512/pyvideotrans/assets/3378335/fe1aa29d-c26d-46d3-b7f3-e9c030ef32c7\">\n\n<img width=\"200\" src=\"https://pyvideotrans.com/images/biancn.jpg\">\n"
        },
        {
          "name": "api.py",
          "type": "blob",
          "size": 29.4248046875,
          "content": "if __name__ == '__main__':\n    print('API ...')\n    import json\n    import multiprocessing\n    import random\n    import re\n    import shutil\n    import threading\n    import time\n    from pathlib import Path\n\n    from flask import Flask, request, jsonify\n    from waitress import serve\n\n\n    from videotrans.configure import config\n    from videotrans.task._dubbing import DubbingSrt\n    from videotrans.task._speech2text import SpeechToText\n    from videotrans.task._translate_srt import TranslateSrt\n    from videotrans.task.job import start_thread\n    from videotrans.task.trans_create import TransCreate\n    from videotrans.util import tools\n    from videotrans import tts as tts_model, translator, recognition\n\n    ###### 配置信息\n    #### api文档 https://pyvideotrans.com/api-cn\n    config.exec_mode='api'\n    ROOT_DIR = config.ROOT_DIR\n    HOST = \"127.0.0.1\"\n    PORT = 9011\n    if Path(ROOT_DIR+'/host.txt').is_file():\n        host_str=Path(ROOT_DIR+'/host.txt').read_text(encoding='utf-8').strip()\n        host_str=re.sub(r'https?://','',host_str).split(':')\n        if len(host_str)>0:\n            HOST=host_str[0]\n        if len(host_str)==2:\n            PORT=int(host_str[1])\n\n    # 存储生成的文件和进度日志\n    API_RESOURCE='apidata'\n    TARGET_DIR = ROOT_DIR + f'/{API_RESOURCE}'\n    Path(TARGET_DIR).mkdir(parents=True, exist_ok=True)\n    # 进度日志\n    PROCESS_INFO = TARGET_DIR + '/processinfo'\n    if Path(PROCESS_INFO).is_dir():\n        shutil.rmtree(PROCESS_INFO)\n    Path(PROCESS_INFO).mkdir(parents=True, exist_ok=True)\n    # url前缀\n    URL_PREFIX = f\"http://{HOST}:{PORT}/{API_RESOURCE}\"\n    config.exit_soft = False\n    # 停止 结束 失败状态\n    end_status_list = ['error', 'succeed', 'end', 'stop']\n    #日志状态\n    logs_status_list = ['logs']\n\n    ######################\n\n    app = Flask(__name__, static_folder=TARGET_DIR)\n\n    # 第1个接口 /tts\n    \"\"\"\n    根据字幕合成配音接口\n    \n    请求数据类型: Content-Type:application\n    \n    请求参数：\n    \n    name:必须参数，字符串类型，需要配音的srt字幕的绝对路径(需同本软件在同一设备)，或者直接传递合法的srt字幕格式内容\n    tts_type:必须参数，数字类型，配音渠道，0=\"Edge-TTS\",1='CosyVoice',2=\"ChatTTS\",3=302.AI,4=\"FishTTS\",5=\"Azure-TTS\",\n        6=\"GPT-SoVITS\",7=\"clone-voice\",8=\"OpenAI TTS\",9=\"Elevenlabs.io\",10=\"Google TTS\",11=\"自定义TTS API\"\n    voice_role:必须参数，字符串类型，对应配音渠道的角色名，edge-tts/azure-tts/302.ai(azure模型)时目标语言不同，角色名也不同，具体见底部\n    target_language:必须参数，字符串类型，需要配音的语言类型代码，即所传递的字幕文字语言代码，可选值 简体中文zh-cn，繁体zh-tw，英语en，法语fr，德语de，日语ja，韩语ko，俄语ru，西班牙语es，泰国语th，意大利语it，葡萄牙语pt，越南语vi，阿拉伯语ar，土耳其语tr，印地语hi，匈牙利语hu，乌克兰语uk，印尼语id，马来语ms，哈萨克语kk，捷克语cs，波兰语pl，荷兰语nl，瑞典语sv\n    voice_rate:可选参数，字符串类型，语速加减值，格式为：加速`+数字%`，减速`-数字%`\n    volume:可选参数，字符串类型，音量变化值(仅配音渠道为edge-tts生效)，格式为 增大音量`+数字%`，降低音量`-数字%`\n    pitch:可选参数，字符串类型，音调变化值(仅配音渠道为edge-tts生效)，格式为 调大音调`+数字Hz`,降低音量`-数字Hz`\n    out_ext:可选参数，字符串类型，输出配音文件类型，mp3|wav|flac|aac,默认wav\n    voice_autorate:可选参数，布尔类型，默认False，是否自动加快语速，以便与字幕对齐\n    \n    返回数据：\n    返回类型：json格式，\n    成功时返回，可根据task_id通过 task_status 获取任务进度\n    {\"code\":0,\"msg\":\"ok\",\"task_id\":任务id}\n    \n    失败时返回\n    {\"code\":1,\"msg\":\"错误信息\"}\n    \n    \n    请求示例\n    ```\n    def test_tts():\n        res=requests.post(\"http://127.0.0.1:9011/tts\",json={\n        \"name\":\"C:/users/c1/videos/zh0.srt\",\n        \"voice_role\":\"zh-CN-YunjianNeural\",\n        \"target_language_code\":\"zh-cn\",\n        \"voice_rate\":\"+0%\",\n        \"volume\":\"+0%\",\n        \"pitch\":\"+0Hz\",\n        \"tts_type\":\"0\",\n        \"out_ext\":\"mp3\",\n        \"voice_autorate\":True,\n        })\n        print(res.json())\n    ```\n    \"\"\"\n    @app.route('/tts', methods=['POST'])\n    def tts():\n        data = request.json\n        # 从请求数据中获取参数\n        name = data.get('name', '').strip()\n        if not name:\n            return jsonify({\"code\": 1, \"msg\": \"The parameter name is not allowed to be empty\"})\n        is_srt=True\n        if name.find(\"\\n\") == -1 and name.endswith('.srt'):\n            if not Path(name).exists():\n                return jsonify({\"code\": 1, \"msg\": f\"The file {name} is not exist\"})\n        else:\n            tmp_file = config.TEMP_DIR + f'/tts-srt-{time.time()}-{random.randint(1, 9999)}.srt'\n            is_srt=tools.is_srt_string(name)\n            Path(tmp_file).write_text(tools.process_text_to_srt_str(name) if not is_srt else name, encoding='utf-8')\n            name = tmp_file\n\n        cfg={\n            \"name\":name,\n            \"voice_role\":data.get(\"voice_role\"),\n            \"target_language_code\":data.get('target_language_code'),\n            \"tts_type\":int(data.get('tts_type',0)),\n            \"voice_rate\":data.get('voice_rate',\"+0%\"),\n            \"volume\":data.get('volume',\"+0%\"),\n            \"pitch\":data.get('pitch',\"+0Hz\"),\n            \"out_ext\":data.get('out_ext',\"mp3\"),\n            \"voice_autorate\":bool(data.get('voice_autorate',False)) if is_srt else False,\n        }\n        is_allow_lang=tts_model.is_allow_lang(langcode=cfg['target_language_code'],tts_type=cfg['tts_type'])\n        if is_allow_lang is not True:\n            return jsonify({\"code\":4,\"msg\":is_allow_lang})\n        is_input_api=tts_model.is_input_api(tts_type=cfg['tts_type'],return_str=True)\n        if is_input_api is not True:\n            return jsonify({\"code\":5,\"msg\":is_input_api})\n\n\n        obj = tools.format_video(name, None)\n        obj['target_dir'] = TARGET_DIR + f'/{obj[\"uuid\"]}'\n        obj['cache_folder'] = config.TEMP_DIR + f'/{obj[\"uuid\"]}'\n        Path(obj['target_dir']).mkdir(parents=True, exist_ok=True)\n        cfg.update(obj)\n\n        config.box_tts = 'ing'\n        trk = DubbingSrt(cfg)\n        config.dubb_queue.append(trk)\n        tools.set_process(text=f\"Currently in queue No.{len(config.dubb_queue)}\",uuid=obj['uuid'])\n        return jsonify({'code': 0, 'task_id': obj['uuid']})\n\n\n    # 第2个接口 /translate_srt\n    \"\"\"\n    字幕翻译接口\n    \n    请求参数:\n    类型 Content-Type:application/json\n    \n    请求数据:\n    name:必须参数，字符串类型，需要翻译的srt字幕的绝对路径(需同本软件在同一设备)，或者直接传递合法的srt字幕格式内容\n    translate_type：必须参数，整数类型，翻译渠道\n    target_language:必须参数，字符串类型，要翻译到的目标语言代码。可选值 简体中文zh-cn，繁体zh-tw，英语en，法语fr，德语de，日语ja，韩语ko，俄语ru，西班牙语es，泰国语th，意大利语it，葡萄牙语pt，越南语vi，阿拉伯语ar，土耳其语tr，印地语hi，匈牙利语hu，乌克兰语uk，印尼语id，马来语ms，哈萨克语kk，捷克语cs，波兰语pl，荷兰语nl，瑞典语sv\n    source_code:可选参数，字符串类型，原始字幕语言代码，可选同上\n    \n    返回数据\n    返回类型：json格式，\n    成功时返回，可根据task_id通过 task_status 获取任务进度\n    {\"code\":0,\"msg\":\"ok\",\"task_id\":任务id}\n    \n    失败时返回\n    {\"code\":1,\"msg\":\"错误信息\"}\n    \n    请求示例\n    ```\n    def test_translate_srt():\n        res=requests.post(\"http://127.0.0.1:9011/translate_srt\",json={\n        \"name\":\"C:/users/c1/videos/zh0.srt\",\n        \"target_language\":\"en\",\n        \"translate_type\":0\n        })\n        print(res.json())\n    ```\n    \n    \"\"\"\n    @app.route('/translate_srt', methods=['POST'])\n    def translate_srt():\n        data = request.json\n        # 从请求数据中获取参数\n        name = data.get('name', '').strip()\n        if not name:\n            return jsonify({\"code\": 1, \"msg\": \"The parameter name is not allowed to be empty\"})\n        is_srt=True\n        if name.find(\"\\n\") == -1  and name.endswith('.srt'):\n            if not Path(name).exists():\n                return jsonify({\"code\": 1, \"msg\": f\"The file {name} is not exist\"})\n        else:\n            tmp_file = config.TEMP_DIR + f'/trans-srt-{time.time()}-{random.randint(1, 9999)}.srt'\n            is_srt=tools.is_srt_string(name)\n            Path(tmp_file).write_text(tools.process_text_to_srt_str(name) if not is_srt else name, encoding='utf-8')\n            name = tmp_file\n\n        cfg = {\n            \"translate_type\": int(data.get('translate_type', 0)),\n            \"text_list\": tools.get_subtitle_from_srt(name),\n            \"target_code\": data.get('target_language'),\n            \"source_code\": data.get('source_code', '')\n        }\n        is_allow=translator.is_allow_translate(translate_type=cfg['translate_type'],show_target=cfg['target_code'],return_str=True)\n        if is_allow is not True:\n            return jsonify({\"code\":5,\"msg\":is_allow})\n        obj = tools.format_video(name, None)\n        obj['target_dir'] = TARGET_DIR + f'/{obj[\"uuid\"]}'\n        obj['cache_folder'] = config.TEMP_DIR + f'/{obj[\"uuid\"]}'\n        Path(obj['target_dir']).mkdir(parents=True, exist_ok=True)\n        cfg.update(obj)\n\n        config.box_trans = 'ing'\n        trk = TranslateSrt(cfg)\n        config.trans_queue.append(trk)\n        tools.set_process(text=f\"Currently in queue No.{len(config.trans_queue)}\",uuid=obj['uuid'])\n        return jsonify({'code': 0, 'task_id': obj['uuid']})\n\n\n    # 第3个接口 /recogn\n    \"\"\"\n    语音识别、音视频转字幕接口\n    \n    请求参数:\n    类型 Content-Type:application/json\n    \n    请求数据:\n    name:必须参数，字符串类型，需要翻译的音频或视频的绝对路径(需同本软件在同一设备)\n    recogn_type:必须参数，数字类型，语音识别模式，0=faster-whisper本地模型识别，1=openai-whisper本地模型识别，2=Google识别api，3=zh_recogn中文识别，4=豆包模型识别，5=自定义识别API，6=OpenAI识别API\n    model_name:必须参数faster-whisper和openai-whisper模式时的模型名字\n    detect_language:必须参数，字符串类型，音视频中人类说话语言。中文zh，英语en，法语fr，德语de，日语ja，韩语ko，俄语ru，西班牙语es，泰国语th，意大利语it，葡萄牙语pt，越南语vi，阿拉伯语ar，土耳其语tr，印地语hi，匈牙利语hu，乌克兰语uk，印尼语id，马来语ms，哈萨克语kk，捷克语cs，波兰语pl，荷兰语nl，瑞典语sv\n    split_type：可选参数，字符串类型，默认all：整体识别，可选avg：均等分割\n    is_cuda:可选参数，布尔类型，是否启用CUDA加速，默认False\n    \n    返回数据\n    返回类型：json格式，\n    成功时返回，可根据task_id通过 task_status 获取任务进度\n    {\"code\":0,\"msg\":\"ok\",\"task_id\":任务id}\n    \n    失败时返回\n    {\"code\":1,\"msg\":\"错误信息\"}\n    \n    示例\n    def test_recogn():\n        res=requests.post(\"http://127.0.0.1:9011/recogn\",json={\n        \"name\":\"C:/Users/c1/Videos/10ass.mp4\",\n        \"recogn_type\":0,\n        \"split_type\":\"all\",\n        \"model_name\":\"tiny\",\n        \"is_cuda\":False,\n        \"detect_language\":\"zh\",\n        })\n        print(res.json())\n    \n    \"\"\"\n    @app.route('/recogn', methods=['POST'])\n    def recogn():\n        data = request.json\n        # 从请求数据中获取参数\n        name = data.get('name', '').strip()\n        if not name:\n            return jsonify({\"code\": 1, \"msg\": \"The parameter name is not allowed to be empty\"})\n        if not Path(name).is_file():\n            return jsonify({\"code\": 1, \"msg\": f\"The file {name} is not exist\"})\n\n        cfg = {\n            \"recogn_type\": int(data.get('recogn_type', 0)),\n            \"split_type\": data.get('split_type', 'all'),\n            \"model_name\": data.get('model_name', 'tiny'),\n            \"is_cuda\": bool(data.get('is_cuda', False)),\n            \"detect_language\": data.get('detect_language', '')\n        }\n\n        is_allow=recognition.is_allow_lang(langcode=cfg['detect_language'],recogn_type=cfg['recogn_type'])\n        if is_allow is not True:\n            return jsonify({\"code\":5,\"msg\":is_allow})\n\n        is_input=recognition.is_input_api(recogn_type=cfg['recogn_type'],return_str=True)\n        if is_input is not True:\n            return jsonify({\"code\":5,\"msg\":is_input})\n\n\n        obj = tools.format_video(name, None)\n        obj['target_dir'] = TARGET_DIR + f'/{obj[\"uuid\"]}'\n        obj['cache_folder'] = config.TEMP_DIR + f'/{obj[\"uuid\"]}'\n        Path(obj['target_dir']).mkdir(parents=True, exist_ok=True)\n        cfg.update(obj)\n        config.box_recogn = 'ing'\n        trk = SpeechToText(cfg)\n        config.prepare_queue.append(trk)\n        tools.set_process(text=f\"Currently in queue No.{len(config.prepare_queue)}\",uuid=obj['uuid'])\n        return jsonify({'code': 0, 'task_id': obj['uuid']})\n\n\n    # 第4个接口\n    \"\"\"\n    视频完整翻译接口\n    \n    \n    请求参数:\n    类型 Content-Type:application/json\n    \n    请求数据:\n    name:必须参数，字符串类型，需要翻译的音频或视频的绝对路径(需同本软件在同一设备)\n    recogn_type:必须参数，数字类型，语音识别模式，0=faster-whisper本地模型识别，1=openai-whisper本地模型识别，2=Google识别api，3=zh_recogn中文识别，4=豆包模型识别，5=自定义识别API，6=OpenAI识别API\n    model_name:必须参数faster-whisper和openai-whisper模式时的模型名字\n    split_type：可选参数，字符串类型，默认all：整体识别，可选avg：均等分割\n    is_cuda:可选参数，布尔类型，是否启用CUDA加速，默认False\n    translate_type：必须参数，整数类型，翻译渠道\n    target_language:必须参数，字符串类型，要翻译到的目标语言代码。可选值 简体中文zh-cn，繁体zh-tw，英语en，法语fr，德语de，日语ja，韩语ko，俄语ru，西班牙语es，泰国语th，意大利语it，葡萄牙语pt，越南语vi，阿拉伯语ar，土耳其语tr，印地语hi，匈牙利语hu，乌克兰语uk，印尼语id，马来语ms，哈萨克语kk，捷克语cs，波兰语pl，荷兰语nl，瑞典语sv\n    source_language:可选参数，字符串类型，原始字幕语言代码，可选同上\n    tts_type:必须参数，数字类型，配音渠道，0=\"Edge-TTS\",1='CosyVoice',2=\"ChatTTS\",3=302.AI,4=\"FishTTS\",5=\"Azure-TTS\",\n        6=\"GPT-SoVITS\",7=\"clone-voice\",8=\"OpenAI TTS\",9=\"Elevenlabs.io\",10=\"Google TTS\",11=\"自定义TTS API\"\n    voice_role:必须参数，字符串类型，对应配音渠道的角色名，edge-tts/azure-tts/302.ai(azure模型)时目标语言不同，角色名也不同，具体见底部\n    voice_rate:可选参数，字符串类型，语速加减值，格式为：加速`+数字%`，减速`-数字%`\n    volume:可选参数，字符串类型，音量变化值(仅配音渠道为edge-tts生效)，格式为 增大音量`+数字%`，降低音量`-数字%`\n    pitch:可选参数，字符串类型，音调变化值(仅配音渠道为edge-tts生效)，格式为 调大音调`+数字Hz`,降低音量`-数字Hz`\n    out_ext:可选参数，字符串类型，输出配音文件类型，mp3|wav|flac|aac,默认wav\n    voice_autorate:可选参数，布尔类型，默认False，是否自动加快语速，以便与字幕对齐\n    subtitle_type:可选参数，整数类型，默认0，字幕嵌入类型，0=不嵌入字幕，1=嵌入硬字幕，2=嵌入软字幕，3=嵌入双硬字幕，4=嵌入双软字幕\n    append_video：可选参数，布尔类型，默认False，如果配音后音频时长大于视频，是否延长视频末尾\n    only_video:可选参数，布尔类型，默认False，是否只生成视频文件，不生成字幕音频等\n    \n    返回数据\n    返回类型：json格式，\n    成功时返回，可根据task_id通过 task_status 获取任务进度\n    {\"code\":0,\"msg\":\"ok\",\"task_id\":任务id}\n    \n    失败时返回\n    {\"code\":1,\"msg\":\"错误信息\"}\n    \n    示例\n    def test_trans_video():\n        res=requests.post(\"http://127.0.0.1:9011/trans_video\",json={\n        \"name\":\"C:/Users/c1/Videos/10ass.mp4\",\n    \n        \"recogn_type\":0,\n        \"split_type\":\"all\",\n        \"model_name\":\"tiny\",\n    \n        \"translate_type\":0,\n        \"source_language\":\"zh-cn\",\n        \"target_language\":\"en\",\n    \n        \"tts_type\":0,\n        \"voice_role\":\"zh-CN-YunjianNeural\",\n        \"voice_rate\":\"+0%\",\n        \"volume\":\"+0%\",\n        \"pitch\":\"+0Hz\",\n        \"voice_autorate\":True,\n        \"video_autorate\":True,\n    \n        \"is_separate\":False,\n        \"back_audio\":\"\",\n        \n        \"subtitle_type\":1,\n        \"append_video\":False,\n    \n        \"is_cuda\":False,\n        })\n        print(res.json())\n    \n    \"\"\"\n    @app.route('/trans_video', methods=['POST'])\n    def trans_video():\n        data = request.json\n        name = data.get('name', '')\n        if not name:\n            return jsonify({\"code\": 1, \"msg\": \"The parameter name is not allowed to be empty\"})\n        if not Path(name).exists():\n            return jsonify({\"code\": 1, \"msg\": f\"The file {name} is not exist\"})\n\n        cfg = {\n            # 通用\n            \"name\": name,\n\n            \"is_separate\": bool(data.get('is_separate', False)),\n            \"back_audio\": data.get('back_audio', ''),\n\n            # 识别\n            \"recogn_type\": int(data.get('recogn_type', 0)),\n            \"split_type\": data.get('split_type','all'),\n            \"model_name\": data.get('model_name','tiny'),\n            \"cuda\": bool(data.get('is_cuda',False)),\n\n            \"subtitles\": data.get(\"subtitles\", \"\"),\n\n            # 翻译\n            \"translate_type\": int(data.get('translate_type', 0)),\n            \"target_language\": data.get('target_language'),\n            \"source_language\": data.get('source_language'),\n\n            # 配音\n            \"tts_type\": int(data.get('tts_type', 0)),\n            \"voice_role\": data.get('voice_role',''),\n            \"voice_rate\": data.get('voice_rate','+0%'),\n            \"voice_autorate\": bool(data.get('voice_autorate', False)),\n            \"video_autorate\": bool(data.get('video_autorate', False)),\n            \"volume\": data.get('volume','+0%'),\n            \"pitch\": data.get('pitch','+0Hz'),\n\n            \"subtitle_type\": int(data.get('subtitle_type', 0)),\n            \"append_video\": bool(data.get('append_video', False)),\n\n            \"is_batch\": True,\n            \"app_mode\": \"biaozhun\",\n\n            \"only_video\": bool(data.get('only_video', False))\n\n        }\n        if not cfg['subtitles']:\n            is_allow = recognition.is_allow_lang(langcode=cfg['target_language'], recogn_type=cfg['recogn_type'])\n            if is_allow is not True:\n                return jsonify({\"code\": 5, \"msg\": is_allow})\n\n            is_input = recognition.is_input_api(recogn_type=cfg['recogn_type'], return_str=True)\n            if is_input is not True:\n                return jsonify({\"code\": 5, \"msg\": is_input})\n        if cfg['source_language'] != cfg['target_language']:\n            is_allow=translator.is_allow_translate(translate_type=cfg['translate_type'],show_target=cfg['target_language'],return_str=True)\n            if is_allow is not True:\n                return jsonify({\"code\":5,\"msg\":is_allow})\n\n        if cfg['voice_role'] and cfg['voice_role'].lower()!='no' and cfg['target_language']:\n            is_allow_lang = tts_model.is_allow_lang(langcode=cfg['target_language'], tts_type=cfg['tts_type'])\n            if is_allow_lang is not True:\n                return jsonify({\"code\": 4, \"msg\": is_allow_lang})\n            is_input_api = tts_model.is_input_api(tts_type=cfg['tts_type'], return_str=True)\n            if is_input_api is not True:\n                return jsonify({\"code\": 5, \"msg\": is_input_api})\n\n\n\n        obj = tools.format_video(name, None)\n        obj['target_dir'] = TARGET_DIR + f'/{obj[\"uuid\"]}'\n        obj['cache_folder'] = config.TEMP_DIR + f'/{obj[\"uuid\"]}'\n        Path(obj['target_dir']).mkdir(parents=True, exist_ok=True)\n        cfg.update(obj)\n\n        config.current_status = 'ing'\n        trk = TransCreate(cfg)\n        config.prepare_queue.append(trk)\n        tools.set_process(text=f\"Currently in queue No.{len(config.prepare_queue)}\",uuid=obj['uuid'])\n        #\n        return jsonify({'code': 0, 'task_id': obj['uuid']})\n\n\n    # 获取任务进度\n    \"\"\"\n    根据任务id，获取当前任务的状态\n    \n    请求数据类型：优先GET中获取，不存在则从POST中获取，都不存在则从 json数据中获取\n    \n    请求参数: \n    task_id:必须，字符串类型\n    \n    返回:json格式数据\n    code:-1=进行中，0=成功结束，>0=出错了\n    msg:code为-1时为进度信息，code>0时为出错信息，成功时为ok\n    data:仅当code==0成功时存在，是一个dict对象\n        absolute_path是生成的文件列表list，每项均是一个文件的绝对路径\n        url 是生成的文件列表list，每项均是一个可访问的url\n    \n    \n    失败：{\"code\":1,\"msg\":\"不存在该任务\"}\n    进行中：{\"code\":-1,\"msg\":\"正在合成声音\"} \n    成功: {\"code\":0,\"msg\":\"ok\",\"data\":{\"absolute_path\":[\"/data/1.srt\",\"/data/1.mp4\"],\"url\":[\"http://127.0.0.1:9011/task_id/1.srt\"]}}\n    \n    \n    示例\n    def test_task_status():\n        res=requests.post(\"http://127.0.0.1:9011/task_status\",json={\n            \"task_id\":\"06c238d250f0b51248563c405f1d7294\"\n        })\n        print(res.json())\n    \n    {\n      \"code\": 0,\n      \"data\": {\n        \"absolute_path\": [\n          \"F:/python/pyvideo/apidata/daa33fee2537b47a0b12e12b926a4b01/10ass.mp4\",\n          \"F:/python/pyvideo/apidata/daa33fee2537b47a0b12e12b926a4b01/en.m4a\",\n          \"F:/python/pyvideo/apidata/daa33fee2537b47a0b12e12b926a4b01/en.srt\",\n          \"F:/python/pyvideo/apidata/daa33fee2537b47a0b12e12b926a4b01/end.srt.ass\",\n          \"F:/python/pyvideo/apidata/daa33fee2537b47a0b12e12b926a4b01/zh-cn.m4a\",\n          \"F:/python/pyvideo/apidata/daa33fee2537b47a0b12e12b926a4b01/zh-cn.srt\",\n          \"F:/python/pyvideo/apidata/daa33fee2537b47a0b12e12b926a4b01/文件说明.txt\"\n        ],\n        \"url\": [\n          \"http://127.0.0.1:9011/apidata/daa33fee2537b47a0b12e12b926a4b01/10ass.mp4\",\n          \"http://127.0.0.1:9011/apidata/daa33fee2537b47a0b12e12b926a4b01/en.m4a\",\n          \"http://127.0.0.1:9011/apidata/daa33fee2537b47a0b12e12b926a4b01/en.srt\",\n          \"http://127.0.0.1:9011/apidata/daa33fee2537b47a0b12e12b926a4b01/end.srt.ass\",\n          \"http://127.0.0.1:9011/apidata/daa33fee2537b47a0b12e12b926a4b01/zh-cn.m4a\",\n          \"http://127.0.0.1:9011/apidata/daa33fee2537b47a0b12e12b926a4b01/zh-cn.srt\",\n          \"http://127.0.0.1:9011/apidata/daa33fee2537b47a0b12e12b926a4b01/文件说明.txt\"\n        ]\n      },\n      \"msg\": \"ok\"\n    }\n    \n    \"\"\"\n    @app.route('/task_status', methods=['POST', 'GET'])\n    def task_status():\n        # 1. 优先从 GET 请求参数中获取 task_id\n        task_id = request.args.get('task_id')\n\n        # 2. 如果 GET 参数中没有 task_id，再从 POST 表单中获取\n        if task_id is None:\n            task_id = request.form.get('task_id')\n\n        # 3. 如果 POST 表单中也没有 task_id，再从 JSON 请求体中获取\n        if task_id is None and request.is_json:\n            task_id = request.json.get('task_id')\n        if not task_id:\n            return jsonify({\"code\": 1, \"msg\": \"The parem  task_id is not set\"})\n        return _get_task_data(task_id)\n        \n\n    \n    # 获取多个任务 前台 content-type:application/json, 数据 {task_id_list:[id1,id2,....]}\n    @app.route('/task_status_list', methods=['POST', 'GET'])\n    def task_status_list():\n        # 1. 优先从 GET 请求参数中获取 task_id\n        task_ids= request.json.get('task_id_list',[])\n        if not task_ids or len(task_ids)<1:\n            return jsonify({\"code\": 1, \"msg\": \"缺少任务id\"})\n        \n        return_data={}\n        for task_id in task_ids:\n            return_data[task_id]=_get_task_data(task_id)\n        return jsonify({\"code\": 0, \"msg\": \"ok\",\"data\":return_data})\n    \n    def _get_task_data(task_id):\n        file = PROCESS_INFO + f'/{task_id}.json'\n        if not Path(file).is_file():\n            if task_id in config.uuid_logs_queue:\n                return {\"code\": -1, \"msg\": _get_order(task_id)}\n\n            return {\"code\": 1, \"msg\": f\"该任务 {task_id} 不存在\"}\n\n        try:\n            data = json.loads(Path(file).read_text(encoding='utf-8'))\n        except Exception as e:\n            return {\"code\": -1, \"msg\": Path(file).read_text(encoding='utf-8')}\n\n        if data['type'] == 'error':\n            return {\"code\": 3, \"msg\": data[\"text\"]}\n        if data['type'] in logs_status_list:\n            text=data.get('text','').strip()\n            return {\"code\": -1, \"msg\": text if text else '等待处理中'}\n        # 完成，输出所有文件\n        file_list = _get_files_in_directory(f'{TARGET_DIR}/{task_id}')\n        if len(file_list) < 1:\n            return {\"code\": 4, \"msg\": '未生成任何结果文件，可能出错了'}\n\n        return {\n            \"code\": 0,\n            \"msg\": \"ok\",\n            \"data\": {\n                \"absolute_path\": [f'{TARGET_DIR}/{task_id}/{name}' for name in file_list],\n                \"url\": [f'{request.scheme}://{request.host}/{API_RESOURCE}/{task_id}/{name}' for name in file_list],\n            }\n        }\n\n    # 排队\n    def _get_order(task_id):\n        order_num=0\n        for it in config.prepare_queue:\n            order_num+=1\n            if it.uuid == task_id:\n                return f'当前处于预处理队列第{order_num}位' if config.defaulelang=='zh' else f\"No.{order_num} on perpare queue\"\n        \n        order_num=0\n        for it in config.regcon_queue:\n            order_num+=1\n            if it.uuid == task_id:\n                return f'当前处于语音识别队列第{order_num}位' if config.defaulelang=='zh' else f\"No.{order_num} on perpare queue\"\n        order_num=0\n        for it in config.trans_queue:\n            order_num+=1\n            if it.uuid == task_id:\n                return f'当前处于字幕翻译队列第{order_num}位' if config.defaulelang=='zh' else f\"No.{order_num} on perpare queue\"\n        order_num=0\n        for it in config.dubb_queue:\n            order_num+=1\n            if it.uuid == task_id:\n                return f'当前处于配音队列第{order_num}位' if config.defaulelang=='zh' else f\"No.{order_num} on perpare queue\"\n        order_num=0\n        for it in config.align_queue:\n            order_num+=1\n            if it.uuid == task_id:\n                return f'当前处于声画对齐队列第{order_num}位' if config.defaulelang=='zh' else f\"No.{order_num} on perpare queue\"\n        order_num=0\n        for it in config.assemb_queue:\n            order_num+=1\n            if it.uuid == task_id:\n                return f'当前处于输出整理队列第{order_num}位' if config.defaulelang=='zh' else f\"No.{order_num} on perpare queue\"\n        return '正在排队等待执行中，请稍后' if config.defaulelang=='zh' else f\"Waiting in queue\"\n    \n    def _get_files_in_directory(dirname):\n        \"\"\"\n        使用 pathlib 库获取指定目录下的所有文件名，并返回一个文件名列表。\n\n        参数:\n        dirname (str): 要获取文件的目录路径\n\n        返回:\n        list: 包含目录中所有文件名的列表\n        \"\"\"\n        try:\n            # 使用 Path 对象获取目录中的所有文件\n            path = Path(dirname)\n            files = [f.name for f in path.iterdir() if f.is_file()]\n            return files\n        except Exception as e:\n            print(f\"Error while accessing directory {dirname}: {e}\")\n            return []\n\n\n    def _listen_queue():\n        # 监听队列日志 uuid_logs_queue 不在停止中的 stoped_uuid_set\n        Path(TARGET_DIR + f'/processinfo').mkdir(parents=True, exist_ok=True)\n        while 1:\n            # 找出未停止的\n            uuid_list = list(config.uuid_logs_queue.keys())\n            uuid_list = [uuid for uuid in uuid_list if uuid not in config.stoped_uuid_set]\n            # 全部结束\n            if len(uuid_list) < 1:\n                time.sleep(1)\n                continue\n            while len(uuid_list) > 0:\n                uuid = uuid_list.pop(0)\n                if uuid in config.stoped_uuid_set:\n                    continue\n                try:\n                    q = config.uuid_logs_queue.get(uuid)\n                    if not q:\n                        continue\n                    data = q.get(block=False)\n                    if not data:\n                        continue\n\n                    if data['type'] not in end_status_list + logs_status_list:\n                        continue\n                    with open(PROCESS_INFO + f'/{uuid}.json', 'w', encoding='utf-8') as f:\n                        f.write(json.dumps(data))\n                    if data['type'] in end_status_list:\n                        config.stoped_uuid_set.add(uuid)\n                        del config.uuid_logs_queue[uuid]\n                except Exception:\n                    pass\n            time.sleep(0.1)\n\n    multiprocessing.freeze_support()  # Windows 上需要这个来避免子进程的递归执行问题\n    print(f'Starting... API URL is   http://{HOST}:{PORT}')\n    print(f'Document at https://pyvideotrans.com/api-cn')\n    start_thread()\n    threading.Thread(target=_listen_queue).start()\n    try:\n        print(f'\\nAPI URL is   http://{HOST}:{PORT}')\n        serve(app, host=HOST, port=int(PORT))\n    except Exception as e:\n        import traceback\n        traceback.print_exc()\n"
        },
        {
          "name": "azure_voice_list.json",
          "type": "blob",
          "size": 11.3994140625,
          "content": "{\"af\":[\"No\",\"af-ZA-AdriNeural\",\"af-ZA-WillemNeural\"],\"am\":[\"No\",\"am-ET-MekdesNeural\",\"am-ET-AmehaNeural\"],\"ar\":[\"No\",\"ar-AE-FatimaNeural\",\"ar-AE-HamdanNeural\",\"ar-BH-LailaNeural\",\"ar-BH-AliNeural\",\"ar-DZ-AminaNeural\",\"ar-DZ-IsmaelNeural\",\"ar-EG-SalmaNeural\",\"ar-EG-ShakirNeural\",\"ar-IQ-RanaNeural\",\"ar-IQ-BasselNeural\",\"ar-JO-SanaNeural\",\"ar-JO-TaimNeural\",\"ar-KW-NouraNeural\",\"ar-KW-FahedNeural\",\"ar-LB-LaylaNeural\",\"ar-LB-RamiNeural\",\"ar-LY-ImanNeural\",\"ar-LY-OmarNeural\",\"ar-MA-MounaNeural\",\"ar-MA-JamalNeural\",\"ar-OM-AyshaNeural\",\"ar-OM-AbdullahNeural\",\"ar-QA-AmalNeural\",\"ar-QA-MoazNeural\",\"ar-SA-ZariyahNeural\",\"ar-SA-HamedNeural\",\"ar-SY-AmanyNeural\",\"ar-SY-LaithNeural\",\"ar-TN-ReemNeural\",\"ar-TN-HediNeural\",\"ar-YE-MaryamNeural\",\"ar-YE-SalehNeural\"],\"az\":[\"No\",\"az-AZ-BanuNeural\",\"az-AZ-BabekNeural\"],\"bg\":[\"No\",\"bg-BG-KalinaNeural\",\"bg-BG-BorislavNeural\"],\"bn\":[\"No\",\"bn-BD-NabanitaNeural\",\"bn-BD-PradeepNeural\",\"bn-IN-TanishaaNeural\",\"bn-IN-BashkarNeural\"],\"bs\":[\"No\",\"bs-BA-VesnaNeural\",\"bs-BA-GoranNeural\"],\"ca\":[\"No\",\"ca-ES-JoanaNeural\",\"ca-ES-EnricNeural\",\"ca-ES-AlbaNeural\"],\"cs\":[\"No\",\"cs-CZ-VlastaNeural\",\"cs-CZ-AntoninNeural\"],\"cy\":[\"No\",\"cy-GB-NiaNeural\",\"cy-GB-AledNeural\"],\"da\":[\"No\",\"da-DK-ChristelNeural\",\"da-DK-JeppeNeural\"],\"de\":[\"No\",\"de-AT-IngridNeural\",\"de-AT-JonasNeural\",\"de-CH-LeniNeural\",\"de-CH-JanNeural\",\"de-DE-KatjaNeural\",\"de-DE-ConradNeural\",\"de-DE-AmalaNeural\",\"de-DE-BerndNeural\",\"de-DE-ChristophNeural\",\"de-DE-ElkeNeural\",\"de-DE-GiselaNeural\",\"de-DE-KasperNeural\",\"de-DE-KillianNeural\",\"de-DE-KlarissaNeural\",\"de-DE-KlausNeural\",\"de-DE-LouisaNeural\",\"de-DE-MajaNeural\",\"de-DE-RalfNeural\",\"de-DE-TanjaNeural\",\"de-DE-FlorianMultilingualNeural\",\"de-DE-SeraphinaMultilingualNeural\"],\"el\":[\"No\",\"el-GR-AthinaNeural\",\"el-GR-NestorasNeural\"],\"en\":[\"No\",\"en-AU-NatashaNeural\",\"en-AU-WilliamNeural\",\"en-AU-AnnetteNeural\",\"en-AU-CarlyNeural\",\"en-AU-DarrenNeural\",\"en-AU-DuncanNeural\",\"en-AU-ElsieNeural\",\"en-AU-FreyaNeural\",\"en-AU-JoanneNeural\",\"en-AU-KenNeural\",\"en-AU-KimNeural\",\"en-AU-NeilNeural\",\"en-AU-TimNeural\",\"en-AU-TinaNeural\",\"en-CA-ClaraNeural\",\"en-CA-LiamNeural\",\"en-GB-SoniaNeural\",\"en-GB-RyanNeural\",\"en-GB-LibbyNeural\",\"en-GB-AbbiNeural\",\"en-GB-AlfieNeural\",\"en-GB-BellaNeural\",\"en-GB-ElliotNeural\",\"en-GB-EthanNeural\",\"en-GB-HollieNeural\",\"en-GB-MaisieNeural\",\"en-GB-NoahNeural\",\"en-GB-OliverNeural\",\"en-GB-OliviaNeural\",\"en-GB-ThomasNeural\",\"en-HK-YanNeural\",\"en-HK-SamNeural\",\"en-IE-EmilyNeural\",\"en-IE-ConnorNeural\",\"en-IN-NeerjaNeural\",\"en-IN-PrabhatNeural\",\"en-KE-AsiliaNeural\",\"en-KE-ChilembaNeural\",\"en-NG-EzinneNeural\",\"en-NG-AbeoNeural\",\"en-NZ-MollyNeural\",\"en-NZ-MitchellNeural\",\"en-PH-RosaNeural\",\"en-PH-JamesNeural\",\"en-SG-LunaNeural\",\"en-SG-WayneNeural\",\"en-TZ-ImaniNeural\",\"en-TZ-ElimuNeural\",\"en-US-AvaNeural\",\"en-US-AndrewNeural\",\"en-US-EmmaNeural\",\"en-US-BrianNeural\",\"en-US-JennyNeural\",\"en-US-GuyNeural\",\"en-US-AriaNeural\",\"en-US-DavisNeural\",\"en-US-JaneNeural\",\"en-US-JasonNeural\",\"en-US-SaraNeural\",\"en-US-TonyNeural\",\"en-US-NancyNeural\",\"en-US-AmberNeural\",\"en-US-AnaNeural\",\"en-US-AshleyNeural\",\"en-US-BrandonNeural\",\"en-US-ChristopherNeural\",\"en-US-CoraNeural\",\"en-US-ElizabethNeural\",\"en-US-EricNeural\",\"en-US-JacobNeural\",\"en-US-JennyMultilingualNeural\",\"en-US-MichelleNeural\",\"en-US-MonicaNeural\",\"en-US-RogerNeural\",\"en-US-RyanMultilingualNeural\",\"en-US-SteffanNeural\",\"en-US-AIGenerate1Neural\",\"en-US-AIGenerate2Neural\",\"en-US-AndrewMultilingualNeural\",\"en-US-AvaMultilingualNeural\",\"en-US-BlueNeural\",\"en-US-BrianMultilingualNeural\",\"en-US-EmmaMultilingualNeural\",\"en-US-AlloyMultilingualNeural\",\"en-US-EchoMultilingualNeural\",\"en-US-FableMultilingualNeural\",\"en-US-OnyxMultilingualNeural\",\"en-US-NovaMultilingualNeural\",\"en-US-ShimmerMultilingualNeural\",\"en-US-AlloyMultilingualNeuralHD\",\"en-US-EchoMultilingualNeuralHD\",\"en-US-FableMultilingualNeuralHD\",\"en-US-OnyxMultilingualNeuralHD\",\"en-US-NovaMultilingualNeuralHD\",\"en-US-ShimmerMultilingualNeuralHD\",\"en-ZA-LeahNeural\",\"en-ZA-LukeNeural\"],\"es\":[\"No\",\"es-AR-ElenaNeural\",\"es-AR-TomasNeural\",\"es-BO-SofiaNeural\",\"es-BO-MarceloNeural\",\"es-CL-CatalinaNeural\",\"es-CL-LorenzoNeural\",\"es-CO-SalomeNeural\",\"es-CO-GonzaloNeural\",\"es-CR-MariaNeural\",\"es-CR-JuanNeural\",\"es-CU-BelkysNeural\",\"es-CU-ManuelNeural\",\"es-DO-RamonaNeural\",\"es-DO-EmilioNeural\",\"es-EC-AndreaNeural\",\"es-EC-LuisNeural\",\"es-ES-ElviraNeural\",\"es-ES-AlvaroNeural\",\"es-ES-AbrilNeural\",\"es-ES-ArnauNeural\",\"es-ES-DarioNeural\",\"es-ES-EliasNeural\",\"es-ES-EstrellaNeural\",\"es-ES-IreneNeural\",\"es-ES-LaiaNeural\",\"es-ES-LiaNeural\",\"es-ES-NilNeural\",\"es-ES-SaulNeural\",\"es-ES-TeoNeural\",\"es-ES-TrianaNeural\",\"es-ES-VeraNeural\",\"es-ES-XimenaNeural\",\"es-GQ-TeresaNeural\",\"es-GQ-JavierNeural\",\"es-GT-MartaNeural\",\"es-GT-AndresNeural\",\"es-HN-KarlaNeural\",\"es-HN-CarlosNeural\",\"es-MX-DaliaNeural\",\"es-MX-JorgeNeural\",\"es-MX-BeatrizNeural\",\"es-MX-CandelaNeural\",\"es-MX-CarlotaNeural\",\"es-MX-CecilioNeural\",\"es-MX-GerardoNeural\",\"es-MX-LarissaNeural\",\"es-MX-LibertoNeural\",\"es-MX-LucianoNeural\",\"es-MX-MarinaNeural\",\"es-MX-NuriaNeural\",\"es-MX-PelayoNeural\",\"es-MX-RenataNeural\",\"es-MX-YagoNeural\",\"es-NI-YolandaNeural\",\"es-NI-FedericoNeural\",\"es-PA-MargaritaNeural\",\"es-PA-RobertoNeural\",\"es-PE-CamilaNeural\",\"es-PE-AlexNeural\",\"es-PR-KarinaNeural\",\"es-PR-VictorNeural\",\"es-PY-TaniaNeural\",\"es-PY-MarioNeural\",\"es-SV-LorenaNeural\",\"es-SV-RodrigoNeural\",\"es-US-PalomaNeural\",\"es-US-AlonsoNeural\",\"es-UY-ValentinaNeural\",\"es-UY-MateoNeural\",\"es-VE-PaolaNeural\",\"es-VE-SebastianNeural\"],\"et\":[\"No\",\"et-EE-AnuNeural\",\"et-EE-KertNeural\"],\"eu\":[\"No\",\"eu-ES-AinhoaNeural\",\"eu-ES-AnderNeural\"],\"fa\":[\"No\",\"fa-IR-DilaraNeural\",\"fa-IR-FaridNeural\"],\"fi\":[\"No\",\"fi-FI-SelmaNeural\",\"fi-FI-HarriNeural\",\"fi-FI-NooraNeural\"],\"fil\":[\"No\",\"fil-PH-BlessicaNeural\",\"fil-PH-AngeloNeural\"],\"fr\":[\"No\",\"fr-BE-CharlineNeural\",\"fr-BE-GerardNeural\",\"fr-CA-SylvieNeural\",\"fr-CA-JeanNeural\",\"fr-CA-AntoineNeural\",\"fr-CA-ThierryNeural\",\"fr-CH-ArianeNeural\",\"fr-CH-FabriceNeural\",\"fr-FR-DeniseNeural\",\"fr-FR-HenriNeural\",\"fr-FR-AlainNeural\",\"fr-FR-BrigitteNeural\",\"fr-FR-CelesteNeural\",\"fr-FR-ClaudeNeural\",\"fr-FR-CoralieNeural\",\"fr-FR-EloiseNeural\",\"fr-FR-JacquelineNeural\",\"fr-FR-JeromeNeural\",\"fr-FR-JosephineNeural\",\"fr-FR-MauriceNeural\",\"fr-FR-YvesNeural\",\"fr-FR-YvetteNeural\",\"fr-FR-RemyMultilingualNeural\",\"fr-FR-VivienneMultilingualNeural\"],\"ga\":[\"No\",\"ga-IE-OrlaNeural\",\"ga-IE-ColmNeural\"],\"gl\":[\"No\",\"gl-ES-SabelaNeural\",\"gl-ES-RoiNeural\"],\"gu\":[\"No\",\"gu-IN-DhwaniNeural\",\"gu-IN-NiranjanNeural\"],\"he\":[\"No\",\"he-IL-HilaNeural\",\"he-IL-AvriNeural\"],\"hi\":[\"No\",\"hi-IN-SwaraNeural\",\"hi-IN-MadhurNeural\"],\"hr\":[\"No\",\"hr-HR-GabrijelaNeural\",\"hr-HR-SreckoNeural\"],\"hu\":[\"No\",\"hu-HU-NoemiNeural\",\"hu-HU-TamasNeural\"],\"hy\":[\"No\",\"hy-AM-AnahitNeural\",\"hy-AM-HaykNeural\"],\"id\":[\"No\",\"id-ID-GadisNeural\",\"id-ID-ArdiNeural\"],\"is\":[\"No\",\"is-IS-GudrunNeural\",\"is-IS-GunnarNeural\"],\"it\":[\"No\",\"it-IT-ElsaNeural\",\"it-IT-IsabellaNeural\",\"it-IT-DiegoNeural\",\"it-IT-BenignoNeural\",\"it-IT-CalimeroNeural\",\"it-IT-CataldoNeural\",\"it-IT-FabiolaNeural\",\"it-IT-FiammaNeural\",\"it-IT-GianniNeural\",\"it-IT-ImeldaNeural\",\"it-IT-IrmaNeural\",\"it-IT-LisandroNeural\",\"it-IT-PalmiraNeural\",\"it-IT-PierinaNeural\",\"it-IT-RinaldoNeural\",\"it-IT-GiuseppeNeural\"],\"ja\":[\"No\",\"ja-JP-NanamiNeural\",\"ja-JP-KeitaNeural\",\"ja-JP-AoiNeural\",\"ja-JP-DaichiNeural\",\"ja-JP-MayuNeural\",\"ja-JP-NaokiNeural\",\"ja-JP-ShioriNeural\",\"ja-JP-MasaruMultilingualNeural\"],\"jv\":[\"No\",\"jv-ID-SitiNeural\",\"jv-ID-DimasNeural\"],\"ka\":[\"No\",\"ka-GE-EkaNeural\",\"ka-GE-GiorgiNeural\"],\"kk\":[\"No\",\"kk-KZ-AigulNeural\",\"kk-KZ-DauletNeural\"],\"km\":[\"No\",\"km-KH-SreymomNeural\",\"km-KH-PisethNeural\"],\"kn\":[\"No\",\"kn-IN-SapnaNeural\",\"kn-IN-GaganNeural\"],\"ko\":[\"No\",\"ko-KR-SunHiNeural\",\"ko-KR-InJoonNeural\",\"ko-KR-BongJinNeural\",\"ko-KR-GookMinNeural\",\"ko-KR-JiMinNeural\",\"ko-KR-SeoHyeonNeural\",\"ko-KR-SoonBokNeural\",\"ko-KR-YuJinNeural\",\"ko-KR-HyunsuNeural\"],\"lo\":[\"No\",\"lo-LA-KeomanyNeural\",\"lo-LA-ChanthavongNeural\"],\"lt\":[\"No\",\"lt-LT-OnaNeural\",\"lt-LT-LeonasNeural\"],\"lv\":[\"No\",\"lv-LV-EveritaNeural\",\"lv-LV-NilsNeural\"],\"mk\":[\"No\",\"mk-MK-MarijaNeural\",\"mk-MK-AleksandarNeural\"],\"ml\":[\"No\",\"ml-IN-SobhanaNeural\",\"ml-IN-MidhunNeural\"],\"mn\":[\"No\",\"mn-MN-YesuiNeural\",\"mn-MN-BataaNeural\"],\"mr\":[\"No\",\"mr-IN-AarohiNeural\",\"mr-IN-ManoharNeural\"],\"ms\":[\"No\",\"ms-MY-YasminNeural\",\"ms-MY-OsmanNeural\"],\"mt\":[\"No\",\"mt-MT-GraceNeural\",\"mt-MT-JosephNeural\"],\"my\":[\"No\",\"my-MM-NilarNeural\",\"my-MM-ThihaNeural\"],\"nb\":[\"No\",\"nb-NO-PernilleNeural\",\"nb-NO-FinnNeural\",\"nb-NO-IselinNeural\"],\"ne\":[\"No\",\"ne-NP-HemkalaNeural\",\"ne-NP-SagarNeural\"],\"nl\":[\"No\",\"nl-BE-DenaNeural\",\"nl-BE-ArnaudNeural\",\"nl-NL-FennaNeural\",\"nl-NL-MaartenNeural\",\"nl-NL-ColetteNeural\"],\"pl\":[\"No\",\"pl-PL-AgnieszkaNeural\",\"pl-PL-MarekNeural\",\"pl-PL-ZofiaNeural\"],\"ps\":[\"No\",\"ps-AF-LatifaNeural\",\"ps-AF-GulNawazNeural\"],\"pt\":[\"No\",\"pt-BR-FranciscaNeural\",\"pt-BR-AntonioNeural\",\"pt-BR-BrendaNeural\",\"pt-BR-DonatoNeural\",\"pt-BR-ElzaNeural\",\"pt-BR-FabioNeural\",\"pt-BR-GiovannaNeural\",\"pt-BR-HumbertoNeural\",\"pt-BR-JulioNeural\",\"pt-BR-LeilaNeural\",\"pt-BR-LeticiaNeural\",\"pt-BR-ManuelaNeural\",\"pt-BR-NicolauNeural\",\"pt-BR-ValerioNeural\",\"pt-BR-YaraNeural\",\"pt-BR-ThalitaNeural\",\"pt-PT-RaquelNeural\",\"pt-PT-DuarteNeural\",\"pt-PT-FernandaNeural\"],\"ro\":[\"No\",\"ro-RO-AlinaNeural\",\"ro-RO-EmilNeural\"],\"ru\":[\"No\",\"ru-RU-SvetlanaNeural\",\"ru-RU-DmitryNeural\",\"ru-RU-DariyaNeural\"],\"si\":[\"No\",\"si-LK-ThiliniNeural\",\"si-LK-SameeraNeural\"],\"sk\":[\"No\",\"sk-SK-ViktoriaNeural\",\"sk-SK-LukasNeural\"],\"sl\":[\"No\",\"sl-SI-PetraNeural\",\"sl-SI-RokNeural\"],\"so\":[\"No\",\"so-SO-UbaxNeural\",\"so-SO-MuuseNeural\"],\"sq\":[\"No\",\"sq-AL-AnilaNeural\",\"sq-AL-IlirNeural\"],\"sr\":[\"No\",\"sr-Latn-RS-NicholasNeural\",\"sr-Latn-RS-SophieNeural\",\"sr-RS-SophieNeural\",\"sr-RS-NicholasNeural\"],\"su\":[\"No\",\"su-ID-TutiNeural\",\"su-ID-JajangNeural\"],\"sv\":[\"No\",\"sv-SE-SofieNeural\",\"sv-SE-MattiasNeural\",\"sv-SE-HilleviNeural\"],\"sw\":[\"No\",\"sw-KE-ZuriNeural\",\"sw-KE-RafikiNeural\",\"sw-TZ-RehemaNeural\",\"sw-TZ-DaudiNeural\"],\"ta\":[\"No\",\"ta-IN-PallaviNeural\",\"ta-IN-ValluvarNeural\",\"ta-LK-SaranyaNeural\",\"ta-LK-KumarNeural\",\"ta-MY-KaniNeural\",\"ta-MY-SuryaNeural\",\"ta-SG-VenbaNeural\",\"ta-SG-AnbuNeural\"],\"te\":[\"No\",\"te-IN-ShrutiNeural\",\"te-IN-MohanNeural\"],\"th\":[\"No\",\"th-TH-PremwadeeNeural\",\"th-TH-NiwatNeural\",\"th-TH-AcharaNeural\"],\"tr\":[\"No\",\"tr-TR-EmelNeural\",\"tr-TR-AhmetNeural\"],\"uk\":[\"No\",\"uk-UA-PolinaNeural\",\"uk-UA-OstapNeural\"],\"ur\":[\"No\",\"ur-IN-GulNeural\",\"ur-IN-SalmanNeural\",\"ur-PK-UzmaNeural\",\"ur-PK-AsadNeural\"],\"uz\":[\"No\",\"uz-UZ-MadinaNeural\",\"uz-UZ-SardorNeural\"],\"vi\":[\"No\",\"vi-VN-HoaiMyNeural\",\"vi-VN-NamMinhNeural\"],\"wuu\":[\"No\",\"wuu-CN-XiaotongNeural\",\"wuu-CN-YunzheNeural\"],\"yue\":[\"No\",\"yue-CN-XiaoMinNeural\",\"yue-CN-YunSongNeural\"],\"zh\":[\"No\",\"zh-CN-XiaoxiaoNeural\",\"zh-CN-YunxiNeural\",\"zh-CN-YunjianNeural\",\"zh-CN-XiaoyiNeural\",\"zh-CN-YunyangNeural\",\"zh-CN-XiaochenNeural\",\"zh-CN-XiaohanNeural\",\"zh-CN-XiaomengNeural\",\"zh-CN-XiaomoNeural\",\"zh-CN-XiaoqiuNeural\",\"zh-CN-XiaoruiNeural\",\"zh-CN-XiaoshuangNeural\",\"zh-CN-XiaoyanNeural\",\"zh-CN-XiaoyouNeural\",\"zh-CN-XiaozhenNeural\",\"zh-CN-YunfengNeural\",\"zh-CN-YunhaoNeural\",\"zh-CN-YunxiaNeural\",\"zh-CN-YunyeNeural\",\"zh-CN-YunzeNeural\",\"zh-CN-XiaochenMultilingualNeural\",\"zh-CN-XiaorouNeural\",\"zh-CN-XiaoxiaoDialectsNeural\",\"zh-CN-XiaoxiaoMultilingualNeural\",\"zh-CN-XiaoyuMultilingualNeural\",\"zh-CN-YunjieNeural\",\"zh-CN-YunyiMultilingualNeural\",\"zh-CN-guangxi-YunqiNeural\",\"zh-CN-henan-YundengNeural\",\"zh-CN-liaoning-XiaobeiNeural\",\"zh-CN-liaoning-YunbiaoNeural\",\"zh-CN-shaanxi-XiaoniNeural\",\"zh-CN-shandong-YunxiangNeural\",\"zh-CN-sichuan-YunxiNeural\",\"zh-HK-HiuMaanNeural\",\"zh-HK-WanLungNeural\",\"zh-HK-HiuGaaiNeural\",\"zh-TW-HsiaoChenNeural\",\"zh-TW-YunJheNeural\",\"zh-TW-HsiaoYuNeural\"],\"zu\":[\"No\",\"zu-ZA-ThandoNeural\",\"zu-ZA-ThembaNeural\"]}"
        },
        {
          "name": "cli.py",
          "type": "blob",
          "size": 6.0673828125,
          "content": "# 已废弃，请使用 api.py\n# Please use api.py\n# 当前文件仅可用于 Google Colab，若以其他方式使用，请修改 `/content` 等相关路径\n\nimport argparse\nimport os\nimport re\nimport subprocess\nimport sys\nimport time\nfrom pathlib import Path\nfrom urllib.parse import parse_qs, urlparse\n\nimport zhconv\n\ndef download_file(url):\n    \"\"\"Downloads a file from a URL and saves it to /content.\"\"\"\n    if sys.platform!='linux':\n        raise Exception('仅在 Google Colab 上可下载文件，其他系统请传递文件绝对路径')\n    parsed_url = urlparse(url)\n    filename = None\n    filepath = None\n    Path('/content').mkdir(exist_ok=True)\n\n    # Case 1: Filename in URL path\n    if parsed_url.path:\n        potential_filename = os.path.basename(parsed_url.path)\n        if '.' in potential_filename:\n            filename = re.sub(r'[^\\w\\-_\\.]', '', potential_filename) # Sanitize filename for Linux\n            filepath = os.path.join('/content', filename)\n\n    # Case 2: Filename in query parameters\n    if not filepath:  # if no filename found in path\n        query_params = parse_qs(parsed_url.query)\n        video_audio_exts = ['mp4', 'mov', 'mkv', 'mpeg', 'avi', 'wmv', 'ts', 'wav', 'flac', 'mp3', 'm4a', 'wma']\n        for param_value in query_params.values():  # Check all the parameter's values\n              for value in param_value: # some parameter may have multiple values, we check all of them\n                  potential_filename_with_ext = None\n                  for ext in video_audio_exts:\n                      if '.' + ext in value :\n                          potential_filename_with_ext = value\n                          break;\n                  if potential_filename_with_ext:\n                      filename = re.sub(r'[^\\w\\-_\\.]', '', potential_filename_with_ext)\n                      filepath = os.path.join('/content', filename)\n                      break  # Stop after finding the first valid filename\n\n\n    if filepath and filename:\n        try:\n           subprocess.run(['wget', '-O', filepath , url], check=True, capture_output=True) # Suppress output to avoid verbosity\n           return filepath\n        except subprocess.CalledProcessError as e:\n            print(f\"Error downloading file: {e.stderr.decode()}\")  # Decode stderr for printing\n            return None\n    else:\n        print(\"No valid filename found in URL.\")\n        return None\n\n\n\ndef speech_to_text(model_name='large-v2',language=\"auto\",prompt=None,audio_file=None,device='cuda',compute_type='float16'):\n    from videotrans.configure import config\n    from videotrans.util import tools\n    from faster_whisper import WhisperModel\n    if audio_file.startswith('http'):\n        audio_file=download_file(audio_file)\n    if not audio_file or not Path(audio_file).exists():\n        raise Exception(f'未找到 {audio_file} ，请传递文件绝对路径或文件是否存在')\n    language=None if not language or language=='auto' else language[:2]\n    model = WhisperModel(\n                model_name,\n                device=device,\n                compute_type=compute_type,\n        download_root=\"./models\",\n        local_files_only=False\n    )\n    Path(config.TEMP_DIR).mkdir(parents=True, exist_ok=True)\n\n\n    stem=Path(audio_file).stem\n    shibie_file=config.TEMP_DIR+f'/{time.time()}.wav'\n\n    tools.runffmpeg(['-y','-i',audio_file,'-ar','16000','-ac','1',shibie_file])\n    segments, info = model.transcribe(\n            shibie_file,\n            beam_size=5,\n            best_of=5,\n            condition_on_previous_text=False,\n            vad_filter=True,\n            vad_parameters=dict(\n                min_speech_duration_ms=500,\n                max_speech_duration_s= float('inf'),\n                min_silence_duration_ms=250,\n                speech_pad_ms=100\n            ),\n            word_timestamps=True,\n            language=language,\n            initial_prompt=prompt if prompt else None\n        )\n    raws=[]\n    for segment in segments:\n        text=zhconv.convert(segment.text, 'zh-hans') if language=='zh' else segment.text\n        startraw=tools.ms_to_time_string(ms=segment.words[0].start*1000)\n        endraw=tools.ms_to_time_string(ms=segment.words[-1].end*1000)\n        raws.append(f'{len(raws)+1}\\n{startraw} --> {endraw}\\n{text.strip()}')\n    output=config.ROOT_DIR+'/../output'\n    Path(output).mkdir(parents=True, exist_ok=True)\n    with open(output+f'/{stem}.srt', 'w', encoding='utf-8') as f:\n        srts=\"\\n\\n\".join(raws)\n        print(srts)\n        f.write(srts)\n        print(f'\\n已保存到 {stem}.srt\\n')\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(prog='视频翻译pyVideoTrans', description='')\n\n    parser.add_argument('-m', '--model', default='large-v2', type=str, choices=['tiny','tiny.en','base','base.en','small','small.en','medium', 'medium.en', 'large-v1', 'large-v2', 'large-v3', 'large-v3-turbo'], help='选择使用哪个模型')\n\n    parser.add_argument('-l', '--language', default='auto', type=str, choices=['zh', 'en', 'ja','ko','ru','fr','de','es','pt','it','id','hi','hu','ms','kk','cs','nl','sv','bn','he','vi','tr','th','ar','auto'], help='选择音视频发音语言')\n\n    parser.add_argument('-f', '--file', default='', type=str,  help='填写要识别创建字幕的音频或视频名称，含后缀，文件请上传到cli.py本文件同目录下, 如果名字含空格或特殊符号，请用英文双引号包括起来')\n\n    parser.add_argument('-d', '--device', default='auto', type=str,choices=['cpu','cuda','auto'],  help='填写要在cpu还是cuda上运行，auto为自动')\n    parser.add_argument('-c', '--compute_type', default='default', type=str,choices=['default','float16','float32','int8','int8_float16','int8_float32'],  help='填写数据类型，最佳为float16，需显卡支持')\n\n    parser.add_argument('-p', '--prompt', default=None, type=str, help='设置prompt，用于模型识别')\n\n    DEFAULT_ARGS = vars(parser.parse_args([]))\n    kw=parser.parse_args()\n    speech_to_text(model_name=kw.model, language=kw.language, prompt=kw.prompt, audio_file=kw.file, device=kw.device, compute_type=kw.compute_type)\n\n\"\"\"\n## explame\n\npython cli.py -m tiny -f \"c:/users/c1/videos/5s.wav\"\n\n\"\"\"\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "ffmpeg",
          "type": "tree",
          "content": null
        },
        {
          "name": "ffmpeg下载.txt",
          "type": "blob",
          "size": 0.2197265625,
          "content": "windows上下载ffmpeg后，将bin目录下的 ffmpeg.exe和ffprobe.exe 文件复制到当前目录下的 ffmpeg 文件夹内\n\n下载地址\n\nhttps://github.com/BtbN/FFmpeg-Builds/releases/download/autobuild-2023-11-30-12-55/ffmpeg-n6.0.1-win64-gpl-6.0.zip"
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements-colab.txt",
          "type": "blob",
          "size": 0.4228515625,
          "content": "--extra-index-url https://download.pytorch.org/whl/cu121\nfaster-whisper\nctranslate2==4.4.0\naiohttp\ncertifi\ndeepl\nelevenlabs\ngoogle-ai-generativelanguage\ngoogle-generativeai\nhttpx\nhuggingface-hub\nlibrosa\nmultidict\nnumpy==1.26\nonnxruntime\nopenai\nopenai-whisper\npydub\nPyYAML\nrequests\nsoundfile\ntorch\ntorchaudio\nzhconv\npydantic\npydantic_core\nelevenlabs\nsrt\ndeepgram-sdk\ndeepgram-captions\naddict\ndatasets==3.0\nsimplejson\nsortedcontainers\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.6279296875,
          "content": "faster-whisper\nctranslate2\naiohttp\ncertifi\ndeepl\nelevenlabs\ngoogle-ai-generativelanguage\ngoogle-generativeai\ngtts\nhttpx\nhuggingface-hub\nlibrosa\nmultidict\nnumpy==1.26\nonnxruntime\nopenai\nopenai-whisper\nPillow\npydub\npygame\nPySide6\npytz\nPyYAML\nrequests\nshiboken6\nsoundfile\nSpeechRecognition\ntencentcloud-sdk-python-common\ntencentcloud-sdk-python-tmt\ntorch\ntorchaudio\nzhconv\nazure-cognitiveservices-speech\npydantic\npydantic_core\nelevenlabs\nplyer\nflask\nwaitress\nsrt\npy7zr\ndeepgram-sdk\ndeepgram-captions\nfunasr\nmodelscope\nanthropic\naddict\ndatasets==3.0\nsimplejson\nsortedcontainers\nalibabacloud_alimt20181012==1.1.0\nsamplerate;sys_platform == 'win32'\n"
        },
        {
          "name": "run-test.bat",
          "type": "blob",
          "size": 0.0595703125,
          "content": "@echo off\n\ncall %cd%\\\\venv\\\\scripts\\\\python.exe test.py\npause"
        },
        {
          "name": "run.bat",
          "type": "blob",
          "size": 0.05078125,
          "content": "@echo off\ncall %cd%\\\\venv\\\\scripts\\\\python.exe sp.py"
        },
        {
          "name": "runapi.bat",
          "type": "blob",
          "size": 0.0517578125,
          "content": "@echo off\ncall %cd%\\\\venv\\\\scripts\\\\python.exe api.py"
        },
        {
          "name": "sp.py",
          "type": "blob",
          "size": 4.0439453125,
          "content": "\"\"\"\n\npyVideoTrans: Translate the video from one language to another and add dubbing\n\nHome-page: https://github.com/jianchang512/pyvideotrans\nAuthor: jianchang512@gmail.com\nDocuments: https://pyvideotrans.com\nLicense: GPL-V3\n\n# 代码是一坨屎，但又不是不能跑O(∩_∩)O~别在意那些细节\n# 写的这么烂，一看就不是AI写的\n\n\"\"\"\nimport multiprocessing\nimport sys, os\nimport time\n\nfrom PySide6 import QtWidgets\nfrom PySide6.QtCore import Qt, QTimer, QPoint, QSettings, QSize\nfrom PySide6.QtGui import QPixmap, QIcon, QGuiApplication\n\nfrom videotrans import VERSION\n\nos.environ['KMP_DUPLICATE_LIB_OK'] = 'True'\nos.environ[\"PYTORCH_ENABLE_MPS_FALLBACK\"] = \"1\"\n\nclass StartWindow(QtWidgets.QWidget):\n    def __init__(self):\n        super(StartWindow, self).__init__()\n        self.width = 1200\n        self.height = 700\n        self.resize(560, 350)\n        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)\n       \n        self.label = QtWidgets.QLabel(self)\n        self.pixmap = QPixmap(\"./videotrans/styles/logo.png\")\n        self.label.setPixmap(self.pixmap)\n        self.label.setScaledContents(True)\n        self.label.setAlignment(Qt.AlignCenter)\n        self.label.setGeometry(self.rect()) #直接设置几何形状覆盖\n\n        self.setWindowIcon(QIcon(\"./videotrans/styles/icon.ico\"))\n        \n        \n        \n        v1 = QtWidgets.QVBoxLayout()\n        v1.addStretch(1)\n        h1 = QtWidgets.QHBoxLayout()\n        v1.addLayout(h1)\n        v1.addStretch(0)\n        h1.addStretch(1)\n        self.lab = QtWidgets.QLabel()\n        self.lab.setStyleSheet(\"\"\"font-size:16px;color:#fff;text-align:center;background-color:transparent\"\"\")\n        self.lab.setText(f\"pyVideoTrans {VERSION} Loading...\")\n        h1.addWidget(self.lab)\n        h1.addStretch(0)\n        self.setLayout(v1)\n        \n        self.show()\n        self.center()\n        QTimer.singleShot(100, self.run)\n\n    def run(self):\n        # 创建并显示窗口B\n        print(time.time())\n        import videotrans.ui.dark.darkstyle_rc\n        with open('./videotrans/styles/style.qss', 'r', encoding='utf-8') as f:\n            app.setStyleSheet(f.read())\n        from videotrans.configure import config\n        try:\n            from videotrans.mainwin._main_win import MainWindow\n            sets=QSettings(\"pyvideotrans\", \"settings\")\n            w,h=int(self.width*0.85), int(self.height*0.85)\n            size = sets.value(\"windowSize\", QSize(w,h))\n            try:\n                w=size.width()\n                h=size.height()\n            except:\n                pass\n            config.MAINWIN=MainWindow(width=w, height=h)\n            config.MAINWIN.move(QPoint(int((self.width - w) / 2), int((self.height - h) / 2)))\n        except Exception as e:\n            import traceback\n            from PySide6.QtWidgets import QMessageBox\n            msg=traceback.format_exc()\n            if msg.find('torch._C')>0:\n                QtWidgets.QMessageBox.critical(startwin,\"Error\",'因底层torch升级，请重新下载完整包' if config.defaulelang=='zh' else 'Please download the full package again')\n            else:\n                QtWidgets.QMessageBox.critical(startwin,\"Error\",msg)\n\n        print(time.time())\n        QTimer.singleShot(500, lambda :self.close())\n\n    def center(self):\n        screen = QGuiApplication.primaryScreen()\n        screen_resolution = screen.geometry()\n        self.width, self.height = screen_resolution.width(), screen_resolution.height()\n        self.move(QPoint(int((self.width - 560) / 2), int((self.height - 350) / 2)))\n\nif __name__ == \"__main__\":\n    multiprocessing.freeze_support()  # Windows 上需要这个来避免子进程的递归执行问题\n    try:\n        QtWidgets.QApplication.setHighDpiScaleFactorRoundingPolicy(Qt.HighDpiScaleFactorRoundingPolicy.PassThrough)\n    except:\n        pass\n\n    app = QtWidgets.QApplication(sys.argv)\n    startwin = None\n    try:\n        startwin = StartWindow()\n    except Exception as e:\n        import traceback\n        msg=traceback.format_exc()\n        QtWidgets.QMessageBox.critical(startwin,\"Error\",msg)\n    sys.exit(app.exec())\n"
        },
        {
          "name": "testcuda.py",
          "type": "blob",
          "size": 11.7177734375,
          "content": "# 测试 CUDA 可用性\n# 找到一个 h264 编码的mp4视频，重命名为 raw.mp4，然后复制到和当前脚本同目录下，然后执行测试\n\nimport json\nimport subprocess\nimport torch\nimport os\nimport sys\nfrom torch.backends import cudnn\n\n# ffmpeg\nrootdir = os.getcwd()\ntmpdir = os.path.join(rootdir, 'tmp')\nif sys.platform == 'win32':\n    os.environ['PATH'] = rootdir + f';{rootdir}\\\\ffmpeg;' + os.environ['PATH']\nelse:\n    os.environ['PATH'] = rootdir + f':{rootdir}/ffmpeg:' + os.environ['PATH']\n\nif torch.cuda.is_available():\n    print('CUDA is ok')\nelse:\n    print(\"no CUDA environ\")\n    input(\"\\nPress enter for close\")\n    sys.exit()\nif cudnn.is_available() and cudnn.is_acceptable(torch.tensor(1.).cuda()):\n    print('cudnn is ok')\nelse:\n    print('no cudnn  ')\n    input(\"\\nPress enter for close\")\n    sys.exit()\n\nresult = subprocess.run(['ffmpeg', '-hwaccels'], text=True, stdout=subprocess.PIPE)\nprint(f'Accels:\\n{result.stdout}')\n\nif not os.path.exists(tmpdir):\n    os.makedirs(tmpdir, exist_ok=True)\n\n# 原始视频\nsourcemp4 = rootdir + \"/raw.mp4\"\nsourceavi = rootdir + \"/raw.mp4.avi\"\nif not os.path.exists(sourcemp4):\n    print('\\ncopy a video rename raw.mp4, and paster to here')\n    input(\"\\nPress enter for close\")\n    sys.exit()\n\n\ndef runffmpeg(cmd, *, title=\"\"):\n    p = subprocess.Popen(cmd,\n                         stdout=subprocess.PIPE,\n                         encoding=\"utf-8\",\n                         stderr=subprocess.PIPE)\n    outs, errs = p.communicate()\n    if p.returncode == 0:\n        print(f'\\n[OK] {title}:\\n{cmd=}\\n')\n        return True\n\n    print(\"\\n\\n******Its Error*******\")\n    print(f'\\n[Error] {title}\\n')\n    print(f'{cmd=}')\n    print(str(errs))\n    print(\"\\n******Error*******\\n\")\n\n    # for (i, it) in enumerate(cmd):\n    #    if it == '-hwaccel' and cmd[i] == 'cuda':\n    #        print(f'hwaccel_output_format=cuda Dont Support, But hwaccel_output_format=nv12 is OK')\n    #        break\n\n    input(\"\\nPress enter for close\")\n    sys.exit()\n\n\ndef runffprobe(cmd):\n    try:\n        p = subprocess.run(['ffprobe'] + cmd, stdout=subprocess.PIPE, text=True)\n        if p.returncode == 0:\n            return p.stdout.strip()\n        else:\n            print(f'{p.stderr=}')\n        return False\n    except subprocess.CalledProcessError as e:\n        print(f'{e=}')\n        return False\n\n\n# 获取视频信息\ndef get_video_info(mp4_file, *, video_fps=False, video_scale=False, video_time=False):\n    out = runffprobe(['-v', 'quiet', '-print_format', 'json', '-show_format', '-show_streams', mp4_file])\n    if out is False:\n        raise Exception(f'ffprobe error:dont get video information')\n    out = json.loads(out)\n    result = {\n        \"video_fps\": 0,\n        \"video_codec_name\": \"h264\",\n        \"audio_codec_name\": \"aac\",\n        \"width\": 0,\n        \"height\": 0,\n        \"time\": 0,\n        \"streams_len\": 0,\n        \"streams_audio\": 0\n    }\n    if \"streams\" not in out or len(out[\"streams\"]) < 1:\n        raise Exception(f'ffprobe error:streams is 0')\n\n    if \"format\" in out and out['format']['duration']:\n        result['time'] = int(float(out['format']['duration']) * 1000)\n    for it in out['streams']:\n        result['streams_len'] += 1\n        if it['codec_type'] == 'video':\n            result['video_codec_name'] = it['codec_name']\n            result['width'] = int(it['width'])\n            result['height'] = int(it['height'])\n            fps, c = it['r_frame_rate'].split('/')\n            if not c or c == '0':\n                c = 1\n                fps = int(fps)\n            else:\n                fps = round(int(fps) / int(c))\n            result['video_fps'] = fps\n        elif it['codec_type'] == 'audio':\n            result['streams_audio'] += 1\n            result['audio_codec_name'] = it['codec_name']\n\n    if video_time:\n        return result['time']\n    if video_fps:\n        return ['video_fps']\n    if video_scale:\n        return result['width'], result['height']\n    return result\n\n\ndef test_cuda(libx264=\"libx264\"):\n    # 从视频中截取的图片\n    # 从原始视频中分离出的无声视频\n    novoice = os.path.join(tmpdir, 'novoice.mp4')\n    # 视频 音频 硬字幕合并后输出\n    out_hard = os.path.join(tmpdir, 'out_hard.mp4')\n\n    # 视频 音频 软字幕合并后输出\n    out_soft = os.path.join(tmpdir, 'out_soft.mp4')\n    # 配音无字幕\n    out_nosrt = os.path.join(tmpdir, 'out_nosrt.mp4')\n\n    # 从原始视频中分离出音频\n    m4a = os.path.join(tmpdir, '1.m4a')\n    # m4a 格式转为 wav格式\n    wav = os.path.join(tmpdir, '1.wav')\n    wavspeedup = os.path.join(tmpdir, '1-speedup.wav')\n\n    # 连接2个视频片段\n    concat = os.path.join(tmpdir, 'concat.txt')\n    # 字幕文件\n    srtfile = os.path.join(tmpdir, 'zimu.srt')\n    # 根据图片生成的视频\n    # 从视频中截取的片段\n    pianduan = os.path.join(tmpdir, 'pianduan.mp4')\n\n    # 图片视频片段和截取的片段合并\n\n    # 获取视频信息\n    video_info = get_video_info(sourcemp4)\n    if not video_info or video_info['time'] == 0:\n        print(\"The video is error,please replace\")\n        input(\"\\nPress enter will close\")\n        sys.exit()\n\n    print(f\"start test  ...\")\n    if video_info['video_codec_name'] != 'h264' or video_info['audio_codec_name'] != 'aac':\n        # 转换\n        tmptestmp4 = os.path.join(rootdir, 'tmptest.mp4')\n        accel_pre = ['ffmpeg',\n                     '-hide_banner',\n                     '-ignore_unknown',\n                     '-vsync',\n                     'vfr',\n                     '-extra_hw_frames',\n                     '2']\n        runffmpeg(accel_pre + [\n            '-y',\n            '-i',\n            sourcemp4,\n            '-c:v',\n            libx264,\n            '-c:a',\n            'aac',\n            tmptestmp4]\n                  , title=\"raw.mp4格式不正确，请确保是h264编码的mp4视频\")\n        os.unlink(sourcemp4)\n        os.rename(tmptestmp4, sourcemp4)\n        # 获取视频信息\n        video_info = get_video_info(sourcemp4)\n        if not video_info or video_info['time'] == 0:\n            print(\"The video is error,please replace\")\n            input(\"\\nPress enter will close\")\n            sys.exit()\n\n    fps = video_info['video_fps']\n    scale = [video_info['width'], video_info['height']]\n\n    # 从原始视频 分离出无声视频 cuda + h264_cuvid\n    accel_pre = ['ffmpeg',\n                 '-hide_banner',\n                 '-ignore_unknown',\n                 '-vsync',\n                 'vfr',\n                 '-extra_hw_frames',\n                 '2']\n    runffmpeg(accel_pre + [\n\n        '-y',\n        '-i',\n        sourcemp4,\n        '-an',\n        '-c:v',\n        libx264,\n        novoice]\n              , title='从原始视频 分离出无声视频')\n\n    # 从原始视频 分离出音频 cuda + h264_cuvid\n    accel_pre = ['ffmpeg',\n                 '-hide_banner',\n                 '-ignore_unknown',\n                 '-vsync',\n                 'vfr',\n                 '-extra_hw_frames',\n                 '2']\n    runffmpeg(accel_pre + [\n\n        '-y',\n        '-i',\n        sourcemp4,\n        '-vn',\n        '-c:a',\n        'aac',\n        m4a]\n              , title='从原始视频 分离出音频')\n\n    # 分离出的 m4a 转为 wav cuda + h264_cuvid\n    accel_pre = ['ffmpeg',\n                 '-hide_banner',\n                 '-ignore_unknown',\n                 '-vsync',\n                 'vfr',\n                 '-extra_hw_frames',\n                 '2']\n    runffmpeg(accel_pre + [\n\n        '-y',\n        '-i',\n        m4a,\n        '-ac',\n        '1',\n        wav]\n              , title='分离出的 m4a 转为 wav')\n\n    # 截取 00:00:05 -- 00:00:15 nv12 +  not h264_cuvid\n    accel_pre = ['ffmpeg',\n                 '-hide_banner',\n                 '-ignore_unknown',\n                 '-vsync',\n                 'vfr',\n                 '-extra_hw_frames',\n                 '2']\n    runffmpeg(accel_pre + [\n\n        '-y',\n        '-ss',\n        '00:00:05',\n        '-to',\n        '00:00:10.500',\n        '-i',\n        novoice,\n        '-vf',\n        \"setpts=2*PTS\",\n        '-c:v',\n        libx264,\n        '-crf',\n        '13',\n        pianduan]\n              , title='截取 00:00:05 -- 00:00:15')\n\n    with open(srtfile, 'w', encoding='utf-8') as f:\n        f.write(\"\"\"\n1\n00:00:00,000 --> 00:00:05,780\nrear seat\n    \n2\n00:00:05,780 --> 00:00:08,436\nIn this issue we introduce electromagnetic punishment in the park\n    \n3\n00:00:08,436 --> 00:00:10,132\nFirst of all, we got an electromagnetic penalty\"\"\")\n    if sys.platform == 'win32':\n        hardfile = os.path.basename(srtfile)\n    else:\n        hardfile = srtfile\n    # 视频 音频 硬字幕合并 nv12 +  h264_cuvid\n    os.chdir(os.path.dirname(srtfile))\n    accel_pre = ['ffmpeg',\n                 '-hide_banner',\n                 '-ignore_unknown',\n                 '-vsync',\n                 'vfr',\n                 '-extra_hw_frames',\n                 '2']\n    runffmpeg(accel_pre + [\n\n        '-y',\n        '-i',\n        novoice,\n        '-i',\n        m4a,\n        '-c:v',\n        libx264,\n        '-c:a',\n        'aac',\n        '-vf',\n        f'subtitles={hardfile}',\n        out_hard]\n              , title='视频 音频 硬字幕合并')\n\n    # 视频 硬字幕 nv12 +  h264_cuvid\n    accel_pre = ['ffmpeg',\n                 '-hide_banner',\n                 '-ignore_unknown',\n                 '-vsync',\n                 'vfr',\n                 '-extra_hw_frames',\n                 '2']\n    runffmpeg(accel_pre + [\n\n        '-y',\n        '-i',\n        novoice,\n        '-c:v',\n        libx264,\n        '-vf',\n        f'subtitles={hardfile}',\n        out_hard]\n              , title='视频 硬字幕')\n\n    # 视频 配音 软字幕 cuda +   h264_cuvid\n    accel_pre = ['ffmpeg',\n                 '-hide_banner',\n                 '-ignore_unknown',\n                 '-vsync',\n                 'vfr',\n                 '-extra_hw_frames',\n                 '2'\n                 ]\n    runffmpeg(accel_pre + [\n\n        '-y',\n        '-i',\n        novoice,\n        '-i',\n        m4a,\n        '-i',\n        srtfile,\n        '-c:v',\n        libx264,\n        '-c:a',\n        'aac',\n        '-c:s',\n        'mov_text',\n        '-metadata:s:s:0',\n        'language=chi',\n        out_soft]\n              , title='视频 配音 软字幕')\n\n    # 软字幕无配音 cuda + h264_cuvid\n    accel_pre = [\"ffmpeg\", \"-hide_banner\",\n                 \"-ignore_unknown\", \"-vsync\", \"vfr\",\n                 \"-extra_hw_frames\", \"2\"]\n    runffmpeg(\n        accel_pre + [\"-y\", \"-i\", novoice, \"-i\", srtfile, \"-c:v\", libx264, \"-c:s\", \"mov_text\",\n                     \"-metadata:s:s:0\", \"language=chi\", out_soft], title='软字幕无配音')\n\n    # 配音无字幕\n    accel_pre = [\"ffmpeg\", \"-hide_banner\",\n                 \"-ignore_unknown\", \"-vsync\", \"vfr\",\n                 \"-extra_hw_frames\", \"2\"]\n    runffmpeg(accel_pre + [\"-y\", \"-i\", novoice, \"-i\", m4a, \"-c:v\", libx264, \"-c:a\", \"aac\",\n                           out_nosrt], title='配音无字幕')\n\n    # 加速音频\n    accel_pre = [\"ffmpeg\", \"-hide_banner\",\n                 \"-ignore_unknown\", \"-vsync\", \"vfr\",\n\n                 \"-extra_hw_frames\", \"2\"]\n    runffmpeg(accel_pre + [\"-y\", \"-i\", wav, \"-af\", \"atempo=2\", wavspeedup], title='加速音频')\n\n    # mp4 转为 api\n    accel_pre = [\"ffmpeg\", \"-hide_banner\",\n                 \"-ignore_unknown\", \"-vsync\", \"vfr\",\n                 \"-extra_hw_frames\", \"2\", ]\n    runffmpeg(accel_pre + [\"-y\", \"-i\", sourcemp4, \"-c:v\", libx264, \"-c:a\", \"aac\", sourceavi], title='mp4 转为 avi')\n\n    # avi 转为 mp4\n    accel_pre = [\"ffmpeg\", \"-hide_banner\",\n                 \"-ignore_unknown\", \"-vsync\", \"vfr\",\n                 \"-extra_hw_frames\", \"2\", ]\n    runffmpeg(accel_pre + [\"-y\", \"-i\", sourceavi, \"-c:v\", libx264, \"-c:a\", \"aac\", f\"{sourceavi}.mp4\"],\n              title='avi 转为 mp4')\n\n\ntest_cuda(libx264='h264_nvenc')\ntest_cuda(libx264='h264_qsv')\ntest_cuda(libx264='h264_vaapi')\ntest_cuda(libx264='h264_videotoolbox')\n"
        },
        {
          "name": "update_ffmpeg.bat",
          "type": "blob",
          "size": 0.1328125,
          "content": "@echo off\nsetlocal\n\n:: Calls the Python script and keeps the window open\npython \"%~dp0videotrans\\task\\update_ffmpeg.py\"\npause\n\nendlocal\n"
        },
        {
          "name": "update_ytwin32.bat",
          "type": "blob",
          "size": 0.1318359375,
          "content": "@echo off\nsetlocal\n\n:: Calls the Python script and keeps the window open\npython \"%~dp0videotrans\\task\\update_ytdlp.py\"\npause\n\nendlocal\n"
        },
        {
          "name": "uvr5_weights",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.json",
          "type": "blob",
          "size": 0.0478515625,
          "content": "{\n  \"version\": \"2.70\",\n  \"version_num\": 120070\n}\n"
        },
        {
          "name": "videotrans",
          "type": "tree",
          "content": null
        },
        {
          "name": "voice_list.json",
          "type": "blob",
          "size": 9.8291015625,
          "content": "{\n  \"af\": [\n    \"No\",\n    \"af-ZA-AdriNeural\",\n    \"af-ZA-WillemNeural\"\n  ],\n  \"sq\": [\n    \"No\",\n    \"sq-AL-AnilaNeural\",\n    \"sq-AL-IlirNeural\"\n  ],\n  \"am\": [\n    \"No\",\n    \"am-ET-AmehaNeural\",\n    \"am-ET-MekdesNeural\"\n  ],\n  \"ar\": [\n    \"No\",\n    \"ar-DZ-AminaNeural\",\n    \"ar-DZ-IsmaelNeural\",\n    \"ar-BH-AliNeural\",\n    \"ar-BH-LailaNeural\",\n    \"ar-EG-SalmaNeural\",\n    \"ar-EG-ShakirNeural\",\n    \"ar-IQ-BasselNeural\",\n    \"ar-IQ-RanaNeural\",\n    \"ar-JO-SanaNeural\",\n    \"ar-JO-TaimNeural\",\n    \"ar-KW-FahedNeural\",\n    \"ar-KW-NouraNeural\",\n    \"ar-LB-LaylaNeural\",\n    \"ar-LB-RamiNeural\",\n    \"ar-LY-ImanNeural\",\n    \"ar-LY-OmarNeural\",\n    \"ar-MA-JamalNeural\",\n    \"ar-MA-MounaNeural\",\n    \"ar-OM-AbdullahNeural\",\n    \"ar-OM-AyshaNeural\",\n    \"ar-QA-AmalNeural\",\n    \"ar-QA-MoazNeural\",\n    \"ar-SA-HamedNeural\",\n    \"ar-SA-ZariyahNeural\",\n    \"ar-SY-AmanyNeural\",\n    \"ar-SY-LaithNeural\",\n    \"ar-TN-HediNeural\",\n    \"ar-TN-ReemNeural\",\n    \"ar-AE-FatimaNeural\",\n    \"ar-AE-HamdanNeural\",\n    \"ar-YE-MaryamNeural\",\n    \"ar-YE-SalehNeural\"\n  ],\n  \"az\": [\n    \"No\",\n    \"az-AZ-BabekNeural\",\n    \"az-AZ-BanuNeural\"\n  ],\n  \"bn\": [\n    \"No\",\n    \"bn-BD-NabanitaNeural\",\n    \"bn-BD-PradeepNeural\",\n    \"bn-IN-BashkarNeural\",\n    \"bn-IN-TanishaaNeural\"\n  ],\n  \"bs\": [\n    \"No\",\n    \"bs-BA-GoranNeural\",\n    \"bs-BA-VesnaNeural\"\n  ],\n  \"bg\": [\n    \"No\",\n    \"bg-BG-BorislavNeural\",\n    \"bg-BG-KalinaNeural\"\n  ],\n  \"my\": [\n    \"No\",\n    \"my-MM-NilarNeural\",\n    \"my-MM-ThihaNeural\"\n  ],\n  \"ca\": [\n    \"No\",\n    \"ca-ES-EnricNeural\",\n    \"ca-ES-JoanaNeural\"\n  ],\n  \"zh\": [\n    \"No\",\n    \"zh-HK-HiuGaaiNeural\",\n    \"zh-HK-HiuMaanNeural\",\n    \"zh-HK-WanLungNeural\",\n    \"zh-CN-XiaoxiaoNeural\",\n    \"zh-CN-XiaoyiNeural\",\n    \"zh-CN-YunjianNeural\",\n    \"zh-CN-YunxiNeural\",\n    \"zh-CN-YunxiaNeural\",\n    \"zh-CN-YunyangNeural\",\n    \"zh-CN-liaoning-XiaobeiNeural\",\n    \"zh-TW-HsiaoChenNeural\",\n    \"zh-TW-YunJheNeural\",\n    \"zh-TW-HsiaoYuNeural\",\n    \"zh-CN-shaanxi-XiaoniNeural\"\n  ],\n  \"hr\": [\n    \"No\",\n    \"hr-HR-GabrijelaNeural\",\n    \"hr-HR-SreckoNeural\"\n  ],\n  \"cs\": [\n    \"No\",\n    \"cs-CZ-AntoninNeural\",\n    \"cs-CZ-VlastaNeural\"\n  ],\n  \"da\": [\n    \"No\",\n    \"da-DK-ChristelNeural\",\n    \"da-DK-JeppeNeural\"\n  ],\n  \"nl\": [\n    \"No\",\n    \"nl-BE-ArnaudNeural\",\n    \"nl-BE-DenaNeural\",\n    \"nl-NL-ColetteNeural\",\n    \"nl-NL-FennaNeural\",\n    \"nl-NL-MaartenNeural\"\n  ],\n  \"en\": [\n    \"No\",\n    \"en-AU-NatashaNeural\",\n    \"en-AU-WilliamNeural\",\n    \"en-CA-ClaraNeural\",\n    \"en-CA-LiamNeural\",\n    \"en-HK-SamNeural\",\n    \"en-HK-YanNeural\",\n    \"en-IN-NeerjaExpressiveNeural\",\n    \"en-IN-NeerjaNeural\",\n    \"en-IN-PrabhatNeural\",\n    \"en-IE-ConnorNeural\",\n    \"en-IE-EmilyNeural\",\n    \"en-KE-AsiliaNeural\",\n    \"en-KE-ChilembaNeural\",\n    \"en-NZ-MitchellNeural\",\n    \"en-NZ-MollyNeural\",\n    \"en-NG-AbeoNeural\",\n    \"en-NG-EzinneNeural\",\n    \"en-PH-JamesNeural\",\n    \"en-PH-RosaNeural\",\n    \"en-SG-LunaNeural\",\n    \"en-SG-WayneNeural\",\n    \"en-ZA-LeahNeural\",\n    \"en-ZA-LukeNeural\",\n    \"en-TZ-ElimuNeural\",\n    \"en-TZ-ImaniNeural\",\n    \"en-GB-LibbyNeural\",\n    \"en-GB-MaisieNeural\",\n    \"en-GB-RyanNeural\",\n    \"en-GB-SoniaNeural\",\n    \"en-GB-ThomasNeural\",\n    \"en-US-AvaMultilingualNeural\",\n    \"en-US-AndrewMultilingualNeural\",\n    \"en-US-EmmaMultilingualNeural\",\n    \"en-US-BrianMultilingualNeural\",\n    \"en-US-AvaNeural\",\n    \"en-US-AndrewNeural\",\n    \"en-US-EmmaNeural\",\n    \"en-US-BrianNeural\",\n    \"en-US-AnaNeural\",\n    \"en-US-AriaNeural\",\n    \"en-US-ChristopherNeural\",\n    \"en-US-EricNeural\",\n    \"en-US-GuyNeural\",\n    \"en-US-JennyNeural\",\n    \"en-US-MichelleNeural\",\n    \"en-US-RogerNeural\",\n    \"en-US-SteffanNeural\"\n  ],\n  \"et\": [\n    \"No\",\n    \"et-EE-AnuNeural\",\n    \"et-EE-KertNeural\"\n  ],\n  \"fil\": [\n    \"No\",\n    \"fil-PH-AngeloNeural\",\n    \"fil-PH-BlessicaNeural\"\n  ],\n  \"fi\": [\n    \"No\",\n    \"fi-FI-HarriNeural\",\n    \"fi-FI-NooraNeural\"\n  ],\n  \"fr\": [\n    \"No\",\n    \"fr-BE-CharlineNeural\",\n    \"fr-BE-GerardNeural\",\n    \"fr-CA-ThierryNeural\",\n    \"fr-CA-AntoineNeural\",\n    \"fr-CA-JeanNeural\",\n    \"fr-CA-SylvieNeural\",\n    \"fr-FR-VivienneMultilingualNeural\",\n    \"fr-FR-RemyMultilingualNeural\",\n    \"fr-FR-DeniseNeural\",\n    \"fr-FR-EloiseNeural\",\n    \"fr-FR-HenriNeural\",\n    \"fr-CH-ArianeNeural\",\n    \"fr-CH-FabriceNeural\"\n  ],\n  \"gl\": [\n    \"No\",\n    \"gl-ES-RoiNeural\",\n    \"gl-ES-SabelaNeural\"\n  ],\n  \"ka\": [\n    \"No\",\n    \"ka-GE-EkaNeural\",\n    \"ka-GE-GiorgiNeural\"\n  ],\n  \"de\": [\n    \"No\",\n    \"de-AT-IngridNeural\",\n    \"de-AT-JonasNeural\",\n    \"de-DE-SeraphinaMultilingualNeural\",\n    \"de-DE-FlorianMultilingualNeural\",\n    \"de-DE-AmalaNeural\",\n    \"de-DE-ConradNeural\",\n    \"de-DE-KatjaNeural\",\n    \"de-DE-KillianNeural\",\n    \"de-CH-JanNeural\",\n    \"de-CH-LeniNeural\"\n  ],\n  \"el\": [\n    \"No\",\n    \"el-GR-AthinaNeural\",\n    \"el-GR-NestorasNeural\"\n  ],\n  \"gu\": [\n    \"No\",\n    \"gu-IN-DhwaniNeural\",\n    \"gu-IN-NiranjanNeural\"\n  ],\n  \"he\": [\n    \"No\",\n    \"he-IL-AvriNeural\",\n    \"he-IL-HilaNeural\"\n  ],\n  \"hi\": [\n    \"No\",\n    \"hi-IN-MadhurNeural\",\n    \"hi-IN-SwaraNeural\"\n  ],\n  \"hu\": [\n    \"No\",\n    \"hu-HU-NoemiNeural\",\n    \"hu-HU-TamasNeural\"\n  ],\n  \"is\": [\n    \"No\",\n    \"is-IS-GudrunNeural\",\n    \"is-IS-GunnarNeural\"\n  ],\n  \"id\": [\n    \"No\",\n    \"id-ID-ArdiNeural\",\n    \"id-ID-GadisNeural\"\n  ],\n  \"ga\": [\n    \"No\",\n    \"ga-IE-ColmNeural\",\n    \"ga-IE-OrlaNeural\"\n  ],\n  \"it\": [\n    \"No\",\n    \"it-IT-GiuseppeNeural\",\n    \"it-IT-DiegoNeural\",\n    \"it-IT-ElsaNeural\",\n    \"it-IT-IsabellaNeural\"\n  ],\n  \"ja\": [\n    \"No\",\n    \"ja-JP-KeitaNeural\",\n    \"ja-JP-NanamiNeural\"\n  ],\n  \"jv\": [\n    \"No\",\n    \"jv-ID-DimasNeural\",\n    \"jv-ID-SitiNeural\"\n  ],\n  \"kn\": [\n    \"No\",\n    \"kn-IN-GaganNeural\",\n    \"kn-IN-SapnaNeural\"\n  ],\n  \"kk\": [\n    \"No\",\n    \"kk-KZ-AigulNeural\",\n    \"kk-KZ-DauletNeural\"\n  ],\n  \"km\": [\n    \"No\",\n    \"km-KH-PisethNeural\",\n    \"km-KH-SreymomNeural\"\n  ],\n  \"ko\": [\n    \"No\",\n    \"ko-KR-HyunsuNeural\",\n    \"ko-KR-InJoonNeural\",\n    \"ko-KR-SunHiNeural\"\n  ],\n  \"lo\": [\n    \"No\",\n    \"lo-LA-ChanthavongNeural\",\n    \"lo-LA-KeomanyNeural\"\n  ],\n  \"lv\": [\n    \"No\",\n    \"lv-LV-EveritaNeural\",\n    \"lv-LV-NilsNeural\"\n  ],\n  \"lt\": [\n    \"No\",\n    \"lt-LT-LeonasNeural\",\n    \"lt-LT-OnaNeural\"\n  ],\n  \"mk\": [\n    \"No\",\n    \"mk-MK-AleksandarNeural\",\n    \"mk-MK-MarijaNeural\"\n  ],\n  \"ms\": [\n    \"No\",\n    \"ms-MY-OsmanNeural\",\n    \"ms-MY-YasminNeural\"\n  ],\n  \"ml\": [\n    \"No\",\n    \"ml-IN-MidhunNeural\",\n    \"ml-IN-SobhanaNeural\"\n  ],\n  \"mt\": [\n    \"No\",\n    \"mt-MT-GraceNeural\",\n    \"mt-MT-JosephNeural\"\n  ],\n  \"mr\": [\n    \"No\",\n    \"mr-IN-AarohiNeural\",\n    \"mr-IN-ManoharNeural\"\n  ],\n  \"mn\": [\n    \"No\",\n    \"mn-MN-BataaNeural\",\n    \"mn-MN-YesuiNeural\"\n  ],\n  \"ne\": [\n    \"No\",\n    \"ne-NP-HemkalaNeural\",\n    \"ne-NP-SagarNeural\"\n  ],\n  \"nb\": [\n    \"No\",\n    \"nb-NO-FinnNeural\",\n    \"nb-NO-PernilleNeural\"\n  ],\n  \"ps\": [\n    \"No\",\n    \"ps-AF-GulNawazNeural\",\n    \"ps-AF-LatifaNeural\"\n  ],\n  \"fa\": [\n    \"No\",\n    \"fa-IR-DilaraNeural\",\n    \"fa-IR-FaridNeural\"\n  ],\n  \"pl\": [\n    \"No\",\n    \"pl-PL-MarekNeural\",\n    \"pl-PL-ZofiaNeural\"\n  ],\n  \"pt\": [\n    \"No\",\n    \"pt-BR-ThalitaNeural\",\n    \"pt-BR-AntonioNeural\",\n    \"pt-BR-FranciscaNeural\",\n    \"pt-PT-DuarteNeural\",\n    \"pt-PT-RaquelNeural\"\n  ],\n  \"ro\": [\n    \"No\",\n    \"ro-RO-AlinaNeural\",\n    \"ro-RO-EmilNeural\"\n  ],\n  \"ru\": [\n    \"No\",\n    \"ru-RU-DmitryNeural\",\n    \"ru-RU-SvetlanaNeural\"\n  ],\n  \"sr\": [\n    \"No\",\n    \"sr-RS-NicholasNeural\",\n    \"sr-RS-SophieNeural\"\n  ],\n  \"si\": [\n    \"No\",\n    \"si-LK-SameeraNeural\",\n    \"si-LK-ThiliniNeural\"\n  ],\n  \"sk\": [\n    \"No\",\n    \"sk-SK-LukasNeural\",\n    \"sk-SK-ViktoriaNeural\"\n  ],\n  \"sl\": [\n    \"No\",\n    \"sl-SI-PetraNeural\",\n    \"sl-SI-RokNeural\"\n  ],\n  \"so\": [\n    \"No\",\n    \"so-SO-MuuseNeural\",\n    \"so-SO-UbaxNeural\"\n  ],\n  \"es\": [\n    \"No\",\n    \"es-AR-ElenaNeural\",\n    \"es-AR-TomasNeural\",\n    \"es-BO-MarceloNeural\",\n    \"es-BO-SofiaNeural\",\n    \"es-CL-CatalinaNeural\",\n    \"es-CL-LorenzoNeural\",\n    \"es-ES-XimenaNeural\",\n    \"es-CO-GonzaloNeural\",\n    \"es-CO-SalomeNeural\",\n    \"es-CR-JuanNeural\",\n    \"es-CR-MariaNeural\",\n    \"es-CU-BelkysNeural\",\n    \"es-CU-ManuelNeural\",\n    \"es-DO-EmilioNeural\",\n    \"es-DO-RamonaNeural\",\n    \"es-EC-AndreaNeural\",\n    \"es-EC-LuisNeural\",\n    \"es-SV-LorenaNeural\",\n    \"es-SV-RodrigoNeural\",\n    \"es-GQ-JavierNeural\",\n    \"es-GQ-TeresaNeural\",\n    \"es-GT-AndresNeural\",\n    \"es-GT-MartaNeural\",\n    \"es-HN-CarlosNeural\",\n    \"es-HN-KarlaNeural\",\n    \"es-MX-DaliaNeural\",\n    \"es-MX-JorgeNeural\",\n    \"es-NI-FedericoNeural\",\n    \"es-NI-YolandaNeural\",\n    \"es-PA-MargaritaNeural\",\n    \"es-PA-RobertoNeural\",\n    \"es-PY-MarioNeural\",\n    \"es-PY-TaniaNeural\",\n    \"es-PE-AlexNeural\",\n    \"es-PE-CamilaNeural\",\n    \"es-PR-KarinaNeural\",\n    \"es-PR-VictorNeural\",\n    \"es-ES-AlvaroNeural\",\n    \"es-ES-ElviraNeural\",\n    \"es-US-AlonsoNeural\",\n    \"es-US-PalomaNeural\",\n    \"es-UY-MateoNeural\",\n    \"es-UY-ValentinaNeural\",\n    \"es-VE-PaolaNeural\",\n    \"es-VE-SebastianNeural\"\n  ],\n  \"su\": [\n    \"No\",\n    \"su-ID-JajangNeural\",\n    \"su-ID-TutiNeural\"\n  ],\n  \"sw\": [\n    \"No\",\n    \"sw-KE-RafikiNeural\",\n    \"sw-KE-ZuriNeural\",\n    \"sw-TZ-DaudiNeural\",\n    \"sw-TZ-RehemaNeural\"\n  ],\n  \"sv\": [\n    \"No\",\n    \"sv-SE-MattiasNeural\",\n    \"sv-SE-SofieNeural\"\n  ],\n  \"ta\": [\n    \"No\",\n    \"ta-IN-PallaviNeural\",\n    \"ta-IN-ValluvarNeural\",\n    \"ta-MY-KaniNeural\",\n    \"ta-MY-SuryaNeural\",\n    \"ta-SG-AnbuNeural\",\n    \"ta-SG-VenbaNeural\",\n    \"ta-LK-KumarNeural\",\n    \"ta-LK-SaranyaNeural\"\n  ],\n  \"te\": [\n    \"No\",\n    \"te-IN-MohanNeural\",\n    \"te-IN-ShrutiNeural\"\n  ],\n  \"th\": [\n    \"No\",\n    \"th-TH-NiwatNeural\",\n    \"th-TH-PremwadeeNeural\"\n  ],\n  \"tr\": [\n    \"No\",\n    \"tr-TR-AhmetNeural\",\n    \"tr-TR-EmelNeural\"\n  ],\n  \"uk\": [\n    \"No\",\n    \"uk-UA-OstapNeural\",\n    \"uk-UA-PolinaNeural\"\n  ],\n  \"ur\": [\n    \"No\",\n    \"ur-IN-GulNeural\",\n    \"ur-IN-SalmanNeural\",\n    \"ur-PK-AsadNeural\",\n    \"ur-PK-UzmaNeural\"\n  ],\n  \"uz\": [\n    \"No\",\n    \"uz-UZ-MadinaNeural\",\n    \"uz-UZ-SardorNeural\"\n  ],\n  \"vi\": [\n    \"No\",\n    \"vi-VN-HoaiMyNeural\",\n    \"vi-VN-NamMinhNeural\"\n  ],\n  \"cy\": [\n    \"No\",\n    \"cy-GB-AledNeural\",\n    \"cy-GB-NiaNeural\"\n  ],\n  \"zu\": [\n    \"No\",\n    \"zu-ZA-ThandoNeural\",\n    \"zu-ZA-ThembaNeural\"\n  ]\n}"
        }
      ]
    }
  ]
}