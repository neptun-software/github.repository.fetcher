{
  "metadata": {
    "timestamp": 1736561179018,
    "page": 140,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fastapi/typer",
      "stars": 16175,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.115234375,
          "content": ".vscode\n*.pyc\n__pycache__\n.venv*\nenv\ndist\n.mypy_cache\n.idea\nsite\nhtmlcov\n.pytest_cache\ncoverage.xml\n.coverage*\n.cache\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.7158203125,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\ndefault_language_version:\n    python: python3.10\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n    -   id: check-added-large-files\n    -   id: check-toml\n    -   id: check-yaml\n        args:\n        -   --unsafe\n    -   id: end-of-file-fixer\n    -   id: trailing-whitespace\n-   repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.8.6\n    hooks:\n    -   id: ruff\n        args:\n        - --fix\n    -   id: ruff-format\nci:\n    autofix_commit_msg: ðŸŽ¨ [pre-commit.ci] Auto format from pre-commit.com hooks\n    autoupdate_commit_msg: â¬† [pre-commit.ci] pre-commit autoupdate\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.5537109375,
          "content": "# This CITATION.cff file was generated with cffinit.\n# Visit https://bit.ly/cffinit to generate yours today!\n\ncff-version: 1.2.0\ntitle: Typer\nmessage: >-\n  If you use this software, please cite it using the\n  metadata from this file.\ntype: software\nauthors:\n  - given-names: SebastiÃ¡n\n    family-names: RamÃ­rez\n    email: tiangolo@gmail.com\nidentifiers:\nrepository-code: 'https://github.com/fastapi/typer'\nurl: 'https://typer.tiangolo.com'\nabstract: >-\n  Typer, build great CLIs. Easy to code. Based on Python type hints.\nkeywords:\n  - typer\n  - click\nlicense: MIT\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.1220703125,
          "content": "Please read the [Development - Contributing](https://typer.tiangolo.com/contributing/) guidelines in the documentation site.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.060546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2019 SebastiÃ¡n RamÃ­rez\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.6240234375,
          "content": "<p align=\"center\">\n  <a href=\"https://typer.tiangolo.com\"><img src=\"https://typer.tiangolo.com/img/logo-margin/logo-margin-vector.svg#only-light\" alt=\"Typer\"></a>\n\n</p>\n<p align=\"center\">\n    <em>Typer, build great CLIs. Easy to code. Based on Python type hints.</em>\n</p>\n<p align=\"center\">\n<a href=\"https://github.com/fastapi/typer/actions?query=workflow%3ATest\" target=\"_blank\">\n    <img src=\"https://github.com/fastapi/typer/workflows/Test/badge.svg\" alt=\"Test\">\n</a>\n<a href=\"https://github.com/fastapi/typer/actions?query=workflow%3APublish\" target=\"_blank\">\n    <img src=\"https://github.com/fastapi/typer/workflows/Publish/badge.svg\" alt=\"Publish\">\n</a>\n<a href=\"https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/typer\" target=\"_blank\">\n    <img src=\"https://coverage-badge.samuelcolvin.workers.dev/fastapi/typer.svg\" alt=\"Coverage\">\n<a href=\"https://pypi.org/project/typer\" target=\"_blank\">\n    <img src=\"https://img.shields.io/pypi/v/typer?color=%2334D058&label=pypi%20package\" alt=\"Package version\">\n</a>\n</p>\n\n---\n\n**Documentation**: <a href=\"https://typer.tiangolo.com\" target=\"_blank\">https://typer.tiangolo.com</a>\n\n**Source Code**: <a href=\"https://github.com/fastapi/typer\" target=\"_blank\">https://github.com/fastapi/typer</a>\n\n---\n\nTyper is a library for building <abbr title=\"command line interface, programs executed from a terminal\">CLI</abbr> applications that users will **love using** and developers will **love creating**. Based on Python type hints.\n\nIt's also a command line tool to run scripts, automatically converting them to CLI applications.\n\nThe key features are:\n\n* **Intuitive to write**: Great editor support. <abbr title=\"also known as auto-complete, autocompletion, IntelliSense\">Completion</abbr> everywhere. Less time debugging. Designed to be easy to use and learn. Less time reading docs.\n* **Easy to use**: It's easy to use for the final users. Automatic help, and automatic completion for all shells.\n* **Short**: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.\n* **Start simple**: The simplest example adds only 2 lines of code to your app: **1 import, 1 function call**.\n* **Grow large**: Grow in complexity as much as you want, create arbitrarily complex trees of commands and groups of subcommands, with options and arguments.\n* **Run scripts**: Typer includes a `typer` command/program that you can use to run scripts, automatically converting them to CLIs, even if they don't use Typer internally.\n\n## FastAPI of CLIs\n\n**Typer** is <a href=\"https://fastapi.tiangolo.com\" class=\"external-link\" target=\"_blank\">FastAPI</a>'s little sibling, it's the FastAPI of CLIs.\n\n## Installation\n\nCreate and activate a <a href=\"https://typer.tiangolo.com/virtual-environments/\" class=\"external-link\" target=\"_blank\">virtual environment</a> and then install **Typer**:\n\n<div class=\"termy\">\n\n```console\n$ pip install typer\n---> 100%\nSuccessfully installed typer rich shellingham\n```\n\n</div>\n\n## Example\n\n### The absolute minimum\n\n* Create a file `main.py` with:\n\n```Python\ndef main(name: str):\n    print(f\"Hello {name}\")\n```\n\nThis script doesn't even use Typer internally. But you can use the `typer` command to run it as a CLI application.\n\n### Run it\n\nRun your application with the `typer` command:\n\n<div class=\"termy\">\n\n```console\n// Run your application\n$ typer main.py run\n\n// You get a nice error, you are missing NAME\nUsage: typer [PATH_OR_MODULE] run [OPTIONS] NAME\nTry 'typer [PATH_OR_MODULE] run --help' for help.\nâ•­â”€ Error â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ Missing argument 'NAME'.                          â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n\n\n// You get a --help for free\n$ typer main.py run --help\n\nUsage: typer [PATH_OR_MODULE] run [OPTIONS] NAME\n\nRun the provided Typer app.\n\nâ•­â”€ Arguments â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ *    name      TEXT  [default: None] [required]   |\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\nâ•­â”€ Options â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ --help          Show this message and exit.       â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n\n// Now pass the NAME argument\n$ typer main.py run Camila\n\nHello Camila\n\n// It works! ðŸŽ‰\n```\n\n</div>\n\nThis is the simplest use case, not even using Typer internally, but it can already be quite useful for simple scripts.\n\n**Note**: auto-completion works when you create a Python package and run it with `--install-completion` or when you use the `typer` command.\n\n## Use Typer in your code\n\nNow let's start using Typer in your own code, update `main.py` with:\n\n```Python\nimport typer\n\n\ndef main(name: str):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\nNow you could run it with Python directly:\n\n<div class=\"termy\">\n\n```console\n// Run your application\n$ python main.py\n\n// You get a nice error, you are missing NAME\nUsage: main.py [OPTIONS] NAME\nTry 'main.py --help' for help.\nâ•­â”€ Error â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ Missing argument 'NAME'.                          â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n\n\n// You get a --help for free\n$ python main.py --help\n\nUsage: main.py [OPTIONS] NAME\n\nâ•­â”€ Arguments â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ *    name      TEXT  [default: None] [required]   |\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\nâ•­â”€ Options â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ --help          Show this message and exit.       â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n\n// Now pass the NAME argument\n$ python main.py Camila\n\nHello Camila\n\n// It works! ðŸŽ‰\n```\n\n</div>\n\n**Note**: you can also call this same script with the `typer` command, but you don't need to.\n\n## Example upgrade\n\nThis was the simplest example possible.\n\nNow let's see one a bit more complex.\n\n### An example with two subcommands\n\nModify the file `main.py`.\n\nCreate a `typer.Typer()` app, and create two subcommands with their parameters.\n\n```Python hl_lines=\"3  6  11  20\"\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef hello(name: str):\n    print(f\"Hello {name}\")\n\n\n@app.command()\ndef goodbye(name: str, formal: bool = False):\n    if formal:\n        print(f\"Goodbye Ms. {name}. Have a good day.\")\n    else:\n        print(f\"Bye {name}!\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\nAnd that will:\n\n* Explicitly create a `typer.Typer` app.\n    * The previous `typer.run` actually creates one implicitly for you.\n* Add two subcommands with `@app.command()`.\n* Execute the `app()` itself, as if it was a function (instead of `typer.run`).\n\n### Run the upgraded example\n\nCheck the new help:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n Usage: main.py [OPTIONS] COMMAND [ARGS]...\n\nâ•­â”€ Options â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ --install-completion          Install completion  â”‚\nâ”‚                               for the current     â”‚\nâ”‚                               shell.              â”‚\nâ”‚ --show-completion             Show completion for â”‚\nâ”‚                               the current shell,  â”‚\nâ”‚                               to copy it or       â”‚\nâ”‚                               customize the       â”‚\nâ”‚                               installation.       â”‚\nâ”‚ --help                        Show this message   â”‚\nâ”‚                               and exit.           â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\nâ•­â”€ Commands â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ goodbye                                           â”‚\nâ”‚ hello                                             â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n\n// When you create a package you get âœ¨ auto-completion âœ¨ for free, installed with --install-completion\n\n// You have 2 subcommands (the 2 functions): goodbye and hello\n```\n\n</div>\n\nNow check the help for the `hello` command:\n\n<div class=\"termy\">\n\n```console\n$ python main.py hello --help\n\n Usage: main.py hello [OPTIONS] NAME\n\nâ•­â”€ Arguments â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ *    name      TEXT  [default: None] [required]   â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\nâ•­â”€ Options â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ --help          Show this message and exit.       â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n```\n\n</div>\n\nAnd now check the help for the `goodbye` command:\n\n<div class=\"termy\">\n\n```console\n$ python main.py goodbye --help\n\n Usage: main.py goodbye [OPTIONS] NAME\n\nâ•­â”€ Arguments â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ *    name      TEXT  [default: None] [required]   â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\nâ•­â”€ Options â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ --formal    --no-formal      [default: no-formal] â”‚\nâ”‚ --help                       Show this message    â”‚\nâ”‚                              and exit.            â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n\n// Automatic --formal and --no-formal for the bool option ðŸŽ‰\n```\n\n</div>\n\nNow you can try out the new command line application:\n\n<div class=\"termy\">\n\n```console\n// Use it with the hello command\n\n$ python main.py hello Camila\n\nHello Camila\n\n// And with the goodbye command\n\n$ python main.py goodbye Camila\n\nBye Camila!\n\n// And with --formal\n\n$ python main.py goodbye --formal Camila\n\nGoodbye Ms. Camila. Have a good day.\n```\n\n</div>\n\n### Recap\n\nIn summary, you declare **once** the types of parameters (*CLI arguments* and *CLI options*) as function parameters.\n\nYou do that with standard modern Python types.\n\nYou don't have to learn a new syntax, the methods or classes of a specific library, etc.\n\nJust standard **Python**.\n\nFor example, for an `int`:\n\n```Python\ntotal: int\n```\n\nor for a `bool` flag:\n\n```Python\nforce: bool\n```\n\nAnd similarly for **files**, **paths**, **enums** (choices), etc. And there are tools to create **groups of subcommands**, add metadata, extra **validation**, etc.\n\n**You get**: great editor support, including **completion** and **type checks** everywhere.\n\n**Your users get**: automatic **`--help`**, **auto-completion** in their terminal (Bash, Zsh, Fish, PowerShell) when they install your package or when using the `typer` command.\n\nFor a more complete example including more features, see the <a href=\"https://typer.tiangolo.com/tutorial/\">Tutorial - User Guide</a>.\n\n## Dependencies\n\n**Typer** stands on the shoulders of a giant. Its only internal required dependency is <a href=\"https://click.palletsprojects.com/\" class=\"external-link\" target=\"_blank\">Click</a>.\n\nBy default it also comes with extra standard dependencies:\n\n* <a href=\"https://rich.readthedocs.io/en/stable/index.html\" class=\"external-link\" target=\"_blank\"><code>rich</code></a>: to show nicely formatted errors automatically.\n* <a href=\"https://github.com/sarugaku/shellingham\" class=\"external-link\" target=\"_blank\"><code>shellingham</code></a>: to automatically detect the current shell when installing completion.\n    * With `shellingham` you can just use `--install-completion`.\n    * Without `shellingham`, you have to pass the name of the shell to install completion for, e.g. `--install-completion bash`.\n\n### `typer-slim`\n\nIf you don't want the extra standard optional dependencies, install `typer-slim` instead.\n\nWhen you install with:\n\n```bash\npip install typer\n```\n\n...it includes the same code and dependencies as:\n\n```bash\npip install \"typer-slim[standard]\"\n```\n\nThe `standard` extra dependencies are `rich` and `shellingham`.\n\n**Note**: The `typer` command is only included in the `typer` package.\n\n## License\n\nThis project is licensed under the terms of the MIT license.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.1328125,
          "content": "# Security Policy\n\nSecurity is very important for Typer and its community. ðŸ”’\n\nLearn more about it below. ðŸ‘‡\n\n## Versions\n\nThe latest versions of Typer are supported.\n\nYou are encouraged to [write tests](https://typer.tiangolo.com/tutorial/testing/) for your application and update your Typer version frequently after ensuring that your tests are passing. This way you will benefit from the latest features, bug fixes, and **security fixes**.\n\n## Reporting a Vulnerability\n\nIf you think you found a vulnerability, and even if you are not sure about it, please report it right away by sending an email to: security@tiangolo.com. Please try to be as explicit as possible, describing all the steps and example code to reproduce the security issue.\n\nI (the author, [@tiangolo](https://twitter.com/tiangolo)) will review it thoroughly and get back to you.\n\n## Public Discussions\n\nPlease restrain from publicly discussing a potential security vulnerability. ðŸ™Š\n\nIt's better to discuss privately and try to find a solution first, to limit the potential impact as much as possible.\n\n---\n\nThanks for your help!\n\nThe Typer community and I thank you for that. ðŸ™‡\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs_src",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.insiders.yml",
          "type": "blob",
          "size": 0.111328125,
          "content": "plugins:\n  typeset:\nmarkdown_extensions:\n  material.extensions.preview:\n    targets:\n      include:\n        - \"*\"\n"
        },
        {
          "name": "mkdocs.maybe-insiders.yml",
          "type": "blob",
          "size": 0.2802734375,
          "content": "# Define this here and not in the main mkdocs.yml file because that one could be auto\n# updated and written, and the script would remove the env var\nINHERIT: !ENV [INSIDERS_FILE, './mkdocs.no-insiders.yml']\nmarkdown_extensions:\n  pymdownx.highlight:\n    linenums: !ENV [LINENUMS, false]\n"
        },
        {
          "name": "mkdocs.no-insiders.yml",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 6.2470703125,
          "content": "INHERIT: ./mkdocs.maybe-insiders.yml\nsite_name: Typer\nsite_description: Typer, build great CLIs. Easy to code. Based on Python type hints.\nsite_url: https://typer.tiangolo.com/\n\ntheme:\n  name: material\n  custom_dir: docs/overrides\n  palette:\n  - media: \"(prefers-color-scheme)\"\n    toggle:\n      icon: material/lightbulb-auto\n      name: Switch to light mode\n  - media: '(prefers-color-scheme: light)'\n    scheme: default\n    primary: black\n    accent: teal\n    toggle:\n      icon: material/lightbulb\n      name: Switch to dark mode\n  - media: '(prefers-color-scheme: dark)'\n    scheme: slate\n    primary: black\n    accent: teal\n    toggle:\n      icon: material/lightbulb-outline\n      name: Switch to system preference\n  features:\n  - content.code.annotate\n  - content.code.copy\n  # - content.code.select\n  - content.footnote.tooltips\n  - content.tabs.link\n  - content.tooltips\n  - navigation.footer\n  - navigation.indexes\n  - navigation.instant\n  - navigation.instant.prefetch\n  # - navigation.instant.preview\n  - navigation.instant.progress\n  - navigation.path\n  - navigation.tabs\n  - navigation.tabs.sticky\n  - navigation.top\n  - navigation.tracking\n  - search.highlight\n  - search.share\n  - search.suggest\n  - toc.follow\n\n  icon:\n    repo: fontawesome/brands/github-alt\n  logo: img/icon.svg\n  favicon: img/favicon.png\n  language: en\nrepo_name: fastapi/typer\nrepo_url: https://github.com/fastapi/typer\nplugins:\n  # Material for MkDocs\n  search:\n  social:\n  # Other plugins\n  macros:\n    include_yaml:\n    - members: data/members.yml\n  redirects:\n    redirect_maps:\n      typer-cli.md: tutorial/typer-command.md\n\nnav:\n  - Typer: index.md\n  - features.md\n  - Tutorial - User Guide:\n      - tutorial/index.md\n      - environment-variables.md\n      - virtual-environments.md\n      - tutorial/install.md\n      - tutorial/first-steps.md\n      - tutorial/printing.md\n      - tutorial/terminating.md\n      - CLI Arguments:\n          - tutorial/arguments/index.md\n          - tutorial/arguments/optional.md\n          - tutorial/arguments/default.md\n          - tutorial/arguments/help.md\n          - tutorial/arguments/envvar.md\n          - tutorial/arguments/other-uses.md\n      - CLI Options:\n          - tutorial/options/index.md\n          - tutorial/options/help.md\n          - tutorial/options/required.md\n          - tutorial/options/prompt.md\n          - tutorial/options/password.md\n          - tutorial/options/name.md\n          - tutorial/options/callback-and-context.md\n          - tutorial/options/version.md\n      - Commands:\n          - tutorial/commands/index.md\n          - tutorial/commands/arguments.md\n          - tutorial/commands/options.md\n          - tutorial/commands/help.md\n          - tutorial/commands/name.md\n          - tutorial/commands/callback.md\n          - tutorial/commands/one-or-multiple.md\n          - tutorial/commands/context.md\n      - tutorial/options-autocompletion.md\n      - CLI Parameter Types:\n          - tutorial/parameter-types/index.md\n          - tutorial/parameter-types/number.md\n          - tutorial/parameter-types/bool.md\n          - tutorial/parameter-types/uuid.md\n          - tutorial/parameter-types/datetime.md\n          - tutorial/parameter-types/enum.md\n          - tutorial/parameter-types/path.md\n          - tutorial/parameter-types/file.md\n          - tutorial/parameter-types/custom-types.md\n      - SubCommands - Command Groups:\n          - tutorial/subcommands/index.md\n          - tutorial/subcommands/add-typer.md\n          - tutorial/subcommands/single-file.md\n          - tutorial/subcommands/nested-subcommands.md\n          - tutorial/subcommands/callback-override.md\n          - tutorial/subcommands/name-and-help.md\n      - Multiple Values:\n          - tutorial/multiple-values/index.md\n          - tutorial/multiple-values/multiple-options.md\n          - tutorial/multiple-values/options-with-multiple-values.md\n          - tutorial/multiple-values/arguments-with-multiple-values.md\n      - tutorial/prompt.md\n      - tutorial/progressbar.md\n      - tutorial/app-dir.md\n      - tutorial/launch.md\n      - tutorial/testing.md\n      - tutorial/using-click.md\n      - tutorial/package.md\n      - tutorial/exceptions.md\n      - tutorial/one-file-per-command.md\n      - tutorial/typer-command.md\n  - Resources:\n    - resources/index.md\n    - help-typer.md\n    - contributing.md\n    - management-tasks.md\n  - About:\n    - about/index.md\n    - alternatives.md\n    - management.md\n  - release-notes.md\n\nmarkdown_extensions:\n  # Python Markdown\n  abbr:\n  attr_list:\n  footnotes:\n  md_in_html:\n  tables:\n  toc:\n    permalink: true\n\n  # Python Markdown Extensions\n  pymdownx.betterem:\n    smart_enable: all\n  pymdownx.caret:\n  pymdownx.highlight:\n    line_spans: __span\n  pymdownx.inlinehilite:\n  pymdownx.keys:\n  pymdownx.mark:\n  pymdownx.superfences:\n    custom_fences:\n    - name: mermaid\n      class: mermaid\n      format: !!python/name:pymdownx.superfences.fence_code_format\n  pymdownx.tilde:\n\n  # pymdownx blocks\n  pymdownx.blocks.admonition:\n    types:\n    - note\n    - attention\n    - caution\n    - danger\n    - error\n    - tip\n    - hint\n    - warning\n    # Custom types\n    - info\n    - check\n  pymdownx.blocks.details:\n  pymdownx.blocks.tab:\n    alternate_style: True\n\n  # Other extensions\n  mdx_include:\n  markdown_include_variants:\n\nextra:\n  analytics:\n    provider: google\n    property: G-T78C5GNRXK\n    feedback:\n      title: Was this page helpful?\n      ratings:\n        - icon: material/emoticon-happy-outline\n          name: This page was helpful\n          data: 1\n          note: >-\n            Thanks for your feedback!\n        - icon: material/emoticon-sad-outline\n          name: This page could be improved\n          data: 0\n          note: >-\n            Thanks for your feedback!\n  social:\n    - icon: fontawesome/brands/github-alt\n      link: https://github.com/fastapi/typer\n    - icon: fontawesome/brands/twitter\n      link: https://twitter.com/tiangolo\n    - icon: fontawesome/brands/linkedin\n      link: https://www.linkedin.com/in/tiangolo\n    - icon: fontawesome/brands/dev\n      link: https://dev.to/tiangolo\n    - icon: fontawesome/brands/medium\n      link: https://medium.com/@tiangolo\n    - icon: fontawesome/solid/globe\n      link: https://tiangolo.com\n\nextra_css:\n  - css/termynal.css\n  - css/custom.css\n\nextra_javascript:\n  - js/termynal.js\n  - js/custom.js\n\nhooks:\n  - scripts/mkdocs_hooks.py\n"
        },
        {
          "name": "pdm_build.py",
          "type": "blob",
          "size": 2.2783203125,
          "content": "import os\nfrom typing import Any, Dict, List\n\nfrom pdm.backend.hooks import Context\n\nTIANGOLO_BUILD_PACKAGE = os.getenv(\"TIANGOLO_BUILD_PACKAGE\", \"typer\")\n\n\ndef pdm_build_initialize(context: Context):\n    metadata = context.config.metadata\n    # Get main version\n    version = metadata[\"version\"]\n    # Get package names to keep in sync with the same main version\n    sync_dependencies: List[str] = context.config.data[\"tool\"][\"tiangolo\"][\n        \"_internal-slim-build\"\n    ][\"sync-dependencies\"]\n    # Get custom config for the current package, from the env var\n    config: Dict[str, Any] = context.config.data[\"tool\"][\"tiangolo\"][\n        \"_internal-slim-build\"\n    ][\"packages\"][TIANGOLO_BUILD_PACKAGE]\n    project_config: Dict[str, Any] = config[\"project\"]\n    # Get main optional dependencies, extras\n    optional_dependencies: Dict[str, List[str]] = metadata.get(\n        \"optional-dependencies\", {}\n    )\n    # Get custom optional dependencies name to always include in this (non-slim) package\n    include_optional_dependencies: List[str] = config.get(\n        \"include-optional-dependencies\", []\n    )\n    # Override main [project] configs with custom configs for this package\n    for key, value in project_config.items():\n        metadata[key] = value\n    # Get custom build config for the current package\n    build_config: Dict[str, Any] = (\n        config.get(\"tool\", {}).get(\"pdm\", {}).get(\"build\", {})\n    )\n    # Override PDM build config with custom build config for this package\n    for key, value in build_config.items():\n        context.config.build_config[key] = value\n    # Get main dependencies\n    dependencies: List[str] = metadata.get(\"dependencies\", [])\n    # Add optional dependencies to the default dependencies for this (non-slim) package\n    for include_optional in include_optional_dependencies:\n        optional_dependencies_group = optional_dependencies.get(include_optional, [])\n        dependencies.extend(optional_dependencies_group)\n    # Sync versions in dependencies\n    new_dependencies = []\n    for dep in dependencies:\n        if dep in sync_dependencies:\n            new_dep = f\"{dep}=={version}\"\n            new_dependencies.append(new_dep)\n        else:\n            new_dependencies.append(dep)\n    if new_dependencies != dependencies:\n        metadata[\"dependencies\"] = new_dependencies\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 6.060546875,
          "content": "[build-system]\nrequires = [\"pdm-backend\"]\nbuild-backend = \"pdm.backend\"\n\n[project]\nname = \"typer\"\ndynamic = [\"version\"]\ndescription = \"Typer, build great CLIs. Easy to code. Based on Python type hints.\"\nauthors = [\n    {name = \"SebastiÃ¡n RamÃ­rez\", email = \"tiangolo@gmail.com\"},\n]\nrequires-python = \">=3.7\"\nclassifiers = [\n    \"Intended Audience :: Information Technology\",\n    \"Intended Audience :: System Administrators\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python\",\n    \"Topic :: Software Development :: Libraries :: Application Frameworks\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n    \"Topic :: Software Development :: Libraries\",\n    \"Topic :: Software Development\",\n    \"Typing :: Typed\",\n    \"Development Status :: 4 - Beta\",\n    \"Intended Audience :: Developers\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"License :: OSI Approved :: MIT License\",\n]\ndependencies = [\n    \"click >= 8.0.0\",\n    \"typing-extensions >= 3.7.4.3\",\n]\nreadme = \"README.md\"\n[project.urls]\nHomepage = \"https://github.com/fastapi/typer\"\nDocumentation = \"https://typer.tiangolo.com\"\nRepository = \"https://github.com/fastapi/typer\"\nIssues = \"https://github.com/fastapi/typer/issues\"\nChangelog = \"https://typer.tiangolo.com/release-notes/\"\n\n[project.optional-dependencies]\nstandard = [\n    \"shellingham >=1.3.0\",\n    \"rich >=10.11.0\",\n]\n\n[tool.pdm]\nversion = { source = \"file\", path = \"typer/__init__.py\" }\ndistribution = true\n\n[tool.pdm.build]\nsource-includes = [\n    \"tests/\",\n    \"docs_src/\",\n    \"requirements*.txt\",\n    \"scripts/\",\n    ]\n\n[tool.tiangolo._internal-slim-build]\nsync-dependencies = [\n    \"typer-slim[standard]\",\n    \"typer-cli\",\n    \"typer\"\n]\n\n[tool.tiangolo._internal-slim-build.packages.typer-slim.project]\nname = \"typer-slim\"\n\n[tool.tiangolo._internal-slim-build.packages.typer]\ninclude-optional-dependencies = [\"standard\"]\n\n[tool.tiangolo._internal-slim-build.packages.typer.project]\noptional-dependencies = {}\n\n[tool.tiangolo._internal-slim-build.packages.typer.project.scripts]\ntyper = \"typer.cli:main\"\n\n[tool.tiangolo._internal-slim-build.packages.typer-cli.project]\nname = \"typer-cli\"\nreadme = \"typer-cli/README.md\"\ndependencies = [\n    \"typer\",\n]\noptional-dependencies = {}\n\n[tool.tiangolo._internal-slim-build.packages.typer-cli.tool.pdm.build]\n# excludes needs to explicitly exclude the top level python packages,\n# otherwise PDM includes them by default\n# A \"*\" glob pattern can't be used here because in PDM internals, the patterns are put\n# in a set (unordered, order varies) and each excluded file is assigned one of the\n# glob patterns that matches, as the set is unordered, the matched pattern could be \"*\"\n# independent of the order here. And then the internal code would give it a lower score\n# than the one for a default included file.\n# By not using \"*\" and explicitly excluding the top level packages, they get a higher\n# score than the default inclusion\nexcludes = [\"typer\", \"tests\", \"pdm_build.py\"]\n# source-includes needs to explicitly define some value because PDM will check the\n# truthy value of the list, and if empty, will include some defaults, including \"tests\",\n# an empty string doesn't match anything, but makes the list truthy, so that PDM\n# doesn't override it during the build.\nsource-includes = [\"\"]\n\n[tool.pytest.ini_options]\naddopts = [\n  \"--strict-config\",\n  \"--strict-markers\",\n]\nxfail_strict = true\njunit_family = \"xunit2\"\nfilterwarnings = [\n    \"error\",\n    # For pytest-xdist\n    'ignore::DeprecationWarning:xdist',\n]\n\n[tool.coverage.run]\nparallel = true\ndata_file = \"coverage/.coverage\"\nsource = [\n    \"docs_src\",\n    \"tests\",\n    \"typer\"\n]\nomit = [\n    \"typer/_typing.py\"\n]\ncontext = '${CONTEXT}'\nrelative_files = true\n\n[tool.coverage.report]\nexclude_lines = [\n    \"pragma: no cover\",\n    \"@overload\",\n    'if __name__ == \"__main__\":',\n    \"if TYPE_CHECKING:\",\n]\n\n[tool.mypy]\nstrict = true\n\n[[tool.mypy.overrides]]\nmodule = \"docs_src.*\"\ndisallow_incomplete_defs = false\ndisallow_untyped_defs = false\ndisallow_untyped_calls = false\n\n[[tool.mypy.overrides]]\nmodule = \"shellingham\"\nignore_missing_imports = true\n\n[tool.ruff.lint]\nselect = [\n    \"E\",  # pycodestyle errors\n    \"W\",  # pycodestyle warnings\n    \"F\",  # pyflakes\n    \"I\",  # isort\n    \"B\",  # flake8-bugbear\n    \"C4\",  # flake8-comprehensions\n    \"UP\", # pyupgrade\n]\nignore = [\n    \"E501\",  # line too long, handled by black\n    \"B008\",  # do not perform function calls in argument defaults\n    \"C901\",  # too complex\n    \"W191\", # indentation contains tabs\n]\n\n[tool.ruff.lint.per-file-ignores]\n# \"__init__.py\" = [\"F401\"]\n# This file is more readable without yield from\n\"docs_src/progressbar/tutorial004.py\" = [\"UP028\", \"B007\"]\n# Default mutable data structure\n\"docs_src/options_autocompletion/tutorial006_an.py\" = [\"B006\"]\n\"docs_src/multiple_values/multiple_options/tutorial002_an.py\" = [\"B006\"]\n\"docs_src/options_autocompletion/tutorial007_an.py\" = [\"B006\"]\n\"docs_src/options_autocompletion/tutorial008_an.py\" = [\"B006\"]\n\"docs_src/options_autocompletion/tutorial009_an.py\" = [\"B006\"]\n\"docs_src/parameter_types/enum/tutorial003_an.py\" = [\"B006\"]\n# Loop control variable `value` not used within loop body\n\"docs_src/progressbar/tutorial001.py\" = [\"B007\"]\n\"docs_src/progressbar/tutorial003.py\" = [\"B007\"]\n\"docs_src/progressbar/tutorial005.py\" = [\"B007\"]\n\"docs_src/progressbar/tutorial006.py\" = [\"B007\"]\n# Local variable `delete` is assigned to but never used\n\"docs_src/prompt/tutorial003.py\" = [\"F841\"]\n# Loop control variable `x` not used within loop body\n\"docs_src/using_click/tutorial001.py\" = [\"B007\"]\n\n[tool.ruff.lint.isort]\nknown-third-party = [\"typer\", \"click\"]\n# For docs_src/subcommands/tutorial003/\nknown-first-party = [\"reigns\", \"towns\", \"lands\", \"items\", \"users\"]\n\n[tool.ruff.lint.pyupgrade]\n# Preserve types, even if a file imports `from __future__ import annotations`.\nkeep-runtime-typing = true\n"
        },
        {
          "name": "requirements-docs-insiders.txt",
          "type": "blob",
          "size": 0.240234375,
          "content": "git+https://${TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git@9.5.30-insiders-4.53.11\ngit+https://${TOKEN}@github.com/pawamoy-insiders/griffe-typing-deprecated.git\ngit+https://${TOKEN}@github.com/pawamoy-insiders/mkdocstrings-python.git\n"
        },
        {
          "name": "requirements-docs.txt",
          "type": "blob",
          "size": 0.53125,
          "content": "-e .\n\nmkdocs-material==9.5.49\nmdx-include >=1.4.1,<2.0.0\nmkdocs-redirects>=1.2.1,<1.3.0\npyyaml >=5.3.1,<7.0.0\n# For Material for MkDocs, Chinese search\n# jieba==0.42.1\n# For image processing by Material for MkDocs\npillow==11.1.0\n# For image processing by Material for MkDocs\ncairosvg==2.7.1\n# mkdocstrings[python]==0.25.1\n# Enable griffe-typingdoc once dropping Python 3.7 and upgrading typing-extensions\n# griffe-typingdoc==0.2.5\n# For griffe, it formats with black\n# black==24.3.0\nmkdocs-macros-plugin==1.3.7\nmarkdown-include-variants==0.0.4\n"
        },
        {
          "name": "requirements-github-actions.txt",
          "type": "blob",
          "size": 0.107421875,
          "content": "PyGithub>=2.3.0,<3.0.0\npydantic>=2.5.3,<3.0.0\npydantic-settings>=2.1.0,<3.0.0\nhttpx>=0.27.0,<0.29.0\nsmokeshow\n"
        },
        {
          "name": "requirements-tests.txt",
          "type": "blob",
          "size": 0.2275390625,
          "content": "-e .\n\npytest >=4.4.0,<9.0.0\npytest-cov >=2.10.0,<7.0.0\ncoverage[toml] >=6.2,<8.0\npytest-xdist >=1.32.0,<4.0.0\npytest-sugar >=0.9.4,<1.1.0\nmypy ==1.4.1\nruff ==0.8.6\n# Needed explicitly by typer-slim\nrich >=10.11.0\nshellingham >=1.3.0\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0830078125,
          "content": "-e .\n\n-r requirements-tests.txt\n-r requirements-docs.txt\n\npre-commit >=2.17.0,<5.0.0\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "typer-cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "typer",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}