{
  "metadata": {
    "timestamp": 1736561277290,
    "page": 270,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "redis/redis-py",
      "stars": 12772,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.0205078125,
          "content": "[run]\nsource = redis\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.044921875,
          "content": "**/__pycache__\n**/*.pyc\n.coverage\n.coverage.*\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.2978515625,
          "content": "[flake8]\nmax-line-length = 88\nexclude =\n    *.egg-info,\n    *.pyc,\n    .git,\n    .venv*,\n    build,\n    docs/*,\n    dist,\n    docker,\n    venv*,\n    .venv*,\n    whitelist.py,\n    tasks.py\nignore =\n    E126\n    E203\n    E231\n    E701\n    E704\n    F405\n    N801\n    N802\n    N803\n    N806\n    N815\n    W503\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2685546875,
          "content": "*.pyc\nredis.egg-info\nbuild/\ndist/\ndump.rdb\n_build\nvagrant/.vagrant\n.python-version\n.cache\n.eggs\n.idea\n.coverage\nenv\nvenv\ncoverage.xml\n.venv*\n*.xml\n.coverage*\nprof\nprofile_output*\ndocker/stunnel/keys\n/dockers/*/node-*/*\n/dockers/*/tls/*\n/dockers/standalone/\n/dockers/cluster/\n"
        },
        {
          "name": ".isort.cfg",
          "type": "blob",
          "size": 0.095703125,
          "content": "[settings]\nprofile=black\nmulti_line_output=3\nsrc_paths = [\"redis\", \"tests\"]\nskip_glob=benchmarks/*"
        },
        {
          "name": ".mypy.ini",
          "type": "blob",
          "size": 0.611328125,
          "content": "[mypy]\n#, docs/examples, tests\nfiles = redis\ncheck_untyped_defs = True\nfollow_imports_for_stubs asyncio.= True\n#disallow_any_decorated = True\ndisallow_subclassing_any = True\n#disallow_untyped_calls = True\ndisallow_untyped_decorators = True\n#disallow_untyped_defs = True\nimplicit_reexport = False\nno_implicit_optional = True\nshow_error_codes = True\nstrict_equality = True\nwarn_incomplete_stub = True\nwarn_redundant_casts = True\nwarn_unreachable = True\nwarn_unused_ignores = True\ndisallow_any_unimported = True\n#warn_return_any = True\n\n[mypy-redis.asyncio.lock]\n# TODO: Remove once locks has been rewritten\nignore_errors = True\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.2001953125,
          "content": "version: 2\n\npython:\n  install:\n    - requirements: ./docs/requirements.txt\n    - requirements: requirements.txt\n\nbuild:\n  os: ubuntu-20.04\n  tools:\n    python: \"3.9\"\n\nsphinx:\n  configuration: docs/conf.py\n"
        },
        {
          "name": "CHANGES",
          "type": "blob",
          "size": 63.7724609375,
          "content": "    * Move doctests (doc code examples) to main branch\n    * Update `ResponseT` type hint\n    * Allow to control the minimum SSL version\n    * Add an optional lock_name attribute to LockError.\n    * Fix return types for `get`, `set_path` and `strappend` in JSONCommands\n    * Connection.register_connect_callback() is made public.\n    * Fix async `read_response` to use `disable_decoding`.\n    * Add 'aclose()' methods to async classes, deprecate async close().\n    * Fix #2831, add auto_close_connection_pool=True arg to asyncio.Redis.from_url()\n    * Fix incorrect redis.asyncio.Cluster type hint for `retry_on_error`\n    * Fix dead weakref in sentinel connection causing ReferenceError (#2767)\n    * Fix #2768, Fix KeyError: 'first-entry' in parse_xinfo_stream.\n    * Fix #2749, remove unnecessary __del__ logic to close connections.\n    * Fix #2754, adding a missing argument to SentinelManagedConnection\n    * Fix `xadd` command to accept non-negative `maxlen` including 0\n    * Revert #2104, #2673, add `disconnect_on_error` option to `read_response()` (issues #2506, #2624)\n    * Add `address_remap` parameter to `RedisCluster`\n    * Fix incorrect usage of once flag in async Sentinel\n    * asyncio: Fix memory leak caused by hiredis (#2693)\n    * Allow data to drain from async PythonParser when reading during a disconnect()\n    * Use asyncio.timeout() instead of async_timeout.timeout() for python >= 3.11 (#2602)\n    * Add a Dependabot configuration to auto-update GitHub action versions.\n    * Add test and fix async HiredisParser when reading during a disconnect() (#2349)\n    * Use hiredis-py pack_command if available.\n    * Support `.unlink()` in ClusterPipeline\n    * Simplify synchronous SocketBuffer state management\n    * Fix string cleanse in Redis Graph\n    * Make PythonParser resumable in case of error (#2510)\n    * Add `timeout=None` in `SentinelConnectionManager.read_response`\n    * Documentation fix: password protected socket connection (#2374)\n    * Allow `timeout=None` in `PubSub.get_message()` to wait forever\n    * add `nowait` flag to `asyncio.Connection.disconnect()`\n    * Update README.md links\n    * Fix timezone handling for datetime to unixtime conversions\n    * Fix start_id type for XAUTOCLAIM\n    * Remove verbose logging from cluster.py\n    * Add retry mechanism to async version of Connection\n    * Compare commands case-insensitively in the asyncio command parser\n    * Allow negative `retries` for `Retry` class to retry forever\n    * Add `items` parameter to `hset` signature\n    * Create codeql-analysis.yml (#1988). Thanks @chayim\n    * Add limited support for Lua scripting with RedisCluster\n    * Implement `.lock()` method on RedisCluster\n    * Fix cursor returned by SCAN for RedisCluster & change default target to PRIMARIES\n    * Fix scan_iter for RedisCluster\n    * Remove verbose logging when initializing ClusterPubSub, ClusterPipeline or RedisCluster\n    * Fix broken connection writer lock-up for asyncio (#2065)\n    * Fix auth bug when provided with no username (#2086)\n    * Fix missing ClusterPipeline._lock (#2189)\n    * Added dynaminc_startup_nodes configuration to RedisCluster\n    * Fix reusing the old nodes' connections when cluster topology refresh is being done\n    * Fix RedisCluster to immediately raise AuthenticationError without a retry\n    * ClusterPipeline Doesn't Handle ConnectionError for Dead Hosts (#2225)\n    * Remove compatibility code for old versions of Hiredis, drop Packaging dependency\n    * The `deprecated` library is no longer a dependency\n    * Failover handling improvements for RedisCluster and Async RedisCluster (#2377)\n    * Fixed \"cannot pickle '_thread.lock' object\" bug (#2354, #2297)\n    * Added CredentialsProvider class to support password rotation\n    * Enable Lock for asyncio cluster mode\n    * Fix Sentinel.execute_command doesn't execute across the entire sentinel cluster bug (#2458)\n    * Added a replacement for the default cluster node in the event of failure (#2463)\n    * Fix for Unhandled exception related to self.host with unix socket (#2496)\n    * Improve error output for master discovery \n    * Make `ClusterCommandsProtocol` an actual Protocol\n    * Add `sum` to DUPLICATE_POLICY documentation of `TS.CREATE`, `TS.ADD` and `TS.ALTER`\n    * Prevent async ClusterPipeline instances from becoming \"false-y\" in case of empty command stack (#3061)\n    * Close Unix sockets if the connection attempt fails. This prevents `ResourceWarning`s. (#3314)\n    * Close SSL sockets if the connection attempt fails, or if validations fail. (#3317)\n    * Eliminate mutable default arguments in the `redis.commands.core.Script` class. (#3332)\n\n* 4.1.3 (Feb 8, 2022)\n  * Fix flushdb and flushall (#1926)\n  * Add redis5 and redis4 dockers (#1871)\n  * Change json.clear test multi to be up to date with redisjson (#1922)\n  * Fixing volume for unstable_cluster docker (#1914)\n  * Update changes file with changes since 4.0.0-beta2 (#1915)\n* 4.1.2 (Jan 27, 2022)\n  * Invalid OCSP certificates should raise ConnectionError on failed validation (#1907)\n  * Added retry mechanism on socket timeouts when connecting to the server (#1895)\n  * LMOVE, BLMOVE return incorrect responses (#1906)\n  * Fixing AttributeError in UnixDomainSocketConnection (#1903)\n  * Fixing TypeError in GraphCommands.explain (#1901)\n  * For tests, increasing wait time for the cluster (#1908)\n  * Increased pubsub's wait_for_messages timeout to prevent flaky tests (#1893)\n  * README code snippets formatted to highlight properly (#1888)\n  * Fix link in the main page (#1897)\n  * Documentation fixes: JSON Example, SSL Connection Examples, RTD version (#1887)\n  * Direct link to readthedocs (#1885)\n* 4.1.1 (Jan 17, 2022)\n  * Add retries to connections in Sentinel Pools (#1879)\n  * OCSP Stapling Support (#1873)\n  * Define incr/decr as aliases of incrby/decrby (#1874)\n  * FT.CREATE - support MAXTEXTFIELDS, TEMPORARY, NOHL, NOFREQS, SKIPINITIALSCAN (#1847)\n  * Timeseries docs fix (#1877)\n  * get_connection: catch OSError too (#1832)\n  * Set keys var otherwise variable not created (#1853)\n  * Clusters should optionally require full slot coverage (#1845)\n  * Triple quote docstrings in client.py PEP 257 (#1876)\n  * syncing requirements (#1870)\n  * Typo and typing in GraphCommands documentation (#1855)\n  * Allowing poetry and redis-py to install together (#1854)\n  * setup.py: Add project_urls for PyPI (#1867)\n  * Support test with redis unstable docker (#1850)\n  * Connection examples (#1835)\n  * Documentation cleanup (#1841)\n* 4.1.0 (Dec 26, 2021)\n  * OCSP stapling support (#1820)\n  * Support for SELECT (#1825)\n  * Support for specifying error types with retry (#1817)\n  * Support for RESET command since Redis 6.2.0 (#1824)\n  * Support CLIENT TRACKING (#1612)\n  * Support WRITE in CLIENT PAUSE (#1549)\n  * JSON set_file and set_path support (#1818)\n  * Allow ssl_ca_path with rediss:// urls (#1814)\n  * Support for password-encrypted SSL private keys (#1782)\n  * Support SYNC and PSYNC (#1741)\n  * Retry on error exception and timeout fixes (#1821)\n  * Fixing read race condition during pubsub (#1737)\n  * Fixing exception in listen (#1823)\n  * Fixed MovedError, and stopped iterating through startup nodes when slots are fully covered (#1819)\n  * Socket not closing after server disconnect (#1797)\n  * Single sourcing the package version (#1791)\n  * Ensure redis_connect_func is set on uds connection (#1794)\n  * SRTALGO - Skip for redis versions greater than 7.0.0 (#1831)\n  * Documentation updates (#1822)\n  * Add CI action to install package from repository commit hash (#1781) (#1790)\n  * Fix link in lmove docstring (#1793)\n  * Disabling JSON.DEBUG tests (#1787)\n  * Migrated targeted nodes to kwargs in Cluster Mode (#1762)\n  * Added support for MONITOR in clusters (#1756)\n  * Adding ROLE Command (#1610)\n  * Integrate RedisBloom support (#1683)\n  * Adding RedisGraph support (#1556)\n  * Allow overriding connection class via keyword arguments (#1752)\n  * Aggregation LOAD * support for RediSearch (#1735)\n  * Adding cluster, bloom, and graph docs (#1779)\n  * Add packaging to setup_requires, and use >= to play nice to setup.py (fixes #1625) (#1780)\n  * Fixing the license link in the readme (#1778)\n  * Removing distutils from tests (#1773)\n  * Fix cluster ACL tests (#1774)\n  * Improved RedisCluster's reinitialize_steps and documentation (#1765)\n  * Added black and isort (#1734)\n  * Link Documents for all module commands (#1711)\n  * Pyupgrade + flynt + f-strings (#1759)\n  * Remove unused aggregation subclasses in RediSearch (#1754)\n  * Adding RedisCluster client to support Redis Cluster Mode (#1660)\n  * Support RediSearch FT.PROFILE command (#1727)\n  * Adding support for non-decodable commands (#1731)\n  * COMMAND GETKEYS support (#1738)\n  * RedisJSON 2.0.4 behaviour support (#1747)\n  * Removing deprecating distutils (PEP 632) (#1730)\n  * Updating PR template (#1745)\n  * Removing duplication of Script class (#1751)\n  * Splitting documentation for read the docs (#1743)\n  * Improve code coverage for aggregation tests (#1713)\n  * Fixing COMMAND GETKEYS tests (#1750)\n  * GitHub release improvements (#1684)\n* 4.0.2 (Nov 22, 2021)\n  * Restoring Sentinel commands to redis client (#1723)\n  * Better removal of hiredis warning (#1726)\n  * Adding links to redis documents in function calls (#1719)\n* 4.0.1 (Nov 17, 2021)\n  * Removing command on initial connections (#1722)\n  * Removing hiredis warning when not installed (#1721)\n* 4.0.0 (Nov 15, 2021)\n  * FT.EXPLAINCLI intentionally raising NotImplementedError\n  * Restoring ZRANGE desc for Redis < 6.2.0 (#1697)\n  * Response parsing occasionally fails to parse floats (#1692)\n  * Re-enabling read-the-docs (#1707)\n  * Call HSET after FT.CREATE to avoid keyspace scan (#1706)\n  * Unit tests fixes for compatibility (#1703)\n  * Improve documentation about Locks (#1701)\n  * Fixes to allow --redis-url to pass through all tests (#1700)\n  * Fix unit tests running against Redis 4.0.0 (#1699)\n  * Search alias test fix (#1695)\n  * Adding RediSearch/RedisJSON tests (#1691)\n  * Updating codecov rules (#1689)\n  * Tests to validate custom JSON decoders (#1681)\n  * Added breaking icon to release drafter (#1702)\n  * Removing dependency on six (#1676)\n  * Re-enable pipeline support for JSON and TimeSeries (#1674)\n  * Export Sentinel, and SSL like other classes (#1671)\n  * Restore zrange functionality for older versions of Redis (#1670)\n  * Fixed garbage collection deadlock (#1578)\n  * Tests to validate built python packages (#1678)\n  * Sleep for flaky search test (#1680)\n  * Test function renames, to match standards (#1679)\n  * Docstring improvements for Redis class (#1675)\n  * Fix georadius tests (#1672)\n  * Improvements to JSON coverage (#1666)\n  * Add python_requires setuptools check for python > 3.6 (#1656)\n  * SMISMEMBER support (#1667)\n  * Exposing the module version in loaded_modules (#1648)\n  * RedisTimeSeries support (#1652)\n  * Support for json multipath ($) (#1663)\n  * Added boolean parsing to PEXPIRE and PEXPIREAT (#1665)\n  * Add python_requires setuptools check for python > 3.6 (#1656)\n  * Adding vulture for static analysis (#1655)\n  * Starting to clean the docs (#1657)\n  * Update README.md (#1654)\n  * Adding description format for package (#1651)\n  * Publish to pypi as releases are generated with the release drafter (#1647)\n  * Restore actions to prs (#1653)\n  * Fixing the package to include commands (#1649)\n  * Re-enabling codecov as part of CI process (#1646)\n  * Adding support for redisearch (#1640) Thanks @chayim\n  * redisjson support (#1636) Thanks @chayim\n  * Sentinel: Add SentinelManagedSSLConnection (#1419) Thanks @AbdealiJK\n  * Enable floating parameters in SET (ex and px) (#1635) Thanks @AvitalFineRedis\n  * Add warning when hiredis not installed. Recommend installation. (#1621) Thanks @adiamzn\n  * Raising NotImplementedError for SCRIPT DEBUG and DEBUG SEGFAULT (#1624) Thanks @chayim\n  * CLIENT REDIR command support (#1623) Thanks @chayim\n  * REPLICAOF command implementation (#1622) Thanks @chayim\n  * Add support to NX XX and CH to GEOADD (#1605) Thanks @AvitalFineRedis\n  * Add support to ZRANGE and ZRANGESTORE parameters (#1603) Thanks @AvitalFineRedis\n  * Pre 6.2 redis should default to None for script flush (#1641) Thanks @chayim\n  * Add FULL option to XINFO SUMMARY (#1638) Thanks @agusdmb\n  * Geosearch test should use any=True (#1594) Thanks @Andrew-Chen-Wang\n  * Removing packaging dependency (#1626) Thanks @chayim\n  * Fix client_kill_filter docs for skimpy (#1596) Thanks @Andrew-Chen-Wang\n  * Normalize minid and maxlen docs (#1593) Thanks @Andrew-Chen-Wang\n  * Update docs for multiple usernames for ACL DELUSER (#1595) Thanks @Andrew-Chen-Wang\n  * Fix grammar of get param in set command (#1588) Thanks @Andrew-Chen-Wang\n  * Fix docs for client_kill_filter (#1584) Thanks @Andrew-Chen-Wang\n  * Convert README & CONTRIBUTING from rst to md (#1633) Thanks @davidylee\n  * Test BYLEX param in zrangestore (#1634) Thanks @AvitalFineRedis\n  * Tox integrations with invoke and docker (#1632) Thanks @chayim\n  * Adding the release drafter to help simplify release notes (#1618). Thanks @chayim\n  * BACKWARDS INCOMPATIBLE: Removed support for end of life Python 2.7. #1318\n  * BACKWARDS INCOMPATIBLE: All values within Redis URLs are unquoted via\n      urllib.parse.unquote. Prior versions of redis-py supported this by\n      specifying the ``decode_components`` flag to the ``from_url`` functions.\n      This is now done by default and cannot be disabled. #589\n  * POTENTIALLY INCOMPATIBLE: Redis commands were moved into a mixin\n      (see commands.py). Anyone importing ``redis.client`` to access commands\n      directly should import ``redis.commands``. #1534, #1550\n  * Removed technical debt on REDIS_6_VERSION placeholder. Thanks @chayim #1582.\n  * Various docus fixes. Thanks @Andrew-Chen-Wang #1585, #1586.\n  * Support for LOLWUT command, available since Redis 5.0.0.\n      Thanks @brainix #1568.\n  * Added support for CLIENT REPLY, available in Redis 3.2.0.\n      Thanks @chayim #1581.\n  * Support for Auto-reconnect PubSub on get_message. Thanks @luhn #1574.\n  * Fix RST syntax error in README/ Thanks @JanCBrammer #1451.\n  * IDLETIME and FREQ support for RESTORE. Thanks @chayim #1580.\n  * Supporting args with MODULE LOAD. Thanks @chayim #1579.\n  * Updating RedisLabs with Redis. Thanks @gkorland #1575.\n  * Added support for ASYNC to SCRIPT FLUSH available in Redis 6.2.0.\n      Thanks @chayim. #1567\n  * Added CLIENT LIST fix to support multiple client ids available in\n      Redis 2.8.12. Thanks @chayim #1563.\n  * Added DISCARD support for pipelines available in Redis 2.0.0.\n      Thanks @chayim #1565.\n  * Added ACL DELUSER support for deleting lists of users available in\n      Redis 6.2.0. Thanks @chayim. #1562\n  * Added CLIENT TRACKINFO support available in Redis 6.2.0.\n      Thanks @chayim. #1560\n  * Added GEOSEARCH and GEOSEARCHSTORE support available in Redis 6.2.0.\n      Thanks @AvitalFine Redis. #1526\n  * Added LPUSHX support for lists available in Redis 4.0.0.\n      Thanks @chayim. #1559\n  * Added support for QUIT available in Redis 1.0.0.\n      Thanks @chayim. #1558\n  * Added support for COMMAND COUNT available in Redis 2.8.13.\n      Thanks @chayim. #1554.\n  * Added CREATECONSUMER support for XGROUP available in Redis 6.2.0.\n      Thanks @AvitalFineRedis. #1553\n  * Including slowly complexity in INFO if available.\n      Thanks @ian28223 #1489.\n  * Added support for STRALGO available in Redis 6.0.0.\n      Thanks @AvitalFineRedis. #1528\n  * Addes support for ZMSCORE available in Redis 6.2.0.\n      Thanks @2014BDuck and @jiekun.zhu. #1437\n  * Support MINID and LIMIT on XADD available in Redis 6.2.0.\n      Thanks @AvitalFineRedis. #1548\n  * Added sentinel commands FLUSHCONFIG, CKQUORUM, FAILOVER, and RESET\n      available in Redis 2.8.12.\n      Thanks @otherpirate. #834\n  * Migrated Version instead of StrictVersion for Python 3.10.\n      Thanks @tirkarthi. #1552\n  * Added retry mechanism with backoff. Thanks @nbraun-amazon. #1494\n  * Migrated commands to a mixin. Thanks @chayim. #1534\n  * Added support for ZUNION, available in Redis 6.2.0. Thanks\n      @AvitalFineRedis. #1522\n  * Added support for CLIENT LIST with ID, available in Redis 6.2.0.\n      Thanks @chayim. #1505\n  * Added support for MINID and LIMIT with xtrim, available in Reds 6.2.0.\n      Thanks @chayim. #1508\n  * Implemented LMOVE and BLMOVE commands, available in Redis 6.2.0.\n      Thanks @chayim. #1504\n  * Added GET argument to SET command, available in Redis 6.2.0.\n      Thanks @2014BDuck. #1412\n  * Documentation fixes. Thanks @enjoy-binbin @jonher937. #1496 #1532\n  * Added support for XAUTOCLAIM, available in Redis 6.2.0.\n      Thanks @AvitalFineRedis. #1529\n  * Added IDLE support for XPENDING, available in Redis 6.2.0.\n      Thanks @AvitalFineRedis. #1523\n  * Add a count parameter to lpop/rpop, available in Redis 6.2.0.\n      Thanks @wavenator. #1487\n  * Added a (pypy) trove classifier for Python 3.9.\n      Thanks @D3X. #1535\n  * Added ZINTER support, available in Redis 6.2.0.\n      Thanks @AvitalFineRedis. #1520\n  * Added ZINTER support, available in Redis 6.2.0.\n      Thanks @AvitalFineRedis. #1520\n  * Added ZDIFF and ZDIFFSTORE support, available in Redis 6.2.0.\n      Thanks @AvitalFineRedis. #1518\n  * Added ZRANGESTORE support, available in Redis 6.2.0.\n      Thanks @AvitalFineRedis. #1521\n  * Added LT and GT support for ZADD, available in Redis 6.2.0.\n      Thanks @chayim. #1509\n  * Added ZRANDMEMBER support, available in Redis 6.2.0.\n      Thanks @AvitalFineRedis. #1519\n  * Added GETDEL support, available in Redis 6.2.0.\n      Thanks @AvitalFineRedis. #1514\n  * Added CLIENT KILL laddr filter, available in Redis 6.2.0.\n      Thanks @chayim. #1506\n  * Added CLIENT UNPAUSE, available in Redis 6.2.0.\n      Thanks @chayim. #1512\n  * Added NOMKSTREAM support for XADD, available in Redis 6.2.0.\n      Thanks @chayim. #1507\n  * Added HRANDFIELD support, available in Redis 6.2.0.\n      Thanks @AvitalFineRedis. #1513\n  * Added CLIENT INFO support, available in Redis 6.2.0.\n      Thanks @AvitalFineRedis. #1517\n  * Added GETEX support, available in Redis 6.2.0.\n      Thanks @AvitalFineRedis. #1515\n  * Added support for COPY command, available in Redis 6.2.0.\n      Thanks @malinaa96. #1492\n  * Provide a development and testing environment via docker. Thanks\n      @abrookins. #1365\n  * Added support for the LPOS command available in Redis 6.0.6. Thanks\n      @aparcar #1353/#1354\n  * Added support for the ACL LOG command available in Redis 6. Thanks\n      @2014BDuck. #1307\n  * Added support for ABSTTL option of the RESTORE command available in\n      Redis 5.0. Thanks @charettes. #1423\n* 3.5.3 (June 1, 2020)\n  * Restore try/except clauses to __del__ methods. These will be removed\n      in 4.0 when more explicit resource management if enforced. #1339\n  * Update the master_address when Sentinels promote a new master. #847\n  * Update SentinelConnectionPool to not forcefully disconnect other in-use\n      connections which can negatively affect threaded applications. #1345\n* 3.5.2 (May 14, 2020)\n  * Tune the locking in ConnectionPool.get_connection so that the lock is\n      not held while waiting for the socket to establish and validate the\n      TCP connection.\n* 3.5.1 (May 9, 2020)\n  * Fix for HSET argument validation to allow any non-None key. Thanks\n      @AleksMat, #1337, #1341\n* 3.5.0 (April 29, 2020)\n  * Removed exception trapping from __del__ methods. redis-py objects that\n      hold various resources implement __del__ cleanup methods to release\n      those resources when the object goes out of scope. This provides a\n      fallback for when these objects aren't explicitly closed by user code.\n      Prior to this change any errors encountered in closing these resources\n      would be hidden from the user. Thanks @jdufresne. #1281\n  * Expanded support for connection strings specifying a username connecting\n      to pre-v6 servers. #1274\n  * Optimized Lock's blocking_timeout and sleep. If the lock cannot be\n      acquired and the sleep value would cause the loop to sleep beyond\n      blocking_timeout, fail immediately. Thanks @clslgrnc. #1263\n  * Added support for passing Python memoryviews to Redis command args that\n      expect strings or bytes. The memoryview instance is sent directly to\n      the socket such that there are zero copies made of the underlying data\n      during command packing. Thanks @Cody-G. #1265, #1285\n  * HSET command now can accept multiple pairs. HMSET has been marked as\n      deprecated now. Thanks to @laixintao #1271\n  * Don't manually DISCARD when encountering an ExecAbortError.\n      Thanks @nickgaya, #1300/#1301\n  * Reset the watched state of pipelines after calling exec. This saves\n      a roundtrip to the server by not having to call UNWATCH within\n      Pipeline.reset(). Thanks @nickgaya, #1299/#1302\n  * Added the KEEPTTL option for the SET command. Thanks\n      @laixintao #1304/#1280\n  * Added the MEMORY STATS command. #1268\n  * Lock.extend() now has a new option, `replace_ttl`. When False (the\n      default), Lock.extend() adds the `additional_time` to the lock's existing\n      TTL. When replace_ttl=True, the lock's existing TTL is replaced with\n      the value of `additional_time`.\n  * Add testing and support for PyPy.\n* 3.4.1\n  * Move the username argument in the Redis and Connection classes to the\n      end of the argument list. This helps those poor souls that specify all\n      their connection options as non-keyword arguments. #1276\n  * Prior to ACL support, redis-py ignored the username component of\n      Connection URLs. With ACL support, usernames are no longer ignored and\n      are used to authenticate against an ACL rule. Some cloud vendors with\n      managed Redis instances (like Heroku) provide connection URLs with a\n      username component pre-ACL that is not intended to be used. Sending that\n      username to Redis servers < 6.0.0 results in an error. Attempt to detect\n      this condition and retry the AUTH command with only the password such\n      that authentication continues to work for these users. #1274\n  * Removed the __eq__ hooks to Redis and ConnectionPool that were added\n      in 3.4.0. This ended up being a bad idea as two separate connection\n      pools be considered equal yet manage a completely separate set of\n      connections.\n* 3.4.0\n  * Allow empty pipelines to be executed if there are WATCHed keys.\n      This is a convenient way to test if any of the watched keys changed\n      without actually running any other commands. Thanks @brianmaissy.\n      #1233, #1234\n  * Removed support for end of life Python 3.4.\n  * Added support for all ACL commands in Redis 6. Thanks @IAmATeaPot418\n      for helping.\n  * Pipeline instances now always evaluate to True. Prior to this change,\n      pipeline instances relied on __len__ for boolean evaluation which\n      meant that pipelines with no commands on the stack would be considered\n      False. #994\n  * Client instances and Connection pools now support a 'client_name'\n      argument. If supplied, all connections created will call CLIENT SETNAME\n      as soon as the connection is opened. Thanks to @Habbie for supplying\n      the basis of this change. #802\n  * Added the 'ssl_check_hostname' argument to specify whether SSL\n      connections should require the server hostname to match the hostname\n      specified in the SSL cert. By default 'ssl_check_hostname' is False\n      for backwards compatibility. #1196\n  * Slightly optimized command packing. Thanks @Deneby67. #1255\n  * Added support for the TYPE argument to SCAN. Thanks @netocp. #1220\n  * Better thread and fork safety in ConnectionPool and\n      BlockingConnectionPool. Added better locking to synchronize critical\n      sections rather than relying on CPython-specific implementation details\n      relating to atomic operations. Adjusted how the pools identify and\n      deal with a fork. Added a ChildDeadlockedError exception that is\n      raised by child processes in the very unlikely chance that a deadlock\n      is encountered. Thanks @gmbnomis, @mdellweg, @yht804421715. #1270,\n      #1138, #1178, #906, #1262\n  * Added __eq__ hooks to the Redis and ConnectionPool classes.\n      Thanks @brainix. #1240\n* 3.3.11\n  * Further fix for the SSLError -> TimeoutError mapping to work\n      on obscure releases of Python 2.7.\n* 3.3.10\n  * Fixed a potential error handling bug for the SSLError -> TimeoutError\n      mapping introduced in 3.3.9. Thanks @zbristow. #1224\n* 3.3.9\n  * Mapped Python 2.7 SSLError to TimeoutError where appropriate. Timeouts\n      should now consistently raise TimeoutErrors on Python 2.7 for both\n      unsecured and secured connections. Thanks @zbristow. #1222\n* 3.3.8\n  * Fixed MONITOR parsing to properly parse IPv6 client addresses, unix\n      socket connections and commands issued from Lua. Thanks @kukey. #1201\n* 3.3.7\n  * Fixed a regression introduced in 3.3.0 where socket.error exceptions\n      (or subclasses) could potentially be raised instead of\n      redis.exceptions.ConnectionError. #1202\n* 3.3.6\n  * Fixed a regression in 3.3.5 that caused PubSub.get_message() to raise\n      a socket.timeout exception when passing a timeout value. #1200\n* 3.3.5\n  * Fix an issue where socket.timeout errors could be handled by the wrong\n      exception handler in Python 2.7.\n* 3.3.4\n  * More specifically identify nonblocking read errors for both SSL and\n      non-SSL connections. 3.3.1, 3.3.2 and 3.3.3 on Python 2.7 could\n      potentially mask a ConnectionError. #1197\n* 3.3.3\n  * The SSL module in Python < 2.7.9 handles non-blocking sockets\n      differently than 2.7.9+. This patch accommodates older versions. #1197\n* 3.3.2\n  * Further fixed a regression introduced in 3.3.0 involving SSL and\n      non-blocking sockets. #1197\n* 3.3.1\n  * Fixed a regression introduced in 3.3.0 involving SSL and non-blocking\n      sockets. #1197\n* 3.3.0\n  * Resolve a race condition with the PubSubWorkerThread. #1150\n  * Cleanup socket read error messages. Thanks Vic Yu. #1159\n  * Cleanup the Connection's selector correctly. Thanks Bruce Merry. #1153\n  * Added a Monitor object to make working with MONITOR output easy.\n      Thanks Roey Prat #1033\n  * Internal cleanup: Removed the legacy Token class which was necessary\n      with older version of Python that are no longer supported. #1066\n  * Response callbacks are now case insensitive. This allows users that\n      call Redis.execute_command() directly to pass lower-case command\n      names and still get reasonable responses. #1168\n  * Added support for hiredis-py 1.0.0 encoding error support. This should\n      make the PythonParser and the HiredisParser behave identically\n      when encountering encoding errors. Thanks Brian Candler. #1161/#1162\n  * All authentication errors now properly raise AuthenticationError.\n      AuthenticationError is now a subclass of ConnectionError, which will\n      cause the connection to be disconnected and cleaned up appropriately.\n      #923\n  * Add READONLY and READWRITE commands. Thanks @theodesp. #1114\n  * Remove selectors in favor of nonblocking sockets. Selectors had\n      issues in some environments including eventlet and gevent. This should\n      resolve those issues with no other side effects.\n  * Fixed an issue with XCLAIM and previously claimed but not removed\n      messages. Thanks @thomdask. #1192/#1191\n  * Allow for single connection client instances. These instances\n      are not thread safe but offer other benefits including a subtle\n      performance increase.\n  * Added extensive health checks that keep the connections lively.\n      Passing the \"health_check_interval=N\" option to the Redis client class\n      or to a ConnectionPool ensures that a round trip PING/PONG is successful\n      before any command if the underlying connection has been idle for more\n      than N seconds. ConnectionErrors and TimeoutErrors are automatically\n      retried once for health checks.\n  * Changed the PubSubWorkerThread to use a threading.Event object rather\n      than a boolean to control the thread's life cycle. Thanks Timothy\n      Rule. #1194/#1195.\n  * Fixed a bug in Pipeline error handling that would incorrectly retry\n      ConnectionErrors.\n* 3.2.1\n  * Fix SentinelConnectionPool to work in multiprocess/forked environments.\n* 3.2.0\n  * Added support for `select.poll` to test whether data can be read\n      on a socket. This should allow for significantly more connections to\n      be used with pubsub. Fixes #486/#1115\n  * Attempt to guarantee that the ConnectionPool hands out healthy\n      connections. Healthy connections are those that have an established\n      socket connection to the Redis server, are ready to accept a command\n      and have no data available to read. Fixes #1127/#886\n  * Use the socket.IPPROTO_TCP constant instead of socket.SOL_TCP.\n      IPPROTO_TCP is available on more interpreters (Jython for instance).\n      Thanks @Junnplus. #1130\n  * Fixed a regression introduced in 3.0 that mishandles exceptions not\n      derived from the base Exception class. KeyboardInterrupt and\n      gevent.timeout notable. Thanks Christian Fersch. #1128/#1129\n  * Significant improvements to handing connections with forked processes.\n      Parent and child processes no longer trample on each others' connections.\n      Thanks to Jay Rolette for the patch and highlighting this issue.\n      #504/#732/#784/#863\n  * PythonParser no longer closes the associated connection's socket. The\n      connection itself will close the socket. #1108/#1085\n* 3.1.0\n  * Connection URLs must have one of the following schemes:\n      redis://, rediss://, unix://. Thanks @jdupl123. #961/#969\n  * Fixed an issue with retry_on_timeout logic that caused some TimeoutErrors\n      to be retried. Thanks Aaron Yang. #1022/#1023\n  * Added support for SNI for SSL. Thanks @oridistor and Roey Prat. #1087\n  * Fixed ConnectionPool repr for pools with no connections. Thanks\n      Cody Scott. #1043/#995\n  * Fixed GEOHASH to return a None value when specifying a place that\n      doesn't exist on the server. Thanks @guybe7. #1126\n  * Fixed XREADGROUP to return an empty dictionary for messages that\n      have been deleted but still exist in the unacknowledged queue. Thanks\n      @xeizmendi. #1116\n  * Added an owned method to Lock objects. owned returns a boolean\n      indicating whether the current lock instance still owns the lock.\n      Thanks Dave Johansen. #1112\n  * Allow lock.acquire() to accept an optional token argument. If\n      provided, the token argument is used as the unique value used to claim\n      the lock. Thankd Dave Johansen. #1112\n  * Added a reacquire method to Lock objects. reacquire attempts to renew\n      the lock such that the timeout is extended to the same value that the\n      lock was initially acquired with. Thanks Ihor Kalnytskyi. #1014\n  * Stream names found within XREAD and XREADGROUP responses now properly\n      respect the decode_responses flag.\n  * XPENDING_RANGE now requires the user the specify the min, max and\n      count arguments. Newer versions of Redis prevent count from being\n      infinite so it's left to the user to specify these values explicitly.\n  * ZADD now returns None when xx=True and incr=True and an element\n      is specified that doesn't exist in the sorted set. This matches\n      what the server returns in this case. #1084\n  * Added client_kill_filter that accepts various filters to identify\n      and kill clients. Thanks Theofanis Despoudis. #1098\n  * Fixed a race condition that occurred when unsubscribing and\n      resubscribing to the same channel or pattern in rapid succession.\n      Thanks Marcin Raczyński. #764\n  * Added a LockNotOwnedError that is raised when trying to extend or\n      release a lock that is no longer owned. This is a subclass of LockError\n      so previous code should continue to work as expected. Thanks Joshua\n      Harlow. #1095\n  * Fixed a bug in GEORADIUS that forced decoding of places without\n      respecting the decode_responses option. Thanks Bo Bayles. #1082\n* 3.0.1\n  * Fixed regression with UnixDomainSocketConnection caused by 3.0.0.\n      Thanks Jyrki Muukkonen\n  * Fixed an issue with the new asynchronous flag on flushdb and flushall.\n      Thanks rogeryen\n  * Updated Lock.locked() method to indicate whether *any* process has\n      acquired the lock, not just the current one. This is in line with\n      the behavior of threading.Lock. Thanks Alan Justino da Silva\n* 3.0.0\n  BACKWARDS INCOMPATIBLE CHANGES\n  * When using a Lock as a context manager and the lock fails to be acquired\n      a LockError is now raised. This prevents the code block inside the\n      context manager from being executed if the lock could not be acquired.\n  * Renamed LuaLock to Lock.\n  * Removed the pipeline based Lock implementation in favor of the LuaLock\n      implementation.\n  * Only bytes, strings and numbers (ints, longs and floats) are acceptable\n      for keys and values. Previously redis-py attempted to cast other types\n      to str() and store the result. This caused must confusion and frustration\n      when passing boolean values (cast to 'True' and 'False') or None values\n      (cast to 'None'). It is now the user's responsibility to cast all\n      key names and values to bytes, strings or numbers before passing the\n      value to redis-py.\n  * The StrictRedis class has been renamed to Redis. StrictRedis will\n      continue to exist as an alias of Redis for the foreseeable future.\n  * The legacy Redis client class has been removed. It caused much confusion\n      to users.\n  * ZINCRBY arguments 'value' and 'amount' have swapped order to match the\n      the Redis server. The new argument order is: keyname, amount, value.\n  * MGET no longer raises an error if zero keys are passed in. Instead an\n      empty list is returned.\n  * MSET and MSETNX now require all keys/values to be specified in a single\n      dictionary argument named mapping. This was changed to allow for future\n      options to these commands in the future.\n  * ZADD now requires all element names/scores be specified in a single\n      dictionary argument named mapping. This was required to allow the NX,\n      XX, CH and INCR options to be specified.\n  * ssl_cert_reqs now has a default value of 'required' by default. This\n      should make connecting to a remote Redis server over SSL more secure.\n      Thanks u2mejc\n  * Removed support for EOL Python 2.6 and 3.3. Thanks jdufresne\n  OTHER CHANGES\n  * Added missing DECRBY command. Thanks derek-dchu\n  * CLUSTER INFO and CLUSTER NODES responses are now properly decoded to\n      strings.\n  * Added a 'locked()' method to Lock objects. This method returns True\n      if the lock has been acquired and owned by the current process,\n      otherwise False.\n  * EXISTS now supports multiple keys. It's return value is now the number\n      of keys in the list that exist.\n  * Ensure all commands can accept key names as bytes. This fixes issues\n      with BLPOP, BRPOP and SORT.\n  * All errors resulting from bad user input are raised as DataError\n      exceptions. DataError is a subclass of RedisError so this should be\n      transparent to anyone previously catching these.\n  * Added support for NX, XX, CH and INCR options to ZADD\n  * Added support for the MIGRATE command\n  * Added support for the MEMORY USAGE and MEMORY PURGE commands. Thanks\n      Itamar Haber\n  * Added support for the 'asynchronous' argument to FLUSHDB and FLUSHALL\n      commands. Thanks Itamar Haber\n  * Added support for the BITFIELD command. Thanks Charles Leifer and\n      Itamar Haber\n  * Improved performance on pipeline requests with large chunks of data.\n      Thanks tzickel\n  * Fixed test suite to not fail if another client is connected to the\n      server the tests are running against.\n  * Added support for SWAPDB. Thanks Itamar Haber\n  * Added support for all STREAM commands. Thanks Roey Prat and Itamar Haber\n  * SHUTDOWN now accepts the 'save' and 'nosave' arguments. Thanks\n      dwilliams-kenzan\n  * Added support for ZPOPMAX, ZPOPMIN, BZPOPMAX, BZPOPMIN. Thanks\n      Itamar Haber\n  * Added support for the 'type' argument in CLIENT LIST. Thanks Roey Prat\n  * Added support for CLIENT PAUSE. Thanks Roey Prat\n  * Added support for CLIENT ID and CLIENT UNBLOCK. Thanks Itamar Haber\n  * GEODIST now returns a None value when referencing a place that does\n      not exist. Thanks qingping209\n  * Added a ping() method to pubsub objects. Thanks krishan-carbon\n  * Fixed a bug with keys in the INFO dict that contained ':' symbols.\n      Thanks mzalimeni\n  * Fixed the select system call retry compatibility with Python 2.x.\n      Thanks lddubeau\n  * max_connections is now a valid querystring argument for creating\n      connection pools from URLs. Thanks mmaslowskicc\n  * Added the UNLINK command. Thanks yozel\n  * Added socket_type option to Connection for configurability.\n      Thanks garlicnation\n  * Lock.do_acquire now atomically sets acquires the lock and sets the\n      expire value via set(nx=True, px=timeout). Thanks 23doors\n  * Added 'count' argument to SPOP. Thanks AlirezaSadeghi\n  * Fixed an issue parsing client_list responses that contained an '='.\n      Thanks swilly22\n* 2.10.6\n  * Various performance improvements. Thanks cjsimpson\n  * Fixed a bug with SRANDMEMBER where the behavior for `number=0` did\n      not match the spec. Thanks Alex Wang\n  * Added HSTRLEN command. Thanks Alexander Putilin\n  * Added the TOUCH command. Thanks Anis Jonischkeit\n  * Remove unnecessary calls to the server when registering Lua scripts.\n      Thanks Ben Greenberg\n  * SET's EX and PX arguments now allow values of zero. Thanks huangqiyin\n  * Added PUBSUB {CHANNELS, NUMPAT, NUMSUB} commands. Thanks Angus Pearson\n  * PubSub connections that encounter `InterruptedError`s now\n      retry automatically. Thanks Carlton Gibson and Seth M. Larson\n  * LPUSH and RPUSH commands run on PyPy now correctly returns the number\n      of items of the list. Thanks Jeong YunWon\n  * Added support to automatically retry socket EINTR errors. Thanks\n      Thomas Steinacher\n  * PubSubWorker threads started with `run_in_thread` are now daemonized\n      so the thread shuts down when the running process goes away. Thanks\n      Keith Ainsworth\n  * Added support for GEO commands. Thanks Pau Freixes, Alex DeBrie and\n      Abraham Toriz\n  * Made client construction from URLs smarter. Thanks Tim Savage\n  * Added support for CLUSTER * commands. Thanks Andy Huang\n  * The RESTORE command now accepts an optional `replace` boolean.\n      Thanks Yoshinari Takaoka\n  * Attempt to connect to a new Sentinel if a TimeoutError occurs. Thanks\n      Bo Lopker\n  * Fixed a bug in the client's `__getitem__` where a KeyError would be\n      raised if the value returned by the server is an empty string.\n      Thanks Javier Candeira.\n  * Socket timeouts when connecting to a server are now properly raised\n      as TimeoutErrors.\n* 2.10.5\n  * Allow URL encoded parameters in Redis URLs. Characters like a \"/\" can\n      now be URL encoded and redis-py will correctly decode them. Thanks\n      Paul Keene.\n  * Added support for the WAIT command. Thanks <https://github.com/eshizhan>\n  * Better shutdown support for the PubSub Worker Thread. It now properly\n      cleans up the connection, unsubscribes from any channels and patterns\n      previously subscribed to and consumes any waiting messages on the socket.\n  * Added the ability to sleep for a brief period in the event of a\n      WatchError occurring. Thanks Joshua Harlow.\n  * Fixed a bug with pipeline error reporting when dealing with characters\n      in error messages that could not be encoded to the connection's\n      character set. Thanks Hendrik Muhs.\n  * Fixed a bug in Sentinel connections that would inadvertently connect\n      to the master when the connection pool resets. Thanks\n      <https://github.com/df3n5>\n  * Better timeout support in Pubsub get_message. Thanks Andy Isaacson.\n  * Fixed a bug with the HiredisParser that would cause the parser to\n      get stuck in an endless loop if a specific number of bytes were\n      delivered from the socket. This fix also increases performance of\n      parsing large responses from the Redis server.\n  * Added support for ZREVRANGEBYLEX.\n  * ConnectionErrors are now raised if Redis refuses a connection due to\n      the maxclients limit being exceeded. Thanks Roman Karpovich.\n  * max_connections can now be set when instantiating client instances.\n      Thanks Ohad Perry.\n* 2.10.4\n    (skipped due to a PyPI snafu)\n* 2.10.3\n  * Fixed a bug with the bytearray support introduced in 2.10.2. Thanks\n      Josh Owen.\n* 2.10.2\n  * Added support for Hiredis's new bytearray support. Thanks\n      <https://github.com/tzickel>\n  * POSSIBLE BACKWARDS INCOMPATIBLE CHANGE: Fixed a possible race condition\n      when multiple threads share the same Lock instance with a timeout. Lock\n      tokens are now stored in thread local storage by default. If you have\n      code that acquires a lock in one thread and passes that lock instance to\n      another thread to release it, you need to disable thread local storage.\n      Refer to the doc strings on the Lock class about the thread_local\n      argument information.\n  * Fixed a regression in from_url where \"charset\" and \"errors\" weren't\n      valid options. \"encoding\" and \"encoding_errors\" are still accepted\n      and preferred.\n  * The \"charset\" and \"errors\" options have been deprecated. Passing\n      either to StrictRedis.__init__ or from_url will still work but will\n      also emit a DeprecationWarning. Instead use the \"encoding\" and\n      \"encoding_errors\" options.\n  * Fixed a compatibility bug with Python 3 when the server closes a\n      connection.\n  * Added BITPOS command. Thanks <https://github.com/jettify>.\n  * Fixed a bug when attempting to send large values to Redis in a Pipeline.\n* 2.10.1\n  * Fixed a bug where Sentinel connections to a server that's no longer a\n      master and receives a READONLY error will disconnect and reconnect to\n      the master.\n* 2.10.0\n  * Discontinued support for Python 2.5. Upgrade. You'll be happier.\n  * The HiRedis parser will now properly raise ConnectionErrors.\n  * Completely refactored PubSub support. Fixes all known PubSub bugs and\n      adds a bunch of new features. Docs can be found in the README under the\n      new \"Publish / Subscribe\" section.\n  * Added the new HyperLogLog commands (PFADD, PFCOUNT, PFMERGE). Thanks\n      Pepijn de Vos and Vincent Ohprecio.\n  * Updated TTL and PTTL commands with Redis 2.8+ semantics. Thanks Markus\n      Kaiserswerth.\n  * *SCAN commands now return a long (int on Python3) cursor value rather\n      than the string representation. This might be slightly backwards\nincompatible in code using*SCAN commands loops such as\n      \"while cursor != '0':\".\n  * Added extra *SCAN commands that return iterators instead of the normal\n      [cursor, data] type. Use scan_iter, hscan_iter, sscan_iter, and\n      zscan_iter for iterators. Thanks Mathieu Longtin.\n  * Added support for SLOWLOG commands. Thanks Rick van Hattem.\n  * Added lexicographical commands ZRANGEBYLEX, ZREMRANGEBYLEX, and ZLEXCOUNT\n      for sorted sets.\n  * Connection objects now support an optional argument, socket_read_size,\n      indicating how much data to read during each socket.recv() call. After\n      benchmarking, increased the default size to 64k, which dramatically\n      improves performance when fetching large values, such as many results\n      in a pipeline or a large (>1MB) string value.\n  * Improved the pack_command and send_packed_command functions to increase\n      performance when sending large (>1MB) values.\n  * Sentinel Connections to master servers now detect when a READONLY error\n      is encountered and disconnect themselves and all other active connections\n      to the same master so that the new master can be discovered.\n  * Fixed Sentinel state parsing on Python 3.\n  * Added support for SENTINEL MONITOR, SENTINEL REMOVE, and SENTINEL SET\n      commands. Thanks Greg Murphy.\n  * INFO output that doesn't follow the \"key:value\" format will now be\n      appended to a key named \"__raw__\" in the INFO dictionary. Thanks Pedro\n      Larroy.\n  * The \"vagrant\" directory contains a complete vagrant environment for\n      redis-py developers. The environment runs a Redis master, a Redis slave,\n      and 3 Sentinels. Future iterations of the test suite will incorporate\n      more integration style tests, ensuring things like failover happen\n      correctly.\n  * It's now possible to create connection pool instances from a URL.\n      StrictRedis.from_url() now uses this feature to create a connection pool\n      instance and use that when creating a new client instance. Thanks\n      <https://github.com/chillipino>\n  * When creating client instances or connection pool instances from an URL,\n      it's now possible to pass additional options to the connection pool with\n      querystring arguments.\n  * Fixed a bug where some encodings (like utf-16) were unusable on Python 3\n      as command names and literals would get encoded.\n  * Added an SSLConnection class that allows for secure connections through\n      stunnel or other means. Construct an SSL connection with the ssl=True\n      option on client classes, using the rediss:// scheme from an URL, or\n      by passing the SSLConnection class to a connection pool's\n      connection_class argument. Thanks <https://github.com/oranagra>.\n  * Added a socket_connect_timeout option to control how long to wait while\n      establishing a TCP connection before timing out. This lets the client\n      fail fast when attempting to connect to a downed server while keeping\n      a more lenient timeout for all other socket operations.\n  * Added TCP Keep-alive support by passing use the socket_keepalive=True\n      option. Finer grain control can be achieved using the\n      socket_keepalive_options option which expects a dictionary with any of\n      the keys (socket.TCP_KEEPIDLE, socket.TCP_KEEPCNT, socket.TCP_KEEPINTVL)\n      and integers for values. Thanks Yossi Gottlieb.\n  * Added a `retry_on_timeout` option that controls how socket.timeout errors\n      are handled. By default it is set to False and will cause the client to\n      raise a TimeoutError anytime a socket.timeout is encountered. If\n      `retry_on_timeout` is set to True, the client will retry a command that\n      timed out once like other `socket.error`s.\n  * Completely refactored the Lock system. There is now a LuaLock class\n      that's used when the Redis server is capable of running Lua scripts along\n      with a fallback class for Redis servers < 2.6. The new locks fix several\n      subtle race consider that the old lock could face. In additional, a\n      new method, \"extend\" is available on lock instances that all a lock\n      owner to extend the amount of time they have the lock for. Thanks to\n      Eli Finkelshteyn and <https://github.com/chillipino> for contributions.\n* 2.9.1\n  * IPv6 support. Thanks <https://github.com/amashinchi>\n* 2.9.0\n  * Performance improvement for packing commands when using the PythonParser.\n      Thanks Guillaume Viot.\n  * Executing an empty pipeline transaction no longer sends MULTI/EXEC to\n      the server. Thanks EliFinkelshteyn.\n  * Errors when authenticating (incorrect password) and selecting a database\n      now close the socket.\n  * Full Sentinel support thanks to Vitja Makarov. Thanks!\n  * Better repr support for client and connection pool instances. Thanks\n      Mark Roberts.\n  * Error messages that the server sends to the client are now included\n      in the client error message. Thanks Sangjin Lim.\n  * Added the SCAN, SSCAN, HSCAN, and ZSCAN commands. Thanks Jingchao Hu.\n  * ResponseErrors generated by pipeline execution provide addition context\n      including the position of the command in the pipeline and the actual\n      command text generated the error.\n  * ConnectionPools now play nicer in threaded environments that fork. Thanks\n      Christian Joergensen.\n* 2.8.0\n  * redis-py should play better with gevent when a gevent Timeout is raised.\n      Thanks leifkb.\n  * Added SENTINEL command. Thanks Anna Janackova.\n  * Fixed a bug where pipelines could potentially corrupt a connection\n      if the MULTI command generated a ResponseError. Thanks EliFinkelshteyn\n      for the report.\n  * Connections now call socket.shutdown() prior to socket.close() to\n      ensure communication ends immediately per the note at\n      <https://docs.python.org/2/library/socket.html#socket.socket.close>\n      Thanks to David Martin for pointing this out.\n  * Lock checks are now based on floats rather than ints. Thanks\n      Vitja Makarov.\n* 2.7.6\n  * Added CONFIG RESETSTAT command. Thanks Yossi Gottlieb.\n  * Fixed a bug introduced in 2.7.3 that caused issues with script objects\n      and pipelines. Thanks Carpentier Pierre-Francois.\n  * Converted redis-py's test suite to use the awesome py.test library.\n  * Fixed a bug introduced in 2.7.5 that prevented a ConnectionError from\n      being raised when the Redis server is LOADING data.\n  * Added a BusyLoadingError exception that's raised when the Redis server\n      is starting up and not accepting commands yet. BusyLoadingError\n      subclasses ConnectionError, which this state previously returned.\n      Thanks Yossi Gottlieb.\n* 2.7.5\n  * DEL, HDEL and ZREM commands now return the numbers of keys deleted\n      instead of just True/False.\n  * from_url now supports URIs with a port number. Thanks Aaron Westendorf.\n* 2.7.4\n  * Added missing INCRBY method. Thanks Krzysztof Dorosz.\n  * SET now accepts the EX, PX, NX and XX options from Redis 2.6.12. These\n      options will generate errors if these options are used when connected\n      to a Redis server < 2.6.12. Thanks George Yoshida.\n* 2.7.3\n  * Fixed a bug with BRPOPLPUSH and lists with empty strings.\n  * All empty except: clauses have been replaced to only catch Exception\n      subclasses. This prevents a KeyboardInterrupt from triggering exception\n      handlers. Thanks Lucian Branescu Mihaila.\n  * All exceptions that are the result of redis server errors now share a\n      command Exception subclass, ServerError. Thanks Matt Robenolt.\n  * Prevent DISCARD from being called if MULTI wasn't also called. Thanks\n      Pete Aykroyd.\n  * SREM now returns an integer indicating the number of items removed from\n      the set. Thanks <https://github.com/ronniekk>.\n  * Fixed a bug with BGSAVE and BGREWRITEAOF response callbacks with Python3.\n      Thanks Nathan Wan.\n  * Added CLIENT GETNAME and CLIENT SETNAME commands.\n      Thanks <https://github.com/bitterb>.\n  * It's now possible to use len() on a pipeline instance to determine the\n      number of commands that will be executed. Thanks Jon Parise.\n  * Fixed a bug in INFO's parse routine with floating point numbers. Thanks\n      Ali Onur Uyar.\n  * Fixed a bug with BITCOUNT to allow `start` and `end` to both be zero.\n      Thanks Tim Bart.\n  * The transaction() method now accepts a boolean keyword argument,\n      value_from_callable. By default, or if False is passes, the transaction()\n      method will return the value of the pipelines execution. Otherwise, it\n      will return whatever func() returns.\n  * Python3 compatibility fix ensuring we're not already bytes(). Thanks\n      Salimane Adjao Moustapha.\n  * Added PSETEX. Thanks YAMAMOTO Takashi.\n  * Added a BlockingConnectionPool to limit the number of connections that\n      can be created. Thanks James Arthur.\n  * SORT now accepts a `groups` option that if specified, will return\n      tuples of n-length, where n is the number of keys specified in the GET\n      argument. This allows for convenient row-based iteration. Thanks\n      Ionuț Arțăriși.\n* 2.7.2\n  * Parse errors are now *always* raised on multi/exec pipelines, regardless\n      of the `raise_on_error` flag. See\n      <https://groups.google.com/forum/?hl=en&fromgroups=#!topic/redis-db/VUiEFT8U8U0>\n      for more info.\n* 2.7.1\n  * Packaged tests with source code\n* 2.7.0\n  * Added BITOP and BITCOUNT commands. Thanks Mark Tozzi.\n  * Added the TIME command. Thanks Jason Knight.\n  * Added support for LUA scripting. Thanks to Angus Peart, Drew Smathers,\n      Issac Kelly, Louis-Philippe Perron, Sean Bleier, Jeffrey Kaditz, and\n      Dvir Volk for various patches and contributions to this feature.\n  * Changed the default error handling in pipelines. By default, the first\n      error in a pipeline will now be raised. A new parameter to the\n      pipeline's execute, `raise_on_error`, can be set to False to keep the\n      old behavior of embeedding the exception instances in the result.\n  * Fixed a bug with pipelines where parse errors won't corrupt the\n      socket.\n  * Added the optional `number` argument to SRANDMEMBER for use with\n      Redis 2.6+ servers.\n  * Added PEXPIRE/PEXPIREAT/PTTL commands. Thanks Luper Rouch.\n  * Added INCRBYFLOAT/HINCRBYFLOAT commands. Thanks Nikita Uvarov.\n  * High precision floating point values won't lose their precision when\n      being sent to the Redis server. Thanks Jason Oster and Oleg Pudeyev.\n  * Added CLIENT LIST/CLIENT KILL commands\n* 2.6.2\n  * `from_url` is now available as a classmethod on client classes. Thanks\n      Jon Parise for the patch.\n  * Fixed several encoding errors resulting from the Python 3.x support.\n* 2.6.1\n  * Python 3.x support! Big thanks to Alex Grönholm.\n  * Fixed a bug in the PythonParser's read_response that could hide an error\n      from the client (#251).\n* 2.6.0\n  * Changed (p)subscribe and (p)unsubscribe to no longer return messages\n      indicating the channel was subscribed/unsubscribed to. These messages\n      are available in the listen() loop instead. This is to prevent the\n      following scenario:\n    * Client A is subscribed to \"foo\"\n    * Client B publishes message to \"foo\"\n    * Client A subscribes to channel \"bar\" at the same time.\n      Prior to this change, the subscribe() call would return the published\n      messages on \"foo\" rather than the subscription confirmation to \"bar\".\n  * Added support for GETRANGE, thanks Jean-Philippe Caruana\n  * A new setting \"decode_responses\" specifies whether return values from\n      Redis commands get decoded automatically using the client's charset\n      value. Thanks to Frankie Dintino for the patch.\n* 2.4.13\n  * redis.from_url() can take an URL representing a Redis connection string\n      and return a client object. Thanks Kenneth Reitz for the patch.\n* 2.4.12\n  * ConnectionPool is now fork-safe. Thanks Josiah Carson for the patch.\n* 2.4.11\n  * AuthenticationError will now be correctly raised if an invalid password\n      is supplied.\n  * If Hiredis is unavailable, the HiredisParser will raise a RedisError\n      if selected manually.\n  * Made the INFO command more tolerant of Redis changes formatting. Fix\n      for #217.\n* 2.4.10\n  * Buffer reads from socket in the PythonParser. Fix for a Windows-specific\n      bug (#205).\n  * Added the OBJECT and DEBUG OBJECT commands.\n  * Added __del__ methods for classes that hold on to resources that need to\n      be cleaned up. This should prevent resource leakage when these objects\n      leave scope due to misuse or unhandled exceptions. Thanks David Wolever\n      for the suggestion.\n  * Added the ECHO command for completeness.\n  * Fixed a bug where attempting to subscribe to a PubSub channel of a Redis\n      server that's down would blow out the stack. Fixes #179 and #195. Thanks\n      Ovidiu Predescu for the test case.\n  * StrictRedis's TTL command now returns a -1 when querying a key with no\n      expiration. The Redis class continues to return None.\n  * ZADD and SADD now return integer values indicating the number of items\n      added. Thanks Homer Strong.\n  * Renamed the base client class to StrictRedis, replacing ZADD and LREM in\n      favor of their official argument order. The Redis class is now a subclass\n      of StrictRedis, implementing the legacy redis-py implementations of ZADD\n      and LREM. Docs have been updated to suggesting the use of StrictRedis.\n  * SETEX in StrictRedis is now compliant with official Redis SETEX command.\n      the name, value, time implementation moved to \"Redis\" for backwards\n      compatibility.\n* 2.4.9\n  * Removed socket retry logic in Connection. This is the responsibility of\n      the caller to determine if the command is safe and can be retried. Thanks\n      David Wolver.\n  * Added some extra guards around various types of exceptions being raised\n      when sending or parsing data. Thanks David Wolver and Denis Bilenko.\n* 2.4.8\n  * Imported with_statement from __future__ for Python 2.5 compatibility.\n* 2.4.7\n  * Fixed a bug where some connections were not getting released back to the\n      connection pool after pipeline execution.\n  * Pipelines can now be used as context managers. This is the preferred way\n      of use to ensure that connections get cleaned up properly. Thanks\n      David Wolever.\n  * Added a convenience method called transaction() on the base Redis class.\n      This method eliminates much of the boilerplate used when using pipelines\n      to watch Redis keys. See the documentation for details on usage.\n* 2.4.6\n  * Variadic arguments for SADD, SREM, ZREN, HDEL, LPUSH, and RPUSH. Thanks\n      Raphaël Vinot.\n  * (CRITICAL) Fixed an error in the Hiredis parser that occasionally caused\n      the socket connection to become corrupted and unusable. This became\n      noticeable once connection pools started to be used.\n  * ZRANGE, ZREVRANGE, ZRANGEBYSCORE, and ZREVRANGEBYSCORE now take an\n      additional optional argument, score_cast_func, which is a callable used\n      to cast the score value in the return type. The default is float.\n  * Removed the PUBLISH method from the PubSub class. Connections that are\n      [P]SUBSCRIBEd cannot issue PUBLISH commands, so it doesn't make sense\n      to have it here.\n  * Pipelines now contain WATCH and UNWATCH. Calling WATCH or UNWATCH from\n      the base client class will result in a deprecation warning. After\n      WATCHing one or more keys, the pipeline will be placed in immediate\n      execution mode until UNWATCH or MULTI are called. Refer to the new\n      pipeline docs in the README for more information. Thanks to David Wolever\n      and Randall Leeds for greatly helping with this.\n* 2.4.5\n  * The PythonParser now works better when reading zero length strings.\n* 2.4.4\n  * Fixed a typo introduced in 2.4.3\n* 2.4.3\n  * Fixed a bug in the UnixDomainSocketConnection caused when trying to\n      form an error message after a socket error.\n* 2.4.2\n  * Fixed a bug in pipeline that caused an exception while trying to\n      reconnect after a connection timeout.\n* 2.4.1\n  * Fixed a bug in the PythonParser if disconnect is called before connect.\n* 2.4.0\n  * WARNING: 2.4 contains several backwards incompatible changes.\n  * Completely refactored Connection objects. Moved much of the Redis\n      protocol packing for requests here, and eliminated the nasty dependencies\n      it had on the client to do AUTH and SELECT commands on connect.\n  * Connection objects now have a parser attribute. Parsers are responsible\n      for reading data Redis sends. Two parsers ship with redis-py: a\n      PythonParser and the HiRedis parser. redis-py will automatically use the\n      HiRedis parser if you have the Python hiredis module installed, otherwise\n      it will fall back to the PythonParser. You can force or the other, or even\n      an external one by passing the `parser_class` argument to ConnectionPool.\n  * Added a UnixDomainSocketConnection for users wanting to talk to the Redis\n      instance running on a local machine only. You can use this connection\n      by passing it to the `connection_class` argument of the ConnectionPool.\n  * Connections no longer derive from threading.local. See threading.local\n      note below.\n  * ConnectionPool has been completely refactored. The ConnectionPool now\n      maintains a list of connections. The redis-py client only hangs on to\n      a ConnectionPool instance, calling get_connection() anytime it needs to\n      send a command. When get_connection() is called, the command name and\n      any keys involved in the command are passed as arguments. Subclasses of\n      ConnectionPool could use this information to identify the shard the keys\n      belong to and return a connection to it. ConnectionPool also implements\n      disconnect() to force all connections in the pool to disconnect from\n      the Redis server.\n  * redis-py no longer support the SELECT command. You can still connect to\n      a specific database by specifying it when instantiating a client instance\n      or by creating a connection pool. If you need to talk to multiple\n      databases within your application, you should use a separate client\n      instance for each database you want to talk to.\n  * Completely refactored Publish/Subscribe support. The subscribe and listen\n      commands are no longer available on the redis-py Client class. Instead,\n      the `pubsub` method returns an instance of the PubSub class which contains\n      all publish/subscribe support. Note, you can still PUBLISH from the\n      redis-py client class if you desire.\n  * Removed support for all previously deprecated commands or options.\n  * redis-py no longer uses threading.local in any way. Since the Client\n      class no longer holds on to a connection, it's no longer needed. You can\n      now pass client instances between threads, and commands run on those\n      threads will retrieve an available connection from the pool, use it and\n      release it. It should now be trivial to use redis-py with eventlet or\n      greenlet.\n  * ZADD now accepts pairs of value=score keyword arguments. This should help\n      resolve the long standing #72. The older value and score arguments have\n      been deprecated in favor of the keyword argument style.\n  * Client instances now get their own copy of RESPONSE_CALLBACKS. The new\n      set_response_callback method adds a user defined callback to the instance.\n  * Support Jython, fixing #97. Thanks to Adam Vandenberg for the patch.\n  * Using __getitem__ now properly raises a KeyError when the key is not\n      found. Thanks Ionuț Arțăriși for the patch.\n  * Newer Redis versions return a LOADING message for some commands while\n      the database is loading from disk during server start. This could cause\n      problems with SELECT. We now force a socket disconnection prior to\n      raising a ResponseError so subsequent connections have to reconnect and\n      re-select the appropriate database. Thanks to Benjamin Anderson for\n      finding this and fixing.\n* 2.2.4\n  * WARNING: Potential backwards incompatible change - Changed order of\n      parameters of ZREVRANGEBYSCORE to match those of the actual Redis command.\n      This is only backwards-incompatible if you were passing max and min via\n      keyword args. If passing by normal args, nothing in user code should have\n      to change. Thanks Stéphane Angel for the fix.\n  * Fixed INFO to properly parse the Redis data correctly for both 2.2.x and\n      2.3+. Thanks Stéphane Angel for the fix.\n  * Lock objects now store their timeout value as a float. This allows floats\n      to be used as timeout values. No changes to existing code required.\n  * WATCH now supports multiple keys. Thanks Rich Schumacher.\n  * Broke out some code that was Python 2.4 incompatible. redis-py should\n      now be usable on 2.4, but this hasn't actually been tested. Thanks\n      Dan Colish for the patch.\n  * Optimized some code using izip and islice. Should have a pretty good\n      speed up on larger data sets. Thanks Dan Colish.\n  * Better error handling when submitting an empty mapping to HMSET. Thanks\n      Dan Colish.\n  * Subscription status is now reset after every (re)connection.\n* 2.2.3\n  * Added support for Hiredis. To use, simply \"pip install hiredis\" or\n      \"easy_install hiredis\". Thanks for Pieter Noordhuis for the hiredis-py\n      bindings and the patch to redis-py.\n  * The connection class is chosen based on whether hiredis is installed\n      or not. To force the use of the PythonConnection, simply create\n      your own ConnectionPool instance with the connection_class argument\n      assigned to to PythonConnection class.\n  * Added missing command ZREVRANGEBYSCORE. Thanks Jay Baird for the patch.\n  * The INFO command should be parsed correctly on 2.2.x server versions\n      and is backwards compatible with older versions. Thanks Brett Hoerner.\n* 2.2.2\n  * Fixed a bug in ZREVRANK where retrieving the rank of a value not in\n      the zset would raise an error.\n  * Fixed a bug in Connection.send where the errno import was getting\n      overwritten by a local variable.\n  * Fixed a bug in SLAVEOF when promoting an existing slave to a master.\n  * Reverted change of download URL back to redis-VERSION.tar.gz. 2.2.1's\n      change of this actually broke Pypi for Pip installs. Sorry!\n* 2.2.1\n  * Changed archive name to redis-py-VERSION.tar.gz to not conflict\n      with the Redis server archive.\n* 2.2.0\n  * Implemented SLAVEOF\n  * Implemented CONFIG as config_get and config_set\n  * Implemented GETBIT/SETBIT\n  * Implemented BRPOPLPUSH\n  * Implemented STRLEN\n  * Implemented PERSIST\n  * Implemented SETRANGE\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.6845703125,
          "content": "# Contributing\n\n## Introduction\n\nWe appreciate your interest in considering contributing to redis-py.\nCommunity contributions mean a lot to us.\n\n## Contributions we need\n\nYou may already know how you'd like to contribute, whether it's a fix for a bug you\nencountered, or a new feature your team wants to use.\n\nIf you don't know where to start, consider improving\ndocumentation, bug triaging, and writing tutorials are all examples of\nhelpful contributions that mean less work for you.\n\n## Your First Contribution\n\nUnsure where to begin contributing? You can start by looking through\n[help-wanted\nissues](https://github.com/andymccurdy/redis-py/issues?q=is%3Aopen+is%3Aissue+label%3ahelp-wanted).\n\nNever contributed to open source before? Here are a couple of friendly\ntutorials:\n\n-   <http://makeapullrequest.com/>\n-   <http://www.firsttimersonly.com/>\n\n## Getting Started\n\nHere's how to get started with your code contribution:\n\n1.  Create your own fork of redis-py\n2.  Do the changes in your fork\n3.\n    *Create a virtualenv and install the development dependencies from the dev_requirements.txt file:*\n\n        a.  python -m venv .venv\n        b.  source .venv/bin/activate\n        c.  pip install -r dev_requirements.txt\n        c.  pip install -r requirements.txt\n\n4.  If you need a development environment, run `invoke devenv`. Note: this relies on docker-compose to build environments, and assumes that you have a version supporting [docker profiles](https://docs.docker.com/compose/profiles/).\n5.  While developing, make sure the tests pass by running `invoke tests`\n6.  If you like the change and think the project could use it, send a\n    pull request\n\nTo see what else is part of the automation, run `invoke -l`\n\n## The Development Environment\n\nRunning `invoke devenv` installs the development dependencies specified\nin the dev_requirements.txt. It starts all of the dockers used by this\nproject, and leaves them running. These can be easily cleaned up with\n`invoke clean`. NOTE: it is assumed that the user running these tests,\ncan execute docker and its various commands.\n\n-   A master Redis node\n-   A Redis replica node\n-   Three sentinel Redis nodes\n-   A redis cluster\n-   An stunnel docker, fronting the master Redis node\n\nThe replica node, is a replica of the master node, using the\n[leader-follower replication](https://redis.io/topics/replication)\nfeature.\n\nThe sentinels monitor the master node in a [sentinel high-availability\nconfiguration](https://redis.io/topics/sentinel).\n\n## Testing\n\nCall `invoke tests` to run all tests, or `invoke all-tests` to run linters\ntests as well. With the 'tests' and 'all-tests' targets, all Redis and\nRedisCluster tests will be run.\n\nIt is possible to run only Redis client tests (with cluster mode disabled) by\nusing `invoke standalone-tests`; similarly, RedisCluster tests can be run by using\n`invoke cluster-tests`.\n\nEach run of tests starts and stops the various dockers required. Sometimes\nthings get stuck, an `invoke clean` can help.\n\n## Documentation\n\nIf relevant, update the code documentation, via docstrings, or in `/docs`.\n\nYou can check how the documentation looks locally by running `invoke build-docs`\nand loading the generated HTML files in a browser.\n\nHistorically there is a mix of styles in the docstrings, but the preferred way\nof documenting code is by applying the\n[Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\nType hints should be added according to PEP484, and should not be repeated in\nthe docstrings.\n\n### Docker Tips\n\nFollowing are a few tips that can help you work with the Docker-based\ndevelopment environment.\n\nTo get a bash shell inside of a container:\n\n`$ docker run -it <service> /bin/bash`\n\nContainers run a minimal Debian image that probably lacks tools you want\nto use. To install packages, first get a bash session (see previous tip)\nand then run:\n\n`$ apt update && apt install <package>`\n\nYou can see the logging output of a containers like this:\n\n`$ docker logs -f <service>`\n\n### Troubleshooting\n\nIf you get any errors when running `make dev` or `make test`, make sure\nthat you are using supported versions of Docker.\n\nPlease try at least versions of Docker.\n\n-   Docker 19.03.12\n\n## How to Report a Bug\n\n### Security Vulnerabilities\n\n**NOTE**: If you find a security vulnerability, do NOT open an issue.\nEmail [Redis Open Source (<oss@redis.com>)](mailto:oss@redis.com) instead.\n\nIn order to determine whether you are dealing with a security issue, ask\nyourself these two questions:\n\n-   Can I access something that's not mine, or something I shouldn't\n    have access to?\n-   Can I disable something for other people?\n\nIf the answer to either of those two questions are *yes*, then you're\nprobably dealing with a security issue. Note that even if you answer\n*no*  to both questions, you may still be dealing with a security\nissue, so if you're unsure, just email [us](mailto:oss@redis.com).\n\n### Everything Else\n\nWhen filing an issue, make sure to answer these five questions:\n\n1.  What version of redis-py are you using?\n2.  What version of redis are you using?\n3.  What did you do?\n4.  What did you expect to see?\n5.  What did you see instead?\n\n## Suggest a feature or enhancement\n\nIf you'd like to contribute a new feature, make sure you check our\nissue list to see if someone has already proposed it. Work may already\nbe underway on the feature you want or we may have rejected a\nfeature like it already.\n\nIf you don't see anything, open a new issue that describes the feature\nyou would like and how it should work.\n\n## Code review process\n\nThe core team regularly looks at pull requests. We will provide\nfeedback as soon as possible. After receiving our feedback, please respond\nwithin two weeks. After that time, we may close your PR if it isn't\nshowing any activity.\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.08984375,
          "content": "\nPlease use\n python setup.py install\n\nand report errors to Andy McCurdy (sedrik@gmail.com)\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "MIT License\n\nCopyright (c) 2022-2023, Redis, inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.123046875,
          "content": "include INSTALL\ninclude LICENSE\ninclude README.md\nexclude __pycache__\nrecursive-include tests *\nrecursive-exclude tests *.pyc\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.2578125,
          "content": "# redis-py\n\nThe Python interface to the Redis key-value store.\n\n[![CI](https://github.com/redis/redis-py/workflows/CI/badge.svg?branch=master)](https://github.com/redis/redis-py/actions?query=workflow%3ACI+branch%3Amaster)\n[![docs](https://readthedocs.org/projects/redis/badge/?version=stable&style=flat)](https://redis-py.readthedocs.io/en/stable/)\n[![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](./LICENSE)\n[![pypi](https://badge.fury.io/py/redis.svg)](https://pypi.org/project/redis/)\n[![pre-release](https://img.shields.io/github/v/release/redis/redis-py?include_prereleases&label=latest-prerelease)](https://github.com/redis/redis-py/releases)\n[![codecov](https://codecov.io/gh/redis/redis-py/branch/master/graph/badge.svg?token=yenl5fzxxr)](https://codecov.io/gh/redis/redis-py)\n\n[Installation](#installation) |  [Usage](#usage) | [Advanced Topics](#advanced-topics) | [Contributing](https://github.com/redis/redis-py/blob/master/CONTRIBUTING.md)\n\n---------------------------------------------\n\n**Note: ** redis-py 5.0 will be the last version of redis-py to support Python 3.7, as it has reached [end of life](https://devguide.python.org/versions/). redis-py 5.1 will support Python 3.8+.\n\n---------------------------------------------\n\n## How do I Redis?\n\n[Learn for free at Redis University](https://redis.io/university/)\n\n[Try the Redis Cloud](https://redis.io/try-free/)\n\n[Dive in developer tutorials](https://redis.io/learn)\n\n[Join the Redis community](https://redis.io/community/)\n\n[Work at Redis](https://redis.io/careers/)\n\n## Installation\n\nStart a redis via docker:\n\n``` bash\ndocker run -p 6379:6379 -it redis/redis-stack:latest\n```\n\nTo install redis-py, simply:\n\n``` bash\n$ pip install redis\n```\n\nFor faster performance, install redis with hiredis support, this provides a compiled response parser, and *for most cases* requires zero code changes.\nBy default, if hiredis >= 1.0 is available, redis-py will attempt to use it for response parsing.\n\n``` bash\n$ pip install \"redis[hiredis]\"\n```\n\nLooking for a high-level library to handle object mapping? See [redis-om-python](https://github.com/redis/redis-om-python)!\n\n## Supported Redis Versions\n\nThe most recent version of this library supports redis version [5.0](https://github.com/redis/redis/blob/5.0/00-RELEASENOTES), [6.0](https://github.com/redis/redis/blob/6.0/00-RELEASENOTES), [6.2](https://github.com/redis/redis/blob/6.2/00-RELEASENOTES), [7.0](https://github.com/redis/redis/blob/7.0/00-RELEASENOTES), [7.2](https://github.com/redis/redis/blob/7.2/00-RELEASENOTES) and [7.4](https://github.com/redis/redis/blob/7.4/00-RELEASENOTES).\n\nThe table below highlights version compatibility of the most-recent library versions and redis versions.\n\n| Library version | Supported redis versions |\n|-----------------|-------------------|\n| 3.5.3 | <= 6.2 Family of releases |\n| >= 4.5.0 | Version 5.0 to 7.0 |\n| >= 5.0.0 | Version 5.0 to current |\n\n\n## Usage\n\n### Basic Example\n\n``` python\n>>> import redis\n>>> r = redis.Redis(host='localhost', port=6379, db=0)\n>>> r.set('foo', 'bar')\nTrue\n>>> r.get('foo')\nb'bar'\n```\n\nThe above code connects to localhost on port 6379, sets a value in Redis, and retrieves it. All responses are returned as bytes in Python, to receive decoded strings, set *decode_responses=True*.  For this, and more connection options, see [these examples](https://redis.readthedocs.io/en/stable/examples.html).\n\n\n#### RESP3 Support\nTo enable support for RESP3, ensure you have at least version 5.0 of the client, and change your connection object to include *protocol=3*\n\n``` python\n>>> import redis\n>>> r = redis.Redis(host='localhost', port=6379, db=0, protocol=3)\n```\n\n### Connection Pools\n\nBy default, redis-py uses a connection pool to manage connections. Each instance of a Redis class receives its own connection pool. You can however define your own [redis.ConnectionPool](https://redis.readthedocs.io/en/stable/connections.html#connection-pools).\n\n``` python\n>>> pool = redis.ConnectionPool(host='localhost', port=6379, db=0)\n>>> r = redis.Redis(connection_pool=pool)\n```\n\nAlternatively, you might want to look at [Async connections](https://redis.readthedocs.io/en/stable/examples/asyncio_examples.html), or [Cluster connections](https://redis.readthedocs.io/en/stable/connections.html#cluster-client), or even [Async Cluster connections](https://redis.readthedocs.io/en/stable/connections.html#async-cluster-client).\n\n### Redis Commands\n\nThere is built-in support for all of the [out-of-the-box Redis commands](https://redis.io/commands). They are exposed using the raw Redis command names (`HSET`, `HGETALL`, etc.) except where a word (i.e. del) is reserved by the language. The complete set of commands can be found [here](https://github.com/redis/redis-py/tree/master/redis/commands), or [the documentation](https://redis.readthedocs.io/en/stable/commands.html).\n\n## Advanced Topics\n\nThe [official Redis command documentation](https://redis.io/commands)\ndoes a great job of explaining each command in detail. redis-py attempts\nto adhere to the official command syntax. There are a few exceptions:\n\n-   **MULTI/EXEC**: These are implemented as part of the Pipeline class.\n    The pipeline is wrapped with the MULTI and EXEC statements by\n    default when it is executed, which can be disabled by specifying\n    transaction=False. See more about Pipelines below.\n\n-   **SUBSCRIBE/LISTEN**: Similar to pipelines, PubSub is implemented as\n    a separate class as it places the underlying connection in a state\n    where it can\\'t execute non-pubsub commands. Calling the pubsub\n    method from the Redis client will return a PubSub instance where you\n    can subscribe to channels and listen for messages. You can only call\n    PUBLISH from the Redis client (see [this comment on issue\n    #151](https://github.com/redis/redis-py/issues/151#issuecomment-1545015)\n    for details).\n\nFor more details, please see the documentation on [advanced topics page](https://redis.readthedocs.io/en/stable/advanced_features.html).\n\n### Pipelines\n\nThe following is a basic example of a [Redis pipeline](https://redis.io/docs/manual/pipelining/), a method to optimize round-trip calls, by batching Redis commands, and receiving their results as a list.\n\n\n``` python\n>>> pipe = r.pipeline()\n>>> pipe.set('foo', 5)\n>>> pipe.set('bar', 18.5)\n>>> pipe.set('blee', \"hello world!\")\n>>> pipe.execute()\n[True, True, True]\n```\n\n### PubSub\n\nThe following example shows how to utilize [Redis Pub/Sub](https://redis.io/docs/manual/pubsub/) to subscribe to specific channels.\n\n``` python\n>>> r = redis.Redis(...)\n>>> p = r.pubsub()\n>>> p.subscribe('my-first-channel', 'my-second-channel', ...)\n>>> p.get_message()\n{'pattern': None, 'type': 'subscribe', 'channel': b'my-second-channel', 'data': 1}\n```\n\n\n--------------------------\n\n### Author\n\nredis-py is developed and maintained by [Redis Inc](https://redis.io). It can be found [here](\nhttps://github.com/redis/redis-py), or downloaded from [pypi](https://pypi.org/project/redis/).\n\nSpecial thanks to:\n\n-   Andy McCurdy (<sedrik@gmail.com>) the original author of redis-py.\n-   Ludovico Magnocavallo, author of the original Python Redis client,\n    from which some of the socket code is still used.\n-   Alexander Solovyov for ideas on the generic response callback\n    system.\n-   Paul Hubbard for initial packaging support.\n\n[![Redis](./docs/_static/logo-redis.svg)](https://redis.io)\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.203125,
          "content": "ignore:\n  - \"benchmarks/**\"\n  - \"tasks.py\"\n\ncodecov:\n  require_ci_to_pass: yes\n\ncoverage:\n  precision: 2\n  round: down\n  range: \"80...100\"\n  status:\n    patch: off  # off for now as it yells about everything\n"
        },
        {
          "name": "dev_requirements.txt",
          "type": "blob",
          "size": 0.263671875,
          "content": "black==24.3.0\nclick==8.0.4\nflake8-isort\nflake8\nflynt~=0.69.0\ninvoke==2.2.0\nmock\npackaging>=20.4\npytest\npytest-asyncio>=0.23.0,<0.24.0\npytest-cov\npytest-profiling==1.7.0\npytest-timeout\nujson>=4.2.0\nuvloop\nvulture>=2.3.0\nwheel>=0.30.0\nnumpy>=1.24.0\nredis-entraid==0.1.0b1\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 2.8369140625,
          "content": "---\n\nservices:\n\n  redis:\n    image: ${CLIENT_LIBS_TEST_IMAGE:-redislabs/client-libs-test:7.4.1}\n    container_name: redis-standalone\n    environment:\n      - TLS_ENABLED=yes\n      - REDIS_CLUSTER=no\n      - PORT=6379\n      - TLS_PORT=6666\n    command: ${REDIS_EXTRA_ARGS:---enable-debug-command yes --enable-module-command yes --tls-auth-clients optional --save \"\"}\n    ports:\n      - 6379:6379\n      - 6666:6666 # TLS port\n    volumes:\n      - \"./dockers/standalone:/redis/work\"\n    profiles:\n      - standalone\n      - sentinel\n      - replica\n      - all-stack\n      - all\n\n  replica:\n    image: ${REDIS_IMAGE:-redis:7.4.1}\n    container_name: redis-replica\n    depends_on:\n      - redis\n    command: redis-server --replicaof redis 6379 --protected-mode no --save \"\"\n    ports:\n      - 6380:6379\n    profiles:\n      - replica\n      - all-stack\n      - all\n\n  cluster:\n    image: ${CLIENT_LIBS_TEST_IMAGE:-redislabs/client-libs-test:7.4.1}\n    container_name: redis-cluster\n    environment:\n      - REDIS_CLUSTER=yes\n      - NODES=6\n      - REPLICAS=1\n      - TLS_ENABLED=yes\n      - PORT=16379\n      - TLS_PORT=27379\n    command: ${REDIS_EXTRA_ARGS:---enable-debug-command yes --enable-module-command yes --tls-auth-clients optional --save \"\"}\n    ports:\n      - \"16379-16384:16379-16384\"\n      - \"27379-27384:27379-27384\"\n    volumes:\n      - \"./dockers/cluster:/redis/work\"\n    profiles:\n      - cluster\n      - all-stack\n      - all\n\n  sentinel:\n    image: ${REDIS_IMAGE:-redis:7.4.1}\n    container_name: redis-sentinel\n    depends_on:\n      - redis\n    entrypoint: \"redis-sentinel /redis.conf --port 26379\"\n    ports:\n      - 26379:26379\n    volumes:\n      - \"./dockers/sentinel.conf:/redis.conf\"\n    profiles:\n      - sentinel\n      - all-stack\n      - all\n\n  sentinel2:\n    image: ${REDIS_IMAGE:-redis:7.4.1}\n    container_name: redis-sentinel2\n    depends_on:\n      - redis\n    entrypoint: \"redis-sentinel /redis.conf --port 26380\"\n    ports:\n      - 26380:26380\n    volumes:\n      - \"./dockers/sentinel.conf:/redis.conf\"\n    profiles:\n      - sentinel\n      - all-stack\n      - all\n\n  sentinel3:\n    image: ${REDIS_IMAGE:-redis:7.4.1}\n    container_name: redis-sentinel3\n    depends_on:\n      - redis\n    entrypoint: \"redis-sentinel /redis.conf --port 26381\"\n    ports:\n      - 26381:26381\n    volumes:\n      - \"./dockers/sentinel.conf:/redis.conf\"\n    profiles:\n      - sentinel\n      - all-stack\n      - all\n\n  redis-stack:\n    image: ${REDIS_STACK_IMAGE:-redis/redis-stack-server:edge}\n    container_name: redis-stack\n    ports:\n      - 6479:6379\n    environment:\n      - \"REDIS_ARGS=${REDIS_STACK_EXTRA_ARGS:---enable-debug-command yes --enable-module-command yes --save ''}\"\n    profiles:\n      - standalone\n      - all-stack\n\n  redis-stack-graph:\n    image: redis/redis-stack-server:6.2.6-v15\n    container_name: redis-stack-graph\n    ports:\n      - 6480:6379\n    profiles:\n      - graph\n"
        },
        {
          "name": "dockers",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "doctests",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.7744140625,
          "content": "[pytest]\naddopts = -s\nmarkers =\n    redismod: run only the redis module tests\n    graph: run only the redisgraph tests\n    pipeline: pipeline tests\n    onlycluster: marks tests to be run only with cluster mode redis\n    onlynoncluster: marks tests to be run only with standalone redis\n    ssl: marker for only the ssl tests\n    asyncio: marker for async tests\n    replica: replica tests\n    experimental: run only experimental tests\n    cp_integration: credential provider integration tests\nasyncio_mode = auto\ntimeout = 30\nfilterwarnings =\n    always\n    ignore:RedisGraph support is deprecated as of Redis Stack 7.2:DeprecationWarning\n    # Ignore a coverage warning when COVERAGE_CORE=sysmon for Pythons < 3.12.\n    ignore:sys.monitoring isn't available:coverage.exceptions.CoverageWarning\n"
        },
        {
          "name": "redis",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0322265625,
          "content": "async-timeout>=4.0.3\nPyJWT~=2.9.0"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.259765625,
          "content": "#!/usr/bin/env python\nfrom setuptools import find_packages, setup\n\nsetup(\n    name=\"redis\",\n    description=\"Python client for Redis database and key-value store\",\n    long_description=open(\"README.md\").read().strip(),\n    long_description_content_type=\"text/markdown\",\n    keywords=[\"Redis\", \"key-value store\", \"database\"],\n    license=\"MIT\",\n    version=\"5.1.1\",\n    packages=find_packages(\n        include=[\n            \"redis\",\n            \"redis._parsers\",\n            \"redis.asyncio\",\n            \"redis.auth\",\n            \"redis.commands\",\n            \"redis.commands.bf\",\n            \"redis.commands.json\",\n            \"redis.commands.search\",\n            \"redis.commands.timeseries\",\n            \"redis.commands.graph\",\n            \"redis.parsers\",\n        ]\n    ),\n    package_data={\"redis\": [\"py.typed\"]},\n    include_package_data=True,\n    url=\"https://github.com/redis/redis-py\",\n    project_urls={\n        \"Documentation\": \"https://redis.readthedocs.io/en/latest/\",\n        \"Changes\": \"https://github.com/redis/redis-py/releases\",\n        \"Code\": \"https://github.com/redis/redis-py\",\n        \"Issue tracker\": \"https://github.com/redis/redis-py/issues\",\n    },\n    author=\"Redis Inc.\",\n    author_email=\"oss@redis.com\",\n    python_requires=\">=3.8\",\n    install_requires=[\n        'async-timeout>=4.0.3; python_full_version<\"3.11.3\"',\n        \"PyJWT~=2.9.0\",\n    ],\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n    ],\n    extras_require={\n        \"hiredis\": [\"hiredis>=3.0.0\"],\n        \"ocsp\": [\"cryptography>=36.0.1\", \"pyopenssl==23.2.1\", \"requests>=2.31.0\"],\n    },\n)\n"
        },
        {
          "name": "tasks.py",
          "type": "blob",
          "size": 3.4140625,
          "content": "# https://github.com/pyinvoke/invoke/issues/833\nimport inspect\nimport os\nimport shutil\n\nfrom invoke import run, task\n\nif not hasattr(inspect, \"getargspec\"):\n    inspect.getargspec = inspect.getfullargspec\n\n\n@task\ndef devenv(c, endpoints=\"all\"):\n    \"\"\"Brings up the test environment, by wrapping docker compose.\"\"\"\n    clean(c)\n    cmd = f\"docker compose --profile {endpoints} up -d --build\"\n    run(cmd)\n\n\n@task\ndef build_docs(c):\n    \"\"\"Generates the sphinx documentation.\"\"\"\n    run(\"pip install -r docs/requirements.txt\")\n    run(\"make -C docs html\")\n\n\n@task\ndef linters(c):\n    \"\"\"Run code linters\"\"\"\n    run(\"flake8 tests redis\")\n    run(\"black --target-version py37 --check --diff tests redis\")\n    run(\"isort --check-only --diff tests redis\")\n    run(\"vulture redis whitelist.py --min-confidence 80\")\n    run(\"flynt --fail-on-change --dry-run tests redis\")\n\n\n@task\ndef all_tests(c):\n    \"\"\"Run all linters, and tests in redis-py.\"\"\"\n    linters(c)\n    tests(c)\n\n\n@task\ndef tests(c, uvloop=False, protocol=2, profile=False):\n    \"\"\"Run the redis-py test suite against the current python.\"\"\"\n    print(\"Starting Redis tests\")\n    standalone_tests(c, uvloop=uvloop, protocol=protocol, profile=profile)\n    cluster_tests(c, uvloop=uvloop, protocol=protocol, profile=profile)\n\n\n@task\ndef standalone_tests(\n    c, uvloop=False, protocol=2, profile=False, redis_mod_url=None, extra_markers=\"\"\n):\n    \"\"\"Run tests against a standalone redis instance\"\"\"\n    profile_arg = \"--profile\" if profile else \"\"\n    redis_mod_url = f\"--redis-mod-url={redis_mod_url}\" if redis_mod_url else \"\"\n    extra_markers = f\" and {extra_markers}\" if extra_markers else \"\"\n\n    if uvloop:\n        run(\n            f\"pytest {profile_arg} --protocol={protocol} {redis_mod_url} --cov=./ --cov-report=xml:coverage_resp{protocol}_uvloop.xml -m 'not onlycluster and not graph{extra_markers}' --uvloop --junit-xml=standalone-resp{protocol}-uvloop-results.xml\"\n        )\n    else:\n        run(\n            f\"pytest {profile_arg} --protocol={protocol} {redis_mod_url} --cov=./ --cov-report=xml:coverage_resp{protocol}.xml -m 'not onlycluster and not graph{extra_markers}' --junit-xml=standalone-resp{protocol}-results.xml\"\n        )\n\n\n@task\ndef cluster_tests(c, uvloop=False, protocol=2, profile=False):\n    \"\"\"Run tests against a redis cluster\"\"\"\n    profile_arg = \"--profile\" if profile else \"\"\n    cluster_url = \"redis://localhost:16379/0\"\n    cluster_tls_url = \"rediss://localhost:27379/0\"\n    if uvloop:\n        run(\n            f\"pytest {profile_arg} --protocol={protocol} --cov=./ --cov-report=xml:coverage_cluster_resp{protocol}_uvloop.xml -m 'not onlynoncluster and not redismod and not graph' --redis-url={cluster_url} --redis-ssl-url={cluster_tls_url} --junit-xml=cluster-resp{protocol}-uvloop-results.xml --uvloop\"\n        )\n    else:\n        run(\n            f\"pytest  {profile_arg} --protocol={protocol} --cov=./ --cov-report=xml:coverage_cluster_resp{protocol}.xml -m 'not onlynoncluster and not redismod and not graph' --redis-url={cluster_url} --redis-ssl-url={cluster_tls_url} --junit-xml=cluster-resp{protocol}-results.xml\"\n        )\n\n\n@task\ndef clean(c):\n    \"\"\"Stop all dockers, and clean up the built binaries, if generated.\"\"\"\n    if os.path.isdir(\"build\"):\n        shutil.rmtree(\"build\")\n    if os.path.isdir(\"dist\"):\n        shutil.rmtree(\"dist\")\n    run(\"docker compose --profile all rm -s -f\")\n\n\n@task\ndef package(c):\n    \"\"\"Create the python packages\"\"\"\n    run(\"python setup.py sdist bdist_wheel\")\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        },
        {
          "name": "whitelist.py",
          "type": "blob",
          "size": 1.41015625,
          "content": "exc_type  # unused variable (/data/repos/redis/redis-py/redis/client.py:1045)\nexc_value  # unused variable (/data/repos/redis/redis-py/redis/client.py:1045)\ntraceback  # unused variable (/data/repos/redis/redis-py/redis/client.py:1045)\nexc_type  # unused variable (/data/repos/redis/redis-py/redis/client.py:1211)\nexc_value  # unused variable (/data/repos/redis/redis-py/redis/client.py:1211)\ntraceback  # unused variable (/data/repos/redis/redis-py/redis/client.py:1211)\nexc_type  # unused variable (/data/repos/redis/redis-py/redis/client.py:1589)\nexc_value  # unused variable (/data/repos/redis/redis-py/redis/client.py:1589)\ntraceback  # unused variable (/data/repos/redis/redis-py/redis/client.py:1589)\nexc_type  # unused variable (/data/repos/redis/redis-py/redis/lock.py:156)\nexc_value  # unused variable (/data/repos/redis/redis-py/redis/lock.py:156)\ntraceback  # unused variable (/data/repos/redis/redis-py/redis/lock.py:156)\nexc_type  # unused variable (/data/repos/redis/redis-py/redis/asyncio/utils.py:26)\nexc_value  # unused variable (/data/repos/redis/redis-py/redis/asyncio/utils.py:26)\ntraceback  # unused variable (/data/repos/redis/redis-py/redis/asyncio/utils.py:26)\nAsyncConnectionPool  # unused import (//data/repos/redis/redis-py/redis/typing.py:9)\nAsyncRedis  # unused import (//data/repos/redis/redis-py/redis/commands/core.py:49)\nTargetNodesT  # unused import (//data/repos/redis/redis-py/redis/commands/cluster.py:46)\n"
        }
      ]
    }
  ]
}