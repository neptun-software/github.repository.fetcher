{
  "metadata": {
    "timestamp": 1736561271115,
    "page": 265,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SFTtech/openage",
      "stars": 12851,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.71875,
          "content": "﻿---\n# SFT codestyle\n# Tab indent + space alignment\n# see documentation in doc/code_style/ for details and explainations.\nLanguage:        Cpp\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignArrayOfStructures: None\nAlignConsecutiveAssignments: false\nAlignConsecutiveBitFields: false\nAlignConsecutiveDeclarations: false\nAlignConsecutiveMacros: false\nAlignEscapedNewlines: DontAlign\nAlignOperands:   Align\nAlignTrailingComments: true\nAllowAllArgumentsOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortEnumsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLambdasOnASingleLine: All\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: false\nBinPackParameters: false\nBraceWrapping:\n  AfterCaseLabel:  false\n  AfterClass:      false\n  AfterControlStatement: Never\n  AfterEnum:       false\n  AfterExternBlock: false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     true\n  BeforeElse:      true\n  BeforeLambdaBody: false\n  BeforeWhile:     true\n  IndentBraces:    false\n  SplitEmptyFunction: false\n  SplitEmptyNamespace: false\n  SplitEmptyRecord: false\nBreakAfterJavaFieldAnnotations: true\nBreakBeforeBinaryOperators: NonAssignment\nBreakBeforeBraces: Custom\nBreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: false\nBreakConstructorInitializers: AfterColon\nBreakInheritanceList: BeforeComma\nBreakStringLiterals: false\nColumnLimit:     0\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDeriveLineEnding: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeBlocks:   Preserve\nIncludeCategories:\n  - Regex:           '.*'\n    Priority:        3\n    SortPriority:    0\nIncludeIsMainRegex: ''\nIncludeIsMainSourceRegex: ''\nIndentCaseBlocks: false\nIndentCaseLabels: false\nIndentExternBlock: NoIndent\nIndentGotoLabels: false\nIndentPPDirectives: BeforeHash\nIndentWidth:     4\nIndentWrappedFunctionNames: false\n# clang-format-16 InsertNewlineAtEOF: true\nInsertTrailingCommas: Wrapped\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 2\nNamespaceIndentation: None\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Right\nReflowComments: true\nSortIncludes:    CaseInsensitive\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceBeforeSquareBrackets: false\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  Never\nSpacesInCStyleCastParentheses: false\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Latest\nTabWidth:        4\nUseCRLF:         false\nUseTab:          AlignWithSpaces\n...\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7861328125,
          "content": "# editor-specific files\n\\#*\n.#*\n*~\n.*.swp\n/CMakeLists.txt.user\n*.temp\n\n# ELF files\n*.o\n*.a\n*.so\n\n# python bytecode\n*.pyc\n*.pyo\n__pycache__\n*.pyd\n\n# MSVC files\n*.pdb\n*.dll\n*.exe\n\n# workflow\n*.orig\n/TODO.org\n\n# build system\n/bin\n/.bin\n/build\n/deps\n/.ccls-cache\n/.cache\n\n# root dir run script\n/run\n/run.cpp\n/run.html\n\n# CMake in-source builds\n/DartConfiguration.tcl\n/codegen_depend_cache\n/codegen_target_cache\n/Doxyfile\n/Testing\n/py/setup.py\nCTestTestfile.cmake\nCMakeFiles\ncmake_install.cmake\nCMakeCache.txt\nMakefile\n!/Makefile\n\n# debugging\ncallgrind.out.*\nperf.data*\n.gdb_history\n\n# code search\n/.ignore\n/.globalrc\n/GPATH\n/GRTAGS\n/GTAGS\n\n# IDEs\n.vscode\n.idea\n\n# CMake + ccls\n/compile_commands.json\n\n# Virtual Environments\n/.venv/\n\n# macOS\n.DS_Store\n\n# copyrighted assets\n/assets/converted/\n/assets/terrain/\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 1.220703125,
          "content": "Michael Enßlin <michael@ensslin.cc>\nJonas Jelten <jj@sft.lol> <jonas.jelten@gmail.com>\nJonas Jelten <jj@sft.lol> <jelten@in.tum.de>\nJonas Jelten <jj@sft.lol> <jj@sft.mx>\nRenée Kooi <renee@kooi.me> <renekooi@outlook.com>\nRenée Kooi <renee@kooi.me> <rene@kooi.me>\nIngo Saftbaumer <?> <matthias@bogad.at>\nIngo Saftbaumer <?> <matthias.bogad@tum.de>\nJames Mintram <jamesmintram@gmail.com> <james@lemonmoosegames.com>\nSam Schetterer <samschet@gmail.com> <schets@users.noreply.github.com>\nJimmy Berry <jimmy@boombatower.com>\nJonathan Remnant <jono4728@gmail.com>\nHenry Snoek <?> <snoek09@users.noreply.github.com>\ncoop shell (Michael Enßlin, Jonas Jelten, Andre Kupka) <coop@sft.mx>\nFranz-Niclas Muschter <fm@stusta.net> <franz-niclas.muschter@stusta.net>\nNiklas Fiekas <niklas.fiekas@backscattering.de> <niklas.fiekas@tu-clausthal.de>\nWojciech Nawrocki <wjnawrocki@protonmail.com> <wjnawrocki+gh@protonmail.com>\nSimon San <?> <14062932+simonsan@users.noreply.github.com>\nTobias Feldballe <tobias@osandweb.dk> <tobi.fp@gmail.com>\nTobias Feldballe <tobias@osandweb.dk> <tf@jumpstory.com>\nJonas Borchelt <jonas.borchelt@connected.link>\nDerek Frogget <fro22003@byui.edu> <114030121+derekfrogget@users.noreply.github.com>\nNikhil Ghosh <nghosh606@gmail.com>"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 7.796875,
          "content": "# Copyright 2013-2023 the openage authors. See copying.md for legal info.\n\n# >=3.16 finding numpy with the findpython3 module\ncmake_minimum_required(VERSION 3.16)\n\n\n# main build configuration file\n\n# text art: figlet -f rounded \"[SFT] openage\" | sed -e 's/\\\\/\\\\\\\\/g'\nmessage(\"\n\n ___  ______ _______ _______ ___\n|  _)/ _____|_______|_______|_  |\n| | ( (____  _____      _     | |    ___  ____  _____ ____  _____  ____ _____\n| |  \\\\____ \\\\|  ___)    | |    | |   / _ \\\\|  _ \\\\| ___ |  _ \\\\(____ |/ _  | ___ |\n| |_ _____) ) |        | |   _| |  | |_| | |_| | ____| | | / ___ ( (_| | ____|\n|___|______/|_|        |_|  (___|   \\\\___/|  __/|_____)_| |_\\\\_____|\\\\___ |_____)\n                                         |_|                     (_____|\n\nWelcome to the SFT technologies computer-aided openage build system!\n\nYou have chosen, or been chosen, to attempt the daring task of building openage.\nIf you have installed all the dependencies that are conveniently listed in\n[doc/building.md], this _might_ just work!\n\nIf it doesn't, consider reporting the issue, or ask for help:\n  * GitHub: https://github.com/SFTtech/openage\n  * Matrix: #sfttech:matrix.org\n\")\n\n\n##################################################\n# main buildsystem setup entry point\nproject(openage CXX)\n\n# C++ standard requirement\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# Python and Cython requirements\nset(PYTHON_MIN_VERSION 3.9)\nset(CYTHON_MIN_VERSION 0.29.31)\n\n# CMake policies\nforeach(pol\n        CMP0074  # use <pkg>_ROOT vars in find_package()\n        CMP0067  # honor language standard in try_compile()\n        CMP0071  # enable automoc for generated files\n        CMP0072  # prefers GLVND by default FindOpenGL\n        CMP0048  # project() command manages VERSION variables\n        CMP0094  # take the first satisfying Python version\n        CMP0082  # run add_subdirectory() in the declaration order\n        CMP0102  # Don't create empty cache entries\n       )\n\tif (POLICY ${pol})\n\t\tcmake_policy(SET ${pol} NEW)\n\tendif()\nendforeach()\n\n# don't print 'Built target ...' messages\n# upstream since cmake v3.4.0-rc1 (by commit 1d3984780df8)\nset_property(GLOBAL PROPERTY TARGET_MESSAGES OFF)\n\n# Ensure CMAKE_BUILD_TYPE is set correctly.\nif(NOT CMAKE_BUILD_TYPE)\n\tset(CMAKE_BUILD_TYPE \"Debug\")\nendif()\nstring(TOUPPER \"CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}\" BUILD_TYPE_CXX_FLAGS)\n\n\n##################################################\n# options: keep up to date with those in ./configure!\nif(NOT DEFINED WANT_BACKTRACE)\n\tset(WANT_BACKTRACE if_available)\nendif()\n\nif(NOT DEFINED WANT_INOTIFY)\n\tset(WANT_INOTIFY if_available)\nendif()\n\nif(NOT DEFINED WANT_OPENGL)\n\tset(WANT_OPENGL if_available)\nendif()\n\nif(NOT DEFINED WANT_VULKAN)\n\tset(WANT_VULKAN if_available)\nendif()\n\nif(NOT DEFINED WANT_GPERFTOOLS_PROFILER)\n\tset(WANT_GPERFTOOLS_PROFILER if_available)\nendif()\n\nif(NOT DEFINED WANT_GPERFTOOLS_TCMALLOC)\n\tset(WANT_GPERFTOOLS_TCMALLOC false)\nendif()\n\nif(NOT DEFINED WANT_NCURSES)\n\tset(WANT_NCURSES if_available)\nendif()\n\nif(NOT DEFINED WANT_IWYU)\n\tset(WANT_IWYU false)\nendif()\n\n##################################################\n# static content filesystem locations\nif(NOT DEFINED GLOBAL_ASSET_DIR)\n\tset(ASSET_DIR \"share/openage\")\n\tif(MSVC)\n\t\tset(GLOBAL_ASSET_DIR \"${ASSET_DIR}\")\n\telse()\n\t\tset(GLOBAL_ASSET_DIR \"${CMAKE_INSTALL_PREFIX}/${ASSET_DIR}\")\n\tendif()\nendif()\n\nif(NOT DEFINED GLOBAL_CONFIG_DIR)\n\tset(CONFIG_DIR \"etc/openage\")\n\tif(MSVC)\n\t\tset(GLOBAL_CONFIG_DIR \"${CONFIG_DIR}\")\n\telse()\n\t\tset(GLOBAL_CONFIG_DIR \"${CMAKE_INSTALL_PREFIX}/${CONFIG_DIR}\")\n\tendif()\nendif()\n\n\n##################################################\n# ccache setup\n\n# distros can also do this but they don't use this mechanism\noption(ENABLE_CCACHE \"prefix each compile command with ccache\")\n\nif(ENABLE_CCACHE)\n\tfind_program(CCACHE_FOUND \"ccache\")\n\n\tif(CCACHE_FOUND)\n\t\tset_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)\n\t\tset_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)\n\telse()\n\t\tmessage(FATAL_ERROR \"ccache not found, but you requested it\")\n\tendif(CCACHE_FOUND)\nendif()\n\n\n##################################################\n# clang tidy static analysis\noption(\n\tENABLE_CLANG_TIDY\n\t\"activate clang tidy messages\"\n\tOFF\n)\nif(ENABLE_CLANG_TIDY)\n\tset(CMAKE_CXX_CLANG_TIDY \"clang-tidy;-checks=-*,readability-*\")\nendif()\n\n\n# option processing is now done.\n\n##################################################\n# include buildsystem features\n\n# add search paths to helper modules\nset(BUILDSYSTEM_DIR \"${CMAKE_SOURCE_DIR}/buildsystem\")\nset(CMAKE_MODULE_PATH \"${BUILDSYSTEM_DIR}\" \"${BUILDSYSTEM_DIR}/modules/\")\n\n# prioritize macOS frameworks since they're probably newer\n# than the system libraries\nset(CMAKE_FIND_FRAMEWORK LAST)\nset(CMAKE_FIND_APPBUNDLE LAST)\n\n# load helper modules\ninclude(GNUInstallDirs)\ninclude(CheckInSourceBuild)\ninclude(HandleCXXOptions)\ninclude(CheckCompilerFeatures)\ninclude(CMakeParseArguments)\ninclude(HandlePythonOptions)\ninclude(CheckRuntimeDependencies)\ninclude(DetectProjectVersion)\ninclude(DependencyFetch)\ninclude(FindPackageHandleStandardArgs)\n\n# include build configuration modules\ninclude(CTest)\n\n# initialize language support\ninclude(codegen)\ninclude(cpp)\ninclude(doxygen)\ninclude(options)\ninclude(python)\ninclude(util)\n\n\n# now that all modules and settings are loaded,\n# apply those to the project.\n\n\n##################################################\n# set project version\nif(USED_GIT_VERSION)\n\t# VERSION_FULL_STRING is the full git describe\n\tset(VERSION_FULL_STRING \"${PROJECT_VERSION}\")\n\t# PROJECT_VERSION is MAJOR.MINOR.PATCH.TWEAK with Commit-Count as Tweak\n\tSTRING(REGEX REPLACE \"v(([0-9]+.|[0-9]+)+)-([0-9]+)-g([a-f0-9]+)\"\n\t\t\t\"\\\\1.\\\\3\" PROJECT_VERSION \"${VERSION_FULL_STRING}\")\nendif()\nproject(openage VERSION \"${PROJECT_VERSION}\")\n\n# set CI version\nif(DEFINED ENV{CI_CFG_VERSION})\n    set(CI_CFG_VERSION \"$ENV{CI_CFG_VERSION}\")\nelse()\n    set(CI_CFG_VERSION \"NOT SET\")\nendif()\n\n\n##################################################\n# documentation generation\n\n# create documentation\ndoxygen_configure(libopenage/ openage/ doc/ README.md)\n\n\n##################################################\n# static content\nadd_subdirectory(assets/)\nadd_subdirectory(dist/)\nadd_subdirectory(cfg/)\n\n\n##################################################\n# C++ content\nadd_subdirectory(libopenage/)\n\n\n##################################################\n# Python content (uses the C++ library)\n\n# create a virtual library that, when linked to,\n# injects a header inclusion, and links to libopenage.\n# -> all cython modules get our hacks included and link to libopenage.\nadd_library(pyext_libopenage INTERFACE)\nif(MSVC)\n\tset(FORCE_INCLUDE_CXXFLAG \"/FI\")\nelse()\n\tset(FORCE_INCLUDE_CXXFLAG \"-include\")\nendif()\ntarget_compile_options(pyext_libopenage INTERFACE\n\t${FORCE_INCLUDE_CXXFLAG} \"${CMAKE_SOURCE_DIR}/libopenage/pyinterface/hacks.h\"\n)\ntarget_link_libraries(pyext_libopenage INTERFACE libopenage)\nset(PYEXT_LINK_LIBRARY pyext_libopenage)\n\nconfigure_file(run.py.in run.py)\nadd_cython_modules(EMBED NOINSTALL ${CMAKE_CURRENT_BINARY_DIR}/run.py)\nadd_py_modules(BININSTALL ${CMAKE_CURRENT_BINARY_DIR}/run.py AS openage)\nadd_subdirectory(openage/)\n\npython_finalize()\n\n\n##################################################\n# packaging.\n\n# Ensure that packaging is always the last step.\nadd_subdirectory(packaging)\n\n\n##################################################\n# show build configuration overview\n\nmessage(\"\")\nprint_config_options()\n\nmessage(\"${PROJECT_NAME} ${PROJECT_VERSION}\n\n   version string | ${VERSION_FULL_STRING}\n         compiler | ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}\n           python | ${PYTHON_VERSION_STRING}\n       build type | ${CMAKE_BUILD_TYPE}\n         cxxflags | ${CMAKE_CXX_FLAGS} ${EXTRA_FLAGS}\n build type flags | ${${BUILD_TYPE_CXX_FLAGS}}\n        build dir | ${CMAKE_BINARY_DIR}\n   install prefix | ${CMAKE_INSTALL_PREFIX}\npy install prefix | ${CMAKE_PY_INSTALL_PREFIX}\n\")\n\n##################################################\n# done! that was easy, right?\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 5.5322265625,
          "content": "# type 'make help' for a list/explaination of recipes.\n\nBUILDDIR = bin\n\nMAKEARGS += $(if $(VERBOSE),,--no-print-directory)\n\n.PHONY: default\ndefault: build\n\n.PHONY: all\nall: default\n\n$(BUILDDIR):\n\t@echo \"call ./configure to initialize the build directory.\"\n\t@echo \"also see ./configure --help, and doc/building.md\"\n\t@echo \"\"\n\t@false\n\n.PHONY: install\ninstall: $(BUILDDIR)\n\t$(MAKE) $(MAKEARGS) -C $(BUILDDIR) install\n\n.PHONY: run\nrun: build\n\tcd $(BUILDDIR) && ./run main\n\n.PHONY: test\ntest: tests checkfast\n\n.PHONY: tests\ntests: build\n\tcd $(BUILDDIR) && ./run test -a\n\n.PHONY: build\nbuild: $(BUILDDIR)\n\t@$(MAKE) $(MAKEARGS) -C $(BUILDDIR)\n\n.PHONY: ninja\nninja: $(BUILDDIR)\n\t@ninja -C $(BUILDDIR)\n\n.PHONY: libopenage\nlibopenage: $(BUILDDIR)\n\t@$(MAKE) $(MAKEARGS) -C $(BUILDDIR) libopenage\n\n.PHONY: codegen\ncodegen: $(BUILDDIR)\n\t$(MAKE) $(MAKEARGS) -C $(BUILDDIR) codegen\n\n.PHONY: pxdgen\npxdgen: $(BUILDDIR)\n\t$(MAKE) $(MAKEARGS) -C $(BUILDDIR) pxdgen\n\n.PHONY: compilepy\ncompilepy: $(BUILDDIR)\n\t$(MAKE) $(MAKEARGS) -C $(BUILDDIR) compilepy\n\n.PHONY: inplacemodules\ninplacemodules:\n\t$(MAKE) $(MAKEARGS) -C $(BUILDDIR) inplacemodules\n\n.PHONY: cythonize\ncythonize: $(BUILDDIR)\n\t$(MAKE) $(MAKEARGS) -C $(BUILDDIR) cythonize\n\n.PHONY: doc\ndoc: $(BUILDDIR)\n\t$(MAKE) $(MAKEARGS) -C $(BUILDDIR) doc\n\n.PHONY: cleanelf\ncleanelf: $(BUILDDIR)\n\t@# removes all object files and binaries\n\t$(MAKE) $(MAKEARGS) -C $(BUILDDIR) clean\n\n.PHONY: cleancodegen\ncleancodegen: $(BUILDDIR)\n\t@# removes all sourcefiles created by codegen\n\t$(MAKE) $(MAKEARGS) -C $(BUILDDIR) cleancodegen\n\n.PHONY: cleanpxdgen\ncleanpxdgen: $(BUILDDIR)\n\t@# removes all generated .pxd files\n\t$(MAKE) $(MAKEARGS) -C $(BUILDDIR) cleanpxdgen\n\n.PHONY: cleancython\ncleancython: $(BUILDDIR)\n\t@# removes all .cpp files created by Cython\n\t$(MAKE) $(MAKEARGS) -C $(BUILDDIR) cleancython\n\n.PHONY: clean\nclean: $(BUILDDIR) cleancodegen cleanpxdgen cleancython cleanelf\n\t@# removes object files, binaries, py modules, generated code\n\n.PHONY: cleaninsourcebuild\ncleaninsourcebuild:\n\t@echo \"cleaning remains of in-source builds\"\n\trm -rf DartConfiguration.tcl codegen_depend_cache codegen_target_cache Doxyfile Testing\n\t@find . -not -path \"./.bin/*\" -type f -name CTestTestfile.cmake              -print -delete\n\t@find . -not -path \"./.bin/*\" -type f -name cmake_install.cmake              -print -delete\n\t@find . -not -path \"./.bin/*\" -type f -name CMakeCache.txt                   -print -delete\n\t@find . -not -path \"./.bin/*\" -type f -name Makefile -not -path \"./Makefile\" -print -delete\n\t@find . -not -path \"./.bin/*\" -type d -name CMakeFiles                       -print -exec rm -r {} +\n\n.PHONY: cleanbuilddirs\ncleanbuilddirs: cleaninsourcebuild\n\t@if test -d bin; then $(MAKE) $(MAKEARGS) -C bin clean cleancython cleanpxdgen cleancodegen || true; fi\n\t@echo cleaning symlinks to build directories\n\trm -f bin\n\t@echo cleaning build directories\n\trm -rf .bin\n\t@echo cleaning cmake-time generated code\n\trm -f Doxyfile py/openage/config.py libopenage/config.h libopenage/config.cpp\n\n.PHONY: mrproper\nmrproper: cleanbuilddirs\n\t@echo cleaning converted assets\n\trm -rf userassets\n\n.PHONY: mrproperer\nmrproperer: mrproper\n\t@if ! test -d .git; then echo \"mrproperer is only available for gitrepos.\"; false; fi\n\t@echo removing ANYTHING that is not checked into the git repo\n\t@echo ENTER to confirm\n\t@read val\n\tgit clean -x -d -f\n\n.PHONY: checkfast\ncheckfast:\n\tpython3 -m buildsystem.codecompliance --fast\n\n.PHONY: checkall\ncheckall:\n\tpython3 -m buildsystem.codecompliance --all\n\n.PHONY: checkchanged\ncheckchanged:\n\tpython3 -m buildsystem.codecompliance --all --only-changed-files=origin/master\n\n.PHONY: checkuncommited\ncheckuncommited:\n\tpython3 -m buildsystem.codecompliance --all --only-changed-files=HEAD\n\n.PHONY: checkpy\ncheckpy:\n\tpython3 -m buildsystem.codecompliance --pystyle --pylint\n\n.PHONY: help\nhelp: $(BUILDDIR)/Makefile\n\t@echo \"openage Makefile\"\n\t@echo \"\"\n\t@echo \"wrapper that mostly forwards recipes to the cmake-generated Makefile in bin/\"\n\t@echo \"\"\n\t@echo \"targets:\"\n\t@echo \"\"\n\t@echo \"build              -> build entire project\"\n\t@echo \"libopenage         -> build libopenage\"\n\t@echo \"pxdgen             -> generate .pxd files\"\n\t@echo \"cythonize          -> compile .pyx files to .cpp\"\n\t@echo \"compilepy          -> compile .py files to .pyc\"\n\t@echo \"inplacemodules     -> create in-place modules\"\n\t@echo \"codegen            -> generate cpp sources\"\n\t@echo \"doc                -> create documentation files\"\n\t@echo \"\"\n\t@echo \"cleanelf           -> remove C++ ELF files\"\n\t@echo \"cleancodegen       -> undo 'make codegen'\"\n\t@echo \"cleancython        -> undo 'make cythonize inplacemodules'\"\n\t@echo \"cleanpxdgen        -> undo 'make pxdgen'\"\n\t@echo \"clean              -> undo 'make' (all of the above)\"\n\t@echo \"cleanbuilddirs     -> undo 'make' and './configure'\"\n\t@echo \"cleaninsourcebuild -> undo in-source build accidents\"\n\t@echo \"mrproper           -> as above, but additionally delete user assets\"\n\t@echo \"mrproperer         -> leaves nothing but ashes\"\n\t@echo \"\"\n\t@echo \"run                -> run openage\"\n\t@echo \"tests              -> run the tests (py + cpp)\"\n\t@echo \"\"\n\t@echo \"checkall           -> full code compliance check\"\n\t@echo \"checkfast          -> fast checks only\"\n\t@echo \"checkchanged       -> full check for all files changed since origin/master\"\n\t@echo \"checkuncommited    -> full check for all currently uncommited files\"\n\t@echo \"checkpy            -> check python compliance\"\n\t@echo \"\"\n\t@echo \"test               -> tests + checkfast. this is what you should use for regular devbuilds\"\n\t@echo \"\"\n\t@echo \"CMake help:\"\n\t@test -d $(BUILDDIR) && $(MAKE) -C $(BUILDDIR) help || echo \"no builddir is configured\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.591796875,
          "content": "[![openage](/assets/logo/banner.svg)](http://openage.dev)\n=========================================================\n\n**openage**: a volunteer project to create a free engine clone of the *Genie Engine* used by *Age of Empires*, *Age of Empires II (HD)* and *Star Wars: Galactic Battlegrounds*, comparable to projects like [OpenMW](https://openmw.org/), [OpenRA](http://openra.net/),  [OpenSAGE](https://github.com/OpenSAGE/OpenSAGE/), [OpenTTD](https://openttd.org/) and [OpenRCT2](https://openrct2.org/).\n\nopenage uses the original game assets (such as sounds and graphics), but (for obvious reasons) doesn't ship them.\nTo play, you require *[any of the original games (AoE1, AoE2)](/doc/media_convert.md)* or their *Definitive Edition* releases.\n\n[![github stars](https://img.shields.io/github/stars/SFTtech/openage.svg)](https://github.com/SFTtech/openage/stargazers)\n[![#sfttech on matrix.org](/assets/doc/matrixroom.svg)](https://matrix.to/#/#sfttech:matrix.org)\n[![GPL licensed](/assets/doc/license.svg)](/legal/GPLv3)\n\n\nContact\n-------\n| Contact          | Where?                                                                                             |\n| ---------------- | -------------------------------------------------------------------------------------------------- |\n| Issue Tracker    | [GitHub SFTtech/openage]                                                                           |\n| Development Blog | [blog.openage.dev]                                                                                 |\n| Subreddit        | [![reddit](/assets/doc/reddit.svg) /r/openage](https://www.reddit.com/r/openage/)                  |\n| Discussions      | [GitHub Discussions]                                                                               |\n| Matrix Chat      | [![matrix](/assets/doc/matrix.svg) `#sfttech:matrix.org`](https://matrix.to/#/#sfttech:matrix.org) |\n| Money Sink       | [![money sink](/assets/doc/liberapay.svg)](https://liberapay.com/SFTtech)                          |\n\n[GitHub SFTtech/openage]: https://github.com/SFTtech/openage/issues\n[blog.openage.dev]: https://blog.openage.dev\n[GitHub Discussions]: https://github.com/SFTtech/openage/discussions\n\nTechnical foundation\n--------------------\n\n| Technology   | Component                                                     |\n| ------------ | ------------------------------------------------------------- |\n| **C++20**    | Engine core                                                   |\n| **Python3**  | Scripting, media conversion, in-game console, code generation |\n| [**Cython**] | Python/C++ Glue code                                          |\n| [**Qt6**]    | Graphical user interface                                      |\n| [**CMake**]  | Build system                                                  |\n| [**OpenGL**] | Rendering, shaders                                            |\n| [**Opus**]   | Audio codec                                                   |\n| [**nyan**]   | Content Configuration and Modding                             |\n| [**Humans**] | Mixing together all of the above                              |\n\n[**Cython**]: https://cython.org/\n[**Qt6**]: https://contribute.qt-project.org/\n[**CMake**]: https://cmake.org/\n[**OpenGL**]: https://www.opengl.org/\n[**Opus**]: https://opus-codec.org/\n[**nyan**]: https://github.com/SFTtech/nyan\n[**Humans**]: https://www.youtube.com/watch?v=fQGbXmkSArs&t=18s\n\nGoals\n-----\n\n* Fully authentic look and feel\n    * This can only be approximated since the behavior of the original game is mostly undocumented,\n    and guessing/experimenting can only get you this close\n    * We will not implement useless artificial limitations (max 30 selectable units...)\n* An easily-moddable content format: [**nyan** yet another notation](https://github.com/SFTtech/nyan)\n* An integrated Python console and API, comparable to [blender](https://www.blender.org/)\n* AI scripting in Python, you can use [machine learning](http://scikit-learn.org/stable/)\n    * here is some [additional literature](http://www.deeplearningbook.org/)\n* Re-creating [free game assets](https://github.com/SFTtech/openage-data)\n* Multiplayer (obviously)\n* Matchmaking and ranking with a [haskell masterserver](https://github.com/SFTtech/openage-masterserver)\n* Optionally, [improvements](/doc/ideas/) over the original game\n* Awesome infrastructure such as our own [Kevin CI service](https://github.com/SFTtech/kevin)\n\nBut beware, for sanity reasons:\n\n* No network compatibility with the original game.\n  You really wanna have the same problems again?\n* No binary compatibility with the original game.\n  A one-way script to convert maps/savegames/missions to openage is planned though.\n\n\nCurrent State of the Project\n----------------------------\n\n**Important notice**: At the moment, \"gameplay\" is basically non-functional.\nWe're implementing the internal game simulation (how units even do anything) with simplicity and extensibility in mind, so we had to get rid of the temporary (but kind of working) previous version.\nWith these changes, we can (finally) actually make use of our converted asset packs and our nyan API!\nWe're working day and night to make gameplay return\\*.\nIf you're interested, we wrote detailed explanations on our blog: [Part 1](https://blog.openage.dev/new-gamestate-2020.html), [Part 2](https://blog.openage.dev/engine-core-modules.html), [Monthly Devlog](https://blog.openage.dev/tag/news.html).\n\n*\\* may not actually be every day and night*\n\n|  Operating System   |                                                                                                       Build status                                                                                                        |\n| :-----------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|     Debian Sid      |                                                                                                     [Todo: Kevin #11]                                                                                                     |\n|  Ubuntu 24.04 LTS   |           [![Ubuntu 24.04 build status](https://github.com/SFTTech/openage/actions/workflows/ubuntu-24.04.yml/badge.svg?branch=master)](https://github.com/SFTtech/openage/actions/workflows/ubuntu-24.04.yml)            |\n|        macOS        |                              [![macOS build status](https://github.com/SFTtech/openage/workflows/macOS-CI/badge.svg)](https://github.com/SFTtech/openage/actions?query=workflow%3AmacOS-CI)                               |\n| Windows Server 2019 | [![Windows Server 2019 build status](https://github.com/SFTtech/openage/actions/workflows/windows-server-2019.yml/badge.svg?branch=master)](https://github.com/SFTtech/openage/actions/workflows/windows-server-2019.yml) |\n| Windows Server 2022 | [![Windows Server 2022 build status](https://github.com/SFTtech/openage/actions/workflows/windows-server-2022.yml/badge.svg?branch=master)](https://github.com/SFTtech/openage/actions/workflows/windows-server-2022.yml) |\n\n[Todo: Kevin #11]: https://github.com/SFTtech/kevin/issues/11\n\n\nInstallation Packages\n---------------------\n\nThere are many missing parts for an actually working game.\nSo if you \"just wanna play\", [you'll be disappointed](#current-state-of-the-project), unfortunately.\n\nWe strongly recommend building the program from source to get the latest, greatest, and shiniest project state :)\n\n\n* For **Linux** check at [repology](https://repology.org/project/openage/versions) if your distribution has any packages available. Otherwise, you need to build from source.\n  We don't release `*.deb`, `*.rpm`, Flatpak, snap or AppImage packages yet.\n* For **Windows** check our [release page](https://github.com/SFTtech/openage/releases) for the latest installer.\n  Otherwise, you need to build from the source.\n\n* For **macOS** we currently don't have any packages, you need to build from source.\n\nIf you need help, maybe our [troubleshooting guide](/doc/troubleshooting.md) helps you.\n\n\nQuickstart\n----------\n\n* **How do I get this to run on my box?**\n    1. [Clone](https://docs.github.com/repositories/creating-and-managing-repositories/cloning-a-repository) the repo.\n    2. Install dependencies. See [doc/building.md](/doc/building.md#dependency-installation) to get instructions for your favorite platform.\n    3. Build the project:\n   ```\n   ./configure --download-nyan\n   make\n   ```\n\n* **I compiled everything. Now how do I run it?**\n    * Execute `cd bin && ./run main`.\n    * [The convert script](/doc/media_convert.md) will transform original assets into openage formats, which are a lot saner and more moddable.\n    * Use your brain and react to the things you'll see.\n\n* **Waaaaaah! It...**\n    * segfaults\n    * prints error messages I don't want to read\n    * ate my dog\n\nAll of those are features, not bugs.\n\nTo turn them off, use `./bin/run --dont-segfault --no-errors --dont-eat-dog`.\n\n\nIf this still does not help, try our [troubleshooting guide](/doc/troubleshooting.md), the [contact section](#contact)\nor the [bug tracker](https://github.com/SFTtech/openage/issues).\n\n\nContributing\n============\n\nYou might ask yourself now \"Sounds cool, but how do I participate\nand ~~get famous~~ contribute useful features?\".\n\nFortunately for you, there is a lot to do and we are very grateful for your help.\n\n## Where do I start?\n\n* **Check the issues** [labelled with `good first issue`](https://github.com/SFTtech/openage/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22). These are tasks that you can start right away and don't require much previous knowledge.\n* **Ask us** in the [chat](https://matrix.to/#/#sfttech:matrix.org). Someone there could need\n  help with something.\n* You can also **take the initiative** and fix a bug you found, create an issue for discussion or\n  implement a feature that we never thought of, but always wanted.\n\n\n## Ok, I found something. What now?\n\n* **[Tell us](#contact)**, if you haven't already. Chances are that we have additional information\n  and directions.\n* **[Read the docs](/doc)**. They will answer most \"administrative\"\n  questions like what code style is used and how the engine core parts are connected.\n* **Read the code** and get familiar with the engine component you want to work with.\n* Do not hesitate to **[ask us for help](#contact)** if you do not understand something.\n\n\n## How do I contribute my features/changes?\n\n* Read the **[contributing guide](/doc/contributing.md)**.\n* You can upload work-in-progress (WIP) versions or drafts of your contribution to get feedback or support.\n* Tell us (again) when you want us to review your work.\n\n## I want to help, but I'm not a programmer...\n\nThen openage might be a good reason to become one! We have many issues and tasks for beginners. You\njust have to ask and we'll find something. Alternatively, lurking is also allowed.\n\n----\n\nCheers, happy hecking!\n\n\nDevelopment Process\n-------------------\n\nWhat does openage development look like in practice?\n\n* extensive [synchronization](#contact)!\n* [doc/development.md](/doc/development.md).\n\nHow can I help?\n\n* [doc/contributing.md](/doc/contributing.md).\n\nAll documentation is also in this repo:\n\n* Code documentation is embedded in the sources for Doxygen (see [doc readme](/doc/README.md)).\n* Have a look at the [doc directory](/doc/). This folder tends to get outdated when code changes.\n\n\nLicense\n-------\n\n**GNU GPLv3** or later; see [copying.md](copying.md) and [legal/GPLv3](/legal/GPLv3).\n\nI know that probably nobody is ever gonna look at the `copying.md` file,\nbut if you want to contribute code to openage, please take the time to\nskim through it and add yourself to the authors list.\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "buildsystem",
          "type": "tree",
          "content": null
        },
        {
          "name": "cfg",
          "type": "tree",
          "content": null
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 0.3095703125,
          "content": "# Changelog\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html) since release [0.4.0].\n\nIndividual changelogs for the individual engine parts are stored in the [doc/changelogs](doc/changelogs) folder.\n"
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 13.705078125,
          "content": "#!/usr/bin/env python3\n\n# Copyright 2013-2021 the openage authors. See copying.md for legal info.\n\n\"\"\"\nopenage autocancer-like cmake frontend.\n\nTogether with the Makefile, ./configure provides an autotools-like build\nexperience. For more info, see --help and doc/buildsystem.\n\"\"\"\n\nimport argparse\nimport os\nimport shlex\nimport shutil\nimport subprocess\nimport sys\n\nif sys.version_info < (3, 9):\n    print(\"openage requires Python 3.9 or higher\")\n    exit(1)\n\n\n# argparsing\nDESCRIPTION = \"\"\"./configure is a convenience script:\nit creates the build directory,  symlinks it,\nand invokes cmake for an out-of-source build.\n\nNobody is stopping you from skipping ./configure and our Makefile,\nand using CMake directly (e.g. when packaging, or using an IDE).\nFor your convenience, ./configure even prints the direct CMake invocation!\"\"\"\n\nEPILOG = \"\"\"environment variables like CXX, CXXFLAGS, LDFLAGS are honored, \\\nbut overwritten by command-line arguments.\"\"\"\n\n\ndef getenv(*varnames, default=\"\"):\n    \"\"\"\n    fetches an environment variable.\n    tries all given varnames until it finds an existing one.\n    if none fits, returns default.\n    \"\"\"\n    for var in varnames:\n        if var in os.environ:\n            return os.environ[var]\n\n    return default\n\n\ndef getenv_bool(varname):\n    \"\"\"\n    fetches a \"boolean\" environment variable.\n    \"\"\"\n    value = os.environ.get(varname)\n    if isinstance(value, str):\n        if value.lower() in {\"0\", \"false\", \"no\", \"off\", \"n\"}:\n            value = False\n\n    return bool(value)\n\n\n# available optional features\n# this defines the default activation for those:\n# if_available: enable if it was found\n# True:         enable feature\n# False:        disable feature\n# This 3-state activation allows distros to control the features definitively\n# but independent compilations may still have autodetection.\nOPTIONS = {\n    \"backtrace\": \"if_available\",\n    \"inotify\": \"if_available\",\n    \"opengl\": \"if_available\",\n    \"vulkan\": \"if_available\",\n    \"gperftools-tcmalloc\": False,\n    \"gperftools-profiler\": \"if_available\",\n    \"ncurses\": \"if_available\"\n}\n\n\ndef features(args, parser):\n    \"\"\"\n    Enable or disable optional features.\n    If a feature is not explicitly enabled/disabled,\n    the defaults below will be used.\n    \"\"\"\n\n    def sanitize_option_name(option):\n        \"\"\" Check if the given feature exists \"\"\"\n        if option not in OPTIONS:\n            parser.error(\"unknown feature: '{}'.\\n\"\n                         \"available features:\\n   {}\".format(\n                             option, '\\n   '.join(OPTIONS)))\n\n    options = OPTIONS.copy()\n\n    if args.with_:\n        for arg in args.with_:\n            sanitize_option_name(arg)\n            options[arg] = True\n\n    if args.without:\n        for arg in args.without:\n            sanitize_option_name(arg)\n            options[arg] = False\n\n    return options\n\n\ndef build_type(args):\n    \"\"\" Set the cmake build type \"\"\"\n    mode = args.mode\n    if mode == 'debug':\n        ret = 'Debug'\n    elif mode == 'release':\n        ret = 'Release'\n    elif mode == 'relwithdebinfo':\n        ret = 'RelWithDebInfo'\n    elif mode == 'minsizerel':\n        ret = 'MinSizeRel'\n\n    return {\n        \"build_type\": ret\n    }\n\n\ndef get_compiler(args, parser):\n    \"\"\"\n    Compute the compiler executable name\n    \"\"\"\n\n    # determine compiler binaries from args.compiler\n    if args.compiler:\n        # map alias -> actual compiler\n        aliases = {\n            \"clang\": \"clang++\",\n            \"gcc\": \"g++\",\n        }\n\n        cxxver = args.compiler.split('-', maxsplit=1)\n        cxx = cxxver[0]\n\n        # try to replace aliases\n        if cxx in aliases:\n            cxx = aliases[cxx]\n\n        # we had a version suffix with e.g. -1.2.3\n        if len(cxxver) == 2:\n            cxx += \"-\" + cxxver[1]\n\n    else:\n        # CXX has not been specified\n        if sys.platform.startswith('darwin'):\n            cxx = 'clang++'\n        else:\n            # default to gnu compiler suite\n            cxx = 'g++'\n\n    # test whether the specified compiler actually exists\n    if not shutil.which(cxx):\n        parser.error('could not find c++ compiler executable: %s' % cxx)\n\n    return {\n        \"cxx_compiler\": cxx,\n        \"cxx_flags\": args.flags,\n        \"exe_linker_flags\": args.ldflags,\n        \"module_linker_flags\": args.ldflags,\n        \"shared_linker_flags\": args.ldflags,\n    }\n\n\ndef get_install_prefixes(args):\n    \"\"\"\n    Determine the install prefix configuration.\n    \"\"\"\n\n    ret = {\n        \"install_prefix\": args.prefix,\n    }\n\n    if args.py_prefix is not None:\n        ret[\"py_install_prefix\"] = args.py_prefix\n\n    return ret\n\n\ndef bindir_creation(args, defines):\n    \"\"\"\n    configuration for the sanitizer addons for gcc and clang.\n    \"\"\"\n\n    def sanitize_for_filename(txt, fallback='-'):\n        \"\"\"\n        sanitizes a string for safe usage in a filename\n        \"\"\"\n\n        def yieldsanitizedchars():\n            \"\"\" generator for sanitizing the output folder name \"\"\"\n            # False if the previous char was regular.\n            fallingback = True\n            for char in txt:\n                if char == fallback and fallingback:\n                    fallingback = False\n                elif char.isalnum() or char in \"+-_,\":\n                    fallingback = False\n                    yield char\n                elif not fallingback:\n                    fallingback = True\n                    yield fallback\n\n        return \"\".join(yieldsanitizedchars())\n\n    bindir = \".bin/%s-%s-%s\" % (\n        sanitize_for_filename(defines[\"cxx_compiler\"]),\n        sanitize_for_filename(args.mode),\n        sanitize_for_filename(\"-O%s -sanitize=%s\" % (\n            args.optimize, args.sanitize)))\n\n    if not args.dry_run:\n        os.makedirs(bindir, exist_ok=True)\n\n    def forcesymlink(linkto, name):\n        \"\"\" similar in function to ln -sf \"\"\"\n        if args.dry_run:\n            return\n\n        try:\n            os.unlink(name)\n        except FileNotFoundError:\n            pass\n\n        os.symlink(linkto, name)\n\n    # create the build dir and symlink it to 'bin'\n    forcesymlink(bindir, 'bin')\n\n    return bindir\n\n\ndef invoke_cmake(args, bindir, defines, options):\n    \"\"\"\n    run cmake.\n    \"\"\"\n\n    # the project root directory contains this configure file.\n    project_root = os.path.dirname(os.path.realpath(__file__))\n\n    # calculate cmake invocation from defines dict\n    invocation = [args.cmake_binary]\n    maxkeylen = max(len(k) for k in defines)\n    for key, val in sorted(defines.items()):\n        print('%s | %s' % (key.rjust(maxkeylen), val))\n\n        if key in ('cxx_compiler', ):\n            # work around this cmake 'feature':\n            # when run in an existing build directory, if CXX is given,\n            # all other arguments are ignored... this is retarded.\n            if os.path.exists(os.path.join(bindir, 'CMakeCache.txt')):\n                continue\n\n        invocation.append('-DCMAKE_%s=%s' % (key.upper(), shlex.quote(val)))\n\n    if args.ninja:\n        invocation.extend(['-G', 'Ninja'])\n\n    if args.ccache:\n        invocation.append('-DENABLE_CCACHE=ON')\n\n    if args.clang_tidy:\n        invocation.append('-DENABLE_CLANG_TIDY=ON')\n\n    if args.download_nyan:\n        invocation.append(\"-DDOWNLOAD_NYAN=YES\")\n\n    cxx_options = dict()\n    if args.iwyu:\n        cxx_options[\"CXX_INCLUDE_WHAT_YOU_USE\"] = args.iwyu\n\n        invocation.append('-DWANT_IWYU=true')\n\n    cxx_options[\"CXX_OPTIMIZATION_LEVEL\"] = args.optimize\n    cxx_options[\"CXX_SANITIZE_MODE\"] = args.sanitize\n    cxx_options[\"CXX_SANITIZE_FATAL\"] = args.sanitize_fatal\n    for key, val in sorted(cxx_options.items()):\n        invocation.append('-D%s=%s' % (key, val))\n\n    print(\"\\nconfig options:\\n\")\n\n    maxkeylen = max(len(k) for k in options)\n    for key, val in sorted(options.items()):\n        print('%s | %s' % (key.rjust(maxkeylen), val))\n\n        invocation.append('-DWANT_%s=%s' % (\n            key.upper().replace('-', '_'), val))\n\n    for raw_cmake_arg in args.raw_cmake_args:\n        if raw_cmake_arg == \"--\":\n            continue\n\n        invocation.append(raw_cmake_arg)\n\n    invocation.append(project_root)\n\n    # look for traces of an in-source build\n\n    if os.path.isfile('CMakeCache.txt'):\n        print(\"\\nwarning: found traces of an in-source build.\")\n        print(\"CMakeCache.txt was deleted to make building possible.\")\n        print(\"run 'make cleaninsourcebuild' to fully wipe the traces.\")\n        os.remove('CMakeCache.txt')\n\n    # switch to build directory\n    print('\\nbindir:\\n%s/\\n' % os.path.join(project_root, bindir))\n    if not args.dry_run:\n        os.chdir(bindir)\n\n    # invoke cmake\n    try:\n        print('invocation:\\n%s\\n' % ' '.join(invocation))\n        if args.dry_run:\n            exit(0)\n        else:\n            print(\"(now running cmake:)\\n\")\n            exit(subprocess.call(invocation))\n    except FileNotFoundError:\n        print(\"cmake was not found\")\n        exit(1)\n\n\ndef main(args, parser):\n    \"\"\"\n    Compose the cmake invocation.\n    Basically does what many distro package managers do as well.\n    \"\"\"\n\n    try:\n        subprocess.call(['cowsay', '--', DESCRIPTION])\n        print(\"\")\n    except (FileNotFoundError, PermissionError):\n        print(DESCRIPTION)\n        print(\"\")\n\n    defines = {}\n\n    options = features(args, parser)\n    defines.update(build_type(args))\n    defines.update(get_compiler(args, parser))\n    defines.update(get_install_prefixes(args))\n\n    bindir = bindir_creation(args, defines)\n    invoke_cmake(args, bindir, defines, options)\n\n\ndef parse_args():\n    \"\"\" argument parsing \"\"\"\n\n    cli = argparse.ArgumentParser(\n        description=DESCRIPTION,\n        epilog=EPILOG,\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    cli.add_argument(\"--mode\", \"-m\",\n                     choices=[\"debug\", \"release\", \"relwithdebinfo\", \"minsizerel\"],\n                     default=getenv(\"BUILDMODE\", default=\"debug\"),\n                     help=\"controls cmake build mode\")\n    cli.add_argument(\"--optimize\", \"-O\",\n                     choices=[\"auto\", \"0\", \"1\", \"g\", \"2\", \"3\", \"max\"],\n                     default=getenv(\"OPTIMIZE\", default=\"auto\"),\n                     help=(\"controls optimization-related flags. \" +\n                           \"is set according to mode if 'auto'. \" +\n                           \"conflicts with --flags\"))\n    cli.add_argument(\"--sanitize\",\n                     choices=[\"none\", \"yes\", \"mem\", \"thread\"],\n                     default=getenv(\"SANITIZER\", default=\"none\"),\n                     help=(\"enable one of those (run-time) code sanitizers.\"\n                           \"'yes' enables the address and \"\n                           \"undefined sanitizers.\"))\n    cli.add_argument(\"--sanitize-fatal\", action='store_true',\n                     default=getenv_bool(\"SANITIZER_FATAL\"),\n                     help=\"With --sanitize, stop execution on first problem.\")\n    cli.add_argument(\"--compiler\", \"-c\",\n                     default=getenv(\"CXX\"),\n                     help=\"c++ compiler executable, default=$ENV[CXX]\")\n    cli.add_argument(\"--iwyu\",\n                     choices=[\"warn\", \"error\"],\n                     default=None,\n                     help=\"use include-what-you-use tool to check \"\n                          \"for unnecessary imports\")\n    cli.add_argument(\"--with\", action='append', dest='with_', metavar='OPTION',\n                     help=\"enable optional functionality. \"\n                          \"for a list of available features, \"\n                          \"use --list-options\")\n    cli.add_argument(\"--without\", action='append', metavar='OPTION',\n                     help=\"disable optional functionality. \"\n                          \"for a list of available features, \"\n                          \"use --list-options\")\n    cli.add_argument(\"--list-options\", action=\"store_true\",\n                     help=\"list available optional feature switches\")\n    cli.add_argument(\"--flags\", \"-f\",\n                     default=getenv(\"CXXFLAGS\", \"CCFLAGS\", \"CFLAGS\"),\n                     help=\"compiler flags\")\n    cli.add_argument(\"--ldflags\", \"-l\",\n                     default=getenv(\"LDFLAGS\"),\n                     help=\"linker flags\")\n    cli.add_argument(\"--prefix\", \"-p\", default=\"/usr/local\",\n                     help=\"installation directory prefix\")\n    cli.add_argument(\"--py-prefix\", default=None,\n                     help=\"python module installation directory prefix\")\n    cli.add_argument(\"--dry-run\", action='store_true',\n                     help=\"just print the cmake invocation without calling it\")\n    cli.add_argument(\"--cmake-binary\", default=\"cmake\",\n                     help=\"path to the cmake binary\")\n    cli.add_argument(\"--ninja\", action=\"store_true\",\n                     help=\"use ninja instead of GNU make\")\n    cli.add_argument(\"--ccache\", action=\"store_true\",\n                     help=\"activate using the ccache compiler cache\")\n    cli.add_argument(\"--clang-tidy\", action=\"store_true\",\n                     help=\"emit clang-tidy analysis messages\")\n    cli.add_argument(\"--download-nyan\", action=\"store_true\",\n                     help=\"enable automatic download of the nyan project\")\n\n    # arguments after -- are used as raw cmake args\n    cli.add_argument('raw_cmake_args', nargs=argparse.REMAINDER, default=[],\n                     help=\"all args after ' -- ' are passed directly to cmake\")\n\n    args = cli.parse_args()\n\n    if args.sanitize == 'none' and args.sanitize_fatal:\n        cli.error('--sanitize-fatal only valid with --sanitize')\n\n    if args.list_options:\n        header = \"{} | Default state\".format(\"Optional features:\".ljust(25))\n        print(\"{}\\n{}\".format(header, \"-\" * len(header)))\n        for option, state in sorted(OPTIONS.items()):\n            state_str = (state if not isinstance(state, bool)\n                         else (\"on\" if state else \"off\"))\n            print(\"{} | {}\".format(option.ljust(25), state_str))\n        exit(0)\n\n    return args, cli\n\n\nif __name__ == \"__main__\":\n    main(*parse_args())\n"
        },
        {
          "name": "copying.md",
          "type": "blob",
          "size": 21.6201171875,
          "content": "Any file in this project that doesn't state otherwise, and isn't listed as an\nexception below, is Copyright 2013-2021 The openage authors, and licensed\nunder the terms of the GNU General Public License Version 3, or\n(at your option) any later version (\"GPL3+\").\nA copy of the license can be found in [legal/GPLV3](/legal/GPLv3).\n\n_the openage authors_ are:\n\n| Full name                   | aliases                     | E-Mail                                            |\n|-----------------------------|-----------------------------|---------------------------------------------------|\n| Jonas Jelten                | TheJJ                       | jj à sft dawt lol                                 |\n| Michael Enßlin              | mic_e                       | michael à ensslin dawt cc                         |\n| Andre Kupka                 | freakout                    | kupka à in dawt tum dawt de                       |\n| Frank Schmidt               | gellardo                    | rubiccuber à googlemail dawt com                  |\n| Markus Otto                 | zuntrax                     | otto à fs dawt tum dawt de                        |\n| Sascha Vincent Kurowski     | svkurowski                  | svkurowski à gmail dawt com                       |\n| James Mintram               | JimmyJazz                   | jamesmintram à gmail dawt com                     |\n| Martin McGrath              | MartinMcGrath               | mcgrath dawt martin à gmail dawt com              |\n| Renée Kooi                  | goto-bus-stop               | renee à kooi dawt me                              |\n| Markus Elfring              | elfring                     | elfring à users dawt sourceforge dawt net         |\n| Jimmy Berry                 | boombatower                 | jimmy à boombatower dawt com                      |\n| João Roque                  | joaoroque                   | joaoroque à gmail dawt com                        |\n| Julius Michaelis            | jcaesar                     | gitter à liftm dawt de                            |\n| Katharina Bogad             | mistressofjellyfish         | delirium à hacked dawt xyz                        |\n| Oliver Fawcett-Griffiths    | ollyfg                      | olly à ollyfg dawt com                            |\n| Ross Murray                 | rossmurray                  | rm à egoorb dawt com                              |\n| Alexandre Arpin             | AlexandreArpin              | arpin dawt alexandre à gmail dawt com             |\n| Henry Snoek                 | snoek09                     | snoek09 à gmail dawt com                          |\n| Gabriel Scherer             | gasche                      | gasche dawt dylc à gmail dawt com                 |\n| Austin Eyler                | awestin1                    | awestin1 à gmail dawt com                         |\n| Francisco Demartino         | franciscod                  | demartino dawt francisco à gmail dawt com         |\n| Peter Piwowarski            | oldlaptop                   | oldlaptop654 à aol dawt com                       |\n| Charles Pigott              | LordAro                     | charlespigott à googlemail dawt com               |\n| Andrew Eikum                | ColdPie1                    | coldpies à gmail dawt com                         |\n| Michael Sebastiyan          | BugExplorer                 | sebastiyan dawt michael à outlook dawt com        |\n| Adam Miartus                | miartad                     | adam dawt miartus à gmail dawt com                |\n| Benoît Legat                | blegat                      | benoit dawt legat à gmail dawt com                |\n| James Hagborg               | blucoat                     | jameshagborg à gmail dawt com                     |\n| Prashanth Jonnala           | jprashanth                  | prashanth dawt neo à gmail dawt com               |\n| Jonathan Remnant            | Jon0                        | jono4728 à gmail dawt com                         |\n| Sam Schetterer              | schets                      | samschet à gmail dawt com                         |\n| Georg Kilzer                | leper                       | leper à wildfiregames dawt com                    |\n| Florian Erler               | ethon                       | ethon à ethon dawt cc                             |\n| Michał Janiszewski          | janisozaur                  | janisozaur+openage à gmail dawt com               |\n| Lautaro Nahuel De León      | lndl                        | laudleon à gmail dawt com                         |\n| Robin Kreis                 | rkreis                      | r dawt kreis à uni-bremen dawt de                 |\n| Shion Ryuu                  | shion                       | shionryuu à outlook dawt com                      |\n| Jonas Borchelt              | riotjones                   | jonasbr-github à bellatrix dawt uberspace dawt de |\n| Jon Gelderloos              | jgelderloos                 | jgelderloos à gmail dawt com                      |\n| Emmanuel Gil Peyrot         | Link Mauve                  | linkmauve à linkmauve dawt fr                     |\n| Danilo Bargen               | dbrgn                       | mail à dbrgn dawt ch                              |\n| Niklas Fiekas               | niklasf                     | niklas dawt fiekas à backscattering dawt de       |\n| Charles Gould               | charlesrgould               | charles dawt r dawt gould à gmail dawt com        |\n| Wilco Kusee                 | detrumi                     | wilcokusee à gmail dawt com                       |\n| Sreejith R                  | sreejithr                   | sreejith dawt r44 à gmail dawt com                |\n| Jens Feodor Nielsen         | jfeo                        | xws747 à alumni dawt ku dawt dk                   |\n| Franz-Niclas Muschter       | fm                          | fm à stusta dawt net                              |\n| Valentin Gagarin            | frickler01                  | valentin à fricklerhandwerk dawt de               |\n| Emmanouil Kampitakis        | madonius                    | emmanouil à kampitakis dawt de                    |\n| Thomas Oltmann              | tomolt                      | thomas dawt oltmann dawt hhg à gmail dawt com     |\n| Miguel Kasparick            | miguellissimo               | miguellissimo à gmail dawt com                    |\n| Darren Strash               | darrenstrash                | darren dawt strash à gmail dawt com               |\n| Kyle Robbertze              | paddatrapper                | paddatrapper à gmail dawt com                     |\n| Jonathan Biegert            | azrdev                      | azrdev à qrdn dawt de                             |\n| Hadrien Mary                | hadim                       | hadrien dawt mary à gmail dawt com                |\n| Sachin Kelkar               | s4chin                      | sachinkel19 à gmail dawt com                      |\n| Camillo Dell'mour           | spjoe                       | cdellmour à gmail dawt com                        |\n| Timothee Behety             | tim2000                     | tim dawt behety à gmail dawt com                  |\n| Vyacheslav Davydov          | tombouctou                  | vissi à vissi dawt su                             |\n| Lyle Nel                    | lyle-nel                    | pt20100938 à gmail dawt com                       |\n| Michael Kilby               | kilbyjmichael               | kilbyjmichael à gmail dawt com                    |\n| Michal Kováč                | mirelon                     | miso à github dawt ksp dawt sk                    |\n| Patrik Stutz                | VanCoding                   | patrik dawt stutz à gmail dawt com                |\n| James McMurray              | jamesmcm                    | jamesmcm03 à gmail dawt com                       |\n| Łukasz Raszka               | lukky513                    | lukky513 à gmail dawt com                         |\n| Martin Castillo             | castilma                    | castilma à uni-bremen dawt de                     |\n| Volodymyr Samokhatko        | ChipmunkV                   | velorums à gmail dawt com                         |\n| Guillaume Desquesnes        | elnabo                      | g dawt desquesnes à gmail dawt com                |\n| Johan Klokkhammer Helsing   | johanhelsing                | johanhelsing à gmail dawt com                     |\n| Jasper v. Blanckenburg      | jazzpi                      | jasper à mezzo dawt de                            |\n| Alexej Disterhoft           | nobbs                       | disterhoft à uni-mainz dawt de                    |\n| Sebastian Brodehl           | sbrodehl                    | sbrodehl à students dawt uni-mainz dawt de        |\n| Gaith Hallak                | ghallak                     | gaithhallak à gmail dawt com                      |\n| Pierre Hallot               | Hallot                      | hallotpierre à gmail dawt com                     |\n| Vicken Simonian             | vsimon                      | vsimon à gmail dawt com                           |\n| Kevin Peters                | kev946                      | klee946 à gmail dawt com                          |\n| Andreas Schulz              | Longhanks                   | andi dawt schulz à me dawt com                    |\n| Shaleen Jain                | Shalzz                      | shaleen dawt jain95 à gmail dawt com              |\n| Johannes Walcher            | tomatower                   | johannes dawt walcher à stusta dawt de            |\n| Akritas Akritidis           | MaanooAk                    | akritasak à gmail dawt com                        |\n| Edgard Mota                 | edgardmota                  | edgardmota à gmail dawt com                       |\n| Boris Dušek                 | dusek                       | me à dusek dawt me                                |\n| Michael Droogleever         | droogmic                    | droogmic à gmail dawt com                         |\n| Christoph Heine             | heinezen                    | heinezen à hotmail dawt de                        |\n| Marco Savelli               | Piruzzolo                   | svlmrc à gmail dawt com                           |\n| Yvan Burrie                 | yvan-burrie                 | yvan dawt burrie à hotmail dawt com               |\n| Martin Bernardi             | martinber                   | martinbernardi à openmailbox dawt org             |\n| Erik Griese                 | citron0xa9                  | erik dawt griese à yahoo dawt de                  |\n| Alex Birch                  | Birch-san                   | vengeance dawt m dawt x+openage à gmail dawt com  |\n| Michal Jarzabek             | stiopa                      | stiopa à gmail dawt com                           |\n| Christopher Wilson          | cdw33                       | cdw33 à zips dawt uakron dawt edu                 |\n| Wojciech Nawrocki           | Vtec234                     | wjnawrocki à protonmail dawt com                  |\n| Folkert van Verseveld       | methos, medicijnman         | folkert dawt van dawt verseveld à gmail dawt com  |\n| Neel Patel                  | ohn0                        | silverskinx à gmail dawt com                      |\n| David Carlier               | devnexen                    | devnexen à gmail dawt com                         |\n| Tushar Maheshwari           | tusharpm                    | tushar27192 à gmail dawt com                      |\n| Piotr Szpetkowski           | piotr-szpetkowski           | piotr dawt szpetkowski à pyquest dawt space       |\n| Julian Guillotel            | arialwhite                  | julian dawt gullotel à gmail dawt com             |\n| Arne Sellmann               | PythonicChemist             | arne dawt sellmann à gmx dawt de                  |\n| Rafael X. Morales Georgi    | chocoladisco                | chocoladisco à gmail dawt com                     |\n| Marcel Schneider            | schnema123                  | marcelschneider5 à outlook dawt de                |\n| Samuel Grigolato            | samuelgrigolato             | samuel dawt grigolato à gmail dawt com            |\n| Andrew Thompson             | mrwerdo                     | mrwerdo331 à me dawt com                          |\n| Benedikt Freisen            | roybaer                     | b dawt freisen à gmx dawt net                     |\n| Finn Günther                | Kawzeg                      | kawzeg à gmail dawt com                           |\n| Akshit Sharma               | akshit-sharma               | akshit9sharma à gmail dawt com                    |\n| Jacek Wielemborek           | d33tah                      | d33tah à gmail dawt com                           |\n| Charles Offenbacher         | coffenbacher                | charles.offenbacher à gmail dawt com              |\n| Ilia Vladimirskiy           | ivvory                      | ivv.evol à gmail dawt com                         |\n| Nicholas Schmidt            | schmidtnicholas             | schmidtnicholas111 à gmail dawt com               |\n| Antti Aalto                 | Anakonda                    | antti dawt aalto dawt 10 à gmail dawt com         |\n| Simon San                   | simonsan                    | simon à systemli dawt org                         |\n| Lorenzo Gaifas              | brisvag                     | brisvag à gmail dawt com                          |\n| Shim Myeongseob             | violet716                   | zzangsim231 à gmail dawt com                      |\n| Serhan Tutar                | randomnoise                 | serhantutar à outlook dawt com                    |\n| Georgy Komarov              | jubnzv                      | jubnzv à gmail dawt com                           |\n| Aristotelis Dossas          | teldosas                    | teldosas à gmail dawt com                         |\n| Martin Sandsmark            | martin                      | martin dawt sandsmark à kde dawt org              |\n| Merlin Stollenwerk          | Mese96                      | merlin-stollenwerk à past-development dawt de     |\n| 段清楠 Duan Qingnan          | duanqn                      | duanqn_own_1 à yeah dawt net                      |\n| Sean Ramey                  | SeanRamey                   | sramey40 à gmail dawt com                         |\n| D R Siddhartha              | drs-11                      | siddharthadr11 à gmail dawt com                   |\n| Martin Matějek              | mmtj                        | martin dawt matejek à gmx dawt com                |\n| Tobias Feldballe            | Namabilis                   | tobias à osandweb dawt dk                         |\n| Ayxan Haqverdili            | Ayxan13                     | aykhanhagverdili à gmail dawt com                 |\n| David Heidelberg            | okias                       | david à ixit dawt cz                              |\n| Giacomo Frascarelli         | 0ro8lu                      | giacomo dawt frascarelli1 à gmail dawt com        |\n| Antonio M. R. Cunha         | Grubben                     | antoniomsprc à gmail dawt com                     |\n| Jens Nyman                  | nymanjens                   | nymanjens dawt nj à gmail dawt com                |\n| Deepak Dinesh               | deepak                      | d.deepakdinesh13 à gmail dawt com                 |\n| Damien Lejay                | dlejay                      | lejay à paracompact dawt space                    |\n| Talha Aamir                 | sarcxd                      | sarcxd à gmail dawt com                           |\n| Matthias Geiger             | CountOmega                  | matthias dawt geiger1024 à outlook dawt com       |\n| Yuvraj Tetarwal             | YuviTz1                     | yuvi56789 à gmail dawt com                        |\n| Tarun Samanta               | TS                          | tarunsamanta77 à gmail dawt com                   |\n| Derek Frogget               | FoggyLight                  | fro22003 à byui dawt edu                          |\n| Martin                      | Starman                     | mstarman à seznam dawt cz                         |\n| Zoltán Ács                  | zoli111                     | acszoltan111 à gmail dawt com                     |\n| Trevor Slocum               | tslocum                     | trevor à rocket9labs dawt com                     |\n| Munawar Hafiz               | munahaf                     | munawar dawt hafiz à gmail dawt com               |\n| Md Ashhar                   | ashhar                      | mdashhar01 à gmail dawt com                       |\n| Fábio Barkoski              | fabiobarkoski               | fabiobarkoskii à gmail dawt com                   |\n| Astitva Kamble              | askastitva                  | astitvakamble5 à gmail dawt com                   |\n| Haoyang Bi                  | AyiStar                     | ayistar à outlook dawt com                        |\n| Michael Seibt               | RoboSchmied                 | github à roboschmie dawt de                       |\n| Nikhil Ghosh                | NikhilGhosh75               | nghosh606 à gmail dawt com                        |\n| Edvin Lindholm              | EdvinLndh                   | edvinlndh à gmail dawt com                        |\n| Jeremiah Morgan             | jere8184                    | jeremiahmorgan dawt bham à outlook dawt com       |\n| Tobias Alam                 | alamt22                     | tobiasal à umich dawt edu                         |\n| Alex Zhuohao He             | ZzzhHe                      | zhuohao dawt he à outlook dawt com                |\n\nIf you're a first-time committer, add yourself to the above list. This is not\njust for legal reasons, but also to keep an overview of all those nicknames.\n\nFor some authors, the full names and/or e-mail addresses are unknown. They have\nbeen marked by \"?\". Luckily, those author's contributions are only small typo\nfixes, so no copyright concerns should arise from this.\nIf your info is missing, wrong, or you want it to be removed for whatever\nreason, please contact us.\n\nA full list of all openage authors (\"contributors\") can also be determined\nfrom the VCS, e.g. via `git shortlog -sne`, or conveniently looked up on\n[the GitHub web interface](https://github.com/SFTtech/openage/graphs/contributors).\n\nDetails on individual authorships of files can be obtained via the VCS,\ne.g. via `git blame`, or the GitHub web interface.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License Version 3 for more details.\n\nIf you wish to include a file from openage in your project, make sure to\ninclude all required legal info. The easiest way to do this would probably\nbe to include a copy of this file (`copying.md`), and to leave the file's\ncopyright header untouched.\n\nPer-file license header guidelines:\n\nIn addition to this file, to prevent legal caveats, every source file *must*\ninclude a header.\n\n**openage-native** source files, that is, files that were created by\n_the openage authors_, require the following one-line header, preferably in\nthe first line, as a comment:\n\n    Copyright 20XX-20YY the openage authors. See copying.md for legal info.\n\n`20XX` is the year when the file was created, and `20YY` is the year when the\nfile was last edited. When editing a file, make sure the last-modification year\nis still correct.\n\n**3rd-party** source files, that is, files that were taken from other open-\nsource projects, require the following, longer header:\n\n    This file was ((taken|adapted)|contains (data|code)) from $PROJECT,\n    Copyright 1337-2013 Your Mom.\n    It's licensed under the terms of the 3-clause BSD license.\n    < any amount of lines of further legal information required by $PROJECT,\n      such as a reference to a copy of the $PROJECT's README or AUTHORS file >\n    < if third-party files from more than the one project were used in this\n      file, copy the above any number of times >\n    (Modifications|Other (data|code)|Everything else) Copyright 2014-2014 the openage authors.\n    See copying.md for further legal info.\n\nFor even more details, see the [regular expressions](buildsystem/codecompliance/legal.py).\n\nIn addition to the openage header, the file's original license header should\nbe retained if in doubt.\n\nThe \"license\" line is required only if the file is not licensed as\n\"GPLv3 or higher\".\n\nAuthors of 3rd-party files should generally not be entered in the\n\"openage authors\" list.\n\nAll 3rd-party files **must** be included in the following list:\n\nList of all 3rd-party files in openage:\n\nFrom [cabextract/libmspack](http://www.cabextract.org.uk/) ([LGPL 2.0](/legal/LGPLv2.0))\n\n - `libopenage/util/compress/lzxd.cpp`\n - `doc/code/lzx_compression_info`\n\ncmake modules ([3-clause BSD license](/legal/BSD-3-clause))\n\n - `buildsystem/modules/FindGPerfTools.cmake` (taken from [VAST](https://github.com/mavam/vast))\n - `buildsystem/modules/FindOpusfile.cmake` (taken from [Unvanquished](https://github.com/Unvanquished/Unvanquished))\n\n\n#### Disclaimer\n\nNotes about this file:\n\nI (`mic_e`) am not a lawyer. This is a free software project, we're doing this for\nfun. People convinced me that this legal shit must be done, so I did it, even\nthough I'd rather have spent the time on useful parts of the project.\nIf you see any legal issues, feel free to contact me.\n\nI, personally, despise in-sourcefile legal text blocks. They're a pest,\nand unlike many others, I don't simply accept them because\n\"that is what everybody does\". Thus, I worked out the minimal 1-line text above,\nwhich should be free of legal caveats, and a reasonable compromise.\nI'd be happy to see it used in other projects; you're free to use this file\n(`copying.md`) as a template for your project's legal documentation.\n"
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 1.458984375,
          "content": "{\n  \"nodes\": {\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1710146030,\n        \"narHash\": \"sha256-SZ5L6eA7HJ/nmkzGG7/ISclqe6oZdOZTNoesiInkXPQ=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"b1d9ab70662946ef0850d488da1c9019f3a9752a\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1711460390,\n        \"narHash\": \"sha256-akSgjDZL6pVHEfSE6sz1DNSXuYX6hq+P/1Z5IoYWs7E=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"44733514b72e732bd49f5511bd0203dea9b9a434\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixos-23.11\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"nixpkgs\": \"nixpkgs\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 1.490234375,
          "content": "{\n  # This is a nix flake that contains a declarative definition of the openage\n  # and nyan packages, providing convenient and reproducible builds and\n  # development shells.\n\n  description = \"Free (as in freedom) open source clone of the Age of Empires II engine\";\n\n  inputs = {\n    nixpkgs.url = \"github:NixOS/nixpkgs/nixos-23.11\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n  };\n\n  outputs = { self, nixpkgs, flake-utils, ... }:\n    flake-utils.lib.eachDefaultSystem (system:\n      let pkgs = import nixpkgs { inherit system; }; in\n      {\n        # This output is to build the derivation with `nix build` as well as to\n        # get development shells using `nix develop`.\n        # These are the packages provided by this flake: nyan and openage.\n        packages = rec {\n          # `nix build .#nyan` to build this\n          nyan = pkgs.callPackage ./nix/nyan.nix { };\n          # `nix build .#openage` to build this\n          openage = pkgs.callPackage ./nix/openage.nix {\n            # Nyan is not provided by nixpkgs, but it comes from this flake\n            inherit (self.packages.${system}) nyan;\n          };\n          # If no path is specified, openage is the default\n          default = openage;\n        };\n\n        # This output is to run the application directly with `nix run`\n        # (or `nix run .#openage` if you want to be explicit)\n        apps = rec {\n          openage = flake-utils.lib.mkApp { drv = self.packages.${system}.openage; };\n          default = openage;\n        };\n      });\n}\n"
        },
        {
          "name": "kevinfile",
          "type": "blob",
          "size": 0.79296875,
          "content": "# kevin ci config script for openage\n#\n# see here for the CI source code:\n# https://github.com/SFTtech/kevin\n\n\nsanity_check:\n\t- skip              (? if job != \"debian\" ?)\n\tmake checkall\n\n# Various optimisation options can affect warnings compiler generates.\n# Make sure both release and debug are tested. Arch job has more checks,\n# so it should run debug, while Debian can test build in release.\nconfigure:\n\t- env: mode=debug   compiler=gcc            (? if job == \"debian\" ?)\n\t- env: mode=debug   compiler=clang          (? if job == \"debian-clang\" ?)\n\t./configure --mode=${mode} --compiler=${compiler} --ccache --download-nyan\n\t# TODO: once all warnings are gone again, set --flags=\"-Werror\"\n\nbuild: configure\n\tmake -j$(nproc) build\n\ntest: build\n\tmake tests\n\ninstall: build\n\tmake install DESTDIR=/tmp/openage\n"
        },
        {
          "name": "legal",
          "type": "tree",
          "content": null
        },
        {
          "name": "libopenage",
          "type": "tree",
          "content": null
        },
        {
          "name": "nix",
          "type": "tree",
          "content": null
        },
        {
          "name": "openage",
          "type": "tree",
          "content": null
        },
        {
          "name": "openage_version",
          "type": "blob",
          "size": 0.005859375,
          "content": "0.6.0\n"
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "run.py.in",
          "type": "blob",
          "size": 0.685546875,
          "content": "#!/usr/bin/env python3\n\n\"\"\"\nOpenage can, and should, be launched via python3 -m openage.\n\nHowever, for dynamic analysis using LLVM's sanitizer, a self-compiled\nexecutable is needed.\n\nThis file is Cythonized with an embedded interpreter, producing ./run,\nwhich satisifies that requirement.\n\"\"\"\n\nif __name__ == '__main__@SOME_UNDEFINED_VARIABLE_CMAKE_WILL_REMOVE@':\n    # This is stupid but without it, Cython/Python cannot find the openage module.\n    import os\n    import sys\n    sys.path.append(os.getcwd())\n\n    from openage.__main__ import main\n    main()\nelse:\n    print(\"Running this in the source directory is not supported.\",\n          \"Please use `make run` or `bin/run.py` to start instead.\")\n"
        },
        {
          "name": "shell.nix",
          "type": "blob",
          "size": 0.783203125,
          "content": "{ pkgs? import <nixpkgs> {} }:\npkgs.mkShell {\n  nativeBuildInputs = [\n    pkgs.gcc\n    pkgs.clang\n    #pkgs.glibc\n    #pkgs.libcxx\n    #pkgs.lld\n    #pkgs.gdb\n    pkgs.cmake\n    pkgs.gnumake\n    pkgs.qt6.full\n    #pkgs.qtcreator\n\n    pkgs.eigen\n    pkgs.python39\n    pkgs.python39Packages.mako\n    pkgs.python39Packages.pillow\n    pkgs.python39Packages.numpy\n    pkgs.python39Packages.lz4\n    pkgs.python39Packages.pygments\n    pkgs.python39Packages.cython\n    pkgs.libepoxy\n    pkgs.libogg\n    pkgs.libpng\n    pkgs.dejavu_fonts\n    pkgs.ftgl\n    pkgs.fontconfig\n    pkgs.harfbuzz\n    pkgs.opusfile\n    pkgs.libopus\n    pkgs.python39Packages.pylint\n    pkgs.python39Packages.toml\n    pkgs.libsForQt6.qt6.qtdeclarative\n    pkgs.libsForQt6.qt6.qtquickcontrols\n    pkgs.libsForQt6.qt6.qtmultimedia\n  ];\n}\n"
        }
      ]
    }
  ]
}