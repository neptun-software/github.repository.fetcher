{
  "metadata": {
    "timestamp": 1736561312702,
    "page": 320,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "TomSchimansky/CustomTkinter",
      "stars": 11818,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.173828125,
          "content": "# https://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[{*.py,setup.cfg}]\nindent_size = 4\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.103515625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n.idea/\n\n# Local ignores\n.DS_Store\ndocumentation_images/customtkinter_design.afdesign\nimages/\nReadme_pypi.md\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.275390625,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.2.0\n    hooks:\n      - id: check-yaml\n      - id: end-of-file-fixer\n      - id: trailing-whitespace\n  - repo: https://github.com/asottile/setup-cfg-fmt\n    rev: v1.20.1\n    hooks:\n    -   id: setup-cfg-fmt\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.5185546875,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file!\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\nToDo:\n - cursor configuring\n - overwrite winfo methods\n - set icon (self.call(\"wm\", \"iconphoto\", self._w, tkinter.PhotoImage(file=\"test_images/CustomTkinter_logo_single.png\")))\n - add option to change label position for checkbox, switch, radiobutton #628\n\n\n## [5.2.0] - 2022-05-02\n### Added\n - Mostly bug fixes\n\n## [5.1.0] - 2022-05-02\n### Added\n - Added CTkScrollableFrame\n\n### Changed\n - Changed license to MIT\n\n## [5.0.0] - 2022-11-13\n### Added\n - Added CTkTextbox with automatic x and y scrollbars, corner_radius, border_width, border_spacing\n - Added CTkSegmentedButton\n - Added CTkTabview\n - Added .cget() method to all widgets and windows\n - Added .bind() and .focus() methods to almost all widgets\n - Added 'anchor' option to CTkButton to position image and text inside the button\n - Added 'anchor' option to CTkOptionMenu and 'justify' option to CTkComboBox\n - Added CTkFont class\n - Added CTkImage class to replace PIL.ImageTk.PhotoImage, supports scaling and two images for appearance mode, supports configuring\n - Added missing configure options for multiple widgets\n\n### Changed\n - Changed value for transparent colors (same as background) from None to 'transparent'\n - Changed 'text_font' attribute to 'font' in all widgets, changed 'dropdown_text_font' to 'dropdown_font'\n - Changed 'dropdown_color' attribute to 'dropdown_fg_color' for combobox, optionmenu\n - Changed 'orient' attribute of CTkProgressBar and CTkSlider to 'orientation'\n - Width and height attributes of CTkCheckBox, CTkRadioButton, CTkSwitch now describe the outer dimensions of the whole widget. The button/switch size is described by separate attributes like checkbox_width, checkbox_height\n - font attribute must be tuple or CTkFont now, all size values are measured in pixel now\n - Changed dictionary key 'window_bg_color' to 'window' in theme files\n - CTkInputDialog attributes completely changed\n - CTkScrollbar attributes scrollbar_color, scrollbar_hover_color changed to button_color, button_hover_color\n\n### Removed\n - Removed setter and getter functions like set_text in CTkButton\n - Removed bg and background attribute from CTk and CTkToplevel, always use fg_color\n - Removed Settings class and moved settings to widget and window classes\n - removed customtkinter.set_spacing_scaling(), now set_widget_scaling() is used for spacing too\n\n## [4.6.0] - 2022-09-17\n### Added\n - CTkProgressBar indeterminate mode, automatic progress loop with .start() and .stop()\n\n## [4.5.0] - 2022-06-23\n### Added\n - CTkScrollbar (vertical, horizontal)\n\n## [4.4.0] - 2022-06-14\n### Changed\n - Changed custom dropdown menu to normal tkinter.Menu because of multiple platform specific bugs\n\n## [4.3.0] - 2022-06-1\n### Added\n - Added CTkComboBox\n - Small fixes for new dropdown menu\n\n## [4.2.0] - 2022-05-30\n### Added\n - CTkOptionMenu with custom dropdown menu\n - Support for clicking on labels of CTkCheckBox, CTkRadioButton, CTkSwitch\n\n## [4.1.0] - 2022-05-24\n### Added\n - Configure width and height for frame, button, label, progressbar, slider, entry\n\n## [4.0.0] - 2022-05-22\n### Added\n - This changelog file\n - Adopted semantic versioning\n - Added HighDPI scaling to all widgets and geometry managers (place, pack, grid)\n - Restructured CTkSettings and renamed a few manager classes\n - Orientation attribute for slider and progressbar\n\n### Removed\n - A few unnecessary tests\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2023 Tom Schimansky\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1826171875,
          "content": "include customtkinter/assets/*\ninclude customtkinter/assets/fonts/*\ninclude customtkinter/assets/fonts/Roboto/*\ninclude customtkinter/assets/icons/*\ninclude customtkinter/assets/themes/*\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 5.20703125,
          "content": "<p align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"./documentation_images/CustomTkinter_logo_dark.png\">\n    <img src=\"./documentation_images/CustomTkinter_logo_light.png\">\n  </picture>\n</p>\n\n<div align=\"center\">\n\n![PyPI](https://img.shields.io/pypi/v/customtkinter)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/customtkinter?color=green&label=downloads)\n![Downloads last 6 month](https://static.pepy.tech/personalized-badge/customtkinter?period=total&units=international_system&left_color=grey&right_color=green&left_text=downloads%20last%206%20month)\n![PyPI - License](https://img.shields.io/badge/license-MIT-blue)\n![LOC](https://tokei.rs/b1/github/tomschimansky/customtkinter?category=lines)\n\n</div>\n\n---\n\n<div align=\"center\">\n<a href=\"https://www.paypal.com/donate/?hosted_button_id=LK5QAZYRN2R2A\"><img src=\"documentation_images/paypal_donate_button.png\" width=170 alt=\"Paypal donation button\"></a>\n\n<a></a>\n\n| Massive Thanks to all the People who Donated to help this Project 😇 |\n|----------------------------------------------|\n\n<h3>\nOfficial website: https://customtkinter.tomschimansky.com\n</h3>\n</div>\n\nCustomTkinter is a python UI-library based on Tkinter, which provides new, modern and\nfully customizable widgets. They are created and used like normal Tkinter widgets and\ncan also be used in combination with normal Tkinter elements. The widgets\nand the window colors either adapt to the system appearance or the manually set mode\n('light', 'dark'), and all CustomTkinter widgets and windows support HighDPI scaling\n(Windows, macOS). With CustomTkinter you'll get a consistent and modern look across all\ndesktop platforms (Windows, macOS, Linux).\n\n![](documentation_images/complex_example_dark_Windows.png)\n| _`complex_example.py` on Windows 11 with dark mode and 'blue' theme_\n\n![](documentation_images/complex_example_light_macOS.png)\n| _`complex_example.py` on macOS in light mode and standard 'blue' theme_\n###\n\n\n## Installation\nInstall the module with pip:\n```\npip3 install customtkinter\n```\n**Update existing installation:** ```pip3 install customtkinter --upgrade```\\\n(update as often as possible because this library is under active development)\n\n## Documentation\n\nThe **official** documentation can be found here:\n\n**➡️ https://customtkinter.tomschimansky.com/documentation**.\n\n## Example Program\nTo test customtkinter you can try this simple example with only a single button:\n```python\nimport customtkinter\n\ncustomtkinter.set_appearance_mode(\"System\")  # Modes: system (default), light, dark\ncustomtkinter.set_default_color_theme(\"blue\")  # Themes: blue (default), dark-blue, green\n\napp = customtkinter.CTk()  # create CTk window like you do with the Tk window\napp.geometry(\"400x240\")\n\ndef button_function():\n    print(\"button pressed\")\n\n# Use CTkButton instead of tkinter Button\nbutton = customtkinter.CTkButton(master=app, text=\"CTkButton\", command=button_function)\nbutton.place(relx=0.5, rely=0.5, anchor=customtkinter.CENTER)\n\napp.mainloop()\n```\nwhich results in the following window on macOS:\n\n<img src=\"documentation_images/single_button_macOS.png\" width=\"400\"/>\n\nIn the [examples folder](https://github.com/TomSchimansky/CustomTkinter/tree/master/examples), you\ncan find more example programs and in the [Documentation](https://github.com/TomSchimansky/CustomTkinter/wiki)\nyou can find further information on the appearance mode, scaling, themes and all widgets.\n\n## More Examples and Showcase\n\n### Appearance mode change and scaling change\n\nCustomTkinter can adapt to the Windows 10/11 light or dark mode:\n\nhttps://user-images.githubusercontent.com/66446067/204672968-6584f360-4c52-434f-9c16-25761341368b.mp4\n\n| _`complex_example.py` on Windows 11 with system appearance mode change and standard 'blue' theme_\n###\n\nOn macOS you either need python3.10 or higher or the anaconda python\nversion to get a dark window header (Tcl/Tk >= 8.6.9 required):\n\nhttps://user-images.githubusercontent.com/66446067/204673854-b6cbcfda-d9a1-4425-92a3-5b57d7f2fd6b.mp4\n\n| _`complex_example.py` on macOS with system appearance mode change, user-scaling change and standard 'blue' theme_\n###\n\n### Button with images\nIt's possible to put an image on a CTkButton. You just have to\npass a PhotoImage object to the CTkButton with the ``image`` argument.\nIf you want no text at all you have to set ``text=\"\"`` or you specify\nhow to position the text and image at once with the ``compound`` option:\n\n![](documentation_images/image_example_dark_Windows.png)\n| _`image_example.py` on Windows 11_\n###\n\n### Scrollable Frames\nScrollable frames are possible in vertical or horizontal orientation and can be combined\nwith any other widgets.\n![](documentation_images/scrollable_frame_example_Windows.png)\n| _`scrollable_frame_example.py` on Windows 11_\n\n### Integration of TkinterMapView widget\nIn the following example I used a TkinterMapView which integrates\nwell with a CustomTkinter program. It's a tile based map widget which displays\nOpenStreetMap or other tile based maps:\n\nhttps://user-images.githubusercontent.com/66446067/204675835-1584a8da-5acc-4993-b4a9-e70f06fa14b0.mp4\n\n| _`examples/map_with_customtkinter.py` from TkinterMapView repository on Windows 11_\n\nYou can find the TkinterMapView library and example program here:\nhttps://github.com/TomSchimansky/TkinterMapView\n"
        },
        {
          "name": "customtkinter",
          "type": "tree",
          "content": null
        },
        {
          "name": "documentation_images",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.7392578125,
          "content": "[build-system]\nrequires = [\"setuptools>=42\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.tbump]\ngithub_url = \"https://github.com/TomSchimansky/CustomTkinter\"\n\n[tool.tbump.version]\ncurrent = \"5.2.2\"\n\n# Example of a semver regexp.\n# Make sure this matches current_version before\n# using tbump\nregex = '''\n  (?P<major>\\d+)\n  \\.\n  (?P<minor>\\d+)\n  \\.\n  (?P<patch>\\d+)\n  '''\n\n[tool.tbump.git]\nmessage_template = \"Bump to {new_version}\"\ntag_template = \"v{new_version}\"\n\n# For each file to patch, add a [[tool.tbump.file]] config\n# section containing the path of the file, relative to the\n# tbump.toml location.\n[[tool.tbump.file]]\nsrc = \"setup.cfg\"\n\n[[tool.tbump.file]]\nsrc = \"customtkinter/__init__.py\"\nsearch = \"__version__ = \\\"{current_version}\\\"\"\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0517578125,
          "content": "darkdetect~=0.3.1\ntyping-extensions~=4.4.0\npackaging\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.318359375,
          "content": "[metadata]\nname = customtkinter\nversion = 5.2.2\ndescription = Create modern looking GUIs with Python\nlong_description = A modern and customizable python UI-library based on Tkinter: https://customtkinter.tomschimansky.com\nlong_description_content_type = text/markdown\nurl = https://customtkinter.tomschimansky.com\nauthor = Tom Schimansky\nlicense = Creative Commons Zero v1.0 Universal\nlicense_file = LICENSE\nclassifiers =\n    License :: OSI Approved :: MIT License\n    Operating System :: OS Independent\n    Programming Language :: Python :: 3 :: Only\n\n[project.urls]\nhomepage = https://customtkinter.tomschimansky.com\ndocumentation = https://customtkinter.tomschimansky.com/documentation\nrepository = https://github.com/tomschimansky/customtkinter\n\n[options]\npython_requires = >=3.7\npackages =\n    customtkinter\n    customtkinter.windows\n    customtkinter.windows.widgets\n    customtkinter.windows.widgets.appearance_mode\n    customtkinter.windows.widgets.core_rendering\n    customtkinter.windows.widgets.core_widget_classes\n    customtkinter.windows.widgets.font\n    customtkinter.windows.widgets.image\n    customtkinter.windows.widgets.scaling\n    customtkinter.windows.widgets.theme\n    customtkinter.windows.widgets.utility\ninstall_requires =\n    darkdetect\n    typing_extensions; python_version<=\"3.7\"\n    packaging\ninclude_package_data = True\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}