{
  "metadata": {
    "timestamp": 1736561333154,
    "page": 352,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "FujiwaraChoki/MoneyPrinter",
      "stars": 11070,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".env.example",
          "type": "blob",
          "size": 0.787109375,
          "content": "# See EnvironmentVariables.md for more information.\n\n# Necessary API Keys\n# -------------------\n\n# TikTok Session ID\n# Obtain your session ID by logging into TikTok and copying the sessionid cookie.\nTIKTOK_SESSION_ID=\"\"\n\n# ImageMagick Binary Path\n# Download ImageMagick from https://imagemagick.org/script/download.php\nIMAGEMAGICK_BINARY=\"\"\n\n# Pexels API Key\n# Register at https://www.pexels.com/api/ to get your API key.\nPEXELS_API_KEY=\"\"\n\n# Optional API Keys\n# -----------------\n\n# OpenAI API Key\n# Visit https://openai.com/api/ for details on obtaining an API key.\nOPENAI_API_KEY=\"\"\n\n# AssemblyAI API Key\n# Sign up at https://www.assemblyai.com/ to receive an API key.\nASSEMBLY_AI_API_KEY=\"\"\n\n# Google API Key\n# Generate your API key through https://makersuite.google.com/app/apikey\nGOOGLE_API_KEY=\"\"\n \n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1748046875,
          "content": "__pycache__\n.env\ntemp/*\nsounds/*\noutput/*\nimages/*\n*.zip\n*.srt\n*.mp4\n*.mp3\n.history\nsubtitles/*\n/venv\nclient_secret.json\nmain.py-oauth2.json\n.DS_Store\nBackend/output*\nSongs/\nvenv/"
        },
        {
          "name": "Backend",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.7841796875,
          "content": "FROM python:3.11-slim-buster\n\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n    build-essential autoconf pkg-config wget ghostscript curl libpng-dev\n\nRUN wget https://github.com/ImageMagick/ImageMagick/archive/refs/tags/7.1.0-31.tar.gz && \\\n    tar xzf 7.1.0-31.tar.gz && \\\n    rm 7.1.0-31.tar.gz && \\\n    apt-get clean && \\\n    apt-get autoremove\n\nRUN sh ./ImageMagick-7.1.0-31/configure --prefix=/usr/local --with-bzlib=yes --with-fontconfig=yes --with-freetype=yes --with-gslib=yes --with-gvc=yes --with-jpeg=yes --with-jp2=yes --with-png=yes --with-tiff=yes --with-xml=yes --with-gs-font-dir=yes && \\\n    make -j && make install && ldconfig /usr/local/lib/\n\nWORKDIR /tmp\n\nRUN pip install --upgrade pip\n\nWORKDIR /app\n\nADD ./requirements.txt .\n\nRUN pip install -r requirements.txt"
        },
        {
          "name": "EnvironmentVariables.md",
          "type": "blob",
          "size": 1.123046875,
          "content": "# Environment Variables\n\n## Required\n\n- TIKTOK_SESSION_ID: Your TikTok session ID is required. Obtain it by logging into TikTok in your browser and copying the value of the `sessionid` cookie.\n\n- IMAGEMAGICK_BINARY: The filepath to the ImageMagick binary (.exe file) is needed. Obtain it [here](https://imagemagick.org/script/download.php).\n\n- PEXELS_API_KEY: Your unique Pexels API key is required. Obtain yours [here](https://www.pexels.com/api/).\n\n## Optional\n\n- OPENAI_API_KEY: Your unique OpenAI API key is required. Obtain yours [here](https://platform.openai.com/api-keys), only nessecary if you want to use the OpenAI models.\n\n- GOOGLE_API_KEY: Your Gemini API key is essential for Gemini Pro Model. Generate one securely at [Get API key | Google AI Studio](https://makersuite.google.com/app/apikey)\n\n* ASSEMBLY_AI_API_KEY: Your unique AssemblyAI API key is required. You can obtain one [here](https://www.assemblyai.com/app/). This field is optional; if left empty, the subtitle will be created based on the generated script. Subtitles can also be created locally.\n\nJoin the [Discord](https://dsc.gg/fuji-community) for support and updates.\n"
        },
        {
          "name": "Frontend",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2024 FujiwaraChoki\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Local.md",
          "type": "blob",
          "size": 3.90625,
          "content": "# MoneyPrinter - Running locally\n\nAutomate the creation of YouTube Shorts locally, simply by providing a video topic to talk about.\n\n> **Important** Please make sure you look through existing/closed issues before opening your own. If it's just a question, please join our [discord](https://dsc.gg/fuji-community) and ask there.\n\n> **🎥** Watch the video on [YouTube](https://youtu.be/mkZsaDA2JnA?si=pNne3MnluRVkWQbE).\n\n## Installation 📥\n\n`MoneyPrinter` requires Python 3.11 to run effectively. If you don't have Python installed, you can download it from [here](https://www.python.org/downloads/).\n\nAfter you finished installing Python, you can install `MoneyPrinter` by following the steps below:\n\n```bash\ngit clone https://github.com/FujiwaraChoki/MoneyPrinter.git\ncd MoneyPrinter\n\n# Install requirements\npip install -r requirements.txt\n\n# Copy .env.example and fill out values\ncp .env.example .env\n\n# Run the backend server\ncd Backend\npython main.py\n\n# Run the frontend server\ncd ../Frontend\npython -m http.server 3000\n```\n\nSee [`.env.example`](.env.example) for the required environment variables.\n\nIf you need help, open [EnvironmentVariables.md](EnvironmentVariables.md) for more information.\n\n## Usage 🛠️\n\n1. Copy the `.env.example` file to `.env` and fill in the required values\n1. Open `http://localhost:3000` in your browser\n1. Enter a topic to talk about\n1. Click on the \"Generate\" button\n1. Wait for the video to be generated\n1. The video's location is `MoneyPrinter/output.mp4`\n\n## Music 🎵\n\nTo use your own music, compress all your MP3 Files into a ZIP file and upload it somewhere. Provide the link to the ZIP file in the Frontend.\n\nIt is recommended to use Services such as [Filebin](https://filebin.net) to upload your ZIP file. If you decide to use Filebin, provide the Frontend with the absolute path to the ZIP file by using More -> Download File, e.g. (use this [Popular TT songs ZIP](https://filebin.net/klylrens0uk2pnrg/drive-download-20240209T180019Z-001.zip), not this [Popular TT songs](https://filebin.net/2avx134kdibc4c3q))\n\nYou can also just move your MP3 files into the `Songs` folder.\n\n## Fonts 🅰\n\nAdd your fonts to the `fonts/` folder, and load them by specifying the font name on line `124` in `Backend/video.py`.\n\n## Automatic YouTube Uploading 🎥\n\nMoneyPrinter now includes functionality to automatically upload generated videos to YouTube.\n\nTo use this feature, you need to:\n\n1. Create a project inside your Google Cloud Platform -> [GCP](https://console.cloud.google.com/).\n1. Obtain `client_secret.json` from the project and add it to the Backend/ directory.\n1. Enable the YouTube v3 API in your project -> [GCP-API-Library](https://console.cloud.google.com/apis/library/youtube.googleapis.com)\n1. Create an `OAuth consent screen` and add yourself (the account of your YouTube channel) to the testers.\n1. Enable the following scopes in the `OAuth consent screen` for your project:\n\n```\n'https://www.googleapis.com/auth/youtube'\n'https://www.googleapis.com/auth/youtube.upload'\n'https://www.googleapis.com/auth/youtubepartner'\n```\n\nAfter this, you can generate the videos and you will be prompted to authenticate yourself.\n\nThe authentication process creates and stores a `main.py-oauth2.json` file inside the Backend/ directory. Keep this file to maintain authentication, or delete it to re-authenticate (for example, with a different account).\n\nVideos are uploaded as private by default. For a completely automated workflow, change the privacyStatus in main.py to your desired setting (\"public\", \"private\", or \"unlisted\").\n\nFor videos that have been locked as private due to upload via an unverified API service, you will not be able to appeal. You’ll need to re-upload the video via a verified API service or via the YouTube app/site. The unverified API service can also apply for an API audit. So make sure to verify your API, see [OAuth App Verification Help Center](https://support.google.com/cloud/answer/13463073) for more information.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.12890625,
          "content": "# MoneyPrinter 💸\n\nAutomate the creation of YouTube Shorts, simply by providing a video topic to talk about.\n\n<a href=\"https://trendshift.io/repositories/7545\" target=\"_blank\"><img src=\"https://trendshift.io/api/badge/repositories/7545\" alt=\"FujiwaraChoki%2FMoneyPrinter | Trendshift\" style=\"width: 250px; height: 55px;\" width=\"250\" height=\"55\"/></a>\n\n> **Important** Please make sure you look through existing/closed issues before opening your own. If it's just a question, please join our [discord](https://dsc.gg/fuji-community) and ask there.\n\n> **🎥** Watch the video on [YouTube](https://youtu.be/mkZsaDA2JnA?si=pNne3MnluRVkWQbE).\n\nCheck out the instructions for the local version [here](Local.md).\n\n## FAQ 🤔\n\n### How do I get the TikTok session ID?\n\nYou can obtain your TikTok session ID by logging into TikTok in your browser and copying the value of the `sessionid` cookie.\n\n### My ImageMagick binary is not being detected\n\nMake sure you set your path to the ImageMagick binary correctly in the `.env` file, it should look something like this:\n\n```env\nIMAGEMAGICK_BINARY=\"C:\\\\Program Files\\\\ImageMagick-7.1.0-Q16\\\\magick.exe\"\n```\n\nDon't forget to use double backslashes (`\\\\`) in the path, instead of one.\n\n### I can't install `playsound`: Wheel failed to build\n\nIf you're having trouble installing `playsound`, you can try installing it using the following command:\n\n```bash\npip install -U wheel\npip install -U playsound\n```\n\nIf you were not able to find your solution, please ask in the discord or create a new issue, so that the community can help you.\n\n## Donate 🎁\n\nIf you like and enjoy `MoneyPrinter`, and would like to donate, you can do that by clicking on the button on the right hand side of the repository. ❤️\nYou will have your name (and/or logo) added to this repository as a supporter as a sign of appreciation.\n\n## Contributing 🤝\n\nPull Requests will not be accepted for the time-being.\n\n## Star History 🌟\n\n[![Star History Chart](https://api.star-history.com/svg?repos=FujiwaraChoki/MoneyPrinter&type=Date)](https://star-history.com/#FujiwaraChoki/MoneyPrinter&Date)\n\n## License 📝\n\nSee [`LICENSE`](LICENSE) file for more information.\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.8642578125,
          "content": "version: \"3\"\nservices:\n  frontend:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    container_name: \"frontend\"\n    ports:\n      - \"8001:8001\"\n    command: [\"python3\", \"-m\", \"http.server\", \"8001\", \"--directory\", \"frontend\"]\n    volumes:\n      - ./Frontend:/app/frontend\n    restart: always\n  backend:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    container_name: \"backend\"\n    ports:\n      - \"8080:8080\"\n    command: [\"python3\", \"backend/main.py\"]\n    volumes:\n      - ./files:/temp\n      - ./Backend:/app/backend\n      - ./fonts:/app/fonts\n    environment:\n      - ASSEMBLY_AI_API_KEY=${ASSEMBLY_AI_API_KEY}\n      - TIKTOK_SESSION_ID=${TIKTOK_SESSION_ID}\n      - IMAGEMAGICK_BINARY=/usr/local/bin/magick\n      - PEXELS_API_KEY=${PEXELS_API_KEY}\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n    depends_on:\n      - frontend\n    restart: always\n\nvolumes:\n  files:\n"
        },
        {
          "name": "fonts",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.3046875,
          "content": "g4f\nsetuptools\nwheel\nrequests==2.31.0\nmoviepy==1.0.3\ntermcolor==2.4.0\nflask==3.0.0\ncurl_cffi\nflask-cors==4.0.0\nplaysound==1.3.0\nPillow==9.5.0\npython-dotenv==1.0.0\nsrt_equalizer==0.1.8\nplatformdirs==4.1.0\nundetected_chromedriver\nassemblyai\nbrotli\ngoogle-api-python-client \noauth2client\nopenai\ngoogle-generativeai\n"
        }
      ]
    }
  ]
}