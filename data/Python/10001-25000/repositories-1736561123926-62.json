{
  "metadata": {
    "timestamp": 1736561123926,
    "page": 62,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Delgan/loguru",
      "stars": 20493,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.130859375,
          "content": "comment: false\n\ncoverage:\n  status:\n    patch: no\n    changes: no\n    project:\n      default:\n        target: 100%\n        threshold:\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.1484375,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n# Idea IDE\n.idea/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.79296875,
          "content": "repos:\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v5.0.0\n  hooks:\n  - id: end-of-file-fixer\n  - id: trailing-whitespace\n  - id: check-added-large-files\n  - id: mixed-line-ending\n    args: [--fix=lf]\n- repo: https://github.com/crate-ci/typos\n  rev: v1.26.0\n  hooks:\n  - id: typos\n- repo: https://github.com/macisamuele/language-formatters-pre-commit-hooks\n  rev: v2.14.0\n  hooks:\n  - id: pretty-format-ini\n    args: [--autofix]\n  - id: pretty-format-yaml\n    args: [--autofix, --indent, '2']\n- repo: https://github.com/ComPWA/taplo-pre-commit\n  rev: v0.9.3\n  hooks:\n  - id: taplo-format\n- repo: https://github.com/ambv/black\n  rev: 24.10.0\n  hooks:\n  - id: black\n- repo: https://github.com/astral-sh/ruff-pre-commit\n  rev: v0.8.0\n  hooks:\n  - id: ruff\n    args: [--fix, --exit-non-zero-on-fix]\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.23046875,
          "content": "version: 2\n\nbuild:\n  os: ubuntu-20.04\n  tools:\n    python: '3.11'\n\npython:\n  install:\n  - method: pip\n    path: .\n    extra_requirements:\n    - dev\n\nsphinx:\n  builder: html\n  configuration: docs/conf.py\n\nformats:\n- htmlzip\n- pdf\n- epub\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.rst",
          "type": "blob",
          "size": 22.7099609375,
          "content": "`Unreleased`_\n=============\n\n- Fix a regression preventing formatting of ``record[\"time\"]`` when using ``zoneinfo.ZoneInfo`` timezones (`#1260 <https://github.com/Delgan/loguru/pull/1260>`_, thanks `@bijlpieter <https://github.com/bijlpieter>`_).\n\n\n`0.7.3`_ (2024-12-06)\n=====================\n\n- Fix Cython incompatibility caused by the absence of underlying stack frames, which resulted in a ``ValueError`` during logging (`#88 <https://github.com/Delgan/loguru/issues/88>`_).\n- Fix possible ``RuntimeError`` when removing all handlers with ``logger.remove()`` due to thread-safety issue (`#1183 <https://github.com/Delgan/loguru/issues/1183>`_, thanks `@jeremyk <https://github.com/jeremyk>`_).\n- Fix ``diagnose=True`` option of exception formatting not working as expected with Python 3.13 (`#1235 <https://github.com/Delgan/loguru/issues/1235>`_, thanks `@etianen <https://github.com/etianen>`_).\n- Fix non-standard level names not fully compatible with ``logging.Formatter()`` (`#1231 <https://github.com/Delgan/loguru/issues/1231>`_, thanks `@yechielb2000 <https://github.com/yechielb2000>`_).\n- Fix inability to display a literal ``\"\\\"`` immediately before color markups (`#988 <https://github.com/Delgan/loguru/issues/988>`_).\n- Fix possible infinite recursion when an exception is raised from a ``__repr__``  method decorated with ``logger.catch()`` (`#1044 <https://github.com/Delgan/loguru/issues/1044>`_).\n- Improve performance of ``datetime`` formatting while logging messages (`#1201 <https://github.com/Delgan/loguru/issues/1201>`_, thanks `@trim21 <https://github.com/trim21>`_).\n- Reduce startup time in the presence of installed but unused ``IPython`` third-party library (`#1001 <https://github.com/Delgan/loguru/issues/1001>`_, thanks `@zakstucke <https://github.com/zakstucke>`_).\n\n\n`0.7.2`_ (2023-09-11)\n=====================\n\n- Add support for formatting of ``ExceptionGroup`` errors (`#805 <https://github.com/Delgan/loguru/issues/805>`_).\n- Fix possible ``RuntimeError`` when using ``multiprocessing.set_start_method()`` after importing the ``logger`` (`#974 <https://github.com/Delgan/loguru/issues/974>`_).\n- Fix formatting of possible ``__notes__`` attached to an ``Exception`` (`#980 <https://github.com/Delgan/loguru/issues/980>`_).\n\n\n`0.7.1`_ (2023-09-04)\n=====================\n\n- Add a new ``context`` optional argument to ``logger.add()`` specifying ``multiprocessing`` context (like ``\"spawn\"`` or ``\"fork\"``) to be used internally instead of the default one (`#851 <https://github.com/Delgan/loguru/issues/851>`_).\n- Add support for true colors on Windows using ANSI/VT console when available (`#934 <https://github.com/Delgan/loguru/issues/934>`_, thanks `@tunaflsh <https://github.com/tunaflsh>`_).\n- Fix possible deadlock when calling ``logger.complete()`` with concurrent logging of an asynchronous sink (`#906 <https://github.com/Delgan/loguru/issues/906>`_).\n- Fix file possibly rotating too early or too late when re-starting an application around midnight (`#894 <https://github.com/Delgan/loguru/issues/894>`_).\n- Fix inverted ``\"<hide>\"`` and ``\"<strike>\"`` color tags (`#943 <https://github.com/Delgan/loguru/pull/943>`_, thanks `@tunaflsh <https://github.com/tunaflsh>`_).\n- Fix possible untraceable errors raised when logging non-unpicklable ``Exception`` instances while using ``enqueue=True`` (`#329 <https://github.com/Delgan/loguru/issues/329>`_).\n- Fix possible errors raised when logging non-picklable ``Exception`` instances while using ``enqueue=True`` (`#342 <https://github.com/Delgan/loguru/issues/342>`_, thanks `@ncoudene <https://github.com/ncoudene>`_).\n- Fix missing seconds and microseconds when formatting timezone offset that requires such accuracy (`#961 <https://github.com/Delgan/loguru/issues/961>`_).\n- Raise ``ValueError`` if an attempt to use nanosecond precision for time formatting is detected (`#855 <https://github.com/Delgan/loguru/issues/855>`_).\n\n\n`0.7.0`_ (2023-04-10)\n=====================\n\n- Update ``InterceptHandler`` recipe to make it compatible with Python 3.11 (`#654 <https://github.com/Delgan/loguru/issues/654>`_).\n- Add a new ``watch`` optional argument to file sinks in order to automatically re-create possibly deleted or changed file (`#471 <https://github.com/Delgan/loguru/issues/471>`_).\n- Make ``patch()`` calls cumulative instead of overriding the possibly existing patching function (`#462 <https://github.com/Delgan/loguru/issues/462>`_).\n- Make sinks added with ``enqueue=True`` and ``catch=False`` still process logged messages in case of internal exception (`#833 <https://github.com/Delgan/loguru/issues/833>`_).\n- Avoid possible deadlocks caused by re-using the logger inside a sink, a signal handler or a ``__del__`` method. Since the logger is not re-entrant, such misuse will be detected and will now generate a ``RuntimeError`` (`#712 <https://github.com/Delgan/loguru/issues/712>`_, thanks `@jacksmith15 <https://github.com/jacksmith15>`_).\n- Fix file sink rotation using an aware ``datetime.time`` for which the timezone was ignored (`#697 <https://github.com/Delgan/loguru/issues/697>`_).\n- Fix logs colorization not automatically enabled for Jupyter Notebook and Google Colab (`#494 <https://github.com/Delgan/loguru/issues/494>`_).\n- Fix logs colorization not automatically enabled for Github Actions and others CI platforms (`#604 <https://github.com/Delgan/loguru/issues/604>`_).\n- Fix ``logger.complete()`` possibly hanging forever when ``enqueue=True`` and ``catch=False`` if internal thread killed due to ``Exception`` raised by sink (`#647 <https://github.com/Delgan/loguru/issues/647>`_).\n- Fix incompatibility with ``freezegun`` library used to simulate time (`#600 <https://github.com/Delgan/loguru/issues/600>`_).\n- Raise exception if ``logger.catch()`` is used to wrap a class instead of a function to avoid unexpected behavior (`#623 <https://github.com/Delgan/loguru/issues/623>`_).\n\n\n`0.6.0`_ (2022-01-29)\n=====================\n\n- Remove internal use of ``pickle.loads()`` to fix the (finally rejected) security vulnerability referenced as `CVE-2022-0329 <https://nvd.nist.gov/vuln/detail/CVE-2022-0329>`_ (`#563 <https://github.com/Delgan/loguru/issues/563>`_).\n- Modify coroutine sink to make it discard log messages when ``loop=None`` and no event loop is running (due to internally using ``asyncio.get_running_loop()`` in place of ``asyncio.get_event_loop()``).\n- Remove the possibility to add a coroutine sink with ``enqueue=True`` if ``loop=None`` and no event loop is running.\n- Change default encoding of file sink to be ``utf8`` instead of ``locale.getpreferredencoding()`` (`#339 <https://github.com/Delgan/loguru/issues/339>`_).\n- Prevent non-ascii characters to be escaped while logging JSON message with ``serialize=True`` (`#575 <https://github.com/Delgan/loguru/pull/575>`_, thanks `@ponponon <https://github.com/ponponon>`_).\n- Fix ``flake8`` errors and improve code readability (`#353 <https://github.com/Delgan/loguru/issues/353>`_, thanks `@AndrewYakimets <https://github.com/AndrewYakimets>`_).\n\n\n`0.5.3`_ (2020-09-20)\n=====================\n\n- Fix child process possibly hanging at exit while combining ``enqueue=True`` with third party library like ``uwsgi`` (`#309 <https://github.com/Delgan/loguru/issues/309>`_, thanks `@dstlmrk <https://github.com/dstlmrk>`_).\n- Fix possible exception during formatting of non-string messages (`#331 <https://github.com/Delgan/loguru/issues/331>`_).\n\n\n`0.5.2`_ (2020-09-06)\n=====================\n\n- Fix ``AttributeError`` within handlers using ``serialize=True`` when calling ``logger.exception()`` outside of the context of an exception (`#296 <https://github.com/Delgan/loguru/issues/296>`_).\n- Fix error while logging an exception containing a non-picklable ``value`` to a handler with ``enqueue=True`` (`#298 <https://github.com/Delgan/loguru/issues/298>`_).\n- Add support for async callable classes (with ``__call__`` method) used as sinks (`#294 <https://github.com/Delgan/loguru/pull/294>`_, thanks `@jessekrubin <https://github.com/jessekrubin>`_).\n\n\n`0.5.1`_ (2020-06-12)\n=====================\n\n- Modify the way the ``extra`` dict is used by ``LogRecord`` in order to prevent possible ``KeyError`` with standard ``logging`` handlers (`#271 <https://github.com/Delgan/loguru/issues/271>`_).\n- Add a new ``default`` optional argument to ``logger.catch()``, it should be the returned value by the decorated function in case an error occurred (`#272 <https://github.com/Delgan/loguru/issues/272>`_).\n- Fix ``ValueError`` when using ``serialize=True`` in combination with ``logger.catch()`` or ``logger.opt(record=True)`` due to circular reference of the ``record`` dict (`#286 <https://github.com/Delgan/loguru/issues/286>`_).\n\n\n`0.5.0`_ (2020-05-17)\n=====================\n\n- Remove the possibility to modify the severity ``no`` of levels once they have been added in order to prevent surprising behavior (`#209 <https://github.com/Delgan/loguru/issues/209>`_).\n- Add better support for \"structured logging\" by automatically adding ``**kwargs`` to the ``extra`` dict besides using these arguments to format the message. This behavior can be disabled by setting the new ``.opt(capture=False)`` parameter (`#2 <https://github.com/Delgan/loguru/issues/2>`_).\n- Add a new ``onerror`` optional argument to ``logger.catch()``, it should be a function which will be called when an exception occurs in order to customize error handling (`#224 <https://github.com/Delgan/loguru/issues/224>`_).\n- Add a new ``exclude`` optional argument to ``logger.catch()``, is should be a type of exception to be purposefully ignored and propagated to the caller without being logged (`#248 <https://github.com/Delgan/loguru/issues/248>`_).\n- Modify ``complete()`` to make it callable from non-asynchronous functions, it can thus be used if ``enqueue=True`` to make sure all messages have been processed (`#231 <https://github.com/Delgan/loguru/issues/231>`_).\n- Fix possible deadlocks on Linux when ``multiprocessing.Process()`` collides with ``enqueue=True`` or ``threading`` (`#231 <https://github.com/Delgan/loguru/issues/231>`_).\n- Fix ``compression`` function not executable concurrently due to file renaming (to resolve conflicts) being performed after and not before it (`#243 <https://github.com/Delgan/loguru/issues/243>`_).\n- Fix the filter function listing files for ``retention`` being too restrictive, it now matches files based on the pattern ``\"basename(.*).ext(.*)\"`` (`#229 <https://github.com/Delgan/loguru/issues/229>`_).\n- Fix the impossibility to ``remove()`` a handler if an exception is raised while the sink' ``stop()`` function is called (`#237 <https://github.com/Delgan/loguru/issues/237>`_).\n- Fix file sink left in an unstable state if an exception occurred during ``retention`` or ``compression`` process (`#238 <https://github.com/Delgan/loguru/issues/238>`_).\n- Fix situation where changes made to ``record[\"message\"]`` were unexpectedly ignored when ``opt(colors=True)``, causing \"out-of-date\" ``message`` to be logged due to implementation details (`#221 <https://github.com/Delgan/loguru/issues/221>`_).\n- Fix possible exception if a stream having an ``isatty()`` method returning ``True`` but not being compatible with ``colorama`` is used on Windows (`#249 <https://github.com/Delgan/loguru/issues/249>`_).\n- Fix exceptions occurring in coroutine sinks never retrieved and hence causing warnings (`#227 <https://github.com/Delgan/loguru/issues/227>`_).\n\n\n`0.4.1`_ (2020-01-19)\n=====================\n\n- Deprecate the ``ansi`` parameter of ``.opt()`` in favor of ``colors`` which is a name more appropriate.\n- Prevent unrelated files and directories to be incorrectly collected thus causing errors during the ``retention`` process (`#195 <https://github.com/Delgan/loguru/issues/195>`_, thanks `@gazpachoking <https://github.com/gazpachoking>`_).\n- Strip color markups contained in ``record[\"message\"]`` when logging with ``.opt(ansi=True)`` instead of leaving them as is (`#198 <https://github.com/Delgan/loguru/issues/198>`_).\n- Ignore color markups contained in ``*args`` and ``**kwargs`` when logging with ``.opt(ansi=True)``, leave them as is instead of trying to use them to colorize the message which could cause undesirable errors (`#197 <https://github.com/Delgan/loguru/issues/197>`_).\n\n\n`0.4.0`_ (2019-12-02)\n=====================\n\n- Add support for coroutine functions used as sinks and add the new ``logger.complete()`` asynchronous method to ``await`` them (`#171 <https://github.com/Delgan/loguru/issues/171>`_).\n- Add a way to filter logs using one level per module in the form of a ``dict`` passed to the ``filter`` argument (`#148 <https://github.com/Delgan/loguru/issues/148>`_).\n- Add type hints to annotate the public methods using a ``.pyi`` stub file (`#162 <https://github.com/Delgan/loguru/issues/162>`_).\n- Add support for ``copy.deepcopy()`` of the ``logger`` allowing multiple independent loggers with separate set of handlers (`#72 <https://github.com/Delgan/loguru/issues/72>`_).\n- Add the possibility to convert ``datetime`` to UTC before formatting (in logs and filenames) by adding ``\"!UTC\"`` at the end of the time format specifier (`#128 <https://github.com/Delgan/loguru/issues/128>`_).\n- Add the level ``name`` as the first argument of namedtuple returned by the ``.level()`` method.\n- Remove ``class`` objects from the list of supported sinks and restrict usage of ``**kwargs`` in ``.add()`` to file sink only. User is in charge of instantiating sink and wrapping additional keyword arguments if needed, before passing it to the ``.add()`` method.\n- Rename the ``logger.configure()`` keyword argument ``patch`` to ``patcher`` so it better matches the signature of ``logger.patch()``.\n- Fix incompatibility with ``multiprocessing`` on Windows by entirely refactoring the internal structure of the ``logger`` so it can be inherited by child processes along with added handlers (`#108 <https://github.com/Delgan/loguru/issues/108>`_).\n- Fix ``AttributeError`` while using a file sink on some distributions (like Alpine Linux) missing the ``os.getxattr`` and ``os.setxattr`` functions (`#158 <https://github.com/Delgan/loguru/pull/158>`_, thanks `@joshgordon <https://github.com/joshgordon>`_).\n- Fix values wrongly displayed for keyword arguments during exception formatting with ``diagnose=True`` (`#144 <https://github.com/Delgan/loguru/issues/144>`_).\n- Fix logging messages wrongly chopped off at the end while using standard ``logging.Handler`` sinks with ``.opt(raw=True)`` (`#136 <https://github.com/Delgan/loguru/issues/136>`_).\n- Fix potential errors during rotation if destination file exists due to large resolution clock on Windows (`#179 <https://github.com/Delgan/loguru/issues/179>`_).\n- Fix an error using a ``filter`` function \"by name\" while receiving a log with ``record[\"name\"]`` equals to ``None``.\n- Fix incorrect record displayed while handling errors (if ``catch=True``) occurring because of non-picklable objects (if ``enqueue=True``).\n- Prevent hypothetical ``ImportError`` if a Python installation is missing the built-in ``distutils`` module (`#118 <https://github.com/Delgan/loguru/issues/118>`_).\n- Raise ``TypeError`` instead of ``ValueError`` when a ``logger`` method is called with argument of invalid type.\n- Raise ``ValueError`` if the built-in ``format()`` and ``filter()`` functions are respectively used as ``format`` and ``filter`` arguments of the ``add()`` method. This helps the user to understand the problem, as such a mistake can quite easily occur (`#177 <https://github.com/Delgan/loguru/issues/177>`_).\n- Remove inheritance of some record dict attributes to ``str`` (for ``\"level\"``, ``\"file\"``, ``\"thread\"`` and ``\"process\"``).\n- Give a name to the worker thread used when ``enqueue=True`` (`#174 <https://github.com/Delgan/loguru/pull/174>`_, thanks `@t-mart <https://github.com/t-mart>`_).\n\n\n`0.3.2`_ (2019-07-21)\n=====================\n\n- Fix exception during import when executing Python with ``-s`` and ``-S`` flags causing ``site.USER_SITE`` to be missing (`#114 <https://github.com/Delgan/loguru/issues/114>`_).\n\n\n`0.3.1`_ (2019-07-13)\n=====================\n\n- Fix ``retention`` and ``rotation`` issues when file sink initialized with ``delay=True`` (`#113 <https://github.com/Delgan/loguru/issues/113>`_).\n- Fix ``\"sec\"`` no longer recognized as a valid duration unit for file ``rotation`` and ``retention`` arguments.\n- Ensure stack from the caller is displayed while formatting exception of a function decorated with ``@logger.catch`` when ``backtrace=False``.\n- Modify datetime used to automatically rename conflicting file when rotating (it happens if file already exists because ``\"{time}\"`` not presents in filename) so it's based on the file creation time rather than the current time.\n\n\n`0.3.0`_ (2019-06-29)\n=====================\n\n- Remove all dependencies previously needed by ``loguru`` (on Windows platform, it solely remains ``colorama`` and ``win32-setctime``).\n- Add a new ``logger.patch()`` method which can be used to modify the record dict on-the-fly before it's being sent to the handlers.\n- Modify behavior of sink option ``backtrace`` so it only extends the stacktrace upward, the display of variables values is now controlled with the new ``diagnose`` argument (`#49 <https://github.com/Delgan/loguru/issues/49>`_).\n- Change behavior of ``rotation`` option in file sinks: it is now based on the file creation time rather than the current time, note that proper support may differ depending on your platform (`#58 <https://github.com/Delgan/loguru/issues/58>`_).\n- Raise errors on unknowns color tags rather than silently ignoring them (`#57 <https://github.com/Delgan/loguru/issues/57>`_).\n- Add the possibility to auto-close color tags by using ``</>`` (e.g. ``<yellow>message</>``).\n- Add coloration of exception traceback even if ``diagnose`` and ``backtrace`` options are ``False``.\n- Add a way to limit the depth of formatted exceptions traceback by setting the conventional ``sys.tracebacklimit`` variable (`#77 <https://github.com/Delgan/loguru/issues/77>`_).\n- Add ``__repr__`` value to the ``logger`` for convenient debugging (`#84 <https://github.com/Delgan/loguru/issues/84>`_).\n- Remove colors tags mixing directives (e.g. ``<red,blue>``) for simplification.\n- Make the ``record[\"exception\"]`` attribute unpackable as a ``(type, value, traceback)`` tuple.\n- Fix error happening in some rare circumstances because ``frame.f_globals`` dict did not contain ``\"__name__\"`` key and hence prevented Loguru to retrieve the module's name. From now, ``record[\"name\"]`` will be equal to ``None`` in such case (`#62 <https://github.com/Delgan/loguru/issues/62>`_).\n- Fix logging methods not being serializable with ``pickle`` and hence raising exception while being passed to some ``multiprocessing`` functions (`#102 <https://github.com/Delgan/loguru/issues/102>`_).\n- Fix exception stack trace not colorizing source code lines on Windows.\n- Fix possible ``AttributeError`` while formatting exceptions within a ``celery`` task (`#52 <https://github.com/Delgan/loguru/issues/52>`_).\n- Fix ``logger.catch`` decorator not working with generator and coroutine functions (`#75 <https://github.com/Delgan/loguru/issues/75>`_).\n- Fix ``record[\"path\"]`` case being normalized for no necessary reason (`#85 <https://github.com/Delgan/loguru/issues/85>`_).\n- Fix some Windows terminal emulators (mintty) not correctly detected as supporting colors, causing ansi codes to be automatically stripped (`#104 <https://github.com/Delgan/loguru/issues/104>`_).\n- Fix handler added with ``enqueue=True`` stopping working if exception was raised in sink although ``catch=True``.\n- Fix thread-safety of ``enable()`` and ``disable()`` being called during logging.\n- Use Tox to run tests (`#41 <https://github.com/Delgan/loguru/issues/41>`_).\n\n\n`0.2.5`_ (2019-01-20)\n=====================\n\n- Modify behavior of sink option ``backtrace=False`` so it doesn't extend traceback upward automatically (`#30 <https://github.com/Delgan/loguru/issues/30>`_).\n- Fix import error on some platforms using Python 3.5 with limited ``localtime()`` support (`#33 <https://github.com/Delgan/loguru/issues/33>`_).\n- Fix incorrect time formatting of locale month using ``MMM`` and ``MMMM`` tokens (`#34 <https://github.com/Delgan/loguru/pull/34>`_, thanks `@nasyxx <https://github.com/nasyxx>`_).\n- Fix race condition permitting writing on a stopped handler.\n\n\n`0.2.4`_ (2018-12-26)\n=====================\n\n- Fix adding handler while logging which was not thread-safe (`#22 <https://github.com/Delgan/loguru/issues/22>`_).\n\n\n`0.2.3`_ (2018-12-16)\n=====================\n\n- Add support for PyPy.\n- Add support for Python 3.5.\n- Fix incompatibility with ``awscli`` by downgrading required ``colorama`` dependency version (`#12 <https://github.com/Delgan/loguru/issues/12>`_).\n\n\n`0.2.2`_ (2018-12-12)\n=====================\n\n- Deprecate ``logger.start()`` and ``logger.stop()`` methods in favor of ``logger.add()`` and ``logger.remove()`` (`#3 <https://github.com/Delgan/loguru/issues/3>`_).\n- Fix ignored formatting while using ``logging.Handler`` sinks (`#4 <https://github.com/Delgan/loguru/issues/4>`_).\n- Fix impossibility to set empty environment variable color on Windows (`#7 <https://github.com/Delgan/loguru/issues/7>`_).\n\n\n`0.2.1`_ (2018-12-08)\n=====================\n\n- Fix typo preventing README to be correctly displayed on PyPI.\n\n\n`0.2.0`_ (2018-12-08)\n=====================\n\n- Remove the ``parser`` and refactor it into the ``logger.parse()`` method.\n- Remove the ``notifier`` and its dependencies (``pip install notifiers`` should be used instead).\n\n\n`0.1.0`_ (2018-12-07)\n=====================\n\n- Add logger.\n- Add notifier.\n- Add parser.\n\n\n`0.0.1`_ (2017-09-04)\n=====================\n\nInitial release.\n\n\n.. _Unreleased: https://github.com/delgan/loguru/compare/0.7.3...master\n.. _0.7.3: https://github.com/delgan/loguru/releases/tag/0.7.3\n.. _0.7.2: https://github.com/delgan/loguru/releases/tag/0.7.2\n.. _0.7.1: https://github.com/delgan/loguru/releases/tag/0.7.1\n.. _0.7.0: https://github.com/delgan/loguru/releases/tag/0.7.0\n.. _0.6.0: https://github.com/delgan/loguru/releases/tag/0.6.0\n.. _0.5.3: https://github.com/delgan/loguru/releases/tag/0.5.3\n.. _0.5.2: https://github.com/delgan/loguru/releases/tag/0.5.2\n.. _0.5.1: https://github.com/delgan/loguru/releases/tag/0.5.1\n.. _0.5.0: https://github.com/delgan/loguru/releases/tag/0.5.0\n.. _0.4.1: https://github.com/delgan/loguru/releases/tag/0.4.1\n.. _0.4.0: https://github.com/delgan/loguru/releases/tag/0.4.0\n.. _0.3.2: https://github.com/delgan/loguru/releases/tag/0.3.2\n.. _0.3.1: https://github.com/delgan/loguru/releases/tag/0.3.1\n.. _0.3.0: https://github.com/delgan/loguru/releases/tag/0.3.0\n.. _0.2.5: https://github.com/delgan/loguru/releases/tag/0.2.5\n.. _0.2.4: https://github.com/delgan/loguru/releases/tag/0.2.4\n.. _0.2.3: https://github.com/delgan/loguru/releases/tag/0.2.3\n.. _0.2.2: https://github.com/delgan/loguru/releases/tag/0.2.2\n.. _0.2.1: https://github.com/delgan/loguru/releases/tag/0.2.1\n.. _0.2.0: https://github.com/delgan/loguru/releases/tag/0.2.0\n.. _0.1.0: https://github.com/delgan/loguru/releases/tag/0.1.0\n.. _0.0.1: https://github.com/delgan/loguru/releases/tag/0.0.1\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 3.0029296875,
          "content": "Thank you for considering improving `Loguru`, any contribution is much welcome!\n\n.. _minimal reproducible example: https://stackoverflow.com/help/mcve\n.. _open a new issue: https://github.com/Delgan/loguru/issues/new\n.. _open a pull request: https://github.com/Delgan/loguru/compare\n.. _PEP 8: https://www.python.org/dev/peps/pep-0008/\n.. _Loguru: https://github.com/Delgan/loguru\n\nAsking questions\n----------------\n\nIf you have any question about `Loguru`, if you are seeking for help, or if you would like to suggest a new feature, you are encouraged to `open a new issue`_ so we can discuss it. Bringing new ideas and pointing out elements needing clarification allows to make this library always better!\n\n\nReporting a bug\n---------------\n\nIf you encountered an unexpected behavior using `Loguru`, please `open a new issue`_ and describe the problem you have spotted. Be as specific as possible in the description of the trouble so we can easily analyse it and quickly fix it.\n\nAn ideal bug report includes:\n\n* The Python version you are using\n* The `Loguru` version you are using (you can find it with ``print(loguru.__version__)``)\n* Your operating system name and version (Linux, MacOS, Windows)\n* Your development environment and local setup (IDE, Terminal, project context, any relevant information that could be useful)\n* Some `minimal reproducible example`_\n\n\nImplementing changes\n--------------------\n\nIf you are willing to enhance `Loguru` by implementing non-trivial changes, please `open a new issue`_ first to keep a reference about why such modifications are made (and potentially avoid unneeded work).\n\nPrefer using a relatively recent Python version as some dependencies required for development may have dropped support for oldest Python versions. Then, the workflow would look as follows:\n\n1. Fork the `Loguru`_ project from GitHub.\n2. Clone the repository locally::\n\n    $ git clone git@github.com:your_name_here/loguru.git\n    $ cd loguru\n\n3. Activate your virtual environment::\n\n    $ python -m venv env\n    $ source env/bin/activate\n\n4. Install `Loguru` in development mode::\n\n    $ pip install -e \".[dev]\"\n\n5. Install pre-commit hooks that will check your commits::\n\n    $ pre-commit install --install-hooks\n\n6. Create a new branch from ``master``::\n\n    $ git checkout master\n    $ git branch fix_bug\n    $ git checkout fix_bug\n\n7. Implement the modifications wished. During the process of development, honor `PEP 8`_ as much as possible.\n8. Add unit tests (don't hesitate to be exhaustive!) and ensure none are failing using::\n\n    $ tox -e tests\n\n9. Remember to update documentation if required.\n10. If your development modifies `Loguru` behavior, update the ``CHANGELOG.rst`` file with what you improved.\n11. ``add`` and ``commit`` your changes, then ``push`` your local project::\n\n    $ git add .\n    $ git commit -m 'Add succinct explanation of what changed'\n    $ git push origin fix_bug\n\n12. If previous step failed due to the pre-commit hooks, fix reported errors and try again.\n13. Finally, `open a pull request`_ before getting it merged!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03125,
          "content": "MIT License\n\nCopyright (c) 2017\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.6455078125,
          "content": "<p align=\"center\">\n    <a href=\"#readme\">\n        <img alt=\"Loguru logo\" src=\"https://raw.githubusercontent.com/Delgan/loguru/master/docs/_static/img/logo.png\">\n        <!-- Logo credits: Sambeet from Pixaday -->\n        <!-- Logo fonts: Comfortaa + Raleway -->\n    </a>\n</p>\n<p align=\"center\">\n    <a href=\"https://pypi.python.org/pypi/loguru\"><img alt=\"Pypi version\" src=\"https://img.shields.io/pypi/v/loguru.svg\"></a>\n    <a href=\"https://pypi.python.org/pypi/loguru\"><img alt=\"Python versions\" src=\"https://img.shields.io/badge/python-3.5%2B%20%7C%20PyPy-blue.svg\"></a>\n    <a href=\"https://loguru.readthedocs.io/en/stable/index.html\"><img alt=\"Documentation\" src=\"https://img.shields.io/readthedocs/loguru.svg\"></a>\n    <a href=\"https://github.com/Delgan/loguru/actions/workflows/tests.yml?query=branch:master\"><img alt=\"Build status\" src=\"https://img.shields.io/github/actions/workflow/status/Delgan/loguru/tests.yml?branch=master\"></a>\n    <a href=\"https://codecov.io/gh/delgan/loguru/branch/master\"><img alt=\"Coverage\" src=\"https://img.shields.io/codecov/c/github/delgan/loguru/master.svg\"></a>\n    <a href=\"https://app.codacy.com/gh/Delgan/loguru/dashboard\"><img alt=\"Code quality\" src=\"https://img.shields.io/codacy/grade/be7337df3c0d40d1929eb7f79b1671a6.svg\"></a>\n    <a href=\"https://github.com/Delgan/loguru/blob/master/LICENSE\"><img alt=\"License\" src=\"https://img.shields.io/github/license/delgan/loguru.svg\"></a>\n</p>\n<p align=\"center\">\n    <a href=\"#readme\">\n        <img alt=\"Loguru logo\" src=\"https://raw.githubusercontent.com/Delgan/loguru/master/docs/_static/img/demo.gif\">\n    </a>\n</p>\n\n______________________________________________________________________\n\n**Loguru** is a library which aims to bring enjoyable logging in Python.\n\nDid you ever feel lazy about configuring a logger and used `print()` instead?... I did, yet logging is fundamental to every application and eases the process of debugging. Using **Loguru** you have no excuse not to use logging from the start, this is as simple as `from loguru import logger`.\n\nAlso, this library is intended to make Python logging less painful by adding a bunch of useful functionalities that solve caveats of the standard loggers. Using logs in your application should be an automatism, **Loguru** tries to make it both pleasant and powerful.\n\n<!-- end-of-readme-intro -->\n\n## Installation\n\n```\npip install loguru\n```\n\n## Features\n\n- [Ready to use out of the box without boilerplate](#ready-to-use-out-of-the-box-without-boilerplate)\n- [No Handler, no Formatter, no Filter: one function to rule them all](#no-handler-no-formatter-no-filter-one-function-to-rule-them-all)\n- [Easier file logging with rotation / retention / compression](#easier-file-logging-with-rotation--retention--compression)\n- [Modern string formatting using braces style](#modern-string-formatting-using-braces-style)\n- [Exceptions catching within threads or main](#exceptions-catching-within-threads-or-main)\n- [Pretty logging with colors](#pretty-logging-with-colors)\n- [Asynchronous, Thread-safe, Multiprocess-safe](#asynchronous-thread-safe-multiprocess-safe)\n- [Fully descriptive exceptions](#fully-descriptive-exceptions)\n- [Structured logging as needed](#structured-logging-as-needed)\n- [Lazy evaluation of expensive functions](#lazy-evaluation-of-expensive-functions)\n- [Customizable levels](#customizable-levels)\n- [Better datetime handling](#better-datetime-handling)\n- [Suitable for scripts and libraries](#suitable-for-scripts-and-libraries)\n- [Entirely compatible with standard logging](#entirely-compatible-with-standard-logging)\n- [Personalizable defaults through environment variables](#personalizable-defaults-through-environment-variables)\n- [Convenient parser](#convenient-parser)\n- [Exhaustive notifier](#exhaustive-notifier)\n- <s>[10x faster than built-in logging](#10x-faster-than-built-in-logging)</s>\n\n## Take the tour\n\n### Ready to use out of the box without boilerplate\n\nThe main concept of Loguru is that **there is one and only one** [`logger`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger).\n\nFor convenience, it is pre-configured and outputs to `stderr` to begin with (but that's entirely configurable).\n\n```python\nfrom loguru import logger\n\nlogger.debug(\"That's it, beautiful and simple logging!\")\n```\n\nThe [`logger`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger) is just an interface which dispatches log messages to configured handlers. Simple, right?\n\n### No Handler, no Formatter, no Filter: one function to rule them all\n\nHow to add a handler? How to set up logs formatting? How to filter messages? How to set level?\n\nOne answer: the [`add()`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.add) function.\n\n```python\nlogger.add(sys.stderr, format=\"{time} {level} {message}\", filter=\"my_module\", level=\"INFO\")\n```\n\nThis function should be used to register [sinks](https://loguru.readthedocs.io/en/stable/api/logger.html#sink) which are responsible for managing [log messages](https://loguru.readthedocs.io/en/stable/api/logger.html#message) contextualized with a [record dict](https://loguru.readthedocs.io/en/stable/api/logger.html#record). A sink can take many forms: a simple function, a string path, a file-like object, a coroutine function or a built-in Handler.\n\nNote that you may also [`remove()`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.remove) a previously added handler by using the identifier returned while adding it. This is particularly useful if you want to supersede the default `stderr` handler: just call `logger.remove()` to make a fresh start.\n\n### Easier file logging with rotation / retention / compression\n\nIf you want to send logged messages to a file, you just have to use a string path as the sink. It can be automatically timed too for convenience:\n\n```python\nlogger.add(\"file_{time}.log\")\n```\n\nIt is also [easily configurable](https://loguru.readthedocs.io/en/stable/api/logger.html#file) if you need rotating logger, if you want to remove older logs, or if you wish to compress your files at closure.\n\n```python\nlogger.add(\"file_1.log\", rotation=\"500 MB\")    # Automatically rotate too big file\nlogger.add(\"file_2.log\", rotation=\"12:00\")     # New file is created each day at noon\nlogger.add(\"file_3.log\", rotation=\"1 week\")    # Once the file is too old, it's rotated\n\nlogger.add(\"file_X.log\", retention=\"10 days\")  # Cleanup after some time\n\nlogger.add(\"file_Y.log\", compression=\"zip\")    # Save some loved space\n```\n\n### Modern string formatting using braces style\n\nLoguru favors the much more elegant and powerful `{}` formatting over `%`, logging functions are actually equivalent to `str.format()`.\n\n```python\nlogger.info(\"If you're using Python {}, prefer {feature} of course!\", 3.6, feature=\"f-strings\")\n```\n\n### Exceptions catching within threads or main\n\nHave you ever seen your program crashing unexpectedly without seeing anything in the log file? Did you ever notice that exceptions occurring in threads were not logged? This can be solved using the [`catch()`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.catch) decorator / context manager which ensures that any error is correctly propagated to the [`logger`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger).\n\n```python\n@logger.catch\ndef my_function(x, y, z):\n    # An error? It's caught anyway!\n    return 1 / (x + y + z)\n```\n\n### Pretty logging with colors\n\nLoguru automatically adds colors to your logs if your terminal is compatible. You can define your favorite style by using [markup tags](https://loguru.readthedocs.io/en/stable/api/logger.html#color) in the sink format.\n\n```python\nlogger.add(sys.stdout, colorize=True, format=\"<green>{time}</green> <level>{message}</level>\")\n```\n\n### Asynchronous, Thread-safe, Multiprocess-safe\n\nAll sinks added to the [`logger`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger) are thread-safe by default. They are not multiprocess-safe, but you can `enqueue` the messages to ensure logs integrity. This same argument can also be used if you want async logging.\n\n```python\nlogger.add(\"somefile.log\", enqueue=True)\n```\n\nCoroutine functions used as sinks are also supported and should be awaited with [`complete()`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.complete).\n\n### Fully descriptive exceptions\n\nLogging exceptions that occur in your code is important to track bugs, but it's quite useless if you don't know why it failed. Loguru helps you identify problems by allowing the entire stack trace to be displayed, including values of variables (thanks [`better_exceptions`](https://github.com/Qix-/better-exceptions) for this!).\n\nThe code:\n\n```python\n# Caution, \"diagnose=True\" is the default and may leak sensitive data in prod\nlogger.add(\"out.log\", backtrace=True, diagnose=True)\n\ndef func(a, b):\n    return a / b\n\ndef nested(c):\n    try:\n        func(5, c)\n    except ZeroDivisionError:\n        logger.exception(\"What?!\")\n\nnested(0)\n```\n\nWould result in:\n\n```none\n2018-07-17 01:38:43.975 | ERROR    | __main__:nested:10 - What?!\nTraceback (most recent call last):\n\n  File \"test.py\", line 12, in <module>\n    nested(0)\n    └ <function nested at 0x7f5c755322f0>\n\n> File \"test.py\", line 8, in nested\n    func(5, c)\n    │       └ 0\n    └ <function func at 0x7f5c79fc2e18>\n\n  File \"test.py\", line 4, in func\n    return a / b\n           │   └ 0\n           └ 5\n\nZeroDivisionError: division by zero\n```\n\nNote that this feature won't work on default Python REPL due to unavailable frame data.\n\nSee also: [Security considerations when using Loguru](https://loguru.readthedocs.io/en/stable/resources/recipes.html#security-considerations-when-using-loguru).\n\n### Structured logging as needed\n\nWant your logs to be serialized for easier parsing or to pass them around? Using the `serialize` argument, each log message will be converted to a JSON string before being sent to the configured sink.\n\n```python\nlogger.add(custom_sink_function, serialize=True)\n```\n\nUsing [`bind()`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.bind) you can contextualize your logger messages by modifying the `extra` record attribute.\n\n```python\nlogger.add(\"file.log\", format=\"{extra[ip]} {extra[user]} {message}\")\ncontext_logger = logger.bind(ip=\"192.168.0.1\", user=\"someone\")\ncontext_logger.info(\"Contextualize your logger easily\")\ncontext_logger.bind(user=\"someone_else\").info(\"Inline binding of extra attribute\")\ncontext_logger.info(\"Use kwargs to add context during formatting: {user}\", user=\"anybody\")\n```\n\nIt is possible to modify a context-local state temporarily with [`contextualize()`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.contextualize):\n\n```python\nwith logger.contextualize(task=task_id):\n    do_something()\n    logger.info(\"End of task\")\n```\n\nYou can also have more fine-grained control over your logs by combining [`bind()`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.bind) and `filter`:\n\n```python\nlogger.add(\"special.log\", filter=lambda record: \"special\" in record[\"extra\"])\nlogger.debug(\"This message is not logged to the file\")\nlogger.bind(special=True).info(\"This message, though, is logged to the file!\")\n```\n\nFinally, the [`patch()`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.patch) method allows dynamic values to be attached to the record dict of each new message:\n\n```python\nlogger.add(sys.stderr, format=\"{extra[utc]} {message}\")\nlogger = logger.patch(lambda record: record[\"extra\"].update(utc=datetime.utcnow()))\n```\n\n### Lazy evaluation of expensive functions\n\nSometime you would like to log verbose information without performance penalty in production, you can use the [`opt()`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.opt) method to achieve this.\n\n```python\nlogger.opt(lazy=True).debug(\"If sink level <= DEBUG: {x}\", x=lambda: expensive_function(2**64))\n\n# By the way, \"opt()\" serves many usages\nlogger.opt(exception=True).info(\"Error stacktrace added to the log message (tuple accepted too)\")\nlogger.opt(colors=True).info(\"Per message <blue>colors</blue>\")\nlogger.opt(record=True).info(\"Display values from the record (eg. {record[thread]})\")\nlogger.opt(raw=True).info(\"Bypass sink formatting\\n\")\nlogger.opt(depth=1).info(\"Use parent stack context (useful within wrapped functions)\")\nlogger.opt(capture=False).info(\"Keyword arguments not added to {dest} dict\", dest=\"extra\")\n```\n\n### Customizable levels\n\nLoguru comes with all standard [logging levels](https://loguru.readthedocs.io/en/stable/api/logger.html#levels) to which [`trace()`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.trace) and [`success()`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.success) are added. Do you need more? Then, just create it by using the [`level()`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.level) function.\n\n```python\nnew_level = logger.level(\"SNAKY\", no=38, color=\"<yellow>\", icon=\"🐍\")\n\nlogger.log(\"SNAKY\", \"Here we go!\")\n```\n\n### Better datetime handling\n\nThe standard logging is bloated with arguments like `datefmt` or `msecs`, `%(asctime)s` and `%(created)s`, naive datetimes without timezone information, not intuitive formatting, etc. Loguru [fixes it](https://loguru.readthedocs.io/en/stable/api/logger.html#time):\n\n```python\nlogger.add(\"file.log\", format=\"{time:YYYY-MM-DD at HH:mm:ss} | {level} | {message}\")\n```\n\n### Suitable for scripts and libraries\n\nUsing the logger in your scripts is easy, and you can [`configure()`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.configure) it at start. To use Loguru from inside a library, remember to never call [`add()`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.add) but use [`disable()`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.disable) instead so logging functions become no-op. If a developer wishes to see your library's logs, they can [`enable()`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.enable) it again.\n\n```python\n# For scripts\nconfig = {\n    \"handlers\": [\n        {\"sink\": sys.stdout, \"format\": \"{time} - {message}\"},\n        {\"sink\": \"file.log\", \"serialize\": True},\n    ],\n    \"extra\": {\"user\": \"someone\"}\n}\nlogger.configure(**config)\n\n# For libraries, should be your library's `__name__`\nlogger.disable(\"my_library\")\nlogger.info(\"No matter added sinks, this message is not displayed\")\n\n# In your application, enable the logger in the library\nlogger.enable(\"my_library\")\nlogger.info(\"This message however is propagated to the sinks\")\n```\n\nFor additional convenience, you can also use the [`loguru-config`](https://github.com/erezinman/loguru-config) library to setup the `logger` directly from a configuration file.\n\n### Entirely compatible with standard logging\n\nWish to use built-in logging `Handler` as a Loguru sink?\n\n```python\nhandler = logging.handlers.SysLogHandler(address=('localhost', 514))\nlogger.add(handler)\n```\n\nNeed to propagate Loguru messages to standard `logging`?\n\n```python\nclass PropagateHandler(logging.Handler):\n    def emit(self, record: logging.LogRecord) -> None:\n        logging.getLogger(record.name).handle(record)\n\nlogger.add(PropagateHandler(), format=\"{message}\")\n```\n\nWant to intercept standard `logging` messages toward your Loguru sinks?\n\n```python\nclass InterceptHandler(logging.Handler):\n    def emit(self, record: logging.LogRecord) -> None:\n        # Get corresponding Loguru level if it exists.\n        try:\n            level: str | int = logger.level(record.levelname).name\n        except ValueError:\n            level = record.levelno\n\n        # Find caller from where originated the logged message.\n        frame, depth = inspect.currentframe(), 0\n        while frame:\n            filename = frame.f_code.co_filename\n            is_logging = filename == logging.__file__\n            is_frozen = \"importlib\" in filename and \"_bootstrap\" in filename\n            if depth > 0 and not (is_logging or is_frozen):\n                break\n            frame = frame.f_back\n            depth += 1\n\n        logger.opt(depth=depth, exception=record.exc_info).log(level, record.getMessage())\n\nlogging.basicConfig(handlers=[InterceptHandler()], level=0, force=True)\n```\n\n### Personalizable defaults through environment variables\n\nDon't like the default logger formatting? Would prefer another `DEBUG` color? [No problem](https://loguru.readthedocs.io/en/stable/api/logger.html#env):\n\n```bash\n# Linux / OSX\nexport LOGURU_FORMAT=\"{time} | <lvl>{message}</lvl>\"\n\n# Windows\nsetx LOGURU_DEBUG_COLOR \"<green>\"\n```\n\n### Convenient parser\n\nIt is often useful to extract specific information from generated logs, this is why Loguru provides a [`parse()`](https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.parse) method which helps to deal with logs and regexes.\n\n```python\npattern = r\"(?P<time>.*) - (?P<level>[0-9]+) - (?P<message>.*)\"  # Regex with named groups\ncaster_dict = dict(time=dateutil.parser.parse, level=int)        # Transform matching groups\n\nfor groups in logger.parse(\"file.log\", pattern, cast=caster_dict):\n    print(\"Parsed:\", groups)\n    # {\"level\": 30, \"message\": \"Log example\", \"time\": datetime(2018, 12, 09, 11, 23, 55)}\n```\n\n### Exhaustive notifier\n\nLoguru can easily be combined with the great [`apprise`](https://github.com/caronc/apprise) library (must be installed separately) to receive an e-mail when your program fail unexpectedly or to send many other kind of notifications.\n\n```python\nimport apprise\n\n# Define the configuration constants.\nWEBHOOK_ID = \"123456790\"\nWEBHOOK_TOKEN = \"abc123def456\"\n\n# Prepare the object to send Discord notifications.\nnotifier = apprise.Apprise()\nnotifier.add(f\"discord://{WEBHOOK_ID}/{WEBHOOK_TOKEN}\")\n\n# Install a handler to be alerted on each error.\n# You can filter out logs from \"apprise\" itself to avoid recursive calls.\nlogger.add(notifier.notify, level=\"ERROR\", filter={\"apprise\": False})\n```\n\n<s>\n\n### 10x faster than built-in logging\n\n</s>\n\nAlthough logging impact on performances is in most cases negligible, a zero-cost logger would allow to use it anywhere without much concern. In an upcoming release, Loguru's critical functions will be implemented in C for maximum speed.\n\n<!-- end-of-readme-usage -->\n\n## Documentation\n\n- [API Reference](https://loguru.readthedocs.io/en/stable/api/logger.html)\n- [Help & Guides](https://loguru.readthedocs.io/en/stable/resources.html)\n- [Type hints](https://loguru.readthedocs.io/en/stable/api/type_hints.html)\n- [Contributing](https://loguru.readthedocs.io/en/stable/project/contributing.html)\n- [License](https://loguru.readthedocs.io/en/stable/project/license.html)\n- [Changelog](https://loguru.readthedocs.io/en/stable/project/changelog.html)\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "loguru",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 4.5791015625,
          "content": "[build-system]\nbuild-backend = \"flit_core.buildapi\"\nrequires = [\"flit_core>=3,<4\"]\n\n[project]\nauthors = [{ name = \"Delgan\", email = \"delgan.py@gmail.com\" }]\nclassifiers = [\n  \"Development Status :: 5 - Production/Stable\",\n  \"Topic :: System :: Logging\",\n  \"Intended Audience :: Developers\",\n  \"Natural Language :: English\",\n  \"License :: OSI Approved :: MIT License\",\n  \"Operating System :: OS Independent\",\n  \"Programming Language :: Python\",\n  \"Programming Language :: Python :: 3\",\n  \"Programming Language :: Python :: 3.5\",\n  \"Programming Language :: Python :: 3.6\",\n  \"Programming Language :: Python :: 3.7\",\n  \"Programming Language :: Python :: 3.8\",\n  \"Programming Language :: Python :: 3.9\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n  \"Programming Language :: Python :: 3.12\",\n  \"Programming Language :: Python :: 3.13\",\n  \"Programming Language :: Python :: 3 :: Only\",\n  \"Programming Language :: Python :: Implementation :: PyPy\",\n  \"Programming Language :: Python :: Implementation :: CPython\",\n]\ndependencies = [\n  \"colorama>=0.3.4 ; sys_platform=='win32'\",\n  \"aiocontextvars>=0.2.0 ; python_version<'3.7'\",\n  \"win32-setctime>=1.0.0 ; sys_platform=='win32'\",\n]\ndescription = \"Python logging made (stupidly) simple\"\ndynamic = ['version']\nkeywords = [\"loguru\", \"logging\", \"logger\", \"log\"]\nlicense = { file = \"LICENSE\" }\nname = \"loguru\"\nreadme = 'README.md'\nrequires-python = \">=3.5,<4.0\"\n\n[project.optional-dependencies]\ndev = [\n  # Setup.\n  \"pre-commit==4.0.1 ; python_version>='3.9'\",\n  \"tox==3.27.1 ; python_version<'3.8'\",\n  \"tox==4.23.2 ; python_version>='3.8'\",\n  # Testing framework.\n  \"pytest==6.1.2 ; python_version<'3.8'\",\n  \"pytest==8.3.2 ; python_version>='3.8'\",\n  \"pytest-cov==2.12.1 ; python_version<'3.8'\",\n  \"pytest-cov==5.0.0 ; python_version>='3.8' and python_version<'3.9'\",\n  \"pytest-cov==6.0.0 ; python_version>='3.9'\",\n  \"pytest-mypy-plugins==1.9.3 ; python_version>='3.6' and python_version<'3.8'\",\n  \"pytest-mypy-plugins==3.1.0 ; python_version>='3.8' and python_version<'3.9'\",\n  \"pytest-mypy-plugins==3.2.0 ; python_version>='3.9'\",\n  # Testing utils.\n  \"colorama==0.4.5 ; python_version<'3.8'\",\n  \"colorama==0.4.6 ; python_version>='3.8'\",\n  \"freezegun==1.1.0 ; python_version<'3.8'\",\n  \"freezegun==1.5.0 ; python_version>='3.8'\",\n  \"exceptiongroup==1.1.3 ; python_version>='3.7' and python_version<'3.11'\",\n  # Type checking.\n  \"mypy==v0.910 ; python_version<'3.6'\",\n  \"mypy==v0.971 ; python_version>='3.6' and python_version<'3.7'\",\n  \"mypy==v1.4.1 ; python_version>='3.7' and python_version<'3.8'\",\n  \"mypy==v1.14.1 ; python_version>='3.8'\",\n  # Docs.\n  \"Sphinx==8.1.3 ; python_version>='3.11'\",\n  \"sphinx-rtd-theme==3.0.2 ; python_version>='3.11'\",\n  \"myst-parser==4.0.0 ; python_version>='3.11'\",\n  # Packaging.\n  \"build==1.2.2 ; python_version>='3.11'\",\n  \"twine==6.0.1 ; python_version>='3.11'\",\n]\n\n[project.urls]\nChangelog = \"https://github.com/Delgan/loguru/blob/master/CHANGELOG.rst\"\nDocumentation = \"https://loguru.readthedocs.io/en/stable/index.html\"\nHomepage = \"https://github.com/Delgan/loguru\"\n\n[tool.black]\nforce-exclude = \"tests/exceptions/source/modern/*\"\nline-length = 100\ntarget-version = [\"py35\"]\n\n[tool.pyright]\n# Types are defined in a stub file. Unfortunately, type checkers such as Pyright and Mypy are\n# unable to \"merge\" them with the file containing the actual Python implementation. This causes\n# many false positives, therefore type checking is disabled to avoid noisy errors in the editor.\ntypeCheckingMode = \"off\"\n\n[tool.flit.module]\nname = \"loguru\"\n\n[tool.pytest.ini_options]\naddopts = \"-l\"\nfilterwarnings = [\n  # By default all warnings are treated as errors.\n  'error',\n  # Mixing threads and \"fork()\" is deprecated, but we need to test it anyway.\n  'ignore:.*use of fork\\(\\) may lead to deadlocks in the child.*:DeprecationWarning',\n]\ntestpaths = [\"tests\"]\n\n[tool.ruff]\nexclude = [\"tests/exceptions/source/*\"]\nline-length = 100\n\n# Actually, we should target Python 3.5, but Ruff does not support it.\ntarget-version = \"py37\"\n\n[tool.ruff.lint]\n# See list of rules at: https://docs.astral.sh/ruff/rules/\nselect = [\"F\", \"E\", \"W\", \"I\", \"B\", \"N\", \"D\", \"PT\", \"PYI\", \"RET\", \"RUF\"]\n\n[tool.ruff.lint.per-file-ignores]\n\"tests/**\" = [\n  \"D1\", # Do not require documentation for tests.\n]\n\"loguru/__init__.pyi\" = [\n  \"PYI026\", # TypeAlias is not supported by Mypy 0.910 (Python 3.5).\n]\n\n[tool.ruff.lint.pycodestyle]\nmax-doc-length = 100\n\n[tool.ruff.lint.pydocstyle]\nconvention = \"numpy\"\n\n[tool.typos.default]\nextend-ignore-re = [\"(?Rm)^.*# spellchecker: disable-line$\"]\n\n[tool.typos.files]\nextend-exclude = [\n  \"tests/exceptions/output/**\", # False positive due to ansi sequences.\n]\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.6806640625,
          "content": "[tox]\nenvlist = lint, tests, docs, build\nisolated_build = True\n\n[testenv]\nsetenv = PYTHONPATH = {toxinidir}\nextras = dev\n\n[testenv:lint]\ndescription = Run linting checks on all project files.\ncommands =\n    pre-commit run --show-diff-on-failure --all-files\n\n[testenv:tests]\ndescription = Run the tests and generate code coverage.\ncommands =\n    coverage erase\n    pytest -vv --cov loguru/ --cov-report=\n    coverage report -m\n    coverage xml\n\n[testenv:docs]\ndescription = Build the HTML documentation.\ncommands =\n    sphinx-build -a -b html -W --keep-going docs/ docs/build\n\n[testenv:build]\ndescription = Build the Python package.\ncommands =\n    pyproject-build .\n    twine check --strict dist/*\n"
        }
      ]
    }
  ]
}