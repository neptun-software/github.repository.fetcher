{
  "metadata": {
    "timestamp": 1736561321765,
    "page": 334,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "borgbackup/borg",
      "stars": 11386,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.4697265625,
          "content": "[run]\nbranch = True\ndisable_warnings = module-not-measured\nsource = src/borg\nomit =\n    */borg/__init__.py\n    */borg/__main__.py\n    */borg/_version.py\n    */borg/fuse.py\n    */borg/support/*\n    */borg/testsuite/*\n    */borg/hash_sizes.py\n\n[report]\nexclude_lines =\n    pragma: no cover\n    pragma: freebsd only\n    pragma: unknown platform only\n    def __repr__\n    raise AssertionError\n    raise NotImplementedError\n    if 0:\n    if __name__ == .__main__.:\nignore_errors = True\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1962890625,
          "content": "# EditorConfig is awesome: https://editorconfig.org/\n\nroot = true\n\n[*]\nend_of_line = lf\ncharset = utf-8\nindent_style = space\nindent_size = 4\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.0693359375,
          "content": "# Migrate code style to Black\n7957af562d5ce8266b177039783be4dc8bdd7898\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.099609375,
          "content": "borg/_version.py export-subst\n\n*.py diff=python\ndocs/usage/*.rst.inc merge=ours\ndocs/man/* merge=ours\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4794921875,
          "content": "MANIFEST\ndocs/_build\nbuild\ndist\nexternal\nborg-env\n.tox\nsrc/borg/compress.c\nsrc/borg/crypto/low_level.c\nsrc/borg/hashindex.c\nsrc/borg/item.c\nsrc/borg/chunker.c\nsrc/borg/checksums.c\nsrc/borg/platform/darwin.c\nsrc/borg/platform/freebsd.c\nsrc/borg/platform/linux.c\nsrc/borg/platform/syncfilerange.c\nsrc/borg/platform/posix.c\nsrc/borg/platform/windows.c\nsrc/borg/_version.py\n*.egg-info\n*.pyc\n*.pyd\n*.so\n.idea/\n.cache/\n.vscode/\nborg.build/\nborg.dist/\nborg.exe\n.coverage\n.coverage.*\n.vagrant\n.eggs\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.7626953125,
          "content": "Abdel-Rahman <abodyxplay1@gmail.com>\nBrian Johnson <brian@sherbang.com>\nCarlo Teubner <carlo.teubner@gmail.com>\nMark Edgington <edgimar@gmail.com>\nLeo Famulari <leo@famulari.name>\nMarian Beermann <public@enkore.de>\nThomas Waldmann <tw@waldmann-edv.de>\nDan Christensen <jdc@uwo.ca> <jdc+github@uwo.ca>\nAntoine Beaupré <anarcat@koumbit.org> <anarcat@debian.org> <anarcat@users.noreply.github.com>\nHartmut Goebel <h.goebel@crazy-compilers.com> <htgoebel@users.noreply.github.com>\nMichael Gajda <michaelg@speciesm.net> <michael.gajda@tu-dortmund.de>\nMilkey Mouse <milkeymouse@meme.institute> <milkey-mouse@users.noreply.github.com>\nRonny Pfannschmidt <opensource@ronnypfannschmidt.de> <ronny.pfannschmidt@redhat.com>\nStefan Tatschner <rumpelsepp@sevenbyte.org> <stefan@sevenbyte.org>\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.1796875,
          "content": "repos:\n-   repo: https://github.com/psf/black\n    rev: 24.8.0\n    hooks:\n    -   id: black\n- repo: https://github.com/astral-sh/ruff-pre-commit\n  rev: v0.0.287\n  hooks:\n    - id: ruff\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.6708984375,
          "content": "# .readthedocs.yaml - Read the Docs configuration file.\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details.\n\nversion: 2\n\nbuild:\n    os: ubuntu-22.04\n    tools:\n        python: \"3.11\"\n    jobs:\n        post_checkout:\n            - git fetch --unshallow\n    apt_packages:\n        - build-essential\n        - pkg-config\n        - libacl1-dev\n        - libssl-dev\n        - liblz4-dev\n        - libzstd-dev\n        - libxxhash-dev\n\npython:\n    install:\n        - requirements: requirements.d/development.lock.txt\n        - requirements: requirements.d/docs.txt\n        - method: pip\n          path: .\n\nsphinx:\n    configuration: docs/conf.py\n\nformats:\n    - htmlzip\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 1.1513671875,
          "content": "E-mail addresses listed here are not intended for support, please see\nthe `support section`_ instead.\n\n.. _support section: https://borgbackup.readthedocs.io/en/stable/support.html\n\nBorg authors (\"The Borg Collective\")\n------------------------------------\n\n- Thomas Waldmann <tw@waldmann-edv.de>\n- Radek Podgorny <radek@podgorny.cz>\n- Yuri D'Elia\n- Michael Hanselmann <public@hansmi.ch>\n- Teemu Toivanen <public@profnetti.fi>\n- Marian Beermann <public@enkore.de>\n- Martin Hostettler <textshell@uchuujin.de>\n- Daniel Reichelt <hacking@nachtgeist.net>\n- Lauri Niskanen <ape@ape3000.com>\n- Abdel-Rahman A. (Abogical)\n- Gu1nness <guinness@crans.org>\n- Andrey Andreyevich Bienkowski <hexagon-recursion@posteo.net>\n\nRetired\n```````\n\n- Antoine Beaupré <anarcat@debian.org>\n\nBorg is a fork of Attic.\n\nAttic authors\n-------------\n\nAttic is written and maintained by Jonas Borgström and various contributors:\n\nAttic Development Lead\n``````````````````````\n- Jonas Borgström <jonas@borgstrom.se>\n\nAttic Patches and Suggestions\n`````````````````````````````\n- Brian Johnson\n- Cyril Roussillon\n- Dan Christensen\n- Jeremy Maitin-Shepard\n- Johann Klähn\n- Petros Moisiadis\n- Thomas Waldmann\n"
        },
        {
          "name": "Brewfile",
          "type": "blob",
          "size": 0.275390625,
          "content": "brew 'pkgconf'\nbrew 'zstd'\nbrew 'lz4'\nbrew 'xxhash'\nbrew 'openssl@3.0'\n\n# osxfuse (aka macFUSE) is only required for \"borg mount\",\n# but won't work on github actions' workers.\n# it requires installing a kernel extension, so some users\n# may want it and some won't.\n\n#cask 'osxfuse'\n"
        },
        {
          "name": "CHANGES.rst",
          "type": "blob",
          "size": 0.015625,
          "content": "docs/changes.rst"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.5146484375,
          "content": "Copyright (C) 2015-2024 The Borg Collective (see AUTHORS file)\nCopyright (C) 2010-2014 Jonas Borgström <jonas@borgstrom.se>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n 1. Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n 2. Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in\n    the documentation and/or other materials provided with the\n    distribution.\n 3. The name of the author may not be used to endorse or promote\n    products derived from this software without specific prior\n    written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.466796875,
          "content": "# stuff we need to include into the sdist is handled automatically by\n# setuptools_scm - it includes all git-committed files.\n# but we want to exclude some committed files/dirs not needed in the sdist:\nexclude .editorconfig .gitattributes .gitignore .mailmap Vagrantfile\nprune .github\ninclude src/borg/platform/darwin.c src/borg/platform/freebsd.c src/borg/platform/linux.c src/borg/platform/posix.c\ninclude src/borg/platform/syncfilerange.c\ninclude src/borg/platform/windows.c\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 7.8193359375,
          "content": "This is borg2!\n--------------\n\nPlease note that this is the README for borg2 / master branch.\n\nFor the stable version's docs, please see there:\n\nhttps://borgbackup.readthedocs.io/en/stable/\n\nBorg2 is currently in beta testing and might get major and/or\nbreaking changes between beta releases (and there is no beta to\nnext-beta upgrade code, so you will have to delete and re-create repos).\n\nThus, **DO NOT USE BORG2 FOR YOUR PRODUCTION BACKUPS!** Please help with\ntesting it, but set it up *additionally* to your production backups.\n\nTODO: the screencasts need a remake using borg2, see there:\n\nhttps://github.com/borgbackup/borg/issues/6303\n\n\nWhat is BorgBackup?\n-------------------\n\nBorgBackup (short: Borg) is a deduplicating backup program.\nOptionally, it supports compression and authenticated encryption.\n\nThe main goal of Borg is to provide an efficient and secure way to back up data.\nThe data deduplication technique used makes Borg suitable for daily backups\nsince only changes are stored.\nThe authenticated encryption technique makes it suitable for backups to targets not\nfully trusted.\n\nSee the `installation manual`_ or, if you have already\ndownloaded Borg, ``docs/installation.rst`` to get started with Borg.\nThere is also an `offline documentation`_ available, in multiple formats.\n\n.. _installation manual: https://borgbackup.readthedocs.org/en/stable/installation.html\n.. _offline documentation: https://readthedocs.org/projects/borgbackup/downloads\n\nMain features\n~~~~~~~~~~~~~\n\n**Space efficient storage**\n  Deduplication based on content-defined chunking is used to reduce the number\n  of bytes stored: each file is split into a number of variable length chunks\n  and only chunks that have never been seen before are added to the repository.\n\n  A chunk is considered duplicate if its id_hash value is identical.\n  A cryptographically strong hash or MAC function is used as id_hash, e.g.\n  (hmac-)sha256.\n\n  To deduplicate, all the chunks in the same repository are considered, no\n  matter whether they come from different machines, from previous backups,\n  from the same backup or even from the same single file.\n\n  Compared to other deduplication approaches, this method does NOT depend on:\n\n  * file/directory names staying the same: So you can move your stuff around\n    without killing the deduplication, even between machines sharing a repo.\n\n  * complete files or time stamps staying the same: If a big file changes a\n    little, only a few new chunks need to be stored - this is great for VMs or\n    raw disks.\n\n  * The absolute position of a data chunk inside a file: Stuff may get shifted\n    and will still be found by the deduplication algorithm.\n\n**Speed**\n  * performance-critical code (chunking, compression, encryption) is\n    implemented in C/Cython\n  * local caching\n  * quick detection of unmodified files\n\n**Data encryption**\n    All data can be protected client-side using 256-bit authenticated encryption\n    (AES-OCB or chacha20-poly1305), ensuring data confidentiality, integrity and\n    authenticity.\n\n**Obfuscation**\n    Optionally, borg can actively obfuscate e.g. the size of files / chunks to\n    make fingerprinting attacks more difficult.\n\n**Compression**\n    All data can be optionally compressed:\n\n    * lz4 (super fast, low compression)\n    * zstd (wide range from high speed and low compression to high compression\n      and lower speed)\n    * zlib (medium speed and compression)\n    * lzma (low speed, high compression)\n\n**Off-site backups**\n    Borg can store data on any remote host accessible over SSH.  If Borg is\n    installed on the remote host, big performance gains can be achieved\n    compared to using a network filesystem (sshfs, nfs, ...).\n\n**Backups mountable as filesystems**\n    Backup archives are mountable as userspace filesystems for easy interactive\n    backup examination and restores (e.g. by using a regular file manager).\n\n**Easy installation on multiple platforms**\n    We offer single-file binaries that do not require installing anything -\n    you can just run them on these platforms:\n\n    * Linux\n    * macOS\n    * FreeBSD\n    * OpenBSD and NetBSD (no xattrs/ACLs support or binaries yet)\n    * Cygwin (experimental, no binaries yet)\n    * Linux Subsystem of Windows 10 (experimental)\n\n**Free and Open Source Software**\n  * security and functionality can be audited independently\n  * licensed under the BSD (3-clause) license, see `License`_ for the\n    complete license\n\nEasy to use\n~~~~~~~~~~~\n\nFor ease of use, set the BORG_REPO environment variable::\n\n    $ export BORG_REPO=/path/to/repo\n\nCreate a new backup repository (see ``borg repo-create --help`` for encryption options)::\n\n    $ borg repo-create -e repokey-aes-ocb\n\nCreate a new backup archive::\n\n    $ borg create Monday1 ~/Documents\n\nNow doing another backup, just to show off the great deduplication::\n\n    $ borg create -v --stats Monday2 ~/Documents\n    Repository: /path/to/repo\n    Archive name: Monday2\n    Archive fingerprint: 7714aef97c1a24539cc3dc73f79b060f14af04e2541da33d54c7ee8e81a00089\n    Time (start): Mon, 2022-10-03 19:57:35 +0200\n    Time (end):   Mon, 2022-10-03 19:57:35 +0200\n    Duration: 0.01 seconds\n    Number of files: 24\n    Original size: 29.73 MB\n    Deduplicated size: 520 B\n\n\nHelping, Donations and Bounties, becoming a Patron\n--------------------------------------------------\n\nYour help is always welcome!\n\nSpread the word, give feedback, help with documentation, testing or development.\n\nYou can also give monetary support to the project, see there for details:\n\nhttps://www.borgbackup.org/support/fund.html\n\nLinks\n-----\n\n* `Main Web Site <https://borgbackup.readthedocs.org/>`_\n* `Releases <https://github.com/borgbackup/borg/releases>`_,\n  `PyPI packages <https://pypi.python.org/pypi/borgbackup>`_ and\n  `ChangeLog <https://github.com/borgbackup/borg/blob/master/docs/changes.rst>`_\n* `Offline Documentation <https://readthedocs.org/projects/borgbackup/downloads>`_\n* `GitHub <https://github.com/borgbackup/borg>`_ and\n  `Issue Tracker <https://github.com/borgbackup/borg/issues>`_.\n* `Web-Chat (IRC) <https://web.libera.chat/#borgbackup>`_ and\n  `Mailing List <https://mail.python.org/mailman/listinfo/borgbackup>`_\n* `License <https://borgbackup.readthedocs.org/en/stable/authors.html#license>`_\n* `Security contact <https://borgbackup.readthedocs.io/en/latest/support.html#security-contact>`_\n\nCompatibility notes\n-------------------\n\nEXPECT THAT WE WILL BREAK COMPATIBILITY REPEATEDLY WHEN MAJOR RELEASE NUMBER\nCHANGES (like when going from 0.x.y to 1.0.0 or from 1.x.y to 2.0.0).\n\nNOT RELEASED DEVELOPMENT VERSIONS HAVE UNKNOWN COMPATIBILITY PROPERTIES.\n\nTHIS IS SOFTWARE IN DEVELOPMENT, DECIDE YOURSELF WHETHER IT FITS YOUR NEEDS.\n\nSecurity issues should be reported to the `Security contact`_ (or\nsee ``docs/support.rst`` in the source distribution).\n\n.. start-badges\n\n|doc| |build| |coverage| |bestpractices|\n\n.. |doc| image:: https://readthedocs.org/projects/borgbackup/badge/?version=stable\n        :alt: Documentation\n        :target: https://borgbackup.readthedocs.org/en/stable/\n\n.. |build| image:: https://github.com/borgbackup/borg/workflows/CI/badge.svg?branch=master\n        :alt: Build Status (master)\n        :target: https://github.com/borgbackup/borg/actions\n\n.. |coverage| image:: https://codecov.io/github/borgbackup/borg/coverage.svg?branch=master\n        :alt: Test Coverage\n        :target: https://codecov.io/github/borgbackup/borg?branch=master\n\n.. |screencast_basic| image:: https://asciinema.org/a/133292.png\n        :alt: BorgBackup Basic Usage\n        :target: https://asciinema.org/a/133292?autoplay=1&speed=1\n        :width: 100%\n\n.. _installation: https://asciinema.org/a/133291?autoplay=1&speed=1\n\n.. _advanced usage: https://asciinema.org/a/133293?autoplay=1&speed=1\n\n.. |bestpractices| image:: https://bestpractices.coreinfrastructure.org/projects/271/badge\n        :alt: Best Practices Score\n        :target: https://bestpractices.coreinfrastructure.org/projects/271\n\n.. end-badges\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.4150390625,
          "content": "# Security Policy\n\n## Supported Versions\n\nThese borg releases are currently supported with security updates.\n\n| Version | Supported          |\n|---------|--------------------|\n| 2.0.x   | :x: (not released) |\n| 1.2.x   | :white_check_mark: |\n| 1.1.x   | :x:                |\n| < 1.1   | :x:                |\n\n## Reporting a Vulnerability\n\nSee there:\n\nhttps://borgbackup.readthedocs.io/en/latest/support.html#security-contact\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 22.224609375,
          "content": "# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n# Automated creation of testing environments / binaries on misc. platforms\n\n$cpus = Integer(ENV.fetch('VMCPUS', '8'))  # create VMs with that many cpus\n$xdistn = Integer(ENV.fetch('XDISTN', '8'))  # dispatch tests to that many pytest workers\n$wmem = $xdistn * 256  # give the VM additional memory for workers [MB]\n\ndef packages_debianoid(user)\n  return <<-EOF\n    export DEBIAN_FRONTEND=noninteractive\n    # this is to avoid grub asking about which device it should install to:\n    echo \"set grub-pc/install_devices /dev/sda\" | debconf-communicate\n    apt-get -y -qq update\n    apt-get -y -qq dist-upgrade\n    # for building borgbackup and dependencies:\n    apt install -y pkg-config\n    apt install -y libssl-dev libacl1-dev libxxhash-dev liblz4-dev libzstd-dev || true\n    apt install -y libfuse-dev fuse || true\n    apt install -y libfuse3-dev fuse3 || true\n    apt install -y locales || true\n    sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen\n    usermod -a -G fuse #{user}\n    chgrp fuse /dev/fuse\n    chmod 666 /dev/fuse\n    apt install -y fakeroot build-essential git curl\n    apt install -y python3-dev python3-setuptools virtualenv\n    # for building python:\n    apt install -y zlib1g-dev libbz2-dev libncurses5-dev libreadline-dev liblzma-dev libsqlite3-dev libffi-dev\n  EOF\nend\n\ndef packages_freebsd\n  return <<-EOF\n    # in case the VM has no hostname set\n    hostname freebsd\n    # install all the (security and other) updates, base system\n    freebsd-update --not-running-from-cron fetch install\n    # for building borgbackup and dependencies:\n    pkg install -y xxhash liblz4 zstd pkgconf\n    pkg install -y fusefs-libs || true\n    pkg install -y fusefs-libs3 || true\n    pkg install -y rust\n    pkg install -y git bash  # fakeroot causes lots of troubles on freebsd\n    pkg install -y python39 py39-sqlite3\n    pkg install -y python310 py310-sqlite3\n    pkg install -y python311 py311-sqlite3 py311-pip py311-virtualenv\n    # make sure there is a python3/pip3/virtualenv command\n    ln -sf /usr/local/bin/python3.11 /usr/local/bin/python3\n    ln -sf /usr/local/bin/pip-3.11 /usr/local/bin/pip3\n    ln -sf /usr/local/bin/virtualenv-3.11 /usr/local/bin/virtualenv\n    # make bash default / work:\n    chsh -s bash vagrant\n    mount -t fdescfs fdesc /dev/fd\n    echo 'fdesc        /dev/fd         fdescfs         rw      0       0' >> /etc/fstab\n    # make FUSE work\n    echo 'fuse_load=\"YES\"' >> /boot/loader.conf\n    echo 'vfs.usermount=1' >> /etc/sysctl.conf\n    kldload fusefs\n    sysctl vfs.usermount=1\n    pw groupmod operator -M vagrant\n    # /dev/fuse has group operator\n    chmod 666 /dev/fuse\n    # install all the (security and other) updates, packages\n    pkg update\n    yes | pkg upgrade\n    echo 'export BORG_OPENSSL_PREFIX=/usr' >> ~vagrant/.bash_profile\n    # (re)mount / with acls\n    mount -o acls /\n  EOF\nend\n\ndef packages_openbsd\n  return <<-EOF\n    echo \"https://ftp.eu.openbsd.org/pub/OpenBSD\" > /etc/installurl\n    pkg_add bash\n    chsh -s bash vagrant\n    pkg_add xxhash\n    pkg_add lz4\n    pkg_add zstd\n    pkg_add git  # no fakeroot\n    pkg_add rust\n    pkg_add openssl%3.0\n    pkg_add py3-pip\n    pkg_add py3-virtualenv\n    echo 'export BORG_OPENSSL_NAME=eopenssl30' >> ~vagrant/.bash_profile\n  EOF\nend\n\ndef packages_netbsd\n  return <<-EOF\n    echo 'http://ftp.NetBSD.org/pub/pkgsrc/packages/NetBSD/$arch/9.3/All' > /usr/pkg/etc/pkgin/repositories.conf\n    pkgin update\n    pkgin -y upgrade\n    pkg_add zstd lz4 xxhash git\n    pkg_add rust\n    pkg_add bash\n    chsh -s bash vagrant\n    echo \"export PROMPT_COMMAND=\" >> ~vagrant/.bash_profile  # bug in netbsd 9.3, .bash_profile broken for screen\n    echo \"export PROMPT_COMMAND=\" >> ~root/.bash_profile  # bug in netbsd 9.3, .bash_profile broken for screen\n    pkg_add pkg-config\n    # pkg_add fuse  # llfuse supports netbsd, but is still buggy.\n    # https://bitbucket.org/nikratio/python-llfuse/issues/70/perfuse_open-setsockopt-no-buffer-space\n    pkg_add py311-sqlite3 py311-pip py311-virtualenv py311-expat\n    ln -s /usr/pkg/bin/python3.11 /usr/pkg/bin/python\n    ln -s /usr/pkg/bin/python3.11 /usr/pkg/bin/python3\n    ln -s /usr/pkg/bin/pip3.11 /usr/pkg/bin/pip\n    ln -s /usr/pkg/bin/pip3.11 /usr/pkg/bin/pip3\n    ln -s /usr/pkg/bin/virtualenv-3.11 /usr/pkg/bin/virtualenv\n    ln -s /usr/pkg/bin/virtualenv-3.11 /usr/pkg/bin/virtualenv3\n  EOF\nend\n\ndef packages_macos\n  return <<-EOF\n    # install all the (security and other) updates\n    sudo softwareupdate --ignore iTunesX\n    sudo softwareupdate --ignore iTunes\n    sudo softwareupdate --ignore Safari\n    sudo softwareupdate --ignore \"Install macOS High Sierra\"\n    sudo softwareupdate --install --all\n\n    # this box has openssl 1.1 installed\n    export PKG_CONFIG_PATH=/usr/local/opt/openssl@1.1/lib/pkgconfig\n\n    # the box \"as is\" has troubles downloading ca-certificates, needs a better working curl:\n    # https://curl.se/docs/install.html\n    curl -L https://github.com/curl/curl/releases/download/curl-8_10_1/curl-8.10.1.tar.gz | tar -xz\n    cd curl-8.10.1/\n    export ARCH=x86_64\n    export SDK=macosx\n    export DEPLOYMENT_TARGET=10.12\n    export CFLAGS=\"-arch $ARCH -isysroot $(xcrun -sdk $SDK --show-sdk-path) -m$SDK-version-min=$DEPLOYMENT_TARGET\"\n    ./configure --host=$ARCH-apple-darwin --prefix /usr/local --with-openssl --without-libpsl --disable-ldap\n    make -j8\n    sudo make install\n    unset ARCH\n    unset SDK\n    unset DEPLOYMENT_TARGET\n    unset CFLAGS\n    cd ..\n    export HOMEBREW_DEVELOPER=1\n    export HOMEBREW_CURL_PATH=/usr/local/bin/curl\n    echo \"finished building curl from source\"\n    echo \"----------------------------------\"\n\n    # now the self-built curl should work for homebrew:\n    brew update\n    brew install ca-certificates\n    brew install openssl@3\n    export LDFLAGS=-L/usr/local/opt/openssl@3/lib\n    export CPPFLAGS=-I/usr/local/opt/openssl@3/include\n    export PKG_CONFIG_PATH=/usr/local/opt/openssl@3/lib/pkgconfig\n    echo 'export LDFLAGS=-L/usr/local/opt/openssl@3/lib' >> ~vagrant/.bash_profile\n    echo 'export CPPFLAGS=-I/usr/local/opt/openssl@3/include' >> ~vagrant/.bash_profile\n    echo 'export PKG_CONFIG_PATH=/usr/local/opt/openssl@3/lib/pkgconfig' >> ~vagrant/.bash_profile\n    echo \"finished building ca-certificates and openssl@3\"\n    echo \"-----------------------------------------------\"\n\n    # install curl from homebrew and use it for homebrew:\n    brew install curl\n    export PATH=\"/usr/local/opt/curl/bin:$PATH\"\n    echo 'export PATH=\"/usr/local/opt/curl/bin:$PATH\"' >> ~vagrant/.bash_profile\n    export HOMEBREW_FORCE_BREWED_CURL=1\n    echo 'export HOMEBREW_FORCE_BREWED_CURL=1' >> ~vagrant/.bash_profile\n    unset HOMEBREW_CURL_PATH\n    unset HOMEBREW_DEVELOPER\n    echo \"finished install homebrew curl\"\n    echo \"------------------------------\"\n\n    # now brew, curl, ca-certificates, openssl@3 should be all ok.\n    brew update\n    brew install pkgconf readline xxhash zstd lz4 xz\n    brew install --cask macfuse\n    # brew upgrade  # upgrade everything (takes rather long)\n    # pyenv shall use the openssl@3 from homebrew:\n    echo 'export PYTHON_BUILD_HOMEBREW_OPENSSL_FORMULA=openssl@3' >> ~vagrant/.bash_profile\n  EOF\nend\n\ndef packages_openindiana\n  return <<-EOF\n    # needs separate provisioning step + reboot:\n    #pkg update\n    pkg install gcc-13 git pkg-config libxxhash pip virtualenv\n    # let borg's pkg-config find openssl:\n    pfexec pkg set-mediator -V 3.1 openssl\n  EOF\nend\n\ndef install_pyenv(boxname)\n  return <<-EOF\n    echo 'export PYTHON_CONFIGURE_OPTS=\"${PYTHON_CONFIGURE_OPTS} --enable-shared\"' >> ~/.bash_profile\n    echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bash_profile\n    echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile\n    . ~/.bash_profile\n    curl -s -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash\n    echo 'eval \"$(pyenv init --path)\"' >> ~/.bash_profile\n    echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc\n    echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc\n    echo 'eval \"$(pyenv init -)\"' >> ~/.bashrc\n    echo 'eval \"$(pyenv virtualenv-init -)\"' >> ~/.bashrc\n  EOF\nend\n\ndef fix_pyenv_macos(boxname)\n  return <<-EOF\n    echo 'export PYTHON_CONFIGURE_OPTS=\"--enable-framework\"' >> ~/.bash_profile\n  EOF\nend\n\ndef install_pythons(boxname)\n  return <<-EOF\n    . ~/.bash_profile\n    echo \"PYTHON_CONFIGURE_OPTS: ${PYTHON_CONFIGURE_OPTS}\"\n    pyenv install 3.12.4  # tests, binary build (3.12.5/6/7 has a broken pip on old macOS)\n    pyenv rehash\n  EOF\nend\n\ndef build_sys_venv(boxname)\n  return <<-EOF\n    . ~/.bash_profile\n    cd /vagrant/borg\n    virtualenv --python=python3 borg-env\n  EOF\nend\n\ndef build_pyenv_venv(boxname)\n  return <<-EOF\n    . ~/.bash_profile\n    cd /vagrant/borg\n    # use the latest 3.12 release\n    pyenv global 3.12.4\n    pyenv virtualenv 3.12.4 borg-env\n    ln -s ~/.pyenv/versions/borg-env .\n  EOF\nend\n\ndef install_borg(fuse)\n  return <<-EOF\n    . ~/.bash_profile\n    cd /vagrant/borg\n    . borg-env/bin/activate\n    pip install -U wheel  # upgrade wheel, might be too old\n    cd borg\n    pip install -r requirements.d/development.lock.txt\n    python3 scripts/make.py clean\n    pip install -e .[#{fuse}]\n  EOF\nend\n\ndef install_pyinstaller()\n  return <<-EOF\n    . ~/.bash_profile\n    cd /vagrant/borg\n    . borg-env/bin/activate\n    pip install 'pyinstaller==6.10.0'\n  EOF\nend\n\ndef build_binary_with_pyinstaller(boxname)\n  return <<-EOF\n    . ~/.bash_profile\n    cd /vagrant/borg\n    . borg-env/bin/activate\n    cd borg\n    pyinstaller --clean --distpath=/vagrant/borg scripts/borg.exe.spec\n    echo 'export PATH=\"/vagrant/borg:$PATH\"' >> ~/.bash_profile\n    cd .. && tar -czvf borg.tgz borg-dir\n  EOF\nend\n\ndef run_tests(boxname, skip_env)\n  return <<-EOF\n    . ~/.bash_profile\n    cd /vagrant/borg/borg\n    . ../borg-env/bin/activate\n    if which pyenv 2> /dev/null; then\n      # for testing, use the earliest point releases of the supported python versions:\n      pyenv global 3.12.4\n      pyenv local 3.12.4\n    fi\n    # otherwise: just use the system python\n    # some OSes can only run specific test envs, e.g. because they miss FUSE support:\n    export TOX_SKIP_ENV='#{skip_env}'\n    if which fakeroot 2> /dev/null; then\n      echo \"Running tox WITH fakeroot -u\"\n      fakeroot -u tox --skip-missing-interpreters\n    else\n      echo \"Running tox WITHOUT fakeroot -u\"\n      tox --skip-missing-interpreters\n    fi\n  EOF\nend\n\ndef fs_init(user)\n  return <<-EOF\n    # clean up (wrong/outdated) stuff we likely got via rsync:\n    rm -rf /vagrant/borg/borg/.tox 2> /dev/null\n    rm -rf /vagrant/borg/borg/borgbackup.egg-info 2> /dev/null\n    rm -rf /vagrant/borg/borg/__pycache__ 2> /dev/null\n    find /vagrant/borg/borg/src -name '__pycache__' -exec rm -rf {} \\\\; 2> /dev/null\n    chown -R #{user} /vagrant/borg\n    touch ~#{user}/.bash_profile ; chown #{user} ~#{user}/.bash_profile\n    echo 'export LANG=en_US.UTF-8' >> ~#{user}/.bash_profile\n    echo 'export LC_CTYPE=en_US.UTF-8' >> ~#{user}/.bash_profile\n    echo 'export XDISTN=#{$xdistn}' >> ~#{user}/.bash_profile\n  EOF\nend\n\nVagrant.configure(2) do |config|\n  # use rsync to copy content to the folder\n  config.vm.synced_folder \".\", \"/vagrant/borg/borg\", :type => \"rsync\", :rsync__args => [\"--verbose\", \"--archive\", \"--delete\", \"--exclude\", \".python-version\"], :rsync__chown => false\n  # do not let the VM access . on the host machine via the default shared folder!\n  config.vm.synced_folder \".\", \"/vagrant\", disabled: true\n\n  config.vm.provider :virtualbox do |v|\n    #v.gui = true\n    v.cpus = $cpus\n  end\n\n  config.vm.define \"noble\" do |b|\n    b.vm.box = \"bento/ubuntu-24.04\"\n    b.vm.provider :virtualbox do |v|\n      v.memory = 1024 + $wmem\n    end\n    b.vm.provision \"fs init\", :type => :shell, :inline => fs_init(\"vagrant\")\n    b.vm.provision \"packages debianoid\", :type => :shell, :inline => packages_debianoid(\"vagrant\")\n    b.vm.provision \"build env\", :type => :shell, :privileged => false, :inline => build_sys_venv(\"noble\")\n    b.vm.provision \"install borg\", :type => :shell, :privileged => false, :inline => install_borg(\"llfuse\")\n    b.vm.provision \"run tests\", :type => :shell, :privileged => false, :inline => run_tests(\"noble\", \".*none.*\")\n  end\n\n  config.vm.define \"jammy\" do |b|\n    b.vm.box = \"ubuntu/jammy64\"\n    b.vm.provider :virtualbox do |v|\n      v.memory = 1024 + $wmem\n    end\n    b.vm.provision \"fs init\", :type => :shell, :inline => fs_init(\"vagrant\")\n    b.vm.provision \"packages debianoid\", :type => :shell, :inline => packages_debianoid(\"vagrant\")\n    b.vm.provision \"build env\", :type => :shell, :privileged => false, :inline => build_sys_venv(\"jammy\")\n    b.vm.provision \"install borg\", :type => :shell, :privileged => false, :inline => install_borg(\"llfuse\")\n    b.vm.provision \"run tests\", :type => :shell, :privileged => false, :inline => run_tests(\"jammy\", \".*none.*\")\n  end\n\n  config.vm.define \"bookworm32\" do |b|\n    b.vm.box = \"generic-x32/debian12\"\n    b.vm.provider :virtualbox do |v|\n      v.memory = 1024 + $wmem\n    end\n    b.vm.provision \"fs init\", :type => :shell, :inline => fs_init(\"vagrant\")\n    b.vm.provision \"packages debianoid\", :type => :shell, :inline => packages_debianoid(\"vagrant\")\n    b.vm.provision \"install pyenv\", :type => :shell, :privileged => false, :inline => install_pyenv(\"bookworm32\")\n    b.vm.provision \"install pythons\", :type => :shell, :privileged => false, :inline => install_pythons(\"bookworm32\")\n    b.vm.provision \"build env\", :type => :shell, :privileged => false, :inline => build_pyenv_venv(\"bookworm32\")\n    b.vm.provision \"install borg\", :type => :shell, :privileged => false, :inline => install_borg(\"llfuse\")\n    b.vm.provision \"install pyinstaller\", :type => :shell, :privileged => false, :inline => install_pyinstaller()\n    b.vm.provision \"build binary with pyinstaller\", :type => :shell, :privileged => false, :inline => build_binary_with_pyinstaller(\"bookworm32\")\n    b.vm.provision \"run tests\", :type => :shell, :privileged => false, :inline => run_tests(\"bookworm32\", \".*none.*\")\n  end\n\n  config.vm.define \"bookworm\" do |b|\n    b.vm.box = \"debian/bookworm64\"\n    b.vm.provider :virtualbox do |v|\n      v.memory = 1024 + $wmem\n    end\n    b.vm.provision \"fs init\", :type => :shell, :inline => fs_init(\"vagrant\")\n    b.vm.provision \"packages debianoid\", :type => :shell, :inline => packages_debianoid(\"vagrant\")\n    b.vm.provision \"install pyenv\", :type => :shell, :privileged => false, :inline => install_pyenv(\"bookworm\")\n    b.vm.provision \"install pythons\", :type => :shell, :privileged => false, :inline => install_pythons(\"bookworm\")\n    b.vm.provision \"build env\", :type => :shell, :privileged => false, :inline => build_pyenv_venv(\"bookworm\")\n    b.vm.provision \"install borg\", :type => :shell, :privileged => false, :inline => install_borg(\"llfuse\")\n    b.vm.provision \"install pyinstaller\", :type => :shell, :privileged => false, :inline => install_pyinstaller()\n    b.vm.provision \"build binary with pyinstaller\", :type => :shell, :privileged => false, :inline => build_binary_with_pyinstaller(\"bookworm\")\n    b.vm.provision \"run tests\", :type => :shell, :privileged => false, :inline => run_tests(\"bookworm\", \".*none.*\")\n  end\n\n  config.vm.define \"bullseye\" do |b|\n    b.vm.box = \"debian/bullseye64\"\n    b.vm.provider :virtualbox do |v|\n      v.memory = 1024 + $wmem\n    end\n    b.vm.provision \"fs init\", :type => :shell, :inline => fs_init(\"vagrant\")\n    b.vm.provision \"packages debianoid\", :type => :shell, :inline => packages_debianoid(\"vagrant\")\n    b.vm.provision \"install pyenv\", :type => :shell, :privileged => false, :inline => install_pyenv(\"bullseye\")\n    b.vm.provision \"install pythons\", :type => :shell, :privileged => false, :inline => install_pythons(\"bullseye\")\n    b.vm.provision \"build env\", :type => :shell, :privileged => false, :inline => build_pyenv_venv(\"bullseye\")\n    b.vm.provision \"install borg\", :type => :shell, :privileged => false, :inline => install_borg(\"llfuse\")\n    b.vm.provision \"install pyinstaller\", :type => :shell, :privileged => false, :inline => install_pyinstaller()\n    b.vm.provision \"build binary with pyinstaller\", :type => :shell, :privileged => false, :inline => build_binary_with_pyinstaller(\"bullseye\")\n    b.vm.provision \"run tests\", :type => :shell, :privileged => false, :inline => run_tests(\"bullseye\", \".*none.*\")\n  end\n\n  config.vm.define \"freebsd13\" do |b|\n    b.vm.box = \"generic/freebsd13\"\n    b.vm.provider :virtualbox do |v|\n      v.memory = 1024 + $wmem\n    end\n    b.ssh.shell = \"sh\"\n    b.vm.provision \"fs init\", :type => :shell, :inline => fs_init(\"vagrant\")\n    b.vm.provision \"packages freebsd\", :type => :shell, :inline => packages_freebsd\n    b.vm.provision \"install pyenv\", :type => :shell, :privileged => false, :inline => install_pyenv(\"freebsd13\")\n    b.vm.provision \"install pythons\", :type => :shell, :privileged => false, :inline => install_pythons(\"freebsd13\")\n    b.vm.provision \"build env\", :type => :shell, :privileged => false, :inline => build_pyenv_venv(\"freebsd13\")\n    b.vm.provision \"install borg\", :type => :shell, :privileged => false, :inline => install_borg(\"llfuse\")\n    b.vm.provision \"install pyinstaller\", :type => :shell, :privileged => false, :inline => install_pyinstaller()\n    b.vm.provision \"build binary with pyinstaller\", :type => :shell, :privileged => false, :inline => build_binary_with_pyinstaller(\"freebsd13\")\n    b.vm.provision \"run tests\", :type => :shell, :privileged => false, :inline => run_tests(\"freebsd13\", \".*(fuse3|none).*\")\n  end\n\n  config.vm.define \"freebsd14\" do |b|\n    b.vm.box = \"generic/freebsd14\"\n    b.vm.provider :virtualbox do |v|\n      v.memory = 1024 + $wmem\n    end\n    b.ssh.shell = \"sh\"\n    b.vm.provision \"fs init\", :type => :shell, :inline => fs_init(\"vagrant\")\n    b.vm.provision \"packages freebsd\", :type => :shell, :inline => packages_freebsd\n    b.vm.provision \"install pyenv\", :type => :shell, :privileged => false, :inline => install_pyenv(\"freebsd14\")\n    b.vm.provision \"install pythons\", :type => :shell, :privileged => false, :inline => install_pythons(\"freebsd14\")\n    b.vm.provision \"build env\", :type => :shell, :privileged => false, :inline => build_pyenv_venv(\"freebsd14\")\n    b.vm.provision \"install borg\", :type => :shell, :privileged => false, :inline => install_borg(\"llfuse\")\n    b.vm.provision \"install pyinstaller\", :type => :shell, :privileged => false, :inline => install_pyinstaller()\n    b.vm.provision \"build binary with pyinstaller\", :type => :shell, :privileged => false, :inline => build_binary_with_pyinstaller(\"freebsd14\")\n    b.vm.provision \"run tests\", :type => :shell, :privileged => false, :inline => run_tests(\"freebsd14\", \".*(fuse3|none).*\")\n  end\n\n  config.vm.define \"openbsd7\" do |b|\n    b.vm.box = \"generic/openbsd7\"\n    b.vm.provider :virtualbox do |v|\n      v.memory = 1024 + $wmem\n    end\n    b.vm.provision \"fs init\", :type => :shell, :inline => fs_init(\"vagrant\")\n    b.vm.provision \"packages openbsd\", :type => :shell, :inline => packages_openbsd\n    b.vm.provision \"build env\", :type => :shell, :privileged => false, :inline => build_sys_venv(\"openbsd7\")\n    b.vm.provision \"install borg\", :type => :shell, :privileged => false, :inline => install_borg(\"nofuse\")\n    b.vm.provision \"run tests\", :type => :shell, :privileged => false, :inline => run_tests(\"openbsd7\", \".*fuse.*\")\n  end\n\n  config.vm.define \"netbsd9\" do |b|\n    b.vm.box = \"generic/netbsd9\"\n    b.vm.provider :virtualbox do |v|\n      v.memory = 4096 + $wmem  # need big /tmp tmpfs in RAM!\n    end\n    b.vm.provision \"fs init\", :type => :shell, :inline => fs_init(\"vagrant\")\n    b.vm.provision \"packages netbsd\", :type => :shell, :inline => packages_netbsd\n    b.vm.provision \"build env\", :type => :shell, :privileged => false, :inline => build_sys_venv(\"netbsd9\")\n    b.vm.provision \"install borg\", :type => :shell, :privileged => false, :inline => install_borg(false)\n    b.vm.provision \"run tests\", :type => :shell, :privileged => false, :inline => run_tests(\"netbsd9\", \".*fuse.*\")\n  end\n\n  config.vm.define \"macos1012\" do |b|\n    b.vm.box = \"macos-sierra\"\n    b.vm.provider :virtualbox do |v|\n      v.memory = 8192 + $wmem\n      v.customize ['modifyvm', :id, '--ostype', 'MacOS_64']\n      v.customize ['modifyvm', :id, '--paravirtprovider', 'default']\n      v.customize ['modifyvm', :id, '--nested-hw-virt', 'on']\n      # Adjust CPU settings according to\n      # https://github.com/geerlingguy/macos-virtualbox-vm\n      v.customize ['modifyvm', :id, '--cpuidset',\n                   '00000001', '000306a9', '00020800', '80000201', '178bfbff']\n      # Disable USB variant requiring Virtualbox proprietary extension pack\n      v.customize [\"modifyvm\", :id, '--usbehci', 'off', '--usbxhci', 'off']\n    end\n    b.vm.provision \"fs init\", :type => :shell, :inline => fs_init(\"vagrant\")\n    b.vm.provision \"packages macos\", :type => :shell, :privileged => false, :inline => packages_macos\n    b.vm.provision \"install pyenv\", :type => :shell, :privileged => false, :inline => install_pyenv(\"macos1012\")\n    b.vm.provision \"fix pyenv\", :type => :shell, :privileged => false, :inline => fix_pyenv_macos(\"macos1012\")\n    b.vm.provision \"install pythons\", :type => :shell, :privileged => false, :inline => install_pythons(\"macos1012\")\n    b.vm.provision \"build env\", :type => :shell, :privileged => false, :inline => build_pyenv_venv(\"macos1012\")\n    b.vm.provision \"install borg\", :type => :shell, :privileged => false, :inline => install_borg(\"llfuse\")\n    b.vm.provision \"install pyinstaller\", :type => :shell, :privileged => false, :inline => install_pyinstaller()\n    b.vm.provision \"build binary with pyinstaller\", :type => :shell, :privileged => false, :inline => build_binary_with_pyinstaller(\"macos1012\")\n    b.vm.provision \"run tests\", :type => :shell, :privileged => false, :inline => run_tests(\"macos1012\", \".*(fuse3|none).*\")\n  end\n\n  # rsync on openindiana has troubles, does not set correct owner for /vagrant/borg and thus gives lots of\n  # permission errors. can be manually fixed in the VM by: sudo chown -R vagrant /vagrant/borg ; then rsync again.\n  config.vm.define \"openindiana\" do |b|\n    b.vm.box = \"openindiana/hipster\"\n    b.vm.provider :virtualbox do |v|\n      v.memory = 2048 + $wmem\n    end\n    b.vm.provision \"fs init\", :type => :shell, :inline => fs_init(\"vagrant\")\n    b.vm.provision \"packages openindiana\", :type => :shell, :inline => packages_openindiana\n    b.vm.provision \"build env\", :type => :shell, :privileged => false, :inline => build_sys_venv(\"openindiana\")\n    b.vm.provision \"install borg\", :type => :shell, :privileged => false, :inline => install_borg(\"nofuse\")\n    b.vm.provision \"run tests\", :type => :shell, :privileged => false, :inline => run_tests(\"openindiana\", \".*fuse.*\")\n  end\nend\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 4.984375,
          "content": "[project]\nname = \"borgbackup\"\ndynamic = [\"version\", \"readme\"]\nauthors = [{name=\"The Borg Collective (see AUTHORS file)\"}]\nmaintainers = [\n    {name=\"Thomas Waldmann\", email=\"tw@waldmann-edv.de\"},\n]\ndescription = \"Deduplicated, encrypted, authenticated and compressed backups\"\nrequires-python = \">=3.9\"\nkeywords = [\"backup\", \"borgbackup\"]\nclassifiers = [\n    \"Development Status :: 4 - Beta\",\n    \"Environment :: Console\",\n    \"Intended Audience :: System Administrators\",\n    \"License :: OSI Approved :: BSD License\",\n    \"Operating System :: POSIX :: BSD :: FreeBSD\",\n    \"Operating System :: POSIX :: BSD :: OpenBSD\",\n    \"Operating System :: POSIX :: BSD :: NetBSD\",\n    \"Operating System :: MacOS :: MacOS X\",\n    \"Operating System :: POSIX :: Linux\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n    \"Topic :: Security :: Cryptography\",\n    \"Topic :: System :: Archiving :: Backup\",\n]\nlicense = {text=\"BSD\"}\ndependencies = [\n  \"borghash ~= 0.1.0\",\n  \"borgstore ~= 0.1.0\",\n  \"msgpack >=1.0.3, <=1.1.0\",\n  \"packaging\",\n  \"platformdirs >=3.0.0, <5.0.0; sys_platform == 'darwin'\",  # for macOS: breaking changes in 3.0.0,\n  \"platformdirs >=2.6.0, <5.0.0; sys_platform != 'darwin'\",  # for others: 2.6+ works consistently.\n  \"argon2-cffi\",\n]\n\n[project.optional-dependencies]\nllfuse = [\"llfuse >= 1.3.8\"]\npyfuse3 = [\"pyfuse3 >= 3.1.1\"]\nnofuse = []\n\n[project.urls]\n\"Homepage\" = \"https://borgbackup.org/\"\n\"Bug Tracker\" = \"https://github.com/borgbackup/borg/issues\"\n\"Documentation\" = \"https://borgbackup.readthedocs.io/\"\n\"Repository\" = \"https://github.com/borgbackup/borg\"\n\"Changelog\" = \"https://github.com/borgbackup/borg/blob/master/docs/changes.rst\"\n\n[project.scripts]\nborg = \"borg.archiver:main\"\nborgfs = \"borg.archiver:main\"\n\n[tool.setuptools]\n# See also the MANIFEST.in file.\n# We want to install all the files in the package directories...\ninclude-package-data = true\n\n[tool.setuptools.packages.find]\nwhere = [\"src\"]\n\n[tool.setuptools.exclude-package-data]\n# ...except the source files which have been compiled (C extensions):\n\"*\" = [\"*.c\", \"*.h\", \"*.pyx\"]\n\n[build-system]\nrequires = [\"setuptools\", \"wheel\", \"pkgconfig\", \"Cython>=3.0.3\", \"setuptools_scm[toml]>=6.2\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.setuptools_scm]\n# make sure we have the same versioning scheme with all setuptools_scm versions, to avoid different autogenerated files\n# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1015052\n# https://github.com/borgbackup/borg/issues/6875\nwrite_to = \"src/borg/_version.py\"\nwrite_to_template = \"__version__ = version = {version!r}\\n\"\n\n[tool.black]\nline-length = 120\nskip-magic-trailing-comma = true\n\n[tool.ruff]\nline-length = 120\ntarget-version = \"py39\"\n\n# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.\nselect = [\"E\", \"F\"]\n\n# for reference ...\n#   E402 module level import not at top\n#   E501 line too long\n#   F401 import unused\n#   F405 undefined or defined from star imports\n#   F811 redef of unused var\n\n# borg code style guidelines:\n# Ignoring E203 due to https://github.com/PyCQA/pycodestyle/issues/373\nignore = [\"E203\", \"F405\", \"E402\"]\n\n# Allow autofix for all enabled rules (when `--fix`) is provided.\nfixable = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"I\", \"N\", \"Q\", \"S\", \"T\", \"W\", \"ANN\", \"ARG\", \"BLE\", \"COM\", \"DJ\", \"DTZ\", \"EM\", \"ERA\", \"EXE\", \"FBT\", \"ICN\", \"INP\", \"ISC\", \"NPY\", \"PD\", \"PGH\", \"PIE\", \"PL\", \"PT\", \"PTH\", \"PYI\", \"RET\", \"RSE\", \"RUF\", \"SIM\", \"SLF\", \"TCH\", \"TID\", \"TRY\", \"UP\", \"YTT\"]\nunfixable = []\n\n# Exclude a variety of commonly ignored directories.\nexclude = [\n    \".cache\",\n    \".eggs\",\n    \".git\",\n    \".git-rewrite\",\n    \".idea\",\n    \".mypy_cache\",\n    \".ruff_cache\",\n    \".tox\",\n    \"build\",\n    \"dist\",\n]\n\n# Allow unused variables when underscore-prefixed.\ndummy-variable-rgx = \"^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$\"\n\n# Code style violation exceptions:\n# please note that the values are adjusted so that they do not cause failures\n# with existing code. if you want to change them, you should first fix all\n# ruff failures that appear with your change.\n[tool.ruff.per-file-ignores]\n\"scripts/make.py\" = [\"E501\"]\n\"src/borg/archive.py\" = [\"E501\"]\n\"src/borg/archiver/help_cmd.py\" = [\"E501\"]\n\"src/borg/cache.py\" = [\"E501\"]\n\"src/borg/helpers/__init__.py\" = [\"F401\"]\n\"src/borg/platform/__init__.py\" = [\"F401\"]\n\"src/borg/testsuite/archiver/disk_full_test.py\" = [\"F811\"]\n\"src/borg/testsuite/archiver/return_codes_test.py\" = [\"F811\"]\n\"src/borg/testsuite/benchmark_test.py\" = [\"F811\"]\n\"src/borg/testsuite/platform_test.py\" = [\"F811\"]\n\n[tool.pytest.ini_options]\nmarkers = []\n\n[tool.mypy]\npython_version = \"3.9\"\nstrict_optional = false\nlocal_partial_types = true\nshow_error_codes = true\nfiles = \"src/borg/**/*.py\"\n\n[[tool.mypy.overrides]]\nmodule = [\n    \"msgpack.*\",\n    \"llfuse\",\n    \"pyfuse3\",\n    \"trio\",\n    \"borg.crypto.low_level\",\n    \"borg.platform.*\",\n]\nignore_missing_imports = true\n"
        },
        {
          "name": "requirements.d",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 9.826171875,
          "content": "# borgbackup - main setup code (extension building here, rest see pyproject.toml)\n\nimport os\nimport re\nimport sys\nfrom collections import defaultdict\n\ntry:\n    import multiprocessing\nexcept ImportError:\n    multiprocessing = None\n\nfrom setuptools.command.build_ext import build_ext\nfrom setuptools import setup, Extension\nfrom setuptools.command.sdist import sdist\n\ntry:\n    from Cython.Build import cythonize\n\n    cythonize_import_error_msg = None\nexcept ImportError as exc:\n    # either there is no Cython installed or there is some issue with it.\n    cythonize = None\n    cythonize_import_error_msg = \"ImportError: \" + str(exc)\n    if \"failed to map segment from shared object\" in cythonize_import_error_msg:\n        cythonize_import_error_msg += \" Check if the borg build uses a +exec filesystem.\"\n\nsys.path += [os.path.dirname(__file__)]\n\nis_win32 = sys.platform.startswith(\"win32\")\nis_openbsd = sys.platform.startswith(\"openbsd\")\n\n# Number of threads to use for cythonize, not used on windows\ncpu_threads = multiprocessing.cpu_count() if multiprocessing and multiprocessing.get_start_method() != \"spawn\" else None\n\n# How the build process finds the system libs:\n#\n# 1. if BORG_{LIBXXX,OPENSSL}_PREFIX is set, it will use headers and libs from there.\n# 2. if not and pkg-config can locate the lib, the lib located by\n#    pkg-config will be used. We use the pkg-config tool via the pkgconfig\n#    python package, which must be installed before invoking setup.py.\n#    if pkgconfig is not installed, this step is skipped.\n# 3. otherwise raise a fatal error.\n\n# Are we building on ReadTheDocs?\non_rtd = os.environ.get(\"READTHEDOCS\")\n\n# Extra cflags for all extensions, usually just warnings we want to enable explicitly\ncflags = [\"-Wall\", \"-Wextra\", \"-Wpointer-arith\"]\n\ncompress_source = \"src/borg/compress.pyx\"\ncrypto_ll_source = \"src/borg/crypto/low_level.pyx\"\nchunker_source = \"src/borg/chunker.pyx\"\nhashindex_source = \"src/borg/hashindex.pyx\"\nitem_source = \"src/borg/item.pyx\"\nchecksums_source = \"src/borg/checksums.pyx\"\nplatform_posix_source = \"src/borg/platform/posix.pyx\"\nplatform_linux_source = \"src/borg/platform/linux.pyx\"\nplatform_syncfilerange_source = \"src/borg/platform/syncfilerange.pyx\"\nplatform_darwin_source = \"src/borg/platform/darwin.pyx\"\nplatform_freebsd_source = \"src/borg/platform/freebsd.pyx\"\nplatform_windows_source = \"src/borg/platform/windows.pyx\"\n\ncython_sources = [\n    compress_source,\n    crypto_ll_source,\n    chunker_source,\n    hashindex_source,\n    item_source,\n    checksums_source,\n    platform_posix_source,\n    platform_linux_source,\n    platform_syncfilerange_source,\n    platform_freebsd_source,\n    platform_darwin_source,\n    platform_windows_source,\n]\n\nif cythonize:\n    Sdist = sdist\nelse:\n\n    class Sdist(sdist):\n        def __init__(self, *args, **kwargs):\n            raise Exception(\"Cython is required to run sdist\")\n\n    cython_c_files = [fn.replace(\".pyx\", \".c\") for fn in cython_sources]\n    if not on_rtd and not all(os.path.exists(path) for path in cython_c_files):\n        raise ImportError(\n            \"The GIT version of Borg needs a working Cython. \"\n            + \"Install or fix Cython or use a released borg version. \"\n            + \"Importing cythonize failed with: \"\n            + cythonize_import_error_msg\n        )\n\n\ncmdclass = {\"build_ext\": build_ext, \"sdist\": Sdist}\n\n\next_modules = []\nif not on_rtd:\n\n    def members_appended(*ds):\n        result = defaultdict(list)\n        for d in ds:\n            for k, v in d.items():\n                assert isinstance(v, list)\n                result[k].extend(v)\n        return result\n\n    try:\n        import pkgconfig as pc\n    except ImportError:\n        print(\"Warning: can not import pkgconfig python package.\")\n        pc = None\n\n    def lib_ext_kwargs(pc, prefix_env_var, lib_name, lib_pkg_name, pc_version, lib_subdir=\"lib\"):\n        system_prefix = os.environ.get(prefix_env_var)\n        if system_prefix:\n            print(f\"Detected and preferring {lib_pkg_name} [via {prefix_env_var}]\")\n            return dict(\n                include_dirs=[os.path.join(system_prefix, \"include\")],\n                library_dirs=[os.path.join(system_prefix, lib_subdir)],\n                libraries=[lib_name],\n            )\n\n        if pc and pc.installed(lib_pkg_name, pc_version):\n            print(f\"Detected and preferring {lib_pkg_name} [via pkg-config]\")\n            return pc.parse(lib_pkg_name)\n        raise Exception(\n            f\"Could not find {lib_name} lib/headers, please set {prefix_env_var} \"\n            f\"or ensure {lib_pkg_name}.pc is in PKG_CONFIG_PATH.\"\n        )\n\n    if is_win32:\n        crypto_ext_lib = lib_ext_kwargs(pc, \"BORG_OPENSSL_PREFIX\", \"libcrypto\", \"libcrypto\", \">=1.1.1\", lib_subdir=\"\")\n    elif is_openbsd:\n        # Use openssl (not libressl) because we need AES-OCB via EVP api. Link\n        # it statically to avoid conflicting with shared libcrypto from the base\n        # OS pulled in via dependencies.\n        openssl_prefix = os.environ.get(\"BORG_OPENSSL_PREFIX\", \"/usr/local\")\n        openssl_name = os.environ.get(\"BORG_OPENSSL_NAME\", \"eopenssl33\")\n        crypto_ext_lib = dict(\n            include_dirs=[os.path.join(openssl_prefix, \"include\", openssl_name)],\n            extra_objects=[os.path.join(openssl_prefix, \"lib\", openssl_name, \"libcrypto.a\")],\n        )\n    else:\n        crypto_ext_lib = lib_ext_kwargs(pc, \"BORG_OPENSSL_PREFIX\", \"crypto\", \"libcrypto\", \">=1.1.1\")\n\n    crypto_ext_kwargs = members_appended(\n        dict(sources=[crypto_ll_source]), crypto_ext_lib, dict(extra_compile_args=cflags)\n    )\n\n    compress_ext_kwargs = members_appended(\n        dict(sources=[compress_source]),\n        lib_ext_kwargs(pc, \"BORG_LIBLZ4_PREFIX\", \"lz4\", \"liblz4\", \">= 1.7.0\"),\n        lib_ext_kwargs(pc, \"BORG_LIBZSTD_PREFIX\", \"zstd\", \"libzstd\", \">= 1.3.0\"),\n        dict(extra_compile_args=cflags),\n    )\n\n    checksums_ext_kwargs = members_appended(\n        dict(sources=[checksums_source]),\n        lib_ext_kwargs(pc, \"BORG_LIBXXHASH_PREFIX\", \"xxhash\", \"libxxhash\", \">= 0.7.3\"),\n        dict(extra_compile_args=cflags),\n    )\n\n    if sys.platform == \"linux\":\n        linux_ext_kwargs = members_appended(\n            dict(sources=[platform_linux_source]),\n            lib_ext_kwargs(pc, \"BORG_LIBACL_PREFIX\", \"acl\", \"libacl\", \">= 2.2.47\"),\n            dict(extra_compile_args=cflags),\n        )\n    else:\n        linux_ext_kwargs = members_appended(\n            dict(sources=[platform_linux_source], libraries=[\"acl\"], extra_compile_args=cflags)\n        )\n\n    # note: _chunker.c is a relatively complex/large piece of handwritten C code,\n    # thus we undef NDEBUG for it, so the compiled code will contain and execute assert().\n    ext_modules += [\n        Extension(\"borg.crypto.low_level\", **crypto_ext_kwargs),\n        Extension(\"borg.compress\", **compress_ext_kwargs),\n        Extension(\"borg.hashindex\", [hashindex_source], extra_compile_args=cflags),\n        Extension(\"borg.item\", [item_source], extra_compile_args=cflags),\n        Extension(\"borg.chunker\", [chunker_source], extra_compile_args=cflags, undef_macros=[\"NDEBUG\"]),\n        Extension(\"borg.checksums\", **checksums_ext_kwargs),\n    ]\n\n    posix_ext = Extension(\"borg.platform.posix\", [platform_posix_source], extra_compile_args=cflags)\n    linux_ext = Extension(\"borg.platform.linux\", **linux_ext_kwargs)\n\n    syncfilerange_ext = Extension(\n        \"borg.platform.syncfilerange\", [platform_syncfilerange_source], extra_compile_args=cflags\n    )\n    freebsd_ext = Extension(\"borg.platform.freebsd\", [platform_freebsd_source], extra_compile_args=cflags)\n    darwin_ext = Extension(\"borg.platform.darwin\", [platform_darwin_source], extra_compile_args=cflags)\n    windows_ext = Extension(\"borg.platform.windows\", [platform_windows_source], extra_compile_args=cflags)\n\n    if not is_win32:\n        ext_modules.append(posix_ext)\n    else:\n        ext_modules.append(windows_ext)\n    if sys.platform == \"linux\":\n        ext_modules.append(linux_ext)\n        ext_modules.append(syncfilerange_ext)\n    elif sys.platform.startswith(\"freebsd\"):\n        ext_modules.append(freebsd_ext)\n    elif sys.platform == \"darwin\":\n        ext_modules.append(darwin_ext)\n\n    # sometimes there's no need to cythonize\n    # this breaks chained commands like 'clean sdist'\n    cythonizing = (\n        len(sys.argv) > 1\n        and sys.argv[1] not in ((\"clean\", \"egg_info\", \"--help-commands\", \"--version\"))\n        and \"--help\" not in sys.argv[1:]\n    )\n\n    if cythonize and cythonizing:\n        # 3str is the default in Cython3 and we do not support older Cython releases.\n        # we only set this to avoid the related FutureWarning from Cython3.\n        cython_opts = dict(compiler_directives={\"language_level\": \"3str\"})\n        if not is_win32:\n            # compile .pyx extensions to .c in parallel, does not work on windows\n            cython_opts[\"nthreads\"] = cpu_threads\n\n        # generate C code from Cython for ALL supported platforms, so we have them in the sdist.\n        # the sdist does not require Cython at install time, so we need all as C.\n        cythonize([posix_ext, linux_ext, syncfilerange_ext, freebsd_ext, darwin_ext, windows_ext], **cython_opts)\n        # generate C code from Cython for THIS platform (and for all platform-independent Cython parts).\n        ext_modules = cythonize(ext_modules, **cython_opts)\n\n\ndef long_desc_from_readme():\n    with open(\"README.rst\") as fd:\n        long_description = fd.read()\n        # remove header, but have one \\n before first headline\n        start = long_description.find(\"What is BorgBackup?\")\n        assert start >= 0\n        long_description = \"\\n\" + long_description[start:]\n        # remove badges\n        long_description = re.compile(r\"^\\.\\. start-badges.*^\\.\\. end-badges\", re.M | re.S).sub(\"\", long_description)\n        # remove unknown directives\n        long_description = re.compile(r\"^\\.\\. highlight:: \\w+$\", re.M).sub(\"\", long_description)\n        return long_description\n\n\nsetup(cmdclass=cmdclass, ext_modules=ext_modules, long_description=long_desc_from_readme())\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.1279296875,
          "content": "# tox configuration - if you change anything here, run this to verify:\n# fakeroot -u tox --recreate\n\n[tox]\nenvlist = py{39,310,311,312,313}-{none,fuse2,fuse3},docs\nminversion = 3.2\nrequires =\n\tpkgconfig\n\tcython\n\twheel\n\tsetuptools_scm\n\n[testenv]\npackage = editable-legacy  # without this it does not find setup_docs when running under fakeroot\nsetenv =\n   fuse2: BORG_FUSE_IMPL=llfuse\n   fuse3: BORG_FUSE_IMPL=pyfuse3\ndeps =\n    fuse2: llfuse\n    fuse3: pyfuse3\n    -rrequirements.d/development.txt\ncommands = py.test -v -n {env:XDISTN:1} -rs --cov=borg --cov-config=.coveragerc --benchmark-skip --pyargs {posargs:borg.testsuite}\n# fakeroot -u needs some env vars:\npassenv = *\n\n\n[testenv:.pkg]\npassenv = *  # needed by tox4, so env vars are visible for building borg\n\n\n[testenv:ruff]\nskip_sdist=true\nskip_install=true\nchangedir =\ndeps =\n    ruff\ncommands = ruff check .\n\n[testenv:mypy]\nchangedir =\ndeps =\n    pytest\n    mypy\n    pkgconfig\ncommands = mypy --ignore-missing-imports\n\n[testenv:docs]\nchangedir = docs\ndeps =\n    sphinx\n    guzzle_sphinx_theme\ncommands =\n    sphinx-build -n -v -W --keep-going -b html -d {envtmpdir}/doctrees . {envtmpdir}/html\n"
        }
      ]
    }
  ]
}