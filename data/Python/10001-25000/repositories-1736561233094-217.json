{
  "metadata": {
    "timestamp": 1736561233094,
    "page": 217,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wkentaro/labelme",
      "stars": 13837,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.0537109375,
          "content": "[flake8]\nexclude = .*/\nignore = E203, E741, W503, W504\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0810546875,
          "content": "/.cache/\n/.pytest_cache/\n\n/build/\n/dist/\n/*.egg-info/\n\n*.py[cdo]\n\n.DS_Store\n.idea/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.322265625,
          "content": "cff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n- family-names: \"Wada\"\n  given-names: \"Kentaro\"\n  orcid: \"https://orcid.org/0000-0002-6347-5156\"\ntitle: \"Labelme: Image Polygonal Annotation with Python\"\ndoi: 10.5281/zenodo.5711226\nurl: \"https://github.com/wkentaro/labelme\"\nlicense: GPL-3\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.6708984375,
          "content": "Copyright (C) 2016 Kentaro Wada.\nCopyright (C) 2011 Michael Pitidis, Hussein Abdulwahid.\n\nLabelme is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nLabelme is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with Labelme.  If not, see <http://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.017578125,
          "content": "include README.md\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.3603515625,
          "content": "all:\n\t@echo '## Make commands ##'\n\t@echo\n\t@$(MAKE) -pRrq -f $(lastword $(MAKEFILE_LIST)) : 2>/dev/null | awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($$1 !~ \"^[#.]\") {print $$1}}' | sort | egrep -v -e '^[^[:alnum:]]' -e '^$@$$' | xargs\n\nlint:\n\truff format --check\n\truff check\n\nformat:\n\truff format\n\truff check --fix\n\ntest:\n\tMPLBACKEND='agg' pytest tests\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.4619140625,
          "content": "<h1 align=\"center\">\n  <img src=\"labelme/icons/icon.png\"><br/>labelme\n</h1>\n\n<h4 align=\"center\">\n  Image Polygonal Annotation with Python\n</h4>\n\n<div align=\"center\">\n  <a href=\"https://pypi.python.org/pypi/labelme\"><img src=\"https://img.shields.io/pypi/v/labelme.svg\"></a>\n  <a href=\"https://pypi.org/project/labelme\"><img src=\"https://img.shields.io/pypi/pyversions/labelme.svg\"></a>\n  <a href=\"https://github.com/wkentaro/labelme/actions\"><img src=\"https://github.com/wkentaro/labelme/actions/workflows/ci.yml/badge.svg?branch=main&event=push\"></a>\n</div>\n\n<div align=\"center\">\n  <a href=\"#installation\"><b>Installation</b></a>\n  | <a href=\"#usage\"><b>Usage</b></a>\n  | <a href=\"#examples\"><b>Examples</b></a>\n  <!-- | <a href=\"https://github.com/wkentaro/labelme/discussions\"><b>Community</b></a> -->\n  <!-- | <a href=\"https://www.youtube.com/playlist?list=PLI6LvFw0iflh3o33YYnVIfOpaO0hc5Dzw\"><b>Youtube FAQ</b></a> -->\n</div>\n\n<br/>\n\n<div align=\"center\">\n  <img src=\"examples/instance_segmentation/.readme/annotation.jpg\" width=\"70%\">\n</div>\n\n## Description\n\nLabelme is a graphical image annotation tool inspired by <http://labelme.csail.mit.edu>.  \nIt is written in Python and uses Qt for its graphical interface.\n\n<img src=\"examples/instance_segmentation/data_dataset_voc/JPEGImages/2011_000006.jpg\" width=\"19%\" /> <img src=\"examples/instance_segmentation/data_dataset_voc/SegmentationClass/2011_000006.png\" width=\"19%\" /> <img src=\"examples/instance_segmentation/data_dataset_voc/SegmentationClassVisualization/2011_000006.jpg\" width=\"19%\" /> <img src=\"examples/instance_segmentation/data_dataset_voc/SegmentationObject/2011_000006.png\" width=\"19%\" /> <img src=\"examples/instance_segmentation/data_dataset_voc/SegmentationObjectVisualization/2011_000006.jpg\" width=\"19%\" />  \n<i>VOC dataset example of instance segmentation.</i>\n\n<img src=\"examples/semantic_segmentation/.readme/annotation.jpg\" width=\"30%\" /> <img src=\"examples/bbox_detection/.readme/annotation.jpg\" width=\"30%\" /> <img src=\"examples/classification/.readme/annotation_cat.jpg\" width=\"35%\" />  \n<i>Other examples (semantic segmentation, bbox detection, and classification).</i>\n\n<img src=\"https://user-images.githubusercontent.com/4310419/47907116-85667800-de82-11e8-83d0-b9f4eb33268f.gif\" width=\"30%\" /> <img src=\"https://user-images.githubusercontent.com/4310419/47922172-57972880-deae-11e8-84f8-e4324a7c856a.gif\" width=\"30%\" /> <img src=\"https://user-images.githubusercontent.com/14256482/46932075-92145f00-d080-11e8-8d09-2162070ae57c.png\" width=\"32%\" />  \n<i>Various primitives (polygon, rectangle, circle, line, and point).</i>\n\n\n## Features\n\n- [x] Image annotation for polygon, rectangle, circle, line and point. ([tutorial](examples/tutorial))\n- [x] Image flag annotation for classification and cleaning. ([#166](https://github.com/wkentaro/labelme/pull/166))\n- [x] Video annotation. ([video annotation](examples/video_annotation))\n- [x] GUI customization (predefined labels / flags, auto-saving, label validation, etc). ([#144](https://github.com/wkentaro/labelme/pull/144))\n- [x] Exporting VOC-format dataset for semantic/instance segmentation. ([semantic segmentation](examples/semantic_segmentation), [instance segmentation](examples/instance_segmentation))\n- [x] Exporting COCO-format dataset for instance segmentation. ([instance segmentation](examples/instance_segmentation))\n\n\n## Installation\n\nThere are 2 options to install labelme:\n\n### Option 1: Using pip\n\nFor more detail, check [\"Install Labelme using Pip\"](https://www.labelme.io/docs/install-labelme-pip).\n\n```bash\npip install labelme\n```\n\n### Option 2: Using standalone executable (Easiest)\n\nIf you're willing to invest in the convenience of simple installation without any dependencies (Python, Qt),\nyou can download the standalone executable from [\"Install Labelme as App\"](https://www.labelme.io/docs/install-labelme-app).\n\nIt's a one-time payment for lifetime access, and it helps us to maintain this project.\n\n\n## Usage\n\nRun `labelme --help` for detail.  \nThe annotations are saved as a [JSON](http://www.json.org/) file.\n\n```bash\nlabelme  # just open gui\n\n# tutorial (single image example)\ncd examples/tutorial\nlabelme apc2016_obj3.jpg  # specify image file\nlabelme apc2016_obj3.jpg -O apc2016_obj3.json  # close window after the save\nlabelme apc2016_obj3.jpg --nodata  # not include image data but relative image path in JSON file\nlabelme apc2016_obj3.jpg \\\n  --labels highland_6539_self_stick_notes,mead_index_cards,kong_air_dog_squeakair_tennis_ball  # specify label list\n\n# semantic segmentation example\ncd examples/semantic_segmentation\nlabelme data_annotated/  # Open directory to annotate all images in it\nlabelme data_annotated/ --labels labels.txt  # specify label list with a file\n```\n\n### Command Line Arguments\n- `--output` specifies the location that annotations will be written to. If the location ends with .json, a single annotation will be written to this file. Only one image can be annotated if a location is specified with .json. If the location does not end with .json, the program will assume it is a directory. Annotations will be stored in this directory with a name that corresponds to the image that the annotation was made on.\n- The first time you run labelme, it will create a config file in `~/.labelmerc`. You can edit this file and the changes will be applied the next time that you launch labelme. If you would prefer to use a config file from another location, you can specify this file with the `--config` flag.\n- Without the `--nosortlabels` flag, the program will list labels in alphabetical order. When the program is run with this flag, it will display labels in the order that they are provided.\n- Flags are assigned to an entire image. [Example](examples/classification)\n- Labels are assigned to a single polygon. [Example](examples/bbox_detection)\n\n### FAQ\n\n- **How to convert JSON file to numpy array?** See [examples/tutorial](examples/tutorial#convert-to-dataset).\n- **How to load label PNG file?** See [examples/tutorial](examples/tutorial#how-to-load-label-png-file).\n- **How to get annotations for semantic segmentation?** See [examples/semantic_segmentation](examples/semantic_segmentation).\n- **How to get annotations for instance segmentation?** See [examples/instance_segmentation](examples/instance_segmentation).\n\n\n## Examples\n\n* [Image Classification](examples/classification)\n* [Bounding Box Detection](examples/bbox_detection)\n* [Semantic Segmentation](examples/semantic_segmentation)\n* [Instance Segmentation](examples/instance_segmentation)\n* [Video Annotation](examples/video_annotation)\n\n## How to develop\n\n```bash\ngit clone https://github.com/wkentaro/labelme.git\ncd labelme\n\n# Install anaconda3 and labelme\ncurl -L https://github.com/wkentaro/dotfiles/raw/main/local/bin/install_anaconda3.sh | bash -s .\nsource .anaconda3/bin/activate\npip install -e .\n```\n\n\n### How to build standalone executable\n\nBelow shows how to build the standalone executable on macOS, Linux and Windows.  \n\n```bash\n# Setup conda\nconda create --name labelme python=3.9\nconda activate labelme\n\n# Build the standalone executable\npip install .\npip install 'matplotlib<3.3'\npip install pyinstaller\npyinstaller labelme.spec\ndist/labelme --version\n```\n\n\n### How to contribute\n\nMake sure below test passes on your environment.  \nSee `.github/workflows/ci.yml` for more detail.\n\n```bash\npip install -r requirements-dev.txt\n\nruff format --check  # `ruff format` to auto-fix\nruff check  # `ruff check --fix` to auto-fix\nMPLBACKEND='agg' pytest -vsx tests/\n```\n\n\n## Acknowledgement\n\nThis repo is the fork of [mpitid/pylabelme](https://github.com/mpitid/pylabelme).\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "labelme.desktop",
          "type": "blob",
          "size": 0.166015625,
          "content": "[Desktop Entry]\nName=Labelme\nComment=Image Polygonal Annotation with Python\nExec=labelme\nIcon=labelme\nTerminal=false\nType=Application\nCategories=Graphics;RasterGraphics;\n"
        },
        {
          "name": "labelme.spec",
          "type": "blob",
          "size": 1.1259765625,
          "content": "# -*- mode: python -*-\n# vim: ft=python\n\nimport os.path as osp\nimport sys\n\nimport osam._models.yoloworld.clip\n\n\nsys.setrecursionlimit(5000)  # required on Windows\n\n\na = Analysis(\n    ['labelme/__main__.py'],\n    pathex=['labelme'],\n    binaries=[],\n    datas=[\n        ('labelme/config/default_config.yaml', 'labelme/config'),\n        ('labelme/icons/*', 'labelme/icons'),\n        ('labelme/translate/*.qm', 'translate'),\n        (\n            osp.join(\n                osp.dirname(osam._models.yoloworld.clip.__file__),\n                \"bpe_simple_vocab_16e6.txt.gz\",\n            ),\n            'osam/_models/yoloworld/clip',\n        ),\n    ],\n    hiddenimports=[],\n    hookspath=[],\n    runtime_hooks=[],\n    excludes=[],\n)\npyz = PYZ(a.pure, a.zipped_data)\nexe = EXE(\n    pyz,\n    a.scripts,\n    a.binaries,\n    a.zipfiles,\n    a.datas,\n    name='labelme',\n    debug=False,\n    strip=False,\n    upx=True,\n    runtime_tmpdir=None,\n    console=False,\n    icon='labelme/icons/icon.ico',\n)\napp = BUNDLE(\n    exe,\n    name='Labelme.app',\n    icon='labelme/icons/icon.icns',\n    bundle_identifier=None,\n    info_plist={'NSHighResolutionCapable': 'True'},\n)\n"
        },
        {
          "name": "labelme",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.0244140625,
          "content": "[pytest]\nmarkers =\n  gui\n"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.052734375,
          "content": "github2pypi==1.0.0\npytest\npytest-qt\nruff==0.1.9\ntwine\n"
        },
        {
          "name": "ruff.toml",
          "type": "blob",
          "size": 0.6220703125,
          "content": "exclude = [\n  \".conda\",\n  \".git\",\n  \"src\",\n]\n\nline-length = 88\nindent-width = 4\n\n[lint]\n# Enable Pyflakes (`F`), pycodestyle (`E`), isort (`I`).\nselect = [\"E\", \"F\", \"I\"]\nignore = []\n\n# Allow fix for all enabled rules (when `--fix`) is provided.\nfixable = [\"ALL\"]\nunfixable = []\n\n[format]\n# Like Black, use double quotes for strings.\nquote-style = \"double\"\n\n# Like Black, indent with spaces, rather than tabs.\nindent-style = \"space\"\n\n# Like Black, respect magic trailing commas.\nskip-magic-trailing-comma = false\n\n# Like Black, automatically detect the appropriate line ending.\nline-ending = \"auto\"\n\n[lint.isort]\nforce-single-line = true\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 4.708984375,
          "content": "import distutils.spawn\nimport os\nimport re\nimport shlex\nimport subprocess\nimport sys\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\ndef get_version():\n    filename = \"labelme/__init__.py\"\n    with open(filename) as f:\n        match = re.search(r\"\"\"^__version__ = ['\"]([^'\"]*)['\"]\"\"\", f.read(), re.M)\n    if not match:\n        raise RuntimeError(\"{} doesn't contain __version__\".format(filename))\n    version = match.groups()[0]\n    return version\n\n\ndef get_install_requires():\n    install_requires = [\n        \"gdown\",\n        \"imgviz>=1.7.5\",\n        \"loguru\",\n        \"matplotlib\",\n        \"natsort>=7.1.0\",\n        \"numpy\",\n        \"onnxruntime>=1.14.1,!=1.16.0\",\n        \"osam>=0.2.2\",\n        \"Pillow>=2.8\",\n        \"PyYAML\",\n        \"qtpy!=1.11.2\",\n        \"scikit-image\",\n        \"termcolor\",\n    ]\n\n    # Find python binding for qt with priority:\n    # PyQt5 -> PySide2\n    # and PyQt5 is automatically installed on Python3.\n    QT_BINDING = None\n\n    try:\n        import PyQt5  # NOQA\n\n        QT_BINDING = \"pyqt5\"\n    except ImportError:\n        pass\n\n    if QT_BINDING is None:\n        try:\n            import PySide2  # NOQA\n\n            QT_BINDING = \"pyside2\"\n        except ImportError:\n            pass\n\n    if QT_BINDING is None:\n        # PyQt5 can be installed via pip for Python3\n        # 5.15.3, 5.15.4 won't work with PyInstaller\n        install_requires.append(\"PyQt5!=5.15.3,!=5.15.4\")\n        QT_BINDING = \"pyqt5\"\n\n    del QT_BINDING\n\n    if os.name == \"nt\":  # Windows\n        install_requires.append(\"colorama\")\n\n    return install_requires\n\n\ndef get_long_description():\n    # Requires encoding for Non-ASCII: https://github.com/wkentaro/labelme/issues/1509\n    with open(\"README.md\", encoding=\"utf-8\") as f:\n        long_description = f.read()\n    try:\n        # when this package is being released\n        import github2pypi\n\n        return github2pypi.replace_url(\n            slug=\"wkentaro/labelme\", content=long_description, branch=\"main\"\n        )\n    except ImportError:\n        # when this package is being installed\n        return long_description\n\n\ndef main():\n    version = get_version()\n\n    if sys.argv[1] == \"release\":\n        try:\n            import github2pypi  # NOQA\n        except ImportError:\n            print(\n                \"Please install github2pypi\\n\\n\\tpip install github2pypi\\n\",\n                file=sys.stderr,\n            )\n            sys.exit(1)\n\n        if not distutils.spawn.find_executable(\"twine\"):\n            print(\n                \"Please install twine:\\n\\n\\tpip install twine\\n\",\n                file=sys.stderr,\n            )\n            sys.exit(1)\n\n        commands = [\n            \"git push origin main\",\n            \"git tag v{:s}\".format(version),\n            \"git push origin --tags\",\n            \"python setup.py sdist\",\n            \"twine upload dist/labelme-{:s}.tar.gz\".format(version),\n        ]\n        for cmd in commands:\n            print(\"+ {:s}\".format(cmd))\n            subprocess.check_call(shlex.split(cmd))\n        sys.exit(0)\n\n    setup(\n        name=\"labelme\",\n        version=version,\n        packages=find_packages(),\n        description=\"Image Polygonal Annotation with Python\",\n        long_description=get_long_description(),\n        long_description_content_type=\"text/markdown\",\n        author=\"Kentaro Wada\",\n        author_email=\"www.kentaro.wada@gmail.com\",\n        url=\"https://github.com/wkentaro/labelme\",\n        install_requires=get_install_requires(),\n        license=\"GPLv3\",\n        keywords=\"Image Annotation, Machine Learning\",\n        classifiers=[\n            \"Development Status :: 5 - Production/Stable\",\n            \"Intended Audience :: Developers\",\n            \"Intended Audience :: Science/Research\",\n            \"Natural Language :: English\",\n            \"Operating System :: OS Independent\",\n            \"Programming Language :: Python\",\n            \"Programming Language :: Python :: 3.5\",\n            \"Programming Language :: Python :: 3.6\",\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3 :: Only\",\n        ],\n        package_data={\"labelme\": [\"icons/*\", \"config/*.yaml\", \"translate/*\"]},\n        entry_points={\n            \"console_scripts\": [\n                \"labelme=labelme.__main__:main\",\n                \"labelme_draw_json=labelme.cli.draw_json:main\",\n                \"labelme_draw_label_png=labelme.cli.draw_label_png:main\",\n                \"labelme_json_to_dataset=labelme.cli.json_to_dataset:main\",\n                \"labelme_export_json=labelme.cli.export_json:main\",\n                \"labelme_on_docker=labelme.cli.on_docker:main\",\n            ],\n        },\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}