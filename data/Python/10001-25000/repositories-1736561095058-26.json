{
  "metadata": {
    "timestamp": 1736561095058,
    "page": 26,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wangzheng0822/algo",
      "stars": 22977,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5234375,
          "content": "# Compiled class file\n*.class\n\n# Log file\n*.log\n\n# BlueJ files\n*.ctxt\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package Files #\n*.jar\n*.war\n*.nar\n*.ear\n*.zip\n*.tar.gz\n*.rar\n*.DS_Store\n*.exe\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n\n# editor files\n.vscode\n.*.swp\n\n# WebStorm\n.idea/\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n\n**/*.idea\n**/*.iml\n**/*out\n"
        },
        {
          "name": "DynamicStackBaseArray.java",
          "type": "blob",
          "size": 2.9697265625,
          "content": "package Stack;\n\nimport java.util.Iterator;\n\n/**\n * 顺序栈的动态扩容\n * Author: PeiJiaNi\n * @param <T>  顺序栈元素类型\n */\n\npublic class DynamicStackBaseArray<T> implements Iterable<T> {\n    private T[] items;   // 数组\n    private int count;   // 栈中的元素个数\n    private int length;  // 栈空间大小\n\n    /**\n     * 初始化栈\n     *\n     * @param length 栈空间大小\n     */\n    public DynamicStackBaseArray(int length) {\n        this.items = (T[]) new Object[length];\n        this.count = 0;\n        this.length = length;\n    }\n\n    /**\n     * 入栈操作 平均时间复杂度O(1)\n     *\n     * @param item 入栈元素\n     */\n    public void push(T item) {\n        // 栈空间已满，则扩容\n        if (count == length) {\n            resize(2 * items.length);\n        }\n\n        items[count++] = item;\n    }\n\n    /**\n     * 出栈操作 平均时间复杂度O(1)\n     *\n     * @return 如果栈内不为空，则返回栈顶元素，否则返回-1\n     */\n    public T pop() {\n        if (count == 0) {\n            System.out.println(\"当前栈已空，无法进行出栈操作\");\n            return null;\n        }\n\n        T item = items[--count];\n        items[count] = null;\n\n        if (count > 0 && (count == items.length / 4)) {\n            resize(items.length / 2);\n        }\n\n        // 返回下标为 count-1 的数组元素，并且栈中元素个数count-1\n        return item;\n    }\n\n    /**\n     * 栈空间动态增加或减小\n     *\n     * @param size\n     */\n    private void resize(int size) {\n        T[] newItems = (T[]) new Object[size];\n        for (int i = 0; i < count; i++) {\n            newItems[i] = this.items[i];\n        }\n        this.items = newItems;\n    }\n\n    //返回栈中最近添加的元素而不删除它\n    public T peek() {\n        return items[count - 1];\n    }\n\n    /**\n     * 判断当前栈是否为空\n     *\n     * @return 栈为空，则返回true,否则返回-1\n     */\n    public boolean isEmpty() {\n        return count == 0;\n    }\n\n    /**\n     * 返回栈中元素个数\n     *\n     * @return\n     */\n    public int size() {\n        return count;\n    }\n\n    @Override\n    public Iterator<T> iterator() {\n        return new ArrayIterator();\n    }\n\n    // 内部类\n    class ArrayIterator implements Iterator {\n        int numOfItems = count;\n\n        @Override\n        public boolean hasNext() {\n            return numOfItems > 0;\n        }\n\n        @Override\n        public T next() {\n            return items[--numOfItems];\n        }\n    }\n\n    public static void main(String[] args) {\n        DynamicStackBaseArray<Integer> stack = new DynamicStackBaseArray<Integer>(6);\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        stack.push(4);\n        stack.push(5);\n        // System.out.println(stack.peek());\n        Iterator iterator = stack.iterator();\n        // System.out.println(iterator.hasNext());\n        while (iterator.hasNext()) {\n            System.out.println(iterator.next());\n        }\n\n    }\n\n}\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.66796875,
          "content": "# 数据结构和算法必知必会的50个代码实现\n### 微信搜索我的公众号“小争哥”，或者微信扫描下面二维码关注\n### 关注微信公众号，回复”PDF“获取独家算法资料。\n### 前Google工程师，10万人跟着学的《数据结构和算法之美》《设计模式之美》专栏作者\n![t2](https://github.com/wangzheng0822/markdownphotos/blob/master/pics/qrcode_for_gh_9b0e7afdff20_258.jpg)\n\n## 数组\n* 实现一个支持动态扩容的数组\n* 实现一个大小固定的有序数组，支持动态增删改操作\n* 实现两个有序数组合并为一个有序数组\n\n## 链表\n* 实现单链表、循环链表、双向链表，支持增删操作\n* 实现单链表反转\n* 实现两个有序的链表合并为一个有序链表\n* 实现求链表的中间结点\n\n## 栈\n* 用数组实现一个顺序栈\n* 用链表实现一个链式栈\n* 编程模拟实现一个浏览器的前进、后退功能\n\n## 队列\n* 用数组实现一个顺序队列\n* 用链表实现一个链式队列\n* 实现一个循环队列\n\n## 递归\n* 编程实现斐波那契数列求值f(n)=f(n-1)+f(n-2)\n* 编程实现求阶乘n!\n* 编程实现一组数据集合的全排列\n\n## 排序\n* 实现归并排序、快速排序、插入排序、冒泡排序、选择排序\n* 编程实现O(n)时间复杂度内找到一组数据的第K大元素\n\n## 二分查找\n* 实现一个有序数组的二分查找算法\n* 实现模糊二分查找算法（比如大于等于给定值的第一个元素）\n\n## 散列表\n* 实现一个基于链表法解决冲突问题的散列表\n* 实现一个LRU缓存淘汰算法\n\n## 字符串\n* 实现一个字符集，只包含a～z这26个英文字母的Trie树\n* 实现朴素的字符串匹配算法\n\n## 二叉树\n* 实现一个二叉查找树，并且支持插入、删除、查找操作\n* 实现查找二叉查找树中某个节点的后继、前驱节点\n* 实现二叉树前、中、后序以及按层遍历\n\n## 堆\n* 实现一个小顶堆、大顶堆、优先级队列\n* 实现堆排序\n* 利用优先级队列合并K个有序数组\n* 求一组动态数据集合的最大Top K\n\n## 图\n* 实现有向图、无向图、有权图、无权图的邻接矩阵和邻接表表示方法\n* 实现图的深度优先搜索、广度优先搜索\n* 实现Dijkstra算法、A*算法\n* 实现拓扑排序的Kahn算法、DFS算法\n\n## 回溯\n* 利用回溯算法求解八皇后问题\n* 利用回溯算法求解0-1背包问题\n\n## 分治\n* 利用分治算法求一组数据的逆序对个数\n\n## 动态规划\n* 0-1背包问题\n* 最小路径和\n* 编程实现莱文斯坦最短编辑距离\n* 编程实现查找两个字符串的最长公共子序列\n* 编程实现一个数据序列的最长递增子序列\n"
        },
        {
          "name": "StackBaseArray.java",
          "type": "blob",
          "size": 1.6064453125,
          "content": "package Stack;\n\n/**\n * 顺序栈(基于数组实现)\n * Author: PeiJiaNi\n */\npublic class StackBaseArray {\n    private int[] items;    // 数组\n    private int count;      // 栈中元素个数\n    private int length;   // 栈空间大小\n\n    public StackBaseArray(int capactiy) {\n        this.items = new int[capactiy];\n        this.count = 0;\n        this.length = capactiy;\n    }\n\n    /**\n     * 入栈操作 时间复杂度O(1)\n     * @param item 要入栈的元素\n     * @return     入栈成功则返回true,否则返回false\n     */\n    public boolean  push(int item) {\n        if(count == length) {\n            System.out.println(\"当前栈已满，无法进行入栈操作\");\n            return false;\n        }\n        items[count] = item;\n        ++count;\n        return true;\n    }\n\n    /**\n     * 出栈操作 时间复杂度O(1)\n     * @return 如果栈内不为空，则返回栈顶元素，否则返回-1\n     */\n    public int  pop(){\n        if(count == 0) {\n            System.out.println(\"当前栈已空，无法进行出栈操作\");\n            return -1;\n        }\n\n        // 返回下标为 count-1 的数组元素，并且栈中元素个数count-1\n        return items[--count];\n    }\n\n    public static void main(String[] args){\n        StackBaseArray stack = new StackBaseArray(6);\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        stack.push(4);\n        stack.push(5);\n        System.out.println(stack.pop());\n        System.out.println(stack.pop());\n        System.out.println(stack.pop());\n        System.out.println(stack.pop());\n        System.out.println(stack.pop());\n\n    }\n\n\n}\n\n"
        },
        {
          "name": "c-cpp",
          "type": "tree",
          "content": null
        },
        {
          "name": "csharp",
          "type": "tree",
          "content": null
        },
        {
          "name": "f21",
          "type": "blob",
          "size": 1.3251953125,
          "content": "// A Stack based C++ program to find next \n// greater element for all array elements \n// in same order as input. \n#include <bits/stdc++.h> \n\nusing namespace std; \n\n/* prints element and NGE pair for all \nelements of arr[] of size n */\nvoid printNGE(int arr[], int n) \n{ \n\tstack<int> s; \n\tunordered_map<int, int> mp; \n\n\t/* push the first element to stack */\n\ts.push(arr[0]); \n\t\n\n\t// iterate for rest of the elements \n\tfor (int i = 1; i < n; i++) { \n\n\t\tif (s.empty()) { \n\t\t\ts.push(arr[i]); \n\t\t\tcontinue; \n\t\t} \n\n\t\t/* if stack is not empty, then \n\tpop an element from stack. \n\tIf the popped element is smaller \n\tthan next, then \n\ta) print the pair \n\tb) keep popping while elements are \n\tsmaller and stack is not empty */\n\t\twhile (s.empty() == false && s.top() < arr[i]) { \n\t\t\tmp[s.top()] = arr[i]; \n\t\t\ts.pop(); \n\t\t} \n\n\t\t/* push next to stack so that we can find \n\tnext smaller for it */\n\t\ts.push(arr[i]); \n\t} \n\n\t/* After iterating over the loop, the remaining \nelements in stack do not have the next smaller \nelement, so print -1 for them */\n\twhile (s.empty() == false) { \n\t\tmp[s.top()] = -1; \n\t\ts.pop(); \n\t} \n\n\tfor (int i=0; i<n; i++) \n\tcout << arr[i] << \" ---> \" << mp[arr[i]] << endl; \n} \n\n/* Driver program to test above functions */\nint main() \n{ \n\tint arr[] = { 11, 13, 21, 3 }; \n\tint n = sizeof(arr) / sizeof(arr[0]); \n\tprintNGE(arr, n); \n\treturn 0; \n} \n"
        },
        {
          "name": "go",
          "type": "tree",
          "content": null
        },
        {
          "name": "java",
          "type": "tree",
          "content": null
        },
        {
          "name": "javascript",
          "type": "tree",
          "content": null
        },
        {
          "name": "kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "notes",
          "type": "tree",
          "content": null
        },
        {
          "name": "object-c",
          "type": "tree",
          "content": null
        },
        {
          "name": "php",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust",
          "type": "tree",
          "content": null
        },
        {
          "name": "scala",
          "type": "tree",
          "content": null
        },
        {
          "name": "swift",
          "type": "tree",
          "content": null
        },
        {
          "name": "typescript",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}