{
  "metadata": {
    "timestamp": 1736561374605,
    "page": 413,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kornia/kornia",
      "stars": 10132,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 1.51953125,
          "content": "# see https://docs.codecov.io/docs/codecov-yaml\n# Validation check:\n# $ curl --data-binary @.codecov.yml https://codecov.io/validate\n\n\n# https://docs.codecov.io/docs/codecovyml-reference\ncodecov:\n  bot: \"codecov-io\"\n  strict_yaml_branch: \"yaml-config\"\n  require_ci_to_pass: yes\n  notify:\n    # after_n_builds: 2\n    wait_for_ci: yes\n\ncoverage:\n  precision: 2  # 2 = xx.xx%, 0 = xx%\n  round: nearest # how coverage is rounded: down/up/nearest\n  range: 70...100 # custom range of coverage colors from red -> yellow -> green\n  status:\n    # https://codecov.readme.io/v1.0/docs/commit-status\n    project:\n      default:\n        against: auto\n        target: 87% # The target should be the same of the pyproject `fail_under`\n        # threshold: 30% # allow this little decrease on project\n        # https://github.com/codecov/support/wiki/Filtering-Branches\n        # branches: main\n        if_ci_failed: error\n    # https://github.com/codecov/support/wiki/Patch-Status\n    patch: # is the coverage percentage of the number of lines touched in your patch (the git diff)\n      default:\n        against: auto\n        target: 87% # The target should be the same of the pyproject `fail_under`\n        # threshold: 50% # allow this much decrease on patch\n    changes: false\n\nparsers:\n  gcov:\n    branch_detection:\n      conditional: true\n      loop: true\n      macro: false\n      method: false\n  javascript:\n    enable_partials: false\n\ncomment:\n  layout: header, diff\n  require_changes: false\n  behavior: default  # update if exists else create new\n  # branches: *\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3251953125,
          "content": "build/\ndist/\nkornia.egg-info/\n.idea\n*/**/__pycache__\n*/**/*.pyc\n*/**/*~\n*~\n*.swp\n*.swo\n*.swn\n*.swm\n.eggs/*\n.cache/*\n.pytest_cache/*\n.dev_env\n.mypy_cache/*\n.coverage\n*bak\n*ipynb_checkpoints*\ndocs/source/_static/*jpg\ndocs/source/_static/img/*jpg\ndocs/source/_static/scripts/*\n*DS_Store\n\n# onnx tests create temp.onnx file\n*.onnx\nvenv/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.6376953125,
          "content": "ci:\n  autofix_prs: true\n  autoupdate_commit_msg: '[pre-commit.ci] pre-commit suggestions'\n  # submodules: true\n\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: end-of-file-fixer\n      - id: trailing-whitespace\n      - id: check-yaml\n      - id: requirements-txt-fixer\n      - id: pretty-format-json\n        exclude: ^$|.devcontainer\n\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.8.6\n    hooks:\n      - id: ruff\n        args: [--fix, --exit-non-zero-on-fix]\n      - id: ruff-format\n\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.3.0\n    hooks:\n      - id: codespell\n        args:\n          - --ignore-words-list\n          - \"ans,hist,laf,cofusion\"\n          - --skip\n          - \"*.bib,*.ipynb\"\n\n  - repo: https://github.com/arkinmodi/add-license-header\n    rev: v2.3.0\n    hooks:\n      - id: add-license-header\n        types: [python]\n        args:\n          - --license\n          - |\n              Copyright 2018 Kornia Team\n\n              Licensed under the Apache License, Version 2.0 (the \"License\");\n              you may not use this file except in compliance with the License.\n              You may obtain a copy of the License at\n\n                  http://www.apache.org/licenses/LICENSE-2.0\n\n              Unless required by applicable law or agreed to in writing, software\n              distributed under the License is distributed on an \"AS IS\" BASIS,\n              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n              See the License for the specific language governing permissions and\n              limitations under the License.\n"
        },
        {
          "name": "BACKERS.md",
          "type": "blob",
          "size": 0.880859375,
          "content": "<h1 align=\"center\">Sponsors &amp; Backers</h1>\n\nKornia is an Apache-licensed open source project, which is supported by these brilliant [backers](https://github.com/kornia/kornia/blob/main/LICENSE/BACKERS.md). If you'd like to join them, please consider:\n\n- [Become a backer or sponsor on OpenCollective](https://opencollective.com/kornia).\n\n<br><br>\n\n<h2 align=\"center\">Platinum via OpenCollective</h2>\n<!--platinum start-->\n<!--platinum end-->\n\n<h2 align=\"center\">Gold via OpenCollective</h2>\n\n<!--gold start-->\n<!--gold end-->\n\n<h2 align=\"center\">Silver via OpenCollective</h2>\n<!--silver start-->\n<!--silver end-->\n\n<h2 align=\"center\">Bronze via OpenCollective</h2>\n<!--bronze start-->\n<!--bronze end-->\n\n<h2 align=\"center\">Backers via OpenCollective</h2>\n\n<a href=\"https://opencollective.com/kornia#backers\" target=\"_blank\"><img src=\"https://opencollective.com/kornia/backers.svg?width=1500\"></a>\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 32.9326171875,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n****\n\n\n## :rocket: [0.6.11] - 2022-03-28\n### :new:  New Features\n\n* add `DISK` local feature by @jatentaki  in https://github.com/kornia/kornia/pull/2285\n* Add Joint Bilateral Filter by @gau-nernst  https://github.com/kornia/kornia/pull/2244\n* Add Bilateral Filter by @gau-nernst  https://github.com/kornia/kornia/pull/2242\n* Add random snow by @just1ce415  https://github.com/kornia/kornia/pull/2229\n\n\n## :rocket: [0.6.10] - 2022-02-17\n### :new:  New Features\n\n* add `depth_from_disparity` function by @pri1311 in https://github.com/kornia/kornia/pull/2096\n* Add Vector2 by @cjpurackal in https://github.com/kornia/kornia/pull/2134\n* Add 3D-SSIM loss by @pri1311 in https://github.com/kornia/kornia/pull/2130\n* [Feat] Initiate AutoAugment modules by @shijianjian in https://github.com/kornia/kornia/pull/2181\n* Add Common Regression Losses by @ChristophReich1996 in https://github.com/kornia/kornia/pull/2109\n* Add `integral_image` and `integral_tensor` by @AnimeshMaheshwari22 in https://github.com/kornia/kornia/pull/1779\n\n\n### :lady_beetle: Bug fixes\n\n* Fix AugmentationSequential to return list of boxes by @johnnv1 in https://github.com/kornia/kornia/pull/2114\n* Fix support for (*, 3, H, W) tensors  in yuv by @ChristophReich1996 in https://github.com/kornia/kornia/pull/2108\n* fix TensorWrapper serialization by @edgarriba in https://github.com/kornia/kornia/pull/2132\n* Split the half precision tests workflow by @johnnv1 in https://github.com/kornia/kornia/pull/2118\n* Fixed DoG accuracy, add `upscale_double` by @vicsyl in https://github.com/kornia/kornia/pull/2105\n* Added Face detection Interactive demo by @jeffin07 in https://github.com/kornia/kornia/pull/2142\n* Bump pytest from 7.2.0 to 7.2.1 by @dependabot in https://github.com/kornia/kornia/pull/2148\n* add SSIM3D and `depth_from_disparity` to docs by @pri1311 in https://github.com/kornia/kornia/pull/2150\n* Explicitly cast output to input type to avoid type mismatch errors by @JanSellner in https://github.com/kornia/kornia/pull/1842\n* Fix params computation for `LongestMaxSize` and `SmallestMaxSize` by @johnnv1 in https://github.com/kornia/kornia/pull/2131\n* torch_version_geq -> torch_version_ge according to todo by @ducha-aiki in https://github.com/kornia/kornia/pull/2157\n* fix doc build - `sphinx-autodoc-typehints==1.21.3` by @johnnv1 in https://github.com/kornia/kornia/pull/2159\n* ScaleSpaceDetector -> Fast ScaleSpaceDetector by @ducha-aiki in https://github.com/kornia/kornia/pull/2154\n* Improve losses tests, add `TestSSIM3d`, and `BaseTester.gradcheck` by @johnnv1 in https://github.com/kornia/kornia/pull/2152\n* modify comments of rgb and lab conversion by @gravitychen in https://github.com/kornia/kornia/pull/2153\n* add __repr__ and __getitem__ to vector by @cjpurackal in https://github.com/kornia/kornia/pull/2163\n* Fix adalam-config by @ducha-aiki in https://github.com/kornia/kornia/pull/2170\n* Fix docs  of `boxes`, `MultiResolutionDetector`. `apply colormap`, `AugmentationSequential` by @johnnv1 in https://github.com/kornia/kornia/pull/2167\n* add exception test for se2 + small bug fix by @cjpurackal in https://github.com/kornia/kornia/pull/2160\n* Fix MobileViT by @chinhsuanwu in https://github.com/kornia/kornia/pull/2172\n* Fix output types of augmentations on autocast regions by @johnnv1 in https://github.com/kornia/kornia/pull/2168\n* Fix planckian jitter for cuda by @johnnv1 in https://github.com/kornia/kornia/pull/2177\n* Fix: resample method None default missing for inverse masks by @miquelmarti in https://github.com/kornia/kornia/pull/2185\n* Move padding_size to device in pad for boxes by @miquelmarti in https://github.com/kornia/kornia/pull/2197\n* Return boxes tensor directly if no boxes by @miquelmarti in https://github.com/kornia/kornia/pull/2196\n* Make value an attribute of RandomErasing instances again by @miquelmarti in https://github.com/kornia/kornia/pull/2195\n* TensorWrapper bug fix + add __radd__, __rmul__, __rsub__ by @cjpurackal in https://github.com/kornia/kornia/pull/2190\n* Fix/repr bug by @neyazbasheer in https://github.com/kornia/kornia/pull/2207\n* Replace `assert_allclose` by `assert_close` by @johnnv1 in https://github.com/kornia/kornia/pull/2210\n* Fix random crop for keypoints on CUDA device by @johnnv1 in https://github.com/kornia/kornia/pull/2209\n* Remove outdated augmentation example by @johnnv1 in https://github.com/kornia/kornia/pull/2206\n* Fix CUDA failing tests of same device on `Augmentations` by @johnnv1 in https://github.com/kornia/kornia/pull/2215\n\n\n\n## :zap:  Improvements\n\n* add `PadTo` to docs by @johnnv1 in https://github.com/kornia/kornia/pull/2122\n* add colormap and `apply_ColorMap` for integer tensor by @johnnv1 in https://github.com/kornia/kornia/pull/1996\n* Fix numerical stability for binary focal loss by @zimka in https://github.com/kornia/kornia/pull/2125\n* Add RandomGaussianBlur with instance-level gaussian kernel generation by @juliendenize in https://github.com/kornia/kornia/pull/1663\n* add transparent pad to `CenterCrop` docs example by @johnnv1 in https://github.com/kornia/kornia/pull/2124\n* Ensure support to Python 3.9 and 3.10 by @johnnv1 in https://github.com/kornia/kornia/pull/2025\n* improve `TestUpscaleDouble` by @johnnv1 in https://github.com/kornia/kornia/pull/2147\n* DataKey: add 'image' as alias of 'input' by @adamjstewart in https://github.com/kornia/kornia/pull/2193\n* add `fail-fast:false` as default on tests workflow by @johnnv1 in https://github.com/kornia/kornia/pull/2146\n [enhance] improve flipping and cropping speed by @shijianjian in https://github.com/kornia/kornia/pull/2179\n* Replace jit test method  in favor of dynamo in `BaseTester` by @johnnv1 in https://github.com/kornia/kornia/pull/2120\n* Small refactor on `filters` module: Dropping JIT support by @johnnv1 in https://github.com/kornia/kornia/pull/2187\n* Augmentation Base Refactor by @shijianjian in https://github.com/kornia/kornia/pull/2117\n\n\n### Deprecation\n\n* move kornia check api to kornia.core.check by @edgarriba in https://github.com/kornia/kornia/pull/2143\n* Remove py 3.7 for nightly CI by @johnnv1 in https://github.com/kornia/kornia/pull/2204\n\n\n## :rocket: [0.6.9] - 2022-12-21\n### :new:  New Features\n\n* Feat/randombrightness contrast saturation hue by @duc12111 in https://github.com/kornia/kornia/pull/1955\n* Liegroups by @edgarriba in https://github.com/kornia/kornia/pull/1887\n* Add sepia by @johnnv1 in https://github.com/kornia/kornia/pull/1947\n* Normalize with intrinsics by @ducha-aiki in https://github.com/kornia/kornia/pull/1727\n* [feat] liegroup so2 by @cjpurackal in https://github.com/kornia/kornia/pull/1973\n* [feat] adjoint for se2, so2 by @cjpurackal in https://github.com/kornia/kornia/pull/2101\n* add trans, trans_x, trans_y + minor changes se2 by @cjpurackal in https://github.com/kornia/kornia/pull/2103\n* Motion blur by @nitaifingerhut in https://github.com/kornia/kornia/pull/2075\n* Add `Hyperplane` and `Ray` API by @edgarriba in https://github.com/kornia/kornia/pull/1963\n\n\n### :lady_beetle: Bug fixes\n\n* Quaternion pow bug fix (div by zero) by @cjpurackal in https://github.com/kornia/kornia/pull/1946\n* fix cuda init by @ducha-aiki in https://github.com/kornia/kornia/pull/1953\n* Documentation: proper Sørensen–Dice coefficient by @sergiev in https://github.com/kornia/kornia/pull/1961\n* quaternion, so3 and se3 as non batched by @edgarriba in https://github.com/kornia/kornia/pull/1997\n* Bump pytest-mypy from 0.10.0 to 0.10.1 by @dependabot in https://github.com/kornia/kornia/pull/2005\n* Join the gh-actions for docs by @johnnv1 in https://github.com/kornia/kornia/pull/2003\n* [pre-commit.ci] pre-commit suggestions by @pre-commit-ci in https://github.com/kornia/kornia/pull/2010\n* So2 bug fix by @cjpurackal in https://github.com/kornia/kornia/pull/2015\n* Fix type annotation for torch 1.13.0 by @johnnv1 in https://github.com/kornia/kornia/pull/2023\n* Fix an error in `match_smnn` by @anstadnik in https://github.com/kornia/kornia/pull/2020\n* Set equal_nan to False in assert_close by @edgarriba in https://github.com/kornia/kornia/pull/1986\n\n## :zap:  Improvements\n\n* minor improvements to So3 by @cjpurackal in https://github.com/kornia/kornia/pull/1966\n* Add `TensorWrapper`, `Vector3`, `Scalar` and improvements in `fit_plane` by @edgarriba in https://github.com/kornia/kornia/pull/\n* [feat] add vee to so2, se2 by @cjpurackal in https://github.com/kornia/kornia/pull/2091\n* Remove deprecated code in `kornia.augmentation` by @johnnv1 in https://github.com/kornia/kornia/pull/2052\n* [feat] Implement se2 by @cjpurackal in https://github.com/kornia/kornia/pull/2019\n* add quaternion to euler conversion by @edgarriba in https://github.com/kornia/kornia/pull/1994\n* use resample instead of mode argument in RandomElasticTransform per default by @JanSellner in https://github.com/kornia/kornia/pull/2017\n* replacing .repeat(...) with .expand(...) by @nitaifingerhut in https://github.com/kornia/kornia/pull/2059\n* making `RandomGaussianNoise` play nicely on GPU by @nitaifingerhut in https://github.com/kornia/kornia/pull/2050\n* None for align_corners arg of resize op with nearest mode by @miquelmarti in https://github.com/kornia/kornia/pull/2049\n* facedetector now returns a list of tensors containing the boxes x image by @lferraz in https://github.com/kornia/kornia/pull/2034\n* add random for liegroups by @cjpurackal in https://github.com/kornia/kornia/pull/2041\n* add rotation and translation classmethods in se3 and so3 by @edgarriba in https://github.com/kornia/kornia/pull/2001\n* implement `kornia.geometry.linalg.euclidean_distance` by @edgarriba in https://github.com/kornia/kornia/pull/2000\n\n\n### Deprecation\n\n* Drop pytorch 1.8 (LTS) support by @johnnv1 in https://github.com/kornia/kornia/pull/2024\n\n\n## :rocket: [0.6.8] - 2022-10-13\n### :new:  New Features\n\n* NeRF Implementation by @YanivHollander in https://github.com/kornia/kornia/pull/1911\n* [Feat] Added AugmentationDispatcher by @shijianjian in https://github.com/kornia/kornia/pull/1914\n* Add `EdgeDetection` api by @edgarriba in https://github.com/kornia/kornia/pull/1483\n* [feat] slerp implementation for Quaternion by @cjpurackal in https://github.com/kornia/kornia/pull/1931\n* add laplacian pyramid by @lafith in https://github.com/kornia/kornia/pull/1816\n* Added homography from line segment correspondences by @ducha-aiki in https://github.com/kornia/kornia/pull/1851\n* [feat] Added Jigsaw Augmentation by @shijianjian in https://github.com/kornia/kornia/pull/1852\n\n### :lady_beetle: Bug fixes\n\n* Fix svdvals usage by @ducha-aiki in https://github.com/kornia/kornia/pull/1926\n* fix shift_rgb stack dimension by @nmichlo in https://github.com/kornia/kornia/pull/1930\n* Update kernels.py by @farhankhot in https://github.com/kornia/kornia/pull/1940\n* Quaternion.norm bug fix by @cjpurackal in https://github.com/kornia/kornia/pull/1935\n* Fix quaternion doctests by @edgarriba in https://github.com/kornia/kornia/pull/1943\n* Remove unnecessary CI jobs by @johnnv1 in https://github.com/kornia/kornia/pull/1933\n* fix cuda tests failing by @ducha-aiki in https://github.com/kornia/kornia/pull/1941\n* No crash in local feature matching if empty tensor output by @ducha-aiki in https://github.com/kornia/kornia/pull/1890\n\n\n### :zap:  Improvements\n\n* RANSAC improvements by @ducha-aiki in https://github.com/kornia/kornia/pull/1435\n* Make AdaLAM output match confidence by @ducha-aiki in https://github.com/kornia/kornia/pull/1862\n* Enlargen LoFTR positional encoding map if large images are input by @georg-bn in https://github.com/kornia/kornia/pull/1853\n\n\n## :rocket: [0.6.7] - 2022-08-30\n### :new:  New Features\n\n* Added FGINN matching by @ducha-aiki in https://github.com/kornia/kornia/pull/1813\n* Added SOLD2 by @rpautrat  https://github.com/kornia/kornia/pull/1507 https://github.com/kornia/kornia/pull/1844\n* edge aware blur2d by @nitaifingerhut in https://github.com/kornia/kornia/pull/1822\n* Adds conversions between graphics and vision coordinate frames by @ducha-aiki in https://github.com/kornia/kornia/pull/1823\n* Add Quaternion API by @edgarriba in https://github.com/kornia/kornia/pull/1801\n* AdaLAM match filtering by @ducha-aiki in https://github.com/kornia/kornia/pull/1831\n* Init Mosaic Augmentation by @shijianjian in https://github.com/kornia/kornia/pull/1713\n\n\n### :lady_beetle: Bug fixes\n\n* fix tests float16 module losses by @MrShevan in https://github.com/kornia/kornia/pull/1809\n\n### :zap:  Improvements\n\n* Allowing more than 3/4 dims for `total_variation` + adding `reduction` by @nitaifingerhut in https://github.com/kornia/kornia/pull/1815\n\n\n## :rocket: [0.6.6] -  - 2022-07-16\n\n### :new:  New Features\n\n* Add `ParametrizedLine`  and `fit_line` by @edgarriba in https://github.com/kornia/kornia/pull/1794\n* Implement `project` and `unproject` in `PinholeCamera` by @YanivHollander in https://github.com/kornia/kornia/pull/1729\n* adding `rgb_to_y` by @nitaifingerhut in https://github.com/kornia/kornia/pull/1734\n* add `KORNIA_CHECK_SAME_DEVICES` by @MrShevan in https://github.com/kornia/kornia/pull/1788\n\n\n### Deprecation\n\n* deprecate `filter2D` `filter3D` api by @edgarriba in https://github.com/kornia/kornia/pull/1725\n\n\n### :lady_beetle: Bug fixes\n\n* fixes for half precision in imgwarp by @edgarriba in https://github.com/kornia/kornia/pull/1723\n* Fix transforms for empty boxes and keypoints inputs by @hal-314 in https://github.com/kornia/kornia/pull/1741\n* fixing doctest in pinhole by @edgarriba in https://github.com/kornia/kornia/pull/1743\n* Fix/crop transforms by @hal-314 in https://github.com/kornia/kornia/pull/1739\n* Fix Boxes.from_tensor(boxes, mode=\"vertices\") by @hal-314 in https://github.com/kornia/kornia/pull/1740\n* fix typing callable in load storage by @edgarriba in https://github.com/kornia/kornia/pull/1768\n* Fix bug preventing sample wise augmentations by @ashnair1 in https://github.com/kornia/kornia/pull/1761\n* Refactor and add tests in `get_perspective_transform` by @edgarriba in https://github.com/kornia/kornia/pull/1767\n\n\n## :rocket: [0.6.5] - 2022-05-16\n### :new:  New Features\n- Create `kornia.io` and implement `load_image` with rust (#1701)\n- Implement `diamond_square` and plasma augmentations: `RandomPlasmaBrightness`, `RandomPlasmaContrast`, `RandomPlasmaShadow` (#1700)\n- Added `RandomRGBShift` augmentations (#1694)\n- Added STE gradient estimator (#1666)\n- More epipolar geometry metrics (+linalg utility) (#1674)\n- Add Lovasz-Hinge/Softmax losses (#1682)\n- Add `adjust_sigmoid` and `adjust_log` initial implementation (#1685)\n- Added distribution mapper (#1667)\n- `pos_weight` param to focal loss (#1744)\n\n### :lady_beetle: Bug fixes\n- Fixes filter2d's output shape shrink when padding='same' (#1661)\n- fix: added eps in geometry/rotmat_to_quaternion (#1665)\n- [fix] receive num_features as an arg to KeyNetDetector constructor (#1686\n\n### :zap:  Improvements\n- Add reduction option to `MS_SSIMLoss` (#1655)\n- Making epipolar metrics work with volumetric tensors (#1656)\n- Add get_safe_device util (#1662)\n- Added antialiasing option to Resize augmentation (#1687)\n- Use nearest neighbour interpolation for masks (#1630)\n- grayscale to rgb for `torch.uint8` (#1705)\n- Add `KORNIA_CHECK_SAME_DEVICES` (#1775)\n\n## :rocket: [0.6.4] - 2022-03-19\n### :new:  New Features\n- Adds MS-SSIMLoss reconstruction loss function (#1551)\n- Added HyNet descriptor (#1573)\n- Add KeyNet detector (#1574)\n- Add RandomPlanckianJitter in color augmentations (#1607)\n- Add Jina AI QAbot to Kornia documentation (#1628)\n- Add `draw_convex_polygon` (#1636)\n\n### :lady_beetle:  Bug fixes\n- RandomCrop fix and improvement (#1571)\n- Fix draw_line produce wrong output for coordinates larger than uint8\n- Fix mask bug for loftr (#1580)\n- Fix gradient bug for distance_transform (#1584)\n- Fix translation sampling in AffineGenerator3D (#1581)\n- Fix AugmentationSequential bbox keypoints transformation fix (#1570)\n- Fix CombineTensorPatches (#1558)\n- Fix overblur in AA (#1612)\n\n### :exclamation: Changes\n- Deprecated `return_transform`, enabled 3D augmentations in AugmentionSequential (#1590)\n\n### :zap:  Improvements\n- Making compute_correspond_epilines work with fundamental and point of volumetric tensor (#1585)\n- Update batch shape when augmentations change size of image (#1609)\n- Remap accepts arbitrary grid size (#1617)\n- Rename variables named 'input' to 'sample' (in tests). (#1614)\n- Remove half log2 in extract_patches (#1616)\n- Add orientation-preserving option for AffNet and make it default (#1620)\n- Add option for sampling_method in 2d perspective transform generation (#1591) (#1592)\n- Fix adjust brightness (#1586)\n- Added default params for laf construction from xy and new tensor shape check (#1633)\n- Make nms2d jittable (#1637)\n- Add fn to automatically compute padding (#1634)\n- Add pillow_like option for ColorJitter to match torchvision. (#1611)\n\n## :rocket: [0.6.3] - 2022-01-30\n### :new:  New Features\n- Update CI to pytorch 1.10.1 (#1518)\n- Added Hanning kernel, prepare for KCF tracking (#1519)\n- Add distance transform implementation (#1490)\n- Add Resize augmentation module (#1545)\n\n### :lady_beetle:  Bug fixes\n- Precompute padding parameters when RandomCrop aug in container (#1494)\n- Padding error with RandomCrop #1520\n- Fix correct shape after cropping when forwarding parameters (#1533)\n- Fixed #1534 nested augmentation sequential bug (#1536)\n- Fixes to device in augmentations (#1546)\n- Bugfix for larger MotionBlur kernel size ranges (#1543)\n- Fix RandomErasing applied to mask keys (#1541)\n\n### :exclamation: Changes\n- Restructure augmentation package (#1515)\n\n### :zap:  Improvements\n- Add missing keepdims with fixed type (#1488)\n- Allow to pass a second K to distort and undistort points (#1506)\n- Augmentation Sequential with a list of bboxes as a batch (#1497)\n- Adde Devcontainer for development (#1515)\n- Improve the histogram_matching function (#1532)\n\n## :rocket: [0.6.2] - 2021-12-03\n### :new:  New Features\n- Add face detection API (#1469)\n- Add `ObjectDetectorTrainer` (#1414)\n- Add container operation weights and `OneOf` documentation (#1443)\n- Add oriented constraint check to Homography RANSAC (#1453)\n- Add background color selection in `warp_perspective` (#1452)\n- Add `draw_line` image utility (#1456)\n- Add Bounding Boxes API (#1304)\n- Add histogram_matching functionality (#1395)\n\n### :lady_beetle:  Bug fixes\n- fix catch type for torch.svd error (#1431)\n- Fix for nested AugmentationSequential containers (#1467)\n- Use common bbox format xywh (#1472)\n- Fix motion blur kernel size bug for larger random generator ranges (#1540)\n\n### :exclamation: Changes\n- Add padding_mode for RandomElasticTransform augmentation (#1439)\n- Expose inliers sum to HomographyTracker (#1463)\n\n### :zap:  Improvements\n- Switch to one-way error RANSAC for speed-up (#1454)\n- Few improvements on homography tracking (#1434)\n- Enable all bandit tests, add separate hook for tests (#1437)\n- Merge homography_warp to warp_perspective (#1438)\n- Random generator refactor (#1459)\n\n\n## :rocket: [0.6.1] - 2021-10-22\n### :lady_beetle:  Bug fixes\n- Fixes PyPI tarball missing required files #1421\n- hotfix: remove mutable object in constructor #1423\n\n\n## :rocket: [0.6.0] - 2021-10-22\n\n### :new:  New Features\n- Add Training API (#1307)\n- Added combine patches (#1309)\n- Add semantic segmentation trainer (#1323)\n- Add vanilla LO-RANSAC (#1335)\n- Add Lambda function module (#1346)\n- Add support for YUV420 and YUV422 to complement current YUV444 (#1360)\n- Add raw to rgb color conversion (#1380)\n- Implement separable_filter2d (#1385)\n- Add MobileViT to contrib (#1388)\n- Add solve_pnp_dlt (#1349)\n- Add function image_list_to_tensor to utils (#1393)\n- Add undistort_image function (#1303)\n- Create kormia.metrics submodule (#1325)\n- Add Image Stitching API (#1358)\n- Add Homography Tracker API (#1389)\n\n### :exclamation: Changes\n- Refactor library namespaces [pre-release][0.6-rc1] (#1412)\n- deprecate 1.6/1.7 and add 1.9.1 (#1399)\n\n### :zap:  Improvements\n- Improve bbox_to_mask (#1351)\n- Refactor unfold->conv for morphology backbone (#1107)\n- Improve focal loss for numerical stability (#1362)\n- Add more border_type options for filter2D (#1375)\n- Replace deprecated torch.qr (#1376)\n- Add special case hardcoded implementtion for local features speed up (#1387)\n- Enable non/batched connected components (#1193)\n- Remove warnings during testing (#1401)\n\n### :lady_beetle:  Bug fixes\n- Fix binary focal loss (#1313)\n- Fix kornia.geometry.subpix.spatial_soft_argmax imports (#1318)\n- Fixed a simple typo in __init__.py (#1319)\n- Fix path to dev requirements file in a setup_dev_env.sh (#1324)\n- Fix bug in create_meshgrid3d along depth (#1330)\n- Fix anisotropic scale error (#1340)\n- Fix rgb_to_hsv for onnx (#1329)\n- Fixed useless return in ransac.py (#1352)\n- Fixed classificationhead typo and leave out some of the guesswork (#1354)\n- Fix clahe differentiability and tests (#1356)\n- Fixes singular matrix inverse/solve for RANSAC and ConvQuad3d (#1408)\n- Change intermediate datatype to fix imgwarp (#1413)\n\n## :rocket: [0.5.11] - 2021-08-30\n### :new:  New Features\n- Add Vision Transformer (ViT) ([#1296](https://github.com/kornia/kornia/pull/1296))\n- Add ImageRegistrator API ([#1253](https://github.com/kornia/kornia/pull/1253))\n- Add LoFTR inference ([#1218](https://github.com/kornia/kornia/pull/1218))\n- Added differentiable Hausdorff Distance (HD) loss ([#1254](https://github.com/kornia/kornia/pull/1254))\n- Add PadTo to kornia.augmentation ([#1286](https://github.com/kornia/kornia/pull/1286))\n\n### :zap:  Code refactor\n- Return all learned modules by default in eval() mode ([#1266](https://github.com/kornia/kornia/pull/1266))\n- Enable ImageSequential and VideoSequential to AugmentationSequential (#1231)\n- Specify that angles are in radians ([#1287](https://github.com/kornia/kornia/pull/1287))\n- Removed deprecated codes for v6.0 ([#1281](https://github.com/kornia/kornia/pull/1281))\n\n### :lady_beetle:  Bug fixes\n- Fix save_pointcloud_ply fn counting point with inf coordinates ([#1263](https://github.com/kornia/kornia/pull/1263))\n- Fixes torch version parse and add temporal packaging dependency ([#1284](https://github.com/kornia/kornia/pull/1284))\n- Fix issue of image_histogram2d ([#1295](https://github.com/kornia/kornia/pull/1295))\n\n\n## [0.5.10] - 2021-08-30\n\n### Added\n- Added Basic pool request for DeFMO. ([#1135](https://github.com/kornia/kornia/pull/1135))\n- Added homography error metrics, and improved find_homography_iter ([#1222](https://github.com/kornia/kornia/pull/1222))\n\n### Fixed\n- Fixed wrong param name ([#1197](https://github.com/kornia/kornia/pull/1197))\n- Fixed NotImplementedError for the rtvec ([#1215)](https://github.com/kornia/kornia/pull/1215))\n- Fixes warnings and add compatibility stub in torch solve ([#1235](https://github.com/kornia/kornia/pull/1235))\n\n### Changed\n- Ensure CenterCrop indices are integers ([#1208](https://github.com/kornia/kornia/pull/1208))\n- Added tests, fixed docstrings and made some other changes ([#1211](https://github.com/kornia/kornia/pull/1211))\n- Upgrade to modern Python syntax ([#1213](https://github.com/kornia/kornia/pull/1213))\n- Code health improvements [#1199, #1200, #1198, #1202, #1203, #1205, #1208, #1210, #1214, #1220]\n- Enable pyupgrade as pre-commit ([#1221](https://github.com/kornia/kornia/pull/1221))\n- Add bandit tool in the pre-commit ([#1228](https://github.com/kornia/kornia/pull/1228))\n\n\n## [0.5.8] - 2021-08-06\n\n### Added\n- Add the connected components labeling algorithm ([#1184](https://github.com/kornia/kornia/pull/1184))\n\n### Fixed\n- Partial fix for horizontal and vertical flips ([#1166](https://github.com/kornia/kornia/pull/1166))\n- Fix even kernel and add test ([#1183](https://github.com/kornia/kornia/pull/1183))\n- Fix wrong source points for RandomThinPlateSpline ([#1187](https://github.com/kornia/kornia/pull/1187))\n- Fix RandomElasticTransform ignores same_on_batch ([#1189](https://github.com/kornia/kornia/pull/1189))\n- Fixed bugs in patchsequential. Remove fill_diagonal operation for better ONNX support ([#1178](https://github.com/kornia/kornia/pull/1178))\n\n### Changed\n- Differentiable image histogram using kernel density estimation ([#1172](https://github.com/kornia/kornia/pull/1172))\n\n\n## [0.5.7] - 2021-07-27\n\n### Added\n- Grayscale to RGB image conversion. ([#1162](https://github.com/kornia/kornia/pull/1162))\n- Add keepdim param to tensor_to_image function.  ([#1168](https://github.com/kornia/kornia/pull/1168))\n\n### Fixed\n- Fix checks on wrong tensor shape condition in depth.py ([#1164](https://github.com/kornia/kornia/pull/1164))\n\n\n## [0.5.6] - 2021-07-12\n\n### Added\n- Added mix augmentations in containers ([#1139](https://github.com/kornia/kornia/pull/1139))\n\n### Fixed\n- Fixed non-4-dim input error for sequential ([#1146](https://github.com/kornia/kornia/pull/1146))\n\n### Changed\n- Moving bbox-related functionality to bbox module ([#1103](https://github.com/kornia/kornia/pull/1103))\n- Optimized version of hls_to_rgb and rgb_to_hls ([#1154](https://github.com/kornia/kornia/pull/1154))\n\n### Removed\n- Remove numpy dependency ([#1136](https://github.com/kornia/kornia/pull/1136))\n\n\n## [0.5.5] - 2021-06-26\n\n### Added\n- Added Stereo camera class ([#1102](https://github.com/kornia/kornia/pull/1102))\n- Added auto-generated images in docs ([#1105](https://github.com/kornia/kornia/pull/1105)) ([#1108](https://github.com/kornia/kornia/pull/1108)) ([#1127](https://github.com/kornia/kornia/pull/1127)) ([#1128](https://github.com/kornia/kornia/pull/1128)) ([#1129](https://github.com/kornia/kornia/pull/1129)) ([#1131](https://github.com/kornia/kornia/pull/1131))\n- Added chinese version README ([#1112](https://github.com/kornia/kornia/pull/1112))\n- Added random_apply to augmentaton containers ([#1125](https://github.com/kornia/kornia/pull/1125))\n\n### Changed\n- Change GaussianBlur to RandomGaussianBlur ([#1118](https://github.com/kornia/kornia/pull/1118))\n- Update ci with pytorch 1.9.0 ([#1120](https://github.com/kornia/kornia/pull/1120))\n- Changed option for mean and std to be tuples in normalization ([#987](https://github.com/kornia/kornia/pull/987))\n- Adopt torch.testing.assert_close ([#1031](https://github.com/kornia/kornia/pull/1031))\n\n### Removed\n- Remove numpy import ([#1116](https://github.com/kornia/kornia/pull/1116))\n\n\n## [0.5.4] - 2021-06-11\n\n### Added\n- Add Canny edge detection ([#1020](https://github.com/kornia/kornia/pull/1020))\n- Added Batched forward function ([#1058](https://github.com/kornia/kornia/pull/1058))\n- Added denormalize homography function [(#1061](https://github.com/kornia/kornia/pull/1061))\n- Added more augmentations containers ([#1014](https://github.com/kornia/kornia/pull/1014))\n- Added calibration module and Undistort 2D points function ([#1026](https://github.com/kornia/kornia/pull/1026))\n- Added patch augmentation container ([#1095](https://github.com/kornia/kornia/pull/1095))\n\n### Fixed\n- Remove lena ([#1059](https://github.com/kornia/kornia/pull/1059)) :)\n\n### Changed\n- Resize regardless of number of dims, considering the last two dims as image ([#1047](https://github.com/kornia/kornia/pull/1047))\n- Raise error if converting to unit8 image to gray with float weights ([#1057](https://github.com/kornia/kornia/pull/1057))\n- Filter 2D->2d, 3D->3d ([#1069](https://github.com/kornia/kornia/pull/1069))\n- Removed augmentation functional module. ([#1067](https://github.com/kornia/kornia/pull/1067))\n- Make Morphology compatible with both OpenCV and Scipy ([#1084](https://github.com/kornia/kornia/pull/1084))\n\n\n## [0.5.3] - 2021-05-29\n\n### Added\n- Added inverse for augmentations ([#1013](https://github.com/kornia/kornia/pull/1013))\n- Add advanced augmentations: RandomFisheye, RandomElasticTransform, RandomThinPlateSpline, RandomBloxBlur ([#1015](https://github.com/kornia/kornia/pull/1015)\n\n### Fixed\n- Correct Sobel test_noncontiguous. Nothing was tested before. ([#1018](https://github.com/kornia/kornia/pull/1018))\n- Fixing #795: find_homography_dlt_iterated sometimes fails ([#1022](https://github.com/kornia/kornia/pull/1022))\n\n### Changed\n- Refactorization of the morphology package ([#1034](https://github.com/kornia/kornia/pull/1034))\n- Optimised clipping in clahe and some other minor optimisation ([#1035](https://github.com/kornia/kornia/pull/1035))\n\n\n## [0.5.2] - 2021-05-14\n\n## Added\n- Added unsharp mask filtering ([#1004](https://github.com/kornia/kornia/pull/1004))\n\n### Fixed\n- Fixed angle axis to quaternion order bug ([#926](https://github.com/kornia/kornia/pull/926))\n- Fixed type error for lab_to_rgb conversion when using coremltools. ([#1002](https://github.com/kornia/kornia/pull/1002))\n\n### Changed\n- Mask with unbatched motion from essential choose solution ([#998](https://github.com/kornia/kornia/pull/998))\n\n\n## [0.5.1] - 2021-04-30\n\n### Added\n- Added dtype for create_mesh ([#919](https://github.com/kornia/kornia/pull/919))\n- Added Hardnet8 ([#955](https://github.com/kornia/kornia/pull/955))\n- Added normalize boolean for remap ([#921](https://github.com/kornia/kornia/pull/921))\n- Added custom weights option for rgb2gray ([#944](https://github.com/kornia/kornia/pull/944))\n- Added fp16 support ([#963](https://github.com/kornia/kornia/pull/963))\n- Added ImageToTensor module and resize for non-batched images ([#978](https://github.com/kornia/kornia/pull/978))\n- Add more augmentations ([#960](https://github.com/kornia/kornia/pull/960))\n- Anti alias resize ([#989](https://github.com/kornia/kornia/pull/989))\n\n## Changed\n- Improve kornia porphology ([#965](https://github.com/kornia/kornia/pull/965))\n- Improve cuda ci workflow speed ([#975](https://github.com/kornia/kornia/pull/975))\n- Refactor augmentation module ([#948](https://github.com/kornia/kornia/pull/948))\n- Implement fast version of crop function in augmentations ([#967](https://github.com/kornia/kornia/pull/967))\n- Implement missing jit ops in kornia.geometry.transform ([#981](https://github.com/kornia/kornia/pull/981))\n\n### Fixed\n- Fixed RandomAffine translation range check ([#917](https://github.com/kornia/kornia/pull/917)\n- Fixed the issue of NaN gradients by adding epsilon in focal loss ([#924](https://github.com/kornia/kornia/pull/924))\n- Allow crop size greater than input size. ([#957](https://github.com/kornia/kornia/pull/957))\n- Fixed RandomCrop bug ([#951](https://github.com/kornia/kornia/pull/951))\n\n### Removed\n-  Deprecate some augmentation functionals ([#943](https://github.com/kornia/kornia/pull/943))\n\n\n## [0.4.1] - 2020-10-20\n### Added\n- Update docs for `get_affine_matrix2d` and `get_affine_matrix3d` ([#618](https://github.com/kornia/kornia/pull/618))\n- Added docs for `solarize`, `posterize`, `sharpness`, `equalize` ([#623](https://github.com/kornia/kornia/pull/623))\n- Added tensor device conversion for solarize params ([#624](https://github.com/kornia/kornia/pull/624))\n- Added rescale functional and transformation ([#631](https://github.com/kornia/kornia/pull/631))\n- Added Mixup data augmentation ([#609](https://github.com/kornia/kornia/pull/609))\n- Added `equalize3d` ([#639](https://github.com/kornia/kornia/pull/639))\n- Added `decompose 3x4projection matrix` ([#650](https://github.com/kornia/kornia/pull/650))\n- Added `normalize_min_max` functionality ([#684](https://github.com/kornia/kornia/pull/684))\n- Added `random equalize3d` ([#653](https://github.com/kornia/kornia/pull/653))\n- Added 3D motion blur ([#713](https://github.com/kornia/kornia/pull/713))\n- Added 3D volumetric crop implementation ([#689](https://github.com/kornia/kornia/pull/689))\n  - `warp_affine3d`\n  - `warp_perspective3d`\n  - `get_perspective_transform3d`\n  - `crop_by_boxes3d`\n  - `warp_grid3d`\n\n\n### Changed\n- Replace convolution with `unfold` in `contrib.extract_tensor_patches` ([#626](https://github.com/kornia/kornia/pull/626))\n- Updates Affine scale with non-isotropic values ([#646](https://github.com/kornia/kornia/pull/646))\n- Enabled param p for each augmentation ([#664](https://github.com/kornia/kornia/pull/664))\n- Enabled RandomResizedCrop batch mode when same_on_batch=False ([#683](https://github.com/kornia/kornia/pull/683))\n- Increase speed of transform_points ([#687](https://github.com/kornia/kornia/pull/687))\n- Improves `find_homography_dlt` performance improvement and weights params made optional ([#690](https://github.com/kornia/kornia/pull/690))\n- Enable variable side resizing in `kornia.resize` ([#628](https://github.com/kornia/kornia/pull/628))\n- Added `Affine` transformation as `nn.Module` ([#630](https://github.com/kornia/kornia/pull/630))\n- Accelerate augmentations ([#708](https://github.com/kornia/kornia/pull/708))\n\n### Fixed\n- Fixed error in normal_transform_pixel3d ([#621](https://github.com/kornia/kornia/pull/621))\n- Fixed pipelining multiple augmentations return wrong transformation matrix (#645)([645](https://github.com/kornia/kornia/pull/645))\n- Fixed flipping returns wrong transformation matrices ([#648](https://github.com/kornia/kornia/pull/648))\n- Fixed 3d augmentations return wrong transformation matrix ([#665](https://github.com/kornia/kornia/pull/665))\n-  Fix the SOSNet loading bug ([#668](https://github.com/kornia/kornia/pull/668))\n- Fix/random perspective returns wrong transformation matrix ([#667](https://github.com/kornia/kornia/pull/667))\n- Fixes Zca inverse transform ([#695](https://github.com/kornia/kornia/pull/695))\n- Fixes Affine scale bug ([#714](https://github.com/kornia/kornia/pull/714))\n\n## Removed\n- Removed `warp_projective` ([#689](https://github.com/kornia/kornia/pull/689))\n"
        },
        {
          "name": "CITATION.md",
          "type": "blob",
          "size": 1.640625,
          "content": "\n  ## Cite Kornia papers\n  1. Kornia: an Open Source Differentiable Computer Vision Library for PyTorch\n  2. A survey on Kornia: an Open Source Differentiable Computer Vision Library for PyTorch\n  3. Differentiable Data Augmentation with Kornia\n  4. torchgeometry: when PyTorch meets geometry\n  ```bash\n  @inproceedings{eriba2019kornia,\n    author    = {E. Riba, D. Mishkin, D. Ponsa, E. Rublee and G. Bradski},\n    title     = {Kornia: an Open Source Differentiable Computer Vision Library for PyTorch},\n    booktitle = {Winter Conference on Applications of Computer Vision},\n    year      = {2020},\n    url       = {https://arxiv.org/pdf/1910.02190.pdf}\n  }\n  ```\n  ```bash\n  @misc{riba2020survey,\n      title={A survey on Kornia: an Open Source Differentiable Computer Vision Library for PyTorch},\n      author={E. Riba and D. Mishkin and J. Shi and D. Ponsa and F. Moreno-Noguer and G. Bradski},\n      year={2020},\n      eprint={2009.10521},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n  }\n  ```\n  ```bash\n  @misc{shi2020differentiable,\n      title={Differentiable Data Augmentation with Kornia},\n      author={Jian Shi and Edgar Riba and Dmytro Mishkin and Francesc Moreno and Anguelos Nicolaou},\n      year={2020},\n      eprint={2011.09832},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n  }\n  ```\n  ```bash\n  @misc{Arraiy2018,\n    author    = {E. Riba, M. Fathollahi, W. Chaney, E. Rublee and G. Bradski},\n    title     = {torchgeometry: when PyTorch meets geometry},\n    booktitle = {PyTorch Developer Conference},\n    year      = {2018},\n    url       = {https://drive.google.com/file/d/1xiao1Xj9WzjJ08YY_nYwsthE-wxfyfhG/view?usp=sharing}\n  }\n  ```\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2919921875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socioeconomic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at edgar.riba@arraiy.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 15.98046875,
          "content": "# Contributing to Kornia\n**Welcome !!** This is the Kornia library contributor's corner. If you are reading this, it means that you have an interest\nin **Differentiable Computer Vision**, and are willing to contribute to the project.\n\nEveryone is welcome to get involved with the project. There are different ways to contribute with your two cents:\n\n1. Ask/Answer questions:\n    - Where can you ask questions?\n      1. using the GitHub discussion at Kornia repo: [GH Discussions](https://github.com/kornia/kornia/discussions)\n      2. Our Slack workspace to keep in touch with our core contributors and the community:\n         [Join Here](https://join.slack.com/t/kornia/shared_invite/zt-csobk21g-2AQRi~X9Uu6PLMuUZdvfjA)\n      3. using the `#kornia` tag in [PyTorch Discuss](https://discuss.pytorch.org)\n    - Please, don't use GitHub issues for Q&A.\n    - In case you are a developer and want to learn more about the PyTorch ecosystem, we suggest you join the PyTorch\n      slack. You can apply using this form: [https://bit.ly/ptslack](https://bit.ly/ptslack)\n\n2. Report bugs through [GitHub issues](https://github.com/kornia/kornia/issues):\n   - Do a quick search first to see whether others reported a similar issue.\n   - In case you find an unreported bug, please open a new ticket.\n   - Try to provide as much information as possible. Report using one of the available templates. Some tips:\n     - Clear title and description of the issue.\n     - Explain how to reproduce the error.\n     - Report your package versions to facilitate the task.\n     - Try to include a code sample/test that raises the error.\n\n3. Fix a bug or develop a feature from the roadmap:\n   - We will always have an open ticket showing the current roadmap.\n   - Pick an unassigned feature (or potentially propose a new one) or an open bug ticket.\n   - Follow the instructions from [Developing Kornia](#developing-kornia) to setup your development\n     environment and start coding.\n   - Check our coding conventions. See more details below.\n   - Run the test framework locally and make sure all works as expected before sending a pull request.\n   - Open a Pull Request, get the green light from the CI, and get your code merged.\n\n4. Donate resources to the project:\n   - In case you are an organization/institution that wants to give support, sponsor, or just use the project, please\n     contact us.\n     - [opencollective.com/kornia](https://opencollective.com/kornia)\n     - [github.com/sponsors/kornia](https://github.com/sponsors/kornia)\n   - We are open to starting any kind of collaboration and hearing feedback from you.\n   - We pretend to provide features on demand. Reach us!\n   - Currently looking for some kind of server donation to test *CUDA* code. (Please contact us).\n\n# Developing Kornia\n\nTo start to develop, please follow the steps below:\n\n1. Fork the [kornia repository](https://github.com/kornia/kornia) by clicking on the\n[fork](https://github.com/kornia/kornia/fork) button on the repository page. This will create a copy of the Kornia\nrepository under your GitHub account.\n\n\n2. Clone your fork of Kornia, and add the Kornia repository as a remote:\n    ```bash\n    $ git clone git@github.com:<your Github username>/kornia.git\n    $ cd kornia\n    $ git remote add upstream https://github.com/kornia/kornia.git\n    ```\n\n3. Create a new branch with a meaningful name reflecting your contribution. See an example:\n    ```bash\n    $ git checkout upstream/main -b feat/foo_feature\n    # or\n    $ git checkout upstream/main -b fix/bar_bug\n    ```\n    🚨 **Do not** work on the `main` branch!\n\n4. Creating a development environment\n\n    **Using kornia script**\n\n    Assuming that you are on ubuntu, with nvidia-drivers installed. In bash, source the ``path.bash.inc`` script.\n    This will install a local conda environment under ``./.dev_env``, which includes Pytorch and some dependencies\n    (no root required).\n\n    ```bash\n    $ source ./path.bash.inc\n    $ python setup.py develop\n    $ python -c \"import kornia; print(kornia.__version__)\"\n    ```\n\n    To install, or update the conda environment run ``setup_dev_env.sh``\n\n    ```bash\n    $ ./setup_dev_env.sh\n    ```\n\n\n    **Manually setup**\n\n    Otherwise, use a virtual environment of your preference. We recommend using\n    [conda](https://docs.conda.io/en/latest/) because it facilitates the Pytorch setup, mainly for those who have a\n    **GPU** available.\n\n    Example of creating and activating a virtualenv under `venv` name:\n    ```bash\n    # Using virtualenv\n    $ virtualenv venv -p <your python version / alias> # e.g python3.10\n    $ ./venv/bin/activate\n\n    # Using conda\n    $ conda create -p venv python=<language version> # e.g 3.10\n    $ conda activate venv/\n    ```\n\n    Setup Pytorch and Kornia:\n    ```bash\n    # Installing pytorch: https://pytorch.org/get-started/locally/\n    # With pip\n    $ pip install torch\n    # With conda\n    $ conda install pytorch cudatoolkit -c pytorch -c nvidia # For GPU env\n    # or\n    $ conda install pytorch cpuonly -c pytorch # For CPU env\n\n    # Installing Kornia for development\n    $ pip install -e .[dev]\n\n    # If you want to contribute to the documentation\n    $ pip install -e .[docs]\n    ```\n\n    **Attention**: If *Kornia* was already installed in your virtual environment, remove it with\n    `pip uninstall kornia` before reinstalling it in editable mode with the `-e` flag.\n\n5. Develop the code on your branch, and before creating the pull request, make sure to ensure the code passes the checks.\n\n    As you develop your code, you should also create test cases for your code. As well as, In addition to ensuring that\n    the other tests continue to pass. You can run the tests with:\n    ```bash\n    $ pytest tests/<TEST_TO_RUN>.py --dtype=float32,float64 --device=all\n    ```\n    With the `dtype` argument, run the tests using tensors with all `dtypes` desired. Options: `bfloat16`, `float16`,\n    `float32`, `float64`, and `all`.\n\n    In the same way, the `device`, will run the tests using tensors on the `device` desired. Options: `cpu`, `cuda`,\n    `tpu`, `mps`, and `all`.\n\n\n    Kornia relies on [pre-commit](https://pre-commit.com) to run code quality tools. Make sure to have `pre-commit`\n    under your dev environment, otherwise, you can install the tools manually and run them with the help of the available\n    commands of the [Makefile](./Makefile). Read more about the code standards adopted [here](#coding-standards).\n\n# Contributing to Documentation\n\nWe welcome contributions to the Kornia documentation! If you'd like to improve our docs, please follow these steps:\n\n1. Set up your development environment as described in the [Developing Kornia](#developing-kornia) section above.\n\n2. Make your changes to the documentation files located in the `docs/` directory.\n\n3. Build the documentation using the provided Makefile:\n\n   ```bash\n   $ make build-docs\n   ```\n\n   This command will delete any previously built files and generate the newest version of the documentation.\n\n4. The built documentation will be available in the `docs/build/html/` directory. You can open the main page in your browser by running:\n\n   ```bash\n   $ open docs/build/html/index.html\n   ```\n\n5. Review your changes in the browser to ensure they appear as expected.\n\n6. Once you're satisfied with your changes, commit them and submit a pull request following the guidelines in the [Pull Request](#pull-request) section below.\n\n## Benchmarking\n\nWe have a benchmark suite configured in [benchmarks/](./benchmarks/). We used the\n [pytest-benchmark](https://pypi.org/project/pytest-benchmark/) library to benchmark our function units.\n\nOur [Makefile](./Makefile) has an `benchmark` command as an alias on how to run our benchmarks.\n\n```console\n# To run all suite\n$ make benchmark\n\n# To run a specific file you can pass `BENCHMARK_SOURCE`\n$ make benchmark BENCHMARK_SOURCE=benchmarks/augmentation/2d_geometric_test.py\n\n# To run a specific benchmark you use `BENCHMARK_SOURCE` as the pytest standard behaviour\n$ make benchmark BENCHMARK_SOURCE=benchmarks/augmentation/2d_geometric_test.py::test_aug_2d_elastic_transform\n\n# To update the optimizer backends desired to execute you can pass `BENCHMARK_BACKENDS=`\n$ make benchmark BENCHMARK_BACKENDS='inductor,eager'\n\n# To pass other options to the runner, you can use `BENCHMARK_OPTS`\n# Example, setup to run the benchmark on cuda on verbose mode\n$ make benchmark BENCHMARK_OPTS='--device=cuda -vv'\n```\n\nWe use the same tests generator suite, so you can set up the device within `--device`, the dtype within\n`--dtype`, and the optimizer backend within `--optimizer`.\n\nThe optimizer backend supported on the suite, is the torch compile backend on non-experimental mode,\n and the `''` or `None` which will do the same as `eager` mode and do anything, and `'jit'` which will\n try to `torch.jit.script` the operation.\n\nYou can use the `BENCHMARK_OPTS` on `make benchmark` to overload the default options we use on pytest-benchmark.\n\nWe are using as default:\n- the warmup, because the optimizer/jit may had an overhead.\n- the group: to display the benchmark per each test\n- the precision: to have a better precision on the results\n- the default for `BENCHMARK_BACKENDS` are `'inductor,eager'`.\n- the default for `BENCHMARK_SOURCE` is `benchmarks/`.\n\nYou can also run the benchmark within docker:\n```console\n$ make benchmark-docker\n```\n\nwhich will build and run the image [docker/Dockerfile.benchmark](docker/Dockerfile.benchmark).\n The benchmark command can be used within `BENCHMARK_BACKENDS` and `BENCHMARK_SOURCE`.\n\n# Coding Standards\n\nThis section provides general guidance for developing code for the project. The following rules will serve as a guide in\nwriting high-quality code that will allow us to scale the project and ensure that the code base remains readable and\nmaintainable.\n\n- Use meaningful names for variables, functions, and classes.\n\n- Write small incremental changes:\n\n  - To have a linear and clean commits history, we recommend committing each small change that you do to the\n    source code.\n  - Clear commit messages will help to understand the progress of your work.\n  - Please, avoid pushing large files.\n\n- Add tests:\n  - Tests are crucial and we expect you to write unit tests for each of the functionalities that you implement.\n    It is also a good idea to group the tests for functionalities\n  - At [testing/](./testing/) directory we have a bunch of functions to help you to produce meaningful tests. Feel free,\n    to add any functionality which you that you think is essential and can be used with the test suite. Under this\n    testing, directory should go all code which are needed under the tests and aren't tests or pytest configs (fixtures,\n    etc).\n\n    ```python\n    from testing.base import BaseTester\n\n    class TestMyFunction(BaseTester):\n        # To compare the actual and expected tensors use `self.assert_close(...)`\n\n\n        def test_smoke(self, device, dtype):\n            # test the function with different parameters arguments, to check if the function at least runs with all the\n            # arguments allowed.\n            pass\n\n        def test_exception(self, device, dtype):\n            # tests the exceptions which can occur on your function\n\n            # example of how to properly test your exceptions\n            # with pytest.raises(<raised Error>) as errinfo:\n            #     your_function(<set of parameters that raise the error>)\n            # assert '<msg of error>' in str(errinfo)\n\n            pass\n\n        def test_cardinality(self, device, dtype):\n            # test if with different parameters the shape of the output is the expected\n            pass\n\n        def test_feature_foo(self, device, dtype):\n            # test basic functionality\n            pass\n\n        def test_feature_bar(self, device, dtype):\n            # test another functionality\n            pass\n\n        def test_gradcheck(self, device):\n            # test the functionality gradients\n            # Uses `self.gradcheck(...)`\n            pass\n\n        def test_dynamo(self, device, dtype, torch_optimizer):\n            #  test the functionality using dynamo optimizer\n\n            # Example of how to properly test your function for dynamo\n            # inputs = (...)\n            # op = your_function\n            # op_optimized = torch_optimizer(op)\n            # self.assert_close(op(inputs), op_optimized(inputs))\n\n            pass\n    ```\n\n- Tests should cover different devices (`CPU`, `CUDA`, etc), dtypes, and different input batch sizes. The `device`, and\n  `dtype`, are generated from the arguments (`--dtype` and `--device`) as explained before. These arguments when invoking the\n  tests suits with pytest, will generate all possibilities, providing fixtures for all functions. See an example:\n\n    ```python\n    import pytest\n\n    @pytest.mark.parametrize(\"batch_size\", [1, 2, 5])\n    def test_smoke(batch_size, device, dtype):\n        x = torch.rand(batch_size, 2, 3, device=device, dtype=dtype)\n        assert x.shape == (batch_size, 2, 3)\n    ```\n\n- We give support to static type checker for Python >= 3.8\n\n  - Please, read\n    [MyPy cheatsheet](https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html#type-hints-cheat-sheet-python-3) for\n    Python 3.\n  - It is recommended to use typing inside the function, **when** it would increase readability.\n  - Try to use all things available under `kornia.core`, e.g. `from kornia.core import Tensor`\n  - For modules which not support anymore `JIT` consider, adding `from __future__ import annotations`, to enable the\n    new features of typing.\n  - **Always** type function input and output, e.g.:\n    ```python\n    from __future__ import annotations\n    from kornia.core import Tensor\n\n    def homography_warp(\n      patch_src: Tensor,\n      dst_homo_src: Tensor,\n      dsize: tuple[int, int],\n      mode: str = 'bilinear',\n      padding_mode: str = 'zeros'\n    ) -> Tensor:\n    ```\n\n- We suggest using new Python 3's f-Strings improved string formatting syntax:\n\n  Guidelines: [PEP 498 - Literal String Interpolation](https://peps.python.org/pep-0498/)\n\n- Format your code:\n\n  - We follow [PEP8 style guide](https://www.python.org/dev/peps/pep-0008).\n  - Use `pre-commit` to autoformat each commit before push: [pre-commit.com](https://pre-commit.com)\n    To do so, just install it for this repository by running the command: `pre-commit install` on your terminal\n\n- Changes to PEP8:\n  - Line length is 120 characters.\n  - W504 (line break after binary operator) is sometimes acceptable. E.g.\n\n    ```python\n    determinant = A[:, :, 0:1, 0:1] * A[:, :, 1:2, 1:2] -\n                  A[:, :, 0:1, 1:2] * A[:, :, 1:2, 0:1])\n    ```\n\n-  Using 3rd party libraries:\n  - Everything from the standard library (https://docs.python.org/3/library/) and PyTorch (https://pytorch.org/) is OK.\n    It doesn’t mean, that one should import `urllib` just because, but doing it when needed is fine.\n\n# Pull Request\n\nOnce you finish implementing a feature or bug fix, please send a Pull Request to https://github.com/kornia/kornia\nthrough the website.\n\nIf you are not familiar with creating a Pull Request, here are some guides:\n\n- http://stackoverflow.com/questions/14680711/how-to-do-a-github-pull-request\n- https://help.github.com/articles/creating-a-pull-request\n\nOnce your pull request is created, our continuous build system will check your pull request. Continuous build will\ntest that:\n- [pytest](https://docs.pytest.org/en/latest) all tests pass.\n- Test coverage remains high. Please add unit tests so we maintain our code coverage.\n- Typing with [mypy](http://mypy-lang.org) type checks the Python code.\n- If the docs can be generated successfully\n- [pre-commit ci](https://pre-commit.ci)\n  - [ruff](https://pypi.org/project/ruff/) accepts the code style (our guidelines are based on PEP8) and checks if the code\n    is well formatted\n  - [docformatter](https://pypi.org/project/docformatter/) checks if the code docstrings are well formatted\n  - and some other checks. Check our [pre-commit config](./.pre-commit-config.yaml)\n\nIf your code fails one of these checks, you will be expected to fix your pull request before it is considered.\n\n# Licence\n\nBy contributing to the project, you agree that your contributions will be licensed under the Apache LICENSE. Check the\ncomplete license [here](./LICENSE)\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 0.6640625,
          "content": "   Copyright (C) 2017-2019, Arraiy, Inc., all rights reserved.\n   Copyright (C) 2019-    , Kornia authors, all rights reserved.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.9345703125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.9423828125,
          "content": "BENCHMARK_SOURCE \t= benchmarks/\nBENCHMARK_BACKENDS \t= inductor,eager\nBENCHMARK_OPTS \t\t=\n\n.PHONY: test test-cpu test-cuda lint mypy build-docs install uninstall FORCE\n\ntest: mypy lint build-docs test-all\n\ntest-all: FORCE\n\tpytest -v --device all --dtype all --cov=kornia tests/\n\ntest-cpu: FORCE\n\tpytest -v --device cpu --dtype all --cov=kornia tests/\n\ntest-cuda: FORCE\n\tpytest -v --device cuda --dtype all --cov=kornia tests/\n\ntest-mps: FORCE\n\tpytest -v --device mps --dtype float32 -k \"not (grad or exception or jit or dynamo)\"  tests/\n\ntest-module: FORCE\n\tpytest -v --device all --dtype all  tests/$(module)\n\ntest-jit: FORCE\n\tpytest -v --device all --dtype all -m jit\n\ntest-gradcheck: FORCE\n\tpytest -v --device all --dtype all -m grad\n\ntest-nn: FORCE\n\tpytest -v --device all --dtype all -m nn\n\ntest-quick: FORCE\n\tpytest -v --device all --dtype all -m \"not (jit or grad or nn)\"\n\ntest-slow: FORCE\n\tpytest -v --device all --dtype all -m \"(jit or grad or nn)\"\n\ntest-coverage: FORCE\n\tcoverage erase && coverage run --source kornia/ -m pytest --device=all --dtype float32,float64 tests/ && coverage report\n\nlint: FORCE\n\tpre-commit run ruff --all-files\n\nmypy: FORCE\n\tmypy\n\ndoctest:\n\tpytest -v --doctest-modules kornia/\n\nbuild-docs: FORCE\n\tcd docs; make clean html\n\ninstall: FORCE\n\tpython setup.py install\n\ninstall-dev: FORCE\n\tpython setup.py develop\n\nbenchmark: FORCE\n\t# We want to always run within warmup because torch optimizer backend\n\tpytest $(BENCHMARK_SOURCE) --benchmark-warmup=on --benchmark-warmup-iterations=100 --benchmark-calibration-precision=10 --benchmark-group-by=func --optimizer=$(BENCHMARK_BACKENDS) $(BENCHMARK_OPTS) $(0)\n\nbenchmark-docker:\n\tdocker image rm kornia-benchmark:latest --force\n\tdocker build -t kornia-benchmark:latest -f docker/Dockerfile.benchmark .\n\tdocker run -e \"TERM=xterm-256color\" \\\n\t\t\t   -e \"BACKENDS=$(BENCHMARK_BACKENDS)\" \\\n\t\t\t   -e \"OPTS=$(BENCHMARK_OPTS)\" \\\n\t\t\t   --gpus all\\\n\t\t\t   -it kornia-benchmark:latest\n\nuninstall: FORCE\n\tpip uninstall kornia\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.287109375,
          "content": "<div align=\"center\">\n<p align=\"center\">\n  <img width=\"55%\" src=\"https://github.com/kornia/data/raw/main/kornia_banner_pixie.png\" />\n</p>\n\n---\n\nEnglish | [简体中文](README_zh-CN.md)\n\n<!-- prettier-ignore -->\n<a href=\"https://kornia.readthedocs.io\">Docs</a> •\n<a href=\"https://colab.sandbox.google.com/github/kornia/tutorials/blob/master/nbs/hello_world_tutorial.ipynb\">Try it Now</a> •\n<a href=\"https://kornia.github.io/tutorials/\">Tutorials</a> •\n<a href=\"https://github.com/kornia/kornia-examples\">Examples</a> •\n<a href=\"https://kornia.github.io//kornia-blog\">Blog</a> •\n<a href=\"https://join.slack.com/t/kornia/shared_invite/zt-csobk21g-CnydWe5fmvkcktIeRFGCEQ\">Community</a>\n\n[![PyPI version](https://badge.fury.io/py/kornia.svg)](https://pypi.org/project/kornia)\n[![Downloads](https://static.pepy.tech/badge/kornia)](https://pepy.tech/project/kornia)\n[![Slack](https://img.shields.io/badge/Slack-4A154B?logo=slack&logoColor=white)](https://join.slack.com/t/kornia/shared_invite/zt-csobk21g-2AQRi~X9Uu6PLMuUZdvfjA)\n[![Twitter](https://img.shields.io/twitter/follow/kornia_foss?style=social)](https://twitter.com/kornia_foss)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](LICENCE)\n\n</p>\n</div>\n\n**Kornia** is a differentiable computer vision library that provides a rich set of differentiable image processing and geometric vision algorithms. Built on top of [PyTorch](https://pytorch.org), Kornia integrates seamlessly into existing AI workflows, allowing you to leverage powerful [batch transformations](), [auto-differentiation]() and [GPU acceleration](). Whether you’re working on image transformations, augmentations, or AI-driven image processing, Kornia equips you with the tools you need to bring your ideas to life.\n\n## Key Components\n1. **Differentiable Image Processing**<br>\n  Kornia provides a comprehensive suite of image processing operators, all differentiable and ready to integrate into deep learning pipelines.\n    - **Filters**: Gaussian, Sobel, Median, Box Blur, etc.\n    - **Transformations**: Affine, Homography, Perspective, etc.\n    - **Enhancements**: Histogram Equalization, CLAHE, Gamma Correction, etc.\n    - **Edge Detection**: Canny, Laplacian, Sobel, etc.\n    - ... check our [docs](https://kornia.readthedocs.io) for more.\n2. **Advanced Augmentations**<br>\nPerform powerful data augmentation with Kornia’s built-in functions, ideal for training AI models with complex augmentation pipelines.\n    - **Augmentation Pipeline**: AugmentationSequential, PatchSequential, VideoSequential, etc.\n    - **Automatic Augmentation**: AutoAugment, RandAugment, TrivialAugment.\n3. **AI Models**<br>\nLeverage pre-trained AI models optimized for a variety of vision tasks, all within the Kornia ecosystem.\n    - **Face Detection**: YuNet\n    - **Feature Matching**: LoFTR, LightGlue\n    - **Feature Descriptor**: DISK, DeDoDe, SOLD2\n    - **Segmentation**: SAM\n    - **Classification**: MobileViT, VisionTransformer.\n\n<details>\n<summary>See here for some of the methods that we support! (>500 ops in total !)</summary>\n\n| **Category**               | **Methods/Models**                                                                                                   |\n|----------------------------|---------------------------------------------------------------------------------------------------------------------|\n| **Image Processing**        | - Color conversions (RGB, Grayscale, HSV, etc.)<br>- Geometric transformations (Affine, Homography, Resizing, etc.)<br>- Filtering (Gaussian blur, Median blur, etc.)<br>- Edge detection (Sobel, Canny, etc.)<br>- Morphological operations (Erosion, Dilation, etc.)                                 |\n| **Augmentation**            | - Random cropping, Erasing<br> - Random geometric transformations (Affine, flipping, Fish Eye, Perspecive, Thin plate spline, Elastic)<br>- Random noises (Gaussian, Median, Motion, Box, Rain, Snow, Salt and Pepper)<br>- Random color jittering (Contrast, Brightness, CLAHE, Equalize, Gamma, Hue, Invert, JPEG, Plasma, Posterize, Saturation, Sharpness, Solarize)<br> - Random MixUp, CutMix, Mosaic, Transplantation, etc.                  |\n| **Feature Detection**       | - Detector (Harris, GFTT, Hessian, DoG, KeyNet, DISK and DeDoDe)<br> - Descriptor (SIFT, HardNet, TFeat, HyNet, SOSNet, and LAFDescriptor)<br>- Matching (nearest neighbor, mutual nearest neighbor, geometrically aware matching, AdaLAM LightGlue, and LoFTR)                    |\n| **Geometry**                | - Camera models and calibration<br>- Stereo vision (epipolar geometry, disparity, etc.)<br>- Homography estimation<br>- Depth estimation from disparity<br>- 3D transformations                |\n| **Deep Learning Layers**    | - Custom convolution layers<br>- Recurrent layers for vision tasks<br>- Loss functions (e.g., SSIM, PSNR, etc.)<br>- Vision-specific optimizers                                        |\n| **Photometric Functions**   | - Photometric loss functions<br>- Photometric augmentations                                                                                           |\n| **Filtering**               | - Bilateral filtering<br>- DexiNed<br>- Dissolving<br>- Guided Blur<br>- Laplacian<br>- Gaussian<br>- Non-local means<br>- Sobel<br>- Unsharp masking                                                                                            |\n| **Color**                   | - Color space conversions<br>- Brightness/contrast adjustment<br>- Gamma correction                                                                       |\n| **Stereo Vision**           | - Disparity estimation<br>- Depth estimation<br>- Rectification                                                                                           |\n| **Image Registration**      | - Affine and homography-based registration<br>- Image alignment using feature matching                                                                     |\n| **Pose Estimation**         | - Essential and Fundamental matrix estimation<br>- PnP problem solvers<br>- Pose refinement                                                                |\n| **Optical Flow**            | - Farneback optical flow<br>- Dense optical flow<br>- Sparse optical flow                                                                                  |\n| **3D Vision**               | - Depth estimation<br>- Point cloud operations<br>- Nerf<br>                                                                |\n| **Image Denoising**         | - Gaussian noise removal<br>- Poisson noise removal                                                                                                        |\n| **Edge Detection**          | - Sobel operator<br>- Canny edge detection                                                                                                                 |                                               |\n| **Transformations**         | - Rotation<br>- Translation<br>- Scaling<br>- Shearing                                                                                                     |\n| **Loss Functions**          | - SSIM (Structural Similarity Index Measure)<br>- PSNR (Peak Signal-to-Noise Ratio)<br>- Cauchy<br>- Charbonnier<br>- Depth Smooth<br>- Dice<br>- Hausdorff<br>- Tversky<br>- Welsch<br>                                   |                                                                                             |\n| **Morphological Operations**| - Dilation<br>- Erosion<br>- Opening<br>- Closing                                                                                                          |\n\n</details>\n\n## Sponsorship\n\nKornia is an open-source project that is developed and maintained by volunteers. Whether you're using it for research or commercial purposes, consider sponsoring or collaborating with us. Your support will help ensure Kornia's growth and ongoing innovation. Reach out to us today and be a part of shaping the future of this exciting initiative!\n\n<a href=\"https://opencollective.com/kornia/donate\" target=\"_blank\">\n  <img src=\"https://opencollective.com/webpack/donate/button@2x.png?color=blue\" width=300 />\n</a>\n\n## Installation\n\n[![PyPI python](https://img.shields.io/pypi/pyversions/kornia)](https://pypi.org/project/kornia)\n[![pytorch](https://img.shields.io/badge/PyTorch_1.9.1+-ee4c2c?logo=pytorch&logoColor=white)](https://pytorch.org/get-started/locally/)\n\n### From pip\n\n  ```bash\n  pip install kornia\n  ```\n\n<details>\n  <summary>Other installation options</summary>\n\n#### From source with editable mode\n\n  ```bash\n  pip install -e .\n  ```\n\n#### From Github url (latest version)\n\n  ```bash\n  pip install git+https://github.com/kornia/kornia\n  ```\n\n</details>\n\n## Quick Start\n\nKornia is not just another computer vision library — it's your gateway to effortless Computer Vision and AI.\n\n<details>\n<summary>Get started with Kornia image transformation and augmentation!</summary>\n\n```python\nimport numpy as np\nimport kornia_rs as kr\n\nfrom kornia.augmentation import AugmentationSequential, RandomAffine, RandomBrightness\nfrom kornia.filters import StableDiffusionDissolving\n\n# Load and prepare your image\nimg: np.ndarray = kr.read_image_any(\"img.jpeg\")\nimg = kr.resize(img, (256, 256), interpolation=\"bilinear\")\n\n# alternatively, load image with PIL\n# img = Image.open(\"img.jpeg\").resize((256, 256))\n# img = np.array(img)\n\nimg = np.stack([img] * 2)  # batch images\n\n# Define an augmentation pipeline\naugmentation_pipeline = AugmentationSequential(\n    RandomAffine((-45., 45.), p=1.),\n    RandomBrightness((0.,1.), p=1.)\n)\n\n# Leveraging StableDiffusion models\ndslv_op = StableDiffusionDissolving()\n\nimg = augmentation_pipeline(img)\ndslv_op(img, step_number=500)\n\ndslv_op.save(\"Kornia-enhanced.jpg\")\n```\n\n</details>\n\n<details>\n<summary>Find out Kornia ONNX models with ONNXSequential!</summary>\n\n```python\nimport numpy as np\nfrom kornia.onnx import ONNXSequential\n# Chain ONNX models from HuggingFace repo and your own local model together\nonnx_seq = ONNXSequential(\n    \"hf://operators/kornia.geometry.transform.flips.Hflip\",\n    \"hf://models/kornia.models.detection.rtdetr_r18vd_640x640\",  # Or you may use \"YOUR_OWN_MODEL.onnx\"\n)\n# Prepare some input data\ninput_data = np.random.randn(1, 3, 384, 512).astype(np.float32)\n# Perform inference\noutputs = onnx_seq(input_data)\n# Print the model outputs\nprint(outputs)\n\n# Export a new ONNX model that chains up all three models together!\nonnx_seq.export(\"chained_model.onnx\")\n```\n</details>\n\n## Multi-framework support\n\nYou can now use Kornia with [TensorFlow](https://www.tensorflow.org/), [JAX](https://jax.readthedocs.io/en/latest/index.html), and [NumPy](https://numpy.org/). See [Multi-Framework Support](docs/source/get-started/multi-framework-support.rst) for more details.\n\n```python\nimport kornia\ntf_kornia = kornia.to_tensorflow()\n```\n\n<p align=\"center\">\n  Powered by\n  <a href=\"https://github.com/ivy-llc/ivy\" target=\"_blank\">\n    <div class=\"dark-light\" style=\"display: block;\" align=\"center\">\n      <img class=\"dark-light\" width=\"15%\" src=\"https://raw.githubusercontent.com/ivy-llc/assets/refs/heads/main/assets/logos/ivy-long.svg\"/>\n    </div>\n  </a>\n</p>\n\n## Call For Contributors\n\nAre you passionate about computer vision, AI, and open-source development? Join us in shaping the future of Kornia! We are actively seeking contributors to help expand and enhance our library, making it even more powerful, accessible, and versatile. Whether you're an experienced developer or just starting, there's a place for you in our community.\n\n### Accessible AI Models\n\nWe are excited to announce our latest advancement: a new initiative designed to seamlessly integrate lightweight AI models into Kornia.\nWe aim to run any models as smooth as big models such as StableDiffusion, to support them well in many perspectives.\nWe have already included a selection of lightweight AI models like [YuNet (Face Detection)](), [Loftr (Feature Matching)](), and [SAM (Segmentation)](). Now, we're looking for contributors to help us:\n\n- Expand the Model Selection: Import decent models into our library. If you are a researcher, Kornia is an excellent place for you to promote your model!\n- Model Optimization: Work on optimizing models to reduce their computational footprint while maintaining accuracy and performance. You may start from offering ONNX support!\n- Model Documentation: Create detailed guides and examples to help users get the most out of these models in their projects.\n\n\n### Documentation And Tutorial Optimization\n\nKornia's foundation lies in its extensive collection of classic computer vision operators, providing robust tools for image processing, feature extraction, and geometric transformations. We continuously seek for contributors to help us improve our documentation and present nice tutorials to our users.\n\n\n## Cite\n\nIf you are using kornia in your research-related documents, it is recommended that you cite the paper. See more in [CITATION](./CITATION.md).\n\n  ```bibtex\n  @inproceedings{eriba2019kornia,\n    author    = {E. Riba, D. Mishkin, D. Ponsa, E. Rublee and G. Bradski},\n    title     = {Kornia: an Open Source Differentiable Computer Vision Library for PyTorch},\n    booktitle = {Winter Conference on Applications of Computer Vision},\n    year      = {2020},\n    url       = {https://arxiv.org/pdf/1910.02190.pdf}\n  }\n  ```\n\n## Contributing\n\nWe appreciate all contributions. If you are planning to contribute back bug-fixes, please do so without any further discussion. If you plan to contribute new features, utility functions or extensions, please first open an issue and discuss the feature with us. Please, consider reading the [CONTRIBUTING](./CONTRIBUTING.md) notes. The participation in this open source project is subject to [Code of Conduct](./CODE_OF_CONDUCT.md).\n\n## Community\n\n- **Forums:** discuss implementations, research, etc. [GitHub Forums](https://github.com/kornia/kornia/discussions)\n- **GitHub Issues:** bug reports, feature requests, install issues, RFCs, thoughts, etc. [OPEN](https://github.com/kornia/kornia/issues/new/choose)\n- **Slack:** Join our workspace to keep in touch with our core contributors and be part of our community. [JOIN HERE](https://join.slack.com/t/kornia/shared_invite/zt-csobk21g-2AQRi~X9Uu6PLMuUZdvfjA)\n\n<a href=\"https://github.com/Kornia/kornia/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=Kornia/kornia\" width=\"60%\" />\n</a>\n\nMade with [contrib.rocks](https://contrib.rocks).\n\n## License\n\nKornia is released under the Apache 2.0 license. See the [LICENSE](./LICENSE) file for more information.\n"
        },
        {
          "name": "README_zh-CN.md",
          "type": "blob",
          "size": 9.2890625,
          "content": "<div align=\"center\">\n<p align=\"center\">\n  <img width=\"75%\" src=\"https://github.com/kornia/data/raw/main/kornia_banner_pixie.png\" />\n</p>\n\n**The open-source and Computer Vision 2.0 library**\n\n---\n\n[English](README.md) | 简体中文\n\n<!-- prettier-ignore -->\n<a href=\"https://kornia.org\">网站</a> •\n<a href=\"https://kornia.readthedocs.io\">文档</a> •\n<a href=\"https://colab.sandbox.google.com/github/kornia/tutorials/blob/main/nbs/hello_world_tutorial.ipynb\">快速尝试</a> •\n<a href=\"https://kornia.github.io/tutorials/\">教程</a> •\n<a href=\"https://github.com/kornia/kornia-examples\">例子</a> •\n<a href=\"https://kornia.github.io//kornia-blog\">博客</a> •\n<a href=\"https://join.slack.com/t/kornia/shared_invite/zt-csobk21g-CnydWe5fmvkcktIeRFGCEQ\">Slack社区</a>\n\n[![PyPI python](https://img.shields.io/pypi/pyversions/kornia)](https://pypi.org/project/kornia)\n[![pytorch](https://img.shields.io/badge/PyTorch_1.9.1+-ee4c2c?logo=pytorch&logoColor=white)](https://pytorch.org/get-started/locally/)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](LICENCE)\n\n[![PyPI version](https://badge.fury.io/py/kornia.svg)](https://pypi.org/project/kornia)\n[![Downloads](https://static.pepy.tech/badge/kornia)](https://pepy.tech/project/kornia)\n[![Slack](https://img.shields.io/badge/Slack-4A154B?logo=slack&logoColor=white)](https://join.slack.com/t/kornia/shared_invite/zt-csobk21g-2AQRi~X9Uu6PLMuUZdvfjA)\n[![Twitter](https://img.shields.io/twitter/follow/kornia_foss?style=social)](https://twitter.com/kornia_foss)\n\n[![tests-cpu](https://github.com/kornia/kornia/actions/workflows/scheduled_test_cpu.yml/badge.svg?event=schedule&&branch=main)](https://github.com/kornia/kornia/actions/workflows/scheduled_test_cpu.yml)\n[![codecov](https://codecov.io/gh/kornia/kornia/branch/main/graph/badge.svg?token=FzCb7e0Bso)](https://codecov.io/gh/kornia/kornia)\n[![Documentation Status](https://readthedocs.org/projects/kornia/badge/?version=latest)](https://kornia.readthedocs.io/en/latest/?badge=latest)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/kornia/kornia/main.svg)](https://results.pre-commit.ci/latest/github/kornia/kornia/main)\n\n<a href=\"https://www.producthunt.com/posts/kornia?utm_source=badge-featured&utm_medium=badge&utm_souce=badge-kornia\" target=\"_blank\"><img src=\"https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=306439&theme=light\" alt=\"Kornia - Computer vision library for deep learning | Product Hunt\" style=\"width: 250px; height: 54px;\" width=\"250\" height=\"54\" /></a>\n\n</p>\n</div>\n\n*Kornia* 是一款基于 [PyTorch](https://pytorch.org) 的可微分的计算机视觉库。\n\n它由一组用于解决通用计算机视觉问题的操作模块和可微分模块组成。其核心使用 *PyTorch* 作为主要后端，以提高效率并利用反向模式自动微分来定义和计算复杂函数的梯度。\n\n<div align=\"center\">\n  <img src=\"https://github.com/kornia/kornia/raw/main/docs/source/_static/img/hakuna_matata.gif\" width=\"75%\" height=\"75%\">\n</div>\n\n<!--<div align=\"center\">\n  <img src=\"http://drive.google.com/uc?export=view&id=1KNwaanUdY1MynF0EYfyXjDM3ti09tzaq\">\n</div>-->\n\n## 概览\n\n受现有开源库的启发，Kornia可以由包含各种可以嵌入神经网络的操作符组成，并可以训练模型来执行图像变换、对极几何、深度估计和低级图像处理，例如过滤和边缘检测。此外，整个库都可以直接对张量进行操作。\n\n详细来说，Kornia 是一个包含以下组件的库：\n\n| **Component**                                                                    | **Description**                                                                                                                       |\n|----------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------|\n| [kornia](https://kornia.readthedocs.io/en/latest/index.html)                     | 具有强大 GPU 支持的可微计算机视觉库                                                                   |\n| [kornia.augmentation](https://kornia.readthedocs.io/en/latest/augmentation.html) | 在 GPU 中执行数据增强的模块                                                                                     |\n| [kornia.color](https://kornia.readthedocs.io/en/latest/color.html)               | 执行色彩空间转换的模块                                                                                  |\n| [kornia.contrib](https://kornia.readthedocs.io/en/latest/contrib.html)           | 未进入稳定版本的实验性模块                                                                              |\n| [kornia.enhance](https://kornia.readthedocs.io/en/latest/enhance.html)           | 执行归一化和像素强度变换的模块                                                                        |\n| [kornia.feature](https://kornia.readthedocs.io/en/latest/feature.html)           | 执行特征检测的模块                                                                                                 |\n| [kornia.filters](https://kornia.readthedocs.io/en/latest/filters.html)           | 执行图像滤波和边缘检测的模块                                                                                |\n| [kornia.geometry](https://kornia.readthedocs.io/en/latest/geometry.html)         | 执行几何计算的模块，用于使用不同的相机模型执行图像变换、3D线性代数和转换 |\n| [kornia.losses](https://kornia.readthedocs.io/en/latest/losses.html)             | 损失函数模块                                                                             |\n| [kornia.morphology](https://kornia.readthedocs.io/en/latest/morphology.html)     | 执行形态学操作的模块                                                                                          |\n| [kornia.utils](https://kornia.readthedocs.io/en/latest/utils.html)               | 图像/张量常用工具以及metrics                                                                             |\n\n## 安装说明\n\n### 通过 pip 安装:\n\n  ```bash\n  pip install kornia\n  pip install kornia[x]  # 安装训练相关API\n  ```\n\n<details>\n  <summary>其他安装方法</summary>\n\n  #### 通过源码安装:\n\n  ```bash\n  python setup.py install\n  ```\n\n  #### 通过源码安装（软链接至当前路径）:\n\n  ```bash\n  pip install -e .\n  ```\n\n  #### 通过源码安装（从GIT自动下载最新代码）:\n\n  ```bash\n  pip install git+https://github.com/kornia/kornia\n  ```\n\n</details>\n\n\n## 例子\n\n可以尝试通过这些 [教程](https://kornia.github.io/tutorials/) 来学习和使用这个库。\n\n<div align=\"center\">\n  <a href=\"https://colab.sandbox.google.com/github/kornia/tutorials/blob/master/nbs/hello_world_tutorial.ipynb\" target=\"_blank\">\n    <img src=\"https://raw.githubusercontent.com/kornia/data/main/hello_world_arturito.png\" width=\"75%\" height=\"75%\">\n  </a>\n</div>\n\n:triangular_flag_on_post: **Updates**\n- :white_check_mark: 现已通过 [Gradio](https://github.com/gradio-app/gradio) 将Kornia集成进 [Huggingface Spaces](https://huggingface.co/spaces). 可以尝试 [Gradio 在线Demo](https://huggingface.co/spaces/akhaliq/Kornia-LoFTR).\n\n## 引用\n\n如果您在与研究相关的文档中使用 Kornia，您可以引用我们的论文。更多信息可以在 [CITATION](https://github.com/kornia/kornia/blob/main/CITATION.md) 看到。\n\n  ```bibtex\n  @inproceedings{eriba2019kornia,\n    author    = {E. Riba, D. Mishkin, D. Ponsa, E. Rublee and G. Bradski},\n    title     = {Kornia: an Open Source Differentiable Computer Vision Library for PyTorch},\n    booktitle = {Winter Conference on Applications of Computer Vision},\n    year      = {2020},\n    url       = {https://arxiv.org/pdf/1910.02190.pdf}\n  }\n  ```\n\n## 贡献\n我们感谢所有的贡献者为改进和提升 Kornia 所作出的努力。您可以直接修复一个已知的BUG而无需进一步讨论；如果您想要添加一个任何新的或者扩展功能，请务必先通过提交一个Issue来与我们讨论。详情请阅读 [贡献指南](https://github.com/kornia/kornia/blob/main/CONTRIBUTING.md)。开源项目的参与者请务必了解如下 [规范](https://github.com/kornia/kornia/blob/main/CODE_OF_CONDUCT.md)。\n\n## 社区\n- **论坛:** 讨论代码实现，学术研究等。[GitHub Forums](https://github.com/kornia/kornia/discussions)\n- **GitHub Issues:** bug reports, feature requests, install issues, RFCs, thoughts, etc. [OPEN](https://github.com/kornia/kornia/issues/new/choose)\n- **Slack:** 加入我们的Slack社区，与我们的核心贡献者保持联系。 [JOIN HERE](https://join.slack.com/t/kornia/shared_invite/zt-csobk21g-2AQRi~X9Uu6PLMuUZdvfjA)\n- 常见信息请访问我们的网站 www.kornia.org\n\n## 中文社区\n扫描下方的二维码可关注 Kornia 的官方交流QQ群（679683070）以及Kornia知乎账号。\n\n<div align=\"center\">\n  <img src=\"https://github.com/kornia/kornia/raw/main/docs/source/_static/img/cn_community_qq.jpg\" height=\"700px\">\n  <img src=\"https://github.com/kornia/kornia/raw/main/docs/source/_static/img/cn_community_zhihu.jpg\" height=\"700px\">\n</div>\n\n我们会在 Kornia 交流社区为大家\n\n- 📢 更新 Kornia 的最新动态\n- 📘 进行更高效的答疑解惑以及意见反馈\n- 💻 提供与行业大牛的充分交流的平台\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "conftest.py",
          "type": "blob",
          "size": 11.11328125,
          "content": "# LICENSE HEADER MANAGED BY add-license-header\n#\n# Copyright 2018 Kornia Team\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nimport os\nimport sys\nfrom functools import partial\nfrom itertools import product\n\nimport numpy as np\nimport pytest\nimport torch\n\nimport kornia\nfrom kornia.utils._compat import torch_version\n\ntry:\n    import torch._dynamo\n\n    _backends_non_experimental = torch._dynamo.list_backends()\nexcept ImportError:\n    _backends_non_experimental = []\n\n\nWEIGHTS_CACHE_DIR = \"weights/\"\n\n\ndef get_test_devices() -> dict[str, torch.device]:\n    \"\"\"Create a dictionary with the devices to test the source code.\n\n    CUDA devices will be test only in case the current hardware supports it.\n\n    Return:\n        dict(str, torch.device): list with devices names.\n\n    \"\"\"\n    devices: dict[str, torch.device] = {}\n    devices[\"cpu\"] = torch.device(\"cpu\")\n    if torch.cuda.is_available():\n        devices[\"cuda\"] = torch.device(\"cuda:0\")\n    if kornia.xla_is_available():\n        import torch_xla.core.xla_model as xm\n\n        devices[\"tpu\"] = xm.xla_device()\n    if hasattr(torch.backends, \"mps\"):\n        if torch.backends.mps.is_available():\n            devices[\"mps\"] = torch.device(\"mps\")\n    return devices\n\n\ndef get_test_dtypes() -> dict[str, torch.dtype]:\n    \"\"\"Create a dictionary with the dtypes the source code.\n\n    Return:\n        dict(str, torch.dtype): list with dtype names.\n\n    \"\"\"\n    dtypes: dict[str, torch.dtype] = {}\n    dtypes[\"bfloat16\"] = torch.bfloat16\n    dtypes[\"float16\"] = torch.float16\n    dtypes[\"float32\"] = torch.float32\n    dtypes[\"float64\"] = torch.float64\n    return dtypes\n\n\n# setup the devices to test the source code\n\nTEST_DEVICES: dict[str, torch.device] = get_test_devices()\nTEST_DTYPES: dict[str, torch.dtype] = get_test_dtypes()\nTEST_OPTIMIZER_BACKEND = {\"\", None, \"jit\", *_backends_non_experimental}\n# Combinations of device and dtype to be excluded from testing.\n# DEVICE_DTYPE_BLACKLIST = {('cpu', 'float16')}\nDEVICE_DTYPE_BLACKLIST = {}\n\n\n@pytest.fixture()\ndef device(device_name) -> torch.device:\n    \"\"\"Return device for testing.\"\"\"\n    return TEST_DEVICES[device_name]\n\n\n@pytest.fixture()\ndef dtype(dtype_name) -> torch.dtype:\n    \"\"\"Return dtype for testing.\"\"\"\n    return TEST_DTYPES[dtype_name]\n\n\n@pytest.fixture()\ndef torch_optimizer(optimizer_backend):\n    \"\"\"Return torch optimizer.\"\"\"\n    if not optimizer_backend:\n        return lambda x: x\n\n    if optimizer_backend == \"jit\":\n        return torch.jit.script\n\n    if hasattr(torch, \"compile\") and sys.platform == \"linux\":\n        if (not (sys.version_info[:2] == (3, 11) and torch_version() in {\"2.0.0\", \"2.0.1\"})) and (\n            not sys.version_info[:2] == (3, 12)\n        ):\n            # torch compile don't have support for python3.12 yet\n            torch._dynamo.reset()\n            # torch compile just have support for python 3.11 after torch 2.1.0\n            return partial(\n                torch.compile, backend=optimizer_backend\n            )  # TODO: explore the others parameters of torch compile\n\n    pytest.skip(f\"skipped because {torch.__version__} not have `compile` available! Failed to setup dynamo.\")\n\n\ndef pytest_generate_tests(metafunc):\n    \"\"\"Generate tests.\"\"\"\n    device_names = None\n    dtype_names = None\n    optimizer_backends_names = None\n\n    if \"device_name\" in metafunc.fixturenames:\n        raw_value = metafunc.config.getoption(\"--device\")\n        if raw_value == \"all\":\n            device_names = list(TEST_DEVICES.keys())\n        else:\n            device_names = raw_value.split(\",\")\n    if \"dtype_name\" in metafunc.fixturenames:\n        raw_value = metafunc.config.getoption(\"--dtype\")\n        if raw_value == \"all\":\n            dtype_names = list(TEST_DTYPES.keys())\n        else:\n            dtype_names = raw_value.split(\",\")\n\n    if \"optimizer_backend\" in metafunc.fixturenames:\n        raw_value = metafunc.config.getoption(\"--optimizer\")\n        if raw_value == \"all\":\n            optimizer_backends_names = TEST_OPTIMIZER_BACKEND\n        else:\n            optimizer_backends_names = raw_value.split(\",\")\n\n    if device_names is not None and dtype_names is not None and optimizer_backends_names is not None:\n        # Exclude any blacklisted device/dtype combinations.\n        params = [\n            combo\n            for combo in product(device_names, dtype_names, optimizer_backends_names)\n            if combo not in DEVICE_DTYPE_BLACKLIST\n        ]\n        metafunc.parametrize(\"device_name,dtype_name,optimizer_backend\", params)\n    elif device_names is not None and dtype_names is not None and optimizer_backends_names is None:\n        # Exclude any blacklisted device/dtype combinations.\n        params = [combo for combo in product(device_names, dtype_names) if combo not in DEVICE_DTYPE_BLACKLIST]\n        metafunc.parametrize(\"device_name,dtype_name\", params)\n    elif device_names is not None and dtype_names is None and optimizer_backends_names is not None:\n        params = product(device_names, optimizer_backends_names)\n        metafunc.parametrize(\"device_name,optimizer_backend\", params)\n\n    elif device_names is not None:\n        metafunc.parametrize(\"device_name\", device_names)\n    elif dtype_names is not None:\n        metafunc.parametrize(\"dtype_name\", dtype_names)\n    elif optimizer_backends_names is not None:\n        metafunc.parametrize(\"optimizer_backend\", optimizer_backends_names)\n\n\ndef pytest_collection_modifyitems(config, items):\n    \"\"\"Collect test options.\"\"\"\n    if config.getoption(\"--runslow\"):\n        # --runslow given in cli: do not skip slow tests\n        return\n\n    skip_slow = pytest.mark.skip(reason=\"need --runslow option to run\")\n    for item in items:\n        if \"slow\" in item.keywords:\n            item.add_marker(skip_slow)\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options.\"\"\"\n    parser.addoption(\"--device\", action=\"store\", default=\"cpu\")\n    parser.addoption(\"--dtype\", action=\"store\", default=\"float32\")\n    parser.addoption(\"--optimizer\", action=\"store\", default=\"inductor\")\n    parser.addoption(\"--runslow\", action=\"store_true\", default=False, help=\"run slow tests\")\n\n\ndef _setup_torch_compile():\n    if hasattr(torch, \"compile\") and sys.platform == \"linux\":\n        print(\"Setting up torch compile...\")\n        torch.set_float32_matmul_precision(\"high\")\n\n        def _dummy_function(x, y):\n            return (x + y).sum()\n\n        class _dummy_module(torch.nn.Module):\n            def __init__(self):\n                super().__init__()\n\n            def forward(self, x):\n                return (x**2).sum()\n\n        torch.compile(_dummy_function)\n        torch.compile(_dummy_module())\n\n\ndef pytest_sessionstart(session):\n    \"\"\"Start pytest session.\"\"\"\n    try:\n        _setup_torch_compile()\n    except RuntimeError as ex:\n        if \"not yet supported for torch.compile\" not in str(\n            ex\n        ) and \"Dynamo is not supported on Python 3.12+\" not in str(ex):\n            raise ex\n\n    os.makedirs(WEIGHTS_CACHE_DIR, exist_ok=True)\n    torch.hub.set_dir(WEIGHTS_CACHE_DIR)\n    # For HuggingFace model caching\n    os.environ[\"HF_HOME\"] = WEIGHTS_CACHE_DIR\n\n\ndef _get_env_info() -> dict[str, dict[str, str]]:\n    if not hasattr(torch.utils, \"collect_env\"):\n        return {}\n\n    run_lmb = torch.utils.collect_env.run\n    separator = \":\"\n    br = \"\\n\"\n\n    def _get_key_value(v: str):\n        parts = v.split(separator)\n        return parts[0].strip(), parts[-1].strip()\n\n    def _get_cpu_info() -> dict[str, str]:\n        cpu_info = {}\n        cpu_str = torch.utils.collect_env.get_cpu_info(run_lmb)\n        if not cpu_str:\n            return {}\n\n        for data in cpu_str.split(br):\n            key, value = _get_key_value(data)\n            cpu_info[key] = value\n\n        return cpu_info\n\n    def _get_gpu_info() -> dict[str, str]:\n        gpu_info = {}\n        gpu_str = torch.utils.collect_env.get_gpu_info(run_lmb)\n\n        if not gpu_str:\n            return {}\n\n        for data in gpu_str.split(br):\n            key, value = _get_key_value(data)\n            gpu_info[key] = value\n\n        return gpu_info\n\n    return {\n        \"cpu\": _get_cpu_info(),\n        \"gpu\": _get_gpu_info(),\n        \"nvidia\": torch.utils.collect_env.get_nvidia_driver_version(run_lmb),\n        \"gcc\": torch.utils.collect_env.get_gcc_version(run_lmb),\n    }\n\n\ndef pytest_report_header(config):\n    \"\"\"Return report header.\"\"\"\n    try:\n        import accelerate\n\n        accelerate_info = f\"accelerate-{accelerate.__version__}\"\n    except ImportError:\n        accelerate_info = \"`accelerate` not found\"\n\n    import kornia_rs\n    import onnx\n\n    env_info = _get_env_info()\n    CACHED_WEIGTHS = os.listdir(WEIGHTS_CACHE_DIR)\n    if \"cpu\" in env_info:\n        desired_cpu_info = [\"Model name\", \"Architecture\", \"CPU(s)\", \"Thread(s) per core\", \"CPU max MHz\", \"CPU min MHz\"]\n        cpu_info = \"cpu info:\\n\" + \"\\n\".join(\n            f'\\t- {i}: {env_info[\"cpu\"][i]}' for i in desired_cpu_info if i in env_info[\"cpu\"]\n        )\n    else:\n        cpu_info = \"\"\n    gpu_info = f\"gpu info: {env_info['gpu']}\" if \"gpu\" in env_info else \"\"\n    gcc_info = f\"gcc info: {env_info['gcc']}\" if \"gcc\" in env_info else \"\"\n\n    return f\"\"\"\n{cpu_info}\n{gpu_info}\nmain deps:\n    - kornia-{kornia.__version__}\n    - torch-{torch.__version__}\n        - commit: {torch.version.git_version}\n        - cuda: {torch.version.cuda}\n        - nvidia-driver: {env_info['nvidia'] if 'nvidia' in env_info else None}\nx deps:\n    - {accelerate_info}\ndev deps:\n    - kornia_rs-{kornia_rs.__version__}\n    - onnx-{onnx.__version__}\n{gcc_info}\navailable optimizers: {TEST_OPTIMIZER_BACKEND}\nmodel weights cached: {CACHED_WEIGTHS}\n\"\"\"\n\n\n@pytest.fixture(autouse=True)\ndef add_doctest_deps(doctest_namespace):\n    \"\"\"Add dependencies for doctests.\"\"\"\n    doctest_namespace[\"np\"] = np\n    doctest_namespace[\"torch\"] = torch\n    doctest_namespace[\"kornia\"] = kornia\n\n\n# the commit hash for the data version\nsha: str = \"cb8f42bf28b9f347df6afba5558738f62a11f28a\"\nsha2: str = \"f7d8da661701424babb64850e03c5e8faec7ea62\"\nsha3: str = \"8b98f44abbe92b7a84631ed06613b08fee7dae14\"\n\n\n@pytest.fixture(scope=\"session\")\ndef data(request):\n    \"\"\"Return loaded data.\"\"\"\n    url = {\n        \"loftr_homo\": f\"https://github.com/kornia/data_test/blob/{sha}/loftr_outdoor_and_homography_data.pt?raw=true\",\n        \"loftr_fund\": f\"https://github.com/kornia/data_test/blob/{sha}/loftr_indoor_and_fundamental_data.pt?raw=true\",\n        \"adalam_idxs\": f\"https://github.com/kornia/data_test/blob/{sha2}/adalam_test.pt?raw=true\",\n        \"lightglue_idxs\": f\"https://github.com/kornia/data_test/blob/{sha2}/adalam_test.pt?raw=true\",\n        \"disk_outdoor\": f\"https://github.com/kornia/data_test/blob/{sha3}/knchurch_disk.pt?raw=true\",\n        \"dexined\": \"https://cmp.felk.cvut.cz/~mishkdmy/models/DexiNed_BIPED_10.pth\",\n    }\n    return torch.hub.load_state_dict_from_url(url[request.param], map_location=torch.device(\"cpu\"))\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "kornia",
          "type": "tree",
          "content": null
        },
        {
          "name": "path.bash.inc",
          "type": "blob",
          "size": 0.7333984375,
          "content": "# The purpose of this script is simplify running scripts inside of our\n# dev_env docker container.  It mounts the workspace and the\n# workspace/../build directory inside of the container, and executes\n# any arguments passed to the dev_env.sh\nscript_link=\"$( readlink \"$BASH_SOURCE\" )\" || script_link=\"$BASH_SOURCE\"\napparent_sdk_dir=\"${script_link%/*}\"\nif [ \"$apparent_sdk_dir\" = \"$script_link\" ]; then\n  apparent_sdk_dir=.\nfi\nsdk_dir=\"$(cd -P \"$apparent_sdk_dir\" > /dev/null && pwd -P )\"\nif [ ! -e $sdk_dir/.dev_env/bin/conda ]; then\n    $sdk_dir/setup_dev_env.sh\nfi\n\ncmd=\"source $sdk_dir/.dev_env/bin/activate $sdk_dir/.dev_env/envs/venv\"\nif [ -z $CI ]; then\n    eval $cmd\nelse\n    echo $cmd >> \"$BASH_ENV\"\nfi\n\nexport PYTHONPATH=$PYTHONPATH:$sdk_dir\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 7.34765625,
          "content": "[build-system]\nbuild-backend = \"setuptools.build_meta\"\nrequires = [\"setuptools>=61.2\"]\n\n[project]\nname = \"kornia\"\ndescription = \"Open Source Differentiable Computer Vision Library for PyTorch\"\nkeywords = [\"computer vision\", \"deep learning\", \"pytorch\"]\nlicense = { text = \"Apache-2.0\" }\nauthors = [\n  { name = \"Edgar Riba\", email = \"edgar@kornia.org\" },\n]\nrequires-python = \">=3.9\"\nclassifiers = [\n  \"Development Status :: 4 - Beta\",\n  \"Environment :: Console\",\n  \"Environment :: GPU\",\n  \"Intended Audience :: Developers\",\n  \"Intended Audience :: Education\",\n  \"Intended Audience :: Information Technology\",\n  \"Intended Audience :: Science/Research\",\n  \"License :: OSI Approved :: Apache Software License\",\n  \"Natural Language :: English\",\n  \"Operating System :: OS Independent\",\n  \"Programming Language :: Python :: 3 :: Only\",\n  \"Programming Language :: Python :: 3.9\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n  \"Programming Language :: Python :: 3.12\",\n  \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n  \"Topic :: Scientific/Engineering :: Image Processing\",\n  \"Topic :: Software Development :: Libraries\",\n]\ndynamic = [\"dependencies\", \"optional-dependencies\", \"readme\", \"version\"]\n\n[project.urls]\n\"Bug Tracker\" = \"https://github.com/kornia/kornia/issues\"\nDocumentation = \"https://kornia.readthedocs.io/en/latest\"\nDownload = \"https://github.com/kornia/kornia\"\nIssues = \"https://github.com/kornia/kornia/issues\"\nHomepage = \"https://kornia.github.io/\"\n\"Source Code\" = \"https://github.com/kornia/kornia\"\n\n[tool.setuptools]\nzip-safe = true\nlicense-files = [\"LICENSE\"]\ninclude-package-data = false\n\n[tool.setuptools.dynamic]\ndependencies = { file = [\"requirements/requirements.txt\"] }\nversion = { attr = \"kornia.__version__\" }\nreadme = { file = [\"README.md\"], content-type = \"text/markdown\" }\n\n[tool.setuptools.dynamic.optional-dependencies]\ndev = { file = \"requirements/requirements-dev.txt\" }\ndocs = { file = [\"requirements/requirements-docs.txt\"] }\nx = { file = [\"requirements/requirements-x.txt\"] }\n\n[tool.setuptools.packages.find]\nexclude = [\"docs*\", \"test*\", \"examples*\"]\nnamespaces = false\n\n[tool.setuptools.package-data]\nkornia = [\"py.typed\"]\n\n[tool.distutils.bdist_wheel]\nuniversal = true\n\n[tool.ruff]\ntarget-version = \"py39\"\nline-length = 120\n\n[tool.ruff.format]\nskip-magic-trailing-comma = false\n\n[tool.ruff.lint]\nselect = [\n  \"AIR\",   # Airflow\n  \"ASYNC\", # flake8-async\n  \"B\",    # flake8-bugbear\n  \"BLE\",   # flake8-blind-except\n  \"C4\",    # flake8-comprehensions\n  \"C90\",   # McCabe cyclomatic complexity\n  # \"CPY\",    # Copyright-related rules\n  \"DTZ\",  # flake8-datetimez\n  \"E\",    # pycodestyle\n  \"F\",    # Pyflakes\n  \"FLY\",  # flynt\n  \"I\",    # isort\n  \"ICN\",  # flake8-import-conventions\n  \"INT\",  # flake8-gettext\n  \"NPY\",  # NumPy-specific rules\n  \"PL\",   # Pylint\n  \"PYI\",  # flake8-pyi\n  \"RSE\",  # flake8-raise\n  \"RUF\",  # Ruff-specific rules\n  \"S\",    # flake8-bandit\n  \"SLOT\", # flake8-slots\n  \"T10\",  # flake8-debugger\n  \"TID\",  # flake8-tidy-imports\n  \"UP\",   # pyupgrade\n  \"W\",    # pycodestyle\n  \"YTT\",  # flake8-2020\n  # \"A\",    # flake8-builtins\n  # \"ANN\",  # flake8-annotations\n  # \"ARG\",  # flake8-unused-arguments\n  # \"COM\",  # flake8-commas\n  \"D\",    # pydocstyle\n  # \"DJ\",   # flake8-django\n  # \"EM\",   # flake8-errmsg\n  # \"ERA\",  # eradicate\n  # \"EXE\",  # flake8-executable\n  # \"FA\",   # flake8-future-annotations\n  # \"FBT\",  # flake8-boolean-trap\n  # \"FIX\",  # flake8-fixme\n  # \"G\",    # flake8-logging-format\n  # \"INP\",  # flake8-no-pep420\n  # \"ISC\",  # flake8-implicit-str-concat\n  # \"N\",    # pep8-naming\n  # \"PD\",   # pandas-vet\n  # \"PERF\", # Perflint\n  # \"PGH\",  # pygrep-hooks\n  # \"PIE\",  # flake8-pie\n  # \"PT\",   # flake8-pytest-style\n  # \"PTH\",  # flake8-use-pathlib\n  # \"Q\",    # flake8-quotes\n  # \"RET\",  # flake8-return\n  # \"SIM\",  # flake8-simplify\n  # \"SLF\",  # flake8-self\n  # \"T20\",  # flake8-print\n  # \"TCH\",  # flake8-type-checking\n  # \"TD\",   # flake8-todos\n  # \"TRY\",  # tryceratops\n]\nignore = [\n  \"PLR0915\", # Allow condition check in list comprehension\n  \"PLW2901\", # Allow overwritten values on loops\n  \"UP007\",   # Prefer Optional[], Union[] over | due to torch jit scripting\n  \"UP006\",   # Prefer List[], over list due to torch jit scripting\n  \"UP035\",   # Ignore deprecated typing because of jit scripting\n  'D100',    # Allow Undocumented public module\n  'D101',    # TODO: Undocumented public class\n  'D102',    # TODO: Undocumented public method\n  'D104',    # TODO: Undocumented public package\n  'D105',    # Allow Undocumented magic method\n  'D107',    # TODO: Undocumented public init\n ]\n\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n\n[tool.ruff.lint.isort]\nforced-separate = [\"testing\", \"tests\"]\nknown-first-party = [\"kornia\"]\nsplit-on-trailing-comma = true\n\n[tool.ruff.lint.mccabe]\nmax-complexity = 20\n\n[tool.ruff.lint.pylint]\nallow-magic-value-types = [\"bytes\", \"float\", \"int\", \"str\"]\nmax-args = 30                                              # Recommended: 5\nmax-branches = 21                                          # Recommended: 12\nmax-returns = 13                                           # Recommended: 6\nmax-statements = 64                                        # Recommended: 50\n\n[tool.ruff.lint.per-file-ignores]\n\"*/__init__.py\" = [\"F401\", \"F403\"] # Allow unused imports and star imports\n\"benchmarks/*\" = [\n  \"BLE\",\n  \"RUF005\",\n  \"RUF012\",\n  \"S101\",\n  \"S311\",\n  \"D\",\n] # allow assert, random, ignore BLE, mutable class attr\n\"docs/*\" = [\n  \"PLR0912\",\n  \"PLR0915\",\n  \"S101\",\n  \"D\",\n] # allow assert, ignore max branches and statements\n\"docs/generate_examples.py\" = [\"C901\"] # Allow too complex function\n\"kornia/__init__.py\" = [\"I001\"] # Allow unsorted imports\n\"kornia/feature/dedode/*\" = [\n  \"C408\",\n  \"F401\",\n  \"F841\",\n  \"FLY002\",\n  \"PLR1714\",\n] # allow DINOv2 things\n\"testing/*\" = [\n  \"S101\", # allow assert\n  \"D\", # Don't enforce documentation rules\n]\n\"tests/*\" = [\n  \"BLE\",\n  \"RUF005\",\n  \"RUF012\",\n  \"S101\",\n  \"S311\",\n  \"B017\", # Check for Exception since KORNIA_CHECK raises it\n  \"D\", # Don't enforce documentation rules\n] # allow assert, random, ignore BLE, mutable class attr\n\n[tool.pytest.ini_options]\naddopts = \"--color=yes\"\nmarkers = [\n  \"grad: mark a test as gradcheck test\",\n  \"jit: mark a test as torchscript test\",\n  \"nn: mark a test as module test\",\n  \"slow: mark test as slow to run\",\n]\n\n[tool.coverage.run]\nbranch = true\nsource = ['kornia/']\nomit = ['*/__main__.py', '*/setup.py']\n\n[tool.coverage.report]\nshow_missing = true\nskip_covered = true\nfail_under = 84\nexclude_lines = [\n  # Based into the covdefaults plugin config\n  # a more strict default pragma\n  '\\# pragma: no cover\\b',\n\n  # allow defensive code\n  '^\\s*raise AssertionError\\b',\n  '^\\s*raise NotImplementedError\\b',\n  '^\\s*return NotImplemented\\b',\n  '^\\s*raise$',\n\n  # typing-related code\n  '^\\s*if (False|TYPE_CHECKING):',\n  ': \\.\\.\\.(\\s*#.*)?$',\n  '^ +\\.\\.\\.$',\n\n  # ----------------------------\n  \"def __repr__\",\n  \"if __name__ == .__main__.:\",\n  \"if 0:\",\n  \"if self.debug:\",\n]\n\npartial_branches = [\n  # a more strict default pragma\n  '\\# pragma: no cover\\b',\n]\n\n[tool.mypy]\ncheck_untyped_defs = true\ndisallow_any_generics = true\ndisallow_incomplete_defs = true\ndisallow_untyped_defs = true\nfiles = [\"kornia/\"]\nignore_missing_imports = true\nno_implicit_optional = true\npretty = true\nshow_error_codes = true\nwarn_redundant_casts = true\nwarn_unused_ignores = true\n\n[[tool.mypy.overrides]]\nmodule = \"kornia.feature.dedode.transformer.*\"\nignore_errors = true\n\n[tool.pydocstyle]\nmatch = '.*\\.py'\n"
        },
        {
          "name": "readthedocs.yml",
          "type": "blob",
          "size": 0.626953125,
          "content": "# Read the Docs configuration file for Sphinx projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the OS, Python version and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\n# Build documentation in the \"docs/\" directory with Sphinx\nsphinx:\n  configuration: docs/source/conf.py\n\n# Optional but recommended, declare the Python requirements required\n# to build your documentation\n# See https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - docs\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup_dev_env.sh",
          "type": "blob",
          "size": 2.20703125,
          "content": "#!/bin/bash -ex\nscript_link=\"$( readlink \"$BASH_SOURCE\" )\" || script_link=\"$BASH_SOURCE\"\napparent_sdk_dir=\"${script_link%/*}\"\nif [ \"$apparent_sdk_dir\" == \"$script_link\" ]; then\n  apparent_sdk_dir=.\nfi\nsdk_dir=\"$( command cd -P \"$apparent_sdk_dir\" > /dev/null && pwd -P )\"\n\n# create root directory to install miniconda\ndev_env_dir=$sdk_dir/.dev_env\nmkdir -p $dev_env_dir\n\n# define miniconda paths\nconda_bin_dir=$dev_env_dir/bin\nconda_bin=$conda_bin_dir/conda\n\n# download and install miniconda\n# check the operating system: Mac or Linux\nplatform=$(uname)\nif [[ \"$platform\" == \"Darwin\" ]];\nthen\n download_link=https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh\nelse\n download_link=https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nfi\n\nif [ ! -e $dev_env_dir/miniconda.sh ]; then\n    curl -o $dev_env_dir/miniconda.sh \\\n       \t -O  \"$download_link\"\n    chmod +x $dev_env_dir/miniconda.sh\nfi\nif [ ! -e $conda_bin ]; then\n    $dev_env_dir/miniconda.sh -b -u -p $dev_env_dir\nfi\n\n# define a python version to initialise the conda environment.\n# by default we assume python 3.11\npython_version=${PYTHON_VERSION:-\"3.11\"}\npytorch_version=${PYTORCH_VERSION:-\"2.4.0\"}\npytorch_mode=${PYTORCH_MODE:-\"\"}  # use `cpuonly` for CPU or leave it in blank for GPU\ncuda_version=${CUDA_VERSION:-\"12.1\"}\n\n# configure for nightly builds\npytorch_channel=\"pytorch\"\nif [ \"$pytorch_version\" == \"nightly\" ]; then\n    pytorch_version=\"\"\n    pytorch_channel=\"pytorch-nightly\"\nfi\n\n# configure pytorch cuda version\nif [ \"$pytorch_mode\" == \"cpuonly\" ]; then\n    pytorch_cuda_version=\"cpuonly\"\nelse\n    pytorch_cuda_version=\"pytorch-cuda=$cuda_version -c nvidia\"\nfi\n\n# create an environment with the specific python version\n$conda_bin config --append channels conda-forge\n$conda_bin update -n base -c defaults conda\n$conda_bin create --name venv python=$python_version\n$conda_bin clean -ya\n\n# activate local virtual environment\nsource $conda_bin_dir/activate $dev_env_dir/envs/venv\n\n# install pytorch and torchvision\nconda install pytorch=$pytorch_version $pytorch_cuda_version -c $pytorch_channel\n\n# install testing dependencies\npip install -e .[dev,x]\n\n# install docs dependencies\npip install -e .[docs]\n\nconda deactivate  # close the `venv` environment\n"
        },
        {
          "name": "testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}