{
  "metadata": {
    "timestamp": 1736561184994,
    "page": 148,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "twintproject/twint",
      "stars": 15916,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.2802734375,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\ntweets.db\n# C extensions\n*.so\n\nconfig.ini\ntwint/storage/mysql.py\n\n# Node Dependency directories\nnode_modules/\njspm_packages/\ntests/\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n# output\n*.csv\n*.json\n*.txt\n\ntest_twint.py\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.9931640625,
          "content": "dist: bionic\nlanguage: python\npython:\n  - \"3.6\"\n  - \"3.7\"\n  - \"3.8\"\n  - \"nightly\"\nmatrix:\n  allow_failures:\n    - python: \"nightly\"\n    - python: \"3.8\"\ninstall:\n- pip install -r requirements.txt\nscript:\n- python test.py\ndeploy:\n  provider: pypi\n  user: \"codyzacharias\"\n  password:\n    secure: sWWvx50F7KJBtf8z2njc+Q31WIAHiQs4zKEiGD4/7xrshw55H5z+WnqZ9VIP83qm9yKefoRKp7WnaJeXZ3ulZSLn64ue45lqFozWMyGvelRPOKvZi9XPMqBA7+qllR/GseTHSGC3G5EGxac6UEI3irYe3mZXxfjpxNOXVti8rJ2xX8TiJM0AVKRrdDiAstOhMMkXkB7fYXMQALwEp8UoW/UbjbeqsKueXydjStaESNP/QzRFZ3/tuNu+3HMz/olniLUhUWcF/xDbJVpXuaRMUalgqe+BTbDdtUVt/s/GKtpg5GAzJyhQphiCM/huihedUIKSoI+6A8PTzuxrLhB5BMi9pcllED02v7w1enpu5L2l5cRDgQJSOpkxkA5Eese8nxKOOq0KzwDQa3JByrRor8R4yz+p5s4u2r0Rs2A9fkjQYwd/uWBSEIRF4K9WZoniiikahwXq070DMRgV7HbovKSjo5NK5F8j+psrtqPF+OHN2aVfWxbGnezrOOkmzuTHhWZVj3pPSpQU1WFWHo9fPo4I6YstR4q6XjNNjrpY3ojSlv0ThMbUem7zhHTRkRsSA2SpPfqw5E3Jf7vaiQb4M5zkBVqxuq4tXb14GJ26tGD8tel8u8b+ccpkAE9xf+QavP8UHz4PbBhqgFX5TbV/H++cdsICyoZnT35yiaDOELM=\n  on:\n    tags: true\n    python: \"3.7\"\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.2158203125,
          "content": "FROM python:3.6-buster\nLABEL maintainer=\"codyzacharias@pm.me\"\n\nWORKDIR /root\n\nRUN git clone --depth=1 https://github.com/twintproject/twint.git && \\\n\tcd /root/twint && \\\n\tpip3 install . -r requirements.txt\n\nCMD /bin/bash\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2018 Cody Zacharias\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.025390625,
          "content": "include README.md LICENSE\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.234375,
          "content": "# TWINT - Twitter Intelligence Tool\n![2](https://i.imgur.com/iaH3s7z.png)\n![3](https://i.imgur.com/hVeCrqL.png)\n\n[![PyPI](https://img.shields.io/pypi/v/twint.svg)](https://pypi.org/project/twint/) [![Build Status](https://travis-ci.org/twintproject/twint.svg?branch=master)](https://travis-ci.org/twintproject/twint) [![Python 3.6|3.7|3.8](https://img.shields.io/badge/Python-3.6%2F3.7%2F3.8-blue.svg)](https://www.python.org/download/releases/3.0/) [![GitHub license](https://img.shields.io/github/license/haccer/tweep.svg)](https://github.com/haccer/tweep/blob/master/LICENSE) [![Downloads](https://pepy.tech/badge/twint)](https://pepy.tech/project/twint) [![Downloads](https://pepy.tech/badge/twint/week)](https://pepy.tech/project/twint/week) [![Patreon](https://img.shields.io/endpoint.svg?url=https:%2F%2Fshieldsio-patreon.herokuapp.com%2Ftwintproject)](https://www.patreon.com/twintproject) ![](https://img.shields.io/twitter/follow/noneprivacy.svg?label=Follow&style=social) \n\n>No authentication. No API. No limits.\n\nTwint is an advanced Twitter scraping tool written in Python that allows for scraping Tweets from Twitter profiles **without** using Twitter's API.\n\nTwint utilizes Twitter's search operators to let you scrape Tweets from specific users, scrape Tweets relating to certain topics, hashtags & trends, or sort out *sensitive* information from Tweets like e-mail and phone numbers. I find this very useful, and you can get really creative with it too.\n\nTwint also makes special queries to Twitter allowing you to also scrape a Twitter user's followers, Tweets a user has liked, and who they follow **without** any authentication, API, Selenium, or browser emulation.\n\n## tl;dr Benefits\nSome of the benefits of using Twint vs Twitter API:\n- Can fetch almost __all__ Tweets (Twitter API limits to last 3200 Tweets only);\n- Fast initial setup;\n- Can be used anonymously and without Twitter sign up;\n- **No rate limitations**.\n\n## Limits imposed by Twitter\nTwitter limits scrolls while browsing the user timeline. This means that with `.Profile` or with `.Favorites` you will be able to get ~3200 tweets.\n\n## Requirements\n- Python 3.6;\n- aiohttp;\n- aiodns;\n- beautifulsoup4;\n- cchardet;\n- dataclasses\n- elasticsearch;\n- pysocks;\n- pandas (>=0.23.0);\n- aiohttp_socks;\n- schedule;\n- geopy;\n- fake-useragent;\n- py-googletransx.\n\n## Installing\n\n**Git:**\n```bash\ngit clone --depth=1 https://github.com/twintproject/twint.git\ncd twint\npip3 install . -r requirements.txt\n```\n\n**Pip:**\n```bash\npip3 install twint\n```\n\nor\n\n```bash\npip3 install --user --upgrade git+https://github.com/twintproject/twint.git@origin/master#egg=twint\n```\n\n**Pipenv**:\n```bash\npipenv install git+https://github.com/twintproject/twint.git#egg=twint\n```\n\n### March 2, 2021 Update\n\n**Added**: Dockerfile\n\nNoticed a lot of people are having issues installing (including me). Please use the Dockerfile temporarily while I look into them. \n\n## CLI Basic Examples and Combos\nA few simple examples to help you understand the basics:\n\n- `twint -u username` - Scrape all the Tweets of a *user* (doesn't include **retweets** but includes **replies**).\n- `twint -u username -s pineapple` - Scrape all Tweets from the *user*'s timeline containing _pineapple_.\n- `twint -s pineapple` - Collect every Tweet containing *pineapple* from everyone's Tweets.\n- `twint -u username --year 2014` - Collect Tweets that were tweeted **before** 2014.\n- `twint -u username --since \"2015-12-20 20:30:15\"` - Collect Tweets that were tweeted since 2015-12-20 20:30:15.\n- `twint -u username --since 2015-12-20` - Collect Tweets that were tweeted since 2015-12-20 00:00:00.\n- `twint -u username -o file.txt` - Scrape Tweets and save to file.txt.\n- `twint -u username -o file.csv --csv` - Scrape Tweets and save as a csv file.\n- `twint -u username --email --phone` - Show Tweets that might have phone numbers or email addresses.\n- `twint -s \"Donald Trump\" --verified` - Display Tweets by verified users that Tweeted about Donald Trump.\n- `twint -g=\"48.880048,2.385939,1km\" -o file.csv --csv` - Scrape Tweets from a radius of 1km around a place in Paris and export them to a csv file.\n- `twint -u username -es localhost:9200` - Output Tweets to Elasticsearch\n- `twint -u username -o file.json --json` - Scrape Tweets and save as a json file.\n- `twint -u username --database tweets.db` - Save Tweets to a SQLite database.\n- `twint -u username --followers` - Scrape a Twitter user's followers.\n- `twint -u username --following` - Scrape who a Twitter user follows.\n- `twint -u username --favorites` - Collect all the Tweets a user has favorited (gathers ~3200 tweet).\n- `twint -u username --following --user-full` - Collect full user information a person follows\n- `twint -u username --timeline` - Use an effective method to gather Tweets from a user's profile (Gathers ~3200 Tweets, including **retweets** & **replies**).\n- `twint -u username --retweets` - Use a quick method to gather the last 900 Tweets (that includes retweets) from a user's profile.\n- `twint -u username --resume resume_file.txt` - Resume a search starting from the last saved scroll-id.\n\nMore detail about the commands and options are located in the [wiki](https://github.com/twintproject/twint/wiki/Commands)\n\n## Module Example\n\nTwint can now be used as a module and supports custom formatting. **More details are located in the [wiki](https://github.com/twintproject/twint/wiki/Module)**\n\n```python\nimport twint\n\n# Configure\nc = twint.Config()\nc.Username = \"realDonaldTrump\"\nc.Search = \"great\"\n\n# Run\ntwint.run.Search(c)\n```\n> Output\n\n`955511208597184512 2018-01-22 18:43:19 GMT <now> pineapples are the best fruit`\n\n```python\nimport twint\n\nc = twint.Config()\n\nc.Username = \"noneprivacy\"\nc.Custom[\"tweet\"] = [\"id\"]\nc.Custom[\"user\"] = [\"bio\"]\nc.Limit = 10\nc.Store_csv = True\nc.Output = \"none\"\n\ntwint.run.Search(c)\n```\n\n## Storing Options\n- Write to file;\n- CSV;\n- JSON;\n- SQLite;\n- Elasticsearch.\n\n## Elasticsearch Setup\n\nDetails on setting up Elasticsearch with Twint is located in the [wiki](https://github.com/twintproject/twint/wiki/Elasticsearch).\n\n## Graph Visualization\n![graph](https://i.imgur.com/EEJqB8n.png)\n\n[Graph](https://github.com/twintproject/twint/wiki/Graph) details are also located in the [wiki](https://github.com/twintproject/twint/wiki/Graph).\n\nWe are developing a Twint Desktop App.\n\n![4](https://i.imgur.com/DzcfIgL.png)\n\n## FAQ\n> I tried scraping tweets from a user, I know that they exist but I'm not getting them\n\nTwitter can shadow-ban accounts, which means that their tweets will not be available via search. To solve this, pass `--profile-full` if you are using Twint via CLI or, if are using Twint as module, add `config.Profile_full = True`. Please note that this process will be quite slow.\n## More Examples\n\n#### Followers/Following\n\n> To get only follower usernames/following usernames\n\n`twint -u username --followers`\n\n`twint -u username --following`\n\n> To get user info of followers/following users\n\n`twint -u username --followers --user-full`\n\n`twint -u username --following --user-full`\n\n#### userlist\n\n> To get only user info of user\n\n`twint -u username --user-full`\n\n> To get user info of users from a userlist\n\n`twint --userlist inputlist --user-full`\n\n\n#### tweet translation (experimental)\n\n> To get 100 english tweets and translate them to italian\n\n`twint -u noneprivacy --csv --output none.csv --lang en --translate --translate-dest it --limit 100`\n\nor\n\n```python\nimport twint\n\nc = twint.Config()\nc.Username = \"noneprivacy\"\nc.Limit = 100\nc.Store_csv = True\nc.Output = \"none.csv\"\nc.Lang = \"en\"\nc.Translate = True\nc.TranslateDest = \"it\"\ntwint.run.Search(c)\n```\n\nNotes:\n- [Google translate has some quotas](https://cloud.google.com/translate/quotas)\n\n## Featured Blog Posts:\n- [How to use Twint as an OSINT tool](https://pielco11.ovh/posts/twint-osint/)\n- [Basic tutorial made by Null Byte](https://null-byte.wonderhowto.com/how-to/mine-twitter-for-targeted-information-with-twint-0193853/)\n- [Analyzing Tweets with NLP in minutes with Spark, Optimus and Twint](https://towardsdatascience.com/analyzing-tweets-with-nlp-in-minutes-with-spark-optimus-and-twint-a0c96084995f)\n- [Loading tweets into Kafka and Neo4j](https://markhneedham.com/blog/2019/05/29/loading-tweets-twint-kafka-neo4j/)\n\n## Contact\n\nIf you have any question, want to join in discussions, or need extra help, you are welcome to join our Twint focused channel at [OSINT team](https://osint.team)\n"
        },
        {
          "name": "automate.py",
          "type": "blob",
          "size": 2.017578125,
          "content": "import twint\nimport schedule\nimport time\n\n# you can change the name of each \"job\" after \"def\" if you'd like.\ndef jobone():\n\tprint (\"Fetching Tweets\")\n\tc = twint.Config()\n\t# choose username (optional)\n\tc.Username = \"insert username here\"\n\t# choose search term (optional)\n\tc.Search = \"insert search term here\"\n\t# choose beginning time (narrow results)\n\tc.Since = \"2018-01-01\"\n\t# set limit on total tweets\n\tc.Limit = 1000\n\t# no idea, but makes the csv format properly\n\tc.Store_csv = True\n\t# format of the csv\n\tc.Custom = [\"date\", \"time\", \"username\", \"tweet\", \"link\", \"likes\", \"retweets\", \"replies\", \"mentions\", \"hashtags\"]\n\t# change the name of the csv file\n\tc.Output = \"filename.csv\"\n\ttwint.run.Search(c)\n\ndef jobtwo():\n\tprint (\"Fetching Tweets\")\n\tc = twint.Config()\n\t# choose username (optional)\n\tc.Username = \"insert username here\"\n\t# choose search term (optional)\n\tc.Search = \"insert search term here\"\n\t# choose beginning time (narrow results)\n\tc.Since = \"2018-01-01\"\n\t# set limit on total tweets\n\tc.Limit = 1000\n\t# no idea, but makes the csv format properly\n\tc.Store_csv = True\n\t# format of the csv\n\tc.Custom = [\"date\", \"time\", \"username\", \"tweet\", \"link\", \"likes\", \"retweets\", \"replies\", \"mentions\", \"hashtags\"]\n\t# change the name of the csv file\n\tc.Output = \"filename2.csv\"\n\ttwint.run.Search(c)\n\n# run once when you start the program\n\njobone()\njobtwo()\n\n# run every minute(s), hour, day at, day of the week, day of the week and time. Use \"#\" to block out which ones you don't want to use.  Remove it to active. Also, replace \"jobone\" and \"jobtwo\" with your new function names (if applicable)\n\n# schedule.every(1).minutes.do(jobone)\nschedule.every().hour.do(jobone)\n# schedule.every().day.at(\"10:30\").do(jobone)\n# schedule.every().monday.do(jobone)\n# schedule.every().wednesday.at(\"13:15\").do(jobone)\n\n# schedule.every(1).minutes.do(jobtwo)\nschedule.every().hour.do(jobtwo)\n# schedule.every().day.at(\"10:30\").do(jobtwo)\n# schedule.every().monday.do(jobtwo)\n# schedule.every().wednesday.at(\"13:15\").do(jobtwo)\n\nwhile True:\n  schedule.run_pending()\n  time.sleep(1)\n"
        },
        {
          "name": "elasticsearch",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1484375,
          "content": "aiohttp\naiodns\nbeautifulsoup4\ncchardet\ndataclasses\nelasticsearch\npysocks\npandas>=0.23.0\naiohttp_socks<=0.4.1\nschedule\ngeopy\nfake-useragent\ngoogletransx\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.8076171875,
          "content": "#!/usr/bin/python3\nfrom setuptools import setup\nimport io\nimport os\n\n# Package meta-data\nNAME = 'twint'\nDESCRIPTION = 'An advanced Twitter scraping & OSINT tool.'\nURL = 'https://github.com/twintproject/twint'\nEMAIL = 'codyzacharias@pm.me'\nAUTHOR = 'Cody Zacharias'\nREQUIRES_PYTHON = '>=3.6.0'\nVERSION = None\n\n# Packages required\nREQUIRED = [\n    'aiohttp', 'aiodns', 'beautifulsoup4', 'cchardet', 'dataclasses',\n    'elasticsearch', 'pysocks', 'pandas', 'aiohttp_socks',\n    'schedule', 'geopy', 'fake-useragent', 'googletransx'\n]\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nwith io.open(os.path.join(here, 'README.md'), encoding='utf-8') as f:\n    long_description = '\\n' + f.read()\n\n# Load the package's __version__.py\nabout = {}\nif not VERSION:\n    with open(os.path.join(here, NAME, '__version__.py')) as f:\n        exec(f.read(), about)\nelse:\n    about['__version__'] = VERSION\n\nsetup(\n    name=NAME,\n    version=about['__version__'],\n    description=DESCRIPTION,\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=AUTHOR,\n    author_email=EMAIL,\n    python_requires=REQUIRES_PYTHON,\n    url=URL,\n    packages=['twint', 'twint.storage'],\n    entry_points={\n        'console_scripts': [\n            'twint = twint.cli:run_as_command',\n        ],\n    },\n    install_requires=REQUIRED,\n    dependency_links=[\n        'git+https://github.com/x0rzkov/py-googletrans#egg=googletrans'\n    ],\n    license='MIT',\n    classifiers=[\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: Implementation :: CPython',\n    ],\n)\n"
        },
        {
          "name": "test.py",
          "type": "blob",
          "size": 1.9013671875,
          "content": "import twint\nimport os\n\n'''\nTest.py - Testing TWINT to make sure everything works.\n'''\n\n\ndef test_reg(c, run):\n    print(\"[+] Beginning vanilla test in {}\".format(str(run)))\n    run(c)\n\n\ndef test_db(c, run):\n    print(\"[+] Beginning DB test in {}\".format(str(run)))\n    c.Database = \"test_twint.db\"\n    run(c)\n\n\ndef custom(c, run, _type):\n    print(\"[+] Beginning custom {} test in {}\".format(_type, str(run)))\n    c.Custom['tweet'] = [\"id\", \"username\"]\n    c.Custom['user'] = [\"id\", \"username\"]\n    run(c)\n\n\ndef test_json(c, run):\n    c.Store_json = True\n    c.Output = \"test_twint.json\"\n    custom(c, run, \"JSON\")\n    print(\"[+] Beginning JSON test in {}\".format(str(run)))\n    run(c)\n\n\ndef test_csv(c, run):\n    c.Store_csv = True\n    c.Output = \"test_twint.csv\"\n    custom(c, run, \"CSV\")\n    print(\"[+] Beginning CSV test in {}\".format(str(run)))\n    run(c)\n\n\ndef main():\n    c = twint.Config()\n    c.Username = \"verified\"\n    c.Limit = 20\n    c.Store_object = True\n\n    # Separate objects are necessary.\n\n    f = twint.Config()\n    f.Username = \"verified\"\n    f.Limit = 20\n    f.Store_object = True\n    f.User_full = True\n\n    runs = [\n        twint.run.Profile,  # this doesn't\n        twint.run.Search,  # this works\n        twint.run.Following,\n        twint.run.Followers,\n        twint.run.Favorites,\n    ]\n\n    tests = [test_reg, test_json, test_csv, test_db]\n\n    # Something breaks if we don't split these up\n\n    for run in runs[:3]:\n        if run == twint.run.Search:\n            c.Since = \"2012-1-1 20:30:22\"\n            c.Until = \"2017-1-1\"\n        else:\n            c.Since = \"\"\n            c.Until = \"\"\n\n        for test in tests:\n            test(c, run)\n\n    for run in runs[3:]:\n        for test in tests:\n            test(f, run)\n\n    files = [\"test_twint.db\", \"test_twint.json\", \"test_twint.csv\"]\n    for _file in files:\n        os.remove(_file)\n\n    print(\"[+] Testing complete!\")\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "twint",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}