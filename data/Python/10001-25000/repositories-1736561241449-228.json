{
  "metadata": {
    "timestamp": 1736561241449,
    "page": 228,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dmlc/dgl",
      "stars": 13643,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 6.1298828125,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  Google\nAccessModifierOffset: -1\nAlignAfterOpenBracket: AlwaysBreak\nAlignArrayOfStructures: None\nAlignConsecutiveAssignments:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  PadOperators:    true\nAlignConsecutiveBitFields:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  PadOperators:    false\nAlignConsecutiveDeclarations:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  PadOperators:    false\nAlignConsecutiveMacros:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  PadOperators:    false\nAlignEscapedNewlines: Left\nAlignOperands:   Align\nAllowAllArgumentsOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortEnumsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: WithoutElse\nAllowShortLambdasOnASingleLine: All\nAllowShortLoopsOnASingleLine: true\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: Yes\nAttributeMacros:\n  - __capability\nBinPackArguments: true\nBinPackParameters: true\nBitFieldColonSpacing: Both\nBraceWrapping:\n  AfterCaseLabel:  false\n  AfterClass:      false\n  AfterControlStatement: Never\n  AfterEnum:       false\n  AfterExternBlock: false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  BeforeLambdaBody: false\n  BeforeWhile:     false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakAfterJavaFieldAnnotations: false\nBreakBeforeBinaryOperators: None\nBreakBeforeConceptDeclarations: Always\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializers: BeforeColon\nBreakInheritanceList: BeforeColon\nBreakStringLiterals: true\nColumnLimit:     80\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: true\nDisableFormat:   false\nEmptyLineAfterAccessModifier: Never\nEmptyLineBeforeAccessModifier: LogicalBlock\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIfMacros:\n  - KJ_IF_MAYBE\nIncludeBlocks:   Regroup\nIncludeCategories:\n  - Regex:           '^<ext/.*\\.h>'\n    Priority:        2\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '^<.*\\.h>'\n    Priority:        1\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '^<.*'\n    Priority:        2\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '.*'\n    Priority:        3\n    SortPriority:    0\n    CaseSensitive:   false\nIncludeIsMainRegex: '([-_](test|unittest))?$'\nIncludeIsMainSourceRegex: ''\nIndentAccessModifiers: false\nIndentCaseBlocks: false\nIndentCaseLabels: true\nIndentExternBlock: AfterExternBlock\nIndentGotoLabels: true\nIndentPPDirectives: None\nIndentRequiresClause: true\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nInsertBraces:    false\nInsertTrailingCommas: None\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nLambdaBodyIndentation: Signature\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Never\nObjCBlockIndentWidth: 2\nObjCBreakBeforeNestedBlockParam: true\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPackConstructorInitializers: NextLine\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakOpenParenthesis: 0\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyIndentedWhitespace: 0\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nPPIndentWidth:   -1\nQualifierAlignment: Leave\nRawStringFormats:\n  - Language:        Cpp\n    Delimiters:\n      - cc\n      - CC\n      - cpp\n      - Cpp\n      - CPP\n      - 'c++'\n      - 'C++'\n    CanonicalDelimiter: ''\n    BasedOnStyle:    google\n  - Language:        TextProto\n    Delimiters:\n      - pb\n      - PB\n      - proto\n      - PROTO\n    EnclosingFunctions:\n      - EqualsProto\n      - EquivToProto\n      - PARSE_PARTIAL_TEXT_PROTO\n      - PARSE_TEST_PROTO\n      - PARSE_TEXT_PROTO\n      - ParseTextOrDie\n      - ParseTextProtoOrDie\n      - ParseTestProto\n      - ParsePartialTestProto\n    CanonicalDelimiter: pb\n    BasedOnStyle:    google\nReferenceAlignment: Pointer\nReflowComments:  true\nRemoveBracesLLVM: false\nRequiresClausePosition: OwnLine\nSeparateDefinitionBlocks: Leave\nShortNamespaceLines: 1\nSortIncludes:    CaseSensitive\nSortJavaStaticImport: Before\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceAroundPointerQualifiers: Default\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeParensOptions:\n  AfterControlStatements: true\n  AfterForeachMacros: true\n  AfterFunctionDefinitionName: false\n  AfterFunctionDeclarationName: false\n  AfterIfMacros:   true\n  AfterOverloadedOperator: false\n  AfterRequiresInClause: false\n  AfterRequiresInExpression: false\n  BeforeNonEmptyParentheses: false\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceBeforeSquareBrackets: false\nSpaceInEmptyBlock: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  Never\nSpacesInContainerLiterals: true\nSpacesInLineCommentPrefix:\n  Minimum:         1\n  Maximum:         -1\nSpacesInSquareBrackets: false\nStandard:        Auto\nStatementAttributeLikeMacros:\n  - Q_EMIT\nStatementMacros:\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTabWidth:        8\nUseTab:          Never\nWhitespaceSensitiveMacros:\n  - BOOST_PP_STRINGIZE\n  - CF_SWIFT_NAME\n  - NS_SWIFT_NAME\n  - PP_STRINGIZE\n  - STRINGIZE\n...\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.447265625,
          "content": "# IDE\n.idea\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndataset/\ndatasets/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# Whitelist some distribution / package non-related directories\n!tests/dist\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\nexamples/pytorch/data/ind.pubmed.y\nexamples/pytorch/data/ind.pubmed.x\nexamples/pytorch/data/ind.pubmed.ty\nexamples/pytorch/data/ind.pubmed.tx\nexamples/pytorch/data/ind.pubmed.test.index\nexamples/pytorch/data/ind.pubmed.graph\nexamples/pytorch/data/ind.pubmed.ally\nexamples/pytorch/data/ind.pubmed.allx\nexamples/pytorch/data/ind.cora.y\nexamples/pytorch/data/ind.cora.x\nexamples/pytorch/data/ind.cora.ty\nexamples/pytorch/data/ind.cora.tx\nexamples/pytorch/data/ind.cora.test.index\nexamples/pytorch/data/ind.cora.graph\nexamples/pytorch/data/ind.cora.ally\nexamples/pytorch/data/ind.cora.allx\nexamples/pytorch/data/ind.citeseer.y\nexamples/pytorch/data/ind.citeseer.x\nexamples/pytorch/data/ind.citeseer.ty\nexamples/pytorch/data/ind.citeseer.tx\nexamples/pytorch/data/ind.citeseer.test.index\nexamples/pytorch/data/ind.citeseer.graph\nexamples/pytorch/data/ind.citeseer.ally\nexamples/pytorch/data/ind.citeseer.allx\nexamples/pytorch/.DS_Store\nexamples/.DS_Store\nexamples/pytorch/generative_graph/*.p\n.DS_Store\n\n# data directory\n_download\n\n# CTags & CScope\ntags\ncscope.*\n\n# Vim\n*.swp\n*.swo\n*.un~\n*~\n\n# parameters\n*.params\n\n# vscode\n.clangd\n.vscode\n\n# asv\n.asv\n\n.ycm_extra_conf.py\n**.png\n\n# model file\n*.pth\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.3681640625,
          "content": "[submodule \"third_party/dmlc-core\"]\n\tpath = third_party/dmlc-core\n\turl = https://github.com/dmlc/dmlc-core.git\n[submodule \"third_party/dlpack\"]\n\tpath = third_party/dlpack\n\turl = https://github.com/dmlc/dlpack.git\n[submodule \"third_party/googletest\"]\n\tpath = third_party/googletest\n\turl = https://github.com/google/googletest.git\n[submodule \"third_party/METIS\"]\n\tpath = third_party/METIS\n\turl = https://github.com/KarypisLab/METIS.git\n[submodule \"third_party/nanoflann\"]\n\tpath = third_party/nanoflann\n\turl = https://github.com/jlblancoc/nanoflann\n[submodule \"third_party/libxsmm\"]\n\tpath = third_party/libxsmm\n\turl = https://github.com/hfp/libxsmm.git\n[submodule \"third_party/pcg\"]\n\tpath = third_party/pcg\n\turl = https://github.com/imneme/pcg-cpp.git\n[submodule \"third_party/cccl\"]\n\tpath = third_party/cccl\n\turl = https://github.com/NVIDIA/cccl.git\n[submodule \"third_party/liburing\"]\n\tpath = third_party/liburing\n\turl = https://github.com/axboe/liburing.git\n[submodule \"third_party/cuco\"]\n\tpath = third_party/cuco\n\turl = https://github.com/NVIDIA/cuCollections.git\n[submodule \"third_party/GKlib\"]\n\tpath = third_party/GKlib\n\turl = https://github.com/KarypisLab/GKlib.git\n[submodule \"third_party/taskflow\"]\n\tpath = third_party/taskflow\n\turl = https://github.com/taskflow/taskflow.git\n[submodule \"third_party/tsl_robin_map\"]\n\tpath = third_party/tsl_robin_map\n\turl = https://github.com/Tessil/robin-map.git\n"
        },
        {
          "name": ".lintrunner.toml",
          "type": "blob",
          "size": 0.9052734375,
          "content": "# Black + usort\n[[linter]]\ncode = 'UFMT'\ninclude_patterns = [\n    '**/*.py',\n]\ncommand = [\n    'python3',\n    'tests/lint/ufmt_linter.py',\n    '--',\n    '@{{PATHSFILE}}'\n]\nexclude_patterns = [\n    '.github/*',\n    'build/*',\n    'cmake/*',\n    'conda/*',\n    'docker/*',\n    'third_party/*',\n]\ninit_command = [\n    'python3',\n    'tests/lint/pip_init.py',\n    '--dry-run={{DRYRUN}}',\n    'black==22.10.0',\n    'ufmt==2.0.1',\n    'usort==1.0.5',\n]\nis_formatter = true\n\n[[linter]]\ncode = 'CLANGFORMAT'\ninclude_patterns = [\n    '**/*.h',\n    '**/*.c',\n    '**/*.cc',\n    '**/*.cpp',\n    '**/*.cuh',\n    '**/*.cu',\n]\nexclude_patterns = [\n    'third_party/**',\n]\ninit_command = [\n    'python3',\n    'tests/lint/pip_init.py',\n    '--dry-run={{DRYRUN}}',\n    'clang-format==15.0.4',\n]\ncommand = [\n    'python3',\n    'tests/lint/clangformat_linter.py',\n    '--binary=clang-format',\n    '--',\n    '@{{PATHSFILE}}'\n]\nis_formatter = true\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 18.8583984375,
          "content": "cmake_minimum_required(VERSION 3.18)\n########################################\n# Borrowed and adapted from TVM project\n########################################\nproject(dgl C CXX)\nmessage(STATUS \"Start configuring project ${PROJECT_NAME}\")\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# cmake utils\ninclude(cmake/util/Util.cmake)\ninclude(cmake/util/MshadowUtil.cmake)\ninclude(cmake/util/FindCUDA.cmake)\n\n# Options for building DGL.\n# NOTE: Please avoid editing this file to change build type. Instead, using\n# bash script/build_dgl.sh -e -t release to overwrite the value.\ndgl_option(BUILD_TYPE \"Type of the build: dev, dogfood or release\" \"dev\")\nmessage(STATUS \"Build for ${BUILD_TYPE}\")\n\ndgl_option(USE_CUDA \"Build with CUDA\" OFF)\ndgl_option(TORCH_PYTHON_INTERPS \"Python interpreter for building sub-components\" python3)\n\n# Conda build related options.\ndgl_option(EXTERNAL_DLPACK_PATH \"Path to external dlpack\" OFF)\ndgl_option(EXTERNAL_DMLC_PATH \"Path to external dmlc-core\" OFF)\ndgl_option(EXTERNAL_DMLC_LIB_PATH \"Path to external dmlc-core library\" OFF)\ndgl_option(EXTERNAL_PHMAP_PATH \"Path to external parallel-hashmap\" OFF)\ndgl_option(EXTERNAL_NANOFLANN_PATH \"Path to use external nanoflann\" OFF)\ndgl_option(EXTERNAL_METIS_PATH \"Path to external metis\" OFF)\ndgl_option(EXTERNAL_METIS_LIB_PATH \"Path to external metis library\" OFF)\ndgl_option(EXTERNAL_GKLIB_PATH \"Path to external gklib\" OFF)\n\n# Options for building DGL features: \"none,\" \"dev,\" \"dogfood,\" \"release,\" and\n# \"all.\"\n#    \"none\"  - The feature is OFF for all build types. This is used when\n#              disabling a feature.\n#    \"dev\"   - The feature is ON for dev build. The default build from source\n#              and the build for unit tests are using this build type.\n#  \"dogfood\" - The major function of this feature is done. The regression and\n#              benchmark framework are using this build type.\n#  \"release\" - The feature will be build for release.\n#    \"all\"   - The feature is ON for all build types. Equivalent to set [\"dev\"\n#              \"dogfood\" \"release\"].\n# NOTE: Please avoid editing this file to change feature options for a local\n# build. Instead, using bash script/build_dgl.sh -e '-DFEATURE_NAME=ON/OFF' to\n# overwrite the value.\ndgl_feature_option(\n    BUILD_SPARSE\n    \"Build DGL sparse library\"\n    \"all\"\n)\ndgl_feature_option(\n    BUILD_TORCH\n    \"Build the PyTorch plugin\"\n    \"all\"\n)\ndgl_feature_option(\n    USE_EPOLL\n    \"Build with epoll for socket communicator\"\n    \"all\"\n)\ndgl_feature_option(\n    USE_LIBXSMM\n    \"Build with LIBXSMM library optimization\"\n    \"all\"\n)\ndgl_feature_option(\n    USE_OPENMP\n    \"Build with OpenMP\"\n    \"all\"\n)\n\ndgl_feature_option(\n    BUILD_GRAPHBOLT\n    \"Build Graphbolt library\"\n    \"all\"\n)\n\ndgl_feature_option(\n    LIBCXX_ENABLE_PARALLEL_ALGORITHMS\n    \"Enable the parallel algorithms library. This requires the PSTL to be available.\"\n    \"none\"\n)\ndgl_feature_option(\n    REBUILD_LIBXSMM\n    \"Clean LIBXSMM build cache at every build\"\n    \"none\"\n)\ndgl_feature_option(\n    USE_HDFS\n    \"Build with HDFS support\"\n    \"none\"\n) # Set env HADOOP_HDFS_HOME if needed\ndgl_feature_option(\n    USE_S3\n    \"Build with S3 support\"\n    \"none\"\n)\n\n# Only build C++ tests for unit testing purposes in dev build.\ndgl_feature_option(\n    BUILD_CPP_TEST\n    \"Build cpp unittest executables\"\n    \"dev\"\n)\n\nif (EXTERNAL_DLPACK_PATH OR EXTERNAL_DMLC_PATH OR EXTERNAL_NANOFLANN_PATH OR EXTERNAL_NANOFLANN_PATH OR EXTERNAL_METIS_PATH OR EXTERNAL_GKLIB_PATH)\n  message(STATUS \"Using at least one external library\")\n  set(USE_EXTERNAL_LIBS ON)\n  \n  if (BUILD_CPP_TEST)\n    message(FATAL_ERROR \"Cannot build cpp unittests with external libraries\")\n  endif(BUILD_CPP_TEST)\nendif()\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules)\n\n# Set optimization options for different build types.\nif (${BUILD_TYPE} STREQUAL \"dev\")\n  if (MSVC)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /Od\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /Od\")\n  else()\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -O0 -g3 -ggdb\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O0 -g3 -ggdb\")\n  endif()\nelse()\n  if (MSVC)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /O2 /DNDEBUG\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /O2 /DNDEBUG\")\n  else()\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -O2 -DNDEBUG\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O2 -DNDEBUG\")\n  endif()\nendif()\n\nif(USE_CUDA)\n  message(STATUS \"Build with CUDA support\")\n  project(dgl C CXX)\n  include(cmake/modules/CUDA.cmake)\n  message(STATUS \"Use external CCCL library for a consistent API and performance.\")\n  cuda_include_directories(BEFORE \"${CMAKE_SOURCE_DIR}/third_party/cccl/thrust\")\n  cuda_include_directories(BEFORE \"${CMAKE_SOURCE_DIR}/third_party/cccl/cub\")\n  cuda_include_directories(BEFORE \"${CMAKE_SOURCE_DIR}/third_party/cccl/libcudacxx/include\")\nendif(USE_CUDA)\n\n# initial variables\nif(NOT MSVC)\nset(DGL_LINKER_LIBS \"dl\")\nendif(NOT MSVC)\n\nif(MSVC OR CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\nset(DGL_RUNTIME_LINKER_LIBS \"\")\nelse(MSVC OR CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\nset(DGL_RUNTIME_LINKER_LIBS \"rt\")\nendif(MSVC OR CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n\n# Generic compilation options\nif(MSVC)\n  add_definitions(-DWIN32_LEAN_AND_MEAN)\n  add_definitions(-D_CRT_SECURE_NO_WARNINGS)\n  add_definitions(-D_SCL_SECURE_NO_WARNINGS)\n  add_definitions(-DNOMINMAX)\n  set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS 1)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /EHsc\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MP\")\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /bigobj\")\n  if(USE_MSVC_MT)\n    foreach(flag_var\n        CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE\n        CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)\n      if(${flag_var} MATCHES \"/MD\")\n        string(REGEX REPLACE \"/MD\" \"/MT\" ${flag_var} \"${${flag_var}}\")\n      endif(${flag_var} MATCHES \"/MD\")\n    endforeach(flag_var)\n  endif()\nelse(MSVC)\n  include(CheckCXXCompilerFlag)\n  set(CMAKE_C_FLAGS \"-Wall -fPIC ${CMAKE_C_FLAGS}\")\n  set(CMAKE_CXX_FLAGS \"-Wall -fPIC ${CMAKE_CXX_FLAGS}\")\n  if(NOT APPLE)\n    set(CMAKE_SHARED_LINKER_FLAGS \"-Wl,--warn-common ${CMAKE_SHARED_LINKER_FLAGS}\")\n  endif(NOT APPLE)\nendif(MSVC)\n\nif(NOT CMAKE_SYSTEM_PROCESSOR MATCHES \"(x86)|(X86)|(amd64)|(AMD64)\")\n  message(STATUS \"Disabling LIBXSMM on ${CMAKE_SYSTEM_PROCESSOR}.\")\n  set(USE_LIBXSMM OFF)\nendif()\n\n# Source file lists\nfile(GLOB DGL_SRC\n  src/*.cc\n  src/array/*.cc\n  src/array/cpu/*.cc\n  src/random/*.cc\n  src/random/cpu/*.cc\n  src/runtime/*.cc\n  src/geometry/*.cc\n  src/geometry/cpu/*.cc\n  src/partition/*.cc\n)\n\nfile(GLOB_RECURSE DGL_SRC_1\n  src/api/*.cc\n  src/graph/*.cc\n  src/scheduler/*.cc\n)\n\nlist(APPEND DGL_SRC ${DGL_SRC_1})\n\nif (NOT MSVC)\n  file(GLOB_RECURSE DGL_RPC_SRC src/rpc/*.cc)\nelse()\n  file(GLOB_RECURSE DGL_RPC_SRC src/rpc/network/*.cc)\nendif()\nlist(APPEND DGL_SRC ${DGL_RPC_SRC})\n\nif(USE_OPENMP)\n  find_package(OpenMP REQUIRED)\n  list(APPEND DGL_LINKER_LIBS OpenMP::OpenMP_CXX)\n  message(STATUS \"Build with OpenMP.\")\nendif(USE_OPENMP)\n\n# Configure cuda\nif(USE_CUDA)\n  file(GLOB_RECURSE DGL_CUDA_SRC\n    src/array/cuda/*.cc\n    src/array/cuda/*.cu\n    src/array/cuda/uvm/*.cc\n    src/array/cuda/uvm/*.cu\n    src/kernel/cuda/*.cc\n    src/kernel/cuda/*.cu\n    src/partition/cuda/*.cu\n    src/runtime/cuda/*.cc\n    src/runtime/cuda/*.cu\n    src/geometry/cuda/*.cu\n    src/graph/transform/cuda/*.cu\n    src/graph/sampling/randomwalks/*.cu\n  )\n  list(APPEND DGL_SRC ${DGL_CUDA_SRC})\n  dgl_config_cuda(DGL_LINKER_LIBS)\n  cuda_add_library(dgl SHARED ${DGL_SRC})\nelse(USE_CUDA)\n  add_library(dgl SHARED ${DGL_SRC})\nendif(USE_CUDA)\n\nif ((NOT MSVC) AND USE_EPOLL)\n  INCLUDE(CheckIncludeFile)\n  check_include_file(\"sys/epoll.h\" EPOLL_AVAILABLE)\n  if (EPOLL_AVAILABLE)\n    target_compile_definitions(dgl PRIVATE USE_EPOLL)\n  else()\n    message(WARNING \"EPOLL is not available on this platform...\")\n  endif()\nendif ()\n\n# include directories\ntarget_include_directories(dgl PRIVATE \"include\")\n# check for conda includes\nif(\"$ENV{CONDA_BUILD}\" STREQUAL \"1\")\n  set(in_conda_build TRUE)\n  message(STATUS \"Conda build environment detected\")\nelseif(DEFINED ENV{CONDA_PREFIX})\n  set(in_conda_prefix TRUE)\n  message(STATUS \"Conda environment detected: $ENV{CONDA_PREFIX}\")\nendif()\n\nif (USE_CONDA_INCLUDES)\n  if(in_conda_build)\n    message(STATUS \"Using Conda build environment includes: $ENV{PREFIX}\")\n    target_include_directories(dgl PRIVATE \"$ENV{PREFIX}/include\" \"$ENV{BUILD_PREFIX}/include\")\n  elseif(in_conda_prefix)\n    message(STATUS \"Using Conda environment includes: $ENV{CONDA_PREFIX}\")\n    target_include_directories(dgl PRIVATE \"$ENV{CONDA_PREFIX}/include\")\n  else()\n    message(FATAL_ERROR \"Conda environment not detected\")\n  endif()\nendif()\n\nif(EXTERNAL_DLPACK_PATH)\n  message(STATUS \"looking for dlpack headers in ${EXTERNAL_DLPACK_PATH}\")\n  include_directories(SYSTEM ${EXTERNAL_DLPACK_PATH})\nelse(EXTERNAL_DLPACK_PATH)\n  target_include_directories(dgl PRIVATE \"third_party/dlpack/include\")\nendif(EXTERNAL_DLPACK_PATH)\n\nif(EXTERNAL_DMLC_PATH)\n  if (USE_HDFS)\n    message(FATAL_ERROR \"Cannot use HDFS and external dmlc-core at the same time\")\n  endif()\n  message(STATUS \"looking for dmlc headers in ${EXTERNAL_DMLC_PATH}\")\n  include_directories(SYSTEM ${EXTERNAL_DMLC_PATH})\n  \n  if (NOT EXTERNAL_DMLC_LIB_PATH)\n    message(FATAL_ERROR \"EXTERNAL_DMLC_LIB_PATH must be set if EXTERNAL_DMLC_PATH is set\")\n  endif()\n  message(STATUS \"looking for dmlc library in ${EXTERNAL_DMLC_LIB_PATH}\")\n  find_package(dmlc\n    REQUIRED\n    HINTS ${EXTERNAL_DMLC_LIB_PATH}\n  )\n  if(NOT dmlc_FOUND)\n      message(FATAL_ERROR \"Failed to find DMLC library\")\n  endif()\n  list(APPEND DGL_LINKER_LIBS dmlc::dmlc)\n\nelse(EXTERNAL_DMLC_PATH)\n  target_include_directories(dgl PRIVATE \"third_party/dmlc-core/include\")\n  # For serialization\n  if (USE_HDFS)\n    option(DMLC_HDFS_SHARED \"dgl has to build with dynamic hdfs library\" ON)\n  endif()\n  add_subdirectory(\"third_party/dmlc-core\")\n  list(APPEND DGL_LINKER_LIBS dmlc)\n  set(GOOGLE_TEST 0) # Turn off dmlc-core test\nendif(EXTERNAL_DMLC_PATH)\n\ntarget_include_directories(dgl PRIVATE \"tensoradapter/include\")\ntarget_include_directories(dgl PRIVATE \"third_party/pcg/include\")\ntarget_include_directories(dgl PRIVATE \"third_party/tsl_robin_map/include\")\n\nif(EXTERNAL_NANOFLANN_PATH)\n  include_directories(SYSTEM ${EXTERNAL_NANOFLANN_PATH})\nelse(EXTERNAL_NANOFLANN_PATH)\n  target_include_directories(dgl PRIVATE \"third_party/nanoflann/include\")\nendif(EXTERNAL_NANOFLANN_PATH)\n\nif (USE_LIBXSMM)\n  target_compile_definitions(dgl PRIVATE USE_LIBXSMM DGL_CPU_LLC_SIZE=40000000 __BLAS=0)\n  target_include_directories(dgl PRIVATE \"third_party/libxsmm/include\")\n  message(STATUS \"Build with LIBXSMM optimization.\")\nendif()\n\n# To compile METIS correct for DGL.\nadd_compile_definitions(IDXTYPEWIDTH=64 REALTYPEWIDTH=32)\nif (EXTERNAL_METIS_PATH)\n  # To compile METIS correct for DGL.\n  if(MSVC)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /DIDXTYPEWIDTH=64 /DREALTYPEWIDTH=32\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /DIDXTYPEWIDTH=64 /DREALTYPEWIDTH=32\")\n  else(MSVC)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -DIDXTYPEWIDTH=64 -DREALTYPEWIDTH=32\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DIDXTYPEWIDTH=64 -DREALTYPEWIDTH=32\")\n  endif(MSVC)\n  find_package(METIS REQUIRED)\n  message(STATUS \"Found METIS library\")\n  target_include_directories(dgl SYSTEM PUBLIC ${METIS_INCLUDE_DIR})\n  list(APPEND DGL_LINKER_LIBS ${METIS_LIBRARIES})\nelse(EXTERNAL_METIS_PATH)\n  target_include_directories(dgl PRIVATE \"third_party/METIS/include\")\n  # Compile METIS\n  if(NOT MSVC)\n    set(GKLIB_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/third_party/GKlib\")\n    include(${GKLIB_PATH}/GKlibSystem.cmake)\n    include_directories(${GKLIB_PATH})\n    add_library(GKlib ${GKlib_sources})\n    include_directories(\"third_party/METIS/include/\")\n    add_subdirectory(\"third_party/METIS/libmetis/\")\n    # When building on ubi7, it fails with the following error:\n    # /usr/include/signal.h:156:29: error: unknown type name 'siginfo_t'.\n    # So I(Rui) define _POSIX_C_SOURCE to 200809L for GKlib and metis to avoid the error.\n    target_compile_definitions(GKlib PRIVATE _POSIX_C_SOURCE=200809L)\n    target_compile_definitions(metis PRIVATE _POSIX_C_SOURCE=200809L)\n    list(APPEND DGL_LINKER_LIBS metis GKlib)\n  endif(NOT MSVC)\nendif(EXTERNAL_METIS_PATH)\n\n\n# Avoid exposing third-party symbols when using DGL as a library.\nif((NOT MSVC) AND (NOT ${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\"))\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wl,--exclude-libs,ALL\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wl,--exclude-libs,ALL\")\nendif()\n\n# Compile gpu_cache\nif(USE_CUDA)\n  # Manually build gpu_cache because CMake always builds it as shared\n  file(GLOB gpu_cache_src\n    third_party/HugeCTR/gpu_cache/src/nv_gpu_cache.cu\n  )\n  cuda_add_library(gpu_cache STATIC ${gpu_cache_src})\n  target_include_directories(gpu_cache PRIVATE \"third_party/HugeCTR/gpu_cache/include\")\n  target_include_directories(dgl PRIVATE \"third_party/HugeCTR/gpu_cache/include\")\n  list(APPEND DGL_LINKER_LIBS gpu_cache)\n  message(STATUS \"Build with HugeCTR GPU embedding cache.\")\nendif(USE_CUDA)\n\n# support PARALLEL_ALGORITHMS\nif (LIBCXX_ENABLE_PARALLEL_ALGORITHMS)\n  target_compile_definitions(dgl PRIVATE PARALLEL_ALGORITHMS)\nendif(LIBCXX_ENABLE_PARALLEL_ALGORITHMS)\n\ntarget_link_libraries(dgl ${DGL_LINKER_LIBS} ${DGL_RUNTIME_LINKER_LIBS})\nif(MSVC)\n  add_custom_command(\n    TARGET dgl POST_BUILD COMMAND\n    ${CMAKE_COMMAND} -E copy \"$<TARGET_FILE:dgl>\" \"$<TARGET_FILE_DIR:dgl>/..\")\nendif(MSVC)\n\n# Tensor adapter libraries\n# Linking against LibTorch involves linking against a bunch of other libraries\n# returned by PyTorch's CMake (e.g. C10 or NVTools).  Because CMake caches\n# the found libraries in find_library(), often times CMake will look into the libraries\n# of the wrong version when I build everything in the same CMake process.  As\n# a result, I (BarclayII) am launching an individual CMake build for every PyTorch version.\nif(BUILD_TORCH)\n  file(TO_NATIVE_PATH ${CMAKE_CURRENT_BINARY_DIR} BINDIR)\n  file(TO_NATIVE_PATH ${CMAKE_COMMAND} CMAKE_CMD)\n  if(MSVC)\n    file(TO_NATIVE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/tensoradapter/pytorch/build.bat BUILD_SCRIPT)\n    add_custom_target(\n      tensoradapter_pytorch\n      ${CMAKE_COMMAND} -E env\n      CMAKE_COMMAND=${CMAKE_CMD}\n      CUDA_TOOLKIT_ROOT_DIR=${CUDA_TOOLKIT_ROOT_DIR}\n      USE_CUDA=${USE_CUDA}\n      EXTERNAL_DMLC_LIB_PATH=${EXTERNAL_DMLC_LIB_PATH}\n      BINDIR=${BINDIR}\n      cmd /e:on /c ${BUILD_SCRIPT} ${TORCH_PYTHON_INTERPS}\n      DEPENDS ${BUILD_SCRIPT}\n      WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/tensoradapter/pytorch)\n  else(MSVC)\n    file(TO_NATIVE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/tensoradapter/pytorch/build.sh BUILD_SCRIPT)\n    add_custom_target(\n      tensoradapter_pytorch\n      ${CMAKE_COMMAND} -E env\n      CMAKE_COMMAND=${CMAKE_CMD}\n      CUDA_TOOLKIT_ROOT_DIR=${CUDA_TOOLKIT_ROOT_DIR}\n      USE_CUDA=${USE_CUDA}\n      EXTERNAL_DMLC_LIB_PATH=${EXTERNAL_DMLC_LIB_PATH}\n      BINDIR=${CMAKE_CURRENT_BINARY_DIR}\n      bash ${BUILD_SCRIPT} ${TORCH_PYTHON_INTERPS}\n      DEPENDS ${BUILD_SCRIPT}\n      WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/tensoradapter/pytorch)\n  endif(MSVC)\n  add_dependencies(dgl tensoradapter_pytorch)\nendif(BUILD_TORCH)\n\n# Installation rules\ninstall(TARGETS dgl DESTINATION lib${LIB_SUFFIX})\n\n# Testing\nif(BUILD_CPP_TEST)\n  message(STATUS \"Build with unittest\")\n  add_subdirectory(./third_party/googletest)\n  enable_testing()\n  include_directories(${gtest_SOURCE_DIR}/include ${gtest_SOURCE_DIR})\n  include_directories(\"include\")\n  include_directories(\"third_party/dlpack/include\")\n  include_directories(\"third_party/dmlc-core/include\")\n  include_directories(\"third_party/tsl_robin_map/include\")\n  include_directories(\"third_party/libxsmm/include\")\n  include_directories(\"third_party/pcg/include\")\n  file(GLOB_RECURSE TEST_SRC_FILES ${PROJECT_SOURCE_DIR}/tests/cpp/*.cc)\n  add_executable(runUnitTests ${TEST_SRC_FILES})\n  target_link_libraries(runUnitTests gtest gtest_main)\n  target_link_libraries(runUnitTests dgl)\n  add_test(UnitTests runUnitTests)\nendif(BUILD_CPP_TEST)\n\nif(BUILD_SPARSE)\n  message(STATUS \"Configuring DGL sparse library\")\n  file(TO_NATIVE_PATH ${CMAKE_CURRENT_BINARY_DIR} BINDIR)\n  file(TO_NATIVE_PATH ${CMAKE_COMMAND} CMAKE_CMD)\n  get_target_property(DGL_INCLUDE_DIRS dgl INCLUDE_DIRECTORIES)\n  message(STATUS \"DGL include directories: ${DGL_INCLUDE_DIRS}\")\n  message(STATUS \"DGL link directories: ${DGL_INCLUDE_DIRS}\")\n  if(MSVC)\n    file(TO_NATIVE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/dgl_sparse/build.bat BUILD_SCRIPT)\n    add_custom_target(\n      dgl_sparse\n      ALL\n      ${CMAKE_COMMAND} -E env\n      CMAKE_COMMAND=${CMAKE_CMD}\n      CUDA_TOOLKIT_ROOT_DIR=${CUDA_TOOLKIT_ROOT_DIR}\n      USE_CUDA=${USE_CUDA}\n      BINDIR=${BINDIR}\n      INCLUDEDIR=\"${DGL_INCLUDE_DIRS}\"\n      CFLAGS=${CMAKE_C_FLAGS}\n      CXXFLAGS=${CMAKE_CXX_FLAGS}\n      LDFLAGS=${CMAKE_SHARED_LINKER_FLAGS}\n      cmd /e:on /c ${BUILD_SCRIPT} ${TORCH_PYTHON_INTERPS}\n      DEPENDS ${BUILD_SCRIPT}\n      WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dgl_sparse)\n  else(MSVC)\n    file(TO_NATIVE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/dgl_sparse/build.sh BUILD_SCRIPT)\n    add_custom_target(\n      dgl_sparse\n      ALL\n      ${CMAKE_COMMAND} -E env\n      CMAKE_COMMAND=${CMAKE_CMD}\n      CUDA_TOOLKIT_ROOT_DIR=${CUDA_TOOLKIT_ROOT_DIR}\n      USE_CUDA=${USE_CUDA}\n      BINDIR=${CMAKE_CURRENT_BINARY_DIR}\n      INCLUDEDIR=\"${DGL_INCLUDE_DIRS}\"\n      CFLAGS=${CMAKE_C_FLAGS}\n      CXXFLAGS=${CMAKE_CXX_FLAGS}\n      LDFLAGS=${CMAKE_SHARED_LINKER_FLAGS}\n      bash ${BUILD_SCRIPT} ${TORCH_PYTHON_INTERPS}\n      DEPENDS ${BUILD_SCRIPT}\n      WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dgl_sparse)\n  endif(MSVC)\n  add_dependencies(dgl_sparse dgl)\nendif(BUILD_SPARSE)\n\nif(BUILD_GRAPHBOLT)\n  message(STATUS \"Configuring graphbolt library\")\n  string(REPLACE \";\" \"\\\\;\" CUDA_ARCHITECTURES_ESCAPED \"${CUDA_ARCHITECTURES}\")\n  file(TO_NATIVE_PATH ${CMAKE_CURRENT_BINARY_DIR} BINDIR)\n  file(TO_NATIVE_PATH ${CMAKE_COMMAND} CMAKE_CMD)\n  if(MSVC)\n    file(TO_NATIVE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/graphbolt/build.bat BUILD_SCRIPT)\n    add_custom_target(\n      graphbolt\n      ALL\n      ${CMAKE_COMMAND} -E env\n      CMAKE_COMMAND=${CMAKE_CMD}\n      CUDA_TOOLKIT_ROOT_DIR=${CUDA_TOOLKIT_ROOT_DIR}\n      USE_CUDA=${USE_CUDA}\n      BINDIR=${BINDIR}\n      CFLAGS=${CMAKE_C_FLAGS}\n      CXXFLAGS=${CMAKE_CXX_FLAGS}\n      CUDAARCHS=\"${CUDA_ARCHITECTURES_ESCAPED}\"\n      LDFLAGS=${CMAKE_SHARED_LINKER_FLAGS}\n      cmd /e:on /c ${BUILD_SCRIPT} ${TORCH_PYTHON_INTERPS}\n      DEPENDS ${BUILD_SCRIPT}\n      WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/graphbolt)\n  else(MSVC)\n    file(TO_NATIVE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/graphbolt/build.sh BUILD_SCRIPT)\n    add_custom_target(\n      graphbolt\n      ALL\n      ${CMAKE_COMMAND} -E env\n      CMAKE_COMMAND=${CMAKE_CMD}\n      CUDA_TOOLKIT_ROOT_DIR=${CUDA_TOOLKIT_ROOT_DIR}\n      USE_CUDA=${USE_CUDA}\n      USE_LIBURING=${USE_LIBURING}\n      BINDIR=${CMAKE_CURRENT_BINARY_DIR}\n      CFLAGS=${CMAKE_C_FLAGS}\n      CXXFLAGS=${CMAKE_CXX_FLAGS}\n      CUDAARCHS=\"${CUDA_ARCHITECTURES_ESCAPED}\"\n      LDFLAGS=${CMAKE_SHARED_LINKER_FLAGS}\n      bash ${BUILD_SCRIPT} ${TORCH_PYTHON_INTERPS}\n      DEPENDS ${BUILD_SCRIPT}\n      WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/graphbolt)\n  endif(MSVC)\nendif(BUILD_GRAPHBOLT)\n"
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 3.6552734375,
          "content": "## Contributing to DGL\r\n\r\nContribution is always welcomed. A good starting place is the roadmap issue, where\r\nyou can find our current milestones. All contributions must go through pull requests\r\nand be reviewed by the committers. See our [contribution\r\nguide](https://docs.dgl.ai/contribute.html) for more details.\r\n\r\nOnce your contribution is accepted and merged, congratulations, you are now a\r\ncontributor to the DGL project.  We will put your name in the list below.\r\n\r\nContributors\r\n------------\r\n\r\n* [Minjie Wang](https://github.com/jermainewang) from AWS\r\n* [Da Zheng](https://github.com/zheng-da) from AWS\r\n* [Quan Gan](https://github.com/BarclayII) from AWS\r\n* [Mufei Li](https://github.com/mufeili) from AWS\r\n* [Jinjing Zhou](https://github.com/VoVAllen) from AWS\r\n* [Xiang Song](https://github.com/classicsong) from AWS\r\n* [Tianjun Xiao](https://github.com/sneakerkg) from AWS\r\n* [Tong He](https://github.com/hetong007) from AWS\r\n* [Jian Zhang](https://github.com/zhjwy9343) from AWS\r\n* [Qipeng Guo](https://github.com/QipengGuo) from AWS\r\n* [Xiangkun Hu](https://github.com/HuXiangkun) from AWS\r\n* [Ying Rui](https://github.com/Rhett-Ying) from AWS\r\n* [Israt Nisa](https://github.com/isratnisa) from AWS\r\n* [Zheng Zhang](https://github.com/zzhang-cn) from AWS\r\n* [Zihao Ye](https://github.com/yzh119) from University of Washington\r\n* [Chao Ma](https://github.com/aksnzhy)\r\n* [Qidong](https://github.com/soodoshll)\r\n* [Lingfan Yu](https://github.com/lingfanyu) from New York University\r\n* [Yu Gai](https://github.com/GaiYu0) from University of California, Berkeyley\r\n* [Qi Huang]() from New York University\r\n* [Dominique LaSalle](https://github.com/nv-dlasalle) from Nvidia\r\n* [Pawel Piotrowcz](https://github.com/pawelpiotrowicz) from Intel\r\n* [Michal Szarmach](https://github.com/mszarma) from Intel\r\n* [Izabela Mazur](https://github.com/IzabelaMazur) from Intel\r\n* [Sanchit Misra](https://github.com/sanchit-misra) from Intel\r\n* [Andrzej Kotlowski](https://github.com/anko-intel) from Intel\r\n* [Sheng Zha](https://github.com/szha) from AWS\r\n* [Yifei Ma](https://github.com/yifeim) from  AWS\r\n* [Yizhi Liu](https://github.com/yzhliu) from AWS\r\n* [Kay Liu](https://github.com/kayzliu) from UIC\r\n* [Tianqi Zhang](https://github.com/lygztq) from SJTU\r\n* [Hengrui Zhang](https://github.com/hengruizhang98)\r\n* [Seung Won Min](https://github.com/davidmin7) from UIUC\r\n* [@hbsun2113](https://github.com/hbsun2113): GraphSAGE in PyTorch\r\n* [Tianyi Zhang](https://github.com/Tiiiger): SGC in PyTorch\r\n* [Jun Chen](https://github.com/kitaev-chen): GIN in PyTorch\r\n* [Aymen Waheb](https://github.com/aymenwah): APPNP in PyTorch\r\n* [Chengqiang Lu](https://github.com/geekinglcq): MGCN, SchNet and MPNN in PyTorch\r\n* [Gongze Cao](https://github.com/Zardinality): Cluster GCN\r\n* [Yicheng Wu](https://github.com/MilkshakeForReal): RotatE in PyTorch\r\n* [Hao Xiong](https://github.com/ShawXh): DeepWalk in PyTorch\r\n* [Zhi Lin](https://github.com/kira-lin): Integrate FeatGraph into DGL\r\n* [Andrew Tsesis](https://github.com/noncomputable): Framework-Agnostic Graph Ops\r\n* [Brett Koonce](https://github.com/brettkoonce)\r\n* [@giuseppefutia](https://github.com/giuseppefutia)\r\n* [@mori97](https://github.com/mori97)\r\n* [@xnuohz](https://github.com/xnuohz)\r\n* [Hao Jin](https://github.com/haojin2) from Amazon\r\n* [Xin Yao](https://github.com/yaox12) from Nvidia\r\n* [Abdurrahman Yasar](https://github.com/ayasar70) from Nvidia\r\n* [Shaked Brody](https://github.com/shakedbr) from Technion\r\n* [Jiahui Liu](https://github.com/paoxiaode) from Nvidia\r\n* [Neil Dickson](https://github.com/ndickson-nvidia) from Nvidia\r\n* [Chang Liu](https://github.com/chang-l) from Nvidia\r\n* [Muhammed Fatih Balin](https://github.com/mfbalin) from Nvidia and Georgia Tech\r\n"
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 22.4501953125,
          "content": "#!/usr/bin/env groovy\n\n// CI tests are executed within Docker containers as the 'root' user. However,\n// communications between Jenkins nodes are done with the 'ubuntu' user(login\n// via root is disallowed on AWS EC2 instances). Therefore, we need to change\n// the file permission to allow 'ubuntu' user to access the files created by\n// the 'root' user. This is achieved by running 'chmod -R 777 .'.\n\n// Summary of Jenkins nodes:\n// - linux-benchmark-node: Linux CPU node for authentication and lint check.\n//      number of nodes: 1\n//      instance type: m5.2xlarge(8 vCPUs, 32 GB memory)\n//      number of executors per node: 6\n//      number of jobs running on this node per CI run: 3\n// - dgl-ci-linux-cpu: Linux CPU node for building and testing.\n//      number of nodes: 4\n//      instance type: m6i.24xlarge(96 vCPUs, 384 GB memory)\n//      number of executors per node: 6\n//      number of jobs running on this node per CI run: 8\n// - dgl-ci-linux-gpu: Linux GPU node for building and testing.\n//      number of nodes: 4\n//      instance type: g4dn.4xlarge(16 vCPUs, 64 GB memory, 1 GPU)\n//      number of executors per node: 1\n//      number of jobs running on this node per CI run: 4\n// - dgl-ci-windows-cpu: Windows CPU node for building and testing.\n//      number of nodes: 4\n//      instance type: m6i.8xlarge(32 vCPUs, 128 GB memory)\n//      number of executors per node: 2\n//      number of jobs running on this node per CI run: 3\n\ndgl_linux_libs = 'build/libdgl.so, build/runUnitTests, python/dgl/_ffi/_cy3/core.cpython-*-x86_64-linux-gnu.so, build/tensoradapter/pytorch/*.so, build/dgl_sparse/*.so, build/graphbolt/*.so'\n// Currently DGL on Windows is not working with Cython yet\ndgl_win64_libs = \"build\\\\dgl.dll, build\\\\runUnitTests.exe, build\\\\tensoradapter\\\\pytorch\\\\*.dll, build\\\\dgl_sparse\\\\*.dll, build\\\\graphbolt\\\\*.dll\"\n\ndef init_git() {\n  sh \"chmod -R 777 .\" // Fix permission issue\n  sh 'rm -rf *'\n  sh \"git config --global --add safe.directory '*'\"\n  checkout scm\n  sh 'git submodule update --recursive --init'\n}\n\ndef init_git_win64() {\n  checkout scm\n  bat 'git submodule update --recursive --init'\n}\n\n// pack libraries for later use\ndef pack_lib(name, libs) {\n  echo \"Packing ${libs} into ${name}\"\n  stash includes: libs, name: name\n}\n\n// unpack libraries saved before\ndef unpack_lib(name, libs) {\n  unstash name\n  echo \"Unpacked ${libs} from ${name}\"\n}\n\ndef build_dgl_linux(dev) {\n  init_git()\n  sh \"bash tests/scripts/build_dgl.sh ${dev}\"\n  sh 'ls -lh /usr/lib/x86_64-linux-gnu/'\n  pack_lib(\"dgl-${dev}-linux\", dgl_linux_libs)\n}\n\ndef build_dgl_win64(dev) {\n  /* Assuming that Windows slaves are already configured with MSBuild VS2017,\n   * CMake and Python/pip/setuptools etc. */\n  init_git_win64()\n  bat \"CALL tests\\\\scripts\\\\build_dgl.bat\"\n  pack_lib(\"dgl-${dev}-win64\", dgl_win64_libs)\n}\n\ndef cpp_unit_test_linux(dev) {\n  init_git()\n  unpack_lib(\"dgl-${dev}-linux\", dgl_linux_libs)\n  sh 'bash tests/scripts/task_cpp_unit_test.sh'\n}\n\ndef cpp_unit_test_win64() {\n  init_git_win64()\n  unpack_lib('dgl-cpu-win64', dgl_win64_libs)\n  bat \"CALL tests\\\\scripts\\\\task_cpp_unit_test.bat\"\n}\n\ndef unit_test_linux(backend, dev) {\n  init_git()\n  unpack_lib(\"dgl-${dev}-linux\", dgl_linux_libs)\n  timeout(time: 40, unit: 'MINUTES') {\n    sh \"bash tests/scripts/task_unit_test.sh ${backend} ${dev}\"\n  }\n}\n\ndef unit_distributed_linux(backend, dev) {\n  init_git()\n  unpack_lib(\"dgl-${dev}-linux\", dgl_linux_libs)\n  timeout(time: 40, unit: 'MINUTES') {\n    sh \"bash tests/scripts/task_distributed_test.sh ${backend} ${dev}\"\n  }\n}\n\ndef unit_test_cugraph(backend, dev) {\n  init_git()\n  unpack_lib(\"dgl-${dev}-linux\", dgl_linux_libs)\n  timeout(time: 15, unit: 'MINUTES') {\n    sh \"bash tests/scripts/cugraph_unit_test.sh ${backend}\"\n  }\n}\n\ndef unit_test_win64(backend, dev) {\n  init_git_win64()\n  unpack_lib(\"dgl-${dev}-win64\", dgl_win64_libs)\n  timeout(time: 50, unit: 'MINUTES') {\n    bat \"CALL tests\\\\scripts\\\\task_unit_test.bat ${backend}\"\n  }\n}\n\ndef example_test_linux(backend, dev) {\n  init_git()\n  unpack_lib(\"dgl-${dev}-linux\", dgl_linux_libs)\n  timeout(time: 20, unit: 'MINUTES') {\n    sh \"bash tests/scripts/task_example_test.sh ${dev}\"\n  }\n}\n\ndef example_test_win64(backend, dev) {\n  init_git_win64()\n  unpack_lib(\"dgl-${dev}-win64\", dgl_win64_libs)\n  timeout(time: 20, unit: 'MINUTES') {\n    bat \"CALL tests\\\\scripts\\\\task_example_test.bat ${dev}\"\n  }\n}\n\ndef tutorial_test_linux(backend) {\n  init_git()\n  unpack_lib('dgl-cpu-linux', dgl_linux_libs)\n  timeout(time: 20, unit: 'MINUTES') {\n    sh \"bash tests/scripts/task_${backend}_tutorial_test.sh\"\n  }\n}\n\ndef go_test_linux() {\n  init_git()\n  unpack_lib('dgl-cpu-linux', dgl_linux_libs)\n  timeout(time: 20, unit: 'MINUTES') {\n    sh \"bash tests/scripts/task_go_test.sh\"\n  }\n}\n\ndef is_authorized(name) {\n  def devs = [\n    // System:\n    'dgl-bot', 'noreply',\n    // Core:\n    'Rhett-Ying', 'BarclayII', 'jermainewang', 'mufeili', 'isratnisa',\n    'rudongyu', 'classicsong', 'HuXiangkun', 'hetong007', 'kylasa',\n    'frozenbugs', 'peizhou001', 'zheng-da', 'czkkkkkk', 'thvasilo',\n    // Intern:\n    'pyynb', 'az15240', 'BowenYao18', 'kec020', 'Liu-rj',\n    // Friends:\n    'nv-dlasalle', 'yaox12', 'chang-l', 'Kh4L', 'VibhuJawa', 'kkranen',\n    'TristonC', 'mfbalin',\n    'bgawrych', 'itaraban', 'daniil-sizov', 'anko-intel', 'Kacper-Pietkun',\n    'hankaj', 'agrabows', 'DominikaJedynak', 'RafLit', 'CfromBU',\n    // Emeritus:\n    'VoVAllen',\n  ]\n  return (name in devs)\n}\n\ndef is_admin(name) {\n  def admins = ['dgl-bot', 'Rhett-Ying', 'BarclayII', 'jermainewang']\n  return (name in admins)\n}\n\ndef regression_test_done = false\n\npipeline {\n  agent any\n  triggers {\n        issueCommentTrigger('@dgl-bot.*')\n  }\n  stages {\n    // Below 2 stages are to authenticate the change/comment author.\n    // Only core developers are allowed to trigger CI.\n    // Such authentication protects CI from malicious code which may bring CI instances down.\n    stage('Authentication') {\n      agent {\n        docker {\n            label 'linux-benchmark-node'\n            image 'dgllib/dgl-ci-lint'\n            alwaysPull true\n        }\n      }\n      when { not { triggeredBy 'IssueCommentCause' } }\n      steps {\n        script {\n          def author = env.CHANGE_AUTHOR\n          def prOpenTriggerCause = currentBuild.getBuildCauses('jenkins.branch.BranchEventCause')\n          def first_run = prOpenTriggerCause && env.BUILD_ID == '1'\n          if (author && !is_authorized(author)) {\n            pullRequest.comment(\"Not authorized to trigger CI. Please ask core developer to help trigger via issuing comment: \\n - `@dgl-bot`\")\n            error(\"Authentication failed.\")\n          }\n          if (first_run) {\n            pullRequest.comment('To trigger regression tests: \\n - `@dgl-bot run [instance-type] [which tests] [compare-with-branch]`; \\n For example: `@dgl-bot run g4dn.4xlarge all dmlc/master` or `@dgl-bot run c5.9xlarge kernel,api dmlc/master`')\n          }\n        }\n      }\n    }\n    stage('AuthenticationComment') {\n      agent {\n        docker {\n            label 'linux-benchmark-node'\n            image 'dgllib/dgl-ci-lint'\n            alwaysPull true\n        }\n      }\n      when { triggeredBy 'IssueCommentCause' }\n      steps {\n        script {\n          def author = env.GITHUB_COMMENT_AUTHOR\n          if (!is_authorized(author)) {\n            pullRequest.comment(\"Not authorized to trigger CI via issuing comment.\")\n            error(\"Authentication failed.\")\n          }\n        }\n      }\n    }\n    stage('Regression Test') {\n      agent {\n        docker {\n            label 'linux-benchmark-node'\n            image 'dgllib/dgl-ci-lint'\n            alwaysPull true\n        }\n      }\n      when { triggeredBy 'IssueCommentCause' }\n      steps {\n          checkout scm\n          script {\n              def comment = env.GITHUB_COMMENT\n              def command_lists = comment.split(' ')\n              if (command_lists.size() == 1) {\n                // CI command, not for regression\n                return\n              }\n              if (command_lists.size() != 5) {\n                pullRequest.comment('Cannot run the regression test due to unknown command')\n                error('Unknown command')\n              }\n              def author = env.GITHUB_COMMENT_AUTHOR\n              echo(\"${env.GIT_URL}\")\n              echo(\"${env}\")\n              if (!is_admin(author)) {\n                error('Not authorized to launch regression tests')\n              }\n              dir('benchmark_scripts_repo') {\n                checkout([$class: 'GitSCM', branches: [[name: '*/master']],\n                        userRemoteConfigs: [[credentialsId: 'github', url: 'https://github.com/dglai/DGL_scripts.git']]])\n              }\n              sh('cp benchmark_scripts_repo/benchmark/* benchmarks/scripts/')\n              def instance_type = command_lists[2].replace('.', '')\n              pullRequest.comment(\"Start the Regression test. View at ${RUN_DISPLAY_URL}\")\n              def prNumber = env.BRANCH_NAME.replace('PR-', '')\n              dir('benchmarks/scripts') {\n                sh('python3 -m pip install boto3')\n                sh(\"PYTHONUNBUFFERED=1 GIT_PR_ID=${prNumber} GIT_URL=${env.GIT_URL} GIT_BRANCH=${env.CHANGE_BRANCH} python3 run_reg_test.py --data-folder ${env.GIT_COMMIT}_${instance_type} --run-cmd '${comment}'\")\n              }\n              pullRequest.comment(\"Finished the Regression test. Result table is at https://dgl-asv-data.s3-us-west-2.amazonaws.com/${env.GIT_COMMIT}_${instance_type}/results/result.csv. Jenkins job link is ${RUN_DISPLAY_URL}. \")\n              currentBuild.result = 'SUCCESS'\n              regression_test_done = true\n          }\n      }\n    }\n    stage('CI') {\n      when { expression { !regression_test_done } }\n      stages {\n        stage('Abort Previous CI') {\n          steps {\n            script {\n              if (env.BRANCH_NAME != \"master\") {\n                // Jenkins will abort an older build if a newer build already\n                // passed a higher milestone.\n                // https://www.jenkins.io/doc/pipeline/steps/pipeline-milestone-step/\n                def buildNumber = env.BUILD_NUMBER as int\n                for (int i = 1; i <= buildNumber; i++) {\n                  milestone(i)\n                }\n              }\n            }\n          }\n        }\n\n        stage('Lint Check') {\n          agent {\n            docker {\n              label \"linux-benchmark-node\"\n              image \"dgllib/dgl-ci-lint\"\n              alwaysPull true\n            }\n          }\n          steps {\n            init_git()\n            sh 'bash tests/scripts/task_lint.sh'\n          }\n          post {\n            always {\n              cleanWs disableDeferredWipeout: true, deleteDirs: true\n            }\n          }\n        }\n\n        stage('Build') {\n          parallel {\n            stage('CPU Build') {\n              agent {\n                docker {\n                  label \"dgl-ci-linux-cpu\"\n                  image \"dgllib/dgl-ci-cpu:v240511_1440\"\n                  args \"-u root\"\n                  alwaysPull true\n                }\n              }\n              steps {\n                build_dgl_linux('cpu')\n              }\n              post {\n                always {\n                  sh \"chmod -R 777 .\" // Fix permission issue\n                  cleanWs disableDeferredWipeout: true, deleteDirs: true\n                }\n              }\n            }\n            stage('GPU Build') {\n              agent {\n                docker {\n                  label \"dgl-ci-linux-cpu\"\n                  image \"dgllib/dgl-ci-gpu:cu121_v240511_1440\"\n                  args \"-u root\"\n                  alwaysPull true\n                }\n              }\n              steps {\n                // sh \"nvidia-smi\"\n                build_dgl_linux('gpu')\n              }\n              post {\n                always {\n                  sh \"chmod -R 777 .\" // Fix permission issue\n                  cleanWs disableDeferredWipeout: true, deleteDirs: true\n                }\n              }\n            }\n            stage('PyTorch Cugraph GPU Build') {\n              agent {\n                docker {\n                  label \"dgl-ci-linux-cpu\"\n                  image \"rapidsai/cugraph_stable_torch-cuda:11.8-base-ubuntu20.04-py3.10-pytorch2.0.0-rapids23.04\"\n                  args \"-u root\"\n                  alwaysPull true\n                }\n              }\n              steps {\n                build_dgl_linux('cugraph')\n              }\n              post {\n                always {\n                  sh \"chmod -R 777 .\" // Fix permission issue\n                  cleanWs disableDeferredWipeout: true, deleteDirs: true\n                }\n              }\n            }\n            stage('CPU Build (Win64)') {\n              agent { label 'dgl-ci-windows-cpu' }\n              steps {\n                build_dgl_win64('cpu')\n              }\n              post {\n                always {\n                  cleanWs disableDeferredWipeout: true, deleteDirs: true\n                }\n              }\n            }\n          // Currently we don't have Windows GPU build machines\n          }\n        }\n        stage('Test') {\n          parallel {\n            stage('C++ CPU') {\n              agent {\n                docker {\n                  label \"dgl-ci-linux-cpu\"\n                  image \"dgllib/dgl-ci-cpu:v240511_1440\"\n                  args \"-u root\"\n                  alwaysPull true\n                }\n              }\n              steps {\n                cpp_unit_test_linux('cpu')\n              }\n              post {\n                always {\n                  sh \"chmod -R 777 .\" // Fix permission issue\n                  cleanWs disableDeferredWipeout: true, deleteDirs: true\n                }\n              }\n            }\n            stage('C++ GPU') {\n              agent {\n                docker {\n                  label \"dgl-ci-linux-gpu\"\n                  image \"dgllib/dgl-ci-gpu:cu121_v240511_1440\"\n                  args \"-u root --runtime nvidia\"\n                  alwaysPull true\n                }\n              }\n              steps {\n                cpp_unit_test_linux('gpu')\n              }\n              post {\n                always {\n                  sh \"chmod -R 777 .\" // Fix permission issue\n                  cleanWs disableDeferredWipeout: true, deleteDirs: true\n                }\n              }\n            }\n            stage('C++ CPU (Win64)') {\n              agent { label 'dgl-ci-windows-cpu' }\n              steps {\n                cpp_unit_test_win64()\n              }\n              post {\n                always {\n                  cleanWs disableDeferredWipeout: true, deleteDirs: true\n                }\n              }\n            }\n            stage('Tensorflow CPU') {\n              agent {\n                docker {\n                  label \"dgl-ci-linux-cpu\"\n                  image \"dgllib/dgl-ci-cpu:v230810\"\n                  args \"-u root\"\n                  alwaysPull true\n                }\n              }\n              stages {\n                stage('Tensorflow CPU Unit test') {\n                  steps {\n                    unit_test_linux('tensorflow', 'cpu')\n                  }\n                  // Tensorflow is deprecated.\n                  when { expression { false } }\n                }\n              }\n              post {\n                always {\n                  sh \"chmod -R 777 .\" // Fix permission issue\n                  cleanWs disableDeferredWipeout: true, deleteDirs: true\n                }\n              }\n            }\n            stage('Tensorflow GPU') {\n              agent {\n                docker {\n                  label \"dgl-ci-linux-gpu\"\n                  image \"dgllib/dgl-ci-gpu:cu121_v240511_1440\"\n                  args \"-u root --runtime nvidia\"\n                  alwaysPull true\n                }\n              }\n              stages {\n                stage('Tensorflow GPU Unit test') {\n                  steps {\n                    unit_test_linux('tensorflow', 'gpu')\n                  }\n                  // Tensorflow does not support cuda 11.6 yet.\n                  when { expression { false } }\n                }\n              }\n              post {\n                always {\n                  sh \"chmod -R 777 .\" // Fix permission issue\n                  cleanWs disableDeferredWipeout: true, deleteDirs: true\n                }\n              }\n            }\n            stage('Torch CPU') {\n              agent {\n                docker {\n                  label \"dgl-ci-linux-cpu\"\n                  image \"dgllib/dgl-ci-cpu:v240511_1440\"\n                  args \"-u root --shm-size=4gb\"\n                  alwaysPull true\n                }\n              }\n              stages {\n                stage('Torch CPU Unit test') {\n                  steps {\n                    unit_test_linux('pytorch', 'cpu')\n                  }\n                }\n                stage('Torch CPU Example test') {\n                  steps {\n                    example_test_linux('pytorch', 'cpu')\n                  }\n                }\n                stage('Torch CPU Tutorial test') {\n                  steps {\n                    tutorial_test_linux('pytorch')\n                  }\n                }\n              }\n              post {\n                always {\n                  sh \"chmod -R 777 .\" // Fix permission issue\n                  cleanWs disableDeferredWipeout: true, deleteDirs: true\n                }\n              }\n            }\n            stage('Torch CPU (Win64)') {\n              agent { label 'dgl-ci-windows-cpu' }\n              stages {\n                stage('Torch CPU (Win64) Unit test') {\n                  steps {\n                    unit_test_win64('pytorch', 'cpu')\n                  }\n                }\n                stage('Torch CPU (Win64) Example test') {\n                  steps {\n                    example_test_win64('pytorch', 'cpu')\n                  }\n                }\n              }\n              post {\n                always {\n                  cleanWs disableDeferredWipeout: true, deleteDirs: true\n                }\n              }\n            }\n            stage('Torch GPU') {\n              agent {\n                docker {\n                  label \"dgl-ci-linux-gpu\"\n                  image \"dgllib/dgl-ci-gpu:cu121_v240511_1440\"\n                  args \"-u root --runtime nvidia --shm-size=8gb\"\n                  alwaysPull true\n                }\n              }\n              stages {\n                stage('Torch GPU Unit test') {\n                  steps {\n                    sh 'nvidia-smi'\n                    unit_test_linux('pytorch', 'gpu')\n                  }\n                }\n                stage('Torch GPU Example test') {\n                  steps {\n                    example_test_linux('pytorch', 'gpu')\n                  }\n                }\n              }\n              post {\n                always {\n                  sh \"chmod -R 777 .\" // Fix permission issue\n                  cleanWs disableDeferredWipeout: true, deleteDirs: true\n                }\n              }\n            }\n            stage('Distributed') {\n              agent {\n                docker {\n                  label \"dgl-ci-linux-cpu\"\n                  image \"dgllib/dgl-ci-cpu:v240511_1440\"\n                  args \"-u root --shm-size=8gb\"\n                  alwaysPull true\n                }\n              }\n              stages {\n                stage('Distributed Torch CPU Unit test') {\n                  steps {\n                    unit_distributed_linux('pytorch', 'cpu')\n                  }\n                }\n              }\n              post {\n                always {\n                  sh \"chmod -R 777 .\" // Fix permission issue\n                  cleanWs disableDeferredWipeout: true, deleteDirs: true\n                }\n              }\n            }\n            stage('PyTorch Cugraph GPU') {\n              agent {\n                docker {\n                  label \"dgl-ci-linux-gpu\"\n                  image \"rapidsai/cugraph_stable_torch-cuda:11.8-base-ubuntu20.04-py3.10-pytorch2.0.0-rapids23.04\"\n                  args \"-u root --runtime nvidia --shm-size=8gb\"\n                  alwaysPull true\n                }\n              }\n              stages {\n                stage('PyTorch Cugraph GPU Unit test') {\n                  steps {\n                    sh 'nvidia-smi'\n                    unit_test_cugraph('pytorch', 'cugraph')\n                  }\n                  // Cugraph is under refactoring. Skip the test for now.\n                  when { expression { false } }\n                }\n              }\n              post {\n                always {\n                  sh \"chmod -R 777 .\" // Fix permission issue\n                  cleanWs disableDeferredWipeout: true, deleteDirs: true\n                }\n              }\n            }\n            stage('DGL-Go') {\n              agent {\n                docker {\n                  label \"dgl-ci-linux-cpu\"\n                  image \"dgllib/dgl-ci-cpu:v240511_1440\"\n                  args \"-u root\"\n                  alwaysPull true\n                }\n              }\n              stages {\n                stage('DGL-Go CPU test') {\n                  steps {\n                    go_test_linux()\n                  }\n                }\n              }\n              post {\n                always {\n                  sh \"chmod -R 777 .\" // Fix permission issue\n                  cleanWs disableDeferredWipeout: true, deleteDirs: true\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  post {\n    always {\n      script {\n        node(\"dglci-post-linux\") {\n          docker.image('dgllib/dgl-ci-awscli:v220418').inside(\"--pull always --entrypoint=''\") {\n            sh(\"rm -rf ci_tmp\")\n            dir('ci_tmp') {\n              sh(\"curl -k -o cireport.log ${BUILD_URL}consoleText\")\n              sh(\"curl -o report.py https://raw.githubusercontent.com/dmlc/dgl/master/tests/scripts/ci_report/report.py\")\n              sh(\"curl -o status.py https://raw.githubusercontent.com/dmlc/dgl/master/tests/scripts/ci_report/status.py\")\n              sh(\"curl -k -L ${BUILD_URL}wfapi\")\n              sh(\"cat status.py\")\n              sh(\"pytest --html=report.html --self-contained-html report.py || true\")\n              sh(\"aws s3 sync ./ s3://dgl-ci-result/${JOB_NAME}/${BUILD_NUMBER}/${BUILD_ID}/logs/  --exclude '*' --include '*.log' --acl public-read --content-type text/plain\")\n              sh(\"aws s3 sync ./ s3://dgl-ci-result/${JOB_NAME}/${BUILD_NUMBER}/${BUILD_ID}/logs/  --exclude '*.log' --acl public-read\")\n\n              def comment = sh(returnStdout: true, script: \"python3 status.py --result ${currentBuild.currentResult}\").trim()\n              echo(comment)\n              if ((env.BRANCH_NAME).startsWith('PR-')) {\n                pullRequest.comment(comment)\n              }\n            }\n          }\n        }\n        node('dgl-ci-windows-cpu') {\n            bat(script: \"rmvirtualenv ${BUILD_TAG}\", returnStatus: true)\n        }\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "NEWS.md",
          "type": "blob",
          "size": 2.134765625,
          "content": "DGL release and change logs\n==========\n\nRefer to the roadmap issue for the on-going versions and features.\n\n0.2\n---\nMajor release that includes many features, bugfix and performance improvement.\nSpeed of GCN model on Pubmed dataset has been improved by **4.19x**! Speed of\nRGCN model on Mutag dataset has been improved by **7.35x**! Important new\nfeature: **graph sampling APIs**.\n\nUpdate details:\n\n# Model examples\n- [x] TreeLSTM w/ MXNet (PR #279 by @szha )\n- [x] GraphSage (@ZiyueHuang )\n- [x] Improve GAT model speed (PR #348 by @jermainewang )\n\n# Core system improvement\n- [x] Immutable CSR graph structure (PR #342 by @zheng-da )\n  - [x] Finish remaining functionality (Issue #369, PR #404 by @yzh119)\n- [x] Nodeflow data structure (PR #361 by @zheng-da )\n- [x] Neighbor sampler (PR #322 )\n- [x] Layer-wise sampler (PR #362 by @GaiYu0 )\n- [x] Multi-GPU support by data parallelism (PR #356 #338 by @ylfdq1118 )\n- [x] More dataset:\n  - [x] Reddit dataset loader (PR #372 by @ZiyueHuang )\n  - [x] PPI dataset loader (PR #395 by @sufeidechabei )\n  - [x] Mini graph classification dataset (PR #364 by @mufeili )\n- [x] NN modules (PR #406 by @jermainewang @mufeili)\n  - [x] GraphConv layer\n  - [x] Edge softmax layer\n- [x] Edge group apply API (PR #358 by @VoVAllen )\n- [x] Reversed graph and transform.py module (PR #331 by @mufeili )\n- [x] Max readout (PR #341 by @mufeili )\n- [x] Random walk APIs (PR #392 by @BarclayII )\n\n# Tutorial/Blog\n- [x] Batched graph classification in DGL (PR #360 by @mufeili )\n- [x] Understanding GAT (@sufeidechabei )\n\n# Project improvement\n- [x] Python lint check (PR #330 by @jermainewang )\n- [x] Win CI (PR #324 by @BarclayII )\n- [x] Auto doc build (by @VoVAllen )\n- [x] Unify tests for different backends (PR #333 by @BarclayII )\n\n0.1.3\n-----\nBug fix\n* Compatible with Pytorch v1.0\n* Bug fix in networkx graph conversion.\n\n0.1.2\n-----\nFirst open release.\n* Basic graph APIs.\n* Basic message passing APIs.\n* Pytorch backend.\n* MXNet backend.\n* Optimization using SPMV.\n* Model examples w/ Pytorch:\n  - GCN\n  - GAT\n  - JTNN\n  - DGMG\n  - Capsule\n  - LGNN\n  - RGCN\n  - Transformer\n  - TreeLSTM\n* Model examples w/ MXNet:\n  - GCN\n  - GAT\n  - RGCN\n  - SSE\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 31.4443359375,
          "content": "<p align=\"center\">\n  <img src=\"http://data.dgl.ai/asset/logo.jpg\" height=\"200\">\n</p>\n\n[![Latest Release](https://img.shields.io/github/v/release/dmlc/dgl)](https://github.com/dmlc/dgl/releases)\n[![Conda Latest Release](https://anaconda.org/dglteam/dgl/badges/version.svg)](https://anaconda.org/dglteam/dgl)\n[![Build Status](https://ci.dgl.ai/buildStatus/icon?job=DGL/master)](https://ci.dgl.ai/job/DGL/job/master/)\n[![Benchmark by ASV](http://img.shields.io/badge/benchmarked%20by-asv-green.svg?style=flat)](https://asv.dgl.ai/)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](./LICENSE)\n[![Twitter](https://img.shields.io/twitter/follow/DGLGraph?style=social)](https://twitter.com/GraphDeep)\n\n[Website](https://www.dgl.ai) | [A Blitz Introduction to DGL](https://docs.dgl.ai/tutorials/blitz/index.html) | Documentation ([Latest](https://docs.dgl.ai/en/latest/) | [Stable](https://docs.dgl.ai)) | [Official Examples](examples/README.md) | [Discussion Forum](https://discuss.dgl.ai) | [Slack Channel](https://join.slack.com/t/deep-graph-library/shared_invite/zt-eb4ict1g-xcg3PhZAFAB8p6dtKuP6xQ)\n\nDGL is an easy-to-use, high performance and scalable Python package for deep learning on graphs. DGL is framework agnostic, meaning if a deep graph model is a component of an end-to-end application, the rest of the logics can be implemented in any major frameworks, such as PyTorch, Apache MXNet or TensorFlow.\n\n<p align=\"center\">\n  <img src=\"http://data.dgl.ai/asset/image/DGL-Arch.png\" alt=\"DGL v0.4 architecture\" width=\"600\">\n  <br>\n  <b>Figure</b>: DGL Overall Architecture\n</p>\n\n## Highlighted Features\n\n### A GPU-ready graph library\n\nDGL provides a powerful graph object that can reside on either CPU or GPU. It bundles structural data as well as features for better control. We provide a variety of functions for computing with graph objects including efficient and customizable message passing primitives for Graph Neural Networks.\n\n### A versatile tool for GNN researchers and practitioners\n\nThe field of graph deep learning is still rapidly evolving and many research ideas emerge by standing on the shoulders of giants. To ease the process, [DGl-Go](https://github.com/dmlc/dgl/tree/master/dglgo) is a command-line interface to get started with training, using and studying state-of-the-art GNNs.\nDGL collects a rich set of [example implementations](https://github.com/dmlc/dgl/tree/master/examples) of popular GNN models of a wide range of topics. Researchers can [search](https://www.dgl.ai/) for related models to innovate new ideas from or use them as baselines for experiments. Moreover, DGL provides many state-of-the-art [GNN layers and modules](https://docs.dgl.ai/api/python/nn.html) for users to build new model architectures. DGL is one of the preferred platforms for many standard graph deep learning benchmarks including [OGB](https://ogb.stanford.edu/) and [GNNBenchmarks](https://github.com/graphdeeplearning/benchmarking-gnns).\n\n### Easy to learn and use\n\nDGL provides plenty of learning materials for all kinds of users from ML researchers to domain experts. The [Blitz Introduction to DGL](https://docs.dgl.ai/tutorials/blitz/index.html) is a 120-minute tour of the basics of graph machine learning. The [User Guide](https://docs.dgl.ai/guide/index.html) explains in more details the concepts of graphs as well as the training methodology. All of them include code snippets in DGL that are runnable and ready to be plugged into one’s own pipeline.\n\n### Scalable and efficient\n\nIt is convenient to train models using DGL on large-scale graphs across **multiple GPUs** or **multiple machines**. DGL extensively optimizes the whole stack to reduce the overhead in communication, memory consumption and synchronization. As a result, DGL can easily scale to billion-sized graphs. Get started with the [tutorials](https://docs.dgl.ai/en/tutorials/dist/index.html) and [user guide](https://docs.dgl.ai/en/latest/guide/distributed.html) for distributed training. See the [system performance note](https://docs.dgl.ai/performance.html) for the comparison with other tools.\n\n## Get Started\n\nUsers can install DGL from [pip and conda](https://www.dgl.ai/pages/start.html). You can also download GPU enabled DGL docker [containers](https://catalog.ngc.nvidia.com/orgs/nvidia/containers/dgl) (backended by PyTorch) from NVIDIA NGC for both x86 and ARM based linux systems. Advanced users can follow the [instructions](https://docs.dgl.ai/install/index.html#install-from-source) to install from source.\n\nFor absolute beginners, start with [the Blitz Introduction to DGL](https://docs.dgl.ai/tutorials/blitz/index.html). It covers the basic concepts of common graph machine learning tasks and a step-by-step on building Graph Neural Networks (GNNs) to solve them.\n\nFor acquainted users who wish to learn more,\n\n* Experience state-of-the-art GNN models in only two command-lines using [DGL-Go](https://github.com/dmlc/dgl/tree/master/dglgo).\n* Learn DGL by [example implementations](https://www.dgl.ai/) of popular GNN models.\n* Read the [User Guide](https://docs.dgl.ai/guide/index.html) ([中文版链接](https://docs.dgl.ai/guide_cn/index.html)), which explains the concepts and usage of DGL in much more details.\n* Go through the tutorials for advanced features like [stochastic training of GNNs](https://docs.dgl.ai/tutorials/large/index.html), training on [multi-GPU](https://docs.dgl.ai/tutorials/multi/index.html) or [multi-machine](https://docs.dgl.ai/tutorials/dist/index.html).\n* [Study classical papers](https://docs.dgl.ai/tutorials/models/index.html) on graph machine learning alongside DGL.\n* Search for the usage of a specific API in the [API reference manual](https://docs.dgl.ai/api/python/index.html), which organizes all DGL APIs by their namespace.\n\nAll the learning materials are available at our [documentation site](https://docs.dgl.ai/). If you are new to deep learning in general,\ncheck out the open source book [Dive into Deep Learning](https://d2l.ai/).\n\n\n## Community\n\n### Get connected\n\nWe provide multiple channels to connect you to the community of the DGL developers, users, and the general GNN academic researchers:\n\n* Our Slack channel, [click to join](https://join.slack.com/t/deep-graph-library/shared_invite/zt-eb4ict1g-xcg3PhZAFAB8p6dtKuP6xQ)\n* Our discussion forum: https://discuss.dgl.ai/\n* Our [Zhihu blog (in Chinese)](https://www.zhihu.com/column/c_1070749881013936128)\n* Monthly GNN User Group online seminar ([event link](https://www.eventbrite.com/e/graph-neural-networks-user-group-tickets-137512275919?utm-medium=discovery&utm-campaign=social&utm-content=attendeeshare&aff=escb&utm-source=cp&utm-term=listing) | [past videos](https://www.youtube.com/channel/UCnmuSDY1pTlaFH1WRQElfTg))\n\nTake the survey [here](https://forms.gle/Ej3jHCocACmb49Gp8) and leave any feedback to make DGL better fit for your needs. Thanks!\n\n### DGL-powered projects\n\n* DGL-LifeSci: a DGL-based package for various applications in life science with graph neural networks. https://github.com/awslabs/dgl-lifesci\n* DGL-KE: a high performance, easy-to-use, and scalable package for learning large-scale knowledge graph embeddings. https://github.com/awslabs/dgl-ke\n* Benchmarking GNN: https://github.com/graphdeeplearning/benchmarking-gnns\n* OGB: a collection of realistic, large-scale, and diverse benchmark datasets for machine learning on graphs. https://ogb.stanford.edu/\n* Graph4NLP: an easy-to-use library for R&D at the intersection of Deep Learning on Graphs and Natural Language Processing. https://github.com/graph4ai/graph4nlp\n* GNN-RecSys: https://github.com/je-dbl/GNN-RecSys\n* Amazon Neptune ML: a new capability of Neptune that uses Graph Neural Networks (GNNs), a machine learning technique purpose-built for graphs, to make easy, fast, and more accurate predictions using graph data. https://aws.amazon.com/cn/neptune/machine-learning/\n* GNNLens2: Visualization tool for Graph Neural Networks. https://github.com/dmlc/GNNLens2\n* RNAGlib: A package to facilitate construction, analysis, visualization and machine learning on RNA 2.5D Graphs. Includes a pre-built dataset: https://rnaglib.cs.mcgill.ca\n* OpenHGNN: Model zoo and benchmarks for Heterogeneous Graph Neural Networks. https://github.com/BUPT-GAMMA/OpenHGNN\n* TGL: A graph learning framework for large-scale temporal graphs. https://github.com/amazon-research/tgl\n* gtrick: Bag of Tricks for Graph Neural Networks. https://github.com/sangyx/gtrick\n* ArangoDB-DGL Adapter: Import [ArangoDB](https://github.com/arangodb/arangodb) graphs into DGL and vice-versa. https://github.com/arangoml/dgl-adapter\n* DGLD: [DGLD](https://github.com/EagleLab-ZJU/DGLD) is an open-source library for Deep Graph Anomaly Detection based on pytorch and DGL.\n### Awesome Papers Using DGL\n\n1. [**Benchmarking Graph Neural Networks**](https://arxiv.org/pdf/2003.00982.pdf), *Vijay Prakash Dwivedi, Chaitanya K. Joshi, Thomas Laurent, Yoshua Bengio, Xavier Bresson*\n\n1. [**Open Graph Benchmarks: Datasets for Machine Learning on Graphs**](https://arxiv.org/pdf/2005.00687.pdf), NeurIPS'20, *Weihua Hu, Matthias Fey, Marinka Zitnik, Yuxiao Dong, Hongyu Ren, Bowen Liu, Michele Catasta, Jure Leskovec*\n\n1. [**DropEdge: Towards Deep Graph Convolutional Networks on Node Classification**](https://openreview.net/pdf?id=Hkx1qkrKPr), ICLR'20, *Yu Rong, Wenbing Huang, Tingyang Xu, Junzhou Huan*\n\n1. [**Discourse-Aware Neural Extractive Text Summarization**](https://www.aclweb.org/anthology/2020.acl-main.451/), ACL'20, *Jiacheng Xu, Zhe Gan, Yu Cheng, Jingjing Liu*\n\n1. [**GCC: Graph Contrastive Coding for Graph Neural Network Pre-Training**](https://dl.acm.org/doi/pdf/10.1145/3394486.3403168?casa_token=EClsH2Vc4DcAAAAA:LIB8cbtr6yTDbYuv4cTLwTIYeDq5Y2dhj_ktcWdKpzdPLGeiuL0o8GlcN4QIOnpsAnmGeGVZ), KDD'20, *Jiezhong Qiu, Qibin Chen, Yuxiao Dong, Jing Zhang, Hongxia Yang, Ming Ding, Kuansan Wang, Jie Tang*\n\n1. [**DGL-KE: Training Knowledge Graph Embeddings at Scale**](https://arxiv.org/pdf/2004.08532), SIGIR'20, *Da Zheng, Xiang Song, Chao Ma, Zeyuan Tan, Zihao Ye, Jin Dong, Hao Xiong, Zheng Zhang, George Karypis*\n\n1. [**Improving Graph Neural Network Expressivity via Subgraph Isomorphism Counting**](https://arxiv.org/pdf/2006.09252.pdf), *Giorgos Bouritsas, Fabrizio Frasca, Stefanos Zafeiriou, Michael M. Bronstein*\n\n1. [**INT: An Inequality Benchmark for Evaluating Generalization in Theorem Proving**](https://arxiv.org/pdf/2007.02924.pdf), *Yuhuai Wu, Albert Q. Jiang, Jimmy Ba, Roger Grosse*\n\n1. [**Finding Patient Zero: Learning Contagion Source with Graph Neural Networks**](https://arxiv.org/pdf/2006.11913.pdf), *Chintan Shah, Nima Dehmamy, Nicola Perra, Matteo Chinazzi, Albert-László Barabási, Alessandro Vespignani, Rose Yu*\n\n1. [**FeatGraph: A Flexible and Efficient Backend for Graph Neural Network Systems**](https://arxiv.org/pdf/2008.11359.pdf), SC'20, *Yuwei Hu, Zihao Ye, Minjie Wang, Jiali Yu, Da Zheng, Mu Li, Zheng Zhang, Zhiru Zhang, Yida Wang*\n\n\n<details><summary>more</summary>\n\n11. [**BP-Transformer: Modelling Long-Range Context via Binary Partitioning.**](https://arxiv.org/pdf/1911.04070.pdf), *Zihao Ye, Qipeng Guo, Quan Gan, Xipeng Qiu, Zheng Zhang*\n\n12. [**OptiMol: Optimization of Binding Affinities in Chemical Space for Drug Discovery**](https://www.biorxiv.org/content/biorxiv/early/2020/06/16/2020.05.23.112201.full.pdf), *Jacques Boitreaud,Vincent Mallet, Carlos Oliver, Jérôme Waldispühl*\n\n1. [**JAKET: Joint Pre-training of Knowledge Graph and Language Understanding**](https://arxiv.org/pdf/2010.00796.pdf), *Donghan Yu, Chenguang Zhu, Yiming Yang, Michael Zeng*\n\n1. [**Architectural Implications of Graph Neural Networks**](https://arxiv.org/pdf/2009.00804.pdf), *Zhihui Zhang, Jingwen Leng, Lingxiao Ma, Youshan Miao, Chao Li, Minyi Guo*\n\n1. [**Combining Reinforcement Learning and Constraint Programming for Combinatorial Optimization**](https://arxiv.org/pdf/2006.01610.pdf), *Quentin Cappart, Thierry Moisan, Louis-Martin Rousseau1, Isabeau Prémont-Schwarz, and Andre Cire*\n\n1. [**Therapeutics Data Commons: Machine Learning Datasets and Tasks for Therapeutics**](https://arxiv.org/abs/2102.09548) ([code repo](https://github.com/mims-harvard/TDC)), *Kexin Huang, Tianfan Fu, Wenhao Gao, Yue Zhao, Yusuf Roohani, Jure Leskovec, Connor W. Coley, Cao Xiao, Jimeng Sun, Marinka Zitnik*\n\n1. [**Sparse Graph Attention Networks**](https://arxiv.org/abs/1912.00552), *Yang Ye, Shihao Ji*\n\n1. [**On Self-Distilling Graph Neural Network**](https://arxiv.org/pdf/2011.02255.pdf), *Yuzhao Chen, Yatao Bian, Xi Xiao, Yu Rong, Tingyang Xu, Junzhou Huang*\n\n1. [**Learning Robust Node Representations on Graphs**](https://arxiv.org/pdf/2008.11416.pdf), *Xu Chen, Ya Zhang, Ivor Tsang, and Yuangang Pan*\n\n1. [**Recurrent Event Network: Autoregressive Structure Inference over Temporal Knowledge Graphs**](https://arxiv.org/abs/1904.05530), *Woojeong Jin, Meng Qu, Xisen Jin, Xiang Ren*\n\n1. [**Graph Neural Ordinary Differential Equations**](https://arxiv.org/abs/1911.07532), *Michael Poli, Stefano Massaroli, Junyoung Park, Atsushi Yamashita, Hajime Asama, Jinkyoo Park*\n\n1. [**FusedMM: A Unified SDDMM-SpMM Kernel for Graph Embedding and Graph Neural Networks**](https://arxiv.org/pdf/2011.06391.pdf), *Md. Khaledur Rahman, Majedul Haque Sujon, , Ariful Azad*\n\n1. [**An Efficient Neighborhood-based Interaction Model for Recommendation on Heterogeneous Graph**](https://arxiv.org/pdf/2007.00216.pdf), KDD'20 *Jiarui Jin, Jiarui Qin, Yuchen Fang, Kounianhua Du, Weinan Zhang, Yong Yu, Zheng Zhang, Alexander J. Smola*\n\n1. [**Learning Interaction Models of Structured Neighborhood on Heterogeneous Information Network**](https://arxiv.org/pdf/2011.12683.pdf), *Jiarui Jin, Kounianhua Du, Weinan Zhang, Jiarui Qin, Yuchen Fang, Yong Yu, Zheng Zhang, Alexander J. Smola*\n\n1. [**Graphein - a Python Library for Geometric Deep Learning and Network Analysis on Protein Structures**](https://www.biorxiv.org/content/10.1101/2020.07.15.204701v1), *Arian R. Jamasb, Pietro Lió, Tom L. Blundell*\n\n1. [**Graph Policy Gradients for Large Scale Robot Control**](https://arxiv.org/abs/1907.03822), *Arbaaz Khan, Ekaterina Tolstaya, Alejandro Ribeiro, Vijay Kumar*\n\n1. [**Heterogeneous Molecular Graph Neural Networks for Predicting Molecule Properties**](https://arxiv.org/abs/2009.12710), *Zeren Shui, George Karypis*\n\n1. [**Could Graph Neural Networks Learn Better Molecular Representation for Drug Discovery? A Comparison Study of Descriptor-based and Graph-based Models**](https://assets.researchsquare.com/files/rs-81439/v1_stamped.pdf), *Dejun Jiang, Zhenxing Wu, Chang-Yu Hsieh, Guangyong Chen, Ben Liao, Zhe Wang, Chao Shen, Dongsheng Cao, Jian Wu, Tingjun Hou*\n\n1. [**Principal Neighbourhood Aggregation for Graph Nets**](https://arxiv.org/abs/2004.05718), *Gabriele Corso, Luca Cavalleri, Dominique Beaini, Pietro Liò, Petar Veličković*\n\n1. [**Collective Multi-type Entity Alignment Between Knowledge Graphs**](https://dl.acm.org/doi/abs/10.1145/3366423.3380289), *Qi Zhu, Hao Wei, Bunyamin Sisman, Da Zheng, Christos Faloutsos, Xin Luna Dong, Jiawei Han*\n\n1. [**Graph Representation Forecasting of Patient's Medical Conditions: towards A Digital Twin**](https://arxiv.org/abs/2009.08299), *Pietro Barbiero, Ramon Viñas Torné, Pietro Lió*\n\n1. [**Relational Graph Learning on Visual and Kinematics Embeddings for Accurate Gesture Recognition in Robotic Surgery**](https://arxiv.org/abs/2011.01619), *Yong-Hao Long, Jie-Ying Wu, Bo Lu, Yue-Ming Jin, Mathias Unberath, Yun-Hui Liu, Pheng-Ann Heng and Qi Dou*\n\n1. [**Dark Reciprocal-Rank: Boosting Graph-Convolutional Self-Localization Network via Teacher-to-student Knowledge Transfer**](https://arxiv.org/abs/2011.00402), *Takeda Koji, Tanaka Kanji*\n\n1. [**Graph InfoClust: Leveraging Cluster-Level Node Information For Unsupervised Graph Representation Learning**](https://arxiv.org/abs/2009.06946), *Costas Mavromatis, George Karypis*\n\n1. [**GraphSeam: Supervised Graph Learning Framework for Semantic UV Mapping**](https://arxiv.org/abs/2011.13748), *Fatemeh Teimury, Bruno Roy, Juan Sebastian Casallas, David macdonald, Mark Coates*\n\n1. [**Comprehensive Study on Molecular Supervised Learning with Graph Neural Networks**](https://pubs.acs.org/doi/10.1021/acs.jcim.0c00416), *Doyeong Hwang, Soojung Yang, Yongchan Kwon, Kyung Hoon Lee, Grace Lee, Hanseok Jo, Seyeol Yoon, and Seongok Ryu*\n\n1. [**A graph auto-encoder model for miRNA-disease associations prediction**](https://academic.oup.com/bib/advance-article-abstract/doi/10.1093/bib/bbaa240/5929824?redirectedFrom=fulltext), *Zhengwei Li, Jiashu Li, Ru Nie, Zhu-Hong You, Wenzheng Bao*\n\n1. [**Graph convolutional regression of cardiac depolarization from sparse endocardial maps**](https://arxiv.org/abs/2009.14068), STACOM 2020 workshop, *Felix Meister, Tiziano Passerini, Chloé Audigier, Èric Lluch, Viorel Mihalef, Hiroshi Ashikaga, Andreas Maier, Henry Halperin, Tommaso Mansi*\n\n1. [**AttnIO: Knowledge Graph Exploration with In-and-Out Attention Flow for Knowledge-Grounded Dialogue**](https://www.aclweb.org/anthology/2020.emnlp-main.280/), EMNLP'20, *Jaehun Jung, Bokyung Son, Sungwon Lyu*\n\n1. [**Learning from Non-Binary Constituency Trees via Tensor Decomposition**](https://github.com/danielecastellana22/tensor-tree-nn), COLING'20, *Daniele Castellana, Davide Bacciu*\n\n1. [**Inducing Alignment Structure with Gated Graph Attention Networks for Sentence Matching**](https://arxiv.org/abs/2010.07668), *Peng Cui, Le Hu, Yuanchao Liu*\n\n1. [**Enhancing Extractive Text Summarization with Topic-Aware Graph Neural Networks**](https://arxiv.org/abs/2010.06253), COLING'20, *Peng Cui, Le Hu, Yuanchao Liu*\n\n1. [**Double Graph Based Reasoning for Document-level Relation Extraction**](https://arxiv.org/abs/2009.13752), EMNLP'20, *Shuang Zeng, Runxin Xu, Baobao Chang, Lei Li*\n\n1. [**Systematic Generalization on gSCAN with Language Conditioned Embedding**](https://arxiv.org/abs/2009.05552), AACL-IJCNLP'20, *Tong Gao, Qi Huang, Raymond J. Mooney*\n\n1. [**Automatic selection of clustering algorithms using supervised graph embedding**](https://arxiv.org/pdf/2011.08225.pdf), *Noy Cohen-Shapira, Lior Rokach*\n\n1. [**Improving Learning to Branch via Reinforcement Learning**](https://openreview.net/forum?id=z4D7-PTxTb), *Haoran Sun, Wenbo Chen, Hui Li, Le Song*\n\n1. [**A Practical Guide to Graph Neural Networks**](https://arxiv.org/pdf/2010.05234.pdf), *Isaac Ronald Ward, Jack Joyner, Casey Lickfold, Stash Rowe, Yulan Guo, Mohammed Bennamoun*, [code](https://github.com/isolabs/gnn-tutorial)\n\n1. [**APAN: Asynchronous Propagation Attention Network for Real-time Temporal Graph Embedding**](https://arxiv.org/pdf/2011.11545.pdf), SIGMOD'21, *Xuhong Wang, Ding Lyu, Mengjian Li, Yang Xia, Qi Yang, Xinwen Wang, Xinguang Wang, Ping Cui, Yupu Yang, Bowen Sun, Zhenyu Guo, Junkui Li*\n\n1. [**Uncertainty-Matching Graph Neural Networks to Defend Against Poisoning Attacks**](https://arxiv.org/pdf/2009.14455.pdf), *Uday Shankar Shanthamallu, Jayaraman J. Thiagarajan, Andreas Spanias*\n\n1. [**Computing Graph Neural Networks: A Survey from Algorithms to Accelerators**](https://arxiv.org/pdf/2010.00130.pdf), *Sergi Abadal, Akshay Jain, Robert Guirado, Jorge López-Alonso, Eduard Alarcón*\n\n1. [**NHK_STRL at WNUT-2020 Task 2: GATs with Syntactic Dependencies as Edges and CTC-based Loss for Text Classification**](https://www.aclweb.org/anthology/2020.wnut-1.43.pdf), *Yuki Yasuda, Taichi Ishiwatari, Taro Miyazaki, Jun Goto*\n\n1. [**Relation-aware Graph Attention Networks with Relational Position Encodings for Emotion Recognition in Conversations**](https://www.aclweb.org/anthology/2020.emnlp-main.597.pdf), *Taichi Ishiwatari, Yuki Yasuda, Taro Miyazaki, Jun Goto*\n\n1. [**PGM-Explainer: Probabilistic Graphical Model Explanations for Graph Neural Networks**](https://proceedings.neurips.cc/paper/2020/file/8fb134f258b1f7865a6ab2d935a897c9-Paper.pdf), *Minh N. Vu, My T. Thai*\n\n1. [**A Generalization of Transformer Networks to Graphs**](https://arxiv.org/pdf/2012.09699.pdf), *Vijay Prakash Dwivedi, Xavier Bresson*\n\n1. [**Discourse-Aware Neural Extractive Text Summarization**](https://www.aclweb.org/anthology/2020.acl-main.451.pdf), ACL'20, *Jiacheng Xu, Zhe Gan, Yu Cheng, Jingjing Liu*\n\n1. [**Learning Robust Node Representations on Graphs**](https://arxiv.org/abs/2008.11416), *Xu Chen, Ya Zhang, Ivor Tsang, Yuangang Pan*\n\n1. [**Adaptive Graph Diffusion Networks with Hop-wise Attention**](https://arxiv.org/abs/2012.15024), *Chuxiong Sun, Guoshi Wu*\n\n1. [**The Photoswitch Dataset: A Molecular Machine Learning Benchmark for the Advancement of Synthetic Chemistry**](https://arxiv.org/abs/2008.03226), *Aditya R. Thawani, Ryan-Rhys Griffiths, Arian Jamasb, Anthony Bourached, Penelope Jones, William McCorkindale, Alexander A. Aldrick, Alpha A. Lee*\n\n1. [**A community-powered search of machine learning strategy space to find NMR property prediction models**](https://arxiv.org/abs/2008.05994), *Lars A. Bratholm, Will Gerrard, Brandon Anderson, Shaojie Bai, Sunghwan Choi, Lam Dang, Pavel Hanchar, Addison Howard, Guillaume Huard, Sanghoon Kim, Zico Kolter, Risi Kondor, Mordechai Kornbluth, Youhan Lee, Youngsoo Lee, Jonathan P. Mailoa, Thanh Tu Nguyen, Milos Popovic, Goran Rakocevic, Walter Reade, Wonho Song, Luka Stojanovic, Erik H. Thiede, Nebojsa Tijanic, Andres Torrubia, Devin Willmott, Craig P. Butts, David R. Glowacki, Kaggle participants*\n\n1. [**Adaptive Layout Decomposition with Graph Embedding Neural Networks**](http://www.cse.cuhk.edu.hk/~byu/papers/C98-DAC2020-MPL-Selector.pdf), *Wei Li, Jialu Xia, Yuzhe Ma, Jialu Li, Yibo Lin, Bei Yu*, DAC'20\n\n1. [**Transfer Learning with Graph Neural Networks for Optoelectronic Properties of Conjugated Oligomers**](https://aip.scitation.org/doi/10.1063/5.0037863), J. Chem. Phys. 154, *Chee-Kong Lee, Chengqiang Lu, Yue Yu, Qiming Sun, Chang-Yu Hsieh, Shengyu Zhang, Qi Liu, and  Liang Shi*\n\n1. [**Jet tagging in the Lund plane with graph networks**](https://link.springer.com/article/10.1007/JHEP03(2021)052), Journal of High Energy Physics 2021, *Frédéric A. Dreyer and Huilin Qu*\n\n1. [**Global Attention Improves Graph Networks Generalization**](https://arxiv.org/abs/2006.07846), *Omri Puny, Heli Ben-Hamu, and Yaron Lipman*\n\n1. [**Learning over Families of Sets -- Hypergraph Representation Learning for Higher Order Tasks**](https://arxiv.org/abs/2101.07773), SDM 2021, *Balasubramaniam Srinivasan, Da Zheng, and George Karypis*\n\n1. [**SSFG: Stochastically Scaling Features and Gradients for Regularizing Graph Convolution Networks**](https://arxiv.org/abs/2102.10338), *Haimin Zhang, Min Xu*\n\n1. [**Application and evaluation of knowledge graph embeddings in biomedical data**](https://peerj.com/articles/cs-341/), PeerJ Computer Science 7:e341, *Mona Alshahrani​, Maha A. Thafar, Magbubah Essack*\n\n1. [**MoTSE: an interpretable task similarity estimator for small molecular property prediction tasks**](https://www.biorxiv.org/content/10.1101/2021.01.13.426608v2), bioRxiv 2021.01.13.426608, *Han Li, Xinyi Zhao, Shuya Li, Fangping Wan, Dan Zhao, Jianyang Zeng*\n\n1. [**Reinforcement Learning For Data Poisoning on Graph Neural Networks**](https://arxiv.org/abs/2102.06800), *Jacob Dineen, A S M Ahsan-Ul Haque, Matthew Bielskas*\n\n1. [**Generalising Recursive Neural Models by Tensor Decomposition**](https://github.com/danielecastellana22/tensor-tree-nn), IJCNN'20, *Daniele Castellana, Davide Bacciu*\n\n1. [**Tensor Decompositions in Recursive Neural Networks for Tree-Structured Data**](https://github.com/danielecastellana22/tensor-tree-nn), ESANN'20, *Daniele Castellana, Davide Bacciu*\n\n1. [**Combining Self-Organizing and Graph Neural Networks for Modeling Deformable Objects in Robotic Manipulation**](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7806087/), Frotiers in Robotics and AI, *Valencia, Angel J., and Pierre Payeur*\n\n1. [**Joint stroke classification and text line grouping in online handwritten documents with edge pooling attention networks**](https://www.sciencedirect.com/science/article/abs/pii/S0031320321000467), Pattern Recognition, *Jun-Yu Ye, Yan-Ming Zhang, Qing Yang, Cheng-Lin Liu*\n\n1. [**Toward Accurate Predictions of Atomic Properties via Quantum Mechanics Descriptors Augmented Graph Convolutional Neural Network: Application of This Novel Approach in NMR Chemical Shifts Predictions**](https://pubs.acs.org/doi/full/10.1021/acs.jpclett.0c02654), The Journal of Physical Chemistry Letters, *Peng Gao, Jie Zhang, Yuzhu Sun, and Jianguo Yu*\n\n1. [**A Graph Neural Network to Model User Comfort in Robot Navigation**](https://arxiv.org/abs/2102.08863), *Pilar Bachiller, Daniel Rodriguez-Criado, Ronit R. Jorvekar, Pablo Bustos, Diego R. Faria, Luis J. Manso*\n\n1. [**Medical Entity Disambiguation Using Graph Neural Networks**](https://arxiv.org/abs/2104.01488), *Alina Vretinaris, Chuan Lei, Vasilis Efthymiou, Xiao Qin, Fatma Özcan*\n\n1. [**Chemistry-informed Macromolecule Graph Representation for Similarity Computation and Supervised Learning**](https://arxiv.org/abs/2103.02565), *Somesh Mohapatra, Joyce An, Rafael Gómez-Bombarelli*\n\n1. [**Characterizing and Forecasting User Engagement with In-app Action Graph: A Case Study of Snapchat**](https://arxiv.org/pdf/1906.00355.pdf), *Yozen Liu, Xiaolin Shi, Lucas Pierce, Xiang Ren*\n\n1. [**GIPA: General Information Propagation Algorithm for Graph Learning**](https://arxiv.org/abs/2105.06035), *Qinkai Zheng, Houyi Li, Peng Zhang, Zhixiong Yang, Guowei Zhang, Xintan Zeng, Yongchao Liu*\n\n1. [**Graph Ensemble Learning over Multiple Dependency Trees for Aspect-level Sentiment Classification**](https://arxiv.org/abs/2103.11794), NAACL'21, *Xiaochen Hou, Peng Qi, Guangtao Wang, Rex Ying, Jing Huang, Xiaodong He, Bowen Zhou*\n\n1. [**Enhancing Scientific Papers Summarization with Citation Graph**](https://arxiv.org/abs/2104.03057), AAAI'21, *Chenxin An, Ming Zhong, Yiran Chen, Danqing Wang, Xipeng Qiu, Xuanjing Huang*\n\n1. [**Improving Graph Representation Learning by Contrastive Regularization**](https://arxiv.org/pdf/2101.11525.pdf), *Kaili Ma, Haochen Yang, Han Yang, Tatiana Jin, Pengfei Chen, Yongqiang Chen, Barakeel Fanseu Kamhoua, James Cheng*\n\n1. [**Extract the Knowledge of Graph Neural Networks and Go Beyond it: An Effective Knowledge Distillation Framework**](https://arxiv.org/pdf/2103.02885.pdf), WWW'21, *Cheng Yang, Jiawei Liu, Chuan Shi*\n\n1. [**VIKING: Adversarial Attack on Network Embeddings via Supervised Network Poisoning**](https://arxiv.org/pdf/2102.07164.pdf), PAKDD'21, *Viresh Gupta, Tanmoy Chakraborty*\n\n1. [**Knowledge Graph Embedding using Graph Convolutional Networks with Relation-Aware Attention**](https://arxiv.org/pdf/2102.07200.pdf), *Nasrullah Sheikh, Xiao Qin, Berthold Reinwald, Christoph Miksovic, Thomas Gschwind, Paolo Scotton*\n\n1. [**SLAPS: Self-Supervision Improves Structure Learning for Graph Neural Networks**](https://arxiv.org/pdf/2102.05034.pdf), *Bahare Fatemi, Layla El Asri, Seyed Mehran Kazemi*\n\n1. [**Finding Needles in Heterogeneous Haystacks**](https://homepage.divms.uiowa.edu/~badhikari/assets/doc/papers/CONGCNIAAI2021.pdf), AAAI'21, *Bijaya Adhikari, Liangyue Li, Nikhil Rao, Karthik Subbian*\n\n1. [**RetCL: A Selection-based Approach for Retrosynthesis via Contrastive Learning**](https://arxiv.org/abs/2105.00795), IJCAI 2021, *Hankook Lee, Sungsoo Ahn, Seung-Woo Seo, You Young Song, Eunho Yang, Sung-Ju Hwang, Jinwoo Shin*\n\n1. [**Accurate Prediction of Free Solvation Energy of Organic Molecules via Graph Attention Network and Message Passing Neural Network from Pairwise Atomistic Interactions**](https://arxiv.org/abs/2105.02048), *Ramin Ansari, Amirata Ghorbani*\n\n1. [**DIPS-Plus: The Enhanced Database of Interacting Protein Structures for Interface Prediction**](https://arxiv.org/abs/2106.04362), *Alex Morehead, Chen Chen, Ada Sedova, Jianlin Cheng*\n\n1. [**Coreference-Aware Dialogue Summarization**](https://arxiv.org/abs/2106.08556), SIGDIAL'21, *Zhengyuan Liu, Ke Shi, Nancy F. Chen*\n\n1. [**Document Structure aware Relational Graph Convolutional Networks for Ontology Population**](https://arxiv.org/abs/2104.12950), arXiv, *Abhay M Shalghar, Ayush Kumar, Balaji Ganesan, Aswin Kannan, Shobha G*\n\n1. [**Covid-19 Detection from Chest X-ray and Patient Metadata using Graph Convolutional Neural Networks**](https://arxiv.org/abs/2105.09720), *Thosini Bamunu Mudiyanselage, Nipuna Senanayake, Chunyan Ji, Yi Pan, Yanqing Zhang*\n\n1. [**Rossmann-toolbox: a deep learning-based protocol for the prediction and design of cofactor specificity in Rossmann fold proteins**](https://academic.oup.com/bib/advance-article/doi/10.1093/bib/bbab371/6375059), Briefings in Bioinformatics, *Kamil Kaminski, Jan Ludwiczak, Maciej Jasinski, Adriana Bukala, Rafal Madaj, Krzysztof Szczepaniak, Stanislaw Dunin-Horkawicz*\n\n1. [**LGESQL: Line Graph Enhanced Text-to-SQL Model with Mixed Local and Non-Local Relations**](https://arxiv.org/pdf/2106.01093.pdf), ACL'21, *Ruisheng Cao, Lu Chen, Zhi Chen, Yanbin Zhao, Su Zhu, Kai Yu*\n\n1. [**Enhancing Graph Neural Networks via auxiliary training for semi-supervised node classification**](https://www.sciencedirect.com/science/article/pii/S0950705121001477), Knowledge-Based System'21, *Yao Wu, Yu Song, Hong Huang, Fanghua Ye, Xing Xie, Hai Jin*\n\n1. [**Modeling Graph Node Correlations with Neighbor Mixture Models**](https://arxiv.org/pdf/2103.15966.pdf), *Linfeng Liu, Michael C. Hughes, Li-Ping Liu*\n\n1. [**COMBINING PHYSICS AND MACHINE LEARNING FOR NETWORK FLOW ESTIMATION**](https://openreview.net/pdf/9dc2744a465941220de07cf308acf822ec8aaa64.pdf), ICLR'21, *Arlei Silva, Furkan Kocayusufoglu, Saber Jafarpour, Francesco Bullo, Ananthram Swami, Ambuj Singh*\n\n1. [**A Classification Method for Academic Resources Based on a Graph Attention Network**](https://www.mdpi.com/1999-5903/13/3/64/htm), Future Internet'21, *Jie Yu, Yaliu Li, Chenle Pan and Junwei Wang*\n\n1. [**Large Graph Convolutional Network Training with GPU-Oriented Data Communication Architecture**](https://arxiv.org/abs/2103.03330), *Seung Won Min, Kun Wu, Sitao Huang, Mert Hidayetoğlu, Jinjun Xiong, Eiman Ebrahimi, Deming Chen, Wen-mei Hwu*\n\n1. [**Graph Attention Multi-Layer Perception**](https://github.com/PKU-DAIR/GAMLP/blob/main/GAMLP.pdf), *Wentao Zhang, Ziqi Yin, Zeang Sheng, Wen Ouyang, Xiaosen Li, Yangyu Tao, Zhi Yang, Bin Cui*\n\n1. [**GNNLens: A Visual Analytics Approach for Prediction Error Diagnosis of Graph Neural Networks**](https://arxiv.org/abs/2011.11048v5), *Zhihua Jin, Yong Wang, Qianwen Wang, Yao Ming, Tengfei Ma, Huamin Qu*\n\n1. [**How Attentive are Graph Attention Networks?**](https://arxiv.org/pdf/2105.14491.pdf), *Shaked Brody, Uri Alon, Eran Yahav*, [code](https://github.com/tech-srl/how_attentive_are_gats)\n\n1. [**SCENE: Reasoning about Traffic Scenes using Heterogeneous Graph Neural Networks**](https://arxiv.org/pdf/2301.03512.pdf), *Thomas Monninger\\*, Julian Schmidt\\*, Jan Rupprecht, David Raba, Julian Jordan, Daniel Frank, Steffen Staab, Klaus Dietmayer*, [code](https://github.com/schmidt-ju/scene), \\*co-first authors\n\n</details>\n\n## Contributing\n\nPlease let us know if you encounter a bug or have any suggestions by [filing an issue](https://github.com/dmlc/dgl/issues).\n\nWe welcome all contributions from bug fixes to new features and extensions.\n\nWe expect all contributions discussed in the issue tracker and going through PRs.  Please refer to our [contribution guide](https://docs.dgl.ai/contribute.html).\n\n## Cite\n\nIf you use DGL in a scientific publication, we would appreciate citations to the following paper:\n```\n@article{wang2019dgl,\n    title={Deep Graph Library: A Graph-Centric, Highly-Performant Package for Graph Neural Networks},\n    author={Minjie Wang and Da Zheng and Zihao Ye and Quan Gan and Mufei Li and Xiang Song and Jinjing Zhou and Chao Ma and Lingfan Yu and Yu Gai and Tianjun Xiao and Tong He and George Karypis and Jinyang Li and Zheng Zhang},\n    year={2019},\n    journal={arXiv preprint arXiv:1909.01315}\n}\n```\n\n## The Team\n\nDGL is developed and maintained by [NYU, NYU Shanghai, AWS Shanghai AI Lab, and AWS MXNet Science Team](https://www.dgl.ai/pages/about.html).\n\n## License\n\nDGL uses Apache License 2.0.\n"
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "conda",
          "type": "tree",
          "content": null
        },
        {
          "name": "dgl_sparse",
          "type": "tree",
          "content": null
        },
        {
          "name": "dglgo",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "graphbolt",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.0302734375,
          "content": "[tool.black]\n\nline-length = 80\n"
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "readthedocs.yml",
          "type": "blob",
          "size": 0.1162109375,
          "content": "build:\n  image: latest\n\nformats: []\n\npython:\n  version: 3.6\n  use_system_site_packages: true\n  setup_py_install: false\n"
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tensoradapter",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "tutorials",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}