{
  "metadata": {
    "timestamp": 1736561200641,
    "page": 170,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "networkx/networkx",
      "stars": 15256,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.1630859375,
          "content": "# Allow coverage to decrease by 0.05%.\ncoverage:\n  status:\n    project:\n      default:\n        threshold: 0.05%\n\n# Don't post a comment on pull requests.\ncomment: off\n"
        },
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.083984375,
          "content": "[run]\nbranch = True\nsource = networkx\nomit = */tests/*, conftest.py, *testing/test.py\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.640625,
          "content": "f6755ffa00211b523c6c0bec5398bc6c3c43c8b1\n44680a2466c3c429d9c01f55d71952efbb09b25c\ne9c6af06313d853fd6d03799b85905f6ac38691c\n735e6d856b81989cc12dfa30d8cd8e2ddb7dcead\nf30e9392bef0dccbcfd1b73ccb934064f6200fa3\nb22d6b36ce0545995c99d233546e8a1fe7e27fc5\n3351206a3ce5b3a39bb2fc451e93ef545b96c95b\n99fc1bb6690ac1a45124db2a01c12fd64dcb109b\ncea08c3bb8ca5aa2e167d534b0c5629205733762\nbec833c60c61e838722bf096da75949a9b519d1f\nbe23fa0e422b51f4526828cb19b8105c89e5dcbb\n5c0b11afb4c0882a070d522ef3fa41482ba935d3\n5fcf01b9a43a097c4f579486023d1279b2b88619\n7297ae8a37dd3356b64d383cb0c55735a6364bcc\n3c0f096f66ab352cfaf8dbe2d5fc5731cbbc4338\n9094b639455aca34109f0c167f8efd12778d6ccf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.927734375,
          "content": "*.pyc\n__pycache__\n*~\n.DS_Store\nbuild/*\ndist/*\nnetworkx/version.py\nexamples/*/*.png\ndoc/networkx-documentation.zip\ndoc/networkx_reference.pdf\ndoc/networkx_tutorial.pdf\ndoc/build\ndoc/ghpages_build\n.coverage\n*.class\n\n# Generated while building documentation.\ndoc/auto_examples\ndoc/modules\ndoc/reference/generated\ndoc/reference/algorithms/generated\ndoc/reference/classes/generated\ndoc/reference/readwrite/generated\ndoc/path.to.file\n\nexamples/advanced/edgelist.utf-8\nexamples/basic/grid.edgelist\n\n# Generated when 'python setup_egg.py'\nnetworkx.egg-info/\n\n# Sublime Text project files\n*.sublime-project\n*.sublime-workspace\n\n# Backup files\n*.bak\n\n# IPython Notebook Checkpoints\n.ipynb_checkpoints/\n\n# Vim's swap files\n*.sw[op]\n\n# Spyder project file\n.spyderproject\n\n# PyCharm project file\n.idea\n\n# VS Code settings\n.vscode\n\n# PyTest Cache\n.pytest_cache\n\n# Virtual environment directory\nnetworkx-dev/\n\n# Benchmark products\nbenchmarks/env\nbenchmarks/results\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.7841796875,
          "content": "# Install pre-commit hooks via\n# pre-commit install\n\nrepos:\n  - repo: https://github.com/pre-commit/mirrors-prettier\n    rev: ffb6a759a979008c0e6dff86e39f4745a2d9eac4 # frozen: v3.1.0\n    hooks:\n      - id: prettier\n        files: \\.(html|md|toml|yml|yaml)\n        args: [--prose-wrap=preserve]\n\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: 1dc9eb131c2ea4816c708e4d85820d2cc8542683 # frozen: v0.5.0\n    hooks:\n      - id: ruff\n        args: [\"--fix\", \"--show-fixes\", \"--exit-non-zero-on-fix\"]\n      - id: ruff-format\n\n  - repo: local\n    hooks:\n      - id: generate_requirements.py\n        name: generate_requirements.py\n        language: system\n        entry: python tools/generate_requirements.py\n        files: \"pyproject.toml|requirements/.*\\\\.txt|tools/generate_requirements.py\"\n"
        },
        {
          "name": "CODE_OF_CONDUCT.rst",
          "type": "blob",
          "size": 6.818359375,
          "content": ".. _code_of_conduct:\n\nCode of Conduct\n===============\n\n\nIntroduction\n------------\n\nThis code of conduct applies to all spaces managed by the NetworkX project,\nincluding all public and private mailing lists, issue trackers, wikis, and\nany other communication channel used by our community.\n\nThis code of conduct should be honored by everyone who participates in\nthe NetworkX community formally or informally, or claims any affiliation with the\nproject, in any project-related activities and especially when representing the\nproject, in any role.\n\nThis code is not exhaustive or complete. It serves to distill our common\nunderstanding of a collaborative, shared environment and goals. Please try to\nfollow this code in spirit as much as in letter, to create a friendly and\nproductive environment that enriches the surrounding community.\n\n\nSpecific Guidelines\n-------------------\n\nWe strive to:\n\n1. Be open. We invite anyone to participate in our community. We prefer to use\n   public methods of communication for project-related messages, unless\n   discussing something sensitive. This applies to messages for help or\n   project-related support, too; not only is a public support request much more\n   likely to result in an answer to a question, it also ensures that any\n   inadvertent mistakes in answering are more easily detected and corrected.\n\n2. Be empathetic, welcoming, friendly, and patient. We work together to resolve\n   conflict, and assume good intentions. We may all experience some frustration\n   from time to time, but we do not allow frustration to turn into a personal\n   attack. A community where people feel uncomfortable or threatened is not a\n   productive one.\n\n3. Be collaborative. Our work will be used by other people, and in turn we will\n   depend on the work of others. When we make something for the benefit of the\n   project, we are willing to explain to others how it works, so that they can\n   build on the work to make it even better. Any decision we make will affect\n   users and colleagues, and we take those consequences seriously when making\n   decisions.\n\n4. Be inquisitive. Nobody knows everything! Asking questions early avoids many\n   problems later, so we encourage questions, although we may direct them to\n   the appropriate forum. We will try hard to be responsive and helpful.\n\n5. Be careful in the words that we choose.  We are careful and respectful in\n   our communication and we take responsibility for our own speech. Be kind to\n   others. Do not insult or put down other participants.  We will not accept\n   harassment or other exclusionary behaviour, such as:\n\n    - Violent threats or language directed against another person.\n    - Sexist, racist, or otherwise discriminatory jokes and language.\n    - Posting sexually explicit or violent material.\n    - Posting (or threatening to post) other people's personally identifying information (\"doxing\").\n    - Sharing private content, such as emails sent privately or non-publicly,\n      or unlogged forums such as IRC channel history, without the sender's consent.\n    - Personal insults, especially those using racist or sexist terms.\n    - Unwelcome sexual attention.\n    - Excessive profanity. Please avoid swearwords; people differ greatly in their sensitivity to swearing.\n    - Repeated harassment of others. In general, if someone asks you to stop, then stop.\n    - Advocating for, or encouraging, any of the above behaviour.\n\n\nDiversity Statement\n-------------------\n\nThe NetworkX project welcomes and encourages participation by everyone. We are\ncommitted to being a community that everyone enjoys being part of. Although\nwe may not always be able to accommodate each individual's preferences, we try\nour best to treat everyone kindly.\n\nNo matter how you identify yourself or how others perceive you: we welcome you.\nThough no list can hope to be comprehensive, we explicitly honour diversity in:\nage, culture, ethnicity, genotype, gender identity or expression, language,\nnational origin, neurotype, phenotype, political beliefs, profession, race,\nreligion, sexual orientation, socioeconomic status, subculture and technical\nability.\n\nThough we welcome people fluent in all languages, NetworkX development is\nconducted in English.\n\nStandards for behaviour in the NetworkX community are detailed in the Code of\nConduct above. Participants in our community should uphold these standards\nin all their interactions and help others to do so as well (see next section).\n\n\nReporting Guidelines\n--------------------\n\nWe know that it is painfully common for internet communication to start at or\ndevolve into obvious and flagrant abuse.  We also recognize that sometimes\npeople may have a bad day, or be unaware of some of the guidelines in this Code\nof Conduct. Please keep this in mind when deciding on how to respond to a\nbreach of this Code.\n\nFor clearly intentional breaches, report those to the NetworkX Steering Council\n(see below). For possibly unintentional breaches, you may reply to the person\nand point out this code of conduct (either in public or in private, whatever is\nmost appropriate). If you would prefer not to do that, please feel free to\nreport to the NetworkX Steering Council directly, or ask the Council for\nadvice, in confidence.\n\nYou can report issues to the\n`NetworkX Steering Council <https://github.com/orgs/networkx/teams/steering-council/members>`__,\nat networkx-conduct@groups.io.\n\nIf your report involves any members of the Council, or if they feel they have\na conflict of interest in handling it, then they will recuse themselves from\nconsidering your report. Alternatively, if for any reason you feel\nuncomfortable making a report to the Council, then you can also contact:\n\n- Senior `NumFOCUS staff <https://numfocus.org/code-of-conduct#persons-responsible>`__: conduct@numfocus.org.\n\n\nIncident reporting resolution & Code of Conduct enforcement\n-----------------------------------------------------------\n\nWe will investigate and respond to all complaints. The NetworkX Steering Council\nwill protect the identity of the reporter, and treat the content of\ncomplaints as confidential (unless the reporter agrees otherwise).\n\nIn case of severe and obvious breaches, e.g., personal threat or violent, sexist\nor racist language, we will immediately disconnect the originator from NetworkX\ncommunication channels.\n\nIn cases not involving clear severe and obvious breaches of this code of\nconduct, the process for acting on any received code of conduct violation\nreport will be:\n\n1. acknowledge report is received\n2. reasonable discussion/feedback\n3. mediation (if feedback didn't help, and only if both reporter and reportee agree to this)\n4. enforcement via transparent decision by the NetworkX Steering Council\n\nThe Council will respond to any report as soon as possible, and at most\nwithin 72 hours.\n\n\nEndnotes\n--------\n\nThis document is adapted from:\n\n- `SciPy Code of Conduct <http://scipy.github.io/devdocs/dev/conduct/code_of_conduct.html>`_\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 18.2529296875,
          "content": ".. _contributor_guide:\n\nContributor Guide\n=================\n\n.. note::\n   This document assumes some familiarity with contributing to open source\n   scientific Python projects using GitHub pull requests. If this does not\n   describe you, you may first want to see the :ref:`contributing_faq`.\n   If you are using a LLM or any other AI model, you will still need to\n   follow the process described here.\n\n.. _dev_workflow:\n\nDevelopment Workflow\n--------------------\n\n1. If you are a first-time contributor:\n\n   * Go to `https://github.com/networkx/networkx\n     <https://github.com/networkx/networkx>`_ and click the\n     \"fork\" button to create your own copy of the project.\n\n   * Clone the project to your local computer::\n\n      git clone git@github.com:your-username/networkx.git\n\n   * Navigate to the folder networkx and add the upstream repository::\n\n      git remote add upstream git@github.com:networkx/networkx.git\n\n   * Now, you have remote repositories named:\n\n     - ``upstream``, which refers to the ``networkx`` repository\n     - ``origin``, which refers to your personal fork\n\n   * Next, you need to set up your build environment.\n     Here are instructions for two popular environment managers:\n\n     * ``venv`` (pip based)\n\n       ::\n\n         # Create a virtualenv named ``networkx-dev`` that lives in the directory of\n         # the same name\n         python -m venv networkx-dev\n         # Activate it\n         source networkx-dev/bin/activate\n         # Install main development and runtime dependencies of networkx\n         pip install -r requirements/default.txt -r requirements/test.txt -r requirements/developer.txt\n         #\n         # (Optional) Install pygraphviz and pydot packages\n         # These packages require that you have your system properly configured\n         # and what that involves differs on various systems.\n         # pip install -r requirements/extra.txt\n         #\n         # Build and install networkx from source\n         pip install -e .\n         # Test your installation\n         pytest --pyargs networkx\n\n     * ``conda`` (Anaconda or Miniconda)\n\n       ::\n\n         # Create a conda environment named ``networkx-dev``\n         conda create --name networkx-dev\n         # Activate it\n         conda activate networkx-dev\n         # Install main development and runtime dependencies of networkx\n         conda install -c conda-forge --file requirements/default.txt --file requirements/test.txt --file requirements/developer.txt\n         #\n         # (Optional) Install pygraphviz and pydot packages\n         # These packages require that you have your system properly configured\n         # and what that involves differs on various systems.\n         # conda install -c conda-forge --file requirements/extra.txt\n         #\n         # Install networkx from source\n         pip install -e .\n         # Test your installation\n         pytest --pyargs networkx\n\n   * Finally, we recommend you install pre-commit which checks\n     that your code matches formatting guidelines::\n\n       pre-commit install\n\n2. Develop your contribution:\n\n   * Pull the latest changes from upstream::\n\n      git checkout main\n      git pull upstream main\n\n   * Create a branch for the feature you want to work on. Since the\n     branch name will appear in the merge message, use a sensible name\n     such as 'bugfix-for-issue-1480'::\n\n      git checkout -b bugfix-for-issue-1480 main\n\n   * Commit locally as you progress (``git add`` and ``git commit``)\n\n3. Test your contribution:\n\n   * Run the test suite locally (see `Testing`_ for details)::\n\n      PYTHONPATH=. pytest networkx\n\n   * Running the tests locally *before* submitting a pull request helps catch\n     problems early and reduces the load on the continuous integration\n     system.\n\n4. Ensure your contribution is properly formatted.\n\n   * If you installed ``pre-commit`` as recommended in step 1, all necessary\n     linting should run automatically at commit time. If there are any\n     formatting issues, the commit will not be successful and linting\n     suggestions will be applied to the patch automatically.\n     Simply ``git add`` and ``git commit`` a second time to accept the proposed\n     formatting changes.\n\n   * If the above fails for whatever reason, you can also run the linter over\n     the entire codebase with::\n\n         pre-commit run --all-files\n\n5. Submit your contribution:\n\n   * Push your changes back to your fork on GitHub::\n\n      git push origin bugfix-for-issue-1480\n\n   * Go to GitHub. The new branch will show up with a green Pull Request\n     button---click it.\n\n   * If you want, post on the `mailing list\n     <http://groups.google.com/group/networkx-discuss>`_ to explain your changes or\n     to ask for review.\n\n6. Review process:\n\n   * Every Pull Request (PR) update triggers a set of `continuous integration\n     <https://en.wikipedia.org/wiki/Continuous_integration>`_ services\n     that check that the code is up to standards and passes all our tests.\n     These checks must pass before your PR can be merged.  If one of the\n     checks fails, you can find out why by clicking on the \"failed\" icon (red\n     cross) and inspecting the build and test log.\n\n   * Reviewers (the other developers and interested community members) will\n     write inline and/or general comments on your PR to help\n     you improve its implementation, documentation, and style.  Every single\n     developer working on the project has their code reviewed, and we've come\n     to see it as friendly conversation from which we all learn and the\n     overall code quality benefits.  Therefore, please don't let the review\n     discourage you from contributing: its only aim is to improve the quality\n     of project, not to criticize (we are, after all, very grateful for the\n     time you're donating!).\n\n   * To update your PR, make your changes on your local repository\n     and commit. As soon as those changes are pushed up (to the same branch as\n     before) the PR will update automatically.\n\n   .. note::\n\n      If the PR closes an issue, make sure that GitHub knows to automatically\n      close the issue when the PR is merged.  For example, if the PR closes\n      issue number 1480, you could use the phrase \"Fixes #1480\" in the PR\n      description or commit message.\n\n7. Document deprecations and API changes\n   \n   If your change introduces any API modifications including deprecations,\n   please make sure the PR has the ``type: API`` label.\n\n   To set up a function for deprecation:\n\n   - Use a deprecation warning to warn users. For example::\n\n         msg = \"curly_hair is deprecated and will be removed in v3.0. Use sum() instead.\"\n         warnings.warn(msg, DeprecationWarning)\n\n   - Add a warnings filter to ``networkx/conftest.py``::\n\n         warnings.filterwarnings(\n             \"ignore\", category=DeprecationWarning, message=<start of message>\n         )\n\n   - Add a reminder to ``doc/developer/deprecations.rst`` for the team\n     to remove the deprecated functionality in the future. For example:\n\n     .. code-block:: rst\n\n        * In ``utils/misc.py`` remove ``generate_unique_node`` and related tests.\n\n   .. note::\n\n      To reviewers: make sure the merge message has a brief description of the\n      change(s) and if the PR closes an issue add, for example, \"Closes #123\"\n      where 123 is the issue number.\n\n\nDivergence from ``upstream main``\n---------------------------------\n\nIf GitHub indicates that the branch of your Pull Request can no longer\nbe merged automatically, merge the main branch into yours::\n\n   git fetch upstream main\n   git merge upstream/main\n\nIf any conflicts occur, they need to be fixed before continuing.  See\nwhich files are in conflict using::\n\n   git status\n\nWhich displays a message like::\n\n   Unmerged paths:\n     (use \"git add <file>...\" to mark resolution)\n\n     both modified:   file_with_conflict.txt\n\nInside the conflicted file, you'll find sections like these::\n\n   <<<<<<< HEAD\n   The way the text looks in your branch\n   =======\n   The way the text looks in the main branch\n   >>>>>>> main\n\nChoose one version of the text that should be kept, and delete the\nrest::\n\n   The way the text looks in your branch\n\nNow, add the fixed file::\n\n\n   git add file_with_conflict.txt\n\nOnce you've fixed all merge conflicts, do::\n\n   git commit\n\n.. note::\n\n   Advanced Git users may want to rebase instead of merge,\n   but we squash and merge PRs either way.\n\n\nGuidelines\n----------\n\n* All code should have tests.\n* All code should be documented, to the same\n  `standard <https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard>`_\n  as NumPy and SciPy.\n* All changes are reviewed.  Ask on the\n  `mailing list <http://groups.google.com/group/networkx-discuss>`_ if\n  you get no response to your pull request.\n* Default dependencies are listed in ``requirements/default.txt`` and extra\n  (i.e., optional) dependencies are listed in ``requirements/extra.txt``.\n  We don't often add new default and extra dependencies.  If you are considering\n  adding code that has a dependency, you should first consider adding a gallery\n  example.  Typically, new proposed dependencies would first be added as extra\n  dependencies.  Extra dependencies should be easy to install on all platforms\n  and widely-used.  New default dependencies should be easy to install on all\n  platforms, widely-used in the community, and have demonstrated potential for\n  wide-spread use in NetworkX.\n* Use the following import conventions::\n\n   import numpy as np\n   import scipy as sp\n   import matplotlib as mpl\n   import matplotlib.pyplot as plt\n   import pandas as pd\n   import networkx as nx\n\n  After importing ``sp`` for ``scipy``::\n\n   import scipy as sp\n\n  access the relevant scipy subpackages from the top-level ``sp`` namespace, e.g.::\n\n   sp.sparse.linalg\n\n  Instead of ``from scipy.sparse import linalg`` or\n  ``import scipy.sparse.linalg as spla``.\n\n  For example, many libraries have a ``linalg`` subpackage: ``nx.linalg``,\n  ``np.linalg``, ``sp.linalg``, ``sp.sparse.linalg``. The above import\n  pattern makes the origin of any particular instance of ``linalg`` explicit.\n\n* Use the decorator ``not_implemented_for`` in ``networkx/utils/decorators.py``\n  to designate that a function doesn't accept 'directed', 'undirected',\n  'multigraph' or 'graph'.  The first argument of the decorated function should\n  be the graph object to be checked.\n\n  .. code-block:: python\n\n      @nx.not_implemented_for(\"directed\", \"multigraph\")\n      def function_not_for_MultiDiGraph(G, others):\n          # function not for graphs that are directed *and* multigraph\n          pass\n\n\n      @nx.not_implemented_for(\"directed\")\n      @nx.not_implemented_for(\"multigraph\")\n      def function_only_for_Graph(G, others):\n          # function not for directed graphs *or* for multigraphs\n          pass\n* Functions should avoid returning numpy scalars (e.g., `numpy.int64`, `numpy.float64`)\n  to ensure better compatibility and avoid issues with parts of the codebase that may \n  not recognize or handle numpy scalars properly. If a function returns a numpy scalar,\n  it should be converted to a native Python type.\n\n  .. code-block:: python\n\n      def convert_to_python_type():\n          # Perform some computation resulting in a numpy scalar\n          a = np.int64(42)  \n          # Convert to a Python scalar before returning\n          return a.item()\n\nTesting\n-------\n\n``networkx`` has an extensive test suite that ensures correct\nexecution on your system.  The test suite has to pass before a pull\nrequest can be merged, and tests should be added to cover any\nmodifications to the code base.\nWe make use of the `pytest <https://docs.pytest.org/en/latest/>`__\ntesting framework, with tests located in the various\n``networkx/submodule/tests`` folders.\n\nTo run all tests::\n\n    $ PYTHONPATH=. pytest networkx\n\nOr the tests for a specific submodule::\n\n    $ PYTHONPATH=. pytest networkx/readwrite\n\nOr tests from a specific file::\n\n    $ PYTHONPATH=. pytest networkx/readwrite/tests/test_edgelist.py\n\nOr a single test within that file::\n\n    $ PYTHONPATH=. pytest networkx/readwrite/tests/test_edgelist.py::test_parse_edgelist_with_data_list\n\nUse ``--doctest-modules`` to run doctests.\nFor example, run all tests and all doctests using::\n\n    $ PYTHONPATH=. pytest --doctest-modules networkx\n\nTests for a module should ideally cover all code in that module,\ni.e., statement coverage should be at 100%.\n\nTo measure the test coverage, run::\n\n  $ PYTHONPATH=. pytest --cov=networkx networkx\n\nThis will print a report with one line for each file in `networkx`,\ndetailing the test coverage::\n\n  Name                                             Stmts   Miss Branch BrPart  Cover\n  ----------------------------------------------------------------------------------\n  networkx/__init__.py                                33      2      2      1    91%\n  networkx/algorithms/__init__.py                    114      0      0      0   100%\n  networkx/algorithms/approximation/__init__.py       12      0      0      0   100%\n  networkx/algorithms/approximation/clique.py         42      1     18      1    97%\n  ...\n\nAdding tests\n~~~~~~~~~~~~\n\nIf you're **new to testing**, see existing test files for examples of things to do.\n**Don't let the tests keep you from submitting your contribution!**\nIf you're not sure how to do this or are having trouble, submit your pull request\nanyway.\nWe will help you create the tests and sort out any kind of problem during code review.\n\nImage comparison\n~~~~~~~~~~~~~~~~\n\n.. note::\n   Image comparison tests require the ``pytest-mpl`` extension, which can be\n   installed with::\n\n      pip install pytest-mpl\n\n   If ``pytest-mpl`` is not installed, the test suite may emit warnings related\n   to ``pytest.mark.mpl_image_compare`` - these can be safely ignored.\n\nTo run image comparisons::\n\n    $ PYTHONPATH=. pytest --mpl --pyargs networkx.drawing\n\nThe ``--mpl`` tells ``pytest`` to use ``pytest-mpl`` to compare the generated plots\nwith baseline ones stored in ``networkx/drawing/tests/baseline``.\n\nTo add a new test, add a test function to ``networkx/drawing/tests`` that\nreturns a Matplotlib figure (or any figure object that has a savefig method)\nand decorate it as follows::\n\n    @pytest.mark.mpl_image_compare\n    def test_barbell():\n        fig = plt.figure()\n        barbell = nx.barbell_graph(4, 6)\n        # make sure to fix any randomness\n        pos = nx.spring_layout(barbell, seed=42)\n        nx.draw(barbell, pos=pos)\n        return fig\n\nThen create a baseline image to compare against later::\n\n    $ pytest -k test_barbell --mpl-generate-path=networkx/drawing/tests/baseline\n\n.. note:: In order to keep the size of the repository from becoming too large, we\n   prefer to limit the size and number of baseline images we include.\n\nAnd test::\n\n    $ pytest -k test_barbell --mpl\n\nDocumentation\n-------------\n\n.. include:: ../README.rst\n\nAdding examples\n~~~~~~~~~~~~~~~\n\nThe gallery examples are managed by\n`sphinx-gallery <https://sphinx-gallery.readthedocs.io/>`_.\nThe source files for the example gallery are ``.py`` scripts in ``examples/`` that\ngenerate one or more figures. They are executed automatically by sphinx-gallery when the\ndocumentation is built. The output is gathered and assembled into the gallery.\n\nBuilding the example gallery locally requires that the additional dependencies\nin ``requirements/example.txt`` be installed in your development environment.\n\nYou can **add a new** plot by placing a new ``.py`` file in one of the directories inside the\n``examples`` directory of the repository. See the other examples to get an idea for the\nformat.\n\n.. note:: Gallery examples should start with ``plot_``, e.g. ``plot_new_example.py``\n\nGeneral guidelines for making a good gallery plot:\n\n* Examples should highlight a single feature/command.\n* Try to make the example as simple as possible.\n* Data needed by examples should be included in the same directory and the example script.\n* Add comments to explain things that aren't obvious from reading the code.\n* Describe the feature that you're showcasing and link to other relevant parts of the\n  documentation.\n\nAdding References\n~~~~~~~~~~~~~~~~~\n\nIf you are contributing a new algorithm (or an improvement to a current algorithm),\na reference paper or resource should also be provided in the function docstring.\nFor references to published papers, we try to follow the\n`Chicago Citation Style <https://en.wikipedia.org/wiki/The_Chicago_Manual_of_Style>`__.\nThe quickest way of generating citation in this style is\nby searching for the paper on `Google Scholar <https://scholar.google.com/>`_ and clicking on\nthe ``cite`` button. It will pop up the citation of the paper in multiple formats, and copy the\n``Chicago`` style.\n\nWe prefer adding DOI links for URLs. If the DOI link resolves to a paywalled version of\nthe article, we prefer adding a link to the arXiv version (if available) or any other\npublicly accessible copy of the paper.\n\nAn example of a reference::\n\n    .. [1] Cheong, Se-Hang, and Yain-Whar Si. \"Force-directed algorithms for schematic drawings and\n    placement: A survey.\" Information Visualization 19, no. 1 (2020): 65-91.\n    https://doi.org/10.1177%2F1473871618821740\n\n\nIf the resource is uploaded as a PDF/DOCX/PPT on the web (lecture notes, presentations) it is better\nto use the `wayback machine <https://web.archive.org/>`_ to create a snapshot of the resource\nand link the internet archive link. The URL of the resource can change, and it creates unreachable\nlinks from the documentation.\n\nUsing Math Formulae and Latex Formatting in Documentation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWhen working with docstrings that contain math symbols or formulae\nuse raw strings (``r\"\"\"``) to ensure proper rendering. \nWhile LaTeX formatting can improve the appearance of the rendered documentation, \nit's best to keep it simple and readable. \n\nAn example of a math formula::\n      \n      .. math:: \n          Ax = \\lambda x\n\n.. math:: \n    Ax = \\lambda x\n\nSome inline math::\n    \n    These are Cheeger's Inequalities for \\d-Regular graphs: \n    $\\frac{d- \\lambda_2}{2} \\leq h(G) \\leq \\sqrt{2d(d- \\lambda_2)}$\n   \nThese are Cheeger's Inequalities for \\d-Regular graphs: \n$\\frac{d- \\lambda_2}{2} \\leq h(G) \\leq \\sqrt{2d(d- \\lambda_2)}$\n\nBugs\n----\n\nPlease `report bugs on GitHub <https://github.com/networkx/networkx/issues>`_.\n\nPolicies\n--------\n\nAll interactions with the project are subject to the\n:doc:`NetworkX code of conduct <code_of_conduct>`.\n\nWe also follow these policies:\n\n* :doc:`NetworkX deprecation policy <deprecations>`\n* :external+neps:doc:`Python version support <nep-0029-deprecation_policy>`\n"
        },
        {
          "name": "INSTALL.rst",
          "type": "blob",
          "size": 4.65234375,
          "content": "Install\n=======\n\nNetworkX requires Python 3.11, 3.12, or 3.13.  If you do not already\nhave a Python environment configured on your computer, please see the\ninstructions for installing the full `scientific Python stack\n<https://scipy.org/install.html>`_.\n\nBelow we assume you have the default Python environment already configured on\nyour computer and you intend to install ``networkx`` inside of it.  If you want\nto create and work with Python virtual environments, please follow instructions\non `venv <https://docs.python.org/3/library/venv.html>`_ and `virtual\nenvironments <http://docs.python-guide.org/en/latest/dev/virtualenvs/>`_.\n\nFirst, make sure you have the latest version of ``pip`` (the Python package manager)\ninstalled. If you do not, refer to the `Pip documentation\n<https://pip.pypa.io/en/stable/installing/>`_ and install ``pip`` first.\n\nInstall the released version\n----------------------------\n\nInstall the current release of ``networkx`` with ``pip``::\n\n    $ pip install networkx[default]\n\nTo upgrade to a newer release use the ``--upgrade`` flag::\n\n    $ pip install --upgrade networkx[default]\n\nIf you do not have permission to install software systemwide, you can\ninstall into your user directory using the ``--user`` flag::\n\n    $ pip install --user networkx[default]\n\nIf you do not want to install our dependencies (e.g., ``numpy``, ``scipy``, etc.),\nyou can use::\n\n    $ pip install networkx\n\nThis may be helpful if you are using PyPy or you are working on a project that\nonly needs a limited subset of our functionality and you want to limit the\nnumber of dependencies.\n\nAlternatively, you can manually download ``networkx`` from\n`GitHub <https://github.com/networkx/networkx/releases>`_  or\n`PyPI <https://pypi.python.org/pypi/networkx>`_.\nTo install one of these versions, unpack it and run the following from the\ntop-level source directory using the Terminal::\n\n    $ pip install .[default]\n\nInstall the development version\n-------------------------------\n\nIf you have `Git <https://git-scm.com/>`_ installed on your system, it is also\npossible to install the development version of ``networkx``.\n\nBefore installing the development version, you may need to uninstall the\nstandard version of ``networkx`` using ``pip``::\n\n    $ pip uninstall networkx\n\nThen do::\n\n    $ git clone https://github.com/networkx/networkx.git\n    $ cd networkx\n    $ pip install -e .[default]\n\nThe ``pip install -e .[default]`` command allows you to follow the development branch as\nit changes by creating links in the right places and installing the command\nline scripts to the appropriate locations.\n\nThen, if you want to update ``networkx`` at any time, in the same directory do::\n\n    $ git pull\n\nBackends\n--------\n\nNetworkX has the ability to dispatch function calls to optional,\nseparately-installed, third-party backends. NetworkX backends let users\nexperience improved performance and/or additional functionality without\nchanging their NetworkX Python code.\n\nWhile NetworkX is a pure-Python implementation with minimal to no dependencies,\nbackends may be written in other languages and require specialized hardware\nand/or OS support, additional software dependencies, or even separate services.\n\nInstallation instructions vary based on the backend, and additional information\ncan be found from the individual backend project pages listed in the\n:doc:`/backends` section.\n\n\nExtra packages\n--------------\n\n.. note::\n   Some optional packages may require compiling\n   C or C++ code.  If you have difficulty installing these packages\n   with `pip`, please consult the homepages of those packages.\n\nThe following extra packages provide additional functionality. See the\nfiles in the ``requirements/`` directory for information about specific\nversion requirements.\n\n- `PyGraphviz <http://pygraphviz.github.io/>`_ and\n  `pydot <https://github.com/erocarrera/pydot>`_ provide graph drawing\n  and graph layout algorithms via `GraphViz <http://graphviz.org/>`_.\n- `lxml <http://lxml.de/>`_ used for GraphML XML format.\n\nTo install ``networkx`` and extra packages, do::\n\n    $ pip install networkx[default,extra]\n\nTo explicitly install all optional packages, do::\n\n    $ pip install pygraphviz pydot lxml\n\nOr, install any optional package (e.g., ``pygraphviz``) individually::\n\n    $ pip install pygraphviz\n\nTesting\n-------\n\nNetworkX uses the Python ``pytest`` testing package.  You can learn more\nabout pytest on their `homepage <https://pytest.org>`_.\n\nTest a source distribution\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou can test the complete package from the unpacked source directory with::\n\n    pytest networkx\n\nTest an installed package\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFrom a shell command prompt you can test the installed package with::\n\n   pytest --pyargs networkx\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.7216796875,
          "content": "NetworkX is distributed with the 3-clause BSD license.\n\n::\n\n   Copyright (C) 2004-2024, NetworkX Developers\n   Aric Hagberg <hagberg@lanl.gov>\n   Dan Schult <dschult@colgate.edu>\n   Pieter Swart <swart@lanl.gov>\n   All rights reserved.\n\n   Redistribution and use in source and binary forms, with or without\n   modification, are permitted provided that the following conditions are\n   met:\n\n     * Redistributions of source code must retain the above copyright\n       notice, this list of conditions and the following disclaimer.\n\n     * Redistributions in binary form must reproduce the above\n       copyright notice, this list of conditions and the following\n       disclaimer in the documentation and/or other materials provided\n       with the distribution.\n\n     * Neither the name of the NetworkX Developers nor the names of its\n       contributors may be used to endorse or promote products derived\n       from this software without specific prior written permission.\n\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.8515625,
          "content": "include MANIFEST.in\ninclude pyproject.toml\ninclude CONTRIBUTING.rst\ninclude INSTALL.rst\ninclude LICENSE.txt\ninclude README.rst\n\nrecursive-include examples *.txt *.py *.edgelist *.mbox *.gz *.bz2 *.zip *.html *.js *.css\nrecursive-include doc *.py *.rst Makefile *.html *.png *.txt *.css *.inc *.js\nrecursive-include requirements *.txt *.md\n\ninclude networkx/tests/*.py\ninclude networkx/drawing/tests/baseline/*png\ninclude networkx/*/tests/*.txt\ninclude networkx/*/tests/*.py\ninclude networkx/*/*/tests/*.py\ninclude networkx/*/*/tests/*.A99\ninclude networkx/*/*/tests/*.B99\ninclude networkx/*/*/tests/*.bz2\nglobal-exclude *~\nglobal-exclude *.pyc\nglobal-exclude .svn\n\nprune doc/build\nprune doc/auto_examples\nprune doc/modules\nprune doc/reference/generated\nprune doc/reference/algorithms/generated\nprune doc/reference/classes/generated\nprune doc/reference/readwrite/generated\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 3.0634765625,
          "content": "NetworkX\n========\n\n\n.. image::\n    https://github.com/networkx/networkx/workflows/test/badge.svg?branch=main\n    :target: https://github.com/networkx/networkx/actions?query=workflow%3Atest\n\n.. image::\n    https://codecov.io/gh/networkx/networkx/branch/main/graph/badge.svg?\n    :target: https://app.codecov.io/gh/networkx/networkx/branch/main\n\n.. image::\n    https://img.shields.io/pypi/v/networkx.svg?\n    :target: https://pypi.python.org/pypi/networkx\n\n.. image::\n    https://img.shields.io/pypi/l/networkx.svg?\n    :target: https://github.com/networkx/networkx/blob/main/LICENSE.txt\n\n.. image::\n    https://img.shields.io/pypi/pyversions/networkx.svg?\n    :target: https://pypi.python.org/pypi/networkx\n\n.. image::\n    https://img.shields.io/github/labels/networkx/networkx/good%20first%20issue?color=green&label=contribute\n    :target: https://github.com/networkx/networkx/contribute\n\n\nNetworkX is a Python package for the creation, manipulation,\nand study of the structure, dynamics, and functions\nof complex networks.\n\n- **Website (including documentation):** https://networkx.org\n- **Mailing list:** https://groups.google.com/forum/#!forum/networkx-discuss\n- **Source:** https://github.com/networkx/networkx\n- **Bug reports:** https://github.com/networkx/networkx/issues\n- **Report a security vulnerability:** https://tidelift.com/security\n- **Tutorial:** https://networkx.org/documentation/latest/tutorial.html\n- **GitHub Discussions:** https://github.com/networkx/networkx/discussions\n- **Discord (Scientific Python) invite link:** https://discord.com/invite/vur45CbwMz\n- **NetworkX meetings calendar (open to all):** https://scientific-python.org/calendars/networkx.ics\n\nSimple example\n--------------\n\nFind the shortest path between two nodes in an undirected graph:\n\n.. code:: pycon\n\n    >>> import networkx as nx\n    >>> G = nx.Graph()\n    >>> G.add_edge(\"A\", \"B\", weight=4)\n    >>> G.add_edge(\"B\", \"D\", weight=2)\n    >>> G.add_edge(\"A\", \"C\", weight=3)\n    >>> G.add_edge(\"C\", \"D\", weight=4)\n    >>> nx.shortest_path(G, \"A\", \"D\", weight=\"weight\")\n    ['A', 'B', 'D']\n\nInstall\n-------\n\nInstall the latest released version of NetworkX:\n\n.. code:: shell\n\n    $ pip install networkx\n\nInstall with all optional dependencies:\n\n.. code:: shell\n\n    $ pip install networkx[default]\n\nFor additional details,\nplease see the `installation guide <https://networkx.org/documentation/stable/install.html>`_.\n\nBugs\n----\n\nPlease report any bugs that you find `here <https://github.com/networkx/networkx/issues>`_.\nOr, even better, fork the repository on `GitHub <https://github.com/networkx/networkx>`_\nand create a pull request (PR). We welcome all changes, big or small, and we\nwill help you make the PR if you are new to `git` (just ask on the issue and/or\nsee the `contributor guide <https://networkx.org/documentation/latest/developer/contribute.html>`_).\n\nLicense\n-------\n\nReleased under the `3-Clause BSD license <https://github.com/networkx/networkx/blob/main/LICENSE.txt>`_::\n\n    Copyright (C) 2004-2024 NetworkX Developers\n    Aric Hagberg <hagberg@lanl.gov>\n    Dan Schult <dschult@colgate.edu>\n    Pieter Swart <swart@lanl.gov>\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "networkx",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 6.5126953125,
          "content": "[build-system]\nbuild-backend = 'setuptools.build_meta'\nrequires = ['setuptools>=61.2']\n\n[project]\nname = 'networkx'\ndescription = 'Python package for creating and manipulating graphs and networks'\nreadme = 'README.rst'\nrequires-python = '>=3.11'\ndynamic = ['version']\nkeywords = [\n    'Networks',\n    'Graph Theory',\n    'Mathematics',\n    'network',\n    'graph',\n    'discrete mathematics',\n    'math',\n]\nclassifiers = [\n    'Development Status :: 5 - Production/Stable',\n    'Intended Audience :: Developers',\n    'Intended Audience :: Science/Research',\n    'License :: OSI Approved :: BSD License',\n    'Operating System :: OS Independent',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.11',\n    'Programming Language :: Python :: 3.12',\n    'Programming Language :: Python :: 3.13',\n    'Programming Language :: Python :: 3 :: Only',\n    'Topic :: Software Development :: Libraries :: Python Modules',\n    'Topic :: Scientific/Engineering :: Bio-Informatics',\n    'Topic :: Scientific/Engineering :: Information Analysis',\n    'Topic :: Scientific/Engineering :: Mathematics',\n    'Topic :: Scientific/Engineering :: Physics',\n]\ndependencies = []\n\n[[project.authors]]\nname = 'Aric Hagberg'\nemail = 'hagberg@lanl.gov'\n\n[[project.maintainers]]\nname = 'NetworkX Developers'\nemail = 'networkx-discuss@googlegroups.com'\n\n[project.urls]\nHomepage = 'https://networkx.org/'\n\"Bug Tracker\" = 'https://github.com/networkx/networkx/issues'\nDocumentation = 'https://networkx.org/documentation/stable/'\n\"Source Code\" = 'https://github.com/networkx/networkx'\n\n[project.entry-points.\"networkx.backends\"]\nnx_loopback = 'networkx.classes.tests.dispatch_interface:backend_interface'\n\n[project.optional-dependencies]\ndefault = [\n    'numpy>=1.25',\n    'scipy>=1.11.2',\n    'matplotlib>=3.8',\n    'pandas>=2.0',\n]\ndeveloper = [\n    'pre-commit>=3.2',\n    'mypy>=1.1',\n]\ndoc = [\n    'sphinx>=7.3',\n    'pydata-sphinx-theme>=0.15',\n    'sphinx-gallery>=0.16',\n    'numpydoc>=1.8.0',\n    'pillow>=9.4',\n    'texext>=0.6.7',\n    'myst-nb>=1.1',\n    'intersphinx_registry',\n]\nexample = [\n    'osmnx>=2.0.0',\n    'momepy>=0.7.2',\n    'contextily>=1.6',\n    'seaborn>=0.13',\n    'cairocffi>=1.7',\n    'igraph>=0.11',\n    'scikit-learn>=1.5',\n]\nextra = [\n    'lxml>=4.6',\n    'pygraphviz>=1.14',\n    'pydot>=3.0.1',\n    'sympy>=1.10',\n]\ntest = [\n    'pytest>=7.2',\n    'pytest-cov>=4.0',\n]\n\n[tool.setuptools]\nzip-safe = false\ninclude-package-data = false\npackages = [\n    'networkx',\n    'networkx.algorithms',\n    'networkx.algorithms.assortativity',\n    'networkx.algorithms.bipartite',\n    'networkx.algorithms.centrality',\n    'networkx.algorithms.community',\n    'networkx.algorithms.components',\n    'networkx.algorithms.connectivity',\n    'networkx.algorithms.coloring',\n    'networkx.algorithms.flow',\n    'networkx.algorithms.minors',\n    'networkx.algorithms.traversal',\n    'networkx.algorithms.isomorphism',\n    'networkx.algorithms.shortest_paths',\n    'networkx.algorithms.link_analysis',\n    'networkx.algorithms.operators',\n    'networkx.algorithms.approximation',\n    'networkx.algorithms.tree',\n    'networkx.classes',\n    'networkx.generators',\n    'networkx.drawing',\n    'networkx.linalg',\n    'networkx.readwrite',\n    'networkx.readwrite.json_graph',\n    'networkx.tests',\n    'networkx.utils',\n]\nplatforms = [\n    'Linux',\n    'Mac OSX',\n    'Windows',\n    'Unix',\n]\n\n[tool.setuptools.dynamic.version]\nattr = 'networkx.__version__'\n\n[tool.setuptools.package-data]\nnetworkx = ['tests/*.py']\n\"networkx.algorithms\" = ['tests/*.py']\n\"networkx.algorithms.assortativity\" = ['tests/*.py']\n\"networkx.algorithms.bipartite\" = ['tests/*.py']\n\"networkx.algorithms.centrality\" = ['tests/*.py']\n\"networkx.algorithms.community\" = ['tests/*.py']\n\"networkx.algorithms.components\" = ['tests/*.py']\n\"networkx.algorithms.connectivity\" = ['tests/*.py']\n\"networkx.algorithms.coloring\" = ['tests/*.py']\n\"networkx.algorithms.minors\" = ['tests/*.py']\n\"networkx.algorithms.flow\" = [\n    'tests/*.py',\n    'tests/*.bz2',\n]\n\"networkx.algorithms.isomorphism\" = [\n    'tests/*.py',\n    'tests/*.*99',\n]\n\"networkx.algorithms.link_analysis\" = ['tests/*.py']\n\"networkx.algorithms.approximation\" = ['tests/*.py']\n\"networkx.algorithms.operators\" = ['tests/*.py']\n\"networkx.algorithms.shortest_paths\" = ['tests/*.py']\n\"networkx.algorithms.traversal\" = ['tests/*.py']\n\"networkx.algorithms.tree\" = ['tests/*.py']\n\"networkx.classes\" = ['tests/*.py']\n\"networkx.generators\" = [\n    'tests/*.py',\n    'atlas.dat.gz',\n]\n\"networkx.drawing\" = [\n    'tests/*.py',\n    'tests/baseline/*png',\n]\n\"networkx.linalg\" = ['tests/*.py']\n\"networkx.readwrite\" = ['tests/*.py']\n\"networkx.readwrite.json_graph\" = ['tests/*.py']\n\"networkx.utils\" = ['tests/*.py']\n\n[tool.changelist]\nignored_user_logins = [\"dependabot[bot]\", \"pre-commit-ci[bot]\", \"web-flow\"]\n\n[tool.ruff.lint]\nextend-select = [\n#  \"B\",        # flake8-bugbear\n  \"I\",        # isort\n#  \"ARG\",      # flake8-unused-arguments\n  \"C4\",       # flake8-comprehensions\n#  \"D\",        # pydocstyle (see tool.ruff.lint.pydocstyle below)\n  \"EM\",       # flake8-errmsg\n  \"ICN\",      # flake8-import-conventions\n#  \"G\",        # flake8-logging-format\n  \"PGH\",      # pygrep-hooks\n  \"PIE\",      # flake8-pie\n#  \"PL\",       # pylint\n  \"PLR0402\",\n#  \"PT\",       # flake8-pytest-style\n#  \"PTH\",      # flake8-use-pathlib\n#  \"RET\",      # flake8-return\n#  \"RUF\",      # Ruff-specific\n#  \"SIM\",      # flake8-simplify\n  \"SIM101\",\n  \"SIM109\",\n  \"SIM110\",\n  \"SIM118\",\n  \"SIM2\",\n#  \"T20\",      # flake8-print\n  \"UP\",       # pyupgrade\n  \"YTT\",      # flake8-2020\n  \"EXE\",      # flake8-executable\n  \"NPY\",      # NumPy specific rules\n  \"PD\",       # pandas-vet\n#  \"FURB\",     # refurb\n  \"PYI\",      # flake8-pyi\n]\nignore = [\n  \"PLR09\",    # Too many <...>\n  \"PLR2004\",  # Magic value used in comparison\n  \"ISC001\",   # Conflicts with formatter\n  \"F\",        # pyflakes\n  \"E\",        # pycodestyle\n  \"EM101\",    # Exception must not use a string literal\n  \"EM102\",    # Exception must not use an f-string literal\n  \"PD\",       # pandas-vet\n  \"ICN\",      # flake8-import-conventions\n  \"PYI\",      # flake8-pyi\n  \"NPY002\",   # Replace legacy `np.random.random` call with `np.random.Generator`\n]\n\n# Need to select D above\n#[tool.ruff.lint.pydocstyle]\n#convention = \"numpy\"\n\n[tool.ruff.lint.per-file-ignores]\n\"__init__.py\" = ['I']\n\"examples/*.py\" = ['I']\n\"doc/*.py\" = ['I']\n\"tools/*.py\" = ['I']\n\"networkx/classes/filters.py\" = ['C416']\n\n[tool.ruff.format]\ndocstring-code-format = true\n\n[tool.mypy]\nignore_missing_imports = true\nexclude = 'subgraphviews|reportviews'\n\n[[tool.mypy.overrides]]\nmodule = 'networkx.classes.reportviews'\nignore_errors = true\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}