{
  "metadata": {
    "timestamp": 1736561293249,
    "page": 293,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "threat9/routersploit",
      "stars": 12293,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.056640625,
          "content": ".idea/\n.travis/\n\nREADME.md\nLICENSE\n.travis.yml\n*.pyc\n*.log"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8671875,
          "content": "# IntelliJ project files\n.idea\nout\ngen\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\n.pytest_cache\nnosetests.xml\ncoverage.xml\n*,cover\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# VS Code\n.vscode\n\n# virtualenv\nvenv/\n\n# macOS\n.DS_Store\n.DS_Store?\n\n# vim\n*.swp\n*.swo\n\n# Pipenv files\nPipfile\nPipfile.lock\n\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.20703125,
          "content": "language: python\n\nmatrix:\n  include:\n    - os: linux\n      python: 3.6\n\n    - os: osx\n      language: generic\n      env: PYTHON_VERSION=3.6.1\n\ninstall:\n  - \"./.travis/install.sh\"\n\n\nscript:\n  - \"./.travis/run.sh\"\n"
        },
        {
          "name": ".travis",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.669921875,
          "content": "# Contribution Guidelines\n\nThere are many ways to contribute to RouterSploit project, and the routersploit team is grateful for all contributions. This overview summarizes the most important steps to get you started as a contributor.\n\n* Report bugs to the routersploit issue tracker.\n* Make suggestions for changes, updates, or new features to the routersploit issue tracker.\n* Contribute bug fixes, example code, documentation, or tutorials to routersploit.\n* Contribute new features to routersploit.\n\n## Bug reports\n\nWhen submitting bug reports, please consider providing the following information:\n\n* Reproduction steps: step by step description to reproduce the problem.\n* Expected: Describe the behavior you expect.\n* Actual: Describe the behavior you see.\n\n## Testing\nIt is hard to test modules in all possible scenarios. If you would like to help:\n\n1. Check what device you have - identify vendor and version.\n2. Check if routersploit contains exploits for the device you posses.\n3. If exploit does not work but it should, check \"show info\" for more information. References should provide you with links to proof of concept exploits.\n\nExample:\n```\nReferences:\n-  https://www.exploit-db.com/exploits/24975/\n```\n\n4. Try to use proof of concept exploit and check if it works properly. If it does, feel free to create new issue bug with explanation that the routersploit's module does not work properly.\n\n## Development\n* [Creating exploit module](https://github.com/reverse-shell/routersploit/wiki/Creating-Exploit)\n* [Creating creds module](https://github.com/reverse-shell/routersploit/wiki/Creating-Creds)\n* [Creating scanner module](https://github.com/reverse-shell/routersploit/wiki/Creating-Scanner)\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.166015625,
          "content": "FROM python:3.6\n\nCOPY requirements.txt /tmp/requirements.txt\nRUN python -m pip install -r /tmp/requirements.txt\n\nWORKDIR /routersploit\nCOPY . .\n\nCMD [\"python\", \"rsf.py\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.80078125,
          "content": "Copyright 2018, The RouterSploit Framework (RSF) by Threat9 \nAll rights reserved. \n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n    * Neither the name of RouterSploit Framework nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nThe above licensing was taken from the BSD licensing and is applied to RouterSploit Framework as well.\n\nNote that the RouterSploit Framework is provided as is, and is a royalty free open-source application.\n\nFeel free to modify, use, change, market, do whatever you want with it as long as you give the appropriate credit.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1708984375,
          "content": "recursive-include routersploit/resources/ssh_keys *.json *.key\nrecursive-include routersploit/resources/vendors *.dat\nrecursive-include routersploit/resources/wordlists *.txt\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.083984375,
          "content": ".PHONY: build run test lint lint-modules clean prune help\n\nDIRECTORY=.\nEXCLUDED=.git,rsf.py\nRSF_IMAGE=routersploit\nFLAKE8_IGNORED_RULES=E501,F405,F403,W504\n\nbuild:\n\tdocker build -t $(RSF_IMAGE) .\n\nrun:\n\tdocker run -it --rm $(RSF_IMAGE)\n\nlint:\n\tpython3 -m flake8 --exclude=$(EXCLUDED) --ignore=$(FLAKE8_IGNORED_RULES) $(DIRECTORY)\n\ntests: clean\n\tpython3 -m pytest -n16 tests/core/ tests/test_exploit_scenarios.py tests/test_module_info.py\n\tpython3 -m pytest -n16 tests/exploits/ tests/creds/ tests/encoders/ tests/generic/ tests/payloads/\n\nclean:\n\tfind . -name '*.pyc' -exec rm -f {} +\n\tfind . -name '*.pyo' -exec rm -f {} +\n\tfind . -name '*~' -exec rm -f  {} +\n\nprune:\n\tdocker images -q -f dangling=true | xargs docker rmi\n\tdocker ps -q -f status=exited | xargs docker rm\n\nhelp:\n\t@echo \"    run\"\n\t@echo \"        Run Routersploit in docker container\"\n\t@echo \"    lint\"\n\t@echo \"        Check style with flake8.\"\n\t@echo \"    test\"\n\t@echo \"        Run test suite\"\n\t@echo \"    clean\"\n\t@echo \"        Remove python artifacts.\"\n\t@echo \"    prune\"\n\t@echo \"        Remove dangling docker images and exited containers.\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.5390625,
          "content": "# RouterSploit - Exploitation Framework for Embedded Devices\n\n[![Python 3.6](https://img.shields.io/badge/Python-3.6-yellow.svg)](http://www.python.org/download/)\n[![Build Status](https://travis-ci.org/threat9/routersploit.svg?branch=master)](https://travis-ci.org/threat9/routersploit)\n\n# Community\nJoin community on [Embedded Exploitation Discord](https://discord.gg/UCXARN2vBx).\n\n# Description\nThe RouterSploit Framework is an open-source exploitation framework dedicated to embedded devices.\n\n[![asciicast](https://asciinema.org/a/180370.png)](https://asciinema.org/a/180370)\n\nIt consists of various modules that aid penetration testing operations:\n\n* exploits - modules that take advantage of identified vulnerabilities\n* creds - modules designed to test credentials against network services\n* scanners - modules that check if a target is vulnerable to any exploit\n* payloads - modules that are responsible for generating payloads for various architectures and injection points\n* generic - modules that perform generic attacks \n\n# Installation\n\n## Requirements\n\nRequired:\n* future\n* requests\n* paramiko\n* pysnmp\n* pycrypto\n\nOptional:\n* bluepy - Bluetooth low energy \n\n## Installation on Kali Linux\n\n```\napt-get install python3-pip\ngit clone https://www.github.com/threat9/routersploit\ncd routersploit\npython3 -m pip install -r requirements.txt\npython3 rsf.py\n```\n\nBluetooth Low Energy support:\n```\napt-get install libglib2.0-dev\npython3 -m pip install bluepy\npython3 rsf.py\n```\n\n## Installation on Ubuntu 20.04\n\n```\nsudo apt-get install git python3-pip\ngit clone https://github.com/threat9/routersploit\ncd routersploit\npython3 -m pip install -r requirements.txt\npython3 rsf.py\n```\n\nBluetooth Low Energy support:\n\n```\nsudo apt-get install libglib2.0-dev\npython3 -m pip install bluepy\npython3 rsf.py\n```\n\n## Installation on Ubuntu 18.04 & 17.10\n\n```\nsudo add-apt-repository universe\nsudo apt-get install git python3-pip\ngit clone https://www.github.com/threat9/routersploit\ncd routersploit\npython3 -m pip install setuptools\npython3 -m pip install -r requirements.txt\npython3 rsf.py\n```\n\nBluetooth Low Energy support:\n```\napt-get install libglib2.0-dev\npython3 -m pip install bluepy\npython3 rsf.py\n```\n\n\n## Installation on OSX\n\n```\ngit clone https://www.github.com/threat9/routersploit\ncd routersploit\nsudo python3 -m pip install -r requirements.txt\npython3 rsf.py\n```\n\n## Running on Docker\n\n```\ngit clone https://www.github.com/threat9/routersploit\ncd routersploit\ndocker build -t routersploit .\ndocker run -it --rm routersploit\n```\n\n# Update\n\nUpdate RouterSploit Framework often. The project is under heavy development and new modules are shipped almost every day.\n\n```\ncd routersploit\ngit pull\n```\n\n# Build your own\nTo our surprise, people started to fork \n[routersploit](https://github.com/threat9/routersploit) not because they were \ninterested in the security of embedded devices but simply because they want to \nleverage our interactive shell logic and build their tools using similar \nconcept. All these years they must have said: _\"There must be a better way!\"_ \nand they were completely right, the better way is called \n[_Riposte_](https://github.com/fwkz/riposte).\n\n[_Riposte_](https://github.com/fwkz/riposte) allows you to easily wrap your \napplication inside a tailored interactive shell. Common chores regarding \nbuilding REPLs was factored out and being taken care of so you can \nfocus on specific domain logic of your application.\n# License\n\nThe RouterSploit Framework is under a BSD license.\nPlease see [LICENSE](LICENSE) for more details.\n\n# Acknowledgments\n* [riposte](https://github.com/fwkz/riposte)\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.150390625,
          "content": "future\nrequests==2.31.0\nparamiko\npysnmp==4.4.6\npycryptodome\npytest==4.4.0\npytest-forked\npytest-xdist\nflake8\ngit+git://github.com/threat9/threat9-test-bed\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.05859375,
          "content": "future\nrequests==2.31.0\nparamiko\npysnmp==4.4.6\npycryptodome\n"
        },
        {
          "name": "routersploit",
          "type": "tree",
          "content": null
        },
        {
          "name": "rsf.py",
          "type": "blob",
          "size": 0.86328125,
          "content": "#!/usr/bin/env python3\n\nfrom __future__ import print_function\nimport logging.handlers\nimport sys\nif sys.version_info.major < 3:\n    print(\"RouterSploit supports only Python3. Rerun application in Python3 environment.\")\n    exit(0)\n\nfrom routersploit.interpreter import RoutersploitInterpreter\n\nlog_handler = logging.handlers.RotatingFileHandler(filename=\"routersploit.log\", maxBytes=500000)\nlog_formatter = logging.Formatter(\"%(asctime)s %(levelname)s %(name)s       %(message)s\")\nlog_handler.setFormatter(log_formatter)\nLOGGER = logging.getLogger()\nLOGGER.setLevel(logging.DEBUG)\nLOGGER.addHandler(log_handler)\n\n\ndef routersploit(argv):\n    rsf = RoutersploitInterpreter()\n    if len(argv[1:]):\n        rsf.nonInteractive(argv)\n    else:\n        rsf.start()\n\nif __name__ == \"__main__\":\n    try:\n        routersploit(sys.argv)\n    except (KeyboardInterrupt, SystemExit):\n        pass\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.4716796875,
          "content": "from setuptools import setup, find_packages\n\n\nwith open(\"README.md\", \"r\") as f:\n    long_description = f.read()\n\nsetup(\n    name=\"routersploit\",\n    version=\"3.4.6\",\n    description=\"Exploitation Framework for Embedded Devices\",\n    long_description=long_description,\n    author=\"Threat9\",\n    author_email=\"marcin@threat9.com\",\n    url=\"https://www.threat9.com\",\n    download_url=\"https://github.com/threat9/routersploit/\",\n    packages=find_packages(),\n    include_package_data=True,\n    scripts=('rsf.py',),\n    entry_points={},\n    install_requires=[\n        \"future\",\n        \"requests\",\n        \"paramiko\",\n        \"pysnmp\",\n        \"pycryptodome\",\n    ],\n    extras_require={\n        \"tests\": [\n            \"pytest\",\n            \"pytest-forked\",\n            \"pytest-xdist\",\n            \"flake8\",\n        ],\n    },\n    classifiers=[\n        \"Operating System :: POSIX\",\n        \"Environment :: Console\",\n        \"Environment :: Console :: Curses\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Education\",\n        \"Intended Audience :: Information Technology\",\n        \"Intended Audience :: Science/Research\",\n        \"Intended Audience :: System Administrators\",\n        \"Intended Audience :: Telecommunications Industry\",\n        \"Topic :: Security\",\n        \"Topic :: System :: Networking\",\n        \"Topic :: Utilities\",\n    ],\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}