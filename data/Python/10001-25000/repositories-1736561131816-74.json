{
  "metadata": {
    "timestamp": 1736561131816,
    "page": 74,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "black-forest-labs/flux",
      "stars": 19324,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.6103515625,
          "content": "# Created by https://www.toptal.com/developers/gitignore/api/linux,windows,macos,visualstudiocode,python\n# Edit at https://www.toptal.com/developers/gitignore?templates=linux,windows,macos,visualstudiocode,python\n\n### Linux ###\n*~\n\n# temporary files which can be created if a process still has a handle open of a deleted file\n.fuse_hidden*\n\n# KDE directory preferences\n.directory\n\n# Linux trash folder which might appear on any partition or disk\n.Trash-*\n\n# .nfs files are created when an open file is removed but is still being accessed\n.nfs*\n\n### macOS ###\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n### Python ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n### VisualStudioCode ###\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n*.code-workspace\n\n# Local History for Visual Studio Code\n.history/\n\n### VisualStudioCode Patch ###\n# Ignore all local history of files\n.history\n.ionide\n\n### Windows ###\n# Windows thumbnail cache files\nThumbs.db\nThumbs.db:encryptable\nehthumbs.db\nehthumbs_vista.db\n\n# Dump file\n*.stackdump\n\n# Folder config file\n[Dd]esktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msix\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n\n# End of https://www.toptal.com/developers/gitignore/api/linux,windows,macos,visualstudiocode,python\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.45703125,
          "content": "# FLUX\nby Black Forest Labs: https://blackforestlabs.ai. Documentation for our API can be found here: [docs.bfl.ml](https://docs.bfl.ml/).\n\n![grid](assets/grid.jpg)\n\nThis repo contains minimal inference code to run image generation & editing with our Flux models.\n\n## Local installation\n\n```bash\ncd $HOME && git clone https://github.com/black-forest-labs/flux\ncd $HOME/flux\n\n# Using pyvenv\npython3.10 -m venv .venv\nsource .venv/bin/activate\npip install -e \".[all]\"\n```\n\n### Models\n\nWe are offering an extensive suite of models. For more information about the individual models, please refer to the link under **Usage**.\n\n| Name                        | Usage                                                      | HuggingFace repo                                               | License                                                               |\n| --------------------------- | ---------------------------------------------------------- | -------------------------------------------------------------- | --------------------------------------------------------------------- |\n| `FLUX.1 [schnell]`          | [Text to Image](docs/text-to-image.md)                     | https://huggingface.co/black-forest-labs/FLUX.1-schnell        | [apache-2.0](model_licenses/LICENSE-FLUX1-schnell)                    |\n| `FLUX.1 [dev]`              | [Text to Image](docs/text-to-image.md)                     | https://huggingface.co/black-forest-labs/FLUX.1-dev            | [FLUX.1-dev Non-Commercial License](model_licenses/LICENSE-FLUX1-dev) |\n| `FLUX.1 Fill [dev]`         | [In/Out-painting](docs/fill.md)                            | https://huggingface.co/black-forest-labs/FLUX.1-Fill-dev       | [FLUX.1-dev Non-Commercial License](model_licenses/LICENSE-FLUX1-dev) |\n| `FLUX.1 Canny [dev]`        | [Structural Conditioning](docs/structural-conditioning.md) | https://huggingface.co/black-forest-labs/FLUX.1-Canny-dev      | [FLUX.1-dev Non-Commercial License](model_licenses/LICENSE-FLUX1-dev) |\n| `FLUX.1 Depth [dev]`        | [Structural Conditioning](docs/structural-conditioning.md) | https://huggingface.co/black-forest-labs/FLUX.1-Depth-dev      | [FLUX.1-dev Non-Commercial License](model_licenses/LICENSE-FLUX1-dev) |\n| `FLUX.1 Canny [dev] LoRA`   | [Structural Conditioning](docs/structural-conditioning.md) | https://huggingface.co/black-forest-labs/FLUX.1-Canny-dev-lora | [FLUX.1-dev Non-Commercial License](model_licenses/LICENSE-FLUX1-dev) |\n| `FLUX.1 Depth [dev] LoRA`   | [Structural Conditioning](docs/structural-conditioning.md) | https://huggingface.co/black-forest-labs/FLUX.1-Depth-dev-lora | [FLUX.1-dev Non-Commercial License](model_licenses/LICENSE-FLUX1-dev) |\n| `FLUX.1 Redux [dev]`        | [Image variation](docs/image-variation.md)                 | https://huggingface.co/black-forest-labs/FLUX.1-Redux-dev      | [FLUX.1-dev Non-Commercial License](model_licenses/LICENSE-FLUX1-dev) |\n| `FLUX.1 [pro]`              | [Text to Image](docs/text-to-image.md)                     | [Available in our API.](https://docs.bfl.ml/)                  |                                                                       |\n| `FLUX1.1 [pro]`             | [Text to Image](docs/text-to-image.md)                     | [Available in our API.](https://docs.bfl.ml/)                  |                                                                       |\n| `FLUX1.1 [pro] Ultra/raw`   | [Text to Image](docs/text-to-image.md)                     | [Available in our API.](https://docs.bfl.ml/)                  |                                                                       |\n| `FLUX.1 Fill [pro]`         | [In/Out-painting](docs/fill.md)                            | [Available in our API.](https://docs.bfl.ml/)                  |                                                                       |\n| `FLUX.1 Canny [pro]`        | [Structural Conditioning](docs/structural-conditioning.md) | [Available in our API.](https://docs.bfl.ml/)                  |                                                                       |\n| `FLUX.1 Depth [pro]`        | [Structural Conditioning](docs/structural-conditioning.md) | [Available in our API.](https://docs.bfl.ml/)                  |                                                                       |\n| `FLUX1.1 Redux [pro]`       | [Image variation](docs/image-variation.md)                 | [Available in our API.](https://docs.bfl.ml/)                  |                                                                       |\n| `FLUX1.1 Redux [pro] Ultra` | [Image variation](docs/image-variation.md)                 | [Available in our API.](https://docs.bfl.ml/)                  |                                                                       |\n\nThe weights of the autoencoder are also released under [apache-2.0](https://huggingface.co/datasets/choosealicense/licenses/blob/main/markdown/apache-2.0.md) and can be found in the HuggingFace repos above.\n\n## API usage\n\nOur API offers access to our models. It is documented here:\n[docs.bfl.ml](https://docs.bfl.ml/).\n\nIn this repository we also offer an easy python interface. To use this, you\nfirst need to register with the API on [api.bfl.ml](https://api.bfl.ml/), and\ncreate a new API key.\n\nTo use the API key either run `export BFL_API_KEY=<your_key_here>` or provide\nit via the `api_key=<your_key_here>` parameter. It is also expected that you\nhave installed the package as above.\n\nUsage from python:\n\n```python\nfrom flux.api import ImageRequest\n\n# this will create an api request directly but not block until the generation is finished\nrequest = ImageRequest(\"A beautiful beach\", name=\"flux.1.1-pro\")\n# or: request = ImageRequest(\"A beautiful beach\", name=\"flux.1.1-pro\", api_key=\"your_key_here\")\n\n# any of the following will block until the generation is finished\nrequest.url\n# -> https:<...>/sample.jpg\nrequest.bytes\n# -> b\"...\" bytes for the generated image\nrequest.save(\"outputs/api.jpg\")\n# saves the sample to local storage\nrequest.image\n# -> a PIL image\n```\n\nUsage from the command line:\n\n```bash\n$ python -m flux.api --prompt=\"A beautiful beach\" url\nhttps:<...>/sample.jpg\n\n# generate and save the result\n$ python -m flux.api --prompt=\"A beautiful beach\" save outputs/api\n\n# open the image directly\n$ python -m flux.api --prompt=\"A beautiful beach\" image show\n```\n\n## Citation\n\nIf you find the provided code or models useful for your research, consider citing them as:\n\n```bib\n@misc{flux2023,\n    author={Black Forest Labs},\n    title={FLUX},\n    year={2023},\n    howpublished={\\url{https://github.com/black-forest-labs/flux}},\n}\n```\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo_gr.py",
          "type": "blob",
          "size": 8.9580078125,
          "content": "import os\nimport time\nimport uuid\n\nimport gradio as gr\nimport numpy as np\nimport torch\nfrom einops import rearrange\nfrom PIL import ExifTags, Image\nfrom transformers import pipeline\n\nfrom flux.cli import SamplingOptions\nfrom flux.sampling import denoise, get_noise, get_schedule, prepare, unpack\nfrom flux.util import configs, embed_watermark, load_ae, load_clip, load_flow_model, load_t5\n\nNSFW_THRESHOLD = 0.85\n\n\ndef get_models(name: str, device: torch.device, offload: bool, is_schnell: bool):\n    t5 = load_t5(device, max_length=256 if is_schnell else 512)\n    clip = load_clip(device)\n    model = load_flow_model(name, device=\"cpu\" if offload else device)\n    ae = load_ae(name, device=\"cpu\" if offload else device)\n    nsfw_classifier = pipeline(\"image-classification\", model=\"Falconsai/nsfw_image_detection\", device=device)\n    return model, ae, t5, clip, nsfw_classifier\n\n\nclass FluxGenerator:\n    def __init__(self, model_name: str, device: str, offload: bool):\n        self.device = torch.device(device)\n        self.offload = offload\n        self.model_name = model_name\n        self.is_schnell = model_name == \"flux-schnell\"\n        self.model, self.ae, self.t5, self.clip, self.nsfw_classifier = get_models(\n            model_name,\n            device=self.device,\n            offload=self.offload,\n            is_schnell=self.is_schnell,\n        )\n\n    @torch.inference_mode()\n    def generate_image(\n        self,\n        width,\n        height,\n        num_steps,\n        guidance,\n        seed,\n        prompt,\n        init_image=None,\n        image2image_strength=0.0,\n        add_sampling_metadata=True,\n    ):\n        seed = int(seed)\n        if seed == -1:\n            seed = None\n\n        opts = SamplingOptions(\n            prompt=prompt,\n            width=width,\n            height=height,\n            num_steps=num_steps,\n            guidance=guidance,\n            seed=seed,\n        )\n\n        if opts.seed is None:\n            opts.seed = torch.Generator(device=\"cpu\").seed()\n        print(f\"Generating '{opts.prompt}' with seed {opts.seed}\")\n        t0 = time.perf_counter()\n\n        if init_image is not None:\n            if isinstance(init_image, np.ndarray):\n                init_image = torch.from_numpy(init_image).permute(2, 0, 1).float() / 255.0\n                init_image = init_image.unsqueeze(0)\n            init_image = init_image.to(self.device)\n            init_image = torch.nn.functional.interpolate(init_image, (opts.height, opts.width))\n            if self.offload:\n                self.ae.encoder.to(self.device)\n            init_image = self.ae.encode(init_image.to())\n            if self.offload:\n                self.ae = self.ae.cpu()\n                torch.cuda.empty_cache()\n\n        # prepare input\n        x = get_noise(\n            1,\n            opts.height,\n            opts.width,\n            device=self.device,\n            dtype=torch.bfloat16,\n            seed=opts.seed,\n        )\n        timesteps = get_schedule(\n            opts.num_steps,\n            x.shape[-1] * x.shape[-2] // 4,\n            shift=(not self.is_schnell),\n        )\n        if init_image is not None:\n            t_idx = int((1 - image2image_strength) * num_steps)\n            t = timesteps[t_idx]\n            timesteps = timesteps[t_idx:]\n            x = t * x + (1.0 - t) * init_image.to(x.dtype)\n\n        if self.offload:\n            self.t5, self.clip = self.t5.to(self.device), self.clip.to(self.device)\n        inp = prepare(t5=self.t5, clip=self.clip, img=x, prompt=opts.prompt)\n\n        # offload TEs to CPU, load model to gpu\n        if self.offload:\n            self.t5, self.clip = self.t5.cpu(), self.clip.cpu()\n            torch.cuda.empty_cache()\n            self.model = self.model.to(self.device)\n\n        # denoise initial noise\n        x = denoise(self.model, **inp, timesteps=timesteps, guidance=opts.guidance)\n\n        # offload model, load autoencoder to gpu\n        if self.offload:\n            self.model.cpu()\n            torch.cuda.empty_cache()\n            self.ae.decoder.to(x.device)\n\n        # decode latents to pixel space\n        x = unpack(x.float(), opts.height, opts.width)\n        with torch.autocast(device_type=self.device.type, dtype=torch.bfloat16):\n            x = self.ae.decode(x)\n\n        if self.offload:\n            self.ae.decoder.cpu()\n            torch.cuda.empty_cache()\n\n        t1 = time.perf_counter()\n\n        print(f\"Done in {t1 - t0:.1f}s.\")\n        # bring into PIL format\n        x = x.clamp(-1, 1)\n        x = embed_watermark(x.float())\n        x = rearrange(x[0], \"c h w -> h w c\")\n\n        img = Image.fromarray((127.5 * (x + 1.0)).cpu().byte().numpy())\n        nsfw_score = [x[\"score\"] for x in self.nsfw_classifier(img) if x[\"label\"] == \"nsfw\"][0]\n\n        if nsfw_score < NSFW_THRESHOLD:\n            filename = f\"output/gradio/{uuid.uuid4()}.jpg\"\n            os.makedirs(os.path.dirname(filename), exist_ok=True)\n            exif_data = Image.Exif()\n            if init_image is None:\n                exif_data[ExifTags.Base.Software] = \"AI generated;txt2img;flux\"\n            else:\n                exif_data[ExifTags.Base.Software] = \"AI generated;img2img;flux\"\n            exif_data[ExifTags.Base.Make] = \"Black Forest Labs\"\n            exif_data[ExifTags.Base.Model] = self.model_name\n            if add_sampling_metadata:\n                exif_data[ExifTags.Base.ImageDescription] = prompt\n\n            img.save(filename, format=\"jpeg\", exif=exif_data, quality=95, subsampling=0)\n\n            return img, str(opts.seed), filename, None\n        else:\n            return None, str(opts.seed), None, \"Your generated image may contain NSFW content.\"\n\n\ndef create_demo(\n    model_name: str, device: str = \"cuda\" if torch.cuda.is_available() else \"cpu\", offload: bool = False\n):\n    generator = FluxGenerator(model_name, device, offload)\n    is_schnell = model_name == \"flux-schnell\"\n\n    with gr.Blocks() as demo:\n        gr.Markdown(f\"# Flux Image Generation Demo - Model: {model_name}\")\n\n        with gr.Row():\n            with gr.Column():\n                prompt = gr.Textbox(\n                    label=\"Prompt\",\n                    value='a photo of a forest with mist swirling around the tree trunks. The word \"FLUX\" is painted over it in big, red brush strokes with visible texture',\n                )\n                do_img2img = gr.Checkbox(label=\"Image to Image\", value=False, interactive=not is_schnell)\n                init_image = gr.Image(label=\"Input Image\", visible=False)\n                image2image_strength = gr.Slider(\n                    0.0, 1.0, 0.8, step=0.1, label=\"Noising strength\", visible=False\n                )\n\n                with gr.Accordion(\"Advanced Options\", open=False):\n                    width = gr.Slider(128, 8192, 1360, step=16, label=\"Width\")\n                    height = gr.Slider(128, 8192, 768, step=16, label=\"Height\")\n                    num_steps = gr.Slider(1, 50, 4 if is_schnell else 50, step=1, label=\"Number of steps\")\n                    guidance = gr.Slider(\n                        1.0, 10.0, 3.5, step=0.1, label=\"Guidance\", interactive=not is_schnell\n                    )\n                    seed = gr.Textbox(-1, label=\"Seed (-1 for random)\")\n                    add_sampling_metadata = gr.Checkbox(\n                        label=\"Add sampling parameters to metadata?\", value=True\n                    )\n\n                generate_btn = gr.Button(\"Generate\")\n\n            with gr.Column():\n                output_image = gr.Image(label=\"Generated Image\")\n                seed_output = gr.Number(label=\"Used Seed\")\n                warning_text = gr.Textbox(label=\"Warning\", visible=False)\n                download_btn = gr.File(label=\"Download full-resolution\")\n\n        def update_img2img(do_img2img):\n            return {\n                init_image: gr.update(visible=do_img2img),\n                image2image_strength: gr.update(visible=do_img2img),\n            }\n\n        do_img2img.change(update_img2img, do_img2img, [init_image, image2image_strength])\n\n        generate_btn.click(\n            fn=generator.generate_image,\n            inputs=[\n                width,\n                height,\n                num_steps,\n                guidance,\n                seed,\n                prompt,\n                init_image,\n                image2image_strength,\n                add_sampling_metadata,\n            ],\n            outputs=[output_image, seed_output, download_btn, warning_text],\n        )\n\n    return demo\n\n\nif __name__ == \"__main__\":\n    import argparse\n\n    parser = argparse.ArgumentParser(description=\"Flux\")\n    parser.add_argument(\n        \"--name\", type=str, default=\"flux-schnell\", choices=list(configs.keys()), help=\"Model name\"\n    )\n    parser.add_argument(\n        \"--device\", type=str, default=\"cuda\" if torch.cuda.is_available() else \"cpu\", help=\"Device to use\"\n    )\n    parser.add_argument(\"--offload\", action=\"store_true\", help=\"Offload model to CPU when not in use\")\n    parser.add_argument(\"--share\", action=\"store_true\", help=\"Create a public link to your demo\")\n    args = parser.parse_args()\n\n    demo = create_demo(args.name, args.device, args.offload)\n    demo.launch(share=args.share)\n"
        },
        {
          "name": "demo_st.py",
          "type": "blob",
          "size": 9.5166015625,
          "content": "import os\nimport re\nimport time\nfrom glob import iglob\nfrom io import BytesIO\n\nimport streamlit as st\nimport torch\nfrom einops import rearrange\nfrom fire import Fire\nfrom PIL import ExifTags, Image\nfrom st_keyup import st_keyup\nfrom torchvision import transforms\nfrom transformers import pipeline\n\nfrom flux.cli import SamplingOptions\nfrom flux.sampling import denoise, get_noise, get_schedule, prepare, unpack\nfrom flux.util import (\n    configs,\n    embed_watermark,\n    load_ae,\n    load_clip,\n    load_flow_model,\n    load_t5,\n)\n\nNSFW_THRESHOLD = 0.85\n\n\n@st.cache_resource()\ndef get_models(name: str, device: torch.device, offload: bool, is_schnell: bool):\n    t5 = load_t5(device, max_length=256 if is_schnell else 512)\n    clip = load_clip(device)\n    model = load_flow_model(name, device=\"cpu\" if offload else device)\n    ae = load_ae(name, device=\"cpu\" if offload else device)\n    nsfw_classifier = pipeline(\"image-classification\", model=\"Falconsai/nsfw_image_detection\", device=device)\n    return model, ae, t5, clip, nsfw_classifier\n\n\ndef get_image() -> torch.Tensor | None:\n    image = st.file_uploader(\"Input\", type=[\"jpg\", \"JPEG\", \"png\"])\n    if image is None:\n        return None\n    image = Image.open(image).convert(\"RGB\")\n\n    transform = transforms.Compose(\n        [\n            transforms.ToTensor(),\n            transforms.Lambda(lambda x: 2.0 * x - 1.0),\n        ]\n    )\n    img: torch.Tensor = transform(image)\n    return img[None, ...]\n\n\n@torch.inference_mode()\ndef main(\n    device: str = \"cuda\" if torch.cuda.is_available() else \"cpu\",\n    offload: bool = False,\n    output_dir: str = \"output\",\n):\n    torch_device = torch.device(device)\n    names = list(configs.keys())\n    name = st.selectbox(\"Which model to load?\", names)\n    if name is None or not st.checkbox(\"Load model\", False):\n        return\n\n    is_schnell = name == \"flux-schnell\"\n    model, ae, t5, clip, nsfw_classifier = get_models(\n        name,\n        device=torch_device,\n        offload=offload,\n        is_schnell=is_schnell,\n    )\n\n    do_img2img = (\n        st.checkbox(\n            \"Image to Image\",\n            False,\n            disabled=is_schnell,\n            help=\"Partially noise an image and denoise again to get variations.\\n\\nOnly works for flux-dev\",\n        )\n        and not is_schnell\n    )\n    if do_img2img:\n        init_image = get_image()\n        if init_image is None:\n            st.warning(\"Please add an image to do image to image\")\n        image2image_strength = st.number_input(\"Noising strength\", min_value=0.0, max_value=1.0, value=0.8)\n        if init_image is not None:\n            h, w = init_image.shape[-2:]\n            st.write(f\"Got image of size {w}x{h} ({h*w/1e6:.2f}MP)\")\n        resize_img = st.checkbox(\"Resize image\", False) or init_image is None\n    else:\n        init_image = None\n        resize_img = True\n        image2image_strength = 0.0\n\n    # allow for packing and conversion to latent space\n    width = int(\n        16 * (st.number_input(\"Width\", min_value=128, value=1360, step=16, disabled=not resize_img) // 16)\n    )\n    height = int(\n        16 * (st.number_input(\"Height\", min_value=128, value=768, step=16, disabled=not resize_img) // 16)\n    )\n    num_steps = int(st.number_input(\"Number of steps\", min_value=1, value=(4 if is_schnell else 50)))\n    guidance = float(st.number_input(\"Guidance\", min_value=1.0, value=3.5, disabled=is_schnell))\n    seed_str = st.text_input(\"Seed\", disabled=is_schnell)\n    if seed_str.isdecimal():\n        seed = int(seed_str)\n    else:\n        st.info(\"No seed set, set to positive integer to enable\")\n        seed = None\n    save_samples = st.checkbox(\"Save samples?\", not is_schnell)\n    add_sampling_metadata = st.checkbox(\"Add sampling parameters to metadata?\", True)\n\n    default_prompt = (\n        \"a photo of a forest with mist swirling around the tree trunks. The word \"\n        '\"FLUX\" is painted over it in big, red brush strokes with visible texture'\n    )\n    prompt = st_keyup(\"Enter a prompt\", value=default_prompt, debounce=300, key=\"interactive_text\")\n\n    output_name = os.path.join(output_dir, \"img_{idx}.jpg\")\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n        idx = 0\n    else:\n        fns = [fn for fn in iglob(output_name.format(idx=\"*\")) if re.search(r\"img_[0-9]+\\.jpg$\", fn)]\n        if len(fns) > 0:\n            idx = max(int(fn.split(\"_\")[-1].split(\".\")[0]) for fn in fns) + 1\n        else:\n            idx = 0\n\n    rng = torch.Generator(device=\"cpu\")\n\n    if \"seed\" not in st.session_state:\n        st.session_state.seed = rng.seed()\n\n    def increment_counter():\n        st.session_state.seed += 1\n\n    def decrement_counter():\n        if st.session_state.seed > 0:\n            st.session_state.seed -= 1\n\n    opts = SamplingOptions(\n        prompt=prompt,\n        width=width,\n        height=height,\n        num_steps=num_steps,\n        guidance=guidance,\n        seed=seed,\n    )\n\n    if name == \"flux-schnell\":\n        cols = st.columns([5, 1, 1, 5])\n        with cols[1]:\n            st.button(\"↩\", on_click=increment_counter)\n        with cols[2]:\n            st.button(\"↪\", on_click=decrement_counter)\n    if is_schnell or st.button(\"Sample\"):\n        if is_schnell:\n            opts.seed = st.session_state.seed\n        elif opts.seed is None:\n            opts.seed = rng.seed()\n        print(f\"Generating '{opts.prompt}' with seed {opts.seed}\")\n        t0 = time.perf_counter()\n\n        if init_image is not None:\n            if resize_img:\n                init_image = torch.nn.functional.interpolate(init_image, (opts.height, opts.width))\n            else:\n                h, w = init_image.shape[-2:]\n                init_image = init_image[..., : 16 * (h // 16), : 16 * (w // 16)]\n                opts.height = init_image.shape[-2]\n                opts.width = init_image.shape[-1]\n            if offload:\n                ae.encoder.to(torch_device)\n            init_image = ae.encode(init_image.to(torch_device))\n            if offload:\n                ae = ae.cpu()\n                torch.cuda.empty_cache()\n\n        # prepare input\n        x = get_noise(\n            1,\n            opts.height,\n            opts.width,\n            device=torch_device,\n            dtype=torch.bfloat16,\n            seed=opts.seed,\n        )\n        # divide pixel space by 16**2 to account for latent space conversion\n        timesteps = get_schedule(\n            opts.num_steps,\n            (x.shape[-1] * x.shape[-2]) // 4,\n            shift=(not is_schnell),\n        )\n        if init_image is not None:\n            t_idx = int((1 - image2image_strength) * num_steps)\n            t = timesteps[t_idx]\n            timesteps = timesteps[t_idx:]\n            x = t * x + (1.0 - t) * init_image.to(x.dtype)\n\n        if offload:\n            t5, clip = t5.to(torch_device), clip.to(torch_device)\n        inp = prepare(t5=t5, clip=clip, img=x, prompt=opts.prompt)\n\n        # offload TEs to CPU, load model to gpu\n        if offload:\n            t5, clip = t5.cpu(), clip.cpu()\n            torch.cuda.empty_cache()\n            model = model.to(torch_device)\n\n        # denoise initial noise\n        x = denoise(model, **inp, timesteps=timesteps, guidance=opts.guidance)\n\n        # offload model, load autoencoder to gpu\n        if offload:\n            model.cpu()\n            torch.cuda.empty_cache()\n            ae.decoder.to(x.device)\n\n        # decode latents to pixel space\n        x = unpack(x.float(), opts.height, opts.width)\n        with torch.autocast(device_type=torch_device.type, dtype=torch.bfloat16):\n            x = ae.decode(x)\n\n        if offload:\n            ae.decoder.cpu()\n            torch.cuda.empty_cache()\n\n        t1 = time.perf_counter()\n\n        fn = output_name.format(idx=idx)\n        print(f\"Done in {t1 - t0:.1f}s.\")\n        # bring into PIL format and save\n        x = x.clamp(-1, 1)\n        x = embed_watermark(x.float())\n        x = rearrange(x[0], \"c h w -> h w c\")\n\n        img = Image.fromarray((127.5 * (x + 1.0)).cpu().byte().numpy())\n        nsfw_score = [x[\"score\"] for x in nsfw_classifier(img) if x[\"label\"] == \"nsfw\"][0]\n\n        if nsfw_score < NSFW_THRESHOLD:\n            buffer = BytesIO()\n            exif_data = Image.Exif()\n            if init_image is None:\n                exif_data[ExifTags.Base.Software] = \"AI generated;txt2img;flux\"\n            else:\n                exif_data[ExifTags.Base.Software] = \"AI generated;img2img;flux\"\n            exif_data[ExifTags.Base.Make] = \"Black Forest Labs\"\n            exif_data[ExifTags.Base.Model] = name\n            if add_sampling_metadata:\n                exif_data[ExifTags.Base.ImageDescription] = prompt\n            img.save(buffer, format=\"jpeg\", exif=exif_data, quality=95, subsampling=0)\n\n            img_bytes = buffer.getvalue()\n            if save_samples:\n                print(f\"Saving {fn}\")\n                with open(fn, \"wb\") as file:\n                    file.write(img_bytes)\n                idx += 1\n\n            st.session_state[\"samples\"] = {\n                \"prompt\": opts.prompt,\n                \"img\": img,\n                \"seed\": opts.seed,\n                \"bytes\": img_bytes,\n            }\n            opts.seed = None\n        else:\n            st.warning(\"Your generated image may contain NSFW content.\")\n            st.session_state[\"samples\"] = None\n\n    samples = st.session_state.get(\"samples\", None)\n    if samples is not None:\n        st.image(samples[\"img\"], caption=samples[\"prompt\"])\n        st.download_button(\n            \"Download full-resolution\",\n            samples[\"bytes\"],\n            file_name=\"generated.jpg\",\n            mime=\"image/jpg\",\n        )\n        st.write(f\"Seed: {samples['seed']}\")\n\n\ndef app():\n    Fire(main)\n\n\nif __name__ == \"__main__\":\n    app()\n"
        },
        {
          "name": "demo_st_fill.py",
          "type": "blob",
          "size": 17.30859375,
          "content": "import os\nimport re\nimport tempfile\nimport time\nfrom glob import iglob\nfrom io import BytesIO\n\nimport numpy as np\nimport streamlit as st\nimport torch\nfrom einops import rearrange\nfrom PIL import ExifTags, Image\nfrom st_keyup import st_keyup\nfrom streamlit_drawable_canvas import st_canvas\nfrom transformers import pipeline\n\nfrom flux.sampling import denoise, get_noise, get_schedule, prepare_fill, unpack\nfrom flux.util import embed_watermark, load_ae, load_clip, load_flow_model, load_t5\n\nNSFW_THRESHOLD = 0.85\n\n\ndef add_border_and_mask(image, zoom_all=1.0, zoom_left=0, zoom_right=0, zoom_up=0, zoom_down=0, overlap=0):\n    \"\"\"Adds a black border around the image with individual side control and mask overlap\"\"\"\n    orig_width, orig_height = image.size\n\n    # Calculate padding for each side (in pixels)\n    left_pad = int(orig_width * zoom_left)\n    right_pad = int(orig_width * zoom_right)\n    top_pad = int(orig_height * zoom_up)\n    bottom_pad = int(orig_height * zoom_down)\n\n    # Calculate overlap in pixels\n    overlap_left = int(orig_width * overlap)\n    overlap_right = int(orig_width * overlap)\n    overlap_top = int(orig_height * overlap)\n    overlap_bottom = int(orig_height * overlap)\n\n    # If using the all-sides zoom, add it to each side\n    if zoom_all > 1.0:\n        extra_each_side = (zoom_all - 1.0) / 2\n        left_pad += int(orig_width * extra_each_side)\n        right_pad += int(orig_width * extra_each_side)\n        top_pad += int(orig_height * extra_each_side)\n        bottom_pad += int(orig_height * extra_each_side)\n\n    # Calculate new dimensions (ensure they're multiples of 32)\n    new_width = 32 * round((orig_width + left_pad + right_pad) / 32)\n    new_height = 32 * round((orig_height + top_pad + bottom_pad) / 32)\n\n    # Create new image with black border\n    bordered_image = Image.new(\"RGB\", (new_width, new_height), (0, 0, 0))\n    # Paste original image in position\n    paste_x = left_pad\n    paste_y = top_pad\n    bordered_image.paste(image, (paste_x, paste_y))\n\n    # Create mask (white where the border is, black where the original image was)\n    mask = Image.new(\"L\", (new_width, new_height), 255)  # White background\n    # Paste black rectangle with overlap adjustment\n    mask.paste(\n        0,\n        (\n            paste_x + overlap_left,  # Left edge moves right\n            paste_y + overlap_top,  # Top edge moves down\n            paste_x + orig_width - overlap_right,  # Right edge moves left\n            paste_y + orig_height - overlap_bottom,  # Bottom edge moves up\n        ),\n    )\n\n    return bordered_image, mask\n\n\n@st.cache_resource()\ndef get_models(name: str, device: torch.device, offload: bool):\n    t5 = load_t5(device, max_length=128)\n    clip = load_clip(device)\n    model = load_flow_model(name, device=\"cpu\" if offload else device)\n    ae = load_ae(name, device=\"cpu\" if offload else device)\n    nsfw_classifier = pipeline(\"image-classification\", model=\"Falconsai/nsfw_image_detection\", device=device)\n    return model, ae, t5, clip, nsfw_classifier\n\n\ndef resize(img: Image.Image, min_mp: float = 0.5, max_mp: float = 2.0) -> Image.Image:\n    width, height = img.size\n    mp = (width * height) / 1_000_000  # Current megapixels\n\n    if min_mp <= mp <= max_mp:\n        # Even if MP is in range, ensure dimensions are multiples of 32\n        new_width = int(32 * round(width / 32))\n        new_height = int(32 * round(height / 32))\n        if new_width != width or new_height != height:\n            return img.resize((new_width, new_height), Image.Resampling.LANCZOS)\n        return img\n\n    # Calculate scaling factor\n    if mp < min_mp:\n        scale = (min_mp / mp) ** 0.5\n    else:  # mp > max_mp\n        scale = (max_mp / mp) ** 0.5\n\n    new_width = int(32 * round(width * scale / 32))\n    new_height = int(32 * round(height * scale / 32))\n\n    return img.resize((new_width, new_height), Image.Resampling.LANCZOS)\n\n\ndef clear_canvas_state():\n    \"\"\"Clear all canvas-related state\"\"\"\n    keys_to_clear = [\"canvas\", \"last_image_dims\"]\n    for key in keys_to_clear:\n        if key in st.session_state:\n            del st.session_state[key]\n\n\ndef set_new_image(img: Image.Image):\n    \"\"\"Safely set a new image and clear relevant state\"\"\"\n    st.session_state[\"current_image\"] = img\n    clear_canvas_state()\n    st.rerun()\n\n\ndef downscale_image(img: Image.Image, scale_factor: float) -> Image.Image:\n    \"\"\"Downscale image by a given factor while maintaining 32-pixel multiple dimensions\"\"\"\n    if scale_factor >= 1.0:\n        return img\n\n    width, height = img.size\n    new_width = int(32 * round(width * scale_factor / 32))\n    new_height = int(32 * round(height * scale_factor / 32))\n\n    # Ensure minimum dimensions\n    new_width = max(64, new_width)  # minimum 64 pixels\n    new_height = max(64, new_height)  # minimum 64 pixels\n\n    return img.resize((new_width, new_height), Image.Resampling.LANCZOS)\n\n\n@torch.inference_mode()\ndef main(\n    device: str = \"cuda\" if torch.cuda.is_available() else \"cpu\",\n    offload: bool = False,\n    output_dir: str = \"output\",\n):\n    torch_device = torch.device(device)\n    st.title(\"Flux Fill: Inpainting & Outpainting\")\n\n    # Model selection and loading\n    name = \"flux-dev-fill\"\n    if not st.checkbox(\"Load model\", False):\n        return\n\n    try:\n        model, ae, t5, clip, nsfw_classifier = get_models(\n            name,\n            device=torch_device,\n            offload=offload,\n        )\n    except Exception as e:\n        st.error(f\"Error loading models: {e}\")\n        return\n\n    # Mode selection\n    mode = st.radio(\"Select Mode\", [\"Inpainting\", \"Outpainting\"])\n\n    # Image handling - either from previous generation or new upload\n    if \"input_image\" in st.session_state:\n        image = st.session_state[\"input_image\"]\n        del st.session_state[\"input_image\"]\n        set_new_image(image)\n        st.write(\"Continuing from previous result\")\n    else:\n        uploaded_image = st.file_uploader(\"Upload image\", type=[\"jpg\", \"jpeg\", \"png\"])\n        if uploaded_image is None:\n            st.warning(\"Please upload an image\")\n            return\n\n        if (\n            \"current_image_name\" not in st.session_state\n            or st.session_state[\"current_image_name\"] != uploaded_image.name\n        ):\n            try:\n                image = Image.open(uploaded_image).convert(\"RGB\")\n                st.session_state[\"current_image_name\"] = uploaded_image.name\n                set_new_image(image)\n            except Exception as e:\n                st.error(f\"Error loading image: {e}\")\n                return\n        else:\n            image = st.session_state.get(\"current_image\")\n            if image is None:\n                st.error(\"Error: Image state is invalid. Please reupload the image.\")\n                clear_canvas_state()\n                return\n\n    # Add downscale control\n    with st.expander(\"Image Size Control\"):\n        current_mp = (image.size[0] * image.size[1]) / 1_000_000\n        st.write(f\"Current image size: {image.size[0]}x{image.size[1]} ({current_mp:.1f}MP)\")\n\n        scale_factor = st.slider(\n            \"Downscale Factor\",\n            min_value=0.1,\n            max_value=1.0,\n            value=1.0,\n            step=0.1,\n            help=\"1.0 = original size, 0.5 = half size, etc.\",\n        )\n\n        if scale_factor < 1.0 and st.button(\"Apply Downscaling\"):\n            image = downscale_image(image, scale_factor)\n            set_new_image(image)\n            st.rerun()\n\n    # Resize image with validation\n    try:\n        original_mp = (image.size[0] * image.size[1]) / 1_000_000\n        image = resize(image)\n        width, height = image.size\n        current_mp = (width * height) / 1_000_000\n\n        if width % 32 != 0 or height % 32 != 0:\n            st.error(\"Error: Image dimensions must be multiples of 32\")\n            return\n\n        st.write(f\"Image dimensions: {width}x{height} pixels\")\n        if original_mp != current_mp:\n            st.write(\n                f\"Image has been resized from {original_mp:.1f}MP to {current_mp:.1f}MP to stay within bounds (0.5MP - 2MP)\"\n            )\n    except Exception as e:\n        st.error(f\"Error processing image: {e}\")\n        return\n\n    if mode == \"Outpainting\":\n        # Outpainting controls\n        zoom_all = st.slider(\"Zoom Out Amount (All Sides)\", min_value=1.0, max_value=3.0, value=1.0, step=0.1)\n\n        with st.expander(\"Advanced Zoom Controls\"):\n            st.info(\"These controls add additional zoom to specific sides\")\n            col1, col2 = st.columns(2)\n            with col1:\n                zoom_left = st.slider(\"Left\", min_value=0.0, max_value=1.0, value=0.0, step=0.1)\n                zoom_right = st.slider(\"Right\", min_value=0.0, max_value=1.0, value=0.0, step=0.1)\n            with col2:\n                zoom_up = st.slider(\"Up\", min_value=0.0, max_value=1.0, value=0.0, step=0.1)\n                zoom_down = st.slider(\"Down\", min_value=0.0, max_value=1.0, value=0.0, step=0.1)\n\n        overlap = st.slider(\"Overlap\", min_value=0.01, max_value=0.25, value=0.01, step=0.01)\n\n        # Generate bordered image and mask\n        image_for_generation, mask = add_border_and_mask(\n            image,\n            zoom_all=zoom_all,\n            zoom_left=zoom_left,\n            zoom_right=zoom_right,\n            zoom_up=zoom_up,\n            zoom_down=zoom_down,\n            overlap=overlap,\n        )\n        width, height = image_for_generation.size\n\n        # Show preview\n        col1, col2 = st.columns(2)\n        with col1:\n            st.image(image_for_generation, caption=\"Image with Border\")\n        with col2:\n            st.image(mask, caption=\"Mask (white areas will be generated)\")\n\n    else:  # Inpainting mode\n        # Canvas setup with dimension tracking\n        canvas_key = f\"canvas_{width}_{height}\"\n        if \"last_image_dims\" not in st.session_state:\n            st.session_state.last_image_dims = (width, height)\n        elif st.session_state.last_image_dims != (width, height):\n            clear_canvas_state()\n            st.session_state.last_image_dims = (width, height)\n            st.rerun()\n\n        try:\n            canvas_result = st_canvas(\n                fill_color=\"rgba(255, 255, 255, 0.0)\",\n                stroke_width=st.slider(\"Brush size\", 1, 500, 50),\n                stroke_color=\"#fff\",\n                background_image=image,\n                height=height,\n                width=width,\n                drawing_mode=\"freedraw\",\n                key=canvas_key,\n                display_toolbar=True,\n            )\n        except Exception as e:\n            st.error(f\"Error creating canvas: {e}\")\n            clear_canvas_state()\n            st.rerun()\n            return\n\n    # Sampling parameters\n    num_steps = int(st.number_input(\"Number of steps\", min_value=1, value=50))\n    guidance = float(st.number_input(\"Guidance\", min_value=1.0, value=30.0))\n    seed_str = st.text_input(\"Seed\")\n    if seed_str.isdecimal():\n        seed = int(seed_str)\n    else:\n        st.info(\"No seed set, using random seed\")\n        seed = None\n\n    save_samples = st.checkbox(\"Save samples?\", True)\n    add_sampling_metadata = st.checkbox(\"Add sampling parameters to metadata?\", True)\n\n    # Prompt input\n    prompt = st_keyup(\"Enter a prompt\", value=\"\", debounce=300, key=\"interactive_text\")\n\n    # Setup output path\n    output_name = os.path.join(output_dir, \"img_{idx}.jpg\")\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n        idx = 0\n    else:\n        fns = [fn for fn in iglob(output_name.format(idx=\"*\")) if re.search(r\"img_[0-9]+\\.jpg$\", fn)]\n        idx = len(fns)\n\n    if st.button(\"Generate\"):\n        valid_input = False\n\n        if mode == \"Inpainting\" and canvas_result.image_data is not None:\n            valid_input = True\n            # Create mask from canvas\n            try:\n                mask = Image.fromarray(canvas_result.image_data)\n                mask = mask.getchannel(\"A\")  # Get alpha channel\n                mask_array = np.array(mask)\n                mask_array = (mask_array > 0).astype(np.uint8) * 255\n                mask = Image.fromarray(mask_array)\n                image_for_generation = image\n            except Exception as e:\n                st.error(f\"Error creating mask: {e}\")\n                return\n\n        elif mode == \"Outpainting\":\n            valid_input = True\n            # image_for_generation and mask are already set above\n\n        if not valid_input:\n            st.error(\"Please draw a mask or configure outpainting settings\")\n            return\n\n        # Create temporary files\n        with (\n            tempfile.NamedTemporaryFile(suffix=\".png\", delete=False) as tmp_img,\n            tempfile.NamedTemporaryFile(suffix=\".png\", delete=False) as tmp_mask,\n        ):\n            try:\n                image_for_generation.save(tmp_img.name)\n                mask.save(tmp_mask.name)\n            except Exception as e:\n                st.error(f\"Error saving temporary files: {e}\")\n                return\n\n            try:\n                # Generate inpainting/outpainting\n                rng = torch.Generator(device=\"cpu\")\n                if seed is None:\n                    seed = rng.seed()\n\n                print(f\"Generating with seed {seed}:\\n{prompt}\")\n                t0 = time.perf_counter()\n\n                x = get_noise(\n                    1,\n                    height,\n                    width,\n                    device=torch_device,\n                    dtype=torch.bfloat16,\n                    seed=seed,\n                )\n\n                if offload:\n                    t5, clip, ae = t5.to(torch_device), clip.to(torch_device), ae.to(torch_device)\n\n                inp = prepare_fill(\n                    t5,\n                    clip,\n                    x,\n                    prompt=prompt,\n                    ae=ae,\n                    img_cond_path=tmp_img.name,\n                    mask_path=tmp_mask.name,\n                )\n\n                timesteps = get_schedule(num_steps, inp[\"img\"].shape[1], shift=True)\n\n                if offload:\n                    t5, clip, ae = t5.cpu(), clip.cpu(), ae.cpu()\n                    torch.cuda.empty_cache()\n                    model = model.to(torch_device)\n\n                x = denoise(model, **inp, timesteps=timesteps, guidance=guidance)\n\n                if offload:\n                    model.cpu()\n                    torch.cuda.empty_cache()\n                    ae.decoder.to(x.device)\n\n                x = unpack(x.float(), height, width)\n                with torch.autocast(device_type=torch_device.type, dtype=torch.bfloat16):\n                    x = ae.decode(x)\n\n                t1 = time.perf_counter()\n                print(f\"Done in {t1 - t0:.1f}s\")\n\n                # Process and display result\n                x = x.clamp(-1, 1)\n                x = embed_watermark(x.float())\n                x = rearrange(x[0], \"c h w -> h w c\")\n                img = Image.fromarray((127.5 * (x + 1.0)).cpu().byte().numpy())\n\n                nsfw_score = [x[\"score\"] for x in nsfw_classifier(img) if x[\"label\"] == \"nsfw\"][0]\n\n                if nsfw_score < NSFW_THRESHOLD:\n                    buffer = BytesIO()\n                    exif_data = Image.Exif()\n                    exif_data[ExifTags.Base.Software] = \"AI generated;inpainting;flux\"\n                    exif_data[ExifTags.Base.Make] = \"Black Forest Labs\"\n                    exif_data[ExifTags.Base.Model] = name\n                    if add_sampling_metadata:\n                        exif_data[ExifTags.Base.ImageDescription] = prompt\n                    img.save(buffer, format=\"jpeg\", exif=exif_data, quality=95, subsampling=0)\n\n                    img_bytes = buffer.getvalue()\n                    if save_samples:\n                        fn = output_name.format(idx=idx)\n                        print(f\"Saving {fn}\")\n                        with open(fn, \"wb\") as file:\n                            file.write(img_bytes)\n\n                    st.session_state[\"samples\"] = {\n                        \"prompt\": prompt,\n                        \"img\": img,\n                        \"seed\": seed,\n                        \"bytes\": img_bytes,\n                    }\n                else:\n                    st.warning(\"Your generated image may contain NSFW content.\")\n                    st.session_state[\"samples\"] = None\n\n            except Exception as e:\n                st.error(f\"Error during generation: {e}\")\n                return\n            finally:\n                # Clean up temporary files\n                try:\n                    os.unlink(tmp_img.name)\n                    os.unlink(tmp_mask.name)\n                except Exception as e:\n                    print(f\"Error cleaning up temporary files: {e}\")\n\n    # Display results\n    samples = st.session_state.get(\"samples\", None)\n    if samples is not None:\n        st.image(samples[\"img\"], caption=samples[\"prompt\"])\n        col1, col2 = st.columns(2)\n        with col1:\n            st.download_button(\n                \"Download full-resolution\",\n                samples[\"bytes\"],\n                file_name=\"generated.jpg\",\n                mime=\"image/jpg\",\n            )\n        with col2:\n            if st.button(\"Continue from this image\"):\n                # Store the generated image\n                new_image = samples[\"img\"]\n                # Clear ALL canvas state\n                clear_canvas_state()\n                if \"samples\" in st.session_state:\n                    del st.session_state[\"samples\"]\n                # Set as current image\n                st.session_state[\"current_image\"] = new_image\n                st.rerun()\n\n        st.write(f\"Seed: {samples['seed']}\")\n\n\nif __name__ == \"__main__\":\n    st.set_page_config(layout=\"wide\")\n    main()\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "model_cards",
          "type": "tree",
          "content": null
        },
        {
          "name": "model_licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.896484375,
          "content": "[project]\nname = \"flux\"\nauthors = [\n  { name = \"Black Forest Labs\", email = \"support@blackforestlabs.ai\" },\n]\ndescription = \"Inference codebase for FLUX\"\nreadme = \"README.md\"\nrequires-python = \">=3.10\"\nlicense = { file = \"LICENSE.md\" }\ndynamic = [\"version\"]\ndependencies = [\n  \"torch == 2.5.1\",\n  \"torchvision\",\n  \"einops\",\n  \"fire >= 0.6.0\",\n  \"huggingface-hub\",\n  \"safetensors\",\n  \"sentencepiece\",\n  \"transformers\",\n  \"tokenizers\",\n  \"protobuf\",\n  \"requests\",\n  \"invisible-watermark\",\n  \"ruff == 0.6.8\",\n]\n\n[project.optional-dependencies]\nstreamlit = [\n  \"streamlit\",\n  \"streamlit-drawable-canvas\",\n  \"streamlit-keyup\",\n]\ngradio = [\n  \"gradio\",\n]\nall = [\n  \"flux[streamlit]\",\n  \"flux[gradio]\",\n]\n\n[project.scripts]\nflux = \"flux.cli:app\"\n\n[build-system]\nbuild-backend = \"setuptools.build_meta\"\nrequires = [\"setuptools>=64\", \"wheel\", \"setuptools_scm>=8\"]\n\n[tool.ruff]\nline-length = 110\ntarget-version = \"py310\"\nextend-exclude = [\"/usr/lib/*\"]\n\n[tool.ruff.lint]\nignore = [\n  \"E501\", # line too long - will be fixed in format\n]\n\n[tool.ruff.format]\nquote-style = \"double\"\nindent-style = \"space\"\nline-ending = \"auto\"\nskip-magic-trailing-comma = false\ndocstring-code-format = true\nexclude = [\n  \"src/flux/_version.py\", # generated by setuptools_scm\n]\n\n[tool.ruff.lint.isort]\ncombine-as-imports = true\nforce-wrap-aliases = true\nknown-local-folder = [\"src\"]\nknown-first-party = [\"flux\"]\n\n[tool.pyright]\ninclude = [\"src\"]\nexclude = [\n  \"**/__pycache__\", # cache directories\n  \"./typings\",      # generated type stubs\n]\nstubPath = \"./typings\"\n\n[tool.tomlsort]\nin_place = true\nno_sort_tables = true\nspaces_before_inline_comment = 1\nspaces_indent_inline_array = 2\ntrailing_comma_inline_array = true\nsort_first = [\n  \"project\",\n  \"build-system\",\n  \"tool.setuptools\",\n]\n\n# needs to be last for CI reasons\n[tool.setuptools_scm]\nwrite_to = \"src/flux/_version.py\"\nparentdir_prefix_version = \"flux-\"\nfallback_version = \"0.0.0\"\nversion_scheme = \"post-release\"\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.037109375,
          "content": "import setuptools\n\nsetuptools.setup()\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}