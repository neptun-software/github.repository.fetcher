{
  "metadata": {
    "timestamp": 1736561325399,
    "page": 340,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ludwig-ai/ludwig",
      "stars": 11274,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".actrc",
          "type": "blob",
          "size": 0.0361328125,
          "content": "-P ubuntu-latest=ludwigai/ludwig-ray\n"
        },
        {
          "name": ".deepsource.toml",
          "type": "blob",
          "size": 0.115234375,
          "content": "version = 1\n\ntest_patterns = [\n  \"tests/**\"\n]\n\n[[analyzers]]\nname = \"python\"\nenabled = true\nruntime_version = \"3.x.x\"\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.5576171875,
          "content": "###################\n# ludwig specific #\n###################\n\n*.lock_preprocessing\nresults/\nludwig/results/\nresults_*/\nludwig_arm64/\n\n# ailabs-utils\nailabs_util\ndocker_assets\n\n# data\nmnist_data/\nprofile_images/\n./profile_images/\n\n###########\n# General #\n###########\n\n# Mac stuff\n.DS_Store\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nenv*\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\n./downloads/\n./dataset/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Data\n*.csv\n*.hdf5\n*.meta.json\n*.parquet\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv*\nENV/\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n\n# PyCharm\n.idea\n\n# ctags\ntags\n\n# examples\nexamples/*/data/\nexamples/*/visualizations/\n\n# benchmarking configs\nludwig/benchmarking/configs/\n"
        },
        {
          "name": ".nojekyll",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.8095703125,
          "content": "# Apply to all files without committing:\n#   pre-commit run --all-files\n# Apply to changed files:\n#   pre-commit run\n# Update this file:\n#   pre-commit autoupdate\n# Run a specific hook:\n#   pre-commit run <hook id>\n\nci:\n  autofix_prs: true\n  autoupdate_commit_msg: \"[pre-commit.ci] pre-commit suggestions\"\n  autoupdate_schedule: weekly\n\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n      - id: check-ast\n      - id: check-byte-order-marker\n      - id: check-case-conflict\n      - id: check-executables-have-shebangs\n      - id: check-json\n      - id: check-toml\n      - id: check-yaml\n      - id: debug-statements\n      - id: detect-private-key\n      - id: end-of-file-fixer\n      - id: trailing-whitespace\n      - id: mixed-line-ending\n  - repo: https://github.com/asottile/pyupgrade\n    rev: v3.3.1\n    hooks:\n      - id: pyupgrade\n        args: [--py36-plus]\n  - repo: https://github.com/PyCQA/docformatter\n    rev: v1.5.1\n    hooks:\n      - id: docformatter\n        args: [--in-place, --wrap-summaries=115, --wrap-descriptions=120]\n  - repo: https://github.com/PyCQA/isort\n    rev: 5.12.0\n    hooks:\n      - id: isort\n        name: Format imports\n  - repo: https://github.com/pycqa/flake8\n    rev: 6.0.0\n    hooks:\n      - id: flake8\n  - repo: https://github.com/psf/black\n    rev: 23.3.0\n    hooks:\n      - id: black\n        name: Format code\n  - repo: https://github.com/asottile/blacken-docs\n    rev: 1.13.0\n    hooks:\n      - id: blacken-docs\n        args: [--line-length=120]\n  - repo: https://github.com/executablebooks/mdformat\n    rev: 0.7.16\n    hooks:\n      - id: mdformat\n        additional_dependencies:\n          - mdformat-gfm\n          - mdformat_frontmatter\n        exclude: CHANGELOG.md\n  - repo: https://github.com/yoheimuta/protolint\n    rev: v0.42.2\n    hooks:\n      - id: protolint\n"
        },
        {
          "name": ".protolint.yaml",
          "type": "blob",
          "size": 1.5185546875,
          "content": "# Adapted from\n# https://github.com/yoheimuta/protolint/blob/master/_example/config/.protolint.yaml\n---\n# Lint directives.\nlint:\n  # Linter files to walk.\n  files:\n    # The specific files to exclude.\n    exclude:\n      # NOTE: UNIX paths will be properly accepted by both UNIX and Windows.\n      - ../proto/invalidFileName.proto\n\n  # Linter rules.\n  # Run `protolint list` to see all available rules.\n  rules:\n    # Set the default to all linters. This option works the other way around as no_default does.\n    # If you want to enable this option, delete the comment out below and no_default.\n    # all_default: true\n\n    # The specific linters to add.\n    add:\n      - FIELD_NAMES_LOWER_SNAKE_CASE\n      - MESSAGE_NAMES_UPPER_CAMEL_CASE\n      - MAX_LINE_LENGTH\n      - INDENT\n      - FIELD_NAMES_EXCLUDE_PREPOSITIONS\n      - FILE_NAMES_LOWER_SNAKE_CASE\n      - IMPORTS_SORTED\n      - PACKAGE_NAME_LOWER_CASE\n      - ORDER\n      - PROTO3_FIELDS_AVOID_REQUIRED\n      - PROTO3_GROUPS_AVOID\n      - REPEATED_FIELD_NAMES_PLURALIZED\n      - QUOTE_CONSISTENT\n\n  # Linter rules option.\n  rules_option:\n    # MAX_LINE_LENGTH rule option.\n    max_line_length:\n      # Enforces a maximum line length\n      max_chars: 120\n      # Specifies the character count for tab characters\n      tab_chars: 2\n\n    # FILE_NAMES_LOWER_SNAKE_CASE rule option.\n    file_names_lower_snake_case:\n      excludes:\n        - ../proto/invalidFileName.proto\n\n    # QUOTE_CONSISTENT rule option.\n    quote_consistent:\n      # Available quote are \"double\" or \"single\".\n      quote: double\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.15234375,
          "content": "# Default code owners for the entire repository\n* @w4nderlust @tgaddair @justinxzhao @arnavgarg1 @geoffreyangus @jeffkinnison @Infernaught @alexsherstinsky\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.1201171875,
          "content": "# Code of conduct\n\nLudwig adopts the [Linux Foundation code of conduct](https://lfprojects.org/policies/code-of-conduct/).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.0859375,
          "content": "# Contributing\n\nEveryone is welcome to contribute, and we value everybody’s contribution. Code is thus not the only\nway to help the community. Answering questions, helping others, reaching out and improving the\ndocumentation are immensely valuable contributions as well.\n\nIt also helps us if you spread the word: reference the library from blog posts on the awesome\nprojects it made possible, shout out on X every time it has helped you, or simply star the\nrepo to say \"thank you\".\n\nCheck out the official [ludwig docs](https://ludwig-ai.github.io/ludwig-docs/) to get oriented\naround the codebase, and join the community!\n\n## Open Issues\n\nIssues are listed at: <https://github.com/ludwig-ai/ludwig/issues>\n\nIf you would like to work on any of them, make sure it is not already assigned to someone else.\n\nYou can self-assign it by commenting on the Issue page with one of the keywords: `#take` or\n`#self-assign`.\n\nWork on your self-assigned issue and eventually create a Pull Request.\n\n## Creating Pull Requests\n\n1. Fork the [repository](https://github.com/ludwig-ai/ludwig) by clicking on the \"Fork\" button on\n   the repository's page. This creates a copy of the code under your GitHub user account.\n\n1. Clone your fork to your local disk, and add the base repository as a remote:\n\n   ```bash\n   git clone git@github.com:<your Github handle>/ludwig.git\n   cd ludwig\n   git remote add upstream https://github.com/ludwig-ai/ludwig.git\n   ```\n\n1. Create a new branch to hold your development changes:\n\n   ```bash\n   git checkout -b a-descriptive-name-for-my-changes\n   ```\n\n   *Do not*\\* work on the `master` branch.\n\n1. Set up a development environment by running the following command in a virtual environment:\n\n   ```bash\n   pip install -e .\n   ```\n\n   The above command will install only the packages in \"requirements.txt\" in the developer mode.  If you would like to\n   be able to potentially make changes to the overall Ludwig codebase, then use the following command:\n\n   ```bash\n   pip install -e .[full]\n   ```\n\n   Please note that in certain Shell environments (e.g., the `Z shell`), the dependencies in brackets have to be quoted:\n\n   ```bash\n   pip install -e .\"[full]\"\n   ```\n\n   If you do not need access to the entire Ludwig codebase, but just want to be able to run `pytest` on the essential\n   functionality, then you would replace the above command with:\n\n   ```bash\n   pip install -e .[test]\n   ```\n\n   (Please use `pip install -e .\"[test]\"` where your Shell environment requires quotes around the square brackets.)\n\n   For the full list of the optional dependencies available in Ludwig, please see\n   [Installation Guide](https://ludwig.ai/latest/getting_started/installation/) and \"setup.py\" in the root of the Ludwig\n   repository.\n\n1. On MacOS with Apple Silicon, if this installation approach runs into errors, you may need to install the following\n   prerequisites:\n\n   ```bash\n   brew install cmake libomp\n   ```\n\n   This step requires `homebrew` to be installed on your development machine.\n\n1. Install and run `pre-commit`:\n\n   ```bash\n   pip install pre-commit\n   pre-commit install\n   ```\n\n1. Finally, if during the installation of `horovod`, the exception `ModuleNotFoundError: No module named 'packaging'`\n   occurs, you may need to disable `horovod` (that means you will need train with another backend, just not `horovod`).\n   To do that, edit the file `requirements_extra.txt` and comment out the line that begins with `horovod`.  After that,\n   please execute the long `pip install` command given in the previous step.  With these work-around provisions, your\n   installation should run to completion successfully.  If you are still having difficulty, please reach out with the\n   specifics of your environment in the Ludwig Community [Discord](https://discord.gg/CBgdrGnZjy).\n\n1. Develop features on your branch.\n\n1. Format your code by running pre-commits so that your newly added files look nice:\n\n   ```bash\n   pre-commit run\n   ```\n\n   Pre-commits also run automatically when committing.\n\n1. Once you're happy with your changes, make a commit to record your changes locally:\n\n   ```bash\n   git add .\n   git commit\n   ```\n\n   It is a good idea to sync your copy of the code with the original repository regularly. This\n   way you can quickly account for changes:\n\n   ```bash\n   git fetch upstream\n   git rebase upstream/master\n   ```\n\n   Push the changes to your account using:\n\n   ```bash\n   git push -u origin a-descriptive-name-for-my-changes\n   ```\n\n1. Once you are satisfied, go the webpage of your fork on GitHub. Click on \"Pull request\" to send\n   your contribution to the project maintainers for review.\n\n## Other tips\n\n- Add unit tests for any new code you write.\n- Make sure tests pass. See the [Developer Guide](https://ludwig-ai.github.io/ludwig-docs/latest/developer_guide/style_guidelines_and_tests/) for more details.\n\n## Attribution\n\nThis contributing guideline is adapted from `huggingface`, available at <https://github.com/huggingface/datasets/blob/master/CONTRIBUTING.md>.\n\n## Code of Conduct\n\nPlease be mindful of and adhere to the Linux Foundation's\n[Code of Conduct](https://lfprojects.org/policies/code-of-conduct) when contributing to Ludwig.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 13.1728515625,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n--------------------------------------------------------------------------\n\nCode in ludwig/api_annotations.py adapted from\nhttps://github.com/ray-project/ray (Apache-2.0 License)\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n--------------------------------------------------------------------------\n\nCode in ludwig/utils/structural_warnings.py adapted from\nhttps://github.com/ray-project/ray (Apache-2.0 License)\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n--------------------------------------------------------------------------\n\nCode in ludwig/utils/logging_utils.py adapted from\nhttps://github.com/ray-project/ray (Apache-2.0 License)\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1552734375,
          "content": "include *.txt\nrecursive-include ludwig/datasets *.yaml\nrecursive-include ludwig/automl/defaults *.yaml\nrecursive-include ludwig/schema/metadata/configs *.yaml\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 2.5556640625,
          "content": "Ludwig includes derived work from TensorFlow(https://github.com/tensorflow/tensorflow) under the Apache License 2.0:\n\nCopyright 2016 The prometheus-operator Authors\n\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n\nThe derived work can be found in the files: ludwig/models/modules/convolutional_modules.py\n\n\n------\n\nLudwig includes derived work from Keras(https://github.com/keras-team/keras) under the MIT License:\n\n\nCOPYRIGHT\n\nAll contributions by François Chollet:\n\nCopyright (c) 2015 - 2018, François Chollet.\n\nAll rights reserved.\n\n\nAll contributions by Google:\n\nCopyright (c) 2015 - 2018, Google, Inc.\n\nAll rights reserved.\n\n\nAll contributions by Microsoft:\n\nCopyright (c) 2017 - 2018, Microsoft, Inc.\n\nAll rights reserved.\n\n\nAll other contributions:\n\nCopyright (c) 2015 - 2018, the respective contributors.\n\nAll rights reserved.\n\n\nEach contributor holds copyright over their respective contributions.\n\nThe project versioning (Git) records all such contribution source information.\n\nLICENSE\n\nThe MIT License (MIT)\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\n\nof this software and associated documentation files (the \"Software\"), to deal\n\nin the Software without restriction, including without limitation the rights\n\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\ncopies of the Software, and to permit persons to whom the Software is\n\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\n\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\nSOFTWARE.\n\n\nThe derived work can be found in the files: mkdocs/code_docs_autogen.py\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.6259765625,
          "content": "<p align=\"center\">\n  <a href=\"https://ludwig.ai\">\n    <img src=\"https://github.com/ludwig-ai/ludwig-docs/raw/master/docs/images/ludwig_hero_smaller.jpg\" height=\"150\">\n  </a>\n</p>\n\n<div align=\"center\">\n\n_Declarative deep learning framework built for scale and efficiency._\n\n[![PyPI version](https://badge.fury.io/py/ludwig.svg)](https://badge.fury.io/py/ludwig)\n[![Discord](https://dcbadge.vercel.app/api/server/CBgdrGnZjy?style=flat&theme=discord-inverted)](https://discord.gg/CBgdrGnZjy)\n[![DockerHub](https://img.shields.io/docker/pulls/ludwigai/ludwig.svg)](https://hub.docker.com/r/ludwigai)\n[![Downloads](https://pepy.tech/badge/ludwig)](https://pepy.tech/project/ludwig)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/ludwig-ai/ludwig/blob/master/LICENSE)\n[![X](https://img.shields.io/twitter/follow/ludwig_ai.svg?style=social&logo=twitter)](https://twitter.com/ludwig_ai)\n\n</div>\n\n> \\[!IMPORTANT\\]\n> Our community has moved to [Discord](https://discord.gg/CBgdrGnZjy) -- please join us there!\n\n# 📖 What is Ludwig?\n\nLudwig is a **low-code** framework for building **custom** AI models like **LLMs** and other deep neural networks.\n\nKey features:\n\n- 🛠 **Build custom models with ease:** a declarative YAML configuration file is all you need to train a state-of-the-art LLM on your data. Support for multi-task and multi-modality learning. Comprehensive config validation detects invalid parameter combinations and prevents runtime failures.\n- ⚡ **Optimized for scale and efficiency:** automatic batch size selection, distributed training ([DDP](https://pytorch.org/tutorials/beginner/ddp_series_theory.html), [DeepSpeed](https://github.com/microsoft/DeepSpeed)), parameter efficient fine-tuning ([PEFT](https://github.com/huggingface/peft)), 4-bit quantization (QLoRA), paged and 8-bit optimizers, and larger-than-memory datasets.\n- 📐 **Expert level control:** retain full control of your models down to the activation functions. Support for hyperparameter optimization, explainability, and rich metric visualizations.\n- 🧱 **Modular and extensible:** experiment with different model architectures, tasks, features, and modalities with just a few parameter changes in the config. Think building blocks for deep learning.\n- 🚢 **Engineered for production:** prebuilt [Docker](https://hub.docker.com/u/ludwigai) containers, native support for running with [Ray](https://www.ray.io/) on [Kubernetes](https://github.com/ray-project/kuberay), export models to [Torchscript](https://pytorch.org/docs/stable/jit.html) and [Triton](https://developer.nvidia.com/triton-inference-server), upload to [HuggingFace](https://huggingface.co/models) with one command.\n\nLudwig is hosted by the\n[Linux Foundation AI & Data](https://lfaidata.foundation/).\n\n![img](https://raw.githubusercontent.com/ludwig-ai/ludwig-docs/master/docs/images/ludwig_legos_unanimated.gif)\n\n# 💾 Installation\n\nInstall from PyPi. Be aware that Ludwig requires Python 3.8+.\n\n```shell\npip install ludwig\n```\n\nOr install with all optional dependencies:\n\n```shell\npip install ludwig[full]\n```\n\nPlease see [contributing](https://github.com/ludwig-ai/ludwig/blob/master/CONTRIBUTING.md) for more detailed installation instructions.\n\n# 🚂 Getting Started\n\nWant to take a quick peek at some of the Ludwig 0.8 features? Check out this Colab Notebook 🚀 [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1lB4ALmEyvcMycE3Mlnsd7I3bc0zxvk39)\n\nLooking to fine-tune Llama-2 or Mistral? Check out these notebooks:\n\n1. Fine-Tune Llama-2-7b: [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1r4oSEwRJpYKBPM0M0RSh0pBEYK_gBKbe)\n1. Fine-Tune Llama-2-13b: [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1zmSEzqZ7v4twBrXagj1TE_C--RNyVAyu)\n1. Fine-Tune Mistral-7b: [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1i_8A1n__b7ljRWHzIsAdhO7u7r49vUm4)\n\nFor a full tutorial, check out the official [getting started guide](https://ludwig-ai.github.io/ludwig-docs/latest/getting_started/), or take a look at end-to-end [Examples](https://ludwig-ai.github.io/ludwig-docs/latest/examples).\n\n## Large Language Model Fine-Tuning\n\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1c3AO8l_H6V_x37RwQ8V7M6A-RmcBf2tG?usp=sharing)\n\nLet's fine-tune a pretrained LLaMA-2-7b large language model to follow instructions like a chatbot (\"instruction tuning\").\n\n### Prerequisites\n\n- [HuggingFace API Token](https://huggingface.co/docs/hub/security-tokens)\n- Access approval to [Llama2-7b-hf](https://huggingface.co/meta-llama/Llama-2-7b-hf)\n- GPU with at least 12 GiB of VRAM (in our tests, we used an Nvidia T4)\n\n### Running\n\nWe'll use the [Stanford Alpaca](https://crfm.stanford.edu/2023/03/13/alpaca.html) dataset, which will be formatted as a table-like file that looks like this:\n\n|                    instruction                    |      input       |                      output                       |\n| :-----------------------------------------------: | :--------------: | :-----------------------------------------------: |\n|       Give three tips for staying healthy.        |                  | 1.Eat a balanced diet and make sure to include... |\n| Arrange the items given below in the order to ... | cake, me, eating |                  I eating cake.                   |\n| Write an introductory paragraph about a famous... |  Michelle Obama  | Michelle Obama is an inspirational woman who r... |\n|                        ...                        |       ...        |                        ...                        |\n\nCreate a YAML config file named `model.yaml` with the following:\n\n```yaml\nmodel_type: llm\nbase_model: meta-llama/Llama-2-7b-hf\n\nquantization:\n  bits: 4\n\nadapter:\n  type: lora\n\nprompt:\n  template: |\n    Below is an instruction that describes a task, paired with an input that may provide further context.\n    Write a response that appropriately completes the request.\n\n    ### Instruction:\n    {instruction}\n\n    ### Input:\n    {input}\n\n    ### Response:\n\ninput_features:\n  - name: prompt\n    type: text\n\noutput_features:\n  - name: output\n    type: text\n\ntrainer:\n  type: finetune\n  learning_rate: 0.0001\n  batch_size: 1\n  gradient_accumulation_steps: 16\n  epochs: 3\n  learning_rate_scheduler:\n    decay: cosine\n    warmup_fraction: 0.01\n\npreprocessing:\n  sample_ratio: 0.1\n\nbackend:\n  type: local\n```\n\nAnd now let's train the model:\n\n```bash\nexport HUGGING_FACE_HUB_TOKEN = \"<api_token>\"\n\nludwig train --config model.yaml --dataset \"ludwig://alpaca\"\n```\n\n## Supervised ML\n\nLet's build a neural network that predicts whether a given movie critic's review on [Rotten Tomatoes](https://www.kaggle.com/stefanoleone992/rotten-tomatoes-movies-and-critic-reviews-dataset) was positive or negative.\n\nOur dataset will be a CSV file that looks like this:\n\n|     movie_title      | content_rating |              genres              | runtime | top_critic | review_content                                                                                                                                                                                                   | recommended |\n| :------------------: | :------------: | :------------------------------: | :-----: | ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------- |\n| Deliver Us from Evil |       R        |    Action & Adventure, Horror    |  117.0  | TRUE       | Director Scott Derrickson and his co-writer, Paul Harris Boardman, deliver a routine procedural with unremarkable frights.                                                                                       | 0           |\n|       Barbara        |     PG-13      | Art House & International, Drama |  105.0  | FALSE      | Somehow, in this stirring narrative, Barbara manages to keep hold of her principles, and her humanity and courage, and battles to save a dissident teenage girl whose life the Communists are trying to destroy. | 1           |\n|   Horrible Bosses    |       R        |              Comedy              |  98.0   | FALSE      | These bosses cannot justify either murder or lasting comic memories, fatally compromising a farce that could have been great but ends up merely mediocre.                                                        | 0           |\n|         ...          |      ...       |               ...                |   ...   | ...        | ...                                                                                                                                                                                                              | ...         |\n\nDownload a sample of the dataset from [here](https://ludwig.ai/latest/data/rotten_tomatoes.csv).\n\n```bash\nwget https://ludwig.ai/latest/data/rotten_tomatoes.csv\n```\n\nNext create a YAML config file named `model.yaml` with the following:\n\n```yaml\ninput_features:\n  - name: genres\n    type: set\n    preprocessing:\n      tokenizer: comma\n  - name: content_rating\n    type: category\n  - name: top_critic\n    type: binary\n  - name: runtime\n    type: number\n  - name: review_content\n    type: text\n    encoder:\n      type: embed\noutput_features:\n  - name: recommended\n    type: binary\n```\n\nThat's it! Now let's train the model:\n\n```bash\nludwig train --config model.yaml --dataset rotten_tomatoes.csv\n```\n\n**Happy modeling**\n\nTry applying Ludwig to your data. [Reach out on Discord](https://discord.gg/CBgdrGnZjy)\nif you have any questions.\n\n# ❓ Why you should use Ludwig\n\n- **Minimal machine learning boilerplate**\n\n  Ludwig takes care of the engineering complexity of machine learning out of\n  the box, enabling research scientists to focus on building models at the\n  highest level of abstraction. Data preprocessing, hyperparameter\n  optimization, device management, and distributed training for\n  `torch.nn.Module` models come completely free.\n\n- **Easily build your benchmarks**\n\n  Creating a state-of-the-art baseline and comparing it with a new model is a\n  simple config change.\n\n- **Easily apply new architectures to multiple problems and datasets**\n\n  Apply new models across the extensive set of tasks and datasets that Ludwig\n  supports. Ludwig includes a\n  [full benchmarking toolkit](https://arxiv.org/abs/2111.04260) accessible to\n  any user, for running experiments with multiple models across multiple\n  datasets with just a simple configuration.\n\n- **Highly configurable data preprocessing, modeling, and metrics**\n\n  Any and all aspects of the model architecture, training loop, hyperparameter\n  search, and backend infrastructure can be modified as additional fields in\n  the declarative configuration to customize the pipeline to meet your\n  requirements. For details on what can be configured, check out\n  [Ludwig Configuration](https://ludwig-ai.github.io/ludwig-docs/latest/configuration/)\n  docs.\n\n- **Multi-modal, multi-task learning out-of-the-box**\n\n  Mix and match tabular data, text, images, and even audio into complex model\n  configurations without writing code.\n\n- **Rich model exporting and tracking**\n\n  Automatically track all trials and metrics with tools like Tensorboard,\n  Comet ML, Weights & Biases, MLFlow, and Aim Stack.\n\n- **Automatically scale training to multi-GPU, multi-node clusters**\n\n  Go from training on your local machine to the cloud without code changes.\n\n- **Low-code interface for state-of-the-art models, including pre-trained Huggingface Transformers**\n\n  Ludwig also natively integrates with pre-trained models, such as the ones\n  available in [Huggingface Transformers](https://huggingface.co/docs/transformers/index).\n  Users can choose from a vast collection of state-of-the-art pre-trained\n  PyTorch models to use without needing to write any code at all. For example,\n  training a BERT-based sentiment analysis model with Ludwig is as simple as:\n\n  ```shell\n  ludwig train --dataset sst5 --config_str \"{input_features: [{name: sentence, type: text, encoder: bert}], output_features: [{name: label, type: category}]}\"\n  ```\n\n- **Low-code interface for AutoML**\n\n  [Ludwig AutoML](https://ludwig-ai.github.io/ludwig-docs/latest/user_guide/automl/)\n  allows users to obtain trained models by providing just a dataset, the\n  target column, and a time budget.\n\n  ```python\n  auto_train_results = ludwig.automl.auto_train(dataset=my_dataset_df, target=target_column_name, time_limit_s=7200)\n  ```\n\n- **Easy productionisation**\n\n  Ludwig makes it easy to serve deep learning models, including on GPUs.\n  Launch a REST API for your trained Ludwig model.\n\n  ```shell\n  ludwig serve --model_path=/path/to/model\n  ```\n\n  Ludwig supports exporting models to efficient Torchscript bundles.\n\n  ```shell\n  ludwig export_torchscript -–model_path=/path/to/model\n  ```\n\n# 📚 Tutorials\n\n- [Text Classification](https://ludwig-ai.github.io/ludwig-docs/latest/examples/text_classification)\n- [Tabular Data Classification](https://ludwig-ai.github.io/ludwig-docs/latest/examples/adult_census_income)\n- [Image Classification](https://ludwig-ai.github.io/ludwig-docs/latest/examples/mnist)\n- [Multimodal Classification](https://ludwig-ai.github.io/ludwig-docs/latest/examples/multimodal_classification)\n\n# 🔬 Example Use Cases\n\n- [Named Entity Recognition Tagging](https://ludwig-ai.github.io/ludwig-docs/latest/examples/ner_tagging)\n- [Natural Language Understanding](https://ludwig-ai.github.io/ludwig-docs/latest/examples/nlu)\n- [Machine Translation](https://ludwig-ai.github.io/ludwig-docs/latest/examples/machine_translation)\n- [Chit-Chat Dialogue Modeling through seq2seq](https://ludwig-ai.github.io/ludwig-docs/latest/examples/seq2seq)\n- [Sentiment Analysis](https://ludwig-ai.github.io/ludwig-docs/latest/examples/sentiment_analysis)\n- [One-shot Learning with Siamese Networks](https://ludwig-ai.github.io/ludwig-docs/latest/examples/oneshot)\n- [Visual Question Answering](https://ludwig-ai.github.io/ludwig-docs/latest/examples/visual_qa)\n- [Spoken Digit Speech Recognition](https://ludwig-ai.github.io/ludwig-docs/latest/examples/speech_recognition)\n- [Speaker Verification](https://ludwig-ai.github.io/ludwig-docs/latest/examples/speaker_verification)\n- [Binary Classification (Titanic)](https://ludwig-ai.github.io/ludwig-docs/latest/examples/titanic)\n- [Timeseries forecasting](https://ludwig-ai.github.io/ludwig-docs/latest/examples/forecasting)\n- [Timeseries forecasting (Weather)](https://ludwig-ai.github.io/ludwig-docs/latest/examples/weather)\n- [Movie rating prediction](https://ludwig-ai.github.io/ludwig-docs/latest/examples/movie_ratings)\n- [Multi-label classification](https://ludwig-ai.github.io/ludwig-docs/latest/examples/multi_label)\n- [Multi-Task Learning](https://ludwig-ai.github.io/ludwig-docs/latest/examples/multi_task)\n- [Simple Regression: Fuel Efficiency Prediction](https://ludwig-ai.github.io/ludwig-docs/latest/examples/fuel_efficiency)\n- [Fraud Detection](https://ludwig-ai.github.io/ludwig-docs/latest/examples/fraud)\n\n# 💡 More Information\n\nRead our publications on [Ludwig](https://arxiv.org/pdf/1909.07930.pdf), [declarative ML](https://arxiv.org/pdf/2107.08148.pdf), and [Ludwig’s SoTA benchmarks](https://openreview.net/pdf?id=hwjnu6qW7E4).\n\nLearn more about [how Ludwig works](https://ludwig-ai.github.io/ludwig-docs/latest/user_guide/how_ludwig_works/), [how to get started](https://ludwig-ai.github.io/ludwig-docs/latest/getting_started/), and work through more [examples](https://ludwig-ai.github.io/ludwig-docs/latest/examples).\n\nIf you are interested in [contributing](https://github.com/ludwig-ai/ludwig/blob/master/CONTRIBUTING.md), have questions, comments, or thoughts to share, or if you just want to be in the\nknow, please consider [joining our Community Discord](https://discord.gg/CBgdrGnZjy) and follow us on [X](https://twitter.com/ludwig_ai)!\n\n# 🤝 Join the community to build Ludwig with us\n\nLudwig is an actively managed open-source project that relies on contributions from folks just like\nyou. Consider joining the active group of Ludwig contributors to make Ludwig an even\nmore accessible and feature rich framework for everyone to use!\n\n<a href=\"https://github.com/ludwig-ai/ludwig/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=ludwig-ai/ludwig\" />\n</a><br/>\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ludwig-ai/ludwig&type=Date)](https://star-history.com/#ludwig-ai/ludwig&Date)\n\n# 👋 Getting Involved\n\n- [Discord](https://discord.gg/CBgdrGnZjy)\n- [X](https://twitter.com/ludwig_ai)\n- [Medium](https://medium.com/ludwig-ai)\n- [GitHub Issues](https://github.com/ludwig-ai/ludwig/issues)\n"
        },
        {
          "name": "README_KR.md",
          "type": "blob",
          "size": 15.08203125,
          "content": "![Ludwig logo](https://github.com/ludwig-ai/ludwig-docs/raw/master/docs/images/ludwig_hero.png \"Ludwig logo\")\n\n<div align=\"center\">\n\n[![PyPI version](https://badge.fury.io/py/ludwig.svg)](https://badge.fury.io/py/ludwig)\n[![Downloads](https://pepy.tech/badge/ludwig)](https://pepy.tech/project/ludwig)\n[![Build Status](https://github.com/ludwig-ai/ludwig/actions/workflows/pytest.yml/badge.svg)](https://github.com/ludwig-ai/ludwig/actions/workflows/pytest.yml)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/ludwig-ai/ludwig/blob/master/LICENSE)\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fuber%2Fludwig.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2Fuber%2Fludwig?ref=badge_shield)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/4210/badge)](https://bestpractices.coreinfrastructure.org/projects/4210)\n\n</div>\n\nLudwig은 사용자들이 코드를 작성할 필요 없이 딥러닝 모델을 학습시키고 사용할 수 있게 하는 TensorFlow 기반으로 만들어진 toolbox입니다.\n\n이 모델을 학습시키기 위해서는 입출력 데이터가 들어있는 파일이 제공되어야 합니다. 나머지는 Ludwig가 알아서 처리해 줄 것입니다. 간단한 명령어들은 단일 기기 혹은 분산 기기를 통해 모델을 학습하는 데에 사용될 수 있고, 또한 새로운 데이터를 예측하는 데에 사용됩니다.\n\n파이썬 프로그램 API 또한 Ludwig에서 사용 가능합니다. 시각화 기능의 모음은 모델 훈련을 분석하고 모델 성능을 test하고 그것들을 비교하는 것을 가능하게 해줍니다.\n\nLudwig는 확장성을 염두에 두고 설계되었으며, 데이터 타입 추상화에 기반을 두고 있어서 새로운 모델 아키텍처뿐만 아니라 새로운 데이터 타입에 대한 지원을 쉽게 추가할 수 있습니다.\n\nLudwig은 사용자들이 딥러닝 모델을 빠르게 학습하고 테스트하는 것은 물론, 연구자들이 딥러닝 모델과 비교할 수 있는 강력한 기준과 동일한 데이터 평가를 통해 비교 가능성을 보장하는 테스트 설정을 확보할 수 있도록 활용됩니다.\n\nLudwig는 특정 use case의 end-to-end 모델을 작성하기 위해 조합할 수 있는 일련의 모델 아키텍처를 제공합니다. 도시를 설계하는 것을 예로 들어, 딥러닝 라이브러리가 도시 내부 건물의 구성요소(기둥, 바닥, 등)를 제공하고 있다면, Ludwig는 도시를 구성하는 건물을 제공하고 있습니다. 그러면 사용자는 도시 내부의 만들어진 건물 중 하나를 선택해 사용하거나, 새로운 건물을 추가할 수 있습니다.\n\nToolbox에 반영된 핵심 설계 원리는 아래와 같습니다:\n\n- No coding required: 모델을 학습시키고 예측된 데이터를 얻는 데에 코딩 스킬이 필요하지 않습니다.\n- Generality: 딥러닝 모델 설계에 대한 새로운 데이터 유형 기반 접근 방식은 다양한 use case들에 적용할 수 있는 tool을 만들어줍니다.\n- Flexibility: 숙련된 사용자들은 모델 제작과 훈련을 광범위하게 제어하는 반면, 초보자들은 그것을 쉽게 사용할 수 있습니다.\n- Extensibility: 새로운 모델 아키텍처와 새로운 데이터 타입을 쉽게 추가할 수 있습니다.\n- Understandability: 종종 딥러닝 모델 내부는 진행 상황을 확인할 수 없는 것처럼 여겨지지만, Ludwig는 성능을 이해하고 예측된 데이터들을 비교하기 위한 표준 시각화 기능을 제공합니다.\n- Open Source: Apache License 2.0\n\n# Installation\n\nLudwig는 Python 3.6이상 버전을 요구합니다. 만약 Python 3가 설치되어 있지 않으면 다음 명령어를 이용해서 설치하세요.\n\n```\nsudo apt install python3  # on ubuntu\nbrew install python3      # on mac\n```\n\n만약 [파이썬 가상환경](https://docs.python-guide.org/dev/virtualenvs/)에서 사용하고 싶다면 아래 명령어를 사용하세요.\n\n```\nvirtualenv -p python3 venv\n```\n\nLudwig를 설치하려면 아래 명령어를 사용하세요.\n\n```\npip install ludwig\n```\n\n위의 명령어는 Ludwig을 실행하기 위해 필요한 파일만 설치하게 되며, 더 많은 기능이 필요하다면 아래와 같은 파일들을 설치하면 됩니다.\n\n- `ludwig[text]` for text dependencies.\n- `ludwig[audio]` for audio and speech dependencies.\n- `ludwig[image]` for image dependencies.\n- `ludwig[hyperopt]` for hyperparameter optimization dependencies.\n- `ludwig[horovod]` for distributed training dependencies.\n- `ludwig[serve]` for serving dependencies.\n- `ludwig[viz]` for visualization dependencies.\n- `ludwig[test]` for dependencies needed for testing.\n\n[Horovod](https://github.com/horovod/horovod)를 통해 분산 학습이 지원되며, `pip install ludwig[horovod]` 또는 `HOROVOD_GPU_OPERATIONS=NCCL pip install ludwig[horovod]` 와 같이 GPU 환경에서 설치가 가능합니다.\n설치 가능한 옵션들을 더 확인하고 싶으시다면 Horovod's [installation guide](https://horovod.readthedocs.io/en/stable/install_include.html) 를 참고하시기 바랍니다.\n\n추가하려는 package들은  `pip install ludwig[extra1,extra2,...]` 의 명령어를 통해 설치가 가능합니다. 예를 들어, `pip install ludwig[text,viz]` 와 같은 조합으로 설치가 가능합니다. 모든 파일들을 한 번에 설치하려면 `pip install ludwig[full]`을 사용하면 됩니다.\n\n소스코드를 repository에서 build하려는 개발자들은 아래와 같은 방법을 사용하면 됩니다.\n\n```\ngit clone git@github.com:ludwig-ai/ludwig.git\ncd ludwig\nvirtualenv -p python3 venv\nsource venv/bin/activate\npip install -e '.[test]'\n```\n\n**Note:** 만약 GPU 없이 실행 중이라면, 가벼운 용량의 CPU로 만 사용할 수 있는 TensorFlow를 사용하고 싶으실 겁니다. CPU로 만 사용할 수 있는 TensorFlow 버전을 사용하고 싶다면 `tensorflow`를 삭제하고 `ludwig`를 설치한 후 `tensorflow-cpu`로 대체하면 됩니다. `requirements.txt`에 명시되어 있는 대로 호환 가능한 범위 내의 버전을 설치해야만 합니다.\n\n## Basic Principles\n\nLudwig는 모델학습, 학습된 모델을 이용한 예측, 평가의 3가지 주요 기능을 제공합니다. 이것은 데이터 유형 추상화에 기반합니다. 그래서 같은 데이터를 이용해 사전, 사후 처리 과정을 데이터 유형을 공유하는 서로 다른 dataset으로 실행되고, 개발된 encoding 및 decoding 모델을 다른 여러 작업에서 재사용이 가능합니다.\n\nLudwig로 모델을 학습시키는 것은 굉장히 간단합니다. 단지 dataset file과 yaml file만 제공해 주면 됩니다.\n\nconfig파일에는, 입출력 값의 속성을 포함합니다. 당신이 해야 할 것은 dataset파일에서 열에 해당하는 데이터들의 이름만 정의해 주면 됩니다. 여기에 필요한 것은 모델에 대한 입력 데이터 유형, 그리고 모델이 예측하는 대상 변수인 출력 dataset파일에서의 열 이름입니다. Ludwig는 그에 따라 딥러닝 모델을 만들어 당신을 위해 학습할 것입니다.\n\n현재, Ludwig에서 사용 가능한 데이터 유형은 아래와 같습니다.\n\n- binary\n- number\n- category\n- set\n- bag\n- sequence\n- text\n- timeseries\n- image\n- audio\n- date\n- h3\n- vector\n\n서로 다른 입력과 출력의 데이터 유형을 사용하는 경우, 사용자들은 다양한 작업을 진행할 수 있습니다. 아래는 그 예시입니다.\n\n- text input + category output = text classifier\n- image input + category output = image classifier\n- image input + text output = image captioning\n- audio input + binary output = speaker verification\n- text input + sequence output = named entity recognition / summarization\n- category, number and binary inputs + number output = regression\n- timeseries input + number output = forecasting model\n- category, number and binary inputs + binary output = fraud detection\n\n[예시](https://ludwig-ai.github.io/ludwig-docs/latest/examples/)를 참고하여 Ludwig을 통해 어떤 작업을 실행하는지 확인하세요.\n\nConfig 파일은 인코더와 디코더가 사용할 각 열에 저장된 데이터를 사전 처리하는 방법, 최적화할 아키텍처 및 학습 매개변수, 하이퍼 파라미터 등의 추가 정보를 저장합니다. 이를 통해 초보자는 쉽게 사용할 수 있고, 전문가도 유연하게 사용할 수 있습니다.\n\n## Training\n\n예를 들어, 아래와 같이 분류된 dataset형식의 파일을 보면:\n\n| doc_text                             | class    |\n| ------------------------------------ | -------- |\n| Former president Barack Obama ...    | politics |\n| Juventus hired Cristiano Ronaldo ... | sport    |\n| LeBron James joins the Lakers ...    | sport    |\n| ...                                  | ...      |\n\n`doc_text`열의 내용을 입력으로 사용하여 `class`열의 값을 예측하는 모델을 학습시키려고 할 때 다음과 같은 config파일 구성을 사용할 수 있습니다:\n\n```yaml\n{input_features: [{name: doc_text, type: text}], output_features: [{name: class, type: category}]}\n```\n\n그리고 사용자의 콘솔 창에서 다음의 명령을 입력하여 학습을 시작합니다:\n\n```\nludwig train --dataset path/to/file.csv --config_str \"{input_features: [{name: doc_text, type: text}], output_features: [{name: class, type: category}]}\"\n```\n\n위의 명령어에서 `path/to/file.csv`부분은 위의 표(이외에 많은 데이터 타입이 지원됩니다)에서 UTF-8로 인코딩 되어 있는 dataset파일을 포함하는 경로입니다.\n\nLudwig은 다음과 같은 동작을 합니다:\n\n1. data의 무작위 분할을 실시합니다\n1. dataset을 사전 처리합니다.\n1. Softmax classifier를 통해 결과를 해석하는 ParallelCNN모델(text 기능의 기본값)을 구축합니다.\n1. 검증 세트의 성능이 더 이상 개선되지 않을 때까지 학습을 반복합니다.\n\n학습 과정이 콘솔창에서 보일 것이고 TensorBoard 또한 사용될 수 있습니다.\n\n만약 RNN encoder를 사용하거나 epoch의 숫자를 더 키워 학습시키는 것을 더 선호한다면 아래와 같은 형식의 config파일 형식을 사용하면 됩니다:\n\n```yaml\n{input_features: [{name: doc_text, type: text, encoder: rnn}], output_features: [{name: class, type: category}], training: {epochs: 50}}\n```\n\n사용자가 config파일에서 사용 가능한 명령어들을 확인하고 싶으시다면 [User Guide](https://ludwig-ai.github.io/ludwig-docs/latest/user_guide/)를 참고하고, [Examples](https://ludwig-ai.github.io/ludwig-docs/latest/examples/)을 통해 여러 가지 다른 작업에 Ludwig을 사용하는 방법을 확인하세요.\n\n학습 후, Ludwig는 학습된 모델과 hyperparameter, 학습 과정의 통계 요약이 포함된 `results`폴더를 생성할 것입니다.\n사용자들은 시각화 방법들 중 하나인 도구를 사용하여 시각화를 할 수 있습니다. 예를 들어:\n\n```\nludwig visualize --visualization learning_curves --training_statistics path/to/training_statistics.json\n```\n\n위의 명령어는 아래와 같이 그래프를 나타낼 것이고 학습 과정에 있어서의 손실과 정확도를 확인할 수 있습니다.\n\n![Learning Curves](https://github.com/ludwig-ai/ludwig-docs/raw/master/docs/images/getting_started_learning_curves.png \"Learning Curves\")\n\n시각화하는 더 다양한 방법을 알고 싶으시다면 [Visualizations](https://ludwig-ai.github.io/ludwig-docs/latest/user_guide/visualizations)에서 확인해 주시기 바랍니다.\n\n## Distributed Training\n\n사용자는 [Horovod](https://github.com/horovod/horovod)를 통해 사용자가 훈련시킨 모델을 배포할 수 있고 여러 GPU가 있는 단일 기계 및 여러 GPU가 있는 다중 기계를 통해 학습하는 것을 허용합니다. 더 자세한 정보를 알고 싶으시다면 [User Guide](https://ludwig-ai.github.io/ludwig-docs/latest/user_guide/distributed_training/)를 확인해 주시기 바랍니다.\n\n## Prediction and Evaluation\n\n이전에 학습시킨 모델로 새로운 data의 출력값을 예측하고 싶다면 콘솔 창에서 다음의 명령어를 입력하면 됩니다:\n\n```\nludwig predict --dataset path/to/data.csv --model_path /path/to/model\n```\n\n이 명령어를 실행하면 모델이 예측 값을 반환합니다.\n\ndataset에 출력의 진리 값이 포함된 경우 모델에서 얻은 예측 값과 비교하여 모델 성능을 평가할 수 있습니다.\n\n```\nludwig evaluate --dataset path/to/data.csv --model_path /path/to/model\n```\n\n위 명령어는 `visualize` tool에 의해 시각화되고 다른 모델들 간의 성능과 예측을 비교하는데 사용되는 평가 성능 통계를 만들어 냅니다. 예를 들어:\n\n```\nludwig visualize --visualization compare_performance --test_statistics path/to/test_statistics_model_1.json path/to/test_statistics_model_2.json\n```\n\n여러 측정 기준에 대한 모델들을 비교하는 막대그래프를 반환합니다:\n\n![Performance Comparison](https://github.com/ludwig-ai/ludwig-docs/raw/master/docs/images/compare_performance.png \"Performance Comparison\")\n\n학습과 예측을 교대로 수행하는 간단한 `ludwig experiment`명령어 또한 사용 가능합니다.\n\n## Programmatic API\n\nLudwig는 사용자가 모델을 학습시키거나 불러오게 해주고 새로운 데이터에 대한 예측 값을 얻는 데에 사용하는 간단한 프로그램 API를 제공합니다:\n\n```python\nfrom ludwig.api import LudwigModel\n\n# train a model\nconfig = {...}\nmodel = LudwigModel(config)\ntrain_stats = model.train(training_data)\n\n# or load a model\nmodel = LudwigModel.load(model_path)\n\n# obtain predictions\npredictions = model.predict(test_data)\n```\n\nYAML 파일에 대한 같은 정보를 포함하고 있는 `config`는 CLI(Command Line Interface)에 제공됩니다. 더 자세한 정보는 [Configuration](https://ludwig-ai.github.io/ludwig-docs/latest/configuration/)과 [API documentation](https://ludwig-ai.github.io/ludwig-docs/latest/user_guide/api/LudwigModel/)에서 제공됩니다.\n\n## Extensibility\n\nLudwig는 처음부터 확장성을 염두에 두고 제작되었습니다.\n데이터를 사전 처리, 부호화 및 복호화 기능을 포함한 추상 클래스의 데이터 유형별 구현을 추가하면 현재 지원되지 않는 데이터형을 쉽게 추가할 수 있습니다.\n\n나아가 자체적인 특정 hyperparameters가 있는 새로운 모델들은 (데이터 타입에 따라, 특정 등급의) tensor들을 입력으로 받아들이고 tensor들을 출력으로 제공하는 클래스를 구현함으로써 쉽게 추가할 수 있습니다.\n이것은 모델의 재사용과 커뮤니티와의 공유를 장려합니다.\n자세한 내용은 [Developer Guide](https://ludwig-ai.github.io/ludwig-docs/latest/developer_guide/)를 참조하십시오.\n\n## Full documentation\n\n전체 문서는 [여기](https://ludwig-ai.github.io/ludwig-docs)에서 확인할 수 있습니다.\n\n## License\n\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fuber%2Fludwig.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2Fuber%2Fludwig?ref=badge_large)\n"
        },
        {
          "name": "RELEASES.md",
          "type": "blob",
          "size": 0.7294921875,
          "content": "# Releasing\n\n## Release procedure\n\n1. Update version number in `ludwig/globals.py`\n1. Update version number in `setup.py`\n1. Commit\n1. Tag the commit with the version number `vX.Y.Z` with a meaningful message\n1. Push with `--tags`\n1. If a non-patch release, edit the release notes\n1. Create a release for Pypi: `python setup.py sdist`\n1. Release on Pypi: `twine upaload --repository pypi dist/ludwig-X.Y.Z.tar.gz`\n\n## Release policy\n\nLudwig follows [Semantic Versioning](https://semver.org).\nIn general, for major and minor releases, maintainers should all agree on the release.\nFor patches, in particular time sensitive ones, a single maintainer can release without a full consensus, but this practice should be reserved for critical situations.\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "ludwig",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.1611328125,
          "content": "[tool.isort]\nprofile = \"black\"\nline_length = 120\nforce_sort_within_sections = \"False\"\norder_by_type = \"False\"\n\n\n[tool.black]\nline-length = 120\nexclude = \"./python/\"\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.87890625,
          "content": "[pytest]\nmarkers =\n    benchmark: mark a test as a benchmarking test.\n    distributed: mark a test as a distributed test.\n    filesystem: mark to test operating system systems.\n    slow: mark test as slow.\n    combinatorial: mark a test as combinatorial.\n    horovod: mark a test as a Horovod test.\n    llm: mark a test as an LLM test.\n    integration_tests_a: mark a test to be run as part of integration tests, group A.\n    integration_tests_b: mark a test to be run as part of integration tests, group B.\n    integration_tests_c: mark a test to be run as part of integration tests, group C.\n    integration_tests_d: mark a test to be run as part of integration tests, group D.\n    integration_tests_e: mark a test to be run as part of integration tests, group E.\n    integration_tests_f: mark a test to be run as part of integration tests, group F.\nfilterwarnings =\n    ignore::DeprecationWarning\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 1.3837890625,
          "content": "Cython>=0.25\nh5py>=2.6,!=3.0.0\nnumpy>=1.15\n# GitHub Issue for Pinning Pandas < 2.2.0: https://github.com/ludwig-ai/ludwig/issues/3907\npandas>=1.0,!=1.1.5,<2.2.0\nscipy>=0.18\ntabulate>=0.7\nscikit-learn\ntqdm\ntorch>=2.0.0\ntorchaudio\ntorchtext\ntorchvision\npydantic<2.0\ntransformers>=4.42.3\ntifffile\nimagecodecs\ntokenizers>=0.15\nspacy>=2.3\nPyYAML>=3.12,<6.0.1,!=5.4.* #Exlude PyYAML 5.4.* due to incompatibility with awscli\nabsl-py\nkaggle\nrequests\nfsspec[http]<=2023.10.0\ndataclasses-json\njsonschema>=4.5.0,<4.7\nmarshmallow\nmarshmallow-jsonschema\nmarshmallow-dataclass==8.5.4\ntensorboard\nnltk    # Required for rouge scores.\ntorchmetrics>=0.11.0\ntorchinfo\nfilelock\npsutil\nprotobuf\npy-cpuinfo==9.0.0\ngpustat\nrich~=12.4.4\npackaging\nretry\n\n# required for TransfoXLTokenizer when using transformer_xl\nsacremoses\nsentencepiece\n\n# requirements for daft\n# NOTE: daft needs to be <0.2 because of deprecation of fsspec argument in Daft\n# Pinned for consistency with ludwig-ray docker image.\ngetdaft==0.1.20\n\n# requirement for various paged and 8-bit optimizers\nbitsandbytes<0.41.0\n\n# new data format support\nxlwt                # excel\nxlrd>=2.0.1         # excel\nxlsxwriter>=1.4.3   # excel\nopenpyxl>=3.0.7     # excel\npyxlsb>=1.0.8       # excel\npyarrow<15.0.0      # parquet\nlxml                # html\nhtml5lib            # html\n\n# requirement for loading hugging face datasets\ndatasets\n\n# pin required for torch 2.1.0\nurllib3<2\n"
        },
        {
          "name": "requirements_benchmarking.txt",
          "type": "blob",
          "size": 0.0048828125,
          "content": "s3fs\n"
        },
        {
          "name": "requirements_distributed.txt",
          "type": "blob",
          "size": 0.322265625,
          "content": "# requirements for dask\ndask[dataframe]<2023.4.0\npyarrow\n\n# requirements for ray\nray[default,data,serve,tune]==2.3.1\ntensorboardX<2.3\nGPUtil\ntblib\nawscli\n\n# https://github.com/microsoft/DeepSpeed/issues/4473\n# https://github.com/ludwig-ai/ludwig/issues/3905\ndeepspeed!=0.11.0,<0.13.0\n\n# requirements for daft\ngetdaft[ray]==0.1.20\n"
        },
        {
          "name": "requirements_explain.txt",
          "type": "blob",
          "size": 0.0068359375,
          "content": "captum\n"
        },
        {
          "name": "requirements_extra.txt",
          "type": "blob",
          "size": 0.138671875,
          "content": "# requirements for horovod\nhorovod[pytorch]>=0.24.0,!=0.26.0\n\n# alternative to Dask\nmodin[ray]\n\n# Allows users to upload\npredibase>=2023.10.2\n"
        },
        {
          "name": "requirements_hyperopt.txt",
          "type": "blob",
          "size": 0.1142578125,
          "content": "ray[default,tune]>=2.0.0\n\n# required for Ray Tune Search Algorithm support for AutoML\n#search_alg: hyperopt\nhyperopt\n"
        },
        {
          "name": "requirements_llm.txt",
          "type": "blob",
          "size": 0.064453125,
          "content": "sentence-transformers\nfaiss-cpu\n\naccelerate\nloralib\n\npeft>=0.10.0\n"
        },
        {
          "name": "requirements_serve.txt",
          "type": "blob",
          "size": 0.1298828125,
          "content": "uvicorn\nhttpx\nfastapi\npython-multipart\nneuropod==0.3.0rc6 ; platform_system != \"Windows\" and python_version < '3.9'\ncartonml-nightly\n"
        },
        {
          "name": "requirements_test.txt",
          "type": "blob",
          "size": 0.736328125,
          "content": "pytest\npytest-timeout\ntifffile\nwget\nsix>=1.13.0\naim\nwandb<0.12.11\ncomet_ml\nmlflow\n\n# For testing optional Ray Tune Search Algorithms\n# search_alg: bohb\nhpbandster\nConfigSpace==0.7.1\n\n# search_alg: ax\nax-platform\n\n# Pinning because aimstack does not support 2.x.x - https://github.com/aimhubio/aim/issues/2514\nsqlalchemy<2\n\n# search_alg: bayesopt\nbayesian-optimization\n\n# search_alg: cfo and blendsearch\nflaml[blendsearch]\n\n# Disabling due to numpy installation failure https://github.com/ludwig-ai/ludwig/actions/runs/4737879639/jobs/8411146481\n# search_alg: dragonfly\n# dragonfly-opt\n\n# search_alg: hebo\nHEBO\n\n# search_alg: nevergrad\nnevergrad\n\n# search_alg: optuna\noptuna\n\n# search_alg: skopt\nscikit-optimize\n\n# search_alg: zoopt\nzoopt\n\ns3fs>=2022.8.2\n"
        },
        {
          "name": "requirements_tree.txt",
          "type": "blob",
          "size": 0.04296875,
          "content": "hummingbird-ml>=0.4.8\nlightgbm\nlightgbm-ray\n"
        },
        {
          "name": "requirements_viz.txt",
          "type": "blob",
          "size": 0.1259765625,
          "content": "matplotlib>3.4,<3.9.0; python_version > '3.6'\nmatplotlib>=3.0,<3.4; python_version <= '3.6'\nseaborn>=0.7,<0.12\nhiplot\nptitprince\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.8251953125,
          "content": "[flake8]\nmax-line-length = 120\nexclude =\n    .tox,\n    *.egg,\n    *_pb2.py,\n    build,\n    temp\n\nselect = E,W,F\ndoctests = True\nverbose = 2\n# https://pep8.readthedocs.io/en/latest/intro.html#error-codes\nformat = pylint\nignore =\n    # Ignore \"Do not assign a lambda expression, use a def\"\n    E731\n    # Ignore \"Line break occurred before a binary operator\"\n    W503\n    # Ignore \"whitespace before ':'\"\n    E203\n    # Ignore \"missing whitespace after ':'\"\n    E231\n    # Ignore \"multiple spaces after ':'\"\n    E241\n    # Ignore \"multiple spaces before operator\"\n    E221\n    # Ignore \"whitespace around operator\"\n    E225\n    # Ignore \"whitespace around arithmetic operator\"\n    E226\n    # Ignore \"multiple spaces after ':'\"\n    E241\n    # Ignore \"multiple spaces after keyword\"\n    E271\n    # Ignore \"missing whitespace after keyword\"\n    E275\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.9755859375,
          "content": "\"\"\"Ludwig: Data-centric declarative deep learning framework.\"\"\"\nfrom codecs import open\nfrom os import path\n\nfrom setuptools import find_packages, setup\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the README.md file\nwith open(path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\n    long_description = f.read()\n\nwith open(path.join(here, \"requirements.txt\"), encoding=\"utf-8\") as f:\n    requirements = [line.strip() for line in f if line]\n\nextra_requirements = {}\n\nwith open(path.join(here, \"requirements_serve.txt\"), encoding=\"utf-8\") as f:\n    extra_requirements[\"serve\"] = [line.strip() for line in f if line]\n\nwith open(path.join(here, \"requirements_viz.txt\"), encoding=\"utf-8\") as f:\n    extra_requirements[\"viz\"] = [line.strip() for line in f if line]\n\nwith open(path.join(here, \"requirements_distributed.txt\"), encoding=\"utf-8\") as f:\n    extra_requirements[\"distributed\"] = [line.strip() for line in f if line]\n\nwith open(path.join(here, \"requirements_hyperopt.txt\"), encoding=\"utf-8\") as f:\n    extra_requirements[\"hyperopt\"] = [line.strip() for line in f if line]\n\nwith open(path.join(here, \"requirements_tree.txt\"), encoding=\"utf-8\") as f:\n    extra_requirements[\"tree\"] = [line.strip() for line in f if line]\n\nwith open(path.join(here, \"requirements_llm.txt\"), encoding=\"utf-8\") as f:\n    extra_requirements[\"llm\"] = [line.strip() for line in f if line]\n\nwith open(path.join(here, \"requirements_explain.txt\"), encoding=\"utf-8\") as f:\n    extra_requirements[\"explain\"] = [line.strip() for line in f if line]\n\nwith open(path.join(here, \"requirements_benchmarking.txt\"), encoding=\"utf-8\") as f:\n    extra_requirements[\"benchmarking\"] = [line.strip() for line in f if line]\n\nextra_requirements[\"full\"] = [item for sublist in extra_requirements.values() for item in sublist]\n\nwith open(path.join(here, \"requirements_test.txt\"), encoding=\"utf-8\") as f:\n    extra_requirements[\"test\"] = extra_requirements[\"full\"] + [line.strip() for line in f if line]\n\nwith open(path.join(here, \"requirements_extra.txt\"), encoding=\"utf-8\") as f:\n    extra_requirements[\"extra\"] = [line.strip() for line in f if line]\n\nsetup(\n    name=\"ludwig\",\n    version=\"0.10.4.dev\",\n    description=\"Declarative machine learning: End-to-end machine learning pipelines using data-driven configurations.\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/ludwig-ai/ludwig\",\n    download_url=\"https://pypi.org/project/ludwig/\",\n    author=\"Piero Molino\",\n    author_email=\"piero.molino@gmail.com\",\n    license=\"Apache 2.0\",\n    keywords=\"ludwig deep learning deep_learning machine machine_learning natural language processing computer vision\",\n    packages=find_packages(exclude=[\"contrib\", \"docs\", \"tests\"]),\n    python_requires=\">=3.8\",\n    include_package_data=True,\n    package_data={\"ludwig\": [\"etc/*\", \"examples/*.py\"]},\n    install_requires=requirements,\n    extras_require=extra_requirements,\n    entry_points={\"console_scripts\": [\"ludwig=ludwig.cli:main\"]},\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}