{
  "metadata": {
    "timestamp": 1736561235265,
    "page": 220,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "psf/requests-html",
      "stars": 13764,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0771484375,
          "content": "docs/source/_templates/*.html linguist-vendored\ntests/*.html linguist-vendored\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.228515625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n*.DS_Store\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n.static_storage/\n.media/\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n# Visual Studio Code \n.vscode"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.4541015625,
          "content": "language: python\npython:\n  - \"3.6\"\n  - \"3.7\"\n  - \"3.8\"\n  - \"3.9-dev\"\n\nmatrix:\n  allow_failures:\n    - python: \"3.9-dev\"\n\n# command to install dependencies\ninstall:\n  - \"pip install pipenv --upgrade-strategy=only-if-needed\"\n  - \"pipenv install --dev\"\n\n# command to run the dependencies\nscript:\n  - \"pipenv run tests\"\n\n# command to run tests\n# jobs:\n  # include:\n    # - stage: \"✨ Flake8 Nit–Picking ✨\"\n      # python: \"3.6\"\n      # script: \"pipenv run flake8\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05078125,
          "content": "The MIT License (MIT)\n\nCopyright 2018 Kenneth Reitz\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.1435546875,
          "content": "documentation:\n\tcd docs && make html\n\tcd docs/build/html && git add -A && git commit -m 'updates'\n\tcd docs/build/html && git push origin gh-pages\n\n"
        },
        {
          "name": "Pipfile",
          "type": "blob",
          "size": 0.412109375,
          "content": "[[source]]\nurl = \"https://pypi.python.org/simple\"\nverify_ssl = true\nname = \"pypi\"\n\n[packages]\nrequests = \"*\"\npyquery = \"*\"\nfake-useragent = \"*\"\nparse = \"*\"\n\"bs4\" = \"*\"\n\"w3lib\" = \"*\"\npyppeteer = \"*\"\n\"rfc3986\" = \"*\"\n\n[dev-packages]\ntwine = \"*\"\nrequests-file = \"*\"\npytest = \"*\"\ne1839a8 = {path = \".\",editable = true}\nsphinx = \"*\"\nmypy = \"*\"\npytest-asyncio = \"*\"\nwhite = \"*\"\n\n[scripts]\ntests = \"pytest -v -m 'not internet' \"\n\n"
        },
        {
          "name": "Pipfile.lock",
          "type": "blob",
          "size": 83.6904296875,
          "content": "{\n    \"_meta\": {\n        \"hash\": {\n            \"sha256\": \"eea1092263f9038525de6a5104b5479f30deb6956b6c521b39f5d7e9f79968e3\"\n        },\n        \"pipfile-spec\": 6,\n        \"requires\": {},\n        \"sources\": [\n            {\n                \"name\": \"pypi\",\n                \"url\": \"https://pypi.python.org/simple\",\n                \"verify_ssl\": true\n            }\n        ]\n    },\n    \"default\": {\n        \"appdirs\": {\n            \"hashes\": [\n                \"sha256:7d5d0167b2b1ba821647616af46a749d1c653740dd0d2415100fe26e27afdf41\",\n                \"sha256:a841dacd6b99318a741b166adb07e19ee71a274450e68237b4650ca1055ab128\"\n            ],\n            \"version\": \"==1.4.4\"\n        },\n        \"beautifulsoup4\": {\n            \"hashes\": [\n                \"sha256:0e79446b10b3ecb499c1556f7e228a53e64a2bfcebd455f370d8927cb5b59e39\",\n                \"sha256:bc4bdda6717de5a2987436fb8d72f45dc90dd856bdfd512a1314ce90349a0106\"\n            ],\n            \"markers\": \"python_full_version >= '3.6.0'\",\n            \"version\": \"==4.11.2\"\n        },\n        \"bs4\": {\n            \"hashes\": [\n                \"sha256:36ecea1fd7cc5c0c6e4a1ff075df26d50da647b75376626cc186e2212886dd3a\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==0.0.1\"\n        },\n        \"certifi\": {\n            \"hashes\": [\n                \"sha256:35824b4c3a97115964b408844d64aa14db1cc518f6562e8d7261699d1350a9e3\",\n                \"sha256:4ad3232f5e926d6718ec31cfc1fcadfde020920e278684144551c91769c7bc18\"\n            ],\n            \"markers\": \"python_version >= '3.6'\",\n            \"version\": \"==2022.12.7\"\n        },\n        \"charset-normalizer\": {\n            \"hashes\": [\n                \"sha256:00d3ffdaafe92a5dc603cb9bd5111aaa36dfa187c8285c543be562e61b755f6b\",\n                \"sha256:024e606be3ed92216e2b6952ed859d86b4cfa52cd5bc5f050e7dc28f9b43ec42\",\n                \"sha256:0298eafff88c99982a4cf66ba2efa1128e4ddaca0b05eec4c456bbc7db691d8d\",\n                \"sha256:02a51034802cbf38db3f89c66fb5d2ec57e6fe7ef2f4a44d070a593c3688667b\",\n                \"sha256:083c8d17153ecb403e5e1eb76a7ef4babfc2c48d58899c98fcaa04833e7a2f9a\",\n                \"sha256:0a11e971ed097d24c534c037d298ad32c6ce81a45736d31e0ff0ad37ab437d59\",\n                \"sha256:0bf2dae5291758b6f84cf923bfaa285632816007db0330002fa1de38bfcb7154\",\n                \"sha256:0c0a590235ccd933d9892c627dec5bc7511ce6ad6c1011fdf5b11363022746c1\",\n                \"sha256:0f438ae3532723fb6ead77e7c604be7c8374094ef4ee2c5e03a3a17f1fca256c\",\n                \"sha256:109487860ef6a328f3eec66f2bf78b0b72400280d8f8ea05f69c51644ba6521a\",\n                \"sha256:11b53acf2411c3b09e6af37e4b9005cba376c872503c8f28218c7243582df45d\",\n                \"sha256:12db3b2c533c23ab812c2b25934f60383361f8a376ae272665f8e48b88e8e1c6\",\n                \"sha256:14e76c0f23218b8f46c4d87018ca2e441535aed3632ca134b10239dfb6dadd6b\",\n                \"sha256:16a8663d6e281208d78806dbe14ee9903715361cf81f6d4309944e4d1e59ac5b\",\n                \"sha256:292d5e8ba896bbfd6334b096e34bffb56161c81408d6d036a7dfa6929cff8783\",\n                \"sha256:2c03cc56021a4bd59be889c2b9257dae13bf55041a3372d3295416f86b295fb5\",\n                \"sha256:2e396d70bc4ef5325b72b593a72c8979999aa52fb8bcf03f701c1b03e1166918\",\n                \"sha256:2edb64ee7bf1ed524a1da60cdcd2e1f6e2b4f66ef7c077680739f1641f62f555\",\n                \"sha256:31a9ddf4718d10ae04d9b18801bd776693487cbb57d74cc3458a7673f6f34639\",\n                \"sha256:356541bf4381fa35856dafa6a965916e54bed415ad8a24ee6de6e37deccf2786\",\n                \"sha256:358a7c4cb8ba9b46c453b1dd8d9e431452d5249072e4f56cfda3149f6ab1405e\",\n                \"sha256:37f8febc8ec50c14f3ec9637505f28e58d4f66752207ea177c1d67df25da5aed\",\n                \"sha256:39049da0ffb96c8cbb65cbf5c5f3ca3168990adf3551bd1dee10c48fce8ae820\",\n                \"sha256:39cf9ed17fe3b1bc81f33c9ceb6ce67683ee7526e65fde1447c772afc54a1bb8\",\n                \"sha256:3ae1de54a77dc0d6d5fcf623290af4266412a7c4be0b1ff7444394f03f5c54e3\",\n                \"sha256:3b590df687e3c5ee0deef9fc8c547d81986d9a1b56073d82de008744452d6541\",\n                \"sha256:3e45867f1f2ab0711d60c6c71746ac53537f1684baa699f4f668d4c6f6ce8e14\",\n                \"sha256:3fc1c4a2ffd64890aebdb3f97e1278b0cc72579a08ca4de8cd2c04799a3a22be\",\n                \"sha256:4457ea6774b5611f4bed5eaa5df55f70abde42364d498c5134b7ef4c6958e20e\",\n                \"sha256:44ba614de5361b3e5278e1241fda3dc1838deed864b50a10d7ce92983797fa76\",\n                \"sha256:4a8fcf28c05c1f6d7e177a9a46a1c52798bfe2ad80681d275b10dcf317deaf0b\",\n                \"sha256:4b0d02d7102dd0f997580b51edc4cebcf2ab6397a7edf89f1c73b586c614272c\",\n                \"sha256:502218f52498a36d6bf5ea77081844017bf7982cdbe521ad85e64cabee1b608b\",\n                \"sha256:503e65837c71b875ecdd733877d852adbc465bd82c768a067badd953bf1bc5a3\",\n                \"sha256:5995f0164fa7df59db4746112fec3f49c461dd6b31b841873443bdb077c13cfc\",\n                \"sha256:59e5686dd847347e55dffcc191a96622f016bc0ad89105e24c14e0d6305acbc6\",\n                \"sha256:601f36512f9e28f029d9481bdaf8e89e5148ac5d89cffd3b05cd533eeb423b59\",\n                \"sha256:608862a7bf6957f2333fc54ab4399e405baad0163dc9f8d99cb236816db169d4\",\n                \"sha256:62595ab75873d50d57323a91dd03e6966eb79c41fa834b7a1661ed043b2d404d\",\n                \"sha256:70990b9c51340e4044cfc394a81f614f3f90d41397104d226f21e66de668730d\",\n                \"sha256:71140351489970dfe5e60fc621ada3e0f41104a5eddaca47a7acb3c1b851d6d3\",\n                \"sha256:72966d1b297c741541ca8cf1223ff262a6febe52481af742036a0b296e35fa5a\",\n                \"sha256:74292fc76c905c0ef095fe11e188a32ebd03bc38f3f3e9bcb85e4e6db177b7ea\",\n                \"sha256:761e8904c07ad053d285670f36dd94e1b6ab7f16ce62b9805c475b7aa1cffde6\",\n                \"sha256:772b87914ff1152b92a197ef4ea40efe27a378606c39446ded52c8f80f79702e\",\n                \"sha256:79909e27e8e4fcc9db4addea88aa63f6423ebb171db091fb4373e3312cb6d603\",\n                \"sha256:7e189e2e1d3ed2f4aebabd2d5b0f931e883676e51c7624826e0a4e5fe8a0bf24\",\n                \"sha256:7eb33a30d75562222b64f569c642ff3dc6689e09adda43a082208397f016c39a\",\n                \"sha256:81d6741ab457d14fdedc215516665050f3822d3e56508921cc7239f8c8e66a58\",\n                \"sha256:8499ca8f4502af841f68135133d8258f7b32a53a1d594aa98cc52013fff55678\",\n                \"sha256:84c3990934bae40ea69a82034912ffe5a62c60bbf6ec5bc9691419641d7d5c9a\",\n                \"sha256:87701167f2a5c930b403e9756fab1d31d4d4da52856143b609e30a1ce7160f3c\",\n                \"sha256:88600c72ef7587fe1708fd242b385b6ed4b8904976d5da0893e31df8b3480cb6\",\n                \"sha256:8ac7b6a045b814cf0c47f3623d21ebd88b3e8cf216a14790b455ea7ff0135d18\",\n                \"sha256:8b8af03d2e37866d023ad0ddea594edefc31e827fee64f8de5611a1dbc373174\",\n                \"sha256:8c7fe7afa480e3e82eed58e0ca89f751cd14d767638e2550c77a92a9e749c317\",\n                \"sha256:8eade758719add78ec36dc13201483f8e9b5d940329285edcd5f70c0a9edbd7f\",\n                \"sha256:911d8a40b2bef5b8bbae2e36a0b103f142ac53557ab421dc16ac4aafee6f53dc\",\n                \"sha256:93ad6d87ac18e2a90b0fe89df7c65263b9a99a0eb98f0a3d2e079f12a0735837\",\n                \"sha256:95dea361dd73757c6f1c0a1480ac499952c16ac83f7f5f4f84f0658a01b8ef41\",\n                \"sha256:9ab77acb98eba3fd2a85cd160851816bfce6871d944d885febf012713f06659c\",\n                \"sha256:9cb3032517f1627cc012dbc80a8ec976ae76d93ea2b5feaa9d2a5b8882597579\",\n                \"sha256:9cf4e8ad252f7c38dd1f676b46514f92dc0ebeb0db5552f5f403509705e24753\",\n                \"sha256:9d9153257a3f70d5f69edf2325357251ed20f772b12e593f3b3377b5f78e7ef8\",\n                \"sha256:a152f5f33d64a6be73f1d30c9cc82dfc73cec6477ec268e7c6e4c7d23c2d2291\",\n                \"sha256:a16418ecf1329f71df119e8a65f3aa68004a3f9383821edcb20f0702934d8087\",\n                \"sha256:a60332922359f920193b1d4826953c507a877b523b2395ad7bc716ddd386d866\",\n                \"sha256:a8d0fc946c784ff7f7c3742310cc8a57c5c6dc31631269876a88b809dbeff3d3\",\n                \"sha256:ab5de034a886f616a5668aa5d098af2b5385ed70142090e2a31bcbd0af0fdb3d\",\n                \"sha256:c22d3fe05ce11d3671297dc8973267daa0f938b93ec716e12e0f6dee81591dc1\",\n                \"sha256:c2ac1b08635a8cd4e0cbeaf6f5e922085908d48eb05d44c5ae9eabab148512ca\",\n                \"sha256:c512accbd6ff0270939b9ac214b84fb5ada5f0409c44298361b2f5e13f9aed9e\",\n                \"sha256:c75ffc45f25324e68ab238cb4b5c0a38cd1c3d7f1fb1f72b5541de469e2247db\",\n                \"sha256:c95a03c79bbe30eec3ec2b7f076074f4281526724c8685a42872974ef4d36b72\",\n                \"sha256:cadaeaba78750d58d3cc6ac4d1fd867da6fc73c88156b7a3212a3cd4819d679d\",\n                \"sha256:cd6056167405314a4dc3c173943f11249fa0f1b204f8b51ed4bde1a9cd1834dc\",\n                \"sha256:db72b07027db150f468fbada4d85b3b2729a3db39178abf5c543b784c1254539\",\n                \"sha256:df2c707231459e8a4028eabcd3cfc827befd635b3ef72eada84ab13b52e1574d\",\n                \"sha256:e62164b50f84e20601c1ff8eb55620d2ad25fb81b59e3cd776a1902527a788af\",\n                \"sha256:e696f0dd336161fca9adbb846875d40752e6eba585843c768935ba5c9960722b\",\n                \"sha256:eaa379fcd227ca235d04152ca6704c7cb55564116f8bc52545ff357628e10602\",\n                \"sha256:ebea339af930f8ca5d7a699b921106c6e29c617fe9606fa7baa043c1cdae326f\",\n                \"sha256:f4c39b0e3eac288fedc2b43055cfc2ca7a60362d0e5e87a637beac5d801ef478\",\n                \"sha256:f5057856d21e7586765171eac8b9fc3f7d44ef39425f85dbcccb13b3ebea806c\",\n                \"sha256:f6f45710b4459401609ebebdbcfb34515da4fc2aa886f95107f556ac69a9147e\",\n                \"sha256:f97e83fa6c25693c7a35de154681fcc257c1c41b38beb0304b9c4d2d9e164479\",\n                \"sha256:f9d0c5c045a3ca9bedfc35dca8526798eb91a07aa7a2c0fee134c6c6f321cbd7\",\n                \"sha256:ff6f3db31555657f3163b15a6b7c6938d08df7adbfc9dd13d9d19edad678f1e8\"\n            ],\n            \"version\": \"==3.0.1\"\n        },\n        \"cssselect\": {\n            \"hashes\": [\n                \"sha256:666b19839cfaddb9ce9d36bfe4c969132c647b92fc9088c4e23f786b30f1b3dc\",\n                \"sha256:da1885f0c10b60c03ed5eccbb6b68d6eff248d91976fcde348f395d54c9fd35e\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==1.2.0\"\n        },\n        \"fake-useragent\": {\n            \"hashes\": [\n                \"sha256:579c72b18ba792a5bd54ba48e63e464d21933e336472c974091a6757f31bfcdc\",\n                \"sha256:9f9b3667d3741ba81e34ebf9a6aa32658ecf7835499257826dd72642af629d59\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.1.1\"\n        },\n        \"idna\": {\n            \"hashes\": [\n                \"sha256:814f528e8dead7d329833b91c5faa87d60bf71824cd12a7530b5526063d02cb4\",\n                \"sha256:90b77e79eaa3eba6de819a0c442c0b4ceefc341a7a2ab77d7562bf49f425c5c2\"\n            ],\n            \"markers\": \"python_version >= '3.5'\",\n            \"version\": \"==3.4\"\n        },\n        \"importlib-metadata\": {\n            \"hashes\": [\n                \"sha256:7efb448ec9a5e313a57655d35aa54cd3e01b7e1fbcf72dce1bf06119420f5bad\",\n                \"sha256:e354bedeb60efa6affdcc8ae121b73544a7aa74156d047311948f6d711cd378d\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==6.0.0\"\n        },\n        \"lxml\": {\n            \"hashes\": [\n                \"sha256:01d36c05f4afb8f7c20fd9ed5badca32a2029b93b1750f571ccc0b142531caf7\",\n                \"sha256:04876580c050a8c5341d706dd464ff04fd597095cc8c023252566a8826505726\",\n                \"sha256:05ca3f6abf5cf78fe053da9b1166e062ade3fa5d4f92b4ed688127ea7d7b1d03\",\n                \"sha256:090c6543d3696cbe15b4ac6e175e576bcc3f1ccfbba970061b7300b0c15a2140\",\n                \"sha256:0dc313ef231edf866912e9d8f5a042ddab56c752619e92dfd3a2c277e6a7299a\",\n                \"sha256:0f2b1e0d79180f344ff9f321327b005ca043a50ece8713de61d1cb383fb8ac05\",\n                \"sha256:13598ecfbd2e86ea7ae45ec28a2a54fb87ee9b9fdb0f6d343297d8e548392c03\",\n                \"sha256:16efd54337136e8cd72fb9485c368d91d77a47ee2d42b057564aae201257d419\",\n                \"sha256:1ab8f1f932e8f82355e75dda5413a57612c6ea448069d4fb2e217e9a4bed13d4\",\n                \"sha256:223f4232855ade399bd409331e6ca70fb5578efef22cf4069a6090acc0f53c0e\",\n                \"sha256:2455cfaeb7ac70338b3257f41e21f0724f4b5b0c0e7702da67ee6c3640835b67\",\n                \"sha256:2899456259589aa38bfb018c364d6ae7b53c5c22d8e27d0ec7609c2a1ff78b50\",\n                \"sha256:2a29ba94d065945944016b6b74e538bdb1751a1db6ffb80c9d3c2e40d6fa9894\",\n                \"sha256:2a87fa548561d2f4643c99cd13131acb607ddabb70682dcf1dff5f71f781a4bf\",\n                \"sha256:2e430cd2824f05f2d4f687701144556646bae8f249fd60aa1e4c768ba7018947\",\n                \"sha256:36c3c175d34652a35475a73762b545f4527aec044910a651d2bf50de9c3352b1\",\n                \"sha256:3818b8e2c4b5148567e1b09ce739006acfaa44ce3156f8cbbc11062994b8e8dd\",\n                \"sha256:3ab9fa9d6dc2a7f29d7affdf3edebf6ece6fb28a6d80b14c3b2fb9d39b9322c3\",\n                \"sha256:3efea981d956a6f7173b4659849f55081867cf897e719f57383698af6f618a92\",\n                \"sha256:4c8f293f14abc8fd3e8e01c5bd86e6ed0b6ef71936ded5bf10fe7a5efefbaca3\",\n                \"sha256:5344a43228767f53a9df6e5b253f8cdca7dfc7b7aeae52551958192f56d98457\",\n                \"sha256:58bfa3aa19ca4c0f28c5dde0ff56c520fbac6f0daf4fac66ed4c8d2fb7f22e74\",\n                \"sha256:5b4545b8a40478183ac06c073e81a5ce4cf01bf1734962577cf2bb569a5b3bbf\",\n                \"sha256:5f50a1c177e2fa3ee0667a5ab79fdc6b23086bc8b589d90b93b4bd17eb0e64d1\",\n                \"sha256:63da2ccc0857c311d764e7d3d90f429c252e83b52d1f8f1d1fe55be26827d1f4\",\n                \"sha256:6749649eecd6a9871cae297bffa4ee76f90b4504a2a2ab528d9ebe912b101975\",\n                \"sha256:6804daeb7ef69e7b36f76caddb85cccd63d0c56dedb47555d2fc969e2af6a1a5\",\n                \"sha256:689bb688a1db722485e4610a503e3e9210dcc20c520b45ac8f7533c837be76fe\",\n                \"sha256:699a9af7dffaf67deeae27b2112aa06b41c370d5e7633e0ee0aea2e0b6c211f7\",\n                \"sha256:6b418afe5df18233fc6b6093deb82a32895b6bb0b1155c2cdb05203f583053f1\",\n                \"sha256:76cf573e5a365e790396a5cc2b909812633409306c6531a6877c59061e42c4f2\",\n                \"sha256:7b515674acfdcadb0eb5d00d8a709868173acece5cb0be3dd165950cbfdf5409\",\n                \"sha256:7b770ed79542ed52c519119473898198761d78beb24b107acf3ad65deae61f1f\",\n                \"sha256:7d2278d59425777cfcb19735018d897ca8303abe67cc735f9f97177ceff8027f\",\n                \"sha256:7e91ee82f4199af8c43d8158024cbdff3d931df350252288f0d4ce656df7f3b5\",\n                \"sha256:821b7f59b99551c69c85a6039c65b75f5683bdc63270fec660f75da67469ca24\",\n                \"sha256:822068f85e12a6e292803e112ab876bc03ed1f03dddb80154c395f891ca6b31e\",\n                \"sha256:8340225bd5e7a701c0fa98284c849c9b9fc9238abf53a0ebd90900f25d39a4e4\",\n                \"sha256:85cabf64adec449132e55616e7ca3e1000ab449d1d0f9d7f83146ed5bdcb6d8a\",\n                \"sha256:880bbbcbe2fca64e2f4d8e04db47bcdf504936fa2b33933efd945e1b429bea8c\",\n                \"sha256:8d0b4612b66ff5d62d03bcaa043bb018f74dfea51184e53f067e6fdcba4bd8de\",\n                \"sha256:8e20cb5a47247e383cf4ff523205060991021233ebd6f924bca927fcf25cf86f\",\n                \"sha256:925073b2fe14ab9b87e73f9a5fde6ce6392da430f3004d8b72cc86f746f5163b\",\n                \"sha256:998c7c41910666d2976928c38ea96a70d1aa43be6fe502f21a651e17483a43c5\",\n                \"sha256:9b22c5c66f67ae00c0199f6055705bc3eb3fcb08d03d2ec4059a2b1b25ed48d7\",\n                \"sha256:9f102706d0ca011de571de32c3247c6476b55bb6bc65a20f682f000b07a4852a\",\n                \"sha256:a08cff61517ee26cb56f1e949cca38caabe9ea9fbb4b1e10a805dc39844b7d5c\",\n                \"sha256:a0a336d6d3e8b234a3aae3c674873d8f0e720b76bc1d9416866c41cd9500ffb9\",\n                \"sha256:a35f8b7fa99f90dd2f5dc5a9fa12332642f087a7641289ca6c40d6e1a2637d8e\",\n                \"sha256:a38486985ca49cfa574a507e7a2215c0c780fd1778bb6290c21193b7211702ab\",\n                \"sha256:a5da296eb617d18e497bcf0a5c528f5d3b18dadb3619fbdadf4ed2356ef8d941\",\n                \"sha256:a6e441a86553c310258aca15d1c05903aaf4965b23f3bc2d55f200804e005ee5\",\n                \"sha256:a82d05da00a58b8e4c0008edbc8a4b6ec5a4bc1e2ee0fb6ed157cf634ed7fa45\",\n                \"sha256:ab323679b8b3030000f2be63e22cdeea5b47ee0abd2d6a1dc0c8103ddaa56cd7\",\n                \"sha256:b1f42b6921d0e81b1bcb5e395bc091a70f41c4d4e55ba99c6da2b31626c44892\",\n                \"sha256:b23e19989c355ca854276178a0463951a653309fb8e57ce674497f2d9f208746\",\n                \"sha256:b264171e3143d842ded311b7dccd46ff9ef34247129ff5bf5066123c55c2431c\",\n                \"sha256:b26a29f0b7fc6f0897f043ca366142d2b609dc60756ee6e4e90b5f762c6adc53\",\n                \"sha256:b64d891da92e232c36976c80ed7ebb383e3f148489796d8d31a5b6a677825efe\",\n                \"sha256:b9cc34af337a97d470040f99ba4282f6e6bac88407d021688a5d585e44a23184\",\n                \"sha256:bc718cd47b765e790eecb74d044cc8d37d58562f6c314ee9484df26276d36a38\",\n                \"sha256:be7292c55101e22f2a3d4d8913944cbea71eea90792bf914add27454a13905df\",\n                \"sha256:c83203addf554215463b59f6399835201999b5e48019dc17f182ed5ad87205c9\",\n                \"sha256:c9ec3eaf616d67db0764b3bb983962b4f385a1f08304fd30c7283954e6a7869b\",\n                \"sha256:ca34efc80a29351897e18888c71c6aca4a359247c87e0b1c7ada14f0ab0c0fb2\",\n                \"sha256:ca989b91cf3a3ba28930a9fc1e9aeafc2a395448641df1f387a2d394638943b0\",\n                \"sha256:d02a5399126a53492415d4906ab0ad0375a5456cc05c3fc0fc4ca11771745cda\",\n                \"sha256:d17bc7c2ccf49c478c5bdd447594e82692c74222698cfc9b5daae7ae7e90743b\",\n                \"sha256:d5bf6545cd27aaa8a13033ce56354ed9e25ab0e4ac3b5392b763d8d04b08e0c5\",\n                \"sha256:d6b430a9938a5a5d85fc107d852262ddcd48602c120e3dbb02137c83d212b380\",\n                \"sha256:da248f93f0418a9e9d94b0080d7ebc407a9a5e6d0b57bb30db9b5cc28de1ad33\",\n                \"sha256:da4dd7c9c50c059aba52b3524f84d7de956f7fef88f0bafcf4ad7dde94a064e8\",\n                \"sha256:df0623dcf9668ad0445e0558a21211d4e9a149ea8f5666917c8eeec515f0a6d1\",\n                \"sha256:e5168986b90a8d1f2f9dc1b841467c74221bd752537b99761a93d2d981e04889\",\n                \"sha256:efa29c2fe6b4fdd32e8ef81c1528506895eca86e1d8c4657fda04c9b3786ddf9\",\n                \"sha256:f1496ea22ca2c830cbcbd473de8f114a320da308438ae65abad6bab7867fe38f\",\n                \"sha256:f49e52d174375a7def9915c9f06ec4e569d235ad428f70751765f48d5926678c\"\n            ],\n            \"markers\": \"python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3, 3.4'\",\n            \"version\": \"==4.9.2\"\n        },\n        \"parse\": {\n            \"hashes\": [\n                \"sha256:9ff82852bcb65d139813e2a5197627a94966245c897796760a3a2a8eb66f020b\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.19.0\"\n        },\n        \"pyee\": {\n            \"hashes\": [\n                \"sha256:5c7e60f8df95710dbe17550e16ce0153f83990c00ef744841b43f371ed53ebea\",\n                \"sha256:c09f56e36eb10bf23aa2aacf145f690ded75b990a3d9523fd478b005940303d2\"\n            ],\n            \"version\": \"==8.2.2\"\n        },\n        \"pyppeteer\": {\n            \"hashes\": [\n                \"sha256:11a734d8f02c6b128035aba8faf32748f2016310a6a1cbc6aa5b1e2580742e8f\",\n                \"sha256:ddb0d15cb644720160d49abb1ad0d97e87a55581febf1b7531be9e983aad7742\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.0.2\"\n        },\n        \"pyquery\": {\n            \"hashes\": [\n                \"sha256:8dfc9b4b7c5f877d619bbae74b1898d5743f6ca248cfd5d72b504dd614da312f\",\n                \"sha256:963e8d4e90262ff6d8dec072ea97285dc374a2f69cad7776f4082abcf6a1d8ae\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.0.0\"\n        },\n        \"requests\": {\n            \"hashes\": [\n                \"sha256:64299f4909223da747622c030b781c0d7811e359c37124b4bd368fb8c6518baa\",\n                \"sha256:98b1b2782e3c6c4904938b84c0eb932721069dfdb9134313beff7c83c2df24bf\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.28.2\"\n        },\n        \"rfc3986\": {\n            \"hashes\": [\n                \"sha256:50b1502b60e289cb37883f3dfd34532b8873c7de9f49bb546641ce9cbd256ebd\",\n                \"sha256:97aacf9dbd4bfd829baad6e6309fa6573aaf1be3f6fa735c8ab05e46cecb261c\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.0.0\"\n        },\n        \"soupsieve\": {\n            \"hashes\": [\n                \"sha256:49e5368c2cda80ee7e84da9dbe3e110b70a4575f196efb74e51b94549d921955\",\n                \"sha256:e28dba9ca6c7c00173e34e4ba57448f0688bb681b7c5e8bf4971daafc093d69a\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==2.4\"\n        },\n        \"tqdm\": {\n            \"hashes\": [\n                \"sha256:5f4f682a004951c1b450bc753c710e9280c5746ce6ffedee253ddbcbf54cf1e4\",\n                \"sha256:6fee160d6ffcd1b1c68c65f14c829c22832bc401726335ce92c52d395944a6a1\"\n            ],\n            \"markers\": \"python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3'\",\n            \"version\": \"==4.64.1\"\n        },\n        \"urllib3\": {\n            \"hashes\": [\n                \"sha256:076907bf8fd355cde77728471316625a4d2f7e713c125f51953bb5b3eecf4f72\",\n                \"sha256:75edcdc2f7d85b137124a6c3c9fc3933cdeaa12ecb9a6a959f22797a0feca7e1\"\n            ],\n            \"markers\": \"python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3, 3.4, 3.5'\",\n            \"version\": \"==1.26.14\"\n        },\n        \"w3lib\": {\n            \"hashes\": [\n                \"sha256:0e1198f1b745195b6b3dd1a4cd66011fbf82f30a4d9dabaee1f9e5c86f020274\",\n                \"sha256:7fd5bd7980a95d1a8185e867d05f68a591aa281a3ded4590d2641d7b09086ed4\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.1.1\"\n        },\n        \"websockets\": {\n            \"hashes\": [\n                \"sha256:00213676a2e46b6ebf6045bc11d0f529d9120baa6f58d122b4021ad92adabd41\",\n                \"sha256:00c870522cdb69cd625b93f002961ffb0c095394f06ba8c48f17eef7c1541f96\",\n                \"sha256:0154f7691e4fe6c2b2bc275b5701e8b158dae92a1ab229e2b940efe11905dff4\",\n                \"sha256:05a7233089f8bd355e8cbe127c2e8ca0b4ea55467861906b80d2ebc7db4d6b72\",\n                \"sha256:09a1814bb15eff7069e51fed0826df0bc0702652b5cb8f87697d469d79c23576\",\n                \"sha256:0cff816f51fb33c26d6e2b16b5c7d48eaa31dae5488ace6aae468b361f422b63\",\n                \"sha256:185929b4808b36a79c65b7865783b87b6841e852ef5407a2fb0c03381092fa3b\",\n                \"sha256:2fc8709c00704194213d45e455adc106ff9e87658297f72d544220e32029cd3d\",\n                \"sha256:33d69ca7612f0ddff3316b0c7b33ca180d464ecac2d115805c044bf0a3b0d032\",\n                \"sha256:389f8dbb5c489e305fb113ca1b6bdcdaa130923f77485db5b189de343a179393\",\n                \"sha256:38ea7b82bfcae927eeffc55d2ffa31665dc7fec7b8dc654506b8e5a518eb4d50\",\n                \"sha256:3d3cac3e32b2c8414f4f87c1b2ab686fa6284a980ba283617404377cd448f631\",\n                \"sha256:40e826de3085721dabc7cf9bfd41682dadc02286d8cf149b3ad05bff89311e4f\",\n                \"sha256:4239b6027e3d66a89446908ff3027d2737afc1a375f8fd3eea630a4842ec9a0c\",\n                \"sha256:45ec8e75b7dbc9539cbfafa570742fe4f676eb8b0d3694b67dabe2f2ceed8aa6\",\n                \"sha256:47a2964021f2110116cc1125b3e6d87ab5ad16dea161949e7244ec583b905bb4\",\n                \"sha256:48c08473563323f9c9debac781ecf66f94ad5a3680a38fe84dee5388cf5acaf6\",\n                \"sha256:4c6d2264f485f0b53adf22697ac11e261ce84805c232ed5dbe6b1bcb84b00ff0\",\n                \"sha256:4f72e5cd0f18f262f5da20efa9e241699e0cf3a766317a17392550c9ad7b37d8\",\n                \"sha256:56029457f219ade1f2fc12a6504ea61e14ee227a815531f9738e41203a429112\",\n                \"sha256:5c1289596042fad2cdceb05e1ebf7aadf9995c928e0da2b7a4e99494953b1b94\",\n                \"sha256:62e627f6b6d4aed919a2052efc408da7a545c606268d5ab5bfab4432734b82b4\",\n                \"sha256:74de2b894b47f1d21cbd0b37a5e2b2392ad95d17ae983e64727e18eb281fe7cb\",\n                \"sha256:7c584f366f46ba667cfa66020344886cf47088e79c9b9d39c84ce9ea98aaa331\",\n                \"sha256:7d27a7e34c313b3a7f91adcd05134315002aaf8540d7b4f90336beafaea6217c\",\n                \"sha256:7d3f0b61c45c3fa9a349cf484962c559a8a1d80dae6977276df8fd1fa5e3cb8c\",\n                \"sha256:82ff5e1cae4e855147fd57a2863376ed7454134c2bf49ec604dfe71e446e2193\",\n                \"sha256:84bc2a7d075f32f6ed98652db3a680a17a4edb21ca7f80fe42e38753a58ee02b\",\n                \"sha256:884be66c76a444c59f801ac13f40c76f176f1bfa815ef5b8ed44321e74f1600b\",\n                \"sha256:8a5cc00546e0a701da4639aa0bbcb0ae2bb678c87f46da01ac2d789e1f2d2038\",\n                \"sha256:8dc96f64ae43dde92530775e9cb169979f414dcf5cff670455d81a6823b42089\",\n                \"sha256:8f38706e0b15d3c20ef6259fd4bc1700cd133b06c3c1bb108ffe3f8947be15fa\",\n                \"sha256:90fcf8929836d4a0e964d799a58823547df5a5e9afa83081761630553be731f9\",\n                \"sha256:931c039af54fc195fe6ad536fde4b0de04da9d5916e78e55405436348cfb0e56\",\n                \"sha256:932af322458da7e4e35df32f050389e13d3d96b09d274b22a7aa1808f292fee4\",\n                \"sha256:942de28af58f352a6f588bc72490ae0f4ccd6dfc2bd3de5945b882a078e4e179\",\n                \"sha256:9bc42e8402dc5e9905fb8b9649f57efcb2056693b7e88faa8fb029256ba9c68c\",\n                \"sha256:a7a240d7a74bf8d5cb3bfe6be7f21697a28ec4b1a437607bae08ac7acf5b4882\",\n                \"sha256:a9f9a735deaf9a0cadc2d8c50d1a5bcdbae8b6e539c6e08237bc4082d7c13f28\",\n                \"sha256:ae5e95cfb53ab1da62185e23b3130e11d64431179debac6dc3c6acf08760e9b1\",\n                \"sha256:b029fb2032ae4724d8ae8d4f6b363f2cc39e4c7b12454df8df7f0f563ed3e61a\",\n                \"sha256:b0d15c968ea7a65211e084f523151dbf8ae44634de03c801b8bd070b74e85033\",\n                \"sha256:b343f521b047493dc4022dd338fc6db9d9282658862756b4f6fd0e996c1380e1\",\n                \"sha256:b627c266f295de9dea86bd1112ed3d5fafb69a348af30a2422e16590a8ecba13\",\n                \"sha256:b9968694c5f467bf67ef97ae7ad4d56d14be2751000c1207d31bf3bb8860bae8\",\n                \"sha256:ba089c499e1f4155d2a3c2a05d2878a3428cf321c848f2b5a45ce55f0d7d310c\",\n                \"sha256:bbccd847aa0c3a69b5f691a84d2341a4f8a629c6922558f2a70611305f902d74\",\n                \"sha256:bc0b82d728fe21a0d03e65f81980abbbcb13b5387f733a1a870672c5be26edab\",\n                \"sha256:c57e4c1349fbe0e446c9fa7b19ed2f8a4417233b6984277cce392819123142d3\",\n                \"sha256:c94ae4faf2d09f7c81847c63843f84fe47bf6253c9d60b20f25edfd30fb12588\",\n                \"sha256:c9b27d6c1c6cd53dc93614967e9ce00ae7f864a2d9f99fe5ed86706e1ecbf485\",\n                \"sha256:d210abe51b5da0ffdbf7b43eed0cfdff8a55a1ab17abbec4301c9ff077dd0342\",\n                \"sha256:d58804e996d7d2307173d56c297cf7bc132c52df27a3efaac5e8d43e36c21c48\",\n                \"sha256:d6a4162139374a49eb18ef5b2f4da1dd95c994588f5033d64e0bbfda4b6b6fcf\",\n                \"sha256:da39dd03d130162deb63da51f6e66ed73032ae62e74aaccc4236e30edccddbb0\",\n                \"sha256:db3c336f9eda2532ec0fd8ea49fef7a8df8f6c804cdf4f39e5c5c0d4a4ad9a7a\",\n                \"sha256:dd500e0a5e11969cdd3320935ca2ff1e936f2358f9c2e61f100a1660933320ea\",\n                \"sha256:dd9becd5fe29773d140d68d607d66a38f60e31b86df75332703757ee645b6faf\",\n                \"sha256:e0cb5cc6ece6ffa75baccfd5c02cffe776f3f5c8bf486811f9d3ea3453676ce8\",\n                \"sha256:e23173580d740bf8822fd0379e4bf30aa1d5a92a4f252d34e893070c081050df\",\n                \"sha256:e3a686ecb4aa0d64ae60c9c9f1a7d5d46cab9bfb5d91a2d303d00e2cd4c4c5cc\",\n                \"sha256:e789376b52c295c4946403bd0efecf27ab98f05319df4583d3c48e43c7342c2f\",\n                \"sha256:edc344de4dac1d89300a053ac973299e82d3db56330f3494905643bb68801269\",\n                \"sha256:eef610b23933c54d5d921c92578ae5f89813438fded840c2e9809d378dc765d3\",\n                \"sha256:f2c38d588887a609191d30e902df2a32711f708abfd85d318ca9b367258cfd0c\",\n                \"sha256:f55b5905705725af31ccef50e55391621532cd64fbf0bc6f4bac935f0fccec46\",\n                \"sha256:f5fc088b7a32f244c519a048c170f14cf2251b849ef0e20cbbb0fdf0fdaf556f\",\n                \"sha256:fe10ddc59b304cb19a1bdf5bd0a7719cbbc9fbdd57ac80ed436b709fcf889106\",\n                \"sha256:ff64a1d38d156d429404aaa84b27305e957fd10c30e5880d1765c9480bea490f\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==10.4\"\n        },\n        \"zipp\": {\n            \"hashes\": [\n                \"sha256:112929ad649da941c23de50f356a2b5570c954b65150642bccdd66bf194d224b\",\n                \"sha256:48904fc76a60e542af151aded95726c1a5c34ed43ab4134b597665c86d7ad556\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==3.15.0\"\n        }\n    },\n    \"develop\": {\n        \"alabaster\": {\n            \"hashes\": [\n                \"sha256:1ee19aca801bbabb5ba3f5f258e4422dfa86f82f3e9cefb0859b283cdd7f62a3\",\n                \"sha256:a27a4a084d5e690e16e01e03ad2b2e552c61a65469419b907243193de1a84ae2\"\n            ],\n            \"markers\": \"python_version >= '3.6'\",\n            \"version\": \"==0.7.13\"\n        },\n        \"appdirs\": {\n            \"hashes\": [\n                \"sha256:7d5d0167b2b1ba821647616af46a749d1c653740dd0d2415100fe26e27afdf41\",\n                \"sha256:a841dacd6b99318a741b166adb07e19ee71a274450e68237b4650ca1055ab128\"\n            ],\n            \"version\": \"==1.4.4\"\n        },\n        \"attrs\": {\n            \"hashes\": [\n                \"sha256:29e95c7f6778868dbd49170f98f8818f78f3dc5e0e37c0b1f474e3561b240836\",\n                \"sha256:c9227bfc2f01993c03f68db37d1d15c9690188323c067c641f1a35ca58185f99\"\n            ],\n            \"markers\": \"python_version >= '3.6'\",\n            \"version\": \"==22.2.0\"\n        },\n        \"babel\": {\n            \"hashes\": [\n                \"sha256:1ad3eca1c885218f6dce2ab67291178944f810a10a9b5f3cb8382a5a232b64fe\",\n                \"sha256:5ef4b3226b0180dedded4229651c8b0e1a3a6a2837d45a073272f313e4cf97f6\"\n            ],\n            \"markers\": \"python_version >= '3.6'\",\n            \"version\": \"==2.11.0\"\n        },\n        \"beautifulsoup4\": {\n            \"hashes\": [\n                \"sha256:0e79446b10b3ecb499c1556f7e228a53e64a2bfcebd455f370d8927cb5b59e39\",\n                \"sha256:bc4bdda6717de5a2987436fb8d72f45dc90dd856bdfd512a1314ce90349a0106\"\n            ],\n            \"markers\": \"python_full_version >= '3.6.0'\",\n            \"version\": \"==4.11.2\"\n        },\n        \"bleach\": {\n            \"hashes\": [\n                \"sha256:1a1a85c1595e07d8db14c5f09f09e6433502c51c595970edc090551f0db99414\",\n                \"sha256:33c16e3353dbd13028ab4799a0f89a83f113405c766e9c122df8a06f5b85b3f4\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==6.0.0\"\n        },\n        \"certifi\": {\n            \"hashes\": [\n                \"sha256:35824b4c3a97115964b408844d64aa14db1cc518f6562e8d7261699d1350a9e3\",\n                \"sha256:4ad3232f5e926d6718ec31cfc1fcadfde020920e278684144551c91769c7bc18\"\n            ],\n            \"markers\": \"python_version >= '3.6'\",\n            \"version\": \"==2022.12.7\"\n        },\n        \"cffi\": {\n            \"hashes\": [\n                \"sha256:00a9ed42e88df81ffae7a8ab6d9356b371399b91dbdf0c3cb1e84c03a13aceb5\",\n                \"sha256:03425bdae262c76aad70202debd780501fabeaca237cdfddc008987c0e0f59ef\",\n                \"sha256:04ed324bda3cda42b9b695d51bb7d54b680b9719cfab04227cdd1e04e5de3104\",\n                \"sha256:0e2642fe3142e4cc4af0799748233ad6da94c62a8bec3a6648bf8ee68b1c7426\",\n                \"sha256:173379135477dc8cac4bc58f45db08ab45d228b3363adb7af79436135d028405\",\n                \"sha256:198caafb44239b60e252492445da556afafc7d1e3ab7a1fb3f0584ef6d742375\",\n                \"sha256:1e74c6b51a9ed6589199c787bf5f9875612ca4a8a0785fb2d4a84429badaf22a\",\n                \"sha256:2012c72d854c2d03e45d06ae57f40d78e5770d252f195b93f581acf3ba44496e\",\n                \"sha256:21157295583fe8943475029ed5abdcf71eb3911894724e360acff1d61c1d54bc\",\n                \"sha256:2470043b93ff09bf8fb1d46d1cb756ce6132c54826661a32d4e4d132e1977adf\",\n                \"sha256:285d29981935eb726a4399badae8f0ffdff4f5050eaa6d0cfc3f64b857b77185\",\n                \"sha256:30d78fbc8ebf9c92c9b7823ee18eb92f2e6ef79b45ac84db507f52fbe3ec4497\",\n                \"sha256:320dab6e7cb2eacdf0e658569d2575c4dad258c0fcc794f46215e1e39f90f2c3\",\n                \"sha256:33ab79603146aace82c2427da5ca6e58f2b3f2fb5da893ceac0c42218a40be35\",\n                \"sha256:3548db281cd7d2561c9ad9984681c95f7b0e38881201e157833a2342c30d5e8c\",\n                \"sha256:3799aecf2e17cf585d977b780ce79ff0dc9b78d799fc694221ce814c2c19db83\",\n                \"sha256:39d39875251ca8f612b6f33e6b1195af86d1b3e60086068be9cc053aa4376e21\",\n                \"sha256:3b926aa83d1edb5aa5b427b4053dc420ec295a08e40911296b9eb1b6170f6cca\",\n                \"sha256:3bcde07039e586f91b45c88f8583ea7cf7a0770df3a1649627bf598332cb6984\",\n                \"sha256:3d08afd128ddaa624a48cf2b859afef385b720bb4b43df214f85616922e6a5ac\",\n                \"sha256:3eb6971dcff08619f8d91607cfc726518b6fa2a9eba42856be181c6d0d9515fd\",\n                \"sha256:40f4774f5a9d4f5e344f31a32b5096977b5d48560c5592e2f3d2c4374bd543ee\",\n                \"sha256:4289fc34b2f5316fbb762d75362931e351941fa95fa18789191b33fc4cf9504a\",\n                \"sha256:470c103ae716238bbe698d67ad020e1db9d9dba34fa5a899b5e21577e6d52ed2\",\n                \"sha256:4f2c9f67e9821cad2e5f480bc8d83b8742896f1242dba247911072d4fa94c192\",\n                \"sha256:50a74364d85fd319352182ef59c5c790484a336f6db772c1a9231f1c3ed0cbd7\",\n                \"sha256:54a2db7b78338edd780e7ef7f9f6c442500fb0d41a5a4ea24fff1c929d5af585\",\n                \"sha256:5635bd9cb9731e6d4a1132a498dd34f764034a8ce60cef4f5319c0541159392f\",\n                \"sha256:59c0b02d0a6c384d453fece7566d1c7e6b7bae4fc5874ef2ef46d56776d61c9e\",\n                \"sha256:5d598b938678ebf3c67377cdd45e09d431369c3b1a5b331058c338e201f12b27\",\n                \"sha256:5df2768244d19ab7f60546d0c7c63ce1581f7af8b5de3eb3004b9b6fc8a9f84b\",\n                \"sha256:5ef34d190326c3b1f822a5b7a45f6c4535e2f47ed06fec77d3d799c450b2651e\",\n                \"sha256:6975a3fac6bc83c4a65c9f9fcab9e47019a11d3d2cf7f3c0d03431bf145a941e\",\n                \"sha256:6c9a799e985904922a4d207a94eae35c78ebae90e128f0c4e521ce339396be9d\",\n                \"sha256:70df4e3b545a17496c9b3f41f5115e69a4f2e77e94e1d2a8e1070bc0c38c8a3c\",\n                \"sha256:7473e861101c9e72452f9bf8acb984947aa1661a7704553a9f6e4baa5ba64415\",\n                \"sha256:8102eaf27e1e448db915d08afa8b41d6c7ca7a04b7d73af6514df10a3e74bd82\",\n                \"sha256:87c450779d0914f2861b8526e035c5e6da0a3199d8f1add1a665e1cbc6fc6d02\",\n                \"sha256:8b7ee99e510d7b66cdb6c593f21c043c248537a32e0bedf02e01e9553a172314\",\n                \"sha256:91fc98adde3d7881af9b59ed0294046f3806221863722ba7d8d120c575314325\",\n                \"sha256:94411f22c3985acaec6f83c6df553f2dbe17b698cc7f8ae751ff2237d96b9e3c\",\n                \"sha256:98d85c6a2bef81588d9227dde12db8a7f47f639f4a17c9ae08e773aa9c697bf3\",\n                \"sha256:9ad5db27f9cabae298d151c85cf2bad1d359a1b9c686a275df03385758e2f914\",\n                \"sha256:a0b71b1b8fbf2b96e41c4d990244165e2c9be83d54962a9a1d118fd8657d2045\",\n                \"sha256:a0f100c8912c114ff53e1202d0078b425bee3649ae34d7b070e9697f93c5d52d\",\n                \"sha256:a591fe9e525846e4d154205572a029f653ada1a78b93697f3b5a8f1f2bc055b9\",\n                \"sha256:a5c84c68147988265e60416b57fc83425a78058853509c1b0629c180094904a5\",\n                \"sha256:a66d3508133af6e8548451b25058d5812812ec3798c886bf38ed24a98216fab2\",\n                \"sha256:a8c4917bd7ad33e8eb21e9a5bbba979b49d9a97acb3a803092cbc1133e20343c\",\n                \"sha256:b3bbeb01c2b273cca1e1e0c5df57f12dce9a4dd331b4fa1635b8bec26350bde3\",\n                \"sha256:cba9d6b9a7d64d4bd46167096fc9d2f835e25d7e4c121fb2ddfc6528fb0413b2\",\n                \"sha256:cc4d65aeeaa04136a12677d3dd0b1c0c94dc43abac5860ab33cceb42b801c1e8\",\n                \"sha256:ce4bcc037df4fc5e3d184794f27bdaab018943698f4ca31630bc7f84a7b69c6d\",\n                \"sha256:cec7d9412a9102bdc577382c3929b337320c4c4c4849f2c5cdd14d7368c5562d\",\n                \"sha256:d400bfb9a37b1351253cb402671cea7e89bdecc294e8016a707f6d1d8ac934f9\",\n                \"sha256:d61f4695e6c866a23a21acab0509af1cdfd2c013cf256bbf5b6b5e2695827162\",\n                \"sha256:db0fbb9c62743ce59a9ff687eb5f4afbe77e5e8403d6697f7446e5f609976f76\",\n                \"sha256:dd86c085fae2efd48ac91dd7ccffcfc0571387fe1193d33b6394db7ef31fe2a4\",\n                \"sha256:e00b098126fd45523dd056d2efba6c5a63b71ffe9f2bbe1a4fe1716e1d0c331e\",\n                \"sha256:e229a521186c75c8ad9490854fd8bbdd9a0c9aa3a524326b55be83b54d4e0ad9\",\n                \"sha256:e263d77ee3dd201c3a142934a086a4450861778baaeeb45db4591ef65550b0a6\",\n                \"sha256:ed9cb427ba5504c1dc15ede7d516b84757c3e3d7868ccc85121d9310d27eed0b\",\n                \"sha256:fa6693661a4c91757f4412306191b6dc88c1703f780c8234035eac011922bc01\",\n                \"sha256:fcd131dd944808b5bdb38e6f5b53013c5aa4f334c5cad0c72742f6eba4b73db0\"\n            ],\n            \"version\": \"==1.15.1\"\n        },\n        \"charset-normalizer\": {\n            \"hashes\": [\n                \"sha256:00d3ffdaafe92a5dc603cb9bd5111aaa36dfa187c8285c543be562e61b755f6b\",\n                \"sha256:024e606be3ed92216e2b6952ed859d86b4cfa52cd5bc5f050e7dc28f9b43ec42\",\n                \"sha256:0298eafff88c99982a4cf66ba2efa1128e4ddaca0b05eec4c456bbc7db691d8d\",\n                \"sha256:02a51034802cbf38db3f89c66fb5d2ec57e6fe7ef2f4a44d070a593c3688667b\",\n                \"sha256:083c8d17153ecb403e5e1eb76a7ef4babfc2c48d58899c98fcaa04833e7a2f9a\",\n                \"sha256:0a11e971ed097d24c534c037d298ad32c6ce81a45736d31e0ff0ad37ab437d59\",\n                \"sha256:0bf2dae5291758b6f84cf923bfaa285632816007db0330002fa1de38bfcb7154\",\n                \"sha256:0c0a590235ccd933d9892c627dec5bc7511ce6ad6c1011fdf5b11363022746c1\",\n                \"sha256:0f438ae3532723fb6ead77e7c604be7c8374094ef4ee2c5e03a3a17f1fca256c\",\n                \"sha256:109487860ef6a328f3eec66f2bf78b0b72400280d8f8ea05f69c51644ba6521a\",\n                \"sha256:11b53acf2411c3b09e6af37e4b9005cba376c872503c8f28218c7243582df45d\",\n                \"sha256:12db3b2c533c23ab812c2b25934f60383361f8a376ae272665f8e48b88e8e1c6\",\n                \"sha256:14e76c0f23218b8f46c4d87018ca2e441535aed3632ca134b10239dfb6dadd6b\",\n                \"sha256:16a8663d6e281208d78806dbe14ee9903715361cf81f6d4309944e4d1e59ac5b\",\n                \"sha256:292d5e8ba896bbfd6334b096e34bffb56161c81408d6d036a7dfa6929cff8783\",\n                \"sha256:2c03cc56021a4bd59be889c2b9257dae13bf55041a3372d3295416f86b295fb5\",\n                \"sha256:2e396d70bc4ef5325b72b593a72c8979999aa52fb8bcf03f701c1b03e1166918\",\n                \"sha256:2edb64ee7bf1ed524a1da60cdcd2e1f6e2b4f66ef7c077680739f1641f62f555\",\n                \"sha256:31a9ddf4718d10ae04d9b18801bd776693487cbb57d74cc3458a7673f6f34639\",\n                \"sha256:356541bf4381fa35856dafa6a965916e54bed415ad8a24ee6de6e37deccf2786\",\n                \"sha256:358a7c4cb8ba9b46c453b1dd8d9e431452d5249072e4f56cfda3149f6ab1405e\",\n                \"sha256:37f8febc8ec50c14f3ec9637505f28e58d4f66752207ea177c1d67df25da5aed\",\n                \"sha256:39049da0ffb96c8cbb65cbf5c5f3ca3168990adf3551bd1dee10c48fce8ae820\",\n                \"sha256:39cf9ed17fe3b1bc81f33c9ceb6ce67683ee7526e65fde1447c772afc54a1bb8\",\n                \"sha256:3ae1de54a77dc0d6d5fcf623290af4266412a7c4be0b1ff7444394f03f5c54e3\",\n                \"sha256:3b590df687e3c5ee0deef9fc8c547d81986d9a1b56073d82de008744452d6541\",\n                \"sha256:3e45867f1f2ab0711d60c6c71746ac53537f1684baa699f4f668d4c6f6ce8e14\",\n                \"sha256:3fc1c4a2ffd64890aebdb3f97e1278b0cc72579a08ca4de8cd2c04799a3a22be\",\n                \"sha256:4457ea6774b5611f4bed5eaa5df55f70abde42364d498c5134b7ef4c6958e20e\",\n                \"sha256:44ba614de5361b3e5278e1241fda3dc1838deed864b50a10d7ce92983797fa76\",\n                \"sha256:4a8fcf28c05c1f6d7e177a9a46a1c52798bfe2ad80681d275b10dcf317deaf0b\",\n                \"sha256:4b0d02d7102dd0f997580b51edc4cebcf2ab6397a7edf89f1c73b586c614272c\",\n                \"sha256:502218f52498a36d6bf5ea77081844017bf7982cdbe521ad85e64cabee1b608b\",\n                \"sha256:503e65837c71b875ecdd733877d852adbc465bd82c768a067badd953bf1bc5a3\",\n                \"sha256:5995f0164fa7df59db4746112fec3f49c461dd6b31b841873443bdb077c13cfc\",\n                \"sha256:59e5686dd847347e55dffcc191a96622f016bc0ad89105e24c14e0d6305acbc6\",\n                \"sha256:601f36512f9e28f029d9481bdaf8e89e5148ac5d89cffd3b05cd533eeb423b59\",\n                \"sha256:608862a7bf6957f2333fc54ab4399e405baad0163dc9f8d99cb236816db169d4\",\n                \"sha256:62595ab75873d50d57323a91dd03e6966eb79c41fa834b7a1661ed043b2d404d\",\n                \"sha256:70990b9c51340e4044cfc394a81f614f3f90d41397104d226f21e66de668730d\",\n                \"sha256:71140351489970dfe5e60fc621ada3e0f41104a5eddaca47a7acb3c1b851d6d3\",\n                \"sha256:72966d1b297c741541ca8cf1223ff262a6febe52481af742036a0b296e35fa5a\",\n                \"sha256:74292fc76c905c0ef095fe11e188a32ebd03bc38f3f3e9bcb85e4e6db177b7ea\",\n                \"sha256:761e8904c07ad053d285670f36dd94e1b6ab7f16ce62b9805c475b7aa1cffde6\",\n                \"sha256:772b87914ff1152b92a197ef4ea40efe27a378606c39446ded52c8f80f79702e\",\n                \"sha256:79909e27e8e4fcc9db4addea88aa63f6423ebb171db091fb4373e3312cb6d603\",\n                \"sha256:7e189e2e1d3ed2f4aebabd2d5b0f931e883676e51c7624826e0a4e5fe8a0bf24\",\n                \"sha256:7eb33a30d75562222b64f569c642ff3dc6689e09adda43a082208397f016c39a\",\n                \"sha256:81d6741ab457d14fdedc215516665050f3822d3e56508921cc7239f8c8e66a58\",\n                \"sha256:8499ca8f4502af841f68135133d8258f7b32a53a1d594aa98cc52013fff55678\",\n                \"sha256:84c3990934bae40ea69a82034912ffe5a62c60bbf6ec5bc9691419641d7d5c9a\",\n                \"sha256:87701167f2a5c930b403e9756fab1d31d4d4da52856143b609e30a1ce7160f3c\",\n                \"sha256:88600c72ef7587fe1708fd242b385b6ed4b8904976d5da0893e31df8b3480cb6\",\n                \"sha256:8ac7b6a045b814cf0c47f3623d21ebd88b3e8cf216a14790b455ea7ff0135d18\",\n                \"sha256:8b8af03d2e37866d023ad0ddea594edefc31e827fee64f8de5611a1dbc373174\",\n                \"sha256:8c7fe7afa480e3e82eed58e0ca89f751cd14d767638e2550c77a92a9e749c317\",\n                \"sha256:8eade758719add78ec36dc13201483f8e9b5d940329285edcd5f70c0a9edbd7f\",\n                \"sha256:911d8a40b2bef5b8bbae2e36a0b103f142ac53557ab421dc16ac4aafee6f53dc\",\n                \"sha256:93ad6d87ac18e2a90b0fe89df7c65263b9a99a0eb98f0a3d2e079f12a0735837\",\n                \"sha256:95dea361dd73757c6f1c0a1480ac499952c16ac83f7f5f4f84f0658a01b8ef41\",\n                \"sha256:9ab77acb98eba3fd2a85cd160851816bfce6871d944d885febf012713f06659c\",\n                \"sha256:9cb3032517f1627cc012dbc80a8ec976ae76d93ea2b5feaa9d2a5b8882597579\",\n                \"sha256:9cf4e8ad252f7c38dd1f676b46514f92dc0ebeb0db5552f5f403509705e24753\",\n                \"sha256:9d9153257a3f70d5f69edf2325357251ed20f772b12e593f3b3377b5f78e7ef8\",\n                \"sha256:a152f5f33d64a6be73f1d30c9cc82dfc73cec6477ec268e7c6e4c7d23c2d2291\",\n                \"sha256:a16418ecf1329f71df119e8a65f3aa68004a3f9383821edcb20f0702934d8087\",\n                \"sha256:a60332922359f920193b1d4826953c507a877b523b2395ad7bc716ddd386d866\",\n                \"sha256:a8d0fc946c784ff7f7c3742310cc8a57c5c6dc31631269876a88b809dbeff3d3\",\n                \"sha256:ab5de034a886f616a5668aa5d098af2b5385ed70142090e2a31bcbd0af0fdb3d\",\n                \"sha256:c22d3fe05ce11d3671297dc8973267daa0f938b93ec716e12e0f6dee81591dc1\",\n                \"sha256:c2ac1b08635a8cd4e0cbeaf6f5e922085908d48eb05d44c5ae9eabab148512ca\",\n                \"sha256:c512accbd6ff0270939b9ac214b84fb5ada5f0409c44298361b2f5e13f9aed9e\",\n                \"sha256:c75ffc45f25324e68ab238cb4b5c0a38cd1c3d7f1fb1f72b5541de469e2247db\",\n                \"sha256:c95a03c79bbe30eec3ec2b7f076074f4281526724c8685a42872974ef4d36b72\",\n                \"sha256:cadaeaba78750d58d3cc6ac4d1fd867da6fc73c88156b7a3212a3cd4819d679d\",\n                \"sha256:cd6056167405314a4dc3c173943f11249fa0f1b204f8b51ed4bde1a9cd1834dc\",\n                \"sha256:db72b07027db150f468fbada4d85b3b2729a3db39178abf5c543b784c1254539\",\n                \"sha256:df2c707231459e8a4028eabcd3cfc827befd635b3ef72eada84ab13b52e1574d\",\n                \"sha256:e62164b50f84e20601c1ff8eb55620d2ad25fb81b59e3cd776a1902527a788af\",\n                \"sha256:e696f0dd336161fca9adbb846875d40752e6eba585843c768935ba5c9960722b\",\n                \"sha256:eaa379fcd227ca235d04152ca6704c7cb55564116f8bc52545ff357628e10602\",\n                \"sha256:ebea339af930f8ca5d7a699b921106c6e29c617fe9606fa7baa043c1cdae326f\",\n                \"sha256:f4c39b0e3eac288fedc2b43055cfc2ca7a60362d0e5e87a637beac5d801ef478\",\n                \"sha256:f5057856d21e7586765171eac8b9fc3f7d44ef39425f85dbcccb13b3ebea806c\",\n                \"sha256:f6f45710b4459401609ebebdbcfb34515da4fc2aa886f95107f556ac69a9147e\",\n                \"sha256:f97e83fa6c25693c7a35de154681fcc257c1c41b38beb0304b9c4d2d9e164479\",\n                \"sha256:f9d0c5c045a3ca9bedfc35dca8526798eb91a07aa7a2c0fee134c6c6f321cbd7\",\n                \"sha256:ff6f3db31555657f3163b15a6b7c6938d08df7adbfc9dd13d9d19edad678f1e8\"\n            ],\n            \"version\": \"==3.0.1\"\n        },\n        \"cryptography\": {\n            \"hashes\": [\n                \"sha256:0f8da300b5c8af9f98111ffd512910bc792b4c77392a9523624680f7956a99d4\",\n                \"sha256:35f7c7d015d474f4011e859e93e789c87d21f6f4880ebdc29896a60403328f1f\",\n                \"sha256:4789d1e3e257965e960232345002262ede4d094d1a19f4d3b52e48d4d8f3b885\",\n                \"sha256:5aa67414fcdfa22cf052e640cb5ddc461924a045cacf325cd164e65312d99502\",\n                \"sha256:5d2d8b87a490bfcd407ed9d49093793d0f75198a35e6eb1a923ce1ee86c62b41\",\n                \"sha256:6687ef6d0a6497e2b58e7c5b852b53f62142cfa7cd1555795758934da363a965\",\n                \"sha256:6f8ba7f0328b79f08bdacc3e4e66fb4d7aab0c3584e0bd41328dce5262e26b2e\",\n                \"sha256:706843b48f9a3f9b9911979761c91541e3d90db1ca905fd63fee540a217698bc\",\n                \"sha256:807ce09d4434881ca3a7594733669bd834f5b2c6d5c7e36f8c00f691887042ad\",\n                \"sha256:83e17b26de248c33f3acffb922748151d71827d6021d98c70e6c1a25ddd78505\",\n                \"sha256:96f1157a7c08b5b189b16b47bc9db2332269d6680a196341bf30046330d15388\",\n                \"sha256:aec5a6c9864be7df2240c382740fcf3b96928c46604eaa7f3091f58b878c0bb6\",\n                \"sha256:b0afd054cd42f3d213bf82c629efb1ee5f22eba35bf0eec88ea9ea7304f511a2\",\n                \"sha256:c5caeb8188c24888c90b5108a441c106f7faa4c4c075a2bcae438c6e8ca73cef\",\n                \"sha256:ced4e447ae29ca194449a3f1ce132ded8fcab06971ef5f618605aacaa612beac\",\n                \"sha256:d1f6198ee6d9148405e49887803907fe8962a23e6c6f83ea7d98f1c0de375695\",\n                \"sha256:e124352fd3db36a9d4a21c1aa27fd5d051e621845cb87fb851c08f4f75ce8be6\",\n                \"sha256:e422abdec8b5fa8462aa016786680720d78bdce7a30c652b7fadf83a4ba35336\",\n                \"sha256:ef8b72fa70b348724ff1218267e7f7375b8de4e8194d1636ee60510aae104cd0\",\n                \"sha256:f0c64d1bd842ca2633e74a1a28033d139368ad959872533b1bab8c80e8240a0c\",\n                \"sha256:f24077a3b5298a5a06a8e0536e3ea9ec60e4c7ac486755e5fb6e6ea9b3500106\",\n                \"sha256:fdd188c8a6ef8769f148f88f859884507b954cc64db6b52f66ef199bb9ad660a\",\n                \"sha256:fe913f20024eb2cb2f323e42a64bdf2911bb9738a15dba7d3cce48151034e3a8\"\n            ],\n            \"markers\": \"python_version >= '3.6'\",\n            \"version\": \"==39.0.1\"\n        },\n        \"cssselect\": {\n            \"hashes\": [\n                \"sha256:666b19839cfaddb9ce9d36bfe4c969132c647b92fc9088c4e23f786b30f1b3dc\",\n                \"sha256:da1885f0c10b60c03ed5eccbb6b68d6eff248d91976fcde348f395d54c9fd35e\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==1.2.0\"\n        },\n        \"docutils\": {\n            \"hashes\": [\n                \"sha256:33995a6753c30b7f577febfc2c50411fec6aac7f7ffeb7c4cfe5991072dcf9e6\",\n                \"sha256:5e1de4d849fee02c63b040a4a3fd567f4ab104defd8a5511fbbc24a8a017efbc\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==0.19\"\n        },\n        \"exceptiongroup\": {\n            \"hashes\": [\n                \"sha256:327cbda3da756e2de031a3107b81ab7b3770a602c4d16ca618298c526f4bec1e\",\n                \"sha256:bcb67d800a4497e1b404c2dd44fca47d3b7a5e5433dbab67f96c1a685cdfdf23\"\n            ],\n            \"markers\": \"python_version < '3.11'\",\n            \"version\": \"==1.1.0\"\n        },\n        \"fake-useragent\": {\n            \"hashes\": [\n                \"sha256:579c72b18ba792a5bd54ba48e63e464d21933e336472c974091a6757f31bfcdc\",\n                \"sha256:9f9b3667d3741ba81e34ebf9a6aa32658ecf7835499257826dd72642af629d59\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.1.1\"\n        },\n        \"idna\": {\n            \"hashes\": [\n                \"sha256:814f528e8dead7d329833b91c5faa87d60bf71824cd12a7530b5526063d02cb4\",\n                \"sha256:90b77e79eaa3eba6de819a0c442c0b4ceefc341a7a2ab77d7562bf49f425c5c2\"\n            ],\n            \"markers\": \"python_version >= '3.5'\",\n            \"version\": \"==3.4\"\n        },\n        \"imagesize\": {\n            \"hashes\": [\n                \"sha256:0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b\",\n                \"sha256:69150444affb9cb0d5cc5a92b3676f0b2fb7cd9ae39e947a5e11a36b4497cd4a\"\n            ],\n            \"markers\": \"python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3'\",\n            \"version\": \"==1.4.1\"\n        },\n        \"importlib-metadata\": {\n            \"hashes\": [\n                \"sha256:7efb448ec9a5e313a57655d35aa54cd3e01b7e1fbcf72dce1bf06119420f5bad\",\n                \"sha256:e354bedeb60efa6affdcc8ae121b73544a7aa74156d047311948f6d711cd378d\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==6.0.0\"\n        },\n        \"iniconfig\": {\n            \"hashes\": [\n                \"sha256:2d91e135bf72d31a410b17c16da610a82cb55f6b0477d1a902134b24a455b8b3\",\n                \"sha256:b6a85871a79d2e3b22d2d1b94ac2824226a63c6b741c88f7ae975f18b6778374\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==2.0.0\"\n        },\n        \"jaraco.classes\": {\n            \"hashes\": [\n                \"sha256:2353de3288bc6b82120752201c6b1c1a14b058267fa424ed5ce5984e3b922158\",\n                \"sha256:89559fa5c1d3c34eff6f631ad80bb21f378dbcbb35dd161fd2c6b93f5be2f98a\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==3.2.3\"\n        },\n        \"jeepney\": {\n            \"hashes\": [\n                \"sha256:5efe48d255973902f6badc3ce55e2aa6c5c3b3bc642059ef3a91247bcfcc5806\",\n                \"sha256:c0a454ad016ca575060802ee4d590dd912e35c122fa04e70306de3d076cce755\"\n            ],\n            \"markers\": \"sys_platform == 'linux'\",\n            \"version\": \"==0.8.0\"\n        },\n        \"jinja2\": {\n            \"hashes\": [\n                \"sha256:31351a702a408a9e7595a8fc6150fc3f43bb6bf7e319770cbc0db9df9437e852\",\n                \"sha256:6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==3.1.2\"\n        },\n        \"keyring\": {\n            \"hashes\": [\n                \"sha256:771ed2a91909389ed6148631de678f82ddc73737d85a927f382a8a1b157898cd\",\n                \"sha256:ba2e15a9b35e21908d0aaf4e0a47acc52d6ae33444df0da2b49d41a46ef6d678\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==23.13.1\"\n        },\n        \"lxml\": {\n            \"hashes\": [\n                \"sha256:01d36c05f4afb8f7c20fd9ed5badca32a2029b93b1750f571ccc0b142531caf7\",\n                \"sha256:04876580c050a8c5341d706dd464ff04fd597095cc8c023252566a8826505726\",\n                \"sha256:05ca3f6abf5cf78fe053da9b1166e062ade3fa5d4f92b4ed688127ea7d7b1d03\",\n                \"sha256:090c6543d3696cbe15b4ac6e175e576bcc3f1ccfbba970061b7300b0c15a2140\",\n                \"sha256:0dc313ef231edf866912e9d8f5a042ddab56c752619e92dfd3a2c277e6a7299a\",\n                \"sha256:0f2b1e0d79180f344ff9f321327b005ca043a50ece8713de61d1cb383fb8ac05\",\n                \"sha256:13598ecfbd2e86ea7ae45ec28a2a54fb87ee9b9fdb0f6d343297d8e548392c03\",\n                \"sha256:16efd54337136e8cd72fb9485c368d91d77a47ee2d42b057564aae201257d419\",\n                \"sha256:1ab8f1f932e8f82355e75dda5413a57612c6ea448069d4fb2e217e9a4bed13d4\",\n                \"sha256:223f4232855ade399bd409331e6ca70fb5578efef22cf4069a6090acc0f53c0e\",\n                \"sha256:2455cfaeb7ac70338b3257f41e21f0724f4b5b0c0e7702da67ee6c3640835b67\",\n                \"sha256:2899456259589aa38bfb018c364d6ae7b53c5c22d8e27d0ec7609c2a1ff78b50\",\n                \"sha256:2a29ba94d065945944016b6b74e538bdb1751a1db6ffb80c9d3c2e40d6fa9894\",\n                \"sha256:2a87fa548561d2f4643c99cd13131acb607ddabb70682dcf1dff5f71f781a4bf\",\n                \"sha256:2e430cd2824f05f2d4f687701144556646bae8f249fd60aa1e4c768ba7018947\",\n                \"sha256:36c3c175d34652a35475a73762b545f4527aec044910a651d2bf50de9c3352b1\",\n                \"sha256:3818b8e2c4b5148567e1b09ce739006acfaa44ce3156f8cbbc11062994b8e8dd\",\n                \"sha256:3ab9fa9d6dc2a7f29d7affdf3edebf6ece6fb28a6d80b14c3b2fb9d39b9322c3\",\n                \"sha256:3efea981d956a6f7173b4659849f55081867cf897e719f57383698af6f618a92\",\n                \"sha256:4c8f293f14abc8fd3e8e01c5bd86e6ed0b6ef71936ded5bf10fe7a5efefbaca3\",\n                \"sha256:5344a43228767f53a9df6e5b253f8cdca7dfc7b7aeae52551958192f56d98457\",\n                \"sha256:58bfa3aa19ca4c0f28c5dde0ff56c520fbac6f0daf4fac66ed4c8d2fb7f22e74\",\n                \"sha256:5b4545b8a40478183ac06c073e81a5ce4cf01bf1734962577cf2bb569a5b3bbf\",\n                \"sha256:5f50a1c177e2fa3ee0667a5ab79fdc6b23086bc8b589d90b93b4bd17eb0e64d1\",\n                \"sha256:63da2ccc0857c311d764e7d3d90f429c252e83b52d1f8f1d1fe55be26827d1f4\",\n                \"sha256:6749649eecd6a9871cae297bffa4ee76f90b4504a2a2ab528d9ebe912b101975\",\n                \"sha256:6804daeb7ef69e7b36f76caddb85cccd63d0c56dedb47555d2fc969e2af6a1a5\",\n                \"sha256:689bb688a1db722485e4610a503e3e9210dcc20c520b45ac8f7533c837be76fe\",\n                \"sha256:699a9af7dffaf67deeae27b2112aa06b41c370d5e7633e0ee0aea2e0b6c211f7\",\n                \"sha256:6b418afe5df18233fc6b6093deb82a32895b6bb0b1155c2cdb05203f583053f1\",\n                \"sha256:76cf573e5a365e790396a5cc2b909812633409306c6531a6877c59061e42c4f2\",\n                \"sha256:7b515674acfdcadb0eb5d00d8a709868173acece5cb0be3dd165950cbfdf5409\",\n                \"sha256:7b770ed79542ed52c519119473898198761d78beb24b107acf3ad65deae61f1f\",\n                \"sha256:7d2278d59425777cfcb19735018d897ca8303abe67cc735f9f97177ceff8027f\",\n                \"sha256:7e91ee82f4199af8c43d8158024cbdff3d931df350252288f0d4ce656df7f3b5\",\n                \"sha256:821b7f59b99551c69c85a6039c65b75f5683bdc63270fec660f75da67469ca24\",\n                \"sha256:822068f85e12a6e292803e112ab876bc03ed1f03dddb80154c395f891ca6b31e\",\n                \"sha256:8340225bd5e7a701c0fa98284c849c9b9fc9238abf53a0ebd90900f25d39a4e4\",\n                \"sha256:85cabf64adec449132e55616e7ca3e1000ab449d1d0f9d7f83146ed5bdcb6d8a\",\n                \"sha256:880bbbcbe2fca64e2f4d8e04db47bcdf504936fa2b33933efd945e1b429bea8c\",\n                \"sha256:8d0b4612b66ff5d62d03bcaa043bb018f74dfea51184e53f067e6fdcba4bd8de\",\n                \"sha256:8e20cb5a47247e383cf4ff523205060991021233ebd6f924bca927fcf25cf86f\",\n                \"sha256:925073b2fe14ab9b87e73f9a5fde6ce6392da430f3004d8b72cc86f746f5163b\",\n                \"sha256:998c7c41910666d2976928c38ea96a70d1aa43be6fe502f21a651e17483a43c5\",\n                \"sha256:9b22c5c66f67ae00c0199f6055705bc3eb3fcb08d03d2ec4059a2b1b25ed48d7\",\n                \"sha256:9f102706d0ca011de571de32c3247c6476b55bb6bc65a20f682f000b07a4852a\",\n                \"sha256:a08cff61517ee26cb56f1e949cca38caabe9ea9fbb4b1e10a805dc39844b7d5c\",\n                \"sha256:a0a336d6d3e8b234a3aae3c674873d8f0e720b76bc1d9416866c41cd9500ffb9\",\n                \"sha256:a35f8b7fa99f90dd2f5dc5a9fa12332642f087a7641289ca6c40d6e1a2637d8e\",\n                \"sha256:a38486985ca49cfa574a507e7a2215c0c780fd1778bb6290c21193b7211702ab\",\n                \"sha256:a5da296eb617d18e497bcf0a5c528f5d3b18dadb3619fbdadf4ed2356ef8d941\",\n                \"sha256:a6e441a86553c310258aca15d1c05903aaf4965b23f3bc2d55f200804e005ee5\",\n                \"sha256:a82d05da00a58b8e4c0008edbc8a4b6ec5a4bc1e2ee0fb6ed157cf634ed7fa45\",\n                \"sha256:ab323679b8b3030000f2be63e22cdeea5b47ee0abd2d6a1dc0c8103ddaa56cd7\",\n                \"sha256:b1f42b6921d0e81b1bcb5e395bc091a70f41c4d4e55ba99c6da2b31626c44892\",\n                \"sha256:b23e19989c355ca854276178a0463951a653309fb8e57ce674497f2d9f208746\",\n                \"sha256:b264171e3143d842ded311b7dccd46ff9ef34247129ff5bf5066123c55c2431c\",\n                \"sha256:b26a29f0b7fc6f0897f043ca366142d2b609dc60756ee6e4e90b5f762c6adc53\",\n                \"sha256:b64d891da92e232c36976c80ed7ebb383e3f148489796d8d31a5b6a677825efe\",\n                \"sha256:b9cc34af337a97d470040f99ba4282f6e6bac88407d021688a5d585e44a23184\",\n                \"sha256:bc718cd47b765e790eecb74d044cc8d37d58562f6c314ee9484df26276d36a38\",\n                \"sha256:be7292c55101e22f2a3d4d8913944cbea71eea90792bf914add27454a13905df\",\n                \"sha256:c83203addf554215463b59f6399835201999b5e48019dc17f182ed5ad87205c9\",\n                \"sha256:c9ec3eaf616d67db0764b3bb983962b4f385a1f08304fd30c7283954e6a7869b\",\n                \"sha256:ca34efc80a29351897e18888c71c6aca4a359247c87e0b1c7ada14f0ab0c0fb2\",\n                \"sha256:ca989b91cf3a3ba28930a9fc1e9aeafc2a395448641df1f387a2d394638943b0\",\n                \"sha256:d02a5399126a53492415d4906ab0ad0375a5456cc05c3fc0fc4ca11771745cda\",\n                \"sha256:d17bc7c2ccf49c478c5bdd447594e82692c74222698cfc9b5daae7ae7e90743b\",\n                \"sha256:d5bf6545cd27aaa8a13033ce56354ed9e25ab0e4ac3b5392b763d8d04b08e0c5\",\n                \"sha256:d6b430a9938a5a5d85fc107d852262ddcd48602c120e3dbb02137c83d212b380\",\n                \"sha256:da248f93f0418a9e9d94b0080d7ebc407a9a5e6d0b57bb30db9b5cc28de1ad33\",\n                \"sha256:da4dd7c9c50c059aba52b3524f84d7de956f7fef88f0bafcf4ad7dde94a064e8\",\n                \"sha256:df0623dcf9668ad0445e0558a21211d4e9a149ea8f5666917c8eeec515f0a6d1\",\n                \"sha256:e5168986b90a8d1f2f9dc1b841467c74221bd752537b99761a93d2d981e04889\",\n                \"sha256:efa29c2fe6b4fdd32e8ef81c1528506895eca86e1d8c4657fda04c9b3786ddf9\",\n                \"sha256:f1496ea22ca2c830cbcbd473de8f114a320da308438ae65abad6bab7867fe38f\",\n                \"sha256:f49e52d174375a7def9915c9f06ec4e569d235ad428f70751765f48d5926678c\"\n            ],\n            \"markers\": \"python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3, 3.4'\",\n            \"version\": \"==4.9.2\"\n        },\n        \"markdown-it-py\": {\n            \"hashes\": [\n                \"sha256:5a35f8d1870171d9acc47b99612dc146129b631baf04970128b568f190d0cc30\",\n                \"sha256:7c9a5e412688bc771c67432cbfebcdd686c93ce6484913dccf06cb5a0bea35a1\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==2.2.0\"\n        },\n        \"markupsafe\": {\n            \"hashes\": [\n                \"sha256:0576fe974b40a400449768941d5d0858cc624e3249dfd1e0c33674e5c7ca7aed\",\n                \"sha256:085fd3201e7b12809f9e6e9bc1e5c96a368c8523fad5afb02afe3c051ae4afcc\",\n                \"sha256:090376d812fb6ac5f171e5938e82e7f2d7adc2b629101cec0db8b267815c85e2\",\n                \"sha256:0b462104ba25f1ac006fdab8b6a01ebbfbce9ed37fd37fd4acd70c67c973e460\",\n                \"sha256:137678c63c977754abe9086a3ec011e8fd985ab90631145dfb9294ad09c102a7\",\n                \"sha256:1bea30e9bf331f3fef67e0a3877b2288593c98a21ccb2cf29b74c581a4eb3af0\",\n                \"sha256:22152d00bf4a9c7c83960521fc558f55a1adbc0631fbb00a9471e097b19d72e1\",\n                \"sha256:22731d79ed2eb25059ae3df1dfc9cb1546691cc41f4e3130fe6bfbc3ecbbecfa\",\n                \"sha256:2298c859cfc5463f1b64bd55cb3e602528db6fa0f3cfd568d3605c50678f8f03\",\n                \"sha256:28057e985dace2f478e042eaa15606c7efccb700797660629da387eb289b9323\",\n                \"sha256:2e7821bffe00aa6bd07a23913b7f4e01328c3d5cc0b40b36c0bd81d362faeb65\",\n                \"sha256:2ec4f2d48ae59bbb9d1f9d7efb9236ab81429a764dedca114f5fdabbc3788013\",\n                \"sha256:340bea174e9761308703ae988e982005aedf427de816d1afe98147668cc03036\",\n                \"sha256:40627dcf047dadb22cd25ea7ecfe9cbf3bbbad0482ee5920b582f3809c97654f\",\n                \"sha256:40dfd3fefbef579ee058f139733ac336312663c6706d1163b82b3003fb1925c4\",\n                \"sha256:4cf06cdc1dda95223e9d2d3c58d3b178aa5dacb35ee7e3bbac10e4e1faacb419\",\n                \"sha256:50c42830a633fa0cf9e7d27664637532791bfc31c731a87b202d2d8ac40c3ea2\",\n                \"sha256:55f44b440d491028addb3b88f72207d71eeebfb7b5dbf0643f7c023ae1fba619\",\n                \"sha256:608e7073dfa9e38a85d38474c082d4281f4ce276ac0010224eaba11e929dd53a\",\n                \"sha256:63ba06c9941e46fa389d389644e2d8225e0e3e5ebcc4ff1ea8506dce646f8c8a\",\n                \"sha256:65608c35bfb8a76763f37036547f7adfd09270fbdbf96608be2bead319728fcd\",\n                \"sha256:665a36ae6f8f20a4676b53224e33d456a6f5a72657d9c83c2aa00765072f31f7\",\n                \"sha256:6d6607f98fcf17e534162f0709aaad3ab7a96032723d8ac8750ffe17ae5a0666\",\n                \"sha256:7313ce6a199651c4ed9d7e4cfb4aa56fe923b1adf9af3b420ee14e6d9a73df65\",\n                \"sha256:7668b52e102d0ed87cb082380a7e2e1e78737ddecdde129acadb0eccc5423859\",\n                \"sha256:7df70907e00c970c60b9ef2938d894a9381f38e6b9db73c5be35e59d92e06625\",\n                \"sha256:7e007132af78ea9df29495dbf7b5824cb71648d7133cf7848a2a5dd00d36f9ff\",\n                \"sha256:835fb5e38fd89328e9c81067fd642b3593c33e1e17e2fdbf77f5676abb14a156\",\n                \"sha256:8bca7e26c1dd751236cfb0c6c72d4ad61d986e9a41bbf76cb445f69488b2a2bd\",\n                \"sha256:8db032bf0ce9022a8e41a22598eefc802314e81b879ae093f36ce9ddf39ab1ba\",\n                \"sha256:99625a92da8229df6d44335e6fcc558a5037dd0a760e11d84be2260e6f37002f\",\n                \"sha256:9cad97ab29dfc3f0249b483412c85c8ef4766d96cdf9dcf5a1e3caa3f3661cf1\",\n                \"sha256:a4abaec6ca3ad8660690236d11bfe28dfd707778e2442b45addd2f086d6ef094\",\n                \"sha256:a6e40afa7f45939ca356f348c8e23048e02cb109ced1eb8420961b2f40fb373a\",\n                \"sha256:a6f2fcca746e8d5910e18782f976489939d54a91f9411c32051b4aab2bd7c513\",\n                \"sha256:a806db027852538d2ad7555b203300173dd1b77ba116de92da9afbc3a3be3eed\",\n                \"sha256:abcabc8c2b26036d62d4c746381a6f7cf60aafcc653198ad678306986b09450d\",\n                \"sha256:b8526c6d437855442cdd3d87eede9c425c4445ea011ca38d937db299382e6fa3\",\n                \"sha256:bb06feb762bade6bf3c8b844462274db0c76acc95c52abe8dbed28ae3d44a147\",\n                \"sha256:c0a33bc9f02c2b17c3ea382f91b4db0e6cde90b63b296422a939886a7a80de1c\",\n                \"sha256:c4a549890a45f57f1ebf99c067a4ad0cb423a05544accaf2b065246827ed9603\",\n                \"sha256:ca244fa73f50a800cf8c3ebf7fd93149ec37f5cb9596aa8873ae2c1d23498601\",\n                \"sha256:cf877ab4ed6e302ec1d04952ca358b381a882fbd9d1b07cccbfd61783561f98a\",\n                \"sha256:d9d971ec1e79906046aa3ca266de79eac42f1dbf3612a05dc9368125952bd1a1\",\n                \"sha256:da25303d91526aac3672ee6d49a2f3db2d9502a4a60b55519feb1a4c7714e07d\",\n                \"sha256:e55e40ff0cc8cc5c07996915ad367fa47da6b3fc091fdadca7f5403239c5fec3\",\n                \"sha256:f03a532d7dee1bed20bc4884194a16160a2de9ffc6354b3878ec9682bb623c54\",\n                \"sha256:f1cd098434e83e656abf198f103a8207a8187c0fc110306691a2e94a78d0abb2\",\n                \"sha256:f2bfb563d0211ce16b63c7cb9395d2c682a23187f54c3d79bfec33e6705473c6\",\n                \"sha256:f8ffb705ffcf5ddd0e80b65ddf7bed7ee4f5a441ea7d3419e861a12eaf41af58\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==2.1.2\"\n        },\n        \"mdurl\": {\n            \"hashes\": [\n                \"sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8\",\n                \"sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==0.1.2\"\n        },\n        \"more-itertools\": {\n            \"hashes\": [\n                \"sha256:250e83d7e81d0c87ca6bd942e6aeab8cc9daa6096d12c5308f3f92fa5e5c1f41\",\n                \"sha256:5a6257e40878ef0520b1803990e3e22303a41b5714006c32a3fd8304b26ea1ab\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==9.0.0\"\n        },\n        \"mypy\": {\n            \"hashes\": [\n                \"sha256:0af4f0e20706aadf4e6f8f8dc5ab739089146b83fd53cb4a7e0e850ef3de0bb6\",\n                \"sha256:15b5a824b58c7c822c51bc66308e759243c32631896743f030daf449fe3677f3\",\n                \"sha256:17455cda53eeee0a4adb6371a21dd3dbf465897de82843751cf822605d152c8c\",\n                \"sha256:2013226d17f20468f34feddd6aae4635a55f79626549099354ce641bc7d40262\",\n                \"sha256:24189f23dc66f83b839bd1cce2dfc356020dfc9a8bae03978477b15be61b062e\",\n                \"sha256:27a0f74a298769d9fdc8498fcb4f2beb86f0564bcdb1a37b58cbbe78e55cf8c0\",\n                \"sha256:28cea5a6392bb43d266782983b5a4216c25544cd7d80be681a155ddcdafd152d\",\n                \"sha256:448de661536d270ce04f2d7dddaa49b2fdba6e3bd8a83212164d4174ff43aa65\",\n                \"sha256:48525aec92b47baed9b3380371ab8ab6e63a5aab317347dfe9e55e02aaad22e8\",\n                \"sha256:5bc8d6bd3b274dd3846597855d96d38d947aedba18776aa998a8d46fabdaed76\",\n                \"sha256:5deb252fd42a77add936b463033a59b8e48eb2eaec2976d76b6878d031933fe4\",\n                \"sha256:5f546ac34093c6ce33f6278f7c88f0f147a4849386d3bf3ae193702f4fe31407\",\n                \"sha256:5fdd63e4f50e3538617887e9aee91855368d9fc1dea30da743837b0df7373bc4\",\n                \"sha256:65b122a993d9c81ea0bfde7689b3365318a88bde952e4dfa1b3a8b4ac05d168b\",\n                \"sha256:71a808334d3f41ef011faa5a5cd8153606df5fc0b56de5b2e89566c8093a0c9a\",\n                \"sha256:920169f0184215eef19294fa86ea49ffd4635dedfdea2b57e45cb4ee85d5ccaf\",\n                \"sha256:93a85495fb13dc484251b4c1fd7a5ac370cd0d812bbfc3b39c1bafefe95275d5\",\n                \"sha256:a2948c40a7dd46c1c33765718936669dc1f628f134013b02ff5ac6c7ef6942bf\",\n                \"sha256:c6c2ccb7af7154673c591189c3687b013122c5a891bb5651eca3db8e6c6c55bd\",\n                \"sha256:c96b8a0c019fe29040d520d9257d8c8f122a7343a8307bf8d6d4a43f5c5bfcc8\",\n                \"sha256:d42a98e76070a365a1d1c220fcac8aa4ada12ae0db679cb4d910fabefc88b994\",\n                \"sha256:dbeb24514c4acbc78d205f85dd0e800f34062efcc1f4a4857c57e4b4b8712bff\",\n                \"sha256:e60d0b09f62ae97a94605c3f73fd952395286cf3e3b9e7b97f60b01ddfbbda88\",\n                \"sha256:e64f48c6176e243ad015e995de05af7f22bbe370dbb5b32bd6988438ec873919\",\n                \"sha256:e831662208055b006eef68392a768ff83596035ffd6d846786578ba1714ba8f6\",\n                \"sha256:eda5c8b9949ed411ff752b9a01adda31afe7eae1e53e946dbdf9db23865e66c4\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.0.1\"\n        },\n        \"mypy-extensions\": {\n            \"hashes\": [\n                \"sha256:4392f6c0eb8a5668a69e23d168ffa70f0be9ccfd32b5cc2d26a34ae5b844552d\",\n                \"sha256:75dbf8955dc00442a438fc4d0666508a9a97b6bd41aa2f0ffe9d2f2725af0782\"\n            ],\n            \"markers\": \"python_version >= '3.5'\",\n            \"version\": \"==1.0.0\"\n        },\n        \"packaging\": {\n            \"hashes\": [\n                \"sha256:714ac14496c3e68c99c29b00845f7a2b85f3bb6f1078fd9f72fd20f0570002b2\",\n                \"sha256:b6ad297f8907de0fa2fe1ccbd26fdaf387f5f47c7275fedf8cce89f99446cf97\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==23.0\"\n        },\n        \"parse\": {\n            \"hashes\": [\n                \"sha256:9ff82852bcb65d139813e2a5197627a94966245c897796760a3a2a8eb66f020b\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.19.0\"\n        },\n        \"pkginfo\": {\n            \"hashes\": [\n                \"sha256:4b7a555a6d5a22169fcc9cf7bfd78d296b0361adad412a346c1226849af5e546\",\n                \"sha256:8fd5896e8718a4372f0ea9cc9d96f6417c9b986e23a4d116dda26b62cc29d046\"\n            ],\n            \"markers\": \"python_version >= '3.6'\",\n            \"version\": \"==1.9.6\"\n        },\n        \"pluggy\": {\n            \"hashes\": [\n                \"sha256:4224373bacce55f955a878bf9cfa763c1e360858e330072059e10bad68531159\",\n                \"sha256:74134bbf457f031a36d68416e1509f34bd5ccc019f0bcc952c7b909d06b37bd3\"\n            ],\n            \"markers\": \"python_version >= '3.6'\",\n            \"version\": \"==1.0.0\"\n        },\n        \"pycparser\": {\n            \"hashes\": [\n                \"sha256:8ee45429555515e1f6b185e78100aea234072576aa43ab53aefcae078162fca9\",\n                \"sha256:e644fdec12f7872f86c58ff790da456218b10f863970249516d60a5eaca77206\"\n            ],\n            \"version\": \"==2.21\"\n        },\n        \"pyee\": {\n            \"hashes\": [\n                \"sha256:5c7e60f8df95710dbe17550e16ce0153f83990c00ef744841b43f371ed53ebea\",\n                \"sha256:c09f56e36eb10bf23aa2aacf145f690ded75b990a3d9523fd478b005940303d2\"\n            ],\n            \"version\": \"==8.2.2\"\n        },\n        \"pygments\": {\n            \"hashes\": [\n                \"sha256:b3ed06a9e8ac9a9aae5a6f5dbe78a8a58655d17b43b93c078f094ddc476ae297\",\n                \"sha256:fa7bd7bd2771287c0de303af8bfdfc731f51bd2c6a47ab69d117138893b82717\"\n            ],\n            \"markers\": \"python_version >= '3.6'\",\n            \"version\": \"==2.14.0\"\n        },\n        \"pyppeteer\": {\n            \"hashes\": [\n                \"sha256:11a734d8f02c6b128035aba8faf32748f2016310a6a1cbc6aa5b1e2580742e8f\",\n                \"sha256:ddb0d15cb644720160d49abb1ad0d97e87a55581febf1b7531be9e983aad7742\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.0.2\"\n        },\n        \"pyquery\": {\n            \"hashes\": [\n                \"sha256:8dfc9b4b7c5f877d619bbae74b1898d5743f6ca248cfd5d72b504dd614da312f\",\n                \"sha256:963e8d4e90262ff6d8dec072ea97285dc374a2f69cad7776f4082abcf6a1d8ae\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.0.0\"\n        },\n        \"pytest\": {\n            \"hashes\": [\n                \"sha256:c7c6ca206e93355074ae32f7403e8ea12163b1163c976fee7d4d84027c162be5\",\n                \"sha256:d45e0952f3727241918b8fd0f376f5ff6b301cc0777c6f9a556935c92d8a7d42\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==7.2.1\"\n        },\n        \"pytest-asyncio\": {\n            \"hashes\": [\n                \"sha256:83cbf01169ce3e8eb71c6c278ccb0574d1a7a3bb8eaaf5e50e0ad342afb33b36\",\n                \"sha256:f129998b209d04fcc65c96fc85c11e5316738358909a8399e93be553d7656442\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==0.20.3\"\n        },\n        \"pytz\": {\n            \"hashes\": [\n                \"sha256:01a0681c4b9684a28304615eba55d1ab31ae00bf68ec157ec3708a8182dbbcd0\",\n                \"sha256:78f4f37d8198e0627c5f1143240bb0206b8691d8d7ac6d78fee88b78733f8c4a\"\n            ],\n            \"version\": \"==2022.7.1\"\n        },\n        \"readme-renderer\": {\n            \"hashes\": [\n                \"sha256:cd653186dfc73055656f090f227f5cb22a046d7f71a841dfa305f55c9a513273\",\n                \"sha256:f67a16caedfa71eef48a31b39708637a6f4664c4394801a7b0d6432d13907343\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==37.3\"\n        },\n        \"requests\": {\n            \"hashes\": [\n                \"sha256:64299f4909223da747622c030b781c0d7811e359c37124b4bd368fb8c6518baa\",\n                \"sha256:98b1b2782e3c6c4904938b84c0eb932721069dfdb9134313beff7c83c2df24bf\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.28.2\"\n        },\n        \"requests-file\": {\n            \"hashes\": [\n                \"sha256:07d74208d3389d01c38ab89ef403af0cfec63957d53a0081d8eca738d0247d8e\",\n                \"sha256:dfe5dae75c12481f68ba353183c53a65e6044c923e64c24b2209f6c7570ca953\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.5.1\"\n        },\n        \"requests-html\": {\n            \"editable\": true,\n            \"path\": \".\"\n        },\n        \"requests-toolbelt\": {\n            \"hashes\": [\n                \"sha256:18565aa58116d9951ac39baa288d3adb5b3ff975c4f25eee78555d89e8f247f7\",\n                \"sha256:62e09f7ff5ccbda92772a29f394a49c3ad6cb181d568b1337626b2abb628a63d\"\n            ],\n            \"markers\": \"python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3'\",\n            \"version\": \"==0.10.1\"\n        },\n        \"rfc3986\": {\n            \"hashes\": [\n                \"sha256:50b1502b60e289cb37883f3dfd34532b8873c7de9f49bb546641ce9cbd256ebd\",\n                \"sha256:97aacf9dbd4bfd829baad6e6309fa6573aaf1be3f6fa735c8ab05e46cecb261c\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.0.0\"\n        },\n        \"rich\": {\n            \"hashes\": [\n                \"sha256:125d96d20c92b946b983d0d392b84ff945461e5a06d3867e9f9e575f8697b67f\",\n                \"sha256:8aa57747f3fc3e977684f0176a88e789be314a99f99b43b75d1e9cb5dc6db9e9\"\n            ],\n            \"markers\": \"python_full_version >= '3.7.0'\",\n            \"version\": \"==13.3.1\"\n        },\n        \"secretstorage\": {\n            \"hashes\": [\n                \"sha256:2403533ef369eca6d2ba81718576c5e0f564d5cca1b58f73a8b23e7d4eeebd77\",\n                \"sha256:f356e6628222568e3af06f2eba8df495efa13b3b63081dafd4f7d9a7b7bc9f99\"\n            ],\n            \"markers\": \"sys_platform == 'linux'\",\n            \"version\": \"==3.3.3\"\n        },\n        \"six\": {\n            \"hashes\": [\n                \"sha256:1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926\",\n                \"sha256:8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254\"\n            ],\n            \"markers\": \"python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2'\",\n            \"version\": \"==1.16.0\"\n        },\n        \"snowballstemmer\": {\n            \"hashes\": [\n                \"sha256:09b16deb8547d3412ad7b590689584cd0fe25ec8db3be37788be3810cbf19cb1\",\n                \"sha256:c8e1716e83cc398ae16824e5572ae04e0d9fc2c6b985fb0f900f5f0c96ecba1a\"\n            ],\n            \"version\": \"==2.2.0\"\n        },\n        \"soupsieve\": {\n            \"hashes\": [\n                \"sha256:49e5368c2cda80ee7e84da9dbe3e110b70a4575f196efb74e51b94549d921955\",\n                \"sha256:e28dba9ca6c7c00173e34e4ba57448f0688bb681b7c5e8bf4971daafc093d69a\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==2.4\"\n        },\n        \"sphinx\": {\n            \"hashes\": [\n                \"sha256:0dac3b698538ffef41716cf97ba26c1c7788dba73ce6f150c1ff5b4720786dd2\",\n                \"sha256:807d1cb3d6be87eb78a381c3e70ebd8d346b9a25f3753e9947e866b2786865fc\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==6.1.3\"\n        },\n        \"sphinxcontrib-applehelp\": {\n            \"hashes\": [\n                \"sha256:29d341f67fb0f6f586b23ad80e072c8e6ad0b48417db2bde114a4c9746feb228\",\n                \"sha256:828f867945bbe39817c210a1abfd1bc4895c8b73fcaade56d45357a348a07d7e\"\n            ],\n            \"markers\": \"python_version >= '3.8'\",\n            \"version\": \"==1.0.4\"\n        },\n        \"sphinxcontrib-devhelp\": {\n            \"hashes\": [\n                \"sha256:8165223f9a335cc1af7ffe1ed31d2871f325254c0423bc0c4c7cd1c1e4734a2e\",\n                \"sha256:ff7f1afa7b9642e7060379360a67e9c41e8f3121f2ce9164266f61b9f4b338e4\"\n            ],\n            \"markers\": \"python_version >= '3.5'\",\n            \"version\": \"==1.0.2\"\n        },\n        \"sphinxcontrib-htmlhelp\": {\n            \"hashes\": [\n                \"sha256:0cbdd302815330058422b98a113195c9249825d681e18f11e8b1f78a2f11efff\",\n                \"sha256:c38cb46dccf316c79de6e5515e1770414b797162b23cd3d06e67020e1d2a6903\"\n            ],\n            \"markers\": \"python_version >= '3.8'\",\n            \"version\": \"==2.0.1\"\n        },\n        \"sphinxcontrib-jsmath\": {\n            \"hashes\": [\n                \"sha256:2ec2eaebfb78f3f2078e73666b1415417a116cc848b72e5172e596c871103178\",\n                \"sha256:a9925e4a4587247ed2191a22df5f6970656cb8ca2bd6284309578f2153e0c4b8\"\n            ],\n            \"markers\": \"python_version >= '3.5'\",\n            \"version\": \"==1.0.1\"\n        },\n        \"sphinxcontrib-qthelp\": {\n            \"hashes\": [\n                \"sha256:4c33767ee058b70dba89a6fc5c1892c0d57a54be67ddd3e7875a18d14cba5a72\",\n                \"sha256:bd9fc24bcb748a8d51fd4ecaade681350aa63009a347a8c14e637895444dfab6\"\n            ],\n            \"markers\": \"python_version >= '3.5'\",\n            \"version\": \"==1.0.3\"\n        },\n        \"sphinxcontrib-serializinghtml\": {\n            \"hashes\": [\n                \"sha256:352a9a00ae864471d3a7ead8d7d79f5fc0b57e8b3f95e9867eb9eb28999b92fd\",\n                \"sha256:aa5f6de5dfdf809ef505c4895e51ef5c9eac17d0f287933eb49ec495280b6952\"\n            ],\n            \"markers\": \"python_version >= '3.5'\",\n            \"version\": \"==1.1.5\"\n        },\n        \"tomli\": {\n            \"hashes\": [\n                \"sha256:939de3e7a6161af0c887ef91b7d41a53e7c5a1ca976325f429cb46ea9bc30ecc\",\n                \"sha256:de526c12914f0c550d15924c62d72abc48d6fe7364aa87328337a31007fe8a4f\"\n            ],\n            \"markers\": \"python_version < '3.11'\",\n            \"version\": \"==2.0.1\"\n        },\n        \"tqdm\": {\n            \"hashes\": [\n                \"sha256:5f4f682a004951c1b450bc753c710e9280c5746ce6ffedee253ddbcbf54cf1e4\",\n                \"sha256:6fee160d6ffcd1b1c68c65f14c829c22832bc401726335ce92c52d395944a6a1\"\n            ],\n            \"markers\": \"python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3'\",\n            \"version\": \"==4.64.1\"\n        },\n        \"twine\": {\n            \"hashes\": [\n                \"sha256:929bc3c280033347a00f847236564d1c52a3e61b1ac2516c97c48f3ceab756d8\",\n                \"sha256:9e102ef5fdd5a20661eb88fad46338806c3bd32cf1db729603fe3697b1bc83c8\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==4.0.2\"\n        },\n        \"typing-extensions\": {\n            \"hashes\": [\n                \"sha256:5cb5f4a79139d699607b3ef622a1dedafa84e115ab0024e0d9c044a9479ca7cb\",\n                \"sha256:fb33085c39dd998ac16d1431ebc293a8b3eedd00fd4a32de0ff79002c19511b4\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==4.5.0\"\n        },\n        \"urllib3\": {\n            \"hashes\": [\n                \"sha256:076907bf8fd355cde77728471316625a4d2f7e713c125f51953bb5b3eecf4f72\",\n                \"sha256:75edcdc2f7d85b137124a6c3c9fc3933cdeaa12ecb9a6a959f22797a0feca7e1\"\n            ],\n            \"markers\": \"python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3, 3.4, 3.5'\",\n            \"version\": \"==1.26.14\"\n        },\n        \"w3lib\": {\n            \"hashes\": [\n                \"sha256:0e1198f1b745195b6b3dd1a4cd66011fbf82f30a4d9dabaee1f9e5c86f020274\",\n                \"sha256:7fd5bd7980a95d1a8185e867d05f68a591aa281a3ded4590d2641d7b09086ed4\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.1.1\"\n        },\n        \"webencodings\": {\n            \"hashes\": [\n                \"sha256:a0af1213f3c2226497a97e2b3aa01a7e4bee4f403f95be16fc9acd2947514a78\",\n                \"sha256:b36a1c245f2d304965eb4e0a82848379241dc04b865afcc4aab16748587e1923\"\n            ],\n            \"version\": \"==0.5.1\"\n        },\n        \"websockets\": {\n            \"hashes\": [\n                \"sha256:00213676a2e46b6ebf6045bc11d0f529d9120baa6f58d122b4021ad92adabd41\",\n                \"sha256:00c870522cdb69cd625b93f002961ffb0c095394f06ba8c48f17eef7c1541f96\",\n                \"sha256:0154f7691e4fe6c2b2bc275b5701e8b158dae92a1ab229e2b940efe11905dff4\",\n                \"sha256:05a7233089f8bd355e8cbe127c2e8ca0b4ea55467861906b80d2ebc7db4d6b72\",\n                \"sha256:09a1814bb15eff7069e51fed0826df0bc0702652b5cb8f87697d469d79c23576\",\n                \"sha256:0cff816f51fb33c26d6e2b16b5c7d48eaa31dae5488ace6aae468b361f422b63\",\n                \"sha256:185929b4808b36a79c65b7865783b87b6841e852ef5407a2fb0c03381092fa3b\",\n                \"sha256:2fc8709c00704194213d45e455adc106ff9e87658297f72d544220e32029cd3d\",\n                \"sha256:33d69ca7612f0ddff3316b0c7b33ca180d464ecac2d115805c044bf0a3b0d032\",\n                \"sha256:389f8dbb5c489e305fb113ca1b6bdcdaa130923f77485db5b189de343a179393\",\n                \"sha256:38ea7b82bfcae927eeffc55d2ffa31665dc7fec7b8dc654506b8e5a518eb4d50\",\n                \"sha256:3d3cac3e32b2c8414f4f87c1b2ab686fa6284a980ba283617404377cd448f631\",\n                \"sha256:40e826de3085721dabc7cf9bfd41682dadc02286d8cf149b3ad05bff89311e4f\",\n                \"sha256:4239b6027e3d66a89446908ff3027d2737afc1a375f8fd3eea630a4842ec9a0c\",\n                \"sha256:45ec8e75b7dbc9539cbfafa570742fe4f676eb8b0d3694b67dabe2f2ceed8aa6\",\n                \"sha256:47a2964021f2110116cc1125b3e6d87ab5ad16dea161949e7244ec583b905bb4\",\n                \"sha256:48c08473563323f9c9debac781ecf66f94ad5a3680a38fe84dee5388cf5acaf6\",\n                \"sha256:4c6d2264f485f0b53adf22697ac11e261ce84805c232ed5dbe6b1bcb84b00ff0\",\n                \"sha256:4f72e5cd0f18f262f5da20efa9e241699e0cf3a766317a17392550c9ad7b37d8\",\n                \"sha256:56029457f219ade1f2fc12a6504ea61e14ee227a815531f9738e41203a429112\",\n                \"sha256:5c1289596042fad2cdceb05e1ebf7aadf9995c928e0da2b7a4e99494953b1b94\",\n                \"sha256:62e627f6b6d4aed919a2052efc408da7a545c606268d5ab5bfab4432734b82b4\",\n                \"sha256:74de2b894b47f1d21cbd0b37a5e2b2392ad95d17ae983e64727e18eb281fe7cb\",\n                \"sha256:7c584f366f46ba667cfa66020344886cf47088e79c9b9d39c84ce9ea98aaa331\",\n                \"sha256:7d27a7e34c313b3a7f91adcd05134315002aaf8540d7b4f90336beafaea6217c\",\n                \"sha256:7d3f0b61c45c3fa9a349cf484962c559a8a1d80dae6977276df8fd1fa5e3cb8c\",\n                \"sha256:82ff5e1cae4e855147fd57a2863376ed7454134c2bf49ec604dfe71e446e2193\",\n                \"sha256:84bc2a7d075f32f6ed98652db3a680a17a4edb21ca7f80fe42e38753a58ee02b\",\n                \"sha256:884be66c76a444c59f801ac13f40c76f176f1bfa815ef5b8ed44321e74f1600b\",\n                \"sha256:8a5cc00546e0a701da4639aa0bbcb0ae2bb678c87f46da01ac2d789e1f2d2038\",\n                \"sha256:8dc96f64ae43dde92530775e9cb169979f414dcf5cff670455d81a6823b42089\",\n                \"sha256:8f38706e0b15d3c20ef6259fd4bc1700cd133b06c3c1bb108ffe3f8947be15fa\",\n                \"sha256:90fcf8929836d4a0e964d799a58823547df5a5e9afa83081761630553be731f9\",\n                \"sha256:931c039af54fc195fe6ad536fde4b0de04da9d5916e78e55405436348cfb0e56\",\n                \"sha256:932af322458da7e4e35df32f050389e13d3d96b09d274b22a7aa1808f292fee4\",\n                \"sha256:942de28af58f352a6f588bc72490ae0f4ccd6dfc2bd3de5945b882a078e4e179\",\n                \"sha256:9bc42e8402dc5e9905fb8b9649f57efcb2056693b7e88faa8fb029256ba9c68c\",\n                \"sha256:a7a240d7a74bf8d5cb3bfe6be7f21697a28ec4b1a437607bae08ac7acf5b4882\",\n                \"sha256:a9f9a735deaf9a0cadc2d8c50d1a5bcdbae8b6e539c6e08237bc4082d7c13f28\",\n                \"sha256:ae5e95cfb53ab1da62185e23b3130e11d64431179debac6dc3c6acf08760e9b1\",\n                \"sha256:b029fb2032ae4724d8ae8d4f6b363f2cc39e4c7b12454df8df7f0f563ed3e61a\",\n                \"sha256:b0d15c968ea7a65211e084f523151dbf8ae44634de03c801b8bd070b74e85033\",\n                \"sha256:b343f521b047493dc4022dd338fc6db9d9282658862756b4f6fd0e996c1380e1\",\n                \"sha256:b627c266f295de9dea86bd1112ed3d5fafb69a348af30a2422e16590a8ecba13\",\n                \"sha256:b9968694c5f467bf67ef97ae7ad4d56d14be2751000c1207d31bf3bb8860bae8\",\n                \"sha256:ba089c499e1f4155d2a3c2a05d2878a3428cf321c848f2b5a45ce55f0d7d310c\",\n                \"sha256:bbccd847aa0c3a69b5f691a84d2341a4f8a629c6922558f2a70611305f902d74\",\n                \"sha256:bc0b82d728fe21a0d03e65f81980abbbcb13b5387f733a1a870672c5be26edab\",\n                \"sha256:c57e4c1349fbe0e446c9fa7b19ed2f8a4417233b6984277cce392819123142d3\",\n                \"sha256:c94ae4faf2d09f7c81847c63843f84fe47bf6253c9d60b20f25edfd30fb12588\",\n                \"sha256:c9b27d6c1c6cd53dc93614967e9ce00ae7f864a2d9f99fe5ed86706e1ecbf485\",\n                \"sha256:d210abe51b5da0ffdbf7b43eed0cfdff8a55a1ab17abbec4301c9ff077dd0342\",\n                \"sha256:d58804e996d7d2307173d56c297cf7bc132c52df27a3efaac5e8d43e36c21c48\",\n                \"sha256:d6a4162139374a49eb18ef5b2f4da1dd95c994588f5033d64e0bbfda4b6b6fcf\",\n                \"sha256:da39dd03d130162deb63da51f6e66ed73032ae62e74aaccc4236e30edccddbb0\",\n                \"sha256:db3c336f9eda2532ec0fd8ea49fef7a8df8f6c804cdf4f39e5c5c0d4a4ad9a7a\",\n                \"sha256:dd500e0a5e11969cdd3320935ca2ff1e936f2358f9c2e61f100a1660933320ea\",\n                \"sha256:dd9becd5fe29773d140d68d607d66a38f60e31b86df75332703757ee645b6faf\",\n                \"sha256:e0cb5cc6ece6ffa75baccfd5c02cffe776f3f5c8bf486811f9d3ea3453676ce8\",\n                \"sha256:e23173580d740bf8822fd0379e4bf30aa1d5a92a4f252d34e893070c081050df\",\n                \"sha256:e3a686ecb4aa0d64ae60c9c9f1a7d5d46cab9bfb5d91a2d303d00e2cd4c4c5cc\",\n                \"sha256:e789376b52c295c4946403bd0efecf27ab98f05319df4583d3c48e43c7342c2f\",\n                \"sha256:edc344de4dac1d89300a053ac973299e82d3db56330f3494905643bb68801269\",\n                \"sha256:eef610b23933c54d5d921c92578ae5f89813438fded840c2e9809d378dc765d3\",\n                \"sha256:f2c38d588887a609191d30e902df2a32711f708abfd85d318ca9b367258cfd0c\",\n                \"sha256:f55b5905705725af31ccef50e55391621532cd64fbf0bc6f4bac935f0fccec46\",\n                \"sha256:f5fc088b7a32f244c519a048c170f14cf2251b849ef0e20cbbb0fdf0fdaf556f\",\n                \"sha256:fe10ddc59b304cb19a1bdf5bd0a7719cbbc9fbdd57ac80ed436b709fcf889106\",\n                \"sha256:ff64a1d38d156d429404aaa84b27305e957fd10c30e5880d1765c9480bea490f\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==10.4\"\n        },\n        \"white\": {\n            \"hashes\": [\n                \"sha256:45e2c7f54de1facc60bf0a726b480cdc43422aad57c3a0bc5ba54cb536696683\",\n                \"sha256:bca98066256cfff6fb85ec36b95cc5913c888c170a8407c340786972b06c6f8f\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==0.1.2\"\n        },\n        \"zipp\": {\n            \"hashes\": [\n                \"sha256:112929ad649da941c23de50f356a2b5570c954b65150642bccdd66bf194d224b\",\n                \"sha256:48904fc76a60e542af151aded95726c1a5c34ed43ab4134b597665c86d7ad556\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==3.15.0\"\n        }\n    }\n}\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 19.2041015625,
          "content": "Requests-HTML: HTML Parsing for Humans™\n=======================================\n\n.. image:: https://farm5.staticflickr.com/4695/39152770914_a3ab8af40d_k_d.jpg\n\n.. image:: https://travis-ci.com/psf/requests-html.svg?branch=master\n    :target: https://travis-ci.com/psf/requests-html\n\nThis library intends to make parsing HTML (e.g. scraping the web) as\nsimple and intuitive as possible.\n\nWhen using this library you automatically get:\n\n- **Full JavaScript support**! (Using Chromium, thanks to pyppeteer)\n- *CSS Selectors* (a.k.a jQuery-style, thanks to PyQuery).\n- *XPath Selectors*, for the faint of heart.\n- Mocked user-agent (like a real web browser).\n- Automatic following of redirects.\n- Connection–pooling and cookie persistence.\n- The Requests experience you know and love, with magical parsing abilities.\n- **Async Support**\n\n.. Other nice features include:\n\n    - Markdown export of pages and elements.\n\n\nTutorial & Usage\n================\n\nMake a GET request to 'python.org', using Requests:\n\n.. code-block:: pycon\n\n    >>> from requests_html import HTMLSession\n    >>> session = HTMLSession()\n    >>> r = session.get('https://python.org/')\n\nTry async and get some sites at the same time:\n\n.. code-block:: pycon\n\n    >>> from requests_html import AsyncHTMLSession\n    >>> asession = AsyncHTMLSession()\n    >>> async def get_pythonorg():\n    ...     r = await asession.get('https://python.org/')\n    ...     return r\n    ...\n    >>> async def get_reddit():\n    ...    r = await asession.get('https://reddit.com/')\n    ...    return r\n    ...\n    >>> async def get_google():\n    ...    r = await asession.get('https://google.com/')\n    ...    return r\n    ...\n    >>> results = asession.run(get_pythonorg, get_reddit, get_google)\n    >>> results # check the requests all returned a 200 (success) code\n    [<Response [200]>, <Response [200]>, <Response [200]>]\n    >>> # Each item in the results list is a response object and can be interacted with as such\n    >>> for result in results: \n    ...     print(result.html.url)\n    ... \n    https://www.python.org/\n    https://www.google.com/\n    https://www.reddit.com/\n\nNote that the order of the objects in the results list represents the order they were returned in, not the order that the coroutines are passed to the ``run`` method, which is shown in the example by the order being different. \n\nGrab a list of all links on the page, as–is (anchors excluded):\n\n.. code-block:: pycon\n\n    >>> r.html.links\n    {'//docs.python.org/3/tutorial/', '/about/apps/', 'https://github.com/python/pythondotorg/issues', '/accounts/login/', '/dev/peps/', '/about/legal/', '//docs.python.org/3/tutorial/introduction.html#lists', '/download/alternatives', 'http://feedproxy.google.com/~r/PythonInsider/~3/kihd2DW98YY/python-370a4-is-available-for-testing.html', '/download/other/', '/downloads/windows/', 'https://mail.python.org/mailman/listinfo/python-dev', '/doc/av', 'https://devguide.python.org/', '/about/success/#engineering', 'https://wiki.python.org/moin/PythonEventsCalendar#Submitting_an_Event', 'https://www.openstack.org', '/about/gettingstarted/', 'http://feedproxy.google.com/~r/PythonInsider/~3/AMoBel8b8Mc/python-3.html', '/success-stories/industrial-light-magic-runs-python/', 'http://docs.python.org/3/tutorial/introduction.html#using-python-as-a-calculator', '/', 'http://pyfound.blogspot.com/', '/events/python-events/past/', '/downloads/release/python-2714/', 'https://wiki.python.org/moin/PythonBooks', 'http://plus.google.com/+Python', 'https://wiki.python.org/moin/', 'https://status.python.org/', '/community/workshops/', '/community/lists/', 'http://buildbot.net/', '/community/awards', 'http://twitter.com/ThePSF', 'https://docs.python.org/3/license.html', '/psf/donations/', 'http://wiki.python.org/moin/Languages', '/dev/', '/events/python-user-group/', 'https://wiki.qt.io/PySide', '/community/sigs/', 'https://wiki.gnome.org/Projects/PyGObject', 'http://www.ansible.com', 'http://www.saltstack.com', 'http://planetpython.org/', '/events/python-events', '/about/help/', '/events/python-user-group/past/', '/about/success/', '/psf-landing/', '/about/apps', '/about/', 'http://www.wxpython.org/', '/events/python-user-group/665/', 'https://www.python.org/psf/codeofconduct/', '/dev/peps/peps.rss', '/downloads/source/', '/psf/sponsorship/sponsors/', 'http://bottlepy.org', 'http://roundup.sourceforge.net/', 'http://pandas.pydata.org/', 'http://brochure.getpython.info/', 'https://bugs.python.org/', '/community/merchandise/', 'http://tornadoweb.org', '/events/python-user-group/650/', 'http://flask.pocoo.org/', '/downloads/release/python-364/', '/events/python-user-group/660/', '/events/python-user-group/638/', '/psf/', '/doc/', 'http://blog.python.org', '/events/python-events/604/', '/about/success/#government', 'http://python.org/dev/peps/', 'https://docs.python.org', 'http://feedproxy.google.com/~r/PythonInsider/~3/zVC80sq9s00/python-364-is-now-available.html', '/users/membership/', '/about/success/#arts', 'https://wiki.python.org/moin/Python2orPython3', '/downloads/', '/jobs/', 'http://trac.edgewall.org/', 'http://feedproxy.google.com/~r/PythonInsider/~3/wh73_1A-N7Q/python-355rc1-and-python-348rc1-are-now.html', '/privacy/', 'https://pypi.python.org/', 'http://www.riverbankcomputing.co.uk/software/pyqt/intro', 'http://www.scipy.org', '/community/forums/', '/about/success/#scientific', '/about/success/#software-development', '/shell/', '/accounts/signup/', 'http://www.facebook.com/pythonlang?fref=ts', '/community/', 'https://kivy.org/', '/about/quotes/', 'http://www.web2py.com/', '/community/logos/', '/community/diversity/', '/events/calendars/', 'https://wiki.python.org/moin/BeginnersGuide', '/success-stories/', '/doc/essays/', '/dev/core-mentorship/', 'http://ipython.org', '/events/', '//docs.python.org/3/tutorial/controlflow.html', '/about/success/#education', '/blogs/', '/community/irc/', 'http://pycon.blogspot.com/', '//jobs.python.org', 'http://www.pylonsproject.org/', 'http://www.djangoproject.com/', '/downloads/mac-osx/', '/about/success/#business', 'http://feedproxy.google.com/~r/PythonInsider/~3/x_c9D0S-4C4/python-370b1-is-now-available-for.html', 'http://wiki.python.org/moin/TkInter', 'https://docs.python.org/faq/', '//docs.python.org/3/tutorial/controlflow.html#defining-functions'}\n\nGrab a list of all links on the page, in absolute form (anchors excluded):\n\n.. code-block:: pycon\n\n    >>> r.html.absolute_links\n    {'https://github.com/python/pythondotorg/issues', 'https://docs.python.org/3/tutorial/', 'https://www.python.org/about/success/', 'http://feedproxy.google.com/~r/PythonInsider/~3/kihd2DW98YY/python-370a4-is-available-for-testing.html', 'https://www.python.org/dev/peps/', 'https://mail.python.org/mailman/listinfo/python-dev', 'https://www.python.org/doc/', 'https://www.python.org/', 'https://www.python.org/about/', 'https://www.python.org/events/python-events/past/', 'https://devguide.python.org/', 'https://wiki.python.org/moin/PythonEventsCalendar#Submitting_an_Event', 'https://www.openstack.org', 'http://feedproxy.google.com/~r/PythonInsider/~3/AMoBel8b8Mc/python-3.html', 'https://docs.python.org/3/tutorial/introduction.html#lists', 'http://docs.python.org/3/tutorial/introduction.html#using-python-as-a-calculator', 'http://pyfound.blogspot.com/', 'https://wiki.python.org/moin/PythonBooks', 'http://plus.google.com/+Python', 'https://wiki.python.org/moin/', 'https://www.python.org/events/python-events', 'https://status.python.org/', 'https://www.python.org/about/apps', 'https://www.python.org/downloads/release/python-2714/', 'https://www.python.org/psf/donations/', 'http://buildbot.net/', 'http://twitter.com/ThePSF', 'https://docs.python.org/3/license.html', 'http://wiki.python.org/moin/Languages', 'https://docs.python.org/faq/', 'https://jobs.python.org', 'https://www.python.org/about/success/#software-development', 'https://www.python.org/about/success/#education', 'https://www.python.org/community/logos/', 'https://www.python.org/doc/av', 'https://wiki.qt.io/PySide', 'https://www.python.org/events/python-user-group/660/', 'https://wiki.gnome.org/Projects/PyGObject', 'http://www.ansible.com', 'http://www.saltstack.com', 'https://www.python.org/dev/peps/peps.rss', 'http://planetpython.org/', 'https://www.python.org/events/python-user-group/past/', 'https://docs.python.org/3/tutorial/controlflow.html#defining-functions', 'https://www.python.org/community/diversity/', 'https://docs.python.org/3/tutorial/controlflow.html', 'https://www.python.org/community/awards', 'https://www.python.org/events/python-user-group/638/', 'https://www.python.org/about/legal/', 'https://www.python.org/dev/', 'https://www.python.org/download/alternatives', 'https://www.python.org/downloads/', 'https://www.python.org/community/lists/', 'http://www.wxpython.org/', 'https://www.python.org/about/success/#government', 'https://www.python.org/psf/', 'https://www.python.org/psf/codeofconduct/', 'http://bottlepy.org', 'http://roundup.sourceforge.net/', 'http://pandas.pydata.org/', 'http://brochure.getpython.info/', 'https://www.python.org/downloads/source/', 'https://bugs.python.org/', 'https://www.python.org/downloads/mac-osx/', 'https://www.python.org/about/help/', 'http://tornadoweb.org', 'http://flask.pocoo.org/', 'https://www.python.org/users/membership/', 'http://blog.python.org', 'https://www.python.org/privacy/', 'https://www.python.org/about/gettingstarted/', 'http://python.org/dev/peps/', 'https://www.python.org/about/apps/', 'https://docs.python.org', 'https://www.python.org/success-stories/', 'https://www.python.org/community/forums/', 'http://feedproxy.google.com/~r/PythonInsider/~3/zVC80sq9s00/python-364-is-now-available.html', 'https://www.python.org/community/merchandise/', 'https://www.python.org/about/success/#arts', 'https://wiki.python.org/moin/Python2orPython3', 'http://trac.edgewall.org/', 'http://feedproxy.google.com/~r/PythonInsider/~3/wh73_1A-N7Q/python-355rc1-and-python-348rc1-are-now.html', 'https://pypi.python.org/', 'https://www.python.org/events/python-user-group/650/', 'http://www.riverbankcomputing.co.uk/software/pyqt/intro', 'https://www.python.org/about/quotes/', 'https://www.python.org/downloads/windows/', 'https://www.python.org/events/calendars/', 'http://www.scipy.org', 'https://www.python.org/community/workshops/', 'https://www.python.org/blogs/', 'https://www.python.org/accounts/signup/', 'https://www.python.org/events/', 'https://kivy.org/', 'http://www.facebook.com/pythonlang?fref=ts', 'http://www.web2py.com/', 'https://www.python.org/psf/sponsorship/sponsors/', 'https://www.python.org/community/', 'https://www.python.org/download/other/', 'https://www.python.org/psf-landing/', 'https://www.python.org/events/python-user-group/665/', 'https://wiki.python.org/moin/BeginnersGuide', 'https://www.python.org/accounts/login/', 'https://www.python.org/downloads/release/python-364/', 'https://www.python.org/dev/core-mentorship/', 'https://www.python.org/about/success/#business', 'https://www.python.org/community/sigs/', 'https://www.python.org/events/python-user-group/', 'http://ipython.org', 'https://www.python.org/shell/', 'https://www.python.org/community/irc/', 'https://www.python.org/about/success/#engineering', 'http://www.pylonsproject.org/', 'http://pycon.blogspot.com/', 'https://www.python.org/about/success/#scientific', 'https://www.python.org/doc/essays/', 'http://www.djangoproject.com/', 'https://www.python.org/success-stories/industrial-light-magic-runs-python/', 'http://feedproxy.google.com/~r/PythonInsider/~3/x_c9D0S-4C4/python-370b1-is-now-available-for.html', 'http://wiki.python.org/moin/TkInter', 'https://www.python.org/jobs/', 'https://www.python.org/events/python-events/604/'}\n\nSelect an element with a CSS Selector:\n\n.. code-block:: pycon\n\n    >>> about = r.html.find('#about', first=True)\n\nGrab an element's text contents:\n\n.. code-block:: pycon\n\n    >>> print(about.text)\n    About\n    Applications\n    Quotes\n    Getting Started\n    Help\n    Python Brochure\n\nIntrospect an Element's attributes:\n\n.. code-block:: pycon\n\n    >>> about.attrs\n    {'id': 'about', 'class': ('tier-1', 'element-1'), 'aria-haspopup': 'true'}\n\nRender out an Element's HTML:\n\n.. code-block:: pycon\n\n    >>> about.html\n    '<li aria-haspopup=\"true\" class=\"tier-1 element-1 \" id=\"about\">\\n<a class=\"\" href=\"/about/\" title=\"\">About</a>\\n<ul aria-hidden=\"true\" class=\"subnav menu\" role=\"menu\">\\n<li class=\"tier-2 element-1\" role=\"treeitem\"><a href=\"/about/apps/\" title=\"\">Applications</a></li>\\n<li class=\"tier-2 element-2\" role=\"treeitem\"><a href=\"/about/quotes/\" title=\"\">Quotes</a></li>\\n<li class=\"tier-2 element-3\" role=\"treeitem\"><a href=\"/about/gettingstarted/\" title=\"\">Getting Started</a></li>\\n<li class=\"tier-2 element-4\" role=\"treeitem\"><a href=\"/about/help/\" title=\"\">Help</a></li>\\n<li class=\"tier-2 element-5\" role=\"treeitem\"><a href=\"http://brochure.getpython.info/\" title=\"\">Python Brochure</a></li>\\n</ul>\\n</li>'\n\n\n\nSelect Elements within Elements:\n\n.. code-block:: pycon\n\n    >>> about.find('a')\n    [<Element 'a' href='/about/' title='' class=''>, <Element 'a' href='/about/apps/' title=''>, <Element 'a' href='/about/quotes/' title=''>, <Element 'a' href='/about/gettingstarted/' title=''>, <Element 'a' href='/about/help/' title=''>, <Element 'a' href='http://brochure.getpython.info/' title=''>]\n\nSearch for links within an element:\n\n.. code-block:: pycon\n\n    >>> about.absolute_links\n    {'http://brochure.getpython.info/', 'https://www.python.org/about/gettingstarted/', 'https://www.python.org/about/', 'https://www.python.org/about/quotes/', 'https://www.python.org/about/help/', 'https://www.python.org/about/apps/'}\n\n\nSearch for text on the page:\n\n.. code-block:: pycon\n\n    >>> r.html.search('Python is a {} language')[0]\n    programming\n\nMore complex CSS Selector example (copied from Chrome dev tools):\n\n.. code-block:: pycon\n\n    >>> r = session.get('https://github.com/')\n    >>> sel = 'body > div.application-main > div.jumbotron.jumbotron-codelines > div > div > div.col-md-7.text-center.text-md-left > p'\n    >>> print(r.html.find(sel, first=True).text)\n    GitHub is a development platform inspired by the way you work. From open source to business, you can host and review code, manage projects, and build software alongside millions of other developers.\n\nXPath is also supported:\n\n.. code-block:: pycon\n\n   >>> r.html.xpath('/html/body/div[1]/a')\n   [<Element 'a' class=('px-2', 'py-4', 'show-on-focus', 'js-skip-to-content') href='#start-of-content' tabindex='1'>]\n\n\nJavaScript Support\n==================\n\nLet's grab some text that's rendered by JavaScript. Until 2020, the Python 2.7 countdown clock (https://pythonclock.org) will serve as a good test page:\n\n.. code-block:: pycon\n\n    >>> r = session.get('https://pythonclock.org')\n\nLet's try and see the dynamically rendered code (The countdown clock). To do that quickly at first, we'll search between the last text we see before it ('Python 2.7 will retire in...') and the first text we see after it ('Enable Guido Mode').\n\n.. code-block:: pycon\n\n\t>>> r.html.search('Python 2.7 will retire in...{}Enable Guido Mode')[0]\n\t'</h1>\\n        </div>\\n        <div class=\"python-27-clock\"></div>\\n        <div class=\"center\">\\n            <div class=\"guido-button-block\">\\n                <button class=\"js-guido-mode guido-button\">'\n\nNotice the clock is missing. The ``render()`` method takes the response and renders the dynamic content just like a web browser would.\n\n.. code-block:: pycon\n\n    >>> r.html.render()\n    >>> r.html.search('Python 2.7 will retire in...{}Enable Guido Mode')[0]\n    '</h1>\\n        </div>\\n        <div class=\"python-27-clock is-countdown\"><span class=\"countdown-row countdown-show6\"><span class=\"countdown-section\"><span class=\"countdown-amount\">1</span><span class=\"countdown-period\">Year</span></span><span class=\"countdown-section\"><span class=\"countdown-amount\">2</span><span class=\"countdown-period\">Months</span></span><span class=\"countdown-section\"><span class=\"countdown-amount\">28</span><span class=\"countdown-period\">Days</span></span><span class=\"countdown-section\"><span class=\"countdown-amount\">16</span><span class=\"countdown-period\">Hours</span></span><span class=\"countdown-section\"><span class=\"countdown-amount\">52</span><span class=\"countdown-period\">Minutes</span></span><span class=\"countdown-section\"><span class=\"countdown-amount\">46</span><span class=\"countdown-period\">Seconds</span></span></span></div>\\n        <div class=\"center\">\\n            <div class=\"guido-button-block\">\\n                <button class=\"js-guido-mode guido-button\">'\n\nLet's clean it up a bit. This step is not needed, it just makes it a bit easier to visualize the returned html to see what we need to target to extract our required information. \n\n.. code-block:: pycon\n\n\t>>> from pprint import pprint\n\t>>> pprint(r.html.search('Python 2.7 will retire in...{}Enable')[0])\n\t('</h1>\\n'\n '        </div>\\n'\n '        <div class=\"python-27-clock is-countdown\"><span class=\"countdown-row '\n 'countdown-show6\"><span class=\"countdown-section\"><span '\n 'class=\"countdown-amount\">1</span><span '\n 'class=\"countdown-period\">Year</span></span><span '\n 'class=\"countdown-section\"><span class=\"countdown-amount\">2</span><span '\n 'class=\"countdown-period\">Months</span></span><span '\n 'class=\"countdown-section\"><span class=\"countdown-amount\">28</span><span '\n 'class=\"countdown-period\">Days</span></span><span '\n 'class=\"countdown-section\"><span class=\"countdown-amount\">16</span><span '\n 'class=\"countdown-period\">Hours</span></span><span '\n 'class=\"countdown-section\"><span class=\"countdown-amount\">52</span><span '\n 'class=\"countdown-period\">Minutes</span></span><span '\n 'class=\"countdown-section\"><span class=\"countdown-amount\">46</span><span '\n 'class=\"countdown-period\">Seconds</span></span></span></div>\\n'\n '        <div class=\"center\">\\n'\n '            <div class=\"guido-button-block\">\\n'\n '                <button class=\"js-guido-mode guido-button\">')\n\nThe rendered html has all the same methods and attributes as above. Let's extract just the data that we want out of the clock into something easy to use elsewhere and introspect like a dictionary.\n\n.. code-block:: pycon\n\t\n\t>>> periods = [element.text for element in r.html.find('.countdown-period')]\n\t>>> amounts = [element.text for element in r.html.find('.countdown-amount')]\n\t>>> countdown_data = dict(zip(periods, amounts))\n\t>>> countdown_data\n\t{'Year': '1', 'Months': '2', 'Days': '5', 'Hours': '23', 'Minutes': '34', 'Seconds': '37'}\n\nOr you can do this async also:\n\n.. code-block:: pycon\n\n    >>> async def get_pyclock():\n    ...     r = await asession.get('https://pythonclock.org/')\n    ...     await r.html.arender()\n    ...     return r\n    ...\n    >>> results = asession.run(get_pyclock, get_pyclock, get_pyclock)\n\nThe rest of the code operates the same way as the synchronous version except that ``results`` is a list containing multiple response objects however the same basic processes can be applied as above to extract the data you want. \n\nNote, the first time you ever run the ``render()`` method, it will download\nChromium into your home directory (e.g. ``~/.pyppeteer/``). This only happens\nonce.\n\nUsing without Requests\n======================\n\nYou can also use this library without Requests:\n\n.. code-block:: pycon\n\n    >>> from requests_html import HTML\n    >>> doc = \"\"\"<a href='https://httpbin.org'>\"\"\"\n    >>> html = HTML(html=doc)\n    >>> html.links\n    {'https://httpbin.org'}\n\n\nInstallation\n============\n\n.. code-block:: shell\n\n    $ pipenv install requests-html\n    ✨🍰✨\n\nOnly **Python 3.6 and above** is supported.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.1103515625,
          "content": "[pytest]\nmarkers =\n    render: marks tests for html render\n    internet: marks tests which runs on internet pages"
        },
        {
          "name": "requests_html.py",
          "type": "blob",
          "size": 28.984375,
          "content": "import sys\nimport asyncio\nfrom urllib.parse import urlparse, urlunparse, urljoin\nfrom concurrent.futures import ThreadPoolExecutor\nfrom concurrent.futures._base import TimeoutError\nfrom functools import partial\nfrom typing import Set, Union, List, MutableMapping, Optional\n\nimport pyppeteer\nimport requests\nimport http.cookiejar\nfrom pyquery import PyQuery\n\nfrom fake_useragent import UserAgent\nfrom lxml.html.clean import Cleaner\nimport lxml\nfrom lxml import etree\nfrom lxml.html import HtmlElement\nfrom lxml.html import tostring as lxml_html_tostring\nfrom lxml.html.soupparser import fromstring as soup_parse\nfrom parse import search as parse_search\nfrom parse import findall, Result\nfrom w3lib.encoding import html_to_unicode\n\nDEFAULT_ENCODING = 'utf-8'\nDEFAULT_URL = 'https://example.org/'\nDEFAULT_USER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/603.3.8 (KHTML, like Gecko) Version/10.1.2 Safari/603.3.8'\nDEFAULT_NEXT_SYMBOL = ['next', 'more', 'older']\n\ncleaner = Cleaner()\ncleaner.javascript = True\ncleaner.style = True\n\nuseragent = None\n\n# Typing.\n_Find = Union[List['Element'], 'Element']\n_XPath = Union[List[str], List['Element'], str, 'Element']\n_Result = Union[List['Result'], 'Result']\n_HTML = Union[str, bytes]\n_BaseHTML = str\n_UserAgent = str\n_DefaultEncoding = str\n_URL = str\n_RawHTML = bytes\n_Encoding = str\n_LXML = HtmlElement\n_Text = str\n_Search = Result\n_Containing = Union[str, List[str]]\n_Links = Set[str]\n_Attrs = MutableMapping\n_Next = Union['HTML', List[str]]\n_NextSymbol = List[str]\n\n# Sanity checking.\ntry:\n    assert sys.version_info.major == 3\n    assert sys.version_info.minor > 5\nexcept AssertionError:\n    raise RuntimeError('Requests-HTML requires Python 3.6+!')\n\n\nclass MaxRetries(Exception):\n\n    def __init__(self, message):\n        self.message = message\n\n\nclass BaseParser:\n    \"\"\"A basic HTML/Element Parser, for Humans.\n\n    :param element: The element from which to base the parsing upon.\n    :param default_encoding: Which encoding to default to.\n    :param html: HTML from which to base the parsing upon (optional).\n    :param url: The URL from which the HTML originated, used for ``absolute_links``.\n\n    \"\"\"\n\n    def __init__(self, *, element, default_encoding: _DefaultEncoding = None, html: _HTML = None, url: _URL) -> None:\n        self.element = element\n        self.url = url\n        self.skip_anchors = True\n        self.default_encoding = default_encoding\n        self._encoding = None\n        self._html = html.encode(DEFAULT_ENCODING) if isinstance(html, str) else html\n        self._lxml = None\n        self._pq = None\n\n    @property\n    def raw_html(self) -> _RawHTML:\n        \"\"\"Bytes representation of the HTML content.\n        (`learn more <http://www.diveintopython3.net/strings.html>`_).\n        \"\"\"\n        if self._html:\n            return self._html\n        else:\n            return etree.tostring(self.element, encoding='unicode').strip().encode(self.encoding)\n\n    @property\n    def html(self) -> _BaseHTML:\n        \"\"\"Unicode representation of the HTML content\n        (`learn more <http://www.diveintopython3.net/strings.html>`_).\n        \"\"\"\n        if self._html:\n            return self.raw_html.decode(self.encoding, errors='replace')\n        else:\n            return etree.tostring(self.element, encoding='unicode').strip()\n\n    @html.setter\n    def html(self, html: str) -> None:\n        self._html = html.encode(self.encoding)\n\n    @raw_html.setter\n    def raw_html(self, html: bytes) -> None:\n        \"\"\"Property setter for self.html.\"\"\"\n        self._html = html\n\n    @property\n    def encoding(self) -> _Encoding:\n        \"\"\"The encoding string to be used, extracted from the HTML and\n        :class:`HTMLResponse <HTMLResponse>` headers.\n        \"\"\"\n        if self._encoding:\n            return self._encoding\n\n        # Scan meta tags for charset.\n        if self._html:\n            self._encoding = html_to_unicode(self.default_encoding, self._html)[0]\n            # Fall back to requests' detected encoding if decode fails.\n            try:\n                self.raw_html.decode(self.encoding, errors='replace')\n            except UnicodeDecodeError:\n                self._encoding = self.default_encoding\n\n\n        return self._encoding if self._encoding else self.default_encoding\n\n    @encoding.setter\n    def encoding(self, enc: str) -> None:\n        \"\"\"Property setter for self.encoding.\"\"\"\n        self._encoding = enc\n\n    @property\n    def pq(self) -> PyQuery:\n        \"\"\"`PyQuery <https://pythonhosted.org/pyquery/>`_ representation\n        of the :class:`Element <Element>` or :class:`HTML <HTML>`.\n        \"\"\"\n        if self._pq is None:\n            self._pq = PyQuery(self.lxml)\n\n        return self._pq\n\n    @property\n    def lxml(self) -> HtmlElement:\n        \"\"\"`lxml <http://lxml.de>`_ representation of the\n        :class:`Element <Element>` or :class:`HTML <HTML>`.\n        \"\"\"\n        if self._lxml is None:\n            try:\n                self._lxml = soup_parse(self.html, features='html.parser')\n            except ValueError:\n                self._lxml = lxml.html.fromstring(self.raw_html)\n\n        return self._lxml\n\n    @property\n    def text(self) -> _Text:\n        \"\"\"The text content of the\n        :class:`Element <Element>` or :class:`HTML <HTML>`.\n        \"\"\"\n        return self.pq.text()\n\n    @property\n    def full_text(self) -> _Text:\n        \"\"\"The full text content (including links) of the\n        :class:`Element <Element>` or :class:`HTML <HTML>`.\n        \"\"\"\n        return self.lxml.text_content()\n\n    def find(self, selector: str = \"*\", *, containing: _Containing = None, clean: bool = False, first: bool = False, _encoding: str = None) -> _Find:\n        \"\"\"Given a CSS Selector, returns a list of\n        :class:`Element <Element>` objects or a single one.\n\n        :param selector: CSS Selector to use.\n        :param clean: Whether or not to sanitize the found HTML of ``<script>`` and ``<style>`` tags.\n        :param containing: If specified, only return elements that contain the provided text.\n        :param first: Whether or not to return just the first result.\n        :param _encoding: The encoding format.\n\n        Example CSS Selectors:\n\n        - ``a``\n        - ``a.someClass``\n        - ``a#someID``\n        - ``a[target=_blank]``\n\n        See W3School's `CSS Selectors Reference\n        <https://www.w3schools.com/cssref/css_selectors.asp>`_\n        for more details.\n\n        If ``first`` is ``True``, only returns the first\n        :class:`Element <Element>` found.\n        \"\"\"\n\n        # Convert a single containing into a list.\n        if isinstance(containing, str):\n            containing = [containing]\n\n        encoding = _encoding or self.encoding\n        elements = [\n            Element(element=found, url=self.url, default_encoding=encoding)\n            for found in self.pq(selector)\n        ]\n\n        if containing:\n            elements_copy = elements.copy()\n            elements = []\n\n            for element in elements_copy:\n                if any([c.lower() in element.full_text.lower() for c in containing]):\n                    elements.append(element)\n\n            elements.reverse()\n\n        # Sanitize the found HTML.\n        if clean:\n            elements_copy = elements.copy()\n            elements = []\n\n            for element in elements_copy:\n                element.raw_html = lxml_html_tostring(cleaner.clean_html(element.lxml))\n                elements.append(element)\n\n        return _get_first_or_list(elements, first)\n\n    def xpath(self, selector: str, *, clean: bool = False, first: bool = False, _encoding: str = None) -> _XPath:\n        \"\"\"Given an XPath selector, returns a list of\n        :class:`Element <Element>` objects or a single one.\n\n        :param selector: XPath Selector to use.\n        :param clean: Whether or not to sanitize the found HTML of ``<script>`` and ``<style>`` tags.\n        :param first: Whether or not to return just the first result.\n        :param _encoding: The encoding format.\n\n        If a sub-selector is specified (e.g. ``//a/@href``), a simple\n        list of results is returned.\n\n        See W3School's `XPath Examples\n        <https://www.w3schools.com/xml/xpath_examples.asp>`_\n        for more details.\n\n        If ``first`` is ``True``, only returns the first\n        :class:`Element <Element>` found.\n        \"\"\"\n        selected = self.lxml.xpath(selector)\n\n        elements = [\n            Element(element=selection, url=self.url, default_encoding=_encoding or self.encoding)\n            if not isinstance(selection, etree._ElementUnicodeResult) else str(selection)\n            for selection in selected\n        ]\n\n        # Sanitize the found HTML.\n        if clean:\n            elements_copy = elements.copy()\n            elements = []\n\n            for element in elements_copy:\n                element.raw_html = lxml_html_tostring(cleaner.clean_html(element.lxml))\n                elements.append(element)\n\n        return _get_first_or_list(elements, first)\n\n    def search(self, template: str) -> Result:\n        \"\"\"Search the :class:`Element <Element>` for the given Parse template.\n\n        :param template: The Parse template to use.\n        \"\"\"\n\n        return parse_search(template, self.html)\n\n    def search_all(self, template: str) -> _Result:\n        \"\"\"Search the :class:`Element <Element>` (multiple times) for the given parse\n        template.\n\n        :param template: The Parse template to use.\n        \"\"\"\n        return [r for r in findall(template, self.html)]\n\n    @property\n    def links(self) -> _Links:\n        \"\"\"All found links on page, in as–is form.\"\"\"\n\n        def gen():\n            for link in self.find('a'):\n\n                try:\n                    href = link.attrs['href'].strip()\n                    if href and not (href.startswith('#') and self.skip_anchors) and not href.startswith(('javascript:', 'mailto:')):\n                        yield href\n                except KeyError:\n                    pass\n\n        return set(gen())\n\n    def _make_absolute(self, link):\n        \"\"\"Makes a given link absolute.\"\"\"\n\n        # Parse the link with stdlib.\n        parsed = urlparse(link)._asdict()\n\n        # If link is relative, then join it with base_url.\n        if not parsed['netloc']:\n            return urljoin(self.base_url, link)\n\n        # Link is absolute; if it lacks a scheme, add one from base_url.\n        if not parsed['scheme']:\n            parsed['scheme'] = urlparse(self.base_url).scheme\n\n            # Reconstruct the URL to incorporate the new scheme.\n            parsed = (v for v in parsed.values())\n            return urlunparse(parsed)\n\n        # Link is absolute and complete with scheme; nothing to be done here.\n        return link\n\n\n    @property\n    def absolute_links(self) -> _Links:\n        \"\"\"All found links on page, in absolute form\n        (`learn more <https://www.navegabem.com/absolute-or-relative-links.html>`_).\n        \"\"\"\n\n        def gen():\n            for link in self.links:\n                yield self._make_absolute(link)\n\n        return set(gen())\n\n    @property\n    def base_url(self) -> _URL:\n        \"\"\"The base URL for the page. Supports the ``<base>`` tag\n        (`learn more <https://www.w3schools.com/tags/tag_base.asp>`_).\"\"\"\n\n        # Support for <base> tag.\n        base = self.find('base', first=True)\n        if base:\n            result = base.attrs.get('href', '').strip()\n            if result:\n                return result\n\n        # Parse the url to separate out the path\n        parsed = urlparse(self.url)._asdict()\n\n        # Remove any part of the path after the last '/'\n        parsed['path'] = '/'.join(parsed['path'].split('/')[:-1]) + '/'\n\n        # Reconstruct the url with the modified path\n        parsed = (v for v in parsed.values())\n        url = urlunparse(parsed)\n\n        return url\n\n\nclass Element(BaseParser):\n    \"\"\"An element of HTML.\n\n    :param element: The element from which to base the parsing upon.\n    :param url: The URL from which the HTML originated, used for ``absolute_links``.\n    :param default_encoding: Which encoding to default to.\n    \"\"\"\n\n    __slots__ = [\n        'element', 'url', 'skip_anchors', 'default_encoding', '_encoding',\n        '_html', '_lxml', '_pq', '_attrs', 'session'\n    ]\n\n    def __init__(self, *, element, url: _URL, default_encoding: _DefaultEncoding = None) -> None:\n        super(Element, self).__init__(element=element, url=url, default_encoding=default_encoding)\n        self.element = element\n        self.tag = element.tag\n        self.lineno = element.sourceline\n        self._attrs = None\n\n    def __repr__(self) -> str:\n        attrs = ['{}={}'.format(attr, repr(self.attrs[attr])) for attr in self.attrs]\n        return \"<Element {} {}>\".format(repr(self.element.tag), ' '.join(attrs))\n\n    @property\n    def attrs(self) -> _Attrs:\n        \"\"\"Returns a dictionary of the attributes of the :class:`Element <Element>`\n        (`learn more <https://www.w3schools.com/tags/ref_attributes.asp>`_).\n        \"\"\"\n        if self._attrs is None:\n            self._attrs = {k: v for k, v in self.element.items()}\n\n            # Split class and rel up, as there are usually many of them:\n            for attr in ['class', 'rel']:\n                if attr in self._attrs:\n                    self._attrs[attr] = tuple(self._attrs[attr].split())\n\n        return self._attrs\n\n\nclass HTML(BaseParser):\n    \"\"\"An HTML document, ready for parsing.\n\n    :param url: The URL from which the HTML originated, used for ``absolute_links``.\n    :param html: HTML from which to base the parsing upon (optional).\n    :param default_encoding: Which encoding to default to.\n    \"\"\"\n\n    def __init__(self, *, session: Union['HTMLSession', 'AsyncHTMLSession'] = None, url: str = DEFAULT_URL, html: _HTML, default_encoding: str = DEFAULT_ENCODING, async_: bool = False) -> None:\n\n        # Convert incoming unicode HTML into bytes.\n        if isinstance(html, str):\n            html = html.encode(DEFAULT_ENCODING)\n\n        pq = PyQuery(html)\n        super(HTML, self).__init__(\n            element=pq('html') or pq.wrapAll('<html></html>')('html'),\n            html=html,\n            url=url,\n            default_encoding=default_encoding\n        )\n        self.session = session or async_ and AsyncHTMLSession() or HTMLSession()\n        self.page = None\n        self.next_symbol = DEFAULT_NEXT_SYMBOL\n\n    def __repr__(self) -> str:\n        return f\"<HTML url={self.url!r}>\"\n\n    def next(self, fetch: bool = False, next_symbol: _NextSymbol = None) -> _Next:\n        \"\"\"Attempts to find the next page, if there is one. If ``fetch``\n        is ``True`` (default), returns :class:`HTML <HTML>` object of\n        next page. If ``fetch`` is ``False``, simply returns the next URL.\n\n        \"\"\"\n        if next_symbol is None:\n            next_symbol = DEFAULT_NEXT_SYMBOL\n\n        def get_next():\n            candidates = self.find('a', containing=next_symbol)\n\n            for candidate in candidates:\n                if candidate.attrs.get('href'):\n                    # Support 'next' rel (e.g. reddit).\n                    if 'next' in candidate.attrs.get('rel', []):\n                        return candidate.attrs['href']\n\n                    # Support 'next' in classnames.\n                    for _class in candidate.attrs.get('class', []):\n                        if 'next' in _class:\n                            return candidate.attrs['href']\n\n                    if 'page' in candidate.attrs['href']:\n                        return candidate.attrs['href']\n\n            try:\n                # Resort to the last candidate.\n                return candidates[-1].attrs['href']\n            except IndexError:\n                return None\n\n        __next = get_next()\n        if __next:\n            url = self._make_absolute(__next)\n        else:\n            return None\n\n        if fetch:\n            return self.session.get(url)\n        else:\n            return url\n\n    def __iter__(self):\n\n        next = self\n\n        while True:\n            yield next\n            try:\n                next = next.next(fetch=True, next_symbol=self.next_symbol).html\n            except AttributeError:\n                break\n\n    def __next__(self):\n        return self.next(fetch=True, next_symbol=self.next_symbol).html\n\n    def __aiter__(self):\n        return self\n\n    async def __anext__(self):\n        while True:\n            url = self.next(fetch=False, next_symbol=self.next_symbol)\n            if not url:\n                break\n            response = await self.session.get(url)\n            return response.html\n\n    def add_next_symbol(self, next_symbol):\n        self.next_symbol.append(next_symbol)\n\n    async def _async_render(self, *, url: str, script: str = None, scrolldown, sleep: int, wait: float, reload, content: Optional[str], timeout: Union[float, int], keep_page: bool, cookies: list = [{}]):\n        \"\"\" Handle page creation and js rendering. Internal use for render/arender methods. \"\"\"\n        try:\n            page = await self.browser.newPage()\n\n            # Wait before rendering the page, to prevent timeouts.\n            await asyncio.sleep(wait)\n\n            if cookies:\n                for cookie in cookies:\n                    if cookie:\n                        await page.setCookie(cookie)\n\n            # Load the given page (GET request, obviously.)\n            if reload:\n                await page.goto(url, options={'timeout': int(timeout * 1000)})\n            else:\n                await page.goto(f'data:text/html,{self.html}', options={'timeout': int(timeout * 1000)})\n\n            result = None\n            if script:\n                result = await page.evaluate(script)\n\n            if scrolldown:\n                for _ in range(scrolldown):\n                    await page._keyboard.down('PageDown')\n                    await asyncio.sleep(sleep)\n            else:\n                await asyncio.sleep(sleep)\n\n            if scrolldown:\n                await page._keyboard.up('PageDown')\n\n            # Return the content of the page, JavaScript evaluated.\n            content = await page.content()\n            if not keep_page:\n                await page.close()\n                page = None\n            return content, result, page\n        except TimeoutError:\n            await page.close()\n            page = None\n            return None\n\n    def _convert_cookiejar_to_render(self, session_cookiejar):\n        \"\"\"\n        Convert HTMLSession.cookies:cookiejar[] for browser.newPage().setCookie\n        \"\"\"\n        # |  setCookie(self, *cookies:dict) -> None\n        # |      Set cookies.\n        # |\n        # |      ``cookies`` should be dictionaries which contain these fields:\n        # |\n        # |      * ``name`` (str): **required**\n        # |      * ``value`` (str): **required**\n        # |      * ``url`` (str)\n        # |      * ``domain`` (str)\n        # |      * ``path`` (str)\n        # |      * ``expires`` (number): Unix time in seconds\n        # |      * ``httpOnly`` (bool)\n        # |      * ``secure`` (bool)\n        # |      * ``sameSite`` (str): ``'Strict'`` or ``'Lax'``\n        cookie_render = {}\n        def __convert(cookiejar, key):\n            try:\n                v = eval (\"cookiejar.\"+key)\n                if not v: kv = ''\n                else: kv = {key: v}\n            except:\n                kv = ''\n            return kv\n\n        keys = [\n            'name',\n            'value',\n            'url',\n            'domain',\n            'path',\n            'sameSite',\n            'expires',\n            'httpOnly',\n            'secure',\n        ]\n        for key in keys:\n            cookie_render.update(__convert(session_cookiejar, key))\n        return cookie_render\n\n    def _convert_cookiesjar_to_render(self):\n        \"\"\"\n        Convert HTMLSession.cookies for browser.newPage().setCookie\n        Return a list of dict\n        \"\"\"\n        cookies_render = []\n        if isinstance(self.session.cookies, http.cookiejar.CookieJar):\n            for cookie in self.session.cookies:\n                cookies_render.append(self._convert_cookiejar_to_render(cookie))\n        return cookies_render\n\n    def render(self, retries: int = 8, script: str = None, wait: float = 0.2, scrolldown=False, sleep: int = 0, reload: bool = True, timeout: Union[float, int] = 8.0, keep_page: bool = False, cookies: list = [{}], send_cookies_session: bool = False):\n        \"\"\"Reloads the response in Chromium, and replaces HTML content\n        with an updated version, with JavaScript executed.\n\n        :param retries: The number of times to retry loading the page in Chromium.\n        :param script: JavaScript to execute upon page load (optional).\n        :param wait: The number of seconds to wait before loading the page, preventing timeouts (optional).\n        :param scrolldown: Integer, if provided, of how many times to page down.\n        :param sleep: Integer, if provided, of how many seconds to sleep after initial render.\n        :param reload: If ``False``, content will not be loaded from the browser, but will be provided from memory.\n        :param keep_page: If ``True`` will allow you to interact with the browser page through ``r.html.page``.\n\n        :param send_cookies_session: If ``True`` send ``HTMLSession.cookies`` convert.\n        :param cookies: If not ``empty`` send ``cookies``.\n\n        If ``scrolldown`` is specified, the page will scrolldown the specified\n        number of times, after sleeping the specified amount of time\n        (e.g. ``scrolldown=10, sleep=1``).\n\n        If just ``sleep`` is provided, the rendering will wait *n* seconds, before\n        returning.\n\n        If ``script`` is specified, it will execute the provided JavaScript at\n        runtime. Example:\n\n        .. code-block:: python\n\n            script = \\\"\\\"\\\"\n                () => {\n                    return {\n                        width: document.documentElement.clientWidth,\n                        height: document.documentElement.clientHeight,\n                        deviceScaleFactor: window.devicePixelRatio,\n                    }\n                }\n            \\\"\\\"\\\"\n\n        Returns the return value of the executed  ``script``, if any is provided:\n\n        .. code-block:: python\n\n            >>> r.html.render(script=script)\n            {'width': 800, 'height': 600, 'deviceScaleFactor': 1}\n\n        Warning: the first time you run this method, it will download\n        Chromium into your home directory (``~/.pyppeteer``).\n        \"\"\"\n\n        self.browser = self.session.browser  # Automatically create a event loop and browser\n        content = None\n\n        # Automatically set Reload to False, if example URL is being used.\n        if self.url == DEFAULT_URL:\n            reload = False\n\n        if send_cookies_session:\n           cookies = self._convert_cookiesjar_to_render()\n\n        for i in range(retries):\n            if not content:\n                try:\n\n                    content, result, page = self.session.loop.run_until_complete(self._async_render(url=self.url, script=script, sleep=sleep, wait=wait, content=self.html, reload=reload, scrolldown=scrolldown, timeout=timeout, keep_page=keep_page, cookies=cookies))\n                except TypeError:\n                    pass\n            else:\n                break\n\n        if not content:\n            raise MaxRetries(\"Unable to render the page. Try increasing timeout\")\n\n        html = HTML(url=self.url, html=content.encode(DEFAULT_ENCODING), default_encoding=DEFAULT_ENCODING)\n        self.__dict__.update(html.__dict__)\n        self.page = page\n        return result\n\n    async def arender(self, retries: int = 8, script: str = None, wait: float = 0.2, scrolldown=False, sleep: int = 0, reload: bool = True, timeout: Union[float, int] = 8.0, keep_page: bool = False, cookies: list = [{}], send_cookies_session: bool = False):\n        \"\"\" Async version of render. Takes same parameters. \"\"\"\n\n        self.browser = await self.session.browser\n        content = None\n\n        # Automatically set Reload to False, if example URL is being used.\n        if self.url == DEFAULT_URL:\n            reload = False\n\n        if send_cookies_session:\n           cookies = self._convert_cookiesjar_to_render()\n\n        for _ in range(retries):\n            if not content:\n                try:\n\n                    content, result, page = await self._async_render(url=self.url, script=script, sleep=sleep, wait=wait, content=self.html, reload=reload, scrolldown=scrolldown, timeout=timeout, keep_page=keep_page, cookies=cookies)\n                except TypeError:\n                    pass\n            else:\n                break\n\n        if not content:\n            raise MaxRetries(\"Unable to render the page. Try increasing timeout\")\n\n        html = HTML(url=self.url, html=content.encode(DEFAULT_ENCODING), default_encoding=DEFAULT_ENCODING)\n        self.__dict__.update(html.__dict__)\n        self.page = page\n        return result\n\n\nclass HTMLResponse(requests.Response):\n    \"\"\"An HTML-enabled :class:`requests.Response <requests.Response>` object.\n    Effectively the same, but with an intelligent ``.html`` property added.\n    \"\"\"\n\n    def __init__(self, session: Union['HTMLSession', 'AsyncHTMLSession']) -> None:\n        super(HTMLResponse, self).__init__()\n        self._html = None  # type: HTML\n        self.session = session\n\n    @property\n    def html(self) -> HTML:\n        if not self._html:\n            self._html = HTML(session=self.session, url=self.url, html=self.content, default_encoding=self.encoding)\n\n        return self._html\n\n    @classmethod\n    def _from_response(cls, response, session: Union['HTMLSession', 'AsyncHTMLSession']):\n        html_r = cls(session=session)\n        html_r.__dict__.update(response.__dict__)\n        return html_r\n\n\ndef user_agent(style=None) -> _UserAgent:\n    \"\"\"Returns an apparently legit user-agent, if not requested one of a specific\n    style. Defaults to a Chrome-style User-Agent.\n    \"\"\"\n    global useragent\n    if (not useragent) and style:\n        useragent = UserAgent()\n\n    return useragent[style] if style else DEFAULT_USER_AGENT\n\n\ndef _get_first_or_list(l, first=False):\n    if first:\n        try:\n            return l[0]\n        except IndexError:\n            return None\n    else:\n        return l\n\n\nclass BaseSession(requests.Session):\n    \"\"\" A consumable session, for cookie persistence and connection pooling,\n    amongst other things.\n    \"\"\"\n\n    def __init__(self, mock_browser : bool = True, verify : bool = True,\n                 browser_args : list = ['--no-sandbox']):\n        super().__init__()\n\n        # Mock a web browser's user agent.\n        if mock_browser:\n            self.headers['User-Agent'] = user_agent()\n\n        self.hooks['response'].append(self.response_hook)\n        self.verify = verify\n\n        self.__browser_args = browser_args\n\n\n    def response_hook(self, response, **kwargs) -> HTMLResponse:\n        \"\"\" Change response encoding and replace it by a HTMLResponse. \"\"\"\n        if not response.encoding:\n            response.encoding = DEFAULT_ENCODING\n        return HTMLResponse._from_response(response, self)\n\n    @property\n    async def browser(self):\n        if not hasattr(self, \"_browser\"):\n            self._browser = await pyppeteer.launch(ignoreHTTPSErrors=not(self.verify), headless=True, args=self.__browser_args)\n\n        return self._browser\n\n\nclass HTMLSession(BaseSession):\n\n    def __init__(self, **kwargs):\n        super(HTMLSession, self).__init__(**kwargs)\n\n    @property\n    def browser(self):\n        if not hasattr(self, \"_browser\"):\n            self.loop = asyncio.get_event_loop()\n            if self.loop.is_running():\n                raise RuntimeError(\"Cannot use HTMLSession within an existing event loop. Use AsyncHTMLSession instead.\")\n            self._browser = self.loop.run_until_complete(super().browser)\n        return self._browser\n\n    def close(self):\n        \"\"\" If a browser was created close it first. \"\"\"\n        if hasattr(self, \"_browser\"):\n            self.loop.run_until_complete(self._browser.close())\n        super().close()\n\n\nclass AsyncHTMLSession(BaseSession):\n    \"\"\" An async consumable session. \"\"\"\n\n    def __init__(self, loop=None, workers=None,\n                 mock_browser: bool = True, *args, **kwargs):\n        \"\"\" Set or create an event loop and a thread pool.\n\n            :param loop: Asyncio loop to use.\n            :param workers: Amount of threads to use for executing async calls.\n                If not pass it will default to the number of processors on the\n                machine, multiplied by 5. \"\"\"\n        super().__init__(*args, **kwargs)\n\n        self.loop = loop or asyncio.get_event_loop()\n        self.thread_pool = ThreadPoolExecutor(max_workers=workers)\n\n    def request(self, *args, **kwargs):\n        \"\"\" Partial original request func and run it in a thread. \"\"\"\n        func = partial(super().request, *args, **kwargs)\n        return self.loop.run_in_executor(self.thread_pool, func)\n\n    async def close(self):\n        \"\"\" If a browser was created close it first. \"\"\"\n        if hasattr(self, \"_browser\"):\n            await self._browser.close()\n        super().close()\n\n    def run(self, *coros):\n        \"\"\" Pass in all the coroutines you want to run, it will wrap each one\n            in a task, run it and wait for the result. Return a list with all\n            results, this is returned in the same order coros are passed in. \"\"\"\n        tasks = [\n            asyncio.ensure_future(coro()) for coro in coros\n        ]\n        done, _ = self.loop.run_until_complete(asyncio.wait(tasks))\n        return [t.result() for t in done]\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.0380859375,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Note: To use the 'upload' functionality of this file, you must:\n#   $ pip install twine\n\nimport io\nimport os\nimport sys\nfrom shutil import rmtree\n\nfrom setuptools import setup, Command\n\n# Package meta-data.\nNAME = 'requests-html'\nDESCRIPTION = 'HTML Parsing for Humans.'\nURL = 'https://github.com/psf/requests-html'\nEMAIL = 'me@kennethreitz.org'\nAUTHOR = 'Kenneth Reitz'\nVERSION = '0.10.0'\n\n# What packages are required for this module to be executed?\nREQUIRED = [\n    'requests', 'pyquery', 'fake-useragent', 'parse', 'beautifulsoup4', 'w3lib', 'pyppeteer>=0.0.14'\n]\n\n# The rest you shouldn't have to touch too much :)\n# ------------------------------------------------\n# Except, perhaps the License and Trove Classifiers!\n# If you do change the License, remember to change the Trove Classifier for that!\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Import the README and use it as the long-description.\n# Note: this will only work if 'README.rst' is present in your MANIFEST.in file!\nwith io.open(os.path.join(here, 'README.rst'), encoding='utf-8') as f:\n    long_description = '\\n' + f.read()\n\nclass UploadCommand(Command):\n    \"\"\"Support setup.py upload.\"\"\"\n\n    description = 'Build and publish the package.'\n    user_options = []\n\n    @staticmethod\n    def status(s):\n        \"\"\"Prints things in bold.\"\"\"\n        print('\\033[1m{0}\\033[0m'.format(s))\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        try:\n            self.status('Removing previous builds…')\n            rmtree(os.path.join(here, 'dist'))\n        except OSError:\n            pass\n\n        self.status('Building Source and Wheel (universal) distribution…')\n        os.system('{0} setup.py sdist bdist_wheel --universal'.format(sys.executable))\n\n        self.status('Uploading the package to PyPi via Twine…')\n        os.system('twine upload dist/*')\n\n        self.status('Publishing git tags…')\n        os.system('git tag v{0}'.format(VERSION))\n        os.system('git push --tags')\n\n        sys.exit()\n\n\n# Where the magic happens:\nsetup(\n    name=NAME,\n    version=VERSION,\n    description=DESCRIPTION,\n    long_description=long_description,\n    author=AUTHOR,\n    author_email=EMAIL,\n    url=URL,\n    python_requires='>=3.6.0',\n    # If your package is a single module, use this instead of 'packages':\n    py_modules=['requests_html'],\n\n    # entry_points={\n    #     'console_scripts': ['mycli=mymodule:cli'],\n    # },\n    install_requires=REQUIRED,\n    include_package_data=True,\n    license='MIT',\n    classifiers=[\n        # Trove classifiers\n        # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy'\n    ],\n    # $ setup.py publish support.\n    cmdclass={\n        'upload': UploadCommand,\n    },\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}