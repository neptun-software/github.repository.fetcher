{
  "metadata": {
    "timestamp": 1736561164121,
    "page": 120,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "XiaoMi/ha_xiaomi_home",
      "stars": 17002,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0556640625,
          "content": "__pycache__\n.pytest_cache\n.vscode\n.idea\nrequirements.txt\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 12.6708984375,
          "content": "# This Pylint rcfile contains a best-effort configuration to uphold the\n# best-practices and style described in the Google Python style guide:\n#   https://google.github.io/styleguide/pyguide.html\n#\n# Its canonical open-source location is:\n#   https://google.github.io/styleguide/pylintrc\n\n[MAIN]\n\n# Files or directories to be skipped. They should be base names, not paths.\nignore=third_party\n\n# Files or directories matching the regex patterns are skipped. The regex\n# matches against base names, not paths.\nignore-patterns=\n\n# Pickle collected data for later comparisons.\npersistent=no\n\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n# Use multiple processes to speed up Pylint.\njobs=4\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=no\n\n\n[MESSAGES CONTROL]\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED\nconfidence=\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once). See also the \"--disable\" option for examples.\n#enable=\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once).You can also use \"--disable=all\" to\n# disable everything first and then reenable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use\"--disable=all --enable=classes\n# --disable=W\"\ndisable=R,\n        abstract-method,\n        apply-builtin,\n        arguments-differ,\n        attribute-defined-outside-init,\n        backtick,\n        bad-option-value,\n        basestring-builtin,\n        buffer-builtin,\n        c-extension-no-member,\n        consider-using-enumerate,\n        cmp-builtin,\n        cmp-method,\n        coerce-builtin,\n        coerce-method,\n        delslice-method,\n        div-method,\n        eq-without-hash,\n        execfile-builtin,\n        file-builtin,\n        filter-builtin-not-iterating,\n        fixme,\n        getslice-method,\n        global-statement,\n        hex-method,\n        idiv-method,\n        implicit-str-concat,\n        import-error,\n        import-self,\n        import-star-module-level,\n        input-builtin,\n        intern-builtin,\n        invalid-str-codec,\n        locally-disabled,\n        long-builtin,\n        long-suffix,\n        map-builtin-not-iterating,\n        misplaced-comparison-constant,\n        missing-function-docstring,\n        metaclass-assignment,\n        next-method-called,\n        next-method-defined,\n        no-absolute-import,\n        no-init,  # added\n        no-member,\n        no-name-in-module,\n        no-self-use,\n        nonzero-method,\n        oct-method,\n        old-division,\n        old-ne-operator,\n        old-octal-literal,\n        old-raise-syntax,\n        parameter-unpacking,\n        print-statement,\n        raising-string,\n        range-builtin-not-iterating,\n        raw_input-builtin,\n        rdiv-method,\n        reduce-builtin,\n        relative-import,\n        reload-builtin,\n        round-builtin,\n        setslice-method,\n        signature-differs,\n        standarderror-builtin,\n        suppressed-message,\n        sys-max-int,\n        trailing-newlines,\n        unichr-builtin,\n        unicode-builtin,\n        unnecessary-pass,\n        unpacking-in-except,\n        useless-else-on-loop,\n        useless-suppression,\n        using-cmp-argument,\n        wrong-import-order,\n        xrange-builtin,\n        zip-builtin-not-iterating,\n\n\n[REPORTS]\n\n# Set the output format. Available formats are text, parseable, colorized, msvs\n# (visual studio) and html. You can also give a reporter class, eg\n# mypackage.mymodule.MyReporterClass.\noutput-format=text\n\n# Tells whether to display a full report or only the messages\nreports=no\n\n# Python expression which should return a note less than 10 (10 is the highest\n# note). You have access to the variables errors warning, statement which\n# respectively contain the number of errors / warnings messages and the total\n# number of statements analyzed. This is used by the global evaluation report\n# (RP0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details\n#msg-template=\n\n\n[BASIC]\n\n# Good variable names which should always be accepted, separated by a comma\ngood-names=main,_\n\n# Bad variable names which should always be refused, separated by a comma\nbad-names=\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Include a hint for the correct naming format with invalid-name\ninclude-naming-hint=no\n\n# List of decorators that produce properties, such as abc.abstractproperty. Add\n# to this list to register other decorators that produce valid properties.\nproperty-classes=abc.abstractproperty,cached_property.cached_property,cached_property.threaded_cached_property,cached_property.cached_property_with_ttl,cached_property.threaded_cached_property_with_ttl\n\n# Regular expression matching correct function names\nfunction-rgx=^(?:(?P<exempt>setUp|tearDown|setUpModule|tearDownModule)|(?P<camel_case>_?[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_?[a-z][a-z0-9_]*))$\n\n# Regular expression matching correct variable names\nvariable-rgx=^[a-z][a-z0-9_]*$\n\n# Regular expression matching correct constant names\nconst-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$\n\n# Regular expression matching correct attribute names\nattr-rgx=^_{0,2}[a-z][a-z0-9_]*$\n\n# Regular expression matching correct argument names\nargument-rgx=^[a-z][a-z0-9_]*$\n\n# Regular expression matching correct class attribute names\nclass-attribute-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$\n\n# Regular expression matching correct inline iteration names\ninlinevar-rgx=^[a-z][a-z0-9_]*$\n\n# Regular expression matching correct class names\nclass-rgx=^_?[A-Z][a-zA-Z0-9]*$\n\n# Regular expression matching correct module names\nmodule-rgx=^(_?[a-z][a-z0-9_]*|__init__)$\n\n# Regular expression matching correct method names\nmethod-rgx=(?x)^(?:(?P<exempt>_[a-z0-9_]+__|runTest|setUp|tearDown|setUpTestCase|tearDownTestCase|setupSelf|tearDownClass|setUpClass|(test|assert)_*[A-Z0-9][a-zA-Z0-9_]*|next)|(?P<camel_case>_{0,2}[A-Z][a-zA-Z0-9_]*)|(?P<snake_case>_{0,2}[a-z][a-z0-9_]*))$\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=(__.*__|main|test.*|.*test|.*Test)$\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=12\n\n\n[TYPECHECK]\n\n# List of decorators that produce context managers, such as\n# contextlib.contextmanager. Add to this list to register other decorators that\n# produce valid context managers.\ncontextmanager-decorators=contextlib.contextmanager,contextlib2.contextmanager\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis. It\n# supports qualified module names, as well as Unix pattern matching.\nignored-modules=\n\n# List of class names for which member attributes should not be checked (useful\n# for classes with dynamically set attributes). This supports the use of\n# qualified names.\nignored-classes=optparse.Values,thread._local,_thread._local\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=\n\n\n[FORMAT]\n\n# Maximum number of characters on a single line.\nmax-line-length=80\n\n# TODO(https://github.com/pylint-dev/pylint/issues/3352): Direct pylint to exempt\n# lines made too long by directives to pytype.\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=(?x)(\n  ^\\s*(\\#\\ )?<?https?://\\S+>?$|\n  ^\\s*(from\\s+\\S+\\s+)?import\\s+.+$)\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=yes\n\n# Maximum number of lines in a module\nmax-module-lines=99999\n\n# String used as indentation unit.  The internal Google style guide mandates 2\n# spaces.  Google's externaly-published style guide says 4, consistent with\n# PEP 8.  Here, we use 4 spaces.\nindent-string='    '\n\n# Number of spaces of indent required inside a hanging  or continued line.\nindent-after-paren=4\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=TODO\n\n\n[STRING]\n\n# This flag controls whether inconsistent-quotes generates a warning when the\n# character used as a quote delimiter is used inconsistently within a module.\ncheck-quote-consistency=yes\n\n\n[VARIABLES]\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# A regular expression matching the name of dummy variables (i.e. expectedly\n# not used).\ndummy-variables-rgx=^\\*{0,2}(_$|unused_|dummy_)\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid to define new builtins when possible.\nadditional-builtins=\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,_cb\n\n# List of qualified module names which can have objects that can redefine\n# builtins.\nredefining-builtins-modules=six,six.moves,past.builtins,future.builtins,functools\n\n\n[LOGGING]\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format\nlogging-modules=logging,absl.logging,tensorflow.io.logging\n\n\n[SIMILARITIES]\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=no\n\n\n[SPELLING]\n\n# Spelling dictionary name. Available dictionaries: none. To make it working\n# install python-enchant package.\nspelling-dict=\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# A path to a file that contains private dictionary; one word per line.\nspelling-private-dict-file=\n\n# Tells whether to store unknown words to indicated private dictionary in\n# --spelling-private-dict-file option instead of raising a message.\nspelling-store-unknown-words=no\n\n\n[IMPORTS]\n\n# Deprecated modules which should not be used, separated by a comma\ndeprecated-modules=regsub,\n                   TERMIOS,\n                   Bastion,\n                   rexec,\n                   sets\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled)\nimport-graph=\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled)\next-import-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled)\nint-import-graph=\n\n# Force import order to recognize a module as part of the standard\n# compatibility libraries.\nknown-standard-library=\n\n# Force import order to recognize a module as part of a third party library.\nknown-third-party=enchant, absl\n\n# Analyse import fallback blocks. This can be used to support both Python 2 and\n# 3 compatible code, which means that the block might have code that exists\n# only in one or another interpreter, leading to false positives when analysed.\nanalyse-fallback-blocks=no\n\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,\n                      __new__,\n                      setUp\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,\n                  _fields,\n                  _replace,\n                  _source,\n                  _make\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls,\n                            class_\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=mcs\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.275390625,
          "content": "# CHANGELOG\n\n## v0.1.5b1\nThis version will cause some Xiaomi routers that do not support access (#564) to become unavailable. You can update the device list in the configuration or delete it manually.\n### Added\n- Fan entity support direction ctrl [#556](https://github.com/XiaoMi/ha_xiaomi_home/pull/556)\n### Changed\n- Filter miwifi.* devices and xiaomi.router.rd03 [#564](https://github.com/XiaoMi/ha_xiaomi_home/pull/564)\n### Fixed\n- Fix multi ha instance login [#560](https://github.com/XiaoMi/ha_xiaomi_home/pull/560)\n- Fix fan speed [#464](https://github.com/XiaoMi/ha_xiaomi_home/pull/464)\n- The number of profile models updated from 660 to 823. [#583](https://github.com/XiaoMi/ha_xiaomi_home/pull/583)\n\n## v0.1.5b0\n### Added\n- Add missing parameter state_class  [#101](https://github.com/XiaoMi/ha_xiaomi_home/pull/101)\n### Changed\n- Make git update guide more accurate [#561](https://github.com/XiaoMi/ha_xiaomi_home/pull/561)\n### Fixed\n- Limit *light.mode count (value-range) [#535](https://github.com/XiaoMi/ha_xiaomi_home/pull/535)\n- Update miot cloud raise error msg [#551](https://github.com/XiaoMi/ha_xiaomi_home/pull/551)\n- Fix table header misplacement [#554](https://github.com/XiaoMi/ha_xiaomi_home/pull/554)\n\n## v0.1.4\n### Added\n- Refactor miot network, add network detection logic, improve devices filter logic. [458](https://github.com/XiaoMi/ha_xiaomi_home/pull/458) [#191](https://github.com/XiaoMi/ha_xiaomi_home/pull/191)\n### Changed\n- Remove tev dependency for lan control & fixs. [#333](https://github.com/XiaoMi/ha_xiaomi_home/pull/333)\n- Use yaml to parse action params. [#447](https://github.com/XiaoMi/ha_xiaomi_home/pull/447)\n- Update issue template. [#445](https://github.com/XiaoMi/ha_xiaomi_home/pull/445)\n- Remove duplicate dependency(aiohttp) [#390](https://github.com/XiaoMi/ha_xiaomi_home/pull/390)\n### Fixed\n\n## v0.1.4b1\n### Added\n- Support devices filter, and device changed notify logical refinement. [#332](https://github.com/XiaoMi/ha_xiaomi_home/pull/332)\n### Changed\n- Readme amend HACS installation. [#404](https://github.com/XiaoMi/ha_xiaomi_home/pull/404)\n### Fixed\n- Fix unit_convert AttributeError, Change to catch all Exception. [#396](https://github.com/XiaoMi/ha_xiaomi_home/pull/396)\n- Ignore undefined piid and keep processing following arguments. [#377](https://github.com/XiaoMi/ha_xiaomi_home/pull/377)\n- Fix some type error, wrong use of any and Any. [#338](https://github.com/XiaoMi/ha_xiaomi_home/pull/338)\n- Fix lumi.switch.acn040 identify service translation of zh-Hans [#412](https://github.com/XiaoMi/ha_xiaomi_home/pull/412)\n\n## v0.1.4b0\n### Added\n### Changed\n### Fixed\n- Fix miot cloud token refresh logic. [#307](https://github.com/XiaoMi/ha_xiaomi_home/pull/307)\n- Fix lan ctrl filter logic. [#303](https://github.com/XiaoMi/ha_xiaomi_home/pull/303)\n\n## v0.1.3\n### Added\n### Changed\n- Remove default bug label. [#276](https://github.com/XiaoMi/ha_xiaomi_home/pull/276)\n- Improve multi-language translation actions. [#256](https://github.com/XiaoMi/ha_xiaomi_home/pull/256)\n- Use aiohttp instead of waiting for blocking calls. [#227](https://github.com/XiaoMi/ha_xiaomi_home/pull/227)\n- Language supports dt. [#237](https://github.com/XiaoMi/ha_xiaomi_home/pull/237)\n### Fixed\n- Fix local control error. [#271](https://github.com/XiaoMi/ha_xiaomi_home/pull/271)\n- Fix README_zh and miot_storage. [#270](https://github.com/XiaoMi/ha_xiaomi_home/pull/270)\n\n## v0.1.2\n### Added\n- Support Xiaomi Heater devices. https://github.com/XiaoMi/ha_xiaomi_home/issues/124 https://github.com/XiaoMi/ha_xiaomi_home/issues/117\n- Language supports pt, pt-BR.\n### Changed\n- Adjust the minimum version of HASS core to 2024.4.4 and above versions.\n### Fixed\n\n## v0.1.1\n### Added\n### Changed\n### Fixed\n- Fix humidifier trans rule. https://github.com/XiaoMi/ha_xiaomi_home/issues/59\n- Fix get homeinfo error.  https://github.com/XiaoMi/ha_xiaomi_home/issues/22 \n- Fix air-conditioner switch on. https://github.com/XiaoMi/ha_xiaomi_home/issues/37 https://github.com/XiaoMi/ha_xiaomi_home/issues/16\n- Fix invalid cover status. https://github.com/XiaoMi/ha_xiaomi_home/issues/11  https://github.com/XiaoMi/ha_xiaomi_home/issues/85 \n- Water heater entity add STATE_OFF. https://github.com/XiaoMi/ha_xiaomi_home/issues/105 https://github.com/XiaoMi/ha_xiaomi_home/issues/17 \n\n## v0.1.0\n### Added\n- First version\n### Changed\n### Fixed\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.177734375,
          "content": "# Contribution Guidelines\n\n[English](./CONTRIBUTING.md) | [简体中文](./doc/CONTRIBUTING_zh.md)\n\nThank you for considering contributing to our project! We appreciate your efforts to make our project better.\n\nBefore you start contributing, please take a moment to review the following guidelines.\n\n## How Can I Contribute?\n\n### Reporting Bugs\n\nIf you encounter a bug in the project, please [open an issue](https://github.com/XiaoMi/ha_xiaomi_home/issues/new/) on GitHub and provide the detailed information about the bug, including the steps to reproduce the bug, the logs of debug level and the time when it occurs.\n\nThe [method](https://www.home-assistant.io/integrations/logger/#log-filters) to set the integration's log level:\n\n```\n# Set the log level in configuration.yaml\n\nlogger:\n  default: critical\n  logs:\n    custom_components.xiaomi_home: debug\n```\n\n### Suggesting Enhancements\n\nIf you have ideas for enhancements or new features, you are welcomed to [start a discussion on ideas](https://github.com/XiaoMi/ha_xiaomi_home/discussions/new?category=ideas) on GitHub to discuss your ideas.\n\n### Contributing Code\n\n1. Fork the repository and create your branch from `main`.\n2. Ensure that your code adheres to the project coding standard.\n3. Make sure that your commit messages are descriptive and meaningful.\n4. Pull requests should be accompanied by a clear description of the problem and the solution.\n5. Update the documents if necessary.\n6. Run tests if they are available and ensure they pass.\n\n## Pull Request Guidelines\n\nBefore submitting a pull request, please make sure that the following requirements are met:\n\n- Your pull request addresses a single issue or feature.\n- You have tested your changes locally.\n- Your code follows the project's [code style](#code-style). Run [`pylint`](https://github.com/google/pyink) over your code using this [pylintrc](../.pylintrc).\n- All existing tests pass, and you have added new tests if applicable.\n- Any dependent changes are documented.\n\n## Code Style\n\nWe follow [Google Style](https://google.github.io/styleguide/pyguide.html) for code style and formatting. Please make sure to adhere to this guideline in your contributions.\n\n## Commit Message Format\n\n```\n<type>: <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>\n```\n\ntype: commit type is one of the following\n\n- feat: A new feature.\n- fix: A bug fix.\n- docs: Documentation only changes.\n- style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc.).\n- refactor: A code change that neither fixes a bug nor adds a feature.\n- perf: A code change that improves performance.\n- test: Adding missing tests or correcting existing tests.\n- chore: Changes to the build process or auxiliary tools and libraries.\n- revert: Reverting a previous commit.\n\nsubject: A short summary in imperative, present tense. Not capitalized. No period at the end.\n\nbody: A detailed description of the commit and the motivation for the change. The body is mandatory for all commits except for those of type \"docs\".\n\nfooter: Optional. The footer is the place to reference GitHub issues and PRs that this commit closes or is related to.\n\n## Naming Conventions\n\n### Xiaomi Naming Convention\n\n- When describing Xiaomi, always use \"Xiaomi\" in full. Variable names can use \"xiaomi\" or \"mi\".\n- When describing Xiaomi Home, always use \"Xiaomi Home\". Variable names can use \"mihome\" or \"MiHome\".\n- When describing Xiaomi IoT, always use \"MIoT\". Variable names can use \"miot\" or \"MIoT\".\n\n### Third-Party Platform Naming Convention\n\n- When describing Home Assistant, always use \"Home Assistant\". Variables can use \"hass\" or \"hass_xxx\".\n\n### Other Naming Conventions\n\n- When using mixed Chinese and English sentences in the document, there must be a space between Chinese and English or the English words must be quoted by Chinese quotation marks. (It is best to write code comments this way too.)\n\n## Licensing\n\nWhen contributing to this project, you agree that your contributions will be licensed under the project's [LICENSE](../LICENSE.md).\n\n## How to Get Help\n\nIf you need help or have questions, feel free to ask in [discussions](https://github.com/XiaoMi/ha_xiaomi_home/discussions/) on GitHub.\n\nYou can also contact ha_xiaomi_home@xiaomi.com\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 4.703125,
          "content": "# 许可证\n\n版权声明 (C) 2024 小米公司。\n\n在本许可证下提供的 Home Assistant 米家集成（Xiaomi Home Integration）和相关米家云服务 API 接口，包括源代码和目标代码（统称为“授权作品”）的所有权及知识产权归小米所有。小米在此授予您一项个人的、有限的、非排他的、不可转让的、不可转授权的、免费的权利，仅限于您为非商业性目的使用 Home Assistant 而复制、使用、修改、分发授权作品。为避免疑义，本许可证未授权您将授权作品用于任何其他用途，包括但不限于开发应用程序（APP）、Web 服务以及其他形式的软件等。\n\n您在重新分发授权作品时，无论修改与否，无论以源码形式或目标代码形式，您均需保留本授权作品中的版权标识、免责声明及本许可证的副本。\n\n授权作品是按“现状”分发的，小米不对授权作品承担任何明示或暗示的保证或担保，包括但不限于对授权作品没有错误或疏漏、持续性、可靠性、适用于某一特定用途或不侵权等的保证、声明或承诺。在任何情况下，对于因使用授权作品或无法使用授权作品而引起的任何直接、间接、特殊、偶然或后果性损害或损失，您需自行承担全部责任。\n\n本许可证中未明确授予的所有权利均予保留，除本许可证明确授予您的权利外，小米未以任何形式授权您使用小米及小米关联公司的商标、著作权或其他任何形式的知识产权，例如在未获得小米另行书面许可的情况下，您不得使用“小米”、“米家”等与小米相关的字样或其他会使得公众联想到小米的字样对您使用授权作品的软件或搭载授权作品的硬件做任何形式的宣传或推广。\n\n在下述情况下，小米有权立即终止对您依据本许可证获得的授权：\n1. 您对小米或其关联公司的专利或其他知识产权提起专利无效、诉讼或其他主张；或，\n2. 您生产、制造（含委托制造）、销售（含委托销售）模仿或复制小米产品（包含小米关联公司的产品）的山寨产品。\n\n---\n\n# License\n\nCopyright (C) 2024 Xiaomi Corporation.\n\nThe ownership and intellectual property rights of Xiaomi Home Assistant Integration and related Xiaomi cloud service API interface provided under this license, including source code and object code (collectively, \"Licensed Work\"), are owned by Xiaomi. Subject to the terms and conditions of this License, Xiaomi hereby grants you a personal, limited, non-exclusive, non-transferable, non-sublicensable, and royalty-free license to reproduce, use, modify, and distribute the Licensed Work only for your use of Home Assistant for non-commercial purposes. For the avoidance of doubt, Xiaomi does not authorize you to use the Licensed Work for any other purpose, including but not limited to use Licensed Work to develop applications (APP), Web services, and other forms of software.\n\nYou may reproduce and distribute copies of the Licensed Work, with or without modifications, whether in source or object form, provided that you must give any other recipients of the Licensed Work a copy of this License and retain all copyright and disclaimers.\n\nXiaomi provides the Licensed Work on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties, undertakes, or conditions of TITLE, NO ERROR OR OMISSION, CONTINUITY, RELIABILITY, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. In any event, you are solely responsible for any direct, indirect, special, incidental, or consequential damages or losses arising from the use or inability to use the Licensed Work.\n\nXiaomi reserves all rights not expressly granted to you in this License. Except for the rights expressly granted by Xiaomi under this License, Xiaomi does not authorize you in any form to use the trademarks, copyrights, or other forms of intellectual property rights of Xiaomi and its affiliates, including, without limitation, without obtaining other written permission from Xiaomi, you shall not use \"Xiaomi\", \"Xiaomi home\", \"Mijia\" and other words related to Xiaomi or words that may make the public associate with Xiaomi in any form to publicize or promote the software or hardware devices that use the Licensed Work.\n\nXiaomi has the right to immediately terminate all your authorization under this License in the event:\n1. You assert patent invalidation, litigation, or other claims against patents or other intellectual property rights of Xiaomi or its affiliates; or,\n2. You make, have made, manufacture, sell, or offer to sell products that knock off Xiaomi or its affiliates' products.\n"
        },
        {
          "name": "LegalNotice.md",
          "type": "blob",
          "size": 1.76171875,
          "content": "# 法律声明\n\n版权声明 (C) 2024 小米。\nHome Assistant 米家集成（Xiaomi Home Integration）所使用的米家云服务 API 接口（以下简称小米云接口）的所有权及其知识产权为小米所有。您仅限于在[米家集成许可证](./LICENSE.md)规定的范围内使用，任何超出前述许可证规定范围外的行为，包括但不限于在非 Home Assistant 平台上使用小米云接口、以及基于商业目的在 Home Assistant 平台上使用小米云接口等行为均应被视为侵权行为，小米有权对您使用的小米云接口采取包括但不限于停止使用、删除、屏蔽、断开连接等措施，同时保留向您追究相关法律责任的权利。\n小米拥有本声明的最终解释权。\n\n---\n\n# Legal Notice\n\nCopyright (C) 2024 Xiaomi Corporation.\nAll rights, title, interest and intellectual property rights of the Xiaomi Cloud Service API interface (hereinafter referred to as Xiaomi Cloud Interface) provided to use the Home Assistant Xiaomi Home Integration shall be solely owned by Xiaomi. You are only permitted to use the Xiaomi Cloud Interface within the scope specified in the [Xiaomi Home Integration License](./LICENSE.md). Any behavior beyond the scope of the aforesaid license, including but not limited to using the Xiaomi Cloud Interface on non-Home Assistant platforms and using the Xiaomi Cloud Interface on the Home Assistant platform for any commercial purposes, shall be deemed as infringement. Xiaomi has the right to take measures, including but not limited to stopping usage, deleting, blocking and disconnecting the Xiaomi Cloud Interface used by You, and also reserves the right to pursue relevant legal responsibilities against You.\nXiaomi reserves the right of the final interpretation of this notice.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.63671875,
          "content": "# Xiaomi Home Integration for Home Assistant\n\n[English](./README.md) | [简体中文](./doc/README_zh.md)\n\nXiaomi Home Integration is an integrated component of Home Assistant supported by Xiaomi official. It allows you to use Xiaomi IoT smart devices in Home Assistant.\n\n## Installation\n\n> Home Assistant version requirement:\n>\n> - Core $\\geq$ 2024.4.4\n> - Operating System $\\geq$ 13.0\n\n### Method 1: Git clone from GitHub\n\n```bash\ncd config\ngit clone https://github.com/XiaoMi/ha_xiaomi_home.git\ncd ha_xiaomi_home\n./install.sh /config\n```\n\nWe recommend this installation method, for it is convenient to switch to a tag when updating `xiaomi_home` to a certain version.\n\nFor example, update to version v1.0.0\n\n```bash\ncd config/ha_xiaomi_home\ngit fetch\ngit checkout v1.0.0\n./install.sh /config\n```\n\n### Method 2: [HACS](https://hacs.xyz/)\n\nHACS > Overflow Menu > Custom repositories > Repository: https://github.com/XiaoMi/ha_xiaomi_home.git & Category or Type: Integration > ADD > Xiaomi Home in New or Available for download section of HACS > DOWNLOAD\n\n> Xiaomi Home has not been added to the HACS store as a default yet. It's coming soon.\n\n### Method 3: Manually installation via [Samba](https://github.com/home-assistant/addons/tree/master/samba) / [FTPS](https://github.com/hassio-addons/addon-ftp)\n\nDownload and copy `custom_components/xiaomi_home` folder to `config/custom_components` folder in your Home Assistant.\n\n## Configuration\n\n### Login\n\n[Settings > Devices & services > ADD INTEGRATION](https://my.home-assistant.io/redirect/brand/?brand=xiaomi_home) > Search `Xiaomi Home` > NEXT > Click here to login > Sign in with Xiaomi account\n\n[![Open your Home Assistant instance and start setting up a new integration.](https://my.home-assistant.io/badges/config_flow_start.svg)](https://my.home-assistant.io/redirect/config_flow_start/?domain=xiaomi_home)\n\n### Add MIoT Devices\n\nAfter logging in successfully, a dialog box named \"Select Home and Devices\" pops up. You can select the home containing the device that you want to import in Home Assistant.\n\n### Multiple User Login\n\nAfter a Xiaomi account login and its user configuration are completed, you can continue to add other Xiaomi accounts in the configured Xiaomi Home Integration page.\n\nMethod: [Settings > Devices & services > Configured > Xiaomi Home](https://my.home-assistant.io/redirect/integration/?domain=xiaomi_home) > ADD HUB > NEXT > Click here to login > Sign in with Xiaomi account\n\n[![Open your Home Assistant instance and show an integration.](https://my.home-assistant.io/badges/integration.svg)](https://my.home-assistant.io/redirect/integration/?domain=xiaomi_home)\n\n### Update Configurations\n\nYou can change the configurations in the \"Configuration Options\" dialog box, in which you can update your user nickname and the list of the devices importing from Xiaomi Home APP, etc.\n\nMethod: [Settings > Devices & services > Configured > Xiaomi Home](https://my.home-assistant.io/redirect/integration/?domain=xiaomi_home) > CONFIGURE > Select the option to update\n\n### Debug Mode for Action\n\nYou can manually send Action command message with parameters to the device when the debug mode for action is activated. The user interface for sending the Action command with parameters is shown as a Text entity.\n\nMethod: [Settings > Devices & services > Configured > Xiaomi Home](https://my.home-assistant.io/redirect/integration/?domain=xiaomi_home) > CONFIGURE > Debug mode for action\n\n## Security\n\nXiaomi Home Integration and the affiliated cloud interface is provided by Xiaomi officially. You need to use your Xiaomi account to login to get your device list. Xiaomi Home Integration implements OAuth 2.0 login process, which does not keep your account password in the Home Assistant application. However, due to the limitation of the Home Assistant platform, the user information (including device information, certificates, tokens, etc.) of your Xiaomi account will be saved in the Home Assistant configuration file in clear text after successful login. You need to ensure that your Home Assistant configuration file is properly stored. The exposure of your configuration file may result in others logging in with your identity.\n\n> If you suspect that your OAuth 2.0 token has been leaked, you can revoke the login authorization of your Xiaomi account by the following steps: Xiaomi Home APP -> Profile -> Click your username and get into Xiaomi Account management page -> Basic info: Apps -> Xiaomi Home (Home Assistant Integration) -> Remove\n\n## FAQ\n\n- Does Xiaomi Home Integration support all Xiaomi Home devices?\n\n  Xiaomi Home Integration currently supports most categories of Home device. Only a few categories are not supported. They are Bluetooth device, infrared device and virtual device.\n\n- Does Xiaomi Home Integration support multiple Xiaomi accounts?\n\n  Yes, it supports multiple Xiaomi accounts. Furthermore, Xiaomi Home Integration allows that devices belonging to different accounts can be added to a same area.\n\n- Does Xiaomi Home Integration support local control?\n\n  Local control is implemented by [Xiaomi Central Hub Gateway](https://www.mi.com/shop/buy/detail?product_id=15755&cfrom=search) (firmware version 3.4.0_0000 above) or Xiaomi home devices with built-in central hub gateway (software version 0.8.0 above) inside. If you do not have a Xiaomi central hub gateway or other devices having central hub gateway function, all control commands are sent through Xiaomi Cloud. The firmware for Xiaomi central hub gateway including the built-in central hub gateway supporting Home Assistant local control feature has not been released yet. Please refer to MIoT team's notification for upgrade plans.\n\n  Xiaomi central hub gateway is only available in mainland China. In other regions, it is not available.\n\n  Xiaomi Home Integration can also implement partial local control by enabling Xiaomi LAN control function. Xiaomi LAN control function can only control IP devices (devices connected to the router via WiFi or ethernet cable) in the same local area network as Home Assistant. It cannot control BLE Mesh, ZigBee, etc. devices. This function may cause some abnormalities. We recommend not to use this function. Xiaomi LAN control function is enabled by [Settings > Devices & services > Configured > Xiaomi Home](https://my.home-assistant.io/redirect/integration/?domain=xiaomi_home) > CONFIGURE > Update LAN control configuration\n\n  Xiaomi LAN control function is not restricted by region. It is available in all regions. However, if there is a central gateway in the local area network where Home Assistant is located, even Xiaomi LAN control function is enabled in the integration, it will not take effect.\n\n- In which regions is Xiaomi Home Integration available?\n\n  Xiaomi Home Integration can be used in the mainland of China, Europe, India, Russia, Singapore, and USA. As user data in Xiaomi Cloud of different regions is isolated, you need to choose your region when importing MIoT devices in the configuration process. Xiaomi Home Integration allows you to import devices of different regions to a same area.\n\n## Principle of Messaging\n\n### Control through the Cloud\n\n<div align=center>\n<img src=\"./doc/images/cloud_control.jpg\" width=300>\n\nImage 1: Cloud control architecture\n\n </div>\n\nXiaomi Home Integration subscribes to the interested device messages on the MQTT Broker in MIoT Cloud. When a device property changes or a device event occurs, the device sends an upstream message to MIoT Cloud, and the MQTT Broker pushes the subscribed device message to Xiaomi Home Integration. Because Xiaomi Home Integration does not need to poll to obtain the current device property value in the cloud, it can immediately receive the notification message when the properties change or the events occur. Thanks to the message subscription mechanism, Xiaomi Home Integration only queries the properties of all devices from the cloud once when the integration configuration is completed, which puts little access pressure on the cloud.\n\nXiaomi Home Integration sends command messages to the devices via the HTTP interface of MIoT Cloud to control devices. The device reacts and responds after receiving the downstream message sent forward by MIoT Cloud.\n\n### Control locally\n\n<div align=center>\n<img src=\"./doc/images/local_control.jpg\" width=300>\n\nImage 2: Local control architecture\n\n</div>\n\nXiaomi central hub gateway contains a standard MQTT Broker, which implements a complete subscribe-publish mechanism. Xiaomi Home Integration subscribes to the interested device messages through Xiaomi central hub gateway. When a device property changes or a device event occurs, the device sends an upstream message to Xiaomi central hub gateway, and the MQTT Broker pushes the subscribed device message to Xiaomi Home Integration.\n\nWhen Xiaomi Home Integration needs to control a device, it publishes a device command message to the MQTT Broker, which is then forwarded to the device by Xiaomi central hub gateway. The device reacts and responds after receiving the downstream message from the gateway.\n\n## Mapping Relationship between MIoT-Spec-V2 and Home Assistant Entity\n\n[MIoT-Spec-V2](https://iot.mi.com/v2/new/doc/introduction/knowledge/spec) is the abbreviation for MIoT Specification Version 2, which is an IoT protocol formulated by Xiaomi IoT platform to give a standard functional description of IoT devices. It includes function definition (referred to as data model by other IoT platforms), interaction model, message format, and encoding.\n\nIn MIoT-Spec-V2 protocol, a product is defined as a device. A device contains several services. A service may have some properties, events and actions. Xiaomi Home Integration creates Home Assistant entities according to MIoT-Spec-V2. The conversion relationship is as follows.\n\n### General Conversion\n\n- Property\n\n| access       | format                | value-list   | value-range | Entity in Home Assistant |\n| ------------ | --------------------- | ------------ | ----------- | ------------------------ |\n| writable     | string                | -            | -           | Text                     |\n| writable     | bool                  | -            | -           | Switch                   |\n| writable     | not string & not bool | existent     | -           | Select                   |\n| writable     | not string & not bool | non-existent | existent    | Number                   |\n| not writable | -                     | -            | -           | Sensor                   |\n\n- Event\n\nMIoT-Spec-V2 event is transformed to Event entity in Home Assistant. The event's parameters are also passed to entity's `_trigger_event`.\n\n- Action\n\n| in        | Entity in Home Assistant |\n| --------- | ------------------------ |\n| empty     | Button                   |\n| not empty | Notify                   |\n\nIf the debug mode for action is activated, the Text entity will be created when the \"in\" field in the action spec is not empty.\n\nThe \"Attribute\" item in the entity details page displays the format of the input parameter which is an ordered list, enclosed in square brackets []. The string elements in the list are enclosed in double quotation marks \"\".\n\nFor example, the \"Attributes\" item in the details page of the Notify entity converted by the \"Intelligent Speaker Execute Text Directive\" action of xiaomi.wifispeaker.s12 siid=5, aiid=5 instance shows the action params as `[Text Content(str), Silent Execution(bool)]`. A properly formatted input is `[\"Hello\", true]`.\n\n### Specific Conversion\n\nMIoT-Spec-V2 uses URN for defining types. The format is `urn:<namespace>:<type>:<name>:<value>[:<vendor-product>:<version>]`, in which `name` is a human-readable word or phrase describing the instance of device, service, property, event and action. Xiaomi Home Integration first determines whether to convert the MIoT-Spec-V2 instance into a specific Home Assistant entity based on the instance's name. For the instance that does not meet the specific conversion rules, general conversion rules are used for conversion.\n\n`namespace` is the namespace of MIoT-Spec-V2 instance. When its value is miot-spec-v2, it means that the specification is defined by Xiaomi. When its value is bluetooth-spec, it means that the specification is defined by Bluetooth Special Interest Group (SIG). When its value is not miot-spec-v2 or bluetooth-spec, it means that the specification is defined by other vendors. If MIoT-Spec-V2 `namespace` is not miot-spec-v2, a star mark `*` is added in front of the entity's name .\n\n- Device\n\nThe conversion follows `SPEC_DEVICE_TRANS_MAP`.\n\n```\n{\n    '<device instance name>':{\n        'required':{\n            '<service instance name>':{\n                'required':{\n                    'properties': {\n                        '<property instance name>': set<property access: str>\n                    },\n                    'events': set<event instance name: str>,\n                    'actions': set<action instance name: str>\n                },\n                'optional':{\n                    'properties': set<property instance name: str>,\n                    'events': set<event instance name: str>,\n                    'actions': set<action instance name: str>\n                }\n            }\n        },\n        'optional':{\n            '<service instance name>':{\n                'required':{\n                    'properties': {\n                        '<property instance name>': set<property access: str>\n                    },\n                    'events': set<event instance name: str>,\n                    'actions': set<action instance name: str>\n                },\n                'optional':{\n                    'properties': set<property instance name: str>,\n                    'events': set<event instance name: str>,\n                    'actions': set<action instance name: str>\n                }\n            }\n        },\n        'entity': str\n    }\n}\n```\n\nThe \"required\" field under \"device instance name\" indicates the required services of the device. The \"optional\" field under \"device instance name\" indicates the optional services of the device. The \"entity\" field indicates the Home Assistant entity to be created. The \"required\" and the \"optional\" field under \"service instance name\" are required and optional properties, events and actions of the service respectively. The value of \"property instance name\" under \"required\" \"properties\" field is the access mode of the property. The condition for a successful match is that the value of \"property instance name\" is a subset of the access mode of the corresponding MIoT-Spec-V2 property instance.\n\nHome Assistant entity will not be created if MIoT-Spec-V2 device instance does not contain all required services, properties, events or actions.\n\n- Service\n\nThe conversion follows `SPEC_SERVICE_TRANS_MAP`.\n\n```\n{\n    '<service instance name>':{\n        'required':{\n            'properties': {\n                '<property instance name>': set<property access: str>\n            },\n            'events': set<event instance name: str>,\n            'actions': set<action instance name: str>\n        },\n        'optional':{\n            'properties': set<property instance name: str>,\n            'events': set<event instance name: str>,\n            'actions': set<action instance name: str>\n        },\n        'entity': str\n    }\n}\n```\n\nThe \"required\" field under \"service instance name\" indicates the required properties, events and actions of the service. The \"optional\" field indicates the optional properties, events and actions of the service. The \"entity\" field indicates the Home Assistant entity to be created. The value of \"property instance name\" under \"required\" \"properties\" field is the access mode of the property. The condition for a successful match is that the value of \"property instance name\" is a subset of the access mode of the corresponding MIoT-Spec-V2 property instance.\n\nHome Assistant entity will not be created if MIoT-Spec-V2 service instance does not contain all required properties, events or actions.\n\n- Property\n\nThe conversion follows `SPEC_PROP_TRANS_MAP`.\n\n```\n{\n    'entities':{\n        '<entity name>':{\n            'format': set<str>,\n            'access': set<str>\n        }\n    },\n    'properties': {\n        '<property instance name>':{\n            'device_class': str,\n            'entity': str\n        }\n    }\n}\n```\n\nThe \"format\" field under \"entity name\" represents the data format of the property, and matching with one value indicates a successful match. The \"access\" field under \"entity name\" represents the access mode of the property, and matching with all values is considered a successful match.\n\nThe \"entity\" field under \"property instance name\", of which value is one of entity name under \"entities\" field, indicates the Home Assistant entity to be created. The \"device_class\" field under \"property instance name\" indicates the Home Assistant entity's `_attr_device_class`.\n\n- Event\n\nThe conversion follows `SPEC_EVENT_TRANS_MAP`.\n\n```\n{\n    '<event instance name>': str\n}\n```\n\nThe value of the event instance name indicates `_attr_device_class` of the Home Assistant entity to be created.\n\n### MIoT-Spec-V2 Filter\n\n`spec_filter.json` is used to filter out the MIoT-Spec-V2 instance that will not be converted to Home Assistant entity.\n\nThe format of `spec_filter.json` is as follows.\n\n```\n{\n    \"<MIoT-Spec-V2 device instance>\":{\n        \"services\": list<service_iid: str>,\n        \"properties\": list<service_iid.property_iid: str>,\n        \"events\": list<service_iid.event_iid: str>,\n        \"actions\": list<service_iid.action_iid: str>,\n    }\n}\n```\n\nThe key of `spec_filter.json` dictionary is the urn excluding the \"version\" field of the MIoT-Spec-V2 device instance. The firmware of different versions of the same product may be associated with the MIoT-Spec-V2 device instances of different versions. It is required that the MIoT-Spec-V2 instance of a higher version must contain all MIoT-Spec-V2 instances of the lower versions when a vendor defines the MIoT-Spec-V2 of its product on MIoT platform. Thus, the key of `spec_filter.json` does not need to specify the version number of MIoT-Spec-V2 device instance.\n\nThe value of \"services\", \"properties\", \"events\" or \"actions\" fields under \"device instance\" is the instance id (iid) of the service, property, event or action that will be ignored in the conversion process. Wildcard matching is supported.\n\nExample:\n\n```\n{\n    \"urn:miot-spec-v2:device:television:0000A010:xiaomi-rmi1\":{\n        \"services\": [\"*\"]   # Filter out all services. It is equivalent to completely ignoring the device with such MIoT-Spec-V2 device instance.\n    },\n    \"urn:miot-spec-v2:device:gateway:0000A019:xiaomi-hub1\": {\n        \"services\": [\"3\"],  # Filter out the service whose iid=3.\n        \"properties\": [\"4.*\"]   # Filter out all properties in the service whose iid=4.\n        \"events\": [\"4.1\"],  # Filter out the iid=1 event in the iid=4 service.\n        \"actions\": [\"4.1\"]  # Filter out the iid=1 action in the iid=4 service.\n    }\n}\n```\n\nDevice information service (urn:miot-spec-v2:service:device-information:00007801) of all devices will never be converted to Home Assistant entity.\n\n## Multiple Language Support\n\nThere are 8 languages available for selection in the config flow language option of Xiaomi Home, including Simplified Chinese, Traditional Chinese, English, Spanish, Russian, French, German, and Japanese. The config flow page in Simplified Chinese and English has been manually reviewed by the developer. Other languages are translated by machine translation. If you want to modify the words and sentences in the config flow page, you need to modify the json file of the certain language in `custom_components/xiaomi_home/translations/` and `custom_components/xiaomi_home/miot/i18n/` directory.\n\nWhen displaying Home Assistant entity name, Xiaomi Home downloads the multiple language file configured by the device vendor from MIoT Cloud, which contains translations for MIoT-Spec-V2 instances of the device. `multi_lang.json` is a locally maintained multiple language dictionary, which has a higher priority than the multiple language file obtained from the cloud and can be used to supplement or modify the multiple language translation of devices.\n\nThe format of `multi_lang.json` is as follows.\n\n```\n{\n    \"<MIoT-Spec-V2 device instance>\": {\n        \"<language code>\": {\n            \"<instance code>\": <translation: str>\n        }\n    }\n}\n```\n\nThe key of `multi_lang.json` dictionary is the urn excluding the \"version\" field of the MIoT-Spec-V2 device instance.\n\nThe language code is zh-Hans, zh-Hant, en, es, ru, fr, de, or ja, corresponding to the 8 selectable languages mentioned above.\n\nThe instance code is the code of the MIoT-Spec-V2 instance, which is in the format of:\n\n```\nservice:<siid>                  # service\nservice:<siid>:property:<piid>  # property\nservice:<siid>:property:<piid>:valuelist:<index> # The index of a value in the value-list of a property\nservice:<siid>:event:<eiid>     # event\nservice:<siid>:action:<aiid>    # action\n```\n\nsiid, piid, eiid, aiid and value are all decimal three-digit integers.\n\nExample:\n\n```\n{\n    \"urn:miot-spec-v2:device:health-pot:0000A051:chunmi-a1\": {\n        \"zh-Hant\": {\n            \"service:002\": \"養生壺\",\n            \"service:002:property:001\": \"工作狀態\",\n            \"service:002:property:001:valuelist:000\": \"待機中\",\n            \"service:002:action:002\": \"停止烹飪\",\n            \"service:005:event:001\": \"烹飪完成\"\n        }\n    }\n}\n```\n\n> If you edit `specv2entity.py`, `spec_filter.json` or `multi_lang.json` in the `custom_components/xiaomi_home/miot/specs` directory in your Home Assistant, you need to update the entity conversion rule in the integration's CONFIGURE page to take effect. Method: [Settings > Devices & services > Configured > Xiaomi Home](https://my.home-assistant.io/redirect/integration/?domain=xiaomi_home) > CONFIGURE > Update Entity Conversion Rule\n\n## Documents\n\n- [License](./LICENSE.md)\n- Contribution Guidelines: [English](./CONTRIBUTING.md) | [简体中文](./doc/CONTRIBUTING_zh.md)\n- [ChangeLog](./CHANGELOG.md)\n- Development Documents: https://developers.home-assistant.io/docs/creating_component_index\n\n## Directory Structure\n\n- miot: core code.\n- miot/miot_client: Adding a login user in the integration needs adding a miot_client instance.\n- miot/miot_cloud: Contains functions related to the cloud service, including OAuth login process, HTTP interface functions (to get the user information, to send the device control command, etc.)\n- miot/miot_device: Device entity, including device information, processing logic of property, event and action.\n- miot/miot_mips: Message bus for subscribing and publishing method.\n- miot/miot_spec: Parse MIoT-Spec-V2.\n- miot/miot_lan: Device LAN control, including device discovery, device control, etc.\n- miot/miot_mdns: Central hub gateway service LAN discovery.\n- miot/miot_network: Obtain network status and network information.\n- miot/miot_storage: File storage for the integration.\n- miot/test: Test scripts.\n- config_flow: Config flow.\n"
        },
        {
          "name": "custom_components",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "hacs.json",
          "type": "blob",
          "size": 0.0830078125,
          "content": "{\n    \"name\": \"Xiaomi Home\",\n    \"homeassistant\": \"2024.4.4\",\n    \"hacs\": \"1.34.0\"\n}\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 0.748046875,
          "content": "#!/bin/bash\nset -e\n\n# Check the number of input parameters.\nif [ $# -ne 1 ]; then\n    echo \"usage: $0 [config_path]\"\n    exit 1\nfi\n# Get the config path.\nconfig_path=$1\n# Check if config path exists.\nif [ ! -d \"$config_path\" ]; then\n    echo \"$config_path does not exist\"\n    exit 1\nfi\n\n# Get the script path.\nscript_path=$(dirname \"$0\")\n\n# Set source and target\ncomponent_name=xiaomi_home\nsource_path=\"$script_path/custom_components/$component_name\"\ntarget_root=\"$config_path/custom_components\"\ntarget_path=\"$target_root/$component_name\"\n\n# Remove the old version.\nrm -rf \"$target_path\"\n\n# Copy the new version.\nmkdir -p \"$target_root\"\ncp -r \"$source_path\" \"$target_path\"\n\n# Done.\necho \"Xiaomi Home installation is completed. Please restart Home Assistant.\"\nexit 0\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}