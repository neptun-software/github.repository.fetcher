{
  "metadata": {
    "timestamp": 1736561354257,
    "page": 385,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pallets/jinja",
      "stars": 10504,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2275390625,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 4\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nend_of_line = lf\ncharset = utf-8\nmax_line_length = 88\n\n[*.{css,html,js,json,jsx,scss,ts,tsx,yaml,yml}]\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0869140625,
          "content": ".idea/\n.vscode/\n.venv*/\nvenv*/\n__pycache__/\ndist/\n.coverage*\nhtmlcov/\n.tox/\ndocs/_build/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.36328125,
          "content": "repos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.8.4\n    hooks:\n      - id: ruff\n      - id: ruff-format\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: check-merge-conflict\n      - id: debug-statements\n      - id: fix-byte-order-marker\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.2041015625,
          "content": "version: 2\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: '3.12'\npython:\n  install:\n    - requirements: requirements/docs.txt\n    - method: pip\n      path: .\nsphinx:\n  builder: dirhtml\n  fail_on_warning: true\n"
        },
        {
          "name": "CHANGES.rst",
          "type": "blob",
          "size": 41.5556640625,
          "content": ".. currentmodule:: jinja2\n\nVersion 3.2.0\n-------------\n\nUnreleased\n\n-   Drop support for Python 3.7.\n-   Use modern packaging metadata with ``pyproject.toml`` instead of ``setup.cfg``.\n    :pr:`1793`\n-   Use ``flit_core`` instead of ``setuptools`` as build backend.\n\n\nVersion 3.1.5\n-------------\n\nReleased 2024-12-21\n\n-   The sandboxed environment handles indirect calls to ``str.format``, such as\n    by passing a stored reference to a filter that calls its argument.\n    :ghsa:`q2x7-8rv6-6q7h`\n-   Escape template name before formatting it into error messages, to avoid\n    issues with names that contain f-string syntax.\n    :issue:`1792`, :ghsa:`gmj6-6f8f-6699`\n-   Sandbox does not allow ``clear`` and ``pop`` on known mutable sequence\n    types. :issue:`2032`\n-   Calling sync ``render`` for an async template uses ``asyncio.run``.\n    :pr:`1952`\n-   Avoid unclosed ``auto_aiter`` warnings. :pr:`1960`\n-   Return an ``aclose``-able ``AsyncGenerator`` from\n    ``Template.generate_async``. :pr:`1960`\n-   Avoid leaving ``root_render_func()`` unclosed in\n    ``Template.generate_async``. :pr:`1960`\n-   Avoid leaving async generators unclosed in blocks, includes and extends.\n    :pr:`1960`\n-   The runtime uses the correct ``concat`` function for the current environment\n    when calling block references. :issue:`1701`\n-   Make ``|unique`` async-aware, allowing it to be used after another\n    async-aware filter. :issue:`1781`\n-   ``|int`` filter handles ``OverflowError`` from scientific notation.\n    :issue:`1921`\n-   Make compiling deterministic for tuple unpacking in a ``{% set ... %}``\n    call. :issue:`2021`\n-   Fix dunder protocol (`copy`/`pickle`/etc) interaction with ``Undefined``\n    objects. :issue:`2025`\n-   Fix `copy`/`pickle` support for the internal ``missing`` object.\n    :issue:`2027`\n-   ``Environment.overlay(enable_async)`` is applied correctly. :pr:`2061`\n-   The error message from ``FileSystemLoader`` includes the paths that were\n    searched. :issue:`1661`\n-   ``PackageLoader`` shows a clearer error message when the package does not\n    contain the templates directory. :issue:`1705`\n-   Improve annotations for methods returning copies. :pr:`1880`\n-   ``urlize`` does not add ``mailto:`` to values like `@a@b`. :pr:`1870`\n-   Tests decorated with `@pass_context`` can be used with the ``|select``\n    filter. :issue:`1624`\n-   Using ``set`` for multiple assignment (``a, b = 1, 2``) does not fail when the\n    target is a namespace attribute. :issue:`1413`\n-   Using ``set`` in all branches of ``{% if %}{% elif %}{% else %}`` blocks\n    does not cause the variable to be considered initially undefined.\n    :issue:`1253`\n\n\nVersion 3.1.4\n-------------\n\nReleased 2024-05-05\n\n-   The ``xmlattr`` filter does not allow keys with ``/`` solidus, ``>``\n    greater-than sign, or ``=`` equals sign, in addition to disallowing spaces.\n    Regardless of any validation done by Jinja, user input should never be used\n    as keys to this filter, or must be separately validated first.\n    :ghsa:`h75v-3vvj-5mfj`\n\n\nVersion 3.1.3\n-------------\n\nReleased 2024-01-10\n\n-   Fix compiler error when checking if required blocks in parent templates are\n    empty. :pr:`1858`\n-   ``xmlattr`` filter does not allow keys with spaces. :ghsa:`h5c8-rqwp-cp95`\n-   Make error messages stemming from invalid nesting of ``{% trans %}`` blocks\n    more helpful. :pr:`1918`\n\n\nVersion 3.1.2\n-------------\n\nReleased 2022-04-28\n\n-   Add parameters to ``Environment.overlay`` to match ``__init__``.\n    :issue:`1645`\n-   Handle race condition in ``FileSystemBytecodeCache``. :issue:`1654`\n\n\nVersion 3.1.1\n-------------\n\nReleased 2022-03-25\n\n-   The template filename on Windows uses the primary path separator.\n    :issue:`1637`\n\n\nVersion 3.1.0\n-------------\n\nReleased 2022-03-24\n\n-   Drop support for Python 3.6. :pr:`1534`\n-   Remove previously deprecated code. :pr:`1544`\n\n    -   ``WithExtension`` and ``AutoEscapeExtension`` are built-in now.\n    -   ``contextfilter`` and ``contextfunction`` are replaced by\n        ``pass_context``. ``evalcontextfilter`` and\n        ``evalcontextfunction`` are replaced by ``pass_eval_context``.\n        ``environmentfilter`` and ``environmentfunction`` are replaced\n        by ``pass_environment``.\n    -   ``Markup`` and ``escape`` should be imported from MarkupSafe.\n    -   Compiled templates from very old Jinja versions may need to be\n        recompiled.\n    -   Legacy resolve mode for ``Context`` subclasses is no longer\n        supported. Override ``resolve_or_missing`` instead of\n        ``resolve``.\n    -   ``unicode_urlencode`` is renamed to ``url_quote``.\n\n-   Add support for native types in macros. :issue:`1510`\n-   The ``{% trans %}`` tag can use ``pgettext`` and ``npgettext`` by\n    passing a context string as the first token in the tag, like\n    ``{% trans \"title\" %}``. :issue:`1430`\n-   Update valid identifier characters from Python 3.6 to 3.7.\n    :pr:`1571`\n-   Filters and tests decorated with ``@async_variant`` are pickleable.\n    :pr:`1612`\n-   Add ``items`` filter. :issue:`1561`\n-   Subscriptions (``[0]``, etc.) can be used after filters, tests, and\n    calls when the environment is in async mode. :issue:`1573`\n-   The ``groupby`` filter is case-insensitive by default, matching\n    other comparison filters. Added the ``case_sensitive`` parameter to\n    control this. :issue:`1463`\n-   Windows drive-relative path segments in template names will not\n    result in ``FileSystemLoader`` and ``PackageLoader`` loading from\n    drive-relative paths. :pr:`1621`\n\n\nVersion 3.0.3\n-------------\n\nReleased 2021-11-09\n\n-   Fix traceback rewriting internals for Python 3.10 and 3.11.\n    :issue:`1535`\n-   Fix how the native environment treats leading and trailing spaces\n    when parsing values on Python 3.10. :pr:`1537`\n-   Improve async performance by avoiding checks for common types.\n    :issue:`1514`\n-   Revert change to ``hash(Node)`` behavior. Nodes are hashed by id\n    again :issue:`1521`\n-   ``PackageLoader`` works when the package is a single module file.\n    :issue:`1512`\n\n\nVersion 3.0.2\n-------------\n\nReleased 2021-10-04\n\n-   Fix a loop scoping bug that caused assignments in nested loops\n    to still be referenced outside of it. :issue:`1427`\n-   Make ``compile_templates`` deterministic for filter and import\n    names. :issue:`1452, 1453`\n-   Revert an unintended change that caused ``Undefined`` to act like\n    ``StrictUndefined`` for the ``in`` operator. :issue:`1448`\n-   Imported macros have access to the current template globals in async\n    environments. :issue:`1494`\n-   ``PackageLoader`` will not include a current directory (.) path\n    segment. This allows loading templates from the root of a zip\n    import. :issue:`1467`\n\n\nVersion 3.0.1\n-------------\n\nReleased 2021-05-18\n\n-   Update MarkupSafe dependency to >= 2.0. :pr:`1418`\n-   Mark top-level names as exported so type checking understands\n    imports in user projects. :issue:`1426`\n-   Fix some types that weren't available in Python 3.6.0. :issue:`1433`\n-   The deprecation warning for unneeded ``autoescape`` and ``with_``\n    extensions shows more relevant context. :issue:`1429`\n-   Fixed calling deprecated ``jinja2.Markup`` without an argument.\n    Use ``markupsafe.Markup`` instead. :issue:`1438`\n-   Calling sync ``render`` for an async template uses ``asyncio.new_event_loop``\n    This fixes a deprecation that Python 3.10 introduces. :issue:`1443`\n\n\nVersion 3.0.0\n-------------\n\nReleased 2021-05-11\n\n-   Drop support for Python 2.7 and 3.5.\n-   Bump MarkupSafe dependency to >=1.1.\n-   Bump Babel optional dependency to >=2.1.\n-   Remove code that was marked deprecated.\n-   Add type hinting. :pr:`1412`\n-   Use :pep:`451` API to load templates with\n    :class:`~loaders.PackageLoader`. :issue:`1168`\n-   Fix a bug that caused imported macros to not have access to the\n    current template's globals. :issue:`688`\n-   Add ability to ignore ``trim_blocks`` using ``+%}``. :issue:`1036`\n-   Fix a bug that caused custom async-only filters to fail with\n    constant input. :issue:`1279`\n-   Fix UndefinedError incorrectly being thrown on an undefined variable\n    instead of ``Undefined`` being returned on\n    ``NativeEnvironment`` on Python 3.10. :issue:`1335`\n-   Blocks can be marked as ``required``. They must be overridden at\n    some point, but not necessarily by the direct child. :issue:`1147`\n-   Deprecate the ``autoescape`` and ``with`` extensions, they are\n    built-in to the compiler. :issue:`1203`\n-   The ``urlize`` filter recognizes ``mailto:`` links and takes\n    ``extra_schemes`` (or ``env.policies[\"urlize.extra_schemes\"]``) to\n    recognize other schemes. It tries to balance parentheses within a\n    URL instead of ignoring trailing characters. The parsing in general\n    has been updated to be more efficient and match more cases. URLs\n    without a scheme are linked as ``https://`` instead of ``http://``.\n    :issue:`522, 827, 1172`, :pr:`1195`\n-   Filters that get attributes, such as ``map`` and ``groupby``, can\n    use a false or empty value as a default. :issue:`1331`\n-   Fix a bug that prevented variables set in blocks or loops from\n    being accessed in custom context functions. :issue:`768`\n-   Fix a bug that caused scoped blocks from accessing special loop\n    variables. :issue:`1088`\n-   Update the template globals when calling\n    ``Environment.get_template(globals=...)`` even if the template was\n    already loaded. :issue:`295`\n-   Do not raise an error for undefined filters in unexecuted\n    if-statements and conditional expressions. :issue:`842`\n-   Add ``is filter`` and ``is test`` tests to test if a name is a\n    registered filter or test. This allows checking if a filter is\n    available in a template before using it. Test functions can be\n    decorated with ``@pass_environment``, ``@pass_eval_context``,\n    or ``@pass_context``. :issue:`842`, :pr:`1248`\n-   Support ``pgettext`` and ``npgettext`` (message contexts) in i18n\n    extension. :issue:`441`\n-   The ``|indent`` filter's ``width`` argument can be a string to\n    indent by. :pr:`1167`\n-   The parser understands hex, octal, and binary integer literals.\n    :issue:`1170`\n-   ``Undefined.__contains__`` (``in``) raises an ``UndefinedError``\n    instead of a ``TypeError``. :issue:`1198`\n-   ``Undefined`` is iterable in an async environment. :issue:`1294`\n-   ``NativeEnvironment`` supports async mode. :issue:`1362`\n-   Template rendering only treats ``\\n``, ``\\r\\n`` and ``\\r`` as line\n    breaks. Other characters are left unchanged. :issue:`769, 952, 1313`\n-   ``|groupby`` filter takes an optional ``default`` argument.\n    :issue:`1359`\n-   The function and filter decorators have been renamed and unified.\n    The old names are deprecated. :issue:`1381`\n\n    -   ``pass_context`` replaces ``contextfunction`` and\n        ``contextfilter``.\n    -   ``pass_eval_context`` replaces ``evalcontextfunction`` and\n        ``evalcontextfilter``\n    -   ``pass_environment`` replaces ``environmentfunction`` and\n        ``environmentfilter``.\n\n-   Async support no longer requires Jinja to patch itself. It must\n    still be enabled with ``Environment(enable_async=True)``.\n    :issue:`1390`\n-   Overriding ``Context.resolve`` is deprecated, override\n    ``resolve_or_missing`` instead. :issue:`1380`\n\n\nVersion 2.11.3\n--------------\n\nReleased 2021-01-31\n\n-   Improve the speed of the ``urlize`` filter by reducing regex\n    backtracking. Email matching requires a word character at the start\n    of the domain part, and only word characters in the TLD. :pr:`1343`\n\n\nVersion 2.11.2\n--------------\n\nReleased 2020-04-13\n\n-   Fix a bug that caused callable objects with ``__getattr__``, like\n    :class:`~unittest.mock.Mock` to be treated as a\n    :func:`contextfunction`. :issue:`1145`\n-   Update ``wordcount`` filter to trigger :class:`Undefined` methods\n    by wrapping the input in :func:`soft_str`. :pr:`1160`\n-   Fix a hang when displaying tracebacks on Python 32-bit.\n    :issue:`1162`\n-   Showing an undefined error for an object that raises\n    ``AttributeError`` on access doesn't cause a recursion error.\n    :issue:`1177`\n-   Revert changes to :class:`~loaders.PackageLoader` from 2.10 which\n    removed the dependency on setuptools and pkg_resources, and added\n    limited support for namespace packages. The changes caused issues\n    when using Pytest. Due to the difficulty in supporting Python 2 and\n    :pep:`451` simultaneously, the changes are reverted until 3.0.\n    :pr:`1182`\n-   Fix line numbers in error messages when newlines are stripped.\n    :pr:`1178`\n-   The special ``namespace()`` assignment object in templates works in\n    async environments. :issue:`1180`\n-   Fix whitespace being removed before tags in the middle of lines when\n    ``lstrip_blocks`` is enabled. :issue:`1138`\n-   :class:`~nativetypes.NativeEnvironment` doesn't evaluate\n    intermediate strings during rendering. This prevents early\n    evaluation which could change the value of an expression.\n    :issue:`1186`\n\n\nVersion 2.11.1\n--------------\n\nReleased 2020-01-30\n\n-   Fix a bug that prevented looking up a key after an attribute\n    (``{{ data.items[1:] }}``) in an async template. :issue:`1141`\n\n\nVersion 2.11.0\n--------------\n\nReleased 2020-01-27\n\n-   Drop support for Python 2.6, 3.3, and 3.4. This will be the last\n    version to support Python 2.7 and 3.5.\n-   Added a new ``ChainableUndefined`` class to support getitem and\n    getattr on an undefined object. :issue:`977`\n-   Allow ``{%+`` syntax (with NOP behavior) when ``lstrip_blocks`` is\n    disabled. :issue:`748`\n-   Added a ``default`` parameter for the ``map`` filter. :issue:`557`\n-   Exclude environment globals from\n    :func:`meta.find_undeclared_variables`. :issue:`931`\n-   Float literals can be written with scientific notation, like\n    2.56e-3. :issue:`912`, :pr:`922`\n-   Int and float literals can be written with the '_' separator for\n    legibility, like 12_345. :pr:`923`\n-   Fix a bug causing deadlocks in ``LRUCache.setdefault``. :pr:`1000`\n-   The ``trim`` filter takes an optional string of characters to trim.\n    :pr:`828`\n-   A new ``jinja2.ext.debug`` extension adds a ``{% debug %}`` tag to\n    quickly dump the current context and available filters and tests.\n    :issue:`174`, :pr:`798, 983`\n-   Lexing templates with large amounts of whitespace is much faster.\n    :issue:`857`, :pr:`858`\n-   Parentheses around comparisons are preserved, so\n    ``{{ 2 * (3 < 5) }}`` outputs \"2\" instead of \"False\".\n    :issue:`755`, :pr:`938`\n-   Add new ``boolean``, ``false``, ``true``, ``integer`` and ``float``\n    tests. :pr:`824`\n-   The environment's ``finalize`` function is only applied to the\n    output of expressions (constant or not), not static template data.\n    :issue:`63`\n-   When providing multiple paths to ``FileSystemLoader``, a template\n    can have the same name as a directory. :issue:`821`\n-   Always return :class:`Undefined` when omitting the ``else`` clause\n    in a ``{{ 'foo' if bar }}`` expression, regardless of the\n    environment's ``undefined`` class. Omitting the ``else`` clause is a\n    valid shortcut and should not raise an error when using\n    :class:`StrictUndefined`. :issue:`710`, :pr:`1079`\n-   Fix behavior of ``loop`` control variables such as ``length`` and\n    ``revindex0`` when looping over a generator. :issue:`459, 751, 794`,\n    :pr:`993`\n-   Async support is only loaded the first time an environment enables\n    it, in order to avoid a slow initial import. :issue:`765`\n-   In async environments, the ``|map`` filter will await the filter\n    call if needed. :pr:`913`\n-   In for loops that access ``loop`` attributes, the iterator is not\n    advanced ahead of the current iteration unless ``length``,\n    ``revindex``, ``nextitem``, or ``last`` are accessed. This makes it\n    less likely to break ``groupby`` results. :issue:`555`, :pr:`1101`\n-   In async environments, the ``loop`` attributes ``length`` and\n    ``revindex`` work for async iterators. :pr:`1101`\n-   In async environments, values from attribute/property access will\n    be awaited if needed. :pr:`1101`\n-   :class:`~loader.PackageLoader` doesn't depend on setuptools or\n    pkg_resources. :issue:`970`\n-   ``PackageLoader`` has limited support for :pep:`420` namespace\n    packages. :issue:`1097`\n-   Support :class:`os.PathLike` objects in\n    :class:`~loader.FileSystemLoader` and :class:`~loader.ModuleLoader`.\n    :issue:`870`\n-   :class:`~nativetypes.NativeTemplate` correctly handles quotes\n    between expressions. ``\"'{{ a }}', '{{ b }}'\"`` renders as the tuple\n    ``('1', '2')`` rather than the string ``'1, 2'``. :issue:`1020`\n-   Creating a :class:`~nativetypes.NativeTemplate` directly creates a\n    :class:`~nativetypes.NativeEnvironment` instead of a default\n    :class:`Environment`. :issue:`1091`\n-   After calling ``LRUCache.copy()``, the copy's queue methods point to\n    the correct queue. :issue:`843`\n-   Compiling templates always writes UTF-8 instead of defaulting to the\n    system encoding. :issue:`889`\n-   ``|wordwrap`` filter treats existing newlines as separate paragraphs\n    to be wrapped individually, rather than creating short intermediate\n    lines. :issue:`175`\n-   Add ``break_on_hyphens`` parameter to ``|wordwrap`` filter.\n    :issue:`550`\n-   Cython compiled functions decorated as context functions will be\n    passed the context. :pr:`1108`\n-   When chained comparisons of constants are evaluated at compile time,\n    the result follows Python's behavior of returning ``False`` if any\n    comparison returns ``False``, rather than only the last one.\n    :issue:`1102`\n-   Tracebacks for exceptions in templates show the correct line numbers\n    and source for Python >= 3.7. :issue:`1104`\n-   Tracebacks for template syntax errors in Python 3 no longer show\n    internal compiler frames. :issue:`763`\n-   Add a ``DerivedContextReference`` node that can be used by\n    extensions to get the current context and local variables such as\n    ``loop``. :issue:`860`\n-   Constant folding during compilation is applied to some node types\n    that were previously overlooked. :issue:`733`\n-   ``TemplateSyntaxError.source`` is not empty when raised from an\n    included template. :issue:`457`\n-   Passing an ``Undefined`` value to ``get_template`` (such as through\n    ``extends``, ``import``, or ``include``), raises an\n    ``UndefinedError`` consistently. ``select_template`` will show the\n    undefined message in the list of attempts rather than the empty\n    string. :issue:`1037`\n-   ``TemplateSyntaxError`` can be pickled. :pr:`1117`\n\n\nVersion 2.10.3\n--------------\n\nReleased 2019-10-04\n\n-   Fix a typo in Babel entry point in ``setup.py`` that was preventing\n    installation.\n\n\nVersion 2.10.2\n--------------\n\nReleased 2019-10-04\n\n-   Fix Python 3.7 deprecation warnings.\n-   Using ``range`` in the sandboxed environment uses ``xrange`` on\n    Python 2 to avoid memory use. :issue:`933`\n-   Use Python 3.7's better traceback support to avoid a core dump when\n    using debug builds of Python 3.7. :issue:`1050`\n\n\nVersion 2.10.1\n--------------\n\nReleased 2019-04-06\n\n-   ``SandboxedEnvironment`` securely handles ``str.format_map`` in\n    order to prevent code execution through untrusted format strings.\n    The sandbox already handled ``str.format``.\n\n\nVersion 2.10\n------------\n\nReleased 2017-11-08\n\n-   Added a new extension node called ``OverlayScope`` which can be used\n    to create an unoptimized scope that will look up all variables from\n    a derived context.\n-   Added an ``in`` test that works like the in operator. This can be\n    used in combination with ``reject`` and ``select``.\n-   Added ``previtem`` and ``nextitem`` to loop contexts, providing\n    access to the previous/next item in the loop. If such an item does\n    not exist, the value is undefined.\n-   Added ``changed(*values)`` to loop contexts, providing an easy way\n    of checking whether a value has changed since the last iteration (or\n    rather since the last call of the method)\n-   Added a ``namespace`` function that creates a special object which\n    allows attribute assignment using the ``set`` tag. This can be used\n    to carry data across scopes, e.g. from a loop body to code that\n    comes after the loop.\n-   Added a ``trimmed`` modifier to ``{% trans %}`` to strip linebreaks\n    and surrounding whitespace. Also added a new policy to enable this\n    for all ``trans`` blocks.\n-   The ``random`` filter is no longer incorrectly constant folded and\n    will produce a new random choice each time the template is rendered.\n    :pr:`478`\n-   Added a ``unique`` filter. :pr:`469`\n-   Added ``min`` and ``max`` filters. :pr:`475`\n-   Added tests for all comparison operators: ``eq``, ``ne``, ``lt``,\n    ``le``, ``gt``, ``ge``. :pr:`665`\n-   ``import`` statement cannot end with a trailing comma. :pr:`617`,\n    :pr:`618`\n-   ``indent`` filter will not indent blank lines by default. :pr:`685`\n-   Add ``reverse`` argument for ``dictsort`` filter. :pr:`692`\n-   Add a ``NativeEnvironment`` that renders templates to native Python\n    types instead of strings. :pr:`708`\n-   Added filter support to the block ``set`` tag. :pr:`489`\n-   ``tojson`` filter marks output as safe to match documented behavior.\n    :pr:`718`\n-   Resolved a bug where getting debug locals for tracebacks could\n    modify template context.\n-   Fixed a bug where having many ``{% elif ... %}`` blocks resulted in\n    a \"too many levels of indentation\" error. These blocks now compile\n    to native ``elif ..:`` instead of ``else: if ..:`` :issue:`759`\n\n\nVersion 2.9.6\n-------------\n\nReleased 2017-04-03\n\n-   Fixed custom context behavior in fast resolve mode :issue:`675`\n\n\nVersion 2.9.5\n-------------\n\nReleased 2017-01-28\n\n-   Restored the original repr of the internal ``_GroupTuple`` because\n    this caused issues with ansible and it was an unintended change.\n    :issue:`654`\n-   Added back support for custom contexts that override the old\n    ``resolve`` method since it was hard for people to spot that this\n    could cause a regression.\n-   Correctly use the buffer for the else block of for loops. This\n    caused invalid syntax errors to be caused on 2.x and completely\n    wrong behavior on Python 3 :issue:`669`\n-   Resolve an issue where the ``{% extends %}`` tag could not be used\n    with async environments. :issue:`668`\n-   Reduce memory footprint slightly by reducing our unicode database\n    dump we use for identifier matching on Python 3 :issue:`666`\n-   Fixed autoescaping not working for macros in async compilation mode.\n    :issue:`671`\n\n\nVersion 2.9.4\n-------------\n\nReleased 2017-01-10\n\n-   Solved some warnings for string literals. :issue:`646`\n-   Increment the bytecode cache version which was not done due to an\n    oversight before.\n-   Corrected bad code generation and scoping for filtered loops.\n    :issue:`649`\n-   Resolved an issue where top-level output silencing after known\n    extend blocks could generate invalid code when blocks where\n    contained in if statements. :issue:`651`\n-   Made the ``truncate.leeway`` default configurable to improve\n    compatibility with older templates.\n\n\nVersion 2.9.3\n-------------\n\nReleased 2017-01-08\n\n-   Restored the use of blocks in macros to the extend that was possible\n    before. On Python 3 it would render a generator repr instead of the\n    block contents. :issue:`645`\n-   Set a consistent behavior for assigning of variables in inner scopes\n    when the variable is also read from an outer scope. This now sets\n    the intended behavior in all situations however it does not restore\n    the old behavior where limited assignments to outer scopes was\n    possible. For more information and a discussion see :issue:`641`\n-   Resolved an issue where ``block scoped`` would not take advantage of\n    the new scoping rules. In some more exotic cases a variable\n    overridden in a local scope would not make it into a block.\n-   Change the code generation of the ``with`` statement to be in line\n    with the new scoping rules. This resolves some unlikely bugs in edge\n    cases. This also introduces a new internal ``With`` node that can be\n    used by extensions.\n\n\nVersion 2.9.2\n-------------\n\nReleased 2017-01-08\n\n-   Fixed a regression that caused for loops to not be able to use the\n    same variable for the target as well as source iterator.\n    :issue:`640`\n-   Add support for a previously unknown behavior of macros. It used to\n    be possible in some circumstances to explicitly provide a caller\n    argument to macros. While badly buggy and unintended it turns out\n    that this is a common case that gets copy pasted around. To not\n    completely break backwards compatibility with the most common cases\n    it's now possible to provide an explicit keyword argument for caller\n    if it's given an explicit default. :issue:`642`\n\n\nVersion 2.9.1\n-------------\n\nReleased 2017-01-07\n\n-   Resolved a regression with call block scoping for macros. Nested\n    caller blocks that used the same identifiers as outer macros could\n    refer to the wrong variable incorrectly.\n\n\nVersion 2.9\n-----------\n\nReleased 2017-01-07, codename Derivation\n\n-   Change cache key definition in environment. This fixes a performance\n    regression introduced in 2.8.\n-   Added support for ``generator_stop`` on supported Python versions\n    (Python 3.5 and later)\n-   Corrected a long standing issue with operator precedence of math\n    operations not being what was expected.\n-   Added support for Python 3.6 async iterators through a new async\n    mode.\n-   Added policies for filter defaults and similar things.\n-   Urlize now sets \"rel noopener\" by default.\n-   Support attribute fallback for old-style classes in 2.x.\n-   Support toplevel set statements in extend situations.\n-   Restored behavior of Cycler for Python 3 users.\n-   Subtraction now follows the same behavior as other operators on\n    undefined values.\n-   ``map`` and friends will now give better error messages if you\n    forgot to quote the parameter.\n-   Depend on MarkupSafe 0.23 or higher.\n-   Improved the ``truncate`` filter to support better truncation in\n    case the string is barely truncated at all.\n-   Change the logic for macro autoescaping to be based on the runtime\n    autoescaping information at call time instead of macro define time.\n-   Ported a modified version of the ``tojson`` filter from Flask to\n    Jinja and hooked it up with the new policy framework.\n-   Block sets are now marked ``safe`` by default.\n-   On Python 2 the asciification of ASCII strings can now be disabled\n    with the ``compiler.ascii_str`` policy.\n-   Tests now no longer accept an arbitrary expression as first argument\n    but a restricted one. This means that you can now properly use\n    multiple tests in one expression without extra parentheses. In\n    particular you can now write ``foo is divisibleby 2 or foo is\n    divisibleby 3`` as you would expect.\n-   Greatly changed the scoping system to be more consistent with what\n    template designers and developers expect. There is now no more magic\n    difference between the different include and import constructs.\n    Context is now always propagated the same way. The only remaining\n    differences is the defaults for ``with context`` and ``without\n    context``.\n-   The ``with`` and ``autoescape`` tags are now built-in.\n-   Added the new ``select_autoescape`` function which helps configuring\n    better autoescaping easier.\n-   Fixed a runtime error in the sandbox when attributes of async\n    generators were accessed.\n\n\nVersion 2.8.1\n-------------\n\nReleased 2016-12-29\n\n-   Fixed the ``for_qs`` flag for ``urlencode``.\n-   Fixed regression when applying ``int`` to non-string values.\n-   SECURITY: if the sandbox mode is used format expressions are now\n    sandboxed with the same rules as in Jinja. This solves various\n    information leakage problems that can occur with format strings.\n\n\nVersion 2.8\n-----------\n\nReleased 2015-07-26, codename Replacement\n\n-   Added ``target`` parameter to urlize function.\n-   Added support for ``followsymlinks`` to the file system loader.\n-   The truncate filter now counts the length.\n-   Added equalto filter that helps with select filters.\n-   Changed cache keys to use absolute file names if available instead\n    of load names.\n-   Fixed loop length calculation for some iterators.\n-   Changed how Jinja enforces strings to be native strings in Python 2\n    to work when people break their default encoding.\n-   Added ``make_logging_undefined`` which returns an undefined\n    object that logs failures into a logger.\n-   If unmarshalling of cached data fails the template will be reloaded\n    now.\n-   Implemented a block ``set`` tag.\n-   Default cache size was increased to 400 from a low 50.\n-   Fixed ``is number`` test to accept long integers in all Python\n    versions.\n-   Changed ``is number`` to accept Decimal as a number.\n-   Added a check for default arguments followed by non-default\n    arguments. This change makes ``{% macro m(x, y=1, z) %}`` a syntax\n    error. The previous behavior for this code was broken anyway\n    (resulting in the default value being applied to ``y``).\n-   Add ability to use custom subclasses of\n    ``jinja2.compiler.CodeGenerator`` and ``jinja2.runtime.Context`` by\n    adding two new attributes to the environment\n    (``code_generator_class`` and ``context_class``). :pr:`404`\n-   Added support for context/environment/evalctx decorator functions on\n    the finalize callback of the environment.\n-   Escape query strings for urlencode properly. Previously slashes were\n    not escaped in that place.\n-   Add 'base' parameter to 'int' filter.\n\n\nVersion 2.7.3\n-------------\n\nReleased 2014-06-06\n\n-   Security issue: Corrected the security fix for the cache folder.\n    This fix was provided by RedHat.\n\n\nVersion 2.7.2\n-------------\n\nReleased 2014-01-10\n\n-   Prefix loader was not forwarding the locals properly to inner\n    loaders. This is now fixed.\n-   Security issue: Changed the default folder for the filesystem cache\n    to be user specific and read and write protected on UNIX systems.\n    See `Debian bug 734747`_ for more information.\n\n.. _Debian bug 734747: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=734747\n\n\nVersion 2.7.1\n-------------\n\nReleased 2013-08-07\n\n-   Fixed a bug with ``call_filter`` not working properly on environment\n    and context filters.\n-   Fixed lack of Python 3 support for bytecode caches.\n-   Reverted support for defining blocks in included templates as this\n    broke existing templates for users.\n-   Fixed some warnings with hashing of undefineds and nodes if Python\n    is run with warnings for Python 3.\n-   Added support for properly hashing undefined objects.\n-   Fixed a bug with the title filter not working on already uppercase\n    strings.\n\n\nVersion 2.7\n-----------\n\nReleased 2013-05-20, codename Translation\n\n-   Choice and prefix loaders now dispatch source and template lookup\n    separately in order to work in combination with module loaders as\n    advertised.\n-   Fixed filesizeformat.\n-   Added a non-silent option for babel extraction.\n-   Added ``urlencode`` filter that automatically quotes values for URL\n    safe usage with utf-8 as only supported encoding. If applications\n    want to change this encoding they can override the filter.\n-   Added ``keep-trailing-newline`` configuration to environments and\n    templates to optionally preserve the final trailing newline.\n-   Accessing ``last`` on the loop context no longer causes the iterator\n    to be consumed into a list.\n-   Python requirement changed: 2.6, 2.7 or >= 3.3 are required now,\n    supported by same source code, using the \"six\" compatibility\n    library.\n-   Allow ``contextfunction`` and other decorators to be applied to\n    ``__call__``.\n-   Added support for changing from newline to different signs in the\n    ``wordwrap`` filter.\n-   Added support for ignoring memcache errors silently.\n-   Added support for keeping the trailing newline in templates.\n-   Added finer grained support for stripping whitespace on the left\n    side of blocks.\n-   Added ``map``, ``select``, ``reject``, ``selectattr`` and\n    ``rejectattr`` filters.\n-   Added support for ``loop.depth`` to figure out how deep inside a\n    recursive loop the code is.\n-   Disabled py_compile for pypy and python 3.\n\n\nVersion 2.6\n-----------\n\nReleased 2011-07-24, codename Convolution\n\n-   Internal attributes now raise an internal attribute error now\n    instead of returning an undefined. This fixes problems when passing\n    undefined objects to Python semantics expecting APIs.\n-   Traceback support now works properly for PyPy. (Tested with 1.4)\n-   Implemented operator intercepting for sandboxed environments. This\n    allows application developers to disable builtin operators for\n    better security. (For instance limit the mathematical operators to\n    actual integers instead of longs)\n-   Groupby filter now supports dotted notation for grouping by\n    attributes of attributes.\n-   Scoped blocks now properly treat toplevel assignments and imports.\n    Previously an import suddenly \"disappeared\" in a scoped block.\n-   Automatically detect newer Python interpreter versions before\n    loading code from bytecode caches to prevent segfaults on invalid\n    opcodes. The segfault in earlier Jinja versions here was not a\n    Jinja bug but a limitation in the underlying Python interpreter. If\n    you notice Jinja segfaulting in earlier versions after an upgrade\n    of the Python interpreter you don't have to upgrade, it's enough to\n    flush the bytecode cache. This just no longer makes this necessary,\n    Jinja will automatically detect these cases now.\n-   The sum filter can now sum up values by attribute. This is a\n    backwards incompatible change. The argument to the filter previously\n    was the optional starting index which defaults to zero. This now\n    became the second argument to the function because it's rarely used.\n-   Like sum, sort now also makes it possible to order items by\n    attribute.\n-   Like sum and sort, join now also is able to join attributes of\n    objects as string.\n-   The internal eval context now has a reference to the environment.\n-   Added a mapping test to see if an object is a dict or an object with\n    a similar interface.\n\n\nVersion 2.5.5\n-------------\n\nReleased 2010-10-18\n\n-   Built documentation is no longer part of release.\n\n\nVersion 2.5.4\n-------------\n\nReleased 2010-10-17\n\n-   Fixed extensions not loading properly with overlays.\n-   Work around a bug in cpython for the debugger that causes segfaults\n    on 64bit big-endian architectures.\n\n\nVersion 2.5.3\n-------------\n\nReleased 2010-10-17\n\n-   Fixed an operator precedence error introduced in 2.5.2. Statements\n    like \"-foo.bar\" had their implicit parentheses applied around the\n    first part of the expression (\"(-foo).bar\") instead of the more\n    correct \"-(foo.bar)\".\n\n\nVersion 2.5.2\n-------------\n\nReleased 2010-08-18\n\n-   Improved setup.py script to better work with assumptions people\n    might still have from it (``--with-speedups``).\n-   Fixed a packaging error that excluded the new debug support.\n\n\nVersion 2.5.1\n-------------\n\nReleased 2010-08-17\n\n-   StopIteration exceptions raised by functions called from templates\n    are now intercepted and converted to undefineds. This solves a lot\n    of debugging grief. (StopIteration is used internally to abort\n    template execution)\n-   Improved performance of macro calls slightly.\n-   Babel extraction can now properly extract newstyle gettext calls.\n-   Using the variable ``num`` in newstyle gettext for something else\n    than the pluralize count will no longer raise a :exc:`KeyError`.\n-   Removed builtin markup class and switched to markupsafe. For\n    backwards compatibility the pure Python implementation still exists\n    but is pulled from markupsafe by the Jinja developers. The debug\n    support went into a separate feature called \"debugsupport\" and is\n    disabled by default because it is only relevant for Python 2.4\n-   Fixed an issue with unary operators having the wrong precedence.\n\n\nVersion 2.5\n-----------\n\nReleased 2010-05-29, codename Incoherence\n\n-   Improved the sort filter (should have worked like this for a long\n    time) by adding support for case insensitive searches.\n-   Fixed a bug for getattribute constant folding.\n-   Support for newstyle gettext translations which result in a nicer\n    in-template user interface and more consistent catalogs.\n-   It's now possible to register extensions after an environment was\n    created.\n\n\nVersion 2.4.1\n-------------\n\nReleased 2010-04-20\n\n-   Fixed an error reporting bug for undefined.\n\n\nVersion 2.4\n-----------\n\nReleased 2010-04-13, codename Correlation\n\n-   The environment template loading functions now transparently pass\n    through a template object if it was passed to it. This makes it\n    possible to import or extend from a template object that was passed\n    to the template.\n-   Added a ``ModuleLoader`` that can load templates from\n    precompiled sources. The environment now features a method to\n    compile the templates from a configured loader into a zip file or\n    folder.\n-   The _speedups C extension now supports Python 3.\n-   Added support for autoescaping toggling sections and support for\n    evaluation contexts.\n-   Extensions have a priority now.\n\n\nVersion 2.3.1\n-------------\n\nReleased 2010-02-19\n\n-   Fixed an error reporting bug on all python versions\n-   Fixed an error reporting bug on Python 2.4\n\n\nVersion 2.3\n-----------\n\nReleased 2010-02-10, codename 3000 Pythons\n\n-   Fixes issue with code generator that causes unbound variables to be\n    generated if set was used in if-blocks and other small identifier\n    problems.\n-   Include tags are now able to select between multiple templates and\n    take the first that exists, if a list of templates is given.\n-   Fixed a problem with having call blocks in outer scopes that have an\n    argument that is also used as local variable in an inner frame\n    :issue:`360`.\n-   Greatly improved error message reporting :pr:`339`\n-   Implicit tuple expressions can no longer be totally empty. This\n    change makes ``{% if %}`` a syntax error now. :issue:`364`\n-   Added support for translator comments if extracted via babel.\n-   Added with-statement extension.\n-   Experimental Python 3 support.\n\n\nVersion 2.2.1\n-------------\n\nReleased 2009-09-14\n\n-   Fixes some smaller problems for Jinja on Jython.\n\n\nVersion 2.2\n-----------\n\nReleased 2009-09-13, codename Kong\n\n-   Include statements can now be marked with ``ignore missing`` to skip\n    non existing templates.\n-   Priority of ``not`` raised. It's now possible to write ``not foo in\n    bar`` as an alias to ``foo not in bar`` like in python. Previously\n    the grammar required parentheses (``not (foo in bar)``) which was\n    odd.\n-   Fixed a bug that caused syntax errors when defining macros or using\n    the ``{% call %}`` tag inside loops.\n-   Fixed a bug in the parser that made ``{{ foo[1, 2] }}`` impossible.\n-   Made it possible to refer to names from outer scopes in included\n    templates that were unused in the callers frame :issue:`327`\n-   Fixed a bug that caused internal errors if names where used as\n    iteration variable and regular variable *after* the loop if that\n    variable was unused *before* the loop. :pr:`331`\n-   Added support for optional ``scoped`` modifier to blocks.\n-   Added support for line-comments.\n-   Added the ``meta`` module.\n-   Renamed (undocumented) attribute \"overlay\" to \"overlayed\" on the\n    environment because it was clashing with a method of the same name.\n-   Speedup extension is now disabled by default.\n\n\nVersion 2.1.1\n-------------\n\nReleased 2008-12-25\n\n-   Fixed a translation error caused by looping over empty recursive\n    loops.\n\n\nVersion 2.1\n-----------\n\nReleased 2008-11-23, codename Yasuzō\n\n-   Fixed a bug with nested loops and the special loop variable. Before\n    the change an inner loop overwrote the loop variable from the outer\n    one after iteration.\n-   Fixed a bug with the i18n extension that caused the explicit\n    pluralization block to look up the wrong variable.\n-   Fixed a limitation in the lexer that made ``{{ foo.0.0 }}``\n    impossible.\n-   Index based subscribing of variables with a constant value returns\n    an undefined object now instead of raising an index error. This was\n    a bug caused by eager optimizing.\n-   The i18n extension looks up ``foo.ugettext`` now followed by\n    ``foo.gettext`` if an translations object is installed. This makes\n    dealing with custom translations classes easier.\n-   Fixed a confusing behavior with conditional extending. loops were\n    partially executed under some conditions even though they were not\n    part of a visible area.\n-   Added ``sort`` filter that works like ``dictsort`` but for arbitrary\n    sequences.\n-   Fixed a bug with empty statements in macros.\n-   Implemented a bytecode cache system.\n-   The template context is now weakref-able\n-   Inclusions and imports \"with context\" forward all variables now, not\n    only the initial context.\n-   Added a cycle helper called ``cycler``.\n-   Added a joining helper called ``joiner``.\n-   Added a ``compile_expression`` method to the environment that allows\n    compiling of Jinja expressions into callable Python objects.\n-   Fixed an escaping bug in urlize\n\n\nVersion 2.0\n-----------\n\nReleased 2008-07-17, codename Jinjavitus\n\n-   The subscribing of objects (looking up attributes and items) changed\n    from slightly. It's now possible to give attributes or items a\n    higher priority by either using dot-notation lookup or the bracket\n    syntax. This also changed the AST slightly. ``Subscript`` is gone\n    and was replaced with ``Getitem`` and ``Getattr``.\n-   Added support for preprocessing and token stream filtering for\n    extensions. This would allow extensions to allow simplified gettext\n    calls in template data and something similar.\n-   Added ``TemplateStream.dump``.\n-   Added missing support for implicit string literal concatenation.\n    ``{{ \"foo\" \"bar\" }}`` is equivalent to ``{{ \"foobar\" }}``\n-   ``else`` is optional for conditional expressions. If not given it\n    evaluates to ``false``.\n-   Improved error reporting for undefined values by providing a\n    position.\n-   ``filesizeformat`` filter uses decimal prefixes now by default and\n    can be set to binary mode with the second parameter.\n-   Fixed bug in finalizer\n\n\nVersion 2.0rc1\n--------------\n\nReleased 2008-06-09\n\n-   First release of Jinja 2.\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 6.3173828125,
          "content": "How to contribute to Jinja\n==========================\n\nThank you for considering contributing to Jinja!\n\n\nSupport questions\n-----------------\n\nPlease don't use the issue tracker for this. The issue tracker is a\ntool to address bugs and feature requests in Jinja itself. Use one of\nthe following resources for questions about using Jinja or issues with\nyour own code:\n\n-   The ``#get-help`` channel on our Discord chat:\n    https://discord.gg/pallets\n-   The mailing list flask@python.org for long term discussion or larger\n    issues.\n-   Ask on `Stack Overflow`_. Search with Google first using:\n    ``site:stackoverflow.com jinja {search term, exception message, etc.}``\n\n.. _Stack Overflow: https://stackoverflow.com/questions/tagged/jinja?tab=Frequent\n\n\nReporting issues\n----------------\n\nInclude the following information in your post:\n\n-   Describe what you expected to happen.\n-   If possible, include a `minimal reproducible example`_ to help us\n    identify the issue. This also helps check that the issue is not with\n    your own code.\n-   Describe what actually happened. Include the full traceback if there\n    was an exception.\n-   List your Python and Jinja versions. If possible, check if this\n    issue is already fixed in the latest releases or the latest code in\n    the repository.\n\n.. _minimal reproducible example: https://stackoverflow.com/help/minimal-reproducible-example\n\n\nSubmitting patches\n------------------\n\nIf there is not an open issue for what you want to submit, prefer\nopening one for discussion before working on a PR. You can work on any\nissue that doesn't have an open PR linked to it or a maintainer assigned\nto it. These show up in the sidebar. No need to ask if you can work on\nan issue that interests you.\n\nInclude the following in your patch:\n\n-   Use `Black`_ to format your code. This and other tools will run\n    automatically if you install `pre-commit`_ using the instructions\n    below.\n-   Include tests if your patch adds or changes code. Make sure the test\n    fails without your patch.\n-   Update any relevant docs pages and docstrings. Docs pages and\n    docstrings should be wrapped at 72 characters.\n-   Add an entry in ``CHANGES.rst``. Use the same style as other\n    entries. Also include ``.. versionchanged::`` inline changelogs in\n    relevant docstrings.\n\n.. _Black: https://black.readthedocs.io\n.. _pre-commit: https://pre-commit.com\n\n\nFirst time setup\n~~~~~~~~~~~~~~~~\n\n-   Download and install the `latest version of git`_.\n-   Configure git with your `username`_ and `email`_.\n\n    .. code-block:: text\n\n        $ git config --global user.name 'your name'\n        $ git config --global user.email 'your email'\n\n-   Make sure you have a `GitHub account`_.\n-   Fork Jinja to your GitHub account by clicking the `Fork`_ button.\n-   `Clone`_ the main repository locally.\n\n    .. code-block:: text\n\n        $ git clone https://github.com/pallets/jinja\n        $ cd jinja\n\n-   Add your fork as a remote to push your work to. Replace\n    ``{username}`` with your username. This names the remote \"fork\", the\n    default Pallets remote is \"origin\".\n\n    .. code-block:: text\n\n        $ git remote add fork https://github.com/{username}/jinja\n\n-   Create a virtualenv.\n\n    .. code-block:: text\n\n        $ python3 -m venv env\n        $ . env/bin/activate\n\n    On Windows, activating is different.\n\n    .. code-block:: text\n\n        > env\\Scripts\\activate\n\n-   Install the development dependencies, then install Jinja in editable\n    mode.\n\n    .. code-block:: text\n\n        $ pip install -r requirements/dev.txt && pip install -e .\n\n-   Install the pre-commit hooks.\n\n    .. code-block:: text\n\n        $ pre-commit install\n\n.. _latest version of git: https://git-scm.com/downloads\n.. _username: https://docs.github.com/en/github/using-git/setting-your-username-in-git\n.. _email: https://docs.github.com/en/github/setting-up-and-managing-your-github-user-account/setting-your-commit-email-address\n.. _GitHub account: https://github.com/join\n.. _Fork: https://github.com/pallets/jinja/fork\n.. _Clone: https://docs.github.com/en/github/getting-started-with-github/fork-a-repo#step-2-create-a-local-clone-of-your-fork\n\n\nStart coding\n~~~~~~~~~~~~\n\n-   Create a branch to identify the issue you would like to work on. If\n    you're submitting a bug or documentation fix, branch off of the\n    latest \".x\" branch.\n\n    .. code-block:: text\n\n        $ git fetch origin\n        $ git checkout -b your-branch-name origin/3.0.x\n\n    If you're submitting a feature addition or change, branch off of the\n    \"main\" branch.\n\n    .. code-block:: text\n\n        $ git fetch origin\n        $ git checkout -b your-branch-name origin/main\n\n-   Using your favorite editor, make your changes,\n    `committing as you go`_.\n-   Include tests that cover any code changes you make. Make sure the\n    test fails without your patch. Run the tests as described below.\n-   Push your commits to your fork on GitHub and\n    `create a pull request`_. Link to the issue being addressed with\n    ``fixes #123`` in the pull request.\n\n    .. code-block:: text\n\n        $ git push --set-upstream fork your-branch-name\n\n.. _committing as you go: https://dont-be-afraid-to-commit.readthedocs.io/en/latest/git/commandlinegit.html#commit-your-changes\n.. _create a pull request: https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request\n\n\nRunning the tests\n~~~~~~~~~~~~~~~~~\n\nRun the basic test suite with pytest.\n\n.. code-block:: text\n\n    $ pytest\n\nThis runs the tests for the current environment, which is usually\nsufficient. CI will run the full suite when you submit your pull\nrequest. You can run the full test suite with tox if you don't want to\nwait.\n\n.. code-block:: text\n\n    $ tox\n\n\nRunning test coverage\n~~~~~~~~~~~~~~~~~~~~~\n\nGenerating a report of lines that do not have test coverage can indicate\nwhere to start contributing. Run ``pytest`` using ``coverage`` and\ngenerate a report.\n\n.. code-block:: text\n\n    $ pip install coverage\n    $ coverage run -m pytest\n    $ coverage html\n\nOpen ``htmlcov/index.html`` in your browser to explore the report.\n\nRead more about `coverage <https://coverage.readthedocs.io>`__.\n\n\nBuilding the docs\n~~~~~~~~~~~~~~~~~\n\nBuild the docs in the ``docs`` directory using Sphinx.\n\n.. code-block:: text\n\n    $ cd docs\n    $ make html\n\nOpen ``_build/html/index.html`` in your browser to view the docs.\n\nRead more about `Sphinx <https://www.sphinx-doc.org/en/stable/>`__.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.4404296875,
          "content": "Copyright 2007 Pallets\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n1.  Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n2.  Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\n3.  Neither the name of the copyright holder nor the names of its\n    contributors may be used to endorse or promote products derived from\n    this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.5234375,
          "content": "# Jinja\n\nJinja is a fast, expressive, extensible templating engine. Special\nplaceholders in the template allow writing code similar to Python\nsyntax. Then the template is passed data to render the final document.\n\nIt includes:\n\n-   Template inheritance and inclusion.\n-   Define and import macros within templates.\n-   HTML templates can use autoescaping to prevent XSS from untrusted\n    user input.\n-   A sandboxed environment can safely render untrusted templates.\n-   AsyncIO support for generating templates and calling async\n    functions.\n-   I18N support with Babel.\n-   Templates are compiled to optimized Python code just-in-time and\n    cached, or can be compiled ahead-of-time.\n-   Exceptions point to the correct line in templates to make debugging\n    easier.\n-   Extensible filters, tests, functions, and even syntax.\n\nJinja's philosophy is that while application logic belongs in Python if\npossible, it shouldn't make the template designer's job difficult by\nrestricting functionality too much.\n\n\n## In A Nutshell\n\n```jinja\n{% extends \"base.html\" %}\n{% block title %}Members{% endblock %}\n{% block content %}\n  <ul>\n  {% for user in users %}\n    <li><a href=\"{{ user.url }}\">{{ user.username }}</a></li>\n  {% endfor %}\n  </ul>\n{% endblock %}\n```\n\n## Donate\n\nThe Pallets organization develops and supports Jinja and other popular\npackages. In order to grow the community of contributors and users, and\nallow the maintainers to devote more time to the projects, [please\ndonate today][].\n\n[please donate today]: https://palletsprojects.com/donate\n"
        },
        {
          "name": "artwork",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.185546875,
          "content": "[project]\nname = \"Jinja2\"\ndescription = \"A very fast and expressive template engine.\"\nreadme = \"README.md\"\nlicense = {file = \"LICENSE.txt\"}\nmaintainers = [{name = \"Pallets\", email = \"contact@palletsprojects.com\"}]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Environment :: Web Environment\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: BSD License\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python\",\n    \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n    \"Topic :: Text Processing :: Markup :: HTML\",\n    \"Typing :: Typed\",\n]\nrequires-python = \">=3.8\"\ndependencies = [\"MarkupSafe>=2.0\"]\ndynamic = [\"version\"]\n\n[project.urls]\nDonate = \"https://palletsprojects.com/donate\"\nDocumentation = \"https://jinja.palletsprojects.com/\"\nChanges = \"https://jinja.palletsprojects.com/changes/\"\nSource = \"https://github.com/pallets/jinja/\"\nChat = \"https://discord.gg/pallets\"\n\n[project.optional-dependencies]\ni18n = [\"Babel>=2.7\"]\n\n[project.entry-points.\"babel.extractors\"]\njinja2 = \"jinja2.ext:babel_extract[i18n]\"\n\n[build-system]\nrequires = [\"flit_core<4\"]\nbuild-backend = \"flit_core.buildapi\"\n\n[tool.flit.module]\nname = \"jinja2\"\n\n[tool.flit.sdist]\ninclude = [\n    \"docs/\",\n    \"examples/\",\n    \"requirements/\",\n    \"tests/\",\n    \"CHANGES.md\",\n    \"tox.ini\",\n]\nexclude = [\n    \"docs/_build/\",\n]\n\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\nfilterwarnings = [\n    \"error\",\n]\n\n[tool.coverage.run]\nbranch = true\nsource = [\"jinja2\", \"tests\"]\n\n[tool.coverage.paths]\nsource = [\"src\", \"*/site-packages\"]\n\n[tool.mypy]\npython_version = \"3.8\"\nfiles = [\"src/jinja2\"]\nshow_error_codes = true\npretty = true\nstrict = true\nlocal_partial_types = true\nwarn_unreachable = true\n\n[tool.pyright]\npythonVersion = \"3.8\"\ninclude = [\"src/jinja2\"]\ntypeCheckingMode = \"basic\"\n\n[tool.ruff]\nsrc = [\"src\"]\nfix = true\nshow-fixes = true\noutput-format = \"full\"\n\n[tool.ruff.lint]\nselect = [\n    \"B\",  # flake8-bugbear\n    \"E\",  # pycodestyle error\n    \"F\",  # pyflakes\n    \"I\",  # isort\n    \"UP\",  # pyupgrade\n    \"W\",  # pycodestyle warning\n]\n\n[tool.ruff.lint.isort]\nforce-single-line = true\norder-by-type = false\n\n[tool.gha-update]\ntag-only = [\n    \"slsa-framework/slsa-github-generator\",\n]\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.0986328125,
          "content": "[tox]\nenvlist =\n    py3{13,12,11,10,9,8}\n    pypy310\n    style\n    typing\n    docs\nskip_missing_interpreters = true\n\n[testenv]\npackage = wheel\nwheel_build_env = .pkg\nconstrain_package_deps = true\nuse_frozen_constraints = true\ndeps = -r requirements/tests.txt\ncommands = pytest -v --tb=short --basetemp={envtmpdir} {posargs}\n\n[testenv:style]\ndeps = pre-commit\nskip_install = true\ncommands = pre-commit run --all-files\n\n[testenv:typing]\ndeps = -r requirements/typing.txt\ncommands = mypy\n\n[testenv:docs]\ndeps = -r requirements/docs.txt\ncommands = sphinx-build -E -W -b dirhtml docs docs/_build/dirhtml\n\n[testenv:update-actions]\nlabels = update\ndeps = gha-update\ncommands = gha-update\n\n[testenv:update-pre_commit]\nlabels = update\ndeps = pre-commit\nskip_install = true\ncommands = pre-commit autoupdate -j4\n\n[testenv:update-requirements]\nlabels = update\ndeps = pip-tools\nskip_install = true\nchange_dir = requirements\ncommands =\n    pip-compile build.in -q {posargs:-U}\n    pip-compile docs.in -q {posargs:-U}\n    pip-compile tests.in -q {posargs:-U}\n    pip-compile typing.in -q {posargs:-U}\n    pip-compile dev.in -q {posargs:-U}\n"
        }
      ]
    }
  ]
}