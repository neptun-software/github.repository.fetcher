{
  "metadata": {
    "timestamp": 1736561176791,
    "page": 136,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ipython/ipython",
      "stars": 16342,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3212890625,
          "content": "# Top-most EditorConfig file\nroot = true\n\n[*]\n# Unix-style newlines with a newline ending every file\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\n\n# Four-space indentation\nindent_size = 4\nindent_style = space\n\ntrim_trailing_whitespace = false\n\n[*.yml]\n# Two-space indentation\nindent_size = 2\nindent_style = space\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.1396484375,
          "content": "[flake8]\nignore = W293,E301,E271,E265,W291,E722,E302,C901,E225,E128,E122,E226,E231\nmax-line-length = 160\nexclude = tests/*\nmax-complexity = 10\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 1.169921875,
          "content": "# When making commits that are strictly formatting/style changes, add the\n# commit hash here, so git blame can ignore the change. See docs for more\n# details:\n# https://git-scm.com/docs/git-config#Documentation/git-config.txt-blameignoreRevsFile\n#\n# \n# You should be able to execute either\n# ./tools/configure-git-blame-ignore-revs.bat or\n# ./tools/configure-git-blame-ignore-revs.sh\n#\n# Example entries:\n#\n# <full commit hash>  # initial black-format \n# <full commit hash>  # rename something internal\n6e748726282d1acb9a4f9f264ee679c474c4b8f5  # Apply pygrade --36plus on IPython/core/tests/test_inputtransformer.py.\n0233e65d8086d0ec34acb8685b7a5411633f0899 # apply pyupgrade to IPython/extensions/tests/test_autoreload.py\na6a7e4dd7e51b892147895006d3a2a6c34b79ae6 # apply black to IPython/extensions/tests/test_autoreload.py\nc5ca5a8f25432dfd6b9eccbbe446a8348bf37cfa # apply pyupgrade to IPython/extensions/autoreload.py\n50624b84ccdece781750f5eb635a9efbf2fe30d6 # apply black to IPython/extensions/autoreload.py\nb7aaa47412b96379198705955004930c57f9d74a # apply pyupgrade to IPython/extensions/autoreload.py\n9c7476a88af3e567426b412f1b3c778401d8f6aa # apply black to IPython/extensions/autoreload.py\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1064453125,
          "content": "IPython/.git_commit_info.ini export-subst\n* text=auto\n*.py diff=python\n*.js diff=javascript\n*.html diff=html\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5654296875,
          "content": "MANIFEST\nbuild\ndist\n_build\ndocs/man/*.gz\ndocs/source/api/generated\ndocs/source/config/options\ndocs/source/config/shortcuts/*.csv\ndocs/source/config/shortcuts/table.tsv\ndocs/source/savefig\ndocs/source/interactive/magics-generated.txt\ndocs/gh-pages\njupyter_notebook/notebook/static/mathjax\njupyter_notebook/static/style/*.map\n*.py[co]\n__pycache__\n*.egg-info\n*~\n*.bak\n.ipynb_checkpoints\n.tox\n.DS_Store\n\\#*#\n.#*\n.cache\n.coverage\n*.swp\n.pytest_cache\n.python-version\n.venv*/\nvenv*/\n.mypy_cache/\n\n# jetbrains ide stuff\n*.iml\n.idea/\n\n# vscode ide stuff\n*.code-workspace\n.history\n.vscode\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 12.3740234375,
          "content": "A. J. Holyoake <a.j.holyoake@gmail.com> ajholyoake <a.j.holyoake@gmail.com>\nAlok Singh <alokbeniwal@gmail.com> Alok Singh <8325708+alok@users.noreply.github.com>\nAaron Culich <aculich@gmail.com> Aaron Culich <aculich@eecs.berkeley.edu>\nAron Ahmadia <aron@ahmadia.net> ahmadia <aron@ahmadia.net>\nArthur Svistunov <madbirddiary@gmail.com> <18216480+madbird1304@users.noreply.github.com>\nArthur Svistunov <madbird1304@gmail.com> <18216480+madbird1304@users.noreply.github.com>\nAdam Hackbarth <fearchaos@gmail.com> <digitalvirtuoso@users.noreply.github.com>\nBenjamin Ragan-Kelley <benjaminrk@gmail.com> <minrk@Mercury.local>\nBenjamin Ragan-Kelley <benjaminrk@gmail.com> Min RK\nBenjamin Ragan-Kelley <benjaminrk@gmail.com> MinRK <benjaminrk@gmail.com>\nBarry Wark <barrywark@gmail.com> Barry Wark <barrywarkatgmaildotcom>\nBen Edwards <bedwards@cs.unm.edu> Ben Edwards <bedwards@sausage.(none)>\nBradley M. Froehle <brad.froehle@gmail.com> Bradley M. Froehle <bfroehle@math.berkeley.edu>\nBradley M. Froehle <brad.froehle@gmail.com> Bradley Froehle <brad.froehle@gmail.com>\nBrandon Parsons <brandon@parsonstx.com> Brandon Parsons <brandon.parsons@hp.com>\nBrian E. Granger <ellisonbg@gmail.com> Brian Granger\nBrian E. Granger <ellisonbg@gmail.com> Brian Granger <>\nBrian E. Granger <ellisonbg@gmail.com> bgranger <>\nBrian E. Granger <ellisonbg@gmail.com> bgranger <bgranger@red>\nBlazej Michalik <code.mrmino@gmail.com> <6691643+MrMino@users.noreply.github.com>\nBlazej Michalik <code.mrmino@gmail.com> <blazej.michalik@nokia.com>\nChristoph Gohlke <cgohlke@uci.edu> cgohlke <cgohlke@uci.edu>\nCyrille Rossant <cyrille.rossant@gmail.com> rossant <rossant@github>\nDamián Avila <damianavila82@yahoo.com.ar> damianavila <damianavila82@yahoo.com.ar>\nDamián Avila <damianavila82@yahoo.com.ar> damianavila <damianavila@gmail.com>\nDamon Allen <damontallen@gmail.com> damontallen <damontallen@gmail.com>\nDarren Dale <dsdale24@gmail.com> darren.dale <>\nDarren Dale <dsdale24@gmail.com> Darren Dale <>\nDav Clark <davclark@berkeley.edu> Dav Clark <>\nDav Clark <davclark@berkeley.edu> Dav Clark <davclark@gmail.com>\nDavid Hirschfeld <david.hirschfeld@gazprom-mt.com> dhirschfeld <david.hirschfeld@gazprom-mt.com>\nDavid P. Sanders <dpsanders@gmail.com> David P. Sanders <dpsanders@ciencias.unam.mx>\nDavid Warde-Farley <wardefar@iro.umontreal.ca> David Warde-Farley <>\nDan Green-Leipciger <dangreen.tlv@gmail.com> <dangreen.tlv@gmail.com>\nDoug Blank <dblank@cs.brynmawr.edu> Doug Blank <doug.blank@gmail.com>\nEugene Van den Bulke <eugene.van-den-bulke@gmail.com> Eugene Van den Bulke <eugene.vandenbulke@gmail.com> \nEvan Patterson <epatters@enthought.com> <epatters@EPattersons-MacBook-Pro.local>\nEvan Patterson <epatters@enthought.com> <epatters@evan-laptop.localdomain>\nEvan Patterson <epatters@enthought.com> <epatters@caltech.edu>\nEvan Patterson <epatters@enthought.com> <ejpatters@gmail.com>\nEvan Patterson <epatters@enthought.com> epatters <ejpatters@gmail.com>\nEvan Patterson <epatters@enthought.com> epatters <epatters@enthought.com>\nErnie French <ernestfrench@gmail.com> Ernie French <ernie@gqpbj.com>\nErnie French <ernestfrench@gmail.com> ernie french <ernestfrench@gmail.com>\nErnie French <ernestfrench@gmail.com> ernop <ernestfrench@gmail.com>\nFernando Perez <Fernando.Perez@berkeley.edu> <fperez.net@gmail.com>\nFernando Perez <Fernando.Perez@berkeley.edu> Fernando Perez <fernando.perez@berkeley.edu>\nFernando Perez <Fernando.Perez@berkeley.edu> fperez <>\nFernando Perez <Fernando.Perez@berkeley.edu> fptest <>\nFernando Perez <Fernando.Perez@berkeley.edu> fptest1 <>\nFernando Perez <Fernando.Perez@berkeley.edu> Fernando Perez <fernando.perez@berkeley.edu>\nFernando Perez <fernando.perez@berkeley.edu> Fernando Perez <>\nFernando Perez <fernando.perez@berkeley.edu> Fernando Perez <fperez@maqroll>\nFrank Murphy <fpmurphy@mtu.edu> Frank Murphy <fmurphy@arbor.net>\nGabriel Becker <gmbecker@ucdavis.edu> gmbecker <gmbecker@ucdavis.edu>\nGael Varoquaux <gael.varoquaux@normalesup.org> gael.varoquaux <>\nGael Varoquaux <gael.varoquaux@normalesup.org> gvaroquaux <gvaroquaux@gvaroquaux-desktop>\nGael Varoquaux <gael.varoquaux@normalesup.org> Gael Varoquaux <>\nIngolf Becker <ingolf.becker@googlemail.com> watercrossing <ingolf.becker@googlemail.com>\nJake Vanderplas <jakevdp@gmail.com> Jake Vanderplas <vanderplas@astro.washington.edu>\nJakob Gager <jakob.gager@gmail.com> jakobgager <jakob.gager@gmail.com>\nJakob Gager <jakob.gager@gmail.com> jakobgager <gager@ilsb.tuwien.ac.at>\nJakob Gager <jakob.gager@gmail.com> jakobgager <jakobgager@hotmail.com>\nJason Grout <jgrout6@bloomberg.net> <jason.grout@drake.edu>\nJason Grout <jgrout6@bloomberg.net> <jason-github@creativetrax.com>\nJason Gors <jason.gors.work@gmail.com> jason gors <jason.gors.work@gmail.com>\nJason Gors <jason.gors.work@gmail.com> jgors <jason.gors.work@gmail.com>\nJens Hedegaard Nielsen <jenshnielsen@gmail.com> Jens Hedegaard Nielsen <jhn@jhn-Znote.(none)>\nJens Hedegaard Nielsen <jenshnielsen@gmail.com> Jens H Nielsen <jenshnielsen@gmail.com>\nJens Hedegaard Nielsen <jenshnielsen@gmail.com> Jens H. Nielsen <jenshnielsen@gmail.com>\nJez Ng <jezreel@gmail.com> Jez Ng <me@jezng.com>\nJonathan Frederic <jdfreder@calpoly.edu> Jonathan Frederic <jonathan@LifebookMint.(none)>\nJonathan Frederic <jdfreder@calpoly.edu> Jonathan Frederic <jon.freder@gmail.com>\nJonathan Frederic <jdfreder@calpoly.edu> Jonathan Frederic <xh3xx.goose@gmail.com>\nJonathan Frederic <jdfreder@calpoly.edu> jon <jon.freder@gmail.com>\nJonathan Frederic <jdfreder@calpoly.edu> U-Jon-PC\\Jon <Jon@Jon-PC.(none)>\nJonathan March <jmarch@enthought.com> Jonathan March <JDM@MarchRay.net>\nJean Cruypenynck <filaton@me.com> Jean Cruypenynck <jcruypenynck@flux.to>\nJonathan March <jmarch@enthought.com> jdmarch <JDM@marchRay.net>\nJörgen Stenarson <jorgen.stenarson@kroywen.se> Jörgen Stenarson <jorgen.stenarson@bostream.nu>\nJörgen Stenarson <jorgen.stenarson@kroywen.se> Jorgen Stenarson <jorgen.stenarson@bostream.nu>\nJörgen Stenarson <jorgen.stenarson@kroywen.se> Jorgen Stenarson <>\nJörgen Stenarson <jorgen.stenarson@kroywen.se> jstenar <jorgen.stenarson@bostream.nu>\nJörgen Stenarson <jorgen.stenarson@kroywen.se> jstenar <>\nJörgen Stenarson <jorgen.stenarson@kroywen.se> JÃ¶rgen Stenarson <jorgen.stenarson@kroywen.se>\nJuergen Hasch <python@elbonia.de> juhasch <python@elbonia.de>\nJuergen Hasch <python@elbonia.de> juhasch <hasch@VMBOX.fritz.box>\nJulia Evans <julia@jvns.ca> Julia Evans <julia@stripe.com>\nKester Tong <kestert@google.com> KesterTong <kestert@google.com>\nKyle Kelley <rgbkrk@gmail.com> Kyle Kelley <kyle.kelley@rackspace.com>\nKyle Kelley <rgbkrk@gmail.com> rgbkrk <rgbkrk@gmail.com>\nkd2718 <korydonati@gmail.com>\nKory Donati <kd2718@outlook.com> kory donati <kd2718@outlook.com>\nKory Donati <kd2718@outlook.com> Kory Donati <KoryDonati@clovisusd.k12.ca.us>\nKory Donati <kd2718@outlook.com> koryd <korydonati@cusd.com>\nLaurent Dufréchou <laurent.dufrechou@gmail.com> <laurent.dufrechou@gmail.com>\nLaurent Dufréchou <laurent.dufrechou@gmail.com> <laurent@Pep>\nLaurent Dufréchou <laurent.dufrechou@gmail.com> laurent dufrechou <>\nLaurent Dufréchou <laurent.dufrechou@gmail.com> laurent.dufrechou <>\nLaurent Dufréchou <laurent.dufrechou@gmail.com> Laurent Dufrechou <>\nLaurent Dufréchou <laurent.dufrechou@gmail.com> laurent.dufrechou@gmail.com <>\nLaurent Dufréchou <laurent.dufrechou@gmail.com> ldufrechou <ldufrechou@PEP>\nLuciana da Costa Marques <lucianadacostamarques@gmail.com> luciana <lucianadacostamarques@gmail.com>\nLorena Pantano <lorena.pantano@gmail.com> Lorena <lorena.pantano@gmail.com>\nLuis Pedro Coelho <luis@luispedro.org> Luis Pedro Coelho <lpc@cmu.edu>\nMarc Molla <marcmolla@gmail.com> marcmolla <marcmolla@gmail.com>\nMartín Gaitán <gaitan@gmail.com> Martín Gaitán <gaitan@phasety.com>\nMatthias Bussonnier <bussonniermatthias@gmail.com> Matthias BUSSONNIER <bussonniermatthias@gmail.com>\nMatthias Bussonnier <bussonniermatthias@gmail.com> Bussonnier Matthias <bussonniermatthias@gmail.com>\nMatthias Bussonnier <bussonniermatthias@gmail.com> Matthias BUSSONNIER <bussonniermatthias@umr168-curn-1-24x-6561.curie.fr>\nMatthias Bussonnier <bussonniermatthias@gmail.com> Matthias Bussonnier <carreau@Aspire.(none)>\nMatthias Bussonnier <bussonniermatthias@gmail.com> Matthias Bussonnier <mbussonnier@ucmerced.edu>\nMichael Droettboom <mdboom@gmail.com> Michael Droettboom <mdroe@stsci.edu>\nNicholas Bollweg <nick.bollweg@gmail.com> Nicholas Bollweg (Nick) <nick.bollweg@gmail.com>\nNicolas Rougier <Nicolas.Rougier@inria.fr> <Nicolas.rougier@inria.fr>\nNikolay Koldunov <koldunovn@gmail.com> Nikolay Koldunov <nikolay.koldunov@zmaw.de>\nOmar Andrés Zapata Mesa <andresete.chaos@gmail.com> Omar Andres Zapata Mesa <andresete.chaos@gmail.com>\nOmar Andrés Zapata Mesa <andresete.chaos@gmail.com> Omar Andres Zapata Mesa <omazapa@tuxhome>\nPankaj Pandey <pankaj86@gmail.com> Pankaj Pandey <pankaj@enthought.com>\nPascal Schetelat <pascal.schetelat@gmail.com> pascal-schetelat <pascal.schetelat@gmail.com>\nPaul Ivanov <pi@berkeley.edu> Paul Ivanov <pivanov314@gmail.com>\nPaul Ivanov <pi@berkeley.edu> Paul Ivanov <pivanov5@bloomberg.net>\nPauli Virtanen <pauli.virtanen@iki.fi> Pauli Virtanen <>\nPauli Virtanen <pauli.virtanen@iki.fi> Pauli Virtanen <pav@iki.fi>\nPierre Gerold <pierre.gerold@laposte.net> Pierre Gerold <gerold@crans.org>\nPietro Berkes <pberkes@enthought.com> Pietro Berkes <pietro.berkes@googlemail.com>\nPiti Ongmongkolkul <piti118@gmail.com> piti118 <piti118@gmail.com>\nPrabhu Ramachandran <prabhu@enthought.com> Prabhu Ramachandran <>\nPuneeth Chaganti <punchagan@gmail.com> Puneeth Chaganti <punchagan@muse-amuse.in>\nRobert Kern <robert.kern@gmail.com> rkern <>\nRobert Kern <robert.kern@gmail.com> Robert Kern <rkern@enthought.com>\nRobert Kern <robert.kern@gmail.com> Robert Kern <rkern@Sacrilege.local>\nRobert Kern <robert.kern@gmail.com> Robert Kern <>\nRobert Marchman <bo.marchman@gmail.com> Robert Marchman <robert.l.marchman@dartmouth.edu>\nSatrajit Ghosh <satra@mit.edu> Satrajit Ghosh <satra@ba5.mit.edu>\nSatrajit Ghosh <satra@mit.edu> Satrajit Ghosh <satrajit.ghosh@gmail.com>\nScott Sanderson <scoutoss@gmail.com> Scott Sanderson <ssanderson@quantopian.com>\nsmithj1 <smithj1@LMC-022896.local> smithj1 <smithj1@LMC-022896.swisscom.com>\nsmithj1 <smithj1@LMC-022896.local> smithj1 <smithj1@lmc-022896.local>\nSang Min Park <sangmin.park@twosigma.com> Sang Min Park <sangmin.park@gmail.com>\nSteven Johnson <steven.johnson@drake.edu> stevenJohnson <steven.johnson@drake.edu>\nSteven Silvester <steven.silvester@ieee.org> blink1073 <steven.silvester@ieee.org>\nS. Weber <s8weber@c4.usr.sh> s8weber <s8weber@c5.usr.sh>\nStefan van der Walt <stefan@sun.ac.za> Stefan van der Walt <bzr@mentat.za.net>\nSilvia Vinyes <silvia.vinyes@gmail.com> Silvia <silvia@silvia-U44SG.(none)>\nSilvia Vinyes <silvia.vinyes@gmail.com> silviav12 <silvia.vinyes@gmail.com>\nSrinivas Reddy Thatiparthy <thatiparthysreenivas@gmail.com> Srinivas Reddy Thatiparthy <srinivasreddy@users.noreply.github.com>\nSylvain Corlay <scorlay@bloomberg.net> <sylvain.corlay@gmail.com>\nSylvain Corlay <scorlay@bloomberg.net> sylvain.corlay <sylvain.corlay@gmail.com>\nSamuel Gaist <samuel.gaist@idiap.ch> <samuel.gaist@kde.org>\nRichard Shadrach <rhshadrach@gmail.com> <rhshadrach@gmail.com>\nJuan Luis Cano Rodríguez <juanlu@readthedocs.org> <hello@juanlu.space>\nTamir Bahar <tamir@north-bit.com> Tamir Bahar <tmr232@users.noreply.github.com>\nTed Drain <ted.drain@gmail.com> TD22057 <ted.drain@gmail.com>\nThéophile Studer <theo.studer@gmail.com> Théophile Studer <studer@users.noreply.github.com>\nThomas A Caswell <tcaswell@gmail.com> Thomas A Caswell <tcaswell@bnl.gov> \nThomas Kluyver <thomas@kluyver.me.uk> Thomas <takowl@gmail.com>\nThomas Kluyver <thomas@kluyver.me.uk> Thomas Kluyver <takowl@gmail.com>\nThomas Spura <tomspur@fedoraproject.org> Thomas Spura <thomas.spura@gmail.com>\nTimo Paulssen <timonator@perpetuum-immobile.de> timo <timonator@perpetuum-immobile.de>\nvds <vds@VIVIAN> vds2212 <vds2212@VIVIAN>\nvds <vds@VIVIAN> vds <vds@vivian>\nVille M. Vainio <vivainio@gmail.com> <vivainio2@WN-W0941>\nVille M. Vainio <vivainio@gmail.com> ville <ville@VILLE-PC>\nVille M. Vainio <vivainio@gmail.com> ville <ville@ville-desktop>\nVille M. Vainio <vivainio@gmail.com> vivainio <>\nVille M. Vainio <vivainio@gmail.com> Ville M. Vainio <vivainio@villev>\nVille M. Vainio <vivainio@gmail.com> Ville M. Vainio <vivainio@ville_vmw>\nWalter Doerwald <walter@livinglogic.de> walter.doerwald <>\nWalter Doerwald <walter@livinglogic.de> Walter Doerwald <>\nWieland Hoffmann <themineo@gmail.com> Wieland Hoffmann <mineo@users.noreply.github.com>\nW. Trevor King <wking@tremily.us> W. Trevor King <wking@drexel.edu>\nYoval P. <yoval@gmx.com> y-p <yoval@gmx.com>\n\n"
        },
        {
          "name": ".meeseeksdev.yml",
          "type": "blob",
          "size": 0.37109375,
          "content": "users:\n    LucianaMarques:\n        can:\n            - tag\nspecial:\n  everyone:\n    can: \n      - say\n      - tag\n      - untag\n      - close\n    config:\n      tag:\n        only:\n           - good first issue\n           - async/await\n           - backported\n           - help wanted\n           - documentation\n           - notebook\n           - tab-completion\n           - windows\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.4521484375,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: check-yaml\n    -   id: check-added-large-files\n\n-   repo: https://github.com/akaihola/darker\n    rev: 1.7.2\n    hooks:\n    -   id: darker\n        additional_dependencies: [isort, mypy, flake8]\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.37109375,
          "content": "version: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n  apt_packages:\n    - graphviz\n\nsphinx:\n  configuration: docs/source/conf.py\n\n# Optional but recommended, declare the Python requirements required\n# to build your documentation\n# See https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n   install:\n   - requirements: docs/requirements.txt\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.4482421875,
          "content": "## Triaging Issues\n\nOn the IPython repository,  we strive to trust users and give them responsibility.\nBy using one of our bots, any user can close issues or add/remove\nlabels by mentioning the bot and asking it to do things on your behalf.\n\nTo close an issue (or PR), even if you did not create it, use the following:\n\n> @meeseeksdev close\n\nThis command can be in the middle of another comment, but must start on its\nown line. \n\nTo add labels to an issue, ask the bot to `tag` with a comma-separated list of\ntags to add:\n\n> @meeseeksdev tag windows, documentation\n\nOnly already pre-created tags can be added.  So far, the list is limited to:\n`async/await`, `backported`, `help wanted`, `documentation`, `notebook`,\n`tab-completion`, `windows`\n\nTo remove a label, use the `untag` command:\n\n> @meeseeksdev untag windows, documentation\n\nWe'll be adding additional capabilities for the bot and will share them here\nwhen they are ready to be used.\n\n## Opening an Issue\n\nWhen opening a new Issue, please take the following steps:\n\n1. Search GitHub and/or Google for your issue to avoid duplicate reports.\n   Keyword searches for your error messages are most helpful.\n2. If possible, try updating to main and reproducing your issue,\n   because we may have already fixed it.\n3. Try to include a minimal reproducible test case.\n4. Include relevant system information.  Start with the output of:\n\n        python -c \"import IPython; print(IPython.sys_info())\"\n\n   And include any relevant package versions, depending on the issue, such as\n   matplotlib, numpy, Qt, Qt bindings (PyQt/PySide), tornado, web browser, etc.\n\n## Pull Requests\n\nSome guidelines on contributing to IPython:\n\n* All work is submitted via Pull Requests.\n* Pull Requests can be submitted as soon as there is code worth discussing.\n  Pull Requests track the branch, so you can continue to work after the PR is submitted.\n  Review and discussion can begin well before the work is complete,\n  and the more discussion the better.\n  The worst case is that the PR is closed.\n* Pull Requests should generally be made against main\n* Pull Requests should be tested, if feasible:\n    - bugfixes should include regression tests.\n    - new behavior should at least get minimal exercise.\n* New features and backwards-incompatible changes should be documented by adding\n  a new file to the [pr](docs/source/whatsnew/pr) directory, see [the README.md\n  there](docs/source/whatsnew/pr/README.md) for details.\n* Don't make 'cleanup' pull requests just to change code style.\n  We don't follow any style guide strictly, and we consider formatting changes\n  unnecessary noise.\n  If you're making functional changes, you can clean up the specific pieces of\n  code you're working on.\n\n[GitHub Actions](https://github.com/ipython/ipython/actions/workflows/test.yml) does\na pretty good job testing IPython and Pull Requests,\nbut it may make sense to manually perform tests,\nparticularly for PRs that affect `IPython.parallel` or Windows.\n\nFor more detailed information, see our [GitHub Workflow](https://github.com/ipython/ipython/wiki/Dev:-GitHub-workflow).\n\n## Running Tests\n\nAll the tests can be run by using\n```shell\npytest\n```\n\nAll the tests for a single module (for example **test_alias**) can be run by using the fully qualified path to the module.\n```shell\npytest IPython/core/tests/test_alias.py\n```\n\nOnly a single test (for example **test_alias_lifecycle**) within a single file can be run by adding the specific test after a `::` at the end:\n```shell\npytest IPython/core/tests/test_alias.py::test_alias_lifecycle\n```\n\n## Code style\n\n* Before committing, run `darker -r 60625f241f298b5039cb2debc365db38aa7bb522 <file path>` to apply selective `black` formatting on modified regions using [darker](https://github.com/akaihola/darker)==1.5.1 and black==22.10.0\n* As described in the pull requests section, please avoid excessive formatting changes; if a formatting-only commit is necessary, consider adding its hash to [`.git-blame-ignore-revs`](https://github.com/ipython/ipython/blob/main/.git-blame-ignore-revs) file.\n\n## Documentation\n\nSphinx documentation can be built locally using standard sphinx `make` commands. To build HTML documentation from the root of the project, execute:\n\n```shell\npip install -r docs/requirements.txt   # only needed once\nmake -C docs/ html SPHINXOPTS=\"-W\"\n```\n\nTo force update of the API documentation, precede the `make` command with:\n\n```shell\npython3 docs/autogen_api.py\n```\n\nSimilarly, to force-update the configuration, run:\n\n```shell\npython3 docs/autogen_config.py\n```\n"
        },
        {
          "name": "COPYING.rst",
          "type": "blob",
          "size": 1.6005859375,
          "content": "=============================\n The IPython licensing terms\n=============================\n\nIPython is licensed under the terms of the Modified BSD License (also known as\nNew or Revised or 3-Clause BSD). See the LICENSE file.\n\n\nAbout the IPython Development Team\n----------------------------------\n\nFernando Perez began IPython in 2001 based on code from Janko Hauser\n<jhauser@zscout.de> and Nathaniel Gray <n8gray@caltech.edu>.  Fernando is still\nthe project lead.\n\nThe IPython Development Team is the set of all contributors to the IPython\nproject.  This includes all of the IPython subprojects. \n\nThe core team that coordinates development on GitHub can be found here:\nhttps://github.com/ipython/.\n\nOur Copyright Policy\n--------------------\n\nIPython uses a shared copyright model. Each contributor maintains copyright\nover their contributions to IPython. But, it is important to note that these\ncontributions are typically only changes to the repositories. Thus, the IPython\nsource code, in its entirety is not the copyright of any single person or\ninstitution.  Instead, it is the collective copyright of the entire IPython\nDevelopment Team.  If individual contributors want to maintain a record of what\nchanges/contributions they have specific copyright on, they should indicate\ntheir copyright in the commit message of the change, when they commit the\nchange to one of the IPython repositories.\n\nWith this in mind, the following banner should be used in any source code file \nto indicate the copyright and license terms:\n\n::\n\n    # Copyright (c) IPython Development Team.\n    # Distributed under the terms of the Modified BSD License.\n"
        },
        {
          "name": "IPython",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.6796875,
          "content": "BSD 3-Clause License\n\n- Copyright (c) 2008-Present, IPython Development Team\n- Copyright (c) 2001-2007, Fernando Perez <fernando.perez@colorado.edu>\n- Copyright (c) 2001, Janko Hauser <jhauser@zscout.de>\n- Copyright (c) 2001, Nathaniel Gray <n8gray@caltech.edu>\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.857421875,
          "content": "include README.rst\ninclude COPYING.rst\ninclude LICENSE\ninclude setupbase.py\ninclude _build_meta.py\ninclude MANIFEST.in\ninclude .mailmap\ninclude .flake8\ninclude .pre-commit-config.yaml\ninclude long_description.rst\n\nrecursive-exclude tools *\nexclude tools\nexclude CONTRIBUTING.md\nexclude .editorconfig\nexclude SECURITY.md\nexclude .readthedocs.yaml\n\ngraft scripts\n\n# Load main dir but exclude things we don't want in the distro\ngraft IPython\n\n# Documentation\ngraft docs\nexclude docs/\\#*\nexclude docs/man/*.1.gz\n\nexclude .git-blame-ignore-revs\n\n# Examples\ngraft examples\n\n# docs subdirs we want to skip\nprune docs/build\nprune docs/gh-pages\nprune docs/dist\n\n# Patterns to exclude from any directory\nglobal-exclude *~\nglobal-exclude *.flc\nglobal-exclude *.yml\nglobal-exclude *.pyc\nglobal-exclude *.pyo\nglobal-exclude .dircopy.log\nglobal-exclude .git\nglobal-exclude .ipynb_checkpoints\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 4.732421875,
          "content": ".. image:: https://codecov.io/github/ipython/ipython/coverage.svg?branch=main\n    :target: https://codecov.io/github/ipython/ipython?branch=main\n\n.. image:: https://img.shields.io/pypi/v/IPython.svg\n    :target: https://pypi.python.org/pypi/ipython\n\n.. image:: https://github.com/ipython/ipython/actions/workflows/test.yml/badge.svg\n    :target: https://github.com/ipython/ipython/actions/workflows/test.yml\n\n.. image:: https://www.codetriage.com/ipython/ipython/badges/users.svg\n    :target: https://www.codetriage.com/ipython/ipython/\n\n.. image:: https://raster.shields.io/badge/Follows-SPEC--0000-brightgreen.png\n    :target: https://scientific-python.org/specs/spec-0000/\n\n.. image:: https://tidelift.com/badges/package/pypi/ipython?style=flat\n    :target: https://tidelift.com/subscription/pkg/pypi-ipython\n\n\n===========================================\n IPython: Productive Interactive Computing\n===========================================\n\nOverview\n========\n\nWelcome to IPython.  Our full documentation is available on `ipython.readthedocs.io\n<https://ipython.readthedocs.io/en/stable/>`_ and contains information on how to install, use, and\ncontribute to the project.\nIPython (Interactive Python) is a command shell for interactive computing in multiple programming languages, originally developed for the Python programming language, that offers introspection, rich media, shell syntax, tab completion, and history.\n\n**IPython versions and Python Support**\n\nStarting after IPython 8.16, we will progressively transition to `Spec-0000 <https://scientific-python.org/specs/spec-0000/>`_.\n\nStarting with IPython 7.10, IPython follows `NEP 29 <https://numpy.org/neps/nep-0029-deprecation_policy.html>`_\n\n**IPython 7.17+** requires Python version 3.7 and above.\n\n**IPython 7.10+** requires Python version 3.6 and above.\n\n**IPython 7.0** requires Python version 3.5 and above.\n\n**IPython 6.x** requires Python version 3.3 and above.\n\n**IPython 5.x LTS** is the compatible release for Python 2.7.\nIf you require Python 2 support, you **must** use IPython 5.x LTS. Please\nupdate your project configurations and requirements as necessary.\n\n\nThe Notebook, Qt console and a number of other pieces are now parts of *Jupyter*.\nSee the `Jupyter installation docs <https://jupyter.readthedocs.io/en/latest/install.html>`__\nif you want to use these.\n\nMain features of IPython\n========================\nComprehensive object introspection.\n\nInput history, persistent across sessions.\n\nCaching of output results during a session with automatically generated references.\n\nExtensible tab completion, with support by default for completion of python variables and keywords, filenames and function keywords.\n\nExtensible system of ‘magic’ commands for controlling the environment and performing many tasks related to IPython or the operating system.\n\nA rich configuration system with easy switching between different setups (simpler than changing $PYTHONSTARTUP environment variables every time).\n\nSession logging and reloading.\n\nExtensible syntax processing for special purpose situations.\n\nAccess to the system shell with user-extensible alias system.\n\nEasily embeddable in other Python programs and GUIs.\n\nIntegrated access to the pdb debugger and the Python profiler.\n\n\nDevelopment and Instant running\n===============================\n\nYou can find the latest version of the development documentation on `readthedocs\n<https://ipython.readthedocs.io/en/latest/>`_.\n\nYou can run IPython from this directory without even installing it system-wide\nby typing at the terminal::\n\n   $ python -m IPython\n\nOr see the `development installation docs\n<https://ipython.readthedocs.io/en/latest/install/install.html#installing-the-development-version>`_\nfor the latest revision on read the docs.\n\nDocumentation and installation instructions for older version of IPython can be\nfound on the `IPython website <https://ipython.org/documentation.html>`_\n\n\nAlternatives to IPython\n=======================\n\nIPython may not be to your taste; if that's the case there might be similar\nproject that you might want to use:\n\n- The classic Python REPL.\n- `bpython <https://bpython-interpreter.org/>`_\n- `mypython <https://www.asmeurer.com/mypython/>`_\n- `ptpython and ptipython <https://pypi.org/project/ptpython/>`_\n- `Xonsh <https://xon.sh/>`_\n\nIgnoring commits with git blame.ignoreRevsFile\n==============================================\n\nAs of git 2.23, it is possible to make formatting changes without breaking\n``git blame``. See the `git documentation\n<https://git-scm.com/docs/git-config#Documentation/git-config.txt-blameignoreRevsFile>`_\nfor more details.\n\nTo use this feature you must:\n\n- Install git >= 2.23\n- Configure your local git repo by running:\n   - POSIX: ``tools\\configure-git-blame-ignore-revs.sh``\n   - Windows:  ``tools\\configure-git-blame-ignore-revs.bat``\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.31640625,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nAll IPython and Jupyter security are handled via security@ipython.org. \nYou can find more information on the Jupyter website. https://jupyter.org/security\n\n## Tidelift\n\nYou can report security concerns for IPython via the [Tidelift platform](https://tidelift.com/security). \n"
        },
        {
          "name": "_build_meta.py",
          "type": "blob",
          "size": 0.146484375,
          "content": "# See https://setuptools.pypa.io/en/latest/build_meta.html#dynamic-build-dependencies-and-other-build-meta-tweaks\nfrom setuptools.build_meta import *\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.4814453125,
          "content": "coverage:\n  status:\n    patch: off\n    project:\n      default: false\n      library:\n        target: auto\n        paths: ['!.*/tests/.*']\n        threshold: 0.1%\n      tests:\n        target: auto\n        paths: ['.*/tests/.*']\n        threshold: 0.1%\ncodecov:\n  require_ci_to_pass: false\n\nignore:\n  - IPython/kernel/*\n  - IPython/consoleapp.py\n  - IPython/lib/kernel.py\n  - IPython/utils/jsonutil.py\n  - IPython/utils/localinterfaces.py\n  - IPython/utils/log.py\n  - IPython/utils/signatures.py\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "long_description.rst",
          "type": "blob",
          "size": 1.3544921875,
          "content": "IPython provides a rich toolkit to help you make the most out of using Python\ninteractively.  Its main components are:\n\n * A powerful interactive Python shell\n * A `Jupyter <https://jupyter.org/>`_ kernel to work with Python code in Jupyter\n   notebooks and other interactive frontends.\n\nThe enhanced interactive Python shells have the following main features:\n\n * Comprehensive object introspection.\n\n * Input history, persistent across sessions.\n\n * Caching of output results during a session with automatically generated\n   references.\n\n * Extensible tab completion, with support by default for completion of python\n   variables and keywords, filenames and function keywords.\n\n * Extensible system of 'magic' commands for controlling the environment and\n   performing many tasks related either to IPython or the operating system.\n\n * A rich configuration system with easy switching between different setups\n   (simpler than changing $PYTHONSTARTUP environment variables every time).\n\n * Session logging and reloading.\n\n * Extensible syntax processing for special purpose situations.\n\n * Access to the system shell with user-extensible alias system.\n\n * Easily embeddable in other Python programs and GUIs.\n\n * Integrated access to the pdb debugger and the Python profiler.\n\nThe latest development version is always available from IPython's `GitHub\nsite <http://github.com/ipython>`_.\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 12.236328125,
          "content": "[build-system]\nrequires = [\"setuptools>=61.2\"]\n# We need access to the 'setupbase' module at build time.\n# Hence we declare a custom build backend.\nbuild-backend = \"_build_meta\"  # just re-exports setuptools.build_meta definitions\nbackend-path = [\".\"]\n\n[project]\nname = \"ipython\"\ndescription = \"IPython: Productive Interactive Computing\"\nkeywords = [\"Interactive\", \"Interpreter\", \"Shell\", \"Embedding\"]\nclassifiers = [\n    \"Framework :: IPython\",\n    \"Framework :: Jupyter\",\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: Science/Research\",\n    \"License :: OSI Approved :: BSD License\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Topic :: System :: Shells\",\n]\nrequires-python = \">=3.11\"\ndependencies = [\n    'colorama; sys_platform == \"win32\"',\n    \"decorator\",\n    \"jedi>=0.16\",\n    \"matplotlib-inline\",\n    'pexpect>4.3; sys_platform != \"win32\" and sys_platform != \"emscripten\"',\n    \"prompt_toolkit>=3.0.41,<3.1.0\",\n    \"pygments>=2.4.0\",\n    \"stack_data\",\n    \"traitlets>=5.13.0\",\n    \"typing_extensions>=4.6; python_version<'3.12'\",\n]\ndynamic = [\"authors\", \"license\", \"version\"]\n\n[project.entry-points.\"pygments.lexers\"]\nipythonconsole = \"IPython.lib.lexers:IPythonConsoleLexer\"\nipython = \"IPython.lib.lexers:IPythonLexer\"\nipython3 = \"IPython.lib.lexers:IPython3Lexer\"\n\n[project.scripts]\nipython = \"IPython:start_ipython\"\nipython3 = \"IPython:start_ipython\"\n\n[project.readme]\nfile = \"long_description.rst\"\ncontent-type = \"text/x-rst\"\n\n[project.urls]\nHomepage = \"https://ipython.org\"\nDocumentation = \"https://ipython.readthedocs.io/\"\nFunding = \"https://numfocus.org/\"\nSource = \"https://github.com/ipython/ipython\"\nTracker = \"https://github.com/ipython/ipython/issues\"\n\n[project.optional-dependencies]\nblack = [\n    \"black\",\n]\ndoc = [\n    \"docrepr\",\n    \"exceptiongroup\",\n    \"intersphinx_registry\",\n    \"ipykernel\",\n    \"ipython[test]\",\n    \"matplotlib\",\n    \"setuptools>=18.5\",\n    \"sphinx-rtd-theme\",\n    \"sphinx>=1.3\",\n    \"sphinxcontrib-jquery\",\n]\nkernel = [\n    \"ipykernel\",\n]\nnbconvert = [\n    \"nbconvert\",\n]\nnbformat = [\n    \"nbformat\",\n]\nnotebook = [\n    \"ipywidgets\",\n    \"notebook\",\n]\nparallel = [\n    \"ipyparallel\",\n]\nqtconsole = [\n    \"qtconsole\",\n]\nterminal = []\ntest = [\n    \"pytest\",\n    \"pytest-asyncio<0.22\",\n    \"testpath\",\n    \"pickleshare\",\n    \"packaging\",\n]\ntest_extra = [\n    \"ipython[test]\",\n    \"curio\",\n    \"matplotlib!=3.2.0\",\n    \"nbformat\",\n    \"numpy>=1.23\",\n    \"pandas\",\n    \"trio\",\n]\nmatplotlib = [\n   \"matplotlib\"\n]\nall = [\n    \"ipython[black,doc,kernel,nbconvert,nbformat,notebook,parallel,qtconsole,matplotlib]\",\n    \"ipython[test,test_extra]\",\n]\n\n[tool.mypy]\npython_version = \"3.10\"\nignore_missing_imports = true\nfollow_imports = 'silent'\nexclude = [\n   'test_\\.+\\.py',\n   'IPython.utils.tests.test_wildcard',\n   'testing',\n   'tests',\n   'PyColorize.py',\n   '_process_win32_controller.py',\n   'IPython/core/application.py',\n   'IPython/core/profileapp.py',\n   'IPython/lib/deepreload.py',\n   'IPython/sphinxext/ipython_directive.py',\n   'IPython/terminal/ipapp.py',\n   'IPython/utils/path.py',\n]\n# check_untyped_defs = true\n# disallow_untyped_calls = true\n# disallow_untyped_decorators = true\n# ignore_errors = false\n# ignore_missing_imports = false\ndisallow_incomplete_defs = true\ndisallow_untyped_defs = true\nwarn_redundant_casts = true\n\n[[tool.mypy.overrides]]\nmodule = [\n    \"IPython.core.crashhandler\",\n]\ncheck_untyped_defs = true\ndisallow_incomplete_defs = true\ndisallow_untyped_calls = true\ndisallow_untyped_decorators = true\ndisallow_untyped_defs = true\nignore_errors = false\nignore_missing_imports = false\n\n[[tool.mypy.overrides]]\nmodule = [\n    \"IPython.utils.text\",\n]\ndisallow_untyped_defs = true\ncheck_untyped_defs = false\ndisallow_untyped_decorators = true\n\n[[tool.mypy.overrides]]\nmodule = [\n]\ndisallow_untyped_defs = false\nignore_errors = true\nignore_missing_imports = true\ndisallow_untyped_calls = false\ndisallow_incomplete_defs = false\ncheck_untyped_defs = false\ndisallow_untyped_decorators = false\n\n\n# gloabl ignore error\n[[tool.mypy.overrides]]\nmodule = [\n    \"IPython\",\n    \"IPython.conftest\",\n    \"IPython.core.alias\",\n    \"IPython.core.async_helpers\",\n    \"IPython.core.autocall\",\n    \"IPython.core.builtin_trap\",\n    \"IPython.core.compilerop\",\n    \"IPython.core.completer\",\n    \"IPython.core.completerlib\",\n    \"IPython.core.debugger\",\n    \"IPython.core.display\",\n    \"IPython.core.display_functions\",\n    \"IPython.core.display_trap\",\n    \"IPython.core.displayhook\",\n    \"IPython.core.displaypub\",\n    \"IPython.core.events\",\n    \"IPython.core.excolors\",\n    \"IPython.core.extensions\",\n    \"IPython.core.formatters\",\n    \"IPython.core.getipython\",\n    \"IPython.core.guarded_eval\",\n    \"IPython.core.historyapp\",\n    \"IPython.core.hooks\",\n    \"IPython.core.inputtransformer\",\n    \"IPython.core.inputtransformer2\",\n    \"IPython.core.interactiveshell\",\n    \"IPython.core.logger\",\n    \"IPython.core.macro\",\n    \"IPython.core.magic\",\n    \"IPython.core.magic_arguments\",\n    \"IPython.core.magics.ast_mod\",\n    \"IPython.core.magics.auto\",\n    \"IPython.core.magics.basic\",\n    \"IPython.core.magics.code\",\n    \"IPython.core.magics.config\",\n    \"IPython.core.magics.display\",\n    \"IPython.core.magics.execution\",\n    \"IPython.core.magics.extension\",\n    \"IPython.core.magics.history\",\n    \"IPython.core.magics.logging\",\n    \"IPython.core.magics.namespace\",\n    \"IPython.core.magics.osm\",\n    \"IPython.core.magics.packaging\",\n    \"IPython.core.magics.pylab\",\n    \"IPython.core.magics.script\",\n    \"IPython.core.oinspect\",\n    \"IPython.core.page\",\n    \"IPython.core.payload\",\n    \"IPython.core.payloadpage\",\n    \"IPython.core.prefilter\",\n    \"IPython.core.profiledir\",\n    \"IPython.core.prompts\",\n    \"IPython.core.pylabtools\",\n    \"IPython.core.shellapp\",\n    \"IPython.core.splitinput\",\n    \"IPython.core.ultratb\",\n    \"IPython.extensions.autoreload\",\n    \"IPython.extensions.storemagic\",\n    \"IPython.external.qt_for_kernel\",\n    \"IPython.external.qt_loaders\",\n    \"IPython.lib.backgroundjobs\",\n    \"IPython.lib.clipboard\",\n    \"IPython.lib.demo\",\n    \"IPython.lib.display\",\n    \"IPython.lib.editorhooks\",\n    \"IPython.lib.guisupport\",\n    \"IPython.lib.latextools\",\n    \"IPython.lib.lexers\",\n    \"IPython.lib.pretty\",\n    \"IPython.paths\",\n    \"IPython.sphinxext.ipython_console_highlighting\",\n    \"IPython.terminal.debugger\",\n    \"IPython.terminal.embed\",\n    \"IPython.terminal.interactiveshell\",\n    \"IPython.terminal.magics\",\n    \"IPython.terminal.prompts\",\n    \"IPython.terminal.pt_inputhooks\",\n    \"IPython.terminal.pt_inputhooks.asyncio\",\n    \"IPython.terminal.pt_inputhooks.glut\",\n    \"IPython.terminal.pt_inputhooks.gtk\",\n    \"IPython.terminal.pt_inputhooks.gtk3\",\n    \"IPython.terminal.pt_inputhooks.gtk4\",\n    \"IPython.terminal.pt_inputhooks.osx\",\n    \"IPython.terminal.pt_inputhooks.pyglet\",\n    \"IPython.terminal.pt_inputhooks.qt\",\n    \"IPython.terminal.pt_inputhooks.tk\",\n    \"IPython.terminal.pt_inputhooks.wx\",\n    \"IPython.terminal.ptutils\",\n    \"IPython.terminal.shortcuts\",\n    \"IPython.terminal.shortcuts.auto_match\",\n    \"IPython.terminal.shortcuts.auto_suggest\",\n    \"IPython.terminal.shortcuts.filters\",\n    \"IPython.utils._process_cli\",\n    \"IPython.utils._process_common\",\n    \"IPython.utils._process_emscripten\",\n    \"IPython.utils._process_posix\",\n    \"IPython.utils.capture\",\n    \"IPython.utils.coloransi\",\n    \"IPython.utils.contexts\",\n    \"IPython.utils.data\",\n    \"IPython.utils.decorators\",\n    \"IPython.utils.dir2\",\n    \"IPython.utils.encoding\",\n    \"IPython.utils.frame\",\n    \"IPython.utils.generics\",\n    \"IPython.utils.importstring\",\n    \"IPython.utils.io\",\n    \"IPython.utils.ipstruct\",\n    \"IPython.utils.module_paths\",\n    \"IPython.utils.openpy\",\n    \"IPython.utils.process\",\n    \"IPython.utils.py3compat\",\n    \"IPython.utils.sentinel\",\n    \"IPython.utils.strdispatch\",\n    \"IPython.utils.sysinfo\",\n    \"IPython.utils.syspathcontext\",\n    \"IPython.utils.tempdir\",\n    \"IPython.utils.terminal\",\n    \"IPython.utils.timing\",\n    \"IPython.utils.tokenutil\",\n    \"IPython.utils.version\",\n    \"IPython.utils.wildcard\",\n\n]\ndisallow_untyped_defs = false\nignore_errors = true\nignore_missing_imports = true\ndisallow_untyped_calls = false\ndisallow_incomplete_defs = false\ncheck_untyped_defs = false\ndisallow_untyped_decorators = false\n\n[tool.pytest.ini_options]\naddopts = [\n   \"--durations=10\",\n   \"-pIPython.testing.plugin.pytest_ipdoctest\",\n   \"--ipdoctest-modules\",\n   \"--ignore=docs\",\n   \"--ignore=examples\",\n   \"--ignore=htmlcov\",\n   \"--ignore=ipython_kernel\",\n   \"--ignore=ipython_parallel\",\n   \"--ignore=results\",\n   \"--ignore=tmp\",\n   \"--ignore=tools\",\n   \"--ignore=traitlets\",\n   \"--ignore=IPython/core/tests/daft_extension\",\n   \"--ignore=IPython/sphinxext\",\n   \"--ignore=IPython/terminal/pt_inputhooks\",\n   \"--ignore=IPython/__main__.py\",\n   \"--ignore=IPython/external/qt_for_kernel.py\",\n   \"--ignore=IPython/html/widgets/widget_link.py\",\n   \"--ignore=IPython/html/widgets/widget_output.py\",\n   \"--ignore=IPython/terminal/console.py\",\n   \"--ignore=IPython/utils/_process_cli.py\",\n   \"--ignore=IPython/utils/_process_posix.py\",\n   \"--ignore=IPython/utils/_process_win32_controller.py\",\n   \"--ignore=IPython/utils/daemonize.py\",\n   \"--ignore=IPython/utils/eventful.py\",\n   \"--ignore=IPython/kernel\",\n   \"--ignore=IPython/consoleapp.py\",\n   \"--ignore=IPython/lib/kernel.py\",\n   \"--ignore=IPython/utils/jsonutil.py\",\n   \"--ignore=IPython/utils/localinterfaces.py\",\n   \"--ignore=IPython/utils/log.py\",\n   \"--ignore=IPython/utils/signatures.py\",\n   \"--ignore=IPython/utils/version.py\"\n]\ndoctest_optionflags = [\n   \"NORMALIZE_WHITESPACE\",\n   \"ELLIPSIS\"\n]\nipdoctest_optionflags = [\n   \"NORMALIZE_WHITESPACE\",\n   \"ELLIPSIS\"\n]\nasyncio_mode = \"strict\"\n\n[tool.pyright]\npythonPlatform=\"All\"\n\n[tool.setuptools]\nzip-safe = false\nplatforms = [\"Linux\", \"Mac OSX\", \"Windows\"]\nlicense-files = [\"LICENSE\"]\ninclude-package-data = false\n\n[tool.setuptools.packages.find]\nexclude = [\"setupext\"]\nnamespaces = false\n\n[tool.setuptools.package-data]\n\"IPython\" = [\"py.typed\"]\n\"IPython.core\" = [\"profile/README*\"]\n\"IPython.core.tests\" = [\"*.png\", \"*.jpg\", \"daft_extension/*.py\"]\n\"IPython.lib.tests\" = [\"*.wav\"]\n\"IPython.testing.plugin\" = [\"*.txt\"]\n\n[tool.setuptools.dynamic]\nversion = {attr = \"IPython.core.release.__version__\"}\n\n[tool.coverage.run]\nomit = [\n    # omit everything in /tmp as we run tempfile\n    \"/tmp/*\",\n]\n\n[tool.ruff.lint]\nextend-select = [\n    #  \"B\",           # flake8-bugbear\n    #  \"I\",           # isort\n    # that will be a problem for pytest fixture unless you swap with the usefixture decorator https://docs.pytest.org/en/7.1.x/how-to/fixtures.html#use-fixtures-in-classes-and-modules-with-usefixtures\n    #  \"ARG\",         # flake8-unused-arguments\n    #  \"C4\",          # flake8-comprehensions\n    #  \"EM\",          # flake8-errmsg\n    #  \"ICN\",         # flake8-import-conventions\n    #  \"G\",           # flake8-logging-format\n    #  \"PGH\",         # pygrep-hooks\n    #  \"PIE\",         # flake8-pie\n    #  \"PL\",          # pylint\n    #  \"PTH\",         # flake8-use-pathlib\n    #  \"PT\",          # flake8-pytest-style\n    #  \"RET\",         # flake8-return\n    #  \"RUF\",         # Ruff-specific\n    #  \"SIM\",         # flake8-simplify\n    #  \"T20\",         # flake8-print\n    #  \"UP\",          # pyupgrade\n    #  \"YTT\",         # flake8-2020\n    #  \"EXE\",         # flake8-executable\n    #  \"PYI\",         # flake8-pyi\n    #  \"S\",           # flake8-bandit\n]\nignore = [\n    #  \"E501\",     # E501 Line too long (158 > 100 characters)\n    #  \"SIM105\",   # SIM105 Use `contextlib.suppress(...)`\n    #  \"PLR\",      # Design related pylint codes\n    #  \"S101\",     # Use of `assert` detected\n    \"E712\", #   1\n    \"E713\", #   1\n    \"E902\", #   2\n    \"E702\", #   3\n    \"E721\", #   3\n    \"E401\", #   5\n    \"E711\", #  14      Comparison to `None` should be `cond is None`\n    \"E701\", #  19      Multiple statements on one line (colon)\n    \"E741\", #  25      Ambiguous variable name: `<one letter>`\n    \"E731\", #  27      Do not assign a `lambda` expression, use a `def`\n    \"E402\", #  28      Module level import not at top of file\n    \"E722\", #  75      Do not use bare `except`\n    \"F523\", #   1\n    \"F811\", #   3\n    \"F403\", #   7\n    \"F841\", #  38       Local variable `...` is assigned to but never used\n    \"F401\", #  69       imported but unused\n    \"F821\", # 624  F821 Undefined name\n]\nunfixable = [\n    # Don't touch print statements\n    \"T201\",\n    # Don't touch noqa lines\n    \"RUF100\",\n]\n\n[tool.ruff]\nextend-exclude = [\"tests\"]\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.1015625,
          "content": "[velin]\nignore_patterns =\n   IPython/core/tests\n   IPython/testing\n\n[tool.black]\nexclude = 'timing\\.py'\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 4.28125,
          "content": "# -*- coding: utf-8 -*-\n\"\"\"Setup script for IPython.\n\nUnder Posix environments it works like a typical setup.py script.\nUnder Windows, the command sdist is not supported, since IPython\nrequires utilities which are not available under Windows.\"\"\"\n\n#-----------------------------------------------------------------------------\n#  Copyright (c) 2008-2011, IPython Development Team.\n#  Copyright (c) 2001-2007, Fernando Perez <fernando.perez@colorado.edu>\n#  Copyright (c) 2001, Janko Hauser <jhauser@zscout.de>\n#  Copyright (c) 2001, Nathaniel Gray <n8gray@caltech.edu>\n#\n#  Distributed under the terms of the Modified BSD License.\n#\n#  The full license is in the file COPYING.rst, distributed with this software.\n#-----------------------------------------------------------------------------\n\nimport os\nimport sys\n\n# **Python version check**\n#\n# This check is also made in IPython/__init__, don't forget to update both when\n# changing Python version requirements.\nif sys.version_info < (3, 11):\n    pip_message = 'This may be due to an out of date pip. Make sure you have pip >= 9.0.1.'\n    try:\n        import pip\n        pip_version = tuple([int(x) for x in pip.__version__.split('.')[:3]])\n        if pip_version < (9, 0, 1) :\n            pip_message = 'Your pip version is out of date, please install pip >= 9.0.1. '\\\n            'pip {} detected.'.format(pip.__version__)\n        else:\n            # pip is new enough - it must be something else\n            pip_message = ''\n    except Exception:\n        pass\n\n\n    error = \"\"\"\n(information not available for more recent version of IPython)\nIPython 8.19+ supports Python 3.10 and above, following SPEC0\nIPython 8.13+ supports Python 3.9 and above, following NEP 29.\nIPython 8.0-8.12 supports Python 3.8 and above, following NEP 29.\n\nPython {py} detected.\n{pip}\n\"\"\".format(\n        py=sys.version_info, pip=pip_message\n    )\n\n    print(error, file=sys.stderr)\n    sys.exit(1)\n\n# At least we're on the python version we need, move on.\n\nfrom setuptools import setup\n\n# Our own imports\n\nfrom setupbase import target_update\n\nfrom setupbase import (\n    setup_args,\n    check_package_data_first,\n    find_data_files,\n    git_prebuild,\n)\n\n#-------------------------------------------------------------------------------\n# Handle OS specific things\n#-------------------------------------------------------------------------------\n\nif os.name in ('nt','dos'):\n    os_name = 'windows'\nelse:\n    os_name = os.name\n\n# Under Windows, 'sdist' has not been supported.  Now that the docs build with\n# Sphinx it might work, but let's not turn it on until someone confirms that it\n# actually works.\nif os_name == 'windows' and 'sdist' in sys.argv:\n    print('The sdist command is not available under Windows.  Exiting.')\n    sys.exit(1)\n\n\n#-------------------------------------------------------------------------------\n# Things related to the IPython documentation\n#-------------------------------------------------------------------------------\n\n# update the manuals when building a source dist\nif len(sys.argv) >= 2 and sys.argv[1] in ('sdist','bdist_rpm'):\n\n    # List of things to be updated. Each entry is a triplet of args for\n    # target_update()\n    to_update = [\n        (\n            \"docs/man/ipython.1.gz\",\n            [\"docs/man/ipython.1\"],\n            \"cd docs/man && python -m gzip --best ipython.1\",\n        ),\n    ]\n\n\n    [ target_update(*t) for t in to_update ]\n\n#---------------------------------------------------------------------------\n# Find all the packages, package data, and data_files\n#---------------------------------------------------------------------------\n\ndata_files = find_data_files()\n\nsetup_args['data_files'] = data_files\n\n#---------------------------------------------------------------------------\n# custom distutils commands\n#---------------------------------------------------------------------------\n# imports here, so they are after setuptools import if there was one\nfrom setuptools.command.sdist import sdist\n\nsetup_args['cmdclass'] = {\n    'build_py': \\\n            check_package_data_first(git_prebuild('IPython')),\n    'sdist' : git_prebuild('IPython', sdist),\n}\n\n#---------------------------------------------------------------------------\n# Do the actual setup now\n#---------------------------------------------------------------------------\n\nif __name__ == \"__main__\":\n    setup(**setup_args)\n"
        },
        {
          "name": "setupbase.py",
          "type": "blob",
          "size": 7.044921875,
          "content": "# encoding: utf-8\n\"\"\"\nThis module defines the things that are used in setup.py for building IPython\n\nThis includes:\n\n    * The basic arguments to setup\n    * Functions for finding things like packages, package data, etc.\n    * A function for checking dependencies.\n\"\"\"\n\n# Copyright (c) IPython Development Team.\n# Distributed under the terms of the Modified BSD License.\n\nimport os\nfrom pathlib import Path\nimport re\nimport sys\nfrom glob import glob\nfrom logging import log\n\nfrom setuptools import Command\nfrom setuptools.command.build_py import build_py\n\nfrom setuptools.command.install import install\nfrom setuptools.command.install_scripts import install_scripts\n\n\n#-------------------------------------------------------------------------------\n# Useful globals and utility functions\n#-------------------------------------------------------------------------------\n\n# A few handy globals\nrepo_root = Path(__file__).resolve().parent\n\ndef execfile(path, globs, locs=None):\n    locs = locs or globs\n    with path.open(encoding=\"utf-8\") as f:\n        exec(compile(f.read(), str(path), \"exec\"), globs, locs)\n\n#---------------------------------------------------------------------------\n# Basic project information\n#---------------------------------------------------------------------------\n\n# release.py contains version, authors, license, url, keywords, etc.\nexecfile(Path(repo_root, \"IPython\", \"core\", \"release.py\"), globals())\n\n# Create a dict with the basic information\n# This dict is eventually passed to setup after additional keys are added.\nsetup_args = dict(\n      author           = author,\n      author_email     = author_email,\n      license          = license,\n      )\n\n#---------------------------------------------------------------------------\n# Check package data\n#---------------------------------------------------------------------------\n\ndef check_package_data(package_data):\n    \"\"\"verify that package_data globs make sense\"\"\"\n    print(\"checking package data\")\n    for pkg, data in package_data.items():\n        pkg_root = Path(*pkg.split(\".\"))\n        for d in data:\n            path = pkg_root / d\n            if \"*\" in str(path):\n                assert len(glob(str(path))) > 0, \"No files match pattern %s\" % path\n            else:\n                assert path.exists(), f\"Missing package data: {path}\"\n\n\ndef check_package_data_first(command):\n    \"\"\"decorator for checking package_data before running a given command\n\n    Probably only needs to wrap build_py\n    \"\"\"\n    class DecoratedCommand(command):\n        def run(self):\n            check_package_data(self.package_data)\n            command.run(self)\n    return DecoratedCommand\n\n\n#---------------------------------------------------------------------------\n# Find data files\n#---------------------------------------------------------------------------\n\ndef find_data_files():\n    \"\"\"\n    Find IPython's data_files.\n\n    Just man pages at this point.\n    \"\"\"\n\n    if \"freebsd\" in sys.platform:\n        manpagebase = Path(\"man\") / \"man1\"\n    else:\n        manpagebase = Path(\"share\") / \"man\" / \"man1\"\n\n    # Simple file lists can be made by hand\n    manpages = [f for f in Path(\"docs/man\").glob(\"*.1.gz\") if f.is_file()]\n    if not manpages:\n        # When running from a source tree, the manpages aren't gzipped\n        manpages = [f for f in Path(\"docs/man\").glob(\"*.1\") if f.is_file()]\n\n    # And assemble the entire output list\n    data_files = [(str(manpagebase), [str(f) for f in manpages])]\n\n    return data_files\n\n\n# The two functions below are copied from IPython.utils.path, so we don't need\n# to import IPython during setup, which fails on Python 3.\n\ndef target_outdated(target, deps):\n    \"\"\"Determine whether a target is out of date.\n\n    target_outdated(target,deps) -> 1/0\n\n    deps: list of filenames which MUST exist.\n    target: single filename which may or may not exist.\n\n    If target doesn't exist or is older than any file listed in deps, return\n    true, otherwise return false.\n    \"\"\"\n    try:\n        target_time = Path(target).stat().st_mtime\n    except FileNotFoundError:\n        return 1\n    for dep in deps:\n        dep_time = Path(dep).stat().st_mtime\n        if dep_time > target_time:\n            # print(\"For target\",target,\"Dep failed:\",dep)  # dbg\n            # print(\"times (dep,tar):\",dep_time,target_time)  # dbg\n            return 1\n    return 0\n\n\ndef target_update(target, deps, cmd):\n    \"\"\"Update a target with a given command given a list of dependencies.\n\n    target_update(target,deps,cmd) -> runs cmd if target is outdated.\n\n    This is just a wrapper around target_outdated() which calls the given\n    command if target is outdated.\"\"\"\n\n    if target_outdated(target, deps):\n        os.system(cmd)\n\n#---------------------------------------------------------------------------\n# VCS related\n#---------------------------------------------------------------------------\n\ndef git_prebuild(pkg_dir, build_cmd=build_py):\n    \"\"\"Return extended build or sdist command class for recording commit\n\n    records git commit in IPython.utils._sysinfo.commit\n\n    for use in IPython.utils.sysinfo.sys_info() calls after installation.\n    \"\"\"\n\n    class MyBuildPy(build_cmd):\n        ''' Subclass to write commit data into installation tree '''\n        def run(self):\n            # loose as `.dev` is suppose to be invalid\n            print(\"check version number\")\n            loose_pep440re = re.compile(r'^(\\d+)\\.(\\d+)\\.(\\d+((a|b|rc)\\d+)?)(\\.post\\d+)?(\\.dev\\d*)?$')\n            if not loose_pep440re.match(version):\n                raise ValueError(\"Version number '%s' is not valid (should match [N!]N(.N)*[{a|b|rc}N][.postN][.devN])\" % version)\n\n\n            build_cmd.run(self)\n            # this one will only fire for build commands\n            if hasattr(self, 'build_lib'):\n                self._record_commit(self.build_lib)\n\n        def make_release_tree(self, base_dir, files):\n            # this one will fire for sdist\n            build_cmd.make_release_tree(self, base_dir, files)\n            self._record_commit(base_dir)\n\n        def _record_commit(self, base_dir):\n            import subprocess\n            proc = subprocess.Popen('git rev-parse --short HEAD',\n                                    stdout=subprocess.PIPE,\n                                    stderr=subprocess.PIPE,\n                                    shell=True)\n            repo_commit, _ = proc.communicate()\n            repo_commit = repo_commit.strip().decode(\"ascii\")\n\n            out_pth = Path(base_dir) / pkg_dir / \"utils\" / \"_sysinfo.py\"\n            if out_pth.is_file() and not repo_commit:\n                # nothing to write, don't clobber\n                return\n\n            print(f\"writing git commit '{repo_commit}' to {out_pth}\")\n\n            # remove to avoid overwriting original via hard link\n            try:\n                out_pth.unlink()\n            except FileNotFoundError:\n                pass\n            with out_pth.open(\"w\", encoding=\"utf-8\") as out_file:\n                out_file.writelines(\n                    [\n                        \"# GENERATED BY setup.py\\n\",\n                        f'commit = \"{repo_commit}\"\\n',\n                    ]\n                )\n\n    return MyBuildPy\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}