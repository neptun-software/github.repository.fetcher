{
  "metadata": {
    "timestamp": 1736561299236,
    "page": 301,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/playwright-python",
      "stars": 12165,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".azure-pipelines",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0712890625,
          "content": "# text files must be lf for golden file tests to work\n* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2373046875,
          "content": "**/__pycache__/\ndriver/\nplaywright/driver/\nplaywright.egg-info/\nbuild/\ndist/\nvenv/\n.idea/\n**/*.pyc\nenv/\nhtmlcov/\n.coverage*\n.DS_Store\n.vscode/\n.eggs\n_repo_version.py\ncoverage.xml\njunit/\nhtmldocs/\nutils/docker/dist/\nPipfile\nPipfile.lock\n.venv/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.37109375,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n        exclude: tests/assets/har-sha1-main-response.txt\n      - id: check-yaml\n      - id: check-toml\n      - id: requirements-txt-fixer\n      - id: check-ast\n      - id: check-builtin-literals\n      - id: check-executables-have-shebangs\n      - id: check-merge-conflict\n  - repo: https://github.com/psf/black\n    rev: 24.8.0\n    hooks:\n      - id: black\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.11.2\n    hooks:\n      - id: mypy\n        additional_dependencies: [types-pyOpenSSL==24.1.0.20240722, types-requests==2.32.0.20240914]\n  - repo: https://github.com/pycqa/flake8\n    rev: 7.1.1\n    hooks:\n      - id: flake8\n  - repo: https://github.com/pycqa/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n  - repo: local\n    hooks:\n      - id: pyright\n        name: pyright\n        entry: pyright\n        language: node\n        pass_filenames: false\n        types: [python]\n        additional_dependencies: [\"pyright@1.1.384\"]\n  - repo: local\n    hooks:\n      - id: check-license-header\n        name: Check License Header\n        entry: ./utils/linting/check_file_header.py\n        language: python\n        types: [python]\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.43359375,
          "content": "# Microsoft Open Source Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\n\nResources:\n\n- [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/)\n- [Microsoft Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\n- Contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with questions or concerns\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.94921875,
          "content": "# Contributing\n\n## How to Contribute\n\n### Configuring python environment\n\nThe project development requires Python version 3.9+. To set it as default in the environment run the following commands:\n\n```sh\n# You may need to install python 3.9 venv if it's missing, on Ubuntu just run `sudo apt-get install python3.9-venv`\npython3.9 -m venv env\nsource ./env/bin/activate\n```\n\nInstall required dependencies:\n\n```sh\npython -m pip install --upgrade pip\npip install -r local-requirements.txt\n```\n\nBuild and install drivers:\n\n```sh\npip install -e .\npython -m build --wheel\n```\n\nRun tests:\n\n```sh\npytest --browser chromium\n```\n\nChecking for typing errors\n\n```sh\nmypy playwright\n```\n\nFormat the code\n\n```sh\npre-commit install\npre-commit run --all-files\n```\n\nFor more details look at the [CI configuration](./.github/workflows/ci.yml).\n\nCollect coverage\n\n```sh\npytest --browser chromium --cov-report html --cov=playwright\nopen htmlcov/index.html\n```\n\n### Regenerating APIs\n\n```bash\n./scripts/update_api.sh\npre-commit run --all-files\n```\n\n## Contributor License Agreement\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\n\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\n## Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.1318359375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Portions Copyright (c) Microsoft Corporation.\n   Portions Copyright 2017 Google Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.3994140625,
          "content": "# 🎭 [Playwright](https://playwright.dev) for Python [![PyPI version](https://badge.fury.io/py/playwright.svg)](https://pypi.python.org/pypi/playwright/) [![Anaconda version](https://img.shields.io/conda/v/microsoft/playwright)](https://anaconda.org/Microsoft/playwright) [![Join Discord](https://img.shields.io/badge/join-discord-infomational)](https://aka.ms/playwright/discord)\n\nPlaywright is a Python library to automate [Chromium](https://www.chromium.org/Home), [Firefox](https://www.mozilla.org/en-US/firefox/new/) and [WebKit](https://webkit.org/) browsers with a single API. Playwright delivers automation that is **ever-green**, **capable**, **reliable** and **fast**. [See how Playwright is better](https://playwright.dev/python).\n\n|          | Linux | macOS | Windows |\n|   :---   | :---: | :---: | :---:   |\n| Chromium <!-- GEN:chromium-version -->131.0.6778.33<!-- GEN:stop --> | ✅ | ✅ | ✅ |\n| WebKit <!-- GEN:webkit-version -->18.2<!-- GEN:stop --> | ✅ | ✅ | ✅ |\n| Firefox <!-- GEN:firefox-version -->132.0<!-- GEN:stop --> | ✅ | ✅ | ✅ |\n\n## Documentation\n\n[https://playwright.dev/python/docs/intro](https://playwright.dev/python/docs/intro)\n\n## API Reference\n\n[https://playwright.dev/python/docs/api/class-playwright](https://playwright.dev/python/docs/api/class-playwright)\n\n## Example\n\n```py\nfrom playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    for browser_type in [p.chromium, p.firefox, p.webkit]:\n        browser = browser_type.launch()\n        page = browser.new_page()\n        page.goto('http://playwright.dev')\n        page.screenshot(path=f'example-{browser_type.name}.png')\n        browser.close()\n```\n\n```py\nimport asyncio\nfrom playwright.async_api import async_playwright\n\nasync def main():\n    async with async_playwright() as p:\n        for browser_type in [p.chromium, p.firefox, p.webkit]:\n            browser = await browser_type.launch()\n            page = await browser.new_page()\n            await page.goto('http://playwright.dev')\n            await page.screenshot(path=f'example-{browser_type.name}.png')\n            await browser.close()\n\nasyncio.run(main())\n```\n\n## Other languages\n\nMore comfortable in another programming language? [Playwright](https://playwright.dev) is also available in\n- [Node.js (JavaScript / TypeScript)](https://playwright.dev/docs/intro),\n- [.NET](https://playwright.dev/dotnet/docs/intro),\n- [Java](https://playwright.dev/java/docs/intro).\n"
        },
        {
          "name": "ROLLING.md",
          "type": "blob",
          "size": 0.8359375,
          "content": "# Rolling Playwright-Python to the latest Playwright driver\n\n* checkout repo: `git clone https://github.com/microsoft/playwright-python`\n* make sure local python is 3.9\n    * create virtual environment, if don't have one: `python -m venv env`\n* activate venv: `source env/bin/activate`\n* install all deps:\n     - `python -m pip install --upgrade pip`\n     - `pip install -r local-requirements.txt`\n     - `pre-commit install`\n     - `pip install -e .`\n* change driver version in `setup.py`\n* download new driver: `python -m build --wheel`\n* generate API: `./scripts/update_api.sh`\n* commit changes & send PR\n* wait for bots to pass & merge the PR\n\n\n## Fix typing issues with Playwright ToT\n\n1. `cd playwright`\n1. `API_JSON_MODE=1 node utils/doclint/generateApiJson.js > ../playwright-python/playwright/driver/package/api.json`\n1. `./scripts/update_api.sh`\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.71484375,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.5 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc751383(v=technet.10)), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://msrc.microsoft.com/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://www.microsoft.com/en-us/msrc/pgp-key-msrc).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://www.microsoft.com/msrc).\n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://microsoft.com/msrc/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://www.microsoft.com/en-us/msrc/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "SUPPORT.md",
          "type": "blob",
          "size": 0.8095703125,
          "content": "# Support\n\n## How to file issues and get help\n\nThis project uses GitHub issues to track bugs and feature requests. Please search the [existing issues][gh-issues] before filing new ones to avoid duplicates. For new issues, file your bug or feature request as a new issue using corresponding template.\n\nFor help and questions about using this project, please see the [docs site for Playwright for Python][docs].\n\nJoin our community [Discord Server][discord-server] to connect with other developers using Playwright and ask questions in our 'help-playwright' forum.\n\n## Microsoft Support Policy\n\nSupport for Playwright for Python is limited to the resources listed above.\n\n[gh-issues]: https://github.com/microsoft/playwright-python/issues/\n[docs]: https://playwright.dev/python/\n[discord-server]: https://aka.ms/playwright/discord\n"
        },
        {
          "name": "conda_build_config_linux_aarch64.yaml",
          "type": "blob",
          "size": 0.0322265625,
          "content": "target_platform:\n- linux-aarch64\n"
        },
        {
          "name": "conda_build_config_osx_arm64.yaml",
          "type": "blob",
          "size": 0.0283203125,
          "content": "target_platform:\n- osx-arm64\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "local-requirements.txt",
          "type": "blob",
          "size": 0.4072265625,
          "content": "autobahn==23.1.2\nblack==24.8.0\nbuild==1.2.2.post1\nflake8==7.1.1\nflaky==3.8.1\nmypy==1.14.0\nobjgraph==3.6.2\nPillow==10.4.0\npixelmatch==0.3.0\npre-commit==3.5.0\npyOpenSSL==24.3.0\npytest==8.3.4\npytest-asyncio==0.25.1\npytest-cov==6.0.0\npytest-repeat==0.9.3\npytest-timeout==2.3.1\npytest-xdist==3.6.1\nrequests==2.32.3\nservice_identity==24.2.0\ntwisted==24.11.0\ntypes-pyOpenSSL==24.1.0.20240722\ntypes-requests==2.32.0.20241016\n"
        },
        {
          "name": "meta.yaml",
          "type": "blob",
          "size": 1.40625,
          "content": "package:\n  name: playwright\n  version: \"{{ environ.get('GIT_DESCRIBE_TAG') | replace('v', '') }}\"\n\nsource:\n  path: .\n\nbuild:\n  number: 0\n  script: \"{{ PYTHON }} -m pip install . --no-deps -vv\"\n  binary_relocation: False\n  missing_dso_whitelist: \"*\"\n  entry_points:\n    - playwright = playwright.__main__:main\n\nrequirements:\n  build:\n    - python >=3.9                        # [build_platform != target_platform]\n    - pip                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}  # [build_platform != target_platform]\n  host:\n    - python >=3.9\n    - wheel\n    - pip\n    - curl\n    - setuptools_scm\n  run:\n    - python >=3.9\n    - greenlet ==3.1.1\n    - pyee ==12.1.1\n\ntest: # [build_platform == target_platform]\n  requires:\n    - pip\n  imports:\n    - playwright\n    - playwright.sync_api\n    - playwright.async_api\n  commands:\n    - playwright --help\n\nabout:\n  home: https://github.com/microsoft/playwright-python\n  license: Apache-2.0\n  license_family: Apache\n  license_file: LICENSE\n  summary: Python version of the Playwright testing and automation library.\n  description: |\n    Playwright is a Python library to automate Chromium,\n    Firefox and WebKit browsers with a single API. Playwright\n    delivers automation that is ever-green, capable, reliable\n    and fast.\n  doc_url: https://playwright.dev/python/docs/intro/\n  dev_url: https://github.com/microsoft/playwright-python\n"
        },
        {
          "name": "playwright",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.53515625,
          "content": "[build-system]\r\nrequires = [\"setuptools==75.6.0\", \"setuptools-scm==8.1.0\", \"wheel==0.45.1\", \"auditwheel==6.1.0\"]\r\nbuild-backend = \"setuptools.build_meta\"\r\n\r\n[project]\r\nname = \"playwright\"\r\ndescription = \"A high-level API to automate web browsers\"\r\nauthors = [\r\n    {name = \"Microsoft Corporation\"}\r\n]\r\nreadme = \"README.md\"\r\nlicense = {text = \"Apache-2.0\"}\r\ndynamic = [\"version\"]\r\nrequires-python = \">=3.9\"\r\ndependencies = [\r\n    \"greenlet==3.1.1\",\r\n    \"pyee==12.1.1\",\r\n]\r\nclassifiers = [\r\n    \"Topic :: Software Development :: Testing\",\r\n    \"Topic :: Internet :: WWW/HTTP :: Browsers\",\r\n    \"Intended Audience :: Developers\",\r\n    \"Programming Language :: Python :: 3\",\r\n    \"Programming Language :: Python :: 3.9\",\r\n    \"Programming Language :: Python :: 3.10\",\r\n    \"Programming Language :: Python :: 3.11\",\r\n    \"Programming Language :: Python :: 3.12\",\r\n    \"Programming Language :: Python :: 3.13\",\r\n    \"License :: OSI Approved :: Apache Software License\",\r\n    \"Operating System :: OS Independent\",\r\n]\r\n\r\n[project.urls]\r\nhomepage = \"https://github.com/Microsoft/playwright-python\"\r\n\"Release notes\" = \"https://github.com/microsoft/playwright-python/releases\"\r\n\r\n[project.scripts]\r\nplaywright = \"playwright.__main__:main\"\r\n\r\n[project.entry-points.pyinstaller40]\r\nhook-dirs = \"playwright._impl.__pyinstaller:get_hook_dirs\"\r\n\r\n[tool.setuptools]\r\npackages = [\r\n    \"playwright\",\r\n    \"playwright.async_api\",\r\n    \"playwright.sync_api\",\r\n    \"playwright._impl\",\r\n    \"playwright._impl.__pyinstaller\",\r\n]\r\ninclude-package-data = true\r\n\r\n[tool.setuptools_scm]\r\nversion_file = \"playwright/_repo_version.py\"\r\n\r\n[tool.pytest.ini_options]\r\naddopts = \"-Wall -rsx -vv -s\"\r\nmarkers = [\r\n    \"skip_browser\",\r\n    \"only_browser\",\r\n    \"skip_platform\",\r\n    \"only_platform\"\r\n]\r\njunit_family = \"xunit2\"\r\nasyncio_mode = \"auto\"\r\nasyncio_default_fixture_loop_scope = \"session\"\r\n\r\n[tool.mypy]\r\nignore_missing_imports = true\r\npython_version = \"3.9\"\r\nwarn_unused_ignores = false\r\nwarn_redundant_casts = true\r\nwarn_unused_configs = true\r\ncheck_untyped_defs = true\r\ndisallow_untyped_defs = true\r\nno_implicit_optional = false\r\nexclude = [\r\n    \"build/\",\r\n    \"env/\",\r\n]\r\n\r\n[tool.isort]\r\nprofile = \"black\"\r\n\r\n[tool.pyright]\r\ninclude = [\"playwright\", \"tests\", \"scripts\"]\r\nexclude = [\"**/node_modules\", \"**/__pycache__\", \"**/.*\", \"./build\"]\r\npythonVersion = \"3.9\"\r\nreportMissingImports = false\r\nreportTypedDictNotRequiredAccess = false\r\nreportCallInDefaultInitializer = true\r\nreportOptionalSubscript = false\r\nreportUnboundVariable = false\r\nstrictParameterNoneValue = false\r\nreportIncompatibleVariableOverride = false\r\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.1220703125,
          "content": "[flake8]\nignore =\n    E501\n    W503\n    E302\n    # Conflicts with black https://github.com/PyCQA/flake8/issues/1921\n    E704\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 6.3955078125,
          "content": "# Copyright (c) Microsoft Corporation.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport glob\nimport os\nimport platform\nimport shutil\nimport subprocess\nimport sys\nimport zipfile\nfrom typing import Dict\n\ndriver_version = \"1.49.1\"\n\nbase_wheel_bundles = [\n    {\n        \"wheel\": \"macosx_10_13_x86_64.whl\",\n        \"machine\": \"x86_64\",\n        \"platform\": \"darwin\",\n        \"zip_name\": \"mac\",\n    },\n    {\n        \"wheel\": \"macosx_11_0_universal2.whl\",\n        \"machine\": \"x86_64\",\n        \"platform\": \"darwin\",\n        \"zip_name\": \"mac\",\n    },\n    {\n        \"wheel\": \"macosx_11_0_arm64.whl\",\n        \"machine\": \"arm64\",\n        \"platform\": \"darwin\",\n        \"zip_name\": \"mac-arm64\",\n    },\n    {\n        \"wheel\": \"manylinux1_x86_64.whl\",\n        \"machine\": \"x86_64\",\n        \"platform\": \"linux\",\n        \"zip_name\": \"linux\",\n    },\n    {\n        \"wheel\": \"manylinux_2_17_aarch64.manylinux2014_aarch64.whl\",\n        \"machine\": \"aarch64\",\n        \"platform\": \"linux\",\n        \"zip_name\": \"linux-arm64\",\n    },\n    {\n        \"wheel\": \"win32.whl\",\n        \"machine\": \"i386\",\n        \"platform\": \"win32\",\n        \"zip_name\": \"win32_x64\",\n    },\n    {\n        \"wheel\": \"win_amd64.whl\",\n        \"machine\": \"amd64\",\n        \"platform\": \"win32\",\n        \"zip_name\": \"win32_x64\",\n    },\n]\n\nif len(sys.argv) == 2 and sys.argv[1] == \"--list-wheels\":\n    for bundle in base_wheel_bundles:\n        print(bundle[\"wheel\"])\n    exit(0)\n\nfrom setuptools import setup  # noqa: E402\n\ntry:\n    from auditwheel.wheeltools import InWheel\nexcept ImportError:\n    InWheel = None\nfrom wheel.bdist_wheel import bdist_wheel as BDistWheelCommand  # noqa: E402\n\n\ndef extractall(zip: zipfile.ZipFile, path: str) -> None:\n    for name in zip.namelist():\n        member = zip.getinfo(name)\n        extracted_path = zip.extract(member, path)\n        attr = member.external_attr >> 16\n        if attr != 0:\n            os.chmod(extracted_path, attr)\n\n\ndef download_driver(zip_name: str) -> None:\n    zip_file = f\"playwright-{driver_version}-{zip_name}.zip\"\n    if os.path.exists(\"driver/\" + zip_file):\n        return\n    url = \"https://playwright.azureedge.net/builds/driver/\"\n    if (\n        \"-alpha\" in driver_version\n        or \"-beta\" in driver_version\n        or \"-next\" in driver_version\n    ):\n        url = url + \"next/\"\n    url = url + zip_file\n    print(f\"Fetching {url}\")\n    # Don't replace this with urllib - Python won't have certificates to do SSL on all platforms.\n    subprocess.check_call([\"curl\", url, \"-o\", \"driver/\" + zip_file])\n\n\nclass PlaywrightBDistWheelCommand(BDistWheelCommand):\n    def run(self) -> None:\n        super().run()\n        os.makedirs(\"driver\", exist_ok=True)\n        os.makedirs(\"playwright/driver\", exist_ok=True)\n        self._download_and_extract_local_driver()\n\n        wheel = None\n        if os.getenv(\"PLAYWRIGHT_TARGET_WHEEL\", None):\n            wheel = list(\n                filter(\n                    lambda wheel: wheel[\"wheel\"]\n                    == os.getenv(\"PLAYWRIGHT_TARGET_WHEEL\"),\n                    base_wheel_bundles,\n                )\n            )[0]\n        else:\n            wheel = list(\n                filter(\n                    lambda wheel: wheel[\"platform\"] == sys.platform\n                    and wheel[\"machine\"] == platform.machine().lower(),\n                    base_wheel_bundles,\n                )\n            )[0]\n        assert wheel\n        self._build_wheel(wheel)\n\n    def _build_wheel(\n        self,\n        wheel_bundle: Dict[str, str],\n    ) -> None:\n        assert self.dist_dir\n        base_wheel_location: str = glob.glob(os.path.join(self.dist_dir, \"*.whl\"))[0]\n        without_platform = base_wheel_location[:-7]\n        download_driver(wheel_bundle[\"zip_name\"])\n        zip_file = f\"driver/playwright-{driver_version}-{wheel_bundle['zip_name']}.zip\"\n        with zipfile.ZipFile(zip_file, \"r\") as zip:\n            extractall(zip, f\"driver/{wheel_bundle['zip_name']}\")\n        wheel_location = without_platform + wheel_bundle[\"wheel\"]\n        shutil.copy(base_wheel_location, wheel_location)\n        with zipfile.ZipFile(\n            wheel_location, mode=\"a\", compression=zipfile.ZIP_DEFLATED\n        ) as zip:\n            driver_root = os.path.abspath(f\"driver/{wheel_bundle['zip_name']}\")\n            for dir_path, _, files in os.walk(driver_root):\n                for file in files:\n                    from_path = os.path.join(dir_path, file)\n                    to_path = os.path.relpath(from_path, driver_root)\n                    zip.write(from_path, f\"playwright/driver/{to_path}\")\n            zip.writestr(\n                \"playwright/driver/README.md\",\n                f\"{wheel_bundle['wheel']} driver package\",\n            )\n        os.remove(base_wheel_location)\n        for whlfile in glob.glob(os.path.join(self.dist_dir, \"*.whl\")):\n            os.makedirs(\"wheelhouse\", exist_ok=True)\n            if InWheel:\n                wheelhouse_whl = os.path.join(\"wheelhouse\", os.path.basename(whlfile))\n                shutil.move(whlfile, wheelhouse_whl)\n                with InWheel(in_wheel=wheelhouse_whl, out_wheel=whlfile):\n                    print(f\"Updating RECORD file of {whlfile}\")\n        print(\"Copying new wheels\")\n        shutil.rmtree(\"wheelhouse\")\n\n    def _download_and_extract_local_driver(\n        self,\n    ) -> None:\n        zip_names_for_current_system = set(\n            map(\n                lambda wheel: wheel[\"zip_name\"],\n                filter(\n                    lambda wheel: wheel[\"machine\"] == platform.machine().lower()\n                    and wheel[\"platform\"] == sys.platform,\n                    base_wheel_bundles,\n                ),\n            )\n        )\n        assert len(zip_names_for_current_system) == 1\n        zip_name = zip_names_for_current_system.pop()\n        download_driver(zip_name)\n        zip_file = f\"driver/playwright-{driver_version}-{zip_name}.zip\"\n        with zipfile.ZipFile(zip_file, \"r\") as zip:\n            extractall(zip, \"playwright/driver\")\n\n\nsetup(\n    cmdclass={\"bdist_wheel\": PlaywrightBDistWheelCommand},\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}