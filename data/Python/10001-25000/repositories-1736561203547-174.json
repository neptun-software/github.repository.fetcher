{
  "metadata": {
    "timestamp": 1736561203547,
    "page": 174,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Rapptz/discord.py",
      "stars": 15025,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.142578125,
          "content": "*.json\n*.py[cod]\n*.log\n*.egg-info\nvenv\n.venv\ndocs/_build\ndocs/crowdin.py\n*.buildinfo\n*.mp3\n*.m4a\n*.wav\n*.png\n*.jpg\n*.flac\n*.mo\n/.coverage\nbuild/*\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.24609375,
          "content": "version: 2\nformats: []\n\nbuild:\n  os: \"ubuntu-22.04\"\n  tools:\n    python: \"3.8\"\n\nsphinx:\n  configuration: docs/conf.py\n  fail_on_warning: false\n  builder: html\n\npython:\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - docs\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015-present Rapptz\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1083984375,
          "content": "include README.rst\ninclude LICENSE\ninclude requirements.txt\ninclude discord/bin/*.dll\ninclude discord/py.typed\n"
        },
        {
          "name": "README.ja.rst",
          "type": "blob",
          "size": 3.193359375,
          "content": "discord.py\n==========\n\n.. image:: https://discord.com/api/guilds/336642139381301249/embed.png\n   :target: https://discord.gg/nXzj3dg\n   :alt: Discordサーバーの招待\n.. image:: https://img.shields.io/pypi/v/discord.py.svg\n   :target: https://pypi.python.org/pypi/discord.py\n   :alt: PyPIのバージョン情報\n.. image:: https://img.shields.io/pypi/pyversions/discord.py.svg\n   :target: https://pypi.python.org/pypi/discord.py\n   :alt: PyPIのサポートしているPythonのバージョン\n\ndiscord.py は機能豊富かつモダンで使いやすい、非同期処理にも対応したDiscord用のAPIラッパーです。\n\n主な特徴\n-------------\n\n- ``async`` と ``await`` を使ったモダンなPythonらしいAPI。\n- 適切なレート制限処理\n- メモリと速度の両方を最適化。\n\nインストール\n-------------\n\n**Python 3.8 以降のバージョンが必須です**\n\n完全な音声サポートなしでライブラリをインストールする場合は次のコマンドを実行してください:\n\n.. code:: sh\n\n    # Linux/macOS\n    python3 -m pip install -U discord.py\n\n    # Windows\n    py -3 -m pip install -U discord.py\n\n音声サポートが必要なら、次のコマンドを実行しましょう:\n\n.. code:: sh\n\n    # Linux/macOS\n    python3 -m pip install -U discord.py[voice]\n\n    # Windows\n    py -3 -m pip install -U discord.py[voice]\n\n\n開発版をインストールしたいのならば、次の手順に従ってください:\n\n.. code:: sh\n\n    $ git clone https://github.com/Rapptz/discord.py\n    $ cd discord.py\n    $ python3 -m pip install -U .[voice]\n\n\nオプションパッケージ\n~~~~~~~~~~~~~~~~~~~~~~\n\n* PyNaCl (音声サポート用)\n\nLinuxで音声サポートを導入するには、前述のコマンドを実行する前にお気に入りのパッケージマネージャー(例えば ``apt`` や ``dnf`` など)を使って以下のパッケージをインストールする必要があります:\n\n* libffi-dev (システムによっては ``libffi-devel``)\n* python-dev (例えばPython 3.8用の ``python3.8-dev``)\n\n簡単な例\n--------------\n\n.. code:: py\n\n    import discord\n\n    class MyClient(discord.Client):\n        async def on_ready(self):\n            print('Logged on as', self.user)\n\n        async def on_message(self, message):\n            # don't respond to ourselves\n            if message.author == self.user:\n                return\n\n            if message.content == 'ping':\n                await message.channel.send('pong')\n\n    intents = discord.Intents.default()\n    intents.message_content = True\n    client = MyClient(intents=intents)\n    client.run('token')\n\nBotの例\n~~~~~~~~~~~~~\n\n.. code:: py\n\n    import discord\n    from discord.ext import commands\n\n    intents = discord.Intents.default()\n    intents.message_content = True\n    bot = commands.Bot(command_prefix='>', intents=intents)\n\n    @bot.command()\n    async def ping(ctx):\n        await ctx.send('pong')\n\n    bot.run('token')\n\nexamplesディレクトリに更に多くのサンプルがあります。\n\nリンク\n------\n\n- `ドキュメント <https://discordpy.readthedocs.io/ja/latest/index.html>`_\n- `公式Discordサーバー <https://discord.gg/nXzj3dg>`_\n- `Discord API <https://discord.gg/discord-api>`_\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 3.1240234375,
          "content": "discord.py\n==========\n\n.. image:: https://discord.com/api/guilds/336642139381301249/embed.png\n   :target: https://discord.gg/r3sSKJJ\n   :alt: Discord server invite\n.. image:: https://img.shields.io/pypi/v/discord.py.svg\n   :target: https://pypi.python.org/pypi/discord.py\n   :alt: PyPI version info\n.. image:: https://img.shields.io/pypi/pyversions/discord.py.svg\n   :target: https://pypi.python.org/pypi/discord.py\n   :alt: PyPI supported Python versions\n\nA modern, easy to use, feature-rich, and async ready API wrapper for Discord written in Python.\n\nKey Features\n-------------\n\n- Modern Pythonic API using ``async`` and ``await``.\n- Proper rate limit handling.\n- Optimised in both speed and memory.\n\nInstalling\n----------\n\n**Python 3.8 or higher is required**\n\nTo install the library without full voice support, you can just run the following command:\n\n.. note::\n\n    A `Virtual Environment <https://docs.python.org/3/library/venv.html>`__ is recommended to install\n    the library, especially on Linux where the system Python is externally managed and restricts which\n    packages you can install on it.\n\n\n.. code:: sh\n\n    # Linux/macOS\n    python3 -m pip install -U discord.py\n\n    # Windows\n    py -3 -m pip install -U discord.py\n\nOtherwise to get voice support you should run the following command:\n\n.. code:: sh\n\n    # Linux/macOS\n    python3 -m pip install -U \"discord.py[voice]\"\n\n    # Windows\n    py -3 -m pip install -U discord.py[voice]\n\n\nTo install the development version, do the following:\n\n.. code:: sh\n\n    $ git clone https://github.com/Rapptz/discord.py\n    $ cd discord.py\n    $ python3 -m pip install -U .[voice]\n\n\nOptional Packages\n~~~~~~~~~~~~~~~~~~\n\n* `PyNaCl <https://pypi.org/project/PyNaCl/>`__ (for voice support)\n\nPlease note that when installing voice support on Linux, you must install the following packages via your favourite package manager (e.g. ``apt``, ``dnf``, etc) before running the above commands:\n\n* libffi-dev (or ``libffi-devel`` on some systems)\n* python-dev (e.g. ``python3.8-dev`` for Python 3.8)\n\nQuick Example\n--------------\n\n.. code:: py\n\n    import discord\n\n    class MyClient(discord.Client):\n        async def on_ready(self):\n            print('Logged on as', self.user)\n\n        async def on_message(self, message):\n            # don't respond to ourselves\n            if message.author == self.user:\n                return\n\n            if message.content == 'ping':\n                await message.channel.send('pong')\n\n    intents = discord.Intents.default()\n    intents.message_content = True\n    client = MyClient(intents=intents)\n    client.run('token')\n\nBot Example\n~~~~~~~~~~~~~\n\n.. code:: py\n\n    import discord\n    from discord.ext import commands\n\n    intents = discord.Intents.default()\n    intents.message_content = True\n    bot = commands.Bot(command_prefix='>', intents=intents)\n\n    @bot.command()\n    async def ping(ctx):\n        await ctx.send('pong')\n\n    bot.run('token')\n\nYou can find more examples in the examples directory.\n\nLinks\n------\n\n- `Documentation <https://discordpy.readthedocs.io/en/latest/index.html>`_\n- `Official Discord Server <https://discord.gg/r3sSKJJ>`_\n- `Discord API <https://discord.gg/discord-api>`_\n"
        },
        {
          "name": "discord",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 3.0146484375,
          "content": "[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"discord.py\"\ndescription = \"A Python wrapper for the Discord API\"\nreadme = { file = \"README.rst\", content-type = \"text/x-rst\" }\nlicense = { file = \"LICENSE\" }\nrequires-python = \">=3.8\"\nauthors = [{ name = \"Rapptz\" }]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Intended Audience :: Developers\",\n    \"Natural Language :: English\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Topic :: Internet\",\n    \"Topic :: Software Development :: Libraries\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n    \"Topic :: Utilities\",\n    \"Typing :: Typed\",\n]\ndynamic = [\"version\", \"dependencies\"]\n\n[project.urls]\nDocumentation = \"https://discordpy.readthedocs.io/en/latest/\"\n\"Issue tracker\" = \"https://github.com/Rapptz/discord.py/issues\"\n\n[tool.setuptools.dynamic]\ndependencies = { file = \"requirements.txt\" }\n\n[project.optional-dependencies]\nvoice = [\"PyNaCl>=1.3.0,<1.6\"]\ndocs = [\n    \"sphinx==4.4.0\",\n    \"sphinxcontrib_trio==1.1.2\",\n    # TODO: bump these when migrating to a newer Sphinx version\n    \"sphinxcontrib-websupport==1.2.4\",\n    \"sphinxcontrib-applehelp==1.0.4\",\n    \"sphinxcontrib-devhelp==1.0.2\",\n    \"sphinxcontrib-htmlhelp==2.0.1\",\n    \"sphinxcontrib-jsmath==1.0.1\",\n    \"sphinxcontrib-qthelp==1.0.3\",\n    \"sphinxcontrib-serializinghtml==1.1.5\",\n    \"typing-extensions>=4.3,<5\",\n    \"sphinx-inline-tabs==2023.4.21\",\n]\nspeed = [\n    \"orjson>=3.5.4\",\n    \"aiodns>=1.1; sys_platform != 'win32'\",\n    \"Brotli\",\n    \"cchardet==2.1.7; python_version < '3.10'\",\n    \"zstandard>=0.23.0\"\n]\ntest = [\n    \"coverage[toml]\",\n    \"pytest\",\n    \"pytest-asyncio\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n    \"typing-extensions>=4.3,<5\",\n    \"tzdata; sys_platform == 'win32'\",\n]\n\n[tool.setuptools]\npackages = [\n    \"discord\",\n    \"discord.types\",\n    \"discord.ui\",\n    \"discord.webhook\",\n    \"discord.app_commands\",\n    \"discord.ext.commands\",\n    \"discord.ext.tasks\",\n]\ninclude-package-data = true\n\n[tool.black]\nline-length = 125\nskip-string-normalization = true\n\n[tool.coverage.run]\nomit = [\n    \"discord/__main__.py\",\n    \"discord/types/*\",\n    \"*/_types.py\",\n]\n\n[tool.coverage.report]\nexclude_lines = [\n    \"pragma: no cover\",\n    \"@overload\",\n]\n\n[tool.isort]\nprofile = \"black\"\ncombine_as_imports = true\ncombine_star = true\nline_length = 125\n\n[tool.pyright]\ninclude = [\n    \"discord\",\n    \"discord/app_commands\",\n    \"discord/types\",\n    \"discord/ui\",\n    \"discord/ext\",\n    \"discord/ext/commands\",\n    \"discord/ext/tasks\",\n]\nexclude = [\n    \"**/__pycache__\",\n    \"build\",\n    \"dist\",\n    \"docs\",\n]\nreportUnnecessaryTypeIgnoreComment = \"warning\"\nreportUnusedImport = \"error\"\npythonVersion = \"3.8\"\ntypeCheckingMode = \"basic\"\n\n[tool.pytest.ini_options]\nasyncio_mode = \"strict\"\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.052734375,
          "content": "aiohttp>=3.7.4,<4\naudioop-lts; python_version>='3.13'\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1,
          "content": "from setuptools import setup\nimport re\n\ndef derive_version() -> str:\n    version = ''\n    with open('discord/__init__.py') as f:\n        version = re.search(r'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]', f.read(), re.MULTILINE).group(1)\n\n    if not version:\n        raise RuntimeError('version is not set')\n\n    if version.endswith(('a', 'b', 'rc')):\n        # append version identifier based on commit count\n        try:\n            import subprocess\n\n            p = subprocess.Popen(['git', 'rev-list', '--count', 'HEAD'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            out, err = p.communicate()\n            if out:\n                version += out.decode('utf-8').strip()\n            p = subprocess.Popen(['git', 'rev-parse', '--short', 'HEAD'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            out, err = p.communicate()\n            if out:\n                version += '+g' + out.decode('utf-8').strip()\n        except Exception:\n            pass\n\n    return version\n\n\nsetup(version=derive_version())\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}