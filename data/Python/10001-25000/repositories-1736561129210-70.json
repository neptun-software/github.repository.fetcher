{
  "metadata": {
    "timestamp": 1736561129210,
    "page": 70,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mlc-ai/mlc-llm",
      "stars": 19587,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.28515625,
          "content": "# Run the following command to reformat a file:\n# clang-format -i -style=Google <file>\n# Or use clang-format-diff to only reformat the changed lines:\n# https://clang.llvm.org/docs/ClangFormat.html\nBasedOnStyle: Google\nDerivePointerAlignment: false\nColumnLimit:     100\nPointerAlignment: Left\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.841796875,
          "content": "tmp/\ndist/\nparams/\ndebug/\n*.bak\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n.DS_Store\n\n*.S\n# C extensions\n*.so\n\nbuild/\n\n*.ll\n.npm\n# Distribution / packaging\n.Python\nenv/\nbuild/\nbuild-*/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n.conda/\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Generated by python/gen_requirements.py\npython/requirements/*.txt\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\ndocs/_staging/\n\n# PyBuilder\ntarget/\n/target/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n*~\n*.pyc\n*~\nconfig.mk\nconfig.cmake\nWin32\n*.dir\nperf\n*.wasm\n.emscripten\n\n## IOS\nDerivedData/\n\n## Java\n*.class\njvm/*/target/\njvm/*/*/target/\njvm/native/*/generated\njvm/native/src/main/native/org_apache_tvm_native_c_api.h\n*.worksheet\n*.idea\n*.iml\n*.classpath\n*.project\n*.settings\n*/node_modules/\n\n## Various settings\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata/\n.pkl_memoize_*\n\n.emscripten*\n.m2\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n## Other\n*.moved-aside\n*.xccheckout\n*.xcscmblueprint\n.DS_Store\ntags\ncscope*\n*.lock\n\n# vim temporary files\n*.swp\n*.swo\n\n# TVM generated code\nperf\n.bash_history\n# *.json\n*.params\n*.ro\n*.onnx\n*.h5\nsynset.txt\ncat.jpg\ncat.png\ndocs.tgz\ncat.png\n*.mlmodel\ntvm_u.*\ntvm_t.*\n# Mac OS X\n.DS_Store\n\n# Jetbrain\n.idea\n.ipython\n.jupyter\n.nv\n.pylint.d\n.python_history\n.pytest_cache\n.local\ncmake-build-debug\n\n# Visual Studio\n.vs\n\n# Visual Studio Code\n.vscode\n\n# tmp file\n.nfs*\n\n# keys\n*.pem\n*.p12\n*.pfx\n*.cer\n*.crt\n*.der\n\n# patch sentinel\npatched.txt\n\n# Python type checking\n.mypy_cache/\n.pyre/\n\n# pipenv files\nPipfile\nPipfile.lock\n\n# conda package artifacts\nconda/Dockerfile.cuda*\nconda/pkg\n.node_repl_history\n# nix files\n.envrc\n*.nix\n\n# Docker files\n.sudo_as_admin_successful\n\n# Downloaded models/datasets\n.tvm_test_data\n.dgl\n.caffe2\n\n# Local docs build\n_docs/\njvm/target\n.config/configstore/\n.ci-py-scripts/\n\n# Generated Hexagon files\nsrc/runtime/hexagon/rpc/hexagon_rpc.h\nsrc/runtime/hexagon/rpc/hexagon_rpc_skel.c\nsrc/runtime/hexagon/rpc/hexagon_rpc_stub.c\n\n# Local tvm-site checkout\ntvm-site/\n\n# Generated docs files\ngallery/how_to/work_with_microtvm/micro_tvmc.py\n\n# Test sample data files\n!tests/python/ci/sample_prs/*.json\n\n# Used in CI to communicate between Python and Jenkins\n.docker-image-names/\n\n# Printed TIR code on disk\n*.tir\n\n# GDB history file\n.gdb_history\n\ndist\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.6005859375,
          "content": "[submodule \"3rdparty/argparse\"]\n\tpath = 3rdparty/argparse\n\turl = https://github.com/p-ranav/argparse\n[submodule \"3rdparty/tokenizers-cpp\"]\n\tpath = 3rdparty/tokenizers-cpp\n\turl = https://github.com/mlc-ai/tokenizers-cpp\n[submodule \"3rdparty/googletest\"]\n\tpath = 3rdparty/googletest\n\turl = https://github.com/google/googletest.git\n[submodule \"3rdparty/tvm\"]\n\tpath = 3rdparty/tvm\n\turl = https://github.com/mlc-ai/relax.git\n[submodule \"3rdparty/stb\"]\n\tpath = 3rdparty/stb\n\turl = https://github.com/nothings/stb.git\n[submodule \"3rdparty/xgrammar\"]\n\tpath = 3rdparty/xgrammar\n\turl = https://github.com/mlc-ai/xgrammar.git\n"
        },
        {
          "name": "3rdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 6.0869140625,
          "content": "cmake_minimum_required(VERSION 3.18)\nproject(mlc_llm C CXX)\n\ninclude(CheckCXXCompilerFlag)\nif(MSVC)\n  set(CMAKE_CXX_FLAGS \"/fp:fast ${CMAKE_CXX_FLAGS}\")\nelse()\n  set(CMAKE_CXX_FLAGS \"-ffast-math ${CMAKE_CXX_FLAGS}\")\nendif()\n\nif(EXISTS ${CMAKE_BINARY_DIR}/config.cmake)\n  include(${CMAKE_BINARY_DIR}/config.cmake)\nelse()\n  if(EXISTS ${CMAKE_SOURCE_DIR}/config.cmake)\n    include(${CMAKE_SOURCE_DIR}/config.cmake)\n  endif()\nendif()\n\nif(NOT CMAKE_BUILD_TYPE)\n  set(\n    CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING \"Build type\" FORCE\n  )\n  message(STATUS \"Setting default build type to \" ${CMAKE_BUILD_TYPE})\nendif(NOT CMAKE_BUILD_TYPE)\n\noption(MLC_HIDE_PRIVATE_SYMBOLS \"Hide private symbols\" ON)\n\nif (MLC_LLM_INSTALL_STATIC_LIB)\n  set(BUILD_STATIC_RUNTIME ON)\nendif()\n\nset(MLC_VISIBILITY_FLAG \"\")\nif (MLC_HIDE_PRIVATE_SYMBOLS)\n  set(HIDE_PRIVATE_SYMBOLS ON)\n  if (NOT MSVC)\n    set(MLC_VISIBILITY_FLAG \"-fvisibility=hidden\")\n  endif()\n  message(STATUS \"Hide private symbols\")\nendif()\n\noption(BUILD_CPP_TEST \"Build cpp unittests\" OFF)\n\nset(CMAKE_CUDA_STANDARD 17)\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\n# tvm runtime config: minimize runtime components\nset(USE_RPC OFF)\nset(USE_MICRO OFF)\nset(USE_GRAPH_EXECUTOR OFF)\nset(USE_GRAPH_EXECUTOR_DEBUG OFF)\nset(USE_AOT_EXECUTOR OFF)\nset(USE_PROFILER OFF)\nset(USE_GTEST OFF)\nset(USE_LIBBACKTRACE OFF)\nset(BUILD_DUMMY_LIBTVM ON)\nif (NOT DEFINED TVM_SOURCE_DIR)\n  if(DEFINED ENV{TVM_SOURCE_DIR})\n    set(TVM_SOURCE_DIR \"$ENV{TVM_SOURCE_DIR}\")\n  else()\n    set(TVM_SOURCE_DIR 3rdparty/tvm)\n  endif(DEFINED ENV{TVM_SOURCE_DIR})\nendif (NOT DEFINED TVM_SOURCE_DIR)\nmessage(STATUS \"TVM_SOURCE_DIR: ${TVM_SOURCE_DIR}\")\nadd_subdirectory(${TVM_SOURCE_DIR} tvm EXCLUDE_FROM_ALL)\n\nset(MLC_LLM_RUNTIME_LINKER_LIB \"\")\nset(TOKENZIER_CPP_PATH 3rdparty/tokenizers-cpp)\nadd_subdirectory(${TOKENZIER_CPP_PATH} tokenizers EXCLUDE_FROM_ALL)\n\nset(XGRAMMAR_PATH 3rdparty/xgrammar)\ntvm_file_glob(GLOB_RECURSE MLC_LLM_SRCS cpp/*.cc)\ntvm_file_glob(GLOB_RECURSE XGRAMMAR_SRCS ${XGRAMMAR_PATH}/cpp/*.cc)\nlist(FILTER XGRAMMAR_SRCS EXCLUDE REGEX \"${XGRAMMAR_PATH}/cpp/pybind/.*\\\\.cc\")\nlist(APPEND MLC_LLM_SRCS ${XGRAMMAR_SRCS})\nadd_library(mlc_llm_objs OBJECT ${MLC_LLM_SRCS})\n\nset(\n  MLC_LLM_INCLUDES\n  ${TVM_SOURCE_DIR}/include\n  ${TVM_SOURCE_DIR}/3rdparty/dlpack/include\n  ${TVM_SOURCE_DIR}/3rdparty/dmlc-core/include\n  ${TVM_SOURCE_DIR}/3rdparty/picojson\n)\n\nset(MLC_LLM_COMPILE_DEFS ${MLC_LLM_COMPILE_DEFS} DMLC_USE_LOGGING_LIBRARY=<tvm/runtime/logging.h>)\nset(MLC_LLM_COMPILE_DEFS ${MLC_LLM_COMPILE_DEFS} __STDC_FORMAT_MACROS=1)\nset(MLC_LLM_COMPILE_DEFS ${MLC_LLM_COMPILE_DEFS} PICOJSON_USE_INT64)\nset(MLC_LLM_COMPILE_DEFS ${MLC_LLM_COMPILE_DEFS} XGRAMMAR_ENABLE_LOG_DEBUG=0)\n\ntarget_compile_definitions(mlc_llm_objs PRIVATE ${MLC_LLM_COMPILE_DEFS})\ntarget_compile_definitions(mlc_llm_objs PRIVATE -DMLC_LLM_EXPORTS)\ntarget_include_directories(mlc_llm_objs PRIVATE ${MLC_LLM_INCLUDES})\ntarget_include_directories(mlc_llm_objs PRIVATE 3rdparty/stb)\ntarget_include_directories(mlc_llm_objs PRIVATE ${TOKENZIER_CPP_PATH}/include)\ntarget_include_directories(mlc_llm_objs PRIVATE ${XGRAMMAR_PATH}/include)\n\nadd_library(mlc_llm SHARED $<TARGET_OBJECTS:mlc_llm_objs>)\nadd_library(mlc_llm_static STATIC $<TARGET_OBJECTS:mlc_llm_objs>)\nadd_dependencies(mlc_llm_static tokenizers_cpp sentencepiece-static tokenizers_c tvm_runtime)\nset_target_properties(mlc_llm_static PROPERTIES OUTPUT_NAME mlc_llm)\n\ntarget_link_libraries(mlc_llm PUBLIC tvm_runtime)\ntarget_link_libraries(mlc_llm PRIVATE tokenizers_cpp)\n\nfind_library(\n  FLASH_ATTN_LIBRARY flash_attn\n  HINTS ${TVM_SOURCE_DIR}/*/3rdparty/libflash_attn/src\n)\n\nif (FLASH_ATTN_LIBRARY STREQUAL \"FLASH_ATTN_LIBRARY-NOTFOUND\")\n  message(WARNING \"Cannot find libflash_attn. The model must not have been built with --use-flash-attn-mqa option.\")\nelse ()\n  target_link_libraries(mlc_llm PUBLIC -Wl,--no-as-needed ${FLASH_ATTN_LIBRARY})\nendif()\n\nif(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    target_compile_definitions(mlc_llm PRIVATE \"TVM_LOG_DEBUG\")\n    target_compile_definitions(mlc_llm_objs PRIVATE \"TVM_LOG_DEBUG\")\n    target_compile_definitions(mlc_llm_static PRIVATE \"TVM_LOG_DEBUG\")\nendif()\n\nif (BUILD_CPP_TEST)\n  message(STATUS \"Building cpp unittests\")\n  add_subdirectory(3rdparty/googletest)\n  file(GLOB_RECURSE MLC_LLM_TEST_SRCS ${PROJECT_SOURCE_DIR}/tests/cpp/*unittest.cc)\n  add_executable(mlc_llm_cpp_tests ${MLC_LLM_TEST_SRCS})\n  target_include_directories(mlc_llm_cpp_tests PRIVATE ${MLC_LLM_INCLUDES})\n  target_include_directories(mlc_llm_cpp_tests PRIVATE ${PROJECT_SOURCE_DIR}/cpp)\n  target_include_directories(mlc_llm_cpp_tests PRIVATE ${gtest_SOURCE_DIR}/include ${gtest_SOURCE_DIR})\n  target_link_libraries(mlc_llm_cpp_tests PUBLIC mlc_llm gtest gtest_main)\nendif(BUILD_CPP_TEST)\n\nif (CMAKE_SYSTEM_NAME STREQUAL \"Android\")\n  target_link_libraries(mlc_llm PRIVATE log)\n  target_link_libraries(tokenizers_cpp PRIVATE log)\nendif()\n\nadd_library(mlc_llm_module SHARED $<TARGET_OBJECTS:mlc_llm_objs>)\ntarget_link_libraries(mlc_llm_module PUBLIC tvm)\ntarget_link_libraries(mlc_llm_module PRIVATE tokenizers_cpp)\n\nset_property(TARGET mlc_llm_module APPEND PROPERTY LINK_OPTIONS \"${MLC_VISIBILITY_FLAG}\")\nset_property(TARGET mlc_llm APPEND PROPERTY LINK_OPTIONS \"${MLC_VISIBILITY_FLAG}\")\n\nfind_program(CARGO_EXECUTABLE cargo)\n\nif(NOT CARGO_EXECUTABLE)\n    message(FATAL_ERROR \"Cargo is not found! Please install cargo.\")\nendif()\n\n# when this option is on,\n# we install all static lib deps into lib\nif (MLC_LLM_INSTALL_STATIC_LIB)\n  install(TARGETS\n    mlc_llm_static\n    tokenizers_cpp\n    sentencepiece-static\n    tvm_runtime\n    LIBRARY DESTINATION lib${LIB_SUFFIX}\n    )\n  # tokenizers need special handling as it builds from rust\n  if(MSVC)\n    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/tokenizers/libtokenizers_c.lib\n      DESTINATION lib${LIB_SUFFIX}\n      )\n  else()\n    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/tokenizers/libtokenizers_c.a\n      DESTINATION lib${LIB_SUFFIX}\n      )\n  endif()\nelse()\n  install(TARGETS tvm_runtime mlc_llm mlc_llm_module\n    mlc_llm_static\n    tokenizers_cpp\n    sentencepiece-static\n    RUNTIME_DEPENDENCY_SET tokenizers_c\n    RUNTIME DESTINATION bin\n    LIBRARY DESTINATION lib${LIB_SUFFIX}\n  )\nendif()\n"
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 0.1494140625,
          "content": "MLC LLM Contributors\n====================\n\n\n## List of Contributors\n- [Full List of Contributors](https://github.com/mlc-ai/mlc-llm/graphs/contributors)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.08984375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.0556640625,
          "content": "MLC LLM\n\nCopyright (c) 2023-2025 by MLC LLM Contributors\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.083984375,
          "content": "<div align=\"center\">\n\n# MLC LLM\n\n[![Installation](https://img.shields.io/badge/docs-latest-green)](https://llm.mlc.ai/docs/)\n[![License](https://img.shields.io/badge/license-apache_2-blue)](https://github.com/mlc-ai/mlc-llm/blob/main/LICENSE)\n[![Join Discoard](https://img.shields.io/badge/Join-Discord-7289DA?logo=discord&logoColor=white)](https://discord.gg/9Xpy2HGBuD)\n[![Related Repository: WebLLM](https://img.shields.io/badge/Related_Repo-WebLLM-fafbfc?logo=github)](https://github.com/mlc-ai/web-llm/)\n\n**Universal LLM Deployment Engine with ML Compilation**\n\n[Get Started](https://llm.mlc.ai/docs/get_started/quick_start) | [Documentation](https://llm.mlc.ai/docs) | [Blog](https://blog.mlc.ai/)\n\n</div>\n\n## About\n\nMLC LLM is a machine learning compiler and high-performance deployment engine for large language models.  The mission of this project is to enable everyone to develop, optimize, and deploy AI models natively on everyone's platforms. \n\n<div align=\"center\">\n<table style=\"width:100%\">\n  <thead>\n    <tr>\n      <th style=\"width:15%\"> </th>\n      <th style=\"width:20%\">AMD GPU</th>\n      <th style=\"width:20%\">NVIDIA GPU</th>\n      <th style=\"width:20%\">Apple GPU</th>\n      <th style=\"width:24%\">Intel GPU</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Linux / Win</td>\n      <td>✅ Vulkan, ROCm</td>\n      <td>✅ Vulkan, CUDA</td>\n      <td>N/A</td>\n      <td>✅ Vulkan</td>\n    </tr>\n    <tr>\n      <td>macOS</td>\n      <td>✅ Metal (dGPU)</td>\n      <td>N/A</td>\n      <td>✅ Metal</td>\n      <td>✅ Metal (iGPU)</td>\n    </tr>\n    <tr>\n      <td>Web Browser</td>\n      <td colspan=4>✅ WebGPU and WASM </td>\n    </tr>\n    <tr>\n      <td>iOS / iPadOS</td>\n      <td colspan=4>✅ Metal on Apple A-series GPU</td>\n    </tr>\n    <tr>\n      <td>Android</td>\n      <td colspan=2>✅ OpenCL on Adreno GPU</td>\n      <td colspan=2>✅ OpenCL on Mali GPU</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\nMLC LLM compiles and runs code on MLCEngine -- a unified high-performance LLM inference engine across the above platforms. MLCEngine provides OpenAI-compatible API available through REST server, python, javascript, iOS, Android, all backed by the same engine and compiler that we keep improving with the community.\n\n## Get Started\n\nPlease visit our [documentation](https://llm.mlc.ai/docs/) to get started with MLC LLM.\n- [Installation](https://llm.mlc.ai/docs/install/mlc_llm)\n- [Quick start](https://llm.mlc.ai/docs/get_started/quick_start)\n- [Introduction](https://llm.mlc.ai/docs/get_started/introduction)\n\n## Citation\n\nPlease consider citing our project if you find it useful:\n\n```bibtex\n@software{mlc-llm,\n    author = {{MLC team}},\n    title = {{MLC-LLM}},\n    url = {https://github.com/mlc-ai/mlc-llm},\n    year = {2023-2025}\n}\n```\n\nThe underlying techniques of MLC LLM include:\n\n<details>\n  <summary>References (Click to expand)</summary>\n\n  ```bibtex\n  @inproceedings{tensorir,\n      author = {Feng, Siyuan and Hou, Bohan and Jin, Hongyi and Lin, Wuwei and Shao, Junru and Lai, Ruihang and Ye, Zihao and Zheng, Lianmin and Yu, Cody Hao and Yu, Yong and Chen, Tianqi},\n      title = {TensorIR: An Abstraction for Automatic Tensorized Program Optimization},\n      year = {2023},\n      isbn = {9781450399166},\n      publisher = {Association for Computing Machinery},\n      address = {New York, NY, USA},\n      url = {https://doi.org/10.1145/3575693.3576933},\n      doi = {10.1145/3575693.3576933},\n      booktitle = {Proceedings of the 28th ACM International Conference on Architectural Support for Programming Languages and Operating Systems, Volume 2},\n      pages = {804–817},\n      numpages = {14},\n      keywords = {Tensor Computation, Machine Learning Compiler, Deep Neural Network},\n      location = {Vancouver, BC, Canada},\n      series = {ASPLOS 2023}\n  }\n\n  @inproceedings{metaschedule,\n      author = {Shao, Junru and Zhou, Xiyou and Feng, Siyuan and Hou, Bohan and Lai, Ruihang and Jin, Hongyi and Lin, Wuwei and Masuda, Masahiro and Yu, Cody Hao and Chen, Tianqi},\n      booktitle = {Advances in Neural Information Processing Systems},\n      editor = {S. Koyejo and S. Mohamed and A. Agarwal and D. Belgrave and K. Cho and A. Oh},\n      pages = {35783--35796},\n      publisher = {Curran Associates, Inc.},\n      title = {Tensor Program Optimization with Probabilistic Programs},\n      url = {https://proceedings.neurips.cc/paper_files/paper/2022/file/e894eafae43e68b4c8dfdacf742bcbf3-Paper-Conference.pdf},\n      volume = {35},\n      year = {2022}\n  }\n\n  @inproceedings{tvm,\n      author = {Tianqi Chen and Thierry Moreau and Ziheng Jiang and Lianmin Zheng and Eddie Yan and Haichen Shen and Meghan Cowan and Leyuan Wang and Yuwei Hu and Luis Ceze and Carlos Guestrin and Arvind Krishnamurthy},\n      title = {{TVM}: An Automated {End-to-End} Optimizing Compiler for Deep Learning},\n      booktitle = {13th USENIX Symposium on Operating Systems Design and Implementation (OSDI 18)},\n      year = {2018},\n      isbn = {978-1-939133-08-3},\n      address = {Carlsbad, CA},\n      pages = {578--594},\n      url = {https://www.usenix.org/conference/osdi18/presentation/chen},\n      publisher = {USENIX Association},\n      month = oct,\n  }\n  ```\n</details>\n\n\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpp",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "ios",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.1748046875,
          "content": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n[tool.isort]\nprofile = \"black\"\nsrc_paths = [\"python/mlc_llm\"]\nknown_third_party = [\"numpy\", \"tvm\", \"tqdm\", \"torch\", \"transformers\"]\n\n[tool.black]\nline-length = 100\n\n[tool.mypy]\nignore_missing_imports = true\nshow_column_numbers = true\nshow_error_context = true\nfollow_imports = \"skip\"\nignore_errors = false\nstrict_optional = false\n\n[tool.pylint.messages_control]\nmax-line-length = 100\ndisable = \"\"\"\nduplicate-code,\n\"\"\"\n"
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "site",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.py",
          "type": "blob",
          "size": 4.2685546875,
          "content": "# pylint: disable=missing-docstring\nimport argparse\nimport logging\nimport os\nimport subprocess\n\n# Modify the following value during release\n# ---------------------------------------------------\n# Current version:\n# We use the version of the incoming release for code\n# that is under development.\n#\n# It is also fallback version to be used when --git-describe\n# is not invoked, or when the repository does not present the\n# git tags in a format that this script can use.\n#\n# Two tag formats are supported:\n# - vMAJ.MIN.PATCH (e.g. v0.8.0) or\n# - vMAJ.MIN.devN (e.g. v0.8.dev0)\n\n# ---------------------------------------------------\n\n__version__ = \"0.1.dev0\"\nPROJ_ROOT = os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))\n\n\ndef py_str(cstr):\n    return cstr.decode(\"utf-8\")\n\n\ndef git_describe_version():\n    \"\"\"Get PEP-440 compatible public and local version using git describe.\n\n    Returns\n    -------\n    pub_ver: str\n        Public version.\n\n    local_ver: str\n        Local version (with additional label appended to pub_ver).\n\n    Notes\n    -----\n    - We follow PEP 440's convention of public version\n      and local versions.\n    - Only tags conforming to vMAJOR.MINOR.REV (e.g. \"v0.7.0\")\n      are considered in order to generate the version string.\n      See the use of `--match` in the `git` command below.\n\n    Here are some examples:\n\n    - pub_ver = '0.7.0', local_ver = '0.7.0':\n      We are at the 0.7.0 release.\n    - pub_ver =  '0.8.dev94', local_ver = '0.8.dev94+g0d07a329e':\n      We are at the 0.8 development cycle.\n      The current source contains 94 additional commits\n      after the most recent tag(v0.7.0),\n      the git short hash tag of the current commit is 0d07a329e.\n    \"\"\"\n    cmd = [\n        \"git\",\n        \"describe\",\n        \"--tags\",\n        \"--match\",\n        \"v[0-9]*.[0-9]*.[0-9]*\",\n        \"--match\",\n        \"v[0-9]*.[0-9]*.dev[0-9]*\",\n    ]\n    with subprocess.Popen(\n        cmd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        cwd=PROJ_ROOT,\n    ) as proc:\n        (out, _) = proc.communicate()\n\n    if proc.returncode != 0:\n        msg = py_str(out)\n        logging.warning(\"git describe: %s\", msg)\n        return None, None\n    describe = py_str(out).strip()\n    arr_info = describe.split(\"-\")\n\n    # Remove the v prefix, mainly to be robust\n    # to the case where v is not presented as well.\n    if arr_info[0].startswith(\"v\"):\n        arr_info[0] = arr_info[0][1:]\n\n    # hit the exact tag\n    if len(arr_info) == 1:\n        return arr_info[0], arr_info[0]\n\n    if len(arr_info) != 3:\n        logging.warning(\"Invalid output from git describe %s\", describe)\n        return None, None\n\n    dev_pos = arr_info[0].find(\".dev\")\n\n    # Development versions:\n    # The code will reach this point in case it can't match a full release version, such as v0.7.0.\n    #\n    # 1. in case the last known label looks like vMAJ.MIN.devN e.g. v0.8.dev0, we use\n    # the current behavior of just using vMAJ.MIN.devNNNN+gGIT_REV\n    if dev_pos != -1:\n        dev_version = arr_info[0][: arr_info[0].find(\".dev\")]\n    # 2. in case the last known label looks like vMAJ.MIN.PATCH e.g. v0.8.0\n    # then we just carry on with a similar version to what git describe provides, which is\n    # vMAJ.MIN.PATCH.devNNNN+gGIT_REV\n    else:\n        dev_version = arr_info[0]\n\n    pub_ver = f\"{dev_version}.dev{arr_info[1]}\"\n    local_ver = f\"{pub_ver}+{arr_info[2]}\"\n    return pub_ver, local_ver\n\n\ndef main():\n    logging.basicConfig(level=logging.INFO)\n    parser = argparse.ArgumentParser(description=\"Detect and synchronize version.\")\n    parser.add_argument(\n        \"--print-version\",\n        action=\"store_true\",\n        help=\"Print version to the command line. No changes is applied to files.\",\n    )\n    parser.add_argument(\n        \"--git-describe\",\n        action=\"store_true\",\n        help=\"Use git describe to generate development version.\",\n    )\n    parser.add_argument(\"--dry-run\", action=\"store_true\")\n    pub_ver, local_ver = git_describe_version()\n    opt = parser.parse_args()\n    pub_ver, local_ver = None, None\n    if opt.git_describe:\n        pub_ver, local_ver = git_describe_version()\n    if pub_ver is None:\n        pub_ver = __version__\n    if local_ver is None:\n        local_ver = __version__\n    if opt.print_version:\n        print(local_ver)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}