{
  "metadata": {
    "timestamp": 1736561362626,
    "page": 399,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "LonamiWebs/Telethon",
      "stars": 10274,
      "defaultBranch": "v1",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.080078125,
          "content": "[run]\nbranch = true\nparallel = true\nsource =\n    telethon\n\n[report]\nprecision = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3515625,
          "content": "# Generated code\n/telethon/tl/functions/\n/telethon/tl/types/\n/telethon/tl/alltlobjects.py\n/telethon/errors/rpcerrorlist.py\n\n# User session\n*.session\n/usermedia/\n\n# Builds and testing\n__pycache__/\n/dist/\n/build/\n/*.egg-info/\n/readthedocs/_build/\n/.tox/\n\n# API reference docs\n/docs/\n\n# File used to manually test new changes, contains sensitive data\n/example.py\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.642578125,
          "content": "-   repo: git://github.com/pre-commit/pre-commit-hooks\n    sha: 7539d8bd1a00a3c1bfd34cdb606d3a6372e83469\n    hooks:\n    -   id: check-added-large-files\n    -   id: check-case-conflict\n    -   id: check-merge-conflict\n    -   id: check-symlinks\n    -   id: check-yaml\n    -   id: double-quote-string-fixer\n    -   id: end-of-file-fixer\n    -   id: name-tests-test\n    -   id: trailing-whitespace\n-   repo: git://github.com/pre-commit/mirrors-yapf\n    sha: v0.11.1\n    hooks:\n    -   id: yapf\n-   repo: git://github.com/FalconSocial/pre-commit-python-sorter\n    sha: 1.0.4\n    hooks:\n    -   id: python-import-sorter\n        args:\n        - --silent-overwrite\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.26171875,
          "content": "# https://docs.readthedocs.io/en/stable/config-file/v2.html\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\nsphinx:\n  configuration: readthedocs/conf.py\n\nformats:\n  - pdf\n  - epub\n\npython:\n  install:\n    - requirements: readthedocs/requirements.txt\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0498046875,
          "content": "MIT License\n\nCopyright (c) 2016-Present LonamiWebs\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 2.4990234375,
          "content": "Telethon\n========\n.. epigraph::\n\n  ⭐️ Thanks **everyone** who has starred the project, it means a lot!\n\n|logo| **Telethon** is an asyncio_ **Python 3**\nMTProto_ library to interact with Telegram_'s API\nas a user or through a bot account (bot API alternative).\n\n.. important::\n\n    If you have code using Telethon before its 1.0 version, you must\n    read `Compatibility and Convenience`_ to learn how to migrate.\n    As with any third-party library for Telegram, be careful not to\n    break `Telegram's ToS`_ or `Telegram can ban the account`_.\n\nWhat is this?\n-------------\n\nTelegram is a popular messaging application. This library is meant\nto make it easy for you to write Python programs that can interact\nwith Telegram. Think of it as a wrapper that has already done the\nheavy job for you, so you can focus on developing an application.\n\n\nInstalling\n----------\n\n.. code-block:: sh\n\n  pip3 install telethon\n\n\nCreating a client\n-----------------\n\n.. code-block:: python\n\n    from telethon import TelegramClient, events, sync\n\n    # These example values won't work. You must get your own api_id and\n    # api_hash from https://my.telegram.org, under API Development.\n    api_id = 12345\n    api_hash = '0123456789abcdef0123456789abcdef'\n\n    client = TelegramClient('session_name', api_id, api_hash)\n    client.start()\n\n\nDoing stuff\n-----------\n\n.. code-block:: python\n\n    print(client.get_me().stringify())\n\n    client.send_message('username', 'Hello! Talking to you from Telethon')\n    client.send_file('username', '/home/myself/Pictures/holidays.jpg')\n\n    client.download_profile_photo('me')\n    messages = client.get_messages('username')\n    messages[0].download_media()\n\n    @client.on(events.NewMessage(pattern='(?i)hi|hello'))\n    async def handler(event):\n        await event.respond('Hey!')\n\n\nNext steps\n----------\n\nDo you like how Telethon looks? Check out `Read The Docs`_ for a more\nin-depth explanation, with examples, troubleshooting issues, and more\nuseful information.\n\n.. _asyncio: https://docs.python.org/3/library/asyncio.html\n.. _MTProto: https://core.telegram.org/mtproto\n.. _Telegram: https://telegram.org\n.. _Compatibility and Convenience: https://docs.telethon.dev/en/stable/misc/compatibility-and-convenience.html\n.. _Telegram's ToS: https://core.telegram.org/api/terms\n.. _Telegram can ban the account: https://docs.telethon.dev/en/stable/quick-references/faq.html#my-account-was-deleted-limited-when-using-the-library\n.. _Read The Docs: https://docs.telethon.dev\n\n.. |logo| image:: logo.svg\n    :width: 24pt\n    :height: 24pt\n"
        },
        {
          "name": "dev-requirements.txt",
          "type": "blob",
          "size": 0.0322265625,
          "content": "pytest\npytest-cov\npytest-asyncio\n"
        },
        {
          "name": "logo.svg",
          "type": "blob",
          "size": 0.3955078125,
          "content": "<!-- Logo hand-made by Lonami (C) LonamiWebs 2018, tidied up by JuanPotato -->\n<svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\">\n  <circle cx=\"50\" cy=\"50\" r=\"45\" fill=\"#3777b0\" />\n  <path d=\"M20 30 h60 v10 l-2 2 h-17.5 l-10.5 43 l-2 2 l-12.5 -45 h-17.5 v-10\" fill=\"#f0a727\"/>\n  <path d=\"M20 30 h60 v10 h-17.5 l-12.5 45 l-12.5 -45 h-17.5 v-10\" fill=\"#ffd750\"/>\n</svg>\n"
        },
        {
          "name": "optional-requirements.txt",
          "type": "blob",
          "size": 0.05078125,
          "content": "cryptg\npysocks\npython-socks[asyncio]\nhachoir\npillow\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.138671875,
          "content": "# https://snarky.ca/what-the-heck-is-pyproject-toml/\n[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n# Need to use legacy format for the time being\n# https://tox.readthedocs.io/en/3.20.0/example/basic.html#pyproject-toml-tox-legacy-ini\n[tool.tox]\nlegacy_tox_ini = \"\"\"\n[tox]\nenvlist = py35,py36,py37,py38\n\n# run with tox -e py\n[testenv]\ndeps =\n    -rrequirements.txt\n    -roptional-requirements.txt\n    -rdev-requirements.txt\ncommands =\n    # NOTE: you can run any command line tool here - not just tests\n    pytest {posargs}\n\n# run with tox -e flake\n[testenv:flake]\ndeps =\n    -rrequirements.txt\n    -roptional-requirements.txt\n    -rdev-requirements.txt\n    flake8\ncommands =\n    # stop the build if there are Python syntax errors or undefined names\n    flake8 telethon/ telethon_generator/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics\n    # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide\n    flake8 telethon/ telethon_generator/ tests/ --count --exit-zero --exclude telethon/tl/,telethon/errors/rpcerrorlist.py --max-complexity=10 --max-line-length=127 --statistics\n\n\"\"\"\n"
        },
        {
          "name": "readthedocs",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.009765625,
          "content": "pyaes\nrsa\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 8.6953125,
          "content": "#!/usr/bin/env python3\n\"\"\"A setuptools based setup module.\n\nSee:\nhttps://packaging.python.org/en/latest/distributing.html\nhttps://github.com/pypa/sampleproject\n\nExtra supported commands are:\n* gen, to generate the classes required for Telethon to run or docs\n* pypi, to generate sdist, bdist_wheel, and push to PyPi\n\"\"\"\n\nimport itertools\nimport json\nimport os\nimport re\nimport shutil\nimport sys\nimport urllib.request\nfrom pathlib import Path\nfrom subprocess import run\n\nfrom setuptools import find_packages, setup\n\n# Needed since we're importing local files\nsys.path.insert(0, os.path.dirname(__file__))\n\nclass TempWorkDir:\n    \"\"\"Switches the working directory to be the one on which this file lives,\n       while within the 'with' block.\n    \"\"\"\n    def __init__(self, new=None):\n        self.original = None\n        self.new = new or str(Path(__file__).parent.resolve())\n\n    def __enter__(self):\n        # os.chdir does not work with Path in Python 3.5.x\n        self.original = str(Path('.').resolve())\n        os.makedirs(self.new, exist_ok=True)\n        os.chdir(self.new)\n        return self\n\n    def __exit__(self, *args):\n        os.chdir(self.original)\n\n\nAPI_REF_URL = 'https://tl.telethon.dev/'\n\nGENERATOR_DIR = Path('telethon_generator')\nLIBRARY_DIR = Path('telethon')\n\nERRORS_IN = GENERATOR_DIR / 'data/errors.csv'\nERRORS_OUT = LIBRARY_DIR / 'errors/rpcerrorlist.py'\n\nMETHODS_IN = GENERATOR_DIR / 'data/methods.csv'\n\n# Which raw API methods are covered by *friendly* methods in the client?\nFRIENDLY_IN = GENERATOR_DIR / 'data/friendly.csv'\n\nTLOBJECT_IN_TLS = [Path(x) for x in GENERATOR_DIR.glob('data/*.tl')]\nTLOBJECT_OUT = LIBRARY_DIR / 'tl'\nIMPORT_DEPTH = 2\n\nDOCS_IN_RES = GENERATOR_DIR / 'data/html'\nDOCS_OUT = Path('docs')\n\n\ndef generate(which, action='gen'):\n    from telethon_generator.parsers import\\\n        parse_errors, parse_methods, parse_tl, find_layer\n\n    from telethon_generator.generators import\\\n        generate_errors, generate_tlobjects, generate_docs, clean_tlobjects\n\n    layer = next(filter(None, map(find_layer, TLOBJECT_IN_TLS)))\n    errors = list(parse_errors(ERRORS_IN))\n    methods = list(parse_methods(METHODS_IN, FRIENDLY_IN, {e.str_code: e for e in errors}))\n\n    tlobjects = list(itertools.chain(*(\n        parse_tl(file, layer, methods) for file in TLOBJECT_IN_TLS)))\n\n    if not which:\n        which.extend(('tl', 'errors'))\n\n    clean = action == 'clean'\n    action = 'Cleaning' if clean else 'Generating'\n\n    if 'all' in which:\n        which.remove('all')\n        for x in ('tl', 'errors', 'docs'):\n            if x not in which:\n                which.append(x)\n\n    if 'tl' in which:\n        which.remove('tl')\n        print(action, 'TLObjects...')\n        if clean:\n            clean_tlobjects(TLOBJECT_OUT)\n        else:\n            generate_tlobjects(tlobjects, layer, IMPORT_DEPTH, TLOBJECT_OUT)\n\n    if 'errors' in which:\n        which.remove('errors')\n        print(action, 'RPCErrors...')\n        if clean:\n            if ERRORS_OUT.is_file():\n                ERRORS_OUT.unlink()\n        else:\n            with ERRORS_OUT.open('w') as file:\n                generate_errors(errors, file)\n\n    if 'docs' in which:\n        which.remove('docs')\n        print(action, 'documentation...')\n        if clean:\n            if DOCS_OUT.is_dir():\n                shutil.rmtree(str(DOCS_OUT))\n        else:\n            in_path = DOCS_IN_RES.resolve()\n            with TempWorkDir(DOCS_OUT):\n                generate_docs(tlobjects, methods, layer, in_path)\n\n    if 'json' in which:\n        which.remove('json')\n        print(action, 'JSON schema...')\n        json_files = [x.with_suffix('.json') for x in TLOBJECT_IN_TLS]\n        if clean:\n            for file in json_files:\n                if file.is_file():\n                    file.unlink()\n        else:\n            def gen_json(fin, fout):\n                meths = []\n                constructors = []\n                for tl in parse_tl(fin, layer):\n                    if tl.is_function:\n                        meths.append(tl.to_dict())\n                    else:\n                        constructors.append(tl.to_dict())\n                what = {'constructors': constructors, 'methods': meths}\n                with open(fout, 'w') as f:\n                    json.dump(what, f, indent=2)\n\n            for fs in zip(TLOBJECT_IN_TLS, json_files):\n                gen_json(*fs)\n\n    if which:\n        print(\n            'The following items were not understood:', which,\n            '\\n  Consider using only \"tl\", \"errors\" and/or \"docs\".'\n            '\\n  Using only \"clean\" will clean them. \"all\" to act on all.'\n            '\\n  For instance \"gen tl errors\".'\n        )\n\n\ndef main(argv):\n    if len(argv) >= 2 and argv[1] in ('gen', 'clean'):\n        generate(argv[2:], argv[1])\n\n    elif len(argv) >= 2 and argv[1] == 'pypi':\n        # Make sure tl.telethon.dev is up-to-date first\n        with urllib.request.urlopen(API_REF_URL) as resp:\n            html = resp.read()\n            m = re.search(br'layer\\s+(\\d+)', html)\n            if not m:\n                print('Failed to check that the API reference is up to date:', API_REF_URL)\n                return\n\n            from telethon_generator.parsers import find_layer\n            layer = next(filter(None, map(find_layer, TLOBJECT_IN_TLS)))\n            published_layer = int(m[1])\n            if published_layer != layer:\n                print('Published layer', published_layer, 'does not match current layer', layer, '.')\n                print('Make sure to update the API reference site first:', API_REF_URL)\n                return\n\n        # (Re)generate the code to make sure we don't push without it\n        generate(['tl', 'errors'])\n\n        # Try importing the telethon module to assert it has no errors\n        try:\n            import telethon\n        except Exception as e:\n            print('Packaging for PyPi aborted, importing the module failed.')\n            print(e)\n            return\n\n        remove_dirs = ['__pycache__', 'build', 'dist', 'Telethon.egg-info']\n        for root, _dirs, _files in os.walk(LIBRARY_DIR, topdown=False):\n            # setuptools is including __pycache__ for some reason (#1605)\n            if root.endswith('/__pycache__'):\n                remove_dirs.append(root)\n        for x in remove_dirs:\n            shutil.rmtree(x, ignore_errors=True)\n\n        run('python3 setup.py sdist', shell=True)\n        run('python3 setup.py bdist_wheel', shell=True)\n        run('twine upload dist/*', shell=True)\n        for x in ('build', 'dist', 'Telethon.egg-info'):\n            shutil.rmtree(x, ignore_errors=True)\n\n    else:\n        # e.g. install from GitHub\n        if GENERATOR_DIR.is_dir():\n            generate(['tl', 'errors'])\n\n        # Get the long description from the README file\n        with open('README.rst', 'r', encoding='utf-8') as f:\n            long_description = f.read()\n\n        with open('telethon/version.py', 'r', encoding='utf-8') as f:\n            version = re.search(r\"^__version__\\s*=\\s*'(.*)'.*$\",\n                                f.read(), flags=re.MULTILINE).group(1)\n        setup(\n            name='Telethon',\n            version=version,\n            description=\"Full-featured Telegram client library for Python 3\",\n            long_description=long_description,\n\n            url='https://github.com/LonamiWebs/Telethon',\n            download_url='https://github.com/LonamiWebs/Telethon/releases',\n\n            author='Lonami Exo',\n            author_email='totufals@hotmail.com',\n\n            license='MIT',\n\n            # See https://stackoverflow.com/a/40300957/4759433\n            # -> https://www.python.org/dev/peps/pep-0345/#requires-python\n            # -> http://setuptools.readthedocs.io/en/latest/setuptools.html\n            python_requires='>=3.5',\n\n            # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n            classifiers=[\n                #   3 - Alpha\n                #   4 - Beta\n                #   5 - Production/Stable\n                'Development Status :: 5 - Production/Stable',\n\n                'Intended Audience :: Developers',\n                'Topic :: Communications :: Chat',\n\n                'License :: OSI Approved :: MIT License',\n\n                'Programming Language :: Python :: 3',\n                'Programming Language :: Python :: 3.5',\n                'Programming Language :: Python :: 3.6',\n                'Programming Language :: Python :: 3.7',\n                'Programming Language :: Python :: 3.8',\n            ],\n            keywords='telegram api chat client library messaging mtproto',\n            packages=find_packages(exclude=[\n                'telethon_*', 'tests*'\n            ]),\n            install_requires=['pyaes', 'rsa'],\n            extras_require={\n                'cryptg': ['cryptg']\n            }\n        )\n\n\nif __name__ == '__main__':\n    with TempWorkDir():\n        main(sys.argv)\n"
        },
        {
          "name": "telethon",
          "type": "tree",
          "content": null
        },
        {
          "name": "telethon_examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "telethon_generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "update-docs.sh",
          "type": "blob",
          "size": 0.34375,
          "content": "#!/bin/bash\n\nset -e\npython setup.py gen docs\nrm -rf /tmp/docs\nmv docs/ /tmp/docs\ngit checkout gh-pages\n# there's probably better ways but we know none has spaces\nrm -rf $(ls /tmp/docs)\nmv /tmp/docs/* .\ngit add constructors/ types/ methods/ index.html js/search.js css/ img/\ngit commit --amend -m \"Update documentation\"\ngit push --force\ngit checkout v1\n"
        }
      ]
    }
  ]
}