{
  "metadata": {
    "timestamp": 1736561206084,
    "page": 178,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fastapi/sqlmodel",
      "stars": 14971,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.11328125,
          "content": "*.pyc\n.mypy_cache\n.vscode\n.idea\npoetry.lock\ndist\nhtmlcov\n*.egg-info\n.coverage*\ncoverage.xml\nsite\n*.db\n.cache\n.venv*\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.7158203125,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\ndefault_language_version:\n    python: python3.10\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.6.0\n    hooks:\n    -   id: check-added-large-files\n    -   id: check-toml\n    -   id: check-yaml\n        args:\n        -   --unsafe\n    -   id: end-of-file-fixer\n    -   id: trailing-whitespace\n-   repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.6.5\n    hooks:\n    -   id: ruff\n        args:\n        - --fix\n    -   id: ruff-format\nci:\n    autofix_commit_msg: üé® [pre-commit.ci] Auto format from pre-commit.com hooks\n    autoupdate_commit_msg: ‚¨Ü [pre-commit.ci] pre-commit autoupdate\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.607421875,
          "content": "# This CITATION.cff file was generated with cffinit.\n# Visit https://bit.ly/cffinit to generate yours today!\n\ncff-version: 1.2.0\ntitle: SQLModel\nmessage: >-\n  If you use this software, please cite it using the\n  metadata from this file.\ntype: software\nauthors:\n  - given-names: Sebasti√°n\n    family-names: Ram√≠rez\n    email: tiangolo@gmail.com\nidentifiers:\nrepository-code: 'https://github.com/fastapi/sqlmodel'\nurl: 'https://sqlmodel.tiangolo.com'\nabstract: >-\n  SQLModel, SQL databases in Python, designed for\n  simplicity, compatibility, and robustness.\nkeywords:\n  - fastapi\n  - pydantic\n  - sqlalchemy\nlicense: MIT\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.125,
          "content": "Please read the [Development - Contributing](https://sqlmodel.tiangolo.com/contributing/) guidelines in the documentation site.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.060546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2021 Sebasti√°n Ram√≠rez\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.330078125,
          "content": "<p align=\"center\">\n  <a href=\"https://sqlmodel.tiangolo.com\"><img src=\"https://sqlmodel.tiangolo.com/img/logo-margin/logo-margin-vector.svg#only-light\" alt=\"SQLModel\"></a>\n\n</p>\n<p align=\"center\">\n    <em>SQLModel, SQL databases in Python, designed for simplicity, compatibility, and robustness.</em>\n</p>\n<p align=\"center\">\n<a href=\"https://github.com/fastapi/sqlmodel/actions?query=workflow%3ATest\" target=\"_blank\">\n    <img src=\"https://github.com/fastapi/sqlmodel/workflows/Test/badge.svg\" alt=\"Test\">\n</a>\n<a href=\"https://github.com/fastapi/sqlmodel/actions?query=workflow%3APublish\" target=\"_blank\">\n    <img src=\"https://github.com/fastapi/sqlmodel/workflows/Publish/badge.svg\" alt=\"Publish\">\n</a>\n<a href=\"https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/sqlmodel\" target=\"_blank\">\n    <img src=\"https://coverage-badge.samuelcolvin.workers.dev/fastapi/sqlmodel.svg\" alt=\"Coverage\">\n<a href=\"https://pypi.org/project/sqlmodel\" target=\"_blank\">\n    <img src=\"https://img.shields.io/pypi/v/sqlmodel?color=%2334D058&label=pypi%20package\" alt=\"Package version\">\n</a>\n</p>\n\n---\n\n**Documentation**: <a href=\"https://sqlmodel.tiangolo.com\" target=\"_blank\">https://sqlmodel.tiangolo.com</a>\n\n**Source Code**: <a href=\"https://github.com/fastapi/sqlmodel\" target=\"_blank\">https://github.com/fastapi/sqlmodel</a>\n\n---\n\nSQLModel is a library for interacting with <abbr title='Also called \"Relational databases\"'>SQL databases</abbr> from Python code, with Python objects. It is designed to be intuitive, easy to use, highly compatible, and robust.\n\n**SQLModel** is based on Python type annotations, and powered by <a href=\"https://pydantic-docs.helpmanual.io/\" class=\"external-link\" target=\"_blank\">Pydantic</a> and <a href=\"https://sqlalchemy.org/\" class=\"external-link\" target=\"_blank\">SQLAlchemy</a>.\n\nThe key features are:\n\n* **Intuitive to write**: Great editor support. <abbr title=\"also known as auto-complete, autocompletion, IntelliSense\">Completion</abbr> everywhere. Less time debugging. Designed to be easy to use and learn. Less time reading docs.\n* **Easy to use**: It has sensible defaults and does a lot of work underneath to simplify the code you write.\n* **Compatible**: It is designed to be compatible with **FastAPI**, Pydantic, and SQLAlchemy.\n* **Extensible**: You have all the power of SQLAlchemy and Pydantic underneath.\n* **Short**: Minimize code duplication. A single type annotation does a lot of work. No need to duplicate models in SQLAlchemy and Pydantic.\n\n## Sponsors\n\n<!-- sponsors -->\n\n<a href=\"https://www.govcert.lu\" target=\"_blank\" title=\"This project is being supported by GOVCERT.LU\"><img src=\"https://sqlmodel.tiangolo.com/img/sponsors/govcert.png\"></a>\n\n<!-- /sponsors -->\n\n## SQL Databases in FastAPI\n\n<a href=\"https://fastapi.tiangolo.com\" target=\"_blank\"><img src=\"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" style=\"width: 20%;\"></a>\n\n**SQLModel** is designed to simplify interacting with SQL databases in <a href=\"https://fastapi.tiangolo.com\" class=\"external-link\" target=\"_blank\">FastAPI</a> applications, it was created by the same <a href=\"https://tiangolo.com/\" class=\"external-link\" target=\"_blank\">author</a>. üòÅ\n\nIt combines SQLAlchemy and Pydantic and tries to simplify the code you write as much as possible, allowing you to reduce the **code duplication to a minimum**, but while getting the **best developer experience** possible.\n\n**SQLModel** is, in fact, a thin layer on top of **Pydantic** and **SQLAlchemy**, carefully designed to be compatible with both.\n\n## Requirements\n\nA recent and currently supported <a href=\"https://www.python.org/downloads/\" class=\"external-link\" target=\"_blank\">version of Python</a>.\n\nAs **SQLModel** is based on **Pydantic** and **SQLAlchemy**, it requires them. They will be automatically installed when you install SQLModel.\n\n## Installation\n\nMake sure you create a <a href=\"https://sqlmodel.tiangolo.com/virtual-environments/\" class=\"external-link\" target=\"_blank\">virtual environment</a>, activate it, and then install SQLModel, for example with:\n\n<div class=\"termy\">\n\n```console\n$ pip install sqlmodel\n---> 100%\nSuccessfully installed sqlmodel\n```\n\n</div>\n\n## Example\n\nFor an introduction to databases, SQL, and everything else, see the <a href=\"https://sqlmodel.tiangolo.com/databases/\" target=\"_blank\">SQLModel documentation</a>.\n\nHere's a quick example. ‚ú®\n\n### A SQL Table\n\nImagine you have a SQL table called `hero` with:\n\n* `id`\n* `name`\n* `secret_name`\n* `age`\n\nAnd you want it to have this data:\n\n| id | name | secret_name | age |\n-----|------|-------------|------|\n| 1  | Deadpond | Dive Wilson | null |\n| 2  | Spider-Boy | Pedro Parqueador | null |\n| 3  | Rusty-Man | Tommy Sharp | 48 |\n\n### Create a SQLModel Model\n\nThen you could create a **SQLModel** model like this:\n\n```Python\nfrom typing import Optional\n\nfrom sqlmodel import Field, SQLModel\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n```\n\nThat class `Hero` is a **SQLModel** model, the equivalent of a SQL table in Python code.\n\nAnd each of those class attributes is equivalent to each **table column**.\n\n### Create Rows\n\nThen you could **create each row** of the table as an **instance** of the model:\n\n```Python\nhero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\nhero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nhero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n```\n\nThis way, you can use conventional Python code with **classes** and **instances** that represent **tables** and **rows**, and that way communicate with the **SQL database**.\n\n### Editor Support\n\nEverything is designed for you to get the best developer experience possible, with the best editor support.\n\nIncluding **autocompletion**:\n\n<img class=\"shadow\" src=\"https://sqlmodel.tiangolo.com/img/index/autocompletion01.png\">\n\nAnd **inline errors**:\n\n<img class=\"shadow\" src=\"https://sqlmodel.tiangolo.com/img/index/inline-errors01.png\">\n\n### Write to the Database\n\nYou can learn a lot more about **SQLModel** by quickly following the **tutorial**, but if you need a taste right now of how to put all that together and save to the database, you can do this:\n\n```Python hl_lines=\"18  21  23-27\"\nfrom typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nhero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\nhero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nhero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n\nengine = create_engine(\"sqlite:///database.db\")\n\n\nSQLModel.metadata.create_all(engine)\n\nwith Session(engine) as session:\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n    session.commit()\n```\n\nThat will save a **SQLite** database with the 3 heroes.\n\n### Select from the Database\n\nThen you could write queries to select from that same database, for example with:\n\n```Python hl_lines=\"15-18\"\nfrom typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nengine = create_engine(\"sqlite:///database.db\")\n\nwith Session(engine) as session:\n    statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n    hero = session.exec(statement).first()\n    print(hero)\n```\n\n### Editor Support Everywhere\n\n**SQLModel** was carefully designed to give you the best developer experience and editor support, **even after selecting data** from the database:\n\n<img class=\"shadow\" src=\"https://sqlmodel.tiangolo.com/img/index/autocompletion02.png\">\n\n## SQLAlchemy and Pydantic\n\nThat class `Hero` is a **SQLModel** model.\n\nBut at the same time, ‚ú® it is a **SQLAlchemy** model ‚ú®. So, you can combine it and use it with other SQLAlchemy models, or you could easily migrate applications with SQLAlchemy to **SQLModel**.\n\nAnd at the same time, ‚ú® it is also a **Pydantic** model ‚ú®. You can use inheritance with it to define all your **data models** while avoiding code duplication. That makes it very easy to use with **FastAPI**.\n\n## License\n\nThis project is licensed under the terms of the [MIT license](https://github.com/fastapi/sqlmodel/blob/main/LICENSE).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.1533203125,
          "content": "# Security Policy\n\nSecurity is very important for SQLModel and its community. üîí\n\nLearn more about it below. üëá\n\n## Versions\n\nThe latest versions of SQLModel are supported.\n\nYou are encouraged to [write tests](https://sqlmodel.tiangolo.com/tutorial/fastapi/tests/) for your application and update your SQLModel version frequently after ensuring that your tests are passing. This way you will benefit from the latest features, bug fixes, and **security fixes**.\n\n## Reporting a Vulnerability\n\nIf you think you found a vulnerability, and even if you are not sure about it, please report it right away by sending an email to: security@tiangolo.com. Please try to be as explicit as possible, describing all the steps and example code to reproduce the security issue.\n\nI (the author, [@tiangolo](https://twitter.com/tiangolo)) will review it thoroughly and get back to you.\n\n## Public Discussions\n\nPlease restrain from publicly discussing a potential security vulnerability. üôä\n\nIt's better to discuss privately and try to find a solution first, to limit the potential impact as much as possible.\n\n---\n\nThanks for your help!\n\nThe SQLModel community and I thank you for that. üôá\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs_src",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.insiders.yml",
          "type": "blob",
          "size": 0.111328125,
          "content": "plugins:\n  typeset:\nmarkdown_extensions:\n  material.extensions.preview:\n    targets:\n      include:\n        - \"*\"\n"
        },
        {
          "name": "mkdocs.maybe-insiders.yml",
          "type": "blob",
          "size": 0.2802734375,
          "content": "# Define this here and not in the main mkdocs.yml file because that one could be auto\n# updated and written, and the script would remove the env var\nINHERIT: !ENV [INSIDERS_FILE, './mkdocs.no-insiders.yml']\nmarkdown_extensions:\n  pymdownx.highlight:\n    linenums: !ENV [LINENUMS, false]\n"
        },
        {
          "name": "mkdocs.no-insiders.yml",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 6.107421875,
          "content": "INHERIT: ./mkdocs.maybe-insiders.yml\nsite_name: SQLModel\nsite_description: SQLModel, SQL databases in Python, designed for simplicity, compatibility, and robustness.\nsite_url: https://sqlmodel.tiangolo.com/\ntheme:\n  name: material\n  custom_dir: docs/overrides\n  palette:\n  - media: \"(prefers-color-scheme)\"\n    toggle:\n      icon: material/lightbulb-auto\n      name: Switch to light mode\n  - media: '(prefers-color-scheme: light)'\n    scheme: default\n    primary: deep purple\n    accent: amber\n    toggle:\n      icon: material/lightbulb\n      name: Switch to dark mode\n  - media: '(prefers-color-scheme: dark)'\n    scheme: slate\n    primary: deep purple\n    accent: amber\n    toggle:\n      icon: material/lightbulb-outline\n      name: Switch to system preference\n  features:\n  - content.code.annotate\n  - content.code.copy\n  # - content.code.select\n  - content.footnote.tooltips\n  - content.tabs.link\n  - content.tooltips\n  - navigation.footer\n  - navigation.indexes\n  - navigation.instant\n  - navigation.instant.prefetch\n  # - navigation.instant.preview\n  - navigation.instant.progress\n  - navigation.path\n  - navigation.tabs\n  - navigation.tabs.sticky\n  - navigation.top\n  - navigation.tracking\n  - search.highlight\n  - search.share\n  - search.suggest\n  - toc.follow\n\n  icon:\n    repo: fontawesome/brands/github-alt\n  logo: img/icon-white.svg\n  favicon: img/favicon.png\n  language: en\nrepo_name: fastapi/sqlmodel\nrepo_url: https://github.com/fastapi/sqlmodel\nplugins:\n  # Material for MkDocs\n  search:\n  social:\n  # Other plugins\n  macros:\n    include_yaml:\n    - sponsors: data/sponsors.yml\n    - members: data/members.yml\n\nnav:\n  - SQLModel: index.md\n  - features.md\n  - Learn:\n    - learn/index.md\n    - databases.md\n    - db-to-code.md\n    - environment-variables.md\n    - virtual-environments.md\n    - install.md\n    - Tutorial - User Guide:\n      - tutorial/index.md\n      - tutorial/create-db-and-table-with-db-browser.md\n      - tutorial/create-db-and-table.md\n      - tutorial/insert.md\n      - tutorial/automatic-id-none-refresh.md\n      - tutorial/select.md\n      - tutorial/where.md\n      - tutorial/indexes.md\n      - tutorial/one.md\n      - tutorial/limit-and-offset.md\n      - tutorial/update.md\n      - tutorial/delete.md\n      - Connect Tables - JOIN:\n        - tutorial/connect/index.md\n        - tutorial/connect/create-connected-tables.md\n        - tutorial/connect/create-connected-rows.md\n        - tutorial/connect/read-connected-data.md\n        - tutorial/connect/update-data-connections.md\n        - tutorial/connect/remove-data-connections.md\n      - Relationship Attributes:\n        - tutorial/relationship-attributes/index.md\n        - tutorial/relationship-attributes/define-relationships-attributes.md\n        - tutorial/relationship-attributes/create-and-update-relationships.md\n        - tutorial/relationship-attributes/read-relationships.md\n        - tutorial/relationship-attributes/remove-relationships.md\n        - tutorial/relationship-attributes/back-populates.md\n        - tutorial/relationship-attributes/cascade-delete-relationships.md\n        - tutorial/relationship-attributes/type-annotation-strings.md\n      - Many to Many:\n        - tutorial/many-to-many/index.md\n        - tutorial/many-to-many/create-models-with-link.md\n        - tutorial/many-to-many/create-data.md\n        - tutorial/many-to-many/update-remove-relationships.md\n        - tutorial/many-to-many/link-with-extra-fields.md\n      - tutorial/code-structure.md\n      - FastAPI and Pydantic:\n        - tutorial/fastapi/index.md\n        - tutorial/fastapi/simple-hero-api.md\n        - tutorial/fastapi/response-model.md\n        - tutorial/fastapi/multiple-models.md\n        - tutorial/fastapi/read-one.md\n        - tutorial/fastapi/limit-and-offset.md\n        - tutorial/fastapi/update.md\n        - tutorial/fastapi/update-extra-data.md\n        - tutorial/fastapi/delete.md\n        - tutorial/fastapi/session-with-dependency.md\n        - tutorial/fastapi/teams.md\n        - tutorial/fastapi/relationships.md\n        - tutorial/fastapi/tests.md\n    - Advanced User Guide:\n      - advanced/index.md\n      - advanced/decimal.md\n      - advanced/uuid.md\n  - Resources:\n    - resources/index.md\n    - help.md\n    - contributing.md\n    - management-tasks.md\n  - About:\n    - about/index.md\n    - alternatives.md\n    - management.md\n  - release-notes.md\n\nmarkdown_extensions:\n  # Python Markdown\n  abbr:\n  attr_list:\n  footnotes:\n  md_in_html:\n  tables:\n  toc:\n    permalink: true\n\n  # Python Markdown Extensions\n  pymdownx.betterem:\n    smart_enable: all\n  pymdownx.caret:\n  pymdownx.highlight:\n    line_spans: __span\n  pymdownx.inlinehilite:\n  pymdownx.keys:\n  pymdownx.mark:\n  pymdownx.superfences:\n    custom_fences:\n    - name: mermaid\n      class: mermaid\n      format: !!python/name:pymdownx.superfences.fence_code_format\n  pymdownx.tilde:\n\n  # pymdownx blocks\n  pymdownx.blocks.admonition:\n    types:\n    - note\n    - attention\n    - caution\n    - danger\n    - error\n    - tip\n    - hint\n    - warning\n    # Custom types\n    - info\n  pymdownx.blocks.details:\n  pymdownx.blocks.tab:\n    alternate_style: True\n\n  # Other extensions\n  mdx_include:\n  markdown_include_variants:\n\nextra:\n  analytics:\n    provider: google\n    property: G-J8HVTT936W\n    feedback:\n      title: Was this page helpful?\n      ratings:\n        - icon: material/emoticon-happy-outline\n          name: This page was helpful\n          data: 1\n          note: >-\n            Thanks for your feedback!\n        - icon: material/emoticon-sad-outline\n          name: This page could be improved\n          data: 0\n          note: >-\n            Thanks for your feedback!\n  social:\n  - icon: fontawesome/brands/github-alt\n    link: https://github.com/fastapi/sqlmodel\n  - icon: fontawesome/brands/twitter\n    link: https://twitter.com/tiangolo\n  - icon: fontawesome/brands/linkedin\n    link: https://www.linkedin.com/in/tiangolo\n  - icon: fontawesome/brands/dev\n    link: https://dev.to/tiangolo\n  - icon: fontawesome/brands/medium\n    link: https://medium.com/@tiangolo\n  - icon: fontawesome/solid/globe\n    link: https://tiangolo.com\n\nextra_css:\n  - css/termynal.css\n  - css/custom.css\n\nextra_javascript:\n  - js/termynal.js\n  - js/custom.js\n\nhooks:\n  - scripts/mkdocs_hooks.py\n"
        },
        {
          "name": "pdm_build.py",
          "type": "blob",
          "size": 1.6826171875,
          "content": "import os\nfrom typing import Any, Dict, List\n\nfrom pdm.backend.hooks import Context\n\nTIANGOLO_BUILD_PACKAGE = os.getenv(\"TIANGOLO_BUILD_PACKAGE\", \"sqlmodel\")\n\n\ndef pdm_build_initialize(context: Context) -> None:\n    metadata = context.config.metadata\n    # Get custom config for the current package, from the env var\n    config: Dict[str, Any] = context.config.data[\"tool\"][\"tiangolo\"][\n        \"_internal-slim-build\"\n    ][\"packages\"][TIANGOLO_BUILD_PACKAGE]\n    project_config: Dict[str, Any] = config[\"project\"]\n    # Get main optional dependencies, extras\n    optional_dependencies: Dict[str, List[str]] = metadata.get(\n        \"optional-dependencies\", {}\n    )\n    # Get custom optional dependencies name to always include in this (non-slim) package\n    include_optional_dependencies: List[str] = config.get(\n        \"include-optional-dependencies\", []\n    )\n    # Override main [project] configs with custom configs for this package\n    for key, value in project_config.items():\n        metadata[key] = value\n    # Get custom build config for the current package\n    build_config: Dict[str, Any] = (\n        config.get(\"tool\", {}).get(\"pdm\", {}).get(\"build\", {})\n    )\n    # Override PDM build config with custom build config for this package\n    for key, value in build_config.items():\n        context.config.build_config[key] = value\n    # Get main dependencies\n    dependencies: List[str] = metadata.get(\"dependencies\", [])\n    # Add optional dependencies to the default dependencies for this (non-slim) package\n    for include_optional in include_optional_dependencies:\n        optional_dependencies_group = optional_dependencies.get(include_optional, [])\n        dependencies.extend(optional_dependencies_group)\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 3.4638671875,
          "content": "[build-system]\nrequires = [\"pdm-backend\"]\nbuild-backend = \"pdm.backend\"\n\n[project]\nname = \"sqlmodel\"\ndynamic = [\"version\"]\ndescription = \"SQLModel, SQL databases in Python, designed for simplicity, compatibility, and robustness.\"\nreadme = \"README.md\"\nrequires-python = \">=3.7\"\nauthors = [\n    { name = \"Sebasti√°n Ram√≠rez\", email = \"tiangolo@gmail.com\" },\n]\n\nclassifiers = [\n    \"Development Status :: 4 - Beta\",\n    \"Framework :: AsyncIO\",\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: Science/Research\",\n    \"Intended Audience :: System Administrators\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Topic :: Database\",\n    \"Topic :: Database :: Database Engines/Servers\",\n    \"Topic :: Internet\",\n    \"Topic :: Internet :: WWW/HTTP :: HTTP Servers\",\n    \"Topic :: Internet :: WWW/HTTP\",\n    \"Typing :: Typed\",\n]\n\ndependencies = [\n    \"SQLAlchemy >=2.0.14,<2.1.0\",\n    \"pydantic >=1.10.13,<3.0.0\",\n]\n\n[project.urls]\nHomepage = \"https://github.com/fastapi/sqlmodel\"\nDocumentation = \"https://sqlmodel.tiangolo.com\"\nRepository = \"https://github.com/fastapi/sqlmodel\"\nIssues = \"https://github.com/fastapi/sqlmodel/issues\"\nChangelog = \"https://sqlmodel.tiangolo.com/release-notes/\"\n\n[tool.pdm]\nversion = { source = \"file\", path = \"sqlmodel/__init__.py\" }\ndistribution = true\n\n[tool.pdm.build]\nsource-includes = [\n    \"tests/\",\n    \"docs_src/\",\n    \"requirements*.txt\",\n    \"scripts/\",\n    \"sqlmodel/sql/expression.py.jinja2\",\n    ]\n\n[tool.tiangolo._internal-slim-build.packages.sqlmodel-slim.project]\nname = \"sqlmodel-slim\"\n\n[tool.tiangolo._internal-slim-build.packages.sqlmodel]\n# include-optional-dependencies = [\"standard\"]\n\n[tool.tiangolo._internal-slim-build.packages.sqlmodel.project]\noptional-dependencies = {}\n\n# [tool.tiangolo._internal-slim-build.packages.sqlmodel.project.scripts]\n# sqlmodel = \"sqlmodel.cli:main\"\n\n[tool.coverage.run]\nparallel = true\ndata_file = \"coverage/.coverage\"\nsource = [\n    \"docs_src\",\n    \"tests\",\n    \"sqlmodel\"\n]\ncontext = '${CONTEXT}'\ndynamic_context = \"test_function\"\n\n[tool.coverage.report]\nshow_missing = true\nsort = \"-Cover\"\nexclude_lines = [\n    \"pragma: no cover\",\n    \"@overload\",\n    'if __name__ == \"__main__\":',\n    \"if TYPE_CHECKING:\",\n]\n\n[tool.coverage.html]\nshow_contexts = true\n\n[tool.mypy]\nstrict = true\n\n[[tool.mypy.overrides]]\nmodule = \"sqlmodel.sql._expression_select_gen\"\nwarn_unused_ignores = false\n\n[[tool.mypy.overrides]]\nmodule = \"docs_src.*\"\ndisallow_incomplete_defs = false\ndisallow_untyped_defs = false\ndisallow_untyped_calls = false\n\n[tool.ruff.lint]\nselect = [\n    \"E\",  # pycodestyle errors\n    \"W\",  # pycodestyle warnings\n    \"F\",  # pyflakes\n    \"I\",  # isort\n    \"B\",  # flake8-bugbear\n    \"C4\",  # flake8-comprehensions\n    \"UP\", # pyupgrade\n]\nignore = [\n    \"E501\",  # line too long, handled by black\n    \"B008\",  # do not perform function calls in argument defaults\n    \"C901\",  # too complex\n    \"W191\", # indentation contains tabs\n]\n\n[tool.ruff.lint.per-file-ignores]\n# \"__init__.py\" = [\"F401\"]\n\n[tool.ruff.lint.isort]\nknown-third-party = [\"sqlmodel\", \"sqlalchemy\", \"pydantic\", \"fastapi\"]\n\n[tool.ruff.lint.pyupgrade]\n# Preserve types, even if a file imports `from __future__ import annotations`.\nkeep-runtime-typing = true\n"
        },
        {
          "name": "requirements-docs-insiders.txt",
          "type": "blob",
          "size": 0.240234375,
          "content": "git+https://${TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git@9.5.30-insiders-4.53.11\ngit+https://${TOKEN}@github.com/pawamoy-insiders/griffe-typing-deprecated.git\ngit+https://${TOKEN}@github.com/pawamoy-insiders/mkdocstrings-python.git\n"
        },
        {
          "name": "requirements-docs-tests.txt",
          "type": "blob",
          "size": 0.06640625,
          "content": "# For mkdocstrings and code generator using templates\nblack >=22.10\n"
        },
        {
          "name": "requirements-docs.txt",
          "type": "blob",
          "size": 0.560546875,
          "content": "-e .\n-r requirements-docs-tests.txt\nmkdocs-material==9.5.18\nmdx-include >=1.4.1,<2.0.0\nmkdocs-redirects>=1.2.1,<1.3.0\npyyaml >=5.3.1,<7.0.0\n# For Material for MkDocs, Chinese search\n# jieba==0.42.1\n# For image processing by Material for MkDocs\npillow==11.0.0\n# For image processing by Material for MkDocs\ncairosvg==2.7.1\n# mkdocstrings[python]==0.25.1\n# Enable griffe-typingdoc once dropping Python 3.7 and upgrading typing-extensions\n# griffe-typingdoc==0.2.5\n# For griffe, it formats with black\ntyper == 0.12.3\nmkdocs-macros-plugin==1.0.5\nmarkdown-include-variants==0.0.4\n"
        },
        {
          "name": "requirements-github-actions.txt",
          "type": "blob",
          "size": 0.107421875,
          "content": "PyGithub>=2.3.0,<3.0.0\npydantic>=2.5.3,<3.0.0\npydantic-settings>=2.1.0,<3.0.0\nhttpx>=0.27.0,<0.28.0\nsmokeshow\n"
        },
        {
          "name": "requirements-tests.txt",
          "type": "blob",
          "size": 0.421875,
          "content": "-e .\n-r requirements-docs-tests.txt\npytest >=7.0.1,<8.0.0\ncoverage[toml] >=6.2,<8.0\nmypy ==1.4.1\nruff ==0.6.2\n# For FastAPI tests\nfastapi >=0.103.2\nhttpx ==0.24.1\n# TODO: upgrade when deprecating Python 3.7\ndirty-equals ==0.6.0\njinja2 ==3.1.4\n# Pin typing-extensions until Python 3.8 is deprecated or the issue with dirty-equals\n# is fixed, maybe fixed after dropping Python 3.7 and upgrading dirty-equals\ntyping-extensions ==4.6.1\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0830078125,
          "content": "-e .\n\n-r requirements-tests.txt\n-r requirements-docs.txt\n\npre-commit >=2.17.0,<4.0.0\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "sqlmodel",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}