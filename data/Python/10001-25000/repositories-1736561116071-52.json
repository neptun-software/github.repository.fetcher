{
  "metadata": {
    "timestamp": 1736561116071,
    "page": 52,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kholia/OSX-KVM",
      "stars": 20950,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1083984375,
          "content": "*.dist\n*.dmg\n*.img\n*.iso\n*.pkg\n*.sha256sum\n*.smd\n*.sucatalog\nOVMF_VARS*.fd\nOpenCore-Catalina/EFI/OC/Resources/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1201171875,
          "content": "[submodule \"resources/OcBinaryData\"]\n\tpath = resources/OcBinaryData\n\turl = https://github.com/acidanthera/OcBinaryData.git\n"
        },
        {
          "name": "98-sound-dongle.rules",
          "type": "blob",
          "size": 0.158203125,
          "content": "SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"8086\", ATTRS{idProduct}==\"0808\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"1b3f\", ATTRS{idProduct}==\"2008\", MODE=\"0666\"\n"
        },
        {
          "name": "99-usb-disk.rules",
          "type": "blob",
          "size": 0.0791015625,
          "content": "SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"174c\", ATTRS{idProduct}==\"55aa\", MODE=\"0666\"\n"
        },
        {
          "name": "CREDITS.md",
          "type": "blob",
          "size": 3.87109375,
          "content": "### Credits\n\n- [UPSTREAM] https://github.com/acidanthera/OpenCorePkg + https://dortania.github.io/ - for making all this possible!\n\n- [UPSTREAM] https://github.com/thenickdude/KVM-Opencore - Thanks Nick!\n\n* RehabMan, th3joker and others - FakeSMC.kext, https://bitbucket.org/RehabMan\n\n* Chuck Remes (chuckremes) - better documentation\n\n* Meissa - better networking documentation\n\n* PJ Meyer (pjmeyer) - compatibility with modern versions of GNU mktemp\n\n* Robert DeRose (RobertDeRose) and Dirk Bajohr (isolution-de) - macOS support\n\n* Fritz Elfert (felfert) - cleanups, better documentation, and nicer ISO creation script\n\n* Ian McDowell (IMcD23) - more documentation, and better ISO creation script\n\n* voobscout - libvirt XML file\n\n* Evgeny Grin (Karlson2k) - for the original ISO creation script\n\n* Gabriel L. Somlo - for getting things started and going\n\n* http://www.insanelymac.com/ - Enoch bootloader\n\n* Nicholas Sherlock - UEFI, Clover, and other hacks\n\n* Phil Dennis-Jordan - virtio-net-osx, usb-tablet and other hacks\n\n* Nikolay Dimitrov (nikidim) - Docker for Mac\n\n* Francisco de la Peña - libvirt XML file for macOS High Sierra\n\n* Christian Giliberto - libvirt XML tweaks\n\n* José Roberto Meza Cabrera - AMD Ryzen testing\n\n* Paweł BB Drozd - UEFI resolution\n\n* Jan Kuri (jkuri) - Mojave ISO creation fixes\n\n* Mike Hardy (mikehardy) - Network documentation improvements, Ventura 'ISO' script\n\n* CuriousTommy + pickled_monkey - Information on vmxnet3 network adapter\n\n* Povilas Kanapickas (p12tic) - Flexible ISO generation\n\n* Dick Marinus (meeuw) - Allow usage of latest Clover\n\n* Foxlet (foxlet) - Allow installation without existing macOS\n\n* Ralph Kühnert (redradrat) - Debug fetch-macOS.py script\n\n* Pellegrino Prevete (tallero) - Better documentation\n\n* Niklas Korz (niklaskorz) - Stop using brctl\n\n* Mike Bybee (stereoplegic) - Higher resolution documentation\n\n* Yarkhan - Passthrough for making iDevices work\n\n* Yu-Chen Lin (npes87184) - Virtio and qemu-img notes\n\n* Wen-He - Catalina related fixes\n\n* Alexander Galato (alet) - OVMF build documentation fixes\n\n* zimbatm - portability enhancements, cool crazy ideas (thanks!)\n\n* https://github.com/Leoyzen/KVM-Opencore - OpenCore support\n\n* Kyle Dayton - UEFI, Clover, and GPU passthrough notes\n\n- foxtrotdragon - OpenCore language fixes\n\n- hoshsadiq (Hosh) - fetch-macOS.py improvements\n\n- philffm - Typo fix in `Big-Sur.md`\n\n- jviotti - Headless mode fixes\n\n- offlinehacker - libvirt support\n\n- hellodeibu - Big Sur support\n\n- kittywhiskers - Large number of changes - thank you!\n\n- zimbatm - Thank you!\n\n- Peter Asanov (ink-splatters) - Fixes for the OS-fetch script\n\n- Sangwhan \"fish\" Moon - Big Sur doc enhancements\n\n- ADawesomeguy - Big Sur doc enhancements, Xcode + OSX-KVM tutorial\n\n- shmsh9 - Python 3.9.x support\n\n- Gelma (Andrea Gelmini) - Typo fixes\n\n- ivy-rew (Reguel) - Greatly improved Big-Sur notes\n\n- Broly1 - Greatly improved Big-Sur notes\n\n- mikkeyboi (Michael Leung) - Greatly improved Big-Sur notes\n\n- CyberShadow (Vladimir Panteleev) - Documentation fixes\n\n- mikehardy (Mike Hardy) - Docker on macOS notes, CPU support notes\n\n- Dogr95 - macOS-libvirt-Catalina.xml fixes\n\n- headkaze - AppleVirtualGraphics.kext tip\n\n- aydenbottos - macOS-libvirt-Catalina.xml fixes\n\n- mikkeyboi - Unraid OS stuff\n\n- deftdawg - Various correctness and robustness fixes - thanks!\n\n- sickcodes - Keep being awesome ;)\n\n- Kian Kasad (kdkasad) - Use grep instead of egrep\n\n- https://github.com/cclauss - Typo fix\n\n- https://github.com/thiagokokada - Makefile to improve usability\n\n- https://github.com/jturnism - doc fixes\n\n- https://github.com/gjyoung1974 - OpenCore-Boot-macOS.sh script\n\n- cppLawyer - Bump up the RAM size for `Apple iPhone Emulator`\n\n- SsNiPeR1 - Typo fix\n\n- sumad200 - XML fixes\n\n- MobCode100 - Ventura + AVX2 docs\n\n- Murilo Rocha Pereira - https://github.com/murilopereirame - Typo fixes\n\n- gotjoshua - Typo fixes\n\nNote: Individual files have more specific 'credits' in them.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.34375,
          "content": "# export SHORTNAME=monterey\nDISK_SIZE := 256G\n\nall: BaseSystem.img mac_hdd_ng.img\n\nBaseSystem.img: BaseSystem.dmg\n\tqemu-img convert BaseSystem.dmg -O raw BaseSystem.img\n\nBaseSystem.dmg:\n\t./fetch-macOS-v2.py --shortname=$(SHORTNAME)\n\nmac_hdd_ng.img:\n\tqemu-img create -f qcow2 mac_hdd_ng.img ${DISK_SIZE}\n\nclean:\n\trm -rf BaseSystem{.dmg,.img,.chunklist}\n"
        },
        {
          "name": "OVMF-notes.txt",
          "type": "blob",
          "size": 0.689453125,
          "content": "Current OVMF blobs are borrowed from the following URL(s),\n\n- http://ftp.debian.org/debian/pool/main/e/edk2/ (ovmf_2023.05-2_all.deb)\n\nBuilding OVMF\n-------------\n\n# Add tools and build dependencies:\napt-get update\napt-get install build-essential git lintian debhelper iasl nasm \\\n  python uuid-dev -y\n\n\ngit clone https://github.com/tianocore/edk2\ncd edk2\ngit submodule update --init\nmake -C BaseTools\n. edksetup.sh BaseTools\nbuild -a X64 -t GCC5 -p OvmfPkg/OvmfPkgX64.dsc -b RELEASE\n\nReferences\n----------\n\n* https://www.contrib.andrew.cmu.edu/~somlo/OSXKVM/\n\n* https://www.nicksherlock.com/2018/04/patch-ovmf-to-support-macos-in-proxmox-5-1/\n\n* https://github.com/thenickdude/edk2 (macos-support branch)\n"
        },
        {
          "name": "OVMF_CODE.fd",
          "type": "blob",
          "size": 1920,
          "content": null
        },
        {
          "name": "OVMF_VARS-1024x768.fd",
          "type": "blob",
          "size": 128,
          "content": null
        },
        {
          "name": "OVMF_VARS-1920x1080.fd",
          "type": "blob",
          "size": 128,
          "content": null
        },
        {
          "name": "OVMF_VARS.fd",
          "type": "blob",
          "size": 128,
          "content": null
        },
        {
          "name": "OpenCore-Boot-CD.sh",
          "type": "blob",
          "size": 2.1875,
          "content": "#!/usr/bin/env bash\n\n# Special thanks to:\n# https://github.com/Leoyzen/KVM-Opencore\n# https://github.com/thenickdude/KVM-Opencore/\n# https://github.com/qemu/qemu/blob/master/docs/usb2.txt\n#\n# qemu-img create -f qcow2 mac_hdd_ng.img 128G\n#\n# echo 1 > /sys/module/kvm/parameters/ignore_msrs (this is required)\n\n############################################################################\n# NOTE: Tweak the \"MY_OPTIONS\" line in case you are having booting problems!\n############################################################################\n\nMY_OPTIONS=\"+ssse3,+sse4.2,+popcnt,+avx,+aes,+xsave,+xsaveopt,check\"\n\n# This script works for Big Sur, Catalina, Mojave, and High Sierra. Tested with\n# macOS 10.15.6, macOS 10.14.6, and macOS 10.13.6\n\nALLOCATED_RAM=\"3072\" # MiB\nCPU_SOCKETS=\"1\"\nCPU_CORES=\"2\"\nCPU_THREADS=\"4\"\n\nREPO_PATH=\"./\"\nOVMF_DIR=\".\"\n\n# shellcheck disable=SC2054\nargs=(\n  -enable-kvm -m \"$ALLOCATED_RAM\" -cpu Penryn,kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,\"$MY_OPTIONS\"\n  -machine q35\n  -usb -device usb-kbd -device usb-tablet\n  -smp \"$CPU_THREADS\",cores=\"$CPU_CORES\",sockets=\"$CPU_SOCKETS\"\n  -device usb-ehci,id=ehci\n  # -device usb-kbd,bus=ehci.0\n  # -device usb-mouse,bus=ehci.0\n  # -device nec-usb-xhci,id=xhci\n  -device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\"\n  -drive if=pflash,format=raw,readonly,file=\"$REPO_PATH/$OVMF_DIR/OVMF_CODE.fd\"\n  -drive if=pflash,format=raw,file=\"$REPO_PATH/$OVMF_DIR/OVMF_VARS-1024x768.fd\"\n  -smbios type=2\n  -device ich9-intel-hda -device hda-duplex\n  -device ich9-ahci,id=sata\n  -drive id=OpenCoreBoot,if=none,snapshot=on,format=qcow2,file=\"$REPO_PATH/OpenCore/OpenCore.qcow2\"\n  -device ide-hd,bus=sata.2,drive=OpenCoreBoot\n  -device ide-hd,bus=sata.3,drive=InstallMedia\n  -drive id=InstallMedia,if=none,file=\"$REPO_PATH/os.dmg\",format=raw\n  -drive id=MacHDD,if=none,file=\"$REPO_PATH/mac_hdd_ng.img\",format=qcow2\n  -device ide-hd,bus=sata.4,drive=MacHDD\n  # -netdev tap,id=net0,ifname=tap0,script=no,downscript=no -device vmxnet3,netdev=net0,id=net0,mac=52:54:00:c9:18:27\n  -netdev user,id=net0 -device vmxnet3,netdev=net0,id=net0,mac=52:54:00:c9:18:27\n  -monitor stdio\n  -device VGA,vgamem_mb=128\n)\n\nqemu-system-x86_64 \"${args[@]}\"\n"
        },
        {
          "name": "OpenCore-Boot-macOS.sh",
          "type": "blob",
          "size": 2.455078125,
          "content": "#!/usr/bin/env bash\n\n# Special thanks to:\n# https://github.com/Leoyzen/KVM-Opencore\n# https://github.com/thenickdude/KVM-Opencore/\n# https://github.com/qemu/qemu/blob/master/docs/usb2.txt\n#\n# qemu-img create -f qcow2 mac_hdd_ng.img 128G\n#\n\n############################################################################\n# NOTE: Tweak the \"MY_OPTIONS\" line in case you are having booting problems!\n############################################################################\n\nMY_OPTIONS=\"+ssse3,+sse4.2,+popcnt,+avx,+aes,+xsave,+xsaveopt,check\"\n\n# This script works for Big Sur, Catalina, Mojave, and High Sierra. Tested with\n# macOS 10.15.6, macOS 10.14.6, and macOS 10.13.6.\n#\n# This script supports running on a macOS host using the native HyperKit\n# hypervisor for macOS.\n\nALLOCATED_RAM=\"3072\" # MiB\nCPU_SOCKETS=\"1\"\nCPU_CORES=\"2\"\nCPU_THREADS=\"4\"\n\nREPO_PATH=\".\"\nOVMF_DIR=\".\"\n\n# This causes high cpu usage on the *host* side\n# qemu-system-x86_64 -enable-kvm -m 3072 -cpu Penryn,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,hypervisor=off,vmx=on,kvm=off,$MY_OPTIONS\\\n\n# shellcheck disable=SC2054\nargs=(\n  -m \"$ALLOCATED_RAM\" -cpu Penryn,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,\"$MY_OPTIONS\"\n  -machine q35\n  -usb -device usb-kbd -device usb-tablet\n  -smp \"$CPU_THREADS\",cores=\"$CPU_CORES\",sockets=\"$CPU_SOCKETS\"\n  -device usb-ehci,id=ehci\n  # -device usb-kbd,bus=ehci.0\n  # -device usb-mouse,bus=ehci.0\n  -device nec-usb-xhci,id=xhci\n  -global nec-usb-xhci.msi=off\n  -device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\"\n  -drive if=pflash,format=raw,readonly=on,file=\"$REPO_PATH/$OVMF_DIR/OVMF_CODE.fd\"\n  -drive if=pflash,format=raw,file=\"$REPO_PATH/$OVMF_DIR/OVMF_VARS-1024x768.fd\"\n  -smbios type=2\n  -device ich9-intel-hda -device hda-duplex\n  -device ich9-ahci,id=sata\n  -drive id=OpenCoreBoot,if=none,snapshot=on,format=qcow2,file=\"$REPO_PATH/OpenCore/OpenCore.qcow2\"\n  -device ide-hd,bus=sata.2,drive=OpenCoreBoot\n  -device ide-hd,bus=sata.3,drive=InstallMedia\n  -drive id=InstallMedia,if=none,file=\"$REPO_PATH/BaseSystem.img\",format=raw\n  -drive id=MacHDD,if=none,file=\"$REPO_PATH/mac_hdd_ng.img\",format=qcow2\n  -device ide-hd,bus=sata.4,drive=MacHDD\n  # -netdev tap,id=net0,ifname=tap0,script=no,downscript=no -device virtio-net-pci,netdev=net0,id=net0,mac=52:54:00:c9:18:27\n  -netdev user,id=net0 -device virtio-net-pci,netdev=net0,id=net0,mac=52:54:00:c9:18:27\n  -monitor stdio\n  -device VGA,vgamem_mb=128\n  -M accel=hvf\n)\n\nqemu-system-x86_64 \"${args[@]}\"\n"
        },
        {
          "name": "OpenCore-Boot.sh",
          "type": "blob",
          "size": 2.8671875,
          "content": "#!/usr/bin/env bash\n\n# Special thanks to:\n# https://github.com/Leoyzen/KVM-Opencore\n# https://github.com/thenickdude/KVM-Opencore/\n# https://github.com/qemu/qemu/blob/master/docs/usb2.txt\n#\n# qemu-img create -f qcow2 mac_hdd_ng.img 128G\n#\n# echo 1 > /sys/module/kvm/parameters/ignore_msrs (this is required)\n\n###############################################################################\n# NOTE: Tweak the \"MY_OPTIONS\" line in case you are having booting problems!\n###############################################################################\n#\n# Change `Penryn` to `Haswell-noTSX` in OpenCore-Boot.sh file for macOS Sonoma!\n#\n###############################################################################\n\n\nMY_OPTIONS=\"+ssse3,+sse4.2,+popcnt,+avx,+aes,+xsave,+xsaveopt,check\"\n\n# This script works for Big Sur, Catalina, Mojave, and High Sierra. Tested with\n# macOS 10.15.6, macOS 10.14.6, and macOS 10.13.6.\n\nALLOCATED_RAM=\"4096\" # MiB\nCPU_SOCKETS=\"1\"\nCPU_CORES=\"2\"\nCPU_THREADS=\"4\"\n\nREPO_PATH=\".\"\nOVMF_DIR=\".\"\n\n# shellcheck disable=SC2054\nargs=(\n  -enable-kvm -m \"$ALLOCATED_RAM\" -cpu Penryn,kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,\"$MY_OPTIONS\"\n  -machine q35\n  -device qemu-xhci,id=xhci\n  -device usb-kbd,bus=xhci.0 -device usb-tablet,bus=xhci.0\n  -smp \"$CPU_THREADS\",cores=\"$CPU_CORES\",sockets=\"$CPU_SOCKETS\"\n  -device usb-ehci,id=ehci\n  # -device usb-kbd,bus=ehci.0\n  # -device usb-mouse,bus=ehci.0\n  # -device nec-usb-xhci,id=xhci\n  # -global nec-usb-xhci.msi=off\n  # -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off\n  # -device usb-host,vendorid=0x8086,productid=0x0808  # 2 USD USB Sound Card\n  # -device usb-host,vendorid=0x1b3f,productid=0x2008  # Another 2 USD USB Sound Card\n  -device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\"\n  -drive if=pflash,format=raw,readonly=on,file=\"$REPO_PATH/$OVMF_DIR/OVMF_CODE.fd\"\n  -drive if=pflash,format=raw,file=\"$REPO_PATH/$OVMF_DIR/OVMF_VARS-1920x1080.fd\"\n  -smbios type=2\n  -device ich9-intel-hda -device hda-duplex\n  -device ich9-ahci,id=sata\n  -drive id=OpenCoreBoot,if=none,snapshot=on,format=qcow2,file=\"$REPO_PATH/OpenCore/OpenCore.qcow2\"\n  -device ide-hd,bus=sata.2,drive=OpenCoreBoot\n  -device ide-hd,bus=sata.3,drive=InstallMedia\n  -drive id=InstallMedia,if=none,file=\"$REPO_PATH/BaseSystem.img\",format=raw\n  -drive id=MacHDD,if=none,file=\"$REPO_PATH/mac_hdd_ng.img\",format=qcow2\n  -device ide-hd,bus=sata.4,drive=MacHDD\n  # -netdev tap,id=net0,ifname=tap0,script=no,downscript=no -device virtio-net-pci,netdev=net0,id=net0,mac=52:54:00:c9:18:27\n  -netdev user,id=net0,hostfwd=tcp::2222-:22 -device virtio-net-pci,netdev=net0,id=net0,mac=52:54:00:c9:18:27\n  # -netdev user,id=net0 -device vmxnet3,netdev=net0,id=net0,mac=52:54:00:c9:18:27  # Note: Use this line for High Sierra\n  -monitor stdio\n  -device vmware-svga\n  # -spice port=5900,addr=127.0.0.1,disable-ticketing=on\n)\n\nqemu-system-x86_64 \"${args[@]}\"\n"
        },
        {
          "name": "OpenCore",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.6728515625,
          "content": "### Note\n\nThis `README.md` documents the process of creating a `Virtual Hackintosh`\nsystem.\n\nNote: All blobs and resources included in this repository are re-derivable (all\ninstructions are included!).\n\n:green_heart: Looking for **commercial** support with this stuff? I am [available\nover email](mailto:dhiru.kholia@gmail.com?subject=[GitHub]%20OSX-KVM%20Commercial%20Support%20Request&body=Hi%20-%20We%20are%20interested%20in%20purchasing%20commercial%20support%20options%20for%20your%20project.) for a chat for **commercial support options only**. Note: Project sponsors get access to the `Private OSX-KVM` repository, and direct support.\n\nStruggling with `Content Caching` stuff? We can help.\n\nWorking with `Proxmox` and macOS? See [Nick's blog for sure](https://www.nicksherlock.com/).\n\nYes, we support offline macOS installations now - see [this document](./run_offline.md) 🎉\n\n\n### Contributing Back\n\nThis project can always use your help, time and attention. I am looking for\nhelp (pull-requests!) with the following work items:\n\n* Documentation around running macOS on popular cloud providers (Hetzner, GCP,\n  AWS). See the `Is This Legal?` section and associated references.\n\n* Document (share) how you use this project to build + test open-source\n  projects / get your stuff done.\n\n* Document how to use this project for XNU kernel debugging and development.\n\n* Document the process to launch a bunch of headless macOS VMs (build farm).\n\n* Document usage of [munki](https://github.com/munki/munki) to deploy software\n  to such a `build farm`.\n\n* Enable VNC + SSH support out of the box or more easily.\n\n* Robustness improvements are always welcome!\n\n* (Not so) crazy idea - automate the macOS installation via OpenCV.\n\n\n### Requirements\n\n* A modern Linux distribution. E.g. Ubuntu 24.04 LTS 64-bit or later.\n\n* QEMU >= 8.2.2\n\n* A CPU with Intel VT-x / AMD SVM support is required (`grep -e vmx -e svm /proc/cpuinfo`)\n\n* A CPU with SSE4.1 support is required for >= macOS Sierra\n\n* A CPU with AVX2 support is required for >= macOS Ventura\n\nNote: Older AMD CPU(s) are known to be problematic but modern AMD Ryzen\nprocessors work just fine (even for macOS Sonoma).\n\n\n### Installation Preparation\n\n* Install QEMU and other packages.\n\n  ```\n  sudo apt-get install qemu-system uml-utilities virt-manager git \\\n      wget libguestfs-tools p7zip-full make dmg2img tesseract-ocr \\\n      tesseract-ocr-eng genisoimage vim net-tools screen -y\n  ```\n\n  This step may need to be adapted for your Linux distribution.\n\n* Clone this repository on your QEMU system. Files from this repository are\n  used in the following steps.\n\n  ```\n  cd ~\n\n  git clone --depth 1 --recursive https://github.com/kholia/OSX-KVM.git\n\n  cd OSX-KVM\n  ```\n\n  Repository updates can be pulled via the following command:\n\n  ```\n  git pull --rebase\n  ```\n\n  This repository uses rebase based workflows heavily.\n\n* KVM may need the following tweak on the host machine to work.\n\n  ```\n  sudo modprobe kvm; echo 1 | sudo tee /sys/module/kvm/parameters/ignore_msrs\n  ```\n\n  To make this change permanent, you may use the following command.\n\n  ```\n  sudo cp kvm.conf /etc/modprobe.d/kvm.conf  # for intel boxes only\n\n  sudo cp kvm_amd.conf /etc/modprobe.d/kvm.conf  # for amd boxes only\n  ```\n\n* Add user to the `kvm` and `libvirt` groups (might be needed).\n\n  ```\n  sudo usermod -aG kvm $(whoami)\n  sudo usermod -aG libvirt $(whoami)\n  sudo usermod -aG input $(whoami)\n  ```\n\n  Note: Re-login after executing this command.\n\n* Fetch macOS installer.\n\n  ```\n  ./fetch-macOS-v2.py\n  ```\n\n  You can choose your desired macOS version here. After executing this step,\n  you should have the `BaseSystem.dmg` file in the current folder.\n\n  ATTENTION: Let `>= Big Sur` setup sit at the `Country Selection` screen, and\n  other similar places for a while if things are being slow. The initial macOS\n  setup wizard will eventually succeed.\n\n  Sample run:\n\n  ```\n  $ ./fetch-macOS-v2.py\n  1. High Sierra (10.13)\n  2. Mojave (10.14)\n  3. Catalina (10.15)\n  4. Big Sur (11.7)\n  5. Monterey (12.6)\n  6. Ventura (13) - RECOMMENDED\n  7. Sonoma (14)\n  8. Sequoia (15)\n\n  Choose a product to download (1-8): 6\n  ```\n\n  Note: Modern NVIDIA GPUs are supported on HighSierra but not on later\n  versions of macOS.\n\n* Convert the downloaded `BaseSystem.dmg` file into the `BaseSystem.img` file.\n\n  ```\n  dmg2img -i BaseSystem.dmg BaseSystem.img\n  ```\n\n* Create a virtual HDD image where macOS will be installed. If you change the\n  name of the disk image from `mac_hdd_ng.img` to something else, the boot scripts\n  will need to be updated to point to the new image name.\n\n  ```\n  qemu-img create -f qcow2 mac_hdd_ng.img 256G\n  ```\n\n  NOTE: Create this HDD image file on a fast SSD/NVMe disk for best results.\n\n* Now you are ready to install macOS 🚀\n\n\n### Installation\n\n- CLI method (primary). Just run the `OpenCore-Boot.sh` script to start the\n  installation process.\n\n  ```\n  ./OpenCore-Boot.sh\n  ```\n\n  Note: This same script works for all recent macOS versions.\n\n- Use the `Disk Utility` tool within the macOS installer to partition, and\n  format the virtual disk attached to the macOS VM. Use `APFS` (the default)\n  for modern macOS versions.\n\n- Go ahead, and install macOS 🙌\n\n- (OPTIONAL) Use this macOS VM disk with libvirt (virt-manager / virsh stuff).\n\n  - Edit `macOS-libvirt-Catalina.xml` file and change the various file paths (search\n    for `CHANGEME` strings in that file). The following command should do the\n    trick usually.\n\n    ```\n    sed \"s/CHANGEME/$USER/g\" macOS-libvirt-Catalina.xml > macOS.xml\n\n    virt-xml-validate macOS.xml\n    ```\n\n  - Create a VM by running the following command.\n\n    ```bash\n    virsh --connect qemu:///system define macOS.xml\n    ```\n\n  - If needed, grant necessary permissions to libvirt-qemu user,\n\n    ```\n    sudo setfacl -m u:libvirt-qemu:rx /home/$USER\n    sudo setfacl -R -m u:libvirt-qemu:rx /home/$USER/OSX-KVM\n    ```\n\n  - Launch `virt-manager` and start the `macOS` virtual machine.\n\n\n### Headless macOS\n\n- Use the provided [boot-macOS-headless.sh](./boot-macOS-headless.sh) script.\n\n  ```\n  ./boot-macOS-headless.sh\n  ```\n\n\n### Setting Expectations Right\n\nNice job on setting up a `Virtual Hackintosh` system! Such a system can be used\nfor a variety of purposes (e.g. software builds, testing, reversing work), and\nit may be all you need, along with some tweaks documented in this repository.\n\nHowever, such a system lacks graphical acceleration, a reliable sound sub-system,\nUSB 3 functionality and other similar things. To enable these things, take a\nlook at our [notes](notes.md). We would like to resume our testing and\ndocumentation work around this area. Please [reach out to us](mailto:dhiru.kholia@gmail.com?subject=[GitHub]%20OSX-KVM%20Funding%20Support)\nif you are able to fund this area of work.\n\nIt is possible to have 'beyond-native-apple-hw' performance but it does require\nwork, patience, and a bit of luck (perhaps?).\n\n\n### Post-Installation\n\n* See [networking notes](networking-qemu-kvm-howto.txt) on how to setup networking in your VM, outbound and also inbound for remote access to your VM via SSH, VNC, etc.\n\n* To passthrough GPUs and other devices, see [these notes](notes.md#gpu-passthrough-notes).\n\n* Need a different resolution? Check out the [notes](notes.md#change-resolution-in-opencore) included in this repository.\n\n* Trouble with iMessage? Check out the [notes](notes.md#trouble-with-imessage) included in this repository.\n\n* Highly recommended macOS tweaks - https://github.com/sickcodes/osx-optimizer\n\n\n### Is This Legal?\n\nThe \"secret\" Apple OSK string is widely available on the Internet. It is also included in a public court document [available here](http://www.rcfp.org/sites/default/files/docs/20120105_202426_apple_sealing.pdf). I am not a lawyer but it seems that Apple's attempt(s) to get the OSK string treated as a trade secret did not work out. Due to these reasons, the OSK string is freely included in this repository.\n\nPlease review the ['Legality of Hackintoshing' documentation bits from Dortania's OpenCore Install Guide](https://dortania.github.io/OpenCore-Install-Guide/why-oc.html#legality-of-hackintoshing).\n\nGabriel Somlo also has [some thoughts](http://www.contrib.andrew.cmu.edu/~somlo/OSXKVM/) on the legal aspects involved in running macOS under QEMU/KVM.\n\nYou may also find [this 'Announcing Amazon EC2 Mac instances for macOS' article](https://aws.amazon.com/about-aws/whats-new/2020/11/announcing-amazon-ec2-mac-instances-for-macos/\n) interesting.\n\nNote: It is your responsibility to understand, and accept (or not accept) the\nApple EULA.\n\nNote: This is not legal advice, so please make the proper assessments yourself\nand discuss with your lawyers if you have any concerns (Text credit: Dortania)\n\n\n### Motivation\n\nMy aim is to enable macOS based educational tasks, builds + testing, kernel\ndebugging, reversing, and macOS security research in an easy, reproducible\nmanner without getting 'invested' in Apple's closed ecosystem (too heavily).\n\nThese `Virtual Hackintosh` systems are not intended to replace the genuine\nphysical macOS systems.\n\nPersonally speaking, this repository has been a way for me to 'exit' the Apple\necosystem. It has helped me to test and compare the interoperability of `Canon\nCanoScan LiDE 120` scanner, and `Brother HL-2250DN` laser printer. And these\ndevices now work decently enough on modern versions of Ubuntu (Yay for free\nsoftware). Also, a long time back, I had to completely wipe my (then) brand new\n`MacBook Pro (Retina, 15-inch, Late 2013)` and install Xubuntu on it - as the\n`OS X` kernel kept crashing on it!\n\nBackstory: I was a (poor) student in Canada in a previous life and Apple made [my work on cracking Apple Keychains](https://github.com/openwall/john/blob/bleeding-jumbo/src/keychain_fmt_plug.c) a lot harder than it needed to be. This is how I got interested in Hackintosh systems.\n"
        },
        {
          "name": "References.md",
          "type": "blob",
          "size": 0.62109375,
          "content": "### References\n\n* http://www.contrib.andrew.cmu.edu/~somlo/OSXKVM/\n\n* https://www.kraxel.org/blog/2017/09/running-macos-as-guest-in-kvm/\n\n* https://github.com/foxlet/macOS-Simple-KVM\n\n* https://support.apple.com/en-us/HT211683 (How to get old versions of macOS)\n\n* https://github.com/sickcodes/Docker-OSX/issues/341#issuecomment-919913745 (awesome qemu automation)\n\n* https://github.com/ofawx/VmAssetCacheEnable\n\n* https://dortania.github.io/OpenCore-Install-Guide/troubleshooting/extended/post-issues.html\n\n- https://wiki.archlinux.org/title/QEMU#UNIX_socket\n\n- https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF#USB_controller\n"
        },
        {
          "name": "UNRAID.md",
          "type": "blob",
          "size": 5.923828125,
          "content": "# Setting up OSX-KVM with UNRAID (Unraid OS)\nNote: SpaceInvaderOne has a community app called `macinabox`, and it is a Docker container that can automate the entire process that creates the VM and disks. This guide aims to provide utility in choosing specific macOS versions or bootloaders, and understanding the process of how this repository's resources can be used in hypervisor types (UNRAID, ESXi, etc.).\n\n- [Setting up OSX-KVM with UNRAID](#setting-up-osx-kvm-with-unraid)\n  - [Motivation](#motivation)\n  - [Pre-Requisites](#pre-requisites)\n  - [Preparing the VM](#preparing-the-vm)\n  - [Starting the VM](#starting-the-vm)\n  - [Optional Notes](#optional-notes)\n  - [Misc](#misc)\n  - [Resources](#resources)\n\n## Motivation\nThis guide solely uses the files generated from this repository to construct a VM for use in UNRAID. This means updates to and features of this repository should be compatible with creating VMs in UNRAID. This type of setup also aims to utilize UNRAID's advantages to address items in the [Contributing Back](https://github.com/kholia/OSX-KVM#contributing-back) section of the main repository, including creating/re-using VM snapshots, build farms, VNC+SSH support, and capacity of delivering a bare-metal-like experience for development. Further customization in setting up Hackintosh on KVM is beyond the scope of this documentation, but feel free to provide relevant [supplemental resources](#resources).\n\n## Pre-Requisites\nFollow the [Installation Preparation](https://github.com/kholia/OSX-KVM#installation-preparation) guide and have your disk image `mac_hdd_ng.img` and installation media `BaseSystem.dmg` ready.\n\nEnsure you have VM support and passthrough parameters prepared (VFIO devices, PCI controllers, VNC remote, etc.). You should also have a way of reading/writing to the appropriate locations in your UNRAID server (I use `Krusader`).\n\n## Preparing the VM\nBelow are sample instructions for setting up the VM. We will keep the necessary files in the same directory for simplicity.\n* Place these 3 files `BaseSystem.img`, `mac_hdd_ng.img` and `OSX-KVM/OpenCore/OpenCore.qcow2` into the directory of your VM\n  * ie: Into `/mnt/user/domains/BigSur`, where domains is the folder for your VMs\n* Create a new VM and edit the XML. Use the OSX-KVM repository's `macOS-libvirt-Catalina.xml` as a guide\n  * ie: You also have the option to use the GUI to adjust the CPUs, RAM, setting the OS installation media and disk images, as well as the devices you wish to pass into the VM. However, each time the template is edited via the GUI, you must go in the XML editor and paste the qemu args at the bottom of the XML file.\n  * Note: The opencore qcow2 file should be prioritized first, it will contain the EFI boot partition that you can modify after installation using the OpenCore Configurator\n* Check that the three files' primary vDisk bus is SATA, and verify types:\n  * OpenCore.qcow2 `<driver name='qemu' type='qcow2' cache='writeback'/>`\n  * BaseSystem.img `<driver name='qemu' type='raw' cache='writeback'/>`\n  * mac_hdd_ng.img `<driver name='qemu' type='qcow2' cache='writeback'/>`\n* After successful installation, the BaseSystem.img entry can be safely deleted from the XML\n\n## Starting the VM\n* Initialize the VM, and select the macOS base system when OpenCore prompts\n* Once the installer boots, go into disk utility and erase the qemu drive that relatively matches the space you've allocated in the qemu-img args\n  * ie: Erase the disk and use these params - APFS, GUID Partition Table\n* After installation, you may need to change the NIC to `vmxnet3` or `e1000-82545em` to login with your Apple ID or install your apps from the AppStore (consult [Resources](#resources) for other network interface types)\n* Download OpenCore Configurator and mount the EFI partition called `EFI o` (Tools > Mount EFI)\n![OpenCore EFI Partitions](screenshots/unraid-oc-efi.png)\n* Open the plist from Tools > Scan Configurations\n![OpenCore plist](screenshots/unraid-oc-plist.png)\n* Customize aml/kext/nvram/drivers and save\n  * Note: Making modifications here will write to the `OpenCore.qcow2` file copied from this repository.\n\n## Optional Notes\nIn no particular order,\n* For the RX 5700XT, the boot-args `agdpmod=pikera` is necessary to successfully boot. Change in `NVRAM > UUID > boot-args (right-click) > WhateverGreen > agdpmod=pikera`\n  * Use VNC or another GPU until able to configure the EFI partition, or pre-configure the qcow2 file\n* Simplify updates by creating another VM template that does not passthrough the GPU (noVNC)\n  * During OS updates, multiple restarts occur. If you use an AMD GPU that has the reset-bug, this process can be jarring\n  * Each restart there will be another boot option alongside your default one (from the update), choose that one until the update is complete\n* For passing PCIe USB controllers. ensure they work with macOS and ensure its free by vfio-bind them on server boot\n\nWhen there is a home for this section, feel free to share optimizations and configurations that require modifications to the qemu args, XML, config plist, etc.\n\n## Misc\n\nqemu args\n```\n  <qemu:commandline>\n    <qemu:arg value='-usb'/>\n    <qemu:arg value='-device'/>\n    <qemu:arg value='usb-kbd,bus=usb-bus.0'/>\n    <qemu:arg value='-device'/>\n    <qemu:arg value='isa-applesmc,osk=ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc'/>\n    <qemu:arg value='-smbios'/>\n    <qemu:arg value='type=2'/>\n    <qemu:arg value='-cpu'/>\n    <qemu:arg value='Penryn,kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,+pcid,+ssse3,+sse4.2,+popcnt,+avx,+aes,+xsave,+xsaveopt,check'/>\n  </qemu:commandline>\n```\n\n## Resources\n\n* [https://forums.unraid.net/topic/84430-hackintosh-tips-to-make-a-bare-metal-macos/](https://forums.unraid.net/topic/84430-hackintosh-tips-to-make-a-bare-metal-macos/)\n* [SpaceInvaderOne: How to Easily Install macOS Catalina Mojave or HighSierra as a VM on Unraid](https://www.youtube.com/watch?v=g_jk9D2e5q0)\n* [Macinabox GitHub Repository](https://github.com/SpaceinvaderOne/Macinabox)\n"
        },
        {
          "name": "Xcode-Tutorial.md",
          "type": "blob",
          "size": 2.5087890625,
          "content": "### Developing on Virtualized macOS\n\n1. Install Xcode from the Apple App Store or from the [Apple developer website](https://developers.apple.com).\n\n2. Create an Xcode project as usual.\n\n3. Connect the `Apple Device` (called `iPhone` from now on) to the macOS VM.\n   This can be done in two ways:\n\n   Method 1: Use USB passthrough technique to connect an entire USB controller\n   (to which `iPhone` is connected) to the macOS VM. This method is covered in\n   these [notes](notes.md#usb-passthrough-notes).\n\n   If USB passthrough is not an option, use `Method 2`.\n\n   Method 2. You can use the [USB Network Gate](https://www.eltima.com/products/usb-over-ethernet/)\n   software to pass USB devices to macOS VMs over the network (LAN / Wi-Fi).\n\n   ![USB Network Gate - USB over Ethernet Sharing Software](https://www.eltima.com/imgnew/products/usb-over-ethernet/illustrationShare.png)\n\n   This software comes with a free trial and supports a wide variety of\n   operating systems. If your operating system is not supported directly, you can\n   deploy this software on a Raspberry Pi.\n\n   Once you have it installed on the host computer (the one with the USB device\n   that you will be sharing), you can install it on the macOS VM. Make sure to\n   allow the extension in `System Preferences > Security & Privacy` and reboot.\n\n   Once that is finished, you can open up `USB Network Gate` on the client\n   (macOS VM) and click `Add Server` and type in the IP address of the Raspberry Pi\n   or other device (to which the `iPhone` is connected). Finally, you have to\n   trust the computer on your `iPhone`, and it should be completely set up!\n\n   At this point, the `iPhone` should work as usual - showing up in\n   Finder, Xcode, etc.\n\n4. At this point, the macOS VM has an Xcode project and has access to the\n   `iPhone`. Continue using Xcode as usual to build, deploy, and test the Xcode\n   project.\n\n\n### Setup USB Network Gate on Raspberry Pi\n\nThese steps were tested on RPi 3B+ running `Raspberry Pi OS with desktop\n(August 20th 2020)`.\n\n```\nsudo apt update\nsudo apt upgrade -y\n\nsudo reboot\n\nsudo apt install raspberrypi-kernel-headers\n\nwget https://cdn.electronic.us/products/usb-over-ethernet/linux/download/eveusb_armv7l.deb\n\nsudo apt install ./eveusb_armv7l.deb\n```\n\nTo get proper VNC resolution (for headless systems), insert the following lines\nin `/boot/config.txt` on the RPi system.\n\n```\ndtparam=audio=on  # note: existing line\nhdmi_force_hotplug=1\nhdmi_group=2\nhdmi_mode=82\n```\n\nEnable VNC on the RPi system using the `sudo raspi-config nonint do_vnc 0`\ncommand.\n"
        },
        {
          "name": "backups",
          "type": "tree",
          "content": null
        },
        {
          "name": "boot-linux-for-debugging.sh",
          "type": "blob",
          "size": 2.4345703125,
          "content": "#!/usr/bin/env bash\n\n# Special thanks to:\n# https://github.com/Leoyzen/KVM-Opencore\n# https://github.com/thenickdude/KVM-Opencore/\n# https://github.com/qemu/qemu/blob/master/docs/usb2.txt\n#\n# qemu-img create -f qcow2 mac_hdd_ng.img 128G\n#\n# echo 1 > /sys/module/kvm/parameters/ignore_msrs (this is required)\n\n############################################################################\n# NOTE: Tweak the \"MY_OPTIONS\" line in case you are having booting problems!\n############################################################################\n\nMY_OPTIONS=\"+ssse3,+sse4.2,+popcnt,+avx,+aes,+xsave,+xsaveopt,check\"\n\n# This script works for Big Sur, Catalina, Mojave, and High Sierra. Tested with\n# macOS 10.15.6, macOS 10.14.6, and macOS 10.13.6\n\nALLOCATED_RAM=\"3072\" # MiB\nCPU_SOCKETS=\"1\"\nCPU_CORES=\"2\"\nCPU_THREADS=\"4\"\n\nREPO_PATH=\".\"\nOVMF_DIR=\".\"\n\n# This causes high cpu usage on the *host* side\n# qemu-system-x86_64 -enable-kvm -m 3072 -cpu Penryn,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,hypervisor=off,vmx=on,kvm=off,$MY_OPTIONS\\\n\n# shellcheck disable=SC2054\nargs=(\n  -enable-kvm -m \"$ALLOCATED_RAM\" -cpu host,kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,\"$MY_OPTIONS\"\n  -machine q35\n  -usb -device usb-kbd -device usb-tablet\n  -smp \"$CPU_THREADS\",cores=\"$CPU_CORES\",sockets=\"$CPU_SOCKETS\"\n  -device usb-ehci,id=ehci\n  # -device usb-kbd,bus=ehci.0\n  # -device usb-mouse,bus=ehci.0\n  # -device nec-usb-xhci,id=xhci\n  -device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\"\n  -drive if=pflash,format=raw,readonly=on,file=\"$REPO_PATH/$OVMF_DIR/OVMF_CODE.fd\"\n  -drive if=pflash,format=raw,file=\"$REPO_PATH/$OVMF_DIR/OVMF_VARS-1024x768.fd\"\n  -smbios type=2\n  -device ich9-intel-hda -device hda-duplex\n  -device ich9-ahci,id=sata\n  -drive id=OpenCoreBoot,if=none,snapshot=on,format=qcow2,file=\"$REPO_PATH/OpenCore/OpenCore.qcow2\"\n  -device ide-hd,bus=sata.3,drive=OpenCoreBoot\n  -device ide-hd,bus=sata.2,drive=InstallMedia\n  -drive id=InstallMedia,if=none,file=\"$REPO_PATH/linux.iso\",format=raw   # archlinux-2021.10.01-x86_64.iso works nicely!\n  -drive id=MacHDD,if=none,file=\"$REPO_PATH/linux_hdd.img\",format=qcow2\n  -device ide-hd,bus=sata.4,drive=MacHDD\n  # -netdev tap,id=net0,ifname=tap0,script=no,downscript=no -device vmxnet3,netdev=net0,id=net0,mac=52:54:00:c9:18:27\n  -netdev user,id=net0 -device virtio-net-pci,netdev=net0,id=net0,mac=52:54:00:c9:18:27\n  -monitor stdio\n  -device VGA,vgamem_mb=128\n)\n\nqemu-system-x86_64 \"${args[@]}\"\n"
        },
        {
          "name": "boot-macOS-headless.sh",
          "type": "blob",
          "size": 2.6015625,
          "content": "#!/usr/bin/env bash\n\n# Special thanks to:\n# https://github.com/Leoyzen/KVM-Opencore\n# https://github.com/thenickdude/KVM-Opencore/\n# https://github.com/qemu/qemu/blob/master/docs/usb2.txt\n#\n# qemu-img create -f qcow2 mac_hdd_ng.img 128G\n#\n# echo 1 | sudo tee -a /sys/module/kvm/parameters/ignore_msrs  # this is required\n#\n# Usage:\n#\n# $ boot-macOS-headless.sh\n#\n# (qemu) change vnc password\n# Password: ********\n#\n# Note: Using RealVNC client, connect to `<localhost:5901>`.\n# E.g. `vncviewer localhost:5901`\n\n############################################################################\n# NOTE: Tweak the \"MY_OPTIONS\" line in case you are having booting problems!\n############################################################################\n\nMY_OPTIONS=\"+ssse3,+sse4.2,+popcnt,+avx,+aes,+xsave,+xsaveopt,check\"\n\n# This script works for Big Sur, Catalina, Mojave, and High Sierra. Tested with\n# macOS 10.15.6, macOS 10.14.6, and macOS 10.13.6.\n\nALLOCATED_RAM=\"7192\" # MiB\nCPU_SOCKETS=\"1\"\nCPU_CORES=\"2\"\nCPU_THREADS=\"4\"\n\nREPO_PATH=\".\"\nOVMF_DIR=\".\"\n\n# shellcheck disable=SC2054\nargs=(\n  -enable-kvm -m \"$ALLOCATED_RAM\" -cpu Penryn,kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,\"$MY_OPTIONS\"\n  -machine q35\n  -device qemu-xhci,id=xhci\n  -device usb-kbd,bus=xhci.0 -device usb-tablet,bus=xhci.0\n  -smp \"$CPU_THREADS\",cores=\"$CPU_CORES\",sockets=\"$CPU_SOCKETS\"\n  -device usb-ehci,id=ehci\n  # -device usb-kbd,bus=ehci.0\n  # -device usb-mouse,bus=ehci.0\n  # -device nec-usb-xhci,id=xhci\n  # -global nec-usb-xhci.msi=off\n  -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off\n  # -device usb-host,vendorid=0x8086,productid=0x0808  # 2 USD USB Sound Card\n  # -device usb-host,vendorid=0x1b3f,productid=0x2008  # Another 2 USD USB Sound Card\n  -device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\"\n  -drive if=pflash,format=raw,readonly=on,file=\"$REPO_PATH/$OVMF_DIR/OVMF_CODE.fd\"\n  -drive if=pflash,format=raw,file=\"$REPO_PATH/$OVMF_DIR/OVMF_VARS-1920x1080.fd\"\n  -smbios type=2\n  -device ich9-ahci,id=sata\n  -drive id=OpenCoreBoot,if=none,snapshot=on,format=qcow2,file=\"$REPO_PATH/OpenCore/OpenCore.qcow2\"\n  -device ide-hd,bus=sata.2,drive=OpenCoreBoot\n  -device ide-hd,bus=sata.3,drive=InstallMedia\n  -drive id=InstallMedia,if=none,file=\"$REPO_PATH/BaseSystem.img\",format=raw\n  -drive id=MacHDD,if=none,file=\"$REPO_PATH/mac_hdd_ng.img\",format=qcow2\n  -device ide-hd,bus=sata.4,drive=MacHDD\n  -netdev user,id=net0,hostfwd=tcp::2222-:22 -device vmxnet3,netdev=net0,id=net0,mac=52:54:00:c9:18:27\n  -monitor stdio\n  -device vmware-svga\n  -display none\n  -vnc 0.0.0.0:1,password=on -k en-us\n)\n\nqemu-system-x86_64 \"${args[@]}\"\n"
        },
        {
          "name": "boot-passthrough-windows.sh",
          "type": "blob",
          "size": 3.1767578125,
          "content": "#!/usr/bin/env bash\n\n# Special thanks to:\n# https://github.com/Leoyzen/KVM-Opencore\n# https://github.com/thenickdude/KVM-Opencore/\n# https://github.com/qemu/qemu/blob/master/docs/usb2.txt\n#\n# qemu-img create -f qcow2 windows_hdd.img 512G\n#\n# echo 1 > /sys/module/kvm/parameters/ignore_msrs (this is required)\n#\n# wget https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-0.1.208-1/virtio-win-0.1.208.iso\n#\n# GPU passthrough is terrible with AMD cards which suffer from the \"AMD reset\n# bug\". NVIDIA cards work very well with Windows VMs.\n\n############################################################################\n# NOTE: Tweak the \"MY_OPTIONS\" line in case you are having booting problems!\n############################################################################\n\nMY_OPTIONS=\"+ssse3,+sse4.2,+popcnt,+avx,+aes,+xsave,+xsaveopt,check\"\n\n# This script works for Big Sur, Catalina, Mojave, and High Sierra. Tested with\n# macOS 10.15.6, macOS 10.14.6, and macOS 10.13.6\n\nALLOCATED_RAM=\"3072\" # MiB\nCPU_SOCKETS=\"1\"\nCPU_CORES=\"2\"\nCPU_THREADS=\"2\"\n\nREPO_PATH=\".\"\nOVMF_DIR=\".\"\n\n# Note: This script assumes that you are doing CPU + GPU passthrough. This\n# script will need to be modified for your specific needs!\n#\n# We recommend doing the initial macOS installation without using passthrough\n# stuff. In other words, don't use this script for the initial macOS\n# installation.\n\n# shellcheck disable=SC2054\nargs=(\n  -enable-kvm -m \"$ALLOCATED_RAM\" -cpu host,kvm=on,+invtsc,vmware-cpuid-freq=on,\"$MY_OPTIONS\"\n  -machine q35\n  -usb -device usb-kbd -device usb-tablet\n  -smp \"$CPU_THREADS\",cores=\"$CPU_CORES\",sockets=\"$CPU_SOCKETS\"\n  -device usb-ehci,id=ehci\n  -vga none\n  # 01:00.0 VGA compatible controller [0300]: Advanced Micro Devices, Inc. [AMD/ATI] Ellesmere [Radeon RX 470/480/570/570X/580/580X/590] [1002:67df] (rev ef)\n  #         Subsystem: Sapphire Technology Limited Nitro+ Radeon RX 570/580/590 [1da2:e366]\n  # 01:00.1 Audio device [0403]: Advanced Micro Devices, Inc. [AMD/ATI] Ellesmere HDMI Audio [Radeon RX 470/480 / 570/580/590] [1002:aaf0]\n  #         Subsystem: Sapphire Technology Limited Ellesmere HDMI Audio [Radeon RX 470/480 / 570/580/590] [1da2:aaf0]\n  -device vfio-pci,host=01:00.0,multifunction=on\n  # -device vfio-pci,host=01:00.0,multifunction=on,romfile=gpu_original_bios.bin\n  -device vfio-pci,host=01:00.1\n  # ASMedia ASM1142 USB 3.1 Host Controller (comment out as needed)\n  # 03:00.0 USB controller [0c03]: ASMedia Technology Inc. ASM1142 USB 3.1 Host Controller [1b21:1242]\n  -device vfio-pci,host=03:00.0,bus=pcie.0\n  -drive if=pflash,format=raw,readonly,file=\"$REPO_PATH/$OVMF_DIR/OVMF_CODE.fd\"\n  -drive if=pflash,format=raw,file=\"$REPO_PATH/$OVMF_DIR/OVMF_VARS-1024x768.fd\"\n  -drive file=\"$REPO_PATH/windows.iso\",media=cdrom  # Win10_21H2_English_x64.iso from Microsoft works great\n  -drive file=\"$REPO_PATH/virtio-win-0.1.208.iso\",media=cdrom\n  -drive if=virtio,index=0,file=\"$REPO_PATH/windows_hdd.img\",format=qcow2\n  # -netdev tap,id=net0,ifname=tap0,script=no,downscript=no -device e1000e,netdev=net0,id=net0,mac=52:54:00:c9:18:27\n  -netdev user,id=net0 -device e1000e,netdev=net0,id=net0,mac=52:54:00:c9:18:27\n  -monitor stdio\n  -display none\n)\n\nqemu-system-x86_64 \"${args[@]}\"\n"
        },
        {
          "name": "boot-passthrough.sh",
          "type": "blob",
          "size": 3.701171875,
          "content": "#!/usr/bin/env bash\n\n# Special thanks to:\n# https://github.com/Leoyzen/KVM-Opencore\n# https://github.com/thenickdude/KVM-Opencore/\n# https://github.com/qemu/qemu/blob/master/docs/usb2.txt\n#\n# qemu-img create -f qcow2 mac_hdd_ng.img 128G\n#\n# echo 1 > /sys/module/kvm/parameters/ignore_msrs (this is required)\n#\n############################################################################\n# NOTE: Tweak the \"MY_OPTIONS\" line in case you are having booting problems!\n############################################################################\n#\n# VNC Usage:\n#\n# $ ./boot-passthrough.sh\n#\n# Set your desired VNC password below.\n#\n# (qemu) change vnc password\n# Password: ********\n\nMY_OPTIONS=\"+ssse3,+sse4.2,+popcnt,+avx,+aes,+xsave,+xsaveopt,check\"\n\n# This script works for Big Sur, Catalina, Mojave, and High Sierra. Tested with\n# macOS 10.15.6, macOS 10.14.6, and macOS 10.13.6\n\nALLOCATED_RAM=\"3072\" # MiB\nCPU_SOCKETS=\"1\"\nCPU_CORES=\"2\"\nCPU_THREADS=\"4\"\n\nREPO_PATH=\".\"\nOVMF_DIR=\".\"\n\n# Note: This script assumes that you are doing CPU + GPU passthrough. This\n# script will need to be modified for your specific needs!\n#\n# We recommend doing the initial macOS installation without using passthrough\n# stuff. In other words, don't use this script for the initial macOS\n# installation.\n\n# shellcheck disable=SC2054\nargs=(\n  -enable-kvm -m \"$ALLOCATED_RAM\" -cpu Penryn,kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,\"$MY_OPTIONS\"\n  -machine q35\n  -usb -device usb-kbd -device usb-tablet -device usb-mouse\n  -smp \"$CPU_THREADS\",cores=\"$CPU_CORES\",sockets=\"$CPU_SOCKETS\"\n  -device usb-ehci,id=ehci\n  -vga none\n  # 01:00.0 VGA compatible controller [0300]: Advanced Micro Devices, Inc. [AMD/ATI] Ellesmere [Radeon RX 470/480/570/570X/580/580X/590] [1002:67df] (rev ef)\n  #         Subsystem: Sapphire Technology Limited Nitro+ Radeon RX 570/580/590 [1da2:e366]\n  # 01:00.1 Audio device [0403]: Advanced Micro Devices, Inc. [AMD/ATI] Ellesmere HDMI Audio [Radeon RX 470/480 / 570/580/590] [1002:aaf0]\n  #         Subsystem: Sapphire Technology Limited Ellesmere HDMI Audio [Radeon RX 470/480 / 570/580/590] [1da2:aaf0]\n  -device vfio-pci,host=01:00.0,multifunction=on,x-no-kvm-intx=on\n  # -device vfio-pci,host=01:00.0,multifunction=on,romfile=gpu_original_bios.bin\n  -device vfio-pci,host=01:00.1\n  # ASMedia ASM1142 USB 3.1 Host Controller (comment out as needed)\n  # 03:00.0 USB controller [0c03]: ASMedia Technology Inc. ASM1142 USB 3.1 Host Controller [1b21:1242]\n  # -device vfio-pci,host=03:00.0,bus=pcie.0\n  -device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\"\n  -drive if=pflash,format=raw,readonly=on,file=\"$REPO_PATH/$OVMF_DIR/OVMF_CODE.fd\"\n  -drive if=pflash,format=raw,file=\"$REPO_PATH/$OVMF_DIR/OVMF_VARS-1024x768.fd\"\n  -smbios type=2\n  -device ich9-intel-hda -device hda-duplex\n  -device ich9-ahci,id=sata\n  -drive id=OpenCoreBoot,if=none,snapshot=on,format=qcow2,file=\"$REPO_PATH/OpenCore/OpenCore.qcow2\"\n  -device ide-hd,bus=sata.2,drive=OpenCoreBoot\n  -device ide-hd,bus=sata.3,drive=InstallMedia\n  -drive id=InstallMedia,if=none,file=\"$REPO_PATH/BaseSystem.img\",format=raw\n  -drive id=MacHDD,if=none,file=\"$REPO_PATH/mac_hdd_ng.img\",format=qcow2\n  -device ide-hd,bus=sata.4,drive=MacHDD\n  # -netdev tap,id=net0,ifname=tap0,script=no,downscript=no -device vmxnet3,netdev=net0,id=net0,mac=52:54:00:c9:18:27\n  -netdev user,id=net0 -device vmxnet3,netdev=net0,id=net0,mac=52:54:00:c9:18:27\n  -monitor stdio\n  -display none\n  # -object input-linux,id=kbd1,evdev=/dev/input/by-id/usb-SEMITEK_USB-HID_Gaming_Keyboard_SN0000000001-event-kbd,grab_all=on,repeat=on\n  # -object input-linux,id=mouse1,evdev=/dev/input/by-id/usb-PixArt_Dell_MS116_USB_Optical_Mouse-event-mouse\n  -vnc 0.0.0.0:1,password -k en-us\n)\n\nqemu-system-x86_64 \"${args[@]}\"\n"
        },
        {
          "name": "boot-windows.sh",
          "type": "blob",
          "size": 2.4697265625,
          "content": "#!/usr/bin/env bash\n\n# Special thanks to:\n# https://github.com/Leoyzen/KVM-Opencore\n# https://github.com/thenickdude/KVM-Opencore/\n# https://github.com/qemu/qemu/blob/master/docs/usb2.txt\n#\n# qemu-img create -f qcow2 windows_hdd.img 512G\n#\n# echo 1 > /sys/module/kvm/parameters/ignore_msrs (this is required)\n#\n# wget https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-0.1.208-1/virtio-win-0.1.208.iso\n#\n# https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md\n# https://www.spice-space.org/download/windows/qxl-wddm-dod/qxl-wddm-dod-0.21/\n#\n# Pass the SSD (USB disk) to the VM:\n# (qemu) device_add usb-host,vendorid=0x174c,productid=0x55aa\n\n############################################################################\n# NOTE: Tweak the \"MY_OPTIONS\" line in case you are having booting problems!\n############################################################################\n\nMY_OPTIONS=\"+ssse3,+sse4.2,+popcnt,+avx,+aes,+xsave,+xsaveopt,check\"\n\n# This script works for Big Sur, Catalina, Mojave, and High Sierra. Tested with\n# macOS 10.15.6, macOS 10.14.6, and macOS 10.13.6\n\nALLOCATED_RAM=\"8192\" # MiB\nCPU_SOCKETS=\"1\"\nCPU_CORES=\"16\"\nCPU_THREADS=\"16\"\n\nREPO_PATH=\".\"\nOVMF_DIR=\".\"\n\n# This causes high cpu usage on the *host* side\n# qemu-system-x86_64 -enable-kvm -m 3072 -cpu Penryn,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,hypervisor=off,vmx=on,kvm=off,$MY_OPTIONS\\\n\n# shellcheck disable=SC2054\nargs=(\n  -enable-kvm -m \"$ALLOCATED_RAM\" -cpu host,kvm=on,+invtsc,vmware-cpuid-freq=on,\"$MY_OPTIONS\"\n  -machine q35\n  -smp \"$CPU_THREADS\",cores=\"$CPU_CORES\",sockets=\"$CPU_SOCKETS\"\n  -device qemu-xhci\n  -device usb-kbd\n  -device usb-tablet\n  -device ich9-intel-hda -device hda-duplex\n  -boot d\n  -drive if=pflash,format=raw,readonly=on,file=\"$REPO_PATH/$OVMF_DIR/OVMF_CODE.fd\"\n  -drive if=pflash,format=raw,file=\"$REPO_PATH/$OVMF_DIR/OVMF_VARS-1024x768.fd\"\n  -drive file=\"$REPO_PATH/windows.iso\",media=cdrom  # Win10_21H2_English_x64.iso from Microsoft works great\n  -drive file=\"$REPO_PATH/virtio-win-0.1.208.iso\",media=cdrom\n  -drive if=virtio,index=0,file=\"$REPO_PATH/windows_hdd.img\",format=qcow2\n  # -netdev tap,id=net0,ifname=tap0,script=no,downscript=no -device e1000e,netdev=net0,id=net0,mac=52:54:00:c9:18:27\n  -netdev user,id=net0 -device e1000e,netdev=net0,id=net0,mac=52:54:00:c9:18:27\n  -monitor stdio\n  -vga qxl\n  # https://www.kraxel.org/blog/2021/05/qemu-cut-paste/\n  # https://wiki.gentoo.org/wiki/QEMU/Windows_guest\n)\n\nqemu-system-x86_64 \"${args[@]}\"\n"
        },
        {
          "name": "bridge.conf",
          "type": "blob",
          "size": 0.009765625,
          "content": "allow br0\n"
        },
        {
          "name": "customized",
          "type": "tree",
          "content": null
        },
        {
          "name": "fetch-macOS-v2.py",
          "type": "blob",
          "size": 22.8818359375,
          "content": "#!/usr/bin/env python3\n# pylint: disable=C0301,C0116,C0103,R0903\n\n\"\"\"\nGather recovery information for Macs.\n\nCopyright (c) 2019, vit9696\n\nmacrecovery is a tool that helps to automate recovery interaction. It can be\nused to download diagnostics and recovery as well as analyse MLB.\n\nRequires python to run. Run with `-h` argument to see all available arguments.\n\nUpstream: https://github.com/acidanthera/OpenCorePkg/tree/master/Utilities/macrecovery\npylint -> Your code has been rated at -0.08/10 ;(\n\"\"\"\n\nimport argparse\nimport hashlib\nimport json\nimport linecache\nimport os\nimport random\nimport struct\nimport string\nimport sys\n\ntry:\n    from urllib.request import Request, HTTPError, urlopen\n    from urllib.parse import urlparse\nexcept ImportError:\n    print('ERROR: Python 2 is not supported, please use Python 3')\n    sys.exit(1)\n\nSELF_DIR = os.path.dirname(os.path.realpath(__file__))\n\n# MacPro7,1\nRECENT_MAC = 'Mac-27AD2F918AE68F61'\nMLB_ZERO = '00000000000000000'\nMLB_VALID = 'F5K105303J9K3F71M'\nMLB_PRODUCT = 'F5K00000000K3F700'\n\nTYPE_SID = 16\nTYPE_K = 64\nTYPE_FG = 64\n\nINFO_PRODUCT = 'AP'\nINFO_IMAGE_LINK = 'AU'\nINFO_IMAGE_HASH = 'AH'\nINFO_IMAGE_SESS = 'AT'\nINFO_SIGN_LINK = 'CU'\nINFO_SIGN_HASH = 'CH'\nINFO_SIGN_SESS = 'CT'\nINFO_REQURED = [INFO_PRODUCT, INFO_IMAGE_LINK, INFO_IMAGE_HASH, INFO_IMAGE_SESS, INFO_SIGN_LINK, INFO_SIGN_HASH, INFO_SIGN_SESS]\n\n# Use -2 for better resize stability on Windows\nTERMINAL_MARGIN = 2\n\ndef run_query(url, headers, post=None, raw=False):\n    if post is not None:\n        data = '\\n'.join(entry + '=' + post[entry] for entry in post).encode()\n    else:\n        data = None\n    req = Request(url=url, headers=headers, data=data)\n    try:\n        response = urlopen(req)\n        if raw:\n            return response\n        return dict(response.info()), response.read()\n    except HTTPError as e:\n        print(f'ERROR: \"{e}\" when connecting to {url}')\n        sys.exit(1)\n\n\ndef generate_id(id_type, id_value=None):\n    return id_value or ''.join(random.choices(string.hexdigits[:16].upper(), k=id_type))\n\n\ndef product_mlb(mlb):\n    return '00000000000' + mlb[11:15] + '00'\n\n\ndef mlb_from_eeee(eeee):\n    if len(eeee) != 4:\n        print('ERROR: Invalid EEEE code length!')\n        sys.exit(1)\n\n    return f'00000000000{eeee}00'\n\n\n# zhangyoufu https://gist.github.com/MCJack123/943eaca762730ca4b7ae460b731b68e7#gistcomment-3061078 2021-10-08\nApple_EFI_ROM_public_key_1 = 0xn\nChunkListHeader = struct.Struct('<4sIBBBxQQQ')\nassert ChunkListHeader.size == 0x24\n\nChunk = struct.Struct('<I32s')\nassert Chunk.size == 0x24\n\n\ndef verify_chunklist(cnkpath):\n    with open(cnkpath, 'rb') as f:\n        hash_ctx = hashlib.sha256()\n        data = f.read(ChunkListHeader.size)\n        hash_ctx.update(data)\n        magic, header_size, file_version, chunk_method, signature_method, chunk_count, chunk_offset, signature_offset = ChunkListHeader.unpack(data)\n        assert magic == b'CNKL'\n        assert header_size == ChunkListHeader.size\n        assert file_version == 1\n        assert chunk_method == 1\n        assert signature_method in [1, 2]\n        assert chunk_count > 0\n        assert chunk_offset == 0x24\n        assert signature_offset == chunk_offset + Chunk.size * chunk_count\n        for _ in range(chunk_count):\n            data = f.read(Chunk.size)\n            hash_ctx.update(data)\n            chunk_size, chunk_sha256 = Chunk.unpack(data)\n            yield chunk_size, chunk_sha256\n        digest = hash_ctx.digest()\n        if signature_method == 1:\n            data = f.read(256)\n            assert len(data) == 256\n            signature = int.from_bytes(data, 'little')\n            plaintext = int(f'0x1{\"f\"*404}003031300d060960864801650304020105000420{\"0\"*64}', 16) | int.from_bytes(digest, 'big')\n            assert pow(signature, 0x10001, Apple_EFI_ROM_public_key_1) == plaintext\n        elif signature_method == 2:\n            data = f.read(32)\n            assert data == digest\n            raise RuntimeError('Chunklist missing digital signature')\n        else:\n            raise NotImplementedError\n        assert f.read(1) == b''\n\n\ndef get_session(args):\n    headers = {\n        'Host': 'osrecovery.apple.com',\n        'Connection': 'close',\n        'User-Agent': 'InternetRecovery/1.0',\n    }\n\n    headers, _ = run_query('http://osrecovery.apple.com/', headers)\n\n    if args.verbose:\n        print('Session headers:')\n        for header in headers:\n            print(f'{header}: {headers[header]}')\n\n    for header in headers:\n        if header.lower() == 'set-cookie':\n            cookies = headers[header].split('; ')\n            for cookie in cookies:\n                return cookie if cookie.startswith('session=') else ...\n\n    raise RuntimeError('No session in headers ' + str(headers))\n\n\ndef get_image_info(session, bid, mlb=MLB_ZERO, diag=False, os_type='default', cid=None):\n    headers = {\n        'Host': 'osrecovery.apple.com',\n        'Connection': 'close',\n        'User-Agent': 'InternetRecovery/1.0',\n        'Cookie': session,\n        'Content-Type': 'text/plain',\n    }\n\n    post = {\n        'cid': generate_id(TYPE_SID, cid),\n        'sn': mlb,\n        'bid': bid,\n        'k': generate_id(TYPE_K),\n        'fg': generate_id(TYPE_FG)\n    }\n\n    if diag:\n        url = 'http://osrecovery.apple.com/InstallationPayload/Diagnostics'\n    else:\n        url = 'http://osrecovery.apple.com/InstallationPayload/RecoveryImage'\n        post['os'] = os_type\n\n    headers, output = run_query(url, headers, post)\n\n    output = output.decode('utf-8')\n    info = {}\n    for line in output.split('\\n'):\n        try:\n            key, value = line.split(': ')\n            info[key] = value\n        except KeyError:\n            continue\n        except ValueError:\n            continue\n\n    for k in INFO_REQURED:\n        if k not in info:\n            raise RuntimeError(f'Missing key {k}')\n\n    return info\n\n\ndef save_image(url, sess, filename='', directory=''):\n    purl = urlparse(url)\n    headers = {\n        'Host': purl.hostname,\n        'Connection': 'close',\n        'User-Agent': 'InternetRecovery/1.0',\n        'Cookie': '='.join(['AssetToken', sess])\n    }\n\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    if filename == '':\n        filename = os.path.basename(purl.path)\n    if filename.find(os.sep) >= 0 or filename == '':\n        raise RuntimeError('Invalid save path ' + filename)\n\n    print(f'Saving {url} to {directory}{os.sep}{filename}...')\n\n    with open(os.path.join(directory, filename), 'wb') as fh:\n        response = run_query(url, headers, raw=True)\n        headers = dict(response.headers)\n        totalsize = -1\n        for header in headers:\n            if header.lower() == 'content-length':\n                totalsize = int(headers[header])\n                break\n        size = 0\n        oldterminalsize = 0\n        while True:\n            chunk = response.read(2**20)\n            if not chunk:\n                break\n            fh.write(chunk)\n            size += len(chunk)\n            try:\n                terminalsize = max(os.get_terminal_size().columns - TERMINAL_MARGIN, 0)\n            except OSError:\n                terminalsize = 80\n            if oldterminalsize != terminalsize:\n                print(f'\\r{\"\":<{terminalsize}}', end='')\n                oldterminalsize = terminalsize\n            if totalsize > 0:\n                progress = size / totalsize\n                barwidth = terminalsize // 3\n                print(f'\\r{size / (2**20):.1f}/{totalsize / (2**20):.1f} MB ', end='')\n                if terminalsize > 55:\n                    print(f'|{\"=\" * int(barwidth * progress):<{barwidth}}|', end='')\n                print(f' {progress*100:.1f}% downloaded', end='')\n            else:\n                # Fallback if Content-Length isn't available\n                print(f'\\r{size / (2**20)} MB downloaded...', end='')\n            sys.stdout.flush()\n        print('\\nDownload complete!')\n\n    return os.path.join(directory, os.path.basename(filename))\n\n\ndef verify_image(dmgpath, cnkpath):\n    print('Verifying image with chunklist...')\n\n    with open(dmgpath, 'rb') as dmgf:\n        for cnkcount, (cnksize, cnkhash) in enumerate(verify_chunklist(cnkpath), 1):\n            terminalsize = max(os.get_terminal_size().columns - TERMINAL_MARGIN, 0)\n            print(f'\\r{f\"Chunk {cnkcount} ({cnksize} bytes)\":<{terminalsize}}', end='')\n            sys.stdout.flush()\n            cnk = dmgf.read(cnksize)\n            if len(cnk) != cnksize:\n                raise RuntimeError(f'Invalid chunk {cnkcount} size: expected {cnksize}, read {len(cnk)}')\n            if hashlib.sha256(cnk).digest() != cnkhash:\n                raise RuntimeError(f'Invalid chunk {cnkcount}: hash mismatch')\n        if dmgf.read(1) != b'':\n            raise RuntimeError('Invalid image: larger than chunklist')\n        print('\\nImage verification complete!')\n\n\ndef action_download(args):\n    \"\"\"\n    Reference information for queries:\n\n    Recovery latest:\n    cid=3076CE439155BA14\n    sn=...\n    bid=Mac-E43C1C25D4880AD6\n    k=4BE523BB136EB12B1758C70DB43BDD485EBCB6A457854245F9E9FF0587FB790C\n    os=latest\n    fg=B2E6AA07DB9088BE5BDB38DB2EA824FDDFB6C3AC5272203B32D89F9D8E3528DC\n\n    Recovery default:\n    cid=4A35CB95FF396EE7\n    sn=...\n    bid=Mac-E43C1C25D4880AD6\n    k=0A385E6FFC3DDD990A8A1F4EC8B98C92CA5E19C9FF1DD26508C54936D8523121\n    os=default\n    fg=B2E6AA07DB9088BE5BDB38DB2EA824FDDFB6C3AC5272203B32D89F9D8E3528DC\n\n    Diagnostics:\n    cid=050C59B51497CEC8\n    sn=...\n    bid=Mac-E43C1C25D4880AD6\n    k=37D42A8282FE04A12A7D946304F403E56A2155B9622B385F3EB959A2FBAB8C93\n    fg=B2E6AA07DB9088BE5BDB38DB2EA824FDDFB6C3AC5272203B32D89F9D8E3528DC\n    \"\"\"\n\n    session = get_session(args)\n    info = get_image_info(session, bid=args.board_id, mlb=args.mlb, diag=args.diagnostics, os_type=args.os_type)\n    if args.verbose:\n        print(info)\n    print(f'Downloading {info[INFO_PRODUCT]}...')\n    cnkname = '' if args.basename == '' else args.basename + '.chunklist'\n    cnkpath = save_image(info[INFO_SIGN_LINK], info[INFO_SIGN_SESS], cnkname, args.outdir)\n    dmgname = '' if args.basename == '' else args.basename + '.dmg'\n    dmgpath = save_image(info[INFO_IMAGE_LINK], info[INFO_IMAGE_SESS], dmgname, args.outdir)\n    try:\n        verify_image(dmgpath, cnkpath)\n        return 0\n    except Exception as err:\n        if isinstance(err, AssertionError) and str(err) == '':\n            try:\n                tb = sys.exc_info()[2]\n                while tb.tb_next:\n                    tb = tb.tb_next\n                err = linecache.getline(tb.tb_frame.f_code.co_filename, tb.tb_lineno, tb.tb_frame.f_globals).strip()\n            except Exception:\n                err = \"Invalid chunklist\"\n        print(f'\\rImage verification failed. ({err})')\n        return 1\n\n\ndef action_selfcheck(args):\n    \"\"\"\n    Sanity check server logic for recovery:\n\n    if not valid(bid):\n        return error()\n    ppp = get_ppp(sn)\n    if not valid(ppp):\n        return latest_recovery(bid = bid)             # Returns newest for bid.\n    if valid(sn):\n        if os == 'default':\n            return default_recovery(sn = sn, ppp = ppp) # Returns oldest for sn.\n        else:\n            return latest_recovery(sn = sn, ppp = ppp)  # Returns newest for sn.\n    return default_recovery(ppp = ppp)              # Returns oldest.\n    \"\"\"\n\n    session = get_session(args)\n    valid_default = get_image_info(session, bid=RECENT_MAC, mlb=MLB_VALID, diag=False, os_type='default')\n    valid_latest = get_image_info(session, bid=RECENT_MAC, mlb=MLB_VALID, diag=False, os_type='latest')\n    product_default = get_image_info(session, bid=RECENT_MAC, mlb=MLB_PRODUCT, diag=False, os_type='default')\n    product_latest = get_image_info(session, bid=RECENT_MAC, mlb=MLB_PRODUCT, diag=False, os_type='latest')\n    generic_default = get_image_info(session, bid=RECENT_MAC, mlb=MLB_ZERO, diag=False, os_type='default')\n    generic_latest = get_image_info(session, bid=RECENT_MAC, mlb=MLB_ZERO, diag=False, os_type='latest')\n\n    if args.verbose:\n        print(valid_default)\n        print(valid_latest)\n        print(product_default)\n        print(product_latest)\n        print(generic_default)\n        print(generic_latest)\n\n    if valid_default[INFO_PRODUCT] == valid_latest[INFO_PRODUCT]:\n        # Valid MLB must give different default and latest if this is not a too new product.\n        print(f'ERROR: Cannot determine any previous product, got {valid_default[INFO_PRODUCT]}')\n        return 1\n\n    if product_default[INFO_PRODUCT] != product_latest[INFO_PRODUCT]:\n        # Product-only MLB must give the same value for default and latest.\n        print(f'ERROR: Latest and default do not match for product MLB, got {product_default[INFO_PRODUCT]} and {product_latest[INFO_PRODUCT]}')\n        return 1\n\n    if generic_default[INFO_PRODUCT] != generic_latest[INFO_PRODUCT]:\n        # Zero MLB always give the same value for default and latest.\n        print(f'ERROR: Generic MLB gives different product, got {generic_default[INFO_PRODUCT]} and {generic_latest[INFO_PRODUCT]}')\n        return 1\n\n    if valid_latest[INFO_PRODUCT] != generic_latest[INFO_PRODUCT]:\n        # Valid MLB must always equal generic MLB.\n        print(f'ERROR: Cannot determine unified latest product, got {valid_latest[INFO_PRODUCT]} and {generic_latest[INFO_PRODUCT]}')\n        return 1\n\n    if product_default[INFO_PRODUCT] != valid_default[INFO_PRODUCT]:\n        # Product-only MLB can give the same value with valid default MLB.\n        # This is not an error for all models, but for our chosen code it is.\n        print(f'ERROR: Valid and product MLB give mismatch, got {product_default[INFO_PRODUCT]} and {valid_default[INFO_PRODUCT]}')\n        return 1\n\n    print('SUCCESS: Found no discrepancies with MLB validation algorithm!')\n    return 0\n\n\ndef action_verify(args):\n    \"\"\"\n    Try to verify MLB serial number.\n    \"\"\"\n    session = get_session(args)\n    generic_latest = get_image_info(session, bid=RECENT_MAC, mlb=MLB_ZERO, diag=False, os_type='latest')\n    uvalid_default = get_image_info(session, bid=args.board_id, mlb=args.mlb, diag=False, os_type='default')\n    uvalid_latest = get_image_info(session, bid=args.board_id, mlb=args.mlb, diag=False, os_type='latest')\n    uproduct_default = get_image_info(session, bid=args.board_id, mlb=product_mlb(args.mlb), diag=False, os_type='default')\n\n    if args.verbose:\n        print(generic_latest)\n        print(uvalid_default)\n        print(uvalid_latest)\n        print(uproduct_default)\n\n    # Verify our MLB number.\n    if uvalid_default[INFO_PRODUCT] != uvalid_latest[INFO_PRODUCT]:\n        print(f'SUCCESS: {args.mlb} MLB looks valid and supported!' if uvalid_latest[INFO_PRODUCT] == generic_latest[INFO_PRODUCT] else f'SUCCESS: {args.mlb} MLB looks valid, but probably unsupported!')\n        return 0\n\n    print('UNKNOWN: Run selfcheck, check your board-id, or try again later!')\n\n    # Here we have matching default and latest products. This can only be true for very\n    # new models. These models get either latest or special builds.\n    if uvalid_default[INFO_PRODUCT] == generic_latest[INFO_PRODUCT]:\n        print(f'UNKNOWN: {args.mlb} MLB can be valid if very new!')\n        return 0\n    if uproduct_default[INFO_PRODUCT] != uvalid_default[INFO_PRODUCT]:\n        print(f'UNKNOWN: {args.mlb} MLB looks invalid, other models use product {uproduct_default[INFO_PRODUCT]} instead of {uvalid_default[INFO_PRODUCT]}!')\n        return 0\n    print(f'UNKNOWN: {args.mlb} MLB can be valid if very new and using special builds!')\n    return 0\n\n\ndef action_guess(args):\n    \"\"\"\n    Attempt to guess which model does this MLB belong.\n    \"\"\"\n\n    mlb = args.mlb\n    anon = mlb.startswith('000')\n\n    with open(args.board_db, 'r', encoding='utf-8') as fh:\n        db = json.load(fh)\n\n    supported = {}\n\n    session = get_session(args)\n\n    generic_latest = get_image_info(session, bid=RECENT_MAC, mlb=MLB_ZERO, diag=False, os_type='latest')\n\n    for model in db:\n        try:\n            if anon:\n                # For anonymous lookup check when given model does not match latest.\n                model_latest = get_image_info(session, bid=model, mlb=MLB_ZERO, diag=False, os_type='latest')\n\n                if model_latest[INFO_PRODUCT] != generic_latest[INFO_PRODUCT]:\n                    if db[model] == 'current':\n                        print(f'WARN: Skipped {model} due to using latest product {model_latest[INFO_PRODUCT]} instead of {generic_latest[INFO_PRODUCT]}')\n                    continue\n\n                user_default = get_image_info(session, bid=model, mlb=mlb, diag=False, os_type='default')\n\n                if user_default[INFO_PRODUCT] != generic_latest[INFO_PRODUCT]:\n                    supported[model] = [db[model], user_default[INFO_PRODUCT], generic_latest[INFO_PRODUCT]]\n            else:\n                # For normal lookup check when given model has mismatching normal and latest.\n                user_latest = get_image_info(session, bid=model, mlb=mlb, diag=False, os_type='latest')\n\n                user_default = get_image_info(session, bid=model, mlb=mlb, diag=False, os_type='default')\n\n                if user_latest[INFO_PRODUCT] != user_default[INFO_PRODUCT]:\n                    supported[model] = [db[model], user_default[INFO_PRODUCT], user_latest[INFO_PRODUCT]]\n\n        except Exception as e:\n            print(f'WARN: Failed to check {model}, exception: {e}')\n\n    if len(supported) > 0:\n        print(f'SUCCESS: MLB {mlb} looks supported for:')\n        for model in supported.items():\n            print(f'- {model}, up to {supported[model][0]}, default: {supported[model][1]}, latest: {supported[model][2]}')\n        return 0\n\n    print(f'UNKNOWN: Failed to determine supported models for MLB {mlb}!')\n    return None\n\n\n# https://stackoverflow.com/questions/2280334/shortest-way-of-creating-an-object-with-arbitrary-attributes-in-python\nclass gdata:\n    \"\"\"\n    A string to make pylint happy ;)\n    \"\"\"\n    def __init__(self, **kwargs):\n        self.__dict__.update(kwargs)\n\ndef main():\n    parser = argparse.ArgumentParser(description='Gather recovery information for Macs')\n    parser.add_argument('--action', choices=['download', 'selfcheck', 'verify', 'guess'], default='',\n                        help='Action to perform: \"download\" - performs recovery downloading,'\n                        ' \"selfcheck\" checks whether MLB serial validation is possible, \"verify\" performs'\n                        ' MLB serial verification, \"guess\" tries to find suitable mac model for MLB.')\n    parser.add_argument('-o', '--outdir', type=str, default='com.apple.recovery.boot',\n                        help='customise output directory for downloading, defaults to com.apple.recovery.boot')\n    parser.add_argument('-n', '--basename', type=str, default='',\n                        help='customise base name for downloading, defaults to remote name')\n    parser.add_argument('-b', '--board-id', type=str, default=RECENT_MAC,\n                        help=f'use specified board identifier for downloading, defaults to {RECENT_MAC}')\n    parser.add_argument('-m', '--mlb', type=str, default=MLB_ZERO,\n                        help=f'use specified logic board serial for downloading, defaults to {MLB_ZERO}')\n    parser.add_argument('-e', '--code', type=str, default='',\n                        help='generate product logic board serial with specified product EEEE code')\n    parser.add_argument('-os', '--os-type', type=str, default='default', choices=['default', 'latest'],\n                        help=f'use specified os type, defaults to default {MLB_ZERO}')\n    parser.add_argument('-diag', '--diagnostics', action='store_true', help='download diagnostics image')\n    parser.add_argument('-s', '--shortname', type=str, default='',\n                        help='available options: high-sierra, mojave, catalina, big-sur, monterey, ventura, sonoma, sequoia')\n    parser.add_argument('-v', '--verbose', action='store_true', help='print debug information')\n    parser.add_argument('-db', '--board-db', type=str, default=os.path.join(SELF_DIR, 'boards.json'),\n                        help='use custom board list for checking, defaults to boards.json')\n\n    args = parser.parse_args()\n\n    if args.code != '':\n        args.mlb = mlb_from_eeee(args.code)\n\n    if len(args.mlb) != 17:\n        print('ERROR: Cannot use MLBs in non 17 character format!')\n        sys.exit(1)\n\n    if args.action == 'download':\n        return action_download(args)\n    if args.action == 'selfcheck':\n        return action_selfcheck(args)\n    if args.action == 'verify':\n        return action_verify(args)\n    if args.action == 'guess':\n        return action_guess(args)\n\n    # No action specified, so present a download menu instead\n    # https://github.com/acidanthera/OpenCorePkg/blob/master/Utilities/macrecovery/boards.json\n    # https://github.com/corpnewt/gibMacOS\n    products = [\n            {\"name\": \"High Sierra (10.13)\", \"b\": \"Mac-7BA5B2D9E42DDD94\", \"m\": \"00000000000J80300\", \"short\": \"high-sierra\"},\n            {\"name\": \"Mojave (10.14)\", \"b\": \"Mac-7BA5B2DFE22DDD8C\", \"m\": \"00000000000KXPG00\", \"short\": \"mojave\"},\n            {\"name\": \"Catalina (10.15)\", \"b\": \"Mac-00BE6ED71E35EB86\", \"m\": \"00000000000000000\", \"short\": \"catalina\"},\n            {\"name\": \"Big Sur (11.7)\", \"b\": \"Mac-2BD1B31983FE1663\", \"m\": \"00000000000000000\", \"short\": \"big-sur\"},\n            {\"name\": \"Monterey (12.6)\", \"b\": \"Mac-B809C3757DA9BB8D\", \"m\": \"00000000000000000\", \"os_type\": \"latest\", \"short\": \"monterey\"},\n            {\"name\": \"Ventura (13) - RECOMMENDED\", \"b\": \"Mac-4B682C642B45593E\", \"m\": \"00000000000000000\", \"os_type\": \"latest\", \"short\": \"ventura\"},\n            {\"name\": \"Sonoma (14) \", \"b\": \"Mac-827FAC58A8FDFA22\", \"m\": \"00000000000000000\", \"short\": \"sonoma\"},\n            {\"name\": \"Sequoia (15) \", \"b\": \"Mac-7BA5B2D9E42DDD94\", \"m\": \"00000000000000000\", \"short\": \"sequoia\", \"os_type\": \"latest\"},\n    ]\n    for index, product in enumerate(products):\n        name = product[\"name\"]\n        print('%s. %12s' % (index + 1, name))\n    # test locally using args.shortname = 'mojave'\n    if not args.shortname or args.shortname == '':\n        answer = input('\\nChoose a product to download (1-%s): ' % len(products))\n        try:\n            index = int(answer) - 1\n            if index < 0:\n                raise ValueError\n        except (ValueError, IndexError):\n            pass\n    else:\n        index = 0\n        for product in products:\n            if args.shortname == product['short']:\n                break\n            else:\n                index = index+1\n    product = products[index]\n    try:\n        os_type = product[\"os_type\"]\n    except:\n        os_type = \"default\"\n    args = gdata(mlb = product[\"m\"], board_id = product[\"b\"], diagnostics =\n            False, os_type = os_type, verbose=False, basename=\"\", outdir=\".\")\n    action_download(args)\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n"
        },
        {
          "name": "kernel-debugging-notes.txt",
          "type": "blob",
          "size": 1.3466796875,
          "content": "1. How do I symbolicate kernel panic traces?\n\nJust add keepsyms=1 to either the Kernel Flags setting in /Library/Preferences/SystemConfiguration/com.apple.Boot.plist,\nor to the boot-args NVRAM variable. Reboot, and any subsequent panics will be automatically symbolicated. You can run\nmangled C++ symbols through the c++filt command line utility to get the proper C++ function signatures.\n\n$ sudo nvram boot-args=\"-v keepsyms=1\"\n\nThanks for Phil Dennis-Jordan for this great tip.\n\n2. Debugging a AVX related crash which occurs at bootup.\n\n$ nm /System/Library/Extensions/corecrypto.kext/Contents/MacOS/corecrypto | grep avx\n0000000000001840 T _ccsha256_vng_intel_avx1_compress\n0000000000036708 T _ccsha256_vng_intel_avx2_compress\n0000000000026973 T _ccsha512_vng_intel_avx1_compress\n00000000000327cb T _ccsha512_vng_intel_avx2_compress\n000000000001d960 T _gcmDecrypt_avx1\n000000000001c980 T _gcmEncrypt_avx1\n\n$ gdb /System/Library/Extensions/corecrypto.kext/Contents/MacOS/corecrypto\n(gdb) x/16i 0x0000000000001840\n   0x1840:\tpush   %rbp\n   0x1841:\tmov    %rsp,%rbp\n   0x1844:\tpush   %rbx\n   0x1845:\tpush   %r12\n   0x1847:\tpush   %r13\n   0x1849:\tpush   %r14\n   0x184b:\tpush   %r15\n   0x184d:\tsub    $0x168,%rsp\n   0x1854:\tlea    0x60(%rsp),%rax\n   0x1859:\tand    $0xffffffffffffffe0,%rax\n   0x185d:\tvmovdqa %ymm0,(%rax)  <--- the crash occurs here due to lack of \"xsave\" support\n"
        },
        {
          "name": "kvm.conf",
          "type": "blob",
          "size": 0.1201171875,
          "content": "options kvm_intel nested=1\noptions kvm_intel emulate_invalid_guest_state=0\noptions kvm ignore_msrs=1 report_ignored_msrs=0\n"
        },
        {
          "name": "kvm_amd.conf",
          "type": "blob",
          "size": 0.0712890625,
          "content": "options kvm_amd nested=1\noptions kvm ignore_msrs=1 report_ignored_msrs=0\n"
        },
        {
          "name": "macOS-Cloud.md",
          "type": "blob",
          "size": 0.1298828125,
          "content": "Add notes from Constantin Jacob.\n\nNote: This pretty much violates everything hardware-wise in the macOS EULA that\none could violate.\n"
        },
        {
          "name": "macOS-libvirt-Catalina.xml",
          "type": "blob",
          "size": 9.330078125,
          "content": "<?xml version='1.0' encoding='UTF-8'?>\n<domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'>\n<!--\n\tmacOS libvirt XML configuration.\n\n\tRun \"virt-xml-validate macOS-libvirt-Catalina.xml\" to validate this file.\n\n\tTo install this file, you may place it at ~/.config/libvirt/qemu/\n\tand run: virsh define macOS-libvirt.xml.\n\n\tThis configuration has been tested in Ubuntu 20.04 with stock QEMU-KVM.\n\n\tMove/rename images and loader/nvmram files and paths as you wish.\n\n\t!!! Don't forget to replace CHANGEME with your values !!!\n\n\tAdjust memory and currentMemory to 3145728 if you want only 3 GiB.\n\n\tConsider removing some cpu features if your hardware lacks support.\n\n\tReplace spice with vnc if you prefer it.\n\n\tCurrent network configuration is a local bridge (192.168.12x.x).\n\tChange it to if you prefer a public bridge instead:\n\t\tChange interface to <interface type='user'>\n\t\tand remove the <source bridge='virbr0'/>\n\t\tOr use virt-manager to edit this line instead of virsh edit.\n\n\tNote: Default configuration caused severe clock problems\n\tunder Fedora 27 w/ i7-5820K. This is because Darwin uses\n\ttsc (time since last tick) for time, and for me did not\n\tfall back to rtc in the event of a clock mismatch with\n\tlibvirt's default time source. Therefore we must explicitly\n\tgive the clock a tsc timer for kvm to pass to the guest.\n\tSee comments on the <kvm> and <clock> attributes.\n-->\n  <name>macOS</name>\n  <uuid>2aca0dd6-cec9-4717-9ab2-0b7b13d111c3</uuid>\n  <title>macOS</title>\n  <memory unit='KiB'>4194304</memory>\n  <currentMemory unit='KiB'>4194304</currentMemory>\n  <vcpu placement='static'>4</vcpu>\n  <os>\n    <type arch='x86_64' machine='pc-q35-4.2'>hvm</type>\n    <!-- We don't need patched OVMF anymore when using latest OpenCore, stock one is okay -->\n    <loader readonly='yes' type='pflash'>/home/CHANGEME/OSX-KVM/OVMF_CODE.fd</loader>\n    <nvram>/home/CHANGEME/OSX-KVM/OVMF_VARS.fd</nvram>\n  </os>\n  <features>\n    <acpi/>\n    <apic/>\n  </features>\n  <clock offset='utc'>\n    <timer name='rtc' tickpolicy='catchup'/>\n    <timer name='pit' tickpolicy='delay'/>\n    <timer name='hpet' present='no'/>\n  </clock>\n  <on_poweroff>destroy</on_poweroff>\n  <on_reboot>restart</on_reboot>\n  <on_crash>restart</on_crash>\n  <devices>\n    <emulator>/usr/bin/qemu-system-x86_64</emulator>\n    <disk type='file' device='disk'>\n      <driver name='qemu' type='qcow2' cache='writeback' io='threads'/>\n      <source file='/home/CHANGEME/OSX-KVM/OpenCore/OpenCore.qcow2'/>\n      <target dev='sda' bus='sata'/>\n      <boot order='2'/>\n      <address type='drive' controller='0' bus='0' target='0' unit='0'/>\n    </disk>\n    <disk type='file' device='disk'>\n      <driver name='qemu' type='qcow2' cache='writeback' io='threads'/>\n      <source file='/home/CHANGEME/OSX-KVM/mac_hdd_ng.img'/>\n      <target dev='sdb' bus='sata'/>\n      <boot order='1'/>\n      <address type='drive' controller='0' bus='0' target='0' unit='1'/>\n    </disk>\n    <disk type=\"file\" device=\"disk\">\n      <driver name=\"qemu\" type=\"raw\" cache=\"writeback\"/>\n      <source file=\"/home/CHANGEME/OSX-KVM/BaseSystem.img\"/>\n      <target dev=\"sdc\" bus=\"sata\"/>\n      <boot order=\"3\"/>\n      <address type=\"drive\" controller=\"0\" bus=\"0\" target=\"0\" unit=\"2\"/>\n    </disk>\n    <controller type='sata' index='0'>\n      <address type='pci' domain='0x0000' bus='0x00' slot='0x1f' function='0x2'/>\n    </controller>\n    <controller type='pci' index='0' model='pcie-root'/>\n    <controller type='pci' index='1' model='pcie-root-port'>\n      <model name='pcie-root-port'/>\n      <target chassis='1' port='0x8'/>\n      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x0' multifunction='on'/>\n    </controller>\n    <controller type='pci' index='2' model='pcie-root-port'>\n      <model name='pcie-root-port'/>\n      <target chassis='2' port='0x9'/>\n      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>\n    </controller>\n    <controller type='pci' index='3' model='pcie-root-port'>\n      <model name='pcie-root-port'/>\n      <target chassis='3' port='0xa'/>\n      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x2'/>\n    </controller>\n    <controller type='pci' index='4' model='pcie-root-port'>\n      <model name='pcie-root-port'/>\n      <target chassis='4' port='0xb'/>\n      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x3'/>\n    </controller>\n    <controller type='pci' index='5' model='pcie-root-port'>\n      <model name='pcie-root-port'/>\n      <target chassis='5' port='0xc'/>\n      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x4'/>\n    </controller>\n    <controller type='pci' index='6' model='pcie-root-port'>\n      <model name='pcie-root-port'/>\n      <target chassis='6' port='0xd'/>\n      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x5'/>\n    </controller>\n    <controller type='pci' index='7' model='pcie-root-port'>\n      <model name='pcie-root-port'/>\n      <target chassis='7' port='0xe'/>\n      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x6'/>\n    </controller>\n    <controller type='virtio-serial' index='0'>\n      <address type='pci' domain='0x0000' bus='0x02' slot='0x00' function='0x0'/>\n    </controller>\n    <controller type='usb' index='0' model='ich9-ehci1'>\n      <address type='pci' domain='0x0000' bus='0x00' slot='0x07' function='0x7'/>\n    </controller>\n    <controller type='usb' index='0' model='ich9-uhci1'>\n      <master startport='0'/>\n      <address type='pci' domain='0x0000' bus='0x00' slot='0x07' function='0x0' multifunction='on'/>\n    </controller>\n    <controller type='usb' index='0' model='ich9-uhci2'>\n      <master startport='2'/>\n      <address type='pci' domain='0x0000' bus='0x00' slot='0x07' function='0x1'/>\n    </controller>\n    <controller type='usb' index='0' model='ich9-uhci3'>\n      <master startport='4'/>\n      <address type='pci' domain='0x0000' bus='0x00' slot='0x07' function='0x2'/>\n    </controller>\n    <!-- Make sure you put your nic in bus 0x0 and slot 0x0y(y is numeric), this will make nic built-in and apple-store work-->\n    <interface type=\"bridge\">\n      <mac address=\"52:54:00:e6:85:40\"/>\n      <source bridge=\"virbr0\"/>\n      <model type=\"vmxnet3\"/>\n      <address type=\"pci\" domain=\"0x0000\" bus=\"0x00\" slot=\"0x00\" function=\"0x0\"/>\n    </interface>\n    <serial type='pty'>\n      <target type='isa-serial' port='0'>\n        <model name='isa-serial'/>\n      </target>\n    </serial>\n    <console type='pty'>\n      <target type='serial' port='0'/>\n    </console>\n    <channel type='unix'>\n      <target type='virtio' name='org.qemu.guest_agent.0'/>\n      <address type='virtio-serial' controller='0' bus='0' port='1'/>\n    </channel>\n    <graphics type='spice' autoport='yes'>\n      <listen type='address'/>\n    </graphics>\n    <video>\n      <model type=\"virtio\" heads=\"1\" primary=\"yes\"/>\n    </video>\n    <!-- If you wanna passthrough GPU, make sure the gfx and audio are in the same bus (like 0x01) but different function (0x00 and 0x01)-->\n    <!-- <hostdev mode='subsystem' type='pci' managed='yes'>\n      <driver name='vfio'/>\n      <source>\n        <address domain='0x0000' bus='0x2d' slot='0x00' function='0x0'/>\n      </source>\n      <rom file='/mnt/disks/backups/BIOS/RX580/Ellesmere.rom'/>\n      <address type='pci' domain='0x0000' bus='0x01' slot='0x00' function='0x0' multifunction='on'/>\n    </hostdev>\n    <hostdev mode='subsystem' type='pci' managed='yes'>\n      <driver name='vfio'/>\n      <source>\n        <address domain='0x0000' bus='0x2d' slot='0x00' function='0x1'/>\n      </source>\n      <address type='pci' domain='0x0000' bus='0x01' slot='0x00' function='0x1'/>\n    </hostdev> -->\n    <!-- If you wanna passthrough onboard audio(like 30:00.4), make sure you put it in bus 0x00 and slot 0x0y(y is numeric), otherwise AppleALC won't recognized it -->\n    <!-- <hostdev mode='subsystem' type='pci' managed='yes'>\n      <driver name='vfio'/>\n      <source>\n        <address domain='0x0000' bus='0x30' slot='0x00' function='0x4'/>\n      </source>\n      <address type='pci' domain='0x0000' bus='0x00' slot='0x08' function='0x0'/>\n    </hostdev> -->\n    <memballoon model='none'/>\n  </devices>\n  <!-- Note: Enable the next line when SELinux is enabled -->\n  <!-- seclabel type='dynamic' model='selinux' relabel='yes'/> -->\n  <qemu:commandline>\n    <qemu:arg value='-device'/>\n    <qemu:arg value='isa-applesmc,osk=ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc'/>\n    <qemu:arg value='-smbios'/>\n    <qemu:arg value='type=2'/>\n    <qemu:arg value='-usb'/>\n    <qemu:arg value='-device'/>\n    <qemu:arg value='usb-tablet'/>\n    <qemu:arg value='-device'/>\n    <qemu:arg value='usb-kbd'/>\n    <qemu:arg value='-cpu'/>\n    <qemu:arg value='Penryn,kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,+ssse3,+sse4.2,+popcnt,+avx,+aes,+xsave,+xsaveopt,check'/>\n    <!-- <qemu:arg value='Penryn,vendor=GenuineIntel,+hypervisor,+invtsc,kvm=on,+fma,+avx,+avx2,+aes,+ssse3,+sse4_2,+popcnt,+sse4a,+bmi1,+bmi2'/> -->\n    <!-- If you wanna use cpu host-passthrough mode, uncomments below-->\n    <!-- <qemu:arg value='host,vendor=GenuineIntel,+hypervisor,+invtsc,kvm=on,+fma,+avx,+avx2,+aes,+ssse3,+sse4_2,+popcnt,+sse4a,+bmi1,+bmi2'/> -->\n    <!-- If you wanna use cpu emulating mode like Skylake-Server, uncomments below-->\n    <!-- <qemu:arg value='Skylake-Server,vendor=GenuineIntel,+hypervisor,+invtsc,kvm=on,+fma,+avx,+avx2,+aes,+ssse3,+sse4_2,+popcnt,+sse4a,+bmi1,+bmi2'/> -->\n  </qemu:commandline>\n</domain>\n"
        },
        {
          "name": "networking-qemu-kvm-howto.txt",
          "type": "blob",
          "size": 5.515625,
          "content": "There are two main ways to set up networking on OS X / macOS, as it does not\nfunction with what QEMU defaults to for network settings:\n\n-----------------------------------\nUser Mode Networking (Easier Setup)\n-----------------------------------\n\nBy default, QEMU uses user mode networking (SLiRP). This networking mode is the\nslowest and is not visible via the outside network, but requires no host-side\nsetup, so it's perfect if you just want internet but don't care about latency\nor about connecting to the VM from an external source.\n\nIn order to do this, change the line in your qemu-system-x86_64 command (found\nin boot-macOS.sh) to the following:\n\n-netdev user,id=net0 -device network_adapter,netdev=net0,id=net0,mac=52:54:00:c9:18:27 \\\n\nOnce you set network_adapter to the preferred adapter, no further setup is required; your\ninternet should Just Werk™ in your virtual machine!\n\nFor further information on detailed configuration options, see QEMU's\ndocumentation on networking ( http://wiki.qemu.org/Documentation/Networking )\n\nHere is the list of network adapters supported by macOS,\n\ne1000-82545em - The problem that we run into here is that OS X is nitpicky\nabout what emulated networking devices it is willing to accept. The\ne1000-82545em is a known adapter that can be used on pretty much any version of\nMacOS.\n\nTo use this adapter, replace network_adapter with e1000-82545em\n\nvmxnet3,virtio-net-pci - An alternative solution to e1000. Instead of emulating\nthe e1000, these are paravirtualized NICs, which can allow for better\nperformance (in theory). The only catch is that the you need to have a recent\nversion of MacOS (10.11 or later).\n\nTo use these adapters, replace network_adapter with vmxnet3 or virtio-net-pci.\n\n\nSSH access in user mode\n-----------------------\n\nAlthough the IP address of the VM is not visible to the outside, it is possible\nto use port forwarding to access the VM's ports from your host, eg the SSH port.\nTo achieve that:\n\n- In MacOS, turn on SSH under System Preferences > Sharing > Remote Login.\n- Modify the startup script to include `-netdev user,id=net0,hostfwd=tcp::10022-:22`\n- Use `ssh localhost -p10022` to get in.\n\nYou can use the same for VNC.\n\n-----------------------------------\nTap Networking (Better Performance)\n-----------------------------------\n\nInstalling \"virt-manager\" automagically creates the \"virbr0\" local private bridge :-)\n\nsudo apt-get install uml-utilities virt-manager\n\nsudo ip tuntap add dev tap0 mode tap\nsudo ip link set tap0 up promisc on\nsudo brctl addif virbr0 tap0\n\nsudo ip link set dev virbr0 up  # as needed\nsudo ip link set dev tap0 master virbr0\n\nNote: If `virbr0` network interface is not present on your system, it may\nhave been deactivated. Try enabling it by using the following commands,\n\nvirsh net-start default\nvirsh net-autostart default\n\nAdd \"-netdev tap,id=net0,ifname=tap0,script=no,downscript=no -device e1000-82545em,netdev=net0,id=net0,mac=52:54:00:c9:18:27 \\\"\nto your qemu-system-x86_64 command.\n\n\nUsing an rc.local startup script\n--------------------------------\n\nI have the following commands present in `/etc/rc.local`.\n\n#!/usr/bin/env bash\nsudo ip tuntap add dev tap0 mode tap\nsudo ip link set tap0 up promisc on\nsudo ip link set dev virbr0 up\nsudo ip link set dev tap0 master virbr0\n\nThis has been enough for me so far.\n\nNote: You may need to enable the `rc.local` functionality manually on modern\nUbuntu versions. Check out the [notes](notes.md) included in this repository\nfor details.\n\n\nQEMU networking tip\n-------------------\n\n# printf '52:54:00:AB:%02X:%02X\\n' $((RANDOM%256)) $((RANDOM%256))  # generates QEMU compatible mac addresses!\n\n\n------------------\nBridged Networking\n------------------\n\nQEMU defaults to using NAT for its guests. It has a built-in DHCP server that\nprovides addresses from the 192.168.12x.0 subnet. However, this configuration\nmakes file sharing, printer sharing, and other common networking activities\nharder to use in a home network.\n\nBridged networking allows your QEMU guest to get an address on the same subnet\nas the host computer. For example, many home networks let the wireless router\nhandle IP assignment via DHCP. Here are the steps for setting up the bridge.\n\nTo setup bridged networking from the command line, refer to this documentation\nat the Ubuntu website. https://help.ubuntu.com/community/KVM/Networking\n\nUltimately, the script for booting the QEMU guest will need a line similar to\nthe following to enable bridged networking in the guest:\n\n    -netdev bridge,id=net0,br=virbr0,\"helper=/usr/lib/qemu/qemu-bridge-helper\"\n\nOn some systems the `qemu-bridge-helper` file has incorrect permissions. For it\nto work, it needs to be setuid root. This can be accomplished with this command:\n\n    $ sudo chmod u+s /usr/lib/qemu/qemu-bridge-helper\n\nNote that this is sometimes viewed as a security hole. Be careful and understand\nwhat you are doing before running this command.\n\n\n-----------------------\nBridged Networking 2023\n-----------------------\n\nsudo mkdir -p /etc/qemu\n\nsudo cp bridge.conf /etc/qemu\n\nsudo chmod u+s /usr/lib/qemu/qemu-bridge-helper\n\nsudo ip link add name br0 type bridge\n\nsudo ip link set dev br0 up\n\nsudo ip link set enx00e04c680a67 master br0 && sudo dhclient br0\n\n$ brctl show\nbridge name\tbridge id\t\tSTP enabled\tinterfaces\nbr0\t\t8000.ead0ee60b7c1\tyes\t\tenx00e04c680a67\n\t\t\t\t\t\t\ttap0\nUse the following network device in scripts:\n\n-netdev bridge,id=net0,br=br0,\"helper=/usr/lib/qemu/qemu-bridge-helper\" -device virtio-net-pci,netdev=net0,id=net0,mac=00:16:CB:00:11:34\n\nAlso see https://dortania.github.io/OpenCore-Post-Install/universal/iservices.html to tweak the config.plist file.\n"
        },
        {
          "name": "notes.md",
          "type": "blob",
          "size": 23,
          "content": "### macOS Sonoma support\n\n- Change `Penryn` to `Haswell-noTSX` in OpenCore-Boot.sh file.\n\n- This worked fine even on a `AMD Ryzen 9 5900HS` CPU.\n\n### App Store problems\n\nDo you see the \"Your device or computer could not be verified\" message when you\ntry to login to the App Store? If yes, here are the steps to fix it.\n\n- Make sure that your wired ethernet connection is called \"en0\" (and not \"en1\"\n  or something else). Use \"ifconfig\" command to verify this.\n\n- If the wired ethernet connection is not called \"en0\", then then go to Network\n  in System Preferences and delete all the devices, and apply the changes.\n  Next, go to the console and type in `sudo rm /Library/Preferences/SystemConfiguration/NetworkInterfaces.plist`.\n  Finally reboot, and then use the App Store without problems.\n\nThis fix was found by `Glnk2012` of https://www.tonymacx86.com/ site.\n\nAlso tweaking the `smbios.plist` file can help (?).\n\n### Resolution in Ventura\n\nUpdate: Switching to `vmware-svga` device seems to have \"fixed\" the following\nproblem!\n\n...\n\nFrom https://superuser.com: macOS Ventura screen resolution settings includes\nonly 3 predefined options but choosing any of them breaks my installation (I'm\ngetting black screen with only small portion visible).\n\nProcess to reset the resolution (using that small visible) display portion:\n\nLog in (in a blind fashion!), open Terminal and run the following commands:\n\n```\nsudo rm /Library/Preferences/com.apple.windowserver.plist\n\nrm ~/Library/Preferences/ByHost/com.apple.windowserver*\n\nsudo reboot\n```\n\nReboot the macOS Ventura VM.\n\nNote: Running `displayplacer \"id:FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF mode:10\"`\ndoesn't help with this resolution problem on macOS Ventura.\n\n### Change resolution in OpenCore\n\n```diff\ndiff --git a/OpenCore/config.plist b/OpenCore/config.plist\nindex 4754e8c..489570f 100644\n--- a/OpenCore/config.plist\n+++ b/OpenCore/config.plist\n@@ -692,7 +692,7 @@\n                        <key>Resolution</key>\n-                       <string>Max</string>\n+                       <string>1920x1080</string>\n```\n\nEnsure that the OVMF resolution is set equal to resolution set in your OpenCore\nqcow2 file (default is 1024x768). This can be done via the OVMF menu, which you\ncan reach with a press of the ESC button during the OVMF boot logo (before\nOpenCore boot screen appears). In the OVMF menu settings, set Device Manager ->\nOVMF Platform Configuration -> Change Preferred Resolution for Next Boot to the\ndesired value (default is 1024x768). Commit changes and exit the OVMF menu.\n\nNote: The macOS VM's resolution can be changed via `Settings -> Displays`\noption easily.\n\nNote: After changing the `config.plist` file, please regenerate the\n`OpenCore.qcow2` file using the [instructions](./OpenCore/README.md#notes)\nincluded in this repository.\n\n### GPU passthrough notes\n\nThese steps will need to be adapted for your particular setup. A host machine\nwith IOMMU support is required. Consult [this Arch Wiki article](https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF)\nfor general-purpose guidance and details.\n\nI am running Ubuntu 22.04.4 LTS on Intel i5-6500 + ASUS Z170-AR motherboard +\nAMD RX 6600 GPU (April 2024).\n\n- Blacklist the required kernel modules.\n\n  ```\n  $ cat /etc/modprobe.d/blacklist.conf\n  ... <existing stuff>\n\n  blacklist amdgpu\n  blacklist radeon\n  ```\n\n- Find details of the PCIe devices to passthrough.\n\n  ```\n  $ lspci -nnk | grep AMD\n  01:00.0 VGA compatible controller [0300]: Advanced Micro Devices, Inc. [AMD/ATI] Ellesmere [Radeon RX 470/480/570/570X/580/580X/590] [1002:67df] (rev ef)\n  01:00.1 Audio device [0403]: Advanced Micro Devices, Inc. [AMD/ATI] Ellesmere HDMI Audio [Radeon RX 470/480 / 570/580/590] [1002:aaf0]\n  ```\n\n- Enable IOMMU support and configure VFIO.\n\n  Append the given line to `GRUB_CMDLINE_LINUX_DEFAULT` in `/etc/default/grub`.\n\n  ##### Intel CPU Systems\n\n  `iommu=pt intel_iommu=on vfio-pci.ids=1002:67df,1002:aaf0 kvm.ignore_msrs=1 video=vesafb:off,efifb:off`\n\n  ##### AMD CPU Systems\n\n  `iommu=pt amd_iommu=on <remaining-line-from-above...>`\n\n- Tweak module configuration a bit according to the following output (thanks to Mathias Hueber).\n\n  ```\n  $ cat /etc/modprobe.d/vfio.conf\n  options vfio-pci ids=1002:67df,1002:aaf0 disable_vga=1\n  softdep radeon pre: vfio-pci\n  softdep amdgpu pre: vfio-pci\n  softdep nouveau pre: vfio-pci\n  softdep drm pre: vfio-pci\n  ```\n\n- Update GRUB, initramfs, and then reboot.\n\n  ```\n  sudo update-grub2\n\n  sudo update-initramfs -k all -u\n  ```\n\n- In the BIOS setup, set the `Primary Display` to `IGFX` (aka CPU graphics / onboard graphics).\n\n  Tip: Update the BIOS!\n\n- Verify that the IOMMU (\"VT-d\" for Intel) is enabled, and `vfio-pci` is\n  working as expected. Verify that the expected devices are using `vfio-pci` as\n  their kernel driver.\n\n  ```\n  $ dmesg | grep -i iommu\n  [    0.076879] DMAR: IOMMU enabled\n  [    0.183732] DMAR-IR: IOAPIC id 2 under DRHD base  0xfed91000 IOMMU 1\n  [    0.330654] iommu: Default domain type: Passthrough (set via kernel command line)\n  [    0.489615] pci 0000:00:00.0: Adding to iommu group 0\n  [    0.489627] pci 0000:00:01.0: Adding to iommu group 1\n  [    0.489634] pci 0000:00:02.0: Adding to iommu group 2\n  [    0.489643] pci 0000:00:14.0: Adding to iommu group 3\n  ```\n\n  ```\n  $ dmesg | grep vfio\n  [    0.526198] vfio-pci 0000:01:00.0: vgaarb: changed VGA decodes: olddecodes=io+mem,decodes=io+mem:owns=io+mem\n  [    0.543768] vfio_pci: add [1002:67df[ffffffff:ffffffff]] class 0x000000/00000000\n  [    0.563765] vfio_pci: add [1002:aaf0[ffffffff:ffffffff]] class 0x000000/00000000\n  [    3.384597] vfio-pci 0000:01:00.0: vgaarb: changed VGA decodes: olddecodes=io+mem,decodes=io+mem:owns=io+mem\n  ```\n\n  ```\n  $ lspci -nkk -d 1002:67df\n  01:00.0 0300: 1002:67df (rev ef)\n          Subsystem: 1da2:e366\n          Kernel driver in use: vfio-pci\n          Kernel modules: amdgpu\n  ```\n\n  ```\n  $ ./scripts/list_iommu_groups.sh\n  IOMMU Group 0:\n          00:00.0 Host bridge [0600]: Intel Corporation Xeon E3-1200 v5/E3-1500 v5/6th Gen Core Processor Host Bridge/DRAM Registers [8086:191f] (rev 07)\n  IOMMU Group 1:\n          00:01.0 PCI bridge [0604]: Intel Corporation Xeon E3-1200 v5/E3-1500 v5/6th Gen Core Processor PCIe Controller (x16) [8086:1901] (rev 07)\n          01:00.0 VGA compatible controller [0300]: Advanced Micro Devices, Inc. [AMD/ATI] Ellesmere [Radeon RX 470/480/570/570X/580/580X/590] [1002:67df] (rev ff)\n          01:00.1 Audio device [0403]: Advanced Micro Devices, Inc. [AMD/ATI] Ellesmere HDMI Audio [Radeon RX 470/480 / 570/580/590] [1002:aaf0] (rev ff)\n   ```\n\n- Fix permissions for the `/dev/vfio/1` device (modify as needed):\n\n  ```\n  sudo cp vfio-kvm.rules /etc/udev/rules.d/vfio-kvm.rules\n\n  sudo udevadm control --reload\n  sudo udevadm trigger\n  ```\n\n- Open `/etc/security/limits.conf` file and add the following lines:\n\n  ```\n  @kvm            soft    memlock         unlimited\n  @kvm            hard    memlock         unlimited\n  @libvirt        soft    memlock         unlimited\n  @libvirt        hard    memlock         unlimited\n  ```\n\n  Thanks to `Heiko Sieger` for this solution.\n\n- Confirm the contents of `boot-passthrough.sh` and run it to boot macOS with\n  GPU passthrough.\n\n- To reuse the keyboard and mouse devices from the host, setup \"Automatic\n  login\" in System Preferences in macOS and configure Synergy software.\n\nNote: On `Pop!_OS`, use the `kernelstub` command to change the kernel boot\narguments.\n\nNote 2: Use [AMD VBFlash](https://www.techpowerup.com/download/ati-atiflash/)\nto dump the AMD GPU bios, and pass on to QEMU. This is especially required if\nyour AMD GPU is not starting up properly (resulting in \"no signal\" on the\nmonitor).\n\nTested GPUs: Sapphire AMD RX 6600 (RECOMMENDED!), ZOTAC GeForce GT 710 DDR3 (<=\nBig Sur), Sapphire Radeon RX 570.\n\nUPDATE: Project sponsors get access to the `Private OSX-KVM repository`, and\ndirect support. This private repository has a playbook to automate 95% of this\nwork in a rugged, consistent manner.\n\n[Link to a list of supported GPUs](https://dortania.github.io/GPU-Buyers-Guide/modern-gpus/amd-gpu.html).\n\n### USB passthrough notes\n\nThese steps will need to be adapted for your particular setup.\n\n- Isolate the passthrough PCIe devices with vfio-pci, with the help of `lspci\n  -nnk` command.\n\n  ```\n  $ lspci -nnk\n  ...\n  03:00.0 USB controller: ASMedia ASM1142 USB 3.1 Host Controller [1b21:1242]\n  ```\n\n  Add `1b21:1242` to `GRUB_CMDLINE_LINUX_DEFAULT` in `/etc/default/grub` file\n  in the required format. See `GPU passthrough notes` (above) for details.\n\n- Update initramfs, and then reboot.\n\n  ```\n  sudo update-initramfs -k all -u\n  ```\n\n- Use the helper scripts to isolate the USB controller.\n\n  ```\n  $ scripts/lsgroup.sh\n  ### Group 7 ###\n      00:1c.0 PCI bridge: Intel Corporation Sunrise ...\n  ### Group 15 ###\n      06:00.0 Audio device: Creative Labs Sound Core3D ...\n  ### Group 5 ###\n      00:17.0 SATA controller: Intel Corporation Sunrise ...\n  ### Group 13 ###\n      03:00.0 USB controller: ASMedia ASM1142 USB 3.1 Host Controller\n  ```\n\n  ```\n  scripts/vfio-group.sh 13\n  ```\n\n- Add `-device vfio-pci,host=03:00.0,bus=pcie.0` line to `boot-passthrough.sh`.\n\n- Boot the VM, and devices attached to the ASMedia USB controller should just work under macOS.\n\n[Here is a link to a list of recommended USB PCIe cards](http://blog.greggant.com/posts/2018/05/07/definitive-mac-pro-upgrade-guide.html).\n\n### Synergy Notes\n\n- Get Synergy from https://sourceforge.net/projects/synergy-stable-builds.\n\n  I installed \"synergy-v1.8.8-stable-MacOSX-x86_64.dmg\" on the macOS guest and\n  configured it as a client.\n\n  For automatically starting Synergy on macOS, add Synergy to \"Login Items\",\n  System Preferences -> Users & Groups -> Select your user account -> Login Items\n  -> Add a login item\n\n- On the Linux host machine, install \"synergy-v1.8.8-stable-Linux-x86_64.deb\"\n  or newer, configure `~/.synergy.conf` and run `synergys` command.\n\n- The included `.synergy.conf` will need to be adapted according to your setup.\n\n### Virtual Sound Device\n\nhttps://github.com/chris1111/VoodooHDA-OC\n\nThis kext can be used on macOS 10.12 to macOS Big Sur 11.2 to get emulated\nsound card working. Do NOT mix VoodooHDA with AppleALC. You may want to\nconsider HDA passthrough or USB sound card passthrough or use HDMI audio\ninstead.\n\nNote: The emulated sound output can be choppy, and distorted. Use Sound Card /\nUSB Sound Card passthrough instead.\n\nNote: It seems that playback of Flash videos requires an audio device to be\npresent.\n\n![USB Sound Card](./screenshots/QHM623_USB_Sound_Card_1.jpg)\n\nThis cheap(est) USB sound card works pretty well on macOS *without* requiring\nUSB-controller-passthrough.\n\n### Building QEMU from source\n\nSee http://wiki.qemu-project.org/Hosts/Linux for help.\n\n```\n$ git clone https://github.com/qemu/qemu.git\n\n$ cd qemu\n\n$ mkdir build; cd build\n\n$ ../configure --prefix=/home/$(whoami)/QEMU --enable-trace-backend=simple \\\n    --enable-debug --target-list=x86_64-softmmu,aarch64-softmmu --audio-drv-list=pa\n\n$ make -j8; make install\n```\n\n### Connect iPhone / iPad to macOS guest\n\niDevices can be passed through in two ways: USB or USB OTA.\n\nUSB OTA:\n\nhttps://github.com/corellium/usbfluxd\n\nhttps://github.com/EthanArbuckle/usbfluxd-usage\n\nVFIO USB Passthrough:\n\nhttps://github.com/Silfalion/Iphone_docker_osx_passthrough\n\n### Exposing AES-NI instructions to macOS\n\nAdd `+aes` argument to the `-cpu` option in `boot-macOS.sh` file.\n\n``` diff\ndiff --git a/boot-macOS.sh b/boot-macOS.sh\nindex 5948b8a..3acc123 100755\n--- a/boot-macOS.sh\n+++ b/boot-macOS.sh\n@@ -18,7 +18,7 @@\n # Use \"-device usb-tablet\" instead of \"-device usb-mouse\" for better mouse\n # behaviour. This requires QEMU >= 2.9.0.\n\n-qemu-system-x86_64 -enable-kvm -m 3072 -cpu Penryn,kvm=off,vendor=GenuineIntel \\\n+qemu-system-x86_64 -enable-kvm -m 3072 -cpu Penryn,kvm=off,vendor=GenuineIntel,+aes \\\n          -machine pc-q35-2.4 \\\n          -smp 4,cores=2 \\\n          -usb -device usb-kbd -device usb-mouse \\\n```\n\nOther host CPU features can be similarly exposed to the macOS guest.\n\nThe following command can be used on macOS to verify that AES-NI instructions are exposed,\n\n```\nsysctl -a | grep machdep.cpu.features\n```\n\nOn machines with OpenSSL installed, the following two commands can be used to\ncheck AES-NI performance,\n\n```\nopenssl speed aes-128-cbc\n\nopenssl speed -evp aes-128-cbc  # uses AES-NI\n```\n\n### Exposing AVX and AVX2 instructions to macOS\n\nExposing AVX and AVX2 instructions to macOS requires support for these\ninstructions on the host CPU.\n\nThe `boot-clover.sh` script already exposes AVX and AVX2 instructions to the\nmacOS guest by default. Modify or comment out the `MY_OPTIONS` line in\n`boot-clover.sh` file in case you are having problems.\n\nTo enable AVX2, do the following change,\n\n`Clover boot menu -> Options -> Binaries patching -> Fake CPUID -> 0x0306C0  # for Haswell`\n\nFor details, see [this wiki](https://clover-wiki.zetam.org/Configuration/KernelAndKextPatches) page.\n\nOnce enabled, the following commands can be used to confirm the presence of AVX\nand AVX2 instructions on the macOS guest.\n\n```\n$ sysctl -a | grep avx\nhw.optional.avx2_0: 1\nhw.optional.avx1_0: 1\n\n$ sysctl -a | grep leaf7\nmachdep.cpu.leaf7_features: SMEP BMI1 AVX2 BMI2\nmachdep.cpu.leaf7_feature_bits: 424\n```\n\n### Enabling Hypervisor.Framework (Nested Virtualization / Docker for Mac / Android Emulator / etc)\n\nDocker for Mac, the Android Emulator and other virtualization products require\nnested virtualization in the form of the `Hypervisor Framework` to work on\nmacOS.\n\nUse the `sysctl kern.hv_support` (output `1` is good) command to check if\n`Hypervisor` is enabled within the macOS VM.\n\nIf `Hypervisor` is not enabled, check that you have the required CPU features.\nRun the `sysctl -a | grep machdep.cpu.features` command and look for the\npresence of `VMX` flag.\n\nIf the `VMX` flag is missing, use the following steps to enable it:\n\n- Make sure that `kvm_intel` module is loaded properly. This is documented in our\n  [main documentation](./README.md).\n\n- Make sure the VM is booted with VMX support passed through using one of the\n  two below strategies:\n\n  You may add `vmx,rdtscp` arguments to the `-cpu` option in `boot-macOS.sh`\n  file (easier option).\n\n  You may add `+vmx,` to the front of `MY_OPTIONS` in the boot script while\n  changing `-cpu Penryn` to `-cpu Skylake-Client` or [any other suitable supported CPU](https://manpages.ubuntu.com/manpages/disco/man7/qemu-cpu-models.7.html).\n\n  Note: Host CPU passthrough is troublesome and not generally recommended.\n\nNote: You may need to `Reset NVRAM` on the next reboot, but after that you\nshould see a `1` when you re-check `sysctl kern.hv_support`.\n\n### Using virtio-blk-pci with macOS\n\nNewer macOS (namely Mojave+) have support for some virtio drivers.\n\nThis can be enabled by applying the following change to `boot-macOS-NG.sh` to\nget some performance gain.\n\n```diff\n-         -device ide-hd,bus=sata.4,drive=MacHDD \\\n+         -device virtio-blk-pci,drive=MacHDD \\\n```\n\n### Permission problems with libvirt / qemu\n\n```\nsudo setfacl -m u:libvirt-qemu:rx /home/$USER\nsudo setfacl -R -m u:libvirt-qemu:rx /home/$USER/OSX-KVM\n\nIn general,\n\nsudo setfacl -R -m u:libvirt-qemu:rx <path>  # fix virt-manager perm problems\n```\n\n### Extract .pkg files\n\n- http://mackyle.github.io/xar/ is unmaintained and may fail for many `.pkg` files.\n\n- Use a modern version of `7-Zip` instead.\n\n  ```\n  7z l example.pkg\n\n  7z x example.pkg\n\n  gunzip -c <something>.pkg/Payload | cpio -i\n  ```\n\n### QEMU quits with `gtk initialization failed`\n\nAppend the `display=none` argument to your QEMU execution script (this has\nalready been done for `boot-passthrough.sh`)\n\n### ISO/DMG (`createinstallmedia` generated) install medium not detected\n\nIn OpenCore's `config.plist` and set `ScanPolicy` to `0` ([For more information, check the Dortania Troubleshooting Guide](https://dortania.github.io/OpenCore-Install-Guide/troubleshooting/troubleshooting.html#can-t-see-macos-partitions))\n\n### Attach physical drive to QEMU VM\n\nNote: If using NVMe, passing the controller may be a better option then passing it as a block device.\n\nRun `ls -la /dev/disk/by-id/` to get the unique mapping for the device you want to attach to the VM (like `sda`, `sdb`, `nvme0n1`, while you can attach only a partition like `sda1`, this is not recommended)\n\n```\n$ ls -la /dev/disk/by-id\ntotal 0\ndrwxr-xr-x 2 root root 360 Jul 29 08:14 .\ndrwxr-xr-x 8 root root 160 Jul 29 08:14 ..\nlrwxrwxrwx 1 root root   9 Jul 29 08:14 ata-ST2000FFFFF-FFFFFF_FFFFFFFF -> ../../sda\nlrwxrwxrwx 1 root root  10 Jul 29 08:14 ata-ST2000FFFFF-FFFFFF_FFFFFFFF-part1 -> ../../sda1\nlrwxrwxrwx 1 root root  10 Jul 29 08:14 ata-ST2000FFFFF-FFFFFF_FFFFFFFF-part2 -> ../../sda2\nlrwxrwxrwx 1 root root  13 Jul 29 08:14 nvme-eui.ffffffffffffffff -> ../../nvme0n1\nlrwxrwxrwx 1 root root  15 Jul 29 08:14 nvme-eui.ffffffffffffffff-part1 -> ../../nvme0n1p1\nlrwxrwxrwx 1 root root  15 Jul 29 08:14 nvme-eui.ffffffffffffffff-part2 -> ../../nvme0n1p2\nlrwxrwxrwx 1 root root  13 Jul 29 08:14 nvme-Samsung_SSD_960_EVO_512GB_FFFFFFFFFFFFFFF -> ../../nvme0n1\nlrwxrwxrwx 1 root root  15 Jul 29 08:14 nvme-Samsung_SSD_960_EVO_512GB_FFFFFFFFFFFFFFF-part1 -> ../../nvme0n1p1\nlrwxrwxrwx 1 root root  15 Jul 29 08:14 nvme-Samsung_SSD_960_EVO_512GB_FFFFFFFFFFFFFFF-part2 -> ../../nvme0n1p2\nlrwxrwxrwx 1 root root   9 Jul 29 08:14 wwn-0xffffffffffffffff -> ../../sda\nlrwxrwxrwx 1 root root  10 Jul 29 08:14 wwn-0xffffffffffffffff-part1 -> ../../sda1\nlrwxrwxrwx 1 root root  10 Jul 29 08:14 wwn-0xffffffffffffffff-part2 -> ../../sda2\n```\n\nThen edit your QEMU launch script and add these lines (adapt to it your\nhardware), then launch the script using `sudo` (because you cannot write to a\nblock device without `root` permissions)\n\n```\n-drive id=NVMeDrive,if=none,file=/dev/disk/by-id/nvme-Samsung_SSD_960_EVO_512GB_FFFFFFFFFFFFFFF,format=raw \\\n-device ide-hd,bus=sata.4,drive=NVMeDrive \\\n```\n\n### Run the Virtual Machine on Boot\n\n- Edit your QEMU launch script and set the absolute path of `OSX-KVM` as the\n  value of `REPO_PATH`\n\n- Edit `/etc/rc.local` and add the absolute path of the script (with or without\n  `sudo` depending on your needs) to the bottom of the script.\n\n### Setup SSH for internal remote access\n\nPresuming your network interface has a statically defined internal IP (on Ubuntu).\n\n```\nsudo apt install openssh-server -y\nsudo ufw allow ssh\nsudo update-rc.d ssh defaults\nsudo systemctl enable ssh\nsudo systemctl enable ssh.socket\nsudo systemctl enable ssh.service\n```\n\n### AMD GPU Notes\n\n- https://www.nicksherlock.com/2020/11/working-around-the-amd-gpu-reset-bug-on-proxmox/\n\n- Consider using CMMChris's [RadeonBoost.kext](https://forums.macrumors.com/threads/tired-of-low-geekbench-scores-use-radeonboost.2231366/)\n  for the RX480, RX580, RX590 and Radeon VII GPUs.\n\n### USB passthrough notes\n\n#### USB 3.0 flash drive\n\nThe following USB configuration works for usb passthrough of a USB 3.0 flash\ndrive to Fedora 25 guest.\n\n```\n-device nec-usb-xhci,id=xhci \\\n-device usb-host,bus=xhci.0,vendorid=0x0781,productid=0x5590 \\\n-usb -device usb-mouse,bus=usb-bus.0 -device usb-kbd,bus=usb-bus.0 \\\n...\n```\n\n#### Moto G3 phone\n\nThe following USB configuration works for usb passthrough of a Moto G3 phone to\nFedora 25 guest.\n\n```\n    -device usb-host,bus=usb-bus.0,vendorid=0x22b8,productid=0x002e \\\n    -usb -device usb-mouse,bus=usb-bus.0 -device usb-kbd,bus=usb-bus.0 \\\n    ...\n```\n\n#### CoolerMaster keyboard\n\nThe following USB configuration works for usb passthrough of a CoolerMaster\nkeyboard to macOS Sierra guest!\n\n```\n    -device usb-host,bus=usb-bus.0,vendorid=0x2516,productid=0x0004 \\\n    -usb -device usb-tablet,bus=usb-bus.0 -device usb-kbd,bus=usb-bus.0 \\\n    ...\n```\n\n#### Virtual USB disk\n\nThe following USB configuration works for attaching a virtual USB disk to macOS\nSierra guest. Use \"qemu-img\" to create \"disk.raw\" virtual disk.\n\n```\n    -drive if=none,id=usbstick,file=disk.raw,format=raw \\\n    -device usb-storage,bus=usb-bus.0,drive=usbstick \\\n    ...\n```\n\nHowever USB passthrough of EHCI, and XHCI (USB 3.0) devices does not work with\nmacOS Sierra. See https://bugs.launchpad.net/qemu/+bug/1509336 for\nconfirmation. According to this bug report, USB passthrough does not work with\nversions >= Mac OS X El Capitan guests.\n\nIt seems that this problem can be fixed by using OVMF + Clover.\n\nUpdate: OVMF + Clover doesn't help. It seems that macOS is missing the required\ndrivers for the EHCI, and XHCI controllers that are exposed by QEMU.\n\n### Generate macOS Mojave / Catalina installation ISO\n\n  This step currently needs to be run on an existing macOS system.\n\n  ```\n  cd ~/OSX-KVM/scripts\n\n  ./create_dmg_catalina.sh\n  ```\n\n### Tweaks for macOS\n\n- Disable `Energy Saver` in `System Preferences`.\n\n- Disable `Screen Saver` in `System Preferences -> Desktop & Screen Saver`.\n\n- Turn off indexing using the following command.\n\n  ```\n  sudo mdutil -a -i off\n  ```\n\n- Enable `Remote Login` (aka SSH) via `System Preferences -> Sharing`.\n\n### Snapshot Debugging Tips\n\n- Get `savevm` to work:\n\n  ```\n  (qemu) savevm\n  Error while writing VM state: No space left on device\n  ```\n\n  Ensure that you have plenty of free space in `/var/tmp` and `/`.\n\n  To use a separate storage location for storing snapshots, use the following\n  trick (from `zimbatm`):\n\n  ```\n  export TMPDIR=$PWD/tmp\n  ```\n\n### 'Fix' weird boot problems\n\n```\ncp OVMF_VARS-1024x768.fd.bak OVMF_VARS-1024x768.fd\n```\n\n### 'Fix' time drift problems\n\nRun the following command periodically from root's crontab:\n\n```\nsntp -S pool.ntp.org\n```\n\n### Pass through all CPU cores / threads\n\nmacOS requires a core count that is a power of 2, but some modern CPUs have odd\ncounts - like 6 cores and 12 threads.\n\nSo how can we harness the entire CPU in the VM?\n\nThere are strategies that mix smp/sockets/cores/threads/maxcpu arguments and\nuse odd socket counts to arrive at even core counts, and even let you specify\nthat some of the cores are hyperthreaded.\n\nSpecifically for the case of an Intel i7 processor with 6 cores and 12 total\nthreads, altering the boot script to contain these variables and the following\nmodified SMP line results in a full CPU core/thread pass through:\n\n```\nCPU_SOCKETS=\"3\"\nCPU_CORES=\"2\"\nCPU_THREADS=\"2\"\nCPU_TOTAL=\"12\"\n```\n\nThe `-smp line` should read something like the following:\n\n```\n-smp \"$CPU_TOTAL\",cores=\"$CPU_CORES\",sockets=\"$CPU_SOCKETS\",threads=\"$CPU_THREADS\",maxcpus=\"$CPU_TOTAL\"\n```\n\n### Troubles with iMessage\n\nCheck out [this Dortania article on this topic](https://dortania.github.io/OpenCore-Post-Install/universal/iservices.html#using-gensmbios).\n\n### Fix 'guest boots to UEFI shell' problem (stuck at startup.nsh problem)\n\nUse a fresh copy of the `OVMF_VARS-1024x768.fd` file.\n\n```\ngit checkout OVMF_VARS-1024x768.fd\n```\n\n### Enable rc.local functionality on modern Ubuntu versions\n\nCreate `/etc/rc.local` file with the following content, if it doesn't exist:\n\n```\n#!/bin/bash\n\necho \"Hello! :)\"\n\nexit 0\n```\n\nMake this file executable, if required:\n\n```\nsudo chmod +x /etc/rc.local\n```\n\nCreate `/etc/systemd/system/rc-local.service` with the following content,  if\nit doesn't exist:\n\n```\n[Unit]\nDescription=enable /etc/rc.local\nConditionPathExists=/etc/rc.local\n\n[Service]\nExecStart=/etc/rc.local start\nTimeoutSec=0\nStandardOutput=tty\nRemainAfterExit=yes\nSysVStartPriority=99\n\n[Install]\nWantedBy=multi-user.target\n```\n\nEnable `rc.local` systemd service:\n\n```\nsudo systemctl enable rc-local\n```\n\nThese notes are borrowed from various multiple internet resources.\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "reversing-notes.md",
          "type": "blob",
          "size": 16.2978515625,
          "content": "#### Problem\n\nOn a macOS virtual machine,\n\n```\n$ sudo /usr/bin/AssetCacheManagerUtil activate\nAssetCacheManagerUtil[] Failed to activate content caching: Error Domain=ACSMErrorDomain Code=5 \"virtual machine\"...\n```\n\nIt seems that the `Content Caching` functionality is not available when macOS\nis running in a virtual machine. How can we enable this feature on our macOS\nVM?\n\n\n#### April 2020 Update\n\nI was able to patch the Catalina 10.15.4 kernel to disable the VMM detection.\n\nOriginal function:\n\n![Original function](screenshots/macOS-kernel-patching-1.png)\n\nPatched function:\n\n![Patched function](screenshots/macOS-kernel-patching-2.png)\n\n\n```\nstatic int\ncpu_features SYSCTL_HANDLER_ARGS\n{\n    __unused struct sysctl_oid *unused_oidp = oidp;\n    __unused void *unused_arg1 = arg1;\n    __unused int unused_arg2 = arg2;\n    char buf[512];\n\n    buf[0] = '\\0';\n    // cpuid_get_feature_names(cpuid_features(), buf, sizeof(buf));\n    cpuid_get_feature_names(cpuid_features(), buf, sizeof(buf)); // NOP this <-- NOTE!\n\n    return SYSCTL_OUT(req, buf, strlen(buf) + 1);\n}\n\n...\n\"bsd/dev/i386/sysctl.c\" 980 lines --13%--\n```\n\nSee `bsd/dev/i386/sysctl.c 138: cpuid_get_feature_names(cpuid_features` too.\n\nUseful commands:\n\n```\nsudo mount -uw /\n\nsudo mv /System/Library/Kernels/kernel /System/Library/Kernels/kernel.bak\n\nsudo kextcache -i /\n```\n\nUpdate: Use `resources/kernel_autopatcher.py` to patch your kernels! :-)\n\n\n#### March 2020 Update\n\nUpdate: This approach causes the macOS VM to consume multiple CPU(s) 100% on\nthe host!\n\nSee `osfmk/i386/tsc.c 142: if (cpuid_vmm_present()) {` for details.\n\nInstead of trying to hack things from within the VM, we can turn off VMM\ndetection from the outside.\n\nSee [boot-macOS-Catalina.sh](./boot-macOS-Catalina.sh) to see how it is done.\nEssentially, we add `hypervisor=off,vmx=on,kvm=off` flags to the QEMU's CPU\nconfiguration.\n\nOnce this is done,\n\n```\n$ sysctl -a | grep VMM\n<nothing>\n\n$ sudo /usr/bin/AssetCacheManagerUtil activate\n2020-03-14 19:05:21.416 AssetCacheManagerUtil[1313:53576] Content caching activated.\n2020-03-14 19:05:21.417 AssetCacheManagerUtil[1313:53576] Restart devices to take advantage of content caching immediately\n\n$ sudo /usr/bin/AssetCacheManagerUtil status\n2020-03-14 19:10:31.154 AssetCacheManagerUtil[1362:54464] Content caching status: {\n    Activated = 1;\n    Active = 1;\n    CacheDetails =     {\n    };\n    CacheFree = 119663451136;\n    CacheLimit = 0;\n    CacheStatus = OK;\n    CacheUsed = 0;\n    Parents =     (\n    );\n    Peers =     (\n    );\n    PersonalCacheFree = 119663451136;\n    PersonalCacheLimit = 0;\n    PersonalCacheUsed = 0;\n    Port = 49363;\n    PrivateAddresses =     (\n        \"192.168.100.137\"\n    );\n    PublicAddress = \"11.XX.YY.ZZ\";\n    RegistrationStatus = 1;\n    RestrictedMedia = 0;\n    ServerGUID = \"XXX\";\n    StartupStatus = OK;\n    TotalBytesAreSince = \"2020-03-15 02:05:06 +0000\";\n    TotalBytesDropped = 0;\n    TotalBytesImported = 0;\n    TotalBytesReturnedToChildren = 0;\n    TotalBytesReturnedToClients = 0;\n    TotalBytesReturnedToPeers = 0;\n    TotalBytesStoredFromOrigin = 0;\n    TotalBytesStoredFromParents = 0;\n    TotalBytesStoredFromPeers = 0;\n}\n```\n\nw00t!\n\nI found this technique from [this article](https://superuser.com/questions/1387935/hiding-virtual-machine-status-from-guest-operating-system). Thanks!\n\nThis was tested on macOS Mojave 10.14.6 and on macOS Catalina 10.15.3.\n\n\n####  CPU flags\n\n```\n$ sysctl -a | grep VMM\nmachdep.cpu.features: FPU ... VMM PCID XSAVE OSXSAVE AVX1.0\n```\n\nTurning off `kvm=on` flag doesn't help in hiding the `VMM` flag.\n\nhttps://github.com/hjuutilainen/adminscripts/blob/master/check-if-virtual-machine.py\nuses the same trick to detect if macOS is running in a VM.\n\n\n#### VM detection code in macOS\n\nThis code was found in the `AssetCache` binary.\n\n```objective-c\nchar __cdecl -[ECConfig runningInVM](ECConfig *self, SEL a2)\n{\n  void *v2; // rax\n  void *v3; // r15\n  __int64 v4; // r13\n  size_t v5; // r12\n  __int64 v6; // r13\n  int *v7; // rax\n  char *v8; // rax\n  bool v9; // bl\n  __int64 v10; // r12\n  __int64 v11; // r12\n  int *v12; // rax\n  char *v13; // rax\n  __int64 v14; // rbx\n  size_t v15; // rcx\n  void *v16; // rax\n  void *v17; // r14\n  char result; // al\n  __int64 *v19; // [rsp+0h] [rbp-40h]\n  size_t v20; // [rsp+8h] [rbp-38h]\n  __int64 v21; // [rsp+10h] [rbp-30h]\n\n  v20 = 0LL;\n  *__error() = 0;\n  if ( sysctlbyname(\"machdep.cpu.features\", 0LL, &v20, 0LL, 0LL) || v20 - 1 > 0xF423F )\n  {\n    v10 = qword_100394620;\n    if ( (unsigned __int8)os_log_type_enabled(qword_100394620, 16LL) )\n    {\n      v11 = objc_retain(v10);\n      v12 = __error();\n      v13 = strerror(*v12);\n      *((_DWORD *)&v19 - 8) = 134218242;\n      *(__int64 **)((char *)&v19 - 28) = 0LL;\n      *((_WORD *)&v19 - 10) = 2080;\n      *(__int64 **)((char *)&v19 - 18) = (__int64 *)v13;\n      _os_log_error_impl(&_mh_execute_header, v11, 16LL, aSysctlMachdepC, &v19 - 4, 22LL);\n      objc_release(v11);\n      v9 = 0;\n      goto LABEL_21;\n    }\nLABEL_12:\n    v9 = 0;\n    goto LABEL_21;\n  }\n  v2 = malloc(v20);\n  v3 = v2;\n  if ( !v2 )\n  {\n    v14 = qword_100394620;\n    if ( (unsigned __int8)os_log_type_enabled(qword_100394620, 16LL) )\n    {\n      v15 = v20;\n      *((_DWORD *)&v19 - 4) = 134217984;\n      *(__int64 **)((char *)&v19 - 12) = (__int64 *)v15;\n      _os_log_error_impl(&_mh_execute_header, v14, 16LL, aOutOfMemoryLd, &v19 - 2, 12LL);\n      v9 = 0;\n      goto LABEL_21;\n    }\n    goto LABEL_12;\n  }\n  if ( sysctlbyname(\"machdep.cpu.features\", v2, &v20, 0LL, 0LL) )\n  {\n    v4 = qword_100394620;\n    if ( (unsigned __int8)os_log_type_enabled(qword_100394620, 16LL) )\n    {\n      v19 = (__int64 *)&v19;\n      v5 = v20;\n      v6 = objc_retain(v4);\n      v7 = __error();\n      v8 = strerror(*v7);\n      *((_DWORD *)&v19 - 8) = 134218242;\n      *(__int64 **)((char *)&v19 - 28) = (__int64 *)v5;\n      *((_WORD *)&v19 - 10) = 2080;\n      *(__int64 **)((char *)&v19 - 18) = (__int64 *)v8;\n      _os_log_error_impl(&_mh_execute_header, v6, 16LL, aSysctlMachdepC, &v19 - 4, 22LL);\n      objc_release(v6);\n    }\n    v9 = 0;\n  }\n  else\n  {\n    v16 = objc_msgSend(&OBJC_CLASS___NSString, \"stringWithUTF8String:\", v3);\n    v17 = (void *)objc_retainAutoreleasedReturnValue(v16);\n    v9 = (unsigned __int8)objc_msgSend(v17, \"isEqualToString:\", CFSTR(\"VMM\"))\n      || (unsigned __int8)objc_msgSend(v17, \"hasPrefix:\", CFSTR(\"VMM \"))\n      || (unsigned __int8)objc_msgSend(v17, \"hasSuffix:\", CFSTR(\" VMM\"))\n      || (unsigned __int8)objc_msgSend(v17, \"containsString:\", CFSTR(\" VMM \"));\n    objc_release(v17);\n  }\n  free(v3);\nLABEL_21:\n  result = __stack_chk_guard;\n  if ( __stack_chk_guard == v21 )\n    result = v9;\n  return result;\n}\n```\n\nThe following code was found in `AssetCacheManagerService` binary,\n\n```objective-c\nchar __cdecl -[ACMSManager _canActivateWithReason:](ACMSManager *self, SEL a2, id *a3)\n{\n  __int64 v3; // rax\n  id *v4; // r14\n  OS_os_log *v5; // rax\n  __int64 v6; // rbx\n  char v7; // bl\n  __int64 v8; // r15\n  struct objc_object *v9; // rax\n  void *v10; // r12\n  void *v11; // rax\n  OS_os_log *v12; // rax\n  __int64 v13; // rbx\n  char result; // al\n  __int64 v15; // [rsp+0h] [rbp-30h]\n\n  v15 = v3;\n  v4 = a3;\n  if ( (unsigned __int8)-[ACMSManager runningInVM](self, \"runningInVM\", v3) )\n  {\n    v5 = -[ACMSManager logHandle](self, \"logHandle\");\n    v6 = objc_retainAutoreleasedReturnValue(v5);\n    if ( (unsigned __int8)os_log_type_enabled(v6, 0LL) )\n    {\n      *((_WORD *)&v15 - 8) = 0;\n      _os_log_impl(&_mh_execute_header, v6, 0LL, aRunninginvm_2, &v15 - 2, 2LL);\n    }\n    objc_release(v6);\n    if ( v4 )\n    {\n      objc_retainAutorelease(CFSTR(\"virtual machine\"));\n      *v4 = (id)CFSTR(\"virtual machine\");\n    }\n    v7 = 0;\n  }\n  else\n  {\n    v8 = _kACSMSettingsDenyActivationKey;\n    v9 = -[ACMSManager _managedPrefSettingForKey:](self, \"_managedPrefSettingForKey:\", _kACSMSettingsDenyActivationKey);\n    v10 = (void *)objc_retainAutoreleasedReturnValue(v9);\n    v11 = objc_msgSend(&OBJC_CLASS___NSNumber, \"class\");\n    if ( !(unsigned __int8)objc_msgSend(v10, \"isKindOfClass:\", v11) )\n    {\n      objc_release(v10);\n      v10 = 0LL;\n    }\n    if ( (unsigned __int8)objc_msgSend(v10, \"boolValue\") == 1 )\n    {\n      v12 = -[ACMSManager logHandle](self, \"logHandle\");\n      v13 = objc_retainAutoreleasedReturnValue(v12);\n      if ( (unsigned __int8)os_log_type_enabled(v13, 0LL) )\n      {\n        *((_DWORD *)&v15 - 4) = 138412290;\n        *(__int64 *)((char *)&v15 - 12) = v8;\n        _os_log_impl(&_mh_execute_header, v13, 0LL, asc_10000E438, &v15 - 2, 12LL);\n      }\n      objc_release(v13);\n      if ( v4 )\n      {\n        objc_retainAutorelease(CFSTR(\"disabled by your system administrator\"));\n        *v4 = (id)CFSTR(\"disabled by your system administrator\");\n      }\n      v7 = 0;\n    }\n    else\n    {\n      v7 = 1;\n      if ( v4 )\n        *v4 = 0LL;\n    }\n    objc_release(v10);\n  }\n  result = __stack_chk_guard;\n  if ( __stack_chk_guard == v15 )\n    result = v7;\n  return result;\n}\n```\n\n```objective-c\nACMSManager *__cdecl -[ACMSManager init](ACMSManager *self, SEL a2)\n{\n...\n  if ( sysctlbyname(\"machdep.cpu.features\", 0LL, &v59, 0LL, 0LL) || v59 - 1 > 0xF423F )\n  {\n    v33 = objc_msgSend(v26, \"logHandle\");\n    v34 = objc_retainAutoreleasedReturnValue(v33);\n    if ( (unsigned __int8)os_log_type_enabled(v34, 0LL) )\n    {\n      v35 = *__error();\n      *((_DWORD *)&v45 - 8) = 134218240;\n      *(__int64 *)((char *)&v45 - 28) = 0LL;\n      *((_WORD *)&v45 - 10) = 1024;\n      *(_DWORD *)((char *)&v45 - 18) = v35;\n      _os_log_impl(&_mh_execute_header, v34, 0LL, aSysctlMachdepC, &v45 - 4, 18LL);\n    }\n    v36 = v34;\n  }\n  else\n  {\n    v27 = malloc(v59);\n    v28 = v27;\n    if ( v27 )\n    {\n      if ( sysctlbyname(\"machdep.cpu.features\", v27, &v59, 0LL, 0LL) )\n      {\n        v29 = objc_msgSend(v26, \"logHandle\");\n        v30 = objc_retainAutoreleasedReturnValue(v29);\n        if ( (unsigned __int8)os_log_type_enabled(v30, 0LL) )\n        {\n          v58 = &v45;\n          v31 = v59;\n          v32 = *__error();\n          *((_DWORD *)&v45 - 8) = 134218240;\n          *(__int64 *)((char *)&v45 - 28) = v31;\n          *((_WORD *)&v45 - 10) = 1024;\n          *(_DWORD *)((char *)&v45 - 18) = v32;\n          _os_log_impl(&_mh_execute_header, v30, 0LL, aSysctlMachdepC, &v45 - 4, 18LL);\n        }\n        objc_release(v30);\n        v2 = v60;\n      }\n      else\n      {\n        v40 = ((__int64 (__fastcall *)(void *, const char *, void *))objc_msgSend)(\n                &OBJC_CLASS___NSString,\n                \"stringWithUTF8String:\",\n                v28);\n        v41 = objc_retainAutoreleasedReturnValue(v40);\n        v42 = (void *)v41;\n        v43 = ((__int64 (__fastcall *)(__int64, const char *, const __CFString *))objc_msgSend)(\n                v41,\n                \"isEqualToString:\",\n                CFSTR(\"VMM\"));\n        v2 = v60;\n        if ( v43\n          || (unsigned __int8)objc_msgSend(v42, \"hasPrefix:\", CFSTR(\"VMM \"))\n          || (unsigned __int8)objc_msgSend(v42, \"hasSuffix:\", CFSTR(\" VMM\"))\n          || (unsigned __int8)objc_msgSend(v42, \"containsString:\", CFSTR(\" VMM \")) )\n        {\n          objc_msgSend(v26, \"setRunningInVM:\", 1LL);\n        }\n        objc_release(v42);\n      }\n      free(v28);\n      goto LABEL_23;\n    }\n    v37 = objc_msgSend(v26, \"logHandle\");\n    v38 = objc_retainAutoreleasedReturnValue(v37);\n    if ( (unsigned __int8)os_log_type_enabled(v38, 0LL) )\n    {\n      v39 = v59;\n      *((_DWORD *)&v45 - 4) = 134217984;\n      *(__int64 *)((char *)&v45 - 12) = v39;\n      _os_log_impl(&_mh_execute_header, v38, 0LL, aOutOfMemoryLd, &v45 - 2, 12LL);\n    }\n    v36 = v38;\n  }\n```\n\nThe `AssetCacheManagerService` binary seems to be our target.\n\nI ran the following queries to spot these binaries,\n\n```\n$ find / -name \"*AssetCache*\" -exec grep -i \"virtual machine\" {} \\; 2>/dev/null\n\n$ find / -exec grep -Hn \"ACSMErrorDomain\" {} \\; 2>/dev/null\n```\n\nRunning `http://newosxbook.com/tools/XPoCe2.html` indicates that\n`/usr/bin/AssetCacheManagerUtil` talks with `AssetCacheManagerService`.\n\n\nAfter attaching `lldb` to `AssetCacheManagerService`,\n\n```\n$ nm AssetCacheManagerService | grep VM\n000000010000bb97 t -[ACMSManager runningInVM]\n000000010000bbaa t -[ACMSManager setRunningInVM:]\n0000000100012928 s _OBJC_IVAR_$_ACMSManager._runningInVM\n\n(lldb) break set --name '-[ACMSManager setRunningInVM:]'\nBreakpoint 1: where = AssetCacheManagerService`-[ACMSManager setRunningInVM:], address = 0x0000000105bf5baa\n(lldb) break set --name '-[ACMSManager _canActivateWithReason:]'\nBreakpoint 2: where = AssetCacheManagerService`-[ACMSManager _canActivateWithReason:], address = 0x0000000105bf33f4\n(lldb) break set --name '-[ACMSManager runningInVM]'\nBreakpoint 3: where = AssetCacheManagerService`-[ACMSManager runningInVM], address = 0x0000000105bf5b97\nProcess 940 stopped\n* thread #3, queue = 'com.apple.AssetCacheManagerService.ACMSManager.workQueue', stop reason = breakpoint 2.1\n    frame #0: 0x0000000105bf33f4 AssetCacheManagerService`-[ACMSManager _canActivateWithReason:]\nAssetCacheManagerService`-[ACMSManager _canActivateWithReason:]:\n->  0x105bf33f4 <+0>: pushq  %rbp\n    0x105bf33f5 <+1>: movq   %rsp, %rbp\n    0x105bf33f8 <+4>: pushq  %r15\n    0x105bf33fa <+6>: pushq  %r14\nTarget 0: (AssetCacheManagerService) stopped.\n```\n\n\n#### Fix ideas\n\n* Patch `AssetCacheManagerService` binary?\n\n* Kernel patching - change the way `sysctlbyname` behaves?\n\n* Manipulate function execution using Frida?\n\n\n#### Patch #1\n\n![Patching runningInVM method](screenshots/ida-patch.png?raw=true \"Patching runningInVM()\")\n\nAfter this binary patch is applied, `activation` seems to be working ;)\n\n```\n$ sudo /usr/bin/AssetCacheManagerUtil activate\n... Failed to activate content caching: Error Domain=ACSMErrorDomain Code=3 \"already activated\"...\n```\n\nHowever, `sudo /usr/bin/AssetCacheManagerUtil status` fails to work just yet.\n\n```\n$ sudo /usr/bin/AssetCacheManagerUtil status\n2018-11-10 19:29:24.051 AssetCacheManagerUtil[419:3473] Content caching status: {\n    Activated = 0;\n    Active = 0;\n    CacheDetails =     {\n    };\n    CacheFree = 2000000000;\n    CacheLimit = 2000000000;\n    CacheStatus = OK;\n    CacheUsed = 0;\n    Parents =     (\n    );\n    Peers =     (\n    );\n    PersonalCacheFree = 2000000000;\n    PersonalCacheLimit = 2000000000;\n    PersonalCacheUsed = 0;\n    Port = 0;\n    RegistrationError = \"NOT_ACTIVATED\";\n    RegistrationResponseCode = 403;\n    RegistrationStatus = \"-1\";\n    RestrictedMedia = 0;\n    ServerGUID = \"XXX\";\n    StartupStatus = FAILED;\n    TotalBytesAreSince = \"2018-11-11 03:27:25 +0000\";\n    TotalBytesDropped = 0;\n    TotalBytesImported = 0;\n    TotalBytesReturnedToChildren = 0;\n    TotalBytesReturnedToClients = 0;\n    TotalBytesReturnedToPeers = 0;\n    TotalBytesStoredFromOrigin = 0;\n    TotalBytesStoredFromParents = 0;\n    TotalBytesStoredFromPeers = 0;\n}\n```\n\nIt seems more patching of the involved binaries (`/usr/libexec/AssetCache/AssetCache`) is required?\n\nNote: The `AssetCacheManagerService.dif` included in this repository was\nderived on a macOS 10.14.1 system.\n\n\n#### Patch #2\n\nChange the four `VMM` strings to `XXX` in the `/usr/libexec/AssetCache/AssetCache` binary.\n\n```\n$ pwd\n/usr/libexec/AssetCache\n\n$ sudo codesign --remove-signature AssetCache\n\n$ sudo /usr/bin/AssetCacheManagerUtil status\n2018-11-10 23:40:07.459 AssetCacheManagerUtil[973:21653] Content caching status: {\n    Activated = 1;\n    Active = 0;\n    CacheDetails =     {\n    };\n    CacheFree = 2000000000;\n    CacheLimit = 2000000000;\n    CacheStatus = OK;\n    CacheUsed = 0;\n    Parents =     (\n    );\n    Peers =     (\n    );\n    PersonalCacheFree = 2000000000;\n    PersonalCacheLimit = 2000000000;\n    PersonalCacheUsed = 0;\n    Port = 49181;\n    RegistrationStarted = \"2018-11-11 07:38:48 +0000\";\n    RegistrationStatus = 0;\n    RestrictedMedia = 0;\n    ServerGUID = \"XXX\";\n    StartupStatus = PENDING;\n    TotalBytesAreSince = \"2018-11-11 07:38:48 +0000\";\n    TotalBytesDropped = 0;\n    TotalBytesImported = 0;\n    TotalBytesReturnedToChildren = 0;\n    TotalBytesReturnedToClients = 0;\n    TotalBytesReturnedToPeers = 0;\n    TotalBytesStoredFromOrigin = 0;\n    TotalBytesStoredFromParents = 0;\n    TotalBytesStoredFromPeers = 0;\n}\n```\n\nA bit of progress I think ;)\n\nNote: However, it seems that more reversing and patching work is required.\n\n\n#### Questions\n\n* I haven't been able to see this `sysctlbyname(\"machdep.cpu.features\"...` call\n  being hit in `lldb`.\n\n  Maybe this call is executed once at program startup?\n\n* Can we use DTrace on macOS to trace execution of this call in a system-wide\n  fashion?\n\n\n### References\n\n* https://geosn0w.github.io/Debugging-macOS-Kernel-For-Fun/\n\n* https://www.hex-rays.com/wp-content/uploads/2019/12/xnu_debugger_primer.pdf\n"
        },
        {
          "name": "run-diagnostics.sh",
          "type": "blob",
          "size": 1.2353515625,
          "content": "#!/usr/bin/env bash\n\n# run-diagnostics.sh: checks common virtualization programs, modules and\n# options. Written by Foxlet <foxlet@furcode.co>. Modified by Dhiru for OSX-KVM\n# project.\n#\n# Note: This script is borrowed from https://github.com/foxlet/macOS-Simple-KVM\n# project.\n\necho \"== Distro Info ==\" >&2\nlsb_release -a 2>/dev/null\n\necho -e \"\\n== Loaded Modules ==\" >&2\nlsmod | grep kvm\nlsmod | grep amd_iommu\nlsmod | grep intel_iommu\nv=$(cat /sys/module/kvm/parameters/ignore_msrs)\nif [ \"$v\" != \"Y\" ]; then\n\techo -e \"\\nATTENTION: /sys/module/kvm/parameters/ignore_msrs setting seems to be incorrect!\"\nfi\n\necho -e \"\\n== Installed Binaries ==\" >&2\nif [ -x \"$(command -v qemu-system-x86_64)\" ]; then\n\tqemu-system-x86_64 --version\nelse\n\techo -e \"qemu is not installed.\" >&2\nfi\n\nif [ -x \"$(command -v virt-manager)\" ]; then\n\techo -e \"virt-manager version $(virt-manager --version)\"\nelse\n\techo -e \"virt-manager is not installed.\" >&2\nfi\n\nif [ -x \"$(command -v python)\" ]; then\n\tpython --version\nelse\n\techo -e \"python is not installed.\" >&2\nfi\n\necho -e \"\\n== Networking ==\" >&2\nip link show virbr0 >/dev/null 2>&1\nif [ \"$?\" != 0 ]; then\n\techo -e \"Interface virbr0 doesn't seem to exist. Check your networking configuration.\" >&2\nelse\n\techo -e \"Found virbr0. Good.\"\nfi\n"
        },
        {
          "name": "run_offline.md",
          "type": "blob",
          "size": 1.16796875,
          "content": "### How to run the Installation offline without macOS\n\n* Download the Ventura installer (`InstallAssistant.pkg`) from [https://mrmacintosh.com/macos-ventura-13-full-installer-database-download-directly-from-apple/](https://mrmacintosh.com/macos-ventura-13-full-installer-database-download-directly-from-apple/)\n\n* Create an ISO file `InstallAssistant.iso` with the `InstallAssistant.pkg` and\n  `scripts/run_offline.sh` files.\n\n  ```\n  mkisofs -allow-limited-size -l -J -r -iso-level 3 -V InstallAssistant -o InstallAssistant.iso path/to/InstallAssistant.pkg scripts/run_offline.sh\n  ```\n\n* Add the following to your `OpenCore-Boot.sh`\n\n  ```\n  -drive id=MacDVD,if=none,file=\"$REPO_PATH/InstallAssistant.iso\",format=raw\n  -device ide-hd,bus=sata.5,drive=MacDVD\n  ```\n\n* Run `./OpenCore-Boot.sh` from the terminal\n\n* Use the `Disk Utility` tool within the macOS installer to partition, and\n  format the virtual disk attached with name **macOS**\n\n* When completed, close `Disk Utility`\n\n* Go to the Terminal in your virtual machine, Click `Utilities`, select `Terminal`\n\n* Run the `sh /Volumes/InstallAssistant/run_offline.sh` command\n\n* Wait for a few minutes for the installation window to appear\n"
        },
        {
          "name": "screenshots",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "vfio-kvm.rules",
          "type": "blob",
          "size": 0.0439453125,
          "content": "SUBSYSTEM==\"vfio\", OWNER=\"root\", GROUP=\"kvm\"\n"
        }
      ]
    }
  ]
}