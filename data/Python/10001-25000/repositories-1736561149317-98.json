{
  "metadata": {
    "timestamp": 1736561149317,
    "page": 98,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sanic-org/sanic",
      "stars": 18194,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 0.7548828125,
          "content": "version: \"{branch}.{build}\"\n\nenvironment:\n  matrix:\n    - TOXENV: py36-no-ext\n      PYTHON: \"C:\\\\Python36-x64\"\n      PYTHON_VERSION: \"3.6.x\"\n      PYTHON_ARCH: \"64\"\n\n    - TOXENV: py37-no-ext\n      PYTHON: \"C:\\\\Python37-x64\"\n      PYTHON_VERSION: \"3.7.x\"\n      PYTHON_ARCH: \"64\"\n\n    - TOXENV: py38-no-ext\n      PYTHON: \"C:\\\\Python38-x64\"\n      PYTHON_VERSION: \"3.8.x\"\n      PYTHON_ARCH: \"64\"\n\n    # - TOXENV: py39-no-ext\n    #   PYTHON: \"C:\\\\Python39-x64\\\\python\"\n    #   PYTHONPATH: \"C:\\\\Python39-x64\"\n    #   PYTHON_VERSION: \"3.9.x\"\n    #   PYTHON_ARCH: \"64\"\n\ninit: SET \"PATH=%PYTHON%;%PYTHON%\\\\Scripts;%PATH%\"\n\ninstall:\n  - pip install tox\n\nbuild: off\n\ntest_script: tox\n\nnotifications:\n  - provider: Email\n    on_build_success: false\n    on_build_status_changed: false\n"
        },
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.3408203125,
          "content": "[run]\nbranch = True\nsource = sanic\nomit =\n    site-packages\n    sanic/__main__.py\n    sanic/server/legacy.py\n    sanic/compat.py\n    sanic/simple.py\n    sanic/utils.py\n    sanic/cli\n    sanic/pages\n\n[html]\ndirectory = coverage\n\n[report]\nexclude_lines =\n    no cov\n    no qa\n    noqa\n    NOQA\n    pragma: no cover\n    TYPE_CHECKING\nskip_empty = True\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01171875,
          "content": "* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.263671875,
          "content": "*~\n*.egg-info\n*.egg\n*.eggs\n*.pyc\n.coverage\n.coverage.*\ncoverage\ncoverage.xml\n.tox\nsettings.py\n.idea/*\n.cache/*\n.mypy_cache/\n.python-version\ndocs/_build/\ndocs/_api/\nbuild/*\n.DS_Store\ndist/*\npip-wheel-metadata/\n.pytest_cache/*\n.venv/*\nvenv/*\n.vscode/*\nguide/node_modules/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.0654296875,
          "content": ".. note::\n\n  See https://sanic.dev/en/release-notes/changelog.html\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.0966796875,
          "content": "# Contributor Covenant Code of Conduct\n\nSee https://sanic.dev/en/organization/code-of-conduct.html\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.0703125,
          "content": "# Contributing\n\nSee https://sanic.dev/en/organization/contributing.html\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "MIT License\n\nCopyright (c) 2016-present Sanic Community\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2158203125,
          "content": "# Non Code related contents\ninclude LICENSE\ninclude README.rst\ninclude pyproject.toml\n\n# Setup\ninclude setup.py\ninclude Makefile\n\n# Tests\ninclude .coveragerc\ngraft tests\n\nglobal-exclude __pycache__\nglobal-exclude *.py[co]"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.09375,
          "content": "RUFF_FORMATTED_FOLDERS = sanic examples scripts tests guide docs\n.DEFAULT: help\n\n.PHONY: help\nhelp:\n\t@echo \"Please use \\`make <target>' where <target> is one of\"\n\t@echo \"install\"\n\t@echo \"\t\tInstall Sanic\"\n\t@echo \"docker-test\"\n\t@echo \"\t\tRun Sanic Unit Tests using Docker\"\n\t@echo \"fix\"\n\t@echo \"\t\tAnalyze and fix linting issues using ruff\"\n\t@echo \"format\"\n\t@echo \"\t\tAnalyze and format using ruff\"\n\t@echo \"pretty\"\n\t@echo \"\t\tAnalyze and fix linting and format using ruff\"\n\t@echo \"\"\n\t@echo \"docs\"\n\t@echo \"\t\tGenerate Sanic documentation\"\n\t@echo \"\"\n\t@echo \"clean-docs\"\n\t@echo \"\t\tClean Sanic documentation\"\n\t@echo \"\"\n\t@echo \"docs-test\"\n\t@echo \"\t\tTest Sanic Documentation for errors\"\n\t@echo \"\"\n\t@echo \"changelog\"\n\t@echo \"\t\tGenerate changelog for Sanic to prepare for new release\"\n\t@echo \"\"\n\t@echo \"release\"\n\t@echo \"\t\tPrepare Sanic for a new changes by version bump and changelog\"\n\t@echo \"\"\n\n.PHONY: clean\nclean:\n\tfind . ! -path \"./.eggs/*\" -name \"*.pyc\" -exec rm {} \\;\n\tfind . ! -path \"./.eggs/*\" -name \"*.pyo\" -exec rm {} \\;\n\tfind . ! -path \"./.eggs/*\" -name \".coverage\" -exec rm {} \\;\n\trm -rf build/* > /dev/null 2>&1\n\trm -rf dist/* > /dev/null 2>&1\n\n.PHONY: view-coverage\nview-coverage:\n\tsanic ./coverage --simple\n\n.PHONY: install\ninstall:\n\tpython -m pip install .\n\n.PHONY: docker-test\ndocker-test: clean\n\tdocker build -t sanic/test-image -f docker/Dockerfile .\n\tdocker run -t sanic/test-image tox\n\n.PHONY: fix\nfix:\n\truff check ${RUFF_FORMATTED_FOLDERS} --fix\n\n.PHONY: format\nformat:\n\truff format ${RUFF_FORMATTED_FOLDERS}\n\n.PHONY: pretty\npretty: format fix\n\n.PHONY: docs-clean\ndocs-clean:\n\tcd docs && make clean\n\n.PHONY: docs\ndocs: docs-clean\n\tcd docs && make html\n\n.PHONY: docs-test\ndocs-test: docs-clean\n\tcd docs && make dummy\n\n.PHONY: docs-serve\ndocs-serve:\n\tsphinx-autobuild docs docs/_build/html --port 9999 --watch ./\n\n.PHONY: changelog\nchangelog:\n\tpython scripts/changelog.py\n\n.PHONY: guide-serve\nguide-serve:\n\tcd guide && sanic server:app -r -R ./content -R ./style\n\n.PHONY: release\nrelease:\nifdef version\n\tpython scripts/release.py --release-version ${version} --generate-changelog\nelse\n\tpython scripts/release.py --generate-changelog\nendif\n\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 5.6767578125,
          "content": ".. image:: https://raw.githubusercontent.com/sanic-org/sanic-assets/master/png/sanic-framework-logo-400x97.png\n    :alt: Sanic | Build fast. Run fast.\n\nSanic | Build fast. Run fast.\n=============================\n\n.. start-badges\n\n.. list-table::\n    :widths: 15 85\n    :stub-columns: 1\n\n    * - Build\n      - | |Tests|\n    * - Docs\n      - | |UserGuide| |Documentation|\n    * - Package\n      - | |PyPI| |PyPI version| |Wheel| |Supported implementations| |Code style ruff|\n    * - Support\n      - | |Forums| |Discord| |Awesome|\n    * - Stats\n      - | |Monthly Downloads| |Weekly Downloads| |Conda downloads|\n\n.. |UserGuide| image:: https://img.shields.io/badge/user%20guide-sanic-ff0068\n   :target: https://sanic.dev/\n.. |Forums| image:: https://img.shields.io/badge/forums-community-ff0068.svg\n   :target: https://community.sanicframework.org/\n.. |Discord| image:: https://img.shields.io/discord/812221182594121728?logo=discord&label=Discord&color=5865F2\n   :target: https://discord.gg/FARQzAEMAA\n.. |Tests| image:: https://github.com/sanic-org/sanic/actions/workflows/tests.yml/badge.svg?branch=main\n   :target: https://github.com/sanic-org/sanic/actions/workflows/tests.yml\n.. |Documentation| image:: https://readthedocs.org/projects/sanic/badge/?version=latest\n   :target: http://sanic.readthedocs.io/en/latest/?badge=latest\n.. |PyPI| image:: https://img.shields.io/pypi/v/sanic.svg\n   :target: https://pypi.python.org/pypi/sanic/\n.. |PyPI version| image:: https://img.shields.io/pypi/pyversions/sanic.svg\n   :target: https://pypi.python.org/pypi/sanic/\n.. |Code style ruff| image:: https://img.shields.io/badge/code%20style-ruff-000000.svg\n    :target: https://docs.astral.sh/ruff/\n.. |Wheel| image:: https://img.shields.io/pypi/wheel/sanic.svg\n    :alt: PyPI Wheel\n    :target: https://pypi.python.org/pypi/sanic\n.. |Supported implementations| image:: https://img.shields.io/pypi/implementation/sanic.svg\n    :alt: Supported implementations\n    :target: https://pypi.python.org/pypi/sanic\n.. |Awesome| image:: https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg\n    :alt: Awesome Sanic List\n    :target: https://github.com/mekicha/awesome-sanic\n.. |Monthly Downloads| image:: https://img.shields.io/pypi/dm/sanic.svg\n    :alt: Downloads\n    :target: https://pepy.tech/project/sanic\n.. |Weekly Downloads| image:: https://img.shields.io/pypi/dw/sanic.svg\n    :alt: Downloads\n    :target: https://pepy.tech/project/sanic\n.. |Conda downloads| image:: https://img.shields.io/conda/dn/conda-forge/sanic.svg\n    :alt: Downloads\n    :target: https://anaconda.org/conda-forge/sanic\n\n.. end-badges\n\nSanic is a **Python 3.9+** web server and web framework that's written to go fast. It allows the usage of the ``async/await`` syntax added in Python 3.5, which makes your code non-blocking and speedy.\n\nSanic is also ASGI compliant, so you can deploy it with an `alternative ASGI webserver <https://sanicframework.org/en/guide/deployment/running.html#asgi>`_.\n\n`Source code on GitHub <https://github.com/sanic-org/sanic/>`_ | `Help and discussion board <https://community.sanicframework.org/>`_ | `User Guide <https://sanicframework.org>`_ | `Chat on Discord <https://discord.gg/FARQzAEMAA>`_\n\nThe project is maintained by the community, for the community. **Contributions are welcome!**\n\nThe goal of the project is to provide a simple way to get up and running a highly performant HTTP server that is easy to build, to expand, and ultimately to scale.\n\nSponsor\n-------\n\nCheck out `open collective <https://opencollective.com/sanic-org>`_ to learn more about helping to fund Sanic.\n\n\nInstallation\n------------\n\n``pip3 install sanic``\n\n    Sanic makes use of ``uvloop`` and ``ujson`` to help with performance. If you do not want to use those packages, simply add an environmental variable ``SANIC_NO_UVLOOP=true`` or ``SANIC_NO_UJSON=true`` at install time.\n\n    .. code:: shell\n\n       $ export SANIC_NO_UVLOOP=true\n       $ export SANIC_NO_UJSON=true\n       $ pip3 install --no-binary :all: sanic\n\n\n.. note::\n\n  If you are running on a clean install of Fedora 28 or above, please make sure you have the ``redhat-rpm-config`` package installed in case if you want to\n  use ``sanic`` with ``ujson`` dependency.\n\n\nHello World Example\n-------------------\n\n.. code:: python\n\n    from sanic import Sanic\n    from sanic.response import json\n\n    app = Sanic(\"my-hello-world-app\")\n\n    @app.route('/')\n    async def test(request):\n        return json({'hello': 'world'})\n\n    if __name__ == '__main__':\n        app.run()\n\nSanic can now be easily run using ``sanic hello.app``.\n\n.. code::\n\n    [2018-12-30 11:37:41 +0200] [13564] [INFO] Goin' Fast @ http://127.0.0.1:8000\n    [2018-12-30 11:37:41 +0200] [13564] [INFO] Starting worker [13564]\n\nAnd, we can verify it is working: ``curl localhost:8000 -i``\n\n.. code::\n\n    HTTP/1.1 200 OK\n    Connection: keep-alive\n    Keep-Alive: 5\n    Content-Length: 17\n    Content-Type: application/json\n\n    {\"hello\":\"world\"}\n\n**Now, let's go build something fast!**\n\nMinimum Python version is 3.8. If you need Python 3.7 support, please use v22.12LTS.\n\nDocumentation\n-------------\n\nUser Guide, Changelog, and API Documentation can be found at `sanic.dev <https://sanic.dev>`__.\n\n\nQuestions and Discussion\n------------------------\n\n`Ask a question or join the conversation <https://community.sanicframework.org/>`__.\n\nContribution\n------------\n\nWe are always happy to have new contributions. We have `marked issues good for anyone looking to get started <https://github.com/sanic-org/sanic/issues?q=is%3Aopen+is%3Aissue+label%3Abeginner>`_, and welcome `questions on the forums <https://community.sanicframework.org/>`_. Please take a look at our `Contribution guidelines <https://github.com/sanic-org/sanic/blob/master/CONTRIBUTING.rst>`_.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.0693359375,
          "content": "# Security Policy\n\nSee https://sanic.dev/en/organization/policies.html\n"
        },
        {
          "name": "changelogs",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.4677734375,
          "content": "coverage:\n  status:\n    patch:\n      default:\n        target: auto\n        threshold: 0.75\n        informational: true\n    project:\n      default:\n        target: auto\n        threshold: 0.5\n  precision: 3\ncodecov:\n  require_ci_to_pass: false\nignore:\n  - \"sanic/__main__.py\"\n  - \"sanic/compat.py\"\n  - \"sanic/simple.py\"\n  - \"sanic/utils.py\"\n  - \"sanic/cli/\"\n  - \"sanic/pages/\"\n  - \".github/\"\n  - \"changelogs/\"\n  - \"docker/\"\n  - \"docs/\"\n  - \"examples/\"\n  - \"scripts/\"\n  - \"tests/\"\n"
        },
        {
          "name": "crowdin.yml",
          "type": "blob",
          "size": 0.1171875,
          "content": "files:\n  - source: /guide/content/en/**/*.md\n    translation: /guide/content/%two_letters_code%/**/%original_file_name%\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "guide",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.775390625,
          "content": "[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n\n[tool.ruff]\ntarget-version = \"py39\"\nline-length = 79\n\n[tool.ruff.lint]\nselect = [\n    \"E\",    # pycodestyle\n    \"F\",    # pyflakes\n    \"I\",    # isort\n    \"W\",    # pycodestyle warnings\n]\nignore = [\n    \"E203\",\n]\n\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n\n[tool.ruff.format]\nquote-style = \"double\"\nindent-style = \"space\"\nskip-magic-trailing-comma = false\nline-ending = \"auto\"\n\n[tool.ruff.lint.isort]\nknown-first-party = [\"sanic\"]\nknown-third-party = [\"pytest\"]\nlines-after-imports = 2\nlines-between-types = 1\n\n[[tool.mypy.overrides]]\nmodule = [\n    \"httptools.*\",\n    \"trustme.*\",\n    \"sanic_routing.*\",\n    \"aioquic.*\",\n    \"html5tagger.*\",\n    \"tracerite.*\",\n]\nignore_missing_imports = true\n"
        },
        {
          "name": "readthedocs.yml",
          "type": "blob",
          "size": 0.166015625,
          "content": "version: 2\npython:\n   install:\n      - method: pip\n        path: .\n        extra_requirements:\n            - docs\n\nbuild:\n  os: \"ubuntu-22.04\"\n  tools:\n    python: \"3.8\"\n"
        },
        {
          "name": "sanic",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 4.3212890625,
          "content": "\"\"\"\nSanic\n\"\"\"\n\nimport codecs\nimport os\nimport re\nimport sys\n\nfrom setuptools import find_packages, setup\nfrom setuptools.command.test import test as TestCommand\n\n\nclass PyTest(TestCommand):\n    \"\"\"\n    Provide a Test runner to be used from setup.py to run unit tests\n    \"\"\"\n\n    user_options = [(\"pytest-args=\", \"a\", \"Arguments to pass to pytest\")]\n\n    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        self.pytest_args = \"\"\n\n    def run_tests(self):\n        import shlex\n\n        import pytest\n\n        errno = pytest.main(shlex.split(self.pytest_args))\n        sys.exit(errno)\n\n\ndef open_local(paths, mode=\"r\", encoding=\"utf8\"):\n    path = os.path.join(os.path.abspath(os.path.dirname(__file__)), *paths)\n\n    return codecs.open(path, mode, encoding)\n\n\ndef str_to_bool(val: str) -> bool:\n    val = val.lower()\n    if val in {\n        \"y\",\n        \"yes\",\n        \"yep\",\n        \"yup\",\n        \"t\",\n        \"true\",\n        \"on\",\n        \"enable\",\n        \"enabled\",\n        \"1\",\n    }:\n        return True\n    elif val in {\"n\", \"no\", \"f\", \"false\", \"off\", \"disable\", \"disabled\", \"0\"}:\n        return False\n    else:\n        raise ValueError(f\"Invalid truth value {val}\")\n\n\nwith open_local([\"sanic\", \"__version__.py\"], encoding=\"latin1\") as fp:\n    try:\n        version = re.findall(\n            r\"^__version__ = \\\"([^']+)\\\"\\r?$\", fp.read(), re.M\n        )[0]\n    except IndexError:\n        raise RuntimeError(\"Unable to determine version.\")\n\nwith open_local([\"README.rst\"]) as rm:\n    long_description = rm.read()\n\nsetup_kwargs = {\n    \"name\": \"sanic\",\n    \"version\": version,\n    \"url\": \"http://github.com/sanic-org/sanic/\",\n    \"license\": \"MIT\",\n    \"author\": \"Sanic Community\",\n    \"author_email\": \"admhpkns@gmail.com\",\n    \"description\": (\n        \"A web server and web framework that's written to go fast. \"\n        \"Build fast. Run fast.\"\n    ),\n    \"long_description\": long_description,\n    \"packages\": find_packages(exclude=(\"tests\", \"tests.*\")),\n    \"package_data\": {\"sanic\": [\"py.typed\", \"pages/styles/*\"]},\n    \"platforms\": \"any\",\n    \"python_requires\": \">=3.8\",\n    \"classifiers\": [\n        \"Development Status :: 4 - Beta\",\n        \"Environment :: Web Environment\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n        \"Programming Language :: Python :: 3.13\",\n    ],\n    \"entry_points\": {\"console_scripts\": [\"sanic = sanic.__main__:main\"]},\n}\n\nenv_dependency = (\n    '; sys_platform != \"win32\" ' 'and implementation_name == \"cpython\"'\n)\nujson = \"ujson>=1.35\" + env_dependency\nuvloop = \"uvloop>=0.15.0\" + env_dependency\ntypes_ujson = \"types-ujson\" + env_dependency\nrequirements = [\n    \"sanic-routing>=23.12.0\",\n    \"httptools>=0.0.10\",\n    uvloop,\n    ujson,\n    \"aiofiles>=0.6.0\",\n    \"websockets>=10.0\",\n    \"multidict>=5.0,<7.0\",\n    \"html5tagger>=1.2.1\",\n    \"tracerite>=1.0.0\",\n    \"typing-extensions>=4.4.0\",\n    \"setuptools>=70.1.0\",\n]\n\ntests_require = [\n    \"sanic-testing>=23.6.0\",\n    \"pytest>=8.2.2\",\n    \"coverage\",\n    \"beautifulsoup4\",\n    \"pytest-sanic\",\n    \"pytest-benchmark\",\n    \"chardet==3.*\",\n    \"ruff\",\n    \"bandit\",\n    \"mypy\",\n    \"docutils\",\n    \"pygments\",\n    \"uvicorn\",\n    \"slotscheck>=0.8.0,<1\",\n    types_ujson,\n]\n\ndocs_require = [\n    \"sphinx>=2.1.2\",\n    \"sphinx_rtd_theme>=0.4.3\",\n    \"docutils\",\n    \"pygments\",\n    \"m2r2\",\n    \"enum-tools[sphinx]\",\n    \"mistune<2.0.0\",\n    \"autodocsumm>=0.2.11\",\n]\n\ndev_require = tests_require + [\n    \"cryptography\",\n    \"tox\",\n    \"towncrier\",\n]\n\nall_require = list(set(dev_require + docs_require))\n\nif str_to_bool(os.environ.get(\"SANIC_NO_UJSON\", \"no\")):\n    print(\"Installing without uJSON\")\n    requirements.remove(ujson)\n    tests_require.remove(types_ujson)\n\n# 'nt' means windows OS\nif str_to_bool(os.environ.get(\"SANIC_NO_UVLOOP\", \"no\")):\n    print(\"Installing without uvLoop\")\n    requirements.remove(uvloop)\n\nextras_require = {\n    \"test\": tests_require,\n    \"dev\": dev_require,\n    \"docs\": docs_require,\n    \"all\": all_require,\n    \"ext\": [\"sanic-ext\"],\n    \"http3\": [\"aioquic\"],\n}\n\nsetup_kwargs[\"install_requires\"] = requirements\nsetup_kwargs[\"tests_require\"] = tests_require\nsetup_kwargs[\"extras_require\"] = extras_require\nsetup_kwargs[\"cmdclass\"] = {\"test\": PyTest}\nsetup(**setup_kwargs)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.33203125,
          "content": "[tox]\nenvlist = py39, py310, py311, py312, py313, pyNightly, pypy310, {py39,py310,py311,py312,py313,pyNightly,pypy310}-no-ext, lint, check, security, docs, type-checking\n\n[testenv]\nusedevelop = true\nsetenv =\n    {py39,py310,py311,py312,py313,pyNightly}-no-ext: SANIC_NO_UJSON=1\n    {py39,py310,py311,py312,py313,pyNightly}-no-ext: SANIC_NO_UVLOOP=1\nextras = test, http3\ndeps =\n    httpx>=0.23\n    setuptools\nallowlist_externals =\n    pytest\n    coverage\ncommands =\n    coverage run --source ./sanic -m pytest {posargs:tests}\n    - coverage combine --append\n    coverage report -m -i\n    coverage html -i\n\n[testenv:lint]\ncommands =\n    ruff check sanic\n    ruff format sanic --check\n    slotscheck --verbose -m sanic\n\n[testenv:type-checking]\ncommands =\n    mypy sanic\n\n[testenv:check]\ncommands =\n    python setup.py check -r -s\n\n[pytest]\nfilterwarnings =\n    ignore:.*async with lock.* instead:DeprecationWarning\n    ignore::pytest.PytestUnhandledThreadExceptionWarning\naddopts = --strict-markers\nmarkers =\n    asyncio\n\n[testenv:security]\n\ncommands =\n    bandit --recursive sanic --skip B404,B101\n\n[testenv:docs]\nplatform = linux|linux2|darwin\nallowlist_externals = make\nextras = docs, http3\ncommands =\n    make docs-test\n\n[testenv:coverage]\ncommands =\n    coverage run --source ./sanic -m pytest {posargs:tests}\n    - coverage combine --append\n    coverage xml -i\n"
        }
      ]
    }
  ]
}