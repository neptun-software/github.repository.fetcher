{
  "metadata": {
    "timestamp": 1736561320299,
    "page": 332,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "onyx-dot-app/onyx",
      "stars": 11395,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1650390625,
          "content": ".env\n.DS_store\n.venv\n.mypy_cache\n.idea\n/deployment/data/nginx/app.conf\n.vscode/\n*.sw?\n/backend/tests/regression/answer_quality/search_test_config.yaml\n/web/test-results/"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 2.41796875,
          "content": "repos:\n  - repo: https://github.com/psf/black\n    rev: 23.3.0\n    hooks:\n    - id: black\n      language_version: python3.11\n\n  - repo: https://github.com/asottile/reorder_python_imports\n    rev: v3.9.0\n    hooks:\n    - id: reorder-python-imports\n      args: ['--py311-plus', '--application-directories=backend/']\n      # need to ignore alembic files, since reorder-python-imports gets confused\n      # and thinks that alembic is a local package since there is a folder\n      # in the backend directory called `alembic`\n      exclude: ^backend/alembic/\n\n  # These settings will remove unused imports with side effects\n  # Note: The repo currently does not and should not have imports with side effects\n  - repo: https://github.com/PyCQA/autoflake\n    rev: v2.2.0\n    hooks:\n      - id: autoflake\n        args: [ '--remove-all-unused-imports', '--remove-unused-variables', '--in-place' , '--recursive']\n\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    # Ruff version.\n    rev: v0.0.286\n    hooks:\n      - id: ruff\n  - repo: https://github.com/pre-commit/mirrors-prettier\n    rev: v3.1.0\n    hooks:\n    - id: prettier\n      types_or: [html, css, javascript, ts, tsx]\n      additional_dependencies:\n      - prettier\n\n  # We would like to have a mypy pre-commit hook, but due to the fact that\n  # pre-commit runs in it's own isolated environment, we would need to install\n  # and keep in sync all dependencies so mypy has access to the appropriate type\n  # stubs. This does not seem worth it at the moment, so for now we will stick to\n  # having mypy run via Github Actions / manually by contributors\n  # - repo: https://github.com/pre-commit/mirrors-mypy\n  #   rev: v1.1.1\n  #   hooks:\n  #     - id: mypy\n  #       exclude: ^tests/\n  #       # below are needed for type stubs since pre-commit runs in it's own\n  #       # isolated environment. Unfortunately, this needs to be kept in sync\n  #       # with requirements/dev.txt + requirements/default.txt\n  #       additional_dependencies: [\n  #         alembic==1.10.4,\n  #         types-beautifulsoup4==4.12.0.3,\n  #         types-html5lib==1.1.11.13,\n  #         types-oauthlib==3.2.0.9,\n  #         types-psycopg2==2.9.21.10,\n  #         types-python-dateutil==2.8.19.13,\n  #         types-regex==2023.3.23.1,\n  #         types-requests==2.28.11.17,\n  #         types-retry==0.9.9.3,\n  #         types-urllib3==1.26.25.11\n  #       ]\n  #       # TODO: add back once errors are addressed\n  #       # args: [--strict]\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.046875,
          "content": "backend/tests/integration/tests/pruning/website\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 9.3310546875,
          "content": "<!-- DANSWER_METADATA={\"link\": \"https://github.com/onyx-dot-app/onyx/blob/main/CONTRIBUTING.md\"} -->\n\n# Contributing to Onyx\n\nHey there! We are so excited that you're interested in Onyx.\n\nAs an open source project in a rapidly changing space, we welcome all contributions.\n\n## 💃 Guidelines\n\n### Contribution Opportunities\n\nThe [GitHub Issues](https://github.com/onyx-dot-app/onyx/issues) page is a great place to start for contribution ideas.\n\nTo ensure that your contribution is aligned with the project's direction, please reach out to Hagen (or any other maintainer) on the Onyx team\nvia [Slack](https://join.slack.com/t/onyx-dot-app/shared_invite/zt-2twesxdr6-5iQitKZQpgq~hYIZ~dv3KA) /\n[Discord](https://discord.gg/TDJ59cGV2X) or [email](mailto:founders@onyx.app).\n\nIssues that have been explicitly approved by the maintainers (aligned with the direction of the project)\nwill be marked with the `approved by maintainers` label.\nIssues marked `good first issue` are an especially great place to start.\n\n**Connectors** to other tools are another great place to contribute. For details on how, refer to this\n[README.md](https://github.com/onyx-dot-app/onyx/blob/main/backend/onyx/connectors/README.md).\n\nIf you have a new/different contribution in mind, we'd love to hear about it!\nYour input is vital to making sure that Onyx moves in the right direction.\nBefore starting on implementation, please raise a GitHub issue.\n\nAlso, always feel free to message the founders (Chris Weaver / Yuhong Sun) on\n[Slack](https://join.slack.com/t/onyx-dot-app/shared_invite/zt-2twesxdr6-5iQitKZQpgq~hYIZ~dv3KA) /\n[Discord](https://discord.gg/TDJ59cGV2X) directly about anything at all.\n\n### Contributing Code\n\nTo contribute to this project, please follow the\n[\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow.\nWhen opening a pull request, mention related issues and feel free to tag relevant maintainers.\n\nBefore creating a pull request please make sure that the new changes conform to the formatting and linting requirements.\nSee the [Formatting and Linting](#formatting-and-linting) section for how to run these checks locally.\n\n### Getting Help 🙋\n\nOur goal is to make contributing as easy as possible. If you run into any issues please don't hesitate to reach out.\nThat way we can help future contributors and users can avoid the same issue.\n\nWe also have support channels and generally interesting discussions on our\n[Slack](https://join.slack.com/t/onyx-dot-app/shared_invite/zt-2twesxdr6-5iQitKZQpgq~hYIZ~dv3KA)\nand\n[Discord](https://discord.gg/TDJ59cGV2X).\n\nWe would love to see you there!\n\n## Get Started 🚀\n\nOnyx being a fully functional app, relies on some external software, specifically:\n\n- [Postgres](https://www.postgresql.org/) (Relational DB)\n- [Vespa](https://vespa.ai/) (Vector DB/Search Engine)\n- [Redis](https://redis.io/) (Cache)\n- [Nginx](https://nginx.org/) (Not needed for development flows generally)\n\n> **Note:**\n> This guide provides instructions to build and run Onyx locally from source with Docker containers providing the above external software. We believe this combination is easier for\n> development purposes. If you prefer to use pre-built container images, we provide instructions on running the full Onyx stack within Docker below.\n\n### Local Set Up\n\nBe sure to use Python version 3.11. For instructions on installing Python 3.11 on macOS, refer to the [CONTRIBUTING_MACOS.md](./CONTRIBUTING_MACOS.md) readme.\n\nIf using a lower version, modifications will have to be made to the code.\nIf using a higher version, sometimes some libraries will not be available (i.e. we had problems with Tensorflow in the past with higher versions of python).\n\n#### Backend: Python requirements\n\nCurrently, we use pip and recommend creating a virtual environment.\n\nFor convenience here's a command for it:\n\n```bash\npython -m venv .venv\nsource .venv/bin/activate\n```\n\n> **Note:**\n> This virtual environment MUST NOT be set up WITHIN the onyx directory if you plan on using mypy within certain IDEs.\n> For simplicity, we recommend setting up the virtual environment outside of the onyx directory.\n\n_For Windows, activate the virtual environment using Command Prompt:_\n\n```bash\n.venv\\Scripts\\activate\n```\n\nIf using PowerShell, the command slightly differs:\n\n```powershell\n.venv\\Scripts\\Activate.ps1\n```\n\nInstall the required python dependencies:\n\n```bash\npip install -r onyx/backend/requirements/default.txt\npip install -r onyx/backend/requirements/dev.txt\npip install -r onyx/backend/requirements/ee.txt\npip install -r onyx/backend/requirements/model_server.txt\n```\n\nInstall Playwright for Python (headless browser required by the Web Connector)\n\nIn the activated Python virtualenv, install Playwright for Python by running:\n\n```bash\nplaywright install\n```\n\nYou may have to deactivate and reactivate your virtualenv for `playwright` to appear on your path.\n\n#### Frontend: Node dependencies\n\nInstall [Node.js and npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) for the frontend.\nOnce the above is done, navigate to `onyx/web` run:\n\n```bash\nnpm i\n```\n\n## Formatting and Linting\n\n### Backend\n\nFor the backend, you'll need to setup pre-commit hooks (black / reorder-python-imports).\nFirst, install pre-commit (if you don't have it already) following the instructions\n[here](https://pre-commit.com/#installation).\n\nWith the virtual environment active, install the pre-commit library with:\n\n```bash\npip install pre-commit\n```\n\nThen, from the `onyx/backend` directory, run:\n\n```bash\npre-commit install\n```\n\nAdditionally, we use `mypy` for static type checking.\nOnyx is fully type-annotated, and we want to keep it that way!\nTo run the mypy checks manually, run `python -m mypy .` from the `onyx/backend` directory.\n\n### Web\n\nWe use `prettier` for formatting. The desired version (2.8.8) will be installed via a `npm i` from the `onyx/web` directory.\nTo run the formatter, use `npx prettier --write .` from the `onyx/web` directory.\nPlease double check that prettier passes before creating a pull request.\n\n# Running the application for development\n\n## Developing using VSCode Debugger (recommended)\n\nWe highly recommend using VSCode debugger for development.\nSee [CONTRIBUTING_VSCODE.md](./CONTRIBUTING_VSCODE.md) for more details.\n\nOtherwise, you can follow the instructions below to run the application for development.\n\n## Manually running the application for development\n### Docker containers for external software\n\nYou will need Docker installed to run these containers.\n\nFirst navigate to `onyx/deployment/docker_compose`, then start up Postgres/Vespa/Redis with:\n\n```bash\ndocker compose -f docker-compose.dev.yml -p onyx-stack up -d index relational_db cache\n```\n\n(index refers to Vespa, relational_db refers to Postgres, and cache refers to Redis)\n\n### Running Onyx locally\n\nTo start the frontend, navigate to `onyx/web` and run:\n\n```bash\nnpm run dev\n```\n\nNext, start the model server which runs the local NLP models.\nNavigate to `onyx/backend` and run:\n\n```bash\nuvicorn model_server.main:app --reload --port 9000\n```\n\n_For Windows (for compatibility with both PowerShell and Command Prompt):_\n\n```bash\npowershell -Command \"uvicorn model_server.main:app --reload --port 9000\"\n```\n\nThe first time running Onyx, you will need to run the DB migrations for Postgres.\nAfter the first time, this is no longer required unless the DB models change.\n\nNavigate to `onyx/backend` and with the venv active, run:\n\n```bash\nalembic upgrade head\n```\n\nNext, start the task queue which orchestrates the background jobs.\nJobs that take more time are run async from the API server.\n\nStill in `onyx/backend`, run:\n\n```bash\npython ./scripts/dev_run_background_jobs.py\n```\n\nTo run the backend API server, navigate back to `onyx/backend` and run:\n\n```bash\nAUTH_TYPE=disabled uvicorn onyx.main:app --reload --port 8080\n```\n\n_For Windows (for compatibility with both PowerShell and Command Prompt):_\n\n```bash\npowershell -Command \"\n    $env:AUTH_TYPE='disabled'\n    uvicorn onyx.main:app --reload --port 8080\n\"\n```\n\n> **Note:**\n> If you need finer logging, add the additional environment variable `LOG_LEVEL=DEBUG` to the relevant services.\n\n#### Wrapping up\n\nYou should now have 4 servers running:\n\n- Web server\n- Backend API\n- Model server\n- Background jobs\n\nNow, visit `http://localhost:3000` in your browser. You should see the Onyx onboarding wizard where you can connect your external LLM provider to Onyx.\n\nYou've successfully set up a local Onyx instance! 🏁\n\n#### Running the Onyx application in a container\n\nYou can run the full Onyx application stack from pre-built images including all external software dependencies.\n\nNavigate to `onyx/deployment/docker_compose` and run:\n\n```bash\ndocker compose -f docker-compose.dev.yml -p onyx-stack up -d\n```\n\nAfter Docker pulls and starts these containers, navigate to `http://localhost:3000` to use Onyx.\n\nIf you want to make changes to Onyx and run those changes in Docker, you can also build a local version of the Onyx container images that incorporates your changes like so:\n\n```bash\ndocker compose -f docker-compose.dev.yml -p onyx-stack up -d --build\n```\n\n\n### Release Process\n\nOnyx loosely follows the SemVer versioning standard.\nMajor changes are released with a \"minor\" version bump. Currently we use patch release versions to indicate small feature changes.\nA set of Docker containers will be pushed automatically to DockerHub with every tag.\nYou can see the containers [here](https://hub.docker.com/search?q=onyx%2F).\n"
        },
        {
          "name": "CONTRIBUTING_MACOS.md",
          "type": "blob",
          "size": 1.01953125,
          "content": "## Some additional notes for Mac Users\n\nThe base instructions to set up the development environment are located in [CONTRIBUTING.md](https://github.com/onyx-dot-app/onyx/blob/main/CONTRIBUTING.md).\n\n### Setting up Python\n\nEnsure [Homebrew](https://brew.sh/) is already set up.\n\nThen install python 3.11.\n\n```bash\nbrew install python@3.11\n```\n\nAdd python 3.11 to your path: add the following line to ~/.zshrc\n\n```\nexport PATH=\"$(brew --prefix)/opt/python@3.11/libexec/bin:$PATH\"\n```\n\n> **Note:**\n> You will need to open a new terminal for the path change above to take effect.\n\n### Setting up Docker\n\nOn macOS, you will need to install [Docker Desktop](https://www.docker.com/products/docker-desktop/) and\nensure it is running before continuing with the docker commands.\n\n### Formatting and Linting\n\nMacOS will likely require you to remove some quarantine attributes on some of the hooks for them to execute properly.\nAfter installing pre-commit, run the following command:\n\n```bash\nsudo xattr -r -d com.apple.quarantine ~/.cache/pre-commit\n```\n"
        },
        {
          "name": "CONTRIBUTING_VSCODE.md",
          "type": "blob",
          "size": 1.232421875,
          "content": "# VSCode Debugging Setup\n\nThis guide explains how to set up and use VSCode's debugging capabilities with this project.\n\n## Initial Setup\n\n1. **Environment Setup**:\n   - Copy `.vscode/.env.template` to `.vscode/.env`\n   - Fill in the necessary environment variables in `.vscode/.env`\n2. **launch.json**:\n   - Copy `.vscode/launch.template.jsonc` to `.vscode/launch.json`\n\n## Using the Debugger\n\nBefore starting, make sure the Docker Daemon is running.\n\n1. Open the Debug view in VSCode (Cmd+Shift+D on macOS)\n2. From the dropdown at the top, select \"Clear and Restart External Volumes and Containers\" and press the green play button\n3. From the dropdown at the top, select \"Run All Onyx Services\" and press the green play button\n4. Now, you can navigate to onyx in your browser (default is http://localhost:3000) and start using the app\n5. You can set breakpoints by clicking to the left of line numbers to help debug while the app is running\n6. Use the debug toolbar to step through code, inspect variables, etc.\n\n## Features\n\n- Hot reload is enabled for the web server and API servers\n- Python debugging is configured with debugpy\n- Environment variables are loaded from `.vscode/.env`\n- Console output is organized in the integrated terminal with labeled tabs\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.6591796875,
          "content": "Copyright (c) 2023-present DanswerAI, Inc.\n\nPortions of this software are licensed as follows:\n\n- All content that resides under \"ee\" directories of this repository, if that directory exists, is licensed under the license defined in \"backend/ee/LICENSE\". Specifically all content under \"backend/ee\" and \"web/src/app/ee\" is licensed under the license defined in \"backend/ee/LICENSE\".\n- All third party components incorporated into the Onyx Software are licensed under the original license provided by the owner of the applicable component.\n- Content outside of the above mentioned directories or restrictions above is available under the \"MIT Expat\" license as defined below.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.6708984375,
          "content": "<!-- DANSWER_METADATA={\"link\": \"https://github.com/onyx-dot-app/onyx/blob/main/README.md\"} -->\n\n<a name=\"readme-top\"></a>\n\n<h2 align=\"center\">\n<a href=\"https://www.onyx.app/\"> <img width=\"50%\" src=\"https://github.com/onyx-dot-app/onyx/blob/logo/OnyxLogoCropped.jpg?raw=true)\" /></a>\n</h2>\n\n<p align=\"center\">\n<p align=\"center\">Open Source Gen-AI + Enterprise Search.</p>\n\n<p align=\"center\">\n<a href=\"https://docs.onyx.app/\" target=\"_blank\">\n    <img src=\"https://img.shields.io/badge/docs-view-blue\" alt=\"Documentation\">\n</a>\n<a href=\"https://join.slack.com/t/onyx-dot-app/shared_invite/zt-2twesxdr6-5iQitKZQpgq~hYIZ~dv3KA\" target=\"_blank\">\n    <img src=\"https://img.shields.io/badge/slack-join-blue.svg?logo=slack\" alt=\"Slack\">\n</a>\n<a href=\"https://discord.gg/TDJ59cGV2X\" target=\"_blank\">\n    <img src=\"https://img.shields.io/badge/discord-join-blue.svg?logo=discord&logoColor=white\" alt=\"Discord\">\n</a>\n<a href=\"https://github.com/onyx-dot-app/onyx/blob/main/README.md\" target=\"_blank\">\n    <img src=\"https://img.shields.io/static/v1?label=license&message=MIT&color=blue\" alt=\"License\">\n</a>\n</p>\n\n<strong>[Onyx](https://www.onyx.app/)</strong> (formerly Danswer) is the AI Assistant connected to your company's docs, apps, and people.\nOnyx provides a Chat interface and plugs into any LLM of your choice. Onyx can be deployed anywhere and for any\nscale - on a laptop, on-premise, or to cloud. Since you own the deployment, your user data and chats are fully in your\nown control. Onyx is dual Licensed with most of it under MIT license and designed to be modular and easily extensible. The system also comes fully ready\nfor production usage with user authentication, role management (admin/basic users), chat persistence, and a UI for\nconfiguring AI Assistants.\n\nOnyx also serves as a Enterprise Search across all common workplace tools such as Slack, Google Drive, Confluence, etc.\nBy combining LLMs and team specific knowledge, Onyx becomes a subject matter expert for the team. Imagine ChatGPT if\nit had access to your team's unique knowledge! It enables questions such as \"A customer wants feature X, is this already\nsupported?\" or \"Where's the pull request for feature Y?\"\n\n<h3>Usage</h3>\n\nOnyx Web App:\n\nhttps://github.com/onyx-dot-app/onyx/assets/32520769/563be14c-9304-47b5-bf0a-9049c2b6f410\n\nOr, plug Onyx into your existing Slack workflows (more integrations to come 😁):\n\nhttps://github.com/onyx-dot-app/onyx/assets/25087905/3e19739b-d178-4371-9a38-011430bdec1b\n\nFor more details on the Admin UI to manage connectors and users, check out our\n<strong><a href=\"https://www.youtube.com/watch?v=geNzY1nbCnU\">Full Video Demo</a></strong>!\n\n## Deployment\n\nOnyx can easily be run locally (even on a laptop) or deployed on a virtual machine with a single\n`docker compose` command. Checkout our [docs](https://docs.onyx.app/quickstart) to learn more.\n\nWe also have built-in support for deployment on Kubernetes. Files for that can be found [here](https://github.com/onyx-dot-app/onyx/tree/main/deployment/kubernetes).\n\n## 💃 Main Features\n\n- Chat UI with the ability to select documents to chat with.\n- Create custom AI Assistants with different prompts and backing knowledge sets.\n- Connect Onyx with LLM of your choice (self-host for a fully airgapped solution).\n- Document Search + AI Answers for natural language queries.\n- Connectors to all common workplace tools like Google Drive, Confluence, Slack, etc.\n- Slack integration to get answers and search results directly in Slack.\n\n## 🚧 Roadmap\n\n- Chat/Prompt sharing with specific teammates and user groups.\n- Multimodal model support, chat with images, video etc.\n- Choosing between LLMs and parameters during chat session.\n- Tool calling and agent configurations options.\n- Organizational understanding and ability to locate and suggest experts from your team.\n\n## Other Notable Benefits of Onyx\n\n- User Authentication with document level access management.\n- Best in class Hybrid Search across all sources (BM-25 + prefix aware embedding models).\n- Admin Dashboard to configure connectors, document-sets, access, etc.\n- Custom deep learning models + learn from user feedback.\n- Easy deployment and ability to host Onyx anywhere of your choosing.\n\n## 🔌 Connectors\n\nEfficiently pulls the latest changes from:\n\n- Slack\n- GitHub\n- Google Drive\n- Confluence\n- Jira\n- Zendesk\n- Gmail\n- Notion\n- Gong\n- Slab\n- Linear\n- Productboard\n- Guru\n- Bookstack\n- Document360\n- Sharepoint\n- Hubspot\n- Local Files\n- Websites\n- And more ...\n\n## 📚 Editions\n\nThere are two editions of Onyx:\n\n- Onyx Community Edition (CE) is available freely under the MIT Expat license. This version has ALL the core features discussed above. This is the version of Onyx you will get if you follow the Deployment guide above.\n- Onyx Enterprise Edition (EE) includes extra features that are primarily useful for larger organizations. Specifically, this includes:\n  - Single Sign-On (SSO), with support for both SAML and OIDC\n  - Role-based access control\n  - Document permission inheritance from connected sources\n  - Usage analytics and query history accessible to admins\n  - Whitelabeling\n  - API key authentication\n  - Encryption of secrets\n  - Any many more! Checkout [our website](https://www.onyx.app/) for the latest.\n\nTo try the Onyx Enterprise Edition:\n\n1. Checkout our [Cloud product](https://cloud.onyx.app/signup).\n2. For self-hosting, contact us at [founders@onyx.app](mailto:founders@onyx.app) or book a call with us on our [Cal](https://cal.com/team/danswer/founders).\n\n## 💡 Contributing\n\nLooking to contribute? Please check out the [Contribution Guide](CONTRIBUTING.md) for more details.\n\n## ⭐Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=onyx-dot-app/onyx&type=Date)](https://star-history.com/#onyx-dot-app/onyx&Date)\n"
        },
        {
          "name": "backend",
          "type": "tree",
          "content": null
        },
        {
          "name": "ct.yaml",
          "type": "blob",
          "size": 0.58984375,
          "content": "# See https://github.com/helm/chart-testing#configuration\n\n# still have to specify this on the command line for list-changed\nchart-dirs:\n  - deployment/helm/charts\n\n# must be kept in sync with Chart.yaml\nchart-repos:\n  - vespa=https://onyx-dot-app.github.io/vespa-helm-charts\n  - postgresql=https://charts.bitnami.com/bitnami\n  \nhelm-extra-args: --debug --timeout 600s\n\n# nginx appears to not work on kind, likely due to lack of loadbalancer support\n# helm-extra-set-args also only works on the command line, not in this yaml\n# helm-extra-set-args: --set=nginx.enabled=false\n\nvalidate-maintainers: false\n"
        },
        {
          "name": "deployment",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "node_modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}