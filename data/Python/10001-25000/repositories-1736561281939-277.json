{
  "metadata": {
    "timestamp": 1736561281939,
    "page": 277,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "browser-use/browser-use",
      "stars": 12555,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".env.example",
          "type": "blob",
          "size": 0.25390625,
          "content": "OPENAI_API_KEY=\nANTHROPIC_API_KEY=\n\n# Set to false to disable anonymized telemetry\nANONYMIZED_TELEMETRY=true\n\n# LogLevel: Set to debug to enable verbose logging, set to result to get results only. Available: result | debug | info\nBROWSER_USE_LOGGING_LEVEL=info"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.09765625,
          "content": "static/*.gif filter=lfs diff=lfs merge=lfs -text\n# static/*.mp4 filter=lfs diff=lfs merge=lfs -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.22265625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control\n.pdm.toml\n.pdm-python\n.pdm-build/\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\ntest_env/\n\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\ntemp\ntmp\n\n\n.DS_Store\n\nprivate_example.py\nprivate_example\n\nbrowser_cookies.json\ncookies.json\nAgentHistory.json\ncv_04_24.pdf\nAgentHistoryList.json\n*.gif"
        },
        {
          "name": ".python-version",
          "type": "blob",
          "size": 0.00390625,
          "content": "3.11"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2024 Gregor Zunic\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.6513671875,
          "content": "<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"./static/browser-use-dark.png\">\n  <source media=\"(prefers-color-scheme: light)\" srcset=\"./static/browser-use.png\">\n  <img alt=\"Shows a black Browser Use Logo in light color mode and a white one in dark color mode.\" src=\"./static/browser-use.png\"  width=\"full\">\n</picture>\n\n<br/>\n\n[![GitHub stars](https://img.shields.io/github/stars/gregpr07/browser-use?style=social)](https://github.com/gregpr07/browser-use/stargazers)\n[![Discord](https://img.shields.io/discord/1303749220842340412?color=7289DA&label=Discord&logo=discord&logoColor=white)](https://link.browser-use.com/discord)\n[![Documentation](https://img.shields.io/badge/Documentation-📕-blue)](https://docs.browser-use.com)\n[![Twitter Follow](https://img.shields.io/twitter/follow/gregpr07?style=social)](https://x.com/gregpr07)\n\nMake websites accessible for AI agents 🤖.\n\nBrowser use is the easiest way to connect your AI agents with the browser. If you have used Browser Use for your project feel free to show it off in our [Discord](https://link.browser-use.com/discord).\n\nTo learn more about the library, check out the [documentation 📕](https://docs.browser-use.com).\n\n# Quick start\n\nWith pip:\n\n```bash\npip install browser-use\n```\n\n(optional) install playwright:\n\n```bash\nplaywright install\n```\n\nSpin up your agent:\n\n```python\nfrom langchain_openai import ChatOpenAI\nfrom browser_use import Agent\nimport asyncio\n\nasync def main():\n    agent = Agent(\n        task=\"Find a one-way flight from Bali to Oman on 12 January 2025 on Google Flights. Return me the cheapest option.\",\n        llm=ChatOpenAI(model=\"gpt-4o\"),\n    )\n    result = await agent.run()\n    print(result)\n\nasyncio.run(main())\n```\n\nAnd don't forget to add your API keys to your `.env` file.\n\n```bash\nOPENAI_API_KEY=\n```\n\nFor other settings, models, and more, check out the [documentation 📕](https://docs.browser-use.com).\n\n### Test with UI\n\nYou can test [browser-use with a UI repository](https://github.com/browser-use/web-ui)\n\nOr simply run the gradio example:\n\n```\nuv pip install gradio\n```\n\n```bash\npython examples/gradio.py\n```\n\n# Demos\n\n[Prompt](https://github.com/browser-use/browser-use/blob/main/examples/real_browser.py): Write a letter in Google Docs to my Papa, thanking him for everything, and save the document as a PDF.\n\n![Letter to Papa](https://github.com/user-attachments/assets/242ade3e-15bc-41c2-988f-cbc5415a66aa)\n\n<br/><br/>\n\n[Prompt](https://github.com/browser-use/browser-use/blob/main/examples/find_and_apply_to_jobs.py): Read my CV & find ML jobs, save them to a file, and then start applying for them in new tabs, if you need help, ask me.'\n\nhttps://github.com/user-attachments/assets/171fb4d6-0355-46f2-863e-edb04a828d04\n\n<br/><br/>\n\nPrompt: Find flights on kayak.com from Zurich to Beijing from 25.12.2024 to 02.02.2025.\n\n![flight search 8x 10fps](https://github.com/user-attachments/assets/ea605d4a-90e6-481e-a569-f0e0db7e6390)\n\n<br/><br/>\n\n[Prompt](https://github.com/browser-use/browser-use/blob/main/examples/save_to_file_hugging_face.py): Look up models with a license of cc-by-sa-4.0 and sort by most likes on Hugging face, save top 5 to file.\n\nhttps://github.com/user-attachments/assets/de73ee39-432c-4b97-b4e8-939fd7f323b3\n\n## More examples\n\nFor more examples see the [examples](examples) folder or join the [Discord](https://link.browser-use.com/discord) and show off your project.\n\n# Contributing\n\nContributions are welcome! Feel free to open issues for bugs or feature requests.\n\n## Local Setup\n\nTo learn more about the library, check out the [local setup 📕](https://docs.browser-use.com/development/local-setup).\n\n---\n\n<div align=\"center\">\n  Made with ❤️ in Zurich and San Francisco\n</div>\n"
        },
        {
          "name": "browser_use",
          "type": "tree",
          "content": null
        },
        {
          "name": "conftest.py",
          "type": "blob",
          "size": 0.22265625,
          "content": "import os\nimport sys\n\nfrom browser_use.logging_config import setup_logging\n\n# Get the absolute path to the project root\nproject_root = os.path.dirname(os.path.abspath(__file__))\nsys.path.insert(0, project_root)\n\nsetup_logging()\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.0966796875,
          "content": "[project]\nname = \"browser-use\"\ndescription = \"Make websites accessible for AI agents\"\nauthors = [\n    { name = \"Gregor Zunic\" }\n]\nversion = \"0.1.18\"\nreadme = \"README.md\"\nrequires-python = \">=3.11\"\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: OS Independent\",\n]\ndependencies = [\n    \"MainContentExtractor>=0.0.4\",\n    \"beautifulsoup4>=4.12.3\",\n    \"httpx>=0.27.2\",\n    \"langchain>=0.3.14\",\n    \"langchain-openai>=0.2.14\",\n    \"langchain-anthropic>=0.3.1\",\n    \"langchain-fireworks>=0.2.5\",\n    \"langchain-aws>=0.2.10\",\n    \"langchain-google-genai>=2.0.8\",\n    \"pydantic>=2.10.4\",\n    \"python-dotenv>=1.0.1\",\n    \"requests>=2.32.3\",\n    \"posthog>=3.7.0\",\n    \"playwright>=1.49.0\"\n]\n\n[project.optional-dependencies]\ndev = [\n    \"tokencost>=0.1.16\",\n    \"hatch>=1.13.0\",\n    \"build>=1.2.2\",\n    \"pytest>=8.3.3\",\n    \"pytest-asyncio>=0.24.0\"\n]\n\n[tool.ruff]\nline-length = 100\n\n[tool.ruff.format]\nquote-style = \"single\"\nindent-style = \"tab\"\ndocstring-code-format = true\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.5478515625,
          "content": "[pytest]\nmarkers =\n    slow: marks tests as slow (deselect with '-m \"not slow\"')\n    integration: marks tests as integration tests\n    unit: marks tests as unit tests\n\ntestpaths =\n    tests\n\npython_files =\n    test_*.py\n    *_test.py\n\naddopts =\n    -v\n    --strict-markers\n    --tb=short\n\nasyncio_mode = auto\nasyncio_default_fixture_loop_scope = function\nlog_cli = true\n; log_cli_level = DEBUG\nlog_cli_format = %(levelname)-8s [%(name)s] %(message)s\nfilterwarnings =\n    ignore::pytest.PytestDeprecationWarning\n    ignore::DeprecationWarning\n\nlog_level = INFO\n\n"
        },
        {
          "name": "static",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}