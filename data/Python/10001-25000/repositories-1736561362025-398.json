{
  "metadata": {
    "timestamp": 1736561362025,
    "page": 398,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dottxt-ai/outlines",
      "stars": 10285,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1513671875,
          "content": "*.egg-info\n__pycache__\n*_version.py\ndocs/build\n.coverage\n.idea/\n*.gguf\n.venv\nbenchmarks/results\n.python-version\n\n# Remove doc build folders\n.cache/\nbuild/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.7763671875,
          "content": "repos:\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v4.4.0\n  hooks:\n    -   id: check-merge-conflict\n    -   id: debug-statements\n    -   id: end-of-file-fixer\n    -   id: trailing-whitespace\n- repo: https://github.com/pycqa/isort\n  rev: 5.12.0\n  hooks:\n    - id: isort\n      args: [--profile, black]\n- repo: https://github.com/asottile/pyupgrade\n  rev: v3.3.1\n  hooks:\n    - id: pyupgrade\n      args: [--py37-plus]\n- repo: https://github.com/pycqa/flake8\n  rev: 6.0.0\n  hooks:\n   - id: flake8\n- repo: https://github.com/psf/black\n  rev: 23.3.0\n  hooks:\n    - id: black\n- repo: https://github.com/pre-commit/mirrors-mypy\n  rev: v1.2.0\n  hooks:\n    - id: mypy\n      args: [--allow-redefinition]\n      exclude: ^examples/\n      additional_dependencies: [types-tqdm, types-Pillow]\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.2509765625,
          "content": "version: 2\n\npython:\n  version: \"3.8\"\n  install:\n      - method: pip\n        path: .\n        extra_requirements:\n          - rtd\n      - requirements: requirements-doc.txt\n\nsphinx:\n  builder: html\n  configuration: docs/source/conf.py\n  fail_on_warning: true\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.41015625,
          "content": "FROM python:3.10\n\nWORKDIR /outlines\n\nRUN pip install --upgrade pip\n\n# Copy necessary build components\nCOPY pyproject.toml .\nCOPY outlines ./outlines\n\n# Install outlines and outlines[serve]\n# .git required by setuptools-scm\nRUN --mount=source=.git,target=.git,type=bind \\\n    pip install --no-cache-dir .[serve]\n\n# https://dottxt-ai.github.io/outlines/reference/vllm/\nENTRYPOINT [\"python3\", \"-m\", \"outlines.serve.serve\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.087890625,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2023- The Outlines developers\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.478515625,
          "content": "<div align=\"center\" style=\"margin-bottom: 1em;\">\n\n<img src=\"./docs/assets/images/logo.png\" alt=\"Outlines Logo\" width=500></img>\n\n\n 🗒️ *Make LLMs speak the language of every application.* 🗒️\n\nMade with ❤👷️ by the team at [.txt](https://dottxt.co).\n\n[![Documentation][documentation-badge]][documentation]\n[![Contributors][contributors-badge]][contributors]\n[![Downloads][downloads-badge]][pypistats]\n[![Discord][discord-badge]][discord]\n\n[Youtube channel][youtube-dottxt] | [.txt blog][blog-dottxt] | [Twitter][dottxt-twitter]\n\n\n</div>\n\n\n``` bash\npip install outlines\n```\n\nFirst time here? Go to our [setup guide](https://dottxt-ai.github.io/outlines/latest/welcome/)\n\n## Features\n\n- [x] 🤖 [Multiple model integrations](https://dottxt-ai.github.io/outlines/latest/installation): OpenAI, transformers, llama.cpp, exllama2, mamba\n- [x] 🖍️ Simple and powerful prompting primitives based on the [Jinja templating engine](https://jinja.palletsprojects.com/)\n- [x] 🚄 [Multiple choices](#multiple-choices), [type constraints](#type-constraint) and dynamic stopping\n- [x] ⚡ Fast [regex-structured generation](#efficient-regex-structured-generation)\n- [x] 🔥 Fast [JSON generation](#efficient-json-generation-following-a-pydantic-model) following a JSON schema or a Pydantic model\n- [x] 📝 [Grammar-structured generation](#using-context-free-grammars-to-guide-generation)\n- [x] 🐍 Interleave completions with loops, conditionals, and custom Python functions\n- [x] 💾 Caching of generations\n- [x] 🗂️ Batch inference\n- [x] 🎲 Sample with the greedy, multinomial and beam search algorithms (and more to come!)\n- [x] 🚀 [Serve with vLLM](https://dottxt-ai.github.io/outlines/latest/reference/serve/vllm), with official Docker image, [`outlinesdev/outlines`](https://hub.docker.com/r/outlinesdev/outlines)!\n\n\nOutlines  has new releases and features coming every week. Make sure to ⭐ star and 👀 watch this repository, follow [@dottxtai][dottxt-twitter] to stay up to date!\n\n## Why should I use structured generation?\n\n* It doesn't add any overhead during inference (cost-free)\n* It allows Open Source models to beat closed source models ([Mistral](https://x.com/dottxtai/status/1797692104023363765), [GPT-4](https://x.com/dottxtai/status/1798443290913853770))\n* [It speeds up inference](http://blog.dottxt.co/coalescence.html)\n* [It improves the performance of base models (GSM8K)](http://blog.dottxt.co/performance-gsm8k.html)\n* [It improves the performance of finetuned models (CoNNL)](https://predibase.com/blog/lorax-outlines-better-json-extraction-with-structured-generation-and-lora)\n* [It improves model efficiency (less examples needed)](https://huggingface.co/blog/evaluation-structured-outputs)\n\n## .txt company\n\n<div align=\"center\">\n<img src=\"./docs/assets/images/dottxt.png\" alt=\"Outlines Logo\" width=100></img>\n</div>\n\nWe started a company to keep pushing the boundaries of structured generation. Learn more about [.txt](https://twitter.com/dottxtai), and  [give our .json API a try](https://h1xbpbfsf0w.typeform.com/to/ZgBCvJHF) if you need a hosted solution ✨\n\n## Structured generation\n\nThe first step towards reliability of systems that include large language models\nis to ensure that there is a well-defined interface between their output and\nuser-defined code. **Outlines** provides ways to control the generation of\nlanguage models to make their output more predictable.\n\n### Multiple choices\n\nYou can reduce the completion to a choice between multiple possibilities:\n\n``` python\nimport outlines\n\nmodel = outlines.models.transformers(\"microsoft/Phi-3-mini-4k-instruct\")\n\nprompt = \"\"\"You are a sentiment-labelling assistant.\nIs the following review positive or negative?\n\nReview: This restaurant is just awesome!\n\"\"\"\n\ngenerator = outlines.generate.choice(model, [\"Positive\", \"Negative\"])\nanswer = generator(prompt)\n```\n\nYou can also pass these choices through en enum:\n\n````python\nfrom enum import Enum\n\nimport outlines\n\nclass Sentiment(str, Enum):\n    positive = \"Positive\"\n    negative = \"Negative\"\n\nmodel = outlines.models.transformers(\"microsoft/Phi-3-mini-4k-instruct\")\n\nprompt = \"\"\"You are a sentiment-labelling assistant.\nIs the following review positive or negative?\n\nReview: This restaurant is just awesome!\n\"\"\"\n\ngenerator = outlines.generate.choice(model, Sentiment)\nanswer = generator(prompt)\n````\n\n### Type constraint\n\nYou can instruct the model to only return integers or floats:\n\n\n``` python\nimport outlines\n\nmodel = outlines.models.transformers(\"WizardLM/WizardMath-7B-V1.1\")\n\nprompt = \"<s>result of 9 + 9 = 18</s><s>result of 1 + 2 = \"\nanswer = outlines.generate.format(model, int)(prompt)\nprint(answer)\n# 3\n\nprompt = \"sqrt(2)=\"\ngenerator = outlines.generate.format(model, float)\nanswer = generator(prompt, max_tokens=10)\nprint(answer)\n# 1.41421356\n```\n\n### Efficient regex-structured generation\n\nOutlines also comes with fast regex-structured generation. In fact, the `choice` and\n`format` functions above all use regex-structured generation under the\nhood:\n\n``` python\nimport outlines\n\nmodel = outlines.models.transformers(\"microsoft/Phi-3-mini-4k-instruct\")\n\nprompt = \"What is the IP address of the Google DNS servers? \"\n\ngenerator = outlines.generate.text(model)\nunstructured = generator(prompt, max_tokens=30)\n\ngenerator = outlines.generate.regex(\n    model,\n    r\"((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\",\n)\nstructured = generator(prompt, max_tokens=30)\n\nprint(unstructured)\n# What is the IP address of the Google DNS servers?\n#\n# Passive DNS servers are at DNS servers that are private.\n# In other words, both IP servers are private. The database\n# does not contain Chelsea Manning\n\nprint(structured)\n# What is the IP address of the Google DNS servers?\n# 2.2.6.1\n```\n\nUnlike other libraries, regex-structured generation in Outlines is almost as fast\nas non-structured generation.\n\n### Efficient JSON generation following a Pydantic model\n\nOutlines  allows to guide the generation process so the output is *guaranteed* to follow a [JSON schema](https://json-schema.org/) or [Pydantic model](https://docs.pydantic.dev/latest/):\n\n```python\nfrom enum import Enum\nfrom pydantic import BaseModel, constr\n\nimport outlines\nimport torch\n\n\nclass Weapon(str, Enum):\n    sword = \"sword\"\n    axe = \"axe\"\n    mace = \"mace\"\n    spear = \"spear\"\n    bow = \"bow\"\n    crossbow = \"crossbow\"\n\n\nclass Armor(str, Enum):\n    leather = \"leather\"\n    chainmail = \"chainmail\"\n    plate = \"plate\"\n\n\nclass Character(BaseModel):\n    name: constr(max_length=10)\n    age: int\n    armor: Armor\n    weapon: Weapon\n    strength: int\n\n\nmodel = outlines.models.transformers(\"microsoft/Phi-3-mini-4k-instruct\")\n\n# Construct structured sequence generator\ngenerator = outlines.generate.json(model, Character)\n\n# Draw a sample\nseed = 789001\n\ncharacter = generator(\"Give me a character description\", seed=seed)\n\nprint(repr(character))\n# Character(name='Anderson', age=28, armor=<Armor.chainmail: 'chainmail'>, weapon=<Weapon.sword: 'sword'>, strength=8)\n\ncharacter = generator(\"Give me an interesting character description\")\n\nprint(repr(character))\n# Character(name='Vivian Thr', age=44, armor=<Armor.plate: 'plate'>, weapon=<Weapon.crossbow: 'crossbow'>, strength=125)\n```\n\nThe method works with union types, optional types, arrays, nested schemas, etc. Some field constraints are [not supported yet](https://github.com/dottxt-ai/outlines/issues/215), but everything else should work.\n\n### Efficient JSON generation following a JSON Schema\n\nSometimes you just want to be able to pass a JSON Schema instead of a Pydantic model. We've got you covered:\n\n``` python\nimport outlines\n\nschema = '''{\n    \"title\": \"Character\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\n            \"title\": \"Name\",\n            \"maxLength\": 10,\n            \"type\": \"string\"\n        },\n        \"age\": {\n            \"title\": \"Age\",\n            \"type\": \"integer\"\n        },\n        \"armor\": {\"$ref\": \"#/definitions/Armor\"},\n        \"weapon\": {\"$ref\": \"#/definitions/Weapon\"},\n        \"strength\": {\n            \"title\": \"Strength\",\n            \"type\": \"integer\"\n        }\n    },\n    \"required\": [\"name\", \"age\", \"armor\", \"weapon\", \"strength\"],\n    \"definitions\": {\n        \"Armor\": {\n            \"title\": \"Armor\",\n            \"description\": \"An enumeration.\",\n            \"enum\": [\"leather\", \"chainmail\", \"plate\"],\n            \"type\": \"string\"\n        },\n        \"Weapon\": {\n            \"title\": \"Weapon\",\n            \"description\": \"An enumeration.\",\n            \"enum\": [\"sword\", \"axe\", \"mace\", \"spear\", \"bow\", \"crossbow\"],\n            \"type\": \"string\"\n        }\n    }\n}'''\n\nmodel = outlines.models.transformers(\"microsoft/Phi-3-mini-4k-instruct\")\ngenerator = outlines.generate.json(model, schema)\ncharacter = generator(\"Give me a character description\")\n```\n\n### Using context-free grammars to guide generation\n\nFormal grammars rule the world, and Outlines makes them rule LLMs too. You can pass any context-free grammar in the EBNF format and Outlines will generate an output that is valid to this grammar:\n\n``` python\nimport outlines\n\narithmetic_grammar = \"\"\"\n    ?start: expression\n\n    ?expression: term ((\"+\" | \"-\") term)*\n\n    ?term: factor ((\"*\" | \"/\") factor)*\n\n    ?factor: NUMBER\n           | \"-\" factor\n           | \"(\" expression \")\"\n\n    %import common.NUMBER\n\"\"\"\n\nmodel = outlines.models.transformers(\"WizardLM/WizardMath-7B-V1.1\")\ngenerator = outlines.generate.cfg(model, arithmetic_grammar)\nsequence = generator(\"Alice had 4 apples and Bob ate 2. Write an expression for Alice's apples:\")\n\nprint(sequence)\n# (8-2)\n```\n\nThis was a very simple grammar, and you can use `outlines.generate.cfg` to generate syntactically valid Python, SQL, and much more than this. Any kind of structured text, really. All you have to do is search for \"X EBNF grammar\" on the web, and take a look at the [Outlines `grammars` module](https://github.com/dottxt-ai/outlines/tree/main/outlines/grammars).\n\n### Open functions\n\nOutlines can infer the structure of the output from the signature of a function. The result is a dictionary, and can be passed directly to the function using the usual dictionary expansion syntax `**`:\n\n```python\nimport outlines\n\n\ndef add(a: int, b: int):\n    return a + b\n\nmodel = outlines.models.transformers(\"WizardLM/WizardMath-7B-V1.1\")\ngenerator = outlines.generate.json(model, add)\nresult = generator(\"Return json with two integers named a and b respectively. a is odd and b even.\")\n\nprint(add(**result))\n# 3\n```\n\nA great advantage of passing functions directly to specify the structure is that the structure of the LLM will change with the function's definition. No need to change the code at several places!\n\nYou can also embed various functions into an enum to generate params:\n\n```python\nfrom enum import Enum\nfrom functools import partial\n\nimport outlines\n\n\ndef add(a: int, b: int) -> int:\n    return a + b\n\ndef mul(c: float, d: float) -> float:\n    return c * d\n\nclass Operation(Enum):\n    add = partial(add)\n    mul = partial(mul)\n\nmodel = outlines.models.transformers(\"WizardLM/WizardMath-7B-V1.1\")\ngenerator = outlines.generate.json(model, add)\nresult = generator(\"Return json with two float named c and d respectively. c is negative and d greater than 1.0.\")\n\nprint(result)\n# {'c': -3.14, 'd': 1.5}\n```\n\n## Prompting\n\nBuilding prompts can get messy. **Outlines** makes it easier to write and manage\nprompts by encapsulating templates inside \"template functions\".\n\nThese functions make it possible to neatly separate the prompt logic from the\ngeneral program logic; they can be imported from other modules and libraries.\n\nTemplate functions require no superfluous abstraction, they use the Jinja2\ntemplating engine to help build complex prompts in a concise manner:\n\n``` python\nimport outlines\n\nexamples = [\n    (\"The food was disgusting\", \"Negative\"),\n    (\"We had a fantastic night\", \"Positive\"),\n    (\"Recommended\", \"Positive\"),\n    (\"The waiter was rude\", \"Negative\")\n]\n\n@outlines.prompt\ndef labelling(to_label, examples):\n    \"\"\"You are a sentiment-labelling assistant.\n\n    {% for example in examples %}\n    {{ example[0] }} // {{ example[1] }}\n    {% endfor %}\n    {{ to_label }} //\n    \"\"\"\n\nmodel = outlines.models.transformers(\"microsoft/Phi-3-mini-4k-instruct\")\nprompt = labelling(\"Just awesome\", examples)\nanswer = outlines.generate.text(model)(prompt, max_tokens=100)\n```\n\n## Join us\n\n- 💡 **Have an idea?** Come chat with us on [Discord][discord]\n- 🔨 **Want to contribute?** Consult our [contribution guide](https://dottxt-ai.github.io/outlines/latest/community/contribute/).\n- 🐞 **Found a bug?** Open an [issue](https://github.com/dottxt-ai/outlines/issues)\n\n\n## Cite Outlines\n\n```\n@article{willard2023efficient,\n  title={Efficient Guided Generation for LLMs},\n  author={Willard, Brandon T and Louf, R{\\'e}mi},\n  journal={arXiv preprint arXiv:2307.09702},\n  year={2023}\n}\n```\n\n[documentation]: https://dottxt-ai.github.io/outlines/latest/welcome/\n[documentation-badge]: https://img.shields.io/readthedocs/outlines\n[contributors]: https://github.com/dottxt-ai/outlines/graphs/contributors\n[contributors-badge]: https://img.shields.io/github/contributors/dottxt-ai/outlines?style=flat-square&logo=github&logoColor=white&color=ECEFF4\n[dottxt-twitter]: https://twitter.com/dottxtai\n[discord]: https://discord.gg/R9DSu34mGd\n[discord-badge]: https://img.shields.io/discord/1182316225284554793?color=81A1C1&logo=discord&logoColor=white&style=flat-square\n[downloads-badge]: https://img.shields.io/pypi/dm/outlines?color=89AC6B&logo=python&logoColor=white&style=flat-square\n[pypistats]: https://pypistats.org/packages/outlines\n[dottxt-twitter-badge]: https://img.shields.io/twitter/follow/dottxtai?style=social\n[youtube-dottxt]: https://www.youtube.com/@dottxt-ai\n[blog-dottxt]: https://blog.dottxt.co/\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "environment.yml",
          "type": "blob",
          "size": 0.361328125,
          "content": "# To use:\n#\n#   $ conda env create -f environment.yml  # `mamba` works too for this command\n#   $ conda activate dottxt-ai\n#\nname: dottxt-ai\nchannels:\n  - conda-forge\n  - huggingface\ndependencies:\n  - python==3.10.0\n  - jinja2\n  - numpy\n  - pydantic\n  - scipy\n  - pytest\n  - pre-commit\n  - referencing\n  - jsonschema\n  - transformers\n  - pip\n  - pip:\n    - -e \".[test]\"\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 5.7021484375,
          "content": "# Site information\nsite_name: Outlines\nsite_author: The Outlines developers\nsite_description: >-\n  Structured text generation with LLMs\n\n\n# Repository\nrepo_name: dottxt-ai/outlines\nrepo_url: https://github.com/dottxt-ai/outlines\n\n# Copyright\ncopyright: Copyright &copy; 2023- The Outlines Developers\n\n# Configuration\ntheme:\n  name: material\n  custom_dir: docs/overrides\n  palette:\n    - scheme: default\n      primary: white\n  logo: assets/images/logo-square.svg\n  favicon: assets/images/logo-simple.png\n  icon:\n    repo: fontawesome/brands/github\n  features:\n    - content.code.copy\n    - navigation.expand\n    - navigation.tabs\n    - navigation.sections\n    - header.autohide\n    - announce.dismiss\n  font:\n    text: Inter\n    code: Source Code Pro\n\n# Additional configuration\nextra:\n  social:\n    - icon: fontawesome/brands/github\n      link: https://github.com/dottxt-ai\n    - icon: fontawesome/brands/twitter\n      link: https://twitter.com/remilouf\n  generator: false\n  analytics:\n    provider: google\n    property: !ENV GOOGLE_ANALYTICS_KEY\n  version:\n    provider: mike\n    default: latest\n    alias: true\n\n# Extensions\nmarkdown_extensions:\n  - admonition\n  - def_list\n  - attr_list\n  - md_in_html\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n      noclasses: True\n      pygments_style: nord\n  - pymdownx.superfences:\n      custom_fences:\n        - name: mermaid\n          class: mermaid\n          format: !!python/name:pymdownx.superfences.fence_code_format\n  - pymdownx.tabbed:\n      alternate_style: true\n  - pymdownx.inlinehilite\n  - pymdownx.details\n  - pymdownx.emoji:\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n  - pymdownx.snippets:\n\n\nextra_css:\n  - stylesheets/extra.css\n\nplugins:\n  - blog\n  - mkdocstrings:\n      default_handler: python\n      handlers:\n        python:\n          options:\n            docstring_style: numpy\n            show_submodules: true\n  - search\n  - section-index\n  - social:\n      cards_layout_options:\n        color: #173a58\n  - git-committers:\n      repository: dottxt-ai/outlines\n      branch: main\n  - git-revision-date-localized:\n      enable_creation_date: true\n      type: timeago\n\nnav:\n  - Home: index.md\n  - Getting Started:\n      - Welcome to Outlines: welcome.md\n      - Installation: installation.md\n      - Quickstart: quickstart.md\n      - Licence: licence.md\n  - Cookbook:\n      - cookbook/index.md\n      - Classification: cookbook/classification.md\n      - Named Entity Extraction: cookbook/extraction.md\n      - Generate synthetic data: cookbook/dating_profiles.md\n      - Summarize a document: cookbook/chain_of_density.md\n      - Playing chess: cookbook/models_playing_chess.md\n      - Perspective-taking prompting: cookbook/simtom.md\n      - Question-answering with citations: cookbook/qa-with-citations.md\n      - Knowledge Graph Extraction: cookbook/knowledge_graph_extraction.md\n      - Structured Generation Workflow: cookbook/structured_generation_workflow.md\n      - Chain of Thought (CoT): cookbook/chain_of_thought.md\n      - ReAct Agent: cookbook/react_agent.md\n      - Vision-Language Models: cookbook/atomic_caption.md\n      - Structured Generation from PDFs: cookbook/read-pdfs.md\n      - Earnings reports to CSV: cookbook/earnings-reports.md\n      - Digitizing receipts with vision models: cookbook/receipt-digitization.md\n      - Extract events details from text: cookbook/extract_event_details.md\n      - Run on the cloud:\n          - BentoML: cookbook/deploy-using-bentoml.md\n          - Cerebrium: cookbook/deploy-using-cerebrium.md\n          - Modal: cookbook/deploy-using-modal.md\n  - Docs:\n    - reference/index.md\n    - Generation:\n        - Overview: reference/generation/generation.md\n        - Text: reference/text.md\n        - Samplers: reference/samplers.md\n        - Structured generation:\n            - How does it work?: reference/generation/structured_generation_explanation.md\n            - Classification: reference/generation/choices.md\n            - Regex: reference/generation/regex.md\n            - Type constraints: reference/generation/format.md\n            - JSON (function calling): reference/generation/json.md\n            - Grammar: reference/generation/cfg.md\n            - Creating Grammars: reference/generation/creating_grammars.md\n            - Custom FSM operations: reference/generation/custom_fsm_ops.md\n    - Utilities:\n        - Serve with vLLM: reference/serve/vllm.md\n        - Serve with LM Studio: reference/serve/lmstudio.md\n        - Custom types: reference/generation/types.md\n        - Prompt templating: reference/prompting.md\n        - Outlines functions: reference/functions.md\n    - Models:\n        - Overview: reference/models/models.md\n        - Open source:\n          - Transformers: reference/models/transformers.md\n          - Transformers Vision: reference/models/transformers_vision.md\n          - Llama.cpp: reference/models/llamacpp.md\n          - vLLM: reference/models/vllm.md\n          - TGI: reference/models/tgi.md\n          - ExllamaV2: reference/models/exllamav2.md\n          - MLX: reference/models/mlxlm.md\n          - Mamba: reference/models/transformers/#mamba\n        - API:\n            - OpenAI: reference/models/openai.md\n  - API Reference:\n    - api/index.md\n    - api/models.md\n    - api/prompts.md\n    - api/json_schema.md\n    - api/guide.md\n    - api/parsing.md\n    - api/regex.md\n    - api/samplers.md\n  - Community:\n    - community/index.md\n    - Feedback 🫶: community/feedback.md\n    - Chat with us ☕: https://discord.com/invite/R9DSu34mGd\n    - How to contribute 🏗️: community/contribute.md\n    - Your projects 👏: community/examples.md\n    - Versioning Guide 📌: community/versioning.md\n  - Blog: blog/index.md\n"
        },
        {
          "name": "outlines",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 3.6103515625,
          "content": "[build-system]\nrequires = [\"setuptools>=45\", \"setuptools_scm[toml]>=6.2\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"outlines\"\nauthors= [{name = \"Outlines Developers\"}]\ndescription = \"Probabilistic Generative Model Programming\"\nrequires-python = \">=3.9\"\nlicense = {text = \"Apache-2.0\"}\nkeywords=[\n    \"machine learning\",\n    \"deep learning\",\n    \"language models\",\n    \"structured generation\",\n]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: Information Technology\",\n    \"Intended Audience :: Science/Research\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python :: 3\",\n    \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n]\ndependencies = [\n   \"interegular\",\n   \"jinja2\",\n   \"lark\",\n   \"nest_asyncio\",\n   \"numpy\",\n   \"cloudpickle\",\n   \"diskcache\",\n   \"pydantic>=2.0\",\n   \"referencing\",\n   \"jsonschema\",\n   \"requests\",\n   \"tqdm\",\n   \"typing_extensions\",\n   \"pycountry\",\n   \"airportsdata\",\n   \"torch\",\n   \"outlines_core==0.1.26\",\n]\ndynamic = [\"version\"]\n\n[project.optional-dependencies]\nvllm = [\"vllm\", \"transformers\", \"numpy<2\"]\ntransformers = [\"transformers\", \"accelerate\", \"datasets\", \"numpy<2\"]\nmlxlm = [\"mlx-lm\", \"datasets\"]\nopenai = [\"openai\"]\nllamacpp = [\"llama-cpp-python\", \"transformers\", \"datasets\", \"numpy<2\"]\nexllamav2 = [\"exllamav2\"]\ntest = [\n    \"pre-commit\",\n    \"pytest\",\n    \"pytest-benchmark\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n    \"coverage[toml]>=5.1\",\n    \"diff-cover\",\n    \"accelerate\",\n    \"beartype<0.16.0\",\n    \"responses\",\n    \"llama-cpp-python\",\n    \"mlx-lm>=0.19.2; platform_machine == 'arm64' and sys_platform == 'darwin'\",\n    \"huggingface_hub\",\n    \"openai>=1.0.0\",\n    \"datasets\",\n    \"vllm; sys_platform == 'linux'\",\n    \"transformers\",\n    \"pillow\",\n    \"exllamav2\",\n    \"jax\"\n]\nserve = [\n    \"vllm>=0.3.0\",\n    \"uvicorn\",\n    \"fastapi\",\n    \"pydantic>=2.0\",\n]\n\n[project.urls]\nhomepage = \"https://github.com/dottxt-ai/outlines\"\ndocumentation = \"https://dottxt-ai.github.io/outlines/\"\nrepository = \"https://github.com/dottxt-ai/outlines\"\n\n[project.readme]\nfile=\"README.md\"\ncontent-type = \"text/markdown\"\n\n[tool.setuptools]\npackages = [\"outlines\"]\n\n[tool.setuptools.package-data]\n\"outlines\" = [\"py.typed\"]\n\n[tool.setuptools_scm]\nwrite_to = \"outlines/_version.py\"\n\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\nfilterwarnings = [\n    \"error\",\n    \"ignore::pydantic.warnings.PydanticDeprecatedSince20\",\n    \"ignore::FutureWarning:transformers.*\",\n    \"ignore::FutureWarning:huggingface_hub.*\",\n    \"ignore::UserWarning\",\n    \"ignore::DeprecationWarning:pyairports.*\",\n]\n\n[tool.mypy]\nexclude=[\"examples\"]\nenable_incomplete_feature = [\"Unpack\"]\n\n[[tool.mypy.overrides]]\nmodule = [\n    \"exllamav2.*\",\n    \"jax\",\n    \"jaxlib\",\n    \"jax.numpy\",\n    \"jinja2\",\n    \"jsonschema.*\",\n    \"openai.*\",\n    \"mamba_ssm.*\",\n    \"mlx_lm.*\",\n    \"mlx.*\",\n    \"nest_asyncio\",\n    \"numpy.*\",\n    \"cloudpickle.*\",\n    \"diskcache.*\",\n    \"pydantic.*\",\n    \"pytest\",\n    \"referencing.*\",\n    \"torch.*\",\n    \"transformers.*\",\n    \"llama_cpp\",\n    \"huggingface_hub\",\n    \"lark.*\",\n    \"interegular.*\",\n    \"datasets.*\",\n    \"requests.*\",\n    \"responses.*\",\n    \"vllm.*\",\n    \"uvicorn.*\",\n    \"fastapi.*\",\n    \"pycountry.*\",\n    \"airportsdata.*\",\n    \"outlines_core.*\",\n]\nignore_missing_imports = true\n\n[tool.coverage.run]\nomit = [\n    \"outlines/_version.py\",\n    \"tests/*\",\n]\nbranch = true\nrelative_files = true\n\n[tool.coverage.report]\nomit = [\n    \"tests/*\",\n]\nexclude_lines = [\n    \"pragma: no cover\",\n    \"if TYPE_CHECKING:\",\n    \"\\\\.\\\\.\\\\.\",\n]\nshow_missing = true\n\n[tool.diff_cover]\ncompare_branch = \"origin/main\"\ndiff_range_notation = \"..\"\n"
        },
        {
          "name": "requirements-doc.txt",
          "type": "blob",
          "size": 0.1865234375,
          "content": "mkdocs\nmkdocs-material\nmkdocs-material[imaging]\nmkdocs-mermaid2-plugin\nmkdocs-section-index\nmkdocstrings[python]\nmkdocs-git-committers-plugin-2\nmkdocs-git-revision-date-localized-plugin\nmike\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.1748046875,
          "content": "[flake8]\nmax-line-length = 88\nselect = C,E,F,W\nignore = E203,E231,E501,E741,W503,W504,C901,E731\nper-file-ignores =\n    **/__init__.py:F401,F403\nexclude =\n    normalai/_version.py\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}