{
  "metadata": {
    "timestamp": 1736561340782,
    "page": 364,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "guoyww/AnimateDiff",
      "stars": 10834,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3837890625,
          "content": "wandb/\n*debug*\ndebugs/\noutputs/\nsamples/\n__pycache__/\nossutil_output/\n.ossutil_checkpoint/\n\nscripts/*\n!scripts/animate.py\n\n*.ipynb\n*.safetensors\n*.ckpt\n\nmodels/*\n!models/StableDiffusion/\nmodels/StableDiffusion/*\n!models/StableDiffusion/*.txt\n!models/Motion_Module/\n!models/Motion_Module/*.txt\n!models/DreamBooth_LoRA/\n!models/DreamBooth_LoRA/*.txt\n!models/MotionLoRA/\n!models/MotionLoRA/*.txt\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.9169921875,
          "content": "# AnimateDiff\n\nThis repository is the official implementation of [AnimateDiff](https://arxiv.org/abs/2307.04725) [ICLR2024 Spotlight].\nIt is a plug-and-play module turning most community text-to-image models into animation generators, without the need of additional training.\n\n**[AnimateDiff: Animate Your Personalized Text-to-Image Diffusion Models without Specific Tuning](https://arxiv.org/abs/2307.04725)** \n</br>\n[Yuwei Guo](https://guoyww.github.io/),\n[Ceyuan Yang✝](https://ceyuan.me/),\n[Anyi Rao](https://anyirao.com/),\n[Zhengyang Liang](https://maxleung99.github.io/),\n[Yaohui Wang](https://wyhsirius.github.io/),\n[Yu Qiao](https://scholar.google.com.hk/citations?user=gFtI-8QAAAAJ),\n[Maneesh Agrawala](https://graphics.stanford.edu/~maneesh/),\n[Dahua Lin](http://dahua.site),\n[Bo Dai](https://daibo.info)\n(✝Corresponding Author)  \n[![arXiv](https://img.shields.io/badge/arXiv-2307.04725-b31b1b.svg)](https://arxiv.org/abs/2307.04725)\n[![Project Page](https://img.shields.io/badge/Project-Website-green)](https://animatediff.github.io/)\n[![Open in OpenXLab](https://cdn-static.openxlab.org.cn/app-center/openxlab_app.svg)](https://openxlab.org.cn/apps/detail/Masbfca/AnimateDiff)\n[![Hugging Face Spaces](https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-yellow)](https://huggingface.co/spaces/guoyww/AnimateDiff)\n\n***Note:*** The `main` branch is for [Stable Diffusion V1.5](https://huggingface.co/runwayml/stable-diffusion-v1-5); for [Stable Diffusion XL](https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0), please refer `sdxl-beta` branch.\n\n\n## Quick Demos\nMore results can be found in the [Gallery](__assets__/docs/gallery.md).\nSome of them are contributed by the community.\n\n<table class=\"center\">\n    <tr>\n    <td><img src=\"__assets__/animations/model_01/01.gif\"></td>\n    <td><img src=\"__assets__/animations/model_01/02.gif\"></td>\n    <td><img src=\"__assets__/animations/model_01/03.gif\"></td>\n    <td><img src=\"__assets__/animations/model_01/04.gif\"></td>\n    </tr>\n</table>\n<p style=\"margin-left: 2em; margin-top: -1em\">Model：<a href=\"https://civitai.com/models/30240/toonyou\">ToonYou</a></p>\n\n<table>\n    <tr>\n    <td><img src=\"__assets__/animations/model_03/01.gif\"></td>\n    <td><img src=\"__assets__/animations/model_03/02.gif\"></td>\n    <td><img src=\"__assets__/animations/model_03/03.gif\"></td>\n    <td><img src=\"__assets__/animations/model_03/04.gif\"></td>\n    </tr>\n</table>\n<p style=\"margin-left: 2em; margin-top: -1em\">Model：<a href=\"https://civitai.com/models/4201/realistic-vision-v20\">Realistic Vision V2.0</a></p>\n\n\n## Quick Start\n***Note:*** AnimateDiff is also offically supported by Diffusers.\nVisit [AnimateDiff Diffusers Tutorial](https://huggingface.co/docs/diffusers/api/pipelines/animatediff) for more details.\n*Following instructions is for working with this repository*.\n\n***Note:*** For all scripts, checkpoint downloading will be *automatically* handled, so the script running may take longer time when first executed.\n\n### 1. Setup repository and environment\n\n```\ngit clone https://github.com/guoyww/AnimateDiff.git\ncd AnimateDiff\n\npip install -r requirements.txt\n```\n\n### 2. Launch the sampling script!\nThe generated samples can be found in `samples/` folder.\n\n#### 2.1 Generate animations with comunity models\n```\npython -m scripts.animate --config configs/prompts/1_animate/1_1_animate_RealisticVision.yaml\npython -m scripts.animate --config configs/prompts/1_animate/1_2_animate_FilmVelvia.yaml\npython -m scripts.animate --config configs/prompts/1_animate/1_3_animate_ToonYou.yaml\npython -m scripts.animate --config configs/prompts/1_animate/1_4_animate_MajicMix.yaml\npython -m scripts.animate --config configs/prompts/1_animate/1_5_animate_RcnzCartoon.yaml\npython -m scripts.animate --config configs/prompts/1_animate/1_6_animate_Lyriel.yaml\npython -m scripts.animate --config configs/prompts/1_animate/1_7_animate_Tusun.yaml\n```\n\n#### 2.2 Generate animation with MotionLoRA control\n```\npython -m scripts.animate --config configs/prompts/2_motionlora/2_motionlora_RealisticVision.yaml\n```\n\n#### 2.3 More control with SparseCtrl RGB and sketch\n```\npython -m scripts.animate --config configs/prompts/3_sparsectrl/3_1_sparsectrl_i2v.yaml\npython -m scripts.animate --config configs/prompts/3_sparsectrl/3_2_sparsectrl_rgb_RealisticVision.yaml\npython -m scripts.animate --config configs/prompts/3_sparsectrl/3_3_sparsectrl_sketch_RealisticVision.yaml\n```\n\n#### 2.4 Gradio app\nWe created a Gradio demo to make AnimateDiff easier to use. \nBy default, the demo will run at `localhost:7860`.\n```\npython -u app.py\n```\n<img src=\"__assets__/figs/gradio.jpg\" style=\"width: 75%\">\n\n\n## Technical Explanation\n<details close>\n<summary>Technical Explanation</summary>\n\n### AnimateDiff\n\n**AnimateDiff aims to learn transferable motion priors that can be applied to other variants of Stable Diffusion family.**\nTo this end, we design the following training pipeline consisting of three stages.\n\n<img src=\"__assets__/figs/adapter_explain.png\" style=\"width:100%\">\n\n- In **1. Alleviate Negative Effects** stage, we train the **domain adapter**, e.g., `v3_sd15_adapter.ckpt`, to fit defective visual aritfacts (e.g., watermarks) in the training dataset.\nThis can also benefit the distangled learning of motion and spatial appearance.\nBy default, the adapter can be removed at inference. It can also be integrated into the model and its effects can be adjusted by a lora scaler.\n\n- In **2. Learn Motion Priors** stage, we train the **motion module**, e.g., `v3_sd15_mm.ckpt`, to learn the real-world motion patterns from videos.\n\n- In **3. (optional) Adapt to New Patterns** stage, we train **MotionLoRA**, e.g., `v2_lora_ZoomIn.ckpt`, to efficiently adapt motion module for specific motion patterns (camera zooming, rolling, etc.).\n\n### SparseCtrl\n\n**SparseCtrl aims to add more control to text-to-video models by adopting some sparse inputs (e.g., few RGB images or sketch inputs).**\nIts technicall details can be found in the following paper:\n\n**[SparseCtrl: Adding Sparse Controls to Text-to-Video Diffusion Models](https://arxiv.org/abs/2311.16933)**  \n[Yuwei Guo](https://guoyww.github.io/),\n[Ceyuan Yang✝](https://ceyuan.me/),\n[Anyi Rao](https://anyirao.com/),\n[Maneesh Agrawala](https://graphics.stanford.edu/~maneesh/),\n[Dahua Lin](http://dahua.site),\n[Bo Dai](https://daibo.info)\n(✝Corresponding Author)  \n[![arXiv](https://img.shields.io/badge/arXiv-2311.16933-b31b1b.svg)](https://arxiv.org/abs/2311.16933)\n[![Project Page](https://img.shields.io/badge/Project-Website-green)](https://guoyww.github.io/projects/SparseCtrl/)\n\n</details>\n\n\n## Model Versions\n<details close>\n<summary>Model Versions</summary>\n\n### AnimateDiff v3 and SparseCtrl (2023.12)\n\nIn this version, we use **Domain Adapter LoRA** for image model finetuning, which provides more flexiblity at inference.\nWe also implement two (RGB image/scribble) [SparseCtrl](https://arxiv.org/abs/2311.16933) encoders, which can take abitary number of condition maps to control the animation contents.\n\n<details close>\n<summary>AnimateDiff v3 Model Zoo</summary>\n\n| Name | HuggingFace | Type | Storage | Description |\n| - | - | - | - | - |\n| `v3_adapter_sd_v15.ckpt` | [Link](https://huggingface.co/guoyww/animatediff/blob/main/v3_sd15_adapter.ckpt) | Domain Adapter | 97.4 MB | |\n| `v3_sd15_mm.ckpt.ckpt` | [Link](https://huggingface.co/guoyww/animatediff/blob/main/v3_sd15_mm.ckpt) | Motion Module | 1.56 GB | |\n| `v3_sd15_sparsectrl_scribble.ckpt` | [Link](https://huggingface.co/guoyww/animatediff/blob/main/v3_sd15_sparsectrl_scribble.ckpt) | SparseCtrl Encoder | 1.86 GB | scribble condition |\n| `v3_sd15_sparsectrl_rgb.ckpt` | [Link](https://huggingface.co/guoyww/animatediff/blob/main/v3_sd15_sparsectrl_rgb.ckpt) | SparseCtrl Encoder | 1.85 GB | RGB image condition |\n</details>\n\n#### Limitations\n1. Small fickering is noticable;\n2. To stay compatible with comunity models, there is no specific optimizations for general T2V, leading to limited visual quality under this setting;\n3. **(Style Alignment) For usage such as image animation/interpolation, it's recommanded to use images generated by the same community model.**\n\n#### Demos\n<table class=\"center\">\n    <tr style=\"line-height: 0\">\n    <td width=25% style=\"border: none; text-align: center\">Input (by RealisticVision)</td>\n    <td width=25% style=\"border: none; text-align: center\">Animation</td>\n    <td width=25% style=\"border: none; text-align: center\">Input</td>\n    <td width=25% style=\"border: none; text-align: center\">Animation</td>\n    </tr>\n    <tr>\n    <td width=25% style=\"border: none\"><img src=\"__assets__/demos/image/RealisticVision_firework.png\" style=\"width:100%\"></td>\n    <td width=25% style=\"border: none\"><img src=\"__assets__/animations/v3/animation_fireworks.gif\" style=\"width:100%\"></td>\n    <td width=25% style=\"border: none\"><img src=\"__assets__/demos/image/RealisticVision_sunset.png\" style=\"width:100%\"></td>\n    <td width=25% style=\"border: none\"><img src=\"__assets__/animations/v3/animation_sunset.gif\" style=\"width:100%\"></td>\n    </tr>\n</table>\n\n<table class=\"center\">\n    <tr style=\"line-height: 0\">\n    <td width=25% style=\"border: none; text-align: center\">Input Scribble</td>\n    <td width=25% style=\"border: none; text-align: center\">Output</td>\n    <td width=25% style=\"border: none; text-align: center\">Input Scribbles</td>\n    <td width=25% style=\"border: none; text-align: center\">Output</td>\n    </tr>\n    <tr>\n      <td width=25% style=\"border: none\"><img src=\"__assets__/demos/scribble/scribble_1.png\" style=\"width:100%\"></td>\n      <td width=25% style=\"border: none\"><img src=\"__assets__/animations/v3/sketch_boy.gif\" style=\"width:100%\"></td>\n      <td width=25% style=\"border: none\"><img src=\"__assets__/demos/scribble/scribble_2_readme.png\" style=\"width:100%\"></td>\n      <td width=25% style=\"border: none\"><img src=\"__assets__/animations/v3/sketch_city.gif\" style=\"width:100%\"></td>\n    </tr>\n</table>\n\n\n### AnimateDiff SDXL-Beta (2023.11)\n\nRelease the Motion Module (beta version) on SDXL, available at [Google Drive](https://drive.google.com/file/d/1EK_D9hDOPfJdK4z8YDB8JYvPracNx2SX/view?usp=share_link\n) / [HuggingFace](https://huggingface.co/guoyww/animatediff/blob/main/mm_sdxl_v10_beta.ckpt\n) / [CivitAI](https://civitai.com/models/108836/animatediff-motion-modules). High resolution videos (i.e., 1024x1024x16 frames with various aspect ratios) could be produced **with/without** personalized models. Inference usually requires ~13GB VRAM and tuned hyperparameters (e.g., sampling steps), depending on the chosen personalized models.  \nCheckout to the branch [sdxl](https://github.com/guoyww/AnimateDiff/tree/sdxl) for more details of the inference.\n\n<details close>\n<summary>AnimateDiff SDXL-Beta Model Zoo</summary>\n\n| Name | HuggingFace | Type | Storage Space |\n| - | - | - | - |\n| `mm_sdxl_v10_beta.ckpt` | [Link](https://huggingface.co/guoyww/animatediff/blob/main/mm_sdxl_v10_beta.ckpt) | Motion Module | 950 MB |\n</details>\n\n#### Demos\n<table class=\"center\">\n    <tr style=\"line-height: 0\">\n    <td width=52% style=\"border: none; text-align: center\">Original SDXL</td>\n    <td width=30% style=\"border: none; text-align: center\">Community SDXL</td>\n    <td width=18% style=\"border: none; text-align: center\">Community SDXL</td>\n    </tr>\n    <tr>\n    <td width=52% style=\"border: none\"><img src=\"__assets__/animations/motion_xl/01.gif\" style=\"width:100%\"></td>\n    <td width=30% style=\"border: none\"><img src=\"__assets__/animations/motion_xl/02.gif\" style=\"width:100%\"></td>\n    <td width=18% style=\"border: none\"><img src=\"__assets__/animations/motion_xl/03.gif\" style=\"width:100%\"></td>\n    </tr>\n</table>\n\n\n### AnimateDiff v2 (2023.09)\n\nIn this version, the motion module `mm_sd_v15_v2.ckpt` ([Google Drive](https://drive.google.com/drive/folders/1EqLC65eR1-W-sGD0Im7fkED6c8GkiNFI?usp=sharing) / [HuggingFace](https://huggingface.co/guoyww/animatediff) / [CivitAI](https://civitai.com/models/108836/animatediff-motion-modules)) is trained upon larger resolution and batch size.\nWe found that the scale-up training significantly helps improve the motion quality and diversity.  \nWe also support **MotionLoRA** of eight basic camera movements.\nMotionLoRA checkpoints take up only **77 MB storage per model**, and are available at [Google Drive](https://drive.google.com/drive/folders/1EqLC65eR1-W-sGD0Im7fkED6c8GkiNFI?usp=sharing) / [HuggingFace](https://huggingface.co/guoyww/animatediff) / [CivitAI](https://civitai.com/models/108836/animatediff-motion-modules).\n\n<details close>\n<summary>AnimateDiff v2 Model Zoo</summary>\n\n| Name | HuggingFace | Type | Parameter | Storage |\n| - | - | - | - | - |\n| `mm_sd_v15_v2.ckpt` | [Link](https://huggingface.co/guoyww/animatediff/blob/main/mm_sd_v15_v2.ckpt) | Motion Module | 453 M | 1.7 GB |\n| `v2_lora_ZoomIn.ckpt` | [Link](https://huggingface.co/guoyww/animatediff/blob/main/v2_lora_ZoomIn.ckpt) | MotionLoRA | 19 M | 74 MB |\n| `v2_lora_ZoomOut.ckpt` | [Link](https://huggingface.co/guoyww/animatediff/blob/main/v2_lora_ZoomOut.ckpt) | MotionLoRA | 19 M | 74 MB |\n| `v2_lora_PanLeft.ckpt` | [Link](https://huggingface.co/guoyww/animatediff/blob/main/v2_lora_PanLeft.ckpt) | MotionLoRA | 19 M | 74 MB |\n| `v2_lora_PanRight.ckpt` | [Link](https://huggingface.co/guoyww/animatediff/blob/main/v2_lora_PanRight.ckpt) | MotionLoRA | 19 M | 74 MB |\n| `v2_lora_TiltUp.ckpt` | [Link](https://huggingface.co/guoyww/animatediff/blob/main/v2_lora_TiltUp.ckpt) | MotionLoRA | 19 M | 74 MB |\n| `v2_lora_TiltDown.ckpt` | [Link](https://huggingface.co/guoyww/animatediff/blob/main/v2_lora_TiltDown.ckpt) | MotionLoRA | 19 M | 74 MB |\n| `v2_lora_RollingClockwise.ckpt` | [Link](https://huggingface.co/guoyww/animatediff/blob/main/v2_lora_RollingClockwise.ckpt) | MotionLoRA | 19 M | 74 MB |\n| `v2_lora_RollingAnticlockwise.ckpt` | [Link](https://huggingface.co/guoyww/animatediff/blob/main/v2_lora_RollingAnticlockwise.ckpt) | MotionLoRA | 19 M | 74 MB |\n</details>\n\n\n#### Demos (MotionLoRA)\n<table class=\"center\">\n  <tr style=\"line-height: 0\">\n    <td colspan=\"2\" style=\"border: none; text-align: center\">Zoom In</td>\n    <td colspan=\"2\" style=\"border: none; text-align: center\">Zoom Out</td>\n    <td colspan=\"2\" style=\"border: none; text-align: center\">Zoom Pan Left</td>\n    <td colspan=\"2\" style=\"border: none; text-align: center\">Zoom Pan Right</td>\n  </tr>\n  <tr>\n    <td style=\"border: none\"><img src=\"__assets__/animations/motion_lora/model_01/01.gif\"></td>\n    <td style=\"border: none\"><img src=\"__assets__/animations/motion_lora/model_02/02.gif\"></td>\n    <td style=\"border: none\"><img src=\"__assets__/animations/motion_lora/model_01/02.gif\"></td>\n    <td style=\"border: none\"><img src=\"__assets__/animations/motion_lora/model_02/01.gif\"></td>\n    <td style=\"border: none\"><img src=\"__assets__/animations/motion_lora/model_01/03.gif\"></td>\n    <td style=\"border: none\"><img src=\"__assets__/animations/motion_lora/model_02/04.gif\"></td>\n    <td style=\"border: none\"><img src=\"__assets__/animations/motion_lora/model_01/04.gif\"></td>\n    <td style=\"border: none\"><img src=\"__assets__/animations/motion_lora/model_02/03.gif\"></td>\n  </tr>\n  <tr style=\"line-height: 0\">\n    <td colspan=\"2\" style=\"border: none; text-align: center\">Tilt Up</td>\n    <td colspan=\"2\" style=\"border: none; text-align: center\">Tilt Down</td>\n    <td colspan=\"2\" style=\"border: none; text-align: center\">Rolling Anti-Clockwise</td>\n    <td colspan=\"2\" style=\"border: none; text-align: center\">Rolling Clockwise</td>\n  </tr>\n  <tr>\n    <td style=\"border: none\"><img src=\"__assets__/animations/motion_lora/model_01/05.gif\"></td>\n    <td style=\"border: none\"><img src=\"__assets__/animations/motion_lora/model_02/05.gif\"></td>\n    <td style=\"border: none\"><img src=\"__assets__/animations/motion_lora/model_01/06.gif\"></td>\n    <td style=\"border: none\"><img src=\"__assets__/animations/motion_lora/model_02/06.gif\"></td>\n    <td style=\"border: none\"><img src=\"__assets__/animations/motion_lora/model_01/07.gif\"></td>\n    <td style=\"border: none\"><img src=\"__assets__/animations/motion_lora/model_02/07.gif\"></td>\n    <td style=\"border: none\"><img src=\"__assets__/animations/motion_lora/model_01/08.gif\"></td>\n    <td style=\"border: none\"><img src=\"__assets__/animations/motion_lora/model_02/08.gif\"></td>\n  </tr>\n</table>\n\n\n#### Demos (Improved Motions)\nHere's a comparison between `mm_sd_v15.ckpt` (left) and improved `mm_sd_v15_v2.ckpt` (right).\n\n<table class=\"center\">\n  <tr>\n    <td><img src=\"__assets__/animations/compare/old_0.gif\"></td>\n    <td><img src=\"__assets__/animations/compare/new_0.gif\"></td>\n    <td><img src=\"__assets__/animations/compare/old_1.gif\"></td>\n    <td><img src=\"__assets__/animations/compare/new_1.gif\"></td>\n    <td><img src=\"__assets__/animations/compare/old_2.gif\"></td>\n    <td><img src=\"__assets__/animations/compare/new_2.gif\"></td>\n    <td><img src=\"__assets__/animations/compare/old_3.gif\"></td>\n    <td><img src=\"__assets__/animations/compare/new_3.gif\"></td>\n  </tr>\n</table>\n\n\n### AnimateDiff v1 (2023.07)\n\nThe first version of AnimateDiff!\n\n<details close>\n<summary>AnimateDiff v1 Model Zoo</summary>\n\n| Name | HuggingFace | Parameter | Storage Space |\n| - | - | - | - |\n| mm_sd_v14.ckpt | [Link](https://huggingface.co/guoyww/animatediff/blob/main/mm_sd_v14.ckpt) | 417 M | 1.6 GB |\n| mm_sd_v15.ckpt | [Link](https://huggingface.co/guoyww/animatediff/blob/main/mm_sd_v15.ckpt) | 417 M | 1.6 GB |\n</details>\n\n</details>\n\n\n## Training\nPlease check [Steps for Training](__assets__/docs/animatediff.md) for details.\n\n\n## Related Resources\n\nAnimateDiff for Stable Diffusion WebUI: [sd-webui-animatediff](https://github.com/continue-revolution/sd-webui-animatediff) (by [@continue-revolution](https://github.com/continue-revolution))  \nAnimateDiff for ComfyUI: [ComfyUI-AnimateDiff-Evolved](https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved) (by [@Kosinkadink](https://github.com/Kosinkadink))  \nGoogle Colab: [Colab](https://colab.research.google.com/github/camenduru/AnimateDiff-colab/blob/main/AnimateDiff_colab.ipynb) (by [@camenduru](https://github.com/camenduru))\n\n\n## Disclaimer\nThis project is released for academic use.\nWe disclaim responsibility for user-generated content.\nAlso, please be advised that our only official website are https://github.com/guoyww/AnimateDiff and https://animatediff.github.io, and all the other websites are NOT associated with us at AnimateDiff. \n\n\n## Contact Us\nYuwei Guo: [guoyw@ie.cuhk.edu.hk](mailto:guoyw@ie.cuhk.edu.hk)  \nCeyuan Yang: [limbo0066@gmail.com](mailto:limbo0066@gmail.com)  \nBo Dai: [doubledaibo@gmail.com](mailto:doubledaibo@gmail.com)\n\n\n## BibTeX\n```\n@article{guo2023animatediff,\n  title={AnimateDiff: Animate Your Personalized Text-to-Image Diffusion Models without Specific Tuning},\n  author={Guo, Yuwei and Yang, Ceyuan and Rao, Anyi and Liang, Zhengyang and Wang, Yaohui and Qiao, Yu and Agrawala, Maneesh and Lin, Dahua and Dai, Bo},\n  journal={International Conference on Learning Representations},\n  year={2024}\n}\n\n@article{guo2023sparsectrl,\n  title={SparseCtrl: Adding Sparse Controls to Text-to-Video Diffusion Models},\n  author={Guo, Yuwei and Yang, Ceyuan and Rao, Anyi and Agrawala, Maneesh and Lin, Dahua and Dai, Bo},\n  journal={arXiv preprint arXiv:2311.16933},\n  year={2023}\n}\n```\n\n\n## Acknowledgements\nCodebase built upon [Tune-a-Video](https://github.com/showlab/Tune-A-Video).\n"
        },
        {
          "name": "__assets__",
          "type": "tree",
          "content": null
        },
        {
          "name": "animatediff",
          "type": "tree",
          "content": null
        },
        {
          "name": "app.py",
          "type": "blob",
          "size": 15.056640625,
          "content": "\nimport os\nimport json\nimport torch\nimport random\n\nimport gradio as gr\nfrom glob import glob\nfrom omegaconf import OmegaConf\nfrom datetime import datetime\nfrom safetensors import safe_open\n\nfrom diffusers import AutoencoderKL\nfrom diffusers import DDIMScheduler, EulerDiscreteScheduler, PNDMScheduler\nfrom diffusers.utils.import_utils import is_xformers_available\nfrom transformers import CLIPTextModel, CLIPTokenizer\n\nfrom animatediff.models.unet import UNet3DConditionModel\nfrom animatediff.pipelines.pipeline_animation import AnimationPipeline\nfrom animatediff.utils.util import save_videos_grid, load_weights, auto_download, MOTION_MODULES, BACKUP_DREAMBOOTH_MODELS\nfrom animatediff.utils.convert_from_ckpt import convert_ldm_unet_checkpoint, convert_ldm_clip_checkpoint, convert_ldm_vae_checkpoint\nfrom animatediff.utils.convert_lora_safetensor_to_diffusers import convert_lora\nimport pdb\n\n\nsample_idx = 0\nscheduler_dict = {\n    \"DDIM\": DDIMScheduler,\n    \"Euler\": EulerDiscreteScheduler,\n    \"PNDM\": PNDMScheduler,\n}\n\ncss = \"\"\"\n.toolbutton {\n    margin-buttom: 0em 0em 0em 0em;\n    max-width: 2.5em;\n    min-width: 2.5em !important;\n    height: 2.5em;\n}\n\"\"\"\n\nPRETRAINED_SD = \"runwayml/stable-diffusion-v1-5\"\n\ndefault_motion_module = \"v3_sd15_mm.ckpt\"\ndefault_inference_config = \"configs/inference/inference-v3.yaml\"\ndefault_dreambooth_model = \"realisticVisionV60B1_v51VAE.safetensors\"\ndefault_prompt = \"b&w photo of 42 y.o man in black clothes, bald, face, half body, body, high detailed skin, skin pores, coastline, overcast weather, wind, waves, 8k uhd, dslr, soft lighting, high quality, film grain, Fujifilm XT3\"\ndefault_n_prompt = \"semi-realistic, cgi, 3d, render, sketch, cartoon, drawing, anime, text, close up, cropped, out of frame, worst quality, low quality, jpeg artifacts, ugly, duplicate, morbid, mutilated, extra fingers, mutated hands, poorly drawn hands, poorly drawn face, mutation, deformed, blurry, dehydrated, bad anatomy, bad proportions, extra limbs, cloned face, disfigured, gross proportions, malformed limbs, missing arms, missing legs, extra arms, extra legs, fused fingers, too many fingers, long neck\"\ndefault_seed = 8893659352891878017\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n\n\nclass AnimateController:\n    def __init__(self):\n        # config dirs\n        self.basedir = os.getcwd()\n        self.stable_diffusion_dir = os.path.join(self.basedir, \"models\", \"StableDiffusion\")\n        self.motion_module_dir = os.path.join(self.basedir, \"models\", \"Motion_Module\")\n        self.personalized_model_dir = os.path.join(self.basedir, \"models\", \"DreamBooth_LoRA\")\n        self.savedir = os.path.join(self.basedir, \"samples\", datetime.now().strftime(\"Gradio-%Y-%m-%dT%H-%M-%S\"))\n        self.savedir_sample = os.path.join(self.savedir, \"sample\")\n        os.makedirs(self.savedir, exist_ok=True)\n\n        self.stable_diffusion_list = [PRETRAINED_SD]\n        self.motion_module_list = MOTION_MODULES\n        self.personalized_model_list = BACKUP_DREAMBOOTH_MODELS\n        \n        # config models\n        self.pipeline = None\n        # self.lora_model_state_dict = {}\n        \n        self.refresh_stable_diffusion()\n        self.refresh_personalized_model()\n        \n        # default setting\n        self.update_pipeline(\n            stable_diffusion_dropdown=PRETRAINED_SD,\n            motion_module_dropdown=default_motion_module,\n            base_model_dropdown=default_dreambooth_model,\n            sampler_dropdown=\"DDIM\",\n        )\n\n    def refresh_stable_diffusion(self):\n        self.stable_diffusion_list = [PRETRAINED_SD] + glob(os.path.join(self.stable_diffusion_dir, \"*/\"))\n\n    def refresh_personalized_model(self):\n        personalized_model_list = glob(os.path.join(self.personalized_model_dir, \"*.safetensors\"))\n        self.personalized_model_list = BACKUP_DREAMBOOTH_MODELS + [os.path.basename(p) for p in personalized_model_list if os.path.basename(p) not in BACKUP_DREAMBOOTH_MODELS]\n\n    # for dropdown update\n    def update_pipeline(\n        self,\n        stable_diffusion_dropdown,\n        motion_module_dropdown,\n        base_model_dropdown=\"\",\n        lora_model_dropdown=\"none\",\n        lora_alpha_dropdown=\"0.6\",\n        sampler_dropdown=\"DDIM\",\n    ):\n        if \"v2\" in motion_module_dropdown:\n            inference_config = \"configs/inference/inference-v2.yaml\"\n        elif \"v3\" in motion_module_dropdown:\n            inference_config = \"configs/inference/inference-v3.yaml\"\n        else:\n            inference_config = \"configs/inference/inference-v1.yaml\"\n\n        unet = UNet3DConditionModel.from_pretrained_2d(\n            stable_diffusion_dropdown, subfolder=\"unet\", \n            unet_additional_kwargs=OmegaConf.load(inference_config).unet_additional_kwargs\n        )\n        if is_xformers_available() and torch.cuda.is_available():\n            unet.enable_xformers_memory_efficient_attention()\n\n        noise_scheduler_cls = scheduler_dict[sampler_dropdown]\n        noise_scheduler_kwargs = OmegaConf.load(inference_config).noise_scheduler_kwargs\n        if noise_scheduler_cls == EulerDiscreteScheduler:\n            noise_scheduler_kwargs.pop(\"steps_offset\")\n            noise_scheduler_kwargs.pop(\"clip_sample\")\n        elif noise_scheduler_cls == PNDMScheduler:\n            noise_scheduler_kwargs.pop(\"clip_sample\")\n\n        pipeline = AnimationPipeline(\n            unet=unet,\n            vae=AutoencoderKL.from_pretrained(stable_diffusion_dropdown, subfolder=\"vae\"), \n            text_encoder=CLIPTextModel.from_pretrained(stable_diffusion_dropdown, subfolder=\"text_encoder\"), \n            tokenizer=CLIPTokenizer.from_pretrained(stable_diffusion_dropdown, subfolder=\"tokenizer\"), \n            scheduler=noise_scheduler_cls(**noise_scheduler_kwargs),\n        )\n\n        pipeline = load_weights(\n            pipeline,\n            motion_module_path=os.path.join(self.motion_module_dir, motion_module_dropdown),\n            dreambooth_model_path=os.path.join(self.personalized_model_dir, base_model_dropdown) if base_model_dropdown != \"\" else \"\",\n            lora_model_path=os.path.join(self.personalized_model_dir, lora_model_dropdown) if lora_model_dropdown != \"none\" else \"\",\n            lora_alpha=float(lora_alpha_dropdown),\n        )\n\n        pipeline.to(device)\n        self.pipeline = pipeline\n        print(\"done.\")\n\n        return gr.Dropdown.update()\n\n    def update_pipeline_alpha(\n        self,\n        stable_diffusion_dropdown,\n        motion_module_dropdown,\n        base_model_dropdown=\"\",\n        lora_model_dropdown=\"none\",\n        lora_alpha_dropdown=\"0.6\",\n        sampler_dropdown=\"DDIM\",\n    ):\n        if lora_model_dropdown == \"none\":\n            return gr.Slider.update()\n\n        self.update_pipeline(\n            stable_diffusion_dropdown=stable_diffusion_dropdown,\n            motion_module_dropdown=motion_module_dropdown,\n            base_model_dropdown=base_model_dropdown,\n            lora_model_dropdown=lora_model_dropdown,\n            lora_alpha_dropdown=lora_alpha_dropdown,\n            sampler_dropdown=sampler_dropdown,\n        )\n\n        return gr.Slider.update()\n\n\n    @torch.no_grad()\n    def animate(\n        self,\n        prompt_textbox,\n        negative_prompt_textbox,\n        sampler_dropdown,\n        sample_step_slider,\n        width_slider,\n        length_slider,\n        height_slider,\n        cfg_scale_slider,\n        seed_textbox,\n    ):\n        if int(seed_textbox) != -1:\n            torch.manual_seed(int(seed_textbox))\n        else:\n            torch.seed()\n        seed = torch.initial_seed()\n        \n        sample = self.pipeline(\n            prompt_textbox,\n            negative_prompt = negative_prompt_textbox,\n            num_inference_steps = sample_step_slider,\n            guidance_scale = cfg_scale_slider,\n            width = width_slider,\n            height = height_slider,\n            video_length = length_slider,\n        ).videos\n\n        save_sample_path = os.path.join(self.savedir_sample, f\"{sample_idx}.mp4\")\n        save_videos_grid(sample, save_sample_path)\n    \n        sample_config = {\n            \"prompt\": prompt_textbox,\n            \"n_prompt\": negative_prompt_textbox,\n            \"sampler\": sampler_dropdown,\n            \"num_inference_steps\": sample_step_slider,\n            \"guidance_scale\": cfg_scale_slider,\n            \"width\": width_slider,\n            \"height\": height_slider,\n            \"video_length\": length_slider,\n            \"seed\": seed\n        }\n\n        json_str = json.dumps(sample_config, indent=4)\n        with open(os.path.join(self.savedir, \"logs.json\"), \"a\") as f:\n            f.write(json_str)\n            f.write(\"\\n\\n\")\n            \n        return gr.Video.update(value=save_sample_path)\n        \n\ncontroller = AnimateController()\n\n\ndef ui():\n    with gr.Blocks(css=css) as demo:\n        gr.Markdown(\n            \"\"\"\n            # AnimateDiff: Animate Your Personalized Text-to-Image Diffusion Models without Specific Tuning\n            Yuwei Guo, Ceyuan Yang✝, Anyi Rao, Zhengyang Liang, Yaohui Wang, Yu Qiao, Maneesh Agrawala, Dahua Lin, Bo Dai (✝Corresponding Author)<br>\n            [Paper](https://arxiv.org/abs/2307.04725) | [Webpage](https://animatediff.github.io/) | [Github](https://github.com/guoyww/animatediff/)\n            \"\"\"\n        )\n        with gr.Column(variant=\"panel\"):\n            gr.Markdown(\n                \"\"\"\n                ### 1. Model Checkpoints\n                \"\"\"\n            )\n            with gr.Row():\n                stable_diffusion_dropdown = gr.Dropdown(\n                    label=\"Pretrained Model Path\",\n                    choices=controller.stable_diffusion_list,\n                    value=PRETRAINED_SD,\n                    interactive=True,\n                )\n                \n            with gr.Row():\n                motion_module_dropdown = gr.Dropdown(\n                    label=\"Select motion module\",\n                    choices=controller.motion_module_list,\n                    value=default_motion_module,\n                    interactive=True,\n                )\n                                \n                base_model_dropdown = gr.Dropdown(\n                    label=\"Select base Dreambooth model (required)\",\n                    choices=controller.personalized_model_list,\n                    value=default_dreambooth_model,\n                    interactive=True,\n                )\n                \n                lora_model_dropdown = gr.Dropdown(\n                    label=\"Select LoRA model (optional)\",\n                    choices=[\"none\"] + controller.personalized_model_list,\n                    value=\"none\",\n                    interactive=True,\n                )\n                \n                lora_alpha_dropdown = gr.Dropdown(\n                    label=\"LoRA alpha\", \n                    choices=[\"0.\", \"0.2\", \"0.4\", \"0.6\", \"0.8\", \"1.0\"],\n                    value=\"0.6\",\n                    interactive=True,\n                )\n                \n                personalized_refresh_button = gr.Button(value=\"\\U0001F503\", elem_classes=\"toolbutton\")\n                def update_personalized_model():\n                    controller.refresh_stable_diffusion()\n                    controller.refresh_personalized_model()\n                    return [\n                        gr.Dropdown.update(choices=controller.stable_diffusion_list),\n                        gr.Dropdown.update(choices=controller.personalized_model_list),\n                        gr.Dropdown.update(choices=[\"none\"] + controller.personalized_model_list)\n                    ]\n                personalized_refresh_button.click(fn=update_personalized_model, inputs=[], outputs=[stable_diffusion_dropdown, base_model_dropdown, lora_model_dropdown])\n\n        with gr.Column(variant=\"panel\"):\n            gr.Markdown(\n                \"\"\"\n                ### 2. Configs for AnimateDiff.\n                \"\"\"\n            )\n            prompt_textbox = gr.Textbox(label=\"Prompt\", lines=2, value=default_prompt)\n            negative_prompt_textbox = gr.Textbox(label=\"Negative prompt\", lines=2, value=default_n_prompt)\n\n            with gr.Row().style(equal_height=False):\n                with gr.Column():\n                    with gr.Row():\n                        sampler_dropdown = gr.Dropdown(label=\"Sampling method\", choices=list(scheduler_dict.keys()), value=list(scheduler_dict.keys())[0])\n                        sample_step_slider = gr.Slider(label=\"Sampling steps\", value=25, minimum=10, maximum=100, step=1)\n                        \n                    width_slider = gr.Slider(label=\"Width\", value=512, minimum=256, maximum=1024, step=64)\n                    height_slider = gr.Slider(label=\"Height\", value=512, minimum=256, maximum=1024, step=64)\n                    length_slider = gr.Slider(label=\"Animation length (default: 16)\", value=16, minimum=8, maximum=24, step=1)\n                    cfg_scale_slider = gr.Slider(label=\"CFG Scale\", value=8.0, minimum=0, maximum=20)\n                    \n                    with gr.Row():\n                        seed_textbox = gr.Textbox(label=\"Seed (-1 for random seed)\", value=default_seed)\n                        seed_button = gr.Button(value=\"\\U0001F3B2\", elem_classes=\"toolbutton\")\n                        seed_button.click(fn=lambda: gr.Textbox.update(value=random.randint(1, 1e8)), inputs=[], outputs=[seed_textbox])\n            \n                    generate_button = gr.Button(value=\"Generate\", variant='primary')\n                    \n                result_video = gr.Video(label=\"Generated Animation\", interactive=False)\n\n            # update method\n            stable_diffusion_dropdown.change(fn=controller.update_pipeline, inputs=[stable_diffusion_dropdown, motion_module_dropdown, base_model_dropdown, lora_model_dropdown, lora_alpha_dropdown, sampler_dropdown], outputs=[stable_diffusion_dropdown])\n            motion_module_dropdown.change(fn=controller.update_pipeline,    inputs=[stable_diffusion_dropdown, motion_module_dropdown, base_model_dropdown, lora_model_dropdown, lora_alpha_dropdown, sampler_dropdown], outputs=[motion_module_dropdown])\n            base_model_dropdown.change(fn=controller.update_pipeline,       inputs=[stable_diffusion_dropdown, motion_module_dropdown, base_model_dropdown, lora_model_dropdown, lora_alpha_dropdown, sampler_dropdown], outputs=[base_model_dropdown])\n            lora_model_dropdown.change(fn=controller.update_pipeline,       inputs=[stable_diffusion_dropdown, motion_module_dropdown, base_model_dropdown, lora_model_dropdown, lora_alpha_dropdown, sampler_dropdown], outputs=[lora_model_dropdown])\n            lora_alpha_dropdown.change(fn=controller.update_pipeline_alpha, inputs=[stable_diffusion_dropdown, motion_module_dropdown, base_model_dropdown, lora_model_dropdown, lora_alpha_dropdown, sampler_dropdown], outputs=[lora_alpha_dropdown])\n\n            generate_button.click(\n                fn=controller.animate,\n                inputs=[\n                    prompt_textbox, \n                    negative_prompt_textbox, \n                    sampler_dropdown, \n                    sample_step_slider, \n                    width_slider, \n                    length_slider, \n                    height_slider, \n                    cfg_scale_slider, \n                    seed_textbox,\n                ],\n                outputs=[result_video]\n            )\n            \n    return demo\n\n\nif __name__ == \"__main__\":\n    demo = ui()\n    demo.launch(share=True)\n"
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.193359375,
          "content": "torch==2.3.1\ntorchvision==0.18.1\ndiffusers==0.11.1\ntransformers==4.25.1\nxformers==0.0.27\nimageio==2.27.0\nimageio-ffmpeg==0.4.9\ndecord==0.6.0\nomegaconf==2.3.0\ngradio==3.36.1\nsafetensors\neinops\nwandb\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "train.py",
          "type": "blob",
          "size": 19.9619140625,
          "content": "import os\nimport math\nimport wandb\nimport random\nimport logging\nimport inspect\nimport argparse\nimport datetime\nimport subprocess\n\nfrom pathlib import Path\nfrom tqdm.auto import tqdm\nfrom einops import rearrange\nfrom omegaconf import OmegaConf\nfrom safetensors import safe_open\nfrom typing import Dict, Optional, Tuple\n\nimport torch\nimport torchvision\nimport torch.nn.functional as F\nimport torch.distributed as dist\nfrom torch.optim.swa_utils import AveragedModel\nfrom torch.utils.data.distributed import DistributedSampler\nfrom torch.nn.parallel import DistributedDataParallel as DDP\n\nimport diffusers\nfrom diffusers import AutoencoderKL, DDIMScheduler\nfrom diffusers.models import UNet2DConditionModel\nfrom diffusers.pipelines import StableDiffusionPipeline\nfrom diffusers.optimization import get_scheduler\nfrom diffusers.utils import check_min_version\nfrom diffusers.utils.import_utils import is_xformers_available\n\nimport transformers\nfrom transformers import CLIPTextModel, CLIPTokenizer\n\nfrom animatediff.data.dataset import WebVid10M\nfrom animatediff.models.unet import UNet3DConditionModel\nfrom animatediff.pipelines.pipeline_animation import AnimationPipeline\nfrom animatediff.utils.util import save_videos_grid, zero_rank_print\n\n\n\ndef init_dist(launcher=\"slurm\", backend='nccl', port=29500, **kwargs):\n    \"\"\"Initializes distributed environment.\"\"\"\n    if launcher == 'pytorch':\n        rank = int(os.environ['RANK'])\n        num_gpus = torch.cuda.device_count()\n        local_rank = rank % num_gpus\n        torch.cuda.set_device(local_rank)\n        dist.init_process_group(backend=backend, **kwargs)\n        \n    elif launcher == 'slurm':\n        proc_id = int(os.environ['SLURM_PROCID'])\n        ntasks = int(os.environ['SLURM_NTASKS'])\n        node_list = os.environ['SLURM_NODELIST']\n        num_gpus = torch.cuda.device_count()\n        local_rank = proc_id % num_gpus\n        torch.cuda.set_device(local_rank)\n        addr = subprocess.getoutput(\n            f'scontrol show hostname {node_list} | head -n1')\n        os.environ['MASTER_ADDR'] = addr\n        os.environ['WORLD_SIZE'] = str(ntasks)\n        os.environ['RANK'] = str(proc_id)\n        port = os.environ.get('PORT', port)\n        os.environ['MASTER_PORT'] = str(port)\n        dist.init_process_group(backend=backend)\n        zero_rank_print(f\"proc_id: {proc_id}; local_rank: {local_rank}; ntasks: {ntasks}; node_list: {node_list}; num_gpus: {num_gpus}; addr: {addr}; port: {port}\")\n        \n    else:\n        raise NotImplementedError(f'Not implemented launcher type: `{launcher}`!')\n    \n    return local_rank\n\n\n\ndef main(\n    image_finetune: bool,\n    \n    name: str,\n    use_wandb: bool,\n    launcher: str,\n    \n    output_dir: str,\n    pretrained_model_path: str,\n\n    train_data: Dict,\n    validation_data: Dict,\n    cfg_random_null_text: bool = True,\n    cfg_random_null_text_ratio: float = 0.1,\n    \n    unet_checkpoint_path: str = \"\",\n    unet_additional_kwargs: Dict = {},\n    ema_decay: float = 0.9999,\n    noise_scheduler_kwargs = None,\n    \n    max_train_epoch: int = -1,\n    max_train_steps: int = 100,\n    validation_steps: int = 100,\n    validation_steps_tuple: Tuple = (-1,),\n\n    learning_rate: float = 3e-5,\n    scale_lr: bool = False,\n    lr_warmup_steps: int = 0,\n    lr_scheduler: str = \"constant\",\n\n    trainable_modules: Tuple[str] = (None, ),\n    num_workers: int = 32,\n    train_batch_size: int = 1,\n    adam_beta1: float = 0.9,\n    adam_beta2: float = 0.999,\n    adam_weight_decay: float = 1e-2,\n    adam_epsilon: float = 1e-08,\n    max_grad_norm: float = 1.0,\n    gradient_accumulation_steps: int = 1,\n    gradient_checkpointing: bool = False,\n    checkpointing_epochs: int = 5,\n    checkpointing_steps: int = -1,\n\n    mixed_precision_training: bool = True,\n    enable_xformers_memory_efficient_attention: bool = True,\n\n    global_seed: int = 42,\n    is_debug: bool = False,\n):\n    check_min_version(\"0.10.0.dev0\")\n\n    # Initialize distributed training\n    local_rank      = init_dist(launcher=launcher)\n    global_rank     = dist.get_rank()\n    num_processes   = dist.get_world_size()\n    is_main_process = global_rank == 0\n\n    seed = global_seed + global_rank\n    torch.manual_seed(seed)\n    \n    # Logging folder\n    folder_name = \"debug\" if is_debug else name + datetime.datetime.now().strftime(\"-%Y-%m-%dT%H-%M-%S\")\n    output_dir = os.path.join(output_dir, folder_name)\n    if is_debug and os.path.exists(output_dir):\n        os.system(f\"rm -rf {output_dir}\")\n\n    *_, config = inspect.getargvalues(inspect.currentframe())\n\n    # Make one log on every process with the configuration for debugging.\n    logging.basicConfig(\n        format=\"%(asctime)s - %(levelname)s - %(name)s - %(message)s\",\n        datefmt=\"%m/%d/%Y %H:%M:%S\",\n        level=logging.INFO,\n    )\n\n    if is_main_process and (not is_debug) and use_wandb:\n        run = wandb.init(project=\"animatediff\", name=folder_name, config=config)\n\n    # Handle the output folder creation\n    if is_main_process:\n        os.makedirs(output_dir, exist_ok=True)\n        os.makedirs(f\"{output_dir}/samples\", exist_ok=True)\n        os.makedirs(f\"{output_dir}/sanity_check\", exist_ok=True)\n        os.makedirs(f\"{output_dir}/checkpoints\", exist_ok=True)\n        OmegaConf.save(config, os.path.join(output_dir, 'config.yaml'))\n\n    # Load scheduler, tokenizer and models.\n    noise_scheduler = DDIMScheduler(**OmegaConf.to_container(noise_scheduler_kwargs))\n\n    vae          = AutoencoderKL.from_pretrained(pretrained_model_path, subfolder=\"vae\")\n    tokenizer    = CLIPTokenizer.from_pretrained(pretrained_model_path, subfolder=\"tokenizer\")\n    text_encoder = CLIPTextModel.from_pretrained(pretrained_model_path, subfolder=\"text_encoder\")\n    if not image_finetune:\n        unet = UNet3DConditionModel.from_pretrained_2d(\n            pretrained_model_path, subfolder=\"unet\", \n            unet_additional_kwargs=OmegaConf.to_container(unet_additional_kwargs)\n        )\n    else:\n        unet = UNet2DConditionModel.from_pretrained(pretrained_model_path, subfolder=\"unet\")\n        \n    # Load pretrained unet weights\n    if unet_checkpoint_path != \"\":\n        zero_rank_print(f\"from checkpoint: {unet_checkpoint_path}\")\n        unet_checkpoint_path = torch.load(unet_checkpoint_path, map_location=\"cpu\")\n        if \"global_step\" in unet_checkpoint_path: zero_rank_print(f\"global_step: {unet_checkpoint_path['global_step']}\")\n        state_dict = unet_checkpoint_path[\"state_dict\"] if \"state_dict\" in unet_checkpoint_path else unet_checkpoint_path\n\n        m, u = unet.load_state_dict(state_dict, strict=False)\n        zero_rank_print(f\"missing keys: {len(m)}, unexpected keys: {len(u)}\")\n        assert len(u) == 0\n        \n    # Freeze vae and text_encoder\n    vae.requires_grad_(False)\n    text_encoder.requires_grad_(False)\n    \n    # Set unet trainable parameters\n    unet.requires_grad_(False)\n    for name, param in unet.named_parameters():\n        for trainable_module_name in trainable_modules:\n            if trainable_module_name in name:\n                param.requires_grad = True\n                break\n            \n    trainable_params = list(filter(lambda p: p.requires_grad, unet.parameters()))\n    optimizer = torch.optim.AdamW(\n        trainable_params,\n        lr=learning_rate,\n        betas=(adam_beta1, adam_beta2),\n        weight_decay=adam_weight_decay,\n        eps=adam_epsilon,\n    )\n\n    if is_main_process:\n        zero_rank_print(f\"trainable params number: {len(trainable_params)}\")\n        zero_rank_print(f\"trainable params scale: {sum(p.numel() for p in trainable_params) / 1e6:.3f} M\")\n\n    # Enable xformers\n    if enable_xformers_memory_efficient_attention:\n        if is_xformers_available():\n            unet.enable_xformers_memory_efficient_attention()\n        else:\n            raise ValueError(\"xformers is not available. Make sure it is installed correctly\")\n\n    # Enable gradient checkpointing\n    if gradient_checkpointing:\n        unet.enable_gradient_checkpointing()\n\n    # Move models to GPU\n    vae.to(local_rank)\n    text_encoder.to(local_rank)\n\n    # Get the training dataset\n    train_dataset = WebVid10M(**train_data, is_image=image_finetune)\n    distributed_sampler = DistributedSampler(\n        train_dataset,\n        num_replicas=num_processes,\n        rank=global_rank,\n        shuffle=True,\n        seed=global_seed,\n    )\n\n    # DataLoaders creation:\n    train_dataloader = torch.utils.data.DataLoader(\n        train_dataset,\n        batch_size=train_batch_size,\n        shuffle=False,\n        sampler=distributed_sampler,\n        num_workers=num_workers,\n        pin_memory=True,\n        drop_last=True,\n    )\n\n    # Get the training iteration\n    if max_train_steps == -1:\n        assert max_train_epoch != -1\n        max_train_steps = max_train_epoch * len(train_dataloader)\n        \n    if checkpointing_steps == -1:\n        assert checkpointing_epochs != -1\n        checkpointing_steps = checkpointing_epochs * len(train_dataloader)\n\n    if scale_lr:\n        learning_rate = (learning_rate * gradient_accumulation_steps * train_batch_size * num_processes)\n\n    # Scheduler\n    lr_scheduler = get_scheduler(\n        lr_scheduler,\n        optimizer=optimizer,\n        num_warmup_steps=lr_warmup_steps * gradient_accumulation_steps,\n        num_training_steps=max_train_steps * gradient_accumulation_steps,\n    )\n\n    # Validation pipeline\n    if not image_finetune:\n        validation_pipeline = AnimationPipeline(\n            unet=unet, vae=vae, tokenizer=tokenizer, text_encoder=text_encoder, scheduler=noise_scheduler,\n        ).to(\"cuda\")\n    else:\n        validation_pipeline = StableDiffusionPipeline.from_pretrained(\n            pretrained_model_path,\n            unet=unet, vae=vae, tokenizer=tokenizer, text_encoder=text_encoder, scheduler=noise_scheduler, safety_checker=None,\n        )\n    validation_pipeline.enable_vae_slicing()\n\n    # DDP warpper\n    unet.to(local_rank)\n    unet = DDP(unet, device_ids=[local_rank], output_device=local_rank)\n\n    # We need to recalculate our total training steps as the size of the training dataloader may have changed.\n    num_update_steps_per_epoch = math.ceil(len(train_dataloader) / gradient_accumulation_steps)\n    # Afterwards we recalculate our number of training epochs\n    num_train_epochs = math.ceil(max_train_steps / num_update_steps_per_epoch)\n\n    # Train!\n    total_batch_size = train_batch_size * num_processes * gradient_accumulation_steps\n\n    if is_main_process:\n        logging.info(\"***** Running training *****\")\n        logging.info(f\"  Num examples = {len(train_dataset)}\")\n        logging.info(f\"  Num Epochs = {num_train_epochs}\")\n        logging.info(f\"  Instantaneous batch size per device = {train_batch_size}\")\n        logging.info(f\"  Total train batch size (w. parallel, distributed & accumulation) = {total_batch_size}\")\n        logging.info(f\"  Gradient Accumulation steps = {gradient_accumulation_steps}\")\n        logging.info(f\"  Total optimization steps = {max_train_steps}\")\n    global_step = 0\n    first_epoch = 0\n\n    # Only show the progress bar once on each machine.\n    progress_bar = tqdm(range(global_step, max_train_steps), disable=not is_main_process)\n    progress_bar.set_description(\"Steps\")\n\n    # Support mixed-precision training\n    scaler = torch.cuda.amp.GradScaler() if mixed_precision_training else None\n\n    for epoch in range(first_epoch, num_train_epochs):\n        train_dataloader.sampler.set_epoch(epoch)\n        unet.train()\n        \n        for step, batch in enumerate(train_dataloader):\n            if cfg_random_null_text:\n                batch['text'] = [name if random.random() > cfg_random_null_text_ratio else \"\" for name in batch['text']]\n                \n            # Data batch sanity check\n            if epoch == first_epoch and step == 0:\n                pixel_values, texts = batch['pixel_values'].cpu(), batch['text']\n                if not image_finetune:\n                    pixel_values = rearrange(pixel_values, \"b f c h w -> b c f h w\")\n                    for idx, (pixel_value, text) in enumerate(zip(pixel_values, texts)):\n                        pixel_value = pixel_value[None, ...]\n                        save_videos_grid(pixel_value, f\"{output_dir}/sanity_check/{'-'.join(text.replace('/', '').split()[:10]) if not text == '' else f'{global_rank}-{idx}'}.gif\", rescale=True)\n                else:\n                    for idx, (pixel_value, text) in enumerate(zip(pixel_values, texts)):\n                        pixel_value = pixel_value / 2. + 0.5\n                        torchvision.utils.save_image(pixel_value, f\"{output_dir}/sanity_check/{'-'.join(text.replace('/', '').split()[:10]) if not text == '' else f'{global_rank}-{idx}'}.png\")\n                    \n            ### >>>> Training >>>> ###\n            \n            # Convert videos to latent space            \n            pixel_values = batch[\"pixel_values\"].to(local_rank)\n            video_length = pixel_values.shape[1]\n            with torch.no_grad():\n                if not image_finetune:\n                    pixel_values = rearrange(pixel_values, \"b f c h w -> (b f) c h w\")\n                    latents = vae.encode(pixel_values).latent_dist\n                    latents = latents.sample()\n                    latents = rearrange(latents, \"(b f) c h w -> b c f h w\", f=video_length)\n                else:\n                    latents = vae.encode(pixel_values).latent_dist\n                    latents = latents.sample()\n\n                latents = latents * 0.18215\n\n            # Sample noise that we'll add to the latents\n            noise = torch.randn_like(latents)\n            bsz = latents.shape[0]\n            \n            # Sample a random timestep for each video\n            timesteps = torch.randint(0, noise_scheduler.config.num_train_timesteps, (bsz,), device=latents.device)\n            timesteps = timesteps.long()\n            \n            # Add noise to the latents according to the noise magnitude at each timestep\n            # (this is the forward diffusion process)\n            noisy_latents = noise_scheduler.add_noise(latents, noise, timesteps)\n            \n            # Get the text embedding for conditioning\n            with torch.no_grad():\n                prompt_ids = tokenizer(\n                    batch['text'], max_length=tokenizer.model_max_length, padding=\"max_length\", truncation=True, return_tensors=\"pt\"\n                ).input_ids.to(latents.device)\n                encoder_hidden_states = text_encoder(prompt_ids)[0]\n                \n            # Get the target for loss depending on the prediction type\n            if noise_scheduler.config.prediction_type == \"epsilon\":\n                target = noise\n            elif noise_scheduler.config.prediction_type == \"v_prediction\":\n                raise NotImplementedError\n            else:\n                raise ValueError(f\"Unknown prediction type {noise_scheduler.config.prediction_type}\")\n\n            # Predict the noise residual and compute loss\n            # Mixed-precision training\n            with torch.cuda.amp.autocast(enabled=mixed_precision_training):\n                model_pred = unet(noisy_latents, timesteps, encoder_hidden_states).sample\n                loss = F.mse_loss(model_pred.float(), target.float(), reduction=\"mean\")\n\n            optimizer.zero_grad()\n\n            # Backpropagate\n            if mixed_precision_training:\n                scaler.scale(loss).backward()\n                \"\"\" >>> gradient clipping >>> \"\"\"\n                scaler.unscale_(optimizer)\n                torch.nn.utils.clip_grad_norm_(unet.parameters(), max_grad_norm)\n                \"\"\" <<< gradient clipping <<< \"\"\"\n                scaler.step(optimizer)\n                scaler.update()\n            else:\n                loss.backward()\n                \"\"\" >>> gradient clipping >>> \"\"\"\n                torch.nn.utils.clip_grad_norm_(unet.parameters(), max_grad_norm)\n                \"\"\" <<< gradient clipping <<< \"\"\"\n                optimizer.step()\n\n            lr_scheduler.step()\n            progress_bar.update(1)\n            global_step += 1\n            \n            ### <<<< Training <<<< ###\n            \n            # Wandb logging\n            if is_main_process and (not is_debug) and use_wandb:\n                wandb.log({\"train_loss\": loss.item()}, step=global_step)\n                \n            # Save checkpoint\n            if is_main_process and (global_step % checkpointing_steps == 0 or step == len(train_dataloader) - 1):\n                save_path = os.path.join(output_dir, f\"checkpoints\")\n                state_dict = {\n                    \"epoch\": epoch,\n                    \"global_step\": global_step,\n                    \"state_dict\": unet.state_dict(),\n                }\n                if step == len(train_dataloader) - 1:\n                    torch.save(state_dict, os.path.join(save_path, f\"checkpoint-epoch-{epoch+1}.ckpt\"))\n                else:\n                    torch.save(state_dict, os.path.join(save_path, f\"checkpoint.ckpt\"))\n                logging.info(f\"Saved state to {save_path} (global_step: {global_step})\")\n                \n            # Periodically validation\n            if is_main_process and (global_step % validation_steps == 0 or global_step in validation_steps_tuple):\n                samples = []\n                \n                generator = torch.Generator(device=latents.device)\n                generator.manual_seed(global_seed)\n                \n                height = train_data.sample_size[0] if not isinstance(train_data.sample_size, int) else train_data.sample_size\n                width  = train_data.sample_size[1] if not isinstance(train_data.sample_size, int) else train_data.sample_size\n\n                prompts = validation_data.prompts[:2] if global_step < 1000 and (not image_finetune) else validation_data.prompts\n\n                for idx, prompt in enumerate(prompts):\n                    if not image_finetune:\n                        sample = validation_pipeline(\n                            prompt,\n                            generator    = generator,\n                            video_length = train_data.sample_n_frames,\n                            height       = height,\n                            width        = width,\n                            **validation_data,\n                        ).videos\n                        save_videos_grid(sample, f\"{output_dir}/samples/sample-{global_step}/{idx}.gif\")\n                        samples.append(sample)\n                        \n                    else:\n                        sample = validation_pipeline(\n                            prompt,\n                            generator           = generator,\n                            height              = height,\n                            width               = width,\n                            num_inference_steps = validation_data.get(\"num_inference_steps\", 25),\n                            guidance_scale      = validation_data.get(\"guidance_scale\", 8.),\n                        ).images[0]\n                        sample = torchvision.transforms.functional.to_tensor(sample)\n                        samples.append(sample)\n                \n                if not image_finetune:\n                    samples = torch.concat(samples)\n                    save_path = f\"{output_dir}/samples/sample-{global_step}.gif\"\n                    save_videos_grid(samples, save_path)\n                    \n                else:\n                    samples = torch.stack(samples)\n                    save_path = f\"{output_dir}/samples/sample-{global_step}.png\"\n                    torchvision.utils.save_image(samples, save_path, nrow=4)\n\n                logging.info(f\"Saved samples to {save_path}\")\n                \n            logs = {\"step_loss\": loss.detach().item(), \"lr\": lr_scheduler.get_last_lr()[0]}\n            progress_bar.set_postfix(**logs)\n            \n            if global_step >= max_train_steps:\n                break\n            \n    dist.destroy_process_group()\n\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--config\",   type=str, required=True)\n    parser.add_argument(\"--launcher\", type=str, choices=[\"pytorch\", \"slurm\"], default=\"pytorch\")\n    parser.add_argument(\"--wandb\",    action=\"store_true\")\n    args = parser.parse_args()\n\n    name   = Path(args.config).stem\n    config = OmegaConf.load(args.config)\n\n    main(name=name, launcher=args.launcher, use_wandb=args.wandb, **config)\n"
        }
      ]
    }
  ]
}