{
  "metadata": {
    "timestamp": 1736561183037,
    "page": 145,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pallets/click",
      "stars": 15952,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2275390625,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 4\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nend_of_line = lf\ncharset = utf-8\nmax_line_length = 88\n\n[*.{css,html,js,json,jsx,scss,ts,tsx,yaml,yml}]\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.099609375,
          "content": ".idea/\n.vscode/\n.venv*/\nvenv*/\n.env*/\nenv*/\n__pycache__/\ndist/\n.coverage*\nhtmlcov/\n.tox/\ndocs/_build/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.36328125,
          "content": "repos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.7.1\n    hooks:\n      - id: ruff\n      - id: ruff-format\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: check-merge-conflict\n      - id: debug-statements\n      - id: fix-byte-order-marker\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.2041015625,
          "content": "version: 2\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: '3.12'\npython:\n  install:\n    - requirements: requirements/docs.txt\n    - method: pip\n      path: .\nsphinx:\n  builder: dirhtml\n  fail_on_warning: true\n"
        },
        {
          "name": "CHANGES.rst",
          "type": "blob",
          "size": 51.3056640625,
          "content": ".. currentmodule:: click\n\nVersion 8.2.0\n-------------\n\nUnreleased\n\n-   Drop support for Python 3.7. :pr:`2588`\n-   Use modern packaging metadata with ``pyproject.toml`` instead of ``setup.cfg``.\n    :pr:`326`\n-   Use ``flit_core`` instead of ``setuptools`` as build backend.\n-   Deprecate the ``__version__`` attribute. Use feature detection, or\n    ``importlib.metadata.version(\"click\")``, instead. :issue:`2598`\n-   ``BaseCommand`` is deprecated. ``Command`` is the base class for all\n    commands. :issue:`2589`\n-   ``MultiCommand`` is deprecated. ``Group`` is the base class for all group\n    commands. :issue:`2590`\n-   The current parser and related classes and methods, are deprecated.\n    :issue:`2205`\n\n    -   ``OptionParser`` and the ``parser`` module, which is a modified copy of\n        ``optparse`` in the standard library.\n    -   ``Context.protected_args`` is unneeded. ``Context.args`` contains any\n        remaining arguments while parsing.\n    -   ``Parameter.add_to_parser`` (on both ``Argument`` and ``Option``) is\n        unneeded. Parsing works directly without building a separate parser.\n    -   ``split_arg_string`` is moved from ``parser`` to ``shell_completion``.\n\n-   Enable deferred evaluation of annotations with\n    ``from __future__ import annotations``. :pr:`2270`\n-   When generating a command's name from a decorated function's name, the\n    suffixes ``_command``, ``_cmd``, ``_group``, and ``_grp`` are removed.\n    :issue:`2322`\n-   Show the ``types.ParamType.name`` for ``types.Choice`` options within\n    ``--help`` message if ``show_choices=False`` is specified.\n    :issue:`2356`\n-   Do not display default values in prompts when ``Option.show_default`` is\n    ``False``. :pr:`2509`\n-   Add ``get_help_extra`` method on ``Option`` to fetch the generated extra\n    items used in ``get_help_record`` to render help text. :issue:`2516`\n    :pr:`2517`\n-   Keep stdout and stderr streams independent in ``CliRunner``. Always\n    collect stderr output and never raise an exception. Add a new\n    output` stream to simulate what the user sees in its terminal. Removes\n    the ``mix_stderr`` parameter in ``CliRunner``. :issue:`2522` :pr:`2523`\n-   ``Option.show_envvar`` now also shows environment variable in error messages.\n    :issue:`2695` :pr:`2696`\n-   ``Context.close`` will be called on exit. This results in all\n    ``Context.call_on_close`` callbacks and context managers added via\n    ``Context.with_resource`` to be closed on exit as well. :pr:`2680`\n-   Add ``ProgressBar(hidden: bool)`` to allow hiding the progressbar. :issue:`2609`\n-   A ``UserWarning`` will be shown when multiple parameters attempt to use the\n    same name. :issue:`2396``\n-   When using ``Option.envvar`` with ``Option.flag_value``, the ``flag_value``\n    will always be used instead of the value of the environment variable.\n    :issue:`2746` :pr:`2788`\n-   Add ``Choice.get_invalid_choice_message`` method for customizing the\n    invalid choice message. :issue:`2621` :pr:`2622`\n-   If help is shown because ``no_args_is_help`` is enabled (defaults to ``True``\n    for groups, ``False`` for commands), the exit code is 2 instead of 0.\n    :issue:`1489` :pr:`1489`\n-   Contexts created during shell completion are closed properly, fixing\n    ``ResourceWarning``s when using ``click.File``. :issue:`2644` :pr:`2800`\n    :pr:`2767`\n-   ``click.edit(filename)`` now supports passing an iterable of filenames in\n    case the editor supports editing multiple files at once. Its return type\n    is now also typed: ``AnyStr`` if ``text`` is passed, otherwise ``None``.\n    :issue:`2067` :pr:`2068`\n-   Specialized typing of ``progressbar(length=...)`` as ``ProgressBar[int]``.\n    :pr:`2630`\n-   Improve ``echo_via_pager`` behaviour in face of errors.\n    :issue:`2674`\n\n    -   Terminate the pager in case a generator passed to ``echo_via_pager``\n        raises an exception.\n    -   Ensure to always close the pipe to the pager process and wait for it\n        to terminate.\n    -   ``echo_via_pager`` will not ignore ``KeyboardInterrupt`` anymore. This\n        allows the user to search for future output of the generator when\n        using less and then aborting the program using ctrl-c.\n\n-   ``deprecated: bool | str`` can now be used on options and arguments. This\n    previously was only available for ``Command``. The message can now also be\n    customised by using a ``str`` instead of a ``bool``. :issue:`2263` :pr:`2271`\n\n    -   ``Command.deprecated`` formatting in ``--help`` changed from\n        ``(Deprecated) help`` to ``help (DEPRECATED)``.\n    -   Parameters cannot be required nor prompted or an error is raised.\n    -   A warning will be printed when something deprecated is used.\n\n-   Add a ``catch_exceptions`` parameter to :class:`CliRunner`. If\n    ``catch_exceptions`` is not passed to :meth:`CliRunner.invoke`,\n    the value from :class:`CliRunner`. :issue:`2817` :pr:`2818`\n-   ``Option.flag_value`` will no longer have a default value set based on\n    ``Option.default`` if ``Option.is_flag`` is ``False``. This results in\n    ``Option.default`` not needing to implement `__bool__`. :pr:`2829`\n-   Incorrect ``click.edit`` typing has been corrected. :pr:`2804`\n\nVersion 8.1.8\n-------------\n\nUnreleased\n\n-   Fix an issue with type hints for ``click.open_file()``. :issue:`2717`\n-   Fix issue where error message for invalid ``click.Path`` displays on\n    multiple lines. :issue:`2697`\n-   Fixed issue that prevented a default value of ``\"\"`` from being displayed in\n    the help for an option. :issue:`2500`\n-   The test runner handles stripping color consistently on Windows.\n    :issue:`2705`\n-   Show correct value for flag default when using ``default_map``.\n    :issue:`2632`\n-   Fix ``click.echo(color=...)`` passing ``color`` to coloroma so it can be\n    forced on Windows. :issue:`2606`.\n\n\nVersion 8.1.7\n-------------\n\nReleased 2023-08-17\n\n-   Fix issue with regex flags in shell completion. :issue:`2581`\n-   Bash version detection issues a warning instead of an error. :issue:`2574`\n-   Fix issue with completion script for Fish shell. :issue:`2567`\n\n\nVersion 8.1.6\n-------------\n\nReleased 2023-07-18\n\n-   Fix an issue with type hints for ``@click.group()``. :issue:`2558`\n\n\nVersion 8.1.5\n-------------\n\nReleased 2023-07-13\n\n-   Fix an issue with type hints for ``@click.command()``, ``@click.option()``, and\n    other decorators. Introduce typing tests. :issue:`2558`\n\n\nVersion 8.1.4\n-------------\n\nReleased 2023-07-06\n\n-   Replace all ``typing.Dict`` occurrences to ``typing.MutableMapping`` for\n    parameter hints. :issue:`2255`\n-   Improve type hinting for decorators and give all generic types parameters.\n    :issue:`2398`\n-   Fix return value and type signature of `shell_completion.add_completion_class`\n    function. :pr:`2421`\n-   Bash version detection doesn't fail on Windows. :issue:`2461`\n-   Completion works if there is a dot (``.``) in the program name. :issue:`2166`\n-   Improve type annotations for pyright type checker. :issue:`2268`\n-   Improve responsiveness of ``click.clear()``. :issue:`2284`\n-   Improve command name detection when using Shiv or PEX. :issue:`2332`\n-   Avoid showing empty lines if command help text is empty. :issue:`2368`\n-   ZSH completion script works when loaded from ``fpath``. :issue:`2344`.\n-   ``EOFError`` and ``KeyboardInterrupt`` tracebacks are not suppressed when\n    ``standalone_mode`` is disabled. :issue:`2380`\n-   ``@group.command`` does not fail if the group was created with a custom\n    ``command_class``. :issue:`2416`\n-   ``multiple=True`` is allowed for flag options again and does not require\n    setting ``default=()``. :issue:`2246, 2292, 2295`\n-   Make the decorators returned by ``@argument()`` and ``@option()`` reusable when the\n    ``cls`` parameter is used. :issue:`2294`\n-   Don't fail when writing filenames to streams with strict errors. Replace invalid\n    bytes with the replacement character (``�``). :issue:`2395`\n-   Remove unnecessary attempt to detect MSYS2 environment. :issue:`2355`\n-   Remove outdated and unnecessary detection of App Engine environment. :pr:`2554`\n-   ``echo()`` does not fail when no streams are attached, such as with ``pythonw`` on\n    Windows. :issue:`2415`\n-   Argument with ``expose_value=False`` do not cause completion to fail. :issue:`2336`\n\n\nVersion 8.1.3\n-------------\n\nReleased 2022-04-28\n\n-   Use verbose form of ``typing.Callable`` for ``@command`` and\n    ``@group``. :issue:`2255`\n-   Show error when attempting to create an option with\n    ``multiple=True, is_flag=True``. Use ``count`` instead.\n    :issue:`2246`\n\n\nVersion 8.1.2\n-------------\n\nReleased 2022-03-31\n\n-   Fix error message for readable path check that was mixed up with the\n    executable check. :pr:`2236`\n-   Restore parameter order for ``Path``, placing the ``executable``\n    parameter at the end. It is recommended to use keyword arguments\n    instead of positional arguments. :issue:`2235`\n\n\nVersion 8.1.1\n-------------\n\nReleased 2022-03-30\n\n-   Fix an issue with decorator typing that caused type checking to\n    report that a command was not callable. :issue:`2227`\n\n\nVersion 8.1.0\n-------------\n\nReleased 2022-03-28\n\n-   Drop support for Python 3.6. :pr:`2129`\n-   Remove previously deprecated code. :pr:`2130`\n\n    -   ``Group.resultcallback`` is renamed to ``result_callback``.\n    -   ``autocompletion`` parameter to ``Command`` is renamed to\n        ``shell_complete``.\n    -   ``get_terminal_size`` is removed, use\n        ``shutil.get_terminal_size`` instead.\n    -   ``get_os_args`` is removed, use ``sys.argv[1:]`` instead.\n\n-   Rely on :pep:`538` and :pep:`540` to handle selecting UTF-8 encoding\n    instead of ASCII. Click's locale encoding detection is removed.\n    :issue:`2198`\n-   Single options boolean flags with ``show_default=True`` only show\n    the default if it is ``True``. :issue:`1971`\n-   The ``command`` and ``group`` decorators can be applied with or\n    without parentheses. :issue:`1359`\n-   The ``Path`` type can check whether the target is executable.\n    :issue:`1961`\n-   ``Command.show_default`` overrides ``Context.show_default``, instead\n    of the other way around. :issue:`1963`\n-   Parameter decorators and ``@group`` handles ``cls=None`` the same as\n    not passing ``cls``. ``@option`` handles ``help=None`` the same as\n    not passing ``help``. :issue:`#1959`\n-   A flag option with ``required=True`` requires that the flag is\n    passed instead of choosing the implicit default value. :issue:`1978`\n-   Indentation in help text passed to ``Option`` and ``Command`` is\n    cleaned the same as using the ``@option`` and ``@command``\n    decorators does. A command's ``epilog`` and ``short_help`` are also\n    processed. :issue:`1985`\n-   Store unprocessed ``Command.help``, ``epilog`` and ``short_help``\n    strings. Processing is only done when formatting help text for\n    output. :issue:`2149`\n-   Allow empty str input for ``prompt()`` when\n    ``confirmation_prompt=True`` and ``default=\"\"``. :issue:`2157`\n-   Windows glob pattern expansion doesn't fail if a value is an invalid\n    pattern. :issue:`2195`\n-   It's possible to pass a list of ``params`` to ``@command``. Any\n    params defined with decorators are appended to the passed params.\n    :issue:`2131`.\n-   ``@command`` decorator is annotated as returning the correct type if\n    a ``cls`` argument is used. :issue:`2211`\n-   A ``Group`` with ``invoke_without_command=True`` and ``chain=False``\n    will invoke its result callback with the group function's return\n    value. :issue:`2124`\n-   ``to_info_dict`` will not fail if a ``ParamType`` doesn't define a\n    ``name``. :issue:`2168`\n-   Shell completion prioritizes option values with option prefixes over\n    new options. :issue:`2040`\n-   Options that get an environment variable value using\n    ``autoenvvar_prefix`` treat an empty value as ``None``, consistent\n    with a direct ``envvar``. :issue:`2146`\n\n\nVersion 8.0.4\n-------------\n\nReleased 2022-02-18\n\n-   ``open_file`` recognizes ``Path(\"-\")`` as a standard stream, the\n    same as the string ``\"-\"``. :issue:`2106`\n-   The ``option`` and ``argument`` decorators preserve the type\n    annotation of the decorated function. :pr:`2155`\n-   A callable default value can customize its help text by overriding\n    ``__str__`` instead of always showing ``(dynamic)``. :issue:`2099`\n-   Fix a typo in the Bash completion script that affected file and\n    directory completion. If this script was generated by a previous\n    version, it should be regenerated. :issue:`2163`\n-   Fix typing for ``echo`` and ``secho`` file argument.\n    :issue:`2174, 2185`\n\n\nVersion 8.0.3\n-------------\n\nReleased 2021-10-10\n\n-   Fix issue with ``Path(resolve_path=True)`` type creating invalid\n    paths. :issue:`2088`\n-   Importing ``readline`` does not cause the ``confirm()`` prompt to\n    disappear when pressing backspace. :issue:`2092`\n-   Any default values injected by ``invoke()`` are cast to the\n    corresponding parameter's type. :issue:`2089, 2090`\n\n\nVersion 8.0.2\n-------------\n\nReleased 2021-10-08\n\n-   ``is_bool_flag`` is not set to ``True`` if ``is_flag`` is ``False``.\n    :issue:`1925`\n-   Bash version detection is locale independent. :issue:`1940`\n-   Empty ``default`` value is not shown for ``multiple=True``.\n    :issue:`1969`\n-   Fix shell completion for arguments that start with a forward slash\n    such as absolute file paths. :issue:`1929`\n-   ``Path`` type with ``resolve_path=True`` resolves relative symlinks\n    to be relative to the containing directory. :issue:`1921`\n-   Completion does not skip Python's resource cleanup when exiting,\n    avoiding some unexpected warning output. :issue:`1738, 2017`\n-   Fix type annotation for ``type`` argument in ``prompt`` function.\n    :issue:`2062`\n-   Fix overline and italic styles, which were incorrectly added when\n    adding underline. :pr:`2058`\n-   An option with ``count=True`` will not show \"[x>=0]\" in help text.\n    :issue:`2072`\n-   Default values are not cast to the parameter type twice during\n    processing. :issue:`2085`\n-   Options with ``multiple`` and ``flag_value`` use the flag value\n    instead of leaving an internal placeholder. :issue:`2001`\n\n\nVersion 8.0.1\n-------------\n\nReleased 2021-05-19\n\n-   Mark top-level names as exported so type checking understand imports\n    in user projects. :issue:`1879`\n-   Annotate ``Context.obj`` as ``Any`` so type checking allows all\n    operations on the arbitrary object. :issue:`1885`\n-   Fix some types that weren't available in Python 3.6.0. :issue:`1882`\n-   Fix type checking for iterating over ``ProgressBar`` object.\n    :issue:`1892`\n-   The ``importlib_metadata`` backport package is installed on Python <\n    3.8. :issue:`1889`\n-   Arguments with ``nargs=-1`` only use env var value if no command\n    line values are given. :issue:`1903`\n-   Flag options guess their type from ``flag_value`` if given, like\n    regular options do from ``default``. :issue:`1886`\n-   Added documentation that custom parameter types may be passed\n    already valid values in addition to strings. :issue:`1898`\n-   Resolving commands returns the name that was given, not\n    ``command.name``, fixing an unintended change to help text and\n    ``default_map`` lookups. When using patterns like ``AliasedGroup``,\n    override ``resolve_command`` to change the name that is returned if\n    needed. :issue:`1895`\n-   If a default value is invalid, it does not prevent showing help\n    text. :issue:`1889`\n-   Pass ``windows_expand_args=False`` when calling the main command to\n    disable pattern expansion on Windows. There is no way to escape\n    patterns in CMD, so if the program needs to pass them on as-is then\n    expansion must be disabled. :issue:`1901`\n\n\nVersion 8.0.0\n-------------\n\nReleased 2021-05-11\n\n-   Drop support for Python 2 and 3.5.\n-   Colorama is always installed on Windows in order to provide style\n    and color support. :pr:`1784`\n-   Adds a repr to Command, showing the command name for friendlier\n    debugging. :issue:`1267`, :pr:`1295`\n-   Add support for distinguishing the source of a command line\n    parameter. :issue:`1264`, :pr:`1329`\n-   Add an optional parameter to ``ProgressBar.update`` to set the\n    ``current_item``. :issue:`1226`, :pr:`1332`\n-   ``version_option`` uses ``importlib.metadata`` (or the\n    ``importlib_metadata`` backport) instead of ``pkg_resources``. The\n    version is detected based on the package name, not the entry point\n    name. The Python package name must match the installed package\n    name, or be passed with ``package_name=``. :issue:`1582`\n-   If validation fails for a prompt with ``hide_input=True``, the value\n    is not shown in the error message. :issue:`1460`\n-   An ``IntRange`` or ``FloatRange`` option shows the accepted range in\n    its help text. :issue:`1525`, :pr:`1303`\n-   ``IntRange`` and ``FloatRange`` bounds can be open (``<``) instead\n    of closed (``<=``) by setting ``min_open`` and ``max_open``. Error\n    messages have changed to reflect this. :issue:`1100`\n-   An option defined with duplicate flag names (``\"--foo/--foo\"``)\n    raises a ``ValueError``. :issue:`1465`\n-   ``echo()`` will not fail when using pytest's ``capsys`` fixture on\n    Windows. :issue:`1590`\n-   Resolving commands returns the canonical command name instead of the\n    matched name. This makes behavior such as help text and\n    ``Context.invoked_subcommand`` consistent when using patterns like\n    ``AliasedGroup``. :issue:`1422`\n-   The ``BOOL`` type accepts the values \"on\" and \"off\". :issue:`1629`\n-   A ``Group`` with ``invoke_without_command=True`` will always invoke\n    its result callback. :issue:`1178`\n-   ``nargs == -1`` and ``nargs > 1`` is parsed and validated for\n    values from environment variables and defaults. :issue:`729`\n-   Detect the program name when executing a module or package with\n    ``python -m name``. :issue:`1603`\n-   Include required parent arguments in help synopsis of subcommands.\n    :issue:`1475`\n-   Help for boolean flags with ``show_default=True`` shows the flag\n    name instead of ``True`` or ``False``. :issue:`1538`\n-   Non-string objects passed to ``style()`` and ``secho()`` will be\n    converted to string. :pr:`1146`\n-   ``edit(require_save=True)`` will detect saves for editors that exit\n    very fast on filesystems with 1 second resolution. :pr:`1050`\n-   New class attributes make it easier to use custom core objects\n    throughout an entire application. :pr:`938`\n\n    -   ``Command.context_class`` controls the context created when\n        running the command.\n    -   ``Context.invoke`` creates new contexts of the same type, so a\n        custom type will persist to invoked subcommands.\n    -   ``Context.formatter_class`` controls the formatter used to\n        generate help and usage.\n    -   ``Group.command_class`` changes the default type for\n        subcommands with ``@group.command()``.\n    -   ``Group.group_class`` changes the default type for subgroups\n        with ``@group.group()``. Setting it to ``type`` will create\n        subgroups of the same type as the group itself.\n    -   Core objects use ``super()`` consistently for better support of\n        subclassing.\n\n-   Use ``Context.with_resource()`` to manage resources that would\n    normally be used in a ``with`` statement, allowing them to be used\n    across subcommands and callbacks, then cleaned up when the context\n    ends. :pr:`1191`\n-   The result object returned by the test runner's ``invoke()`` method\n    has a ``return_value`` attribute with the value returned by the\n    invoked command. :pr:`1312`\n-   Required arguments with the ``Choice`` type show the choices in\n    curly braces to indicate that one is required (``{a|b|c}``).\n    :issue:`1272`\n-   If only a name is passed to ``option()``, Click suggests renaming it\n    to ``--name``. :pr:`1355`\n-   A context's ``show_default`` parameter defaults to the value from\n    the parent context. :issue:`1565`\n-   ``click.style()`` can output 256 and RGB color codes. Most modern\n    terminals support these codes. :pr:`1429`\n-   When using ``CliRunner.invoke()``, the replaced ``stdin`` file has\n    ``name`` and ``mode`` attributes. This lets ``File`` options with\n    the ``-`` value match non-testing behavior. :issue:`1064`\n-   When creating a ``Group``, allow passing a list of commands instead\n    of a dict. :issue:`1339`\n-   When a long option name isn't valid, use ``difflib`` to make better\n    suggestions for possible corrections. :issue:`1446`\n-   Core objects have a ``to_info_dict()`` method. This gathers\n    information about the object's structure that could be useful for a\n    tool generating user-facing documentation. To get the structure of\n    an entire CLI, use ``Context(cli).to_info_dict()``. :issue:`461`\n-   Redesign the shell completion system. :issue:`1484`, :pr:`1622`\n\n    -   Support Bash >= 4.4, Zsh, and Fish, with the ability for\n        extensions to add support for other shells.\n    -   Allow commands, groups, parameters, and types to override their\n        completions suggestions.\n    -   Groups complete the names commands were registered with, which\n        can differ from the name they were created with.\n    -   The ``autocompletion`` parameter for options and arguments is\n        renamed to ``shell_complete``. The function must take\n        ``ctx, param, incomplete``, must do matching rather than return\n        all values, and must return a list of strings or a list of\n        ``CompletionItem``. The old name and behavior is deprecated and\n        will be removed in 8.1.\n    -   The env var values used to start completion have changed order.\n        The shell now comes first, such as ``{shell}_source`` rather\n        than ``source_{shell}``, and is always required.\n\n-   Completion correctly parses command line strings with incomplete\n    quoting or escape sequences. :issue:`1708`\n-   Extra context settings (``obj=...``, etc.) are passed on to the\n    completion system. :issue:`942`\n-   Include ``--help`` option in completion. :pr:`1504`\n-   ``ParameterSource`` is an ``enum.Enum`` subclass. :issue:`1530`\n-   Boolean and UUID types strip surrounding space before converting.\n    :issue:`1605`\n-   Adjusted error message from parameter type validation to be more\n    consistent. Quotes are used to distinguish the invalid value.\n    :issue:`1605`\n-   The default value for a parameter with ``nargs`` > 1 and\n    ``multiple=True`` must be a list of tuples. :issue:`1649`\n-   When getting the value for a parameter, the default is tried in the\n    same section as other sources to ensure consistent processing.\n    :issue:`1649`\n-   All parameter types accept a value that is already the correct type.\n    :issue:`1649`\n-   For shell completion, an argument is considered incomplete if its\n    value did not come from the command line args. :issue:`1649`\n-   Added ``ParameterSource.PROMPT`` to track parameter values that were\n    prompted for. :issue:`1649`\n-   Options with ``nargs`` > 1 no longer raise an error if a default is\n    not given. Parameters with ``nargs`` > 1 default to ``None``, and\n    parameters with ``multiple=True`` or ``nargs=-1`` default to an\n    empty tuple. :issue:`472`\n-   Handle empty env vars as though the option were not passed. This\n    extends the change introduced in 7.1 to be consistent in more cases.\n    :issue:`1285`\n-   ``Parameter.get_default()`` checks ``Context.default_map`` to\n    handle overrides consistently in help text, ``invoke()``, and\n    prompts. :issue:`1548`\n-   Add ``prompt_required`` param to ``Option``. When set to ``False``,\n    the user will only be prompted for an input if no value was passed.\n    :issue:`736`\n-   Providing the value to an option can be made optional through\n    ``is_flag=False``, and the value can instead be prompted for or\n    passed in as a default value.\n    :issue:`549, 736, 764, 921, 1015, 1618`\n-   Fix formatting when ``Command.options_metavar`` is empty. :pr:`1551`\n-   Revert adding space between option help text that wraps.\n    :issue:`1831`\n-   The default value passed to ``prompt`` will be cast to the correct\n    type like an input value would be. :pr:`1517`\n-   Automatically generated short help messages will stop at the first\n    ending of a phrase or double linebreak. :issue:`1082`\n-   Skip progress bar render steps for efficiency with very fast\n    iterators by setting ``update_min_steps``. :issue:`676`\n-   Respect ``case_sensitive=False`` when doing shell completion for\n    ``Choice`` :issue:`1692`\n-   Use ``mkstemp()`` instead of ``mktemp()`` in pager implementation.\n    :issue:`1752`\n-   If ``Option.show_default`` is a string, it is displayed even if\n    ``default`` is ``None``. :issue:`1732`\n-   ``click.get_terminal_size()`` is deprecated and will be removed in\n    8.1. Use :func:`shutil.get_terminal_size` instead. :issue:`1736`\n-   Control the location of the temporary directory created by\n    ``CLIRunner.isolated_filesystem`` by passing ``temp_dir``. A custom\n    directory will not be removed automatically. :issue:`395`\n-   ``click.confirm()`` will prompt until input is given if called with\n    ``default=None``. :issue:`1381`\n-   Option prompts validate the value with the option's callback in\n    addition to its type. :issue:`457`\n-   ``confirmation_prompt`` can be set to a custom string. :issue:`723`\n-   Allow styled output in Jupyter on Windows. :issue:`1271`\n-   ``style()`` supports the ``strikethrough``, ``italic``, and\n    ``overline`` styles. :issue:`805, 1821`\n-   Multiline marker is removed from short help text. :issue:`1597`\n-   Restore progress bar behavior of echoing only the label if the file\n    is not a TTY. :issue:`1138`\n-   Progress bar output is shown even if execution time is less than 0.5\n    seconds. :issue:`1648`\n-   Progress bar ``item_show_func`` shows the current item, not the\n    previous item. :issue:`1353`\n-   The ``Path`` param type can be passed ``path_type=pathlib.Path`` to\n    return a path object instead of a string. :issue:`405`\n-   ``TypeError`` is raised when parameter with ``multiple=True`` or\n    ``nargs > 1`` has non-iterable default. :issue:`1749`\n-   Add a ``pass_meta_key`` decorator for passing a key from\n    ``Context.meta``. This is useful for extensions using ``meta`` to\n    store information. :issue:`1739`\n-   ``Path`` ``resolve_path`` resolves symlinks on Windows Python < 3.8.\n    :issue:`1813`\n-   Command deprecation notice appears at the start of the help text, as\n    well as in the short help. The notice is not in all caps.\n    :issue:`1791`\n-   When taking arguments from ``sys.argv`` on Windows, glob patterns,\n    user dir, and env vars are expanded. :issue:`1096`\n-   Marked messages shown by the CLI with ``gettext()`` to allow\n    applications to translate Click's built-in strings. :issue:`303`\n-   Writing invalid characters  to ``stderr`` when using the test runner\n    does not raise a ``UnicodeEncodeError``. :issue:`848`\n-   Fix an issue where ``readline`` would clear the entire ``prompt()``\n    line instead of only the input when pressing backspace. :issue:`665`\n-   Add all kwargs passed to ``Context.invoke()`` to ``ctx.params``.\n    Fixes an inconsistency when nesting ``Context.forward()`` calls.\n    :issue:`1568`\n-   The ``MultiCommand.resultcallback`` decorator is renamed to\n    ``result_callback``. The old name is deprecated. :issue:`1160`\n-   Fix issues with ``CliRunner`` output when using ``echo_stdin=True``.\n    :issue:`1101`\n-   Fix a bug of ``click.utils.make_default_short_help`` for which the\n    returned string could be as long as ``max_width + 3``. :issue:`1849`\n-   When defining a parameter, ``default`` is validated with\n    ``multiple`` and ``nargs``. More validation is done for values being\n    processed as well. :issue:`1806`\n-   ``HelpFormatter.write_text`` uses the full line width when wrapping\n    text. :issue:`1871`\n\n\nVersion 7.1.2\n-------------\n\nReleased 2020-04-27\n\n-   Revert applying shell quoting to commands for ``echo_with_pager``\n    and ``edit``. This was intended to allows spaces in commands, but\n    caused issues if the string was actually a command and arguments, or\n    on Windows. Instead, the string must be quoted manually as it should\n    appear on the command line. :issue:`1514`\n\n\nVersion 7.1.1\n-------------\n\nReleased 2020-03-09\n\n-   Fix ``ClickException`` output going to stdout instead of stderr.\n    :issue:`1495`\n\n\nVersion 7.1\n-----------\n\nReleased 2020-03-09\n\n-   Fix PyPI package name, \"click\" is lowercase again.\n-   Fix link in ``unicode_literals`` error message. :pr:`1151`\n-   Add support for colored output on UNIX Jupyter notebooks.\n    :issue:`1185`\n-   Operations that strip ANSI controls will strip the cursor hide/show\n    sequences. :issue:`1216`\n-   Remove unused compat shim for ``bytes``. :pr:`1195`\n-   Expand testing around termui, especially getchar on Windows.\n    :issue:`1116`\n-   Fix output on Windows Python 2.7 built with MSVC 14. :pr:`1342`\n-   Fix ``OSError`` when running in MSYS2. :issue:`1338`\n-   Fix ``OSError`` when redirecting to ``NUL`` stream on Windows.\n    :issue:`1065`\n-   Fix memory leak when parsing Unicode arguments on Windows.\n    :issue:`1136`\n-   Fix error in new AppEngine environments. :issue:`1462`\n-   Always return one of the passed choices for ``click.Choice``\n    :issue:`1277`, :pr:`1318`\n-   Add ``no_args_is_help`` option to ``click.Command``, defaults to\n    False :pr:`1167`\n-   Add ``show_default`` parameter to ``Context`` to enable showing\n    defaults globally. :issue:`1018`\n-   Handle ``env MYPATH=''`` as though the option were not passed.\n    :issue:`1196`\n-   It is once again possible to call ``next(bar)`` on an active\n    progress bar instance. :issue:`1125`\n-   ``open_file`` with ``atomic=True`` retains permissions of existing\n    files and respects the current umask for new files. :issue:`1376`\n-   When using the test ``CliRunner`` with ``mix_stderr=False``, if\n    ``result.stderr`` is empty it will not raise a ``ValueError``.\n    :issue:`1193`\n-   Remove the unused ``mix_stderr`` parameter from\n    ``CliRunner.invoke``. :issue:`1435`\n-   Fix ``TypeError`` raised when using bool flags and specifying\n    ``type=bool``. :issue:`1287`\n-   Newlines in option help text are replaced with spaces before\n    re-wrapping to avoid uneven line breaks. :issue:`834`\n-   ``MissingParameter`` exceptions are printable in the Python\n    interpreter. :issue:`1139`\n-   Fix how default values for file-type options are shown during\n    prompts. :issue:`914`\n-   Fix environment variable automatic generation for commands\n    containing ``-``. :issue:`1253`\n-   Option help text replaces newlines with spaces when rewrapping, but\n    preserves paragraph breaks, fixing multiline formatting.\n    :issue:`834, 1066, 1397`\n-   Option help text that is wrapped adds an extra newline at the end to\n    distinguish it from the next option. :issue:`1075`\n-   Consider ``sensible-editor`` when determining the editor to use for\n    ``click.edit()``. :pr:`1469`\n-   Arguments to system calls such as the executable path passed to\n    ``click.edit`` can contains spaces. :pr:`1470`\n-   Add ZSH completion autoloading and error handling. :issue:`1348`\n-   Add a repr to ``Command``, ``Group``, ``Option``, and ``Argument``,\n    showing the name for friendlier debugging. :issue:`1267`\n-   Completion doesn't consider option names if a value starts with\n    ``-`` after the ``--`` separator. :issue:`1247`\n-   ZSH completion escapes special characters in values. :pr:`1418`\n-   Add completion support for Fish shell. :pr:`1423`\n-   Decoding bytes option values falls back to UTF-8 in more cases.\n    :pr:`1468`\n-   Make the warning about old 2-arg parameter callbacks a deprecation\n    warning, to be removed in 8.0. This has been a warning since Click\n    2.0. :pr:`1492`\n-   Adjust error messages to standardize the types of quotes used so\n    they match error messages from Python.\n\n\nVersion 7.0\n-----------\n\nReleased 2018-09-25\n\n-   Drop support for Python 2.6 and 3.3. :pr:`967, 976`\n-   Wrap ``click.Choice``'s missing message. :issue:`202`, :pr:`1000`\n-   Add native ZSH autocompletion support. :issue:`323`, :pr:`865`\n-   Document that ANSI color info isn't parsed from bytearrays in Python\n    2. :issue:`334`\n-   Document byte-stripping behavior of ``CliRunner``. :issue:`334`,\n    :pr:`1010`\n-   Usage errors now hint at the ``--help`` option. :issue:`393`,\n    :pr:`557`\n-   Implement streaming pager. :issue:`409`, :pr:`889`\n-   Extract bar formatting to its own method. :pr:`414`\n-   Add ``DateTime`` type for converting input in given date time\n    formats. :pr:`423`\n-   ``secho``'s first argument can now be ``None``, like in ``echo``.\n    :pr:`424`\n-   Fixes a ``ZeroDivisionError`` in ``ProgressBar.make_step``, when the\n    arg passed to the first call of ``ProgressBar.update`` is 0.\n    :issue:`447`, :pr:`1012`\n-   Show progressbar only if total execution time is visible. :pr:`487`\n-   Added the ability to hide commands and options from help. :pr:`500`\n-   Document that options can be ``required=True``. :issue:`514`,\n    :pr:`1022`\n-   Non-standalone calls to ``Context.exit`` return the exit code,\n    rather than calling ``sys.exit``. :issue:`667`, :pr:`533, 1098`\n-   ``click.getchar()`` returns Unicode in Python 3 on Windows,\n    consistent with other platforms. :issue:`537, 821, 822, 1088`,\n    :pr:`1108`\n-   Added ``FloatRange`` type. :pr:`538, 553`\n-   Added support for bash completion of ``type=click.Choice`` for\n    ``Options`` and ``Arguments``. :issue:`535`, :pr:`681`\n-   Only allow one positional arg for ``Argument`` parameter\n    declaration. :issue:`568, 574`, :pr:`1014`\n-   Add ``case_sensitive=False`` as an option to Choice. :issue:`569`\n-   ``click.getchar()`` correctly raises ``KeyboardInterrupt`` on \"^C\"\n    and ``EOFError`` on \"^D\" on Linux. :issue:`583`, :pr:`1115`\n-   Fix encoding issue with ``click.getchar(echo=True)`` on Linux.\n    :pr:`1115`\n-   ``param_hint`` in errors now derived from param itself.\n    :issue:`598, 704`, :pr:`709`\n-   Add a test that ensures that when an argument is formatted into a\n    usage error, its metavar is used, not its name. :pr:`612`\n-   Allow setting ``prog_name`` as extra in ``CliRunner.invoke``.\n    :issue:`616`, :pr:`999`\n-   Help text taken from docstrings truncates at the ``\\f`` form feed\n    character, useful for hiding Sphinx-style parameter documentation.\n    :pr:`629, 1091`\n-   ``launch`` now works properly under Cygwin. :pr:`650`\n-   Update progress after iteration. :issue:`651`, :pr:`706`\n-   ``CliRunner.invoke`` now may receive ``args`` as a string\n    representing a Unix shell command. :pr:`664`\n-   Make ``Argument.make_metavar()`` default to type metavar. :pr:`675`\n-   Add documentation for ``ignore_unknown_options``. :pr:`684`\n-   Add bright colors support for ``click.style`` and fix the reset\n    option for parameters ``fg`` and ``bg``. :issue:`703`, :pr:`809`\n-   Add ``show_envvar`` for showing environment variables in help.\n    :pr:`710`\n-   Avoid ``BrokenPipeError`` during interpreter shutdown when stdout or\n    stderr is a closed pipe. :issue:`712`, :pr:`1106`\n-   Document customizing option names. :issue:`725`, :pr:`1016`\n-   Disable ``sys._getframes()`` on Python interpreters that don't\n    support it. :pr:`728`\n-   Fix bug in test runner when calling ``sys.exit`` with ``None``.\n    :pr:`739`\n-   Clarify documentation on command line options. :issue:`741`,\n    :pr:`1003`\n-   Fix crash on Windows console. :issue:`744`\n-   Fix bug that caused bash completion to give improper completions on\n    chained commands. :issue:`754`, :pr:`774`\n-   Added support for dynamic bash completion from a user-supplied\n    callback. :pr:`755`\n-   Added support for bash completions containing spaces. :pr:`773`\n-   Allow autocompletion function to determine whether or not to return\n    completions that start with the incomplete argument. :issue:`790`,\n    :pr:`806`\n-   Fix option naming routine to match documentation and be\n    deterministic. :issue:`793`, :pr:`794`\n-   Fix path validation bug. :issue:`795`, :pr:`1020`\n-   Add test and documentation for ``Option`` naming: functionality.\n    :pr:`799`\n-   Update doc to match arg name for ``path_type``. :pr:`801`\n-   Raw strings added so correct escaping occurs. :pr:`807`\n-   Fix 16k character limit of ``click.echo`` on Windows. :issue:`816`,\n    :pr:`819`\n-   Overcome 64k character limit when writing to binary stream on\n    Windows 7. :issue:`825`, :pr:`830`\n-   Add bool conversion for \"t\" and \"f\". :pr:`842`\n-   ``NoSuchOption`` errors take ``ctx`` so that ``--help`` hint gets\n    printed in error output. :pr:`860`\n-   Fixed the behavior of Click error messages with regards to Unicode\n    on 2.x and 3.x. Message is now always Unicode and the str and\n    Unicode special methods work as you expect on that platform.\n    :issue:`862`\n-   Progress bar now uses stderr by default. :pr:`863`\n-   Add support for auto-completion documentation. :issue:`866`,\n    :pr:`869`\n-   Allow ``CliRunner`` to separate stdout and stderr. :pr:`868`\n-   Fix variable precedence. :issue:`873`, :pr:`874`\n-   Fix invalid escape sequences. :pr:`877`\n-   Fix ``ResourceWarning`` that occurs during some tests. :pr:`878`\n-   When detecting a misconfigured locale, don't fail if the ``locale``\n    command fails. :pr:`880`\n-   Add ``case_sensitive=False`` as an option to ``Choice`` types.\n    :pr:`887`\n-   Force stdout/stderr writable. This works around issues with badly\n    patched standard streams like those from Jupyter. :pr:`918`\n-   Fix completion of subcommand options after last argument\n    :issue:`919`, :pr:`930`\n-   ``_AtomicFile`` now uses the ``realpath`` of the original filename\n    so that changing the working directory does not affect it. :pr:`920`\n-   Fix incorrect completions when defaults are present :issue:`925`,\n    :pr:`930`\n-   Add copy option attrs so that custom classes can be re-used.\n    :issue:`926`, :pr:`994`\n-   \"x\" and \"a\" file modes now use stdout when file is ``\"-\"``.\n    :pr:`929`\n-   Fix missing comma in ``__all__`` list. :pr:`935`\n-   Clarify how parameters are named. :issue:`949`, :pr:`1009`\n-   Stdout is now automatically set to non blocking. :pr:`954`\n-   Do not set options twice. :pr:`962`\n-   Move ``fcntl`` import. :pr:`965`\n-   Fix Google App Engine ``ImportError``. :pr:`995`\n-   Better handling of help text for dynamic default option values.\n    :pr:`996`\n-   Fix ``get_winter_size()`` so it correctly returns ``(0,0)``.\n    :pr:`997`\n-   Add test case checking for custom param type. :pr:`1001`\n-   Allow short width to address cmd formatting. :pr:`1002`\n-   Add details about Python version support. :pr:`1004`\n-   Added deprecation flag to commands. :pr:`1005`\n-   Fixed issues where ``fd`` was undefined. :pr:`1007`\n-   Fix formatting for short help. :pr:`1008`\n-   Document how ``auto_envvar_prefix`` works with command groups.\n    :pr:`1011`\n-   Don't add newlines by default for progress bars. :pr:`1013`\n-   Use Python sorting order for ZSH completions. :issue:`1047`,\n    :pr:`1059`\n-   Document that parameter names are converted to lowercase by default.\n    :pr:`1055`\n-   Subcommands that are named by the function now automatically have\n    the underscore replaced with a dash. If you register a function\n    named ``my_command`` it becomes ``my-command`` in the command line\n    interface.\n-   Hide hidden commands and options from completion. :issue:`1058`,\n    :pr:`1061`\n-   Fix absolute import blocking Click from being vendored into a\n    project on Windows. :issue:`1068`, :pr:`1069`\n-   Fix issue where a lowercase ``auto_envvar_prefix`` would not be\n    converted to uppercase. :pr:`1105`\n\n\nVersion 6.7\n-----------\n\nReleased 2017-01-06\n\n-   Make ``click.progressbar`` work with ``codecs.open`` files.\n    :pr:`637`\n-   Fix bug in bash completion with nested subcommands. :pr:`639`\n-   Fix test runner not saving caller env correctly. :pr:`644`\n-   Fix handling of SIGPIPE. :pr:`62`\n-   Deal with broken Windows environments such as Google App Engine's.\n    :issue:`711`\n\n\nVersion 6.6\n-----------\n\nReleased 2016-04-04\n\n-   Fix bug in ``click.Path`` where it would crash when passed a ``-``.\n    :issue:`551`\n\n\nVersion 6.4\n-----------\n\nReleased 2016-03-24\n\n-   Fix bug in bash completion where click would discard one or more\n    trailing arguments. :issue:`471`\n\n\nVersion 6.3\n-----------\n\nReleased 2016-02-22\n\n-   Fix argument checks for interpreter invoke with ``-m`` and ``-c`` on\n    Windows.\n-   Fixed a bug that cased locale detection to error out on Python 3.\n\n\nVersion 6.2\n-----------\n\nReleased 2015-11-27\n\n-   Correct fix for hidden progress bars.\n\n\nVersion 6.1\n-----------\n\nReleased 2015-11-27\n\n-   Resolved an issue with invisible progress bars no longer rendering.\n-   Disable chain commands with subcommands as they were inherently\n    broken.\n-   Fix ``MissingParameter`` not working without parameters passed.\n\n\nVersion 6.0\n-----------\n\nReleased 2015-11-24, codename \"pow pow\"\n\n-   Optimized the progressbar rendering to not render when it did not\n    actually change.\n-   Explicitly disallow ``nargs=-1`` with a set default.\n-   The context is now closed before it's popped from the stack.\n-   Added support for short aliases for the false flag on toggles.\n-   Click will now attempt to aid you with debugging locale errors\n    better by listing with the help of the OS what locales are\n    available.\n-   Click used to return byte strings on Python 2 in some unit-testing\n    situations. This has been fixed to correctly return unicode strings\n    now.\n-   For Windows users on Python 2, Click will now handle Unicode more\n    correctly handle Unicode coming in from the system. This also has\n    the disappointing side effect that filenames will now be always\n    unicode by default in the ``Path`` type which means that this can\n    introduce small bugs for code not aware of this.\n-   Added a ``type`` parameter to ``Path`` to force a specific string\n    type on the value.\n-   For users running Python on Windows the ``echo`` and ``prompt``\n    functions now work with full unicode functionality in the Python\n    windows console by emulating an output stream. This also applies to\n    getting the virtual output and input streams via\n    ``click.get_text_stream(...)``.\n-   Unittests now always force a certain virtual terminal width.\n-   Added support for allowing dashes to indicate standard streams to\n    the ``Path`` type.\n-   Multi commands in chain mode no longer propagate arguments left over\n    from parsing to the callbacks. It's also now disallowed through an\n    exception when optional arguments are attached to multi commands if\n    chain mode is enabled.\n-   Relaxed restriction that disallowed chained commands to have other\n    chained commands as child commands.\n-   Arguments with positive nargs can now have defaults implemented.\n    Previously this configuration would often result in slightly\n    unexpected values be returned.\n\n\nVersion 5.1\n-----------\n\nReleased 2015-08-17\n\n-   Fix a bug in ``pass_obj`` that would accidentally pass the context\n    too.\n\n\nVersion 5.0\n-----------\n\nReleased 2015-08-16, codename \"tok tok\"\n\n-   Removed various deprecated functionality.\n-   Atomic files now only accept the ``w`` mode.\n-   Change the usage part of help output for very long commands to wrap\n    their arguments onto the next line, indented by 4 spaces.\n-   Fix a bug where return code and error messages were incorrect when\n    using ``CliRunner``.\n-   Added ``get_current_context``.\n-   Added a ``meta`` dictionary to the context which is shared across\n    the linked list of contexts to allow click utilities to place state\n    there.\n-   Introduced ``Context.scope``.\n-   The ``echo`` function is now threadsafe: It calls the ``write``\n    method of the underlying object only once.\n-   ``prompt(hide_input=True)`` now prints a newline on ``^C``.\n-   Click will now warn if users are using ``unicode_literals``.\n-   Click will now ignore the ``PAGER`` environment variable if it is\n    empty or contains only whitespace.\n-   The ``click-contrib`` GitHub organization was created.\n\n\nVersion 4.1\n-----------\n\nReleased 2015-07-14\n\n-   Fix a bug where error messages would include a trailing ``None``\n    string.\n-   Fix a bug where Click would crash on docstrings with trailing\n    newlines.\n-   Support streams with encoding set to ``None`` on Python 3 by barfing\n    with a better error.\n-   Handle ^C in less-pager properly.\n-   Handle return value of ``None`` from ``sys.getfilesystemencoding``\n-   Fix crash when writing to unicode files with ``click.echo``.\n-   Fix type inference with multiple options.\n\n\nVersion 4.0\n-----------\n\nReleased 2015-03-31, codename \"zoom zoom\"\n\n-   Added ``color`` parameters to lots of interfaces that directly or\n    indirectly call into echoing. This previously was always\n    autodetection (with the exception of the ``echo_via_pager``\n    function). Now you can forcefully enable or disable it, overriding\n    the auto detection of Click.\n-   Added an ``UNPROCESSED`` type which does not perform any type\n    changes which simplifies text handling on 2.x / 3.x in some special\n    advanced usecases.\n-   Added ``NoSuchOption`` and ``BadOptionUsage`` exceptions for more\n    generic handling of errors.\n-   Added support for handling of unprocessed options which can be\n    useful in situations where arguments are forwarded to underlying\n    tools.\n-   Added ``max_content_width`` parameter to the context which can be\n    used to change the maximum width of help output. By default Click\n    will not format content for more than 80 characters width.\n-   Added support for writing prompts to stderr.\n-   Fix a bug when showing the default for multiple arguments.\n-   Added support for custom subclasses to ``option`` and ``argument``.\n-   Fix bug in ``clear()`` on Windows when colorama is installed.\n-   Reject ``nargs=-1`` for options properly. Options cannot be\n    variadic.\n-   Fixed an issue with bash completion not working properly for\n    commands with non ASCII characters or dashes.\n-   Added a way to manually update the progressbar.\n-   Changed the formatting of missing arguments. Previously the internal\n    argument name was shown in error messages, now the metavar is shown\n    if passed. In case an automated metavar is selected, it's stripped\n    of extra formatting first.\n\n\nVersion 3.3\n-----------\n\nReleased 2014-09-08\n\n-   Fixed an issue with error reporting on Python 3 for invalid\n    forwarding of commands.\n\n\nVersion 3.2\n-----------\n\nReleased 2014-08-22\n\n-   Added missing ``err`` parameter forwarding to the ``secho``\n    function.\n-   Fixed default parameters not being handled properly by the context\n    invoke method. This is a backwards incompatible change if the\n    function was used improperly.\n-   Removed the ``invoked_subcommands`` attribute largely. It is not\n    possible to provide it to work error free due to how the parsing\n    works so this API has been deprecated.\n-   Restored the functionality of ``invoked_subcommand`` which was\n    broken as a regression in 3.1.\n\n\nVersion 3.1\n-----------\n\nReleased 2014-08-13\n\n-   Fixed a regression that caused contexts of subcommands to be created\n    before the parent command was invoked which was a regression from\n    earlier Click versions.\n\n\nVersion 3.0\n-----------\n\nReleased 2014-08-12, codename \"clonk clonk\"\n\n-   Formatter now no longer attempts to accommodate for terminals\n    smaller than 50 characters. If that happens it just assumes a\n    minimal width.\n-   Added a way to not swallow exceptions in the test system.\n-   Added better support for colors with pagers and ways to override the\n    autodetection.\n-   The CLI runner's result object now has a traceback attached.\n-   Improved automatic short help detection to work better with dots\n    that do not terminate sentences.\n-   When defining options without actual valid option strings now,\n    Click will give an error message instead of silently passing. This\n    should catch situations where users wanted to created arguments\n    instead of options.\n-   Restructured Click internally to support vendoring.\n-   Added support for multi command chaining.\n-   Added support for defaults on options with ``multiple`` and options\n    and arguments with ``nargs != 1``.\n-   Label passed to ``progressbar`` is no longer rendered with\n    whitespace stripped.\n-   Added a way to disable the standalone mode of the ``main`` method on\n    a Click command to be able to handle errors better.\n-   Added support for returning values from command callbacks.\n-   Added simplifications for printing to stderr from ``echo``.\n-   Added result callbacks for groups.\n-   Entering a context multiple times defers the cleanup until the last\n    exit occurs.\n-   Added ``open_file``.\n\n\nVersion 2.6\n-----------\n\nReleased 2014-08-11\n\n-   Fixed an issue where the wrapped streams on Python 3 would be\n    reporting incorrect values for seekable.\n\n\nVersion 2.5\n-----------\n\nReleased 2014-07-28\n\n-   Fixed a bug with text wrapping on Python 3.\n\n\nVersion 2.4\n-----------\n\nReleased 2014-07-04\n\n-   Corrected a bug in the change of the help option in 2.3.\n\n\nVersion 2.3\n-----------\n\nReleased 2014-07-03\n\n-   Fixed an incorrectly formatted help record for count options.\n-   Add support for ansi code stripping on Windows if colorama is not\n    available.\n-   Restored the Click 1.0 handling of the help parameter for certain\n    edge cases.\n\n\nVersion 2.2\n-----------\n\nReleased 2014-06-26\n\n-   Fixed tty detection on PyPy.\n-   Fixed an issue that progress bars were not rendered when the context\n    manager was entered.\n\n\nVersion 2.1\n-----------\n\nReleased 2014-06-14\n\n-   Fixed the :func:`launch` function on windows.\n-   Improved the colorama support on windows to try hard to not screw up\n    the console if the application is interrupted.\n-   Fixed windows terminals incorrectly being reported to be 80\n    characters wide instead of 79\n-   Use colorama win32 bindings if available to get the correct\n    dimensions of a windows terminal.\n-   Fixed an issue with custom function types on Python 3.\n-   Fixed an issue with unknown options being incorrectly reported in\n    error messages.\n\n\nVersion 2.0\n-----------\n\nReleased 2014-06-06, codename \"tap tap tap\"\n\n-   Added support for opening stdin/stdout on Windows in binary mode\n    correctly.\n-   Added support for atomic writes to files by going through a\n    temporary file.\n-   Introduced :exc:`BadParameter` which can be used to easily perform\n    custom validation with the same error messages as in the type\n    system.\n-   Added :func:`progressbar`; a function to show progress bars.\n-   Added :func:`get_app_dir`; a function to calculate the home folder\n    for configs.\n-   Added transparent handling for ANSI codes into the :func:`echo`\n    function through ``colorama``.\n-   Added :func:`clear` function.\n-   Breaking change: parameter callbacks now get the parameter object\n    passed as second argument. There is legacy support for old callbacks\n    which will warn but still execute the script.\n-   Added :func:`style`, :func:`unstyle` and :func:`secho` for ANSI\n    styles.\n-   Added an :func:`edit` function that invokes the default editor.\n-   Added an :func:`launch` function that launches browsers and\n    applications.\n-   Nargs of -1 for arguments can now be forced to be a single item\n    through the required flag. It defaults to not required.\n-   Setting a default for arguments now implicitly makes it non\n    required.\n-   Changed \"yN\" / \"Yn\" to \"y/N\" and \"Y/n\" in confirmation prompts.\n-   Added basic support for bash completion.\n-   Added :func:`getchar` to fetch a single character from the terminal.\n-   Errors now go to stderr as intended.\n-   Fixed various issues with more exotic parameter formats like\n    DOS/Windows style arguments.\n-   Added :func:`pause` which works similar to the Windows ``pause`` cmd\n    built-in but becomes an automatic noop if the application is not run\n    through a terminal.\n-   Added a bit of extra information about missing choice parameters.\n-   Changed how the help function is implemented to allow global\n    overriding of the help option.\n-   Added support for token normalization to implement case insensitive\n    handling.\n-   Added support for providing defaults for context settings.\n\n\nVersion 1.1\n-----------\n\nReleased 2014-05-23\n\n-   Fixed a bug that caused text files in Python 2 to not accept native\n    strings.\n\n\nVersion 1.0\n-----------\n\nReleased 2014-05-21\n\n-   Initial release.\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 6.3310546875,
          "content": "How to contribute to Click\n==========================\n\nThank you for considering contributing to Click!\n\n\nSupport questions\n-----------------\n\nPlease don't use the issue tracker for this. The issue tracker is a tool\nto address bugs and feature requests in Click itself. Use one of the\nfollowing resources for questions about using Click or issues with your\nown code:\n\n-   The ``#get-help`` channel on our Discord chat:\n    https://discord.gg/pallets\n-   The mailing list flask@python.org for long term discussion or larger\n    issues.\n-   Ask on `Stack Overflow`_. Search with Google first using:\n    ``site:stackoverflow.com python click {search term, exception message, etc.}``\n\n.. _Stack Overflow: https://stackoverflow.com/questions/tagged/python-click?tab=Frequent\n\n\nReporting issues\n----------------\n\nInclude the following information in your post:\n\n-   Describe what you expected to happen.\n-   If possible, include a `minimal reproducible example`_ to help us\n    identify the issue. This also helps check that the issue is not with\n    your own code.\n-   Describe what actually happened. Include the full traceback if there\n    was an exception.\n-   List your Python and Click versions. If possible, check if this\n    issue is already fixed in the latest releases or the latest code in\n    the repository.\n\n.. _minimal reproducible example: https://stackoverflow.com/help/minimal-reproducible-example\n\n\nSubmitting patches\n------------------\n\nIf there is not an open issue for what you want to submit, prefer\nopening one for discussion before working on a PR. You can work on any\nissue that doesn't have an open PR linked to it or a maintainer assigned\nto it. These show up in the sidebar. No need to ask if you can work on\nan issue that interests you.\n\nInclude the following in your patch:\n\n-   Use `Black`_ to format your code. This and other tools will run\n    automatically if you install `pre-commit`_ using the instructions\n    below.\n-   Include tests if your patch adds or changes code. Make sure the test\n    fails without your patch.\n-   Update any relevant docs pages and docstrings. Docs pages and\n    docstrings should be wrapped at 72 characters.\n-   Add an entry in ``CHANGES.rst``. Use the same style as other\n    entries. Also include ``.. versionchanged::`` inline changelogs in\n    relevant docstrings.\n\n.. _Black: https://black.readthedocs.io\n.. _pre-commit: https://pre-commit.com\n\n\nFirst time setup\n~~~~~~~~~~~~~~~~\n\n-   Download and install the `latest version of git`_.\n-   Configure git with your `username`_ and `email`_.\n\n    .. code-block:: text\n\n        $ git config --global user.name 'your name'\n        $ git config --global user.email 'your email'\n\n-   Make sure you have a `GitHub account`_.\n-   Fork Click to your GitHub account by clicking the `Fork`_ button.\n-   `Clone`_ the main repository locally.\n\n    .. code-block:: text\n\n        $ git clone https://github.com/pallets/click\n        $ cd click\n\n-   Add your fork as a remote to push your work to. Replace\n    ``{username}`` with your username. This names the remote \"fork\", the\n    default Pallets remote is \"origin\".\n\n    .. code-block:: text\n\n        $ git remote add fork https://github.com/{username}/click\n\n-   Create a virtualenv.\n\n    .. code-block:: text\n\n        $ python3 -m venv env\n        $ . env/bin/activate\n\n    On Windows, activating is different.\n\n    .. code-block:: text\n\n        > env\\Scripts\\activate\n\n-   Install the development dependencies, then install Click in\n    editable mode.\n\n    .. code-block:: text\n\n        $ pip install -r requirements/dev.txt && pip install -e .\n\n-   Install the pre-commit hooks.\n\n    .. code-block:: text\n\n        $ pre-commit install\n\n.. _latest version of git: https://git-scm.com/downloads\n.. _username: https://docs.github.com/en/github/using-git/setting-your-username-in-git\n.. _email: https://docs.github.com/en/github/setting-up-and-managing-your-github-user-account/setting-your-commit-email-address\n.. _GitHub account: https://github.com/join\n.. _Fork: https://github.com/pallets/click/fork\n.. _Clone: https://docs.github.com/en/github/getting-started-with-github/fork-a-repo#step-2-create-a-local-clone-of-your-fork\n\n\nStart coding\n~~~~~~~~~~~~\n\n-   Create a branch to identify the issue you would like to work on. If\n    you're submitting a bug or documentation fix, branch off of the\n    latest \".x\" branch.\n\n    .. code-block:: text\n\n        $ git fetch origin\n        $ git checkout -b your-branch-name origin/8.1.x\n\n    If you're submitting a feature addition or change, branch off of the\n    \"main\" branch.\n\n    .. code-block:: text\n\n        $ git fetch origin\n        $ git checkout -b your-branch-name origin/main\n\n-   Using your favorite editor, make your changes,\n    `committing as you go`_.\n-   Include tests that cover any code changes you make. Make sure the\n    test fails without your patch. Run the tests as described below.\n-   Push your commits to your fork on GitHub and\n    `create a pull request`_. Link to the issue being addressed with\n    ``fixes #123`` in the pull request.\n\n    .. code-block:: text\n\n        $ git push --set-upstream fork your-branch-name\n\n.. _committing as you go: https://dont-be-afraid-to-commit.readthedocs.io/en/latest/git/commandlinegit.html#commit-your-changes\n.. _create a pull request: https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request\n\n\nRunning the tests\n~~~~~~~~~~~~~~~~~\n\nRun the basic test suite with pytest.\n\n.. code-block:: text\n\n    $ pytest\n\nThis runs the tests for the current environment, which is usually\nsufficient. CI will run the full suite when you submit your pull\nrequest. You can run the full test suite with tox if you don't want to\nwait.\n\n.. code-block:: text\n\n    $ tox\n\n\nRunning test coverage\n~~~~~~~~~~~~~~~~~~~~~\n\nGenerating a report of lines that do not have test coverage can indicate\nwhere to start contributing. Run ``pytest`` using ``coverage`` and\ngenerate a report.\n\n.. code-block:: text\n\n    $ pip install coverage\n    $ coverage run -m pytest\n    $ coverage html\n\nOpen ``htmlcov/index.html`` in your browser to explore the report.\n\nRead more about `coverage <https://coverage.readthedocs.io>`__.\n\n\nBuilding the docs\n~~~~~~~~~~~~~~~~~\n\nBuild the docs in the ``docs`` directory using Sphinx.\n\n.. code-block:: text\n\n    $ cd docs\n    $ make html\n\nOpen ``_build/html/index.html`` in your browser to view the docs.\n\nRead more about `Sphinx <https://www.sphinx-doc.org/en/stable/>`__.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.4404296875,
          "content": "Copyright 2014 Pallets\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n1.  Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n2.  Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\n3.  Neither the name of the copyright holder nor the names of its\n    contributors may be used to endorse or promote products derived from\n    this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.34375,
          "content": "# $ click_\n\nClick is a Python package for creating beautiful command line interfaces\nin a composable way with as little code as necessary. It's the \"Command\nLine Interface Creation Kit\". It's highly configurable but comes with\nsensible defaults out of the box.\n\nIt aims to make the process of writing command line tools quick and fun\nwhile also preventing any frustration caused by the inability to\nimplement an intended CLI API.\n\nClick in three points:\n\n-   Arbitrary nesting of commands\n-   Automatic help page generation\n-   Supports lazy loading of subcommands at runtime\n\n\n## A Simple Example\n\n```python\nimport click\n\n@click.command()\n@click.option(\"--count\", default=1, help=\"Number of greetings.\")\n@click.option(\"--name\", prompt=\"Your name\", help=\"The person to greet.\")\ndef hello(count, name):\n    \"\"\"Simple program that greets NAME for a total of COUNT times.\"\"\"\n    for _ in range(count):\n        click.echo(f\"Hello, {name}!\")\n\nif __name__ == '__main__':\n    hello()\n```\n\n```\n$ python hello.py --count=3\nYour name: Click\nHello, Click!\nHello, Click!\nHello, Click!\n```\n\n\n## Donate\n\nThe Pallets organization develops and supports Click and other popular\npackages. In order to grow the community of contributors and users, and\nallow the maintainers to devote more time to the projects, [please\ndonate today][].\n\n[please donate today]: https://palletsprojects.com/donate\n"
        },
        {
          "name": "artwork",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.0107421875,
          "content": "[project]\nname = \"click\"\nversion = \"8.2.0.dev\"\ndescription = \"Composable command line interface toolkit\"\nreadme = \"README.md\"\nlicense = {file = \"LICENSE.txt\"}\nmaintainers = [{name = \"Pallets\", email = \"contact@palletsprojects.com\"}]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: BSD License\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python\",\n    \"Typing :: Typed\",\n]\nrequires-python = \">=3.8\"\ndependencies = [\n    \"colorama; platform_system == 'Windows'\",\n]\n\n[project.urls]\nDonate = \"https://palletsprojects.com/donate\"\nDocumentation = \"https://click.palletsprojects.com/\"\nChanges = \"https://click.palletsprojects.com/changes/\"\nSource = \"https://github.com/pallets/click/\"\nChat = \"https://discord.gg/pallets\"\n\n[build-system]\nrequires = [\"flit_core<4\"]\nbuild-backend = \"flit_core.buildapi\"\n\n[tool.flit.module]\nname = \"click\"\n\n[tool.flit.sdist]\ninclude = [\n    \"docs/\",\n    \"requirements/\",\n    \"tests/\",\n    \"CHANGES.rst\",\n    \"tox.ini\",\n]\nexclude = [\n    \"docs/_build/\",\n]\n\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\nfilterwarnings = [\n    \"error\",\n]\n\n[tool.coverage.run]\nbranch = true\nsource = [\"click\", \"tests\"]\n\n[tool.coverage.paths]\nsource = [\"src\", \"*/site-packages\"]\n\n[tool.mypy]\npython_version = \"3.8\"\nfiles = [\"src/click\", \"tests/typing\"]\nshow_error_codes = true\npretty = true\nstrict = true\n\n[[tool.mypy.overrides]]\nmodule = [\n    \"colorama.*\",\n]\nignore_missing_imports = true\n\n[tool.pyright]\npythonVersion = \"3.8\"\ninclude = [\"src/click\", \"tests/typing\"]\ntypeCheckingMode = \"basic\"\n\n[tool.ruff]\nextend-exclude = [\"examples/\"]\nsrc = [\"src\"]\nfix = true\nshow-fixes = true\noutput-format = \"full\"\n\n[tool.ruff.lint]\nselect = [\n    \"B\",  # flake8-bugbear\n    \"E\",  # pycodestyle error\n    \"F\",  # pyflakes\n    \"I\",  # isort\n    \"UP\",  # pyupgrade\n    \"W\",  # pycodestyle warning\n]\n\n[tool.ruff.lint.isort]\nforce-single-line = true\norder-by-type = false\n\n[tool.gha-update]\ntag-only = [\n    \"slsa-framework/slsa-github-generator\",\n]\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.5283203125,
          "content": "[tox]\nenvlist =\n    py3{13,12,11,10,9,8}\n    pypy310\n    style\n    typing\n    docs\nskip_missing_interpreters = true\n\n[testenv]\npackage = wheel\nwheel_build_env = .pkg\nconstrain_package_deps = true\nuse_frozen_constraints = true\ndeps = -r requirements/tests.txt\ncommands = pytest -v --tb=short --basetemp={envtmpdir} {posargs}\n\n[testenv:style]\ndeps = pre-commit\nskip_install = true\ncommands = pre-commit run --all-files\n\n[testenv:typing]\ndeps = -r requirements/typing.txt\ncommands =\n    mypy --platform linux\n    mypy --platform darwin\n    mypy --platform win32\n    pyright tests/typing --pythonplatform Linux\n    pyright tests/typing --pythonplatform Darwin\n    pyright tests/typing --pythonplatform Windows\n    pyright --verifytypes click --ignoreexternal --pythonplatform Linux\n    pyright --verifytypes click --ignoreexternal --pythonplatform Darwin\n    pyright --verifytypes click --ignoreexternal --pythonplatform Windows\n\n[testenv:docs]\ndeps = -r requirements/docs.txt\ncommands = sphinx-build -E -W -b dirhtml docs docs/_build/dirhtml\n\n[testenv:update-actions]\nlabels = update\ndeps = gha-update\ncommands = gha-update\n\n[testenv:update-pre_commit]\nlabels = update\ndeps = pre-commit\nskip_install = true\ncommands = pre-commit autoupdate -j4\n\n[testenv:update-requirements]\nlabels = update\ndeps = pip-tools\nskip_install = true\nchange_dir = requirements\ncommands =\n    pip-compile build.in -q {posargs:-U}\n    pip-compile docs.in -q {posargs:-U}\n    pip-compile tests.in -q {posargs:-U}\n    pip-compile typing.in -q {posargs:-U}\n    pip-compile dev.in -q {posargs:-U}\n"
        }
      ]
    }
  ]
}