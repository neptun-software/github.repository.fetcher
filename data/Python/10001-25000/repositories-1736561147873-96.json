{
  "metadata": {
    "timestamp": 1736561147873,
    "page": 96,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fishaudio/fish-speech",
      "stars": 18247,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0673828125,
          "content": ".git\n.github\nresults\ndata\n*.filelist\n/data_server/target\ncheckpoints\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3564453125,
          "content": ".DS_Store\n.pgx.*\n.pdm-python\n/fish_speech.egg-info\n__pycache__\n/results\n/data\n/*.test.sh\n*.filelist\nfilelists\n/fish_speech/text/cmudict_cache.pickle\n/checkpoints\n/.vscode\n/data_server/target\n/*.npy\n/*.wav\n/*.mp3\n/*.lab\n/results\n/data\n/.idea\nffmpeg.exe\nffprobe.exe\nasr-label*\n/.cache\n/fishenv\n/.locale\n/demo-audios\n/references\n/example\n/faster_whisper\n/.gradio\n*log\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.51953125,
          "content": "ci:\n  autoupdate_schedule: monthly\n\nrepos:\n  - repo: https://github.com/pycqa/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n        args: [--profile=black]\n\n  - repo: https://github.com/psf/black\n    rev: 24.10.0\n    hooks:\n      - id: black\n\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: end-of-file-fixer\n      - id: check-yaml\n      - id: check-json\n      - id: mixed-line-ending\n        args: [\"--fix=lf\"]\n      - id: check-added-large-files\n        args: [\"--maxkb=5000\"]\n"
        },
        {
          "name": ".project-root",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.427734375,
          "content": "# Read the Docs configuration file for MkDocs projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.12\"\n\nmkdocs:\n  configuration: mkdocs.yml\n\n# Optionally declare the Python requirements required to build your docs\npython:\n  install:\n  - requirements: docs/requirements.txt\n"
        },
        {
          "name": "API_FLAGS.txt",
          "type": "blob",
          "size": 0.23046875,
          "content": "# --infer\n--api\n--listen 0.0.0.0:8080 \\\n--llama-checkpoint-path \"checkpoints/fish-speech-1.5\" \\\n--decoder-checkpoint-path \"checkpoints/fish-speech-1.5/firefly-gan-vq-fsq-8x1024-21hz-generator.pth\" \\\n--decoder-config-name firefly_gan_vq\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.07421875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2024 Fish Audio\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.431640625,
          "content": "<div align=\"center\">\n<h1>Fish Speech</h1>\n\n**English** | [简体中文](docs/README.zh.md) | [Portuguese](docs/README.pt-BR.md) | [日本語](docs/README.ja.md) | [한국어](docs/README.ko.md) <br>\n\n<a href=\"https://www.producthunt.com/posts/fish-speech-1-4?embed=true&utm_source=badge-featured&utm_medium=badge&utm_souce=badge-fish&#0045;speech&#0045;1&#0045;4\" target=\"_blank\">\n    <img src=\"https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=488440&theme=light\" alt=\"Fish&#0032;Speech&#0032;1&#0046;4 - Open&#0045;Source&#0032;Multilingual&#0032;Text&#0045;to&#0045;Speech&#0032;with&#0032;Voice&#0032;Cloning | Product Hunt\" style=\"width: 250px; height: 54px;\" width=\"250\" height=\"54\" />\n</a>\n<a href=\"https://trendshift.io/repositories/7014\" target=\"_blank\">\n    <img src=\"https://trendshift.io/api/badge/repositories/7014\" alt=\"fishaudio%2Ffish-speech | Trendshift\" style=\"width: 250px; height: 55px;\" width=\"250\" height=\"55\"/>\n</a>\n<br>\n</div>\n<br>\n\n<div align=\"center\">\n    <img src=\"https://count.getloli.com/get/@fish-speech?theme=asoul\" /><br>\n</div>\n\n<br>\n\n<div align=\"center\">\n    <a target=\"_blank\" href=\"https://discord.gg/Es5qTB9BcN\">\n        <img alt=\"Discord\" src=\"https://img.shields.io/discord/1214047546020728892?color=%23738ADB&label=Discord&logo=discord&logoColor=white&style=flat-square\"/>\n    </a>\n    <a target=\"_blank\" href=\"https://hub.docker.com/r/fishaudio/fish-speech\">\n        <img alt=\"Docker\" src=\"https://img.shields.io/docker/pulls/fishaudio/fish-speech?style=flat-square&logo=docker\"/>\n    </a>\n    <a target=\"_blank\" href=\"https://huggingface.co/spaces/fishaudio/fish-speech-1\">\n        <img alt=\"Huggingface\" src=\"https://img.shields.io/badge/🤗%20-space%20demo-yellow\"/>\n    </a>\n    <a target=\"_blank\" href=\"https://pd.qq.com/s/bwxia254o\">\n      <img alt=\"QQ Channel\" src=\"https://img.shields.io/badge/QQ-blue?logo=tencentqq\">\n    </a>\n</div>\n\nThis codebase is released under Apache License and all model weights are released under CC-BY-NC-SA-4.0 License. Please refer to [LICENSE](LICENSE) for more details.\n\n---\n## Fish Agent\nWe are very excited to announce that we have made our self-research agent demo open source, you can now try our agent demo online at [demo](https://fish.audio/demo/live) for instant English chat and English and Chinese chat locally by following the [docs](https://speech.fish.audio/start_agent/).\n\nYou should mention that the content is released under a **CC BY-NC-SA 4.0 licence**. And the demo is an early alpha test version, the inference speed needs to be optimised, and there are a lot of bugs waiting to be fixed. If you've found a bug or want to fix it, we'd be very happy to receive an issue or a pull request.\n\n## Features\n### Fish Speech\n\n1. **Zero-shot & Few-shot TTS:** Input a 10 to 30-second vocal sample to generate high-quality TTS output. **For detailed guidelines, see [Voice Cloning Best Practices](https://docs.fish.audio/text-to-speech/voice-clone-best-practices).**\n\n2. **Multilingual & Cross-lingual Support:** Simply copy and paste multilingual text into the input box—no need to worry about the language. Currently supports English, Japanese, Korean, Chinese, French, German, Arabic, and Spanish.\n\n3. **No Phoneme Dependency:** The model has strong generalization capabilities and does not rely on phonemes for TTS. It can handle text in any language script.\n\n4. **Highly Accurate:** Achieves a low CER (Character Error Rate) and WER (Word Error Rate) of around 2% for 5-minute English texts.\n\n5. **Fast:** With fish-tech acceleration, the real-time factor is approximately 1:5 on an Nvidia RTX 4060 laptop and 1:15 on an Nvidia RTX 4090.\n\n6. **WebUI Inference:** Features an easy-to-use, Gradio-based web UI compatible with Chrome, Firefox, Edge, and other browsers.\n\n7. **GUI Inference:** Offers a PyQt6 graphical interface that works seamlessly with the API server. Supports Linux, Windows, and macOS. [See GUI](https://github.com/AnyaCoder/fish-speech-gui).\n\n8. **Deploy-Friendly:** Easily set up an inference server with native support for Linux, Windows and MacOS, minimizing speed loss.\n\n### Fish Agent\n1. **Completely End to End:** Automatically integrates ASR and TTS parts, no need to plug-in other models, i.e., true end-to-end, not three-stage (ASR+LLM+TTS).\n\n2. **Timbre Control:** Can use reference audio to control the speech timbre.\n\n3. **Emotional:** The model can generate speech with strong emotion.\n\n## Disclaimer\n\nWe do not hold any responsibility for any illegal usage of the codebase. Please refer to your local laws about DMCA and other related laws.\n\n## Online Demo\n\n[Fish Audio](https://fish.audio)\n\n[Fish Agent](https://fish.audio/demo/live)\n\n## Quick Start for Local Inference\n\n[inference.ipynb](/inference.ipynb)\n\n## Videos\n\n#### V1.4 Demo Video: [Youtube](https://www.youtube.com/watch?v=Ghc8cJdQyKQ)\n\n## Documents\n\n- [English](https://speech.fish.audio/)\n- [中文](https://speech.fish.audio/zh/)\n- [日本語](https://speech.fish.audio/ja/)\n- [Portuguese (Brazil)](https://speech.fish.audio/pt/)\n\n## Samples (2024/10/02 V1.4)\n\n- [English](https://speech.fish.audio/samples/)\n- [中文](https://speech.fish.audio/zh/samples/)\n- [日本語](https://speech.fish.audio/ja/samples/)\n- [Portuguese (Brazil)](https://speech.fish.audio/pt/samples/)\n\n## Credits\n\n- [VITS2 (daniilrobnikov)](https://github.com/daniilrobnikov/vits2)\n- [Bert-VITS2](https://github.com/fishaudio/Bert-VITS2)\n- [GPT VITS](https://github.com/innnky/gpt-vits)\n- [MQTTS](https://github.com/b04901014/MQTTS)\n- [GPT Fast](https://github.com/pytorch-labs/gpt-fast)\n- [GPT-SoVITS](https://github.com/RVC-Boss/GPT-SoVITS)\n\n## Tech Report (V1.4)\n```bibtex\n@misc{fish-speech-v1.4,\n      title={Fish-Speech: Leveraging Large Language Models for Advanced Multilingual Text-to-Speech Synthesis},\n      author={Shijia Liao and Yuxuan Wang and Tianyu Li and Yifan Cheng and Ruoyi Zhang and Rongzhi Zhou and Yijin Xing},\n      year={2024},\n      eprint={2411.01156},\n      archivePrefix={arXiv},\n      primaryClass={cs.SD},\n      url={https://arxiv.org/abs/2411.01156},\n}\n```\n\n## Sponsor\n\n<div>\n  <a href=\"https://6block.com/\">\n    <img src=\"https://avatars.githubusercontent.com/u/60573493\" width=\"100\" height=\"100\" alt=\"6Block Avatar\"/>\n  </a>\n  <br>\n  <a href=\"https://6block.com/\">Data Processing sponsor by 6Block</a>\n</div>\n<div>\n  <a href=\"https://www.lepton.ai/\">\n    <img src=\"https://www.lepton.ai/favicons/apple-touch-icon.png\" width=\"100\" height=\"100\" alt=\"Lepton Avatar\"/>\n  </a>\n  <br>\n  <a href=\"https://www.lepton.ai/\">Fish Audio is served on Lepton.AI</a>\n</div>\n"
        },
        {
          "name": "docker-compose.dev.yml",
          "type": "blob",
          "size": 0.34375,
          "content": "version: '3.8'\n\nservices:\n  fish-speech:\n    build:\n      context: .\n      dockerfile: dockerfile.dev\n    container_name: fish-speech\n    volumes:\n      - ./:/exp\n    deploy:\n      resources:\n        reservations:\n          devices:\n            - driver: nvidia\n              count: all\n              capabilities: [gpu]\n    command: tail -f /dev/null\n"
        },
        {
          "name": "dockerfile",
          "type": "blob",
          "size": 1.2861328125,
          "content": "FROM python:3.12-slim-bookworm AS stage-1\nARG TARGETARCH\n\nARG HUGGINGFACE_MODEL=fish-speech-1.5\nARG HF_ENDPOINT=https://huggingface.co\n\nWORKDIR /opt/fish-speech\n\nRUN set -ex \\\n    && pip install huggingface_hub \\\n    && HF_ENDPOINT=${HF_ENDPOINT} huggingface-cli download --resume-download fishaudio/${HUGGINGFACE_MODEL} --local-dir checkpoints/${HUGGINGFACE_MODEL}\n\nFROM python:3.12-slim-bookworm\nARG TARGETARCH\n\nARG DEPENDENCIES=\"  \\\n    ca-certificates \\\n    libsox-dev \\\n    build-essential \\\n    cmake \\\n    libasound-dev \\\n    portaudio19-dev \\\n    libportaudio2 \\\n    libportaudiocpp0 \\\n    ffmpeg\"\n\nRUN --mount=type=cache,target=/var/cache/apt,sharing=locked \\\n    --mount=type=cache,target=/var/lib/apt,sharing=locked \\\n    set -ex \\\n    && rm -f /etc/apt/apt.conf.d/docker-clean \\\n    && echo 'Binary::apt::APT::Keep-Downloaded-Packages \"true\";' >/etc/apt/apt.conf.d/keep-cache \\\n    && apt-get update \\\n    && apt-get -y install --no-install-recommends ${DEPENDENCIES} \\\n    && echo \"no\" | dpkg-reconfigure dash\n\nWORKDIR /opt/fish-speech\n\nCOPY . .\n\nRUN --mount=type=cache,target=/root/.cache,sharing=locked \\\n    set -ex \\\n    && pip install -e .[stable]\n\nCOPY --from=stage-1 /opt/fish-speech/checkpoints /opt/fish-speech/checkpoints\n\nENV GRADIO_SERVER_NAME=\"0.0.0.0\"\n\nEXPOSE 7860\n\nCMD [\"./entrypoint.sh\"]\n"
        },
        {
          "name": "dockerfile.dev",
          "type": "blob",
          "size": 1.048828125,
          "content": "ARG VERSION=dev\nARG BASE_IMAGE=ghcr.io/fishaudio/fish-speech:${VERSION}\n\nFROM ${BASE_IMAGE}\n\nARG TOOLS=\"               \\\n        git               \\\n        curl              \\\n        build-essential   \\\n        ffmpeg            \\\n        libsm6            \\\n        libxext6          \\\n        libjpeg-dev       \\\n        zlib1g-dev        \\\n        aria2             \\\n        zsh               \\\n        openssh-server    \\\n        sudo              \\\n        protobuf-compiler \\\n        libasound-dev     \\\n        portaudio19-dev   \\\n        libportaudio2     \\\n        libportaudiocpp0  \\\n        cmake\"\n\nRUN --mount=type=cache,target=/var/cache/apt,sharing=locked \\\n    --mount=type=cache,target=/var/lib/apt,sharing=locked \\\n    set -ex \\\n    && apt-get update \\\n    && apt-get -y install --no-install-recommends ${TOOLS}\n\n# Install oh-my-zsh so your terminal looks nice\nRUN sh -c \"$(curl https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" \"\" --unattended\n\n# Set zsh as default shell\nRUN chsh -s /usr/bin/zsh\nENV SHELL=/usr/bin/zsh\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "entrypoint.sh",
          "type": "blob",
          "size": 0.1669921875,
          "content": "#!/bin/bash\n\nCUDA_ENABLED=${CUDA_ENABLED:-true}\nDEVICE=\"\"\n\nif [ \"${CUDA_ENABLED}\" != \"true\" ]; then\n    DEVICE=\"--device cpu\"\nfi\n\nexec python tools/run_webui.py ${DEVICE}\n"
        },
        {
          "name": "fish_speech",
          "type": "tree",
          "content": null
        },
        {
          "name": "inference.ipynb",
          "type": "blob",
          "size": 5.0087890625,
          "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Fish Speech\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### For Windows User / win用户\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"vscode\": {\n     \"languageId\": \"bat\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"!chcp 65001\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### For Linux User / Linux 用户\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import locale\\n\",\n    \"locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Prepare Model\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# For Chinese users, you probably want to use mirror to accelerate downloading\\n\",\n    \"# !set HF_ENDPOINT=https://hf-mirror.com\\n\",\n    \"# !export HF_ENDPOINT=https://hf-mirror.com \\n\",\n    \"\\n\",\n    \"!huggingface-cli download fishaudio/fish-speech-1.5 --local-dir checkpoints/fish-speech-1.5/\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## WebUI Inference\\n\",\n    \"\\n\",\n    \"> You can use --compile to fuse CUDA kernels for faster inference (10x).\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"vscode\": {\n     \"languageId\": \"shellscript\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"!python tools/run_webui.py \\\\\\n\",\n    \"    --llama-checkpoint-path checkpoints/fish-speech-1.5 \\\\\\n\",\n    \"    --decoder-checkpoint-path checkpoints/fish-speech-1.5/firefly-gan-vq-fsq-8x1024-21hz-generator.pth \\\\\\n\",\n    \"    # --compile\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Break-down CLI Inference\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### 1. Encode reference audio: / 从语音生成 prompt: \\n\",\n    \"\\n\",\n    \"You should get a `fake.npy` file.\\n\",\n    \"\\n\",\n    \"你应该能得到一个 `fake.npy` 文件.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"vscode\": {\n     \"languageId\": \"shellscript\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"## Enter the path to the audio file here\\n\",\n    \"src_audio = r\\\"D:\\\\PythonProject\\\\vo_hutao_draw_appear.wav\\\"\\n\",\n    \"\\n\",\n    \"!python fish_speech/models/vqgan/inference.py \\\\\\n\",\n    \"    -i {src_audio} \\\\\\n\",\n    \"    --checkpoint-path \\\"checkpoints/fish-speech-1.5/firefly-gan-vq-fsq-8x1024-21hz-generator.pth\\\"\\n\",\n    \"\\n\",\n    \"from IPython.display import Audio, display\\n\",\n    \"audio = Audio(filename=\\\"fake.wav\\\")\\n\",\n    \"display(audio)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### 2. Generate semantic tokens from text: / 从文本生成语义 token:\\n\",\n    \"\\n\",\n    \"> This command will create a codes_N file in the working directory, where N is an integer starting from 0.\\n\",\n    \"\\n\",\n    \"> You may want to use `--compile` to fuse CUDA kernels for faster inference (~30 tokens/second -> ~300 tokens/second).\\n\",\n    \"\\n\",\n    \"> 该命令会在工作目录下创建 codes_N 文件, 其中 N 是从 0 开始的整数.\\n\",\n    \"\\n\",\n    \"> 您可以使用 `--compile` 来融合 cuda 内核以实现更快的推理 (~30 tokens/秒 -> ~300 tokens/秒)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"vscode\": {\n     \"languageId\": \"shellscript\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"!python fish_speech/models/text2semantic/inference.py \\\\\\n\",\n    \"    --text \\\"hello world\\\" \\\\\\n\",\n    \"    --prompt-text \\\"The text corresponding to reference audio\\\" \\\\\\n\",\n    \"    --prompt-tokens \\\"fake.npy\\\" \\\\\\n\",\n    \"    --checkpoint-path \\\"checkpoints/fish-speech-1.5\\\" \\\\\\n\",\n    \"    --num-samples 2\\n\",\n    \"    # --compile\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### 3. Generate speech from semantic tokens: / 从语义 token 生成人声:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"vscode\": {\n     \"languageId\": \"shellscript\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"!python fish_speech/models/vqgan/inference.py \\\\\\n\",\n    \"    -i \\\"codes_0.npy\\\" \\\\\\n\",\n    \"    --checkpoint-path \\\"checkpoints/fish-speech-1.5/firefly-gan-vq-fsq-8x1024-21hz-generator.pth\\\"\\n\",\n    \"\\n\",\n    \"from IPython.display import Audio, display\\n\",\n    \"audio = Audio(filename=\\\"fake.wav\\\")\\n\",\n    \"display(audio)\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.10.14\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"
        },
        {
          "name": "install_env.bat",
          "type": "blob",
          "size": 4.658203125,
          "content": "@echo off\nchcp 65001\n\nset USE_MIRROR=true\necho \"USE_MIRROR: %USE_MIRROR%\"\nsetlocal enabledelayedexpansion\n\ncd /D \"%~dp0\"\n\nset PATH=\"%PATH%\";%SystemRoot%\\system32\n\necho %PATH%\n\n\necho \"%CD%\"| findstr /R /C:\"[!#\\$%&()\\*+,;<=>?@\\[\\]\\^`{|}~\\u4E00-\\u9FFF ] \" >nul && (\n    echo.\n    echo There are special characters in the current path, please make the path of fish-speech free of special characters before running. && (\n        goto end\n    )\n)\n\n\nset TMP=%CD%\\fishenv\nset TEMP=%CD%\\fishenv\n\n(call conda deactivate && call conda deactivate && call conda deactivate) 2>nul\n\nset INSTALL_DIR=%cd%\\fishenv\nset CONDA_ROOT_PREFIX=%cd%\\fishenv\\conda\nset INSTALL_ENV_DIR=%cd%\\fishenv\\env\nset PIP_CMD=%cd%\\fishenv\\env\\python -m pip\nset PYTHON_CMD=%cd%\\fishenv\\env\\python\nset API_FLAG_PATH=%~dp0API_FLAGS.txt\nset MINICONDA_DOWNLOAD_URL=https://repo.anaconda.com/miniconda/Miniconda3-py310_23.3.1-0-Windows-x86_64.exe\nif \"!USE_MIRROR!\" == \"true\" (\n    set MINICONDA_DOWNLOAD_URL=https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py310_23.3.1-0-Windows-x86_64.exe\n)\nset MINICONDA_CHECKSUM=307194e1f12bbeb52b083634e89cc67db4f7980bd542254b43d3309eaf7cb358\nset conda_exists=F\n\ncall \"%CONDA_ROOT_PREFIX%\\_conda.exe\" --version >nul 2>&1\nif \"%ERRORLEVEL%\" EQU \"0\" set conda_exists=T\n\nif \"%conda_exists%\" == \"F\" (\n    echo.\n    echo Downloading Miniconda...\n    mkdir \"%INSTALL_DIR%\" 2>nul\n    call curl -Lk \"%MINICONDA_DOWNLOAD_URL%\" > \"%INSTALL_DIR%\\miniconda_installer.exe\"\n    if errorlevel 1 (\n        echo.\n        echo Failed to download miniconda.\n        goto end\n    )\n    for /f %%a in ('\n        certutil -hashfile \"%INSTALL_DIR%\\miniconda_installer.exe\" sha256\n        ^| find /i /v \" \"\n        ^| find /i \"%MINICONDA_CHECKSUM%\"\n    ') do (\n        set \"hash=%%a\"\n    )\n    if not defined hash (\n        echo.\n        echo Miniconda hash mismatched!\n        del \"%INSTALL_DIR%\\miniconda_installer.exe\"\n        goto end\n    ) else (\n        echo.\n        echo Miniconda hash matched successfully.\n    )\n    echo Downloaded \"%CONDA_ROOT_PREFIX%\"\n    start /wait \"\" \"%INSTALL_DIR%\\miniconda_installer.exe\" /InstallationType=JustMe /NoShortcuts=1 /AddToPath=0 /RegisterPython=0 /NoRegistry=1 /S /D=%CONDA_ROOT_PREFIX%\n\n    call \"%CONDA_ROOT_PREFIX%\\_conda.exe\" --version\n    if errorlevel 1 (\n        echo.\n        echo Cannot install Miniconda.\n        goto end\n    ) else (\n        echo.\n        echo Miniconda Install success.\n    )\n\n    del \"%INSTALL_DIR%\\miniconda_installer.exe\"\n)\n\n\nif not exist \"%INSTALL_ENV_DIR%\" (\n    echo.\n    echo Creating Conda Environment...\n    if \"!USE_MIRROR!\" == \"true\" (\n        call \"%CONDA_ROOT_PREFIX%\\_conda.exe\" create --no-shortcuts -y -k --prefix \"%INSTALL_ENV_DIR%\" -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ python=3.10\n    ) else (\n        call \"%CONDA_ROOT_PREFIX%\\_conda.exe\" create --no-shortcuts -y -k --prefix \"%INSTALL_ENV_DIR%\" python=3.10\n    )\n\n    if errorlevel 1 (\n        echo.\n        echo Failed to Create Environment.\n        goto end\n    )\n)\n\nif not exist \"%INSTALL_ENV_DIR%\\python.exe\" (\n    echo.\n    echo Conda Env does not exist.\n    goto end\n)\n\nset PYTHONNOUSERSITE=1\nset PYTHONPATH=\nset PYTHONHOME=\nset \"CUDA_PATH=%INSTALL_ENV_DIR%\"\nset \"CUDA_HOME=%CUDA_PATH%\"\n\ncall \"%CONDA_ROOT_PREFIX%\\condabin\\conda.bat\" activate \"%INSTALL_ENV_DIR%\"\n\nif errorlevel 1 (\n    echo.\n    echo Failed to activate Env.\n    goto end\n) else (\n    echo.\n    echo successfully create env.\n)\n\nset \"HF_ENDPOINT=https://huggingface.co\"\nset \"no_proxy=\"\nif \"%USE_MIRROR%\"==\"true\" (\n    set \"HF_ENDPOINT=https://hf-mirror.com\"\n    set \"no_proxy=localhost,127.0.0.1,0.0.0.0\"\n)\n\necho \"HF_ENDPOINT: !HF_ENDPOINT!\"\necho \"NO_PROXY: !no_proxy!\"\n\n%PIP_CMD% install torch==2.4.1 torchvision==0.19.1 torchaudio==2.4.1 --index-url https://download.pytorch.org/whl/cu121\n\n%PIP_CMD% install -e . --upgrade-strategy only-if-needed\n\ncall :download_and_install \"triton_windows-0.1.0-py3-none-any.whl\" ^\n        \"%HF_ENDPOINT%/datasets/SpicyqSama007/windows_compile/resolve/main/triton_windows-0.1.0-py3-none-any.whl?download=true\" ^\n        \"2cc998638180f37cf5025ab65e48c7f629aa5a369176cfa32177d2bd9aa26a0a\"\n\n\nendlocal\necho \"Environment Check: Success.\"\n:end\npause\n\ngoto :EOF\n\n\n:download_and_install\nsetlocal\n\nset \"WHEEL_FILE=%1\"\nset \"URL=%2\"\nset \"CHKSUM=%3\"\n\n:DOWNLOAD\nif not exist \"%WHEEL_FILE%\" (\n    call curl -Lk \"%URL%\" --output \"%WHEEL_FILE%\"\n)\n\nfor /f \"delims=\" %%I in (\"certutil -hashfile %WHEEL_FILE% SHA256 ^| find /i %CHKSUM%\") do (\n    set \"FILE_VALID=true\"\n)\n\nif not defined FILE_VALID (\n    echo File checksum does not match, re-downloading...\n    del \"%WHEEL_FILE%\"\n    goto DOWNLOAD\n)\n\necho \"OK for %WHEEL_FILE%\"\n%PIP_CMD% install \"%WHEEL_FILE%\" --no-warn-script-location\ndel \"%WHEEL_FILE%\"\n\nendlocal\ngoto :EOF\n"
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 3.6640625,
          "content": "site_name: Fish Speech\nsite_description: Targeting SOTA TTS solutions.\nsite_url: https://speech.fish.audio\n\n# Repository\nrepo_name: fishaudio/fish-speech\nrepo_url: https://github.com/fishaudio/fish-speech\nedit_uri: blob/main/docs\n\n# Copyright\ncopyright: Copyright &copy; 2023-2024 by Fish Audio\n\ntheme:\n  name: material\n  favicon: assets/figs/logo-circle.png\n  language: en\n  features:\n    - content.action.edit\n    - content.action.view\n    - navigation.tracking\n    - navigation.footer\n    # - navigation.tabs\n    - search\n    - search.suggest\n    - search.highlight\n    - search.share\n    - content.code.copy\n  icon:\n    logo: fontawesome/solid/fish\n\n  palette:\n    # Palette toggle for automatic mode\n    - media: \"(prefers-color-scheme)\"\n      toggle:\n        icon: material/brightness-auto\n        name: Switch to light mode\n\n    # Palette toggle for light mode\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default\n      toggle:\n        icon: material/brightness-7\n        name: Switch to dark mode\n      primary: black\n      font:\n        code: Roboto Mono\n\n    # Palette toggle for dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      toggle:\n        icon: material/brightness-4\n        name: Switch to light mode\n      primary: black\n      font:\n        code: Roboto Mono\n\nnav:\n  - Introduction: index.md\n  - Finetune: finetune.md\n  - Inference: inference.md\n  - Start Agent: start_agent.md\n  - Samples: samples.md\n\n# Plugins\nplugins:\n  - search:\n      separator: '[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])'\n      lang:\n        - en\n        - zh\n        - ja\n        - pt\n        - ko\n  - i18n:\n      docs_structure: folder\n      languages:\n        - locale: en\n          name: English\n          default: true\n          build: true\n        - locale: zh\n          name: 简体中文\n          build: true\n          nav:\n            - 介绍: zh/index.md\n            - 微调: zh/finetune.md\n            - 推理: zh/inference.md\n            - 启动Agent: zh/start_agent.md\n            - 例子: zh/samples.md\n        - locale: ja\n          name: 日本語\n          build: true\n          nav:\n            - Fish Speech の紹介: ja/index.md\n            - 微調整: ja/finetune.md\n            - 推論: ja/inference.md\n            - スタートエージェント: ja/start_agent.md\n            - サンプル: ja/samples.md\n        - locale: pt\n          name: Português (Brasil)\n          build: true\n          nav:\n            - Introdução: pt/index.md\n            - Ajuste Fino: pt/finetune.md\n            - Inferência: pt/inference.md\n            - Agente inicial: pt/start_agent.md\n            - Amostras: pt/samples.md\n        - locale: ko\n          name: 한국어\n          build: true\n          nav:\n            - 소개: ko/index.md\n            - 파인튜닝: ko/finetune.md\n            - 추론: ko/inference.md\n            - 샘플: ko/samples.md\n\nmarkdown_extensions:\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.superfences\n  - admonition\n  - pymdownx.details\n  - pymdownx.superfences\n  - attr_list\n  - md_in_html\n  - pymdownx.superfences\n\nextra_css:\n  - stylesheets/extra.css\n\nextra:\n  social:\n    - icon: fontawesome/brands/discord\n      link: https://discord.gg/Es5qTB9BcN\n    - icon: fontawesome/brands/docker\n      link: https://hub.docker.com/r/fishaudio/fish-speech\n    - icon: fontawesome/brands/qq\n      link: http://qm.qq.com/cgi-bin/qm/qr?_wv=1027&k=jCKlUP7QgSm9kh95UlBoYv6s1I-Apl1M&authKey=xI5ttVAp3do68IpEYEalwXSYZFdfxZSkah%2BctF5FIMyN2NqAa003vFtLqJyAVRfF&noverify=0&group_code=593946093\n  homepage: https://speech.fish.audio\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.306640625,
          "content": "[project]\nname = \"fish-speech\"\nversion = \"0.1.0\"\nauthors = [\n    {name = \"Lengyue\", email = \"lengyue@lengyue.me\"},\n]\ndescription = \"Fish Speech\"\nreadme = \"README.md\"\nrequires-python = \">=3.10\"\nkeywords = [\"TTS\", \"Speech\"]\nlicense = {text = \"CC BY-NC-SA 4.0\"}\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n]\ndependencies = [\n    \"numpy<=1.26.4\",\n    \"transformers>=4.45.2\",\n    \"datasets==2.18.0\",\n    \"lightning>=2.1.0\",\n    \"hydra-core>=1.3.2\",\n    \"tensorboard>=2.14.1\",\n    \"natsort>=8.4.0\",\n    \"einops>=0.7.0\",\n    \"librosa>=0.10.1\",\n    \"rich>=13.5.3\",\n    \"gradio>5.0.0\",\n    \"wandb>=0.15.11\",\n    \"grpcio>=1.58.0\",\n    \"kui>=1.6.0\",\n    \"uvicorn>=0.30.0\",\n    \"loguru>=0.6.0\",\n    \"loralib>=0.1.2\",\n    \"pyrootutils>=1.0.4\",\n    \"vector_quantize_pytorch==1.14.24\",\n    \"resampy>=0.4.3\",\n    \"einx[torch]==0.2.2\",\n    \"zstandard>=0.22.0\",\n    \"pydub\",\n    \"pyaudio\",\n    \"faster_whisper\",\n    \"modelscope==1.17.1\",\n    \"funasr==1.1.5\",\n    \"opencc-python-reimplemented==0.1.7\",\n    \"silero-vad\",\n    \"ormsgpack\",\n    \"tiktoken>=0.8.0\",\n    \"pydantic==2.9.2\",\n    \"cachetools\",\n]\n\n[project.optional-dependencies]\nstable = [\n    \"torch<=2.4.1\",\n    \"torchaudio\",\n]\n\n[build-system]\nrequires = [\"setuptools\", \"setuptools-scm\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.setuptools]\npackages = [\"fish_speech\", \"tools\"]\n"
        },
        {
          "name": "pyrightconfig.json",
          "type": "blob",
          "size": 0.0615234375,
          "content": "{\n    \"exclude\": [\n        \"data\",\n        \"filelists\"\n    ]\n}\n"
        },
        {
          "name": "run_cmd.bat",
          "type": "blob",
          "size": 0.916015625,
          "content": "@echo off\nchcp 65001\n\nset no_proxy=\"127.0.0.1, 0.0.0.0, localhost\"\nsetlocal enabledelayedexpansion\n\ncd /D \"%~dp0\"\n\nset PATH=\"%PATH%\";%SystemRoot%\\system32\n\n\necho \"%CD%\"| findstr /R /C:\"[!#\\$%&()\\*+,;<=>?@\\[\\]\\^`{|}~\\u4E00-\\u9FFF ] \" >nul && (\n    echo.\n    echo There are special characters in the current path, please make the path of fish-speech free of special characters before running. && (\n        goto end\n    )\n)\n\n\nset TMP=%CD%\\fishenv\nset TEMP=%CD%\\fishenv\n\n\n(call conda deactivate && call conda deactivate && call conda deactivate) 2>nul\n\n\nset CONDA_ROOT_PREFIX=%cd%\\fishenv\\conda\nset INSTALL_ENV_DIR=%cd%\\fishenv\\env\n\n\nset PYTHONNOUSERSITE=1\nset PYTHONPATH=%~dp0\nset PYTHONHOME=\n\n\ncall \"%CONDA_ROOT_PREFIX%\\condabin\\conda.bat\" activate \"%INSTALL_ENV_DIR%\"\n\nif errorlevel 1 (\n    echo.\n    echo Environment activation failed.\n    goto end\n) else (\n    echo.\n    echo Environment activation succeeded.\n)\n\ncmd /k \"%*\"\n\n:end\npause\n"
        },
        {
          "name": "start.bat",
          "type": "blob",
          "size": 1.9921875,
          "content": "@echo off\nchcp 65001\n\nset USE_MIRROR=true\nset PYTHONPATH=%~dp0\nset PYTHON_CMD=python\nif exist \"fishenv\" (\n    set PYTHON_CMD=%cd%\\fishenv\\env\\python\n)\n\nset API_FLAG_PATH=%~dp0API_FLAGS.txt\nset KMP_DUPLICATE_LIB_OK=TRUE\n\nsetlocal enabledelayedexpansion\n\nset \"HF_ENDPOINT=https://huggingface.co\"\nset \"no_proxy=\"\nif \"%USE_MIRROR%\" == \"true\" (\n    set \"HF_ENDPOINT=https://hf-mirror.com\"\n    set \"no_proxy=localhost, 127.0.0.1, 0.0.0.0\"\n)\necho \"HF_ENDPOINT: !HF_ENDPOINT!\"\necho \"NO_PROXY: !no_proxy!\"\n\necho \"%CD%\"| findstr /R /C:\"[!#\\$%&()\\*+,;<=>?@\\[\\]\\^`{|}~\\u4E00-\\u9FFF ] \" >nul && (\n    echo.\n    echo There are special characters in the current path, please make the path of fish-speech free of special characters before running. && (\n        goto end\n    )\n)\n\n%PYTHON_CMD% .\\tools\\download_models.py\n\nset \"API_FLAGS=\"\nset \"flags=\"\n\nif exist \"%API_FLAG_PATH%\" (\n    for /f \"usebackq tokens=*\" %%a in (\"%API_FLAG_PATH%\") do (\n        set \"line=%%a\"\n        if not \"!line:~0,1!\"==\"#\" (\n            set \"line=!line: =<SPACE>!\"\n            set \"line=!line:\\=!\"\n            set \"line=!line:<SPACE>= !\"\n            if not \"!line!\"==\"\" (\n                set \"API_FLAGS=!API_FLAGS!!line! \"\n            )\n        )\n    )\n)\n\n\nif not \"!API_FLAGS!\"==\"\" set \"API_FLAGS=!API_FLAGS:~0,-1!\"\n\nset \"flags=\"\n\necho !API_FLAGS! | findstr /C:\"--api\" >nul 2>&1\nif !errorlevel! equ 0 (\n    echo.\n    echo Start HTTP API...\n    set \"mode=api\"\n    goto process_flags\n)\n\necho !API_FLAGS! | findstr /C:\"--infer\" >nul 2>&1\nif !errorlevel! equ 0 (\n    echo.\n    echo Start WebUI Inference...\n    set \"mode=infer\"\n    goto process_flags\n)\n\n\n:process_flags\nfor %%p in (!API_FLAGS!) do (\n    if not \"%%p\"==\"--!mode!\" (\n        set \"flags=!flags! %%p\"\n    )\n)\n\nif not \"!flags!\"==\"\" set \"flags=!flags:~1!\"\n\necho Debug: flags = !flags!\n\nif \"!mode!\"==\"api\" (\n    %PYTHON_CMD% -m tools.api_server !flags!\n) else if \"!mode!\"==\"infer\" (\n    %PYTHON_CMD% -m tools.webui !flags!\n)\n\necho.\necho Next launch the page...\n%PYTHON_CMD% fish_speech\\webui\\manage.py\n\n\n:end\nendlocal\npause\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}