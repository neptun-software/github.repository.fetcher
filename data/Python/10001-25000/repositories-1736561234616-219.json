{
  "metadata": {
    "timestamp": 1736561234616,
    "page": 219,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/yapf",
      "stars": 13817,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.03125,
          "content": "[report]\nomit =\n  */__main__.py\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2587890625,
          "content": "# EditorConfig is awesome: http://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\nend_of_line = lf\ninsert_final_newline = true\n\n# 2 space indentation\n[*.py]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.3984375,
          "content": "[flake8]\nignore =\n    # 'toml' imported but unused\n    F401,\n    # closing bracket does not match visual indentation\n    E124,\n    # continuation line over-indented for hanging indent\n    E126,\n    # visually indented line with same indent as next logical line,\n    E129,\n    # line break before binary operator\n    W503,\n    # line break after binary operator\n    W504\n\nindent-size = 2\nmax-line-length = 80\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0224609375,
          "content": ".python-version eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.2568359375,
          "content": "#==============================================================================#\n# This file specifies intentionally untracked files that git should ignore.\n# See: http://www.kernel.org/pub/software/scm/git/docs/gitignore.html\n#\n# This file is intentionally different from the output of `git svn show-ignore`,\n# as most of those are useless.\n#==============================================================================#\n\n#==============================================================================#\n# File extensions to be ignored anywhere in the tree.\n#==============================================================================#\n# Temp files created by most text editors.\n*~\n# Merge files created by git.\n*.orig\n# Compiled python.\n*.pyc\n*.pickle\n# vim swap files\n.*.sw?\n.sw?\n# OS X specific files.\n.DS_store\n\n#==============================================================================#\n# Files to ignore\n#==============================================================================#\n/.coverage\n\n# Directories to ignore (do not add trailing '/'s, they skip symlinks).\n#==============================================================================#\n/build\n/dist\n/.tox\n/yapf.egg-info\n\n# IDEs\n/.idea\n/.vscode/settings.json\n\n# Virtual Environment\n/.venv*/\n\n# Worktrees\n/.wt\n"
        },
        {
          "name": ".isort.cfg",
          "type": "blob",
          "size": 0.1591796875,
          "content": "[settings]\nforce_single_line=true\nknown_third_party=yapf_third_party\nknown_yapftests=yapftests\n\nsections=FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER,YAPFTESTS\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.8916015625,
          "content": "# File introduces automated checks triggered on git events\n# to enable run `pip install pre-commit && pre-commit install`\n\nrepos:\n  - repo: https://github.com/pycqa/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n        name: isort (python)\n  - repo: local\n    hooks:\n      - id: yapf\n        name: yapf\n        language: python\n        entry: yapf\n        args: [-i]\n        types: [python]\n  - repo: https://github.com/pycqa/flake8\n    rev: 7.1.1\n    hooks:\n      - id: flake8\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: trailing-whitespace\n      - id: check-docstring-first\n      - id: check-added-large-files\n      - id: check-yaml\n      - id: debug-statements\n      - id: check-merge-conflict\n      - id: double-quote-string-fixer\n      - id: end-of-file-fixer\n  - repo: meta\n    hooks:\n      - id: check-hooks-apply\n      - id: check-useless-excludes\n"
        },
        {
          "name": ".pre-commit-hooks.yaml",
          "type": "blob",
          "size": 0.587890625,
          "content": "# File configures YAPF to be used as a git hook with https://github.com/pre-commit/pre-commit\n\n- id: yapf\n  name: yapf\n  description: \"A formatter for Python files.\"\n  entry: yapf\n  args: [-i] #inplace\n  language: python\n  types: [python]\n\n- id: yapf-diff\n  name: yapf-diff\n  description: \"A formatter for Python files. (formats only changes included in commit)\"\n  always_run: true\n  language: python\n  pass_filenames: false\n  stages: [pre-commit]\n  entry: |\n    bash -c \"git diff -U0 --no-color --relative HEAD \\\n                  | yapf-diff \\\n                  | tee >(git apply --allow-empty -p0)\"\n"
        },
        {
          "name": ".python-version",
          "type": "blob",
          "size": 0.0341796875,
          "content": "3.7.9\n3.8.10\n3.9.13\n3.10.11\n3.11.5\n"
        },
        {
          "name": ".style.yapf",
          "type": "blob",
          "size": 0.029296875,
          "content": "[style]\nbased_on_style = yapf\n"
        },
        {
          "name": ".vimrc",
          "type": "blob",
          "size": 0.1630859375,
          "content": "\" Force indentation styles for this directory\nautocmd FileType python set shiftwidth=2\nautocmd FileType python set tabstop=2\nautocmd FileType python set softtabstop=2\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.2998046875,
          "content": "# This is the official list of YAPF authors for copyright purposes.\n# This file is distinct from the CONTRIBUTORS files.\n# See the latter for an explanation.\n\n# Names should be added to this file as:\n# Name or Organization <email address>\n# The email address is not required for organizations.\n\nGoogle Inc.\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 38.3701171875,
          "content": "# Change Log\n# All notable changes to this project will be documented in this file.\n# This project adheres to [Semantic Versioning](http://semver.org/).\n\n## (0.41.0) UNRELEASED\n### Added\n- New `DISABLE_SPLIT_LIST_WITH_COMMENT` flag.\n `DISABLE_SPLIT_LIST_WITH_COMMENT` is a new knob that changes the\n  behavior of splitting a list when a comment is present inside the list.\n\n  Before, we split a list containing a comment just like we split a list\n  containing a trailing comma: Each element goes on its own line (unless\n  `DISABLE_ENDING_COMMA_HEURISTIC` is true).\n\n  This new flag allows you to control the behavior of a list with a comment\n  *separately* from the behavior when the list contains a trailing comma.\n\n  This mirrors the behavior of clang-format, and is useful for e.g. forming\n  \"logical groups\" of elements in a list.\n\n  Without this flag:\n\n  ```\n  [\n    a,\n    b,  #\n    c\n  ]\n  ```\n\n  With this flag:\n\n  ```\n  [\n    a, b,  #\n    c\n  ]\n  ```\n\n  Before we had one flag that controlled two behaviors.\n\n    - `DISABLE_ENDING_COMMA_HEURISTIC=false` (default):\n      - Split a list that has a trailing comma.\n      - Split a list that contains a comment.\n    - `DISABLE_ENDING_COMMA_HEURISTIC=true`:\n      - Don't split on trailing comma.\n      - Don't split on comment.\n\n  Now we have two flags.\n\n    - `DISABLE_ENDING_COMMA_HEURISTIC=false` and `DISABLE_SPLIT_LIST_WITH_COMMENT=false` (default):\n      - Split a list that has a trailing comma.\n      - Split a list that contains a comment.\n      Behavior is unchanged from the default before.\n    - `DISABLE_ENDING_COMMA_HEURISTIC=true` and `DISABLE_SPLIT_LIST_WITH_COMMENT=false` :\n      - Don't split on trailing comma.\n      - Do split on comment.  **This is a change in behavior from before.**\n    - `DISABLE_ENDING_COMMA_HEURISTIC=false` and `DISABLE_SPLIT_LIST_WITH_COMMENT=true` :\n      - Split on trailing comma.\n      - Don't split on comment.\n    - `DISABLE_ENDING_COMMA_HEURISTIC=true` and `DISABLE_SPLIT_LIST_WITH_COMMENT=true` :\n      - Don't split on trailing comma.\n      - Don't split on comment.\n      **You used to get this behavior just by setting one flag, but now you have to set both.**\n\n  Note the behavioral change above; if you set\n  `DISABLE_ENDING_COMMA_HEURISTIC=true` and want to keep the old behavior, you\n  now also need to set `DISABLE_SPLIT_LIST_WITH_COMMENT=true`.\n### Changes\n- Remove dependency on importlib-metadata\n- Remove dependency on tomli when using >= py311\n- Format '.pyi' type sub files.\n### Fixed\n- Fix SPLIT_ARGUMENTS_WHEN_COMMA_TERMINATED for one-item named argument lists\n  by taking precedence over SPLIT_BEFORE_NAMED_ASSIGNS.\n- Fix SPLIT_ALL_COMMA_SEPARATED_VALUES and SPLIT_ALL_TOP_LEVEL_COMMA_SEPARATED_VALUES\n  being too agressive for lambdas and unpacking.\n\n## [0.40.2] 2023-09-22\n### Changes\n- The verification module has been removed. NOTE: this changes the public APIs\n  by removing the \"verify\" parameter.\n- Changed FORCE_MULTILINE_DICT to override SPLIT_ALL_TOP_LEVEL_COMMA_SEPARATED_VALUES.\n- Adopt pyproject.toml (PEP 517) for build system\n### Fixed\n- Do not treat variables named `match` as the match keyword.\n- Fix SPLIT_ARGUMENTS_WHEN_COMMA_TERMINATED for one-item argument lists.\n- Fix trailing backslash-newline on Windows when using stdin.\n\n## [0.40.1] 2023-06-20\n### Fixed\n- Corrected bad distribution v0.40.0 package.\n\n## [0.40.0] 2023-06-13 [YANKED - [#1107](https://github.com/google/yapf/issues/1107)]\n### Added\n- Support for Python 3.11\n- Add the `--print-modified` flag to print out file names of modified files when\n  running in in-place mode.\n### Changes\n- Replace the outdated and no-longer-supported lib2to3 with a fork of blib2to3,\n  Black's version of lib2to3.\n### Removed\n- Support for Python versions < 3.7 are no longer supported.\n\n## [0.33.0] 2023-04-18 [YANKED - [#1154](https://github.com/google/yapf/issues/1154)]\n### Added\n- Add a new Python parser to generate logical lines.\n- Added support for `# fmt: on` and `# fmt: off` pragmas.\n### Changes\n- Moved 'pytree' parsing tools into its own subdirectory.\n- Add support for Python 3.10.\n- Format generated dicts with respect to same rules as regular dicts\n- Generalized the ending comma heuristic to subscripts.\n- Supports \"pyproject.toml\" by default.\n### Fixed\n- Split line before all comparison operators.\n\n## [0.32.0] 2021-12-26\n### Added\n- Look at the 'pyproject.toml' file to see if it contains ignore file information\n  for YAPF.\n- New entry point `yapf_api.FormatTree` for formatting lib2to3 concrete\n  syntax trees.\n- Add CI via GitHub Actions.\n### Changes\n- Change tests to support \"pytest\".\n- Reformat so that \"flake8\" is happy.\n- Use GitHub Actions instead of Travis for CI.\n- Clean up the FormatToken interface to limit how much it relies upon the\n  pytree node object.\n- Rename \"unwrapped_line\" module to \"logical_line.\"\n- Rename \"UnwrappedLine\" class to \"LogicalLine.\"\n### Fixed\n- Added pyproject extra to install toml package as an optional dependency.\n- Enable `BLANK_LINE_BEFORE_NESTED_CLASS_OR_DEF` knob for \"pep8\" style, so\n  method definitions inside a class are surrounded by a single blank line as\n  prescribed by PEP8.\n- Fixed the '...' token to be spaced after a colon.\n\n## [0.31.0] 2021-03-14\n### Added\n- Renamed 'master' branch to 'main'.\n- Add 'BLANK_LINES_BETWEEN_TOP_LEVEL_IMPORTS_AND_VARIABLES' to support setting\n  a custom number of blank lines between top-level imports and variable\n  definitions.\n- Ignore end of line `# copybara:` directives when checking line length.\n- Look at the 'pyproject.toml' file to see if it contains style information for\n  YAPF.\n### Changed\n- Do not scan excluded directories. Prior versions would scan an excluded\n  folder then exclude its contents on a file by file basis. Preventing the\n  folder being scanned is faster.\n### Fixed\n- Exclude directories on Windows.\n\n## [0.30.0] 2020-04-23\n### Added\n- Added `SPACES_AROUND_LIST_DELIMITERS`, `SPACES_AROUND_DICT_DELIMITERS`,\n  and `SPACES_AROUND_TUPLE_DELIMITERS` to add spaces after the opening-\n  and before the closing-delimiters for lists, dicts, and tuples.\n- Adds `FORCE_MULTILINE_DICT` knob to ensure dictionaries always split,\n  even when shorter than the max line length.\n- New knob `SPACE_INSIDE_BRACKETS` to add spaces inside brackets, braces, and\n  parentheses.\n- New knob `SPACES_AROUND_SUBSCRIPT_COLON` to add spaces around the subscript /\n  slice operator.\n### Changed\n- Renamed \"chromium\" style to \"yapf\". Chromium will now use PEP-8 directly.\n- `CONTINUATION_ALIGN_STYLE` with `FIXED` or `VALIGN-RIGHT` now works with\n  space indentation.\n### Fixed\n- Honor a disable directive at the end of a multiline comment.\n- Don't require splitting before comments in a list when\n  `SPLIT_ALL_TOP_LEVEL_COMMA_SEPARATED_VALUES` is set. The knob is meant for\n  values, not comments, which may be associated with the current line.\n- Don't over-indent a parameter list when not needed. But make sure it is\n  properly indented so that it doesn't collide with the lines afterwards.\n- Don't split between two-word comparison operators: \"is not\", \"not in\", etc.\n\n## [0.29.0] 2019-11-28\n### Added\n- Add the `--quiet` flag to suppress output. The return code is 1 if there are\n  changes, similarly to the `--diff` flag.\n- Add the `indent_closing_brackets` option. This is the same as the\n  `dedent_closing_brackets` option except the brackets are indented the same\n  as the previous line.\n### Changed\n- Collect a parameter list into a single object. This allows us to track how a\n  parameter list is formatted, keeping state along the way. This helps when\n  supporting Python 3 type annotations.\n- Catch and report `UnicodeDecodeError` exceptions.\n- Improved description of .yapfignore syntax.\n### Fixed\n- Format subscript lists so that splits are essentially free after a comma.\n- Don't add a space between a string and its subscript.\n- Extend discovery of '.style.yapf' & 'setup.cfg' files to search the root\n  directory as well.\n- Make sure we have parameters before we start calculating penalties for\n  splitting them.\n- Indicate if a class/function is nested to ensure blank lines when needed.\n- Fix extra indentation in async-for else statement.\n- A parameter list with no elements shouldn't count as exceeding the column\n  limit.\n- When splitting all comma separated values, don't treat the ending bracket as\n  special.\n- The \"no blank lines between nested classes or functions\" knob should only\n  apply to the first nested class or function, not all of them.\n\n## [0.28.0] 2019-07-11\n### Added\n- New knob `SPLIT_ALL_TOP_LEVEL_COMMA_SEPARATED_VALUES` is a variation on\n  `SPLIT_ALL_COMMA_SEPARATED_VALUES` in which, if a subexpression with a comma\n  fits in its starting line, then the subexpression is not split (thus avoiding\n  unnecessary splits).\n### Changed\n- Set `INDENT_DICTIONARY_VALUE` for Google style.\n- Set `JOIN_MULTIPLE_LINES = False` for Google style.\n### Fixed\n- `BLANK_LINE_BEFORE_NESTED_CLASS_OR_DEF=False` wasn't honored because the\n  number of newlines was erroneously calculated beforehand.\n- Lambda expressions shouldn't have an increased split penalty applied to the\n  'lambda' keyword. This prevents them from being properly formatted when they're\n  arguments to functions.\n- A comment with continuation markers (??) shouldn't mess with the lineno count.\n- Only emit unformatted if the \"disable long line\" is at the end of the line.\n  Otherwise we could mess up formatting for containers which have them\n  interspersed with code.\n- Fix a potential race condition by using the correct style for opening a file\n  which may not exist.\n\n## [0.27.0] 2019-04-07\n### Added\n- `SPLIT_BEFORE_ARITHMETIC_OPERATOR` splits before an arithmetic operator when\n  set. `SPLIT_PENALTY_ARITHMETIC_OPERATOR` allows you to set the split penalty\n  around arithmetic operators.\n### Changed\n- Catch lib2to3's \"TokenError\" exception and output a nicer message.\n### Fixed\n- Parse integer lists correctly, removing quotes if the list is within a\n  string.\n- Adjust the penalties of bitwise operands for '&' and '^', similar to '|'.\n- Avoid splitting after opening parens if SPLIT_BEFORE_FIRST_ARGUMENT is set\n  to False.\n- Adjust default SPLIT_PENALTY_AFTER_OPENING_BRACKET.\n- Re-enable removal of extra lines on the boundaries of formatted regions.\n- Adjust list splitting to avoid splitting before a dictionary element, because\n  those are likely to be split anyway. If we do split, it leads to horrible\n  looking code.\n- Dictionary arguments were broken in a recent version. It resulted in\n  unreadable formatting, where the remaining arguments were indented far more\n  than the dictionary. Fixed so that if the dictionary is the first argument in\n  a function call and doesn't fit on a single line, then it forces a split.\n- Improve the connectiveness between items in a list. This prevents random\n  splitting when it's not 100% necessary.\n- Don't remove a comment attached to a previous object just because it's part\n  of the \"prefix\" of a function/class node.\n\n## [0.26.0] 2019-02-08\n### Added\n- `ALLOW_SPLIT_BEFORE_DEFAULT_OR_NAMED_ASSIGNS` allows us to split before\n  default / named assignments.\n- `ARITHMETIC_PRECEDENCE_INDICATION` removes spacing around binary operators\n  if they have higher precedence than other operators in the same expression.\n### Changed\n- `SPACES_BEFORE_COMMENT` can now be assigned to a specific value (standard\n  behavior) or a list of column values. When assigned to a list, trailing\n  comments will be horizontally aligned to the first column value within\n  the list that is greater than the maximum line length in the block.\n- Don't modify the vertical spacing of a line that has a comment \"pylint:\n  disable=line-too-long\". The line is expected to be too long.\n- improved `CONTINUATION_ALIGN_STYLE` to accept quoted or underline-separated\n  option value for passing option with command line arguments.\n### Fixed\n- When retrieving the opening bracket make sure that it's actually an opening\n  bracket.\n- Don't completely deny a lambda formatting if it goes over the column limit.\n  Split only if absolutely necessary.\n- Bump up penalty for splitting before a dot ('.').\n- Ignore pseudo tokens when calculating split penalties.\n- Increase the penalty for splitting before the first bit of a subscript.\n- Improve splitting before dictionary values. Look more closely to see if the\n  dictionary entry is a container. If so, then it's probably split over\n  multiple lines with the opening bracket on the same line as the key.\n  Therefore, we shouldn't enforce a split because of that.\n- Increase split penalty around exponent operator.\n- Correct spacing when using binary operators on strings with the\n  `NO_SPACES_AROUND_SELECTED_BINARY_OPERATORS` option enabled.\n\n## [0.25.0] 2018-11-25\n### Added\n- Added `INDENT_BLANK_LINES` knob to select whether the blank lines are empty\n  or indented consistently with the current block.\n- Support additional file exclude patterns in .yapfignore file.\n### Fixed\n- Correctly determine if a scope is the last in line. It avoids a wrong\n  computation of the line end when determining if it must split after the\n  opening bracket with `DEDENT_CLOSING_BRACKETS` enabled.\n\n## [0.24.0] 2018-09-07\n### Added\n- Added 'SPLIT_BEFORE_DOT' knob to support \"builder style\" calls. The \"builder\n  style\" option didn't work as advertised. Lines would split after the dots,\n  not before them regardless of the penalties.\n### Changed\n- Support Python 3.7 in the tests. The old \"comp_for\" and \"comp_if\" nodes are\n  now \"old_comp_for\" and \"old_comp_if\" in lib2to3.\n### Fixed\n- Don't count inner function calls when marking arguments as named assignments.\n- Make sure that tuples and the like are formatted nicely if they all can't fit\n  on a single line. This is similar to how we format function calls within an\n  argument list.\n- Allow splitting in a subscript if it goes over the line limit.\n- Increase the split penalty for an if-expression.\n- Increase penalty for splitting in a subscript so that it's more likely to\n  split in a function call or other data literal.\n- Cloning a pytree node doesn't transfer its a annotations. Make sure we do\n  that so that we don't lose information.\n- Revert change that broke the \"no_spaces_around_binary_operators\" option.\n- The \"--style-help\" option would output string lists and sets in Python types.\n  If the output was used as a style, then it wouldn't parse those values\n  correctly.\n\n## [0.23.0] 2018-08-27\n### Added\n- `DISABLE_ENDING_COMMA_HEURISTIC` is a new knob to disable the heuristic which\n  splits a list onto separate lines if the list is comma-terminated.\n### Fixed\n- There's no need to increase N_TOKENS. In fact, it causes other things which\n  use lib2to3 to fail if called from YAPF.\n- Change the exception message instead of creating a new one that's just a\n  clone.\n- Make sure not to reformat when a line is disabled even if the --lines option\n  is specified.\n- The \"no spaces around operators\" flag wasn't correctly converting strings to\n  sets. Changed the regexp to handle it better.\n\n## [0.22.0] 2018-05-15\n### Added\n- The `BLANK_LINE_BEFORE_MODULE_DOCSTRING` knob adds a blank line before a\n  module's docstring.\n- The `SPLIT_ALL_COMMA_SEPARATED_VALUES` knob causes all lists, tuples, dicts\n  function defs, etc... to split on all values, instead of maximizing the\n  number of elements on each line, when not able to fit on a single line.\n### Changed\n- Improve the heuristic we use to determine when to split at the start of a\n  function call. First check whether or not all elements can fit in the space\n  without wrapping. If not, then we split.\n- Check all of the elements of a tuple. Similarly to how arguments are\n  analyzed. This allows tuples to be split more rationally.\n- Adjust splitting penalties around arithmetic operators so that the code can\n  flow more freely. The code must flow!\n- Try to meld an argument list's closing parenthesis to the last argument.\n### Fixed\n- Attempt to determine if long lambdas are allowed. This can be done on a\n  case-by-case basis with a \"pylint\" disable comment.\n- A comment before a decorator isn't part of the decorator's line.\n- Only force a new wrapped line after a comment in a decorator when it's the\n  first token in the decorator.\n\n## [0.21.0] 2018-03-18\n### Added\n- Introduce a new option of formatting multiline literals. Add\n  `SPLIT_BEFORE_CLOSING_BRACKET` knob to control whether closing bracket should\n  get their own line.\n- Added `CONTINUATION_ALIGN_STYLE` knob to choose continuation alignment style\n  when `USE_TABS` is enabled.\n- Add 'BLANK_LINES_AROUND_TOP_LEVEL_DEFINITION' knob to control the number\n  of blank lines between top-level function and class definitions.\n### Fixed\n- Don't split ellipses.\n\n## [0.20.2] 2018-02-12\n### Changed\n- Improve the speed at which files are excluded by ignoring them earlier.\n- Allow dictionaries to stay on a single line if they only have one entry\n### Fixed\n- Use tabs when constructing a continuation line when `USE_TABS` is enabled.\n- A dictionary entry may not end in a colon, but may be an \"unpacking\"\n  operation: `**foo`. Take that into account and don't split after the\n  unpacking operator.\n\n## [0.20.1] 2018-01-13\n### Fixed\n- Don't treat 'None' as a keyword if calling a function on it, like '__ne__()'.\n- use_tabs=True always uses a single tab per indentation level; spaces are\n  used for aligning vertically after that.\n- Relax the split of a paren at the end of an if statement. With\n  `dedent_closing_brackets` option requires that it be able to split there.\n\n## [0.20.0] 2017-11-14\n### Added\n- Improve splitting of comprehensions and generators. Add\n  `SPLIT_PENALTY_COMPREHENSION` knob to control preference for keeping\n  comprehensions on a single line and `SPLIT_COMPLEX_COMPREHENSION` to enable\n  splitting each clause of complex comprehensions onto its own line.\n### Changed\n- Take into account a named function argument when determining if we should\n  split before the first argument in a function call.\n- Split before the first argument in a function call if the arguments contain a\n  dictionary that doesn't fit on a single line.\n- Improve splitting of elements in a tuple. We want to split if there's a\n  function call in the tuple that doesn't fit on the line.\n### Fixed\n- Enforce spaces between ellipses and keywords.\n- When calculating the split penalty for a \"trailer\", process the child nodes\n  afterwards because their penalties may change. For example if a list\n  comprehension is an argument.\n- Don't enforce a split before a comment after the opening of a container if it\n  doesn't it on the current line. We try hard not to move such comments around.\n- Use a TextIOWrapper when reading from stdin in Python3. This is necessary for\n  some encodings, like cp936, used on Windows.\n- Remove the penalty for a split before the first argument in a function call\n  where the only argument is a generator expression.\n\n## [0.19.0] 2017-10-14\n### Added\n- Added `SPLIT_BEFORE_EXPRESSION_AFTER_OPENING_PAREN` that enforces a split\n  after the opening paren of an expression that's surrounded by parens.\n### Changed\n- Split before the ending bracket of a comma-terminated tuple / argument list\n  if it's not a single element tuple / arg list.\n### Fixed\n- Prefer to split after a comma in an argument list rather than in the middle\n  of an argument.\n- A non-multiline string may have newlines if it contains continuation markers\n  itself. Don't add a newline after the string when retaining the vertical\n  space.\n- Take into account the \"async\" keyword when determining if we must split\n  before the first argument.\n- Increase affinity for \"atom\" arguments in function calls. This helps prevent\n  lists from being separated when they don't need to be.\n- Don't place a dictionary argument on its own line if it's the last argument\n  in the function call where that function is part of a builder-style call.\n- Append the \"var arg\" type to a star in a star_expr.\n\n## [0.18.0] 2017-09-18\n### Added\n- Option `ALLOW_SPLIT_BEFORE_DICT_VALUE` allows a split before a value. If\n  False, then it won't be split even if it goes over the column limit.\n### Changed\n- Use spaces around the '=' in a typed name argument to align with 3.6 syntax.\n### Fixed\n- Allow semicolons if the line is disabled.\n- Fix issue where subsequent comments at decreasing levels of indentation\n  were improperly aligned and/or caused output with invalid syntax.\n- Fix issue where specifying a line range removed a needed line before a\n  comment.\n- Fix spacing between unary operators if one is 'not'.\n- Indent the dictionary value correctly if there's a multi-line key.\n- Don't remove needed spacing before a comment in a dict when in \"chromium\"\n  style.\n- Increase indent for continuation line with same indent as next logical line\n  with 'async with' statement.\n\n## [0.17.0] 2017-08-20\n### Added\n- Option `NO_SPACES_AROUND_SELECTED_BINARY_OPERATORS` prevents adding spaces\n  around selected binary operators, in accordance with the current style guide.\n### Changed\n- Adjust blank lines on formatting boundaries when using the `--lines` option.\n- Return 1 if a diff changed the code. This is in line with how GNU diff acts.\n- Add `-vv` flag to print out file names as they are processed\n### Fixed\n- Corrected how `DEDENT_CLOSING_BRACKETS` and `COALESCE_BRACKETS` interacted.\n- Fix return value to return a boolean.\n- Correct vim plugin not to clobber edited code if yapf returns an error.\n- Ensured comma-terminated tuples with multiple elements are split onto separate lines.\n\n## [0.16.3] 2017-07-13\n### Changed\n- Add filename information to a ParseError exception.\n### Fixed\n- A token that ends in a continuation marker may have more than one newline in\n  it, thus changing its \"lineno\" value. This can happen if multiple\n  continuation markers are used with no intervening tokens. Adjust the line\n  number to account for the lines covered by those markers.\n- Make sure to split after a comment even for \"pseudo\" parentheses.\n\n## [0.16.2] 2017-05-19\n### Fixed\n- Treat expansion operators ('*', '**') in a similar way to function calls to\n  avoid splitting directly after the opening parenthesis.\n- Increase the penalty for splitting after the start of a tuple.\n- Increase penalty for excess characters.\n- Check that we have enough children before trying to access them all.\n- Remove trailing whitespaces from comments.\n- Split before a function call in a list if the full list isn't able to fit on\n  a single line.\n- Trying not to split around the '=' of a named assign.\n- Changed split before the first argument behavior to ignore compound\n  statements like if and while, but not function declarations.\n- Changed coalesce brackets not to line split before closing bracket.\n\n## [0.16.1] 2017-03-22\n### Changed\n- Improved performance of cloning the format decision state object. This\n  improved the time in one *large* case from 273.485s to 234.652s.\n- Relax the requirement that a named argument needs to be on one line. Going\n  over the column limit is more of an issue to pylint than putting named args\n  on multiple lines.\n- Don't make splitting penalty decisions based on the original formatting. This\n  can and does lead to non-stable formatting, where yapf will reformat the same\n  code in different ways.\n### Fixed\n- Ensure splitting of arguments if there's a named assign present.\n- Prefer to coalesce opening brackets if it's not at the beginning of a\n  function call.\n- Prefer not to squish all of the elements in a function call over to the\n  right-hand side. Split the arguments instead.\n- We need to split a dictionary value if the first element is a comment anyway,\n  so don't force the split here. It's forced elsewhere.\n- Ensure tabs are used for continued indentation when USE_TABS is True.\n\n## [0.16.0] 2017-02-05\n### Added\n- The `EACH_DICT_ENTRY_ON_SEPARATE_LINE` knob indicates that each dictionary\n  entry should be in separate lines if the full dictionary isn't able to fit on\n  a single line.\n- The `SPLIT_BEFORE_DICT_SET_GENERATOR` knob splits before the `for` part of a\n  dictionary/set generator.\n- The `BLANK_LINE_BEFORE_CLASS_DOCSTRING` knob adds a blank line before a\n  class's docstring.\n- The `ALLOW_MULTILINE_DICTIONARY_KEYS` knob allows dictionary keys to span\n  more than one line.\n### Fixed\n- Split before all entries in a dict/set or list maker when comma-terminated,\n  even if there's only one entry.\n- Will now try to set O_BINARY mode on stdout under Windows and Python 2.\n- Avoid unneeded newline transformation when writing formatted code to\n  output on (affects only Python 2)\n\n## [0.15.2] 2017-01-29\n### Fixed\n- Don't perform a global split when a named assign is part of a function call\n  which itself is an argument to a function call. I.e., don't cause 'a' to\n  split here:\n\n      func(a, b, c, d(x, y, z=42))\n- Allow splitting inside a subscript if it's a logical or bitwise operating.\n  This should keep the subscript mostly contiguous otherwise.\n\n## [0.15.1] 2017-01-21\n### Fixed\n- Don't insert a space between a type hint and the '=' sign.\n- The '@' operator can be used in Python 3 for matrix multiplication. Give the\n  '@' in the decorator a DECORATOR subtype to distinguish it.\n- Encourage the formatter to split at the beginning of an argument list instead\n  of in the middle. Especially if the middle is an empty parameter list. This\n  adjusts the affinity of binary and comparison operators. In particular, the\n  \"not in\" and other such operators don't want to have a split after it (or\n  before it) if at all possible.\n\n## [0.15.0] 2017-01-12\n### Added\n- Keep type annotations intact as much as possible. Don't try to split the over\n  multiple lines.\n### Fixed\n- When determining if each element in a dictionary can fit on a single line, we\n  are skipping dictionary entries. However, we need to ignore comments in our\n  calculations and implicitly concatenated strings, which are already placed on\n  separate lines.\n- Allow text before a \"pylint\" comment.\n- Also allow text before a \"yapf: (disable|enable)\" comment.\n\n## [0.14.0] 2016-11-21\n### Added\n- formatting can be run in parallel using the \"-p\" / \"--parallel\" flags.\n### Fixed\n- \"not in\" and \"is not\" should be subtyped as binary operators.\n- A non-Node dictionary value may have a comment before it. In those cases, we\n  want to avoid encompassing only the comment in pseudo parens. So we include\n  the actual value as well.\n- Adjust calculation so that pseudo-parentheses don't count towards the total\n  line length.\n- Don't count a dictionary entry as not fitting on a single line in a\n  dictionary.\n- Don't count pseudo-parentheses in the length of the line.\n\n## [0.13.2] 2016-10-22\n### Fixed\n- REGRESSION: A comment may have a prefix with newlines in it. When calculating\n  the prefix indent, we cannot take the newlines into account. Otherwise, the\n  comment will be misplaced causing the code to fail.\n\n## [0.13.1] 2016-10-17\n### Fixed\n- Correct emitting a diff that was accidentally removed.\n\n## [0.13.0] 2016-10-16\n### Added\n- Added support to retain the original line endings of the source code.\n\n### Fixed\n- Functions or classes with comments before them were reformatting the comments\n  even if the code was supposed to be ignored by the formatter. We now don't\n  adjust the whitespace before a function's comment if the comment is a\n  \"disabled\" line. We also don't count \"# yapf: {disable|enable}\" as a disabled\n  line, which seems logical.\n- It's not really more readable to split before a dictionary value if it's part\n  of a dictionary comprehension.\n- Enforce two blank lines after a function or class definition, even before a\n  comment. (But not between a decorator and a comment.) This is related to PEP8\n  error E305.\n- Remove O(n^2) algorithm from the line disabling logic.\n\n## [0.12.2] 2016-10-09\n### Fixed\n- If `style.SetGlobalStyle(<create pre-defined style>)` was called and then\n  `yapf_api.FormatCode` was called, the style set by the first call would be\n  lost, because it would return the style created by `DEFAULT_STYLE_FACTORY`,\n  which is set to PEP8 by default. Fix this by making the first call set which\n  factory we call as the \"default\" style.\n- Don't force a split before non-function call arguments.\n- A dictionary being used as an argument to a function call and which can exist\n  on a single line shouldn't be split.\n- Don't rely upon the original line break to determine if we should split\n  before the elements in a container. Especially split if there's a comment in\n  the container.\n- Don't add spaces between star and args in a lambda expression.\n- If a nested data structure terminates in a comma, then split before the first\n  element, but only if there's more than one element in the list.\n\n## [0.12.1] 2016-10-02\n### Changed\n- Dictionary values will be placed on the same line as the key if *all* of the\n  elements in the dictionary can be placed on one line. Otherwise, the\n  dictionary values will be placed on the next line.\n\n### Fixed\n- Prefer to split before a terminating r-paren in an argument list if the line\n  would otherwise go over the column limit.\n- Split before the first key in a dictionary if the dictionary cannot fit on a\n  single line.\n- Don't count \"pylint\" comments when determining if the line goes over the\n  column limit.\n- Don't count the argument list of a lambda as a named assign in a function\n  call.\n\n## [0.12.0] 2016-09-25\n### Added\n- Support formatting of typed names. Typed names are formatted a similar way to\n  how named arguments are formatted, except that there's a space after the\n  colon.\n- Add a knob, 'SPACES_AROUND_DEFAULT_OR_NAMED_ASSIGN', to allow adding spaces\n  around the assign operator on default or named assigns.\n\n## Changed\n- Turn \"verification\" off by default for external APIs.\n- If a function call in an argument list won't fit on the current line but will\n  fit on a line by itself, then split before the call so that it won't be split\n  up unnecessarily.\n\n## Fixed\n- Don't add space after power operator if the next operator's a unary operator.\n\n## [0.11.1] 2016-08-17\n### Changed\n- Issue #228: Return exit code 0 on success, regardless of whether files were\n  changed.  (Previously, 0 meant success with no files\n  modified, and 2 meant success with at least one file modified.)\n\n### Fixed\n- Enforce splitting each element in a dictionary if comma terminated.\n- It's okay to split in the middle of a dotted name if the whole expression is\n  going to go over the column limit.\n- Asynchronous functions were going missing if they were preceded by a comment\n  (a what? exactly). The asynchronous function processing wasn't taking the\n  comment into account and thus skipping the whole function.\n- The splitting of arguments when comma terminated had a conflict. The split\n  penalty of the closing bracket was set to the maximum, but it shouldn't be if\n  the closing bracket is preceded by a comma.\n\n## [0.11.0] 2016-07-17\n### Added\n- The COALESCE_BRACKETS knob prevents splitting consecutive brackets when\n  DEDENT_CLOSING_BRACKETS is set.\n- Don't count \"pylint\" directives as exceeding the column limit.\n\n### Changed\n- We split all of the arguments to a function call if there's a named argument.\n  In this case, we want to split after the opening bracket too. This makes\n  things look a bit better.\n\n### Fixed\n- When retaining format of a multiline string with Chromium style, make sure\n  that the multiline string doesn't mess up where the following comma ends up.\n- Correct for when 'lib2to3' smooshes comments together into the same DEDENT\n  node.\n\n## [0.10.0] 2016-06-14\n### Added\n- Add a knob, 'USE_TABS', to allow using tabs for indentation.\n\n### Changed\n- Performance enhancements.\n\n### Fixed\n- Don't split an import list if it's not surrounded by parentheses.\n\n## [0.9.0] 2016-05-29\n### Added\n- Added a knob (SPLIT_PENALTY_BEFORE_IF_EXPR) to adjust the split penalty\n  before an if expression. This allows the user to place a list comprehension\n  all on one line.\n- Added a knob (SPLIT_BEFORE_FIRST_ARGUMENT) that encourages splitting before\n  the first element of a list of arguments or parameters if they are going to\n  be split anyway.\n- Added a knob (SPLIT_ARGUMENTS_WHEN_COMMA_TERMINATED) splits arguments to a\n  function if the list is terminated by a comma.\n\n### Fixed\n- Don't split before a first element list argument as we would before a first\n  element function call.\n- Don't penalize when we must split a line.\n- Allow splitting before the single argument in a function call.\n\n## [0.8.2] 2016-05-21\n### Fixed\n- Prefer not to split after the opening of a subscript.\n- Don't add space before the 'await' keyword if it's preceded by an opening\n  paren.\n- When we're setting the split penalty for a continuous list, we don't want to\n  mistake a comment at the end of that list as part of the list.\n- When calculating blank lines, don't assume the last seen object was a class\n  or function when we're in a class or function.\n- Don't count the closing scope when determining if the current scope is the\n  last scope on the line.\n\n## [0.8.1] 2016-05-18\n### Fixed\n- 'SPLIT_BEFORE_LOGICAL_OPERATOR' wasn't working correctly. The penalty was\n  being set incorrectly when it was part of a larger construct.\n- Don't separate a keyword, like \"await\", from a left paren.\n- Don't rely upon the original tokens' line number to determine if we should\n  perform splitting in Facebook mode. The line number isn't the line number of\n  the reformatted token, but the line number where it was in the original code.\n  Instead, we need to carefully determine if the line is liabel to be split and\n  act accordingly.\n\n## [0.8.0] 2016-05-10\n### Added\n- Add a knob, 'SPACES_AROUND_POWER_OPERATOR', to allow adding spaces around the\n  power operator.\n\n### Fixed\n- There shouldn't be a space between a decorator and an intervening comment.\n- If we split before a bitwise operator, then we assume that the programmer\n  knows what they're doing, more or less, and so we enforce a split before said\n  operator if one exists in the original program.\n- Strengthen the bond between a keyword and value argument.\n- Don't add a blank line after a multiline string.\n- If the \"for\" part of a list comprehension can exist on the starting line\n  without going over the column limit, then let it remain there.\n\n## [0.7.1] 2016-04-21\n### Fixed\n- Don't rewrite the file if there are no changes.\n- Ensure the proper number of blank lines before an async function.\n- Split after a bitwise operator when in PEP 8 mode.\n- Retain the splitting within a dictionary data literal between the key and\n  value.\n- Try to keep short function calls all on one line even if they're part of a\n  larger series of tokens. This stops us from splitting too much.\n\n## [0.7.0] 2016-04-09\n### Added\n- Support for Python 3.5.\n- Add 'ALLOW_MULTILINE_LAMBDAS' which allows lambdas to be formatted onto\n  multiple lines.\n\n### Fixed\n- Lessen penalty for splitting before a dictionary keyword.\n- Formatting of trailing comments on disabled formatting lines.\n- Disable / enable formatting at end of multi-line comment.\n\n## [0.6.3] 2016-03-06\n### Changed\n- Documentation updated.\n\n### Fixed\n- Fix spacing of multiline comments when formatting is disabled.\n\n## [0.6.2] 2015-11-01\n### Changed\n- Look at the 'setup.cfg' file to see if it contains style information for\n  YAPF.\n- Look at the '~/.config/yapf/style' file to see if it contains global style\n  information for YAPF.\n\n### Fixed\n- Make lists that can fit on one line more likely to stay together.\n- Correct formatting of '*args' and '**kwargs' when there are default values in\n  the argument list.\n\n## [0.6.1] 2015-10-24\n### Fixed\n- Make sure to align comments in data literals correctly. Also make sure we\n  don't count a \"#.\" in a string as an i18n comment.\n- Retain proper vertical spacing before comments in a data literal.\n- Make sure that continuations from a compound statement are distinguished from\n  the succeeding line.\n- Ignore preceding comments when calculating what is a \"dictionary maker\".\n- Add a small penalty for splitting before a closing bracket.\n- Ensure that a space is enforced after we remove a pseudo-paren that's between\n  two names, keywords, numbers, etc.\n- Increase the penalty for splitting after a pseudo-paren. This could lead to\n  less readable code in some circumstances.\n\n## [0.6.0] 2015-10-18\n### Added\n- Add knob to indent the dictionary value if there is a split before it.\n\n### Changed\n- No longer check that a file is a \"Python\" file unless the '--recursive' flag\n  is specified.\n- No longer allow the user to specify a directory unless the '--recursive' flag\n  is specified.\n\n### Fixed\n- When determining if we should split a dictionary's value to a new line, use\n  the longest entry instead of the total dictionary's length. This allows the\n  formatter to reformat the dictionary in a more consistent manner.\n- Improve how list comprehensions are formatted. Make splitting dependent upon\n  whether the \"comp_for\" or \"comp_if\" goes over the column limit.\n- Don't over indent if expression hanging indents if we expect to dedent the\n  closing bracket.\n- Improve splitting heuristic when the first argument to a function call is\n  itself a function call with arguments. In cases like this, the remaining\n  arguments to the function call would look badly aligned, even though they are\n  technically correct (the best kind of correct!).\n- Improve splitting heuristic more so that if the first argument to a function\n  call is a data literal that will go over the column limit, then we want to\n  split before it.\n- Remove spaces around '**' operator.\n- Retain formatting of comments in the middle of an expression.\n- Don't add a newline to an empty file.\n- Over indent a function's parameter list if it's not distinguished from the\n  body of the function.\n\n## [0.5.0] 2015-10-11\n### Added\n- Add option to exclude files/directories from formatting.\n- Add a knob to control whether import names are split after the first '('.\n\n### Fixed\n- Indent the continuation of an if-then statement when it's not distinguished\n  from the body of the if-then.\n- Allow for sensible splitting of array indices where appropriate.\n- Prefer to not split before the ending bracket of an atom. This produces\n  better code in most cases.\n- Corrected how horizontal spaces were presevered in a disabled region.\n\n## [0.4.0] 2015-10-07\n### Added\n- Support for dedenting closing brackets, \"facebook\" style.\n\n### Fixed\n- Formatting of tokens after a multiline string didn't retain their horizontal\n  spacing.\n\n## [0.3.1] 2015-09-30\n### Fixed\n- Format closing scope bracket correctly when indentation size changes.\n\n## [0.3.0] 2015-09-20\n### Added\n- Return a 2 if the source changed, 1 on error, and 0 for no change.\n\n### Fixed\n- Make sure we format if the \"lines\" specified are in the middle of a\n  statement.\n\n## [0.2.9] - 2015-09-13\n### Fixed\n- Formatting of multiple files. It was halting after formatting the first file.\n\n## [0.2.8] - 2015-09-12\n### Added\n- Return a non-zero exit code if the source was changed.\n- Add bitwise operator splitting penalty and prefer to split before bitwise\n  operators.\n\n### Fixed\n- Retain vertical spacing between disabled and enabled lines.\n- Split only at start of named assign.\n- Retain comment position when formatting is disabled.\n- Honor splitting before or after logical ops.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.9892578125,
          "content": "# How to Contribute\n\nWant to contribute? Great! First, read this page (including the small print at\nthe end).\n\n## Before you contribute\n\nBefore we can use your code, you must sign the [Google Individual Contributor\nLicense Agreement](https://developers.google.com/open-source/cla/individual?csw=1)\n(CLA), which you can do online. The CLA is necessary mainly because you own the\ncopyright to your changes, even after your contribution becomes part of our\ncodebase, so we need your permission to use and distribute your code. We also\nneed to be sure of various other things—for instance that you'll tell us if you\nknow that your code infringes on other people's patents. You don't have to sign\nthe CLA until after you've submitted your code for review and a member has\napproved it, but you must do it before we can put your code into our codebase.\nBefore you start working on a larger contribution, you should get in touch with\nus first through the issue tracker with your idea so that we can help out and\npossibly guide you. Coordinating up front makes it much easier to avoid\nfrustration later on.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse Github pull requests for this purpose.\n\n## YAPF coding style\n\nYAPF follows the [Google Python Style Guide](https://google.github.io/styleguide/pyguide.html)\nwith two exceptions:\n\n- 2 spaces for indentation rather than 4.\n- CamelCase for function and method names rather than `snake_case`.\n\nThe rationale for this is that YAPF was initially developed at Google where\nthese two exceptions are still part of the internal Python style guide.\n\n## Getting started\nYAPF supports using tox 3 for creating a local dev environment, testing, and\nbuilding redistributables. See [HACKING.md](HACKING.md) for more info.\n\n```bash\n$ pipx run --spec='tox<4' tox --devenv .venv\n```\n\n## Small print\n\nContributions made by corporations are covered by a different agreement than\nthe one above, the Software Grant and Corporate Contributor License Agreement.\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 0.6689453125,
          "content": "# People who have agreed to one of the CLAs and can contribute patches.\n# The AUTHORS file lists the copyright holders; this file\n# lists people.  For example, Google employees are listed here\n# but not in AUTHORS, because Google holds the copyright.\n#\n# https://developers.google.com/open-source/cla/individual\n# https://developers.google.com/open-source/cla/corporate\n#\n# Names should be added to this file as:\n#     Name <email address>\n\nBill Wendling <morbo@google.com>\nEli Bendersky <eliben@google.com>\nSam Clegg <sbc@google.com>\nŁukasz Langa <ambv@fb.com>\nOleg Butuzov <butuzov@made.ua>\nMauricio Herrera Cuadra <mauricio@arareko.net>\nKyle Gottfried <kyle.gottfried@outlook.com>\n"
        },
        {
          "name": "EDITOR SUPPORT.md",
          "type": "blob",
          "size": 2.9140625,
          "content": "# Using YAPF with your editor\n\nYAPF is supported by multiple editors via community extensions or plugins.\n\n- [IntelliJ/PyCharm](#intellijpycharm)\n- [IPython](#ipython)\n- [VSCode](#vscode)\n\n## IntelliJ/PyCharm\n\nUse the `File Watchers` plugin to run YAPF against a file when you perform a save.\n\n1.  Install the [File Watchers](https://www.jetbrains.com/help/idea/using-file-watchers.html) Plugin\n1.  Add the following `.idea/watcherTasks.xml` to your project. If you already have this file just add the `TaskOptions` section from below. This example uses Windows and a virtual environment, modify the `program` option as appropriate.\n    ```xml\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <project version=\"4\">\n        <component name=\"ProjectTasksOptions\">\n            <TaskOptions isEnabled=\"true\">\n                <option name=\"arguments\" value=\"-i $FilePathRelativeToProjectRoot$\" />\n                <option name=\"checkSyntaxErrors\" value=\"true\" />\n                <option name=\"description\" />\n                <option name=\"exitCodeBehavior\" value=\"ERROR\" />\n                <option name=\"fileExtension\" value=\"py\" />\n                <option name=\"immediateSync\" value=\"true\" />\n                <option name=\"name\" value=\"yapf\" />\n                <option name=\"output\" value=\"\" />\n                <option name=\"outputFilters\">\n                    <array />\n                </option>\n                <option name=\"outputFromStdout\" value=\"false\" />\n                <option name=\"program\" value=\"$PROJECT_DIR$/.venv/Scripts/yapf.exe\" />\n                <option name=\"runOnExternalChanges\" value=\"true\" />\n                <option name=\"scopeName\" value=\"Project Files\" />\n                <option name=\"trackOnlyRoot\" value=\"false\" />\n                <option name=\"workingDir\" value=\"$Projectpath$\" />\n                <envs />\n            </TaskOptions>\n        </component>\n    </project>\n    ```\n\n## IPython\n\nIPython supports formatting lines automatically when you press the `<Enter>` button to submit the current code block.\n\nMake sure that the YAPF module is available to the IPython runtime:\n\n```shell\npip install ipython yapf\n```\n\npipx example:\n\n```shell\npipx install ipython\npipx inject ipython yapf\n```\n\nAdd following to `~/.ipython/profile_default/ipython_config.py`:\n\n```python\nc.TerminalInteractiveShell.autoformatter = 'yapf'\n```\n\n## VSCode\n\nVSCode has deprecated support for YAPF in its official Python extension [in favor of dedicated formatter extensions](https://github.com/microsoft/vscode-python/wiki/Migration-to-Python-Tools-Extensions).\n\n1. Install EeyoreLee's [yapf](https://marketplace.visualstudio.com/items?itemName=eeyore.yapf) extension.\n1. Install the yapf package from pip.\n   ```\n   pip install yapf\n   ```\n1. Add the following to VSCode's `settings.json`:\n   ```jsonc\n   \"[python]\": {\n       \"editor.formatOnSaveMode\": \"file\",\n       \"editor.formatOnSave\": true,\n       \"editor.defaultFormatter\": \"eeyore.yapf\"  # choose this extension\n   },\n   ```\n"
        },
        {
          "name": "HACKING.md",
          "type": "blob",
          "size": 1.6875,
          "content": "## Running YAPF on itself\n\n- To run YAPF on all of YAPF:\n\n```bash\n$ pipx run --spec=${PWD} --no-cache yapf -m -i -r yapf/ yapftests/ third_party/\n```\n\n- To run YAPF on just the files changed in the current git branch:\n\n```bash\n$ pipx run --spec=${PWD} --no-cache yapf -m -i $(git diff --name-only @{upstream})\n```\n\n## Testing and building redistributables locally\n\nYAPF uses tox 3 to test against multiple python versions and to build redistributables.\n\nTox will opportunistically use pyenv environments when available.\nTo configure pyenv run the following in bash:\n\n```bash\n$ xargs -t -n1 pyenv install  < .python-version\n```\n\nTest against all supported Python versions that are currently installed:\n```bash\n$ pipx run --spec='tox<4' tox\n```\n\nBuild and test the sdist and wheel against your default Python environment. The redistributables will be in the `dist` directory.\n```bash\n$ pipx run --spec='tox<4' tox -e bdist_wheel -e sdist\n```\n\n## Releasing a new version\n\n1. Install all expected pyenv environements\n    ```bash\n    $ xargs -t -n1 pyenv install  < .python-version\n    ```\n\n1. Run tests against Python 3.7 - 3.11 with\n    ```bash\n    $ pipx run --spec='tox<4' tox\n    ```\n\n1. Bump version in `yapf/_version.py`.\n\n1. Build and test redistributables\n\n    ```bash\n    $ pipx run --spec='tox<4' tox -e bdist_wheel -e sdist\n    ```\n\n1. Check that it looks OK.\n   1. Install it onto a virtualenv,\n   1. run tests, and\n   1. run yapf as a tool.\n\n1. Push to PyPI:\n\n    ```bash\n    $ pipx run twine upload dist/*\n    ```\n\n1. Test in a clean virtualenv that 'pip install yapf' works with the new\n  version.\n\n1. Commit the version bump and add tag with:\n\n    ```bash\n    $ git tag v$(VERSION_NUM)\n    $ git push --tags\n    ```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2529296875,
          "content": "include HACKING.md LICENSE AUTHORS CHANGELOG.md CONTRIBUTING.md CONTRIBUTORS\ninclude .coveragerc .editorconfig .flake8 plugins/README.md\ninclude plugins/vim/autoload/yapf.vim plugins/vim/plugin/yapf.vim pylintrc\ninclude .style.yapf tox.ini .travis.yml .vimrc\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 31.68359375,
          "content": "# YAPF\n\n<p align=\"center\">\n<a href=\"https://badge.fury.io/py/yapf\"><img alt=\"PyPI Version\" src=\"https://badge.fury.io/py/yapf.svg\"></a>\n<a href=\"https://github.com/google/yapf/actions/workflows/ci.yml\"><img alt=\"Build Status\" src=\"https://github.com/google/yapf/actions/workflows/ci.yml/badge.svg\"></a>\n<a href=\"https://github.com/google/yapf/actions/workflows/pre-commit.yml\"><img alt=\"Actions Status\" src=\"https://github.com/google/yapf/actions/workflows/pre-commit.yml/badge.svg\"></a>\n<a href=\"https://coveralls.io/github/google/yapf?branch=main\"><img alt=\"Coverage Status\" src=\"https://coveralls.io/repos/github/google/yapf/badge.svg?branch=main\"></a>\n</p>\n\n\n## Introduction\n\nYAPF is a Python formatter based on [`clang-format`](https://clang.llvm.org/docs/ClangFormat.html)\n(developed by Daniel Jasper). In essence, the algorithm takes the code and\ncalculates the best formatting that conforms to the configured style. It takes\naway a lot of the drudgery of maintaining your code.\n\nThe ultimate goal is that the code YAPF produces is as good as the code that a\nprogrammer would write if they were following the style guide.\n\n> **Note**\n> YAPF is not an official Google product (experimental or otherwise), it is\n> just code that happens to be owned by Google.\n\n\n## Installation\n\nTo install YAPF from PyPI:\n\n```bash\n$ pip install yapf\n```\n\nYAPF is still considered in \"beta\" stage, and the released version may change\noften; therefore, the best way to keep up-to-date with the latest development\nis to clone this repository or install directly from github:\n\n```bash\n$ pip install git+https://github.com/google/yapf.git\n```\n\nNote that if you intend to use YAPF as a command-line tool rather than as a\nlibrary, installation is not necessary. YAPF supports being run as a directory\nby the Python interpreter. If you cloned/unzipped YAPF into `DIR`, it's\npossible to run:\n\n```bash\n$ PYTHONPATH=DIR python DIR/yapf [options] ...\n```\n\n## Using YAPF within your favorite editor\nYAPF is supported by multiple editors via community extensions or plugins. See [Editor Support](EDITOR%20SUPPORT.md) for more info.\n\n## Required Python versions\n\nYAPF supports Python 3.7+.\n\n\n## Usage\n\n```console\nusage: yapf [-h] [-v] [-d | -i | -q] [-r | -l START-END] [-e PATTERN]\n            [--style STYLE] [--style-help] [--no-local-style] [-p] [-m] [-vv]\n            [files ...]\n\nFormatter for Python code.\n\npositional arguments:\n  files                 reads from stdin when no files are specified.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         show program's version number and exit\n  -d, --diff            print the diff for the fixed source\n  -i, --in-place        make changes to files in place\n  -q, --quiet           output nothing and set return value\n  -r, --recursive       run recursively over directories\n  -l START-END, --lines START-END\n                        range of lines to reformat, one-based\n  -e PATTERN, --exclude PATTERN\n                        patterns for files to exclude from formatting\n  --style STYLE         specify formatting style: either a style name (for\n                        example \"pep8\" or \"google\"), or the name of a file\n                        with style settings. The default is pep8 unless a\n                        .style.yapf or setup.cfg or pyproject.toml file\n                        located in the same directory as the source or one of\n                        its parent directories (for stdin, the current\n                        directory is used).\n  --style-help          show style settings and exit; this output can be saved\n                        to .style.yapf to make your settings permanent\n  --no-local-style      don't search for local style definition\n  -p, --parallel        run YAPF in parallel when formatting multiple files.\n  -m, --print-modified  print out file names of modified files\n  -vv, --verbose        print out file names while processing\n```\n\n\n### Return Codes\n\nNormally YAPF returns zero on successful program termination and non-zero\notherwise.\n\nIf `--diff` is supplied, YAPF returns zero when no changes were necessary,\nnon-zero otherwise (including program error). You can use this in a CI workflow\nto test that code has been YAPF-formatted.\n\n### Excluding files from formatting (.yapfignore or pyproject.toml)\n\nIn addition to exclude patterns provided on commandline, YAPF looks for\nadditional patterns specified in a file named `.yapfignore` or `pyproject.toml`\nlocated in the working directory from which YAPF is invoked.\n\n`.yapfignore`'s syntax is similar to UNIX's filename pattern matching:\n\n```\n*       matches everything\n?       matches any single character\n[seq]   matches any character in seq\n[!seq]  matches any character not in seq\n```\n\nNote that no entry should begin with `./`.\n\nIf you use `pyproject.toml`, exclude patterns are specified by `ignore_patterns` key\nin `[tool.yapfignore]` section. For example:\n\n```ini\n[tool.yapfignore]\nignore_patterns = [\n  \"temp/**/*.py\",\n  \"temp2/*.py\"\n]\n```\n\n\nFormatting style\n================\n\nThe formatting style used by YAPF is configurable and there are many \"knobs\"\nthat can be used to tune how YAPF does formatting. See the `style.py` module\nfor the full list.\n\nTo control the style, run YAPF with the `--style` argument. It accepts one of\nthe predefined styles (e.g., `pep8` or `google`), a path to a configuration\nfile that specifies the desired style, or a dictionary of key/value pairs.\n\nThe config file is a simple listing of (case-insensitive) `key = value` pairs\nwith a `[style]` heading. For example:\n\n```ini\n[style]\nbased_on_style = pep8\nspaces_before_comment = 4\nsplit_before_logical_operator = true\n```\n\nThe `based_on_style` setting determines which of the predefined styles this\ncustom style is based on (think of it like subclassing). Four\nstyles are predefined:\n\n- `pep8` (default)\n- `google` (based off of the [Google Python Style Guide](https://github.com/google/styleguide/blob/gh-pages/pyguide.md))\n- `yapf` (for use with Google open source projects)\n- `facebook`\n\nSee `_STYLE_NAME_TO_FACTORY` in [`style.py`](https://github.com/google/yapf/blob/main/yapf/yapflib/style.py) for details.\n\nIt's also possible to do the same on the command line with a dictionary. For\nexample:\n\n```bash\n--style='{based_on_style: pep8, indent_width: 2}'\n```\n\nThis will take the `pep8` base style and modify it to have two space\nindentations.\n\nYAPF will search for the formatting style in the following manner:\n\n1. Specified on the command line\n2. In the `[style]` section of a `.style.yapf` file in either the current\n   directory or one of its parent directories.\n3. In the `[yapf]` section of a `setup.cfg` file in either the current\n   directory or one of its parent directories.\n4. In the `[tool.yapf]` section of a `pyproject.toml` file in either the current\n   directory or one of its parent directories.\n5. In the `[style]` section of a `~/.config/yapf/style` file in your home\n   directory.\n\nIf none of those files are found, the default style PEP8 is used.\n\n\nExample\n=======\n\nAn example of the type of formatting that YAPF can do, it will take this ugly\ncode:\n\n```python\nx = {  'a':37,'b':42,\n\n'c':927}\n\ny = 'hello ''world'\nz = 'hello '+'world'\na = 'hello {}'.format('world')\nclass foo  (     object  ):\n  def f    (self   ):\n    return       37*-+2\n  def g(self, x,y=42):\n      return y\ndef f  (   a ) :\n  return      37+-+a[42-x :  y**3]\n```\n\nand reformat it into:\n\n```python\nx = {'a': 37, 'b': 42, 'c': 927}\n\ny = 'hello ' 'world'\nz = 'hello ' + 'world'\na = 'hello {}'.format('world')\n\n\nclass foo(object):\n    def f(self):\n        return 37 * -+2\n\n    def g(self, x, y=42):\n        return y\n\n\ndef f(a):\n    return 37 + -+a[42 - x:y**3]\n```\n\n\n## Example as a module\n\nThe two main APIs for calling YAPF are `FormatCode` and `FormatFile`, these\nshare several arguments which are described below:\n\n```python\n>>> from yapf.yapflib.yapf_api import FormatCode  # reformat a string of code\n\n>>> formatted_code, changed = FormatCode(\"f ( a = 1, b = 2 )\")\n>>> formatted_code\n'f(a=1, b=2)\\n'\n>>> changed\nTrue\n```\n\nA `style_config` argument: Either a style name or a path to a file that\ncontains formatting style settings. If None is specified, use the default style\nas set in `style.DEFAULT_STYLE_FACTORY`.\n\n```python\n>>> FormatCode(\"def g():\\n  return True\", style_config='pep8')[0]\n'def g():\\n    return True\\n'\n```\n\nA `lines` argument: A list of tuples of lines (ints), [start, end], that we\nwant to format. The lines are 1-based indexed. It can be used by third-party\ncode (e.g., IDEs) when reformatting a snippet of code rather than a whole file.\n\n```python\n>>> FormatCode(\"def g( ):\\n    a=1\\n    b = 2\\n    return a==b\", lines=[(1, 1), (2, 3)])[0]\n'def g():\\n    a = 1\\n    b = 2\\n    return a==b\\n'\n```\n\nA `print_diff` (bool): Instead of returning the reformatted source, return a\ndiff that turns the formatted source into reformatted source.\n\n```diff\n>>> print(FormatCode(\"a==b\", filename=\"foo.py\", print_diff=True)[0])\n--- foo.py (original)\n+++ foo.py (reformatted)\n@@ -1 +1 @@\n-a==b\n+a == b\n```\n\nNote: the `filename` argument for `FormatCode` is what is inserted into the\ndiff, the default is `<unknown>`.\n\n`FormatFile` returns reformatted code from the passed file along with its encoding:\n\n```python\n>>> from yapf.yapflib.yapf_api import FormatFile  # reformat a file\n\n>>> print(open(\"foo.py\").read())  # contents of file\na==b\n\n>>> reformatted_code, encoding, changed = FormatFile(\"foo.py\")\n>>> formatted_code\n'a == b\\n'\n>>> encoding\n'utf-8'\n>>> changed\nTrue\n```\n\nThe `in_place` argument saves the reformatted code back to the file:\n\n```python\n>>> FormatFile(\"foo.py\", in_place=True)[:2]\n(None, 'utf-8')\n\n>>> print(open(\"foo.py\").read())  # contents of file (now fixed)\na == b\n```\n\n\n## Formatting diffs\n\nOptions:\n\n```console\nusage: yapf-diff [-h] [-i] [-p NUM] [--regex PATTERN] [--iregex PATTERN][-v]\n                 [--style STYLE] [--binary BINARY]\n\nThis script reads input from a unified diff and reformats all the changed\nlines. This is useful to reformat all the lines touched by a specific patch.\nExample usage for git/svn users:\n\n  git diff -U0 --no-color --relative HEAD^ | yapf-diff -i\n  svn diff --diff-cmd=diff -x-U0 | yapf-diff -p0 -i\n\nIt should be noted that the filename contained in the diff is used\nunmodified to determine the source file to update. Users calling this script\ndirectly should be careful to ensure that the path in the diff is correct\nrelative to the current working directory.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --in-place        apply edits to files instead of displaying a diff\n  -p NUM, --prefix NUM  strip the smallest prefix containing P slashes\n  --regex PATTERN       custom pattern selecting file paths to reformat\n                        (case sensitive, overrides -iregex)\n  --iregex PATTERN      custom pattern selecting file paths to reformat\n                        (case insensitive, overridden by -regex)\n  -v, --verbose         be more verbose, ineffective without -i\n  --style STYLE         specify formatting style: either a style name (for\n                        example \"pep8\" or \"google\"), or the name of a file\n                        with style settings. The default is pep8 unless a\n                        .style.yapf or setup.cfg or pyproject.toml file\n                        located in the same directory as the source or one of\n                        its parent directories (for stdin, the current\n                        directory is used).\n  --binary BINARY       location of binary to use for YAPF\n```\n\n## Python features not yet supported\n* Python 3.12 – [PEP 695 – Type Parameter Syntax](https://peps.python.org/pep-0695/) – [YAPF #1170](https://github.com/google/yapf/issues/1170)\n* Python 3.12 – [PEP 701 – Syntactic formalization of f-strings](https://peps.python.org/pep-0701/) – [YAPF #1136](https://github.com/google/yapf/issues/1136)\n\n## Knobs\n\n#### `ALIGN_CLOSING_BRACKET_WITH_VISUAL_INDENT`\n\n>    Align closing bracket with visual indentation.\n\n#### `ALLOW_MULTILINE_LAMBDAS`\n\n>    Allow lambdas to be formatted on more than one line.\n\n#### `ALLOW_MULTILINE_DICTIONARY_KEYS`\n\n>    Allow dictionary keys to exist on multiple lines. For example:\n\n```python\n    x = {\n        ('this is the first element of a tuple',\n         'this is the second element of a tuple'):\n             value,\n    }\n```\n\n#### `ALLOW_SPLIT_BEFORE_DEFAULT_OR_NAMED_ASSIGNS`\n\n>    Allow splitting before a default / named assignment in an argument list.\n\n#### `ALLOW_SPLIT_BEFORE_DICT_VALUE`\n\n>    Allow splits before the dictionary value.\n\n#### `ARITHMETIC_PRECEDENCE_INDICATION`\n\n>    Let spacing indicate operator precedence. For example:\n\n```python\n    a = 1 * 2 + 3 / 4\n    b = 1 / 2 - 3 * 4\n    c = (1 + 2) * (3 - 4)\n    d = (1 - 2) / (3 + 4)\n    e = 1 * 2 - 3\n    f = 1 + 2 + 3 + 4\n```\n\n>    will be formatted as follows to indicate precedence:\n\n```python\n    a = 1*2 + 3/4\n    b = 1/2 - 3*4\n    c = (1+2) * (3-4)\n    d = (1-2) / (3+4)\n    e = 1*2 - 3\n    f = 1 + 2 + 3 + 4\n```\n\n#### `BLANK_LINES_AROUND_TOP_LEVEL_DEFINITION`\n\n>    Sets the number of desired blank lines surrounding top-level function and\n>    class definitions. For example:\n\n```python\n    class Foo:\n        pass\n                       # <------ having two blank lines here\n                       # <------ is the default setting\n    class Bar:\n        pass\n```\n\n#### `BLANK_LINE_BEFORE_CLASS_DOCSTRING`\n\n>    Insert a blank line before a class-level docstring.\n\n#### `BLANK_LINE_BEFORE_MODULE_DOCSTRING`\n\n>    Insert a blank line before a module docstring.\n\n#### `BLANK_LINE_BEFORE_NESTED_CLASS_OR_DEF`\n\n>    Insert a blank line before a `def` or `class` immediately nested within\n>    another `def` or `class`. For example:\n\n```python\n    class Foo:\n                       # <------ this blank line\n        def method():\n            pass\n```\n\n#### `BLANK_LINES_BETWEEN_TOP_LEVEL_IMPORTS_AND_VARIABLES`\n\n>    Sets the number of desired blank lines between top-level imports and\n>    variable definitions. Useful for compatibility with tools like isort.\n\n#### `COALESCE_BRACKETS`\n\n>    Do not split consecutive brackets. Only relevant when\n>    `DEDENT_CLOSING_BRACKETS` or `INDENT_CLOSING_BRACKETS` is set. For example:\n\n```python\n    call_func_that_takes_a_dict(\n        {\n            'key1': 'value1',\n            'key2': 'value2',\n        }\n    )\n```\n\n>    would reformat to:\n\n```python\n    call_func_that_takes_a_dict({\n        'key1': 'value1',\n        'key2': 'value2',\n    })\n```\n\n#### `COLUMN_LIMIT`\n\n>    The column limit (or max line-length)\n\n#### `CONTINUATION_ALIGN_STYLE`\n\n>    The style for continuation alignment. Possible values are:\n\n>    - `SPACE`: Use spaces for continuation alignment. This is default\n>      behavior.\n>    - `FIXED`: Use fixed number (`CONTINUATION_INDENT_WIDTH`) of columns\n>      (i.e. `CONTINUATION_INDENT_WIDTH`/`INDENT_WIDTH` tabs or\n>      `CONTINUATION_INDENT_WIDTH` spaces) for continuation alignment.\n>    - `VALIGN-RIGHT`: Vertically align continuation lines to multiple of\n>      `INDENT_WIDTH` columns. Slightly right (one tab or a few spaces) if cannot\n>      vertically align continuation lines with indent characters.\n\n#### `CONTINUATION_INDENT_WIDTH`\n\n>    Indent width used for line continuations.\n\n#### `DEDENT_CLOSING_BRACKETS`\n\n>    Put closing brackets on a separate line, dedented, if the bracketed\n>    expression can't fit in a single line. Applies to all kinds of brackets,\n>    including function definitions and calls. For example:\n\n```python\n    config = {\n        'key1': 'value1',\n        'key2': 'value2',\n    }  # <--- this bracket is dedented and on a separate line\n\n    time_series = self.remote_client.query_entity_counters(\n        entity='dev3246.region1',\n        key='dns.query_latency_tcp',\n        transform=Transformation.AVERAGE(window=timedelta(seconds=60)),\n        start_ts=now()-timedelta(days=3),\n        end_ts=now(),\n    )  # <--- this bracket is dedented and on a separate line\n```\n\n#### `DISABLE_ENDING_COMMA_HEURISTIC`\n\n>    Disable the heuristic which places each list element on a separate line if\n>    the list is comma-terminated.\n>\n>    Note: The behavior of this flag changed in v0.40.3.  Before, if this flag\n>    was true, we would split lists that contained a trailing comma or a\n>    comment.  Now, we have a separate flag, `DISABLE_SPLIT_LIST_WITH_COMMENT`,\n>    that controls splitting when a list contains a comment.  To get the old\n>    behavior, set both flags to true.  More information in\n>    [CHANGELOG.md](CHANGELOG.md#new-disable_split_list_with_comment-flag).\n\n#### `DISABLE_SPLIT_LIST_WITH_COMMENT`\n\n>    Don't put every element on a new line within a list that contains\n>    interstitial comments.\n>\n>    Without this flag (default):\n>\n>    ```\n>    [\n>      a,\n>      b,  #\n>      c\n>    ]\n>    ```\n>\n>    With this flag:\n>\n>    ```\n>    [\n>      a, b,  #\n>      c\n>    ]\n>    ```\n>\n>    This mirrors the behavior of clang-format and is useful for forming\n>    \"logical groups\" of elements in a list.  It also works in function\n>    declarations.\n\n#### `EACH_DICT_ENTRY_ON_SEPARATE_LINE`\n\n>    Place each dictionary entry onto its own line.\n\n#### `FORCE_MULTILINE_DICT`\n\n>    Respect `EACH_DICT_ENTRY_ON_SEPARATE_LINE` even if the line is shorter than\n>    `COLUMN_LIMIT`.\n\n#### `I18N_COMMENT`\n\n>    The regex for an internationalization comment. The presence of this comment\n>    stops reformatting of that line, because the comments are required to be\n>    next to the string they translate.\n\n#### `I18N_FUNCTION_CALL`\n\n>    The internationalization function call names. The presence of this function\n>    stops reformatting on that line, because the string it has cannot be moved\n>    away from the i18n comment.\n\n#### `INDENT_BLANK_LINES`\n\n>    Set to `True` to prefer indented blank lines rather than empty\n\n#### `INDENT_CLOSING_BRACKETS`\n\n>    Put closing brackets on a separate line, indented, if the bracketed\n>    expression can't fit in a single line. Applies to all kinds of brackets,\n>    including function definitions and calls. For example:\n\n```python\n    config = {\n        'key1': 'value1',\n        'key2': 'value2',\n        }  # <--- this bracket is indented and on a separate line\n\n    time_series = self.remote_client.query_entity_counters(\n        entity='dev3246.region1',\n        key='dns.query_latency_tcp',\n        transform=Transformation.AVERAGE(window=timedelta(seconds=60)),\n        start_ts=now()-timedelta(days=3),\n        end_ts=now(),\n        )  # <--- this bracket is indented and on a separate line\n```\n\n#### `INDENT_DICTIONARY_VALUE`\n\n>    Indent the dictionary value if it cannot fit on the same line as the\n>    dictionary key. For example:\n\n```python\n    config = {\n        'key1':\n            'value1',\n        'key2': value1 +\n                value2,\n    }\n```\n\n#### `INDENT_WIDTH`\n\n>    The number of columns to use for indentation.\n\n#### `JOIN_MULTIPLE_LINES`\n\n>    Join short lines into one line. E.g., single line `if` statements.\n\n#### `NO_SPACES_AROUND_SELECTED_BINARY_OPERATORS`\n\n>    Do not include spaces around selected binary operators. For example:\n\n```python\n    1 + 2 * 3 - 4 / 5\n```\n\n>    will be formatted as follows when configured with `*`, `/`:\n\n```python\n    1 + 2*3 - 4/5\n```\n\n#### `SPACE_BETWEEN_ENDING_COMMA_AND_CLOSING_BRACKET`\n\n>    Insert a space between the ending comma and closing bracket of a list, etc.\n\n#### `SPACE_INSIDE_BRACKETS`\n\n    Use spaces inside brackets, braces, and parentheses.  For example:\n\n```python\n        method_call( 1 )\n        my_dict[ 3 ][ 1 ][ get_index( *args, **kwargs ) ]\n        my_set = { 1, 2, 3 }\n```\n\n#### `SPACES_AROUND_DEFAULT_OR_NAMED_ASSIGN`\n\n>    Set to `True` to prefer spaces around the assignment operator for default\n>    or keyword arguments.\n\n#### `SPACES_AROUND_DICT_DELIMITERS`\n\n>    Adds a space after the opening '{' and before the ending '}' dict delimiters.\n\n```python\n        {1: 2}\n```\n\n>    will be formatted as:\n\n```python\n        { 1: 2 }\n```\n\n#### `SPACES_AROUND_LIST_DELIMITERS`\n\n>    Adds a space after the opening '[' and before the ending ']' list delimiters.\n\n```python\n    [1, 2]\n```\n\n>    will be formatted as:\n\n```python\n    [ 1, 2 ]\n```\n\n#### `SPACES_AROUND_POWER_OPERATOR`\n\n>    Set to `True` to prefer using spaces around `**`.\n\n#### `SPACES_AROUND_SUBSCRIPT_COLON`\n\n>    Use spaces around the subscript / slice operator.  For example:\n\n```python\n    my_list[1 : 10 : 2]\n```\n\n##### `SPACES_AROUND_TUPLE_DELIMITERS`\n\n>    Adds a space after the opening '(' and before the ending ')' tuple delimiters.\n\n```python\n    (1, 2, 3)\n```\n\n>    will be formatted as:\n\n```python\n    ( 1, 2, 3 )\n```\n\n#### `SPACES_BEFORE_COMMENT`\n\n>    The number of spaces required before a trailing comment.\n>    This can be a single value (representing the number of spaces\n>    before each trailing comment) or list of values (representing\n>    alignment column values; trailing comments within a block will\n>    be aligned to the first column value that is greater than the maximum\n>    line length within the block).\n\n> **Note:** Lists of values may need to be quoted in some contexts\n> (eg. shells or editor config files).\n\n>    For example, with `spaces_before_comment=5`:\n\n```python\n    1 + 1 # Adding values\n```\n\n>    will be formatted as:\n\n```python\n    1 + 1     # Adding values <-- 5 spaces between the end of the statement and comment\n```\n\n>    with `spaces_before_comment=\"15, 20\"`:\n\n```python\n    1 + 1 # Adding values\n    two + two # More adding\n\n    longer_statement # This is a longer statement\n    short # This is a shorter statement\n\n    a_very_long_statement_that_extends_beyond_the_final_column # Comment\n    short # This is a shorter statement\n```\n\n>    will be formatted as:\n\n```python\n    1 + 1          # Adding values <-- end of line comments in block aligned to col 15\n    two + two      # More adding\n\n    longer_statement    # This is a longer statement <-- end of line comments in block aligned to col 20\n    short               # This is a shorter statement\n\n    a_very_long_statement_that_extends_beyond_the_final_column  # Comment <-- the end of line comments are aligned based on the line length\n    short                                                       # This is a shorter statement\n```\n\n#### `SPLIT_ALL_COMMA_SEPARATED_VALUES`\n\n>    If a comma separated list (`dict`, `list`, `tuple`, or function `def`) is\n>    on a line that is too long, split such that each element is on a separate\n>    line.\n\n#### `SPLIT_ALL_TOP_LEVEL_COMMA_SEPARATED_VALUES`\n\n>    Variation on `SPLIT_ALL_COMMA_SEPARATED_VALUES` in which, if a\n>    subexpression with a comma fits in its starting line, then the\n>    subexpression is not split. This avoids splits like the one for\n>    `b` in this code:\n\n```python\n    abcdef(\n        aReallyLongThing: int,\n        b: [Int,\n            Int])\n```\n\n>    with the new knob this is split as:\n\n```python\n    abcdef(\n        aReallyLongThing: int,\n        b: [Int, Int])\n```\n\n#### `SPLIT_ARGUMENTS_WHEN_COMMA_TERMINATED`\n\n>    Split before arguments if the argument list is terminated by a comma.\n\n#### `SPLIT_BEFORE_ARITHMETIC_OPERATOR`\n\n>    Set to `True` to prefer splitting before `+`, `-`, `*`, `/`, `//`, or `@`\n>    rather than after.\n\n#### `SPLIT_BEFORE_BITWISE_OPERATOR`\n\n>    Set to `True` to prefer splitting before `&`, `|` or `^` rather than after.\n\n#### `SPLIT_BEFORE_CLOSING_BRACKET`\n\n>    Split before the closing bracket if a `list` or `dict` literal doesn't fit\n>    on a single line.\n\n#### `SPLIT_BEFORE_DICT_SET_GENERATOR`\n\n>    Split before a dictionary or set generator (`comp_for`). For example, note\n>    the split before the `for`:\n\n```python\n    foo = {\n        variable: 'Hello world, have a nice day!'\n        for variable in bar if variable != 42\n    }\n```\n\n#### `SPLIT_BEFORE_DOT`\n\n>    Split before the `.` if we need to split a longer expression:\n\n```python\n    foo = ('This is a really long string: {}, {}, {}, {}'.format(a, b, c, d))\n```\n\n>    would reformat to something like:\n\n```python\n    foo = ('This is a really long string: {}, {}, {}, {}'\n           .format(a, b, c, d))\n```\n\n#### `SPLIT_BEFORE_EXPRESSION_AFTER_OPENING_PAREN`\n\n>    Split after the opening paren which surrounds an expression if it doesn't\n>    fit on a single line.\n\n#### `SPLIT_BEFORE_FIRST_ARGUMENT`\n\n>    If an argument / parameter list is going to be split, then split before the\n>    first argument.\n\n#### `SPLIT_BEFORE_LOGICAL_OPERATOR`\n\n>    Set to `True` to prefer splitting before `and` or `or` rather than after.\n\n#### `SPLIT_BEFORE_NAMED_ASSIGNS`\n\n>    Split named assignments onto individual lines.\n\n#### `SPLIT_COMPLEX_COMPREHENSION`\n\n>    For list comprehensions and generator expressions with multiple clauses\n>    (e.g multiple `for` calls, `if` filter expressions) and which need to be\n>    reflowed, split each clause onto its own line. For example:\n\n```python\n    result = [\n        a_var + b_var for a_var in xrange(1000) for b_var in xrange(1000)\n        if a_var % b_var]\n```\n\n>    would reformat to something like:\n\n```python\n    result = [\n        a_var + b_var\n        for a_var in xrange(1000)\n        for b_var in xrange(1000)\n        if a_var % b_var]\n```\n\n#### `SPLIT_PENALTY_AFTER_OPENING_BRACKET`\n\n>    The penalty for splitting right after the opening bracket.\n\n#### `SPLIT_PENALTY_AFTER_UNARY_OPERATOR`\n\n>    The penalty for splitting the line after a unary operator.\n\n#### `SPLIT_PENALTY_ARITHMETIC_OPERATOR`\n\n>    The penalty of splitting the line around the `+`, `-`, `*`, `/`, `//`, `%`,\n>    and `@` operators.\n\n#### `SPLIT_PENALTY_BEFORE_IF_EXPR`\n\n>    The penalty for splitting right before an `if` expression.\n\n#### `SPLIT_PENALTY_BITWISE_OPERATOR`\n\n>    The penalty of splitting the line around the `&`, `|`, and `^` operators.\n\n#### `SPLIT_PENALTY_COMPREHENSION`\n\n>    The penalty for splitting a list comprehension or generator expression.\n\n#### `SPLIT_PENALTY_EXCESS_CHARACTER`\n\n>    The penalty for characters over the column limit.\n\n#### `SPLIT_PENALTY_FOR_ADDED_LINE_SPLIT`\n\n>    The penalty incurred by adding a line split to the logical line. The more\n>    line splits added the higher the penalty.\n\n#### `SPLIT_PENALTY_IMPORT_NAMES`\n\n>    The penalty of splitting a list of `import as` names. For example:\n\n```python\n    from a_very_long_or_indented_module_name_yada_yad import (long_argument_1,\n                                                              long_argument_2,\n                                                              long_argument_3)\n```\n\n>    would reformat to something like:\n\n```python\n    from a_very_long_or_indented_module_name_yada_yad import (\n        long_argument_1, long_argument_2, long_argument_3)\n```\n\n#### `SPLIT_PENALTY_LOGICAL_OPERATOR`\n\n>    The penalty of splitting the line around the `and` and `or` operators.\n\n#### `USE_TABS`\n\n>    Use the Tab character for indentation.\n\n\n## (Potentially) Frequently Asked Questions\n\n### Why does YAPF destroy my awesome formatting?\n\nYAPF tries very hard to get the formatting correct. But for some code, it won't\nbe as good as hand-formatting. In particular, large data literals may become\nhorribly disfigured under YAPF.\n\nThe reasons for this are manyfold. In short, YAPF is simply a tool to help\nwith development. It will format things to coincide with the style guide, but\nthat may not equate with readability.\n\nWhat can be done to alleviate this situation is to indicate regions YAPF should\nignore when reformatting something:\n\n```python\n# yapf: disable\nFOO = {\n    # ... some very large, complex data literal.\n}\n\nBAR = [\n    # ... another large data literal.\n]\n# yapf: enable\n```\n\nYou can also disable formatting for a single literal like this:\n\n```python\nBAZ = {\n    (1, 2, 3, 4),\n    (5, 6, 7, 8),\n    (9, 10, 11, 12),\n}  # yapf: disable\n```\n\nTo preserve the nice dedented closing brackets, use the\n`dedent_closing_brackets` in your style. Note that in this case all\nbrackets, including function definitions and calls, are going to use\nthat style.  This provides consistency across the formatted codebase.\n\n### Why Not Improve Existing Tools?\n\nWe wanted to use clang-format's reformatting algorithm. It's very powerful and\ndesigned to come up with the best formatting possible. Existing tools were\ncreated with different goals in mind, and would require extensive modifications\nto convert to using clang-format's algorithm.\n\n### Can I Use YAPF In My Program?\n\nPlease do! YAPF was designed to be used as a library as well as a command line\ntool. This means that a tool or IDE plugin is free to use YAPF.\n\n### I still get non-PEP8 compliant code! Why?\n\nYAPF tries very hard to be fully PEP 8 compliant. However, it is paramount\nto not risk altering the semantics of your code. Thus, YAPF tries to be as\nsafe as possible and does not change the token stream\n(e.g., by adding parentheses).\nAll these cases however, can be easily fixed manually. For instance,\n\n```python\nfrom my_package import my_function_1, my_function_2, my_function_3, my_function_4, my_function_5\n\nFOO = my_variable_1 + my_variable_2 + my_variable_3 + my_variable_4 + my_variable_5 + my_variable_6 + my_variable_7 + my_variable_8\n```\n\nwon't be split, but you can easily get it right by just adding parentheses:\n\n```python\nfrom my_package import (my_function_1, my_function_2, my_function_3,\n                        my_function_4, my_function_5)\n\nFOO = (my_variable_1 + my_variable_2 + my_variable_3 + my_variable_4 +\n       my_variable_5 + my_variable_6 + my_variable_7 + my_variable_8)\n```\n\n\n## Gory Details\n\n### Algorithm Design\n\nThe main data structure in YAPF is the `LogicalLine` object. It holds a list\nof `FormatToken`\\s, that we would want to place on a single line if there\nwere no column limit. An exception being a comment in the middle of an\nexpression statement will force the line to be formatted on more than one line.\nThe formatter works on one `LogicalLine` object at a time.\n\nAn `LogicalLine` typically won't affect the formatting of lines before or\nafter it. There is a part of the algorithm that may join two or more\n`LogicalLine`\\s into one line. For instance, an if-then statement with a\nshort body can be placed on a single line:\n\n```python\nif a == 42: continue\n```\n\nYAPF's formatting algorithm creates a weighted tree that acts as the solution\nspace for the algorithm. Each node in the tree represents the result of a\nformatting decision --- i.e., whether to split or not to split before a token.\nEach formatting decision has a cost associated with it. Therefore, the cost is\nrealized on the edge between two nodes. (In reality, the weighted tree doesn't\nhave separate edge objects, so the cost resides on the nodes themselves.)\n\nFor example, take the following Python code snippet. For the sake of this\nexample, assume that line (1) violates the column limit restriction and needs to\nbe reformatted.\n\n```python\ndef xxxxxxxxxxx(aaaaaaaaaaaa, bbbbbbbbb, cccccccc, dddddddd, eeeeee):  # 1\n    pass                                                               # 2\n```\n\nFor line (1), the algorithm will build a tree where each node (a\n`FormattingDecisionState` object) is the state of the line at that token given\nthe decision to split before the token or not. Note: the `FormatDecisionState`\nobjects are copied by value so each node in the graph is unique and a change in\none doesn't affect other nodes.\n\nHeuristics are used to determine the costs of splitting or not splitting.\nBecause a node holds the state of the tree up to a token's insertion, it can\neasily determine if a splitting decision will violate one of the style\nrequirements. For instance, the heuristic is able to apply an extra penalty to\nthe edge when not splitting between the previous token and the one being added.\n\nThere are some instances where we will never want to split the line, because\ndoing so will always be detrimental (i.e., it will require a backslash-newline,\nwhich is very rarely desirable). For line (1), we will never want to split the\nfirst three tokens: `def`, `xxxxxxxxxxx`, and `(`. Nor will we want to\nsplit between the `)` and the `:` at the end. These regions are said to be\n\"unbreakable.\" This is reflected in the tree by there not being a \"split\"\ndecision (left hand branch) within the unbreakable region.\n\nNow that we have the tree, we determine what the \"best\" formatting is by finding\nthe path through the tree with the lowest cost.\n\nAnd that's it!\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "pylintrc",
          "type": "blob",
          "size": 12.8291015625,
          "content": "[MASTER]\n\n# Specify a configuration file.\n#rcfile=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Add files or directories to the blacklist. They should be base names, not\n# paths.\nignore=CVS\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n# Use multiple processes to speed up Pylint.\njobs=1\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=no\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code\nextension-pkg-whitelist=\n\n# Allow optimization of some AST trees. This will activate a peephole AST\n# optimizer, which will apply various small optimizations. For instance, it can\n# be used to obtain the result of joining multiple strings with the addition\n# operator. Joining a lot of strings can lead to a maximum recursion error in\n# Pylint and this flag can prevent that. It has one side effect, the resulting\n# AST will be different than the one from reality.\noptimize-ast=no\n\n\n[MESSAGES CONTROL]\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED\nconfidence=\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once). See also the \"--disable\" option for examples.\n#enable=\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once).You can also use \"--disable=all\" to\n# disable everything first and then re-enable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use\"--disable=all --enable=classes\n# --disable=W\"\ndisable=\n    # disabled by me,\n    locally-disabled,\n    missing-docstring,\n    fixme,\n    # disabled by default,\n    import-star-module-level,\n    old-octal-literal,\n    oct-method,\n    print-statement,\n    unpacking-in-except,\n    parameter-unpacking,\n    backtick,\n    old-raise-syntax,\n    old-ne-operator,\n    long-suffix,\n    dict-view-method,\n    dict-iter-method,\n    metaclass-assignment,\n    next-method-called,\n    raising-string,\n    indexing-exception,\n    raw_input-builtin,\n    long-builtin,\n    file-builtin,\n    execfile-builtin,\n    coerce-builtin,\n    cmp-builtin,\n    buffer-builtin,\n    basestring-builtin,\n    apply-builtin,\n    filter-builtin-not-iterating,\n    using-cmp-argument,\n    useless-suppression,\n    range-builtin-not-iterating,\n    suppressed-message,\n    no-absolute-import,\n    old-division,\n    cmp-method,\n    reload-builtin,\n    zip-builtin-not-iterating,\n    intern-builtin,\n    unichr-builtin,\n    reduce-builtin,\n    standarderror-builtin,\n    unicode-builtin,\n    xrange-builtin,\n    coerce-method,\n    delslice-method,\n    getslice-method,\n    setslice-method,\n    input-builtin,\n    round-builtin,\n    hex-method,\n    nonzero-method,\n    map-builtin-not-iterating,\n\n\n[REPORTS]\n\n# Set the output format. Available formats are text, parseable, colorized, msvs\n# (visual studio) and html. You can also give a reporter class, eg\n# mypackage.mymodule.MyReporterClass.\noutput-format=text\n\n# Put messages in a separate file for each module / package specified on the\n# command line instead of printing them on stdout. Reports (if any) will be\n# written in a file name \"pylint_global.[txt|html]\".\nfiles-output=no\n\n# Tells whether to display a full report or only the messages\nreports=yes\n\n# Python expression which should return a note less than 10 (10 is the highest\n# note). You have access to the variables errors warning, statement which\n# respectively contain the number of errors / warnings messages and the total\n# number of statements analyzed. This is used by the global evaluation report\n# (RP0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details\n#msg-template=\n\n\n[FORMAT]\n\n# Maximum number of characters on a single line.\nmax-line-length=100\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=no\n\n# List of optional constructs for which whitespace checking is disabled. `dict-\n# separator` is used to allow tabulation in dicts, etc.: {1  : 1,\\n222: 2}.\n# `trailing-comma` allows a space between comma and closing bracket: (a, ).\n# `empty-line` allows space-only lines.\nno-space-check=trailing-comma,dict-separator\n\n# Maximum number of lines in a module\nmax-module-lines=1000\n\n# String used as indentation unit. This is usually \"    \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='  '\n\n# Number of spaces of indent required inside a hanging  or continued line.\nindent-after-paren=4\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\n\n\n[SPELLING]\n\n# Spelling dictionary name. Available dictionaries: none. To make it working\n# install python-enchant package.\nspelling-dict=\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# A path to a file that contains private dictionary; one word per line.\nspelling-private-dict-file=\n\n# Tells whether to store unknown words to indicated private dictionary in\n# --spelling-private-dict-file option instead of raising a message.\nspelling-store-unknown-words=no\n\n\n[LOGGING]\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format\nlogging-modules=logging\n\n\n[BASIC]\n\n# List of builtins function names that should not be used, separated by a comma\nbad-functions=map,filter,input\n\n# Good variable names which should always be accepted, separated by a comma\ngood-names=i,e,s,_,fd,fp\n\n# Bad variable names which should always be refused, separated by a comma\nbad-names=foo,bar,baz,toto,tutu,tata\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Include a hint for the correct naming format with invalid-name\ninclude-naming-hint=no\n\n# Regular expression matching correct function names\n# original:\n#function-rgx=[a-z_][a-z0-9_]{2,30}$\nfunction-rgx=[a-zA-Z_][a-zA-Z0-9_]{2,40}$\n\n# Naming hint for function names\nfunction-name-hint=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression matching correct variable names\nvariable-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Naming hint for variable names\nvariable-name-hint=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression matching correct constant names\n# original:\n#const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$\nconst-rgx=(([a-zA-Z_][a-zA-Z0-9_]*)|(__.*__))$\n\n# Naming hint for constant names\nconst-name-hint=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n\n# Regular expression matching correct attribute names\nattr-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Naming hint for attribute names\nattr-name-hint=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression matching correct argument names\nargument-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Naming hint for argument names\nargument-name-hint=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression matching correct class attribute names\n# original:\n#class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\nclass-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,40}|(__.*__))$\n\n# Naming hint for class attribute names\nclass-attribute-name-hint=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n\n# Regular expression matching correct inline iteration names\ninlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$\n\n# Naming hint for inline iteration names\ninlinevar-name-hint=[A-Za-z_][A-Za-z0-9_]*$\n\n# Regular expression matching correct class names\n# original:\n#class-rgx=[A-Z_][a-zA-Z0-9]+$\nclass-rgx=[a-zA-Z_][a-zA-Z0-9]+$\n\n# Naming hint for class names\nclass-name-hint=[A-Z_][a-zA-Z0-9]+$\n\n# Regular expression matching correct module names\nmodule-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n\n# Naming hint for module names\nmodule-name-hint=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n\n# Regular expression matching correct method names\n# original:\n#method-rgx=[a-z_][a-z0-9_]{2,30}$\nmethod-rgx=[a-zA-Z_][a-zA-Z0-9_]{2,40}$\n\n# Naming hint for method names\nmethod-name-hint=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=^_\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=-1\n\n\n[ELIF]\n\n# Maximum number of nested blocks for function / method body\nmax-nested-blocks=5\n\n\n[SIMILARITIES]\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=no\n\n\n[TYPECHECK]\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis. It\n# supports qualified module names, as well as Unix pattern matching.\nignored-modules=\n\n# List of classes names for which member attributes should not be checked\n# (useful for classes with attributes dynamically set). This supports can work\n# with qualified names.\nignored-classes=\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,XXX,TODO\n\n\n[VARIABLES]\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# A regular expression matching the name of dummy variables (i.e. expectedly\n# not used).\ndummy-variables-rgx=_$|dummy\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid to define new builtins when possible.\nadditional-builtins=\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,_cb\n\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,__new__,setUp\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=mcs\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,_fields,_replace,_source,_make\n\n\n[DESIGN]\n\n# Maximum number of arguments for function / method\nmax-args=5\n\n# Argument names that match this expression will be ignored. Default to name\n# with leading underscore\nignored-argument-names=_.*\n\n# Maximum number of locals for function / method body\nmax-locals=15\n\n# Maximum number of return / yield for function / method body\nmax-returns=6\n\n# Maximum number of branch for function / method body\nmax-branches=12\n\n# Maximum number of statements in function / method body\nmax-statements=50\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=7\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n# Maximum number of boolean expressions in a if statement\nmax-bool-expr=5\n\n\n[IMPORTS]\n\n# Deprecated modules which should not be used, separated by a comma\ndeprecated-modules=regsub,TERMIOS,Bastion,rexec\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled)\nimport-graph=\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled)\next-import-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled)\nint-import-graph=\n\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when being caught. Defaults to\n# \"Exception\"\novergeneral-exceptions=Exception\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.9775390625,
          "content": "[build-system]\nrequires = [\"setuptools>=58.5.0\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"yapf\"\ndescription = \"A formatter for Python code\"\nauthors = [{ name = \"Google Inc.\" }]\nmaintainers = [{ name = \"Bill Wendling\", email = \"morbo@google.com\" }]\ndynamic = [\"version\"]\nlicense = { file = \"LICENSE\" }\nreadme = \"README.md\"\nrequires-python = \">=3.7\"\nclassifiers = [\n    'Development Status :: 4 - Beta',\n    'Environment :: Console',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: Apache Software License',\n    'Operating System :: OS Independent',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 3 :: Only',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3.10',\n    'Programming Language :: Python :: 3.11',\n    'Topic :: Software Development :: Libraries :: Python Modules',\n    'Topic :: Software Development :: Quality Assurance',\n]\ndependencies = ['platformdirs>=3.5.1', 'tomli>=2.0.1; python_version<\"3.11\"']\n\n[project.scripts]\nyapf = \"yapf:run_main\"\nyapf-diff = \"yapf_third_party.yapf_diff.yapf_diff:main\"\n\n[project.urls]\n# https://daniel.feldroy.com/posts/2023-08-pypi-project-urls-cheatsheet\nHome = 'https://github.com/google/yapf'\nChangelog = 'https://github.com/google/yapf/blob/main/CHANGELOG.md'\nDocs = 'https://github.com/google/yapf/blob/main/README.md#yapf'\nIssues = 'https://github.com/google/yapf/issues'\n\n[tool.distutils.bdist_wheel]\npython_tag = \"py3\"\n\n[tool.setuptools]\ninclude-package-data = true\npackage-dir = { yapf_third_party = 'third_party/yapf_third_party' }\n\n[tool.setuptools.dynamic]\nversion = { attr = \"yapf._version.__version__\" }\n\n[tool.setuptools.packages.find]\nwhere = [\".\", 'third_party']\ninclude = [\"yapf*\", 'yapftests*']\n\n[tool.setuptools.package-data]\nyapf_third_party = [\n    'yapf_diff/LICENSE',\n    '_ylib2to3/Grammar.txt',\n    '_ylib2to3/PatternGrammar.txt',\n    '_ylib2to3/LICENSE',\n]\n"
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.34765625,
          "content": "[tox]\nrequires =\n    tox<4\n    tox-pyenv\n    tox-wheel\nenvlist = py37,py38,py39,py310,py311,py312\n# tox-wheel alias for `wheel_pep517 = true`\nisolated_build = True\ndistshare = ./dist\n\n[testenv]\nwheel = True\nwheel_build_env = bdist_wheel\ncommands = python -m unittest discover -p '*_test.py' yapftests/\n\n[testenv:bdist_wheel]\n\n[testenv:sdist]\nwheel = False\n"
        },
        {
          "name": "yapf",
          "type": "tree",
          "content": null
        },
        {
          "name": "yapftests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}