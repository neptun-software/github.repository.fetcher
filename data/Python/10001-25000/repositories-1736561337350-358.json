{
  "metadata": {
    "timestamp": 1736561337350,
    "page": 358,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "secdev/scapy",
      "stars": 10955,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 1.6982421875,
          "content": "environment:\n  # This key is encrypted using secdev's appveyor private key,\n  # dissected only on master builds (not PRs) and is used during\n  # npcap OEM installation\n  npcap_oem_key:\n    secure: d120KTZBsVnzZ+pFPLPEOTOkyJxTVRjhbDJn9L+RYnM=\n  # Python versions that will be tested\n  # Note: it defines variables that can be used later\n  matrix:\n    - PYTHON: \"C:\\\\Python312-x64\"\n      PYTHON_VERSION: \"3.12.x\"\n      PYTHON_ARCH: \"64\"\n      TOXENV: \"py312-windows\"\n      UT_FLAGS: \"-K scanner\"\n    - PYTHON: \"C:\\\\Python312-x64\"\n      PYTHON_VERSION: \"3.12.x\"\n      PYTHON_ARCH: \"64\"\n      TOXENV: \"py312-windows\"\n      UT_FLAGS: \"-k scanner\"\n\n# There is no build phase for Scapy\nbuild: off\n\ninstall:\n  # Log some debug info\n  - ver\n  # Install the npcap, windump and wireshark suites\n  - ps: .\\.config\\appveyor\\InstallNpcap.ps1\n  - ps: .\\.config\\appveyor\\InstallWindumpNpcap.ps1\n  # Installs Wireshark 3.0 (and its dependencies)\n  # https://github.com/mkevenaar/chocolatey-packages/issues/16\n  - choco install -n KB3033929 KB2919355 kb2999226\n  - choco install -y wireshark\n  # Install Python modules\n  # https://github.com/tox-dev/tox/issues/791\n  - \"%PYTHON%\\\\python -m pip install virtualenv --upgrade\"\n  - \"%PYTHON%\\\\python -m pip install tox coverage\"\n\ntest_script:\n  # Set environment variables\n  - set PYTHONPATH=%APPVEYOR_BUILD_FOLDER%\n  - set PATH=%APPVEYOR_BUILD_FOLDER%;C:\\Program Files\\Wireshark\\;C:\\Program Files\\Windump\\;%PATH%\n  # - set TOX_PARALLEL_NO_SPINNER=1\n  \n  # Main unit tests\n  - \"%PYTHON%\\\\python -m tox -- %UT_FLAGS%\"\n\nafter_test:\n  # Run codecov\n  - ps: $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe -Outfile codecov.exe\n  - codecov.exe\n"
        },
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 2.08203125,
          "content": "# This file contains the list of commits that should be excluded from\n# git blame. Read more informations on:\n# https://docs.github.com/en/repositories/working-with-files/using-files/viewing-a-file#ignore-commits-in-the-blame-view\n\n# PEPin - https://github.com/secdev/scapy/issues/1277\n# E231 - missing whitespace after ','\ne7365b2baeded1a0e1e3b59bc0ad14a78d6e3086\n# E30* - Incorrect number of blank lines\nb770bbc58c26437b354c0bd21dc4e2fcfa3abfdf\n# E20* - Incorrect number of whitespace\n6861a35d8ed4466df7b2ff82341e60caf9ff869a\n# E12* - visual indent\n275ad3246b5231bb046a66bcfdf3654d67fdea20\n# W29* - useless whitespaces\n453f2592f7b6f2b8677619769f8427932894dc1c\n# E251 - unexpected spaces around keyword / parameter equals\n203254afd771b42ccf0fcca96ba92dc4075cfe4a\n# E26 - comments\nb7a3db73dfd17ec1e7bbace8d52464982bf8ea8d\n# E1 - incorrect indentation\nf2f1de742aa36167e2c86247a26ed5e7393366ea\n#  F821 - undefined name 'name' \nf8525ea9f17cedf148febcab8d1dab51ddca9afe\n# E2* - whitespaces errors\n1c2fe99c131bb05e009896410766371a2f870175\n# E71* - tests syntax \n927c157b58918d5fdce9714a3c35627339cc8657\n# F841 - local variable 'name' is assigned to but never used \ndbe409531a22d1245cf4669f72a425b42c83b0db\n# PEPin several fixes\n93232490193ca2b59e3b1425131913d28f408f7a\n# E501 - line too long (> 79 characters)\ne89d8965748439adc253714316de7a9a35b8bd73\n# F601 - dictionary key repeated with different values\n0fd7d76550e56831f887664202d743846d3619dd\n# F811 - redefinition of unused variable/class/...\n10454d1ca243d0fd8d2ab4a148d688e3ea916e49\n# E402 - module level import not at top of file\n0f4a904d2801e8bbbc82880345ad453ceb6ee34f\n# E722 - do not use bare except\na35575ff22da176a8b515405faea9a689462da0c\n# E741 - ambiguous variable name 'l'\n7c61676aef950ca268eac480902dd91cb0abe3a4\n# F405 -  variable/function/... may be undefined, or defined from star\n8773983edb0336db7aa84777dee2aa9892508418\n# F401 - 'module' imported but unused\na58e1b90a704c394216a0b5a864a50931754bdf7\n# W502 - line break before binary operator\n9687222c3f0af6ef89ecfe15e5b983e1f7b5b31e\n# E275 - Missing whitespace after keyword\n08b1f9d67c8e716fd44036a027bdc90dcb9fcfdf\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0625,
          "content": "scapy/__init__.py\texport-subst\n* text=auto\n*.bat text eol=crlf \n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.189453125,
          "content": "*.pyc\n*.pyo\ndist/\nbuild/\nMANIFEST\n*.egg-info/\ntest/*.html\n.coverage*\ncoverage.xml\n.tox\n.ipynb_checkpoints\n.mypy_cache\n.vscode\n.DS_Store\n[.]venv/\n__pycache__/\ndoc/scapy/_build\ndoc/scapy/api\n.idea"
        },
        {
          "name": ".packit.yml",
          "type": "blob",
          "size": 2.1826171875,
          "content": "---\n# Docs: https://packit.dev/docs\n\nspecfile_path: .packit_rpm/scapy.spec\nfiles_to_sync:\n  - .packit.yml\n  - src: .packit_rpm/scapy.spec\n    dest: scapy.spec\nupstream_package_name: scapy\ndownstream_package_name: scapy\nupstream_tag_template: \"v{version}\"\nsrpm_build_deps: []\n\nactions:\n  post-upstream-clone:\n    # Use the Fedora Rawhide specfile\n    - \"git clone https://src.fedoraproject.org/rpms/scapy .packit_rpm --depth=1\"\n    # Drop the \"sources\" file so rebase-helper doesn't think we're a dist-git\n    - \"rm -fv .packit_rpm/sources\"\n    - \"sed -i '/^# check$/a%check\\\\nOPENSSL_CONF=$(python3 ./.config/ci/openssl.py) ./test/run_tests -c test/configs/linux.utsc -K ci_only -K scanner' .packit_rpm/scapy.spec\"\n    - \"sed -i '/^BuildArch/aBuildRequires: can-utils' .packit_rpm/scapy.spec\"\n    - \"sed -i '/^BuildArch/aBuildRequires: libpcap' .packit_rpm/scapy.spec\"\n    - \"sed -i '/^BuildArch/aBuildRequires: openssl' .packit_rpm/scapy.spec\"\n    - \"sed -i '/^BuildArch/aBuildRequires: tcpdump' .packit_rpm/scapy.spec\"\n    - \"sed -i '/^BuildArch/aBuildRequires: wireshark' .packit_rpm/scapy.spec\"\n    - \"sed -i '/^BuildArch/aBuildRequires: python3-ipython' .packit_rpm/scapy.spec\"\n    - \"sed -i '/^BuildArch/aBuildRequires: python3-brotli' .packit_rpm/scapy.spec\"\n    - \"sed -i '/^BuildArch/aBuildRequires: python3-can' .packit_rpm/scapy.spec\"\n    - \"sed -i '/^BuildArch/aBuildRequires: python3-coverage' .packit_rpm/scapy.spec\"\n    - \"sed -i '/^BuildArch/aBuildRequires: python3-cryptography' .packit_rpm/scapy.spec\"\n    - \"sed -i '/^BuildArch/aBuildRequires: python3-tkinter' .packit_rpm/scapy.spec\"\n    - \"sed -i '/^BuildArch/aBuildRequires: python3-zstandard' .packit_rpm/scapy.spec\"\n    - \"sed -i '/^BuildArch/aBuildRequires: samba' .packit_rpm/scapy.spec\"\n    - \"sed -i '/^BuildArch/aBuildRequires: samba-client' .packit_rpm/scapy.spec\"\n\njobs:\n- job: copr_build\n  trigger: pull_request\n  manual_trigger: true\n  enable_net: true\n  targets:\n  - fedora-latest-stable-aarch64\n  - fedora-latest-stable-i386\n  - fedora-latest-stable-ppc64le\n  - fedora-latest-stable-s390x\n  - fedora-latest-stable-x86_64\n  - fedora-rawhide-aarch64\n  - fedora-rawhide-i386\n  - fedora-rawhide-ppc64le\n  - fedora-rawhide-s390x\n  - fedora-rawhide-x86_64\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.5595703125,
          "content": "# Readthedocs config file.\n\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html#supported-settings\n\nversion: 2\n\nformats:\n  - epub\n  - pdf\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.12\"\n  # To show the correct Scapy version, we must unshallow\n  # https://docs.readthedocs.io/en/stable/build-customization.html#unshallow-git-clone\n  jobs:\n    post_checkout:\n      - git fetch --unshallow || true\n\n# https://docs.readthedocs.io/en/stable/config-file/v2.html#python\npython:\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - doc\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.404296875,
          "content": "language: python\ndist: bionic  # OpenSSL 1.1.1\ncache:\n  directories:\n  - $HOME/.cache/pip\n  - .tox\n\njobs:\n    include:\n        # run custom root tests\n        # isotp\n        - os: linux\n          python: 3.8\n          env:\n            - TOXENV=py38-isotp_kernel_module,codecov\n\ninstall:\n  - bash .config/ci/install.sh\n  - python -c \"from scapy.all import conf; print(repr(conf))\"\n\nscript: bash .config/ci/test.sh\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.9736328125,
          "content": "# How to contribute\n\nContributors are essential to Scapy (as they are to most open source\nprojects). Here is some advice to help you help the project!\n\n## Project objectives\n\nWe try to keep Scapy as powerful as possible, to support as many\nprotocols and platforms as possible, to keep and make the code (and\nthe commit history) as clean as possible.\n\nSince Scapy can be slow and memory consuming, we try to limit CPU and\nmemory usage, particularly in parts of the code often called.\n\n## What to contribute\n\nYou want to spend time working on Scapy but have no (or little)\nidea what to do? You can look for open issues\n[labeled \"contributions wanted\"](https://github.com/secdev/scapy/labels/contributions%20wanted), or look at the [contributions roadmap](https://github.com/secdev/scapy/issues/399)\n\nIf you have any ideas of useful contributions that you cannot (or do\nnot want to) do yourself, open an issue and include\n\"contributions wanted\" in the title.\n\nOnce you have chosen a contribution, open an issue to let other people\nknow you're working on it (or assign the existing issue to yourself)\nand track your progress. You might want to ask whether you're working\nin an appropriate direction, to avoid the frustration of seeing your\ncontribution rejected after a lot of work.\n\n## Reporting issues\n\n### Bugs\n\nIf you have installed Scapy through a package manager (from your Linux\nor BSD system, from PyPI, etc.), please get and install the current\ndevelopment code, and check that the bug still exists before\nsubmitting an issue.\n\nIf you're not sure whether a behavior is a bug or not, submit an issue\nand ask, don't be shy!\n\n### Enhancements / feature requests\n\nIf you want a feature in Scapy, but cannot implement it yourself or\nwant some hints on how to do that, open an issue and include\n\"enhancement\" in the title.\n\nExplain if possible the API you would like to have (e.g., give examples\nof function calls, packet creations, etc.).\n\n## Submitting pull requests\n\n### Coding style & conventions\n\n-   The code should be PEP-8 compliant; you can check your code with\n    [pep8](https://pypi.python.org/pypi/pep8) and the command `tox -e flake8`\n\n-   [Pylint](http://www.pylint.org/) can help you write good Python\n    code (even if respecting Pylint rules is sometimes either too hard\n    or even undesirable; human brain needed!).\n\n-   [Google Python Style Guide](https://google.github.io/styleguide/pyguide.html)\n    is a nice read!\n\n-   Avoid creating unnecessary `list` objects, particularly if they\n    can be huge (e.g., when possible, use `for line in fdesc` instead of\n    `for line in fdesc.readlines()`; more generally prefer generators over\n    lists).\n\n### Tests\n\nPlease consider adding tests for your new features or that trigger the\nbug you are fixing. This will prevent a regression from being\nunnoticed. Do not use the variable `_`  in your tests, as it could break them.\n\nIf you find yourself in a situation where your tests locally succeed  but \nfail if executed on the CI, try to enable the debugging option for the \ndissector by setting `conf.debug_dissector = 1`.\n\n### New protocols\n\nNew protocols can go either in `scapy/layers` or to\n`scapy/contrib`. Protocols in `scapy/layers` should be usually found\non common networks, while protocols in `scapy/contrib` should be\nuncommon or specific.\n\nTo be precise, `scapy/layers` protocols should not be importing `scapy/contrib`\nprotocols, whereas `scapy/contrib` protocols may import both `scapy/contrib` and\n`scapy/layers` protocols.\n\nThe detailed requirements are explained in [Design patterns](https://scapy.readthedocs.io/en/latest/build_dissect.html#design-patterns) on Scapy's doc.\n\n### Features\n\nProtocol-related features should be implemented within the same module\nas the protocol layers(s) (e.g., `traceroute()` is implemented in\n`scapy/layers/inet.py`).\n\nOther features may be implemented in a module (`scapy/modules`) or a\ncontribution (`scapy/contrib`).\n\n### Core\n\nIf you contribute to Scapy's core (e.g., `scapy/base_classes.py`,\n`scapy/packet.py`, etc.), please be very careful with performances and\nmemory footprint, as it is easy to write Python code that wastes\nmemory or CPU cycles.\n\nAs an example, `Packet().__init__()` is called each time a **layer** is\nparsed from a string (during a network capture or a PCAP file\nread). Adding inefficient code here will have a disastrous effect on\nScapy's performances.\n\n### Logging\n\nScapy has an internal logging system based on `logging`.\n\nIn the past, Scapy was generally too verbose on packet dissection,\nleading many new users to disable all logs, which makes it harder for them\nto find real issues afterwards. You should comply with these guidelines to\nmake sure logging in Scapy remains helpful.\n\n-  If you want the log message to only be displayed when using Scapy through\n   the interactive console, use `scapy.error.log_interactive`. You are free to\n   use any log level.\n-  Otherwise, always use `scapy.error.log_runtime`.\n   -  On **packet dissection**, of *packet layers*\n      you should remain **AT OR BELOW the `logging.INFO` level**, unless the\n      issue is critical or tied to security.\n      For instance: \"DNS Decompression loop detected !\" is allowed as WARNING,\n      but \"Could not dissect packet\" or \"Invalid value detected\" are not.\n   -  On **packet build** or **any command** or function that is called by the\n      user or the root program, you are **free and welcomed** to use the WARNING\n      or ERROR levels, to signal that a packet was wrongly built for instance.\n-  If you are working on Scapy's core, you may use: `scapy.error.log_loading`\n   only while Scapy is loading, to display import errors for instance.\n\n\n### Python 2 and 3 compatibility\n\nThe project aims to provide code that works both on Python 2 and Python 3. Therefore, some rules need to be applied to achieve compatibility:\n\n-   byte-string must be defined as `b\"\\x00\\x01\\x02\"`\n-   exceptions must comply with the new Python 3 format: `except SomeError as e:`\n-   lambdas must be written using a single argument when using tuples: use `lambda x, y: x + f(y)` instead of `lambda (x, y): x + f(y)`.\n-   use int instead of long\n-   use list comprehension instead of map() and filter()\n-   `__bool__ = __nonzero__` must be used when declaring `__nonzero__` methods\n-   `__next__ = next` must be used when declaring `next` methods in iterators\n-   `StopIteration` must NOT be used in generators (but it can still be used in iterators)\n-   `io.BytesIO` must be used instead of `StringIO` when using bytes\n-   `__cmp__` must not be used.\n\n### Code review\n\nMaintainers tend to be picky, and you might feel frustrated that your\ncode (which is perfectly working in your use case) is not merged\nfaster.\n\nPlease don't be offended, and keep in mind that maintainers are\nconcerned about code maintainability and readability, commit history\n(we use the history a lot, for example to find regressions or\nunderstand why certain decisions have been made), performances,\nintegration in Scapy, API consistency (so that someone who knows how\nto use Scapy will know how to use your code), etc.\n\n**Thanks for reading, happy hacking!**\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0634765625,
          "content": "include MANIFEST.in\ninclude LICENSE\ninclude run_scapy\nprune test\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.69140625,
          "content": "<!-- start_ppi_description -->\n\n# <img src=\"https://github.com/secdev/scapy/raw/master/doc/scapy/graphics/scapy_logo.png\" width=\"64\" valign=\"middle\" alt=\"Scapy\" />&nbsp;&nbsp; Scapy\n\n[![Scapy unit tests](https://github.com/secdev/scapy/actions/workflows/unittests.yml/badge.svg?branch=master&event=push)](https://github.com/secdev/scapy/actions/workflows/unittests.yml?query=event%3Apush) <!-- ignore_ppi -->\n[![AppVeyor Build status](https://ci.appveyor.com/api/projects/status/os03daotfja0wtp7/branch/master?svg=true)](https://ci.appveyor.com/project/secdev/scapy/branch/master) <!-- ignore_ppi -->\n[![Codecov Status](https://codecov.io/gh/secdev/scapy/branch/master/graph/badge.svg)](https://codecov.io/gh/secdev/scapy) <!-- ignore_ppi -->\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/30ee6772bb264a689a2604f5cdb0437b)](https://www.codacy.com/app/secdev/scapy) <!-- ignore_ppi -->\n[![PyPI Version](https://img.shields.io/pypi/v/scapy.svg)](https://pypi.python.org/pypi/scapy/)\n[![License: GPL v2](https://img.shields.io/badge/License-GPL%20v2-blue.svg)](LICENSE)\n[![Join the chat at https://gitter.im/secdev/scapy](https://badges.gitter.im/secdev/scapy.svg)](https://gitter.im/secdev/scapy) <!-- ignore_ppi -->\n\nScapy is a powerful Python-based interactive packet manipulation program and\nlibrary.\n\nIt is able to forge or decode packets of a wide number of protocols, send them\non the wire, capture them, store or read them using pcap files, match requests\nand replies, and much more. It is designed to allow fast packet prototyping by\nusing default values that work.\n\nIt can easily handle most classical tasks like scanning, tracerouting, probing,\nunit tests, attacks or network discovery (it can replace `hping`, 85% of `nmap`,\n`arpspoof`, `arp-sk`, `arping`, `tcpdump`, `wireshark`, `p0f`, etc.). It also\nperforms very well at a lot of other specific tasks that most other tools can't\nhandle, like sending invalid frames, injecting your own 802.11 frames, combining\ntechniques (VLAN hopping+ARP cache poisoning, VoIP decoding on WEP protected\nchannel, ...), etc.\n\nScapy supports Python 3.7+. It's intended to\nbe cross platform, and runs on many different platforms (Linux, OSX,\n\\*BSD, and Windows).\n\n## Getting started\n\nScapy is usable either as a **shell** or as a **library**.\nFor further details, please head over to [Getting started with Scapy](https://scapy.readthedocs.io/en/latest/introduction.html), which is part of the documentation.\n\n### Shell demo\n\n![Scapy install demo](https://secdev.github.io/files/doc/animation-scapy-install.svg)\n\nScapy can easily be used as an interactive shell to interact with the network.\nThe following example shows how to send an ICMP Echo Request message to\n`github.com`, then display the reply source IP address:\n\n```python\nsudo ./run_scapy\nWelcome to Scapy\n>>> p = IP(dst=\"github.com\")/ICMP()\n>>> r = sr1(p)\nBegin emission:\n.Finished to send 1 packets.\n*\nReceived 2 packets, got 1 answers, remaining 0 packets\n>>> r[IP].src\n'192.30.253.113'\n```\n\n### Resources\n\nThe [documentation](https://scapy.readthedocs.io/en/latest/) contains more\nadvanced use cases, and examples.\n\nOther useful resources:\n\n-   [Scapy in 20 minutes](https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy%20in%2015%20minutes.ipynb)\n-   [Interactive tutorial](https://scapy.readthedocs.io/en/latest/usage.html#interactive-tutorial) (part of the documentation)\n-   [The quick demo: an interactive session](https://scapy.readthedocs.io/en/latest/introduction.html#quick-demo) (some examples may be outdated)\n-   [HTTP/2 notebook](https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb)\n-   [TLS notebooks](https://github.com/secdev/scapy/blob/master/doc/notebooks/tls)\n\n## [Installation](https://scapy.readthedocs.io/en/latest/installation.html)\n\nScapy works without any external Python modules on Linux and BSD like operating\nsystems. On Windows, you need to install some mandatory dependencies as\ndescribed in [the\ndocumentation](http://scapy.readthedocs.io/en/latest/installation.html#windows).\n\nOn most systems, using Scapy is as simple as running the following commands:\n\n```bash\ngit clone https://github.com/secdev/scapy\ncd scapy\n./run_scapy\n```\n\nTo benefit from all Scapy features, such as plotting, you might want to install\nPython modules, such as `matplotlib` or `cryptography`. See the\n[documentation](http://scapy.readthedocs.io/en/latest/installation.html) and\nfollow the instructions to install them.\n\n<!-- stop_ppi_description -->\n\n## License\n\nScapy's code, tests and tools are licensed under GPL v2.\nThe documentation (everything unless marked otherwise in `doc/`, and except the logo) is licensed under CC BY-NC-SA 2.5.\n\n## Contributing\n\nWant to contribute? Great! Please take a few minutes to\n[read this](CONTRIBUTING.md)!\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.392578125,
          "content": "[build-system]\nrequires = [ \"setuptools>=62.0.0\" ]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"scapy\"\ndynamic = [ \"version\", \"readme\" ]\nauthors = [\n    { name=\"Philippe BIONDI\" },\n]\nmaintainers = [\n    { name=\"Pierre LALET\" },\n    { name=\"Gabriel POTTER\" },\n    { name=\"Guillaume VALADON\" },\n    { name=\"Nils WEISS\" },\n]\nlicense = { text=\"GPL-2.0-only\" }\nrequires-python = \">=3.7, <4\"\ndescription = \"Scapy: interactive packet manipulation tool\"\nkeywords = [ \"network\" ]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Environment :: Console\",\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: Information Technology\",\n    \"Intended Audience :: Science/Research\",\n    \"Intended Audience :: System Administrators\",\n    \"Intended Audience :: Telecommunications Industry\",\n    \"License :: OSI Approved :: GNU General Public License v2 (GPLv2)\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n    \"Topic :: Security\",\n    \"Topic :: System :: Networking\",\n    \"Topic :: System :: Networking :: Monitoring\",\n]\n\n[project.urls]\nHomepage = \"https://scapy.net\"\nDownload = \"https://github.com/secdev/scapy/tarball/master\"\nDocumentation = \"https://scapy.readthedocs.io\"\n\"Source Code\" = \"https://github.com/secdev/scapy\"\nChangelog = \"https://github.com/secdev/scapy/releases\"\n\n[project.scripts]\nscapy = \"scapy.main:interact\"\n\n[project.optional-dependencies]\ncli = [ \"ipython\" ]\nall = [\n    \"ipython\",\n    \"pyx\",\n    \"cryptography>=2.0\",\n    \"matplotlib\",\n]\ndoc = [\n    \"sphinx>=7.0.0\",\n    \"sphinx_rtd_theme>=1.3.0\",\n    \"tox>=3.0.0\",\n]\n\n# setuptools specific\n\n[tool.setuptools.package-data]\n\"scapy\" = [\"py.typed\"]\n\n[tool.setuptools.packages.find]\ninclude = [\n    \"scapy*\",\n]\nexclude = [\n    \"test*\",\n    \"doc*\",\n]\n\n[tool.setuptools.dynamic]\nversion = { attr=\"scapy.VERSION\" }\n\n# coverage\n\n[tool.coverage.run]\nconcurrency = [ \"thread\", \"multiprocessing\" ]\nsource = [ \"scapy\" ]\nomit = [\n    # Scapy tools\n    \"scapy/tools/\",\n    # Scapy external modules\n    \"scapy/libs/ethertypes.py\",\n    \"scapy/libs/manuf.py\",\n    \"scapy/libs/winpcapy.py\",\n]\n"
        },
        {
          "name": "run_scapy",
          "type": "blob",
          "size": 0.263671875,
          "content": "#! /bin/sh\nDIR=$(dirname \"$0\")\nif [ -z \"$PYTHON\" ]\nthen\n  PYTHON=${PYTHON:-python3}\nfi\n$PYTHON --version > /dev/null 2>&1\nif [ ! $? -eq 0 ]\nthen\n  echo \"WARNING: '$PYTHON' not found, using 'python' instead.\"\n  PYTHON=python\nfi\nPYTHONPATH=$DIR exec \"$PYTHON\" -m scapy $@\n"
        },
        {
          "name": "run_scapy.bat",
          "type": "blob",
          "size": 0.4697265625,
          "content": "@echo off\nsetlocal\nset PYTHONPATH=%~dp0\nREM shift will not work with %*\nset \"_args=%*\"\nIF \"%PYTHON%\" == \"\" set PYTHON=py\nWHERE %PYTHON% >nul 2>&1\nIF %ERRORLEVEL% NEQ 0 set PYTHON=\nIF \"%1\" == \"-3\" (\n  if \"%PYTHON%\" == \"py\" (\n    set \"PYTHON=py -3\"\n  ) else (\n    set PYTHON=python3\n  )\n  set \"_args=%_args:~3%\"\n) else (\n  IF \"%PYTHON%\" == \"\" set PYTHON=python3\n  WHERE %PYTHON% >nul 2>&1\n  IF %ERRORLEVEL% NEQ 0 set PYTHON=python\n)\n%PYTHON% -m scapy %_args%\ntitle Scapy - dead\nPAUSE"
        },
        {
          "name": "scapy",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.625,
          "content": "#! /usr/bin/env python\n\n\"\"\"\nSetuptools setup file for Scapy.\n\"\"\"\n\nimport io\nimport os\nimport sys\n\nif sys.version_info[0] <= 2:\n    raise OSError(\"Scapy no longer supports Python 2 ! Please use Scapy 2.5.0\")\n\ntry:\n    from setuptools import setup\n    from setuptools.command.sdist import sdist\n    from setuptools.command.build_py import build_py\nexcept:\n    raise ImportError(\"setuptools is required to install scapy !\")\n\n\ndef get_long_description():\n    \"\"\"\n    Extract description from README.md, for PyPI's usage\n    \"\"\"\n    def process_ignore_tags(buffer):\n        return \"\\n\".join(\n            x for x in buffer.split(\"\\n\") if \"<!-- ignore_ppi -->\" not in x\n        )\n    try:\n        fpath = os.path.join(os.path.dirname(__file__), \"README.md\")\n        with io.open(fpath, encoding=\"utf-8\") as f:\n            readme = f.read()\n            desc = readme.partition(\"<!-- start_ppi_description -->\")[2]\n            desc = desc.partition(\"<!-- stop_ppi_description -->\")[0]\n            return process_ignore_tags(desc.strip())\n    except IOError:\n        return None\n\n\n# Note: why do we bother including a 'scapy/VERSION' file and doing our\n# own versioning stuff, instead of using more standard methods?\n# Because it's all garbage.\n\n# If you remain fully standard, there's no way\n# of adding the version dynamically, even less when using archives\n# (currently, we're able to add the version anytime someone exports Scapy\n# on github).\n\n# If you use setuptools_scm, you'll be able to have the git tag set into\n# the wheel (therefore the metadata), that you can then retrieve using\n# importlib.metadata, BUT it breaks sdist (source packages), as those\n# don't include metadata.\n\n\ndef _build_version(path):\n    \"\"\"\n    This adds the scapy/VERSION file when creating a sdist and a wheel\n    \"\"\"\n    fn = os.path.join(path, 'scapy', 'VERSION')\n    with open(fn, 'w') as f:\n        f.write(__import__('scapy').VERSION)\n\n\nclass SDist(sdist):\n    \"\"\"\n    Modified sdist to create scapy/VERSION file\n    \"\"\"\n    def make_release_tree(self, base_dir, *args, **kwargs):\n        super(SDist, self).make_release_tree(base_dir, *args, **kwargs)\n        # ensure there's a scapy/VERSION file\n        _build_version(base_dir)\n\n\nclass BuildPy(build_py):\n    \"\"\"\n    Modified build_py to create scapy/VERSION file\n    \"\"\"\n    def build_package_data(self):\n        super(BuildPy, self).build_package_data()\n        # ensure there's a scapy/VERSION file\n        _build_version(self.build_lib)\n\nsetup(\n    cmdclass={'sdist': SDist, 'build_py': BuildPy},\n    data_files=[('share/man/man1', [\"doc/scapy.1\"])],\n    long_description=get_long_description(),\n    long_description_content_type='text/markdown',\n)\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 6.365234375,
          "content": "# Scapy tox configuration file\n# Copyright (C) 2020 Guillaume Valadon <guillaume@valadon.net>\n\n\n# Tox environments:\n# py{version}-{os}-{non_root,root}\n# In our testing, version can be 37 to 312 or py39 for pypy39\n\n[tox]\n# minversion = 4.0\nskip_missing_interpreters = true\n# envlist = default when doing 'tox'\nenvlist = py{37,38,39,310,311,312}-{linux,bsd,windows}-{non_root,root}\n\n# Main tests\n\n[testenv]\ndescription = \"Scapy unit tests\"\nallowlist_externals = sudo\nparallel_show_output = true\npackage = wheel\npassenv =\n    PATH\n    PWD\n    PROGRAMFILES\n    WINDIR\n    SYSTEMROOT\n    OPENSSL_CONF\n    # Used by scapy\n    SCAPY_USE_LIBPCAP\ndeps =\n       ipython\n       cryptography\n       coverage[toml]\n       python-can\n       # disabled on windows because they require c++ dependencies\n       # brotli 1.1.0 broken https://github.com/google/brotli/issues/1072\n       brotli < 1.1.0 ; sys_platform != 'win32'\n       zstandard ; sys_platform != 'win32'\nplatform =\n  linux: linux\n  bsd: (darwin|freebsd|openbsd|netbsd).*\n  windows: win32\ncommands =\n  linux-non_root: {envpython} {env:DISABLE_COVERAGE:-m coverage run} -m scapy.tools.UTscapy -c ./test/configs/linux.utsc -N {posargs}\n  linux-root: sudo -E {envpython} {env:DISABLE_COVERAGE:-m coverage run} -m scapy.tools.UTscapy -c ./test/configs/linux.utsc {posargs}\n  bsd-non_root: {envpython} {env:DISABLE_COVERAGE:-m coverage run} -m scapy.tools.UTscapy -c test/configs/bsd.utsc -K tshark -N {posargs}\n  bsd-root: sudo -E {envpython} {env:DISABLE_COVERAGE:-m coverage run} -m scapy.tools.UTscapy -c test/configs/bsd.utsc -K tshark {posargs}\n  windows: {envpython} {env:DISABLE_COVERAGE:-m coverage run} -m scapy.tools.UTscapy -c test/configs/windows.utsc {posargs}\n  {env:DISABLE_COVERAGE:coverage combine}\n  {env:DISABLE_COVERAGE:coverage xml -i}\n\n# Variants of the main tests\n\n[testenv:py38-isotp_kernel_module]\ndescription = \"Scapy unit tests - ISOTP Linux kernel module\"\nallowlist_externals = sudo\n                      git\n                      bash\n                      lsmod\n                      modprobe\npassenv =\n    PATH\n    PWD\n    PROGRAMFILES\n    WINDIR\n    SYSTEMROOT\ndeps = {[testenv]deps}\ncommands =\n  sudo apt-get -qy install build-essential linux-headers-$(uname -r) linux-modules-extra-$(uname -r)\n  sudo -E modprobe can\n  git clone --depth=1 https://github.com/linux-can/can-utils.git /tmp/can-utils\n  bash -c \"cd /tmp/can-utils; ./autogen.sh; ./configure; make; sudo make install\"\n  git clone --depth=1 https://github.com/hartkopp/can-isotp.git /tmp/can-isotp\n  bash -c \"cd /tmp/can-isotp; make; sudo make modules_install; sudo modprobe can_isotp || sudo insmod ./net/can/can-isotp.ko\" \n  bash -c \"rm -rf /tmp/can-utils /tmp/can-isotp\"\n  lsmod\n  sudo -E {envpython} -m coverage run -m scapy.tools.UTscapy -c ./test/configs/linux.utsc {posargs}\n  coverage combine\n  coverage xml -i\n\n# Test used by upstream pyca/cryptography\n[testenv:cryptography]\ndescription = \"Scapy unit tests - pyca/cryptography variant\"\nsitepackages = true\ndeps =\ncommands =\n  python -c \"import cryptography; print('DEBUG: cryptography %s' % cryptography.__version__)\"\n  python -m scapy.tools.UTscapy -c ./test/configs/cryptography.utsc\n\n# The files listed past the first argument of the sphinx-apidoc command are ignored\n[testenv:apitree]\ndescription = \"Regenerates the API reference doc tree\"\nskip_install = true\nchangedir = {toxinidir}/doc/scapy\ndeps = sphinx\ncommands =\n  sphinx-apidoc -f --no-toc -d 1 --separate --module-first --templatedir=_templates --output-dir api ../../scapy ../../scapy/modules/ ../../scapy/libs/ ../../scapy/tools/ ../../scapy/arch/ ../../scapy/contrib/scada/* ../../scapy/layers/msrpce/raw/ ../../scapy/layers/msrpce/all.py ../../scapy/all.py ../../scapy/layers/all.py ../../scapy/compat.py\n\n\n[testenv:mypy]\ndescription = \"Check Scapy compliance against static typing\"\nskip_install = true\ndeps = mypy==1.7.0\n       typing\ncommands = python .config/mypy/mypy_check.py linux\n           python .config/mypy/mypy_check.py win32\n\n\n[testenv:docs]\ndescription = \"Build the docs\"\ndeps =\nextras = doc\nchangedir = {toxinidir}/doc/scapy\ncommands =\n  sphinx-build -W --keep-going -b html . _build/html\n\n\n# Debug mode\n[testenv:docs2]\ndescription = \"Build the docs without rebuilding the API tree\"\nskip_install = true\nchangedir = {toxinidir}/doc/scapy\ndeps = {[testenv:docs]deps}\nallowlist_externals = sphinx-build\nsetenv =\n  SCAPY_APITREE = 0\ncommands =\n  sphinx-build -W --keep-going -b html . _build/html\n\n\n[testenv:spell]\ndescription = \"Check code for Grammar mistakes\"\nskip_install = true\ndeps = codespell\n# inet6, dhcp6 and the ipynb files contains french: ignore them\ncommands = codespell --ignore-words=.config/codespell_ignore.txt --skip=\"*.pyc,*.png,*.jpg,*.ods,*.raw,*.pdf,*.pcap,*.js,*.html,*.der,*_build*,*inet6.py,*dhcp6.py,*manuf.py,*tcpros.py,*.ipynb,*.svg,*.gif,*.obs,*.gz\" scapy/ doc/ test/ .github/\n\n\n[testenv:twine]\ndescription = \"Check Scapy code distribution\"\nskip_install = true\ndeps = twine\n       cmarkgfm\n       build\nsetenv = SCAPY_VERSION=3.0.0\ncommands = python -m build\n           twine check --strict dist/*\n\n\n[testenv:gitarchive]\ndescription = \"Check Scapy git archive\"\nskip_install = true\nallowlist_externals = git\ncommands = git version\n           git archive HEAD -o {envtmpdir}/scapy.tar\n           python -m pip install {envtmpdir}/scapy.tar\n           # Below: remove current folder from path to force use of installed Scapy\n           python -c \"import sys; sys.path.remove(''); import scapy; print(scapy._version_from_git_archive())\"\n\n\n[testenv:flake8]\ndescription = \"Check Scapy code style & quality\"\nskip_install = true\ndeps = flake8<6.0.0\ncommands = flake8 scapy/\n\n\n# flake8 configuration\n[flake8]\nignore = E203, E731, W504, W503\nmax-line-length = 88\nper-file-ignores =\n    scapy/all.py:F403,F401\n    scapy/asn1/mib.py:E501\n    scapy/contrib/automotive/obd/obd.py:F405,F403\n    scapy/contrib/automotive/obd/pid/pids.py:F405,F403\n    scapy/contrib/automotive/obd/scanner.py:F405,F403,E501\n    scapy/contrib/automotive/volkswagen/definitions.py:E501\n    scapy/contrib/eigrp.py:E501\n    scapy/contrib/geneve.py:E501\n    scapy/contrib/http2.py:F821\n    scapy/contrib/igmp.py:E501\n    scapy/contrib/scada/iec104/__init__.py:F405\n    scapy/layers/tls/all.py:F403\n    scapy/layers/tls/crypto/all.py:F403\n    scapy/layers/tls/crypto/md4.py:E741\n    scapy/libs/winpcapy.py:F405,F403,E501\n    scapy/libs/manuf.py:E501\n    scapy/tools/UTscapy.py:E501\nexclude = scapy/libs/ethertypes.py,\n          scapy/layers/msrpce/raw/*\n"
        }
      ]
    }
  ]
}