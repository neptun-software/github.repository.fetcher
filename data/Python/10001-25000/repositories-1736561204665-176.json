{
  "metadata": {
    "timestamp": 1736561204665,
    "page": 176,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fabric/fabric",
      "stars": 14988,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.0390625,
          "content": "comment: false\ncoverage:\n  precision: 0\n"
        },
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.0537109375,
          "content": "[run]\nbranch = True\ninclude =\n    fabric/*\n    tests/*\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.0986328125,
          "content": "[flake8]\nexclude = .git,sites\nignore = E124,E125,E128,E261,E301,E302,E303,W503\nmax-line-length = 79\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.140625,
          "content": "*~\n*.pyc\n*.pyo\n*.pyt\n*.pytc\n*.egg\n.DS_Store\n.*.swp\n*.egg-info\n.coverage\nsites/*/_build\ndist\nbuild/\ntags\nTAGS\n.tox\ntox.ini\n.idea/\nhtmlcov\n.cache\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.283203125,
          "content": "Copyright (c) 2020 Jeff Forcier.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimer in the documentation\n      and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.271484375,
          "content": "include LICENSE\ninclude README.rst\ninclude tasks.py\nrecursive-include sites *\nrecursive-exclude sites/*/_build *\ninclude dev-requirements.txt\nrecursive-include tests *\nrecursive-exclude tests *.pyc *.pyo\nrecursive-include integration *\nrecursive-exclude integration *.pyc *.pyo\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 1.4228515625,
          "content": "|version| |python| |license| |ci| |coverage|\n\n.. |version| image:: https://img.shields.io/pypi/v/fabric\n    :target: https://pypi.org/project/fabric/\n    :alt: PyPI - Package Version\n.. |python| image:: https://img.shields.io/pypi/pyversions/fabric\n    :target: https://pypi.org/project/fabric/\n    :alt: PyPI - Python Version\n.. |license| image:: https://img.shields.io/pypi/l/fabric\n    :target: https://github.com/fabric/fabric/blob/main/LICENSE\n    :alt: PyPI - License\n.. |ci| image:: https://img.shields.io/circleci/build/github/fabric/fabric/main\n    :target: https://app.circleci.com/pipelines/github/fabric/fabric\n    :alt: CircleCI\n.. |coverage| image:: https://img.shields.io/codecov/c/gh/fabric/fabric\n    :target: https://app.codecov.io/gh/fabric/fabric\n    :alt: Codecov\n\nWelcome to Fabric!\n==================\n\nFabric is a high level Python (2.7, 3.4+) library designed to execute shell\ncommands remotely over SSH, yielding useful Python objects in return. It builds\non top of `Invoke <https://pyinvoke.org>`_ (subprocess command execution and\ncommand-line features) and `Paramiko <https://paramiko.org>`_ (SSH protocol\nimplementation), extending their APIs to complement one another and provide\nadditional functionality.\n\nTo find out what's new in this version of Fabric, please see `the changelog\n<https://fabfile.org/changelog.html#{}>`_.\n\nThe project maintainer keeps a `roadmap\n<https://bitprophet.org/projects#roadmap>`_ on his website.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.20703125,
          "content": "# Security Policy\n\n## Security contact information\n\nTo report a security vulnerability, please use the\n[Tidelift security contact](https://tidelift.com/security).\nTidelift will coordinate the fix and disclosure.\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.0888671875,
          "content": "# No codecov comments at all, please - just the github 'checks' is sufficient\ncomment: off\n"
        },
        {
          "name": "dev-requirements.txt",
          "type": "blob",
          "size": 0.4423828125,
          "content": "# Us, of course\n-e .\ninvoke>=2.0\n# Invocations for common project tasks\ninvocations>=3.2.0\n# pytest-relaxed for test organization, display etc tweaks\npytest-relaxed>=2.0.1\n# pytest-cov for coverage\npytest-cov>=4\n# Delicious print() alternative\nicecream>=2.1\n# Formatting\n# Flake8 5.x seems to have an odd importlib-metadata incompatibility?\nflake8>=4,<5\nblack>=22.8,<22.9\n# Coverage!\ncoverage>=6.2,<7\n# Documentation tools\nreleases>=2\nalabaster==0.7.13\n"
        },
        {
          "name": "fabric",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric2",
          "type": "blob",
          "size": 0.005859375,
          "content": "fabric"
        },
        {
          "name": "integration",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.04296875,
          "content": "[pytest]\ntestpaths = tests\npython_files = *\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 4.203125,
          "content": "#!/usr/bin/env python\n\nimport os\nimport setuptools\n\n# Enable the option of building/installing Fabric 2.x as \"fabric2\". This allows\n# users migrating from 1.x to 2.x to have both in the same process space and\n# migrate piecemeal.\n#\n# NOTE: this requires some irritating tomfoolery; to wit:\n# - the repo has a fabric2/ symlink to fabric/ so that things looking for\n# fabric2/<whatever> will find it OK, whether that's code in here or deeper in\n# setuptools/wheel/etc\n# - wheels do _not_ execute this on install, only on generation, so maintainers\n# just build wheels with the env var below turned on, and those wheels install\n# 'fabric2' no problem\n# - sdists execute this _both_ on package creation _and_ on install, so the env\n# var only helps with inbound package metadata; on install by a user, if they\n# don't have the env var, they'd end up with errors because this file tries to\n# look in fabric/, not fabric2/\n# - thus, we use a different test that looks locally to see if only one dir\n# is present, and that overrides the env var test.\n#\n# See also sites/www/installing.txt.\n\nenv_wants_v2 = os.environ.get(\"PACKAGE_AS_FABRIC2\", False)\n\nhere = os.path.abspath(os.path.dirname(__file__))\nfabric2_present = os.path.isdir(os.path.join(here, \"fabric2\"))\nfabric_present = os.path.isdir(os.path.join(here, \"fabric\"))\nonly_v2_present = fabric2_present and not fabric_present\n\npackage_name = \"fabric\"\nbinary_name = \"fab\"\nif env_wants_v2 or only_v2_present:\n    package_name = \"fabric2\"\n    binary_name = \"fab2\"\npackages = setuptools.find_packages(\n    include=[package_name, \"{}.*\".format(package_name)]\n)\n\n# Version info -- read without importing\n_locals = {}\nwith open(os.path.join(package_name, \"_version.py\")) as fp:\n    exec(fp.read(), None, _locals)\nversion = _locals[\"__version__\"]\n\nsetuptools.setup(\n    name=package_name,\n    version=version,\n    description=\"High level SSH command execution\",\n    license=\"BSD\",\n    long_description=open(\"README.rst\").read(),\n    author=\"Jeff Forcier\",\n    author_email=\"jeff@bitprophet.org\",\n    url=\"https://fabfile.org\",\n    project_urls={\n        \"Docs\": \"https://docs.fabfile.org\",\n        \"Source\": \"https://github.com/fabric/fabric\",\n        \"Issues\": \"https://github.com/fabric/fabric/issues\",\n        \"Changelog\": \"https://www.fabfile.org/changelog.html\",\n        \"CI\": \"https://app.circleci.com/pipelines/github/fabric/fabric\",\n        \"Twitter\": \"https://twitter.com/pyfabric\",\n    },\n    python_requres=\">=3.6\",\n    install_requires=[\n        \"invoke>=2.0\",\n        \"paramiko>=2.4\",\n        \"decorator>=5\",\n        \"deprecated>=1.2\",\n    ],\n    extras_require={\n        # For folks who want to use fabric.testing package, eg\n        # MockRemote/MockSFTP\n        \"testing\": [],  # no longer (for now?) needs anything special\n        # For folks who want to use fabric.testing.fixtures' pytest fixtures\n        \"pytest\": [\"pytest>=7\"],\n    },\n    packages=packages,\n    entry_points={\n        \"console_scripts\": [\n            \"{} = {}.main:program.run\".format(binary_name, package_name)\n        ]\n    },\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: System Administrators\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Topic :: Software Development\",\n        \"Topic :: Software Development :: Build Tools\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: System :: Clustering\",\n        \"Topic :: System :: Software Distribution\",\n        \"Topic :: System :: Systems Administration\",\n    ],\n)\n"
        },
        {
          "name": "sites",
          "type": "tree",
          "content": null
        },
        {
          "name": "tasks.py",
          "type": "blob",
          "size": 2.8212890625,
          "content": "from os import getcwd\nimport sys\n\nfrom invocations import ci\nfrom invocations import checks\nfrom invocations.docs import docs, www, sites, watch_docs\nfrom invocations.pytest import (\n    test,\n    integration as integration_,\n    coverage as coverage_,\n)\nfrom invocations.packaging import release\n\nfrom invoke import Collection, task\n\n\n@task\ndef safety_test_v1_to_v2_shim(c):\n    \"\"\"\n    Run some very quick in-process safety checks on a dual fabric1-v-2 env.\n\n    Assumes Fabric 2+ is already installed as 'fabric2'.\n    \"\"\"\n    c.run(\"pip install 'fabric<2'\")\n    # Make darn sure the two copies of fabric are coming from install root, not\n    # local directory - which would result in 'fabric' always being v2!\n    for serious in (getcwd(), \"\"):\n        if serious in sys.path:  # because why would .remove be idempotent?!\n            sys.path.remove(serious)\n\n    from fabric.api import env\n    from fabric2 import Connection\n\n    env.gateway = \"some-gateway\"\n    env.no_agent = True\n    env.password = \"sikrit\"\n    env.user = \"admin\"\n    env.host_string = \"localghost\"\n    env.port = \"2222\"\n    cxn = Connection.from_v1(env)\n    config = cxn.config\n    assert config.run.pty is True\n    assert config.gateway == \"some-gateway\"\n    assert config.connect_kwargs.password == \"sikrit\"\n    assert config.sudo.password == \"sikrit\"\n    assert cxn.host == \"localghost\"\n    assert cxn.user == \"admin\"\n    assert cxn.port == 2222\n\n\n# TODO: as usual, this just wants a good pattern for \"that other task, with a\n# tweaked default arg value\"\n@task\ndef integration(\n    c,\n    opts=None,\n    pty=True,\n    x=False,\n    k=None,\n    verbose=True,\n    color=True,\n    capture=\"no\",\n    module=None,\n):\n    return integration_(c, opts, pty, x, k, verbose, color, capture, module)\n\n\n# NOTE: copied from invoke's tasks.py\n@task\ndef coverage(c, report=\"term\", opts=\"\", codecov=False):\n    \"\"\"\n    Run pytest in coverage mode. See `invocations.pytest.coverage` for details.\n    \"\"\"\n    # Use our own test() instead of theirs.\n    # Also add integration test so this always hits both.\n    coverage_(\n        c,\n        report=report,\n        opts=opts,\n        tester=test,\n        additional_testers=[integration],\n        codecov=codecov,\n    )\n\n\nns = Collection(\n    checks.blacken,  # backwards compat\n    checks,\n    ci,\n    coverage,\n    docs,\n    integration,\n    release,\n    sites,\n    test,\n    watch_docs,\n    www,\n    safety_test_v1_to_v2_shim,\n)\nns.configure(\n    {\n        \"packaging\": {\n            # NOTE: this is currently for identifying the source directory.\n            # Should it get used for actual releasing, needs changing.\n            \"package\": \"fabric\",\n            \"sign\": False,\n            \"wheel\": True,\n            \"check_desc\": True,\n            \"changelog_file\": \"sites/www/changelog.rst\",\n            \"rebuild_with_env\": dict(PACKAGE_AS_FABRIC2=\"yes\"),\n        }\n    }\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}