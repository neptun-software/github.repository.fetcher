{
  "metadata": {
    "timestamp": 1736561139004,
    "page": 84,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "python/mypy",
      "stars": 18778,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2119140625,
          "content": "root = true\n\n[*.{py,pyi,c,cpp,h,rst,md,yml,yaml,json,test}]\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\n\n[*.{py,pyi,c,h,json,test}]\nindent_size = 4\n\n[*.{yml,yaml}]\nindent_size = 2\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.470703125,
          "content": "# Adopt black and isort\n97c5ee99bc98dc475512e549b252b23a6e7e0997\n# Use builtin generics and PEP 604 for type annotations wherever possible (#13427)\n23ee1e7aff357e656e3102435ad0fe3b5074571e\n# Use variable annotations (#10723)\nf98f78216ba9d6ab68c8e69c19e9f3c7926c5efe\n# run pyupgrade (#12711)\nfc335cb16315964b923eb1927e3aad1516891c28\n# update black to 23.3.0 (#15059)\n4276308be01ea498d946a79554b4a10b1cf13ccb\n# Update black to 24.1.1 (#16847)\n8107e53158d83d30bb04d290ac10d8d3ccd344f8\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.09375,
          "content": "# We vendor typeshed from https://github.com/python/typeshed\nmypy/typeshed/** linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5654296875,
          "content": "build/\n__pycache__\n*.py[cod]\n*~\n/build\n/env*/\ndocs/build/\ndocs/source/_build\nmypyc/doc/_build\n*.iml\n/out/\n.venv*\nvenv/\n.mypy_cache/\n.incremental_checker_cache.json\n.cache\ntest-data/packages/.pip_lock\ndmypy.json\n.dmypy.json\n\n# Packages\n*.egg\n*.egg-info\n*.eggs\n\n# IDEs\n.idea\n.vscode\n\n# vim temporary files\n.*.sw?\n*.sw?\n\n# Operating Systems\n.DS_Store\n\n# Coverage Files\nhtmlcov\n.coverage*\n\n# pytest cache\n.pytest_cache/\n\n# virtualenv\n.Python\nbin/\nlib/\ninclude/\n.python-version\npyvenv.cfg\n\n.tox\npip-wheel-metadata\n\n\ntest_capi\n*.o\n*.a\ntest_capi\n/mypyc/lib-rt/build/\n/mypyc/lib-rt/*.so\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.974609375,
          "content": "exclude: '^(mypyc/external/)|(mypy/typeshed/)|misc/typeshed_patches'  # Exclude all vendored code from lints\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n  - repo: https://github.com/psf/black-pre-commit-mirror\n    rev: 24.10.0\n    hooks:\n      - id: black\n        exclude: '^(test-data/)'\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.8.6\n    hooks:\n      - id: ruff\n        args: [--exit-non-zero-on-fix]\n  - repo: https://github.com/python-jsonschema/check-jsonschema\n    rev: 0.30.0\n    hooks:\n      - id: check-dependabot\n      - id: check-github-workflows\n  - repo: https://github.com/rhysd/actionlint\n    rev: v1.7.6\n    hooks:\n      - id: actionlint\n        args: [\n          -ignore=property \"debug_build\" is not defined,\n          -ignore=property \"allow_failure\" is not defined,\n          -ignore=SC2(046|086),\n        ]\nci:\n  autoupdate_schedule: quarterly\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.3154296875,
          "content": "# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\nsphinx:\n   configuration: docs/source/conf.py\n\nformats: [pdf, htmlzip, epub]\n\npython:\n   install:\n   - requirements: docs/requirements-docs.txt\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 159.54296875,
          "content": "# Mypy Release Notes\n\n## Next release\n\n### Performance improvements\n\nTODO\n\n### Drop Support for Python 3.8\n\nMypy no longer supports running with Python 3.8, which has reached end-of-life.\nWhen running mypy with Python 3.9+, it is still possible to type check code\nthat needs to support Python 3.8 with the `--python-version 3.8` argument.\nSupport for this will be dropped in the first half of 2025!\n\nContributed by Marc Mueller (PR [17492](https://github.com/python/mypy/pull/17492)).\n\n### Mypyc accelerated mypy wheels for aarch64\n\nMypy can compile itself to C extension modules using mypyc. This makes mypy 3-5x faster\nthan if mypy is interpreted with pure Python. We now build and upload mypyc accelerated\nmypy wheels for `manylinux_aarch64` to PyPI, making it easy for users on such platforms\nto realise this speedup.\n\nContributed by Christian Bundy (PR [mypy_mypyc-wheels#76](https://github.com/mypyc/mypy_mypyc-wheels/pull/76))\n\n### `--strict-bytes`\n\nBy default, mypy treats an annotation of ``bytes`` as permitting ``bytearray`` and ``memoryview``.\n[PEP 688](https://peps.python.org/pep-0688) specified the removal of this special case.\nUse this flag to disable this behavior. `--strict-bytes` will be enabled by default in **mypy 2.0**.\n\nContributed by Ali Hamdan (PR [18137](https://github.com/python/mypy/pull/18263/)) and\nShantanu Jain (PR [13952](https://github.com/python/mypy/pull/13952)).\n\n### Improvements to partial type handling in loops\n\nThis change results in mypy better modelling control flow within loops and hence detecting several\nissues it previously did not detect. In some cases, this change may require use of an additional\nexplicit annotation of a variable.\n\nContributed by Christoph Tyralla (PR [18180](https://github.com/python/mypy/pull/18180)).\n\n(Speaking of partial types, another reminder that mypy plans on enabling `--local-partial-types`\nby default in **mypy 2.0**).\n\n### Better line numbers for decorators and slice expressions\n\nMypy now uses more correct line numbers for decorators and slice expressions. In some cases, this\nmay necessitate changing the location of a `# type: ignore` comment.\n\nContributed by Shantanu Jain (PR [18392](https://github.com/python/mypy/pull/18392),\nPR [18397](https://github.com/python/mypy/pull/18397)).\n\n## Mypy 1.14\n\nWe’ve just uploaded mypy 1.14 to the Python Package Index ([PyPI](https://pypi.org/project/mypy/)).\nMypy is a static type checker for Python. This release includes new features and bug fixes.\nYou can install it as follows:\n\n    python3 -m pip install -U mypy\n\nYou can read the full documentation for this release on [Read the Docs](http://mypy.readthedocs.io).\n\n### Change to Enum Membership Semantics\n\nAs per the updated [typing specification for enums](https://typing.readthedocs.io/en/latest/spec/enums.html#defining-members),\nenum members must be left unannotated.\n\n```python\nclass Pet(Enum):\n    CAT = 1  # Member attribute\n    DOG = 2  # Member attribute\n\n    # New error: Enum members must be left unannotated\n    WOLF: int = 3\n\n    species: str  # Considered a non-member attribute\n```\n\nIn particular, the specification change can result in issues in type stubs (`.pyi` files), since\nhistorically it was common to leave the value absent:\n\n```python\n# In a type stub (.pyi file)\n\nclass Pet(Enum):\n    # Change in semantics: previously considered members,\n    # now non-member attributes\n    CAT: int\n    DOG: int\n\n    # Mypy will now issue a warning if it detects this\n    # situation in type stubs:\n    # > Detected enum \"Pet\" in a type stub with zero\n    # > members. There is a chance this is due to a recent\n    # > change in the semantics of enum membership. If so,\n    # > use `member = value` to mark an enum member,\n    # > instead of `member: type`\n\nclass Pet(Enum):\n    # As per the specification, you should now do one of\n    # the following:\n    DOG = 1  # Member attribute with value 1 and known type\n    WOLF = cast(int, ...)  # Member attribute with unknown\n                           # value but known type\n    LION = ...  # Member attribute with unknown value and\n                # # unknown type\n```\n\nContributed by Terence Honles (PR [17207](https://github.com/python/mypy/pull/17207)) and\nShantanu Jain (PR [18068](https://github.com/python/mypy/pull/18068)).\n\n### Support for @deprecated Decorator (PEP 702)\n\nMypy can now issue errors or notes when code imports a deprecated feature\nexplicitly with a `from mod import depr` statement, or uses a deprecated feature\nimported otherwise or defined locally. Features are considered deprecated when\ndecorated with `warnings.deprecated`, as specified in [PEP 702](https://peps.python.org/pep-0702).\n\nYou can enable the error code via `--enable-error-code=deprecated` on the mypy\ncommand line or `enable_error_code = deprecated` in the mypy config file.\nUse the command line flag `--report-deprecated-as-note` or config file option\n`report_deprecated_as_note=True` to turn all such errors into notes.\n\nDeprecation errors will be enabled by default in a future mypy version.\n\nThis feature was contributed by Christoph Tyralla.\n\nList of changes:\n\n * Add basic support for PEP 702 (`@deprecated`) (Christoph Tyralla, PR [17476](https://github.com/python/mypy/pull/17476))\n * Support descriptors with `@deprecated` (Christoph Tyralla, PR [18090](https://github.com/python/mypy/pull/18090))\n * Make \"deprecated\" note an error, disabled by default (Valentin Stanciu, PR [18192](https://github.com/python/mypy/pull/18192))\n * Consider all possible type positions with `@deprecated` (Christoph Tyralla, PR [17926](https://github.com/python/mypy/pull/17926))\n * Improve the handling of explicit type annotations in assignment statements with `@deprecated` (Christoph Tyralla, PR [17899](https://github.com/python/mypy/pull/17899))\n\n### Optionally Analyzing Untyped Modules\n\nMypy normally doesn't analyze imports from third-party modules (installed using pip, for example)\nif there are no stubs or a py.typed marker file. To force mypy to analyze these imports, you\ncan now use the `--follow-untyped-imports` flag or set the `follow_untyped_imports`\nconfig file option to True. This can be set either in the global section of your mypy config\nfile, or individually on a per-module basis.\n\nThis feature was contributed by Jannick Kremer.\n\nList of changes:\n\n * Implement flag to allow type checking of untyped modules (Jannick Kremer, PR [17712](https://github.com/python/mypy/pull/17712))\n * Warn about `--follow-untyped-imports` (Shantanu, PR [18249](https://github.com/python/mypy/pull/18249))\n\n### Support New Style Type Variable Defaults (PEP 696)\n\nMypy now supports type variable defaults using the new syntax described in PEP 696, which\nwas introduced in Python 3.13. Example:\n\n```python\n@dataclass\nclass Box[T = int]:  # Set default for \"T\"\n    value: T | None = None\n\nreveal_type(Box())                      # type is Box[int], since it's the default\nreveal_type(Box(value=\"Hello World!\"))  # type is Box[str]\n```\n\nThis feature was contributed by Marc Mueller (PR [17985](https://github.com/python/mypy/pull/17985)).\n\n### Improved For Loop Index Variable Type Narrowing\n\nMypy now preserves the literal type of for loop index variables, to support `TypedDict`\nlookups. Example:\n\n```python\nfrom typing import TypedDict\n\nclass X(TypedDict):\n    hourly: int\n    daily: int\n\ndef func(x: X) -> int:\n    s = 0\n    for var in (\"hourly\", \"daily\"):\n        # \"Union[Literal['hourly']?, Literal['daily']?]\"\n        reveal_type(var)\n\n        # x[var] no longer triggers a literal-required error\n        s += x[var]\n    return s\n```\n\nThis was contributed by Marc Mueller (PR [18014](https://github.com/python/mypy/pull/18014)).\n\n### Mypyc Improvements\n\n * Document optimized bytes operations and additional str operations (Jukka Lehtosalo, PR [18242](https://github.com/python/mypy/pull/18242))\n * Add primitives and specialization for `ord()` (Jukka Lehtosalo, PR [18240](https://github.com/python/mypy/pull/18240))\n * Optimize `str.encode` with specializations for common used encodings (Valentin Stanciu, PR [18232](https://github.com/python/mypy/pull/18232))\n * Fix fall back to generic operation for staticmethod and classmethod (Advait Dixit, PR [18228](https://github.com/python/mypy/pull/18228))\n * Support unicode surrogates in string literals (Jukka Lehtosalo, PR [18209](https://github.com/python/mypy/pull/18209))\n * Fix index variable in for loop with `builtins.enumerate` (Advait Dixit, PR [18202](https://github.com/python/mypy/pull/18202))\n * Fix check for enum classes (Advait Dixit, PR [18178](https://github.com/python/mypy/pull/18178))\n * Fix loading type from imported modules (Advait Dixit, PR [18158](https://github.com/python/mypy/pull/18158))\n * Fix initializers of final attributes in class body (Jared Hance, PR [18031](https://github.com/python/mypy/pull/18031))\n * Fix name generation for modules with similar full names (aatle, PR [18001](https://github.com/python/mypy/pull/18001))\n * Fix relative imports in `__init__.py` (Shantanu, PR [17979](https://github.com/python/mypy/pull/17979))\n * Optimize dunder methods (jairov4, PR [17934](https://github.com/python/mypy/pull/17934))\n * Replace deprecated `_PyDict_GetItemStringWithError` (Marc Mueller, PR [17930](https://github.com/python/mypy/pull/17930))\n * Fix wheel build for cp313-win (Marc Mueller, PR [17941](https://github.com/python/mypy/pull/17941))\n * Use public PyGen_GetCode instead of vendored implementation (Marc Mueller, PR [17931](https://github.com/python/mypy/pull/17931))\n * Optimize calls to final classes (jairov4, PR [17886](https://github.com/python/mypy/pull/17886))\n * Support ellipsis (`...`) expressions in class bodies (Newbyte, PR [17923](https://github.com/python/mypy/pull/17923))\n * Sync `pythoncapi_compat.h` (Marc Mueller, PR [17929](https://github.com/python/mypy/pull/17929))\n * Add `runtests.py mypyc-fast` for running fast mypyc tests (Jukka Lehtosalo, PR [17906](https://github.com/python/mypy/pull/17906))\n\n### Stubgen Improvements\n\n * Do not include mypy generated symbols (Ali Hamdan, PR [18137](https://github.com/python/mypy/pull/18137))\n * Fix `FunctionContext.fullname` for nested classes (Chad Dombrova, PR [17963](https://github.com/python/mypy/pull/17963))\n * Add flagfile support (Ruslan Sayfutdinov, PR [18061](https://github.com/python/mypy/pull/18061))\n * Add support for PEP 695 and PEP 696 syntax (Ali Hamdan, PR [18054](https://github.com/python/mypy/pull/18054))\n\n### Stubtest Improvements\n\n * Allow the use of `--show-traceback` and `--pdb` with stubtest (Stephen Morton, PR [18037](https://github.com/python/mypy/pull/18037))\n * Verify `__all__` exists in stub (Sebastian Rittau, PR [18005](https://github.com/python/mypy/pull/18005))\n * Stop telling people to use double underscores (Jelle Zijlstra, PR [17897](https://github.com/python/mypy/pull/17897))\n\n### Documentation Updates\n\n * Update config file documentation (sobolevn, PR [18103](https://github.com/python/mypy/pull/18103))\n * Improve contributor documentation for Windows (ag-tafe, PR [18097](https://github.com/python/mypy/pull/18097))\n * Correct note about `--disallow-any-generics` flag in documentation (Abel Sen, PR [18055](https://github.com/python/mypy/pull/18055))\n * Further caution against `--follow-imports=skip` (Shantanu, PR [18048](https://github.com/python/mypy/pull/18048))\n * Fix the edit page button link in documentation (Kanishk Pachauri, PR [17933](https://github.com/python/mypy/pull/17933))\n\n### Other Notables Fixes and Improvements\n\n * Show `Protocol` `__call__` for arguments with incompatible types (MechanicalConstruct, PR [18214](https://github.com/python/mypy/pull/18214))\n * Make join and meet symmetric with `strict_optional` (MechanicalConstruct, PR [18227](https://github.com/python/mypy/pull/18227))\n * Preserve block unreachablility when checking function definitions with constrained TypeVars (Brian Schubert, PR [18217](https://github.com/python/mypy/pull/18217))\n * Do not include non-init fields in the synthesized `__replace__` method for dataclasses (Victorien, PR [18221](https://github.com/python/mypy/pull/18221))\n * Disallow `TypeVar` constraints parameterized by type variables (Brian Schubert, PR [18186](https://github.com/python/mypy/pull/18186))\n * Always complain about invalid varargs and varkwargs (Shantanu, PR [18207](https://github.com/python/mypy/pull/18207))\n * Set default strict_optional state to True (Shantanu, PR [18198](https://github.com/python/mypy/pull/18198))\n * Preserve type variable default None in type alias (Sukhorosov Aleksey, PR [18197](https://github.com/python/mypy/pull/18197))\n * Add checks for invalid usage of continue/break/return in `except*` block (coldwolverine, PR [18132](https://github.com/python/mypy/pull/18132))\n * Do not consider bare TypeVar not overlapping with None for reachability analysis (Stanislav Terliakov, PR [18138](https://github.com/python/mypy/pull/18138))\n * Special case `types.DynamicClassAttribute` as property-like (Stephen Morton, PR [18150](https://github.com/python/mypy/pull/18150))\n * Disallow bare `ParamSpec` in type aliases (Brian Schubert, PR [18174](https://github.com/python/mypy/pull/18174))\n * Move long_description metadata to pyproject.toml (Marc Mueller, PR [18172](https://github.com/python/mypy/pull/18172))\n * Support `==`-based narrowing of Optional (Christoph Tyralla, PR [18163](https://github.com/python/mypy/pull/18163))\n * Allow TypedDict assignment of Required item to NotRequired ReadOnly item (Brian Schubert, PR [18164](https://github.com/python/mypy/pull/18164))\n * Allow nesting of Annotated with TypedDict special forms inside TypedDicts (Brian Schubert, PR [18165](https://github.com/python/mypy/pull/18165))\n * Infer generic type arguments for slice expressions (Brian Schubert, PR [18160](https://github.com/python/mypy/pull/18160))\n * Fix checking of match sequence pattern against bounded type variables (Brian Schubert, PR [18091](https://github.com/python/mypy/pull/18091))\n * Fix incorrect truthyness for Enum types and literals (David Salvisberg, PR [17337](https://github.com/python/mypy/pull/17337))\n * Move static project metadata to pyproject.toml (Marc Mueller, PR [18146](https://github.com/python/mypy/pull/18146))\n * Fallback to stdlib json if integer exceeds 64-bit range (q0w, PR [18148](https://github.com/python/mypy/pull/18148))\n * Fix 'or' pattern structural matching exhaustiveness (yihong, PR [18119](https://github.com/python/mypy/pull/18119))\n * Fix type inference of positional parameter in class pattern involving builtin subtype (Brian Schubert, PR [18141](https://github.com/python/mypy/pull/18141))\n * Fix `[override]` error with no line number when argument node has no line number (Brian Schubert, PR [18122](https://github.com/python/mypy/pull/18122))\n * Fix some dmypy crashes (Ivan Levkivskyi, PR [18098](https://github.com/python/mypy/pull/18098))\n * Fix subtyping between instance type and overloaded (Shantanu, PR [18102](https://github.com/python/mypy/pull/18102))\n * Clean up new_semantic_analyzer config (Shantanu, PR [18071](https://github.com/python/mypy/pull/18071))\n * Issue warning for enum with no members in stub (Shantanu, PR [18068](https://github.com/python/mypy/pull/18068))\n * Fix enum attributes are not members (Terence Honles, PR [17207](https://github.com/python/mypy/pull/17207))\n * Fix crash when checking slice expression with step 0 in tuple index (Brian Schubert, PR [18063](https://github.com/python/mypy/pull/18063))\n * Allow union-with-callable attributes to be overridden by methods (Brian Schubert, PR [18018](https://github.com/python/mypy/pull/18018))\n * Emit `[mutable-override]` for covariant override of attribute with method (Brian Schubert, PR [18058](https://github.com/python/mypy/pull/18058))\n * Support ParamSpec mapping with `functools.partial` (Stanislav Terliakov, PR [17355](https://github.com/python/mypy/pull/17355))\n * Fix approved stub ignore, remove normpath (Shantanu, PR [18045](https://github.com/python/mypy/pull/18045))\n * Make `disallow-any-unimported` flag invertible (Séamus Ó Ceanainn, PR [18030](https://github.com/python/mypy/pull/18030))\n * Filter to possible package paths before trying to resolve a module (falsedrow, PR [18038](https://github.com/python/mypy/pull/18038))\n * Fix overlap check for ParamSpec types (Jukka Lehtosalo, PR [18040](https://github.com/python/mypy/pull/18040))\n * Do not prioritize ParamSpec signatures during overload resolution (Stanislav Terliakov, PR [18033](https://github.com/python/mypy/pull/18033))\n * Fix ternary union for literals (Ivan Levkivskyi, PR [18023](https://github.com/python/mypy/pull/18023))\n * Fix compatibility checks for conditional function definitions using decorators (Brian Schubert, PR [18020](https://github.com/python/mypy/pull/18020))\n * TypeGuard should be bool not Any when matching TypeVar (Evgeniy Slobodkin, PR [17145](https://github.com/python/mypy/pull/17145))\n * Fix convert-cache tool (Shantanu, PR [17974](https://github.com/python/mypy/pull/17974))\n * Fix generator comprehension with mypyc (Shantanu, PR [17969](https://github.com/python/mypy/pull/17969))\n * Fix crash issue when using shadowfile with pretty (Max Chang, PR [17894](https://github.com/python/mypy/pull/17894))\n * Fix multiple nested classes with new generics syntax (Max Chang, PR [17820](https://github.com/python/mypy/pull/17820))\n * Better error for `mypy -p package` without py.typed (Joe Gordon, PR [17908](https://github.com/python/mypy/pull/17908))\n * Emit error for `raise NotImplemented` (Brian Schubert, PR [17890](https://github.com/python/mypy/pull/17890))\n * Add `is_lvalue` attribute to AttributeContext (Brian Schubert, PR [17881](https://github.com/python/mypy/pull/17881))\n\n### Acknowledgements\n\nThanks to all mypy contributors who contributed to this release:\n\n- aatle\n- Abel Sen\n- Advait Dixit\n- ag-tafe\n- Alex Waygood\n- Ali Hamdan\n- Brian Schubert\n- Carlton Gibson\n- Chad Dombrova\n- Chelsea Durazo\n- chiri\n- Christoph Tyralla\n- coldwolverine\n- David Salvisberg\n- Ekin Dursun\n- Evgeniy Slobodkin\n- falsedrow\n- Gaurav Giri\n- Ihor\n- Ivan Levkivskyi\n- jairov4\n- Jannick Kremer\n- Jared Hance\n- Jelle Zijlstra\n- jianghuyiyuan\n- Joe Gordon\n- John Doknjas\n- Jukka Lehtosalo\n- Kanishk Pachauri\n- Marc Mueller\n- Max Chang\n- MechanicalConstruct\n- Newbyte\n- q0w\n- Ruslan Sayfutdinov\n- Sebastian Rittau\n- Shantanu\n- sobolevn\n- Stanislav Terliakov\n- Stephen Morton\n- Sukhorosov Aleksey\n- Séamus Ó Ceanainn\n- Terence Honles\n- Valentin Stanciu\n- vasiliy\n- Victorien\n- yihong\n\nI’d also like to thank my employer, Dropbox, for supporting mypy development.\n\n\n## Mypy 1.13\n\nWe’ve just uploaded mypy 1.13 to the Python Package Index ([PyPI](https://pypi.org/project/mypy/)).\nMypy is a static type checker for Python. You can install it as follows:\n\n    python3 -m pip install -U mypy\n\nYou can read the full documentation for this release on [Read the Docs](http://mypy.readthedocs.io).\n\nNote that unlike typical releases, Mypy 1.13 does not have any changes to type checking semantics\nfrom 1.12.1.\n\n### Improved Performance\n\nMypy 1.13 contains several performance improvements. Users can expect mypy to be 5-20% faster.\nIn environments with long search paths (such as environments using many editable installs), mypy\ncan be significantly faster, e.g. 2.2x faster in the use case targeted by these improvements.\n\nMypy 1.13 allows use of the `orjson` library for handling the cache instead of the stdlib `json`,\nfor improved performance. You can ensure the presence of `orjson` using the `faster-cache` extra:\n\n    python3 -m pip install -U mypy[faster-cache]\n\nMypy may depend on `orjson` by default in the future.\n\nThese improvements were contributed by Shantanu.\n\nList of changes:\n* Significantly speed up file handling error paths (Shantanu, PR [17920](https://github.com/python/mypy/pull/17920))\n* Use fast path in modulefinder more often (Shantanu, PR [17950](https://github.com/python/mypy/pull/17950))\n* Let mypyc optimise os.path.join (Shantanu, PR [17949](https://github.com/python/mypy/pull/17949))\n* Make is_sub_path faster (Shantanu, PR [17962](https://github.com/python/mypy/pull/17962))\n* Speed up stubs suggestions (Shantanu, PR [17965](https://github.com/python/mypy/pull/17965))\n* Use sha1 for hashing (Shantanu, PR [17953](https://github.com/python/mypy/pull/17953))\n* Use orjson instead of json, when available (Shantanu, PR [17955](https://github.com/python/mypy/pull/17955))\n* Add faster-cache extra, test in CI (Shantanu, PR [17978](https://github.com/python/mypy/pull/17978))\n\n### Acknowledgements\nThanks to all mypy contributors who contributed to this release:\n\n- Shantanu Jain\n- Jukka Lehtosalo\n\n## Mypy 1.12\n\nWe’ve just uploaded mypy 1.12 to the Python Package Index ([PyPI](https://pypi.org/project/mypy/)). Mypy is a static type\nchecker for Python. This release includes new features, performance improvements and bug fixes.\nYou can install it as follows:\n\n    python3 -m pip install -U mypy\n\nYou can read the full documentation for this release on [Read the Docs](http://mypy.readthedocs.io).\n\n### Support Python 3.12 Syntax for Generics (PEP 695)\n\nSupport for the new type parameter syntax introduced in Python 3.12 is now enabled by default,\ndocumented, and no longer experimental. It was available through a feature flag in\nmypy 1.11 as an experimental feature.\n\nThis example demonstrates the new syntax:\n\n```python\n# Generic function\ndef f[T](x: T) -> T: ...\n\nreveal_type(f(1))  # Revealed type is 'int'\n\n# Generic class\nclass C[T]:\n    def __init__(self, x: T) -> None:\n       self.x = x\n\nc = C('a')\nreveal_type(c.x)  # Revealed type is 'str'\n\n# Type alias\ntype A[T] = C[list[T]]\n```\n\nFor more information, refer to the [documentation](https://mypy.readthedocs.io/en/latest/generics.html).\n\nThese improvements are included:\n\n * Document Python 3.12 type parameter syntax (Jukka Lehtosalo, PR [17816](https://github.com/python/mypy/pull/17816))\n * Further documentation updates (Jukka Lehtosalo, PR [17826](https://github.com/python/mypy/pull/17826))\n * Allow Self return types with contravariance (Jukka Lehtosalo, PR [17786](https://github.com/python/mypy/pull/17786))\n * Enable new type parameter syntax by default (Jukka Lehtosalo, PR [17798](https://github.com/python/mypy/pull/17798))\n * Generate error if new-style type alias used as base class (Jukka Lehtosalo, PR [17789](https://github.com/python/mypy/pull/17789))\n * Inherit variance if base class has explicit variance (Jukka Lehtosalo, PR [17787](https://github.com/python/mypy/pull/17787))\n * Fix crash on invalid type var reference (Jukka Lehtosalo, PR [17788](https://github.com/python/mypy/pull/17788))\n * Fix covariance of frozen dataclasses (Jukka Lehtosalo, PR [17783](https://github.com/python/mypy/pull/17783))\n * Allow covariance with attribute that has \"`_`\" name prefix (Jukka Lehtosalo, PR [17782](https://github.com/python/mypy/pull/17782))\n * Support `Annotated[...]` in new-style type aliases (Jukka Lehtosalo, PR [17777](https://github.com/python/mypy/pull/17777))\n * Fix nested generic classes (Jukka Lehtosalo, PR [17776](https://github.com/python/mypy/pull/17776))\n * Add detection and error reporting for the use of incorrect expressions within the scope of a type parameter and a type alias (Kirill Podoprigora, PR [17560](https://github.com/python/mypy/pull/17560))\n\n### Basic Support for Python 3.13\n\nThis release adds partial support for Python 3.13 features and compiled binaries for\nPython 3.13. Mypyc now also supports Python 3.13.\n\nIn particular, these features are supported:\n * Various new stdlib features and changes (through typeshed stub improvements)\n * `typing.ReadOnly` (see below for more)\n * `typing.TypeIs` (added in mypy 1.10, [PEP 742](https://peps.python.org/pep-0742/))\n * Type parameter defaults when using the legacy syntax ([PEP 696](https://peps.python.org/pep-0696/))\n\nThese features are not supported yet:\n * `warnings.deprecated` ([PEP 702](https://peps.python.org/pep-0702/))\n * Type parameter defaults when using Python 3.12 type parameter syntax\n\n### Mypyc Support for Python 3.13\n\nMypyc now supports Python 3.13. This was contributed by Marc Mueller, with additional\nfixes by Jukka Lehtosalo. Free threaded Python 3.13 builds are not supported yet.\n\nList of changes:\n\n * Add additional includes for Python 3.13 (Marc Mueller, PR [17506](https://github.com/python/mypy/pull/17506))\n * Add another include for Python 3.13 (Marc Mueller, PR [17509](https://github.com/python/mypy/pull/17509))\n * Fix ManagedDict functions for Python 3.13 (Marc Mueller, PR [17507](https://github.com/python/mypy/pull/17507))\n * Update mypyc test output for Python 3.13 (Marc Mueller, PR [17508](https://github.com/python/mypy/pull/17508))\n * Fix `PyUnicode` functions for Python 3.13 (Marc Mueller, PR [17504](https://github.com/python/mypy/pull/17504))\n * Fix `_PyObject_LookupAttrId` for Python 3.13 (Marc Mueller, PR [17505](https://github.com/python/mypy/pull/17505))\n * Fix `_PyList_Extend` for Python 3.13 (Marc Mueller, PR [17503](https://github.com/python/mypy/pull/17503))\n * Fix `gen_is_coroutine` for Python 3.13 (Marc Mueller, PR [17501](https://github.com/python/mypy/pull/17501))\n * Fix `_PyObject_FastCall` for Python 3.13 (Marc Mueller, PR [17502](https://github.com/python/mypy/pull/17502))\n * Avoid uses of `_PyObject_CallMethodOneArg` on 3.13 (Jukka Lehtosalo, PR [17526](https://github.com/python/mypy/pull/17526))\n * Don't rely on `_PyType_CalculateMetaclass` on 3.13 (Jukka Lehtosalo, PR [17525](https://github.com/python/mypy/pull/17525))\n * Don't use `_PyUnicode_FastCopyCharacters` on 3.13 (Jukka Lehtosalo, PR [17524](https://github.com/python/mypy/pull/17524))\n * Don't use `_PyUnicode_EQ` on 3.13, as it's no longer exported (Jukka Lehtosalo, PR [17523](https://github.com/python/mypy/pull/17523))\n\n### Inferring Unions for Conditional Expressions\n\nMypy now always tries to infer a union type for a conditional expression if left and right\noperand types are different. This results in more precise inferred types and lets mypy detect\nmore issues. Example:\n\n```python\ns = \"foo\" if cond() else 1\n# Type of \"s\" is now \"str | int\" (it used to be \"object\")\n```\n\nNotably, if one of the operands has type `Any`, the type of a conditional expression is\nnow `<type> | Any`. Previously the inferred type was just `Any`. The new type essentially\nindicates that the value can be of type `<type>`, and potentially of some (unknown) type.\nMost operations performed on the result must also be valid for `<type>`.\nExample where this is relevant:\n\n```python\nfrom typing import Any\n\ndef func(a: Any, b: bool) -> None:\n    x = a if b else None\n    # Type of x is \"Any | None\"\n    print(x.y)  # Error: None has no attribute \"y\"\n```\n\nThis feature was contributed by Ivan Levkivskyi (PR [17427](https://github.com/python/mypy/pull/17427)).\n\n### ReadOnly Support for TypedDict (PEP 705)\n\nYou can now use `typing.ReadOnly` to specity TypedDict items as\nread-only ([PEP 705](https://peps.python.org/pep-0705/)):\n\n```python\nfrom typing import TypedDict\n\n# Or \"from typing ...\" on Python 3.13\nfrom typing_extensions import ReadOnly\n\nclass TD(TypedDict):\n    a: int\n    b: ReadOnly[int]\n\nd: TD = {\"a\": 1, \"b\": 2}\nd[\"a\"] = 3  # OK\nd[\"b\"] = 5  # Error: \"b\" is ReadOnly\n```\n\nThis feature was contributed by Nikita Sobolev (PR [17644](https://github.com/python/mypy/pull/17644)).\n\n### Python 3.8 End of Life Approaching\n\nWe are planning to drop support for Python 3.8 in the next mypy feature release or the\none after that. Python 3.8 reaches end of life in October 2024.\n\n### Planned Changes to Defaults\n\nWe are planning to enable `--local-partial-types` by default in mypy 2.0. This will\noften require at least minor code changes. This option is implicitly enabled by mypy\ndaemon, so this makes the behavior of daemon and non-daemon modes consistent.\n\nWe recommend that mypy users start using local partial types soon (or to explicitly disable\nthem) to prepare for the change.\n\nThis can also be configured in a mypy configuration file:\n\n```\nlocal_partial_types = True\n```\n\nFor more information, refer to the\n[documentation](https://mypy.readthedocs.io/en/stable/command_line.html#cmdoption-mypy-local-partial-types).\n\n### Documentation Updates\n\nMypy documentation now uses modern syntax variants and imports in many examples. Some\nexamples no longer work on Python 3.8, which is the earliest Python version that mypy supports.\n\nNotably, `Iterable` and other protocols/ABCs are imported from `collections.abc` instead of\n`typing`:\n```python\nfrom collections.abc import Iterable, Callable\n```\n\nExamples also avoid the upper-case aliases to built-in types: `list[str]` is used instead\nof `List[str]`. The `X | Y` union type syntax introduced in Python 3.10 is also now prevalent.\n\nList of documentation updates:\n\n * Document `--output=json` CLI option (Edgar Ramírez Mondragón, PR [17611](https://github.com/python/mypy/pull/17611))\n * Update various references to deprecated type aliases in docs (Jukka Lehtosalo, PR [17829](https://github.com/python/mypy/pull/17829))\n * Make \"X | Y\" union syntax more prominent in documentation (Jukka Lehtosalo, PR [17835](https://github.com/python/mypy/pull/17835))\n * Discuss upper bounds before self types in documentation (Jukka Lehtosalo, PR [17827](https://github.com/python/mypy/pull/17827))\n * Make changelog visible in mypy documentation (quinn-sasha, PR [17742](https://github.com/python/mypy/pull/17742))\n * List all incomplete features in `--enable-incomplete-feature` docs (sobolevn, PR [17633](https://github.com/python/mypy/pull/17633))\n * Remove the explicit setting of a pygments theme (Pradyun Gedam, PR [17571](https://github.com/python/mypy/pull/17571))\n * Document ReadOnly with TypedDict (Jukka Lehtosalo, PR [17905](https://github.com/python/mypy/pull/17905))\n * Document TypeIs (Chelsea Durazo, PR [17821](https://github.com/python/mypy/pull/17821))\n\n### Experimental Inline TypedDict Syntax\n\nMypy now supports a non-standard, experimental syntax for defining anonymous TypedDicts.\nExample:\n\n```python\ndef func(n: str, y: int) -> {\"name\": str, \"year\": int}:\n    return {\"name\": n, \"year\": y}\n```\n\nThe feature is disabled by default. Use `--enable-incomplete-feature=InlineTypedDict` to\nenable it. *We might remove this feature in a future release.*\n\nThis feature was contributed by Ivan Levkivskyi (PR [17457](https://github.com/python/mypy/pull/17457)).\n\n### Stubgen Improvements\n\n * Fix crash on literal class-level keywords (sobolevn, PR [17663](https://github.com/python/mypy/pull/17663))\n * Stubgen add `--version` (sobolevn, PR [17662](https://github.com/python/mypy/pull/17662))\n * Fix `stubgen --no-analysis/--parse-only` docs (sobolevn, PR [17632](https://github.com/python/mypy/pull/17632))\n * Include keyword only args when generating signatures in stubgenc (Eric Mark Martin, PR [17448](https://github.com/python/mypy/pull/17448))\n * Add support for detecting `Literal` types when extracting types from docstrings (Michael Carlstrom, PR [17441](https://github.com/python/mypy/pull/17441))\n * Use `Generator` type var defaults (Sebastian Rittau, PR [17670](https://github.com/python/mypy/pull/17670))\n\n### Stubtest Improvements\n * Add support for `cached_property` (Ali Hamdan, PR [17626](https://github.com/python/mypy/pull/17626))\n * Add `enable_incomplete_feature` validation to `stubtest` (sobolevn, PR [17635](https://github.com/python/mypy/pull/17635))\n * Fix error code handling in `stubtest` with `--mypy-config-file` (sobolevn, PR [17629](https://github.com/python/mypy/pull/17629))\n\n### Other Notables Fixes and Improvements\n\n * Report error if using unsupported type parameter defaults (Jukka Lehtosalo, PR [17876](https://github.com/python/mypy/pull/17876))\n * Fix re-processing cross-reference in mypy daemon when node kind changes (Ivan Levkivskyi, PR [17883](https://github.com/python/mypy/pull/17883))\n * Don't use equality to narrow when value is IntEnum/StrEnum (Jukka Lehtosalo, PR [17866](https://github.com/python/mypy/pull/17866))\n * Don't consider None vs IntEnum comparison ambiguous (Jukka Lehtosalo, PR [17877](https://github.com/python/mypy/pull/17877))\n * Fix narrowing of IntEnum and StrEnum types (Jukka Lehtosalo, PR [17874](https://github.com/python/mypy/pull/17874))\n * Filter overload items based on self type during type inference (Jukka Lehtosalo, PR [17873](https://github.com/python/mypy/pull/17873))\n * Enable negative narrowing of union TypeVar upper bounds (Brian Schubert, PR [17850](https://github.com/python/mypy/pull/17850))\n * Fix issue with member expression formatting (Brian Schubert, PR [17848](https://github.com/python/mypy/pull/17848))\n * Avoid type size explosion when expanding types (Jukka Lehtosalo, PR [17842](https://github.com/python/mypy/pull/17842))\n * Fix negative narrowing of tuples in match statement (Brian Schubert, PR [17817](https://github.com/python/mypy/pull/17817))\n * Narrow falsey str/bytes/int to literal type (Brian Schubert, PR [17818](https://github.com/python/mypy/pull/17818))\n * Test against latest Python 3.13, make testing 3.14 easy (Shantanu, PR [17812](https://github.com/python/mypy/pull/17812))\n * Reject ParamSpec-typed callables calls with insufficient arguments (Stanislav Terliakov, PR [17323](https://github.com/python/mypy/pull/17323))\n * Fix crash when passing too many type arguments to generic base class accepting single ParamSpec (Brian Schubert, PR [17770](https://github.com/python/mypy/pull/17770))\n * Fix TypeVar upper bounds sometimes not being displayed in pretty callables (Brian Schubert, PR [17802](https://github.com/python/mypy/pull/17802))\n * Added error code for overlapping function signatures (Katrina Connors, PR [17597](https://github.com/python/mypy/pull/17597))\n * Check for `truthy-bool` in `not ...` unary expressions (sobolevn, PR [17773](https://github.com/python/mypy/pull/17773))\n * Add missing lines-covered and lines-valid attributes (Soubhik Kumar Mitra, PR [17738](https://github.com/python/mypy/pull/17738))\n * Fix another crash scenario with recursive tuple types (Ivan Levkivskyi, PR [17708](https://github.com/python/mypy/pull/17708))\n * Resolve TypeVar upper bounds in `functools.partial` (Shantanu, PR [17660](https://github.com/python/mypy/pull/17660))\n * Always reset binder when checking deferred nodes (Ivan Levkivskyi, PR [17643](https://github.com/python/mypy/pull/17643))\n * Fix crash on a callable attribute with single unpack (Ivan Levkivskyi, PR [17641](https://github.com/python/mypy/pull/17641))\n * Fix mismatched signature between checker plugin API and implementation (bzoracler, PR [17343](https://github.com/python/mypy/pull/17343))\n * Indexing a type also produces a GenericAlias (Shantanu, PR [17546](https://github.com/python/mypy/pull/17546))\n * Fix crash on self-type in callable protocol (Ivan Levkivskyi, PR [17499](https://github.com/python/mypy/pull/17499))\n * Fix crash on NamedTuple with method and error in function (Ivan Levkivskyi, PR [17498](https://github.com/python/mypy/pull/17498))\n * Add `__replace__` for dataclasses in 3.13 (Max Muoto, PR [17469](https://github.com/python/mypy/pull/17469))\n * Fix help message for `--no-namespace-packages` (Raphael Krupinski, PR [17472](https://github.com/python/mypy/pull/17472))\n * Fix typechecking for async generators (Danny Yang, PR [17452](https://github.com/python/mypy/pull/17452))\n * Fix strict optional handling in attrs plugin (Ivan Levkivskyi, PR [17451](https://github.com/python/mypy/pull/17451))\n * Allow mixing ParamSpec and TypeVarTuple in Generic (Ivan Levkivskyi, PR [17450](https://github.com/python/mypy/pull/17450))\n * Improvements to `functools.partial` of types (Shantanu, PR [17898](https://github.com/python/mypy/pull/17898))\n * Make ReadOnly TypedDict items covariant (Jukka Lehtosalo, PR [17904](https://github.com/python/mypy/pull/17904))\n * Fix union callees with `functools.partial` (Jukka Lehtosalo, PR [17903](https://github.com/python/mypy/pull/17903))\n * Improve handling of generic functions with `functools.partial` (Ivan Levkivskyi, PR [17925](https://github.com/python/mypy/pull/17925))\n\n### Typeshed Updates\n\nPlease see [git log](https://github.com/python/typeshed/commits/main?after=91a58b07cdd807b1d965e04ba85af2adab8bf924+0&branch=main&path=stdlib) for full list of standard library typeshed stub changes.\n\n### Mypy 1.12.1\n * Fix crash when showing partially analyzed type in error message (Ivan Levkivskyi, PR [17961](https://github.com/python/mypy/pull/17961))\n * Fix iteration over union (when self type is involved) (Shantanu, PR [17976](https://github.com/python/mypy/pull/17976))\n * Fix type object with type var default in union context (Jukka Lehtosalo, PR [17991](https://github.com/python/mypy/pull/17991))\n * Revert change to `os.path` stubs affecting use of `os.PathLike[Any]` (Shantanu, PR [17995](https://github.com/python/mypy/pull/17995))\n\n### Acknowledgements\nThanks to all mypy contributors who contributed to this release:\n\n- Ali Hamdan\n- Anders Kaseorg\n- Bénédikt Tran\n- Brian Schubert\n- bzoracler\n- Chelsea Durazo\n- Danny Yang\n- Edgar Ramírez Mondragón\n- Eric Mark Martin\n- InSync\n- Ivan Levkivskyi\n- Jordandev678\n- Katrina Connors\n- Kirill Podoprigora\n- Marc Mueller\n- Max Muoto\n- Max Murin\n- Michael Carlstrom\n- Michael I Chen\n- Pradyun Gedam\n- quinn-sasha\n- Raphael Krupinski\n- Sebastian Rittau\n- Shantanu\n- sobolevn\n- Soubhik Kumar Mitra\n- Stanislav Terliakov\n- wyattscarpenter\n\nI’d also like to thank my employer, Dropbox, for supporting mypy development.\n\n\n## Mypy 1.11\n\nWe’ve just uploaded mypy 1.11 to the Python Package Index ([PyPI](https://pypi.org/project/mypy/)). Mypy is a static type checker for Python. This release includes new features, performance improvements and bug fixes. You can install it as follows:\n\n    python3 -m pip install -U mypy\n\nYou can read the full documentation for this release on [Read the Docs](http://mypy.readthedocs.io).\n\n### Support Python 3.12 Syntax for Generics (PEP 695)\n\nMypy now supports the new type parameter syntax introduced in Python 3.12 ([PEP 695](https://peps.python.org/pep-0695/)).\nThis feature is still experimental and must be enabled with the `--enable-incomplete-feature=NewGenericSyntax` flag, or with `enable_incomplete_feature = NewGenericSyntax` in the mypy configuration file.\nWe plan to enable this by default in the next mypy feature release.\n\nThis example demonstrates the new syntax:\n\n```python\n# Generic function\ndef f[T](x: T) -> T: ...\n\nreveal_type(f(1))  # Revealed type is 'int'\n\n# Generic class\nclass C[T]:\n    def __init__(self, x: T) -> None:\n       self.x = x\n\nc = C('a')\nreveal_type(c.x)  # Revealed type is 'str'\n\n# Type alias\ntype A[T] = C[list[T]]\n```\n\nThis feature was contributed by Jukka Lehtosalo.\n\n\n### Support for `functools.partial`\n\nMypy now type checks uses of `functools.partial`. Previously mypy would accept arbitrary arguments.\n\nThis example will now produce an error:\n\n```python\nfrom functools import partial\n\ndef f(a: int, b: str) -> None: ...\n\ng = partial(f, 1)\n\n# Argument has incompatible type \"int\"; expected \"str\"\ng(11)\n```\n\nThis feature was contributed by Shantanu (PR [16939](https://github.com/python/mypy/pull/16939)).\n\n\n### Stricter Checks for Untyped Overrides\n\nPast mypy versions didn't check if untyped methods were compatible with overridden methods. This would result in false negatives. Now mypy performs these checks when using `--check-untyped-defs`.\n\nFor example, this now generates an error if using `--check-untyped-defs`:\n\n```python\nclass Base:\n    def f(self, x: int = 0) -> None: ...\n\nclass Derived(Base):\n    # Signature incompatible with \"Base\"\n    def f(self): ...\n```\n\nThis feature was contributed by Steven Troxler (PR [17276](https://github.com/python/mypy/pull/17276)).\n\n\n### Type Inference Improvements\n\nThe new polymorphic inference algorithm introduced in mypy 1.5 is now used in more situations. This improves type inference involving generic higher-order functions, in particular.\n\nThis feature was contributed by Ivan Levkivskyi (PR [17348](https://github.com/python/mypy/pull/17348)).\n\nMypy now uses unions of tuple item types in certain contexts to enable more precise inferred types. Example:\n\n```python\nfor x in (1, 'x'):\n    # Previously inferred as 'object'\n    reveal_type(x)  # Revealed type is 'int | str'\n```\n\nThis was also contributed by Ivan Levkivskyi (PR [17408](https://github.com/python/mypy/pull/17408)).\n\n\n### Improvements to Detection of Overlapping Overloads\n\nThe details of how mypy checks if two `@overload` signatures are unsafely overlapping were overhauled. This both fixes some false positives, and allows mypy to detect additional unsafe signatures.\n\nThis feature was contributed by Ivan Levkivskyi (PR [17392](https://github.com/python/mypy/pull/17392)).\n\n\n### Better Support for Type Hints in Expressions\n\nMypy now allows more expressions that evaluate to valid type annotations in all expression contexts. The inferred types of these expressions are also sometimes more precise. Previously they were often `object`.\n\nThis example uses a union type that includes a callable type as an expression, and it no longer generates an error:\n\n```python\nfrom typing import Callable\n\nprint(Callable[[], int] | None)  # No error\n```\n\nThis feature was contributed by Jukka Lehtosalo (PR [17404](https://github.com/python/mypy/pull/17404)).\n\n\n### Mypyc Improvements\n\nMypyc now supports the new syntax for generics introduced in Python 3.12 (see above). Another notable improvement is significantly faster basic operations on `int` values.\n\n * Support Python 3.12 syntax for generic functions and classes (Jukka Lehtosalo, PR [17357](https://github.com/python/mypy/pull/17357))\n * Support Python 3.12 type alias syntax (Jukka Lehtosalo, PR [17384](https://github.com/python/mypy/pull/17384))\n * Fix ParamSpec (Shantanu, PR [17309](https://github.com/python/mypy/pull/17309))\n * Inline fast paths of integer unboxing operations (Jukka Lehtosalo, PR [17266](https://github.com/python/mypy/pull/17266))\n * Inline tagged integer arithmetic and bitwise operations (Jukka Lehtosalo, PR [17265](https://github.com/python/mypy/pull/17265))\n * Allow specifying primitives as pure (Jukka Lehtosalo, PR [17263](https://github.com/python/mypy/pull/17263))\n\n\n### Changes to Stubtest\n * Ignore `_ios_support` (Alex Waygood, PR [17270](https://github.com/python/mypy/pull/17270))\n * Improve support for Python 3.13 (Shantanu, PR [17261](https://github.com/python/mypy/pull/17261))\n\n\n### Changes to Stubgen\n * Gracefully handle invalid `Optional` and recognize aliases to PEP 604 unions (Ali Hamdan, PR [17386](https://github.com/python/mypy/pull/17386))\n * Fix for Python 3.13 (Jelle Zijlstra, PR [17290](https://github.com/python/mypy/pull/17290))\n * Preserve enum value initialisers (Shantanu, PR [17125](https://github.com/python/mypy/pull/17125))\n\n\n### Miscellaneous New Features\n * Add error format support and JSON output option via `--output json` (Tushar Sadhwani, PR [11396](https://github.com/python/mypy/pull/11396))\n * Support `enum.member` in Python 3.11+ (Nikita Sobolev, PR [17382](https://github.com/python/mypy/pull/17382))\n * Support `enum.nonmember` in Python 3.11+ (Nikita Sobolev, PR [17376](https://github.com/python/mypy/pull/17376))\n * Support `namedtuple.__replace__` in Python 3.13 (Shantanu, PR [17259](https://github.com/python/mypy/pull/17259))\n * Support `rename=True` in collections.namedtuple (Jelle Zijlstra, PR [17247](https://github.com/python/mypy/pull/17247))\n * Add support for `__spec__` (Shantanu, PR [14739](https://github.com/python/mypy/pull/14739))\n\n\n### Changes to Error Reporting\n * Mention `--enable-incomplete-feature=NewGenericSyntax` in messages (Shantanu, PR [17462](https://github.com/python/mypy/pull/17462))\n * Do not report plugin-generated methods with `explicit-override` (sobolevn, PR [17433](https://github.com/python/mypy/pull/17433))\n * Use and display namespaces for function type variables (Ivan Levkivskyi, PR [17311](https://github.com/python/mypy/pull/17311))\n * Fix false positive for Final local scope variable in Protocol (GiorgosPapoutsakis, PR [17308](https://github.com/python/mypy/pull/17308))\n * Use Never in more messages, use ambiguous in join (Shantanu, PR [17304](https://github.com/python/mypy/pull/17304))\n * Log full path to config file in verbose output (dexterkennedy, PR [17180](https://github.com/python/mypy/pull/17180))\n * Added `[prop-decorator]` code for unsupported property decorators (#14461) (Christopher Barber, PR [16571](https://github.com/python/mypy/pull/16571))\n * Suppress second error message with `:=` and `[truthy-bool]` (Nikita Sobolev, PR [15941](https://github.com/python/mypy/pull/15941))\n * Generate error for assignment of functional Enum to variable of different name (Shantanu, PR [16805](https://github.com/python/mypy/pull/16805))\n * Fix error reporting on cached run after uninstallation of third party library (Shantanu, PR [17420](https://github.com/python/mypy/pull/17420))\n\n\n### Fixes for Crashes\n * Fix daemon crash on invalid type in TypedDict (Ivan Levkivskyi, PR [17495](https://github.com/python/mypy/pull/17495))\n * Fix crash and bugs related to `partial()` (Ivan Levkivskyi, PR [17423](https://github.com/python/mypy/pull/17423))\n * Fix crash when overriding with unpacked TypedDict (Ivan Levkivskyi, PR [17359](https://github.com/python/mypy/pull/17359))\n * Fix crash on TypedDict unpacking for ParamSpec (Ivan Levkivskyi, PR [17358](https://github.com/python/mypy/pull/17358))\n * Fix crash involving recursive union of tuples (Ivan Levkivskyi, PR [17353](https://github.com/python/mypy/pull/17353))\n * Fix crash on invalid callable property override (Ivan Levkivskyi, PR [17352](https://github.com/python/mypy/pull/17352))\n * Fix crash on unpacking self in NamedTuple (Ivan Levkivskyi, PR [17351](https://github.com/python/mypy/pull/17351))\n * Fix crash on recursive alias with an optional type (Ivan Levkivskyi, PR [17350](https://github.com/python/mypy/pull/17350))\n * Fix crash on type comment inside generic definitions (Bénédikt Tran, PR [16849](https://github.com/python/mypy/pull/16849))\n\n\n### Changes to Documentation\n * Use inline config in documentation for optional error codes (Shantanu, PR [17374](https://github.com/python/mypy/pull/17374))\n * Use lower-case generics in documentation (Seo Sanghyeon, PR [17176](https://github.com/python/mypy/pull/17176))\n * Add documentation for show-error-code-links (GiorgosPapoutsakis, PR [17144](https://github.com/python/mypy/pull/17144))\n * Update CONTRIBUTING.md to include commands for Windows (GiorgosPapoutsakis, PR [17142](https://github.com/python/mypy/pull/17142))\n\n\n### Other Notable Improvements and Fixes\n * Fix ParamSpec inference against TypeVarTuple (Ivan Levkivskyi, PR [17431](https://github.com/python/mypy/pull/17431))\n * Fix explicit type for `partial` (Ivan Levkivskyi, PR [17424](https://github.com/python/mypy/pull/17424))\n * Always allow lambda calls (Ivan Levkivskyi, PR [17430](https://github.com/python/mypy/pull/17430))\n * Fix isinstance checks with PEP 604 unions containing None (Shantanu, PR [17415](https://github.com/python/mypy/pull/17415))\n * Fix self-referential upper bound in new-style type variables (Ivan Levkivskyi, PR [17407](https://github.com/python/mypy/pull/17407))\n * Consider overlap between instances and callables (Ivan Levkivskyi, PR [17389](https://github.com/python/mypy/pull/17389))\n * Allow new-style self-types in classmethods (Ivan Levkivskyi, PR [17381](https://github.com/python/mypy/pull/17381))\n * Fix isinstance with type aliases to PEP 604 unions (Shantanu, PR [17371](https://github.com/python/mypy/pull/17371))\n * Properly handle unpacks in overlap checks (Ivan Levkivskyi, PR [17356](https://github.com/python/mypy/pull/17356))\n * Fix type application for classes with generic constructors (Ivan Levkivskyi, PR [17354](https://github.com/python/mypy/pull/17354))\n * Update `typing_extensions` to >=4.6.0 to fix Python 3.12 error (Ben Brown, PR [17312](https://github.com/python/mypy/pull/17312))\n * Avoid \"does not return\" error in lambda (Shantanu, PR [17294](https://github.com/python/mypy/pull/17294))\n * Fix bug with descriptors in non-strict-optional mode (Max Murin, PR [17293](https://github.com/python/mypy/pull/17293))\n * Don’t leak unreachability from lambda body to surrounding scope (Anders Kaseorg, PR [17287](https://github.com/python/mypy/pull/17287))\n * Fix issues with non-ASCII characters on Windows (Alexander Leopold Shon, PR [17275](https://github.com/python/mypy/pull/17275))\n * Fix for type narrowing of negative integer literals (gilesgc, PR [17256](https://github.com/python/mypy/pull/17256))\n * Fix confusion between .py and .pyi files in mypy daemon (Valentin Stanciu, PR [17245](https://github.com/python/mypy/pull/17245))\n * Fix type of `tuple[X, Y]` expression (urnest, PR [17235](https://github.com/python/mypy/pull/17235))\n * Don't forget that a `TypedDict` was wrapped in `Unpack` after a `name-defined` error occurred (Christoph Tyralla, PR [17226](https://github.com/python/mypy/pull/17226))\n * Mark annotated argument as having an explicit, not inferred type (bzoracler, PR [17217](https://github.com/python/mypy/pull/17217))\n * Don't consider Enum private attributes as enum members (Ali Hamdan, PR [17182](https://github.com/python/mypy/pull/17182))\n * Fix Literal strings containing pipe characters (Jelle Zijlstra, PR [17148](https://github.com/python/mypy/pull/17148))\n\n\n### Typeshed Updates\n\nPlease see [git log](https://github.com/python/typeshed/commits/main?after=6dda799d8ad1d89e0f8aad7ac41d2d34bd838ace+0&branch=main&path=stdlib) for full list of standard library typeshed stub changes.\n\n### Mypy 1.11.1\n * Fix `RawExpressionType.accept` crash with `--cache-fine-grained` (Anders Kaseorg, PR [17588](https://github.com/python/mypy/pull/17588))\n * Fix PEP 604 isinstance caching (Shantanu, PR [17563](https://github.com/python/mypy/pull/17563))\n * Fix `typing.TypeAliasType` being undefined on python < 3.12 (Nikita Sobolev, PR [17558](https://github.com/python/mypy/pull/17558))\n * Fix `types.GenericAlias` lookup crash (Shantanu, PR [17543](https://github.com/python/mypy/pull/17543))\n\n### Mypy 1.11.2\n * Alternative fix for a union-like literal string (Ivan Levkivskyi, PR [17639](https://github.com/python/mypy/pull/17639))\n * Unwrap `TypedDict` item types before storing (Ivan Levkivskyi, PR [17640](https://github.com/python/mypy/pull/17640))\n\n### Acknowledgements\nThanks to all mypy contributors who contributed to this release:\n\n- Alex Waygood\n- Alexander Leopold Shon\n- Ali Hamdan\n- Anders Kaseorg\n- Ben Brown\n- Bénédikt Tran\n- bzoracler\n- Christoph Tyralla\n- Christopher Barber\n- dexterkennedy\n- gilesgc\n- GiorgosPapoutsakis\n- Ivan Levkivskyi\n- Jelle Zijlstra\n- Jukka Lehtosalo\n- Marc Mueller\n- Matthieu Devlin\n- Michael R. Crusoe\n- Nikita Sobolev\n- Seo Sanghyeon\n- Shantanu\n- sobolevn\n- Steven Troxler\n- Tadeu Manoel\n- Tamir Duberstein\n- Tushar Sadhwani\n- urnest\n- Valentin Stanciu\n\nI’d also like to thank my employer, Dropbox, for supporting mypy development.\n\n\n## Mypy 1.10\n\nWe’ve just uploaded mypy 1.10 to the Python Package Index ([PyPI](https://pypi.org/project/mypy/)). Mypy is a static type checker for Python. This release includes new features, performance improvements and bug fixes. You can install it as follows:\n\n    python3 -m pip install -U mypy\n\nYou can read the full documentation for this release on [Read the Docs](http://mypy.readthedocs.io).\n\n### Support TypeIs (PEP 742)\n\nMypy now supports `TypeIs` ([PEP 742](https://peps.python.org/pep-0742/)), which allows\nfunctions to narrow the type of a value, similar to `isinstance()`. Unlike `TypeGuard`,\n`TypeIs` can narrow in both the `if` and `else` branches of an if statement:\n\n```python\nfrom typing_extensions import TypeIs\n\ndef is_str(s: object) -> TypeIs[str]:\n    return isinstance(s, str)\n\ndef f(o: str | int) -> None:\n    if is_str(o):\n        # Type of o is 'str'\n        ...\n    else:\n        # Type of o is 'int'\n        ...\n```\n\n`TypeIs` will be added to the `typing` module in Python 3.13, but it\ncan be used on earlier Python versions by importing it from\n`typing_extensions`.\n\nThis feature was contributed by Jelle Zijlstra (PR [16898](https://github.com/python/mypy/pull/16898)).\n\n### Support TypeVar Defaults (PEP 696)\n\n[PEP 696](https://peps.python.org/pep-0696/) adds support for type parameter defaults.\nExample:\n\n```python\nfrom typing import Generic\nfrom typing_extensions import TypeVar\n\nT = TypeVar(\"T\", default=int)\n\nclass C(Generic[T]):\n   ...\n\nx: C = ...\ny: C[str] = ...\nreveal_type(x)  # C[int], because of the default\nreveal_type(y)  # C[str]\n```\n\nTypeVar defaults will be added to the `typing` module in Python 3.13, but they\ncan be used with earlier Python releases by importing `TypeVar` from\n`typing_extensions`.\n\nThis feature was contributed by Marc Mueller (PR [16878](https://github.com/python/mypy/pull/16878)\nand PR [16925](https://github.com/python/mypy/pull/16925)).\n\n### Support TypeAliasType (PEP 695)\nAs part of the initial steps towards implementing [PEP 695](https://peps.python.org/pep-0695/), mypy now supports `TypeAliasType`.\n`TypeAliasType` provides a backport of the new `type` statement in Python 3.12.\n\n```python\ntype ListOrSet[T] = list[T] | set[T]\n```\n\nis equivalent to:\n\n```python\nT = TypeVar(\"T\")\nListOrSet = TypeAliasType(\"ListOrSet\", list[T] | set[T], type_params=(T,))\n```\n\nExample of use in mypy:\n\n```python\nfrom typing_extensions import TypeAliasType, TypeVar\n\nNewUnionType = TypeAliasType(\"NewUnionType\", int | str)\nx: NewUnionType = 42\ny: NewUnionType = 'a'\nz: NewUnionType = object()  # error: Incompatible types in assignment (expression has type \"object\", variable has type \"int | str\")  [assignment]\n\nT = TypeVar(\"T\")\nListOrSet = TypeAliasType(\"ListOrSet\", list[T] | set[T], type_params=(T,))\na: ListOrSet[int] = [1, 2]\nb: ListOrSet[str] = {'a', 'b'}\nc: ListOrSet[str] = 'test'  # error: Incompatible types in assignment (expression has type \"str\", variable has type \"list[str] | set[str]\")  [assignment]\n```\n\n`TypeAliasType` was added to the `typing` module in Python 3.12, but it can be used with earlier Python releases by importing from `typing_extensions`.\n\nThis feature was contributed by Ali Hamdan (PR [16926](https://github.com/python/mypy/pull/16926), PR [17038](https://github.com/python/mypy/pull/17038) and PR [17053](https://github.com/python/mypy/pull/17053))\n\n### Detect Additional Unsafe Uses of super()\n\nMypy will reject unsafe uses of `super()` more consistently, when the target has a\ntrivial (empty) body. Example:\n\n```python\nclass Proto(Protocol):\n    def method(self) -> int: ...\n\nclass Sub(Proto):\n    def method(self) -> int:\n        return super().meth()  # Error (unsafe)\n```\n\nThis feature was contributed by Shantanu (PR [16756](https://github.com/python/mypy/pull/16756)).\n\n### Stubgen Improvements\n- Preserve empty tuple annotation (Ali Hamdan, PR [16907](https://github.com/python/mypy/pull/16907))\n- Add support for PEP 570 positional-only parameters (Ali Hamdan, PR [16904](https://github.com/python/mypy/pull/16904))\n- Replace obsolete typing aliases with builtin containers (Ali Hamdan, PR [16780](https://github.com/python/mypy/pull/16780))\n- Fix generated dataclass `__init__` signature (Ali Hamdan, PR [16906](https://github.com/python/mypy/pull/16906))\n\n### Mypyc Improvements\n\n- Provide an easier way to define IR-to-IR transforms (Jukka Lehtosalo, PR [16998](https://github.com/python/mypy/pull/16998))\n- Implement lowering pass and add primitives for int (in)equality (Jukka Lehtosalo, PR [17027](https://github.com/python/mypy/pull/17027))\n- Implement lowering for remaining tagged integer comparisons (Jukka Lehtosalo, PR [17040](https://github.com/python/mypy/pull/17040))\n- Optimize away some bool/bit registers (Jukka Lehtosalo, PR [17022](https://github.com/python/mypy/pull/17022))\n- Remangle redefined names produced by async with (Richard Si, PR [16408](https://github.com/python/mypy/pull/16408))\n- Optimize TYPE_CHECKING to False at Runtime (Srinivas Lade, PR [16263](https://github.com/python/mypy/pull/16263))\n- Fix compilation of unreachable comprehensions (Richard Si, PR [15721](https://github.com/python/mypy/pull/15721))\n- Don't crash on non-inlinable final local reads (Richard Si, PR [15719](https://github.com/python/mypy/pull/15719))\n\n### Documentation Improvements\n- Import `TypedDict` from `typing` instead of `typing_extensions` (Riccardo Di Maio, PR [16958](https://github.com/python/mypy/pull/16958))\n- Add missing `mutable-override` to section title (James Braza, PR [16886](https://github.com/python/mypy/pull/16886))\n\n### Error Reporting Improvements\n\n- Use lower-case generics more consistently in error messages (Jukka Lehtosalo, PR [17035](https://github.com/python/mypy/pull/17035))\n\n### Other Notable Changes and Fixes\n- Fix incorrect inferred type when accessing descriptor on union type (Matthieu Devlin, PR [16604](https://github.com/python/mypy/pull/16604))\n- Fix crash when expanding invalid `Unpack` in a `Callable` alias (Ali Hamdan, PR [17028](https://github.com/python/mypy/pull/17028))\n- Fix false positive when string formatting with string enum (roberfi, PR [16555](https://github.com/python/mypy/pull/16555))\n- Narrow individual items when matching a tuple to a sequence pattern (Loïc Simon, PR [16905](https://github.com/python/mypy/pull/16905))\n- Fix false positive from type variable within TypeGuard or TypeIs (Evgeniy Slobodkin, PR [17071](https://github.com/python/mypy/pull/17071))\n- Improve `yield from` inference for unions of generators (Shantanu, PR [16717](https://github.com/python/mypy/pull/16717))\n- Fix emulating hash method logic in `attrs` classes (Hashem, PR [17016](https://github.com/python/mypy/pull/17016))\n- Add reverted typeshed commit that uses `ParamSpec` for `functools.wraps` (Tamir Duberstein, PR [16942](https://github.com/python/mypy/pull/16942))\n- Fix type narrowing for `types.EllipsisType` (Shantanu, PR [17003](https://github.com/python/mypy/pull/17003))\n- Fix single item enum match type exhaustion (Oskari Lehto, PR [16966](https://github.com/python/mypy/pull/16966))\n- Improve type inference with empty collections (Marc Mueller, PR [16994](https://github.com/python/mypy/pull/16994))\n- Fix override checking for decorated property (Shantanu, PR [16856](https://github.com/python/mypy/pull/16856))\n- Fix narrowing on match with function subject (Edward Paget, PR [16503](https://github.com/python/mypy/pull/16503))\n- Allow `+N` within `Literal[...]` (Spencer Brown, PR [16910](https://github.com/python/mypy/pull/16910))\n- Experimental: Support TypedDict within `type[...]` (Marc Mueller, PR [16963](https://github.com/python/mypy/pull/16963))\n- Experimtental: Fix issue with TypedDict with optional keys in `type[...]` (Marc Mueller, PR [17068](https://github.com/python/mypy/pull/17068))\n\n### Typeshed Updates\n\nPlease see [git log](https://github.com/python/typeshed/commits/main?after=6dda799d8ad1d89e0f8aad7ac41d2d34bd838ace+0&branch=main&path=stdlib) for full list of standard library typeshed stub changes.\n\n### Mypy 1.10.1\n\n- Fix error reporting on cached run after uninstallation of third party library (Shantanu, PR [17420](https://github.com/python/mypy/pull/17420))\n\n### Acknowledgements\nThanks to all mypy contributors who contributed to this release:\n\n- Alex Waygood\n- Ali Hamdan\n- Edward Paget\n- Evgeniy Slobodkin\n- Hashem\n- hesam\n- Hugo van Kemenade\n- Ihor\n- James Braza\n- Jelle Zijlstra\n- jhance\n- Jukka Lehtosalo\n- Loïc Simon\n- Marc Mueller\n- Matthieu Devlin\n- Michael R. Crusoe\n- Nikita Sobolev\n- Oskari Lehto\n- Riccardo Di Maio\n- Richard Si\n- roberfi\n- Roman Solomatin\n- Sam Xifaras\n- Shantanu\n- Spencer Brown\n- Srinivas Lade\n- Tamir Duberstein\n- youkaichao\n\nI’d also like to thank my employer, Dropbox, for supporting mypy development.\n\n\n## Mypy 1.9\n\nWe’ve just uploaded mypy 1.9 to the Python Package Index ([PyPI](https://pypi.org/project/mypy/)). Mypy is a static type checker for Python. This release includes new features, performance improvements and bug fixes. You can install it as follows:\n\n    python3 -m pip install -U mypy\n\nYou can read the full documentation for this release on [Read the Docs](http://mypy.readthedocs.io).\n\n### Breaking Changes\n\nBecause the version of typeshed we use in mypy 1.9 doesn't support 3.7, neither does mypy 1.9. (Jared Hance, PR [16883](https://github.com/python/mypy/pull/16883))\n\nWe are planning to enable\n[local partial types](https://mypy.readthedocs.io/en/stable/command_line.html#cmdoption-mypy-local-partial-types) (enabled via the\n`--local-partial-types` flag) later this year by default. This change\nwas announced years ago, but now it's finally happening. This is a\nmajor backward-incompatible change, so we'll probably include it as\npart of the upcoming mypy 2.0 release. This makes daemon and\nnon-daemon mypy runs have the same behavior by default.\n\nLocal partial types can also be enabled in the mypy config file:\n```\nlocal_partial_types = True\n```\n\nWe are looking at providing a tool to make it easier to migrate\nprojects to use `--local-partial-types`, but it's not yet clear whether\nthis is practical. The migration usually involves adding some\nexplicit type annotations to module-level and class-level variables.\n\n### Basic Support for Type Parameter Defaults (PEP 696)\n\nThis release contains new experimental support for type parameter\ndefaults ([PEP 696](https://peps.python.org/pep-0696)). Please try it\nout! This feature was contributed by Marc Mueller.\n\nSince this feature will be officially introduced in the next Python\nfeature release (3.13), you will need to import `TypeVar`, `ParamSpec`\nor `TypeVarTuple` from `typing_extensions` to use defaults for now.\n\nThis example adapted from the PEP defines a default for `BotT`:\n```python\nfrom typing import Generic\nfrom typing_extensions import TypeVar\n\nclass Bot: ...\n\nBotT = TypeVar(\"BotT\", bound=Bot, default=Bot)\n\nclass Context(Generic[BotT]):\n    bot: BotT\n\nclass MyBot(Bot): ...\n\n# type is Bot (the default)\nreveal_type(Context().bot)\n# type is MyBot\nreveal_type(Context[MyBot]().bot)\n```\n\n### Type-checking Improvements\n * Fix missing type store for overloads (Marc Mueller, PR [16803](https://github.com/python/mypy/pull/16803))\n * Fix `'WriteToConn' object has no attribute 'flush'` (Charlie Denton, PR [16801](https://github.com/python/mypy/pull/16801))\n * Improve TypeAlias error messages (Marc Mueller, PR [16831](https://github.com/python/mypy/pull/16831))\n * Support narrowing unions that include `type[None]` (Christoph Tyralla, PR [16315](https://github.com/python/mypy/pull/16315))\n * Support TypedDict functional syntax as class base type (anniel-stripe, PR [16703](https://github.com/python/mypy/pull/16703))\n * Accept multiline quoted annotations (Shantanu, PR [16765](https://github.com/python/mypy/pull/16765))\n * Allow unary + in `Literal` (Jelle Zijlstra, PR [16729](https://github.com/python/mypy/pull/16729))\n * Substitute type variables in return type of static methods (Kouroche Bouchiat, PR [16670](https://github.com/python/mypy/pull/16670))\n * Consider TypeVarTuple to be invariant (Marc Mueller, PR [16759](https://github.com/python/mypy/pull/16759))\n * Add `alias` support to `field()` in `attrs` plugin (Nikita Sobolev, PR [16610](https://github.com/python/mypy/pull/16610))\n * Improve attrs hashability detection (Tin Tvrtković, PR [16556](https://github.com/python/mypy/pull/16556))\n\n### Performance Improvements\n\n * Speed up finding function type variables (Jukka Lehtosalo, PR [16562](https://github.com/python/mypy/pull/16562))\n\n### Documentation Updates\n\n * Document supported values for `--enable-incomplete-feature` in \"mypy --help\" (Froger David, PR [16661](https://github.com/python/mypy/pull/16661))\n * Update new type system discussion links (thomaswhaley, PR [16841](https://github.com/python/mypy/pull/16841))\n * Add missing class instantiation to cheat sheet (Aleksi Tarvainen, PR [16817](https://github.com/python/mypy/pull/16817))\n * Document how evil `--no-strict-optional` is (Shantanu, PR [16731](https://github.com/python/mypy/pull/16731))\n * Improve mypy daemon documentation note about local partial types (Makonnen Makonnen, PR [16782](https://github.com/python/mypy/pull/16782))\n * Fix numbering error (Stefanie Molin, PR [16838](https://github.com/python/mypy/pull/16838))\n * Various documentation improvements (Shantanu, PR [16836](https://github.com/python/mypy/pull/16836))\n\n### Stubtest Improvements\n * Ignore private function/method parameters when they are missing from the stub (private parameter names start with a single underscore and have a default) (PR [16507](https://github.com/python/mypy/pull/16507))\n * Ignore a new protocol dunder (Alex Waygood, PR [16895](https://github.com/python/mypy/pull/16895))\n * Private parameters can be omitted (Sebastian Rittau, PR [16507](https://github.com/python/mypy/pull/16507))\n * Add support for setting enum members to \"...\" (Jelle Zijlstra, PR [16807](https://github.com/python/mypy/pull/16807))\n * Adjust symbol table logic (Shantanu, PR [16823](https://github.com/python/mypy/pull/16823))\n * Fix posisitional-only handling in overload resolution (Shantanu, PR [16750](https://github.com/python/mypy/pull/16750))\n\n### Stubgen Improvements\n * Fix crash on star unpack of TypeVarTuple (Ali Hamdan, PR [16869](https://github.com/python/mypy/pull/16869))\n * Use PEP 604 unions everywhere (Ali Hamdan, PR [16519](https://github.com/python/mypy/pull/16519))\n * Do not ignore property deleter (Ali Hamdan, PR [16781](https://github.com/python/mypy/pull/16781))\n * Support type stub generation for `staticmethod` (WeilerMarcel, PR [14934](https://github.com/python/mypy/pull/14934))\n\n### Acknowledgements\n\n​Thanks to all mypy contributors who contributed to this release:\n\n- Aleksi Tarvainen\n- Alex Waygood\n- Ali Hamdan\n- anniel-stripe\n- Charlie Denton\n- Christoph Tyralla\n- Dheeraj\n- Fabian Keller\n- Fabian Lewis\n- Froger David\n- Ihor\n- Jared Hance\n- Jelle Zijlstra\n- Jukka Lehtosalo\n- Kouroche Bouchiat\n- Lukas Geiger\n- Maarten Huijsmans\n- Makonnen Makonnen\n- Marc Mueller\n- Nikita Sobolev\n- Sebastian Rittau\n- Shantanu\n- Stefanie Molin\n- Stephen Morton\n- thomaswhaley\n- Tin Tvrtković\n- WeilerMarcel\n- Wesley Collin Wright\n- zipperer\n\nI’d also like to thank my employer, Dropbox, for supporting mypy development.\n\n## Mypy 1.8\n\nWe’ve just uploaded mypy 1.8 to the Python Package Index ([PyPI](https://pypi.org/project/mypy/)). Mypy is a static type checker for Python. This release includes new features, performance improvements and bug fixes. You can install it as follows:\n\n    python3 -m pip install -U mypy\n\nYou can read the full documentation for this release on [Read the Docs](http://mypy.readthedocs.io).\n\n### Type-checking Improvements\n * Do not intersect types in isinstance checks if at least one is final (Christoph Tyralla, PR [16330](https://github.com/python/mypy/pull/16330))\n * Detect that `@final` class without `__bool__` cannot have falsey instances (Ilya Priven, PR [16566](https://github.com/python/mypy/pull/16566))\n * Do not allow `TypedDict` classes with extra keywords (Nikita Sobolev, PR [16438](https://github.com/python/mypy/pull/16438))\n * Do not allow class-level keywords for `NamedTuple` (Nikita Sobolev, PR [16526](https://github.com/python/mypy/pull/16526))\n * Make imprecise constraints handling more robust (Ivan Levkivskyi, PR [16502](https://github.com/python/mypy/pull/16502))\n * Fix strict-optional in extending generic TypedDict (Ivan Levkivskyi, PR [16398](https://github.com/python/mypy/pull/16398))\n * Allow type ignores of PEP 695 constructs (Shantanu, PR [16608](https://github.com/python/mypy/pull/16608))\n * Enable `type_check_only` support for `TypedDict` and `NamedTuple` (Nikita Sobolev, PR [16469](https://github.com/python/mypy/pull/16469))\n\n### Performance Improvements\n * Add fast path to analyzing special form assignments (Jukka Lehtosalo, PR [16561](https://github.com/python/mypy/pull/16561))\n\n### Improvements to Error Reporting\n * Don't show documentation links for plugin error codes (Ivan Levkivskyi, PR [16383](https://github.com/python/mypy/pull/16383))\n * Improve error messages for `super` checks and add more tests (Nikita Sobolev, PR [16393](https://github.com/python/mypy/pull/16393))\n * Add error code for mutable covariant override (Ivan Levkivskyi, PR [16399](https://github.com/python/mypy/pull/16399))\n\n### Stubgen Improvements\n * Preserve simple defaults in function signatures (Ali Hamdan, PR [15355](https://github.com/python/mypy/pull/15355))\n * Include `__all__` in output (Jelle Zijlstra, PR [16356](https://github.com/python/mypy/pull/16356))\n * Fix stubgen regressions with pybind11 and mypy 1.7 (Chad Dombrova, PR [16504](https://github.com/python/mypy/pull/16504))\n\n### Stubtest Improvements\n * Improve handling of unrepresentable defaults (Jelle Zijlstra, PR [16433](https://github.com/python/mypy/pull/16433))\n * Print more helpful errors if a function is missing from stub (Alex Waygood, PR [16517](https://github.com/python/mypy/pull/16517))\n * Support `@type_check_only` decorator (Nikita Sobolev, PR [16422](https://github.com/python/mypy/pull/16422))\n * Warn about missing `__del__` (Shantanu, PR [16456](https://github.com/python/mypy/pull/16456))\n * Fix crashes with some uses of `final` and `deprecated` (Shantanu, PR [16457](https://github.com/python/mypy/pull/16457))\n\n### Fixes to Crashes\n * Fix crash with type alias to `Callable[[Unpack[Tuple[Any, ...]]], Any]` (Alex Waygood, PR [16541](https://github.com/python/mypy/pull/16541))\n * Fix crash on TypeGuard in `__call__` (Ivan Levkivskyi, PR [16516](https://github.com/python/mypy/pull/16516))\n * Fix crash on invalid enum in method (Ivan Levkivskyi, PR [16511](https://github.com/python/mypy/pull/16511))\n * Fix crash on unimported Any in TypedDict (Ivan Levkivskyi, PR [16510](https://github.com/python/mypy/pull/16510))\n\n### Documentation Updates\n * Update soft-error-limit default value to -1 (Sveinung Gundersen, PR [16542](https://github.com/python/mypy/pull/16542))\n * Support Sphinx 7.x (Michael R. Crusoe, PR [16460](https://github.com/python/mypy/pull/16460))\n\n### Other Notable Changes and Fixes\n * Allow mypy to output a junit file with per-file results (Matthew Wright, PR [16388](https://github.com/python/mypy/pull/16388))\n\n### Typeshed Updates\n\nPlease see [git log](https://github.com/python/typeshed/commits/main?after=4a854366e03dee700109f8e758a08b2457ea2f51+0&branch=main&path=stdlib) for full list of standard library typeshed stub changes.\n\n### Acknowledgements\n\n​Thanks to all mypy contributors who contributed to this release:\n\n- Alex Waygood\n- Ali Hamdan\n- Chad Dombrova\n- Christoph Tyralla\n- Ilya Priven\n- Ivan Levkivskyi\n- Jelle Zijlstra\n- Jukka Lehtosalo\n- Marcel Telka\n- Matthew Wright\n- Michael R. Crusoe\n- Nikita Sobolev\n- Ole Peder Brandtzæg\n- robjhornby\n- Shantanu\n- Sveinung Gundersen\n- Valentin Stanciu\n\nI’d also like to thank my employer, Dropbox, for supporting mypy development.\n\nPosted by Wesley Collin Wright\n\n## Mypy 1.7\n\nWe’ve just uploaded mypy 1.7 to the Python Package Index ([PyPI](https://pypi.org/project/mypy/)). Mypy is a static type checker for Python. This release includes new features, performance improvements and bug fixes. You can install it as follows:\n\n    python3 -m pip install -U mypy\n\nYou can read the full documentation for this release on [Read the Docs](http://mypy.readthedocs.io).\n\n### Using TypedDict for `**kwargs` Typing\n\nMypy now has support for using `Unpack[...]` with a TypedDict type to annotate `**kwargs` arguments enabled by default. Example:\n\n```python\n# Or 'from typing_extensions import ...'\nfrom typing import TypedDict, Unpack\n\nclass Person(TypedDict):\n    name: str\n    age: int\n\ndef foo(**kwargs: Unpack[Person]) -> None:\n    ...\n\nfoo(name=\"x\", age=1)  # Ok\nfoo(name=1)  # Error\n```\n\nThe definition of `foo` above is equivalent to the one below, with keyword-only arguments `name` and `age`:\n\n```python\ndef foo(*, name: str, age: int) -> None:\n    ...\n```\n\nRefer to [PEP 692](https://peps.python.org/pep-0692/) for more information. Note that unlike in the current version of the PEP, mypy always treats signatures with `Unpack[SomeTypedDict]` as equivalent to their expanded forms with explicit keyword arguments, and there aren't special type checking rules for TypedDict arguments.\n\nThis was contributed by Ivan Levkivskyi back in 2022 (PR [13471](https://github.com/python/mypy/pull/13471)).\n\n### TypeVarTuple Support Enabled (Experimental)\n\nMypy now has support for variadic generics (TypeVarTuple) enabled by default, as an experimental feature. Refer to [PEP 646](https://peps.python.org/pep-0646/) for the details.\n\nTypeVarTuple was implemented by Jared Hance and Ivan Levkivskyi over several mypy releases, with help from Jukka Lehtosalo.\n\nChanges included in this release:\n\n * Fix handling of tuple type context with unpacks (Ivan Levkivskyi, PR [16444](https://github.com/python/mypy/pull/16444))\n * Handle TypeVarTuples when checking overload constraints (robjhornby, PR [16428](https://github.com/python/mypy/pull/16428))\n * Enable Unpack/TypeVarTuple support (Ivan Levkivskyi, PR [16354](https://github.com/python/mypy/pull/16354))\n * Fix crash on unpack call special-casing (Ivan Levkivskyi, PR [16381](https://github.com/python/mypy/pull/16381))\n * Some final touches for variadic types support (Ivan Levkivskyi, PR [16334](https://github.com/python/mypy/pull/16334))\n * Support PEP-646 and PEP-692 in the same callable (Ivan Levkivskyi, PR [16294](https://github.com/python/mypy/pull/16294))\n * Support new `*` syntax for variadic types (Ivan Levkivskyi, PR [16242](https://github.com/python/mypy/pull/16242))\n * Correctly handle variadic instances with empty arguments (Ivan Levkivskyi, PR [16238](https://github.com/python/mypy/pull/16238))\n * Correctly handle runtime type applications of variadic types (Ivan Levkivskyi, PR [16240](https://github.com/python/mypy/pull/16240))\n * Support variadic tuple packing/unpacking (Ivan Levkivskyi, PR [16205](https://github.com/python/mypy/pull/16205))\n * Better support for variadic calls and indexing (Ivan Levkivskyi, PR [16131](https://github.com/python/mypy/pull/16131))\n * Subtyping and inference of user-defined variadic types (Ivan Levkivskyi, PR [16076](https://github.com/python/mypy/pull/16076))\n * Complete type analysis of variadic types (Ivan Levkivskyi, PR [15991](https://github.com/python/mypy/pull/15991))\n\n### New Way of Installing Mypyc Dependencies\n\nIf you want to install package dependencies needed by mypyc (not just mypy), you should now install `mypy[mypyc]` instead of just `mypy`:\n\n```\npython3 -m pip install -U 'mypy[mypyc]'\n```\n\nMypy has many more users than mypyc, so always installing mypyc dependencies would often bring unnecessary dependencies.\n\nThis change was contributed by Shantanu (PR [16229](https://github.com/python/mypy/pull/16229)).\n\n### New Rules for Re-exports\n\nMypy no longer considers an import such as `import a.b as b` as an explicit re-export. The old behavior was arguably inconsistent and surprising. This may impact some stub packages, such as older versions of `types-six`. You can change the import to `from a import b as b`, if treating the import as a re-export was intentional.\n\nThis change was contributed by Anders Kaseorg (PR [14086](https://github.com/python/mypy/pull/14086)).\n\n### Improved Type Inference\n\nThe new type inference algorithm that was recently introduced to mypy (but was not enabled by default) is now enabled by default. It improves type inference of calls to generic callables where an argument is also a generic callable, in particular. You can use `--old-type-inference` to disable the new behavior.\n\nThe new algorithm can (rarely) produce different error messages, different error codes, or errors reported on different lines. This is more likely in cases where generic types were used incorrectly.\n\nThe new type inference algorithm was contributed by Ivan Levkivskyi. PR [16345](https://github.com/python/mypy/pull/16345) enabled it by default.\n\n### Narrowing Tuple Types Using len()\n\nMypy now can narrow tuple types using `len()` checks. Example:\n\n```python\ndef f(t: tuple[int, int] | tuple[int, int, int]) -> None:\n    if len(t) == 2:\n        a, b = t   # Ok\n    ...\n```\n\nThis feature was contributed by Ivan Levkivskyi (PR [16237](https://github.com/python/mypy/pull/16237)).\n\n### More Precise Tuple Lengths (Experimental)\n\nMypy supports experimental, more precise checking of tuple type lengths through `--enable-incomplete-feature=PreciseTupleTypes`. Refer to the [documentation](https://mypy.readthedocs.io/en/latest/command_line.html#enabling-incomplete-experimental-features) for more information.\n\nMore generally, we are planning to use `--enable-incomplete-feature` to introduce experimental features that would benefit from community feedback.\n\nThis feature was contributed by Ivan Levkivskyi (PR [16237](https://github.com/python/mypy/pull/16237)).\n\n### Mypy Changelog\n\nWe now maintain a [changelog](https://github.com/python/mypy/blob/master/CHANGELOG.md) in the mypy Git repository. It mirrors the contents of [mypy release blog posts](https://mypy-lang.blogspot.com/). We will continue to also publish release blog posts. In the future, release blog posts will be created based on the changelog near a release date.\n\nThis was contributed by Shantanu (PR [16280](https://github.com/python/mypy/pull/16280)).\n\n### Mypy Daemon Improvements\n\n * Fix daemon crash caused by deleted submodule (Jukka Lehtosalo, PR [16370](https://github.com/python/mypy/pull/16370))\n * Fix file reloading in dmypy with --export-types (Ivan Levkivskyi, PR [16359](https://github.com/python/mypy/pull/16359))\n * Fix dmypy inspect on Windows (Ivan Levkivskyi, PR [16355](https://github.com/python/mypy/pull/16355))\n * Fix dmypy inspect for namespace packages (Ivan Levkivskyi, PR [16357](https://github.com/python/mypy/pull/16357))\n * Fix return type change to optional in generic function (Jukka Lehtosalo, PR [16342](https://github.com/python/mypy/pull/16342))\n * Fix daemon false positives related to module-level `__getattr__` (Jukka Lehtosalo, PR [16292](https://github.com/python/mypy/pull/16292))\n * Fix daemon crash related to ABCs (Jukka Lehtosalo, PR [16275](https://github.com/python/mypy/pull/16275))\n * Stream dmypy output instead of dumping everything at the end (Valentin Stanciu, PR [16252](https://github.com/python/mypy/pull/16252))\n * Make sure all dmypy errors are shown (Valentin Stanciu, PR [16250](https://github.com/python/mypy/pull/16250))\n\n### Mypyc Improvements\n\n * Generate error on duplicate function definitions (Jukka Lehtosalo, PR [16309](https://github.com/python/mypy/pull/16309))\n * Don't crash on unreachable statements (Jukka Lehtosalo, PR [16311](https://github.com/python/mypy/pull/16311))\n * Avoid cyclic reference in nested functions (Jukka Lehtosalo, PR [16268](https://github.com/python/mypy/pull/16268))\n * Fix direct `__dict__` access on inner functions in new Python (Shantanu, PR [16084](https://github.com/python/mypy/pull/16084))\n * Make tuple packing and unpacking more efficient (Jukka Lehtosalo, PR [16022](https://github.com/python/mypy/pull/16022))\n\n### Improvements to Error Reporting\n\n * Update starred expression error message to match CPython (Cibin Mathew, PR [16304](https://github.com/python/mypy/pull/16304))\n * Fix error code of \"Maybe you forgot to use await\" note (Jelle Zijlstra, PR [16203](https://github.com/python/mypy/pull/16203))\n * Use error code `[unsafe-overload]` for unsafe overloads, instead of `[misc]` (Randolf Scholz, PR [16061](https://github.com/python/mypy/pull/16061))\n * Reword the error message related to void functions (Albert Tugushev, PR [15876](https://github.com/python/mypy/pull/15876))\n * Represent bottom type as Never in messages (Shantanu, PR [15996](https://github.com/python/mypy/pull/15996))\n * Add hint for AsyncIterator incompatible return type (Ilya Priven, PR [15883](https://github.com/python/mypy/pull/15883))\n * Don't suggest stubs packages where the runtime package now ships with types (Alex Waygood, PR [16226](https://github.com/python/mypy/pull/16226))\n\n### Performance Improvements\n\n * Speed up type argument checking (Jukka Lehtosalo, PR [16353](https://github.com/python/mypy/pull/16353))\n * Add fast path for checking self types (Jukka Lehtosalo, PR [16352](https://github.com/python/mypy/pull/16352))\n * Cache information about whether file is typeshed file (Jukka Lehtosalo, PR [16351](https://github.com/python/mypy/pull/16351))\n * Skip expensive `repr()` in logging call when not needed (Jukka Lehtosalo, PR [16350](https://github.com/python/mypy/pull/16350))\n\n### Attrs and Dataclass Improvements\n\n * `dataclass.replace`: Allow transformed classes (Ilya Priven, PR [15915](https://github.com/python/mypy/pull/15915))\n * `dataclass.replace`: Fall through to typeshed signature (Ilya Priven, PR [15962](https://github.com/python/mypy/pull/15962))\n * Document `dataclass_transform` behavior (Ilya Priven, PR [16017](https://github.com/python/mypy/pull/16017))\n * `attrs`: Remove fields type check (Ilya Priven, PR [15983](https://github.com/python/mypy/pull/15983))\n * `attrs`, `dataclasses`: Don't enforce slots when base class doesn't (Ilya Priven, PR [15976](https://github.com/python/mypy/pull/15976))\n * Fix crash on dataclass field / property collision (Nikita Sobolev, PR [16147](https://github.com/python/mypy/pull/16147))\n\n### Stubgen Improvements\n\n * Write stubs with utf-8 encoding (Jørgen Lind, PR [16329](https://github.com/python/mypy/pull/16329))\n * Fix missing property setter in semantic analysis mode (Ali Hamdan, PR [16303](https://github.com/python/mypy/pull/16303))\n * Unify C extension and pure python stub generators with object oriented design (Chad Dombrova, PR [15770](https://github.com/python/mypy/pull/15770))\n * Multiple fixes to the generated imports (Ali Hamdan, PR [15624](https://github.com/python/mypy/pull/15624))\n * Generate valid dataclass stubs (Ali Hamdan, PR [15625](https://github.com/python/mypy/pull/15625))\n\n### Fixes to Crashes\n\n * Fix incremental mode crash on TypedDict in method (Ivan Levkivskyi, PR [16364](https://github.com/python/mypy/pull/16364))\n * Fix crash on star unpack in TypedDict (Ivan Levkivskyi, PR [16116](https://github.com/python/mypy/pull/16116))\n * Fix crash on malformed TypedDict in incremental mode (Ivan Levkivskyi, PR [16115](https://github.com/python/mypy/pull/16115))\n * Fix crash with report generation on namespace packages (Shantanu, PR [16019](https://github.com/python/mypy/pull/16019))\n * Fix crash when parsing error code config with typo (Shantanu, PR [16005](https://github.com/python/mypy/pull/16005))\n * Fix `__post_init__()` internal error (Ilya Priven, PR [16080](https://github.com/python/mypy/pull/16080))\n\n### Documentation Updates\n\n * Make it easier to copy commands from README (Hamir Mahal, PR [16133](https://github.com/python/mypy/pull/16133))\n * Document and rename `[overload-overlap]` error code (Shantanu, PR [16074](https://github.com/python/mypy/pull/16074))\n * Document `--force-uppercase-builtins` and `--force-union-syntax` (Nikita Sobolev, PR [16049](https://github.com/python/mypy/pull/16049))\n * Document `force_union_syntax` and `force_uppercase_builtins` (Nikita Sobolev, PR [16048](https://github.com/python/mypy/pull/16048))\n * Document we're not tracking relationships between symbols (Ilya Priven, PR [16018](https://github.com/python/mypy/pull/16018))\n\n### Other Notable Changes and Fixes\n\n * Propagate narrowed types to lambda expressions (Ivan Levkivskyi, PR [16407](https://github.com/python/mypy/pull/16407))\n * Avoid importing from `setuptools._distutils` (Shantanu, PR [16348](https://github.com/python/mypy/pull/16348))\n * Delete recursive aliases flags (Ivan Levkivskyi, PR [16346](https://github.com/python/mypy/pull/16346))\n * Properly use proper subtyping for callables (Ivan Levkivskyi, PR [16343](https://github.com/python/mypy/pull/16343))\n * Use upper bound as inference fallback more consistently (Ivan Levkivskyi, PR [16344](https://github.com/python/mypy/pull/16344))\n * Add `[unimported-reveal]` error code (Nikita Sobolev, PR [16271](https://github.com/python/mypy/pull/16271))\n * Add `|=` and `|` operators support for `TypedDict` (Nikita Sobolev, PR [16249](https://github.com/python/mypy/pull/16249))\n * Clarify variance convention for Parameters (Ivan Levkivskyi, PR [16302](https://github.com/python/mypy/pull/16302))\n * Correctly recognize `typing_extensions.NewType` (Ganden Schaffner, PR [16298](https://github.com/python/mypy/pull/16298))\n * Fix partially defined in the case of missing type maps (Shantanu, PR [15995](https://github.com/python/mypy/pull/15995))\n * Use SPDX license identifier (Nikita Sobolev, PR [16230](https://github.com/python/mypy/pull/16230))\n * Make `__qualname__` and `__module__` available in class bodies (Anthony Sottile, PR [16215](https://github.com/python/mypy/pull/16215))\n * stubtest: Hint when args in stub need to be keyword-only (Alex Waygood, PR [16210](https://github.com/python/mypy/pull/16210))\n * Tuple slice should not propagate fallback (Thomas Grainger, PR [16154](https://github.com/python/mypy/pull/16154))\n * Fix cases of type object handling for overloads (Shantanu, PR [16168](https://github.com/python/mypy/pull/16168))\n * Fix walrus interaction with empty collections (Ivan Levkivskyi, PR [16197](https://github.com/python/mypy/pull/16197))\n * Use type variable bound when it appears as actual during inference (Ivan Levkivskyi, PR [16178](https://github.com/python/mypy/pull/16178))\n * Use upper bounds as fallback solutions for inference (Ivan Levkivskyi, PR [16184](https://github.com/python/mypy/pull/16184))\n * Special-case type inference of empty collections (Ivan Levkivskyi, PR [16122](https://github.com/python/mypy/pull/16122))\n * Allow TypedDict unpacking in Callable types (Ivan Levkivskyi, PR [16083](https://github.com/python/mypy/pull/16083))\n * Fix inference for overloaded `__call__` with generic self (Shantanu, PR [16053](https://github.com/python/mypy/pull/16053))\n * Call dynamic class hook on generic classes (Petter Friberg, PR [16052](https://github.com/python/mypy/pull/16052))\n * Preserve implicitly exported types via attribute access (Shantanu, PR [16129](https://github.com/python/mypy/pull/16129))\n * Fix a stubtest bug (Alex Waygood)\n * Fix `tuple[Any, ...]` subtyping (Shantanu, PR [16108](https://github.com/python/mypy/pull/16108))\n * Lenient handling of trivial Callable suffixes (Ivan Levkivskyi, PR [15913](https://github.com/python/mypy/pull/15913))\n * Add `add_overloaded_method_to_class` helper for plugins (Nikita Sobolev, PR [16038](https://github.com/python/mypy/pull/16038))\n * Bundle `misc/proper_plugin.py` as a part of `mypy` (Nikita Sobolev, PR [16036](https://github.com/python/mypy/pull/16036))\n * Fix `case Any()` in match statement (DS/Charlie, PR [14479](https://github.com/python/mypy/pull/14479))\n * Make iterable logic more consistent (Shantanu, PR [16006](https://github.com/python/mypy/pull/16006))\n * Fix inference for properties with `__call__` (Shantanu, PR [15926](https://github.com/python/mypy/pull/15926))\n\n### Typeshed Updates\n\nPlease see [git log](https://github.com/python/typeshed/commits/main?after=4a854366e03dee700109f8e758a08b2457ea2f51+0&branch=main&path=stdlib) for full list of standard library typeshed stub changes.\n\n### Acknowledgements\n\nThanks to all mypy contributors who contributed to this release:\n\n* Albert Tugushev\n* Alex Waygood\n* Ali Hamdan\n* Anders Kaseorg\n* Anthony Sottile\n* Chad Dombrova\n* Cibin Mathew\n* dinaldoap\n* DS/Charlie\n* Eli Schwartz\n* Ganden Schaffner\n* Hamir Mahal\n* Ihor\n* Ikko Eltociear Ashimine\n* Ilya Priven\n* Ivan Levkivskyi\n* Jelle Zijlstra\n* Jukka Lehtosalo\n* Jørgen Lind\n* KotlinIsland\n* Matt Bogosian\n* Nikita Sobolev\n* Petter Friberg\n* Randolf Scholz\n* Shantanu\n* Thomas Grainger\n* Valentin Stanciu\n\nI’d also like to thank my employer, Dropbox, for supporting mypy development.\n\nPosted by Jukka Lehtosalo\n\n## Mypy 1.6\n\n[Tuesday, 10 October 2023](https://mypy-lang.blogspot.com/2023/10/mypy-16-released.html)\n\nWe’ve just uploaded mypy 1.6 to the Python Package Index ([PyPI](https://pypi.org/project/mypy/)). Mypy is a static type checker for Python. This release includes new features, performance improvements and bug fixes. You can install it as follows:\n\n    python3 -m pip install -U mypy\n\nYou can read the full documentation for this release on [Read the Docs](http://mypy.readthedocs.io).\n\n### Introduce Error Subcodes for Import Errors\n\nMypy now uses the error code import-untyped if an import targets an installed library that doesn’t support static type checking, and no stub files are available. Other invalid imports produce the import-not-found error code. They both are subcodes of the import error code, which was previously used for both kinds of import-related errors.\n\nUse \\--disable-error-code=import-untyped to only ignore import errors about installed libraries without stubs. This way mypy will still report errors about typos in import statements, for example.\n\nIf you use \\--warn-unused-ignore or \\--strict, mypy will complain if you use \\# type: ignore\\[import\\] to ignore an import error. You are expected to use one of the more specific error codes instead. Otherwise, ignoring the import error code continues to silence both errors.\n\nThis feature was contributed by Shantanu (PR [15840](https://github.com/python/mypy/pull/15840), PR [14740](https://github.com/python/mypy/pull/14740)).\n\n### Remove Support for Targeting Python 3.6 and Earlier\n\nRunning mypy with \\--python-version 3.6, for example, is no longer supported. Python 3.6 hasn’t been properly supported by mypy for some time now, and this makes it explicit. This was contributed by Nikita Sobolev (PR [15668](https://github.com/python/mypy/pull/15668)).\n\n### Selective Filtering of \\--disallow-untyped-calls Targets\n\nUsing \\--disallow-untyped-calls could be annoying when using libraries with missing type information, as mypy would generate many errors about code that uses the library. Now you can use \\--untyped-calls-exclude=acme, for example, to disable these errors about calls targeting functions defined in the acme package. Refer to the [documentation](https://mypy.readthedocs.io/en/latest/command_line.html#cmdoption-mypy-untyped-calls-exclude) for more information.\n\nThis feature was contributed by Ivan Levkivskyi (PR [15845](https://github.com/python/mypy/pull/15845)).\n\n### Improved Type Inference between Callable Types\n\nMypy now does a better job inferring type variables inside arguments of callable types. For example, this code fragment now type checks correctly:\n\n```python\ndef f(c: Callable[[T, S], None]) -> Callable[[str, T, S], None]: ...\ndef g(*x: int) -> None: ...\n\nreveal_type(f(g))  # Callable[[str, int, int], None]\n```\n\nThis was contributed by Ivan Levkivskyi (PR [15910](https://github.com/python/mypy/pull/15910)).\n\n### Don’t Consider None and TypeVar to Overlap in Overloads\n\nMypy now doesn’t consider an overload item with an argument type None to overlap with a type variable:\n\n```python\n@overload\ndef f(x: None) -> None: ..\n@overload\ndef f(x: T) -> Foo[T]: ...\n...\n```\n\nPreviously mypy would generate an error about the definition of f above. This is slightly unsafe if the upper bound of T is object, since the value of the type variable could be None. We relaxed the rules a little, since this solves a common issue.\n\nThis feature was contributed by Ivan Levkivskyi (PR [15846](https://github.com/python/mypy/pull/15846)).\n\n### Improvements to \\--new-type-inference\n\nThe experimental new type inference algorithm (polymorphic inference) introduced as an opt-in feature in mypy 1.5 has several improvements:\n\n*   Improve transitive closure computation during constraint solving (Ivan Levkivskyi, PR [15754](https://github.com/python/mypy/pull/15754))\n*   Add support for upper bounds and values with \\--new-type-inference (Ivan Levkivskyi, PR [15813](https://github.com/python/mypy/pull/15813))\n*   Basic support for variadic types with \\--new-type-inference (Ivan Levkivskyi, PR [15879](https://github.com/python/mypy/pull/15879))\n*   Polymorphic inference: support for parameter specifications and lambdas (Ivan Levkivskyi, PR [15837](https://github.com/python/mypy/pull/15837))\n*   Invalidate cache when adding \\--new-type-inference (Marc Mueller, PR [16059](https://github.com/python/mypy/pull/16059))\n\n**Note:** We are planning to enable \\--new-type-inference by default in mypy 1.7. Please try this out and let us know if you encounter any issues.\n\n### ParamSpec Improvements\n\n*   Support self-types containing ParamSpec (Ivan Levkivskyi, PR [15903](https://github.com/python/mypy/pull/15903))\n*   Allow “…” in Concatenate, and clean up ParamSpec literals (Ivan Levkivskyi, PR [15905](https://github.com/python/mypy/pull/15905))\n*   Fix ParamSpec inference for callback protocols (Ivan Levkivskyi, PR [15986](https://github.com/python/mypy/pull/15986))\n*   Infer ParamSpec constraint from arguments (Ivan Levkivskyi, PR [15896](https://github.com/python/mypy/pull/15896))\n*   Fix crash on invalid type variable with ParamSpec (Ivan Levkivskyi, PR [15953](https://github.com/python/mypy/pull/15953))\n*   Fix subtyping between ParamSpecs (Ivan Levkivskyi, PR [15892](https://github.com/python/mypy/pull/15892))\n\n### Stubgen Improvements\n\n*   Add option to include docstrings with stubgen (chylek, PR [13284](https://github.com/python/mypy/pull/13284))\n*   Add required ... initializer to NamedTuple fields with default values (Nikita Sobolev, PR [15680](https://github.com/python/mypy/pull/15680))\n\n### Stubtest Improvements\n\n*   Fix \\_\\_mypy-replace false positives (Alex Waygood, PR [15689](https://github.com/python/mypy/pull/15689))\n*   Fix edge case for bytes enum subclasses (Alex Waygood, PR [15943](https://github.com/python/mypy/pull/15943))\n*   Generate error if typeshed is missing modules from the stdlib (Alex Waygood, PR [15729](https://github.com/python/mypy/pull/15729))\n*   Fixes to new check for missing stdlib modules (Alex Waygood, PR [15960](https://github.com/python/mypy/pull/15960))\n*   Fix stubtest enum.Flag edge case (Alex Waygood, PR [15933](https://github.com/python/mypy/pull/15933))\n\n### Documentation Improvements\n\n*   Do not advertise to create your own assert\\_never helper (Nikita Sobolev, PR [15947](https://github.com/python/mypy/pull/15947))\n*   Fix all the missing references found within the docs (Albert Tugushev, PR [15875](https://github.com/python/mypy/pull/15875))\n*   Document await-not-async error code (Shantanu, PR [15858](https://github.com/python/mypy/pull/15858))\n*   Improve documentation of disabling error codes (Shantanu, PR [15841](https://github.com/python/mypy/pull/15841))\n\n### Other Notable Changes and Fixes\n\n*   Make unsupported PEP 695 features (introduced in Python 3.12) give a reasonable error message (Shantanu, PR [16013](https://github.com/python/mypy/pull/16013))\n*   Remove the \\--py2 command-line argument (Marc Mueller, PR [15670](https://github.com/python/mypy/pull/15670))\n*   Change empty tuple from tuple\\[\\] to tuple\\[()\\] in error messages (Nikita Sobolev, PR [15783](https://github.com/python/mypy/pull/15783))\n*   Fix assert\\_type failures when some nodes are deferred (Nikita Sobolev, PR [15920](https://github.com/python/mypy/pull/15920))\n*   Generate error on unbound TypeVar with values (Nikita Sobolev, PR [15732](https://github.com/python/mypy/pull/15732))\n*   Fix over-eager types-google-cloud-ndb suggestion (Shantanu, PR [15347](https://github.com/python/mypy/pull/15347))\n*   Fix type narrowing of \\== None and in (None,) conditions (Marti Raudsepp, PR [15760](https://github.com/python/mypy/pull/15760))\n*   Fix inference for attrs.fields (Shantanu, PR [15688](https://github.com/python/mypy/pull/15688))\n*   Make “await in non-async function” a non-blocking error and give it an error code (Gregory Santosa, PR [15384](https://github.com/python/mypy/pull/15384))\n*   Add basic support for decorated overloads (Ivan Levkivskyi, PR [15898](https://github.com/python/mypy/pull/15898))\n*   Fix TypeVar regression with self types (Ivan Levkivskyi, PR [15945](https://github.com/python/mypy/pull/15945))\n*   Add \\_\\_match\\_args\\_\\_ to dataclasses with no fields (Ali Hamdan, PR [15749](https://github.com/python/mypy/pull/15749))\n*   Include stdout and stderr in dmypy verbose output (Valentin Stanciu, PR [15881](https://github.com/python/mypy/pull/15881))\n*   Improve match narrowing and reachability analysis (Shantanu, PR [15882](https://github.com/python/mypy/pull/15882))\n*   Support \\_\\_bool\\_\\_ with Literal in \\--warn-unreachable (Jannic Warken, PR [15645](https://github.com/python/mypy/pull/15645))\n*   Fix inheriting from generic @frozen attrs class (Ilya Priven, PR [15700](https://github.com/python/mypy/pull/15700))\n*   Correctly narrow types for tuple\\[type\\[X\\], ...\\] (Nikita Sobolev, PR [15691](https://github.com/python/mypy/pull/15691))\n*   Don't flag intentionally empty generators unreachable (Ilya Priven, PR [15722](https://github.com/python/mypy/pull/15722))\n*   Add tox.ini to mypy sdist (Marcel Telka, PR [15853](https://github.com/python/mypy/pull/15853))\n*   Fix mypyc regression with pretty (Shantanu, PR [16124](https://github.com/python/mypy/pull/16124))\n\n### Typeshed Updates\n\nTypeshed is now modular and distributed as separate PyPI packages for everything except the standard library stubs. Please see [git log](https://github.com/python/typeshed/commits/main?after=6a8d653a671925b0a3af61729ff8cf3f90c9c662+0&branch=main&path=stdlib) for full list of typeshed changes.\n\n### Acknowledgements\n\nThanks to Max Murin, who did most of the release manager work for this release (I just did the final steps).\n\nThanks to all mypy contributors who contributed to this release:\n\n*   Albert Tugushev\n*   Alex Waygood\n*   Ali Hamdan\n*   chylek\n*   EXPLOSION\n*   Gregory Santosa\n*   Ilya Priven\n*   Ivan Levkivskyi\n*   Jannic Warken\n*   KotlinIsland\n*   Marc Mueller\n*   Marcel Johannesmann\n*   Marcel Telka\n*   Mark Byrne\n*   Marti Raudsepp\n*   Max Murin\n*   Nikita Sobolev\n*   Shantanu\n*   Valentin Stanciu\n\nPosted by Jukka Lehtosalo\n\n\n## Mypy 1.5\n\n[Thursday, 10 August 2023](https://mypy-lang.blogspot.com/2023/08/mypy-15-released.html)\n\nWe’ve just uploaded mypy 1.5 to the Python Package Index ([PyPI](https://pypi.org/project/mypy/)). Mypy is a static type checker for Python. This release includes new features, deprecations and bug fixes. You can install it as follows:\n\n    python3 -m pip install -U mypy\n\nYou can read the full documentation for this release on [Read the Docs](http://mypy.readthedocs.io).\n\n### Drop Support for Python 3.7\n\nMypy no longer supports running with Python 3.7, which has reached end-of-life. This was contributed by Shantanu (PR [15566](https://github.com/python/mypy/pull/15566)).\n\n### Optional Check to Require Explicit @override\n\nIf you enable the explicit-override error code, mypy will generate an error if a method override doesn’t use the @typing.override decorator (as discussed in [PEP 698](https://peps.python.org/pep-0698/#strict-enforcement-per-project)). This way mypy will detect accidentally introduced overrides. Example:\n\n```python\n# mypy: enable-error-code=\"explicit-override\"\n\nfrom typing_extensions import override\n\nclass C:\n    def foo(self) -> None: pass\n    def bar(self) -> None: pass\n\nclass D(C):\n    # Error: Method \"foo\" is not using @override but is\n    # overriding a method\n    def foo(self) -> None:\n        ...\n\n    @override\n    def bar(self) -> None:  # OK\n        ...\n```\n\nYou can enable the error code via \\--enable-error-code=explicit-override on the mypy command line or enable\\_error\\_code = explicit-override in the mypy config file.\n\nThe override decorator will be available in typing in Python 3.12, but you can also use the backport from a recent version of `typing_extensions` on all supported Python versions.\n\nThis feature was contributed by Marc Mueller(PR [15512](https://github.com/python/mypy/pull/15512)).\n\n### More Flexible TypedDict Creation and Update\n\nMypy was previously overly strict when type checking TypedDict creation and update operations. Though these checks were often technically correct, they sometimes triggered for apparently valid code. These checks have now been relaxed by default. You can enable stricter checking by using the new \\--extra-checks flag.\n\nConstruction using the `**` syntax is now more flexible:\n\n```python\nfrom typing import TypedDict\n\nclass A(TypedDict):\n    foo: int\n    bar: int\n\nclass B(TypedDict):\n    foo: int\n\na: A = {\"foo\": 1, \"bar\": 2}\nb: B = {\"foo\": 3}\na2: A = { **a, **b}  # OK (previously an error)\n```\n\nYou can also call update() with a TypedDict argument that contains a subset of the keys in the updated TypedDict:\n```python\na.update(b)  # OK (previously an error)\n```\n\nThis feature was contributed by Ivan Levkivskyi (PR [15425](https://github.com/python/mypy/pull/15425)).\n\n### Deprecated Flag: \\--strict-concatenate\n\nThe behavior of \\--strict-concatenate is now included in the new \\--extra-checks flag, and the old flag is deprecated.\n\n### Optionally Show Links to Error Code Documentation\n\nIf you use \\--show-error-code-links, mypy will add documentation links to (many) reported errors. The links are not shown for error messages that are sufficiently obvious, and they are shown once per error code only.\n\nExample output:\n```\na.py:1: error: Need type annotation for \"foo\" (hint: \"x: List[<type>] = ...\")  [var-annotated]\na.py:1: note: See https://mypy.rtfd.io/en/stable/_refs.html#code-var-annotated for more info\n```\nThis was contributed by Ivan Levkivskyi (PR [15449](https://github.com/python/mypy/pull/15449)).\n\n### Consistently Avoid Type Checking Unreachable Code\n\nIf a module top level has unreachable code, mypy won’t type check the unreachable statements. This is consistent with how functions behave. The behavior of \\--warn-unreachable is also more consistent now.\n\nThis was contributed by Ilya Priven (PR [15386](https://github.com/python/mypy/pull/15386)).\n\n### Experimental Improved Type Inference for Generic Functions\n\nYou can use \\--new-type-inference to opt into an experimental new type inference algorithm. It fixes issues when calling a generic functions with an argument that is also a generic function, in particular. This current implementation is still incomplete, but we encourage trying it out and reporting bugs if you encounter regressions. We are planning to enable the new algorithm by default in a future mypy release.\n\nThis feature was contributed by Ivan Levkivskyi (PR [15287](https://github.com/python/mypy/pull/15287)).\n\n### Partial Support for Python 3.12\n\nMypy and mypyc now support running on recent Python 3.12 development versions. Not all new Python 3.12 features are supported, and we don’t ship compiled wheels for Python 3.12 yet.\n\n*   Fix ast warnings for Python 3.12 (Nikita Sobolev, PR [15558](https://github.com/python/mypy/pull/15558))\n*   mypyc: Fix multiple inheritance with a protocol on Python 3.12 (Jukka Lehtosalo, PR [15572](https://github.com/python/mypy/pull/15572))\n*   mypyc: Fix self-compilation on Python 3.12 (Jukka Lehtosalo, PR [15582](https://github.com/python/mypy/pull/15582))\n*   mypyc: Fix 3.12 issue with pickling of instances with \\_\\_dict\\_\\_ (Jukka Lehtosalo, PR [15574](https://github.com/python/mypy/pull/15574))\n*   mypyc: Fix i16 on Python 3.12 (Jukka Lehtosalo, PR [15510](https://github.com/python/mypy/pull/15510))\n*   mypyc: Fix int operations on Python 3.12 (Jukka Lehtosalo, PR [15470](https://github.com/python/mypy/pull/15470))\n*   mypyc: Fix generators on Python 3.12 (Jukka Lehtosalo, PR [15472](https://github.com/python/mypy/pull/15472))\n*   mypyc: Fix classes with \\_\\_dict\\_\\_ on 3.12 (Jukka Lehtosalo, PR [15471](https://github.com/python/mypy/pull/15471))\n*   mypyc: Fix coroutines on Python 3.12 (Jukka Lehtosalo, PR [15469](https://github.com/python/mypy/pull/15469))\n*   mypyc: Don't use \\_PyErr\\_ChainExceptions on 3.12, since it's deprecated (Jukka Lehtosalo, PR [15468](https://github.com/python/mypy/pull/15468))\n*   mypyc: Add Python 3.12 feature macro (Jukka Lehtosalo, PR [15465](https://github.com/python/mypy/pull/15465))\n\n### Improvements to Dataclasses\n\n*   Improve signature of dataclasses.replace (Ilya Priven, PR [14849](https://github.com/python/mypy/pull/14849))\n*   Fix dataclass/protocol crash on joining types (Ilya Priven, PR [15629](https://github.com/python/mypy/pull/15629))\n*   Fix strict optional handling in dataclasses (Ivan Levkivskyi, PR [15571](https://github.com/python/mypy/pull/15571))\n*   Support optional types for custom dataclass descriptors (Marc Mueller, PR [15628](https://github.com/python/mypy/pull/15628))\n*   Add `__slots__` attribute to dataclasses (Nikita Sobolev, PR [15649](https://github.com/python/mypy/pull/15649))\n*   Support better \\_\\_post\\_init\\_\\_ method signature for dataclasses (Nikita Sobolev, PR [15503](https://github.com/python/mypy/pull/15503))\n\n### Mypyc Improvements\n\n*   Support unsigned 8-bit native integer type: mypy\\_extensions.u8 (Jukka Lehtosalo, PR [15564](https://github.com/python/mypy/pull/15564))\n*   Support signed 16-bit native integer type: mypy\\_extensions.i16 (Jukka Lehtosalo, PR [15464](https://github.com/python/mypy/pull/15464))\n*   Define mypy\\_extensions.i16 in stubs (Jukka Lehtosalo, PR [15562](https://github.com/python/mypy/pull/15562))\n*   Document more unsupported features and update supported features (Richard Si, PR [15524](https://github.com/python/mypy/pull/15524))\n*   Fix final NamedTuple classes (Richard Si, PR [15513](https://github.com/python/mypy/pull/15513))\n*   Use C99 compound literals for undefined tuple values (Jukka Lehtosalo, PR [15453](https://github.com/python/mypy/pull/15453))\n*   Don't explicitly assign NULL values in setup functions (Logan Hunt, PR [15379](https://github.com/python/mypy/pull/15379))\n\n### Stubgen Improvements\n\n*   Teach stubgen to work with complex and unary expressions (Nikita Sobolev, PR [15661](https://github.com/python/mypy/pull/15661))\n*   Support ParamSpec and TypeVarTuple (Ali Hamdan, PR [15626](https://github.com/python/mypy/pull/15626))\n*   Fix crash on non-str docstring (Ali Hamdan, PR [15623](https://github.com/python/mypy/pull/15623))\n\n### Documentation Updates\n\n*   Add documentation for additional error codes (Ivan Levkivskyi, PR [15539](https://github.com/python/mypy/pull/15539))\n*   Improve documentation of type narrowing (Ilya Priven, PR [15652](https://github.com/python/mypy/pull/15652))\n*   Small improvements to protocol documentation (Shantanu, PR [15460](https://github.com/python/mypy/pull/15460))\n*   Remove confusing instance variable example in cheat sheet (Adel Atallah, PR [15441](https://github.com/python/mypy/pull/15441))\n\n### Other Notable Fixes and Improvements\n\n*   Constant fold additional unary and binary expressions (Richard Si, PR [15202](https://github.com/python/mypy/pull/15202))\n*   Exclude the same special attributes from Protocol as CPython (Kyle Benesch, PR [15490](https://github.com/python/mypy/pull/15490))\n*   Change the default value of the slots argument of attrs.define to True, to match runtime behavior (Ilya Priven, PR [15642](https://github.com/python/mypy/pull/15642))\n*   Fix type of class attribute if attribute is defined in both class and metaclass (Alex Waygood, PR [14988](https://github.com/python/mypy/pull/14988))\n*   Handle type the same as typing.Type in the first argument of classmethods (Erik Kemperman, PR [15297](https://github.com/python/mypy/pull/15297))\n*   Fix \\--find-occurrences flag (Shantanu, PR [15528](https://github.com/python/mypy/pull/15528))\n*   Fix error location for class patterns (Nikita Sobolev, PR [15506](https://github.com/python/mypy/pull/15506))\n*   Fix re-added file with errors in mypy daemon (Ivan Levkivskyi, PR [15440](https://github.com/python/mypy/pull/15440))\n*   Fix dmypy run on Windows (Ivan Levkivskyi, PR [15429](https://github.com/python/mypy/pull/15429))\n*   Fix abstract and non-abstract variant error for property deleter (Shantanu, PR [15395](https://github.com/python/mypy/pull/15395))\n*   Remove special casing for \"cannot\" in error messages (Ilya Priven, PR [15428](https://github.com/python/mypy/pull/15428))\n*   Add runtime `__slots__` attribute to attrs classes (Nikita Sobolev, PR [15651](https://github.com/python/mypy/pull/15651))\n*   Add get\\_expression\\_type to CheckerPluginInterface (Ilya Priven, PR [15369](https://github.com/python/mypy/pull/15369))\n*   Remove parameters that no longer exist from NamedTuple.\\_make() (Alex Waygood, PR [15578](https://github.com/python/mypy/pull/15578))\n*   Allow using typing.Self in `__all__` with an explicit @staticmethod decorator (Erik Kemperman, PR [15353](https://github.com/python/mypy/pull/15353))\n*   Fix self types in subclass methods without Self annotation (Ivan Levkivskyi, PR [15541](https://github.com/python/mypy/pull/15541))\n*   Check for abstract class objects in tuples (Nikita Sobolev, PR [15366](https://github.com/python/mypy/pull/15366))\n\n### Typeshed Updates\n\nTypeshed is now modular and distributed as separate PyPI packages for everything except the standard library stubs. Please see [git log](https://github.com/python/typeshed/commits/main?after=fc7d4722eaa54803926cee5730e1f784979c0531+0&branch=main&path=stdlib) for full list of typeshed changes.\n\n### Acknowledgements\n\nThanks to all mypy contributors who contributed to this release:\n\n*   Adel Atallah\n*   Alex Waygood\n*   Ali Hamdan\n*   Erik Kemperman\n*   Federico Padua\n*   Ilya Priven\n*   Ivan Levkivskyi\n*   Jelle Zijlstra\n*   Jared Hance\n*   Jukka Lehtosalo\n*   Kyle Benesch\n*   Logan Hunt\n*   Marc Mueller\n*   Nikita Sobolev\n*   Richard Si\n*   Shantanu\n*   Stavros Ntentos\n*   Valentin Stanciu\n\nPosted by Valentin Stanciu\n\n\n## Mypy 1.4\n\n[Tuesday, 20 June 2023](https://mypy-lang.blogspot.com/2023/06/mypy-140-released.html)\n\nWe’ve just uploaded mypy 1.4 to the Python Package Index ([PyPI](https://pypi.org/project/mypy/)). Mypy is a static type checker for Python. This release includes new features, performance improvements and bug fixes. You can install it as follows:\n\n    python3 -m pip install -U mypy\n\nYou can read the full documentation for this release on [Read the Docs](http://mypy.readthedocs.io).\n\n### The Override Decorator\n\nMypy can now ensure that when renaming a method, overrides are also renamed. You can explicitly mark a method as overriding a base class method by using the @typing.override decorator ([PEP 698](https://peps.python.org/pep-0698/)). If the method is then renamed in the base class while the method override is not, mypy will generate an error. The decorator will be available in typing in Python 3.12, but you can also use the backport from a recent version of `typing_extensions` on all supported Python versions.\n\nThis feature was contributed byThomas M Kehrenberg (PR [14609](https://github.com/python/mypy/pull/14609)).\n\n### Propagating Type Narrowing to Nested Functions\n\nPreviously, type narrowing was not propagated to nested functions because it would not be sound if the narrowed variable changed between the definition of the nested function and the call site. Mypy will now propagate the narrowed type if the variable is not assigned to after the definition of the nested function:\n\n```python\ndef outer(x: str | None = None) -> None:\n    if x is None:\n        x = calculate_default()\n    reveal_type(x)  # \"str\" (narrowed)\n\n    def nested() -> None:\n        reveal_type(x)  # Now \"str\" (used to be \"str | None\")\n\n    nested()\n```\n\nThis may generate some new errors because asserts that were previously necessary may become tautological or no-ops.\n\nThis was contributed by Jukka Lehtosalo (PR [15133](https://github.com/python/mypy/pull/15133)).\n\n### Narrowing Enum Values Using “==”\n\nMypy now allows narrowing enum types using the \\== operator. Previously this was only supported when using the is operator. This makes exhaustiveness checking with enum types more usable, as the requirement to use the is operator was not very intuitive. In this example mypy can detect that the developer forgot to handle the value MyEnum.C in example\n\n```python\nfrom enum import Enum\n\nclass MyEnum(Enum):\n    A = 0\n    B = 1\n    C = 2\n\ndef example(e: MyEnum) -> str:  # Error: Missing return statement\n    if e == MyEnum.A:\n        return 'x'\n    elif e == MyEnum.B:\n        return 'y'\n```\n\nAdding an extra elif case resolves the error:\n\n```python\n...\ndef example(e: MyEnum) -> str:  # No error -- all values covered\n    if e == MyEnum.A:\n        return 'x'\n    elif e == MyEnum.B:\n        return 'y'\n    elif e == MyEnum.C:\n        return 'z'\n```\n\nThis change can cause false positives in test cases that have assert statements like assert o.x == SomeEnum.X when using \\--strict-equality. Example:\n\n```python\n# mypy: strict-equality\n\nfrom enum import Enum\n\nclass MyEnum(Enum):\n    A = 0\n    B = 1\n\nclass C:\n    x: MyEnum\n    ...\n\ndef test_something() -> None:\n    c = C(...)\n    assert c.x == MyEnum.A\n    c.do_something_that_changes_x()\n    assert c.x == MyEnum.B  # Error: Non-overlapping equality check\n```\n\nThese errors can be ignored using \\# type: ignore\\[comparison-overlap\\], or you can perform the assertion using a temporary variable as a workaround:\n\n```python\n...\ndef test_something() -> None:\n    ...\n    x = c.x\n    assert x == MyEnum.A  # Does not narrow c.x\n    c.do_something_that_changes_x()\n    x = c.x\n    assert x == MyEnum.B  # OK\n```\n\nThis feature was contributed by Shantanu (PR [11521](https://github.com/python/mypy/pull/11521)).\n\n### Performance Improvements\n\n*   Speed up simplification of large union types and also fix a recursive tuple crash (Shantanu, PR [15128](https://github.com/python/mypy/pull/15128))\n*   Speed up union subtyping (Shantanu, PR [15104](https://github.com/python/mypy/pull/15104))\n*   Don't type check most function bodies when type checking third-party library code, or generally when ignoring errors (Jukka Lehtosalo, PR [14150](https://github.com/python/mypy/pull/14150))\n\n### Improvements to Plugins\n\n*   attrs.evolve: Support generics and unions (Ilya Konstantinov, PR [15050](https://github.com/python/mypy/pull/15050))\n*   Fix ctypes plugin (Alex Waygood)\n\n### Fixes to Crashes\n\n*   Fix a crash when function-scope recursive alias appears as upper bound (Ivan Levkivskyi, PR [15159](https://github.com/python/mypy/pull/15159))\n*   Fix crash on follow\\_imports\\_for\\_stubs (Ivan Levkivskyi, PR [15407](https://github.com/python/mypy/pull/15407))\n*   Fix stubtest crash in explicit init subclass (Shantanu, PR [15399](https://github.com/python/mypy/pull/15399))\n*   Fix crash when indexing TypedDict with empty key (Shantanu, PR [15392](https://github.com/python/mypy/pull/15392))\n*   Fix crash on NamedTuple as attribute (Ivan Levkivskyi, PR [15404](https://github.com/python/mypy/pull/15404))\n*   Correctly track loop depth for nested functions/classes (Ivan Levkivskyi, PR [15403](https://github.com/python/mypy/pull/15403))\n*   Fix crash on joins with recursive tuples (Ivan Levkivskyi, PR [15402](https://github.com/python/mypy/pull/15402))\n*   Fix crash with custom ErrorCode subclasses (Marc Mueller, PR [15327](https://github.com/python/mypy/pull/15327))\n*   Fix crash in dataclass protocol with self attribute assignment (Ivan Levkivskyi, PR [15157](https://github.com/python/mypy/pull/15157))\n*   Fix crash on lambda in generic context with generic method in body (Ivan Levkivskyi, PR [15155](https://github.com/python/mypy/pull/15155))\n*   Fix recursive type alias crash in make\\_simplified\\_union (Ivan Levkivskyi, PR [15216](https://github.com/python/mypy/pull/15216))\n\n### Improvements to Error Messages\n\n*   Use lower-case built-in collection types such as list\\[…\\] instead of List\\[…\\] in errors when targeting Python 3.9+ (Max Murin, PR [15070](https://github.com/python/mypy/pull/15070))\n*   Use X | Y union syntax in error messages when targeting Python 3.10+ (Omar Silva, PR [15102](https://github.com/python/mypy/pull/15102))\n*   Use type instead of Type in errors when targeting Python 3.9+ (Rohit Sanjay, PR [15139](https://github.com/python/mypy/pull/15139))\n*   Do not show unused-ignore errors in unreachable code, and make it a real error code (Ivan Levkivskyi, PR [15164](https://github.com/python/mypy/pull/15164))\n*   Don’t limit the number of errors shown by default (Rohit Sanjay, PR [15138](https://github.com/python/mypy/pull/15138))\n*   Improver message for truthy functions (madt2709, PR [15193](https://github.com/python/mypy/pull/15193))\n*   Output distinct types when type names are ambiguous (teresa0605, PR [15184](https://github.com/python/mypy/pull/15184))\n*   Update message about invalid exception type in try (AJ Rasmussen, PR [15131](https://github.com/python/mypy/pull/15131))\n*   Add explanation if argument type is incompatible because of an unsupported numbers type (Jukka Lehtosalo, PR [15137](https://github.com/python/mypy/pull/15137))\n*   Add more detail to 'signature incompatible with supertype' messages for non-callables (Ilya Priven, PR [15263](https://github.com/python/mypy/pull/15263))\n\n### Documentation Updates\n\n*   Add \\--local-partial-types note to dmypy docs (Alan Du, PR [15259](https://github.com/python/mypy/pull/15259))\n*   Update getting started docs for mypyc for Windows (Valentin Stanciu, PR [15233](https://github.com/python/mypy/pull/15233))\n*   Clarify usage of callables regarding type object in docs (Viicos, PR [15079](https://github.com/python/mypy/pull/15079))\n*   Clarify difference between disallow\\_untyped\\_defs and disallow\\_incomplete\\_defs (Ilya Priven, PR [15247](https://github.com/python/mypy/pull/15247))\n*   Use attrs and @attrs.define in documentation and tests (Ilya Priven, PR [15152](https://github.com/python/mypy/pull/15152))\n\n### Mypyc Improvements\n\n*   Fix unexpected TypeError for certain variables with an inferred optional type (Richard Si, PR [15206](https://github.com/python/mypy/pull/15206))\n*   Inline math literals (Logan Hunt, PR [15324](https://github.com/python/mypy/pull/15324))\n*   Support unpacking mappings in dict display (Richard Si, PR [15203](https://github.com/python/mypy/pull/15203))\n\n### Changes to Stubgen\n\n*   Do not remove Generic from base classes (Ali Hamdan, PR [15316](https://github.com/python/mypy/pull/15316))\n*   Support yield from statements (Ali Hamdan, PR [15271](https://github.com/python/mypy/pull/15271))\n*   Fix missing total from TypedDict class (Ali Hamdan, PR [15208](https://github.com/python/mypy/pull/15208))\n*   Fix call-based namedtuple omitted from class bases (Ali Hamdan, PR [14680](https://github.com/python/mypy/pull/14680))\n*   Support TypedDict alternative syntax (Ali Hamdan, PR [14682](https://github.com/python/mypy/pull/14682))\n*   Make stubgen respect MYPY\\_CACHE\\_DIR (Henrik Bäärnhielm, PR [14722](https://github.com/python/mypy/pull/14722))\n*   Fixes and simplifications (Ali Hamdan, PR [15232](https://github.com/python/mypy/pull/15232))\n\n### Other Notable Fixes and Improvements\n\n*   Fix nested async functions when using TypeVar value restriction (Jukka Lehtosalo, PR [14705](https://github.com/python/mypy/pull/14705))\n*   Always allow returning Any from lambda (Ivan Levkivskyi, PR [15413](https://github.com/python/mypy/pull/15413))\n*   Add foundation for TypeVar defaults (PEP 696) (Marc Mueller, PR [14872](https://github.com/python/mypy/pull/14872))\n*   Update semantic analyzer for TypeVar defaults (PEP 696) (Marc Mueller, PR [14873](https://github.com/python/mypy/pull/14873))\n*   Make dict expression inference more consistent (Ivan Levkivskyi, PR [15174](https://github.com/python/mypy/pull/15174))\n*   Do not block on duplicate base classes (Nikita Sobolev, PR [15367](https://github.com/python/mypy/pull/15367))\n*   Generate an error when both staticmethod and classmethod decorators are used (Juhi Chandalia, PR [15118](https://github.com/python/mypy/pull/15118))\n*   Fix assert\\_type behaviour with literals (Carl Karsten, PR [15123](https://github.com/python/mypy/pull/15123))\n*   Fix match subject ignoring redefinitions (Vincent Vanlaer, PR [15306](https://github.com/python/mypy/pull/15306))\n*   Support `__all__`.remove (Shantanu, PR [15279](https://github.com/python/mypy/pull/15279))\n\n### Typeshed Updates\n\nTypeshed is now modular and distributed as separate PyPI packages for everything except the standard library stubs. Please see [git log](https://github.com/python/typeshed/commits/main?after=877e06ad1cfd9fd9967c0b0340a86d0c23ea89ce+0&branch=main&path=stdlib) for full list of typeshed changes.\n\n### Acknowledgements\n\nThanks to all mypy contributors who contributed to this release:\n\n*   Adrian Garcia Badaracco\n*   AJ Rasmussen\n*   Alan Du\n*   Alex Waygood\n*   Ali Hamdan\n*   Carl Karsten\n*   dosisod\n*   Ethan Smith\n*   Gregory Santosa\n*   Heather White\n*   Henrik Bäärnhielm\n*   Ilya Konstantinov\n*   Ilya Priven\n*   Ivan Levkivskyi\n*   Juhi Chandalia\n*   Jukka Lehtosalo\n*   Logan Hunt\n*   madt2709\n*   Marc Mueller\n*   Max Murin\n*   Nikita Sobolev\n*   Omar Silva\n*   Özgür\n*   Richard Si\n*   Rohit Sanjay\n*   Shantanu\n*   teresa0605\n*   Thomas M Kehrenberg\n*   Tin Tvrtković\n*   Tushar Sadhwani\n*   Valentin Stanciu\n*   Viicos\n*   Vincent Vanlaer\n*   Wesley Collin Wright\n*   William Santosa\n*   yaegassy\n\nI’d also like to thank my employer, Dropbox, for supporting mypy development.\n\nPosted by Jared Hance\n\n\n## Mypy 1.3\n\n[Wednesday, 10 May 2023](https://mypy-lang.blogspot.com/2023/05/mypy-13-released.html)\n\n We’ve just uploaded mypy 1.3 to the Python Package Index ([PyPI](https://pypi.org/project/mypy/)). Mypy is a static type checker for Python. This release includes new features, performance improvements and bug fixes. You can install it as follows:\n\n    python3 -m pip install -U mypy\n\nYou can read the full documentation for this release on [Read the Docs](http://mypy.readthedocs.io).\n\n### Performance Improvements\n\n*   Improve performance of union subtyping (Shantanu, PR [15104](https://github.com/python/mypy/pull/15104))\n*   Add negative subtype caches (Ivan Levkivskyi, PR [14884](https://github.com/python/mypy/pull/14884))\n\n### Stub Tooling Improvements\n\n*   Stubtest: Check that the stub is abstract if the runtime is, even when the stub is an overloaded method (Alex Waygood, PR [14955](https://github.com/python/mypy/pull/14955))\n*   Stubtest: Verify stub methods or properties are decorated with @final if they are decorated with @final at runtime (Alex Waygood, PR [14951](https://github.com/python/mypy/pull/14951))\n*   Stubtest: Fix stubtest false positives with TypedDicts at runtime (Alex Waygood, PR [14984](https://github.com/python/mypy/pull/14984))\n*   Stubgen: Support @functools.cached\\_property (Nikita Sobolev, PR [14981](https://github.com/python/mypy/pull/14981))\n*   Improvements to stubgenc (Chad Dombrova, PR [14564](https://github.com/python/mypy/pull/14564))\n\n### Improvements to attrs\n\n*   Add support for converters with TypeVars on generic attrs classes (Chad Dombrova, PR [14908](https://github.com/python/mypy/pull/14908))\n*   Fix attrs.evolve on bound TypeVar (Ilya Konstantinov, PR [15022](https://github.com/python/mypy/pull/15022))\n\n### Documentation Updates\n\n*   Improve async documentation (Shantanu, PR [14973](https://github.com/python/mypy/pull/14973))\n*   Improvements to cheat sheet (Shantanu, PR [14972](https://github.com/python/mypy/pull/14972))\n*   Add documentation for bytes formatting error code (Shantanu, PR [14971](https://github.com/python/mypy/pull/14971))\n*   Convert insecure links to use HTTPS (Marti Raudsepp, PR [14974](https://github.com/python/mypy/pull/14974))\n*   Also mention overloads in async iterator documentation (Shantanu, PR [14998](https://github.com/python/mypy/pull/14998))\n*   stubtest: Improve allowlist documentation (Shantanu, PR [15008](https://github.com/python/mypy/pull/15008))\n*   Clarify \"Using types... but not at runtime\" (Jon Shea, PR [15029](https://github.com/python/mypy/pull/15029))\n*   Fix alignment of cheat sheet example (Ondřej Cvacho, PR [15039](https://github.com/python/mypy/pull/15039))\n*   Fix error for callback protocol matching against callable type object (Shantanu, PR [15042](https://github.com/python/mypy/pull/15042))\n\n### Error Reporting Improvements\n\n*   Improve bytes formatting error (Shantanu, PR [14959](https://github.com/python/mypy/pull/14959))\n\n### Mypyc Improvements\n\n*   Fix unions of bools and ints (Tomer Chachamu, PR [15066](https://github.com/python/mypy/pull/15066))\n\n### Other Fixes and Improvements\n\n*   Fix narrowing union types that include Self with isinstance (Christoph Tyralla, PR [14923](https://github.com/python/mypy/pull/14923))\n*   Allow objects matching SupportsKeysAndGetItem to be unpacked (Bryan Forbes, PR [14990](https://github.com/python/mypy/pull/14990))\n*   Check type guard validity for staticmethods (EXPLOSION, PR [14953](https://github.com/python/mypy/pull/14953))\n*   Fix sys.platform when cross-compiling with emscripten (Ethan Smith, PR [14888](https://github.com/python/mypy/pull/14888))\n\n### Typeshed Updates\n\nTypeshed is now modular and distributed as separate PyPI packages for everything except the standard library stubs. Please see [git log](https://github.com/python/typeshed/commits/main?after=b0ed50e9392a23e52445b630a808153e0e256976+0&branch=main&path=stdlib) for full list of typeshed changes.\n\n### Acknowledgements\n\nThanks to all mypy contributors who contributed to this release:\n\n*   Alex Waygood\n*   Amin Alaee\n*   Bryan Forbes\n*   Chad Dombrova\n*   Charlie Denton\n*   Christoph Tyralla\n*   dosisod\n*   Ethan Smith\n*   EXPLOSION\n*   Ilya Konstantinov\n*   Ivan Levkivskyi\n*   Jon Shea\n*   Jukka Lehtosalo\n*   KotlinIsland\n*   Marti Raudsepp\n*   Nikita Sobolev\n*   Ondřej Cvacho\n*   Shantanu\n*   sobolevn\n*   Tomer Chachamu\n*   Yaroslav Halchenko\n\nPosted by Wesley Collin Wright.\n\n\n## Mypy 1.2\n\n[Thursday, 6 April 2023](https://mypy-lang.blogspot.com/2023/04/mypy-12-released.html)\n\nWe’ve just uploaded mypy 1.2 to the Python Package Index ([PyPI](https://pypi.org/project/mypy/)). Mypy is a static type checker for Python. This release includes new features, performance improvements and bug fixes. You can install it as follows:\n\n    python3 -m pip install -U mypy\n\nYou can read the full documentation for this release on [Read the Docs](http://mypy.readthedocs.io).\n\n### Improvements to Dataclass Transforms\n\n*   Support implicit default for \"init\" parameter in field specifiers (Wesley Collin Wright and Jukka Lehtosalo, PR [15010](https://github.com/python/mypy/pull/15010))\n*   Support descriptors in dataclass transform (Jukka Lehtosalo, PR [15006](https://github.com/python/mypy/pull/15006))\n*   Fix frozen\\_default in incremental mode (Wesley Collin Wright)\n*   Fix frozen behavior for base classes with direct metaclasses (Wesley Collin Wright, PR [14878](https://github.com/python/mypy/pull/14878))\n\n### Mypyc: Native Floats\n\nMypyc now uses a native, unboxed representation for values of type float. Previously these were heap-allocated Python objects. Native floats are faster and use less memory. Code that uses floating-point operations heavily can be several times faster when using native floats.\n\nVarious float operations and math functions also now have optimized implementations. Refer to the [documentation](https://mypyc.readthedocs.io/en/latest/float_operations.html) for a full list.\n\nThis can change the behavior of existing code that uses subclasses of float. When assigning an instance of a subclass of float to a variable with the float type, it gets implicitly converted to a float instance when compiled:\n\n```python\nfrom lib import MyFloat  # MyFloat ia a subclass of \"float\"\n\ndef example() -> None:\n    x = MyFloat(1.5)\n    y: float = x  # Implicit conversion from MyFloat to float\n    print(type(y))  # float, not MyFloat\n```\n\nPreviously, implicit conversions were applied to int subclasses but not float subclasses.\n\nAlso, int values can no longer be assigned to a variable with type float in compiled code, since these types now have incompatible representations. An explicit conversion is required:\n\n```python\ndef example(n: int) -> None:\n    a: float = 1  # Error: cannot assign \"int\" to \"float\"\n    b: float = 1.0  # OK\n    c: float = n  # Error\n    d: float = float(n)  # OK\n```\n\nThis restriction only applies to assignments, since they could otherwise narrow down the type of a variable from float to int. int values can still be implicitly converted to float when passed as arguments to functions that expect float values.\n\nNote that mypyc still doesn’t support arrays of unboxed float values. Using list\\[float\\] involves heap-allocated float objects, since list can only store boxed values. Support for efficient floating point arrays is one of the next major planned mypyc features.\n\nRelated changes:\n\n*   Use a native unboxed representation for floats (Jukka Lehtosalo, PR [14880](https://github.com/python/mypy/pull/14880))\n*   Document native floats and integers (Jukka Lehtosalo, PR [14927](https://github.com/python/mypy/pull/14927))\n*   Fixes to float to int conversion (Jukka Lehtosalo, PR [14936](https://github.com/python/mypy/pull/14936))\n\n### Mypyc: Native Integers\n\nMypyc now supports signed 32-bit and 64-bit integer types in addition to the arbitrary-precision int type. You can use the types mypy\\_extensions.i32 and mypy\\_extensions.i64 to speed up code that uses integer operations heavily.\n\nSimple example:\n```python\nfrom mypy_extensions import i64\n\ndef inc(x: i64) -> i64:\n    return x + 1\n```\n\nRefer to the [documentation](https://mypyc.readthedocs.io/en/latest/using_type_annotations.html#native-integer-types) for more information. This feature was contributed by Jukka Lehtosalo.\n\n### Other Mypyc Fixes and Improvements\n\n*   Support iterating over a TypedDict (Richard Si, PR [14747](https://github.com/python/mypy/pull/14747))\n*   Faster coercions between different tuple types (Jukka Lehtosalo, PR [14899](https://github.com/python/mypy/pull/14899))\n*   Faster calls via type aliases (Jukka Lehtosalo, PR [14784](https://github.com/python/mypy/pull/14784))\n*   Faster classmethod calls via cls (Jukka Lehtosalo, PR [14789](https://github.com/python/mypy/pull/14789))\n\n### Fixes to Crashes\n\n*   Fix crash on class-level import in protocol definition (Ivan Levkivskyi, PR [14926](https://github.com/python/mypy/pull/14926))\n*   Fix crash on single item union of alias (Ivan Levkivskyi, PR [14876](https://github.com/python/mypy/pull/14876))\n*   Fix crash on ParamSpec in incremental mode (Ivan Levkivskyi, PR [14885](https://github.com/python/mypy/pull/14885))\n\n### Documentation Updates\n\n*   Update adopting \\--strict documentation for 1.0 (Shantanu, PR [14865](https://github.com/python/mypy/pull/14865))\n*   Some minor documentation tweaks (Jukka Lehtosalo, PR [14847](https://github.com/python/mypy/pull/14847))\n*   Improve documentation of top level mypy: disable-error-code comment (Nikita Sobolev, PR [14810](https://github.com/python/mypy/pull/14810))\n\n### Error Reporting Improvements\n\n*   Add error code to `typing_extensions` suggestion (Shantanu, PR [14881](https://github.com/python/mypy/pull/14881))\n*   Add a separate error code for top-level await (Nikita Sobolev, PR [14801](https://github.com/python/mypy/pull/14801))\n*   Don’t suggest two obsolete stub packages (Jelle Zijlstra, PR [14842](https://github.com/python/mypy/pull/14842))\n*   Add suggestions for pandas-stubs and lxml-stubs (Shantanu, PR [14737](https://github.com/python/mypy/pull/14737))\n\n### Other Fixes and Improvements\n\n*   Multiple inheritance considers callable objects as subtypes of functions (Christoph Tyralla, PR [14855](https://github.com/python/mypy/pull/14855))\n*   stubtest: Respect @final runtime decorator and enforce it in stubs (Nikita Sobolev, PR [14922](https://github.com/python/mypy/pull/14922))\n*   Fix false positives related to type\\[<type-var>\\] (sterliakov, PR [14756](https://github.com/python/mypy/pull/14756))\n*   Fix duplication of ParamSpec prefixes and properly substitute ParamSpecs (EXPLOSION, PR [14677](https://github.com/python/mypy/pull/14677))\n*   Fix line number if `__iter__` is incorrectly reported as missing (Jukka Lehtosalo, PR [14893](https://github.com/python/mypy/pull/14893))\n*   Fix incompatible overrides of overloaded generics with self types (Shantanu, PR [14882](https://github.com/python/mypy/pull/14882))\n*   Allow SupportsIndex in slice expressions (Shantanu, PR [14738](https://github.com/python/mypy/pull/14738))\n*   Support if statements in bodies of dataclasses and classes that use dataclass\\_transform (Jacek Chałupka, PR [14854](https://github.com/python/mypy/pull/14854))\n*   Allow iterable class objects to be unpacked (including enums) (Alex Waygood, PR [14827](https://github.com/python/mypy/pull/14827))\n*   Fix narrowing for walrus expressions used in match statements (Shantanu, PR [14844](https://github.com/python/mypy/pull/14844))\n*   Add signature for attr.evolve (Ilya Konstantinov, PR [14526](https://github.com/python/mypy/pull/14526))\n*   Fix Any inference when unpacking iterators that don't directly inherit from typing.Iterator (Alex Waygood, PR [14821](https://github.com/python/mypy/pull/14821))\n*   Fix unpack with overloaded `__iter__` method (Nikita Sobolev, PR [14817](https://github.com/python/mypy/pull/14817))\n*   Reduce size of JSON data in mypy cache (dosisod, PR [14808](https://github.com/python/mypy/pull/14808))\n*   Improve “used before definition” checks when a local definition has the same name as a global definition (Stas Ilinskiy, PR [14517](https://github.com/python/mypy/pull/14517))\n*   Honor NoReturn as \\_\\_setitem\\_\\_ return type to mark unreachable code (sterliakov, PR [12572](https://github.com/python/mypy/pull/12572))\n\n### Typeshed Updates\n\nTypeshed is now modular and distributed as separate PyPI packages for everything except the standard library stubs. Please see [git log](https://github.com/python/typeshed/commits/main?after=a544b75320e97424d2d927605316383c755cdac0+0&branch=main&path=stdlib) for full list of typeshed changes.\n\n### Acknowledgements\n\nThanks to all mypy contributors who contributed to this release:\n\n*   Alex Waygood\n*   Avasam\n*   Christoph Tyralla\n*   dosisod\n*   EXPLOSION\n*   Ilya Konstantinov\n*   Ivan Levkivskyi\n*   Jacek Chałupka\n*   Jelle Zijlstra\n*   Jukka Lehtosalo\n*   Marc Mueller\n*   Max Murin\n*   Nikita Sobolev\n*   Richard Si\n*   Shantanu\n*   Stas Ilinskiy\n*   sterliakov\n*   Wesley Collin Wright\n\nPosted by Jukka Lehtosalo\n\n\n## Mypy 1.1.1\n\n[Monday, 6 March 2023](https://mypy-lang.blogspot.com/2023/03/mypy-111-released.html)\n\n We’ve just uploaded mypy 1.1.1 to the Python Package Index ([PyPI](https://pypi.org/project/mypy/)). Mypy is a static type checker for Python. This release includes new features, performance improvements and bug fixes. You can install it as follows:\n\n    python3 -m pip install -U mypy\n\nYou can read the full documentation for this release on [Read the Docs](http://mypy.readthedocs.io).\n\n### Support for `dataclass_transform``\n\nThis release adds full support for the dataclass\\_transform decorator defined in [PEP 681](https://peps.python.org/pep-0681/#decorator-function-example). This allows decorators, base classes, and metaclasses that generate a \\_\\_init\\_\\_ method or other methods based on the properties of that class (similar to dataclasses) to have those methods recognized by mypy.\n\nThis was contributed by Wesley Collin Wright.\n\n### Dedicated Error Code for Method Assignments\n\nMypy can’t safely check all assignments to methods (a form of monkey patching), so mypy generates an error by default. To make it easier to ignore this error, mypy now uses the new error code method-assign for this. By disabling this error code in a file or globally, mypy will no longer complain about assignments to methods if the signatures are compatible.\n\nMypy also supports the old error code assignment for these assignments to prevent a backward compatibility break. More generally, we can use this mechanism in the future if we wish to split or rename another existing error code without causing backward compatibility issues.\n\nThis was contributed by Ivan Levkivskyi (PR [14570](https://github.com/python/mypy/pull/14570)).\n\n### Fixes to Crashes\n\n*   Fix a crash on walrus in comprehension at class scope (Ivan Levkivskyi, PR [14556](https://github.com/python/mypy/pull/14556))\n*   Fix crash related to value-constrained TypeVar (Shantanu, PR [14642](https://github.com/python/mypy/pull/14642))\n\n### Fixes to Cache Corruption\n\n*   Fix generic TypedDict/NamedTuple caching (Ivan Levkivskyi, PR [14675](https://github.com/python/mypy/pull/14675))\n\n### Mypyc Fixes and Improvements\n\n*   Raise \"non-trait base must be first...\" error less frequently (Richard Si, PR [14468](https://github.com/python/mypy/pull/14468))\n*   Generate faster code for bool comparisons and arithmetic (Jukka Lehtosalo, PR [14489](https://github.com/python/mypy/pull/14489))\n*   Optimize \\_\\_(a)enter\\_\\_/\\_\\_(a)exit\\_\\_ for native classes (Jared Hance, PR [14530](https://github.com/python/mypy/pull/14530))\n*   Detect if attribute definition conflicts with base class/trait (Jukka Lehtosalo, PR [14535](https://github.com/python/mypy/pull/14535))\n*   Support \\_\\_(r)divmod\\_\\_ dunders (Richard Si, PR [14613](https://github.com/python/mypy/pull/14613))\n*   Support \\_\\_pow\\_\\_, \\_\\_rpow\\_\\_, and \\_\\_ipow\\_\\_ dunders (Richard Si, PR [14616](https://github.com/python/mypy/pull/14616))\n*   Fix crash on star unpacking to underscore (Ivan Levkivskyi, PR [14624](https://github.com/python/mypy/pull/14624))\n*   Fix iterating over a union of dicts (Richard Si, PR [14713](https://github.com/python/mypy/pull/14713))\n\n### Fixes to Detecting Undefined Names (used-before-def)\n\n*   Correctly handle walrus operator (Stas Ilinskiy, PR [14646](https://github.com/python/mypy/pull/14646))\n*   Handle walrus declaration in match subject correctly (Stas Ilinskiy, PR [14665](https://github.com/python/mypy/pull/14665))\n\n### Stubgen Improvements\n\nStubgen is a tool for automatically generating draft stubs for libraries.\n\n*   Allow aliases below the top level (Chad Dombrova, PR [14388](https://github.com/python/mypy/pull/14388))\n*   Fix crash with PEP 604 union in type variable bound (Shantanu, PR [14557](https://github.com/python/mypy/pull/14557))\n*   Preserve PEP 604 unions in generated .pyi files (hamdanal, PR [14601](https://github.com/python/mypy/pull/14601))\n\n### Stubtest Improvements\n\nStubtest is a tool for testing that stubs conform to the implementations.\n\n*   Update message format so that it’s easier to go to error location (Avasam, PR [14437](https://github.com/python/mypy/pull/14437))\n*   Handle name-mangling edge cases better (Alex Waygood, PR [14596](https://github.com/python/mypy/pull/14596))\n\n### Changes to Error Reporting and Messages\n\n*   Add new TypedDict error code typeddict-unknown-key (JoaquimEsteves, PR [14225](https://github.com/python/mypy/pull/14225))\n*   Give arguments a more reasonable location in error messages (Max Murin, PR [14562](https://github.com/python/mypy/pull/14562))\n*   In error messages, quote just the module's name (Ilya Konstantinov, PR [14567](https://github.com/python/mypy/pull/14567))\n*   Improve misleading message about Enum() (Rodrigo Silva, PR [14590](https://github.com/python/mypy/pull/14590))\n*   Suggest importing from `typing_extensions` if definition is not in typing (Shantanu, PR [14591](https://github.com/python/mypy/pull/14591))\n*   Consistently use type-abstract error code (Ivan Levkivskyi, PR [14619](https://github.com/python/mypy/pull/14619))\n*   Consistently use literal-required error code for TypedDicts (Ivan Levkivskyi, PR [14621](https://github.com/python/mypy/pull/14621))\n*   Adjust inconsistent dataclasses plugin error messages (Wesley Collin Wright, PR [14637](https://github.com/python/mypy/pull/14637))\n*   Consolidate literal bool argument error messages (Wesley Collin Wright, PR [14693](https://github.com/python/mypy/pull/14693))\n\n### Other Fixes and Improvements\n\n*   Check that type guards accept a positional argument (EXPLOSION, PR [14238](https://github.com/python/mypy/pull/14238))\n*   Fix bug with in operator used with a union of Container and Iterable (Max Murin, PR [14384](https://github.com/python/mypy/pull/14384))\n*   Support protocol inference for type\\[T\\] via metaclass (Ivan Levkivskyi, PR [14554](https://github.com/python/mypy/pull/14554))\n*   Allow overlapping comparisons between bytes-like types (Shantanu, PR [14658](https://github.com/python/mypy/pull/14658))\n*   Fix mypy daemon documentation link in README (Ivan Levkivskyi, PR [14644](https://github.com/python/mypy/pull/14644))\n\n### Typeshed Updates\n\nTypeshed is now modular and distributed as separate PyPI packages for everything except the standard library stubs. Please see [git log](https://github.com/python/typeshed/commits/main?after=5ebf892d0710a6e87925b8d138dfa597e7bb11cc+0&branch=main&path=stdlib) for full list of typeshed changes.\n\n### Acknowledgements\n\nThanks to all mypy contributors who contributed to this release:\n\n*   Alex Waygood\n*   Avasam\n*   Chad Dombrova\n*   dosisod\n*   EXPLOSION\n*   hamdanal\n*   Ilya Konstantinov\n*   Ivan Levkivskyi\n*   Jared Hance\n*   JoaquimEsteves\n*   Jukka Lehtosalo\n*   Marc Mueller\n*   Max Murin\n*   Michael Lee\n*   Michael R. Crusoe\n*   Richard Si\n*   Rodrigo Silva\n*   Shantanu\n*   Stas Ilinskiy\n*   Wesley Collin Wright\n*   Yilei \"Dolee\" Yang\n*   Yurii Karabas\n\nWe’d also like to thank our employer, Dropbox, for funding the mypy core team.\n\nPosted by Max Murin\n\n\n## Mypy 1.0\n\n[Monday, 6 February 2023](https://mypy-lang.blogspot.com/2023/02/mypy-10-released.html)\n\nWe’ve just uploaded mypy 1.0 to the Python Package Index ([PyPI](https://pypi.org/project/mypy/)). Mypy is a static type checker for Python. This release includes new features, performance improvements and bug fixes. You can install it as follows:\n\n    python3 -m pip install -U mypy\n\nYou can read the full documentation for this release on [Read the Docs](http://mypy.readthedocs.io).\n\n### New Release Versioning Scheme\n\nNow that mypy reached 1.0, we’ll switch to a new versioning scheme. Mypy version numbers will be of form x.y.z.\n\nRules:\n\n*   The major release number (x) is incremented if a feature release includes a significant backward incompatible change that affects a significant fraction of users.\n*   The minor release number (y) is incremented on each feature release. Minor releases include updated stdlib stubs from typeshed.\n*   The point release number (z) is incremented when there are fixes only.\n\nMypy doesn't use SemVer, since most minor releases have at least minor backward incompatible changes in typeshed, at the very least. Also, many type checking features find new legitimate issues in code. These are not considered backward incompatible changes, unless the number of new errors is very high.\n\nAny significant backward incompatible change must be announced in the blog post for the previous feature release, before making the change. The previous release must also provide a flag to explicitly enable or disable the new behavior (whenever practical), so that users will be able to prepare for the changes and report issues. We should keep the feature flag for at least a few releases after we've switched the default.\n\nSee [”Release Process” in the mypy wiki](https://github.com/python/mypy/wiki/Release-Process) for more details and for the most up-to-date version of the versioning scheme.\n\n### Performance Improvements\n\nMypy 1.0 is up to 40% faster than mypy 0.991 when type checking the Dropbox internal codebase. We also set up a daily job to measure the performance of the most recent development version of mypy to make it easier to track changes in performance.\n\nMany optimizations contributed to this improvement:\n\n*   Improve performance for errors on class with many attributes (Shantanu, PR [14379](https://github.com/python/mypy/pull/14379))\n*   Speed up make\\_simplified\\_union (Jukka Lehtosalo, PR [14370](https://github.com/python/mypy/pull/14370))\n*   Micro-optimize get\\_proper\\_type(s) (Jukka Lehtosalo, PR [14369](https://github.com/python/mypy/pull/14369))\n*   Micro-optimize flatten\\_nested\\_unions (Jukka Lehtosalo, PR [14368](https://github.com/python/mypy/pull/14368))\n*   Some semantic analyzer micro-optimizations (Jukka Lehtosalo, PR [14367](https://github.com/python/mypy/pull/14367))\n*   A few miscellaneous micro-optimizations (Jukka Lehtosalo, PR [14366](https://github.com/python/mypy/pull/14366))\n*   Optimization: Avoid a few uses of contextmanagers in semantic analyzer (Jukka Lehtosalo, PR [14360](https://github.com/python/mypy/pull/14360))\n*   Optimization: Enable always defined attributes in Type subclasses (Jukka Lehtosalo, PR [14356](https://github.com/python/mypy/pull/14356))\n*   Optimization: Remove expensive context manager in type analyzer (Jukka Lehtosalo, PR [14357](https://github.com/python/mypy/pull/14357))\n*   subtypes: fast path for Union/Union subtype check (Hugues, PR [14277](https://github.com/python/mypy/pull/14277))\n*   Micro-optimization: avoid Bogus\\[int\\] types that cause needless boxing (Jukka Lehtosalo, PR [14354](https://github.com/python/mypy/pull/14354))\n*   Avoid slow error message logic if errors not shown to user (Jukka Lehtosalo, PR [14336](https://github.com/python/mypy/pull/14336))\n*   Speed up the implementation of hasattr() checks (Jukka Lehtosalo, PR [14333](https://github.com/python/mypy/pull/14333))\n*   Avoid the use of a context manager in hot code path (Jukka Lehtosalo, PR [14331](https://github.com/python/mypy/pull/14331))\n*   Change various type queries into faster bool type queries (Jukka Lehtosalo, PR [14330](https://github.com/python/mypy/pull/14330))\n*   Speed up recursive type check (Jukka Lehtosalo, PR [14326](https://github.com/python/mypy/pull/14326))\n*   Optimize subtype checking by avoiding a nested function (Jukka Lehtosalo, PR [14325](https://github.com/python/mypy/pull/14325))\n*   Optimize type parameter checks in subtype checking (Jukka Lehtosalo, PR [14324](https://github.com/python/mypy/pull/14324))\n*   Speed up freshening type variables (Jukka Lehtosalo, PR [14323](https://github.com/python/mypy/pull/14323))\n*   Optimize implementation of TypedDict types for \\*\\*kwds (Jukka Lehtosalo, PR [14316](https://github.com/python/mypy/pull/14316))\n\n### Warn About Variables Used Before Definition\n\nMypy will now generate an error if you use a variable before it’s defined. This feature is enabled by default. By default mypy reports an error when it infers that a variable is always undefined.\n```python\ny = x  # E: Name \"x\" is used before definition [used-before-def]\nx = 0\n```\nThis feature was contributed by Stas Ilinskiy.\n\n### Detect Possibly Undefined Variables (Experimental)\n\nA new experimental possibly-undefined error code is now available that will detect variables that may be undefined:\n```python\n    if b:\n        x = 0\n    print(x)  # Error: Name \"x\" may be undefined [possibly-undefined]\n```\nThe error code is disabled be default, since it can generate false positives.\n\nThis feature was contributed by Stas Ilinskiy.\n\n### Support the “Self” Type\n\nThere is now a simpler syntax for declaring [generic self types](https://mypy.readthedocs.io/en/stable/generics.html#generic-methods-and-generic-self) introduced in [PEP 673](https://peps.python.org/pep-0673/): the Self type. You no longer have to define a type variable to use “self types”, and you can use them with attributes. Example from mypy documentation:\n```python\nfrom typing import Self\n\nclass Friend:\n    other: Self | None = None\n\n    @classmethod\n    def make_pair(cls) -> tuple[Self, Self]:\n        a, b = cls(), cls()\n        a.other = b\n        b.other = a\n        return a, b\n\nclass SuperFriend(Friend):\n    pass\n\n# a and b have the inferred type \"SuperFriend\", not \"Friend\"\na, b = SuperFriend.make_pair()\n```\nThe feature was introduced in Python 3.11. In earlier Python versions a backport of Self is available in `typing_extensions`.\n\nThis was contributed by Ivan Levkivskyi (PR [14041](https://github.com/python/mypy/pull/14041)).\n\n### Support ParamSpec in Type Aliases\n\nParamSpec and Concatenate can now be used in type aliases. Example:\n```python\nfrom typing import ParamSpec, Callable\n\nP = ParamSpec(\"P\")\nA = Callable[P, None]\n\ndef f(c: A[int, str]) -> None:\n    c(1, \"x\")\n```\nThis feature was contributed by Ivan Levkivskyi (PR [14159](https://github.com/python/mypy/pull/14159)).\n\n### ParamSpec and Generic Self Types No Longer Experimental\n\nSupport for ParamSpec ([PEP 612](https://www.python.org/dev/peps/pep-0612/)) and generic self types are no longer considered experimental.\n\n### Miscellaneous New Features\n\n*   Minimal, partial implementation of dataclass\\_transform ([PEP 681](https://peps.python.org/pep-0681/)) (Wesley Collin Wright, PR [14523](https://github.com/python/mypy/pull/14523))\n*   Add basic support for `typing_extensions`.TypeVar (Marc Mueller, PR [14313](https://github.com/python/mypy/pull/14313))\n*   Add \\--debug-serialize option (Marc Mueller, PR [14155](https://github.com/python/mypy/pull/14155))\n*   Constant fold initializers of final variables (Jukka Lehtosalo, PR [14283](https://github.com/python/mypy/pull/14283))\n*   Enable Final instance attributes for attrs (Tin Tvrtković, PR [14232](https://github.com/python/mypy/pull/14232))\n*   Allow function arguments as base classes (Ivan Levkivskyi, PR [14135](https://github.com/python/mypy/pull/14135))\n*   Allow super() with mixin protocols (Ivan Levkivskyi, PR [14082](https://github.com/python/mypy/pull/14082))\n*   Add type inference for dict.keys membership (Matthew Hughes, PR [13372](https://github.com/python/mypy/pull/13372))\n*   Generate error for class attribute access if attribute is defined with `__slots__` (Harrison McCarty, PR [14125](https://github.com/python/mypy/pull/14125))\n*   Support additional attributes in callback protocols (Ivan Levkivskyi, PR [14084](https://github.com/python/mypy/pull/14084))\n\n### Fixes to Crashes\n\n*   Fix crash on prefixed ParamSpec with forward reference (Ivan Levkivskyi, PR [14569](https://github.com/python/mypy/pull/14569))\n*   Fix internal crash when resolving the same partial type twice (Shantanu, PR [14552](https://github.com/python/mypy/pull/14552))\n*   Fix crash in daemon mode on new import cycle (Ivan Levkivskyi, PR [14508](https://github.com/python/mypy/pull/14508))\n*   Fix crash in mypy daemon (Ivan Levkivskyi, PR [14497](https://github.com/python/mypy/pull/14497))\n*   Fix crash on Any metaclass in incremental mode (Ivan Levkivskyi, PR [14495](https://github.com/python/mypy/pull/14495))\n*   Fix crash in await inside comprehension outside function (Ivan Levkivskyi, PR [14486](https://github.com/python/mypy/pull/14486))\n*   Fix crash in Self type on forward reference in upper bound (Ivan Levkivskyi, PR [14206](https://github.com/python/mypy/pull/14206))\n*   Fix a crash when incorrect super() is used outside a method (Ivan Levkivskyi, PR [14208](https://github.com/python/mypy/pull/14208))\n*   Fix crash on overriding with frozen attrs (Ivan Levkivskyi, PR [14186](https://github.com/python/mypy/pull/14186))\n*   Fix incremental mode crash on generic function appearing in nested position (Ivan Levkivskyi, PR [14148](https://github.com/python/mypy/pull/14148))\n*   Fix daemon crash on malformed NamedTuple (Ivan Levkivskyi, PR [14119](https://github.com/python/mypy/pull/14119))\n*   Fix crash during ParamSpec inference (Ivan Levkivskyi, PR [14118](https://github.com/python/mypy/pull/14118))\n*   Fix crash on nested generic callable (Ivan Levkivskyi, PR [14093](https://github.com/python/mypy/pull/14093))\n*   Fix crashes with unpacking SyntaxError (Shantanu, PR [11499](https://github.com/python/mypy/pull/11499))\n*   Fix crash on partial type inference within a lambda (Ivan Levkivskyi, PR [14087](https://github.com/python/mypy/pull/14087))\n*   Fix crash with enums (Michael Lee, PR [14021](https://github.com/python/mypy/pull/14021))\n*   Fix crash with malformed TypedDicts and disllow-any-expr (Michael Lee, PR [13963](https://github.com/python/mypy/pull/13963))\n\n### Error Reporting Improvements\n\n*   More helpful error for missing self (Shantanu, PR [14386](https://github.com/python/mypy/pull/14386))\n*   Add error-code truthy-iterable (Marc Mueller, PR [13762](https://github.com/python/mypy/pull/13762))\n*   Fix pluralization in error messages (KotlinIsland, PR [14411](https://github.com/python/mypy/pull/14411))\n\n### Mypyc: Support Match Statement\n\nMypyc can now compile Python 3.10 match statements.\n\nThis was contributed by dosisod (PR [13953](https://github.com/python/mypy/pull/13953)).\n\n### Other Mypyc Fixes and Improvements\n\n*   Optimize int(x)/float(x)/complex(x) on instances of native classes (Richard Si, PR [14450](https://github.com/python/mypy/pull/14450))\n*   Always emit warnings (Richard Si, PR [14451](https://github.com/python/mypy/pull/14451))\n*   Faster bool and integer conversions (Jukka Lehtosalo, PR [14422](https://github.com/python/mypy/pull/14422))\n*   Support attributes that override properties (Jukka Lehtosalo, PR [14377](https://github.com/python/mypy/pull/14377))\n*   Precompute set literals for \"in\" operations and iteration (Richard Si, PR [14409](https://github.com/python/mypy/pull/14409))\n*   Don't load targets with forward references while setting up non-extension class `__all__` (Richard Si, PR [14401](https://github.com/python/mypy/pull/14401))\n*   Compile away NewType type calls (Richard Si, PR [14398](https://github.com/python/mypy/pull/14398))\n*   Improve error message for multiple inheritance (Joshua Bronson, PR [14344](https://github.com/python/mypy/pull/14344))\n*   Simplify union types (Jukka Lehtosalo, PR [14363](https://github.com/python/mypy/pull/14363))\n*   Fixes to union simplification (Jukka Lehtosalo, PR [14364](https://github.com/python/mypy/pull/14364))\n*   Fix for typeshed changes to Collection (Shantanu, PR [13994](https://github.com/python/mypy/pull/13994))\n*   Allow use of enum.Enum (Shantanu, PR [13995](https://github.com/python/mypy/pull/13995))\n*   Fix compiling on Arch Linux (dosisod, PR [13978](https://github.com/python/mypy/pull/13978))\n\n### Documentation Improvements\n\n*   Various documentation and error message tweaks (Jukka Lehtosalo, PR [14574](https://github.com/python/mypy/pull/14574))\n*   Improve Generics documentation (Shantanu, PR [14587](https://github.com/python/mypy/pull/14587))\n*   Improve protocols documentation (Shantanu, PR [14577](https://github.com/python/mypy/pull/14577))\n*   Improve dynamic typing documentation (Shantanu, PR [14576](https://github.com/python/mypy/pull/14576))\n*   Improve the Common Issues page (Shantanu, PR [14581](https://github.com/python/mypy/pull/14581))\n*   Add a top-level TypedDict page (Shantanu, PR [14584](https://github.com/python/mypy/pull/14584))\n*   More improvements to getting started documentation (Shantanu, PR [14572](https://github.com/python/mypy/pull/14572))\n*   Move truthy-function documentation from “optional checks” to “enabled by default” (Anders Kaseorg, PR [14380](https://github.com/python/mypy/pull/14380))\n*   Avoid use of implicit optional in decorator factory documentation (Tom Schraitle, PR [14156](https://github.com/python/mypy/pull/14156))\n*   Clarify documentation surrounding install-types (Shantanu, PR [14003](https://github.com/python/mypy/pull/14003))\n*   Improve searchability for module level type ignore errors (Shantanu, PR [14342](https://github.com/python/mypy/pull/14342))\n*   Advertise mypy daemon in README (Ivan Levkivskyi, PR [14248](https://github.com/python/mypy/pull/14248))\n*   Add link to error codes in README (Ivan Levkivskyi, PR [14249](https://github.com/python/mypy/pull/14249))\n*   Document that report generation disables cache (Ilya Konstantinov, PR [14402](https://github.com/python/mypy/pull/14402))\n*   Stop saying mypy is beta software (Ivan Levkivskyi, PR [14251](https://github.com/python/mypy/pull/14251))\n*   Flycheck-mypy is deprecated, since its functionality was merged to Flycheck (Ivan Levkivskyi, PR [14247](https://github.com/python/mypy/pull/14247))\n*   Update code example in \"Declaring decorators\" (ChristianWitzler, PR [14131](https://github.com/python/mypy/pull/14131))\n\n### Stubtest Improvements\n\nStubtest is a tool for testing that stubs conform to the implementations.\n\n*   Improve error message for `__all__`\\-related errors (Alex Waygood, PR [14362](https://github.com/python/mypy/pull/14362))\n*   Improve heuristics for determining whether global-namespace names are imported (Alex Waygood, PR [14270](https://github.com/python/mypy/pull/14270))\n*   Catch BaseException on module imports (Shantanu, PR [14284](https://github.com/python/mypy/pull/14284))\n*   Associate exported symbol error with `__all__` object\\_path (Nikita Sobolev, PR [14217](https://github.com/python/mypy/pull/14217))\n*   Add \\_\\_warningregistry\\_\\_ to the list of ignored module dunders (Nikita Sobolev, PR [14218](https://github.com/python/mypy/pull/14218))\n*   If a default is present in the stub, check that it is correct (Jelle Zijlstra, PR [14085](https://github.com/python/mypy/pull/14085))\n\n### Stubgen Improvements\n\nStubgen is a tool for automatically generating draft stubs for libraries.\n\n*   Treat dlls as C modules (Shantanu, PR [14503](https://github.com/python/mypy/pull/14503))\n\n### Other Notable Fixes and Improvements\n\n*   Update stub suggestions based on recent typeshed changes (Alex Waygood, PR [14265](https://github.com/python/mypy/pull/14265))\n*   Fix attrs protocol check with cache (Marc Mueller, PR [14558](https://github.com/python/mypy/pull/14558))\n*   Fix strict equality check if operand item type has custom \\_\\_eq\\_\\_ (Jukka Lehtosalo, PR [14513](https://github.com/python/mypy/pull/14513))\n*   Don't consider object always truthy (Jukka Lehtosalo, PR [14510](https://github.com/python/mypy/pull/14510))\n*   Properly support union of TypedDicts as dict literal context (Ivan Levkivskyi, PR [14505](https://github.com/python/mypy/pull/14505))\n*   Properly expand type in generic class with Self and TypeVar with values (Ivan Levkivskyi, PR [14491](https://github.com/python/mypy/pull/14491))\n*   Fix recursive TypedDicts/NamedTuples defined with call syntax (Ivan Levkivskyi, PR [14488](https://github.com/python/mypy/pull/14488))\n*   Fix type inference issue when a class inherits from Any (Shantanu, PR [14404](https://github.com/python/mypy/pull/14404))\n*   Fix false positive on generic base class with six (Ivan Levkivskyi, PR [14478](https://github.com/python/mypy/pull/14478))\n*   Don't read scripts without extensions as modules in namespace mode (Tim Geypens, PR [14335](https://github.com/python/mypy/pull/14335))\n*   Fix inference for constrained type variables within unions (Christoph Tyralla, PR [14396](https://github.com/python/mypy/pull/14396))\n*   Fix Unpack imported from typing (Marc Mueller, PR [14378](https://github.com/python/mypy/pull/14378))\n*   Allow trailing commas in ini configuration of multiline values (Nikita Sobolev, PR [14240](https://github.com/python/mypy/pull/14240))\n*   Fix false negatives involving Unions and generators or coroutines (Shantanu, PR [14224](https://github.com/python/mypy/pull/14224))\n*   Fix ParamSpec constraint for types as callable (Vincent Vanlaer, PR [14153](https://github.com/python/mypy/pull/14153))\n*   Fix type aliases with fixed-length tuples (Jukka Lehtosalo, PR [14184](https://github.com/python/mypy/pull/14184))\n*   Fix issues with type aliases and new style unions (Jukka Lehtosalo, PR [14181](https://github.com/python/mypy/pull/14181))\n*   Simplify unions less aggressively (Ivan Levkivskyi, PR [14178](https://github.com/python/mypy/pull/14178))\n*   Simplify callable overlap logic (Ivan Levkivskyi, PR [14174](https://github.com/python/mypy/pull/14174))\n*   Try empty context when assigning to union typed variables (Ivan Levkivskyi, PR [14151](https://github.com/python/mypy/pull/14151))\n*   Improvements to recursive types (Ivan Levkivskyi, PR [14147](https://github.com/python/mypy/pull/14147))\n*   Make non-numeric non-empty FORCE\\_COLOR truthy (Shantanu, PR [14140](https://github.com/python/mypy/pull/14140))\n*   Fix to recursive type aliases (Ivan Levkivskyi, PR [14136](https://github.com/python/mypy/pull/14136))\n*   Correctly handle Enum name on Python 3.11 (Ivan Levkivskyi, PR [14133](https://github.com/python/mypy/pull/14133))\n*   Fix class objects falling back to metaclass for callback protocol (Ivan Levkivskyi, PR [14121](https://github.com/python/mypy/pull/14121))\n*   Correctly support self types in callable ClassVar (Ivan Levkivskyi, PR [14115](https://github.com/python/mypy/pull/14115))\n*   Fix type variable clash in nested positions and in attributes (Ivan Levkivskyi, PR [14095](https://github.com/python/mypy/pull/14095))\n*   Allow class variable as implementation for read only attribute (Ivan Levkivskyi, PR [14081](https://github.com/python/mypy/pull/14081))\n*   Prevent warnings from causing dmypy to fail (Andrzej Bartosiński, PR [14102](https://github.com/python/mypy/pull/14102))\n*   Correctly process nested definitions in mypy daemon (Ivan Levkivskyi, PR [14104](https://github.com/python/mypy/pull/14104))\n*   Don't consider a branch unreachable if there is a possible promotion (Ivan Levkivskyi, PR [14077](https://github.com/python/mypy/pull/14077))\n*   Fix incompatible overrides of overloaded methods in concrete subclasses (Shantanu, PR [14017](https://github.com/python/mypy/pull/14017))\n*   Fix new style union syntax in type aliases (Jukka Lehtosalo, PR [14008](https://github.com/python/mypy/pull/14008))\n*   Fix and optimise overload compatibility checking (Shantanu, PR [14018](https://github.com/python/mypy/pull/14018))\n*   Improve handling of redefinitions through imports (Shantanu, PR [13969](https://github.com/python/mypy/pull/13969))\n*   Preserve (some) implicitly exported types (Shantanu, PR [13967](https://github.com/python/mypy/pull/13967))\n\n### Typeshed Updates\n\nTypeshed is now modular and distributed as separate PyPI packages for everything except the standard library stubs. Please see [git log](https://github.com/python/typeshed/commits/main?after=ea0ae2155e8a04c9837903c3aff8dd5ad5f36ebc+0&branch=main&path=stdlib) for full list of typeshed changes.\n\n### Acknowledgements\n\nThanks to all mypy contributors who contributed to this release:\n\n*   Alessio Izzo\n*   Alex Waygood\n*   Anders Kaseorg\n*   Andrzej Bartosiński\n*   Avasam\n*   ChristianWitzler\n*   Christoph Tyralla\n*   dosisod\n*   Harrison McCarty\n*   Hugo van Kemenade\n*   Hugues\n*   Ilya Konstantinov\n*   Ivan Levkivskyi\n*   Jelle Zijlstra\n*   jhance\n*   johnthagen\n*   Jonathan Daniel\n*   Joshua Bronson\n*   Jukka Lehtosalo\n*   KotlinIsland\n*   Lakshay Bisht\n*   Lefteris Karapetsas\n*   Marc Mueller\n*   Matthew Hughes\n*   Michael Lee\n*   Nick Drozd\n*   Nikita Sobolev\n*   Richard Si\n*   Shantanu\n*   Stas Ilinskiy\n*   Tim Geypens\n*   Tin Tvrtković\n*   Tom Schraitle\n*   Valentin Stanciu\n*   Vincent Vanlaer\n\nWe’d also like to thank our employer, Dropbox, for funding the mypy core team.\n\nPosted by Stas Ilinskiy\n\n## Previous releases\n\nFor information about previous releases, refer to the posts at https://mypy-lang.blogspot.com/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.587890625,
          "content": "# Contributing to Mypy\n\nWelcome!  Mypy is a community project that aims to work for a wide\nrange of Python users and Python codebases.  If you're trying mypy on\nyour Python code, your experience and what you can contribute are\nimportant to the project's success.\n\n## Code of Conduct\n\nEveryone participating in the Mypy community, and in particular in our\nissue tracker, pull requests, and chat, is expected to treat\nother people with respect and more generally to follow the guidelines\narticulated in the [Python Community Code of Conduct](https://www.python.org/psf/codeofconduct/).\n\n## Getting started with development\n\n### Setup\n\n#### (1) Fork the mypy repository\n\nWithin GitHub, navigate to <https://github.com/python/mypy> and fork the repository.\n\n#### (2) Clone the mypy repository and enter into it\n\n```bash\ngit clone git@github.com:<your_username>/mypy.git\ncd mypy\n```\n\n#### (3) Create then activate a virtual environment\n\n```bash\npython3 -m venv venv\nsource venv/bin/activate\n```\n\n```bash\n# For Windows use\npython -m venv venv\n. venv/Scripts/activate\n\n# For more details, see https://docs.python.org/3/library/venv.html#creating-virtual-environments\n```\n\n#### (4) Install the test requirements and the project\n\n```bash\npython -m pip install -r test-requirements.txt\npython -m pip install -e .\nhash -r  # This resets shell PATH cache, not necessary on Windows\n```\n\n> **Note**\n> You'll need Python 3.9 or higher to install all requirements listed in\n> test-requirements.txt\n\n### Running tests\n\nRunning the full test suite can take a while, and usually isn't necessary when\npreparing a PR. Once you file a PR, the full test suite will run on GitHub.\nYou'll then be able to see any test failures, and make any necessary changes to\nyour PR.\n\nHowever, if you wish to do so, you can run the full test suite\nlike this:\n\n```bash\npython runtests.py\n```\n\nSome useful commands for running specific tests include:\n\n```bash\n# Use mypy to check mypy's own code\npython runtests.py self\n# or equivalently:\npython -m mypy --config-file mypy_self_check.ini -p mypy\n\n# Run a single test from the test suite\npytest -n0 -k 'test_name'\n\n# Run all test cases in the \"test-data/unit/check-dataclasses.test\" file\npytest mypy/test/testcheck.py::TypeCheckSuite::check-dataclasses.test\n\n# Run the formatters and linters\npython runtests.py lint\n```\n\nFor an in-depth guide on running and writing tests,\nsee [the README in the test-data directory](test-data/unit/README.md).\n\n#### Using `tox`\n\nYou can also use [`tox`](https://tox.wiki/en/latest/) to run tests and other commands.\n`tox` handles setting up test environments for you.\n\n```bash\n# Run tests\ntox run -e py\n\n# Run tests using some specific Python version\ntox run -e py311\n\n# Run a specific command\ntox run -e lint\n\n# Run a single test from the test suite\ntox run -e py -- -n0 -k 'test_name'\n\n# Run all test cases in the \"test-data/unit/check-dataclasses.test\" file using\n# Python 3.11 specifically\ntox run -e py311 -- mypy/test/testcheck.py::TypeCheckSuite::check-dataclasses.test\n\n# Set up a development environment with all the project libraries and run a command\ntox -e dev -- mypy --verbose test_case.py\ntox -e dev --override testenv:dev.allowlist_externals+=env -- env  # inspect the environment\n```\n\nIf you don't already have `tox` installed, you can use a virtual environment as\ndescribed above to install `tox` via `pip` (e.g., ``python -m pip install tox``).\n\n## First time contributors\n\nIf you're looking for things to help with, browse our [issue tracker](https://github.com/python/mypy/issues)!\n\nIn particular, look for:\n\n- [good first issues](https://github.com/python/mypy/labels/good-first-issue)\n- [good second issues](https://github.com/python/mypy/labels/good-second-issue)\n- [documentation issues](https://github.com/python/mypy/labels/documentation)\n\nYou do not need to ask for permission to work on any of these issues.\nJust fix the issue yourself, [try to add a unit test](#running-tests) and\n[open a pull request](#submitting-changes).\n\nTo get help fixing a specific issue, it's often best to comment on the issue\nitself. You're much more likely to get help if you provide details about what\nyou've tried and where you've looked (maintainers tend to help those who help\nthemselves). [gitter](https://gitter.im/python/typing) can also be a good place\nto ask for help.\n\nInteractive debuggers like `pdb` and `ipdb` are really useful for getting\nstarted with the mypy codebase. This is a\n[useful tutorial](https://realpython.com/python-debugging-pdb/).\n\nIt's also extremely easy to get started contributing to our sister project\n[typeshed](https://github.com/python/typeshed/issues) that provides type stubs\nfor libraries. This is a great way to become familiar with type syntax.\n\n## Submitting changes\n\nEven more excellent than a good bug report is a fix for a bug, or the\nimplementation of a much-needed new feature. We'd love to have\nyour contributions.\n\nWe use the usual GitHub pull-request flow, which may be familiar to\nyou if you've contributed to other projects on GitHub.  For the mechanics,\nsee [our git and GitHub workflow help page](https://github.com/python/mypy/wiki/Using-Git-And-GitHub),\nor [GitHub's own documentation](https://help.github.com/articles/using-pull-requests/).\n\nAnyone interested in Mypy may review your code.  One of the Mypy core\ndevelopers will merge your pull request when they think it's ready.\n\nIf your change will be a significant amount of work\nto write, we highly recommend starting by opening an issue laying out\nwhat you want to do.  That lets a conversation happen early in case\nother contributors disagree with what you'd like to do or have ideas\nthat will help you do it.\n\nThe best pull requests are focused, clearly describe what they're for\nand why they're correct, and contain tests for whatever changes they\nmake to the code's behavior.  As a bonus these are easiest for someone\nto review, which helps your pull request get merged quickly!  Standard\nadvice about good pull requests for open-source projects applies; we\nhave [our own writeup](https://github.com/python/mypy/wiki/Good-Pull-Request)\nof this advice.\n\nAlso, do not squash your commits after you have submitted a pull request, as this\nerases context during review. We will squash commits when the pull request is merged.\n\nYou may also find other pages in the\n[Mypy developer guide](https://github.com/python/mypy/wiki/Developer-Guides)\nhelpful in developing your change.\n\n## Core developer guidelines\n\nCore developers should follow these rules when processing pull requests:\n\n- Always wait for tests to pass before merging PRs.\n- Use \"[Squash and merge](https://github.com/blog/2141-squash-your-commits)\"\n  to merge PRs.\n- Delete branches for merged PRs (by core devs pushing to the main repo).\n- Edit the final commit message before merging to conform to the following\n  style (we wish to have a clean `git log` output):\n  - When merging a multi-commit PR make sure that the commit message doesn't\n    contain the local history from the committer and the review history from\n    the PR. Edit the message to only describe the end state of the PR.\n  - Make sure there is a *single* newline at the end of the commit message.\n    This way there is a single empty line between commits in `git log`\n    output.\n  - Split lines as needed so that the maximum line length of the commit\n    message is under 80 characters, including the subject line.\n  - Capitalize the subject and each paragraph.\n  - Make sure that the subject of the commit message has no trailing dot.\n  - Use the imperative mood in the subject line (e.g. \"Fix typo in README\").\n  - If the PR fixes an issue, make sure something like \"Fixes #xxx.\" occurs\n    in the body of the message (not in the subject).\n  - Use Markdown for formatting.\n"
        },
        {
          "name": "CREDITS",
          "type": "blob",
          "size": 1.1826171875,
          "content": "Credits\n-------\n\nFor a full list of contributors you can mine the commit history:\nhttps://github.com/python/mypy/commits/master\n\nFor lists of contributors per mypy release (including typeshed) see\nthe release blog posts at https://mypy-lang.blogspot.com/.\n\nDropbox core team:\n\n  Jukka Lehtosalo <jukka.lehtosalo@iki.fi>\n  Ivan Levkivskyi <levkivskyi@gmail.com>\n  Jared Hance\n\nNon-Dropbox core team members:\n\n  Ethan Smith\n  Guido van Rossum <guido@python.org>\n  Jelle Zijlstra <jelle.zijlstra@gmail.com>\n  Michael J. Sullivan <sully@msully.net>\n  Shantanu Jain\n  Xuanda Yang <th3charlie@gmail.com>\n  Jingchen Ye <97littleleaf11@gmail.com>\n  Nikita Sobolev <mail@sobolevn.me>\n\nPast Dropbox core team members:\n\n  David Fisher\n  Svyatoslav Ilinskiy\n  Greg Price\n  Naomi Seyfer\n  Michael Lee\n  Reid Barton\n\nAdditional thanks to:\n\n  Alex Allain\n  Max Bolingbroke\n  Peter Calvert\n  Kannan Goundan\n  Kathy Gray\n  David J Greaves\n  Riitta Ikonen\n  Terho Ikonen\n  Stephen Kell\n  Łukasz Langa\n  Laura Lehtosalo\n  Peter Ludemann\n  Seppo Mattila\n  Robin Message\n  Alan Mycroft\n  Dominic Orchard\n  Pekka Rapinoja\n  Matt Robben\n  Satnam Singh\n  Juha Sorva\n  Clay Sweetser\n  Jorma Tarhio\n  Jussi Tuovila\n  Andrey Vlasovskikh\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0625,
          "content": "Mypy (and mypyc) are licensed under the terms of the MIT license, reproduced below.\n\n= = = = =\n\nThe MIT License\n\nCopyright (c) 2012-2023 Jukka Lehtosalo and contributors\nCopyright (c) 2015-2023 Dropbox, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n= = = = =\n\nPortions of mypy and mypyc are licensed under different licenses.\nThe files\nmypyc/lib-rt/pythonsupport.h, mypyc/lib-rt/getargs.c and\nmypyc/lib-rt/getargsfast.c are licensed under the PSF 2 License, reproduced\nbelow.\n\n= = = = =\n\nPYTHON SOFTWARE FOUNDATION LICENSE VERSION 2\n--------------------------------------------\n\n1. This LICENSE AGREEMENT is between the Python Software Foundation\n(\"PSF\"), and the Individual or Organization (\"Licensee\") accessing and\notherwise using this software (\"Python\") in source or binary form and\nits associated documentation.\n\n2. Subject to the terms and conditions of this License Agreement, PSF hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python alone or in any derivative version,\nprovided, however, that PSF's License Agreement and PSF's notice of copyright,\ni.e., \"Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n2011, 2012 Python Software Foundation; All Rights Reserved\" are retained in Python\nalone or in any derivative version prepared by Licensee.\n\n3. In the event Licensee prepares a derivative work that is based on\nor incorporates Python or any part thereof, and wants to make\nthe derivative work available to others as provided herein, then\nLicensee hereby agrees to include in any such work a brief summary of\nthe changes made to Python.\n\n4. PSF is making Python available to Licensee on an \"AS IS\"\nbasis.  PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR\nIMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND\nDISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS\nFOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON WILL NOT\nINFRINGE ANY THIRD PARTY RIGHTS.\n\n5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON\nFOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS\nA RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON,\nOR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n\n6. This License Agreement will automatically terminate upon a material\nbreach of its terms and conditions.\n\n7. Nothing in this License Agreement shall be deemed to create any\nrelationship of agency, partnership, or joint venture between PSF and\nLicensee.  This License Agreement does not grant permission to use PSF\ntrademarks or trade name in a trademark sense to endorse or promote\nproducts or services of Licensee, or any third party.\n\n8. By copying, installing or otherwise using Python, Licensee\nagrees to be bound by the terms and conditions of this License\nAgreement.\n\n\nBEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0\n-------------------------------------------\n\nBEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1\n\n1. This LICENSE AGREEMENT is between BeOpen.com (\"BeOpen\"), having an\noffice at 160 Saratoga Avenue, Santa Clara, CA 95051, and the\nIndividual or Organization (\"Licensee\") accessing and otherwise using\nthis software in source or binary form and its associated\ndocumentation (\"the Software\").\n\n2. Subject to the terms and conditions of this BeOpen Python License\nAgreement, BeOpen hereby grants Licensee a non-exclusive,\nroyalty-free, world-wide license to reproduce, analyze, test, perform\nand/or display publicly, prepare derivative works, distribute, and\notherwise use the Software alone or in any derivative version,\nprovided, however, that the BeOpen Python License is retained in the\nSoftware, alone or in any derivative version prepared by Licensee.\n\n3. BeOpen is making the Software available to Licensee on an \"AS IS\"\nbasis.  BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR\nIMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND\nDISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS\nFOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE WILL NOT\nINFRINGE ANY THIRD PARTY RIGHTS.\n\n4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE\nSOFTWARE FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS\nAS A RESULT OF USING, MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY\nDERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n\n5. This License Agreement will automatically terminate upon a material\nbreach of its terms and conditions.\n\n6. This License Agreement shall be governed by and interpreted in all\nrespects by the law of the State of California, excluding conflict of\nlaw provisions.  Nothing in this License Agreement shall be deemed to\ncreate any relationship of agency, partnership, or joint venture\nbetween BeOpen and Licensee.  This License Agreement does not grant\npermission to use BeOpen trademarks or trade names in a trademark\nsense to endorse or promote products or services of Licensee, or any\nthird party.  As an exception, the \"BeOpen Python\" logos available at\nhttp://www.pythonlabs.com/logos.html may be used according to the\npermissions granted on that web page.\n\n7. By copying, installing or otherwise using the software, Licensee\nagrees to be bound by the terms and conditions of this License\nAgreement.\n\n\nCNRI LICENSE AGREEMENT FOR PYTHON 1.6.1\n---------------------------------------\n\n1. This LICENSE AGREEMENT is between the Corporation for National\nResearch Initiatives, having an office at 1895 Preston White Drive,\nReston, VA 20191 (\"CNRI\"), and the Individual or Organization\n(\"Licensee\") accessing and otherwise using Python 1.6.1 software in\nsource or binary form and its associated documentation.\n\n2. Subject to the terms and conditions of this License Agreement, CNRI\nhereby grants Licensee a nonexclusive, royalty-free, world-wide\nlicense to reproduce, analyze, test, perform and/or display publicly,\nprepare derivative works, distribute, and otherwise use Python 1.6.1\nalone or in any derivative version, provided, however, that CNRI's\nLicense Agreement and CNRI's notice of copyright, i.e., \"Copyright (c)\n1995-2001 Corporation for National Research Initiatives; All Rights\nReserved\" are retained in Python 1.6.1 alone or in any derivative\nversion prepared by Licensee.  Alternately, in lieu of CNRI's License\nAgreement, Licensee may substitute the following text (omitting the\nquotes): \"Python 1.6.1 is made available subject to the terms and\nconditions in CNRI's License Agreement.  This Agreement together with\nPython 1.6.1 may be located on the Internet using the following\nunique, persistent identifier (known as a handle): 1895.22/1013.  This\nAgreement may also be obtained from a proxy server on the Internet\nusing the following URL: http://hdl.handle.net/1895.22/1013\".\n\n3. In the event Licensee prepares a derivative work that is based on\nor incorporates Python 1.6.1 or any part thereof, and wants to make\nthe derivative work available to others as provided herein, then\nLicensee hereby agrees to include in any such work a brief summary of\nthe changes made to Python 1.6.1.\n\n4. CNRI is making Python 1.6.1 available to Licensee on an \"AS IS\"\nbasis.  CNRI MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR\nIMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, CNRI MAKES NO AND\nDISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS\nFOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 1.6.1 WILL NOT\nINFRINGE ANY THIRD PARTY RIGHTS.\n\n5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON\n1.6.1 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS\nA RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1,\nOR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n\n6. This License Agreement will automatically terminate upon a material\nbreach of its terms and conditions.\n\n7. This License Agreement shall be governed by the federal\nintellectual property law of the United States, including without\nlimitation the federal copyright law, and, to the extent such\nU.S. federal law does not apply, by the law of the Commonwealth of\nVirginia, excluding Virginia's conflict of law provisions.\nNotwithstanding the foregoing, with regard to derivative works based\non Python 1.6.1 that incorporate non-separable material that was\npreviously distributed under the GNU General Public License (GPL), the\nlaw of the Commonwealth of Virginia shall govern this License\nAgreement only as to issues arising under or with respect to\nParagraphs 4, 5, and 7 of this License Agreement.  Nothing in this\nLicense Agreement shall be deemed to create any relationship of\nagency, partnership, or joint venture between CNRI and Licensee.  This\nLicense Agreement does not grant permission to use CNRI trademarks or\ntrade name in a trademark sense to endorse or promote products or\nservices of Licensee, or any third party.\n\n8. By clicking on the \"ACCEPT\" button where indicated, or by copying,\ninstalling or otherwise using Python 1.6.1, Licensee agrees to be\nbound by the terms and conditions of this License Agreement.\n\n        ACCEPT\n\n\nCWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2\n--------------------------------------------------\n\nCopyright (c) 1991 - 1995, Stichting Mathematisch Centrum Amsterdam,\nThe Netherlands.  All rights reserved.\n\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted,\nprovided that the above copyright notice appear in all copies and that\nboth that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of Stichting Mathematisch\nCentrum or CWI not be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior\npermission.\n\nSTICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO\nTHIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE\nFOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT\nOF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 1.173828125,
          "content": "# some of the prunes here are so that check-manifest doesn't complain about their exclusion\n# as such, be judicious in your use of prune\n\n# stubs\nprune mypy/typeshed\ninclude mypy/typeshed/LICENSE\ninclude mypy/typeshed/stdlib/VERSIONS\nrecursive-include mypy/typeshed *.pyi\n\n# mypy and mypyc\ninclude mypy/py.typed\ninclude mypyc/py.typed\nrecursive-include mypy *.py\nrecursive-include mypyc *.py\n\n# random\ninclude mypy_bootstrap.ini\ngraft mypy/xml\ngraft scripts\n\n# docs\ngraft docs\nprune docs/build\nprune docs/source/_build\n\n# assorted mypyc requirements\ngraft mypyc/external\ngraft mypyc/lib-rt\ngraft mypyc/test\ngraft mypyc/test-data\ngraft mypyc/doc\nprune mypyc/doc/build\n\n# files necessary for testing sdist\ninclude mypy-requirements.txt\ninclude build-requirements.txt\ninclude test-requirements.in\ninclude test-requirements.txt\ninclude mypy_self_check.ini\nprune misc\ngraft test-data\ngraft mypy/test\ninclude conftest.py\ninclude runtests.py\ninclude pytest.ini\ninclude tox.ini\n\ninclude LICENSE mypyc/README.md CHANGELOG.md\nexclude .gitmodules CONTRIBUTING.md CREDITS ROADMAP.md action.yml .editorconfig\nexclude .git-blame-ignore-revs .pre-commit-config.yaml\n\nglobal-exclude *.py[cod]\nglobal-exclude .DS_Store\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.353515625,
          "content": "<img src=\"docs/source/mypy_light.svg\" alt=\"mypy logo\" width=\"300px\"/>\n\nMypy: Static Typing for Python\n=======================================\n\n[![Stable Version](https://img.shields.io/pypi/v/mypy?color=blue)](https://pypi.org/project/mypy/)\n[![Downloads](https://img.shields.io/pypi/dm/mypy)](https://pypistats.org/packages/mypy)\n[![Build Status](https://github.com/python/mypy/actions/workflows/test.yml/badge.svg)](https://github.com/python/mypy/actions)\n[![Documentation Status](https://readthedocs.org/projects/mypy/badge/?version=latest)](https://mypy.readthedocs.io/en/latest/?badge=latest)\n[![Chat at https://gitter.im/python/typing](https://badges.gitter.im/python/typing.svg)](https://gitter.im/python/typing?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Checked with mypy](https://www.mypy-lang.org/static/mypy_badge.svg)](https://mypy-lang.org/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Linting: Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)\n\nGot a question?\n---------------\n\nWe are always happy to answer questions! Here are some good places to ask them:\n\n- for general questions about Python typing, try [typing discussions](https://github.com/python/typing/discussions)\n- for anything you're curious about, try [gitter chat](https://gitter.im/python/typing)\n\nIf you're just getting started,\n[the documentation](https://mypy.readthedocs.io/en/stable/index.html)\nand [type hints cheat sheet](https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html)\ncan also help answer questions.\n\nIf you think you've found a bug:\n\n- check our [common issues page](https://mypy.readthedocs.io/en/stable/common_issues.html)\n- search our [issue tracker](https://github.com/python/mypy/issues) to see if\n  it's already been reported\n\nTo report a bug or request an enhancement:\n\n- report at [our issue tracker](https://github.com/python/mypy/issues)\n- if the issue is with a specific library or function, consider reporting it at\n  [typeshed tracker](https://github.com/python/typeshed/issues) or the issue\n  tracker for that library\n\nTo discuss a new type system feature:\n\n- discuss at [discuss.python.org](https://discuss.python.org/c/typing/32)\n- there is also some historical discussion at the [typing-sig mailing list](https://mail.python.org/archives/list/typing-sig@python.org/) and the [python/typing repo](https://github.com/python/typing/issues)\n\nWhat is mypy?\n-------------\n\nMypy is a static type checker for Python.\n\nType checkers help ensure that you're using variables and functions in your code\ncorrectly. With mypy, add type hints ([PEP 484](https://www.python.org/dev/peps/pep-0484/))\nto your Python programs, and mypy will warn you when you use those types\nincorrectly.\n\nPython is a dynamic language, so usually you'll only see errors in your code\nwhen you attempt to run it. Mypy is a *static* checker, so it finds bugs\nin your programs without even running them!\n\nHere is a small example to whet your appetite:\n\n```python\nnumber = input(\"What is your favourite number?\")\nprint(\"It is\", number + 1)  # error: Unsupported operand types for + (\"str\" and \"int\")\n```\n\nAdding type hints for mypy does not interfere with the way your program would\notherwise run. Think of type hints as similar to comments! You can always use\nthe Python interpreter to run your code, even if mypy reports errors.\n\nMypy is designed with gradual typing in mind. This means you can add type\nhints to your code base slowly and that you can always fall back to dynamic\ntyping when static typing is not convenient.\n\nMypy has a powerful and easy-to-use type system, supporting features such as\ntype inference, generics, callable types, tuple types, union types,\nstructural subtyping and more. Using mypy will make your programs easier to\nunderstand, debug, and maintain.\n\nSee [the documentation](https://mypy.readthedocs.io/en/stable/index.html) for\nmore examples and information.\n\nIn particular, see:\n\n- [type hints cheat sheet](https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html)\n- [getting started](https://mypy.readthedocs.io/en/stable/getting_started.html)\n- [list of error codes](https://mypy.readthedocs.io/en/stable/error_code_list.html)\n\nQuick start\n-----------\n\nMypy can be installed using pip:\n\n```bash\npython3 -m pip install -U mypy\n```\n\nIf you want to run the latest version of the code, you can install from the\nrepo directly:\n\n```bash\npython3 -m pip install -U git+https://github.com/python/mypy.git\n```\n\nNow you can type-check the [statically typed parts] of a program like this:\n\n```bash\nmypy PROGRAM\n```\n\nYou can always use the Python interpreter to run your statically typed\nprograms, even if mypy reports type errors:\n\n```bash\npython3 PROGRAM\n```\n\nIf you are working with large code bases, you can run mypy in\n[daemon mode], that will give much faster (often sub-second) incremental updates:\n\n```bash\ndmypy run -- PROGRAM\n```\n\nYou can also try mypy in an [online playground](https://mypy-play.net/) (developed by\nYusuke Miyazaki).\n\n[statically typed parts]: https://mypy.readthedocs.io/en/latest/getting_started.html#function-signatures-and-dynamic-vs-static-typing\n[daemon mode]: https://mypy.readthedocs.io/en/stable/mypy_daemon.html\n\nIntegrations\n------------\n\nMypy can be integrated into popular IDEs:\n\n- VS Code: provides [basic integration](https://code.visualstudio.com/docs/python/linting#_mypy) with mypy.\n- Vim:\n  - Using [Syntastic](https://github.com/vim-syntastic/syntastic): in `~/.vimrc` add\n    `let g:syntastic_python_checkers=['mypy']`\n  - Using [ALE](https://github.com/dense-analysis/ale): should be enabled by default when `mypy` is installed,\n    or can be explicitly enabled by adding `let b:ale_linters = ['mypy']` in `~/vim/ftplugin/python.vim`\n- Emacs: using [Flycheck](https://github.com/flycheck/)\n- Sublime Text: [SublimeLinter-contrib-mypy](https://github.com/fredcallaway/SublimeLinter-contrib-mypy)\n- PyCharm: [mypy plugin](https://github.com/dropbox/mypy-PyCharm-plugin)\n- pre-commit: use [pre-commit mirrors-mypy](https://github.com/pre-commit/mirrors-mypy), although\n  note by default this will limit mypy's ability to analyse your third party dependencies.\n\nWeb site and documentation\n--------------------------\n\nAdditional information is available at the web site:\n\n  <https://www.mypy-lang.org/>\n\nJump straight to the documentation:\n\n  <https://mypy.readthedocs.io/>\n\nFollow along our changelog at:\n\n  <https://mypy-lang.blogspot.com/>\n\nContributing\n------------\n\nHelp in testing, development, documentation and other tasks is\nhighly appreciated and useful to the project. There are tasks for\ncontributors of all experience levels.\n\nTo get started with developing mypy, see [CONTRIBUTING.md](CONTRIBUTING.md).\n\nMypyc and compiled version of mypy\n----------------------------------\n\n[Mypyc](https://github.com/mypyc/mypyc) uses Python type hints to compile Python\nmodules to faster C extensions. Mypy is itself compiled using mypyc: this makes\nmypy approximately 4 times faster than if interpreted!\n\nTo install an interpreted mypy instead, use:\n\n```bash\npython3 -m pip install --no-binary mypy -U mypy\n```\n\nTo use a compiled version of a development\nversion of mypy, directly install a binary from\n<https://github.com/mypyc/mypy_mypyc-wheels/releases/latest>.\n\nTo contribute to the mypyc project, check out the issue tracker at <https://github.com/mypyc/mypyc>\n"
        },
        {
          "name": "action.yml",
          "type": "blob",
          "size": 2.548828125,
          "content": "name: \"Mypy\"\ndescription: \"Optional Static Typing for Python.\"\nauthor: \"Jukka Lehtosalo and contributors\"\ninputs:\n  options:\n    description: >\n      Options passed to mypy. Use `mypy --help` to see available options.\n    required: false\n  paths:\n    description: >\n      Explicit paths to run mypy on. Defaults to the current directory.\n    required: false\n    default: \".\"\n  version:\n    description: >\n      Mypy version to use (PEP440) - e.g. \"0.910\"\n    required: false\n    default: \"\"\n  install_types:\n    description: >\n      Whether to automatically install missing library stub packages.\n      ('yes'|'no', default: 'yes')\n    default: \"yes\"\n  install_project_dependencies:\n    description: >\n      Whether to attempt to install project dependencies into mypy\n      environment. ('yes'|'no', default: 'yes')\n    default: \"yes\"\nbranding:\n  color: \"blue\"\n  icon: \"check-circle\"\nruns:\n  using: composite\n  steps:\n    - name: mypy setup\n      shell: bash\n      run: |\n        echo ::group::Installing mypy...\n        export PIP_DISABLE_PIP_VERSION_CHECK=1\n\n        if [ \"$RUNNER_OS\" == \"Windows\" ]; then\n          HOST_PYTHON=python\n        else\n          HOST_PYTHON=python3\n        fi\n\n        venv_script=\"import os.path; import venv; import sys;\n        path = os.path.join(r'${{ github.action_path }}', '.mypy-venv');\n        venv.main([path]);\n        bin_subdir = 'Scripts' if sys.platform == 'win32' else 'bin';\n        print(os.path.join(path, bin_subdir, 'python'));\n        \"\n\n        VENV_PYTHON=$(echo $venv_script | \"$HOST_PYTHON\")\n        mypy_spec=\"mypy\"\n\n        if [ -n \"${{ inputs.version }}\" ]; then\n          mypy_spec+=\"==${{ inputs.version }}\"\n        fi\n\n        if ! \"$VENV_PYTHON\" -m pip install \"$mypy_spec\"; then\n          echo \"::error::Could not install mypy.\"\n          exit 1\n        fi\n        echo ::endgroup::\n\n        if [ \"${{ inputs.install_project_dependencies }}\" == \"yes\" ]; then\n          VENV=$(\"$VENV_PYTHON\" -c 'import sys;print(sys.prefix)')\n          echo ::group::Installing project dependencies...\n          \"$VENV_PYTHON\" -m pip download --dest=\"$VENV\"/deps .\n          \"$VENV_PYTHON\" -m pip install -U --find-links=\"$VENV\"/deps \"$VENV\"/deps/*\n          echo ::endgroup::\n        fi\n\n        echo ::group::Running mypy...\n        mypy_opts=\"\"\n        if [ \"${{ inputs.install_types }}\" == \"yes\" ]; then\n          mypy_opts+=\"--install-types --non-interactive\"\n        fi\n\n        echo \"mypy $mypy_opts ${{ inputs.options }} ${{ inputs.paths }}\"\n        \"$VENV_PYTHON\" -m mypy $mypy_opts ${{ inputs.options }} ${{ inputs.paths }}\n        echo ::endgroup::\n"
        },
        {
          "name": "build-requirements.txt",
          "type": "blob",
          "size": 0.1328125,
          "content": "# NOTE: this needs to be kept in sync with the \"requires\" list in pyproject.toml\n-r mypy-requirements.txt\ntypes-psutil\ntypes-setuptools\n"
        },
        {
          "name": "conftest.py",
          "type": "blob",
          "size": 0.5712890625,
          "content": "from __future__ import annotations\n\nimport os.path\n\npytest_plugins = [\"mypy.test.data\"]\n\n\ndef pytest_configure(config):\n    mypy_source_root = os.path.dirname(os.path.abspath(__file__))\n    if os.getcwd() != mypy_source_root:\n        os.chdir(mypy_source_root)\n\n\n# This function name is special to pytest.  See\n# https://doc.pytest.org/en/latest/how-to/writing_plugins.html#initialization-command-line-and-configuration-hooks\ndef pytest_addoption(parser) -> None:\n    parser.addoption(\n        \"--bench\", action=\"store_true\", default=False, help=\"Enable the benchmark test runs\"\n    )\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "mypy-requirements.txt",
          "type": "blob",
          "size": 0.1875,
          "content": "# NOTE: this needs to be kept in sync with the \"requires\" list in pyproject.toml\n# and the pins in setup.py\ntyping_extensions>=4.6.0\nmypy_extensions>=1.0.0\ntomli>=1.1.0; python_version<'3.11'\n"
        },
        {
          "name": "mypy",
          "type": "tree",
          "content": null
        },
        {
          "name": "mypy_bootstrap.ini",
          "type": "blob",
          "size": 0.1875,
          "content": "[mypy]\nstrict = True\nwarn_unused_ignores = False\nshow_traceback = True\nalways_true = MYPYC\n\n[mypy-mypy.visitor]\n# See docstring for NodeVisitor for motivation.\ndisable_error_code = empty-body\n"
        },
        {
          "name": "mypy_self_check.ini",
          "type": "blob",
          "size": 0.470703125,
          "content": "[mypy]\n\nstrict = True\nlocal_partial_types = True\ndisallow_any_unimported = True\nshow_traceback = True\npretty = True\nalways_false = MYPYC\nplugins = mypy.plugins.proper_plugin\npython_version = 3.9\nexclude = mypy/typeshed/|mypyc/test-data/|mypyc/lib-rt/\nenable_error_code = ignore-without-code,redundant-expr\nenable_incomplete_feature = PreciseTupleTypes\nshow_error_code_links = True\n\n[mypy-mypy.visitor]\n# See docstring for NodeVisitor for motivation.\ndisable_error_code = empty-body\n"
        },
        {
          "name": "mypyc",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 7.1337890625,
          "content": "[build-system]\nrequires = [\n    # NOTE: this needs to be kept in sync with mypy-requirements.txt\n    # and build-requirements.txt, because those are both needed for\n    # self-typechecking :/\n    \"setuptools >= 75.1.0\",\n    # the following is from mypy-requirements.txt/setup.py\n    \"typing_extensions>=4.6.0\",\n    \"mypy_extensions>=1.0.0\",\n    \"tomli>=1.1.0; python_version<'3.11'\",\n    # the following is from build-requirements.txt\n    \"types-psutil\",\n    \"types-setuptools\",\n]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"mypy\"\ndescription = \"Optional static typing for Python\"\nreadme = {text = \"\"\"\nMypy -- Optional Static Typing for Python\n=========================================\n\nAdd type annotations to your Python programs, and use mypy to type\ncheck them.  Mypy is essentially a Python linter on steroids, and it\ncan catch many programming errors by analyzing your program, without\nactually having to run it.  Mypy has a powerful type system with\nfeatures such as type inference, gradual typing, generics and union\ntypes.\n\"\"\", content-type = \"text/x-rst\"}\nauthors = [{name = \"Jukka Lehtosalo\", email = \"jukka.lehtosalo@iki.fi\"}]\nlicense = {text = \"MIT\"}\nclassifiers = [\n  \"Development Status :: 5 - Production/Stable\",\n  \"Environment :: Console\",\n  \"Intended Audience :: Developers\",\n  \"License :: OSI Approved :: MIT License\",\n  \"Programming Language :: Python :: 3\",\n  \"Programming Language :: Python :: 3.9\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n  \"Programming Language :: Python :: 3.12\",\n  \"Programming Language :: Python :: 3.13\",\n  \"Topic :: Software Development\",\n  \"Typing :: Typed\",\n]\nrequires-python = \">=3.9\"\ndependencies = [\n  # When changing this, also update build-system.requires and mypy-requirements.txt\n  \"typing_extensions>=4.6.0\",\n  \"mypy_extensions>=1.0.0\",\n  \"tomli>=1.1.0; python_version<'3.11'\",\n]\ndynamic = [\"version\"]\n\n[project.optional-dependencies]\ndmypy = [\"psutil>=4.0\"]\nmypyc = [\"setuptools>=50\"]\npython2 = []\nreports = [\"lxml\"]\ninstall-types = [\"pip\"]\nfaster-cache = [\"orjson\"]\n\n[project.urls]\nHomepage = \"https://www.mypy-lang.org/\"\nDocumentation = \"https://mypy.readthedocs.io/en/stable/index.html\"\nRepository = \"https://github.com/python/mypy\"\nChangelog = \"https://github.com/python/mypy/blob/master/CHANGELOG.md\"\nIssues = \"https://github.com/python/mypy/issues\"\n\n[project.scripts]\nmypy = \"mypy.__main__:console_entry\"\nstubgen = \"mypy.stubgen:main\"\nstubtest = \"mypy.stubtest:main\"\ndmypy = \"mypy.dmypy.client:console_entry\"\nmypyc = \"mypyc.__main__:main\"\n\n[tool.setuptools.packages.find]\ninclude = [\"mypy*\", \"mypyc*\", \"*__mypyc*\"]\nexclude = [\"mypyc.test-data*\"]\nnamespaces = false\n\n[tool.setuptools.package-data]\nmypy = [\n  \"py.typed\",\n  \"typeshed/**/*.py\",\n  \"typeshed/**/*.pyi\",\n  \"typeshed/stdlib/VERSIONS\",\n  \"xml/*.xsd\",\n  \"xml/*.xslt\",\n  \"xml/*.css\",\n]\n[tool.setuptools.exclude-package-data]\nmypyc = [\n  \"README.md\",\n  \"doc/**\",\n  \"external/**\",\n  \"lib-rt/test_capi.cc\",\n  \"lib-rt/setup.py\",\n  \"test-data/**\",\n]\n\n[tool.black]\nline-length = 99\ntarget-version = [\"py39\", \"py310\", \"py311\", \"py312\", \"py313\"]\nskip-magic-trailing-comma = true\nforce-exclude = '''\n^/mypy/typeshed|\n^/mypyc/test-data|\n^/test-data\n'''\n\n[tool.ruff]\nline-length = 99\ntarget-version = \"py39\"\nfix = true\n\nextend-exclude = [\n  \"@*\",\n  # Sphinx configuration is irrelevant\n  \"docs/source/conf.py\",\n  \"mypyc/doc/conf.py\",\n  # tests have more relaxed styling requirements\n  # fixtures have their own .pyi-specific configuration\n  \"test-data/*\",\n  \"mypyc/test-data/*\",\n  # typeshed has its own .pyi-specific configuration\n  \"mypy/typeshed/*\",\n]\n\n[tool.ruff.lint]\nselect = [\n  \"E\",       # pycodestyle (error)\n  \"F\",       # pyflakes\n  \"W\",       # pycodestyle (warning)\n  \"B\",       # flake8-bugbear\n  \"I\",       # isort\n  \"N\",       # pep8-naming\n  \"PIE\",     # flake8-pie\n  \"PLE\",     # pylint error\n  \"RUF100\",  # Unused noqa comments\n  \"PGH004\",  # blanket noqa comments\n  \"UP\",      # pyupgrade\n  \"C4\",      # flake8-comprehensions\n  \"SIM201\", \"SIM202\", \"SIM222\", \"SIM223\",  # flake8-simplify\n  \"ISC001\",  # implicitly concatenated string\n  \"RET501\", \"RET502\",  # better return None handling\n]\n\nignore = [\n  \"B007\",  # Loop control variable not used within the loop body.\n  \"B011\",  # Don't use assert False\n  \"B023\",  # Function definition does not bind loop variable\n  \"E2\",    # conflicts with black\n  \"E402\",  # module level import not at top of file\n  \"E501\",  # conflicts with black\n  \"E721\",  # Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks\n  \"E731\",  # Do not assign a `lambda` expression, use a `def`\n  \"E741\",  # Ambiguous variable name\n  \"N818\",  # Exception should be named with an Error suffix\n  \"N806\",  # UPPER_CASE used for constant local variables\n  \"UP031\", # Use format specifiers instead of percent format\n  \"UP032\", # 'f-string always preferable to format' is controversial\n  \"C409\",  # https://github.com/astral-sh/ruff/issues/12912\n  \"C420\",  # reads a little worse. fromkeys predates dict comprehensions\n  \"C416\",  # There are a few cases where it's nice to have names for the dict items\n  \"PIE790\", # there's nothing wrong with pass\n]\n\nunfixable = [\n    \"F841\",  # unused variable. ruff keeps the call, but mostly we want to get rid of it all\n    \"F601\",  # automatic fix might obscure issue\n    \"F602\",  # automatic fix might obscure issue\n    \"B018\",  # automatic fix might obscure issue\n    \"UP036\", # sometimes it's better to just noqa this\n    \"SIM222\", # automatic fix might obscure issue\n    \"SIM223\", # automatic fix might obscure issue\n]\n\n[tool.ruff.lint.per-file-ignores]\n# Mixed case variable and function names.\n\"mypy/fastparse.py\" = [\"N802\", \"N816\"]\n\n[tool.ruff.lint.isort]\ncombine-as-imports = true\nextra-standard-library = [\"typing_extensions\"]\n\n[tool.check-manifest]\nignore = [\"**/.readthedocs.yaml\"]\n\n[tool.pytest.ini_options]\nminversion = \"7.0.0\"\ntestpaths = [\"mypy/test\", \"mypyc/test\"]\npython_files = 'test*.py'\n\n# Where do the test cases come from?  We provide our own collection\n# logic by implementing `pytest_pycollect_makeitem` in mypy.test.data;\n# the test files import that module, and pytest sees the magic name\n# and invokes it at the relevant moment.  See\n# https://doc.pytest.org/en/latest/how-to/writing_plugins.html#collection-hooks\n\n# Both our plugin and unittest provide their own collection logic,\n# So we can disable the default python collector by giving it empty\n# patterns to search for.\n# Note that unittest requires that no \"Test*\" classes exist.\npython_classes = []\npython_functions = []\n\n# always run in parallel (requires pytest-xdist, see test-requirements.txt)\n# and enable strict mode: require all markers\n# to be defined and raise on invalid config values\naddopts = \"-nauto --strict-markers --strict-config\"\n\n# treat xpasses as test failures so they get converted to regular tests as soon as possible\nxfail_strict = true\n\n[tool.coverage.run]\nbranch = true\nsource = [\"mypy\"]\nparallel = true\n\n[tool.coverage.report]\nshow_missing = true\nskip_covered = true\nomit = ['mypy/test/*']\nexclude_lines = [\n  '\\#\\s*pragma: no cover',\n  '^\\s*raise AssertionError\\b',\n  '^\\s*raise NotImplementedError\\b',\n  '^\\s*return NotImplemented\\b',\n  '^\\s*raise$',\n  '^assert False\\b',\n  '''^if __name__ == ['\"]__main__['\"]:$''',\n]\n"
        },
        {
          "name": "runtests.py",
          "type": "blob",
          "size": 4.5751953125,
          "content": "#!/usr/bin/env python3\n\nfrom __future__ import annotations\n\nimport subprocess\nfrom subprocess import Popen\nfrom sys import argv, executable, exit\n\n# Slow test suites\nCMDLINE = \"PythonCmdline\"\nPEP561 = \"PEP561Suite\"\nEVALUATION = \"PythonEvaluation\"\nDAEMON = \"testdaemon\"\nSTUBGEN_CMD = \"StubgenCmdLine\"\nSTUBGEN_PY = \"StubgenPythonSuite\"\nMYPYC_RUN = \"TestRun\"\nMYPYC_RUN_MULTI = \"TestRunMultiFile\"\nMYPYC_EXTERNAL = \"TestExternal\"\nMYPYC_COMMAND_LINE = \"TestCommandLine\"\nMYPYC_SEPARATE = \"TestRunSeparate\"\nMYPYC_MULTIMODULE = \"multimodule\"  # Subset of mypyc run tests that are slow\nERROR_STREAM = \"ErrorStreamSuite\"\n\n\nALL_NON_FAST = [\n    CMDLINE,\n    PEP561,\n    EVALUATION,\n    DAEMON,\n    STUBGEN_CMD,\n    STUBGEN_PY,\n    MYPYC_RUN,\n    MYPYC_RUN_MULTI,\n    MYPYC_EXTERNAL,\n    MYPYC_COMMAND_LINE,\n    MYPYC_SEPARATE,\n    ERROR_STREAM,\n]\n\n\n# This must be enabled by explicitly including 'pytest-extra' on the command line\nPYTEST_OPT_IN = [PEP561]\n\n\n# These must be enabled by explicitly including 'mypyc-extra' on the command line.\nMYPYC_OPT_IN = [MYPYC_RUN, MYPYC_RUN_MULTI, MYPYC_SEPARATE]\n\n# These mypyc test filters cover most slow test cases\nMYPYC_SLOW = [MYPYC_RUN_MULTI, MYPYC_COMMAND_LINE, MYPYC_SEPARATE, MYPYC_MULTIMODULE]\n\n\n# We split the pytest run into three parts to improve test\n# parallelization. Each run should have tests that each take a roughly similar\n# time to run.\ncmds = {\n    # Self type check\n    \"self\": [\n        executable,\n        \"-m\",\n        \"mypy\",\n        \"--config-file\",\n        \"mypy_self_check.ini\",\n        \"-p\",\n        \"mypy\",\n        \"-p\",\n        \"mypyc\",\n    ],\n    # Lint\n    \"lint\": [\"pre-commit\", \"run\", \"--all-files\"],\n    # Fast test cases only (this is the bulk of the test suite)\n    \"pytest-fast\": [\"pytest\", \"-q\", \"-k\", f\"not ({' or '.join(ALL_NON_FAST)})\"],\n    # Test cases that invoke mypy (with small inputs)\n    \"pytest-cmdline\": [\n        \"pytest\",\n        \"-q\",\n        \"-k\",\n        \" or \".join([CMDLINE, EVALUATION, STUBGEN_CMD, STUBGEN_PY]),\n    ],\n    # Test cases that may take seconds to run each\n    \"pytest-slow\": [\n        \"pytest\",\n        \"-q\",\n        \"-k\",\n        \" or \".join([DAEMON, MYPYC_EXTERNAL, MYPYC_COMMAND_LINE, ERROR_STREAM]),\n    ],\n    \"mypyc-fast\": [\"pytest\", \"-q\", \"mypyc\", \"-k\", f\"not ({' or '.join(MYPYC_SLOW)})\"],\n    # Test cases that might take minutes to run\n    \"pytest-extra\": [\"pytest\", \"-q\", \"-k\", \" or \".join(PYTEST_OPT_IN)],\n    # Mypyc tests that aren't run by default, since they are slow and rarely\n    # fail for commits that don't touch mypyc\n    \"mypyc-extra\": [\"pytest\", \"-q\", \"-k\", \" or \".join(MYPYC_OPT_IN)],\n}\n\n# Stop run immediately if these commands fail\nFAST_FAIL = [\"self\", \"lint\"]\n\nEXTRA_COMMANDS = (\"pytest-extra\", \"mypyc-fast\", \"mypyc-extra\")\nDEFAULT_COMMANDS = [cmd for cmd in cmds if cmd not in EXTRA_COMMANDS]\n\nassert all(cmd in cmds for cmd in FAST_FAIL)\n\n\ndef run_cmd(name: str) -> int:\n    status = 0\n    cmd = cmds[name]\n    print(f\"run {name}: {cmd}\")\n    proc = subprocess.run(cmd, stderr=subprocess.STDOUT)\n    if proc.returncode:\n        print(\"\\nFAILED: %s\" % name)\n        status = proc.returncode\n        if name in FAST_FAIL:\n            exit(status)\n    return status\n\n\ndef start_background_cmd(name: str) -> Popen:\n    cmd = cmds[name]\n    proc = subprocess.Popen(cmd, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n    return proc\n\n\ndef wait_background_cmd(name: str, proc: Popen) -> int:\n    output = proc.communicate()[0]\n    status = proc.returncode\n    print(f\"run {name}: {cmds[name]}\")\n    if status:\n        print(output.decode().rstrip())\n        print(\"\\nFAILED:\", name)\n        if name in FAST_FAIL:\n            exit(status)\n    return status\n\n\ndef main() -> None:\n    prog, *args = argv\n\n    if not set(args).issubset(cmds):\n        print(\"usage:\", prog, \" \".join(f\"[{k}]\" for k in cmds))\n        print()\n        print(\n            \"Run the given tests. If given no arguments, run everything except\"\n            + \" pytest-extra and mypyc-extra.\"\n        )\n        exit(1)\n\n    if not args:\n        args = DEFAULT_COMMANDS.copy()\n\n    status = 0\n\n    if \"self\" in args and \"lint\" in args:\n        # Perform lint and self check in parallel as it's faster.\n        proc = start_background_cmd(\"lint\")\n        cmd_status = run_cmd(\"self\")\n        if cmd_status:\n            status = cmd_status\n        cmd_status = wait_background_cmd(\"lint\", proc)\n        if cmd_status:\n            status = cmd_status\n        args = [arg for arg in args if arg not in (\"self\", \"lint\")]\n\n    for arg in args:\n        cmd_status = run_cmd(arg)\n        if cmd_status:\n            status = cmd_status\n\n    exit(status)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 5.439453125,
          "content": "#!/usr/bin/env python\n\nfrom __future__ import annotations\n\nimport glob\nimport os\nimport os.path\nimport sys\nfrom typing import TYPE_CHECKING, Any\n\nif sys.version_info < (3, 9, 0):  # noqa: UP036, RUF100\n    sys.stderr.write(\"ERROR: You need Python 3.9 or later to use mypy.\\n\")\n    exit(1)\n\n# we'll import stuff from the source tree, let's ensure is on the sys path\nsys.path.insert(0, os.path.dirname(os.path.realpath(__file__)))\n\n# This requires setuptools when building; setuptools is not needed\n# when installing from a wheel file (though it is still needed for\n# alternative forms of installing, as suggested by README.md).\nfrom setuptools import Extension, setup\nfrom setuptools.command.build_py import build_py\n\nfrom mypy.version import __version__ as version\n\nif TYPE_CHECKING:\n    from typing_extensions import TypeGuard\n\n\ndef is_list_of_setuptools_extension(items: list[Any]) -> TypeGuard[list[Extension]]:\n    return all(isinstance(item, Extension) for item in items)\n\n\ndef find_package_data(base, globs, root=\"mypy\"):\n    \"\"\"Find all interesting data files, for setup(package_data=)\n\n    Arguments:\n      root:  The directory to search in.\n      globs: A list of glob patterns to accept files.\n    \"\"\"\n\n    rv_dirs = [root for root, dirs, files in os.walk(base)]\n    rv = []\n    for rv_dir in rv_dirs:\n        files = []\n        for pat in globs:\n            files += glob.glob(os.path.join(rv_dir, pat))\n        if not files:\n            continue\n        rv.extend([os.path.relpath(f, root) for f in files])\n    return rv\n\n\nclass CustomPythonBuild(build_py):\n    def pin_version(self):\n        path = os.path.join(self.build_lib, \"mypy\")\n        self.mkpath(path)\n        with open(os.path.join(path, \"version.py\"), \"w\") as stream:\n            stream.write(f'__version__ = \"{version}\"\\n')\n\n    def run(self):\n        self.execute(self.pin_version, ())\n        build_py.run(self)\n\n\ncmdclass = {\"build_py\": CustomPythonBuild}\n\nUSE_MYPYC = False\n# To compile with mypyc, a mypyc checkout must be present on the PYTHONPATH\nif len(sys.argv) > 1 and \"--use-mypyc\" in sys.argv:\n    sys.argv.remove(\"--use-mypyc\")\n    USE_MYPYC = True\nif os.getenv(\"MYPY_USE_MYPYC\", None) == \"1\":\n    USE_MYPYC = True\n\nif USE_MYPYC:\n    MYPYC_BLACKLIST = tuple(\n        os.path.join(\"mypy\", x)\n        for x in (\n            # Need to be runnable as scripts\n            \"__main__.py\",\n            \"pyinfo.py\",\n            os.path.join(\"dmypy\", \"__main__.py\"),\n            # Uses __getattr__/__setattr__\n            \"split_namespace.py\",\n            # Lies to mypy about code reachability\n            \"bogus_type.py\",\n            # We don't populate __file__ properly at the top level or something?\n            # Also I think there would be problems with how we generate version.py.\n            \"version.py\",\n            # Skip these to reduce the size of the build\n            \"stubtest.py\",\n            \"stubgenc.py\",\n            \"stubdoc.py\",\n        )\n    ) + (\n        # Don't want to grab this accidentally\n        os.path.join(\"mypyc\", \"lib-rt\", \"setup.py\"),\n        # Uses __file__ at top level https://github.com/mypyc/mypyc/issues/700\n        os.path.join(\"mypyc\", \"__main__.py\"),\n    )\n\n    everything = [os.path.join(\"mypy\", x) for x in find_package_data(\"mypy\", [\"*.py\"])] + [\n        os.path.join(\"mypyc\", x) for x in find_package_data(\"mypyc\", [\"*.py\"], root=\"mypyc\")\n    ]\n    # Start with all the .py files\n    all_real_pys = [\n        x for x in everything if not x.startswith(os.path.join(\"mypy\", \"typeshed\") + os.sep)\n    ]\n    # Strip out anything in our blacklist\n    mypyc_targets = [x for x in all_real_pys if x not in MYPYC_BLACKLIST]\n    # Strip out any test code\n    mypyc_targets = [\n        x\n        for x in mypyc_targets\n        if not x.startswith(\n            (\n                os.path.join(\"mypy\", \"test\") + os.sep,\n                os.path.join(\"mypyc\", \"test\") + os.sep,\n                os.path.join(\"mypyc\", \"doc\") + os.sep,\n                os.path.join(\"mypyc\", \"test-data\") + os.sep,\n            )\n        )\n    ]\n    # ... and add back in the one test module we need\n    mypyc_targets.append(os.path.join(\"mypy\", \"test\", \"visitors.py\"))\n\n    # The targets come out of file system apis in an unspecified\n    # order. Sort them so that the mypyc output is deterministic.\n    mypyc_targets.sort()\n\n    use_other_mypyc = os.getenv(\"ALTERNATE_MYPYC_PATH\", None)\n    if use_other_mypyc:\n        # This bit is super unfortunate: we want to use a different\n        # mypy/mypyc version, but we've already imported parts, so we\n        # remove the modules that we've imported already, which will\n        # let the right versions be imported by mypyc.\n        del sys.modules[\"mypy\"]\n        del sys.modules[\"mypy.version\"]\n        del sys.modules[\"mypy.git\"]\n        sys.path.insert(0, use_other_mypyc)\n\n    from mypyc.build import mypycify\n\n    opt_level = os.getenv(\"MYPYC_OPT_LEVEL\", \"3\")\n    debug_level = os.getenv(\"MYPYC_DEBUG_LEVEL\", \"1\")\n    force_multifile = os.getenv(\"MYPYC_MULTI_FILE\", \"\") == \"1\"\n    ext_modules = mypycify(\n        mypyc_targets + [\"--config-file=mypy_bootstrap.ini\"],\n        opt_level=opt_level,\n        debug_level=debug_level,\n        # Use multi-file compilation mode on windows because without it\n        # our Appveyor builds run out of memory sometimes.\n        multi_file=sys.platform == \"win32\" or force_multifile,\n    )\n    assert is_list_of_setuptools_extension(ext_modules), \"Expected mypycify to use setuptools\"\n\nelse:\n    ext_modules = []\n\n\nsetup(version=version, ext_modules=ext_modules, cmdclass=cmdclass)\n"
        },
        {
          "name": "test-data",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-requirements.in",
          "type": "blob",
          "size": 0.62890625,
          "content": "# If you change this file (or mypy-requirements.txt or build-requirements.txt), please run:\n# pip-compile --output-file=test-requirements.txt --strip-extras --allow-unsafe test-requirements.in\n\n-r mypy-requirements.txt\n-r build-requirements.txt\nattrs>=18.0\nfilelock>=3.3.0\n# lxml 4.9.3 switched to manylinux_2_28, the wheel builder still uses manylinux2014\nlxml>=4.9.1,<4.9.3; (python_version<'3.11' or sys_platform!='win32') and python_version<'3.12'\npsutil>=4.0\npytest>=8.1.0\npytest-xdist>=1.34.0\npytest-cov>=2.10.0\nsetuptools>=75.1.0\ntomli>=1.1.0  # needed even on py311+ so the self check passes with --python-version 3.9\npre_commit>=3.5.0\n"
        },
        {
          "name": "test-requirements.txt",
          "type": "blob",
          "size": 1.58203125,
          "content": "#\n# This file is autogenerated by pip-compile with Python 3.11\n# by the following command:\n#\n#    pip-compile --allow-unsafe --output-file=test-requirements.txt --strip-extras test-requirements.in\n#\nattrs==24.2.0\n    # via -r test-requirements.in\ncfgv==3.4.0\n    # via pre-commit\ncoverage==7.6.1\n    # via pytest-cov\ndistlib==0.3.9\n    # via virtualenv\nexecnet==2.1.1\n    # via pytest-xdist\nfilelock==3.16.1\n    # via\n    #   -r test-requirements.in\n    #   virtualenv\nidentify==2.6.1\n    # via pre-commit\niniconfig==2.0.0\n    # via pytest\nlxml==4.9.2 ; (python_version < \"3.11\" or sys_platform != \"win32\") and python_version < \"3.12\"\n    # via -r test-requirements.in\nmypy-extensions==1.0.0\n    # via -r mypy-requirements.txt\nnodeenv==1.9.1\n    # via pre-commit\npackaging==24.1\n    # via pytest\nplatformdirs==4.3.6\n    # via virtualenv\npluggy==1.5.0\n    # via pytest\npre-commit==3.5.0\n    # via -r test-requirements.in\npsutil==6.0.0\n    # via -r test-requirements.in\npytest==8.3.3\n    # via\n    #   -r test-requirements.in\n    #   pytest-cov\n    #   pytest-xdist\npytest-cov==5.0.0\n    # via -r test-requirements.in\npytest-xdist==3.6.1\n    # via -r test-requirements.in\npyyaml==6.0.2\n    # via pre-commit\ntomli==2.0.2\n    # via -r test-requirements.in\ntypes-psutil==6.0.0.20241011\n    # via -r build-requirements.txt\ntypes-setuptools==75.1.0.20241014\n    # via -r build-requirements.txt\ntyping-extensions==4.12.2\n    # via -r mypy-requirements.txt\nvirtualenv==20.26.6\n    # via pre-commit\n\n# The following packages are considered to be unsafe in a requirements file:\nsetuptools==75.1.0\n    # via -r test-requirements.in\n"
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.71875,
          "content": "[tox]\nminversion = 4.4.4\nskip_missing_interpreters = {env:TOX_SKIP_MISSING_INTERPRETERS:True}\nenvlist =\n    py38,\n    py39,\n    py310,\n    py311,\n    py312,\n    py313,\n    docs,\n    lint,\n    type,\nisolated_build = true\n\n[testenv]\ndescription = run the test driver with {basepython}\npassenv =\n    PYTEST_XDIST_WORKER_COUNT\n    PROGRAMDATA\n    PROGRAMFILES(X86)\n    PYTEST_ADDOPTS\ndeps =\n    -r test-requirements.txt\n    # This is a bit of a hack, but ensures the faster-cache path is tested in CI\n    orjson;python_version=='3.12'\ncommands = python -m pytest {posargs}\n\n[testenv:dev]\ndescription = generate a DEV environment, that has all project libraries\nusedevelop = True\ndeps =\n    -r test-requirements.txt\n    -r docs/requirements-docs.txt\ncommands =\n    python -m pip list --format=columns\n    python -c 'import sys; print(sys.executable)'\n    {posargs}\n\n[testenv:docs]\ndescription = invoke sphinx-build to build the HTML docs\npassenv =\n    VERIFY_MYPY_ERROR_CODES\ndeps = -r docs/requirements-docs.txt\ncommands =\n    sphinx-build -n -d \"{toxworkdir}/docs_doctree\" docs/source \"{toxworkdir}/docs_out\" --color -W -bhtml {posargs}\n    python -c 'import pathlib; print(\"documentation available under file://\\{0\\}\".format(pathlib.Path(r\"{toxworkdir}\") / \"docs_out\" / \"index.html\"))'\n\n[testenv:lint]\ndescription = check the code style\nskip_install = true\ndeps = pre-commit\ncommands = pre-commit run --all-files --show-diff-on-failure\n\n[testenv:type]\ndescription = type check ourselves\npassenv =\n    TERM\n    MYPY_FORCE_COLOR\n    MYPY_FORCE_TERMINAL_WIDTH\ncommands =\n    python runtests.py self\n    python -m mypy --config-file mypy_self_check.ini misc --exclude misc/sync-typeshed.py\n    python -m mypy --config-file mypy_self_check.ini test-data/unit/plugins\n"
        }
      ]
    }
  ]
}