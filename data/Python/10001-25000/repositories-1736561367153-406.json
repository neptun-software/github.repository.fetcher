{
  "metadata": {
    "timestamp": 1736561367153,
    "page": 406,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kkroening/ffmpeg-python",
      "stars": 10209,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.09375,
          "content": ".cache\n.eggs\n.tox/\ndist/\nffmpeg/tests/sample_data/out*.mp4\nffmpeg_python.egg-info/\nvenv*\nbuild/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0771484375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2017 Karl Kroening\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST",
          "type": "blob",
          "size": 0.142578125,
          "content": "# file GENERATED by distutils, do NOT edit\nREADME\nsetup.py\nffmpeg/__init__.py\nffmpeg/_ffmpeg.py\nffmpeg/_filters.py\nffmpeg/_run.py\nffmpeg/nodes.py\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 0.0087890625,
          "content": "README.md"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.892578125,
          "content": "# ffmpeg-python: Python bindings for FFmpeg\n\n[![CI][ci-badge]][ci]\n\n[ci-badge]: https://github.com/kkroening/ffmpeg-python/actions/workflows/ci.yml/badge.svg\n[ci]: https://github.com/kkroening/ffmpeg-python/actions/workflows/ci.yml\n\n<img src=\"https://raw.githubusercontent.com/kkroening/ffmpeg-python/master/doc/formula.png\" alt=\"ffmpeg-python logo\" width=\"60%\" />\n\n## Overview\n\nThere are tons of Python FFmpeg wrappers out there but they seem to lack complex filter support.  `ffmpeg-python` works well for simple as well as complex signal graphs.\n\n\n## Quickstart\n\nFlip a video horizontally:\n```python\nimport ffmpeg\nstream = ffmpeg.input('input.mp4')\nstream = ffmpeg.hflip(stream)\nstream = ffmpeg.output(stream, 'output.mp4')\nffmpeg.run(stream)\n```\n\nOr if you prefer a fluent interface:\n```python\nimport ffmpeg\n(\n    ffmpeg\n    .input('input.mp4')\n    .hflip()\n    .output('output.mp4')\n    .run()\n)\n```\n\n## [API reference](https://kkroening.github.io/ffmpeg-python/)\n\n## Complex filter graphs\nFFmpeg is extremely powerful, but its command-line interface gets really complicated rather quickly - especially when working with signal graphs and doing anything more than trivial.\n\nTake for example a signal graph that looks like this:\n\n![Signal graph](https://raw.githubusercontent.com/kkroening/ffmpeg-python/master/doc/graph1.png)\n\nThe corresponding command-line arguments are pretty gnarly:\n```bash\nffmpeg -i input.mp4 -i overlay.png -filter_complex \"[0]trim=start_frame=10:end_frame=20[v0];\\\n    [0]trim=start_frame=30:end_frame=40[v1];[v0][v1]concat=n=2[v2];[1]hflip[v3];\\\n    [v2][v3]overlay=eof_action=repeat[v4];[v4]drawbox=50:50:120:120:red:t=5[v5]\"\\\n    -map [v5] output.mp4\n```\n\nMaybe this looks great to you, but if you're not an FFmpeg command-line expert, it probably looks alien.\n\nIf you're like me and find Python to be powerful and readable, it's easier with `ffmpeg-python`:\n```python\nimport ffmpeg\n\nin_file = ffmpeg.input('input.mp4')\noverlay_file = ffmpeg.input('overlay.png')\n(\n    ffmpeg\n    .concat(\n        in_file.trim(start_frame=10, end_frame=20),\n        in_file.trim(start_frame=30, end_frame=40),\n    )\n    .overlay(overlay_file.hflip())\n    .drawbox(50, 50, 120, 120, color='red', thickness=5)\n    .output('out.mp4')\n    .run()\n)\n```\n\n`ffmpeg-python` takes care of running `ffmpeg` with the command-line arguments that correspond to the above filter diagram, in familiar Python terms.\n\n<img src=\"https://raw.githubusercontent.com/kkroening/ffmpeg-python/master/doc/screenshot.png\" alt=\"Screenshot\" align=\"middle\" width=\"60%\" />\n\nReal-world signal graphs can get a heck of a lot more complex, but `ffmpeg-python` handles arbitrarily large (directed-acyclic) signal graphs.\n\n## Installation\n\n### Installing `ffmpeg-python`\n\nThe latest version of `ffmpeg-python` can be acquired via a typical pip install:\n\n```bash\npip install ffmpeg-python\n```\n\nOr the source can be cloned and installed from locally:\n```bash\ngit clone git@github.com:kkroening/ffmpeg-python.git\npip install -e ./ffmpeg-python\n```\n\n> **Note**: `ffmpeg-python` makes no attempt to download/install FFmpeg, as `ffmpeg-python` is merely a pure-Python wrapper - whereas FFmpeg installation is platform-dependent/environment-specific, and is thus the responsibility of the user, as described below.\n\n### Installing FFmpeg\n\nBefore using `ffmpeg-python`, FFmpeg must be installed and accessible via the `$PATH` environment variable.\n\nThere are a variety of ways to install FFmpeg, such as the [official download links](https://ffmpeg.org/download.html), or using your package manager of choice (e.g. `sudo apt install ffmpeg` on Debian/Ubuntu, `brew install ffmpeg` on OS X, etc.).\n\nRegardless of how FFmpeg is installed, you can check if your environment path is set correctly by running the `ffmpeg` command from the terminal, in which case the version information should appear, as in the following example (truncated for brevity):\n\n```\n$ ffmpeg\nffmpeg version 4.2.4-1ubuntu0.1 Copyright (c) 2000-2020 the FFmpeg developers\n  built with gcc 9 (Ubuntu 9.3.0-10ubuntu2)\n```\n\n> **Note**: The actual version information displayed here may vary from one system to another; but if a message such as `ffmpeg: command not found` appears instead of the version information, FFmpeg is not properly installed.\n\n## [Examples](https://github.com/kkroening/ffmpeg-python/tree/master/examples)\n\nWhen in doubt, take a look at the [examples](https://github.com/kkroening/ffmpeg-python/tree/master/examples) to see if there's something that's close to whatever you're trying to do.\n\nHere are a few:\n- [Convert video to numpy array](https://github.com/kkroening/ffmpeg-python/blob/master/examples/README.md#convert-video-to-numpy-array)\n- [Generate thumbnail for video](https://github.com/kkroening/ffmpeg-python/blob/master/examples/README.md#generate-thumbnail-for-video)\n- [Read raw PCM audio via pipe](https://github.com/kkroening/ffmpeg-python/blob/master/examples/README.md#convert-sound-to-raw-pcm-audio)\n\n- [JupyterLab/Notebook stream editor](https://github.com/kkroening/ffmpeg-python/blob/master/examples/README.md#jupyter-stream-editor)\n\n<img src=\"https://raw.githubusercontent.com/kkroening/ffmpeg-python/master/doc/jupyter-demo.gif\" alt=\"jupyter demo\" width=\"75%\" />\n\n- [Tensorflow/DeepDream streaming](https://github.com/kkroening/ffmpeg-python/blob/master/examples/README.md#tensorflow-streaming)\n\n<img src=\"https://raw.githubusercontent.com/kkroening/ffmpeg-python/master/examples/graphs/dream.png\" alt=\"deep dream streaming\" width=\"40%\" />\n\nSee the [Examples README](https://github.com/kkroening/ffmpeg-python/tree/master/examples) for additional examples.\n\n## Custom Filters\n\nDon't see the filter you're looking for?  While `ffmpeg-python` includes shorthand notation for some of the most commonly used filters (such as `concat`), all filters can be referenced via the `.filter` operator:\n```python\nstream = ffmpeg.input('dummy.mp4')\nstream = ffmpeg.filter(stream, 'fps', fps=25, round='up')\nstream = ffmpeg.output(stream, 'dummy2.mp4')\nffmpeg.run(stream)\n```\n\nOr fluently:\n```python\n(\n    ffmpeg\n    .input('dummy.mp4')\n    .filter('fps', fps=25, round='up')\n    .output('dummy2.mp4')\n    .run()\n)\n```\n\n**Special option names:**\n\nArguments with special names such as `-qscale:v` (variable bitrate), `-b:v` (constant bitrate), etc. can be specified as a keyword-args dictionary as follows:\n```python\n(\n    ffmpeg\n    .input('in.mp4')\n    .output('out.mp4', **{'qscale:v': 3})\n    .run()\n)\n```\n\n**Multiple inputs:**\n\nFilters that take multiple input streams can be used by passing the input streams as an array to `ffmpeg.filter`:\n```python\nmain = ffmpeg.input('main.mp4')\nlogo = ffmpeg.input('logo.png')\n(\n    ffmpeg\n    .filter([main, logo], 'overlay', 10, 10)\n    .output('out.mp4')\n    .run()\n)\n```\n\n**Multiple outputs:**\n\nFilters that produce multiple outputs can be used with `.filter_multi_output`:\n```python\nsplit = (\n    ffmpeg\n    .input('in.mp4')\n    .filter_multi_output('split')  # or `.split()`\n)\n(\n    ffmpeg\n    .concat(split[0], split[1].reverse())\n    .output('out.mp4')\n    .run()\n)\n```\n(In this particular case, `.split()` is the equivalent shorthand, but the general approach works for other multi-output filters)\n\n**String expressions:**\n\nExpressions to be interpreted by ffmpeg can be included as string parameters and reference any special ffmpeg variable names:\n```python\n(\n    ffmpeg\n    .input('in.mp4')\n    .filter('crop', 'in_w-2*10', 'in_h-2*20')\n    .input('out.mp4')\n)\n```\n\n<br />\n\nWhen in doubt, refer to the [existing filters](https://github.com/kkroening/ffmpeg-python/blob/master/ffmpeg/_filters.py), [examples](https://github.com/kkroening/ffmpeg-python/tree/master/examples), and/or the [official ffmpeg documentation](https://ffmpeg.org/ffmpeg-filters.html).\n\n## Frequently asked questions\n\n**Why do I get an import/attribute/etc. error from `import ffmpeg`?**\n\nMake sure you ran `pip install ffmpeg-python` and _**not**_ `pip install ffmpeg` (wrong) or `pip install python-ffmpeg` (also wrong).\n\n**Why did my audio stream get dropped?**\n\nSome ffmpeg filters drop audio streams, and care must be taken to preserve the audio in the final output.  The ``.audio`` and ``.video`` operators can be used to reference the audio/video portions of a stream so that they can be processed separately and then re-combined later in the pipeline.\n\nThis dilemma is intrinsic to ffmpeg, and ffmpeg-python tries to stay out of the way while users may refer to the official ffmpeg documentation as to why certain filters drop audio.\n\nAs usual, take a look at the [examples](https://github.com/kkroening/ffmpeg-python/tree/master/examples#audiovideo-pipeline) (*Audio/video pipeline* in particular).\n\n**How can I find out the used command line arguments?**\n\nYou can run `stream.get_args()` before `stream.run()` to retrieve the command line arguments that will be passed to `ffmpeg`. You can also run `stream.compile()` that also includes the `ffmpeg` executable as the first argument.\n\n**How do I do XYZ?**\n\nTake a look at each of the links in the [Additional Resources](https://kkroening.github.io/ffmpeg-python/) section at the end of this README.  If you look everywhere and can't find what you're looking for and have a question that may be relevant to other users, you may open an issue asking how to do it, while providing a thorough explanation of what you're trying to do and what you've tried so far.\n\nIssues not directly related to `ffmpeg-python` or issues asking others to write your code for you or how to do the work of solving a complex signal processing problem for you that's not relevant to other users will be closed.\n\nThat said, we hope to continue improving our documentation and provide a community of support for people using `ffmpeg-python` to do cool and exciting things.\n\n## Contributing\n\n<img align=\"right\" src=\"https://raw.githubusercontent.com/kkroening/ffmpeg-python/master/doc/logo.png\" alt=\"ffmpeg-python logo\" width=\"20%\" />\n\nOne of the best things you can do to help make `ffmpeg-python` better is to answer [open questions](https://github.com/kkroening/ffmpeg-python/labels/question) in the issue tracker.  The questions that are answered will be tagged and incorporated into the documentation, examples, and other learning resources.\n\nIf you notice things that could be better in the documentation or overall development experience, please say so in the [issue tracker](https://github.com/kkroening/ffmpeg-python/issues).  And of course, feel free to report any bugs or submit feature requests.\n\nPull requests are welcome as well, but it wouldn't hurt to touch base in the issue tracker or hop on the [Matrix chat channel](https://riot.im/app/#/room/#ffmpeg-python:matrix.org) first.\n\nAnyone who fixes any of the [open bugs](https://github.com/kkroening/ffmpeg-python/labels/bug) or implements [requested enhancements](https://github.com/kkroening/ffmpeg-python/labels/enhancement) is a hero, but changes should include passing tests.\n\n### Running tests\n\n```bash\ngit clone git@github.com:kkroening/ffmpeg-python.git\ncd ffmpeg-python\nvirtualenv venv\n. venv/bin/activate  # (OS X / Linux)\nvenv\\bin\\activate    # (Windows)\npip install -e .[dev]\npytest\n```\n\n<br />\n\n### Special thanks\n\n- [Fabrice Bellard](https://bellard.org/)\n- [The FFmpeg team](https://ffmpeg.org/donations.html)\n- [Arne de Laat](https://github.com/153957)\n- [Davide Depau](https://github.com/depau)\n- [Dim](https://github.com/lloti)\n- [Noah Stier](https://github.com/noahstier)\n\n## Additional Resources\n\n- [API Reference](https://kkroening.github.io/ffmpeg-python/)\n- [Examples](https://github.com/kkroening/ffmpeg-python/tree/master/examples)\n- [Filters](https://github.com/kkroening/ffmpeg-python/blob/master/ffmpeg/_filters.py)\n- [FFmpeg Homepage](https://ffmpeg.org/)\n- [FFmpeg Documentation](https://ffmpeg.org/ffmpeg.html)\n- [FFmpeg Filters Documentation](https://ffmpeg.org/ffmpeg-filters.html)\n- [Test cases](https://github.com/kkroening/ffmpeg-python/blob/master/ffmpeg/tests/test_ffmpeg.py)\n- [Issue tracker](https://github.com/kkroening/ffmpeg-python/issues)\n- Matrix Chat: [#ffmpeg-python:matrix.org](https://riot.im/app/#/room/#ffmpeg-python:matrix.org)\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "ffmpeg",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.2236328125,
          "content": "[tool.black]\nskip-string-normalization = true\ntarget_version = ['py27']  # TODO: drop Python 2 support (... \"Soon\").\ninclude = '\\.pyi?$'\nexclude = '''\n(\n  /(\n      \\.eggs\n    | \\.git\n    | \\.tox\n    | \\venv\n    | dist\n  )/\n)\n'''\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.033203125,
          "content": "[pytest]\ntestpaths = ffmpeg/tests\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.7060546875,
          "content": "alabaster==0.7.12\natomicwrites==1.3.0\nattrs==19.1.0\nBabel==2.7.0\ncertifi==2019.3.9\nchardet==3.0.4\ndocutils==0.14\nfilelock==3.0.12\nfuture==0.17.1\nidna==2.8\nimagesize==1.1.0\nimportlib-metadata==0.17\nJinja2==2.10.1\nMarkupSafe==1.1.1\nmore-itertools==7.0.0\nnumpy==1.16.4\npackaging==19.0\npluggy==0.12.0\npy==1.8.0\nPygments==2.4.2\npyparsing==2.4.0\npytest==4.6.1\npytest-mock==1.10.4\npytz==2019.1\nrequests==2.22.0\nsix==1.12.0\nsnowballstemmer==1.2.1\nSphinx==2.1.0\nsphinxcontrib-applehelp==1.0.1\nsphinxcontrib-devhelp==1.0.1\nsphinxcontrib-htmlhelp==1.0.2\nsphinxcontrib-jsmath==1.0.1\nsphinxcontrib-qthelp==1.0.2\nsphinxcontrib-serializinghtml==1.1.3\ntoml==0.10.0\ntox==3.12.1\nurllib3==1.25.3\nvirtualenv==16.6.0\nwcwidth==0.1.7\nzipp==0.5.1\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.021484375,
          "content": "[aliases]\ntest=pytest\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.3466796875,
          "content": "from setuptools import setup\nfrom textwrap import dedent\n\nversion = '0.2.0'\ndownload_url = 'https://github.com/kkroening/ffmpeg-python/archive/v{}.zip'.format(\n    version\n)\n\nlong_description = dedent(\n    '''\\\n    ffmpeg-python: Python bindings for FFmpeg\n    =========================================\n\n    :Github: https://github.com/kkroening/ffmpeg-python\n    :API Reference: https://kkroening.github.io/ffmpeg-python/\n'''\n)\n\n\nfile_formats = [\n    'aac',\n    'ac3',\n    'avi',\n    'bmp',\n    'flac',\n    'gif',\n    'mov',\n    'mp3',\n    'mp4',\n    'png',\n    'raw',\n    'rawvideo',\n    'wav',\n]\nfile_formats += ['.{}'.format(x) for x in file_formats]\n\nmisc_keywords = [\n    '-vf',\n    'a/v',\n    'audio',\n    'dsp',\n    'FFmpeg',\n    'ffmpeg',\n    'ffprobe',\n    'filtering',\n    'filter_complex',\n    'movie',\n    'render',\n    'signals',\n    'sound',\n    'streaming',\n    'streams',\n    'vf',\n    'video',\n    'wrapper',\n]\n\nkeywords = misc_keywords + file_formats\n\nsetup(\n    name='ffmpeg-python',\n    packages=['ffmpeg'],\n    version=version,\n    description='Python bindings for FFmpeg - with complex filtering support',\n    author='Karl Kroening',\n    author_email='karlk@kralnet.us',\n    url='https://github.com/kkroening/ffmpeg-python',\n    download_url=download_url,\n    keywords=keywords,\n    long_description=long_description,\n    install_requires=['future'],\n    extras_require={\n        'dev': [\n            'future==0.17.1',\n            'numpy==1.16.4',\n            'pytest-mock==1.10.4',\n            'pytest==4.6.1',\n            'Sphinx==2.1.0',\n            'tox==3.12.1',\n        ]\n    },\n    classifiers=[\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Natural Language :: English',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n)\n"
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.4951171875,
          "content": "# Tox (https://tox.readthedocs.io/) is a tool for running tests\n# in multiple virtualenvs. This configuration file will run the\n# test suite on all supported python versions. To use it, \"pip install tox\"\n# and then run \"tox\" from this directory.\n\n[tox]\nenvlist = py27, py35, py36, py37, py38, py39, py310\n\n[gh-actions]\npython =\n    2.7: py27\n    3.5: py35\n    3.6: py36\n    3.7: py37\n    3.8: py38\n    3.9: py39\n    3.10: py310\n\n[testenv]\ncommands = py.test -vv\ndeps =\n    future\n    pytest\n    pytest-mock\n"
        }
      ]
    }
  ]
}