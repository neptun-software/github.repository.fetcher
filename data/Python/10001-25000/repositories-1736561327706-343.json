{
  "metadata": {
    "timestamp": 1736561327706,
    "page": 343,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "optuna/optuna",
      "stars": 11203,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.05859375,
          "content": "[run]\nconcurrency = multiprocessing,thread\nsource = optuna/\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0732421875,
          "content": "# Ignore everything\n**\n\n!pyproject.toml\n!README.md\n!optuna\n\n**/__pycache__\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.8623046875,
          "content": "# macOS metadata\n.DS_Store\n\n# Ignore files that examples create\nt10k-images-idx3-ubyte*\nt10k-labels-idx1-ubyte*\ntrain-images-idx3-ubyte*\ntrain-labels-idx1-ubyte*\ntraining.pt\ntest.pt\ncatboost_info/\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n!tests/storages_tests/journal_tests/assets/*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# PyBuilder\ntarget/\n\n# IPython Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# dotenv\n.env\n\n# virtualenv\n.venv/\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n\n# PyCharm\n.idea\n\n# VSCode\n.vscode\n.devcontainer\n\n# MyPy\n.mypy_cache\n\n# Sphinx\ntutorial/**/example.db\ntutorial/**/example-study.db\ntutorial/20_recipes/artifacts/\ntutorial/20_recipes/best_atoms.png\ntutorial/20_recipes/tmp/\ndocs/_build/\ndocs/source/reference/generated/\ndocs/source/reference/multi_objective/generated/\ndocs/source/reference/visualization/generated/\ndocs/source/reference/visualization/matplotlib/generated/\ndocs/source/reference/samplers/generated\ndocs/source/sg_execution_times.rst\ndocs/source/tutorial/**\n!docs/source/tutorial/index.rst\n\n# asv\n.asv\n\n# Dask\ndask-worker-space/\n\n# PyTorch Lightning\nlightning_logs/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.619140625,
          "content": "# pre-commit package installation is necessary to use pre-commit.\n# $ pip install pre-commit\n# $ pre-commit install\n\ndefault_language_version:\n  python: python3\n\nrepos:\n  # Args are based on setup.cfg.\n  - repo: https://github.com/psf/black\n    rev: 24.10.0\n    hooks:\n      - id: black\n  - repo: https://github.com/pycqa/flake8\n    rev: 7.1.1\n    hooks:\n      - id: flake8\n        exclude: tutorial|docs/visualization_examples|docs/visualization_matplotlib_examples|optuna/storages/_grpc/auto_generated\n        args: [\n            \"--max-line-length=99\",\n            \"--ignore=E203,E704,W503\",\n            \"--statistics\",\n        ]\n  - repo: https://github.com/pycqa/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.13.0\n    hooks:\n    - id: mypy\n      additional_dependencies: [\n        \"alembic>=1.5.0\",\n        \"colorlog\",\n        \"numpy\",\n        \"packaging>=20.0\",\n        \"sqlalchemy>=1.3.0\",\n        \"tqdm\",\n        \"PyYAML\",\n        \"mypy_boto3_s3\",\n        \"types-PyYAML\",\n        \"types-redis\",\n        \"types-setuptools\",\n        \"types-tqdm\",\n        \"typing_extensions>=3.10.0.0\",\n        \"types-protobuf\",\n      ]\n      exclude: docs|tutorial|optuna/storages/_rdb/alembic|optuna/storages/_grpc/auto_generated\n      args: [\n        --warn-unused-configs,\n        --disallow-untyped-calls,\n        --disallow-untyped-defs,\n        --disallow-incomplete-defs,\n        --check-untyped-defs,\n        --no-implicit-optional,\n        --warn-redundant-casts,\n        --strict-equality,\n        --extra-checks,\n        --no-implicit-reexport,\n        --ignore-missing-imports,\n      ]\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.7607421875,
          "content": "# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.12\"\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/source/conf.py\n\n# Optionally build your docs in additional formats such as PDF and ePub\nformats: all\n\n# Optionally set the version of Python and requirements required to build your docs\npython:\n  # `sphinx` requires either Python >= 3.8 or `typed-ast` to reflect type comments\n  # in the documentation. See: https://github.com/sphinx-doc/sphinx/pull/6984\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - document\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.75,
          "content": "cff-version: 1.2.0\nauthors:\n  - name: Preferred Networks, Inc.\ntitle: \"Optuna: A hyperparameter optimization framework\"\nurl: \"https://github.com/optuna/optuna\"\npreferred-citation:\n  type: conference-paper\n  authors:\n    - family-names: \"Akiba\"\n      given-names: \"Takuya\"\n    - family-names: \"Sano\"\n      given-names: \"Shotaro\"\n    - family-names: \"Yanase\"\n      given-names: \"Toshihiko\"\n    - family-names: \"Ohta\"\n      given-names: \"Takeru\"\n    - family-names: \"Koyama\"\n      given-names: \"Masanori\"\n  doi: \"10.1145/3292500.3330701\"\n  collection-title: \"Proceedings of the 25th ACM SIGKDD international conference on knowledge discovery & data mining\"\n  start: 2623\n  end: 2631\n  title: \"Optuna: A next-generation hyperparameter optimization framework\"\n  year: 2019\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.3017578125,
          "content": "# Optuna Code of Conduct\n\nOptuna follows the [NumFOCUS Code of Conduct][homepage] available at https://numfocus.org/code-of-conduct.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at optuna@preferred.jp. \n\n[homepage]: https://numfocus.org/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 11.388671875,
          "content": "# Contribution Guidelines\n\nIt’s an honor to have you on board!\n\nWe are proud of this project and have been working to make it great since day one.\nWe believe you will love it, and we know there’s room for improvement.\nWe want to\n- implement features that make what you want to do possible and/or easy.\n- write more tutorials and [examples](https://github.com/optuna/optuna-examples) that help you get familiar with Optuna.\n- make issues and pull requests on GitHub fruitful.\n- have more conversations and discussions on [GitHub Discussions](https://github.com/optuna/optuna/discussions).\n\nWe need your help and everything about Optuna you have in your mind pushes this project forward.\nJoin Us!\n\nIf you feel like giving a hand, here are some ways:\n- Implement a feature\n    - If you have some cool idea, please open an issue first to discuss design to make your idea in a better shape.\n    - We also welcome PRs for [optunahub-registry](https://github.com/optuna/optunahub-registry). [OptunaHub](https://hub.optuna.org/) is a feature-sharing platform for Optuna.\n- Send a patch\n    - Dirty your hands by tackling [issues with `contribution-welcome` label](https://github.com/optuna/optuna/issues?q=is%3Aissue+is%3Aopen+label%3Acontribution-welcome)\n- Report a bug\n    - If you find a bug, please report it! Your reports are important.\n- Fix/Improve documentation\n    - Documentation gets outdated easily and can always be better, so feel free to fix and improve\n- Let us and the Optuna community know your ideas and thoughts.\n    - __Contribution to Optuna includes not only sending pull requests, but also writing down your comments on issues and pull requests by others, and joining conversations/discussions on [GitHub Discussions](https://github.com/optuna/optuna/discussions).__\n    - Also, sharing how you enjoy Optuna is a huge contribution! If you write a blog, let us know about it!\n\n\n## Pull Request Guidelines\n\nIf you make a pull request, please follow the guidelines below:\n\n- [Setup Optuna](#setup-optuna)\n- [Checking the Format, Coding Style, and Type Hints](#checking-the-format-coding-style-and-type-hints)\n- [Documentation](#documentation)\n- [Unit Tests](#unit-tests)\n- [Continuous Integration and Local Verification](#continuous-integration-and-local-verification)\n- [Creating a Pull Request](#creating-a-pull-request)\n\nDetailed conventions and policies to write, test, and maintain Optuna code are described in the [Optuna Wiki](https://github.com/optuna/optuna/wiki).\n\n- [Coding Style Conventions](https://github.com/optuna/optuna/wiki/Coding-Style-Conventions)\n- [Deprecation Policy](https://github.com/optuna/optuna/wiki/Deprecation-policy)\n- [Test Policy](https://github.com/optuna/optuna/wiki/Test-Policy)\n\n### Setup Optuna\n\nFirst of all, fork Optuna on GitHub.\nYou can learn about fork in the official [documentation](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo).\n\nAfter forking, download and install Optuna on your computer.\n\n```bash\ngit clone git@github.com:YOUR_NAME/optuna.git\ncd optuna\npip install -e .\n```\n\n### Checking the Format, Coding Style, and Type Hints\n\nCode is formatted with [black](https://github.com/psf/black),\nand docstrings are formatted with [blackdoc](https://github.com/keewis/blackdoc).\nCoding style is checked with [flake8](http://flake8.pycqa.org) and [isort](https://pycqa.github.io/isort/),\nand additional conventions are described in the [Wiki](https://github.com/optuna/optuna/wiki/Coding-Style-Conventions).\nType hints, [PEP484](https://www.python.org/dev/peps/pep-0484/), are checked with [mypy](http://mypy-lang.org/).\n\nYou can check the format, coding style, and type hints at the same time just by executing a script `formats.sh`.\nIf your environment is missing some dependencies such as black, blackdoc, flake8, isort or mypy,\nyou will be asked to install them.\nThe following commands automatically fix format errors by auto-formatters.\n\n```bash\n# Install auto-formatters.\n$ pip install \".[checking]\"\n\n$ ./formats.sh\n```\n\nYou can use `pre-commit` to automatically check the format, coding style, and type hints before committing.\nThe following commands automatically fix format errors by auto-formatters.\n\n```bash\n# Install `pre-commit`.\n$ pip install pre-commit\n\n$ pre-commit install\n$ pre-commit run --all-files\n```\n\n### Documentation\n\nWhen adding a new feature to the framework, you also need to document it in the reference.\nThe documentation source is stored under the [docs](./docs) directory and written in [reStructuredText format](http://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html).\n\nTo build the documentation, you need to run:\n\n```bash\npip install -e \".[document]\"\n```\nNote that the above command might try to install PyTorch without CUDA to your environment even if your environment has CUDA version already.\n\nThen you can build the documentation in HTML format locally:\n\n```bash\ncd docs\nmake html\n```\n\nHTML files are generated under `build/html` directory. Open `index.html` with the browser and see\nif it is rendered as expected.\n\nOptuna's tutorial is built with [Sphinx-Gallery](https://sphinx-gallery.github.io/stable/index.html) and\nsome other requirements like [LightGBM](https://github.com/microsoft/LightGBM) and [PyTorch](https://pytorch.org) meaning that\nall .py files in `tutorial` directory are run during the documentation build if there's no build cache.\nWhether you edit any tutorial or not doesn't matter.\n\nTo avoid having to run the tutorials, you may download executed tutorial artifacts named \"tutorial\" from our CI (see the capture below) and put them in `docs/build` before\nextracting the files in the zip to `docs/source/tutorial` directory.\nNote that the CI runs with Python 3.12 and the generated artifacts contain pickle files.\nPlease use the same Python version as in the CI if you build the documentation with artifacts to avoid unexpected errors due to the python version difference.\n\n![image](https://user-images.githubusercontent.com/16191443/107472296-0b211400-6bb2-11eb-9203-e2c42ce499ad.png)\n\n**Writing a Tutorial**\nTutorials are part of Optuna’s documentation.\nOptuna depends on Sphinx to build the documentation HTML files from the corresponding reStructuredText (`.rst`) files in the docs/source directory,\nbut as you may notice, [Tutorial directory](https://github.com/optuna/optuna/tree/master/tutorial) does not have any `.rst` files. Instead, it has a bunch of Python (`.py`) files.\nWe have [Sphinx Gallery](https://sphinx-gallery.github.io/stable/index.html) that executes those `.py` files and generates `.rst` files with standard outputs from them and corresponding Jupyter Notebook (`.ipynb`) files.\nThese generated `.rst` and `.ipynb` files are written to the docs/source/tutorial directory.\nThe output directory (docs/source/tutorial) and source (tutorial) directory are configured in [`sphinx_gallery_conf` of docs/source/conf.py](https://github.com/optuna/optuna/blob/2e14273cab87f13edeb9d804a43bd63c44703cb5/docs/source/conf.py#L189-L199). These generated `.rst` files are handled by Sphinx like the other `.rst` files. The generated `.ipynb` files are hosted on Optuna’s documentation page and downloadable (check [Optuna tutorial](https://optuna.readthedocs.io/en/stable/tutorial/index.html)).\n\nThe order of contents on [tutorial top page](https://optuna.readthedocs.io/en/stable/tutorial/index.html) is determined by two keys: one is the subdirectory name of tutorial and the other is the filename (note that there are some alternatives as documented in [Sphinx Gallery - sorting](https://sphinx-gallery.github.io/stable/gen_modules/sphinx_gallery.sorting.html?highlight=filenamesortkey), but we chose this key in https://github.com/optuna/optuna/blob/2e14273cab87f13edeb9d804a43bd63c44703cb5/docs/source/conf.py#L196).\nOptuna’s tutorial directory has two directories: (1) [10_key_features](https://github.com/optuna/optuna/tree/master/tutorial/10_key_features), which is meant to be aligned with and explain the key features listed on [README.md](https://github.com/optuna/optuna#key-features) and (2) [20_recipes](https://github.com/optuna/optuna/tree/master/tutorial/20_recipes), whose contents showcase how to use Optuna features conveniently.\nWhen adding new content to the Optuna tutorials, place it in `20_recipes` and its file name should conform to the other names, for example, `777_cool_feature.py`.\nIn general, please number the prefix for your file consecutively with the last number. However, this is not mandatory and if you think your content deserves the smaller number (the order of recipes does not have a specific meaning, but in general, order could convey the priority order to readers), feel free to propose the renumbering in your PR.\n\nYou may want to refer to the Sphinx Gallery for the syntax of `.py` files processed by Sphinx Gallery.\nTwo specific conventions and limitations for Optuna tutorials:\n1. 99 #s for block separation as in https://github.com/optuna/optuna/blob/2e14273cab87f13edeb9d804a43bd63c44703cb5/tutorial/10_key_features/001_first.py#L19\n2. Execution time of the new content needs to be less than three minutes. This limitation derives from Read The Docs. If your content runs some hyperparameter optimization, set the `timeout` to 180 or less. You can check this limitation on [Read the Docs - Build Process](https://docs.readthedocs.io/en/stable/builds.html).\n\n\n### Unit Tests\n\nWhen adding a new feature or fixing a bug, you also need to write sufficient test code.\nWe use [pytest](https://pytest.org/) as the testing framework and\nunit tests are stored under the [tests directory](./tests).\n\nPlease install some required packages at first.\n```bash\n# Install required packages to test all modules.\npip install \".[test,optional]\"\n```\n\nYou can run your tests as follows:\n\n```bash\n# Run all the unit tests.\npytest\n\n# Run all the unit tests defined in the specified test file.\npytest tests/${TARGET_TEST_FILE_NAME}\n\n# Run the unit test function with the specified name defined in the specified test file.\npytest tests/${TARGET_TEST_FILE_NAME} -k ${TARGET_TEST_FUNCTION_NAME}\n```\n\nSee also the [Optuna Test Policy](https://github.com/optuna/optuna/wiki/Test-Policy), which describes the principles to write and maintain Optuna tests to meet certain quality requirements.\n\n### Continuous Integration and Local Verification\n\nOptuna repository uses GitHub Actions.\n\n### Creating a Pull Request\n\nWhen you are ready to create a pull request, please try to keep the following in mind.\n\nFirst, the **title** of your pull request should:\n\n- briefly describe and reflect the changes\n- wrap any code with backticks\n- not end with a period\n\n*The title will be directly visible in the release notes.*\n\nFor example:\n\n- Introduces Tree-structured Parzen Estimator to `optuna.samplers`\n\nSecond, the **description** of your pull request should:\n\n- describe the motivation\n- describe the changes\n- if still work-in-progress, describe remaining tasks\n\n## Learning Optuna's Implementation\n\nWith Optuna actively being developed and the amount of code growing,\nit has become difficult to get a hold of the overall flow from reading the code.\nSo we created a tiny program called [Minituna](https://github.com/CyberAgentAILab/minituna).\nOnce you get a good understanding of how Minituna is designed, it will not be too difficult to read the Optuna code.\nWe encourage you to practice reading the Minituna code with the following article.\n\n[An Introduction to the Implementation of Optuna, a Hyperparameter Optimization Framework](https://medium.com/optuna/an-introduction-to-the-implementation-of-optuna-a-hyperparameter-optimization-framework-33995d9ec354)\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.779296875,
          "content": "ARG PYTHON_VERSION=3.8\n\nFROM python:${PYTHON_VERSION}\n\nENV PIP_OPTIONS \"--no-cache-dir --progress-bar off\"\n\nRUN apt-get update \\\n    && apt-get -y install openmpi-bin libopenmpi-dev libopenblas-dev \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && pip install --no-cache-dir -U pip \\\n    && pip install ${PIP_OPTIONS} -U setuptools\n\nWORKDIR /workspaces\nCOPY . .\n\nARG BUILD_TYPE='dev'\n\nRUN if [ \"${BUILD_TYPE}\" = \"dev\" ]; then \\\n        pip install ${PIP_OPTIONS} -e '.[benchmark, checking, document, optional, test]' --extra-index-url https://download.pytorch.org/whl/cpu; \\\n    else \\\n        pip install ${PIP_OPTIONS} -e .; \\\n    fi \\\n    && pip install ${PIP_OPTIONS} jupyter notebook\n\n# Install RDB bindings.\nRUN pip install ${PIP_OPTIONS} PyMySQL cryptography psycopg2-binary\n\nENV PIP_OPTIONS \"\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0556640625,
          "content": "MIT License\n\nCopyright (c) 2018 Preferred Networks, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "LICENSE_THIRD_PARTY",
          "type": "blob",
          "size": 1.8837890625,
          "content": "Optuna contains code that is licensed by third-party developers.\n\n==\nSciPy\n\n\nThe Optuna contains the codes from SciPy project.\n\n\nCopyright (c) 2001-2002 Enthought, Inc. 2003-2022, SciPy Developers.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above\n   copyright notice, this list of conditions and the following\n   disclaimer in the documentation and/or other materials provided\n   with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived\n   from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n==\n\nfdlibm\n\n Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n\n Developed at SunPro, a Sun Microsystems, Inc. business.\n Permission to use, copy, modify, and distribute this\n software is freely granted, provided that this notice\n is preserved.\n\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0439453125,
          "content": "graft tests\nglobal-exclude *~ *.py[cod] *.so\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.650390625,
          "content": "<div align=\"center\"><img src=\"https://raw.githubusercontent.com/optuna/optuna/master/docs/image/optuna-logo.png\" width=\"800\"/></div>\n\n# Optuna: A hyperparameter optimization framework\n\n[![Python](https://img.shields.io/badge/python-3.8%20%7C%203.9%20%7C%203.10%20%7C%203.11%20%7C%203.12%20%7C%203.13-blue)](https://www.python.org)\n[![pypi](https://img.shields.io/pypi/v/optuna.svg)](https://pypi.python.org/pypi/optuna)\n[![conda](https://img.shields.io/conda/vn/conda-forge/optuna.svg)](https://anaconda.org/conda-forge/optuna)\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/optuna/optuna)\n[![Read the Docs](https://readthedocs.org/projects/optuna/badge/?version=stable)](https://optuna.readthedocs.io/en/stable/)\n[![Codecov](https://codecov.io/gh/optuna/optuna/branch/master/graph/badge.svg)](https://codecov.io/gh/optuna/optuna)\n\n:link: [**Website**](https://optuna.org/)\n| :page_with_curl: [**Docs**](https://optuna.readthedocs.io/en/stable/)\n| :gear: [**Install Guide**](https://optuna.readthedocs.io/en/stable/installation.html)\n| :pencil: [**Tutorial**](https://optuna.readthedocs.io/en/stable/tutorial/index.html)\n| :bulb: [**Examples**](https://github.com/optuna/optuna-examples)\n| [**Twitter**](https://twitter.com/OptunaAutoML)\n| [**LinkedIn**](https://www.linkedin.com/showcase/optuna/)\n| [**Medium**](https://medium.com/optuna)\n\n*Optuna* is an automatic hyperparameter optimization software framework, particularly designed\nfor machine learning. It features an imperative, *define-by-run* style user API. Thanks to our\n*define-by-run* API, the code written with Optuna enjoys high modularity, and the user of\nOptuna can dynamically construct the search spaces for the hyperparameters.\n\n## :loudspeaker: News\n<!-- TODO: when you add a new line, please delete the oldest line -->\n* **Nov 12, 2024**: We released Optuna 4.1 with new features, Python 3.13 support and much more! Check out [the release note](https://github.com/optuna/optuna/releases/tag/v4.1.0) for details.\n* **Nov 6, 2024**: A new article [AutoSampler: Automatic Selection of Optimization Algorithms in Optuna](https://medium.com/optuna/autosampler-automatic-selection-of-optimization-algorithms-in-optuna-1443875fd8f9) has been published.\n* **Oct 21, 2024**: We posted [an article](https://medium.com/optuna/an-introduction-to-moea-d-and-examples-of-multi-objective-optimization-comparisons-8630565a4e89) introducing [MOEA/D](https://hub.optuna.org/samplers/moead/) and an example comparison with other optimization methods.\n* **Oct 15, 2024**: We posted [an article](https://medium.com/optuna/introducing-a-new-terminator-early-termination-of-black-box-optimization-based-on-expected-9a660774fcdb) about `Terminator`, which is expanded in Optuna 4.0.\n* **Sep 18, 2024**: We posted [an article](https://medium.com/optuna/introducing-the-stabilized-journalstorage-in-optuna-4-0-from-mechanism-to-use-case-e320795ffb61) about `JournalStorage`, which is stabilized in Optuna 4.0.\n* **Sep 2, 2024**: Optuna 4.0 is available!  You can install it by `pip install -U optuna`. Find the latest [here](https://github.com/optuna/optuna/releases) and check [our article](https://medium.com/optuna/optuna-4-0-whats-new-in-the-major-release-3325a8420d10).\n\n## :fire: Key Features\n\nOptuna has modern functionalities as follows:\n\n- [Lightweight, versatile, and platform agnostic architecture](https://optuna.readthedocs.io/en/stable/tutorial/10_key_features/001_first.html)\n  - Handle a wide variety of tasks with a simple installation that has few requirements.\n- [Pythonic search spaces](https://optuna.readthedocs.io/en/stable/tutorial/10_key_features/002_configurations.html)\n  - Define search spaces using familiar Python syntax including conditionals and loops.\n- [Efficient optimization algorithms](https://optuna.readthedocs.io/en/stable/tutorial/10_key_features/003_efficient_optimization_algorithms.html)\n  - Adopt state-of-the-art algorithms for sampling hyperparameters and efficiently pruning unpromising trials.\n- [Easy parallelization](https://optuna.readthedocs.io/en/stable/tutorial/10_key_features/004_distributed.html)\n  - Scale studies to tens or hundreds of workers with little or no changes to the code.\n- [Quick visualization](https://optuna.readthedocs.io/en/stable/tutorial/10_key_features/005_visualization.html)\n  - Inspect optimization histories from a variety of plotting functions.\n\n\n## Basic Concepts\n\nWe use the terms *study* and *trial* as follows:\n\n- Study: optimization based on an objective function\n- Trial: a single execution of the objective function\n\nPlease refer to the sample code below. The goal of a *study* is to find out the optimal set of\nhyperparameter values (e.g., `regressor` and `svr_c`) through multiple *trials* (e.g.,\n`n_trials=100`). Optuna is a framework designed for automation and acceleration of\noptimization *studies*.\n\n<details open>\n<summary>Sample code with scikit-learn</summary>\n\n[![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](http://colab.research.google.com/github/optuna/optuna-examples/blob/main/quickstart.ipynb)\n\n```python\nimport ...\n\n# Define an objective function to be minimized.\ndef objective(trial):\n\n    # Invoke suggest methods of a Trial object to generate hyperparameters.\n    regressor_name = trial.suggest_categorical('regressor', ['SVR', 'RandomForest'])\n    if regressor_name == 'SVR':\n        svr_c = trial.suggest_float('svr_c', 1e-10, 1e10, log=True)\n        regressor_obj = sklearn.svm.SVR(C=svr_c)\n    else:\n        rf_max_depth = trial.suggest_int('rf_max_depth', 2, 32)\n        regressor_obj = sklearn.ensemble.RandomForestRegressor(max_depth=rf_max_depth)\n\n    X, y = sklearn.datasets.fetch_california_housing(return_X_y=True)\n    X_train, X_val, y_train, y_val = sklearn.model_selection.train_test_split(X, y, random_state=0)\n\n    regressor_obj.fit(X_train, y_train)\n    y_pred = regressor_obj.predict(X_val)\n\n    error = sklearn.metrics.mean_squared_error(y_val, y_pred)\n\n    return error  # An objective value linked with the Trial object.\n\nstudy = optuna.create_study()  # Create a new study.\nstudy.optimize(objective, n_trials=100)  # Invoke optimization of the objective function.\n```\n</details>\n\n> [!NOTE]\n> More examples can be found in [optuna/optuna-examples](https://github.com/optuna/optuna-examples).\n>\n> The examples cover diverse problem setups such as multi-objective optimization, constrained optimization, pruning, and distributed optimization.\n\n## Installation\n\nOptuna is available at [the Python Package Index](https://pypi.org/project/optuna/) and on [Anaconda Cloud](https://anaconda.org/conda-forge/optuna).\n\n```bash\n# PyPI\n$ pip install optuna\n```\n\n```bash\n# Anaconda Cloud\n$ conda install -c conda-forge optuna\n```\n\n> [!IMPORTANT]\n> Optuna supports Python 3.8 or newer.\n>\n> Also, we provide Optuna docker images on [DockerHub](https://hub.docker.com/r/optuna/optuna).\n\n## Integrations\n\nOptuna has integration features with various third-party libraries. Integrations can be found in [optuna/optuna-integration](https://github.com/optuna/optuna-integration) and the document is available [here](https://optuna-integration.readthedocs.io/en/stable/index.html).\n\n<details>\n<summary>Supported integration libraries</summary>\n\n* [Catboost](https://github.com/optuna/optuna-examples/tree/main/catboost/catboost_pruning.py)\n* [Dask](https://github.com/optuna/optuna-examples/tree/main/dask/dask_simple.py)\n* [fastai](https://github.com/optuna/optuna-examples/tree/main/fastai/fastai_simple.py)\n* [Keras](https://github.com/optuna/optuna-examples/tree/main/keras/keras_integration.py)\n* [LightGBM](https://github.com/optuna/optuna-examples/tree/main/lightgbm/lightgbm_integration.py)\n* [MLflow](https://github.com/optuna/optuna-examples/tree/main/mlflow/keras_mlflow.py)\n* [PyTorch](https://github.com/optuna/optuna-examples/tree/main/pytorch/pytorch_simple.py)\n* [PyTorch Ignite](https://github.com/optuna/optuna-examples/tree/main/pytorch/pytorch_ignite_simple.py)\n* [PyTorch Lightning](https://github.com/optuna/optuna-examples/tree/main/pytorch/pytorch_lightning_simple.py)\n* [TensorBoard](https://github.com/optuna/optuna-examples/tree/main/tensorboard/tensorboard_simple.py)\n* [TensorFlow](https://github.com/optuna/optuna-examples/tree/main/tensorflow/tensorflow_estimator_integration.py)\n* [tf.keras](https://github.com/optuna/optuna-examples/tree/main/tfkeras/tfkeras_integration.py)\n* [Weights & Biases](https://github.com/optuna/optuna-examples/tree/main/wandb/wandb_integration.py)\n* [XGBoost](https://github.com/optuna/optuna-examples/tree/main/xgboost/xgboost_integration.py)\n</details>\n\n## Web Dashboard\n\n[Optuna Dashboard](https://github.com/optuna/optuna-dashboard) is a real-time web dashboard for Optuna.\nYou can check the optimization history, hyperparameter importance, etc. in graphs and tables.\nYou don't need to create a Python script to call [Optuna's visualization](https://optuna.readthedocs.io/en/stable/reference/visualization/index.html) functions.\nFeature requests and bug reports are welcome!\n\n![optuna-dashboard](https://user-images.githubusercontent.com/5564044/204975098-95c2cb8c-0fb5-4388-abc4-da32f56cb4e5.gif)\n\n`optuna-dashboard` can be installed via pip:\n\n```shell\n$ pip install optuna-dashboard\n```\n\n> [!TIP]\n> Please check out the convenience of Optuna Dashboard using the sample code below.\n\n<details>\n<summary>Sample code to launch Optuna Dashboard</summary>\n\nSave the following code as `optimize_toy.py`.\n\n```python\nimport optuna\n\n\ndef objective(trial):\n    x1 = trial.suggest_float(\"x1\", -100, 100)\n    x2 = trial.suggest_float(\"x2\", -100, 100)\n    return x1 ** 2 + 0.01 * x2 ** 2\n\n\nstudy = optuna.create_study(storage=\"sqlite:///db.sqlite3\")  # Create a new study with database.\nstudy.optimize(objective, n_trials=100)\n```\n\nThen try the commands below:\n\n```shell\n# Run the study specified above\n$ python optimize_toy.py\n\n# Launch the dashboard based on the storage `sqlite:///db.sqlite3`\n$ optuna-dashboard sqlite:///db.sqlite3\n...\nListening on http://localhost:8080/\nHit Ctrl-C to quit.\n```\n\n</details>\n\n\n## OptunaHub\n\n[OptunaHub](https://hub.optuna.org/) is a feature-sharing platform for Optuna.\nYou can use the registered features and publish your packages.\n\n### Use registered features\n\n`optunahub` can be installed via pip:\n\n```shell\n$ pip install optunahub\n# Install AutoSampler dependencies (CPU only is sufficient for PyTorch)\n$ pip install cmaes scipy torch --extra-index-url https://download.pytorch.org/whl/cpu\n```\n\nYou can load registered module with `optunahub.load_module`.\n\n```python\nimport optuna\nimport optunahub\n\n\ndef objective(trial: optuna.Trial) -> float:\n    x = trial.suggest_float(\"x\", -5, 5)\n    y = trial.suggest_float(\"y\", -5, 5)\n    return x**2 + y**2\n\n\nmodule = optunahub.load_module(package=\"samplers/auto_sampler\")\nstudy = optuna.create_study(sampler=module.AutoSampler())\nstudy.optimize(objective, n_trials=10)\n\nprint(study.best_trial.value, study.best_trial.params)\n```\n\nFor more details, please refer to [the optunahub documentation](https://optuna.github.io/optunahub/).\n\n### Publish your packages\n\nYou can publish your package via [optunahub-registry](https://github.com/optuna/optunahub-registry).\nSee the [OptunaHub tutorial](https://optuna.github.io/optunahub-registry/index.html).\n\n\n## Communication\n\n- [GitHub Discussions] for questions.\n- [GitHub Issues] for bug reports and feature requests.\n\n[GitHub Discussions]: https://github.com/optuna/optuna/discussions\n[GitHub issues]: https://github.com/optuna/optuna/issues\n\n\n## Contribution\n\nAny contributions to Optuna are more than welcome!\n\nIf you are new to Optuna, please check the [good first issues](https://github.com/optuna/optuna/labels/good%20first%20issue). They are relatively simple, well-defined, and often good starting points for you to get familiar with the contribution workflow and other developers.\n\nIf you already have contributed to Optuna, we recommend the other [contribution-welcome issues](https://github.com/optuna/optuna/labels/contribution-welcome).\n\nFor general guidelines on how to contribute to the project, take a look at [CONTRIBUTING.md](./CONTRIBUTING.md).\n\n\n## Reference\n\nIf you use Optuna in one of your research projects, please cite [our KDD paper](https://doi.org/10.1145/3292500.3330701) \"Optuna: A Next-generation Hyperparameter Optimization Framework\":\n\n<details open>\n<summary>BibTeX</summary>\n\n```bibtex\n@inproceedings{akiba2019optuna,\n  title={{O}ptuna: A Next-Generation Hyperparameter Optimization Framework},\n  author={Akiba, Takuya and Sano, Shotaro and Yanase, Toshihiko and Ohta, Takeru and Koyama, Masanori},\n  booktitle={The 25th ACM SIGKDD International Conference on Knowledge Discovery \\& Data Mining},\n  pages={2623--2631},\n  year={2019}\n}\n```\n</details>\n\n\n## License\n\nMIT License (see [LICENSE](./LICENSE)).\n\nOptuna uses the codes from SciPy and fdlibm projects (see [LICENSE_THIRD_PARTY](./LICENSE_THIRD_PARTY)).\n"
        },
        {
          "name": "asv.conf.json",
          "type": "blob",
          "size": 6.6953125,
          "content": "{\n    // The version of the config file format.  Do not change, unless\n    // you know what you are doing.\n    \"version\": 1,\n\n    // The name of the project being benchmarked\n    \"project\": \"Optuna\",\n\n    // The project's homepage\n    \"project_url\": \"https://optuna.org/\",\n\n    // The URL or local path of the source code repository for the\n    // project being benchmarked\n    \"repo\": \".\",\n\n    // The Python project's subdirectory in your repo.  If missing or\n    // the empty string, the project is assumed to be located at the root\n    // of the repository.\n    // \"repo_subdir\": \"\",\n\n    // Customizable commands for building, installing, and\n    // uninstalling the project. See asv.conf.json documentation.\n    //\n    // \"install_command\": [\"in-dir={env_dir} python -mpip install {wheel_file}\"],\n    // \"uninstall_command\": [\"return-code=any python -mpip uninstall -y {project}\"],\n    // \"build_command\": [\n    //     \"python setup.py build\",\n    //     \"PIP_NO_BUILD_ISOLATION=false python -mpip wheel --no-deps --no-index -w {build_cache_dir} {build_dir}\"\n    // ],\n    \"build_command\": [\n        \"python -m pip install build wheel\",\n        \"python -m build --wheel -o {build_cache_dir} {build_dir}\",\n        \"python -m pip install .[optional,test]\"\n    ],\n\n    // List of branches to benchmark. If not provided, defaults to \"master\"\n    // (for git) or \"default\" (for mercurial).\n    // \"branches\": [\"master\"], // for git\n    // \"branches\": [\"default\"],    // for mercurial\n\n    // The DVCS being used.  If not set, it will be automatically\n    // determined from \"repo\" by looking at the protocol in the URL\n    // (if remote), or by looking for special directories, such as\n    // \".git\" (if local).\n    // \"dvcs\": \"git\",\n\n    // The tool to use to create environments.  May be \"conda\",\n    // \"virtualenv\" or other value depending on the plugins in use.\n    // If missing or the empty string, the tool will be automatically\n    // determined by looking for tools on the PATH environment\n    // variable.\n    \"environment_type\": \"virtualenv\",\n\n    // timeout in seconds for installing any dependencies in environment\n    // defaults to 10 min\n    //\"install_timeout\": 600,\n\n    // the base URL to show a commit for the project.\n    \"show_commit_url\": \"https://github.com/optuna/optuna/commit/\",\n\n    // The Pythons you'd like to test against.  If not provided, defaults\n    // to the current version of Python used to run `asv`.\n    // \"pythons\": [\"2.7\", \"3.6\"],\n\n    // The list of conda channel names to be searched for benchmark\n    // dependency packages in the specified order\n    // \"conda_channels\": [\"conda-forge\", \"defaults\"],\n\n    // The matrix of dependencies to test.  Each key is the name of a\n    // package (in PyPI) and the values are version numbers.  An empty\n    // list or empty string indicates to just test against the default\n    // (latest) version. null indicates that the package is to not be\n    // installed. If the package to be tested is only available from\n    // PyPi, and the 'environment_type' is conda, then you can preface\n    // the package name by 'pip+', and the package will be installed via\n    // pip (with all the conda available packages installed first,\n    // followed by the pip installed packages).\n    //\n    // \"matrix\": {\n    // },\n\n    // Combinations of libraries/python versions can be excluded/included\n    // from the set to test. Each entry is a dictionary containing additional\n    // key-value pairs to include/exclude.\n    //\n    // An exclude entry excludes entries where all values match. The\n    // values are regexps that should match the whole string.\n    //\n    // An include entry adds an environment. Only the packages listed\n    // are installed. The 'python' key is required. The exclude rules\n    // do not apply to includes.\n    //\n    // In addition to package names, the following keys are available:\n    //\n    // - python\n    //     Python version, as in the *pythons* variable above.\n    // - environment_type\n    //     Environment type, as above.\n    // - sys_platform\n    //     Platform, as in sys.platform. Possible values for the common\n    //     cases: 'linux2', 'win32', 'cygwin', 'darwin'.\n    //\n    // \"exclude\": [\n    //     {\"python\": \"3.2\", \"sys_platform\": \"win32\"}, // skip py3.2 on windows\n    //     {\"environment_type\": \"conda\", \"six\": null}, // don't run without six on conda\n    // ],\n    //\n    // \"include\": [\n    //     // additional env for python2.7\n    //     {\"python\": \"2.7\", \"numpy\": \"1.8\"},\n    //     // additional env if run on windows+conda\n    //     {\"platform\": \"win32\", \"environment_type\": \"conda\", \"python\": \"2.7\", \"libpython\": \"\"},\n    // ],\n\n    // The directory (relative to the current directory) that benchmarks are\n    // stored in.  If not provided, defaults to \"benchmarks\"\n    \"benchmark_dir\": \"benchmarks/asv\",\n\n    // The directory (relative to the current directory) to cache the Python\n    // environments in.  If not provided, defaults to \"env\"\n    \"env_dir\": \".asv/env\",\n\n    // The directory (relative to the current directory) that raw benchmark\n    // results are stored in.  If not provided, defaults to \"results\".\n    \"results_dir\": \".asv/results\",\n\n    // The directory (relative to the current directory) that the html tree\n    // should be written to.  If not provided, defaults to \"html\".\n    \"html_dir\": \".asv/html\",\n\n    // The number of characters to retain in the commit hashes.\n    // \"hash_length\": 8,\n\n    // `asv` will cache results of the recent builds in each\n    // environment, making them faster to install next time.  This is\n    // the number of builds to keep, per environment.\n    // \"build_cache_size\": 2,\n\n    // The commits after which the regression search in `asv publish`\n    // should start looking for regressions. Dictionary whose keys are\n    // regexps matching to benchmark names, and values corresponding to\n    // the commit (exclusive) after which to start looking for\n    // regressions.  The default is to start from the first commit\n    // with results. If the commit is `null`, regression detection is\n    // skipped for the matching benchmark.\n    //\n    // \"regressions_first_commits\": {\n    //    \"some_benchmark\": \"352cdf\",  // Consider regressions only after this commit\n    //    \"another_benchmark\": null,   // Skip regression detection altogether\n    // },\n\n    // The thresholds for relative change in results, after which `asv\n    // publish` starts reporting regressions. Dictionary of the same\n    // form as in ``regressions_first_commits``, with values\n    // indicating the thresholds.  If multiple entries match, the\n    // maximum is taken. If no entry matches, the default is 5%.\n    //\n    // \"regressions_thresholds\": {\n    //    \"some_benchmark\": 0.01,     // Threshold of 1%\n    //    \"another_benchmark\": 0.5,   // Threshold of 50%\n    // },\n}\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "formats.sh",
          "type": "blob",
          "size": 2.3505859375,
          "content": "#!/bin/bash\n# As described in `CONTRIBUTING.md`, this script checks and formats Optuna's source codes by\n# `black`, `blackdoc`, and `isort`. If you pass `-n` as an option, this script checks codes\n# without updating codebase.\n\n\nmissing_dependencies=()\ncommand -v black &> /dev/null\nif [ $? -eq 1 ] ; then\n  missing_dependencies+=(black)\nfi\ncommand -v blackdoc &> /dev/null\nif [ $? -eq 1 ] ; then\n  missing_dependencies+=(blackdoc)\nfi\ncommand -v flake8 &> /dev/null\nif [ $? -eq 1 ] ; then\n  missing_dependencies+=(flake8)\nfi\ncommand -v isort &> /dev/null\nif [ $? -eq 1 ] ; then\n  missing_dependencies+=(isort)\nfi\ncommand -v mypy &> /dev/null\nif [ $? -eq 1 ] ; then\n  missing_dependencies+=(mypy)\nfi\nif [ ! ${#missing_dependencies[@]} -eq 0 ]; then\n  echo \"The following dependencies are missing:\" \"${missing_dependencies[@]}\"\n  read -p \"Would you like to install the missing dependencies? (y/N): \" yn\n  case \"$yn\" in [yY]*) ;; *) echo \"abort.\" ; exit ;; esac\n  pip install \"${missing_dependencies[@]}\"\nfi\n\nupdate=1\nwhile getopts \"n\" OPT\ndo\n  case $OPT in\n    n) update=0\n       ;;\n    *) ;;\n  esac\ndone\n\ntarget=\"optuna tests benchmarks tutorial\"\nmypy_target=\"optuna tests benchmarks\"\nres_all=0\n\nres_black=$(black $target --check --diff 2>&1)\nif [ $? -eq 1 ] ; then\n  if [ $update -eq 1 ] ; then\n    echo \"black failed. The code will be formatted by black.\"\n    black $target\n  else\n    echo \"$res_black\"\n    echo \"black failed.\"\n    res_all=1\n  fi\nelse\n  echo \"black succeeded.\"\nfi\n\nres_blackdoc=$(blackdoc $target --check --diff 2>&1)\nif [ $? -eq 1 ] ; then\n  if [ $update -eq 1 ] ; then\n    echo \"blackdoc failed. The docstrings will be formatted by blackdoc.\"\n    blackdoc $target\n  else\n    echo \"$res_blackdoc\"\n    echo \"blackdoc failed.\"\n    res_all=1\n  fi\nelse\n  echo \"blackdoc succeeded.\"\nfi\n\nres_flake8=$(flake8 $target)\nif [ $? -eq 1 ] ; then\n  echo \"$res_flake8\"\n  echo \"flake8 failed.\"\n  res_all=1\nelse\n  echo \"flake8 succeeded.\"\nfi\n\nres_isort=$(isort $target --check 2>&1)\nif [ $? -eq 1 ] ; then\n  if [ $update -eq 1 ] ; then\n    echo \"isort failed. The code will be formatted by isort.\"\n    isort $target\n  else\n    echo \"$res_isort\"\n    echo \"isort failed.\"\n    res_all=1\n  fi\nelse\n  echo \"isort succeeded.\"\nfi\n\nres_mypy=$(mypy $mypy_target)\nif [ $? -eq 1 ] ; then\n  echo \"$res_mypy\"\n  echo \"mypy failed.\"\n  res_all=1\nelse\n  echo \"mypy succeeded.\"\nfi\n\nif [ $res_all -eq 1 ] ; then\n  exit 1\nfi\n"
        },
        {
          "name": "optuna",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 5.0517578125,
          "content": "[build-system]\nrequires = [\"setuptools >= 61.1.0\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"optuna\"\ndescription = \"A hyperparameter optimization framework\"\nreadme = \"README.md\"\nauthors = [\n  {name = \"Takuya Akiba\"}\n]\nclassifiers = [\n  \"Development Status :: 5 - Production/Stable\",\n  \"Intended Audience :: Science/Research\",\n  \"Intended Audience :: Developers\",\n  \"License :: OSI Approved :: MIT License\",\n  \"Programming Language :: Python :: 3\",\n  \"Programming Language :: Python :: 3.8\",\n  \"Programming Language :: Python :: 3.9\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n  \"Programming Language :: Python :: 3.12\",\n  \"Programming Language :: Python :: 3.13\",\n  \"Programming Language :: Python :: 3 :: Only\",\n  \"Topic :: Scientific/Engineering\",\n  \"Topic :: Scientific/Engineering :: Mathematics\",\n  \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n  \"Topic :: Software Development\",\n  \"Topic :: Software Development :: Libraries\",\n  \"Topic :: Software Development :: Libraries :: Python Modules\",\n]\nrequires-python = \">=3.8\"\ndependencies = [\n  \"alembic>=1.5.0\",\n  \"colorlog\",\n  \"numpy\",\n  \"packaging>=20.0\",\n  \"sqlalchemy>=1.4.2\",\n  \"tqdm\",\n  \"PyYAML\",  # Only used in `optuna/cli.py`.\n]\ndynamic = [\"version\"]\n\n[project.optional-dependencies]\nbenchmark = [\n  \"asv>=0.5.0\",\n  \"cma\",\n  \"virtualenv\"\n]\nchecking = [\n  \"black\",\n  \"blackdoc\",\n  \"flake8\",\n  \"isort\",\n  \"mypy\",\n  \"mypy_boto3_s3\",\n  \"types-PyYAML\",\n  \"types-redis\",\n  \"types-setuptools\",\n  \"types-tqdm\",\n  \"typing_extensions>=3.10.0.0\",\n]\ndocument = [\n  \"ase\",\n  \"cmaes>=0.10.0\",  # optuna/samplers/_cmaes.py.\n  \"fvcore\",\n  \"kaleido<0.4\",  # TODO(nzw0301): Remove the version constraint by installing browser separately.\n  \"lightgbm\",\n  \"matplotlib!=3.6.0\",\n  \"pandas\",\n  \"pillow\",\n  \"plotly>=4.9.0\",  # optuna/visualization.\n  \"scikit-learn\",\n  \"sphinx\",\n  \"sphinx-copybutton\",\n  \"sphinx-gallery\",\n  \"sphinx-notfound-page\",\n  \"sphinx_rtd_theme>=1.2.0\",\n  \"torch\",\n  \"torchvision\",\n]\noptional = [\n  \"boto3\",  # optuna/artifacts/_boto3.py.\n  \"cmaes>=0.10.0\",  # optuna/samplers/_cmaes.py.\n  \"google-cloud-storage\",  # optuna/artifacts/_gcs.py.\n  \"matplotlib!=3.6.0\",  # optuna/visualization/matplotlib.\n  \"pandas\",  # optuna/study.py.\n  \"plotly>=4.9.0\",  # optuna/visualization.\n  \"redis\",  # optuna/storages/redis.py.\n  \"scikit-learn>=0.24.2\",\n  # optuna/visualization/param_importances.py.\n  \"scipy\",  # optuna/samplers/_gp\n  \"torch; python_version<='3.12'\", # TODO(gen740): Remove this line when 'torch', a dependency of 'optuna/_gp', supports Python 3.13\n  \"grpcio\",  # optuna/storages/_grpc.\n  \"protobuf>=5.28.1\",  # optuna/storages/_grpc.\n]\ntest = [\n  \"coverage\",\n  \"fakeredis[lua]\",\n  \"kaleido<0.4\",  # TODO(nzw0301): Remove the version constraint by installing browser separately.\n  \"moto\",\n  \"pytest\",\n  \"scipy>=1.9.2\",\n  \"torch; python_version<='3.12'\", # TODO(gen740): Remove this line when 'torch', a dependency of 'optuna/_gp', supports Python 3.13\n  \"grpcio\",  # optuna/storages/_grpc.\n  \"protobuf>=5.28.1\",  # optuna/storages/_grpc.\n]\n\n[project.urls]\nhomepage = \"https://optuna.org/\"\nrepository = \"https://github.com/optuna/optuna\"\ndocumentation = \"https://optuna.readthedocs.io\"\nbugtracker = \"https://github.com/optuna/optuna/issues\"\n\n[project.scripts]\noptuna = \"optuna.cli:main\"\n\n[tool.setuptools.packages.find]\ninclude = [\"optuna*\"]\n\n[tool.setuptools.dynamic]\nversion = {attr = \"optuna.version.__version__\"}\n\n[tool.setuptools.package-data]\n\"optuna\" = [\n  \"storages/_rdb/alembic.ini\",\n  \"storages/_rdb/alembic/*.*\",\n  \"storages/_rdb/alembic/versions/*.*\",\n  \"py.typed\",\n]\n\n[tool.black]\nline-length = 99\ntarget-version = ['py38']\nforce-exclude = '''\n/(\n  \\.eggs\n  | \\.git\n  | \\.hg\n  | \\.mypy_cache\n  | \\.venv\n  | venv\n  | _build\n  | buck-out\n  | build\n  | dist\n  | docs\n  | optuna/storages/_grpc/auto_generated\n)/\n'''\n\n[tool.isort]\nprofile = 'black'\nsrc_paths = ['optuna', 'tests', 'docs', 'benchmarks']\nskip_glob = [\n  'docs/source/conf.py',\n  '**/alembic/versions/*.py',\n  'tutorial/**/*.py',\n  'docs/visualization_examples/*.py',\n  'docs/visualization_matplotlib_examples/*.py',\n  'optuna/storages/_grpc/auto_generated/*.py'\n]\nline_length = 99\nlines_after_imports = 2\nforce_single_line = 'True'\nforce_sort_within_sections = 'True'\norder_by_type = 'False'\n\n[tool.pytest.ini_options]\naddopts = \"--color=yes\"\nfilterwarnings = 'ignore::optuna.exceptions.ExperimentalWarning'\nmarkers = [\n  \"skip_coverage: marks tests are skipped when calculating the coverage\",\n  \"slow: marks tests as slow (deselect with '-m \\\"not slow\\\"')\",\n]\n\n[tool.mypy]\n# Options configure mypy's strict mode.\nwarn_unused_configs = true\ndisallow_untyped_calls = true\ndisallow_untyped_defs = true\ndisallow_incomplete_defs = true\ncheck_untyped_defs = true\nno_implicit_optional = true\nwarn_redundant_casts = true\nstrict_equality = true\nextra_checks = true\nno_implicit_reexport = true\n\nignore_missing_imports = true\nexclude = [\".venv\", \"venv\", \"build\", \"docs\", \"tutorial\", \"optuna/storages/_rdb/alembic\", \"optuna/storages/_grpc/auto_generated\"]\n\n[[tool.mypy.overrides]]\nmodule = 'optuna.storages._grpc.auto_generated/*'\nfollow_imports = \"skip\"\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.2548828125,
          "content": "# This section is for flake8.\n[flake8]\nignore =\n    E203,\n    E704,\n    W503\nmax-line-length = 99\nstatistics = True\nexclude = .venv,venv,build,tutorial,.asv,docs/visualization_examples,docs/visualization_matplotlib_examples,optuna/storages/_grpc/auto_generated\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tutorial",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}