{
  "metadata": {
    "timestamp": 1736561349414,
    "page": 378,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gleitz/howdoi",
      "stars": 10644,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.0576171875,
          "content": "[flake8]\nmax-line-length = 119\nignore = E9,F63,F7,F82,E402\n"
        },
        {
          "name": ".flake8rc",
          "type": "blob",
          "size": 0.0576171875,
          "content": "[flake8]\nmax-line-length = 119\nignore = E9,F63,F7,F82,E402\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.091796875,
          "content": "cache_html/* linguist-vendored\n*.html linguist-language=Python\n*.ipynb linguist-documentation\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.7041015625,
          "content": "\n# Created by https://www.gitignore.io/api/python,osx,windows,linux,pycharm\n\n### Python ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n.idea/\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nsite/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask instance folder\ninstance/\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# IPython Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n\n\n### OSX ###\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n\n### Windows ###\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n\n\n### Linux ###\n*~\n\n# temporary files which can be created if a process still has a handle open of a deleted file\n.fuse_hidden*\n\n# KDE directory preferences\n.directory\n\n# Linux trash folder which might appear on any partition or disk\n.Trash-*\n\n\n### PyCharm ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and Webstorm\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff:\n.idea/workspace.xml\n.idea/tasks.xml\n.idea/dictionaries\n.idea/vcs.xml\n.idea/jsLibraryMappings.xml\n.vscode\n\n# Sensitive or high-churn files:\n.idea/dataSources.ids\n.idea/dataSources.xml\n.idea/sqlDataSources.xml\n.idea/dynamic.xml\n.idea/uiDesigner.xml\n\n# Gradle:\n.idea/gradle.xml\n.idea/libraries\n\n# Mongo Explorer plugin:\n.idea/mongoSettings.xml\n\n## File-based project format:\n*.iws\n\n## Plugin-specific files:\n\n# IntelliJ\n/out/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n### Miscellany ###\n.ropeproject\nREADME.html\n.idea\nHOW_TO_RELEASE.txt\n.mypy_cache/"
        },
        {
          "name": ".mypy.ini",
          "type": "blob",
          "size": 0.03515625,
          "content": "[mypy]\nignore_missing_imports = True"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.28515625,
          "content": "repos:\n  - repo: https://github.com/pycqa/flake8\n    rev: 3.9.2\n    hooks:\n      - id: flake8\n        args:\n          - \"--config=.flake8rc\"\n\n  - repo: https://github.com/PyCQA/pylint/\n    rev: v2.15.10\n    hooks:\n      - id: pylint\n        args:\n          - \"howdoi *.py --rcfile=.pylintrc\"\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 14.267578125,
          "content": "[MASTER]\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code.\nextension-pkg-whitelist=\n\n# Add files or directories to the blacklist. They should be base names, not\n# paths.\nignore=CVS\n\n# Add files or directories matching the regex patterns to the blacklist. The\n# regex matches against base names, not paths.\nignore-patterns=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the\n# number of processors available to use.\njobs=1\n\n# Control the amount of potential inferred values when inferring a single\n# object. This can help the performance when dealing with large functions or\n# complex, nested conditions.\nlimit-inference-results=100\n\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# Specify a configuration file.\n#rcfile=\n\n# When enabled, pylint would attempt to guess common misconfiguration and emit\n# user-friendly hints instead of false-positive error messages.\nsuggestion-mode=yes\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=no\n\n\n[MESSAGES CONTROL]\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED.\nconfidence=\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once). You can also use \"--disable=all\" to\n# disable everything first and then reenable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use \"--disable=all --enable=classes\n# --disable=W\".\ndisable=C0413,C0111,C0115,C0116\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once). See also the \"--disable\" option for examples.\nenable=c-extension-no-member\n\n\n[REPORTS]\n\n# Python expression which should return a note less than 10 (10 is the highest\n# note). You have access to the variables errors warning, statement which\n# respectively contain the number of errors / warnings messages and the total\n# number of statements analyzed. This is used by the global evaluation report\n# (RP0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details.\n#msg-template=\n\n# Set the output format. Available formats are text, parseable, colorized, json\n# and msvs (visual studio). You can also give a reporter class, e.g.\n# mypackage.mymodule.MyReporterClass.\noutput-format=text\n\n# Tells whether to display a full report or only the messages.\nreports=no\n\n# Activate the evaluation score.\nscore=yes\n\n\n[REFACTORING]\n\n# Maximum number of nested blocks for function / method body\nmax-nested-blocks=5\n\n# Complete name of functions that never returns. When checking for\n# inconsistent-return-statements if a never returning function is called then\n# it will be considered as an explicit return statement and no message will be\n# printed.\nnever-returning-functions=sys.exit\n\n\n[LOGGING]\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format.\nlogging-modules=logging\n\n\n[SPELLING]\n\n# Limits count of emitted suggestions for spelling mistakes.\nmax-spelling-suggestions=4\n\n# Spelling dictionary name. Available dictionaries: none. To make it working\n# install python-enchant package..\nspelling-dict=\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# A path to a file that contains private dictionary; one word per line.\nspelling-private-dict-file=\n\n# Tells whether to store unknown words to indicated private dictionary in\n# --spelling-private-dict-file option instead of raising a message.\nspelling-store-unknown-words=no\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,\n      XXX,\n      TODO\n\n\n[TYPECHECK]\n\n# List of decorators that produce context managers, such as\n# contextlib.contextmanager. Add to this list to register other decorators that\n# produce valid context managers.\ncontextmanager-decorators=contextlib.contextmanager\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# Tells whether to warn about missing members when the owner of the attribute\n# is inferred to be None.\nignore-none=yes\n\n# This flag controls whether pylint should warn about no-member and similar\n# checks whenever an opaque object is returned when inferring. The inference\n# can return multiple potential results while evaluating a Python object, but\n# some branches might not be evaluated, which results in partial inference. In\n# that case, it might be useful to still emit no-member and other checks for\n# the rest of the inferred objects.\nignore-on-opaque-inference=yes\n\n# List of class names for which member attributes should not be checked (useful\n# for classes with dynamically set attributes). This supports the use of\n# qualified names.\nignored-classes=optparse.Values,thread._local,_thread._local\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis. It\n# supports qualified module names, as well as Unix pattern matching.\nignored-modules=\n\n# Show a hint with possible names when a member name was not found. The aspect\n# of finding the hint is based on edit distance.\nmissing-member-hint=yes\n\n# The minimum edit distance a name should have in order to be considered a\n# similar match for a missing member name.\nmissing-member-hint-distance=1\n\n# The total number of similar names that should be taken in consideration when\n# showing a hint for a missing member.\nmissing-member-max-choices=1\n\n\n[VARIABLES]\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid to define new builtins when possible.\nadditional-builtins=\n\n# Tells whether unused global variables should be treated as a violation.\nallow-global-unused-variables=yes\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,\n          _cb\n\n# A regular expression matching the name of dummy variables (i.e. expected to\n# not be used).\ndummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_\n\n# Argument names that match this expression will be ignored. Default to name\n# with leading underscore.\nignored-argument-names=_.*|^ignored_|^unused_\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# List of qualified module names which can have objects that can redefine\n# builtins.\nredefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io\n\n\n[FORMAT]\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n\n# Number of spaces of indent required inside a hanging  or continued line.\nindent-after-paren=4\n\n# String used as indentation unit. This is usually \"    \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n# Maximum number of characters on a single line.\nmax-line-length=119\n\n# Maximum number of lines in a module.\nmax-module-lines=1000\n\n# Allow the body of a class to be on the same line as the declaration if body\n# contains single statement.\nsingle-line-class-stmt=no\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=no\n\n\n[SIMILARITIES]\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=no\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n\n[BASIC]\n\n# Naming style matching correct argument names.\nargument-naming-style=snake_case\n\n# Regular expression matching correct argument names. Overrides argument-\n# naming-style.\n#argument-rgx=\n\n# Naming style matching correct attribute names.\nattr-naming-style=snake_case\n\n# Regular expression matching correct attribute names. Overrides attr-naming-\n# style.\n#attr-rgx=\n\n# Bad variable names which should always be refused, separated by a comma.\nbad-names=foo,\n          bar,\n          baz,\n          toto,\n          tutu,\n          tata\n\n# Naming style matching correct class attribute names.\nclass-attribute-naming-style=any\n\n# Regular expression matching correct class attribute names. Overrides class-\n# attribute-naming-style.\n#class-attribute-rgx=\n\n# Naming style matching correct class names.\nclass-naming-style=PascalCase\n\n# Regular expression matching correct class names. Overrides class-naming-\n# style.\n#class-rgx=\n\n# Naming style matching correct constant names.\nconst-naming-style=UPPER_CASE\n\n# Regular expression matching correct constant names. Overrides const-naming-\n# style.\n#const-rgx=\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=-1\n\n# Naming style matching correct function names.\nfunction-naming-style=snake_case\n\n# Regular expression matching correct function names. Overrides function-\n# naming-style.\n#function-rgx=\n\n# Good variable names which should always be accepted, separated by a comma.\ngood-names=i,\n           j,\n           k,\n           ex,\n           Run,\n           _,\n           f\n\n# Include a hint for the correct naming format with invalid-name.\ninclude-naming-hint=no\n\n# Naming style matching correct inline iteration names.\ninlinevar-naming-style=any\n\n# Regular expression matching correct inline iteration names. Overrides\n# inlinevar-naming-style.\n#inlinevar-rgx=\n\n# Naming style matching correct method names.\nmethod-naming-style=snake_case\n\n# Regular expression matching correct method names. Overrides method-naming-\n# style.\n#method-rgx=\n\n# Naming style matching correct module names.\nmodule-naming-style=snake_case\n\n# Regular expression matching correct module names. Overrides module-naming-\n# style.\n#module-rgx=\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=^_\n\n# List of decorators that produce properties, such as abc.abstractproperty. Add\n# to this list to register other decorators that produce valid properties.\n# These decorators are taken in consideration only for invalid-name.\nproperty-classes=abc.abstractproperty\n\n# Naming style matching correct variable names.\nvariable-naming-style=snake_case\n\n# Regular expression matching correct variable names. Overrides variable-\n# naming-style.\n#variable-rgx=\n\n\n[IMPORTS]\n\n# Allow wildcard imports from modules that define __all__.\nallow-wildcard-with-all=no\n\n# Analyse import fallback blocks. This can be used to support both Python 2 and\n# 3 compatible code, which means that the block might have code that exists\n# only in one or another interpreter, leading to false positives when analysed.\nanalyse-fallback-blocks=no\n\n# Deprecated modules which should not be used, separated by a comma.\ndeprecated-modules=optparse,tkinter.tix\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled).\next-import-graph=\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled).\nimport-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled).\nint-import-graph=\n\n# Force import order to recognize a module as part of the standard\n# compatibility libraries.\nknown-standard-library=\n\n# Force import order to recognize a module as part of a third party library.\nknown-third-party=enchant\n\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,\n                      __new__,\n                      setUp\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,\n                  _fields,\n                  _replace,\n                  _source,\n                  _make\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=cls\n\n\n[DESIGN]\n\n# Maximum number of arguments for function / method.\nmax-args=5\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=7\n\n# Maximum number of boolean expressions in an if statement.\nmax-bool-expr=5\n\n# Maximum number of branch for function / method body.\nmax-branches=12\n\n# Maximum number of locals for function / method body.\nmax-locals=15\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n# Maximum number of return / yield for function / method body.\nmax-returns=6\n\n# Maximum number of statements in function / method body.\nmax-statements=50\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when being caught. Defaults to\n# \"Exception\".\novergeneral-exceptions=Exception\n"
        },
        {
          "name": "CHANGES.txt",
          "type": "blob",
          "size": 4.376953125,
          "content": "2.0.20\n------\n-  Update dependency versions\n-  Add support for Python 3.10\n\n2.0.19\n------\n-  Fix typo\n\n2.0.18\n------\n-  Fixed issue with howdoi cache where cache misses would be printed to the console\n\n2.0.17\n------\n-  New documentation and mkdocs\n-  Fixed issue with how howdoi chooses the proper search engine (command line flags now override environment variables)\n-  Added a search engine fallback if one of the search engines fails\n-  Fixed issue with howdoi cache\n\n2.0.16\n------\n-  Fix GDPR issue for those using howdoi in countries outside the US\n-  Better support for using `HOWDOI_URL`\n\n2.0.15\n------\n-  Add explainability with `-x` or `--explain` options\n-  Better error checking for when search engines block queries\n-  Using improved DuckDuckGo endpoint\n-  Answer pages now fetched in parallel for speed improvement\n\n2.0.14\n------\n-  Fix a number of bugs by switching from parsing Google links to looking for URLs instead\n\n2.0.13\n------\n-  More permanent fix for extracting Google links\n\n2.0.12\n------\n-  Hotfix for Google link formatting\n\n2.0.11\n------\n-  Hotfix for Google link formatting\n\n2.0.10\n------\n-  Hotfix for new Google classnames\n-  Separate requirements.txt files for prod and dev\n\n2.0.9\n------\n-  Cleaner command line options that also include environment variables\n-  README updates\n\n2.0.8\n------\n-  Fix issue for answers that have no code in the answer but code in the comments\n-  Add range checks for -n and -p flags\n-  Moved from Travis to Github Actions\n-  Dropped Python 2.7 support\n\n2.0.7\n------\n-  Update for new Google CSS style\n\n2.0.6\n------\n-  Fix issue where `-a` would not return a proper response due to updated CSS on StackOverflow\n\n2.0.5\n------\n-  New logo and colors!\n\n2.0.4\n------\n-  Cachelib rollback to support Python 2.7\n-  Better error message when Google is being blocked (for example in China)\n\n2.0.3\n------\n-  Bring back Python 2.7 support (for now)\n\n2.0.2\n------\n-  Fixed keep support for stashing and viewing answers\n\n2.0.1\n------\n-  Added JSON output with the -j flag (great for consuming howdoi results for use in other apps)\n-  Added stashing ability for saving useful answer for later (based on https://github.com/OrkoHunter/keep)\n-  Added caching for tests to prevent being rate limited by Google while developing\n-  Added easier method for calling howdoi when imported (howdoi.howdoi)\n\n1.2.1\n------\n-  Fix dependency issue\n\n1.2.0\n------\n-  Massive speed improvements of startup, answer fetching, and caching\n-  Command line flags for alternate search engines\n-  Remove duplicate answers\n\n1.1.14\n------\n-  Links displayed with markdown syntax\n-  Improved performance and caching (again)\n\n1.1.13\n------\n-  Improved performance and caching\n-  More friendly answer display\n-  Added support for Python 3.6\n-  Removed support for Python 2.6\n\n1.1.12\n------\n-  Add additional search engine support\n\n1.1.11\n------\n-  Fix issue with UTF-8 encoding\n\n1.1.10\n------\n-  Include the link in output when asking for >1 answer\n-  Compatibility with linuxbrew\n\n1.1.9\n------\n-  Fix issue with upload to PyPI\n\n1.1.8\n------\n-  Fix colorization when HOWDOI_COLORIZE env variable is enabled\n-  Fix certificate validation when SSL disabled\n\n1.1.7\n------\n-  Add Localization support with HOWDOI_LOCALIZATION env variable (Currently only pt-br and en)\n\n1.1.6\n------\n-  Updates for Python3\n-  Updates for caching\n\n1.1.5\n------\n-  Updates for Python3\n-  Fix issues with cache\n-  Allow disabling SSL when accessing Google\n\n1.1.4\n------\n-  Added caching\n\n1.1.3\n------\n-  Added fix to handle change in Google search page HTML\n-  Updated Travis CI tests\n\n1.1.2\n------\n-  Compatibility fixes for Python3.2\n-  Travis CI tests now being run for Python 2.6, 2.7, 3.2, and 3.3\n\n1.1.1\n------\n-  Added message when question has no answer\n\n1.1\n------\n-  Added multiple answers with -n/--num-answers flag\n-  Added colorized output with -c/--color flag\n-  Added answer link to the bottom of questions with -a/--all flag\n-  Unit tests now managed through Travis CI\n\n1.0\n------\n-  Added support for Python3\n-  Switched to the requests library instead of urllib2\n-  Project status changed to Production/Stable\n-  Added troubleshooting steps to the README\n\n0.2\n------\n-  Added sane flags\n-  Now using ``/usr/bin/env python`` instead of ``/usr/bin/python``\n-  Updated README for brew installation instructions\n\n0.1.2\n------\n-  Added Windows executable\n-  Updated README for pip installation instructions\n\n0.1.1\n------\n-  Added to PyPI\n\n0.1\n------\n-  We're doing it live!\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0537109375,
          "content": "Copyright (C) 2012 Benjamin Gleitzman (gleitz@mit.edu)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1923828125,
          "content": "include LICENSE.txt\ninclude README.md\ninclude CHANGES.txt\ninclude fastentrypoints.py\ninclude requirements.txt\ninclude test_howdoi.py\nexclude howdoi.rb\nexclude .*rc\nprune page_cache\nprune notebooks\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.2734375,
          "content": "<p align=\"center\">\n    <a href=\"https://pypi.python.org/pypi/howdoi\">\n        <img src=\"https://www.dropbox.com/s/dk13iy2uoufdwr7/HowDoIcolor512.png?raw=1\" alt=\"Sherlock, your neighborhood command-line sloth sleuth\" />\n    </a>\n</p>\n<h1 align=\"center\">howdoi</h1>\n<h2 align=\"center\">Instant coding answers via the command line</h2>\n<p align=\"center\"><strong>⚡ Never open your browser to look for help again ⚡</strong></p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/gleitz/howdoi/actions?query=workflow%3A%22Python+CI%22\"><img src=\"https://img.shields.io/github/actions/workflow/status/gleitz/howdoi/python.yml?style=plastic&color=78dce8\" alt=\"build status\"></a>\n    <a href=\"https://pepy.tech/project/howdoi\"><img src=\"https://img.shields.io/pypi/dm/howdoi?style=plastic&color=ab9df2&maxAge=86400&label=downloads&query=%24.total_downloads&url=https%3A%2F%2Fapi.pepy.tech%2Fapi%2Fprojects%2Fhowdoi\" alt=\"downloads\"></a>\n    <a href=\"https://pypi.python.org/pypi/howdoi\"><img src=\"https://img.shields.io/pypi/pyversions/howdoi.svg?style=plastic&color=ff6188\" alt=\"Python versions\"></a>\n</p>\n\n------------------------------------------------------------------------\n\n## Introduction to howdoi\n\nAre you a hack programmer? Do you find yourself constantly Googling for\nhow to do basic programming tasks?\n\nSuppose you want to know how to format a date in bash. Why open your\nbrowser and read through blogs (risking major distraction) when you can\nsimply stay in the console and ask howdoi:\n\n    $ howdoi format date bash\n    > DATE=`date +%Y-%m-%d`\n\nhowdoi will answer all sorts of queries:\n\n    $ howdoi print stack trace python\n    > import traceback\n    >\n    > try:\n    >     1/0\n    > except:\n    >     print '>>> traceback <<<'\n    >     traceback.print_exc()\n    >     print '>>> end of traceback <<<'\n    > traceback.print_exc()\n\n    $ howdoi convert mp4 to animated gif\n    > video=/path/to/video.avi\n    > outdir=/path/to/output.gif\n    > mplayer \"$video\" \\\n    >         -ao null \\\n    >         -ss \"00:01:00\" \\  # starting point\n    >         -endpos 10 \\ # duration in second\n    >         -vo gif89a:fps=13:output=$outdir \\\n    >         -vf scale=240:180\n\n    $ howdoi create tar archive\n    > tar -cf backup.tar --exclude \"www/subf3\" www\n\n[![image](http://imgs.xkcd.com/comics/tar.png)](https://xkcd.com/1168/)\n\n## Installation\n\n    pip install howdoi\n\nor\n\n    brew install howdoi\n\n## Usage\n\n### New to howdoi?\n\n    howdoi howdoi\n\n### RTFM\n\n-   [Introduction and\n    installation](http://gleitz.github.io/howdoi/introduction/)\n-   [Usage](http://gleitz.github.io/howdoi/usage/)\n-   [Contributing to\n    howdoi](http://gleitz.github.io/howdoi/contributing_to_howdoi/)\n-   [Advanced\n    usage](http://gleitz.github.io/howdoi/howdoi_advanced_usage/)\n-   [Troubleshooting](http://gleitz.github.io/howdoi/troubleshooting/)\n\n### Commands\n\n    usage: howdoi [-h] [-p POS] [-n NUM] [-a] [-l] [-c] [-x] [-C] [-j] [-v] [-e [ENGINE]]\n    [--save] [--view] [--remove] [--empty] [QUERY ...]\n\n    instant coding answers via the command line\n\n    positional arguments:\n      QUERY                 the question to answer\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -p POS, --pos POS     select answer in specified position (default: 1)\n      -n NUM, --num NUM     number of answers to return (default: 1)\n      -a, --all             display the full text of the answer\n      -l, --link            display only the answer link\n      -c, --color           enable colorized output\n      -x, --explain         explain how answer was chosen\n      -C, --clear-cache     clear the cache\n      -j, --json            return answers in raw json format\n      -v, --version         display the current version of howdoi\n      -e [ENGINE], --engine [ENGINE]\n                            search engine for this query (google, bing, duckduckgo)\n      --save, --stash       stash a howdoi answer\n      --view                view your stash\n      --remove              remove an entry in your stash\n      --empty               empty your stash\n\n    environment variable examples:\n      HOWDOI_COLORIZE=1\n      HOWDOI_DISABLE_CACHE=1\n      HOWDOI_DISABLE_SSL=1\n      HOWDOI_SEARCH_ENGINE=google\n      HOWDOI_URL=serverfault.com\n\nUsing the howdoi stashing feature (for more advanced features view the\n[keep documentation](https://github.com/OrkoHunter/keep)).\n\n    stashing: howdoi --save QUERY\n    viewing:  howdoi --view\n    removing: howdoi --remove (will be prompted which answer to delete)\n    emptying: howdoi --empty (empties entire stash, will be prompted to confirm)\n\nAs a shortcut, if you commonly use the same parameters each time and\ndon\\'t want to type them, add something similar to your .bash_profile\n(or otherwise). This example gives you 5 colored results each time.\n\n    alias h='function hdi(){ howdoi $* -c -n 5; }; hdi'\n\nAnd then to run it from the command line simply type:\n\n    $ h format date bash\n\nYou can also search other [StackExchange\nproperties](https://stackexchange.com/sites#traffic) for answers:\n\n    HOWDOI_URL=cooking.stackexchange.com howdoi make pesto\n\nor as an alias:\n\n    alias hcook='function hcook(){ HOWDOI_URL=cooking.stackexchange.com howdoi $* ; }; hcook'\n    hcook make pesto\n\nOther useful aliases:\n\n    alias hless='function hdi(){ howdoi $* -c | less --raw-control-chars --quit-if-one-screen --no-init; }; hdi'\n\n## Integrations\n\n-   Slack integration available through\n    [slack-howdoi](https://github.com/ellisonleao/slack-howdoi)\n-   Telegram integration available through\n    [howdoi-telegram](https://github.com/aahnik/howdoi-telegram)\n-   Discord integration available through\n    [discord-howdoi](https://github.com/MLH-Fellowship/0.5.1-howDoIDiscord)\n-   Emacs integration available through\n    [emacs-howdoi](https://blog.gleitzman.com/post/700738401851277312/howdoi-use-howdoi-in-emacs)\n-   VSCode integration available on the\n    [marketplace](https://marketplace.visualstudio.com/items?itemName=howdoi-org.howdoi)\n-   Alfred integration available through\n    [alfred-howdoi](https://github.com/gleitz/alfred-howdoi)\n\n## Contributors\n\n-   Benjamin Gleitzman ([\\@gleitz](http://twitter.com/gleitz))\n-   Yanlam Ko ([\\@YKo20010](https://github.com/YKo20010))\n-   Diana Arreola ([\\@diarreola](https://github.com/diarreola))\n-   Eyitayo Ogunbiyi ([\\@tayoogunbiyi](https://github.com/tayoogunbiyi))\n-   Chris Nguyen ([\\@chrisngyn](https://github.com/chrisngyn))\n-   Shageldi Ovezov ([\\@ovezovs](https://github.com/chrisngyn))\n-   Mwiza Simbeye\n    ([\\@mwizasimbeye11](https://github.com/mwizasimbeye11))\n-   Shantanu Verma ([\\@SaurusXI](https://github.com/SaurusXI))\n-   Sheza Munir ([\\@ShezaMunir](https://github.com/ShezaMunir))\n-   Jyoti Bisht ([\\@joeyouss](https://github.com/joeyouss))\n-   And [more!](https://github.com/gleitz/howdoi/graphs/contributors)\n\n## How to contribute\n\nWe welcome contributions that make howdoi better and improve the\nexisting functionalities of the project. We have created a separate\n[guide to contributing to\nhowdoi](http://gleitz.github.io/howdoi/contributing_to_howdoi/) that explains\nhow to get up and running with your first pull request.\n\n## Notes\n\n-   Works with Python 3.7 and newer. Unfortunately Python 2.7 support\n    has been discontinued :(\n-   Special thanks to Rich Jones\n    ([\\@miserlou](https://github.com/miserlou)) for the idea\n-   More thanks to [Ben Bronstein](https://benbronstein.com/) for the\n    logo\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "extension",
          "type": "tree",
          "content": null
        },
        {
          "name": "fastentrypoints.py",
          "type": "blob",
          "size": 3.9443359375,
          "content": "# flake8: noqa\n# pylint: skip-file\n\n# Copyright (c) 2016, Aaron Christianson\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are\n# met:\n#\n# 1. Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n#\n# 2. Redistributions in binary form must reproduce the above copyright\n#    notice, this list of conditions and the following disclaimer in the\n#    documentation and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n# IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n'''\nMonkey patch setuptools to write faster console_scripts with this format:\n\n    import sys\n    from mymodule import entry_function\n    sys.exit(entry_function())\n\nThis is better.\n\n(c) 2016, Aaron Christianson\nhttp://github.com/ninjaaron/fast-entry_points\n'''\nfrom setuptools.command import easy_install\nimport re\nTEMPLATE = r'''\n# -*- coding: utf-8 -*-\n# EASY-INSTALL-ENTRY-SCRIPT: '{3}','{4}','{5}'\n__requires__ = '{3}'\nimport re\nimport sys\n\nfrom {0} import {1}\n\nif __name__ == '__main__':\n    sys.argv[0] = re.sub(r'(-script\\.pyw?|\\.exe)?$', '', sys.argv[0])\n    sys.exit({2}())'''.lstrip()\n\n\n@classmethod\ndef get_args(cls, dist, header=None):  # noqa: D205,D400\n    \"\"\"\n    Yield write_script() argument tuples for a distribution's\n    console_scripts and gui_scripts entry points.\n    \"\"\"\n    if header is None:\n        # pylint: disable=E1101\n        header = cls.get_header()\n    spec = str(dist.as_requirement())\n    for type_ in 'console', 'gui':\n        group = type_ + '_scripts'\n        for name, ep in dist.get_entry_map(group).items():\n            # ensure_safe_name\n            if re.search(r'[\\\\/]', name):\n                raise ValueError(\"Path separators not allowed in script names\")\n            script_text = TEMPLATE.format(\n                ep.module_name, ep.attrs[0], '.'.join(ep.attrs),\n                spec, group, name)\n            # pylint: disable=E1101\n            args = cls._get_script_args(type_, name, header, script_text)\n            for res in args:\n                yield res\n\n\n# pylint: disable=E1101\neasy_install.ScriptWriter.get_args = get_args\n\n\ndef main():\n    import os\n    import re\n    import shutil\n    import sys\n    dests = sys.argv[1:] or ['.']\n    filename = re.sub(r'\\.pyc$', '.py', __file__)\n\n    for dst in dests:\n        shutil.copy(filename, dst)\n        manifest_path = os.path.join(dst, 'MANIFEST.in')\n        setup_path = os.path.join(dst, 'setup.py')\n\n        # Insert the include statement to MANIFEST.in if not present\n        with open(manifest_path, 'a+') as manifest:\n            manifest.seek(0)\n            manifest_content = manifest.read()\n            if 'include fastentrypoints.py' not in manifest_content:\n                manifest.write(('\\n' if manifest_content else '') + 'include fastentrypoints.py')\n\n        # Insert the import statement to setup.py if not present\n        with open(setup_path, 'a+') as setup:\n            setup.seek(0)\n            setup_content = setup.read()\n            if 'import fastentrypoints' not in setup_content:\n                setup.seek(0)\n                setup.truncate()\n                setup.write('import fastentrypoints\\n' + setup_content)\n"
        },
        {
          "name": "howdoi",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 1.103515625,
          "content": "site_name: howdoi\n\ntheme:\n  name: \"material\"\n  palette:\n    primary: \"\"\n    accent: \"teal\"\n  icon:\n    repo: fontawesome/brands/github\n\nrepo_name: gleitz/howdoi\nrepo_url: https://github.com/gleitz/howdoi\nedit_uri: \"\"\n\nnav:\n  - howdoi: index.md\n  - Introduction: introduction.md\n  - Usage: usage.md\n  - Setting up development environment: development_env.md\n  - Contributing: contributing_to_howdoi.md\n  - Contributing documentation: contributing_docs.md\n  - Extension development: extension_dev.md\n  - Howdoi advanced usage: howdoi_advanced_usage.md\n  - Troubleshooting: troubleshooting.md\n  - Development for Windows: windows-contributing.md\n\nmarkdown_extensions:\n  - toc:\n      permalink: true\n  - markdown.extensions.codehilite:\n      guess_lang: false\n  - admonition\n  - codehilite\n  - extra\n  - pymdownx.snippets:\n      base_path: docs\n  - pymdownx.superfences:\n      custom_fences:\n        - name: mermaid\n          class: mermaid\n          format: !!python/name:pymdownx.superfences.fence_div_format\n  - pymdownx.tabbed\n\nextra:\n  social:\n    - icon: fontawesome/brands/github\n      link: \"https://github.com/gleitz/howdoi\"\n"
        },
        {
          "name": "notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "page_cache",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.095703125,
          "content": "# when adding a new dependency, also add to setup.py's `install_requires`\n-r requirements/prod.txt"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.0556640625,
          "content": "#!/usr/bin/env python\n\nimport glob\nimport subprocess\nfrom pathlib import Path\nfrom distutils.cmd import Command  # pylint: disable=deprecated-module\nfrom setuptools import setup, find_packages\n# pylint: disable=unused-import\nimport fastentrypoints  # noqa: F401\n# pylint: enable=unused-import\nimport howdoi\n\n\nclass Lint(Command):\n    \"\"\"A custom command to run Flake8 on all Python source files.\n    \"\"\"\n    description = 'run Flake8 on Python source files'\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        local_python_files_str = ' '.join(glob.glob('*.py'))\n        commands = {'Flake8': 'flake8 --config=.flake8rc .'.split(),\n                    'Pylint': f'pylint howdoi {local_python_files_str} --rcfile=.pylintrc'.split()}\n\n        for linter, command in commands.items():\n            try:\n                print(f'\\nRunning {linter}...')\n                subprocess.check_call(command)\n                print(f'No lint errors found by {linter}')\n            except FileNotFoundError:\n                print(f'{linter} not installed')\n            except subprocess.CalledProcessError:\n                pass\n\n\ndef read(*names):\n    values = {}\n    for name in names:\n        value = ''\n        for extension in ('.txt', '.md'):\n            filename = name + extension\n            if Path(filename).is_file():\n                with open(filename, encoding='utf-8') as in_file:\n                    value = in_file.read()\n                break\n        values[name] = value\n    return values\n\n\n# pylint: disable=consider-using-f-string\nlong_description = \"\"\"\n%(README)s\n\n# News\n\n%(CHANGES)s\n\n\"\"\" % read('README', 'CHANGES')\n# pylint: enable=consider-using-f-string\n\n\nsetup(\n    name='howdoi',\n    version=howdoi.__version__,\n    description='Instant coding answers via the command line',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Topic :: Documentation\",\n    ],\n    keywords='howdoi help console command line answer',\n    author='Benjamin Gleitzman',\n    author_email='gleitz@mit.edu',\n    maintainer='Benjamin Gleitzman',\n    maintainer_email='gleitz@mit.edu',\n    url='https://github.com/gleitz/howdoi',\n    license='MIT',\n    packages=find_packages(),\n    entry_points={\n        'console_scripts': [\n            'howdoi = howdoi.howdoi:command_line_runner',\n        ]\n    },\n    install_requires=[\n        'Pygments',\n        'cssselect',\n        'lxml',\n        'pyquery',\n        'requests',\n        'cachelib',\n        'appdirs',\n        'keep',\n        'rich',\n        'colorama'\n    ],\n    cmdclass={\n        'lint': Lint\n    }\n)\n"
        },
        {
          "name": "test_howdoi.py",
          "type": "blob",
          "size": 16.056640625,
          "content": "#!/usr/bin/env python\n\n\"\"\"Tests for Howdoi.\"\"\"\nimport gzip\nimport json\nimport os\nimport re\nimport unittest\n\nfrom pathlib import Path\nfrom unittest.mock import patch\nimport requests\n\nfrom cachelib import NullCache\nfrom pyquery import PyQuery as pq\n\n# pylint: disable=no-name-in-module\nfrom howdoi import howdoi\n\n\n# pylint: disable=protected-access\noriginal_get_result = howdoi._get_result\n\n\ndef _format_url_to_filename(url, file_ext='html'):\n    filename = ''.join(ch for ch in url if ch.isalnum())\n    return filename + '.' + file_ext\n\n\ndef _get_result_mock(url):\n    # pylint: disable=protected-access\n    file_name = _format_url_to_filename(url, 'html.gz')\n    # pylint: disable=no-member\n    file_path = Path.joinpath(Path(howdoi.HTML_CACHE_PATH), Path(file_name)).resolve()\n    try:\n        with gzip.open(file_path, 'rb') as f:\n            cached_page_content = str(f.read(), encoding='utf-8')\n            return cached_page_content\n\n    except FileNotFoundError:\n        page_content = original_get_result(url)\n        with gzip.open(file_path, 'wb') as f:\n            f.write(bytes(page_content, encoding='utf-8'))\n            return page_content\n\n\n# pylint: disable=protected-access\nclass HowdoiTestCase(unittest.TestCase):  # pylint: disable=too-many-public-methods\n\n    def setUp(self):\n        self.patcher_get_result = patch.object(howdoi, '_get_result')\n        self.mock_get_result = self.patcher_get_result.start()\n        self.mock_get_result.side_effect = _get_result_mock\n        # ensure no cache is used during testing.\n        howdoi.cache = NullCache()\n\n        self.queries = ['format date bash',\n                        'print stack trace python',\n                        'convert mp4 to animated gif',\n                        'create tar archive',\n                        'cat']\n        self.help_queries = howdoi.SUPPORTED_HELP_QUERIES\n        self.pt_queries = ['abrir arquivo em python',\n                           'enviar email em django',\n                           'hello world em c']\n        self.bad_queries = ['moe',\n                            'mel']\n        self.query_without_code_or_pre_block = 'Difference between element node and Text Node'\n\n    def tearDown(self):\n        self.patcher_get_result.stop()\n        keys_to_remove = ['HOWDOI_URL', 'HOWDOI_SEARCH_ENGINE']\n        for key in keys_to_remove:\n            if key in os.environ:\n                del os.environ[key]\n        howdoi.BLOCKED_ENGINES = []\n\n    def _negative_number_query(self):\n        query = self.queries[0]\n        howdoi.howdoi(query + ' -n -1')\n\n    def _high_positive_number_query(self):\n        query = self.queries[0]\n        howdoi.howdoi(query + ' -n 21')\n\n    def _negative_position_query(self):\n        query = self.queries[0]\n        howdoi.howdoi(query + ' -p -2')\n\n    def _high_positive_position_query(self):\n        query = self.queries[0]\n        howdoi.howdoi(query + ' -p 40')\n\n    def assertValidResponse(self, res):  # pylint: disable=invalid-name\n        self.assertTrue(len(res) > 0)\n\n    def test_get_link_at_pos(self):\n        self.assertEqual(howdoi.get_link_at_pos(['/questions/42/'], 1),\n                         '/questions/42/')\n        self.assertEqual(howdoi.get_link_at_pos(['/questions/42/'], 2),\n                         '/questions/42/')\n        self.assertEqual(howdoi.get_link_at_pos(['/howdoi', '/questions/42/'], 1),\n                         '/howdoi')\n        self.assertEqual(howdoi.get_link_at_pos(['/howdoi', '/questions/42/'], 2),\n                         '/questions/42/')\n        self.assertEqual(howdoi.get_link_at_pos(['/questions/42/', '/questions/142/'], 1),\n                         '/questions/42/')\n\n    @patch.object(howdoi, '_get_result')\n    def test_blockerror(self, mock_get_links):\n        mock_get_links.side_effect = requests.HTTPError\n        query = self.queries[0]\n        response = howdoi.howdoi(query)\n        self.assertEqual(response, \"ERROR: \\x1b[91mUnable to get a response from any search engine\\n\\x1b[0m\")\n\n    def test_answers(self):\n        for query in self.queries:\n            self.assertValidResponse(howdoi.howdoi(query))\n        for query in self.bad_queries:\n            self.assertValidResponse(howdoi.howdoi(query))\n\n        os.environ['HOWDOI_URL'] = 'pt.stackoverflow.com'\n        for query in self.pt_queries:\n            self.assertValidResponse(howdoi.howdoi(query))\n\n    def test_answers_bing(self):\n        os.environ['HOWDOI_SEARCH_ENGINE'] = 'bing'\n        for query in self.queries:\n            self.assertValidResponse(howdoi.howdoi(query))\n        for query in self.bad_queries:\n            self.assertValidResponse(howdoi.howdoi(query))\n\n        os.environ['HOWDOI_URL'] = 'pt.stackoverflow.com'\n        for query in self.pt_queries:\n            self.assertValidResponse(howdoi.howdoi(query))\n\n        os.environ['HOWDOI_SEARCH_ENGINE'] = ''\n\n    # commenting out duckduckgo test, re-enable when issue #404 (duckduckgo blocking requests) is resolved\n\n    # def test_answers_duckduckgo(self):\n    #     os.environ['HOWDOI_SEARCH_ENGINE'] = 'duckduckgo'\n    #     for query in self.queries:\n    #         self.assertValidResponse(howdoi.howdoi(query))\n    #     for query in self.bad_queries:\n    #         self.assertValidResponse(howdoi.howdoi(query))\n\n    #     os.environ['HOWDOI_URL'] = 'pt.stackoverflow.com'\n    #     for query in self.pt_queries:\n    #         self.assertValidResponse(howdoi.howdoi(query))\n\n    #     os.environ['HOWDOI_SEARCH_ENGINE'] = ''\n\n    def test_answer_links_using_l_option(self):\n        for query in self.queries:\n            response = howdoi.howdoi(query + ' -l')\n            self.assertNotEqual(re.match(r'http.?://.*questions/\\d.*', response, re.DOTALL), None)\n\n    def test_answer_links_using_all_option(self):\n        for query in self.queries:\n            response = howdoi.howdoi(query + ' -a')\n            self.assertNotEqual(re.match(r'.*http.?://.*questions/\\d.*', response, re.DOTALL), None)\n\n    def test_position(self):\n        query = self.queries[0]\n        first_answer = howdoi.howdoi(query)\n        not_first_answer = howdoi.howdoi(query + ' -p5')\n        self.assertNotEqual(first_answer, not_first_answer)\n\n    def test_all_text(self):\n        query = self.queries[0]\n        first_answer = howdoi.howdoi(query)\n        second_answer = howdoi.howdoi(query + ' -a')\n        self.assertNotEqual(first_answer, second_answer)\n        self.assertNotEqual(re.match('.*Answer from http.?://.*', second_answer, re.DOTALL), None)\n\n    def test_json_output(self):\n        query = self.queries[0]\n        txt_answer = howdoi.howdoi(query)\n        json_answer = howdoi.howdoi(query + ' -j')\n        link_answer = howdoi.howdoi(query + ' -l')\n        json_answer = json.loads(json_answer)[0]\n        self.assertEqual(json_answer[\"answer\"], txt_answer)\n        self.assertEqual(json_answer[\"link\"], link_answer)\n        self.assertEqual(json_answer[\"position\"], 1)\n\n    def test_multiple_answers(self):\n        query = self.queries[0]\n        first_answer = howdoi.howdoi(query)\n        second_answer = howdoi.howdoi(query + ' -n3')\n        self.assertNotEqual(first_answer, second_answer)\n\n    def test_unicode_answer(self):\n        assert howdoi.howdoi('make a log scale d3')\n        assert howdoi.howdoi('python unittest -n3')\n        assert howdoi.howdoi('parse html regex -a')\n        assert howdoi.howdoi('delete remote git branch -a')\n\n    def test_colorize(self):\n        query = self.queries[0]\n        normal = howdoi.howdoi(query)\n        colorized = howdoi.howdoi('-c ' + query)\n\n        # There is currently an issue with Github actions and colorization\n        # so do not run checks if we are running in Github\n        if \"GITHUB_ACTION\" not in os.environ:\n            self.assertTrue(normal.find('[38;') == -1)\n            self.assertTrue(colorized.find('[38;') != -1)\n\n    # pylint: disable=line-too-long\n    def test_get_text_without_links(self):\n        html = '''\\n  <p>The halting problem is basically a\\n  formal way of asking if you can tell\\n  whether or not an arbitrary program\\n  will eventually halt.</p>\\n  \\n  <p>In other words, can you write a\\n  program called a halting oracle,\\n  HaltingOracle(program, input), which\\n  returns true if program(input) would\\n  eventually halt, and which returns\\n  false if it wouldn't?</p>\\n  \\n  <p>The answer is: no, you can't.</p>\\n'''  # noqa: E501\n        paragraph = pq(html)\n        expected_output = '''The halting problem is basically a\\n  formal way of asking if you can tell\\n  whether or not an arbitrary program\\n  will eventually halt.\\n\\n  \\n  \\nIn other words, can you write a\\n  program called a halting oracle,\\n  HaltingOracle(program, input), which\\n  returns true if program(input) would\\n  eventually halt, and which returns\\n  false if it wouldn't?\\n\\n  \\n  \\nThe answer is: no, you can't.\\n\\n'''  # noqa: E501\n        actual_output = howdoi.get_text(paragraph)\n        self.assertEqual(actual_output, expected_output)\n\n    def test_get_text_with_one_link(self):\n        html = '<p>It\\'s a <a href=\"http://paulirish.com/2010/the-protocol-relative-url/\">protocol-relative URL</a> (typically HTTP or HTTPS). So if I\\'m on <code>http://example.org</code> and I link (or include an image, script, etc.) to <code>//example.com/1.png</code>, it goes to <code>http://example.com/1.png</code>. If I\\'m on <code>https://example.org</code>, it goes to <code>https://example.com/1.png</code>.</p>'  # noqa: E501\n        paragraph = pq(html)\n        expected_output = \"It's a [protocol-relative URL](http://paulirish.com/2010/the-protocol-relative-url/) (typically HTTP or HTTPS). So if I'm on http://example.org and I link (or include an image, script, etc.) to //example.com/1.png, it goes to http://example.com/1.png. If I'm on https://example.org, it goes to https://example.com/1.png.\"  # noqa: E501\n        actual_output = howdoi.get_text(paragraph)\n        self.assertEqual(actual_output, expected_output)\n\n    def test_get_text_with_multiple_links_test_one(self):\n        html = 'Here\\'s a quote from <a href=\"http://en.wikipedia.org/wiki/Wikipedia:Manual_of_Style#Links\" rel=\"nofollow noreferrer\">wikipedia\\'s manual of style</a> section on links (but see also <a href=\"http://en.wikipedia.org/wiki/Wikipedia:External_links\" rel=\"nofollow noreferrer\">their comprehensive page on External Links</a>)'  # noqa: E501\n        paragraph = pq(html)\n        expected_output = \"Here's a quote from [wikipedia's manual of style](http://en.wikipedia.org/wiki/Wikipedia:Manual_of_Style#Links) section on links (but see also [their comprehensive page on External Links](http://en.wikipedia.org/wiki/Wikipedia:External_links))\"  # noqa: E501\n        actual_output = howdoi.get_text(paragraph)\n        self.assertEqual(actual_output, expected_output)\n\n    def test_get_text_with_multiple_links_test_two(self):\n        html = 'For example, if I were to reference <a href=\"http://www.apple.com/\" rel=\"nofollow noreferrer\">apple.com</a> as the subject of a sentence - or to talk about <a href=\"http://www.apple.com/\" rel=\"nofollow noreferrer\">Apple\\'s website</a> as the topic of conversation. This being different to perhaps recommendations for reading <a href=\"https://ux.stackexchange.com/q/14872/6046\">our article about Apple\\'s website</a>.'  # noqa: E501\n        paragraph = pq(html)\n        expected_output = \"For example, if I were to reference [apple.com](http://www.apple.com/) as the subject of a sentence - or to talk about [Apple's website](http://www.apple.com/) as the topic of conversation. This being different to perhaps recommendations for reading [our article about Apple's website](https://ux.stackexchange.com/q/14872/6046).\"  # noqa: E501\n        actual_output = howdoi.get_text(paragraph)\n        self.assertEqual(actual_output, expected_output)\n\n    def test_get_text_with_link_but_with_copy_duplicating_the_href(self):\n        html = '<a href=\"https://github.com/jquery/jquery/blob/56136897f241db22560b58c3518578ca1453d5c7/src/manipulation.js#L451\" rel=\"nofollow noreferrer\">https://github.com/jquery/jquery/blob/56136897f241db22560b58c3518578ca1453d5c7/src/manipulation.js#L451</a>'  # noqa: E501\n        paragraph = pq(html)\n        expected_output = 'https://github.com/jquery/jquery/blob/56136897f241db22560b58c3518578ca1453d5c7/src/manipulation.js#L451'  # noqa: E501\n        actual_output = howdoi.get_text(paragraph)\n        self.assertEqual(actual_output, expected_output)\n\n    def test_get_text_with_a_link_but_copy_is_within_nested_div(self):\n        html = 'If the function is from a source file available on the filesystem, then <a href=\"https://docs.python.org/3/library/inspect.html#inspect.getsource\" rel=\"noreferrer\"><code>inspect.getsource(foo)</code></a> might be of help:'  # noqa: E501\n        paragraph = pq(html)\n        expected_output = 'If the function is from a source file available on the filesystem, then [inspect.getsource(foo)](https://docs.python.org/3/library/inspect.html#inspect.getsource) might be of help:'  # noqa: E501\n        actual_output = howdoi.get_text(paragraph)\n        self.assertEqual(actual_output, expected_output)\n    # pylint: enable=line-too-long\n\n    def test_get_questions(self):\n        links = ['https://stackoverflow.com/questions/tagged/cat',\n                 'http://rads.stackoverflow.com/amzn/click/B007KAZ166',\n                 'https://stackoverflow.com/questions/40108569/how-to-get-the-last-line-of-a-file-using-cat-command']\n        expected_output = [\n            'https://stackoverflow.com/questions/40108569/how-to-get-the-last-line-of-a-file-using-cat-command']\n        actual_output = howdoi._get_questions(links)\n        self.assertSequenceEqual(actual_output, expected_output)\n\n    def test_help_queries(self):\n        help_queries = self.help_queries\n\n        for query in help_queries:\n            output = howdoi.howdoi(query)\n            self.assertTrue(output)\n            self.assertIn('few popular howdoi commands', output)\n            self.assertIn('retrieve n number of answers', output)\n            self.assertIn(\n                'Specify the search engine you want to use e.g google,bing',\n                output\n            )\n\n    def test_missing_pre_or_code_query(self):\n        output = howdoi.howdoi(self.query_without_code_or_pre_block)\n        self.assertTrue(output)\n\n    def test_format_url_to_filename(self):\n        url = 'https://stackoverflow.com/questions/tagged/cat'\n        invalid_filename_characters = ['/', '\\\\', '%']\n        filename = _format_url_to_filename(url, 'html')\n        self.assertTrue(filename)\n        self.assertTrue(filename.endswith('html'))\n        for invalid_character in invalid_filename_characters:\n            self.assertNotIn(invalid_character, filename)\n\n    def test_help_queries_are_properly_validated(self):\n        help_queries = self.help_queries\n        for query in help_queries:\n            is_valid_help_query = howdoi._is_help_query(query)\n            self.assertTrue(is_valid_help_query)\n        bad_help_queries = [self.queries[0],\n                            self.bad_queries[0], 'use how do i']\n\n        for query in bad_help_queries:\n            self.assertFalse(howdoi._is_help_query(query))\n\n    def test_negative_and_high_positive_int_values_rejected(self):\n        with self.assertRaises(SystemExit):\n            self._negative_number_query()\n        with self.assertRaises(SystemExit):\n            self._negative_position_query()\n        with self.assertRaises(SystemExit):\n            self._high_positive_position_query()\n        with self.assertRaises(SystemExit):\n            self._high_positive_number_query()\n\n\nclass HowdoiTestCaseEnvProxies(unittest.TestCase):\n\n    def setUp(self):\n        self.temp_get_proxies = howdoi.getproxies\n\n    def tearDown(self):\n        howdoi.getproxies = self.temp_get_proxies\n\n    def test_get_proxies1(self):\n        def getproxies1():\n            proxies = {'http': 'wwwproxy.company.com',\n                       'https': 'wwwproxy.company.com',\n                       'ftp': 'ftpproxy.company.com'}\n            return proxies\n\n        howdoi.getproxies = getproxies1\n        filtered_proxies = howdoi.get_proxies()\n        self.assertTrue('http://' in filtered_proxies['http'])\n        self.assertTrue('http://' in filtered_proxies['https'])\n        self.assertTrue('ftp' not in filtered_proxies.keys())  # pylint: disable=consider-iterating-dictionary\n\n\nif __name__ == '__main__':\n    unittest.main()\n"
        }
      ]
    }
  ]
}