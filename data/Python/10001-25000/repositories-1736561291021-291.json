{
  "metadata": {
    "timestamp": 1736561291021,
    "page": 291,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pytest-dev/pytest",
      "stars": 12310,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.6474609375,
          "content": "[run]\ninclude =\n  src/*\n  testing/*\n  */lib/python*/site-packages/_pytest/*\n  */lib/python*/site-packages/pytest.py\n  */pypy*/site-packages/_pytest/*\n  */pypy*/site-packages/pytest.py\n  *\\Lib\\site-packages\\_pytest\\*\n  *\\Lib\\site-packages\\pytest.py\nparallel = 1\nbranch = 1\n\n[paths]\nsource = src/\n  */lib/python*/site-packages/\n  */pypy*/site-packages/\n  *\\Lib\\site-packages\\\n\n[report]\nskip_covered = True\nshow_missing = True\nexclude_lines =\n    \\#\\s*pragma: no cover\n    ^\\s*raise NotImplementedError\\b\n    ^\\s*return NotImplemented\\b\n    ^\\s*assert False(,|$)\n    ^\\s*assert_never\\(\n\n    ^\\s*if TYPE_CHECKING:\n    ^\\s*@overload( |$)\n\n    ^\\s*@pytest\\.mark\\.xfail\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 1.2685546875,
          "content": "# List of revisions that can be ignored with git-blame(1).\n#\n# See `blame.ignoreRevsFile` in git-config(1) to enable it by default, or\n# use it with `--ignore-revs-file` manually with git-blame.\n#\n# To \"install\" it:\n#\n#   git config --local blame.ignoreRevsFile .git-blame-ignore-revs\n\n# run black\n703e4b11ba76171eccd3f13e723c47b810ded7ef\n# switched to src layout\neaa882f3d5340956beb176aa1753e07e3f3f2190\n# pre-commit run pyupgrade --all-files\na91fe1feddbded535a4322ab854429e3a3961fb4\n# move node base classes from main to nodes\nafc607cfd81458d4e4f3b1f3cf8cc931b933907e\n# [?] split most fixture related code into own plugin\n8c49561470708761f7321504f5e8343811be87ac\n# run pyupgrade\n9aacb4635e81edd6ecf281d4f6c0cfc8e94ab301\n# run blacken-docs\n5f95dce95602921a70bfbc7d8de2f7712c5e4505\n# ran pyupgrade-docs again\n75d0b899bbb56d6849e9d69d83a9426ed3f43f8b\n# move argument parser to own file\nc9df77cbd6a365dcb73c39618e4842711817e871\n# Replace reorder-python-imports by isort due to black incompatibility (#11896)\n8b54596639f41dfac070030ef20394b9001fe63c\n# Run blacken-docs with black's 2024's style\n4546d5445aaefe6a03957db028c263521dfb5c4b\n# Migration to ruff / ruff format\n4588653b2497ed25976b7aaff225b889fb476756\n# Use format specifiers instead of percent format\n4788165e69d08e10fc6b9c0124083fb358e2e9b0\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0205078125,
          "content": "*.bat  text eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7021484375,
          "content": "# Automatically generated by `hgimportsvn`\n.svn\n.hgsvn\n\n# Ignore local virtualenvs\nlib/\nbin/\ninclude/\n.Python/\n\n# These lines are suggested according to the svn:ignore property\n# Feel free to enable them by uncommenting them\n*.pyc\n*.pyo\n*.swp\n*.class\n*.orig\n*~\n.hypothesis/\n\n# autogenerated\nsrc/_pytest/_version.py\n# setuptools\n.eggs/\n\ndoc/*/_build\ndoc/*/.doctrees\nbuild/\ndist/\n*.egg-info\nhtmlcov/\nissue/\nenv/\n.env/\n.venv/\n/pythonenv*/\n3rdparty/\n.tox\n.cache\n.pytest_cache\n.mypy_cache\n.coverage\n.coverage.*\ncoverage.xml\n.ropeproject\n.idea\n.hypothesis\n.pydevproject\n.project\n.settings\n.vscode\n__pycache__/\n.python-version\n\n# generated by pip\npip-wheel-metadata/\n\n# pytest debug logs generated via --debug\npytestdebug.log\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 4.1279296875,
          "content": "repos:\n- repo: https://github.com/astral-sh/ruff-pre-commit\n  rev: \"v0.8.3\"\n  hooks:\n    - id: ruff\n      args: [\"--fix\"]\n    - id: ruff-format\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: check-yaml\n- repo: https://github.com/woodruffw/zizmor-pre-commit\n  rev: v0.9.2\n  hooks:\n    - id: zizmor\n-   repo: https://github.com/adamchainz/blacken-docs\n    rev: 1.19.1\n    hooks:\n    -   id: blacken-docs\n        additional_dependencies: [black==24.1.1]\n-   repo: https://github.com/codespell-project/codespell\n    rev: v2.3.0\n    hooks:\n    -   id: codespell\n        args: [\"--toml=pyproject.toml\"]\n        additional_dependencies:\n          - tomli\n-   repo: https://github.com/pre-commit/pygrep-hooks\n    rev: v1.10.0\n    hooks:\n    -   id: python-use-type-annotations\n-   repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.13.0\n    hooks:\n    -   id: mypy\n        files: ^(src/|testing/|scripts/)\n        additional_dependencies:\n          - iniconfig>=1.1.0\n          - attrs>=19.2.0\n          - pluggy>=1.5.0\n          - packaging\n          - tomli\n          - types-setuptools\n          - types-tabulate\n            # for mypy running on python>=3.11 since exceptiongroup is only a dependency\n            # on <3.11\n          - exceptiongroup>=1.0.0rc8\n- repo: https://github.com/tox-dev/pyproject-fmt\n  rev: \"v2.5.0\"\n  hooks:\n    - id: pyproject-fmt\n      # https://pyproject-fmt.readthedocs.io/en/latest/#calculating-max-supported-python-version\n      additional_dependencies: [\"tox>=4.9\"]\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v3.19.0\n    hooks:\n    -   id: pyupgrade\n        args:\n          - \"--py39-plus\"\n        # Manual because ruff does what pyupgrade does and the two are not out of sync\n        # often enough to make launching pyupgrade everytime worth it\n        stages: [manual]\n-   repo: local\n    hooks:\n    -   id: pylint\n        name: pylint\n        entry: pylint\n        language: system\n        types: [python]\n        args: [\"-rn\", \"-sn\", \"--fail-on=I\", \"--enable-all-extentions\"]\n        require_serial: true\n        stages: [manual]\n    -   id: rst\n        name: rst\n        entry: rst-lint --encoding utf-8\n        files: ^(RELEASING.rst|README.rst|TIDELIFT.rst)$\n        language: python\n        additional_dependencies: [pygments, restructuredtext_lint]\n    -   id: changelogs-rst\n        name: changelog filenames\n        language: fail\n        entry: >-\n          changelog files must be named\n          ####.(\n          breaking\n          | deprecation\n          | feature\n          | improvement\n          | bugfix\n          | vendor\n          | doc\n          | packaging\n          | contrib\n          | misc\n          )(.#)?(.rst)?\n        exclude: >-\n          (?x)\n          ^\n            changelog/(\n              \\.gitignore\n              |\\d+\\.(\n                breaking\n                |deprecation\n                |feature\n                |improvement\n                |bugfix\n                |vendor\n                |doc\n                |packaging\n                |contrib\n                |misc\n              )(\\.\\d+)?(\\.rst)?\n              |README\\.rst\n              |_template\\.rst\n            )\n          $\n        files: ^changelog/\n    -   id: changelogs-user-role\n        name: Changelog files should use a non-broken :user:`name` role\n        language: pygrep\n        entry: :user:([^`]+`?|`[^`]+[\\s,])\n        pass_filenames: true\n        types:\n          - file\n          - rst\n    -   id: py-deprecated\n        name: py library is deprecated\n        language: pygrep\n        entry: >\n            (?x)\\bpy\\.(\n                _code\\.|\n                builtin\\.|\n                code\\.|\n                io\\.|\n                path\\.local\\.sysfind|\n                process\\.|\n                std\\.|\n                error\\.|\n                xml\\.\n            )\n        types: [python]\n    -   id: py-path-deprecated\n        name: py.path usage is deprecated\n        exclude: docs|src/_pytest/deprecated.py|testing/deprecated_test.py|src/_pytest/legacypath.py\n        language: pygrep\n        entry: \\bpy\\.path\\.local\n        types: [python]\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.58984375,
          "content": "version: 2\n\npython:\n   install:\n     # Install pytest first, then doc/en/requirements.txt.\n     # This order is important to honor any pins in doc/en/requirements.txt\n     # when the pinned library is also a dependency of pytest.\n     - method: pip\n       path: .\n     - requirements: doc/en/requirements.txt\n\nsphinx:\n  configuration: doc/en/conf.py\n  fail_on_warning: true\n\nbuild:\n  os: ubuntu-24.04\n  tools:\n    python: >-\n      3.12\n  apt_packages:\n    - inkscape\n  jobs:\n    post_checkout:\n      - git fetch --unshallow || true\n      - git fetch --tags || true\n\nformats:\n  - epub\n  - pdf\n  - htmlzip\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 7.015625,
          "content": "Holger Krekel, holger at merlinux eu\nmerlinux GmbH, Germany, office at merlinux eu\n\nContributors include::\n\nAaron Coleman\nAbdeali JK\nAbdelrahman Elbehery\nAbhijeet Kasurde\nAdam Johnson\nAdam Stewart\nAdam Uhlir\nAhn Ki-Wook\nAkhilesh Ramakrishnan\nAkiomi Kamakura\nAlan Velasco\nAlessio Izzo\nAlex Jones\nAlex Lambson\nAlexander Johnson\nAlexander King\nAlexei Kozlenok\nAlice Purcell\nAllan Feldman\nAly Sivji\nAmir Elkess\nAnatoly Bubenkoff\nAnders Hovm√∂ller\nAndras Mitzki\nAndras Tim\nAndrea Cimatoribus\nAndreas Motl\nAndreas Zeidler\nAndrew Shapton\nAndrey Paramonov\nAndrzej Klajnert\nAndrzej Ostrowski\nAndy Freeland\nAnita Hammer\nAnthon van der Neut\nAnthony Shaw\nAnthony Sottile\nAnton Grinevich\nAnton Lodder\nAntony Lee\nArel Cordero\nArias Emmanuel\nAriel Pillemer\nArmin Rigo\nAron Coyle\nAron Curzon\nArthur Richard\nAshish Kurmi\nAshley Whetter\nAviral Verma\nAviv Palivoda\nBabak Keyvani\nBarney Gale\nBen Brown\nBen Gartner\nBen Leith\nBen Webb\nBenjamin Peterson\nBenjamin Schubert\nBernard Pratz\nBo Wu\nBob Ippolito\nBrian Dorsey\nBrian Larsen\nBrian Maissy\nBrian Okken\nBrianna Laugher\nBruno Oliveira\nCal Jacobson\nCal Leeming\nCarl Friedrich Bolz\nCarlos Jenkins\nCeridwen\nCharles Cloud\nCharles Machalow\nCharnjit SiNGH (CCSJ)\nCheuk Ting Ho\nChris Mahoney\nChris Lamb\nChris NeJame\nChris Rose\nChris Wheeler\nChristian Boelsen\nChristian Clauss\nChristian Fetzer\nChristian Neum√ºller\nChristian Theunert\nChristian Tismer\nChristine Mecklenborg\nChristoph Buelter\nChristopher Dignam\nChristopher Gilling\nChristopher Head\nClaire Cecil\nClaudio Madotto\nCl√©ment M.T. Robert\nCornelius Riemenschneider\nCrazyMerlyn\nCristian Vera\nCyrus Maden\nDaara Shaw\nDamian Skrzypczak\nDaniel Grana\nDaniel Hahler\nDaniel Miller\nDaniel Nuri\nDaniel S√°nchez Castell√≥\nDaniel Valenzuela Zenteno\nDaniel Wandschneider\nDaniele Procida\nDanielle Jenkins\nDaniil Galiev\nDave Hunt\nDavid D√≠az-Barquero\nDavid Mohr\nDavid Paul R√∂thlisberger\nDavid Peled\nDavid Szotten\nDavid Vierra\nDaw-Ran Liou\nDebi Mishra\nDenis Kirisov\nDenivy Braiam R√ºck\nDheeraj C K\nDhiren Serai\nDiego Russo\nDmitry Dygalo\nDmitry Pribysh\nDominic Mortlock\nDuncan Betts\nEdison Gustavo Muenz\nEdoardo Batini\nEdson Tadeu M. Manoel\nEduardo Schettino\nEdward Haigh\nEero Vaher\nEli Boyarski\nElizaveta Shashkova\n√âloi Rivard\nEndre Galaczi\nEric Hunsberger\nEric Liu\nEric Siegerman\nEric Yuan\nErik Aronesty\nErik Hasse\nErik M. Bray\nEthan Wass\nEvan Kepner\nEvgeny Seliverstov\nFabian Sturm\nFabien Zarifian\nFabio Zadrozny\nFarbod Ahmadian\nfaph\nFelix Hofst√§tter\nFelix Nieuwenhuizen\nFeng Ma\nFlorian Bruhin\nFlorian Dahlitz\nFloris Bruynooghe\nFrank Hoffmann\nFraser Stark\nGabriel Landau\nGabriel Reis\nGarvit Shubham\nGene Wood\nGeorge Kussumoto\nGeorgy Dyuldin\nGergely Kalm√°r\nGleb Nikonorov\nGraeme Smecher\nGraham Horler\nGreg Price\nGregory Lee\nGrig Gheorghiu\nGrigorii Eremeev (budulianin)\nGuido Wesdorp\nGuoqiang Zhang\nHarald Armin Massa\nHarshna\nHenk-Jaap Wagenaar\nHolger Kohr\nHugo van Kemenade\nHui Wang (coldnight)\nIan Bicking\nIan Lesperance\nIlya Konstantinov\nIonu»õ TurturicƒÉ\nIsaac Virshup\nIsrael Fruchter\nItxaso Aizpurua\nIwan Briquemont\nJaap Broekhuizen\nJake VanderPlas\nJakob van Santen\nJakub Mitoraj\nJames Bourbeau\nJames Frost\nJan Balster\nJanne Vanhala\nJason R. Coombs\nJavier Domingo Cansino\nJavier Romero\nJeff Rackauckas\nJeff Widman\nJenni Rinker\nJens Tr√∂ger\nJiajun Xu\nJohn Eddie Ayson\nJohn Litborn\nJohn Towler\nJon Parise\nJon Sonesen\nJonas Obrist\nJordan Guymon\nJordan Moldow\nJordan Speicher\nJoseph Hunkeler\nJoseph Sawaya\nJosh Karpel\nJoshua Bronson\nJulian Valentin\nJurko Gospodnetiƒá\nJustice Ndou\nJustyna Janczyszyn\nKale Kundert\nKamran Ahmad\nKenny Y\nKarl O. Pinc\nKarthikeyan Singaravelan\nKatarzyna Jachim\nKatarzyna Kr√≥l\nKaterina Koukiou\nKeri Volans\nKevin C\nKevin Cox\nKevin Hierro Carrasco\nKevin J. Foley\nKian Eliasi\nKian-Meng Ang\nKodi B. Arfer\nKojo Idrissa\nKostis Anagnostopoulos\nKristoffer Nordstr√∂m\nKyle Altendorf\nLawrence Mitchell\nLee Kamentsky\nLeonardus Chen\nLev Maximov\nLevon Saldamli\nLewis Cowles\nLlandy Riveron Del Risco\nLoic Esteve\nlovetheguitar\nLukas Bednar\nLuke Murphy\nMaciek Fijalkowski\nMaho\nMaik Figura\nMandeep Bhutani\nManuel Krebber\nMarc Mueller\nMarc Schlaich\nMarcelo Duarte Trevisani\nMarcin Bachry\nMarc Bresson\nMarco Gorelli\nMark Abramowitz\nMark Dickinson\nMark Vong\nMarko Pacak\nMarkus Unterwaditzer\nMartijn Faassen\nMartin Altmayer\nMartin K. Scherer\nMartin Prusse\nMathieu Clabaut\nMatt Bachmann\nMatt Duck\nMatt Williams\nMatthias Hafner\nMaxim Filipenko\nMaximilian Cosmo Sitter\nmbyt\nMichael Aquilina\nMichael Birtwell\nMichael Droettboom\nMichael Goerz\nMichael Krebs\nMichael Seifert\nMichael Vogt\nMichal Wajszczuk\nMicha≈Ç G√≥rny\nMicha≈Ç Ziƒôba\nMickey Pashov\nMihai CapotƒÉ\nMihail Milushev\nMike Hoyle (hoylemd)\nMike Lundy\nMilan Lesnek\nMiro Hronƒçok\nmrbean-bremen\nNathan Goldbaum\nNathan Rousseau\nNathaniel Compton\nNathaniel Waisbrot\nNauman Ahmed\nNed Batchelder\nNeil Martin\nNeven Mundar\nNicholas Devenish\nNicholas Murphy\nNiclas Olofsson\nNicolas Delaby\nNicolas Simonds\nNico Vidal\nNikolay Kondratyev\nNipunn Koorapati\nOleg Pidsadnyi\nOleg Sushchenko\nOlga Matoula\nOliver Bestwalter\nOmar Kohl\nOmer Hadari\nOnd≈ôej S√∫kup\nOscar Benjamin\nParth Patel\nPatrick Hayes\nPatrick Lannigan\nPaul M√ºller\nPaul Reece\nPauli Virtanen\nPavel Karateev\nPavel Zhukov\nPawe≈Ç Adamczak\nPedro Algarvio\nPetter Strandmark\nPhilipp Loose\nPierre Sassoulas\nPieter Mulder\nPiotr Banaszkiewicz\nPiotr Helm\nPoulami Sau\nPrakhar Gurunani\nPrashant Anand\nPrashant Sharma\nPulkit Goyal\nPunyashloka Biswal\nQuentin Pradet\nq0w\nRalf Schmitt\nRalph Giles\nRam Rachum\nRan Benita\nRaphael Castaneda\nRaphael Pierzina\nRafal Semik\nReza Mousavi\nRaquel Alegre\nRavi Chandra\nReagan Lee\nRob Arrow\nRobert Holt\nRoberto Aldera\nRoberto Polli\nRoland Puntaier\nRomain Dorgueil\nRoman Bolshakov\nRonny Pfannschmidt\nRoss Lawley\nRuaridh Williamson\nRussel Winder\nRussell Martin\nRyan Puddephatt\nRyan Wooden\nSadra Barikbin\nSaiprasad Kale\nSamuel Colvin\nSamuel Dion-Girardeau\nSamuel Jirovec\nSamuel Searles-Bryant\nSamuel Therrien (Avasam)\nSamuele Pedroni\nSanket Duthade\nSankt Petersbug\nSaravanan Padmanaban\nSean Malloy\nSegev Finer\nSerhii Mozghovyi\nSeth Junot\nShantanu Jain\nSharad Nair\nShaygan Hooshyari\nShubham Adep\nSimon Blanchard\nSimon Gomizelj\nSimon Holesch\nSimon Kerr\nSkylar Downes\nSrinivas Reddy Thatiparthy\nStefaan Lippens\nStefan Farmbauer\nStefan Scherfke\nStefan Zimmermann\nStefanie Molin\nStefano Taschini\nSteffen Allner\nStephan Obermann\nSven\nSven-Hendrik Haase\nSviatoslav Sydorenko\nSylvain Mari√©\nTadek Tele≈ºy≈Ñski\nTakafumi Arakaki\nTakumi Otani\nTaneli Hukkinen\nTanvi Mehta\nTanya Agarwal\nTarcisio Fischer\nTareq Alayan\nTatiana Ovary\nTed Xiao\nTerje Runde\nThomas Grainger\nThomas Hisch\nTianyu Dongfang\nTim Hoffmann\nTim Strazny\nTJ Bruno\nTobias Diez\nTom Dalton\nTom Viner\nTom√°≈° Gavenƒçiak\nTomer Keren\nTony Narlock\nTor Colvin\nTrevor Bekolay\nTushar Sadhwani\nTyler Goodlet\nTyler Smart\nTzu-ping Chung\nVasily Kuznetsov\nVictor Maryama\nVictor Rodriguez\nVictor Uriarte\nVidar T. Fauske\nVijay Arora\nVirendra Patil\nVirgil Dupras\nVitaly Lashmanov\nVivaan Verma\nVlad Dragos\nVlad Radziuk\nVladyslav Rachek\nVolodymyr Kochetkov\nVolodymyr Piskun\nWei Lin\nWil Cooley\nWilliam Lee\nWim Glenn\nWouter van Ackooy\nXixi Zhao\nXuan Luong\nXuecong Liao\nYannick P√©roux\nYao Xiao\nYoav Caspi\nYuliang Shao\nYusuke Kadowaki\nYutian Li\nYuval Shimon\nZac Hatfield-Dodds\nZach Snicker\nZachary Kneupper\nZachary OBrien\nZhouxin Qiu\nZolt√°n M√°t√©\nZsolt Cserna\n"
        },
        {
          "name": "CHANGELOG.rst",
          "type": "blob",
          "size": 0.224609375,
          "content": "=========\nChangelog\n=========\n\nThe pytest CHANGELOG is located `here <https://docs.pytest.org/en/stable/changelog.html>`__.\n\nThe source document can be found at: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst\n"
        },
        {
          "name": "CITATION",
          "type": "blob",
          "size": 0.4638671875,
          "content": "NOTE: Change \"x.y\" by the version you use. If you are unsure about which version\nyou are using run: `pip show pytest`.\n\nText:\n\n[pytest] pytest x.y, 2004\nKrekel et al., https://github.com/pytest-dev/pytest\n\nBibTeX:\n\n@misc{pytestx.y,\n  title =        {pytest x.y},\n  author = {Krekel, Holger and Oliveira, Bruno and Pfannschmidt, Ronny and Bruynooghe, Floris and Laugher, Brianna and Bruhin, Florian},\n  year =         {2004},\n  url = {https://github.com/pytest-dev/pytest},\n}\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.6328125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at coc@pytest.org. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\nThe coc@pytest.org address is routed to the following people who can also be\ncontacted individually:\n\n- Brianna Laugher ([@pfctdayelise](https://github.com/pfctdayelise)): brianna@laugher.id.au\n- Bruno Oliveira ([@nicoddemus](https://github.com/nicoddemus)): nicoddemus@gmail.com\n- Florian Bruhin ([@the-compiler](https://github.com/the-compiler)): pytest@the-compiler.org\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 22.5703125,
          "content": "============================\nContributing\n============================\n\nContributions are highly welcomed and appreciated.  Every little bit of help counts,\nso do not hesitate!\n\n\n.. _submitfeedback:\n\nFeature requests and feedback\n-----------------------------\n\nDo you like pytest?  Share some love on Twitter or in your blog posts!\n\nWe'd also like to hear about your propositions and suggestions.  Feel free to\n`submit them as issues <https://github.com/pytest-dev/pytest/issues>`_ and:\n\n* Explain in detail how they should work.\n* Keep the scope as narrow as possible.  This will make it easier to implement.\n\n\n.. _reportbugs:\n\nReport bugs\n-----------\n\nReport bugs for pytest in the `issue tracker <https://github.com/pytest-dev/pytest/issues>`_.\n\nIf you are reporting a bug, please include:\n\n* Your operating system name and version.\n* Any details about your local setup that might be helpful in troubleshooting,\n  specifically the Python interpreter version, installed libraries, and pytest\n  version.\n* Detailed steps to reproduce the bug.\n\nIf you can write a demonstration test that currently fails but should pass\n(xfail), that is a very useful commit to make as well, even if you cannot\nfix the bug itself.\n\n\n.. _fixbugs:\n\nFix bugs\n--------\n\nLook through the `GitHub issues for bugs <https://github.com/pytest-dev/pytest/labels/type:%20bug>`_.\nSee also the `\"good first issue\" issues <https://github.com/pytest-dev/pytest/labels/good%20first%20issue>`_\nthat are friendly to new contributors.\n\n:ref:`Talk <contact>` to developers to find out how you can fix specific bugs. To indicate that you are going\nto work on a particular issue, add a comment to that effect on the specific issue.\n\nDon't forget to check the issue trackers of your favourite plugins, too!\n\n.. _writeplugins:\n\nImplement features\n------------------\n\nLook through the `GitHub issues for enhancements <https://github.com/pytest-dev/pytest/labels/type:%20enhancement>`_.\n\n:ref:`Talk <contact>` to developers to find out how you can implement specific\nfeatures.\n\nWrite documentation\n-------------------\n\nPytest could always use more documentation.  What exactly is needed?\n\n* More complementary documentation.  Have you perhaps found something unclear?\n* Documentation translations.  We currently have only English.\n* Docstrings.  There can never be too many of them.\n* Blog posts, articles and such -- they're all very appreciated.\n\nYou can also edit documentation files directly in the GitHub web interface,\nwithout using a local copy.  This can be convenient for small fixes.\n\n.. note::\n    Build the documentation locally with the following command:\n\n    .. code:: bash\n\n        $ tox -e docs\n\n    The built documentation should be available in ``doc/en/_build/html``,\n    where 'en' refers to the documentation language.\n\nPytest has an API reference which in large part is\n`generated automatically <https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`_\nfrom the docstrings of the documented items. Pytest uses the\n`Sphinx docstring format <https://sphinx-rtd-tutorial.readthedocs.io/en/latest/docstrings.html>`_.\nFor example:\n\n.. code-block:: python\n\n    def my_function(arg: ArgType) -> Foo:\n        \"\"\"Do important stuff.\n\n        More detailed info here, in separate paragraphs from the subject line.\n        Use proper sentences -- start sentences with capital letters and end\n        with periods.\n\n        Can include annotated documentation:\n\n        :param short_arg: An argument which determines stuff.\n        :param long_arg:\n            A long explanation which spans multiple lines, overflows\n            like this.\n        :returns: The result.\n        :raises ValueError:\n            Detailed information when this can happen.\n\n        .. versionadded:: 6.0\n\n        Including types into the annotations above is not necessary when\n        type-hinting is being used (as in this example).\n        \"\"\"\n\n\n.. _submitplugin:\n\nSubmitting Plugins to pytest-dev\n--------------------------------\n\nDevelopment of the pytest core, support code, and some plugins happens\nin repositories living under the ``pytest-dev`` organisations:\n\n- `pytest-dev on GitHub <https://github.com/pytest-dev>`_\n\nAll pytest-dev Contributors team members have write access to all contained\nrepositories.  Pytest core and plugins are generally developed\nusing `pull requests`_ to respective repositories.\n\nThe objectives of the ``pytest-dev`` organisation are:\n\n* Having a central location for popular pytest plugins\n* Sharing some of the maintenance responsibility (in case a maintainer no\n  longer wishes to maintain a plugin)\n\nYou can submit your plugin by subscribing to the `pytest-dev mail list\n<https://mail.python.org/mailman/listinfo/pytest-dev>`_ and writing a\nmail pointing to your existing pytest plugin repository which must have\nthe following:\n\n- PyPI presence with packaging metadata that contains a ``pytest-``\n  prefixed name, version number, authors, short and long description.\n\n- a  `tox configuration <https://tox.readthedocs.io/en/latest/config.html#configuration-discovery>`_\n  for running tests using `tox <https://tox.readthedocs.io>`_.\n\n- a ``README`` describing how to use the plugin and on which\n  platforms it runs.\n\n- a ``LICENSE`` file containing the licensing information, with\n  matching info in its packaging metadata.\n\n- an issue tracker for bug reports and enhancement requests.\n\n- a `changelog <https://keepachangelog.com/>`_.\n\nIf no contributor strongly objects and two agree, the repository can then be\ntransferred to the ``pytest-dev`` organisation.\n\nHere's a rundown of how a repository transfer usually proceeds\n(using a repository named ``joedoe/pytest-xyz`` as example):\n\n* ``joedoe`` transfers repository ownership to ``pytest-dev`` administrator ``calvin``.\n* ``calvin`` creates ``pytest-xyz-admin`` and ``pytest-xyz-developers`` teams, inviting ``joedoe`` to both as **maintainer**.\n* ``calvin`` transfers repository to ``pytest-dev`` and configures team access:\n\n  - ``pytest-xyz-admin`` **admin** access;\n  - ``pytest-xyz-developers`` **write** access;\n\nThe ``pytest-dev/Contributors`` team has write access to all projects, and\nevery project administrator is in it. We recommend that each plugin has at least three\npeople who have the right to release to PyPI.\n\nRepository owners can rest assured that no ``pytest-dev`` administrator will ever make\nreleases of your repository or take ownership in any way, except in rare cases\nwhere someone becomes unresponsive after months of contact attempts.\nAs stated, the objective is to share maintenance and avoid \"plugin-abandon\".\n\n\n.. _`pull requests`:\n.. _pull-requests:\n\nPreparing Pull Requests\n-----------------------\n\nShort version\n~~~~~~~~~~~~~\n\n#. Fork the repository.\n#. Fetch tags from upstream if necessary (if you cloned only main `git fetch --tags https://github.com/pytest-dev/pytest`).\n#. Enable and install `pre-commit <https://pre-commit.com>`_ to ensure style-guides and code checks are followed.\n#. Follow `PEP-8 <https://www.python.org/dev/peps/pep-0008/>`_ for naming.\n#. Tests are run using ``tox``::\n\n    tox -e linting,py39\n\n   The test environments above are usually enough to cover most cases locally.\n\n#. Write a ``changelog`` entry: ``changelog/2574.bugfix.rst``, use issue id number\n   and one of ``feature``, ``improvement``, ``bugfix``, ``doc``, ``deprecation``,\n   ``breaking``, ``vendor`` or ``trivial`` for the issue type.\n\n\n#. Unless your change is a trivial or a documentation fix (e.g., a typo or reword of a small section) please\n   add yourself to the ``AUTHORS`` file, in alphabetical order.\n\n\nLong version\n~~~~~~~~~~~~\n\nWhat is a \"pull request\"?  It informs the project's core developers about the\nchanges you want to review and merge.  Pull requests are stored on\n`GitHub servers <https://github.com/pytest-dev/pytest/pulls>`_.\nOnce you send a pull request, we can discuss its potential modifications and\neven add more commits to it later on. There's an excellent tutorial on how Pull\nRequests work in the\n`GitHub Help Center <https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests>`_.\n\nHere is a simple overview, with pytest-specific bits:\n\n#. Fork the\n   `pytest GitHub repository <https://github.com/pytest-dev/pytest>`__.  It's\n   fine to use ``pytest`` as your fork repository name because it will live\n   under your user.\n\n#. Clone your fork locally using `git <https://git-scm.com/>`_ and create a branch::\n\n    $ git clone git@github.com:YOUR_GITHUB_USERNAME/pytest.git\n    $ cd pytest\n    $ git fetch --tags https://github.com/pytest-dev/pytest\n    # now, create your own branch off \"main\":\n\n        $ git checkout -b your-bugfix-branch-name main\n\n   Given we have \"major.minor.micro\" version numbers, bug fixes will usually\n   be released in micro releases whereas features will be released in\n   minor releases and incompatible changes in major releases.\n\n   You will need the tags to test locally, so be sure you have the tags from the main repository. If you suspect you don't, set the main repository as upstream and fetch the tags::\n\n     $ git remote add upstream https://github.com/pytest-dev/pytest\n     $ git fetch upstream --tags\n\n   If you need some help with Git, follow this quick start\n   guide: https://git.wiki.kernel.org/index.php/QuickStart\n\n#. Install `pre-commit <https://pre-commit.com>`_ and its hook on the pytest repo::\n\n     $ pip install --user pre-commit\n     $ pre-commit install\n\n   Afterwards ``pre-commit`` will run whenever you commit.\n\n   https://pre-commit.com/ is a framework for managing and maintaining multi-language pre-commit hooks\n   to ensure code-style and code formatting is consistent.\n\n#. Install tox\n\n   Tox is used to run all the tests and will automatically setup virtualenvs\n   to run the tests in.\n   (will implicitly use https://virtualenv.pypa.io/en/latest/)::\n\n    $ pip install tox\n\n#. Run all the tests\n\n   You need to have Python 3.9 or later available in your system.  Now\n   running tests is as simple as issuing this command::\n\n    $ tox -e linting,py39\n\n   This command will run tests via the \"tox\" tool against Python 3.9\n   and also perform \"lint\" coding-style checks.\n\n#. You can now edit your local working copy and run the tests again as necessary. Please follow `PEP-8 <https://www.python.org/dev/peps/pep-0008/>`_ for naming.\n\n   You can pass different options to ``tox``. For example, to run tests on Python 3.9 and pass options to pytest\n   (e.g. enter pdb on failure) to pytest you can do::\n\n    $ tox -e py39 -- --pdb\n\n   Or to only run tests in a particular test module on Python 3.9::\n\n    $ tox -e py39 -- testing/test_config.py\n\n\n   When committing, ``pre-commit`` will re-format the files if necessary.\n\n#. If instead of using ``tox`` you prefer to run the tests directly, then we suggest to create a virtual environment and use\n   an editable install with the ``dev`` extra::\n\n       $ python3 -m venv .venv\n       $ source .venv/bin/activate  # Linux\n       $ .venv/Scripts/activate.bat  # Windows\n       $ pip install -e \".[dev]\"\n\n   Afterwards, you can edit the files and run pytest normally::\n\n       $ pytest testing/test_config.py\n\n#. Create a new changelog entry in ``changelog``. The file should be named ``<issueid>.<type>.rst``,\n   where *issueid* is the number of the issue related to the change and *type* is one of\n   ``feature``, ``improvement``, ``bugfix``, ``doc``, ``deprecation``, ``breaking``, ``vendor``\n   or ``trivial``. You may skip creating the changelog entry if the change doesn't affect the\n   documented behaviour of pytest.\n\n#. Add yourself to ``AUTHORS`` file if not there yet, in alphabetical order.\n\n#. Commit and push once your tests pass and you are happy with your change(s)::\n\n    $ git commit -a -m \"<commit message>\"\n    $ git push -u\n\n#. Finally, submit a pull request through the GitHub website using this data::\n\n    head-fork: YOUR_GITHUB_USERNAME/pytest\n    compare: your-branch-name\n\n    base-fork: pytest-dev/pytest\n    base: main\n\n\nWriting Tests\n~~~~~~~~~~~~~\n\nWriting tests for plugins or for pytest itself is often done using the `pytester fixture <https://docs.pytest.org/en/stable/reference/reference.html#pytester>`_, as a \"black-box\" test.\n\nFor example, to ensure a simple test passes you can write:\n\n.. code-block:: python\n\n    def test_true_assertion(pytester):\n        pytester.makepyfile(\n            \"\"\"\n            def test_foo():\n                assert True\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.assert_outcomes(failed=0, passed=1)\n\n\nAlternatively, it is possible to make checks based on the actual output of the termal using\n*glob-like* expressions:\n\n.. code-block:: python\n\n    def test_true_assertion(pytester):\n        pytester.makepyfile(\n            \"\"\"\n            def test_foo():\n                assert False\n        \"\"\"\n        )\n        result = pytester.runpytest()\n        result.stdout.fnmatch_lines([\"*assert False*\", \"*1 failed*\"])\n\nWhen choosing a file where to write a new test, take a look at the existing files and see if there's\none file which looks like a good fit. For example, a regression test about a bug in the ``--lf`` option\nshould go into ``test_cacheprovider.py``, given that this option is implemented in ``cacheprovider.py``.\nIf in doubt, go ahead and open a PR with your best guess and we can discuss this over the code.\n\nJoining the Development Team\n----------------------------\n\nAnyone who has successfully seen through a pull request which did not\nrequire any extra work from the development team to merge will\nthemselves gain commit access if they so wish (if we forget to ask please send a friendly\nreminder).  This does not mean there is any change in your contribution workflow:\neveryone goes through the same pull-request-and-review process and\nno-one merges their own pull requests unless already approved.  It does however mean you can\nparticipate in the development process more fully since you can merge\npull requests from other contributors yourself after having reviewed\nthem.\n\n\nMerge/squash guidelines\n-----------------------\n\nWhen a PR is approved and ready to be integrated to the ``main`` branch, one has the option to *merge* the commits unchanged, or *squash* all the commits into a single commit.\n\nHere are some guidelines on how to proceed, based on examples of a single PR commit history:\n\n1. Miscellaneous commits:\n\n   * ``Implement X``\n   * ``Fix test_a``\n   * ``Add myself to AUTHORS``\n   * ``fixup! Fix test_a``\n   * ``Update tests/test_integration.py``\n   * ``Merge origin/main into PR branch``\n   * ``Update tests/test_integration.py``\n\n   In this case, prefer to use the **Squash** merge strategy: the commit history is a bit messy (not in a derogatory way, often one just commits changes because they know the changes will eventually be squashed together), so squashing everything into a single commit is best. You must clean up the commit message, making sure it contains useful details.\n\n2. Separate commits related to the same topic:\n\n   * ``Implement X``\n   * ``Add myself to AUTHORS``\n   * ``Update CHANGELOG for X``\n\n   In this case, prefer to use the **Squash** merge strategy: while the commit history is not \"messy\" as in the example above, the individual commits do not bring much value overall, specially when looking at the changes a few months/years down the line.\n\n3. Separate commits, each with their own topic (refactorings, renames, etc), but still have a larger topic/purpose.\n\n   * ``Refactor class X in preparation for feature Y``\n   * ``Remove unused method``\n   * ``Implement feature Y``\n\n   In this case, prefer to use the **Merge** strategy: each commit is valuable on its own, even if they serve a common topic overall. Looking at the history later, it is useful to have the removal of the unused method separately on its own commit, along with more information (such as how it became unused in the first place).\n\n4. Separate commits, each with their own topic, but without a larger topic/purpose other than improve the code base (using more modern techniques, improve typing, removing clutter, etc).\n\n   * ``Improve internal names in X``\n   * ``Add type annotations to Y``\n   * ``Remove unnecessary dict access``\n   * ``Remove unreachable code due to EOL Python``\n\n   In this case, prefer to use the **Merge** strategy: each commit is valuable on its own, and the information on each is valuable in the long term.\n\n\nAs mentioned, those are overall guidelines, not rules cast in stone. This topic was discussed in `#12633 <https://github.com/pytest-dev/pytest/discussions/12633>`_.\n\n\n*Backport PRs* (as those created automatically from a ``backport`` label) should always be **squashed**, as they preserve the original PR author.\n\n\nBackporting bug fixes for the next patch release\n------------------------------------------------\n\nPytest makes a feature release every few weeks or months. In between, patch releases\nare made to the previous feature release, containing bug fixes only. The bug fixes\nusually fix regressions, but may be any change that should reach users before the\nnext feature release.\n\nSuppose for example that the latest release was 1.2.3, and you want to include\na bug fix in 1.2.4 (check https://github.com/pytest-dev/pytest/releases for the\nactual latest release). The procedure for this is:\n\n#. First, make sure the bug is fixed in the ``main`` branch, with a regular pull\n   request, as described above. An exception to this is if the bug fix is not\n   applicable to ``main`` anymore.\n\nAutomatic method:\n\nAdd a ``backport 1.2.x`` label to the PR you want to backport. This will create\na backport PR against the ``1.2.x`` branch.\n\nManual method:\n\n#. ``git checkout origin/1.2.x -b backport-XXXX`` # use the main PR number here\n\n#. Locate the merge commit on the PR, in the *merged* message, for example:\n\n    nicoddemus merged commit 0f8b462 into pytest-dev:main\n\n#. ``git cherry-pick -x -m1 REVISION`` # use the revision you found above (``0f8b462``).\n\n#. Open a PR targeting ``1.2.x``:\n\n   * Prefix the message with ``[1.2.x]``.\n   * Delete the PR body, it usually contains a duplicate commit message.\n\n\nWho does the backporting\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nAs mentioned above, bugs should first be fixed on ``main`` (except in rare occasions\nthat a bug only happens in a previous release). So, who should do the backport procedure described\nabove?\n\n1. If the bug was fixed by a core developer, it is the main responsibility of that core developer\n   to do the backport.\n2. However, often the merge is done by another maintainer, in which case it is nice of them to\n   do the backport procedure if they have the time.\n3. For bugs submitted by non-maintainers, it is expected that a core developer will to do\n   the backport, normally the one that merged the PR on ``main``.\n4. If a non-maintainers notices a bug which is fixed on ``main`` but has not been backported\n   (due to maintainers forgetting to apply the *needs backport* label, or just plain missing it),\n   they are also welcome to open a PR with the backport. The procedure is simple and really\n   helps with the maintenance of the project.\n\nAll the above are not rules, but merely some guidelines/suggestions on what we should expect\nabout backports.\n\nBackports should be **squashed** (rather than **merged**), as doing so preserves the original PR author correctly.\n\nHandling stale issues/PRs\n-------------------------\n\nStale issues/PRs are those where pytest contributors have asked for questions/changes\nand the authors didn't get around to answer/implement them yet after a somewhat long time, or\nthe discussion simply died because people seemed to lose interest.\n\nThere are many reasons why people don't answer questions or implement requested changes:\nthey might get busy, lose interest, or just forget about it,\nbut the fact is that this is very common in open source software.\n\nThe pytest team really appreciates every issue and pull request, but being a high-volume project\nwith many issues and pull requests being submitted daily, we try to reduce the number of stale\nissues and PRs by regularly closing them. When an issue/pull request is closed in this manner,\nit is by no means a dismissal of the topic being tackled by the issue/pull request, but it\nis just a way for us to clear up the queue and make the maintainers' work more manageable. Submitters\ncan always reopen the issue/pull request in their own time later if it makes sense.\n\nWhen to close\n~~~~~~~~~~~~~\n\nHere are a few general rules the maintainers use deciding when to close issues/PRs because\nof lack of inactivity:\n\n* Issues labeled ``question`` or ``needs information``: closed after 14 days inactive.\n* Issues labeled ``proposal``: closed after six months inactive.\n* Pull requests: after one month, consider pinging the author, update linked issue, or consider closing. For pull requests which are nearly finished, the team should consider finishing it up and merging it.\n\nThe above are **not hard rules**, but merely **guidelines**, and can be (and often are!) reviewed on a case-by-case basis.\n\nClosing pull requests\n~~~~~~~~~~~~~~~~~~~~~\n\nWhen closing a Pull Request, it needs to be acknowledging the time, effort, and interest demonstrated by the person which submitted it. As mentioned previously, it is not the intent of the team to dismiss a stalled pull request entirely but to merely to clear up our queue, so a message like the one below is warranted when closing a pull request that went stale:\n\n    Hi <contributor>,\n\n    First of all, we would like to thank you for your time and effort on working on this, the pytest team deeply appreciates it.\n\n    We noticed it has been awhile since you have updated this PR, however. pytest is a high activity project, with many issues/PRs being opened daily, so it is hard for us maintainers to track which PRs are ready for merging, for review, or need more attention.\n\n    So for those reasons we, think it is best to close the PR for now, but with the only intention to clean up our queue, it is by no means a rejection of your changes. We still encourage you to re-open this PR (it is just a click of a button away) when you are ready to get back to it.\n\n    Again we appreciate your time for working on this, and hope you might get back to this at a later time!\n\n    <bye>\n\nClosing issues\n--------------\n\nWhen a pull request is submitted to fix an issue, add text like ``closes #XYZW`` to the PR description and/or commits (where ``XYZW`` is the issue number). See the `GitHub docs <https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword>`_ for more information.\n\nWhen an issue is due to user error (e.g. misunderstanding of a functionality), please politely explain to the user why the issue raised is really a non-issue and ask them to close the issue if they have no further questions. If the original requester is unresponsive, the issue will be handled as described in the section `Handling stale issues/PRs`_ above.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0654296875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2004 Holger Krekel and others\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "OPENCOLLECTIVE.rst",
          "type": "blob",
          "size": 1.9072265625,
          "content": "==============\nOpenCollective\n==============\n\npytest has a collective setup at `OpenCollective`_. This document describes how the core team manages\nOpenCollective-related activities.\n\nWhat is it\n==========\n\nOpen Collective is an online funding platform for open and transparent communities.\nIt provides tools to raise money and share your finances in full transparency.\n\nIt is the platform of choice for individuals and companies that want to make one-time or\nmonthly donations directly to the project.\n\nFunds\n=====\n\nThe OpenCollective funds donated to pytest will be used to fund overall maintenance,\nlocal sprints, merchandising (stickers to distribute in conferences for example), and future\ngatherings of pytest developers (sprints).\n\n`Core contributors`_ which are contributing on a continuous basis are free to submit invoices\nto bill maintenance hours using the platform. How much each contributor should request is still an\nopen question, but we should use common sense and trust in the contributors, most of which know\nthemselves in-person. A good rule of thumb is to bill the same amount as monthly payments\ncontributors which participate in the `Tidelift`_ subscription. If in doubt, just ask.\n\nAdmins\n======\n\nA few people have admin access to the OpenCollective dashboard to make changes. Those people\nare part of the `@pytest-dev/opencollective-admins`_ team.\n\n`Core contributors`_ interested in helping out with OpenCollective maintenance are welcome! We don't\nexpect much work here other than the occasional approval of expenses from other core contributors.\nJust drop a line to one of the `@pytest-dev/opencollective-admins`_ or use the mailing list.\n\n\n.. _`OpenCollective`: https://opencollective.com/pytest\n.. _`Tidelift`: https://tidelift.com\n.. _`core contributors`: https://github.com/orgs/pytest-dev/teams/core/members\n.. _`@pytest-dev/opencollective-admins`: https://github.com/orgs/pytest-dev/teams/opencollective-admins/members\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 5.337890625,
          "content": ".. image:: https://github.com/pytest-dev/pytest/raw/main/doc/en/img/pytest_logo_curves.svg\n   :target: https://docs.pytest.org/en/stable/\n   :align: center\n   :height: 200\n   :alt: pytest\n\n\n------\n\n.. image:: https://img.shields.io/pypi/v/pytest.svg\n    :target: https://pypi.org/project/pytest/\n\n.. image:: https://img.shields.io/conda/vn/conda-forge/pytest.svg\n    :target: https://anaconda.org/conda-forge/pytest\n\n.. image:: https://img.shields.io/pypi/pyversions/pytest.svg\n    :target: https://pypi.org/project/pytest/\n\n.. image:: https://codecov.io/gh/pytest-dev/pytest/branch/main/graph/badge.svg\n    :target: https://codecov.io/gh/pytest-dev/pytest\n    :alt: Code coverage Status\n\n.. image:: https://github.com/pytest-dev/pytest/actions/workflows/test.yml/badge.svg\n    :target: https://github.com/pytest-dev/pytest/actions?query=workflow%3Atest\n\n.. image:: https://results.pre-commit.ci/badge/github/pytest-dev/pytest/main.svg\n   :target: https://results.pre-commit.ci/latest/github/pytest-dev/pytest/main\n   :alt: pre-commit.ci status\n\n.. image:: https://www.codetriage.com/pytest-dev/pytest/badges/users.svg\n    :target: https://www.codetriage.com/pytest-dev/pytest\n\n.. image:: https://readthedocs.org/projects/pytest/badge/?version=latest\n    :target: https://pytest.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://img.shields.io/badge/Discord-pytest--dev-blue\n    :target: https://discord.com/invite/pytest-dev\n    :alt: Discord\n\n.. image:: https://img.shields.io/badge/Libera%20chat-%23pytest-orange\n    :target: https://web.libera.chat/#pytest\n    :alt: Libera chat\n\n\nThe ``pytest`` framework makes it easy to write small tests, yet\nscales to support complex functional testing for applications and libraries.\n\nAn example of a simple test:\n\n.. code-block:: python\n\n    # content of test_sample.py\n    def inc(x):\n        return x + 1\n\n\n    def test_answer():\n        assert inc(3) == 5\n\n\nTo execute it::\n\n    $ pytest\n    ============================= test session starts =============================\n    collected 1 items\n\n    test_sample.py F\n\n    ================================== FAILURES ===================================\n    _________________________________ test_answer _________________________________\n\n        def test_answer():\n    >       assert inc(3) == 5\n    E       assert 4 == 5\n    E        +  where 4 = inc(3)\n\n    test_sample.py:5: AssertionError\n    ========================== 1 failed in 0.04 seconds ===========================\n\n\nDue to ``pytest``'s detailed assertion introspection, only plain ``assert`` statements are used. See `getting-started <https://docs.pytest.org/en/stable/getting-started.html#our-first-test-run>`_ for more examples.\n\n\nFeatures\n--------\n\n- Detailed info on failing `assert statements <https://docs.pytest.org/en/stable/how-to/assert.html>`_ (no need to remember ``self.assert*`` names)\n\n- `Auto-discovery\n  <https://docs.pytest.org/en/stable/explanation/goodpractices.html#python-test-discovery>`_\n  of test modules and functions\n\n- `Modular fixtures <https://docs.pytest.org/en/stable/explanation/fixtures.html>`_ for\n  managing small or parametrized long-lived test resources\n\n- Can run `unittest <https://docs.pytest.org/en/stable/how-to/unittest.html>`_ (or trial)\n  test suites out of the box\n\n- Python 3.9+ or PyPy3\n\n- Rich plugin architecture, with over 1300+ `external plugins <https://docs.pytest.org/en/latest/reference/plugin_list.html>`_ and thriving community\n\n\nDocumentation\n-------------\n\nFor full documentation, including installation, tutorials and PDF documents, please see https://docs.pytest.org/en/stable/.\n\n\nBugs/Requests\n-------------\n\nPlease use the `GitHub issue tracker <https://github.com/pytest-dev/pytest/issues>`_ to submit bugs or request features.\n\n\nChangelog\n---------\n\nConsult the `Changelog <https://docs.pytest.org/en/stable/changelog.html>`__ page for fixes and enhancements of each version.\n\n\nSupport pytest\n--------------\n\n`Open Collective`_ is an online funding platform for open and transparent communities.\nIt provides tools to raise money and share your finances in full transparency.\n\nIt is the platform of choice for individuals and companies that want to make one-time or\nmonthly donations directly to the project.\n\nSee more details in the `pytest collective`_.\n\n.. _Open Collective: https://opencollective.com\n.. _pytest collective: https://opencollective.com/pytest\n\n\npytest for enterprise\n---------------------\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of pytest and thousands of other packages are working with Tidelift to deliver commercial support and\nmaintenance for the open source dependencies you use to build your applications.\nSave time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use.\n\n`Learn more. <https://tidelift.com/subscription/pkg/pypi-pytest?utm_source=pypi-pytest&utm_medium=referral&utm_campaign=enterprise&utm_term=repo>`_\n\nSecurity\n^^^^^^^^\n\npytest has never been associated with a security vulnerability, but in any case, to report a\nsecurity vulnerability please use the `Tidelift security contact <https://tidelift.com/security>`_.\nTidelift will coordinate the fix and disclosure.\n\n\nLicense\n-------\n\nCopyright Holger Krekel and others, 2004.\n\nDistributed under the terms of the `MIT`_ license, pytest is free and open source software.\n\n.. _`MIT`: https://github.com/pytest-dev/pytest/blob/main/LICENSE\n"
        },
        {
          "name": "RELEASING.rst",
          "type": "blob",
          "size": 6.103515625,
          "content": "Release Procedure\n-----------------\n\nOur current policy for releasing is to aim for a bug-fix release every few weeks and a minor release every 2-3 months. The idea\nis to get fixes and new features out instead of trying to cram a ton of features into a release and by consequence\ntaking a lot of time to make a new one.\n\nThe git commands assume the following remotes are setup:\n\n* ``origin``: your own fork of the repository.\n* ``upstream``: the ``pytest-dev/pytest`` official repository.\n\nPreparing: Automatic Method\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWe have developed an automated workflow for releases, that uses GitHub workflows and is triggered\nby `manually running <https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow>`__\nthe `prepare-release-pr workflow <https://github.com/pytest-dev/pytest/actions/workflows/prepare-release-pr.yml>`__\non GitHub Actions.\n\nThe automation will decide the new version number based on the following criteria:\n\n- If the \"major release\" input is set to \"yes\", release a new major release\n  (e.g. 7.0.0 -> 8.0.0)\n- If there are any ``.feature.rst`` or ``.breaking.rst`` files in the\n  ``changelog`` directory, release a new minor release (e.g. 7.0.0 -> 7.1.0)\n- Otherwise, release a bugfix release (e.g. 7.0.0 -> 7.0.1)\n- If the \"prerelease\" input is set, append the string to the version number\n  (e.g. 7.0.0 -> 8.0.0rc1), if \"major\" is set, and \"prerelease\" is set to `rc1`)\n\nBug-fix and minor releases\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBug-fix and minor releases are always done from a maintenance branch. First,\nconsider double-checking the ``changelog`` directory to see if there are any\nbreaking changes or new features.\n\nFor a new minor release, first create a new maintenance branch from ``main``::\n\n     git fetch upstream\n     git branch 7.1.x upstream/main\n     git push upstream 7.1.x\n\nThen, trigger the workflow with the following inputs:\n\n- branch: **7.1.x**\n- major release: **no**\n- prerelease: empty\n\nOr via the commandline using `GitHub's cli <https://github.com/cli/cli>`__::\n\n    gh workflow run prepare-release-pr.yml -f branch=7.1.x -f major=no -f prerelease=\n\nWhere ``7.1.x`` is the maintenance branch for the ``7.1`` series. The automated\nworkflow will publish a PR for a branch ``release-7.1.0``.\n\nSimilarly, for a bug-fix release, use the existing maintenance branch and\ntrigger the workflow with e.g. ``branch: 7.0.x`` to get a new ``release-7.0.1``\nPR.\n\nMajor releases\n^^^^^^^^^^^^^^\n\n1. Create a new maintenance branch from ``main``::\n\n        git fetch upstream\n        git branch 8.0.x upstream/main\n        git push upstream 8.0.x\n\n2. Trigger the workflow with the following inputs:\n\n   - branch: **8.0.x**\n   - major release: **yes**\n   - prerelease: empty\n\nOr via the commandline::\n\n    gh workflow run prepare-release-pr.yml -f branch=8.0.x -f major=yes -f prerelease=\n\nThe automated workflow will publish a PR for a branch ``release-8.0.0``.\n\nAt this point on, this follows the same workflow as other maintenance branches: bug-fixes are merged\ninto ``main`` and ported back to the maintenance branch, even for release candidates.\n\nRelease candidates\n^^^^^^^^^^^^^^^^^^\n\nTo release a release candidate, set the \"prerelease\" input to the version number\nsuffix to use. To release a ``8.0.0rc1``, proceed like under \"major releases\", but set:\n\n- branch: 8.0.x\n- major release: yes\n- prerelease: **rc1**\n\nOr via the commandline::\n\n    gh workflow run prepare-release-pr.yml -f branch=8.0.x -f major=yes -f prerelease=rc1\n\nThe automated workflow will publish a PR for a branch ``release-8.0.0rc1``.\n\n**A note about release candidates**\n\nDuring release candidates we can merge small improvements into\nthe maintenance branch before releasing the final major version, however we must take care\nto avoid introducing big changes at this stage.\n\nPreparing: Manual Method\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n**Important**: pytest releases must be prepared on **Linux** because the docs and examples expect\nto be executed on that platform.\n\nTo release a version ``MAJOR.MINOR.PATCH``, follow these steps:\n\n#. For major and minor releases, create a new branch ``MAJOR.MINOR.x`` from\n   ``upstream/main`` and push it to ``upstream``.\n\n#. Create a branch ``release-MAJOR.MINOR.PATCH`` from the ``MAJOR.MINOR.x`` branch.\n\n   Ensure your are updated and in a clean working tree.\n\n#. Using ``tox``, generate docs, changelog, announcements::\n\n    $ tox -e release -- MAJOR.MINOR.PATCH\n\n   This will generate a commit with all the changes ready for pushing.\n\n#. Open a PR for the ``release-MAJOR.MINOR.PATCH`` branch targeting ``MAJOR.MINOR.x``.\n\n\nReleasing\n~~~~~~~~~\n\nBoth automatic and manual processes described above follow the same steps from this point onward.\n\n#. After all tests pass and the PR has been approved, trigger the ``deploy`` job\n   in https://github.com/pytest-dev/pytest/actions/workflows/deploy.yml, using the ``release-MAJOR.MINOR.PATCH`` branch\n   as source.\n\n   This job will require approval from ``pytest-dev/core``, after which it will publish to PyPI\n   and tag the repository.\n\n#. Merge the PR. **Make sure it's not squash-merged**, so that the tagged commit ends up in the main branch.\n\n#. Cherry-pick the CHANGELOG / announce files to the ``main`` branch::\n\n       git fetch upstream\n       git checkout upstream/main -b cherry-pick-release\n       git cherry-pick -x -m1 upstream/MAJOR.MINOR.x\n\n#. Open a PR for ``cherry-pick-release`` and merge it once CI passes. No need to wait for approvals if there were no conflicts on the previous step.\n\n#. For major and minor releases (or the first prerelease of it), tag the release cherry-pick merge commit in main with\n   a dev tag for the next feature release::\n\n       git checkout main\n       git pull\n       git tag MAJOR.{MINOR+1}.0.dev0\n       git push upstream MAJOR.{MINOR+1}.0.dev0\n\n#. Send an email announcement with the contents from::\n\n     doc/en/announce/release-<VERSION>.rst\n\n   To the following mailing lists:\n\n   * pytest-dev@python.org (all releases)\n   * python-announce-list@python.org (all releases)\n   * testing-in-python@lists.idyll.org (only major/minor releases)\n\n   And announce it on `Twitter <https://twitter.com/>`_ and `BlueSky <https://bsky.app/>`_ with the ``#pytest`` hashtag.\n"
        },
        {
          "name": "TIDELIFT.rst",
          "type": "blob",
          "size": 2.35546875,
          "content": "========\nTidelift\n========\n\npytest is a member of `Tidelift`_. This document describes how the core team manages\nTidelift-related activities.\n\nWhat is it\n==========\n\nTidelift aims to make Open Source sustainable by offering subscriptions to companies which rely\non Open Source packages. This subscription allows it to pay maintainers of those Open Source\npackages to aid sustainability of the work.\n\nIt is the perfect platform for companies that want to support Open Source packages and at the same\ntime obtain assurances regarding maintenance, quality and security.\n\nFunds\n=====\n\nIt was decided in the `mailing list`_ that the Tidelift contribution will be split evenly between\nmembers of the `contributors team`_ interested in receiving funding.\n\nThe current list of contributors receiving funding are:\n\n* `@nicoddemus`_\n* `@The-Compiler`_\n* `@RonnyPfannschmidt`_\n\nContributors interested in receiving a part of the funds just need to submit a PR adding their\nname to the list. Contributors that want to stop receiving the funds should also submit a PR\nin the same way.\n\nThe PR should mention `@pytest-dev/tidelift-admins`_ so appropriate changes\ncan be made in the Tidelift platform.\n\nAfter the PR has been accepted and merged, the contributor should register in the `Tidelift`_\nplatform and follow the instructions there, including signing an `agreement`_.\n\nAdmins\n======\n\nA few people have admin access to the Tidelift dashboard to make changes. Those people\nare part of the `@pytest-dev/tidelift-admins`_ team.\n\n`Core contributors`_ interested in helping out with Tidelift maintenance are welcome! We don't\nexpect much work here other than the occasional adding/removal of a contributor from receiving\nfunds. Just drop a line to one of the `@pytest-dev/tidelift-admins`_ or use the mailing list.\n\n\n.. _`Tidelift`: https://tidelift.com\n.. _`mailing list`: https://mail.python.org/pipermail/pytest-dev/2019-May/004716.html\n.. _`contributors team`: https://github.com/orgs/pytest-dev/teams/contributors\n.. _`core contributors`: https://github.com/orgs/pytest-dev/teams/core/members\n.. _`@pytest-dev/tidelift-admins`: https://github.com/orgs/pytest-dev/teams/tidelift-admins/members\n.. _`agreement`: https://tidelift.com/docs/lifting/agreement\n\n.. _`@nicoddemus`: https://github.com/nicoddemus\n.. _`@The-Compiler`: https://github.com/The-Compiler\n.. _`@RonnyPfannschmidt`: https://github.com/RonnyPfannschmidt\n"
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "changelog",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.201171875,
          "content": "# reference: https://docs.codecov.io/docs/codecovyml-reference\n---\n\ncodecov:\n  token: 1eca3b1f-31a2-4fb8-a8c3-138b441b50a7 #repo token\n\ncoverage:\n  status:\n    patch: true\n    project: false\ncomment: false\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "extra",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 17.1787109375,
          "content": "[build-system]\nbuild-backend = \"setuptools.build_meta\"\nrequires = [\n    \"setuptools>=61\",\n    \"setuptools-scm[toml]>=6.2.3\",\n]\n\n[project]\nname = \"pytest\"\ndescription = \"pytest: simple powerful testing with Python\"\nreadme = \"README.rst\"\nkeywords = [\n    \"test\",\n    \"unittest\",\n]\nlicense = { text = \"MIT\" }\nauthors = [\n    { name = \"Holger Krekel\" },\n    { name = \"Bruno Oliveira\" },\n    { name = \"Ronny Pfannschmidt\" },\n    { name = \"Floris Bruynooghe\" },\n    { name = \"Brianna Laugher\" },\n    { name = \"Florian Bruhin\" },\n    { name = \"Others (See AUTHORS)\" },\n]\nrequires-python = \">=3.9\"\nclassifiers = [\n    \"Development Status :: 6 - Mature\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: MacOS\",\n    \"Operating System :: Microsoft :: Windows\",\n    \"Operating System :: POSIX\",\n    \"Operating System :: Unix\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n    \"Topic :: Software Development :: Libraries\",\n    \"Topic :: Software Development :: Testing\",\n    \"Topic :: Utilities\",\n]\ndynamic = [\n    \"version\",\n]\ndependencies = [\n    \"colorama; sys_platform=='win32'\",\n    \"exceptiongroup>=1.0.0rc8; python_version<'3.11'\",\n    \"iniconfig\",\n    \"packaging\",\n    \"pluggy>=1.5,<2\",\n    \"tomli>=1; python_version<'3.11'\",\n]\noptional-dependencies.dev = [\n    \"argcomplete\",\n    \"attrs>=19.2\",\n    \"hypothesis>=3.56\",\n    \"mock\",\n    \"pygments>=2.7.2\",\n    \"requests\",\n    \"setuptools\",\n    \"xmlschema\",\n]\nurls.Changelog = \"https://docs.pytest.org/en/stable/changelog.html\"\nurls.Homepage = \"https://docs.pytest.org/en/latest/\"\nurls.Source = \"https://github.com/pytest-dev/pytest\"\nurls.Tracker = \"https://github.com/pytest-dev/pytest/issues\"\nurls.Twitter = \"https://twitter.com/pytestdotorg\"\nscripts.\"py.test\" = \"pytest:console_main\"\nscripts.pytest = \"pytest:console_main\"\n\n[tool.setuptools.package-data]\n\"_pytest\" = [\n    \"py.typed\",\n]\n\"pytest\" = [\n    \"py.typed\",\n]\n\n[tool.setuptools_scm]\nwrite_to = \"src/_pytest/_version.py\"\n\n[tool.black]\n# See https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#t-target-version\ntarget-version = [ \"py39\", \"py310\", \"py311\", \"py312\", \"py313\" ]\n\n[tool.ruff]\ntarget-version = \"py39\"\nline-length = 88\nsrc = [\n    \"src\",\n]\nformat.docstring-code-format = true\nlint.select = [\n    \"B\",       # bugbear\n    \"D\",       # pydocstyle\n    \"E\",       # pycodestyle\n    \"F\",       # pyflakes\n    \"FA100\",   # add future annotations\n    \"I\",       # isort\n    \"PGH004\",  # pygrep-hooks - Use specific rule codes when using noqa\n    \"PIE\",     # flake8-pie\n    \"PLC\",     # pylint convention\n    \"PLE\",     # pylint error\n    \"PLR\",     # pylint refactor\n    \"PLR1714\", # Consider merging multiple comparisons\n    \"PLW\",     # pylint warning\n    \"PYI\",     # flake8-pyi\n    \"RUF\",     # ruff\n    \"T100\",    # flake8-debugger\n    \"UP\",      # pyupgrade\n    \"W\",       # pycodestyle\n]\nlint.ignore = [\n    # bugbear ignore\n    \"B004\", # Using `hasattr(x, \"__call__\")` to test if x is callable is unreliable.\n    \"B007\", # Loop control variable `i` not used within loop body\n    \"B009\", # Do not call `getattr` with a constant attribute value\n    \"B010\", # [*] Do not call `setattr` with a constant attribute value.\n    \"B011\", # Do not `assert False` (`python -O` removes these calls)\n    \"B028\", # No explicit `stacklevel` keyword argument found\n    # pydocstyle ignore\n    \"D100\", # Missing docstring in public module\n    \"D101\", # Missing docstring in public class\n    \"D102\", # Missing docstring in public method\n    \"D103\", # Missing docstring in public function\n    \"D104\", # Missing docstring in public package\n    \"D105\", # Missing docstring in magic method\n    \"D106\", # Missing docstring in public nested class\n    \"D107\", # Missing docstring in `__init__`\n    \"D205\", # 1 blank line required between summary line and description\n    \"D209\", # [*] Multi-line docstring closing quotes should be on a separate line\n    \"D400\", # First line should end with a period\n    \"D401\", # First line of docstring should be in imperative mood\n    \"D402\", # First line should not be the function's signature\n    \"D404\", # First word of the docstring should not be \"This\"\n    \"D415\", # First line should end with a period, question mark, or exclamation point\n    # pytest can do weird low-level things, and we usually know\n    # what we're doing when we use type(..) is ...\n    \"E721\", # Do not compare types, use `isinstance()`\n    # pylint ignore\n    \"PLC0105\", # `TypeVar` name \"E\" does not reflect its covariance;\n    \"PLC0414\", # Import alias does not rename original package\n    \"PLR0124\", # Name compared with itself\n    \"PLR0133\", # Two constants compared in a comparison (lots of those in tests)\n    \"PLR0402\", # Use `from x.y import z` in lieu of alias\n    \"PLR0911\", # Too many return statements\n    \"PLR0912\", # Too many branches\n    \"PLR0913\", # Too many arguments in function definition\n    \"PLR0915\", # Too many statements\n    \"PLR2004\", # Magic value used in comparison\n    \"PLR2044\", # Line with empty comment\n    \"PLR5501\", # Use `elif` instead of `else` then `if`\n    \"PLW0120\", # remove the else and dedent its contents\n    \"PLW0603\", # Using the global statement\n    \"PLW2901\", # for loop variable overwritten by assignment target\n    # ruff ignore\n    \"RUF012\", # Mutable class attributes should be annotated with `typing.ClassVar`\n]\nlint.per-file-ignores.\"src/_pytest/_py/**/*.py\" = [\n    \"B\",\n    \"PYI\",\n]\nlint.per-file-ignores.\"src/_pytest/_version.py\" = [\n    \"I001\",\n]\nlint.per-file-ignores.\"testing/python/approx.py\" = [\n    \"B015\",\n]\nlint.extend-safe-fixes = [\n    \"UP006\",\n    \"UP007\",\n]\nlint.isort.combine-as-imports = true\nlint.isort.force-single-line = true\nlint.isort.force-sort-within-sections = true\nlint.isort.known-local-folder = [\n    \"pytest\",\n    \"_pytest\",\n]\nlint.isort.lines-after-imports = 2\nlint.isort.order-by-type = false\nlint.isort.required-imports = [\n    \"from __future__ import annotations\",\n]\n# In order to be able to format for 88 char in ruff format\nlint.pycodestyle.max-line-length = 120\nlint.pydocstyle.convention = \"pep257\"\nlint.pyupgrade.keep-runtime-typing = false\n\n[tool.pylint.main]\n# Maximum number of characters on a single line.\nmax-line-length = 120\ndisable = [\n    \"abstract-method\",\n    \"arguments-differ\",\n    \"arguments-renamed\",\n    \"assigning-non-slot\",\n    \"attribute-defined-outside-init\",\n    \"bad-builtin\",\n    \"bad-classmethod-argument\",\n    \"bad-dunder-name\",\n    \"bad-mcs-method-argument\",\n    \"broad-exception-caught\",\n    \"broad-exception-raised\",\n    \"cell-var-from-loop\",                     # B023 from ruff / flake8-bugbear\n    \"comparison-of-constants\",                # disabled in ruff (PLR0133)\n    \"comparison-with-callable\",\n    \"comparison-with-itself\",                 # PLR0124 from ruff\n    \"condition-evals-to-constant\",\n    \"consider-alternative-union-syntax\",\n    \"confusing-consecutive-elif\",\n    \"consider-using-assignment-expr\",\n    \"consider-using-dict-items\",\n    \"consider-using-from-import\",\n    \"consider-using-f-string\",\n    \"consider-using-in\",\n    \"consider-using-namedtuple-or-dataclass\",\n    \"consider-using-ternary\",\n    \"consider-using-tuple\",\n    \"consider-using-with\",\n    \"consider-using-from-import\",             # not activated by default, PLR0402 disabled in ruff\n    \"consider-ternary-expression\",\n    \"cyclic-import\",\n    \"differing-param-doc\",\n    \"docstring-first-line-empty\",\n    \"deprecated-argument\",\n    \"deprecated-attribute\",\n    \"deprecated-class\",\n    \"disallowed-name\",                        # foo / bar are used often in tests\n    \"duplicate-code\",\n    \"else-if-used\",                           # not activated by default, PLR5501 disabled in ruff\n    \"empty-comment\",                          # not activated by default, PLR2044 disabled in ruff\n    \"eval-used\",\n    \"eq-without-hash\",\n    \"exec-used\",\n    \"expression-not-assigned\",\n    \"fixme\",\n    \"global-statement\",                       # PLW0603 disabled in ruff\n    \"import-error\",\n    \"import-outside-toplevel\",\n    \"import-private-name\",\n    \"inconsistent-return-statements\",\n    \"invalid-bool-returned\",\n    \"invalid-name\",\n    \"invalid-repr-returned\",\n    \"invalid-str-returned\",\n    \"keyword-arg-before-vararg\",\n    \"line-too-long\",\n    \"magic-value-comparison\",                 # not activated by default, PLR2004 disabled in ruff\n    \"method-hidden\",\n    \"missing-docstring\",\n    \"missing-param-doc\",\n    \"missing-raises-doc\",\n    \"missing-timeout\",\n    \"missing-type-doc\",\n    \"misplaced-bare-raise\",                   # PLE0704 from ruff\n    \"misplaced-comparison-constant\",\n    \"multiple-statements\",                    # multiple-statements-on-one-line-colon (E701) from ruff\n    \"no-else-break\",\n    \"no-else-continue\",\n    \"no-else-raise\",\n    \"no-else-return\",\n    \"no-member\",\n    \"no-name-in-module\",\n    \"no-self-argument\",\n    \"no-self-use\",\n    \"not-an-iterable\",\n    \"not-callable\",\n    \"pointless-exception-statement\",          # https://github.com/pytest-dev/pytest/pull/12379\n    \"pointless-statement\",                    # https://github.com/pytest-dev/pytest/pull/12379\n    \"pointless-string-statement\",             # https://github.com/pytest-dev/pytest/pull/12379\n    \"possibly-used-before-assignment\",\n    \"protected-access\",\n    \"raise-missing-from\",\n    \"redefined-argument-from-local\",\n    \"redefined-builtin\",\n    \"redefined-loop-name\",                    # PLW2901 disabled in ruff\n    \"redefined-outer-name\",\n    \"redefined-variable-type\",\n    \"reimported\",\n    \"simplifiable-condition\",\n    \"simplifiable-if-expression\",\n    \"singleton-comparison\",\n    \"superfluous-parens\",\n    \"super-init-not-called\",\n    \"too-complex\",\n    \"too-few-public-methods\",\n    \"too-many-ancestors\",\n    \"too-many-arguments\",                     # disabled in ruff\n    \"too-many-branches\",                      # disabled in ruff\n    \"too-many-function-args\",\n    \"too-many-instance-attributes\",\n    \"too-many-lines\",\n    \"too-many-locals\",\n    \"too-many-nested-blocks\",\n    \"too-many-positional-arguments\",\n    \"too-many-public-methods\",\n    \"too-many-return-statements\",             # disabled in ruff\n    \"too-many-statements\",                    # disabled in ruff\n    \"too-many-try-statements\",\n    \"try-except-raise\",\n    \"typevar-name-incorrect-variance\",        # PLC0105 disabled in ruff\n    \"unbalanced-tuple-unpacking\",\n    \"undefined-loop-variable\",\n    \"undefined-variable\",\n    \"unexpected-keyword-arg\",\n    \"unidiomatic-typecheck\",\n    \"unnecessary-comprehension\",\n    \"unnecessary-dunder-call\",\n    \"unnecessary-lambda\",\n    \"unnecessary-lambda-assignment\",\n    \"unpacking-non-sequence\",\n    \"unspecified-encoding\",\n    \"unsubscriptable-object\",\n    \"unused-argument\",\n    \"unused-import\",\n    \"unused-variable\",\n    \"used-before-assignment\",\n    \"use-dict-literal\",\n    \"use-implicit-booleaness-not-comparison\",\n    \"use-implicit-booleaness-not-len\",\n    \"use-set-for-membership\",\n    \"useless-else-on-loop\",                   # PLC0414 disabled in ruff\n    \"useless-import-alias\",\n    \"useless-return\",\n    \"using-constant-test\",\n    \"while-used\",\n    \"wrong-import-order\",                     # handled by isort / ruff\n    \"wrong-import-position\",                  # handled by isort / ruff\n]\n\n[tool.codespell]\nignore-words-list = \"afile,asend,asser,assertio,feld,hove,ned,noes,notin,paramete,parth,socio-economic,tesults,varius,wil\"\nskip = \"AUTHORS,*/plugin_list.rst\"\nwrite-changes = true\n\n[tool.check-wheel-contents]\n# check-wheel-contents is executed by the build-and-inspect-python-package action.\n# W009: Wheel contains multiple toplevel library entries\nignore = \"W009\"\n\n[tool.pyproject-fmt]\nindent = 4\nmax_supported_python = \"3.13\"\n\n[tool.pytest.ini_options]\nminversion = \"2.0\"\naddopts = \"-rfEX -p pytester --strict-markers\"\npython_files = [\n    \"test_*.py\",\n    \"*_test.py\",\n    \"testing/python/*.py\",\n]\npython_classes = [\n    \"Test\",\n    \"Acceptance\",\n]\npython_functions = [\n    \"test\",\n]\n# NOTE: \"doc\" is not included here, but gets tested explicitly via \"doctesting\".\ntestpaths = [\n    \"testing\",\n]\nnorecursedirs = [\n    \"testing/example_scripts\",\n    \".*\",\n    \"build\",\n    \"dist\",\n]\nxfail_strict = true\nfilterwarnings = [\n    \"error\",\n    \"default:Using or importing the ABCs:DeprecationWarning:unittest2.*\",\n    # produced by older pyparsing<=2.2.0.\n    \"default:Using or importing the ABCs:DeprecationWarning:pyparsing.*\",\n    \"default:the imp module is deprecated in favour of importlib:DeprecationWarning:nose.*\",\n    # distutils is deprecated in 3.10, scheduled for removal in 3.12\n    \"ignore:The distutils package is deprecated:DeprecationWarning\",\n    # produced by pytest-xdist\n    \"ignore:.*type argument to addoption.*:DeprecationWarning\",\n    # produced on execnet (pytest-xdist)\n    \"ignore:.*inspect.getargspec.*deprecated, use inspect.signature.*:DeprecationWarning\",\n    # pytest's own futurewarnings\n    \"ignore::pytest.PytestExperimentalApiWarning\",\n    # Do not cause SyntaxError for invalid escape sequences in py37.\n    # Those are caught/handled by pyupgrade, and not easy to filter with the\n    # module being the filename (with .py removed).\n    \"default:invalid escape sequence:DeprecationWarning\",\n    # ignore not yet fixed warnings for hook markers\n    \"default:.*not marked using pytest.hook.*\",\n    \"ignore:.*not marked using pytest.hook.*::xdist.*\",\n    # ignore use of unregistered marks, because we use many to test the implementation\n    \"ignore::_pytest.warning_types.PytestUnknownMarkWarning\",\n    # https://github.com/benjaminp/six/issues/341\n    \"ignore:_SixMetaPathImporter\\\\.exec_module\\\\(\\\\) not found; falling back to load_module\\\\(\\\\):ImportWarning\",\n    # https://github.com/benjaminp/six/pull/352\n    \"ignore:_SixMetaPathImporter\\\\.find_spec\\\\(\\\\) not found; falling back to find_module\\\\(\\\\):ImportWarning\",\n    # https://github.com/pypa/setuptools/pull/2517\n    \"ignore:VendorImporter\\\\.find_spec\\\\(\\\\) not found; falling back to find_module\\\\(\\\\):ImportWarning\",\n    # https://github.com/pytest-dev/execnet/pull/127\n    \"ignore:isSet\\\\(\\\\) is deprecated, use is_set\\\\(\\\\) instead:DeprecationWarning\",\n    # https://github.com/pytest-dev/pytest/issues/2366\n    # https://github.com/pytest-dev/pytest/pull/13057\n    \"default::pytest.PytestFDWarning\",\n]\npytester_example_dir = \"testing/example_scripts\"\nmarkers = [\n    # dummy markers for testing\n    \"foo\",\n    \"bar\",\n    \"baz\",\n    \"number_mark\",\n    \"builtin_matchers_mark\",\n    \"str_mark\",\n    # conftest.py reorders tests moving slow ones to the end of the list\n    \"slow\",\n    # experimental mark for all tests using pexpect\n    \"uses_pexpect\",\n]\n\n[tool.towncrier]\npackage = \"pytest\"\npackage_dir = \"src\"\nfilename = \"doc/en/changelog.rst\"\ndirectory = \"changelog/\"\ntitle_format = \"pytest {version} ({project_date})\"\ntemplate = \"changelog/_template.rst\"\n\n# NOTE: The types are declared because:\n# NOTE: - there is no mechanism to override just the value of\n# NOTE:   `tool.towncrier.type.misc.showcontent`;\n# NOTE: - and, we want to declare extra non-default types for\n# NOTE:   clarity and flexibility.\n\n[[tool.towncrier.type]]\n# When something public gets removed in a breaking way. Could be\n# deprecated in an earlier release.\ndirectory = \"breaking\"\nname = \"Removals and backward incompatible breaking changes\"\nshowcontent = true\n\n[[tool.towncrier.type]]\n# Declarations of future API removals and breaking changes in behavior.\ndirectory = \"deprecation\"\nname = \"Deprecations (removal in next major release)\"\nshowcontent = true\n\n[[tool.towncrier.type]]\n# New behaviors, public APIs. That sort of stuff.\ndirectory = \"feature\"\nname = \"New features\"\nshowcontent = true\n\n[[tool.towncrier.type]]\n# New behaviors in existing features.\ndirectory = \"improvement\"\nname = \"Improvements in existing functionality\"\nshowcontent = true\n\n[[tool.towncrier.type]]\n# Something we deemed an improper undesired behavior that got corrected\n# in the release to match pre-agreed expectations.\ndirectory = \"bugfix\"\nname = \"Bug fixes\"\nshowcontent = true\n\n[[tool.towncrier.type]]\n# Updates regarding bundling dependencies.\ndirectory = \"vendor\"\nname = \"Vendored libraries\"\nshowcontent = true\n\n[[tool.towncrier.type]]\n# Notable updates to the documentation structure or build process.\ndirectory = \"doc\"\nname = \"Improved documentation\"\nshowcontent = true\n\n[[tool.towncrier.type]]\n# Notes for downstreams about unobvious side effects and tooling. Changes\n# in the test invocation considerations and runtime assumptions.\ndirectory = \"packaging\"\nname = \"Packaging updates and notes for downstreams\"\nshowcontent = true\n\n[[tool.towncrier.type]]\n# Stuff that affects the contributor experience. e.g. Running tests,\n# building the docs, setting up the development environment.\ndirectory = \"contrib\"\nname = \"Contributor-facing changes\"\nshowcontent = true\n\n[[tool.towncrier.type]]\n# Changes that are hard to assign to any of the above categories.\ndirectory = \"misc\"\nname = \"Miscellaneous internal changes\"\nshowcontent = true\n\n[tool.mypy]\nfiles = [\n    \"src\",\n    \"testing\",\n    \"scripts\",\n]\nmypy_path = [\n    \"src\",\n]\npython_version = \"3.9\"\ncheck_untyped_defs = true\ndisallow_any_generics = true\ndisallow_untyped_defs = true\nignore_missing_imports = true\nshow_error_codes = true\nstrict_equality = true\nwarn_redundant_casts = true\nwarn_return_any = true\nwarn_unreachable = true\nwarn_unused_configs = true\nno_implicit_reexport = true\nwarn_unused_ignores = true\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 6.037109375,
          "content": "[tox]\nisolated_build = True\nminversion = 3.20.0\ndistshare = {homedir}/.tox/distshare\nenvlist =\n    linting\n    py39\n    py310\n    py311\n    py312\n    py313\n    pypy3\n    py39-{pexpect,xdist,unittestextras,numpy,pluggymain,pylib}\n    doctesting\n    doctesting-coverage\n    plugins\n    py39-freeze\n    docs\n    docs-checklinks\n\n    # checks that 3.11 native ExceptionGroup works with exceptiongroup\n    # not included in CI.\n    py311-exceptiongroup\n\n\n\n[testenv]\ndescription =\n    run the tests\n    coverage: collecting coverage\n    exceptiongroup: against `exceptiongroup`\n    nobyte: in no-bytecode mode\n    lsof: with `--lsof` pytest CLI option\n    numpy: against `numpy`\n    pexpect: against `pexpect`\n    pluggymain: against the bleeding edge `pluggy` from Git\n    pylib: against `py` lib\n    unittestextras: against the unit test extras\n    xdist: with pytest in parallel mode\n    under `{basepython}`\n    doctesting: including doctests\ncommands =\n    {env:_PYTEST_TOX_COVERAGE_RUN:} pytest {posargs:{env:_PYTEST_TOX_DEFAULT_POSARGS:}}\n    doctesting: {env:_PYTEST_TOX_COVERAGE_RUN:} pytest --doctest-modules --pyargs _pytest\n    coverage: coverage combine\n    coverage: coverage report -m\npassenv =\n    COVERAGE_*\n    PYTEST_ADDOPTS\n    TERM\n    SETUPTOOLS_SCM_PRETEND_VERSION_FOR_PYTEST\nsetenv =\n    _PYTEST_TOX_DEFAULT_POSARGS={env:_PYTEST_TOX_POSARGS_DOCTESTING:} {env:_PYTEST_TOX_POSARGS_LSOF:} {env:_PYTEST_TOX_POSARGS_XDIST:}\n\n    # See https://docs.python.org/3/library/io.html#io-encoding-warning\n    # If we don't enable this, neither can any of our downstream users!\n    PYTHONWARNDEFAULTENCODING=1\n\n    # Configuration to run with coverage similar to CI, e.g.\n    # \"tox -e py39-coverage\".\n    coverage: _PYTEST_TOX_COVERAGE_RUN=coverage run -m\n    coverage: _PYTEST_TOX_EXTRA_DEP=coverage-enable-subprocess\n    coverage: COVERAGE_FILE={toxinidir}/.coverage\n    coverage: COVERAGE_PROCESS_START={toxinidir}/.coveragerc\n\n    doctesting: _PYTEST_TOX_POSARGS_DOCTESTING=doc/en\n\n    nobyte: PYTHONDONTWRITEBYTECODE=1\n\n    lsof: _PYTEST_TOX_POSARGS_LSOF=--lsof\n\n    xdist: _PYTEST_TOX_POSARGS_XDIST=-n auto\nextras = dev\ndeps =\n    doctesting: PyYAML\n    exceptiongroup: exceptiongroup>=1.0.0rc8\n    numpy: numpy>=1.19.4\n    pexpect: pexpect>=4.8.0\n    pluggymain: pluggy @ git+https://github.com/pytest-dev/pluggy.git\n    pylib: py>=1.8.2\n    unittestextras: twisted\n    unittestextras: asynctest\n    xdist: pytest-xdist>=2.1.0\n    xdist: -e .\n    {env:_PYTEST_TOX_EXTRA_DEP:}\n\n[testenv:linting]\ndescription =\n    run pre-commit-defined linters under `{basepython}`\nskip_install = True\nbasepython = python3\ndeps = pre-commit>=2.9.3\ncommands = pre-commit run --all-files --show-diff-on-failure {posargs:}\nsetenv =\n    # pre-commit and tools it launches are not clean of this warning.\n    PYTHONWARNDEFAULTENCODING=\n\n[testenv:docs]\ndescription =\n    build the documentation site under \\\n    `{toxinidir}{/}doc{/}en{/}_build{/}html` with `{basepython}`\nbasepython = python3.12 # sync with rtd to get errors\nusedevelop = True\ndeps =\n    -r{toxinidir}/doc/en/requirements.txt\nallowlist_externals =\n  git\ncommands =\n    # Retrieve possibly missing commits:\n    -git fetch --unshallow\n    -git fetch --tags\n\n    sphinx-build \\\n      -j auto \\\n      -W --keep-going \\\n      -b html doc/en doc/en/_build/html \\\n      {posargs:}\nsetenv =\n    # Sphinx is not clean of this warning.\n    PYTHONWARNDEFAULTENCODING=\n\n[testenv:docs-checklinks]\ndescription =\n    check the links in the documentation with `{basepython}`\nbasepython = python3\nusedevelop = True\nchangedir = doc/en\ndeps = -r{toxinidir}/doc/en/requirements.txt\ncommands =\n    sphinx-build -W -q --keep-going -b linkcheck . _build\nsetenv =\n    # Sphinx is not clean of this warning.\n    PYTHONWARNDEFAULTENCODING=\n\n[testenv:regen]\ndescription =\n    regenerate documentation examples under `{basepython}`\nchangedir = doc/en\nbasepython = python3\npassenv =\n    SETUPTOOLS_SCM_PRETEND_VERSION_FOR_PYTEST\ndeps =\n    PyYAML\n    regendoc>=0.8.1\n    sphinx\nallowlist_externals =\n    make\ncommands =\n    make regen\nsetenv =\n    # We don't want this warning to reach regen output.\n    PYTHONWARNDEFAULTENCODING=\n\n[testenv:plugins]\ndescription =\n    run reverse dependency testing against pytest plugins under `{basepython}`\n# use latest versions of all plugins, including pre-releases\npip_pre=true\n# use latest pip to get new dependency resolver (#7783)\ndownload=true\ninstall_command=python -m pip install {opts} {packages}\nchangedir = testing/plugins_integration\ndeps = -rtesting/plugins_integration/requirements.txt\nsetenv =\n    PYTHONPATH=.\ncommands =\n    pip check\n    pytest bdd_wallet.py\n    pytest --cov=. simple_integration.py\n    pytest --ds=django_settings simple_integration.py\n    pytest --html=simple.html simple_integration.py\n    pytest --reruns 5 simple_integration.py pytest_rerunfailures_integration.py\n    pytest pytest_anyio_integration.py\n    pytest pytest_asyncio_integration.py\n    pytest pytest_mock_integration.py\n    pytest pytest_trio_integration.py\n    pytest pytest_twisted_integration.py\n    pytest simple_integration.py --force-sugar --flakes\n\n[testenv:py39-freeze]\ndescription =\n    test pytest frozen with `pyinstaller` under `{basepython}`\nchangedir = testing/freeze\ndeps =\n    pyinstaller\ncommands =\n    {envpython} create_executable.py\n    {envpython} tox_run.py\n\n[testenv:release]\ndescription = do a release, required posarg of the version number\nbasepython = python3\nusedevelop = True\npassenv = *\ndeps =\n    colorama\n    github3.py\n    pre-commit>=2.9.3\n    wheel\n    # https://github.com/twisted/towncrier/issues/340\n    towncrier<21.3.0\ncommands = python scripts/release.py {posargs}\n\n[testenv:prepare-release-pr]\ndescription = prepare a release PR from a manual trigger in GitHub actions\nusedevelop = {[testenv:release]usedevelop}\npassenv = {[testenv:release]passenv}\ndeps = {[testenv:release]deps}\ncommands = python scripts/prepare-release-pr.py {posargs}\n\n[testenv:generate-gh-release-notes]\ndescription = generate release notes that can be published as GitHub Release\nbasepython = python3\nusedevelop = True\ndeps =\n    pypandoc\ncommands = python scripts/generate-gh-release-notes.py {posargs}\n"
        }
      ]
    }
  ]
}