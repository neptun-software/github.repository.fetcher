{
  "metadata": {
    "timestamp": 1736561287922,
    "page": 287,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "caronc/apprise",
      "stars": 12382,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.2841796875,
          "content": "[run]\ndata_file = .coverage-reports/.coverage\nbranch = True\nparallel = True\nsource =\n    apprise\n\n[paths]\nsource =\n   apprise\n   .tox/*/lib/python*/site-packages/apprise\n   .tox/pypy/site-packages/apprise\n\n[report]\nshow_missing = True\nskip_covered = True\nskip_empty = True\nfail_under = 95.0\n"
        },
        {
          "name": ".env",
          "type": "blob",
          "size": 0.05078125,
          "content": "LANG=C.UTF-8\nPYTHONPATH=.\nPYTHONDONTWRITEBYTECODE=1\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7373046875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# vi swap files\n.*.sw?\n\n# Distribution / packaging\n.Python\nenv/\n.venv*\nbuild/\nBUILDROOT/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib64/\nparts/\nsdist/\n*.egg-info/\n.installed.cfg\n*.egg\n.local\n\n# Generated from Docker Instance\n.bash_history\n.python_history\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n#Ipython Notebook\n.ipynb_checkpoints\n\n#PyCharm\n.idea\n\n#PyDev (Eclipse)\n.project\n.pydevproject\n.settings\n.DS_Store\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTIONS.md",
          "type": "blob",
          "size": 1.1044921875,
          "content": "# Contributions to the apprise project\n\n## Creator & Maintainer\n\n* Chris Caron <lead2gold@gmail.com>\n\n## Contributors\n\nThe following users have contributed to this project and their deserved\nrecognition has been identified here.  If you have contributed and wish\nto be acknowledged for it, the syntax is as follows:\n\n```\n* [Your name or handle] <[email or website]>\n  * [Month Year] - [Brief summary of your contribution]\n```\n\nThe contributors have been listed in chronological order:\n* Wim de With <wf@dewith.io>\n  * Dec 2018 - Added Matrix Support\n\n* Hitesh Sondhi <hitesh@cropsly.com>\n  * Mar 2019 - Added Flock Support\n\n* Andreas Motl <andreas.motl@panodata.org>\n  * Mar 2020 - Fix XMPP Support\n  * Oct 2022 - Drop support for Python 2\n  * Oct 2022 - Add support for Python 3.11\n  * Oct 2022 - Improve efficiency of NotifyEmail\n\n* Joey Espinosa <@particledecay>\n  * Apr 3rd 2022 - Added Ntfy Support\n\n* Kate Ward <https://kate.pet>\n  * 6th Feb 2024 - Add Revolt Support\n\n* Han Wang <freddie.wanah@gmail.com>\n  * Apr 2024 - Refactored test cases\n\n* Toni Wells <@isometimescode>\n  * May 2024 - Fixed token length with apprise://\n"
        },
        {
          "name": "KEYWORDS",
          "type": "blob",
          "size": 0.9921875,
          "content": "Africas Talking\nAlerts\nApprise API\nAutomated Packet Reporting System\nAWS\nBulkSMS\nBulkVS\nBurst SMS\nChanify\nChat\nCLI\nClickSend\nD7Networks\nDapnet\nDBus\nDingTalk\nDiscord\nEmail\nEmby\nEnigma2\nFCM\nFeishu\nFlock\nForm\nFree Mobile\nGnome\nGoogle Chat\nGotify\nGrowl\nGuilded\nHome Assistant\nhttpSMS\nIFTTT\nJoin\nJSON\nKavenegar\nKODI\nKumulos\nLaMetric\nLine\nLunaSea\nMacOSX\nMailgun\nMastodon\nMatrix\nMattermost\nMessageBird\nMicrosoft\nMisskey\nMQTT\nMSG91\nMSTeams\nNextcloud\nNextcloudTalk\nNotica\nNotifiarr\nNotifico\nNtfy\nOffice365\nOneSignal\nOpsgenie\nPagerDuty\nPagerTree\nParsePlatform\nPlivo\nPopcornNotify\nPower Automate\nProwl\nPushBullet\nPushed\nPushjet\nPushMe\nPush Notifications\nPushover\nPushSafer\nPushy\nPushDeer\nReddit\nRevolt\nRocket.Chat\nRSyslog\nRyver\nSendGrid\nServerChan\nSeven\nSES\nSFR\nSignal\nSimplePush\nSinch\nSlack\nSMSEagle\nSMS Manager\nSMTP2Go\nSNS\nSparkPost\nSplunk\nStreamlabs\nStride\nSynology Chat\nSyslog\nTechulus\nTelegram\nThreema Gateway\nTwilio\nTwist\nTwitter\nVictorOps\nVoipms\nVonage\nWebex\nWeCom Bot\nWhatsApp\nWindows\nWorkflows\nWxPusher\nXBMC\nXML\nZulip\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.3115234375,
          "content": "BSD 2-Clause License\n\nCopyright (c) 2025, Chris Caron <lead2gold@gmail.com>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2314453125,
          "content": "include LICENSE\ninclude KEYWORDS\ninclude README.md\ninclude requirements.txt\ninclude win-requirements.txt\ninclude dev-requirements.txt\nrecursive-include test *\nrecursive-include packaging *\nglobal-exclude *.pyc\nglobal-exclude __pycache__\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 49.2353515625,
          "content": "![Apprise Logo](https://raw.githubusercontent.com/caronc/apprise/master/apprise/assets/themes/default/apprise-logo.png)\n\n<hr/>\n\n**apÂ·prise** / *verb*<br/>\nTo inform or tell (someone). To make one aware of something.\n<hr/>\n\n*Apprise* allows you to send a notification to *almost* all of the most popular *notification* services available to us today such as: Telegram, Discord, Slack, Amazon SNS, Gotify, etc.\n\n* One notification library to rule them all.\n* A common and intuitive notification syntax.\n* Supports the handling of images and attachments (_to the notification services that will accept them_).\n* It's incredibly lightweight.\n* Amazing response times because all messages sent asynchronously.\n\nDevelopers who wish to provide a notification service no longer need to research each and every one out there. They no longer need to try to adapt to the new ones that comeout thereafter. They just need to include this one library and then they can immediately gain access to almost all of the notifications services available to us today.\n\nSystem Administrators and DevOps who wish to send a notification now no longer need to find the right tool for the job. Everything is already wrapped and supported within the `apprise` command line tool (CLI) that ships with this product.\n\n[![Paypal](https://img.shields.io/badge/paypal-donate-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=MHANV39UZNQ5E)\n[![Follow](https://img.shields.io/twitter/follow/l2gnux)](https://twitter.com/l2gnux/)<br/>\n[![Discord](https://img.shields.io/discord/558793703356104724.svg?colorB=7289DA&label=Discord&logo=Discord&logoColor=7289DA&style=flat-square)](https://discord.gg/MMPeN2D)\n[![Python](https://img.shields.io/pypi/pyversions/apprise.svg?style=flat-square)](https://pypi.org/project/apprise/)\n[![Build Status](https://github.com/caronc/apprise/actions/workflows/tests.yml/badge.svg)](https://github.com/caronc/apprise/actions/workflows/tests.yml)\n[![CodeCov Status](https://codecov.io/github/caronc/apprise/branch/master/graph/badge.svg)](https://codecov.io/github/caronc/apprise)\n[![PyPi](https://img.shields.io/pypi/dm/apprise.svg?style=flat-square)](https://pypi.org/project/apprise/)\n\n# Table of Contents\n<!--ts-->\n* [Supported Notifications](#supported-notifications)\n  * [Productivity Based Notifications](#productivity-based-notifications)\n  * [SMS Notifications](#sms-notifications)\n  * [Desktop Notifications](#desktop-notifications)\n  * [Email Notifications](#email-notifications)\n  * [Custom Notifications](#custom-notifications)\n* [Installation](#installation)\n* [Command Line Usage](#command-line-usage)\n  * [Configuration Files](#cli-configuration-files)\n  * [File Attachments](#cli-file-attachments)\n  * [Loading Custom Notifications/Hooks](#cli-loading-custom-notificationshooks)\n  * [Environment Variables](#cli-environment-variables)\n* [Developer API Usage](#developer-api-usage)\n  * [Configuration Files](#api-configuration-files)\n  * [File Attachments](#api-file-attachments)\n  * [Loading Custom Notifications/Hooks](#api-loading-custom-notificationshooks)\n* [Persistent Storage](#persistent-storage)\n* [More Supported Links and Documentation](#want-to-learn-more)\n<!--te-->\n\n# Supported Notifications\n\nThe section identifies all of the services supported by this library. [Check out the wiki for more information on the supported modules here](https://github.com/caronc/apprise/wiki).\n\n## Productivity Based Notifications\n\nThe table below identifies the services this tool supports and some example service urls you need to use in order to take advantage of it. Click on any of the services listed below to get more details on how you can configure Apprise to access them.\n\n| Notification Service | Service ID | Default Port | Example Syntax |\n| -------------------- | ---------- | ------------ | -------------- |\n| [Apprise API](https://github.com/caronc/apprise/wiki/Notify_apprise_api)  | apprise:// or apprises:// | (TCP) 80 or 443 | apprise://hostname/Token\n| [AWS SES](https://github.com/caronc/apprise/wiki/Notify_ses)  | ses://   | (TCP) 443   | ses://user@domain/AccessKeyID/AccessSecretKey/RegionName<br/>ses://user@domain/AccessKeyID/AccessSecretKey/RegionName/email1/email2/emailN\n| [Bark](https://github.com/caronc/apprise/wiki/Notify_bark)  | bark://   | (TCP) 80 or 443   | bark://hostname<br />bark://hostname/device_key<br />bark://hostname/device_key1/device_key2/device_keyN<br/>barks://hostname<br />barks://hostname/device_key<br />barks://hostname/device_key1/device_key2/device_keyN\n| [Chanify](https://github.com/caronc/apprise/wiki/Notify_chanify) | chantify://    | (TCP) 443    | chantify://token\n| [Discord](https://github.com/caronc/apprise/wiki/Notify_discord)  | discord://   | (TCP) 443   | discord://webhook_id/webhook_token<br />discord://avatar@webhook_id/webhook_token\n| [Emby](https://github.com/caronc/apprise/wiki/Notify_emby)  | emby:// or embys:// | (TCP) 8096 | emby://user@hostname/<br />emby://user:password@hostname\n| [Enigma2](https://github.com/caronc/apprise/wiki/Notify_enigma2)  | enigma2:// or enigma2s:// | (TCP) 80 or 443 | enigma2://hostname\n| [FCM](https://github.com/caronc/apprise/wiki/Notify_fcm) | fcm://    | (TCP) 443    | fcm://project@apikey/DEVICE_ID<br />fcm://project@apikey/#TOPIC<br/>fcm://project@apikey/DEVICE_ID1/#topic1/#topic2/DEVICE_ID2/\n| [Feishu](https://github.com/caronc/apprise/wiki/Notify_feishu) | feishu://    | (TCP) 443    | feishu://token\n| [Flock](https://github.com/caronc/apprise/wiki/Notify_flock) | flock://    | (TCP) 443    | flock://token<br/>flock://botname@token<br/>flock://app_token/u:userid<br/>flock://app_token/g:channel_id<br/>flock://app_token/u:userid/g:channel_id\n| [Google Chat](https://github.com/caronc/apprise/wiki/Notify_googlechat) | gchat://    | (TCP) 443    | gchat://workspace/key/token\n| [Gotify](https://github.com/caronc/apprise/wiki/Notify_gotify) | gotify:// or gotifys://   | (TCP) 80 or 443    | gotify://hostname/token<br />gotifys://hostname/token?priority=high\n| [Growl](https://github.com/caronc/apprise/wiki/Notify_growl)  | growl://   | (UDP) 23053   | growl://hostname<br />growl://hostname:portno<br />growl://password@hostname<br />growl://password@hostname:port</br>**Note**: you can also use the get parameter _version_ which can allow the growl request to behave using the older v1.x protocol. An example would look like: growl://hostname?version=1\n| [Guilded](https://github.com/caronc/apprise/wiki/Notify_guilded)  | guilded://   | (TCP) 443   | guilded://webhook_id/webhook_token<br />guilded://avatar@webhook_id/webhook_token\n| [Home Assistant](https://github.com/caronc/apprise/wiki/Notify_homeassistant)       | hassio:// or hassios://   | (TCP) 8123 or 443 | hassio://hostname/accesstoken<br />hassio://user@hostname/accesstoken<br />hassio://user:password@hostname:port/accesstoken<br />hassio://hostname/optional/path/accesstoken\n| [IFTTT](https://github.com/caronc/apprise/wiki/Notify_ifttt) | ifttt://    | (TCP) 443    | ifttt://webhooksID/Event<br />ifttt://webhooksID/Event1/Event2/EventN<br/>ifttt://webhooksID/Event1/?+Key=Value<br/>ifttt://webhooksID/Event1/?-Key=value1\n| [Join](https://github.com/caronc/apprise/wiki/Notify_join) | join://   | (TCP) 443    | join://apikey/device<br />join://apikey/device1/device2/deviceN/<br />join://apikey/group<br />join://apikey/groupA/groupB/groupN<br />join://apikey/DeviceA/groupA/groupN/DeviceN/\n| [KODI](https://github.com/caronc/apprise/wiki/Notify_kodi) | kodi:// or kodis://    | (TCP) 8080 or 443   | kodi://hostname<br />kodi://user@hostname<br />kodi://user:password@hostname:port\n| [Kumulos](https://github.com/caronc/apprise/wiki/Notify_kumulos) | kumulos:// | (TCP) 443 | kumulos://apikey/serverkey\n| [LaMetric Time](https://github.com/caronc/apprise/wiki/Notify_lametric) | lametric:// | (TCP) 443 | lametric://apikey@device_ipaddr<br/>lametric://apikey@hostname:port<br/>lametric://client_id@client_secret\n| [Line](https://github.com/caronc/apprise/wiki/Notify_line) | line:// | (TCP) 443 | line://Token@User<br/>line://Token/User1/User2/UserN\n| [LunaSea](https://github.com/caronc/apprise/wiki/Notify_lunasea) | lunasea://  | (TCP) 80 or 443   | lunasea://user:pass@+FireBaseDevice/<br/>lunasea://user:pass@FireBaseUser/<br/>lunasea://user:pass@hostname/+FireBaseDevice/<br/>lunasea://user:pass@hostname/@FireBaseUser/\n| [Mailgun](https://github.com/caronc/apprise/wiki/Notify_mailgun) | mailgun:// | (TCP) 443 | mailgun://user@hostname/apikey<br />mailgun://user@hostname/apikey/email<br />mailgun://user@hostname/apikey/email1/email2/emailN<br />mailgun://user@hostname/apikey/?name=\"From%20User\"\n| [Mastodon](https://github.com/caronc/apprise/wiki/Notify_mastodon) | mastodon:// or mastodons://| (TCP) 80 or 443  | mastodon://access_key@hostname<br />mastodon://access_key@hostname/@user<br />mastodon://access_key@hostname/@user1/@user2/@userN\n| [Matrix](https://github.com/caronc/apprise/wiki/Notify_matrix) | matrix:// or matrixs://  | (TCP) 80 or 443 | matrix://hostname<br />matrix://user@hostname<br />matrixs://user:pass@hostname:port/#room_alias<br />matrixs://user:pass@hostname:port/!room_id<br />matrixs://user:pass@hostname:port/#room_alias/!room_id/#room2<br />matrixs://token@hostname:port/?webhook=matrix<br />matrix://user:token@hostname/?webhook=slack&format=markdown\n| [Mattermost](https://github.com/caronc/apprise/wiki/Notify_mattermost) | mmost:// or mmosts:// | (TCP) 8065 | mmost://hostname/authkey<br />mmost://hostname:80/authkey<br />mmost://user@hostname:80/authkey<br />mmost://hostname/authkey?channel=channel<br />mmosts://hostname/authkey<br />mmosts://user@hostname/authkey<br />\n| [Microsoft Power Automate / Workflows (MSTeams)](https://github.com/caronc/apprise/wiki/Notify_workflows) | workflows://  | (TCP) 443   | workflows://WorkflowID/Signature/\n| [Microsoft Teams](https://github.com/caronc/apprise/wiki/Notify_msteams) | msteams://  | (TCP) 443   | msteams://TokenA/TokenB/TokenC/\n| [Misskey](https://github.com/caronc/apprise/wiki/Notify_misskey) | misskey:// or misskeys://| (TCP) 80 or 443  | misskey://access_token@hostname\n| [MQTT](https://github.com/caronc/apprise/wiki/Notify_mqtt) | mqtt://  or mqtts:// | (TCP) 1883 or 8883   | mqtt://hostname/topic<br />mqtt://user@hostname/topic<br />mqtts://user:pass@hostname:9883/topic\n| [Nextcloud](https://github.com/caronc/apprise/wiki/Notify_nextcloud) | ncloud:// or nclouds:// | (TCP) 80 or 443 | ncloud://adminuser:pass@host/User<br/>nclouds://adminuser:pass@host/User1/User2/UserN\n| [NextcloudTalk](https://github.com/caronc/apprise/wiki/Notify_nextcloudtalk) | nctalk:// or nctalks:// | (TCP) 80 or 443 | nctalk://user:pass@host/RoomId<br/>nctalks://user:pass@host/RoomId1/RoomId2/RoomIdN\n| [Notica](https://github.com/caronc/apprise/wiki/Notify_notica) | notica://  | (TCP) 443   | notica://Token/\n| [Notifiarr](https://github.com/caronc/apprise/wiki/Notify_notifiarr) | notifiarr:// | (TCP) 443 | notifiarr://apikey/#channel<br />notifiarr://apikey/#channel1/#channel2/#channeln\n| [Notifico](https://github.com/caronc/apprise/wiki/Notify_notifico) | notifico://  | (TCP) 443   | notifico://ProjectID/MessageHook/\n| [ntfy](https://github.com/caronc/apprise/wiki/Notify_ntfy) | ntfy://  | (TCP) 80 or 443   | ntfy://topic/<br/>ntfys://topic/\n| [Office 365](https://github.com/caronc/apprise/wiki/Notify_office365) | o365://  | (TCP) 443   | o365://TenantID:AccountEmail/ClientID/ClientSecret<br />o365://TenantID:AccountEmail/ClientID/ClientSecret/TargetEmail<br />o365://TenantID:AccountEmail/ClientID/ClientSecret/TargetEmail1/TargetEmail2/TargetEmailN\n| [OneSignal](https://github.com/caronc/apprise/wiki/Notify_onesignal) | onesignal:// | (TCP) 443 | onesignal://AppID@APIKey/PlayerID<br/>onesignal://TemplateID:AppID@APIKey/UserID<br/>onesignal://AppID@APIKey/#IncludeSegment<br/>onesignal://AppID@APIKey/Email\n| [Opsgenie](https://github.com/caronc/apprise/wiki/Notify_opsgenie) | opsgenie:// | (TCP) 443 | opsgenie://APIKey<br/>opsgenie://APIKey/UserID<br/>opsgenie://APIKey/#Team<br/>opsgenie://APIKey/\\*Schedule<br/>opsgenie://APIKey/^Escalation\n| [PagerDuty](https://github.com/caronc/apprise/wiki/Notify_pagerduty) | pagerduty:// | (TCP) 443 | pagerduty://IntegrationKey@ApiKey<br/>pagerduty://IntegrationKey@ApiKey/Source/Component\n| [PagerTree](https://github.com/caronc/apprise/wiki/Notify_pagertree) | pagertree:// | (TCP) 443 | pagertree://integration_id\n| [ParsePlatform](https://github.com/caronc/apprise/wiki/Notify_parseplatform) | parsep:// or parseps:// | (TCP) 80 or 443 | parsep://AppID:MasterKey@Hostname<br/>parseps://AppID:MasterKey@Hostname\n| [PopcornNotify](https://github.com/caronc/apprise/wiki/Notify_popcornnotify) | popcorn://  | (TCP) 443   | popcorn://ApiKey/ToPhoneNo<br/>popcorn://ApiKey/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/<br/>popcorn://ApiKey/ToEmail<br/>popcorn://ApiKey/ToEmail1/ToEmail2/ToEmailN/<br/>popcorn://ApiKey/ToPhoneNo1/ToEmail1/ToPhoneNoN/ToEmailN\n| [Prowl](https://github.com/caronc/apprise/wiki/Notify_prowl) | prowl://   | (TCP) 443    | prowl://apikey<br />prowl://apikey/providerkey\n| [PushBullet](https://github.com/caronc/apprise/wiki/Notify_pushbullet) | pbul://    | (TCP) 443    | pbul://accesstoken<br />pbul://accesstoken/#channel<br/>pbul://accesstoken/A_DEVICE_ID<br />pbul://accesstoken/email@address.com<br />pbul://accesstoken/#channel/#channel2/email@address.net/DEVICE\n| [Pushjet](https://github.com/caronc/apprise/wiki/Notify_pushjet) | pjet:// or pjets:// | (TCP) 80 or 443 | pjet://hostname/secret<br />pjet://hostname:port/secret<br />pjets://secret@hostname/secret<br />pjets://hostname:port/secret\n| [Push (Techulus)](https://github.com/caronc/apprise/wiki/Notify_techulus) | push://    | (TCP) 443    | push://apikey/\n| [Pushed](https://github.com/caronc/apprise/wiki/Notify_pushed) | pushed://    | (TCP) 443    | pushed://appkey/appsecret/<br/>pushed://appkey/appsecret/#ChannelAlias<br/>pushed://appkey/appsecret/#ChannelAlias1/#ChannelAlias2/#ChannelAliasN<br/>pushed://appkey/appsecret/@UserPushedID<br/>pushed://appkey/appsecret/@UserPushedID1/@UserPushedID2/@UserPushedIDN\n| [PushMe](https://github.com/caronc/apprise/wiki/Notify_pushme) | pushme://  | (TCP) 443   | pushme://Token/\n| [Pushover](https://github.com/caronc/apprise/wiki/Notify_pushover)  | pover://   | (TCP) 443   | pover://user@token<br />pover://user@token/DEVICE<br />pover://user@token/DEVICE1/DEVICE2/DEVICEN<br />**Note**: you must specify both your user_id and token\n| [PushSafer](https://github.com/caronc/apprise/wiki/Notify_pushsafer)  | psafer:// or psafers://  | (TCP) 80 or 443  | psafer://privatekey<br />psafers://privatekey/DEVICE<br />psafer://privatekey/DEVICE1/DEVICE2/DEVICEN\n| [Pushy](https://github.com/caronc/apprise/wiki/Notify_pushy)  | pushy://  | (TCP) 443  | pushy://apikey/DEVICE<br />pushy://apikey/DEVICE1/DEVICE2/DEVICEN<br />pushy://apikey/TOPIC<br />pushy://apikey/TOPIC1/TOPIC2/TOPICN\n| [PushDeer](https://github.com/caronc/apprise/wiki/Notify_pushdeer) | pushdeer:// or pushdeers:// | (TCP) 80 or 443 | pushdeer://pushKey<br />pushdeer://hostname/pushKey<br />pushdeer://hostname:port/pushKey\n| [Reddit](https://github.com/caronc/apprise/wiki/Notify_reddit) | reddit:// | (TCP) 443   | reddit://user:password@app_id/app_secret/subreddit<br />reddit://user:password@app_id/app_secret/sub1/sub2/subN\n| [Revolt](https://github.com/caronc/apprise/wiki/Notify_Revolt) | revolt:// | (TCP) 443   |  revolt://bottoken/ChannelID<br />revolt://bottoken/ChannelID1/ChannelID2/ChannelIDN |\n| [Rocket.Chat](https://github.com/caronc/apprise/wiki/Notify_rocketchat) | rocket:// or rockets://  | (TCP) 80 or 443   | rocket://user:password@hostname/RoomID/Channel<br />rockets://user:password@hostname:443/#Channel1/#Channel1/RoomID<br />rocket://user:password@hostname/#Channel<br />rocket://webhook@hostname<br />rockets://webhook@hostname/@User/#Channel\n| [RSyslog](https://github.com/caronc/apprise/wiki/Notify_rsyslog) | rsyslog://  | (UDP) 514 | rsyslog://hostname<br />rsyslog://hostname/Facility\n| [Ryver](https://github.com/caronc/apprise/wiki/Notify_ryver) | ryver://  | (TCP) 443   | ryver://Organization/Token<br />ryver://botname@Organization/Token\n| [SendGrid](https://github.com/caronc/apprise/wiki/Notify_sendgrid) | sendgrid://  | (TCP) 443   | sendgrid://APIToken:FromEmail/<br />sendgrid://APIToken:FromEmail/ToEmail<br />sendgrid://APIToken:FromEmail/ToEmail1/ToEmail2/ToEmailN/\n| [ServerChan](https://github.com/caronc/apprise/wiki/Notify_serverchan) | schan://   | (TCP) 443    | schan://sendkey/\n| [Signal API](https://github.com/caronc/apprise/wiki/Notify_signal) | signal://  or signals:// | (TCP) 80 or 443  | signal://hostname:port/FromPhoneNo<br/>signal://hostname:port/FromPhoneNo/ToPhoneNo<br/>signal://hostname:port/FromPhoneNo/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/\n| [SimplePush](https://github.com/caronc/apprise/wiki/Notify_simplepush) | spush://   | (TCP) 443    | spush://apikey<br />spush://salt:password@apikey<br />spush://apikey?event=Apprise\n| [Slack](https://github.com/caronc/apprise/wiki/Notify_slack) | slack://  | (TCP) 443   | slack://TokenA/TokenB/TokenC/<br />slack://TokenA/TokenB/TokenC/Channel<br />slack://botname@TokenA/TokenB/TokenC/Channel<br />slack://user@TokenA/TokenB/TokenC/Channel1/Channel2/ChannelN\n| [SMTP2Go](https://github.com/caronc/apprise/wiki/Notify_smtp2go) | smtp2go:// | (TCP) 443 | smtp2go://user@hostname/apikey<br />smtp2go://user@hostname/apikey/email<br />smtp2go://user@hostname/apikey/email1/email2/emailN<br />smtp2go://user@hostname/apikey/?name=\"From%20User\"\n| [SparkPost](https://github.com/caronc/apprise/wiki/Notify_sparkpost) | sparkpost:// | (TCP) 443 | sparkpost://user@hostname/apikey<br />sparkpost://user@hostname/apikey/email<br />sparkpost://user@hostname/apikey/email1/email2/emailN<br />sparkpost://user@hostname/apikey/?name=\"From%20User\"\n| [Splunk](https://github.com/caronc/apprise/wiki/Notify_splunk) | splunk:// or victorops:/ | (TCP) 443 | splunk://route_key@apikey<br />splunk://route_key@apikey/entity_id\n| [Streamlabs](https://github.com/caronc/apprise/wiki/Notify_streamlabs) | strmlabs:// | (TCP) 443 | strmlabs://AccessToken/<br/>strmlabs://AccessToken/?name=name&identifier=identifier&amount=0&currency=USD\n| [Synology Chat](https://github.com/caronc/apprise/wiki/Notify_synology_chat) | synology:// or synologys:// |  (TCP) 80 or 443 | synology://hostname/token<br />synology://hostname:port/token\n| [Syslog](https://github.com/caronc/apprise/wiki/Notify_syslog) | syslog://  | n/a | syslog://<br />syslog://Facility\n| [Telegram](https://github.com/caronc/apprise/wiki/Notify_telegram) | tgram://  | (TCP) 443   | tgram://bottoken/ChatID<br />tgram://bottoken/ChatID1/ChatID2/ChatIDN\n| [Twitter](https://github.com/caronc/apprise/wiki/Notify_twitter) | twitter://  | (TCP) 443   | twitter://CKey/CSecret/AKey/ASecret<br/>twitter://user@CKey/CSecret/AKey/ASecret<br/>twitter://CKey/CSecret/AKey/ASecret/User1/User2/User2<br/>twitter://CKey/CSecret/AKey/ASecret?mode=tweet\n| [Twist](https://github.com/caronc/apprise/wiki/Notify_twist) | twist://  | (TCP) 443   | twist://pasword:login<br/>twist://password:login/#channel<br/>twist://password:login/#team:channel<br/>twist://password:login/#team:channel1/channel2/#team3:channel\n| [Webex Teams (Cisco)](https://github.com/caronc/apprise/wiki/Notify_wxteams) | wxteams://  | (TCP) 443   | wxteams://Token\n| [WeCom Bot](https://github.com/caronc/apprise/wiki/Notify_wecombot) | wecombot://  | (TCP) 443   | wecombot://BotKey\n| [WhatsApp](https://github.com/caronc/apprise/wiki/Notify_whatsapp) | whatsapp://  | (TCP) 443   | whatsapp://AccessToken@FromPhoneID/ToPhoneNo<br/>whatsapp://Template:AccessToken@FromPhoneID/ToPhoneNo\n| [WxPusher](https://github.com/caronc/apprise/wiki/Notify_wxpusher) | wxpusher://  | (TCP) 443   | wxpusher://AppToken@UserID1/UserID2/UserIDN<br/>wxpusher://AppToken@Topic1/Topic2/Topic3<br/>wxpusher://AppToken@UserID1/Topic1/\n| [XBMC](https://github.com/caronc/apprise/wiki/Notify_xbmc) | xbmc:// or xbmcs://    | (TCP) 8080 or 443   | xbmc://hostname<br />xbmc://user@hostname<br />xbmc://user:password@hostname:port\n| [Zulip Chat](https://github.com/caronc/apprise/wiki/Notify_zulip) | zulip://  | (TCP) 443   | zulip://botname@Organization/Token<br />zulip://botname@Organization/Token/Stream<br />zulip://botname@Organization/Token/Email\n\n## SMS Notifications\n\n| Notification Service | Service ID | Default Port | Example Syntax |\n| -------------------- | ---------- | ------------ | -------------- |\n| [Africas Talking](https://github.com/caronc/apprise/wiki/Notify_africas_talking) | atalk://  | (TCP) 443   | atalk://AppUser@ApiKey/ToPhoneNo<br/>atalk://AppUser@ApiKey/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/\n| [Automated Packet Reporting System (ARPS)](https://github.com/caronc/apprise/wiki/Notify_aprs)  | aprs:// | (TCP) 10152 | aprs://user:pass@callsign<br/>aprs://user:pass@callsign1/callsign2/callsignN\n| [AWS SNS](https://github.com/caronc/apprise/wiki/Notify_sns)  | sns://   | (TCP) 443   | sns://AccessKeyID/AccessSecretKey/RegionName/+PhoneNo<br/>sns://AccessKeyID/AccessSecretKey/RegionName/+PhoneNo1/+PhoneNo2/+PhoneNoN<br/>sns://AccessKeyID/AccessSecretKey/RegionName/Topic<br/>sns://AccessKeyID/AccessSecretKey/RegionName/Topic1/Topic2/TopicN\n| [BulkSMS](https://github.com/caronc/apprise/wiki/Notify_bulksms) | bulksms://  | (TCP) 443   | bulksms://user:password@ToPhoneNo<br/>bulksms://User:Password@ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/\n| [BulkVS](https://github.com/caronc/apprise/wiki/Notify_bulkvs) | bulkvs://  | (TCP) 443   | bulkvs://user:password@FromPhoneNo<br/>bulkvs://user:password@FromPhoneNo/ToPhoneNo<br/>bulkvs://user:password@FromPhoneNo/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/\n| [Burst SMS](https://github.com/caronc/apprise/wiki/Notify_burst_sms) | burstsms://  | (TCP) 443   | burstsms://ApiKey:ApiSecret@FromPhoneNo/ToPhoneNo<br/>burstsms://ApiKey:ApiSecret@FromPhoneNo/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/\n| [ClickSend](https://github.com/caronc/apprise/wiki/Notify_clicksend) | clicksend://  | (TCP) 443   | clicksend://user:pass@PhoneNo<br/>clicksend://user:pass@ToPhoneNo1/ToPhoneNo2/ToPhoneNoN\n| [DAPNET](https://github.com/caronc/apprise/wiki/Notify_dapnet) | dapnet://  | (TCP) 80   | dapnet://user:pass@callsign<br/>dapnet://user:pass@callsign1/callsign2/callsignN\n| [D7 Networks](https://github.com/caronc/apprise/wiki/Notify_d7networks) | d7sms://  | (TCP) 443   | d7sms://token@PhoneNo<br/>d7sms://token@ToPhoneNo1/ToPhoneNo2/ToPhoneNoN\n| [DingTalk](https://github.com/caronc/apprise/wiki/Notify_dingtalk)  | dingtalk://   | (TCP) 443   | dingtalk://token/<br />dingtalk://token/ToPhoneNo<br />dingtalk://token/ToPhoneNo1/ToPhoneNo2/ToPhoneNo1/\n| [Free-Mobile](https://github.com/caronc/apprise/wiki/Notify_freemobile)  | freemobile://   | (TCP) 443   | freemobile://user@password/\n| [httpSMS](https://github.com/caronc/apprise/wiki/Notify_httpsms) | httpsms://  | (TCP) 443   | httpsms://ApiKey@FromPhoneNo<br/>httpsms://ApiKey@FromPhoneNo/ToPhoneNo<br/>httpsms://ApiKey@FromPhoneNo/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/\n| [Kavenegar](https://github.com/caronc/apprise/wiki/Notify_kavenegar) | kavenegar://  | (TCP) 443   | kavenegar://ApiKey/ToPhoneNo<br/>kavenegar://FromPhoneNo@ApiKey/ToPhoneNo<br/>kavenegar://ApiKey/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN\n| [MessageBird](https://github.com/caronc/apprise/wiki/Notify_messagebird) | msgbird://  | (TCP) 443   | msgbird://ApiKey/FromPhoneNo<br/>msgbird://ApiKey/FromPhoneNo/ToPhoneNo<br/>msgbird://ApiKey/FromPhoneNo/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/\n| [MSG91](https://github.com/caronc/apprise/wiki/Notify_msg91) | msg91://  | (TCP) 443   | msg91://TemplateID@AuthKey/ToPhoneNo<br/>msg91://TemplateID@AuthKey/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/\n| [Plivo](https://github.com/caronc/apprise/wiki/Notify_plivo) | plivo://  | (TCP) 443   | plivo://AuthID@Token@FromPhoneNo<br/>plivo://AuthID@Token/FromPhoneNo/ToPhoneNo<br/>plivo://AuthID@Token/FromPhoneNo/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/\n| [Seven](https://github.com/caronc/apprise/wiki/Notify_seven)                                   | seven://                    | (TCP) 443   | seven://ApiKey/FromPhoneNo<br/>seven://ApiKey/FromPhoneNo/ToPhoneNo<br/>seven://ApiKey/FromPhoneNo/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/\n| [SociÃ©tÃ© FranÃ§aise du RadiotÃ©lÃ©phone (SFR)](https://github.com/caronc/apprise/wiki/Notify_sfr) | sfr://   | (TCP) 443    | sfr://user:password>@spaceId/ToPhoneNo<br/>sfr://user:password>@spaceId/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/\n| [Signal API](https://github.com/caronc/apprise/wiki/Notify_signal) | signal://  or signals:// | (TCP) 80 or 443  | signal://hostname:port/FromPhoneNo<br/>signal://hostname:port/FromPhoneNo/ToPhoneNo<br/>signal://hostname:port/FromPhoneNo/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/\n| [Sinch](https://github.com/caronc/apprise/wiki/Notify_sinch) | sinch://  | (TCP) 443   | sinch://ServicePlanId:ApiToken@FromPhoneNo<br/>sinch://ServicePlanId:ApiToken@FromPhoneNo/ToPhoneNo<br/>sinch://ServicePlanId:ApiToken@FromPhoneNo/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/<br/>sinch://ServicePlanId:ApiToken@ShortCode/ToPhoneNo<br/>sinch://ServicePlanId:ApiToken@ShortCode/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/\n| [SMSEagle](https://github.com/caronc/apprise/wiki/Notify_smseagle) | smseagle:// or smseagles:// | (TCP) 80 or 443  | smseagles://hostname:port/ToPhoneNo<br/>smseagles://hostname:port/@ToContact<br/>smseagles://hostname:port/#ToGroup<br/>smseagles://hostname:port/ToPhoneNo1/#ToGroup/@ToContact/\n| [SMS Manager](https://github.com/caronc/apprise/wiki/Notify_sms_manager) | smsmgr://  | (TCP) 443   | smsmgr://ApiKey@ToPhoneNo<br/>smsmgr://ApiKey@ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/\n| [Threema Gateway](https://github.com/caronc/apprise/wiki/Notify_threema) | threema://  | (TCP) 443   | threema://GatewayID@secret/ToPhoneNo<br/>threema://GatewayID@secret/ToEmail<br/>threema://GatewayID@secret/ToThreemaID/<br/>threema://GatewayID@secret/ToEmail/ToThreemaID/ToPhoneNo/...\n| [Twilio](https://github.com/caronc/apprise/wiki/Notify_twilio) | twilio://  | (TCP) 443   | twilio://AccountSid:AuthToken@FromPhoneNo<br/>twilio://AccountSid:AuthToken@FromPhoneNo/ToPhoneNo<br/>twilio://AccountSid:AuthToken@FromPhoneNo/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/<br/>twilio://AccountSid:AuthToken@FromPhoneNo/ToPhoneNo?apikey=Key<br/>twilio://AccountSid:AuthToken@ShortCode/ToPhoneNo<br/>twilio://AccountSid:AuthToken@ShortCode/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/\n| [Voipms](https://github.com/caronc/apprise/wiki/Notify_voipms) | voipms://  | (TCP) 443   | voipms://password:email/FromPhoneNo<br/>voipms://password:email/FromPhoneNo/ToPhoneNo<br/>voipms://password:email/FromPhoneNo/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/\n| [Vonage](https://github.com/caronc/apprise/wiki/Notify_nexmo) (formerly Nexmo) | nexmo://  | (TCP) 443   | nexmo://ApiKey:ApiSecret@FromPhoneNo<br/>nexmo://ApiKey:ApiSecret@FromPhoneNo/ToPhoneNo<br/>nexmo://ApiKey:ApiSecret@FromPhoneNo/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/\n\n## Desktop Notifications\n\n| Notification Service | Service ID | Default Port | Example Syntax |\n| -------------------- | ---------- | ------------ | -------------- |\n| [Linux DBus Notifications](https://github.com/caronc/apprise/wiki/Notify_dbus)  | dbus://<br />qt://<br />glib://<br />kde://  | n/a  | dbus://<br />qt://<br />glib://<br />kde://\n| [Linux Gnome Notifications](https://github.com/caronc/apprise/wiki/Notify_gnome) | gnome://    |        n/a          | gnome://\n| [MacOS X Notifications](https://github.com/caronc/apprise/wiki/Notify_macosx) | macosx://    |        n/a          | macosx://\n| [Windows Notifications](https://github.com/caronc/apprise/wiki/Notify_windows) | windows://    |        n/a          | windows://\n\n## Email Notifications\n\n| Service ID | Default Port | Example Syntax |\n| ---------- | ------------ | -------------- |\n| [mailto://](https://github.com/caronc/apprise/wiki/Notify_email)  |  (TCP) 25    | mailto://userid:pass@domain.com<br />mailto://domain.com?user=userid&pass=password<br/>mailto://domain.com:2525?user=userid&pass=password<br />mailto://user@gmail.com&pass=password<br />mailto://mySendingUsername:mySendingPassword@example.com?to=receivingAddress@example.com<br />mailto://userid:password@example.com?smtp=mail.example.com&from=noreply@example.com&name=no%20reply\n| [mailtos://](https://github.com/caronc/apprise/wiki/Notify_email) |  (TCP) 587   | mailtos://userid:pass@domain.com<br />mailtos://domain.com?user=userid&pass=password<br/>mailtos://domain.com:465?user=userid&pass=password<br />mailtos://user@hotmail.com&pass=password<br />mailtos://mySendingUsername:mySendingPassword@example.com?to=receivingAddress@example.com<br />mailtos://userid:password@example.com?smtp=mail.example.com&from=noreply@example.com&name=no%20reply\n\nApprise have some email services built right into it (such as yahoo, fastmail, hotmail, gmail, etc) that greatly simplify the mailto:// service.  See more details [here](https://github.com/caronc/apprise/wiki/Notify_email).\n\n## Custom Notifications\n\n| Post Method          | Service ID | Default Port | Example Syntax |\n| -------------------- | ---------- | ------------ | -------------- |\n| [Form](https://github.com/caronc/apprise/wiki/Notify_Custom_Form)       | form:// or forms://   | (TCP) 80 or 443 | form://hostname<br />form://user@hostname<br />form://user:password@hostname:port<br />form://hostname/a/path/to/post/to\n| [JSON](https://github.com/caronc/apprise/wiki/Notify_Custom_JSON)       | json:// or jsons://   | (TCP) 80 or 443 | json://hostname<br />json://user@hostname<br />json://user:password@hostname:port<br />json://hostname/a/path/to/post/to\n| [XML](https://github.com/caronc/apprise/wiki/Notify_Custom_XML)         | xml:// or xmls://   | (TCP) 80 or 443 | xml://hostname<br />xml://user@hostname<br />xml://user:password@hostname:port<br />xml://hostname/a/path/to/post/to\n\n# Installation\n\nThe easiest way is to install this package is from pypi:\n```bash\npip install apprise\n```\n\nApprise is also packaged as an RPM and available through [EPEL](https://docs.fedoraproject.org/en-US/epel/) supporting CentOS, Redhat, Rocky, Oracle Linux, etc.\n```bash\n# Follow instructions on https://docs.fedoraproject.org/en-US/epel\n# to get your system connected up to EPEL and then:\n# Redhat/CentOS 7.x users\nyum install apprise\n\n# Redhat/CentOS 8.x+ and/or Fedora Users\ndnf install apprise\n```\n\nYou can also check out the [Graphical version of Apprise](https://github.com/caronc/apprise-api) to centralize your configuration and notifications through a managable webpage.\n\n# Command Line Usage\n\nA small command line interface (CLI) tool is also provided with this package called *apprise*. If you know the server urls you wish to notify, you can simply provide them all on the command line and send your notifications that way:\n```bash\n# Send a notification to as many servers as you want\n# as you can easily chain one after another (the -vv provides some\n# additional verbosity to help let you know what is going on):\napprise -vv -t 'my title' -b 'my notification body' \\\n   'mailto://myemail:mypass@gmail.com' \\\n   'pbul://o.gn5kj6nfhv736I7jC3cj3QLRiyhgl98b'\n\n# If you don't specify a --body (-b) then stdin is used allowing\n# you to use the tool as part of your every day administration:\ncat /proc/cpuinfo | apprise -vv -t 'cpu info' \\\n   'mailto://myemail:mypass@gmail.com'\n\n# The title field is totally optional\nuptime | apprise -vv \\\n   'discord:///4174216298/JHMHI8qBe7bk2ZwO5U711o3dV_js'\n```\n\n## CLI Configuration Files\n\nNo one wants to put their credentials out for everyone to see on the command line.  No problem *apprise* also supports configuration files.  It can handle both a specific [YAML format](https://github.com/caronc/apprise/wiki/config_yaml) or a very simple [TEXT format](https://github.com/caronc/apprise/wiki/config_text). You can also pull these configuration files via an HTTP query too! You can read more about the expected structure of the configuration files [here](https://github.com/caronc/apprise/wiki/config).\n```bash\n# By default if no url or configuration is specified apprise will attempt to load\n# configuration files (if present) from:\n#  ~/.apprise\n#  ~/.apprise.yaml\n#  ~/.config/apprise.conf\n#  ~/.config/apprise.yaml\n#  /etc/apprise.conf\n#  /etc/apprise.yaml\n\n# Also a subdirectory handling allows you to leverage plugins\n#  ~/.apprise/apprise\n#  ~/.apprise/apprise.yaml\n#  ~/.config/apprise/apprise.conf\n#  ~/.config/apprise/apprise.yaml\n#  /etc/apprise/apprise.yaml\n#  /etc/apprise/apprise.conf\n\n# Windows users can store their default configuration files here:\n#  %APPDATA%/Apprise/apprise.conf\n#  %APPDATA%/Apprise/apprise.yaml\n#  %LOCALAPPDATA%/Apprise/apprise.conf\n#  %LOCALAPPDATA%/Apprise/apprise.yaml\n#  %ALLUSERSPROFILE%\\Apprise\\apprise.conf\n#  %ALLUSERSPROFILE%\\Apprise\\apprise.yaml\n#  %PROGRAMFILES%\\Apprise\\apprise.conf\n#  %PROGRAMFILES%\\Apprise\\apprise.yaml\n#  %COMMONPROGRAMFILES%\\Apprise\\apprise.conf\n#  %COMMONPROGRAMFILES%\\Apprise\\apprise.yaml\n\n# The configuration files specified above can also be identified with a `.yml`\n# extension or even just entirely removing the `.conf` extension altogether.\n\n# If you loaded one of those files, your command line gets really easy:\napprise -vv -t 'my title' -b 'my notification body'\n\n# If you want to deviate from the default paths or specify more than one,\n# just specify them using the --config switch:\napprise -vv -t 'my title' -b 'my notification body' \\\n   --config=/path/to/my/config.yml\n\n# Got lots of configuration locations? No problem, you can specify them all:\n# Apprise can even fetch the configuration from over a network!\napprise -vv -t 'my title' -b 'my notification body' \\\n   --config=/path/to/my/config.yml \\\n   --config=https://localhost/my/apprise/config\n```\n\n## CLI File Attachments\n\nApprise also supports file attachments too! Specify as many attachments to a notification as you want.\n```bash\n# Send a funny image you found on the internet to a colleague:\napprise -vv --title 'Agile Joke' \\\n        --body 'Did you see this one yet?' \\\n        --attach https://i.redd.it/my2t4d2fx0u31.jpg \\\n        'mailto://myemail:mypass@gmail.com'\n\n# Easily send an update from a critical server to your dev team\napprise -vv --title 'system crash' \\\n        --body 'I do not think Jim fixed the bug; see attached...' \\\n        --attach /var/log/myprogram.log \\\n        --attach /var/debug/core.2345 \\\n        --tag devteam\n```\n\n## CLI Loading Custom Notifications/Hooks\n\nTo create your own custom `schema://` hook so that you can trigger your own custom code,\nsimply include the `@notify` decorator to wrap your function.\n```python\nfrom apprise.decorators import notify\n#\n# The below assumes you want to catch foobar:// calls:\n#\n@notify(on=\"foobar\", name=\"My Custom Foobar Plugin\")\ndef my_custom_notification_wrapper(body, title, notify_type, *args, **kwargs):\n    \"\"\"My custom notification function that triggers on all foobar:// calls\n    \"\"\"\n    # Write all of your code here... as an example...\n    print(\"{}: {} - {}\".format(notify_type.upper(), title, body))\n\n    # Returning True/False is a way to relay your status back to Apprise.\n    # Returning nothing (None by default) is always interpreted as a Success\n```\n\nOnce you've defined your custom hook, you just need to tell Apprise where it is at runtime.\n```bash\n# By default if no plugin path is specified apprise will attempt to load\n# all plugin files (if present) from the following directory paths:\n#  ~/.apprise/plugins\n#  ~/.config/apprise/plugins\n#  /var/lib/apprise/plugins\n\n# Windows users can store their default plugin files in these directories:\n#  %APPDATA%/Apprise/plugins\n#  %LOCALAPPDATA%/Apprise/plugins\n#  %ALLUSERSPROFILE%\\Apprise\\plugins\n#  %PROGRAMFILES%\\Apprise\\plugins\n#  %COMMONPROGRAMFILES%\\Apprise\\plugins\n\n# If you placed your plugin file within one of the directories already defined\n# above, then your call simply needs to look like:\napprise -vv --title 'custom override' \\\n        --body 'the body of my message' \\\n        foobar:\\\\\n\n# However you can over-ride the path like so\napprise -vv --title 'custom override' \\\n        --body 'the body of my message' \\\n        --plugin-path /path/to/my/plugin.py \\\n        foobar:\\\\\n```\n\nYou can read more about creating your own custom notifications and/or hooks [here](https://github.com/caronc/apprise/wiki/decorator_notify).\n\n## CLI Environment Variables\n\nThose using the Command Line Interface (CLI) can also leverage environment variables to pre-set the default settings:\n\n| Variable                | Description       |\n|------------------------ | ----------------- |\n| `APPRISE_URLS`          |  Specify the default URLs to notify IF none are otherwise specified on the command line explicitly. If the `--config` (`-c`) is specified, then this will over-rides any reference to this variable. Use white space and/or a comma (`,`) to delimit multiple entries.\n|  `APPRISE_CONFIG_PATH`  | Explicitly specify the config search path to use (over-riding the default). The path(s) defined here must point to the absolute filename to open/reference. Use a semi-colon (`;`), line-feed (`\\n`), and/or carriage return (`\\r`) to delimit multiple entries.\n|  `APPRISE_PLUGIN_PATH`  | Explicitly specify the custom plugin search path to use (over-riding the default). Use a semi-colon (`;`), line-feed (`\\n`), and/or carriage return (`\\r`) to delimit multiple entries.\n|  `APPRISE_STORAGE_PATH` | Explicitly specify the persistent storage path to use (over-riding the default).\n\n# Developer API Usage\n\nTo send a notification from within your python application, just do the following:\n```python\nimport apprise\n\n# Create an Apprise instance\napobj = apprise.Apprise()\n\n# Add all of the notification services by their server url.\n# A sample email notification:\napobj.add('mailto://myuserid:mypass@gmail.com')\n\n# A sample pushbullet notification\napobj.add('pbul://o.gn5kj6nfhv736I7jC3cj3QLRiyhgl98b')\n\n# Then notify these services any time you desire. The below would\n# notify all of the services loaded into our Apprise object.\napobj.notify(\n    body='what a great notification service!',\n    title='my notification title',\n)\n```\n\n## API Configuration Files\n\nDevelopers need access to configuration files too. The good news is their use just involves declaring another object (called *AppriseConfig*) that the *Apprise* object can ingest.  You can also freely mix and match config and notification entries as often as you wish! You can read more about the expected structure of the configuration files [here](https://github.com/caronc/apprise/wiki/config).\n```python\nimport apprise\n\n# Create an Apprise instance\napobj = apprise.Apprise()\n\n# Create an Config instance\nconfig = apprise.AppriseConfig()\n\n# Add a configuration source:\nconfig.add('/path/to/my/config.yml')\n\n# Add another...\nconfig.add('https://myserver:8080/path/to/config')\n\n# Make sure to add our config into our apprise object\napobj.add(config)\n\n# You can mix and match; add an entry directly if you want too\n# In this entry we associate the 'admin' tag with our notification\napobj.add('mailto://myuser:mypass@hotmail.com', tag='admin')\n\n# Then notify these services any time you desire. The below would\n# notify all of the services that have not been bound to any specific\n# tag.\napobj.notify(\n    body='what a great notification service!',\n    title='my notification title',\n)\n\n# Tagging allows you to specifically target only specific notification\n# services you've loaded:\napobj.notify(\n    body='send a notification to our admin group',\n    title='Attention Admins',\n    # notify any services tagged with the 'admin' tag\n    tag='admin',\n)\n\n# If you want to notify absolutely everything (regardless of whether\n# it's been tagged or not), just use the reserved tag of 'all':\napobj.notify(\n    body='send a notification to our admin group',\n    title='Attention Admins',\n    # notify absolutely everything loaded, regardless on wether\n    # it has a tag associated with it or not:\n    tag='all',\n)\n```\n\n## API File Attachments\n\nAttachments are very easy to send using the Apprise API:\n```python\nimport apprise\n\n# Create an Apprise instance\napobj = apprise.Apprise()\n\n# Add at least one service you want to notify\napobj.add('mailto://myuser:mypass@hotmail.com')\n\n# Then send your attachment.\napobj.notify(\n    title='A great photo of our family',\n    body='The flash caused Jane to close her eyes! hah! :)',\n    attach='/local/path/to/my/DSC_003.jpg',\n)\n\n# Send a web based attachment too! In the below example, we connect to a home\n# security camera and send a live image to an email. By default remote web\n# content is cached, but for a security camera we might want to call notify\n# again later in our code, so we want our last image retrieved to expire(in\n# this case after 3 seconds).\napobj.notify(\n    title='Latest security image',\n    attach='http://admin:password@hikvision-cam01/ISAPI/Streaming/channels/101/picture?cache=3'\n)\n```\n\nTo send more than one attachment, just use a list, set, or tuple instead:\n```python\nimport apprise\n\n# Create an Apprise instance\napobj = apprise.Apprise()\n\n# Add at least one service you want to notify\napobj.add('mailto://myuser:mypass@hotmail.com')\n\n# Now add all of the entries we're interested in:\nattach = (\n    # ?name= allows us to rename the actual jpeg as found on the site\n    # to be another name when sent to our receipient(s)\n    'https://i.redd.it/my2t4d2fx0u31.jpg?name=FlyingToMars.jpg',\n\n    # Now add another:\n    '/path/to/funny/joke.gif',\n)\n\n# Send your multiple attachments with a single notify call:\napobj.notify(\n    title='Some good jokes.',\n    body='Hey guys, check out these!',\n    attach=attach,\n)\n```\n\n## API Loading Custom Notifications/Hooks\n\nBy default, no custom plugins are loaded at all for those building from within the Apprise API.\nIt's at the developers discretion to load custom modules. But should you choose to do so, it's as easy\nas including the path reference in the `AppriseAsset()` object prior to the initialization of your `Apprise()`\ninstance.\n\nFor example:\n```python\nfrom apprise import Apprise\nfrom apprise import AppriseAsset\n\n# Prepare your Asset object so that you can enable the custom plugins to\n# be loaded for your instance of Apprise...\nasset = AppriseAsset(plugin_paths=\"/path/to/scan\")\n\n# OR You can also generate scan more then one file too:\nasset = AppriseAsset(\n    plugin_paths=[\n        # Iterate over all python libraries found in the root of the\n        # specified path. This is NOT a recursive (directory) scan; only\n        # the first level is parsed. HOWEVER, if a directory containing\n        # an __init__.py is found, it will be included in the load.\n        \"/dir/containing/many/python/libraries\",\n\n        # An absolute path to a plugin.py to exclusively load\n        \"/path/to/plugin.py\",\n\n        # if you point to a directory that has an __init__.py file found in\n        # it, then only that file is loaded (it's similar to point to a\n        # absolute .py file. Hence, there is no (level 1) scanning at all\n        # within the directory specified.\n        \"/path/to/dir/library\"\n    ]\n)\n\n# Now that we've got our asset, we just work with our Apprise object as we\n# normally do\naobj = Apprise(asset=asset)\n\n# If our new custom `foobar://` library was loaded (presuming we prepared\n# one like in the examples above).  then you would be able to safely add it\n# into Apprise at this point\naobj.add('foobar://')\n\n# Send our notification out through our foobar://\naobj.notify(\"test\")\n```\n\nYou can read more about creating your own custom notifications and/or hooks [here](https://github.com/caronc/apprise/wiki/decorator_notify).\n\n# Persistent Storage\n\nPersistent storage allows Apprise to cache re-occurring actions optionaly to disk. This can greatly reduce the overhead used to send a notification.\n\nThere are 3 Persistent Storage operational states Apprise can operate using:\n1. `auto`:  Flush gathered cache information to the filesystem on demand.  This option is incredibly light weight.  This is the default behavior for all CLI usage.\n   * Developers who choose to use this operational mode can also force cached information manually if they choose.\n   * The CLI will use this operational mode by default.\n1. `flush`: Flushes any cache information to the filesystem during every transaction.\n1. `memory`: Effectively disable Persistent Storage.  Any caching of data required by each plugin used is done in memory.  Apprise effectively operates as it always did before peristent storage was available. This setting ensures no content is every written to disk.\n   * By default this is the mode Apprise will operate under for those developing with it unless they configure it to otherwise operate as `auto` or `flush`.  This is done through the `AppriseAsset()` object and is explained further on in this documentation.\n\n## CLI Persistent Storage Commands\n\nYou can provide the keyword `storage` on your CLI call to see the persistent storage options available to you.\n```bash\n# List all of the occupied space used by Apprise's Persistent Storage:\napprise storage list\n\n# list is the default option, so the following does the same thing:\napprise storage\n\n# You can prune all of your storage older then 30 days\n# and not accessed for this period like so:\napprise storage prune\n\n# You can do a hard reset (and wipe all persistent storage) with:\napprise storage clean\n\n```\n\nYou can also filter your results by adding tags and/or URL Identifiers.  When you get a listing (`apprise storage list`), you may see:\n```\n   # example output of 'apprise storage list':\n   1. f7077a65                                             0.00B    unused\n      - matrixs://abcdef:****@synapse.example12.com/%23general?image=no&mode=off&version=3&msgtype...\n      tags: team\n\n   2. 0e873a46                                            81.10B    active\n      - tgram://W...U//?image=False&detect=yes&silent=no&preview=no&content=before&mdv=v1&format=m...\n      tags: personal\n\n   3. abcd123                                             12.00B    stale\n\n```\nThe (persistent storage) cache states are:\n - `unused`: This plugin has not commited anything to disk for reuse/cache purposes\n - `active`: This plugin has written content to disk.  Or at the very least, it has prepared a persistent storage location it can write into.\n - `stale`: The system detected a location where a URL may have possibly written to in the past, but there is nothing linking to it using the URLs provided.  It is likely wasting space or is no longer of any use.\n\nYou can use this information to filter your results by specifying _URL ID_ (UID) values after your command.  For example:\n```bash\n# The below commands continue with the example already identified above\n# the following would match abcd123 (even though just ab was provided)\n# The output would only list the 'stale' entry above\napprise storage list ab\n\n# knowing our filter is safe, we could remove it\n# the below command would not obstruct our other to URLs and would only\n# remove our stale one:\napprise storage clean ab\n\n# Entries can be filtered by tag as well:\napprise storage list --tag=team\n\n# You can match on multiple URL ID's as well:\n# The followin would actually match the URL ID's of 1. and .2 above\napprise storage list f 0\n```\nWhen using the CLI, Persistent storage is set to the operational mode of `auto` by default, you can change this by providing `--storage-mode=` (`-SM`) during your calls.  If you want to ensure it's always set to a value of your choice.\n\nFor more information on persistent storage, [visit here](https://github.com/caronc/apprise/wiki/persistent_storage).\n\n## API Persistent Storage Commands\nFor developers, persistent storage is set in the operational mode of `memory` by default.\n\nIt's at the developers discretion to enable it (by switching it to either `auto` or `flush`). Should you choose to do so: it's as easy as including the information in the `AppriseAsset()` object prior to the initialization of your `Apprise()` instance.\n\nFor example:\n```python\nfrom apprise import Apprise\nfrom apprise import AppriseAsset\nfrom apprise import PersistentStoreMode\n\n# Prepare a location the persistent storage can write it's cached content to.\n# By setting this path, this immediately assumes you wish to operate the\n# persistent storage in the operational 'auto' mode\nasset = AppriseAsset(storage_path=\"/path/to/save/data\")\n\n# If you want to be more explicit and set more options, then you may do the\n# following\nasset = AppriseAsset(\n    # Set our storage path directory (minimum requirement to enable it)\n    storage_path=\"/path/to/save/data\",\n\n    # Set the mode... the options are:\n    # 1. PersistentStoreMode.MEMORY\n    #       - disable persistent storage from writing to disk\n    # 2. PersistentStoreMode.AUTO\n    #       - write to disk on demand\n    # 3. PersistentStoreMode.FLUSH\n    #       - write to disk always and often\n    storage_mode=PersistentStoreMode.FLUSH\n\n    # The URL IDs are by default 8 characters in length. You can increase and\n    # decrease it's value here.  The value must be > 2. The default value is 8\n    # if not otherwise specified\n    storage_idlen=8,\n)\n\n# Now that we've got our asset, we just work with our Apprise object as we\n# normally do\naobj = Apprise(asset=asset)\n```\n\nFor more information on persistent storage, [visit here](https://github.com/caronc/apprise/wiki/persistent_storage).\n\n# Want To Learn More?\n\nIf you're interested in reading more about this and other methods on how to customize your own notifications, please check out the following links:\n* ð£ [Using the CLI](https://github.com/caronc/apprise/wiki/CLI_Usage)\n* ð ï¸ [Development API](https://github.com/caronc/apprise/wiki/Development_API)\n* ð§ [Troubleshooting](https://github.com/caronc/apprise/wiki/Troubleshooting)\n* âï¸ [Configuration File Help](https://github.com/caronc/apprise/wiki/config)\n* â¡ [Create Your Own Custom Notifications](https://github.com/caronc/apprise/wiki/decorator_notify)\n* ð¾ [Persistent Storage](https://github.com/caronc/apprise/wiki/persistent_storage)\n* ð [Apprise API/Web Interface](https://github.com/caronc/apprise-api)\n* ð [Showcase](https://github.com/caronc/apprise/wiki/showcase)\n\nWant to help make Apprise better?\n* ð¡ [Contribute to the Apprise Code Base](https://github.com/caronc/apprise/wiki/Development_Contribution)\n* â¤ï¸ [Sponsorship and Donations](https://github.com/caronc/apprise/wiki/Sponsors)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.3701171875,
          "content": "# Security Policy\n\n## Supported Versions\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 0.9.x   | :white_check_mark: |\n| < 0.9.x | :x:                |\n\n## Reporting a Vulnerability\n\nIf you find a vunerability, please notify me at lead2gold@gmail.com. If the vunerability\nis severe then please just open a ticket at https://github.com/caronc/apprise/issues\n"
        },
        {
          "name": "all-plugin-requirements.txt",
          "type": "blob",
          "size": 0.3193359375,
          "content": "#\n# Plugin Dependencies\n#\n\n# Provides fcm:// and spush://\ncryptography\n\n# Provides growl:// support\ngntp\n\n# Provides mqtt:// support\n# use any version other than 2.0.x due to https://github.com/eclipse/paho.mqtt.python/issues/814\npaho-mqtt != 2.0.*\n\n# Pretty Good Privacy (PGP) Provides mailto:// and deltachat:// support\nPGPy\n"
        },
        {
          "name": "apprise",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "dev-requirements.txt",
          "type": "blob",
          "size": 0.05078125,
          "content": "coverage\nflake8\npytest\npytest-cov\npytest-mock\nbabel\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 1.974609375,
          "content": "version: \"3.3\"\nservices:\n  test.py39:\n    build:\n      context: .\n      dockerfile: test/docker/Dockerfile.py39\n    volumes:\n      - ./:/apprise\n\n  test.py310:\n    build:\n      context: .\n      dockerfile: test/docker/Dockerfile.py310\n    volumes:\n      - ./:/apprise\n\n  test.py311:\n    build:\n      context: .\n      dockerfile: test/docker/Dockerfile.py311\n    volumes:\n      - ./:/apprise\n\n  test.py312:\n    build:\n      context: .\n      dockerfile: test/docker/Dockerfile.py312\n    volumes:\n      - ./:/apprise\n\n  rpmbuild.el9:\n    build:\n      context: .\n      dockerfile: test/docker/Dockerfile.el9\n    volumes:\n      - ./:/apprise\n\n  rpmbuild.f37:\n    build:\n      context: .\n      dockerfile: test/docker/Dockerfile.f37\n    volumes:\n      - ./:/apprise\n\n  rpmbuild.f39:\n    build:\n      context: .\n      dockerfile: test/docker/Dockerfile.f39\n    volumes:\n      - ./:/apprise\n\n  rpmbuild.rawhide:\n    build:\n      context: .\n      dockerfile: test/docker/Dockerfile.rawhide\n    volumes:\n      - ./:/apprise\n\n#\n# Every Day testing\n#\n# Connect to web and create a new project using the manage script\n# -> docker-compose run --rm test.py311 bash\n# bin/apprise -\n# bin/checkdone.sh\n\n#\n# Other Testing\n#\n# Connect to web and create a new project using the manage script\n# -> docker-compose run --rm test.py311 bash\n# bin/apprise -\n# bin/checkdone.sh\n#\n# Run a set of tests for just a certain section\n#  docker-compose run --rm test.py311 bin/test.sh fcm\n#\n# Or just run all the tests in python 3.11\n#  docker-compose run --rm test.py311 bin/test.sh\n#\n# Want to run the whole test suite:\n#\n# [ -f .coverage ] && rm -f .coverage\n# docker-compose run --rm test.py311 coverage run --append -m pytest -vv\n# docker-compose run --rm test.py310 coverage run --append -m pytest -vv\n#\n# # Now produce a report\n# docker-compose run --rm test.py310 coverage report --show-missing\n\n#\n# RPM Building\n#\n\n# el9\n#  - docker-compose run --rm rpmbuild.el9 build-rpm.sh\n# f39 (Fedora)\n#  - docker-compose run --rm rpmbuild.f39 build-rpm.sh\n"
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.125,
          "content": "# Root certificate authority bundle\ncertifi\n\n# Application dependencies\nrequests\nrequests-oauthlib\nclick >= 5.0\nmarkdown\nPyYAML\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.8935546875,
          "content": "[bdist_wheel]\nuniversal = 0\n\n[metadata]\n# ensure LICENSE is included in wheel metadata\nlicense_files = LICENSE\n\n[flake8]\n# We exclude packages we don't maintain\nexclude = .eggs,.tox,.local,dist,.venv,venv\nignore = E741,E722,W503,W504,W605\nstatistics = true\nbuiltins = _\n\n[aliases]\ntest=pytest\n\n[tool:pytest]\naddopts = -ra\npython_files = test/test_*.py\nnorecursedirs=test/helpers, dist\nfilterwarnings =\n\tonce::Warning\n\n[extract_messages]\noutput-file = apprise/i18n/apprise.pot\nsort-output = true\ncopyright-holder = Chris Caron\nmsgid-bugs-address = lead2gold@gmail.com\ncharset = utf-8\nno-location = true\nadd-comments = false\n\n[compile_catalog]\ndomain = apprise\ndirectory = apprise/i18n\nstatistics = true\nuse-fuzzy = true\n\n[init_catalog]\ndomain = apprise\ninput-file = apprise/i18n/apprise.pot\noutput-dir = apprise/i18n\n\n[update_catalog]\ndomain = apprise\ninput-file = apprise/i18n/apprise.pot\noutput-dir = apprise/i18n\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 4.314453125,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# BSD 2-Clause License\n#\n# Apprise - Push Notification Library.\n# Copyright (c) 2025, Chris Caron <lead2gold@gmail.com>\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# 1. Redistributions of source code must retain the above copyright notice,\n#    this list of conditions and the following disclaimer.\n#\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n#    this list of conditions and the following disclaimer in the documentation\n#    and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n\nimport re\nimport os\nimport platform\nimport sys\n\nfrom setuptools import find_packages, setup\n\ncmdclass = {}\ntry:\n    from babel.messages import frontend as babel\n    cmdclass = {\n        'compile_catalog': babel.compile_catalog,\n        'extract_messages': babel.extract_messages,\n        'init_catalog': babel.init_catalog,\n        'update_catalog': babel.update_catalog,\n    }\nexcept ImportError:\n    pass\n\ninstall_options = os.environ.get(\"APPRISE_INSTALL\", \"\").split(\",\")\ninstall_requires = open('requirements.txt').readlines()\nif platform.system().lower().startswith('win') \\\n        and not hasattr(sys, \"pypy_version_info\"):\n    # Windows Notification Support\n    install_requires += open('win-requirements.txt').readlines()\n\nlibonly_flags = set([\"lib-only\", \"libonly\", \"no-cli\", \"without-cli\"])\nif libonly_flags.intersection(install_options):\n    console_scripts = []\n\nelse:\n    # Load our CLI\n    console_scripts = ['apprise = apprise.cli:main']\n\nsetup(\n    name='apprise',\n    version='1.9.2',\n    description='Push Notifications that work with just about every platform!',\n    license='BSD 2-Clause',\n    long_description=open('README.md', encoding=\"utf-8\").read(),\n    long_description_content_type='text/markdown',\n    cmdclass=cmdclass,\n    url='https://github.com/caronc/apprise',\n    keywords=' '.join(re.split(r'\\s+', open('KEYWORDS').read())),\n    author='Chris Caron',\n    author_email='lead2gold@gmail.com',\n    packages=find_packages(),\n    package_data={\n        'apprise': [\n            'assets/NotifyXML-*.xsd',\n            'assets/themes/default/*.png',\n            'assets/themes/default/*.ico',\n            'i18n/*.py',\n            'i18n/*/LC_MESSAGES/*.mo',\n            'py.typed',\n            '*.pyi',\n            '*/*.pyi'\n        ],\n    },\n    install_requires=install_requires,\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'Operating System :: OS Independent',\n        'Natural Language :: English',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Programming Language :: Python :: 3.12',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'License :: OSI Approved :: BSD License',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Software Development :: Libraries :: Application Frameworks',\n    ],\n    entry_points={'console_scripts': console_scripts},\n    python_requires='>=3.6',\n    setup_requires=['babel', ],\n)\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "win-requirements.txt",
          "type": "blob",
          "size": 0.0078125,
          "content": "pywin32\n"
        }
      ]
    }
  ]
}