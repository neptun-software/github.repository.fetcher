{
  "metadata": {
    "timestamp": 1736561298008,
    "page": 300,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "OpenTalker/SadTalker",
      "stars": 12194,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.1298828125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n.idea/\n\nexamples/results/*\ngfpgan/*\ncheckpoints/*\nassets/*\nresults/*\nDockerfile\nstart_docker.sh\nstart.sh\n\ncheckpoints\n\n# Mac\n.DS_Store\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.41796875,
          "content": "Tencent is pleased to support the open source community by making SadTalker available.\n\nCopyright (C), a Tencent company. All rights reserved.\n\nSadTalker is licensed under the Apache 2.0 License, except for the third-party components listed below.\n\nTerms of the Apache License Version 2.0:\n---------------------------------------------\n                                Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.72265625,
          "content": "<div align=\"center\">\n\n<img src='https://user-images.githubusercontent.com/4397546/229094115-862c747e-7397-4b54-ba4a-bd368bfe2e0f.png' width='500px'/>\n\n\n<!--<h2> 😭 SadTalker： <span style=\"font-size:12px\">Learning Realistic 3D Motion Coefficients for Stylized Audio-Driven Single Image Talking Face Animation </span> </h2> -->\n\n  <a href='https://arxiv.org/abs/2211.12194'><img src='https://img.shields.io/badge/ArXiv-PDF-red'></a> &nbsp; <a href='https://sadtalker.github.io'><img src='https://img.shields.io/badge/Project-Page-Green'></a> &nbsp; [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/Winfredy/SadTalker/blob/main/quick_demo.ipynb) &nbsp; [![Hugging Face Spaces](https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue)](https://huggingface.co/spaces/vinthony/SadTalker) &nbsp; [![sd webui-colab](https://img.shields.io/badge/Automatic1111-Colab-green)](https://colab.research.google.com/github/camenduru/stable-diffusion-webui-colab/blob/main/video/stable/stable_diffusion_1_5_video_webui_colab.ipynb) &nbsp; <br> [![Replicate](https://replicate.com/cjwbw/sadtalker/badge)](https://replicate.com/cjwbw/sadtalker) [![Discord](https://dcbadge.vercel.app/api/server/rrayYqZ4tf?style=flat)](https://discord.gg/rrayYqZ4tf)\n\n<div>\n    <a target='_blank'>Wenxuan Zhang <sup>*,1,2</sup> </a>&emsp;\n    <a href='https://vinthony.github.io/' target='_blank'>Xiaodong Cun <sup>*,2</a>&emsp;\n    <a href='https://xuanwangvc.github.io/' target='_blank'>Xuan Wang <sup>3</sup></a>&emsp;\n    <a href='https://yzhang2016.github.io/' target='_blank'>Yong Zhang <sup>2</sup></a>&emsp;\n    <a href='https://xishen0220.github.io/' target='_blank'>Xi Shen <sup>2</sup></a>&emsp; </br>\n    <a href='https://yuguo-xjtu.github.io/' target='_blank'>Yu Guo<sup>1</sup> </a>&emsp;\n    <a href='https://scholar.google.com/citations?hl=zh-CN&user=4oXBp9UAAAAJ' target='_blank'>Ying Shan <sup>2</sup> </a>&emsp;\n    <a target='_blank'>Fei Wang <sup>1</sup> </a>&emsp;\n</div>\n<br>\n<div>\n    <sup>1</sup> Xi'an Jiaotong University &emsp; <sup>2</sup> Tencent AI Lab &emsp; <sup>3</sup> Ant Group &emsp; \n</div>\n<br>\n<i><strong><a href='https://arxiv.org/abs/2211.12194' target='_blank'>CVPR 2023</a></strong></i>\n<br>\n<br>\n\n\n![sadtalker](https://user-images.githubusercontent.com/4397546/222490039-b1f6156b-bf00-405b-9fda-0c9a9156f991.gif)\n\n<b>TL;DR: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; single portrait image 🙎‍♂️  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; audio 🎤  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; talking head video 🎞.</b>\n\n<br>\n\n</div>\n\n\n\n## Highlights\n\n- The license has been updated to Apache 2.0, and we've removed the non-commercial restriction\n- **SadTalker has now officially been integrated into Discord, where you can use it for free by sending files. You can also generate high-quailty videos from text prompts. Join: [![Discord](https://dcbadge.vercel.app/api/server/rrayYqZ4tf?style=flat)](https://discord.gg/rrayYqZ4tf)**\n\n- We've published a [stable-diffusion-webui](https://github.com/AUTOMATIC1111/stable-diffusion-webui) extension. Check out more details [here](docs/webui_extension.md). [Demo Video](https://user-images.githubusercontent.com/4397546/231495639-5d4bb925-ea64-4a36-a519-6389917dac29.mp4)\n\n- Full image mode is now available! [More details...](https://github.com/OpenTalker/SadTalker#full-bodyimage-generation)\n\n| still+enhancer in v0.0.1                 | still + enhancer   in v0.0.2       |   [input image @bagbag1815](https://twitter.com/bagbag1815/status/1642754319094108161) |\n|:--------------------: |:--------------------: | :----: |\n| <video  src=\"https://user-images.githubusercontent.com/48216707/229484996-5d7be64f-2553-4c9e-a452-c5cf0b8ebafe.mp4\" type=\"video/mp4\"> </video> | <video  src=\"https://user-images.githubusercontent.com/4397546/230717873-355b7bf3-d3de-49f9-a439-9220e623fce7.mp4\" type=\"video/mp4\"> </video>  | <img src='./examples/source_image/full_body_2.png' width='380'> \n\n- Several new modes (Still, reference, and resize modes) are now available!\n\n- We're happy to see more community demos on [bilibili](https://search.bilibili.com/all?keyword=sadtalker), [YouTube](https://www.youtube.com/results?search_query=sadtalker) and [X (#sadtalker)](https://twitter.com/search?q=%23sadtalker&src).\n\n## Changelog \n\nThe previous changelog can be found [here](docs/changlelog.md).\n\n- __[2023.06.12]__: Added more new features in WebUI extension, see the discussion [here](https://github.com/OpenTalker/SadTalker/discussions/386).\n\n- __[2023.06.05]__: Released a new 512x512px (beta) face model. Fixed some bugs and improve the performance.\n\n- __[2023.04.15]__: Added a WebUI Colab notebook by [@camenduru](https://github.com/camenduru/): [![sd webui-colab](https://img.shields.io/badge/Automatic1111-Colab-green)](https://colab.research.google.com/github/camenduru/stable-diffusion-webui-colab/blob/main/video/stable/stable_diffusion_1_5_video_webui_colab.ipynb)\n\n- __[2023.04.12]__: Added a more detailed WebUI installation document and fixed a problem when reinstalling.\n\n- __[2023.04.12]__: Fixed the WebUI safe issues becasue of 3rd-party packages, and optimized the output path in `sd-webui-extension`.\n\n- __[2023.04.08]__: In v0.0.2, we added a logo watermark to the generated video to prevent abuse. _This watermark has since been removed in a later release._\n\n- __[2023.04.08]__: In v0.0.2, we added features for full image animation and a link to download checkpoints from Baidu. We also optimized the enhancer logic.\n\n## To-Do\n\nWe're tracking new updates in [issue #280](https://github.com/OpenTalker/SadTalker/issues/280).\n\n## Troubleshooting\n\nIf you have any problems, please read our [FAQs](docs/FAQ.md) before opening an issue.\n\n\n\n## 1. Installation.\n\nCommunity tutorials: [中文Windows教程 (Chinese Windows tutorial)](https://www.bilibili.com/video/BV1Dc411W7V6/) | [日本語コース (Japanese tutorial)](https://br-d.fanbox.cc/posts/5685086).\n\n### Linux/Unix\n\n1. Install [Anaconda](https://www.anaconda.com/), Python and `git`.\n\n2. Creating the env and install the requirements.\n  ```bash\n  git clone https://github.com/OpenTalker/SadTalker.git\n\n  cd SadTalker \n\n  conda create -n sadtalker python=3.8\n\n  conda activate sadtalker\n\n  pip install torch==1.12.1+cu113 torchvision==0.13.1+cu113 torchaudio==0.12.1 --extra-index-url https://download.pytorch.org/whl/cu113\n\n  conda install ffmpeg\n\n  pip install -r requirements.txt\n\n  ### Coqui TTS is optional for gradio demo. \n  ### pip install TTS\n\n  ```  \n### Windows\n\nA video tutorial in chinese is available [here](https://www.bilibili.com/video/BV1Dc411W7V6/). You can also follow the following instructions:\n\n1. Install [Python 3.8](https://www.python.org/downloads/windows/) and check \"Add Python to PATH\".\n2. Install [git](https://git-scm.com/download/win) manually or using [Scoop](https://scoop.sh/): `scoop install git`.\n3. Install `ffmpeg`, following [this tutorial](https://www.wikihow.com/Install-FFmpeg-on-Windows) or using [scoop](https://scoop.sh/): `scoop install ffmpeg`.\n4. Download the SadTalker repository by running `git clone https://github.com/Winfredy/SadTalker.git`.\n5. Download the checkpoints and gfpgan models in the [downloads section](#2-download-models).\n6. Run `start.bat` from Windows Explorer as normal, non-administrator, user, and a Gradio-powered WebUI demo will be started.\n\n### macOS\n\nA tutorial on installing SadTalker on macOS can be found [here](docs/install.md).\n\n### Docker, WSL, etc\n\nPlease check out additional tutorials [here](docs/install.md).\n\n## 2. Download Models\n\nYou can run the following script on Linux/macOS to automatically download all the models:\n\n```bash\nbash scripts/download_models.sh\n```\n\nWe also provide an offline patch (`gfpgan/`), so no model will be downloaded when generating.\n\n### Pre-Trained Models\n\n* [Google Drive](https://drive.google.com/file/d/1gwWh45pF7aelNP_P78uDJL8Sycep-K7j/view?usp=sharing)\n* [GitHub Releases](https://github.com/OpenTalker/SadTalker/releases)\n* [Baidu (百度云盘)](https://pan.baidu.com/s/1kb1BCPaLOWX1JJb9Czbn6w?pwd=sadt) (Password: `sadt`)\n\n<!-- TODO add Hugging Face links -->\n\n### GFPGAN Offline Patch\n\n* [Google Drive](https://drive.google.com/file/d/19AIBsmfcHW6BRJmeqSFlG5fL445Xmsyi?usp=sharing)\n* [GitHub Releases](https://github.com/OpenTalker/SadTalker/releases)\n* [Baidu (百度云盘)](https://pan.baidu.com/s/1P4fRgk9gaSutZnn8YW034Q?pwd=sadt) (Password: `sadt`)\n\n<!-- TODO add Hugging Face links -->\n\n\n<details><summary>Model Details</summary>\n\n\nModel explains:\n\n##### New version \n| Model | Description\n| :--- | :----------\n|checkpoints/mapping_00229-model.pth.tar | Pre-trained MappingNet in Sadtalker.\n|checkpoints/mapping_00109-model.pth.tar | Pre-trained MappingNet in Sadtalker.\n|checkpoints/SadTalker_V0.0.2_256.safetensors | packaged sadtalker checkpoints of old version, 256 face render).\n|checkpoints/SadTalker_V0.0.2_512.safetensors | packaged sadtalker checkpoints of old version, 512 face render).\n|gfpgan/weights | Face detection and enhanced models used in `facexlib` and `gfpgan`.\n  \n  \n##### Old version\n| Model | Description\n| :--- | :----------\n|checkpoints/auido2exp_00300-model.pth | Pre-trained ExpNet in Sadtalker.\n|checkpoints/auido2pose_00140-model.pth | Pre-trained PoseVAE in Sadtalker.\n|checkpoints/mapping_00229-model.pth.tar | Pre-trained MappingNet in Sadtalker.\n|checkpoints/mapping_00109-model.pth.tar | Pre-trained MappingNet in Sadtalker.\n|checkpoints/facevid2vid_00189-model.pth.tar | Pre-trained face-vid2vid model from [the reappearance of face-vid2vid](https://github.com/zhanglonghao1992/One-Shot_Free-View_Neural_Talking_Head_Synthesis).\n|checkpoints/epoch_20.pth | Pre-trained 3DMM extractor in [Deep3DFaceReconstruction](https://github.com/microsoft/Deep3DFaceReconstruction).\n|checkpoints/wav2lip.pth | Highly accurate lip-sync model in [Wav2lip](https://github.com/Rudrabha/Wav2Lip).\n|checkpoints/shape_predictor_68_face_landmarks.dat | Face landmark model used in [dilb](http://dlib.net/). \n|checkpoints/BFM | 3DMM library file.  \n|checkpoints/hub | Face detection models used in [face alignment](https://github.com/1adrianb/face-alignment).\n|gfpgan/weights | Face detection and enhanced models used in `facexlib` and `gfpgan`.\n\nThe final folder will be shown as:\n\n<img width=\"331\" alt=\"image\" src=\"https://user-images.githubusercontent.com/4397546/232511411-4ca75cbf-a434-48c5-9ae0-9009e8316484.png\">\n\n\n</details>\n\n## 3. Quick Start\n\nPlease read our document on [best practices and configuration tips](docs/best_practice.md)\n\n### WebUI Demos\n\n**Online Demo**: [HuggingFace](https://huggingface.co/spaces/vinthony/SadTalker) | [SDWebUI-Colab](https://colab.research.google.com/github/camenduru/stable-diffusion-webui-colab/blob/main/video/stable/stable_diffusion_1_5_video_webui_colab.ipynb) | [Colab](https://colab.research.google.com/github/Winfredy/SadTalker/blob/main/quick_demo.ipynb)\n\n**Local WebUI extension**: Please refer to [WebUI docs](docs/webui_extension.md).\n\n**Local gradio demo (recommanded)**: A Gradio instance similar to our [Hugging Face demo](https://huggingface.co/spaces/vinthony/SadTalker) can be run locally:\n\n```bash\n## you need manually install TTS(https://github.com/coqui-ai/TTS) via `pip install tts` in advanced.\npython app_sadtalker.py\n```\n\nYou can also start it more easily:\n\n- windows: just double click `webui.bat`, the requirements will be installed automatically.\n- Linux/Mac OS: run `bash webui.sh` to start the webui.\n\n\n### CLI usage\n\n##### Animating a portrait image from default config:\n```bash\npython inference.py --driven_audio <audio.wav> \\\n                    --source_image <video.mp4 or picture.png> \\\n                    --enhancer gfpgan \n```\nThe results will be saved in `results/$SOME_TIMESTAMP/*.mp4`.\n\n##### Full body/image Generation:\n\nUsing `--still` to generate a natural full body video. You can add `enhancer` to improve the quality of the generated video. \n\n```bash\npython inference.py --driven_audio <audio.wav> \\\n                    --source_image <video.mp4 or picture.png> \\\n                    --result_dir <a file to store results> \\\n                    --still \\\n                    --preprocess full \\\n                    --enhancer gfpgan \n```\n\nMore examples and configuration and tips can be founded in the [ >>> best practice documents <<<](docs/best_practice.md).\n\n## Citation\n\nIf you find our work useful in your research, please consider citing:\n\n```bibtex\n@article{zhang2022sadtalker,\n  title={SadTalker: Learning Realistic 3D Motion Coefficients for Stylized Audio-Driven Single Image Talking Face Animation},\n  author={Zhang, Wenxuan and Cun, Xiaodong and Wang, Xuan and Zhang, Yong and Shen, Xi and Guo, Yu and Shan, Ying and Wang, Fei},\n  journal={arXiv preprint arXiv:2211.12194},\n  year={2022}\n}\n```\n\n## Acknowledgements\n\nFacerender code borrows heavily from [zhanglonghao's reproduction of face-vid2vid](https://github.com/zhanglonghao1992/One-Shot_Free-View_Neural_Talking_Head_Synthesis) and [PIRender](https://github.com/RenYurui/PIRender). We thank the authors for sharing their wonderful code. In training process, we also used the model from [Deep3DFaceReconstruction](https://github.com/microsoft/Deep3DFaceReconstruction) and [Wav2lip](https://github.com/Rudrabha/Wav2Lip). We thank for their wonderful work.\n\nWe also use the following 3rd-party libraries:\n\n- **Face Utils**: https://github.com/xinntao/facexlib\n- **Face Enhancement**: https://github.com/TencentARC/GFPGAN\n- **Image/Video Enhancement**:https://github.com/xinntao/Real-ESRGAN\n\n## Extensions:\n\n- [SadTalker-Video-Lip-Sync](https://github.com/Zz-ww/SadTalker-Video-Lip-Sync) from [@Zz-ww](https://github.com/Zz-ww): SadTalker for Video Lip Editing\n\n## Related Works\n- [StyleHEAT: One-Shot High-Resolution Editable Talking Face Generation via Pre-trained StyleGAN (ECCV 2022)](https://github.com/FeiiYin/StyleHEAT)\n- [CodeTalker: Speech-Driven 3D Facial Animation with Discrete Motion Prior (CVPR 2023)](https://github.com/Doubiiu/CodeTalker)\n- [VideoReTalking: Audio-based Lip Synchronization for Talking Head Video Editing In the Wild (SIGGRAPH Asia 2022)](https://github.com/vinthony/video-retalking)\n- [DPE: Disentanglement of Pose and Expression for General Video Portrait Editing (CVPR 2023)](https://github.com/Carlyx/DPE)\n- [3D GAN Inversion with Facial Symmetry Prior (CVPR 2023)](https://github.com/FeiiYin/SPI/)\n- [T2M-GPT: Generating Human Motion from Textual Descriptions with Discrete Representations (CVPR 2023)](https://github.com/Mael-zys/T2M-GPT)\n\n## Disclaimer\n\nThis is not an official product of Tencent. \n\n```\n1. Please carefully read and comply with the open-source license applicable to this code before using it. \n2. Please carefully read and comply with the intellectual property declaration applicable to this code before using it.\n3. This open-source code runs completely offline and does not collect any personal information or other data. If you use this code to provide services to end-users and collect related data, please take necessary compliance measures according to applicable laws and regulations (such as publishing privacy policies, adopting necessary data security strategies, etc.). If the collected data involves personal information, user consent must be obtained (if applicable). Any legal liabilities arising from this are unrelated to Tencent.\n4. Without Tencent's written permission, you are not authorized to use the names or logos legally owned by Tencent, such as \"Tencent.\" Otherwise, you may be liable for legal responsibilities.\n5. This open-source code does not have the ability to directly provide services to end-users. If you need to use this code for further model training or demos, as part of your product to provide services to end-users, or for similar use, please comply with applicable laws and regulations for your product or service. Any legal liabilities arising from this are unrelated to Tencent.\n6. It is prohibited to use this open-source code for activities that harm the legitimate rights and interests of others (including but not limited to fraud, deception, infringement of others' portrait rights, reputation rights, etc.), or other behaviors that violate applicable laws and regulations or go against social ethics and good customs (including providing incorrect or false information, spreading pornographic, terrorist, and violent information, etc.). Otherwise, you may be liable for legal responsibilities.\n```\n\nLOGO: color and font suggestion: [ChatGPT](https://chat.openai.com), logo font: [Montserrat Alternates\n](https://fonts.google.com/specimen/Montserrat+Alternates?preview.text=SadTalker&preview.text_type=custom&query=mont).\n\nAll the copyrights of the demo images and audio are from community users or the generation from stable diffusion. Feel free to contact us if you would like use to remove them.\n\n\n<!-- Spelling fixed on Tuesday, September 12, 2023 by @fakerybakery (https://github.com/fakerybakery). These changes are licensed under the Apache 2.0 license. -->\n"
        },
        {
          "name": "app_sadtalker.py",
          "type": "blob",
          "size": 5.7021484375,
          "content": "import os, sys\nimport gradio as gr\nfrom src.gradio_demo import SadTalker  \n\n\ntry:\n    import webui  # in webui\n    in_webui = True\nexcept:\n    in_webui = False\n\n\ndef toggle_audio_file(choice):\n    if choice == False:\n        return gr.update(visible=True), gr.update(visible=False)\n    else:\n        return gr.update(visible=False), gr.update(visible=True)\n    \ndef ref_video_fn(path_of_ref_video):\n    if path_of_ref_video is not None:\n        return gr.update(value=True)\n    else:\n        return gr.update(value=False)\n\ndef sadtalker_demo(checkpoint_path='checkpoints', config_path='src/config', warpfn=None):\n\n    sad_talker = SadTalker(checkpoint_path, config_path, lazy_load=True)\n\n    with gr.Blocks(analytics_enabled=False) as sadtalker_interface:\n        gr.Markdown(\"<div align='center'> <h2> 😭 SadTalker: Learning Realistic 3D Motion Coefficients for Stylized Audio-Driven Single Image Talking Face Animation (CVPR 2023) </span> </h2> \\\n                    <a style='font-size:18px;color: #efefef' href='https://arxiv.org/abs/2211.12194'>Arxiv</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\\n                    <a style='font-size:18px;color: #efefef' href='https://sadtalker.github.io'>Homepage</a>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\\n                     <a style='font-size:18px;color: #efefef' href='https://github.com/Winfredy/SadTalker'> Github </div>\")\n        \n        with gr.Row().style(equal_height=False):\n            with gr.Column(variant='panel'):\n                with gr.Tabs(elem_id=\"sadtalker_source_image\"):\n                    with gr.TabItem('Upload image'):\n                        with gr.Row():\n                            source_image = gr.Image(label=\"Source image\", source=\"upload\", type=\"filepath\", elem_id=\"img2img_image\").style(width=512)\n\n                with gr.Tabs(elem_id=\"sadtalker_driven_audio\"):\n                    with gr.TabItem('Upload OR TTS'):\n                        with gr.Column(variant='panel'):\n                            driven_audio = gr.Audio(label=\"Input audio\", source=\"upload\", type=\"filepath\")\n\n                        if sys.platform != 'win32' and not in_webui: \n                            from src.utils.text2speech import TTSTalker\n                            tts_talker = TTSTalker()\n                            with gr.Column(variant='panel'):\n                                input_text = gr.Textbox(label=\"Generating audio from text\", lines=5, placeholder=\"please enter some text here, we genreate the audio from text using @Coqui.ai TTS.\")\n                                tts = gr.Button('Generate audio',elem_id=\"sadtalker_audio_generate\", variant='primary')\n                                tts.click(fn=tts_talker.test, inputs=[input_text], outputs=[driven_audio])\n                            \n            with gr.Column(variant='panel'): \n                with gr.Tabs(elem_id=\"sadtalker_checkbox\"):\n                    with gr.TabItem('Settings'):\n                        gr.Markdown(\"need help? please visit our [best practice page](https://github.com/OpenTalker/SadTalker/blob/main/docs/best_practice.md) for more detials\")\n                        with gr.Column(variant='panel'):\n                            # width = gr.Slider(minimum=64, elem_id=\"img2img_width\", maximum=2048, step=8, label=\"Manually Crop Width\", value=512) # img2img_width\n                            # height = gr.Slider(minimum=64, elem_id=\"img2img_height\", maximum=2048, step=8, label=\"Manually Crop Height\", value=512) # img2img_width\n                            pose_style = gr.Slider(minimum=0, maximum=46, step=1, label=\"Pose style\", value=0) # \n                            size_of_image = gr.Radio([256, 512], value=256, label='face model resolution', info=\"use 256/512 model?\") # \n                            preprocess_type = gr.Radio(['crop', 'resize','full', 'extcrop', 'extfull'], value='crop', label='preprocess', info=\"How to handle input image?\")\n                            is_still_mode = gr.Checkbox(label=\"Still Mode (fewer head motion, works with preprocess `full`)\")\n                            batch_size = gr.Slider(label=\"batch size in generation\", step=1, maximum=10, value=2)\n                            enhancer = gr.Checkbox(label=\"GFPGAN as Face enhancer\")\n                            submit = gr.Button('Generate', elem_id=\"sadtalker_generate\", variant='primary')\n                            \n                with gr.Tabs(elem_id=\"sadtalker_genearted\"):\n                        gen_video = gr.Video(label=\"Generated video\", format=\"mp4\").style(width=256)\n\n        if warpfn:\n            submit.click(\n                        fn=warpfn(sad_talker.test), \n                        inputs=[source_image,\n                                driven_audio,\n                                preprocess_type,\n                                is_still_mode,\n                                enhancer,\n                                batch_size,                            \n                                size_of_image,\n                                pose_style\n                                ], \n                        outputs=[gen_video]\n                        )\n        else:\n            submit.click(\n                        fn=sad_talker.test, \n                        inputs=[source_image,\n                                driven_audio,\n                                preprocess_type,\n                                is_still_mode,\n                                enhancer,\n                                batch_size,                            \n                                size_of_image,\n                                pose_style\n                                ], \n                        outputs=[gen_video]\n                        )\n\n    return sadtalker_interface\n \n\nif __name__ == \"__main__\":\n\n    demo = sadtalker_demo()\n    demo.queue()\n    demo.launch()\n\n\n"
        },
        {
          "name": "cog.yaml",
          "type": "blob",
          "size": 1.0888671875,
          "content": "build:\n  gpu: true\n  cuda: \"11.3\"\n  python_version: \"3.8\"\n  system_packages:\n    - \"ffmpeg\"\n    - \"libgl1-mesa-glx\"\n    - \"libglib2.0-0\"\n  python_packages:\n    - \"torch==1.12.1\"\n    - \"torchvision==0.13.1\"\n    - \"torchaudio==0.12.1\"\n    - \"joblib==1.1.0\"\n    - \"scikit-image==0.19.3\"\n    - \"basicsr==1.4.2\"\n    - \"facexlib==0.3.0\"\n    - \"resampy==0.3.1\"\n    - \"pydub==0.25.1\"\n    - \"scipy==1.10.1\"\n    - \"kornia==0.6.8\"\n    - \"face_alignment==1.3.5\"\n    - \"imageio==2.19.3\"\n    - \"imageio-ffmpeg==0.4.7\"\n    - \"librosa==0.9.2\" #\n    - \"tqdm==4.65.0\"\n    - \"yacs==0.1.8\"\n    - \"gfpgan==1.3.8\"\n    - \"dlib-bin==19.24.1\"\n    - \"av==10.0.0\"\n    - \"trimesh==3.9.20\"\n  run:\n    - mkdir -p /root/.cache/torch/hub/checkpoints/ && wget --output-document \"/root/.cache/torch/hub/checkpoints/s3fd-619a316812.pth\" \"https://www.adrianbulat.com/downloads/python-fan/s3fd-619a316812.pth\"\n    - mkdir -p /root/.cache/torch/hub/checkpoints/ && wget --output-document \"/root/.cache/torch/hub/checkpoints/2DFAN4-cd938726ad.zip\" \"https://www.adrianbulat.com/downloads/python-fan/2DFAN4-cd938726ad.zip\"\n\npredict: \"predict.py:Predictor\"\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "inference.py",
          "type": "blob",
          "size": 7.431640625,
          "content": "from glob import glob\nimport shutil\nimport torch\nfrom time import  strftime\nimport os, sys, time\nfrom argparse import ArgumentParser\n\nfrom src.utils.preprocess import CropAndExtract\nfrom src.test_audio2coeff import Audio2Coeff  \nfrom src.facerender.animate import AnimateFromCoeff\nfrom src.generate_batch import get_data\nfrom src.generate_facerender_batch import get_facerender_data\nfrom src.utils.init_path import init_path\n\ndef main(args):\n    #torch.backends.cudnn.enabled = False\n\n    pic_path = args.source_image\n    audio_path = args.driven_audio\n    save_dir = os.path.join(args.result_dir, strftime(\"%Y_%m_%d_%H.%M.%S\"))\n    os.makedirs(save_dir, exist_ok=True)\n    pose_style = args.pose_style\n    device = args.device\n    batch_size = args.batch_size\n    input_yaw_list = args.input_yaw\n    input_pitch_list = args.input_pitch\n    input_roll_list = args.input_roll\n    ref_eyeblink = args.ref_eyeblink\n    ref_pose = args.ref_pose\n\n    current_root_path = os.path.split(sys.argv[0])[0]\n\n    sadtalker_paths = init_path(args.checkpoint_dir, os.path.join(current_root_path, 'src/config'), args.size, args.old_version, args.preprocess)\n\n    #init model\n    preprocess_model = CropAndExtract(sadtalker_paths, device)\n\n    audio_to_coeff = Audio2Coeff(sadtalker_paths,  device)\n    \n    animate_from_coeff = AnimateFromCoeff(sadtalker_paths, device)\n\n    #crop image and extract 3dmm from image\n    first_frame_dir = os.path.join(save_dir, 'first_frame_dir')\n    os.makedirs(first_frame_dir, exist_ok=True)\n    print('3DMM Extraction for source image')\n    first_coeff_path, crop_pic_path, crop_info =  preprocess_model.generate(pic_path, first_frame_dir, args.preprocess,\\\n                                                                             source_image_flag=True, pic_size=args.size)\n    if first_coeff_path is None:\n        print(\"Can't get the coeffs of the input\")\n        return\n\n    if ref_eyeblink is not None:\n        ref_eyeblink_videoname = os.path.splitext(os.path.split(ref_eyeblink)[-1])[0]\n        ref_eyeblink_frame_dir = os.path.join(save_dir, ref_eyeblink_videoname)\n        os.makedirs(ref_eyeblink_frame_dir, exist_ok=True)\n        print('3DMM Extraction for the reference video providing eye blinking')\n        ref_eyeblink_coeff_path, _, _ =  preprocess_model.generate(ref_eyeblink, ref_eyeblink_frame_dir, args.preprocess, source_image_flag=False)\n    else:\n        ref_eyeblink_coeff_path=None\n\n    if ref_pose is not None:\n        if ref_pose == ref_eyeblink: \n            ref_pose_coeff_path = ref_eyeblink_coeff_path\n        else:\n            ref_pose_videoname = os.path.splitext(os.path.split(ref_pose)[-1])[0]\n            ref_pose_frame_dir = os.path.join(save_dir, ref_pose_videoname)\n            os.makedirs(ref_pose_frame_dir, exist_ok=True)\n            print('3DMM Extraction for the reference video providing pose')\n            ref_pose_coeff_path, _, _ =  preprocess_model.generate(ref_pose, ref_pose_frame_dir, args.preprocess, source_image_flag=False)\n    else:\n        ref_pose_coeff_path=None\n\n    #audio2ceoff\n    batch = get_data(first_coeff_path, audio_path, device, ref_eyeblink_coeff_path, still=args.still)\n    coeff_path = audio_to_coeff.generate(batch, save_dir, pose_style, ref_pose_coeff_path)\n\n    # 3dface render\n    if args.face3dvis:\n        from src.face3d.visualize import gen_composed_video\n        gen_composed_video(args, device, first_coeff_path, coeff_path, audio_path, os.path.join(save_dir, '3dface.mp4'))\n    \n    #coeff2video\n    data = get_facerender_data(coeff_path, crop_pic_path, first_coeff_path, audio_path, \n                                batch_size, input_yaw_list, input_pitch_list, input_roll_list,\n                                expression_scale=args.expression_scale, still_mode=args.still, preprocess=args.preprocess, size=args.size)\n    \n    result = animate_from_coeff.generate(data, save_dir, pic_path, crop_info, \\\n                                enhancer=args.enhancer, background_enhancer=args.background_enhancer, preprocess=args.preprocess, img_size=args.size)\n    \n    shutil.move(result, save_dir+'.mp4')\n    print('The generated video is named:', save_dir+'.mp4')\n\n    if not args.verbose:\n        shutil.rmtree(save_dir)\n\n    \nif __name__ == '__main__':\n\n    parser = ArgumentParser()  \n    parser.add_argument(\"--driven_audio\", default='./examples/driven_audio/bus_chinese.wav', help=\"path to driven audio\")\n    parser.add_argument(\"--source_image\", default='./examples/source_image/full_body_1.png', help=\"path to source image\")\n    parser.add_argument(\"--ref_eyeblink\", default=None, help=\"path to reference video providing eye blinking\")\n    parser.add_argument(\"--ref_pose\", default=None, help=\"path to reference video providing pose\")\n    parser.add_argument(\"--checkpoint_dir\", default='./checkpoints', help=\"path to output\")\n    parser.add_argument(\"--result_dir\", default='./results', help=\"path to output\")\n    parser.add_argument(\"--pose_style\", type=int, default=0,  help=\"input pose style from [0, 46)\")\n    parser.add_argument(\"--batch_size\", type=int, default=2,  help=\"the batch size of facerender\")\n    parser.add_argument(\"--size\", type=int, default=256,  help=\"the image size of the facerender\")\n    parser.add_argument(\"--expression_scale\", type=float, default=1.,  help=\"the batch size of facerender\")\n    parser.add_argument('--input_yaw', nargs='+', type=int, default=None, help=\"the input yaw degree of the user \")\n    parser.add_argument('--input_pitch', nargs='+', type=int, default=None, help=\"the input pitch degree of the user\")\n    parser.add_argument('--input_roll', nargs='+', type=int, default=None, help=\"the input roll degree of the user\")\n    parser.add_argument('--enhancer',  type=str, default=None, help=\"Face enhancer, [gfpgan, RestoreFormer]\")\n    parser.add_argument('--background_enhancer',  type=str, default=None, help=\"background enhancer, [realesrgan]\")\n    parser.add_argument(\"--cpu\", dest=\"cpu\", action=\"store_true\") \n    parser.add_argument(\"--face3dvis\", action=\"store_true\", help=\"generate 3d face and 3d landmarks\") \n    parser.add_argument(\"--still\", action=\"store_true\", help=\"can crop back to the original videos for the full body aniamtion\") \n    parser.add_argument(\"--preprocess\", default='crop', choices=['crop', 'extcrop', 'resize', 'full', 'extfull'], help=\"how to preprocess the images\" ) \n    parser.add_argument(\"--verbose\",action=\"store_true\", help=\"saving the intermedia output or not\" ) \n    parser.add_argument(\"--old_version\",action=\"store_true\", help=\"use the pth other than safetensor version\" ) \n\n\n    # net structure and parameters\n    parser.add_argument('--net_recon', type=str, default='resnet50', choices=['resnet18', 'resnet34', 'resnet50'], help='useless')\n    parser.add_argument('--init_path', type=str, default=None, help='Useless')\n    parser.add_argument('--use_last_fc',default=False, help='zero initialize the last fc')\n    parser.add_argument('--bfm_folder', type=str, default='./checkpoints/BFM_Fitting/')\n    parser.add_argument('--bfm_model', type=str, default='BFM_model_front.mat', help='bfm model')\n\n    # default renderer parameters\n    parser.add_argument('--focal', type=float, default=1015.)\n    parser.add_argument('--center', type=float, default=112.)\n    parser.add_argument('--camera_d', type=float, default=10.)\n    parser.add_argument('--z_near', type=float, default=5.)\n    parser.add_argument('--z_far', type=float, default=15.)\n\n    args = parser.parse_args()\n\n    if torch.cuda.is_available() and not args.cpu:\n        args.device = \"cuda\"\n    else:\n        args.device = \"cpu\"\n\n    main(args)\n\n"
        },
        {
          "name": "launcher.py",
          "type": "blob",
          "size": 6.8740234375,
          "content": "# this scripts installs necessary requirements and launches main program in webui.py\n# borrow from : https://github.com/AUTOMATIC1111/stable-diffusion-webui/blob/master/launch.py\nimport subprocess\nimport os\nimport sys\nimport importlib.util\nimport shlex\nimport platform\nimport json\n\npython = sys.executable\ngit = os.environ.get('GIT', \"git\")\nindex_url = os.environ.get('INDEX_URL', \"\")\nstored_commit_hash = None\nskip_install = False\ndir_repos = \"repositories\"\nscript_path = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))\n\nif 'GRADIO_ANALYTICS_ENABLED' not in os.environ:\n    os.environ['GRADIO_ANALYTICS_ENABLED'] = 'False'\n\n\ndef check_python_version():\n    is_windows = platform.system() == \"Windows\"\n    major = sys.version_info.major\n    minor = sys.version_info.minor\n    micro = sys.version_info.micro\n\n    if is_windows:\n        supported_minors = [10]\n    else:\n        supported_minors = [7, 8, 9, 10, 11]\n\n    if not (major == 3 and minor in supported_minors):\n\n        raise (f\"\"\"\nINCOMPATIBLE PYTHON VERSION\nThis program is tested with 3.10.6 Python, but you have {major}.{minor}.{micro}.\nIf you encounter an error with \"RuntimeError: Couldn't install torch.\" message,\nor any other error regarding unsuccessful package (library) installation,\nplease downgrade (or upgrade) to the latest version of 3.10 Python\nand delete current Python and \"venv\" folder in WebUI's directory.\nYou can download 3.10 Python from here: https://www.python.org/downloads/release/python-3109/\n{\"Alternatively, use a binary release of WebUI: https://github.com/AUTOMATIC1111/stable-diffusion-webui/releases\" if is_windows else \"\"}\nUse --skip-python-version-check to suppress this warning.\n\"\"\")\n\n\ndef commit_hash():\n    global stored_commit_hash\n\n    if stored_commit_hash is not None:\n        return stored_commit_hash\n\n    try:\n        stored_commit_hash = run(f\"{git} rev-parse HEAD\").strip()\n    except Exception:\n        stored_commit_hash = \"<none>\"\n\n    return stored_commit_hash\n\n\ndef run(command, desc=None, errdesc=None, custom_env=None, live=False):\n    if desc is not None:\n        print(desc)\n\n    if live:\n        result = subprocess.run(command, shell=True, env=os.environ if custom_env is None else custom_env)\n        if result.returncode != 0:\n            raise RuntimeError(f\"\"\"{errdesc or 'Error running command'}.\nCommand: {command}\nError code: {result.returncode}\"\"\")\n\n        return \"\"\n\n    result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, env=os.environ if custom_env is None else custom_env)\n\n    if result.returncode != 0:\n\n        message = f\"\"\"{errdesc or 'Error running command'}.\nCommand: {command}\nError code: {result.returncode}\nstdout: {result.stdout.decode(encoding=\"utf8\", errors=\"ignore\") if len(result.stdout)>0 else '<empty>'}\nstderr: {result.stderr.decode(encoding=\"utf8\", errors=\"ignore\") if len(result.stderr)>0 else '<empty>'}\n\"\"\"\n        raise RuntimeError(message)\n\n    return result.stdout.decode(encoding=\"utf8\", errors=\"ignore\")\n\n\ndef check_run(command):\n    result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    return result.returncode == 0\n\n\ndef is_installed(package):\n    try:\n        spec = importlib.util.find_spec(package)\n    except ModuleNotFoundError:\n        return False\n\n    return spec is not None\n\n\ndef repo_dir(name):\n    return os.path.join(script_path, dir_repos, name)\n\n\ndef run_python(code, desc=None, errdesc=None):\n    return run(f'\"{python}\" -c \"{code}\"', desc, errdesc)\n\n\ndef run_pip(args, desc=None):\n    if skip_install:\n        return\n\n    index_url_line = f' --index-url {index_url}' if index_url != '' else ''\n    return run(f'\"{python}\" -m pip {args} --prefer-binary{index_url_line}', desc=f\"Installing {desc}\", errdesc=f\"Couldn't install {desc}\")\n\n\ndef check_run_python(code):\n    return check_run(f'\"{python}\" -c \"{code}\"')\n\n\ndef git_clone(url, dir, name, commithash=None):\n    # TODO clone into temporary dir and move if successful\n\n    if os.path.exists(dir):\n        if commithash is None:\n            return\n\n        current_hash = run(f'\"{git}\" -C \"{dir}\" rev-parse HEAD', None, f\"Couldn't determine {name}'s hash: {commithash}\").strip()\n        if current_hash == commithash:\n            return\n\n        run(f'\"{git}\" -C \"{dir}\" fetch', f\"Fetching updates for {name}...\", f\"Couldn't fetch {name}\")\n        run(f'\"{git}\" -C \"{dir}\" checkout {commithash}', f\"Checking out commit for {name} with hash: {commithash}...\", f\"Couldn't checkout commit {commithash} for {name}\")\n        return\n\n    run(f'\"{git}\" clone \"{url}\" \"{dir}\"', f\"Cloning {name} into {dir}...\", f\"Couldn't clone {name}\")\n\n    if commithash is not None:\n        run(f'\"{git}\" -C \"{dir}\" checkout {commithash}', None, \"Couldn't checkout {name}'s hash: {commithash}\")\n\n\ndef git_pull_recursive(dir):\n    for subdir, _, _ in os.walk(dir):\n        if os.path.exists(os.path.join(subdir, '.git')):\n            try:\n                output = subprocess.check_output([git, '-C', subdir, 'pull', '--autostash'])\n                print(f\"Pulled changes for repository in '{subdir}':\\n{output.decode('utf-8').strip()}\\n\")\n            except subprocess.CalledProcessError as e:\n                print(f\"Couldn't perform 'git pull' on repository in '{subdir}':\\n{e.output.decode('utf-8').strip()}\\n\")\n\n\ndef run_extension_installer(extension_dir):\n    path_installer = os.path.join(extension_dir, \"install.py\")\n    if not os.path.isfile(path_installer):\n        return\n\n    try:\n        env = os.environ.copy()\n        env['PYTHONPATH'] = os.path.abspath(\".\")\n\n        print(run(f'\"{python}\" \"{path_installer}\"', errdesc=f\"Error running install.py for extension {extension_dir}\", custom_env=env))\n    except Exception as e:\n        print(e, file=sys.stderr)\n\n\ndef prepare_environment():\n    global skip_install\n\n    torch_command = os.environ.get('TORCH_COMMAND', \"pip install torch==1.12.1+cu113 torchvision==0.13.1+cu113 torchaudio==0.12.1 --extra-index-url https://download.pytorch.org/whl/cu113\")\n\n    ## check windows \n    if sys.platform != 'win32':\n        requirements_file = os.environ.get('REQS_FILE', \"req.txt\")\n    else:\n        requirements_file = os.environ.get('REQS_FILE', \"requirements.txt\")\n\n    commit = commit_hash()\n\n    print(f\"Python {sys.version}\")\n    print(f\"Commit hash: {commit}\")\n\n    if not is_installed(\"torch\") or not is_installed(\"torchvision\"):\n        run(f'\"{python}\" -m {torch_command}', \"Installing torch and torchvision\", \"Couldn't install torch\", live=True)\n\n    run_pip(f\"install -r \\\"{requirements_file}\\\"\", \"requirements for SadTalker WebUI (may take longer time in first time)\")\n\n    if sys.platform != 'win32' and not is_installed('tts'):\n        run_pip(f\"install TTS\", \"install TTS individually in SadTalker, which might not work on windows.\")\n\n\ndef start():\n    print(f\"Launching SadTalker Web UI\")\n    from app_sadtalker import sadtalker_demo\n    demo = sadtalker_demo()\n    demo.queue()\n    demo.launch()\n\nif __name__ == \"__main__\":\n    prepare_environment()\n    start()"
        },
        {
          "name": "predict.py",
          "type": "blob",
          "size": 6.3291015625,
          "content": "\"\"\"run bash scripts/download_models.sh first to prepare the weights file\"\"\"\nimport os\nimport shutil\nfrom argparse import Namespace\nfrom src.utils.preprocess import CropAndExtract\nfrom src.test_audio2coeff import Audio2Coeff\nfrom src.facerender.animate import AnimateFromCoeff\nfrom src.generate_batch import get_data\nfrom src.generate_facerender_batch import get_facerender_data\nfrom src.utils.init_path import init_path\nfrom cog import BasePredictor, Input, Path\n\ncheckpoints = \"checkpoints\"\n\n\nclass Predictor(BasePredictor):\n    def setup(self):\n        \"\"\"Load the model into memory to make running multiple predictions efficient\"\"\"\n        device = \"cuda\"\n\n        \n        sadtalker_paths = init_path(checkpoints,os.path.join(\"src\",\"config\"))\n\n        # init model\n        self.preprocess_model = CropAndExtract(sadtalker_paths, device\n        )\n\n        self.audio_to_coeff = Audio2Coeff(\n            sadtalker_paths,\n            device,\n        )\n\n        self.animate_from_coeff = {\n            \"full\": AnimateFromCoeff(\n                sadtalker_paths,\n                device,\n            ),\n            \"others\": AnimateFromCoeff(\n                sadtalker_paths,\n                device,\n            ),\n        }\n\n    def predict(\n        self,\n        source_image: Path = Input(\n            description=\"Upload the source image, it can be video.mp4 or picture.png\",\n        ),\n        driven_audio: Path = Input(\n            description=\"Upload the driven audio, accepts .wav and .mp4 file\",\n        ),\n        enhancer: str = Input(\n            description=\"Choose a face enhancer\",\n            choices=[\"gfpgan\", \"RestoreFormer\"],\n            default=\"gfpgan\",\n        ),\n        preprocess: str = Input(\n            description=\"how to preprocess the images\",\n            choices=[\"crop\", \"resize\", \"full\"],\n            default=\"full\",\n        ),\n        ref_eyeblink: Path = Input(\n            description=\"path to reference video providing eye blinking\",\n            default=None,\n        ),\n        ref_pose: Path = Input(\n            description=\"path to reference video providing pose\",\n            default=None,\n        ),\n        still: bool = Input(\n            description=\"can crop back to the original videos for the full body aniamtion when preprocess is full\",\n            default=True,\n        ),\n    ) -> Path:\n        \"\"\"Run a single prediction on the model\"\"\"\n\n        animate_from_coeff = (\n            self.animate_from_coeff[\"full\"]\n            if preprocess == \"full\"\n            else self.animate_from_coeff[\"others\"]\n        )\n\n        args = load_default()\n        args.pic_path = str(source_image)\n        args.audio_path = str(driven_audio)\n        device = \"cuda\"\n        args.still = still\n        args.ref_eyeblink = None if ref_eyeblink is None else str(ref_eyeblink)\n        args.ref_pose = None if ref_pose is None else str(ref_pose)\n\n        # crop image and extract 3dmm from image\n        results_dir = \"results\"\n        if os.path.exists(results_dir):\n            shutil.rmtree(results_dir)\n        os.makedirs(results_dir)\n        first_frame_dir = os.path.join(results_dir, \"first_frame_dir\")\n        os.makedirs(first_frame_dir)\n\n        print(\"3DMM Extraction for source image\")\n        first_coeff_path, crop_pic_path, crop_info = self.preprocess_model.generate(\n            args.pic_path, first_frame_dir, preprocess, source_image_flag=True\n        )\n        if first_coeff_path is None:\n            print(\"Can't get the coeffs of the input\")\n            return\n\n        if ref_eyeblink is not None:\n            ref_eyeblink_videoname = os.path.splitext(os.path.split(ref_eyeblink)[-1])[\n                0\n            ]\n            ref_eyeblink_frame_dir = os.path.join(results_dir, ref_eyeblink_videoname)\n            os.makedirs(ref_eyeblink_frame_dir, exist_ok=True)\n            print(\"3DMM Extraction for the reference video providing eye blinking\")\n            ref_eyeblink_coeff_path, _, _ = self.preprocess_model.generate(\n                ref_eyeblink, ref_eyeblink_frame_dir\n            )\n        else:\n            ref_eyeblink_coeff_path = None\n\n        if ref_pose is not None:\n            if ref_pose == ref_eyeblink:\n                ref_pose_coeff_path = ref_eyeblink_coeff_path\n            else:\n                ref_pose_videoname = os.path.splitext(os.path.split(ref_pose)[-1])[0]\n                ref_pose_frame_dir = os.path.join(results_dir, ref_pose_videoname)\n                os.makedirs(ref_pose_frame_dir, exist_ok=True)\n                print(\"3DMM Extraction for the reference video providing pose\")\n                ref_pose_coeff_path, _, _ = self.preprocess_model.generate(\n                    ref_pose, ref_pose_frame_dir\n                )\n        else:\n            ref_pose_coeff_path = None\n\n        # audio2ceoff\n        batch = get_data(\n            first_coeff_path,\n            args.audio_path,\n            device,\n            ref_eyeblink_coeff_path,\n            still=still,\n        )\n        coeff_path = self.audio_to_coeff.generate(\n            batch, results_dir, args.pose_style, ref_pose_coeff_path\n        )\n        # coeff2video\n        print(\"coeff2video\")\n        data = get_facerender_data(\n            coeff_path,\n            crop_pic_path,\n            first_coeff_path,\n            args.audio_path,\n            args.batch_size,\n            args.input_yaw,\n            args.input_pitch,\n            args.input_roll,\n            expression_scale=args.expression_scale,\n            still_mode=still,\n            preprocess=preprocess,\n        )\n        animate_from_coeff.generate(\n            data, results_dir, args.pic_path, crop_info,\n            enhancer=enhancer, background_enhancer=args.background_enhancer,\n            preprocess=preprocess)\n\n        output = \"/tmp/out.mp4\"\n        mp4_path = os.path.join(results_dir, [f for f in os.listdir(results_dir) if \"enhanced.mp4\" in f][0])\n        shutil.copy(mp4_path, output)\n\n        return Path(output)\n\n\ndef load_default():\n    return Namespace(\n        pose_style=0,\n        batch_size=2,\n        expression_scale=1.0,\n        input_yaw=None,\n        input_pitch=None,\n        input_roll=None,\n        background_enhancer=None,\n        face3dvis=False,\n        net_recon=\"resnet50\",\n        init_path=None,\n        use_last_fc=False,\n        bfm_folder=\"./src/config/\",\n        bfm_model=\"BFM_model_front.mat\",\n        focal=1015.0,\n        center=112.0,\n        camera_d=10.0,\n        z_near=5.0,\n        z_far=15.0,\n    )\n"
        },
        {
          "name": "quick_demo.ipynb",
          "type": "blob",
          "size": 6.7568359375,
          "content": "{\n  \"cells\": [\n    {\n      \"attachments\": {},\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"M74Gs_TjYl_B\"\n      },\n      \"source\": [\n        \"[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/Winfredy/SadTalker/blob/main/quick_demo.ipynb)\"\n      ]\n    },\n    {\n      \"attachments\": {},\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"view-in-github\"\n      },\n      \"source\": [\n        \"### SadTalker：Learning Realistic 3D Motion Coefficients for Stylized Audio-Driven Single Image Talking Face Animation \\n\",\n        \"\\n\",\n        \"[arxiv](https://arxiv.org/abs/2211.12194) | [project](https://sadtalker.github.io) | [Github](https://github.com/Winfredy/SadTalker)\\n\",\n        \"\\n\",\n        \"Wenxuan Zhang, Xiaodong Cun, Xuan Wang, Yong Zhang, Xi Shen, Yu Guo, Ying Shan, Fei Wang.\\n\",\n        \"\\n\",\n        \"Xi'an Jiaotong University, Tencent AI Lab, Ant Group\\n\",\n        \"\\n\",\n        \"CVPR 2023\\n\",\n        \"\\n\",\n        \"TL;DR: A realistic and stylized talking head video generation method from a single image and audio\\n\"\n      ]\n    },\n    {\n      \"attachments\": {},\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"kA89DV-sKS4i\"\n      },\n      \"source\": [\n        \"Installation (around 5 mins)\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"qJ4CplXsYl_E\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"### make sure that CUDA is available in Edit -> Nootbook settings -> GPU\\n\",\n        \"!nvidia-smi --query-gpu=name,memory.total,memory.free --format=csv,noheader\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"Mdq6j4E5KQAR\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"!update-alternatives --install /usr/local/bin/python3 python3 /usr/bin/python3.8 2\\n\",\n        \"!update-alternatives --install /usr/local/bin/python3 python3 /usr/bin/python3.9 1\\n\",\n        \"!sudo apt install python3.8\\n\",\n        \"\\n\",\n        \"!sudo apt-get install python3.8-distutils\\n\",\n        \"\\n\",\n        \"!python --version\\n\",\n        \"\\n\",\n        \"!apt-get update\\n\",\n        \"\\n\",\n        \"!apt install software-properties-common\\n\",\n        \"\\n\",\n        \"!sudo dpkg --remove --force-remove-reinstreq python3-pip python3-setuptools python3-wheel\\n\",\n        \"\\n\",\n        \"!apt-get install python3-pip\\n\",\n        \"\\n\",\n        \"print('Git clone project and install requirements...')\\n\",\n        \"!git clone https://github.com/Winfredy/SadTalker &> /dev/null\\n\",\n        \"%cd SadTalker\\n\",\n        \"!export PYTHONPATH=/content/SadTalker:$PYTHONPATH\\n\",\n        \"!python3.8 -m pip install torch==1.12.1+cu113 torchvision==0.13.1+cu113 torchaudio==0.12.1 --extra-index-url https://download.pytorch.org/whl/cu113\\n\",\n        \"!apt update\\n\",\n        \"!apt install ffmpeg &> /dev/null\\n\",\n        \"!python3.8 -m pip install -r requirements.txt\"\n      ]\n    },\n    {\n      \"attachments\": {},\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"DddcKB_nKsnk\"\n      },\n      \"source\": [\n        \"Download models (1 mins)\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"eDw3_UN8K2xa\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"print('Download pre-trained models...')\\n\",\n        \"!rm -rf checkpoints\\n\",\n        \"!bash scripts/download_models.sh\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"kK7DYeo7Yl_H\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# borrow from makeittalk\\n\",\n        \"import ipywidgets as widgets\\n\",\n        \"import glob\\n\",\n        \"import matplotlib.pyplot as plt\\n\",\n        \"print(\\\"Choose the image name to animate: (saved in folder 'examples/')\\\")\\n\",\n        \"img_list = glob.glob1('examples/source_image', '*.png')\\n\",\n        \"img_list.sort()\\n\",\n        \"img_list = [item.split('.')[0] for item in img_list]\\n\",\n        \"default_head_name = widgets.Dropdown(options=img_list, value='full3')\\n\",\n        \"def on_change(change):\\n\",\n        \"    if change['type'] == 'change' and change['name'] == 'value':\\n\",\n        \"        plt.imshow(plt.imread('examples/source_image/{}.png'.format(default_head_name.value)))\\n\",\n        \"        plt.axis('off')\\n\",\n        \"        plt.show()\\n\",\n        \"default_head_name.observe(on_change)\\n\",\n        \"display(default_head_name)\\n\",\n        \"plt.imshow(plt.imread('examples/source_image/{}.png'.format(default_head_name.value)))\\n\",\n        \"plt.axis('off')\\n\",\n        \"plt.show()\"\n      ]\n    },\n    {\n      \"attachments\": {},\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"-khNZcnGK4UK\"\n      },\n      \"source\": [\n        \"Animation\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"ToBlDusjK5sS\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# selected audio from exmaple/driven_audio\\n\",\n        \"img = 'examples/source_image/{}.png'.format(default_head_name.value)\\n\",\n        \"print(img)\\n\",\n        \"!python3.8 inference.py --driven_audio ./examples/driven_audio/RD_Radio31_000.wav \\\\\\n\",\n        \"           --source_image {img} \\\\\\n\",\n        \"           --result_dir ./results --still --preprocess full --enhancer gfpgan\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"fAjwGmKKYl_I\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# visualize code from makeittalk\\n\",\n        \"from IPython.display import HTML\\n\",\n        \"from base64 import b64encode\\n\",\n        \"import os, sys\\n\",\n        \"\\n\",\n        \"# get the last from results\\n\",\n        \"\\n\",\n        \"results = sorted(os.listdir('./results/'))\\n\",\n        \"\\n\",\n        \"mp4_name = glob.glob('./results/*.mp4')[0]\\n\",\n        \"\\n\",\n        \"mp4 = open('{}'.format(mp4_name),'rb').read()\\n\",\n        \"data_url = \\\"data:video/mp4;base64,\\\" + b64encode(mp4).decode()\\n\",\n        \"\\n\",\n        \"print('Display animation: {}'.format(mp4_name), file=sys.stderr)\\n\",\n        \"display(HTML(\\\"\\\"\\\"\\n\",\n        \"  <video width=256 controls>\\n\",\n        \"        <source src=\\\"%s\\\" type=\\\"video/mp4\\\">\\n\",\n        \"  </video>\\n\",\n        \"  \\\"\\\"\\\" % data_url))\\n\"\n      ]\n    }\n  ],\n  \"metadata\": {\n    \"accelerator\": \"GPU\",\n    \"colab\": {\n      \"provenance\": []\n    },\n    \"gpuClass\": \"standard\",\n    \"kernelspec\": {\n      \"display_name\": \"base\",\n      \"language\": \"python\",\n      \"name\": \"python3\"\n    },\n    \"language_info\": {\n      \"name\": \"python\",\n      \"version\": \"3.9.7\"\n    },\n    \"vscode\": {\n      \"interpreter\": {\n        \"hash\": \"db5031b3636a3f037ea48eb287fd3d023feb9033aefc2a9652a92e470fb0851b\"\n      }\n    }\n  },\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0\n}\n"
        },
        {
          "name": "req.txt",
          "type": "blob",
          "size": 0.298828125,
          "content": "llvmlite==0.38.1\nnumpy==1.21.6\nface_alignment==1.3.5\nimageio==2.19.3\nimageio-ffmpeg==0.4.7\nlibrosa==0.10.0.post2\nnumba==0.55.1\nresampy==0.3.1\npydub==0.25.1 \nscipy==1.10.1\nkornia==0.6.8\ntqdm\nyacs==0.1.8\npyyaml  \njoblib==1.1.0\nscikit-image==0.19.3\nbasicsr==1.4.2\nfacexlib==0.3.0\ngradio\ngfpgan\nav\nsafetensors\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.2705078125,
          "content": "numpy==1.23.4\nface_alignment==1.3.5\nimageio==2.19.3\nimageio-ffmpeg==0.4.7\nlibrosa==0.9.2 # \nnumba\nresampy==0.3.1\npydub==0.25.1 \nscipy==1.10.1\nkornia==0.6.8\ntqdm\nyacs==0.1.8\npyyaml  \njoblib==1.1.0\nscikit-image==0.19.3\nbasicsr==1.4.2\nfacexlib==0.3.0\ngradio\ngfpgan\nav\nsafetensors\n"
        },
        {
          "name": "requirements3d.txt",
          "type": "blob",
          "size": 0.28125,
          "content": "numpy==1.23.4\nface_alignment==1.3.5\nimageio==2.19.3\nimageio-ffmpeg==0.4.7\nlibrosa==0.9.2 # \nnumba\nresampy==0.3.1\npydub==0.25.1 \nscipy==1.5.3\nkornia==0.6.8\ntqdm\nyacs==0.1.8\npyyaml  \njoblib==1.1.0\nscikit-image==0.19.3\nbasicsr==1.4.2\nfacexlib==0.3.0\ntrimesh==3.9.20\ngradio\ngfpgan\nsafetensors"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "webui.bat",
          "type": "blob",
          "size": 0.2685546875,
          "content": "@echo off\n\nIF NOT EXIST venv (\npython -m venv venv\n) ELSE (\necho venv folder already exists, skipping creation...\n)\ncall .\\venv\\Scripts\\activate.bat\n\nset PYTHON=\"venv\\Scripts\\Python.exe\"\necho venv %PYTHON%\n\n%PYTHON% Launcher.py\n\necho.\necho Launch unsuccessful. Exiting.\npause"
        },
        {
          "name": "webui.sh",
          "type": "blob",
          "size": 3.6591796875,
          "content": "#!/usr/bin/env bash\n\n\n# If run from macOS, load defaults from webui-macos-env.sh\nif [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n    export TORCH_COMMAND=\"pip install torch==1.12.1 torchvision==0.13.1\"\nfi\n\n# python3 executable\nif [[ -z \"${python_cmd}\" ]]\nthen\n    python_cmd=\"python3\"\nfi\n\n# git executable\nif [[ -z \"${GIT}\" ]]\nthen\n    export GIT=\"git\"\nfi\n\n# python3 venv without trailing slash (defaults to ${install_dir}/${clone_dir}/venv)\nif [[ -z \"${venv_dir}\" ]]\nthen\n    venv_dir=\"venv\"\nfi\n\nif [[ -z \"${LAUNCH_SCRIPT}\" ]]\nthen\n    LAUNCH_SCRIPT=\"launcher.py\"\nfi\n\n# this script cannot be run as root by default\ncan_run_as_root=1\n\n# read any command line flags to the webui.sh script\nwhile getopts \"f\" flag > /dev/null 2>&1\ndo\n    case ${flag} in\n        f) can_run_as_root=1;;\n        *) break;;\n    esac\ndone\n\n# Disable sentry logging\nexport ERROR_REPORTING=FALSE\n\n# Do not reinstall existing pip packages on Debian/Ubuntu\nexport PIP_IGNORE_INSTALLED=0\n\n# Pretty print\ndelimiter=\"################################################################\"\n\nprintf \"\\n%s\\n\" \"${delimiter}\"\nprintf \"\\e[1m\\e[32mInstall script for SadTalker + Web UI\\n\"\nprintf \"\\e[1m\\e[34mTested on Debian 11 (Bullseye)\\e[0m\"\nprintf \"\\n%s\\n\" \"${delimiter}\"\n\n# Do not run as root\nif [[ $(id -u) -eq 0 && can_run_as_root -eq 0 ]]\nthen\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    printf \"\\e[1m\\e[31mERROR: This script must not be launched as root, aborting...\\e[0m\"\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    exit 1\nelse\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    printf \"Running on \\e[1m\\e[32m%s\\e[0m user\" \"$(whoami)\"\n    printf \"\\n%s\\n\" \"${delimiter}\"\nfi\n\nif [[ -d .git ]]\nthen\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    printf \"Repo already cloned, using it as install directory\"\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    install_dir=\"${PWD}/../\"\n    clone_dir=\"${PWD##*/}\"\nfi\n\n# Check prerequisites\ngpu_info=$(lspci 2>/dev/null | grep VGA)\ncase \"$gpu_info\" in\n    *\"Navi 1\"*|*\"Navi 2\"*) export HSA_OVERRIDE_GFX_VERSION=10.3.0\n    ;;\n    *\"Renoir\"*) export HSA_OVERRIDE_GFX_VERSION=9.0.0\n        printf \"\\n%s\\n\" \"${delimiter}\"\n        printf \"Experimental support for Renoir: make sure to have at least 4GB of VRAM and 10GB of RAM or enable cpu mode: --use-cpu all --no-half\"\n        printf \"\\n%s\\n\" \"${delimiter}\"\n    ;;\n    *) \n    ;;\nesac\nif echo \"$gpu_info\" | grep -q \"AMD\" && [[ -z \"${TORCH_COMMAND}\" ]]\nthen\n    export TORCH_COMMAND=\"pip install torch torchvision --extra-index-url https://download.pytorch.org/whl/rocm5.2\"\nfi  \n\nfor preq in \"${GIT}\" \"${python_cmd}\"\ndo\n    if ! hash \"${preq}\" &>/dev/null\n    then\n        printf \"\\n%s\\n\" \"${delimiter}\"\n        printf \"\\e[1m\\e[31mERROR: %s is not installed, aborting...\\e[0m\" \"${preq}\"\n        printf \"\\n%s\\n\" \"${delimiter}\"\n        exit 1\n    fi\ndone\n\nif ! \"${python_cmd}\" -c \"import venv\" &>/dev/null\nthen\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    printf \"\\e[1m\\e[31mERROR: python3-venv is not installed, aborting...\\e[0m\"\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    exit 1\nfi\n\nprintf \"\\n%s\\n\" \"${delimiter}\"\nprintf \"Create and activate python venv\"\nprintf \"\\n%s\\n\" \"${delimiter}\"\ncd \"${install_dir}\"/\"${clone_dir}\"/ || { printf \"\\e[1m\\e[31mERROR: Can't cd to %s/%s/, aborting...\\e[0m\" \"${install_dir}\" \"${clone_dir}\"; exit 1; }\nif [[ ! -d \"${venv_dir}\" ]]\nthen\n    \"${python_cmd}\" -m venv \"${venv_dir}\"\n    first_launch=1\nfi\n# shellcheck source=/dev/null\nif [[ -f \"${venv_dir}\"/bin/activate ]]\nthen\n    source \"${venv_dir}\"/bin/activate\nelse\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    printf \"\\e[1m\\e[31mERROR: Cannot activate python venv, aborting...\\e[0m\"\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    exit 1\nfi\n\nprintf \"\\n%s\\n\" \"${delimiter}\"\nprintf \"Launching launcher.py...\"\nprintf \"\\n%s\\n\" \"${delimiter}\"      \nexec \"${python_cmd}\" \"${LAUNCH_SCRIPT}\" \"$@\""
        }
      ]
    }
  ]
}