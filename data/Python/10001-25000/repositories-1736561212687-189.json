{
  "metadata": {
    "timestamp": 1736561212687,
    "page": 189,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "powerline/powerline",
      "stars": 14427,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.5517578125,
          "content": "# editorconfig ini file\n# Check out http://editorconfig.org for a list of plugins for different \n# IDEs/text editors that support this file. Vim plugin to support this:\n#\n#     http://www.vim.org/scripts/script.php?script_id=3934\n#     https://github.com/editorconfig/editorconfig-vim\nroot = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\nindent_style = tab\n# Despite promise somewhere alignment is done only using tabs. Thus setting \n# indent_size and tab_width is a requirement.\nindent_size = 4\ntab_width = 4\ncharset = utf-8\n\n[*.rst]\nindent_style = space\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0302734375,
          "content": "*.rst whitespace=-blank-at-eol\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1123046875,
          "content": "tags\n\n*.py[co]\n__pycache__\n\n*.egg\n*.egg-info\ndist\nbuild\n\nmessage.fail\n\n/client/powerline\n\n/tests/tmp\n/tests/status\n"
        },
        {
          "name": ".local.vimrc",
          "type": "blob",
          "size": 0.4892578125,
          "content": "\" Project vimrc file. To be sourced each time you open any file in this \n\" repository. You may use [vimscript #3393][1] [(homepage)][2] to do this \n\" automatically.\n\"\n\" [1]: http://www.vim.org/scripts/script.php?script_id=3393\n\" [2]: https://github.com/thinca/vim-localrc\nlet g:syntastic_python_flake8_args = '--ignore=W191,E501,E128,W291,E126,E101'\nlet b:syntastic_checkers = ['flake8']\nunlet! g:python_space_error_highlight\nlet g:pymode_syntax_indent_errors = 0\nlet g:pymode_syntax_space_errors = 0\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.58984375,
          "content": "sudo: false\ndist: trusty\ncache:\n    directories:\n        - $HOME/.cache/pip\n        - tests/bot-ci\naddons:\n    apt:\n        packages:\n            - libssl1.0.0\n            - zsh\n            - tcsh\n            - mksh\n            - busybox\n            # - rc\n            - socat\n            - bc\nlanguage: python\ninstall: tests/install.sh\nscript: tests/test.sh\njobs:\n    include:\n        - stage: PyPy\n          python: \"pypy\"\n        - python: \"pypy3\"\n        - stage: Latest Python\n          python: \"3.6\"\n        - stage: Intermediate versions\n          python: \"3.5\"\n        - python: \"3.4\"\n\n# vim: et\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 4.7890625,
          "content": "*****************\nHow to contribute\n*****************\n\nSo you want to contribute to the Powerline project? Awesome! This document \ndescribes the guidelines you should follow when making contributions to the \nproject.\n\n**Please note that these guidelines aren't mandatory in any way, but your \npull request will be merged a lot faster if you follow them.**\n\nGetting started\n===============\n\n* Make sure you have a `GitHub account <https://github.com/signup/free>`_.\n* Submit an `issue on GitHub <https://github.com/powerline/powerline/issues>`_, \n  assuming one does not already exist.\n\n  * Clearly describe the issue.\n  * If the issue is a bug: make sure you include steps to reproduce, and \n    include the earliest revision that you know has the issue.\n\n* Fork the repository on GitHub.\n\nMaking changes\n==============\n\n* Create a topic branch from where you want to base your work.\n\n  * Powerline uses the `Git Flow \n    <http://nvie.com/posts/a-successful-git-branching-model/>`_ branching \n    model.\n  * Most contributions should be based off the ``develop`` branch.\n  * Prefix your branch with ``feature/`` if you're working on a new feature.\n  * Include the issue number in your topic branch, e.g.  \n    ``321-fix-some-error`` or ``feature/123-a-cool-feature``.\n\n* Make commits of logical units.\n* Run your code through ``flake8`` and fix any programming style errors. Use \n  common sense regarding whitespace warnings, not all warnings need to be \n  fixed.\n* Make sure your commit messages are in the `proper format \n  <http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html>`_.  \n  The summary must be no longer than 70 characters. Refer to any related \n  issues with e.g. ``Ref #123`` or ``Fixes #234`` at the bottom of the \n  commit message. Commit messages can use Markdown with the following \n  exceptions:\n\n  * No HTML extensions.\n  * Only indented code blocks (no ``````` blocks).\n  * Long links should be moved to the bottom if they make the text wrap or \n    extend past 72 columns.\n\n* Make sure you have added the necessary tests for your changes.\n* Run *all* the tests to assure nothing else was accidentally broken.\n\nProgramming style\n-----------------\n\n* The project uses *tabs for indentation* and *spaces for alignment*, this \n  is also included in a vim modeline on top of every script file.\n* Run your code through ``flake8 --ignore=W191,E501,E128,W291,E126,E101`` to fix \n  any style errors. Use common sense regarding whitespace warnings, not all \n  ``flake8`` warnings need to be fixed.\n* Trailing whitespace to indicate a continuing paragraph is OK in comments, \n  documentation and commit messages.\n* It is allowed to have too long lines. It is advised though to avoid lines \n  wider then a hundred of characters.\n* Imports have the following structure:\n\n  1. Shebang and modeline in a form\n\n     .. code-block:: python\n\n         #!/usr/bin/env python\n         # vim:fileencoding=utf-8:noet\n\n     . Modeline is required, shebang is not. If shebang is present file must end \n     with\n\n     .. code-block:: python\n\n        if __name__ == '__main__':\n            # Actual script here\n\n  2. Module docstring.\n  3. ``__future__`` import exactly in a form\n\n     .. code-block:: python\n\n         from __future__ import (unicode_literals, division, absolute_import, print_function)\n\n     (powerline.shell is the only exception due to problems with argparse). It \n     is not separated by newline with shebang and modeline, but is with \n     docstring.\n  4. Standard python library imports in a form ``import X``.\n  5. Standard python library imports in a form ``from X import Y``.\n  6. Third-party (non-python and non-powerline) library imports in a form \n     ``import X``.\n  7. Third-party library imports in a form ``from X import Y``.\n  8. Powerline non-test imports in a form ``from powerline.X import Y``.\n  9. Powerline test imports in a form ``import tests.vim as vim_module``.\n  10. Powerline test imports in a form ``from tests.X import Y``.\n\n  Each entry is separated by newline from another entry. Any entry except for \n  the first and third ones is optional. Example with all entries:\n\n  .. code-block:: python\n\n    #!/usr/bin/env python\n    # vim:fileencoding=utf-8:noet\n\n    '''Powerline super module'''\n\n    from __future__ import (unicode_literals, division, absolute_import, print_function)\n\n    import sys\n\n    from argparse import ArgumentParser\n\n    import psutil\n\n    from colormath.color_diff import delta_e_cie2000\n\n    from powerline.lib.unicode import u\n\n    import tests.vim as vim_module\n\n    from tests import TestCase\n\nSubmitting changes\n==================\n\n* Push your changes to a topic branch in your fork of the repository.\n* If necessary, use ``git rebase -i <revision>`` to squash or reword commits\n  before submitting a pull request.\n* Submit a pull request to `powerline repository \n  <https://github.com/powerline/powerline>`_.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.10546875,
          "content": "Copyright 2013 Kim Silkeb√¶kken and other contributors\nhttps://github.com/powerline/powerline\n\nPermission is hereby granted, free of charge, to any person obtaining \na copy of this software and associated documentation files (the \n\"Software\"), to deal in the Software without restriction, including \nwithout limitation the rights to use, copy, modify, merge, publish, \ndistribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to \nthe following conditions:\n\nThe above copyright notice and this permission notice shall be \nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, \nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF \nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  \nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY \nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, \nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE \nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.26953125,
          "content": "recursive-include powerline *.json *.vim\nrecursive-include powerline/bindings *.*\nrecursive-exclude powerline/bindings *.pyc *.pyo\nrecursive-include powerline/dist *.*\nrecursive-include client *.*\nrecursive-include docs/source *.rst *.py\ninclude docs/Makefile\ninclude LICENSE\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 5.5947265625,
          "content": "Powerline\n=========\n\n**Powerline is a statusline plugin for vim, and provides statuslines and \nprompts for several other applications, including zsh, bash, fish, tmux,\nIPython, Awesome, i3 and Qtile.**\n\n+---------+---------------------------------------------------+\n| Author  | Kim Silkeb√¶kken (kim.silkebaekken+vim@gmail.com)  |\n+---------+---------------------------------------------------+\n| Source  | https://github.com/powerline/powerline            |\n+---------+---------------------------------------------------+\n| Version | beta                                              |\n+---------+---------------------------------------------------+\n\n**Powerline does not support python2 anymore and powerline will stop working with python2 in the near future.**\n\nFeatures\n--------\n\n* **Extensible and feature rich, written in Python.** Powerline was \n  completely rewritten in Python to get rid of as much vimscript as \n  possible. This has allowed much better extensibility, leaner and better \n  config files, and a structured, object-oriented codebase with no mandatory\n  third-party dependencies other than a Python interpreter.\n* **Stable and testable code base.** Using Python has allowed unit testing \n  of all the project code. The code is tested to work in Python 3.6+.\n* **Support for prompts and statuslines in many applications.** Originally \n  created exclusively for vim statuslines, the project has evolved to \n  provide statuslines in tmux and several WMs, and prompts for shells like \n  bash/zsh and other applications. It‚Äôs simple to write renderers for any \n  other applications that Powerline doesn‚Äôt yet support.\n* **Configuration and colorschemes written in JSON.** JSON is \n  a standardized, simple and easy to use file format that allows for easy \n  user configuration across all of Powerline‚Äôs supported applications.\n* **Fast and lightweight, with daemon support for even better performance.**\n  Although the code base spans a couple of thousand lines of code with no \n  goal of ‚Äúless than X lines of code‚Äù, the main focus is on good performance \n  and as little code as possible while still providing a rich set of \n  features. The new daemon also ensures that only one Python instance is \n  launched for prompts and statuslines, which provides excellent \n  performance.\n\n*But I hate Python / I don‚Äôt need shell prompts / this is just too much \nhassle for me / what happened to the original vim-powerline project / ‚Ä¶*\n\nYou should check out some of the Powerline derivatives. The most lightweight\nand feature-rich alternative is currently the `vim-airline \n<https://github.com/vim-airline/vim-airline>`_ project.\n\nConfiguration\n-------------\n\nBasic powerline configuration is done via `JSON` files located at `.config/powerline/`. It is a good idea to start by copying the default configuration located at `powerline_root/powerline/config_files/` to `.config/powerline/`.\nIf you installed the powerline from the AUR or via pip, `powerline_root` should be `/usr/lib/python3.6/site-packages/` or something similar, depending on your python version.\n\nIf you installed powerline via apt-get 'powerline_root' should be '/usr/share/powerline/'.\n\nThis should yield you the following directory structure:\n\n    ::\n\n        .config/powerline/\n        ‚îú‚îÄ‚îÄ colorschemes\n        ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ...\n        ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ wm\n        |¬†¬† ¬†¬†  ‚îî‚îÄ‚îÄ default.json  // Your configuration goes here\n        ‚îú‚îÄ‚îÄ colors.json\n        ‚îú‚îÄ‚îÄ config.json\n        ‚îî‚îÄ‚îÄ themes\n            ‚îú‚îÄ‚îÄ ...\n            ‚îî‚îÄ‚îÄ wm\n                ‚îî‚îÄ‚îÄ default.json  // Your configuration goes here\n\n\n\nThe files in the subdirectories of `themes` are used to specify which segments shall be shown; the files in subdirectories of `colorschemes` are used to specify which colors (as defined in `colors.json`) shall be used to display a segment.\n\nNote that your local configuration only overrides the global configuration, it does not replace it, i.e. if you don't configure something locally, the global default will be used instead.\n\n* Consult the `documentation <https://powerline.readthedocs.org/en/latest/configuration.html#quick-setup-guide>`_ for more details. See also the `segment reference <https://powerline.readthedocs.org/en/latest/configuration/segments.html>`_ for available segments and their configuration.\n* Check out `powerline-fonts <https://github.com/powerline/fonts>`_ for \n  pre-patched versions of popular, open source coding fonts.\n\nScreenshots\n-----------\n\nVim statusline\n^^^^^^^^^^^^^^\n\n**Mode-dependent highlighting**\n\n* .. image:: https://raw.github.com/powerline/powerline/develop/docs/source/_static/img/pl-mode-normal.png\n     :alt: Normal mode\n* .. image:: https://raw.github.com/powerline/powerline/develop/docs/source/_static/img/pl-mode-insert.png\n     :alt: Insert mode\n* .. image:: https://raw.github.com/powerline/powerline/develop/docs/source/_static/img/pl-mode-visual.png\n     :alt: Visual mode\n* .. image:: https://raw.github.com/powerline/powerline/develop/docs/source/_static/img/pl-mode-replace.png\n     :alt: Replace mode\n\n**Automatic truncation of segments in small windows**\n\n* .. image:: https://raw.github.com/powerline/powerline/develop/docs/source/_static/img/pl-truncate1.png\n     :alt: Truncation illustration\n* .. image:: https://raw.github.com/powerline/powerline/develop/docs/source/_static/img/pl-truncate2.png\n     :alt: Truncation illustration\n* .. image:: https://raw.github.com/powerline/powerline/develop/docs/source/_static/img/pl-truncate3.png\n     :alt: Truncation illustration\n\n----\n\nThe font in the screenshots is `Pragmata Pro`_ by Fabrizio Schiavi.\n\n.. _`Pragmata Pro`: http://www.fsd.it/shop/fonts/pragmatapro\n"
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "font",
          "type": "tree",
          "content": null
        },
        {
          "name": "powerline",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.9013671875,
          "content": "#!/usr/bin/env python\n# vim:fileencoding=utf-8:noet\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\n\nimport os\nimport sys\nimport logging\nimport shlex\nimport subprocess\n\nfrom setuptools import setup, find_packages\n\nfrom powerline.version import get_version\n\nCURRENT_DIR = os.path.abspath(os.path.dirname(__file__))\ntry:\n\tREADME = open(os.path.join(CURRENT_DIR, 'README.rst'), 'rb').read().decode('utf-8')\nexcept IOError:\n\tREADME = ''\n\nOLD_PYTHON = sys.version_info < (2, 7)\n\n\ndef compile_client():\n\t'''Compile the C powerline-client script.'''\n\n\tif hasattr(sys, 'getwindowsversion'):\n\t\traise NotImplementedError()\n\telse:\n\t\tfrom distutils.ccompiler import new_compiler\n\t\tcompiler = new_compiler().compiler\n\t\tcflags = os.environ.get('CFLAGS', str('-O3'))\n\t\t# A normal split would do a split on each space which might be incorrect. The\n\t\t# shlex will not split if a space occurs in an arguments value.\n\t\tsubprocess.check_call(compiler + shlex.split(cflags) + ['client/powerline.c', '-o', 'scripts/powerline'])\n\ntry:\n\tcompile_client()\nexcept Exception as e:\n\tprint('Compiling C version of powerline-client failed')\n\tlogging.exception(e)\n\t# FIXME Catch more specific exceptions\n\timport shutil\n\tif hasattr(shutil, 'which'):\n\t\twhich = shutil.which\n\telse:\n\t\tsys.path.append(CURRENT_DIR)\n\t\tfrom powerline.lib.shell import which\n\tcan_use_scripts = True\n\tif which('socat') and which('sed') and which('sh'):\n\t\tprint('Using powerline.sh script instead of C version (requires socat, sed and sh)')\n\t\tshutil.copyfile('client/powerline.sh', 'scripts/powerline')\n\telse:\n\t\tprint('Using powerline.py script instead of C version')\n\t\tshutil.copyfile('client/powerline.py', 'scripts/powerline')\nelse:\n\tcan_use_scripts = False\n\nsetup(\n\tname='powerline-status',\n\tversion=get_version(),\n\tdescription='The ultimate statusline/prompt utility.',\n\tlong_description=README,\n\tclassifiers=[\n\t\t'Development Status :: 4 - Beta',\n\t\t'Environment :: Console',\n\t\t'Environment :: Plugins',\n\t\t'Intended Audience :: End Users/Desktop',\n\t\t'License :: OSI Approved :: MIT License',\n\t\t'Natural Language :: English',\n\t\t'Operating System :: Microsoft :: Windows',\n\t\t'Operating System :: POSIX',\n\t\t'Programming Language :: Python :: 3.6',\n\t\t'Programming Language :: Python :: 3.7',\n\t\t'Programming Language :: Python :: 3.8',\n\t\t'Programming Language :: Python :: 3.9',\n\t\t'Programming Language :: Python :: Implementation :: CPython',\n\t\t'Programming Language :: Python :: Implementation :: PyPy',\n\t],\n\tdownload_url='https://github.com/powerline/powerline/archive/develop.zip',\n\tauthor='Kim Silkebaekken',\n\tauthor_email='kim.silkebaekken+vim@gmail.com',\n\turl='https://github.com/powerline/powerline',\n\tlicense='MIT',\n\t# XXX Python 3 doesn‚Äôt allow compiled C files to be included in the scripts\n\t# list below. This is because Python 3 distutils tries to decode the file to\n\t# ASCII, and fails when powerline-client is a binary.\n\t#\n\t# XXX Python 2 fucks up script contents*. Not using it to install scripts\n\t# any longer.\n\t# * Consider the following input:\n\t#     % alias hex1=$'hexdump -e \\'\"\" 1/1 \"%02X\\n\"\\''\n\t#     % diff <(hex1 ./scripts/powerline) <(hex1 ~/.local/bin/powerline)\n\t#   This will show output like\n\t#     375c375\n\t#     < 0D\n\t#     ---\n\t#     > 0A\n\t#   (repeated, with diff segment header numbers growing up).\n\t#\n\t# FIXME Current solution does not work with `pip install -e`. Still better\n\t# then solution that is not working at all.\n\tscripts=[\n\t\t'scripts/powerline-lint',\n\t\t'scripts/powerline-daemon',\n\t\t'scripts/powerline-render',\n\t\t'scripts/powerline-config',\n\t] + (['scripts/powerline'] if can_use_scripts else []),\n\tdata_files=(None if can_use_scripts else (('bin', ['scripts/powerline']),)),\n\tkeywords='',\n\tpackages=find_packages(exclude=('tests', 'tests.*')),\n\tinclude_package_data=True,\n\tzip_safe=False,\n\tinstall_requires=['argparse'] if OLD_PYTHON else [],\n\textras_require={\n\t\t'docs': [\n\t\t\t'Sphinx',\n\t\t\t'sphinx_rtd_theme',\n\t\t],\n\t},\n\ttest_suite='tests' if not OLD_PYTHON else None,\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}