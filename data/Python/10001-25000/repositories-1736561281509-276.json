{
  "metadata": {
    "timestamp": 1736561281509,
    "page": 276,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vanna-ai/vanna",
      "stars": 12593,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.033203125,
          "content": "*.ipynb linguist-detectable=false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2353515625,
          "content": "build\n**.egg-info\nvenv\n.DS_Store\nnotebooks/*\ntests/__pycache__\n__pycache__/\n.idea\n.coverage\ndocs/*.html\n.ipynb_checkpoints/\n.tox/\nnotebooks/chroma.sqlite3\ndist\n.env\n*.sqlite\nhtmlcov\nchroma.sqlite3\n*.bin\n.coverage.*\nmilvus.db\n.milvus.db.lock\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.4814453125,
          "content": "exclude: 'docs|node_modules|migrations|.git|.tox|assets.py'\ndefault_stages: [ commit ]\nfail_fast: true\n\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v3.2.0\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n      - id: check-merge-conflict\n      - id: debug-statements\n      - id: mixed-line-ending\n\n  - repo: https://github.com/pycqa/isort\n    rev: 5.12.0\n    hooks:\n      - id: isort\n        args: [ \"--profile\", \"black\", \"--filter-files\" ]\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.67578125,
          "content": "# Contributing\n\n## Setup\n```bash\ngit clone https://github.com/vanna-ai/vanna.git\ncd vanna/\n\npython3 -m venv venv\nsource venv/bin/activate\n\n# install package in editable mode\npip install -e '.[all]' tox pre-commit\n\n# Setup pre-commit hooks\npre-commit install\n\n# List dev targets\ntox list\n\n# Run tests\ntox -e py310\n```\n\n## Running the test on a Mac\n```bash\ntox -e mac\n```\n\n## Do this before you submit a PR:\n\nFind the most relevant sample notebook and then replace the install command with:\n\n```bash\n%pip install 'git+https://github.com/vanna-ai/vanna@your-branch#egg=vanna[chromadb,snowflake,openai]'\n```\n\nRun the necessary cells and verify that it works as expected in a real-world scenario.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2024 Vanna.AI\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.9140625,
          "content": "\n\n| GitHub | PyPI | Documentation | Gurubase |\n| ------ | ---- | ------------- | -------- |\n| [![GitHub](https://img.shields.io/badge/GitHub-vanna-blue?logo=github)](https://github.com/vanna-ai/vanna) | [![PyPI](https://img.shields.io/pypi/v/vanna?logo=pypi)](https://pypi.org/project/vanna/) | [![Documentation](https://img.shields.io/badge/Documentation-vanna-blue?logo=read-the-docs)](https://vanna.ai/docs/) | [![Gurubase](https://img.shields.io/badge/Gurubase-Ask%20Vanna%20Guru-006BFF)](https://gurubase.io/g/vanna) |\n\n# Vanna\nVanna is an MIT-licensed open-source Python RAG (Retrieval-Augmented Generation) framework for SQL generation and related functionality.\n\nhttps://github.com/vanna-ai/vanna/assets/7146154/1901f47a-515d-4982-af50-f12761a3b2ce\n\n![vanna-quadrants](https://github.com/vanna-ai/vanna/assets/7146154/1c7c88ba-c144-4ecf-a028-cf5ba7344ca2)\n\n## How Vanna works\n\n![Screen Recording 2024-01-24 at 11 21 37â€¯AM](https://github.com/vanna-ai/vanna/assets/7146154/1d2718ad-12a8-4a76-afa2-c61754462f93)\n\n\nVanna works in two easy steps - train a RAG \"model\" on your data, and then ask questions which will return SQL queries that can be set up to automatically run on your database.\n\n1. **Train a RAG \"model\" on your data**.\n2. **Ask questions**.\n\n![](img/vanna-readme-diagram.png)\n\nIf you don't know what RAG is, don't worry -- you don't need to know how this works under the hood to use it. You just need to know that you \"train\" a model, which stores some metadata and then use it to \"ask\" questions.\n\nSee the [base class](https://github.com/vanna-ai/vanna/blob/main/src/vanna/base/base.py) for more details on how this works under the hood.\n\n## User Interfaces\nThese are some of the user interfaces that we've built using Vanna. You can use these as-is or as a starting point for your own custom interface.\n\n- [Jupyter Notebook](https://vanna.ai/docs/postgres-openai-vanna-vannadb/)\n- [vanna-ai/vanna-streamlit](https://github.com/vanna-ai/vanna-streamlit)\n- [vanna-ai/vanna-flask](https://github.com/vanna-ai/vanna-flask)\n- [vanna-ai/vanna-slack](https://github.com/vanna-ai/vanna-slack)\n\n## Supported LLMs\n\n- [OpenAI](https://github.com/vanna-ai/vanna/tree/main/src/vanna/openai)\n- [Anthropic](https://github.com/vanna-ai/vanna/tree/main/src/vanna/anthropic)\n- [Gemini](https://github.com/vanna-ai/vanna/blob/main/src/vanna/google/gemini_chat.py)\n- [HuggingFace](https://github.com/vanna-ai/vanna/blob/main/src/vanna/hf/hf.py)\n- [AWS Bedrock](https://github.com/vanna-ai/vanna/tree/main/src/vanna/bedrock)\n- [Ollama](https://github.com/vanna-ai/vanna/tree/main/src/vanna/ollama)\n- [Qianwen](https://github.com/vanna-ai/vanna/tree/main/src/vanna/qianwen)\n- [Qianfan](https://github.com/vanna-ai/vanna/tree/main/src/vanna/qianfan)\n- [Zhipu](https://github.com/vanna-ai/vanna/tree/main/src/vanna/ZhipuAI)\n\n## Supported VectorStores\n\n- [AzureSearch](https://github.com/vanna-ai/vanna/tree/main/src/vanna/azuresearch)\n- [Opensearch](https://github.com/vanna-ai/vanna/tree/main/src/vanna/opensearch)\n- [PgVector](https://github.com/vanna-ai/vanna/tree/main/src/vanna/pgvector)\n- [PineCone](https://github.com/vanna-ai/vanna/tree/main/src/vanna/pinecone)\n- [ChromaDB](https://github.com/vanna-ai/vanna/tree/main/src/vanna/chromadb)\n- [FAISS](https://github.com/vanna-ai/vanna/tree/main/src/vanna/faiss)\n- [Marqo](https://github.com/vanna-ai/vanna/tree/main/src/vanna/marqo)\n- [Milvus](https://github.com/vanna-ai/vanna/tree/main/src/vanna/milvus)\n- [Qdrant](https://github.com/vanna-ai/vanna/tree/main/src/vanna/qdrant)\n- [Weaviate](https://github.com/vanna-ai/vanna/tree/main/src/vanna/weaviate)\n\n## Supported Databases\n\n- [PostgreSQL](https://www.postgresql.org/)\n- [MySQL](https://www.mysql.com/)\n- [PrestoDB](https://prestodb.io/)\n- [Apache Hive](https://hive.apache.org/)\n- [ClickHouse](https://clickhouse.com/)\n- [Snowflake](https://www.snowflake.com/en/)\n- [Oracle](https://www.oracle.com/)\n- [Microsoft SQL Server](https://www.microsoft.com/en-us/sql-server/sql-server-downloads)\n- [BigQuery](https://cloud.google.com/bigquery)\n- [SQLite](https://www.sqlite.org/)\n- [DuckDB](https://duckdb.org/)\n\n\n## Getting started\nSee the [documentation](https://vanna.ai/docs/) for specifics on your desired database, LLM, etc.\n\nIf you want to get a feel for how it works after training, you can try this [Colab notebook](https://vanna.ai/docs/app/).\n\n\n### Install\n```bash\npip install vanna\n```\n\nThere are a number of optional packages that can be installed so see the [documentation](https://vanna.ai/docs/) for more details.\n\n### Import\nSee the [documentation](https://vanna.ai/docs/) if you're customizing the LLM or vector database.\n\n```python\n# The import statement will vary depending on your LLM and vector database. This is an example for OpenAI + ChromaDB\n\nfrom vanna.openai.openai_chat import OpenAI_Chat\nfrom vanna.chromadb.chromadb_vector import ChromaDB_VectorStore\n\nclass MyVanna(ChromaDB_VectorStore, OpenAI_Chat):\n    def __init__(self, config=None):\n        ChromaDB_VectorStore.__init__(self, config=config)\n        OpenAI_Chat.__init__(self, config=config)\n\nvn = MyVanna(config={'api_key': 'sk-...', 'model': 'gpt-4-...'})\n\n# See the documentation for other options\n\n```\n\n\n## Training\nYou may or may not need to run these `vn.train` commands depending on your use case. See the [documentation](https://vanna.ai/docs/) for more details.\n\nThese statements are shown to give you a feel for how it works.\n\n### Train with DDL Statements\nDDL statements contain information about the table names, columns, data types, and relationships in your database.\n\n```python\nvn.train(ddl=\"\"\"\n    CREATE TABLE IF NOT EXISTS my-table (\n        id INT PRIMARY KEY,\n        name VARCHAR(100),\n        age INT\n    )\n\"\"\")\n```\n\n### Train with Documentation\nSometimes you may want to add documentation about your business terminology or definitions.\n\n```python\nvn.train(documentation=\"Our business defines XYZ as ...\")\n```\n\n### Train with SQL\nYou can also add SQL queries to your training data. This is useful if you have some queries already laying around. You can just copy and paste those from your editor to begin generating new SQL.\n\n```python\nvn.train(sql=\"SELECT name, age FROM my-table WHERE name = 'John Doe'\")\n```\n\n\n## Asking questions\n```python\nvn.ask(\"What are the top 10 customers by sales?\")\n```\n\nYou'll get SQL\n```sql\nSELECT c.c_name as customer_name,\n        sum(l.l_extendedprice * (1 - l.l_discount)) as total_sales\nFROM   snowflake_sample_data.tpch_sf1.lineitem l join snowflake_sample_data.tpch_sf1.orders o\n        ON l.l_orderkey = o.o_orderkey join snowflake_sample_data.tpch_sf1.customer c\n        ON o.o_custkey = c.c_custkey\nGROUP BY customer_name\nORDER BY total_sales desc limit 10;\n```\n\nIf you've connected to a database, you'll get the table:\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CUSTOMER_NAME</th>\n      <th>TOTAL_SALES</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Customer#000143500</td>\n      <td>6757566.0218</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Customer#000095257</td>\n      <td>6294115.3340</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Customer#000087115</td>\n      <td>6184649.5176</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Customer#000131113</td>\n      <td>6080943.8305</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Customer#000134380</td>\n      <td>6075141.9635</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Customer#000103834</td>\n      <td>6059770.3232</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Customer#000069682</td>\n      <td>6057779.0348</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Customer#000102022</td>\n      <td>6039653.6335</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Customer#000098587</td>\n      <td>6027021.5855</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Customer#000064660</td>\n      <td>5905659.6159</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\nYou'll also get an automated Plotly chart:\n![](img/top-10-customers.png)\n\n## RAG vs. Fine-Tuning\nRAG\n- Portable across LLMs\n- Easy to remove training data if any of it becomes obsolete\n- Much cheaper to run than fine-tuning\n- More future-proof -- if a better LLM comes out, you can just swap it out\n\nFine-Tuning\n- Good if you need to minimize tokens in the prompt\n- Slow to get started\n- Expensive to train and run (generally)\n\n## Why Vanna?\n\n1. **High accuracy on complex datasets.**\n    - Vannaâ€™s capabilities are tied to the training data you give it\n    - More training data means better accuracy for large and complex datasets\n2. **Secure and private.**\n    - Your database contents are never sent to the LLM or the vector database\n    - SQL execution happens in your local environment\n3. **Self learning.**\n    - If using via Jupyter, you can choose to \"auto-train\" it on the queries that were successfully executed\n    - If using via other interfaces, you can have the interface prompt the user to provide feedback on the results\n    - Correct question to SQL pairs are stored for future reference and make the future results more accurate\n4. **Supports any SQL database.**\n    - The package allows you to connect to any SQL database that you can otherwise connect to with Python\n5. **Choose your front end.**\n    - Most people start in a Jupyter Notebook.\n    - Expose to your end users via Slackbot, web app, Streamlit app, or a custom front end.\n\n## Extending Vanna\nVanna is designed to connect to any database, LLM, and vector database. There's a [VannaBase](https://github.com/vanna-ai/vanna/blob/main/src/vanna/base/base.py) abstract base class that defines some basic functionality. The package provides implementations for use with OpenAI and ChromaDB. You can easily extend Vanna to use your own LLM or vector database. See the [documentation](https://vanna.ai/docs/) for more details.\n\n## Vanna in 100 Seconds\n\nhttps://github.com/vanna-ai/vanna/assets/7146154/eb90ee1e-aa05-4740-891a-4fc10e611cab\n\n## More resources\n - [Full Documentation](https://vanna.ai/docs/)\n - [Website](https://vanna.ai)\n - [Discord group for support](https://discord.gg/qUZYKHremx)\n"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "papers",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.2470703125,
          "content": "[build-system]\nrequires = [\"flit_core >=3.2,<4\"]\nbuild-backend = \"flit_core.buildapi\"\n\n[project]\nname = \"vanna\"\nversion = \"0.7.5\"\nauthors = [\n  { name=\"Zain Hoda\", email=\"zain@vanna.ai\" },\n]\n\ndescription = \"Generate SQL queries from natural language\"\nreadme = \"README.md\"\nrequires-python = \">=3.9\"\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: OS Independent\",\n]\ndependencies = [\n    \"requests\", \"tabulate\", \"plotly\", \"pandas\", \"sqlparse\", \"kaleido\", \"flask\", \"flask-sock\", \"flasgger\", \"sqlalchemy\"\n]\n\n[project.urls]\n\"Homepage\" = \"https://github.com/vanna-ai/vanna\"\n\"Bug Tracker\" = \"https://github.com/vanna-ai/vanna/issues\"\n\n[project.optional-dependencies]\npostgres = [\"psycopg2-binary\", \"db-dtypes\"]\nmysql = [\"PyMySQL\"]\nclickhouse = [\"clickhouse_connect\"]\nbigquery = [\"google-cloud-bigquery\"]\nsnowflake = [\"snowflake-connector-python\"]\nduckdb = [\"duckdb\"]\ngoogle = [\"google-generativeai\", \"google-cloud-aiplatform\"]\nall = [\"psycopg2-binary\", \"db-dtypes\", \"PyMySQL\", \"google-cloud-bigquery\", \"snowflake-connector-python\", \"duckdb\", \"openai\", \"qianfan\", \"mistralai>=1.0.0\", \"chromadb\", \"anthropic\", \"zhipuai\", \"marqo\", \"google-generativeai\", \"google-cloud-aiplatform\", \"qdrant-client\", \"fastembed\", \"ollama\", \"httpx\", \"opensearch-py\", \"opensearch-dsl\", \"transformers\", \"pinecone-client\", \"pymilvus[model]\",\"weaviate-client\", \"azure-search-documents\", \"azure-identity\", \"azure-common\", \"faiss-cpu\", \"boto\", \"boto3\", \"botocore\", \"langchain_core\", \"langchain_postgres\", \"xinference-client\"]\ntest = [\"tox\"]\nchromadb = [\"chromadb\"]\nopenai = [\"openai\"]\nqianfan = [\"qianfan\"]\nmistralai = [\"mistralai>=1.0.0\"]\nanthropic = [\"anthropic\"]\ngemini = [\"google-generativeai\"]\nmarqo = [\"marqo\"]\nzhipuai = [\"zhipuai\"]\nollama = [\"ollama\", \"httpx\"]\nqdrant = [\"qdrant-client\", \"fastembed\"]\nvllm = [\"vllm\"]\npinecone = [\"pinecone-client\", \"fastembed\"]\nopensearch = [\"opensearch-py\", \"opensearch-dsl\"]\nhf = [\"transformers\"]\nmilvus = [\"pymilvus[model]\"]\nbedrock = [\"boto3\", \"botocore\"]\nweaviate = [\"weaviate-client\"]\nazuresearch = [\"azure-search-documents\", \"azure-identity\", \"azure-common\", \"fastembed\"]\npgvector = [\"langchain-postgres>=0.0.12\"]\nfaiss-cpu = [\"faiss-cpu\"]\nfaiss-gpu = [\"faiss-gpu\"]\nxinference-client = [\"xinference-client\"]\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.2705078125,
          "content": "[flake8]\nignore = BLK100,W503,E203,E722,F821,F841\nmax-line-length = 100\nexclude = .tox,.git,docs,venv,jupyter_notebook_config.py,jupyter_lab_config.py,assets.py\n\n[tool:brunette]\nverbose = true\nsingle-quotes = false\ntarget-version = py39\nexclude = .tox,.git,docs,venv,assets.py\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.48828125,
          "content": "[tox]\nenvlist =\n    py310,\n    mac,\n    flake8,\n\n[py]\ndeps=\n    pytest-cov\n    pytest-remove-stale-bytecode\n\n[testenv:py310]\ndeps=\n    {[py]deps}\nextras = all\npassenv = *\nbasepython = python3.10\ncommands = pytest -v --cov=tests/ --cov-report=term --cov-report=html\n\n[testenv:mac]\ndeps=\n    {[py]deps}\n    python-dotenv\nextras = all\nbasepython = python\ncommands =\n    pytest -x -v --cov=tests/ --cov-report=term --cov-report=html\n\n[testenv:flake8]\nexclude = .tox/*\ndeps = flake8\ncommands = flake8 src\n"
        },
        {
          "name": "training_data",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}