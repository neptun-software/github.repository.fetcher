{
  "metadata": {
    "timestamp": 1736561140709,
    "page": 87,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nginx-proxy/nginx-proxy",
      "stars": 18720,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.078125,
          "content": ".git\n.github\ntest\n.dockerignore\n.gitignore\n*.yml\nDockerfile*\nMakefile\nREADME.md\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.037109375,
          "content": "**/__pycache__/\n**/.cache/\n.idea/\nwip\n"
        },
        {
          "name": "Dockerfile.alpine",
          "type": "blob",
          "size": 1.3427734375,
          "content": "FROM docker.io/nginxproxy/docker-gen:0.14.4 AS docker-gen\n\nFROM docker.io/nginxproxy/forego:0.18.2 AS forego\n\n# Build the final image\nFROM docker.io/library/nginx:1.27.3-alpine\n\nARG NGINX_PROXY_VERSION\n# Add DOCKER_GEN_VERSION environment variable because \n# acme-companion rely on it (but the actual value is not important)\nARG DOCKER_GEN_VERSION=\"unknown\"\nENV NGINX_PROXY_VERSION=${NGINX_PROXY_VERSION} \\\n   DOCKER_GEN_VERSION=${DOCKER_GEN_VERSION} \\\n   DOCKER_HOST=unix:///tmp/docker.sock\n\n# Install dependencies\nRUN apk add --no-cache --virtual .run-deps bash openssl\n\n# Configure Nginx\nRUN echo -e \"\\ninclude /etc/nginx/toplevel.conf.d/*.conf;\" >> /etc/nginx/nginx.conf \\\n   && sed -i 's/worker_connections.*;$/worker_connections   10240;/' /etc/nginx/nginx.conf \\\n   && sed -i -e '/^\\}$/{s//\\}\\nworker_rlimit_nofile 20480;/;:a' -e '$!N;$!ba' -e '}' /etc/nginx/nginx.conf \\\n   && mkdir -p '/etc/nginx/toplevel.conf.d' \\\n   && mkdir -p '/etc/nginx/dhparam' \\\n   && mkdir -p '/etc/nginx/certs' \\\n   && mkdir -p '/usr/share/nginx/html/errors'\n\n# Install Forego + docker-gen\nCOPY --from=forego /usr/local/bin/forego /usr/local/bin/forego\nCOPY --from=docker-gen /usr/local/bin/docker-gen /usr/local/bin/docker-gen\n\nCOPY network_internal.conf /etc/nginx/\n\nCOPY app nginx.tmpl LICENSE /app/\nWORKDIR /app/\n\nENTRYPOINT [\"/app/docker-entrypoint.sh\"]\nCMD [\"forego\", \"start\", \"-r\"]\n"
        },
        {
          "name": "Dockerfile.debian",
          "type": "blob",
          "size": 1.267578125,
          "content": "FROM docker.io/nginxproxy/docker-gen:0.14.4-debian AS docker-gen\n\nFROM docker.io/nginxproxy/forego:0.18.2-debian AS forego\n\n# Build the final image\nFROM docker.io/library/nginx:1.27.3\n\nARG NGINX_PROXY_VERSION\n# Add DOCKER_GEN_VERSION environment variable because \n# acme-companion rely on it (but the actual value is not important)\nARG DOCKER_GEN_VERSION=\"unknown\"\nENV NGINX_PROXY_VERSION=${NGINX_PROXY_VERSION} \\\n   DOCKER_GEN_VERSION=${DOCKER_GEN_VERSION} \\\n   DOCKER_HOST=unix:///tmp/docker.sock\n\n# Configure Nginx\nRUN echo \"\\ninclude /etc/nginx/toplevel.conf.d/*.conf;\" >> /etc/nginx/nginx.conf \\\n   && sed -i 's/worker_connections.*;$/worker_connections  10240;/' /etc/nginx/nginx.conf \\\n   && sed -i -e '/^\\}$/{s//\\}\\nworker_rlimit_nofile 20480;/;:a' -e '$!N;$!ba' -e '}' /etc/nginx/nginx.conf \\\n   && mkdir -p '/etc/nginx/toplevel.conf.d' \\\n   && mkdir -p '/etc/nginx/dhparam' \\\n   && mkdir -p '/etc/nginx/certs' \\\n   && mkdir -p '/usr/share/nginx/html/errors'\n\n# Install Forego + docker-gen\nCOPY --from=forego /usr/local/bin/forego /usr/local/bin/forego\nCOPY --from=docker-gen /usr/local/bin/docker-gen /usr/local/bin/docker-gen\n\nCOPY network_internal.conf /etc/nginx/\n\nCOPY app nginx.tmpl LICENSE /app/\nWORKDIR /app/\n\nENTRYPOINT [\"/app/docker-entrypoint.sh\"]\nCMD [\"forego\", \"start\", \"-r\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0966796875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014-2020 Jason Wilder\nCopyright (c) 2021-2022 Nicolas Duchon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.578125,
          "content": ".SILENT :\n.PHONY : test-debian test-alpine test\n\n\nbuild-webserver:\n\tdocker build --pull -t web test/requirements/web\n\nbuild-nginx-proxy-test-debian:\n\tdocker build --pull --build-arg NGINX_PROXY_VERSION=\"test\" -f Dockerfile.debian -t nginxproxy/nginx-proxy:test .\n\nbuild-nginx-proxy-test-alpine:\n\tdocker build --pull --build-arg NGINX_PROXY_VERSION=\"test\" -f Dockerfile.alpine -t nginxproxy/nginx-proxy:test .\n\ntest-debian: build-webserver build-nginx-proxy-test-debian\n\ttest/pytest.sh\n\ntest-alpine: build-webserver build-nginx-proxy-test-alpine\n\ttest/pytest.sh\n\ntest: test-debian test-alpine\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.3017578125,
          "content": "[![Test](https://github.com/nginx-proxy/nginx-proxy/actions/workflows/test.yml/badge.svg)](https://github.com/nginx-proxy/nginx-proxy/actions/workflows/test.yml)\n[![GitHub release](https://img.shields.io/github/v/release/nginx-proxy/nginx-proxy)](https://github.com/nginx-proxy/nginx-proxy/releases)\n[![nginx 1.27.3](https://img.shields.io/badge/nginx-1.27.3-brightgreen.svg?logo=nginx)](https://nginx.org/en/CHANGES)\n[![Docker Image Size](https://img.shields.io/docker/image-size/nginxproxy/nginx-proxy?sort=semver)](https://hub.docker.com/r/nginxproxy/nginx-proxy \"Click to view the image on Docker Hub\")\n[![Docker stars](https://img.shields.io/docker/stars/nginxproxy/nginx-proxy.svg)](https://hub.docker.com/r/nginxproxy/nginx-proxy \"DockerHub\")\n[![Docker pulls](https://img.shields.io/docker/pulls/nginxproxy/nginx-proxy.svg)](https://hub.docker.com/r/nginxproxy/nginx-proxy \"DockerHub\")\n\nnginx-proxy sets up a container running nginx and [docker-gen](https://github.com/nginx-proxy/docker-gen). docker-gen generates reverse proxy configs for nginx and reloads nginx when containers are started and stopped.\n\nSee [Automated Nginx Reverse Proxy for Docker](http://jasonwilder.com/blog/2014/03/25/automated-nginx-reverse-proxy-for-docker/) for why you might want to use this.\n\n### Usage\n\nTo run it:\n\n```console\ndocker run --detach \\\n    --name nginx-proxy \\\n    --publish 80:80 \\\n    --volume /var/run/docker.sock:/tmp/docker.sock:ro \\\n    nginxproxy/nginx-proxy:1.6\n```\n\nThen start any containers (here an nginx container) you want proxied with an env var `VIRTUAL_HOST=subdomain.yourdomain.com`\n\n```console\ndocker run --detach \\\n    --name your-proxied-app \\\n    --env VIRTUAL_HOST=foo.bar.com \\\n    nginx\n```\n\nProvided your DNS is setup to resolve `foo.bar.com` to the host running nginx-proxy, a request to `http://foo.bar.com` will then be routed to a container with the `VIRTUAL_HOST` env var set to `foo.bar.com` (in this case, the **your-proxied-app** container).\n\nThe containers being proxied must :\n\n- [expose](https://docs.docker.com/engine/reference/run/#expose-incoming-ports) the port to be proxied, either by using the `EXPOSE` directive in their `Dockerfile` or by using the `--expose` flag to `docker run` or `docker create`.\n- share at least one Docker network with the nginx-proxy container: by default, if you don't pass the `--net` flag when your nginx-proxy container is created, it will only be attached to the default bridge network. This means that it will not be able to connect to containers on networks other than bridge.\n\nNote: providing a port number in `VIRTUAL_HOST` isn't suported, please see [virtual ports](https://github.com/nginx-proxy/nginx-proxy/tree/main/docs#virtual-ports) or [custom external HTTP/HTTPS ports](https://github.com/nginx-proxy/nginx-proxy/tree/main/docs#custom-external-httphttps-ports) depending on what you want to achieve.\n\n### Image variants\n\nThe nginx-proxy images are available in two flavors.\n\n#### Debian based version\n\nThis image is based on the nginx:mainline image, itself based on the debian slim image.\n\n```console\ndocker pull nginxproxy/nginx-proxy:1.6\n```\n\n#### Alpine based version (`-alpine` suffix)\n\nThis image is based on the nginx:alpine image.\n\n```console\ndocker pull nginxproxy/nginx-proxy:1.6-alpine\n```\n\n> [!IMPORTANT]\n>\n> #### A note on `latest` and `alpine`:\n>\n> It is not recommended to use the `latest` (`nginxproxy/nginx-proxy`, `nginxproxy/nginx-proxy:latest`) or `alpine` (`nginxproxy/nginx-proxy:alpine`) tag for production setups.\n>\n> [Those tags point](https://hub.docker.com/r/nginxproxy/nginx-proxy/tags) to the latest commit in the `main` branch. They do not carry any promise of stability, and using them will probably put your nginx-proxy setup at risk of experiencing uncontrolled updates to non backward compatible versions (or versions with breaking changes). You should always specify the version you want to use explicitly to ensure your setup doesn't break when the image is updated.\n\n### Additional documentation\n\nPlease check the [docs section](https://github.com/nginx-proxy/nginx-proxy/tree/main/docs).\n\n### Powered by \n\n[![GoLand logo](https://resources.jetbrains.com/storage/products/company/brand/logos/GoLand_icon.svg)](https://www.jetbrains.com/go/)\n[![PyCharm logo](https://resources.jetbrains.com/storage/products/company/brand/logos/PyCharm_icon.svg)](https://www.jetbrains.com/pycharm/)\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose-separate-containers.yml",
          "type": "blob",
          "size": 0.5556640625,
          "content": "volumes:\n  nginx_conf:\n\nservices:\n  nginx:\n    image: nginx\n    container_name: nginx\n    ports:\n      - \"80:80\"\n    volumes:\n      - nginx_conf:/etc/nginx/conf.d:ro\n\n  dockergen:\n    image: nginxproxy/docker-gen\n    command: -notify-sighup nginx -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\n    volumes:\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n      - ./nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl\n      - nginx_conf:/etc/nginx/conf.d\n\n  whoami:\n    image: jwilder/whoami\n    environment:\n      - VIRTUAL_HOST=whoami.example\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.373046875,
          "content": "services:\n  nginx-proxy:\n    image: nginxproxy/nginx-proxy\n    container_name: nginx-proxy\n    ports:\n      - \"80:80\"\n    volumes:\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n\n    # if you want to proxy based on host ports, you'll want to use the host network\n    # network_mode: \"host\"\n\n  whoami:\n    image: jwilder/whoami\n    environment:\n      - VIRTUAL_HOST=whoami.example\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "network_internal.conf",
          "type": "blob",
          "size": 0.171875,
          "content": "# Only allow traffic from internal clients\nallow 127.0.0.0/8;\nallow 10.0.0.0/8;\nallow 192.168.0.0/16;\nallow 172.16.0.0/12;\nallow fc00::/7; # IPv6 local address range\ndeny all;\n"
        },
        {
          "name": "nginx.tmpl",
          "type": "blob",
          "size": 51.693359375,
          "content": "# nginx-proxy{{ if $.Env.NGINX_PROXY_VERSION }} version : {{ $.Env.NGINX_PROXY_VERSION }}{{ end }}\n\n{{- /*\n     * Global values. Values are stored in this map rather than in individual\n     * global variables so that the values can be easily passed to embedded\n     * templates (Go templates cannot access variables outside of their own\n     * scope) and displayed in the debug endpoint output.\n     */}}\n{{- $globals := dict }}\n{{- $_ := set $globals \"containers\" $ }}\n{{- $_ := set $globals \"Env\" $.Env }}\n{{- $_ := set $globals \"Docker\" $.Docker }}\n{{- $_ := set $globals \"CurrentContainer\" (where $globals.containers \"ID\" $globals.Docker.CurrentContainerID | first) }}\n\n{{- $config := dict }}\n{{- $_ := set $config \"nginx_proxy_version\" $.Env.NGINX_PROXY_VERSION }}\n{{- $_ := set $config \"default_cert_ok\" (and (exists \"/etc/nginx/certs/default.crt\") (exists \"/etc/nginx/certs/default.key\")) }}\n{{- $_ := set $config \"external_http_port\" ($globals.Env.HTTP_PORT | default \"80\") }}\n{{- $_ := set $config \"external_https_port\" ($globals.Env.HTTPS_PORT | default \"443\") }}\n{{- $_ := set $config \"sha1_upstream_name\" ($globals.Env.SHA1_UPSTREAM_NAME | default \"false\" | parseBool) }}\n{{- $_ := set $config \"default_root_response\" ($globals.Env.DEFAULT_ROOT | default \"404\") }}\n{{- $_ := set $config \"trust_default_cert\" ($globals.Env.TRUST_DEFAULT_CERT | default \"true\") }}\n{{- $_ := set $config \"trust_downstream_proxy\" ($globals.Env.TRUST_DOWNSTREAM_PROXY | default \"true\" | parseBool) }}\n{{- $_ := set $config \"enable_access_log\" ($globals.Env.DISABLE_ACCESS_LOGS | default \"false\" | parseBool | not) }}\n{{- $_ := set $config \"enable_ipv6\" ($globals.Env.ENABLE_IPV6 | default \"false\" | parseBool) }}\n{{- $_ := set $config \"prefer_ipv6_network\" ($globals.Env.PREFER_IPV6_NETWORK | default \"false\" | parseBool) }}\n{{- $_ := set $config \"ssl_policy\" ($globals.Env.SSL_POLICY | default \"Mozilla-Intermediate\") }}\n{{- $_ := set $config \"enable_debug_endpoint\" ($globals.Env.DEBUG_ENDPOINT | default \"false\") }}\n{{- $_ := set $config \"hsts\" ($globals.Env.HSTS | default \"max-age=31536000\") }}\n{{- $_ := set $config \"acme_http_challenge\" ($globals.Env.ACME_HTTP_CHALLENGE_LOCATION | default \"true\") }}\n{{- $_ := set $config \"enable_http2\" ($globals.Env.ENABLE_HTTP2 | default \"true\") }}\n{{- $_ := set $config \"enable_http3\" ($globals.Env.ENABLE_HTTP3 | default \"false\") }}\n{{- $_ := set $config \"enable_http_on_missing_cert\" ($globals.Env.ENABLE_HTTP_ON_MISSING_CERT | default \"true\") }}\n{{- $_ := set $config \"https_method\" ($globals.Env.HTTPS_METHOD | default \"redirect\") }}\n{{- $_ := set $config \"default_host\" $globals.Env.DEFAULT_HOST }}\n{{- $_ := set $config \"resolvers\" $globals.Env.RESOLVERS }}\n{{- /* LOG_JSON is a shorthand that sets logging defaults to JSON format */}}\n{{- $_ := set $config \"enable_json_logs\" ($globals.Env.LOG_JSON | default \"false\" | parseBool) }}\n{{- $_ := set $config \"log_format\" $globals.Env.LOG_FORMAT }}\n{{- $_ := set $config \"log_format_escape\" $globals.Env.LOG_FORMAT_ESCAPE }}\n\n{{- $_ := set $globals \"config\" $config }}\n\n{{- $_ := set $globals \"vhosts\" (dict) }}\n{{- $_ := set $globals \"networks\" (dict) }}\n# Networks available to the container running docker-gen (which are assumed to\n# match the networks available to the container running nginx):\n{{- /*\n     * Note: $globals.CurrentContainer may be nil in some circumstances due to\n     * <https://github.com/nginx-proxy/docker-gen/issues/458>.  For more context\n     * see <https://github.com/nginx-proxy/nginx-proxy/issues/2189>.\n     */}}\n{{- if $globals.CurrentContainer }}\n    {{- range sortObjectsByKeysAsc $globals.CurrentContainer.Networks \"Name\" }}\n        {{- $_ := set $globals.networks .Name . }}\n#     {{ .Name }}\n    {{- else }}\n#     (none)\n    {{- end }}\n{{- else }}\n# /!\\ WARNING: Failed to find the Docker container running docker-gen.  All\n#              upstream (backend) application containers will appear to be\n#              unreachable.  Try removing the -only-exposed and -only-published\n#              arguments to docker-gen if you pass either of those.  See\n#              <https://github.com/nginx-proxy/docker-gen/issues/458>.\n{{- end }}\n\n{{- /*\n     * Template used as a function to get a container's IP address.  This\n     * template only outputs debug comments; the IP address is \"returned\" by\n     * storing the value in the provided dot dict.\n     *\n     * The provided dot dict is expected to have the following entries:\n     *   - \"globals\": Global values.\n     *   - \"container\": The container's RuntimeContainer struct.\n     *\n     * The return value will be added to the dot dict with key \"ip\".\n     */}}\n{{- define \"container_ip\" }}\n    {{- $ipv4 := \"\" }}\n    {{- $ipv6 := \"\" }}\n    #     networks:\n    {{- range sortObjectsByKeysAsc $.container.Networks \"Name\" }}\n        {{- /*\n             * TODO: Only ignore the \"ingress\" network for Swarm tasks (in case\n             * the user is not using Swarm mode and names a network \"ingress\").\n             */}}\n        {{- if eq .Name \"ingress\" }}\n    #         {{ .Name }} (ignored)\n            {{- continue }}\n        {{- end }}\n        {{- if eq .Name \"host\" }}\n            {{- /* Handle containers in host nework mode */}}\n            {{- if (index $.globals.networks \"host\") }}\n    #         both container and proxy are in host network mode, using localhost IP\n                {{- $ipv4 = \"127.0.0.1\" }}\n                {{- continue }}\n            {{- end }}\n            {{- range sortObjectsByKeysAsc $.globals.CurrentContainer.Networks \"Name\" }}\n                {{- if and . .Gateway (not .Internal) }}\n    #         container is in host network mode, using {{ .Name }} gateway IP\n                    {{- $ipv4 = .Gateway }}\n                    {{- break }}\n                {{- end }}\n            {{- end }}\n            {{- if $ipv4 }}\n                {{- continue }}\n            {{- end }}\n        {{- end }}\n        {{- if and (not (index $.globals.networks .Name)) (not $.globals.networks.host) }}\n    #         {{ .Name }} (unreachable)\n            {{- continue }}\n        {{- end }}\n        {{- /*\n             * Do not emit multiple `server` directives for this container if it\n             * is reachable over multiple networks or multiple IP stacks. This avoids \n             * accidentally inflating the effective round-robin weight of a server due\n             * to the redundant upstream addresses that nginx sees as belonging to\n             * distinct servers.\n             */}}\n        {{- if or $ipv4 $ipv6 }}\n    #         {{ .Name }} (ignored; reachable but redundant)\n            {{- continue }}\n        {{- end }}\n    #         {{ .Name }} (reachable)\n        {{- if and . .IP }}\n            {{- $ipv4 = .IP }}\n        {{- end }}\n        {{- if and . .GlobalIPv6Address }}\n            {{- $ipv6 = .GlobalIPv6Address }}\n        {{- end }}\n        {{- if and (empty $ipv4) (empty $ipv6) }}\n    #             /!\\ No IPv4 or IPv6 for this network!\n        {{- end }}\n    {{- else }}\n    #         (none)\n    {{- end }}\n    {{ if and $ipv6 $.globals.config.prefer_ipv6_network }}\n    #     IPv4 address: {{ if $ipv4 }}{{ $ipv4 }} (ignored; reachable but IPv6 prefered){{ else }}(none usable){{ end }}\n    #     IPv6 address: {{ $ipv6 }}\n        {{- $_ := set $ \"ip\" (printf \"[%s]\" $ipv6) }}\n    {{- else }}\n    #     IPv4 address: {{ if $ipv4 }}{{ $ipv4 }}{{ else }}(none usable){{ end }}\n    #     IPv6 address: {{ if $ipv6 }}{{ $ipv6 }}{{ if $ipv4 }} (ignored; reachable but IPv4 prefered){{ end }}{{ else }}(none usable){{ end }}\n        {{- if $ipv4 }}\n            {{- $_ := set $ \"ip\" $ipv4 }}\n        {{- else if $ipv6}}\n            {{- $_ := set $ \"ip\" (printf \"[%s]\" $ipv6) }}\n        {{- end }}\n    {{- end }}\n{{- end }}\n\n{{- /*\n     * Template used as a function to get the port of the server in the given\n     * container.  This template only outputs debug comments; the port is\n     * \"returned\" by storing the value in the provided dot dict.\n     *\n     * The provided dot dict is expected to have the following entries:\n     *   - \"container\": The container's RuntimeContainer struct.\n     *\n     * The return value will be added to the dot dict with key \"port\".\n     */}}\n{{- define \"container_port\" }}\n    {{- /* If only 1 port exposed, use that as a default, else 80. */}}\n    #     exposed ports (first ten):{{ range $index, $address := (sortObjectsByKeysAsc $.container.Addresses \"Port\") }}{{ if lt $index 10 }} {{ $address.Port }}/{{ $address.Proto }}{{ end }}{{ else }} (none){{ end }}\n    {{- $default_port := when (eq (len $.container.Addresses) 1) (first $.container.Addresses).Port \"80\" }}\n    #     default port: {{ $default_port }}\n    {{- $port := eq $.port \"default\" | ternary $default_port $.port }}\n    #     using port: {{ $port }}\n    {{- $addr_obj := where $.container.Addresses \"Port\" $port | first }}\n    {{- if and $addr_obj $addr_obj.HostPort }}\n    #         /!\\ WARNING: Virtual port published on host.  Clients\n    #                      might be able to bypass nginx-proxy and\n    #                      access the container's server directly.\n    {{- end }}\n    {{- $_ := set $ \"port\" $port }}\n{{- end }}\n\n{{- define \"ssl_policy\" }}\n    {{- if eq .ssl_policy \"Mozilla-Modern\" }}\n    ssl_protocols TLSv1.3;\n    {{- /*\n         * This ssl_ciphers directive is not used but necessary to get TLSv1.3 only.\n         * see https://serverfault.com/questions/1023766/nginx-with-only-tls1-3-cipher-suites\n         */}}\n    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384;\n    ssl_conf_command Ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256;\n    ssl_prefer_server_ciphers off;\n    {{- else if eq .ssl_policy \"Mozilla-Intermediate\" }}\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305';\n    ssl_prefer_server_ciphers off;\n    {{- else if eq .ssl_policy \"Mozilla-Old\" }}\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:@SECLEVEL=0';\n    ssl_prefer_server_ciphers on;\n    {{- else if eq .ssl_policy \"AWS-TLS13-1-3-2021-06\" }}\n    ssl_protocols TLSv1.3;\n    {{- /*\n         * This ssl_ciphers directive is not used but necessary to get TLSv1.3 only.\n         * see https://serverfault.com/questions/1023766/nginx-with-only-tls1-3-cipher-suites\n         */}}\n    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384;\n    ssl_conf_command Ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256;\n    ssl_prefer_server_ciphers on;\n    {{- else if eq .ssl_policy \"AWS-TLS13-1-2-2021-06\" }}\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384';\n    ssl_prefer_server_ciphers on;\n    {{- else if eq .ssl_policy \"AWS-TLS13-1-2-Res-2021-06\" }}\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';\n    ssl_prefer_server_ciphers on;\n    {{- else if eq .ssl_policy \"AWS-TLS13-1-2-Ext1-2021-06\" }}\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:AES128-GCM-SHA256:AES128-SHA256:AES256-GCM-SHA384:AES256-SHA256';\n    ssl_prefer_server_ciphers on;\n    {{- else if eq .ssl_policy \"AWS-TLS13-1-2-Ext2-2021-06\" }}\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA';\n    ssl_prefer_server_ciphers on;\n    {{- else if eq .ssl_policy \"AWS-TLS13-1-1-2021-06\" }}\n    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:@SECLEVEL=0';\n    ssl_prefer_server_ciphers on;\n    {{- else if eq .ssl_policy \"AWS-TLS13-1-0-2021-06\" }}\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:@SECLEVEL=0';\n    ssl_prefer_server_ciphers on;\n    {{- else if eq .ssl_policy \"AWS-FS-1-2-Res-2020-10\" }}\n    ssl_protocols TLSv1.2;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';\n    ssl_prefer_server_ciphers on;\n    {{- else if eq .ssl_policy \"AWS-FS-1-2-Res-2019-08\" }}\n    ssl_protocols TLSv1.2;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384';\n    ssl_prefer_server_ciphers on;\n    {{- else if eq .ssl_policy \"AWS-FS-1-2-2019-08\" }}\n    ssl_protocols TLSv1.2;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA';\n    ssl_prefer_server_ciphers on;\n    {{- else if eq .ssl_policy \"AWS-FS-1-1-2019-08\" }}\n    ssl_protocols TLSv1.1 TLSv1.2;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:@SECLEVEL=0';\n    ssl_prefer_server_ciphers on;\n    {{- else if eq .ssl_policy \"AWS-FS-2018-06\" }}\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:@SECLEVEL=0';\n    ssl_prefer_server_ciphers on;\n    {{- else if eq .ssl_policy \"AWS-TLS-1-2-Ext-2018-06\" }}\n    ssl_protocols TLSv1.2;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA';\n    ssl_prefer_server_ciphers on;\n    {{- else if eq .ssl_policy \"AWS-TLS-1-2-2017-01\" }}\n    ssl_protocols TLSv1.2;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:AES128-GCM-SHA256:AES128-SHA256:AES256-GCM-SHA384:AES256-SHA256';\n    ssl_prefer_server_ciphers on;\n    {{- else if eq .ssl_policy \"AWS-TLS-1-1-2017-01\" }}\n    ssl_protocols TLSv1.1 TLSv1.2;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:@SECLEVEL=0';\n    ssl_prefer_server_ciphers on;\n    {{- else if eq .ssl_policy \"AWS-2016-08\" }}\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:@SECLEVEL=0';\n    ssl_prefer_server_ciphers on;\n    {{- else if eq .ssl_policy \"AWS-2015-05\" }}\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:DES-CBC3-SHA:@SECLEVEL=0';\n    ssl_prefer_server_ciphers on;\n    {{- else if eq .ssl_policy \"AWS-2015-03\" }}\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:DHE-DSS-AES128-SHA:DES-CBC3-SHA:@SECLEVEL=0';\n    ssl_prefer_server_ciphers on;\n    {{- else if eq .ssl_policy \"AWS-2015-02\" }}\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:DHE-DSS-AES128-SHA:@SECLEVEL=0';\n    ssl_prefer_server_ciphers on;\n    {{- end }}\n{{- end }}\n\n{{- define \"location\" }}\n    {{- $vpath := .VPath }}\n    {{- $override := printf \"/etc/nginx/vhost.d/%s_%s_location_override\" .Host (sha1 .Path) }}\n    {{- if and (eq .Path \"/\") (not (exists $override)) }}\n        {{- $override = printf \"/etc/nginx/vhost.d/%s_location_override\" .Host }}\n    {{- end }}\n    {{- if exists $override }}\n    include {{ $override }};\n    {{- else }}\n        {{- $keepalive := $vpath.keepalive }}\n    location {{ .Path }} {\n        {{- if eq $vpath.network_tag \"internal\" }}\n        # Only allow traffic from internal clients\n        include /etc/nginx/network_internal.conf;\n        {{- end }}\n\n        {{ $proto := $vpath.proto }}\n        {{ $upstream := $vpath.upstream }}\n        {{ $dest := $vpath.dest }}\n        {{- if eq $proto \"uwsgi\" }}\n        include uwsgi_params;\n        uwsgi_pass {{ trim $proto }}://{{ trim $upstream }};\n        {{- else if eq $proto \"fastcgi\" }}\n            {{- if (exists \"/etc/nginx/fastcgi.conf\") }}\n        include fastcgi.conf;\n            {{- else if (exists \"/etc/nginx/fastcgi_params\") }}\n        include fastcgi_params;\n            {{- else }}\n        # neither /etc/nginx/fastcgi.conf nor /etc/nginx/fastcgi_params found, fastcgi won't work\n            {{- end }}\n        root {{ trim .VhostRoot }};\n        fastcgi_pass {{ trim $upstream }};\n            {{- if ne $keepalive \"disabled\" }}\n        fastcgi_keep_conn on;\n            {{- end }}\n        {{- else if eq $proto \"grpc\" }}\n        grpc_pass {{ trim $proto }}://{{ trim $upstream }};\n        {{- else if eq $proto \"grpcs\" }}\n        grpc_pass {{ trim $proto }}://{{ trim $upstream }};\n        {{- else }}\n        proxy_pass {{ trim $proto }}://{{ trim $upstream }}{{ trim $dest }};\n        set $upstream_keepalive {{ if ne $keepalive \"disabled\" }}true{{ else }}false{{ end }};\n        {{- end }}\n\n        {{- if (exists (printf \"/etc/nginx/htpasswd/%s_%s\" .Host (sha1 .Path) )) }}\n        auth_basic \"Restricted {{ .Host }}{{ .Path }}\";\n        auth_basic_user_file {{ (printf \"/etc/nginx/htpasswd/%s_%s\" .Host (sha1 .Path)) }};\n        {{- else if (exists (printf \"/etc/nginx/htpasswd/%s\" .Host)) }}\n        auth_basic \"Restricted {{ .HostIsRegexp | ternary \"access\" .Host }}\";\n        auth_basic_user_file {{ (printf \"/etc/nginx/htpasswd/%s\" .Host) }};\n        {{- end }}\n\n        {{- if (exists (printf \"/etc/nginx/vhost.d/%s_%s_location\" .Host (sha1 .Path) )) }}\n        include {{ printf \"/etc/nginx/vhost.d/%s_%s_location\" .Host (sha1 .Path) }};\n        {{- else if (exists (printf \"/etc/nginx/vhost.d/%s_location\" .Host)) }}\n        include {{ printf \"/etc/nginx/vhost.d/%s_location\" .Host}};\n        {{- else if (exists \"/etc/nginx/vhost.d/default_location\") }}\n        include /etc/nginx/vhost.d/default_location;\n        {{- end }}\n    }\n    {{- end }}\n{{- end }}\n\n{{- define \"upstream\" }}\n    {{- $path := .Path }}\n    {{- $vpath := .VPath }}\nupstream {{ $vpath.upstream }} {\n    {{- $servers := 0 }}\n    {{- $loadbalance := $vpath.loadbalance }}\n    {{- if $loadbalance }}\n    # From the container's loadbalance label:\n    {{ $loadbalance }}\n    {{- end }}\n    {{- range $port, $containers := $vpath.ports }}\n        {{- range $container := $containers }}\n    # Container: {{ $container.Name }}\n            {{- $args := dict \"globals\" $.globals \"container\" $container }}\n            {{- template \"container_ip\" $args }}\n            {{- $ip := $args.ip }}\n            {{- $args = dict \"container\" $container \"path\" $path \"port\" $port }}\n            {{- template \"container_port\" $args }}\n            {{- if $ip }}\n                {{- $servers = add1 $servers }}\n    server {{ $ip }}:{{ $args.port }};\n            {{- end }}\n        {{- end }}\n    {{- end }}\n    {{- /* nginx-proxy/nginx-proxy#1105 */}}\n    {{- if lt $servers 1 }}\n    # Fallback entry\n    server 127.0.0.1 down;\n    {{- end }}\n    {{- $keepalive := $vpath.keepalive }}\n    {{- if and (ne $keepalive \"disabled\") (gt $servers 0) }}\n        {{- if eq $keepalive \"auto\" }}\n    keepalive {{ mul $servers 2 }};\n        {{- else }}\n    keepalive {{ $keepalive }};\n        {{- end }}\n    {{- end }}\n}\n{{- end }}\n\n{{- /* debug \"endpoint\" location template */}}\n{{- define \"debug_location\" }}\n    {{- $debug_paths := dict }}\n    {{- range $path, $vpath := .VHost.paths }}\n        {{- $tmp_ports := dict }}\n        {{- range $port, $containers := $vpath.ports }}\n            {{- $tmp_containers := list }}\n            {{- range $container := $containers }}\n                {{- $tmp_containers = dict \"Name\" $container.Name | append $tmp_containers }}\n            {{- end }}\n            {{- $_ := set $tmp_ports $port $tmp_containers }}\n        {{- end }}\n        {{- $debug_vpath := deepCopy $vpath | merge (dict \"ports\" $tmp_ports) }}\n        {{- $_ := set $debug_paths $path $debug_vpath }}\n    {{- end }}\n    \n    {{- $debug_vhost := deepCopy .VHost }}\n    {{- /* If it's a regexp, do not render the Hostname to the response to avoid rendering config breaking characters */}}\n    {{- $_ := set $debug_vhost \"hostname\" (.VHost.is_regexp | ternary \"Hostname is a regexp and unsafe to include in the debug response.\" .Hostname) }}\n    {{- $_ := set $debug_vhost \"paths\" $debug_paths }}\n\n    {{- $debug_response := dict\n        \"global\" .GlobalConfig\n        \"request\" (dict\n            \"host\" \"$host\"\n            \"https\" \"$https\"\n            \"http2\" \"$http2\"\n            \"http3\" \"$http3\"\n            \"ssl_cipher\" \"$ssl_cipher\"\n            \"ssl_protocol\" \"$ssl_protocol\"\n        )\n        \"vhost\" $debug_vhost\n    }}\n\n    {{- /*\n         * The maximum line length in an nginx config is 4096 characters.\n         * If we're nearing this limit (with headroom for the rest\n         * of the directive), strip vhost.paths from the response.\n         */}}\n    {{- if gt (toJson $debug_response | len) 4000 }}\n        {{- $_ := unset $debug_vhost \"paths\" }}\n        {{- $_ := set $debug_response \"warning\" \"Virtual paths configuration for this hostname is too large and has been stripped from response.\" }}\n    {{- end }}\n\n    location  /nginx-proxy-debug {\n        default_type application/json;\n        return 200 '{{ toJson $debug_response }}{{ \"\\\\n\" }}';\n    }\n{{- end }}\n\n{{- define \"access_log\" }}\n    {{- when .Enable \"access_log /var/log/nginx/access.log vhost;\" \"\" }}\n{{- end }}\n\n# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the\n# scheme used to connect to this server\nmap $http_x_forwarded_proto $proxy_x_forwarded_proto {\n    default {{ if $globals.config.trust_downstream_proxy }}$http_x_forwarded_proto{{ else }}$scheme{{ end }};\n    '' $scheme;\n}\n\nmap $http_x_forwarded_host $proxy_x_forwarded_host {\n    default {{ if $globals.config.trust_downstream_proxy }}$http_x_forwarded_host{{ else }}$host{{ end }};\n    '' $host;\n}\n\n# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the\n# server port the client connected to\nmap $http_x_forwarded_port $proxy_x_forwarded_port {\n    default {{ if $globals.config.trust_downstream_proxy }}$http_x_forwarded_port{{ else }}$server_port{{ end }};\n    '' $server_port;\n}\n\n# Include the port in the Host header sent to the container if it is non-standard\nmap $server_port $host_port {\n    default :$server_port;\n    80 '';\n    443 '';\n}\n\n# If the request from the downstream client has an \"Upgrade:\" header (set to any\n# non-empty value), pass \"Connection: upgrade\" to the upstream (backend) server.\n# Otherwise, the value for the \"Connection\" header depends on whether the user\n# has enabled keepalive to the upstream server.\nmap $http_upgrade $proxy_connection {\n    default upgrade;\n    '' $proxy_connection_noupgrade;\n}\nmap $upstream_keepalive $proxy_connection_noupgrade {\n    # Preserve nginx's default behavior (send \"Connection: close\").\n    default close;\n    # Use an empty string to cancel nginx's default behavior.\n    true '';\n}\n# Abuse the map directive (see <https://stackoverflow.com/q/14433309>) to ensure\n# that $upstream_keepalive is always defined.  This is necessary because:\n#   - The $proxy_connection variable is indirectly derived from\n#     $upstream_keepalive, so $upstream_keepalive must be defined whenever\n#     $proxy_connection is resolved.\n#   - The $proxy_connection variable is used in a proxy_set_header directive in\n#     the http block, so it is always fully resolved for every request -- even\n#     those where proxy_pass is not used (e.g., unknown virtual host).\nmap \"\" $upstream_keepalive {\n    # The value here should not matter because it should always be overridden in\n    # a location block (see the \"location\" template) for all requests where the\n    # value actually matters.\n    default false;\n}\n\n# Apply fix for very long server names\nserver_names_hash_bucket_size 128;\n\n# Default dhparam\n{{- if (exists \"/etc/nginx/dhparam/dhparam.pem\") }}\nssl_dhparam /etc/nginx/dhparam/dhparam.pem;\n{{- end }}\n\n# Set appropriate X-Forwarded-Ssl header based on $proxy_x_forwarded_proto\nmap $proxy_x_forwarded_proto $proxy_x_forwarded_ssl {\n    default off;\n    https on;\n}\n\ngzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;\n\n\n{{- /* See https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format for details and variables\n     * LOG_FORMAT_ESCAPE sets the escape part of the log format\n     * LOG_FORMAT        sets the log format\n     */}}\n{{- $logEscape := $globals.config.log_format_escape | default \"default\" | printf \"escape=%s\" }}\n{{- $logFormat := $globals.config.log_format | default `$host $remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\" \"$upstream_addr\"` }}\n\n{{- if $globals.config.enable_json_logs }}\n# JSON Logging enabled (via LOG_JSON env variable)\n    {{- $logEscape = $globals.config.log_format_escape | default \"json\" | printf \"escape=%s\" }}\n    {{- $logFormat = $globals.config.log_format | default `{\"time_local\":\"$time_iso8601\",\"client_ip\":\"$http_x_forwarded_for\",\"remote_addr\":\"$remote_addr\",\"request\":\"$request\",\"status\":\"$status\",\"body_bytes_sent\":\"$body_bytes_sent\",\"request_time\":\"$request_time\",\"upstream_response_time\":\"$upstream_response_time\",\"upstream_addr\":\"$upstream_addr\",\"http_referrer\":\"$http_referer\",\"http_user_agent\":\"$http_user_agent\",\"request_id\":\"$request_id\"}` }}\n{{- end }}\n\nlog_format vhost {{ $logEscape }} '{{ $logFormat }}';\n\naccess_log off;\n\n{{- /* Lower the SSL policy of the http context\n    * if at least one vhost use a TLSv1 or TLSv1.1 policy\n    * so TLSv1 and TLSv1.1 can be enabled on those vhosts\n    */}}\n{{- $httpContextSslPolicy := $globals.config.ssl_policy }}\n{{- $inUseSslPolicies := groupByKeys $globals.containers \"Env.SSL_POLICY\" }}\n{{- range $tls1Policy := list \"AWS-TLS13-1-1-2021-06\" \"AWS-TLS13-1-0-2021-06\" \"AWS-FS-1-1-2019-08\" \"AWS-FS-2018-06\" \"AWS-TLS-1-1-2017-01\" \"AWS-2016-08\" \"AWS-2015-05\" \"AWS-2015-03\" \"AWS-2015-02\" \"Mozilla-Old\" }}\n    {{- if has $tls1Policy $inUseSslPolicies }}\n# Using Mozilla-Old SSL policy on the http context to allow TLSv1 and TLSv1.1\n        {{- $httpContextSslPolicy = \"Mozilla-Old\" }}\n        {{- break }}\n    {{- end }}\n{{- end }}\n\n{{- template \"ssl_policy\" (dict \"ssl_policy\" $httpContextSslPolicy) }}\nerror_log /dev/stderr;\n\n{{- if $globals.config.resolvers }}\nresolver {{ $globals.config.resolvers }};\n{{- end }}\n\n{{- if (exists \"/etc/nginx/proxy.conf\") }}\ninclude /etc/nginx/proxy.conf;\n{{- else }}\n# HTTP 1.1 support\nproxy_http_version 1.1;\nproxy_set_header Host $host$host_port;\nproxy_set_header Upgrade $http_upgrade;\nproxy_set_header Connection $proxy_connection;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header X-Forwarded-Host $proxy_x_forwarded_host;\nproxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;\nproxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;\nproxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;\nproxy_set_header X-Original-URI $request_uri;\n\n# Mitigate httpoxy attack (see README for details)\nproxy_set_header Proxy \"\";\n{{- end }}\n\n{{- /* Precompute and store some information about vhost that use VIRTUAL_HOST_MULTIPORTS. */}}\n{{- range $vhosts_yaml, $containers := groupBy $globals.containers \"Env.VIRTUAL_HOST_MULTIPORTS\" }}\n    {{- /* Print a warning in the config if VIRTUAL_HOST_MULTIPORTS can't be parsed. */}}\n    {{- $parsedVhosts := fromYaml $vhosts_yaml }}\n    {{- if (empty $parsedVhosts) }}\n        {{- $containerNames := list }}\n        {{- range $container := $containers }}\n            {{- $containerNames = append $containerNames $container.Name }}\n        {{- end }}\n# /!\\ WARNING: the VIRTUAL_HOST_MULTIPORTS environment variable used for {{ len $containerNames | plural \"this container\" \"those containers\" }} is not a valid YAML string:\n# {{ $containerNames | join \", \" }}\n        {{- continue }}\n    {{- end }}\n\n    {{- range $hostname, $vhost := $parsedVhosts }}\n        {{- $vhost_data := get $globals.vhosts $hostname | default (dict) }}\n        {{- $paths := $vhost_data.paths | default (dict) }}\n\n        {{- if (empty $vhost) }}\n            {{ $vhost = dict \"/\" (dict) }}\n        {{- end }}\n\n        {{- range $path, $vpath := $vhost }}\n            {{- if (empty $vpath) }}\n                {{- $vpath = dict \"dest\" \"\" \"port\" \"default\" }}\n            {{- end }}\n            {{- $dest := $vpath.dest | default \"\" }}\n            {{- $port := $vpath.port | default \"default\" | toString }}\n            {{- $path_data := get $paths $path | default (dict) }}\n            {{- $path_ports := $path_data.ports | default (dict) }}\n            {{- $path_port_containers := get $path_ports $port | default (list) | concat $containers }}\n            {{- $_ := set $path_ports $port $path_port_containers }}\n            {{- $_ := set $path_data \"ports\" $path_ports }}\n            {{- if (not (hasKey $path_data \"dest\")) }}\n                {{- $_ := set $path_data \"dest\" $dest }}\n            {{- end }}\n            {{- $_ := set $paths $path $path_data }}\n        {{- end }}\n        {{- $_ := set $vhost_data \"paths\" $paths }}\n        {{- $_ := set $globals.vhosts $hostname $vhost_data }}\n    {{- end }}\n{{- end }}\n\n{{- /* Precompute and store some information about vhost that use VIRTUAL_HOST. */}}\n{{- range $hostname, $containers := groupByMulti $globals.containers \"Env.VIRTUAL_HOST\" \",\" }}\n    {{- /* Ignore containers with VIRTUAL_HOST set to the empty string. */}}\n    {{- $hostname = trim $hostname }}\n    {{- if not $hostname }}\n        {{- continue }}\n    {{- end }}\n\n    {{- /* Drop containers with both VIRTUAL_HOST and VIRTUAL_HOST_MULTIPORTS set\n         * (VIRTUAL_HOST_MULTIPORTS takes precedence thanks to the previous loop).\n         */}}\n    {{- range $_, $containers_to_drop := groupBy $containers \"Env.VIRTUAL_HOST_MULTIPORTS\" }}\n        {{- range $container := $containers_to_drop }}\n            {{- $containers = without $containers $container }}\n        {{- end }}\n    {{- end }}\n    {{- if (eq (len $containers) 0) }}\n        {{- continue }}\n    {{- end }}\n\n    {{- $vhost_data := get $globals.vhosts $hostname | default (dict) }}\n    {{- $paths := $vhost_data.paths | default (dict) }}\n\n    {{- $tmp_paths := groupByWithDefault $containers \"Env.VIRTUAL_PATH\" \"/\" }}\n\n    {{- range $path, $containers := $tmp_paths }}\n        {{- $dest := groupByKeys $containers \"Env.VIRTUAL_DEST\" | first | default \"\" }}\n        {{- $path_data := get $paths $path | default (dict) }}\n        {{- $path_ports := $path_data.ports | default (dict) }}\n        {{- range $port, $containers := groupByWithDefault $containers \"Env.VIRTUAL_PORT\" \"default\" }}\n            {{- $path_port_containers := get $path_ports $port | default (list) | concat $containers }}\n            {{- $_ := set $path_ports $port $path_port_containers }}\n        {{- end }}\n        {{- $_ := set $path_data \"ports\" $path_ports }}\n        {{- if (not (hasKey $path_data \"dest\")) }}\n            {{- $_ := set $path_data \"dest\" $dest }}\n        {{- end }}\n        {{- $_ := set $paths $path $path_data }}\n    {{- end }}\n    {{- $_ := set $vhost_data \"paths\" $paths }}\n    {{- $_ := set $globals.vhosts $hostname $vhost_data }}\n{{- end }}\n\n{{- /* Loop over $globals.vhosts and update it with the remaining informations about each vhost. */}}\n{{- range $hostname, $vhost_data := $globals.vhosts }}\n    {{- $is_regexp := hasPrefix \"~\" $hostname }}\n    {{- $upstream_name := or $is_regexp $globals.config.sha1_upstream_name | ternary (sha1 $hostname) $hostname }}\n\n    {{- $vhost_containers := list }}\n\n    {{- range $path, $vpath_data := $vhost_data.paths }}\n        {{- $vpath_containers := list }}\n        {{- range $port, $vport_containers := $vpath_data.ports }}\n            {{ $vpath_containers = concat $vpath_containers $vport_containers }}\n        {{- end }}\n\n        {{- /* Get the VIRTUAL_PROTO defined by containers w/ the same vhost-vpath, falling back to \"http\". */}}\n        {{- $proto := groupByKeys $vpath_containers \"Env.VIRTUAL_PROTO\" | first | default \"http\" | trim }}\n        {{- /* Get the NETWORK_ACCESS defined by containers w/ the same vhost, falling back to \"external\". */}}\n        {{- $network_tag := groupByKeys $vpath_containers \"Env.NETWORK_ACCESS\" | first | default \"external\" }}\n\n        {{- $loadbalance := groupByLabel $vpath_containers \"com.github.nginx-proxy.nginx-proxy.loadbalance\" | keys | first }}\n        {{- $keepalive := groupByLabel $vpath_containers \"com.github.nginx-proxy.nginx-proxy.keepalive\" | keys | first | default \"auto\" }}\n\n        {{- $upstream := $upstream_name }}\n        {{- if (not (eq $path \"/\")) }}\n            {{- $sum := sha1 $path }}\n            {{- $upstream = printf \"%s-%s\" $upstream $sum }}\n        {{- end }}\n\n        {{- $_ := set $vpath_data \"proto\" $proto }}\n        {{- $_ := set $vpath_data \"network_tag\" $network_tag }}\n        {{- $_ := set $vpath_data \"upstream\" $upstream }}\n        {{- $_ := set $vpath_data \"loadbalance\" $loadbalance }}\n        {{- $_ := set $vpath_data \"keepalive\" $keepalive }}\n        {{- $_ := set $vhost_data.paths $path $vpath_data }}\n\n        {{ $vhost_containers = concat $vhost_containers $vpath_containers }}\n    {{- end }}\n\n    {{- $userIdentifiedCert := groupByKeys $vhost_containers \"Env.CERT_NAME\" | first }}\n    \n    {{- $vhostCert := \"\" }}\n    {{- if exists (printf \"/etc/nginx/certs/%s.crt\" $hostname) }}\n        {{- $vhostCert = $hostname }}\n    {{- end }}\n\n    {{- $parentVhostCert := \"\" }}\n    {{- if gt ($hostname | sprigSplit \".\" | len) 2 }}\n        {{- $parentHostname := ($hostname | sprigSplitn \".\" 2)._1 }}\n        {{- if exists (printf \"/etc/nginx/certs/%s.crt\" $parentHostname) }}\n            {{- $parentVhostCert = $parentHostname }}\n        {{- end }}\n    {{- end }}\n    \n    {{- $trust_default_cert := groupByLabel $vhost_containers \"com.github.nginx-proxy.nginx-proxy.trust-default-cert\" | keys | first | default $globals.config.trust_default_cert | parseBool }}\n    {{- $defaultCert := and $trust_default_cert $globals.config.default_cert_ok | ternary \"default\" \"\" }}\n    \n    {{- $cert := or $userIdentifiedCert $vhostCert $parentVhostCert $defaultCert }}\n    {{- $cert_ok := and (ne $cert \"\") (exists (printf \"/etc/nginx/certs/%s.crt\" $cert)) (exists (printf \"/etc/nginx/certs/%s.key\" $cert)) }}\n\n    {{- $enable_debug_endpoint := groupByLabel $vhost_containers \"com.github.nginx-proxy.nginx-proxy.debug-endpoint\" | keys | first | default $globals.config.enable_debug_endpoint | parseBool }}\n    {{- $default := eq $globals.config.default_host $hostname }}\n    {{- $https_method := groupByKeys $vhost_containers \"Env.HTTPS_METHOD\" | first | default $globals.config.https_method }}\n    {{- $enable_http_on_missing_cert := groupByKeys $vhost_containers \"Env.ENABLE_HTTP_ON_MISSING_CERT\" | first | default $globals.config.enable_http_on_missing_cert | parseBool }}\n    {{- /* When no trusted certs (default and/or vhost) are present we want to ensure that HTTP is enabled; hence switching from 'nohttp' or 'redirect' to 'noredirect' */}}\n    {{- $https_method_disable_http := list \"nohttp\" \"redirect\" | has $https_method }}\n    {{- if and $https_method_disable_http (not $cert_ok) $enable_http_on_missing_cert }}\n        {{- $https_method = \"noredirect\" }}\n    {{- end }}\n    {{- $http2_enabled := groupByLabel $vhost_containers \"com.github.nginx-proxy.nginx-proxy.http2.enable\" | keys | first | default $globals.config.enable_http2 | parseBool }}\n    {{- $http3_enabled := groupByLabel $vhost_containers \"com.github.nginx-proxy.nginx-proxy.http3.enable\" | keys | first | default $globals.config.enable_http3 | parseBool }}\n    {{- $acme_http_challenge := groupByKeys $vhost_containers \"Env.ACME_HTTP_CHALLENGE_LOCATION\" | first | default $globals.config.acme_http_challenge }}\n    {{- $acme_http_challenge_legacy := eq $acme_http_challenge \"legacy\" }}\n    {{- $acme_http_challenge_enabled := false }}\n    {{- if (not $acme_http_challenge_legacy) }}\n        {{- $acme_http_challenge_enabled = parseBool $acme_http_challenge }}\n    {{- end }}\n\n    {{- /* Get the SERVER_TOKENS defined by containers w/ the same vhost, falling back to \"\". */}}\n    {{- $server_tokens := groupByKeys $vhost_containers \"Env.SERVER_TOKENS\" | first | default \"\" | trim }}\n\n    {{- /* Get the SSL_POLICY defined by containers w/ the same vhost, falling back to empty string (use default). */}}\n    {{- $ssl_policy := groupByKeys $vhost_containers \"Env.SSL_POLICY\" | first | default \"\" }}\n\n    {{- /* Get the HSTS defined by containers w/ the same vhost, falling back to \"max-age=31536000\". */}}\n    {{- $hsts := groupByKeys $vhost_containers \"Env.HSTS\" | first | default $globals.config.hsts }}\n\n    {{- /* Get the VIRTUAL_ROOT By containers w/ use fastcgi root */}}\n    {{- $vhost_root := groupByKeys $vhost_containers \"Env.VIRTUAL_ROOT\" | first | default \"/var/www/public\" }}\n\n    {{- $vhost_data = merge $vhost_data (dict\n        \"cert\" $cert\n        \"cert_ok\" $cert_ok\n        \"enable_debug_endpoint\" $enable_debug_endpoint\n        \"default\" $default\n        \"hsts\" $hsts\n        \"https_method\" $https_method\n        \"http2_enabled\" $http2_enabled\n        \"http3_enabled\" $http3_enabled\n        \"is_regexp\" $is_regexp\n        \"acme_http_challenge_legacy\" $acme_http_challenge_legacy\n        \"acme_http_challenge_enabled\" $acme_http_challenge_enabled\n        \"server_tokens\" $server_tokens\n        \"ssl_policy\" $ssl_policy\n        \"trust_default_cert\" $trust_default_cert\n        \"upstream_name\" $upstream_name\n        \"vhost_root\" $vhost_root\n    ) }}\n    {{- $_ := set $globals.vhosts $hostname $vhost_data }}\n{{- end }}\n\n\n{{- /*\n     * If needed, create a catch-all fallback server to send an error code to\n     * clients that request something from an unknown vhost.\n     *\n     * This server must appear first in the generated config because nginx uses\n     * the first `server` directive to handle requests that don't match any of\n     * the other `server` directives.  An alternative approach would be to add\n     * the `default_server` option to the `listen` directives inside this\n     * `server`, but some users inject a custom `server` directive that uses\n     * `default_server`.  Using `default_server` here would cause nginx to fail\n     * to start for those users.  See\n     * <https://github.com/nginx-proxy/nginx-proxy/issues/2212>.\n     */}}\n{{- block \"fallback_server\" $globals }}\n    {{- $globals := . }}\n    {{- $http_exists := false }}\n    {{- $https_exists := false }}\n    {{- $default_http_exists := false }}\n    {{- $default_https_exists := false }}\n    {{- $http3_enabled := false }}\n    {{- range $vhost := $globals.vhosts }}\n        {{- $http := ne $vhost.https_method \"nohttp\" }}\n        {{- $https := ne $vhost.https_method \"nohttps\" }}\n        {{- $http_exists = or $http_exists $http }}\n        {{- $https_exists = or $https_exists $https }}\n        {{- $default_http_exists = or $default_http_exists (and $http $vhost.default) }}\n        {{- $default_https_exists = or $default_https_exists (and $https $vhost.default) }}\n        {{- $http3_enabled = or $http3_enabled $vhost.http3_enabled }}\n    {{- end }}\n    {{- $fallback_http := not $default_http_exists }}\n    {{- $fallback_https := not $default_https_exists }}\n    {{- /*\n         * If there are no vhosts at all, create fallbacks for both plain http\n         * and https so that clients get something more useful than a connection\n         * refused error.\n         */}}\n    {{- if and (not $http_exists) (not $https_exists) }}\n        {{- $fallback_https = true }}\n    {{- end }}\n    {{- if or $fallback_http $fallback_https }}\nserver {\n    server_name _; # This is just an invalid value which will never trigger on a real hostname.\n    server_tokens off;\n    {{ template \"access_log\" (dict \"Enable\" $globals.config.enable_access_log) }}\n    http2 on;\n        {{- if $fallback_http }}\n    listen {{ $globals.config.external_http_port }}; {{- /* Do not add `default_server` (see comment above). */}}\n                {{- if $globals.config.enable_ipv6 }}\n    listen [::]:{{ $globals.config.external_http_port }}; {{- /* Do not add `default_server` (see comment above). */}}\n                {{- end }}\n        {{- end }}\n        {{- if $fallback_https }}\n    listen {{ $globals.config.external_https_port }} ssl; {{- /* Do not add `default_server` (see comment above). */}}\n            {{- if $globals.config.enable_ipv6 }}\n    listen [::]:{{ $globals.config.external_https_port }} ssl; {{- /* Do not add `default_server` (see comment above). */}}\n            {{- end }}\n            {{- if $http3_enabled }}\n    http3 on;\n    listen {{ $globals.config.external_https_port }} quic reuseport; {{- /* Do not add `default_server` (see comment above). */}}\n                {{- if $globals.config.enable_ipv6 }}\n    listen [::]:{{ $globals.config.external_https_port }} quic reuseport; {{- /* Do not add `default_server` (see comment above). */}}\n                {{- end }}\n            {{- end }}\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_tickets off;\n        {{- end }}\n        {{- if $globals.config.default_cert_ok }}\n    ssl_certificate /etc/nginx/certs/default.crt;\n    ssl_certificate_key /etc/nginx/certs/default.key;\n        {{- else }}\n    # No default certificate found, so reject SSL handshake;\n    ssl_reject_handshake on;\n        {{- end }}\n\n        {{- if (exists \"/usr/share/nginx/html/errors/50x.html\") }}\n    error_page 500 502 503 504 /50x.html;\n    location /50x.html {\n        root /usr/share/nginx/html/errors;\n        internal;\n    }\n        {{- end }}\n    location ^~ / {\n        return 503;\n    }\n}\n    {{- end }}\n{{- end }}\n\n{{- range $hostname, $vhost := $globals.vhosts }}\n    {{- $default_server := when $vhost.default \"default_server\" \"\" }}\n\n    {{- range $path, $vpath := $vhost.paths }}\n# {{ $hostname }}{{ $path }}\n        {{ template \"upstream\" (dict \"globals\" $globals \"Path\" $path \"VPath\" $vpath) }}\n    {{- end }}\n\n    {{- if (eq $vhost.https_method \"redirect\") }}\nserver {\n    server_name {{ $hostname }};\n        {{- if $vhost.server_tokens }}\n    server_tokens {{ $vhost.server_tokens }};\n        {{- end }}\n    {{ template \"access_log\" (dict \"Enable\" $globals.config.enable_access_log) }}\n    listen {{ $globals.config.external_http_port }} {{ $default_server }};\n        {{- if $globals.config.enable_ipv6 }}\n    listen [::]:{{ $globals.config.external_http_port }} {{ $default_server }};\n        {{- end }}\n\n        {{- if (or $vhost.acme_http_challenge_legacy $vhost.acme_http_challenge_enabled) }}\n    # Do not HTTPS redirect Let's Encrypt ACME challenge\n    location ^~ /.well-known/acme-challenge/ {\n        auth_basic off;\n        auth_request off;\n        allow all;\n        root /usr/share/nginx/html;\n        try_files $uri =404;\n        break;\n    }\n        {{- end }}\n    \n        {{- if $vhost.enable_debug_endpoint }}\n            {{ template \"debug_location\" (dict \"GlobalConfig\" $globals.config \"Hostname\" $hostname \"VHost\" $vhost) }}\n        {{- end }}\n\n    location / {\n        {{- if eq $globals.config.external_https_port \"443\" }}\n        return 301 https://$host$request_uri;\n        {{- else }}\n        return 301 https://$host:{{ $globals.config.external_https_port }}$request_uri;\n        {{- end }}\n    }\n}\n    {{- end }}\n\nserver {\n    {{- if $vhost.is_regexp }}\n        {{- if or\n            (printf \"/etc/nginx/vhost.d/%s\" $hostname | exists)\n            (printf \"/etc/nginx/vhost.d/%s_location\" $hostname | exists)\n            (printf \"/etc/nginx/vhost.d/%s_location_override\" $hostname | exists)\n            (printf \"/etc/nginx/htpasswd/%s\" $hostname | exists)\n        }}\n    # https://github.com/nginx-proxy/nginx-proxy/issues/2529#issuecomment-2437609249\n    # Support for vhost config file(s) named like a regexp ({{ $hostname }}) has been removed from nginx-proxy.\n    # Please name your vhost config file(s) with the sha1 of the regexp instead ({{ $hostname }} -> {{ sha1 $hostname }}) :\n    # - /etc/nginx/vhost.d/{{ sha1 $hostname }}\n    # - /etc/nginx/vhost.d/{{ sha1 $hostname }}_location\n    # - /etc/nginx/vhost.d/{{ sha1 $hostname }}_location_override\n    # - /etc/nginx/htpasswd/{{ sha1 $hostname }}\n        {{- end }}\n    {{- end }}\n\n    server_name {{ $hostname }};\n    {{- if $vhost.server_tokens }}\n    server_tokens {{ $vhost.server_tokens }};\n    {{- end }}\n    {{ template \"access_log\" (dict \"Enable\" $globals.config.enable_access_log) }}\n    {{- if $vhost.http2_enabled }}\n    http2 on;\n    {{- end }}\n    {{- if or (eq $vhost.https_method \"nohttps\") (eq $vhost.https_method \"noredirect\") }}\n    listen {{ $globals.config.external_http_port }} {{ $default_server }};\n        {{- if $globals.config.enable_ipv6 }}\n    listen [::]:{{ $globals.config.external_http_port }} {{ $default_server }};\n        {{- end }}\n\n        {{- if (and (eq $vhost.https_method \"noredirect\") $vhost.acme_http_challenge_enabled) }}\n    location /.well-known/acme-challenge/ {\n        auth_basic off;\n        allow all;\n        root /usr/share/nginx/html;\n        try_files $uri =404;\n        break;\n    }\n        {{- end }}\n    {{- end }}\n    {{- if ne $vhost.https_method \"nohttps\" }}\n    listen {{ $globals.config.external_https_port }} ssl {{ $default_server }};\n        {{- if $globals.config.enable_ipv6 }}\n    listen [::]:{{ $globals.config.external_https_port }} ssl {{ $default_server }};\n        {{- end }}\n\n        {{- if $vhost.http3_enabled }}\n    http3 on;\n    add_header alt-svc 'h3=\":{{ $globals.config.external_https_port }}\"; ma=86400;';\n    listen {{ $globals.config.external_https_port }} quic {{ $default_server }};\n            {{- if $globals.config.enable_ipv6 }}\n    listen [::]:{{ $globals.config.external_https_port }} quic {{ $default_server }};\n            {{- end }}\n        {{- end }}\n\n        {{- if $vhost.cert_ok }}\n            {{- template \"ssl_policy\" (dict \"ssl_policy\" $vhost.ssl_policy) }}\n\n    ssl_session_timeout 5m;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_tickets off;\n\n    ssl_certificate /etc/nginx/certs/{{ (printf \"%s.crt\" $vhost.cert) }};\n    ssl_certificate_key /etc/nginx/certs/{{ (printf \"%s.key\" $vhost.cert) }};\n\n            {{- if (exists (printf \"/etc/nginx/certs/%s.dhparam.pem\" $vhost.cert)) }}\n    ssl_dhparam {{ printf \"/etc/nginx/certs/%s.dhparam.pem\" $vhost.cert }};\n            {{- end }}\n\n            {{- if (exists (printf \"/etc/nginx/certs/%s.chain.pem\" $vhost.cert)) }}\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    ssl_trusted_certificate {{ printf \"/etc/nginx/certs/%s.chain.pem\" $vhost.cert }};\n            {{- end }}\n\n            {{- if (not (or (eq $vhost.https_method \"noredirect\") (eq $vhost.hsts \"off\"))) }}\n    set $sts_header \"\";\n    if ($https) {\n        set $sts_header \"{{ trim $vhost.hsts }}\";\n    }\n    add_header Strict-Transport-Security $sts_header always;\n            {{- end }}\n        {{- else if not $vhost.trust_default_cert | and $globals.config.default_cert_ok }}\n    # No certificate found for this vhost, and the default certificate isn't trusted, so reject SSL handshake.\n    ssl_reject_handshake on;\n        {{- else }}\n    # No certificate for this vhost nor default certificate found, so reject SSL handshake.\n    ssl_reject_handshake on;\n        {{- end }}\n    {{- end }}\n\n    {{- $vhostFileName :=  $vhost.is_regexp | ternary (sha1 $hostname) $hostname }}\n\n    {{- if (exists (printf \"/etc/nginx/vhost.d/%s\" $vhostFileName)) }}\n    include {{ printf \"/etc/nginx/vhost.d/%s\" $vhostFileName }};\n    {{- else if (exists \"/etc/nginx/vhost.d/default\") }}\n    include /etc/nginx/vhost.d/default;\n    {{- end }}\n\n    {{- if $vhost.enable_debug_endpoint }}\n        {{ template \"debug_location\" (dict \"GlobalConfig\" $globals.config \"Hostname\" $hostname \"VHost\" $vhost) }}\n    {{- end }}\n\n    {{- range $path, $vpath := $vhost.paths }}\n        {{- template \"location\" (dict\n            \"Path\" $path\n            \"Host\" $vhostFileName\n            \"HostIsRegexp\" $vhost.is_regexp\n            \"VhostRoot\" $vhost.vhost_root\n            \"VPath\" $vpath\n        ) }}\n    {{- end }}\n\n    {{- if and (not (contains $vhost.paths \"/\")) (ne $globals.config.default_root_response \"none\")}}\n    location / {\n        return {{ $globals.config.default_root_response }};\n    }\n    {{- end }}\n}\n{{- end }}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}