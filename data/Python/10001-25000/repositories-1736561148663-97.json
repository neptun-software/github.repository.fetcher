{
  "metadata": {
    "timestamp": 1736561148663,
    "page": 97,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "onnx/onnx",
      "stars": 18225,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.6689453125,
          "content": "---\nLanguage: Cpp\nBasedOnStyle: Google\nAccessModifierOffset: -1\nAlignAfterOpenBracket: AlwaysBreak\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Left\nAlignOperands:   false\nAlignTrailingComments: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: false\nBinPackParameters: false\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakStringLiterals: false\nColumnLimit:     120\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - FOR_EACH_RANGE\n  - FOR_EACH\n  - BOOST_FOREACH\nIncludeIsMainRegex: '(Test)?$'\nIndentCaseLabels: true\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: false\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nReflowComments:  true\nSortIncludes:    true\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStatementMacros:    [define_data]\nTabWidth:        8\nUseTab:          Never\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 2.533203125,
          "content": "# `-allow-enabling-analyzer-alpha-checkers` should be passed to clang-tidy for CSA checkers named `clang-analyzer-alpha.*`\n# `aggressive-binary-operation-simplification` should be enabled (via `-Xclang -analyzer-config -Xclang aggressive-binary-operation-simplification=true` in clang)\n# there is some problem in `clang-analyzer-alpha.clone.*`, so do not enable it\n# `clang-analyzer-alpha.deadcode.*` is just too verbose to enable\nChecks: >-\n  -*,\n  bugprone-*,\n  -bugprone-branch-clone,\n  -bugprone-easily-swappable-parameters,\n  -bugprone-lambda-function-name,\n  -bugprone-macro-parentheses,\n  -bugprone-narrowing-conversions,\n  -bugprone-reserved-identifier,\n  clang-diagnostic-*,\n  clang-analyzer-.*,\n  cppcoreguidelines-avoid-goto,\n  cppcoreguidelines-interfaces-global-init,\n  cppcoreguidelines-init-variables,\n  cppcoreguidelines-no-malloc,\n  cppcoreguidelines-prefer-member-initializer,\n  cppcoreguidelines-pro-type-member-init,\n  cppcoreguidelines-pro-type-static-cast-downcast,\n  cppcoreguidelines-slicing,\n  cppcoreguidelines-special-member-functions,\n  performance-*,\n  google-default-arguments,\n  google-global-names-in-headers,\n  google-explicit-constructor,\n  misc-*,\n  -misc-const-correctness,\n  -misc-include-cleaner,\n  -misc-no-recursion,\n  -misc-non-private-member-variables-in-classes,\n  -misc-use-anonymous-namespace,\n  modernize-*,\n  -modernize-concat-nested-namespaces,\n  -modernize-raw-string-literal,\n  -modernize-return-braced-init-list,\n  -modernize-use-auto,\n  -modernize-use-trailing-return-type,\n  -modernize-use-nodiscard,\n  readability-container-size-empty,\n  readability-delete-null-pointer,\n  readability-duplicate-include\n  readability-misplaced-array-index,\n  readability-non-const-parameter,\n  readability-redundant*\n  readability-simplify*,\n  readability-string-compare,\n  -readability-redundant-access-specifiers,\n  -readability-redundant-control-flow,\n  readability-static-accessed-through-instance,\n  readability-static-definition-in-anonymous-namespace,\n  readability-string-compare,\n  readability-suspicious-call-argument,\n  readability-uniqueptr-delete-release,\n\nCheckOptions:\n  # `cppcoreguidelines-special-member-functions` is enabled, refer to https://en.cppreference.com/w/cpp/language/rule_of_three\n  - key:             cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor\n    value:           True\n  - key:             performance-move-const-arg.CheckTriviallyCopyableMove\n    value:           False\n  - key:             cppcoreguidelines-special-member-functions.AllowMissingMoveFunctionsWhenCopyIsDeleted\n    value:           True\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.0966796875,
          "content": "root = true\n\n[*]\n\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.3046875,
          "content": "# Python clean up #3982\n35092895d9bf3592e58f4710d098f8131afef259\n# Apply clang-format #4084\na525f98d5ed31660b629bab90c680a39658a5c08\n# Upgrade python syntax with pyupgrade #4212\n529f7cab88eed143fc9f0126147e9732585e4c5e\n# Format all python code with black and isort #4427\nfddb2b6d4ea3fb3dba751d884865042503260899\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0361328125,
          "content": "*.pb binary linguist-detectable=false"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.322265625,
          "content": "## General\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.cuo\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.pyd\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n\n# Compiled protocol buffers\n*.pb.h\n*.pb.cc\nonnx/*_pb2.py\nonnx/*_pb.py\nonnx/*_pb2.pyi\nonnx/*_pb.pyi\n\n# Compiled python\n*.pyc\n\n# Compiled MATLAB\n*.mex*\n\n# IPython notebook checkpoints\n.ipynb_checkpoints\n\n# Editor temporaries\n*.swn\n*.swo\n*.swp\n*~\n\n# Sublime Text settings\n*.sublime-workspace\n*.sublime-project\n\n# Eclipse Project settings\n*.*project\n.settings\n\n# QtCreator files\n*.user\n\n# PyCharm files\n.idea\n\n# Visual Studio Code files\n.vscode\n!/.vscode/settings.json\n\n# OSX dir files\n.DS_Store\n\n## ONNX\n\n# build, distribute, and bins (+ python proto bindings)\nbuild\nbuild_*\n.build_debug/*\n.build_release/*\n.setuptools-cmake-build/*\n\n# setup.py intermediates\n.eggs\ndist\nonnx.egg-info\n*.ninja\n.ninja_deps\n.ninja_log\ncompile_commands.json\n\n# generated files\nonnx/version.py\ncompile_commands.json\n\n# test generated files\n.cache\n.coverage\nonnx/examples/.coverage.nbval\n.pytest_cache\ntest_report\ntest-output.xml\n\n# autocomplete\n.ycm_extra_conf.py\n\n# test coverage data files\n*.gcov\n\n.mypy_cache\nvirtualenv\nvenv\n\n# direnv, posh-direnv\n.envrc\n.psenvrc\n\n# documentation\ndocs/docsgen/source/onnx-api/modules/\ndocs/docsgen/source/operators/\ndocs/docsgen/**/*.onnx\ndocs/docsgen/**/*.pb\n\n# PyEnv files\n.python-version\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1328125,
          "content": "[submodule \"third_party/pybind11\"]\n    path = third_party/pybind11\n    url = https://github.com/pybind/pybind11.git\n    branch = master\n"
        },
        {
          "name": ".lintrunner.toml",
          "type": "blob",
          "size": 4.154296875,
          "content": "# Configuration for lintrunner https://github.com/suo/lintrunner\n# You can install the dependencies and initialize with\n#\n# ```sh\n# pip install lintrunner lintrunner-adapters\n# lintrunner init\n# ```\n#\n# This will install lintrunner on your system and download all the necessary\n# dependencies to run linters locally.\n# If you want to see what lintrunner init will install, run\n# `lintrunner init --dry-run`.\n#\n# To lint local changes:\n#\n# ```bash\n# lintrunner\n# ```\n#\n# To lint all files:\n#\n# ```bash\n# lintrunner --all-files\n# ```\n#\n# To format files:\n#\n# ```bash\n# lintrunner -a\n# ```\n#\n# To read more about lintrunner, see [wiki](https://github.com/pytorch/pytorch/wiki/lintrunner).\n# To update an existing linting rule or create a new one, modify this file or create a\n# new adapter following examples in https://github.com/justinchuby/lintrunner-adapters.\nmerge_base_with = 'main'\n\n[[linter]]\ncode = 'RUFF'\ninclude_patterns = [\n    '**/*.py',\n    '**/*.pyi',\n]\nexclude_patterns = [\n    '*_pb2*',\n    '.setuptools-cmake-build/*',\n    'docs/**',\n]\ncommand = [\n    'python',\n    '-m',\n    'lintrunner_adapters',\n    'run',\n    'ruff_linter',\n    '--config=pyproject.toml',\n    '@{{PATHSFILE}}'\n]\ninit_command = [\n    'python',\n    '-m',\n    'lintrunner_adapters',\n    'run',\n    'pip_init',\n    '--dry-run={{DRYRUN}}',\n    '--requirement=requirements-lintrunner.txt',\n]\nis_formatter = true\n\n[[linter]]\ncode = 'MYPY'\ninclude_patterns = [\n    'onnx/**/*.py',\n    'tools/**/*.py',\n]\nexclude_patterns = [\n    'onnx/backend/test/**',\n    'onnx/reference/ops/**',  # FIXME: Enable this once typing is fixed\n    'onnx/test/parser_test.py',\n    'onnx/test/numpy_helper_test.py',\n    'onnx/reference/reference_evaluator.py',\n]\ncommand = [\n    'python',\n    '-m',\n    'lintrunner_adapters',\n    'run',\n    'mypy_linter',\n    '--config=pyproject.toml',\n    '--show-disable',\n    '--',\n    '@{{PATHSFILE}}'\n]\ninit_command = [\n    'python',\n    '-m',\n    'lintrunner_adapters',\n    'run',\n    'pip_init',\n    '--dry-run={{DRYRUN}}',\n    '--requirement=requirements-lintrunner.txt',\n]\n\n[[linter]]\ncode = 'RUFF-FORMAT'\ninclude_patterns = [\n    '**/*.py',\n]\nexclude_patterns = [\n    '*_pb2*',\n    '.setuptools-cmake-build/*',\n    'cmake/**',\n    'docs/**',\n]\ncommand = [\n    'python',\n    '-m',\n    'lintrunner_adapters',\n    'run',\n    'ruff_format_linter',\n    '--',\n    '@{{PATHSFILE}}'\n]\ninit_command = [\n    'python',\n    '-m',\n    'lintrunner_adapters',\n    'run',\n    'pip_init',\n    '--dry-run={{DRYRUN}}',\n    '--requirement=requirements-lintrunner.txt',\n]\nis_formatter = true\n\n[[linter]]\ncode = 'NAMESPACE'\ninclude_patterns = ['**/*.cc', '**/*.h']\nexclude_patterns = ['third_party/**']\ncommand = [\n    'python',\n    '-m',\n    'lintrunner_adapters',\n    'run',\n    'grep_linter',\n    '--pattern=namespace onnx|onnx::',\n    '--linter-name=NAMESPACE',\n    '--error-name=hardcoded onnx namespace',\n    \"\"\"--error-description=\\\n        Do not hardcode onnx's namespace in the c++ source code, so that \\\n        other libraries that statically link with onnx can hide onnx symbols \\\n        in a private namespace.\\\n    \"\"\",\n    '--',\n    '@{{PATHSFILE}}'\n]\n\n[[linter]]\ncode = 'CLANGFORMAT'\ninclude_patterns = [\n    'onnx/**/*.h',\n    'onnx/**/*.cc',\n]\nexclude_patterns = [\n]\ncommand = [\n    'python',\n    '-m',\n    'lintrunner_adapters',\n    'run',\n    'clangformat_linter',\n    '--binary=clang-format',\n    '--fallback',\n    '--',\n    '@{{PATHSFILE}}'\n]\ninit_command = [\n    'python',\n    '-m',\n    'lintrunner_adapters',\n    'run',\n    'pip_init',\n    '--dry-run={{DRYRUN}}',\n    '--requirement=requirements-lintrunner.txt',\n]\nis_formatter = true\n\n[[linter]]\ncode = 'EDITORCONFIG-CHECKER'\ninclude_patterns=[\n    '**/*.py',\n    '**/*.pyi',\n    '**/*.cc',\n    '**/*.h',\n    '**/*.md',\n    '**/*.cpp',\n]\nexclude_patterns = [\n    '*_pb2*',\n    '.setuptools-cmake-build/*',\n    'cmake/**',\n    'docs/**',\n    'community/sc-election-guidelines.md',\n]\ncommand = [\n    'python',\n    '-m',\n    'lintrunner_adapters',\n    'run',\n    'editorconfig_checker_linter',\n    '--',\n    '@{{PATHSFILE}}'\n]\ninit_command = [\n    'python',\n    '-m',\n    'lintrunner_adapters',\n    'run',\n    'pip_init',\n    '--dry-run={{DRYRUN}}',\n    '--requirement=requirements-lintrunner.txt',\n]\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 27.1845703125,
          "content": "# Minimum CMake required\ncmake_minimum_required(VERSION 3.18)\ninclude(cmake/Utils.cmake)\n# Set default build type\nif(NOT CMAKE_BUILD_TYPE)\n  message(STATUS \"Build type not set - defaulting to Release\")\n  set(\n    CMAKE_BUILD_TYPE \"Release\"\n    CACHE\n      STRING\n      \"Choose the type of build from: Debug Release RelWithDebInfo MinSizeRel Coverage.\"\n    FORCE)\nendif()\ncmake_policy(SET CMP0063 NEW)\ncmake_policy(SET CMP0074 NEW)\n\nif(NOT BUILD_SHARED_LIBS)\n  # by default, cmake builds static libraries\n  set(BUILD_SHARED_LIBS OFF)\nendif()\n\n# Project\nproject(onnx LANGUAGES C CXX)\n\nif(DEFINED BUILD_ONNX_PYTHON)\n  message(WARNING \"'BUILD_ONNX_PYTHON' is deprecated. Please, use 'ONNX_BUILD_PYTHON' instead\")\n  set(ONNX_BUILD_PYTHON_DEFAULT ${BUILD_ONNX_PYTHON})\nelse()\n  set(ONNX_BUILD_PYTHON_DEFAULT OFF)\nendif()\n\noption(ONNX_BUILD_PYTHON \"Build Python binaries\" ${ONNX_BUILD_PYTHON_DEFAULT})\noption(ONNX_USE_PROTOBUF_SHARED_LIBS \"Build ONNX using protobuf shared library.\" OFF)\noption(ONNX_GEN_PB_TYPE_STUBS \"Generate protobuf python type stubs\" ON)\noption(ONNX_WERROR \"Build with Werror\" OFF)\noption(ONNX_COVERAGE \"Build with coverage instrumentation\" OFF)\noption(ONNX_BUILD_TESTS \"Build ONNX C++ APIs Tests\" OFF)\noption(ONNX_USE_LITE_PROTO \"Use lite protobuf instead of full.\" OFF)\noption(ONNX_DISABLE_EXCEPTIONS \"Disable exception handling.\" OFF)\noption(ONNX_DISABLE_STATIC_REGISTRATION \"Disable static registration for ONNX operator schemas.\" OFF)\noption(ONNX_USE_UNITY_BUILD \"Enable Unity (Jumbo) build for\" OFF)\nif(WIN32)\n  option(ONNX_USE_MSVC_STATIC_RUNTIME \"Build with MSVC static runtime\" OFF)\nendif()\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nif(NOT DEFINED ONNX_ML)\n  if(DEFINED ENV{ONNX_ML})\n    set(DEFAULT_ONNX_ML $ENV{ONNX_ML})\n  else()\n    set(DEFAULT_ONNX_ML ON)\n  endif()\n  option(ONNX_ML \"Enable traditional ML API.\" ${DEFAULT_ONNX_ML})\nendif()\n\nif(NOT DEFINED ONNX_VERIFY_PROTO3)\n  if(DEFINED ENV{ONNX_VERIFY_PROTO3})\n    set(PROTO3_ENABLED $ENV{ONNX_VERIFY_PROTO3})\n  else()\n    set(PROTO3_ENABLED OFF)\n  endif()\n  option(ONNX_VERIFY_PROTO3 \"Generate code by proto3\" ${PROTO3_ENABLED})\nendif()\n\nif(NOT DEFINED CMAKE_CXX_STANDARD)\n  set(CMAKE_CXX_STANDARD 17)\nendif()\n\ninclude(GNUInstallDirs)\n\nset(ONNX_ROOT ${onnx_SOURCE_DIR})\n\n# Read ONNX version\nfile(READ \"${ONNX_ROOT}/VERSION_NUMBER\" ONNX_VERSION)\nstring(STRIP \"${ONNX_VERSION}\" ONNX_VERSION)\n\nif(NOT MSVC)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wnon-virtual-dtor\")\n  set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -O0\")\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -O0\")\n  if(ONNX_COVERAGE)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage\")\n  endif()\nendif()\n\nif(NOT ONNX_NAMESPACE)\n  set(ONNX_NAMESPACE \"onnx\")\nendif()\n\nif(MSVC)\n  if(NOT ONNX_DISABLE_EXCEPTIONS)\n    string(APPEND CMAKE_CXX_FLAGS \" /EHsc /wd26812\")\n    string(APPEND CMAKE_C_FLAGS \" /EHsc /wd26812\")\n  endif()\nendif()\n\nif(ONNX_DISABLE_EXCEPTIONS)\n  add_compile_definitions(\"ONNX_NO_EXCEPTIONS\")\n  # Disable C++ exceptions.\n  if(MSVC)\n    string(REGEX REPLACE \"/EHsc\" \"/EHs-c-\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n    add_definitions(-D_HAS_EXCEPTIONS=0)\n  else()\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-exceptions -fno-unwind-tables -fno-asynchronous-unwind-tables\")\n  endif()\nendif()\n\nif(ONNX_BUILD_PYTHON)\n  set(python_dev_component Development.Module)\nendif()\n\n# explicitly configure FindPython3.cmake to find python3 in virtual environment first\nif(NOT DEFINED Python3_FIND_VIRTUALENV)\n  set(Python3_FIND_VIRTUALENV FIRST)\nendif()\n\nif(NOT DEFINED Python3_FIND_STRATEGY)\n  set(Python3_FIND_STRATEGY LOCATION)\nendif()\n\nfind_package(Python3 REQUIRED COMPONENTS Interpreter ${python_dev_component})\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"AIX\")\n  set(CMAKE_NO_SYSTEM_FROM_IMPORTED 1)\nendif()\n\n# Build the libraries with -fPIC including the protobuf lib.\nif(NOT DEFINED CMAKE_POSITION_INDEPENDENT_CODE)\n  set(CMAKE_POSITION_INDEPENDENT_CODE ON)\nendif()\n\nif(ONNX_BUILD_TESTS)\n  find_package(GTest)\n  if(NOT GTest_FOUND)\n    list(APPEND CMAKE_MODULE_PATH ${ONNX_ROOT}/cmake/external)\n    include(googletest)\n  endif()\n  set(googletest_STATIC_LIBRARIES GTest::gtest)\nendif()\n\nif((ONNX_USE_LITE_PROTO AND TARGET protobuf::libprotobuf-lite) OR ((NOT ONNX_USE_LITE_PROTO) AND TARGET protobuf::libprotobuf))\n  # Sometimes we need to use protoc compiled for host architecture while linking\n  # libprotobuf against target architecture. See https://github.com/caffe2/caffe\n  # 2/blob/96f35ad75480b25c1a23d6e9e97bccae9f7a7f9c/cmake/ProtoBuf.cmake#L92-L99\n  if(EXISTS \"${ONNX_CUSTOM_PROTOC_EXECUTABLE}\")\n    message(STATUS \"Using custom protoc executable\")\n    set(ONNX_PROTOC_EXECUTABLE ${ONNX_CUSTOM_PROTOC_EXECUTABLE})\n  else()\n    set(ONNX_PROTOC_EXECUTABLE $<TARGET_FILE:protobuf::protoc>)\n  endif()\nelse()\n  # Customized version of find Protobuf. We need to avoid situations mentioned\n  # in https://github.com/caffe2/caffe2/blob/b7d983f255ef5496474f1ea188edb5e0ac4\n  # 42761/cmake/ProtoBuf.cmake#L82-L92 The following section is stolen from\n  # cmake/ProtoBuf.cmake in Caffe2\n  find_program(Protobuf_PROTOC_EXECUTABLE\n               NAMES protoc\n               DOC \"The Google Protocol Buffers Compiler\")\n\n  # Only if protoc was found, seed the include directories and libraries. We\n  # assume that protoc is installed at PREFIX/bin. We use get_filename_component\n  # to resolve PREFIX.\n  if(Protobuf_PROTOC_EXECUTABLE)\n    set(ONNX_PROTOC_EXECUTABLE ${Protobuf_PROTOC_EXECUTABLE})\n    get_filename_component(_PROTOBUF_INSTALL_PREFIX\n                           ${Protobuf_PROTOC_EXECUTABLE} DIRECTORY)\n    get_filename_component(_PROTOBUF_INSTALL_PREFIX\n                           ${_PROTOBUF_INSTALL_PREFIX}/.. REALPATH)\n    find_library(Protobuf_PROTOC_LIBRARY\n                 NAMES protoc\n                 PATHS ${_PROTOBUF_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}\n                 NO_DEFAULT_PATH)\n    if(ONNX_USE_LITE_PROTO)\n      find_library(Protobuf_LITE_LIBRARY\n        NAMES protobuf-lite\n        PATHS ${_PROTOBUF_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}\n        NO_DEFAULT_PATH)\n    else()\n      find_library(Protobuf_LIBRARY\n        NAMES protobuf\n        PATHS ${_PROTOBUF_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}\n        NO_DEFAULT_PATH)\n    endif(ONNX_USE_LITE_PROTO)\n    find_path(Protobuf_INCLUDE_DIR google/protobuf/service.h\n              PATHS ${_PROTOBUF_INSTALL_PREFIX}/include\n              NO_DEFAULT_PATH)\n    if(ONNX_USE_PROTOBUF_SHARED_LIBS)\n      set(Protobuf_USE_STATIC_LIBS OFF)\n    else()\n      set(Protobuf_USE_STATIC_LIBS ON)\n    endif()\n    find_package(Protobuf)\n    if(Protobuf_FOUND)\n      set(PROTOBUF_DIR \"${_PROTOBUF_INSTALL_PREFIX}\")\n      set(PROTOBUF_INCLUDE_DIR \"${_PROTOBUF_INSTALL_PREFIX}/include\")\n      set(Build_Protobuf OFF)\n      if(\"${Protobuf_VERSION}\" VERSION_GREATER_EQUAL \"4.22.0\")\n        # There are extra dependencies for protobuf.\n        find_package(absl REQUIRED)\n        find_package(utf8_range REQUIRED)\n        message(STATUS \"absl_VERSION: ${absl_VERSION}\")\n        set(protobuf_ABSL_USED_TARGETS\n          absl::absl_check\n          absl::absl_log\n          absl::algorithm\n          absl::base\n          absl::bind_front\n          absl::bits\n          absl::btree\n          absl::cleanup\n          absl::cord\n          absl::core_headers\n          absl::debugging\n          absl::die_if_null\n          absl::dynamic_annotations\n          absl::flags\n          absl::flat_hash_map\n          absl::flat_hash_set\n          absl::function_ref\n          absl::hash\n          absl::layout\n          absl::log_initialize\n          absl::log_severity\n          absl::memory\n          absl::node_hash_map\n          absl::node_hash_set\n          absl::optional\n          absl::span\n          absl::status\n          absl::statusor\n          absl::strings\n          absl::synchronization\n          absl::time\n          absl::type_traits\n          absl::utility\n          absl::variant\n          utf8_range::utf8_range\n          utf8_range::utf8_validity\n        )\n      endif()\n    else()\n      set(Build_Protobuf ON)\n    endif()\n  else()  # Protobuf_PROTOC_EXECUTABLE not found.\n    set(Build_Protobuf ON)\n  endif()\n  if(Build_Protobuf)\n    set(protobuf_MSVC_STATIC_RUNTIME ${ONNX_USE_MSVC_STATIC_RUNTIME})\n    set(ABSL_MSVC_STATIC_RUNTIME ${ONNX_USE_MSVC_STATIC_RUNTIME})\n\n    include(FetchContent)\n    message(\"Loading Dependencies URLs ...\")\n    set(AbseilURL https://github.com/abseil/abseil-cpp/releases/download/20240116.2/abseil-cpp-20240116.2.tar.gz)\n    set(AbseilSHA1 bb8a766f3aef8e294a864104b8ff3fc37b393210)\n    FetchContent_Declare(\n      Abseil\n      URL ${AbseilURL}\n      URL_HASH SHA1=${AbseilSHA1}\n    )\n    set(ABSL_PROPAGATE_CXX_STD 1)\n    set(abseil_BUILD_TESTING 0)\n    set(ONNX_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})\n    # Use this setting to build thirdparty libs.\n    set(BUILD_SHARED_LIBS ${ONNX_USE_PROTOBUF_SHARED_LIBS})\n    message(STATUS \"Download and build Abseil from ${AbseilURL}\")\n    FetchContent_Populate(Abseil)\n    FetchContent_GetProperties(Abseil)\n    # ABSL_ROOT_DIR is required by Protobuf.\n    set(ABSL_ROOT_DIR ${abseil_SOURCE_DIR})\n    message(STATUS \"Abseil source dir:\" ${ABSL_ROOT_DIR})\n    set(ProtobufURL https://github.com/protocolbuffers/protobuf/releases/download/v29.2/protobuf-29.2.tar.gz)\n    set(ProtobufSHA1 a5639ffb17e3743d696baf16bf377fbe752b6a1f)\n    FetchContent_Declare(\n      Protobuf\n      URL ${ProtobufURL}\n      URL_HASH SHA1=${ProtobufSHA1}\n    )\n    set(protobuf_BUILD_TESTS OFF CACHE BOOL \"Build protobuf tests\" FORCE)\n    message(STATUS \"Download and build Protobuf from ${ProtobufURL}\")\n    FetchContent_MakeAvailable(Protobuf Abseil)\n    set(ONNX_PROTOC_EXECUTABLE $<TARGET_FILE:protobuf::protoc>)\n    set(Protobuf_VERSION \"5.29.2\")\n    # Change back the BUILD_SHARED_LIBS to control the onnx project.\n    set(BUILD_SHARED_LIBS ${ONNX_BUILD_SHARED_LIBS})\n    set(PROTOBUF_DIR \"${protobuf_BINARY_DIR}\")\n    set(PROTOBUF_INCLUDE_DIR \"${protobuf_SOURCE_DIR}/src\")\n  endif()\n  message(STATUS \"ONNX_PROTOC_EXECUTABLE: ${ONNX_PROTOC_EXECUTABLE}\")\n  message(STATUS \"Protobuf_VERSION: ${Protobuf_VERSION}\")\nendif()\n\n# abseil build would fail if ONNX_WERROR is on.\nif(ONNX_WERROR)\n  if(MSVC)\n    add_compile_options(\"/WX\")\n  else()\n    add_compile_options(\"-Werror\")\n  endif()\nendif()\n\n# function(RELATIVE_PROTOBUF_GENERATE_CPP SRCS HDRS ROOT_DIR) from https://githu\n# b.com/tensorflow/tensorflow/blob/d2c3b873c6f8ff999a2e4ee707a84ff00d9c15a5/tens\n# orflow/contrib/cmake/tf_core_framework.cmake to solve the problem that\n# customized dir can't be specified when calling PROTOBUF_GENERATE_CPP.\nfunction(RELATIVE_PROTOBUF_GENERATE_CPP NAME SRCS HDRS ROOT_DIR DEPEND)\n  if(NOT ARGN)\n    message(\n      SEND_ERROR\n        \"Error: RELATIVE_PROTOBUF_GENERATE_CPP() called without any proto files\"\n      )\n    return()\n  endif()\n\n  # Add ONNX_API prefix to protobuf classes and methods in all cases\n  set(ONNX_DLLEXPORT_STR \"dllexport_decl=ONNX_API:\")\n\n  set(${SRCS})\n  set(${HDRS})\n\n  set(GEN_PROTO_PY ${ROOT_DIR}/onnx/gen_proto.py)\n  foreach(INFILE ${ARGN})\n    set(ABS_FILE ${ROOT_DIR}/${INFILE})\n    get_filename_component(FILE_DIR ${ABS_FILE} DIRECTORY)\n    get_filename_component(FILE_WE ${INFILE} NAME_WE)\n    # \"onnx-data\" check is because we do not want to create/compile an \"onnx-data-ml.proto\" file\n    if(ONNX_ML AND NOT(FILE_WE STREQUAL \"onnx-data\"))\n      if(ONNX_NAMESPACE STREQUAL \"onnx\")\n        set(GENERATED_FILE_WE \"${FILE_WE}-ml\")\n      else()\n        set(GENERATED_FILE_WE \"${FILE_WE}_${ONNX_NAMESPACE}-ml\")\n      endif()\n    else()\n      if(ONNX_NAMESPACE STREQUAL \"onnx\")\n        set(GENERATED_FILE_WE \"${FILE_WE}\")\n      else()\n        set(GENERATED_FILE_WE \"${FILE_WE}_${ONNX_NAMESPACE}\")\n      endif()\n    endif()\n    file(RELATIVE_PATH REL_DIR ${ROOT_DIR} ${FILE_DIR})\n    set(OUTPUT_PROTO_DIR \"${CMAKE_CURRENT_BINARY_DIR}/${REL_DIR}\")\n\n    set(OUTPUT_PB_HEADER \"${OUTPUT_PROTO_DIR}/${GENERATED_FILE_WE}.pb.h\")\n    set(OUTPUT_PB_SRC \"${OUTPUT_PROTO_DIR}/${GENERATED_FILE_WE}.pb.cc\")\n    set(GENERATED_PROTO \"${OUTPUT_PROTO_DIR}/${GENERATED_FILE_WE}.proto\")\n    if(NOT (ONNX_NAMESPACE STREQUAL \"onnx\"))\n      # We need this dummy header generated by gen_proto.py when ONNX_NAMESPACE\n      # is not onnx\n      list(APPEND ${HDRS} \"${OUTPUT_PROTO_DIR}/${GENERATED_FILE_WE}.pb.h\")\n    endif()\n    list(APPEND ${SRCS} \"${OUTPUT_PB_SRC}\")\n    list(APPEND ${HDRS} \"${OUTPUT_PB_HEADER}\")\n\n    if(NOT EXISTS \"${OUTPUT_PROTO_DIR}\")\n      file(MAKE_DIRECTORY \"${OUTPUT_PROTO_DIR}\")\n    endif()\n\n    set(GEN_PROTO_ARGS\n        -p\n        \"${ONNX_NAMESPACE}\"\n        -o\n        \"${OUTPUT_PROTO_DIR}\"\n        \"${FILE_WE}\")\n    if(ONNX_ML)\n      list(APPEND GEN_PROTO_ARGS -m)\n    endif()\n    if(ONNX_USE_LITE_PROTO)\n      list(APPEND GEN_PROTO_ARGS -l)\n    endif()\n    if(ONNX_VERIFY_PROTO3)\n        if(NOT ONNX_PROTOC_EXECUTABLE)\n          message(FATAL_ERROR \"Protobuf compiler not found\")\n        endif()\n        list(APPEND GEN_PROTO_ARGS --protoc_path)\n        list(APPEND GEN_PROTO_ARGS \"${ONNX_PROTOC_EXECUTABLE}\")\n    endif()\n\n    add_custom_command(OUTPUT \"${GENERATED_PROTO}\"\n                       COMMAND \"${Python3_EXECUTABLE}\" \"${GEN_PROTO_PY}\"\n                               ARGS ${GEN_PROTO_ARGS}\n                       DEPENDS ${INFILE}\n                       COMMENT \"Running gen_proto.py on ${INFILE}\"\n                       VERBATIM)\n    message(\"Generated: ${GENERATED_PROTO}\")\n    set(PROTOC_ARGS\n        ${GENERATED_PROTO}\n        -I\n        ${CMAKE_CURRENT_BINARY_DIR}\n        --cpp_out\n        ${ONNX_DLLEXPORT_STR}${CMAKE_CURRENT_BINARY_DIR})\n    if(ONNX_BUILD_PYTHON)\n      list(APPEND PROTOC_ARGS --python_out)\n      if(ONNX_GEN_PB_TYPE_STUBS)\n        list(APPEND PROTOC_ARGS pyi_out:${CMAKE_CURRENT_BINARY_DIR})\n      else()\n        list(APPEND PROTOC_ARGS ${CMAKE_CURRENT_BINARY_DIR})\n      endif()\n    endif()\n    if(NOT ONNX_PROTOC_EXECUTABLE)\n      message(FATAL_ERROR \"Protobuf compiler not found\")\n    endif()\n    if(ONNX_PROTO_POST_BUILD_SCRIPT)\n      add_custom_command(\n        OUTPUT \"${OUTPUT_PB_SRC}\" \"${OUTPUT_PB_HEADER}\"\n        COMMAND ${ONNX_PROTOC_EXECUTABLE} ARGS ${PROTOC_ARGS}\n        COMMAND \"${CMAKE_COMMAND}\" -DFILENAME=${OUTPUT_PB_HEADER}\n                -DNAMESPACES=${ONNX_NAMESPACE} -P\n                ${ONNX_PROTO_POST_BUILD_SCRIPT}\n        COMMAND \"${CMAKE_COMMAND}\" -DFILENAME=${OUTPUT_PB_SRC}\n                -DNAMESPACES=${ONNX_NAMESPACE} -P\n                ${ONNX_PROTO_POST_BUILD_SCRIPT}\n        DEPENDS ${GENERATED_PROTO} ${DEPEND}\n        COMMENT \"Running C++ protocol buffer compiler on ${GENERATED_PROTO}\"\n        VERBATIM)\n    else()\n      add_custom_command(\n        OUTPUT \"${OUTPUT_PB_SRC}\" \"${OUTPUT_PB_HEADER}\"\n        COMMAND ${ONNX_PROTOC_EXECUTABLE} ARGS ${PROTOC_ARGS}\n        DEPENDS ${GENERATED_PROTO} ${DEPEND}\n        COMMENT \"Running C++ protocol buffer compiler on ${GENERATED_PROTO}\"\n        VERBATIM)\n    endif()\n    add_custom_target(${NAME} DEPENDS ${OUTPUT_PB_SRC} ${OUTPUT_PB_HEADER})\n  endforeach()\n\n  set_source_files_properties(${${SRCS}} ${${HDRS}} PROPERTIES GENERATED TRUE)\n  set(${SRCS} ${${SRCS}} PARENT_SCOPE)\n  set(${HDRS} ${${HDRS}} PARENT_SCOPE)\nendfunction()\n\nrelative_protobuf_generate_cpp(gen_onnx_proto\n                               __tmp_srcs\n                               __tmp_hdrs\n                               ${ONNX_ROOT}\n                               \"\"\n                               onnx/onnx.in.proto)\nlist(APPEND ONNX_PROTO_SRCS ${__tmp_srcs})\nlist(APPEND ONNX_PROTO_HDRS ${__tmp_hdrs})\n\nrelative_protobuf_generate_cpp(gen_onnx_operators_proto\n                               __tmp_srcs\n                               __tmp_hdrs\n                               ${ONNX_ROOT}\n                               gen_onnx_proto\n                               onnx/onnx-operators.in.proto)\nlist(APPEND ONNX_PROTO_SRCS ${__tmp_srcs})\nlist(APPEND ONNX_PROTO_HDRS ${__tmp_hdrs})\n\nrelative_protobuf_generate_cpp(gen_onnx_data_proto\n                               __tmp_srcs\n                               __tmp_hdrs\n                               ${ONNX_ROOT}\n                               gen_onnx_proto\n                               onnx/onnx-data.in.proto)\nlist(APPEND ONNX_PROTO_SRCS ${__tmp_srcs})\nlist(APPEND ONNX_PROTO_HDRS ${__tmp_hdrs})\n\nfile(GLOB_RECURSE __tmp_srcs \"${ONNX_ROOT}/onnx/*.h\" \"${ONNX_ROOT}/onnx/*.cc\")\nfile(GLOB_RECURSE onnx_gtests_src \"${ONNX_ROOT}/onnx/test/cpp/*.h\"\n    \"${ONNX_ROOT}/onnx/test/cpp/*.cc\"\n    \"${ONNX_ROOT}/onnx/backend/test/cpp/*.cc\"\n    \"${ONNX_ROOT}/onnx/backend/test/cpp/*.h\")\nlist(REMOVE_ITEM __tmp_srcs \"${ONNX_ROOT}/onnx/cpp2py_export.cc\")\nlist(REMOVE_ITEM __tmp_srcs ${onnx_gtests_src})\nlist(APPEND ONNX_SRCS ${__tmp_srcs})\n\nadd_library(onnx_proto ${ONNX_PROTO_SRCS} ${ONNX_PROTO_HDRS})\nadd_dependencies(onnx_proto gen_onnx_operators_proto gen_onnx_data_proto)\ntarget_include_directories(onnx_proto PUBLIC\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\n  $<INSTALL_INTERFACE:include>\n  $<BUILD_INTERFACE:${PROTOBUF_INCLUDE_DIRS}>)\n\nif(MSVC)\n  if(CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n    set(EXTRA_FLAGS\n          \"-Wno-microsoft-unqualified-friend\"\n          \"-Wno-absolute-value\"\n          \"-Wno-unknown-argument\"\n          \"-Qunused-arguments\")\n  endif()\n  if(BUILD_SHARED_LIBS OR ONNX_BUILD_MAIN_LIB)\n    set(ONNX_API_DEFINE \"-DONNX_API=__declspec(dllexport)\")\n  else()\n    set(ONNX_API_DEFINE \"-DONNX_API=\")\n  endif()\nelse()\n  # On non-Windows, hide all symbols we don't need\n  set(ONNX_API_DEFINE \"-DONNX_API=__attribute__\\(\\(__visibility__\\(\\\"default\\\"\\)\\)\\)\")\n  set_target_properties(onnx_proto PROPERTIES CXX_VISIBILITY_PRESET hidden)\n  set_target_properties(onnx_proto PROPERTIES VISIBILITY_INLINES_HIDDEN 1)\nendif()\ntarget_compile_definitions(onnx_proto PRIVATE ${ONNX_API_DEFINE})\ntarget_compile_features(onnx_proto PUBLIC cxx_std_${CMAKE_CXX_STANDARD})\n\nif(ONNX_USE_LITE_PROTO)\n  if(TARGET protobuf::libprotobuf-lite)\n    target_link_libraries(onnx_proto PUBLIC protobuf::libprotobuf-lite PRIVATE ${protobuf_ABSL_USED_TARGETS})\n  else()\n    target_link_libraries(onnx_proto PUBLIC ${PROTOBUF_LITE_LIBRARIES})\n  endif()\nelse()\n  if(TARGET protobuf::libprotobuf)\n    target_link_libraries(onnx_proto PUBLIC protobuf::libprotobuf PRIVATE ${protobuf_ABSL_USED_TARGETS})\n  else()\n    target_link_libraries(onnx_proto PUBLIC ${PROTOBUF_LIBRARIES})\n  endif()\nendif()\nadd_onnx_global_defines(onnx_proto)\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"AIX\")\n  # whole-archive linker option not available on AIX.\n  # So, create a object library\n  add_library(onnx OBJECT ${ONNX_SRCS})\nelse()\n  add_library(onnx ${ONNX_SRCS})\nendif()\nset_target_properties(onnx PROPERTIES CXX_VISIBILITY_PRESET hidden)\nset_target_properties(onnx PROPERTIES VISIBILITY_INLINES_HIDDEN ON)\n\ntarget_include_directories(onnx PUBLIC\n  $<BUILD_INTERFACE:${ONNX_ROOT}>\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\n  $<INSTALL_INTERFACE:include>)\ntarget_link_libraries(onnx PUBLIC onnx_proto)\nadd_onnx_global_defines(onnx)\n\nif(ONNX_BUILD_PYTHON)\n  if(NOT PY_EXT_SUFFIX)\n    if(WIN32)\n      set(PY_EXT_SUFFIX \".pyd\")\n    else()\n      set(PY_EXT_SUFFIX \".so\")\n    endif()\n  endif()\n\n  add_library(onnx_cpp2py_export MODULE \"${ONNX_ROOT}/onnx/cpp2py_export.cc\")\n  set_target_properties(onnx_cpp2py_export PROPERTIES PREFIX \"\")\n  set_target_properties(onnx_cpp2py_export PROPERTIES CXX_VISIBILITY_PRESET hidden)\n  set_target_properties(onnx_cpp2py_export PROPERTIES VISIBILITY_INLINES_HIDDEN ON)\n  set_target_properties(onnx_cpp2py_export PROPERTIES SUFFIX ${PY_EXT_SUFFIX})\n  set_target_properties(onnx_cpp2py_export\n                        PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})\n  target_include_directories(onnx_cpp2py_export PRIVATE\n                             $<BUILD_INTERFACE:${ONNX_ROOT}>\n                             $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\n                             $<INSTALL_INTERFACE:include>)\n\n  # search for FindPython3.cmake instead of legacy modules\n  set(PYBIND11_FINDPYTHON ON)\n\n  # pybind11 is a header only lib\n  find_package(pybind11 2.12 CONFIG)\n  if(NOT pybind11_FOUND)\n    if(EXISTS \"${ONNX_ROOT}/third_party/pybind11/include/pybind11/pybind11.h\")\n      add_subdirectory(\"${ONNX_ROOT}/third_party/pybind11\")\n    else()\n      message(FATAL_ERROR \"cannot find pybind at '${ONNX_ROOT}/third_party/pybind11/include/pybind11/pybind11.h'\")\n    endif()\n  endif()\n\n  target_include_directories(onnx_cpp2py_export PUBLIC\n    \"${pybind11_INCLUDE_DIRS}\"\n    \"${Python3_INCLUDE_DIRS}\")\n\n  if(APPLE)\n    set_target_properties(onnx_cpp2py_export\n                          PROPERTIES LINK_FLAGS \"-undefined dynamic_lookup\")\n    # Only put double quotes around $<TARGET_FILE:onnx> for Mac\n    # Other platforms like Windows and Ubuntu originally work fine without double quotes\n    target_link_libraries(onnx_cpp2py_export\n                          PRIVATE -Wl,-force_load,\"$<TARGET_FILE:onnx>\")\n  elseif(MSVC)\n    # In MSVC, we will add whole archive in default\n    target_link_libraries(onnx_cpp2py_export\n                          PRIVATE -WHOLEARCHIVE:$<TARGET_FILE:onnx>)\n  elseif(CMAKE_SYSTEM_NAME STREQUAL \"AIX\")\n    # whole-archive linker option not available on AIX\n    target_sources(onnx_cpp2py_export\n                          PRIVATE $<TARGET_OBJECTS:onnx>)\n  else()\n    # Assume everything else is like gcc\n    target_link_libraries(onnx_cpp2py_export\n                          PRIVATE \"-Wl,--whole-archive\" $<TARGET_FILE:onnx>\n                                  \"-Wl,--no-whole-archive\")\n    # Prevent \"undefined symbol: _ZNSt10filesystem7__cxx114path14_M_split_cmptsEv\"\n    # (std::filesystem::__cxx11::path::_M_split_cmpts()) on gcc 8\n    if(CMAKE_CXX_STANDARD EQUAL 17 AND CMAKE_COMPILER_IS_GNUCC AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 9.0)\n      target_link_libraries(onnx_cpp2py_export PRIVATE \"-lstdc++fs\")\n    endif()\n    set_target_properties(onnx_cpp2py_export\n                          PROPERTIES LINK_FLAGS \"-Wl,--exclude-libs,ALL\")\n  endif()\n\n  target_link_libraries(onnx_cpp2py_export PRIVATE onnx)\n\n  if(MSVC)\n    target_link_libraries(onnx_cpp2py_export PRIVATE ${Python3_LIBRARIES})\n    target_compile_options(onnx_cpp2py_export\n                           PRIVATE /MP\n                                   /wd4146 # unary minus operator applied to unsigned type,\n                                           # result still unsigned\n                                   /wd4244 # 'argument': conversion from 'google::\n                                           # protobuf::uint64' to 'int', possible\n                                           # loss of data\n                                   /wd4267 # Conversion from 'size_t' to 'int',\n                                           # possible loss of data\n                                   ${EXTRA_FLAGS})\n    add_msvc_runtime_flag(onnx_cpp2py_export)\n    add_onnx_global_defines(onnx_cpp2py_export)\n  endif()\nendif()\n\n# Export include directories\nset(ONNX_INCLUDE_DIRS \"${ONNX_ROOT}\" \"${CMAKE_CURRENT_BINARY_DIR}\")\nget_directory_property(hasParent PARENT_DIRECTORY)\nif(hasParent)\n  set(ONNX_INCLUDE_DIRS ${ONNX_INCLUDE_DIRS} PARENT_SCOPE)\nendif()\n\nif(MSVC)\n  target_compile_options(onnx_proto\n                         PRIVATE /MP\n                                 /wd4146 # unary minus operator applied to unsigned type,\n                                         # result still unsigned\n                                 /wd4244 #'argument': conversion from 'google::\n                                         #protobuf::uint64' to 'int', possible\n                                         # loss of data\n                                 /wd4267 # Conversion from 'size_t' to 'int',\n                                         # possible loss of data\n                                 ${EXTRA_FLAGS})\n  target_compile_options(onnx\n                         PRIVATE /MP\n                                 /wd4146 # unary minus operator applied to unsigned type,\n                                         # result still unsigned\n                                 /wd4244 # 'argument': conversion from 'google::\n                                         # protobuf::uint64' to 'int', possible\n                                         # loss of data\n                                 /wd4267 # Conversion from 'size_t' to 'int',\n                                         # possible loss of data\n                                 ${EXTRA_FLAGS})\n  add_msvc_runtime_flag(onnx_proto)\n  add_msvc_runtime_flag(onnx)\n  set(onnx_static_library_flags\n      -IGNORE:4221 # LNK4221: This object file does not define any previously\n                   # undefined public symbols, so it will not be used by any\n                   # link operation that consumes this library\n      )\n  set_target_properties(onnx\n                        PROPERTIES STATIC_LIBRARY_FLAGS\n                                   \"${onnx_static_library_flags}\")\nelse()\n  target_compile_options(onnx PRIVATE -Wall -Wextra)\n  if(CMAKE_COMPILER_IS_GNUCC AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 13)\n    target_compile_options(onnx PRIVATE \"-Wno-stringop-overflow\")\n    target_compile_options(onnx_proto PRIVATE \"-Wno-stringop-overflow\")\n  endif()\nendif()\n\nif(APPLE)\n  set_target_properties(onnx PROPERTIES LINK_FLAGS \"-undefined dynamic_lookup\")\nendif()\n\ninstall(DIRECTORY ${ONNX_ROOT}/onnx\n        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n        FILES_MATCHING\n        PATTERN \"*.h\"\n        PATTERN \"backend/test/case\" EXCLUDE\n        PATTERN \"backend/test/data\" EXCLUDE)\ninstall(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/onnx\n        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n        FILES_MATCHING\n        PATTERN \"*.h\")\n\nconfigure_file(\n  ${PROJECT_SOURCE_DIR}/cmake/ONNXConfigVersion.cmake.in\n  ${PROJECT_BINARY_DIR}/ONNXConfigVersion.cmake\n  @ONLY)\nconfigure_file(\n  ${PROJECT_SOURCE_DIR}/cmake/ONNXConfig.cmake.in\n  ${PROJECT_BINARY_DIR}/ONNXConfig.cmake\n  @ONLY)\ninstall(FILES\n  ${PROJECT_BINARY_DIR}/ONNXConfigVersion.cmake\n  ${PROJECT_BINARY_DIR}/ONNXConfig.cmake\n  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/ONNX\n  COMPONENT dev)\ninstall(EXPORT ONNXTargets\n  DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/ONNX\"\n  NAMESPACE ONNX::\n)\nif(NOT Build_Protobuf)\n  # If we fetched a Protobuf release (and didn't run its install step), then we\n  # don't have the export sets for Protobuf and its dependencies, which\n  # prevents us from creating an export set for ONNXTargets.\n  export(EXPORT ONNXTargets\n    FILE \"${PROJECT_BINARY_DIR}/ONNXTargets.cmake\"\n    NAMESPACE ONNX::\n  )\nendif()\n\nif(ONNX_USE_UNITY_BUILD)\n  # If ONNX_USE_UNITY_BUILD is set to ON, set ONNX target to use Unity builds.\n  #  We set Unity build to use groups, it allows us to set some specific files to be compiled individually\n  set_target_properties(onnx\n    PROPERTIES\n      UNITY_BUILD ON\n      UNITY_BUILD_MODE GROUP\n  )\n\n  set(NEW_LIST __unity_src_files)\n  list(APPEND __unity_src_files ${ONNX_SRCS})\n  # These files have an issue with template explicit specialization after instantiation:\n  #   We take them out of the unity group so they are compiled individually.\n  list(REMOVE_ITEM __unity_src_files \"${ONNX_ROOT}/onnx/defs/schema.cc\")\n  list(REMOVE_ITEM __unity_src_files \"${ONNX_ROOT}/onnx/defs/tensor_proto_util.cc\")\n  set_source_files_properties(${__unity_src_files} PROPERTIES UNITY_GROUP \"Unity_Group\" )\n\n  # With unity build object file could get big, need this switch in MSVC.\n  if(MSVC)\n    target_compile_options(onnx PRIVATE /bigobj)\n  endif()\n\n# should be enabled for onnx_proto when protobuf can support Unity builds\n\nendif()\n\n\n\ninstall(TARGETS\n  onnx onnx_proto\n  EXPORT ONNXTargets DESTINATION ${CMAKE_INSTALL_LIBDIR})\n\nif(ONNX_BUILD_TESTS)\n  include(${ONNX_ROOT}/cmake/unittest.cmake)\nendif()\n\ninclude(cmake/summary.cmake)\nonnx_print_configuration_summary()\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.6044921875,
          "content": "* @onnx/sig-archinfra-approvers\n/community  @onnx/steering-committee\n/onnx/defs  @onnx/sig-operators-approvers\n/onnx/defs/parser.* @onnx/sig-archinfra-approvers\n/onnx/defs/printer.* @onnx/sig-archinfra-approvers\n/onnx/backend/test  @onnx/sig-operators-approvers\n/onnx/reference/ops @onnx/sig-operators-approvers\n/docs/AddNewOp.md @onnx/sig-operators-approvers\n/docs/TestCoverage*.md  @onnx/sig-operators-approvers\n/docs/Operators*.md @onnx/sig-operators-approvers\n/docs/OpConventions.md @onnx/sig-operators-approvers\n/docs/Broadcasting.md @onnx/sig-operators-approvers\n/docs/Changelog*.md @onnx/sig-operators-approvers\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.07421875,
          "content": "The ONNX Code Of Conduct is described at https://onnx.ai/codeofconduct.html\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.39453125,
          "content": "<!--\nCopyright (c) ONNX Project Contributors\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n# ONNX Community Involvement and Contribution Guidelines\n\nONNX is a community project and we welcome your contributions! In addition to contributing code, you can also contribute in many other ways:\n\n- Meetings and Discussions\n\n    Join SIGS, Working Groups, Community meetings to learn about what is needed and then where there is a good fit to interest and areas of expertise, find ways to actively contribute.  Participate in [ONNX technical discussions](https://github.com/onnx/onnx/discussions) on GitHub.  Join the ONNX Slack channels at LF AI and Data, help answer questions and welcome new members.\n\n- Use Cases and Tools\n\n    Develop use cases for ONNX and advocate for ONNX in developer conferences and meetups.  Develop tools that import and export using the ONNX spec, and help grow the community of ONNX users.  Become a champion for ONNX in your company or organization.\n\n- Roadmap and Features\n\n    Understand the ONNX roadmap document, feature priorities, and help implement them.  Become an ONNX code and documentation contributor, and work towards committer status on important repos.\n\n- Releases and Model Zoo\n\n    Help in achieving a release of ONNX, including increasing the number of models in the ONNX Model Zoo that exercise ONNX features.\n\n- Publications and Blogs\n\n    Add to the growing number of arXiv papers that refer to ONNX.  Create blogs, presentations, books, articles and other materials that help increase the adoption of ONNX, and grow the community of users and contributors.\n\n- Steering Committee\n\n    Attend ONNX Steering Committee meetings - they are open to all in the community. Help out where needed and appropriate on SC to-do items. Note that SIG and Working Groups leaders as well as others with demonstrated commitment and contributions to ONNX community may want to self-nominate during the annual SC election cycle.\n\n## Adding a new operator or creating a new version of an existing operator\n\nONNX is an open standard, and we encourage developers to contribute high\nquality operators to ONNX specification.\n\nBefore proposing a new operator, please read [the tutorial](docs/AddNewOp.md).\n\n## Contributing code\n\nYou can submit a pull request (PR) with your code. The [SIG](community/sigs.md) or [Working Group](community/working-groups.md) that is responsible for the area of the project your PR touches will review it and merge once any comments are addressed.\n\n### Development\n\nTo build ONNX from source please follow the instructions listed [here](https://github.com/onnx/onnx#build-onnx-from-source).\n\nThen, after you have made changes to Python and C++ files:\n\n- `Python files`: The changes are effective immediately in your installation. You don't need to install these again.\n- `C++ files`: You need to install these again to trigger the native extension build.\n\nAssuming build succeed in the initial step, simply running\n\n```sh\npip install -e . -v\n```\n\nfrom onnx root dir should work.\n\n### Folder structure\n\n- `onnx/`: the main folder that all code lies under\n  - `onnx.proto`: the protobuf that contains all the structures\n  - `checker.py`: a utility to check whether a serialized ONNX proto is legal\n  - `shape_inference.py`: a utility to infer types and shapes for ONNX models\n  - `version_converter.py`: a utility to upgrade or downgrade version for ONNX models\n  - `parser.py`: a utility to create an ONNX model or graph from a textual representation\n  - `hub.py`: a utility for downloading models from [ONNX Model Zoo](https://github.com/onnx/models)\n  - `compose.py`: a utility to merge ONNX models\n  - `helper.py`: tools for graph operation\n  - `defs/`: a subfolder that defines the ONNX operators\n  - `test/`: test files\n\n### Generated operator documentation\n\nOperator docs ([Operators.md](Operators.md), [Operators-ml.md](Operators-ml.md)) and Changelog docs ([Changelog.md](Changelog.md), [Changelog-ml.md](Changelog-ml.md)) are automatically generated based on C++ operator definitions and backend Python snippets. To refresh all these docs, run the following commands from the repo root and commit the results by setting \"ONNX_ML=1\". By contrast, setting `ONNX_ML=0` will only update `Operators.md` and `Changelog.md`.\n\n```pwsh\n# Windows\nset ONNX_ML=1\n```\n\n```sh\n# UNIX\nexport ONNX_ML=1\npip install -e . -v\npython onnx/defs/gen_doc.py\n```\n\n### Coding style\n\nWe use `lintrunner` to drive multiple linters defined in `.lintrunner.toml` to lint the codebase.\n\nTo run these checks locally, install `lintrunner` and the linters with\n\n```sh\npip install lintrunner lintrunner-adapters\nlintrunner init\n```\n\nThen lint with\n\n```sh\nlintrunner\n```\n\nformat with\n\n```sh\n# Display all lints and apply the fixes\nlintrunner -a\n# Or apply fixes only (faster)\nlintrunner f\n```\n\nRun `lintrunner --help` and see the `.lintrunner.toml` file for more usage examples, as well as instructions on how to adopt new linters.\n\n### Testing\n\nONNX uses [pytest](https://docs.pytest.org) as a test driver. To run tests, you'll first need to install pytest:\n\n```sh\npip install pytest nbval\n```\n\nAfter installing pytest, run from the root of the repo:\n\n```sh\npytest\n```\n\nto run the tests.\n\n<!-- TODO(justinchuby): Get rid of the need for manually running stat_coverage -->\n\nYou'll need to regenerate test coverage too, by running this command from the root of the repo:\n\n```sh\npython onnx/backend/test/stat_coverage.py\n```\n\n#### Cpp tests (googletest)\n\nSome functionalities are tested with googletest. Those tests are listed in `test/cpp`, and include tests for shape inference, data propagation, parser, and others.\n\nTo run them, first build ONNX with `-DONNX_BUILD_TESTS=1` or `ONNX_BUILD_TESTS=1 pip install -e . -v`.\n\n##### Linux and MacOS\n\nThe cpp tests require dynamically linking to built libraries.\n\n```sh\nexport LD_LIBRARY_PATH=\"./.setuptools-cmake-build/:$LD_LIBRARY_PATH\"\n.setuptools-cmake-build/onnx_gtests\n```\n\n##### Windows\n\n```pwsh\n# If you set DEBUG=1, use `.setuptools-cmake-build\\Debug\\onnx_gtests.exe` instead\n.setuptools-cmake-build\\Release\\onnx_gtests.exe\n```\n\n### DCO\n\nONNX has adopted the [DCO](https://en.wikipedia.org/wiki/Developer_Certificate_of_Origin). All code repositories under ONNX require a DCO. (ONNX previously used a CLA, which is being replaced with the DCO.)\n\nDCO is provided by including a sign-off-by line in commit messages. Using the `-s` flag for `git commit` will automatically append this line. For example, running `git commit -s -m 'commit info.'` it will produce a commit that has the message `commit info. Signed-off-by: My Name <my_email@my_company.com>`. The DCO bot will ensure commits are signed with an email address that matches the commit author before they are eligible to be merged.\n\nIf you are using a GUI like the GitHub web site or GitHub Desktop, you'll need to append the `Signed-off-by: My Name <my_email@my_company.com>` manually to each commit message. For the onnx organization [sign-off](https://github.blog/changelog/2022-06-08-admins-can-require-sign-off-on-web-based-commits/) for web based commits is enabled. When this is activated you will see \"Sign off and propose changes\" instead of \"Propose changes\" when you are editing files directly at github. It is recommended to set this setting for your own fork as well. Since in the review process commits are made on this fork.\n\nNOTE: the sign-off is needed for each commit in the PR, not at the PR level.\n\nIf you have old commits that are not signed, use the following commands to squash the old PR (original branch) into a single commit. This is an easier way to signoff old commits in old PR.\n\n```bash\ngit checkout main\ngit checkout -b temporary_patch              # create a new branch as temporary\ngit merge --squash original_patch            # copy from old branch\ngit branch -d original_patch                 # remove old branch\ngit checkout -b original_patch               # create a new branch with the same name (override)\ngit commit -m 'type your own commit msg' -s  # signoff that single commit\ngit push origin original_patch -f            # forcibly override the old branch`\n```\n\n## CI Pipelines\n\nEvery PR needs to pass CIs before merge. CI pipelines details are [here](docs/CIPipelines.md).\n\n## Other developer documentation\n\n- [How to implement ONNX backend (ONNX to something converter)](docs/ImplementingAnOnnxBackend.md)\n- [Backend test infrastructure and how to add tests](docs/OnnxBackendTest.md)\n\n## License\n\n[Apache License v2.0](/LICENSE)\n\n## Code of Conduct\n\n[ONNX Open Source Code of Conduct](http://onnx.ai/codeofconduct.html)\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 8.796875,
          "content": "<!--\nCopyright (c) ONNX Project Contributors\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n# Installation\n\n## Official Python packages\n\nONNX released packages are published in PyPi.\n\n```sh\npip install onnx  # or pip install onnx[reference] for optional reference implementation dependencies\n```\n\n[ONNX weekly packages](https://pypi.org/project/onnx-weekly/) are published in PyPI to enable experimentation and early testing.\n\n## vcpkg packages\n\nONNX is in the maintenance list of [vcpkg](https://github.com/microsoft/vcpkg), you can easily use vcpkg to build and install it.\n\n```sh\ngit clone https://github.com/microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.bat # For powershell\n./bootstrap-vcpkg.sh # For bash\n./vcpkg install onnx\n```\n\n## Conda packages\n\nA binary build of ONNX is available from [Conda](https://conda.io), in [conda-forge](https://conda-forge.org/):\n\n```sh\nconda install -c conda-forge onnx\n```\n\n## Build ONNX from Source\n\nBefore building from source uninstall any existing versions of ONNX `pip uninstall onnx`.\n\nC++17 or higher C++ compiler version is required to build ONNX from source. Still, users can specify their own `CMAKE_CXX_STANDARD` version for building ONNX.\n\nIf you don't have Protobuf installed, ONNX will internally download and build Protobuf for ONNX build.\n\nOr, you can manually install [Protobuf C/C++ libraries and tools](https://github.com/protocolbuffers/protobuf) with specified version before proceeding forward. Then depending on how you installed Protobuf, you need to set environment variable CMAKE_ARGS to \"-DONNX_USE_PROTOBUF_SHARED_LIBS=ON\" or \"-DONNX_USE_PROTOBUF_SHARED_LIBS=OFF\". For example, you may need to run the following command:\n\nLinux:\n\n```sh\nexport CMAKE_ARGS=\"-DONNX_USE_PROTOBUF_SHARED_LIBS=ON\"\n```\n\nWindows:\n\n```bat\nset CMAKE_ARGS=\"-DONNX_USE_PROTOBUF_SHARED_LIBS=ON\"\n```\n\nThe ON/OFF depends on what kind of Protobuf library you have. Shared libraries are files ending with \\*.dll/\\*.so/\\*.dylib. Static libraries are files ending with \\*.a/\\*.lib. This option depends on how you get your Protobuf library and how it was built. And it is default OFF. You don't need to run the commands above if you'd prefer to use a static Protobuf library.\n\n### Windows\n\nIf you are building ONNX from source, it is recommended that you also build Protobuf locally as a static library. The version distributed with conda-forge is a DLL, but ONNX expects it to be a static library. Building Protobuf locally also lets you control the version of Protobuf. The tested and recommended version is 3.21.12.\n\nThe instructions in this README assume you are using Visual Studio. It is recommended that you run all the commands from a shell started from \"x64 Native Tools Command Prompt for VS 2019\" and keep the build system generator for cmake (e.g., cmake -G \"Visual Studio 16 2019\") consistent while building Protobuf as well as ONNX.\n\nYou can get Protobuf by running the following commands:\n\n```bat\ngit clone https://github.com/protocolbuffers/protobuf.git\ncd protobuf\ngit checkout v5.29.2\ncd cmake\ncmake -G \"Visual Studio 16 2019\" -A x64 -DCMAKE_INSTALL_PREFIX=<protobuf_install_dir> -Dprotobuf_MSVC_STATIC_RUNTIME=OFF -Dprotobuf_BUILD_SHARED_LIBS=OFF -Dprotobuf_BUILD_TESTS=OFF -Dprotobuf_BUILD_EXAMPLES=OFF .\ncmake --build . --config Release --target install\n```\n\nThen it will be built as a static library and installed to <protobuf_install_dir>. Please add the bin directory(which contains protoc.exe) to your PATH.\n\n```bat\nset CMAKE_PREFIX_PATH=<protobuf_install_dir>;%CMAKE_PREFIX_PATH%\n```\n\nPlease note: if your protobuf_install_dir contains spaces, **do not** add quotation marks around it.\n\nAlternative: if you have local Protobuf executable and want to use it for ONNX, you can set ONNX_PROTOC_EXECUTABLE instead.\n\n```bat\nset CMAKE_ARGS=-DONNX_PROTOC_EXECUTABLE=<full_path_to_protoc.exe>\n```\n\nThen you can build ONNX as:\n\n```\ngit clone https://github.com/onnx/onnx.git\ncd onnx\ngit submodule update --init --recursive\n# prefer lite proto\nset CMAKE_ARGS=-DONNX_USE_LITE_PROTO=ON\npip install -e . -v\n```\n\n### Linux\n\nFirst, you need to install Protobuf. The minimum Protobuf compiler (protoc) version required by ONNX is 3.20.2. Please note that old protoc versions might not work with `CMAKE_ARGS=-DONNX_USE_LITE_PROTO=ON`.\n\nUbuntu 20.04 (and newer) users may choose to install Protobuf via\n\n```sh\napt-get install python3-pip python3-dev libprotobuf-dev protobuf-compiler\n```\nIn this case, ONNX is able to detect and use the system Profobuf. Users of other Linux distributions can use their system package manager to install Profobuf libraries similarly.\n\nA more general way is to build and install it from source. See the instructions below for more details.\n\n<details>\n  <summary> Installing Protobuf from source </summary>\n\n```sh\n  git clone https://github.com/protocolbuffers/protobuf.git\n  cd protobuf\n  git checkout v5.29.2\n  git submodule update --init --recursive\n  mkdir build_source && cd build_source\n  cmake -Dprotobuf_BUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=/usr -Dprotobuf_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=ON ..\n  cmake --build . --target install\n```\n\n  Here \"-DCMAKE_POSITION_INDEPENDENT_CODE=ON\" is crucial. By default static libraries are built without \"-fPIC\" flag, they are not position independent code. But shared libraries must be position independent code. Python C/C++ extensions(like ONNX) are shared libraries. So if a static library was not built with \"-fPIC\", it can't be linked to such a shared library.\n\n  Once build is successful, update PATH to include Protobuf paths so that ONNX can find Protobuf.\n\n</details>\n\nThen you can build ONNX as:\n\n```sh\ngit clone https://github.com/onnx/onnx.git\ncd onnx\ngit submodule update --init --recursive\n# Optional: prefer lite proto\nexport CMAKE_ARGS=-DONNX_USE_LITE_PROTO=ON\npip install -e . -v\n```\n\n### Mac\n\n```sh\nbrew update\nbrew install cmake\ngit clone https://github.com/protocolbuffers/protobuf.git\ncd protobuf\ngit checkout v5.29.2\ngit submodule update --init --recursive\nmkdir build_source && cd build_source\ncmake -Dprotobuf_BUILD_SHARED_LIBS=OFF -Dprotobuf_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=ON ..\ncmake --build . --target install\n```\n\nOnce build is successful, update PATH to include Protobuf paths so that ONNX can find Protobuf.\n\nThen you can build ONNX as:\n\n```sh\ngit clone --recursive https://github.com/onnx/onnx.git\ncd onnx\n# Optional: prefer lite proto\nset CMAKE_ARGS=-DONNX_USE_LITE_PROTO=ON\npip install -e . -v\n```\n\n## Verify Installation\n\nAfter installation, run\n\n```sh\npython -c \"import onnx\"\n```\n\nto verify it works.\n\n## Common Build Options\n\nFor full list refer to CMakeLists.txt\n\n### Environment variables\n\n* `USE_MSVC_STATIC_RUNTIME` should be 1 or 0, not ON or OFF. When set to 1 ONNX links statically to runtime library.\n**Default**: `USE_MSVC_STATIC_RUNTIME=0`\n\n* `DEBUG` should be 0 or 1. When set to 1 ONNX is built in debug mode. For debug versions of the dependencies, you need to open the [CMakeLists file](https://github.com/onnx/onnx/blob/main/CMakeLists.txt) and append a letter `d` at the end of the package name lines. For example, `NAMES protobuf-lite` would become `NAMES protobuf-lited`.\n**Default**: `Debug=0`\n\n### CMake variables\n\n* `ONNX_USE_PROTOBUF_SHARED_LIBS` should be `ON` or `OFF`.\n**Default**: `ONNX_USE_PROTOBUF_SHARED_LIBS=OFF USE_MSVC_STATIC_RUNTIME=0`\n`ONNX_USE_PROTOBUF_SHARED_LIBS` determines how ONNX links to Protobuf libraries.\n  * When set to `ON` - ONNX will dynamically link to Protobuf shared libs, PROTOBUF_USE_DLLS will be defined as described [here](https://github.com/protocolbuffers/protobuf/blob/main/cmake/README.md#dlls-vs-static-linking).\n  * When set to `OFF` - ONNX will link statically to Protobuf.\n\n* `ONNX_USE_LITE_PROTO` should be `ON` or `OFF`. When set to `ON` ONNX uses lite Protobuf instead of full Protobuf.\n**Default**: `ONNX_USE_LITE_PROTO=OFF`\n\n* `ONNX_WERROR` should be `ON` or `OFF`. When set to `ON` warnings are treated as errors.\n**Default**: `ONNX_WERROR=OFF` in local builds, `ON` in CI and release pipelines.\n\n## Common Errors\n\n* Note: the `import onnx` command does not work from the source checkout directory; in this case you'll see `ModuleNotFoundError: No module named 'onnx.onnx_cpp2py_export'`. Change into another directory to fix this error.\n\n* If you run into any issues while building Protobuf as a static library, please ensure that shared Protobuf libraries, like libprotobuf, are not installed on your device or in the conda environment. If these shared libraries exist, either remove them to build Protobuf from source as a static library, or skip the Protobuf build from source to use the shared version directly.\n\n* If you run into any issues while building ONNX from source, and your error message reads, `Could not find pythonXX.lib`, ensure that you have consistent Python versions for common commands, such as `python` and `pip`. Clean all existing build files and rebuild ONNX again.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSES",
          "type": "tree",
          "content": null
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.201171875,
          "content": "recursive-include third_party *\ninclude LICENSE\nrecursive-include cmake *\nrecursive-include tools *\ninclude VERSION_NUMBER\ninclude CMakeLists.txt\ninclude requirements.txt\ninclude requirements-reference.txt\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.0185546875,
          "content": "<!--\nCopyright (c) ONNX Project Contributors\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n<p align=\"center\"><img width=\"40%\" src=\"https://github.com/onnx/onnx/raw/main/docs/onnx-horizontal-color.png\" /></p>\n\n[![PyPI - Version](https://img.shields.io/pypi/v/onnx.svg)](https://pypi.org/project/onnx)\n[![CI](https://github.com/onnx/onnx/actions/workflows/main.yml/badge.svg)](https://github.com/onnx/onnx/actions/workflows/main.yml)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/3313/badge)](https://bestpractices.coreinfrastructure.org/projects/3313)\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/onnx/onnx/badge)](https://api.securityscorecards.dev/projects/github.com/onnx/onnx)\n[![REUSE compliant](https://api.reuse.software/badge/github.com/onnx/onnx)](https://api.reuse.software/info/github.com/onnx/onnx)\n[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)\n[![Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n[Open Neural Network Exchange (ONNX)](https://onnx.ai) is an open ecosystem that empowers AI developers\nto choose the right tools as their project evolves. ONNX provides an open source format for AI models, both deep learning and traditional ML. It defines an extensible computation graph model, as well as definitions of built-in operators and standard\ndata types. Currently we focus on the capabilities needed for inferencing (scoring).\n\nONNX is [widely supported](http://onnx.ai/supported-tools) and can be found in many frameworks, tools, and hardware. Enabling interoperability between different frameworks and streamlining the path from research to production helps increase the speed of innovation in the AI community. We invite the community to join us and further evolve ONNX.\n\n# Use ONNX\n\n* [Documentation of ONNX Python Package](https://onnx.ai/onnx/)\n* [Tutorials for creating ONNX models](https://github.com/onnx/tutorials)\n* [Pre-trained ONNX models](https://github.com/onnx/models)\n\n# Learn about the ONNX spec\n\n* [Overview](https://github.com/onnx/onnx/blob/main/docs/Overview.md)\n* [ONNX intermediate representation spec](https://github.com/onnx/onnx/blob/main/docs/IR.md)\n* [Versioning principles of the spec](https://github.com/onnx/onnx/blob/main/docs/Versioning.md)\n* [Operators documentation](https://github.com/onnx/onnx/blob/main/docs/Operators.md)\n* [Operators documentation](https://onnx.ai/onnx/operators/index.html) (latest release)\n* [Python API Overview](https://github.com/onnx/onnx/blob/main/docs/PythonAPIOverview.md)\n\n# Programming utilities for working with ONNX Graphs\n\n* [Shape and Type Inference](https://github.com/onnx/onnx/blob/main/docs/ShapeInference.md)\n* [Graph Optimization](https://github.com/onnx/optimizer)\n* [Opset Version Conversion](https://github.com/onnx/onnx/blob/main/docs/docsgen/source/api/version_converter.md)\n\n# Contribute\n\nONNX is a community project and the open governance model is described [here](https://github.com/onnx/onnx/blob/main/community/readme.md). We encourage you to join the effort and contribute feedback, ideas, and code. You can participate in the [Special Interest Groups](https://github.com/onnx/onnx/blob/main/community/sigs.md) and [Working Groups](https://github.com/onnx/onnx/blob/main/community/working-groups.md) to shape the future of ONNX.\n\nCheck out our [contribution guide](https://github.com/onnx/onnx/blob/main/CONTRIBUTING.md) to get started.\n\nIf you think some operator should be added to ONNX specification, please read\n[this document](https://github.com/onnx/onnx/blob/main/docs/AddNewOp.md).\n\n# Community meetings\n\nThe schedules of the regular meetings of the Steering Committee, the working groups and the SIGs can be found [here](https://onnx.ai/calendar)\n\nCommunity Meetups are held at least once a year. Content from previous community meetups are at:\n\n* 2020.04.09 <https://wiki.lfaidata.foundation/display/DL/LF+AI+Day+-ONNX+Community+Virtual+Meetup+-+Silicon+Valley+-+April+9>\n* 2020.10.14 <https://wiki.lfaidata.foundation/display/DL/LF+AI+Day+-+ONNX+Community+Workshop+-+October+14>\n* 2021.03.24 <https://wiki.lfaidata.foundation/pages/viewpage.action?pageId=35160391>\n* 2021.10.21 <https://wiki.lfaidata.foundation/pages/viewpage.action?pageId=46989689>\n* 2022.06.24 <https://wiki.lfaidata.foundation/display/DL/ONNX+Community+Day+-+June+24>\n* 2023.06.28 <https://wiki.lfaidata.foundation/display/DL/ONNX+Community+Day+2023+-+June+28>\n\n# Discuss\n\nWe encourage you to open [Issues](https://github.com/onnx/onnx/issues), or use [Slack](https://lfaifoundation.slack.com/) (If you have not joined yet, please use this [link](https://join.slack.com/t/lfaifoundation/shared_invite/zt-o65errpw-gMTbwNr7FnNbVXNVFkmyNA) to join the group) for more real-time discussion.\n\n# Follow Us\n\nStay up to date with the latest ONNX news. [[Facebook](https://www.facebook.com/onnxai/)] [[Twitter](https://twitter.com/onnxai)]\n\n# Roadmap\n\nA roadmap process takes place every year. More details can be found [here](https://github.com/onnx/steering-committee/tree/main/roadmap)\n\n# Installation\n\nONNX released packages are published in PyPi.\n\n```sh\npip install onnx # or pip install onnx[reference] for optional reference implementation dependencies\n```\n\n[ONNX weekly packages](https://pypi.org/project/onnx-weekly/) are published in PyPI to enable experimentation and early testing.\n\nDetailed install instructions, including Common Build Options and Common Errors can be found [here](https://github.com/onnx/onnx/blob/main/INSTALL.md)\n\n# Testing\n\nONNX uses [pytest](https://docs.pytest.org) as test driver. In order to run tests, you will first need to install `pytest`:\n\n```sh\npip install pytest nbval\n```\n\nAfter installing pytest, use the following command to run tests.\n\n```sh\npytest\n```\n\n# Development\n\nCheck out the [contributor guide](https://github.com/onnx/onnx/blob/main/CONTRIBUTING.md) for instructions.\n\n# License\n\n[Apache License v2.0](LICENSE)\n\n# Code of Conduct\n\n[ONNX Open Source Code of Conduct](https://onnx.ai/codeofconduct.html)\n"
        },
        {
          "name": "RELEASE-MANAGEMENT.md",
          "type": "blob",
          "size": 3.291015625,
          "content": "<!--\nCopyright (c) ONNX Project Contributors\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n# ONNX release management\n\nThis describes the process by which versions of ONNX are officially released to the public.\n\nReleases\n--------\n\nReleases are versioned according to [ONNX Versioning](docs/Versioning.md). This describes IR and operator versioning policies, as well as propose how models themselves should be versioned.\n\nOn a regular basis, new versions of ONNX are published, representing the aggregate of changes in the IR and operator sets. Such releases use semantic versioning to describe the progression of the standard.\n\nThe GitHub repo for ONNX provides release branches where the project is stabilized as per the process described here. Release notes are used to communicate the stability and status of a release. The main branch will be used to continue work for subsequent releases.\n\nMajor, minor and patch releases will have branch names and version numbers reflecting the nature of the change as per semantic versioning definitions.\n\nWorkflow\n--------\n\nThe following workflow describes the steps taken to release an update of ONNX,\nand can be undertaken regardless of whether a major, minor or patch release is\nto be produced.\n\n- The trigger for the workflow will typically be a time-based trigger based on\n  elapsed time (say every three months), but for the first release, we will\n  start the process in early November 2017.\n\n- The release manager will announce the intent of the process (to produce a\n  major, minor or patch update) and the overall timeline. A release branch is\n  created with the name rel-major#.minor#(.patch#), and any version\n  references in build scripts or version checks are updated.\n\n- The release manager announces the initial commit for testing. The first\n  period lasts a week; any regressions found should be fixed, typically via\n  the main branch. Incomplete features should be done or excised during this\n  period. A distribution can be made available with an -RC1 suffix.\n\n- The release manager announces a second round of testing (unless it's only a\n  patch update with no regressions found). Only critical bugs are fixed at\n  this point, or those introduced by patches from the first week. A third\n  weeek may be introduced at the release manager's discretion if significant\n  fixes need to be taken. Distributions with -RCn suffixes can be made\n  available if convenient.\n\n- Release notes are updated with final changes, and a file with sources is\n  provided along with a release on the GitHub project page.\n\nTesting\n-------\n\nThe release process really consists of communicating, testing to establish a\nknown state of the project, and distributing files. This section deals with\nthe second task.\n\nAt the very least, the tests that are part of the /test folder should be run\nunder a variety of configurations. Issues fixed should ensure coverage in this\nsuite to avoid regressions.\n\nSend a Pull Request for updates to this section to include a configuration you\ncan help test if you care about one that's missing.\n\nThe community is encouraged to perform additional testing during the test\nperiods. Bugs and issues should be filed in the ONNX GitHub repo.\n\nDistribution\n------------\n\nThe distribution of files follows the basic procedures described in\n[Creating Releases](https://help.github.com/articles/creating-releases/).\n"
        },
        {
          "name": "REUSE.toml",
          "type": "blob",
          "size": 7.17578125,
          "content": "# Copyright (c) ONNX Project Contributors\n#\n# SPDX-License-Identifier: Apache-2.0\n\nversion = 1\nSPDX-PackageName = \"onnx\"\nSPDX-PackageSupplier = \"onnx-technical-discuss@lists.lfaidata.foundation\"\nSPDX-PackageDownloadLocation = \"onnx.ai\"\n\n[[annotations]]\npath = \"codecov.yml\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = [\".github/**/**.md\", \".github/pull_request_template.md\"]\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = \".github/**/**.yml\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = \"onnx/backend/test/data/simple/**/test_data_set_0/**pb\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = \"onnx/backend/test/data/node/**/test_data_set_0/**.pb\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = \"onnx/backend/test/data/simple/**/**.onnx\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = \"onnx/backend/test/data/pytorch-operator/**/test_data_set_0/**.pb\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = \"onnx/backend/test/data/pytorch-operator/**/**.onnx\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = \"onnx/backend/test/data/pytorch-operator/**/**.pb\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = \"onnx/backend/test/data/node/**/**.onnx\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = \"onnx/backend/test/data/pytorch-converted/**/test_data_set_0/**.pb\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = \"onnx/backend/test/data/light/**.onnx\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = \"onnx/backend/test/data/light/**.pb\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = \"onnx/backend/test/data/real/**/**.json\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = \"onnx/backend/test/data/pytorch-converted/**/**.onnx\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = \"onnx/backend/test/data/light/light/**.onnx\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = [\"onnx/onnx-operators**\", \"onnx/onnx-ml**\", \"onnx/onnx-data**\", \"onnx/onnx**\"]\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = [\"docs/docsgen/source/api/**md\", \"docs/docsgen/source/_static/**\", \"docs/docsgen/source/requirements.txt\", \"docs/docsgen/source/onnx-favicon.png\"]\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = \"docs/Change**.md\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = \"docs/Test**.md\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = \"docs/Operator**.md\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = [\".gitignore\", \"**/**/.gitignore\", \".gitmodules\", \".lintrunner.toml\", \".gitattributes\", \".git-blame-ignore-revs\", \".clang**\", \".editorconfig\"]\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = [\"docs/docsgen/source/intro/images/**\", \"docs/docsgen/source/intro/**md\"]\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = [\"examples/**ipynb\", \"examples/resources/**\"]\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = [\"MANIFEST.in\", \"VERSION_NUMBER\", \"CODE_OF_CONDUCT.md\", \"CODEOWNERS\", \"pyproject**.toml\", \"requirements**.txt\"]\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = [\"onnx/onnx_cpp2py_export/**pyi\", \"onnx/py.typed\"]\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = [\"onnx/defs/**/**.cc\", \"onnx/defs/**/**.h\"]\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = \"onnx/reference/ops/aionnxml/**py\"\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = [\"onnx/defs/**.cc\", \"onnx/defs/**.h\"]\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = [\"cmake/ONNXConfig**.in\", \"CMakeLists.txt\", \"cmake/**cmake\", \"cmake/\"]\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = [\".vscode/settings.json\", \"docs/docsgen/source/_templates/layout.html\", \"docs/docsgen/source/_templates/sidebar-nav-bs.html\", \"docs/images/onnx_hub_arch.svg\", \"docs/onnx-horizontal-color.png\", \"tools/protoc-gen-mypy.sh.in\"]\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = [\"onnx/gen_proto.py\", \"tools/protoc-gen-mypy.bat\", \"onnx/reference/op_run.py\"]\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n\n[[annotations]]\npath = [\"onnx/backend/sample/ops/abs.py\", \"onnx/gen_proto.py\"]\nprecedence = \"aggregate\"\nSPDX-FileCopyrightText = \"Copyright (c) ONNX Project Contributors\"\nSPDX-License-Identifier = \"Apache-2.0\"\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.94140625,
          "content": "<!--\nCopyright (c) ONNX Project Contributors\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n# Security Policy\n\n## Reporting a Vulnerability\nIf you think you have found a security vulnerability, please send a report to onnx-security@lists.lfaidata.foundation. Please do not post security vulnerabilities on Slack.\n\nWe don't currently have a PGP key, unfortunately.\n\nAn ONNX committer will send you a response indicating the next steps in handling your report. After the initial reply to your report, the committer will keep you informed of the progress towards a fix and full announcement, and may ask for additional information or guidance.\n\nImportant: Please don't disclose the vulnerability before it has been fixed and announced, to protect our users.\n\n## Security announcements\nPlease subscribe to the [announcements mailing list](https://lists.lfaidata.foundation/g/onnx-announce), where we post notifications and remediation details for security vulnerabilities.\n"
        },
        {
          "name": "VERSION_NUMBER",
          "type": "blob",
          "size": 0.0068359375,
          "content": "1.18.0\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.126953125,
          "content": "coverage:\n  status:\n    project:\n      default:\n        informational: true\n    patch:\n      default:\n        informational: true\n"
        },
        {
          "name": "community",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "onnx",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 6.822265625,
          "content": "# SPDX-License-Identifier: Apache-2.0\n\n[build-system]\nrequires = [\"setuptools>=64\", \"protobuf>=3.20.2\", \"cmake>=3.18\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"onnx\"\ndynamic = [\"version\", \"dependencies\", \"optional-dependencies\"]\ndescription = \"Open Neural Network Exchange\"\nreadme = \"README.md\"\nauthors = [\n    {name = \"ONNX Contributors\", email = \"onnx-technical-discuss@lists.lfaidata.foundation\"},\n]\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n]\nlicense = {text = \"Apache License v2.0\"}\nrequires-python = \">=3.9\"\n\n[project.urls]\nHomepage = \"https://onnx.ai/\"\nRepository = \"https://github.com/onnx/onnx\"\n\n[project.scripts]\nbackend-test-tools = \"onnx.backend.test.cmd_tools:main\"\ncheck-model = \"onnx.bin.checker:check_model\"\ncheck-node = \"onnx.bin.checker:check_node\"\n\n[tool.setuptools.dynamic]\ndependencies = {file = \"requirements.txt\"}\n\n[tool.setuptools.dynamic.optional-dependencies]\nreference = {file = \"requirements-reference.txt\"}\n\n[tool.setuptools.packages.find]\ninclude = [\"onnx*\"]\n\n[tool.setuptools.package-data]\nonnx = [\n    \"**/*.c\",\n    \"**/*.cc\",\n    \"**/*.h\",\n    \"**/*.proto\",\n    \"**/*.pyi\",\n    \"backend/test/data/**/*\",\n    \"py.typed\",\n]\n\n[tool.pytest.ini_options]\n\naddopts = \"--nbval --nbval-current-env --tb=short --color=yes\"\ntestpaths = [\n    \"onnx/test\",\n    \"onnx/examples\",\n]\n\n[tool.mypy]\nfollow_imports = \"silent\"\nstrict_optional = true\nwarn_return_any = true\nwarn_no_return = true\n# TODO warn_unused_ignores = true\nwarn_redundant_casts = true\nwarn_incomplete_stub = true\n# TODO disallow_untyped_calls = true\ncheck_untyped_defs = true\n# Allow bare generics like np.ndarray\ndisallow_any_generics = false\nno_implicit_optional = true\n# TODO disallow_incomplete_defs = true\n# TODO disallow_subclassing_any = true\nwarn_unused_configs = true\nshow_error_codes = true\nshow_column_numbers = true\nignore_missing_imports = true\n# NOTE: Do not grow the exclude list. Edit .lintrunner.toml instead\nexclude = [\n    '^third_party',\n]\n\n# NOTE: Avoid adding overrides unless for exceptional cases. Prefer inline ignores.\n# If you must ignore error for the whole file, consider adapting the example\n# `# mypy: disable-error-code=\"misc,arg-type,type-arg\"`\n# and put this comment on the top of the file.\n[[tool.mypy.overrides]]\nmodule = [\n    'onnx.onnx_data_pb',\n    'onnx.onnx_data_pb2',\n    'onnx.onnx_pb',\n    'onnx.onnx_pb2',\n    'onnx.onnx_ml_pb2',\n    'onnx.onnx_operators_pb',\n    'onnx.onnx_operators_ml_pb2',\n]\nignore_errors = true\n\n[tool.black]\n# NOTE: Do not create an exclude list. Edit .lintrunner.toml instead\ntarget-version = [\"py39\", \"py310\", \"py311\"]\n\n[tool.isort]\n# NOTE: Do not create an exclude list. Edit .lintrunner.toml instead\nprofile = \"black\"\n\n[tool.pylint.message_control]\n# This list is for vscode. Add new disables in pyproject_pylint.toml for lintrunner and CI.\n# Exclude patterns should be modified in .lintrunner.toml\ndisable = [\n    \"format\",\n    \"import-error\",\n    \"line-too-long\",\n    \"no-name-in-module\",\n    \"use-dict-literal\",     # Dict literals are sometimes preferable when creating kwargs\n    \"useless-return\",\n]\n\n[tool.ruff]\n# NOTE: Do not create an exclude list. Edit .lintrunner.toml instead\ntarget-version = \"py39\"\nunsafe-fixes = true\nlint.select = [\n    \"A\", # flake8-builtins\n    \"ARG\", # flake8-unused-arguments\n    \"B\", # flake8-bugbear\n    \"BLE\", # flake8-blind-except\n    \"C4\", # flake8-comprehensions\n    \"D\", # pydocstyle\n    \"E\", # pycodestyle\n    \"F\", # Pyflakes\n    \"FA\", # flake8-future-annotations\n    \"G\", # flake8-logging-format\n    \"I\", # isort\n    \"ISC\", # flake8-implicit-str-concat\n    \"LOG\", # flake8-logging\n    \"N\", # pep8-naming\n    \"NPY\", # modern numpy\n    \"PERF\", # Perflint\n    \"PIE\", # flake8-pie\n    \"PL\", # pylint\n    \"PYI\", # flake8-pyi\n    \"RUF\", # Ruff-specific rules\n    \"SIM\", # flake8-simplify\n    \"SLOT\", # flake8-slot\n    \"T10\", # flake8-debugger\n    \"TID\", # Disallow relative imports\n    \"TRY\", # flake8-try-except-raise\n    \"UP\", # pyupgrade\n    \"W\", # pycodestyle\n    \"YTT\", # flake8-2020\n]\n# NOTE: Refrain from growing the ignore list unless for exceptional cases.\n# Always include a comment to explain why.\nlint.ignore = [\n    \"D1\", # D1 is for missing docstrings, which is not yet enforced.\n    \"D205\", # D205 Too strict. \"1 blank line required between summary line and description\"\n    \"D400\",\n    \"D415\",\n    \"E501\", # Line length controlled by black\n    \"N803\", # Argument casing\n    \"N806\", # Relax: Variable name in function should be lowercase\n    \"N999\", # Module names\n    \"NPY002\", # np.random.Generator may not be preferred in all cases\n    \"PLR0912\", # Too many branches\n    \"PLR0913\", # Too many arguments to function call\n    \"PLR0915\", # Too many statements\n    \"PYI011\", # Allow protobuf enums as defaults to function arguments\n    \"PYI021\", # Allow docstrings in pyi files\n    \"PYI041\", # int | float is sometimes more clear than float\n    \"RUF015\", # next(iter(...)) sometimes obscures the intent when we access the 0th element of a shape\n    \"RUF022\", # We may want to keep __all__ unsorted for better readability\n    \"SIM102\", # We don't perfer always combining if branches\n    \"SIM103\", # We don't always prefer combining if branches\n    \"SIM108\", # We don't always encourage ternary operators\n    \"SIM114\", # Don't always combine if branches for debugability\n    \"SIM116\", # Don't use dict lookup to replace if-else\n    \"TRY003\", # Messages can be constructed in the exception\n]\nlint.unfixable = [\n    \"SIM112\", # Envvars should not be modified\n]\n\n[tool.ruff.lint.flake8-builtins]\nbuiltins-ignorelist = [\"id\", \"input\"]\n\n[tool.ruff.lint.flake8-tidy-imports]\n# Disallow all relative imports.\nban-relative-imports = \"all\"\n\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n\n[tool.ruff.lint.isort]\nrequired-imports = [\"from __future__ import annotations\"]\n\n[tool.ruff.lint.per-file-ignores]\n\"**/*.pyi\" = [\"I002\"] # from __future__ import annotations` has no effect in stub files\n# NOTE: Refrain from growing the ignore list unless for exceptional cases.\n# Prefer inline ignores with `noqa: xxx`.\n# Eventually this list should become empty.\n\"**/*_test*\" = [\"N802\"] # Function casing\n\"onnx/backend/test/**\" = [\"PLR2004\"] # Magic numbers allowed in tests\n\"onnx/backend/test/case/**\" = [\"N802\"] # Function casing\n\"onnx/reference/ops/**\" = [\n    \"N801\", # Class casing\n    \"PLR2004\", # Magic numbers\n]\n\"onnx/reference/ops/_op_list.py\" = [\"F401\"]\n\"onnx/__init__.py\" = [\"F401\"]\n\"onnx/reference/__init__.py\" = [\"F401\"]\n\"onnx/reference/ops/__init__.py\" = [\"F401\"]\n\"onnx/reference/ops/aionnxml/_op_list.py\" = [\"F401\"]\n\"onnx/reference/ops/aionnxml/__init__.py\" = [\"F401\"]\n\"onnx/reference/ops/aionnx_preview_training/__init__.py\" = [\"F401\"]\n\"onnx/reference/ops/aionnx_preview_training/_op_list.py\" = [\"F401\"]\n\"onnx/reference/ops/experimental/__init__.py\" = [\"F401\"]\n\"onnx/test/reference_evaluator_test.py\"= [\"C408\"]  # dict(...) -> { ... }\n\"onnx/test/**\" = [\"PLR2004\"] # Magic numbers allowed in tests\n\"onnx/onnx_cpp2py_export/defs.pyi\" = [\"N802\"]\n"
        },
        {
          "name": "pyproject_pylint.toml",
          "type": "blob",
          "size": 0.8046875,
          "content": "# Relax pylint for lintrunner and CI.\n# Exclude patterns should be modified in .lintrunner.toml\n\n[tool.pylint.messages_control]\ndisable = [\n    \"arguments-differ\",  # The reference runtime tend to use inheritance and redefine methods.\n    \"cyclic-import\",\n    \"fixme\",\n    \"format\",\n    \"import-error\",\n    \"invalid-name\",  # TODO: Add naming guidance and enable this check.\n    \"line-too-long\",\n    \"missing-docstring\",\n    \"no-else-return\",\n    \"no-member\",\n    \"no-name-in-module\",\n    \"too-few-public-methods\",\n    \"too-many-arguments\",\n    \"too-many-instance-attributes\",\n    \"too-many-lines\",\n    \"too-many-locals\",\n    \"too-many-public-methods\",\n    \"too-many-return-statements\",\n    \"use-dict-literal\",  # Dict literals are sometimes preferable when creating kwargs\n    \"useless-return\",\n    \"wrong-import-order\",\n]\n"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.361328125,
          "content": "build\njupyter\nnbval\nnumpy\nparameterized\nprotobuf\npytest\npytest-cov\npytest-xdist\nsetuptools\ntwine\nwheel\nml_dtypes\n# Dependencies for linting. Versions match those in setup.py.\nlintrunner>=0.10.7\nlintrunner-adapters>=0.12.3\n# Edit additional linter dependencies in requirements-lintrunner.txt\n# Dependencies for the reference implementation.\n-r requirements-reference.txt\n"
        },
        {
          "name": "requirements-lintrunner.txt",
          "type": "blob",
          "size": 0.22265625,
          "content": "# This file is auto updated by dependabot\nlintrunner-adapters>=0.12.3\n# RUFF\nruff==0.8.4\n# MYPY\nmypy==1.14.1\ntypes-protobuf==5.29.1.20241207\n# CLANG-FORMAT\nclang-format==19.1.5\n# EDITORCONFIG-CHECKER\neditorconfig-checker==3.0.3\n"
        },
        {
          "name": "requirements-min.txt",
          "type": "blob",
          "size": 0.337890625,
          "content": "# Minimum package versions that ONNX supports\n# https://endoflife.date/numpy\nprotobuf==3.20.2; python_version<\"3.12\"\nprotobuf==4.25.1; python_version>=\"3.12\"\nnumpy==1.22.0; python_version<\"3.10\"\nnumpy==1.23.2; python_version==\"3.10\"\nnumpy==1.23.2; python_version==\"3.11\"\nnumpy==1.26.0; python_version==\"3.12\"\nnumpy==2.1.0; python_version>=\"3.13\"\n"
        },
        {
          "name": "requirements-reference.txt",
          "type": "blob",
          "size": 0.0400390625,
          "content": "google-re2; python_version<\"3.13\"\nPillow\n"
        },
        {
          "name": "requirements-release.txt",
          "type": "blob",
          "size": 0.326171875,
          "content": "build\nipython\nml_dtypes\nnbval\nnumpy==1.24.3; python_version<\"3.9\"\nnumpy==2.0.0; python_version >= \"3.9\" and python_version <= \"3.12\"\nnumpy==2.1.0; python_version>=\"3.13\"\nparameterized\nprotobuf==4.25.1\npytest\npytest-cov\npytest-xdist\nsetuptools\ntwine\nwheel\n# Dependencies for the reference implementation.\n-r requirements-reference.txt\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0283203125,
          "content": "numpy>=1.20\nprotobuf>=3.20.2\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 11.884765625,
          "content": "# Copyright (c) ONNX Project Contributors\n#\n# SPDX-License-Identifier: Apache-2.0\n\n# NOTE: Put all metadata in pyproject.toml.\n# Set the environment variable `ONNX_PREVIEW_BUILD=1` to build the dev preview release.\nfrom __future__ import annotations\n\nimport contextlib\nimport datetime\nimport glob\nimport logging\nimport multiprocessing\nimport os\nimport platform\nimport shlex\nimport shutil\nimport subprocess\nimport sys\nimport sysconfig\nimport textwrap\nfrom typing import ClassVar\n\nimport setuptools\nimport setuptools.command.build_ext\nimport setuptools.command.build_py\nimport setuptools.command.develop\n\nTOP_DIR = os.path.realpath(os.path.dirname(__file__))\nCMAKE_BUILD_DIR = os.path.join(TOP_DIR, \".setuptools-cmake-build\")\n\nWINDOWS = os.name == \"nt\"\n\nCMAKE = shutil.which(\"cmake3\") or shutil.which(\"cmake\")\n\n################################################################################\n# Global variables for controlling the build variant\n################################################################################\n\n# Default value is set to TRUE\\1 to keep the settings same as the current ones.\n# However going forward the recommended way to is to set this to False\\0\nONNX_ML = os.getenv(\"ONNX_ML\") != \"0\"\nONNX_VERIFY_PROTO3 = os.getenv(\"ONNX_VERIFY_PROTO3\") == \"1\"\nONNX_NAMESPACE = os.getenv(\"ONNX_NAMESPACE\", \"onnx\")\nONNX_BUILD_TESTS = os.getenv(\"ONNX_BUILD_TESTS\") == \"1\"\nONNX_DISABLE_EXCEPTIONS = os.getenv(\"ONNX_DISABLE_EXCEPTIONS\") == \"1\"\nONNX_DISABLE_STATIC_REGISTRATION = os.getenv(\"ONNX_DISABLE_STATIC_REGISTRATION\") == \"1\"\nONNX_PREVIEW_BUILD = os.getenv(\"ONNX_PREVIEW_BUILD\") == \"1\"\n\nUSE_MSVC_STATIC_RUNTIME = os.getenv(\"USE_MSVC_STATIC_RUNTIME\", \"0\") == \"1\"\nDEBUG = os.getenv(\"DEBUG\", \"0\") == \"1\"\nCOVERAGE = os.getenv(\"COVERAGE\", \"0\") == \"1\"\n\n# Customize the wheel plat-name; sometimes useful for MacOS builds.\n# See https://github.com/onnx/onnx/pull/6117\nONNX_WHEEL_PLATFORM_NAME = os.getenv(\"ONNX_WHEEL_PLATFORM_NAME\")\n\n################################################################################\n# Pre Check\n################################################################################\n\nassert CMAKE, \"Could not find cmake in PATH\"\n\n################################################################################\n# Version\n################################################################################\n\ntry:\n    _git_version = (\n        subprocess.check_output([\"git\", \"rev-parse\", \"HEAD\"], cwd=TOP_DIR)\n        .decode(\"ascii\")\n        .strip()\n    )\nexcept (OSError, subprocess.CalledProcessError):\n    _git_version = \"\"\n\nwith open(os.path.join(TOP_DIR, \"VERSION_NUMBER\"), encoding=\"utf-8\") as version_file:\n    _version = version_file.read().strip()\n    if ONNX_PREVIEW_BUILD:\n        # Create the dev build for weekly releases / dev build\n        todays_date = datetime.date.today().strftime(\"%Y%m%d\")\n        _version += \".dev\" + todays_date\n    VERSION_INFO = {\"version\": _version, \"git_version\": _git_version}\n\n################################################################################\n# Utilities\n################################################################################\n\n\n@contextlib.contextmanager\ndef cd(path):\n    if not os.path.isabs(path):\n        raise RuntimeError(f\"Can only cd to absolute path, got: {path}\")\n    orig_path = os.getcwd()\n    os.chdir(path)\n    try:\n        yield\n    finally:\n        os.chdir(orig_path)\n\n\ndef get_ext_suffix():\n    return sysconfig.get_config_var(\"EXT_SUFFIX\")\n\n\ndef get_python_execute():\n    if WINDOWS:\n        return sys.executable\n    # Try to search more accurate path, because sys.executable may return a wrong one,\n    # as discussed in https://github.com/python/cpython/issues/84399\n    python_dir = os.path.abspath(\n        os.path.join(sysconfig.get_path(\"include\"), \"..\", \"..\")\n    )\n    if os.path.isdir(python_dir):\n        python_bin = os.path.join(python_dir, \"bin\", \"python3\")\n        if os.path.isfile(python_bin):\n            return python_bin\n        python_bin = os.path.join(python_dir, \"bin\", \"python\")\n        if os.path.isfile(python_bin):\n            return python_bin\n    return sys.executable\n\n\n################################################################################\n# Customized commands\n################################################################################\n\n\ndef create_version(directory: str):\n    \"\"\"Create version.py based on VERSION_INFO.\"\"\"\n    version_file_path = os.path.join(directory, \"onnx\", \"version.py\")\n    os.makedirs(os.path.dirname(version_file_path), exist_ok=True)\n\n    with open(version_file_path, \"w\", encoding=\"utf-8\") as f:\n        f.write(\n            textwrap.dedent(\n                f\"\"\"\\\n                # This file is generated by setup.py. DO NOT EDIT!\n\n\n                version = \"{VERSION_INFO['version']}\"\n                git_version = \"{VERSION_INFO['git_version']}\"\n                \"\"\"\n            )\n        )\n\n\nclass CmakeBuild(setuptools.Command):\n    \"\"\"Compiles everything when `python setup.py build` is run using cmake.\n\n    Custom args can be passed to cmake by specifying the `CMAKE_ARGS`\n    environment variable.\n\n    The number of CPUs used by `make` can be specified by passing `-j<ncpus>`\n    to `setup.py build`.  By default all CPUs are used.\n    \"\"\"\n\n    user_options: ClassVar[list] = [\n        (\"jobs=\", \"j\", \"Specifies the number of jobs to use with make\")\n    ]\n    jobs: None | str | int = None\n\n    def initialize_options(self):\n        self.jobs = None\n\n    def finalize_options(self):\n        self.set_undefined_options(\"build\", (\"parallel\", \"jobs\"))\n        if self.jobs is None and os.getenv(\"MAX_JOBS\") is not None:\n            self.jobs = os.getenv(\"MAX_JOBS\")\n        if self.jobs is None:\n            self.jobs = multiprocessing.cpu_count()\n\n    def run(self):\n        os.makedirs(CMAKE_BUILD_DIR, exist_ok=True)\n\n        with cd(CMAKE_BUILD_DIR):\n            build_type = \"Release\"\n            # configure\n            cmake_args = [\n                CMAKE,\n                f\"-DPython3_EXECUTABLE={get_python_execute()}\",\n                \"-DONNX_BUILD_PYTHON=ON\",\n                f\"-DONNX_NAMESPACE={ONNX_NAMESPACE}\",\n                f\"-DPY_EXT_SUFFIX={get_ext_suffix() or ''}\",\n            ]\n            if COVERAGE:\n                cmake_args.append(\"-DONNX_COVERAGE=ON\")\n            if COVERAGE or DEBUG:\n                # in order to get accurate coverage information, the\n                # build needs to turn off optimizations\n                build_type = \"Debug\"\n            cmake_args.append(f\"-DCMAKE_BUILD_TYPE={build_type}\")\n            if WINDOWS:\n                if USE_MSVC_STATIC_RUNTIME:\n                    cmake_args.append(\"-DONNX_USE_MSVC_STATIC_RUNTIME=ON\")\n                if platform.architecture()[0] == \"64bit\":\n                    if \"arm\" in platform.machine().lower():\n                        cmake_args.extend([\"-A\", \"ARM64\"])\n                    else:\n                        cmake_args.extend([\"-A\", \"x64\", \"-T\", \"host=x64\"])\n                else:  # noqa: PLR5501\n                    if \"arm\" in platform.machine().lower():\n                        cmake_args.extend([\"-A\", \"ARM\"])\n                    else:\n                        cmake_args.extend([\"-A\", \"Win32\", \"-T\", \"host=x86\"])\n            if ONNX_ML:\n                cmake_args.append(\"-DONNX_ML=1\")\n            if ONNX_VERIFY_PROTO3:\n                cmake_args.append(\"-DONNX_VERIFY_PROTO3=1\")\n            if ONNX_BUILD_TESTS:\n                cmake_args.append(\"-DONNX_BUILD_TESTS=ON\")\n            if ONNX_DISABLE_EXCEPTIONS:\n                cmake_args.append(\"-DONNX_DISABLE_EXCEPTIONS=ON\")\n            if ONNX_DISABLE_STATIC_REGISTRATION:\n                cmake_args.append(\"-DONNX_DISABLE_STATIC_REGISTRATION=ON\")\n            if \"CMAKE_ARGS\" in os.environ:\n                extra_cmake_args = shlex.split(os.environ[\"CMAKE_ARGS\"])\n                # prevent crossfire with downstream scripts\n                del os.environ[\"CMAKE_ARGS\"]\n                logging.info(\"Extra cmake args: %s\", extra_cmake_args)\n                cmake_args.extend(extra_cmake_args)\n            cmake_args.append(TOP_DIR)\n            logging.info(\"Using cmake args: %s\", cmake_args)\n            if \"-DONNX_DISABLE_EXCEPTIONS=ON\" in cmake_args:\n                raise RuntimeError(\n                    \"-DONNX_DISABLE_EXCEPTIONS=ON option is only available for c++ builds. Python binding require exceptions to be enabled.\"\n                )\n            subprocess.check_call(cmake_args)\n\n            build_args = [\n                CMAKE,\n                \"--build\",\n                os.curdir,\n                f\"--parallel {self.jobs}\",\n            ]\n            if WINDOWS:\n                build_args.extend(\n                    [\n                        \"--config\",\n                        build_type,\n                        \"--verbose\",\n                    ]\n                )\n            subprocess.check_call(build_args)\n\n\nclass BuildPy(setuptools.command.build_py.build_py):\n    def run(self):\n        if self.editable_mode:\n            dst_dir = TOP_DIR\n        else:\n            dst_dir = self.build_lib\n        create_version(dst_dir)\n        return super().run()\n\n\nclass Develop(setuptools.command.develop.develop):\n    def run(self):\n        create_version(TOP_DIR)\n        return super().run()\n\n\nclass BuildExt(setuptools.command.build_ext.build_ext):\n    def run(self):\n        self.run_command(\"cmake_build\")\n        return super().run()\n\n    def build_extensions(self):\n        # We override this method entirely because the actual building is done\n        # by cmake_build. Here we just copy the built extensions to the final\n        # destination.\n        build_lib = self.build_lib\n        extension_dst_dir = os.path.join(build_lib, \"onnx\")\n        os.makedirs(extension_dst_dir, exist_ok=True)\n\n        for ext in self.extensions:\n            fullname = self.get_ext_fullname(ext.name)\n            filename = os.path.basename(self.get_ext_filename(fullname))\n\n            lib_dir = CMAKE_BUILD_DIR\n            if WINDOWS:\n                # Windows compiled extensions are stored in Release/Debug subfolders\n                debug_lib_dir = os.path.join(CMAKE_BUILD_DIR, \"Debug\")\n                release_lib_dir = os.path.join(CMAKE_BUILD_DIR, \"Release\")\n                if os.path.exists(debug_lib_dir):\n                    lib_dir = debug_lib_dir\n                elif os.path.exists(release_lib_dir):\n                    lib_dir = release_lib_dir\n            src = os.path.join(lib_dir, filename)\n            dst = os.path.join(extension_dst_dir, filename)\n            self.copy_file(src, dst)\n\n        # Copy over the generated python files to build/source dir depending on editable mode\n        if self.editable_mode:\n            dst_dir = TOP_DIR\n        else:\n            dst_dir = build_lib\n\n        generated_py_files = glob.glob(os.path.join(CMAKE_BUILD_DIR, \"onnx\", \"*.py\"))\n        generated_pyi_files = glob.glob(os.path.join(CMAKE_BUILD_DIR, \"onnx\", \"*.pyi\"))\n        assert generated_py_files, \"Bug: No generated python files found\"\n        assert generated_pyi_files, \"Bug: No generated python stubs found\"\n        for src in (*generated_py_files, *generated_pyi_files):\n            dst = os.path.join(dst_dir, os.path.relpath(src, CMAKE_BUILD_DIR))\n            os.makedirs(os.path.dirname(dst), exist_ok=True)\n            self.copy_file(src, dst)\n\n\nCMD_CLASS = {\n    \"cmake_build\": CmakeBuild,\n    \"build_py\": BuildPy,\n    \"build_ext\": BuildExt,\n    \"develop\": Develop,\n}\n\n################################################################################\n# Extensions\n################################################################################\n\nEXT_MODULES = [setuptools.Extension(name=\"onnx.onnx_cpp2py_export\", sources=[])]\n\n\n################################################################################\n# Final\n################################################################################\n\nsetuptools.setup(\n    ext_modules=EXT_MODULES,\n    cmdclass=CMD_CLASS,\n    version=VERSION_INFO[\"version\"],\n    options=(\n        {\"bdist_wheel\": {\"plat_name\": ONNX_WHEEL_PLATFORM_NAME}}\n        if ONNX_WHEEL_PLATFORM_NAME is not None\n        else {}\n    ),\n)\n"
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "workflow_scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}