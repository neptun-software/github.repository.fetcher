{
  "metadata": {
    "timestamp": 1736561172466,
    "page": 130,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "trekhleb/learn-python",
      "stars": 16561,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.0302734375,
          "content": "[flake8]\nmax-line-length = 100\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.056640625,
          "content": ".idea\n.pytest_cache\nvenv\n**/*.pyc\nenv\n__pycache__\n.vscode\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.26171875,
          "content": "language: python\npython:\n  - \"3.6\"\n\n# Install dependencies.\ninstall:\n  - pip install -r requirements.txt\n\n# Run linting and tests.\nscript:\n  - pylint ./src\n  - flake8 ./src --statistics --count\n  - pytest\n\n# Turn email notifications off.\nnotifications:\n  email: false\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 1.9404296875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "MIT License\n\nCopyright (c) 2018 Oleksii Trekhleb\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.es-ES.md",
          "type": "blob",
          "size": 9.716796875,
          "content": "# Playground y Cheatsheet para aprender Python\n\n[![Build Status](https://travis-ci.org/trekhleb/learn-python.svg?branch=master)](https://travis-ci.org/trekhleb/learn-python)\n\n> Esta es una colección de scripts de Python divididos en [categorías](#contenido) que contienen\nejemplos de código con sus explicaciones, diferentes usos y links a recursos adicionales.\n\n> _Lee esto en:_ [_Inglés_](README.md), [_Portugués_](README.pt-BR.md), _Traditional Chinese_](README.zh-TW.md).\n\nEs un **playground** ya que puedes cambiar o añadir cosas al código para ver\ncómo funciona y [probarlo](#probando-el-código) usando aserciones. También puedes\n[revisar el código](#revisando-el-código) que has escrito y averiguar si está acorde con\nla guía de estilos de Python. Todo esto, en conjunto, puede hacer que tu proceso de aprendizaje\nsea más interactivo y puede ayudarte a mantener la calidad del código muy alta desde el principio.\n\nEs un **cheatsheet** porque puedes regresar y revisar los ejemplos de código para\nfortalecer tus conocimientos sobre las [sentencias y contrucciones estándar de Python](#contenido).\nAdemás, ya que el código tiene muchas aserciones, podrás ver el resultado de las funciones/sentencias en el mismo\ncódigo sin la necesidad de ejecutarlos.\n\n> _También puede interesarte 🤖 [Interactive Machine Learning Experiments](https://github.com/trekhleb/machine-learning-experiments)_\n\n## Cómo usar este repositorio\n\nCada script de Python en este repositorio sigue la estructura:\n\n```python\n\"\"\"Lists  <--- Nombre del tema\n\n# @see: https://www.learnpython.org/en/Lists  <-- Link a recurso adicional\n\nAquí puede haber una explicación detallada del tema en concreto (ej: información general sobre listas).\n\"\"\"\n\n\ndef test_list_type():\n    \"\"\"Explicación del sub-tema.\n    \n    Cada archivo contiene funciones de prueba que muestran sub-temas (ej: tipos de listas, métodos en listas).\n    \"\"\"\n    \n    # Este es un ejemplo de cómo construir una lista. <-- Estos comentarios explican el procedimiento\n    squares = [1, 4, 9, 16, 25]\n    \n    # Las listas pueden ser indexadas y cortadas. \n    # Al indexar devuelve el item.\n    assert squares[0] == 1  # <-- Estas aserciones muestran el resultado.\n    # Al cortar devuelve una nueva lista.\n    assert squares[-3:] == [9, 16, 25]  # <-- Estas aserciones muestran el resultado.\n```\n\nNormalmente, querrás hacer lo siguiente:\n\n- [Encontrar el tema](#contenido) que quieres aprender o revisar.\n- Leer los comentarios y/o la documentación que está escrita en cada docstring del script (toma como ejemplo el script de arriba).\n- Ver los ejemplos de código y las aserciones para conocer diferentes maneras de usar el código y entender el resultado previsto.\n- Cambiar el código o añadir nuevas aserciones para ver cómo funcionan las cosas.\n- [Probar](#probando-el-código) y [revisar](#revisando-el-código) el código para ver si funciona y si está escrito\ncorrectamente.\n\n## Contenido\n\n1. **Empezando**\n    - [¿Qué es Python?](src/getting_started/what_is_python.md)\n    - [Sintaxis de Python](src/getting_started/python_syntax.md)\n    - [Variables](src/getting_started/test_variables.py)\n2. **Operadores**\n    - [Operadores aritméticos](src/operators/test_arithmetic.py) (`+`, `-`, `*`, `/`, `//`, `%`, `**`)\n    - [Operadores Bitwise](src/operators/test_bitwise.py) (`&`, `|`, `^`, `>>`, `<<`, `~`)\n    - [Operadores de atribución](src/operators/test_assigment.py) (`=`, `+=`, `-=`, `/=`, `//=` etc.)\n    - [Operadores de comparación](src/operators/test_comparison.py) (`==`, `!=`, `>`, `<`, `>=`, `<=`)\n    - [Operadores lógicos](src/operators/test_logical.py) (`and`, `or`, `not`)\n    - [Operadores de identidad](src/operators/test_identity.py) (`is`, `is not`)\n    - [Operadores de asociación](src/operators/test_membership.py) (`in`, `not in`)\n3. **Tipos de datos**\n    - [Números](src/data_types/test_numbers.py) (incluyendo booleans)\n    - [Strings](src/data_types/test_strings.py) y sus métodos\n    - [Listas](src/data_types/test_lists.py) y sus métodos (incluyendo comprensión de listas)\n    - [Tuples](src/data_types/test_tuples.py)\n    - [Sets](src/data_types/test_sets.py) y sus métodos\n    - [Diccionarios](src/data_types/test_dictionaries.py)\n    - [Tipo de casting](src/data_types/test_type_casting.py)\n4. **Control de flujo**\n    - [La sentencia `if`](src/control_flow/test_if.py)\n    - [La sentencia `for`](src/control_flow/test_for.py) (y la función `range()`)\n    - [La sentencia `while`](src/control_flow/test_while.py)\n    - [La sentencia `try`](src/control_flow/test_try.py)\n    - [La sentencia `break`](src/control_flow/test_break.py)\n    - [La sentencia `continue`](src/control_flow/test_continue.py)\n5. **Funciones**\n    - [Definición de función](src/functions/test_function_definition.py) (sentencias `def` y `return`)\n    - [Ámbito de variables dentro de funciones](src/functions/test_function_scopes.py) (sentencias `global` y `nonlocal`)\n    - [Valores de argumento predeterminados](src/functions/test_function_default_arguments.py)\n    - [Argumentos de palabras clave](src/functions/test_function_keyword_arguments.py)\n    - [Listas de argumento arbitrario](src/functions/test_function_arbitrary_arguments.py)\n    - [Listas de argumentos en funciones](src/functions/test_function_unpacking_arguments.py) (sentencias `*` y `**`)\n    - [Expresiones Lambda](src/functions/test_lambda_expressions.py) (sentencia `lambda`)\n    - [Strings de documentación](src/functions/test_function_documentation_string.py)\n    - [Anotaciones en funciones](src/functions/test_function_annotations.py)\n    - [Decoradores de funciones](src/functions/test_function_decorators.py)\n6. **Clases**\n    - [Definición de clase](src/classes/test_class_definition.py) (sentencia `class`)\n    - [Objetos de clase](src/classes/test_class_objects.py)\n    - [Objetos de instancia](src/classes/test_instance_objects.py)\n    - [Métodos de objetos](src/classes/test_method_objects.py)\n    - [Variables de clase y de instancia](src/classes/test_class_and_instance_variables.py)\n    - [Herencia](src/classes/test_inheritance.py)\n    - [Herencia múltiple](src/classes/test_multiple_inheritance.py)\n7. **Módulos**\n    - [Módulos](src/modules/test_modules.py) (sentencia `import`)\n    - [Paquetes](src/modules/test_packages.py)\n8. **Errores y excepciones**\n    - [Controlando excepciones](src/exceptions/test_handle_exceptions.py) (sentencia `try`)\n    - [Generando excepciones](src/exceptions/test_raise_exceptions.py) (sentencia `raise`) \n9. **Archivos**\n    - [Leyendo y escribiendo](src/files/test_file_reading.py) (sentencia `with`)\n    - [Métodos de objetos de archivo](src/files/test_file_methods.py)\n10. **Adicionales**\n    - [La sentencia `pass`](src/additions/test_pass.py)\n    - [Generadores](src/additions/test_generators.py) (sentencia `yield`)\n11. **Pequeño tour de las librerías estándar**\n    - [Serialización](src/standard_libraries/test_json.py) (librería `json`)\n    - [Parámetros en archivos](src/standard_libraries/test_glob.py) (librería `glob`)\n    - [Expresiones regulares](src/standard_libraries/test_re.py) (librearía `re`)\n    - [Matemática](src/standard_libraries/test_math.py) (librerías `math`, `random` y `statistics`)\n    - [Fechas y horas](src/standard_libraries/test_datetime.py) (librería `datetime`)\n    - [Compresión de datos](src/standard_libraries/test_zlib.py) (librearía `zlib`)\n\n## Pre-requisitos\n\n**Instalando Python**\n\nAsegúrate de que tienes [Python3 instalado](https://realpython.com/installing-python/) en tu sistema.\n\nPodrías utilizar la librería estándar [venv](https://docs.python.org/es/3/library/venv.html) para crear\nentornos virtuales y tener Python, pip y todos los paquetes instalados en el directorio de tu\nproyecto local para evitar cometer errores con paquetes del sistema y sus versiones.\n\nDependiendo de la instalación, tendrás acceso a Python3 ejecutando `python` o `python3`. Lo mismo\naplica para el administrador de paquetes pip - puedes tener acceso a él ejecutando `pip` o `pip3`.\n\nPuedes ver tu versión actual de Python ejecutando:\n\n```bash\npython --version\n```\n\nTen en cuenta que cuando leas `python` en este repositorio, se asume que es Python **3**.\n\n**Instalando dependencias**\n\nInstala todas las depencias requeridas para el proyecto ejecutando:\n\n```bash\npip install -r requirements.txt\n```\n\n## Probando el código\n\nLas pruebas son hechas usando el framework [pytest](https://docs.pytest.org/en/latest/).\n\nPuedes añadir más pruebas por ti mismo añadiendo archivos y funciones con el prefijo `test_`\n(ej: `test_topic.py` con la función `def test_sub_topic()` adentro).\n\nPara ejecutar todas las pruebas, por favor escribe el siguiente comando desde el directorio\nraíz del proyecto:\n\n```bash\npytest\n```\n\nPara ejecutar diferentes pruebas escribe:\n\n```bash\npytest ./path/to/the/test_file.py\n```\n\n## Revisando el código\n\nLa revisión del código está hecha usando las librerías [pylint](http://pylint.pycqa.org/) y [flake8](http://flake8.pycqa.org/en/latest/).\n\n### PyLint\n\nPara revisar si el código sigue la guía de estilos\n[PEP 8](https://www.python.org/dev/peps/pep-0008/), por favor ejecuta:\n\n```bash\npylint ./src/\n```\n\nEn caso de que linter detecte un error (ej: `missing-docstring`), te recomiendo leer más sobre\nel error concreto ejecutando:\n\n```bash\npylint --help-msg=missing-docstring\n```\n\n[Más sobre PyLint](http://pylint.pycqa.org/)\n\n### Flake8\n\nPara revisar si el código sigue la guía de estilos\n[PEP 8](https://www.python.org/dev/peps/pep-0008/), por favor ejecuta:\n\n```bash\nflake8 ./src\n```\n\nO, si quieres ver un output más detallado, ejecuta:\n\n```bash\nflake8 ./src --statistics --show-source --count\n```\n\n[Más sobre Flake8](http://flake8.pycqa.org/en/latest/)\n\n## Apoya al proyecto\n\nPuedes apoyar al proyecto a través de ❤️️ [GitHub](https://github.com/sponsors/trekhleb) o ❤️️ [Patreon](https://www.patreon.com/trekhleb).\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.853515625,
          "content": "# Playground and Cheatsheet for Learning Python\n\n> 🇺🇦 UKRAINE [IS BEING ATTACKED](https://war.ukraine.ua/) BY RUSSIAN ARMY. CIVILIANS ARE GETTING KILLED. RESIDENTIAL AREAS ARE GETTING BOMBED.\n> - Help Ukraine via:\n>   - [Serhiy Prytula Charity Foundation](https://prytulafoundation.org/en/)\n>   - [Come Back Alive Charity Foundation](https://savelife.in.ua/en/donate-en/)\n>   - [National Bank of Ukraine](https://bank.gov.ua/en/news/all/natsionalniy-bank-vidkriv-spetsrahunok-dlya-zboru-koshtiv-na-potrebi-armiyi)\n> - More info on [war.ukraine.ua](https://war.ukraine.ua/) and [MFA of Ukraine](https://twitter.com/MFA_Ukraine)\n\n<hr/>\n\n[![Build Status](https://travis-ci.org/trekhleb/learn-python.svg?branch=master)](https://travis-ci.org/trekhleb/learn-python)\n\n> This is a collection of Python scripts that are split by [topics](#table-of-contents) and contain \ncode examples with explanations, different use cases and links to further readings.\n\n> _Read this in:_ [_Português_](README.pt-BR.md), [_Español_](README.es-ES.md), [_Traditional Chinese_](README.zh-TW.md).\n\nIt is a **playground** because you may change or add the code to see how it works \nand [test it out](#testing-the-code) using assertions. It also allows you \nto [lint the code](#linting-the-code) you've wrote and check if it fits to Python code style guide.\nAltogether it might make your learning process to be more interactive and it might help you to keep \ncode quality pretty high from very beginning.\n\nIt is a **cheatsheet** because you may get back to these code examples once you want to recap the \nsyntax of [standard Python statements and constructions](#table-of-contents). Also because the \ncode is full of assertions you'll be able to see expected functions/statements output right away\nwithout launching them.\n\n> _You might also be interested in 🤖 [Interactive Machine Learning Experiments](https://github.com/trekhleb/machine-learning-experiments)_\n\n## How to Use This Repository\n\nEach Python script in this repository has the following structure:\n\n```python\n\"\"\"Lists  <--- Name of the topic here\n\n# @see: https://www.learnpython.org/en/Lists  <-- Link to further readings goes here\n\nHere might go more detailed explanation of the current topic (i.e. general info about Lists).\n\"\"\"\n\n\ndef test_list_type():\n    \"\"\"Explanation of sub-topic goes here.\n    \n    Each file contains test functions that illustrate sub-topics (i.e. lists type, lists methods).\n    \"\"\"\n    \n    # Here is an example of how to build a list.  <-- Comments here explain the action\n    squares = [1, 4, 9, 16, 25]\n    \n    # Lists can be indexed and sliced. \n    # Indexing returns the item.\n    assert squares[0] == 1  # <-- Assertions here illustrate the result.\n    # Slicing returns a new list.\n    assert squares[-3:] == [9, 16, 25]  # <-- Assertions here illustrate the result.\n```\n\nSo normally you might want to do the following:\n\n- [Find the topic](#table-of-contents) you want to learn or recap.\n- Read comments and/or documentation that is linked in each script's docstring (as in example above). \n- Look at code examples and assertions to see usage examples and expected output.\n- Change code or add new assertions to see how things work.\n- [Run tests](#testing-the-code) and [lint the code](#linting-the-code) to see if it work and is \nwritten correctly.\n\n## Table of Contents\n\n1. **Getting Started**\n    - [What is Python](src/getting_started/what_is_python.md)\n    - [Python Syntax](src/getting_started/python_syntax.md)\n    - [Variables](src/getting_started/test_variables.py)\n2. **Operators**\n    - [Arithmetic Operators](src/operators/test_arithmetic.py) (`+`, `-`, `*`, `/`, `//`, `%`, `**`)\n    - [Bitwise Operators](src/operators/test_bitwise.py) (`&`, `|`, `^`, `>>`, `<<`, `~`)\n    - [Assignment Operators](src/operators/test_assigment.py) (`=`, `+=`, `-=`, `/=`, `//=` etc.)\n    - [Comparison Operator](src/operators/test_comparison.py) (`==`, `!=`, `>`, `<`, `>=`, `<=`)\n    - [Logical Operators](src/operators/test_logical.py) (`and`, `or`, `not`)\n    - [Identity Operators](src/operators/test_identity.py) (`is`, `is not`)\n    - [Membership Operators](src/operators/test_membership.py) (`in`, `not in`)\n3. **Data Types**\n    - [Numbers](src/data_types/test_numbers.py) (including booleans)\n    - [Strings](src/data_types/test_strings.py) and their methods\n    - [Lists](src/data_types/test_lists.py) and their methods (including list comprehensions)\n    - [Tuples](src/data_types/test_tuples.py)\n    - [Sets](src/data_types/test_sets.py) and their methods\n    - [Dictionaries](src/data_types/test_dictionaries.py)\n    - [Type Casting](src/data_types/test_type_casting.py)\n4. **Control Flow**\n    - [The `if` statement](src/control_flow/test_if.py)\n    - [The `for` statement](src/control_flow/test_for.py) (and `range()` function)\n    - [The `while` statement](src/control_flow/test_while.py)\n    - [The `try` statements](src/control_flow/test_try.py)\n    - [The `break` statement](src/control_flow/test_break.py)\n    - [The `continue` statement](src/control_flow/test_continue.py)\n5. **Functions**\n    - [Function Definition](src/functions/test_function_definition.py) (`def` and `return` statements)\n    - [Scopes of Variables Inside Functions](src/functions/test_function_scopes.py) (`global` and `nonlocal` statements)\n    - [Default Argument Values](src/functions/test_function_default_arguments.py)\n    - [Keyword Arguments](src/functions/test_function_keyword_arguments.py)\n    - [Arbitrary Argument Lists](src/functions/test_function_arbitrary_arguments.py)\n    - [Unpacking Argument Lists](src/functions/test_function_unpacking_arguments.py) (`*` and `**` statements)\n    - [Lambda Expressions](src/functions/test_lambda_expressions.py) (`lambda` statement)\n    - [Documentation Strings](src/functions/test_function_documentation_string.py)\n    - [Function Annotations](src/functions/test_function_annotations.py)\n    - [Function Decorators](src/functions/test_function_decorators.py)\n6. **Classes**\n    - [Class Definition](src/classes/test_class_definition.py) (`class` statement)\n    - [Class Objects](src/classes/test_class_objects.py)\n    - [Instance Objects](src/classes/test_instance_objects.py)\n    - [Method Objects](src/classes/test_method_objects.py)\n    - [Class and Instance Variables](src/classes/test_class_and_instance_variables.py)\n    - [Inheritance](src/classes/test_inheritance.py)\n    - [Multiple Inheritance](src/classes/test_multiple_inheritance.py)\n7. **Modules**\n    - [Modules](src/modules/test_modules.py) (`import` statement)\n    - [Packages](src/modules/test_packages.py)\n8. **Errors and Exceptions**\n    - [Handling Exceptions](src/exceptions/test_handle_exceptions.py) (`try` statement)\n    - [Raising Exceptions](src/exceptions/test_raise_exceptions.py) (`raise` statement)\n9. **Files**\n    - [Reading and Writing](src/files/test_file_reading.py) (`with` statement)\n    - [Methods of File Objects](src/files/test_file_methods.py)\n10. **Additions**\n    - [The `pass` statement](src/additions/test_pass.py)\n    - [Generators](src/additions/test_generators.py) (`yield` statement)\n11. **Brief Tour of the Standard Libraries**\n    - [Serialization](src/standard_libraries/test_json.py) (`json` library)\n    - [File Wildcards](src/standard_libraries/test_glob.py) (`glob` library)\n    - [String Pattern Matching](src/standard_libraries/test_re.py) (`re` library)\n    - [Mathematics](src/standard_libraries/test_math.py) (`math`, `random`, `statistics` libraries)\n    - [Dates and Times](src/standard_libraries/test_datetime.py) (`datetime` library)\n    - [Data Compression](src/standard_libraries/test_zlib.py) (`zlib` library)\n12. **User input**\n    - [Terminal input](src/user_input/test_input.py) (`input` statement)\n\n## Prerequisites\n\n**Installing Python**\n\nMake sure that you have [Python3 installed](https://realpython.com/installing-python/) on your machine.\n\nYou might want to use [venv](https://docs.python.org/3/library/venv.html) standard Python library\nto create virtual environments and have Python, pip and all dependent packages to be installed and \nserved from the local project directory to avoid messing with system wide packages and their \nversions.\n\nDepending on your installation you might have access to Python3 interpreter either by\nrunning `python` or `python3`. The same goes for pip package manager - it may be accessible either\nby running `pip` or `pip3`.\n\nYou may check your Python version by running:\n\n```bash\npython --version\n```\n\nNote that in this repository whenever you see `python` it will be assumed that it is Python **3**.\n\n**Installing dependencies**\n\nInstall all dependencies that are required for the project by running:\n\n```bash\npip install -r requirements.txt\n```\n\n## Testing the Code\n\nTests are made using [pytest](https://docs.pytest.org/en/latest/) framework.\n\nYou may add new tests for yourself by adding files and functions with `test_` prefix\n(i.e. `test_topic.py` with `def test_sub_topic()` function inside).\n\nTo run all the tests please execute the following command from the project root folder:\n\n```bash\npytest\n```\n\nTo run specific tests please execute:\n\n```bash\npytest ./path/to/the/test_file.py\n```\n\n## Linting the Code\n\nLinting is done using [pylint](http://pylint.pycqa.org/) and [flake8](http://flake8.pycqa.org/en/latest/) libraries.\n\n### PyLint\n\nTo check if the code is written with respect\nto [PEP 8](https://www.python.org/dev/peps/pep-0008/) style guide please run:\n\n```bash\npylint ./src/\n```\n\nIn case if linter will detect error (i.e. `missing-docstring`) you may want to read more about \nspecific error by running:\n\n```bash\npylint --help-msg=missing-docstring\n```\n\n[More about PyLint](http://pylint.pycqa.org/)\n\n### Flake8\n\nTo check if the code is written with respect\nto [PEP 8](https://www.python.org/dev/peps/pep-0008/) style guide please run:\n\n```bash\nflake8 ./src\n```\n\nOr if you want to have more detailed output you may run:\n\n```bash\nflake8 ./src --statistics --show-source --count\n```\n\n[More about Flake8](http://flake8.pycqa.org/en/latest/)\n\n## Author\n\n- [@trekhleb](https://trekhleb.dev)\n"
        },
        {
          "name": "README.pt-BR.md",
          "type": "blob",
          "size": 9.4560546875,
          "content": "# Playground e Cheatsheet Para Aprender Python\n\n[![Build Status](https://travis-ci.org/trekhleb/learn-python.svg?branch=master)](https://travis-ci.org/trekhleb/learn-python)\n\n> Essa é uma coleção de scripts Python dividida em [tópicos](#índice) que contém \nexemplos de código com explicações, diferentes usos e links para outras leituras.\n\n> _Ler em:_ [_English_](README.md), [_Español_](README.es-ES.md), [_Traditional Chinese_](README.zh-TW.md).\n\nÉ um **playground** porque você pode fazer alterações no código para ver como ele se comporta,\nalém de [testá-lo](#testando-o-código) usando asserções. Também é possível \n[revisar o código](#revisando-o-código) que você escreveu automaticamente e verificar se ele se encaixa\nno guia de estilo de código Python.\nIsso tudo pode tornar seu processo de aprendizagem mais interativo e ajudar a manter a qualidade\ndo código bastante alta desde o início.\n\nÉ um **cheatsheet** porque você pode voltar a esses exemplos de código quando quiser recapitular a sintaxe das \n[estruturas padrão do Python](#índice). O código está cheio de asserções, então você poderá ver o retorno das funções sem precisar executá-las.\n\n> _Você pode se interessar também por 🤖 [Interactive Machine Learning Experiments](https://github.com/trekhleb/machine-learning-experiments)_\n\n## Como Usar Esse Repositório\n\nNesse repositório, cada script Python possui a seguinte estrutura:\n\n```python\n\"\"\"Lists  <--- Nome do tópico\n\n# @see: https://www.learnpython.org/en/Lists  <-- Link para outras leituras.\n\nA seguir, uma explicação mais detalhada do tópico atual (ex, informações gerais sobre listas (Lists)).\n\"\"\"\n\n\ndef test_list_type():\n    \"\"\"Explicação do subtópico.\n    \n    Cada arquivo contém funções de teste que ilustram subtópicos (ou seja, tipo de lista, métodos de lista).\n    \"\"\"\n    \n    # Here is an example of how to build a list.  <-- Comentários em inglês explicam a ação.\n    squares = [1, 4, 9, 16, 25]\n    \n    # Lists can be indexed and sliced. \n    # Indexing returns the item.\n    assert squares[0] == 1  # <-- As asserções ilustram o resultado.\n    # Slicing returns a new list.\n    assert squares[-3:] == [9, 16, 25]  # <-- As asserções ilustram o resultado.\n```\n\nEntão você pode querer fazer o seguinte:\n\n- [Encontrar o tópico](#índice) que deseja aprender ou recapitular.\n- Ler os comentários e/ou a documentação vinculada em cada script (como no exemplo acima).\n- Analisar os exemplos e asserções para ver exemplos de uso e saída esperada das funções.\n- Alterar o código ou adicionar novas asserções para ver o que acontece.\n- [Executar testes](#testando-o-código) e [revisar o código](#revisando-o-código) para ver se ele\nfunciona e para saber se está escrito corretamente. \n\n## Índice\n\n1. **Começando**\n    - [O que é Python](src/getting_started/what_is_python.md)\n    - [Sintaxe Python](src/getting_started/python_syntax.md)\n    - [Variáveis](src/getting_started/test_variables.py)\n2. **Operadores**\n    - [Operadores Aritméticos](src/operators/test_arithmetic.py) (`+`, `-`, `*`, `/`, `//`, `%`, `**`)\n    - [Operadores Bitwise](src/operators/test_bitwise.py) (`&`, `|`, `^`, `>>`, `<<`, `~`)\n    - [Operadores de Atribuição](src/operators/test_assigment.py) (`=`, `+=`, `-=`, `/=`, `//=` etc.)\n    - [Operadores de Comparação](src/operators/test_comparison.py) (`==`, `!=`, `>`, `<`, `>=`, `<=`)\n    - [Operadores Lógicos](src/operators/test_logical.py) (`and`, `or`, `not`)\n    - [Operadores de Indentidade](src/operators/test_identity.py) (`is`, `is not`)\n    - [Operadores de Associação](src/operators/test_membership.py) (`in`, `not in`)\n3. **Tipos de Dados**\n    - [Números](src/data_types/test_numbers.py) (incluindo boleanos)\n    - [Strings](src/data_types/test_strings.py) e seus métodos\n    - [Listas](src/data_types/test_lists.py) e seus métodos (incluindo lista de compreensões)\n    - [Tuplas](src/data_types/test_tuples.py)\n    - [Conjuntos](src/data_types/test_sets.py) e seus métodos\n    - [Dicionários](src/data_types/test_dictionaries.py)\n    - [Casting de Tipo](src/data_types/test_type_casting.py)\n4. **Controles de Fluxo**\n    - [A declaração `if`](src/control_flow/test_if.py)\n    - [A declaração `for`](src/control_flow/test_for.py) (e a função `range()`)\n    - [A declaração `while`](src/control_flow/test_while.py)\n    - [A declaração `try`](src/control_flow/test_try.py)\n    - [A declaração `break`](src/control_flow/test_break.py)\n    - [A declaração `continue`](src/control_flow/test_continue.py)\n5. **Funções**\n    - [Definição de Função](src/functions/test_function_definition.py) (declaração `def` e `return`)\n    - [Variáveis Dentro das Funções](src/functions/test_function_scopes.py) (declaração `global` e `nonlocal`)\n    - [Valores Padrão de Argumentos](src/functions/test_function_default_arguments.py)\n    - [Argumentos de palavras-chave](src/functions/test_function_keyword_arguments.py)\n    - [Listas de Argumento Arbitrárias](src/functions/test_function_arbitrary_arguments.py)\n    - [Desfazendo Lista de Argumentos](src/functions/test_function_unpacking_arguments.py) (declaração `*` e `**`)\n    - [Expressões Lambda](src/functions/test_lambda_expressions.py) (declaração `lambda`)\n    - [Documentação das Strings](src/functions/test_function_documentation_string.py)\n    - [Função de Anotações](src/functions/test_function_annotations.py)\n    - [Função de Decoradores](src/functions/test_function_decorators.py)\n6. **Classes**\n    - [Definição de Classe](src/classes/test_class_definition.py) (declaração `class`)\n    - [Classes dos Objetos](src/classes/test_class_objects.py)\n    - [Instância dos Objetos](src/classes/test_instance_objects.py)\n    - [Métodos de Objetos](src/classes/test_method_objects.py)\n    - [Variável de Classe e Instância](src/classes/test_class_and_instance_variables.py)\n    - [Herança](src/classes/test_inheritance.py)\n    - [Herança Múltipla](src/classes/test_multiple_inheritance.py)\n7. **Módulos**\n    - [Módulos](src/modules/test_modules.py) (declaração `import`)\n    - [Pacotes](src/modules/test_packages.py)\n8. **Erros e Exceções**\n    - [Tratando Exceções](src/exceptions/test_handle_exceptions.py) (declaração `try`)\n    - [Levantando Exceções](src/exceptions/test_raise_exceptions.py) (declaração `raise`) \n9. **Arquivos**\n    - [Lendo e Escrevendo](src/files/test_file_reading.py) (declaração `with`)\n    - [Métodos de Objetos de Arquivos](src/files/test_file_methods.py)\n10. **Adicional**\n    - [A declaração `pass`](src/additions/test_pass.py)\n    - [Geradores](src/additions/test_generators.py) (declaração `yield`)\n11. **Algumas Bibliotecas Padrão**\n    - [Serialization](src/standard_libraries/test_json.py) (biblioteca `json`)\n    - [File Wildcards](src/standard_libraries/test_glob.py) (biblioteca `glob`)\n    - [String Pattern Matching](src/standard_libraries/test_re.py) (biblioteca `re`)\n    - [Matemática](src/standard_libraries/test_math.py) (bibliotecas `math`, `random` e `statistics`)\n    - [Tempo e Datas](src/standard_libraries/test_datetime.py) (biblioteca `datetime`)\n    - [Comprimindo Dados](src/standard_libraries/test_zlib.py) (biblioteca `zlib`)\n\n## Pré-requisitos\n\n**Instalando o Python**\n\nCertifique-se de ter o [Python3 instalado](https://realpython.com/installing-python/) em sua máquina.\n\nVocê pode usar a biblioteca padrão do Python [venv](https://docs.python.org/3/library/venv.html)\npara criar ambientes virtuais e ter o Python, pip e todos os outros pacotes a serem instalados\n a partir do diretório local do projeto para evitar mexer com pacotes externos ou do sistema.\n\nDependendo da sua instalação, você pode ter acesso ao interpretador Python3 executando `python` ou `python3`. O mesmo vale para o gerenciador de pacotes pip, você pode acessá-lo executando `pip` ou `pip3`.\n\nVocê pode ver a versão do seu Python executando:\n\n```bash\npython --version\n```\n\nObserve que neste repositório sempre que você vê o `python`, será assumido que é o Python **3**.\n\n**Instalando dependências**\n\nInstale todas as dependências necessárias para o projeto executando:\n\n```bash\npip install -r requirements.txt\n```\n\n## Testando o Código\n\nTestes são feitos usando o framework [pytest](https://docs.pytest.org/en/latest/).\n\nVocê pode adicionar novos testes criando arquivos e funções com o prefixo `test_` \n(ex. `test_topic.py` com a função `def test_sub_topic()` dentro).\n\nPara executar todos os testes, execute o seguinte comando na pasta raiz do projeto:\n\n```bash\npytest\n```\n\nPara executar testes específicos, execute:\n\n```bash\npytest ./path/to/the/test_file.py\n```\n\n## Revisando o Código\n\nA revisão é feita usando as bibliotecas [pylint](http://pylint.pycqa.org/) e [flake8](http://flake8.pycqa.org/en/latest/).\n\n### PyLint\n\nPara verificar se o código está escrito de acordo com o guia de estilo \ndo [PEP 8](https://www.python.org/dev/peps/pep-0008/), execute:\n\n```bash\npylint ./src/\n```\n\nCaso o pylint detecte um erro (ex. `missing-docstring`), convém ler mais sobre erros específicos executando:\n\n```bash\npylint --help-msg=missing-docstring\n```\n\n[Saber mais sobre PyLint](http://pylint.pycqa.org/)\n\n### Flake8\n\nPara verificar se o código está escrito de acordo com o guia de estilo \ndo [PEP 8](https://www.python.org/dev/peps/pep-0008/), execute:\n\n```bash\nflake8 ./src\n```\n\nOu, se você quiser uma saída mais detalhada, execute:\n\n```bash\nflake8 ./src --statistics --show-source --count\n```\n\n[Saber mais sobre Flake8](http://flake8.pycqa.org/en/latest/)\n\n---\n\nTraduzido por [vilmacio22](https://github.com/vilmacio22).\n"
        },
        {
          "name": "README.zh-TW.md",
          "type": "blob",
          "size": 9.4072265625,
          "content": "# 學習 Python 的練習場（Playground）和速查表（Cheatsheet）\n\n[![Build Status](https://travis-ci.org/trekhleb/learn-python.svg?branch=master)](https://travis-ci.org/trekhleb/learn-python)\n\n> 此專案依據 [目錄](#目錄) 分類收集了 Python 腳本，包含了程式碼範例及解釋、不同的使用情境以及衍伸閱讀連結。\n\n> _閱讀英文原始版本:_ [_English_](README.md), [_Português_](README.pt-BR.md), [_Español_](README.es-ES.md).\n\n此專案名稱之所以叫做 **練習場（Playground）**，是因為您可以修改或是新增程式碼至範例中去觀察程式執行流程並使用斷言關鍵字（assert）來 [測試程式](#測試程式)。同時，此專案也使用了業界常用的工具來 [檢查程式碼](#檢查程式碼)，確保您所撰寫的程式碼符合官方建議的 Python 程式碼風格規範。\n\n總而言之，此專案會使您的學習過程更具互動性，並幫助您從一開始學習的時候就使用高品質的程式碼。\n\n此專案名稱之所以也包含了 **速查表（Cheatsheet）** 是因為您可以隨時透過此專案中的 [標準 Python 陳述式以及結構](#目錄) 回顧程式碼語法，也因為在此專案中的每個程式碼範例都使用了斷言來說明及教學，故您可以不用執行程式就看到函式/陳述式的預期輸出結果。\n\n> 若對機器學習（Machine Learning）有興趣，可以參考專案原作者的另一個學習專案：🤖 [Interactive Machine Learning Experiments](https://github.com/trekhleb/machine-learning-experiments)\n\n## 如何使用此專案儲存庫\n\n在此專案儲存庫中的每一個 Python 腳本皆為以下結構：\n\n```python\n\"\"\"串列（Lists） <--- 此為主題名稱\n\n# @詳見: https://www.learnpython.org/en/Lists <-- 此為延伸閱讀連結\n\n此處可能會有針對此主題更多的詳細說明（例如：關於串列的基本使用方法）\n\"\"\"\n\ndef test_list_type():\n    \"\"\"此處為子主題解釋\n\n    每個檔案皆包含說明該子主題的測試函式（例如：串列型態、串列方法）\n    \"\"\"\n\n    # 建立串列之範例 <-- 此行是解釋下一行程式碼動作之註解\n    squares = [1, 4, 9, 16, 25]\n\n    # 串列可以被索引（indexed）及切片（sliced）\n    # 索引會回傳該索引位置之內容值\n    assert squares[0] == 1 # <-- 利用斷言來呈現結果\n    # 切片會回傳一個新的串列\n    assert squares[-3:] == [9, 16, 25] # <-- 利用斷言來呈現結果\n```\n\n故您可以做以下動作：\n\n- 找一個您想要學習或是回顧的 [主題](#目錄)。\n- 閱讀註解及/或包含於腳本文件字串（docstring）中的延伸閱讀資料（如上述之程式碼範例）。\n- 查看程式碼範例並利用斷言來展示使用範例及預期輸出。\n- 修改程式碼或新增新的斷言來了解程式運作流程。\n- [執行測試](#測試程式) 及 [檢查程式碼](#檢查程式碼) 來確認程式是否被正確撰寫及是否可以被正確執行。\n\n## 目錄\n\n1. **入門**\n    - [Python 是什麼](src/getting_started/what_is_python.md)\n    - [Python 語法](src/getting_started/python_syntax.md)\n    - [變數](src/getting_started/test_variables.py)\n2. **運算子**\n    - [數學運算子](src/operators/test_arithmetic.py) (`+`, `-`, `*`, `/`, `//`, `%`, `**`)\n    - [位元運算子](src/operators/test_bitwise.py) (`&`, `|`, `^`, `>>`, `<<`, `~`)\n    - [指派運算子](src/operators/test_assigment.py) (`=`, `+=`, `-=`, `/=`, `//=` 等 ...)\n    - [比較運算子](src/operators/test_comparison.py) (`==`, `!=`, `>`, `<`, `>=`, `<=`)\n    - [邏輯運算子](src/operators/test_logical.py) (`and`, `or`, `not`)\n    - [恆等運算子](src/operators/test_identity.py) (`is`, `is not`)\n    - [成員存取運算子](src/operators/test_membership.py) (`in`, `not in`)\n3. **資料類型**\n    - [數字](src/data_types/test_numbers.py)（包含布林值）\n    - [字串](src/data_types/test_strings.py) 及相關方法\n    - [串列](src/data_types/test_lists.py) 及相關方法（包含列表構建）\n    - [元組](src/data_types/test_tuples.py)\n    - [集合](src/data_types/test_sets.py) 及相關方法\n    - [字典](src/data_types/test_dictionaries.py)\n    - [類型轉換](src/data_types/test_type_casting.py)\n4. **流程控制**\n    - [`if` 陳述式](src/control_flow/test_if.py)\n    - [`for` 陳述式](src/control_flow/test_for.py) (以及 `range()` 函式)\n    - [`while` 陳述式](src/control_flow/test_while.py)\n    - [`try` 陳述式](src/control_flow/test_try.py)\n    - [`break` 陳述式](src/control_flow/test_break.py)\n    - [`continue` 陳述式](src/control_flow/test_continue.py)\n5. **函式**\n    - [函式定義](src/functions/test_function_definition.py)（`def` 以及 `return` 陳述式）\n    - [函式內變數作用範圍](src/functions/test_function_scopes.py)（`global` 以及 `nonlocal` 陳述式）\n    - [預設引數](src/functions/test_function_default_arguments.py)\n    - [關鍵字引數](src/functions/test_function_keyword_arguments.py)\n    - [任意引數串列](src/functions/test_function_arbitrary_arguments.py)\n    - [拆解引數串列](src/functions/test_function_unpacking_arguments.py)（`*` 以及 `**` 陳述式）\n    - [Lambda 表達式](src/functions/test_lambda_expressions.py) (`lambda` 陳述式)\n    - [文件字串](src/functions/test_function_documentation_string.py)\n    - [函式註釋](src/functions/test_function_annotations.py)\n    - [函式裝飾器](src/functions/test_function_decorators.py)\n6. **類別**\n    - [類別定義](src/classes/test_class_definition.py) (`class` 陳述式)\n    - [類別物件](src/classes/test_class_objects.py)\n    - [物件實體](src/classes/test_instance_objects.py)\n    - [物件方法](src/classes/test_method_objects.py)\n    - [類別及實體變數](src/classes/test_class_and_instance_variables.py)\n    - [繼承](src/classes/test_inheritance.py)\n    - [多重繼承](src/classes/test_multiple_inheritance.py)\n7. **模組**\n    - [模組](src/modules/test_modules.py) (`import` 陳述式)\n    - [套件](src/modules/test_packages.py)\n8. **錯誤和例外**\n    - [例外處理](src/exceptions/test_handle_exceptions.py) (`try` 陳述式)\n    - [例外引發](src/exceptions/test_raise_exceptions.py) (`raise` 陳述式)\n9. **檔案**\n    - [讀取和寫入](src/files/test_file_reading.py) (`with` 陳述式)\n    - [檔案物件方法](src/files/test_file_methods.py)\n10. **附加內容**\n    - [`pass` 陳述式](src/additions/test_pass.py)\n    - [生成器](src/additions/test_generators.py) (`yield` 陳述式)\n11. **標準函式庫簡介**\n    - [串列化](src/standard_libraries/test_json.py) (`json` 函式庫)\n    - [檔案萬用字元](src/standard_libraries/test_glob.py) (`glob` 函式庫)\n    - [字串規則比對](src/standard_libraries/test_re.py) (`re` 函式庫)\n    - [數學運算](src/standard_libraries/test_math.py) (`math`, `random`, `statistics` 函式庫)\n    - [日期和時間](src/standard_libraries/test_datetime.py) (`datetime` 函式庫)\n    - [資料壓縮](src/standard_libraries/test_zlib.py) (`zlib` 函式庫)\n\n## 使用此專案必備條件\n\n**安裝 Python**\n\n確認您已安裝 [Python3](https://realpython.com/installing-python/) 在您的電腦上。\n\n您可能會想要使用標準 Python 函式庫所提供的 [虛擬環境](https://docs.python.org/3/library/venv.html) 功能在專案目錄中建立虛擬環境來佈署 Python 程式、pip 程式以及安裝所有需要的套件，藉此來避免作業系統中 Python 版本及相依性的混亂。\n\n根據您的安裝方法，您可能可以通過以下方式執行 Python 3 直譯器：執行 `python` 或 `python3` 命令。pip 套件管理器執行方式也是如此：執行 `pip` 或 `pip3`。\n\n您可以使用以下命令來確認 Python 版本：\n\n```bash\npython --version\n```\n\n此專案儲存庫中的所有程式碼皆是基於 Python **3**。\n\n**安裝相依性套件**\n\n透過以下命令安裝此專案需要的相依性套件：\n\n```bash\npip install -r requirements.txt\n```\n\n## 測試程式\n\n此專案使用 [pytest](https://docs.pytest.org/en/latest/) 測試框架來執行程式碼測試。\n\n您可以新增以 `test_` 為開頭的檔案/函式來新增測試。（例如：`test_topic.py` 檔案內有 `def test_sub_topic()` 測試函式）\n\n請從專案根目錄下使用以下命令來執行所有測試：\n\n```bash\npytest\n```\n\n您也可以使用以下命令執行特定測試：\n\n```bash\npytest ./path/to/the/test_file.py\n```\n\n## 檢查程式碼\n\n此專案使用 [pylint](http://pylint.pycqa.org/) 以及 [flake8](http://flake8.pycqa.org/en/latest/) 函式庫來執行程式碼檢查。\n\n### PyLint\n\n檢查撰寫之程式碼是否符合 [PEP 8](https://www.python.org/dev/peps/pep-0008/) 風格規範，請執行以下命令：\n\n```bash\npylint ./src/\n```\n\n若此檢查工具偵測到錯誤（例如：`missing-docstring`），您可以使用以下命令查看特定錯誤之詳細說明：\n\n```bash\npylint --help-msg=missing-docstring\n```\n\n[更多關於 PyLint](http://pylint.pycqa.org/)\n\n### Flake8\n\n檢查撰寫之程式碼是否符合 [PEP 8](https://www.python.org/dev/peps/pep-0008/) 風格規範，請執行以下命令：\n\n```bash\nflake8 . /src\n```\n\n若您希望得到更多詳細的輸出，您可以加上以下參數再執行此工具：\n\n```bash\nflake8 . /src --statistics --show-source --count\n```\n\n[更多關於 Flake8](http://flake8.pycqa.org/en/latest/)\n\n## 支持此專案\n\n您可以透過 ❤️️ [GitHub](https://github.com/sponsors/trekhleb) 或 ❤️️ [Patreon](https://www.patreon.com/trekhleb) 支持原作者專案\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.0263671875,
          "content": "theme: jekyll-theme-minimal"
        },
        {
          "name": "pylintrc",
          "type": "blob",
          "size": 16.833984375,
          "content": "[MASTER]\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code.\nextension-pkg-whitelist=\n\n# Add files or directories to the blacklist. They should be base names, not\n# paths.\nignore=CVS\n\n# Add files or directories matching the regex patterns to the blacklist. The\n# regex matches against base names, not paths.\nignore-patterns=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n# @TODO: Figure out how to AVOID HARD-CODING of sys.path in order to make pylint work with relative module imports\ninit-hook='sys.path.append('./src/modules')'\n\n# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the\n# number of processors available to use.\njobs=1\n\n# Control the amount of potential inferred values when inferring a single\n# object. This can help the performance when dealing with large functions or\n# complex, nested conditions.\nlimit-inference-results=100\n\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# Specify a configuration file.\n#rcfile=\n\n# When enabled, pylint would attempt to guess common misconfiguration and emit\n# user-friendly hints instead of false-positive error messages.\nsuggestion-mode=yes\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=no\n\n\n[MESSAGES CONTROL]\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED.\nconfidence=\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once). You can also use \"--disable=all\" to\n# disable everything first and then reenable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use \"--disable=all --enable=classes\n# --disable=W\".\ndisable=print-statement,\n        parameter-unpacking,\n        unpacking-in-except,\n        old-raise-syntax,\n        backtick,\n        long-suffix,\n        old-ne-operator,\n        old-octal-literal,\n        import-star-module-level,\n        non-ascii-bytes-literal,\n        raw-checker-failed,\n        bad-inline-option,\n        locally-disabled,\n        locally-enabled,\n        file-ignored,\n        suppressed-message,\n        useless-suppression,\n        deprecated-pragma,\n        use-symbolic-message-instead,\n        apply-builtin,\n        basestring-builtin,\n        buffer-builtin,\n        cmp-builtin,\n        coerce-builtin,\n        execfile-builtin,\n        file-builtin,\n        long-builtin,\n        raw_input-builtin,\n        reduce-builtin,\n        standarderror-builtin,\n        unicode-builtin,\n        xrange-builtin,\n        coerce-method,\n        delslice-method,\n        getslice-method,\n        setslice-method,\n        no-absolute-import,\n        old-division,\n        dict-iter-method,\n        dict-view-method,\n        next-method-called,\n        metaclass-assignment,\n        indexing-exception,\n        raising-string,\n        reload-builtin,\n        oct-method,\n        hex-method,\n        nonzero-method,\n        cmp-method,\n        input-builtin,\n        round-builtin,\n        intern-builtin,\n        unichr-builtin,\n        map-builtin-not-iterating,\n        zip-builtin-not-iterating,\n        range-builtin-not-iterating,\n        filter-builtin-not-iterating,\n        using-cmp-argument,\n        eq-without-hash,\n        div-method,\n        idiv-method,\n        rdiv-method,\n        exception-message-attribute,\n        invalid-str-codec,\n        sys-max-int,\n        bad-python3-import,\n        deprecated-string-function,\n        deprecated-str-translate-call,\n        deprecated-itertools-function,\n        deprecated-types-field,\n        next-method-defined,\n        dict-items-not-iterating,\n        dict-keys-not-iterating,\n        dict-values-not-iterating,\n        deprecated-operator-function,\n        deprecated-urllib-function,\n        xreadlines-attribute,\n        deprecated-sys-function,\n        exception-escape,\n        comprehension-escape\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once). See also the \"--disable\" option for examples.\nenable=c-extension-no-member\n\n\n[REPORTS]\n\n# Python expression which should return a note less than 10 (10 is the highest\n# note). You have access to the variables errors warning, statement which\n# respectively contain the number of errors / warnings messages and the total\n# number of statements analyzed. This is used by the global evaluation report\n# (RP0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details.\n#msg-template=\n\n# Set the output format. Available formats are text, parseable, colorized, json\n# and msvs (visual studio). You can also give a reporter class, e.g.\n# mypackage.mymodule.MyReporterClass.\noutput-format=text\n\n# Tells whether to display a full report or only the messages.\nreports=no\n\n# Activate the evaluation score.\nscore=yes\n\n\n[REFACTORING]\n\n# Maximum number of nested blocks for function / method body\nmax-nested-blocks=5\n\n# Complete name of functions that never returns. When checking for\n# inconsistent-return-statements if a never returning function is called then\n# it will be considered as an explicit return statement and no message will be\n# printed.\nnever-returning-functions=sys.exit\n\n\n[LOGGING]\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format.\nlogging-modules=logging\n\n\n[SPELLING]\n\n# Limits count of emitted suggestions for spelling mistakes.\nmax-spelling-suggestions=4\n\n# Spelling dictionary name. Available dictionaries: none. To make it working\n# install python-enchant package..\nspelling-dict=\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# A path to a file that contains private dictionary; one word per line.\nspelling-private-dict-file=\n\n# Tells whether to store unknown words to indicated private dictionary in\n# --spelling-private-dict-file option instead of raising a message.\nspelling-store-unknown-words=no\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,\n      XXX,\n      TODO\n\n\n[TYPECHECK]\n\n# List of decorators that produce context managers, such as\n# contextlib.contextmanager. Add to this list to register other decorators that\n# produce valid context managers.\ncontextmanager-decorators=contextlib.contextmanager\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# Tells whether to warn about missing members when the owner of the attribute\n# is inferred to be None.\nignore-none=yes\n\n# This flag controls whether pylint should warn about no-member and similar\n# checks whenever an opaque object is returned when inferring. The inference\n# can return multiple potential results while evaluating a Python object, but\n# some branches might not be evaluated, which results in partial inference. In\n# that case, it might be useful to still emit no-member and other checks for\n# the rest of the inferred objects.\nignore-on-opaque-inference=yes\n\n# List of class names for which member attributes should not be checked (useful\n# for classes with dynamically set attributes). This supports the use of\n# qualified names.\nignored-classes=optparse.Values,thread._local,_thread._local\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis. It\n# supports qualified module names, as well as Unix pattern matching.\nignored-modules=\n\n# Show a hint with possible names when a member name was not found. The aspect\n# of finding the hint is based on edit distance.\nmissing-member-hint=yes\n\n# The minimum edit distance a name should have in order to be considered a\n# similar match for a missing member name.\nmissing-member-hint-distance=1\n\n# The total number of similar names that should be taken in consideration when\n# showing a hint for a missing member.\nmissing-member-max-choices=1\n\n\n[VARIABLES]\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid to define new builtins when possible.\nadditional-builtins=\n\n# Tells whether unused global variables should be treated as a violation.\nallow-global-unused-variables=yes\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,\n          _cb\n\n# A regular expression matching the name of dummy variables (i.e. expected to\n# not be used).\ndummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_\n\n# Argument names that match this expression will be ignored. Default to name\n# with leading underscore.\nignored-argument-names=_.*|^ignored_|^unused_\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# List of qualified module names which can have objects that can redefine\n# builtins.\nredefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io\n\n\n[FORMAT]\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n\n# Number of spaces of indent required inside a hanging  or continued line.\nindent-after-paren=4\n\n# String used as indentation unit. This is usually \"    \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n# Maximum number of characters on a single line.\nmax-line-length=100\n\n# Maximum number of lines in a module.\nmax-module-lines=1000\n\n# List of optional constructs for which whitespace checking is disabled. `dict-\n# separator` is used to allow tabulation in dicts, etc.: {1  : 1,\\n222: 2}.\n# `trailing-comma` allows a space between comma and closing bracket: (a, ).\n# `empty-line` allows space-only lines.\nno-space-check=trailing-comma,\n               dict-separator\n\n# Allow the body of a class to be on the same line as the declaration if body\n# contains single statement.\nsingle-line-class-stmt=no\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=no\n\n\n[SIMILARITIES]\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=no\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n\n[BASIC]\n\n# Naming style matching correct argument names.\nargument-naming-style=snake_case\n\n# Regular expression matching correct argument names. Overrides argument-\n# naming-style.\n#argument-rgx=\n\n# Naming style matching correct attribute names.\nattr-naming-style=snake_case\n\n# Regular expression matching correct attribute names. Overrides attr-naming-\n# style.\n#attr-rgx=\n\n# Bad variable names which should always be refused, separated by a comma.\nbad-names=foo,\n          bar,\n          baz,\n          toto,\n          tutu,\n          tata\n\n# Naming style matching correct class attribute names.\nclass-attribute-naming-style=any\n\n# Regular expression matching correct class attribute names. Overrides class-\n# attribute-naming-style.\n#class-attribute-rgx=\n\n# Naming style matching correct class names.\nclass-naming-style=PascalCase\n\n# Regular expression matching correct class names. Overrides class-naming-\n# style.\n#class-rgx=\n\n# Naming style matching correct constant names.\nconst-naming-style=UPPER_CASE\n\n# Regular expression matching correct constant names. Overrides const-naming-\n# style.\n#const-rgx=\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=-1\n\n# Naming style matching correct function names.\nfunction-naming-style=snake_case\n\n# Regular expression matching correct function names. Overrides function-\n# naming-style.\n#function-rgx=\n\n# Good variable names which should always be accepted, separated by a comma.\ngood-names=i,\n           j,\n           k,\n           ex,\n           Run,\n           _\n\n# Include a hint for the correct naming format with invalid-name.\ninclude-naming-hint=no\n\n# Naming style matching correct inline iteration names.\ninlinevar-naming-style=any\n\n# Regular expression matching correct inline iteration names. Overrides\n# inlinevar-naming-style.\n#inlinevar-rgx=\n\n# Naming style matching correct method names.\nmethod-naming-style=snake_case\n\n# Regular expression matching correct method names. Overrides method-naming-\n# style.\n#method-rgx=\n\n# Naming style matching correct module names.\nmodule-naming-style=snake_case\n\n# Regular expression matching correct module names. Overrides module-naming-\n# style.\n#module-rgx=\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=^_\n\n# List of decorators that produce properties, such as abc.abstractproperty. Add\n# to this list to register other decorators that produce valid properties.\n# These decorators are taken in consideration only for invalid-name.\nproperty-classes=abc.abstractproperty\n\n# Naming style matching correct variable names.\nvariable-naming-style=snake_case\n\n# Regular expression matching correct variable names. Overrides variable-\n# naming-style.\n#variable-rgx=\n\n\n[IMPORTS]\n\n# Allow wildcard imports from modules that define __all__.\nallow-wildcard-with-all=no\n\n# Analyse import fallback blocks. This can be used to support both Python 2 and\n# 3 compatible code, which means that the block might have code that exists\n# only in one or another interpreter, leading to false positives when analysed.\nanalyse-fallback-blocks=no\n\n# Deprecated modules which should not be used, separated by a comma.\ndeprecated-modules=optparse,tkinter.tix\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled).\next-import-graph=\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled).\nimport-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled).\nint-import-graph=\n\n# Force import order to recognize a module as part of the standard\n# compatibility libraries.\nknown-standard-library=\n\n# Force import order to recognize a module as part of a third party library.\nknown-third-party=enchant\n\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,\n                      __new__,\n                      setUp\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,\n                  _fields,\n                  _replace,\n                  _source,\n                  _make\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=cls\n\n\n[DESIGN]\n\n# Maximum number of arguments for function / method.\nmax-args=5\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=7\n\n# Maximum number of boolean expressions in an if statement.\nmax-bool-expr=5\n\n# Maximum number of branch for function / method body.\nmax-branches=12\n\n# Maximum number of locals for function / method body.\nmax-locals=15\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n# Maximum number of return / yield for function / method body.\nmax-returns=6\n\n# Maximum number of statements in function / method body.\nmax-statements=50\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when being caught. Defaults to\n# \"Exception\".\novergeneral-exceptions=Exception\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.2451171875,
          "content": "astroid==2.0.4\natomicwrites==1.1.5\nattrs==18.1.0\nflake8==3.5.0\nisort==4.3.4\nlazy-object-proxy==1.3.1\nmccabe==0.6.1\nmore-itertools==4.3.0\npluggy==0.7.1\npy==1.5.4\npycodestyle==2.3.1\npyflakes==1.6.0\npylint==2.1.1\npytest==3.7.2\nsix==1.11.0\nwrapt==1.10.11\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}