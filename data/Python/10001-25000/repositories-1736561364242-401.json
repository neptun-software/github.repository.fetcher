{
  "metadata": {
    "timestamp": 1736561364242,
    "page": 401,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "amueller/word_cloud",
      "stars": 10240,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0341796875,
          "content": "wordcloud/_version.py export-subst\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.697265625,
          "content": "doc/_build\ndoc/auto_examples\ndoc/gen_modules\ndoc/generated\n\n# File created using '.gitignore Generator' for Visual Studio Code: https://bit.ly/vscode-gig\n\n# Created by https://www.gitignore.io/api/pycharm,python,visualstudiocode\n# Edit at https://www.gitignore.io/?templates=pycharm,python,visualstudiocode\n\n### PyCharm ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff\n.idea/**/workspace.xml\n.idea/**/tasks.xml\n.idea/**/usage.statistics.xml\n.idea/**/dictionaries\n.idea/**/shelf\n\n# Generated files\n.idea/**/contentModel.xml\n\n# Sensitive or high-churn files\n.idea/**/dataSources/\n.idea/**/dataSources.ids\n.idea/**/dataSources.local.xml\n.idea/**/sqlDataSources.xml\n.idea/**/dynamic.xml\n.idea/**/uiDesigner.xml\n.idea/**/dbnavigator.xml\n\n# Gradle\n.idea/**/gradle.xml\n.idea/**/libraries\n\n# Gradle and Maven with auto-import\n# When using Gradle or Maven with auto-import, you should exclude module files,\n# since they will be recreated, and may cause churn.  Uncomment if using\n# auto-import.\n# .idea/modules.xml\n# .idea/*.iml\n# .idea/modules\n\n# CMake\ncmake-build-*/\n\n# Mongo Explorer plugin\n.idea/**/mongoSettings.xml\n\n# File-based project format\n*.iws\n\n# IntelliJ\nout/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# VSCode\n.vscode\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Cursive Clojure plugin\n.idea/replstate.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n# Editor-based Rest Client\n.idea/httpRequests\n\n# Android studio 3.1+ serialized cache file\n.idea/caches/build_file_checksums.ser\n\n### PyCharm Patch ###\n# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721\n\n# *.iml\n# modules.xml\n# .idea/misc.xml\n# *.ipr\n\n# Sonarlint plugin\n.idea/sonarlint\n\n### Python ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n### Python Patch ###\n.venv/\n\n### VisualStudioCode ###\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n\n### VisualStudioCode Patch ###\n# Ignore all local history of files\n.history\n\n# End of https://www.gitignore.io/api/pycharm,python,visualstudiocode\n\n# Custom rules (everything added below won't be overriden by 'Generate .gitignore File' if you use 'Update' option)\n\nwordcloud/_version.py\nwordcloud/query_integral_image.c\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.228515625,
          "content": "cff-version: 1.2.0\nauthors:\n- family-names: \"Mueller\"\n  given-names: \"Andreas C\"\n  orcid: \"https://orcid.org/0000-0002-2349-9428\"\n\ntitle: \"Wordcloud\"\nversion: 1.9.1\ndate-released: 2023-4-27\nurl: \"https://github.com/amueller/wordcloud\""
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.7998046875,
          "content": "# Contributing\n\nTo contribute to wordcloud, you'll need to follow the instructions in\n[Creating a pull request from a fork](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request-from-a-fork).\n\nIn addition to the general procedure for creating a pull request, please follow\nthe following steps:\n\n## Before starting development\n\n### Use a correct version of Python\n\nPython 3.7.x should be fine for development.\n\n```\npython --version\n> Python 3.7.6\n```\n\n### Install all dependencies\n\n```\npip install -U -r requirements.txt -r requirements-dev.txt\n```\n\n### Ensure that files are correctly formatted\n\n```\nflake8\n```\n\n### Ensure that tests pass\n\n```\npip install -e .\npytest\n```\n\n## Before creating a pull request\n\n### Confirm formatting and test passage\n\n```\nflake8\npytest\n```\n"
        },
        {
          "name": "ISSUE_TEMPLATE.md",
          "type": "blob",
          "size": 1.1943359375,
          "content": "#### Description\n<!-- Example: Duplicate words shown when input is sorted list -->\n\n#### Steps/Code to Reproduce\n<!--\nIt's unlikely your issue can be resolved unless you provide\na short, self contained correct example to reproduce (see http://sscce.org/).\n\nExample:\n```python\nimport matplotlib as mpl\nmpl.use('Agg')\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\na = 'this is a wordcloud show test'\nwc = WordCloud().generate(a)\nwc.to_file('wc.jpg')\nplt.imshow(wc)\nplt.axis('off')\nplt.savefig('plt.png')\n```\nIf the code is too long, feel free to put it in a public gist and link\nit in the issue: https://gist.github.com\n-->\n\n#### Expected Results\n<!-- Example: No error is thrown. Please paste or describe the expected results.-->\n\n#### Actual Results\n<!-- Please paste or specifically describe the actual output or traceback. -->\n\n#### Versions\n<!--\nPlease run the following snippet and paste the output below.\nimport platform; print(platform.platform())\nimport sys; print(\"Python\", sys.version)\nimport numpy; print(\"NumPy\", numpy.__version__)\nimport matplotlib; print(\"matplotlib\", matplotlib.__version__)\nimport wordcloud; print(\"wordcoud\", wordcloud.__version__)\n-->\n\n\n<!-- Thanks for contributing! -->\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "Copyright (c) 2012 Andreas Christian Mueller\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0732421875,
          "content": "include wordcloud/_version.py\nexclude wordcloud/*.c\nexclude wordcloud/TODO\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.900390625,
          "content": "[![licence](http://img.shields.io/badge/licence-MIT-blue.svg?style=flat)](https://github.com/amueller/word_cloud/blob/master/LICENSE)\n[![DOI](https://zenodo.org/badge/21369/amueller/word_cloud.svg)](https://zenodo.org/badge/latestdoi/21369/amueller/word_cloud)\n\n\nword_cloud\n==========\n\nA little word cloud generator in Python. Read more about it on the [blog\npost][blog-post] or the [website][website].\n\nThe code is tested against Python 3.7, 3.8, 3.9, 3.10, 3.11, 3.12, 3.13.\n\n## Installation\n\nIf you are using pip:\n\n    pip install wordcloud\n\nIf you are using conda, you can install from the `conda-forge` channel:\n\n    conda install -c conda-forge wordcloud\n\n\n#### Installation notes\n\nwordcloud depends on `numpy`, `pillow`, and `matplotlib`.\n\nIf there are no wheels available for your version of python, installing the\npackage requires having a C compiler set up. Before installing a compiler, report\nan issue describing the version of python and operating system being used.\n\n\n## Examples\n\nCheck out [examples/simple.py][simple] for a short intro. A sample output is:\n\n![Constitution](examples/constitution.png)\n\nOr run [examples/masked.py][masked] to see more options. A sample output is:\n\n![Alice in Wonderland](examples/alice.png)\n\nGetting fancy with some colors:\n![Parrot with rainbow colors](examples/parrot_new.png)\n\nGenerating wordclouds for Arabic:\n\n![Arabic wordlcloud](examples/arabic_example.png)\n\n\n## Command-line usage\n\nThe `wordcloud_cli` tool can be used to generate word clouds directly from the command-line:\n\n\t$ wordcloud_cli --text mytext.txt --imagefile wordcloud.png\n\nIf you're dealing with PDF files, then `pdftotext`, included by default with many Linux distribution, comes in handy:\n\n\t$ pdftotext mydocument.pdf - | wordcloud_cli --imagefile wordcloud.png\n\nIn the previous example, the `-` argument orders `pdftotext` to write the resulting text to stdout, which is then piped to the stdin of `wordcloud_cli.py`.\n\nUse `wordcloud_cli --help` so see all available options.\n\n[blog-post]: http://peekaboo-vision.blogspot.de/2012/11/a-wordcloud-in-python.html\n[website]: http://amueller.github.io/word_cloud/\n[simple]: examples/simple.py\n[masked]: examples/masked.py\n[reddit-cloud]: https://github.com/amueller/reddit-cloud\n[wc2]: http://www.reddit.com/user/WordCloudBot2\n[wc2top]: http://www.reddit.com/user/WordCloudBot2/?sort=top\n[chat-stats]: https://github.com/popcorncolonel/Chat_stats\n[twitter-word-cloud-bot]: https://github.com/defacto133/twitter-wordcloud-bot\n[twitter-wordnuvola]: https://twitter.com/wordnuvola\n[imgur-wordnuvola]: http://defacto133.imgur.com/all/\n[intprob]: http://peekaboo-vision.blogspot.de/2012/11/a-wordcloud-in-python.html#bc_0_28B\n\n\n## Licensing\nThe wordcloud library is MIT licenced, but contains DroidSansMono.ttf, a true type font by Google, that is apache licensed.\nThe font is by no means integral, and any other font can be used by setting the ``font_path`` variable when creating a ``WordCloud`` object.\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.6904296875,
          "content": "[build-system]\nrequires = [\"setuptools\", \"Cython>=0.29.33\", \"setuptools_scm\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"wordcloud\"\nauthors = [{ name = \"Andreas Mueller\", email = \"t3kcit+wordcloud@gmail.com\" }]\ndescription = \"A little word cloud generator\"\nreadme = { file = \"README.md\", content-type = \"text/markdown\" }\nrequires-python = \">=3.7\"\nlicense = { text = \"MIT License\" }\ndependencies = [\"numpy>=1.6.1\", \"pillow\", \"matplotlib\"]\ndynamic = [\"version\"]\n\n[project.urls]\nHomepage = \"https://github.com/amueller/word_cloud\"\n\n[project.scripts]\nwordcloud_cli = \"wordcloud.__main__:main\"\n\n[tool.setuptools]\npackages = [\"wordcloud\"]\n\n[tool.setuptools_scm]\nwrite_to = \"wordcloud/_version.py\"\n"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.0986328125,
          "content": "codecov\ncoverage\nflake8>=3.8.0\npytest\npytest-cov\npytest-sugar\nsetuptools>=28.0.0\ntwine\nwheel>=0.38.1\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.04296875,
          "content": "matplotlib>=1.5.3\nnumpy>=1.6.1\npillow\ncython"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.63671875,
          "content": "[coverage:run]\nbranch = True\nsource = wordcloud\n\n[coverage:xml]\noutput = test/coverage.xml\n\n[flake8]\nignore =\n  E402  # module level import not at top of file\n  W503  # line break before binary operator\nmax-line-length = 120\n# Whether to display the pep8 instructions on failure (can be quite verbose)\nshow-pep8 =  False\n# Whether to show source code for each failure\nshow-source = True\n# Maximum cyclomatic complexity allowed\nmax-complexity = 14\nformat = pylint\nexclude = .git,.idea,.eggs,__pycache__,dist,doc/_build,doc/auto_examples,doc/conf.py,build,wordcloud/_version.py,versioneer.py\n\n[tool:pytest]\naddopts = -v --cov --cov-report xml --tb=short\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.12890625,
          "content": "from setuptools import setup\nfrom Cython.Build import cythonize\n\nsetup(ext_modules=cythonize(\"wordcloud/query_integral_image.pyx\"))\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "wordcloud",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}