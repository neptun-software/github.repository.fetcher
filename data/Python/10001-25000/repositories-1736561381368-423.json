{
  "metadata": {
    "timestamp": 1736561381368,
    "page": 423,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjQyNg==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "deepseek-ai/DeepSeek-Coder",
      "stars": 10037,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0712890625,
          "content": "__pycache__/\nEvaluation/MBPP/eval_instruct.sh\nEvaluation/LeetCode/output/"
        },
        {
          "name": "Evaluation",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE-CODE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2023 DeepSeek\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "LICENSE-MODEL",
          "type": "blob",
          "size": 13.4375,
          "content": "DEEPSEEK LICENSE AGREEMENT\n\nVersion 1.0, 23 October 2023\n\nCopyright (c) 2023 DeepSeek\n\nSection I: PREAMBLE \n\nLarge generative models are being widely adopted and used, and have the potential to transform the way individuals conceive and benefit from AI or ML technologies. \n\nNotwithstanding the current and potential benefits that these artifacts can bring to society at large, there are also concerns about potential misuses of them, either due to their technical limitations or ethical considerations. \n\nIn short, this license strives for both the open and responsible downstream use of the accompanying model. When it comes to the open character, we took inspiration from open source permissive licenses regarding the grant of IP rights. Referring to the downstream responsible use, we added use-based restrictions not permitting the use of the model in very specific scenarios, in order for the licensor to be able to enforce the license in case potential misuses of the Model may occur. At the same time, we strive to promote open and responsible research on generative models for content generation. \n\nEven though downstream derivative versions of the model could be released under different licensing terms, the latter will always have to include - at minimum - the same use-based restrictions as the ones in the original license (this license). We believe in the intersection between open and responsible AI development; thus, this agreement aims to strike a balance between both in order to enable responsible open-science in the field of AI. \n\nThis License governs the use of the model (and its derivatives) and is informed by the model card associated with the model. \n\nNOW THEREFORE, You and DeepSeek agree as follows: \n\n1. Definitions \n\"License\" means the terms and conditions for use, reproduction, and Distribution as defined in this document. \n\"Data\" means a collection of information and/or content extracted from the dataset used with the Model, including to train, pretrain, or otherwise evaluate the Model. The Data is not licensed under this License.\n\"Output\" means the results of operating a Model as embodied in informational content resulting therefrom. \n\"Model\" means any accompanying machine-learning based assemblies (including checkpoints), consisting of learnt weights, parameters (including optimizer states), corresponding to the model architecture as embodied in the Complementary Material, that have been trained or tuned, in whole or in part on the Data, using the Complementary Material. \n\"Derivatives of the Model\" means all modifications to the Model, works based on the Model, or any other model which is created or initialized by transfer of patterns of the weights, parameters, activations or output of the Model, to the other model, in order to cause the other model to perform similarly to the Model, including - but not limited to - distillation methods entailing the use of intermediate data representations or methods based on the generation of synthetic data by the Model for training the other model. \n\"Complementary Material\" means the accompanying source code and scripts used to define, run, load, benchmark or evaluate the Model, and used to prepare data for training or evaluation, if any. This includes any accompanying documentation, tutorials, examples, etc, if any. \n\"Distribution\" means any transmission, reproduction, publication or other sharing of the Model or Derivatives of the Model to a third party, including providing the Model as a hosted service made available by electronic or other remote means - e.g. API-based or web access. \n\"DeepSeek\" (or \"we\") means Beijing DeepSeek Artificial Intelligence Fundamental Technology Research Co., Ltd., Hangzhou DeepSeek Artificial Intelligence Fundamental Technology Research Co., Ltd. and/or any of their affiliates.\n\"You\" (or \"Your\") means an individual or Legal Entity exercising permissions granted by this License and/or making use of the Model for whichever purpose and in any field of use, including usage of the Model in an end-use application - e.g. chatbot, translator, etc. \n\"Third Parties\" means individuals or legal entities that are not under common control with DeepSeek or You. \n\nSection II: INTELLECTUAL PROPERTY RIGHTS \n\nBoth copyright and patent grants apply to the Model, Derivatives of the Model and Complementary Material. The Model and Derivatives of the Model are subject to additional terms as described in Section III. \n\n2. Grant of Copyright License. Subject to the terms and conditions of this License, DeepSeek hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare, publicly display, publicly perform, sublicense, and distribute the Complementary Material, the Model, and Derivatives of the Model. \n\n3. Grant of Patent License. Subject to the terms and conditions of this License and where and as applicable, DeepSeek hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this paragraph) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Model and the Complementary Material, where such license applies only to those patent claims licensable by DeepSeek that are necessarily infringed by its contribution(s). If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Model and/or Complementary Material constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for the Model and/or works shall terminate as of the date such litigation is asserted or filed. \n\n\nSection III: CONDITIONS OF USAGE, DISTRIBUTION AND REDISTRIBUTION\n\n4. Distribution and Redistribution. You may host for Third Party remote access purposes (e.g. software-as-a-service), reproduce and distribute copies of the Model or Derivatives of the Model thereof in any medium, with or without modifications, provided that You meet the following conditions: \na. Use-based restrictions as referenced in paragraph 5 MUST be included as an enforceable provision by You in any type of legal agreement (e.g. a license) governing the use and/or distribution of the Model or Derivatives of the Model, and You shall give notice to subsequent users You Distribute to, that the Model or Derivatives of the Model are subject to paragraph 5. This provision does not apply to the use of Complementary Material. \nb. You must give any Third Party recipients of the Model or Derivatives of the Model a copy of this License; \nc. You must cause any modified files to carry prominent notices stating that You changed the files; \nd. You must retain all copyright, patent, trademark, and attribution notices excluding those notices that do not pertain to any part of the Model, Derivatives of the Model. \ne. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions - respecting paragraph 4.a. – for use, reproduction, or Distribution of Your modifications, or for any such Derivatives of the Model as a whole, provided Your use, reproduction, and Distribution of the Model otherwise complies with the conditions stated in this License. \n\n5. Use-based restrictions. The restrictions set forth in Attachment A are considered Use-based restrictions. Therefore You cannot use the Model and the Derivatives of the Model for the specified restricted uses. You may use the Model subject to this License, including only for lawful purposes and in accordance with the License. Use may include creating any content with, finetuning, updating, running, training, evaluating and/or reparametrizing the Model. You shall require all of Your users who use the Model or a Derivative of the Model to comply with the terms of this paragraph (paragraph 5). \n\n6. The Output You Generate. Except as set forth herein, DeepSeek claims no rights in the Output You generate using the Model. You are accountable for the Output you generate and its subsequent uses. No use of the output can contravene any provision as stated in the License.\n\nSection IV: OTHER PROVISIONS \n\n7. Updates and Runtime Restrictions. To the maximum extent permitted by law, DeepSeek reserves the right to restrict (remotely or otherwise) usage of the Model in violation of this License. \n\n8. Trademarks and related. Nothing in this License permits You to make use of DeepSeek’ trademarks, trade names, logos or to otherwise suggest endorsement or misrepresent the relationship between the parties; and any rights not expressly granted herein are reserved by DeepSeek. \n\n9. Personal information, IP rights and related. This Model may contain personal information and works with IP rights. You commit to complying with applicable laws and regulations in the handling of personal information and the use of such works. Please note that DeepSeek's license granted to you to use the Model does not imply that you have obtained a legitimate basis for processing the related information or works. As an independent personal information processor and IP rights user, you need to ensure full compliance with relevant legal and regulatory requirements when handling personal information and works with IP rights that may be contained in the Model, and are willing to assume solely any risks and consequences that may arise from that.\n\n10. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, DeepSeek provides the Model and the Complementary Material on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Model, Derivatives of the Model, and the Complementary Material and assume any risks associated with Your exercise of permissions under this License. \n\n11. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall DeepSeek be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Model and the Complementary Material (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if DeepSeek has been advised of the possibility of such damages. \n\n12. Accepting Warranty or Additional Liability. While redistributing the Model, Derivatives of the Model and the Complementary Material thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of DeepSeek, and only if You agree to indemnify, defend, and hold DeepSeek harmless for any liability incurred by, or claims asserted against, DeepSeek by reason of your accepting any such warranty or additional liability. \n\n13. If any provision of this License is held to be invalid, illegal or unenforceable, the remaining provisions shall be unaffected thereby and remain valid as if such provision had not been set forth herein.\n\n14. Governing Law and Jurisdiction. This agreement will be governed and construed under PRC laws without regard to choice of law principles, and the UN Convention on Contracts for the International Sale of Goods does not apply to this agreement. The courts located in the domicile of Hangzhou DeepSeek Artificial Intelligence Fundamental Technology Research Co., Ltd. shall have exclusive jurisdiction of any dispute arising out of this agreement.\n\nEND OF TERMS AND CONDITIONS\n\nAttachment A \n\nUse Restrictions\n\nYou agree not to use the Model or Derivatives of the Model:\n\n-\tIn any way that violates any applicable national or international law or regulation or infringes upon the lawful rights and interests of any third party; \n-\tFor military use in any way;\n-\tFor the purpose of exploiting, harming or attempting to exploit or harm minors in any way; \n-\tTo generate or disseminate verifiably false information and/or content with the purpose of harming others; \n-\tTo generate or disseminate inappropriate content subject to applicable regulatory requirements;\n-\tTo generate or disseminate personal identifiable information without due authorization or for unreasonable use; \n-\tTo defame, disparage or otherwise harass others; \n-\tFor fully automated decision making that adversely impacts an individual’s legal rights or otherwise creates or modifies a binding, enforceable obligation; \n-\tFor any use intended to or which has the effect of discriminating against or harming individuals or groups based on online or offline social behavior or known or predicted personal or personality characteristics; \n-\tTo exploit any of the vulnerabilities of a specific group of persons based on their age, social, physical or mental characteristics, in order to materially distort the behavior of a person pertaining to that group in a manner that causes or is likely to cause that person or another person physical or psychological harm; \n-\tFor any use intended to or which has the effect of discriminating against individuals or groups based on legally protected characteristics or categories.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.8701171875,
          "content": "<p align=\"center\">\n<img width=\"1000px\" alt=\"DeepSeek Coder\" src=\"pictures/logo.png\">\n</p>\n<p align=\"center\"><a href=\"https://www.deepseek.com/\">[<img src=\"pictures/home.png\" width=\"20px\"> Homepage]</a> | <a href=\"https://coder.deepseek.com/\">[🤖 Chat with DeepSeek Coder]</a> | <a href=\"https://huggingface.co/deepseek-ai\">[🤗 Models Download]</a> | <a href=\"https://discord.gg/Tc7c45Zzu5\">[Discord]</a> | <a href=\"https://github.com/guoday/assert/blob/main/QR.png?raw=true\">[WeChat (微信)]</a></p>\n<p align=\"center\">\n  <a href=\"https://huggingface.co/papers/2401.14196\"><b>Paper Link</b>👁️</a>\n</p>\n<hr>\n\n\n### 1. Introduction of DeepSeek Coder\n\nDeepSeek Coder is composed of a series of code language models, each trained from scratch on 2T tokens, with a composition of 87% code and 13% natural language in both English and Chinese. We provide various sizes of the code model, ranging from 1B to 33B versions. Each model is pre-trained on project-level code corpus by employing a window size of 16K and an extra fill-in-the-blank task, to support project-level code completion and infilling. For coding capabilities, DeepSeek Coder achieves state-of-the-art performance among open-source code models on multiple programming languages and various benchmarks.\n\n<p align=\"center\">\n<img src=\"pictures/result.png\" alt=\"result\" width=\"70%\">\n</p>\n\n- **Massive Training Data**: Trained from scratch on 2T tokens, including 87% code and 13% linguistic data in both English and Chinese languages.\n\n- **Highly Flexible & Scalable**: Offered in model sizes of 1B, 5.7B, 6.7B and 33B, enabling users to choose the setup most suitable for their requirements.\n\n- **Superior Model Performance**: State-of-the-art performance among publicly available code models on HumanEval, MultiPL-E, MBPP, DS-1000, and APPS benchmarks.\n\n- **Advanced Code Completion Capabilities**: A window size of 16K and a fill-in-the-blank task, supporting project-level code completion and infilling tasks.\n\n#### Supported Programming Languages\n`['ada', 'agda', 'alloy', 'antlr', 'applescript', 'assembly', 'augeas', 'awk', 'batchfile', 'bluespec', 'c', 'c-sharp', 'clojure', 'cmake', 'coffeescript', 'common-lisp', 'cpp', 'css', 'cuda', 'dart', 'dockerfile', 'elixir', 'elm', 'emacs-lisp', 'erlang', 'f-sharp', 'fortran', 'glsl', 'go', 'groovy', 'haskell', 'html', 'idris', 'isabelle', 'java', 'java-server-pages', 'javascript', 'json', 'julia', 'jupyter-notebook', 'kotlin', 'lean', 'literate-agda', 'literate-coffeescript', 'literate-haskell', 'lua', 'makefile', 'maple', 'markdown', 'mathematica', 'matlab', 'ocaml', 'pascal', 'perl', 'php', 'powershell', 'prolog', 'protocol-buffer', 'python', 'r', 'racket', 'restructuredtext', 'rmarkdown', 'ruby', 'rust', 'sas', 'scala', 'scheme', 'shell', 'smalltalk', 'solidity', 'sparql', 'sql', 'stan', 'standard-ml', 'stata', 'systemverilog', 'tcl', 'tcsh', 'tex', 'thrift', 'typescript', 'verilog', 'vhdl', 'visual-basic', 'xslt', 'yacc', 'yaml', 'zig']`\n\n### 2. Evaluation Results\nWe evaluate DeepSeek Coder on various coding-related benchmarks.\nOnly `pass@1` results on HumanEval (Python and Multilingual), MBPP, and DS-1000 are reported here:\n\n<p align=\"center\">\n<img src=\"pictures/table.png\" alt=\"table\" width=\"70%\">\n</p>\n\n\nThe result shows that DeepSeek-Coder-Base-33B significantly outperforms existing open-source code LLMs. Compared with CodeLlama-34B, it leads by 7.9%, 9.3%, 10.8% and 5.9% respectively on HumanEval Python, HumanEval Multilingual, MBPP and DS-1000.\nSurprisingly, our DeepSeek-Coder-Base-7B reaches the performance of CodeLlama-34B.\nThe DeepSeek-Coder-Instruct-33B model after instruction tuning outperforms GPT35-turbo on HumanEval and achieves comparable results with GPT35-turbo on MBPP.\n\nMore evaluation details can be found in the [Detailed Evaluation](#6-detailed-evaluation-results).\n\n\n### 3. Procedure of Data Creation and Model Training\n\n#### Data Creation\n\n- Step 1: Collect code data from GitHub and apply the same filtering rules as [StarCoder Data](https://github.com/bigcode-project/bigcode-dataset) to filter data.\n- Step 2: Parsing the dependencies of files within the same repository to rearrange the file positions based on their dependencies.\n- Step 3: Concatenating dependent files to form a single example and employ repo-level minhash for deduplication.\n- Step 4: Further filtering out low-quality code, such as codes with syntax errors or poor readability.\n\n<img src=\"pictures/data_clean.png\" alt=\"data_creation\" width=\"100%\">\n\n#### Model Training\n\n- Step 1: Initially pre-trained with a dataset consisting of 87% code, 10% code-related language (Github Markdown and StackExchange), and 3% non-code-related Chinese language. Models are pre-trained using 1.8T tokens and a 4K window size in this step.\n- Step 2: Further Pre-training using an extended 16K window size on an additional 200B tokens, resulting in foundational models (**DeepSeek-Coder-Base**).\n- Step 3: Instruction Fine-tuning on 2B tokens of instruction data, resulting in instruction-tuned models (**DeepSeek-Coder-Instruct**).\n\n<img src=\"pictures/model_pretraining.png\" alt=\"model_pretraining\" width=\"100%\">\n\n\n### 4. How to Use\nBefore proceeding, you'll need to install the necessary dependencies. You can do this by running the following command:\n```\npip install -r requirements.txt\n```\nA demo is also available on the [🤗 Hugging Face Space](https://huggingface.co/spaces/deepseek-ai/deepseek-coder-33b-instruct), and you can run the demo locally using `app.py` in the [demo](https://github.com/deepseek-ai/deepseek-coder/tree/main/demo) folder.  (Thanks to all the HF team for their support)\n\nHere are some examples of how to use our model.\n\n#### 1) Code Completion\n```python\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\nimport torch\ntokenizer = AutoTokenizer.from_pretrained(\"deepseek-ai/deepseek-coder-6.7b-base\", trust_remote_code=True)\nmodel = AutoModelForCausalLM.from_pretrained(\"deepseek-ai/deepseek-coder-6.7b-base\", trust_remote_code=True, torch_dtype=torch.bfloat16).cuda()\ninput_text = \"#write a quick sort algorithm\"\ninputs = tokenizer(input_text, return_tensors=\"pt\").to(model.device)\noutputs = model.generate(**inputs, max_length=128)\nprint(tokenizer.decode(outputs[0], skip_special_tokens=True))\n```\nThis code will output the following result:\n```\ndef quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range(1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    return quick_sort(left) + [pivot] + quick_sort(right)\n```\n\n#### 2) Code Insertion\n```python\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\nimport torch\ntokenizer = AutoTokenizer.from_pretrained(\"deepseek-ai/deepseek-coder-6.7b-base\", trust_remote_code=True)\nmodel = AutoModelForCausalLM.from_pretrained(\"deepseek-ai/deepseek-coder-6.7b-base\", trust_remote_code=True, torch_dtype=torch.bfloat16).cuda()\ninput_text = \"\"\"<｜fim▁begin｜>def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n<｜fim▁hole｜>\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    return quick_sort(left) + [pivot] + quick_sort(right)<｜fim▁end｜>\"\"\"\ninputs = tokenizer(input_text, return_tensors=\"pt\").to(model.device)\noutputs = model.generate(**inputs, max_length=128)\nprint(tokenizer.decode(outputs[0], skip_special_tokens=True)[len(input_text):])\n```\nThis code will output the following result:\n```\n   for i in range(1, len(arr)):\n```\n\n#### 3) Chat Model Inference\n```python\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\nimport torch\ntokenizer = AutoTokenizer.from_pretrained(\"deepseek-ai/deepseek-coder-6.7b-instruct\", trust_remote_code=True)\nmodel = AutoModelForCausalLM.from_pretrained(\"deepseek-ai/deepseek-coder-6.7b-instruct\", trust_remote_code=True, torch_dtype=torch.bfloat16).cuda()\nmessages=[\n    { 'role': 'user', 'content': \"write a quick sort algorithm in python.\"}\n]\ninputs = tokenizer.apply_chat_template(messages, add_generation_prompt=True, return_tensors=\"pt\").to(model.device)\n# tokenizer.eos_token_id is the id of <|EOT|> token\noutputs = model.generate(inputs, max_new_tokens=512, do_sample=False, top_k=50, top_p=0.95, num_return_sequences=1, eos_token_id=tokenizer.eos_token_id)\nprint(tokenizer.decode(outputs[0][len(inputs[0]):], skip_special_tokens=True))\n```\nThis code will output the following result:\n```\nSure, here is a simple implementation of the Quick Sort algorithm in Python:\n\ndef quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[0]\n        less_than_pivot = [x for x in arr[1:] if x <= pivot]\n        greater_than_pivot = [x for x in arr[1:] if x > pivot]\n        return quick_sort(less_than_pivot) + [pivot] + quick_sort(greater_than_pivot)\n\n# Test the function\narr = [10, 7, 8, 9, 1, 5]\nprint(\"Original array:\", arr)\nprint(\"Sorted array:\", quick_sort(arr))\n\nThis code works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The pivot element is then in its final position. The process is then repeated for the sub-arrays.\n```\n\nIf you don't want to use the provided API `apply_chat_template` which loads the template from `tokenizer_config.json`, you can use the following template to chat with our model. Replace the `['content']` with your instructions and the model's previous (if any) responses, then the model will generate the response to the currently given instruction.\n```\nYou are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n### Instruction:\n['content']\n### Response:\n['content']\n<|EOT|>\n### Instruction:\n['content']\n### Response:\n\n```\n\n#### 4) Repository Level Code Completion\n```python\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\nimport torch\ntokenizer = AutoTokenizer.from_pretrained(\"deepseek-ai/deepseek-coder-6.7b-base\", trust_remote_code=True)\nmodel = AutoModelForCausalLM.from_pretrained(\"deepseek-ai/deepseek-coder-6.7b-base\", trust_remote_code=True, torch_dtype=torch.bfloat16).cuda()\n\ninput_text = \"\"\"#utils.py\nimport torch\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score\n\ndef load_data():\n    iris = datasets.load_iris()\n    X = iris.data\n    y = iris.target\n\n    # Standardize the data\n    scaler = StandardScaler()\n    X = scaler.fit_transform(X)\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n    # Convert numpy data to PyTorch tensors\n    X_train = torch.tensor(X_train, dtype=torch.float32)\n    X_test = torch.tensor(X_test, dtype=torch.float32)\n    y_train = torch.tensor(y_train, dtype=torch.int64)\n    y_test = torch.tensor(y_test, dtype=torch.int64)\n\n    return X_train, X_test, y_train, y_test\n\ndef evaluate_predictions(y_test, y_pred):\n    return accuracy_score(y_test, y_pred)\n\n\n# model.py\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, TensorDataset\n\nclass IrisClassifier(nn.Module):\n    def __init__(self):\n        super(IrisClassifier, self).__init__()\n        self.fc = nn.Sequential(\n            nn.Linear(4, 16),\n            nn.ReLU(),\n            nn.Linear(16, 3)\n        )\n\n    def forward(self, x):\n        return self.fc(x)\n\n    def train_model(self, X_train, y_train, epochs, lr, batch_size):\n        criterion = nn.CrossEntropyLoss()\n        optimizer = optim.Adam(self.parameters(), lr=lr)\n\n        # Create DataLoader for batches\n        dataset = TensorDataset(X_train, y_train)\n        dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)\n\n        for epoch in range(epochs):\n            for batch_X, batch_y in dataloader:\n                optimizer.zero_grad()\n                outputs = self(batch_X)\n                loss = criterion(outputs, batch_y)\n                loss.backward()\n                optimizer.step()\n\n    def predict(self, X_test):\n        with torch.no_grad():\n            outputs = self(X_test)\n            _, predicted = outputs.max(1)\n        return predicted.numpy()\n\n\n# main.py\nfrom utils import load_data, evaluate_predictions\nfrom model import IrisClassifier as Classifier\n\ndef main():\n    # Model training and evaluation\n\"\"\"\ninputs = tokenizer(input_text, return_tensors=\"pt\").to(model.device)\noutputs = model.generate(**inputs, max_new_tokens=140)\nprint(tokenizer.decode(outputs[0]))\n```\n\n---\nIn the following scenario, the DeepSeek-Coder-6.7B model effectively calls a class **IrisClassifier** and its member function from the `model.py` file, and also utilizes functions from the `utils.py` file, to correctly complete the **main** function in the `main.py` file for model training and evaluation.\n\n![Completion GIF](pictures/completion_demo.gif)\n\n### 5. How to Fine-tune DeepSeek-Coder\n\nWe provide script `finetune/finetune_deepseekcoder.py` for users to finetune our models on downstream tasks.\n\nThe script supports the training with [DeepSpeed](https://github.com/microsoft/DeepSpeed). You need install required packages by:\n\n```bash\npip install -r finetune/requirements.txt\n```\n\nPlease follow [Sample Dataset Format](https://huggingface.co/datasets/nickrosh/Evol-Instruct-Code-80k-v1) to prepare your training data.\nEach line is a json-serialized string with two required fields `instruction` and `output`.\n\nAfter data preparation, you can use the sample shell script to finetune `deepseek-ai/deepseek-coder-6.7b-instruct`. \nRemember to specify `DATA_PATH`, `OUTPUT_PATH`.\nAnd please choose appropriate hyper-parameters(e.g., `learning_rate`, `per_device_train_batch_size`) according to your scenario.\n\n```bash\nDATA_PATH=\"<your_data_path>\"\nOUTPUT_PATH=\"<your_output_path>\"\nMODEL=\"deepseek-ai/deepseek-coder-6.7b-instruct\"\n\ncd finetune && deepspeed finetune_deepseekcoder.py \\\n    --model_name_or_path $MODEL_PATH \\\n    --data_path $DATA_PATH \\\n    --output_dir $OUTPUT_PATH \\\n    --num_train_epochs 3 \\\n    --model_max_length 1024 \\\n    --per_device_train_batch_size 16 \\\n    --per_device_eval_batch_size 1 \\\n    --gradient_accumulation_steps 4 \\\n    --evaluation_strategy \"no\" \\\n    --save_strategy \"steps\" \\\n    --save_steps 100 \\\n    --save_total_limit 100 \\\n    --learning_rate 2e-5 \\\n    --warmup_steps 10 \\\n    --logging_steps 1 \\\n    --lr_scheduler_type \"cosine\" \\\n    --gradient_checkpointing True \\\n    --report_to \"tensorboard\" \\\n    --deepspeed configs/ds_config_zero3.json \\\n    --bf16 True\n```\n\n### 6. Detailed Evaluation Results\n\nThe reproducible code for the following evaluation results can be found in the [Evaluation](https://github.com/deepseek-ai/deepseek-coder/tree/main/Evaluation) directory.\n#### 1) Multilingual HumanEval Benchmark\n![HumanEval](pictures/HumanEval.png)\n\n#### 2) MBPP Benchmark\n<img src=\"pictures/MBPP.png\" alt=\"MBPP\" width=\"40%\">\n\n#### 3) DS-1000 Benchmark\n![DS-1000](pictures/DS-1000.png)\n\n#### 4) Program-Aid Math Reasoning Benchmark\n![Math](pictures/Math.png)\n\n### Inference with vLLM\n\nYou can also employ [vLLM](https://github.com/vllm-project/vllm) for high-throughput inference.\n\n**Text Completion**\n\n```python\nfrom vllm import LLM, SamplingParams\n\ntp_size = 4 # Tensor Parallelism\nsampling_params = SamplingParams(temperature=0.7, top_p=0.9, max_tokens=100)\nmodel_name = \"deepseek-ai/deepseek-coder-6.7b-base\"\nllm = LLM(model=model_name, trust_remote_code=True, gpu_memory_utilization=0.9, tensor_parallel_size=tp_size)\n\nprompts = [\n    \"If everyone in a country loves one another,\",\n    \"The research should also focus on the technologies\",\n    \"To determine if the label is correct, we need to\"\n]\noutputs = llm.generate(prompts, sampling_params)\n\ngenerated_text = [output.outputs[0].text for output in outputs]\nprint(generated_text)\n```\n\n**Chat Completion**\n\n```python\nfrom transformers import AutoTokenizer\nfrom vllm import LLM, SamplingParams\n\ntp_size = 4 # Tensor Parallelism\nsampling_params = SamplingParams(temperature=0.7, top_p=0.9, max_tokens=100)\nmodel_name = \"deepseek-ai/deepseek-coder-6.7b-instruct\"\ntokenizer = AutoTokenizer.from_pretrained(model_name)\nllm = LLM(model=model_name, trust_remote_code=True, gpu_memory_utilization=0.9, tensor_parallel_size=tp_size)\n\nmessages_list = [\n    [{\"role\": \"user\", \"content\": \"Who are you?\"}],\n    [{\"role\": \"user\", \"content\": \"What can you do?\"}],\n    [{\"role\": \"user\", \"content\": \"Explain Transformer briefly.\"}],\n]\nprompts = [tokenizer.apply_chat_template(messages, add_generation_prompt=True, tokenize=False) for messages in messages_list]\n\nsampling_params.stop = [tokenizer.eos_token]\noutputs = llm.generate(prompts, sampling_params)\n\ngenerated_text = [output.outputs[0].text for output in outputs]\nprint(generated_text)\n```\n\n### 7. Q&A\n\n#### Could You Provide the tokenizer.model File for Model Quantization?\n\nDeepSeek Coder utilizes the [HuggingFace Tokenizer](https://huggingface.co/docs/tokenizers/index) to implement the Bytelevel-BPE algorithm, with specially designed pre-tokenizers to ensure optimal performance. Currently, there is no direct way to convert the tokenizer into a SentencePiece tokenizer. We are contributing to the open-source quantization methods facilitate the usage of HuggingFace Tokenizer.\n\n##### GGUF(llama.cpp)\n\nWe have submitted a [PR](https://github.com/ggerganov/llama.cpp/pull/4070) to the popular quantization repository [llama.cpp](https://github.com/ggerganov/llama.cpp) to fully support all HuggingFace pre-tokenizers, including ours.\n\nWhile waiting for the PR to be merged, you can generate your GGUF model using the following steps:\n\n```bash\ngit clone https://github.com/DOGEwbx/llama.cpp.git\ncd llama.cpp\ngit checkout regex_gpt2_preprocess\n# set up the environment according to README\nmake\npython3 -m pip install -r requirements.txt\n# generate GGUF model\npython convert-hf-to-gguf.py <MODEL_PATH> --outfile <GGUF_PATH> --model-name deepseekcoder\n# use q4_0 quantization as an example\n./quantize <GGUF_PATH> <OUTPUT_PATH> q4_0\n./main -m <OUTPUT_PATH> -n 128 -p <PROMPT>\n```\n##### GPTQ(exllamav2)\n\n`UPDATE:`[exllamav2](https://github.com/turboderp/exllamav2) has been able to support Huggingface Tokenizer. Please pull the latest version and try out.\n\nRemember to set RoPE scaling to 4 for correct output, more discussion could be found in this [PR](https://github.com/turboderp/exllamav2/pull/189).\n\n#### How to use the deepseek-coder-instruct to complete the code?\n\nAlthough the deepseek-coder-instruct models are not specifically trained for code completion tasks during supervised fine-tuning (SFT), they retain the capability to perform code completion effectively. To enable this functionality, you simply need to adjust the eos_token_id parameter. Set the eos_token_id to 32014, as opposed to its default value of 32021 in the deepseek-coder-instruct configuration. This modification prompts the model to recognize the end of a sequence differently, thereby facilitating code completion tasks.\n\n\n### 8. Resources\n[awesome-deepseek-coder](https://github.com/deepseek-ai/awesome-deepseek-coder) is a curated list of open-source projects related to DeepSeek Coder.\n\n### 9. License\nThis code repository is licensed under the MIT License. The use of DeepSeek Coder models is subject to the Model License. DeepSeek Coder supports commercial use.\n\nSee the [LICENSE-CODE](LICENSE-CODE) and [LICENSE-MODEL](LICENSE-MODEL) for more details.\n\n### 10. Citation\n```\n@misc{deepseek-coder,\n  author = {Daya Guo, Qihao Zhu, Dejian Yang, Zhenda Xie, Kai Dong, Wentao Zhang, Guanting Chen, Xiao Bi, Y. Wu, Y.K. Li, Fuli Luo, Yingfei Xiong, Wenfeng Liang},\n  title = {DeepSeek-Coder: When the Large Language Model Meets Programming -- The Rise of Code Intelligence},\n  journal = {CoRR},\n  volume = {abs/2401.14196},\n  year = {2024},\n  url = {https://arxiv.org/abs/2401.14196},\n}\n```\n\n### 11. Contact\n\nIf you have any questions, please raise an issue or contact us at [service@deepseek.com](mailto:service@deepseek.com).\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "finetune",
          "type": "tree",
          "content": null
        },
        {
          "name": "pictures",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.107421875,
          "content": "torch>=2.0\ntokenizers>=0.14.0\ntransformers==4.35.0\naccelerate\nsympy==1.12\npebble \ntimeout-decorator \nattrdict\n"
        }
      ]
    }
  ]
}