{
  "metadata": {
    "timestamp": 1736561361683,
    "page": 397,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ultralytics/yolov3",
      "stars": 10288,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 3.6142578125,
          "content": "# Repo-specific DockerIgnore -------------------------------------------------------------------------------------------\n.git\n.cache\n.idea\nruns\noutput\ncoco\nstorage.googleapis.com\n\ndata/samples/*\n**/results*.csv\n*.jpg\n\n# Neural Network weights -----------------------------------------------------------------------------------------------\n**/*.pt\n**/*.pth\n**/*.onnx\n**/*.engine\n**/*.mlmodel\n**/*.torchscript\n**/*.torchscript.pt\n**/*.tflite\n**/*.h5\n**/*.pb\n*_saved_model/\n*_web_model/\n*_openvino_model/\n\n# Below Copied From .gitignore -----------------------------------------------------------------------------------------\n# Below Copied From .gitignore -----------------------------------------------------------------------------------------\n\n\n# GitHub Python GitIgnore ----------------------------------------------------------------------------------------------\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\nwandb/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv*\nvenv*/\nENV*/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n\n# https://github.com/github/gitignore/blob/master/Global/macOS.gitignore -----------------------------------------------\n\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\nIcon?\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n\n# https://github.com/github/gitignore/blob/master/Global/JetBrains.gitignore\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff:\n.idea/*\n.idea/**/workspace.xml\n.idea/**/tasks.xml\n.idea/dictionaries\n.html  # Bokeh Plots\n.pg  # TensorFlow Frozen Graphs\n.avi # videos\n\n# Sensitive or high-churn files:\n.idea/**/dataSources/\n.idea/**/dataSources.ids\n.idea/**/dataSources.local.xml\n.idea/**/sqlDataSources.xml\n.idea/**/dynamic.xml\n.idea/**/uiDesigner.xml\n\n# Gradle:\n.idea/**/gradle.xml\n.idea/**/libraries\n\n# CMake\ncmake-build-debug/\ncmake-build-release/\n\n# Mongo Explorer plugin:\n.idea/**/mongoSettings.xml\n\n## File-based project format:\n*.iws\n\n## Plugin-specific files:\n\n# IntelliJ\nout/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Cursive Clojure plugin\n.idea/replstate.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.904296875,
          "content": "# Repo-specific GitIgnore ----------------------------------------------------------------------------------------------\n*.jpg\n*.jpeg\n*.png\n*.bmp\n*.tif\n*.tiff\n*.heic\n*.JPG\n*.JPEG\n*.PNG\n*.BMP\n*.TIF\n*.TIFF\n*.HEIC\n*.mp4\n*.mov\n*.MOV\n*.avi\n*.data\n*.json\n*.cfg\n!setup.cfg\n!cfg/yolov3*.cfg\n\nstorage.googleapis.com\nruns/*\ndata/*\ndata/images/*\n!data/*.yaml\n!data/hyps\n!data/scripts\n!data/images\n!data/images/zidane.jpg\n!data/images/bus.jpg\n!data/*.sh\n\nresults*.csv\n\n# Datasets -------------------------------------------------------------------------------------------------------------\ncoco/\ncoco128/\nVOC/\n\n# MATLAB GitIgnore -----------------------------------------------------------------------------------------------------\n*.m~\n*.mat\n!targets*.mat\n\n# Neural Network weights -----------------------------------------------------------------------------------------------\n*.weights\n*.pt\n*.pb\n*.onnx\n*.engine\n*.mlmodel\n*.torchscript\n*.tflite\n*.h5\n*_saved_model/\n*_web_model/\n*_openvino_model/\n*_paddle_model/\ndarknet53.conv.74\nyolov3-tiny.conv.15\n\n# GitHub Python GitIgnore ----------------------------------------------------------------------------------------------\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n/wandb/\n.installed.cfg\n*.egg\n\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv*\nvenv*/\nENV*/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n\n# https://github.com/github/gitignore/blob/master/Global/macOS.gitignore -----------------------------------------------\n\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\nIcon?\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n\n# https://github.com/github/gitignore/blob/master/Global/JetBrains.gitignore\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff:\n.idea/*\n.idea/**/workspace.xml\n.idea/**/tasks.xml\n.idea/dictionaries\n.html  # Bokeh Plots\n.pg  # TensorFlow Frozen Graphs\n.avi # videos\n\n# Sensitive or high-churn files:\n.idea/**/dataSources/\n.idea/**/dataSources.ids\n.idea/**/dataSources.local.xml\n.idea/**/sqlDataSources.xml\n.idea/**/dynamic.xml\n.idea/**/uiDesigner.xml\n\n# Gradle:\n.idea/**/gradle.xml\n.idea/**/libraries\n\n# CMake\ncmake-build-debug/\ncmake-build-release/\n\n# Mongo Explorer plugin:\n.idea/**/mongoSettings.xml\n\n## File-based project format:\n*.iws\n\n## Plugin-specific files:\n\n# IntelliJ\nout/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Cursive Clojure plugin\n.idea/replstate.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.3896484375,
          "content": "cff-version: 1.2.0\npreferred-citation:\n  type: software\n  message: If you use YOLOv5, please cite it as below.\n  authors:\n    - family-names: Jocher\n      given-names: Glenn\n      orcid: \"https://orcid.org/0000-0001-5950-6979\"\n  title: \"YOLOv5 by Ultralytics\"\n  version: 7.0\n  doi: 10.5281/zenodo.3908559\n  date-released: 2020-5-29\n  license: AGPL-3.0\n  url: \"https://github.com/ultralytics/yolov5\"\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.888671875,
          "content": "## Contributing to YOLOv3 🚀\n\nWe love your input! We want to make contributing to YOLOv5 as easy and transparent as possible, whether it's:\n\n- Reporting a bug\n- Discussing the current state of the code\n- Submitting a fix\n- Proposing a new feature\n- Becoming a maintainer\n\nYOLOv5 works so well due to our combined community effort, and for every small improvement you contribute you will be helping push the frontiers of what's possible in AI 😃!\n\n## Submitting a Pull Request (PR) 🛠️\n\nSubmitting a PR is easy! This example shows how to submit a PR for updating `requirements.txt` in 4 steps:\n\n### 1. Select File to Update\n\nSelect `requirements.txt` to update by clicking on it in GitHub.\n\n<p align=\"center\"><img width=\"800\" alt=\"PR_step1\" src=\"https://user-images.githubusercontent.com/26833433/122260847-08be2600-ced4-11eb-828b-8287ace4136c.png\"></p>\n\n### 2. Click 'Edit this file'\n\nThe button is in the top-right corner.\n\n<p align=\"center\"><img width=\"800\" alt=\"PR_step2\" src=\"https://user-images.githubusercontent.com/26833433/122260844-06f46280-ced4-11eb-9eec-b8a24be519ca.png\"></p>\n\n### 3. Make Changes\n\nChange the `matplotlib` version from `3.2.2` to `3.3`.\n\n<p align=\"center\"><img width=\"800\" alt=\"PR_step3\" src=\"https://user-images.githubusercontent.com/26833433/122260853-0a87e980-ced4-11eb-9fd2-3650fb6e0842.png\"></p>\n\n### 4. Preview Changes and Submit PR\n\nClick on the **Preview changes** tab to verify your updates. At the bottom of the screen select 'Create a **new branch** for this commit', assign your branch a descriptive name such as `fix/matplotlib_version` and click the green **Propose changes** button. All done, your PR is now submitted to YOLOv5 for review and approval 😃!\n\n<p align=\"center\"><img width=\"800\" alt=\"PR_step4\" src=\"https://user-images.githubusercontent.com/26833433/122260856-0b208000-ced4-11eb-8e8e-77b6151cbcc3.png\"></p>\n\n### PR recommendations\n\nTo allow your work to be integrated as seamlessly as possible, we advise you to:\n\n- ✅ Verify your PR is **up-to-date** with `ultralytics/yolov5` `master` branch. If your PR is behind you can update your code by clicking the 'Update branch' button or by running `git pull` and `git merge master` locally.\n\n<p align=\"center\"><img width=\"751\" alt=\"Screenshot 2022-08-29 at 22 47 15\" src=\"https://user-images.githubusercontent.com/26833433/187295893-50ed9f44-b2c9-4138-a614-de69bd1753d7.png\"></p>\n\n- ✅ Verify all YOLOv5 Continuous Integration (CI) **checks are passing**.\n\n<p align=\"center\"><img width=\"751\" alt=\"Screenshot 2022-08-29 at 22 47 03\" src=\"https://user-images.githubusercontent.com/26833433/187296922-545c5498-f64a-4d8c-8300-5fa764360da6.png\"></p>\n\n- ✅ Reduce changes to the absolute **minimum** required for your bug fix or feature addition. _\"It is not daily increase but daily decrease, hack away the unessential. The closer to the source, the less wastage there is.\"_ — Bruce Lee\n\n## Submitting a Bug Report 🐛\n\nIf you spot a problem with YOLOv5 please submit a Bug Report!\n\nFor us to start investigating a possible problem we need to be able to reproduce it ourselves first. We've created a few short guidelines below to help users provide what we need to get started.\n\nWhen asking a question, people will be better able to provide help if you provide **code** that they can easily understand and use to **reproduce** the problem. This is referred to by community members as creating a [minimum reproducible example](https://docs.ultralytics.com/help/minimum_reproducible_example/). Your code that reproduces the problem should be:\n\n- ✅ **Minimal** – Use as little code as possible that still produces the same problem\n- ✅ **Complete** – Provide **all** parts someone else needs to reproduce your problem in the question itself\n- ✅ **Reproducible** – Test the code you're about to provide to make sure it reproduces the problem\n\nIn addition to the above requirements, for [Ultralytics](https://www.ultralytics.com/) to provide assistance your code should be:\n\n- ✅ **Current** – Verify that your code is up-to-date with the current GitHub [master](https://github.com/ultralytics/yolov5/tree/master), and if necessary `git pull` or `git clone` a new copy to ensure your problem has not already been resolved by previous commits.\n- ✅ **Unmodified** – Your problem must be reproducible without any modifications to the codebase in this repository. [Ultralytics](https://www.ultralytics.com/) does not provide support for custom code ⚠️.\n\nIf you believe your problem meets all of the above criteria, please close this issue and raise a new one using the 🐛 **Bug Report** [template](https://github.com/ultralytics/yolov5/issues/new/choose) and provide a [minimum reproducible example](https://docs.ultralytics.com/help/minimum_reproducible_example/) to help us better understand and diagnose your problem.\n\n## License\n\nBy contributing, you agree that your contributions will be licensed under the [AGPL-3.0 license](https://choosealicense.com/licenses/agpl-3.0/)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 33.7138671875,
          "content": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 42.22265625,
          "content": "<div align=\"center\">\n  <p>\n    <a align=\"center\" href=\"https://www.ultralytics.com/yolo\" target=\"_blank\">\n      <img width=\"100%\" src=\"https://raw.githubusercontent.com/ultralytics/assets/main/yolov3/banner-yolov3.png\"></a>\n  </p>\n\n[中文](https://docs.ultralytics.com/zh) | [한국어](https://docs.ultralytics.com/ko) | [日本語](https://docs.ultralytics.com/ja) | [Русский](https://docs.ultralytics.com/ru) | [Deutsch](https://docs.ultralytics.com/de) | [Français](https://docs.ultralytics.com/fr) | [Español](https://docs.ultralytics.com/es) | [Português](https://docs.ultralytics.com/pt) | [Türkçe](https://docs.ultralytics.com/tr) | [Tiếng Việt](https://docs.ultralytics.com/vi) | [العربية](https://docs.ultralytics.com/ar)\n\n<div>\n    <a href=\"https://github.com/ultralytics/yolov3/actions/workflows/ci-testing.yml\"><img src=\"https://github.com/ultralytics/yolov3/actions/workflows/ci-testing.yml/badge.svg\" alt=\"YOLOv3 CI\"></a>\n    <a href=\"https://zenodo.org/badge/latestdoi/264818686\"><img src=\"https://zenodo.org/badge/264818686.svg\" alt=\"YOLOv3 Citation\"></a>\n    <a href=\"https://hub.docker.com/r/ultralytics/yolov3\"><img src=\"https://img.shields.io/docker/pulls/ultralytics/yolov3?logo=docker\" alt=\"Docker Pulls\"></a>\n    <a href=\"https://discord.com/invite/ultralytics\"><img alt=\"Discord\" src=\"https://img.shields.io/discord/1089800235347353640?logo=discord&logoColor=white&label=Discord&color=blue\"></a> <a href=\"https://community.ultralytics.com/\"><img alt=\"Ultralytics Forums\" src=\"https://img.shields.io/discourse/users?server=https%3A%2F%2Fcommunity.ultralytics.com&logo=discourse&label=Forums&color=blue\"></a> <a href=\"https://reddit.com/r/ultralytics\"><img alt=\"Ultralytics Reddit\" src=\"https://img.shields.io/reddit/subreddit-subscribers/ultralytics?style=flat&logo=reddit&logoColor=white&label=Reddit&color=blue\"></a>\n    <br>\n    <a href=\"https://bit.ly/yolov5-paperspace-notebook\"><img src=\"https://assets.paperspace.io/img/gradient-badge.svg\" alt=\"Run on Gradient\"></a>\n    <a href=\"https://colab.research.google.com/github/ultralytics/yolov5/blob/master/tutorial.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"></a>\n    <a href=\"https://www.kaggle.com/models/ultralytics/yolov5\"><img src=\"https://kaggle.com/static/images/open-in-kaggle.svg\" alt=\"Open In Kaggle\"></a>\n  </div>\n  <br>\n\nYOLOv3 🚀 is the world's most loved vision AI, representing <a href=\"https://www.ultralytics.com/\">Ultralytics</a> open-source research into future vision AI methods, incorporating lessons learned and best practices evolved over thousands of hours of research and development.\n\nWe hope that the resources here will help you get the most out of YOLOv3. Please browse the YOLOv3 <a href=\"https://docs.ultralytics.com/yolov5/\">Docs</a> for details, raise an issue on <a href=\"https://github.com/ultralytics/yolov3/issues/new/choose\">GitHub</a> for support, and join our <a href=\"https://discord.com/invite/ultralytics\">Discord</a> community for questions and discussions!\n\nTo request an Enterprise License please complete the form at [Ultralytics Licensing](https://www.ultralytics.com/license).\n\n<div align=\"center\">\n  <a href=\"https://github.com/ultralytics\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-github.png\" width=\"2%\" alt=\"Ultralytics GitHub\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"2%\">\n  <a href=\"https://www.linkedin.com/company/ultralytics/\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-linkedin.png\" width=\"2%\" alt=\"Ultralytics LinkedIn\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"2%\">\n  <a href=\"https://twitter.com/ultralytics\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-twitter.png\" width=\"2%\" alt=\"Ultralytics Twitter\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"2%\">\n  <a href=\"https://youtube.com/ultralytics?sub_confirmation=1\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-youtube.png\" width=\"2%\" alt=\"Ultralytics YouTube\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"2%\">\n  <a href=\"https://www.tiktok.com/@ultralytics\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-tiktok.png\" width=\"2%\" alt=\"Ultralytics TikTok\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"2%\">\n  <a href=\"https://ultralytics.com/bilibili\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-bilibili.png\" width=\"2%\" alt=\"Ultralytics BiliBili\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"2%\">\n  <a href=\"https://discord.com/invite/ultralytics\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-discord.png\" width=\"2%\" alt=\"Ultralytics Discord\"></a>\n</div>\n</div>\n<br>\n\n## <div align=\"center\">YOLO11 🚀 NEW</div>\n\nWe are excited to unveil the launch of Ultralytics YOLO11 🚀, the latest advancement in our state-of-the-art (SOTA) vision models! Available now at **[GitHub](https://github.com/ultralytics/ultralytics)**, YOLO11 builds on our legacy of speed, precision, and ease of use. Whether you're tackling object detection, image segmentation, or image classification, YOLO11 delivers the performance and versatility needed to excel in diverse applications.\n\nGet started today and unlock the full potential of YOLO11! Visit the [Ultralytics Docs](https://docs.ultralytics.com/) for comprehensive guides and resources:\n\n[![PyPI version](https://badge.fury.io/py/ultralytics.svg)](https://badge.fury.io/py/ultralytics) [![Downloads](https://static.pepy.tech/badge/ultralytics)](https://www.pepy.tech/projects/ultralytics)\n\n```bash\npip install ultralytics\n```\n\n<div align=\"center\">\n  <a href=\"https://www.ultralytics.com/yolo\" target=\"_blank\">\n  <img width=\"100%\" src=\"https://raw.githubusercontent.com/ultralytics/assets/refs/heads/main/yolo/performance-comparison.png\"></a>\n</div>\n\n## <div align=\"center\">Documentation</div>\n\nSee the [YOLOv3 Docs](https://docs.ultralytics.com/) for full documentation on training, testing and deployment. See below for quickstart examples.\n\n<details open>\n<summary>Install</summary>\n\nClone repo and install [requirements.txt](https://github.com/ultralytics/yolov5/blob/master/requirements.txt) in a [**Python>=3.7.0**](https://www.python.org/) environment, including [**PyTorch>=1.7**](https://pytorch.org/get-started/locally/).\n\n```bash\ngit clone https://github.com/ultralytics/yolov3  # clone\ncd yolov3\npip install -r requirements.txt  # install\n```\n\n</details>\n\n<details>\n<summary>Inference</summary>\n\nYOLOv3 [PyTorch Hub](https://docs.ultralytics.com/yolov5/tutorials/pytorch_hub_model_loading/) inference. [Models](https://github.com/ultralytics/yolov5/tree/master/models) download automatically from the latest YOLOv3 [release](https://github.com/ultralytics/yolov5/releases).\n\n```python\nimport torch\n\n# Model\nmodel = torch.hub.load(\"ultralytics/yolov3\", \"yolov3\")  # or yolov5n - yolov5x6, custom\n\n# Images\nimg = \"https://ultralytics.com/images/zidane.jpg\"  # or file, Path, PIL, OpenCV, numpy, list\n\n# Inference\nresults = model(img)\n\n# Results\nresults.print()  # or .show(), .save(), .crop(), .pandas(), etc.\n```\n\n</details>\n\n<details>\n<summary>Inference with detect.py</summary>\n\n`detect.py` runs inference on a variety of sources, downloading [models](https://github.com/ultralytics/yolov5/tree/master/models) automatically from the latest YOLOv3 [release](https://github.com/ultralytics/yolov5/releases) and saving results to `runs/detect`.\n\n```bash\npython detect.py --weights yolov5s.pt --source 0                               # webcam\n                                               img.jpg                         # image\n                                               vid.mp4                         # video\n                                               screen                          # screenshot\n                                               path/                           # directory\n                                               list.txt                        # list of images\n                                               list.streams                    # list of streams\n                                               'path/*.jpg'                    # glob\n                                               'https://youtu.be/LNwODJXcvt4'  # YouTube\n                                               'rtsp://example.com/media.mp4'  # RTSP, RTMP, HTTP stream\n```\n\n</details>\n\n<details>\n<summary>Training</summary>\n\nThe commands below reproduce YOLOv3 [COCO](https://github.com/ultralytics/yolov5/blob/master/data/scripts/get_coco.sh) results. [Models](https://github.com/ultralytics/yolov5/tree/master/models) and [datasets](https://github.com/ultralytics/yolov5/tree/master/data) download automatically from the latest YOLOv3 [release](https://github.com/ultralytics/yolov5/releases). Training times for YOLOv5n/s/m/l/x are 1/2/4/6/8 days on a V100 GPU ([Multi-GPU](https://docs.ultralytics.com/yolov5/tutorials/multi_gpu_training/) times faster). Use the largest `--batch-size` possible, or pass `--batch-size -1` for YOLOv3 [AutoBatch](https://github.com/ultralytics/yolov5/pull/5092). Batch sizes shown for V100-16GB.\n\n```bash\npython train.py --data coco.yaml --epochs 300 --weights '' --cfg yolov5n.yaml  --batch-size 128\n                                                                 yolov5s                    64\n                                                                 yolov5m                    40\n                                                                 yolov5l                    24\n                                                                 yolov5x                    16\n```\n\n<img width=\"800\" src=\"https://user-images.githubusercontent.com/26833433/90222759-949d8800-ddc1-11ea-9fa1-1c97eed2b963.png\">\n\n</details>\n\n<details open>\n<summary>Tutorials</summary>\n\n- [Train Custom Data](https://docs.ultralytics.com/yolov5/tutorials/train_custom_data/) 🚀 RECOMMENDED\n- [Tips for Best Training Results](https://docs.ultralytics.com/guides/model-training-tips/) ☘️\n- [Multi-GPU Training](https://docs.ultralytics.com/yolov5/tutorials/multi_gpu_training/)\n- [PyTorch Hub](https://docs.ultralytics.com/yolov5/tutorials/pytorch_hub_model_loading/) 🌟 NEW\n- [TFLite, ONNX, CoreML, TensorRT Export](https://docs.ultralytics.com/yolov5/tutorials/model_export/) 🚀\n- [NVIDIA Jetson platform Deployment](https://docs.ultralytics.com/yolov5/tutorials/running_on_jetson_nano/) 🌟 NEW\n- [Test-Time Augmentation (TTA)](https://docs.ultralytics.com/yolov5/tutorials/test_time_augmentation/)\n- [Model Ensembling](https://docs.ultralytics.com/yolov5/tutorials/model_ensembling/)\n- [Model Pruning/Sparsity](https://docs.ultralytics.com/yolov5/tutorials/model_pruning_and_sparsity/)\n- [Hyperparameter Evolution](https://docs.ultralytics.com/yolov5/tutorials/hyperparameter_evolution/)\n- [Transfer Learning with Frozen Layers](https://docs.ultralytics.com/yolov5/tutorials/transfer_learning_with_frozen_layers/)\n- [Architecture Summary](https://docs.ultralytics.com/yolov5/tutorials/architecture_description/) 🌟 NEW\n- [Ultralytics HUB to train and deploy YOLO](https://www.ultralytics.com/hub) 🚀 RECOMMENDED\n- [ClearML Logging](https://docs.ultralytics.com/yolov5/tutorials/clearml_logging_integration/)\n- [YOLOv5 with Neural Magic's Deepsparse](https://docs.ultralytics.com/yolov5/tutorials/neural_magic_pruning_quantization/)\n- [Comet Logging](https://docs.ultralytics.com/yolov5/tutorials/comet_logging_integration/) 🌟 NEW\n\n</details>\n\n## <div align=\"center\">Integrations</div>\n\nOur key integrations with leading AI platforms extend the functionality of Ultralytics' offerings, enhancing tasks like dataset labeling, training, visualization, and model management. Discover how Ultralytics, in collaboration with [W&B](https://docs.wandb.ai/guides/integrations/ultralytics/), [Comet](https://bit.ly/yolov8-readme-comet), [Roboflow](https://roboflow.com/?ref=ultralytics) and [OpenVINO](https://docs.ultralytics.com/integrations/openvino/), can optimize your AI workflow.\n\n<br>\n<a href=\"https://www.ultralytics.com/hub\" target=\"_blank\">\n<img width=\"100%\" src=\"https://github.com/ultralytics/assets/raw/main/yolov8/banner-integrations.png\" alt=\"Ultralytics active learning integrations\"></a>\n<br>\n<br>\n\n<div align=\"center\">\n  <a href=\"https://www.ultralytics.com/hub\">\n    <img src=\"https://github.com/ultralytics/assets/raw/main/partners/logo-ultralytics-hub.png\" width=\"10%\" alt=\"Ultralytics HUB logo\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"15%\" height=\"0\" alt=\"space\">\n  <a href=\"https://docs.wandb.ai/guides/integrations/ultralytics/\">\n    <img src=\"https://github.com/ultralytics/assets/raw/main/partners/logo-wb.png\" width=\"10%\" alt=\"ClearML logo\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"15%\" height=\"0\" alt=\"space\">\n  <a href=\"https://bit.ly/yolov8-readme-comet\">\n    <img src=\"https://github.com/ultralytics/assets/raw/main/partners/logo-comet.png\" width=\"10%\" alt=\"Comet ML logo\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"15%\" height=\"0\" alt=\"space\">\n  <a href=\"https://bit.ly/yolov5-neuralmagic\">\n    <img src=\"https://github.com/ultralytics/assets/raw/main/partners/logo-neuralmagic.png\" width=\"10%\" alt=\"NeuralMagic logo\"></a>\n</div>\n\n|                                                         Ultralytics HUB 🚀                                                         |                                                               W&B                                                               |                                                                      Comet ⭐ NEW                                                                       |                                              Neural Magic                                              |\n| :--------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------: | :----------------------------------------------------------------------------------------------------: |\n| Streamline YOLO workflows: Label, train, and deploy effortlessly with [Ultralytics HUB](https://www.ultralytics.com/hub). Try now! | Track experiments, hyperparameters, and results with [Weights & Biases](https://docs.wandb.ai/guides/integrations/ultralytics/) | Free forever, [Comet](https://bit.ly/yolov5-readme-comet) lets you save YOLO models, resume training, and interactively visualize and debug predictions | Run YOLO11 inference up to 6x faster with [Neural Magic DeepSparse](https://bit.ly/yolov5-neuralmagic) |\n\n## <div align=\"center\">Ultralytics HUB</div>\n\nExperience seamless AI with [Ultralytics HUB](https://www.ultralytics.com/hub) ⭐, the all-in-one solution for data visualization, YOLO 🚀 model training and deployment, without any coding. Transform images into actionable insights and bring your AI visions to life with ease using our cutting-edge platform and user-friendly [Ultralytics App](https://www.ultralytics.com/app-install). Start your journey for **Free** now!\n\n<a align=\"center\" href=\"https://www.ultralytics.com/hub\" target=\"_blank\">\n<img width=\"100%\" src=\"https://github.com/ultralytics/assets/raw/main/im/ultralytics-hub.png\"></a>\n\n## <div align=\"center\">Why YOLOv3</div>\n\nYOLOv3 has been designed to be super easy to get started and simple to learn. We prioritize real-world results.\n\n<p align=\"left\"><img width=\"800\" src=\"https://user-images.githubusercontent.com/26833433/155040763-93c22a27-347c-4e3c-847a-8094621d3f4e.png\"></p>\n<details>\n  <summary>YOLOv3-P5 640 Figure</summary>\n\n<p align=\"left\"><img width=\"800\" src=\"https://user-images.githubusercontent.com/26833433/155040757-ce0934a3-06a6-43dc-a979-2edbbd69ea0e.png\"></p>\n</details>\n<details>\n  <summary>Figure Notes</summary>\n\n- **COCO AP val** denotes mAP@0.5:0.95 metric measured on the 5000-image [COCO val2017](http://cocodataset.org) dataset over various inference sizes from 256 to 1536.\n- **GPU Speed** measures average inference time per image on [COCO val2017](http://cocodataset.org) dataset using a [AWS p3.2xlarge](https://aws.amazon.com/ec2/instance-types/p4/) V100 instance at batch-size 32.\n- **EfficientDet** data from [google/automl](https://github.com/google/automl) at batch size 8.\n- **Reproduce** by `python val.py --task study --data coco.yaml --iou 0.7 --weights yolov5n6.pt yolov5s6.pt yolov5m6.pt yolov5l6.pt yolov5x6.pt`\n\n</details>\n\n### Pretrained Checkpoints\n\n| Model                                                                                           | size<br><sup>(pixels) | mAP<sup>val<br>50-95 | mAP<sup>val<br>50 | Speed<br><sup>CPU b1<br>(ms) | Speed<br><sup>V100 b1<br>(ms) | Speed<br><sup>V100 b32<br>(ms) | params<br><sup>(M) | FLOPs<br><sup>@640 (B) |\n| ----------------------------------------------------------------------------------------------- | --------------------- | -------------------- | ----------------- | ---------------------------- | ----------------------------- | ------------------------------ | ------------------ | ---------------------- |\n| [YOLOv5n](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5n.pt)              | 640                   | 28.0                 | 45.7              | **45**                       | **6.3**                       | **0.6**                        | **1.9**            | **4.5**                |\n| [YOLOv5s](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5s.pt)              | 640                   | 37.4                 | 56.8              | 98                           | 6.4                           | 0.9                            | 7.2                | 16.5                   |\n| [YOLOv5m](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5m.pt)              | 640                   | 45.4                 | 64.1              | 224                          | 8.2                           | 1.7                            | 21.2               | 49.0                   |\n| [YOLOv5l](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5l.pt)              | 640                   | 49.0                 | 67.3              | 430                          | 10.1                          | 2.7                            | 46.5               | 109.1                  |\n| [YOLOv5x](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5x.pt)              | 640                   | 50.7                 | 68.9              | 766                          | 12.1                          | 4.8                            | 86.7               | 205.7                  |\n|                                                                                                 |                       |                      |                   |                              |                               |                                |                    |                        |\n| [YOLOv5n6](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5n6.pt)            | 1280                  | 36.0                 | 54.4              | 153                          | 8.1                           | 2.1                            | 3.2                | 4.6                    |\n| [YOLOv5s6](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5s6.pt)            | 1280                  | 44.8                 | 63.7              | 385                          | 8.2                           | 3.6                            | 12.6               | 16.8                   |\n| [YOLOv5m6](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5m6.pt)            | 1280                  | 51.3                 | 69.3              | 887                          | 11.1                          | 6.8                            | 35.7               | 50.0                   |\n| [YOLOv5l6](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5l6.pt)            | 1280                  | 53.7                 | 71.3              | 1784                         | 15.8                          | 10.5                           | 76.8               | 111.4                  |\n| [YOLOv5x6](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5x6.pt)<br>+ [TTA] | 1280<br>1536          | 55.0<br>**55.8**     | 72.7<br>**72.7**  | 3136<br>-                    | 26.2<br>-                     | 19.4<br>-                      | 140.7<br>-         | 209.8<br>-             |\n\n<details>\n  <summary>Table Notes</summary>\n\n- All checkpoints are trained to 300 epochs with default settings. Nano and Small models use [hyp.scratch-low.yaml](https://github.com/ultralytics/yolov5/blob/master/data/hyps/hyp.scratch-low.yaml) hyps, all others use [hyp.scratch-high.yaml](https://github.com/ultralytics/yolov5/blob/master/data/hyps/hyp.scratch-high.yaml).\n- **mAP<sup>val</sup>** values are for single-model single-scale on [COCO val2017](http://cocodataset.org) dataset.<br>Reproduce by `python val.py --data coco.yaml --img 640 --conf 0.001 --iou 0.65`\n- **Speed** averaged over COCO val images using a [AWS p3.2xlarge](https://aws.amazon.com/ec2/instance-types/p4/) instance. NMS times (~1 ms/img) not included.<br>Reproduce by `python val.py --data coco.yaml --img 640 --task speed --batch 1`\n- **TTA** [Test Time Augmentation](https://docs.ultralytics.com/yolov5/tutorials/test_time_augmentation/) includes reflection and scale augmentations.<br>Reproduce by `python val.py --data coco.yaml --img 1536 --iou 0.7 --augment`\n\n</details>\n\n## <div align=\"center\">Segmentation</div>\n\nOur new YOLOv5 [release v7.0](https://github.com/ultralytics/yolov5/releases/v7.0) instance segmentation models are the fastest and most accurate in the world, beating all current [SOTA benchmarks](https://paperswithcode.com/sota/real-time-instance-segmentation-on-mscoco). We've made them super simple to train, validate and deploy. See full details in our [Release Notes](https://github.com/ultralytics/yolov5/releases/v7.0) and visit our [YOLOv5 Segmentation Colab Notebook](https://github.com/ultralytics/yolov5/blob/master/segment/tutorial.ipynb) for quickstart tutorials.\n\n<details>\n  <summary>Segmentation Checkpoints</summary>\n\n<div align=\"center\">\n<a align=\"center\" href=\"https://www.ultralytics.com/yolo\" target=\"_blank\">\n<img width=\"800\" src=\"https://user-images.githubusercontent.com/61612323/204180385-84f3aca9-a5e9-43d8-a617-dda7ca12e54a.png\"></a>\n</div>\n\nWe trained YOLOv5 segmentations models on COCO for 300 epochs at image size 640 using A100 GPUs. We exported all models to ONNX FP32 for CPU speed tests and to TensorRT FP16 for GPU speed tests. We ran all speed tests on Google [Colab Pro](https://colab.research.google.com/signup) notebooks for easy reproducibility.\n\n| Model                                                                                      | size<br><sup>(pixels) | mAP<sup>box<br>50-95 | mAP<sup>mask<br>50-95 | Train time<br><sup>300 epochs<br>A100 (hours) | Speed<br><sup>ONNX CPU<br>(ms) | Speed<br><sup>TRT A100<br>(ms) | params<br><sup>(M) | FLOPs<br><sup>@640 (B) |\n| ------------------------------------------------------------------------------------------ | --------------------- | -------------------- | --------------------- | --------------------------------------------- | ------------------------------ | ------------------------------ | ------------------ | ---------------------- |\n| [YOLOv5n-seg](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5n-seg.pt) | 640                   | 27.6                 | 23.4                  | 80:17                                         | **62.7**                       | **1.2**                        | **2.0**            | **7.1**                |\n| [YOLOv5s-seg](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5s-seg.pt) | 640                   | 37.6                 | 31.7                  | 88:16                                         | 173.3                          | 1.4                            | 7.6                | 26.4                   |\n| [YOLOv5m-seg](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5m-seg.pt) | 640                   | 45.0                 | 37.1                  | 108:36                                        | 427.0                          | 2.2                            | 22.0               | 70.8                   |\n| [YOLOv5l-seg](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5l-seg.pt) | 640                   | 49.0                 | 39.9                  | 66:43 (2x)                                    | 857.4                          | 2.9                            | 47.9               | 147.7                  |\n| [YOLOv5x-seg](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5x-seg.pt) | 640                   | **50.7**             | **41.4**              | 62:56 (3x)                                    | 1579.2                         | 4.5                            | 88.8               | 265.7                  |\n\n- All checkpoints are trained to 300 epochs with SGD optimizer with `lr0=0.01` and `weight_decay=5e-5` at image size 640 and all default settings.<br>Runs logged to https://wandb.ai/glenn-jocher/YOLOv5_v70_official\n- **Accuracy** values are for single-model single-scale on COCO dataset.<br>Reproduce by `python segment/val.py --data coco.yaml --weights yolov5s-seg.pt`\n- **Speed** averaged over 100 inference images using a [Colab Pro](https://colab.research.google.com/signup) A100 High-RAM instance. Values indicate inference speed only (NMS adds about 1ms per image). <br>Reproduce by `python segment/val.py --data coco.yaml --weights yolov5s-seg.pt --batch 1`\n- **Export** to ONNX at FP32 and TensorRT at FP16 done with `export.py`. <br>Reproduce by `python export.py --weights yolov5s-seg.pt --include engine --device 0 --half`\n\n</details>\n\n<details>\n  <summary>Segmentation Usage Examples &nbsp;<a href=\"https://colab.research.google.com/github/ultralytics/yolov5/blob/master/segment/tutorial.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"></a></summary>\n\n### Train\n\nYOLOv5 segmentation training supports auto-download COCO128-seg segmentation dataset with `--data coco128-seg.yaml` argument and manual download of COCO-segments dataset with `bash data/scripts/get_coco.sh --train --val --segments` and then `python train.py --data coco.yaml`.\n\n```bash\n# Single-GPU\npython segment/train.py --data coco128-seg.yaml --weights yolov5s-seg.pt --img 640\n\n# Multi-GPU DDP\npython -m torch.distributed.run --nproc_per_node 4 --master_port 1 segment/train.py --data coco128-seg.yaml --weights yolov5s-seg.pt --img 640 --device 0,1,2,3\n```\n\n### Val\n\nValidate YOLOv5s-seg mask mAP on COCO dataset:\n\n```bash\nbash data/scripts/get_coco.sh --val --segments  # download COCO val segments split (780MB, 5000 images)\npython segment/val.py --weights yolov5s-seg.pt --data coco.yaml --img 640  # validate\n```\n\n### Predict\n\nUse pretrained YOLOv5m-seg.pt to predict bus.jpg:\n\n```bash\npython segment/predict.py --weights yolov5m-seg.pt --data data/images/bus.jpg\n```\n\n```python\nmodel = torch.hub.load(\n    \"ultralytics/yolov5\", \"custom\", \"yolov5m-seg.pt\"\n)  # load from PyTorch Hub (WARNING: inference not yet supported)\n```\n\n| ![zidane](https://user-images.githubusercontent.com/26833433/203113421-decef4c4-183d-4a0a-a6c2-6435b33bc5d3.jpg) | ![bus](https://user-images.githubusercontent.com/26833433/203113416-11fe0025-69f7-4874-a0a6-65d0bfe2999a.jpg) |\n| ---------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n\n### Export\n\nExport YOLOv5s-seg model to ONNX and TensorRT:\n\n```bash\npython export.py --weights yolov5s-seg.pt --include onnx engine --img 640 --device 0\n```\n\n</details>\n\n## <div align=\"center\">Classification</div>\n\nYOLOv5 [release v6.2](https://github.com/ultralytics/yolov5/releases) brings support for classification model training, validation and deployment! See full details in our [Release Notes](https://github.com/ultralytics/yolov5/releases/v6.2) and visit our [YOLOv5 Classification Colab Notebook](https://github.com/ultralytics/yolov5/blob/master/classify/tutorial.ipynb) for quickstart tutorials.\n\n<details>\n  <summary>Classification Checkpoints</summary>\n\n<br>\n\nWe trained YOLOv5-cls classification models on ImageNet for 90 epochs using a 4xA100 instance, and we trained ResNet and EfficientNet models alongside with the same default training settings to compare. We exported all models to ONNX FP32 for CPU speed tests and to TensorRT FP16 for GPU speed tests. We ran all speed tests on Google [Colab Pro](https://colab.research.google.com/signup) for easy reproducibility.\n\n| Model                                                                                              | size<br><sup>(pixels) | acc<br><sup>top1 | acc<br><sup>top5 | Training<br><sup>90 epochs<br>4xA100 (hours) | Speed<br><sup>ONNX CPU<br>(ms) | Speed<br><sup>TensorRT V100<br>(ms) | params<br><sup>(M) | FLOPs<br><sup>@224 (B) |\n| -------------------------------------------------------------------------------------------------- | --------------------- | ---------------- | ---------------- | -------------------------------------------- | ------------------------------ | ----------------------------------- | ------------------ | ---------------------- |\n| [YOLOv5n-cls](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5n-cls.pt)         | 224                   | 64.6             | 85.4             | 7:59                                         | **3.3**                        | **0.5**                             | **2.5**            | **0.5**                |\n| [YOLOv5s-cls](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5s-cls.pt)         | 224                   | 71.5             | 90.2             | 8:09                                         | 6.6                            | 0.6                                 | 5.4                | 1.4                    |\n| [YOLOv5m-cls](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5m-cls.pt)         | 224                   | 75.9             | 92.9             | 10:06                                        | 15.5                           | 0.9                                 | 12.9               | 3.9                    |\n| [YOLOv5l-cls](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5l-cls.pt)         | 224                   | 78.0             | 94.0             | 11:56                                        | 26.9                           | 1.4                                 | 26.5               | 8.5                    |\n| [YOLOv5x-cls](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5x-cls.pt)         | 224                   | **79.0**         | **94.4**         | 15:04                                        | 54.3                           | 1.8                                 | 48.1               | 15.9                   |\n|                                                                                                    |                       |                  |                  |                                              |                                |                                     |                    |                        |\n| [ResNet18](https://github.com/ultralytics/yolov5/releases/download/v7.0/resnet18.pt)               | 224                   | 70.3             | 89.5             | **6:47**                                     | 11.2                           | 0.5                                 | 11.7               | 3.7                    |\n| [ResNet34](https://github.com/ultralytics/yolov5/releases/download/v7.0/resnet34.pt)               | 224                   | 73.9             | 91.8             | 8:33                                         | 20.6                           | 0.9                                 | 21.8               | 7.4                    |\n| [ResNet50](https://github.com/ultralytics/yolov5/releases/download/v7.0/resnet50.pt)               | 224                   | 76.8             | 93.4             | 11:10                                        | 23.4                           | 1.0                                 | 25.6               | 8.5                    |\n| [ResNet101](https://github.com/ultralytics/yolov5/releases/download/v7.0/resnet101.pt)             | 224                   | 78.5             | 94.3             | 17:10                                        | 42.1                           | 1.9                                 | 44.5               | 15.9                   |\n|                                                                                                    |                       |                  |                  |                                              |                                |                                     |                    |                        |\n| [EfficientNet_b0](https://github.com/ultralytics/yolov5/releases/download/v7.0/efficientnet_b0.pt) | 224                   | 75.1             | 92.4             | 13:03                                        | 12.5                           | 1.3                                 | 5.3                | 1.0                    |\n| [EfficientNet_b1](https://github.com/ultralytics/yolov5/releases/download/v7.0/efficientnet_b1.pt) | 224                   | 76.4             | 93.2             | 17:04                                        | 14.9                           | 1.6                                 | 7.8                | 1.5                    |\n| [EfficientNet_b2](https://github.com/ultralytics/yolov5/releases/download/v7.0/efficientnet_b2.pt) | 224                   | 76.6             | 93.4             | 17:10                                        | 15.9                           | 1.6                                 | 9.1                | 1.7                    |\n| [EfficientNet_b3](https://github.com/ultralytics/yolov5/releases/download/v7.0/efficientnet_b3.pt) | 224                   | 77.7             | 94.0             | 19:19                                        | 18.9                           | 1.9                                 | 12.2               | 2.4                    |\n\n<details>\n  <summary>Table Notes (click to expand)</summary>\n\n- All checkpoints are trained to 90 epochs with SGD optimizer with `lr0=0.001` and `weight_decay=5e-5` at image size 224 and all default settings.<br>Runs logged to https://wandb.ai/glenn-jocher/YOLOv5-Classifier-v6-2\n- **Accuracy** values are for single-model single-scale on [ImageNet-1k](https://www.image-net.org/index.php) dataset.<br>Reproduce by `python classify/val.py --data ../datasets/imagenet --img 224`\n- **Speed** averaged over 100 inference images using a Google [Colab Pro](https://colab.research.google.com/signup) V100 High-RAM instance.<br>Reproduce by `python classify/val.py --data ../datasets/imagenet --img 224 --batch 1`\n- **Export** to ONNX at FP32 and TensorRT at FP16 done with `export.py`. <br>Reproduce by `python export.py --weights yolov5s-cls.pt --include engine onnx --imgsz 224`\n\n</details>\n</details>\n\n<details>\n  <summary>Classification Usage Examples &nbsp;<a href=\"https://colab.research.google.com/github/ultralytics/yolov5/blob/master/classify/tutorial.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"></a></summary>\n\n### Train\n\nYOLOv5 classification training supports auto-download of MNIST, Fashion-MNIST, CIFAR10, CIFAR100, Imagenette, Imagewoof, and ImageNet datasets with the `--data` argument. To start training on MNIST for example use `--data mnist`.\n\n```bash\n# Single-GPU\npython classify/train.py --model yolov5s-cls.pt --data cifar100 --epochs 5 --img 224 --batch 128\n\n# Multi-GPU DDP\npython -m torch.distributed.run --nproc_per_node 4 --master_port 1 classify/train.py --model yolov5s-cls.pt --data imagenet --epochs 5 --img 224 --device 0,1,2,3\n```\n\n### Val\n\nValidate YOLOv5m-cls accuracy on ImageNet-1k dataset:\n\n```bash\nbash data/scripts/get_imagenet.sh --val  # download ImageNet val split (6.3G, 50000 images)\npython classify/val.py --weights yolov5m-cls.pt --data ../datasets/imagenet --img 224  # validate\n```\n\n### Predict\n\nUse pretrained YOLOv5s-cls.pt to predict bus.jpg:\n\n```bash\npython classify/predict.py --weights yolov5s-cls.pt --data data/images/bus.jpg\n```\n\n```python\nmodel = torch.hub.load(\"ultralytics/yolov5\", \"custom\", \"yolov5s-cls.pt\")  # load from PyTorch Hub\n```\n\n### Export\n\nExport a group of trained YOLOv5s-cls, ResNet and EfficientNet models to ONNX and TensorRT:\n\n```bash\npython export.py --weights yolov5s-cls.pt resnet50.pt efficientnet_b0.pt --include onnx engine --img 224\n```\n\n</details>\n\n## <div align=\"center\">Environments</div>\n\nGet started in seconds with our verified environments. Click each icon below for details.\n\n<div align=\"center\">\n  <a href=\"https://bit.ly/yolov5-paperspace-notebook\">\n    <img src=\"https://github.com/ultralytics/assets/releases/download/v0.0.0/logo-gradient.png\" width=\"10%\" /></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"5%\" alt=\"\" />\n  <a href=\"https://colab.research.google.com/github/ultralytics/yolov5/blob/master/tutorial.ipynb\">\n    <img src=\"https://github.com/ultralytics/assets/releases/download/v0.0.0/logo-colab-small.png\" width=\"10%\" /></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"5%\" alt=\"\" />\n  <a href=\"https://www.kaggle.com/models/ultralytics/yolov5\">\n    <img src=\"https://github.com/ultralytics/assets/releases/download/v0.0.0/logo-kaggle-small.png\" width=\"10%\" /></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"5%\" alt=\"\" />\n  <a href=\"https://hub.docker.com/r/ultralytics/yolov3\">\n    <img src=\"https://github.com/ultralytics/assets/releases/download/v0.0.0/logo-docker-small.png\" width=\"10%\" /></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"5%\" alt=\"\" />\n  <a href=\"https://docs.ultralytics.com/yolov5/environments/aws_quickstart_tutorial/\">\n    <img src=\"https://github.com/ultralytics/assets/releases/download/v0.0.0/logo-aws-small.png\" width=\"10%\" /></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"5%\" alt=\"\" />\n  <a href=\"https://docs.ultralytics.com/yolov5/environments/google_cloud_quickstart_tutorial/\">\n    <img src=\"https://github.com/ultralytics/assets/releases/download/v0.0.0/logo-gcp-small.png\" width=\"10%\" /></a>\n</div>\n\n## <div align=\"center\">Contribute</div>\n\nWe love your input! We want to make contributing to YOLOv3 as easy and transparent as possible. Please see our [Contributing Guide](https://docs.ultralytics.com/help/contributing/) to get started, and fill out the [YOLOv3 Survey](https://www.ultralytics.com/survey?utm_source=github&utm_medium=social&utm_campaign=Survey) to send us feedback on your experiences. Thank you to all our contributors!\n\n<!-- SVG image from https://opencollective.com/ultralytics/contributors.svg?width=990 -->\n\n<a href=\"https://github.com/ultralytics/yolov5/graphs/contributors\">\n<img src=\"https://github.com/ultralytics/assets/raw/main/im/image-contributors.png\" /></a>\n\n## <div align=\"center\">License</div>\n\nUltralytics offers two licensing options to accommodate diverse use cases:\n\n- **AGPL-3.0 License**: This [OSI-approved](https://opensource.org/license) open-source license is ideal for students and enthusiasts, promoting open collaboration and knowledge sharing. See the [LICENSE](https://github.com/ultralytics/yolov3/blob/master/LICENSE) file for more details.\n- **Enterprise License**: Designed for commercial use, this license permits seamless integration of Ultralytics software and AI models into commercial goods and services, bypassing the open-source requirements of AGPL-3.0. If your scenario involves embedding our solutions into a commercial offering, reach out through [Ultralytics Licensing](https://www.ultralytics.com/license).\n\n## <div align=\"center\">Contact</div>\n\nFor YOLOv3 bug reports and feature requests please visit [GitHub Issues](https://github.com/ultralytics/yolov3/issues), and join our [Discord](https://discord.com/invite/ultralytics) community for questions and discussions!\n\n<br>\n<div align=\"center\">\n  <a href=\"https://github.com/ultralytics\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-github.png\" width=\"3%\" alt=\"Ultralytics GitHub\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"3%\">\n  <a href=\"https://www.linkedin.com/company/ultralytics/\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-linkedin.png\" width=\"3%\" alt=\"Ultralytics LinkedIn\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"3%\">\n  <a href=\"https://twitter.com/ultralytics\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-twitter.png\" width=\"3%\" alt=\"Ultralytics Twitter\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"3%\">\n  <a href=\"https://youtube.com/ultralytics?sub_confirmation=1\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-youtube.png\" width=\"3%\" alt=\"Ultralytics YouTube\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"3%\">\n  <a href=\"https://www.tiktok.com/@ultralytics\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-tiktok.png\" width=\"3%\" alt=\"Ultralytics TikTok\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"3%\">\n  <a href=\"https://ultralytics.com/bilibili\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-bilibili.png\" width=\"3%\" alt=\"Ultralytics BiliBili\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"3%\">\n  <a href=\"https://discord.com/invite/ultralytics\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-discord.png\" width=\"3%\" alt=\"Ultralytics Discord\"></a>\n</div>\n\n[tta]: https://docs.ultralytics.com/yolov5/tutorials/test_time_augmentation\n"
        },
        {
          "name": "README.zh-CN.md",
          "type": "blob",
          "size": 42.3466796875,
          "content": "<div align=\"center\">\n  <p>\n    <a align=\"center\" href=\"https://www.ultralytics.com/yolo\" target=\"_blank\">\n      <img width=\"100%\" src=\"https://raw.githubusercontent.com/ultralytics/assets/main/yolov3/banner-yolov3.png\"></a>\n  </p>\n\n[中文](https://docs.ultralytics.com/zh) | [한국어](https://docs.ultralytics.com/ko) | [日本語](https://docs.ultralytics.com/ja) | [Русский](https://docs.ultralytics.com/ru) | [Deutsch](https://docs.ultralytics.com/de) | [Français](https://docs.ultralytics.com/fr) | [Español](https://docs.ultralytics.com/es) | [Português](https://docs.ultralytics.com/pt) | [Türkçe](https://docs.ultralytics.com/tr) | [Tiếng Việt](https://docs.ultralytics.com/vi) | [العربية](https://docs.ultralytics.com/ar)\n\n<div>\n    <a href=\"https://github.com/ultralytics/yolov3/actions/workflows/ci-testing.yml\"><img src=\"https://github.com/ultralytics/yolov3/actions/workflows/ci-testing.yml/badge.svg\" alt=\"YOLOv3 CI\"></a>\n    <a href=\"https://zenodo.org/badge/latestdoi/264818686\"><img src=\"https://zenodo.org/badge/264818686.svg\" alt=\"YOLOv3 Citation\"></a>\n    <a href=\"https://hub.docker.com/r/ultralytics/yolov3\"><img src=\"https://img.shields.io/docker/pulls/ultralytics/yolov3?logo=docker\" alt=\"Docker Pulls\"></a>\n    <a href=\"https://discord.com/invite/ultralytics\"><img alt=\"Discord\" src=\"https://img.shields.io/discord/1089800235347353640?logo=discord&logoColor=white&label=Discord&color=blue\"></a> <a href=\"https://community.ultralytics.com/\"><img alt=\"Ultralytics Forums\" src=\"https://img.shields.io/discourse/users?server=https%3A%2F%2Fcommunity.ultralytics.com&logo=discourse&label=Forums&color=blue\"></a> <a href=\"https://reddit.com/r/ultralytics\"><img alt=\"Ultralytics Reddit\" src=\"https://img.shields.io/reddit/subreddit-subscribers/ultralytics?style=flat&logo=reddit&logoColor=white&label=Reddit&color=blue\"></a>\n    <br>\n    <a href=\"https://bit.ly/yolov5-paperspace-notebook\"><img src=\"https://assets.paperspace.io/img/gradient-badge.svg\" alt=\"Run on Gradient\"></a>\n    <a href=\"https://colab.research.google.com/github/ultralytics/yolov5/blob/master/tutorial.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"></a>\n    <a href=\"https://www.kaggle.com/models/ultralytics/yolov5\"><img src=\"https://kaggle.com/static/images/open-in-kaggle.svg\" alt=\"Open In Kaggle\"></a>\n  </div>\n  <br>\n\nYOLOv3 🚀 是世界上最受欢迎的视觉 AI，代表<a href=\"https://www.ultralytics.com/\"> Ultralytics </a>对未来视觉 AI 方法的开源研究，结合在数千小时的研究和开发中积累的经验教训和最佳实践。\n\n我们希望这里的资源能帮助您充分利用 YOLOv3。请浏览 YOLOv3 <a href=\"https://docs.ultralytics.com/\">文档</a> 了解详细信息，在 <a href=\"https://github.com/ultralytics/yolov3/issues/new/choose\">GitHub</a> 上提交问题以获得支持，并加入我们的 <a href=\"https://discord.com/invite/ultralytics\">Discord</a> 社区进行问题和讨论！\n\n如需申请企业许可，请在 [Ultralytics Licensing](https://www.ultralytics.com/license) 处填写表格\n\n<br>\n<div align=\"center\">\n  <a href=\"https://github.com/ultralytics\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-github.png\" width=\"2%\" alt=\"Ultralytics GitHub\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"2%\">\n  <a href=\"https://www.linkedin.com/company/ultralytics/\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-linkedin.png\" width=\"2%\" alt=\"Ultralytics LinkedIn\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"2%\">\n  <a href=\"https://twitter.com/ultralytics\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-twitter.png\" width=\"2%\" alt=\"Ultralytics Twitter\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"2%\">\n  <a href=\"https://youtube.com/ultralytics?sub_confirmation=1\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-youtube.png\" width=\"2%\" alt=\"Ultralytics YouTube\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"2%\">\n  <a href=\"https://www.tiktok.com/@ultralytics\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-tiktok.png\" width=\"2%\" alt=\"Ultralytics TikTok\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"2%\">\n  <a href=\"https://ultralytics.com/bilibili\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-bilibili.png\" width=\"2%\" alt=\"Ultralytics BiliBili\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"2%\">\n  <a href=\"https://discord.com/invite/ultralytics\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-discord.png\" width=\"2%\" alt=\"Ultralytics Discord\"></a>\n</div>\n</div>\n\n## <div align=\"center\">YOLO11 🚀 全新发布</div>\n\n我们很高兴宣布推出 Ultralytics YOLO11 🚀，这是我们最先进视觉模型的最新进展！现已在 **[GitHub](https://github.com/ultralytics/ultralytics)** 上发布。YOLO11 在速度、精度和易用性方面进一步提升，无论是处理目标检测、图像分割还是图像分类任务，YOLO11 都具备出色的性能和多功能性，助您在各种应用中脱颖而出。\n\n立即开始，解锁 YOLO11 的全部潜力！访问 [Ultralytics 文档](https://docs.ultralytics.com/) 获取全面的指南和资源：\n\n[![PyPI 版本](https://badge.fury.io/py/ultralytics.svg)](https://badge.fury.io/py/ultralytics) [![下载量](https://static.pepy.tech/badge/ultralytics)](https://www.pepy.tech/projects/ultralytics)\n\n```bash\npip install ultralytics\n```\n\n<div align=\"center\">\n  <a href=\"https://www.ultralytics.com/yolo\" target=\"_blank\">\n  <img width=\"100%\" src=\"https://raw.githubusercontent.com/ultralytics/assets/refs/heads/main/yolo/performance-comparison.png\"></a>\n</div>\n\n## <div align=\"center\">文档</div>\n\n有关训练、测试和部署的完整文档见[YOLOv3 文档](https://docs.ultralytics.com/)。请参阅下面的快速入门示例。\n\n<details open>\n<summary>安装</summary>\n\n克隆 repo，并要求在 [**Python>=3.7.0**](https://www.python.org/) 环境中安装 [requirements.txt](https://github.com/ultralytics/yolov5/blob/master/requirements.txt) ，且要求 [**PyTorch>=1.7**](https://pytorch.org/get-started/locally/) 。\n\n```bash\ngit clone https://github.com/ultralytics/yolov3  # clone\ncd yolov3\npip install -r requirements.txt  # install\n```\n\n</details>\n\n<details>\n<summary>推理</summary>\n\n使用 YOLOv3 [PyTorch Hub](https://docs.ultralytics.com/yolov5/tutorials/pytorch_hub_model_loading/) 推理。最新 [模型](https://github.com/ultralytics/yolov5/tree/master/models) 将自动的从 YOLOv3 [release](https://github.com/ultralytics/yolov5/releases) 中下载。\n\n```python\nimport torch\n\n# Model\nmodel = torch.hub.load(\"ultralytics/yolov5\", \"yolov3\")  # or yolov5n - yolov5x6, custom\n\n# Images\nimg = \"https://ultralytics.com/images/zidane.jpg\"  # or file, Path, PIL, OpenCV, numpy, list\n\n# Inference\nresults = model(img)\n\n# Results\nresults.print()  # or .show(), .save(), .crop(), .pandas(), etc.\n```\n\n</details>\n\n<details>\n<summary>使用 detect.py 推理</summary>\n\n`detect.py` 在各种来源上运行推理， [模型](https://github.com/ultralytics/yolov5/tree/master/models) 自动从 最新的YOLOv5 [release](https://github.com/ultralytics/yolov5/releases) 中下载，并将结果保存到 `runs/detect` 。\n\n```bash\npython detect.py --weights yolov5s.pt --source 0                               # webcam\n                                               img.jpg                         # image\n                                               vid.mp4                         # video\n                                               screen                          # screenshot\n                                               path/                           # directory\n                                               list.txt                        # list of images\n                                               list.streams                    # list of streams\n                                               'path/*.jpg'                    # glob\n                                               'https://youtu.be/LNwODJXcvt4'  # YouTube\n                                               'rtsp://example.com/media.mp4'  # RTSP, RTMP, HTTP stream\n```\n\n</details>\n\n<details>\n<summary>训练</summary>\n\n下面的命令重现 YOLOv3 在 [COCO](https://github.com/ultralytics/yolov5/blob/master/data/scripts/get_coco.sh) 数据集上的结果。 最新的 [模型](https://github.com/ultralytics/yolov5/tree/master/models) 和 [数据集](https://github.com/ultralytics/yolov5/tree/master/data) 将自动的从 YOLOv3 [release](https://github.com/ultralytics/yolov5/releases) 中下载。 YOLOv5n/s/m/l/x 在 V100 GPU 的训练时间为 1/2/4/6/8 天（ [多GPU](https://docs.ultralytics.com/yolov5/tutorials/multi_gpu_training/) 训练速度更快）。 尽可能使用更大的 `--batch-size` ，或通过 `--batch-size -1` 实现 YOLOv3 [自动批处理](https://github.com/ultralytics/yolov5/pull/5092) 。下方显示的 batchsize 适用于 V100-16GB。\n\n```bash\npython train.py --data coco.yaml --epochs 300 --weights '' --cfg yolov5n.yaml  --batch-size 128\n                                                                 yolov5s                    64\n                                                                 yolov5m                    40\n                                                                 yolov5l                    24\n                                                                 yolov5x                    16\n```\n\n<img width=\"800\" src=\"https://user-images.githubusercontent.com/26833433/90222759-949d8800-ddc1-11ea-9fa1-1c97eed2b963.png\">\n\n</details>\n\n<details open>\n<summary>教程</summary>\n\n- [自定义数据训练](https://docs.ultralytics.com/yolov5/tutorials/train_custom_data/) 🚀 **推荐**\n- [最佳训练效果的提示](https://docs.ultralytics.com/guides/model-training-tips/) ☘️\n- [多GPU训练](https://docs.ultralytics.com/yolov5/tutorials/multi_gpu_training/)\n- [PyTorch Hub](https://docs.ultralytics.com/yolov5/tutorials/pytorch_hub_model_loading/) 🌟 **全新**\n- [TFLite, ONNX, CoreML, TensorRT 导出](https://docs.ultralytics.com/yolov5/tutorials/model_export/) 🚀\n- [NVIDIA Jetson 平台部署](https://docs.ultralytics.com/yolov5/tutorials/running_on_jetson_nano/) 🌟 **全新**\n- [测试时增强 (TTA)](https://docs.ultralytics.com/yolov5/tutorials/test_time_augmentation/)\n- [模型集成](https://docs.ultralytics.com/yolov5/tutorials/model_ensembling/)\n- [模型剪枝/稀疏化](https://docs.ultralytics.com/yolov5/tutorials/model_pruning_and_sparsity/)\n- [超参数进化](https://docs.ultralytics.com/yolov5/tutorials/hyperparameter_evolution/)\n- [冻结层的迁移学习](https://docs.ultralytics.com/yolov5/tutorials/transfer_learning_with_frozen_layers/)\n- [架构概述](https://docs.ultralytics.com/yolov5/tutorials/architecture_description/) 🌟 **全新**\n- [使用 Ultralytics HUB 进行 YOLO 训练和部署](https://www.ultralytics.com/hub) 🚀 **推荐**\n- [ClearML 日志记录](https://docs.ultralytics.com/yolov5/tutorials/clearml_logging_integration/)\n- [与 Neural Magic 的 Deepsparse 集成的 YOLOv5](https://docs.ultralytics.com/yolov5/tutorials/neural_magic_pruning_quantization/)\n- [Comet 日志记录](https://docs.ultralytics.com/yolov5/tutorials/comet_logging_integration/) 🌟 **全新**\n\n</details>\n\n## <div align=\"center\">集成</div>\n\n我们与领先的 AI 平台的关键集成扩展了 Ultralytics 产品的功能，提升了数据集标注、训练、可视化和模型管理等任务。探索 Ultralytics 如何通过与 [W&B](https://docs.wandb.ai/guides/integrations/ultralytics/)、[Comet](https://bit.ly/yolov8-readme-comet)、[Roboflow](https://roboflow.com/?ref=ultralytics) 和 [OpenVINO](https://docs.ultralytics.com/integrations/openvino/) 的合作，优化您的 AI 工作流程。\n\n<br>\n<a href=\"https://www.ultralytics.com/hub\" target=\"_blank\">\n<img width=\"100%\" src=\"https://github.com/ultralytics/assets/raw/main/yolov8/banner-integrations.png\" alt=\"Ultralytics active learning integrations\"></a>\n<br>\n<br>\n\n<div align=\"center\">\n  <a href=\"https://www.ultralytics.com/hub\">\n    <img src=\"https://github.com/ultralytics/assets/raw/main/partners/logo-ultralytics-hub.png\" width=\"10%\" alt=\"Ultralytics HUB logo\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"15%\" height=\"0\" alt=\"space\">\n  <a href=\"https://docs.wandb.ai/guides/integrations/ultralytics/\">\n    <img src=\"https://github.com/ultralytics/assets/raw/main/partners/logo-wb.png\" width=\"10%\" alt=\"W&B logo\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"15%\" height=\"0\" alt=\"space\">\n  <a href=\"https://bit.ly/yolov8-readme-comet\">\n    <img src=\"https://github.com/ultralytics/assets/raw/main/partners/logo-comet.png\" width=\"10%\" alt=\"Comet ML logo\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"15%\" height=\"0\" alt=\"space\">\n  <a href=\"https://bit.ly/yolov5-neuralmagic\">\n    <img src=\"https://github.com/ultralytics/assets/raw/main/partners/logo-neuralmagic.png\" width=\"10%\" alt=\"NeuralMagic logo\"></a>\n</div>\n\n|                                              Ultralytics HUB 🚀                                              |                                                  W&B                                                   |                                                     Comet ⭐ 全新                                                      |                                            Neural Magic                                             |\n| :----------------------------------------------------------------------------------------------------------: | :----------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------: |\n| 简化 YOLO 工作流程：通过 [Ultralytics HUB](https://www.ultralytics.com/hub) 轻松标注、训练和部署。立即试用！ | 使用 [Weights & Biases](https://docs.wandb.ai/guides/integrations/ultralytics/) 跟踪实验、超参数和结果 | 永久免费，[Comet](https://bit.ly/yolov5-readme-comet) 允许您保存 YOLO11 模型、恢复训练，并交互式地可视化和调试预测结果 | 使用 [Neural Magic DeepSparse](https://bit.ly/yolov5-neuralmagic) 运行 YOLO11 推理，速度提升至 6 倍 |\n\n## <div align=\"center\">Ultralytics HUB</div>\n\n[Ultralytics HUB](https://www.ultralytics.com/hub) 是我们的⭐**新的**用于可视化数据集、训练 YOLOv3 🚀 模型并以无缝体验部署到现实世界的无代码解决方案。现在开始 **免费** 使用他！\n\n<a align=\"center\" href=\"https://www.ultralytics.com/hub\" target=\"_blank\">\n<img width=\"100%\" src=\"https://github.com/ultralytics/assets/raw/main/im/ultralytics-hub.png\"></a>\n\n## <div align=\"center\">为什么选择 YOLOv3</div>\n\nYOLOv3 超级容易上手，简单易学。我们优先考虑现实世界的结果。\n\n<p align=\"left\"><img width=\"800\" src=\"https://user-images.githubusercontent.com/26833433/155040763-93c22a27-347c-4e3c-847a-8094621d3f4e.png\"></p>\n<details>\n  <summary>YOLOv5-P5 640 图</summary>\n\n<p align=\"left\"><img width=\"800\" src=\"https://user-images.githubusercontent.com/26833433/155040757-ce0934a3-06a6-43dc-a979-2edbbd69ea0e.png\"></p>\n</details>\n<details>\n  <summary>图表笔记</summary>\n\n- **COCO AP val** 表示 mAP@0.5:0.95 指标，在 [COCO val2017](http://cocodataset.org) 数据集的 5000 张图像上测得， 图像包含 256 到 1536 各种推理大小。\n- **显卡推理速度** 为在 [COCO val2017](http://cocodataset.org) 数据集上的平均推理时间，使用 [AWS p3.2xlarge](https://aws.amazon.com/ec2/instance-types/p4/) V100实例，batchsize 为 32 。\n- **EfficientDet** 数据来自 [google/automl](https://github.com/google/automl) ， batchsize 为32。\n- **复现命令** 为 `python val.py --task study --data coco.yaml --iou 0.7 --weights yolov5n6.pt yolov5s6.pt yolov5m6.pt yolov5l6.pt yolov5x6.pt`\n\n</details>\n\n### 预训练模型\n\n| 模型                                                                                           | 尺寸<br><sup>（像素） | mAP<sup>val<br>50-95 | mAP<sup>val<br>50 | 推理速度<br><sup>CPU b1<br>（ms） | 推理速度<br><sup>V100 b1<br>（ms） | 速度<br><sup>V100 b32<br>（ms） | 参数量<br><sup>(M) | FLOPs<br><sup>@640 (B) |\n| ---------------------------------------------------------------------------------------------- | --------------------- | -------------------- | ----------------- | --------------------------------- | ---------------------------------- | ------------------------------- | ------------------ | ---------------------- |\n| [YOLOv5n](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5n.pt)             | 640                   | 28.0                 | 45.7              | **45**                            | **6.3**                            | **0.6**                         | **1.9**            | **4.5**                |\n| [YOLOv5s](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5s.pt)             | 640                   | 37.4                 | 56.8              | 98                                | 6.4                                | 0.9                             | 7.2                | 16.5                   |\n| [YOLOv5m](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5m.pt)             | 640                   | 45.4                 | 64.1              | 224                               | 8.2                                | 1.7                             | 21.2               | 49.0                   |\n| [YOLOv5l](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5l.pt)             | 640                   | 49.0                 | 67.3              | 430                               | 10.1                               | 2.7                             | 46.5               | 109.1                  |\n| [YOLOv5x](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5x.pt)             | 640                   | 50.7                 | 68.9              | 766                               | 12.1                               | 4.8                             | 86.7               | 205.7                  |\n|                                                                                                |                       |                      |                   |                                   |                                    |                                 |                    |                        |\n| [YOLOv5n6](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5n6.pt)           | 1280                  | 36.0                 | 54.4              | 153                               | 8.1                                | 2.1                             | 3.2                | 4.6                    |\n| [YOLOv5s6](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5s6.pt)           | 1280                  | 44.8                 | 63.7              | 385                               | 8.2                                | 3.6                             | 12.6               | 16.8                   |\n| [YOLOv5m6](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5m6.pt)           | 1280                  | 51.3                 | 69.3              | 887                               | 11.1                               | 6.8                             | 35.7               | 50.0                   |\n| [YOLOv5l6](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5l6.pt)           | 1280                  | 53.7                 | 71.3              | 1784                              | 15.8                               | 10.5                            | 76.8               | 111.4                  |\n| [YOLOv5x6](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5x6.pt)<br>+[TTA] | 1280<br>1536          | 55.0<br>**55.8**     | 72.7<br>**72.7**  | 3136<br> -                        | 26.2<br> -                         | 19.4<br> -                      | 140.7<br> -        | 209.8<br> -            |\n\n<details>\n  <summary>笔记</summary>\n\n- 所有模型都使用默认配置，训练 300 epochs。n和s模型使用 [hyp.scratch-low.yaml](https://github.com/ultralytics/yolov5/blob/master/data/hyps/hyp.scratch-low.yaml) ，其他模型都使用 [hyp.scratch-high.yaml](https://github.com/ultralytics/yolov5/blob/master/data/hyps/hyp.scratch-high.yaml) 。\n- \\*\\*mAP<sup>val</sup>\\*\\*在单模型单尺度上计算，数据集使用 [COCO val2017](http://cocodataset.org) 。<br>复现命令 `python val.py --data coco.yaml --img 640 --conf 0.001 --iou 0.65`\n- **推理速度**在 COCO val 图像总体时间上进行平均得到，测试环境使用[AWS p3.2xlarge](https://aws.amazon.com/ec2/instance-types/p4/)实例。 NMS 时间 (大约 1 ms/img) 不包括在内。<br>复现命令 `python val.py --data coco.yaml --img 640 --task speed --batch 1`\n- **TTA** [测试时数据增强](https://docs.ultralytics.com/yolov5/tutorials/test_time_augmentation/) 包括反射和尺度变换。<br>复现命令 `python val.py --data coco.yaml --img 1536 --iou 0.7 --augment`\n\n</details>\n\n## <div align=\"center\">实例分割模型 ⭐ 新</div>\n\n我们新的 YOLOv5 [release v7.0](https://github.com/ultralytics/yolov5/releases/v7.0) 实例分割模型是世界上最快和最准确的模型，击败所有当前 [SOTA 基准](https://paperswithcode.com/sota/real-time-instance-segmentation-on-mscoco)。我们使它非常易于训练、验证和部署。更多细节请查看 [发行说明](https://github.com/ultralytics/yolov5/releases/v7.0) 或访问我们的 [YOLOv5 分割 Colab 笔记本](https://github.com/ultralytics/yolov5/blob/master/segment/tutorial.ipynb) 以快速入门。\n\n<details>\n  <summary>实例分割模型列表</summary>\n\n<br>\n\n<div align=\"center\">\n<a align=\"center\" href=\"https://www.ultralytics.com/yolo\" target=\"_blank\">\n<img width=\"800\" src=\"https://user-images.githubusercontent.com/61612323/204180385-84f3aca9-a5e9-43d8-a617-dda7ca12e54a.png\"></a>\n</div>\n\n我们使用 A100 GPU 在 COCO 上以 640 图像大小训练了 300 epochs 得到 YOLOv5 分割模型。我们将所有模型导出到 ONNX FP32 以进行 CPU 速度测试，并导出到 TensorRT FP16 以进行 GPU 速度测试。为了便于再现，我们在 Google [Colab Pro](https://colab.research.google.com/signup) 上进行了所有速度测试。\n\n| 模型                                                                                       | 尺寸<br><sup>（像素） | mAP<sup>box<br>50-95 | mAP<sup>mask<br>50-95 | 训练时长<br><sup>300 epochs<br>A100 GPU（小时） | 推理速度<br><sup>ONNX CPU<br>（ms） | 推理速度<br><sup>TRT A100<br>（ms） | 参数量<br><sup>(M) | FLOPs<br><sup>@640 (B) |\n| ------------------------------------------------------------------------------------------ | --------------------- | -------------------- | --------------------- | ----------------------------------------------- | ----------------------------------- | ----------------------------------- | ------------------ | ---------------------- |\n| [YOLOv5n-seg](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5n-seg.pt) | 640                   | 27.6                 | 23.4                  | 80:17                                           | **62.7**                            | **1.2**                             | **2.0**            | **7.1**                |\n| [YOLOv5s-seg](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5s-seg.pt) | 640                   | 37.6                 | 31.7                  | 88:16                                           | 173.3                               | 1.4                                 | 7.6                | 26.4                   |\n| [YOLOv5m-seg](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5m-seg.pt) | 640                   | 45.0                 | 37.1                  | 108:36                                          | 427.0                               | 2.2                                 | 22.0               | 70.8                   |\n| [YOLOv5l-seg](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5l-seg.pt) | 640                   | 49.0                 | 39.9                  | 66:43 (2x)                                      | 857.4                               | 2.9                                 | 47.9               | 147.7                  |\n| [YOLOv5x-seg](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5x-seg.pt) | 640                   | **50.7**             | **41.4**              | 62:56 (3x)                                      | 1579.2                              | 4.5                                 | 88.8               | 265.7                  |\n\n- 所有模型使用 SGD 优化器训练， 都使用 `lr0=0.01` 和 `weight_decay=5e-5` 参数， 图像大小为 640 。<br>训练 log 可以查看 https://wandb.ai/glenn-jocher/YOLOv5_v70_official\n- **准确性**结果都在 COCO 数据集上，使用单模型单尺度测试得到。<br>复现命令 `python segment/val.py --data coco.yaml --weights yolov5s-seg.pt`\n- **推理速度**是使用 100 张图像推理时间进行平均得到，测试环境使用 [Colab Pro](https://colab.research.google.com/signup) 上 A100 高 RAM 实例。结果仅表示推理速度（NMS 每张图像增加约 1 毫秒）。<br>复现命令 `python segment/val.py --data coco.yaml --weights yolov5s-seg.pt --batch 1`\n- **模型转换**到 FP32 的 ONNX 和 FP16 的 TensorRT 脚本为 `export.py`.<br>运行命令 `python export.py --weights yolov5s-seg.pt --include engine --device 0 --half`\n\n</details>\n\n<details>\n  <summary>分割模型使用示例 &nbsp;<a href=\"https://colab.research.google.com/github/ultralytics/yolov5/blob/master/segment/tutorial.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"></a></summary>\n\n### 训练\n\nYOLOv5分割训练支持自动下载 COCO128-seg 分割数据集，用户仅需在启动指令中包含 `--data coco128-seg.yaml` 参数。 若要手动下载，使用命令 `bash data/scripts/get_coco.sh --train --val --segments`， 在下载完毕后，使用命令 `python train.py --data coco.yaml` 开启训练。\n\n```bash\n# 单 GPU\npython segment/train.py --data coco128-seg.yaml --weights yolov5s-seg.pt --img 640\n\n# 多 GPU， DDP 模式\npython -m torch.distributed.run --nproc_per_node 4 --master_port 1 segment/train.py --data coco128-seg.yaml --weights yolov5s-seg.pt --img 640 --device 0,1,2,3\n```\n\n### 验证\n\n在 COCO 数据集上验证 YOLOv5s-seg mask mAP：\n\n```bash\nbash data/scripts/get_coco.sh --val --segments  # 下载 COCO val segments 数据集 (780MB, 5000 images)\npython segment/val.py --weights yolov5s-seg.pt --data coco.yaml --img 640  # 验证\n```\n\n### 预测\n\n使用预训练的 YOLOv5m-seg.pt 来预测 bus.jpg：\n\n```bash\npython segment/predict.py --weights yolov5m-seg.pt --data data/images/bus.jpg\n```\n\n```python\nmodel = torch.hub.load(\n    \"ultralytics/yolov5\", \"custom\", \"yolov5m-seg.pt\"\n)  # 从load from PyTorch Hub 加载模型 (WARNING: 推理暂未支持)\n```\n\n| ![zidane](https://user-images.githubusercontent.com/26833433/203113421-decef4c4-183d-4a0a-a6c2-6435b33bc5d3.jpg) | ![bus](https://user-images.githubusercontent.com/26833433/203113416-11fe0025-69f7-4874-a0a6-65d0bfe2999a.jpg) |\n| ---------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n\n### 模型导出\n\n将 YOLOv5s-seg 模型导出到 ONNX 和 TensorRT：\n\n```bash\npython export.py --weights yolov5s-seg.pt --include onnx engine --img 640 --device 0\n```\n\n</details>\n\n## <div align=\"center\">分类网络 ⭐ 新</div>\n\nYOLOv5 [release v6.2](https://github.com/ultralytics/yolov5/releases) 带来对分类模型训练、验证和部署的支持！详情请查看 [发行说明](https://github.com/ultralytics/yolov5/releases/v6.2) 或访问我们的 [YOLOv5 分类 Colab 笔记本](https://github.com/ultralytics/yolov5/blob/master/classify/tutorial.ipynb) 以快速入门。\n\n<details>\n  <summary>分类网络模型</summary>\n\n<br>\n\n我们使用 4xA100 实例在 ImageNet 上训练了 90 个 epochs 得到 YOLOv5-cls 分类模型，我们训练了 ResNet 和 EfficientNet 模型以及相同的默认训练设置以进行比较。我们将所有模型导出到 ONNX FP32 以进行 CPU 速度测试，并导出到 TensorRT FP16 以进行 GPU 速度测试。为了便于重现，我们在 Google 上进行了所有速度测试 [Colab Pro](https://colab.research.google.com/signup) 。\n\n| 模型                                                                                               | 尺寸<br><sup>（像素） | acc<br><sup>top1 | acc<br><sup>top5 | 训练时长<br><sup>90 epochs<br>4xA100（小时） | 推理速度<br><sup>ONNX CPU<br>（ms） | 推理速度<br><sup>TensorRT V100<br>（ms） | 参数<br><sup>(M) | FLOPs<br><sup>@640 (B) |\n| -------------------------------------------------------------------------------------------------- | --------------------- | ---------------- | ---------------- | -------------------------------------------- | ----------------------------------- | ---------------------------------------- | ---------------- | ---------------------- |\n| [YOLOv5n-cls](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5n-cls.pt)         | 224                   | 64.6             | 85.4             | 7:59                                         | **3.3**                             | **0.5**                                  | **2.5**          | **0.5**                |\n| [YOLOv5s-cls](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5s-cls.pt)         | 224                   | 71.5             | 90.2             | 8:09                                         | 6.6                                 | 0.6                                      | 5.4              | 1.4                    |\n| [YOLOv5m-cls](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5m-cls.pt)         | 224                   | 75.9             | 92.9             | 10:06                                        | 15.5                                | 0.9                                      | 12.9             | 3.9                    |\n| [YOLOv5l-cls](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5l-cls.pt)         | 224                   | 78.0             | 94.0             | 11:56                                        | 26.9                                | 1.4                                      | 26.5             | 8.5                    |\n| [YOLOv5x-cls](https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5x-cls.pt)         | 224                   | **79.0**         | **94.4**         | 15:04                                        | 54.3                                | 1.8                                      | 48.1             | 15.9                   |\n|                                                                                                    |                       |                  |                  |                                              |                                     |                                          |                  |                        |\n| [ResNet18](https://github.com/ultralytics/yolov5/releases/download/v7.0/resnet18.pt)               | 224                   | 70.3             | 89.5             | **6:47**                                     | 11.2                                | 0.5                                      | 11.7             | 3.7                    |\n| [Resnetzch](https://github.com/ultralytics/yolov5/releases/download/v7.0/resnet34.pt)              | 224                   | 73.9             | 91.8             | 8:33                                         | 20.6                                | 0.9                                      | 21.8             | 7.4                    |\n| [ResNet50](https://github.com/ultralytics/yolov5/releases/download/v7.0/resnet50.pt)               | 224                   | 76.8             | 93.4             | 11:10                                        | 23.4                                | 1.0                                      | 25.6             | 8.5                    |\n| [ResNet101](https://github.com/ultralytics/yolov5/releases/download/v7.0/resnet101.pt)             | 224                   | 78.5             | 94.3             | 17:10                                        | 42.1                                | 1.9                                      | 44.5             | 15.9                   |\n|                                                                                                    |                       |                  |                  |                                              |                                     |                                          |                  |                        |\n| [EfficientNet_b0](https://github.com/ultralytics/yolov5/releases/download/v7.0/efficientnet_b0.pt) | 224                   | 75.1             | 92.4             | 13:03                                        | 12.5                                | 1.3                                      | 5.3              | 1.0                    |\n| [EfficientNet_b1](https://github.com/ultralytics/yolov5/releases/download/v7.0/efficientnet_b1.pt) | 224                   | 76.4             | 93.2             | 17:04                                        | 14.9                                | 1.6                                      | 7.8              | 1.5                    |\n| [EfficientNet_b2](https://github.com/ultralytics/yolov5/releases/download/v7.0/efficientnet_b2.pt) | 224                   | 76.6             | 93.4             | 17:10                                        | 15.9                                | 1.6                                      | 9.1              | 1.7                    |\n| [EfficientNet_b3](https://github.com/ultralytics/yolov5/releases/download/v7.0/efficientnet_b3.pt) | 224                   | 77.7             | 94.0             | 19:19                                        | 18.9                                | 1.9                                      | 12.2             | 2.4                    |\n\n<details>\n  <summary>Table Notes (点击以展开)</summary>\n\n- 所有模型都使用 SGD 优化器训练 90 个 epochs，都使用 `lr0=0.001` 和 `weight_decay=5e-5` 参数， 图像大小为 224 ，且都使用默认设置。<br>训练 log 可以查看 https://wandb.ai/glenn-jocher/YOLOv5-Classifier-v6-2\n- **准确性**都在单模型单尺度上计算，数据集使用 [ImageNet-1k](https://www.image-net.org/index.php) 。<br>复现命令 `python classify/val.py --data ../datasets/imagenet --img 224`\n- **推理速度**是使用 100 个推理图像进行平均得到，测试环境使用谷歌 [Colab Pro](https://colab.research.google.com/signup) V100 高 RAM 实例。<br>复现命令 `python classify/val.py --data ../datasets/imagenet --img 224 --batch 1`\n- **模型导出**到 FP32 的 ONNX 和 FP16 的 TensorRT 使用 `export.py` 。<br>复现命令 `python export.py --weights yolov5s-cls.pt --include engine onnx --imgsz 224`\n</details>\n</details>\n\n<details>\n  <summary>分类训练示例 &nbsp;<a href=\"https://colab.research.google.com/github/ultralytics/yolov5/blob/master/classify/tutorial.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"></a></summary>\n\n### 训练\n\nYOLOv5 分类训练支持自动下载 MNIST、Fashion-MNIST、CIFAR10、CIFAR100、Imagenette、Imagewoof 和 ImageNet 数据集，命令中使用 `--data` 即可。 MNIST 示例 `--data mnist` 。\n\n```bash\n# 单 GPU\npython classify/train.py --model yolov5s-cls.pt --data cifar100 --epochs 5 --img 224 --batch 128\n\n# 多 GPU， DDP 模式\npython -m torch.distributed.run --nproc_per_node 4 --master_port 1 classify/train.py --model yolov5s-cls.pt --data imagenet --epochs 5 --img 224 --device 0,1,2,3\n```\n\n### 验证\n\n在 ImageNet-1k 数据集上验证 YOLOv5m-cls 的准确性：\n\n```bash\nbash data/scripts/get_imagenet.sh --val  # download ImageNet val split (6.3G, 50000 images)\npython classify/val.py --weights yolov5m-cls.pt --data ../datasets/imagenet --img 224  # validate\n```\n\n### 预测\n\n使用预训练的 YOLOv5s-cls.pt 来预测 bus.jpg：\n\n```bash\npython classify/predict.py --weights yolov5s-cls.pt --data data/images/bus.jpg\n```\n\n```python\nmodel = torch.hub.load(\"ultralytics/yolov5\", \"custom\", \"yolov5s-cls.pt\")  # load from PyTorch Hub\n```\n\n### 模型导出\n\n将一组经过训练的 YOLOv5s-cls、ResNet 和 EfficientNet 模型导出到 ONNX 和 TensorRT：\n\n```bash\npython export.py --weights yolov5s-cls.pt resnet50.pt efficientnet_b0.pt --include onnx engine --img 224\n```\n\n</details>\n\n## <div align=\"center\">环境</div>\n\n使用下面我们经过验证的环境，在几秒钟内开始使用 YOLOv3 。单击下面的图标了解详细信息。\n\n<div align=\"center\">\n  <a href=\"https://bit.ly/yolov5-paperspace-notebook\">\n    <img src=\"https://github.com/ultralytics/assets/releases/download/v0.0.0/logo-gradient.png\" width=\"10%\" /></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"5%\" alt=\"\" />\n  <a href=\"https://colab.research.google.com/github/ultralytics/yolov5/blob/master/tutorial.ipynb\">\n    <img src=\"https://github.com/ultralytics/assets/releases/download/v0.0.0/logo-colab-small.png\" width=\"10%\" /></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"5%\" alt=\"\" />\n  <a href=\"https://www.kaggle.com/models/ultralytics/yolov5\">\n    <img src=\"https://github.com/ultralytics/assets/releases/download/v0.0.0/logo-kaggle-small.png\" width=\"10%\" /></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"5%\" alt=\"\" />\n  <a href=\"https://hub.docker.com/r/ultralytics/yolov3\">\n    <img src=\"https://github.com/ultralytics/assets/releases/download/v0.0.0/logo-docker-small.png\" width=\"10%\" /></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"5%\" alt=\"\" />\n  <a href=\"https://docs.ultralytics.com/yolov5/environments/aws_quickstart_tutorial/\">\n    <img src=\"https://github.com/ultralytics/assets/releases/download/v0.0.0/logo-aws-small.png\" width=\"10%\" /></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"5%\" alt=\"\" />\n  <a href=\"https://docs.ultralytics.com/yolov5/environments/google_cloud_quickstart_tutorial/\">\n    <img src=\"https://github.com/ultralytics/assets/releases/download/v0.0.0/logo-gcp-small.png\" width=\"10%\" /></a>\n</div>\n\n## <div align=\"center\">贡献</div>\n\n我们喜欢您的意见或建议！我们希望尽可能简单和透明地为 YOLOv3 做出贡献。请看我们的 [投稿指南](https://docs.ultralytics.com/help/contributing/)，并填写 [YOLOv5调查](https://www.ultralytics.com/survey?utm_source=github&utm_medium=social&utm_campaign=Survey) 向我们发送您的体验反馈。感谢我们所有的贡献者！\n\n<!-- SVG image from https://opencollective.com/ultralytics/contributors.svg?width=990 -->\n\n<a href=\"https://github.com/ultralytics/yolov5/graphs/contributors\">\n<img src=\"https://github.com/ultralytics/assets/raw/main/im/image-contributors.png\" /></a>\n\n## <div align=\"center\">许可证</div>\n\nUltralytics 提供两种许可证选项以适应各种使用场景：\n\n- **AGPL-3.0 许可证**：这个[OSI 批准](https://opensource.org/license)的开源许可证非常适合学生和爱好者，可以推动开放的协作和知识分享。请查看[LICENSE](https://github.com/ultralytics/yolov3/blob/master/LICENSE) 文件以了解更多细节。\n- **企业许可证**：专为商业用途设计，该许可证允许将 Ultralytics 的软件和 AI 模型无缝集成到商业产品和服务中，从而绕过 AGPL-3.0 的开源要求。如果您的场景涉及将我们的解决方案嵌入到商业产品中，请通过 [Ultralytics Licensing](https://www.ultralytics.com/license)与我们联系。\n\n## <div align=\"center\">联系方式</div>\n\n对于 Ultralytics 的错误报告和功能请求，请访问 [GitHub Issues](https://github.com/ultralytics/yolov3/issues)，并加入我们的 [Discord](https://discord.com/invite/ultralytics) 社区进行问题和讨论！\n\n<br>\n<div align=\"center\">\n  <a href=\"https://github.com/ultralytics\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-github.png\" width=\"3%\" alt=\"Ultralytics GitHub\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"3%\">\n  <a href=\"https://www.linkedin.com/company/ultralytics/\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-linkedin.png\" width=\"3%\" alt=\"Ultralytics LinkedIn\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"3%\">\n  <a href=\"https://twitter.com/ultralytics\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-twitter.png\" width=\"3%\" alt=\"Ultralytics Twitter\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"3%\">\n  <a href=\"https://youtube.com/ultralytics?sub_confirmation=1\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-youtube.png\" width=\"3%\" alt=\"Ultralytics YouTube\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"3%\">\n  <a href=\"https://www.tiktok.com/@ultralytics\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-tiktok.png\" width=\"3%\" alt=\"Ultralytics TikTok\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"3%\">\n  <a href=\"https://ultralytics.com/bilibili\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-bilibili.png\" width=\"3%\" alt=\"Ultralytics BiliBili\"></a>\n  <img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-transparent.png\" width=\"3%\">\n  <a href=\"https://discord.com/invite/ultralytics\"><img src=\"https://github.com/ultralytics/assets/raw/main/social/logo-social-discord.png\" width=\"3%\" alt=\"Ultralytics Discord\"></a>\n</div>\n\n[tta]: https://docs.ultralytics.com/yolov5/tutorials/test_time_augmentation\n"
        },
        {
          "name": "benchmarks.py",
          "type": "blob",
          "size": 13.708984375,
          "content": "# Ultralytics YOLOv3 🚀, AGPL-3.0 license\n\"\"\"\nRun YOLOv3 benchmarks on all supported export formats.\n\nFormat                      | `export.py --include`         | Model\n---                         | ---                           | ---\nPyTorch                     | -                             | yolov5s.pt\nTorchScript                 | `torchscript`                 | yolov5s.torchscript\nONNX                        | `onnx`                        | yolov5s.onnx\nOpenVINO                    | `openvino`                    | yolov5s_openvino_model/\nTensorRT                    | `engine`                      | yolov5s.engine\nCoreML                      | `coreml`                      | yolov5s.mlmodel\nTensorFlow SavedModel       | `saved_model`                 | yolov5s_saved_model/\nTensorFlow GraphDef         | `pb`                          | yolov5s.pb\nTensorFlow Lite             | `tflite`                      | yolov5s.tflite\nTensorFlow Edge TPU         | `edgetpu`                     | yolov5s_edgetpu.tflite\nTensorFlow.js               | `tfjs`                        | yolov5s_web_model/\n\nRequirements:\n    $ pip install -r requirements.txt coremltools onnx onnx-simplifier onnxruntime openvino-dev tensorflow-cpu  # CPU\n    $ pip install -r requirements.txt coremltools onnx onnx-simplifier onnxruntime-gpu openvino-dev tensorflow  # GPU\n    $ pip install -U nvidia-tensorrt --index-url https://pypi.ngc.nvidia.com  # TensorRT\n\nUsage:\n    $ python benchmarks.py --weights yolov5s.pt --img 640\n\"\"\"\n\nimport argparse\nimport platform\nimport sys\nimport time\nfrom pathlib import Path\n\nimport pandas as pd\n\nFILE = Path(__file__).resolve()\nROOT = FILE.parents[0]  # YOLOv3 root directory\nif str(ROOT) not in sys.path:\n    sys.path.append(str(ROOT))  # add ROOT to PATH\n# ROOT = ROOT.relative_to(Path.cwd())  # relative\n\nimport export\nfrom models.experimental import attempt_load\nfrom models.yolo import SegmentationModel\nfrom segment.val import run as val_seg\nfrom utils import notebook_init\nfrom utils.general import LOGGER, check_yaml, file_size, print_args\nfrom utils.torch_utils import select_device\nfrom val import run as val_det\n\n\ndef run(\n    weights=ROOT / \"yolov5s.pt\",  # weights path\n    imgsz=640,  # inference size (pixels)\n    batch_size=1,  # batch size\n    data=ROOT / \"data/coco128.yaml\",  # dataset.yaml path\n    device=\"\",  # cuda device, i.e. 0 or 0,1,2,3 or cpu\n    half=False,  # use FP16 half-precision inference\n    test=False,  # test exports only\n    pt_only=False,  # test PyTorch only\n    hard_fail=False,  # throw error on benchmark failure\n):\n    \"\"\"\n    Run YOLOv3 benchmarks on multiple export formats and validate performance metrics.\n\n    Args:\n        weights (str | Path): Path to the weights file. Defaults to 'yolov5s.pt'.\n        imgsz (int): Inference image size in pixels. Defaults to 640.\n        batch_size (int): Batch size for inference. Defaults to 1.\n        data (str | Path): Path to the dataset configuration file (dataset.yaml). Defaults to 'data/coco128.yaml'.\n        device (str): Device to be used for inference, e.g., '0' or '0,1,2,3' for GPU or 'cpu' for CPU. Defaults to ''.\n        half (bool): Use FP16 half-precision for inference. Defaults to False.\n        test (bool): Test exports only without running benchmarks. Defaults to False.\n        pt_only (bool): Run benchmarks only for PyTorch format. Defaults to False.\n        hard_fail (bool): Raise an error if any benchmark test fails. Defaults to False.\n\n    Returns:\n        None\n\n    Notes:\n        This function iterates over multiple export formats, performs the export, and then validates the model's performance\n        using appropriate validation functions for detection and segmentation models. The results are logged, and optionally,\n        benchmarks can be configured to raise errors on failures using the `hard_fail` argument.\n\n    Examples:\n        ```python\n        # Run benchmarks on the default 'yolov5s.pt' model with an image size of 640 pixels\n        run()\n\n        # Run benchmarks on a specific model with GPU and half-precision enabled\n        run(weights='custom_model.pt', device='0', half=True)\n\n        # Test only PyTorch export\n        run(pt_only=True)\n        ```\n    \"\"\"\n    y, t = [], time.time()\n    device = select_device(device)\n    model_type = type(attempt_load(weights, fuse=False))  # DetectionModel, SegmentationModel, etc.\n    for i, (name, f, suffix, cpu, gpu) in export.export_formats().iterrows():  # index, (name, file, suffix, CPU, GPU)\n        try:\n            assert i not in (9, 10), \"inference not supported\"  # Edge TPU and TF.js are unsupported\n            assert i != 5 or platform.system() == \"Darwin\", \"inference only supported on macOS>=10.13\"  # CoreML\n            if \"cpu\" in device.type:\n                assert cpu, \"inference not supported on CPU\"\n            if \"cuda\" in device.type:\n                assert gpu, \"inference not supported on GPU\"\n\n            # Export\n            if f == \"-\":\n                w = weights  # PyTorch format\n            else:\n                w = export.run(\n                    weights=weights, imgsz=[imgsz], include=[f], batch_size=batch_size, device=device, half=half\n                )[-1]  # all others\n            assert suffix in str(w), \"export failed\"\n\n            # Validate\n            if model_type == SegmentationModel:\n                result = val_seg(data, w, batch_size, imgsz, plots=False, device=device, task=\"speed\", half=half)\n                metric = result[0][7]  # (box(p, r, map50, map), mask(p, r, map50, map), *loss(box, obj, cls))\n            else:  # DetectionModel:\n                result = val_det(data, w, batch_size, imgsz, plots=False, device=device, task=\"speed\", half=half)\n                metric = result[0][3]  # (p, r, map50, map, *loss(box, obj, cls))\n            speed = result[2][1]  # times (preprocess, inference, postprocess)\n            y.append([name, round(file_size(w), 1), round(metric, 4), round(speed, 2)])  # MB, mAP, t_inference\n        except Exception as e:\n            if hard_fail:\n                assert type(e) is AssertionError, f\"Benchmark --hard-fail for {name}: {e}\"\n            LOGGER.warning(f\"WARNING ⚠️ Benchmark failure for {name}: {e}\")\n            y.append([name, None, None, None])  # mAP, t_inference\n        if pt_only and i == 0:\n            break  # break after PyTorch\n\n    # Print results\n    LOGGER.info(\"\\n\")\n    parse_opt()\n    notebook_init()  # print system info\n    c = [\"Format\", \"Size (MB)\", \"mAP50-95\", \"Inference time (ms)\"] if map else [\"Format\", \"Export\", \"\", \"\"]\n    py = pd.DataFrame(y, columns=c)\n    LOGGER.info(f\"\\nBenchmarks complete ({time.time() - t:.2f}s)\")\n    LOGGER.info(str(py if map else py.iloc[:, :2]))\n    if hard_fail and isinstance(hard_fail, str):\n        metrics = py[\"mAP50-95\"].array  # values to compare to floor\n        floor = eval(hard_fail)  # minimum metric floor to pass, i.e. = 0.29 mAP for YOLOv5n\n        assert all(x > floor for x in metrics if pd.notna(x)), f\"HARD FAIL: mAP50-95 < floor {floor}\"\n    return py\n\n\ndef test(\n    weights=ROOT / \"yolov5s.pt\",  # weights path\n    imgsz=640,  # inference size (pixels)\n    batch_size=1,  # batch size\n    data=ROOT / \"data/coco128.yaml\",  # dataset.yaml path\n    device=\"\",  # cuda device, i.e. 0 or 0,1,2,3 or cpu\n    half=False,  # use FP16 half-precision inference\n    test=False,  # test exports only\n    pt_only=False,  # test PyTorch only\n    hard_fail=False,  # throw error on benchmark failure\n):\n    \"\"\"\n    Run YOLOv3 export tests for various formats and log the results, including export success status.\n\n    Args:\n        weights (str | Path): Path to the weights file. Defaults to ROOT / \"yolov5s.pt\".\n        imgsz (int): Inference size in pixels. Defaults to 640.\n        batch_size (int): Number of images per batch. Defaults to 1.\n        data (str | Path): Path to the dataset yaml file. Defaults to ROOT / \"data/coco128.yaml\".\n        device (str): Device for inference. Accepts cuda device (e.g., \"0\" or \"0,1,2,3\") or \"cpu\". Defaults to \"\".\n        half (bool): Use FP16 half-precision inference. Defaults to False.\n        test (bool): Run export tests only, no inference. Defaults to False.\n        pt_only (bool): Run tests on PyTorch format only. Defaults to False.\n        hard_fail (bool): Raise an error on benchmark failure. Defaults to False.\n\n    Returns:\n        pd.DataFrame: A DataFrame containing the export formats and their success status.\n\n    Examples:\n        ```python\n        from ultralytics import test\n\n        results = test(\n            weights=\"path/to/yolov5s.pt\",\n            imgsz=640,\n            batch_size=1,\n            data=\"path/to/coco128.yaml\",\n            device=\"0\",\n            half=False,\n            test=True,\n            pt_only=False,\n            hard_fail=True,\n        )\n        print(results)\n        ```\n\n    Notes:\n        Ensure all required packages are installed as specified in the Ultralytics YOLOv3 documentation:\n        https://github.com/ultralytics/ultralytics\n    \"\"\"\n    y, t = [], time.time()\n    device = select_device(device)\n    for i, (name, f, suffix, gpu) in export.export_formats().iterrows():  # index, (name, file, suffix, gpu-capable)\n        try:\n            w = (\n                weights\n                if f == \"-\"\n                else export.run(weights=weights, imgsz=[imgsz], include=[f], device=device, half=half)[-1]\n            )  # weights\n            assert suffix in str(w), \"export failed\"\n            y.append([name, True])\n        except Exception:\n            y.append([name, False])  # mAP, t_inference\n\n    # Print results\n    LOGGER.info(\"\\n\")\n    parse_opt()\n    notebook_init()  # print system info\n    py = pd.DataFrame(y, columns=[\"Format\", \"Export\"])\n    LOGGER.info(f\"\\nExports complete ({time.time() - t:.2f}s)\")\n    LOGGER.info(str(py))\n    return py\n\n\ndef parse_opt():\n    \"\"\"\n    Parses command line arguments for YOLOv3 inference and export configurations.\n\n    Args:\n        --weights (str): Path to the weights file. Default is 'ROOT / \"yolov3-tiny.pt\"'.\n        --imgsz | --img | --img-size (int): Inference image size in pixels. Default is 640.\n        --batch-size (int): Batch size for inference. Default is 1.\n        --data (str): Path to the dataset configuration file (dataset.yaml). Default is 'ROOT / \"data/coco128.yaml\"'.\n        --device (str): CUDA device identifier, e.g., '0' for single GPU, '0,1,2,3' for multiple GPUs, or 'cpu' for CPU\n            inference. Default is \"\".\n        --half (bool): If set, use FP16 half-precision inference. Default is False.\n        --test (bool): If set, test only exports without running inference. Default is False.\n        --pt-only (bool): If set, test only the PyTorch model without exporting to other formats. Default is False.\n        --hard-fail (str | bool): If set, raise an exception on benchmark failure. Can also be a string representing the\n            minimum metric floor for success. Default is False.\n\n    Returns:\n        argparse.Namespace: The parsed arguments as a namespace object.\n\n    Example:\n        To run inference on the YOLOv3-tiny model with a different image size:\n\n        ```python\n        $ python benchmarks.py --weights yolov3-tiny.pt --imgsz 512 --device 0\n        ```\n\n    Notes:\n        The `--hard-fail` argument can be a boolean or a string. If a string is provided, it should be an expression that\n        represents the minimum acceptable metric value, such as '0.29' for mAP (mean Average Precision).\n\n    Links:\n        https://github.com/ultralytics/ultralytics\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--weights\", type=str, default=ROOT / \"yolov3-tiny.pt\", help=\"weights path\")\n    parser.add_argument(\"--imgsz\", \"--img\", \"--img-size\", type=int, default=640, help=\"inference size (pixels)\")\n    parser.add_argument(\"--batch-size\", type=int, default=1, help=\"batch size\")\n    parser.add_argument(\"--data\", type=str, default=ROOT / \"data/coco128.yaml\", help=\"dataset.yaml path\")\n    parser.add_argument(\"--device\", default=\"\", help=\"cuda device, i.e. 0 or 0,1,2,3 or cpu\")\n    parser.add_argument(\"--half\", action=\"store_true\", help=\"use FP16 half-precision inference\")\n    parser.add_argument(\"--test\", action=\"store_true\", help=\"test exports only\")\n    parser.add_argument(\"--pt-only\", action=\"store_true\", help=\"test PyTorch only\")\n    parser.add_argument(\"--hard-fail\", nargs=\"?\", const=True, default=False, help=\"Exception on error or < min metric\")\n    opt = parser.parse_args()\n    opt.data = check_yaml(opt.data)  # check YAML\n    print_args(vars(opt))\n    return opt\n\n\ndef main(opt):\n    \"\"\"\n    Executes the export and benchmarking pipeline for YOLOv3 models, testing multiple export formats and validating\n    performance metrics.\n\n    Args:\n        opt (argparse.Namespace): Parsed command line arguments, including options for weights, image size, batch size,\n            dataset path, device, half-precision inference, test mode, PyTorch-only testing, and hard fail conditions.\n\n    Returns:\n        pd.DataFrame: A DataFrame containing benchmarking results with columns:\n            - Format: Name of the export format\n            - Size (MB): File size of the exported model\n            - mAP50-95: Mean Average Precision for the model\n            - Inference time (ms): Time taken for inference\n\n    Notes:\n        The function runs the main pipeline by exporting the YOLOv3 model to various formats and running benchmarks to\n        evaluate performance. If `opt.test` is set to True, it only tests the export process and logs the results.\n\n    Example:\n        Running the function from command line with required arguments:\n\n        ```python\n        $ python benchmarks.py --weights yolov5s.pt --img 640\n        ```\n\n    For more details, visit the Ultralytics YOLOv3 repository on [GitHub](https://github.com/ultralytics/ultralytics).\n    \"\"\"\n    test(**vars(opt)) if opt.test else run(**vars(opt))\n\n\nif __name__ == \"__main__\":\n    opt = parse_opt()\n    main(opt)\n"
        },
        {
          "name": "classify",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "detect.py",
          "type": "blob",
          "size": 22.55859375,
          "content": "# Ultralytics YOLOv3 🚀, AGPL-3.0 license\n\"\"\"\nRun YOLOv3 detection inference on images, videos, directories, globs, YouTube, webcam, streams, etc.\n\nUsage - sources:\n    $ python detect.py --weights yolov5s.pt --source 0                               # webcam\n                                                     img.jpg                         # image\n                                                     vid.mp4                         # video\n                                                     screen                          # screenshot\n                                                     path/                           # directory\n                                                     list.txt                        # list of images\n                                                     list.streams                    # list of streams\n                                                     'path/*.jpg'                    # glob\n                                                     'https://youtu.be/LNwODJXcvt4'  # YouTube\n                                                     'rtsp://example.com/media.mp4'  # RTSP, RTMP, HTTP stream\n\nUsage - formats:\n    $ python detect.py --weights yolov5s.pt                 # PyTorch\n                                 yolov5s.torchscript        # TorchScript\n                                 yolov5s.onnx               # ONNX Runtime or OpenCV DNN with --dnn\n                                 yolov5s_openvino_model     # OpenVINO\n                                 yolov5s.engine             # TensorRT\n                                 yolov5s.mlmodel            # CoreML (macOS-only)\n                                 yolov5s_saved_model        # TensorFlow SavedModel\n                                 yolov5s.pb                 # TensorFlow GraphDef\n                                 yolov5s.tflite             # TensorFlow Lite\n                                 yolov5s_edgetpu.tflite     # TensorFlow Edge TPU\n                                 yolov5s_paddle_model       # PaddlePaddle\n\"\"\"\n\nimport argparse\nimport os\nimport platform\nimport sys\nfrom pathlib import Path\n\nimport torch\n\nFILE = Path(__file__).resolve()\nROOT = FILE.parents[0]  # YOLOv3 root directory\nif str(ROOT) not in sys.path:\n    sys.path.append(str(ROOT))  # add ROOT to PATH\nROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # relative\n\nfrom ultralytics.utils.plotting import Annotator, colors, save_one_box\n\nfrom models.common import DetectMultiBackend\nfrom utils.dataloaders import IMG_FORMATS, VID_FORMATS, LoadImages, LoadScreenshots, LoadStreams\nfrom utils.general import (\n    LOGGER,\n    Profile,\n    check_file,\n    check_img_size,\n    check_imshow,\n    check_requirements,\n    colorstr,\n    cv2,\n    increment_path,\n    non_max_suppression,\n    print_args,\n    scale_boxes,\n    strip_optimizer,\n    xyxy2xywh,\n)\nfrom utils.torch_utils import select_device, smart_inference_mode\n\n\n@smart_inference_mode()\ndef run(\n    weights=ROOT / \"yolov5s.pt\",  # model path or triton URL\n    source=ROOT / \"data/images\",  # file/dir/URL/glob/screen/0(webcam)\n    data=ROOT / \"data/coco128.yaml\",  # dataset.yaml path\n    imgsz=(640, 640),  # inference size (height, width)\n    conf_thres=0.25,  # confidence threshold\n    iou_thres=0.45,  # NMS IOU threshold\n    max_det=1000,  # maximum detections per image\n    device=\"\",  # cuda device, i.e. 0 or 0,1,2,3 or cpu\n    view_img=False,  # show results\n    save_txt=False,  # save results to *.txt\n    save_conf=False,  # save confidences in --save-txt labels\n    save_crop=False,  # save cropped prediction boxes\n    nosave=False,  # do not save images/videos\n    classes=None,  # filter by class: --class 0, or --class 0 2 3\n    agnostic_nms=False,  # class-agnostic NMS\n    augment=False,  # augmented inference\n    visualize=False,  # visualize features\n    update=False,  # update all models\n    project=ROOT / \"runs/detect\",  # save results to project/name\n    name=\"exp\",  # save results to project/name\n    exist_ok=False,  # existing project/name ok, do not increment\n    line_thickness=3,  # bounding box thickness (pixels)\n    hide_labels=False,  # hide labels\n    hide_conf=False,  # hide confidences\n    half=False,  # use FP16 half-precision inference\n    dnn=False,  # use OpenCV DNN for ONNX inference\n    vid_stride=1,  # video frame-rate stride\n):\n    \"\"\"\n    Run YOLOv3 detection inference on various input sources such as images, videos, streams, and YouTube URLs.\n\n    Args:\n        weights (str | Path): Path to the model weights file or a Triton URL (default: 'yolov5s.pt').\n        source (str | Path): Source of input data such as a file, directory, URL, glob pattern, or device identifier\n            (default: 'data/images').\n        data (str | Path): Path to the dataset YAML file (default: 'data/coco128.yaml').\n        imgsz (tuple[int, int]): Inference size as a tuple (height, width) (default: (640, 640)).\n        conf_thres (float): Confidence threshold for detection (default: 0.25).\n        iou_thres (float): Intersection Over Union (IOU) threshold for Non-Max Suppression (NMS) (default: 0.45).\n        max_det (int): Maximum number of detections per image (default: 1000).\n        device (str): CUDA device identifier, e.g., '0', '0,1,2,3', or 'cpu' (default: '').\n        view_img (bool): Whether to display results during inference (default: False).\n        save_txt (bool): Whether to save detection results to text files (default: False).\n        save_conf (bool): Whether to save detection confidences in the text labels (default: False).\n        save_crop (bool): Whether to save cropped detection boxes (default: False).\n        nosave (bool): Whether to prevent saving images or videos with detections (default: False).\n        classes (list[int] | None): List of class indices to filter, e.g., [0, 2, 3] (default: None).\n        agnostic_nms (bool): Whether to perform class-agnostic NMS (default: False).\n        augment (bool): Whether to apply augmented inference (default: False).\n        visualize (bool): Whether to visualize feature maps (default: False).\n        update (bool): Whether to update all models (default: False).\n        project (str | Path): Path to the project directory where results will be saved (default: 'runs/detect').\n        name (str): Name for the specific run within the project directory (default: 'exp').\n        exist_ok (bool): Whether to allow existing project/name directory without incrementing run index (default: False).\n        line_thickness (int): Thickness of bounding box lines in pixels (default: 3).\n        hide_labels (bool): Whether to hide labels in the results (default: False).\n        hide_conf (bool): Whether to hide confidences in the results (default: False).\n        half (bool): Whether to use half-precision (FP16) for inference (default: False).\n        dnn (bool): Whether to use OpenCV DNN for ONNX inference (default: False).\n        vid_stride (int): Stride for video frame rate (default: 1).\n\n    Returns:\n        None\n\n    Notes:\n        This function supports a variety of input sources such as image files, video files, directories, URL patterns,\n        webcam streams, and YouTube links. It also supports multiple model formats including PyTorch, ONNX, OpenVINO,\n        TensorRT, CoreML, TensorFlow, PaddlePaddle, and others. The results can be visualized in real-time or saved to\n        specified directories. Use command-line arguments to modify the behavior of the function.\n\n    Examples:\n        ```python\n        # Run YOLOv3 inference on an image\n        run(weights='yolov5s.pt', source='data/images/bus.jpg')\n\n        # Run YOLOv3 inference on a video\n        run(weights='yolov5s.pt', source='data/videos/video.mp4', view_img=True)\n\n        # Run YOLOv3 inference on a webcam\n        run(weights='yolov5s.pt', source='0', view_img=True)\n        ```\n    \"\"\"\n    source = str(source)\n    save_img = not nosave and not source.endswith(\".txt\")  # save inference images\n    is_file = Path(source).suffix[1:] in (IMG_FORMATS + VID_FORMATS)\n    is_url = source.lower().startswith((\"rtsp://\", \"rtmp://\", \"http://\", \"https://\"))\n    webcam = source.isnumeric() or source.endswith(\".streams\") or (is_url and not is_file)\n    screenshot = source.lower().startswith(\"screen\")\n    if is_url and is_file:\n        source = check_file(source)  # download\n\n    # Directories\n    save_dir = increment_path(Path(project) / name, exist_ok=exist_ok)  # increment run\n    (save_dir / \"labels\" if save_txt else save_dir).mkdir(parents=True, exist_ok=True)  # make dir\n\n    # Load model\n    device = select_device(device)\n    model = DetectMultiBackend(weights, device=device, dnn=dnn, data=data, fp16=half)\n    stride, names, pt = model.stride, model.names, model.pt\n    imgsz = check_img_size(imgsz, s=stride)  # check image size\n\n    # Dataloader\n    bs = 1  # batch_size\n    if webcam:\n        view_img = check_imshow(warn=True)\n        dataset = LoadStreams(source, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)\n        bs = len(dataset)\n    elif screenshot:\n        dataset = LoadScreenshots(source, img_size=imgsz, stride=stride, auto=pt)\n    else:\n        dataset = LoadImages(source, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)\n    vid_path, vid_writer = [None] * bs, [None] * bs\n\n    # Run inference\n    model.warmup(imgsz=(1 if pt or model.triton else bs, 3, *imgsz))  # warmup\n    seen, windows, dt = 0, [], (Profile(), Profile(), Profile())\n    for path, im, im0s, vid_cap, s in dataset:\n        with dt[0]:\n            im = torch.from_numpy(im).to(model.device)\n            im = im.half() if model.fp16 else im.float()  # uint8 to fp16/32\n            im /= 255  # 0 - 255 to 0.0 - 1.0\n            if len(im.shape) == 3:\n                im = im[None]  # expand for batch dim\n\n        # Inference\n        with dt[1]:\n            visualize = increment_path(save_dir / Path(path).stem, mkdir=True) if visualize else False\n            pred = model(im, augment=augment, visualize=visualize)\n\n        # NMS\n        with dt[2]:\n            pred = non_max_suppression(pred, conf_thres, iou_thres, classes, agnostic_nms, max_det=max_det)\n\n        # Second-stage classifier (optional)\n        # pred = utils.general.apply_classifier(pred, classifier_model, im, im0s)\n\n        # Process predictions\n        for i, det in enumerate(pred):  # per image\n            seen += 1\n            if webcam:  # batch_size >= 1\n                p, im0, frame = path[i], im0s[i].copy(), dataset.count\n                s += f\"{i}: \"\n            else:\n                p, im0, frame = path, im0s.copy(), getattr(dataset, \"frame\", 0)\n\n            p = Path(p)  # to Path\n            save_path = str(save_dir / p.name)  # im.jpg\n            txt_path = str(save_dir / \"labels\" / p.stem) + (\"\" if dataset.mode == \"image\" else f\"_{frame}\")  # im.txt\n            s += \"{:g}x{:g} \".format(*im.shape[2:])  # print string\n            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh\n            imc = im0.copy() if save_crop else im0  # for save_crop\n            annotator = Annotator(im0, line_width=line_thickness, example=str(names))\n            if len(det):\n                # Rescale boxes from img_size to im0 size\n                det[:, :4] = scale_boxes(im.shape[2:], det[:, :4], im0.shape).round()\n\n                # Print results\n                for c in det[:, 5].unique():\n                    n = (det[:, 5] == c).sum()  # detections per class\n                    s += f\"{n} {names[int(c)]}{'s' * (n > 1)}, \"  # add to string\n\n                # Write results\n                for *xyxy, conf, cls in reversed(det):\n                    if save_txt:  # Write to file\n                        xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(-1).tolist()  # normalized xywh\n                        line = (cls, *xywh, conf) if save_conf else (cls, *xywh)  # label format\n                        with open(f\"{txt_path}.txt\", \"a\") as f:\n                            f.write((\"%g \" * len(line)).rstrip() % line + \"\\n\")\n\n                    if save_img or save_crop or view_img:  # Add bbox to image\n                        c = int(cls)  # integer class\n                        label = None if hide_labels else (names[c] if hide_conf else f\"{names[c]} {conf:.2f}\")\n                        annotator.box_label(xyxy, label, color=colors(c, True))\n                    if save_crop:\n                        save_one_box(xyxy, imc, file=save_dir / \"crops\" / names[c] / f\"{p.stem}.jpg\", BGR=True)\n\n            # Stream results\n            im0 = annotator.result()\n            if view_img:\n                if platform.system() == \"Linux\" and p not in windows:\n                    windows.append(p)\n                    cv2.namedWindow(str(p), cv2.WINDOW_NORMAL | cv2.WINDOW_KEEPRATIO)  # allow window resize (Linux)\n                    cv2.resizeWindow(str(p), im0.shape[1], im0.shape[0])\n                cv2.imshow(str(p), im0)\n                cv2.waitKey(1)  # 1 millisecond\n\n            # Save results (image with detections)\n            if save_img:\n                if dataset.mode == \"image\":\n                    cv2.imwrite(save_path, im0)\n                else:  # 'video' or 'stream'\n                    if vid_path[i] != save_path:  # new video\n                        vid_path[i] = save_path\n                        if isinstance(vid_writer[i], cv2.VideoWriter):\n                            vid_writer[i].release()  # release previous video writer\n                        if vid_cap:  # video\n                            fps = vid_cap.get(cv2.CAP_PROP_FPS)\n                            w = int(vid_cap.get(cv2.CAP_PROP_FRAME_WIDTH))\n                            h = int(vid_cap.get(cv2.CAP_PROP_FRAME_HEIGHT))\n                        else:  # stream\n                            fps, w, h = 30, im0.shape[1], im0.shape[0]\n                        save_path = str(Path(save_path).with_suffix(\".mp4\"))  # force *.mp4 suffix on results videos\n                        vid_writer[i] = cv2.VideoWriter(save_path, cv2.VideoWriter_fourcc(*\"mp4v\"), fps, (w, h))\n                    vid_writer[i].write(im0)\n\n        # Print time (inference-only)\n        LOGGER.info(f\"{s}{'' if len(det) else '(no detections), '}{dt[1].dt * 1e3:.1f}ms\")\n\n    # Print results\n    t = tuple(x.t / seen * 1e3 for x in dt)  # speeds per image\n    LOGGER.info(f\"Speed: %.1fms pre-process, %.1fms inference, %.1fms NMS per image at shape {(1, 3, *imgsz)}\" % t)\n    if save_txt or save_img:\n        s = f\"\\n{len(list(save_dir.glob('labels/*.txt')))} labels saved to {save_dir / 'labels'}\" if save_txt else \"\"\n        LOGGER.info(f\"Results saved to {colorstr('bold', save_dir)}{s}\")\n    if update:\n        strip_optimizer(weights[0])  # update model (to fix SourceChangeWarning)\n\n\ndef parse_opt():\n    \"\"\"\n    Parses and returns command-line options for running YOLOv3 model detection.\n\n    Args:\n        --weights (list[str]): Model path or Triton URL. Default: ROOT / \"yolov3-tiny.pt\".\n        --source (str): Input data source like file/dir/URL/glob/screen/0(webcam). Default: ROOT / \"data/images\".\n        --data (str): Optional path to dataset.yaml. Default: ROOT / \"data/coco128.yaml\".\n        --imgsz (list[int]): Inference size as height, width. Accepts multiple values. Default: [640].\n        --conf-thres (float): Confidence threshold for predictions. Default: 0.25.\n        --iou-thres (float): IoU threshold for Non-Maximum Suppression (NMS). Default: 0.45.\n        --max-det (int): Maximum number of detections per image. Default: 1000.\n        --device (str): CUDA device identifier, e.g. \"0\" or \"0,1,2,3\" or \"cpu\". Default: \"\" (auto-select).\n        --view-img (bool): Display results. Default: False.\n        --save-txt (bool): Save results to *.txt files. Default: False.\n        --save-conf (bool): Save confidence scores in text labels. Default: False.\n        --save-crop (bool): Save cropped prediction boxes. Default: False.\n        --nosave (bool): Do not save images/videos. Default: False.\n        --classes (list[int] | None): Filter results by class, e.g. [0, 2, 3]. Default: None.\n        --agnostic-nms (bool): Perform class-agnostic NMS. Default: False.\n        --augment (bool): Apply augmented inference. Default: False.\n        --visualize (bool): Visualize feature maps. Default: False.\n        --update (bool): Update all models. Default: False.\n        --project (str): Directory to save results; results saved to \"project/name\". Default: ROOT / \"runs/detect\".\n        --name (str): Name of the specific run; results saved to \"project/name\". Default: \"exp\".\n        --exist-ok (bool): Allow results to be saved in an existing directory without incrementing. Default: False.\n        --line-thickness (int): Bounding box line thickness in pixels. Default: 3.\n        --hide-labels (bool): Hide labels on detections. Default: False.\n        --hide-conf (bool): Hide confidence scores on labels. Default: False.\n        --half (bool): Use FP16 half-precision inference. Default: False.\n        --dnn (bool): Use OpenCV DNN backend for ONNX inference. Default: False.\n        --vid-stride (int): Frame-rate stride for video input. Default: 1.\n\n    Returns:\n        argparse.Namespace: Parsed command-line arguments for YOLOv3 inference configurations.\n\n    Example:\n        ```python\n        options = parse_opt()\n        run(**vars(options))\n        ```\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--weights\", nargs=\"+\", type=str, default=ROOT / \"yolov3-tiny.pt\", help=\"model path or triton URL\"\n    )\n    parser.add_argument(\"--source\", type=str, default=ROOT / \"data/images\", help=\"file/dir/URL/glob/screen/0(webcam)\")\n    parser.add_argument(\"--data\", type=str, default=ROOT / \"data/coco128.yaml\", help=\"(optional) dataset.yaml path\")\n    parser.add_argument(\"--imgsz\", \"--img\", \"--img-size\", nargs=\"+\", type=int, default=[640], help=\"inference size h,w\")\n    parser.add_argument(\"--conf-thres\", type=float, default=0.25, help=\"confidence threshold\")\n    parser.add_argument(\"--iou-thres\", type=float, default=0.45, help=\"NMS IoU threshold\")\n    parser.add_argument(\"--max-det\", type=int, default=1000, help=\"maximum detections per image\")\n    parser.add_argument(\"--device\", default=\"\", help=\"cuda device, i.e. 0 or 0,1,2,3 or cpu\")\n    parser.add_argument(\"--view-img\", action=\"store_true\", help=\"show results\")\n    parser.add_argument(\"--save-txt\", action=\"store_true\", help=\"save results to *.txt\")\n    parser.add_argument(\"--save-conf\", action=\"store_true\", help=\"save confidences in --save-txt labels\")\n    parser.add_argument(\"--save-crop\", action=\"store_true\", help=\"save cropped prediction boxes\")\n    parser.add_argument(\"--nosave\", action=\"store_true\", help=\"do not save images/videos\")\n    parser.add_argument(\"--classes\", nargs=\"+\", type=int, help=\"filter by class: --classes 0, or --classes 0 2 3\")\n    parser.add_argument(\"--agnostic-nms\", action=\"store_true\", help=\"class-agnostic NMS\")\n    parser.add_argument(\"--augment\", action=\"store_true\", help=\"augmented inference\")\n    parser.add_argument(\"--visualize\", action=\"store_true\", help=\"visualize features\")\n    parser.add_argument(\"--update\", action=\"store_true\", help=\"update all models\")\n    parser.add_argument(\"--project\", default=ROOT / \"runs/detect\", help=\"save results to project/name\")\n    parser.add_argument(\"--name\", default=\"exp\", help=\"save results to project/name\")\n    parser.add_argument(\"--exist-ok\", action=\"store_true\", help=\"existing project/name ok, do not increment\")\n    parser.add_argument(\"--line-thickness\", default=3, type=int, help=\"bounding box thickness (pixels)\")\n    parser.add_argument(\"--hide-labels\", default=False, action=\"store_true\", help=\"hide labels\")\n    parser.add_argument(\"--hide-conf\", default=False, action=\"store_true\", help=\"hide confidences\")\n    parser.add_argument(\"--half\", action=\"store_true\", help=\"use FP16 half-precision inference\")\n    parser.add_argument(\"--dnn\", action=\"store_true\", help=\"use OpenCV DNN for ONNX inference\")\n    parser.add_argument(\"--vid-stride\", type=int, default=1, help=\"video frame-rate stride\")\n    opt = parser.parse_args()\n    opt.imgsz *= 2 if len(opt.imgsz) == 1 else 1  # expand\n    print_args(vars(opt))\n    return opt\n\n\ndef main(opt):\n    \"\"\"\n    Entry point for running the YOLO model; checks requirements and calls `run` with parsed options.\n\n    Args:\n        opt (argparse.Namespace): Parsed command-line options, which include:\n            - weights (str | list of str): Path to the model weights or Triton server URL.\n            - source (str): Input source, can be a file, directory, URL, glob, screen, or webcam index.\n            - data (str): Path to the dataset configuration file (.yaml).\n            - imgsz (tuple of int): Inference image size as (height, width).\n            - conf_thres (float): Confidence threshold for detections.\n            - iou_thres (float): Intersection over Union (IoU) threshold for Non-Maximum Suppression (NMS).\n            - max_det (int): Maximum number of detections per image.\n            - device (str): Device to run inference on; options are CUDA device id(s) or 'cpu'\n            - view_img (bool): Flag to display inference results.\n            - save_txt (bool): Save detection results in .txt format.\n            - save_conf (bool): Save detection confidences in .txt labels.\n            - save_crop (bool): Save cropped bounding box predictions.\n            - nosave (bool): Do not save images/videos with detections.\n            - classes (list of int): Filter results by class, e.g., --class 0 2 3.\n            - agnostic_nms (bool): Use class-agnostic NMS.\n            - augment (bool): Enable augmented inference.\n            - visualize (bool): Visualize feature maps.\n            - update (bool): Update the model during inference.\n            - project (str): Directory to save results.\n            - name (str): Name for the results directory.\n            - exist_ok (bool): Allow existing project/name directories without incrementing.\n            - line_thickness (int): Thickness of bounding box lines.\n            - hide_labels (bool): Hide class labels on bounding boxes.\n            - hide_conf (bool): Hide confidence scores on bounding boxes.\n            - half (bool): Use FP16 half-precision inference.\n            - dnn (bool): Use OpenCV DNN backend for ONNX inference.\n            - vid_stride (int): Video frame-rate stride.\n\n    Returns:\n        None\n\n    Example:\n        ```python\n        if __name__ == \"__main__\":\n            opt = parse_opt()\n            main(opt)\n        ```\n\n    Notes:\n        Run this function as the entry point for using YOLO for object detection on a variety of input sources such as\n        images, videos, directories, webcams, streams, etc. This function ensures all requirements are checked and\n        subsequently initiates the detection process by calling the `run` function with appropriate options.\n    \"\"\"\n    check_requirements(ROOT / \"requirements.txt\", exclude=(\"tensorboard\", \"thop\"))\n    run(**vars(opt))\n\n\nif __name__ == \"__main__\":\n    opt = parse_opt()\n    main(opt)\n"
        },
        {
          "name": "export.py",
          "type": "blob",
          "size": 67.904296875,
          "content": "# Ultralytics YOLOv3 🚀, AGPL-3.0 license\n\"\"\"\nExport a YOLOv3 PyTorch model to other formats. TensorFlow exports authored by https://github.com/zldrobit.\n\nFormat                      | `export.py --include`         | Model\n---                         | ---                           | ---\nPyTorch                     | -                             | yolov5s.pt\nTorchScript                 | `torchscript`                 | yolov5s.torchscript\nONNX                        | `onnx`                        | yolov5s.onnx\nOpenVINO                    | `openvino`                    | yolov5s_openvino_model/\nTensorRT                    | `engine`                      | yolov5s.engine\nCoreML                      | `coreml`                      | yolov5s.mlmodel\nTensorFlow SavedModel       | `saved_model`                 | yolov5s_saved_model/\nTensorFlow GraphDef         | `pb`                          | yolov5s.pb\nTensorFlow Lite             | `tflite`                      | yolov5s.tflite\nTensorFlow Edge TPU         | `edgetpu`                     | yolov5s_edgetpu.tflite\nTensorFlow.js               | `tfjs`                        | yolov5s_web_model/\nPaddlePaddle                | `paddle`                      | yolov5s_paddle_model/\n\nRequirements:\n    $ pip install -r requirements.txt coremltools onnx onnx-simplifier onnxruntime openvino-dev tensorflow-cpu  # CPU\n    $ pip install -r requirements.txt coremltools onnx onnx-simplifier onnxruntime-gpu openvino-dev tensorflow  # GPU\n\nUsage:\n    $ python export.py --weights yolov5s.pt --include torchscript onnx openvino engine coreml tflite ...\n\nInference:\n    $ python detect.py --weights yolov5s.pt                 # PyTorch\n                                 yolov5s.torchscript        # TorchScript\n                                 yolov5s.onnx               # ONNX Runtime or OpenCV DNN with --dnn\n                                 yolov5s_openvino_model     # OpenVINO\n                                 yolov5s.engine             # TensorRT\n                                 yolov5s.mlmodel            # CoreML (macOS-only)\n                                 yolov5s_saved_model        # TensorFlow SavedModel\n                                 yolov5s.pb                 # TensorFlow GraphDef\n                                 yolov5s.tflite             # TensorFlow Lite\n                                 yolov5s_edgetpu.tflite     # TensorFlow Edge TPU\n                                 yolov5s_paddle_model       # PaddlePaddle\n\nTensorFlow.js:\n    $ cd .. && git clone https://github.com/zldrobit/tfjs-yolov5-example.git && cd tfjs-yolov5-example\n    $ npm install\n    $ ln -s ../../yolov5/yolov5s_web_model public/yolov5s_web_model\n    $ npm start\n\"\"\"\n\nimport argparse\nimport contextlib\nimport json\nimport os\nimport platform\nimport re\nimport subprocess\nimport sys\nimport time\nimport warnings\nfrom pathlib import Path\n\nimport pandas as pd\nimport torch\nfrom torch.utils.mobile_optimizer import optimize_for_mobile\n\nFILE = Path(__file__).resolve()\nROOT = FILE.parents[0]  # YOLOv3 root directory\nif str(ROOT) not in sys.path:\n    sys.path.append(str(ROOT))  # add ROOT to PATH\nif platform.system() != \"Windows\":\n    ROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # relative\n\nfrom models.experimental import attempt_load\nfrom models.yolo import ClassificationModel, Detect, DetectionModel, SegmentationModel\nfrom utils.dataloaders import LoadImages\nfrom utils.general import (\n    LOGGER,\n    Profile,\n    check_dataset,\n    check_img_size,\n    check_requirements,\n    check_version,\n    check_yaml,\n    colorstr,\n    file_size,\n    get_default_args,\n    print_args,\n    url2file,\n    yaml_save,\n)\nfrom utils.torch_utils import select_device, smart_inference_mode\n\nMACOS = platform.system() == \"Darwin\"  # macOS environment\n\n\nclass iOSModel(torch.nn.Module):\n    \"\"\"Exports a PyTorch model to an iOS-compatible format with normalized input dimensions and class configurations.\"\"\"\n\n    def __init__(self, model, im):\n        \"\"\"\n        Initializes an iOSModel with normalized input dimensions and number of classes from a PyTorch model.\n\n        Args:\n            model (torch.nn.Module): The PyTorch model from which to initialize the iOS model. This should include attributes\n                like `nc` (number of classes) which will be used to configure the iOS model.\n            im (torch.Tensor): A Tensor representing a sample input image. The shape of this tensor should be\n                (batch_size, channels, height, width). This is used to extract dimensions for input normalization.\n\n        Returns:\n            None\n\n        Notes:\n            - This class is specifically designed for use in exporting a PyTorch model for deployment on iOS platforms, optimizing\n              input dimensions and class configurations to suit mobile requirements.\n            - Normalization factor is derived from the input image dimensions, which impacts the model's performance during\n              inference on iOS devices.\n            - Ensure the sample input image `im` provided has correct dimensions and shape for accurate model configuration.\n        \"\"\"\n        super().__init__()\n        b, c, h, w = im.shape  # batch, channel, height, width\n        self.model = model\n        self.nc = model.nc  # number of classes\n        if w == h:\n            self.normalize = 1.0 / w\n        else:\n            self.normalize = torch.tensor([1.0 / w, 1.0 / h, 1.0 / w, 1.0 / h])  # broadcast (slower, smaller)\n            # np = model(im)[0].shape[1]  # number of points\n            # self.normalize = torch.tensor([1. / w, 1. / h, 1. / w, 1. / h]).expand(np, 4)  # explicit (faster, larger)\n\n    def forward(self, x):\n        \"\"\"\n        Performs a forward pass, returning scaled confidences and normalized coordinates given an input tensor.\n\n        Args:\n            x (torch.Tensor): Input tensor representing a batch of images, with dimensions [batch_size, channels,\n                height, width].\n\n        Returns:\n            tuple[torch.Tensor, torch.Tensor, torch.Tensor]: A tuple containing three elements:\n                - xywh (torch.Tensor): Tensor of shape [batch_size, num_detections, 4] containing normalized x, y, width,\n                  and height coordinates.\n                - conf (torch.Tensor): Tensor of shape [batch_size, num_detections, 1] containing confidence scores for\n                  each detection.\n                - cls (torch.Tensor): Tensor of shape [batch_size, num_detections, num_classes] containing class\n                  probabilities.\n\n        Notes:\n            The dimensions of `x` should match the input dimensions used during the model's initialization to ensure\n            proper scaling and normalization.\n\n        Examples:\n            ```python\n            model = iOSModel(trained_model, input_image_tensor)\n            detection_results = model.forward(input_tensor)\n            xywh, conf, cls = detection_results\n            ```\n\n        Further reading on exporting models to different formats:\n        https://github.com/ultralytics/ultralytics\n\n        See Also:\n            `export.py` for exporting a YOLOv3 PyTorch model to various formats.\n            https://github.com/zldrobit for TensorFlow export scripts.\n        \"\"\"\n        xywh, conf, cls = self.model(x)[0].squeeze().split((4, 1, self.nc), 1)\n        return cls * conf, xywh * self.normalize  # confidence (3780, 80), coordinates (3780, 4)\n\n\ndef export_formats():\n    \"\"\"\n    Lists supported YOLOv3 model export formats including file suffixes and CPU/GPU compatibility.\n\n    Returns:\n        list: A list of lists where each sublist contains information about a specific export format. Each sublist includes\n            the following elements:\n            - str: The name of the format.\n            - str: The command-line argument for including this format.\n            - str: The file suffix used for this format.\n            - bool: Indicates if the format is compatible with CPU.\n            - bool: Indicates if the format is compatible with GPU.\n\n    Examples:\n        ```python\n        formats = export_formats()\n        for format in formats:\n            print(f\"Format: {format[0]}, Suffix: {format[2]}, CPU Compatible: {format[3]}, GPU Compatible: {format[4]}\")\n        ```\n    \"\"\"\n    x = [\n        [\"PyTorch\", \"-\", \".pt\", True, True],\n        [\"TorchScript\", \"torchscript\", \".torchscript\", True, True],\n        [\"ONNX\", \"onnx\", \".onnx\", True, True],\n        [\"OpenVINO\", \"openvino\", \"_openvino_model\", True, False],\n        [\"TensorRT\", \"engine\", \".engine\", False, True],\n        [\"CoreML\", \"coreml\", \".mlmodel\", True, False],\n        [\"TensorFlow SavedModel\", \"saved_model\", \"_saved_model\", True, True],\n        [\"TensorFlow GraphDef\", \"pb\", \".pb\", True, True],\n        [\"TensorFlow Lite\", \"tflite\", \".tflite\", True, False],\n        [\"TensorFlow Edge TPU\", \"edgetpu\", \"_edgetpu.tflite\", False, False],\n        [\"TensorFlow.js\", \"tfjs\", \"_web_model\", False, False],\n        [\"PaddlePaddle\", \"paddle\", \"_paddle_model\", True, True],\n    ]\n    return pd.DataFrame(x, columns=[\"Format\", \"Argument\", \"Suffix\", \"CPU\", \"GPU\"])\n\n\ndef try_export(inner_func):\n    \"\"\"\n    Profiles and logs the export process of YOLOv3 models, capturing success or failure details.\n\n    Args:\n        inner_func (Callable): The function that performs the actual export process and returns the model file path\n            and the exported model.\n\n    Returns:\n        Callable: A wrapped function that profiles and logs the export process, handling successes and failures.\n\n    Examples:\n        ```python\n        @try_export\n        def export_onnx(py_model_path: str, output_path: str):\n            # Export logic here\n            return output_path, model\n        ```\n\n    Notes:\n        Applying this decorator to an export function will log the export results, including export success or failure,\n        along with associated time and file size details.\n    \"\"\"\n    inner_args = get_default_args(inner_func)\n\n    def outer_func(*args, **kwargs):\n        \"\"\"Profiles and logs the export process of YOLOv3 models, capturing success or failure details.\"\"\"\n        prefix = inner_args[\"prefix\"]\n        try:\n            with Profile() as dt:\n                f, model = inner_func(*args, **kwargs)\n            LOGGER.info(f\"{prefix} export success ✅ {dt.t:.1f}s, saved as {f} ({file_size(f):.1f} MB)\")\n            return f, model\n        except Exception as e:\n            LOGGER.info(f\"{prefix} export failure ❌ {dt.t:.1f}s: {e}\")\n            return None, None\n\n    return outer_func\n\n\n@try_export\ndef export_torchscript(model, im, file, optimize, prefix=colorstr(\"TorchScript:\")):\n    \"\"\"\n    Export a YOLOv3 model to TorchScript format, with optional optimization for mobile deployment.\n\n    Args:\n        model (torch.nn.Module): The YOLOv3 model to be exported.\n        im (torch.Tensor): A tensor representing the input image for the model, typically with shape (N, 3, H, W).\n        file (pathlib.Path): The file path where the TorchScript model will be saved.\n        optimize (bool): A boolean flag indicating whether to optimize the model for mobile devices.\n        prefix (str): A prefix for logging messages. Defaults to `colorstr(\"TorchScript:\")`.\n\n    Returns:\n        (pathlib.Path | None, torch.nn.Module | None): Tuple containing the path to the saved TorchScript model and the\n        model itself. Returns `(None, None)` if the export fails.\n\n    Raises:\n        Exception: If there is an error during export, it logs the error and returns `(None, None)`.\n\n    Notes:\n        The function uses `torch.jit.trace` to trace the model with the input image tensor (`im`). Required metadata such as\n        input shape, stride, and class names are stored in an extra file included in the TorchScript model.\n\n    Examples:\n        ```python\n        from pathlib import Path\n        import torch\n\n        model = ...  # Assume model is loaded or created\n        im = torch.randn(1, 3, 640, 640)  # A sample input tensor\n        file = Path(\"model.torchscript\")\n        optimize = True\n\n        export_torchscript(model, im, file, optimize)\n        ```\n\n    For more information, visit: https://ultralytics.com/.\n    \"\"\"\n    LOGGER.info(f\"\\n{prefix} starting export with torch {torch.__version__}...\")\n    f = file.with_suffix(\".torchscript\")\n\n    ts = torch.jit.trace(model, im, strict=False)\n    d = {\"shape\": im.shape, \"stride\": int(max(model.stride)), \"names\": model.names}\n    extra_files = {\"config.txt\": json.dumps(d)}  # torch._C.ExtraFilesMap()\n    if optimize:  # https://pytorch.org/tutorials/recipes/mobile_interpreter.html\n        optimize_for_mobile(ts)._save_for_lite_interpreter(str(f), _extra_files=extra_files)\n    else:\n        ts.save(str(f), _extra_files=extra_files)\n    return f, None\n\n\n@try_export\ndef export_onnx(model, im, file, opset, dynamic, simplify, prefix=colorstr(\"ONNX:\")):\n    \"\"\"\n    Export a YOLOv3 model to ONNX format with dynamic shape and simplification options.\n\n    Args:\n        model (torch.nn.Module): The YOLOv3 model to be exported.\n        im (torch.Tensor): A sample input tensor for tracing the model.\n        file (pathlib.Path): The file path where the ONNX model will be saved.\n        opset (int): The ONNX opset version to use for the export.\n        dynamic (bool): If `True`, enables dynamic shape support.\n        simplify (bool): If `True`, simplifies the ONNX model using onnx-simplifier.\n        prefix (str): A prefix for logging messages.\n\n    Returns:\n        tuple[pathlib.Path, None]: The path to the saved ONNX model, None as the second tuple element (kept for consistency).\n\n    Example:\n        ```python\n        from pathlib import Path\n        import torch\n\n        model = ...  # Assume model is loaded or created\n        im = torch.randn(1, 3, 640, 640)  # A sample input tensor\n        file = Path(\"model.onnx\")\n        opset = 12\n        dynamic = True\n        simplify = True\n\n        export_onnx(model, im, file, opset, dynamic, simplify)\n        ```\n\n    Notes:\n        Ensure `onnx`, `onnx-simplifier`, and suitable runtime packages are installed.\n        This function uses `torch.onnx.export` to create the ONNX model, followed by optional simplification using\n        `onnx-simplifier`. If `dynamic` is enabled, dynamic axes mappings are added to support variable input shapes.\n        Relevant YOLO model metadata like `stride` and `names` are included as part of the ONNX model's metadata.\n\n    For more details on exporting and running inferences, visit:\n    - https://github.com/ultralytics/ultralytics\n    - https://github.com/zldrobit for TensorFlow export scripts.\n    \"\"\"\n    check_requirements(\"onnx>=1.12.0\")\n    import onnx\n\n    LOGGER.info(f\"\\n{prefix} starting export with onnx {onnx.__version__}...\")\n    f = file.with_suffix(\".onnx\")\n\n    output_names = [\"output0\", \"output1\"] if isinstance(model, SegmentationModel) else [\"output0\"]\n    if dynamic:\n        dynamic = {\"images\": {0: \"batch\", 2: \"height\", 3: \"width\"}}  # shape(1,3,640,640)\n        if isinstance(model, SegmentationModel):\n            dynamic[\"output0\"] = {0: \"batch\", 1: \"anchors\"}  # shape(1,25200,85)\n            dynamic[\"output1\"] = {0: \"batch\", 2: \"mask_height\", 3: \"mask_width\"}  # shape(1,32,160,160)\n        elif isinstance(model, DetectionModel):\n            dynamic[\"output0\"] = {0: \"batch\", 1: \"anchors\"}  # shape(1,25200,85)\n\n    torch.onnx.export(\n        model.cpu() if dynamic else model,  # --dynamic only compatible with cpu\n        im.cpu() if dynamic else im,\n        f,\n        verbose=False,\n        opset_version=opset,\n        do_constant_folding=True,  # WARNING: DNN inference with torch>=1.12 may require do_constant_folding=False\n        input_names=[\"images\"],\n        output_names=output_names,\n        dynamic_axes=dynamic or None,\n    )\n\n    # Checks\n    model_onnx = onnx.load(f)  # load onnx model\n    onnx.checker.check_model(model_onnx)  # check onnx model\n\n    # Metadata\n    d = {\"stride\": int(max(model.stride)), \"names\": model.names}\n    for k, v in d.items():\n        meta = model_onnx.metadata_props.add()\n        meta.key, meta.value = k, str(v)\n    onnx.save(model_onnx, f)\n\n    # Simplify\n    if simplify:\n        try:\n            cuda = torch.cuda.is_available()\n            check_requirements((\"onnxruntime-gpu\" if cuda else \"onnxruntime\", \"onnx-simplifier>=0.4.1\"))\n            import onnxsim\n\n            LOGGER.info(f\"{prefix} simplifying with onnx-simplifier {onnxsim.__version__}...\")\n            model_onnx, check = onnxsim.simplify(model_onnx)\n            assert check, \"assert check failed\"\n            onnx.save(model_onnx, f)\n        except Exception as e:\n            LOGGER.info(f\"{prefix} simplifier failure: {e}\")\n    return f, model_onnx\n\n\n@try_export\ndef export_openvino(file, metadata, half, int8, data, prefix=colorstr(\"OpenVINO:\")):\n    \"\"\"\n    Export a YOLOv3 model to OpenVINO format with optional INT8 quantization and inference metadata.\n\n    Args:\n        file (Path): Path to the output file.\n        metadata (dict): Inference metadata to include in the exported model.\n        half (bool): Indicates if FP16 precision should be used.\n        int8 (bool): Indicates if INT8 quantization should be applied.\n        data (str): Path to the dataset file (.yaml) for post-training quantization.\n\n    Returns:\n        tuple[Path | None, openvino.runtime.Model | None]: Tuple containing the path to the exported model and the OpenVINO\n            model object, or None if the export failed.\n\n    Notes:\n        - Requires the `openvino-dev>=2023.0` and optional `nncf>=2.4.0` package for INT8 quantization.\n        - Refer to OpenVINO documentation for further details: https://docs.openvino.ai/latest/index.html.\n\n    Examples:\n        ```python\n        model_file = Path('/path/to/model.onnx')\n        metadata = {'names': ['class1', 'class2'], 'stride': 32}\n        export_openvino(model_file, metadata, half=True, int8=False, data='/path/to/dataset.yaml')\n        ```\n    \"\"\"\n    check_requirements(\"openvino-dev>=2023.0\")  # requires openvino-dev: https://pypi.org/project/openvino-dev/\n    import openvino.runtime as ov  # noqa\n    from openvino.tools import mo  # noqa\n\n    LOGGER.info(f\"\\n{prefix} starting export with openvino {ov.__version__}...\")\n    f = str(file).replace(file.suffix, f\"_openvino_model{os.sep}\")\n    f_onnx = file.with_suffix(\".onnx\")\n    f_ov = str(Path(f) / file.with_suffix(\".xml\").name)\n    if int8:\n        check_requirements(\"nncf>=2.4.0\")  # requires at least version 2.4.0 to use the post-training quantization\n        import nncf\n        import numpy as np\n        from openvino.runtime import Core\n\n        from utils.dataloaders import create_dataloader\n\n        core = Core()\n        onnx_model = core.read_model(f_onnx)  # export\n\n        def prepare_input_tensor(image: np.ndarray):\n            \"\"\"Prepares the input tensor by normalizing pixel values and converting the datatype to float32.\"\"\"\n            input_tensor = image.astype(np.float32)  # uint8 to fp16/32\n            input_tensor /= 255.0  # 0 - 255 to 0.0 - 1.0\n\n            if input_tensor.ndim == 3:\n                input_tensor = np.expand_dims(input_tensor, 0)\n            return input_tensor\n\n        def gen_dataloader(yaml_path, task=\"train\", imgsz=640, workers=4):\n            \"\"\"Generates a PyTorch dataloader for the specified task using dataset configurations from a YAML file.\"\"\"\n            data_yaml = check_yaml(yaml_path)\n            data = check_dataset(data_yaml)\n            dataloader = create_dataloader(\n                data[task], imgsz=imgsz, batch_size=1, stride=32, pad=0.5, single_cls=False, rect=False, workers=workers\n            )[0]\n            return dataloader\n\n        # noqa: F811\n\n        def transform_fn(data_item):\n            \"\"\"\n            Quantization transform function.\n\n            Extracts and preprocess input data from dataloader item for quantization.\n\n            Parameters:\n               data_item: Tuple with data item produced by DataLoader during iteration\n            Returns:\n                input_tensor: Input data for quantization\n            \"\"\"\n            img = data_item[0].numpy()\n            input_tensor = prepare_input_tensor(img)\n            return input_tensor\n\n        ds = gen_dataloader(data)\n        quantization_dataset = nncf.Dataset(ds, transform_fn)\n        ov_model = nncf.quantize(onnx_model, quantization_dataset, preset=nncf.QuantizationPreset.MIXED)\n    else:\n        ov_model = mo.convert_model(f_onnx, model_name=file.stem, framework=\"onnx\", compress_to_fp16=half)  # export\n\n    ov.serialize(ov_model, f_ov)  # save\n    yaml_save(Path(f) / file.with_suffix(\".yaml\").name, metadata)  # add metadata.yaml\n    return f, None\n\n\n@try_export\ndef export_paddle(model, im, file, metadata, prefix=colorstr(\"PaddlePaddle:\")):\n    \"\"\"\n    Export a YOLOv3 model to PaddlePaddle format using X2Paddle, saving to a specified directory and including model\n    metadata.\n\n    Args:\n        model (torch.nn.Module): The YOLOv3 model to be exported.\n        im (torch.Tensor): A sample input tensor used for tracing the model.\n        file (pathlib.Path): Destination file path for the exported model, with `.pt` suffix.\n        metadata (dict): Additional metadata to be saved in YAML format alongside the exported model.\n        prefix (str, optional): Log message prefix. Defaults to a colored \"PaddlePaddle:\" string.\n\n    Returns:\n        tuple: A tuple containing the directory path (str) where the PaddlePaddle model is saved, and `None`.\n\n    Requirements:\n        - paddlepaddle: Install via `pip install paddlepaddle`.\n        - x2paddle: Install via `pip install x2paddle`.\n\n    Notes:\n        The function first checks for required packages `paddlepaddle` and `x2paddle`. It then uses X2Paddle to trace\n        the model and export it to a PaddlePaddle format, saving the resulting files in the specified directory with\n        included metadata in a YAML file.\n\n    Example:\n        ```python\n        from pathlib import Path\n        import torch\n        from models.yolo import DetectionModel\n\n        model = DetectionModel()  # Example model initialization\n        im = torch.rand(1, 3, 640, 640)  # Example input tensor\n        file = Path(\"path/to/save/model.pt\")\n        metadata = {\"nc\": 80, \"names\": [\"class1\", \"class2\", ...]}  # Example metadata\n\n        export_paddle(model, im, file, metadata)\n        ```\n    \"\"\"\n    check_requirements((\"paddlepaddle\", \"x2paddle\"))\n    import x2paddle\n    from x2paddle.convert import pytorch2paddle\n\n    LOGGER.info(f\"\\n{prefix} starting export with X2Paddle {x2paddle.__version__}...\")\n    f = str(file).replace(\".pt\", f\"_paddle_model{os.sep}\")\n\n    pytorch2paddle(module=model, save_dir=f, jit_type=\"trace\", input_examples=[im])  # export\n    yaml_save(Path(f) / file.with_suffix(\".yaml\").name, metadata)  # add metadata.yaml\n    return f, None\n\n\n@try_export\ndef export_coreml(model, im, file, int8, half, nms, prefix=colorstr(\"CoreML:\")):\n    \"\"\"\n    Export a YOLOv3 model to CoreML format with optional quantization and Non-Maximum Suppression (NMS).\n\n    Args:\n        model (torch.nn.Module): The YOLOv3 model to be exported.\n        im (torch.Tensor): Input tensor used for tracing the model. Shape should be (batch_size, channels, height, width).\n        file (pathlib.Path): Destination file path where the CoreML model will be saved.\n        int8 (bool): Whether to use INT8 quantization. If True, quantizes the model to 8-bit integers.\n        half (bool): Whether to use FP16 quantization. If True, converts the model to 16-bit floating point numbers.\n        nms (bool): Whether to include Non-Maximum Suppression in the CoreML model.\n        prefix (str): Prefix string for logging purposes. Default is colorstr(\"CoreML:\").\n\n    Returns:\n        str: Path to the saved CoreML model (.mlmodel).\n\n    Raises:\n        Exception: If there is an error during export, logs the error and stops the process.\n\n    Notes:\n        - This function requires `coremltools` to be installed.\n        - If `nms` is enabled, the model is wrapped with `iOSModel` to include NMS.\n        - Quantization only works on macOS.\n\n    Example:\n        ```python\n        from ultralytics.utils import export_coreml\n        from pathlib import Path\n        import torch\n\n        model = ...  # Assume model is loaded or created\n        im = torch.randn(1, 3, 640, 640)  # A sample input tensor\n        file = Path(\"model.mlmodel\")\n        export_coreml(model, im, file, int8=False, half=True, nms=True)\n        ```\n    \"\"\"\n    check_requirements(\"coremltools\")\n    import coremltools as ct\n\n    LOGGER.info(f\"\\n{prefix} starting export with coremltools {ct.__version__}...\")\n    f = file.with_suffix(\".mlmodel\")\n\n    if nms:\n        model = iOSModel(model, im)\n    ts = torch.jit.trace(model, im, strict=False)  # TorchScript model\n    ct_model = ct.convert(ts, inputs=[ct.ImageType(\"image\", shape=im.shape, scale=1 / 255, bias=[0, 0, 0])])\n    bits, mode = (8, \"kmeans_lut\") if int8 else (16, \"linear\") if half else (32, None)\n    if bits < 32:\n        if MACOS:  # quantization only supported on macOS\n            with warnings.catch_warnings():\n                warnings.filterwarnings(\"ignore\", category=DeprecationWarning)  # suppress numpy==1.20 float warning\n                ct_model = ct.models.neural_network.quantization_utils.quantize_weights(ct_model, bits, mode)\n        else:\n            print(f\"{prefix} quantization only supported on macOS, skipping...\")\n    ct_model.save(f)\n    return f, ct_model\n\n\n@try_export\ndef export_engine(model, im, file, half, dynamic, simplify, workspace=4, verbose=False, prefix=colorstr(\"TensorRT:\")):\n    \"\"\"\n    Export a YOLOv3 model to TensorRT engine format, optimizing it for GPU inference.\n\n    Args:\n        model (torch.nn.Module): The YOLOv3 model to be exported.\n        im (torch.Tensor): Sample input tensor used for tracing the model.\n        file (Path): File path where the exported TensorRT engine will be saved.\n        half (bool): Whether to use FP16 precision. Requires a supported GPU.\n        dynamic (bool): Whether to use dynamic input shapes.\n        simplify (bool): Whether to simplify the model during the ONNX export.\n        workspace (int): The maximum workspace size in GB. Default is 4.\n        verbose (bool): Whether to print detailed export logs.\n        prefix (str): Prefix string for log messages. Default is \"TensorRT:\".\n\n    Returns:\n        tuple[Path, None]: The output file path (Path) and None.\n\n    Raises:\n        AssertionError: If the model is running on CPU instead of GPU.\n        RuntimeError: If the ONNX file failed to load.\n\n    Notes:\n        Requires TensorRT installation to execute. Nvidia TensorRT: https://developer.nvidia.com/tensorrt\n\n    Example:\n        ```python\n        from pathlib import Path\n        import torch\n\n        # Initialize model and dummy input\n        model = YOLOv3(...)  # or another correct initialization\n        im = torch.randn(1, 3, 640, 640)\n\n        # Export the model\n        export_engine(model, im, Path(\"yolov3.engine\"), half=True, dynamic=True, simplify=True)\n        ```\n    \"\"\"\n    assert im.device.type != \"cpu\", \"export running on CPU but must be on GPU, i.e. `python export.py --device 0`\"\n    try:\n        import tensorrt as trt\n    except Exception:\n        if platform.system() == \"Linux\":\n            check_requirements(\"nvidia-tensorrt\", cmds=\"-U --index-url https://pypi.ngc.nvidia.com\")\n        import tensorrt as trt\n\n    if trt.__version__[0] == \"7\":  # TensorRT 7 handling https://github.com/ultralytics/yolov5/issues/6012\n        grid = model.model[-1].anchor_grid\n        model.model[-1].anchor_grid = [a[..., :1, :1, :] for a in grid]\n        export_onnx(model, im, file, 12, dynamic, simplify)  # opset 12\n        model.model[-1].anchor_grid = grid\n    else:  # TensorRT >= 8\n        check_version(trt.__version__, \"8.0.0\", hard=True)  # require tensorrt>=8.0.0\n        export_onnx(model, im, file, 12, dynamic, simplify)  # opset 12\n    onnx = file.with_suffix(\".onnx\")\n\n    LOGGER.info(f\"\\n{prefix} starting export with TensorRT {trt.__version__}...\")\n    assert onnx.exists(), f\"failed to export ONNX file: {onnx}\"\n    f = file.with_suffix(\".engine\")  # TensorRT engine file\n    logger = trt.Logger(trt.Logger.INFO)\n    if verbose:\n        logger.min_severity = trt.Logger.Severity.VERBOSE\n\n    builder = trt.Builder(logger)\n    config = builder.create_builder_config()\n    config.max_workspace_size = workspace * 1 << 30\n    # config.set_memory_pool_limit(trt.MemoryPoolType.WORKSPACE, workspace << 30)  # fix TRT 8.4 deprecation notice\n\n    flag = 1 << int(trt.NetworkDefinitionCreationFlag.EXPLICIT_BATCH)\n    network = builder.create_network(flag)\n    parser = trt.OnnxParser(network, logger)\n    if not parser.parse_from_file(str(onnx)):\n        raise RuntimeError(f\"failed to load ONNX file: {onnx}\")\n\n    inputs = [network.get_input(i) for i in range(network.num_inputs)]\n    outputs = [network.get_output(i) for i in range(network.num_outputs)]\n    for inp in inputs:\n        LOGGER.info(f'{prefix} input \"{inp.name}\" with shape{inp.shape} {inp.dtype}')\n    for out in outputs:\n        LOGGER.info(f'{prefix} output \"{out.name}\" with shape{out.shape} {out.dtype}')\n\n    if dynamic:\n        if im.shape[0] <= 1:\n            LOGGER.warning(f\"{prefix} WARNING ⚠️ --dynamic model requires maximum --batch-size argument\")\n        profile = builder.create_optimization_profile()\n        for inp in inputs:\n            profile.set_shape(inp.name, (1, *im.shape[1:]), (max(1, im.shape[0] // 2), *im.shape[1:]), im.shape)\n        config.add_optimization_profile(profile)\n\n    LOGGER.info(f\"{prefix} building FP{16 if builder.platform_has_fast_fp16 and half else 32} engine as {f}\")\n    if builder.platform_has_fast_fp16 and half:\n        config.set_flag(trt.BuilderFlag.FP16)\n    with builder.build_engine(network, config) as engine, open(f, \"wb\") as t:\n        t.write(engine.serialize())\n    return f, None\n\n\n@try_export\ndef export_saved_model(\n    model,\n    im,\n    file,\n    dynamic,\n    tf_nms=False,\n    agnostic_nms=False,\n    topk_per_class=100,\n    topk_all=100,\n    iou_thres=0.45,\n    conf_thres=0.25,\n    keras=False,\n    prefix=colorstr(\"TensorFlow SavedModel:\"),\n):\n    \"\"\"\n    Exports a YOLOv3 model to TensorFlow SavedModel format, including optional settings for Non-Max Suppression (NMS).\n\n    Args:\n        model (torch.nn.Module): The YOLOv3 PyTorch model to be exported.\n        im (torch.Tensor): Tensor of sample input data used for tracing the model.\n        file (pathlib.Path): File path where the exported TensorFlow SavedModel will be saved.\n        dynamic (bool): If `True`, supports dynamic input shapes.\n        tf_nms (bool, optional): If `True`, includes TensorFlow NMS in the exported model. Defaults to `False`.\n        agnostic_nms (bool, optional): If `True`, uses class-agnostic NMS. Defaults to `False`.\n        topk_per_class (int, optional): Number of top-K predictions to keep per class after NMS. Defaults to `100`.\n        topk_all (int, optional): Number of top-K predictions to keep overall after NMS. Defaults to `100`.\n        iou_thres (float, optional): Intersection over Union (IoU) threshold for NMS. Defaults to `0.45`.\n        conf_thres (float, optional): Confidence threshold for NMS. Defaults to `0.25`.\n        keras (bool, optional): If `True`, saves the model in Keras format. Defaults to `False`.\n        prefix (str, optional): Prefix for logging messages. Defaults to `colorstr(\"TensorFlow SavedModel:\")`.\n\n    Returns:\n        (str, None): Path to the saved TensorFlow model as a string and `None` (kept for interface consistency).\n\n    Raises:\n        ImportError: If the required TensorFlow libraries are not installed.\n\n    Examples:\n        ```python\n        from pathlib import Path\n        from models.common import DetectMultiBackend\n        import torch\n\n        model = DetectMultiBackend(weights='yolov5s.pt')\n        im = torch.zeros(1, 3, 640, 640)  # Sample input tensor\n        file = Path(\"output/saved_model\")\n\n        export_saved_model(model, im, file, dynamic=True)\n        ```\n\n    Notes:\n        - Ensure that required TensorFlow libraries are installed (e.g., `pip install tensorflow`).\n        - For more information, visit https://github.com/ultralytics/yolov5.\n    \"\"\"\n    # YOLOv3 TensorFlow SavedModel export\n    try:\n        import tensorflow as tf\n    except Exception:\n        check_requirements(f\"tensorflow{'' if torch.cuda.is_available() else '-macos' if MACOS else '-cpu'}\")\n        import tensorflow as tf\n    from tensorflow.python.framework.convert_to_constants import convert_variables_to_constants_v2\n\n    from models.tf import TFModel\n\n    LOGGER.info(f\"\\n{prefix} starting export with tensorflow {tf.__version__}...\")\n    f = str(file).replace(\".pt\", \"_saved_model\")\n    batch_size, ch, *imgsz = list(im.shape)  # BCHW\n\n    tf_model = TFModel(cfg=model.yaml, model=model, nc=model.nc, imgsz=imgsz)\n    im = tf.zeros((batch_size, *imgsz, ch))  # BHWC order for TensorFlow\n    _ = tf_model.predict(im, tf_nms, agnostic_nms, topk_per_class, topk_all, iou_thres, conf_thres)\n    inputs = tf.keras.Input(shape=(*imgsz, ch), batch_size=None if dynamic else batch_size)\n    outputs = tf_model.predict(inputs, tf_nms, agnostic_nms, topk_per_class, topk_all, iou_thres, conf_thres)\n    keras_model = tf.keras.Model(inputs=inputs, outputs=outputs)\n    keras_model.trainable = False\n    keras_model.summary()\n    if keras:\n        keras_model.save(f, save_format=\"tf\")\n    else:\n        spec = tf.TensorSpec(keras_model.inputs[0].shape, keras_model.inputs[0].dtype)\n        m = tf.function(lambda x: keras_model(x))  # full model\n        m = m.get_concrete_function(spec)\n        frozen_func = convert_variables_to_constants_v2(m)\n        tfm = tf.Module()\n        tfm.__call__ = tf.function(lambda x: frozen_func(x)[:4] if tf_nms else frozen_func(x), [spec])\n        tfm.__call__(im)\n        tf.saved_model.save(\n            tfm,\n            f,\n            options=tf.saved_model.SaveOptions(experimental_custom_gradients=False)\n            if check_version(tf.__version__, \"2.6\")\n            else tf.saved_model.SaveOptions(),\n        )\n    return f, keras_model\n\n\n@try_export\ndef export_pb(keras_model, file, prefix=colorstr(\"TensorFlow GraphDef:\")):\n    \"\"\"\n    Export a Keras model to TensorFlow GraphDef (*.pb) format, which is compatible with YOLOv3.\n\n    Args:\n        keras_model (tf.keras.Model): The trained Keras model to be exported.\n        file (pathlib.Path): The target file path for saving the exported model.\n        prefix (str, optional): Prefix string for logging. Defaults to colorstr(\"TensorFlow GraphDef:\").\n\n    Returns:\n        tuple[pathlib.Path, None]: The file path where the model is saved and None.\n\n    Example:\n        ```python\n        from tensorflow.keras.models import load_model\n        from pathlib import Path\n        export_pb(load_model('model.h5'), Path('model.pb'))\n        ```\n\n    See Also:\n        For more details on TensorFlow GraphDef, visit\n        https://github.com/leimao/Frozen_Graph_TensorFlow.\n\n    Notes:\n        Ensure TensorFlow is properly installed in your environment as it is required for this function to execute.\n        TensorFlow's version should be compatible with the version used to train your model to avoid any compatibility\n        issues.\n    \"\"\"\n    import tensorflow as tf\n    from tensorflow.python.framework.convert_to_constants import convert_variables_to_constants_v2\n\n    LOGGER.info(f\"\\n{prefix} starting export with tensorflow {tf.__version__}...\")\n    f = file.with_suffix(\".pb\")\n\n    m = tf.function(lambda x: keras_model(x))  # full model\n    m = m.get_concrete_function(tf.TensorSpec(keras_model.inputs[0].shape, keras_model.inputs[0].dtype))\n    frozen_func = convert_variables_to_constants_v2(m)\n    frozen_func.graph.as_graph_def()\n    tf.io.write_graph(graph_or_graph_def=frozen_func.graph, logdir=str(f.parent), name=f.name, as_text=False)\n    return f, None\n\n\n@try_export\ndef export_tflite(keras_model, im, file, int8, data, nms, agnostic_nms, prefix=colorstr(\"TensorFlow Lite:\")):\n    \"\"\"\n    Export a YOLOv3 PyTorch model to TensorFlow Lite (TFLite) format.\n\n    Args:\n        keras_model (tf.keras.Model): The Keras model obtained after converting the PyTorch model.\n        im (torch.Tensor): Sample input tensor to determine model input size.\n        file (pathlib.Path): Desired file path for saving the exported TFLite model.\n        int8 (bool): Flag to enable INT8 quantization for the TFLite model.\n        data (str): Path to dataset YAML file for representative data generation used in quantization.\n        nms (bool): Flag to include Non-Maximum Suppression (NMS) in the exported TFLite model.\n        agnostic_nms (bool): Flag to apply class-agnostic NMS during inference.\n        prefix (str, optional): Prefix for logging messages. Defaults to colorstr(\"TensorFlow Lite:\").\n\n    Returns:\n        (str | None): File path of the saved TensorFlow Lite model file or None if export fails.\n\n    Notes:\n        - Ensure TensorFlow is installed to perform the export.\n        - INT8 quantization requires a representative dataset to provide accurate calibration for the model.\n        - Including Non-Max Suppression (NMS) modifies the exported model to handle post-processing.\n\n    Example:\n        ```python\n        import torch\n        from pathlib import Path\n        from models.experimental import attempt_load\n\n        # Load and prepare model\n        model = attempt_load('yolov5s.pt', map_location='cpu')\n        im = torch.zeros(1, 3, 640, 640)  # Dummy input tensor\n\n        # Export model\n        export_tflite(model, im, Path('yolov5s'), int8=False, data=None, nms=True, agnostic_nms=False)\n        ```\n\n    For more details, refer to:\n        TensorFlow Lite Developer Guide: https://www.tensorflow.org/lite/guide\n        Model Conversion Reference: https://github.com/leimao/Frozen_Graph_TensorFlow\n    \"\"\"\n    import tensorflow as tf\n\n    LOGGER.info(f\"\\n{prefix} starting export with tensorflow {tf.__version__}...\")\n    batch_size, ch, *imgsz = list(im.shape)  # BCHW\n    f = str(file).replace(\".pt\", \"-fp16.tflite\")\n\n    converter = tf.lite.TFLiteConverter.from_keras_model(keras_model)\n    converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS]\n    converter.target_spec.supported_types = [tf.float16]\n    converter.optimizations = [tf.lite.Optimize.DEFAULT]\n    if int8:\n        from models.tf import representative_dataset_gen\n\n        dataset = LoadImages(check_dataset(check_yaml(data))[\"train\"], img_size=imgsz, auto=False)\n        converter.representative_dataset = lambda: representative_dataset_gen(dataset, ncalib=100)\n        converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS_INT8]\n        converter.target_spec.supported_types = []\n        converter.inference_input_type = tf.uint8  # or tf.int8\n        converter.inference_output_type = tf.uint8  # or tf.int8\n        converter.experimental_new_quantizer = True\n        f = str(file).replace(\".pt\", \"-int8.tflite\")\n    if nms or agnostic_nms:\n        converter.target_spec.supported_ops.append(tf.lite.OpsSet.SELECT_TF_OPS)\n\n    tflite_model = converter.convert()\n    open(f, \"wb\").write(tflite_model)\n    return f, None\n\n\n@try_export\ndef export_edgetpu(file, prefix=colorstr(\"Edge TPU:\")):\n    \"\"\"\n    Export a YOLOv5 model to TensorFlow Edge TPU format with INT8 quantization.\n\n    Args:\n        file (Path): The file path for the PyTorch model to be exported, with a `.pt` suffix.\n        prefix (str): A prefix to be used for logging output. Defaults to \"Edge TPU:\"\n\n    Returns:\n        Tuple[Path | None, None]: A tuple containing the file path of the exported model with the `-int8_edgetpu.tflite`\n         suffix and `None`, if successful. If unsuccessful, returns `(None, None)`.\n\n    Raises:\n        AssertionError: If the export is not executed on a Linux system.\n        subprocess.CalledProcessError: If there are issues with subprocess execution, particularly around Edge TPU compiler\n         installation or model conversion.\n\n    Notes:\n        This function is designed to work exclusively on Linux systems and requires the Edge TPU compiler to be installed.\n        If the compiler is not found, the function attempts to install it.\n\n    Example:\n        ```python\n        from pathlib import Path\n        from ultralytics import export_edgetpu\n\n        model_file = Path('yolov5s.pt')\n        exported_model, _ = export_edgetpu(model_file)\n        print(f\"Model exported to {exported_model}\")\n        ```\n\n    For additional details, visit the Edge TPU compiler documentation:\n    https://coral.ai/docs/edgetpu/compiler/\n    \"\"\"\n    cmd = \"edgetpu_compiler --version\"\n    help_url = \"https://coral.ai/docs/edgetpu/compiler/\"\n    assert platform.system() == \"Linux\", f\"export only supported on Linux. See {help_url}\"\n    if subprocess.run(f\"{cmd} > /dev/null 2>&1\", shell=True).returncode != 0:\n        LOGGER.info(f\"\\n{prefix} export requires Edge TPU compiler. Attempting install from {help_url}\")\n        sudo = subprocess.run(\"sudo --version >/dev/null\", shell=True).returncode == 0  # sudo installed on system\n        for c in (\n            \"curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -\",\n            'echo \"deb https://packages.cloud.google.com/apt coral-edgetpu-stable main\" | sudo tee /etc/apt/sources.list.d/coral-edgetpu.list',\n            \"sudo apt-get update\",\n            \"sudo apt-get install edgetpu-compiler\",\n        ):\n            subprocess.run(c if sudo else c.replace(\"sudo \", \"\"), shell=True, check=True)\n    ver = subprocess.run(cmd, shell=True, capture_output=True, check=True).stdout.decode().split()[-1]\n\n    LOGGER.info(f\"\\n{prefix} starting export with Edge TPU compiler {ver}...\")\n    f = str(file).replace(\".pt\", \"-int8_edgetpu.tflite\")  # Edge TPU model\n    f_tfl = str(file).replace(\".pt\", \"-int8.tflite\")  # TFLite model\n\n    subprocess.run(\n        [\n            \"edgetpu_compiler\",\n            \"-s\",\n            \"-d\",\n            \"-k\",\n            \"10\",\n            \"--out_dir\",\n            str(file.parent),\n            f_tfl,\n        ],\n        check=True,\n    )\n    return f, None\n\n\n@try_export\ndef export_tfjs(file, int8, prefix=colorstr(\"TensorFlow.js:\")):\n    \"\"\"\n    Export a YOLOv3 model to TensorFlow.js format, with an optional quantization to uint8.\n\n    Args:\n        file (Path): The path to the model file to be exported.\n        int8 (bool): Boolean flag to determine if the model should be quantized to uint8.\n        prefix (str): String prefix for logging, by default \"TensorFlow.js\".\n\n    Returns:\n        (tuple[str, None]): The directory path where the TensorFlow.js model files are saved and `None` placeholder to match\n            the expected return type from 'try_export' decorator.\n\n    Raises:\n        ImportError: If the required 'tensorflowjs' package is not installed.\n\n    Example:\n        ```python\n        from pathlib import Path\n        export_tfjs(file=Path(\"yolov5s.pt\"), int8=False)\n        ```\n\n    Note:\n        Ensure that you have TensorFlow.js installed in your environment. Install the package via:\n        ```bash\n        pip install tensorflowjs\n        ```\n\n        For more details on using the converted model:\n        Refer to the official TensorFlow.js documentation: https://www.tensorflow.org/js.\n\n    Usage:\n        The converted model can be used directly in JavaScript environments using the TensorFlow.js library.\n\n        For usage in web applications:\n            - Clone the example repository:\n                ```bash\n                cd .. && git clone https://github.com/zldrobit/tfjs-yolov5-example.git && cd tfjs-yolov5-example\n                ```\n            - Install dependencies:\n                ```bash\n                npm install\n                ```\n            - Create a symbolic link to the exported web model:\n                ```bash\n                ln -s ../../yolov5/yolov5s_web_model public/yolov5s_web_model\n                ```\n            - Start the example application:\n                ```bash\n                npm start\n                ```\n    \"\"\"\n    check_requirements(\"tensorflowjs\")\n    import tensorflowjs as tfjs\n\n    LOGGER.info(f\"\\n{prefix} starting export with tensorflowjs {tfjs.__version__}...\")\n    f = str(file).replace(\".pt\", \"_web_model\")  # js dir\n    f_pb = file.with_suffix(\".pb\")  # *.pb path\n    f_json = f\"{f}/model.json\"  # *.json path\n\n    args = [\n        \"tensorflowjs_converter\",\n        \"--input_format=tf_frozen_model\",\n        \"--quantize_uint8\" if int8 else \"\",\n        \"--output_node_names=Identity,Identity_1,Identity_2,Identity_3\",\n        str(f_pb),\n        f,\n    ]\n    subprocess.run([arg for arg in args if arg], check=True)\n\n    json = Path(f_json).read_text()\n    with open(f_json, \"w\") as j:  # sort JSON Identity_* in ascending order\n        subst = re.sub(\n            r'{\"outputs\": {\"Identity.?.?\": {\"name\": \"Identity.?.?\"}, '\n            r'\"Identity.?.?\": {\"name\": \"Identity.?.?\"}, '\n            r'\"Identity.?.?\": {\"name\": \"Identity.?.?\"}, '\n            r'\"Identity.?.?\": {\"name\": \"Identity.?.?\"}}}',\n            r'{\"outputs\": {\"Identity\": {\"name\": \"Identity\"}, '\n            r'\"Identity_1\": {\"name\": \"Identity_1\"}, '\n            r'\"Identity_2\": {\"name\": \"Identity_2\"}, '\n            r'\"Identity_3\": {\"name\": \"Identity_3\"}}}',\n            json,\n        )\n        j.write(subst)\n    return f, None\n\n\ndef add_tflite_metadata(file, metadata, num_outputs):\n    \"\"\"\n    Adds metadata to a TensorFlow Lite model to enhance its usability with `tflite_support`.\n\n    Args:\n        file (str): Path to the TensorFlow Lite model file.\n        metadata (dict): Dictionary of metadata to add, including descriptions of inputs, outputs, and other relevant info.\n        num_outputs (int): Number of output tensors in the model.\n\n    Returns:\n        None\n\n    Example:\n        ```python\n        metadata = {\n            \"input\": {\"description\": \"Input image tensor\"},\n            \"output\": [{\"name\": \"scores\", \"description\": \"Detection scores\"}],\n        }\n        add_tflite_metadata(\"/path/to/model.tflite\", metadata, num_outputs=1)\n        ```\n\n    Note:\n        Requires the `tflite_support` library for adding metadata to the TensorFlow Lite model.\n        Installation: `pip install tflite-support`\n\n        ```python\n        from tflite_support import flatbuffers\n        from tflite_support import metadata as _metadata\n        from tflite_support import metadata_schema_py_generated as _metadata_fb\n\n        tmp_file = Path(\"/tmp/meta.txt\")\n        with open(tmp_file, \"w\") as meta_f:\n            meta_f.write(str(metadata))\n\n        model_meta = _metadata_fb.ModelMetadataT()\n        label_file = _metadata_fb.AssociatedFileT()\n        label_file.name = tmp_file.name\n        model_meta.associatedFiles = [label_file]\n\n        subgraph = _metadata_fb.SubGraphMetadataT()\n        subgraph.inputTensorMetadata = [_metadata_fb.TensorMetadataT()]\n        subgraph.outputTensorMetadata = [_metadata_fb.TensorMetadataT()] * num_outputs\n        model_meta.subgraphMetadata = [subgraph]\n\n        b = flatbuffers.Builder(0)\n        b.Finish(model_meta.Pack(b), _metadata.MetadataPopulator.METADATA_FILE_IDENTIFIER)\n        metadata_buf = b.Output()\n\n        populator = _metadata.MetadataPopulator.with_model_file(file)\n        populator.load_metadata_buffer(metadata_buf)\n        populator.load_associated_files([str(tmp_file)])\n        populator.populate()\n        ```\n\n        This function is a helper to add metadata to a TFLite model, making it easier to interpret and process for tasks like\n        object detection or classification. It leverages `tflite_support` to load and attach the metadata directly to the\n        model file.\n    \"\"\"\n    with contextlib.suppress(ImportError):\n        # check_requirements('tflite_support')\n        from tflite_support import flatbuffers\n        from tflite_support import metadata as _metadata\n        from tflite_support import metadata_schema_py_generated as _metadata_fb\n\n        tmp_file = Path(\"/tmp/meta.txt\")\n        with open(tmp_file, \"w\") as meta_f:\n            meta_f.write(str(metadata))\n\n        model_meta = _metadata_fb.ModelMetadataT()\n        label_file = _metadata_fb.AssociatedFileT()\n        label_file.name = tmp_file.name\n        model_meta.associatedFiles = [label_file]\n\n        subgraph = _metadata_fb.SubGraphMetadataT()\n        subgraph.inputTensorMetadata = [_metadata_fb.TensorMetadataT()]\n        subgraph.outputTensorMetadata = [_metadata_fb.TensorMetadataT()] * num_outputs\n        model_meta.subgraphMetadata = [subgraph]\n\n        b = flatbuffers.Builder(0)\n        b.Finish(model_meta.Pack(b), _metadata.MetadataPopulator.METADATA_FILE_IDENTIFIER)\n        metadata_buf = b.Output()\n\n        populator = _metadata.MetadataPopulator.with_model_file(file)\n        populator.load_metadata_buffer(metadata_buf)\n        populator.load_associated_files([str(tmp_file)])\n        populator.populate()\n        tmp_file.unlink()\n\n\ndef pipeline_coreml(model, im, file, names, y, prefix=colorstr(\"CoreML Pipeline:\")):\n    \"\"\"\n    Processes and exports a YOLOv3 model into the CoreML model format, applying metadata and non-maximum suppression\n    (NMS).\n\n    Args:\n        model (coremltools.models.MLModel): The pre-trained YOLOv3 CoreML model to be used for the pipeline.\n        im (torch.Tensor): Input image tensor in BCHW (Batch, Channel, Height, Width) format with a shape (B, 3, H, W).\n        file (pathlib.Path): Destination file path where the CoreML model will be saved.\n        names (dict): A dictionary that maps class indices to class names.\n        y (torch.Tensor): Output detection tensor from the YOLO model, containing predictions.\n        prefix (str): Prefix for logging messages, default is \"CoreML Pipeline:\".\n\n    Returns:\n        pathlib.Path | None: The path to the saved CoreML model if successful, otherwise None.\n\n    Example:\n        ```python\n        from pathlib import Path\n        import torch\n        from coremltools.models import MLModel\n\n        # Load example CoreML model\n        model = MLModel('path/to/pretrained/model.mlmodel')\n\n        # Create example input tensor: B, C, H, W format\n        im = torch.randn(1, 3, 640, 640)\n\n        # Define where the CoreML model will be saved\n        file = Path('path/to/save/model.mlmodel')\n\n        # Define example class names\n        names = {0: 'class0', 1: 'class1'}\n\n        # Dummy YOLO model output prediction having similar dimensions to y\n        y = torch.randn(1, 25200, 85)\n\n        # Execute CoreML pipeline\n        pipeline_coreml(model, im, file, names, y)\n        ```\n\n    Notes:\n        - The function adds NMS to the CoreML model, supporting dynamic thresholds for IoU and confidence.\n        - Metadata fields are updated to include class names, thresholds, and additional information.\n        - The pipeline exports the final enhanced model into the specified file path in CoreML (`.mlmodel`) format.\n        - Ensure that `coremltools` is installed and properly configured in your environment.\n        - This function is designed to work primarily on macOS systems as CoreML is macOS-specific.\n\n    References:\n    - `coremltools`: https://github.com/apple/coremltools\n    - YOLOv3: https://github.com/ultralytics/yolov5\n    \"\"\"\n    import coremltools as ct\n    from PIL import Image\n\n    print(f\"{prefix} starting pipeline with coremltools {ct.__version__}...\")\n    batch_size, ch, h, w = list(im.shape)  # BCHW\n    t = time.time()\n\n    # YOLOv3 Output shapes\n    spec = model.get_spec()\n    out0, out1 = iter(spec.description.output)\n    if platform.system() == \"Darwin\":\n        img = Image.new(\"RGB\", (w, h))  # img(192 width, 320 height)\n        # img = torch.zeros((*opt.img_size, 3)).numpy()  # img size(320,192,3) iDetection\n        out = model.predict({\"image\": img})\n        out0_shape, out1_shape = out[out0.name].shape, out[out1.name].shape\n    else:  # linux and windows can not run model.predict(), get sizes from pytorch output y\n        s = tuple(y[0].shape)\n        out0_shape, out1_shape = (s[1], s[2] - 5), (s[1], 4)  # (3780, 80), (3780, 4)\n\n    # Checks\n    nx, ny = spec.description.input[0].type.imageType.width, spec.description.input[0].type.imageType.height\n    na, nc = out0_shape\n    # na, nc = out0.type.multiArrayType.shape  # number anchors, classes\n    assert len(names) == nc, f\"{len(names)} names found for nc={nc}\"  # check\n\n    # Define output shapes (missing)\n    out0.type.multiArrayType.shape[:] = out0_shape  # (3780, 80)\n    out1.type.multiArrayType.shape[:] = out1_shape  # (3780, 4)\n    # spec.neuralNetwork.preprocessing[0].featureName = '0'\n\n    # Flexible input shapes\n    # from coremltools.models.neural_network import flexible_shape_utils\n    # s = [] # shapes\n    # s.append(flexible_shape_utils.NeuralNetworkImageSize(320, 192))\n    # s.append(flexible_shape_utils.NeuralNetworkImageSize(640, 384))  # (height, width)\n    # flexible_shape_utils.add_enumerated_image_sizes(spec, feature_name='image', sizes=s)\n    # r = flexible_shape_utils.NeuralNetworkImageSizeRange()  # shape ranges\n    # r.add_height_range((192, 640))\n    # r.add_width_range((192, 640))\n    # flexible_shape_utils.update_image_size_range(spec, feature_name='image', size_range=r)\n\n    # Print\n    print(spec.description)\n\n    # Model from spec\n    model = ct.models.MLModel(spec)\n\n    # 3. Create NMS protobuf\n    nms_spec = ct.proto.Model_pb2.Model()\n    nms_spec.specificationVersion = 5\n    for i in range(2):\n        decoder_output = model._spec.description.output[i].SerializeToString()\n        nms_spec.description.input.add()\n        nms_spec.description.input[i].ParseFromString(decoder_output)\n        nms_spec.description.output.add()\n        nms_spec.description.output[i].ParseFromString(decoder_output)\n\n    nms_spec.description.output[0].name = \"confidence\"\n    nms_spec.description.output[1].name = \"coordinates\"\n\n    output_sizes = [nc, 4]\n    for i in range(2):\n        ma_type = nms_spec.description.output[i].type.multiArrayType\n        ma_type.shapeRange.sizeRanges.add()\n        ma_type.shapeRange.sizeRanges[0].lowerBound = 0\n        ma_type.shapeRange.sizeRanges[0].upperBound = -1\n        ma_type.shapeRange.sizeRanges.add()\n        ma_type.shapeRange.sizeRanges[1].lowerBound = output_sizes[i]\n        ma_type.shapeRange.sizeRanges[1].upperBound = output_sizes[i]\n        del ma_type.shape[:]\n\n    nms = nms_spec.nonMaximumSuppression\n    nms.confidenceInputFeatureName = out0.name  # 1x507x80\n    nms.coordinatesInputFeatureName = out1.name  # 1x507x4\n    nms.confidenceOutputFeatureName = \"confidence\"\n    nms.coordinatesOutputFeatureName = \"coordinates\"\n    nms.iouThresholdInputFeatureName = \"iouThreshold\"\n    nms.confidenceThresholdInputFeatureName = \"confidenceThreshold\"\n    nms.iouThreshold = 0.45\n    nms.confidenceThreshold = 0.25\n    nms.pickTop.perClass = True\n    nms.stringClassLabels.vector.extend(names.values())\n    nms_model = ct.models.MLModel(nms_spec)\n\n    # 4. Pipeline models together\n    pipeline = ct.models.pipeline.Pipeline(\n        input_features=[\n            (\"image\", ct.models.datatypes.Array(3, ny, nx)),\n            (\"iouThreshold\", ct.models.datatypes.Double()),\n            (\"confidenceThreshold\", ct.models.datatypes.Double()),\n        ],\n        output_features=[\"confidence\", \"coordinates\"],\n    )\n    pipeline.add_model(model)\n    pipeline.add_model(nms_model)\n\n    # Correct datatypes\n    pipeline.spec.description.input[0].ParseFromString(model._spec.description.input[0].SerializeToString())\n    pipeline.spec.description.output[0].ParseFromString(nms_model._spec.description.output[0].SerializeToString())\n    pipeline.spec.description.output[1].ParseFromString(nms_model._spec.description.output[1].SerializeToString())\n\n    # Update metadata\n    pipeline.spec.specificationVersion = 5\n    pipeline.spec.description.metadata.versionString = \"https://github.com/ultralytics/yolov5\"\n    pipeline.spec.description.metadata.shortDescription = \"https://github.com/ultralytics/yolov5\"\n    pipeline.spec.description.metadata.author = \"glenn.jocher@ultralytics.com\"\n    pipeline.spec.description.metadata.license = \"https://github.com/ultralytics/yolov5/blob/master/LICENSE\"\n    pipeline.spec.description.metadata.userDefined.update(\n        {\n            \"classes\": \",\".join(names.values()),\n            \"iou_threshold\": str(nms.iouThreshold),\n            \"confidence_threshold\": str(nms.confidenceThreshold),\n        }\n    )\n\n    # Save the model\n    f = file.with_suffix(\".mlmodel\")  # filename\n    model = ct.models.MLModel(pipeline.spec)\n    model.input_description[\"image\"] = \"Input image\"\n    model.input_description[\"iouThreshold\"] = f\"(optional) IOU Threshold override (default: {nms.iouThreshold})\"\n    model.input_description[\"confidenceThreshold\"] = (\n        f\"(optional) Confidence Threshold override (default: {nms.confidenceThreshold})\"\n    )\n    model.output_description[\"confidence\"] = 'Boxes × Class confidence (see user-defined metadata \"classes\")'\n    model.output_description[\"coordinates\"] = \"Boxes × [x, y, width, height] (relative to image size)\"\n    model.save(f)  # pipelined\n    print(f\"{prefix} pipeline success ({time.time() - t:.2f}s), saved as {f} ({file_size(f):.1f} MB)\")\n\n\n@smart_inference_mode()\ndef run(\n    data=ROOT / \"data/coco128.yaml\",  # 'dataset.yaml path'\n    weights=ROOT / \"yolov5s.pt\",  # weights path\n    imgsz=(640, 640),  # image (height, width)\n    batch_size=1,  # batch size\n    device=\"cpu\",  # cuda device, i.e. 0 or 0,1,2,3 or cpu\n    include=(\"torchscript\", \"onnx\"),  # include formats\n    half=False,  # FP16 half-precision export\n    inplace=False,  # set YOLOv3 Detect() inplace=True\n    keras=False,  # use Keras\n    optimize=False,  # TorchScript: optimize for mobile\n    int8=False,  # CoreML/TF INT8 quantization\n    dynamic=False,  # ONNX/TF/TensorRT: dynamic axes\n    simplify=False,  # ONNX: simplify model\n    opset=12,  # ONNX: opset version\n    verbose=False,  # TensorRT: verbose log\n    workspace=4,  # TensorRT: workspace size (GB)\n    nms=False,  # TF: add NMS to model\n    agnostic_nms=False,  # TF: add agnostic NMS to model\n    topk_per_class=100,  # TF.js NMS: topk per class to keep\n    topk_all=100,  # TF.js NMS: topk for all classes to keep\n    iou_thres=0.45,  # TF.js NMS: IoU threshold\n    conf_thres=0.25,  # TF.js NMS: confidence threshold\n):\n    \"\"\"\n    Export a PyTorch model to various formats like ONNX, CoreML, and TensorRT.\n\n    Args:\n        data (str | Path): Path to dataset configuration file.\n        weights (str | Path): Path to model weights file in PyTorch format.\n        imgsz (tuple[int, int]): Tuple specifying image height and width for input dimensions.\n        batch_size (int): Batch size for model inference.\n        device (str): Device to use for inference (e.g., '0', '0,1,2,3', 'cpu').\n        include (tuple[str]): Formats to include for model export (e.g., 'torchscript', 'onnx', etc.).\n        half (bool): Whether to export model with FP16 precision.\n        inplace (bool): Set YOLOv3 Detect module inplace option to True.\n        keras (bool): Save Keras model when exporting TensorFlow SavedModel format.\n        optimize (bool): Optimize the TorchScript model for mobile inference.\n        int8 (bool): Apply INT8 quantization for CoreML/TF models.\n        dynamic (bool): Enable dynamic axes for ONNX/TF/TensorRT models.\n        simplify (bool): Simplify the ONNX model after export.\n        opset (int): ONNX opset version.\n        verbose (bool): Enable verbose logging for TensorRT engine export.\n        workspace (int): Workspace size in GB for TensorRT engine.\n        nms (bool): Enable Non-Maximum Suppression (NMS) in TensorFlow models.\n        agnostic_nms (bool): Enable class-agnostic NMS in TensorFlow models.\n        topk_per_class (int): Top-K per class to keep in TensorFlow JSON model.\n        topk_all (int): Top-K for all classes to keep in TensorFlow JSON model.\n        iou_thres (float): IOU threshold for TensorFlow JSON model.\n        conf_thres (float): Confidence threshold for TensorFlow JSON model.\n\n    Returns:\n        None\n\n    Notes:\n        - Requires various packages installed for different export formats, e.g., `onnx`, `coremltools`, etc.\n        - Some formats have additional dependencies (e.g., TensorFlow, TensorRT, etc.)\n\n    Examples:\n        ```python\n        run(\n            data='data/coco128.yaml',\n            weights='yolov5s.pt',\n            imgsz=(640, 640),\n            batch_size=1,\n            device='cpu',\n            include=('torchscript', 'onnx'),\n            half=False,\n            dynamic=True,\n            opset=12\n        )\n        ```\n    \"\"\"\n    t = time.time()\n    include = [x.lower() for x in include]  # to lowercase\n    fmts = tuple(export_formats()[\"Argument\"][1:])  # --include arguments\n    flags = [x in include for x in fmts]\n    assert sum(flags) == len(include), f\"ERROR: Invalid --include {include}, valid --include arguments are {fmts}\"\n    jit, onnx, xml, engine, coreml, saved_model, pb, tflite, edgetpu, tfjs, paddle = flags  # export booleans\n    file = Path(url2file(weights) if str(weights).startswith((\"http:/\", \"https:/\")) else weights)  # PyTorch weights\n\n    # Load PyTorch model\n    device = select_device(device)\n    if half:\n        assert device.type != \"cpu\" or coreml, \"--half only compatible with GPU export, i.e. use --device 0\"\n        assert not dynamic, \"--half not compatible with --dynamic, i.e. use either --half or --dynamic but not both\"\n    model = attempt_load(weights, device=device, inplace=True, fuse=True)  # load FP32 model\n\n    # Checks\n    imgsz *= 2 if len(imgsz) == 1 else 1  # expand\n    if optimize:\n        assert device.type == \"cpu\", \"--optimize not compatible with cuda devices, i.e. use --device cpu\"\n\n    # Input\n    gs = int(max(model.stride))  # grid size (max stride)\n    imgsz = [check_img_size(x, gs) for x in imgsz]  # verify img_size are gs-multiples\n    im = torch.zeros(batch_size, 3, *imgsz).to(device)  # image size(1,3,320,192) BCHW iDetection\n\n    # Update model\n    model.eval()\n    for k, m in model.named_modules():\n        if isinstance(m, Detect):\n            m.inplace = inplace\n            m.dynamic = dynamic\n            m.export = True\n\n    for _ in range(2):\n        y = model(im)  # dry runs\n    if half and not coreml:\n        im, model = im.half(), model.half()  # to FP16\n    shape = tuple((y[0] if isinstance(y, tuple) else y).shape)  # model output shape\n    metadata = {\"stride\": int(max(model.stride)), \"names\": model.names}  # model metadata\n    LOGGER.info(f\"\\n{colorstr('PyTorch:')} starting from {file} with output shape {shape} ({file_size(file):.1f} MB)\")\n\n    # Exports\n    f = [\"\"] * len(fmts)  # exported filenames\n    warnings.filterwarnings(action=\"ignore\", category=torch.jit.TracerWarning)  # suppress TracerWarning\n    if jit:  # TorchScript\n        f[0], _ = export_torchscript(model, im, file, optimize)\n    if engine:  # TensorRT required before ONNX\n        f[1], _ = export_engine(model, im, file, half, dynamic, simplify, workspace, verbose)\n    if onnx or xml:  # OpenVINO requires ONNX\n        f[2], _ = export_onnx(model, im, file, opset, dynamic, simplify)\n    if xml:  # OpenVINO\n        f[3], _ = export_openvino(file, metadata, half, int8, data)\n    if coreml:  # CoreML\n        f[4], ct_model = export_coreml(model, im, file, int8, half, nms)\n        if nms:\n            pipeline_coreml(ct_model, im, file, model.names, y)\n    if any((saved_model, pb, tflite, edgetpu, tfjs)):  # TensorFlow formats\n        assert not tflite or not tfjs, \"TFLite and TF.js models must be exported separately, please pass only one type.\"\n        assert not isinstance(model, ClassificationModel), \"ClassificationModel export to TF formats not yet supported.\"\n        f[5], s_model = export_saved_model(\n            model.cpu(),\n            im,\n            file,\n            dynamic,\n            tf_nms=nms or agnostic_nms or tfjs,\n            agnostic_nms=agnostic_nms or tfjs,\n            topk_per_class=topk_per_class,\n            topk_all=topk_all,\n            iou_thres=iou_thres,\n            conf_thres=conf_thres,\n            keras=keras,\n        )\n        if pb or tfjs:  # pb prerequisite to tfjs\n            f[6], _ = export_pb(s_model, file)\n        if tflite or edgetpu:\n            f[7], _ = export_tflite(s_model, im, file, int8 or edgetpu, data=data, nms=nms, agnostic_nms=agnostic_nms)\n            if edgetpu:\n                f[8], _ = export_edgetpu(file)\n            add_tflite_metadata(f[8] or f[7], metadata, num_outputs=len(s_model.outputs))\n        if tfjs:\n            f[9], _ = export_tfjs(file, int8)\n    if paddle:  # PaddlePaddle\n        f[10], _ = export_paddle(model, im, file, metadata)\n\n    # Finish\n    f = [str(x) for x in f if x]  # filter out '' and None\n    if any(f):\n        cls, det, seg = (isinstance(model, x) for x in (ClassificationModel, DetectionModel, SegmentationModel))  # type\n        det &= not seg  # segmentation models inherit from SegmentationModel(DetectionModel)\n        dir = Path(\"segment\" if seg else \"classify\" if cls else \"\")\n        h = \"--half\" if half else \"\"  # --half FP16 inference arg\n        s = (\n            \"# WARNING ⚠️ ClassificationModel not yet supported for PyTorch Hub AutoShape inference\"\n            if cls\n            else \"# WARNING ⚠️ SegmentationModel not yet supported for PyTorch Hub AutoShape inference\"\n            if seg\n            else \"\"\n        )\n        LOGGER.info(\n            f\"\\nExport complete ({time.time() - t:.1f}s)\"\n            f\"\\nResults saved to {colorstr('bold', file.parent.resolve())}\"\n            f\"\\nDetect:          python {dir / ('detect.py' if det else 'predict.py')} --weights {f[-1]} {h}\"\n            f\"\\nValidate:        python {dir / 'val.py'} --weights {f[-1]} {h}\"\n            f\"\\nPyTorch Hub:     model = torch.hub.load('ultralytics/yolov5', 'custom', '{f[-1]}')  {s}\"\n            f\"\\nVisualize:       https://netron.app\"\n        )\n    return f  # return list of exported files/dirs\n\n\ndef parse_opt(known=False):\n    \"\"\"\n    Parse command-line arguments for model export configuration.\n\n    Args:\n        known (bool): If True, parse only known arguments and ignore others. Default is False.\n\n    Returns:\n        argparse.Namespace: Namespace object containing export configuration parameters.\n\n    Example:\n        ```python\n        from ultralytics.export import parse_opt\n\n        options = parse_opt(known=True)\n        print(options)\n        ```\n\n    Notes:\n        This function leverages `argparse` to handle command-line arguments for various model export configurations, allowing\n        users to specify export formats, model parameters, and optimization settings.\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--data\", type=str, default=ROOT / \"data/coco128.yaml\", help=\"dataset.yaml path\")\n    parser.add_argument(\"--weights\", nargs=\"+\", type=str, default=ROOT / \"yolov3-tiny.pt\", help=\"model.pt path(s)\")\n    parser.add_argument(\"--imgsz\", \"--img\", \"--img-size\", nargs=\"+\", type=int, default=[640, 640], help=\"image (h, w)\")\n    parser.add_argument(\"--batch-size\", type=int, default=1, help=\"batch size\")\n    parser.add_argument(\"--device\", default=\"cpu\", help=\"cuda device, i.e. 0 or 0,1,2,3 or cpu\")\n    parser.add_argument(\"--half\", action=\"store_true\", help=\"FP16 half-precision export\")\n    parser.add_argument(\"--inplace\", action=\"store_true\", help=\"set YOLOv3 Detect() inplace=True\")\n    parser.add_argument(\"--keras\", action=\"store_true\", help=\"TF: use Keras\")\n    parser.add_argument(\"--optimize\", action=\"store_true\", help=\"TorchScript: optimize for mobile\")\n    parser.add_argument(\"--int8\", action=\"store_true\", help=\"CoreML/TF/OpenVINO INT8 quantization\")\n    parser.add_argument(\"--dynamic\", action=\"store_true\", help=\"ONNX/TF/TensorRT: dynamic axes\")\n    parser.add_argument(\"--simplify\", action=\"store_true\", help=\"ONNX: simplify model\")\n    parser.add_argument(\"--opset\", type=int, default=17, help=\"ONNX: opset version\")\n    parser.add_argument(\"--verbose\", action=\"store_true\", help=\"TensorRT: verbose log\")\n    parser.add_argument(\"--workspace\", type=int, default=4, help=\"TensorRT: workspace size (GB)\")\n    parser.add_argument(\"--nms\", action=\"store_true\", help=\"TF: add NMS to model\")\n    parser.add_argument(\"--agnostic-nms\", action=\"store_true\", help=\"TF: add agnostic NMS to model\")\n    parser.add_argument(\"--topk-per-class\", type=int, default=100, help=\"TF.js NMS: topk per class to keep\")\n    parser.add_argument(\"--topk-all\", type=int, default=100, help=\"TF.js NMS: topk for all classes to keep\")\n    parser.add_argument(\"--iou-thres\", type=float, default=0.45, help=\"TF.js NMS: IoU threshold\")\n    parser.add_argument(\"--conf-thres\", type=float, default=0.25, help=\"TF.js NMS: confidence threshold\")\n    parser.add_argument(\n        \"--include\",\n        nargs=\"+\",\n        default=[\"torchscript\"],\n        help=\"torchscript, onnx, openvino, engine, coreml, saved_model, pb, tflite, edgetpu, tfjs, paddle\",\n    )\n    opt = parser.parse_known_args()[0] if known else parser.parse_args()\n    print_args(vars(opt))\n    return opt\n\n\ndef main(opt):\n    \"\"\"Run(**vars(opt)).\"\"\"\n    for opt.weights in opt.weights if isinstance(opt.weights, list) else [opt.weights]:\n        run(**vars(opt))\n\n\nif __name__ == \"__main__\":\n    opt = parse_opt()\n    main(opt)\n"
        },
        {
          "name": "hubconf.py",
          "type": "blob",
          "size": 21.732421875,
          "content": "# Ultralytics YOLOv3 🚀, AGPL-3.0 license\n\"\"\"\nPyTorch Hub models https://pytorch.org/hub/ultralytics_yolov5.\n\nUsage:\n    import torch\n    model = torch.hub.load('ultralytics/yolov5', 'yolov5s')  # official model\n    model = torch.hub.load('ultralytics/yolov5:master', 'yolov5s')  # from branch\n    model = torch.hub.load('ultralytics/yolov5', 'custom', 'yolov5s.pt')  # custom/local model\n    model = torch.hub.load('.', 'custom', 'yolov5s.pt', source='local')  # local repo\n\"\"\"\n\nimport torch\n\n\ndef _create(name, pretrained=True, channels=3, classes=80, autoshape=True, verbose=True, device=None):\n    \"\"\"\n    Creates or loads a YOLOv3 model with specified configurations and optional pretrained weights.\n\n    Args:\n        name (str): Model name such as 'yolov5s' or a path to a model checkpoint file, e.g., 'path/to/best.pt'.\n        pretrained (bool): Whether to load pretrained weights into the model. Default is True.\n        channels (int): Number of input channels. Default is 3.\n        classes (int): Number of model classes. Default is 80.\n        autoshape (bool): Whether to apply the YOLOv3 .autoshape() wrapper to the model for handling multiple input\n                          types. Default is True.\n        verbose (bool): If True, print all information to the screen. Default is True.\n        device (str | torch.device | None): Device to use for model parameters ('cpu', 'cuda', etc.). If None, defaults\n                                            to the best available device.\n\n    Returns:\n        torch.nn.Module: YOLOv3 model loaded with or without pretrained weights.\n\n    Example:\n        ```python\n        import torch\n        model = _create('yolov5s')\n        ```\n\n    Raises:\n        Exception: If an error occurs while loading the model, returns an error message with a helpful URL:\n                   \"https://docs.ultralytics.com/yolov5/tutorials/pytorch_hub_model_loading\".\n    \"\"\"\n    from pathlib import Path\n\n    from models.common import AutoShape, DetectMultiBackend\n    from models.experimental import attempt_load\n    from models.yolo import ClassificationModel, DetectionModel, SegmentationModel\n    from utils.downloads import attempt_download\n    from utils.general import LOGGER, ROOT, check_requirements, intersect_dicts, logging\n    from utils.torch_utils import select_device\n\n    if not verbose:\n        LOGGER.setLevel(logging.WARNING)\n    check_requirements(ROOT / \"requirements.txt\", exclude=(\"opencv-python\", \"tensorboard\", \"thop\"))\n    name = Path(name)\n    path = name.with_suffix(\".pt\") if name.suffix == \"\" and not name.is_dir() else name  # checkpoint path\n    try:\n        device = select_device(device)\n        if pretrained and channels == 3 and classes == 80:\n            try:\n                model = DetectMultiBackend(path, device=device, fuse=autoshape)  # detection model\n                if autoshape:\n                    if model.pt and isinstance(model.model, ClassificationModel):\n                        LOGGER.warning(\n                            \"WARNING ⚠️ YOLOv3 ClassificationModel is not yet AutoShape compatible. \"\n                            \"You must pass torch tensors in BCHW to this model, i.e. shape(1,3,224,224).\"\n                        )\n                    elif model.pt and isinstance(model.model, SegmentationModel):\n                        LOGGER.warning(\n                            \"WARNING ⚠️ YOLOv3 SegmentationModel is not yet AutoShape compatible. \"\n                            \"You will not be able to run inference with this model.\"\n                        )\n                    else:\n                        model = AutoShape(model)  # for file/URI/PIL/cv2/np inputs and NMS\n            except Exception:\n                model = attempt_load(path, device=device, fuse=False)  # arbitrary model\n        else:\n            cfg = list((Path(__file__).parent / \"models\").rglob(f\"{path.stem}.yaml\"))[0]  # model.yaml path\n            model = DetectionModel(cfg, channels, classes)  # create model\n            if pretrained:\n                ckpt = torch.load(attempt_download(path), map_location=device)  # load\n                csd = ckpt[\"model\"].float().state_dict()  # checkpoint state_dict as FP32\n                csd = intersect_dicts(csd, model.state_dict(), exclude=[\"anchors\"])  # intersect\n                model.load_state_dict(csd, strict=False)  # load\n                if len(ckpt[\"model\"].names) == classes:\n                    model.names = ckpt[\"model\"].names  # set class names attribute\n        if not verbose:\n            LOGGER.setLevel(logging.INFO)  # reset to default\n        return model.to(device)\n\n    except Exception as e:\n        help_url = \"https://docs.ultralytics.com/yolov5/tutorials/pytorch_hub_model_loading\"\n        s = f\"{e}. Cache may be out of date, try `force_reload=True` or see {help_url} for help.\"\n        raise Exception(s) from e\n\n\ndef custom(path=\"path/to/model.pt\", autoshape=True, _verbose=True, device=None):\n    \"\"\"\n    Loads a custom or local YOLOv3 model from a specified path, with options for autoshaping and device assignment.\n\n    Args:\n        path (str): Path to the model file. Supports both local and URL paths.\n        autoshape (bool): If True, applies the YOLOv3 `.autoshape()` wrapper to allow for various input formats. Default is True.\n        _verbose (bool): If True, outputs detailed information. Otherwise, limits verbosity. Default is True.\n        device (str | torch.device | None): Device to load the model on. Default is None, which uses the available GPU if\n            possible.\n\n    Returns:\n        (torch.nn.Module): The loaded YOLOv3 model, either with or without autoshaping applied.\n\n    Raises:\n        Exception: If the model loading fails due to invalid path or incompatible model state, with helpful suggestions\n            including a reference to the troubleshooting page:\n            https://docs.ultralytics.com/yolov5/tutorials/pytorch_hub_model_loading\n\n    Examples:\n        ```python\n        import torch\n        model = torch.hub.load('ultralytics/yolov5', 'custom', 'path/to/best.pt')\n        model = torch.hub.load('ultralytics/yolov5', 'custom', 'path/to/best.pt', autoshape=False, device='cpu')\n        ```\n    \"\"\"\n    return _create(path, autoshape=autoshape, verbose=_verbose, device=device)\n\n\ndef yolov5n(pretrained=True, channels=3, classes=80, autoshape=True, _verbose=True, device=None):\n    \"\"\"\n    Instantiates a YOLOv5n model with optional pretrained weights, configurable input channels, number of classes,\n    autoshaping, and device selection.\n\n    Args:\n        pretrained (bool): If True, loads pretrained weights into the model. Defaults to True.\n        channels (int): Number of input channels. Defaults to 3.\n        classes (int): Number of detection classes. Defaults to 80.\n        autoshape (bool): If True, applies YOLOv5 .autoshape() wrapper to the model for various input formats like file/URI/PIL/cv2/np\n            and adds non-maximum suppression (NMS). Defaults to True.\n        _verbose (bool): If True, prints detailed information to the screen. Defaults to True.\n        device (str | torch.device | None): Device to use for model computations (e.g., 'cpu', 'cuda'). If None, the best\n            available device is automatically selected. Defaults to None.\n\n    Returns:\n        torch.nn.Module: The instantiated YOLOv5n model.\n\n    Example:\n        ```python\n        import torch\n        model = torch.hub.load('ultralytics/yolov5', 'yolov5n')  # using official model\n        model = torch.hub.load('ultralytics/yolov5:master', 'yolov5n')  # from specific branch\n        model = torch.hub.load('ultralytics/yolov5', 'custom', 'yolov5n.pt')  # using custom/local model\n        model = torch.hub.load('.', 'custom', 'yolov5n.pt', source='local')  # from local repository\n        ```\n\n    Note:\n        PyTorch Hub models can be explored at https://pytorch.org/hub/ultralytics_yolov5. This allows easy model loading and usage.\n    \"\"\"\n    return _create(\"yolov5n\", pretrained, channels, classes, autoshape, _verbose, device)\n\n\ndef yolov5s(pretrained=True, channels=3, classes=80, autoshape=True, _verbose=True, device=None):\n    \"\"\"\n    Load the YOLOv5s model with customizable options for pretrained weights, input channels, number of classes,\n    autoshape functionality, and device selection.\n\n    Args:\n        pretrained (bool, optional): If True, loads model with pretrained weights. Default is True.\n        channels (int, optional): Specifies the number of input channels. Default is 3.\n        classes (int, optional): Defines the number of model classes. Default is 80.\n        autoshape (bool, optional): Applies YOLOv5 .autoshape() wrapper to the model for enhanced usability. Default is True.\n        _verbose (bool, optional): If True, prints detailed information during model loading. Default is True.\n        device (str | torch.device | None, optional): Specifies the device to load the model on. Accepts 'cpu', 'cuda', or\n            torch.device. Default is None, which automatically selects the best available option.\n\n    Returns:\n        torch.nn.Module: The initialized YOLOv5s model loaded with the specified options.\n\n    Example:\n        ```python\n        import torch\n        model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)\n        ```\n\n    For more information, refer to [PyTorch Hub models](https://pytorch.org/hub/ultralytics_yolov5).\n    \"\"\"\n    return _create(\"yolov5s\", pretrained, channels, classes, autoshape, _verbose, device)\n\n\ndef yolov5m(pretrained=True, channels=3, classes=80, autoshape=True, _verbose=True, device=None):\n    \"\"\"\n    Loads the YOLOv5m model with options for pretrained weights, input channels, number of classes, autoshape\n    functionality, and device selection.\n\n    Args:\n        pretrained (bool, optional): If True, loads pretrained weights into the model. Default is True.\n        channels (int, optional): Number of input channels for the model. Default is 3.\n        classes (int, optional): Number of model classes. Default is 80.\n        autoshape (bool, optional): If True, applies the YOLOv5 .autoshape() wrapper for handling multiple input types and NMS.\n            Default is True.\n        _verbose (bool, optional): If True, prints detailed information during model loading. Default is True.\n        device (str | torch.device | None, optional): Device for model computations (e.g., 'cpu', 'cuda'). Automatically\n            selects the best available device if None. Default is None.\n\n    Returns:\n        torch.nn.Module: The instantiated YOLOv5m model.\n\n    Example:\n        ```python\n        import torch\n        model = torch.hub.load('ultralytics/yolov5', 'yolov5m', pretrained=True)\n        ```\n    \"\"\"\n    return _create(\"yolov5m\", pretrained, channels, classes, autoshape, _verbose, device)\n\n\ndef yolov5l(pretrained=True, channels=3, classes=80, autoshape=True, _verbose=True, device=None):\n    \"\"\"\n    Load the YOLOv5l model with customizable options for pretrained weights, input channels, number of classes,\n    autoshape functionality, and device selection.\n\n    Args:\n        pretrained (bool, optional): If True, load model with pretrained weights. Default is True.\n        channels (int, optional): Specifies the number of input channels. Default is 3.\n        classes (int, optional): Defines the number of model classes. Default is 80.\n        autoshape (bool, optional): Applies the YOLOv5 .autoshape() wrapper to the model for enhanced usability. Default is\n            True.\n        _verbose (bool, optional): If True, prints detailed information during model loading. Default is True.\n        device (str | torch.device | None, optional): Specifies the device to load the model on. Accepts 'cpu', 'cuda', or\n            torch.device. Default is None, which automatically selects the best available option.\n\n    Returns:\n        torch.nn.Module: The initialized YOLOv5l model loaded with the specified options.\n\n    Example:\n        ```python\n        import torch\n        model = torch.hub.load('ultralytics/yolov5', 'yolov5l', pretrained=True)\n        ```\n\n    For more information, refer to [PyTorch Hub models](https://pytorch.org/hub/ultralytics_yolov5).\n    \"\"\"\n    return _create(\"yolov5l\", pretrained, channels, classes, autoshape, _verbose, device)\n\n\ndef yolov5x(pretrained=True, channels=3, classes=80, autoshape=True, _verbose=True, device=None):\n    \"\"\"\n    Load the YOLOv5x model with options for pretrained weights, number of input channels, classes, autoshaping, and\n    device selection.\n\n    Args:\n        pretrained (bool, optional): If True, loads the model with pretrained weights. Defaults to True.\n        channels (int, optional): Number of input channels. Defaults to 3.\n        classes (int, optional): Number of detection classes. Defaults to 80.\n        autoshape (bool, optional): If True, applies the YOLOv5 .autoshape() wrapper, enabling various input formats and\n            non-maximum suppression (NMS). Defaults to True.\n        _verbose (bool, optional): If True, prints detailed information during model loading. Defaults to True.\n        device (str | torch.device | None, optional): Device to use for model parameters (e.g., 'cpu', 'cuda'). Defaults to\n            None, selecting the best available device automatically.\n\n    Returns:\n        torch.nn.Module: The YOLOv5x model loaded with the specified configuration.\n\n    Examples:\n        ```python\n        import torch\n\n        # Load YOLOv5x model with default settings\n        model = torch.hub.load('ultralytics/yolov5', 'yolov5x')\n\n        # Load YOLOv5x model with custom device\n        model = torch.hub.load('ultralytics/yolov5', 'yolov5x', device='cuda:0')\n        ```\n\n    For more details, refer to [PyTorch Hub models](https://pytorch.org/hub/ultralytics_yolov5).\n    \"\"\"\n    return _create(\"yolov5x\", pretrained, channels, classes, autoshape, _verbose, device)\n\n\ndef yolov5n6(pretrained=True, channels=3, classes=80, autoshape=True, _verbose=True, device=None):\n    \"\"\"\n    Loads the YOLOv5n6 model with options for pretrained weights, input channels, classes, autoshaping, verbosity, and\n    device assignment.\n\n    Args:\n        pretrained (bool, optional): If True, loads pretrained weights into the model. Default is True.\n        channels (int, optional): Number of input channels. Default is 3.\n        classes (int, optional): Number of model classes. Default is 80.\n        autoshape (bool, optional): If True, applies the YOLOv3 .autoshape() wrapper to the model. Default is True.\n        _verbose (bool, optional): If True, prints all information to the screen. Default is True.\n        device (str | torch.device | None, optional): Device to use for model parameters, e.g., 'cpu', '0', or torch.device.\n            Default is None.\n\n    Returns:\n        torch.nn.Module: YOLOv5n6 model loaded on the specified device and configured as per the provided options.\n\n    Notes:\n        For more information on PyTorch Hub models, refer to: https://pytorch.org/hub/ultralytics_yolov5\n\n    Example:\n        ```python\n        model = yolov5n6(pretrained=True, channels=3, classes=80, autoshape=True, _verbose=True, device='cuda')\n        ```\n    \"\"\"\n    return _create(\"yolov5n6\", pretrained, channels, classes, autoshape, _verbose, device)\n\n\ndef yolov5s6(pretrained=True, channels=3, classes=80, autoshape=True, _verbose=True, device=None):\n    \"\"\"\n    Loads the YOLOv5s6 model with options for weights, channels, classes, autoshaping, and device selection.\n\n    Args:\n        pretrained (bool, optional): If True, loads pretrained weights into the model. Defaults to True.\n        channels (int, optional): Number of input channels. Defaults to 3.\n        classes (int, optional): Number of model classes. Defaults to 80.\n        autoshape (bool, optional): Apply YOLOv5 .autoshape() wrapper to the model. Defaults to True.\n        _verbose (bool, optional): If True, prints detailed information to the screen. Defaults to True.\n        device (str | torch.device | None, optional): Device to use for model parameters, e.g., 'cpu', 'cuda:0'.\n            If None, it will select the appropriate device automatically. Defaults to None.\n\n    Returns:\n        torch.nn.Module: The YOLOv5s6 model, ready for inference or further training.\n\n    Example:\n        ```python\n        import torch\n        model = torch.hub.load('ultralytics/yolov5', 'yolov5s6', pretrained=True, channels=3, classes=80)\n        model.eval()  # Set the model to evaluation mode\n        ```\n\n    For more details, see the official documentation at:\n    https://github.com/ultralytics/yolov5\n    \"\"\"\n    return _create(\"yolov5s6\", pretrained, channels, classes, autoshape, _verbose, device)\n\n\ndef yolov5m6(pretrained=True, channels=3, classes=80, autoshape=True, _verbose=True, device=None):\n    \"\"\"\n    Loads YOLOv5m6 model with options for pretrained weights, input channels, number of classes, autoshaping, and device\n    selection.\n\n    Args:\n        pretrained (bool): Whether to load pretrained weights into the model. Default is True.\n        channels (int): Number of input channels. Default is 3.\n        classes (int): Number of model classes. Default is 80.\n        autoshape (bool): Whether to apply YOLOv5 .autoshape() wrapper to the model. Default is True.\n        _verbose (bool): Whether to print all information to the screen. Default is True.\n        device (str | torch.device | None): Device to use for model parameters, e.g., 'cpu', 'cuda', 'mps', or torch device.\n            Default is None.\n\n    Returns:\n        YOLOv5m6 model (torch.nn.Module): The instantiated YOLOv5m6 model with specified options.\n\n    Example:\n        ```python\n        import torch\n\n        # Load YOLOv5m6 model with default settings\n        model = torch.hub.load('ultralytics/yolov5', 'yolov5m6')\n\n        # Load custom YOLOv5m6 model from a local path with specific options\n        model = torch.hub.load('.', 'yolov5m6', pretrained=False, channels=1, classes=10, device='cuda')\n        ```\n\n    Notes:\n        For more detailed documentation, visit https://github.com/ultralytics/yolov5\n    \"\"\"\n    return _create(\"yolov5m6\", pretrained, channels, classes, autoshape, _verbose, device)\n\n\ndef yolov5l6(pretrained=True, channels=3, classes=80, autoshape=True, _verbose=True, device=None):\n    \"\"\"\n    Loads the YOLOv5l6 model with options for pretrained weights, input channels, the number of classes, autoshaping,\n    and device selection.\n\n    Args:\n        pretrained (bool, optional): If True, loads pretrained weights into the model. Default is True.\n        channels (int, optional): Number of input channels. Default is 3.\n        classes (int, optional): Number of model classes. Default is 80.\n        autoshape (bool, optional): If True, applies the YOLOv5 .autoshape() wrapper to the model for automatic shape\n            inference. Default is True.\n        _verbose (bool, optional): If True, prints all information to the screen. Default is True.\n        device (str | torch.device | None, optional): Device to use for the model parameters, e.g., 'cpu', 'cuda', or\n            a specific GPU like 'cuda:0'. Default is None, which means the best available device will be selected\n            automatically.\n\n    Returns:\n        yolov5.models.yolo.DetectionModel: YOLOv5l6 model initialized with defined custom configurations.\n\n    Examples:\n        ```python\n        import torch\n        model = torch.hub.load('ultralytics/yolov5', 'yolov5l6')  # Load YOLOv5l6 model\n        ```\n\n    Note:\n        For more details, visit the [Ultralytics YOLOv5 GitHub repository](https://github.com/ultralytics/yolov5).\n    \"\"\"\n    return _create(\"yolov5l6\", pretrained, channels, classes, autoshape, _verbose, device)\n\n\ndef yolov5x6(pretrained=True, channels=3, classes=80, autoshape=True, _verbose=True, device=None):\n    \"\"\"\n    Loads the YOLOv5x6 model, allowing customization for pretrained weights, input channels, and model classes.\n\n    Args:\n        pretrained (bool): If True, loads the model with pretrained weights. Default is True.\n        channels (int): Number of input channels. Default is 3.\n        classes (int): Number of output classes for the model. Default is 80.\n        autoshape (bool): If True, applies the .autoshape() wrapper for inference on diverse input formats. Default is True.\n        _verbose (bool): If True, prints detailed information during model loading. Default is True.\n        device (str | torch.device | None): Specifies the device to load the model on ('cpu', 'cuda', etc.). Default is None,\n            which uses the best available device.\n\n    Returns:\n        torch.nn.Module: The YOLOv5x6 model with the specified configurations.\n\n    Example:\n        ```python\n        from ultralytics import yolov5x6\n\n        # Load the model with default settings\n        model = yolov5x6()\n\n        # Load the model with custom configurations\n        model = yolov5x6(pretrained=False, channels=1, classes=10, autoshape=False, device='cuda')\n        ```\n\n    Notes:\n        For more information, refer to the YOLOv5 repository: https://github.com/ultralytics/yolov5\n    \"\"\"\n    return _create(\"yolov5x6\", pretrained, channels, classes, autoshape, _verbose, device)\n\n\nif __name__ == \"__main__\":\n    import argparse\n    from pathlib import Path\n\n    import numpy as np\n    from PIL import Image\n\n    from utils.general import cv2, print_args\n\n    # Argparser\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--model\", type=str, default=\"yolov5s\", help=\"model name\")\n    opt = parser.parse_args()\n    print_args(vars(opt))\n\n    # Model\n    model = _create(name=opt.model, pretrained=True, channels=3, classes=80, autoshape=True, verbose=True)\n    # model = custom(path='path/to/model.pt')  # custom\n\n    # Images\n    imgs = [\n        \"data/images/zidane.jpg\",  # filename\n        Path(\"data/images/zidane.jpg\"),  # Path\n        \"https://ultralytics.com/images/zidane.jpg\",  # URI\n        cv2.imread(\"data/images/bus.jpg\")[:, :, ::-1],  # OpenCV\n        Image.open(\"data/images/bus.jpg\"),  # PIL\n        np.zeros((320, 640, 3)),\n    ]  # numpy\n\n    # Inference\n    results = model(imgs, size=320)  # batched inference\n\n    # Results\n    results.print()\n    results.save()\n"
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 5.1826171875,
          "content": "# Ultralytics YOLOv3 🚀, AGPL-3.0 license\n\n# Overview:\n# This pyproject.toml file manages the build, packaging, and distribution of the Ultralytics library.\n# It defines essential project metadata, dependencies, and settings used to develop and deploy the library.\n\n# Key Sections:\n# - [build-system]: Specifies the build requirements and backend (e.g., setuptools, wheel).\n# - [project]: Includes details like name, version, description, authors, dependencies and more.\n# - [project.optional-dependencies]: Provides additional, optional packages for extended features.\n# - [tool.*]: Configures settings for various tools (pytest, yapf, etc.) used in the project.\n\n# Installation:\n# The Ultralytics library can be installed using the command: 'pip install ultralytics'\n# For development purposes, you can install the package in editable mode with: 'pip install -e .'\n# This approach allows for real-time code modifications without the need for re-installation.\n\n# Documentation:\n# For comprehensive documentation and usage instructions, visit: https://docs.ultralytics.com\n\n[build-system]\nrequires = [\"setuptools>=43.0.0\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n# Project settings -----------------------------------------------------------------------------------------------------\n[project]\nname = \"YOLOv3\"\ndescription = \"Ultralytics YOLOv3 for object detection.\"\nreadme = \"README.md\"\nrequires-python = \">=3.8\"\nlicense = { \"text\" = \"AGPL-3.0\" }\nkeywords = [\"machine-learning\", \"deep-learning\", \"computer-vision\", \"ML\", \"DL\", \"AI\", \"YOLO\", \"YOLOv3\", \"YOLOv5\", \"YOLOv8\", \"HUB\", \"Ultralytics\"]\nauthors = [\n    { name = \"Glenn Jocher\" },\n    { name = \"Ayush Chaurasia\" },\n    { name = \"Jing Qiu\" }\n]\nmaintainers = [\n    { name = \"Glenn Jocher\" },\n    { name = \"Ayush Chaurasia\" },\n    { name = \"Jing Qiu\" }\n]\nclassifiers = [\n    \"Development Status :: 4 - Beta\",\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: Education\",\n    \"Intended Audience :: Science/Research\",\n    \"License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Topic :: Software Development\",\n    \"Topic :: Scientific/Engineering\",\n    \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n    \"Topic :: Scientific/Engineering :: Image Recognition\",\n    \"Operating System :: POSIX :: Linux\",\n    \"Operating System :: MacOS\",\n    \"Operating System :: Microsoft :: Windows\",\n]\n\n# Required dependencies ------------------------------------------------------------------------------------------------\ndependencies = [\n    \"matplotlib>=3.3.0\",\n    \"numpy>=1.22.2\",\n    \"opencv-python>=4.6.0\",\n    \"pillow>=7.1.2\",\n    \"pyyaml>=5.3.1\",\n    \"requests>=2.23.0\",\n    \"scipy>=1.4.1\",\n    \"torch>=1.8.0\",\n    \"torchvision>=0.9.0\",\n    \"tqdm>=4.64.0\", # progress bars\n    \"psutil\", # system utilization\n    \"py-cpuinfo\", # display CPU info\n    \"thop>=0.1.1\", # FLOPs computation\n    \"pandas>=1.1.4\",\n    \"seaborn>=0.11.0\", # plotting\n    \"ultralytics>=8.0.232\"\n]\n\n# Optional dependencies ------------------------------------------------------------------------------------------------\n[project.optional-dependencies]\ndev = [\n    \"ipython\",\n    \"check-manifest\",\n    \"pre-commit\",\n    \"pytest\",\n    \"pytest-cov\",\n    \"coverage[toml]\",\n    \"mkdocs-material\",\n    \"mkdocstrings[python]\",\n    \"mkdocs-redirects\", # for 301 redirects\n    \"mkdocs-ultralytics-plugin>=0.0.34\", # for meta descriptions and images, dates and authors\n]\nexport = [\n    \"onnx>=1.12.0\", # ONNX export\n    \"coremltools>=7.0; platform_system != 'Windows'\", # CoreML only supported on macOS and Linux\n    \"openvino-dev>=2023.0\", # OpenVINO export\n    \"tensorflow>=2.0.0\", # TF bug https://github.com/ultralytics/ultralytics/issues/5161\n    \"tensorflowjs>=3.9.0\", # TF.js export, automatically installs tensorflow\n]\n# tensorflow>=2.4.1,<=2.13.1  # TF exports (-cpu, -aarch64, -macos)\n# tflite-support  # for TFLite model metadata\n# scikit-learn==0.19.2  # CoreML quantization\n# nvidia-pyindex  # TensorRT export\n# nvidia-tensorrt  # TensorRT export\nlogging = [\n    \"comet\", # https://docs.ultralytics.com/integrations/comet/\n    \"tensorboard>=2.13.0\",\n    \"dvclive>=2.12.0\",\n]\nextra = [\n    \"ipython\", # interactive notebook\n    \"albumentations>=1.0.3\", # training augmentations\n    \"pycocotools>=2.0.6\", # COCO mAP\n]\n\n[project.urls]\n\"Bug Reports\" = \"https://github.com/ultralytics/yolov3/issues\"\n\"Funding\" = \"https://ultralytics.com\"\n\"Source\" = \"https://github.com/ultralytics/yolov3/\"\n\n# Tools settings -------------------------------------------------------------------------------------------------------\n[tool.pytest]\nnorecursedirs = [\".git\", \"dist\", \"build\"]\naddopts = \"--doctest-modules --durations=30 --color=yes\"\n\n[tool.isort]\nline_length = 120\nmulti_line_output = 0\n\n[tool.ruff]\nline-length = 120\n\n[tool.docformatter]\nwrap-summaries = 120\nwrap-descriptions = 120\nin-place = true\npre-summary-newline = true\nclose-quotes-on-newline = true\n\n[tool.codespell]\nignore-words-list = \"crate,nd,strack,dota,ane,segway,fo,gool,winn,commend\"\nskip = '*.csv,*venv*,docs/??/,docs/mkdocs_??.yml'\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 1.5517578125,
          "content": "# YOLOv3 requirements\n# Usage: pip install -r requirements.txt\n\n# Base ------------------------------------------------------------------------\ngitpython>=3.1.30\nmatplotlib>=3.3\nnumpy>=1.23.5\nopencv-python>=4.1.1\nPillow>=10.3.0\npsutil  # system resources\nPyYAML>=5.3.1\nrequests>=2.32.2\nscipy>=1.4.1\nthop>=0.1.1  # FLOPs computation\ntorch>=1.8.0  # see https://pytorch.org/get-started/locally (recommended)\ntorchvision>=0.9.0\ntqdm>=4.66.3\nultralytics>=8.2.34  # https://ultralytics.com\n# protobuf<=3.20.1  # https://github.com/ultralytics/yolov5/issues/8012\n\n# Logging ---------------------------------------------------------------------\n# tensorboard>=2.4.1\n# clearml>=1.2.0\n# comet\n\n# Plotting --------------------------------------------------------------------\npandas>=1.1.4\nseaborn>=0.11.0\n\n# Export ----------------------------------------------------------------------\n# coremltools>=6.0  # CoreML export\n# onnx>=1.10.0  # ONNX export\n# onnx-simplifier>=0.4.1  # ONNX simplifier\n# nvidia-pyindex  # TensorRT export\n# nvidia-tensorrt  # TensorRT export\n# scikit-learn<=1.1.2  # CoreML quantization\n# tensorflow>=2.4.0  # TF exports (-cpu, -aarch64, -macos)\n# tensorflowjs>=3.9.0  # TF.js export\n# openvino-dev>=2023.0  # OpenVINO export\n\n# Deploy ----------------------------------------------------------------------\nsetuptools>=70.0.0 # Snyk vulnerability fix\n# tritonclient[all]~=2.24.0\n\n# Extras ----------------------------------------------------------------------\n# ipython  # interactive notebook\n# mss  # screenshots\n# albumentations>=1.0.3\n# pycocotools>=2.0.6  # COCO mAP\n"
        },
        {
          "name": "segment",
          "type": "tree",
          "content": null
        },
        {
          "name": "train.py",
          "type": "blob",
          "size": 39.29296875,
          "content": "# Ultralytics YOLOv3 🚀, AGPL-3.0 license\n\"\"\"\nTrain a YOLOv3 model on a custom dataset. Models and datasets download automatically from the latest YOLOv3 release.\n\nUsage - Single-GPU training:\n    $ python train.py --data coco128.yaml --weights yolov5s.pt --img 640  # from pretrained (recommended)\n    $ python train.py --data coco128.yaml --weights '' --cfg yolov5s.yaml --img 640  # from scratch\n\nUsage - Multi-GPU DDP training:\n    $ python -m torch.distributed.run --nproc_per_node 4 --master_port 1 train.py --data coco128.yaml --weights yolov5s.pt --img 640 --device 0,1,2,3\n\nModels:     https://github.com/ultralytics/yolov5/tree/master/models\nDatasets:   https://github.com/ultralytics/yolov5/tree/master/data\nTutorial:   https://docs.ultralytics.com/yolov5/tutorials/train_custom_data\n\"\"\"\n\nimport argparse\nimport math\nimport os\nimport random\nimport subprocess\nimport sys\nimport time\nfrom copy import deepcopy\nfrom datetime import datetime\nfrom pathlib import Path\n\ntry:\n    import comet_ml  # must be imported before torch (if installed)\nexcept ImportError:\n    comet_ml = None\n\nimport numpy as np\nimport torch\nimport torch.distributed as dist\nimport torch.nn as nn\nimport yaml\nfrom torch.optim import lr_scheduler\nfrom tqdm import tqdm\n\nFILE = Path(__file__).resolve()\nROOT = FILE.parents[0]  # YOLOv3 root directory\nif str(ROOT) not in sys.path:\n    sys.path.append(str(ROOT))  # add ROOT to PATH\nROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # relative\n\nimport val as validate  # for end-of-epoch mAP\nfrom models.experimental import attempt_load\nfrom models.yolo import Model\nfrom utils.autoanchor import check_anchors\nfrom utils.autobatch import check_train_batch_size\nfrom utils.callbacks import Callbacks\nfrom utils.dataloaders import create_dataloader\nfrom utils.downloads import attempt_download, is_url\nfrom utils.general import (\n    LOGGER,\n    TQDM_BAR_FORMAT,\n    check_amp,\n    check_dataset,\n    check_file,\n    check_git_info,\n    check_git_status,\n    check_img_size,\n    check_requirements,\n    check_suffix,\n    check_yaml,\n    colorstr,\n    get_latest_run,\n    increment_path,\n    init_seeds,\n    intersect_dicts,\n    labels_to_class_weights,\n    labels_to_image_weights,\n    methods,\n    one_cycle,\n    print_args,\n    print_mutation,\n    strip_optimizer,\n    yaml_save,\n)\nfrom utils.loggers import Loggers\nfrom utils.loggers.comet.comet_utils import check_comet_resume\nfrom utils.loss import ComputeLoss\nfrom utils.metrics import fitness\nfrom utils.plots import plot_evolve\nfrom utils.torch_utils import (\n    EarlyStopping,\n    ModelEMA,\n    de_parallel,\n    select_device,\n    smart_DDP,\n    smart_optimizer,\n    smart_resume,\n    torch_distributed_zero_first,\n)\n\nLOCAL_RANK = int(os.getenv(\"LOCAL_RANK\", -1))  # https://pytorch.org/docs/stable/elastic/run.html\nRANK = int(os.getenv(\"RANK\", -1))\nWORLD_SIZE = int(os.getenv(\"WORLD_SIZE\", 1))\nGIT_INFO = check_git_info()\n\n\ndef train(hyp, opt, device, callbacks):  # hyp is path/to/hyp.yaml or hyp dictionary\n    \"\"\"\n    Train a YOLOv3 model on a custom dataset and manage the training process.\n\n    Args:\n        hyp (str | dict): Path to hyperparameters yaml file or hyperparameters dictionary.\n        opt (argparse.Namespace): Parsed command line arguments containing training options.\n        device (torch.device): Device to load and train the model on.\n        callbacks (Callbacks): Callbacks to handle various stages of the training lifecycle.\n\n    Returns:\n        None\n\n    Usage - Single-GPU training:\n        $ python train.py --data coco128.yaml --weights yolov5s.pt --img 640  # from pretrained (recommended)\n        $ python train.py --data coco128.yaml --weights '' --cfg yolov5s.yaml --img 640  # from scratch\n\n    Usage - Multi-GPU DDP training:\n        $ python -m torch.distributed.run --nproc_per_node 4 --master_port 1 train.py --data coco128.yaml --weights\n            yolov5s.pt --img 640 --device 0,1,2,3\n\n    Models: https://github.com/ultralytics/yolov5/tree/master/models\n    Datasets: https://github.com/ultralytics/yolov5/tree/master/data\n    Tutorial: https://docs.ultralytics.com/yolov5/tutorials/train_custom_data\n\n    Examples:\n        ```python\n        from ultralytics import train\n        import argparse\n        import torch\n        from utils.callbacks import Callbacks\n\n        # Example usage\n        args = argparse.Namespace(\n            data='coco128.yaml',\n            weights='yolov5s.pt',\n            cfg='yolov5s.yaml',\n            img_size=640,\n            epochs=50,\n            batch_size=16,\n            device='0'\n        )\n\n        device = torch.device(f'cuda:{args.device}' if torch.cuda.is_available() else 'cpu')\n        callbacks = Callbacks()\n\n        train(hyp='hyp.scratch.yaml', opt=args, device=device, callbacks=callbacks)\n        ```\n    \"\"\"\n    save_dir, epochs, batch_size, weights, single_cls, evolve, data, cfg, resume, noval, nosave, workers, freeze = (\n        Path(opt.save_dir),\n        opt.epochs,\n        opt.batch_size,\n        opt.weights,\n        opt.single_cls,\n        opt.evolve,\n        opt.data,\n        opt.cfg,\n        opt.resume,\n        opt.noval,\n        opt.nosave,\n        opt.workers,\n        opt.freeze,\n    )\n    callbacks.run(\"on_pretrain_routine_start\")\n\n    # Directories\n    w = save_dir / \"weights\"  # weights dir\n    (w.parent if evolve else w).mkdir(parents=True, exist_ok=True)  # make dir\n    last, best = w / \"last.pt\", w / \"best.pt\"\n\n    # Hyperparameters\n    if isinstance(hyp, str):\n        with open(hyp, errors=\"ignore\") as f:\n            hyp = yaml.safe_load(f)  # load hyps dict\n    LOGGER.info(colorstr(\"hyperparameters: \") + \", \".join(f\"{k}={v}\" for k, v in hyp.items()))\n    opt.hyp = hyp.copy()  # for saving hyps to checkpoints\n\n    # Save run settings\n    if not evolve:\n        yaml_save(save_dir / \"hyp.yaml\", hyp)\n        yaml_save(save_dir / \"opt.yaml\", vars(opt))\n\n    # Loggers\n    data_dict = None\n    if RANK in {-1, 0}:\n        loggers = Loggers(save_dir, weights, opt, hyp, LOGGER)  # loggers instance\n\n        # Register actions\n        for k in methods(loggers):\n            callbacks.register_action(k, callback=getattr(loggers, k))\n\n        # Process custom dataset artifact link\n        data_dict = loggers.remote_dataset\n        if resume:  # If resuming runs from remote artifact\n            weights, epochs, hyp, batch_size = opt.weights, opt.epochs, opt.hyp, opt.batch_size\n\n    # Config\n    plots = not evolve and not opt.noplots  # create plots\n    cuda = device.type != \"cpu\"\n    init_seeds(opt.seed + 1 + RANK, deterministic=True)\n    with torch_distributed_zero_first(LOCAL_RANK):\n        data_dict = data_dict or check_dataset(data)  # check if None\n    train_path, val_path = data_dict[\"train\"], data_dict[\"val\"]\n    nc = 1 if single_cls else int(data_dict[\"nc\"])  # number of classes\n    names = {0: \"item\"} if single_cls and len(data_dict[\"names\"]) != 1 else data_dict[\"names\"]  # class names\n    is_coco = isinstance(val_path, str) and val_path.endswith(\"coco/val2017.txt\")  # COCO dataset\n\n    # Model\n    check_suffix(weights, \".pt\")  # check weights\n    pretrained = weights.endswith(\".pt\")\n    if pretrained:\n        with torch_distributed_zero_first(LOCAL_RANK):\n            weights = attempt_download(weights)  # download if not found locally\n        ckpt = torch.load(weights, map_location=\"cpu\")  # load checkpoint to CPU to avoid CUDA memory leak\n        model = Model(cfg or ckpt[\"model\"].yaml, ch=3, nc=nc, anchors=hyp.get(\"anchors\")).to(device)  # create\n        exclude = [\"anchor\"] if (cfg or hyp.get(\"anchors\")) and not resume else []  # exclude keys\n        csd = ckpt[\"model\"].float().state_dict()  # checkpoint state_dict as FP32\n        csd = intersect_dicts(csd, model.state_dict(), exclude=exclude)  # intersect\n        model.load_state_dict(csd, strict=False)  # load\n        LOGGER.info(f\"Transferred {len(csd)}/{len(model.state_dict())} items from {weights}\")  # report\n    else:\n        model = Model(cfg, ch=3, nc=nc, anchors=hyp.get(\"anchors\")).to(device)  # create\n    amp = check_amp(model)  # check AMP\n\n    # Freeze\n    freeze = [f\"model.{x}.\" for x in (freeze if len(freeze) > 1 else range(freeze[0]))]  # layers to freeze\n    for k, v in model.named_parameters():\n        v.requires_grad = True  # train all layers\n        # v.register_hook(lambda x: torch.nan_to_num(x))  # NaN to 0 (commented for erratic training results)\n        if any(x in k for x in freeze):\n            LOGGER.info(f\"freezing {k}\")\n            v.requires_grad = False\n\n    # Image size\n    gs = max(int(model.stride.max()), 32)  # grid size (max stride)\n    imgsz = check_img_size(opt.imgsz, gs, floor=gs * 2)  # verify imgsz is gs-multiple\n\n    # Batch size\n    if RANK == -1 and batch_size == -1:  # single-GPU only, estimate best batch size\n        batch_size = check_train_batch_size(model, imgsz, amp)\n        loggers.on_params_update({\"batch_size\": batch_size})\n\n    # Optimizer\n    nbs = 64  # nominal batch size\n    accumulate = max(round(nbs / batch_size), 1)  # accumulate loss before optimizing\n    hyp[\"weight_decay\"] *= batch_size * accumulate / nbs  # scale weight_decay\n    optimizer = smart_optimizer(model, opt.optimizer, hyp[\"lr0\"], hyp[\"momentum\"], hyp[\"weight_decay\"])\n\n    # Scheduler\n    if opt.cos_lr:\n        lf = one_cycle(1, hyp[\"lrf\"], epochs)  # cosine 1->hyp['lrf']\n    else:\n\n        def lf(x):\n            \"\"\"Linear learning rate scheduler function with decay calculated by epoch proportion.\"\"\"\n            return (1 - x / epochs) * (1.0 - hyp[\"lrf\"]) + hyp[\"lrf\"]  # linear\n\n    scheduler = lr_scheduler.LambdaLR(optimizer, lr_lambda=lf)  # plot_lr_scheduler(optimizer, scheduler, epochs)\n\n    # EMA\n    ema = ModelEMA(model) if RANK in {-1, 0} else None\n\n    # Resume\n    best_fitness, start_epoch = 0.0, 0\n    if pretrained:\n        if resume:\n            best_fitness, start_epoch, epochs = smart_resume(ckpt, optimizer, ema, weights, epochs, resume)\n        del ckpt, csd\n\n    # DP mode\n    if cuda and RANK == -1 and torch.cuda.device_count() > 1:\n        LOGGER.warning(\n            \"WARNING ⚠️ DP not recommended, use torch.distributed.run for best DDP Multi-GPU results.\\n\"\n            \"See Multi-GPU Tutorial at https://docs.ultralytics.com/yolov5/tutorials/multi_gpu_training to get started.\"\n        )\n        model = torch.nn.DataParallel(model)\n\n    # SyncBatchNorm\n    if opt.sync_bn and cuda and RANK != -1:\n        model = torch.nn.SyncBatchNorm.convert_sync_batchnorm(model).to(device)\n        LOGGER.info(\"Using SyncBatchNorm()\")\n\n    # Trainloader\n    train_loader, dataset = create_dataloader(\n        train_path,\n        imgsz,\n        batch_size // WORLD_SIZE,\n        gs,\n        single_cls,\n        hyp=hyp,\n        augment=True,\n        cache=None if opt.cache == \"val\" else opt.cache,\n        rect=opt.rect,\n        rank=LOCAL_RANK,\n        workers=workers,\n        image_weights=opt.image_weights,\n        quad=opt.quad,\n        prefix=colorstr(\"train: \"),\n        shuffle=True,\n        seed=opt.seed,\n    )\n    labels = np.concatenate(dataset.labels, 0)\n    mlc = int(labels[:, 0].max())  # max label class\n    assert mlc < nc, f\"Label class {mlc} exceeds nc={nc} in {data}. Possible class labels are 0-{nc - 1}\"\n\n    # Process 0\n    if RANK in {-1, 0}:\n        val_loader = create_dataloader(\n            val_path,\n            imgsz,\n            batch_size // WORLD_SIZE * 2,\n            gs,\n            single_cls,\n            hyp=hyp,\n            cache=None if noval else opt.cache,\n            rect=True,\n            rank=-1,\n            workers=workers * 2,\n            pad=0.5,\n            prefix=colorstr(\"val: \"),\n        )[0]\n\n        if not resume:\n            if not opt.noautoanchor:\n                check_anchors(dataset, model=model, thr=hyp[\"anchor_t\"], imgsz=imgsz)  # run AutoAnchor\n            model.half().float()  # pre-reduce anchor precision\n\n        callbacks.run(\"on_pretrain_routine_end\", labels, names)\n\n    # DDP mode\n    if cuda and RANK != -1:\n        model = smart_DDP(model)\n\n    # Model attributes\n    nl = de_parallel(model).model[-1].nl  # number of detection layers (to scale hyps)\n    hyp[\"box\"] *= 3 / nl  # scale to layers\n    hyp[\"cls\"] *= nc / 80 * 3 / nl  # scale to classes and layers\n    hyp[\"obj\"] *= (imgsz / 640) ** 2 * 3 / nl  # scale to image size and layers\n    hyp[\"label_smoothing\"] = opt.label_smoothing\n    model.nc = nc  # attach number of classes to model\n    model.hyp = hyp  # attach hyperparameters to model\n    model.class_weights = labels_to_class_weights(dataset.labels, nc).to(device) * nc  # attach class weights\n    model.names = names\n\n    # Start training\n    t0 = time.time()\n    nb = len(train_loader)  # number of batches\n    nw = max(round(hyp[\"warmup_epochs\"] * nb), 100)  # number of warmup iterations, max(3 epochs, 100 iterations)\n    # nw = min(nw, (epochs - start_epoch) / 2 * nb)  # limit warmup to < 1/2 of training\n    last_opt_step = -1\n    maps = np.zeros(nc)  # mAP per class\n    results = (0, 0, 0, 0, 0, 0, 0)  # P, R, mAP@.5, mAP@.5-.95, val_loss(box, obj, cls)\n    scheduler.last_epoch = start_epoch - 1  # do not move\n    scaler = torch.cuda.amp.GradScaler(enabled=amp)\n    stopper, stop = EarlyStopping(patience=opt.patience), False\n    compute_loss = ComputeLoss(model)  # init loss class\n    callbacks.run(\"on_train_start\")\n    LOGGER.info(\n        f\"Image sizes {imgsz} train, {imgsz} val\\n\"\n        f\"Using {train_loader.num_workers * WORLD_SIZE} dataloader workers\\n\"\n        f\"Logging results to {colorstr('bold', save_dir)}\\n\"\n        f\"Starting training for {epochs} epochs...\"\n    )\n    for epoch in range(start_epoch, epochs):  # epoch ------------------------------------------------------------------\n        callbacks.run(\"on_train_epoch_start\")\n        model.train()\n\n        # Update image weights (optional, single-GPU only)\n        if opt.image_weights:\n            cw = model.class_weights.cpu().numpy() * (1 - maps) ** 2 / nc  # class weights\n            iw = labels_to_image_weights(dataset.labels, nc=nc, class_weights=cw)  # image weights\n            dataset.indices = random.choices(range(dataset.n), weights=iw, k=dataset.n)  # rand weighted idx\n\n        # Update mosaic border (optional)\n        # b = int(random.uniform(0.25 * imgsz, 0.75 * imgsz + gs) // gs * gs)\n        # dataset.mosaic_border = [b - imgsz, -b]  # height, width borders\n\n        mloss = torch.zeros(3, device=device)  # mean losses\n        if RANK != -1:\n            train_loader.sampler.set_epoch(epoch)\n        pbar = enumerate(train_loader)\n        LOGGER.info((\"\\n\" + \"%11s\" * 7) % (\"Epoch\", \"GPU_mem\", \"box_loss\", \"obj_loss\", \"cls_loss\", \"Instances\", \"Size\"))\n        if RANK in {-1, 0}:\n            pbar = tqdm(pbar, total=nb, bar_format=TQDM_BAR_FORMAT)  # progress bar\n        optimizer.zero_grad()\n        for i, (imgs, targets, paths, _) in pbar:  # batch -------------------------------------------------------------\n            callbacks.run(\"on_train_batch_start\")\n            ni = i + nb * epoch  # number integrated batches (since train start)\n            imgs = imgs.to(device, non_blocking=True).float() / 255  # uint8 to float32, 0-255 to 0.0-1.0\n\n            # Warmup\n            if ni <= nw:\n                xi = [0, nw]  # x interp\n                # compute_loss.gr = np.interp(ni, xi, [0.0, 1.0])  # iou loss ratio (obj_loss = 1.0 or iou)\n                accumulate = max(1, np.interp(ni, xi, [1, nbs / batch_size]).round())\n                for j, x in enumerate(optimizer.param_groups):\n                    # bias lr falls from 0.1 to lr0, all other lrs rise from 0.0 to lr0\n                    x[\"lr\"] = np.interp(ni, xi, [hyp[\"warmup_bias_lr\"] if j == 0 else 0.0, x[\"initial_lr\"] * lf(epoch)])\n                    if \"momentum\" in x:\n                        x[\"momentum\"] = np.interp(ni, xi, [hyp[\"warmup_momentum\"], hyp[\"momentum\"]])\n\n            # Multi-scale\n            if opt.multi_scale:\n                sz = random.randrange(int(imgsz * 0.5), int(imgsz * 1.5) + gs) // gs * gs  # size\n                sf = sz / max(imgs.shape[2:])  # scale factor\n                if sf != 1:\n                    ns = [math.ceil(x * sf / gs) * gs for x in imgs.shape[2:]]  # new shape (stretched to gs-multiple)\n                    imgs = nn.functional.interpolate(imgs, size=ns, mode=\"bilinear\", align_corners=False)\n\n            # Forward\n            with torch.cuda.amp.autocast(amp):\n                pred = model(imgs)  # forward\n                loss, loss_items = compute_loss(pred, targets.to(device))  # loss scaled by batch_size\n                if RANK != -1:\n                    loss *= WORLD_SIZE  # gradient averaged between devices in DDP mode\n                if opt.quad:\n                    loss *= 4.0\n\n            # Backward\n            scaler.scale(loss).backward()\n\n            # Optimize - https://pytorch.org/docs/master/notes/amp_examples.html\n            if ni - last_opt_step >= accumulate:\n                scaler.unscale_(optimizer)  # unscale gradients\n                torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=10.0)  # clip gradients\n                scaler.step(optimizer)  # optimizer.step\n                scaler.update()\n                optimizer.zero_grad()\n                if ema:\n                    ema.update(model)\n                last_opt_step = ni\n\n            # Log\n            if RANK in {-1, 0}:\n                mloss = (mloss * i + loss_items) / (i + 1)  # update mean losses\n                mem = f\"{torch.cuda.memory_reserved() / 1e9 if torch.cuda.is_available() else 0:.3g}G\"  # (GB)\n                pbar.set_description(\n                    (\"%11s\" * 2 + \"%11.4g\" * 5)\n                    % (f\"{epoch}/{epochs - 1}\", mem, *mloss, targets.shape[0], imgs.shape[-1])\n                )\n                callbacks.run(\"on_train_batch_end\", model, ni, imgs, targets, paths, list(mloss))\n                if callbacks.stop_training:\n                    return\n            # end batch ------------------------------------------------------------------------------------------------\n\n        # Scheduler\n        lr = [x[\"lr\"] for x in optimizer.param_groups]  # for loggers\n        scheduler.step()\n\n        if RANK in {-1, 0}:\n            # mAP\n            callbacks.run(\"on_train_epoch_end\", epoch=epoch)\n            ema.update_attr(model, include=[\"yaml\", \"nc\", \"hyp\", \"names\", \"stride\", \"class_weights\"])\n            final_epoch = (epoch + 1 == epochs) or stopper.possible_stop\n            if not noval or final_epoch:  # Calculate mAP\n                results, maps, _ = validate.run(\n                    data_dict,\n                    batch_size=batch_size // WORLD_SIZE * 2,\n                    imgsz=imgsz,\n                    half=amp,\n                    model=ema.ema,\n                    single_cls=single_cls,\n                    dataloader=val_loader,\n                    save_dir=save_dir,\n                    plots=False,\n                    callbacks=callbacks,\n                    compute_loss=compute_loss,\n                )\n\n            # Update best mAP\n            fi = fitness(np.array(results).reshape(1, -1))  # weighted combination of [P, R, mAP@.5, mAP@.5-.95]\n            stop = stopper(epoch=epoch, fitness=fi)  # early stop check\n            if fi > best_fitness:\n                best_fitness = fi\n            log_vals = list(mloss) + list(results) + lr\n            callbacks.run(\"on_fit_epoch_end\", log_vals, epoch, best_fitness, fi)\n\n            # Save model\n            if (not nosave) or (final_epoch and not evolve):  # if save\n                ckpt = {\n                    \"epoch\": epoch,\n                    \"best_fitness\": best_fitness,\n                    \"model\": deepcopy(de_parallel(model)).half(),\n                    \"ema\": deepcopy(ema.ema).half(),\n                    \"updates\": ema.updates,\n                    \"optimizer\": optimizer.state_dict(),\n                    \"opt\": vars(opt),\n                    \"git\": GIT_INFO,  # {remote, branch, commit} if a git repo\n                    \"date\": datetime.now().isoformat(),\n                }\n\n                # Save last, best and delete\n                torch.save(ckpt, last)\n                if best_fitness == fi:\n                    torch.save(ckpt, best)\n                if opt.save_period > 0 and epoch % opt.save_period == 0:\n                    torch.save(ckpt, w / f\"epoch{epoch}.pt\")\n                del ckpt\n                callbacks.run(\"on_model_save\", last, epoch, final_epoch, best_fitness, fi)\n\n        # EarlyStopping\n        if RANK != -1:  # if DDP training\n            broadcast_list = [stop if RANK == 0 else None]\n            dist.broadcast_object_list(broadcast_list, 0)  # broadcast 'stop' to all ranks\n            if RANK != 0:\n                stop = broadcast_list[0]\n        if stop:\n            break  # must break all DDP ranks\n\n        # end epoch ----------------------------------------------------------------------------------------------------\n    # end training -----------------------------------------------------------------------------------------------------\n    if RANK in {-1, 0}:\n        LOGGER.info(f\"\\n{epoch - start_epoch + 1} epochs completed in {(time.time() - t0) / 3600:.3f} hours.\")\n        for f in last, best:\n            if f.exists():\n                strip_optimizer(f)  # strip optimizers\n                if f is best:\n                    LOGGER.info(f\"\\nValidating {f}...\")\n                    results, _, _ = validate.run(\n                        data_dict,\n                        batch_size=batch_size // WORLD_SIZE * 2,\n                        imgsz=imgsz,\n                        model=attempt_load(f, device).half(),\n                        iou_thres=0.65 if is_coco else 0.60,  # best pycocotools at iou 0.65\n                        single_cls=single_cls,\n                        dataloader=val_loader,\n                        save_dir=save_dir,\n                        save_json=is_coco,\n                        verbose=True,\n                        plots=plots,\n                        callbacks=callbacks,\n                        compute_loss=compute_loss,\n                    )  # val best model with plots\n                    if is_coco:\n                        callbacks.run(\"on_fit_epoch_end\", list(mloss) + list(results) + lr, epoch, best_fitness, fi)\n\n        callbacks.run(\"on_train_end\", last, best, epoch, results)\n\n    torch.cuda.empty_cache()\n    return results\n\n\ndef parse_opt(known=False):\n    \"\"\"\n    Parse command line arguments for configuring the training of a YOLO model.\n\n    Args:\n        known (bool): Flag to parse known arguments only, defaults to False.\n\n    Returns:\n        (argparse.Namespace): Parsed command line arguments.\n\n    Examples:\n        ```python\n        options = parse_opt()\n        print(options.weights)\n        ```\n\n    Notes:\n        * The default weights path is 'yolov3-tiny.pt'.\n        * Set `known` to True for parsing only the known arguments, useful for partial arguments.\n\n    References:\n        * Models: https://github.com/ultralytics/yolov5/tree/master/models\n        * Datasets: https://github.com/ultralytics/yolov5/tree/master/data\n        * Training Tutorial: https://docs.ultralytics.com/yolov5/tutorials/train_custom_data\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--weights\", type=str, default=ROOT / \"yolov3-tiny.pt\", help=\"initial weights path\")\n    parser.add_argument(\"--cfg\", type=str, default=\"\", help=\"model.yaml path\")\n    parser.add_argument(\"--data\", type=str, default=ROOT / \"data/coco128.yaml\", help=\"dataset.yaml path\")\n    parser.add_argument(\"--hyp\", type=str, default=ROOT / \"data/hyps/hyp.scratch-low.yaml\", help=\"hyperparameters path\")\n    parser.add_argument(\"--epochs\", type=int, default=100, help=\"total training epochs\")\n    parser.add_argument(\"--batch-size\", type=int, default=16, help=\"total batch size for all GPUs, -1 for autobatch\")\n    parser.add_argument(\"--imgsz\", \"--img\", \"--img-size\", type=int, default=640, help=\"train, val image size (pixels)\")\n    parser.add_argument(\"--rect\", action=\"store_true\", help=\"rectangular training\")\n    parser.add_argument(\"--resume\", nargs=\"?\", const=True, default=False, help=\"resume most recent training\")\n    parser.add_argument(\"--nosave\", action=\"store_true\", help=\"only save final checkpoint\")\n    parser.add_argument(\"--noval\", action=\"store_true\", help=\"only validate final epoch\")\n    parser.add_argument(\"--noautoanchor\", action=\"store_true\", help=\"disable AutoAnchor\")\n    parser.add_argument(\"--noplots\", action=\"store_true\", help=\"save no plot files\")\n    parser.add_argument(\"--evolve\", type=int, nargs=\"?\", const=300, help=\"evolve hyperparameters for x generations\")\n    parser.add_argument(\"--bucket\", type=str, default=\"\", help=\"gsutil bucket\")\n    parser.add_argument(\"--cache\", type=str, nargs=\"?\", const=\"ram\", help=\"image --cache ram/disk\")\n    parser.add_argument(\"--image-weights\", action=\"store_true\", help=\"use weighted image selection for training\")\n    parser.add_argument(\"--device\", default=\"\", help=\"cuda device, i.e. 0 or 0,1,2,3 or cpu\")\n    parser.add_argument(\"--multi-scale\", action=\"store_true\", help=\"vary img-size +/- 50%%\")\n    parser.add_argument(\"--single-cls\", action=\"store_true\", help=\"train multi-class data as single-class\")\n    parser.add_argument(\"--optimizer\", type=str, choices=[\"SGD\", \"Adam\", \"AdamW\"], default=\"SGD\", help=\"optimizer\")\n    parser.add_argument(\"--sync-bn\", action=\"store_true\", help=\"use SyncBatchNorm, only available in DDP mode\")\n    parser.add_argument(\"--workers\", type=int, default=8, help=\"max dataloader workers (per RANK in DDP mode)\")\n    parser.add_argument(\"--project\", default=ROOT / \"runs/train\", help=\"save to project/name\")\n    parser.add_argument(\"--name\", default=\"exp\", help=\"save to project/name\")\n    parser.add_argument(\"--exist-ok\", action=\"store_true\", help=\"existing project/name ok, do not increment\")\n    parser.add_argument(\"--quad\", action=\"store_true\", help=\"quad dataloader\")\n    parser.add_argument(\"--cos-lr\", action=\"store_true\", help=\"cosine LR scheduler\")\n    parser.add_argument(\"--label-smoothing\", type=float, default=0.0, help=\"Label smoothing epsilon\")\n    parser.add_argument(\"--patience\", type=int, default=100, help=\"EarlyStopping patience (epochs without improvement)\")\n    parser.add_argument(\"--freeze\", nargs=\"+\", type=int, default=[0], help=\"Freeze layers: backbone=10, first3=0 1 2\")\n    parser.add_argument(\"--save-period\", type=int, default=-1, help=\"Save checkpoint every x epochs (disabled if < 1)\")\n    parser.add_argument(\"--seed\", type=int, default=0, help=\"Global training seed\")\n    parser.add_argument(\"--local_rank\", type=int, default=-1, help=\"Automatic DDP Multi-GPU argument, do not modify\")\n\n    # Logger arguments\n    parser.add_argument(\"--entity\", default=None, help=\"Entity\")\n    parser.add_argument(\"--upload_dataset\", nargs=\"?\", const=True, default=False, help='Upload data, \"val\" option')\n    parser.add_argument(\"--bbox_interval\", type=int, default=-1, help=\"Set bounding-box image logging interval\")\n    parser.add_argument(\"--artifact_alias\", type=str, default=\"latest\", help=\"Version of dataset artifact to use\")\n\n    return parser.parse_known_args()[0] if known else parser.parse_args()\n\n\ndef main(opt, callbacks=Callbacks()):\n    \"\"\"\n    Main training/evolution script handling model checks, DDP setup, training, and hyperparameter evolution.\n\n    Args:\n        opt (argparse.Namespace): Parsed command-line options.\n        callbacks (Callbacks, optional): Callback object for handling training events. Defaults to Callbacks().\n\n    Returns:\n        None\n\n    Raises:\n        AssertionError: If certain constraints are violated (e.g., when specific options are incompatible with DDP training).\n\n    Notes:\n       - For a tutorial on using Multi-GPU with DDP: https://docs.ultralytics.com/yolov5/tutorials/multi_gpu_training\n\n    Example:\n        Single-GPU training:\n        ```python\n        $ python train.py --data coco128.yaml --weights yolov5s.pt --img 640  # from pretrained (recommended)\n        $ python train.py --data coco128.yaml --weights '' --cfg yolov5s.yaml --img 640  # from scratch\n        ```\n\n        Multi-GPU DDP training:\n        ```python\n        $ python -m torch.distributed.run --nproc_per_node 4 --master_port 1 train.py --data coco128.yaml \\\n        --weights yolov5s.pt --img 640 --device 0,1,2,3\n        ```\n\n        Models: https://github.com/ultralytics/yolov5/tree/master/models\n        Datasets: https://github.com/ultralytics/yolov5/tree/master/data\n        Tutorial: https://docs.ultralytics.com/yolov5/tutorials/train_custom_data\n    \"\"\"\n    if RANK in {-1, 0}:\n        print_args(vars(opt))\n        check_git_status()\n        check_requirements(ROOT / \"requirements.txt\")\n\n    # Resume (from specified or most recent last.pt)\n    if opt.resume and not check_comet_resume(opt) and not opt.evolve:\n        last = Path(check_file(opt.resume) if isinstance(opt.resume, str) else get_latest_run())\n        opt_yaml = last.parent.parent / \"opt.yaml\"  # train options yaml\n        opt_data = opt.data  # original dataset\n        if opt_yaml.is_file():\n            with open(opt_yaml, errors=\"ignore\") as f:\n                d = yaml.safe_load(f)\n        else:\n            d = torch.load(last, map_location=\"cpu\")[\"opt\"]\n        opt = argparse.Namespace(**d)  # replace\n        opt.cfg, opt.weights, opt.resume = \"\", str(last), True  # reinstate\n        if is_url(opt_data):\n            opt.data = check_file(opt_data)  # avoid HUB resume auth timeout\n    else:\n        opt.data, opt.cfg, opt.hyp, opt.weights, opt.project = (\n            check_file(opt.data),\n            check_yaml(opt.cfg),\n            check_yaml(opt.hyp),\n            str(opt.weights),\n            str(opt.project),\n        )  # checks\n        assert len(opt.cfg) or len(opt.weights), \"either --cfg or --weights must be specified\"\n        if opt.evolve:\n            if opt.project == str(ROOT / \"runs/train\"):  # if default project name, rename to runs/evolve\n                opt.project = str(ROOT / \"runs/evolve\")\n            opt.exist_ok, opt.resume = opt.resume, False  # pass resume to exist_ok and disable resume\n        if opt.name == \"cfg\":\n            opt.name = Path(opt.cfg).stem  # use model.yaml as name\n        opt.save_dir = str(increment_path(Path(opt.project) / opt.name, exist_ok=opt.exist_ok))\n\n    # DDP mode\n    device = select_device(opt.device, batch_size=opt.batch_size)\n    if LOCAL_RANK != -1:\n        msg = \"is not compatible with YOLOv3 Multi-GPU DDP training\"\n        assert not opt.image_weights, f\"--image-weights {msg}\"\n        assert not opt.evolve, f\"--evolve {msg}\"\n        assert opt.batch_size != -1, f\"AutoBatch with --batch-size -1 {msg}, please pass a valid --batch-size\"\n        assert opt.batch_size % WORLD_SIZE == 0, f\"--batch-size {opt.batch_size} must be multiple of WORLD_SIZE\"\n        assert torch.cuda.device_count() > LOCAL_RANK, \"insufficient CUDA devices for DDP command\"\n        torch.cuda.set_device(LOCAL_RANK)\n        device = torch.device(\"cuda\", LOCAL_RANK)\n        dist.init_process_group(backend=\"nccl\" if dist.is_nccl_available() else \"gloo\")\n\n    # Train\n    if not opt.evolve:\n        train(opt.hyp, opt, device, callbacks)\n\n    # Evolve hyperparameters (optional)\n    else:\n        # Hyperparameter evolution metadata (mutation scale 0-1, lower_limit, upper_limit)\n        meta = {\n            \"lr0\": (1, 1e-5, 1e-1),  # initial learning rate (SGD=1E-2, Adam=1E-3)\n            \"lrf\": (1, 0.01, 1.0),  # final OneCycleLR learning rate (lr0 * lrf)\n            \"momentum\": (0.3, 0.6, 0.98),  # SGD momentum/Adam beta1\n            \"weight_decay\": (1, 0.0, 0.001),  # optimizer weight decay\n            \"warmup_epochs\": (1, 0.0, 5.0),  # warmup epochs (fractions ok)\n            \"warmup_momentum\": (1, 0.0, 0.95),  # warmup initial momentum\n            \"warmup_bias_lr\": (1, 0.0, 0.2),  # warmup initial bias lr\n            \"box\": (1, 0.02, 0.2),  # box loss gain\n            \"cls\": (1, 0.2, 4.0),  # cls loss gain\n            \"cls_pw\": (1, 0.5, 2.0),  # cls BCELoss positive_weight\n            \"obj\": (1, 0.2, 4.0),  # obj loss gain (scale with pixels)\n            \"obj_pw\": (1, 0.5, 2.0),  # obj BCELoss positive_weight\n            \"iou_t\": (0, 0.1, 0.7),  # IoU training threshold\n            \"anchor_t\": (1, 2.0, 8.0),  # anchor-multiple threshold\n            \"anchors\": (2, 2.0, 10.0),  # anchors per output grid (0 to ignore)\n            \"fl_gamma\": (0, 0.0, 2.0),  # focal loss gamma (efficientDet default gamma=1.5)\n            \"hsv_h\": (1, 0.0, 0.1),  # image HSV-Hue augmentation (fraction)\n            \"hsv_s\": (1, 0.0, 0.9),  # image HSV-Saturation augmentation (fraction)\n            \"hsv_v\": (1, 0.0, 0.9),  # image HSV-Value augmentation (fraction)\n            \"degrees\": (1, 0.0, 45.0),  # image rotation (+/- deg)\n            \"translate\": (1, 0.0, 0.9),  # image translation (+/- fraction)\n            \"scale\": (1, 0.0, 0.9),  # image scale (+/- gain)\n            \"shear\": (1, 0.0, 10.0),  # image shear (+/- deg)\n            \"perspective\": (0, 0.0, 0.001),  # image perspective (+/- fraction), range 0-0.001\n            \"flipud\": (1, 0.0, 1.0),  # image flip up-down (probability)\n            \"fliplr\": (0, 0.0, 1.0),  # image flip left-right (probability)\n            \"mosaic\": (1, 0.0, 1.0),  # image mixup (probability)\n            \"mixup\": (1, 0.0, 1.0),  # image mixup (probability)\n            \"copy_paste\": (1, 0.0, 1.0),\n        }  # segment copy-paste (probability)\n\n        with open(opt.hyp, errors=\"ignore\") as f:\n            hyp = yaml.safe_load(f)  # load hyps dict\n            if \"anchors\" not in hyp:  # anchors commented in hyp.yaml\n                hyp[\"anchors\"] = 3\n        if opt.noautoanchor:\n            del hyp[\"anchors\"], meta[\"anchors\"]\n        opt.noval, opt.nosave, save_dir = True, True, Path(opt.save_dir)  # only val/save final epoch\n        # ei = [isinstance(x, (int, float)) for x in hyp.values()]  # evolvable indices\n        evolve_yaml, evolve_csv = save_dir / \"hyp_evolve.yaml\", save_dir / \"evolve.csv\"\n        if opt.bucket:\n            # download evolve.csv if exists\n            subprocess.run(\n                [\n                    \"gsutil\",\n                    \"cp\",\n                    f\"gs://{opt.bucket}/evolve.csv\",\n                    str(evolve_csv),\n                ]\n            )\n\n        for _ in range(opt.evolve):  # generations to evolve\n            if evolve_csv.exists():  # if evolve.csv exists: select best hyps and mutate\n                # Select parent(s)\n                parent = \"single\"  # parent selection method: 'single' or 'weighted'\n                x = np.loadtxt(evolve_csv, ndmin=2, delimiter=\",\", skiprows=1)\n                n = min(5, len(x))  # number of previous results to consider\n                x = x[np.argsort(-fitness(x))][:n]  # top n mutations\n                w = fitness(x) - fitness(x).min() + 1e-6  # weights (sum > 0)\n                if parent == \"single\" or len(x) == 1:\n                    # x = x[random.randint(0, n - 1)]  # random selection\n                    x = x[random.choices(range(n), weights=w)[0]]  # weighted selection\n                elif parent == \"weighted\":\n                    x = (x * w.reshape(n, 1)).sum(0) / w.sum()  # weighted combination\n\n                # Mutate\n                mp, s = 0.8, 0.2  # mutation probability, sigma\n                npr = np.random\n                npr.seed(int(time.time()))\n                g = np.array([meta[k][0] for k in hyp.keys()])  # gains 0-1\n                ng = len(meta)\n                v = np.ones(ng)\n                while all(v == 1):  # mutate until a change occurs (prevent duplicates)\n                    v = (g * (npr.random(ng) < mp) * npr.randn(ng) * npr.random() * s + 1).clip(0.3, 3.0)\n                for i, k in enumerate(hyp.keys()):  # plt.hist(v.ravel(), 300)\n                    hyp[k] = float(x[i + 7] * v[i])  # mutate\n\n            # Constrain to limits\n            for k, v in meta.items():\n                hyp[k] = max(hyp[k], v[1])  # lower limit\n                hyp[k] = min(hyp[k], v[2])  # upper limit\n                hyp[k] = round(hyp[k], 5)  # significant digits\n\n            # Train mutation\n            results = train(hyp.copy(), opt, device, callbacks)\n            callbacks = Callbacks()\n            # Write mutation results\n            keys = (\n                \"metrics/precision\",\n                \"metrics/recall\",\n                \"metrics/mAP_0.5\",\n                \"metrics/mAP_0.5:0.95\",\n                \"val/box_loss\",\n                \"val/obj_loss\",\n                \"val/cls_loss\",\n            )\n            print_mutation(keys, results, hyp.copy(), save_dir, opt.bucket)\n\n        # Plot results\n        plot_evolve(evolve_csv)\n        LOGGER.info(\n            f\"Hyperparameter evolution finished {opt.evolve} generations\\n\"\n            f\"Results saved to {colorstr('bold', save_dir)}\\n\"\n            f\"Usage example: $ python train.py --hyp {evolve_yaml}\"\n        )\n\n\ndef run(**kwargs):\n    \"\"\"\n    Run the training process for a YOLOv3 model with the specified configurations.\n\n    Args:\n        data (str): Path to the dataset YAML file.\n        weights (str): Path to the pre-trained weights file or '' to train from scratch.\n        cfg (str): Path to the model configuration file.\n        hyp (str): Path to the hyperparameters YAML file.\n        epochs (int): Total number of training epochs.\n        batch_size (int): Total batch size across all GPUs.\n        imgsz (int): Image size for training and validation (in pixels).\n        rect (bool): Use rectangular training for better aspect ratio preservation.\n        resume (bool | str): Resume most recent training if True, or resume training from a specific checkpoint if a string.\n        nosave (bool): Only save the final checkpoint and not the intermediate ones.\n        noval (bool): Only validate model performance in the final epoch.\n        noautoanchor (bool): Disable automatic anchor generation.\n        noplots (bool): Do not save any plots.\n        evolve (int): Number of generations for hyperparameters evolution.\n        bucket (str): Google Cloud Storage bucket name for saving run artifacts.\n        cache (str | None): Cache images for faster training ('ram' or 'disk').\n        image_weights (bool): Use weighted image selection for training.\n        device (str): Device to use for training, e.g., '0' for first GPU or 'cpu' for CPU.\n        multi_scale (bool): Use multi-scale training.\n        single_cls (bool): Train a multi-class dataset as a single-class.\n        optimizer (str): Optimizer to use ('SGD', 'Adam', or 'AdamW').\n        sync_bn (bool): Use synchronized batch normalization (only in DDP mode).\n        workers (int): Maximum number of dataloader workers (per rank in DDP mode).\n        project (str): Location of the output directory.\n        name (str): Unique name for the run.\n        exist_ok (bool): Allow existing output directory.\n        quad (bool): Use quad dataloader.\n        cos_lr (bool): Use cosine learning rate scheduler.\n        label_smoothing (float): Label smoothing epsilon.\n        patience (int): EarlyStopping patience (epochs without improvement).\n        freeze (list[int]): List of layers to freeze, e.g., [0] to freeze only the first layer.\n        save_period (int): Save checkpoint every 'save_period' epochs (disabled if less than 1).\n        seed (int): Global training seed for reproducibility.\n        local_rank (int): For automatic DDP Multi-GPU argument parsing, do not modify.\n\n    Returns:\n        None\n\n    Example:\n        ```python\n        from ultralytics import run\n        run(data='coco128.yaml', weights='yolov5m.pt', imgsz=320, epochs=100, batch_size=16)\n        ```\n\n    Notes:\n        - Ensure the dataset YAML file and initial weights are accessible.\n        - Refer to the [Ultralytics YOLOv5 repository](https://github.com/ultralytics/yolov5) for model and data configurations.\n        - Use the [Training Tutorial](https://docs.ultralytics.com/yolov5/tutorials/train_custom_data) for custom dataset training.\n    \"\"\"\n    opt = parse_opt(True)\n    for k, v in kwargs.items():\n        setattr(opt, k, v)\n    main(opt)\n    return opt\n\n\nif __name__ == \"__main__\":\n    opt = parse_opt()\n    main(opt)\n"
        },
        {
          "name": "tutorial.ipynb",
          "type": "blob",
          "size": 40.0419921875,
          "content": "{\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0,\n  \"metadata\": {\n    \"colab\": {\n      \"name\": \"YOLOv5 Tutorial\",\n      \"provenance\": []\n    },\n    \"kernelspec\": {\n      \"name\": \"python3\",\n      \"display_name\": \"Python 3\"\n    },\n    \"accelerator\": \"GPU\"\n  },\n  \"cells\": [\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"t6MPjfT5NrKQ\"\n      },\n      \"source\": [\n        \"<div align=\\\"center\\\">\\n\",\n        \"\\n\",\n        \"  <a href=\\\"https://ultralytics.com/yolov5\\\" target=\\\"_blank\\\">\\n\",\n        \"    <img width=\\\"1024\\\", src=\\\"https://raw.githubusercontent.com/ultralytics/assets/main/yolov5/v70/splash.png\\\"></a>\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"<br>\\n\",\n        \"  <a href=\\\"https://bit.ly/yolov5-paperspace-notebook\\\"><img src=\\\"https://assets.paperspace.io/img/gradient-badge.svg\\\" alt=\\\"Run on Gradient\\\"></a>\\n\",\n        \"  <a href=\\\"https://colab.research.google.com/github/ultralytics/yolov5/blob/master/tutorial.ipynb\\\"><img src=\\\"https://colab.research.google.com/assets/colab-badge.svg\\\" alt=\\\"Open In Colab\\\"></a>\\n\",\n        \"  <a href=\\\"https://www.kaggle.com/models/ultralytics/yolov5\\\"><img src=\\\"https://kaggle.com/static/images/open-in-kaggle.svg\\\" alt=\\\"Open In Kaggle\\\"></a>\\n\",\n        \"<br>\\n\",\n        \"\\n\",\n        \"This <a href=\\\"https://github.com/ultralytics/yolov5\\\">YOLOv5</a> 🚀 notebook by <a href=\\\"https://ultralytics.com\\\">Ultralytics</a> presents simple train, validate and predict examples to help start your AI adventure.<br>We hope that the resources in this notebook will help you get the most out of YOLOv5. Please browse the YOLOv5 <a href=\\\"https://docs.ultralytics.com/yolov5\\\">Docs</a> for details, raise an issue on <a href=\\\"https://github.com/ultralytics/yolov5\\\">GitHub</a> for support, and join our <a href=\\\"https://ultralytics.com/discord\\\">Discord</a> community for questions and discussions!\\n\",\n        \"\\n\",\n        \"</div>\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"7mGmQbAO5pQb\"\n      },\n      \"source\": [\n        \"# Setup\\n\",\n        \"\\n\",\n        \"Clone GitHub [repository](https://github.com/ultralytics/yolov5), install [dependencies](https://github.com/ultralytics/yolov5/blob/master/requirements.txt) and check PyTorch and GPU.\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"id\": \"wbvMlHd_QwMG\",\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"outputId\": \"e8225db4-e61d-4640-8b1f-8bfce3331cea\"\n      },\n      \"source\": [\n        \"!git clone https://github.com/ultralytics/yolov5  # clone\\n\",\n        \"%cd yolov5\\n\",\n        \"%pip install -qr requirements.txt comet_ml  # install\\n\",\n        \"\\n\",\n        \"import torch\\n\",\n        \"import utils\\n\",\n        \"display = utils.notebook_init()  # checks\"\n      ],\n      \"execution_count\": 1,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"name\": \"stderr\",\n          \"text\": [\n            \"YOLOv5 🚀 v7.0-136-g71244ae Python-3.9.16 torch-2.0.0+cu118 CUDA:0 (Tesla T4, 15102MiB)\\n\"\n          ]\n        },\n        {\n          \"output_type\": \"stream\",\n          \"name\": \"stdout\",\n          \"text\": [\n            \"Setup complete ✅ (2 CPUs, 12.7 GB RAM, 23.3/166.8 GB disk)\\n\"\n          ]\n        }\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"4JnkELT0cIJg\"\n      },\n      \"source\": [\n        \"# 1. Detect\\n\",\n        \"\\n\",\n        \"`detect.py` runs YOLOv5 inference on a variety of sources, downloading models automatically from the [latest YOLOv5 release](https://github.com/ultralytics/yolov5/releases), and saving results to `runs/detect`. Example inference sources are:\\n\",\n        \"\\n\",\n        \"```shell\\n\",\n        \"python detect.py --source 0  # webcam\\n\",\n        \"                          img.jpg  # image \\n\",\n        \"                          vid.mp4  # video\\n\",\n        \"                          screen  # screenshot\\n\",\n        \"                          path/  # directory\\n\",\n        \"                         'path/*.jpg'  # glob\\n\",\n        \"                         'https://youtu.be/LNwODJXcvt4'  # YouTube\\n\",\n        \"                         'rtsp://example.com/media.mp4'  # RTSP, RTMP, HTTP stream\\n\",\n        \"```\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"id\": \"zR9ZbuQCH7FX\",\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"outputId\": \"284ef04b-1596-412f-88f6-948828dd2b49\"\n      },\n      \"source\": [\n        \"!python detect.py --weights yolov5s.pt --img 640 --conf 0.25 --source data/images\\n\",\n        \"# display.Image(filename='runs/detect/exp/zidane.jpg', width=600)\"\n      ],\n      \"execution_count\": 13,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"name\": \"stdout\",\n          \"text\": [\n            \"\\u001b[34m\\u001b[1mdetect: \\u001b[0mweights=['yolov5s.pt'], source=data/images, data=data/coco128.yaml, imgsz=[640, 640], conf_thres=0.25, iou_thres=0.45, max_det=1000, device=, view_img=False, save_txt=False, save_conf=False, save_crop=False, nosave=False, classes=None, agnostic_nms=False, augment=False, visualize=False, update=False, project=runs/detect, name=exp, exist_ok=False, line_thickness=3, hide_labels=False, hide_conf=False, half=False, dnn=False, vid_stride=1\\n\",\n            \"YOLOv5 🚀 v7.0-136-g71244ae Python-3.9.16 torch-2.0.0+cu118 CUDA:0 (Tesla T4, 15102MiB)\\n\",\n            \"\\n\",\n            \"Downloading https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5s.pt to yolov5s.pt...\\n\",\n            \"100% 14.1M/14.1M [00:00<00:00, 24.5MB/s]\\n\",\n            \"\\n\",\n            \"Fusing layers... \\n\",\n            \"YOLOv5s summary: 213 layers, 7225885 parameters, 0 gradients\\n\",\n            \"image 1/2 /content/yolov5/data/images/bus.jpg: 640x480 4 persons, 1 bus, 41.5ms\\n\",\n            \"image 2/2 /content/yolov5/data/images/zidane.jpg: 384x640 2 persons, 2 ties, 60.0ms\\n\",\n            \"Speed: 0.5ms pre-process, 50.8ms inference, 37.7ms NMS per image at shape (1, 3, 640, 640)\\n\",\n            \"Results saved to \\u001b[1mruns/detect/exp\\u001b[0m\\n\"\n          ]\n        }\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"hkAzDWJ7cWTr\"\n      },\n      \"source\": [\n        \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\n\",\n        \"<img align=\\\"left\\\" src=\\\"https://user-images.githubusercontent.com/26833433/127574988-6a558aa1-d268-44b9-bf6b-62d4c605cc72.jpg\\\" width=\\\"600\\\">\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"0eq1SMWl6Sfn\"\n      },\n      \"source\": [\n        \"# 2. Validate\\n\",\n        \"Validate a model's accuracy on the [COCO](https://cocodataset.org/#home) dataset's `val` or `test` splits. Models are downloaded automatically from the [latest YOLOv5 release](https://github.com/ultralytics/yolov5/releases). To show results by class use the `--verbose` flag.\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"id\": \"WQPtK1QYVaD_\",\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"outputId\": \"cf7d52f0-281c-4c96-a488-79f5908f8426\"\n      },\n      \"source\": [\n        \"# Download COCO val\\n\",\n        \"torch.hub.download_url_to_file('https://github.com/ultralytics/assets/releases/download/v0.0.0/coco2017val.zip', 'tmp.zip')  # download (780M - 5000 images)\\n\",\n        \"!unzip -q tmp.zip -d ../datasets && rm tmp.zip  # unzip\"\n      ],\n      \"execution_count\": 3,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"name\": \"stderr\",\n          \"text\": [\n            \"100%|██████████| 780M/780M [00:12<00:00, 66.6MB/s]\\n\"\n          ]\n        }\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"id\": \"X58w8JLpMnjH\",\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"outputId\": \"3e234e05-ee8b-4ad1-b1a4-f6a55d5e4f3d\"\n      },\n      \"source\": [\n        \"# Validate YOLOv5s on COCO val\\n\",\n        \"!python val.py --weights yolov5s.pt --data coco.yaml --img 640 --half\"\n      ],\n      \"execution_count\": 4,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"name\": \"stdout\",\n          \"text\": [\n            \"\\u001b[34m\\u001b[1mval: \\u001b[0mdata=/content/yolov5/data/coco.yaml, weights=['yolov5s.pt'], batch_size=32, imgsz=640, conf_thres=0.001, iou_thres=0.6, max_det=300, task=val, device=, workers=8, single_cls=False, augment=False, verbose=False, save_txt=False, save_hybrid=False, save_conf=False, save_json=True, project=runs/val, name=exp, exist_ok=False, half=True, dnn=False\\n\",\n            \"YOLOv5 🚀 v7.0-136-g71244ae Python-3.9.16 torch-2.0.0+cu118 CUDA:0 (Tesla T4, 15102MiB)\\n\",\n            \"\\n\",\n            \"Fusing layers... \\n\",\n            \"YOLOv5s summary: 213 layers, 7225885 parameters, 0 gradients\\n\",\n            \"\\u001b[34m\\u001b[1mval: \\u001b[0mScanning /content/datasets/coco/val2017... 4952 images, 48 backgrounds, 0 corrupt: 100% 5000/5000 [00:02<00:00, 2024.59it/s]\\n\",\n            \"\\u001b[34m\\u001b[1mval: \\u001b[0mNew cache created: /content/datasets/coco/val2017.cache\\n\",\n            \"                 Class     Images  Instances          P          R      mAP50   mAP50-95: 100% 157/157 [01:25<00:00,  1.84it/s]\\n\",\n            \"                   all       5000      36335      0.671      0.519      0.566      0.371\\n\",\n            \"Speed: 0.1ms pre-process, 3.1ms inference, 2.3ms NMS per image at shape (32, 3, 640, 640)\\n\",\n            \"\\n\",\n            \"Evaluating pycocotools mAP... saving runs/val/exp/yolov5s_predictions.json...\\n\",\n            \"loading annotations into memory...\\n\",\n            \"Done (t=0.43s)\\n\",\n            \"creating index...\\n\",\n            \"index created!\\n\",\n            \"Loading and preparing results...\\n\",\n            \"DONE (t=5.32s)\\n\",\n            \"creating index...\\n\",\n            \"index created!\\n\",\n            \"Running per image evaluation...\\n\",\n            \"Evaluate annotation type *bbox*\\n\",\n            \"DONE (t=78.89s).\\n\",\n            \"Accumulating evaluation results...\\n\",\n            \"DONE (t=14.51s).\\n\",\n            \" Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.374\\n\",\n            \" Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.572\\n\",\n            \" Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.402\\n\",\n            \" Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.211\\n\",\n            \" Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.423\\n\",\n            \" Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.489\\n\",\n            \" Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.311\\n\",\n            \" Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.516\\n\",\n            \" Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.566\\n\",\n            \" Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.378\\n\",\n            \" Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.625\\n\",\n            \" Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.722\\n\",\n            \"Results saved to \\u001b[1mruns/val/exp\\u001b[0m\\n\"\n          ]\n        }\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"ZY2VXXXu74w5\"\n      },\n      \"source\": [\n        \"# 3. Train\\n\",\n        \"\\n\",\n        \"<p align=\\\"\\\"><a href=\\\"https://ultralytics.com/hub\\\"><img width=\\\"1000\\\" src=\\\"https://github.com/ultralytics/assets/raw/main/im/integrations-loop.png\\\"/></a></p>\\n\",\n        \"Close the active learning loop by sampling images from your inference conditions with the `roboflow` pip package\\n\",\n        \"<br><br>\\n\",\n        \"\\n\",\n        \"Train a YOLOv5s model on the [COCO128](https://www.kaggle.com/datasets/ultralytics/coco128) dataset with `--data coco128.yaml`, starting from pretrained `--weights yolov5s.pt`, or from randomly initialized `--weights '' --cfg yolov5s.yaml`.\\n\",\n        \"\\n\",\n        \"- **Pretrained [Models](https://github.com/ultralytics/yolov5/tree/master/models)** are downloaded\\n\",\n        \"automatically from the [latest YOLOv5 release](https://github.com/ultralytics/yolov5/releases)\\n\",\n        \"- **[Datasets](https://github.com/ultralytics/yolov5/tree/master/data)** available for autodownload include: [COCO](https://github.com/ultralytics/yolov5/blob/master/data/coco.yaml), [COCO128](https://github.com/ultralytics/yolov5/blob/master/data/coco128.yaml), [VOC](https://github.com/ultralytics/yolov5/blob/master/data/VOC.yaml), [Argoverse](https://github.com/ultralytics/yolov5/blob/master/data/Argoverse.yaml), [VisDrone](https://github.com/ultralytics/yolov5/blob/master/data/VisDrone.yaml), [GlobalWheat](https://github.com/ultralytics/yolov5/blob/master/data/GlobalWheat2020.yaml), [xView](https://github.com/ultralytics/yolov5/blob/master/data/xView.yaml), [Objects365](https://github.com/ultralytics/yolov5/blob/master/data/Objects365.yaml), [SKU-110K](https://github.com/ultralytics/yolov5/blob/master/data/SKU-110K.yaml).\\n\",\n        \"- **Training Results** are saved to `runs/train/` with incrementing run directories, i.e. `runs/train/exp2`, `runs/train/exp3` etc.\\n\",\n        \"<br>\\n\",\n        \"\\n\",\n        \"A **Mosaic Dataloader** is used for training which combines 4 images into 1 mosaic.\\n\",\n        \"\\n\",\n        \"## Label a dataset on Roboflow (optional)\\n\",\n        \"\\n\",\n        \"[Roboflow](https://roboflow.com/?ref=ultralytics) enables you to easily **organize, label, and prepare** a high quality dataset with your own custom data. Roboflow also makes it easy to establish an active learning pipeline, collaborate with your team on dataset improvement, and integrate directly into your model building workflow with the `roboflow` pip package.\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"#@title Select YOLOv5 🚀 logger {run: 'auto'}\\n\",\n        \"logger = 'Comet' #@param ['Comet', 'ClearML', 'TensorBoard']\\n\",\n        \"\\n\",\n        \"if logger == 'Comet':\\n\",\n        \"  %pip install -q comet_ml\\n\",\n        \"  import comet_ml; comet_ml.init()\\n\",\n        \"elif logger == 'ClearML':\\n\",\n        \"  %pip install -q clearml\\n\",\n        \"  import clearml; clearml.browser_login()\\n\",\n        \"elif logger == 'TensorBoard':\\n\",\n        \"  %load_ext tensorboard\\n\",\n        \"  %tensorboard --logdir runs/train\"\n      ],\n      \"metadata\": {\n        \"id\": \"i3oKtE4g-aNn\"\n      },\n      \"execution_count\": null,\n      \"outputs\": []\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"id\": \"1NcFxRcFdJ_O\",\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"outputId\": \"bbeeea2b-04fc-4185-aa64-258690495b5a\"\n      },\n      \"source\": [\n        \"# Train YOLOv5s on COCO128 for 3 epochs\\n\",\n        \"!python train.py --img 640 --batch 16 --epochs 3 --data coco128.yaml --weights yolov5s.pt --cache\"\n      ],\n      \"execution_count\": 5,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"name\": \"stdout\",\n          \"text\": [\n            \"2023-04-09 14:11:38.063605: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\\n\",\n            \"To enable the following instructions: AVX2 AVX512F FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\\n\",\n            \"2023-04-09 14:11:39.026661: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\\n\",\n            \"\\u001b[34m\\u001b[1mtrain: \\u001b[0mweights=yolov5s.pt, cfg=, data=coco128.yaml, hyp=data/hyps/hyp.scratch-low.yaml, epochs=3, batch_size=16, imgsz=640, rect=False, resume=False, nosave=False, noval=False, noautoanchor=False, noplots=False, evolve=None, bucket=, cache=ram, image_weights=False, device=, multi_scale=False, single_cls=False, optimizer=SGD, sync_bn=False, workers=8, project=runs/train, name=exp, exist_ok=False, quad=False, cos_lr=False, label_smoothing=0.0, patience=100, freeze=[0], save_period=-1, seed=0, local_rank=-1, entity=None, upload_dataset=False, bbox_interval=-1, artifact_alias=latest\\n\",\n            \"\\u001b[34m\\u001b[1mgithub: \\u001b[0mup to date with https://github.com/ultralytics/yolov5 ✅\\n\",\n            \"YOLOv5 🚀 v7.0-136-g71244ae Python-3.9.16 torch-2.0.0+cu118 CUDA:0 (Tesla T4, 15102MiB)\\n\",\n            \"\\n\",\n            \"\\u001b[34m\\u001b[1mhyperparameters: \\u001b[0mlr0=0.01, lrf=0.01, momentum=0.937, weight_decay=0.0005, warmup_epochs=3.0, warmup_momentum=0.8, warmup_bias_lr=0.1, box=0.05, cls=0.5, cls_pw=1.0, obj=1.0, obj_pw=1.0, iou_t=0.2, anchor_t=4.0, fl_gamma=0.0, hsv_h=0.015, hsv_s=0.7, hsv_v=0.4, degrees=0.0, translate=0.1, scale=0.5, shear=0.0, perspective=0.0, flipud=0.0, fliplr=0.5, mosaic=1.0, mixup=0.0, copy_paste=0.0\\n\",\n            \"\\u001b[34m\\u001b[1mClearML: \\u001b[0mrun 'pip install clearml' to automatically track, visualize and remotely train YOLOv5 🚀 in ClearML\\n\",\n            \"\\u001b[34m\\u001b[1mComet: \\u001b[0mrun 'pip install comet_ml' to automatically track and visualize YOLOv5 🚀 runs in Comet\\n\",\n            \"\\u001b[34m\\u001b[1mTensorBoard: \\u001b[0mStart with 'tensorboard --logdir runs/train', view at http://localhost:6006/\\n\",\n            \"\\n\",\n            \"Dataset not found ⚠️, missing paths ['/content/datasets/coco128/images/train2017']\\n\",\n            \"Downloading https://github.com/ultralytics/assets/releases/download/v0.0.0/coco128.zip to coco128.zip...\\n\",\n            \"100% 6.66M/6.66M [00:00<00:00, 75.6MB/s]\\n\",\n            \"Dataset download success ✅ (0.6s), saved to \\u001b[1m/content/datasets\\u001b[0m\\n\",\n            \"\\n\",\n            \"                 from  n    params  module                                  arguments                     \\n\",\n            \"  0                -1  1      3520  models.common.Conv                      [3, 32, 6, 2, 2]              \\n\",\n            \"  1                -1  1     18560  models.common.Conv                      [32, 64, 3, 2]                \\n\",\n            \"  2                -1  1     18816  models.common.C3                        [64, 64, 1]                   \\n\",\n            \"  3                -1  1     73984  models.common.Conv                      [64, 128, 3, 2]               \\n\",\n            \"  4                -1  2    115712  models.common.C3                        [128, 128, 2]                 \\n\",\n            \"  5                -1  1    295424  models.common.Conv                      [128, 256, 3, 2]              \\n\",\n            \"  6                -1  3    625152  models.common.C3                        [256, 256, 3]                 \\n\",\n            \"  7                -1  1   1180672  models.common.Conv                      [256, 512, 3, 2]              \\n\",\n            \"  8                -1  1   1182720  models.common.C3                        [512, 512, 1]                 \\n\",\n            \"  9                -1  1    656896  models.common.SPPF                      [512, 512, 5]                 \\n\",\n            \" 10                -1  1    131584  models.common.Conv                      [512, 256, 1, 1]              \\n\",\n            \" 11                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']          \\n\",\n            \" 12           [-1, 6]  1         0  models.common.Concat                    [1]                           \\n\",\n            \" 13                -1  1    361984  models.common.C3                        [512, 256, 1, False]          \\n\",\n            \" 14                -1  1     33024  models.common.Conv                      [256, 128, 1, 1]              \\n\",\n            \" 15                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']          \\n\",\n            \" 16           [-1, 4]  1         0  models.common.Concat                    [1]                           \\n\",\n            \" 17                -1  1     90880  models.common.C3                        [256, 128, 1, False]          \\n\",\n            \" 18                -1  1    147712  models.common.Conv                      [128, 128, 3, 2]              \\n\",\n            \" 19          [-1, 14]  1         0  models.common.Concat                    [1]                           \\n\",\n            \" 20                -1  1    296448  models.common.C3                        [256, 256, 1, False]          \\n\",\n            \" 21                -1  1    590336  models.common.Conv                      [256, 256, 3, 2]              \\n\",\n            \" 22          [-1, 10]  1         0  models.common.Concat                    [1]                           \\n\",\n            \" 23                -1  1   1182720  models.common.C3                        [512, 512, 1, False]          \\n\",\n            \" 24      [17, 20, 23]  1    229245  models.yolo.Detect                      [80, [[10, 13, 16, 30, 33, 23], [30, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]], [128, 256, 512]]\\n\",\n            \"Model summary: 214 layers, 7235389 parameters, 7235389 gradients, 16.6 GFLOPs\\n\",\n            \"\\n\",\n            \"Transferred 349/349 items from yolov5s.pt\\n\",\n            \"\\u001b[34m\\u001b[1mAMP: \\u001b[0mchecks passed ✅\\n\",\n            \"\\u001b[34m\\u001b[1moptimizer:\\u001b[0m SGD(lr=0.01) with parameter groups 57 weight(decay=0.0), 60 weight(decay=0.0005), 60 bias\\n\",\n            \"\\u001b[34m\\u001b[1malbumentations: \\u001b[0mBlur(p=0.01, blur_limit=(3, 7)), MedianBlur(p=0.01, blur_limit=(3, 7)), ToGray(p=0.01), CLAHE(p=0.01, clip_limit=(1, 4.0), tile_grid_size=(8, 8))\\n\",\n            \"\\u001b[34m\\u001b[1mtrain: \\u001b[0mScanning /content/datasets/coco128/labels/train2017... 126 images, 2 backgrounds, 0 corrupt: 100% 128/128 [00:00<00:00, 1709.36it/s]\\n\",\n            \"\\u001b[34m\\u001b[1mtrain: \\u001b[0mNew cache created: /content/datasets/coco128/labels/train2017.cache\\n\",\n            \"\\u001b[34m\\u001b[1mtrain: \\u001b[0mCaching images (0.1GB ram): 100% 128/128 [00:00<00:00, 264.35it/s]\\n\",\n            \"\\u001b[34m\\u001b[1mval: \\u001b[0mScanning /content/datasets/coco128/labels/train2017.cache... 126 images, 2 backgrounds, 0 corrupt: 100% 128/128 [00:00<?, ?it/s]\\n\",\n            \"\\u001b[34m\\u001b[1mval: \\u001b[0mCaching images (0.1GB ram): 100% 128/128 [00:01<00:00, 107.05it/s]\\n\",\n            \"\\n\",\n            \"\\u001b[34m\\u001b[1mAutoAnchor: \\u001b[0m4.27 anchors/target, 0.994 Best Possible Recall (BPR). Current anchors are a good fit to dataset ✅\\n\",\n            \"Plotting labels to runs/train/exp/labels.jpg... \\n\",\n            \"Image sizes 640 train, 640 val\\n\",\n            \"Using 2 dataloader workers\\n\",\n            \"Logging results to \\u001b[1mruns/train/exp\\u001b[0m\\n\",\n            \"Starting training for 3 epochs...\\n\",\n            \"\\n\",\n            \"      Epoch    GPU_mem   box_loss   obj_loss   cls_loss  Instances       Size\\n\",\n            \"        0/2      3.91G    0.04618    0.07209    0.01703        232        640: 100% 8/8 [00:09<00:00,  1.17s/it]\\n\",\n            \"                 Class     Images  Instances          P          R      mAP50   mAP50-95: 100% 4/4 [00:01<00:00,  2.01it/s]\\n\",\n            \"                   all        128        929      0.667      0.602       0.68       0.45\\n\",\n            \"\\n\",\n            \"      Epoch    GPU_mem   box_loss   obj_loss   cls_loss  Instances       Size\\n\",\n            \"        1/2      4.76G    0.04622    0.06891    0.01817        201        640: 100% 8/8 [00:02<00:00,  3.78it/s]\\n\",\n            \"                 Class     Images  Instances          P          R      mAP50   mAP50-95: 100% 4/4 [00:01<00:00,  2.16it/s]\\n\",\n            \"                   all        128        929      0.709      0.645      0.722      0.478\\n\",\n            \"\\n\",\n            \"      Epoch    GPU_mem   box_loss   obj_loss   cls_loss  Instances       Size\\n\",\n            \"        2/2      4.76G     0.0436     0.0647    0.01698        227        640: 100% 8/8 [00:01<00:00,  4.19it/s]\\n\",\n            \"                 Class     Images  Instances          P          R      mAP50   mAP50-95: 100% 4/4 [00:01<00:00,  2.95it/s]\\n\",\n            \"                   all        128        929      0.761      0.647      0.735       0.49\\n\",\n            \"\\n\",\n            \"3 epochs completed in 0.006 hours.\\n\",\n            \"Optimizer stripped from runs/train/exp/weights/last.pt, 14.8MB\\n\",\n            \"Optimizer stripped from runs/train/exp/weights/best.pt, 14.8MB\\n\",\n            \"\\n\",\n            \"Validating runs/train/exp/weights/best.pt...\\n\",\n            \"Fusing layers... \\n\",\n            \"Model summary: 157 layers, 7225885 parameters, 0 gradients, 16.4 GFLOPs\\n\",\n            \"                 Class     Images  Instances          P          R      mAP50   mAP50-95: 100% 4/4 [00:06<00:00,  1.56s/it]\\n\",\n            \"                   all        128        929      0.759      0.646      0.734       0.49\\n\",\n            \"                person        128        254      0.857      0.706      0.805      0.525\\n\",\n            \"               bicycle        128          6      0.773      0.577      0.725      0.414\\n\",\n            \"                   car        128         46      0.664      0.435      0.551       0.24\\n\",\n            \"            motorcycle        128          5      0.587        0.8      0.837      0.635\\n\",\n            \"              airplane        128          6          1      0.989      0.995      0.715\\n\",\n            \"                   bus        128          7      0.635      0.714      0.753      0.651\\n\",\n            \"                 train        128          3      0.686      0.333       0.72      0.504\\n\",\n            \"                 truck        128         12      0.604      0.333      0.472      0.259\\n\",\n            \"                  boat        128          6      0.938      0.333      0.449      0.177\\n\",\n            \"         traffic light        128         14      0.778      0.255      0.401      0.217\\n\",\n            \"             stop sign        128          2      0.826          1      0.995      0.895\\n\",\n            \"                 bench        128          9      0.711      0.556      0.661      0.313\\n\",\n            \"                  bird        128         16      0.962          1      0.995      0.642\\n\",\n            \"                   cat        128          4      0.868          1      0.995      0.754\\n\",\n            \"                   dog        128          9          1      0.652      0.899      0.651\\n\",\n            \"                 horse        128          2      0.853          1      0.995      0.622\\n\",\n            \"              elephant        128         17      0.909      0.882      0.934      0.698\\n\",\n            \"                  bear        128          1      0.696          1      0.995      0.995\\n\",\n            \"                 zebra        128          4      0.855          1      0.995      0.905\\n\",\n            \"               giraffe        128          9      0.788      0.828      0.912      0.701\\n\",\n            \"              backpack        128          6      0.835        0.5      0.738      0.311\\n\",\n            \"              umbrella        128         18      0.785      0.814      0.859       0.48\\n\",\n            \"               handbag        128         19      0.759      0.263      0.366      0.205\\n\",\n            \"                   tie        128          7      0.983      0.714       0.77      0.492\\n\",\n            \"              suitcase        128          4      0.656          1      0.945      0.631\\n\",\n            \"               frisbee        128          5      0.721        0.8      0.759      0.724\\n\",\n            \"                  skis        128          1      0.737          1      0.995        0.3\\n\",\n            \"             snowboard        128          7      0.829      0.696       0.83      0.537\\n\",\n            \"           sports ball        128          6      0.637      0.667      0.602      0.311\\n\",\n            \"                  kite        128         10      0.636        0.6      0.599      0.226\\n\",\n            \"          baseball bat        128          4      0.501       0.25      0.468      0.205\\n\",\n            \"        baseball glove        128          7      0.483      0.429      0.465      0.292\\n\",\n            \"            skateboard        128          5      0.932        0.6      0.687      0.493\\n\",\n            \"         tennis racket        128          7       0.77      0.429      0.547      0.332\\n\",\n            \"                bottle        128         18      0.577      0.379      0.554      0.276\\n\",\n            \"            wine glass        128         16      0.704      0.875       0.89       0.51\\n\",\n            \"                   cup        128         36      0.841      0.667      0.837      0.533\\n\",\n            \"                  fork        128          6      0.992      0.333       0.45      0.315\\n\",\n            \"                 knife        128         16      0.768      0.688      0.695      0.403\\n\",\n            \"                 spoon        128         22      0.838       0.47      0.639      0.384\\n\",\n            \"                  bowl        128         28      0.764       0.58      0.716      0.513\\n\",\n            \"                banana        128          1      0.902          1      0.995      0.301\\n\",\n            \"              sandwich        128          2          1          0      0.359      0.326\\n\",\n            \"                orange        128          4      0.722       0.75      0.912      0.581\\n\",\n            \"              broccoli        128         11      0.547      0.364      0.432      0.317\\n\",\n            \"                carrot        128         24      0.619      0.625      0.724      0.495\\n\",\n            \"               hot dog        128          2      0.409          1      0.828      0.762\\n\",\n            \"                 pizza        128          5      0.833      0.995      0.962      0.727\\n\",\n            \"                 donut        128         14      0.631          1       0.96      0.839\\n\",\n            \"                  cake        128          4       0.87          1      0.995       0.83\\n\",\n            \"                 chair        128         35      0.583        0.6      0.608      0.317\\n\",\n            \"                 couch        128          6      0.907      0.667      0.815      0.544\\n\",\n            \"          potted plant        128         14      0.739      0.786      0.823       0.48\\n\",\n            \"                   bed        128          3      0.985      0.333       0.83      0.441\\n\",\n            \"          dining table        128         13      0.821      0.357      0.578      0.342\\n\",\n            \"                toilet        128          2          1      0.988      0.995      0.846\\n\",\n            \"                    tv        128          2       0.57          1      0.995      0.796\\n\",\n            \"                laptop        128          3          1          0      0.593      0.312\\n\",\n            \"                 mouse        128          2          1          0      0.089     0.0445\\n\",\n            \"                remote        128          8          1      0.624      0.634      0.538\\n\",\n            \"            cell phone        128          8      0.622      0.417      0.421      0.187\\n\",\n            \"             microwave        128          3      0.711          1      0.995      0.766\\n\",\n            \"                  oven        128          5      0.329        0.4       0.43      0.282\\n\",\n            \"                  sink        128          6      0.437      0.333      0.338      0.265\\n\",\n            \"          refrigerator        128          5      0.567        0.8      0.799      0.536\\n\",\n            \"                  book        128         29      0.597      0.257      0.349      0.154\\n\",\n            \"                 clock        128          9      0.765      0.889      0.932      0.736\\n\",\n            \"                  vase        128          2       0.33          1      0.995      0.895\\n\",\n            \"              scissors        128          1          1          0      0.497     0.0498\\n\",\n            \"            teddy bear        128         21      0.856      0.569      0.841      0.547\\n\",\n            \"            toothbrush        128          5        0.8          1      0.928      0.574\\n\",\n            \"Results saved to \\u001b[1mruns/train/exp\\u001b[0m\\n\"\n          ]\n        }\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"15glLzbQx5u0\"\n      },\n      \"source\": [\n        \"# 4. Visualize\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"## Comet Logging and Visualization 🌟 NEW\\n\",\n        \"\\n\",\n        \"[Comet](https://www.comet.com/site/lp/yolov5-with-comet/?utm_source=yolov5&utm_medium=partner&utm_campaign=partner_yolov5_2022&utm_content=yolov5_colab) is now fully integrated with YOLOv5. Track and visualize model metrics in real time, save your hyperparameters, datasets, and model checkpoints, and visualize your model predictions with [Comet Custom Panels](https://www.comet.com/docs/v2/guides/comet-dashboard/code-panels/about-panels/?utm_source=yolov5&utm_medium=partner&utm_campaign=partner_yolov5_2022&utm_content=yolov5_colab)! Comet makes sure you never lose track of your work and makes it easy to share results and collaborate across teams of all sizes!\\n\",\n        \"\\n\",\n        \"Getting started is easy:\\n\",\n        \"```shell\\n\",\n        \"pip install comet_ml  # 1. install\\n\",\n        \"export COMET_API_KEY=<Your API Key>  # 2. paste API key\\n\",\n        \"python train.py --img 640 --epochs 3 --data coco128.yaml --weights yolov5s.pt  # 3. train\\n\",\n        \"```\\n\",\n        \"To learn more about all of the supported Comet features for this integration, check out the [Comet Tutorial](https://docs.ultralytics.com/yolov5/tutorials/comet_logging_integration). If you'd like to learn more about Comet, head over to our [documentation](https://www.comet.com/docs/v2/?utm_source=yolov5&utm_medium=partner&utm_campaign=partner_yolov5_2022&utm_content=yolov5_colab). Get started by trying out the Comet Colab Notebook:\\n\",\n        \"[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1RG0WOQyxlDlo5Km8GogJpIEJlg_5lyYO?usp=sharing)\\n\",\n        \"\\n\",\n        \"<a href=\\\"https://bit.ly/yolov5-readme-comet2\\\">\\n\",\n        \"<img alt=\\\"Comet Dashboard\\\" src=\\\"https://user-images.githubusercontent.com/26833433/202851203-164e94e1-2238-46dd-91f8-de020e9d6b41.png\\\" width=\\\"1280\\\"/></a>\"\n      ],\n      \"metadata\": {\n        \"id\": \"nWOsI5wJR1o3\"\n      }\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"## ClearML Logging and Automation 🌟 NEW\\n\",\n        \"\\n\",\n        \"[ClearML](https://cutt.ly/yolov5-notebook-clearml) is completely integrated into YOLOv5 to track your experimentation, manage dataset versions and even remotely execute training runs. To enable ClearML (check cells above):\\n\",\n        \"\\n\",\n        \"- `pip install clearml`\\n\",\n        \"- run `clearml-init` to connect to a ClearML server (**deploy your own [open-source server](https://github.com/allegroai/clearml-server)**, or use our [free hosted server](https://cutt.ly/yolov5-notebook-clearml))\\n\",\n        \"\\n\",\n        \"You'll get all the great expected features from an experiment manager: live updates, model upload, experiment comparison etc. but ClearML also tracks uncommitted changes and installed packages for example. Thanks to that ClearML Tasks (which is what we call experiments) are also reproducible on different machines! With only 1 extra line, we can schedule a YOLOv5 training task on a queue to be executed by any number of ClearML Agents (workers).\\n\",\n        \"\\n\",\n        \"You can use ClearML Data to version your dataset and then pass it to YOLOv5 simply using its unique ID. This will help you keep track of your data without adding extra hassle. Explore the [ClearML Tutorial](https://docs.ultralytics.com/yolov5/tutorials/clearml_logging_integration) for details!\\n\",\n        \"\\n\",\n        \"<a href=\\\"https://cutt.ly/yolov5-notebook-clearml\\\">\\n\",\n        \"<img alt=\\\"ClearML Experiment Management UI\\\" src=\\\"https://github.com/thepycoder/clearml_screenshots/raw/main/scalars.jpg\\\" width=\\\"1280\\\"/></a>\"\n      ],\n      \"metadata\": {\n        \"id\": \"Lay2WsTjNJzP\"\n      }\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"-WPvRbS5Swl6\"\n      },\n      \"source\": [\n        \"## Local Logging\\n\",\n        \"\\n\",\n        \"Training results are automatically logged with [Tensorboard](https://www.tensorflow.org/tensorboard) and [CSV](https://github.com/ultralytics/yolov5/pull/4148) loggers to `runs/train`, with a new experiment directory created for each new training as `runs/train/exp2`, `runs/train/exp3`, etc.\\n\",\n        \"\\n\",\n        \"This directory contains train and val statistics, mosaics, labels, predictions and augmentated mosaics, as well as metrics and charts including precision-recall (PR) curves and confusion matrices. \\n\",\n        \"\\n\",\n        \"<img alt=\\\"Local logging results\\\" src=\\\"https://user-images.githubusercontent.com/26833433/183222430-e1abd1b7-782c-4cde-b04d-ad52926bf818.jpg\\\" width=\\\"1280\\\"/>\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"Zelyeqbyt3GD\"\n      },\n      \"source\": [\n        \"# Environments\\n\",\n        \"\\n\",\n        \"YOLOv5 may be run in any of the following up-to-date verified environments (with all dependencies including [CUDA](https://developer.nvidia.com/cuda)/[CUDNN](https://developer.nvidia.com/cudnn), [Python](https://www.python.org/) and [PyTorch](https://pytorch.org/) preinstalled):\\n\",\n        \"\\n\",\n        \"- **Notebooks** with free GPU: <a href=\\\"https://bit.ly/yolov5-paperspace-notebook\\\"><img src=\\\"https://assets.paperspace.io/img/gradient-badge.svg\\\" alt=\\\"Run on Gradient\\\"></a> <a href=\\\"https://colab.research.google.com/github/ultralytics/yolov5/blob/master/tutorial.ipynb\\\"><img src=\\\"https://colab.research.google.com/assets/colab-badge.svg\\\" alt=\\\"Open In Colab\\\"></a> <a href=\\\"https://www.kaggle.com/models/ultralytics/yolov5\\\"><img src=\\\"https://kaggle.com/static/images/open-in-kaggle.svg\\\" alt=\\\"Open In Kaggle\\\"></a>\\n\",\n        \"- **Google Cloud** Deep Learning VM. See [GCP Quickstart Guide](https://docs.ultralytics.com/yolov5/environments/google_cloud_quickstart_tutorial/)\\n\",\n        \"- **Amazon** Deep Learning AMI. See [AWS Quickstart Guide](https://docs.ultralytics.com/yolov5/environments/aws_quickstart_tutorial/)\\n\",\n        \"- **Docker Image**. See [Docker Quickstart Guide](https://docs.ultralytics.com/yolov5/environments/docker_image_quickstart_tutorial/) <a href=\\\"https://hub.docker.com/r/ultralytics/yolov3\\\"><img src=\\\"https://img.shields.io/docker/pulls/ultralytics/yolov3?logo=docker\\\" alt=\\\"Docker Pulls\\\"></a>\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"6Qu7Iesl0p54\"\n      },\n      \"source\": [\n        \"# Status\\n\",\n        \"\\n\",\n        \"![YOLOv5 CI](https://github.com/ultralytics/yolov3/actions/workflows/ci-testing.yml/badge.svg)\\n\",\n        \"\\n\",\n        \"If this badge is green, all [YOLOv3 GitHub Actions](https://github.com/ultralytics/yolov3/actions) Continuous Integration (CI) tests are currently passing. CI tests verify correct operation of YOLOv5 training ([train.py](https://github.com/ultralytics/yolov5/blob/master/train.py)), testing ([val.py](https://github.com/ultralytics/yolov5/blob/master/val.py)), inference ([detect.py](https://github.com/ultralytics/yolov5/blob/master/detect.py)) and export ([export.py](https://github.com/ultralytics/yolov5/blob/master/export.py)) on macOS, Windows, and Ubuntu every 24 hours and on every commit.\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"IEijrePND_2I\"\n      },\n      \"source\": [\n        \"# Appendix\\n\",\n        \"\\n\",\n        \"Additional content below.\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"id\": \"GMusP4OAxFu6\"\n      },\n      \"source\": [\n        \"# YOLOv5 PyTorch HUB Inference (DetectionModels only)\\n\",\n        \"import torch\\n\",\n        \"\\n\",\n        \"model = torch.hub.load('ultralytics/yolov5', 'yolov5s', force_reload=True)  # yolov5n - yolov5x6 or custom\\n\",\n        \"im = 'https://ultralytics.com/images/zidane.jpg'  # file, Path, PIL.Image, OpenCV, nparray, list\\n\",\n        \"results = model(im)  # inference\\n\",\n        \"results.print()  # or .show(), .save(), .crop(), .pandas(), etc.\"\n      ],\n      \"execution_count\": null,\n      \"outputs\": []\n    }\n  ]\n}\n"
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "val.py",
          "type": "blob",
          "size": 29.8603515625,
          "content": "# Ultralytics YOLOv3 🚀, AGPL-3.0 license\n\"\"\"\nValidate a trained YOLOv3 detection model on a detection dataset.\n\nUsage:\n    $ python val.py --weights yolov5s.pt --data coco128.yaml --img 640\n\nUsage - formats:\n    $ python val.py --weights yolov5s.pt                 # PyTorch\n                              yolov5s.torchscript        # TorchScript\n                              yolov5s.onnx               # ONNX Runtime or OpenCV DNN with --dnn\n                              yolov5s_openvino_model     # OpenVINO\n                              yolov5s.engine             # TensorRT\n                              yolov5s.mlmodel            # CoreML (macOS-only)\n                              yolov5s_saved_model        # TensorFlow SavedModel\n                              yolov5s.pb                 # TensorFlow GraphDef\n                              yolov5s.tflite             # TensorFlow Lite\n                              yolov5s_edgetpu.tflite     # TensorFlow Edge TPU\n                              yolov5s_paddle_model       # PaddlePaddle\n\"\"\"\n\nimport argparse\nimport json\nimport os\nimport subprocess\nimport sys\nfrom pathlib import Path\n\nimport numpy as np\nimport torch\nfrom tqdm import tqdm\n\nFILE = Path(__file__).resolve()\nROOT = FILE.parents[0]  # YOLOv3 root directory\nif str(ROOT) not in sys.path:\n    sys.path.append(str(ROOT))  # add ROOT to PATH\nROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # relative\n\nfrom models.common import DetectMultiBackend\nfrom utils.callbacks import Callbacks\nfrom utils.dataloaders import create_dataloader\nfrom utils.general import (\n    LOGGER,\n    TQDM_BAR_FORMAT,\n    Profile,\n    check_dataset,\n    check_img_size,\n    check_requirements,\n    check_yaml,\n    coco80_to_coco91_class,\n    colorstr,\n    increment_path,\n    non_max_suppression,\n    print_args,\n    scale_boxes,\n    xywh2xyxy,\n    xyxy2xywh,\n)\nfrom utils.metrics import ConfusionMatrix, ap_per_class, box_iou\nfrom utils.plots import output_to_target, plot_images, plot_val_study\nfrom utils.torch_utils import select_device, smart_inference_mode\n\n\ndef save_one_txt(predn, save_conf, shape, file):\n    \"\"\"\n    Saves detection results in a text format, including labels and optionally confidence scores.\n\n    Args:\n        predn (torch.Tensor): A tensor containing normalized prediction results in the format (x1, y1, x2, y2, conf, cls).\n        save_conf (bool): A flag indicating whether to save confidence scores.\n        shape (tuple[int, int]): Original image shape in the format (height, width).\n        file (str | Path): Path to the file where the results will be saved.\n\n    Returns:\n        None\n\n    Example:\n        ```python\n        from pathlib import Path\n        import torch\n\n        predn = torch.tensor([\n            [10, 20, 100, 200, 0.9, 1],\n            [30, 40, 150, 250, 0.8, 0],\n        ])\n        save_conf = True\n        shape = (416, 416)\n        file = Path(\"results.txt\")\n\n        save_one_txt(predn, save_conf, shape, file)\n        ```\n\n    Notes:\n        - The function normalizes bounding box coordinates before saving.\n        - Each line in the output file will contain class, x-center, y-center, width, height and optionally confidence score.\n        - The format is compatible with YOLO training dataset format.\n    \"\"\"\n    gn = torch.tensor(shape)[[1, 0, 1, 0]]  # normalization gain whwh\n    for *xyxy, conf, cls in predn.tolist():\n        xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(-1).tolist()  # normalized xywh\n        line = (cls, *xywh, conf) if save_conf else (cls, *xywh)  # label format\n        with open(file, \"a\") as f:\n            f.write((\"%g \" * len(line)).rstrip() % line + \"\\n\")\n\n\ndef save_one_json(predn, jdict, path, class_map):\n    \"\"\"\n    Save detection results in JSON format containing image_id, category_id, bbox, and score per detection.\n\n    Args:\n        predn (torch.Tensor): Normalized prediction tensor of shape (N, 6) where N is the number of detections.\n            Each detection should contain (x1, y1, x2, y2, confidence, class).\n        jdict (list): List to store the JSON serializable detections.\n        path (Path): Path object representing the image file path.\n        class_map (dict[int, int]): Dictionary mapping class indices to their respective category IDs.\n\n    Returns:\n        None\n\n    Example:\n        ```python\n        predn = torch.tensor([[50, 30, 200, 150, 0.9, 0], [30, 20, 180, 150, 0.8, 1]])\n        jdict = []\n        path = Path('images/000001.jpg')\n        class_map = {0: 1, 1: 2}\n        save_one_json(predn, jdict, path, class_map)\n        ```\n\n    Notes:\n        - The image_id is extracted from the image file path.\n        - Bounding boxes are converted from xyxy format to xywh format.\n        - The JSON output format is compatible with COCO dataset evaluation.\n    \"\"\"\n    image_id = int(path.stem) if path.stem.isnumeric() else path.stem\n    box = xyxy2xywh(predn[:, :4])  # xywh\n    box[:, :2] -= box[:, 2:] / 2  # xy center to top-left corner\n    for p, b in zip(predn.tolist(), box.tolist()):\n        jdict.append(\n            {\n                \"image_id\": image_id,\n                \"category_id\": class_map[int(p[5])],\n                \"bbox\": [round(x, 3) for x in b],\n                \"score\": round(p[4], 5),\n            }\n        )\n\n\ndef process_batch(detections, labels, iouv):\n    \"\"\"\n    Computes correct prediction matrix for detections against ground truth labels at various IoU thresholds.\n\n    Args:\n        detections (np.ndarray): Array of detections with shape (N, 6), where each detection contains [x1, y1, x2, y2,\n            confidence, class].\n        labels (np.ndarray): Array of ground truth labels with shape (M, 5), where each label contains [class, x1, y1, x2, y2].\n        iouv (np.ndarray): Array of IoU thresholds to use for evaluation.\n\n    Returns:\n        np.ndarray: Boolean array of shape (N, len(iouv)), indicating correct predictions at each IoU threshold.\n\n    Notes:\n        - This function compares detections and ground truth labels to establish matches based on IoU and class.\n        - It supports multiple IoU thresholds to evaluate prediction accuracy flexibly.\n\n    Example:\n        ```python\n        detections = np.array([[50, 50, 150, 150, 0.8, 0],\n                               [30, 30, 120, 120, 0.7, 1]])\n        labels = np.array([[0, 50, 50, 150, 150],\n                           [1, 30, 30, 120, 120]])\n        iouv = np.array([0.5, 0.6, 0.7])\n\n        correct = process_batch(detections, labels, iouv)\n        ```\n    \"\"\"\n    correct = np.zeros((detections.shape[0], iouv.shape[0])).astype(bool)\n    iou = box_iou(labels[:, 1:], detections[:, :4])\n    correct_class = labels[:, 0:1] == detections[:, 5]\n    for i in range(len(iouv)):\n        x = torch.where((iou >= iouv[i]) & correct_class)  # IoU > threshold and classes match\n        if x[0].shape[0]:\n            matches = torch.cat((torch.stack(x, 1), iou[x[0], x[1]][:, None]), 1).cpu().numpy()  # [label, detect, iou]\n            if x[0].shape[0] > 1:\n                matches = matches[matches[:, 2].argsort()[::-1]]\n                matches = matches[np.unique(matches[:, 1], return_index=True)[1]]\n                # matches = matches[matches[:, 2].argsort()[::-1]]\n                matches = matches[np.unique(matches[:, 0], return_index=True)[1]]\n            correct[matches[:, 1].astype(int), i] = True\n    return torch.tensor(correct, dtype=torch.bool, device=iouv.device)\n\n\n@smart_inference_mode()\ndef run(\n    data,\n    weights=None,  # model.pt path(s)\n    batch_size=32,  # batch size\n    imgsz=640,  # inference size (pixels)\n    conf_thres=0.001,  # confidence threshold\n    iou_thres=0.6,  # NMS IoU threshold\n    max_det=300,  # maximum detections per image\n    task=\"val\",  # train, val, test, speed or study\n    device=\"\",  # cuda device, i.e. 0 or 0,1,2,3 or cpu\n    workers=8,  # max dataloader workers (per RANK in DDP mode)\n    single_cls=False,  # treat as single-class dataset\n    augment=False,  # augmented inference\n    verbose=False,  # verbose output\n    save_txt=False,  # save results to *.txt\n    save_hybrid=False,  # save label+prediction hybrid results to *.txt\n    save_conf=False,  # save confidences in --save-txt labels\n    save_json=False,  # save a COCO-JSON results file\n    project=ROOT / \"runs/val\",  # save to project/name\n    name=\"exp\",  # save to project/name\n    exist_ok=False,  # existing project/name ok, do not increment\n    half=True,  # use FP16 half-precision inference\n    dnn=False,  # use OpenCV DNN for ONNX inference\n    model=None,\n    dataloader=None,\n    save_dir=Path(\"\"),\n    plots=True,\n    callbacks=Callbacks(),\n    compute_loss=None,\n):\n    \"\"\"\n    Validates a trained YOLO model on a dataset and saves detection results in specified formats.\n\n    Args:\n        data (str | dict): Path to the dataset configuration file (.yaml) or a dictionary containing the dataset paths.\n        weights (str | list, optional): Path to the trained model weights file(s). Default is None.\n        batch_size (int, optional): Batch size for inference. Default is 32.\n        imgsz (int, optional): Input image size for inference in pixels. Default is 640.\n        conf_thres (float, optional): Confidence threshold for object detection. Default is 0.001.\n        iou_thres (float, optional): IoU threshold for Non-Maximum Suppression (NMS). Default is 0.6.\n        max_det (int, optional): Maximum number of detections per image. Default is 300.\n        task (str, optional): Task type, can be 'train', 'val', 'test', 'speed', or 'study'. Default is 'val'.\n        device (str, optional): Device for computation, e.g., '0' for GPU or 'cpu' for CPU. Default is \"\".\n        workers (int, optional): Number of dataloader workers. Default is 8.\n        single_cls (bool, optional): Whether to treat the dataset as a single-class dataset. Default is False.\n        augment (bool, optional): Whether to apply augmented inference. Default is False.\n        verbose (bool, optional): Whether to output verbose information. Default is False.\n        save_txt (bool, optional): Whether to save detection results in text format (*.txt). Default is False.\n        save_hybrid (bool, optional): Whether to save hybrid results (labels+predictions) in text format (*.txt). Default is False.\n        save_conf (bool, optional): Whether to save confidence scores in text format labels. Default is False.\n        save_json (bool, optional): Whether to save detection results in COCO JSON format. Default is False.\n        project (str | Path, optional): Directory path to save validation results. Default is ROOT / 'runs/val'.\n        name (str, optional): Directory name to save validation results. Default is 'exp'.\n        exist_ok (bool, optional): Whether to overwrite existing project/name directory. Default is False.\n        half (bool, optional): Whether to use half-precision (FP16) for inference. Default is True.\n        dnn (bool, optional): Whether to use OpenCV DNN for ONNX inference. Default is False.\n        model (torch.nn.Module, optional): Existing model instance. Default is None.\n        dataloader (torch.utils.data.DataLoader, optional): Existing dataloader instance. Default is None.\n        save_dir (Path, optional): Path to directory to save results. Default is Path(\"\").\n        plots (bool, optional): Whether to generate plots for visual results. Default is True.\n        callbacks (Callbacks, optional): Callbacks instance for event handling. Default is Callbacks().\n        compute_loss (Callable, optional): Loss function for computing training loss. Default is None.\n\n    Returns:\n        (tuple): A tuple containing:\n            - metrics (torch.Tensor): Dictionary containing metrics such as precision, recall, mAP, F1 score, etc.\n            - times (dict): Dictionary containing times for different parts of the pipeline (e.g., preprocessing, inference, NMS).\n            - samples (torch.Tensor): Torch tensor containing validation samples.\n\n    Example:\n        ```python\n        metrics, times, samples = run(\n            data='data/coco.yaml',\n            weights='yolov5s.pt',\n            batch_size=32,\n            imgsz=640,\n            conf_thres=0.001,\n            iou_thres=0.6,\n            max_det=300,\n            task='val',\n            device='cpu'\n        )\n        ```\n    \"\"\"\n    # Initialize/load model and set device\n    training = model is not None\n    if training:  # called by train.py\n        device, pt, jit, engine = next(model.parameters()).device, True, False, False  # get model device, PyTorch model\n        half &= device.type != \"cpu\"  # half precision only supported on CUDA\n        model.half() if half else model.float()\n    else:  # called directly\n        device = select_device(device, batch_size=batch_size)\n\n        # Directories\n        save_dir = increment_path(Path(project) / name, exist_ok=exist_ok)  # increment run\n        (save_dir / \"labels\" if save_txt else save_dir).mkdir(parents=True, exist_ok=True)  # make dir\n\n        # Load model\n        model = DetectMultiBackend(weights, device=device, dnn=dnn, data=data, fp16=half)\n        stride, pt, jit, engine = model.stride, model.pt, model.jit, model.engine\n        imgsz = check_img_size(imgsz, s=stride)  # check image size\n        half = model.fp16  # FP16 supported on limited backends with CUDA\n        if engine:\n            batch_size = model.batch_size\n        else:\n            device = model.device\n            if not (pt or jit):\n                batch_size = 1  # export.py models default to batch-size 1\n                LOGGER.info(f\"Forcing --batch-size 1 square inference (1,3,{imgsz},{imgsz}) for non-PyTorch models\")\n\n        # Data\n        data = check_dataset(data)  # check\n\n    # Configure\n    model.eval()\n    cuda = device.type != \"cpu\"\n    is_coco = isinstance(data.get(\"val\"), str) and data[\"val\"].endswith(f\"coco{os.sep}val2017.txt\")  # COCO dataset\n    nc = 1 if single_cls else int(data[\"nc\"])  # number of classes\n    iouv = torch.linspace(0.5, 0.95, 10, device=device)  # iou vector for mAP@0.5:0.95\n    niou = iouv.numel()\n\n    # Dataloader\n    if not training:\n        if pt and not single_cls:  # check --weights are trained on --data\n            ncm = model.model.nc\n            assert ncm == nc, (\n                f\"{weights} ({ncm} classes) trained on different --data than what you passed ({nc} \"\n                f\"classes). Pass correct combination of --weights and --data that are trained together.\"\n            )\n        model.warmup(imgsz=(1 if pt else batch_size, 3, imgsz, imgsz))  # warmup\n        pad, rect = (0.0, False) if task == \"speed\" else (0.5, pt)  # square inference for benchmarks\n        task = task if task in (\"train\", \"val\", \"test\") else \"val\"  # path to train/val/test images\n        dataloader = create_dataloader(\n            data[task],\n            imgsz,\n            batch_size,\n            stride,\n            single_cls,\n            pad=pad,\n            rect=rect,\n            workers=workers,\n            prefix=colorstr(f\"{task}: \"),\n        )[0]\n\n    seen = 0\n    confusion_matrix = ConfusionMatrix(nc=nc)\n    names = model.names if hasattr(model, \"names\") else model.module.names  # get class names\n    if isinstance(names, (list, tuple)):  # old format\n        names = dict(enumerate(names))\n    class_map = coco80_to_coco91_class() if is_coco else list(range(1000))\n    s = (\"%22s\" + \"%11s\" * 6) % (\"Class\", \"Images\", \"Instances\", \"P\", \"R\", \"mAP50\", \"mAP50-95\")\n    tp, fp, p, r, f1, mp, mr, map50, ap50, map = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0\n    dt = Profile(), Profile(), Profile()  # profiling times\n    loss = torch.zeros(3, device=device)\n    jdict, stats, ap, ap_class = [], [], [], []\n    callbacks.run(\"on_val_start\")\n    pbar = tqdm(dataloader, desc=s, bar_format=TQDM_BAR_FORMAT)  # progress bar\n    for batch_i, (im, targets, paths, shapes) in enumerate(pbar):\n        callbacks.run(\"on_val_batch_start\")\n        with dt[0]:\n            if cuda:\n                im = im.to(device, non_blocking=True)\n                targets = targets.to(device)\n            im = im.half() if half else im.float()  # uint8 to fp16/32\n            im /= 255  # 0 - 255 to 0.0 - 1.0\n            nb, _, height, width = im.shape  # batch size, channels, height, width\n\n        # Inference\n        with dt[1]:\n            preds, train_out = model(im) if compute_loss else (model(im, augment=augment), None)\n\n        # Loss\n        if compute_loss:\n            loss += compute_loss(train_out, targets)[1]  # box, obj, cls\n\n        # NMS\n        targets[:, 2:] *= torch.tensor((width, height, width, height), device=device)  # to pixels\n        lb = [targets[targets[:, 0] == i, 1:] for i in range(nb)] if save_hybrid else []  # for autolabelling\n        with dt[2]:\n            preds = non_max_suppression(\n                preds, conf_thres, iou_thres, labels=lb, multi_label=True, agnostic=single_cls, max_det=max_det\n            )\n\n        # Metrics\n        for si, pred in enumerate(preds):\n            labels = targets[targets[:, 0] == si, 1:]\n            nl, npr = labels.shape[0], pred.shape[0]  # number of labels, predictions\n            path, shape = Path(paths[si]), shapes[si][0]\n            correct = torch.zeros(npr, niou, dtype=torch.bool, device=device)  # init\n            seen += 1\n\n            if npr == 0:\n                if nl:\n                    stats.append((correct, *torch.zeros((2, 0), device=device), labels[:, 0]))\n                    if plots:\n                        confusion_matrix.process_batch(detections=None, labels=labels[:, 0])\n                continue\n\n            # Predictions\n            if single_cls:\n                pred[:, 5] = 0\n            predn = pred.clone()\n            scale_boxes(im[si].shape[1:], predn[:, :4], shape, shapes[si][1])  # native-space pred\n\n            # Evaluate\n            if nl:\n                tbox = xywh2xyxy(labels[:, 1:5])  # target boxes\n                scale_boxes(im[si].shape[1:], tbox, shape, shapes[si][1])  # native-space labels\n                labelsn = torch.cat((labels[:, 0:1], tbox), 1)  # native-space labels\n                correct = process_batch(predn, labelsn, iouv)\n                if plots:\n                    confusion_matrix.process_batch(predn, labelsn)\n            stats.append((correct, pred[:, 4], pred[:, 5], labels[:, 0]))  # (correct, conf, pcls, tcls)\n\n            # Save/log\n            if save_txt:\n                save_one_txt(predn, save_conf, shape, file=save_dir / \"labels\" / f\"{path.stem}.txt\")\n            if save_json:\n                save_one_json(predn, jdict, path, class_map)  # append to COCO-JSON dictionary\n            callbacks.run(\"on_val_image_end\", pred, predn, path, names, im[si])\n\n        # Plot images\n        if plots and batch_i < 3:\n            plot_images(im, targets, paths, save_dir / f\"val_batch{batch_i}_labels.jpg\", names)  # labels\n            plot_images(im, output_to_target(preds), paths, save_dir / f\"val_batch{batch_i}_pred.jpg\", names)  # pred\n\n        callbacks.run(\"on_val_batch_end\", batch_i, im, targets, paths, shapes, preds)\n\n    # Compute metrics\n    stats = [torch.cat(x, 0).cpu().numpy() for x in zip(*stats)]  # to numpy\n    if len(stats) and stats[0].any():\n        tp, fp, p, r, f1, ap, ap_class = ap_per_class(*stats, plot=plots, save_dir=save_dir, names=names)\n        ap50, ap = ap[:, 0], ap.mean(1)  # AP@0.5, AP@0.5:0.95\n        mp, mr, map50, map = p.mean(), r.mean(), ap50.mean(), ap.mean()\n    nt = np.bincount(stats[3].astype(int), minlength=nc)  # number of targets per class\n\n    # Print results\n    pf = \"%22s\" + \"%11i\" * 2 + \"%11.3g\" * 4  # print format\n    LOGGER.info(pf % (\"all\", seen, nt.sum(), mp, mr, map50, map))\n    if nt.sum() == 0:\n        LOGGER.warning(f\"WARNING ⚠️ no labels found in {task} set, can not compute metrics without labels\")\n\n    # Print results per class\n    if (verbose or (nc < 50 and not training)) and nc > 1 and len(stats):\n        for i, c in enumerate(ap_class):\n            LOGGER.info(pf % (names[c], seen, nt[c], p[i], r[i], ap50[i], ap[i]))\n\n    # Print speeds\n    t = tuple(x.t / seen * 1e3 for x in dt)  # speeds per image\n    if not training:\n        shape = (batch_size, 3, imgsz, imgsz)\n        LOGGER.info(f\"Speed: %.1fms pre-process, %.1fms inference, %.1fms NMS per image at shape {shape}\" % t)\n\n    # Plots\n    if plots:\n        confusion_matrix.plot(save_dir=save_dir, names=list(names.values()))\n        callbacks.run(\"on_val_end\", nt, tp, fp, p, r, f1, ap, ap50, ap_class, confusion_matrix)\n\n    # Save JSON\n    if save_json and len(jdict):\n        w = Path(weights[0] if isinstance(weights, list) else weights).stem if weights is not None else \"\"  # weights\n        anno_json = str(Path(\"../datasets/coco/annotations/instances_val2017.json\"))  # annotations\n        if not os.path.exists(anno_json):\n            anno_json = os.path.join(data[\"path\"], \"annotations\", \"instances_val2017.json\")\n        pred_json = str(save_dir / f\"{w}_predictions.json\")  # predictions\n        LOGGER.info(f\"\\nEvaluating pycocotools mAP... saving {pred_json}...\")\n        with open(pred_json, \"w\") as f:\n            json.dump(jdict, f)\n\n        try:  # https://github.com/cocodataset/cocoapi/blob/master/PythonAPI/pycocoEvalDemo.ipynb\n            check_requirements(\"pycocotools>=2.0.6\")\n            from pycocotools.coco import COCO\n            from pycocotools.cocoeval import COCOeval\n\n            anno = COCO(anno_json)  # init annotations api\n            pred = anno.loadRes(pred_json)  # init predictions api\n            eval = COCOeval(anno, pred, \"bbox\")\n            if is_coco:\n                eval.params.imgIds = [int(Path(x).stem) for x in dataloader.dataset.im_files]  # image IDs to evaluate\n            eval.evaluate()\n            eval.accumulate()\n            eval.summarize()\n            map, map50 = eval.stats[:2]  # update results (mAP@0.5:0.95, mAP@0.5)\n        except Exception as e:\n            LOGGER.info(f\"pycocotools unable to run: {e}\")\n\n    # Return results\n    model.float()  # for training\n    if not training:\n        s = f\"\\n{len(list(save_dir.glob('labels/*.txt')))} labels saved to {save_dir / 'labels'}\" if save_txt else \"\"\n        LOGGER.info(f\"Results saved to {colorstr('bold', save_dir)}{s}\")\n    maps = np.zeros(nc) + map\n    for i, c in enumerate(ap_class):\n        maps[c] = ap[i]\n    return (mp, mr, map50, map, *(loss.cpu() / len(dataloader)).tolist()), maps, t\n\n\ndef parse_opt():\n    \"\"\"\n    Parses and returns command-line options for dataset paths, model parameters, and inference settings.\n\n    Args:\n        --data (str): Path to the dataset YAML file. Default is 'data/coco128.yaml'.\n        --weights (list[str]): Paths to one or more model files. Default is 'yolov3-tiny.pt'.\n        --batch-size (int): Number of images per batch during inference. Default is 32.\n        --imgsz (int): Inference size (pixels). Default is 640.\n        --conf-thres (float): Confidence threshold for object detection. Default is 0.001.\n        --iou-thres (float): IoU threshold for non-max suppression (NMS). Default is 0.6.\n        --max-det (int): Maximum number of detections per image. Default is 300.\n        --task (str): Task to perform: 'train', 'val', 'test', 'speed', or 'study'. Default is 'val'.\n        --device (str): CUDA device identifier (e.g., '0' or '0,1,2,3') or 'cpu' for using CPU. Default is \"\".\n        --workers (int): Maximum number of dataloader workers (per RANK in DDP mode). Default is 8.\n        --single-cls (bool): Treat the dataset as a single-class dataset. Default is False.\n        --augment (bool): Apply test-time augmentation during inference. Default is False.\n        --verbose (bool): Print mAP by class. Default is False.\n        --save-txt (bool): Save detection results in '.txt' format. Default is False.\n        --save-hybrid (bool): Save hybrid results containing both label and prediction in '.txt' format. Default is False.\n        --save-conf (bool): Save confidence scores in the '--save-txt' labels. Default is False.\n        --save-json (bool): Save detection results in COCO JSON format. Default is False.\n        --project (str): Project directory to save results. Default is 'runs/val'.\n        --name (str): Name of the experiment to save results. Default is 'exp'.\n        --exist-ok (bool): Whether to overwrite existing project/name without incrementing. Default is False.\n        --half (bool): Use FP16 half-precision during inference. Default is False.\n        --dnn (bool): Use OpenCV DNN backend for ONNX inference. Default is False.\n\n    Returns:\n        opt (argparse.Namespace): Parsed command-line options.\n\n    Notes:\n        - The function uses `argparse` to handle command-line options.\n        - It also modifies some options based on specific conditions, such as appending additional flags for saving\n        in JSON format and checking for the `coco.yaml` dataset.\n\n    Example:\n        Use the following command to run validation with custom settings:\n        ```python\n        $ python val.py --weights yolov5s.pt --data coco128.yaml --img 640\n        ```\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--data\", type=str, default=ROOT / \"data/coco128.yaml\", help=\"dataset.yaml path\")\n    parser.add_argument(\"--weights\", nargs=\"+\", type=str, default=ROOT / \"yolov3-tiny.pt\", help=\"model path(s)\")\n    parser.add_argument(\"--batch-size\", type=int, default=32, help=\"batch size\")\n    parser.add_argument(\"--imgsz\", \"--img\", \"--img-size\", type=int, default=640, help=\"inference size (pixels)\")\n    parser.add_argument(\"--conf-thres\", type=float, default=0.001, help=\"confidence threshold\")\n    parser.add_argument(\"--iou-thres\", type=float, default=0.6, help=\"NMS IoU threshold\")\n    parser.add_argument(\"--max-det\", type=int, default=300, help=\"maximum detections per image\")\n    parser.add_argument(\"--task\", default=\"val\", help=\"train, val, test, speed or study\")\n    parser.add_argument(\"--device\", default=\"\", help=\"cuda device, i.e. 0 or 0,1,2,3 or cpu\")\n    parser.add_argument(\"--workers\", type=int, default=8, help=\"max dataloader workers (per RANK in DDP mode)\")\n    parser.add_argument(\"--single-cls\", action=\"store_true\", help=\"treat as single-class dataset\")\n    parser.add_argument(\"--augment\", action=\"store_true\", help=\"augmented inference\")\n    parser.add_argument(\"--verbose\", action=\"store_true\", help=\"report mAP by class\")\n    parser.add_argument(\"--save-txt\", action=\"store_true\", help=\"save results to *.txt\")\n    parser.add_argument(\"--save-hybrid\", action=\"store_true\", help=\"save label+prediction hybrid results to *.txt\")\n    parser.add_argument(\"--save-conf\", action=\"store_true\", help=\"save confidences in --save-txt labels\")\n    parser.add_argument(\"--save-json\", action=\"store_true\", help=\"save a COCO-JSON results file\")\n    parser.add_argument(\"--project\", default=ROOT / \"runs/val\", help=\"save to project/name\")\n    parser.add_argument(\"--name\", default=\"exp\", help=\"save to project/name\")\n    parser.add_argument(\"--exist-ok\", action=\"store_true\", help=\"existing project/name ok, do not increment\")\n    parser.add_argument(\"--half\", action=\"store_true\", help=\"use FP16 half-precision inference\")\n    parser.add_argument(\"--dnn\", action=\"store_true\", help=\"use OpenCV DNN for ONNX inference\")\n    opt = parser.parse_args()\n    opt.data = check_yaml(opt.data)  # check YAML\n    opt.save_json |= opt.data.endswith(\"coco.yaml\")\n    opt.save_txt |= opt.save_hybrid\n    print_args(vars(opt))\n    return opt\n\n\ndef main(opt):\n    \"\"\"\n    Executes model tasks including training, validation, and speed or study benchmarks based on specified options.\n\n    Args:\n        opt (argparse.Namespace): Parsed command-line options for dataset paths, model parameters, and inference settings.\n\n    Returns:\n        None\n\n    Note:\n        This function orchestrates different tasks based on the user input provided through command-line arguments. It supports tasks\n        like `train`, `val`, `test`, `speed`, and `study`. Depending on the task, it validates the model on a dataset, performs speed\n        benchmarks, or runs mAP benchmarks.\n\n    Examples:\n        To validate a trained YOLOv3 model:\n\n        ```bash\n        $ python val.py --weights yolov3.pt --data coco.yaml --img 640 --task val\n        ```\n\n        For running speed benchmarks:\n\n        ```bash\n        $ python val.py --task speed --data coco.yaml --weights yolov3.pt --batch-size 1\n        ```\n\n    Links:\n        For more information, visit the official repository: https://github.com/ultralytics/ultralytics\n    \"\"\"\n    check_requirements(ROOT / \"requirements.txt\", exclude=(\"tensorboard\", \"thop\"))\n\n    if opt.task in (\"train\", \"val\", \"test\"):  # run normally\n        if opt.conf_thres > 0.001:  # https://github.com/ultralytics/yolov5/issues/1466\n            LOGGER.info(f\"WARNING ⚠️ confidence threshold {opt.conf_thres} > 0.001 produces invalid results\")\n        if opt.save_hybrid:\n            LOGGER.info(\"WARNING ⚠️ --save-hybrid will return high mAP from hybrid labels, not from predictions alone\")\n        run(**vars(opt))\n\n    else:\n        weights = opt.weights if isinstance(opt.weights, list) else [opt.weights]\n        opt.half = torch.cuda.is_available() and opt.device != \"cpu\"  # FP16 for fastest results\n        if opt.task == \"speed\":  # speed benchmarks\n            # python val.py --task speed --data coco.yaml --batch 1 --weights yolov5n.pt yolov5s.pt...\n            opt.conf_thres, opt.iou_thres, opt.save_json = 0.25, 0.45, False\n            for opt.weights in weights:\n                run(**vars(opt), plots=False)\n\n        elif opt.task == \"study\":  # speed vs mAP benchmarks\n            # python val.py --task study --data coco.yaml --iou 0.7 --weights yolov5n.pt yolov5s.pt...\n            for opt.weights in weights:\n                f = f\"study_{Path(opt.data).stem}_{Path(opt.weights).stem}.txt\"  # filename to save to\n                x, y = list(range(256, 1536 + 128, 128)), []  # x axis (image sizes), y axis\n                for opt.imgsz in x:  # img-size\n                    LOGGER.info(f\"\\nRunning {f} --imgsz {opt.imgsz}...\")\n                    r, _, t = run(**vars(opt), plots=False)\n                    y.append(r + t)  # results and times\n                np.savetxt(f, y, fmt=\"%10.4g\")  # save\n            subprocess.run([\"zip\", \"-r\", \"study.zip\", \"study_*.txt\"])\n            plot_val_study(x=x)  # plot\n        else:\n            raise NotImplementedError(f'--task {opt.task} not in (\"train\", \"val\", \"test\", \"speed\", \"study\")')\n\n\nif __name__ == \"__main__\":\n    opt = parse_opt()\n    main(opt)\n"
        }
      ]
    }
  ]
}