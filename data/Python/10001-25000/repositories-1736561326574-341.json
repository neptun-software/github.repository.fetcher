{
  "metadata": {
    "timestamp": 1736561326574,
    "page": 341,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "trustedsec/social-engineer-toolkit",
      "stars": 11249,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.8662109375,
          "content": "# Created by .ignore support plugin (hsz.mobi)\n### Python template\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Pycharm IDE files\n.idea\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# IPython Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# dotenv\n.env\n\n# virtualenv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n### Java template\n*.class\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package Files #\n*.war\n*.ear\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n### Linux template\n*~\n\n# temporary files which can be created if a process still has a handle open of a deleted file\n.fuse_hidden*\n\n# KDE directory preferences\n.directory\n\n# Linux trash folder which might appear on any partition or disk\n.Trash-*\n### OSX template\n*.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5322265625,
          "content": "FROM ubuntu:latest\n\n# Update sources and install git\nRUN apt-get update -y && apt-get install -y git python3-pip\n\n#Git configuration\nRUN git config --global user.name \"YOUR NAME HERE\" \\\n    && git config --global user.email \"YOUR EMAIL HERE\"\n\n# Clone SETOOLKIT\nRUN git clone --depth=1 https://github.com/trustedsec/social-engineer-toolkit.git\n\n# Change Working Directory\nWORKDIR /social-engineer-toolkit\n\n # Install requirements\nRUN pip3 install -r requirements.txt\n\n# Install SETOOLKIT\nRUN python3 setup.py \n\nENTRYPOINT [ \"./setoolkit\" ]\n\n    \n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.099609375,
          "content": "# The Social-Engineer Toolkit (SET)\n* Copyright :copyright: 2020\n* Written by: David Kennedy (ReL1K) @HackingDave \n* Company: [TrustedSec](https://www.trustedsec.com)\n\n<br/>\n\n## Description\nThe Social-Engineer Toolkit is an open-source penetration testing framework designed for social engineering. SET has a number of custom attack vectors that allow you to make a believable attack quickly. SET is a product of TrustedSec, LLC â€“ an information security consulting firm located in Cleveland, Ohio.\n\nDISCLAIMER: This is *only* for testing purposes and can only be used where strict consent has been given. Do not use this for illegal purposes, period.\nPlease read the LICENSE under readme/LICENSE for the licensing of SET. \n\n#### Supported platforms:\n* Linux\n* Mac OS X (experimental)\n\n# Installation\n\n## Install via requirements.txt\n\n```bash\npip3 install -r requirements.txt\npython3 setup.py \n```\n\n## Install SET\n=======\n#### Mac OS X\nYou will need to use a virtual environment for the Python install if you are using an M2 Macbook with the following instructions in your CLI within the social-engineer-toolkit directory. \n```bash\n    # to install dependencies, run the following:\n    python3 -m venv path/to/venv\n    source path/to/venv/bin/activate\n    python3 -m pip install -r requirements.txt\n\n    # to install SET\n    sudo python3 setup.py \n```\n\n<br/>\n\n## Installation\n#### Windows 10 WSL/WSL2 Kali Linux\n```bash\nsudo apt install set -y\n```\nKali Linux on Windows 10 is a minimal installation so it doesn't have any tools installed.\nYou can easily install Social Engineer Toolkit on WSL/WSL2 without needing pip using the above command.\n\n#### Linux\n```bash\ngit clone https://github.com/trustedsec/social-engineer-toolkit/ setoolkit/\ncd setoolkit\npip3 install -r requirements.txt\npython setup.py\n```\n<br/>\n\n## SET Tutorial\nFor a full document on how to use SET, [visit the SET user manual](https://github.com/trustedsec/social-engineer-toolkit/raw/master/readme/User_Manual.pdf).\n\n<br/>\n\n## Bugs and enhancements\nFor bug reports or enhancements, please open an [issue](https://github.com/trustedsec/social-engineer-toolkit/issues) here.\n<br/>\n"
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1396484375,
          "content": "pexpect\npycrypto\nrequests\npyopenssl\npefile\nimpacket\n# Generate QR Codes\nqrcode\npillow\n# The pymssql project has been discontinued.\npymssql<3.0\n"
        },
        {
          "name": "seautomate",
          "type": "blob",
          "size": 5.109375,
          "content": "#!/usr/bin/env python\n# coding=utf-8\n\nimport sys\nimport os\nimport time\nimport subprocess\nimport re\nfrom distutils.spawn import find_executable\n\n# Py2/3 compatibility\n# Python3 renamed raw_input to input\ntry:\n    input = raw_input\nexcept NameError:\n    pass\n\ntry:\n    reload\n\nexcept NameError:\n    from importlib import reload\n\n# check where we are and load default directory\nif os.path.isdir(\"/usr/local/share/setoolkit\"):\n    if not os.path.isfile(\"setoolkit\"):\n        os.chdir(\"/usr/local/share/setoolkit\")\n        sys.path.append(\"/usr/local/share/setoolkit\")\n\nimport src.core.setcore as core\n\n# if we can't see our config then something didn't go good..\nif not os.path.isfile(\"/etc/setoolkit/set.config\"):\n    core.print_error(\"Cannot locate SET executable. Try running from the local directory.\")\n    core.print_error(\"If this does not work, please run the setup.py install file.\")\n    sys.exit()\n\n\n#\n# Simple client mode for SET\n#\n#\n# try to import pexpect\ntry:\n    import pexpect\n\n# if pexpect fails\nexcept ImportError:\n    print(\"\\n[*] PEXPECT is required, please download and install before running this...\")\n    print(\"[*] Exiting SEAUTOMATE mode...\")\n    sys.exit()\n\n# try to define filename through argument specified during command line mode\ntry:\n    filename = sys.argv[1]\n\n# if we through an exception spit out the command line syntax\nexcept IndexError:\n    print(\"\\nThe Social-Engineer Toolkit Automate - Automatation for SET\")\n    print(\"\\nSimply create a file that has each option you want from menu mode.\")\n    print(\"For example your file should look something like this:\")\n    print(\"\\n2\\n2\\n2\\nhttps://gmail.com\\n2\\n2\\n443\\netc.\\n\")\n    print(\"Usage: ./seautomate <filename>\")\n    sys.exit()\n\n# if the filename doesnt exist, throw an error\nif not os.path.isfile(filename):\n    print(\"\\n[*] Sorry hoss, unable to locate that filename, try again.\\n\")\n    sys.exit()\n\npassword = False\n# if the path is around\nif os.path.isfile(filename):\n    try:\n        print(\"[*] Spawning SET in a threaded process...\")\n        cmd = find_executable('python3') or find_executable('python')\n        child = pexpect.spawn(\"{} setoolkit\".format(cmd))\n        child.expect(\"99\\) Exit the Social-Engineer Toolkit\")\n        with open(filename) as fileopen:\n            for line in fileopen:\n                line = line.rstrip()\n                # if we just use enter send default\n                if line == \"\":\n                    line = \"blank line\"\n\n                #match1 = re.search(\"OMGPASSWORDHERE\", line)\n                #if match1:\n                #    line = line.replace(\"OMGPASSWORDHERE\", \"\")\n                #    password = True\n\n                #if password is False:\n                print(\"[*] Sending command {0} to the interface...\".format(line))\n                #if password is True:\n                #    print(\"[*] Sending command [**********] (password masked) to the interface...\")\n                #    password = False\n\n                if line == \"blank line\":\n                    line = \"\\n\"\n\n                if line == \"CONTROL-C-HERE\":\n                    try:\n                        print(\"[*] This may take a few seconds while SET catches up...\")\n                        child.expect(\"Next line of the body:\")\n                        time.sleep(2)\n                        child.sendline(\"\\n\")\n                        child.sendcontrol('c')\n\n                    # if the user is using pexpect < 2.3\n                    except AttributeError:\n                        print(\"[-] Error: You are running pexpect < 2.3 which is needed for this function\")\n                        choice = input(\"Would you like to install it now yes or no: \")\n                        if choice == \"yes\" or choice == \"y\":\n                            #subprocess.Popen(\"wget http://sourceforge.net/projects/pexpect/files/pexpect/Release%202.3/pexpect-2.3.tar.gz;\"\n                            #                 \"tar -zxvf pexpect-2.3.tar.gz;\"\n                            #                 \"cd pexpect-2.3;\"\n                            #                 \"python setup.py install;\"\n                            #                 \"cd ..;\"\n                            #                 \"rm -rf pexpect-2*\", shell=True).wait()\n                            subprocess.Popen(\"pip install pexpect\", shell=True).wait()\n                            try:\n                                reload(pexpect)\n                                child.sendcontrol('c')\n                            except:\n                                print(\"[*] Relaunch the Social-Engineer Toolkit for changes to apply.\")\n                                sys.exit()\n                if line != \"CONTROL-C-HERE\":\n                    child.sendline(line)\n\n        print(\"[*] Finished sending commands, interacting with the interface..\")\n        child.interact()\n\n    # sometimes pexpect can throw errors upon exit this handles them\n    except OSError:\n        sys.exit()\n\n    # handle keyboardinterrupts (controlc)\n    except KeyboardInterrupt:\n        print(\"[*] Control-C detected, exiting the Social-Engineer Toolkit..\")\n        sys.exit()\n\n    # handle everything else\n    except Exception as e:\n        print(\"[*] Something went wrong, printing error: {0}\".format(e))\n"
        },
        {
          "name": "seproxy",
          "type": "blob",
          "size": 2.10546875,
          "content": "#!/usr/bin/python\n\n#\n# Simple proxy for SET, note will show up in history\n#\n\nimport sys\nimport getpass\nimport os\nimport subprocess\nimport re\n\nimport src.core.setcore as core\n\n# Py2/3 compatibility\n# Python3 renamed raw_input to input\ntry:\n    input = raw_input\nexcept NameError:\n    pass\n\n# grab the operating system\noperating_system = core.check_os()\n\n# if windows then do some stuff\nif operating_system == \"posix\":\n\n    definepath = os.getcwd()\n\n    print(\"\\n[*] Welcome to the SET-Proxy Configuration Utility\")\n    print(\"\\nEnter the proxy setting information below.\\n\\nExample: http://10.3.1.1:8080\\n\")\n\n    try:\n\n        proxy = input(\"Enter the proxy server: \")\n        username = input(\"Enter the username for the proxy (hit enter for none): \")\n        password = getpass.getpass(\"Enter the password for the proxy (hit enter for none): \")\n\n    except KeyboardInterrupt:\n        print(\"\\n[!] Exiting the Social-Engineer Toolkit.\")\n        sys.exit()\n\n    if username != \"\":\n        proxy_string = \"export http_proxy='http://{0}:{1}@{2}'\".format(username, password, proxy)\n    else:\n        proxy_string = \"export http_proxy='http://{0}'\".format(proxy)\n\n    with open(os.path.join(core.userconfigpath, \"proxy.config\"), \"w\") as filewrite:\n        filewrite.write(proxy_string)\n\n    def kill_proc(port, flag):\n        proc = subprocess.Popen(\"netstat -antp | grep '{0}'\".format(port), shell=True, stdout=subprocess.PIPE)\n        stdout_value = proc.communicate()[0]\n        a = re.search(\"\\d+/{0}\".format(flag), stdout_value)\n        if a:\n            b = a.group()\n            b = b.replace(\"/{0}\".format(flag), \"\")\n            subprocess.Popen(\"kill -9 {0} 1> /dev/null 2> /dev/null\".format(b), shell=True).wait()\n\n    # cleans up stale processes from SET\n    try:\n        # kill anything python running on 80\n        kill_proc(\"80\", \"python\")\n        # kill anything on 443 ruby which is generally a rogue listener\n        kill_proc(\"443\", \"ruby\")\n\n    # handle errors\n    except Exception as error:\n        core.log(error)\n\nelse:\n    print(\"[!] Sorry, this only works on posix (nix) based systems and is not compatible with this operating system.\")\n"
        },
        {
          "name": "setoolkit",
          "type": "blob",
          "size": 9.884765625,
          "content": "#!/usr/bin/env python3\n# coding=utf-8\nimport os\nimport re\nimport shutil\nimport subprocess\nimport sys\n\n# Py2/3 compatibility\n# Python3 renamed raw_input to input\ntry:\n    input = raw_input\nexcept NameError:\n    pass\n\n# import main core functionality into SET\nimport src.core.setcore as core\n\n# check which operating system\noperating_system = core.check_os()\n\nif operating_system == \"posix\":\n\n    #\n    # ROOT CHECK\n    #\n\n    if os.geteuid() != 0:\n        print(\"\\n The Social-Engineer Toolkit (SET) - by David Kennedy (ReL1K)\")\n        print(\"\\n Not running as root. \\n\\nExiting the Social-Engineer Toolkit (SET).\\n\")\n        core.exit_set()\n\n# if we are running in the path no need to change\nif os.path.isfile(\"setoolkit\"):\n    pass\n\n# check where we are and load default directory\nelif os.path.isdir(\"/usr/local/share/setoolkit\"):\n    if not os.path.isfile(\"setoolkit\"):\n        os.chdir(\"/usr/local/share/setoolkit\")\n    sys.path.append(\"/usr/local/share/setoolkit\")\n\n# check where we are and load default directory\nelif os.path.isdir(\"/usr/local/share/set\"):\n    if not os.path.isfile(\"setoolkit\"):\n        os.chdir(\"/usr/local/share/set\")\n        sys.path.append(\"/usr/local/share/set\")\n\n# make sure the config file is located in /etc/setoolkit\nif not os.path.isdir(\"/etc/setoolkit/\"):\n    os.makedirs(\"/etc/setoolkit/\")\n    shutil.copyfile(\"src/core/config.baseline\", \"/etc/setoolkit/set.config\")\n\nif not os.path.isfile(\"/etc/setoolkit/set.config\"):\n    shutil.copyfile(\"src/core/config.baseline\", \"/etc/setoolkit/set.config\")\n\n# here we check to ensure we have the latest version\nwith open(\"/etc/setoolkit/set.config\") as fileopen:\n    data = fileopen.read()\n\nif \"CONFIG_VERSION=7.7.9\" not in data:\n    print(\"[*] Overwriting old config for updates to SET. Backing up your old one in /etc/setoolkit/\")\n    shutil.move(\"/etc/setoolkit/set.config\", \"/etc/setoolkit/set.config.bak\")\n    shutil.copyfile(\"src/core/config.baseline\", \"/etc/setoolkit/set.config\")\n\n# import after config checks have been properly created\nfrom src.core.menu import text\nfrom src.core.update_config import update_config\n\n\nif os.path.isfile(os.path.join(core.userconfigpath, \"version.lock\")):\n    os.remove(os.path.join(core.userconfigpath, \"version.lock\"))\n\n# check directory and make it\nif not os.path.isdir(\"src/logs/\"):\n    os.makedirs(\"src/logs/\")\n\n# check set logfile\nif not os.path.isfile(\"src/logs/set_logfile.log\"):\n    # create new log\n    with open(\"src/logs/set_logfile.log\", \"w\") as filewrite:\n        filewrite.write(\"\")\n\n# use ~/.set\nif operating_system == \"posix\":\n    if not os.path.isdir(core.userconfigpath):\n        # create the set variables\n        os.makedirs(core.userconfigpath)\n        # if for some reason it failed to pull the path\n        userdir = os.path.join(os.path.expanduser('~'), '.set')\n        if not os.path.isdir(userdir):\n            os.makedirs(userdir)\n\nif not os.path.isdir(os.path.join(core.userconfigpath, \"reports\")):\n    os.makedirs(os.path.join(core.userconfigpath, \"reports\"))\n\n# check to see if we have python-pycrypto\ntry:\n    from Crypto.Cipher import AES\nexcept ImportError:\n    print(\"[!] The python-pycrypto python module not installed. You will lose the ability to use multi-pyinjector.\")\n    pass\n\n#\n# The Social-Engineer Toolkit (SET)     #\n# Written by: David Kennedy (ReL1K)     #\n#\n#\n# this is the main menu structure for SET\n\n# main menu\n\n# update the main config per load\nupdate_config()\n\n# chmod routine\nif operating_system == \"posix\":\n    # change permissions if nix\n    subprocess.Popen(\"chmod +x seautomate;\"\n                     \"chmod +x set-update;\"\n                     \"chmod +x setup.py;\"\n                     \"chmod +x set-proxy;\"\n                     \"chmod +x src/payloads/ratte/ratteserver;\"\n                     \"chmod +x src/payloads/set_payloads/listener.py\",\n                     stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n\ndns = core.check_config(\"DNS_SERVER=\")\nif dns.lower() == \"on\":\n    import src.core.minifakedns\n    from src.core.setcore import detect_public_ip\n    src.core.minifakedns.start_dns_server(detect_public_ip())\n\n# remove old files\nfor root, dirs, files in os.walk(core.userconfigpath):\n    for f in files:\n        try:\n            match = re.search(\".svn|entries|all-wcprops|props|text-base|prop-base|tmp\", f)\n            if not match:\n                os.unlink(os.path.join(root, f))\n\n        # if they are being used then ignore\n        except:\n            pass\n    # loop through all the directories\n    for d in dirs:\n        try:\n            match = re.search(\".svn|entries|all-wcprops|props|text-base|prop-base|tmp\", d)\n            if not match:\n                shutil.rmtree(os.path.join(root, d))\n        except:\n            pass\n\n# if there isn't a set_config.py file yet, create one\nif not os.path.isfile(\"/etc/setoolkit/set_config.py\"):\n    update_config()\n\ndefine_version = core.get_version()\n\n# create the set.options routine\nwith open(os.path.join(core.userconfigpath, \"set.options\"), \"w\") as filewrite:\n    filewrite.write(\"{This is the main SET configuration file for all options used in SET}\\n\")\n\ntry:\n    # Remove old Signed_Updates\n    if os.path.isfile(os.path.join(core.userconfigpath, \"Signed_Update.jar\")):\n        os.remove(os.path.join(core.userconfigpath, \"Signed_Update.jar\"))\n\n    # initial user menu\n    if not os.path.isfile(\"src/agreement4\"):\n        with open(\"readme/LICENSE\") as fileopen:\n            for line in fileopen:\n                print((line.rstrip()))\n\n        print(\"{0}The Social-Engineer Toolkit is designed purely\"\n              \" for good and not evil. If you are planning on \"\n              \"using this tool for malicious purposes that are \"\n              \"not authorized by the company you are performing \"\n              \"assessments for, you are violating the terms of \"\n              \"service and license of this toolset. By hitting \"\n              \"yes (only one time), you agree to the terms of \"\n              \"service and that you will only use this tool for \"\n              \"lawful purposes only.{1}\".format(core.bcolors.RED, core.bcolors.ENDC))\n        print(core.bcolors.GREEN)\n        choice = input(\"\\nDo you agree to the terms of service [y/n]: \")\n        choice += \" \"  # b/c method below\n        if choice[0].lower() == \"y\":\n            with open(\"src/agreement4\", \"w\") as filewrite:\n                filewrite.write(\"user accepted\")\n            print(core.bcolors.ENDC)\n        else:\n            print(core.bcolors.ENDC + \"[!] Exiting the Social-Engineer Toolkit, have a nice day.\" + core.bcolors.ENDC)\n            sys.exit()\n\n    while True:\n        core.show_banner(define_version, '1')\n        show_main_menu = core.create_menu(text.main_text, text.main_menu)\n\n        # special case of list item 99\n        print('\\n  99) Exit the Social-Engineer Toolkit\\n')\n\n        # main core menu\n        main_menu_choice = (input(core.setprompt(\"0\", \"\")))\n\n        # funny\n        if main_menu_choice == \"hugs\":\n            core.print_warning(\"Have you given someone a hug today? Remember a hug can change the world.\")\n            pause = input(\"\\nPlease give someone a hug then press {return} to continue.\")\n\n        # funny2\n        if main_menu_choice == \"freehugs\":\n            core.print_warning(\"HUGS ARE ALWAYS FREE! NEVER CHARGE! ALWAYS HUG.\")\n            pause = input(\"\\nDo not press return until giving someone a hug.\")\n\n        # funny3\n        if main_menu_choice == \"derbycon\":\n            core.print_warning(core.bcolors.BOLD + \"YAYYYYYYYYYYYYYYYYYYYYYY DerbyCon.\\n\\nDerbyCon 7.0 'Legacy' -- September 22th - 24th 2017\" + core.bcolors.ENDC)\n            pause = input(core.bcolors.BOLD + \"\\nDon't miss it! Sep 23 - Sep 25th! Press {return} to continue.\" + core.bcolors.ENDC)\n\n        # rance\n        if main_menu_choice == \"rance\":\n            core.print_warning(core.bcolors.BOLD + \"We miss you buddy. David Jones (Rance) changed a lot of us and you'll always be apart of our lives (and SET). Fuck Cancer.\" + core.bcolors.ENDC)\n            pause = input(\"Press {return} to continue.\")\n\n        # cavs\n        if main_menu_choice == \"cavs\":\n            core.print_warning(core.bcolors.BOLD + \"2015-2016 CHAMPS BABY!!! C l e e e e e  e v  eeee l a a n n d d d d d d d d d d d \" + core.bcolors.ENDC)\n            pause = input(\"Press {return} to continue.\")\n\n        # quit out\n        if main_menu_choice == 'exit' or main_menu_choice == \"99\" or main_menu_choice == \"quit\":\n            core.exit_set()\n            # cleans up stale processes from SET\n            try:\n                # kill anything python running on 80\n                core.kill_proc(\"80\", \"python\")\n                # kill anything on 443 ruby which is generally a rogue listener\n                core.kill_proc(\"443\", \"ruby\")\n            except:\n                pass\n\n        # load set\n        if main_menu_choice == '1':\n            try:\n                core.module_reload(src.core.set)\n            except:\n                import src.core.set\n\n        # load fasttrack\n        if main_menu_choice == '2':\n            try:\n                core.module_reload(src.core.fasttrack)\n            except:\n                import src.core.fasttrack\n\n        # third party modules\n        if main_menu_choice == '3':\n            try:\n                core.module_reload(src.core.module_handler)\n            except:\n                import src.core.module_handler\n\n        # update set\n        if main_menu_choice == '4':\n            core.update_set()\n\n        # credits\n        if main_menu_choice == '5':\n            update_config()\n\n        # update config\n        if main_menu_choice == '6':\n            core.help_menu()\n\n# handle keyboard interrupts\nexcept KeyboardInterrupt:\n    print((\"\\n\\nThank you for {0}shopping{1} with the Social-Engineer Toolkit.\"\n           \"\\n\\nHack the Gibson...and remember...hugs are worth more \"\n           \"than handshakes.\\n\".format(core.bcolors.RED, core.bcolors.ENDC)))\n\n# handle exceptions\nexcept Exception as error:\n    core.log(error)\n    print(\"\\n\\n[!] Something went wrong, printing the error: \" + str(error))\n\n# cleanup routine\ncore.cleanup_routine()\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.85546875,
          "content": "#!/usr/bin/python\n#\n# quick installer for SET\n#\n#\nfrom __future__ import print_function\nimport subprocess\nimport os\nprint(\"[*] Installing requirements.txt...\")\nsubprocess.Popen(\"pip3 install -r requirements.txt\", shell=True).wait()\nprint(\"[*] Installing setoolkit to /usr/local/share/setoolkit\")\nprint(os.getcwd())\nsubprocess.Popen(\"mkdir /usr/local/share/setoolkit/;mkdir /etc/setoolkit/;cp -rf * /usr/local/share/setoolkit/;cp src/core/config.baseline /etc/setoolkit/set.config\", shell=True).wait()\nprint(\"[*] Creating launcher for setoolkit...\")\nfilewrite = open(\"/usr/local/bin/setoolkit\", \"w\")\nfilewrite.write(\"#!/bin/sh\\ncd /usr/local/share/setoolkit\\n./setoolkit\")\nfilewrite.close()\nprint(\"[*] Done. Chmoding +x.... \")\nsubprocess.Popen(\"chmod +x /usr/local/bin/setoolkit\", shell=True).wait()\nprint(\"[*] Finished. Run 'setoolkit' to start the Social Engineer Toolkit.\")\n"
        },
        {
          "name": "seupdate",
          "type": "blob",
          "size": 0.9892578125,
          "content": "#!/usr/bin/env python\n# coding=utf-8\n#\n# simple git update for set pulling from core modules\n#\nimport os\nimport sys\n\n\n\n# check where we are and load default directory\nif os.path.isdir(\"/usr/local/share/setoolkit\"):\n    if not os.path.isfile(\"se-toolkit\"):\n        os.chdir(\"/usr/local/share/setoolkit\")\n        sys.path.append(\"/usr/local/share/setoolkit\")\n\nimport src.core.setcore as core\n\n# if we can't see our config then something didn't go good..\nif not os.path.isfile(\"/etc/setoolkit/set.config\"):\n    core.print_error(\"Cannot locate SET executable. Try running from the local directory.\")\n    core.print_error(\"If this does not work, please run the setup.py install file.\")\n    sys.exit()\n\ntry:\n    # pull update set from the core libraries\n    core.update_set()\n\n# except keyboard interrupts\nexcept KeyboardInterrupt:\n    print(\"\\n[!] Control-C detected. Exiting updating SET.\")\n\n# handle all other errors\nexcept Exception as e:\n    print(\"\\n[!] Something went wrong.. Printing the error: {0}\".format(e))\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}