{
  "metadata": {
    "timestamp": 1736561144646,
    "page": 91,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "deepset-ai/haystack",
      "stars": 18533,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.0888671875,
          "content": "# Local run files\nqa.db\n**/qa.db\n**/*qa*.db\n**/test-reports\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# documentation\ndocs/pydoc/temp/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# PyCharm\n.idea\n\n# VSCode\n.vscode\n\n# haystack files\nhaystack/document_store/qa.db\ndata\n**/mlruns/**\nsrc\nmodels\nsaved_models\n*_build\nrest_api/file-upload/*\n**/feedback_squad_direct.json\nhaystack/json-schemas\n.haystack_debug\n\n.DS_Store\n\n# http cache (requests-cache)\n**/http_cache.sqlite\n\n# ruff\n.ruff_cache\n\n# Zed configs\n.zed/*\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.24609375,
          "content": "fail_fast: true\n\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.6.0\n    hooks:\n      - id: check-ast # checks Python syntax\n      - id: check-json # checks JSON syntax\n      - id: check-merge-conflict # checks for no merge conflict strings\n      - id: check-shebang-scripts-are-executable # checks all shell scripts have executable permissions\n      - id: check-toml # checks TOML syntax\n      - id: check-yaml # checks YAML syntax\n      - id: end-of-file-fixer # checks there is a newline at the end of the file\n      - id: mixed-line-ending # normalizes line endings\n      - id: no-commit-to-branch # prevents committing to main\n      - id: trailing-whitespace # trims trailing whitespace\n        args: [--markdown-linebreak-ext=md]\n\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.5.0\n    hooks:\n      - id: ruff\n      - id: ruff-format\n\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.3.0\n    hooks:\n      - id: codespell\n        exclude: \"haystack/data/abbreviations\"\n        args: [\"--toml\", \"pyproject.toml\"]\n        additional_dependencies:\n          - tomli\n\n  - repo: https://github.com/rhysd/actionlint\n    rev: v1.7.1\n    hooks:\n      - id: actionlint-docker\n        args: [\"-ignore\", \"SC2102\"]\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.7822265625,
          "content": "cff-version: 1.2.0\nmessage: \"If you use this software, please cite it using these metadata.\"\ntitle: \"Haystack: the end-to-end NLP framework for pragmatic builders\"\ndate-released: 2019-11-14\nurl: \"https://github.com/deepset-ai/haystack\"\nauthors:\n- family-names: Pietsch\n  given-names: Malte\n- family-names: MÃ¶ller\n  given-names: Timo\n- family-names: Kostic\n  given-names: Bogdan\n- family-names: Risch\n  given-names: Julian\n- family-names: Pippi\n  given-names: Massimiliano\n- family-names: Jobanputra\n  given-names: Mayank\n- family-names: Zanzottera\n  given-names: Sara\n- family-names: Cerza\n  given-names: Silvano\n- family-names: Blagojevic\n  given-names: Vladimir\n- family-names: Stadelmann\n  given-names: Thomas\n- family-names: Soni\n  given-names: Tanay\n- family-names: Lee\n  given-names: Sebastian\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 18.013671875,
          "content": "# Contributing to Haystack\n\nFirst off, thanks for taking the time to contribute! :blue_heart:\n\nAll types of contributions are encouraged and valued. See the [Table of Contents](#table-of-contents)\nfor different ways to help and details about how this project handles them. Please make sure to read\nthe relevant section before making your contribution. It will make it a lot easier for us maintainers\nand smooth out the experience for all involved. The community looks forward to your contributions!\n\n> [!TIP]\n> If you like Haystack but just don't have time to contribute, that's fine. There are other easy ways to support the\n> project and show your appreciation, which we would also be very happy about:\n> - Star this repository\n> - Tweet about it\n> - Mention Haystack at local meetups and tell your friends/colleagues\n\n**Table of Contents**\n\n- [Contributing to Haystack](#contributing-to-haystack)\n  - [Code of Conduct](#code-of-conduct)\n  - [I Have a Question](#i-have-a-question)\n  - [Reporting Bugs](#reporting-bugs)\n    - [Before Submitting a Bug Report](#before-submitting-a-bug-report)\n    - [How Do I Submit a Good Bug Report?](#how-do-i-submit-a-good-bug-report)\n  - [Suggesting Enhancements](#suggesting-enhancements)\n    - [Before Submitting an Enhancement](#before-submitting-an-enhancement)\n    - [How Do I Submit a Good Enhancement Suggestion?](#how-do-i-submit-a-good-enhancement-suggestion)\n  - [Contribute code](#contribute-code)\n    - [Where to start](#where-to-start)\n    - [Setting up your development environment](#setting-up-your-development-environment)\n    - [Clone the git repository](#clone-the-git-repository)\n    - [Run the tests locally](#run-the-tests-locally)\n  - [Requirements for Pull Requests](#requirements-for-pull-requests)\n    - [Release notes](#release-notes)\n  - [CI (Continuous Integration)](#ci-continuous-integration)\n  - [Working from GitHub forks](#working-from-github-forks)\n  - [Writing tests](#writing-tests)\n    - [Unit test](#unit-test)\n    - [Integration test](#integration-test)\n    - [End to End (e2e) test](#end-to-end-e2e-test)\n  - [Contributor Licence Agreement (CLA)](#contributor-licence-agreement-cla)\n\n## Code of Conduct\n\nThis project and everyone participating in it is governed by our [Code of Conduct](code_of_conduct.txt).\nBy participating, you are expected to uphold this code. Please report unacceptable behavior to haystack@deepset.ai.\n\n## I Have a Question\n\n> [!TIP]\n> If you want to ask a question, we assume that you have read the available [Documentation](https://docs.haystack.deepset.ai/docs/intro).\n\nBefore you ask a question, it is best to search for existing [Issues](/issues) that might help you. In case you have\nfound a suitable issue and still need clarification, you can write your question in this issue. It is also advisable to\nsearch the internet for answers first.\n\nIf you then still feel the need to ask a question and need clarification, you can use one of our\n[Community Channels](https://haystack.deepset.ai/community), Discord, in particular, is often very helpful.\n\n## Reporting Bugs\n\n### Before Submitting a Bug Report\n\nA good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to\ninvestigate carefully, collect information, and describe the issue in detail in your report. Please complete the\nfollowing steps in advance to help us fix any potential bug as fast as possible.\n\n- Make sure that you are using the latest version.\n- Determine if your bug is really a bug and not an error on your side, for example using incompatible versions.\n  Make sure that you have read the [documentation](https://docs.haystack.deepset.ai/docs/intro). If you are looking\n  for support, you might want to check [this section](#i-have-a-question).\n- To see if other users have experienced (and potentially already solved) the same issue you are having, check if there\n  is not already a bug report existing for your bug or error in the [bug tracker](/issues).\n- Also make sure to search the internet (including Stack Overflow) to see if users outside of the GitHub community have\n  discussed the issue.\n- Collect information about the bug:\n  - OS, Platform and Version (Windows, Linux, macOS, x86, ARM)\n  - Version of Haystack and the integrations you're using\n  - Possibly your input and the output\n  - If you can reliably reproduce the issue, a snippet of code we can use\n\n### How Do I Submit a Good Bug Report?\n\n> [!IMPORTANT]\n> You must never report security-related issues, vulnerabilities, or bugs, including sensitive information to the issue\n> tracker, or elsewhere in public. Instead, sensitive bugs must be reported using [this link](https://github.com/deepset-ai/haystack/security/advisories/new).\n>\n\nWe use GitHub issues to track bugs and errors. If you run into an issue with the project:\n\n- Open an [Issue of type Bug Report](/issues/new?assignees=&labels=bug&projects=&template=bug_report.md&title=).\n- Explain the behavior you would expect and the actual behavior.\n- Please provide as much context as possible and describe the *reproduction steps* that someone else can follow to\n  recreate the issue on their own. This usually includes your code. For good bug reports, you should isolate the problem\n  and create a reduced test case.\n- Provide the information you collected in the previous section.\n\nOnce it's filed:\n\n- The project team will label the issue accordingly.\n- A team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no\n  obvious way to reproduce the issue, the team will ask you for those steps.\n- If the team is able to reproduce the issue, the issue will scheduled for a fix or left to be\n  [implemented by someone](#your-first-code-contribution).\n\n## Suggesting Enhancements\n\nThis section guides you through submitting an enhancement suggestion, including new integrations and improvements\nto existing ones. Following these guidelines will help maintainers and the community to understand your suggestion and\nfind related suggestions.\n\n### Before Submitting an Enhancement\n\n- Make sure that you are using the latest version.\n- Read the [documentation](https://docs.haystack.deepset.ai/docs/intro) carefully and find out if the functionality\n  is already covered, maybe by an individual configuration.\n- Perform a [search](/issues) to see if the enhancement has already been suggested. If it has, add a comment to the\n  existing issue instead of opening a new one.\n- Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to\n  convince the project's developers of the merits of this feature. Keep in mind that we want features that will be\n  useful to the majority of our users and not just a small subset. If you're just targeting a minority of users,\n  consider writing and distributing the integration on your own.\n\n### How Do I Submit a Good Enhancement Suggestion?\n\nEnhancement suggestions are tracked as GitHub issues of type [Feature request for existing integrations](/issues/new?assignees=&labels=feature+request&projects=&template=feature-request-for-existing-integrations.md&title=).\n\n- Use a **clear and descriptive title** for the issue to identify the suggestion.\n- Fill the issue following the template\n\n## Contribute code\n\n> [!IMPORTANT]\n> When contributing to this project, you must agree that you have authored 100% of the content, that you have the\n> necessary rights to the content and that the content you contribute may be provided under the project license.\n\n### Where to start\n\nIf this is your first contribution, a good starting point is looking for an open issue that's marked with the label\n[\"good first issue\"](https://github.com/deepset-ai/haystack/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22).\nThe core contributors periodically mark certain issues as good for first-time contributors. Those issues are usually\nlimited in scope, easily fixable and low priority, so there is absolutely no reason why you should not try fixing them,\nit's a good excuse to start looking into the project and a safe space for experimenting failure: if you don't get the\ngrasp of something, pick another one! Once you become comfortable contributing to Haystack, you can have a look at the\nlist of issues marked as [contributions wanted](https://github.com/orgs/deepset-ai/projects/14/views/1) to look for your\nnext contribution!\n\n### Setting up your development environment\n\nHaystack makes heavy use of [Hatch](https://hatch.pypa.io/latest/), a Python project manager that we use to set up the\nvirtual environments, build the project, and publish packages. As you can imagine, the first step towards becoming a\nHaystack contributor is installing Hatch. There are a variety of installation methods depending on your operating system\nplatform, version, and personal taste: please have a look at [this page](https://hatch.pypa.io/latest/install/#installation)\nand keep reading once you can run from your terminal:\n\n```console\n$ hatch --version\nHatch, version 1.9.3\n```\n\nYou can create a new virtual environment for Haystack with `hatch` by running:\n\n```console\n$ hatch shell\n```\n\n### Clone the git repository\n\nYou won't be able to make changes directly to this repo, so the first step is to [create a fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo).\nOnce your fork is ready, you can clone a local copy with:\n\n```console\n$ git clone https://github.com/YOUR-USERNAME/haystack\n```\n\nIf everything worked, you should be able to do something like this (the output might be different):\n\n```console\n$ cd haystack\n$ hatch version\n2.3.0-rc0\n```\n\nLast, install the pre-commit hooks with:\n\n```bash\npre-commit install\n```\n\nThis utility will run some tasks right before all `git commit` operations. From now on, your `git commit` output for\nHaystack should look something like this:\n\n```\n> git commit -m \"test\"\ncheck python ast.........................................................Passed\ncheck json...........................................(no files to check)Skipped\ncheck for merge conflicts................................................Passed\ncheck that scripts with shebangs are executable..........................Passed\ncheck toml...........................................(no files to check)Skipped\ncheck yaml...........................................(no files to check)Skipped\nfix end of files.........................................................Passed\nmixed line ending........................................................Passed\ndon't commit to branch...................................................Passed\ntrim trailing whitespace.................................................Passed\nruff.....................................................................Passed\ncodespell................................................................Passed\nLint GitHub Actions workflow files...................(no files to check)Skipped\n[massi/contrib d18a2577] test\n 2 files changed, 178 insertions(+), 45 deletions(-)\n```\n\n### Run the tests locally\n\nTests will automatically run in our CI for every commit you push to your PR on Github. In order to save precious CI time\nwe encourage you to run the tests locally before pushing new commits to Github. From the root of the git repository,\nyou can run all the unit tests like this:\n\n```sh\nhatch run test:unit\n```\n\nHatch will create a dedicated virtual environment, sync the required dependencies and run all the unit tests from the\nproject. If you want to run a subset of the tests or even one test in particular, `hatch` will accept all the\noptions you would normally pass to `pytest`, for example:\n\n```sh\n# run one test method from a specific test class in a test file\nhatch run test:unit test/test_logging.py::TestSkipLoggingConfiguration::test_skip_logging_configuration\n```\n\n### Run code quality checks locally\n\nWe also use tools to ensure consistent code style, quality, and static type checking. The quality of your code will be\ntested by the CI, but once again, running the checks locally will speed up the review cycle.\n\n\nTo check your code type checking, run:\n```sh\nhatch run test:types\n```\n\n\nTo check your code format run:\n```sh\nhatch run format-check\n```\n\n\nTo format your code, you can run:\n```sh\nhatch run format\n````\n\n\nTo check your code style according to linting rules run:\n```sh\nhatch run check\nhatch run test:lint\n````\n\n\nIf the linters spot any error, you can fix it before checking in your code:\n```sh\nhatch run fix\n```\n\n\n## Requirements for Pull Requests\n\nTo ease the review process, please follow the instructions in this paragraph when creating a Pull Request:\n\n- For the title, use the [conventional commit convention](https://www.conventionalcommits.org/en/v1.0.0/).\n- For the body, follow the existing [pull request template](https://github.com/deepset-ai/haystack/blob/main/.github/pull_request_template.md) to describe and document your changes.\n\n### Release notes\n\nEach PR must include a release notes file under the `releasenotes/notes` path created with `reno`, and a CI check will\nfail if that's not the case. Pull requests with changes limited to tests, code comments or docstrings, and changes to\nthe CI/CD systems can be labeled with `ignore-for-release-notes` by a maintainer in order to bypass the CI check.\n\nFor example, if your PR is bumping the `transformers` version in the `pyproject.toml` file, that's something that\nrequires release notes. To create the corresponding file, from the root of the repo run:\n\n```\n$ hatch run release-note bump-transformers-to-4-31\n```\n\nA release notes file in YAML format will be created in the appropriate folder, appending a unique id to the name of the\nrelease note you provided (in this case, `bump-transformers-to-4-31`). To add the actual content of the release notes,\nyou must edit the file that's just been created. In the file, you will find multiple sections along with an explanation\nof what they're for. You have to remove all the sections that don't fit your release notes, in this case for example\nyou would fill in the `enhancements` section to describe the change:\n\n```yaml\nenhancements:\n  - |\n    Upgrade transformers to the latest version 4.31.0 so that Haystack can support the new LLama2 models.\n```\n\nYou can now add the file to the same branch containing the code changes. Your release note will be part of your pull\nrequest and reviewed along with any code you changed.\n\n## CI (Continuous Integration)\n\nWe use GitHub Action for our Continuous Integration tasks. This means that as soon as you open a PR, GitHub will start\nexecuting some workflows on your changes, like automated tests, linting, formatting, api docs generation, etc.\n\nIf all goes well, at the bottom of your PR page you should see something like this, where all checks are green.\n\n![Successful CI](docs/img/ci-success.png)\n\nIf you see some red checks (like the following), then something didn't work, and action is needed from your side.\n\n![Failed CI](docs/img/ci-failure-example.png)\n\nClick on the failing test and see if there are instructions at the end of the logs of the failed test.\nFor example, in the case above, the CI will give you instructions on how to fix the issue.\n\n![Logs of failed CI, with instructions for fixing the failure](docs/img/ci-failure-example-instructions.png)\n\n## Working from GitHub forks\n\nIn order for maintainers to be able to help you, we usually ask contributors to give us push access to their fork.\n\nTo do so, please verify that \"Allow edits and access to secrets by maintainers\" on the PR preview page is checked\n(you can check it later on the PR's sidebar once it's created).\n\n![Allow access to your branch to maintainers](docs/img/first_time_contributor_enable_access.png)\n\n## Writing tests\n\nWe formally define three scopes for tests in Haystack with different requirements and purposes:\n\n### Unit test\n- Tests a single logical concept\n- Execution time is a few milliseconds\n- Any external resource is mocked\n- Always returns the same result\n- Can run in any order\n- Runs at every commit in PRs, automated through `hatch run test:unit`\n- Can run locally with no additional setup\n- **Goal: being confident in merging code**\n\n### Integration test\n- Tests a single logical concept\n- Execution time is a few seconds\n- It uses external resources that must be available before execution\n- When using models, cannot use inference\n- Always returns the same result or an error\n- Can run in any order\n- Runs at every commit in PRs, automated through `hatch run test:integration`\n- Can run locally with some additional setup (e.g. Docker)\n- **Goal: being confident in merging code**\n\n### End to End (e2e) test\n- Tests a sequence of multiple logical concepts\n- Execution time has no limits (can be always on)\n- Can use inference\n- Evaluates the results of the execution or the status of the system\n- It uses external resources that must be available before execution\n- Can return different results\n- Can be dependent on the order\n- Can be wrapped into any process execution\n- Runs outside the development cycle (nightly or on demand)\n- Might not be possible to run locally due to system and hardware requirements\n- **Goal: being confident in releasing Haystack**\n\n## Contributor Licence Agreement (CLA)\n\nSignificant contributions to Haystack require a Contributor License Agreement (CLA). If the contribution requires a CLA,\nwe will get in contact with you. CLAs are quite common among company-backed open-source frameworks, and our CLAâs wording\nis similar to other popular projects, like [Rasa](https://cla-assistant.io/RasaHQ/rasa) or\n[Google's Tensorflow](https://cla.developers.google.com/clas/new?domain=DOMAIN_GOOGLE&kind=KIND_INDIVIDUAL)\n(retrieved 4th November 2021).\n\nThe agreement's main purpose is to protect the continued open use of Haystack. At the same time, it also helps in\n\\protecting you as a contributor. Contributions under this agreement will ensure that your code will continue to be\nopen to everyone in the future (âYou hereby grant to Deepset **and anyone** [...]â) as well as remove liabilities on\nyour end (âyou provide your Contributions on an AS IS basis, without warranties or conditions of any kind [...]â). You\ncan find the Contributor Licence Agreement [here](https://cla-assistant.io/deepset-ai/haystack).\n\nIf you have further questions about the licensing, feel free to reach out to contributors@deepset.ai.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0771484375,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2021 deepset GmbH\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.546875,
          "content": "<div align=\"center\">\n  <a href=\"https://haystack.deepset.ai/\"><img src=\"https://raw.githubusercontent.com/deepset-ai/haystack/main/docs/img/banner_20.png\" alt=\"Green logo of a stylized white 'H' with the text 'Haystack, by deepset. Haystack 2.0 is live ð'Â Abstract green and yellow diagrams in the background.\"></a>\n\n|         |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| ------- ||\n| CI/CD   | [![Tests](https://github.com/deepset-ai/haystack/actions/workflows/tests.yml/badge.svg)](https://github.com/deepset-ai/haystack/actions/workflows/tests.yml) [![types - Mypy](https://img.shields.io/badge/types-Mypy-blue.svg)](https://github.com/python/mypy) [![Coverage Status](https://coveralls.io/repos/github/deepset-ai/haystack/badge.svg?branch=main)](https://coveralls.io/github/deepset-ai/haystack?branch=main) [![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff) |\n| Docs    | [![Website](https://img.shields.io/website?label=documentation&up_message=online&url=https%3A%2F%2Fdocs.haystack.deepset.ai)](https://docs.haystack.deepset.ai|\n| Package | [![PyPI](https://img.shields.io/pypi/v/haystack-ai)](https://pypi.org/project/haystack-ai/) ![PyPI - Downloads](https://img.shields.io/pypi/dm/haystack-ai?color=blue&logo=pypi&logoColor=gold) ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/haystack-ai?logo=python&logoColor=gold) [![Conda Version](https://img.shields.io/conda/vn/conda-forge/haystack-ai.svg)](https://anaconda.org/conda-forge/haystack-ai) [![GitHub](https://img.shields.io/github/license/deepset-ai/haystack?color=blue)](LICENSE) [![License Compliance](https://github.com/deepset-ai/haystack/actions/workflows/license_compliance.yml/badge.svg)](https://github.com/deepset-ai/haystack/actions/workflows/license_compliance.yml) |\n| Meta    | [![Discord](https://img.shields.io/discord/993534733298450452?logo=discord)](https://discord.com/invite/xYvH6drSmA) [![Twitter Follow](https://img.shields.io/twitter/follow/haystack_ai)](https://twitter.com/haystack_ai|\n</div>\n\n[Haystack](https://haystack.deepset.ai/) is an end-to-end LLM framework that allows you to build applications powered by\nLLMs, Transformer models, vector search and more. Whether you want to perform retrieval-augmented generation (RAG),\ndocument search, question answering or answer generation, Haystack can orchestrate state-of-the-art embedding models\nand LLMs into pipelines to build end-to-end NLP applications and solve your use case.\n\n## Installation\n\nThe simplest way to get Haystack is via pip:\n\n```sh\npip install haystack-ai\n```\n\nInstall from the `main` branch to try the newest features:\n```sh\npip install git+https://github.com/deepset-ai/haystack.git@main\n```\n\nHaystack supports multiple installation methods including Docker images. For a comprehensive guide please refer\nto the [documentation](https://docs.haystack.deepset.ai/docs/installation).\n\n## Documentation\n\nIf you're new to the project, check out [\"What is Haystack?\"](https://haystack.deepset.ai/overview/intro) then go\nthrough the [\"Get Started Guide\"](https://haystack.deepset.ai/overview/quick-start) and build your first LLM application\nin a matter of minutes. Keep learning with the [tutorials](https://haystack.deepset.ai/tutorials). For more advanced\nuse cases, or just to get some inspiration, you can browse our Haystack recipes in the\n[Cookbook](https://haystack.deepset.ai/cookbook).\n\nAt any given point, hit the [documentation](https://docs.haystack.deepset.ai/docs/intro) to learn more about Haystack, what can it do for you and the technology behind.\n\n## Features\n\n> [!IMPORTANT]\n> **You are currently looking at the readme of Haystack 2.0**. We are still maintaining Haystack 1.x to give everyone\n> enough time to migrate to 2.0. [Switch to Haystack 1.x here](https://github.com/deepset-ai/haystack/tree/v1.x).\n\n- **Technology agnostic:** Allow users the flexibility to decide what vendor or technology they want and make it easy to switch out any component for another. Haystack allows you to use and compare models available from OpenAI, Cohere and Hugging Face, as well as your own local models or models hosted on Azure, Bedrock and SageMaker.\n- **Explicit:** Make it transparent how different moving parts can âtalkâ to each other so it's easier to fit your tech stack and use case.\n- **Flexible:** Haystack provides all tooling in one place: database access, file conversion, cleaning, splitting, training, eval, inference, and more. And whenever custom behavior is desirable, it's easy to create custom components.\n- **Extensible:** Provide a uniform and easy way for the community and third parties to build their own components and foster an open ecosystem around Haystack.\n\nSome examples of what you can do with Haystack:\n\n-   Build **retrieval augmented generation (RAG)** by making use of one of the available vector databases and customizing your LLM interaction, the sky is the limit ð\n-   Perform Question Answering **in natural language** to find granular answers in your documents.\n-   Perform **semantic search** and retrieve documents according to meaning.\n-   Build applications that can make complex decisions making to answer complex queries: such as systems that can resolve complex customer queries, do knowledge search on many disconnected resources and so on.\n-   Scale to millions of docs using retrievers and production-scale components.\n-   Use **off-the-shelf models** or **fine-tune** them to your data.\n-   Use **user feedback** to evaluate, benchmark, and continuously improve your models.\n\n> [!TIP]\n><img src=\"https://github.com/deepset-ai/haystack/raw/main/docs/img/deepset-cloud-logo-lightblue.png\"  width=30% height=30%>\n>\n> Are you looking for a managed solution that benefits from Haystack? [deepset Cloud](https://www.deepset.ai/deepset-cloud?utm_campaign=developer-relations&utm_source=haystack&utm_medium=readme) is our fully managed, end-to-end platform to integrate LLMs with your data, which uses Haystack for the LLM pipelines architecture.\n\n## ð deepset Studio: Your Development Environment for Haystack\n\nUse **deepset Studio** to visually create, deploy, and test your Haystack pipelines. Learn more about it in [our announcement post](https://haystack.deepset.ai/blog/announcing-studio).\n\n![studio](https://github.com/user-attachments/assets/e4f09746-20b5-433e-8261-eca224ac23b3)\n\n\nð [Sign up](https://landing.deepset.ai/deepset-studio-signup)!\n\n## Telemetry\n\nHaystack collects **anonymous** usage statistics of pipeline components. We receive an event every time these components are initialized. This way, we know which components are most relevant to our community.\n\nRead more about telemetry in Haystack or how you can opt out in [Haystack docs](https://docs.haystack.deepset.ai/docs/telemetry).\n\n## ð Community\n\nIf you have a feature request or a bug report, feel free to open an [issue in Github](https://github.com/deepset-ai/haystack/issues). We regularly check these and you can expect a quick response. If you'd like to discuss a topic, or get more general advice on how to make Haystack work for your project, you can start a thread in [Github Discussions](https://github.com/deepset-ai/haystack/discussions) or our [Discord channel](https://discord.com/invite/VBpFzsgRVF). We also check [ð (Twitter)](https://twitter.com/haystack_ai) and [Stack Overflow](https://stackoverflow.com/questions/tagged/haystack).\n\n## Contributing to Haystack\n\nWe are very open to the community's contributions - be it a quick fix of a typo, or a completely new feature! You don't need to be a Haystack expert to provide meaningful improvements. To learn how to get started, check out our [Contributor Guidelines](https://github.com/deepset-ai/haystack/blob/main/CONTRIBUTING.md) first.\n\nThere are several ways you can contribute to Haystack:\n- Contribute to the main Haystack project\n- Contribute an integration on [haystack-core-integrations](https://github.com/deepset-ai/haystack-core-integrations)\n\n> [!TIP]\n>ð **[Check out the full list of issues that are open to contributions](https://github.com/orgs/deepset-ai/projects/14)**\n\n## Who Uses Haystack\n\nHere's a list of projects and companies using Haystack. Want to add yours? Open a PR, add it to the list and let the\nworld know that you use Haystack!\n\n-   [Airbus](https://www.airbus.com/en)\n-   [Alcatel-Lucent](https://www.al-enterprise.com/)\n-   [Apple](https://www.apple.com/)\n-   [BetterUp](https://www.betterup.com/)\n-   [Databricks](https://www.databricks.com/)\n-   [Deepset](https://deepset.ai/)\n-   [Etalab](https://www.deepset.ai/blog/improving-on-site-search-for-government-agencies-etalab)\n-   [Infineon](https://www.infineon.com/)\n-   [Intel](https://github.com/intel/open-domain-question-and-answer#readme)\n-   [Intelijus](https://www.intelijus.ai/)\n-   [Intel Labs](https://github.com/IntelLabs/fastRAG#readme)\n-   [LEGO](https://github.com/larsbaunwall/bricky#readme)\n-   [Netflix](https://netflix.com)\n-   [NOS Portugal](https://www.nos.pt/en/welcome)\n-   [Nvidia](https://developer.nvidia.com/blog/reducing-development-time-for-intelligent-virtual-assistants-in-contact-centers/)\n-   [PostHog](https://github.com/PostHog/max-ai#readme)\n-   [Rakuten](https://www.rakuten.com/)\n-   [Sooth.ai](https://www.deepset.ai/blog/advanced-neural-search-with-sooth-ai)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.0146484375,
          "content": "# Security Policy\n\n## Report a Vulnerability\n\nIf you found a security vulnerability in Haystack, send a message to\n[security@deepset.ai](mailto:security@deepset.ai).\n\nIn your message, please include:\n\n1. Reproducible steps to trigger the vulnerability.\n2. An explanation of what makes you think there is a vulnerability.\n3. Any information you may have on active exploitations of the vulnerability (zero-day).\n\n## Vulnerability Response\n\nWe'll review your report within 5 business days and we will do a preliminary analysis\nto confirm that the vulnerability is plausible. Otherwise, we'll decline the report.\n\nWe won't disclose any information you share with us but we'll use it to get the issue\nfixed or to coordinate a vendor response, as needed.\n\nWe'll keep you updated of the status of the issue.\n\nOur goal is to disclose bugs as soon as possible once a user mitigation is available.\nOnce we get a good understanding of the vulnerability, we'll set a disclosure date after\nconsulting the author of the report and Haystack maintainers.\n"
        },
        {
          "name": "VERSION.txt",
          "type": "blob",
          "size": 0.009765625,
          "content": "2.9.0-rc0\n"
        },
        {
          "name": "code_of_conduct.txt",
          "type": "blob",
          "size": 5.162109375,
          "content": "CONTRIBUTOR COVENANT CODE OF CONDUCT\n====================================\n\nOur Pledge\n----------\n\nWe as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for\neveryone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics,\ngender identity and expression, level of experience, education, socioeconomic status, nationality, personal appearance,\nrace, caste, color, religion, or sexual identity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\n\nOur Standards\n-------------\n\nExamples of behavior that contributes to a positive environment for our community include:\n    - Demonstrating empathy and kindness toward other people\n    - Being respectful of differing opinions, viewpoints, and experiences\n    - Giving and gracefully accepting constructive feedback\n    - Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n    - Focusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n    - The use of sexualized language or imagery, and sexual attention or advances of any kind\n    - Trolling, insulting or derogatory comments, and personal or political attacks\n    - Public or private harassment\n    - Publishing othersâ private information, such as a physical or email address, without their explicit permission\n    - Other conduct which could reasonably be considered inappropriate in a professional setting\n\nEnforcement Responsibilities\n----------------------------\n\nCommunity leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take\nappropriate and fair corrective action in response to any behavior that they deem inappropriate,\nthreatening, offensive, or harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits,\nissues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for\nmoderation decisions when appropriate.\n\nScope\n-----\n\nThis Code of Conduct applies within all community spaces, and also applies when an individual is officially\nrepresenting the community in public spaces. Examples of representing our community include using an official\ne-mail address, posting via an official social media account, or acting as an appointed representative\nat an online or offline event.\n\nEnforcement\n-----------\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible\nfor enforcement at engage@deepset.ai. All complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\n\nEnforcement Guidelines\n----------------------\n\nCommunity leaders will follow these Community Impact Guidelines in determining the consequences for any action\nthey deem in violation of this Code of Conduct:\n\n1. Correction\n    Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\n\n    Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation\n    and an explanation of why the behavior was inappropriate. A public apology may be requested.\n\n2. Warning\n    Community Impact: A violation through a single incident or series of actions.\n\n    Consequence: A warning with consequences for continued behavior. No interaction with the people involved,\n    including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time.\n    This includes avoiding interactions in community spaces as well as external channels like social media.\n    Violating these terms may lead to a temporary or permanent ban.\n\n3. Temporary Ban\n    Community Impact: A serious violation of community standards, including sustained inappropriate behavior.\n\n    Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified\n    period of time. No public or private interaction with the people involved, including unsolicited interaction with\n    those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n\n4. Permanent Ban\n    Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\n\n    Consequence: A permanent ban from any sort of public interaction within the community.\n\nAttribution\n-----------\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by Mozillaâs code of conduct enforcement ladder.\n\nFor answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq.\nTranslations are available at https://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "e2e",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "haystack",
          "type": "tree",
          "content": null
        },
        {
          "name": "license-header.txt",
          "type": "blob",
          "size": 0.1015625,
          "content": "SPDX-FileCopyrightText: ${inceptionYear}-present ${copyrightOwner}\n\nSPDX-License-Identifier: Apache-2.0\n"
        },
        {
          "name": "licenserc.toml",
          "type": "blob",
          "size": 0.34765625,
          "content": "headerPath = \"license-header.txt\"\n\nexcludes = [\n    \".github\",\n    \"docker\",\n    \"docs\",\n    \"examples\",\n    \"proposals\",\n    \"releasenotes\",\n    \"test\",\n    \"CITATION.cff\",\n    \"*.ini\",\n    \"*.jinja2\",\n    \"*.md\",\n    \"*.toml\",\n    \"*.txt\",\n    \"*.yaml\",\n    \"*.wav\",\n]\n\n[properties]\ninceptionYear = 2022\ncopyrightOwner = \"deepset GmbH <info@deepset.ai>\"\n"
        },
        {
          "name": "proposals",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 10.41015625,
          "content": "[build-system]\nrequires = [\"hatchling>=1.8.0\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"haystack-ai\"\ndynamic = [\"version\"]\ndescription = \"LLM framework to build customizable, production-ready LLM applications. Connect components (models, vector DBs, file converters) to pipelines or agents that can interact with your data.\"\nreadme = \"README.md\"\nlicense = \"Apache-2.0\"\nrequires-python = \">=3.8,<3.13\"\nauthors = [{ name = \"deepset.ai\", email = \"malte.pietsch@deepset.ai\" }]\nkeywords = [\n  \"BERT\",\n  \"QA\",\n  \"Question-Answering\",\n  \"Reader\",\n  \"Retriever\",\n  \"albert\",\n  \"language-model\",\n  \"mrc\",\n  \"roberta\",\n  \"search\",\n  \"semantic-search\",\n  \"squad\",\n  \"transfer-learning\",\n  \"transformer\",\n]\nclassifiers = [\n  \"Development Status :: 5 - Production/Stable\",\n  \"Intended Audience :: Science/Research\",\n  \"License :: Freely Distributable\",\n  \"License :: OSI Approved :: Apache Software License\",\n  \"Operating System :: OS Independent\",\n  \"Programming Language :: Python\",\n  \"Programming Language :: Python :: 3\",\n  \"Programming Language :: Python :: 3.8\",\n  \"Programming Language :: Python :: 3.9\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n  \"Programming Language :: Python :: 3.12\",\n  \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n]\ndependencies = [\n  \"pandas\",\n  \"tqdm\",\n  \"tenacity!=8.4.0\",\n  \"lazy-imports\",\n  \"openai>=1.56.1\",\n  \"pydantic\",\n  \"Jinja2\",\n  \"posthog\",                # telemetry\n  \"pyyaml\",\n  \"more-itertools\",         # TextDocumentSplitter\n  \"networkx\",               # Pipeline graphs\n  \"typing_extensions>=4.7\", # typing support for Python 3.8\n  \"requests\",\n  \"numpy\",\n  \"python-dateutil\",\n  \"haystack-experimental\",\n]\n\n[tool.hatch.envs.default]\ninstaller = \"uv\"\ndependencies = [\n  \"pre-commit\",\n  \"ruff\",\n  \"toml\",\n  \"reno\",\n  # dulwich is a reno dependency, they pin it at >=0.15.0 so pip takes ton of time to resolve the dependency tree.\n  # We pin it here to avoid taking too much time.\n  # https://opendev.org/openstack/reno/src/branch/master/requirements.txt#L7\n  \"dulwich>=0.21.0,<1.0.0\",\n]\n\n[tool.hatch.envs.default.scripts]\nrelease-note = \"reno new {args}\"\ncheck = \"ruff check {args}\"\nfix = \"ruff check --fix\"\nformat = \"ruff format {args}\"\nformat-check = \"ruff format --check {args}\"\n\n[tool.hatch.envs.test]\nextra-dependencies = [\n  \"numpy>=2\", # Haystack is compatible both with numpy 1.x and 2.x, but we test with 2.x\n\n  \"transformers[torch,sentencepiece]==4.44.2\", # ExtractiveReader, TransformersSimilarityRanker, LocalWhisperTranscriber, HFGenerators...\n  \"huggingface_hub>=0.27.0\",                   # Hugging Face API Generators and Embedders\n  \"sentence-transformers>=3.0.0\",              # SentenceTransformersTextEmbedder and SentenceTransformersDocumentEmbedder\n  \"langdetect\",                                # TextLanguageRouter and DocumentLanguageClassifier\n  \"openai-whisper>=20231106\",                  # LocalWhisperTranscriber\n  \"arrow>=1.3.0\",                              # Jinja2TimeExtension\n\n  # NamedEntityExtractor\n  \"spacy>=3.8,<3.9\",\n  \"spacy-curated-transformers>=0.2,<=0.3\",\n  \"en-core-web-trf @ https://github.com/explosion/spacy-models/releases/download/en_core_web_trf-3.8.0/en_core_web_trf-3.8.0-py3-none-any.whl\",\n\n  # Converters\n  \"pypdf\",                            # PyPDFToDocument\n  \"pdfminer.six\",                     # PDFMinerToDocument\n  \"markdown-it-py\",                   # MarkdownToDocument\n  \"mdit_plain\",                       # MarkdownToDocument\n  \"tika\",                             # TikaDocumentConverter\n  \"azure-ai-formrecognizer>=3.2.0b2\", # AzureOCRDocumentConverter\n  \"trafilatura\",                      # HTMLToDocument\n  \"python-pptx\",                      # PPTXToDocument\n  \"python-docx\",                      # DocxToDocument\n  \"jq\",                               # JSONConverter\n  \"openpyxl\",                         # XLSXToDocument\n  \"tabulate\",                         # XLSXToDocument\n\n  \"nltk\", # NLTKDocumentSplitter\n\n  # OpenAPI\n  \"jsonref\",  # OpenAPIServiceConnector, OpenAPIServiceToFunctions\n  \"openapi3\",\n\n  # JsonSchemaValidator, Tool\n  \"jsonschema\",\n\n  # Tracing\n  \"opentelemetry-sdk\",\n  \"ddtrace\",\n\n  # Structured logging\n  \"structlog\",\n\n  # Test\n  \"pytest\",\n  \"pytest-bdd\",\n  \"pytest-cov\",\n  \"pytest-custom_exit_code\", # used in the CI\n  \"pytest-asyncio\",\n  \"pytest-rerunfailures\",\n  \"responses\",\n  \"tox\",\n  \"coverage\",\n  \"python-multipart\",\n  \"psutil\",\n  \"mypy\",\n  \"pip\",                     # mypy needs pip to install missing stub packages\n  \"pylint\",\n  \"ipython\",\n]\n\n[tool.hatch.envs.test.scripts]\ne2e = \"pytest e2e\"\nunit = 'pytest --cov-report xml:coverage.xml --cov=\"haystack\" -m \"not integration\" {args:test}'\nintegration = 'pytest --maxfail=5 -m \"integration\" {args:test}'\nintegration-mac = 'pytest --maxfail=5 -m \"integration\" -k \"not tika\" {args:test}'\nintegration-windows = 'pytest --maxfail=5 -m \"integration\" -k \"not tika\" {args:test}'\ntypes = \"mypy --install-types --non-interactive --cache-dir=.mypy_cache/ {args:haystack}\"\nlint = \"pylint -ry -j 0 {args:haystack}\"\n\n[tool.hatch.envs.readme]\ninstaller = \"uv\"\ndetached = true                         # To avoid installing the dependencies from the default environment\ndependencies = [\"haystack-pydoc-tools\"]\n\n[tool.hatch.envs.readme.scripts]\nsync = \"./.github/utils/pydoc-markdown.sh\"\ndelete-outdated = \"python ./.github/utils/delete_outdated_docs.py {args}\"\n\n[project.urls]\n\"CI: GitHub\" = \"https://github.com/deepset-ai/haystack/actions\"\n\"Docs: RTD\" = \"https://haystack.deepset.ai/overview/intro\"\n\"GitHub: issues\" = \"https://github.com/deepset-ai/haystack/issues\"\n\"GitHub: repo\" = \"https://github.com/deepset-ai/haystack\"\nHomepage = \"https://github.com/deepset-ai/haystack\"\n\n[tool.hatch.version]\npath = \"VERSION.txt\"\npattern = \"(?P<version>.+)\"\n\n[tool.hatch.metadata]\nallow-direct-references = true\n\n[tool.hatch.build.targets.sdist]\ninclude = [\"/haystack\", \"/VERSION.txt\"]\n\n[tool.hatch.build.targets.wheel]\npackages = [\"haystack\"]\n\n[tool.codespell]\nignore-words-list = \"ans,astroid,nd,ned,nin,ue,rouge,ist\"\nquiet-level = 3\nskip = \"./test,./e2e\"\n\n[tool.pylint.'MESSAGES CONTROL']\nmax-line-length = 120\ndisable = [\n\n  # To keep\n  \"fixme\",\n  \"c-extension-no-member\",\n\n  # To review:\n  \"missing-docstring\",\n  \"unused-argument\",\n  \"no-member\",\n  \"line-too-long\",\n  \"protected-access\",\n  \"too-few-public-methods\",\n  \"raise-missing-from\",\n  \"invalid-name\",\n  \"duplicate-code\",\n  \"arguments-differ\",\n  \"consider-using-f-string\",\n  \"no-else-return\",\n  \"attribute-defined-outside-init\",\n  \"super-with-arguments\",\n  \"redefined-builtin\",\n  \"abstract-method\",\n  \"unspecified-encoding\",\n  \"unidiomatic-typecheck\",\n  \"no-name-in-module\",\n  \"consider-using-with\",\n  \"redefined-outer-name\",\n  \"arguments-renamed\",\n  \"unnecessary-pass\",\n  \"broad-except\",\n  \"unnecessary-comprehension\",\n  \"subprocess-run-check\",\n  \"singleton-comparison\",\n  \"consider-iterating-dictionary\",\n  \"undefined-loop-variable\",\n  \"consider-using-in\",\n  \"bare-except\",\n  \"unexpected-keyword-arg\",\n  \"simplifiable-if-expression\",\n  \"use-list-literal\",\n  \"broad-exception-raised\",\n\n  # To review later\n  \"cyclic-import\",\n  \"import-outside-toplevel\",\n  \"deprecated-method\",\n]\n[tool.pylint.'DESIGN']\nmax-args = 38           # Default is 5\nmax-attributes = 28     # Default is 7\nmax-branches = 34       # Default is 12\nmax-locals = 45         # Default is 15\nmax-module-lines = 2468 # Default is 1000\nmax-nested-blocks = 9   # Default is 5\nmax-statements = 206    # Default is 50\n\n[tool.pylint.'SIMILARITIES']\nmin-similarity-lines = 6\n\n[tool.pytest.ini_options]\nminversion = \"6.0\"\naddopts = \"--strict-markers\"\nmarkers = [\n  \"unit: unit tests\",\n  \"integration: integration tests\",\n\n  \"generator: generator tests\",\n  \"summarizer: summarizer tests\",\n  \"embedding_dim: uses a document store with non-default embedding dimension (e.g @pytest.mark.embedding_dim(128))\",\n\n  \"tika: requires Tika container\",\n  \"parsr: requires Parsr container\",\n  \"ocr: requires Tesseract\",\n\n  \"elasticsearch: requires Elasticsearch container\",\n  \"weaviate: requires Weaviate container\",\n  \"pinecone: requires Pinecone credentials\",\n  \"faiss: uses FAISS\",\n  \"opensearch\",\n  \"document_store\",\n]\nlog_cli = true\n\n[tool.mypy]\nwarn_return_any = false\nwarn_unused_configs = true\nignore_missing_imports = true\n\n[tool.ruff]\nline-length = 120\ntarget-version = \"py38\"\nexclude = [\".github\", \"proposals\"]\n\n[tool.ruff.format]\nskip-magic-trailing-comma = true\n\n[tool.ruff.lint]\nisort.split-on-trailing-comma = false\nexclude = [\"test/**\", \"e2e/**\"]\nselect = [\n  \"ASYNC\", # flake8-async\n  \"C4\",    # flake8-comprehensions\n  \"C90\",   # McCabe cyclomatic complexity\n  \"E501\",  # Long lines\n  \"EXE\",   # flake8-executable\n  \"F\",     # Pyflakes\n  \"INT\",   # flake8-gettext\n  \"PERF\",  # Perflint\n  \"PL\",    # Pylint\n  \"Q\",     # flake8-quotes\n  \"SIM\",   # flake8-simplify\n  \"SLOT\",  # flake8-slots\n  \"T10\",   # flake8-debugger\n  \"W\",     # pycodestyle\n  \"YTT\",   # flake8-2020\n  \"I\",     # isort\n  # built-in shadowing\n  \"A001\", # builtin-variable-shadowing\n  \"A002\", # builtin-argument-shadowing\n  \"A003\", # builtin-attribute-shadowing\n  # docstring rules\n  \"D102\", # Missing docstring in public method\n  \"D103\", # Missing docstring in public function\n  \"D209\", # Closing triple quotes go to new line\n  \"D205\", # 1 blank line required between summary line and description\n  \"D213\", # summary lines must be positioned on the second physical line of the docstring\n  \"D417\", # undocumented-parameter\n  \"D419\", # undocumented-returns\n]\n\nignore = [\n  \"F401\",    # unused-import\n  \"PERF203\", # `try`-`except` within a loop incurs performance overhead\n  \"PERF401\", # Use a list comprehension to create a transformed list\n  \"PLR1714\", # repeated-equality-comparison\n  \"PLR5501\", # collapsible-else-if\n  \"PLW0603\", # global-statement\n  \"PLW1510\", # subprocess-run-without-check\n  \"PLW2901\", # redefined-loop-name\n  \"SIM108\",  # if-else-block-instead-of-if-exp\n  \"SIM115\",  # open-file-with-context-handler\n  \"SIM118\",  # in-dict-keys\n]\n\n[tool.ruff.lint.mccabe]\nmax-complexity = 28\n\n[tool.ruff.lint.per-file-ignores]\n\"examples/basic_qa_pipeline.py\" = [\"C416\"]\n\"haystack/preview/testing/document_store.py\" = [\"C416\", \"F821\"]\n\"haystack/telemetry.py\" = [\"F821\"]\n\n[tool.ruff.lint.pylint]\nallow-magic-value-types = [\"float\", \"int\", \"str\"]\nmax-args = 14                                     # Default is 5\nmax-branches = 21                                 # Default is 12\nmax-public-methods = 20                           # Default is 20\nmax-returns = 7                                   # Default is 6\nmax-statements = 60                               # Default is 50\n\n[tool.coverage.run]\nomit = [\"haystack/testing/*\"]\n"
        },
        {
          "name": "releasenotes",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.4208984375,
          "content": "[tox]\nisolated_build = true\nenvlist = py37\n\n\n[testenv]\nchangedir = test\nextras =\n    test\nsetenv =\n    COVERAGE_FILE = test-reports/.coverage\n    PYTEST_ADDOPTS = --junitxml=test-reports/{envname}/junit.xml -vv\ncommands =\n    coverage run --source haystack --parallel-mode -m pytest {posargs}\n    coverage combine\n    coverage report -m\n    coverage html -d test-reports/coverage-html\n    coverage xml -o test-reports/coverage.xml\n"
        }
      ]
    }
  ]
}