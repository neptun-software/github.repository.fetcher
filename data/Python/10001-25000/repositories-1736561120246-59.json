{
  "metadata": {
    "timestamp": 1736561120246,
    "page": 59,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "magic-wormhole/magic-wormhole",
      "stars": 20654,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 1.7578125,
          "content": "# adapted from https://packaging.python.org/en/latest/appveyor/\n\n\nenvironment:\n  # we tell Tox to use \"twisted[windows]\", to get pypiwin32 installed\n  #TWISTED_EXTRAS: \"[windows]\"\n  # that didn't work (it seems to work when I run it locally, but on appveyor\n  # it fails to install the pypiwin32 package). So don't bother telling\n  # Twisted to support windows: just install it ourselves.\n  # EXTRA_DEPENDENCY: \"pypiwin32\"\n  matrix:\n    # For Python versions available on Appveyor, see\n    # http://www.appveyor.com/docs/installed-software#python\n    - PYTHON: \"C:\\\\Python37-x64\"\n      TOXENV: py37\n\nmatrix:\n  allow_failures:\n    - PYTHON: \"C:\\\\Python37-x64\"\n      # appveyor does not yet install python-3.7\n\ninstall:\n  - |\n    %PYTHON%\\python.exe -m pip install wheel tox\n\n# note:\n# %PYTHON% has: python.exe\n# %PYTHON%\\Scripts has: pip.exe, tox.exe (and others installed by bare pip)\n\n\nbuild: off\n\ntest_script:\n  # Put your test command here.\n  # Note that you must use the environment variable %PYTHON% to refer to\n  # the interpreter you're using - Appveyor does not do anything special\n  # to put the Python version you want to use on PATH.\n  - |\n    misc\\windows-build.cmd %PYTHON%\\Scripts\\tox.exe\n\nafter_test:\n  # This step builds your wheels.\n  # Again, you only need build.cmd if you're building C extensions for\n  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct\n  # interpreter\n  - |\n    misc\\windows-build.cmd %PYTHON%\\python.exe setup.py bdist_wheel\n\nartifacts:\n  # bdist_wheel puts your built wheel in the dist directory\n  - path: dist\\*\n\n#on_success:\n#  You can use this step to upload your artifacts to a public website.\n#  See Appveyor's documentation for more details. Or you can simply\n#  access your wheels from the Appveyor \"artifacts\" tab for your build.\n"
        },
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.6806640625,
          "content": "# -*- mode: conf -*-\n\n[run]\n# only record trace data for wormhole.*\nsource =\n   wormhole\n# and don't trace the test files themselves, or Versioneer's stuff\nomit =\n   src/wormhole/test/*\n   src/wormhole/_version.py\n\n\n# This allows 'coverage combine' to correlate the tracing data built while\n# running tests in multiple tox virtualenvs. To take advantage of this\n# properly, use \"coverage erase\" before tox, \"coverage run --parallel-mode\"\n# inside tox to avoid overwriting the output data (by writing it into\n# .coverage-XYZ instead of just .coverage), and run \"coverage combine\"\n# afterwards.\n\n[paths]\nsource =\n       src/\n       .tox/*/lib/python*/site-packages/\n       .tox/pypy*/site-packages/\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.037109375,
          "content": "src/wormhole/_version.py export-subst\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6845703125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n.eggs\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n_trial_temp/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n/twistd.pid\n/relay.sqlite\n/misc/node_modules/\n/.automat_visualize/\n/docs/state-machines/*.png\n\n# Virtual environment stuff\nvenv/\n\n# do not accidentally commit\nPRIVATE-release-token\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.8095703125,
          "content": "# Read the Docs configuration file for Sphinx projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the OS, Python version and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.12\"\n    # You can also specify other tool versions:\n    # nodejs: \"20\"\n    # rust: \"1.70\"\n    # golang: \"1.20\"\n\n# Build documentation in the \"docs/\" directory with Sphinx\nsphinx:\n  configuration: docs/conf.py\n  # You can configure Sphinx to use a different builder, for instance use the dirhtml builder for simpler URLs\n  # builder: \"dirhtml\"\n  # Fail on all warnings to avoid broken references\n  # fail_on_warning: true\n\n# See also https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n  install:\n    - requirements: docs/requirements.txt\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.810546875,
          "content": "language: python\n# defaults: the py3.7 environment overrides these\ndist: trusty\n\ncache: pip\nbefore_cache:\n  - rm -f $HOME/.cache/pip/log/debug.log\nbranches:\n  except:\n    - /^WIP-.*$/\ninstall:\n  - pip install -U pip tox virtualenv codecov\nafter_success:\n  - codecov\nmatrix:\n  include:\n    - python: 2.7\n      script: tox -e py27-nodilate\n    - python: 3.5\n      script: tox -e py35-coverage\n    - python: 3.6\n      script: tox -e py36-coverage\n    - python: 3.7\n      dist: xenial\n      script: tox -e py37-coverage\n    - python: 3.8\n      dist: bionic\n      script: tox -e py38-coverage\n    - python: nightly\n      script: tox -e py-coverage\n    - python: 3.6\n      script: tox -e flake8less\n      env: FLAKE8\n    - python: 3.7\n      dist: xenial\n      script: tox -e docs\n      env: DOCS\n  allow_failures:\n    - python: nightly\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Brian Warner\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.359375,
          "content": "include versioneer.py\ninclude src/wormhole/_version.py\ninclude LICENSE README.md NEWS.md\nrecursive-include docs *.md *.rst *.dot\ninclude docs/wormhole.1 docs/Makefile docs/conf.py\ninclude docs/state-machines/Makefile\ninclude .coveragerc tox.ini snapcraft.yaml\ninclude misc/windows-build.cmd\ninclude misc/*.py misc/web/*.html misc/web/*.js misc/web/*.css\ninclude pyi/*\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.080078125,
          "content": "# How to Make a Release\n# ---------------------\n#\n# This file answers the question \"how to make a release\" hopefully\n# better than a document does (only meejah and warner may currently do\n# the \"upload to PyPI\" part anyway)\n#\n\ndefault:\n\techo \"see Makefile\"\n\ncompletions:\n\tbash -c '_WORMHOLE_COMPLETE=bash_source wormhole > wormhole_complete.bash'\n\tzsh -c '_WORMHOLE_COMPLETE=zsh_source wormhole > wormhole_complete.zsh'\n\tfish -c '_WORMHOLE_COMPLETE=fish_source wormhole > wormhole_complete.fish'\n\nrelease-clean:\n\t@echo \"Cleanup stale release: \" `python newest-version.py`\n\t-rm NEWS.md.asc\n\trm dist/magic[_-]wormhole-`python newest-version.py`.tar.gz*\n\trm dist/magic_wormhole-`python newest-version.py`-py3-none-any.whl*\n\tgit tag -d `python newest-version.py`\n\n# create a branch, like: git checkout -b prepare-release-0.16.0\n# then run these, so CI can run on the release\nrelease:\n\t@echo \"Is checkout clean?\"\n\tgit diff-files --quiet\n\tgit diff-index --quiet --cached HEAD --\n\n\t@echo \"Install required build software\"\n\tpython3 -m pip install --editable .[build]\n\n\t@echo \"Test README\"\n\tpython3 setup.py check -r -s\n\n\t@echo \"Is GPG Agent running, and has key?\"\n\tgpg --pinentry=loopback -u meejah@meejah.ca --armor --clear-sign NEWS.md\n\n\t@echo \"Bump version and create tag\"\n\tpython3 update-version.py\n#\tpython3 update-version.py --patch  # for bugfix release\n\n\t@echo \"Build and sign wheel\"\n\tpython3 setup.py bdist_wheel\n\tgpg --pinentry=loopback -u meejah@meejah.ca --armor --detach-sign dist/magic_wormhole-`git describe --abbrev=0`-py3-none-any.whl\n\tls dist/*`git describe --abbrev=0`*\n\n\t@echo \"Build and sign source-dist\"\n\tpython3 setup.py sdist\n\tgpg --pinentry=loopback -u meejah@meejah.ca --armor --detach-sign dist/magic_wormhole-`git describe --abbrev=0`.tar.gz\n\tls dist/*`git describe --abbrev=0`*\n\nrelease-test:\n\tgpg --verify dist/magic_wormhole-`git describe --abbrev=0`.tar.gz.asc\n\tgpg --verify dist/magic_wormhole-`git describe --abbrev=0`-py3-none-any.whl.asc\n\tpython -m venv testmf_venv\n\ttestmf_venv/bin/pip install --upgrade pip\n\ttestmf_venv/bin/pip install dist/magic_wormhole-`git describe --abbrev=0`-py3-none-any.whl\n\ttestmf_venv/bin/wormhole --version\n\ttestmf_venv/bin/pip uninstall -y magic_wormhole\n\ttestmf_venv/bin/pip install dist/magic_wormhole-`git describe --abbrev=0`.tar.gz\n\ttestmf_venv/bin/wormhole --version\n\trm -rf testmf_venv\n\nrelease-upload:\n\ttwine upload --username __token__ --password `cat PRIVATE-release-token` dist/magic_wormhole-`git describe --abbrev=0`-py3-none-any.whl dist/magic_wormhole-`git describe --abbrev=0`-py3-none-any.whl.asc dist/magic_wormhole-`git describe --abbrev=0`.tar.gz dist/magic_wormhole-`git describe --abbrev=0`.tar.gz.asc\n\tmv dist/*-`git describe --abbrev=0`.tar.gz.asc signatures/\n\tmv dist/*-`git describe --abbrev=0`-py3-none-any.whl.asc signatures/\n\tgit add signatures/magic_wormhole-`git describe --abbrev=0`.tar.gz.asc\n\tgit add signatures/magic_wormhole-`git describe --abbrev=0`-py3-none-any.whl.asc\n\tgit commit -m \"signatures for release\"\n\tgit push origin-push `git describe --abbrev=0`\n\n\ndilation.png: dilation.seqdiag\n\tseqdiag --no-transparency -T png --size 1000x800 -o dilation.png\n"
        },
        {
          "name": "NEWS.md",
          "type": "blob",
          "size": 29.1142578125,
          "content": "User-visible changes in \"magic-wormhole\":\n\n## Upcoming Release\n\n* Improve the example to act more like send/receive (#558, @OndrewBot)\n* Display a QR code by default for \"wormhole send\" (#555, @ferada + @meejah)\n  This encodes \"wormhole-transfer:M-word0-word1\" per the spec:\n  https://github.com/magic-wormhole/magic-wormhole-protocols/blob/main/uri-scheme.md\n* Add sequence diagram\n* Support Read the Docs pull-request builds\n* Drop support for Python 3.8 (#556)\n* (add release-notes here when making PRs)\n\n## Release 0.17.0 (23-Oct-2024)\n\n* Bump magic-wormhole-transit-relay to 0.3.1 for testing, and fix (#543)\n* Fix test regression under Twisted 24.10.0 (#553)\n\n## Release 0.16.0 (3-Oct-2024)\n\n* Updated to python-spake2 version 0.9\n* Removed more Python2-isms\n\n\n## Release 0.15.0 (7-Aug-2024)\n\n* Incorporate attrs' zope-interface support (#492, #527, from https://github.com/meejah)\n* Add \"codespell\" to correct spelling (#526, from https://github.com/yarikoptic)\n* Fix bash completions (#525, from https://github.com/RobertoD91)\n* run tests properly when Noise is not installed (#522, from https://github.com/anarcat)\n\n\n## Release 0.14.0 (28-Mar-2024)\n\n* Add completion files for bash, zsh and fish (#498)\n* Python 3.12 added to CI, versioneer updated (#505)\n* Support streaming compression of directories (#503, from https://github.com/pR0Ps/)\n* Remove obsolete compatibility code (thanks https://github.com/a-detiste/)\n* Add \"ecosystem\" document\n\n\n## Release 0.13.0 (10-Aug-2023)\n\n* Python 2.7 support is dropped (#457)\n* Python 3.5 and 3.6 are past their EOL date and support is dropped (#448)\n* SECURITY: Replace \"weird\" characters in receiver's display (#476)\n* SECURITY: all past binary signatures are now in Git\n* Use the HKDF primitive from \"cryptography\" (#462)\n* `wormhole receive` now accepts `--allocate-code` so that a sender can\n  use `--code` to send them a file (#450)\n* Stream to disk after 10MB on directory receive (#447)\n* Handle SSH keys with comments properly (#434)\n* Properly parse IPv6 Transit address (#461)\n\nAlso of interest to developers in this release are a few changes to the experimental Dilation implementation and description; some documentation cleanups; dropping of dependencies; and some test cleanups.\nThe Dilation changes properly send `use-version` and split messages over Noise-sized chunks more seamlessly (allowing the specified 4-byte maximum message size at the application layer).\n\nFor packagers: PyPI has stopped serving detached signature files.\nGoing forward, all signatures will be committed to Git (in the signatures/ subdirectory).\nAll available signatures from PyPI for historic releases have been added here too.\n\nThanks to the many contributors of bug-fixes, patches, and other help with this\nrelease:\n\n* Jelle van der Waa https://github.com/jelly (#466)\n* Matthias Riße https://github.com/matrss (#432, #434)\n* meejah https://meejah.ca (#484, #481, #483, #455, #477, #464, #456, #460)\n* Perseid https://github.com/Perseid (#476)\n* FelisDiligens https://github.com/FelisDiligens (#461)\n* Casey Link https://github.com/Ramblurr (#468)\n* Kian-Meng Ang https://github.com/kianmeng (#452)\n* sitiom https://github.com/sitiom (#436)\n* Sagar Howal https://github.com/sagarhowal (#410)\n* Adam Sroka https://github.com/adam-sroka (#403, #404)\n* vu3rdd https://github.com/vu3rdd (reviews)\n\n\n## Release 0.12.0 (04-Apr-2020)\n\n* A command like `wormhole send /dev/fd0` can send the contents of the named\n  block device (USB stick, SD card, floppy, etc), resulting in a plain file\n  on the other side. (#323)\n* Change \"accept this file?\" default answer from no to yes. (#327 #330 #331)\n* Actually use tempfile for large directory transfers. This fixes a five-year\n  old bug which prevents transfers of directories larger than available RAM\n  by finally really building the temporary zipfile on disk. (#379)\n* Accept 'wss' for TLS-protected relay connections, which default to port 443\n  if no other port is accepted. A future release will change the public relay\n  to use TLS. (#144)\n* Drop support for python3.4\n* Stall `--verify` long enough to send the verifier. This fixes a bug when\n  both sides use `--verify`, the receiver uses tab-completion, the sender\n  sees the verifier and waits for the user to confirm, but the receiver\n  cannot show the verifier (enabling that confirmation) until the sender\n  approves the transfer. (#349)\n\nThis release also includes an incomplete implementation of the new \"Dilation\"\nAPI (see ticket #312 for details). In the future this will enable restarting\ninterrupted transfers, tolerating changes in network address, bidirectional\ntransfers in a long-running GUI/daemon process, and more. The protocol is not\nfinalized, nor is it backward compatible with the old \"Transit\" protocol yet,\nso there is no CLI access so far. The code is present and tested to make sure\nit doesn't regress and for ease of development, but intrepid folks who want\nto try it out will need to write a client first (and be aware that the\nprotocol may change out from under them). A future release will add\ncompatibility negotiation with old clients and start using the new protocol.\n\nPRs and tickets addressed in this release: #144 #312 #318 #321 #323 #327 #330\n#331 #332 #339 #349 #361 #365 #368 #367 #378 #379.\n\nThanks to the many contributors of bugs, patches, and other help with this\nrelease:\n\n* Adam Spiers aka @aspiers\n* Евгений Протозанов aka @WeirdCarrotMonster\n* Edward Betts aka @EdwardBetts\n* Jacek Politowski aka @jpolnetpl\n* Julian Stecklina aka @blitz\n* Jürgen Gmach aka @jugmac00\n* Louis Wilson aka @louiswins\n* Miro Hrončok aka @hroncok\n* Moritz Schlichting aka @morrieinmaas\n* Shea Polansky aka @Phyxius\n* @sneakypete81\n\n\n## Release 0.11.2 (13-Nov-2018)\n\nRerelease to fix the long description on PyPI. Thanks to Marius Gedminas for\ntracking down the problem and providing the fix. (#316)\n\n\n## Release 0.11.1 (13-Nov-2018)\n\n* Fix `python -m wormhole` on py2. (#315)\n\nThanks to Marius Gedminas, FreddieHo, and Jakub Wilk for patches and bug\nreports in this release.\n\n\n## Release 0.11.0 (16-Oct-2018)\n\n* Python-3.7 compatibility was fixed. (#306)\n* Support for Python-3.4 on Windows has been dropped. py3.4 is still\n  supported on unix-like operating systems.\n* The client version is now sent to the mailbox server for each connection. I\n  strive to have the client share as little information as possible, but I\n  think this will help me improve the protocol by giving me a better idea of\n  client-upgrade adoption rates. (#293)\n\nPackaging changes:\n\n* We removed the Rendezvous Server (now named the \"Mailbox Server\") out to a\n  separate package and repository named `magic-wormhole-mailbox-server`. We\n  still import it for tests. Use `pip install magic-wormhole-mailbox-server`\n  to run your own server. (#240)\n* The code is now formatted to be PEP8 compliant. (#296)\n* The Dockerfile was removed: after the Mailbox Server was moved out, I don't\n  think it was relevant. (#295)\n\nThanks to Andreas `Baeumla` Bäuml, Marius `mgedmin` Gedminas, Ofek `ofek`\nLev, Thomas `ThomasWaldmann` Waldmann, and Vasudev `copyninja` Kamath for\npatches and bug reports in this release.\n\n\n## Release 0.10.5 (14-Feb-2018)\n\n* Upgrade to newer python-spake2, to improve startup speed by not computing\n  blinding factors for unused parameter sets. On a Raspberry Pi 3, this\n  reduces \"wormhole --version\" time from ~19s to 7s.\n* Fix a concurrency bug that could cause a crash if the server responded too\n  quickly. (#280)\n\n\n## Release 0.10.4 (28-Jan-2018)\n\nMinor client changes:\n\n* accept `$WORMHOLE_RELAY_URL` and `$WORMHOLE_TRANSIT_HELPER` environment\n  variables, in addition to command-line arguments (#256)\n* fix --tor-control-port=, which was completely broken before. If you use\n  --tor but not --tor-control-port=, we'll try the default control ports\n  before falling back to the default SOCKS port (#252)\n* fix more directory-separator pathname problems, especially for\n  bash-on-windows (#251)\n* change `send` output format to make copy-paste easier (#266, #267)\n\nWe also moved the docs to readthedocs\n(https://magic-wormhole.readthedocs.io/), rather than pointing folks at the\nGitHub rendered markdown files. This should encourage us to write more\ninstructional text in the future.\n\nFinally, we removed the Transit Relay server code from the `magic-wormhole`\npackage and repository. It now lives in a separate repository named\n`magic-wormhole-transit-relay`, and we only import it for tests. If you'd\nlike to run a transit relay, you'll want to use `pip install\nmagic-wormhole-transit-relay`.\n\nThanks to meejah, Jonathan \"jml\" Lange, Alex Gaynor, David \"dharrigan\"\nHarrigan, and Jaye \"jtdoepke\" Doepke, for patches and bug reports in this\nrelease.\n\n\n## Release 0.10.3 (12-Sep-2017)\n\nMinor client changes:\n\n* `wormhole help` should behave like `wormhole --help` (#61)\n* accept unicode pathnames (although bugs likely remain) (#223)\n* reject invalid codes (with space, or non-numeric prefix) at entry (#212)\n* docs improvements (#225, #249)\n\nServer changes:\n\n* `wormhole-server start` adds `--relay-database-path` and\n  `--stats-json-path` (#186)\n* accept `--websocket-protocol-option=` (#196, #197)\n* increase RLIMIT_NOFILE to allow more simultaneous client connections (#238)\n* \"crowded\" mailboxes now deliver an error to clients, so they should give up\n  instead of reconnecting (#211)\n* construct relay DB more safely (#189)\n\nIn addition, the snapcraft packaging was updated (#202), and `setup.py` now\nproperly marks the dependency on `attrs` (#248).\n\nThanks to cclauss, Buckaroo9, JP Calderone, Pablo Oliveira, Leo Arias, Johan\nLindskogen, lanzelot1989, CottonEaster, Chandan Rai, Jaakko Luttinen, Alex\nGaynor, and Quentin Hibon for patches and bug reports fixed in this release.\n\n\n## Release 0.10.2 (26-Jun-2017)\n\nWebSocket connection errors are now reported properly. Previous versions\ncrashed with an unhelpful `automat._core.NoTransition` exception when\nthe TCP connection was established but WebSocket negotiation could not\ncomplete (e.g. the URL path was incorrect and the server reported a 404,\nor we connected to an SMTP or other non-HTTP server). (#180)\n\nThe unit test suite should now pass: a CLI-version advertisement issue\ncaused the 0.10.1 release tests to fail.\n\nThanks to Fabien \"fdev31\" Devaux for bug reports addressed in this\nrelease.\n\n\n## Release 0.10.1 (26-Jun-2017)\n\nServer-only: the rendezvous server no longer advertises a CLI version\nunless specifically requested (by passing --advertise-version= to\n`wormhole-server start`). The public server no longer does this, so e.g.\n0.10.0 clients will not emit a warning about the server recommending the\n0.9.2 release. This feature was useful when the only way to use\nmagic-wormhole was to install the CLI tool with pip, however now that\n0.9.1 is in debian Stretch (and we hope to maintain compatibility with\nit), the nag-you-to-upgrade messages probably do more harm than good.\n(#179)\n\nNo user-visible client-side changes.\n\nThanks to ilovezfs and JP Calderone for bug reports addressed in this\nrelease.\n\n\n## Release 0.10.0 (24-Jun-2017)\n\nThe client-side code was completely rewritten, with proper Automat state\nmachines. The only immediately user-visible consequence is that\nrestarting the rendezvous server no longer terminates all waiting\nclients, so server upgrades won't be quite so traumatic. In the future,\nthis will also support \"Journaled Mode\" (see docs/journal.md for\ndetails). (#42, #68)\n\nThe programmatic API has changed (see docs/api.md). Stability is not\npromised until we reach 1.0, but this should be close, at least for the\nnon-Transit portions.\n\n`wormhole send DIRECTORY` can now handle larger (>2GB) directories.\nHowever the entire zipfile is built in-RAM before transmission, so the\nmaximum size is still limited by available memory (follow #58 for\nprogress on fixing this). (#138)\n\n`wormhole rx --output-file=` for a pre-existing file will now overwrite\nthe file (noisily), instead of terminating with an error. (#73)\n\nWe now test on py3.6. Support for py3.3 was dropped. Magic-wormhole\nshould now work on NetBSD. (#158)\n\nAdded a Dockerfile to build a rendezvous/transit-relay server. (#149)\n\n`wormhole-server --disallow-list` instructs the rendezvous server to not\nhonor \"list nameplates\" requests, effectively disabling tab-completion\nof the initial numeric portion of the wormhole code, but also making DoS\nattacks slightly easier to detect. (#53, #150)\n\n`wormhole send --ignore-unsendable-files` will skip things that cannot\nbe sent (mostly dangling symlinks and files for which you do not have\nread permission, but possibly also unix-domain sockets, device nodes,\nand pipes). (#112, #161)\n\n`txtorcon` is now required by default, so the `magic-wormhole[tor]`\n\"extra\" was removed, and a simple `pip install magic-wormhole` should\nprovide tor-based transport as long as Tor itself is available. Also,\nTor works on py3 now. (#136, #174)\n\n`python -m wormhole` is an alternative way to run the CLI tool. (#159)\n\n`wormhole send` might handle non-ascii (unicode) filenames better now.\n(#157)\n\nThanks to Alex Gaynor, Atul Varma, dkg, JP Calderone, Kenneth Reitz,\nKurt Rose, maxalbert, meejah, midnightmagic, Robert Foss, Shannon\nMulloy, and Shirley Kotian, for patches and bug reports in this release\ncycle. A special thanks to Glyph, Mark Williams, and the whole\n#twisted crew at PyCon for help with the transition to Automat.\n\n\n## Release 0.9.2 (16-Jan-2017)\n\nTor support was rewritten. `wormhole send`, `wormhole receive`,\n`wormhole ssh invite`, and `wormhole ssh accept` all now accept three\nTor-related arguments:\n\n* `--tor`: use Tor for all connections, and hide all IP addresses\n* `--launch-tor`: launch a new Tor process instead of using an existing\n  one\n* `--tor-control-port=`: use a specific control port, instead of using\n  the default\n\nIf Tor is already running on your system (either as an OS-installed\npackage, or because the\n[TorBrowser](https://www.torproject.org/projects/torbrowser.html)\napplication is running), simply adding `--tor` should be sufficient. If\nTor is installed but not running, you may need to use both, e.g.\n`wormhole send --tor --launch-tor`. See docs/tor.md for more details.\nNote that Tor support must be requested at install time (with `pip\ninstall magic-wormhole[tor]`), and only works on python2.7 (not py3).\n(#64, #97)\n\nThe relay and transit URLs were changed to point at the project's\nofficial domain name (magic-wormhole.io). The servers themselves are\nidentical (only the domain name changed, not the IP address), so this\nrelease is fully compatible with previous releases.\n\nA packaging file for \"snapcraft.io\" is now included. (#131)\n\n`wormhole receive` now reminds you that tab-completion is available, if\nyou didn't use the Tab key while entering the code. (#15)\n\n`wormhole receive` should work on cygwin now (a problem with the\nreadline-completion library caused a failure on previous releases).\n(#111)\n\nThanks to Atul Varma, Leo Arias, Daniel Kahn Gillmor, Christopher Wood,\nKostin Anagnostopoulos, Martin Falatic, and Joey Hess for patches and\nbug reports in this cycle.\n\n\n## Release 0.9.1 (01-Jan-2017)\n\nThe `wormhole` client's `--transit-helper=` argument can now include a\n\"relay priority\" via a numerical `priority=` field, e.g.\n`--transit-helper tcp:example.org:12345:priority=2.5`. Clients exchange\ntransit relay suggestions, then try to use the highest-priority relay\nfirst, falling back to others after a few seconds if necessary. Direct\nconnections are always preferred to a relay. Clients running 0.9.0 or\nearlier will ignore priorities, and unmarked relay arguments have an\nimplicit priority of 0. (#103)\n\nOther changes:\n\n* clients now tolerate duplicate peer messages: in the future, this will\n  help clients recover from intermittent rendezvous connections (#121)\n* rendezvous server: ensure release() and close() are idempotent (from\n  different connections), also for lost-connection recovery (#118)\n* transit server: respect --blur-usage= by not logging connections\n* README: note py3.6 compatibility\n\nThanks to xloem, kneufeld, and meejah for their help this cycle.\n\n\n## Release 0.9.0 (24-Dec-2016)\n\nThis release fixes an important \"Transit Relay\" bug that would have\nprevented future versions from using non-default relay servers. It is\nnow easier to run `wormhole` as a subprocess beneath some other program\n(the long term goal is to provide a nice API, but even with one, there\nwill be programs written in languages without Wormhole bindings that may\nfind it most convenient to use a subprocess).\n\n* fix `--transit-helper=`: Older versions had a bug that broke\n  file/directory transfers when the two sides offered different\n  transit-relay servers. This was fixed by deduplicating relay hints and\n  adding a new kind of relay handshake. Clients running 0.9.0 or higher\n  now require a transit-relay server running 0.9.0 or higher. (#115)\n* `wormhole receive`: reject transfers when the target does not appear\n  to have enough space (not available on windows) (#91)\n* CLI: emit pacifier message when key-verification is slow (#29)\n* add `--appid=` so wrapping scripts can use a distinct value (#113)\n* `wormhole send`: flush output after displaying code, for use in\n  scripts (#108)\n* CLI: print progress messages to stderr, not stdout (#99)\n* add basic man(1) pages (#69)\n\nMany thanks to patch submitters for this release: Joey Hess, Jared\nAnderson, Antoine Beaupré, and to everyone testing and filing issues on\nGithub.\n\n\n## Release 0.8.2 (08-Dec-2016)\n\n* CLI: add new \"wormhole ssh invite\" and \"wormhole ssh accept\" commands, to\n  facilitate appending your `~/.ssh/id_*.pub` key into a\n  suitably-permissioned remote `~/.ssh/authorized_keys` file. These commands\n  are experimental: the syntax might be changed in the future, or they might\n  be removed altogether.\n* CLI: \"wormhole recv\" and \"wormhole recieve\" are now accepted as aliases for\n  \"wormhole receive\", to help bad spelers :)\n* CLI: improve display of abbreviated file sizes\n* CLI: don't print traceback upon \"normal\" errors\n* CLI: when target file already exists, don't reveal that fact to the sender,\n  just say \"transfer rejected\"\n* magic-wormhole now depends upon `Twisted[tls]`, which will cause pyOpenSSL\n  and the `cryptography` package to be installed. This should prevent a\n  warning about the \"service_identity\" module not being available.\n* other smaller internal changes\n\nThanks to everyone who submitted patches in this release cycle: anarcat,\nOfekmeister, Tom Lowenthal, meejah, dreid, and dkg. And thanks to the many\nbug reporters on Github!\n\n\n## Release 0.8.1 (27-Jul-2016)\n\nThis release contains mostly minor changes.\n\nThe most noticeable is that long-lived wormholes should be more reliable now.\nPreviously, if you run `wormhole send` but your peer doesn't run their\n`receive` for several hours, a NAT/firewall box on either side could stop\nforwarding traffic for the idle connection (without sending a FIN or RST to\nproperly close the socket), causing both sides to hang forever and never\nactually connect. Now both sides send periodic keep-alive messages to prevent\nthis.\n\nIn addition, by switching to \"Click\" for argument parsing, we now have short\ncommand aliases: `wormhole tx` does the same thing as `wormhole send`, and\n`wormhole rx` is an easier-to-spell equivalent of `wormhole receive`.\n\nOther changes:\n\n* CLI: move most arguments to be attached to the subcommand (new: `wormhole\n  send --verify`) rather than on the \"wormhole\" command (old: `wormhole\n  --verify send`). Four arguments remain on the \"wormhole\" command:\n  `--relay-url=`, `--transit-helper=`, `--dump-timing=`, and `--version`.\n* docs: add links to PyCon2016 presentation\n* reject wormhole-codes with spaces with a better error message\n* magic-wormhole ought to work on windows now\n* code-input tab-completion should work on stock OS-X python (with libedit)\n* sending a directory should restore file permissions correctly\n* server changes:\n  * expire channels after two hours, not 3 days\n  * prune channels more accurately\n  * improve munin plugins for server monitoring\n\nMany thanks to the folks who contributed to this release, during the PyCon\nsprints and afterwards: higs4281, laharah, Chris Wolfe, meejah, wsanchez,\nKurt Neufeld, and Francois Marier.\n\n\n## Release 0.8.0 (28-May-2016)\n\nThis release is completely incompatible with the previous 0.7.6 release.\nClients using 0.7.6 or earlier will not even notice clients using 0.8.0\nor later.\n\n* Overhaul client-server websocket protocol, client-client PAKE\n  messages, per-message encryption-key derivation, relay-server database\n  schema, SPAKE2 key-derivation, and public relay URLs. Add version\n  fields and unknown-message tolerance to most protocol steps.\n* Hopefully this will provide forward-compatibility with future protocol\n  changes. I have several on my list, and the version fields should make\n  it possible to add these without a flag day (at worst a \"flag month\").\n* User-visible changes are minimal, although some operations should be\n  faster because we no longer need to wait for ACKs before proceeding.\n* API changes: `.send_data()/.get_data()` became `.send()/.get()`,\n  neither takes a phase= argument (the Wormhole is now a record pipe)\n  `.get_verifier()` became `.verify()` (and waits to receive the\n  key-confirmation message before firing its Deferred), wormholes are\n  constructed with a function call instead of a class constructor,\n  `close()` always waits for server ack of outbound messages. Note that\n  the API remains unstable until 1.0.0 .\n* misc/munin/ contains plugins for relay server operators\n\n\n## Release 0.7.6 (08-May-2016)\n\n* Switch to \"tqdm\" for nicer CLI progress bars.\n* Fail better when input-code is interrupted (prompt user to hit Return,\n  rather than hanging forever)\n* Close channel upon error more reliably.\n* Explain WrongPasswordError better.\n* (internal): improve --dump-timing instrumentation and rendering.\n\nCompatibility: this remains compatible with 0.7.x, and 0.8.x is still\nexpected to break compatibility.\n\n\n## Release 0.7.5 (20-Apr-2016)\n\n* The CLI tools now use the Twisted-based library exclusively.\n* The blocking-flavor \"Transit\" library has been removed. Transit is the\n  bulk-transfer protocol used by send-file/send-directory. Upcoming protocol\n  improvements (performance and connectivity) proved too difficult to\n  implement in a blocking fashion, so for now if you want Transit, use\n  Twisted.\n* The Twisted-flavor \"Wormhole\" library now uses WebSockets to connect,\n  rather than HTTP. The blocking-flavor library continues to use HTTP.\n  \"Wormhole\" is the one-message-at-a-time relay-based protocol, and is\n  used to set up Transit for the send-file and send-directory modes of\n  the CLI tool.\n* Twisted-flavor input_code() now does readline-based code entry, with\n  tab completion.\n* The package now installs two executables: \"wormhole\" (for send and\n  receive), and \"wormhole-server\" (to start and manage the relay\n  servers). These may be re-merged in a future release.\n\nCompatibility:\n\n* This release remains compatible with the previous ones. The next major\n  release (0.8.x) will probably break compatibility.\n\nPackaging:\n\n* magic-wormhole now depends upon \"Twisted\" and \"autobahn\" (for WebSockets).\n  Autobahn pulls in txaio, but we don't support it yet (a future version of\n  magic-wormhole might).\n* To work around a bug in autobahn, we also (temporarily) depend upon\n  \"pytrie\". This dependency will be removed when the next autobahn release is\n  available.\n\n\n## Release 0.7.0 (28-Mar-2016)\n\n* `wormhole send DIRNAME/` used to deal very badly with the trailing slash\n  (sending a directory with an empty name). This is now fixed.\n* Preliminary Tor support was added. Install `magic-wormhole[tor]`, make sure\n  you have a Tor executable on your $PATH, and run `wormhole --tor send`.\n  This will launch a new Tor process. Do not use this in anger/fear until it\n  has been tested more carefully. This feature is likely to be unstable for a\n  while, and lacks tests.\n* The relay now prunes unused channels properly.\n* Added --dump-timing= to record timeline of events, for debugging and\n  performance improvements. You can combine timing data from both sides to\n  see where the delays are happening. The server now returns timestamps in\n  its responses, to measure round-trip delays. A web-based visualization tool\n  was added in `misc/dump-timing.py`.\n* twisted.transit was not properly handling multiple records received in a\n  single chunk. Some producer/consumer helper methods were added. You can now\n  run e.g. `wormhole --twisted send` to force the use of the Twisted\n  implementation.\n* The Twisted wormhole now uses a persistent connection for all relay\n  messages, which should be slightly faster.\n* Add `--no-listen` to prevent Transit from listening for inbound connections\n  (or advertising any addresses): this is only useful for testing.\n* The tests now collect code coverage information, and upload them to\n  https://codecov.io/github/warner/magic-wormhole?ref=master .\n\n## Release 0.6.3 (29-Feb-2016)\n\nMostly internal changes:\n\n* twisted.transit was added, so Twisted-based applications can use it now.\n  This includes Producer/Consumer -based flow control. The Transit protocol\n  and API are documented in docs/transit.md .\n* The transit relay server can blur filesizes, rounding them to some\n  roughly-logarithmic interval.\n* Use --relay-helper=\"\" to disable use of the transit relay entirely,\n  limiting the file transfer to direct connections.\n* The new --hide-progress option disables the progress bar.\n* Made some windows-compatibility fixes, but all tests do not yet pass.\n\n## Release 0.6.2 (12-Jan-2016)\n\n* the server can now \"blur\" usage information: this turns off HTTP logging,\n  and rounds timestamps to coarse intervals\n* `wormhole server usage` now shows Transit usage too, not just Rendezvous\n\n## Release 0.6.1 (03-Dec-2015)\n\n* `wormhole` can now send/receive entire directories. They are zipped before\n  transport.\n* Python 3 is now supported for async (Twisted) library use, requiring at\n  least Twisted-15.5.0.\n* A bug was fixed which prevented py3-based clients from using the relay\n  transit server (not used if the two sides can reach each other directly).\n* The `--output-file=` argument was finally implemented, which allows the\n  receiver to override the filename that it writes. This may help scripted\n  usage.\n* Support for Python-2.6 was removed, since the recent Twisted-15.5.0 removed\n  it too. It might still work, but is no longer automatically tested.\n* The transit relay now implements proper flow control (Producer/Consumer),\n  so it won't buffer the entire file when the sender can push data faster\n  than the receiver can accept it. The sender should now throttle down to the\n  receiver's maximum rate.\n\n## Release 0.6.0 (23-Nov-2015)\n\n* Add key-confirmation message so \"wormhole send\" doesn't hang when the\n  receiver mistypes the code.\n* Fix `wormhole send --text -` to read the text message from stdin. `wormhole\n  receive >outfile` works, but currently appends an extra newline, which may\n  be removed in a future release.\n* Arrange for 0.4.0 senders to print an error message when connecting to a\n  current (0.5.0) server, instead of an ugly stack trace. Unfortunately 0.4.0\n  receivers still display the traceback, since they don't check the welcome\n  message before using a missing API. 0.5.0 and 0.6.0 will do better.\n* Improve channel deallocation upon error.\n* Inform the server of our \"mood\" when the connection closes, so it can track\n  the rate of successful/unsuccessful transfers. The server DB now stores a\n  summary of each transfer (waiting time and reported outcome).\n* Rename (and deprecate) one server API (the non-EventSource form of \"get\"),\n  leaving it in place until after the next release. 0.5.0 clients should\n  interoperate with both the 0.6.0 server and 0.6.0 clients, but eventually\n  they'll stop working.\n\n## Release 0.5.0 (07-Oct-2015)\n\n* Change the CLI to merge send-file with send-text, and receive-file with\n  receive-text. Add confirmation before accepting a file.\n* Change the remote server API significantly, breaking compatibility with\n  0.4.0 peers. Fix EventSource to match W3C spec and real browser behavior.\n* Add py3 (3.3, 3.4, 3.5) compatibility for blocking calls (but not Twisted).\n* internals\n * Introduce Channel and ChannelManager to factor out the HTTP/EventSource\n   technology in use (making room for WebSocket or Tor in the future).\n * Change app-visible API to allow multiple message phases.\n * Change most API arguments from bytes to unicode strings (appid, URLs,\n   wormhole code, derive_key purpose string, message phase). Derived keys are\n   bytes, of course.\n* Add proper unit tests.\n\n## Release 0.4.0 (22-Sep-2015)\n\nThis changes the protocol (to a symmetric form), breaking compatibility with\n0.3.0 peers. Now both blocking-style and Twisted-style use a symmetric\nprotocol, and the two sides do not need to figure out (ahead of time) which\none goes first. The internal layout was rearranged, so applications that\nimport wormhole must be updated.\n\n## Release 0.3.0 (24-Jun-2015)\n\nAdd preliminary Twisted support, only for symmetric endpoints (no\ninitiator/receiver distinction). Lacks code-entry tab-completion. May still\nleave timers lingering. Add test suite (only for Twisted, so far).\n\nUse a sqlite database for Relay server state, to survive reboots with less\ndata loss. Add \"--advertise-version=\" to \"wormhole relay start\", to override\nthe version we recommend to clients.\n\n## Release 0.2.0 (10-Apr-2015)\n\nInitial release: supports blocking/synchronous asymmetric endpoints\n(Initiator on one side, Receiver on the other). Codes can be generated by\nInitiator, or created externally and passed into both (as long as they start\nwith digits: NNN-anything).\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.6259765625,
          "content": "# Magic Wormhole\n[![PyPI](http://img.shields.io/pypi/v/magic-wormhole.svg)](https://pypi.python.org/pypi/magic-wormhole)\n![Tests](https://github.com/magic-wormhole/magic-wormhole/workflows/Tests/badge.svg)\n[![Windows Build Status](https://ci.appveyor.com/api/projects/status/w1bdniovwm4egfyg/branch/master?svg=true)](https://ci.appveyor.com/project/warner/magic-wormhole)\n[![codecov.io](https://codecov.io/github/magic-wormhole/magic-wormhole/coverage.svg?branch=master)](https://codecov.io/github/magic-wormhole/magic-wormhole?branch=master)\n[![Docs](https://readthedocs.org/projects/magic-wormhole/badge/?version=latest)](https://magic-wormhole.readthedocs.io)\n[![Irc](https://img.shields.io/badge/irc.libera.chat-%23magic--wormhole-brightgreen)](https://web.libera.chat/)\n[![Matrix](https://img.shields.io/badge/matrix.org-%23magic--wormhole-brightgreen)](https://matrix.to/#/#magic-wormhole:matrix.org)\n\n\nGet things from one computer to another, safely.\n\nThis package provides a library and a command-line tool named `wormhole`,\nwhich makes it possible to get arbitrary-sized files and directories\n(or short pieces of text) from one computer to another. The two endpoints are\nidentified by using identical \"wormhole codes\": in general, the sending\nmachine generates and displays the code, which must then be typed into the\nreceiving machine.\n\nThe codes are short and human-pronounceable, using a phonetically-distinct\nwordlist. The receiving side offers tab-completion on the codewords, so\nusually only a few characters must be typed. Wormhole codes are single-use\nand do not need to be memorized.\n\n* PyCon 2016 presentation: [Slides](http://www.lothar.com/~warner/MagicWormhole-PyCon2016.pdf), [Video](https://youtu.be/oFrTqQw0_3c)\n\nFor complete documentation, please see https://magic-wormhole.readthedocs.io\nor the docs/ subdirectory.\n\nThis program uses two servers, whose source code is kept in separate\nrepositories: the\n[mailbox server](https://github.com/magic-wormhole/magic-wormhole-mailbox-server),\nand the\n[transit relay](https://github.com/magic-wormhole/magic-wormhole-transit-relay).\n\n## License, Compatibility\n\nMagic-Wormhole is released under the MIT license, see the `LICENSE` file for details.\n\nThis library is compatible with Python 3.8 and higher (tested against\nversions up to 3.12).\n\n## Packaging, Installation\n\nMagic Wormhole packages are included in many operating systems.\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/magic-wormhole.svg)](https://repology.org/project/magic-wormhole/versions)\n\nTo install it without an OS package, follow the [Installation docs](https://magic-wormhole.readthedocs.io/en/latest/welcome.html#installation).\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "newest-version.py",
          "type": "blob",
          "size": 0.5244140625,
          "content": "#\n# print out the most-recent version\n#\n\nfrom dulwich.repo import Repo\nfrom dulwich.porcelain import tag_list\n\nfrom twisted.internet.task import react\nfrom twisted.internet.defer import ensureDeferred\n\n\ndef existing_tags(git):\n    versions = [\n        tuple(map(int, v.decode(\"utf8\").split(\".\")))\n        for v in tag_list(git)\n    ]\n    return versions\n\n\nasync def main(reactor):\n    git = Repo(\".\")\n    print(\"{}.{}.{}\".format(*sorted(existing_tags(git))[-1]))\n\n\nif __name__ == \"__main__\":\n    react(lambda r: ensureDeferred(main(r)))\n"
        },
        {
          "name": "pyi",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.4208984375,
          "content": "[versioneer]\nVCS = git\nversionfile_source = src/wormhole/_version.py\nversionfile_build = wormhole/_version.py\ntag_prefix =\nparentdir_prefix = magic-wormhole\n\n[flake8]\nmax-line-length = 120\n\n[codespell]\n# Ref: https://github.com/codespell-project/codespell#using-a-config-file\nskip = .git*,*.svg,versioneer.py,*.css,wormhole.exe.spec,*.asc\ncheck-hidden = true\nignore-regex = \\bassertIn\\b\nignore-words-list = ans,recieve,unparseable\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.50390625,
          "content": "from setuptools import setup\n\nimport versioneer\n\ncommands = versioneer.get_cmdclass()\n\ntrove_classifiers = [\n    \"Development Status :: 4 - Beta\",\n    \"Environment :: Console\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: Implementation :: CPython\",\n    \"Topic :: Security :: Cryptography\",\n    \"Topic :: System :: Networking\",\n    \"Topic :: System :: Systems Administration\",\n    \"Topic :: Utilities\",\n    ]\n\nsetup(name=\"magic-wormhole\",\n      version=versioneer.get_version(),\n      description=\"Securely transfer data between computers\",\n      long_description=open('README.md', 'r').read(),\n      long_description_content_type='text/markdown',\n      author=\"Brian Warner\",\n      author_email=\"warner-magic-wormhole@lothar.com\",\n      license=\"MIT\",\n      url=\"https://github.com/warner/magic-wormhole\",\n      classifiers=trove_classifiers,\n\n      package_dir={\"\": \"src\"},\n      packages=[\"wormhole\",\n                \"wormhole.cli\",\n                \"wormhole._dilation\",\n                \"wormhole.test\",\n                \"wormhole.test.dilate\",\n                ],\n      data_files=[(\".\", [\"wormhole_complete.bash\", \"wormhole_complete.zsh\", \"wormhole_complete.fish\"])],\n      entry_points={\n          \"console_scripts\":\n          [\n              \"wormhole = wormhole.cli.cli:wormhole\",\n          ]\n      },\n      install_requires=[\n          \"spake2==0.9\", \"pynacl\",\n          \"attrs >= 19.2.0\", # 19.2.0 replaces cmp parameter with eq/order\n          \"twisted[tls] >= 17.5.0\", # 17.5.0 adds failAfterFailures=\n          \"autobahn[twisted] >= 0.14.1\",\n          \"automat\",\n          \"cryptography\",\n          \"tqdm >= 4.13.0\", # 4.13.0 fixes crash on NetBSD\n          \"click\",\n          \"humanize\",\n          \"txtorcon >= 18.0.2\", # 18.0.2 fixes py3.4 support\n          \"zipstream-ng >= 1.7.1, <2.0.0\",\n          \"iterable-io >= 1.0.0, <2.0.0\",\n          \"qrcode >= 8.0\",\n      ],\n      extras_require={\n          ':sys_platform==\"win32\"': [\"pywin32\"],\n          \"dev\": [\"tox\", \"pyflakes\",\n                  \"magic-wormhole-transit-relay==0.3.1\",\n                  \"magic-wormhole-mailbox-server==0.3.1\"],\n          \"dilate\": [\"noiseprotocol\"],\n          \"build\": [\"twine\", \"dulwich\", \"readme_renderer\", \"gpg\", \"wheel\"],\n      },\n      test_suite=\"wormhole.test\",\n      cmdclass=commands,\n      )\n"
        },
        {
          "name": "signatures",
          "type": "tree",
          "content": null
        },
        {
          "name": "snapcraft.yaml",
          "type": "blob",
          "size": 1.3330078125,
          "content": "name: wormhole\nversion: git\nversion-script: python3 -c \"import versioneer; print(versioneer.get_version())\"\nsummary: get things from one computer to another, safely\ndescription: |\n  This package provides a library and a command-line tool named wormhole,\n  which makes it possible to get short pieces of text (and arbitrary-sized\n  files and directories) from one computer to another. The two endpoints are\n  identified by using identical \"wormhole codes\": in general, the sending\n  machine generates and displays the code, which must then be typed into the\n  receiving machine.\n  The codes are short and human-pronounceable, using a phonetically-distinct\n  wordlist. The receiving side offers tab-completion on the codewords, so\n  usually only a few characters must be typed. Wormhole codes are single-use\n  and do not need to be memorized.\n\ngrade: devel\nconfinement: strict\n\napps:\n  wormhole:\n    command: env LC_ALL=C.UTF-8 LANG=C.UTF-8 wormhole\n    plugs: [home, network, network-bind]\n\nparts:\n  magic-wormhole:\n    source: .\n    source-type: git\n    plugin: python\n    build-packages:\n      - gcc\n      - libffi-dev\n      - libsodium-dev\n      - libssl-dev\n      - make\n    prepare: |\n      # FIXME make sure that the build dir has all the files from the repo,\n      # so the version is not tagged as dirty. --elopio - 20170730\n      cp ../src/snapcraft.yaml .\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.7373046875,
          "content": "# Tox (http://tox.testrun.org/) is a tool for running tests\n# in multiple virtualenvs. This configuration file will run the\n# test suite on all supported python versions. To use it, \"pip install tox\"\n# and then run \"tox\" from this directory.\n\n[tox]\n# useful envs: py311, py312, pypy, flake8\nenvlist = {py38,py39,py310,py311,py312}\nskip_missing_interpreters = True\nminversion = 2.4.0\n\n[testenv]\nusedevelop = True\nextras =\n    nodilate: dev\n    !nodilate: dev, dilate\ndeps =\n    pyflakes >= 1.2.3\n    coverage: coverage\ncommands =\n    pyflakes setup.py src\n    wormhole --version\n    !coverage: python -m wormhole.test.run_trial {posargs:wormhole}\n    coverage: coverage run --branch -m wormhole.test.run_trial {posargs:wormhole}\n    coverage: coverage xml\n\n# on windows, trial is installed as venv/bin/trial.py, not .exe, but (at\n# least appveyor) adds .PY to $PATHEXT. So \"trial wormhole\" might work on\n# windows, and certainly does on unix. But to get \"coverage run\" to work, we\n# need a script name (since \"python -m twisted.scripts.trial\" doesn't have a\n# 'if __name__ == \"__main__\": run()' -style clause), and the script name will\n# vary on the platform. So we added a small class (wormhole.test.run_trial)\n# that does the right import for us.\n\n[testenv:flake8]\ndeps = flake8\ncommands = flake8 src/wormhole\n\n[flake8]\nignore = E741,W503,W504\nexclude = .git,__pycache__,docs/source/conf.py,old,build,dist\nmax-complexity = 40\n\n[testenv:flake8less]\ndeps = flake8\ncommands = flake8 --select=E901,E999,F821,F822,F823 src/wormhole\n\n[testenv:docs]\ndeps =\n     sphinx\n     recommonmark\n     setuptools\n     sphinxcontrib-seqdiag\n     pillow\nskip_install = True\ncommands =\n         sphinx-build -b html -d {toxinidir}/docs/_build/doctrees {toxinidir}/docs {toxinidir}/docs/_build/html\n"
        },
        {
          "name": "update-version.py",
          "type": "blob",
          "size": 2.4951171875,
          "content": "#\n# this updates the (tagged) version of the software\n#\n# it will only update the \"minor\" version (e.g. 0.12.* -> 0.13.0)\n#\n# Any \"options\" are hard-coded in here (e.g. the GnuPG key to use)\n#\n\nimport sys\nimport time\nfrom datetime import datetime\n\nfrom dulwich.repo import Repo\nfrom dulwich.porcelain import (\n    tag_list,\n    tag_create,\n    status,\n)\n\nfrom twisted.internet.task import (\n    react,\n)\nfrom twisted.internet.defer import (\n    ensureDeferred,\n)\n\nauthor = \"meejah <meejah@meejah.ca>\"\n\n\ndef existing_tags(git):\n    versions = [\n        tuple(map(int, v.decode(\"utf8\").split(\".\")))\n        for v in tag_list(git)\n    ]\n    return versions\n\n\ndef create_new_version(git, only_patch):\n    versions = existing_tags(git)\n    major, minor, patch = sorted(versions)[-1]\n    if only_patch:\n        next_version = \"{}.{}.{}\".format(major, minor, patch + 1)\n    else:\n        next_version = \"{}.{}.{}\".format(major, minor + 1, 0)\n    return next_version\n\n\nasync def main(reactor):\n    git = Repo(\".\")\n\n    # including untracked files can be very slow (if there are lots,\n    # like in virtualenvs) and we don't care anyway\n    st = status(git, untracked_files=\"no\")\n    if any(st.staged.values()) or st.unstaged:\n        print(\"unclean checkout; aborting\")\n        raise SystemExit(1)\n\n    for arg in sys.argv[1:]:\n        if arg not in (\"--no-tag\", \"--patch\"):\n            print(\"unknown arg: {}\".format(arg))\n            raise SystemExit(2)\n\n    v = create_new_version(git, \"--patch\" in sys.argv)\n    if \"--no-tag\" in sys.argv:\n        print(v)\n        return\n\n    print(\"Latest version: {}.{}.{}\".format(*sorted(existing_tags(git))[-1]))\n    print(\"New tag will be {}\".format(v))\n\n    # the \"tag time\" is seconds from the epoch .. we quantize these to\n    # the start of the day in question, in UTC.\n    now = datetime.now()\n    s = now.utctimetuple()\n    ts = int(\n        time.mktime(\n            time.struct_time((\n                s.tm_year, s.tm_mon, s.tm_mday, 0, 0, 0, 0, s.tm_yday, 0\n            ))\n        )\n    )\n    tag_create(\n        repo=git,\n        tag=v.encode(\"utf8\"),\n        author=author.encode(\"utf8\"),\n        message=\"release magic-wormhole-{}\".format(v).encode(\"utf8\"),\n        annotated=True,\n        objectish=b\"HEAD\",\n        sign=author.encode(\"utf8\"),\n        tag_time=ts,\n        tag_timezone=0,\n    )\n\n    print(\"Tag created locally, it is not pushed\")\n    print(\"To push it run something like:\")\n    print(\"   git push origin {}\".format(v))\n\n\nif __name__ == \"__main__\":\n    react(lambda r: ensureDeferred(main(r)))\n"
        },
        {
          "name": "versioneer.py",
          "type": "blob",
          "size": 84.6455078125,
          "content": "\n# Version: 0.29\n\n\"\"\"The Versioneer - like a rocketeer, but for versions.\n\nThe Versioneer\n==============\n\n* like a rocketeer, but for versions!\n* https://github.com/python-versioneer/python-versioneer\n* Brian Warner\n* License: Public Domain (Unlicense)\n* Compatible with: Python 3.7, 3.8, 3.9, 3.10, 3.11 and pypy3\n* [![Latest Version][pypi-image]][pypi-url]\n* [![Build Status][travis-image]][travis-url]\n\nThis is a tool for managing a recorded version number in setuptools-based\npython projects. The goal is to remove the tedious and error-prone \"update\nthe embedded version string\" step from your release process. Making a new\nrelease should be as easy as recording a new tag in your version-control\nsystem, and maybe making new tarballs.\n\n\n## Quick Install\n\nVersioneer provides two installation modes. The \"classic\" vendored mode installs\na copy of versioneer into your repository. The experimental build-time dependency mode\nis intended to allow you to skip this step and simplify the process of upgrading.\n\n### Vendored mode\n\n* `pip install versioneer` to somewhere in your $PATH\n   * A [conda-forge recipe](https://github.com/conda-forge/versioneer-feedstock) is\n     available, so you can also use `conda install -c conda-forge versioneer`\n* add a `[tool.versioneer]` section to your `pyproject.toml` or a\n  `[versioneer]` section to your `setup.cfg` (see [Install](INSTALL.md))\n   * Note that you will need to add `tomli; python_version < \"3.11\"` to your\n     build-time dependencies if you use `pyproject.toml`\n* run `versioneer install --vendor` in your source tree, commit the results\n* verify version information with `python setup.py version`\n\n### Build-time dependency mode\n\n* `pip install versioneer` to somewhere in your $PATH\n   * A [conda-forge recipe](https://github.com/conda-forge/versioneer-feedstock) is\n     available, so you can also use `conda install -c conda-forge versioneer`\n* add a `[tool.versioneer]` section to your `pyproject.toml` or a\n  `[versioneer]` section to your `setup.cfg` (see [Install](INSTALL.md))\n* add `versioneer` (with `[toml]` extra, if configuring in `pyproject.toml`)\n  to the `requires` key of the `build-system` table in `pyproject.toml`:\n  ```toml\n  [build-system]\n  requires = [\"setuptools\", \"versioneer[toml]\"]\n  build-backend = \"setuptools.build_meta\"\n  ```\n* run `versioneer install --no-vendor` in your source tree, commit the results\n* verify version information with `python setup.py version`\n\n## Version Identifiers\n\nSource trees come from a variety of places:\n\n* a version-control system checkout (mostly used by developers)\n* a nightly tarball, produced by build automation\n* a snapshot tarball, produced by a web-based VCS browser, like github's\n  \"tarball from tag\" feature\n* a release tarball, produced by \"setup.py sdist\", distributed through PyPI\n\nWithin each source tree, the version identifier (either a string or a number,\nthis tool is format-agnostic) can come from a variety of places:\n\n* ask the VCS tool itself, e.g. \"git describe\" (for checkouts), which knows\n  about recent \"tags\" and an absolute revision-id\n* the name of the directory into which the tarball was unpacked\n* an expanded VCS keyword ($Id$, etc)\n* a `_version.py` created by some earlier build step\n\nFor released software, the version identifier is closely related to a VCS\ntag. Some projects use tag names that include more than just the version\nstring (e.g. \"myproject-1.2\" instead of just \"1.2\"), in which case the tool\nneeds to strip the tag prefix to extract the version identifier. For\nunreleased software (between tags), the version identifier should provide\nenough information to help developers recreate the same tree, while also\ngiving them an idea of roughly how old the tree is (after version 1.2, before\nversion 1.3). Many VCS systems can report a description that captures this,\nfor example `git describe --tags --dirty --always` reports things like\n\"0.7-1-g574ab98-dirty\" to indicate that the checkout is one revision past the\n0.7 tag, has a unique revision id of \"574ab98\", and is \"dirty\" (it has\nuncommitted changes).\n\nThe version identifier is used for multiple purposes:\n\n* to allow the module to self-identify its version: `myproject.__version__`\n* to choose a name and prefix for a 'setup.py sdist' tarball\n\n## Theory of Operation\n\nVersioneer works by adding a special `_version.py` file into your source\ntree, where your `__init__.py` can import it. This `_version.py` knows how to\ndynamically ask the VCS tool for version information at import time.\n\n`_version.py` also contains `$Revision$` markers, and the installation\nprocess marks `_version.py` to have this marker rewritten with a tag name\nduring the `git archive` command. As a result, generated tarballs will\ncontain enough information to get the proper version.\n\nTo allow `setup.py` to compute a version too, a `versioneer.py` is added to\nthe top level of your source tree, next to `setup.py` and the `setup.cfg`\nthat configures it. This overrides several distutils/setuptools commands to\ncompute the version when invoked, and changes `setup.py build` and `setup.py\nsdist` to replace `_version.py` with a small static file that contains just\nthe generated version data.\n\n## Installation\n\nSee [INSTALL.md](./INSTALL.md) for detailed installation instructions.\n\n## Version-String Flavors\n\nCode which uses Versioneer can learn about its version string at runtime by\nimporting `_version` from your main `__init__.py` file and running the\n`get_versions()` function. From the \"outside\" (e.g. in `setup.py`), you can\nimport the top-level `versioneer.py` and run `get_versions()`.\n\nBoth functions return a dictionary with different flavors of version\ninformation:\n\n* `['version']`: A condensed version string, rendered using the selected\n  style. This is the most commonly used value for the project's version\n  string. The default \"pep440\" style yields strings like `0.11`,\n  `0.11+2.g1076c97`, or `0.11+2.g1076c97.dirty`. See the \"Styles\" section\n  below for alternative styles.\n\n* `['full-revisionid']`: detailed revision identifier. For Git, this is the\n  full SHA1 commit id, e.g. \"1076c978a8d3cfc70f408fe5974aa6c092c949ac\".\n\n* `['date']`: Date and time of the latest `HEAD` commit. For Git, it is the\n  commit date in ISO 8601 format. This will be None if the date is not\n  available.\n\n* `['dirty']`: a boolean, True if the tree has uncommitted changes. Note that\n  this is only accurate if run in a VCS checkout, otherwise it is likely to\n  be False or None\n\n* `['error']`: if the version string could not be computed, this will be set\n  to a string describing the problem, otherwise it will be None. It may be\n  useful to throw an exception in setup.py if this is set, to avoid e.g.\n  creating tarballs with a version string of \"unknown\".\n\nSome variants are more useful than others. Including `full-revisionid` in a\nbug report should allow developers to reconstruct the exact code being tested\n(or indicate the presence of local changes that should be shared with the\ndevelopers). `version` is suitable for display in an \"about\" box or a CLI\n`--version` output: it can be easily compared against release notes and lists\nof bugs fixed in various releases.\n\nThe installer adds the following text to your `__init__.py` to place a basic\nversion in `YOURPROJECT.__version__`:\n\n    from ._version import get_versions\n    __version__ = get_versions()['version']\n    del get_versions\n\n## Styles\n\nThe setup.cfg `style=` configuration controls how the VCS information is\nrendered into a version string.\n\nThe default style, \"pep440\", produces a PEP440-compliant string, equal to the\nun-prefixed tag name for actual releases, and containing an additional \"local\nversion\" section with more detail for in-between builds. For Git, this is\nTAG[+DISTANCE.gHEX[.dirty]] , using information from `git describe --tags\n--dirty --always`. For example \"0.11+2.g1076c97.dirty\" indicates that the\ntree is like the \"1076c97\" commit but has uncommitted changes (\".dirty\"), and\nthat this commit is two revisions (\"+2\") beyond the \"0.11\" tag. For released\nsoftware (exactly equal to a known tag), the identifier will only contain the\nstripped tag, e.g. \"0.11\".\n\nOther styles are available. See [details.md](details.md) in the Versioneer\nsource tree for descriptions.\n\n## Debugging\n\nVersioneer tries to avoid fatal errors: if something goes wrong, it will tend\nto return a version of \"0+unknown\". To investigate the problem, run `setup.py\nversion`, which will run the version-lookup code in a verbose mode, and will\ndisplay the full contents of `get_versions()` (including the `error` string,\nwhich may help identify what went wrong).\n\n## Known Limitations\n\nSome situations are known to cause problems for Versioneer. This details the\nmost significant ones. More can be found on Github\n[issues page](https://github.com/python-versioneer/python-versioneer/issues).\n\n### Subprojects\n\nVersioneer has limited support for source trees in which `setup.py` is not in\nthe root directory (e.g. `setup.py` and `.git/` are *not* siblings). The are\ntwo common reasons why `setup.py` might not be in the root:\n\n* Source trees which contain multiple subprojects, such as\n  [Buildbot](https://github.com/buildbot/buildbot), which contains both\n  \"master\" and \"slave\" subprojects, each with their own `setup.py`,\n  `setup.cfg`, and `tox.ini`. Projects like these produce multiple PyPI\n  distributions (and upload multiple independently-installable tarballs).\n* Source trees whose main purpose is to contain a C library, but which also\n  provide bindings to Python (and perhaps other languages) in subdirectories.\n\nVersioneer will look for `.git` in parent directories, and most operations\nshould get the right version string. However `pip` and `setuptools` have bugs\nand implementation details which frequently cause `pip install .` from a\nsubproject directory to fail to find a correct version string (so it usually\ndefaults to `0+unknown`).\n\n`pip install --editable .` should work correctly. `setup.py install` might\nwork too.\n\nPip-8.1.1 is known to have this problem, but hopefully it will get fixed in\nsome later version.\n\n[Bug #38](https://github.com/python-versioneer/python-versioneer/issues/38) is tracking\nthis issue. The discussion in\n[PR #61](https://github.com/python-versioneer/python-versioneer/pull/61) describes the\nissue from the Versioneer side in more detail.\n[pip PR#3176](https://github.com/pypa/pip/pull/3176) and\n[pip PR#3615](https://github.com/pypa/pip/pull/3615) contain work to improve\npip to let Versioneer work correctly.\n\nVersioneer-0.16 and earlier only looked for a `.git` directory next to the\n`setup.cfg`, so subprojects were completely unsupported with those releases.\n\n### Editable installs with setuptools <= 18.5\n\n`setup.py develop` and `pip install --editable .` allow you to install a\nproject into a virtualenv once, then continue editing the source code (and\ntest) without re-installing after every change.\n\n\"Entry-point scripts\" (`setup(entry_points={\"console_scripts\": ..})`) are a\nconvenient way to specify executable scripts that should be installed along\nwith the python package.\n\nThese both work as expected when using modern setuptools. When using\nsetuptools-18.5 or earlier, however, certain operations will cause\n`pkg_resources.DistributionNotFound` errors when running the entrypoint\nscript, which must be resolved by re-installing the package. This happens\nwhen the install happens with one version, then the egg_info data is\nregenerated while a different version is checked out. Many setup.py commands\ncause egg_info to be rebuilt (including `sdist`, `wheel`, and installing into\na different virtualenv), so this can be surprising.\n\n[Bug #83](https://github.com/python-versioneer/python-versioneer/issues/83) describes\nthis one, but upgrading to a newer version of setuptools should probably\nresolve it.\n\n\n## Updating Versioneer\n\nTo upgrade your project to a new release of Versioneer, do the following:\n\n* install the new Versioneer (`pip install -U versioneer` or equivalent)\n* edit `setup.cfg` and `pyproject.toml`, if necessary,\n  to include any new configuration settings indicated by the release notes.\n  See [UPGRADING](./UPGRADING.md) for details.\n* re-run `versioneer install --[no-]vendor` in your source tree, to replace\n  `SRC/_version.py`\n* commit any changed files\n\n## Future Directions\n\nThis tool is designed to make it easily extended to other version-control\nsystems: all VCS-specific components are in separate directories like\nsrc/git/ . The top-level `versioneer.py` script is assembled from these\ncomponents by running make-versioneer.py . In the future, make-versioneer.py\nwill take a VCS name as an argument, and will construct a version of\n`versioneer.py` that is specific to the given VCS. It might also take the\nconfiguration arguments that are currently provided manually during\ninstallation by editing setup.py . Alternatively, it might go the other\ndirection and include code from all supported VCS systems, reducing the\nnumber of intermediate scripts.\n\n## Similar projects\n\n* [setuptools_scm](https://github.com/pypa/setuptools_scm/) - a non-vendored build-time\n  dependency\n* [minver](https://github.com/jbweston/miniver) - a lightweight reimplementation of\n  versioneer\n* [versioningit](https://github.com/jwodder/versioningit) - a PEP 518-based setuptools\n  plugin\n\n## License\n\nTo make Versioneer easier to embed, all its code is dedicated to the public\ndomain. The `_version.py` that it creates is also in the public domain.\nSpecifically, both are released under the \"Unlicense\", as described in\nhttps://unlicense.org/.\n\n[pypi-image]: https://img.shields.io/pypi/v/versioneer.svg\n[pypi-url]: https://pypi.python.org/pypi/versioneer/\n[travis-image]:\nhttps://img.shields.io/travis/com/python-versioneer/python-versioneer.svg\n[travis-url]: https://travis-ci.com/github/python-versioneer/python-versioneer\n\n\"\"\"\n# pylint:disable=invalid-name,import-outside-toplevel,missing-function-docstring\n# pylint:disable=missing-class-docstring,too-many-branches,too-many-statements\n# pylint:disable=raise-missing-from,too-many-lines,too-many-locals,import-error\n# pylint:disable=too-few-public-methods,redefined-outer-name,consider-using-with\n# pylint:disable=attribute-defined-outside-init,too-many-arguments\n\nimport configparser\nimport errno\nimport json\nimport os\nimport re\nimport subprocess\nimport sys\nfrom pathlib import Path\nfrom typing import Any, Callable, cast, Dict, List, Optional, Tuple, Union\nfrom typing import NoReturn\nimport functools\n\nhave_tomllib = True\nif sys.version_info >= (3, 11):\n    import tomllib\nelse:\n    try:\n        import tomli as tomllib\n    except ImportError:\n        have_tomllib = False\n\n\nclass VersioneerConfig:\n    \"\"\"Container for Versioneer configuration parameters.\"\"\"\n\n    VCS: str\n    style: str\n    tag_prefix: str\n    versionfile_source: str\n    versionfile_build: Optional[str]\n    parentdir_prefix: Optional[str]\n    verbose: Optional[bool]\n\n\ndef get_root() -> str:\n    \"\"\"Get the project root directory.\n\n    We require that all commands are run from the project root, i.e. the\n    directory that contains setup.py, setup.cfg, and versioneer.py .\n    \"\"\"\n    root = os.path.realpath(os.path.abspath(os.getcwd()))\n    setup_py = os.path.join(root, \"setup.py\")\n    pyproject_toml = os.path.join(root, \"pyproject.toml\")\n    versioneer_py = os.path.join(root, \"versioneer.py\")\n    if not (\n        os.path.exists(setup_py)\n        or os.path.exists(pyproject_toml)\n        or os.path.exists(versioneer_py)\n    ):\n        # allow 'python path/to/setup.py COMMAND'\n        root = os.path.dirname(os.path.realpath(os.path.abspath(sys.argv[0])))\n        setup_py = os.path.join(root, \"setup.py\")\n        pyproject_toml = os.path.join(root, \"pyproject.toml\")\n        versioneer_py = os.path.join(root, \"versioneer.py\")\n    if not (\n        os.path.exists(setup_py)\n        or os.path.exists(pyproject_toml)\n        or os.path.exists(versioneer_py)\n    ):\n        err = (\"Versioneer was unable to run the project root directory. \"\n               \"Versioneer requires setup.py to be executed from \"\n               \"its immediate directory (like 'python setup.py COMMAND'), \"\n               \"or in a way that lets it use sys.argv[0] to find the root \"\n               \"(like 'python path/to/setup.py COMMAND').\")\n        raise VersioneerBadRootError(err)\n    try:\n        # Certain runtime workflows (setup.py install/develop in a setuptools\n        # tree) execute all dependencies in a single python process, so\n        # \"versioneer\" may be imported multiple times, and python's shared\n        # module-import table will cache the first one. So we can't use\n        # os.path.dirname(__file__), as that will find whichever\n        # versioneer.py was first imported, even in later projects.\n        my_path = os.path.realpath(os.path.abspath(__file__))\n        me_dir = os.path.normcase(os.path.splitext(my_path)[0])\n        vsr_dir = os.path.normcase(os.path.splitext(versioneer_py)[0])\n        if me_dir != vsr_dir and \"VERSIONEER_PEP518\" not in globals():\n            print(\"Warning: build in %s is using versioneer.py from %s\"\n                  % (os.path.dirname(my_path), versioneer_py))\n    except NameError:\n        pass\n    return root\n\n\ndef get_config_from_root(root: str) -> VersioneerConfig:\n    \"\"\"Read the project setup.cfg file to determine Versioneer config.\"\"\"\n    # This might raise OSError (if setup.cfg is missing), or\n    # configparser.NoSectionError (if it lacks a [versioneer] section), or\n    # configparser.NoOptionError (if it lacks \"VCS=\"). See the docstring at\n    # the top of versioneer.py for instructions on writing your setup.cfg .\n    root_pth = Path(root)\n    pyproject_toml = root_pth / \"pyproject.toml\"\n    setup_cfg = root_pth / \"setup.cfg\"\n    section: Union[Dict[str, Any], configparser.SectionProxy, None] = None\n    if pyproject_toml.exists() and have_tomllib:\n        try:\n            with open(pyproject_toml, 'rb') as fobj:\n                pp = tomllib.load(fobj)\n            section = pp['tool']['versioneer']\n        except (tomllib.TOMLDecodeError, KeyError) as e:\n            print(f\"Failed to load config from {pyproject_toml}: {e}\")\n            print(\"Try to load it from setup.cfg\")\n    if not section:\n        parser = configparser.ConfigParser()\n        with open(setup_cfg) as cfg_file:\n            parser.read_file(cfg_file)\n        parser.get(\"versioneer\", \"VCS\")  # raise error if missing\n\n        section = parser[\"versioneer\"]\n\n    # `cast`` really shouldn't be used, but its simplest for the\n    # common VersioneerConfig users at the moment. We verify against\n    # `None` values elsewhere where it matters\n\n    cfg = VersioneerConfig()\n    cfg.VCS = section['VCS']\n    cfg.style = section.get(\"style\", \"\")\n    cfg.versionfile_source = cast(str, section.get(\"versionfile_source\"))\n    cfg.versionfile_build = section.get(\"versionfile_build\")\n    cfg.tag_prefix = cast(str, section.get(\"tag_prefix\"))\n    if cfg.tag_prefix in (\"''\", '\"\"', None):\n        cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = section.get(\"parentdir_prefix\")\n    if isinstance(section, configparser.SectionProxy):\n        # Make sure configparser translates to bool\n        cfg.verbose = section.getboolean(\"verbose\")\n    else:\n        cfg.verbose = section.get(\"verbose\")\n\n    return cfg\n\n\nclass NotThisMethod(Exception):\n    \"\"\"Exception raised if a method is not valid for the current scenario.\"\"\"\n\n\n# these dictionaries contain VCS-specific tools\nLONG_VERSION_PY: Dict[str, str] = {}\nHANDLERS: Dict[str, Dict[str, Callable]] = {}\n\n\ndef register_vcs_handler(vcs: str, method: str) -> Callable:  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f: Callable) -> Callable:\n        \"\"\"Store f in HANDLERS[vcs][method].\"\"\"\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n\n\ndef run_command(\n    commands: List[str],\n    args: List[str],\n    cwd: Optional[str] = None,\n    verbose: bool = False,\n    hide_stderr: bool = False,\n    env: Optional[Dict[str, str]] = None,\n) -> Tuple[Optional[str], Optional[int]]:\n    \"\"\"Call the given command(s).\"\"\"\n    assert isinstance(commands, list)\n    process = None\n\n    popen_kwargs: Dict[str, Any] = {}\n    if sys.platform == \"win32\":\n        # This hides the console window if pythonw.exe is used\n        startupinfo = subprocess.STARTUPINFO()\n        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n        popen_kwargs[\"startupinfo\"] = startupinfo\n\n    for command in commands:\n        try:\n            dispcmd = str([command] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            process = subprocess.Popen([command] + args, cwd=cwd, env=env,\n                                       stdout=subprocess.PIPE,\n                                       stderr=(subprocess.PIPE if hide_stderr\n                                               else None), **popen_kwargs)\n            break\n        except OSError as e:\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n                print(e)\n            return None, None\n    else:\n        if verbose:\n            print(\"unable to find command, tried %s\" % (commands,))\n        return None, None\n    stdout = process.communicate()[0].strip().decode()\n    if process.returncode != 0:\n        if verbose:\n            print(\"unable to run %s (error)\" % dispcmd)\n            print(\"stdout was %s\" % stdout)\n        return None, process.returncode\n    return stdout, process.returncode\n\n\nLONG_VERSION_PY['git'] = r'''\n# This file helps to compute a version number in source trees obtained from\n# git-archive tarball (such as those provided by githubs download-from-tag\n# feature). Distribution tarballs (built by setup.py sdist) and build\n# directories (produced by setup.py build) will contain a much shorter file\n# that just contains the computed version number.\n\n# This file is released into the public domain.\n# Generated by versioneer-0.29\n# https://github.com/python-versioneer/python-versioneer\n\n\"\"\"Git implementation of _version.py.\"\"\"\n\nimport errno\nimport os\nimport re\nimport subprocess\nimport sys\nfrom typing import Any, Callable, Dict, List, Optional, Tuple\nimport functools\n\n\ndef get_keywords() -> Dict[str, str]:\n    \"\"\"Get the keywords needed to look up the version information.\"\"\"\n    # these strings will be replaced by git during git-archive.\n    # setup.py/versioneer.py will grep for the variable names, so they must\n    # each be defined on a line of their own. _version.py will just call\n    # get_keywords().\n    git_refnames = \"%(DOLLAR)sFormat:%%d%(DOLLAR)s\"\n    git_full = \"%(DOLLAR)sFormat:%%H%(DOLLAR)s\"\n    git_date = \"%(DOLLAR)sFormat:%%ci%(DOLLAR)s\"\n    keywords = {\"refnames\": git_refnames, \"full\": git_full, \"date\": git_date}\n    return keywords\n\n\nclass VersioneerConfig:\n    \"\"\"Container for Versioneer configuration parameters.\"\"\"\n\n    VCS: str\n    style: str\n    tag_prefix: str\n    parentdir_prefix: str\n    versionfile_source: str\n    verbose: bool\n\n\ndef get_config() -> VersioneerConfig:\n    \"\"\"Create, populate and return the VersioneerConfig() object.\"\"\"\n    # these strings are filled in when 'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"%(STYLE)s\"\n    cfg.tag_prefix = \"%(TAG_PREFIX)s\"\n    cfg.parentdir_prefix = \"%(PARENTDIR_PREFIX)s\"\n    cfg.versionfile_source = \"%(VERSIONFILE_SOURCE)s\"\n    cfg.verbose = False\n    return cfg\n\n\nclass NotThisMethod(Exception):\n    \"\"\"Exception raised if a method is not valid for the current scenario.\"\"\"\n\n\nLONG_VERSION_PY: Dict[str, str] = {}\nHANDLERS: Dict[str, Dict[str, Callable]] = {}\n\n\ndef register_vcs_handler(vcs: str, method: str) -> Callable:  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f: Callable) -> Callable:\n        \"\"\"Store f in HANDLERS[vcs][method].\"\"\"\n        if vcs not in HANDLERS:\n            HANDLERS[vcs] = {}\n        HANDLERS[vcs][method] = f\n        return f\n    return decorate\n\n\ndef run_command(\n    commands: List[str],\n    args: List[str],\n    cwd: Optional[str] = None,\n    verbose: bool = False,\n    hide_stderr: bool = False,\n    env: Optional[Dict[str, str]] = None,\n) -> Tuple[Optional[str], Optional[int]]:\n    \"\"\"Call the given command(s).\"\"\"\n    assert isinstance(commands, list)\n    process = None\n\n    popen_kwargs: Dict[str, Any] = {}\n    if sys.platform == \"win32\":\n        # This hides the console window if pythonw.exe is used\n        startupinfo = subprocess.STARTUPINFO()\n        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n        popen_kwargs[\"startupinfo\"] = startupinfo\n\n    for command in commands:\n        try:\n            dispcmd = str([command] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            process = subprocess.Popen([command] + args, cwd=cwd, env=env,\n                                       stdout=subprocess.PIPE,\n                                       stderr=(subprocess.PIPE if hide_stderr\n                                               else None), **popen_kwargs)\n            break\n        except OSError as e:\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %%s\" %% dispcmd)\n                print(e)\n            return None, None\n    else:\n        if verbose:\n            print(\"unable to find command, tried %%s\" %% (commands,))\n        return None, None\n    stdout = process.communicate()[0].strip().decode()\n    if process.returncode != 0:\n        if verbose:\n            print(\"unable to run %%s (error)\" %% dispcmd)\n            print(\"stdout was %%s\" %% stdout)\n        return None, process.returncode\n    return stdout, process.returncode\n\n\ndef versions_from_parentdir(\n    parentdir_prefix: str,\n    root: str,\n    verbose: bool,\n) -> Dict[str, Any]:\n    \"\"\"Try to determine the version from the parent directory name.\n\n    Source tarballs conventionally unpack into a directory that includes both\n    the project name and a version string. We will also support searching up\n    two directory levels for an appropriately named parent directory\n    \"\"\"\n    rootdirs = []\n\n    for _ in range(3):\n        dirname = os.path.basename(root)\n        if dirname.startswith(parentdir_prefix):\n            return {\"version\": dirname[len(parentdir_prefix):],\n                    \"full-revisionid\": None,\n                    \"dirty\": False, \"error\": None, \"date\": None}\n        rootdirs.append(root)\n        root = os.path.dirname(root)  # up a level\n\n    if verbose:\n        print(\"Tried directories %%s but none started with prefix %%s\" %%\n              (str(rootdirs), parentdir_prefix))\n    raise NotThisMethod(\"rootdir doesn't start with parentdir_prefix\")\n\n\n@register_vcs_handler(\"git\", \"get_keywords\")\ndef git_get_keywords(versionfile_abs: str) -> Dict[str, str]:\n    \"\"\"Extract version information from the given file.\"\"\"\n    # the code embedded in _version.py can just fetch the value of these\n    # keywords. When used from setup.py, we don't want to import _version.py,\n    # so we do it with a regexp instead. This function is not used from\n    # _version.py.\n    keywords: Dict[str, str] = {}\n    try:\n        with open(versionfile_abs, \"r\") as fobj:\n            for line in fobj:\n                if line.strip().startswith(\"git_refnames =\"):\n                    mo = re.search(r'=\\s*\"(.*)\"', line)\n                    if mo:\n                        keywords[\"refnames\"] = mo.group(1)\n                if line.strip().startswith(\"git_full =\"):\n                    mo = re.search(r'=\\s*\"(.*)\"', line)\n                    if mo:\n                        keywords[\"full\"] = mo.group(1)\n                if line.strip().startswith(\"git_date =\"):\n                    mo = re.search(r'=\\s*\"(.*)\"', line)\n                    if mo:\n                        keywords[\"date\"] = mo.group(1)\n    except OSError:\n        pass\n    return keywords\n\n\n@register_vcs_handler(\"git\", \"keywords\")\ndef git_versions_from_keywords(\n    keywords: Dict[str, str],\n    tag_prefix: str,\n    verbose: bool,\n) -> Dict[str, Any]:\n    \"\"\"Get version information from git keywords.\"\"\"\n    if \"refnames\" not in keywords:\n        raise NotThisMethod(\"Short version file found\")\n    date = keywords.get(\"date\")\n    if date is not None:\n        # Use only the last line.  Previous lines may contain GPG signature\n        # information.\n        date = date.splitlines()[-1]\n\n        # git-2.2.0 added \"%%cI\", which expands to an ISO-8601 -compliant\n        # datestamp. However we prefer \"%%ci\" (which expands to an \"ISO-8601\n        # -like\" string, which we must then edit to make compliant), because\n        # it's been around since git-1.5.3, and it's too difficult to\n        # discover which version we're using, or to work around using an\n        # older one.\n        date = date.strip().replace(\" \", \"T\", 1).replace(\" \", \"\", 1)\n    refnames = keywords[\"refnames\"].strip()\n    if refnames.startswith(\"$Format\"):\n        if verbose:\n            print(\"keywords are unexpanded, not using\")\n        raise NotThisMethod(\"unexpanded keywords, not a git-archive tarball\")\n    refs = {r.strip() for r in refnames.strip(\"()\").split(\",\")}\n    # starting in git-1.8.3, tags are listed as \"tag: foo-1.0\" instead of\n    # just \"foo-1.0\". If we see a \"tag: \" prefix, prefer those.\n    TAG = \"tag: \"\n    tags = {r[len(TAG):] for r in refs if r.startswith(TAG)}\n    if not tags:\n        # Either we're using git < 1.8.3, or there really are no tags. We use\n        # a heuristic: assume all version tags have a digit. The old git %%d\n        # expansion behaves like git log --decorate=short and strips out the\n        # refs/heads/ and refs/tags/ prefixes that would let us distinguish\n        # between branches and tags. By ignoring refnames without digits, we\n        # filter out many common branch names like \"release\" and\n        # \"stabilization\", as well as \"HEAD\" and \"master\".\n        tags = {r for r in refs if re.search(r'\\d', r)}\n        if verbose:\n            print(\"discarding '%%s', no digits\" %% \",\".join(refs - tags))\n    if verbose:\n        print(\"likely tags: %%s\" %% \",\".join(sorted(tags)))\n    for ref in sorted(tags):\n        # sorting will prefer e.g. \"2.0\" over \"2.0rc1\"\n        if ref.startswith(tag_prefix):\n            r = ref[len(tag_prefix):]\n            # Filter out refs that exactly match prefix or that don't start\n            # with a number once the prefix is stripped (mostly a concern\n            # when prefix is '')\n            if not re.match(r'\\d', r):\n                continue\n            if verbose:\n                print(\"picking %%s\" %% r)\n            return {\"version\": r,\n                    \"full-revisionid\": keywords[\"full\"].strip(),\n                    \"dirty\": False, \"error\": None,\n                    \"date\": date}\n    # no suitable tags, so version is \"0+unknown\", but full hex is still there\n    if verbose:\n        print(\"no suitable tags, using unknown + full revision id\")\n    return {\"version\": \"0+unknown\",\n            \"full-revisionid\": keywords[\"full\"].strip(),\n            \"dirty\": False, \"error\": \"no suitable tags\", \"date\": None}\n\n\n@register_vcs_handler(\"git\", \"pieces_from_vcs\")\ndef git_pieces_from_vcs(\n    tag_prefix: str,\n    root: str,\n    verbose: bool,\n    runner: Callable = run_command\n) -> Dict[str, Any]:\n    \"\"\"Get version from 'git describe' in the root of the source tree.\n\n    This only gets called if the git-archive 'subst' keywords were *not*\n    expanded, and _version.py hasn't already been rewritten with a short\n    version string, meaning we're inside a checked out source tree.\n    \"\"\"\n    GITS = [\"git\"]\n    if sys.platform == \"win32\":\n        GITS = [\"git.cmd\", \"git.exe\"]\n\n    # GIT_DIR can interfere with correct operation of Versioneer.\n    # It may be intended to be passed to the Versioneer-versioned project,\n    # but that should not change where we get our version from.\n    env = os.environ.copy()\n    env.pop(\"GIT_DIR\", None)\n    runner = functools.partial(runner, env=env)\n\n    _, rc = runner(GITS, [\"rev-parse\", \"--git-dir\"], cwd=root,\n                   hide_stderr=not verbose)\n    if rc != 0:\n        if verbose:\n            print(\"Directory %%s not under git control\" %% root)\n        raise NotThisMethod(\"'git rev-parse --git-dir' returned error\")\n\n    # if there is a tag matching tag_prefix, this yields TAG-NUM-gHEX[-dirty]\n    # if there isn't one, this yields HEX[-dirty] (no NUM)\n    describe_out, rc = runner(GITS, [\n        \"describe\", \"--tags\", \"--dirty\", \"--always\", \"--long\",\n        \"--match\", f\"{tag_prefix}[[:digit:]]*\"\n    ], cwd=root)\n    # --long was added in git-1.5.5\n    if describe_out is None:\n        raise NotThisMethod(\"'git describe' failed\")\n    describe_out = describe_out.strip()\n    full_out, rc = runner(GITS, [\"rev-parse\", \"HEAD\"], cwd=root)\n    if full_out is None:\n        raise NotThisMethod(\"'git rev-parse' failed\")\n    full_out = full_out.strip()\n\n    pieces: Dict[str, Any] = {}\n    pieces[\"long\"] = full_out\n    pieces[\"short\"] = full_out[:7]  # maybe improved later\n    pieces[\"error\"] = None\n\n    branch_name, rc = runner(GITS, [\"rev-parse\", \"--abbrev-ref\", \"HEAD\"],\n                             cwd=root)\n    # --abbrev-ref was added in git-1.6.3\n    if rc != 0 or branch_name is None:\n        raise NotThisMethod(\"'git rev-parse --abbrev-ref' returned error\")\n    branch_name = branch_name.strip()\n\n    if branch_name == \"HEAD\":\n        # If we aren't exactly on a branch, pick a branch which represents\n        # the current commit. If all else fails, we are on a branchless\n        # commit.\n        branches, rc = runner(GITS, [\"branch\", \"--contains\"], cwd=root)\n        # --contains was added in git-1.5.4\n        if rc != 0 or branches is None:\n            raise NotThisMethod(\"'git branch --contains' returned error\")\n        branches = branches.split(\"\\n\")\n\n        # Remove the first line if we're running detached\n        if \"(\" in branches[0]:\n            branches.pop(0)\n\n        # Strip off the leading \"* \" from the list of branches.\n        branches = [branch[2:] for branch in branches]\n        if \"master\" in branches:\n            branch_name = \"master\"\n        elif not branches:\n            branch_name = None\n        else:\n            # Pick the first branch that is returned. Good or bad.\n            branch_name = branches[0]\n\n    pieces[\"branch\"] = branch_name\n\n    # parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]\n    # TAG might have hyphens.\n    git_describe = describe_out\n\n    # look for -dirty suffix\n    dirty = git_describe.endswith(\"-dirty\")\n    pieces[\"dirty\"] = dirty\n    if dirty:\n        git_describe = git_describe[:git_describe.rindex(\"-dirty\")]\n\n    # now we have TAG-NUM-gHEX or HEX\n\n    if \"-\" in git_describe:\n        # TAG-NUM-gHEX\n        mo = re.search(r'^(.+)-(\\d+)-g([0-9a-f]+)$', git_describe)\n        if not mo:\n            # unparsable. Maybe git-describe is misbehaving?\n            pieces[\"error\"] = (\"unable to parse git-describe output: '%%s'\"\n                               %% describe_out)\n            return pieces\n\n        # tag\n        full_tag = mo.group(1)\n        if not full_tag.startswith(tag_prefix):\n            if verbose:\n                fmt = \"tag '%%s' doesn't start with prefix '%%s'\"\n                print(fmt %% (full_tag, tag_prefix))\n            pieces[\"error\"] = (\"tag '%%s' doesn't start with prefix '%%s'\"\n                               %% (full_tag, tag_prefix))\n            return pieces\n        pieces[\"closest-tag\"] = full_tag[len(tag_prefix):]\n\n        # distance: number of commits since tag\n        pieces[\"distance\"] = int(mo.group(2))\n\n        # commit: short hex revision ID\n        pieces[\"short\"] = mo.group(3)\n\n    else:\n        # HEX: no tags\n        pieces[\"closest-tag\"] = None\n        out, rc = runner(GITS, [\"rev-list\", \"HEAD\", \"--left-right\"], cwd=root)\n        pieces[\"distance\"] = len(out.split())  # total number of commits\n\n    # commit date: see ISO-8601 comment in git_versions_from_keywords()\n    date = runner(GITS, [\"show\", \"-s\", \"--format=%%ci\", \"HEAD\"], cwd=root)[0].strip()\n    # Use only the last line.  Previous lines may contain GPG signature\n    # information.\n    date = date.splitlines()[-1]\n    pieces[\"date\"] = date.strip().replace(\" \", \"T\", 1).replace(\" \", \"\", 1)\n\n    return pieces\n\n\ndef plus_or_dot(pieces: Dict[str, Any]) -> str:\n    \"\"\"Return a + if we don't already have one, else return a .\"\"\"\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n\n\ndef render_pep440(pieces: Dict[str, Any]) -> str:\n    \"\"\"Build up version string, with post-release \"local version identifier\".\n\n    Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you\n    get a tagged build and then dirty it, you'll get TAG+0.gHEX.dirty\n\n    Exceptions:\n    1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += plus_or_dot(pieces)\n            rendered += \"%%d.g%%s\" %% (pieces[\"distance\"], pieces[\"short\"])\n            if pieces[\"dirty\"]:\n                rendered += \".dirty\"\n    else:\n        # exception #1\n        rendered = \"0+untagged.%%d.g%%s\" %% (pieces[\"distance\"],\n                                          pieces[\"short\"])\n        if pieces[\"dirty\"]:\n            rendered += \".dirty\"\n    return rendered\n\n\ndef render_pep440_branch(pieces: Dict[str, Any]) -> str:\n    \"\"\"TAG[[.dev0]+DISTANCE.gHEX[.dirty]] .\n\n    The \".dev0\" means not master branch. Note that .dev0 sorts backwards\n    (a feature branch will appear \"older\" than the master branch).\n\n    Exceptions:\n    1: no tags. 0[.dev0]+untagged.DISTANCE.gHEX[.dirty]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            if pieces[\"branch\"] != \"master\":\n                rendered += \".dev0\"\n            rendered += plus_or_dot(pieces)\n            rendered += \"%%d.g%%s\" %% (pieces[\"distance\"], pieces[\"short\"])\n            if pieces[\"dirty\"]:\n                rendered += \".dirty\"\n    else:\n        # exception #1\n        rendered = \"0\"\n        if pieces[\"branch\"] != \"master\":\n            rendered += \".dev0\"\n        rendered += \"+untagged.%%d.g%%s\" %% (pieces[\"distance\"],\n                                          pieces[\"short\"])\n        if pieces[\"dirty\"]:\n            rendered += \".dirty\"\n    return rendered\n\n\ndef pep440_split_post(ver: str) -> Tuple[str, Optional[int]]:\n    \"\"\"Split pep440 version string at the post-release segment.\n\n    Returns the release segments before the post-release and the\n    post-release version number (or -1 if no post-release segment is present).\n    \"\"\"\n    vc = str.split(ver, \".post\")\n    return vc[0], int(vc[1] or 0) if len(vc) == 2 else None\n\n\ndef render_pep440_pre(pieces: Dict[str, Any]) -> str:\n    \"\"\"TAG[.postN.devDISTANCE] -- No -dirty.\n\n    Exceptions:\n    1: no tags. 0.post0.devDISTANCE\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        if pieces[\"distance\"]:\n            # update the post release segment\n            tag_version, post_version = pep440_split_post(pieces[\"closest-tag\"])\n            rendered = tag_version\n            if post_version is not None:\n                rendered += \".post%%d.dev%%d\" %% (post_version + 1, pieces[\"distance\"])\n            else:\n                rendered += \".post0.dev%%d\" %% (pieces[\"distance\"])\n        else:\n            # no commits, use the tag as the version\n            rendered = pieces[\"closest-tag\"]\n    else:\n        # exception #1\n        rendered = \"0.post0.dev%%d\" %% pieces[\"distance\"]\n    return rendered\n\n\ndef render_pep440_post(pieces: Dict[str, Any]) -> str:\n    \"\"\"TAG[.postDISTANCE[.dev0]+gHEX] .\n\n    The \".dev0\" means dirty. Note that .dev0 sorts backwards\n    (a dirty tree will appear \"older\" than the corresponding clean one),\n    but you shouldn't be releasing software with -dirty anyways.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += \".post%%d\" %% pieces[\"distance\"]\n            if pieces[\"dirty\"]:\n                rendered += \".dev0\"\n            rendered += plus_or_dot(pieces)\n            rendered += \"g%%s\" %% pieces[\"short\"]\n    else:\n        # exception #1\n        rendered = \"0.post%%d\" %% pieces[\"distance\"]\n        if pieces[\"dirty\"]:\n            rendered += \".dev0\"\n        rendered += \"+g%%s\" %% pieces[\"short\"]\n    return rendered\n\n\ndef render_pep440_post_branch(pieces: Dict[str, Any]) -> str:\n    \"\"\"TAG[.postDISTANCE[.dev0]+gHEX[.dirty]] .\n\n    The \".dev0\" means not master branch.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]+gHEX[.dirty]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += \".post%%d\" %% pieces[\"distance\"]\n            if pieces[\"branch\"] != \"master\":\n                rendered += \".dev0\"\n            rendered += plus_or_dot(pieces)\n            rendered += \"g%%s\" %% pieces[\"short\"]\n            if pieces[\"dirty\"]:\n                rendered += \".dirty\"\n    else:\n        # exception #1\n        rendered = \"0.post%%d\" %% pieces[\"distance\"]\n        if pieces[\"branch\"] != \"master\":\n            rendered += \".dev0\"\n        rendered += \"+g%%s\" %% pieces[\"short\"]\n        if pieces[\"dirty\"]:\n            rendered += \".dirty\"\n    return rendered\n\n\ndef render_pep440_old(pieces: Dict[str, Any]) -> str:\n    \"\"\"TAG[.postDISTANCE[.dev0]] .\n\n    The \".dev0\" means dirty.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += \".post%%d\" %% pieces[\"distance\"]\n            if pieces[\"dirty\"]:\n                rendered += \".dev0\"\n    else:\n        # exception #1\n        rendered = \"0.post%%d\" %% pieces[\"distance\"]\n        if pieces[\"dirty\"]:\n            rendered += \".dev0\"\n    return rendered\n\n\ndef render_git_describe(pieces: Dict[str, Any]) -> str:\n    \"\"\"TAG[-DISTANCE-gHEX][-dirty].\n\n    Like 'git describe --tags --dirty --always'.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no 'g' prefix)\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"]:\n            rendered += \"-%%d-g%%s\" %% (pieces[\"distance\"], pieces[\"short\"])\n    else:\n        # exception #1\n        rendered = pieces[\"short\"]\n    if pieces[\"dirty\"]:\n        rendered += \"-dirty\"\n    return rendered\n\n\ndef render_git_describe_long(pieces: Dict[str, Any]) -> str:\n    \"\"\"TAG-DISTANCE-gHEX[-dirty].\n\n    Like 'git describe --tags --dirty --always -long'.\n    The distance/hash is unconditional.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no 'g' prefix)\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        rendered += \"-%%d-g%%s\" %% (pieces[\"distance\"], pieces[\"short\"])\n    else:\n        # exception #1\n        rendered = pieces[\"short\"]\n    if pieces[\"dirty\"]:\n        rendered += \"-dirty\"\n    return rendered\n\n\ndef render(pieces: Dict[str, Any], style: str) -> Dict[str, Any]:\n    \"\"\"Render the given version pieces into the requested style.\"\"\"\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describe(pieces)\n    elif style == \"git-describe-long\":\n        rendered = render_git_describe_long(pieces)\n    else:\n        raise ValueError(\"unknown style '%%s'\" %% style)\n\n    return {\"version\": rendered, \"full-revisionid\": pieces[\"long\"],\n            \"dirty\": pieces[\"dirty\"], \"error\": None,\n            \"date\": pieces.get(\"date\")}\n\n\ndef get_versions() -> Dict[str, Any]:\n    \"\"\"Get version information or return default if unable to do so.\"\"\"\n    # I am in _version.py, which lives at ROOT/VERSIONFILE_SOURCE. If we have\n    # __file__, we can work backwards from there to the root. Some\n    # py2exe/bbfreeze/non-CPython implementations don't do __file__, in which\n    # case we can only use expanded keywords.\n\n    cfg = get_config()\n    verbose = cfg.verbose\n\n    try:\n        return git_versions_from_keywords(get_keywords(), cfg.tag_prefix,\n                                          verbose)\n    except NotThisMethod:\n        pass\n\n    try:\n        root = os.path.realpath(__file__)\n        # versionfile_source is the relative path from the top of the source\n        # tree (where the .git directory might live) to this file. Invert\n        # this to find the root from __file__.\n        for _ in cfg.versionfile_source.split('/'):\n            root = os.path.dirname(root)\n    except NameError:\n        return {\"version\": \"0+unknown\", \"full-revisionid\": None,\n                \"dirty\": None,\n                \"error\": \"unable to find root of source tree\",\n                \"date\": None}\n\n    try:\n        pieces = git_pieces_from_vcs(cfg.tag_prefix, root, verbose)\n        return render(pieces, cfg.style)\n    except NotThisMethod:\n        pass\n\n    try:\n        if cfg.parentdir_prefix:\n            return versions_from_parentdir(cfg.parentdir_prefix, root, verbose)\n    except NotThisMethod:\n        pass\n\n    return {\"version\": \"0+unknown\", \"full-revisionid\": None,\n            \"dirty\": None,\n            \"error\": \"unable to compute version\", \"date\": None}\n'''\n\n\n@register_vcs_handler(\"git\", \"get_keywords\")\ndef git_get_keywords(versionfile_abs: str) -> Dict[str, str]:\n    \"\"\"Extract version information from the given file.\"\"\"\n    # the code embedded in _version.py can just fetch the value of these\n    # keywords. When used from setup.py, we don't want to import _version.py,\n    # so we do it with a regexp instead. This function is not used from\n    # _version.py.\n    keywords: Dict[str, str] = {}\n    try:\n        with open(versionfile_abs, \"r\") as fobj:\n            for line in fobj:\n                if line.strip().startswith(\"git_refnames =\"):\n                    mo = re.search(r'=\\s*\"(.*)\"', line)\n                    if mo:\n                        keywords[\"refnames\"] = mo.group(1)\n                if line.strip().startswith(\"git_full =\"):\n                    mo = re.search(r'=\\s*\"(.*)\"', line)\n                    if mo:\n                        keywords[\"full\"] = mo.group(1)\n                if line.strip().startswith(\"git_date =\"):\n                    mo = re.search(r'=\\s*\"(.*)\"', line)\n                    if mo:\n                        keywords[\"date\"] = mo.group(1)\n    except OSError:\n        pass\n    return keywords\n\n\n@register_vcs_handler(\"git\", \"keywords\")\ndef git_versions_from_keywords(\n    keywords: Dict[str, str],\n    tag_prefix: str,\n    verbose: bool,\n) -> Dict[str, Any]:\n    \"\"\"Get version information from git keywords.\"\"\"\n    if \"refnames\" not in keywords:\n        raise NotThisMethod(\"Short version file found\")\n    date = keywords.get(\"date\")\n    if date is not None:\n        # Use only the last line.  Previous lines may contain GPG signature\n        # information.\n        date = date.splitlines()[-1]\n\n        # git-2.2.0 added \"%cI\", which expands to an ISO-8601 -compliant\n        # datestamp. However we prefer \"%ci\" (which expands to an \"ISO-8601\n        # -like\" string, which we must then edit to make compliant), because\n        # it's been around since git-1.5.3, and it's too difficult to\n        # discover which version we're using, or to work around using an\n        # older one.\n        date = date.strip().replace(\" \", \"T\", 1).replace(\" \", \"\", 1)\n    refnames = keywords[\"refnames\"].strip()\n    if refnames.startswith(\"$Format\"):\n        if verbose:\n            print(\"keywords are unexpanded, not using\")\n        raise NotThisMethod(\"unexpanded keywords, not a git-archive tarball\")\n    refs = {r.strip() for r in refnames.strip(\"()\").split(\",\")}\n    # starting in git-1.8.3, tags are listed as \"tag: foo-1.0\" instead of\n    # just \"foo-1.0\". If we see a \"tag: \" prefix, prefer those.\n    TAG = \"tag: \"\n    tags = {r[len(TAG):] for r in refs if r.startswith(TAG)}\n    if not tags:\n        # Either we're using git < 1.8.3, or there really are no tags. We use\n        # a heuristic: assume all version tags have a digit. The old git %d\n        # expansion behaves like git log --decorate=short and strips out the\n        # refs/heads/ and refs/tags/ prefixes that would let us distinguish\n        # between branches and tags. By ignoring refnames without digits, we\n        # filter out many common branch names like \"release\" and\n        # \"stabilization\", as well as \"HEAD\" and \"master\".\n        tags = {r for r in refs if re.search(r'\\d', r)}\n        if verbose:\n            print(\"discarding '%s', no digits\" % \",\".join(refs - tags))\n    if verbose:\n        print(\"likely tags: %s\" % \",\".join(sorted(tags)))\n    for ref in sorted(tags):\n        # sorting will prefer e.g. \"2.0\" over \"2.0rc1\"\n        if ref.startswith(tag_prefix):\n            r = ref[len(tag_prefix):]\n            # Filter out refs that exactly match prefix or that don't start\n            # with a number once the prefix is stripped (mostly a concern\n            # when prefix is '')\n            if not re.match(r'\\d', r):\n                continue\n            if verbose:\n                print(\"picking %s\" % r)\n            return {\"version\": r,\n                    \"full-revisionid\": keywords[\"full\"].strip(),\n                    \"dirty\": False, \"error\": None,\n                    \"date\": date}\n    # no suitable tags, so version is \"0+unknown\", but full hex is still there\n    if verbose:\n        print(\"no suitable tags, using unknown + full revision id\")\n    return {\"version\": \"0+unknown\",\n            \"full-revisionid\": keywords[\"full\"].strip(),\n            \"dirty\": False, \"error\": \"no suitable tags\", \"date\": None}\n\n\n@register_vcs_handler(\"git\", \"pieces_from_vcs\")\ndef git_pieces_from_vcs(\n    tag_prefix: str,\n    root: str,\n    verbose: bool,\n    runner: Callable = run_command\n) -> Dict[str, Any]:\n    \"\"\"Get version from 'git describe' in the root of the source tree.\n\n    This only gets called if the git-archive 'subst' keywords were *not*\n    expanded, and _version.py hasn't already been rewritten with a short\n    version string, meaning we're inside a checked out source tree.\n    \"\"\"\n    GITS = [\"git\"]\n    if sys.platform == \"win32\":\n        GITS = [\"git.cmd\", \"git.exe\"]\n\n    # GIT_DIR can interfere with correct operation of Versioneer.\n    # It may be intended to be passed to the Versioneer-versioned project,\n    # but that should not change where we get our version from.\n    env = os.environ.copy()\n    env.pop(\"GIT_DIR\", None)\n    runner = functools.partial(runner, env=env)\n\n    _, rc = runner(GITS, [\"rev-parse\", \"--git-dir\"], cwd=root,\n                   hide_stderr=not verbose)\n    if rc != 0:\n        if verbose:\n            print(\"Directory %s not under git control\" % root)\n        raise NotThisMethod(\"'git rev-parse --git-dir' returned error\")\n\n    # if there is a tag matching tag_prefix, this yields TAG-NUM-gHEX[-dirty]\n    # if there isn't one, this yields HEX[-dirty] (no NUM)\n    describe_out, rc = runner(GITS, [\n        \"describe\", \"--tags\", \"--dirty\", \"--always\", \"--long\",\n        \"--match\", f\"{tag_prefix}[[:digit:]]*\"\n    ], cwd=root)\n    # --long was added in git-1.5.5\n    if describe_out is None:\n        raise NotThisMethod(\"'git describe' failed\")\n    describe_out = describe_out.strip()\n    full_out, rc = runner(GITS, [\"rev-parse\", \"HEAD\"], cwd=root)\n    if full_out is None:\n        raise NotThisMethod(\"'git rev-parse' failed\")\n    full_out = full_out.strip()\n\n    pieces: Dict[str, Any] = {}\n    pieces[\"long\"] = full_out\n    pieces[\"short\"] = full_out[:7]  # maybe improved later\n    pieces[\"error\"] = None\n\n    branch_name, rc = runner(GITS, [\"rev-parse\", \"--abbrev-ref\", \"HEAD\"],\n                             cwd=root)\n    # --abbrev-ref was added in git-1.6.3\n    if rc != 0 or branch_name is None:\n        raise NotThisMethod(\"'git rev-parse --abbrev-ref' returned error\")\n    branch_name = branch_name.strip()\n\n    if branch_name == \"HEAD\":\n        # If we aren't exactly on a branch, pick a branch which represents\n        # the current commit. If all else fails, we are on a branchless\n        # commit.\n        branches, rc = runner(GITS, [\"branch\", \"--contains\"], cwd=root)\n        # --contains was added in git-1.5.4\n        if rc != 0 or branches is None:\n            raise NotThisMethod(\"'git branch --contains' returned error\")\n        branches = branches.split(\"\\n\")\n\n        # Remove the first line if we're running detached\n        if \"(\" in branches[0]:\n            branches.pop(0)\n\n        # Strip off the leading \"* \" from the list of branches.\n        branches = [branch[2:] for branch in branches]\n        if \"master\" in branches:\n            branch_name = \"master\"\n        elif not branches:\n            branch_name = None\n        else:\n            # Pick the first branch that is returned. Good or bad.\n            branch_name = branches[0]\n\n    pieces[\"branch\"] = branch_name\n\n    # parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]\n    # TAG might have hyphens.\n    git_describe = describe_out\n\n    # look for -dirty suffix\n    dirty = git_describe.endswith(\"-dirty\")\n    pieces[\"dirty\"] = dirty\n    if dirty:\n        git_describe = git_describe[:git_describe.rindex(\"-dirty\")]\n\n    # now we have TAG-NUM-gHEX or HEX\n\n    if \"-\" in git_describe:\n        # TAG-NUM-gHEX\n        mo = re.search(r'^(.+)-(\\d+)-g([0-9a-f]+)$', git_describe)\n        if not mo:\n            # unparsable. Maybe git-describe is misbehaving?\n            pieces[\"error\"] = (\"unable to parse git-describe output: '%s'\"\n                               % describe_out)\n            return pieces\n\n        # tag\n        full_tag = mo.group(1)\n        if not full_tag.startswith(tag_prefix):\n            if verbose:\n                fmt = \"tag '%s' doesn't start with prefix '%s'\"\n                print(fmt % (full_tag, tag_prefix))\n            pieces[\"error\"] = (\"tag '%s' doesn't start with prefix '%s'\"\n                               % (full_tag, tag_prefix))\n            return pieces\n        pieces[\"closest-tag\"] = full_tag[len(tag_prefix):]\n\n        # distance: number of commits since tag\n        pieces[\"distance\"] = int(mo.group(2))\n\n        # commit: short hex revision ID\n        pieces[\"short\"] = mo.group(3)\n\n    else:\n        # HEX: no tags\n        pieces[\"closest-tag\"] = None\n        out, rc = runner(GITS, [\"rev-list\", \"HEAD\", \"--left-right\"], cwd=root)\n        pieces[\"distance\"] = len(out.split())  # total number of commits\n\n    # commit date: see ISO-8601 comment in git_versions_from_keywords()\n    date = runner(GITS, [\"show\", \"-s\", \"--format=%ci\", \"HEAD\"], cwd=root)[0].strip()\n    # Use only the last line.  Previous lines may contain GPG signature\n    # information.\n    date = date.splitlines()[-1]\n    pieces[\"date\"] = date.strip().replace(\" \", \"T\", 1).replace(\" \", \"\", 1)\n\n    return pieces\n\n\ndef do_vcs_install(versionfile_source: str, ipy: Optional[str]) -> None:\n    \"\"\"Git-specific installation logic for Versioneer.\n\n    For Git, this means creating/changing .gitattributes to mark _version.py\n    for export-subst keyword substitution.\n    \"\"\"\n    GITS = [\"git\"]\n    if sys.platform == \"win32\":\n        GITS = [\"git.cmd\", \"git.exe\"]\n    files = [versionfile_source]\n    if ipy:\n        files.append(ipy)\n    if \"VERSIONEER_PEP518\" not in globals():\n        try:\n            my_path = __file__\n            if my_path.endswith((\".pyc\", \".pyo\")):\n                my_path = os.path.splitext(my_path)[0] + \".py\"\n            versioneer_file = os.path.relpath(my_path)\n        except NameError:\n            versioneer_file = \"versioneer.py\"\n        files.append(versioneer_file)\n    present = False\n    try:\n        with open(\".gitattributes\", \"r\") as fobj:\n            for line in fobj:\n                if line.strip().startswith(versionfile_source):\n                    if \"export-subst\" in line.strip().split()[1:]:\n                        present = True\n                        break\n    except OSError:\n        pass\n    if not present:\n        with open(\".gitattributes\", \"a+\") as fobj:\n            fobj.write(f\"{versionfile_source} export-subst\\n\")\n        files.append(\".gitattributes\")\n    run_command(GITS, [\"add\", \"--\"] + files)\n\n\ndef versions_from_parentdir(\n    parentdir_prefix: str,\n    root: str,\n    verbose: bool,\n) -> Dict[str, Any]:\n    \"\"\"Try to determine the version from the parent directory name.\n\n    Source tarballs conventionally unpack into a directory that includes both\n    the project name and a version string. We will also support searching up\n    two directory levels for an appropriately named parent directory\n    \"\"\"\n    rootdirs = []\n\n    for _ in range(3):\n        dirname = os.path.basename(root)\n        if dirname.startswith(parentdir_prefix):\n            return {\"version\": dirname[len(parentdir_prefix):],\n                    \"full-revisionid\": None,\n                    \"dirty\": False, \"error\": None, \"date\": None}\n        rootdirs.append(root)\n        root = os.path.dirname(root)  # up a level\n\n    if verbose:\n        print(\"Tried directories %s but none started with prefix %s\" %\n              (str(rootdirs), parentdir_prefix))\n    raise NotThisMethod(\"rootdir doesn't start with parentdir_prefix\")\n\n\nSHORT_VERSION_PY = \"\"\"\n# This file was generated by 'versioneer.py' (0.29) from\n# revision-control system data, or from the parent directory name of an\n# unpacked source archive. Distribution tarballs contain a pre-generated copy\n# of this file.\n\nimport json\n\nversion_json = '''\n%s\n'''  # END VERSION_JSON\n\n\ndef get_versions():\n    return json.loads(version_json)\n\"\"\"\n\n\ndef versions_from_file(filename: str) -> Dict[str, Any]:\n    \"\"\"Try to determine the version from _version.py if present.\"\"\"\n    try:\n        with open(filename) as f:\n            contents = f.read()\n    except OSError:\n        raise NotThisMethod(\"unable to read _version.py\")\n    mo = re.search(r\"version_json = '''\\n(.*)'''  # END VERSION_JSON\",\n                   contents, re.M | re.S)\n    if not mo:\n        mo = re.search(r\"version_json = '''\\r\\n(.*)'''  # END VERSION_JSON\",\n                       contents, re.M | re.S)\n    if not mo:\n        raise NotThisMethod(\"no version_json in _version.py\")\n    return json.loads(mo.group(1))\n\n\ndef write_to_version_file(filename: str, versions: Dict[str, Any]) -> None:\n    \"\"\"Write the given version number to the given _version.py file.\"\"\"\n    contents = json.dumps(versions, sort_keys=True,\n                          indent=1, separators=(\",\", \": \"))\n    with open(filename, \"w\") as f:\n        f.write(SHORT_VERSION_PY % contents)\n\n    print(\"set %s to '%s'\" % (filename, versions[\"version\"]))\n\n\ndef plus_or_dot(pieces: Dict[str, Any]) -> str:\n    \"\"\"Return a + if we don't already have one, else return a .\"\"\"\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n\n\ndef render_pep440(pieces: Dict[str, Any]) -> str:\n    \"\"\"Build up version string, with post-release \"local version identifier\".\n\n    Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you\n    get a tagged build and then dirty it, you'll get TAG+0.gHEX.dirty\n\n    Exceptions:\n    1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += plus_or_dot(pieces)\n            rendered += \"%d.g%s\" % (pieces[\"distance\"], pieces[\"short\"])\n            if pieces[\"dirty\"]:\n                rendered += \".dirty\"\n    else:\n        # exception #1\n        rendered = \"0+untagged.%d.g%s\" % (pieces[\"distance\"],\n                                          pieces[\"short\"])\n        if pieces[\"dirty\"]:\n            rendered += \".dirty\"\n    return rendered\n\n\ndef render_pep440_branch(pieces: Dict[str, Any]) -> str:\n    \"\"\"TAG[[.dev0]+DISTANCE.gHEX[.dirty]] .\n\n    The \".dev0\" means not master branch. Note that .dev0 sorts backwards\n    (a feature branch will appear \"older\" than the master branch).\n\n    Exceptions:\n    1: no tags. 0[.dev0]+untagged.DISTANCE.gHEX[.dirty]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            if pieces[\"branch\"] != \"master\":\n                rendered += \".dev0\"\n            rendered += plus_or_dot(pieces)\n            rendered += \"%d.g%s\" % (pieces[\"distance\"], pieces[\"short\"])\n            if pieces[\"dirty\"]:\n                rendered += \".dirty\"\n    else:\n        # exception #1\n        rendered = \"0\"\n        if pieces[\"branch\"] != \"master\":\n            rendered += \".dev0\"\n        rendered += \"+untagged.%d.g%s\" % (pieces[\"distance\"],\n                                          pieces[\"short\"])\n        if pieces[\"dirty\"]:\n            rendered += \".dirty\"\n    return rendered\n\n\ndef pep440_split_post(ver: str) -> Tuple[str, Optional[int]]:\n    \"\"\"Split pep440 version string at the post-release segment.\n\n    Returns the release segments before the post-release and the\n    post-release version number (or -1 if no post-release segment is present).\n    \"\"\"\n    vc = str.split(ver, \".post\")\n    return vc[0], int(vc[1] or 0) if len(vc) == 2 else None\n\n\ndef render_pep440_pre(pieces: Dict[str, Any]) -> str:\n    \"\"\"TAG[.postN.devDISTANCE] -- No -dirty.\n\n    Exceptions:\n    1: no tags. 0.post0.devDISTANCE\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        if pieces[\"distance\"]:\n            # update the post release segment\n            tag_version, post_version = pep440_split_post(pieces[\"closest-tag\"])\n            rendered = tag_version\n            if post_version is not None:\n                rendered += \".post%d.dev%d\" % (post_version + 1, pieces[\"distance\"])\n            else:\n                rendered += \".post0.dev%d\" % (pieces[\"distance\"])\n        else:\n            # no commits, use the tag as the version\n            rendered = pieces[\"closest-tag\"]\n    else:\n        # exception #1\n        rendered = \"0.post0.dev%d\" % pieces[\"distance\"]\n    return rendered\n\n\ndef render_pep440_post(pieces: Dict[str, Any]) -> str:\n    \"\"\"TAG[.postDISTANCE[.dev0]+gHEX] .\n\n    The \".dev0\" means dirty. Note that .dev0 sorts backwards\n    (a dirty tree will appear \"older\" than the corresponding clean one),\n    but you shouldn't be releasing software with -dirty anyways.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += \".post%d\" % pieces[\"distance\"]\n            if pieces[\"dirty\"]:\n                rendered += \".dev0\"\n            rendered += plus_or_dot(pieces)\n            rendered += \"g%s\" % pieces[\"short\"]\n    else:\n        # exception #1\n        rendered = \"0.post%d\" % pieces[\"distance\"]\n        if pieces[\"dirty\"]:\n            rendered += \".dev0\"\n        rendered += \"+g%s\" % pieces[\"short\"]\n    return rendered\n\n\ndef render_pep440_post_branch(pieces: Dict[str, Any]) -> str:\n    \"\"\"TAG[.postDISTANCE[.dev0]+gHEX[.dirty]] .\n\n    The \".dev0\" means not master branch.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]+gHEX[.dirty]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += \".post%d\" % pieces[\"distance\"]\n            if pieces[\"branch\"] != \"master\":\n                rendered += \".dev0\"\n            rendered += plus_or_dot(pieces)\n            rendered += \"g%s\" % pieces[\"short\"]\n            if pieces[\"dirty\"]:\n                rendered += \".dirty\"\n    else:\n        # exception #1\n        rendered = \"0.post%d\" % pieces[\"distance\"]\n        if pieces[\"branch\"] != \"master\":\n            rendered += \".dev0\"\n        rendered += \"+g%s\" % pieces[\"short\"]\n        if pieces[\"dirty\"]:\n            rendered += \".dirty\"\n    return rendered\n\n\ndef render_pep440_old(pieces: Dict[str, Any]) -> str:\n    \"\"\"TAG[.postDISTANCE[.dev0]] .\n\n    The \".dev0\" means dirty.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += \".post%d\" % pieces[\"distance\"]\n            if pieces[\"dirty\"]:\n                rendered += \".dev0\"\n    else:\n        # exception #1\n        rendered = \"0.post%d\" % pieces[\"distance\"]\n        if pieces[\"dirty\"]:\n            rendered += \".dev0\"\n    return rendered\n\n\ndef render_git_describe(pieces: Dict[str, Any]) -> str:\n    \"\"\"TAG[-DISTANCE-gHEX][-dirty].\n\n    Like 'git describe --tags --dirty --always'.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no 'g' prefix)\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"]:\n            rendered += \"-%d-g%s\" % (pieces[\"distance\"], pieces[\"short\"])\n    else:\n        # exception #1\n        rendered = pieces[\"short\"]\n    if pieces[\"dirty\"]:\n        rendered += \"-dirty\"\n    return rendered\n\n\ndef render_git_describe_long(pieces: Dict[str, Any]) -> str:\n    \"\"\"TAG-DISTANCE-gHEX[-dirty].\n\n    Like 'git describe --tags --dirty --always -long'.\n    The distance/hash is unconditional.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no 'g' prefix)\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        rendered += \"-%d-g%s\" % (pieces[\"distance\"], pieces[\"short\"])\n    else:\n        # exception #1\n        rendered = pieces[\"short\"]\n    if pieces[\"dirty\"]:\n        rendered += \"-dirty\"\n    return rendered\n\n\ndef render(pieces: Dict[str, Any], style: str) -> Dict[str, Any]:\n    \"\"\"Render the given version pieces into the requested style.\"\"\"\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describe(pieces)\n    elif style == \"git-describe-long\":\n        rendered = render_git_describe_long(pieces)\n    else:\n        raise ValueError(\"unknown style '%s'\" % style)\n\n    return {\"version\": rendered, \"full-revisionid\": pieces[\"long\"],\n            \"dirty\": pieces[\"dirty\"], \"error\": None,\n            \"date\": pieces.get(\"date\")}\n\n\nclass VersioneerBadRootError(Exception):\n    \"\"\"The project root directory is unknown or missing key files.\"\"\"\n\n\ndef get_versions(verbose: bool = False) -> Dict[str, Any]:\n    \"\"\"Get the project version from whatever source is available.\n\n    Returns dict with two keys: 'version' and 'full'.\n    \"\"\"\n    if \"versioneer\" in sys.modules:\n        # see the discussion in cmdclass.py:get_cmdclass()\n        del sys.modules[\"versioneer\"]\n\n    root = get_root()\n    cfg = get_config_from_root(root)\n\n    assert cfg.VCS is not None, \"please set [versioneer]VCS= in setup.cfg\"\n    handlers = HANDLERS.get(cfg.VCS)\n    assert handlers, \"unrecognized VCS '%s'\" % cfg.VCS\n    verbose = verbose or bool(cfg.verbose)  # `bool()` used to avoid `None`\n    assert cfg.versionfile_source is not None, \\\n        \"please set versioneer.versionfile_source\"\n    assert cfg.tag_prefix is not None, \"please set versioneer.tag_prefix\"\n\n    versionfile_abs = os.path.join(root, cfg.versionfile_source)\n\n    # extract version from first of: _version.py, VCS command (e.g. 'git\n    # describe'), parentdir. This is meant to work for developers using a\n    # source checkout, for users of a tarball created by 'setup.py sdist',\n    # and for users of a tarball/zipball created by 'git archive' or github's\n    # download-from-tag feature or the equivalent in other VCSes.\n\n    get_keywords_f = handlers.get(\"get_keywords\")\n    from_keywords_f = handlers.get(\"keywords\")\n    if get_keywords_f and from_keywords_f:\n        try:\n            keywords = get_keywords_f(versionfile_abs)\n            ver = from_keywords_f(keywords, cfg.tag_prefix, verbose)\n            if verbose:\n                print(\"got version from expanded keyword %s\" % ver)\n            return ver\n        except NotThisMethod:\n            pass\n\n    try:\n        ver = versions_from_file(versionfile_abs)\n        if verbose:\n            print(\"got version from file %s %s\" % (versionfile_abs, ver))\n        return ver\n    except NotThisMethod:\n        pass\n\n    from_vcs_f = handlers.get(\"pieces_from_vcs\")\n    if from_vcs_f:\n        try:\n            pieces = from_vcs_f(cfg.tag_prefix, root, verbose)\n            ver = render(pieces, cfg.style)\n            if verbose:\n                print(\"got version from VCS %s\" % ver)\n            return ver\n        except NotThisMethod:\n            pass\n\n    try:\n        if cfg.parentdir_prefix:\n            ver = versions_from_parentdir(cfg.parentdir_prefix, root, verbose)\n            if verbose:\n                print(\"got version from parentdir %s\" % ver)\n            return ver\n    except NotThisMethod:\n        pass\n\n    if verbose:\n        print(\"unable to compute version\")\n\n    return {\"version\": \"0+unknown\", \"full-revisionid\": None,\n            \"dirty\": None, \"error\": \"unable to compute version\",\n            \"date\": None}\n\n\ndef get_version() -> str:\n    \"\"\"Get the short version string for this project.\"\"\"\n    return get_versions()[\"version\"]\n\n\ndef get_cmdclass(cmdclass: Optional[Dict[str, Any]] = None):\n    \"\"\"Get the custom setuptools subclasses used by Versioneer.\n\n    If the package uses a different cmdclass (e.g. one from numpy), it\n    should be provide as an argument.\n    \"\"\"\n    if \"versioneer\" in sys.modules:\n        del sys.modules[\"versioneer\"]\n        # this fixes the \"python setup.py develop\" case (also 'install' and\n        # 'easy_install .'), in which subdependencies of the main project are\n        # built (using setup.py bdist_egg) in the same python process. Assume\n        # a main project A and a dependency B, which use different versions\n        # of Versioneer. A's setup.py imports A's Versioneer, leaving it in\n        # sys.modules by the time B's setup.py is executed, causing B to run\n        # with the wrong versioneer. Setuptools wraps the sub-dep builds in a\n        # sandbox that restores sys.modules to it's pre-build state, so the\n        # parent is protected against the child's \"import versioneer\". By\n        # removing ourselves from sys.modules here, before the child build\n        # happens, we protect the child from the parent's versioneer too.\n        # Also see https://github.com/python-versioneer/python-versioneer/issues/52\n\n    cmds = {} if cmdclass is None else cmdclass.copy()\n\n    # we add \"version\" to setuptools\n    from setuptools import Command\n\n    class cmd_version(Command):\n        description = \"report generated version string\"\n        user_options: List[Tuple[str, str, str]] = []\n        boolean_options: List[str] = []\n\n        def initialize_options(self) -> None:\n            pass\n\n        def finalize_options(self) -> None:\n            pass\n\n        def run(self) -> None:\n            vers = get_versions(verbose=True)\n            print(\"Version: %s\" % vers[\"version\"])\n            print(\" full-revisionid: %s\" % vers.get(\"full-revisionid\"))\n            print(\" dirty: %s\" % vers.get(\"dirty\"))\n            print(\" date: %s\" % vers.get(\"date\"))\n            if vers[\"error\"]:\n                print(\" error: %s\" % vers[\"error\"])\n    cmds[\"version\"] = cmd_version\n\n    # we override \"build_py\" in setuptools\n    #\n    # most invocation pathways end up running build_py:\n    #  distutils/build -> build_py\n    #  distutils/install -> distutils/build ->..\n    #  setuptools/bdist_wheel -> distutils/install ->..\n    #  setuptools/bdist_egg -> distutils/install_lib -> build_py\n    #  setuptools/install -> bdist_egg ->..\n    #  setuptools/develop -> ?\n    #  pip install:\n    #   copies source tree to a tempdir before running egg_info/etc\n    #   if .git isn't copied too, 'git describe' will fail\n    #   then does setup.py bdist_wheel, or sometimes setup.py install\n    #  setup.py egg_info -> ?\n\n    # pip install -e . and setuptool/editable_wheel will invoke build_py\n    # but the build_py command is not expected to copy any files.\n\n    # we override different \"build_py\" commands for both environments\n    if 'build_py' in cmds:\n        _build_py: Any = cmds['build_py']\n    else:\n        from setuptools.command.build_py import build_py as _build_py\n\n    class cmd_build_py(_build_py):\n        def run(self) -> None:\n            root = get_root()\n            cfg = get_config_from_root(root)\n            versions = get_versions()\n            _build_py.run(self)\n            if getattr(self, \"editable_mode\", False):\n                # During editable installs `.py` and data files are\n                # not copied to build_lib\n                return\n            # now locate _version.py in the new build/ directory and replace\n            # it with an updated value\n            if cfg.versionfile_build:\n                target_versionfile = os.path.join(self.build_lib,\n                                                  cfg.versionfile_build)\n                print(\"UPDATING %s\" % target_versionfile)\n                write_to_version_file(target_versionfile, versions)\n    cmds[\"build_py\"] = cmd_build_py\n\n    if 'build_ext' in cmds:\n        _build_ext: Any = cmds['build_ext']\n    else:\n        from setuptools.command.build_ext import build_ext as _build_ext\n\n    class cmd_build_ext(_build_ext):\n        def run(self) -> None:\n            root = get_root()\n            cfg = get_config_from_root(root)\n            versions = get_versions()\n            _build_ext.run(self)\n            if self.inplace:\n                # build_ext --inplace will only build extensions in\n                # build/lib<..> dir with no _version.py to write to.\n                # As in place builds will already have a _version.py\n                # in the module dir, we do not need to write one.\n                return\n            # now locate _version.py in the new build/ directory and replace\n            # it with an updated value\n            if not cfg.versionfile_build:\n                return\n            target_versionfile = os.path.join(self.build_lib,\n                                              cfg.versionfile_build)\n            if not os.path.exists(target_versionfile):\n                print(f\"Warning: {target_versionfile} does not exist, skipping \"\n                      \"version update. This can happen if you are running build_ext \"\n                      \"without first running build_py.\")\n                return\n            print(\"UPDATING %s\" % target_versionfile)\n            write_to_version_file(target_versionfile, versions)\n    cmds[\"build_ext\"] = cmd_build_ext\n\n    if \"cx_Freeze\" in sys.modules:  # cx_freeze enabled?\n        from cx_Freeze.dist import build_exe as _build_exe  # type: ignore\n        # nczeczulin reports that py2exe won't like the pep440-style string\n        # as FILEVERSION, but it can be used for PRODUCTVERSION, e.g.\n        # setup(console=[{\n        #   \"version\": versioneer.get_version().split(\"+\", 1)[0], # FILEVERSION\n        #   \"product_version\": versioneer.get_version(),\n        #   ...\n\n        class cmd_build_exe(_build_exe):\n            def run(self) -> None:\n                root = get_root()\n                cfg = get_config_from_root(root)\n                versions = get_versions()\n                target_versionfile = cfg.versionfile_source\n                print(\"UPDATING %s\" % target_versionfile)\n                write_to_version_file(target_versionfile, versions)\n\n                _build_exe.run(self)\n                os.unlink(target_versionfile)\n                with open(cfg.versionfile_source, \"w\") as f:\n                    LONG = LONG_VERSION_PY[cfg.VCS]\n                    f.write(LONG %\n                            {\"DOLLAR\": \"$\",\n                             \"STYLE\": cfg.style,\n                             \"TAG_PREFIX\": cfg.tag_prefix,\n                             \"PARENTDIR_PREFIX\": cfg.parentdir_prefix,\n                             \"VERSIONFILE_SOURCE\": cfg.versionfile_source,\n                             })\n        cmds[\"build_exe\"] = cmd_build_exe\n        del cmds[\"build_py\"]\n\n    if 'py2exe' in sys.modules:  # py2exe enabled?\n        try:\n            from py2exe.setuptools_buildexe import py2exe as _py2exe  # type: ignore\n        except ImportError:\n            from py2exe.distutils_buildexe import py2exe as _py2exe  # type: ignore\n\n        class cmd_py2exe(_py2exe):\n            def run(self) -> None:\n                root = get_root()\n                cfg = get_config_from_root(root)\n                versions = get_versions()\n                target_versionfile = cfg.versionfile_source\n                print(\"UPDATING %s\" % target_versionfile)\n                write_to_version_file(target_versionfile, versions)\n\n                _py2exe.run(self)\n                os.unlink(target_versionfile)\n                with open(cfg.versionfile_source, \"w\") as f:\n                    LONG = LONG_VERSION_PY[cfg.VCS]\n                    f.write(LONG %\n                            {\"DOLLAR\": \"$\",\n                             \"STYLE\": cfg.style,\n                             \"TAG_PREFIX\": cfg.tag_prefix,\n                             \"PARENTDIR_PREFIX\": cfg.parentdir_prefix,\n                             \"VERSIONFILE_SOURCE\": cfg.versionfile_source,\n                             })\n        cmds[\"py2exe\"] = cmd_py2exe\n\n    # sdist farms its file list building out to egg_info\n    if 'egg_info' in cmds:\n        _egg_info: Any = cmds['egg_info']\n    else:\n        from setuptools.command.egg_info import egg_info as _egg_info\n\n    class cmd_egg_info(_egg_info):\n        def find_sources(self) -> None:\n            # egg_info.find_sources builds the manifest list and writes it\n            # in one shot\n            super().find_sources()\n\n            # Modify the filelist and normalize it\n            root = get_root()\n            cfg = get_config_from_root(root)\n            self.filelist.append('versioneer.py')\n            if cfg.versionfile_source:\n                # There are rare cases where versionfile_source might not be\n                # included by default, so we must be explicit\n                self.filelist.append(cfg.versionfile_source)\n            self.filelist.sort()\n            self.filelist.remove_duplicates()\n\n            # The write method is hidden in the manifest_maker instance that\n            # generated the filelist and was thrown away\n            # We will instead replicate their final normalization (to unicode,\n            # and POSIX-style paths)\n            from setuptools import unicode_utils\n            normalized = [unicode_utils.filesys_decode(f).replace(os.sep, '/')\n                          for f in self.filelist.files]\n\n            manifest_filename = os.path.join(self.egg_info, 'SOURCES.txt')\n            with open(manifest_filename, 'w') as fobj:\n                fobj.write('\\n'.join(normalized))\n\n    cmds['egg_info'] = cmd_egg_info\n\n    # we override different \"sdist\" commands for both environments\n    if 'sdist' in cmds:\n        _sdist: Any = cmds['sdist']\n    else:\n        from setuptools.command.sdist import sdist as _sdist\n\n    class cmd_sdist(_sdist):\n        def run(self) -> None:\n            versions = get_versions()\n            self._versioneer_generated_versions = versions\n            # unless we update this, the command will keep using the old\n            # version\n            self.distribution.metadata.version = versions[\"version\"]\n            return _sdist.run(self)\n\n        def make_release_tree(self, base_dir: str, files: List[str]) -> None:\n            root = get_root()\n            cfg = get_config_from_root(root)\n            _sdist.make_release_tree(self, base_dir, files)\n            # now locate _version.py in the new base_dir directory\n            # (remembering that it may be a hardlink) and replace it with an\n            # updated value\n            target_versionfile = os.path.join(base_dir, cfg.versionfile_source)\n            print(\"UPDATING %s\" % target_versionfile)\n            write_to_version_file(target_versionfile,\n                                  self._versioneer_generated_versions)\n    cmds[\"sdist\"] = cmd_sdist\n\n    return cmds\n\n\nCONFIG_ERROR = \"\"\"\nsetup.cfg is missing the necessary Versioneer configuration. You need\na section like:\n\n [versioneer]\n VCS = git\n style = pep440\n versionfile_source = src/myproject/_version.py\n versionfile_build = myproject/_version.py\n tag_prefix =\n parentdir_prefix = myproject-\n\nYou will also need to edit your setup.py to use the results:\n\n import versioneer\n setup(version=versioneer.get_version(),\n       cmdclass=versioneer.get_cmdclass(), ...)\n\nPlease read the docstring in ./versioneer.py for configuration instructions,\nedit setup.cfg, and re-run the installer or 'python versioneer.py setup'.\n\"\"\"\n\nSAMPLE_CONFIG = \"\"\"\n# See the docstring in versioneer.py for instructions. Note that you must\n# re-run 'versioneer.py setup' after changing this section, and commit the\n# resulting files.\n\n[versioneer]\n#VCS = git\n#style = pep440\n#versionfile_source =\n#versionfile_build =\n#tag_prefix =\n#parentdir_prefix =\n\n\"\"\"\n\nOLD_SNIPPET = \"\"\"\nfrom ._version import get_versions\n__version__ = get_versions()['version']\ndel get_versions\n\"\"\"\n\nINIT_PY_SNIPPET = \"\"\"\nfrom . import {0}\n__version__ = {0}.get_versions()['version']\n\"\"\"\n\n\ndef do_setup() -> int:\n    \"\"\"Do main VCS-independent setup function for installing Versioneer.\"\"\"\n    root = get_root()\n    try:\n        cfg = get_config_from_root(root)\n    except (OSError, configparser.NoSectionError,\n            configparser.NoOptionError) as e:\n        if isinstance(e, (OSError, configparser.NoSectionError)):\n            print(\"Adding sample versioneer config to setup.cfg\",\n                  file=sys.stderr)\n            with open(os.path.join(root, \"setup.cfg\"), \"a\") as f:\n                f.write(SAMPLE_CONFIG)\n        print(CONFIG_ERROR, file=sys.stderr)\n        return 1\n\n    print(\" creating %s\" % cfg.versionfile_source)\n    with open(cfg.versionfile_source, \"w\") as f:\n        LONG = LONG_VERSION_PY[cfg.VCS]\n        f.write(LONG % {\"DOLLAR\": \"$\",\n                        \"STYLE\": cfg.style,\n                        \"TAG_PREFIX\": cfg.tag_prefix,\n                        \"PARENTDIR_PREFIX\": cfg.parentdir_prefix,\n                        \"VERSIONFILE_SOURCE\": cfg.versionfile_source,\n                        })\n\n    ipy = os.path.join(os.path.dirname(cfg.versionfile_source),\n                       \"__init__.py\")\n    maybe_ipy: Optional[str] = ipy\n    if os.path.exists(ipy):\n        try:\n            with open(ipy, \"r\") as f:\n                old = f.read()\n        except OSError:\n            old = \"\"\n        module = os.path.splitext(os.path.basename(cfg.versionfile_source))[0]\n        snippet = INIT_PY_SNIPPET.format(module)\n        if OLD_SNIPPET in old:\n            print(\" replacing boilerplate in %s\" % ipy)\n            with open(ipy, \"w\") as f:\n                f.write(old.replace(OLD_SNIPPET, snippet))\n        elif snippet not in old:\n            print(\" appending to %s\" % ipy)\n            with open(ipy, \"a\") as f:\n                f.write(snippet)\n        else:\n            print(\" %s unmodified\" % ipy)\n    else:\n        print(\" %s doesn't exist, ok\" % ipy)\n        maybe_ipy = None\n\n    # Make VCS-specific changes. For git, this means creating/changing\n    # .gitattributes to mark _version.py for export-subst keyword\n    # substitution.\n    do_vcs_install(cfg.versionfile_source, maybe_ipy)\n    return 0\n\n\ndef scan_setup_py() -> int:\n    \"\"\"Validate the contents of setup.py against Versioneer's expectations.\"\"\"\n    found = set()\n    setters = False\n    errors = 0\n    with open(\"setup.py\", \"r\") as f:\n        for line in f.readlines():\n            if \"import versioneer\" in line:\n                found.add(\"import\")\n            if \"versioneer.get_cmdclass()\" in line:\n                found.add(\"cmdclass\")\n            if \"versioneer.get_version()\" in line:\n                found.add(\"get_version\")\n            if \"versioneer.VCS\" in line:\n                setters = True\n            if \"versioneer.versionfile_source\" in line:\n                setters = True\n    if len(found) != 3:\n        print(\"\")\n        print(\"Your setup.py appears to be missing some important items\")\n        print(\"(but I might be wrong). Please make sure it has something\")\n        print(\"roughly like the following:\")\n        print(\"\")\n        print(\" import versioneer\")\n        print(\" setup( version=versioneer.get_version(),\")\n        print(\"        cmdclass=versioneer.get_cmdclass(),  ...)\")\n        print(\"\")\n        errors += 1\n    if setters:\n        print(\"You should remove lines like 'versioneer.VCS = ' and\")\n        print(\"'versioneer.versionfile_source = ' . This configuration\")\n        print(\"now lives in setup.cfg, and should be removed from setup.py\")\n        print(\"\")\n        errors += 1\n    return errors\n\n\ndef setup_command() -> NoReturn:\n    \"\"\"Set up Versioneer and exit with appropriate error code.\"\"\"\n    errors = do_setup()\n    errors += scan_setup_py()\n    sys.exit(1 if errors else 0)\n\n\nif __name__ == \"__main__\":\n    cmd = sys.argv[1]\n    if cmd == \"setup\":\n        setup_command()\n"
        },
        {
          "name": "wormhole_complete.bash",
          "type": "blob",
          "size": 0.7822265625,
          "content": "_wormhole_completion() {\n    local IFS=$'\\n'\n    local response\n\n    response=$(env COMP_WORDS=\"${COMP_WORDS[*]}\" COMP_CWORD=$COMP_CWORD _WORMHOLE_COMPLETE=bash_complete $1)\n\n    for completion in $response; do\n        IFS=',' read type value <<< \"$completion\"\n\n        if [[ $type == 'dir' ]]; then\n            COMPREPLY=()\n            compopt -o dirnames\n        elif [[ $type == 'file' ]]; then\n            COMPREPLY=()\n            compopt -o default\n        elif [[ $type == 'plain' ]]; then\n            COMPREPLY+=($value)\n        fi\n    done\n\n    return 0\n}\n\n_wormhole_completion_setup() {\n    if [[ \"${BASH_VERSINFO[0]}\" -lt 4 ]]; then\n        complete -F _wormhole_completion wormhole\n    else\n        complete -o nosort -F _wormhole_completion wormhole\n    fi\n}\n\n_wormhole_completion_setup;\n\n"
        },
        {
          "name": "wormhole_complete.fish",
          "type": "blob",
          "size": 0.5986328125,
          "content": "function _wormhole_completion;\n    set -l response (env _WORMHOLE_COMPLETE=fish_complete COMP_WORDS=(commandline -cp) COMP_CWORD=(commandline -t) wormhole);\n\n    for completion in $response;\n        set -l metadata (string split \",\" $completion);\n\n        if test $metadata[1] = \"dir\";\n            __fish_complete_directories $metadata[2];\n        else if test $metadata[1] = \"file\";\n            __fish_complete_path $metadata[2];\n        else if test $metadata[1] = \"plain\";\n            echo $metadata[2];\n        end;\n    end;\nend;\n\ncomplete --no-files --command wormhole --arguments \"(_wormhole_completion)\";\n\n"
        },
        {
          "name": "wormhole_complete.zsh",
          "type": "blob",
          "size": 1.154296875,
          "content": "#compdef wormhole\n\n_wormhole_completion() {\n    local -a completions\n    local -a completions_with_descriptions\n    local -a response\n    (( ! $+commands[wormhole] )) && return 1\n\n    response=(\"${(@f)$(env COMP_WORDS=\"${words[*]}\" COMP_CWORD=$((CURRENT-1)) _WORMHOLE_COMPLETE=zsh_complete wormhole)}\")\n\n    for type key descr in ${response}; do\n        if [[ \"$type\" == \"plain\" ]]; then\n            if [[ \"$descr\" == \"_\" ]]; then\n                completions+=(\"$key\")\n            else\n                completions_with_descriptions+=(\"$key\":\"$descr\")\n            fi\n        elif [[ \"$type\" == \"dir\" ]]; then\n            _path_files -/\n        elif [[ \"$type\" == \"file\" ]]; then\n            _path_files -f\n        fi\n    done\n\n    if [ -n \"$completions_with_descriptions\" ]; then\n        _describe -V unsorted completions_with_descriptions -U\n    fi\n\n    if [ -n \"$completions\" ]; then\n        compadd -U -V unsorted -a completions\n    fi\n}\n\nif [[ $zsh_eval_context[-1] == loadautofunc ]]; then\n    # autoload from fpath, call function directly\n    _wormhole_completion \"$@\"\nelse\n    # eval/source/. command, register function for later\n    compdef _wormhole_completion wormhole\nfi\n\n"
        }
      ]
    }
  ]
}