{
  "metadata": {
    "timestamp": 1736561375185,
    "page": 414,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "robotframework/robotframework",
      "stars": 10125,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3994140625,
          "content": "tmp\nbuild\ndist\ntarget\nvenv*\n.venv*\n.env\n*~\nMANIFEST\natest/results\nutest/jasmine-results\n.idea\n.vscode\n.*project\n*.pyc\n*$py.class\next-lib\n*.iml\n.DS_Store\ndoc/api/_build\ndoc/libraries/*.html\ndoc/libraries/*.json\ndoc/userguide/RobotFrameworkUserGuide.html\nsrc/robotframework.egg-info\nlog.html\noutput.xml\nreport.html\n__pycache__\n.classpath\n.settings\n.jython_cache\n.mypy_cache/\nnode_modules\n.cache/\n.parcel-cache/\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.591796875,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3\"\n\n# Build documentation in the doc/api directory with Sphinx\nsphinx:\n   configuration: doc/api/conf.py\n\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n\n# Optionally declare the Python requirements required to build your docs\npython:\n  install:\n  - requirements: doc/api/requirements.txt\n"
        },
        {
          "name": "AUTHORS.rst",
          "type": "blob",
          "size": 6.2666015625,
          "content": "Robot Framework contributors\n============================\n\nThis file lists contributors to Robot Framework during the time it was\ndeveloped at Nokia Networks. There are both `core team members`_ as well\nas `other contributors`_.\n\nNowadays contributors are acknowledged separately in the release notes\nand this file is not anymore updated. Contributors can also be found easily\nvia GitHub__.\n\n__ https://github.com/robotframework/robotframework/graphs/contributors\n\nCore team members\n-----------------\n\nThe members of the Robot Framework core team during the Nokia Networks years\n2005 - 2015.\n\n===========================    ===========\n         Name                     Years\n===========================    ===========\nPekka Klärck (né Laukkanen)    2005 - 2015\nPetri Haapio                   2005 - 2008\nJuha Rantanen                  2005 - 2011\nLasse Koskela                  2005 - 2006\nJanne Härkönen                 2006 - 2012\nSami Honkonen                  2006 - 2007\nAntti Tuomaala                 2006\nRan Nyman                      2007 - 2010\nHeikki Hulkko                  2007 - 2009\nAnna Tevaniemi                 2008\nKari Husa                      2009 - 2011\nJussi Malinen                  2010 - 2015\nMikko Korpela                  2010 - 2014\nIsmo Aro                       2010 - 2012\nIlmari Kontulainen             2010 - 2013\nTommi Asiala                   2012\nMika Hänninen                  2012 - 2013\nTatu Kairi                     2012 - 2014\nAnssi Syrjäsalo                2013\nJanne Piironen                 2013 - 2014\n===========================    ===========\n\nOther contributors\n------------------\n\nExternal contributors after Robot Framework was open sourced in 2008.\nAs already mentioned above, this list is not anymore updated.\n\n===========================    ===============================================\n         Name                                    Contribution\n===========================    ===============================================\nElisabeth Hendrickson          | Quick Start Guide (2.0)\nMarcin Michalak                | String library (2.1)\nChris Prinos                   | reST (HTML) support (2.1)\n                               | How-to debug execution with `pdb` (2.7.6)\nRégis Desgroppes               | Fixing installation paths (2.1.3)\n                               | xUnit compatible outputs (2.5.5)\nRobert Spielmann               | Report background colors (2.5)\nXie Yanbo                      | Alignment of east asian characters (2.5.3)\nJSXGraph Developers            | JSXGraph tool and license changes for it (2.6)\nImran                          | Template names to listener API (2.6)\n                               | Suite source to listener API (2.7)\nTatu Aalto                     | Get Time keyword enhancement (2.7.5)\nEemeli Kantola                 | Fix for non-breaking spaces (2.7.5)\nMartti Haukijärvi              | IronPython support to Screenshot library (2.7.5)\nGuy Kisel                      | How-to use decorators when creating libraries (2.7.7)\n                               | BuiltIn.Log pprint support (2.8.6)\n                               | New pattern matching keywords in Collections (2.8.6)\n                               | Keyword/variable not found recommendations (2.8.6)\n                               | Tidy ELSE and ELSE IF onto separate lines (2.8.7)\n                               | Initial contribution guidelines (2.9, #1805)\nMike Terzo                     | Better connection errors to Remote library (2.7.7)\nAsko Soukka                    | reST (plain text) support (2.8.2)\nVivek Kumar Verma              | reST (plain text) support (2.8.2)\nStefan Zimmermann              | `**kwargs` support for dynamic libraries (2.8.2)\n                               | `**kwargs` support for Java libraries (2.8.3)\n                               | `*varargs` support using java.util.List (2.8.3)\nMirel Pehadzic                 | Terminal emulation for Telnet library (2.8.2)\nDiogo Sa-Chaves De Oliveira    | Terminal emulation for Telnet library (2.8.2)\nLionel Perrin                  | Giving custom seed to --randomize (2.8.5)\nMichael Walle                  | Telnet.Write Control Character keyword (2.8.5)\n                               | Telnet.Read Until Prompt strip_prompt option (2.8.7)\n                               | String.Strip String (3.0)\nTero Kinnunen                  | BDD 'But' prefix ignored (2.8.7)\nHeiko Thiery                   | Enable log level config option for TelnetLibrary (2.8.7)\nNicolae Chedea                 | Float parameters in FOR IN RANGE (2.8.7)\nJared Hellman                  | Custom keyword names (2.9)\n                               | Embedded arguments for library keywords (2.9)\nVinicius K. Ruoso              | Support multiple listeners per library (2.9)\n                               | Allowing control over connection timeout in Telnet library (2.9.2)\n                               | Suppress docutils errors/warnings with reST format (2.9.2)\nJoseph Lorenzini               | Exposed ERROR log level for keywords (2.9)\nGuillaume Grossetie            | Less flashy report and log styles (2.9, #1943)\nEd Brannin                     | `FOR ... IN ZIP`, `FOR ... IN ENUMERATE` (2.9, #1989)\nMoon SungHoon                  | String.Get Regexp Matches keyword (2.9, #1985)\nHélio Guilherme                | Support partial match with String.Get Lines Matching Regexp (2.9, #1836)\nJean-Charles Deville           | Make variable errors not exit `Runner keywords` (2.9, #1869)\nLaurent Bristiel               | Convert examples in User Guide to plain text format (2.9, #1972)\nTim Orling                     | IronPython support for `Dialogs` library (2.9.2, #1235)\nJozef Behran                   | Fix `${TEST_MESSAGE}` to reflect current test message (3.0, #2188)\nJoong-Hee Lee                  | Extend 'Repeat Keyword' to support timeout (3.0, #2245)\nAnton Nikitin                  | Should (Not) Contain Any (3.0.1, #2120)\nYang Qian                      | Support to copy/deepcopy model objects (3.0.1, #2483)\nChris Callan                   | Case-insensitivity support to various comparison keywords (3.0.1, #2439)\nBenjamin Einaudi               | Add `--rerunfailedsuites` option (3.0.1, #2117)\n===========================    ===============================================\n"
        },
        {
          "name": "BUILD.rst",
          "type": "blob",
          "size": 9.3291015625,
          "content": "Creating Robot Framework releases\n=================================\n\nThese instructions cover steps needed to create new Robot Framework releases.\nMany individual steps are automated, but we don't want to automate\nthe whole procedure because it would be hard to react if something goes\nterribly wrong. When applicable, the steps are listed as commands that can\nbe copied and executed on the command line.\n\n.. contents::\n   :depth: 1\n\nPreconditions\n-------------\n\nOperating system and Python requirements\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nGenerating releases has only been tested on Linux, but it ought to work the\nsame way also on OSX and other unixes. Generating releases on Windows may\nwork but is not tested, supported, or recommended.\n\nCreating releases is only supported with Python 3.6 or newer. If you are\nusing Ubuntu or one of its derivatives and don't have Python 3.6 in the\nofficial package repository, you may consider using the\n`Dead Snakes PPA <https://launchpad.net/~deadsnakes/+archive/ubuntu/ppa>`_.\n\nThe ``pip`` and ``invoke`` commands below are also expected to run on Python\n3.6+. Alternatively, it's possible to use the ``python3.6 -m pip`` approach\nto run these commands.\n\nPython dependencies\n~~~~~~~~~~~~~~~~~~~\n\nMany steps are automated using the generic `Invoke <http://pyinvoke.org>`_\ntool with a help by our `rellu <https://github.com/robotframework/rellu>`_\nutilities, but also other tools and modules are needed. A pre-condition is\ninstalling all these, and that's easiest done using `pip\n<http://pip-installer.org>`_ and the provided `<requirements-dev.txt>`_ file::\n\n    pip install -r requirements-dev.txt\n\nUsing Invoke\n~~~~~~~~~~~~\n\nInvoke tasks are defined in the `<tasks.py>`_ file and they are executed from\nthe command line like::\n\n    inv[oke] task [options]\n\nRun ``invoke`` without arguments for help. All tasks can be listed using\n``invoke --list`` and each task's usage with ``invoke --help task``.\n\nDifferent Git workflows\n~~~~~~~~~~~~~~~~~~~~~~~\n\nGit commands used below always expect that ``origin`` is the project main\nrepository. If that's not the case, and instead ``origin`` is your personal\nfork, you probably still want to push to the main repository. In that case\nyou need to add ``upstream`` or similar to ``git push`` commands before\nrunning them.\n\nTesting\n-------\n\nMake sure that adequate tests are executed before releases are created.\nSee `<atest/README.rst>`_ for details.\n\nIf output.xml `schema <doc/schema/README.rst>`_ has changed, remember to\nrun tests also with `full schema validation`__ enabled::\n\n    atest/run.py --schema-validation\n\n__ https://github.com/robotframework/robotframework/tree/master/atest#schema-validation\n\nPreparation\n-----------\n\n1. Check that you are on the right branch and have nothing left to commit,\n   pull, or push::\n\n      git branch\n      git status\n      git pull --rebase\n      git push\n\n2. Clean up::\n\n      invoke clean\n\n3. Set version information to a shell variable to ease copy-pasting further\n   commands. Add ``aN``, ``bN`` or ``rcN`` postfix if creating a pre-release::\n\n      VERSION=<version>\n\n   For example, ``VERSION=7.1.1`` or ``VERSION=7.2a2``. No ``v`` prefix!\n\nRelease notes\n-------------\n\n1. Create a personal `GitHub access token`__ to be able to access issue tracker\n   programmatically. The token needs only the ``repo/public_repo`` scope.\n\n2. Set GitHub user information into shell variables to ease running the\n   ``invoke release-notes`` command in the next step::\n\n      GITHUB_USERNAME=<username>\n      GITHUB_ACCESS_TOKEN=<token>\n\n   ``<username>`` is your normal GitHub user name and ``<token>`` is the personal\n   access token generated in the previous step. Alternatively this information can\n   be given when running the command in the next step.\n\n3. Generate a template for the release notes::\n\n      invoke release-notes -w -v $VERSION -u $GITHUB_USERNAME -p $GITHUB_ACCESS_TOKEN\n\n   The ``-v $VERSION`` option can be omitted if `version is already set\n   <Set version_>`__. Omit the ``-w`` option if you just want to get release\n   notes printed to the console, not written to a file.\n\n   When generating release notes for a preview release like ``7.2rc1``,\n   the list of issues is only going to contain issues with that label\n   (e.g. ``rc1``) or with a label of an earlier preview release (e.g.\n   ``alpha1``, ``beta2``).\n\n4. Fill the missing details in the generated release notes template.\n\n5. Make sure that issues have correct information:\n\n   - All issues should have type (bug, enhancement or task) and priority set.\n     Notice that issues with the task type are automatically excluded from\n     the release notes.\n   - Issue priorities should be consistent.\n   - Issue titles should be informative. Consistency is good here too, but\n     no need to overdo it.\n\n   If information needs to be added or edited, its better to edit it in the\n   issue tracker than in the generated release notes. This allows re-generating\n   the list of issues later if more issues are added.\n\n6. Add, commit and push::\n\n      git add doc/releasenotes/rf-$VERSION.rst\n      git commit -m \"Release notes for $VERSION\" doc/releasenotes/rf-$VERSION.rst\n      git push\n\n7. Update later if necessary. Writing release notes is typically the biggest\n   task when generating releases, and getting everything done in one go is\n   often impossible.\n\n__ https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token\n\nSet version\n-----------\n\n1. Set version information in `<src/robot/version.py>`_ and `<setup.py>`_::\n\n      invoke set-version $VERSION\n\n2. Commit and push changes::\n\n      git commit -m \"Updated version to $VERSION\" src/robot/version.py setup.py\n      git push\n\nTagging\n-------\n\n1. Create an annotated tag and push it::\n\n      git tag -a v$VERSION -m \"Release $VERSION\"\n      git push --tags\n\n2. Add short release notes to GitHub's `releases page\n   <https://github.com/robotframework/robotframework/releases>`_\n   with a link to the full release notes.\n\nCreating distributions\n----------------------\n\n1. Checkout the earlier created tag if necessary::\n\n      git checkout v$VERSION\n\n   This isn't necessary if continuing right after tagging_.\n\n2. Cleanup (again). This removes temporary files as well as ``build`` and\n   ``dist`` directories::\n\n      invoke clean\n\n3. Build `libdoc.html`::\n\n      npm run build --prefix src/web/\n\n   This step can be skipped if there are no changes to Libdoc. Prerequisites\n   are listed in `<src/web/README.md>`_.\n\n4. Create and validate source distribution and `wheel <https://pythonwheels.com>`_::\n\n      python setup.py sdist bdist_wheel\n      ls -l dist\n      twine check dist/*\n\n   Distributions can be tested locally if needed.\n\n5. Upload distributions to PyPI::\n\n      twine upload dist/*\n\n6. Verify that project pages at `PyPI\n   <https://pypi.python.org/pypi/robotframework>`_ look good.\n\n7. Test installation::\n\n      pip install --pre --upgrade robotframework\n\n8. Documentation\n\n   - For a reproducible build, set the ``SOURCE_DATE_EPOCH``\n     environment variable to a constant value, corresponding to the\n     date in seconds since the Epoch (also known as Epoch time).  For\n     more information regarding this environment variable, see\n     https://reproducible-builds.org/docs/source-date-epoch/.\n\n   - Generate library documentation::\n\n       invoke library-docs all\n\n   - Create User Guide package::\n\n       doc/userguide/ug2html.py zip\n\n   - Update docs at http://robotframework.org/robotframework/::\n\n        git checkout gh-pages\n        invoke add-docs $VERSION --push\n        git checkout master    # replace master with v*-maintenance if needed!\n\nPost actions\n------------\n\n1. Back to master if needed::\n\n      git checkout master    # replace master with v*-maintenance if needed!\n\n2. Set dev version based on the previous version::\n\n      invoke set-version dev\n      git commit -m \"Back to dev version\" src/robot/version.py setup.py\n      git push\n\n   For example, ``1.2.3`` is changed to ``1.2.4.dev1`` and ``2.0.1a1``\n   to ``2.0.1a2.dev1``.\n\n3. Close the `issue tracker milestone\n   <https://github.com/robotframework/robotframework/milestones>`_.\n   Create also new milestone for the next release unless one exists already.\n\n4. Update API doc version at https://readthedocs.org/projects/robot-framework/.\n\nAnnouncements\n-------------\n\n1. `robotframework-users <https://groups.google.com/group/robotframework-users>`_\n   and\n   `robotframework-announce <https://groups.google.com/group/robotframework-announce>`_\n   lists. The latter is not needed with preview releases but should be used\n   at least with major updates. Notice that sending to it requires admin rights.\n\n2. Twitter. Either Tweet something yourself and make sure it's re-tweeted\n   by `@robotframework <http://twitter.com/robotframework>`_, or send the\n   message directly as `@robotframework`. This makes the note appear also\n   at http://robotframework.org.\n\n   Should include a link to more information. Possibly a link to the full\n   release notes or an email to the aforementioned mailing lists.\n\n3. ``#devel`` and ``#general`` channels on Slack.\n\n4. `Robot Framework LinkedIn\n   <https://www.linkedin.com/groups/3710899/>`_ group.\n\n5. Consider sending announcements, at least with major releases, also to other\n   forums where we want to make the framework more well known. For example:\n\n   - http://opensourcetesting.org\n   - http://tech.groups.yahoo.com/group/agile-testing\n   - http://lists.idyll.org/listinfo/testing-in-python\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 11.7041015625,
          "content": "Contribution guidelines\n=======================\n\nThese guidelines instruct how to submit issues and contribute code or\ndocumentation to the `Robot Framework project\n<https://github.com/robotframework/robotframework>`_.\nThere are also many other projects in the larger `Robot Framework ecosystem\n<http://robotframework.org>`_ that you can contribute to. If you notice\na library or tool missing, there is hardly any better way to contribute\nthan creating your own project. Other great ways to contribute include\nanswering questions and participating discussion on `robotframework-users\n<https://groups.google.com/forum/#!forum/robotframework-users>`_ mailing list\nand other forums, as well as spreading the word about the framework one way or\nthe other.\n\nThese guidelines expect readers to have a basic knowledge about open source\nas well as why and how to contribute to open source projects. If you are\ntotally new to these topics, it may be a good idea to look at the generic\n`Open Source Guides <https://opensource.guide/>`_ first.\n\n.. contents::\n   :depth: 2\n   :local:\n\nSubmitting issues\n-----------------\n\nBugs and enhancements are tracked in the `issue tracker\n<https://github.com/robotframework/robotframework/issues>`_. If you are\nunsure if something is a bug or is a feature worth implementing, you can\nfirst ask on `robotframework-users`_ mailing list, on `IRC\n<http://webchat.freenode.net/?channels=robotframework&prompt=1>`_\n(#robotframework on irc.freenode.net), or on `Slack\n<https://robotframework-slack-invite.herokuapp.com>`_. These and other similar\nforums, not the issue tracker, are also places where to ask general questions.\n\nBefore submitting a new issue, it is always a good idea to check is the\nsame bug or enhancement already reported. If it is, please add your comments\nto the existing issue instead of creating a new one.\n\nReporting bugs\n~~~~~~~~~~~~~~\n\nExplain the bug you have encountered so that others can understand it\nand preferably also reproduce it. Key things to have in good bug report:\n\n1. Version information\n\n   - Robot Framework version\n   - Python interpreter version\n   - Operating system and its version\n\n2. Steps to reproduce the problem. With more complex problems it is often\n   a good idea to create a `short, self contained, correct example (SSCCE)\n   <http://sscce.org>`_.\n\n3. Possible error message and traceback.\n\nNotice that all information in the issue tracker is public. Do not include\nany confidential information there.\n\nEnhancement requests\n~~~~~~~~~~~~~~~~~~~~\n\nDescribe the new feature and use cases for it in as much detail as possible.\nEspecially with larger enhancements, be prepared to contribute the code\nin the form of a pull request as explained below or to pay someone for the work.\nConsider also would it be better to implement this functionality as a separate\ntool outside the core framework.\n\nCode contributions\n------------------\n\nIf you have fixed a bug or implemented an enhancement, you can contribute\nyour changes via GitHub's pull requests. This is not restricted to code,\non the contrary, fixes and enhancements to documentation_ and tests_ alone\nare also very valuable.\n\nChoosing something to work on\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOften you already have a bug or an enhancement you want to work on in your\nmind, but you can also look at the `issue tracker`_ to find bugs and\nenhancements submitted by others. The issues vary significantly in complexity\nand difficulty, so you can try to find something that matches your skill level\nand knowledge. There are two specific labels to look for when looking for\nsomething to contribute:\n\n`good first issue`__\n   These issues typically do not require any knowledge of Robot Framework\n   internals and are generally easy to implement or fix. Thus these issues\n   are especially good for new contributors.\n\n`help wanted`__\n   These issues require external help to get implemented or fixed.\n\n__ https://github.com/robotframework/robotframework/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22\n__ https://github.com/robotframework/robotframework/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22\n\nPull requests\n~~~~~~~~~~~~~\n\nOn GitHub pull requests are the main mechanism to contribute code. They\nare easy to use both for the contributor and for the person accepting\nthe contribution, and with more complex contributions it is easy also\nfor others to join the discussion. Preconditions for creating pull\nrequests are having a `GitHub account <https://github.com/>`_,\ninstalling `Git <https://git-scm.com>`_ and forking the\n`Robot Framework project`_.\n\nGitHub has good articles explaining how to\n`set up Git <https://help.github.com/articles/set-up-git/>`_,\n`fork a repository <https://help.github.com/articles/fork-a-repo/>`_ and\n`use pull requests <https://help.github.com/articles/using-pull-requests>`_\nand we do not go through them in more detail. We do, however, recommend to\ncreate dedicated topic branches for pull requests instead of creating\nthem based on the master branch. This is especially important if you plan to\nwork on multiple pull requests at the same time.\n\nCoding conventions\n~~~~~~~~~~~~~~~~~~\n\nGeneral guidelines\n''''''''''''''''''\n\nRobot Framework uses the general Python code conventions defined in `PEP-8\n<https://www.python.org/dev/peps/pep-0008/>`_. In addition to that, we try\nto write `idiomatic Python\n<http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html>`_\nand follow the `SOLID principles\n<https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)>`_ with all\nnew code. An important guideline is that the code should be clear enough that\ncomments are generally not needed.\n\nAll code, including test code, must be compatible with all supported Python\ninterpreters and versions. Most importantly this means that the code must\nsupport both Python 2 and Python 3.\n\nLine length\n'''''''''''\n\nMaximum line length with Python code, including docstrings and comments, is 88\ncharacters. This is also what `Black <https://pypi.org/project/black/>`__ uses\nby default and `their documentation\n<https://black.readthedocs.io/en/stable/the_black_code_style.html#line-length>`__\nexplains why. Notice that we do not have immediate plans to actually take Black\ninto use but we may consider that later.\n\nWith Robot Framework tests the maximum line length is 100.\n\nWhitespace\n''''''''''\n\nWe are pretty picky about using whitespace. We follow `PEP-8`_ in how to use\nblank lines and whitespace in general, but we also have some stricter rules:\n\n- No blank lines inside functions.\n- No blank lines between a class declaration and class attributes or between\n  attributes.\n- Indentation using spaces, not tabs.\n- No trailing spaces.\n- No extra empty lines at the end of the file.\n- Files must end with a newline.\n\nMost of these rules are such that any decent text editor or IDE can be\nconfigured to automatically format files according to them.\n\nDocstrings\n''''''''''\n\nDocstrings should be added to public APIs, but they are not generally needed in\ninternal code. When docstrings are added, they should follow `PEP-257\n<https://www.python.org/dev/peps/pep-0257/>`_. See `API documentation`_\nsection below for more details about documentation syntax, generating\nAPI docs, etc.\n\nDocumentation\n~~~~~~~~~~~~~\n\nWith new features adequate documentation is as important as the actual\nfunctionality. Different documentation is needed depending on the issue.\n\nUser Guide\n''''''''''\n\nRobot Framework's features are explained in the `User Guide\n<http://robotframework.org/robotframework/#user-guide>`_. It is generated\nusing a custom script based on the source in `reStructuredText\n<http://docutils.sourceforge.net/rst.html>`_ format. For more details about\nediting and generating it see `<doc/userguide/README.rst>`_.\n\nLibraries\n'''''''''\n\nIf `standard libraries\n<http://robotframework.org/robotframework/#standard-libraries>`_ distributed\nwith Robot Framework are enhanced, also their documentation needs to\nbe updated. Keyword documentation is created from docstrings using the `Libdoc\n<http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#libdoc>`_\ntool. Documentation must use Robot Framework's own `documentation formatting\n<http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#documentation-formatting>`_\nand follow these guidelines:\n\n- Other keywords and sections in the library introduction can be referenced\n  with internal links created with backticks like ```Example Keyword```.\n\n- When referring to arguments, argument names must use inline code style\n  created with double backticks like ````argument````.\n\n- Examples are recommended whenever the new keyword or enhanced functionality is\n  not trivial.\n\n- All new enhancements or changes should have a note telling when the change\n  was introduced. Often adding something like ``New in Robot Framework 3.1.``\n  is enough.\n\nLibrary documentation can be generated using `Invoke <http://pyinvoke.org>`_\nby running command\n\n::\n\n    invoke library-docs <name>\n\nwhere ``<name>`` is the name of the library or its unique prefix. Run\n\n::\n\n    invoke --help library-docs\n\nfor more information see `<BUILD.rst>`_ for details about installing and\nusing Invoke.\n\nAPI documentation\n'''''''''''''''''\n\nModules and classes defined to be public should have API documentation.\nWe do not generally use API docs with internal code because it is so hard\nto keep the docs in sync with the code. Instead we try to keep the code\nas clean and easy to understand as possible.\n\nAPI docs are created using docstrings following guidelines defined in\n`PEP-257`_. They are converted to HTML using `Sphinx <http://sphinx-doc.org/>`_\nand its `autodoc <http://sphinx-doc.org/ext/autodoc.html>`_ extension.\nDocumentation can be created locally using `<doc/api/generate.py>`_ script\nthat unfortunately creates a lot of errors on the console. Releases API docs\nare visible at https://robot-framework.readthedocs.org/.\n\nRobot Framework's public API docs are lacking in many ways. All public\nclasses are not yet documented, existing documentation is somewhat scarce,\nand there could be more examples. Documentation improvements are highly\nappreciated!\n\nTests\n~~~~~\n\nWhen submitting a pull request with a new feature or a fix, you should\nalways include tests for your changes. These tests prove that your changes\nwork, help prevent bugs in the future, and help document what your changes\ndo. Depending on the change, you may need acceptance tests, unit tests\nor both.\n\nMake sure to run all of the tests before submitting a pull request to be sure\nthat your changes do not break anything. If you can, test in multiple\nenvironments and interpreters (Windows, Linux, OS X, different Python\nversions etc). Pull requests are also automatically tested on\ncontinuous integration.\n\nExecuting changed code\n''''''''''''''''''''''\n\nIf you want to manually verify the changes, an easy approach is directly\nrunning the `<src/robot/run.py>`_ script that is part of Robot Framework\nitself. Alternatively you can use the `<rundevel.py>`_ script that sets\nsome command line options and environment variables to ease executing tests\nunder the `<atest/testdata>`_ directory. It also automatically creates a\n``tmp`` directory in the project root and writes all outputs there.\n\nIf you want to install the current code locally, you can do it like\n``python setup.py install`` as explained in `<INSTALL.rst>`_. For\ninstructions how to create a distribution that allows installing elsewhere\nsee `<BUILD.rst>`_.\n\nAcceptance tests\n''''''''''''''''\n\nMost of Robot Framework's testing is done using acceptance tests that\nnaturally use Robot Framework itself for testing. Every new functionality\nor fix should generally get one or more acceptance tests. See\n`<atest/README.rst>`_ for more details about creating and executing them.\n\nUnit tests\n''''''''''\n\nUnit tests are great for testing internal logic and should be added when\nappropriate. For more details see `<utest/README.rst>`_.\n"
        },
        {
          "name": "COPYRIGHT.txt",
          "type": "blob",
          "size": 0.5927734375,
          "content": "Copyright 2008-2015 Nokia Networks\nCopyright 2016-     Robot Framework Foundation\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "INSTALL.rst",
          "type": "blob",
          "size": 11.8876953125,
          "content": "Installation instructions\n=========================\n\nThese instructions cover installing `Robot Framework <https://robotframework.org>`_\nand its preconditions on different operating systems. If you already have\n`Python <http://python.org>`_ installed, you can install Robot Framework using\nthe standard package manager `pip <https://pip.pypa.io>`_::\n\n    pip install robotframework\n\n.. contents::\n   :depth: 2\n   :local:\n\n.. START USER GUIDE IGNORE\n.. Installation instructions are included also in the User Guide.\n.. Following content is excluded when the UG is built.\n.. default-role:: code\n.. role:: file(emphasis)\n.. role:: option(code)\n.. END USER GUIDE IGNORE\n\nPython installation\n-------------------\n\n`Robot Framework`_ is implemented using Python_, and a precondition to install it\nis having Python or its alternative implementation `PyPy <https://pypy.org>`_\ninstalled. Another recommended precondition is having the pip_ package manager\navailable.\n\nRobot Framework requires Python 3.8 or newer. The latest version that supports\nPython 3.6 and 3.7 is `Robot Framework 6.1.1`__. If you need to use Python 2,\n`Jython <http://jython.org>`_ or `IronPython <http://ironpython.net>`_,\nyou can use `Robot Framework 4.1.3`__.\n\n__ https://github.com/robotframework/robotframework/blob/v6.1.1/INSTALL.rst\n__ https://github.com/robotframework/robotframework/blob/v4.1.3/INSTALL.rst\n\nInstalling Python on Linux\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOn Linux you should have suitable Python installation with pip_ available\nby default. If not, you need to consult your distributions documentation\nto learn how to install them. This is also true if you want to use some other\nPython version than the one provided by your distribution by default.\n\nTo check what Python version you have installed, you can run `python --version`\ncommand in a terminal:\n\n.. code:: bash\n\n  $ python --version\n  Python 3.10.13\n\nNotice that if your distribution provides also older Python 2, running `python`\nmay use that. To use Python 3, you can use `python3` command or even more version\nspecific command like `python3.8`. You need to use these version specific variants\nalso if you have multiple Python 3 versions installed and need to pinpoint which\none to use:\n\n.. code:: bash\n\n  $ python3.11 --version\n  Python 3.11.7\n  $ python3.12 --version\n  Python 3.12.1\n\nInstalling Robot Framework directly under the system provided Python\nhas a risk that possible problems can affect the whole Python installation\nused also by the operating system itself. Nowadays\nLinux distributions typically use `user installs`__ by default to avoid such\nproblems, but users can also themselves decide to use `virtual environments`_.\n\n__ https://pip.pypa.io/en/stable/user_guide/#user-installs\n\nInstalling Python on Windows\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOn Windows Python is not available by default, but it is easy to install.\nThe recommended way to install it is using the official Windows installers available\nat http://python.org. For other alternatives, such as installing from the\nMicrosoft Store, see the `official Python documentation`__.\n\nWhen installing Python on Windows, it is recommended to add Python to PATH_\nto make it and tools like pip and Robot Framework easier to execute from\nthe command line. When using the `official installer`__, you just need\nto select the `Add Python 3.x to PATH` checkbox on the first dialog.\n\nTo make sure Python installation has been successful and Python has been\nadded to `PATH`, you can open the command prompt and execute `python --version`:\n\n.. code:: batch\n\n  C:\\>python --version\n  Python 3.10.9\n\nIf you install multiple Python versions on Windows, the version that is used\nwhen you execute `python` is the one first in `PATH`. If you need to use others,\nthe easiest way is using the `py launcher`__:\n\n.. code:: batch\n\n  C:\\>py --version\n  Python 3.10.9\n  C:\\>py -3.12 --version\n  Python 3.12.1\n\n__ https://docs.python.org/3/using/windows.html\n__ https://docs.python.org/3/using/windows.html#windows-full\n__ https://docs.python.org/3/using/windows.html#launcher\n\nInstalling Python on macOS\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMacOS does not provide Python 3 compatible Python version by default, so it\nneeds to be installed separately. The recommended  approach is using the official\nmacOS installers available at http://python.org. If you are using a package\nmanager like `Homebrew <https://brew.sh/>`_, installing Python via it is\npossible as well.\n\nYou can validate Python installation on macOS using `python --version` like on\nother operating systems.\n\nPyPy installation\n~~~~~~~~~~~~~~~~~\n\nPyPy_ is an alternative Python implementation. Its main advantage over the\nstandard Python implementation is that it can be faster and use less memory,\nbut this depends on the context where and how it is used. If execution speed\nis important, at least testing PyPy is probably a good idea.\n\nInstalling PyPy is a straightforward procedure and you can find both installers\nand installation instructions at http://pypy.org. To validate that PyPy installation\nwas successful, run `pypy --version` or `pypy3 --version`.\n\n.. note:: Using Robot Framework with PyPy is officially supported only on Linux.\n\nConfiguring `PATH`\n~~~~~~~~~~~~~~~~~~\n\nThe `PATH environment variable`__ lists directories where commands executed in\na system are searched from. To make using Python, pip_ and Robot Framework easier\nfrom the command line, it is recommended to add the Python installation directory\nas well as the directory where commands like `pip` and `robot` are installed\ninto `PATH`.\n\n__ https://en.wikipedia.org/wiki/PATH_(variable)\n\nWhen using Python on Linux or macOS, Python and tools installed with it should be\nautomatically in `PATH`. If you nevertheless need to update `PATH`, you\ntypically need to edit some system wide or user specific configuration file.\nWhich file to edit and how depends on the operating system and you need to\nconsult its documentation for more details.\n\nOn Windows the easiest way to make sure `PATH` is configured correctly is\nsetting the `Add Python 3.x to PATH` checkbox when `running the installer`__.\nTo manually modify `PATH` on Windows, follow these steps:\n\n1. Find `Environment Variables` under `Settings`. There are variables affecting\n   the whole system and variables affecting only the current user. Modifying\n   the former will require admin rights, but modifying the latter is typically\n   enough.\n\n2. Select `PATH` (often written like `Path`) and click `Edit`. If you are\n   editing user variables and `PATH` does not exist, click `New` instead.\n\n3. Add both the Python installation directory and the :file:`Scripts` directory\n   under the installation directory into `PATH`.\n\n4. Exit the dialog with `Ok` to save the changes.\n\n5. Start a new command prompt for the changes to take effect.\n\n__ https://docs.python.org/3/using/windows.html#the-full-installer\n\nInstalling using pip\n--------------------\n\nThese instructions cover installing Robot Framework using pip_, the standard\nPython package manager. If you are using some other package manager like\n`Conda <https://conda.io>`_, you can use it instead but need to study its\ndocumentation for instructions.\n\nWhen installing Python, you typically get pip installed automatically. If\nthat is not the case, you need to check the documentation of that Python\ninstallation for instructions how to install it separately.\n\nRunning `pip` command\n~~~~~~~~~~~~~~~~~~~~~\n\nTypically you use pip by running the `pip` command, but on Linux you may need\nto use `pip3` or even more Python version specific variant like `pip3.8`\ninstead. When running `pip` or any of its variants, the pip version that is\nfound first in PATH_ will be used. If you have multiple Python versions\ninstalled, you may need to pinpoint which exact version you want to use.\nThis is typically easiest done by running `python -m pip` and substituting\n`python` with the Python version you want to use.\n\nTo make sure you have pip available, you can run `pip --version` or equivalent.\n\nExamples on Linux:\n\n.. code:: bash\n\n  $ pip --version\n  pip 23.2.1 from ... (python 3.10)\n  $ python3.12 -m pip --version\n  pip 23.3.1 from ... (python 3.12)\n\nExamples on Windows:\n\n.. code:: batch\n\n  C:\\> pip --version\n  pip 23.2.1 from ... (python 3.10)\n  C:\\> py -m 3.12 -m pip --version\n  pip 23.3.2 from ... (python 3.12)\n\nIn the subsequent sections pip is always run using the `pip` command. You may\nneed to use some of the other approaches explained above in your environment.\n\nInstalling and uninstalling Robot Framework\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe easiest way to use pip is by letting it find and download packages it\ninstalls from the `Python Package Index (PyPI)`__, but it can also install\npackages downloaded from the PyPI separately. The most common usages are\nshown below and pip_ documentation has more information and examples.\n\n__ PyPI_\n\n.. code:: bash\n\n    # Install the latest version (does not upgrade)\n    pip install robotframework\n\n    # Upgrade to the latest stable version\n    pip install --upgrade robotframework\n\n    # Upgrade to the latest version even if it is a pre-release\n    pip install --upgrade --pre robotframework\n\n    # Install a specific version\n    pip install robotframework==7.0\n\n    # Install separately downloaded package (no network connection needed)\n    pip install robotframework-7.0-py3-none-any.whl\n\n    # Install latest (possibly unreleased) code directly from GitHub\n    pip install https://github.com/robotframework/robotframework/archive/master.zip\n\n    # Uninstall\n    pip uninstall robotframework\n\nInstalling from source\n----------------------\n\nAnother installation alternative is getting Robot Framework source code\nand installing it using the provided `setup.py` script. This approach is\nrecommended only if you do not have pip_ available for some reason.\n\nYou can get the source code by downloading a source distribution package\nfrom PyPI_ and extracting it. An alternative is cloning the GitHub_\nrepository and checking out the needed release tag.\n\nOnce you have the source code, you can install it with the following command:\n\n.. code:: bash\n\n   python setup.py install\n\nThe `setup.py` script accepts several arguments allowing, for example,\ninstallation into a non-default location that does not require administrative\nrights. It is also used for creating different distribution packages. Run\n`python setup.py --help` for more details.\n\nVerifying installation\n----------------------\n\nTo make sure that the correct Robot Framework version has been installed, run\nthe following command:\n\n.. code:: bash\n\n   $ robot --version\n   Robot Framework 7.0 (Python 3.10.3 on linux)\n\nIf running these commands fails with a message saying that the command is\nnot found or recognized, a good first step is double-checking the PATH_\nconfiguration.\n\nIf you have installed Robot Framework under multiple Python versions,\nrunning `robot` will execute the one first in PATH_. To select explicitly,\nyou can run `python -m robot` and substitute `python` with the right Python\nversion.\n\n.. code:: bash\n\n   $ python3.12 -m robot --version\n   Robot Framework 7.0 (Python 3.12.1 on linux)\n\n   C:\\>py -3.11 -m robot --version\n   Robot Framework 7.0 (Python 3.11.7 on win32)\n\nVirtual environments\n--------------------\n\nPython `virtual environments`__ allow Python packages to be installed in\nan isolated location for a particular system or application, rather than\ninstalling all packages into the same global location. They have\ntwo main use cases:\n\n- Install packages needed by different projects into their own environments.\n  This avoids conflicts if projects need different versions of same packages.\n\n- Avoid installing everything under the global Python installation. This is\n  especially important on Linux where the global Python installation may be\n  used by the distribution itself and messing it up can cause severe problems.\n\n__ https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment\n\n.. _PATH: `Configuring path`_\n.. _PyPI: https://pypi.org/project/robotframework\n.. _GitHub: https://github.com/robotframework/robotframework\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.22265625,
          "content": "include src/robot/htmldata/*/*.html src/robot/htmldata/*/*.js src/robot/htmldata/*/*.css\ninclude BUILD.rst CONTRIBUTING.rst COPYRIGHT.txt INSTALL.rst LICENSE.txt README.rst MANIFEST.in tasks.py\nprune src/robot/htmldata/testdata\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 5.3984375,
          "content": "Robot Framework\n===============\n\n.. contents::\n   :local:\n\nIntroduction\n------------\n\n`Robot Framework <http://robotframework.org>`_ |r| is a generic open source\nautomation framework for acceptance testing, acceptance test driven\ndevelopment (ATDD), and robotic process automation (RPA). It has simple plain\ntext syntax and it can be extended easily with generic and custom libraries.\n\nRobot Framework is operating system and application independent. It is\nimplemented using `Python <http://python.org>`_ which is also the primary\nlanguage to extend it. The framework has a rich ecosystem around it consisting\nof various generic libraries and tools that are developed as separate projects.\nFor more information about Robot Framework and the ecosystem, see\nhttp://robotframework.org.\n\nRobot Framework project is hosted on GitHub_ where you can find source code,\nan issue tracker, and some further documentation. Downloads are hosted on PyPI_.\n\nRobot Framework development is sponsored by non-profit `Robot Framework Foundation\n<http://robotframework.org/foundation>`_. If you are using the framework\nand benefiting from it, consider joining the foundation to help maintaining\nthe framework and developing it further.\n\n.. _GitHub: https://github.com/robotframework/robotframework\n.. _PyPI: https://pypi.python.org/pypi/robotframework\n\n.. image:: https://img.shields.io/pypi/v/robotframework.svg?label=version\n   :target: https://pypi.python.org/pypi/robotframework\n   :alt: Latest version\n\n.. image:: https://img.shields.io/pypi/l/robotframework.svg\n   :target: http://www.apache.org/licenses/LICENSE-2.0.html\n   :alt: License\n\nInstallation\n------------\n\nIf you already have Python_ with `pip <https://pip.pypa.io>`_ installed,\nyou can simply run::\n\n    pip install robotframework\n\nFor more detailed installation instructions, including installing Python, see\n`<INSTALL.rst>`__.\n\nRobot Framework requires Python 3.8 or newer and runs also on `PyPy <http://pypy.org>`_.\nThe latest version that supports Python 3.6 and 3.7 is `Robot Framework 6.1.1`__.\nIf you need to use Python 2, `Jython <http://jython.org>`_ or\n`IronPython <http://ironpython.net>`_, you can use `Robot Framework 4.1.3`__.\n\n__ https://github.com/robotframework/robotframework/tree/v6.1.1#readme\n__ https://github.com/robotframework/robotframework/tree/v4.1.3#readme\n\nExample\n-------\n\nBelow is a simple example test case for testing login to some system.\nYou can find more examples with links to related demo projects from\nhttp://robotframework.org.\n\n.. code:: robotframework\n\n    *** Settings ***\n    Documentation     A test suite with a single test for valid login.\n    ...\n    ...               This test has a workflow that is created using keywords in\n    ...               the imported resource file.\n    Resource          login.resource\n\n    *** Test Cases ***\n    Valid Login\n        Open Browser To Login Page\n        Input Username    demo\n        Input Password    mode\n        Submit Credentials\n        Welcome Page Should Be Open\n        [Teardown]    Close Browser\n\nUsage\n-----\n\nTests (or tasks) are executed from the command line using the ``robot``\ncommand or by executing the ``robot`` module directly like ``python -m robot`` .\n\nThe basic usage is giving a path to a test (or task) file or directory as an\nargument with possible command line options before the path::\n\n    robot tests.robot\n    robot --variable BROWSER:Firefox --outputdir results path/to/tests/\n\nAdditionally, there is the ``rebot`` tool for combining results and otherwise\npost-processing outputs::\n\n    rebot --name Example output1.xml output2.xml\n\nRun ``robot --help`` and ``rebot --help`` for more information about the command\nline usage. For a complete reference manual see `Robot Framework User Guide`_.\n\nDocumentation\n-------------\n\n- `Robot Framework User Guide\n  <http://robotframework.org/robotframework/#user-guide>`_\n- `Standard libraries\n  <http://robotframework.org/robotframework/#standard-libraries>`_\n- `API documentation <http://robot-framework.readthedocs.org>`_\n- `General documentation <http://robotframework.org/>`_\n\nSupport and Contact\n-------------------\n\n- `Slack <http://slack.robotframework.org/>`_\n- `Forum <https://forum.robotframework.org/>`_\n- `robotframework-users\n  <https://groups.google.com/group/robotframework-users/>`_ mailing list\n\nContributing\n------------\n\nInterested to contribute to Robot Framework? Great! In that case it is a good\nstart by looking at the `<CONTRIBUTING.rst>`__. If you\ndo not already have an issue you would like to work on, you can check\nissues with `good new issue`__ and `help wanted`__ labels.\n\nRemember also that there are many other tools and libraries in the wider\n`Robot Framework ecosystem <http://robotframework.org>`_ that you can\ncontribute to!\n\n__ https://github.com/robotframework/robotframework/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22\n__ https://github.com/robotframework/robotframework/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22\n\nLicense and Trademark\n---------------------\n\nRobot Framework is open source software provided under the `Apache License 2.0`__.\nRobot Framework documentation and other similar content use the\n`Creative Commons Attribution 3.0 Unported`__ license. Most libraries and tools\nin the ecosystem are also open source, but they may use different licenses.\n\nRobot Framework trademark is owned by `Robot Framework Foundation`_.\n\n__ http://apache.org/licenses/LICENSE-2.0\n__ http://creativecommons.org/licenses/by/3.0\n\n.. |r| unicode:: U+00AE\n"
        },
        {
          "name": "atest",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.244140625,
          "content": "# Requirements needed for development and for building releases.\n# See BUILD.rst for details about the latter\ninvoke >= 0.20\nrellu >= 0.7\ntwine >= 1.12\nwheel\ndocutils\npygments >= 2.8\nsphinx\npydantic < 2\ntelnetlib-313-and-up; python_version >= \"3.13\"\n"
        },
        {
          "name": "rundevel.py",
          "type": "blob",
          "size": 1.7529296875,
          "content": "#!/usr/bin/env python\n\n\"\"\"rundevel.py -- script to run the current Robot Framework code\n\nUsage: [interpreter] rundevel.py [run|rebot] [options] [arguments]\n\nOptions and arguments are same as Robot Framework itself accepts. Sets some\ncommand line options and environment variables to ease executing tests under\nthe `atest/testdata` directory. Writes all outputs into `tmp` directory in\nthe project root.\n\nExamples:\n    ./rundevel.py --name Example tests.robot          # Run with default Python\n    ./rundevel.py run --name Example tests.robot      # Same as the above\n    ./rundevel.py rebot --name Example out.robot      # Rebot\n\"\"\"\n\nfrom os.path import abspath, dirname, exists, join\nimport os\nimport sys\n\n\nif len(sys.argv) == 1:\n    sys.exit(__doc__)\n\ncurdir = dirname(abspath(__file__))\nsrc = join(curdir, 'src')\ntmp = join(curdir, 'tmp')\ntmp2 = join(tmp, 'rundevel')\nif not exists(tmp):\n    os.mkdir(tmp)\nif not exists(tmp2):\n    os.mkdir(tmp2)\n\nos.environ['ROBOT_SYSLOG_FILE'] = join(tmp, 'syslog.txt')\nif 'ROBOT_INTERNAL_TRACES' not in os.environ:\n    os.environ['ROBOT_INTERNAL_TRACES'] = 'true'\nos.environ['TEMPDIR'] = tmp2          # Used by tests under atest/testdata\nif 'PYTHONPATH' not in os.environ:    # Allow executed scripts to import robot\n    os.environ['PYTHONPATH'] = src\nelse:\n    os.environ['PYTHONPATH'] = os.pathsep.join([src, os.environ['PYTHONPATH']])\n\nsys.path.insert(0, src)\nfrom robot import run_cli, rebot_cli\n\nif sys.argv[1] == 'rebot':\n    runner = rebot_cli\n    args = sys.argv[2:]\nelse:\n    runner = run_cli\n    args = ['--pythonpath', join(curdir, 'atest', 'testresources', 'testlibs'),\n            '--pythonpath', tmp,\n            '--loglevel', 'DEBUG']\n    args += sys.argv[2:] if sys.argv[1] == 'run' else sys.argv[1:]\n\nrunner(['--outputdir', tmp] + args)\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.2509765625,
          "content": "#!/usr/bin/env python\n\nfrom os.path import abspath, join, dirname\nfrom setuptools import find_packages, setup\n\n\n# Version number typically updated by running `invoke set-version <version>`.\n# Run `invoke --help set-version` or see tasks.py for details.\nVERSION = '7.2rc2.dev1'\nwith open(join(dirname(abspath(__file__)), 'README.rst')) as f:\n    LONG_DESCRIPTION = f.read()\n    base_url = 'https://github.com/robotframework/robotframework/blob/master'\n    for text in ('INSTALL', 'CONTRIBUTING'):\n        search = '`<{0}.rst>`__'.format(text)\n        replace = '`{0}.rst <{1}/{0}.rst>`__'.format(text, base_url)\n        if search not in LONG_DESCRIPTION:\n            raise RuntimeError('{} not found from README.rst'.format(search))\n        LONG_DESCRIPTION = LONG_DESCRIPTION.replace(search, replace)\nCLASSIFIERS = \"\"\"\nDevelopment Status :: 5 - Production/Stable\nLicense :: OSI Approved :: Apache Software License\nOperating System :: OS Independent\nProgramming Language :: Python :: 3\nProgramming Language :: Python :: 3 :: Only\nProgramming Language :: Python :: 3.8\nProgramming Language :: Python :: 3.9\nProgramming Language :: Python :: 3.10\nProgramming Language :: Python :: 3.11\nProgramming Language :: Python :: 3.12\nProgramming Language :: Python :: 3.13\nProgramming Language :: Python :: Implementation :: CPython\nProgramming Language :: Python :: Implementation :: PyPy\nTopic :: Software Development :: Testing\nTopic :: Software Development :: Testing :: Acceptance\nTopic :: Software Development :: Testing :: BDD\nFramework :: Robot Framework\n\"\"\".strip().splitlines()\nDESCRIPTION = ('Generic automation framework for acceptance testing '\n               'and robotic process automation (RPA)')\nKEYWORDS = ('robotframework automation testautomation rpa '\n            'testing acceptancetesting atdd bdd')\nPACKAGE_DATA = [join('htmldata', directory, pattern)\n                for directory in ('rebot', 'libdoc', 'testdoc', 'lib', 'common')\n                for pattern in ('*.html', '*.css', '*.js')] + ['api/py.typed']\n\n\nsetup(\n    name         = 'robotframework',\n    version      = VERSION,\n    author       = 'Pekka Kl\\xe4rck',\n    author_email = 'peke@eliga.fi',\n    url          = 'https://robotframework.org',\n    project_urls = {\n        'Source': 'https://github.com/robotframework/robotframework',\n        'Issue Tracker': 'https://github.com/robotframework/robotframework/issues',\n        'Documentation': 'https://robotframework.org/robotframework',\n        'Release Notes': f'https://github.com/robotframework/robotframework/blob/master/doc/releasenotes/rf-{VERSION}.rst',\n        'Slack': 'http://slack.robotframework.org',\n    },\n    download_url = 'https://pypi.org/project/robotframework',\n    license      = 'Apache License 2.0',\n    description  = DESCRIPTION,\n    long_description = LONG_DESCRIPTION,\n    long_description_content_type = 'text/x-rst',\n    keywords     = KEYWORDS,\n    platforms    = 'any',\n    python_requires='>=3.8',\n    classifiers  = CLASSIFIERS,\n    package_dir  = {'': 'src'},\n    package_data = {'robot': PACKAGE_DATA},\n    packages     = find_packages('src'),\n    entry_points = {'console_scripts': ['robot = robot.run:run_cli',\n                                        'rebot = robot.rebot:rebot_cli',\n                                        'libdoc = robot.libdoc:libdoc_cli']}\n)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tasks.py",
          "type": "blob",
          "size": 5.99609375,
          "content": "\"\"\"Tasks to help Robot Framework packaging and other development.\n\nExecuted by Invoke <http://pyinvoke.org>. Install it with `pip install invoke`\nand run `invoke --help` and `invoke --list` for details how to execute tasks.\n\nSee BUILD.rst for packaging and releasing instructions.\n\"\"\"\n\nfrom pathlib import Path\nimport sys\n\nassert Path.cwd().resolve() == Path(__file__).resolve().parent\nsys.path.insert(0, 'src')\n\nfrom invoke import Exit, task\nfrom rellu import initialize_labels, ReleaseNotesGenerator, Version\nfrom rellu.tasks import clean\nfrom robot.libdoc import libdoc\n\n\nREPOSITORY = 'robotframework/robotframework'\nVERSION_PATH = Path('src/robot/version.py')\nVERSION_PATTERN = \"VERSION = '(.*)'\"\nSETUP_PATH = Path('setup.py')\nPOM_VERSION_PATTERN = '<version>(.*)</version>'\nRELEASE_NOTES_PATH = Path('doc/releasenotes/rf-{version}.rst')\nRELEASE_NOTES_TITLE = 'Robot Framework {version}'\nRELEASE_NOTES_INTRO = '''\n`Robot Framework`_ {version} is a new release with **UPDATE** enhancements\nand bug fixes. **MORE intro stuff...**\n\n**REMOVE reference to tracker if release notes contain all issues.**\nAll issues targeted for Robot Framework {version.milestone} can be found\nfrom the `issue tracker milestone`_.\n\nQuestions and comments related to the release can be sent to the `#devel`\nchannel on `Robot Framework Slack`_ and possible bugs submitted to\nthe `issue tracker`_.\n\n**REMOVE ``--pre`` from the next command with final releases.**\nIf you have pip_ installed, just run\n\n::\n\n   pip install --pre --upgrade robotframework\n\nto install the latest available release or use\n\n::\n\n   pip install robotframework=={version}\n\nto install exactly this version. Alternatively you can download the package\nfrom PyPI_ and install it manually. For more details and other installation\napproaches, see the `installation instructions`_.\n\nRobot Framework {version} was released on {date}.\n\n.. _Robot Framework: http://robotframework.org\n.. _Robot Framework Foundation: http://robotframework.org/foundation\n.. _pip: http://pip-installer.org\n.. _PyPI: https://pypi.python.org/pypi/robotframework\n.. _issue tracker milestone: https://github.com/robotframework/robotframework/issues?q=milestone%3A{version.milestone}\n.. _issue tracker: https://github.com/robotframework/robotframework/issues\n.. _robotframework-users: http://groups.google.com/group/robotframework-users\n.. _Slack: http://slack.robotframework.org\n.. _Robot Framework Slack: Slack_\n.. _installation instructions: ../../INSTALL.rst\n'''\n\n\n@task\ndef set_version(ctx, version):\n    \"\"\"Set project version in `src/robot/version.py`, `setup.py` and `pom.xml`.\n\n    Args:\n        version: Project version to set or `dev` to set development version.\n\n    Following PEP-440 compatible version numbers are supported:\n    - Final version like 3.0 or 3.1.2.\n    - Alpha, beta or release candidate with `a`, `b` or `rc` postfix,\n      respectively, and an incremented number like 3.0a1 or 3.0.1rc1.\n    - Development version with `.dev` postix and an incremented number like\n      3.0.dev1 or 3.1a1.dev2.\n\n    When the given version is `dev`, the existing version number is updated\n    to the next suitable development version. For example, 3.0 -> 3.0.1.dev1,\n    3.1.1 -> 3.1.2.dev1, 3.2a1 -> 3.2a2.dev1, 3.2.dev1 -> 3.2.dev2.\n    \"\"\"\n    version = Version(version, VERSION_PATH, VERSION_PATTERN)\n    version.write()\n    Version(str(version), SETUP_PATH, VERSION_PATTERN).write()\n    print(version)\n\n\n@task\ndef print_version(ctx):\n    \"\"\"Print the current project version.\"\"\"\n    print(Version(path=VERSION_PATH, pattern=VERSION_PATTERN))\n\n\n@task\ndef library_docs(ctx, name):\n    \"\"\"Generate standard library documentation.\n\n    Args:\n        name:  Name of the library or `all` to generate docs for all libs.\n               Name is case-insensitive and can be shortened as long as it\n               is a unique prefix. For example, `b` is equivalent to\n               `BuiltIn` and `di` equivalent to `Dialogs`.\n    \"\"\"\n    libraries = ['BuiltIn', 'Collections', 'DateTime', 'Dialogs',\n                 'OperatingSystem', 'Process', 'Screenshot', 'String',\n                 'Telnet', 'XML']\n    name = name.lower()\n    if name != 'all':\n        libraries = [lib for lib in libraries if lib.lower().startswith(name)]\n        if len(libraries) != 1:\n            raise Exit(f\"'{name}' is not a unique library prefix.\")\n    for lib in libraries:\n        libdoc(lib, str(Path(f'doc/libraries/{lib}.html')))\n        libdoc(lib, str(Path(f'doc/libraries/{lib}.json')), specdocformat='RAW')\n\n\n@task\ndef release_notes(ctx, version=None, username=None, password=None, write=False):\n    \"\"\"Generate release notes based on issues in the issue tracker.\n\n    Args:\n        version:  Generate release notes for this version. If not given,\n                  generated them for the current version.\n        username: GitHub username.\n        password: GitHub password.\n        write:    When set to True, write release notes to a file overwriting\n                  possible existing file. Otherwise just print them to the\n                  terminal.\n\n    Username and password can also be specified using `GITHUB_USERNAME` and\n    `GITHUB_PASSWORD` environment variable, respectively. If they aren't\n    specified at all, communication with GitHub is anonymous and typically\n    pretty slow.\n    \"\"\"\n    version = Version(version, VERSION_PATH, VERSION_PATTERN)\n    file = RELEASE_NOTES_PATH if write else sys.stdout\n    generator = ReleaseNotesGenerator(REPOSITORY, RELEASE_NOTES_TITLE,\n                                      RELEASE_NOTES_INTRO)\n    generator.generate(version, username, password, file)\n\n\n@task\ndef init_labels(ctx, username=None, password=None):\n    \"\"\"Initialize project by setting labels in the issue tracker.\n\n    Args:\n        username: GitHub username.\n        password: GitHub password.\n\n    Username and password can also be specified using `GITHUB_USERNAME` and\n    `GITHUB_PASSWORD` environment variable, respectively.\n\n    Should only be executed once when taking `rellu` tooling to use or\n    when labels it uses have changed.\n    \"\"\"\n    initialize_labels(REPOSITORY, username, password)\n"
        },
        {
          "name": "utest",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}