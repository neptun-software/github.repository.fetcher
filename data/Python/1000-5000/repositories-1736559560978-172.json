{
  "metadata": {
    "timestamp": 1736559560978,
    "page": 172,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "JingyunLiang/SwinIR",
      "stars": 4573,
      "defaultBranch": "main",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.08203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [2021] [SwinIR Authors]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 28.7578125,
          "content": "# SwinIR: Image Restoration Using Swin Transformer\n[Jingyun Liang](https://jingyunliang.github.io), [Jiezhang Cao](https://www.jiezhangcao.com/), [Guolei Sun](https://vision.ee.ethz.ch/people-details.MjYzMjMw.TGlzdC8zMjg5LC0xOTcxNDY1MTc4.html), [Kai Zhang](https://cszn.github.io/), [Luc Van Gool](https://scholar.google.com/citations?user=TwMib_QAAAAJ&hl=en), [Radu Timofte](http://people.ee.ethz.ch/~timofter/)\n\nComputer Vision Lab, ETH Zurich\n\n---\n\n[![arXiv](https://img.shields.io/badge/arXiv-Paper-<COLOR>.svg)](https://arxiv.org/abs/2108.10257)\n[![GitHub Stars](https://img.shields.io/github/stars/JingyunLiang/SwinIR?style=social)](https://github.com/JingyunLiang/SwinIR)\n[![download](https://img.shields.io/github/downloads/JingyunLiang/SwinIR/total.svg)](https://github.com/JingyunLiang/SwinIR/releases)\n![visitors](https://visitor-badge.glitch.me/badge?page_id=jingyunliang/SwinIR)\n[ <a href=\"https://colab.research.google.com/gist/JingyunLiang/a5e3e54bc9ef8d7bf594f6fee8208533/swinir-demo-on-real-world-image-sr.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"google colab logo\"></a>](https://colab.research.google.com/gist/JingyunLiang/a5e3e54bc9ef8d7bf594f6fee8208533/swinir-demo-on-real-world-image-sr.ipynb)\n<a href=\"https://replicate.ai/jingyunliang/swinir\"><img src=\"https://img.shields.io/static/v1?label=Replicate&message=Demo and Docker Image&color=blue\"></a>\n[![PlayTorch Demo](https://github.com/facebookresearch/playtorch/blob/main/website/static/assets/playtorch_badge.svg)](https://playtorch.dev/snack/@playtorch/swinir/)\n[Gradio Web Demo](https://huggingface.co/spaces/akhaliq/SwinIR)\n\nThis repository is the official PyTorch implementation of SwinIR: Image Restoration Using Shifted Window Transformer\n([arxiv](https://arxiv.org/pdf/2108.10257.pdf), [supp](https://github.com/JingyunLiang/SwinIR/releases), [pretrained models](https://github.com/JingyunLiang/SwinIR/releases), [visual results](https://github.com/JingyunLiang/SwinIR/releases)). SwinIR achieves **state-of-the-art performance** in\n- bicubic/lighweight/real-world image SR\n- grayscale/color image denoising\n- grayscale/color JPEG compression artifact reduction\n\n</br>\n\n:rocket:  :rocket:  :rocket: **News**:\n- **Aug. 16, 2022**: Add PlayTorch Demo on running the real-world image SR model on mobile devices [![PlayTorch Demo](https://github.com/facebookresearch/playtorch/blob/main/website/static/assets/playtorch_badge.svg)](https://playtorch.dev/snack/@playtorch/swinir/).\n- **Aug. 01, 2022**: Add pretrained models and results on JPEG compression artifact reduction for color images. \n- **Jun. 10, 2022**: See our work on video restoration :fire::fire::fire: [VRT: A Video Restoration Transformer](https://github.com/JingyunLiang/VRT) \n[![GitHub Stars](https://img.shields.io/github/stars/JingyunLiang/VRT?style=social)](https://github.com/JingyunLiang/VRT)\n[![download](https://img.shields.io/github/downloads/JingyunLiang/VRT/total.svg)](https://github.com/JingyunLiang/VRT/releases)\nand [RVRT: Recurrent Video Restoration Transformer](https://github.com/JingyunLiang/RVRT) \n[![GitHub Stars](https://img.shields.io/github/stars/JingyunLiang/RVRT?style=social)](https://github.com/JingyunLiang/RVRT)\n[![download](https://img.shields.io/github/downloads/JingyunLiang/RVRT/total.svg)](https://github.com/JingyunLiang/RVRT/releases)\nfor video SR, video deblurring, video denoising, video frame interpolation and space-time video SR.\n- **Sep. 07, 2021**: We provide an interactive online Colab demo for real-world image SR <a href=\"https://colab.research.google.com/gist/JingyunLiang/a5e3e54bc9ef8d7bf594f6fee8208533/swinir-demo-on-real-world-image-sr.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"google colab logo\"></a>:fire: for comparison with [the first practical degradation model BSRGAN (ICCV2021) ![GitHub Stars](https://img.shields.io/github/stars/cszn/BSRGAN?style=social)](https://github.com/cszn/BSRGAN) and a recent model RealESRGAN. Try to super-resolve your own images on Colab!\n\n|Real-World Image (x4)|[BSRGAN, ICCV2021](https://github.com/cszn/BSRGAN)|[Real-ESRGAN](https://github.com/xinntao/Real-ESRGAN)|SwinIR (ours)|SwinIR-Large (ours)|\n|       :---       |     :---:        |        :-----:         |        :-----:         |        :-----:         | \n| <img width=\"200\" src=\"figs/ETH_LR.png\">|<img width=\"200\" src=\"figs/ETH_BSRGAN.png\">|<img width=\"200\" src=\"figs/ETH_realESRGAN.jpg\">|<img width=\"200\" src=\"figs/ETH_SwinIR.png\">|<img width=\"200\" src=\"figs/ETH_SwinIR-L.png\">\n|<img width=\"200\" src=\"figs/OST_009_crop_LR.png\">|<img width=\"200\" src=\"figs/OST_009_crop_BSRGAN.png\">|<img width=\"200\" src=\"figs/OST_009_crop_realESRGAN.png\">|<img width=\"200\" src=\"figs/OST_009_crop_SwinIR.png\">|<img width=\"200\" src=\"figs/OST_009_crop_SwinIR-L.png\">|\n  \n - ***Aug. 26, 2021**: See our recent work on [real-world image SR: a pratical degrdation model BSRGAN, ICCV2021](https://github.com/cszn/BSRGAN)\n[![GitHub Stars](https://img.shields.io/github/stars/cszn/BSRGAN?style=social)](https://github.com/cszn/BSRGAN)*\n - ***Aug. 26, 2021**: See our recent work on [generative modelling of image SR and image rescaling: normalizing-flow-based HCFlow, ICCV2021](https://github.com/JingyunLiang/HCFlow)\n[![GitHub Stars](https://img.shields.io/github/stars/JingyunLiang/HCFlow?style=social)](https://github.com/JingyunLiang/HCFlow)[ <a href=\"https://colab.research.google.com/gist/JingyunLiang/cdb3fef89ebd174eaa43794accb6f59d/hcflow-demo-on-x8-face-image-sr.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"google colab logo\"></a>](https://colab.research.google.com/gist/JingyunLiang/cdb3fef89ebd174eaa43794accb6f59d/hcflow-demo-on-x8-face-image-sr.ipynb)*\n - ***Aug. 26, 2021**: See our recent work on [blind SR: spatially variant kernel estimation (MANet, ICCV2021)](https://github.com/JingyunLiang/MANet) [![GitHub Stars](https://img.shields.io/github/stars/JingyunLiang/MANet?style=social)](https://github.com/JingyunLiang/MANet)\n[ <a href=\"https://colab.research.google.com/gist/JingyunLiang/4ed2524d6e08343710ee408a4d997e1c/manet-demo-on-spatially-variant-kernel-estimation.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"google colab logo\"></a>](https://colab.research.google.com/gist/JingyunLiang/4ed2524d6e08343710ee408a4d997e1c/manet-demo-on-spatially-variant-kernel-estimation.ipynb) and [unsupervised kernel estimation (FKP, CVPR2021)](https://github.com/JingyunLiang/FKP)\n[![GitHub Stars](https://img.shields.io/github/stars/JingyunLiang/FKP?style=social)](https://github.com/JingyunLiang/FKP)*\n\n---\n\n> Image restoration is a long-standing low-level vision problem that aims to restore high-quality images from low-quality images (e.g., downscaled, noisy and compressed images). While state-of-the-art image restoration methods are based on convolutional neural networks, few attempts have been made with Transformers which show impressive performance on high-level vision tasks. In this paper, we propose a strong baseline model SwinIR for image restoration based on the Swin Transformer. SwinIR consists of three parts: shallow feature extraction, deep feature extraction and high-quality image reconstruction. In particular, the deep feature extraction module is composed of several residual Swin Transformer blocks (RSTB), each of which has several Swin Transformer layers together with a residual connection. We conduct experiments on three representative tasks: image super-resolution (including classical, lightweight and real-world image super-resolution), image denoising (including grayscale and color image denoising) and JPEG compression artifact reduction. Experimental results demonstrate that SwinIR outperforms state-of-the-art methods on different tasks by up to 0.14~0.45dB, while the total number of parameters can be reduced by up to 67%.\n><p align=\"center\">\n  <img width=\"800\" src=\"figs/SwinIR_archi.png\">\n</p>\n\n\n\n#### Contents\n\n1. [Training](#Training)\n1. [Testing](#Testing)\n1. [Results](#Results)\n1. [Citation](#Citation)\n1. [License and Acknowledgement](#License-and-Acknowledgement)\n\n\n### Training\n\n\nUsed training and testing sets can be downloaded as follows:\n\n| Task                                                |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Training Set| Testing Set|    Visual Results |    \n|:----------------------------------------------------||     :---:      |   :---:      |\n| classical/lightweight image SR                      |                                                                                                                                                                                                                                                                                                                                                                                                                                                               [DIV2K](https://cv.snu.ac.kr/research/EDSR/DIV2K.tar) (800 training images) or DIV2K +[Flickr2K](https://cv.snu.ac.kr/research/EDSR/Flickr2K.tar) (2650 images)                                                                                                                                                                                                                                                                                                                                                                                                                                                               | Set5 + Set14 + BSD100 + Urban100 + Manga109 [download all](https://drive.google.com/drive/folders/1B3DJGQKB6eNdwuQIhdskA64qUuVKLZ9u) | [here](https://github.com/JingyunLiang/SwinIR/releases) |\n| real-world image SR                                 | SwinIR-M (middle size): [DIV2K](https://cv.snu.ac.kr/research/EDSR/DIV2K.tar) (800 training images) +[Flickr2K](https://cv.snu.ac.kr/research/EDSR/Flickr2K.tar) (2650 images) + [OST](https://openmmlab.oss-cn-hangzhou.aliyuncs.com/datasets/OST_dataset.zip) ([alternative link](https://drive.google.com/drive/folders/1iZfzAxAwOpeutz27HC56_y5RNqnsPPKr), 10324 images for sky,water,grass,mountain,building,plant,animal) <br /> SwinIR-L (large size): DIV2K + Flickr2K + OST + [WED](http://ivc.uwaterloo.ca/database/WaterlooExploration/exploration_database_and_code.rar)(4744 images) + [FFHQ](https://drive.google.com/drive/folders/1tZUcXDBeOibC6jcMCtgRRz67pzrAHeHL) (first 2000 images, face) + Manga109 (manga) + [SCUT-CTW1500](https://universityofadelaide.box.com/shared/static/py5uwlfyyytbb2pxzq9czvu6fuqbjdh8.zip) (first 100 training images, texts) <br /><br />  ***We use the pionnerring practical degradation model from [BSRGAN, ICCV2021  ![GitHub Stars](https://img.shields.io/github/stars/cszn/BSRGAN?style=social)](https://github.com/cszn/BSRGAN)** | [RealSRSet+5images](https://github.com/JingyunLiang/SwinIR/releases/download/v0.0/RealSRSet+5images.zip) |  [here](https://github.com/JingyunLiang/SwinIR/releases) |\n| color/grayscale image denoising                     |                                                                                                                                                                                                                                                                                                             [DIV2K](https://cv.snu.ac.kr/research/EDSR/DIV2K.tar) (800 training images) + [Flickr2K](https://cv.snu.ac.kr/research/EDSR/Flickr2K.tar) (2650 images) + [BSD500](http://www.eecs.berkeley.edu/Research/Projects/CS/vision/grouping/BSR/BSR_bsds500.tgz) (400 training&testing images) + [WED](http://ivc.uwaterloo.ca/database/WaterlooExploration/exploration_database_and_code.rar)(4744 images)  <br /><br />  *BSD68/BSD100 images are not used in training.                                                                                                                                                                                                                                                                                                              |  grayscale: Set12 + BSD68 + Urban100 <br />  color: CBSD68 + Kodak24 + McMaster + Urban100 [download all](https://github.com/cszn/FFDNet/tree/master/testsets) |  [here](https://github.com/JingyunLiang/SwinIR/releases) |\n| grayscale/color JPEG compression artifact reduction |                                                                                                                                                                                                                                                                                                                                            [DIV2K](https://cv.snu.ac.kr/research/EDSR/DIV2K.tar) (800 training images) + [Flickr2K](https://cv.snu.ac.kr/research/EDSR/Flickr2K.tar) (2650 images) + [BSD500](http://www.eecs.berkeley.edu/Research/Projects/CS/vision/grouping/BSR/BSR_bsds500.tgz) (400 training&testing images) + [WED](http://ivc.uwaterloo.ca/database/WaterlooExploration/exploration_database_and_code.rar)(4744 images)                                                                                                                                                                                                                                                                                                                                             |  grayscale: Classic5 +LIVE1 [download all](https://github.com/cszn/DnCNN/tree/master/testsets) | [here](https://github.com/JingyunLiang/SwinIR/releases) |\n\n\n<!--\n| Task                 | Training Set | Testing Set|        Pretrained Model and Visual Results of SwinIR     | \n| :---                 | :---:        |     :---:      |:---:      |\n| image denoising (real)      | [SIDD-Medium-sRGB](https://www.eecs.yorku.ca/~kamel/sidd/dataset.php) (320 images, [preprocess]()) + [RENOIR](http://ani.stat.fsu.edu/~abarbu/Renoir.html) (221 images, [preprocess](https://github.com/zsyOAOA/DANet/blob/master/datasets/preparedata/Renoir_big2small_all.py)) + [Poly](https://github.com/csjunxu/PolyU-Real-World-Noisy-Images-Dataset) (40 images in ./OriginalImages) |    [SIDD validation set](https://drive.google.com/drive/folders/1S44fHXaVxAYW3KLNxK41NYCnyX9S79su) (1280 patches, identical to official [.mat](https://www.eecs.yorku.ca/~kamel/sidd/benchmark.php) version) +  [DND](https://noise.visinf.tu-darmstadt.de/downloads/) (pre-defined 100 patches of 50 images, [online eval](https://noise.visinf.tu-darmstadt.de/submit/)) + [Nam](https://www.dropbox.com/s/24kds7c436i5i11/real_image_noise_dataset.zip?dl=0) (random 100 patches of 17 images, [preprocess](https://github.com/zsyOAOA/DANet/blob/master/datasets/preparedata/Nam_patch_prepare.py))|[download model]() [download results]() |\n| image deblurring (synthetic)   | [GoPro](https://drive.google.com/drive/folders/1AsgIP9_X0bg0olu2-1N6karm2x15cJWE) (2103 training images)  |  [GoPro](https://drive.google.com/drive/folders/1a2qKfXWpNuTGOm2-Jex8kfNSzYJLbqkf) (1111 images) + [HIDE](https://drive.google.com/drive/folders/1nRsTXj4iTUkTvBhTcGg8cySK8nd3vlhK) (2050 images) + [RealBlur_J](https://drive.google.com/drive/folders/1KYtzeKCiDRX9DSvC-upHrCqvC4sPAiJ1) (real blur, 980 images) + [RealBlur_R](https://drive.google.com/drive/folders/1EwDoajf5nStPIAcU4s9rdc8SPzfm3tW1) (real blur, 980 images) | [download model]() [download results]()|\n| image deraining (synthetic)  | [Multiple datasets](https://drive.google.com/drive/folders/1Hnnlc5kI0v9_BtfMytC2LR5VpLAFZtVe) (13711 training images, see Table 1 of [MPRNet](https://github.com/swz30/MPRNet) for details.)  |  Rain100H (100 images) + Rain100L (100 images) + Test100 (100 images) + Test2800 (2800 images) + Test1200 (1200 images), [download all](https://drive.google.com/drive/folders/1PDWggNh8ylevFmrjo-JEvlmqsDlWWvZs)  | [download model]() [download results]()|\n\nNote: above datasets may come from the official release or some awesome collections ([BasicSR](https://github.com/xinntao/BasicSR), [MPRNet](https://github.com/swz30/MPRNet)).\n\n-->\n\nThe training code is at [KAIR](https://github.com/cszn/KAIR/blob/master/docs/README_SwinIR.md).\n\n## Testing (without preparing datasets)\nFor your convience, we provide some example datasets (~20Mb) in `/testsets`. \nIf you just want codes, downloading `models/network_swinir.py`, `utils/util_calculate_psnr_ssim.py` and `main_test_swinir.py` is enough.\nFollowing commands will download [pretrained models](https://github.com/JingyunLiang/SwinIR/releases) **automatically** and put them in `model_zoo/swinir`. \n**[All visual results of SwinIR can be downloaded here](https://github.com/JingyunLiang/SwinIR/releases)**. \n\nWe also provide an [online Colab demo for real-world image SR  <a href=\"https://colab.research.google.com/gist/JingyunLiang/a5e3e54bc9ef8d7bf594f6fee8208533/swinir-demo-on-real-world-image-sr.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"google colab logo\"></a>](https://colab.research.google.com/gist/JingyunLiang/a5e3e54bc9ef8d7bf594f6fee8208533/swinir-demo-on-real-world-image-sr.ipynb) for comparison with [the first practical degradation model BSRGAN (ICCV2021)  ![GitHub Stars](https://img.shields.io/github/stars/cszn/BSRGAN?style=social)](https://github.com/cszn/BSRGAN) and a recent model [RealESRGAN](https://github.com/xinntao/Real-ESRGAN). Try to test your own images on Colab!\n\nWe provide a PlayTorch demo [![PlayTorch Demo](https://github.com/facebookresearch/playtorch/blob/main/website/static/assets/playtorch_badge.svg)](https://playtorch.dev/snack/@playtorch/swinir/) for real-world image SR to showcase how to run the SwinIR model in mobile application built with React Native.\n\n```bash\n# 001 Classical Image Super-Resolution (middle size)\n# Note that --training_patch_size is just used to differentiate two different settings in Table 2 of the paper. Images are NOT tested patch by patch.\n# (setting1: when model is trained on DIV2K and with training_patch_size=48)\npython main_test_swinir.py --task classical_sr --scale 2 --training_patch_size 48 --model_path model_zoo/swinir/001_classicalSR_DIV2K_s48w8_SwinIR-M_x2.pth --folder_lq testsets/Set5/LR_bicubic/X2 --folder_gt testsets/Set5/HR\npython main_test_swinir.py --task classical_sr --scale 3 --training_patch_size 48 --model_path model_zoo/swinir/001_classicalSR_DIV2K_s48w8_SwinIR-M_x3.pth --folder_lq testsets/Set5/LR_bicubic/X3 --folder_gt testsets/Set5/HR\npython main_test_swinir.py --task classical_sr --scale 4 --training_patch_size 48 --model_path model_zoo/swinir/001_classicalSR_DIV2K_s48w8_SwinIR-M_x4.pth --folder_lq testsets/Set5/LR_bicubic/X4 --folder_gt testsets/Set5/HR\npython main_test_swinir.py --task classical_sr --scale 8 --training_patch_size 48 --model_path model_zoo/swinir/001_classicalSR_DIV2K_s48w8_SwinIR-M_x8.pth --folder_lq testsets/Set5/LR_bicubic/X8 --folder_gt testsets/Set5/HR\n\n# (setting2: when model is trained on DIV2K+Flickr2K and with training_patch_size=64)\npython main_test_swinir.py --task classical_sr --scale 2 --training_patch_size 64 --model_path model_zoo/swinir/001_classicalSR_DF2K_s64w8_SwinIR-M_x2.pth --folder_lq testsets/Set5/LR_bicubic/X2 --folder_gt testsets/Set5/HR\npython main_test_swinir.py --task classical_sr --scale 3 --training_patch_size 64 --model_path model_zoo/swinir/001_classicalSR_DF2K_s64w8_SwinIR-M_x3.pth --folder_lq testsets/Set5/LR_bicubic/X3 --folder_gt testsets/Set5/HR\npython main_test_swinir.py --task classical_sr --scale 4 --training_patch_size 64 --model_path model_zoo/swinir/001_classicalSR_DF2K_s64w8_SwinIR-M_x4.pth --folder_lq testsets/Set5/LR_bicubic/X4 --folder_gt testsets/Set5/HR\npython main_test_swinir.py --task classical_sr --scale 8 --training_patch_size 64 --model_path model_zoo/swinir/001_classicalSR_DF2K_s64w8_SwinIR-M_x8.pth --folder_lq testsets/Set5/LR_bicubic/X8 --folder_gt testsets/Set5/HR\n\n\n# 002 Lightweight Image Super-Resolution (small size)\npython main_test_swinir.py --task lightweight_sr --scale 2 --model_path model_zoo/swinir/002_lightweightSR_DIV2K_s64w8_SwinIR-S_x2.pth --folder_lq testsets/Set5/LR_bicubic/X2 --folder_gt testsets/Set5/HR\npython main_test_swinir.py --task lightweight_sr --scale 3 --model_path model_zoo/swinir/002_lightweightSR_DIV2K_s64w8_SwinIR-S_x3.pth --folder_lq testsets/Set5/LR_bicubic/X3 --folder_gt testsets/Set5/HR\npython main_test_swinir.py --task lightweight_sr --scale 4 --model_path model_zoo/swinir/002_lightweightSR_DIV2K_s64w8_SwinIR-S_x4.pth --folder_lq testsets/Set5/LR_bicubic/X4 --folder_gt testsets/Set5/HR\n\n\n# 003 Real-World Image Super-Resolution (use --tile 400 if you run out-of-memory)\n# (middle size)\npython main_test_swinir.py --task real_sr --scale 4 --model_path model_zoo/swinir/003_realSR_BSRGAN_DFO_s64w8_SwinIR-M_x4_GAN.pth --folder_lq testsets/RealSRSet+5images --tile\n\n# (larger size + trained on more datasets)\npython main_test_swinir.py --task real_sr --scale 4 --large_model --model_path model_zoo/swinir/003_realSR_BSRGAN_DFOWMFC_s64w8_SwinIR-L_x4_GAN.pth --folder_lq testsets/RealSRSet+5images\n\n\n# 004 Grayscale Image Deoising (middle size)\npython main_test_swinir.py --task gray_dn --noise 15 --model_path model_zoo/swinir/004_grayDN_DFWB_s128w8_SwinIR-M_noise15.pth --folder_gt testsets/Set12\npython main_test_swinir.py --task gray_dn --noise 25 --model_path model_zoo/swinir/004_grayDN_DFWB_s128w8_SwinIR-M_noise25.pth --folder_gt testsets/Set12\npython main_test_swinir.py --task gray_dn --noise 50 --model_path model_zoo/swinir/004_grayDN_DFWB_s128w8_SwinIR-M_noise50.pth --folder_gt testsets/Set12\n\n\n# 005 Color Image Deoising (middle size)\npython main_test_swinir.py --task color_dn --noise 15 --model_path model_zoo/swinir/005_colorDN_DFWB_s128w8_SwinIR-M_noise15.pth --folder_gt testsets/McMaster\npython main_test_swinir.py --task color_dn --noise 25 --model_path model_zoo/swinir/005_colorDN_DFWB_s128w8_SwinIR-M_noise25.pth --folder_gt testsets/McMaster\npython main_test_swinir.py --task color_dn --noise 50 --model_path model_zoo/swinir/005_colorDN_DFWB_s128w8_SwinIR-M_noise50.pth --folder_gt testsets/McMaster\n\n\n# 006 JPEG Compression Artifact Reduction (middle size, using window_size=7 because JPEG encoding uses 8x8 blocks)\n# grayscale\npython main_test_swinir.py --task jpeg_car --jpeg 10 --model_path model_zoo/swinir/006_CAR_DFWB_s126w7_SwinIR-M_jpeg10.pth --folder_gt testsets/classic5\npython main_test_swinir.py --task jpeg_car --jpeg 20 --model_path model_zoo/swinir/006_CAR_DFWB_s126w7_SwinIR-M_jpeg20.pth --folder_gt testsets/classic5\npython main_test_swinir.py --task jpeg_car --jpeg 30 --model_path model_zoo/swinir/006_CAR_DFWB_s126w7_SwinIR-M_jpeg30.pth --folder_gt testsets/classic5\npython main_test_swinir.py --task jpeg_car --jpeg 40 --model_path model_zoo/swinir/006_CAR_DFWB_s126w7_SwinIR-M_jpeg40.pth --folder_gt testsets/classic5\n\n# color\npython main_test_swinir.py --task color_jpeg_car --jpeg 10 --model_path model_zoo/swinir/006_colorCAR_DFWB_s126w7_SwinIR-M_jpeg10.pth --folder_gt testsets/LIVE1\npython main_test_swinir.py --task color_jpeg_car --jpeg 20 --model_path model_zoo/swinir/006_colorCAR_DFWB_s126w7_SwinIR-M_jpeg20.pth --folder_gt testsets/LIVE1\npython main_test_swinir.py --task color_jpeg_car --jpeg 30 --model_path model_zoo/swinir/006_colorCAR_DFWB_s126w7_SwinIR-M_jpeg30.pth --folder_gt testsets/LIVE1\npython main_test_swinir.py --task color_jpeg_car --jpeg 40 --model_path model_zoo/swinir/006_colorCAR_DFWB_s126w7_SwinIR-M_jpeg40.pth --folder_gt testsets/LIVE1\n\n```\n\n---\n\n## Results\nWe achieved state-of-the-art performance on classical/lightweight/real-world image SR, grayscale/color image denoising and JPEG compression artifact reduction. Detailed results can be found in the [paper](https://arxiv.org/abs/2108.10257). All visual results of SwinIR can be downloaded [here](https://github.com/JingyunLiang/SwinIR/releases). \n\n<details>\n<summary>Classical Image Super-Resolution (click me)</summary>\n<p align=\"center\">\n  <img width=\"900\" src=\"figs/classic_image_sr.png\">\n  <img width=\"900\" src=\"figs/classic_image_sr_visual.png\">\n</p>\n  \n- More detailed comparison between SwinIR and a representative CNN-based model RCAN (classical image SR, X4)\n\n| Method             | Training Set    |  Training time  <br /> (8GeForceRTX2080Ti <br /> batch=32, iter=500k) |Y-PSNR/Y-SSIM <br /> on Manga109 | Run time  <br /> (1GeForceRTX2080Ti,<br /> on 256x256 LR image)* |  #Params   | #FLOPs |  Testing memory |\n| :---      | :---:        |        :-----:         |     :---:      |     :---:      |     :---:      |   :---:      |  :---:      |\n| RCAN | DIV2K | 1.6 days | 31.22/0.9173 | 0.180s | 15.6M | 850.6G | 593.1M | \n| SwinIR | DIV2K | 1.8 days |31.67/0.9226 | 0.539s | 11.9M | 788.6G | 986.8M | \n\n\\* We re-test the runtime when the GPU is idle. We refer to the evluation code [here](https://github.com/cszn/KAIR/blob/master/main_challenge_sr.py).\n\n  \n- Results on DIV2K-validation (100 images)\n  \n|  Training Set | scale factor | PSNR (RGB) | PSNR (Y) | SSIM (RGB)  | SSIM (Y) |\n| :--- | :---: | :---:        |     :---:      | :---: | :---:        |\n|  DIV2K (800 images) | 2 | 35.25 | 36.77 | 0.9423 | 0.9500 |\n|  DIV2K+Flickr2K (2650 images) | 2 | 35.34 | 36.86 | 0.9430 |0.9507 |\n|  DIV2K (800 images) | 3 | 31.50 | 32.97 | 0.8832 |0.8965 |\n|  DIV2K+Flickr2K (2650 images) | 3 | 31.63 | 33.10 | 0.8854 |0.8985 |\n|  DIV2K (800 images) | 4 | 29.48 | 30.94 | 0.8311|0.8492 |\n|  DIV2K+Flickr2K (2650 images) | 4 | 29.63 | 31.08 | 0.8347|0.8523 |\n\n</details>\n\n<details>\n<summary>Lightweight Image Super-Resolution</summary>\n<p align=\"center\">\n  <img width=\"900\" src=\"figs/lightweight_image_sr.png\">\n</p>\n</details>\n\n<details>\n<summary>Real-World Image Super-Resolution</summary>\n<p align=\"center\">\n  <img width=\"900\" src=\"figs/real_world_image_sr.png\">\n</p>\n</details>\n\n<details>\n<summary>Grayscale Image Deoising</summary>\n<p align=\"center\">\n  <img width=\"900\" src=\"figs/gray_image_denoising.png\">\n</p>\n</details>\n\n<details>\n<summary>Color Image Deoising</summary>\n<p align=\"center\">\n  <img width=\"900\" src=\"figs/color_image_denoising.png\">\n</p>\n</details>\n\n<details>\n<summary>JPEG Compression Artifact Reduction</summary>\n\non grayscale images\n<p align=\"center\">\n  <img width=\"900\" src=\"figs/jepg_compress_artfact_reduction.png\">\n</p>\n\non color images\n\n| Training Set | quality factor | PSNR (RGB) | PSNR-B (RGB) | SSIM (RGB) |\n|:-------------|:--------------:|:----------:|:------------:|:----------:|\n| LIVE1        |       10       |   28.06    |    27.76     |   0.8089   |\n| LIVE1        |       20       |   30.45    |    29.97     |   0.8741   |\n| LIVE1        |       30       |   31.82    |    31.24     |   0.9018   |\n| LIVE1        |       40       |   32.75    |    32.12     |   0.9174   |\n</details>\n\n\n\n## Citation\n    @article{liang2021swinir,\n      title={SwinIR: Image Restoration Using Swin Transformer},\n      author={Liang, Jingyun and Cao, Jiezhang and Sun, Guolei and Zhang, Kai and Van Gool, Luc and Timofte, Radu},\n      journal={arXiv preprint arXiv:2108.10257},\n      year={2021}\n    }\n\n\n## License and Acknowledgement\nThis project is released under the Apache 2.0 license. The codes are based on [Swin Transformer](https://github.com/microsoft/Swin-Transformer) and [KAIR](https://github.com/cszn/KAIR). Please also follow their licenses. Thanks for their awesome works.\n"
        },
        {
          "name": "cog.yaml",
          "type": "blob",
          "size": 0.3408203125,
          "content": "build:\n  gpu: true\n  python_version: \"3.8\"\n  system_packages:\n    - \"libgl1-mesa-glx\"\n    - \"libglib2.0-0\"\n  python_packages:\n    - \"torchvision==0.9.0\"\n    - \"torch==1.8.0\"\n    - \"numpy==1.19.4\"\n    - \"opencv-python==4.4.0.46\"\n    - \"tqdm==4.62.2\"\n    - \"Pillow==8.3.2\"\n    - \"timm==0.4.12\"\n    - \"ipython==7.19.0\"\n\npredict: \"predict.py:Predictor\"\n"
        },
        {
          "name": "download-weights.sh",
          "type": "blob",
          "size": 1.5478515625,
          "content": "#!/bin/sh\n\nwget https://github.com/JingyunLiang/SwinIR/releases/download/v0.0/003_realSR_BSRGAN_DFO_s64w8_SwinIR-M_x4_GAN.pth -P experiments/pretrained_models\nwget https://github.com/JingyunLiang/SwinIR/releases/download/v0.0/004_grayDN_DFWB_s128w8_SwinIR-M_noise15.pth -P experiments/pretrained_models\nwget https://github.com/JingyunLiang/SwinIR/releases/download/v0.0/004_grayDN_DFWB_s128w8_SwinIR-M_noise25.pth -P experiments/pretrained_models\nwget https://github.com/JingyunLiang/SwinIR/releases/download/v0.0/004_grayDN_DFWB_s128w8_SwinIR-M_noise50.pth -P experiments/pretrained_models\nwget https://github.com/JingyunLiang/SwinIR/releases/download/v0.0/005_colorDN_DFWB_s128w8_SwinIR-M_noise15.pth -P experiments/pretrained_models\nwget https://github.com/JingyunLiang/SwinIR/releases/download/v0.0/005_colorDN_DFWB_s128w8_SwinIR-M_noise25.pth -P experiments/pretrained_models\nwget https://github.com/JingyunLiang/SwinIR/releases/download/v0.0/005_colorDN_DFWB_s128w8_SwinIR-M_noise50.pth -P experiments/pretrained_models\nwget https://github.com/JingyunLiang/SwinIR/releases/download/v0.0/006_CAR_DFWB_s126w7_SwinIR-M_jpeg10.pth -P experiments/pretrained_models\nwget https://github.com/JingyunLiang/SwinIR/releases/download/v0.0/006_CAR_DFWB_s126w7_SwinIR-M_jpeg20.pth -P experiments/pretrained_models\nwget https://github.com/JingyunLiang/SwinIR/releases/download/v0.0/006_CAR_DFWB_s126w7_SwinIR-M_jpeg30.pth -P experiments/pretrained_models\nwget https://github.com/JingyunLiang/SwinIR/releases/download/v0.0/006_CAR_DFWB_s126w7_SwinIR-M_jpeg40.pth -P experiments/pretrained_models"
        },
        {
          "name": "figs",
          "type": "tree",
          "content": null
        },
        {
          "name": "main_test_swinir.py",
          "type": "blob",
          "size": 14.853515625,
          "content": "import argparse\nimport cv2\nimport glob\nimport numpy as np\nfrom collections import OrderedDict\nimport os\nimport torch\nimport requests\n\nfrom models.network_swinir import SwinIR as net\nfrom utils import util_calculate_psnr_ssim as util\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--task', type=str, default='color_dn', help='classical_sr, lightweight_sr, real_sr, '\n                                                                     'gray_dn, color_dn, jpeg_car, color_jpeg_car')\n    parser.add_argument('--scale', type=int, default=1, help='scale factor: 1, 2, 3, 4, 8') # 1 for dn and jpeg car\n    parser.add_argument('--noise', type=int, default=15, help='noise level: 15, 25, 50')\n    parser.add_argument('--jpeg', type=int, default=40, help='scale factor: 10, 20, 30, 40')\n    parser.add_argument('--training_patch_size', type=int, default=128, help='patch size used in training SwinIR. '\n                                       'Just used to differentiate two different settings in Table 2 of the paper. '\n                                       'Images are NOT tested patch by patch.')\n    parser.add_argument('--large_model', action='store_true', help='use large model, only provided for real image sr')\n    parser.add_argument('--model_path', type=str,\n                        default='model_zoo/swinir/001_classicalSR_DIV2K_s48w8_SwinIR-M_x2.pth')\n    parser.add_argument('--folder_lq', type=str, default=None, help='input low-quality test image folder')\n    parser.add_argument('--folder_gt', type=str, default=None, help='input ground-truth test image folder')\n    parser.add_argument('--tile', type=int, default=None, help='Tile size, None for no tile during testing (testing as a whole)')\n    parser.add_argument('--tile_overlap', type=int, default=32, help='Overlapping of different tiles')\n    args = parser.parse_args()\n\n    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n    # set up model\n    if os.path.exists(args.model_path):\n        print(f'loading model from {args.model_path}')\n    else:\n        os.makedirs(os.path.dirname(args.model_path), exist_ok=True)\n        url = 'https://github.com/JingyunLiang/SwinIR/releases/download/v0.0/{}'.format(os.path.basename(args.model_path))\n        r = requests.get(url, allow_redirects=True)\n        print(f'downloading model {args.model_path}')\n        open(args.model_path, 'wb').write(r.content)\n\n    model = define_model(args)\n    model.eval()\n    model = model.to(device)\n\n    # setup folder and path\n    folder, save_dir, border, window_size = setup(args)\n    os.makedirs(save_dir, exist_ok=True)\n    test_results = OrderedDict()\n    test_results['psnr'] = []\n    test_results['ssim'] = []\n    test_results['psnr_y'] = []\n    test_results['ssim_y'] = []\n    test_results['psnrb'] = []\n    test_results['psnrb_y'] = []\n    psnr, ssim, psnr_y, ssim_y, psnrb, psnrb_y = 0, 0, 0, 0, 0, 0\n\n    for idx, path in enumerate(sorted(glob.glob(os.path.join(folder, '*')))):\n        # read image\n        imgname, img_lq, img_gt = get_image_pair(args, path)  # image to HWC-BGR, float32\n        img_lq = np.transpose(img_lq if img_lq.shape[2] == 1 else img_lq[:, :, [2, 1, 0]], (2, 0, 1))  # HCW-BGR to CHW-RGB\n        img_lq = torch.from_numpy(img_lq).float().unsqueeze(0).to(device)  # CHW-RGB to NCHW-RGB\n\n        # inference\n        with torch.no_grad():\n            # pad input image to be a multiple of window_size\n            _, _, h_old, w_old = img_lq.size()\n            h_pad = (h_old // window_size + 1) * window_size - h_old\n            w_pad = (w_old // window_size + 1) * window_size - w_old\n            img_lq = torch.cat([img_lq, torch.flip(img_lq, [2])], 2)[:, :, :h_old + h_pad, :]\n            img_lq = torch.cat([img_lq, torch.flip(img_lq, [3])], 3)[:, :, :, :w_old + w_pad]\n            output = test(img_lq, model, args, window_size)\n            output = output[..., :h_old * args.scale, :w_old * args.scale]\n\n        # save image\n        output = output.data.squeeze().float().cpu().clamp_(0, 1).numpy()\n        if output.ndim == 3:\n            output = np.transpose(output[[2, 1, 0], :, :], (1, 2, 0))  # CHW-RGB to HCW-BGR\n        output = (output * 255.0).round().astype(np.uint8)  # float32 to uint8\n        cv2.imwrite(f'{save_dir}/{imgname}_SwinIR.png', output)\n\n        # evaluate psnr/ssim/psnr_b\n        if img_gt is not None:\n            img_gt = (img_gt * 255.0).round().astype(np.uint8)  # float32 to uint8\n            img_gt = img_gt[:h_old * args.scale, :w_old * args.scale, ...]  # crop gt\n            img_gt = np.squeeze(img_gt)\n\n            psnr = util.calculate_psnr(output, img_gt, crop_border=border)\n            ssim = util.calculate_ssim(output, img_gt, crop_border=border)\n            test_results['psnr'].append(psnr)\n            test_results['ssim'].append(ssim)\n            if img_gt.ndim == 3:  # RGB image\n                psnr_y = util.calculate_psnr(output, img_gt, crop_border=border, test_y_channel=True)\n                ssim_y = util.calculate_ssim(output, img_gt, crop_border=border, test_y_channel=True)\n                test_results['psnr_y'].append(psnr_y)\n                test_results['ssim_y'].append(ssim_y)\n            if args.task in ['jpeg_car', 'color_jpeg_car']:\n                psnrb = util.calculate_psnrb(output, img_gt, crop_border=border, test_y_channel=False)\n                test_results['psnrb'].append(psnrb)\n                if args.task in ['color_jpeg_car']:\n                    psnrb_y = util.calculate_psnrb(output, img_gt, crop_border=border, test_y_channel=True)\n                    test_results['psnrb_y'].append(psnrb_y)\n            print('Testing {:d} {:20s} - PSNR: {:.2f} dB; SSIM: {:.4f}; PSNRB: {:.2f} dB;'\n                  'PSNR_Y: {:.2f} dB; SSIM_Y: {:.4f}; PSNRB_Y: {:.2f} dB.'.\n                  format(idx, imgname, psnr, ssim, psnrb, psnr_y, ssim_y, psnrb_y))\n        else:\n            print('Testing {:d} {:20s}'.format(idx, imgname))\n\n    # summarize psnr/ssim\n    if img_gt is not None:\n        ave_psnr = sum(test_results['psnr']) / len(test_results['psnr'])\n        ave_ssim = sum(test_results['ssim']) / len(test_results['ssim'])\n        print('\\n{} \\n-- Average PSNR/SSIM(RGB): {:.2f} dB; {:.4f}'.format(save_dir, ave_psnr, ave_ssim))\n        if img_gt.ndim == 3:\n            ave_psnr_y = sum(test_results['psnr_y']) / len(test_results['psnr_y'])\n            ave_ssim_y = sum(test_results['ssim_y']) / len(test_results['ssim_y'])\n            print('-- Average PSNR_Y/SSIM_Y: {:.2f} dB; {:.4f}'.format(ave_psnr_y, ave_ssim_y))\n        if args.task in ['jpeg_car', 'color_jpeg_car']:\n            ave_psnrb = sum(test_results['psnrb']) / len(test_results['psnrb'])\n            print('-- Average PSNRB: {:.2f} dB'.format(ave_psnrb))\n            if args.task in ['color_jpeg_car']:\n                ave_psnrb_y = sum(test_results['psnrb_y']) / len(test_results['psnrb_y'])\n                print('-- Average PSNRB_Y: {:.2f} dB'.format(ave_psnrb_y))\n\n\ndef define_model(args):\n    # 001 classical image sr\n    if args.task == 'classical_sr':\n        model = net(upscale=args.scale, in_chans=3, img_size=args.training_patch_size, window_size=8,\n                    img_range=1., depths=[6, 6, 6, 6, 6, 6], embed_dim=180, num_heads=[6, 6, 6, 6, 6, 6],\n                    mlp_ratio=2, upsampler='pixelshuffle', resi_connection='1conv')\n        param_key_g = 'params'\n\n    # 002 lightweight image sr\n    # use 'pixelshuffledirect' to save parameters\n    elif args.task == 'lightweight_sr':\n        model = net(upscale=args.scale, in_chans=3, img_size=64, window_size=8,\n                    img_range=1., depths=[6, 6, 6, 6], embed_dim=60, num_heads=[6, 6, 6, 6],\n                    mlp_ratio=2, upsampler='pixelshuffledirect', resi_connection='1conv')\n        param_key_g = 'params'\n\n    # 003 real-world image sr\n    elif args.task == 'real_sr':\n        if not args.large_model:\n            # use 'nearest+conv' to avoid block artifacts\n            model = net(upscale=args.scale, in_chans=3, img_size=64, window_size=8,\n                        img_range=1., depths=[6, 6, 6, 6, 6, 6], embed_dim=180, num_heads=[6, 6, 6, 6, 6, 6],\n                        mlp_ratio=2, upsampler='nearest+conv', resi_connection='1conv')\n        else:\n            # larger model size; use '3conv' to save parameters and memory; use ema for GAN training\n            model = net(upscale=args.scale, in_chans=3, img_size=64, window_size=8,\n                        img_range=1., depths=[6, 6, 6, 6, 6, 6, 6, 6, 6], embed_dim=240,\n                        num_heads=[8, 8, 8, 8, 8, 8, 8, 8, 8],\n                        mlp_ratio=2, upsampler='nearest+conv', resi_connection='3conv')\n        param_key_g = 'params_ema'\n\n    # 004 grayscale image denoising\n    elif args.task == 'gray_dn':\n        model = net(upscale=1, in_chans=1, img_size=128, window_size=8,\n                    img_range=1., depths=[6, 6, 6, 6, 6, 6], embed_dim=180, num_heads=[6, 6, 6, 6, 6, 6],\n                    mlp_ratio=2, upsampler='', resi_connection='1conv')\n        param_key_g = 'params'\n\n    # 005 color image denoising\n    elif args.task == 'color_dn':\n        model = net(upscale=1, in_chans=3, img_size=128, window_size=8,\n                    img_range=1., depths=[6, 6, 6, 6, 6, 6], embed_dim=180, num_heads=[6, 6, 6, 6, 6, 6],\n                    mlp_ratio=2, upsampler='', resi_connection='1conv')\n        param_key_g = 'params'\n\n    # 006 grayscale JPEG compression artifact reduction\n    # use window_size=7 because JPEG encoding uses 8x8; use img_range=255 because it's sligtly better than 1\n    elif args.task == 'jpeg_car':\n        model = net(upscale=1, in_chans=1, img_size=126, window_size=7,\n                    img_range=255., depths=[6, 6, 6, 6, 6, 6], embed_dim=180, num_heads=[6, 6, 6, 6, 6, 6],\n                    mlp_ratio=2, upsampler='', resi_connection='1conv')\n        param_key_g = 'params'\n\n    # 006 color JPEG compression artifact reduction\n    # use window_size=7 because JPEG encoding uses 8x8; use img_range=255 because it's sligtly better than 1\n    elif args.task == 'color_jpeg_car':\n        model = net(upscale=1, in_chans=3, img_size=126, window_size=7,\n                    img_range=255., depths=[6, 6, 6, 6, 6, 6], embed_dim=180, num_heads=[6, 6, 6, 6, 6, 6],\n                    mlp_ratio=2, upsampler='', resi_connection='1conv')\n        param_key_g = 'params'\n\n    pretrained_model = torch.load(args.model_path)\n    model.load_state_dict(pretrained_model[param_key_g] if param_key_g in pretrained_model.keys() else pretrained_model, strict=True)\n\n    return model\n\n\ndef setup(args):\n    # 001 classical image sr/ 002 lightweight image sr\n    if args.task in ['classical_sr', 'lightweight_sr']:\n        save_dir = f'results/swinir_{args.task}_x{args.scale}'\n        folder = args.folder_gt\n        border = args.scale\n        window_size = 8\n\n    # 003 real-world image sr\n    elif args.task in ['real_sr']:\n        save_dir = f'results/swinir_{args.task}_x{args.scale}'\n        if args.large_model:\n            save_dir += '_large'\n        folder = args.folder_lq\n        border = 0\n        window_size = 8\n\n    # 004 grayscale image denoising/ 005 color image denoising\n    elif args.task in ['gray_dn', 'color_dn']:\n        save_dir = f'results/swinir_{args.task}_noise{args.noise}'\n        folder = args.folder_gt\n        border = 0\n        window_size = 8\n\n    # 006 JPEG compression artifact reduction\n    elif args.task in ['jpeg_car', 'color_jpeg_car']:\n        save_dir = f'results/swinir_{args.task}_jpeg{args.jpeg}'\n        folder = args.folder_gt\n        border = 0\n        window_size = 7\n\n    return folder, save_dir, border, window_size\n\n\ndef get_image_pair(args, path):\n    (imgname, imgext) = os.path.splitext(os.path.basename(path))\n\n    # 001 classical image sr/ 002 lightweight image sr (load lq-gt image pairs)\n    if args.task in ['classical_sr', 'lightweight_sr']:\n        img_gt = cv2.imread(path, cv2.IMREAD_COLOR).astype(np.float32) / 255.\n        img_lq = cv2.imread(f'{args.folder_lq}/{imgname}x{args.scale}{imgext}', cv2.IMREAD_COLOR).astype(\n            np.float32) / 255.\n\n    # 003 real-world image sr (load lq image only)\n    elif args.task in ['real_sr']:\n        img_gt = None\n        img_lq = cv2.imread(path, cv2.IMREAD_COLOR).astype(np.float32) / 255.\n\n    # 004 grayscale image denoising (load gt image and generate lq image on-the-fly)\n    elif args.task in ['gray_dn']:\n        img_gt = cv2.imread(path, cv2.IMREAD_GRAYSCALE).astype(np.float32) / 255.\n        np.random.seed(seed=0)\n        img_lq = img_gt + np.random.normal(0, args.noise / 255., img_gt.shape)\n        img_gt = np.expand_dims(img_gt, axis=2)\n        img_lq = np.expand_dims(img_lq, axis=2)\n\n    # 005 color image denoising (load gt image and generate lq image on-the-fly)\n    elif args.task in ['color_dn']:\n        img_gt = cv2.imread(path, cv2.IMREAD_COLOR).astype(np.float32) / 255.\n        np.random.seed(seed=0)\n        img_lq = img_gt + np.random.normal(0, args.noise / 255., img_gt.shape)\n\n    # 006 grayscale JPEG compression artifact reduction (load gt image and generate lq image on-the-fly)\n    elif args.task in ['jpeg_car']:\n        img_gt = cv2.imread(path, cv2.IMREAD_UNCHANGED)\n        if img_gt.ndim != 2:\n            img_gt = util.bgr2ycbcr(img_gt, y_only=True)\n        result, encimg = cv2.imencode('.jpg', img_gt, [int(cv2.IMWRITE_JPEG_QUALITY), args.jpeg])\n        img_lq = cv2.imdecode(encimg, 0)\n        img_gt = np.expand_dims(img_gt, axis=2).astype(np.float32) / 255.\n        img_lq = np.expand_dims(img_lq, axis=2).astype(np.float32) / 255.\n\n    # 006 JPEG compression artifact reduction (load gt image and generate lq image on-the-fly)\n    elif args.task in ['color_jpeg_car']:\n        img_gt = cv2.imread(path)\n        result, encimg = cv2.imencode('.jpg', img_gt, [int(cv2.IMWRITE_JPEG_QUALITY), args.jpeg])\n        img_lq = cv2.imdecode(encimg, 1)\n        img_gt = img_gt.astype(np.float32)/ 255.\n        img_lq = img_lq.astype(np.float32)/ 255.\n\n    return imgname, img_lq, img_gt\n\n\ndef test(img_lq, model, args, window_size):\n    if args.tile is None:\n        # test the image as a whole\n        output = model(img_lq)\n    else:\n        # test the image tile by tile\n        b, c, h, w = img_lq.size()\n        tile = min(args.tile, h, w)\n        assert tile % window_size == 0, \"tile size should be a multiple of window_size\"\n        tile_overlap = args.tile_overlap\n        sf = args.scale\n\n        stride = tile - tile_overlap\n        h_idx_list = list(range(0, h-tile, stride)) + [h-tile]\n        w_idx_list = list(range(0, w-tile, stride)) + [w-tile]\n        E = torch.zeros(b, c, h*sf, w*sf).type_as(img_lq)\n        W = torch.zeros_like(E)\n\n        for h_idx in h_idx_list:\n            for w_idx in w_idx_list:\n                in_patch = img_lq[..., h_idx:h_idx+tile, w_idx:w_idx+tile]\n                out_patch = model(in_patch)\n                out_patch_mask = torch.ones_like(out_patch)\n\n                E[..., h_idx*sf:(h_idx+tile)*sf, w_idx*sf:(w_idx+tile)*sf].add_(out_patch)\n                W[..., h_idx*sf:(h_idx+tile)*sf, w_idx*sf:(w_idx+tile)*sf].add_(out_patch_mask)\n        output = E.div_(W)\n\n    return output\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "model_zoo",
          "type": "tree",
          "content": null
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "predict.py",
          "type": "blob",
          "size": 7.7900390625,
          "content": "import cog\nimport tempfile\nfrom pathlib import Path\nimport argparse\nimport shutil\nimport os\nimport cv2\nimport glob\nimport torch\nfrom collections import OrderedDict\nimport numpy as np\nfrom main_test_swinir import define_model, setup, get_image_pair\n\n\nclass Predictor(cog.Predictor):\n    def setup(self):\n        model_dir = 'experiments/pretrained_models'\n\n        self.model_zoo = {\n            'real_sr': {\n                4: os.path.join(model_dir, '003_realSR_BSRGAN_DFO_s64w8_SwinIR-M_x4_GAN.pth')\n            },\n            'gray_dn': {\n                15: os.path.join(model_dir, '004_grayDN_DFWB_s128w8_SwinIR-M_noise15.pth'),\n                25: os.path.join(model_dir, '004_grayDN_DFWB_s128w8_SwinIR-M_noise25.pth'),\n                50: os.path.join(model_dir, '004_grayDN_DFWB_s128w8_SwinIR-M_noise50.pth')\n            },\n            'color_dn': {\n                15: os.path.join(model_dir, '005_colorDN_DFWB_s128w8_SwinIR-M_noise15.pth'),\n                25: os.path.join(model_dir, '005_colorDN_DFWB_s128w8_SwinIR-M_noise25.pth'),\n                50: os.path.join(model_dir, '005_colorDN_DFWB_s128w8_SwinIR-M_noise50.pth')\n            },\n            'jpeg_car': {\n                10: os.path.join(model_dir, '006_CAR_DFWB_s126w7_SwinIR-M_jpeg10.pth'),\n                20: os.path.join(model_dir, '006_CAR_DFWB_s126w7_SwinIR-M_jpeg20.pth'),\n                30: os.path.join(model_dir, '006_CAR_DFWB_s126w7_SwinIR-M_jpeg30.pth'),\n                40: os.path.join(model_dir, '006_CAR_DFWB_s126w7_SwinIR-M_jpeg40.pth')\n            }\n        }\n\n        parser = argparse.ArgumentParser()\n        parser.add_argument('--task', type=str, default='real_sr', help='classical_sr, lightweight_sr, real_sr, '\n                                                                        'gray_dn, color_dn, jpeg_car')\n        parser.add_argument('--scale', type=int, default=1, help='scale factor: 1, 2, 3, 4, 8')  # 1 for dn and jpeg car\n        parser.add_argument('--noise', type=int, default=15, help='noise level: 15, 25, 50')\n        parser.add_argument('--jpeg', type=int, default=40, help='scale factor: 10, 20, 30, 40')\n        parser.add_argument('--training_patch_size', type=int, default=128, help='patch size used in training SwinIR. '\n                                                                                 'Just used to differentiate two different settings in Table 2 of the paper. '\n                                                                                 'Images are NOT tested patch by patch.')\n        parser.add_argument('--large_model', action='store_true',\n                            help='use large model, only provided for real image sr')\n        parser.add_argument('--model_path', type=str,\n                            default=self.model_zoo['real_sr'][4])\n        parser.add_argument('--folder_lq', type=str, default=None, help='input low-quality test image folder')\n        parser.add_argument('--folder_gt', type=str, default=None, help='input ground-truth test image folder')\n\n        self.args = parser.parse_args('')\n\n        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\n        self.tasks = {\n            'Real-World Image Super-Resolution': 'real_sr',\n            'Grayscale Image Denoising': 'gray_dn',\n            'Color Image Denoising': 'color_dn',\n            'JPEG Compression Artifact Reduction': 'jpeg_car'\n        }\n\n    @cog.input(\"image\", type=Path, help=\"input image\")\n    @cog.input(\"task_type\", type=str, default='Real-World Image Super-Resolution',\n               options=['Real-World Image Super-Resolution', 'Grayscale Image Denoising', 'Color Image Denoising',\n                        'JPEG Compression Artifact Reduction'],\n               help=\"image restoration task type\")\n    @cog.input(\"noise\", type=int, default=15, options=[15, 25, 50],\n               help='noise level, activated for Grayscale Image Denoising and Color Image Denoising. '\n                    'Leave it as default or arbitrary if other tasks are selected')\n    @cog.input(\"jpeg\", type=int, default=40, options=[10, 20, 30, 40],\n               help='scale factor, activated for JPEG Compression Artifact Reduction. '\n                    'Leave it as default or arbitrary if other tasks are selected')\n    def predict(self, image, task_type='Real-World Image Super-Resolution', jpeg=40, noise=15):\n\n        self.args.task = self.tasks[task_type]\n        self.args.noise = noise\n        self.args.jpeg = jpeg\n\n        # set model path\n        if self.args.task == 'real_sr':\n            self.args.scale = 4\n            self.args.model_path = self.model_zoo[self.args.task][4]\n        elif self.args.task in ['gray_dn', 'color_dn']:\n            self.args.model_path = self.model_zoo[self.args.task][noise]\n        else:\n            self.args.model_path = self.model_zoo[self.args.task][jpeg]\n\n        try:\n            # set input folder\n            input_dir = 'input_cog_temp'\n            os.makedirs(input_dir, exist_ok=True)\n            input_path = os.path.join(input_dir, os.path.basename(image))\n            shutil.copy(str(image), input_path)\n            if self.args.task == 'real_sr':\n                self.args.folder_lq = input_dir\n            else:\n                self.args.folder_gt = input_dir\n\n            model = define_model(self.args)\n            model.eval()\n            model = model.to(self.device)\n\n            # setup folder and path\n            folder, save_dir, border, window_size = setup(self.args)\n            os.makedirs(save_dir, exist_ok=True)\n            test_results = OrderedDict()\n            test_results['psnr'] = []\n            test_results['ssim'] = []\n            test_results['psnr_y'] = []\n            test_results['ssim_y'] = []\n            test_results['psnr_b'] = []\n            # psnr, ssim, psnr_y, ssim_y, psnr_b = 0, 0, 0, 0, 0\n            out_path = Path(tempfile.mkdtemp()) / \"out.png\"\n\n            for idx, path in enumerate(sorted(glob.glob(os.path.join(folder, '*')))):\n                # read image\n                imgname, img_lq, img_gt = get_image_pair(self.args, path)  # image to HWC-BGR, float32\n                img_lq = np.transpose(img_lq if img_lq.shape[2] == 1 else img_lq[:, :, [2, 1, 0]],\n                                      (2, 0, 1))  # HCW-BGR to CHW-RGB\n                img_lq = torch.from_numpy(img_lq).float().unsqueeze(0).to(self.device)  # CHW-RGB to NCHW-RGB\n\n                # inference\n                with torch.no_grad():\n                    # pad input image to be a multiple of window_size\n                    _, _, h_old, w_old = img_lq.size()\n                    h_pad = (h_old // window_size + 1) * window_size - h_old\n                    w_pad = (w_old // window_size + 1) * window_size - w_old\n                    img_lq = torch.cat([img_lq, torch.flip(img_lq, [2])], 2)[:, :, :h_old + h_pad, :]\n                    img_lq = torch.cat([img_lq, torch.flip(img_lq, [3])], 3)[:, :, :, :w_old + w_pad]\n                    output = model(img_lq)\n                    output = output[..., :h_old * self.args.scale, :w_old * self.args.scale]\n\n                # save image\n                output = output.data.squeeze().float().cpu().clamp_(0, 1).numpy()\n                if output.ndim == 3:\n                    output = np.transpose(output[[2, 1, 0], :, :], (1, 2, 0))  # CHW-RGB to HCW-BGR\n                output = (output * 255.0).round().astype(np.uint8)  # float32 to uint8\n                cv2.imwrite(str(out_path), output)\n        finally:\n            clean_folder(input_dir)\n        return out_path\n\n\ndef clean_folder(folder):\n    for filename in os.listdir(folder):\n        file_path = os.path.join(folder, filename)\n        try:\n            if os.path.isfile(file_path) or os.path.islink(file_path):\n                os.unlink(file_path)\n            elif os.path.isdir(file_path):\n                shutil.rmtree(file_path)\n        except Exception as e:\n            print('Failed to delete %s. Reason: %s' % (file_path, e))\n"
        },
        {
          "name": "testsets",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}