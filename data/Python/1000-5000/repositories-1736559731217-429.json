{
  "metadata": {
    "timestamp": 1736559731217,
    "page": 429,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "philz1337x/clarity-upscaler",
      "stars": 4018,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.3193359375,
          "content": "# The .dockerignore file excludes files from the container build process.\n#\n# https://docs.docker.com/engine/reference/builder/#dockerignore-file\n\n# Exclude Git files\n.git\n.github\n.gitignore\n\n# Exclude Python cache files\n__pycache__\n.mypy_cache\n.pytest_cache\n.ruff_cache\n\n# Exclude Python virtual environment\n/venv\n\nexample.gif"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.064453125,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0478515625,
          "content": "__pycache__\n.mypy_cache\n.pytest_cache\n.ruff_cache"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 49.982421875,
          "content": "## 1.7.0\n\n### Features:\n* settings tab rework: add search field, add categories, split UI settings page into many\n* add altdiffusion-m18 support ([#13364](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13364))\n* support inference with LyCORIS GLora networks ([#13610](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13610))\n* add lora-embedding bundle system ([#13568](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13568))\n* option to move prompt from top row into generation parameters\n* add support for SSD-1B ([#13865](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13865))\n* support inference with OFT networks ([#13692](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13692))\n* script metadata and DAG sorting mechanism ([#13944](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13944))\n* support HyperTile optimization ([#13948](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13948))\n* add support for SD 2.1 Turbo ([#14170](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14170))\n* remove Train->Preprocessing tab and put all its functionality into Extras tab\n* initial IPEX support for Intel Arc GPU ([#14171](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14171))\n\n### Minor:\n* allow reading model hash from images in img2img batch mode ([#12767](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12767))\n* add option to align with sgm repo's sampling implementation ([#12818](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12818))\n* extra field for lora metadata viewer: `ss_output_name` ([#12838](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12838))\n* add action in settings page to calculate all SD checkpoint hashes ([#12909](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12909))\n* add button to copy prompt to style editor ([#12975](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12975))\n* add --skip-load-model-at-start option ([#13253](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13253))\n* write infotext to gif images\n* read infotext from gif images ([#13068](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13068))\n* allow configuring the initial state of InputAccordion in ui-config.json ([#13189](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13189))\n* allow editing whitespace delimiters for ctrl+up/ctrl+down prompt editing ([#13444](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13444))\n* prevent accidentally closing popup dialogs ([#13480](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13480))\n* added option to play notification sound or not ([#13631](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13631))\n* show the preview image in the full screen image viewer if available ([#13459](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13459))\n* support for webui.settings.bat ([#13638](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13638))\n* add an option to not print stack traces on ctrl+c\n* start/restart generation by Ctrl (Alt) + Enter ([#13644](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13644))\n* update prompts_from_file script to allow concatenating entries with the general prompt ([#13733](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13733))\n* added a visible checkbox to input accordion\n* added an option to hide all txt2img/img2img parameters in an accordion ([#13826](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13826))\n* added 'Path' sorting option for Extra network cards ([#13968](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13968))\n* enable prompt hotkeys in style editor ([#13931](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13931))\n* option to show batch img2img results in UI ([#14009](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14009))\n* infotext updates: add option to disregard certain infotext fields, add option to not include VAE in infotext, add explanation to infotext settings page, move some options to infotext settings page\n* add FP32 fallback support on sd_vae_approx ([#14046](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14046))\n* support XYZ scripts / split hires path from unet ([#14126](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14126))\n* allow use of mutiple styles csv files ([#14125](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14125))\n\n### Extensions and API:\n* update gradio to 3.41.2\n* support installed extensions list api ([#12774](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12774))\n* update pnginfo API to return dict with parsed values\n* add noisy latent to `ExtraNoiseParams` for callback ([#12856](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12856))\n* show extension datetime in UTC ([#12864](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12864), [#12865](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12865), [#13281](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13281))\n* add an option to choose how to combine hires fix and refiner\n* include program version in info response. ([#13135](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13135))\n* sd_unet support for SDXL\n* patch DDPM.register_betas so that users can put given_betas in model yaml ([#13276](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13276))\n* xyz_grid: add prepare ([#13266](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13266))\n* allow multiple localization files with same language in extensions ([#13077](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13077))\n* add onEdit function for js and rework token-counter.js to use it\n* fix the key error exception when processing override_settings keys ([#13567](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13567))\n* ability for extensions to return custom data via api in response.images ([#13463](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13463))\n* call state.jobnext() before postproces*() ([#13762](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13762))\n* add option to set notification sound volume ([#13884](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13884))\n* update Ruff to 0.1.6 ([#14059](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14059))\n* add Block component creation callback ([#14119](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14119))\n* catch uncaught exception with ui creation scripts ([#14120](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14120))\n* use extension name for determining an extension is installed in the index ([#14063](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14063))\n* update is_installed() from launch_utils.py to fix reinstalling already installed packages ([#14192](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14192))\n\n### Bug Fixes:\n* fix pix2pix producing bad results\n* fix defaults settings page breaking when any of main UI tabs are hidden\n* fix error that causes some extra networks to be disabled if both <lora:> and <lyco:> are present in the prompt\n* fix for Reload UI function: if you reload UI on one tab, other opened tabs will no longer stop working\n* prevent duplicate resize handler ([#12795](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12795))\n* small typo: vae resolve bug ([#12797](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12797))\n* hide broken image crop tool ([#12792](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12792))\n* don't show hidden samplers in dropdown for XYZ script ([#12780](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12780))\n* fix style editing dialog breaking if it's opened in both img2img and txt2img tabs\n* hide --gradio-auth and --api-auth values from /internal/sysinfo report\n* add missing infotext for RNG in options ([#12819](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12819))\n* fix notification not playing when built-in webui tab is inactive ([#12834](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12834))\n* honor `--skip-install` for extension installers ([#12832](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12832))\n* don't print blank stdout in extension installers ([#12833](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12833), [#12855](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12855))\n* get progressbar to display correctly in extensions tab\n* keep order in list of checkpoints when loading model that doesn't have a checksum\n* fix inpainting models in txt2img creating black pictures\n* fix generation params regex ([#12876](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12876))\n* fix batch img2img output dir with script ([#12926](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12926))\n* fix #13080 - Hypernetwork/TI preview generation ([#13084](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13084))\n* fix bug with sigma min/max overrides. ([#12995](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12995))\n* more accurate check for enabling cuDNN benchmark on 16XX cards ([#12924](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12924))\n* don't use multicond parser for negative prompt counter ([#13118](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13118))\n* fix data-sort-name containing spaces ([#13412](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13412))\n* update card on correct tab when editing metadata ([#13411](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13411))\n* fix viewing/editing metadata when filename contains an apostrophe ([#13395](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13395))\n* fix: --sd_model in \"Prompts from file or textbox\" script is not working ([#13302](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13302))\n* better Support for Portable Git ([#13231](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13231))\n* fix issues when webui_dir is not work_dir ([#13210](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13210))\n* fix: lora-bias-backup don't reset cache ([#13178](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13178))\n* account for customizable extra network separators whyen removing extra network text from the prompt ([#12877](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12877))\n* re fix batch img2img output dir with script ([#13170](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13170))\n* fix `--ckpt-dir` path separator and option use `short name` for checkpoint dropdown ([#13139](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13139))\n* consolidated allowed preview formats, Fix extra network `.gif` not woking as preview ([#13121](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13121))\n* fix venv_dir=- environment variable not working as expected on linux ([#13469](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13469))\n* repair unload sd checkpoint button\n* edit-attention fixes ([#13533](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13533))\n* fix bug when using --gfpgan-models-path ([#13718](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13718))\n* properly apply sort order for extra network cards when selected from dropdown\n* fixes generation restart not working for some users when 'Ctrl+Enter' is pressed ([#13962](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13962))\n* thread safe extra network list_items ([#13014](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13014))\n* fix not able to exit metadata popup when pop up is too big ([#14156](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14156))\n* fix auto focal point crop for opencv >= 4.8 ([#14121](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14121))\n* make 'use-cpu all' actually apply to 'all' ([#14131](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14131))\n* extras tab batch: actually use original filename\n* make webui not crash when running with --disable-all-extensions option\n\n### Other:\n* non-local condition ([#12814](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12814))\n* fix minor typos ([#12827](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12827))\n* remove xformers Python version check ([#12842](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12842))\n* style: file-metadata word-break ([#12837](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12837))\n* revert SGM noise multiplier change for img2img because it breaks hires fix\n* do not change quicksettings dropdown option when value returned is `None` ([#12854](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12854))\n* [RC 1.6.0 - zoom is partly hidden] Update style.css ([#12839](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12839))\n* chore: change extension time format ([#12851](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12851))\n* WEBUI.SH - Use torch 2.1.0 release candidate for Navi 3 ([#12929](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12929))\n* add Fallback at images.read_info_from_image if exif data was invalid ([#13028](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13028))\n* update cmd arg description ([#12986](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12986))\n* fix: update shared.opts.data when add_option ([#12957](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12957), [#13213](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13213))\n* restore missing tooltips ([#12976](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12976))\n* use default dropdown padding on mobile ([#12880](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12880))\n* put enable console prompts option into settings from commandline args ([#13119](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13119))\n* fix some deprecated types ([#12846](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12846))\n* bump to torchsde==0.2.6 ([#13418](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13418))\n* update dragdrop.js ([#13372](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13372))\n* use orderdict as lru cache:opt/bug ([#13313](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13313))\n* XYZ if not include sub grids do not save sub grid ([#13282](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13282))\n* initialize state.time_start befroe state.job_count ([#13229](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13229))\n* fix fieldname regex ([#13458](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13458))\n* change denoising_strength default to None. ([#13466](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13466))\n* fix regression ([#13475](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13475))\n* fix IndexError ([#13630](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13630))\n* fix: checkpoints_loaded:{checkpoint:state_dict}, model.load_state_dict issue in dict value empty ([#13535](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13535))\n* update bug_report.yml ([#12991](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12991))\n* requirements_versions httpx==0.24.1 ([#13839](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13839))\n* fix parenthesis auto selection ([#13829](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13829))\n* fix #13796 ([#13797](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13797))\n* corrected a typo in `modules/cmd_args.py` ([#13855](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13855))\n* feat: fix randn found element of type float at pos 2 ([#14004](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14004))\n* adds tqdm handler to logging_config.py for progress bar integration ([#13996](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13996))\n* hotfix: call shared.state.end() after postprocessing done ([#13977](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13977))\n* fix dependency address patch 1 ([#13929](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13929))\n* save sysinfo as .json ([#14035](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14035))\n* move exception_records related methods to errors.py ([#14084](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14084))\n* compatibility ([#13936](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13936))\n* json.dump(ensure_ascii=False) ([#14108](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14108))\n* dir buttons start with / so only the correct dir will be shown and no… ([#13957](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13957))\n* alternate implementation for unet forward replacement that does not depend on hijack being applied\n* re-add `keyedit_delimiters_whitespace` setting lost as part of commit e294e46 ([#14178](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14178))\n* fix `save_samples` being checked early when saving masked composite ([#14177](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14177))\n* slight optimization for mask and mask_composite ([#14181](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14181))\n* add import_hook hack to work around basicsr/torchvision incompatibility ([#14186](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/14186))\n\n## 1.6.1\n\n### Bug Fixes:\n * fix an error causing the webui to fail to start ([#13839](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/13839))\n\n## 1.6.0\n\n### Features:\n * refiner support [#12371](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12371)\n * add NV option for Random number generator source setting, which allows to generate same pictures on CPU/AMD/Mac as on NVidia videocards\n * add style editor dialog\n * hires fix: add an option to use a different checkpoint for second pass ([#12181](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12181))\n * option to keep multiple loaded models in memory ([#12227](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12227))\n * new samplers: Restart, DPM++ 2M SDE Exponential, DPM++ 2M SDE Heun, DPM++ 2M SDE Heun Karras, DPM++ 2M SDE Heun Exponential, DPM++ 3M SDE, DPM++ 3M SDE Karras, DPM++ 3M SDE Exponential ([#12300](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12300), [#12519](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12519), [#12542](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12542))\n * rework DDIM, PLMS, UniPC to use CFG denoiser same as in k-diffusion samplers:\n   * makes all of them work with img2img\n   * makes prompt composition posssible (AND)\n   * makes them available for SDXL\n * always show extra networks tabs in the UI ([#11808](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/11808))\n * use less RAM when creating models ([#11958](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/11958), [#12599](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12599))\n * textual inversion inference support for SDXL\n * extra networks UI: show metadata for SD checkpoints\n * checkpoint merger: add metadata support \n * prompt editing and attention: add support for whitespace after the number ([ red : green : 0.5 ]) (seed breaking change) ([#12177](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12177))\n * VAE: allow selecting own VAE for each checkpoint (in user metadata editor)\n * VAE: add selected VAE to infotext\n * options in main UI: add own separate setting for txt2img and img2img, correctly read values from pasted infotext, add setting for column count ([#12551](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12551))\n * add resize handle to txt2img and img2img tabs, allowing to change the amount of horizontable space given to generation parameters and resulting image gallery ([#12687](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12687), [#12723](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12723))\n * change default behavior for batching cond/uncond -- now it's on by default, and is disabled by an UI setting (Optimizatios -> Batch cond/uncond) - if you are on lowvram/medvram and are getting OOM exceptions, you will need to enable it\n * show current position in queue and make it so that requests are processed in the order of arrival ([#12707](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12707))\n * add `--medvram-sdxl` flag that only enables `--medvram` for SDXL models\n * prompt editing timeline has separate range for first pass and hires-fix pass (seed breaking change) ([#12457](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12457))\n\n### Minor:\n * img2img batch: RAM savings, VRAM savings, .tif, .tiff in img2img batch ([#12120](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12120), [#12514](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12514), [#12515](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12515))\n * postprocessing/extras: RAM savings ([#12479](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12479))\n * XYZ: in the axis labels, remove pathnames from model filenames\n * XYZ: support hires sampler ([#12298](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12298))\n * XYZ: new option: use text inputs instead of dropdowns ([#12491](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12491))\n * add gradio version warning\n * sort list of VAE checkpoints ([#12297](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12297))\n * use transparent white for mask in inpainting, along with an option to select the color ([#12326](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12326))\n * move some settings to their own section: img2img, VAE\n * add checkbox to show/hide dirs for extra networks\n * Add TAESD(or more) options for all the VAE encode/decode operation ([#12311](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12311))\n * gradio theme cache, new gradio themes, along with explanation that the user can input his own values ([#12346](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12346), [#12355](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12355))\n * sampler fixes/tweaks: s_tmax, s_churn, s_noise, s_tmax ([#12354](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12354), [#12356](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12356), [#12357](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12357), [#12358](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12358), [#12375](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12375), [#12521](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12521))\n * update README.md with correct instructions for Linux installation ([#12352](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12352))\n * option to not save incomplete images, on by default ([#12338](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12338))\n * enable cond cache by default\n * git autofix for repos that are corrupted ([#12230](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12230))\n * allow to open images in new browser tab by middle mouse button ([#12379](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12379))\n * automatically open webui in browser when running \"locally\" ([#12254](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12254))\n * put commonly used samplers on top, make DPM++ 2M Karras the default choice\n * zoom and pan: option to auto-expand a wide image, improved integration ([#12413](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12413), [#12727](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12727))\n * option to cache Lora networks in memory\n * rework hires fix UI to use accordion\n * face restoration and tiling moved to settings - use \"Options in main UI\" setting if you want them back\n * change quicksettings items to have variable width\n * Lora: add Norm module, add support for bias ([#12503](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12503))\n * Lora: output warnings in UI rather than fail for unfitting loras; switch to logging for error output in console\n * support search and display of hashes for all extra network items ([#12510](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12510))\n * add extra noise param for img2img operations ([#12564](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12564))\n * support for Lora with bias ([#12584](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12584))\n * make interrupt quicker ([#12634](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12634))\n * configurable gallery height ([#12648](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12648))\n * make results column sticky ([#12645](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12645))\n * more hash filename patterns ([#12639](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12639))\n * make image viewer actually fit the whole page ([#12635](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12635))\n * make progress bar work independently from live preview display which results in it being updated a lot more often\n * forbid Full live preview method for medvram and add a setting to undo the forbidding\n * make it possible to localize tooltips and placeholders\n * add option to align with sgm repo's sampling implementation ([#12818](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12818))\n * Restore faces and Tiling generation parameters have been moved to settings out of main UI\n   * if you want to put them back into main UI, use `Options in main UI` setting on the UI page.\n\n### Extensions and API:\n * gradio 3.41.2\n * also bump versions for packages: transformers, GitPython, accelerate, scikit-image, timm, tomesd\n * support tooltip kwarg for gradio elements: gr.Textbox(label='hello', tooltip='world')\n * properly clear the total console progressbar when using txt2img and img2img from API\n * add cmd_arg --disable-extra-extensions and --disable-all-extensions ([#12294](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12294))\n * shared.py and webui.py split into many files\n * add --loglevel commandline argument for logging\n * add a custom UI element that combines accordion and checkbox\n * avoid importing gradio in tests because it spams warnings\n * put infotext label for setting into OptionInfo definition rather than in a separate list\n * make `StableDiffusionProcessingImg2Img.mask_blur` a property, make more inline with PIL `GaussianBlur` ([#12470](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12470))\n * option to make scripts UI without gr.Group\n * add a way for scripts to register a callback for before/after just a single component's creation\n * use dataclass for StableDiffusionProcessing\n * store patches for Lora in a specialized module instead of inside torch\n * support http/https URLs in API ([#12663](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12663), [#12698](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12698))\n * add extra noise callback ([#12616](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12616))\n * dump current stack traces when exiting with SIGINT\n * add type annotations for extra fields of shared.sd_model\n\n### Bug Fixes:\n * Don't crash if out of local storage quota for javascriot localStorage\n * XYZ plot do not fail if an exception occurs\n * fix missing TI hash in infotext if generation uses both negative and positive TI ([#12269](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12269))\n * localization fixes ([#12307](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12307))\n * fix sdxl model invalid configuration after the hijack\n * correctly toggle extras checkbox for infotext paste ([#12304](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12304))\n * open raw sysinfo link in new page ([#12318](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12318))\n * prompt parser: Account for empty field in alternating words syntax ([#12319](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12319))\n * add tab and carriage return to invalid filename chars ([#12327](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12327))\n * fix api only Lora not working ([#12387](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12387))\n * fix options in main UI misbehaving when there's just one element\n * make it possible to use a sampler from infotext even if it's hidden in the dropdown\n * fix styles missing from the prompt in infotext when making a grid of batch of multiplie images\n * prevent bogus progress output in console when calculating hires fix dimensions\n * fix --use-textbox-seed\n * fix broken `Lora/Networks: use old method` option ([#12466](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12466))\n * properly return `None` for VAE hash when using `--no-hashing` ([#12463](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12463))\n * MPS/macOS fixes and optimizations ([#12526](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12526))\n * add second_order to samplers that mistakenly didn't have it\n * when refreshing cards in extra networks UI, do not discard user's custom resolution\n * fix processing error that happens if batch_size is not a multiple of how many prompts/negative prompts there are ([#12509](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12509))\n * fix inpaint upload for alpha masks ([#12588](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12588))\n * fix exception when image sizes are not integers ([#12586](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12586))\n * fix incorrect TAESD Latent scale ([#12596](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12596))\n * auto add data-dir to gradio-allowed-path ([#12603](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12603))\n * fix exception if extensuions dir is missing ([#12607](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12607))\n * fix issues with api model-refresh and vae-refresh ([#12638](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12638))\n * fix img2img background color for transparent images option not being used ([#12633](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12633))\n * attempt to resolve NaN issue with unstable VAEs in fp32 mk2 ([#12630](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12630))\n * implement missing undo hijack for SDXL\n * fix xyz swap axes ([#12684](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12684))\n * fix errors in backup/restore tab if any of config files are broken ([#12689](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12689))\n * fix SD VAE switch error after model reuse ([#12685](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12685))\n * fix trying to create images too large for the chosen format ([#12667](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12667))\n * create Gradio temp directory if necessary ([#12717](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12717))\n * prevent possible cache loss if exiting as it's being written by using an atomic operation to replace the cache with the new version\n * set devices.dtype_unet correctly\n * run RealESRGAN on GPU for non-CUDA devices ([#12737](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12737))\n * prevent extra network buttons being obscured by description for very small card sizes ([#12745](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12745))\n * fix error that causes some extra networks to be disabled if both <lora:> and <lyco:> are present in the prompt\n * fix defaults settings page breaking when any of main UI tabs are hidden\n * fix incorrect save/display of new values in Defaults page in settings\n * fix for Reload UI function: if you reload UI on one tab, other opened tabs will no longer stop working\n * fix an error that prevents VAE being reloaded after an option change if a VAE near the checkpoint exists ([#12797](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12737))\n * hide broken image crop tool ([#12792](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12737))\n * don't show hidden samplers in dropdown for XYZ script ([#12780](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12737))\n * fix style editing dialog breaking if it's opened in both img2img and txt2img tabs\n * fix a bug allowing users to bypass gradio and API authentication (reported by vysecurity) \n * fix notification not playing when built-in webui tab is inactive ([#12834](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12834))\n * honor `--skip-install` for extension installers ([#12832](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12832))\n * don't print blank stdout in extension installers ([#12833](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12832), [#12855](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12855))\n * do not change quicksettings dropdown option when value returned is `None` ([#12854](https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/12854))\n * get progressbar to display correctly in extensions tab\n\n\n## 1.5.2\n\n### Bug Fixes:\n * fix memory leak when generation fails\n * update doggettx cross attention optimization to not use an unreasonable amount of memory in some edge cases -- suggestion by MorkTheOrk\n\n\n## 1.5.1\n\n### Minor:\n * support parsing text encoder blocks in some new LoRAs\n * delete scale checker script due to user demand\n\n### Extensions and API:\n * add postprocess_batch_list script callback\n\n### Bug Fixes:\n * fix TI training for SD1\n * fix reload altclip model error\n * prepend the pythonpath instead of overriding it\n * fix typo in SD_WEBUI_RESTARTING\n * if txt2img/img2img raises an exception, finally call state.end()\n * fix composable diffusion weight parsing\n * restyle Startup profile for black users\n * fix webui not launching with --nowebui\n * catch exception for non git extensions\n * fix some options missing from /sdapi/v1/options\n * fix for extension update status always saying \"unknown\"\n * fix display of extra network cards that have `<>` in the name\n * update lora extension to work with python 3.8\n\n\n## 1.5.0\n\n### Features:\n * SD XL support\n * user metadata system for custom networks\n * extended Lora metadata editor: set activation text, default weight, view tags, training info\n * Lora extension rework to include other types of networks (all that were previously handled by LyCORIS extension)\n * show github stars for extenstions\n * img2img batch mode can read extra stuff from png info\n * img2img batch works with subdirectories\n * hotkeys to move prompt elements: alt+left/right\n * restyle time taken/VRAM display\n * add textual inversion hashes to infotext\n * optimization: cache git extension repo information\n * move generate button next to the generated picture for mobile clients\n * hide cards for networks of incompatible Stable Diffusion version in Lora extra networks interface\n * skip installing packages with pip if they all are already installed - startup speedup of about 2 seconds\n\n### Minor:\n * checkbox to check/uncheck all extensions in the Installed tab\n * add gradio user to infotext and to filename patterns\n * allow gif for extra network previews\n * add options to change colors in grid\n * use natural sort for items in extra networks\n * Mac: use empty_cache() from torch 2 to clear VRAM\n * added automatic support for installing the right libraries for Navi3 (AMD)\n * add option SWIN_torch_compile to accelerate SwinIR upscale\n * suppress printing TI embedding info at start to console by default\n * speedup extra networks listing\n * added `[none]` filename token.\n * removed thumbs extra networks view mode (use settings tab to change width/height/scale to get thumbs)\n * add always_discard_next_to_last_sigma option to XYZ plot\n * automatically switch to 32-bit float VAE if the generated picture has NaNs without the need for `--no-half-vae` commandline flag.\n \n### Extensions and API:\n * api endpoints: /sdapi/v1/server-kill, /sdapi/v1/server-restart, /sdapi/v1/server-stop\n * allow Script to have custom metaclass\n * add model exists status check /sdapi/v1/options\n * rename --add-stop-route to --api-server-stop\n * add `before_hr` script callback\n * add callback `after_extra_networks_activate`\n * disable rich exception output in console for API by default, use WEBUI_RICH_EXCEPTIONS env var to enable\n * return http 404 when thumb file not found\n * allow replacing extensions index with environment variable\n \n### Bug Fixes:\n * fix for catch errors when retrieving extension index #11290\n * fix very slow loading speed of .safetensors files when reading from network drives\n * API cache cleanup\n * fix UnicodeEncodeError when writing to file CLIP Interrogator batch mode\n * fix warning of 'has_mps' deprecated from PyTorch\n * fix problem with extra network saving images as previews losing generation info\n * fix throwing exception when trying to resize image with I;16 mode\n * fix for #11534: canvas zoom and pan extension hijacking shortcut keys\n * fixed launch script to be runnable from any directory\n * don't add \"Seed Resize: -1x-1\" to API image metadata\n * correctly remove end parenthesis with ctrl+up/down\n * fixing --subpath on newer gradio version\n * fix: check fill size none zero when resize  (fixes #11425)\n * use submit and blur for quick settings textbox\n * save img2img batch with images.save_image()\n * prevent running preload.py for disabled extensions\n * fix: previously, model name was added together with directory name to infotext and to [model_name] filename pattern; directory name is now not included\n\n\n## 1.4.1\n\n### Bug Fixes:\n * add queue lock for refresh-checkpoints\n\n## 1.4.0\n\n### Features:\n * zoom controls for inpainting\n * run basic torch calculation at startup in parallel to reduce the performance impact of first generation\n * option to pad prompt/neg prompt to be same length\n * remove taming_transformers dependency\n * custom k-diffusion scheduler settings\n * add an option to show selected settings in main txt2img/img2img UI\n * sysinfo tab in settings\n * infer styles from prompts when pasting params into the UI\n * an option to control the behavior of the above\n\n### Minor:\n * bump Gradio to 3.32.0\n * bump xformers to 0.0.20\n * Add option to disable token counters\n * tooltip fixes & optimizations\n * make it possible to configure filename for the zip download\n * `[vae_filename]` pattern for filenames\n * Revert discarding penultimate sigma for DPM-Solver++(2M) SDE\n * change UI reorder setting to multiselect\n * read version info form CHANGELOG.md if git version info is not available\n * link footer API to Wiki when API is not active\n * persistent conds cache (opt-in optimization)\n \n### Extensions:\n * After installing extensions, webui properly restarts the process rather than reloads the UI \n * Added VAE listing to web API. Via: /sdapi/v1/sd-vae\n * custom unet support\n * Add onAfterUiUpdate callback\n * refactor EmbeddingDatabase.register_embedding() to allow unregistering\n * add before_process callback for scripts\n * add ability for alwayson scripts to specify section and let user reorder those sections\n \n### Bug Fixes:\n * Fix dragging text to prompt\n * fix incorrect quoting for infotext values with colon in them\n * fix \"hires. fix\" prompt sharing same labels with txt2img_prompt\n * Fix s_min_uncond default type int\n * Fix for #10643 (Inpainting mask sometimes not working)\n * fix bad styling for thumbs view in extra networks #10639\n * fix for empty list of optimizations #10605\n * small fixes to prepare_tcmalloc for Debian/Ubuntu compatibility\n * fix --ui-debug-mode exit\n * patch GitPython to not use leaky persistent processes\n * fix duplicate Cross attention optimization after UI reload\n * torch.cuda.is_available() check for SdOptimizationXformers\n * fix hires fix using wrong conds in second pass if using Loras.\n * handle exception when parsing generation parameters from png info\n * fix upcast attention dtype error\n * forcing Torch Version to 1.13.1 for RX 5000 series GPUs\n * split mask blur into X and Y components, patch Outpainting MK2 accordingly\n * don't die when a LoRA is a broken symlink\n * allow activation of Generate Forever during generation\n\n\n## 1.3.2\n\n### Bug Fixes:\n * fix files served out of tmp directory even if they are saved to disk\n * fix postprocessing overwriting parameters\n\n## 1.3.1\n\n### Features:\n * revert default cross attention optimization to Doggettx\n\n### Bug Fixes:\n * fix bug: LoRA don't apply on dropdown list sd_lora\n * fix png info always added even if setting is not enabled\n * fix some fields not applying in xyz plot\n * fix \"hires. fix\" prompt sharing same labels with txt2img_prompt\n * fix lora hashes not being added properly to infotex if there is only one lora\n * fix --use-cpu failing to work properly at startup\n * make --disable-opt-split-attention command line option work again\n\n## 1.3.0\n\n### Features:\n * add UI to edit defaults\n * token merging (via dbolya/tomesd)\n * settings tab rework: add a lot of additional explanations and links\n * load extensions' Git metadata in parallel to loading the main program to save a ton of time during startup\n * update extensions table: show branch, show date in separate column, and show version from tags if available\n * TAESD - another option for cheap live previews\n * allow choosing sampler and prompts for second pass of hires fix - hidden by default, enabled in settings\n * calculate hashes for Lora\n * add lora hashes to infotext\n * when pasting infotext, use infotext's lora hashes to find local loras for `<lora:xxx:1>` entries whose hashes match loras the user has\n * select cross attention optimization from UI\n\n### Minor:\n * bump Gradio to 3.31.0\n * bump PyTorch to 2.0.1 for macOS and Linux AMD\n * allow setting defaults for elements in extensions' tabs\n * allow selecting file type for live previews\n * show \"Loading...\" for extra networks when displaying for the first time\n * suppress ENSD infotext for samplers that don't use it\n * clientside optimizations\n * add options to show/hide hidden files and dirs in extra networks, and to not list models/files in hidden directories\n * allow whitespace in styles.csv\n * add option to reorder tabs\n * move some functionality (swap resolution and set seed to -1) to client\n * option to specify editor height for img2img\n * button to copy image resolution into img2img width/height sliders\n * switch from pyngrok to ngrok-py\n * lazy-load images in extra networks UI\n * set \"Navigate image viewer with gamepad\" option to false by default, by request\n * change upscalers to download models into user-specified directory (from commandline args) rather than the default models/<...>\n * allow hiding buttons in ui-config.json\n\n### Extensions:\n * add /sdapi/v1/script-info api\n * use Ruff to lint Python code\n * use ESlint to lint Javascript code\n * add/modify CFG callbacks for Self-Attention Guidance extension\n * add command and endpoint for graceful server stopping\n * add some locals (prompts/seeds/etc) from processing function into the Processing class as fields\n * rework quoting for infotext items that have commas in them to use JSON (should be backwards compatible except for cases where it didn't work previously)\n * add /sdapi/v1/refresh-loras api checkpoint post request\n * tests overhaul\n\n### Bug Fixes:\n * fix an issue preventing the program from starting if the user specifies a bad Gradio theme\n * fix broken prompts from file script\n * fix symlink scanning for extra networks\n * fix --data-dir ignored when launching via webui-user.bat COMMANDLINE_ARGS\n * allow web UI to be ran fully offline\n * fix inability to run with --freeze-settings\n * fix inability to merge checkpoint without adding metadata\n * fix extra networks' save preview image not adding infotext for jpeg/webm\n * remove blinking effect from text in hires fix and scale resolution preview\n * make links to `http://<...>.git` extensions work in the extension tab\n * fix bug with webui hanging at startup due to hanging git process\n\n\n## 1.2.1\n\n### Features:\n * add an option to always refer to LoRA by filenames\n\n### Bug Fixes:\n * never refer to LoRA by an alias if multiple LoRAs have same alias or the alias is called none\n * fix upscalers disappearing after the user reloads UI\n * allow bf16 in safe unpickler (resolves problems with loading some LoRAs)\n * allow web UI to be ran fully offline\n * fix localizations not working\n * fix error for LoRAs: `'LatentDiffusion' object has no attribute 'lora_layer_mapping'`\n\n## 1.2.0\n\n### Features:\n * do not wait for Stable Diffusion model to load at startup\n * add filename patterns: `[denoising]`\n * directory hiding for extra networks: dirs starting with `.` will hide their cards on extra network tabs unless specifically searched for\n * LoRA: for the `<...>` text in prompt, use name of LoRA that is in the metdata of the file, if present, instead of filename (both can be used to activate LoRA)\n * LoRA: read infotext params from kohya-ss's extension parameters if they are present and if his extension is not active\n * LoRA: fix some LoRAs not working (ones that have 3x3 convolution layer)\n * LoRA: add an option to use old method of applying LoRAs (producing same results as with kohya-ss)\n * add version to infotext, footer and console output when starting\n * add links to wiki for filename pattern settings\n * add extended info for quicksettings setting and use multiselect input instead of a text field\n\n### Minor:\n * bump Gradio to 3.29.0\n * bump PyTorch to 2.0.1\n * `--subpath` option for gradio for use with reverse proxy\n * Linux/macOS: use existing virtualenv if already active (the VIRTUAL_ENV environment variable)\n * do not apply localizations if there are none (possible frontend optimization)\n * add extra `None` option for VAE in XYZ plot\n * print error to console when batch processing in img2img fails\n * create HTML for extra network pages only on demand\n * allow directories starting with `.` to still list their models for LoRA, checkpoints, etc\n * put infotext options into their own category in settings tab\n * do not show licenses page when user selects Show all pages in settings\n\n### Extensions:\n * tooltip localization support\n * add API method to get LoRA models with prompt\n\n### Bug Fixes:\n * re-add `/docs` endpoint\n * fix gamepad navigation\n * make the lightbox fullscreen image function properly\n * fix squished thumbnails in extras tab\n * keep \"search\" filter for extra networks when user refreshes the tab (previously it showed everthing after you refreshed)\n * fix webui showing the same image if you configure the generation to always save results into same file\n * fix bug with upscalers not working properly\n * fix MPS on PyTorch 2.0.1, Intel Macs\n * make it so that custom context menu from contextMenu.js only disappears after user's click, ignoring non-user click events\n * prevent Reload UI button/link from reloading the page when it's not yet ready\n * fix prompts from file script failing to read contents from a drag/drop file\n\n\n## 1.1.1\n### Bug Fixes:\n * fix an error that prevents running webui on PyTorch<2.0 without --disable-safe-unpickle\n\n## 1.1.0\n### Features:\n * switch to PyTorch 2.0.0 (except for AMD GPUs)\n * visual improvements to custom code scripts\n * add filename patterns: `[clip_skip]`, `[hasprompt<>]`, `[batch_number]`, `[generation_number]`\n * add support for saving init images in img2img, and record their hashes in infotext for reproducability\n * automatically select current word when adjusting weight with ctrl+up/down\n * add dropdowns for X/Y/Z plot\n * add setting: Stable Diffusion/Random number generator source: makes it possible to make images generated from a given manual seed consistent across different GPUs\n * support Gradio's theme API\n * use TCMalloc on Linux by default; possible fix for memory leaks\n * add optimization option to remove negative conditioning at low sigma values #9177\n * embed model merge metadata in .safetensors file\n * extension settings backup/restore feature #9169\n * add \"resize by\" and \"resize to\" tabs to img2img\n * add option \"keep original size\" to textual inversion images preprocess\n * image viewer scrolling via analog stick\n * button to restore the progress from session lost / tab reload\n\n### Minor:\n * bump Gradio to 3.28.1\n * change \"scale to\" to sliders in Extras tab\n * add labels to tool buttons to make it possible to hide them\n * add tiled inference support for ScuNET\n * add branch support for extension installation\n * change Linux installation script to install into current directory rather than `/home/username`\n * sort textual inversion embeddings by name (case-insensitive)\n * allow styles.csv to be symlinked or mounted in docker\n * remove the \"do not add watermark to images\" option\n * make selected tab configurable with UI config\n * make the extra networks UI fixed height and scrollable\n * add `disable_tls_verify` arg for use with self-signed certs\n\n### Extensions:\n * add reload callback\n * add `is_hr_pass` field for processing\n\n### Bug Fixes:\n * fix broken batch image processing on 'Extras/Batch Process' tab\n * add \"None\" option to extra networks dropdowns\n * fix FileExistsError for CLIP Interrogator\n * fix /sdapi/v1/txt2img endpoint not working on Linux #9319\n * fix disappearing live previews and progressbar during slow tasks\n * fix fullscreen image view not working properly in some cases\n * prevent alwayson_scripts args param resizing script_arg list when they are inserted in it\n * fix prompt schedule for second order samplers\n * fix image mask/composite for weird resolutions #9628\n * use correct images for previews when using AND (see #9491)\n * one broken image in img2img batch won't stop all processing\n * fix image orientation bug in train/preprocess\n * fix Ngrok recreating tunnels every reload\n * fix `--realesrgan-models-path` and `--ldsr-models-path` not working\n * fix `--skip-install` not working\n * use SAMPLE file format in Outpainting Mk2 & Poorman\n * do not fail all LoRAs if some have failed to load when making a picture\n\n## 1.0.0\n  * everything\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.2373046875,
          "content": "cff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n  - given-names: AUTOMATIC1111\ntitle: \"Stable Diffusion Web UI\"\ndate-released: 2022-08-22\nurl: \"https://github.com/AUTOMATIC1111/stable-diffusion-webui\"\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.6298828125,
          "content": "*       @AUTOMATIC1111\n\n# if you were managing a localization and were removed from this file, this is because\n# the intended way to do localizations now is via extensions. See:\n# https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Developing-extensions\n# Make a repo with your localization and since you are still listed as a collaborator\n# you can add it to the wiki page yourself. This change is because some people complained\n# the git commit log is cluttered with things unrelated to almost everyone and\n# because I believe this is the best overall for the project to handle localizations almost\n# entirely without my oversight.\n\n\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 33.7666015625,
          "content": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n                    Copyright (c) 2023 AUTOMATIC1111\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.6689453125,
          "content": "<div align=\"center\">\n\n<h1> Clarity AI | AI Image Upscaler & Enhancer - free and open-source Magnific Alternative </h1>\n\n[![App](https://img.shields.io/badge/App-ClarityAI.co-blueviolet)](https://ClarityAI.co)\n\n[![API](https://img.shields.io/badge/API-ClarityAI.co/api-green)](https://ClarityAI.co/api)\n[![Replicate](https://img.shields.io/badge/Demo-Replicate-purple)](https://replicate.com/philz1337x/clarity-upscaler)\n\n[![GitHub Repo](https://img.shields.io/badge/GitHub-ComfyUI--ClarityAI-blue?logo=github)](https://github.com/philz1337x/ComfyUI-ClarityAI)\n\n[![Twitter Follow](https://img.shields.io/twitter/follow/philz1337x?style=social)](https://twitter.com/philz1337x)\n![GitHub stars](https://img.shields.io/github/stars/philz1337x/clarity-upscaler?style=social&label=Star)\n\n![Example video](example.gif)\n\n[Full Video on X/Twitter](https://x.com/philz1337x/status/1768679154726359128?s=20)\n\n</div>\n\n# 👋 Hello\n\nI build open source AI apps. To finance my work i also build paid versions of my code. But feel free to use the free code. I post features and new projects on https://twitter.com/philz1337x\n\n# 🗞️ Updates\n\n- 06/19/2024: Pattern upscaling\n- 05/24/2024: Increased Resolution to 13kx13k (https://x.com/philz1337x/status/1793983581636690379)\n- 05/16/2024: Output file format: jpg/png/webp (https://x.com/philz1337x/status/1791431093641457824)\n- 05/02/2024: Sharpen image\n- 05/07/2024: ComfyUI node (https://x.com/philz1337x/status/1787905308439826920)\n- 04/12/2024: Multi-step upscaling (https://x.com/philz1337x/status/1785269458304442565)\n- 04/07/2024: Resemblance fixed (https://x.com/levelsio/status/1776729356120797265)\n- 04/05/2024: Speed Improvements (https://x.com/philz1337x/status/1776121175195975888)\n- 04/01/2024: Support custom safetensors checkpoints (https://x.com/philz1337x/status/1774772572632338435)\n- 03/28/2024: Anime upscaling (https://x.com/philz1337x/status/1773342568543346738) (https://clarityai.co/anime-image-upscaling)\n- 03/26/2024: LoRa Support (https://x.com/philz1337x/status/1772575319871959180)\n- 03/21/2024: Pre downscaling (https://x.com/philz1337x/status/1770680096031961351)\n- 03/18/2024: Fractality (https://x.com/philz1337x/status/1769756654533485050)\n- 03/15/2024: Code release (https://x.com/philz1337x/status/1768679154726359128)\n\n# 🚀 Options to use Clarity-Upscaler\n\nNote that this repository is an implementation for cog. If you are not familiar with cog, I recommend the easier solutions. The free options are ComfyUI and A1111, while the paid but easy-to-use options are my app ClarityAI.co and the ComfyUI API Node.\n\n## 🧑‍💻 App\n\nThe simplest option to use Clarity is with the app at [ClarityAI.co](https://ClarityAI.co)\n\n## 🐰 ComfyUI\n\n### 1. API node\n\n1. Open ComfyUI Manager, search for Clarity AI, and install the node.\n2. Create an API key at: [ClarityAI.co/ComfyUI](https://ClarityAI.co/comfyui)\n3. Add the API key to the node as a) envirement variable `CAI_API_KEY` OR b) to a `cai_platform_key.txt` text file OR c) in `api_key_override` field of the node.\n\nFull instructions: https://github.com/philz1337x/ComfyUI-ClarityAI\n\n### 2. Free workflow\n\n1. Download the repo https://github.com/philz1337x/ComfyUI-ClarityAI and use the file free-wokflow.json\n\n## ⚙️ API\n\nUse the API at: [ClarityAI.co/API](https://ClarityAI.co/api)\n\n## Cog\n\nIf you are not familiar with cog read: <a href=https://github.com/replicate/cog/blob/main/docs/getting-started-own-model.md>cog docs</a>\n\n- run `download_weights.py`\n\n- predict with cog:\n\n```su\ncog predict -i image=\"link-to-image\"\n```\n\n## A1111 webUI\n\nFor a detailed explanation, use the tutorial in this post: https://x.com/philz1337x/status/1830504764389380466\n\nhttps://github.com/AUTOMATIC1111/stable-diffusion-webui\n\n- Use these params:\n\n```Prompt:\nmasterpiece, best quality, highres, <lora:more_details:0.5> <lora:SDXLrender_v2.0:1> Negative prompt: (worst quality, low quality, normal quality:2) JuggernautNegative-neg Steps: 18, Sampler: DPM++ 3M SDE Karras, CFG scale: 6.0, Seed: 1337, Size: 1024x1024, Model hash: 338b85bc4f, Model: juggernaut_reborn, Denoising strength: 0.35, Tiled Diffusion upscaler: 4x-UltraSharp, Tiled Diffusion scale factor: 2, Tiled Diffusion: {\"Method\": \"MultiDiffusion\", \"Tile tile width\": 112, \"Tile tile height\": 144, \"Tile Overlap\": 4, \"Tile batch size\": 8, \"Upscaler\": \"4x-UltraSharp\", \"Upscale factor\": 2, \"Keep input size\": true}, ControlNet 0: \"Module: tile_resample, Model: control_v11f1e_sd15_tile, Weight: 0.6, Resize Mode: 1, Low Vram: False, Processor Res: 512, Threshold A: 1, Threshold B: 1, Guidance Start: 0.0, Guidance End: 1.0, Pixel Perfect: True, Control Mode: 1, Hr Option: HiResFixOption.BOTH, Save Detected Map: False\", Lora hashes: \"more_details: 3b8aa1d351ef, SDXLrender_v2.0: 3925cf4759af\"\n```\n"
        },
        {
          "name": "cache.json",
          "type": "blob",
          "size": 0.7216796875,
          "content": "{\n    \"safetensors-metadata\": {\n        \"checkpoint/v1-5-pruned-emaonly.safetensors\": {\n            \"mtime\": 1707282384.7290666,\n            \"value\": {\n                \"format\": \"pt\"\n            }\n        },\n        \"lora/more_details\": {\n            \"mtime\": 1707282511.967678,\n            \"value\": {}\n        }\n    },\n    \"hashes\": {\n        \"checkpoint/v1-5-pruned-emaonly.safetensors\": {\n            \"mtime\": 1707282384.7290666,\n            \"sha256\": \"6ce0161689b3853acaa03779ec93eafe75a02f4ced659bee03f50797806fa2fa\"\n        }\n    },\n    \"hashes-addnet\": {\n        \"lora/more_details\": {\n            \"mtime\": 1707282511.967678,\n            \"sha256\": \"3b8aa1d351efcbf8152e6327671d1310f6052b261363521874bb57c2711f419d\"\n        }\n    }\n}"
        },
        {
          "name": "cog.yaml",
          "type": "blob",
          "size": 1.080078125,
          "content": "build:\n  gpu: true\n  system_packages:\n    - \"libgl1-mesa-glx\"\n    - \"libglib2.0-0\"\n  python_version: \"3.10.4\"\n  python_packages:\n    - \"torch==2.0.1\"\n    - \"torchvision==0.15.2\"\n    - \"xformers==0.0.22\"\n    - \"tensorboard==2.16.2\"\n    - \"gfpgan==1.3.8\"\n    - \"lpips==0.1.4\"\n    - \"realesrgan==0.3.0\"\n    - \"gdown==5.1.0\"\n    - \"mediapipe==0.10.14\"\n  run:\n    - curl -o /usr/local/bin/pget -L \"https://github.com/replicate/pget/releases/latest/download/pget_$(uname -s)_$(uname -m)\"\n    - chmod +x /usr/local/bin/pget\n    - git config --global --add safe.directory /src\n    - git config --global --add safe.directory /src/extensions/sd-webui-controlnet\n    - git config --global --add safe.directory /src/extensions/multidiffusion-upscaler-for-automatic1111\n    - git clone https://github.com/philz1337x/stable-diffusion-webui-cog-init /stable-diffusion-webui\n    - python /stable-diffusion-webui/init_env.py --skip-torch-cuda-test\n    - sed -i 's/from pkg_resources import packaging/import packaging/g' /root/.pyenv/versions/3.10.4/lib/python3.10/site-packages/clip/clip.py\npredict: \"predict.py:Predictor\"\n"
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "download_weights.py",
          "type": "blob",
          "size": 2.90234375,
          "content": "import os\nimport requests\nimport shutil\n\ndef download_file(url, folder_path, filename):\n    if not os.path.exists(folder_path):\n        os.makedirs(folder_path)\n    file_path = os.path.join(folder_path, filename)\n    \n    if os.path.isfile(file_path):\n        print(f\"File already exists: {file_path}\")\n    else:\n        response = requests.get(url, stream=True)\n        if response.status_code == 200:\n            with open(file_path, 'wb') as file:\n                for chunk in response.iter_content(chunk_size=1024):\n                    file.write(chunk)\n            print(f\"File successfully downloaded and saved: {file_path}\")\n        else:\n            print(f\"Error downloading the file. Status code: {response.status_code}\")\n\n# Prepare webui\nfrom modules.launch_utils import prepare_environment\nprepare_environment()\n\nprint(\"Modifiying controlnet.py\")\nshutil.copyfile('modified_controlnet.py', 'extensions/sd-webui-controlnet/scripts/controlnet.py')\nprint(\"Modifiying controlnet.py - Done\")\n\n# Checkpoints\ndownload_file(\n    \"https://huggingface.co/philz1337x/flat2DAnimerge_v45Sharp/resolve/main/flat2DAnimerge_v45Sharp.safetensors?download=true\",\n    \"models/Stable-diffusion\",\n    \"flat2DAnimerge_v45Sharp.safetensors\"\n)\ndownload_file(\n    \"https://huggingface.co/dantea1118/juggernaut_reborn/resolve/main/juggernaut_reborn.safetensors?download=true\",\n    \"models/Stable-diffusion\",\n    \"juggernaut_reborn.safetensors\"\n)\ndownload_file(\n    \"https://huggingface.co/philz1337x/epicrealism/resolve/main/epicrealism_naturalSinRC1VAE.safetensors?download=true\",\n    \"models/Stable-diffusion\",\n    \"epicrealism_naturalSinRC1VAE.safetensors\"\n)\n\n# Upscaler Model\ndownload_file(\n    \"https://huggingface.co/philz1337x/upscaler/resolve/main/4x-UltraSharp.pth?download=true\",\n    \"models/ESRGAN\",\n    \"4x-UltraSharp.pth\"\n)\n\n# Embeddings\ndownload_file(\n    \"https://huggingface.co/philz1337x/embeddings/resolve/main/verybadimagenegative_v1.3.pt?download=true\",\n    \"embeddings\",\n    \"verybadimagenegative_v1.3.pt\"\n)\ndownload_file(\n    \"https://huggingface.co/philz1337x/embeddings/resolve/main/JuggernautNegative-neg.pt?download=true\",\n    \"embeddings\",\n    \"JuggernautNegative-neg.pt\"\n)\n\n# Lora Models\ndownload_file(\n    \"https://huggingface.co/philz1337x/loras/resolve/main/SDXLrender_v2.0.safetensors?download=true\",\n    \"models/Lora\",\n    \"SDXLrender_v2.0.safetensors\"\n)\ndownload_file(\n    \"https://huggingface.co/philz1337x/loras/resolve/main/more_details.safetensors?download=true\",\n    \"models/Lora\",\n    \"more_details.safetensors\"\n)\n\n# Controlnet models\ndownload_file(\n    \"https://huggingface.co/lllyasviel/ControlNet-v1-1/resolve/main/control_v11f1e_sd15_tile.pth?download=true\",\n    \"models/ControlNet\",\n    \"control_v11f1e_sd15_tile.pth\"\n)\n\n# VAE\ndownload_file(\n    \"https://huggingface.co/stabilityai/sd-vae-ft-mse-original/resolve/main/vae-ft-mse-840000-ema-pruned.safetensors?download=true\",\n    \"models/VAE\",\n    \"vae-ft-mse-840000-ema-pruned.safetensors\"\n)\n"
        },
        {
          "name": "environment-wsl2.yaml",
          "type": "blob",
          "size": 0.1630859375,
          "content": "name: automatic\nchannels:\n  - pytorch\n  - defaults\ndependencies:\n  - python=3.10\n  - pip=23.0\n  - cudatoolkit=11.8\n  - pytorch=2.0\n  - torchvision=0.15\n  - numpy=1.23\n"
        },
        {
          "name": "example.gif",
          "type": "blob",
          "size": 19807.9677734375,
          "content": ""
        },
        {
          "name": "extensions-builtin",
          "type": "tree",
          "content": null
        },
        {
          "name": "extensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "handfix",
          "type": "tree",
          "content": null
        },
        {
          "name": "html",
          "type": "tree",
          "content": null
        },
        {
          "name": "init.png",
          "type": "blob",
          "size": 541.9423828125,
          "content": null
        },
        {
          "name": "init.sh",
          "type": "blob",
          "size": 0.205078125,
          "content": "#!/bin/bash\necho \"Init Stable Diffusion Environment\"\nsudo cog run python /src/init_env.py\necho \"Install Requirements\"\nsudo cog run pip install --no-cache-dir -r requirements.txt\necho \"Download Models\"\ncommand2\n"
        },
        {
          "name": "init_env.py",
          "type": "blob",
          "size": 0.2197265625,
          "content": "import sys\n#sys.path.extend(['/stable-diffusion-webui'])\n\n#from modules import timer\nfrom modules import launch_utils\n\nwith launch_utils.startup_timer.subcategory(\"prepare environment\"):\n    launch_utils.prepare_environment()"
        },
        {
          "name": "javascript",
          "type": "tree",
          "content": null
        },
        {
          "name": "launch.py",
          "type": "blob",
          "size": 1.2197265625,
          "content": "from modules import launch_utils\n\nargs = launch_utils.args\npython = launch_utils.python\ngit = launch_utils.git\nindex_url = launch_utils.index_url\ndir_repos = launch_utils.dir_repos\n\ncommit_hash = launch_utils.commit_hash\ngit_tag = launch_utils.git_tag\n\nrun = launch_utils.run\nis_installed = launch_utils.is_installed\nrepo_dir = launch_utils.repo_dir\n\nrun_pip = launch_utils.run_pip\ncheck_run_python = launch_utils.check_run_python\ngit_clone = launch_utils.git_clone\ngit_pull_recursive = launch_utils.git_pull_recursive\nlist_extensions = launch_utils.list_extensions\nrun_extension_installer = launch_utils.run_extension_installer\nprepare_environment = launch_utils.prepare_environment\nconfigure_for_tests = launch_utils.configure_for_tests\nstart = launch_utils.start\n\n\ndef main():\n    if args.dump_sysinfo:\n        filename = launch_utils.dump_sysinfo()\n\n        print(f\"Sysinfo saved as {filename}. Exiting...\")\n\n        exit(0)\n\n    launch_utils.startup_timer.record(\"initial startup\")\n\n    with launch_utils.startup_timer.subcategory(\"prepare environment\"):\n        if not args.skip_prepare_environment:\n            prepare_environment()\n\n    if args.test_server:\n        configure_for_tests()\n\n    start()\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "localizations",
          "type": "tree",
          "content": null
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "modified_controlnet.py",
          "type": "blob",
          "size": 59.103515625,
          "content": "import gc\nimport tracemalloc\nimport os\nimport logging\nfrom collections import OrderedDict\nfrom copy import copy\nfrom typing import Dict, Optional, Tuple, List, NamedTuple\nimport modules.scripts as scripts\nfrom modules import shared, devices, script_callbacks, processing, masking, images\nfrom modules.api.api import decode_base64_to_image\nimport gradio as gr\nimport time\n\nfrom einops import rearrange\nfrom scripts import global_state, hook, external_code, batch_hijack, controlnet_version, utils\nfrom scripts.controlnet_lora import bind_control_lora, unbind_control_lora\nfrom scripts.processor import *\nfrom scripts.controlnet_lllite import clear_all_lllite\nfrom scripts.controlmodel_ipadapter import clear_all_ip_adapter\nfrom scripts.utils import load_state_dict, get_unique_axis0, align_dim_latent\nfrom scripts.hook import ControlParams, UnetHook, HackedImageRNG\nfrom scripts.enums import ControlModelType, StableDiffusionVersion, HiResFixOption\nfrom scripts.controlnet_ui.controlnet_ui_group import ControlNetUiGroup, UiControlNetUnit\nfrom scripts.controlnet_ui.photopea import Photopea\nfrom scripts.logging import logger\nfrom modules.processing import StableDiffusionProcessingImg2Img, StableDiffusionProcessingTxt2Img, StableDiffusionProcessing\nfrom modules.images import save_image\nfrom scripts.infotext import Infotext\n\nimport cv2\nimport numpy as np\nimport torch\n\nfrom PIL import Image, ImageFilter, ImageOps\nfrom scripts.lvminthin import lvmin_thin, nake_nms\nfrom scripts.processor import model_free_preprocessors\nfrom scripts.controlnet_model_guess import build_model_by_guess, ControlModel\nfrom scripts.hook import torch_dfs\n\n\n# Gradio 3.32 bug fix\nimport tempfile\ngradio_tempfile_path = os.path.join(tempfile.gettempdir(), 'gradio')\nos.makedirs(gradio_tempfile_path, exist_ok=True)\n\n\ndef clear_all_secondary_control_models(m):\n    all_modules = torch_dfs(m)\n\n    for module in all_modules:\n        _original_inner_forward_cn_hijack = getattr(module, '_original_inner_forward_cn_hijack', None)\n        original_forward_cn_hijack = getattr(module, 'original_forward_cn_hijack', None)\n        if _original_inner_forward_cn_hijack is not None:\n            module._forward = _original_inner_forward_cn_hijack\n        if original_forward_cn_hijack is not None:\n            module.forward = original_forward_cn_hijack\n\n    clear_all_lllite()\n    clear_all_ip_adapter()\n\n\ndef find_closest_lora_model_name(search: str):\n    if not search:\n        return None\n    if search in global_state.cn_models:\n        return search\n    search = search.lower()\n    if search in global_state.cn_models_names:\n        return global_state.cn_models_names.get(search)\n    applicable = [name for name in global_state.cn_models_names.keys()\n                  if search in name.lower()]\n    if not applicable:\n        return None\n    applicable = sorted(applicable, key=lambda name: len(name))\n    return global_state.cn_models_names[applicable[0]]\n\n\ndef swap_img2img_pipeline(p: processing.StableDiffusionProcessingImg2Img):\n    p.__class__ = processing.StableDiffusionProcessingTxt2Img\n    dummy = processing.StableDiffusionProcessingTxt2Img()\n    for k,v in dummy.__dict__.items():\n        if hasattr(p, k):\n            continue\n        setattr(p, k, v)\n\n\nglobal_state.update_cn_models()\n\n\ndef image_dict_from_any(image) -> Optional[Dict[str, np.ndarray]]:\n    if image is None:\n        return None\n\n    if isinstance(image, (tuple, list)):\n        image = {'image': image[0], 'mask': image[1]}\n    elif not isinstance(image, dict):\n        image = {'image': image, 'mask': None}\n    else:  # type(image) is dict\n        # copy to enable modifying the dict and prevent response serialization error\n        image = dict(image)\n\n    if isinstance(image['image'], str):\n        if os.path.exists(image['image']):\n            image['image'] = np.array(Image.open(image['image'])).astype('uint8')\n        elif image['image']:\n            image['image'] = external_code.to_base64_nparray(image['image'])\n        else:\n            image['image'] = None\n\n    # If there is no image, return image with None image and None mask\n    if image['image'] is None:\n        image['mask'] = None\n        return image\n\n    if 'mask' not in image or image['mask'] is None:\n        image['mask'] = np.zeros_like(image['image'], dtype=np.uint8)\n    elif isinstance(image['mask'], str):\n        if os.path.exists(image['mask']):\n            image['mask'] = np.array(Image.open(image['mask'])).astype('uint8')\n        elif image['mask']:\n            image['mask'] = external_code.to_base64_nparray(image['mask'])\n        else:\n            image['mask'] = np.zeros_like(image['image'], dtype=np.uint8)\n\n    return image\n\n\ndef prepare_mask(\n    mask: Image.Image, p: processing.StableDiffusionProcessing\n) -> Image.Image:\n    \"\"\"\n    Prepare an image mask for the inpainting process.\n\n    This function takes as input a PIL Image object and an instance of the \n    StableDiffusionProcessing class, and performs the following steps to prepare the mask:\n\n    1. Convert the mask to grayscale (mode \"L\").\n    2. If the 'inpainting_mask_invert' attribute of the processing instance is True,\n       invert the mask colors.\n    3. If the 'mask_blur' attribute of the processing instance is greater than 0,\n       apply a Gaussian blur to the mask with a radius equal to 'mask_blur'.\n\n    Args:\n        mask (Image.Image): The input mask as a PIL Image object.\n        p (processing.StableDiffusionProcessing): An instance of the StableDiffusionProcessing class \n                                                   containing the processing parameters.\n\n    Returns:\n        mask (Image.Image): The prepared mask as a PIL Image object.\n    \"\"\"\n    if isinstance(mask, np.ndarray):\n      mask = Image.fromarray(mask)\n    mask = mask.convert(\"L\")\n    \n    if getattr(p, \"inpainting_mask_invert\", False):\n        mask = ImageOps.invert(mask)\n\n    if hasattr(p, 'mask_blur_x'):\n        if getattr(p, \"mask_blur_x\", 0) > 0:\n            np_mask = np.array(mask)\n            kernel_size = 2 * int(2.5 * p.mask_blur_x + 0.5) + 1\n            np_mask = cv2.GaussianBlur(np_mask, (kernel_size, 1), p.mask_blur_x)\n            mask = Image.fromarray(np_mask)\n        if getattr(p, \"mask_blur_y\", 0) > 0:\n            np_mask = np.array(mask)\n            kernel_size = 2 * int(2.5 * p.mask_blur_y + 0.5) + 1\n            np_mask = cv2.GaussianBlur(np_mask, (1, kernel_size), p.mask_blur_y)\n            mask = Image.fromarray(np_mask)\n    else:\n        if getattr(p, \"mask_blur\", 0) > 0:\n            mask = mask.filter(ImageFilter.GaussianBlur(p.mask_blur))\n\n    return mask\n\n\ndef set_numpy_seed(p: processing.StableDiffusionProcessing) -> Optional[int]:\n    \"\"\"\n    Set the random seed for NumPy based on the provided parameters.\n\n    Args:\n        p (processing.StableDiffusionProcessing): The instance of the StableDiffusionProcessing class.\n\n    Returns:\n        Optional[int]: The computed random seed if successful, or None if an exception occurs.\n\n    This function sets the random seed for NumPy using the seed and subseed values from the given instance of\n    StableDiffusionProcessing. If either seed or subseed is -1, it uses the first value from `all_seeds`.\n    Otherwise, it takes the maximum of the provided seed value and 0.\n\n    The final random seed is computed by adding the seed and subseed values, applying a bitwise AND operation\n    with 0xFFFFFFFF to ensure it fits within a 32-bit integer.\n    \"\"\"\n    try:\n        tmp_seed = int(p.all_seeds[0] if p.seed == -1 else max(int(p.seed), 0))\n        tmp_subseed = int(p.all_seeds[0] if p.subseed == -1 else max(int(p.subseed), 0))\n        seed = (tmp_seed + tmp_subseed) & 0xFFFFFFFF\n        np.random.seed(seed)\n        return seed\n    except Exception as e:\n        logger.warning(e)\n        logger.warning('Warning: Failed to use consistent random seed.')\n        return None\n\n\ndef get_pytorch_control(x: np.ndarray) -> torch.Tensor:\n    # A very safe method to make sure that Apple/Mac works\n    y = x\n\n    # below is very boring but do not change these. If you change these Apple or Mac may fail.\n    y = torch.from_numpy(y)\n    y = y.float() / 255.0\n    y = rearrange(y, 'h w c -> 1 c h w')\n    y = y.clone()\n    y = y.to(devices.get_device_for(\"controlnet\"))\n    y = y.clone()\n    return y\n\n\nclass Script(scripts.Script, metaclass=(\n    utils.TimeMeta if logger.level == logging.DEBUG else type)):\n\n    model_cache: Dict[str, ControlModel] = OrderedDict()\n\n    def __init__(self) -> None:\n        super().__init__()\n        self.latest_network = None\n        self.preprocessor = global_state.cache_preprocessors(global_state.cn_preprocessor_modules)\n        self.unloadable = global_state.cn_preprocessor_unloadable\n        self.input_image = None\n        self.latest_model_hash = \"\"\n        self.enabled_units = []\n        self.detected_map = []\n        self.post_processors = []\n        self.noise_modifier = None\n        self.ui_batch_option_state = [external_code.BatchOption.DEFAULT.value, False]\n        batch_hijack.instance.process_batch_callbacks.append(self.batch_tab_process)\n        batch_hijack.instance.process_batch_each_callbacks.append(self.batch_tab_process_each)\n        batch_hijack.instance.postprocess_batch_each_callbacks.insert(0, self.batch_tab_postprocess_each)\n        batch_hijack.instance.postprocess_batch_callbacks.insert(0, self.batch_tab_postprocess)\n\n    def title(self):\n        return \"ControlNet\"\n\n    def show(self, is_img2img):\n        return scripts.AlwaysVisible\n\n    @staticmethod\n    def get_default_ui_unit(is_ui=True):\n        cls = UiControlNetUnit if is_ui else external_code.ControlNetUnit\n        return cls(\n            enabled=False,\n            module=\"none\",\n            model=\"None\"\n        )\n\n    def uigroup(self, tabname: str, is_img2img: bool, elem_id_tabname: str, photopea: Optional[Photopea]) -> Tuple[ControlNetUiGroup, gr.State]:\n        group = ControlNetUiGroup(\n            is_img2img,\n            Script.get_default_ui_unit(),\n            self.preprocessor,\n            photopea,\n        )\n        return group, group.render(tabname, elem_id_tabname)\n\n    def ui_batch_options(self, is_img2img: bool, elem_id_tabname: str):\n        batch_option = gr.Radio(\n            choices=[e.value for e in external_code.BatchOption],\n            value=external_code.BatchOption.DEFAULT.value,\n            label=\"Batch Option\",\n            elem_id=f\"{elem_id_tabname}_controlnet_batch_option_radio\",\n            elem_classes=\"controlnet_batch_option_radio\",\n        )\n        use_batch_style_align = gr.Checkbox(\n            label='[StyleAlign] Align image style in the batch.'\n        )\n\n        unit_args = [batch_option, use_batch_style_align]\n\n        def update_ui_batch_options(*args):\n            self.ui_batch_option_state = args\n            return\n\n        for comp in unit_args:\n            event_subscribers = []\n            if hasattr(comp, \"edit\"):\n                event_subscribers.append(comp.edit)\n            elif hasattr(comp, \"click\"):\n                event_subscribers.append(comp.click)\n            elif isinstance(comp, gr.Slider) and hasattr(comp, \"release\"):\n                event_subscribers.append(comp.release)\n            elif hasattr(comp, \"change\"):\n                event_subscribers.append(comp.change)\n\n            if hasattr(comp, \"clear\"):\n                event_subscribers.append(comp.clear)\n\n            for event_subscriber in event_subscribers:\n                event_subscriber(\n                    fn=update_ui_batch_options, inputs=unit_args\n                )\n\n        return\n\n    def ui(self, is_img2img):\n        \"\"\"this function should create gradio UI elements. See https://gradio.app/docs/#components\n        The return value should be an array of all components that are used in processing.\n        Values of those returned components will be passed to run() and process() functions.\n        \"\"\"\n        infotext = Infotext()\n        ui_groups = []\n        controls = []\n        max_models = shared.opts.data.get(\"control_net_unit_count\", 3)\n        elem_id_tabname = (\"img2img\" if is_img2img else \"txt2img\") + \"_controlnet\"\n        with gr.Group(elem_id=elem_id_tabname):\n            with gr.Accordion(f\"ControlNet {controlnet_version.version_flag}\", open = False, elem_id=\"controlnet\"):\n                photopea = Photopea() if not shared.opts.data.get(\"controlnet_disable_photopea_edit\", False) else None\n                if max_models > 1:\n                    with gr.Tabs(elem_id=f\"{elem_id_tabname}_tabs\"):\n                        for i in range(max_models):\n                            with gr.Tab(f\"ControlNet Unit {i}\",\n                                        elem_classes=['cnet-unit-tab']):\n                                group, state = self.uigroup(f\"ControlNet-{i}\", is_img2img, elem_id_tabname, photopea)\n                                ui_groups.append(group)\n                                controls.append(state)\n                else:\n                    with gr.Column():\n                        group, state = self.uigroup(f\"ControlNet\", is_img2img, elem_id_tabname, photopea)\n                        ui_groups.append(group)\n                        controls.append(state)\n                with gr.Accordion(f\"Batch Options\", open=False, elem_id=\"controlnet_batch_options\"):\n                    self.ui_batch_options(is_img2img, elem_id_tabname)\n\n        for i, ui_group in enumerate(ui_groups):\n            infotext.register_unit(i, ui_group)\n        if shared.opts.data.get(\"control_net_sync_field_args\", True):\n            self.infotext_fields = infotext.infotext_fields\n            self.paste_field_names = infotext.paste_field_names\n\n        return tuple(controls)\n\n    @staticmethod\n    def clear_control_model_cache():\n        Script.model_cache.clear()\n        gc.collect()\n        devices.torch_gc()\n\n    @staticmethod\n    def load_control_model(p, unet, model) -> ControlModel:\n        if model in Script.model_cache:\n            logger.info(f\"Loading model from cache: {model}\")\n            control_model = Script.model_cache[model]\n            if control_model.type == ControlModelType.Controlllite:\n                # Falls through to load Controlllite model fresh.\n                # TODO Fix context sharing issue for Controlllite.\n                pass\n            elif not control_model.type.allow_context_sharing():\n                # Creates a shallow-copy of control_model so that configs/inputs\n                # from different units can be bind correctly. While heavy objects\n                # of the underlying nn.Module is not copied.\n                return ControlModel(copy(control_model.model), control_model.type)\n            else:\n                return control_model\n\n        # Remove model from cache to clear space before building another model\n        if len(Script.model_cache) > 0 and len(Script.model_cache) >= shared.opts.data.get(\"control_net_model_cache_size\", 2):\n            Script.model_cache.popitem(last=False)\n            gc.collect()\n            devices.torch_gc()\n\n        control_model = Script.build_control_model(p, unet, model)\n\n        if shared.opts.data.get(\"control_net_model_cache_size\", 2) > 0:\n            Script.model_cache[model] = control_model\n\n        return control_model\n\n    @staticmethod\n    def build_control_model(p, unet, model) -> ControlModel:\n        if model is None or model == 'None':\n            raise RuntimeError(f\"You have not selected any ControlNet Model.\")\n\n        model_path = global_state.cn_models.get(model, None)\n        if model_path is None:\n            model = find_closest_lora_model_name(model)\n            model_path = global_state.cn_models.get(model, None)\n\n        if model_path is None:\n            raise RuntimeError(f\"model not found: {model}\")\n\n        # trim '\"' at start/end\n        if model_path.startswith(\"\\\"\") and model_path.endswith(\"\\\"\"):\n            model_path = model_path[1:-1]\n\n        if not os.path.exists(model_path):\n            raise ValueError(f\"file not found: {model_path}\")\n\n        logger.info(f\"Loading model: {model}\")\n        state_dict = load_state_dict(model_path)\n        control_model = build_model_by_guess(state_dict, unet, model_path)\n        control_model.model.to('cpu', dtype=p.sd_model.dtype)\n        logger.info(f\"ControlNet model {model}({control_model.type}) loaded.\")\n        return control_model\n\n    @staticmethod\n    def get_remote_call(p, attribute, default=None, idx=0, strict=False, force=False):\n        if not force and not shared.opts.data.get(\"control_net_allow_script_control\", False):\n            return default\n\n        def get_element(obj, strict=False):\n            if not isinstance(obj, list):\n                return obj if not strict or idx == 0 else None\n            elif idx < len(obj):\n                return obj[idx]\n            else:\n                return None\n\n        attribute_value = get_element(getattr(p, attribute, None), strict)\n        return attribute_value if attribute_value is not None else default\n\n    @staticmethod\n    def parse_remote_call(p, unit: external_code.ControlNetUnit, idx):\n        selector = Script.get_remote_call\n\n        unit.enabled = selector(p, \"control_net_enabled\", unit.enabled, idx, strict=True)\n        unit.module = selector(p, \"control_net_module\", unit.module, idx)\n        unit.model = selector(p, \"control_net_model\", unit.model, idx)\n        unit.weight = selector(p, \"control_net_weight\", unit.weight, idx)\n        unit.image = selector(p, \"control_net_image\", unit.image, idx)\n        unit.resize_mode = selector(p, \"control_net_resize_mode\", unit.resize_mode, idx)\n        unit.low_vram = selector(p, \"control_net_lowvram\", unit.low_vram, idx)\n        unit.processor_res = selector(p, \"control_net_pres\", unit.processor_res, idx)\n        unit.threshold_a = selector(p, \"control_net_pthr_a\", unit.threshold_a, idx)\n        unit.threshold_b = selector(p, \"control_net_pthr_b\", unit.threshold_b, idx)\n        unit.guidance_start = selector(p, \"control_net_guidance_start\", unit.guidance_start, idx)\n        unit.guidance_end = selector(p, \"control_net_guidance_end\", unit.guidance_end, idx)\n        # Backward compatibility. See https://github.com/Mikubill/sd-webui-controlnet/issues/1740\n        # for more details.\n        unit.guidance_end = selector(p, \"control_net_guidance_strength\", unit.guidance_end, idx)\n        unit.control_mode = selector(p, \"control_net_control_mode\", unit.control_mode, idx)\n        unit.pixel_perfect = selector(p, \"control_net_pixel_perfect\", unit.pixel_perfect, idx)\n\n        return unit\n\n    @staticmethod\n    def detectmap_proc(detected_map, module, resize_mode, h, w):\n\n        if 'inpaint' in module:\n            detected_map = detected_map.astype(np.float32)\n        else:\n            detected_map = HWC3(detected_map)\n\n        def safe_numpy(x):\n            # A very safe method to make sure that Apple/Mac works\n            y = x\n\n            # below is very boring but do not change these. If you change these Apple or Mac may fail.\n            y = y.copy()\n            y = np.ascontiguousarray(y)\n            y = y.copy()\n            return y\n\n        def high_quality_resize(x, size):\n            # Written by lvmin\n            # Super high-quality control map up-scaling, considering binary, seg, and one-pixel edges\n\n            inpaint_mask = None\n            if x.ndim == 3 and x.shape[2] == 4:\n                inpaint_mask = x[:, :, 3]\n                x = x[:, :, 0:3]\n\n            if x.shape[0] != size[1] or x.shape[1] != size[0]:\n                new_size_is_smaller = (size[0] * size[1]) < (x.shape[0] * x.shape[1])\n                new_size_is_bigger = (size[0] * size[1]) > (x.shape[0] * x.shape[1])\n                unique_color_count = len(get_unique_axis0(x.reshape(-1, x.shape[2])))\n                is_one_pixel_edge = False\n                is_binary = False\n                if unique_color_count == 2:\n                    is_binary = np.min(x) < 16 and np.max(x) > 240\n                    if is_binary:\n                        xc = x\n                        xc = cv2.erode(xc, np.ones(shape=(3, 3), dtype=np.uint8), iterations=1)\n                        xc = cv2.dilate(xc, np.ones(shape=(3, 3), dtype=np.uint8), iterations=1)\n                        one_pixel_edge_count = np.where(xc < x)[0].shape[0]\n                        all_edge_count = np.where(x > 127)[0].shape[0]\n                        is_one_pixel_edge = one_pixel_edge_count * 2 > all_edge_count\n\n                if 2 < unique_color_count < 200:\n                    interpolation = cv2.INTER_NEAREST\n                elif new_size_is_smaller:\n                    interpolation = cv2.INTER_AREA\n                else:\n                    interpolation = cv2.INTER_CUBIC  # Must be CUBIC because we now use nms. NEVER CHANGE THIS\n\n                y = cv2.resize(x, size, interpolation=interpolation)\n                if inpaint_mask is not None:\n                    inpaint_mask = cv2.resize(inpaint_mask, size, interpolation=interpolation)\n\n                if is_binary:\n                    y = np.mean(y.astype(np.float32), axis=2).clip(0, 255).astype(np.uint8)\n                    if is_one_pixel_edge:\n                        y = nake_nms(y)\n                        _, y = cv2.threshold(y, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)\n                        y = lvmin_thin(y, prunings=new_size_is_bigger)\n                    else:\n                        _, y = cv2.threshold(y, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)\n                    y = np.stack([y] * 3, axis=2)\n            else:\n                y = x\n\n            if inpaint_mask is not None:\n                inpaint_mask = (inpaint_mask > 127).astype(np.float32) * 255.0\n                inpaint_mask = inpaint_mask[:, :, None].clip(0, 255).astype(np.uint8)\n                y = np.concatenate([y, inpaint_mask], axis=2)\n\n            return y\n\n        if resize_mode == external_code.ResizeMode.RESIZE:\n            detected_map = high_quality_resize(detected_map, (w, h))\n            detected_map = safe_numpy(detected_map)\n            return get_pytorch_control(detected_map), detected_map\n\n        old_h, old_w, _ = detected_map.shape\n        old_w = float(old_w)\n        old_h = float(old_h)\n        k0 = float(h) / old_h\n        k1 = float(w) / old_w\n\n        safeint = lambda x: int(np.round(x))\n\n        if resize_mode == external_code.ResizeMode.OUTER_FIT:\n            k = min(k0, k1)\n            borders = np.concatenate([detected_map[0, :, :], detected_map[-1, :, :], detected_map[:, 0, :], detected_map[:, -1, :]], axis=0)\n            high_quality_border_color = np.median(borders, axis=0).astype(detected_map.dtype)\n            if len(high_quality_border_color) == 4:\n                # Inpaint hijack\n                high_quality_border_color[3] = 255\n            high_quality_background = np.tile(high_quality_border_color[None, None], [h, w, 1])\n            detected_map = high_quality_resize(detected_map, (safeint(old_w * k), safeint(old_h * k)))\n            new_h, new_w, _ = detected_map.shape\n            pad_h = max(0, (h - new_h) // 2)\n            pad_w = max(0, (w - new_w) // 2)\n            high_quality_background[pad_h:pad_h + new_h, pad_w:pad_w + new_w] = detected_map\n            detected_map = high_quality_background\n            detected_map = safe_numpy(detected_map)\n            return get_pytorch_control(detected_map), detected_map\n        else:\n            k = max(k0, k1)\n            detected_map = high_quality_resize(detected_map, (safeint(old_w * k), safeint(old_h * k)))\n            new_h, new_w, _ = detected_map.shape\n            pad_h = max(0, (new_h - h) // 2)\n            pad_w = max(0, (new_w - w) // 2)\n            detected_map = detected_map[pad_h:pad_h+h, pad_w:pad_w+w]\n            detected_map = safe_numpy(detected_map)\n            return get_pytorch_control(detected_map), detected_map\n\n    @staticmethod\n    def get_enabled_units(p):\n        units = external_code.get_all_units_in_processing(p)\n        if len(units) == 0:\n            # fill a null group\n            remote_unit = Script.parse_remote_call(p, Script.get_default_ui_unit(), 0)\n            if remote_unit.enabled:\n                units.append(remote_unit)\n\n        enabled_units = []\n        for idx, unit in enumerate(units):\n            local_unit = Script.parse_remote_call(p, unit, idx)\n            if not local_unit.enabled:\n                continue\n            if hasattr(local_unit, \"unfold_merged\"):\n                enabled_units.extend(local_unit.unfold_merged())\n            else:\n                enabled_units.append(copy(local_unit))\n\n        Infotext.write_infotext(enabled_units, p)\n        return enabled_units\n\n    @staticmethod\n    def choose_input_image(\n            p: processing.StableDiffusionProcessing,\n            unit: external_code.ControlNetUnit,\n            idx: int\n        ) -> Tuple[np.ndarray, external_code.ResizeMode]:\n        \"\"\" Choose input image from following sources with descending priority:\n         - p.image_control: [Deprecated] Lagacy way to pass image to controlnet.\n         - p.control_net_input_image: [Deprecated] Lagacy way to pass image to controlnet.\n         - unit.image: ControlNet tab input image.\n         - p.init_images: A1111 img2img tab input image.\n\n        Returns:\n            - The input image in ndarray form.\n            - The resize mode.\n        \"\"\"\n        def parse_unit_image(unit: external_code.ControlNetUnit) -> Union[List[Dict[str, np.ndarray]], Dict[str, np.ndarray]]:\n            unit_has_multiple_images = (\n                isinstance(unit.image, list) and\n                len(unit.image) > 0 and\n                \"image\" in unit.image[0]\n            )\n            if unit_has_multiple_images:\n                return [\n                    d\n                    for img in unit.image\n                    for d in (image_dict_from_any(img),)\n                    if d is not None\n                ]\n            return image_dict_from_any(unit.image)\n\n        def decode_image(img) -> np.ndarray:\n            \"\"\"Need to check the image for API compatibility.\"\"\"\n            if isinstance(img, str):\n                return np.asarray(decode_base64_to_image(image['image']))\n            else:\n                assert isinstance(img, np.ndarray)\n                return img\n\n        # 4 input image sources.\n        p_image_control = getattr(p, \"image_control\", None)\n        p_input_image = Script.get_remote_call(p, \"control_net_input_image\", None, idx)\n        image = parse_unit_image(unit)\n        a1111_image = getattr(p, \"init_images\", [None])[0]\n\n        resize_mode = external_code.resize_mode_from_value(unit.resize_mode)\n\n        if batch_hijack.instance.is_batch and p_image_control is not None:\n            logger.warning(\"Warn: Using legacy field 'p.image_control'.\")\n            input_image = HWC3(np.asarray(p_image_control))\n        elif p_input_image is not None:\n            logger.warning(\"Warn: Using legacy field 'p.controlnet_input_image'\")\n            if isinstance(p_input_image, dict) and \"mask\" in p_input_image and \"image\" in p_input_image:\n                color = HWC3(np.asarray(p_input_image['image']))\n                alpha = np.asarray(p_input_image['mask'])[..., None]\n                input_image = np.concatenate([color, alpha], axis=2)\n            else:\n                input_image = HWC3(np.asarray(p_input_image))\n        elif image:\n            if isinstance(image, list):\n                # Add mask logic if later there is a processor that accepts mask\n                # on multiple inputs.\n                input_image = [HWC3(decode_image(img['image'])) for img in image]\n            else:\n                input_image = HWC3(decode_image(image['image']))\n                if 'mask' in image and image['mask'] is not None:\n                    while len(image['mask'].shape) < 3:\n                        image['mask'] = image['mask'][..., np.newaxis]\n                    if 'inpaint' in unit.module:\n                        logger.info(\"using inpaint as input\")\n                        color = HWC3(image['image'])\n                        alpha = image['mask'][:, :, 0:1]\n                        input_image = np.concatenate([color, alpha], axis=2)\n                    elif (\n                        not shared.opts.data.get(\"controlnet_ignore_noninpaint_mask\", False) and\n                        # There is wield gradio issue that would produce mask that is\n                        # not pure color when no scribble is made on canvas.\n                        # See https://github.com/Mikubill/sd-webui-controlnet/issues/1638.\n                        not (\n                            (image['mask'][:, :, 0] <= 5).all() or\n                            (image['mask'][:, :, 0] >= 250).all()\n                        )\n                    ):\n                        logger.info(\"using mask as input\")\n                        input_image = HWC3(image['mask'][:, :, 0])\n                        unit.module = 'none'  # Always use black bg and white line\n        elif a1111_image is not None:\n            input_image = HWC3(np.asarray(a1111_image))\n            a1111_i2i_resize_mode = getattr(p, \"resize_mode\", None)\n            assert a1111_i2i_resize_mode is not None\n            resize_mode = external_code.resize_mode_from_value(a1111_i2i_resize_mode)\n\n            a1111_mask_image : Optional[Image.Image] = getattr(p, \"image_mask\", None)\n            if 'inpaint' in unit.module:\n                if a1111_mask_image is not None:\n                    a1111_mask = np.array(prepare_mask(a1111_mask_image, p))\n                    assert a1111_mask.ndim == 2\n                    assert a1111_mask.shape[0] == input_image.shape[0]\n                    assert a1111_mask.shape[1] == input_image.shape[1]\n                    input_image = np.concatenate([input_image[:, :, 0:3], a1111_mask[:, :, None]], axis=2)\n                else:\n                    input_image = np.concatenate([\n                        input_image[:, :, 0:3],\n                        np.zeros_like(input_image, dtype=np.uint8)[:, :, 0:1],\n                    ], axis=2)\n        else:\n            # No input image detected.\n            if batch_hijack.instance.is_batch:\n                shared.state.interrupted = True\n            raise ValueError(\"controlnet is enabled but no input image is given\")\n\n        assert isinstance(input_image, (np.ndarray, list))\n        return input_image, resize_mode\n\n    @staticmethod\n    def try_crop_image_with_a1111_mask(\n        p: StableDiffusionProcessing,\n        unit: external_code.ControlNetUnit,\n        input_image: np.ndarray,\n        resize_mode: external_code.ResizeMode,\n    ) -> np.ndarray:\n        \"\"\"\n        Crop ControlNet input image based on A1111 inpaint mask given.\n        This logic is crutial in upscale scripts, as they use A1111 mask + inpaint_full_res\n        to crop tiles.\n        \"\"\"\n        # Note: The method determining whether the active script is an upscale script is purely\n        # based on `extra_generation_params` these scripts attach on `p`, and subject to change\n        # in the future.\n        # TODO: Change this to a more robust condition once A1111 offers a way to verify script name.\n        is_upscale_script = any(\"upscale\" in k.lower() for k in getattr(p, \"extra_generation_params\", {}).keys())\n        logger.debug(f\"is_upscale_script={is_upscale_script}\")\n        # Note: `inpaint_full_res` is \"inpaint area\" on UI. The flag is `True` when \"Only masked\"\n        # option is selected.\n        a1111_mask_image : Optional[Image.Image] = getattr(p, \"image_mask\", None)\n        is_only_masked_inpaint = (\n            issubclass(type(p), StableDiffusionProcessingImg2Img) and\n            p.inpaint_full_res and\n            a1111_mask_image is not None\n        )\n        if (\n            'reference' not in unit.module\n            and is_only_masked_inpaint\n            and (is_upscale_script or unit.inpaint_crop_input_image)\n        ):\n            logger.debug(\"Crop input image based on A1111 mask.\")\n            input_image = [input_image[:, :, i] for i in range(input_image.shape[2])]\n            input_image = [Image.fromarray(x) for x in input_image]\n\n            mask = prepare_mask(a1111_mask_image, p)\n\n            crop_region = masking.get_crop_region(np.array(mask), p.inpaint_full_res_padding)\n            crop_region = masking.expand_crop_region(crop_region, p.width, p.height, mask.width, mask.height)\n\n            input_image = [\n                images.resize_image(resize_mode.int_value(), i, mask.width, mask.height)\n                for i in input_image\n            ]\n\n            input_image = [x.crop(crop_region) for x in input_image]\n            input_image = [\n                images.resize_image(external_code.ResizeMode.OUTER_FIT.int_value(), x, p.width, p.height)\n                for x in input_image\n            ]\n\n            input_image = [np.asarray(x)[:, :, 0] for x in input_image]\n            input_image = np.stack(input_image, axis=2)\n        return input_image\n\n    @staticmethod\n    def bound_check_params(unit: external_code.ControlNetUnit) -> None:\n        \"\"\"\n        Checks and corrects negative parameters in ControlNetUnit 'unit'.\n        Parameters 'processor_res', 'threshold_a', 'threshold_b' are reset to\n        their default values if negative.\n\n        Args:\n            unit (external_code.ControlNetUnit): The ControlNetUnit instance to check.\n        \"\"\"\n        cfg = preprocessor_sliders_config.get(\n            global_state.get_module_basename(unit.module), [])\n        defaults = {\n            param: cfg_default['value']\n            for param, cfg_default in zip(\n                (\"processor_res\", 'threshold_a', 'threshold_b'), cfg)\n            if cfg_default is not None\n        }\n        for param, default_value in defaults.items():\n            value = getattr(unit, param)\n            if value < 0:\n                setattr(unit, param, default_value)\n                logger.warning(f'[{unit.module}.{param}] Invalid value({value}), using default value {default_value}.')\n\n    @staticmethod\n    def check_sd_version_compatible(unit: external_code.ControlNetUnit) -> None:\n        \"\"\"\n        Checks whether the given ControlNet unit has model compatible with the currently\n        active sd model. An exception is thrown if ControlNet unit is detected to be\n        incompatible.\n        \"\"\"\n        sd_version = global_state.get_sd_version()\n        assert sd_version != StableDiffusionVersion.UNKNOWN\n\n        if \"revision\" in unit.module.lower() and sd_version != StableDiffusionVersion.SDXL:\n            raise Exception(f\"Preprocessor 'revision' only supports SDXL. Current SD base model is {sd_version}.\")\n\n        # No need to check if the ControlModelType does not require model to be present.\n        if unit.model is None or unit.model.lower() == \"none\":\n            return\n\n        cnet_sd_version = StableDiffusionVersion.detect_from_model_name(unit.model)\n\n        if cnet_sd_version == StableDiffusionVersion.UNKNOWN:\n            logger.warn(f\"Unable to determine version for ControlNet model '{unit.model}'.\")\n            return\n\n        if not sd_version.is_compatible_with(cnet_sd_version):\n            raise Exception(f\"ControlNet model {unit.model}({cnet_sd_version}) is not compatible with sd model({sd_version})\")\n\n    @staticmethod\n    def get_target_dimensions(p: StableDiffusionProcessing) -> Tuple[int, int, int, int]:\n        \"\"\"Returns (h, w, hr_h, hr_w).\"\"\"\n        h = align_dim_latent(p.height)\n        w = align_dim_latent(p.width)\n\n        high_res_fix = (\n            isinstance(p, StableDiffusionProcessingTxt2Img)\n            and getattr(p, 'enable_hr', False)\n        )\n        if high_res_fix:\n            if p.hr_resize_x == 0 and p.hr_resize_y == 0:\n                hr_y = int(p.height * p.hr_scale)\n                hr_x = int(p.width * p.hr_scale)\n            else:\n                hr_y, hr_x = p.hr_resize_y, p.hr_resize_x\n            hr_y = align_dim_latent(hr_y)\n            hr_x = align_dim_latent(hr_x)\n        else:\n            hr_y = h\n            hr_x = w\n\n        return h, w, hr_y, hr_x\n\n    def controlnet_main_entry(self, p):\n        sd_ldm = p.sd_model\n        unet = sd_ldm.model.diffusion_model\n        self.noise_modifier = None\n\n        setattr(p, 'controlnet_control_loras', [])\n\n        if self.latest_network is not None:\n            # always restore (~0.05s)\n            self.latest_network.restore()\n\n        # always clear (~0.05s)\n        clear_all_secondary_control_models(unet)\n\n        if not batch_hijack.instance.is_batch:\n            self.enabled_units = Script.get_enabled_units(p)\n\n        batch_option_uint_separate = self.ui_batch_option_state[0] == external_code.BatchOption.SEPARATE.value\n        batch_option_style_align = self.ui_batch_option_state[1]\n\n        if len(self.enabled_units) == 0 and not batch_option_style_align:\n           self.latest_network = None\n           return\n\n        logger.info(f\"unit_separate = {batch_option_uint_separate}, style_align = {batch_option_style_align}\")\n\n        detected_maps = []\n        forward_params = []\n        post_processors = []\n\n        # cache stuff\n        if self.latest_model_hash != p.sd_model.sd_model_hash:\n            Script.clear_control_model_cache()\n\n        for idx, unit in enumerate(self.enabled_units):\n            unit.module = global_state.get_module_basename(unit.module)\n\n        # unload unused preproc\n        module_list = [unit.module for unit in self.enabled_units]\n        for key in self.unloadable:\n            if key not in module_list:\n                self.unloadable.get(key, lambda:None)()\n\n        self.latest_model_hash = p.sd_model.sd_model_hash\n        high_res_fix = isinstance(p, StableDiffusionProcessingTxt2Img) and getattr(p, 'enable_hr', False)\n        h, w, hr_y, hr_x = Script.get_target_dimensions(p)\n\n        for idx, unit in enumerate(self.enabled_units):\n            Script.bound_check_params(unit)\n            Script.check_sd_version_compatible(unit)\n            if (\n                \"ip-adapter\" in unit.module and\n                not global_state.ip_adapter_pairing_model[unit.module](unit.model)\n            ):\n                logger.error(f\"Invalid pair of IP-Adapter preprocessor({unit.module}) and model({unit.model}).\\n\"\n                             \"Please follow following pairing logic:\\n\"\n                             + global_state.ip_adapter_pairing_logic_text)\n                continue\n\n            if (\n                'inpaint_only' == unit.module and\n                issubclass(type(p), StableDiffusionProcessingImg2Img) and\n                p.image_mask is not None\n            ):\n                logger.warning('A1111 inpaint and ControlNet inpaint duplicated. Falls back to inpaint_global_harmonious.')\n                unit.module = 'inpaint'\n\n            if unit.module in model_free_preprocessors:\n                model_net = None\n                if 'reference' in unit.module:\n                    control_model_type = ControlModelType.AttentionInjection\n                elif 'revision' in unit.module:\n                    control_model_type = ControlModelType.ReVision\n                else:\n                    raise Exception(\"Unable to determine control_model_type.\")\n            else:\n                model_net, control_model_type = Script.load_control_model(p, unet, unit.model)\n                model_net.reset()\n\n                if control_model_type == ControlModelType.ControlLoRA:\n                    control_lora = model_net.control_model\n                    bind_control_lora(unet, control_lora)\n                    p.controlnet_control_loras.append(control_lora)\n\n            input_image, resize_mode = Script.choose_input_image(p, unit, idx)\n            if isinstance(input_image, list):\n                assert unit.accepts_multiple_inputs()\n                input_images = input_image\n            else: # Following operations are only for single input image.\n                input_image = Script.try_crop_image_with_a1111_mask(p, unit, input_image, resize_mode)\n                input_image = np.ascontiguousarray(input_image.copy()).copy() # safe numpy\n                if unit.module == 'inpaint_only+lama' and resize_mode == external_code.ResizeMode.OUTER_FIT:\n                    # inpaint_only+lama is special and required outpaint fix\n                    _, input_image = Script.detectmap_proc(input_image, unit.module, resize_mode, hr_y, hr_x)\n                if unit.pixel_perfect:\n                    unit.processor_res = external_code.pixel_perfect_resolution(\n                        input_image,\n                        target_H=h,\n                        target_W=w,\n                        resize_mode=resize_mode,\n                    )\n                input_images = [input_image]\n            # Preprocessor result may depend on numpy random operations, use the\n            # random seed in `StableDiffusionProcessing` to make the\n            # preprocessor result reproducable.\n            # Currently following preprocessors use numpy random:\n            # - shuffle\n            seed = set_numpy_seed(p)\n            logger.debug(f\"Use numpy seed {seed}.\")\n            logger.info(f\"Using preprocessor: {unit.module}\")\n            logger.info(f'preprocessor resolution = {unit.processor_res}')\n\n            def store_detected_map(detected_map, module: str) -> None:\n                if unit.save_detected_map:\n                    detected_maps.append((detected_map, module))\n\n            def preprocess_input_image(input_image: np.ndarray):\n                \"\"\" Preprocess single input image. \"\"\"\n                detected_map, is_image = self.preprocessor[unit.module](\n                    input_image,\n                    res=unit.processor_res,\n                    thr_a=unit.threshold_a,\n                    thr_b=unit.threshold_b,\n                    low_vram=(\n                        (\"clip\" in unit.module or unit.module == \"ip-adapter_face_id_plus\") and\n                        shared.opts.data.get(\"controlnet_clip_detector_on_cpu\", False)\n                    ),\n                )\n                if high_res_fix:\n                    if is_image:\n                        hr_control, hr_detected_map = Script.detectmap_proc(detected_map, unit.module, resize_mode, hr_y, hr_x)\n                        store_detected_map(hr_detected_map, unit.module)\n                    else:\n                        hr_control = detected_map\n                else:\n                    hr_control = None\n\n                if is_image:\n                    control, detected_map = Script.detectmap_proc(detected_map, unit.module, resize_mode, h, w)\n                    store_detected_map(detected_map, unit.module)\n                else:\n                    control = detected_map\n                    store_detected_map(input_image, unit.module)\n\n                if control_model_type == ControlModelType.T2I_StyleAdapter:\n                    control = control['last_hidden_state']\n\n                if control_model_type == ControlModelType.ReVision:\n                    control = control['image_embeds']\n                return control, hr_control\n\n            controls, hr_controls = list(zip(*[preprocess_input_image(img) for img in input_images]))\n            if len(controls) == len(hr_controls) == 1:\n                control = controls[0]\n                hr_control = hr_controls[0]\n            else:\n                control = controls\n                hr_control = hr_controls\n\n            preprocessor_dict = dict(\n                name=unit.module,\n                preprocessor_resolution=unit.processor_res,\n                threshold_a=unit.threshold_a,\n                threshold_b=unit.threshold_b\n            )\n\n            global_average_pooling = (\n                control_model_type.is_controlnet() and\n                model_net.control_model.global_average_pooling\n            )\n            control_mode = external_code.control_mode_from_value(unit.control_mode)\n            forward_param = ControlParams(\n                control_model=model_net,\n                preprocessor=preprocessor_dict,\n                hint_cond=control,\n                weight=unit.weight,\n                guidance_stopped=False,\n                start_guidance_percent=unit.guidance_start,\n                stop_guidance_percent=unit.guidance_end,\n                advanced_weighting=unit.advanced_weighting,\n                control_model_type=control_model_type,\n                global_average_pooling=global_average_pooling,\n                hr_hint_cond=hr_control,\n                hr_option=HiResFixOption.from_value(unit.hr_option) if high_res_fix else HiResFixOption.BOTH,\n                soft_injection=control_mode != external_code.ControlMode.BALANCED,\n                cfg_injection=control_mode == external_code.ControlMode.CONTROL,\n            )\n            forward_params.append(forward_param)\n\n            if 'inpaint_only' in unit.module:\n                final_inpaint_feed = hr_control if hr_control is not None else control\n                final_inpaint_feed = final_inpaint_feed.detach().cpu().numpy()\n                final_inpaint_feed = np.ascontiguousarray(final_inpaint_feed).copy()\n                final_inpaint_mask = final_inpaint_feed[0, 3, :, :].astype(np.float32)\n                final_inpaint_raw = final_inpaint_feed[0, :3].astype(np.float32)\n                sigma = shared.opts.data.get(\"control_net_inpaint_blur_sigma\", 7)\n                final_inpaint_mask = cv2.dilate(final_inpaint_mask, np.ones((sigma, sigma), dtype=np.uint8))\n                final_inpaint_mask = cv2.blur(final_inpaint_mask, (sigma, sigma))[None]\n                _, Hmask, Wmask = final_inpaint_mask.shape\n                final_inpaint_raw = torch.from_numpy(np.ascontiguousarray(final_inpaint_raw).copy())\n                final_inpaint_mask = torch.from_numpy(np.ascontiguousarray(final_inpaint_mask).copy())\n\n                def inpaint_only_post_processing(x):\n                    _, H, W = x.shape\n                    if Hmask != H or Wmask != W:\n                        logger.error('Error: ControlNet find post-processing resolution mismatch. This could be related to other extensions hacked processing.')\n                        return x\n                    r = final_inpaint_raw.to(x.dtype).to(x.device)\n                    m = final_inpaint_mask.to(x.dtype).to(x.device)\n                    y = m * x.clip(0, 1) + (1 - m) * r\n                    y = y.clip(0, 1)\n                    return y\n\n                post_processors.append(inpaint_only_post_processing)\n\n            if 'recolor' in unit.module:\n                final_feed = hr_control if hr_control is not None else control\n                final_feed = final_feed.detach().cpu().numpy()\n                final_feed = np.ascontiguousarray(final_feed).copy()\n                final_feed = final_feed[0, 0, :, :].astype(np.float32)\n                final_feed = (final_feed * 255).clip(0, 255).astype(np.uint8)\n                Hfeed, Wfeed = final_feed.shape\n\n                if 'luminance' in unit.module:\n\n                    def recolor_luminance_post_processing(x):\n                        C, H, W = x.shape\n                        if Hfeed != H or Wfeed != W or C != 3:\n                            logger.error('Error: ControlNet find post-processing resolution mismatch. This could be related to other extensions hacked processing.')\n                            return x\n                        h = x.detach().cpu().numpy().transpose((1, 2, 0))\n                        h = (h * 255).clip(0, 255).astype(np.uint8)\n                        h = cv2.cvtColor(h, cv2.COLOR_RGB2LAB)\n                        h[:, :, 0] = final_feed\n                        h = cv2.cvtColor(h, cv2.COLOR_LAB2RGB)\n                        h = (h.astype(np.float32) / 255.0).transpose((2, 0, 1))\n                        y = torch.from_numpy(h).clip(0, 1).to(x)\n                        return y\n\n                    post_processors.append(recolor_luminance_post_processing)\n\n                if 'intensity' in unit.module:\n\n                    def recolor_intensity_post_processing(x):\n                        C, H, W = x.shape\n                        if Hfeed != H or Wfeed != W or C != 3:\n                            logger.error('Error: ControlNet find post-processing resolution mismatch. This could be related to other extensions hacked processing.')\n                            return x\n                        h = x.detach().cpu().numpy().transpose((1, 2, 0))\n                        h = (h * 255).clip(0, 255).astype(np.uint8)\n                        h = cv2.cvtColor(h, cv2.COLOR_RGB2HSV)\n                        h[:, :, 2] = final_feed\n                        h = cv2.cvtColor(h, cv2.COLOR_HSV2RGB)\n                        h = (h.astype(np.float32) / 255.0).transpose((2, 0, 1))\n                        y = torch.from_numpy(h).clip(0, 1).to(x)\n                        return y\n\n                    post_processors.append(recolor_intensity_post_processing)\n\n            if '+lama' in unit.module:\n                forward_param.used_hint_cond_latent = hook.UnetHook.call_vae_using_process(p, control)\n                self.noise_modifier = forward_param.used_hint_cond_latent\n\n            del model_net\n\n        is_low_vram = any(unit.low_vram for unit in self.enabled_units)\n\n        for i, param in enumerate(forward_params):\n            if param.control_model_type == ControlModelType.IPAdapter:\n                param.control_model.hook(\n                    model=unet,\n                    preprocessor_outputs=param.hint_cond,\n                    weight=param.weight,\n                    dtype=torch.float32,\n                    start=param.start_guidance_percent,\n                    end=param.stop_guidance_percent\n                )\n            if param.control_model_type == ControlModelType.Controlllite:\n                param.control_model.hook(\n                    model=unet,\n                    cond=param.hint_cond,\n                    weight=param.weight,\n                    start=param.start_guidance_percent,\n                    end=param.stop_guidance_percent\n                )\n            if param.control_model_type == ControlModelType.InstantID:\n                # For instant_id we always expect ip-adapter model followed\n                # by ControlNet model.\n                assert i > 0, \"InstantID control model should follow ipadapter model.\"\n                ip_adapter_param = forward_params[i - 1]\n                assert ip_adapter_param.control_model_type == ControlModelType.IPAdapter, \\\n                        \"InstantID control model should follow ipadapter model.\"\n                control_model = ip_adapter_param.control_model\n                assert hasattr(control_model, \"image_emb\")\n                param.control_context_override = control_model.image_emb\n\n        self.latest_network = UnetHook(lowvram=is_low_vram)\n        self.latest_network.hook(model=unet, sd_ldm=sd_ldm, control_params=forward_params, process=p,\n                                 batch_option_uint_separate=batch_option_uint_separate,\n                                 batch_option_style_align=batch_option_style_align)\n\n        self.detected_map = detected_maps\n        self.post_processors = post_processors\n\n    def controlnet_hack(self, p):\n        t = time.time()\n        if getattr(shared.cmd_opts, 'controlnet_tracemalloc', False):\n            tracemalloc.start()\n            setattr(self, \"malloc_begin\", tracemalloc.take_snapshot())\n\n        self.controlnet_main_entry(p)\n        if getattr(shared.cmd_opts, 'controlnet_tracemalloc', False):\n            logger.info(\"After hook malloc:\")\n            for stat in tracemalloc.take_snapshot().compare_to(self.malloc_begin, \"lineno\")[:10]:\n                logger.info(stat)\n\n        if len(self.enabled_units) > 0:\n            logger.info(f'ControlNet Hooked - Time = {time.time() - t}')\n\n    @staticmethod\n    def process_has_sdxl_refiner(p):\n        return getattr(p, 'refiner_checkpoint', None) is not None\n\n    def process(self, p, *args, **kwargs):\n        if not Script.process_has_sdxl_refiner(p):\n            self.controlnet_hack(p)\n        return\n\n    def before_process_batch(self, p, *args, **kwargs):\n        if self.noise_modifier is not None:\n            p.rng = HackedImageRNG(rng=p.rng,\n                                   noise_modifier=self.noise_modifier,\n                                   sd_model=p.sd_model)\n        self.noise_modifier = None\n        if Script.process_has_sdxl_refiner(p):\n            self.controlnet_hack(p)\n        return\n\n    def postprocess_batch(self, p, *args, **kwargs):\n        images = kwargs.get('images', [])\n        for post_processor in self.post_processors:\n            for i in range(len(images)):\n                images[i] = post_processor(images[i])\n        return\n\n    def postprocess(self, p, processed, *args):\n        sd_ldm = p.sd_model\n        unet = sd_ldm.model.diffusion_model\n\n        clear_all_secondary_control_models(unet)\n\n        self.noise_modifier = None\n\n        for control_lora in getattr(p, 'controlnet_control_loras', []):\n            unbind_control_lora(control_lora)\n        p.controlnet_control_loras = []\n\n        self.post_processors = []\n        setattr(p, 'controlnet_vae_cache', None)\n\n        processor_params_flag = (', '.join(getattr(processed, 'extra_generation_params', []))).lower()\n        self.post_processors = []\n\n        if not batch_hijack.instance.is_batch:\n            self.enabled_units.clear()\n\n        if shared.opts.data.get(\"control_net_detectmap_autosaving\", False) and self.latest_network is not None:\n            for detect_map, module in self.detected_map:\n                detectmap_dir = os.path.join(shared.opts.data.get(\"control_net_detectedmap_dir\", \"\"), module)\n                if not os.path.isabs(detectmap_dir):\n                    detectmap_dir = os.path.join(p.outpath_samples, detectmap_dir)\n                if module != \"none\":\n                    os.makedirs(detectmap_dir, exist_ok=True)\n                    img = Image.fromarray(np.ascontiguousarray(detect_map.clip(0, 255).astype(np.uint8)).copy())\n                    save_image(img, detectmap_dir, module)\n\n        if self.latest_network is None:\n            return\n\n        if not batch_hijack.instance.is_batch:\n            if not shared.opts.data.get(\"control_net_no_detectmap\", False):\n                if 'sd upscale' not in processor_params_flag:\n                    if self.detected_map is not None:\n                        for detect_map, module in self.detected_map:\n                            if detect_map is None:\n                                continue\n                            detect_map = np.ascontiguousarray(detect_map.copy()).copy()\n                            detect_map = external_code.visualize_inpaint_mask(detect_map)\n                            processed.images.extend([\n                                Image.fromarray(\n                                    detect_map.clip(0, 255).astype(np.uint8)\n                                )\n                            ])\n\n        self.input_image = None\n        self.latest_network.restore()\n        self.latest_network = None\n        self.detected_map.clear()\n\n        gc.collect()\n        devices.torch_gc()\n        if getattr(shared.cmd_opts, 'controlnet_tracemalloc', False):\n            logger.info(\"After generation:\")\n            for stat in tracemalloc.take_snapshot().compare_to(self.malloc_begin, \"lineno\")[:10]:\n                logger.info(stat)\n            tracemalloc.stop()\n\n    def batch_tab_process(self, p, batches, *args, **kwargs):\n        self.enabled_units = Script.get_enabled_units(p)\n        for unit_i, unit in enumerate(self.enabled_units):\n            unit.batch_images = iter([batch[unit_i] for batch in batches])\n\n    def batch_tab_process_each(self, p, *args, **kwargs):\n        for unit_i, unit in enumerate(self.enabled_units):\n            if getattr(unit, 'loopback', False) and batch_hijack.instance.batch_index > 0: continue\n\n            unit.image = next(unit.batch_images)\n\n    def batch_tab_postprocess_each(self, p, processed, *args, **kwargs):\n        for unit_i, unit in enumerate(self.enabled_units):\n            if getattr(unit, 'loopback', False):\n                output_images = getattr(processed, 'images', [])[processed.index_of_first_image:]\n                if output_images:\n                    unit.image = np.array(output_images[0])\n                else:\n                    logger.warning(f'Warning: No loopback image found for controlnet unit {unit_i}. Using control map from last batch iteration instead')\n\n    def batch_tab_postprocess(self, p, *args, **kwargs):\n        self.enabled_units.clear()\n        self.input_image = None\n        if self.latest_network is None: return\n\n        self.latest_network.restore()\n        self.latest_network = None\n        self.detected_map.clear()\n\n\ndef on_ui_settings():\n    section = ('control_net', \"ControlNet\")\n    shared.opts.add_option(\"control_net_detectedmap_dir\", shared.OptionInfo(\n        global_state.default_detectedmap_dir, \"Directory for detected maps auto saving\", section=section))\n    shared.opts.add_option(\"control_net_models_path\", shared.OptionInfo(\n        \"\", \"Extra path to scan for ControlNet models (e.g. training output directory)\", section=section))\n    shared.opts.add_option(\"control_net_modules_path\", shared.OptionInfo(\n        \"\", \"Path to directory containing annotator model directories (requires restart, overrides corresponding command line flag)\", section=section))\n    shared.opts.add_option(\"control_net_unit_count\", shared.OptionInfo(\n        3, \"Multi-ControlNet: ControlNet unit number (requires restart)\", gr.Slider, {\"minimum\": 1, \"maximum\": 10, \"step\": 1}, section=section))\n    shared.opts.add_option(\"control_net_model_cache_size\", shared.OptionInfo(\n        2, \"Model cache size (requires restart)\", gr.Slider, {\"minimum\": 1, \"maximum\": 10, \"step\": 1}, section=section))\n    shared.opts.add_option(\"control_net_inpaint_blur_sigma\", shared.OptionInfo(\n        7, \"ControlNet inpainting Gaussian blur sigma\", gr.Slider, {\"minimum\": 0, \"maximum\": 64, \"step\": 1}, section=section))\n    shared.opts.add_option(\"control_net_no_detectmap\", shared.OptionInfo(\n        False, \"Do not append detectmap to output\", gr.Checkbox, {\"interactive\": True}, section=section))\n    shared.opts.add_option(\"control_net_detectmap_autosaving\", shared.OptionInfo(\n        False, \"Allow detectmap auto saving\", gr.Checkbox, {\"interactive\": True}, section=section))\n    shared.opts.add_option(\"control_net_allow_script_control\", shared.OptionInfo(\n        False, \"Allow other script to control this extension\", gr.Checkbox, {\"interactive\": True}, section=section))\n    shared.opts.add_option(\"control_net_sync_field_args\", shared.OptionInfo(\n        True, \"Paste ControlNet parameters in infotext\", gr.Checkbox, {\"interactive\": True}, section=section))\n    shared.opts.add_option(\"controlnet_show_batch_images_in_ui\", shared.OptionInfo(\n        False, \"Show batch images in gradio gallery output\", gr.Checkbox, {\"interactive\": True}, section=section))\n    shared.opts.add_option(\"controlnet_increment_seed_during_batch\", shared.OptionInfo(\n        False, \"Increment seed after each controlnet batch iteration\", gr.Checkbox, {\"interactive\": True}, section=section))\n    shared.opts.add_option(\"controlnet_disable_openpose_edit\", shared.OptionInfo(\n        False, \"Disable openpose edit\", gr.Checkbox, {\"interactive\": True}, section=section))\n    shared.opts.add_option(\"controlnet_disable_photopea_edit\", shared.OptionInfo(\n        False, \"Disable photopea edit\", gr.Checkbox, {\"interactive\": True}, section=section))\n    shared.opts.add_option(\"controlnet_photopea_warning\", shared.OptionInfo(\n        True, \"Photopea popup warning\", gr.Checkbox, {\"interactive\": True}, section=section))\n    shared.opts.add_option(\"controlnet_ignore_noninpaint_mask\", shared.OptionInfo(\n        False, \"Ignore mask on ControlNet input image if control type is not inpaint\",\n        gr.Checkbox, {\"interactive\": True}, section=section))\n    shared.opts.add_option(\"controlnet_clip_detector_on_cpu\", shared.OptionInfo(\n        False, \"Load CLIP preprocessor model on CPU\",\n        gr.Checkbox, {\"interactive\": True}, section=section))\n\n\nbatch_hijack.instance.do_hijack()\nscript_callbacks.on_ui_settings(on_ui_settings)\nscript_callbacks.on_infotext_pasted(Infotext.on_infotext_pasted)\nscript_callbacks.on_after_component(ControlNetUiGroup.on_after_component)\nscript_callbacks.on_before_reload(ControlNetUiGroup.reset)"
        },
        {
          "name": "modules.zip",
          "type": "blob",
          "size": 1425.1904296875,
          "content": null
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.1806640625,
          "content": "{\n  \"name\": \"stable-diffusion-webui\",\n  \"version\": \"0.0.0\",\n  \"devDependencies\": {\n    \"eslint\": \"^8.40.0\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint .\",\n    \"fix\": \"eslint --fix .\"\n  }\n}\n"
        },
        {
          "name": "params.txt",
          "type": "blob",
          "size": 0.2060546875,
          "content": "cat <lora:more_details:5>\nSteps: 50, Sampler: Euler, CFG scale: 7.0, Seed: 803715625, Size: 512x512, Model hash: 6ce0161689, Model: v1-5-pruned-emaonly, Lora hashes: \"more_details: 3b8aa1d351ef\", Version: v1.7.0"
        },
        {
          "name": "predict.py",
          "type": "blob",
          "size": 30.505859375,
          "content": "\nfrom modules import timer\nfrom modules import initialize_util\nfrom modules import initialize\nfrom modules.tiling.img_utils import convert_pil_img_to_binary, \\\n                                    convert_binary_img_to_pil, \\\n                                    convert_pil_img_to_base64, \\\n                                    convert_base64_img_to_pil, \\\n                                    shift_image, \\\n                                    draw_center_cross_image\nfrom modules.debugging.debug_image import debug_tiling_image, \\\n                                          expand_canvas_tiling, \\\n                                          save_output_img\nfrom handfix.handfix import (detect_and_crop_hand_from_binary, insert_cropped_hand_into_image)\nfrom urllib.parse import urlparse\nfrom fastapi import FastAPI\nfrom io import BytesIO\nfrom PIL import Image, ImageFilter\n\nimport os, json\nimport numpy as np\nimport requests\nimport base64\nimport uuid\nimport time\nimport cv2\nimport mimetypes\nimport subprocess\n\nfrom cog import BasePredictor, Input, Path\n\nmimetypes.add_type(\"image/webp\", \".webp\")\n\n# Fixing the \"DecompressionBombWarning\" warning\nImage.MAX_IMAGE_PIXELS = None\n\nclass Predictor(BasePredictor):\n    def setup(self) -> None:\n        \"\"\"Load the model into memory to make running multiple predictions efficient\"\"\"\n\n        os.environ['IGNORE_CMD_ARGS_ERRORS'] = '1'\n\n        startup_timer = timer.startup_timer\n        startup_timer.record(\"launcher\")\n\n        initialize.imports()\n        initialize.check_versions()\n        initialize.initialize()\n\n        app = FastAPI()\n        initialize_util.setup_middleware(app)\n\n        from modules.api.api import Api\n        from modules.call_queue import queue_lock\n\n        self.api = Api(app, queue_lock)\n\n        model_response = self.api.get_sd_models()\n        print(\"Available checkpoints: \", str(model_response))\n\n        from modules import script_callbacks\n        script_callbacks.before_ui_callback()\n        script_callbacks.app_started_callback(None, app)\n\n        from modules.api.models import StableDiffusionImg2ImgProcessingAPI\n        self.StableDiffusionImg2ImgProcessingAPI = StableDiffusionImg2ImgProcessingAPI\n\n        file_path = Path(\"init.png\")\n        base64_encoded_data = base64.b64encode(file_path.read_bytes())\n        base64_image = base64_encoded_data.decode('utf-8')\n\n        payload = {\n           \"override_settings\": {\n                \"sd_model_checkpoint\": \"juggernaut_reborn.safetensors\",\n                \"sd_vae\": \"vae-ft-mse-840000-ema-pruned.safetensors\",\n                 \"CLIP_stop_at_last_layers\": 1,\n            },\n            \"override_settings_restore_afterwards\": False,\n            \"prompt\": \"office building\",\n            \"steps\": 1,\n            \"init_images\": [base64_image],\n            \"denoising_strength\": 0.1,\n            \"do_not_save_samples\": True,\n            \"alwayson_scripts\": {\n                \"Tiled Diffusion\": {\n                    \"args\": [\n                        True,\n                        \"MultiDiffusion\",\n                        True,\n                        True,\n                        1,\n                        1,\n                        112,\n                        144,\n                        4,\n                        8,\n                        \"4x-UltraSharp\",\n                        1.1,\n                        False,\n                        0,\n                        0.0,\n                        3,\n                    ]\n                },\n                \"Tiled VAE\": {\n                    \"args\": [\n                        True,\n                        3072,\n                        192,\n                        True,\n                        True,\n                        True,\n                        True,\n                    ]\n\n                },\n                \"controlnet\": {\n                    \"args\": [\n                        {\n                            \"enabled\": True,\n                            \"module\": \"tile_resample\",\n                            \"model\": \"control_v11f1e_sd15_tile\",\n                            \"weight\": 0.2,\n                            \"image\": base64_image,\n                            \"resize_mode\": 1,\n                            \"lowvram\": False,\n                            \"downsample\": 1.0,\n                            \"guidance_start\": 0.0,\n                            \"guidance_end\": 1.0,\n                            \"control_mode\": 1,\n                            \"pixel_perfect\": True,\n                            \"threshold_a\": 1,\n                            \"threshold_b\": 1,\n                            \"save_detected_map\": False,\n                            \"processor_res\": 512,\n                        }\n                    ]\n                }\n            }\n        }\n\n        req = StableDiffusionImg2ImgProcessingAPI(**payload)\n        self.api.img2imgapi(req)\n\n        print(f\"Startup time: {startup_timer.summary()}.\")\n\n    def download_lora_weights(self, url: str):\n        folder_path = \"models/Lora\"\n\n        parsed_url = urlparse(url)\n        filename = os.path.basename(parsed_url.path)\n\n        if \"civitai.com\" in parsed_url.netloc:\n            filename = f\"{os.path.basename(parsed_url.path)}.safetensors\"\n\n        os.makedirs(folder_path, exist_ok=True)\n\n        file_path = os.path.join(folder_path, filename)\n\n        response = requests.get(url)\n        response.raise_for_status()\n\n        with open(file_path, \"wb\") as file:\n            file.write(response.content)\n\n        print(\"Lora saved under:\", file_path)\n        return file_path\n\n    def download_safetensors(self, url: str):\n        start_time_custom = time.time()\n\n        safetensors_path = f\"models/Stable-diffusion/custom-{uuid.uuid1()}.safetensors\"\n\n        subprocess.check_output([\"pget\", url, safetensors_path])\n\n        print(f\"Checkpoint downloading with pget took {round(time.time() - start_time_custom, 2)} seconds\")\n\n        return safetensors_path\n\n    def calc_scale_factors(self, value):\n        lst = []\n        while value >= 2:\n            lst.append(2)\n            value /= 2\n        if value > 1:\n            lst.append(value)\n        return lst\n\n    def predict(\n        self,\n        image: Path = Input(description=\"input image\"),\n        prompt: str = Input(description=\"Prompt\", default=\"masterpiece, best quality, highres, <lora:more_details:0.5> <lora:SDXLrender_v2.0:1>\"),\n        negative_prompt: str = Input(description=\"Negative Prompt\", default=\"(worst quality, low quality, normal quality:2) JuggernautNegative-neg\"),\n        scale_factor: float = Input(\n            description=\"Scale factor\", default=2\n        ),\n        dynamic: float = Input(\n            description=\"HDR, try from 3 - 9\", ge=1, le=50, default=6\n        ),\n        creativity: float = Input(\n            description=\"Creativity, try from 0.3 - 0.9\", ge=0, le=1, default=0.35\n        ),\n        resemblance: float = Input(\n            description=\"Resemblance, try from 0.3 - 1.6\", ge=0, le=3, default=0.6\n        ),\n        tiling_width: int = Input(\n            description=\"Fractality, set lower tile width for a high Fractality\",\n            choices=[16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256],\n            default=112\n        ),\n        tiling_height: int = Input(\n            description=\"Fractality, set lower tile height for a high Fractality\",\n            choices=[16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256],\n            default=144\n        ),\n        sd_model: str = Input(\n            description=\"Stable Diffusion model checkpoint\",\n            choices=['epicrealism_naturalSinRC1VAE.safetensors [84d76a0328]', 'juggernaut_reborn.safetensors [338b85bc4f]', 'flat2DAnimerge_v45Sharp.safetensors'],\n            default=\"juggernaut_reborn.safetensors [338b85bc4f]\",\n        ),\n        scheduler: str = Input(\n            description=\"scheduler\",\n            choices=['DPM++ 2M Karras', 'DPM++ SDE Karras', 'DPM++ 2M SDE Exponential', 'DPM++ 2M SDE Karras', 'Euler a', 'Euler', 'LMS', 'Heun', 'DPM2', 'DPM2 a', 'DPM++ 2S a', 'DPM++ 2M', 'DPM++ SDE', 'DPM++ 2M SDE', 'DPM++ 2M SDE Heun', 'DPM++ 2M SDE Heun Karras', 'DPM++ 2M SDE Heun Exponential', 'DPM++ 3M SDE', 'DPM++ 3M SDE Karras', 'DPM++ 3M SDE Exponential', 'DPM fast', 'DPM adaptive', 'LMS Karras', 'DPM2 Karras', 'DPM2 a Karras', 'DPM++ 2S a Karras', 'Restart', 'DDIM', 'PLMS', 'UniPC'],\n            default=\"DPM++ 3M SDE Karras\",\n        ),\n        num_inference_steps: int = Input(\n            description=\"Number of denoising steps\", ge=1, le=100, default=18\n        ),\n        seed: int = Input(\n            description=\"Random seed. Leave blank to randomize the seed\", default=1337\n        ),\n        multistep_factor: float = Input(\n            description=\"Multiplier for the number of denoising steps. 0.9 for 90% less steps, 1.1 for 10% more steps\", ge=0, le=2, default=0.8\n        ),\n        downscaling: bool = Input(\n            description=\"Downscale the image before upscaling. Can improve quality and speed for images with high resolution but lower quality\", default=False\n        ),\n        downscaling_resolution: int = Input(\n            description=\"Downscaling resolution\", default=768\n        ),\n        lora_links: str = Input(\n            description=\"Link to a lora file you want to use in your upscaling. Multiple links possible, seperated by comma\",\n            default=\"\"\n        ),\n        custom_sd_model: str = Input(\n            default=\"\"\n        ),\n        sharpen: float = Input(\n            description=\"Sharpen the image after upscaling. The higher the value, the more sharpening is applied. 0 for no sharpening\", ge=0, le=10, default=0\n        ),\n        mask: Path = Input(\n            description=\"Mask image to mark areas that should be preserved during upscaling\", default=None\n        ),\n        handfix: str = Input(\n            description=\"Use clarity to fix hands in the image\",\n            choices=['disabled', 'hands_only', 'image_and_hands'],\n            default=\"disabled\",\n        ),\n        pattern: bool = Input(\n            description=\"Upscale a pattern with seamless tiling\",\n            default=False,\n        ),\n        output_format: str = Input(\n            description=\"Format of the output images\",\n            choices=[\"webp\", \"jpg\", \"png\"],\n            default=\"png\",\n        )\n    ) -> list[Path]:\n        \"\"\"Run a single prediction on the model\"\"\"\n        print(\"Running prediction\")\n        start_time = time.time()\n\n        outputs = [] ## init at the start so we can grab the initial image wrangling for debugging\n\n        # checkpoint name changed bc hashing is deactivated so name is corrected here to old name to avoid breaking api calls\n        if sd_model == \"epicrealism_naturalSinRC1VAE.safetensors [84d76a0328]\":\n            sd_model = \"epicrealism_naturalSinRC1VAE.safetensors\"\n        if sd_model == \"juggernaut_reborn.safetensors [338b85bc4f]\":\n            sd_model = \"juggernaut_reborn.safetensors\"\n\n        if lora_links:\n            lora_link = [link.strip() for link in lora_links.split(\",\")]\n            for link in lora_link:\n                self.download_lora_weights(link)\n\n        if custom_sd_model:\n            path_to_custom_checkpoint = self.download_safetensors(custom_sd_model)\n            sd_model = os.path.basename(path_to_custom_checkpoint)\n            self.api.refresh_checkpoints()\n\n        image_file_path = image\n\n        with open(image_file_path, \"rb\") as image_file:\n            binary_image_data = image_file.read()\n\n        if mask:\n            with Image.open(image_file_path) as img:\n                original_resolution = img.size\n\n        if downscaling:\n            image_np_array = np.frombuffer(binary_image_data, dtype=np.uint8)\n\n            image = cv2.imdecode(image_np_array, cv2.IMREAD_UNCHANGED)\n\n            height, width = image.shape[:2]\n\n            if height > width:\n                scaling_factor = downscaling_resolution / float(height)\n            else:\n                scaling_factor = downscaling_resolution / float(width)\n\n            new_width = int(width * scaling_factor)\n            new_height = int(height * scaling_factor)\n\n            resized_image = cv2.resize(image, (new_width, new_height))\n\n            _, binary_resized_image = cv2.imencode('.jpg', resized_image)\n            binary_image_data = binary_resized_image.tobytes()\n\n        if handfix == \"hands_only\":\n            print(\"Trying to fix hands\")\n            binary_image_data_full_image = binary_image_data\n            cropped_hand_img, hand_coords = detect_and_crop_hand_from_binary(binary_image_data_full_image)\n            if cropped_hand_img is not None:\n                print(\"Hands detected\")\n                _, buffer = cv2.imencode('.jpg', cropped_hand_img)\n                binary_image_data = buffer.tobytes()\n\n                cropped_hand_img_rgb = cv2.cvtColor(cropped_hand_img, cv2.COLOR_BGR2RGB)\n                cropped_hand_img_pil = Image.fromarray(cropped_hand_img_rgb)\n\n            else:\n                print(\"No hands detected\")\n                return\n\n        base64_encoded_data = base64.b64encode(binary_image_data)\n        base64_image = base64_encoded_data.decode('utf-8')\n\n        multipliers = [scale_factor]\n        if scale_factor > 2:\n            multipliers = self.calc_scale_factors(scale_factor)\n            print(\"Upscale your image \" + str(len(multipliers)) + \" times\")\n\n        first_iteration = True\n\n        for i, multiplier in enumerate(multipliers):\n            print(\"Upscaling with scale_factor: \", multiplier)\n\n            if not first_iteration:\n                creativity = creativity * multistep_factor\n                seed = seed +1\n\n            first_iteration = False\n\n            if pattern:\n                print('--- preparing seamless tiling process')\n                init_img = convert_base64_img_to_pil(base64_image)\n                ## now lets expand the canvas.\n                expanded_img = expand_canvas_tiling(init_img, div=8, darken=False)\n\n                ## now update the original base64 image data.\n                base64_image = convert_pil_img_to_base64(expanded_img)\n\n                # seamless_tiling_debug_mode = False\n                # if seamless_tiling_debug_mode:\n                #     ## and here we save the outputs\n                #     out1 = save_output_img(init_img,\n                #                            f\"010_init_img.{output_format}\",\n                #                            info_text=\"1. initial image\")\n                #     out2 = save_output_img(expanded_img,\n                #                            f\"020_expanded.{output_format}\",\n                #                            info_text=\"2. expanded canvas\")\n                #     outputs += [out1, out2]\n\n            payload = get_clarity_upscaler_payload(sd_model, tiling_width, tiling_height, multiplier, base64_image,\n                                resemblance, prompt, negative_prompt, num_inference_steps, dynamic, seed, scheduler,\n                                creativity)\n\n            req = self.StableDiffusionImg2ImgProcessingAPI(**payload)\n            resp = self.api.img2imgapi(req)\n            info = json.loads(resp.info)\n\n            base64_image = resp.images[0]\n\n            if pattern:\n                print('--- starting seamless tiling process')\n                image_data = base64.b64decode(base64_image)\n                upscaled_img = Image.open(BytesIO(image_data))\n\n                ## crop back\n                width = upscaled_img.width\n                height = upscaled_img.height\n                border_size = int(width / 10)\n                cropped_back = upscaled_img.crop((border_size, border_size, width - border_size, height - border_size))\n\n                ## now lets create a final debug tile.\n                # debug_tiling_A = debug_tiling_image(cropped_back)\n\n                ## now lets shift the pixels 50% to get the seam in the middle\n                shift_x = cropped_back.width // 2\n                shift_y = cropped_back.height // 2\n                seamless_tiling_overlap_width = 1.0\n                seamless_tiling_overlap_blur = 1.0\n                shifted_img_A = shift_image(cropped_back, shift_x, shift_y)\n                shifted_img_A_base64 = convert_pil_img_to_base64(shifted_img_A)\n                inpaint_mask_A_base64, inpaint_mask_A = get_seamless_tiling_mask(shifted_img_A_base64,\n                                                                        seamless_tiling_overlap_width,\n                                                                        seamless_tiling_overlap_blur)\n                ## get payload to do API inpainting\n                payload = get_clarity_upscaler_payload(sd_model, tiling_width, tiling_height, multiplier,\n                                                    shifted_img_A_base64,\n                                                    resemblance, prompt, negative_prompt, num_inference_steps,\n                                                    dynamic, seed, scheduler, creativity,\n                                                    seamfix_mask=inpaint_mask_A_base64)\n                req = self.StableDiffusionImg2ImgProcessingAPI(**payload)\n                resp = self.api.img2imgapi(req)\n                info = json.loads(resp.info)\n\n                ## now we have our resulting image\n                base64_image = resp.images[0]\n                gen_bytes = BytesIO(base64.b64decode(base64_image))\n                seam_fix_A = Image.open(gen_bytes)\n\n                ## we can shift the pixels back to their original place\n                shiftback_img_A = shift_image(seam_fix_A, -shift_x, -shift_y)\n                #shiftback_img_A.save(optimised_file_path)  ### overwrite the final output with the shiftedback image\n\n                ## now lets create a final debug tile.\n                # debug_tiling_B = debug_tiling_image(shiftback_img_A)\n\n                ## here lets do one more pass, as our cross mask will have never repainted\n                ## the outer edges of our image.. so we going to offset the pixels 33% and\n                ## do another round of inpainting.\n                shift_x = shiftback_img_A.width // 3\n                shift_y = shiftback_img_A.height // 3\n                shifted_img_B = shift_image(shiftback_img_A, shift_x, shift_y)\n                shifted_img_B_base64 = convert_pil_img_to_base64(shifted_img_B)\n\n                ## calculate how much to offset the inpaint mask at 33%\n                fourth = (shifted_img_B.width // 4)\n                third = (shifted_img_B.width // 3)\n                fraction = (shifted_img_B.width // 20)\n                offset_x =  (fourth + fourth) - (third + third)\n                offset_y =  (fourth + fourth) - (third + third)\n\n                ## now draw the offset cross image\n                inpaint_mask_B_base64, inpaint_mask_B = get_seamless_tiling_mask(shifted_img_B_base64,\n                                                                        seamless_tiling_overlap_width,\n                                                                        seamless_tiling_overlap_blur * 1.2,\n                                                                        offset_x=offset_x,\n                                                                        offset_y=offset_y,\n                                                                        x_start=fourth+fourth+third-fraction,\n                                                                        x_end=fourth+fourth+third+fraction,\n                                                                        y_start=fourth+fourth+third-fraction,\n                                                                        y_end=fourth+fourth+third+fraction,\n                                                                        boost=False)\n\n                ## now we can finally do our last inpainting call.\n                ## let's drop the creativity way down, and push the resemblance up.\n                payload = get_clarity_upscaler_payload(sd_model, tiling_width, tiling_height, multiplier,\n                                                    shifted_img_B_base64,\n                                                    1.0, prompt, negative_prompt, num_inference_steps,\n                                                    dynamic, seed, scheduler, 0.35,\n                                                    seamfix_mask=inpaint_mask_B_base64)\n\n                req = self.StableDiffusionImg2ImgProcessingAPI(**payload)\n                resp = self.api.img2imgapi(req)\n                info = json.loads(resp.info)\n\n                ## so here we should get our result..\n                base64_image = resp.images[0]\n                gen_bytes = BytesIO(base64.b64decode(base64_image))\n                seam_fix_B = Image.open(gen_bytes)\n\n                ## now lets shift the image back again\n                shiftback_img_B = shift_image(seam_fix_B, -shift_x, -shift_y)\n               \n                buffered = BytesIO()\n                shiftback_img_B.save(buffered, format=\"PNG\")\n                base64_image = base64.b64encode(buffered.getvalue()).decode(\"utf-8\")\n\n                resp.images[0] = base64_image\n\n                # debug_tiling_C = debug_tiling_image(shiftback_img_B)\n                # output_tiling = expand_canvas_tiling(shiftback_img_B, div=1, darken=False)\n\n                # if seamless_tiling_debug_mode:\n                #     out3 = save_output_img(upscaled_img,\n                #                             f\"030_upscaled.{output_format}\",\n                #                             info_text=\"3. upscaled (canvas expanded)\")\n                #     out4 = save_output_img(cropped_back,\n                #                             f\"040_cropped_back.{output_format}\",\n                #                             info_text=\"4. upscaled (cropped back)\")\n                #     out5 = save_output_img(debug_tiling_A,\n                #                             f'050_debug_tile_not_fixed.{output_format}',\n                #                             info_text=\"5. tiling debug (before fix)\")\n                #     out6 = save_output_img(shifted_img_A,\n                #                             f'060_shifted_center.{output_format}',\n                #                             info_text=\"6. center seam (shifted 50%)\")\n                #     out7 = save_output_img(inpaint_mask_A,\n                #                             f'070_inpaint_mask.{output_format}',\n                #                             '7. inpainting mask')\n                #     out8 = save_output_img(seam_fix_A,\n                #                             f'080_inpainted_seam_fix.{output_format}',\n                #                             info_text=\"8. seam fix 1\")\n                #     out9 = save_output_img(shiftback_img_A,\n                #                             f'090_shifted_back_fix.{output_format}',\n                #                             info_text=\"9. upscaled (shifted back 50%)\")\n                #     out10 = save_output_img(debug_tiling_B,\n                #                             f'100_debug_tile.{output_format}',\n                #                             info_text=\"10. tiling debug (after 1st fix)\")\n                #     out11 = save_output_img(shifted_img_B,\n                #                             f'110_shift_30pct.{output_format}',\n                #                             info_text=\"11. shift pixels 30%\")\n                #     out12 = save_output_img(inpaint_mask_B,\n                #                             f'120_inpaint_mask.{output_format}',\n                #                             '12. inpainting mask')\n                #     out13 = save_output_img(seam_fix_B,\n                #                             f'130_inpainted_seam_fix.{output_format}',\n                #                             info_text=\"13. seam fix 2 \")\n                #     out14 = save_output_img(shiftback_img_B,\n                #                             f\"140_shifted_back_fix.{output_format}\",\n                #                             info_text=\"14. upscaled (shifted back 30%)\")\n                #     out15 = save_output_img(debug_tiling_C,\n                #                             f'150_debug_tile.{output_format}',\n                #                             info_text=\"15. tiling debug (after 2nd fix)\")\n                #     out16 = save_output_img(output_tiling,\n                #                             f'160_resulting_tile.{output_format}',\n                #                             info_text=\"16. tiling result\")\n                #     outputs += [out3, out4, out5, out6, out7, out8, out9, out10, out11, out12, out13, out14, out15, out16]\n\n\n        for i, image in enumerate(resp.images):\n            seed = info.get(\"all_seeds\", [])[i] or \"unknown_seed\"\n\n            gen_bytes = BytesIO(base64.b64decode(image))\n            imageObject = Image.open(gen_bytes)\n\n            if handfix == \"hands_only\":\n                imageObject = insert_cropped_hand_into_image(binary_image_data_full_image, imageObject, hand_coords, cropped_hand_img_pil)\n\n            if mask:\n                imageObject = imageObject.resize(original_resolution, Image.LANCZOS)\n                original_image = Image.open(image_file_path).resize(original_resolution, Image.LANCZOS)\n                mask_image = Image.open(mask).convert(\"L\").resize(original_resolution, Image.LANCZOS)\n\n                blur_radius = 5\n                mask_image = mask_image.filter(ImageFilter.GaussianBlur(blur_radius))\n                combined_image = Image.composite(original_image, imageObject, mask_image)\n\n                imageObject = combined_image\n\n            if sharpen > 0:\n                a = -sharpen / 10\n                b = 1 - 8 * a\n                kernel = [a, a, a, a, b, a, a, a, a]\n                kernel_filter = ImageFilter.Kernel((3, 3), kernel, scale=1, offset=0)\n\n                imageObject = imageObject.filter(kernel_filter)\n\n            optimised_file_path = Path(f\"{seed}-{uuid.uuid1()}.{output_format}\")\n\n            if output_format in [\"webp\", \"jpg\"]:\n                imageObject.save(\n                    optimised_file_path,\n                    quality=95,\n                    optimize=True,\n                )\n            else:\n                imageObject.save(optimised_file_path)\n            \n            outputs.append(optimised_file_path)\n\n        if custom_sd_model:\n            os.remove(path_to_custom_checkpoint)\n            print(f\"Custom checkpoint {path_to_custom_checkpoint} has been removed.\")\n\n        print(f\"Prediction took {round(time.time() - start_time,2)} seconds\")\n        return outputs\n\ndef get_seamless_tiling_mask(base64_image, width_mult, blur_mult,\n                            offset_x=0, offset_y=0,\n                            x_start=0, x_end=0, y_start=0, y_end=0,\n                            boost=True):\n    gen_bytes = BytesIO(base64.b64decode(base64_image))\n    img = Image.open(gen_bytes)\n    mask_pil = draw_center_cross_image(img, thickness_mult=width_mult, blur_mult=blur_mult,\n                                    offset_x=offset_x, offset_y=offset_y,\n                                    x_start=x_start, x_end=x_end, y_start=y_start, y_end=y_end,\n                                    boost=boost)\n    mask_base64 = convert_pil_img_to_base64(mask_pil)\n\n    return mask_base64, mask_pil\n\ndef get_clarity_upscaler_payload(sd_model,\n                                tiling_width,\n                                tiling_height,\n                                multiplier,\n                                base64_image,\n                                resemblance,\n                                prompt,\n                                negative_prompt,\n                                num_inference_steps,\n                                dynamic,\n                                seed,\n                                scheduler,\n                                creativity,\n                                seamfix_mask=None):\n    if seamfix_mask:\n        multiplier = 1.0 ## set the multiplier to 1 as we're not upscaling in this round.\n\n    override_settings = {\n        \"sd_model_checkpoint\": sd_model,\n        \"sd_vae\": \"vae-ft-mse-840000-ema-pruned.safetensors\",\n        \"CLIP_stop_at_last_layers\": 1,\n    }\n    alwayson_scripts = {\n        \"Tiled Diffusion\": {\"args\": get_tiled_diffusion_args(tiling_width, tiling_height, multiplier)},\n        \"Tiled VAE\": {\"args\": get_tiled_vae_args()},\n        \"controlnet\": {\"args\": get_controlnet_args(base64_image, resemblance)}\n    }\n\n    if seamfix_mask:\n        payload_dict = {\n            \"override_settings\": override_settings,\n            \"override_settings_restore_afterwards\": False,\n            \"init_images\": [base64_image],\n            \"mask\": seamfix_mask,\n            \"mask_blur\": 0,\n            \"inpainting_fill\": 1,  ## [fill, original, latent noise, latent nothing]\n            \"inpaint_full_res\": True,\n            \"inpaint_full_res_padding\": 0,\n            \"inpainting_mask_invert\": 0,\n            \"include_init_images\": True,\n            \"prompt\": prompt,\n            \"negative_prompt\": negative_prompt,\n            \"steps\": num_inference_steps,\n            \"cfg_scale\": dynamic,\n            \"seed\": seed,\n            \"tiling\": True,\n            \"do_not_save_samples\": True,\n            \"sampler_name\": scheduler,\n            \"denoising_strength\": creativity,\n            \"alwayson_scripts\": alwayson_scripts,\n        }\n    else:\n        payload_dict = {\n            \"override_settings\": override_settings,\n            \"override_settings_restore_afterwards\": False,\n            \"init_images\": [base64_image],\n            \"prompt\": prompt,\n            \"negative_prompt\": negative_prompt,\n            \"steps\": num_inference_steps,\n            \"cfg_scale\": dynamic,\n            \"seed\": seed,\n            \"do_not_save_samples\": True,\n            \"sampler_name\": scheduler,\n            \"denoising_strength\": creativity,\n            \"alwayson_scripts\": alwayson_scripts,\n        }\n\n    return payload_dict\n\ndef get_tiled_diffusion_args(tiling_width, tiling_height, multiplier):\n    arg_list = [\n        True,\n        \"MultiDiffusion\",\n        True,\n        True,\n        1,\n        1,\n        tiling_width,\n        tiling_height,\n        4,\n        8,\n        \"4x-UltraSharp\",\n        multiplier,\n        False,\n        0,\n        0.0,\n        3,\n    ]\n\n    return arg_list\n\ndef get_tiled_vae_args():\n    arg_list =  [\n        True,\n        2048,\n        128,\n        True,\n        True,\n        True,\n        True,\n    ]\n    return arg_list\n\ndef get_controlnet_args(base64_image, resemblance):\n    arg_dict = {\n        \"enabled\": True,\n        \"module\": \"tile_resample\",\n        \"model\": \"control_v11f1e_sd15_tile\",\n        \"weight\": resemblance,\n        \"image\": base64_image,\n        \"resize_mode\": 1,\n        \"lowvram\": False,\n        \"downsample\": 1.0,\n        \"guidance_start\": 0.0,\n        \"guidance_end\": 1.0,\n        \"control_mode\": 1,\n        \"pixel_perfect\": True,\n        \"threshold_a\": 1,\n        \"threshold_b\": 1,\n        \"save_detected_map\": False,\n        \"processor_res\": 512,\n    }\n    arg_list = [arg_dict]\n\n    return arg_list\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.7939453125,
          "content": "[tool.ruff]\n\ntarget-version = \"py39\"\n\nextend-select = [\n  \"B\",\n  \"C\",\n  \"I\",\n  \"W\",\n]\n\nexclude = [\n\t\"extensions\",\n\t\"extensions-disabled\",\n]\n\nignore = [\n\t\"E501\", # Line too long\n\t\"E721\", # Do not compare types, use `isinstance`\n\t\"E731\", # Do not assign a `lambda` expression, use a `def`\n\t\n\t\"I001\", # Import block is un-sorted or un-formatted\n\t\"C901\", # Function is too complex\n\t\"C408\", # Rewrite as a literal\n\t\"W605\", # invalid escape sequence, messes with some docstrings\n]\n\n[tool.ruff.per-file-ignores]\n\"webui.py\" = [\"E402\"]  # Module level import not at top of file\n\n[tool.ruff.flake8-bugbear]\n# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.\nextend-immutable-calls = [\"fastapi.Depends\", \"fastapi.security.HTTPBasic\"]\n\n[tool.pytest.ini_options]\nbase_url = \"http://127.0.0.1:7860\"\n"
        },
        {
          "name": "request.json",
          "type": "blob",
          "size": 10.1796875,
          "content": "{\n  \"alwayson_scripts\": {\n    \"ADetailer\": {\n      \"args\": [\n        false,\n        false,\n        {\n          \"ad_cfg_scale\": 7,\n          \"ad_checkpoint\": \"Use same checkpoint\",\n          \"ad_clip_skip\": 1,\n          \"ad_confidence\": 0.3,\n          \"ad_controlnet_guidance_end\": 1,\n          \"ad_controlnet_guidance_start\": 0,\n          \"ad_controlnet_model\": \"None\",\n          \"ad_controlnet_module\": \"None\",\n          \"ad_controlnet_weight\": 1,\n          \"ad_denoising_strength\": 0.4,\n          \"ad_dilate_erode\": 4,\n          \"ad_inpaint_height\": 1024,\n          \"ad_inpaint_only_masked\": true,\n          \"ad_inpaint_only_masked_padding\": 32,\n          \"ad_inpaint_width\": 1024,\n          \"ad_mask_blur\": 4,\n          \"ad_mask_k_largest\": 0,\n          \"ad_mask_max_ratio\": 1,\n          \"ad_mask_merge_invert\": \"None\",\n          \"ad_mask_min_ratio\": 0,\n          \"ad_model\": \"face_yolov8n.pt\",\n          \"ad_negative_prompt\": \"\",\n          \"ad_noise_multiplier\": 1,\n          \"ad_prompt\": \"\",\n          \"ad_restore_face\": false,\n          \"ad_sampler\": \"Euler a\",\n          \"ad_steps\": 28,\n          \"ad_use_cfg_scale\": false,\n          \"ad_use_checkpoint\": false,\n          \"ad_use_clip_skip\": false,\n          \"ad_use_inpaint_width_height\": false,\n          \"ad_use_noise_multiplier\": false,\n          \"ad_use_sampler\": false,\n          \"ad_use_steps\": false,\n          \"ad_use_vae\": false,\n          \"ad_vae\": \"Use same VAE\",\n          \"ad_x_offset\": 0,\n          \"ad_y_offset\": 0,\n          \"is_api\": []\n        },\n        {\n          \"ad_cfg_scale\": 7,\n          \"ad_checkpoint\": \"Use same checkpoint\",\n          \"ad_clip_skip\": 1,\n          \"ad_confidence\": 0.3,\n          \"ad_controlnet_guidance_end\": 1,\n          \"ad_controlnet_guidance_start\": 0,\n          \"ad_controlnet_model\": \"None\",\n          \"ad_controlnet_module\": \"None\",\n          \"ad_controlnet_weight\": 1,\n          \"ad_denoising_strength\": 0.4,\n          \"ad_dilate_erode\": 4,\n          \"ad_inpaint_height\": 1024,\n          \"ad_inpaint_only_masked\": true,\n          \"ad_inpaint_only_masked_padding\": 32,\n          \"ad_inpaint_width\": 1024,\n          \"ad_mask_blur\": 4,\n          \"ad_mask_k_largest\": 0,\n          \"ad_mask_max_ratio\": 1,\n          \"ad_mask_merge_invert\": \"None\",\n          \"ad_mask_min_ratio\": 0,\n          \"ad_model\": \"None\",\n          \"ad_negative_prompt\": \"\",\n          \"ad_noise_multiplier\": 1,\n          \"ad_prompt\": \"\",\n          \"ad_restore_face\": false,\n          \"ad_sampler\": \"Euler a\",\n          \"ad_steps\": 28,\n          \"ad_use_cfg_scale\": false,\n          \"ad_use_checkpoint\": false,\n          \"ad_use_clip_skip\": false,\n          \"ad_use_inpaint_width_height\": false,\n          \"ad_use_noise_multiplier\": false,\n          \"ad_use_sampler\": false,\n          \"ad_use_steps\": false,\n          \"ad_use_vae\": false,\n          \"ad_vae\": \"Use same VAE\",\n          \"ad_x_offset\": 0,\n          \"ad_y_offset\": 0,\n          \"is_api\": []\n        }\n      ]\n    },\n    \"API payload\": { \"args\": [] },\n    \"Agent Scheduler\": { \"args\": [] },\n    \"AnimateDiff\": {\n      \"args\": [\n        {\n          \"batch_size\": 16,\n          \"closed_loop\": \"R-P\",\n          \"enable\": false,\n          \"format\": [\"GIF\", \"PNG\"],\n          \"fps\": 8,\n          \"interp\": \"Off\",\n          \"interp_x\": 10,\n          \"last_frame\": null,\n          \"latent_power\": 1,\n          \"latent_power_last\": 1,\n          \"latent_scale\": 32,\n          \"latent_scale_last\": 32,\n          \"loop_number\": 0,\n          \"model\": \"mm_sd_v15_v2.ckpt\",\n          \"overlap\": -1,\n          \"request_id\": \"\",\n          \"stride\": 1,\n          \"video_length\": 0,\n          \"video_path\": \"\",\n          \"video_source\": null\n        }\n      ]\n    },\n    \"ControlNet\": {\n      \"args\": [\n        {\n          \"batch_images\": \"\",\n          \"control_mode\": \"ControlNet is more important\",\n          \"enabled\": true,\n          \"guidance_end\": 1,\n          \"guidance_start\": 0,\n          \"image\": null,\n          \"input_mode\": \"simple\",\n          \"is_ui\": true,\n          \"loopback\": false,\n          \"low_vram\": false,\n          \"model\": \"control_v11f1e_sd15_tile [a371b31b]\",\n          \"module\": \"tile_resample\",\n          \"output_dir\": \"\",\n          \"pixel_perfect\": true,\n          \"processor_res\": -1,\n          \"resize_mode\": \"Crop and Resize\",\n          \"save_detected_map\": true,\n          \"threshold_a\": 1,\n          \"threshold_b\": -1,\n          \"weight\": 1\n        },\n        {\n          \"batch_images\": \"\",\n          \"control_mode\": \"Balanced\",\n          \"enabled\": false,\n          \"guidance_end\": 1,\n          \"guidance_start\": 0,\n          \"image\": null,\n          \"input_mode\": \"simple\",\n          \"is_ui\": true,\n          \"loopback\": false,\n          \"low_vram\": false,\n          \"model\": \"None\",\n          \"module\": \"none\",\n          \"output_dir\": \"\",\n          \"pixel_perfect\": false,\n          \"processor_res\": -1,\n          \"resize_mode\": \"Crop and Resize\",\n          \"save_detected_map\": true,\n          \"threshold_a\": -1,\n          \"threshold_b\": -1,\n          \"weight\": 1\n        },\n        {\n          \"batch_images\": \"\",\n          \"control_mode\": \"Balanced\",\n          \"enabled\": false,\n          \"guidance_end\": 1,\n          \"guidance_start\": 0,\n          \"image\": null,\n          \"input_mode\": \"simple\",\n          \"is_ui\": true,\n          \"loopback\": false,\n          \"low_vram\": false,\n          \"model\": \"None\",\n          \"module\": \"none\",\n          \"output_dir\": \"\",\n          \"pixel_perfect\": false,\n          \"processor_res\": -1,\n          \"resize_mode\": \"Crop and Resize\",\n          \"save_detected_map\": true,\n          \"threshold_a\": -1,\n          \"threshold_b\": -1,\n          \"weight\": 1\n        }\n      ]\n    },\n    \"Dynamic Prompts v2.17.1\": {\n      \"args\": [\n        true,\n        false,\n        1,\n        false,\n        false,\n        false,\n        1.1,\n        1.5,\n        100,\n        0.7,\n        false,\n        false,\n        true,\n        false,\n        false,\n        0,\n        \"Gustavosta/MagicPrompt-Stable-Diffusion\",\n        \"\"\n      ]\n    },\n    \"Extra options\": { \"args\": [] },\n    \"OpenPose Editor\": { \"args\": [] },\n    \"PBRemTools\": { \"args\": [] },\n    \"ReActor\": {\n      \"args\": [\n        null,\n        false,\n        \"0\",\n        \"0\",\n        \"inswapper_128_fp16.onnx\",\n        \"CodeFormer\",\n        1,\n        true,\n        \"None\",\n        1,\n        1,\n        false,\n        true,\n        1,\n        0,\n        0,\n        false,\n        0.5,\n        true,\n        false,\n        \"CUDA\",\n        false,\n        0,\n        \"None\"\n      ]\n    },\n    \"Refiner\": { \"args\": [false, \"\", 0.8] },\n    \"Regional Prompter\": {\n      \"args\": [\n        false,\n        false,\n        \"Matrix\",\n        \"Columns\",\n        \"Mask\",\n        \"Prompt\",\n        \"1,1\",\n        \"0.2\",\n        false,\n        false,\n        false,\n        \"Attention\",\n        [false],\n        \"0\",\n        \"0\",\n        \"0.4\",\n        null,\n        \"0\",\n        \"0\",\n        false\n      ]\n    },\n    \"Seed\": { \"args\": [1401, false, -1, 0, 0, 0] },\n    \"Segment Anything\": {\n      \"args\": [\n        false,\n        false,\n        0,\n        null,\n        [],\n        0,\n        false,\n        [],\n        [],\n        false,\n        0,\n        1,\n        false,\n        false,\n        0,\n        null,\n        [],\n        -2,\n        false,\n        [],\n        false,\n        0,\n        null,\n        null\n      ]\n    },\n    \"Tiled Diffusion\": {\n      \"args\": [\n        true,\n        \"MultiDiffusion\",\n        false,\n        true,\n        1024,\n        1024,\n        96,\n        96,\n        48,\n        8,\n        \"4x_foolhardy_Remacri\",\n        2,\n        false,\n        10,\n        1,\n        1,\n        64,\n        false,\n        false,\n        false,\n        false,\n        false,\n        0.4,\n        0.4,\n        0.2,\n        0.2,\n        \"\",\n        \"\",\n        \"Background\",\n        0.2,\n        -1.0,\n        false,\n        0.4,\n        0.4,\n        0.2,\n        0.2,\n        \"\",\n        \"\",\n        \"Background\",\n        0.2,\n        -1.0,\n        false,\n        0.4,\n        0.4,\n        0.2,\n        0.2,\n        \"\",\n        \"\",\n        \"Background\",\n        0.2,\n        -1.0,\n        false,\n        0.4,\n        0.4,\n        0.2,\n        0.2,\n        \"\",\n        \"\",\n        \"Background\",\n        0.2,\n        -1.0,\n        false,\n        0.4,\n        0.4,\n        0.2,\n        0.2,\n        \"\",\n        \"\",\n        \"Background\",\n        0.2,\n        -1.0,\n        false,\n        0.4,\n        0.4,\n        0.2,\n        0.2,\n        \"\",\n        \"\",\n        \"Background\",\n        0.2,\n        -1.0,\n        false,\n        0.4,\n        0.4,\n        0.2,\n        0.2,\n        \"\",\n        \"\",\n        \"Background\",\n        0.2,\n        -1.0,\n        false,\n        0.4,\n        0.4,\n        0.2,\n        0.2,\n        \"\",\n        \"\",\n        \"Background\",\n        0.2,\n        -1.0\n      ]\n    },\n    \"Tiled VAE\": { \"args\": [true, 3072, 192, true, true, true, true] }\n  },\n  \"batch_size\": 1,\n  \"cfg_scale\": 8,\n  \"comments\": {},\n  \"denoising_strength\": 0.45,\n  \"disable_extra_networks\": false,\n  \"do_not_save_grid\": false,\n  \"do_not_save_samples\": false,\n  \"height\": 816,\n  \"image_cfg_scale\": 1.5,\n  \"init_images\": [\"base64image placeholder\"],\n  \"initial_noise_multiplier\": 1.0,\n  \"inpaint_full_res\": 0,\n  \"inpaint_full_res_padding\": 32,\n  \"inpainting_fill\": 1,\n  \"inpainting_mask_invert\": 0,\n  \"mask_blur\": 4,\n  \"mask_blur_x\": 4,\n  \"mask_blur_y\": 4,\n  \"n_iter\": 1,\n  \"negative_prompt\": \"(deformed iris, deformed pupils, semi-realistic, cgi, 3d, render, sketch, cartoon, drawing, anime, mutated hands and fingers:1.4), (deformed, distorted, disfigured:1.3), poorly drawn, bad anatomy, wrong anatomy, extra limb, missing limb, floating limbs, disconnected limbs, mutation, mutated, ugly, disgusting, amputation,\",\n  \"override_settings\": {},\n  \"override_settings_restore_afterwards\": true,\n  \"prompt\": \"highres, masterpiece, best quality, ultra-detailed unity 8k wallpaper, extremely clear, very clear, ultra-clear \",\n  \"resize_mode\": 0,\n  \"restore_faces\": false,\n  \"s_churn\": 0.0,\n  \"s_min_uncond\": 0.0,\n  \"s_noise\": 1.0,\n  \"s_tmax\": null,\n  \"s_tmin\": 0.0,\n  \"sampler_name\": \"DPM++ SDE Karras\",\n  \"script_args\": [],\n  \"script_name\": null,\n  \"seed\": 1401,\n  \"seed_enable_extras\": true,\n  \"seed_resize_from_h\": -1,\n  \"seed_resize_from_w\": -1,\n  \"steps\": 20,\n  \"styles\": [\"no style\"],\n  \"subseed\": 3600331407,\n  \"subseed_strength\": 0,\n  \"tiling\": false,\n  \"width\": 680\n}\n"
        },
        {
          "name": "requirements-test.txt",
          "type": "blob",
          "size": 0.0478515625,
          "content": "pytest-base-url~=2.0\npytest-cov~=4.0\npytest~=7.3\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.318359375,
          "content": "GitPython\nPillow\naccelerate\n\nbasicsr\nblendmodes\nclean-fid\neinops\nfastapi>=0.90.1\ngfpgan\ngradio==3.41.2\ninflection\njsonmerge\nkornia\nlark\nnumpy\nomegaconf\nopen-clip-torch\n\npiexif\npsutil\npytorch_lightning\nrealesrgan\nrequests\nresize-right\n\nsafetensors\nscikit-image>=0.19\ntimm\ntomesd\ntorch\ntorchdiffeq\ntorchsde\ntransformers==4.30.2\n"
        },
        {
          "name": "requirements_versions.txt",
          "type": "blob",
          "size": 0.51171875,
          "content": "GitPython==3.1.32\nPillow==9.5.0\naccelerate==0.21.0\nbasicsr==1.4.2\nblendmodes==2022\nclean-fid==0.1.35\neinops==0.4.1\nfastapi==0.94.0\ngfpgan==1.3.8\ngradio==3.41.2\nhttpcore==0.15\ninflection==0.5.1\njsonmerge==1.8.0\nkornia==0.6.7\nlark==1.1.2\nnumpy==1.23.5\nomegaconf==2.2.3\nopen-clip-torch==2.20.0\npiexif==1.1.3\npsutil==5.9.5\npytorch_lightning==1.9.4\nrealesrgan==0.3.0\nresize-right==0.0.2\nsafetensors==0.3.1\nscikit-image==0.21.0\ntimm==0.9.2\ntomesd==0.1.3\ntorch\ntorchdiffeq==0.2.3\ntorchsde==0.2.6\ntransformers==4.30.2\nhttpx==0.24.1\n"
        },
        {
          "name": "script.js",
          "type": "blob",
          "size": 5.2529296875,
          "content": "function gradioApp() {\n    const elems = document.getElementsByTagName('gradio-app');\n    const elem = elems.length == 0 ? document : elems[0];\n\n    if (elem !== document) {\n        elem.getElementById = function(id) {\n            return document.getElementById(id);\n        };\n    }\n    return elem.shadowRoot ? elem.shadowRoot : elem;\n}\n\n/**\n * Get the currently selected top-level UI tab button (e.g. the button that says \"Extras\").\n */\nfunction get_uiCurrentTab() {\n    return gradioApp().querySelector('#tabs > .tab-nav > button.selected');\n}\n\n/**\n * Get the first currently visible top-level UI tab content (e.g. the div hosting the \"txt2img\" UI).\n */\nfunction get_uiCurrentTabContent() {\n    return gradioApp().querySelector('#tabs > .tabitem[id^=tab_]:not([style*=\"display: none\"])');\n}\n\nvar uiUpdateCallbacks = [];\nvar uiAfterUpdateCallbacks = [];\nvar uiLoadedCallbacks = [];\nvar uiTabChangeCallbacks = [];\nvar optionsChangedCallbacks = [];\nvar uiAfterUpdateTimeout = null;\nvar uiCurrentTab = null;\n\n/**\n * Register callback to be called at each UI update.\n * The callback receives an array of MutationRecords as an argument.\n */\nfunction onUiUpdate(callback) {\n    uiUpdateCallbacks.push(callback);\n}\n\n/**\n * Register callback to be called soon after UI updates.\n * The callback receives no arguments.\n *\n * This is preferred over `onUiUpdate` if you don't need\n * access to the MutationRecords, as your function will\n * not be called quite as often.\n */\nfunction onAfterUiUpdate(callback) {\n    uiAfterUpdateCallbacks.push(callback);\n}\n\n/**\n * Register callback to be called when the UI is loaded.\n * The callback receives no arguments.\n */\nfunction onUiLoaded(callback) {\n    uiLoadedCallbacks.push(callback);\n}\n\n/**\n * Register callback to be called when the UI tab is changed.\n * The callback receives no arguments.\n */\nfunction onUiTabChange(callback) {\n    uiTabChangeCallbacks.push(callback);\n}\n\n/**\n * Register callback to be called when the options are changed.\n * The callback receives no arguments.\n * @param callback\n */\nfunction onOptionsChanged(callback) {\n    optionsChangedCallbacks.push(callback);\n}\n\nfunction executeCallbacks(queue, arg) {\n    for (const callback of queue) {\n        try {\n            callback(arg);\n        } catch (e) {\n            console.error(\"error running callback\", callback, \":\", e);\n        }\n    }\n}\n\n/**\n * Schedule the execution of the callbacks registered with onAfterUiUpdate.\n * The callbacks are executed after a short while, unless another call to this function\n * is made before that time. IOW, the callbacks are executed only once, even\n * when there are multiple mutations observed.\n */\nfunction scheduleAfterUiUpdateCallbacks() {\n    clearTimeout(uiAfterUpdateTimeout);\n    uiAfterUpdateTimeout = setTimeout(function() {\n        executeCallbacks(uiAfterUpdateCallbacks);\n    }, 200);\n}\n\nvar executedOnLoaded = false;\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var mutationObserver = new MutationObserver(function(m) {\n        if (!executedOnLoaded && gradioApp().querySelector('#txt2img_prompt')) {\n            executedOnLoaded = true;\n            executeCallbacks(uiLoadedCallbacks);\n        }\n\n        executeCallbacks(uiUpdateCallbacks, m);\n        scheduleAfterUiUpdateCallbacks();\n        const newTab = get_uiCurrentTab();\n        if (newTab && (newTab !== uiCurrentTab)) {\n            uiCurrentTab = newTab;\n            executeCallbacks(uiTabChangeCallbacks);\n        }\n    });\n    mutationObserver.observe(gradioApp(), {childList: true, subtree: true});\n});\n\n/**\n * Add a ctrl+enter as a shortcut to start a generation\n */\ndocument.addEventListener('keydown', function(e) {\n    const isEnter = e.key === 'Enter' || e.keyCode === 13;\n    const isModifierKey = e.metaKey || e.ctrlKey || e.altKey;\n\n    const interruptButton = get_uiCurrentTabContent().querySelector('button[id$=_interrupt]');\n    const generateButton = get_uiCurrentTabContent().querySelector('button[id$=_generate]');\n\n    if (isEnter && isModifierKey) {\n        if (interruptButton.style.display === 'block') {\n            interruptButton.click();\n            const callback = (mutationList) => {\n                for (const mutation of mutationList) {\n                    if (mutation.type === 'attributes' && mutation.attributeName === 'style') {\n                        if (interruptButton.style.display === 'none') {\n                            generateButton.click();\n                            observer.disconnect();\n                        }\n                    }\n                }\n            };\n            const observer = new MutationObserver(callback);\n            observer.observe(interruptButton, {attributes: true});\n        } else {\n            generateButton.click();\n        }\n        e.preventDefault();\n    }\n});\n\n/**\n * checks that a UI element is not in another hidden element or tab content\n */\nfunction uiElementIsVisible(el) {\n    if (el === document) {\n        return true;\n    }\n\n    const computedStyle = getComputedStyle(el);\n    const isVisible = computedStyle.display !== 'none';\n\n    if (!isVisible) return false;\n    return uiElementIsVisible(el.parentNode);\n}\n\nfunction uiElementInSight(el) {\n    const clRect = el.getBoundingClientRect();\n    const windowHeight = window.innerHeight;\n    const isOnScreen = clRect.bottom > 0 && clRect.top < windowHeight;\n\n    return isOnScreen;\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "style.css",
          "type": "blob",
          "size": 20.91015625,
          "content": "/* temporary fix to load default gradio font in frontend instead of backend */\n\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;600&display=swap');\n\n\n/* temporary fix to hide gradio crop tool until it's fixed https://github.com/gradio-app/gradio/issues/3810 */\n\ndiv.gradio-image button[aria-label=\"Edit\"] {\n    display: none;\n}\n\n\n/* general gradio fixes */\n\n:root, .dark{\n    --checkbox-label-gap: 0.25em 0.1em;\n    --section-header-text-size: 12pt;\n    --block-background-fill: transparent;\n\n}\n\n.block.padded:not(.gradio-accordion) {\n    padding: 0 !important;\n}\n\ndiv.gradio-container{\n    max-width: unset !important;\n}\n\n.hidden{\n    display: none;\n}\n\n.compact{\n    background: transparent !important;\n    padding: 0 !important;\n}\n\ndiv.form{\n    border-width: 0;\n    box-shadow: none;\n    background: transparent;\n    overflow: visible;\n    gap: 0.5em;\n}\n\n.block.gradio-dropdown,\n.block.gradio-slider,\n.block.gradio-checkbox,\n.block.gradio-textbox,\n.block.gradio-radio,\n.block.gradio-checkboxgroup,\n.block.gradio-number,\n.block.gradio-colorpicker {\n    border-width: 0 !important;\n    box-shadow: none !important;\n}\n\ndiv.gradio-group, div.styler{\n    border-width: 0 !important;\n    background: none;\n}\n.gap.compact{\n    padding: 0;\n    gap: 0.2em 0;\n}\n\ndiv.compact{\n    gap: 1em;\n}\n\n.gradio-dropdown label span:not(.has-info),\n.gradio-textbox label span:not(.has-info),\n.gradio-number label span:not(.has-info)\n{\n    margin-bottom: 0;\n}\n\n.gradio-dropdown ul.options{\n    z-index: 3000;\n    min-width: fit-content;\n    max-width: inherit;\n    white-space: nowrap;\n}\n\n@media (pointer:fine) {\n    .gradio-dropdown ul.options li.item {\n        padding: 0.05em 0;\n    }\n}\n\n.gradio-dropdown ul.options li.item.selected {\n    background-color: var(--neutral-100);\n}\n\n.dark .gradio-dropdown ul.options li.item.selected {\n    background-color: var(--neutral-900);\n}\n\n.gradio-dropdown div.wrap.wrap.wrap.wrap{\n    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n}\n\n.gradio-dropdown:not(.multiselect) .wrap-inner.wrap-inner.wrap-inner{\n    flex-wrap: unset;\n}\n\n.gradio-dropdown .single-select{\n    white-space: nowrap;\n    overflow: hidden;\n}\n\n.gradio-dropdown .token-remove.remove-all.remove-all{\n    display: none;\n}\n\n.gradio-dropdown.multiselect .token-remove.remove-all.remove-all{\n    display: flex;\n}\n\n.gradio-slider input[type=\"number\"]{\n    width: 6em;\n}\n\n.block.gradio-checkbox {\n    margin: 0.75em 1.5em 0 0;\n}\n\n.gradio-html div.wrap{\n    height: 100%;\n}\ndiv.gradio-html.min{\n    min-height: 0;\n}\n\n.block.gradio-gallery{\n    background: var(--input-background-fill);\n}\n\n.gradio-container .prose a, .gradio-container .prose a:visited{\n    color: unset;\n    text-decoration: none;\n}\n\na{\n    font-weight: bold;\n    cursor: pointer;\n}\n\n/* gradio 3.39 puts a lot of overflow: hidden all over the place for an unknown reason. */\ndiv.gradio-container, .block.gradio-textbox, div.gradio-group, div.gradio-dropdown{\n    overflow: visible !important;\n}\n\n/* align-items isn't enough and elements may overflow in Safari. */\n.unequal-height {\n    align-content: flex-start;\n}\n\n\n/* general styled components */\n\n.gradio-button.tool{\n    max-width: 2.2em;\n    min-width: 2.2em !important;\n    height: 2.4em;\n    align-self: end;\n    line-height: 1em;\n    border-radius: 0.5em;\n}\n\n.gradio-button.secondary-down{\n    background: var(--button-secondary-background-fill);\n    color: var(--button-secondary-text-color);\n}\n.gradio-button.secondary-down, .gradio-button.secondary-down:hover{\n    box-shadow: 1px 1px 1px rgba(0,0,0,0.25) inset, 0px 0px 3px rgba(0,0,0,0.15) inset;\n}\n.gradio-button.secondary-down:hover{\n    background: var(--button-secondary-background-fill-hover);\n    color: var(--button-secondary-text-color-hover);\n}\n\nbutton.custom-button{\n    border-radius: var(--button-large-radius);\n    padding: var(--button-large-padding);\n    font-weight: var(--button-large-text-weight);\n    border: var(--button-border-width) solid var(--button-secondary-border-color);\n    background: var(--button-secondary-background-fill);\n    color: var(--button-secondary-text-color);\n    font-size: var(--button-large-text-size);\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    transition: var(--button-transition);\n    box-shadow: var(--button-shadow);\n    text-align: center;\n}\n\ndiv.block.gradio-accordion {\n    border: 1px solid var(--block-border-color) !important;\n    border-radius: 8px !important;\n    margin: 2px 0;\n    padding: 8px 8px;\n}\n\ninput[type=\"checkbox\"].input-accordion-checkbox{\n    vertical-align: sub;\n    margin-right: 0.5em;\n}\n\n\n/* txt2img/img2img specific */\n\n.block.token-counter{\n    position: absolute;\n    display: inline-block;\n    right: 1em;\n    min-width: 0 !important;\n    width: auto;\n    z-index: 100;\n    top: -0.75em;\n}\n\n.block.token-counter span{\n    background: var(--input-background-fill) !important;\n    box-shadow: 0 0 0.0 0.3em rgba(192,192,192,0.15), inset 0 0 0.6em rgba(192,192,192,0.075);\n    border: 2px solid rgba(192,192,192,0.4) !important;\n    border-radius: 0.4em;\n}\n\n.block.token-counter.error span{\n    box-shadow: 0 0 0.0 0.3em rgba(255,0,0,0.15), inset 0 0 0.6em rgba(255,0,0,0.075);\n    border: 2px solid rgba(255,0,0,0.4) !important;\n}\n\n.block.token-counter div{\n    display: inline;\n}\n\n.block.token-counter span{\n    padding: 0.1em 0.75em;\n}\n\n[id$=_subseed_show]{\n    min-width: auto !important;\n    flex-grow: 0 !important;\n    display: flex;\n}\n\n[id$=_subseed_show] label{\n    margin-bottom: 0.65em;\n    align-self: end;\n}\n\n[id$=_seed_extras] > div{\n    gap: 0.5em;\n}\n\n.html-log .comments{\n    padding-top: 0.5em;\n}\n\n.html-log .comments:empty{\n    padding-top: 0;\n}\n\n.html-log .performance {\n    font-size: 0.85em;\n    color: #444;\n    display: flex;\n}\n\n.html-log .performance p{\n    display: inline-block;\n}\n\n.html-log .performance p.time, .performance p.vram, .performance p.time abbr, .performance p.vram abbr {\n    margin-bottom: 0;\n    color: var(--block-title-text-color);\n}\n\n.html-log .performance p.time {\n}\n\n.html-log .performance p.vram {\n    margin-left: auto;\n}\n\n.html-log .performance .measurement{\n    color: var(--body-text-color);\n    font-weight: bold;\n}\n\n#txt2img_generate, #img2img_generate {\n    min-height: 4.5em;\n}\n\n#txt2img_generate, #img2img_generate {\n    min-height: 4.5em;\n}\n.generate-box-compact #txt2img_generate, .generate-box-compact #img2img_generate {\n    min-height: 3em;\n}\n\n@media screen and (min-width: 2500px) {\n    #txt2img_gallery, #img2img_gallery {\n        min-height: 768px;\n    }\n}\n\n.gradio-gallery .thumbnails img {\n    object-fit: scale-down !important;\n}\n#txt2img_actions_column, #img2img_actions_column {\n    gap: 0.5em;\n}\n#txt2img_tools, #img2img_tools{\n    gap: 0.4em;\n}\n\n.interrogate-col{\n    min-width: 0 !important;\n    max-width: fit-content;\n    gap: 0.5em;\n}\n.interrogate-col > button{\n    flex: 1;\n}\n\n.generate-box{\n    position: relative;\n}\n.gradio-button.generate-box-skip, .gradio-button.generate-box-interrupt{\n    position: absolute;\n    width: 50%;\n    height: 100%;\n    display: none;\n    background: #b4c0cc;\n}\n.gradio-button.generate-box-skip:hover, .gradio-button.generate-box-interrupt:hover{\n    background: #c2cfdb;\n}\n.gradio-button.generate-box-interrupt{\n    left: 0;\n    border-radius: 0.5rem 0 0 0.5rem;\n}\n.gradio-button.generate-box-skip{\n    right: 0;\n    border-radius: 0 0.5rem 0.5rem 0;\n}\n\n#img2img_scale_resolution_preview.block{\n    display: flex;\n    align-items: end;\n}\n\n#txtimg_hr_finalres .resolution, #img2img_scale_resolution_preview .resolution{\n    font-weight: bold;\n}\n\n#txtimg_hr_finalres div.pending, #img2img_scale_resolution_preview div.pending {\n    opacity: 1;\n    transition: opacity 0s;\n}\n\n.inactive{\n    opacity: 0.5;\n}\n\n[id$=_column_batch]{\n    min-width: min(13.5em, 100%) !important;\n}\n\ndiv.dimensions-tools{\n    min-width: 1.6em !important;\n    max-width: fit-content;\n    flex-direction: column;\n    place-content: center;\n}\n\ndiv#extras_scale_to_tab div.form{\n    flex-direction: row;\n}\n\n#img2img_sketch, #img2maskimg, #inpaint_sketch {\n    overflow: overlay !important;\n    resize: auto;\n    background: var(--panel-background-fill);\n    z-index: 5;\n}\n\n.image-buttons > .form{\n    justify-content: center;\n}\n\n.infotext {\n    overflow-wrap: break-word;\n}\n\n#img2img_column_batch{\n    align-self: end;\n    margin-bottom: 0.9em;\n}\n\n#img2img_unused_scale_by_slider{\n    visibility: hidden;\n    width: 0.5em;\n    max-width: 0.5em;\n    min-width: 0.5em;\n}\n\ndiv.toprow-compact-stylerow{\n    margin: 0.5em 0;\n}\n\ndiv.toprow-compact-tools{\n    min-width: fit-content !important;\n    max-width: fit-content;\n}\n\n/* settings */\n#quicksettings {\n    align-items: end;\n}\n\n#quicksettings > div, #quicksettings > fieldset{\n    max-width: 36em;\n    width: fit-content;\n    flex: 0 1 fit-content;\n    padding: 0;\n    border: none;\n    box-shadow: none;\n    background: none;\n}\n#quicksettings > div.gradio-dropdown{\n    min-width: 24em !important;\n}\n\n#settings{\n    display: block;\n}\n\n#settings > div{\n    border: none;\n    margin-left: 10em;\n    padding: 0 var(--spacing-xl);\n}\n\n#settings > div.tab-nav{\n    float: left;\n    display: block;\n    margin-left: 0;\n    width: 10em;\n}\n\n#settings > div.tab-nav button{\n    display: block;\n    border: none;\n    text-align: left;\n    white-space: initial;\n    padding: 4px;\n}\n\n#settings > div.tab-nav .settings-category{\n    display: block;\n    margin: 1em 0 0.25em 0;\n    font-weight: bold;\n    text-decoration: underline;\n    cursor: default;\n    user-select: none;\n}\n\n#settings_result{\n    height: 1.4em;\n    margin: 0 1.2em;\n}\n\ntable.popup-table{\n    background: var(--body-background-fill);\n    color: var(--body-text-color);\n    border-collapse: collapse;\n    margin: 1em;\n    border: 4px solid var(--body-background-fill);\n}\n\ntable.popup-table td{\n    padding: 0.4em;\n    border: 1px solid rgba(128, 128, 128, 0.5);\n    max-width: 36em;\n}\n\ntable.popup-table .muted{\n    color: #aaa;\n}\n\ntable.popup-table .link{\n    text-decoration: underline;\n    cursor: pointer;\n    font-weight: bold;\n}\n\n.ui-defaults-none{\n    color: #aaa !important;\n}\n\n#settings span{\n    color: var(--body-text-color);\n}\n\n#settings .gradio-textbox, #settings .gradio-slider, #settings .gradio-number, #settings .gradio-dropdown, #settings .gradio-checkboxgroup, #settings .gradio-radio{\n    margin-top: 0.75em;\n}\n\n#settings span .settings-comment {\n    display: inline\n}\n\n.settings-comment a{\n    text-decoration: underline;\n}\n\n.settings-comment .info{\n    opacity: 0.75;\n}\n\n#sysinfo_download a.sysinfo_big_link{\n    font-size: 24pt;\n}\n\n#sysinfo_download a{\n    text-decoration: underline;\n}\n\n#sysinfo_validity{\n    font-size: 18pt;\n}\n\n#settings .settings-info{\n    max-width: 48em;\n    border: 1px dotted #777;\n    margin: 0;\n    padding: 1em;\n}\n\n\n/* live preview */\n.progressDiv{\n    position: absolute;\n    height: 20px;\n    background: #b4c0cc;\n    border-radius: 3px !important;\n    top: -14px;\n    left: 0px;\n    width: 100%;\n}\n\n.progress-container{\n    position: relative;\n}\n\n[id$=_results].mobile{\n    margin-top: 28px;\n}\n\n.dark .progressDiv{\n    background: #424c5b;\n}\n\n.progressDiv .progress{\n    width: 0%;\n    height: 20px;\n    background: #0060df;\n    color: white;\n    font-weight: bold;\n    line-height: 20px;\n    padding: 0 8px 0 0;\n    text-align: right;\n    border-radius: 3px;\n    overflow: visible;\n    white-space: nowrap;\n    padding: 0 0.5em;\n}\n\n.livePreview{\n    position: absolute;\n    z-index: 300;\n    background: var(--background-fill-primary);\n    width: 100%;\n    height: 100%;\n}\n\n.livePreview img{\n    position: absolute;\n    object-fit: contain;\n    width: 100%;\n    height: calc(100% - 60px);  /* to match gradio's height */\n}\n\n/* fullscreen popup (ie in Lora's (i) button) */\n\n.popup-metadata{\n    color: black;\n    background: white;\n    display: inline-block;\n    padding: 1em;\n    white-space: pre-wrap;\n}\n\n.global-popup{\n    display: flex;\n    position: fixed;\n    z-index: 1001;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n}\n\n.global-popup *{\n    box-sizing: border-box;\n}\n\n.global-popup-close:before {\n    content: \"×\";\n    position: fixed;\n    right: 0.25em;\n    top: 0;\n    cursor: pointer;\n    color: white;\n    font-size: 32pt;\n}\n\n.global-popup-close{\n    position: fixed;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(20, 20, 20, 0.95);\n}\n\n.global-popup-inner{\n    display: inline-block;\n    margin: auto;\n    padding: 2em;\n    z-index: 1001;\n    max-height: 90%;\n    max-width: 90%;\n}\n\n/* fullpage image viewer */\n\n#lightboxModal{\n    display: none;\n    position: fixed;\n    z-index: 1001;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    background-color: rgba(20, 20, 20, 0.95);\n    user-select: none;\n    -webkit-user-select: none;\n    flex-direction: column;\n}\n\n.modalControls {\n    display: flex;\n    position: absolute;\n    right: 0px;\n    left: 0px;\n    gap: 1em;\n    padding: 1em;\n    background-color:rgba(0,0,0,0);\n    z-index: 1;\n    transition: 0.2s ease background-color;\n}\n.modalControls:hover {\n    background-color:rgba(0,0,0,0.9);\n}\n.modalClose {\n    margin-left: auto;\n}\n.modalControls span{\n    color: white;\n    text-shadow: 0px 0px 0.25em black;\n    font-size: 35px;\n    font-weight: bold;\n    cursor: pointer;\n    width: 1em;\n}\n\n.modalControls span:hover, .modalControls span:focus{\n    color: #999;\n    text-decoration: none;\n}\n\n#lightboxModal > img {\n    display: block;\n    margin: auto;\n    width: auto;\n}\n\n#lightboxModal > img.modalImageFullscreen{\n    object-fit: contain;\n    height: 100%;\n    width: 100%;\n    min-height: 0;\n}\n\n.modalPrev,\n.modalNext {\n  cursor: pointer;\n  position: absolute;\n  top: 50%;\n  width: auto;\n  padding: 16px;\n  margin-top: -50px;\n  color: white;\n  font-weight: bold;\n  font-size: 20px;\n  transition: 0.6s ease;\n  border-radius: 0 3px 3px 0;\n  user-select: none;\n  -webkit-user-select: none;\n}\n\n.modalNext {\n  right: 0;\n  border-radius: 3px 0 0 3px;\n}\n\n.modalPrev:hover,\n.modalNext:hover {\n  background-color: rgba(0, 0, 0, 0.8);\n}\n\n#imageARPreview {\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    border: 2px solid red;\n    background: rgba(255, 0, 0, 0.3);\n    z-index: 900;\n    pointer-events: none;\n    display: none;\n}\n\n/* context menu (ie for the generate button) */\n\n#context-menu{\n    z-index:9999;\n    position:absolute;\n    display:block;\n    padding:0px 0;\n    border:2px solid #a55000;\n    border-radius:8px;\n    box-shadow:1px 1px 2px #CE6400;\n    width: 200px;\n}\n\n.context-menu-items{\n    list-style: none;\n    margin: 0;\n    padding: 0;\n}\n\n.context-menu-items a{\n    display:block;\n    padding:5px;\n    cursor:pointer;\n}\n\n.context-menu-items a:hover{\n    background: #a55000;\n}\n\n\n/* extensions */\n\n#tab_extensions table{\n    border-collapse: collapse;\n}\n\n#tab_extensions table td, #tab_extensions table th{\n    border: 1px solid #ccc;\n    padding: 0.25em 0.5em;\n}\n\n#tab_extensions table input[type=\"checkbox\"]{\n    margin-right: 0.5em;\n    appearance: checkbox;\n}\n\n#tab_extensions button{\n    max-width: 16em;\n}\n\n#tab_extensions input[disabled=\"disabled\"]{\n    opacity: 0.5;\n}\n\n.extension-tag{\n    font-weight: bold;\n    font-size: 95%;\n}\n\n#available_extensions .info{\n    margin: 0;\n}\n\n#available_extensions .info{\n    margin: 0.5em 0;\n    display: flex;\n    margin-top: auto;\n    opacity: 0.80;\n    font-size: 90%;\n}\n\n#available_extensions .date_added{\n    margin-right: auto;\n    display: inline-block;\n}\n\n#available_extensions .star_count{\n    margin-left: auto;\n    display: inline-block;\n}\n\n/* replace original footer with ours */\n\nfooter {\n    display: none !important;\n}\n\n#footer{\n    text-align: center;\n}\n\n#footer div{\n    display: inline-block;\n}\n\n#footer .versions{\n    font-size: 85%;\n    opacity: 0.85;\n}\n\n/* extra networks UI */\n\n.extra-page > div.gap{\n    gap: 0;\n}\n\n.extra-page-prompts{\n    margin-bottom: 0;\n}\n\n.extra-page-prompts.extra-page-prompts-active{\n    margin-bottom: 1em;\n}\n\n.extra-network-cards{\n    height: calc(100vh - 24rem);\n    overflow: clip scroll;\n    resize: vertical;\n    min-height: 52rem;\n}\n\n.extra-networks > div.tab-nav{\n    min-height: 3.4rem;\n}\n\n.extra-networks > div > [id *= '_extra_']{\n    margin: 0.3em;\n}\n\n.extra-network-subdirs{\n    padding: 0.2em 0.35em;\n}\n\n.extra-network-subdirs button{\n    margin: 0 0.15em;\n}\n.extra-networks .tab-nav .search,\n.extra-networks .tab-nav .sort,\n.extra-networks .tab-nav .show-dirs\n{\n    margin: 0.3em;\n    align-self: center;\n    width: auto;\n}\n\n.extra-networks .tab-nav .search {\n    width: 16em;\n    max-width: 16em;\n}\n\n.extra-networks .tab-nav .sort {\n    width: 12em;\n    max-width: 12em;\n}\n\n#txt2img_extra_view, #img2img_extra_view {\n    width: auto;\n}\n\n.extra-network-cards .nocards{\n    margin: 1.25em 0.5em 0.5em 0.5em;\n}\n\n.extra-network-cards .nocards h1{\n    font-size: 1.5em;\n    margin-bottom: 1em;\n}\n\n.extra-network-cards .nocards li{\n    margin-left: 0.5em;\n}\n\n\n.extra-network-cards .card .button-row{\n    display: none;\n    position: absolute;\n    color: white;\n    right: 0;\n    z-index: 1\n}\n.extra-network-cards .card:hover .button-row{\n    display: flex;\n}\n\n.extra-network-cards .card .card-button{\n    color: white;\n}\n\n.extra-network-cards .card .metadata-button:before{\n    content: \"🛈\";\n}\n\n.extra-network-cards .card .edit-button:before{\n    content: \"🛠\";\n}\n\n.extra-network-cards .card .card-button {\n    text-shadow: 2px 2px 3px black;\n    padding: 0.25em 0.1em;\n    font-size: 200%;\n    width: 1.5em;\n}\n.extra-network-cards .card .card-button:hover{\n    color: red;\n}\n\n\n.standalone-card-preview.card .preview{\n    position: absolute;\n    object-fit: cover;\n    width: 100%;\n    height:100%;\n}\n\n.extra-network-cards .card, .standalone-card-preview.card{\n    display: inline-block;\n    margin: 0.5rem;\n    width: 16rem;\n    height: 24rem;\n    box-shadow: 0 0 5px rgba(128, 128, 128, 0.5);\n    border-radius: 0.2rem;\n    position: relative;\n\n    background-size: auto 100%;\n    background-position: center;\n    overflow: hidden;\n    cursor: pointer;\n\n    background-image: url('./file=html/card-no-preview.png')\n}\n\n.extra-network-cards .card:hover{\n    box-shadow: 0 0 2px 0.3em rgba(0, 128, 255, 0.35);\n}\n\n.extra-network-cards .card .actions .additional{\n    display: none;\n}\n\n.extra-network-cards .card .actions{\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    padding: 0.5em;\n    background: rgba(0,0,0,0.5);\n    box-shadow: 0 0 0.25em 0.25em rgba(0,0,0,0.5);\n    text-shadow: 0 0 0.2em black;\n}\n\n.extra-network-cards .card .actions *{\n    color: white;\n}\n\n.extra-network-cards .card .actions .name{\n    font-size: 1.7em;\n    font-weight: bold;\n    line-break: anywhere;\n}\n\n.extra-network-cards .card .actions .description {\n    display: block;\n    max-height: 3em;\n    white-space: pre-wrap;\n    line-height: 1.1;\n}\n\n.extra-network-cards .card .actions .description:hover {\n    max-height: none;\n}\n\n.extra-network-cards .card .actions:hover .additional{\n    display: block;\n}\n\n.extra-network-cards .card ul{\n    margin: 0.25em 0 0.75em 0.25em;\n    cursor: unset;\n}\n\n.extra-network-cards .card ul a{\n    cursor: pointer;\n}\n\n.extra-network-cards .card ul a:hover{\n    color: red;\n}\n\n.extra-network-cards .card .preview{\n    position: absolute;\n    object-fit: cover;\n    width: 100%;\n    height:100%;\n}\n\ndiv.block.gradio-box.edit-user-metadata {\n    width: 56em;\n    background: var(--body-background-fill);\n    padding: 2em !important;\n}\n\n.edit-user-metadata .extra-network-name{\n    font-size: 18pt;\n    color: var(--body-text-color);\n}\n\n.edit-user-metadata .file-metadata{\n    color: var(--body-text-color);\n}\n\n.edit-user-metadata .file-metadata th{\n    text-align: left;\n}\n\n.edit-user-metadata .file-metadata th, .edit-user-metadata .file-metadata td{\n    padding: 0.3em 1em;\n    overflow-wrap: anywhere;\n    word-break: break-word;\n}\n\n.edit-user-metadata .wrap.translucent{\n    background: var(--body-background-fill);\n}\n.edit-user-metadata .gradio-highlightedtext span{\n    word-break: break-word;\n}\n\n.edit-user-metadata-buttons{\n    margin-top: 1.5em;\n}\n\n\n\n\ndiv.block.gradio-box.popup-dialog, .popup-dialog {\n    width: 56em;\n    background: var(--body-background-fill);\n    padding: 2em !important;\n}\n\ndiv.block.gradio-box.popup-dialog > div:last-child, .popup-dialog > div:last-child{\n    margin-top: 1em;\n}\n\ndiv.block.input-accordion{\n\n}\n\n.input-accordion-extra{\n    flex: 0 0 auto !important;\n    margin: 0 0.5em 0 auto;\n}\n\ndiv.accordions > div.input-accordion{\n    min-width: fit-content !important;\n}\n\ndiv.accordions > div.gradio-accordion .label-wrap span{\n    white-space: nowrap;\n    margin-right: 0.25em;\n}\n\ndiv.accordions{\n    gap: 0.5em;\n}\n\ndiv.accordions > div.input-accordion.input-accordion-open{\n    flex: 1 auto;\n    flex-flow: column;\n}\n\n\n/* sticky right hand columns */\n\n#img2img_results, #txt2img_results, #extras_results {\n    position: sticky;\n    top: 0.5em;\n}\n\nbody.resizing {\n    cursor: col-resize !important;\n}\n\nbody.resizing * {\n    pointer-events: none !important;\n}\n\nbody.resizing .resize-handle {\n    pointer-events: initial !important;\n}\n\n.resize-handle {\n    position: relative;\n    cursor: col-resize;\n    grid-column: 2 / 3;\n    min-width: 16px !important;\n    max-width: 16px !important;\n    height: 100%;\n}\n\n.resize-handle::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 7.5px;\n    border-left: 1px dashed var(--border-color-primary);\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "textual_inversion_templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "ui-config.json",
          "type": "blob",
          "size": 44.4130859375,
          "content": "{\n    \"txt2img/Prompt/visible\": true,\n    \"txt2img/Prompt/value\": \"\",\n    \"txt2img/Negative prompt/visible\": true,\n    \"txt2img/Negative prompt/value\": \"\",\n    \"txt2img/Interrupt/visible\": true,\n    \"txt2img/Skip/visible\": true,\n    \"txt2img/Generate/visible\": true,\n    \"txt2img/↙️/visible\": true,\n    \"txt2img/🗑️/visible\": true,\n    \"txt2img/📋/visible\": true,\n    \"txt2img/Styles/visible\": true,\n    \"txt2img/Styles/value\": [],\n    \"txt2img/🖌️/visible\": true,\n    \"txt2img/🔄/visible\": true,\n    \"txt2img/📝/visible\": true,\n    \"txt2img/Close/visible\": true,\n    \"txt2img/Tabs@txt2img_extra_tabs/selected\": null,\n    \"txt2img/Sampling method/visible\": true,\n    \"txt2img/Sampling method/value\": \"DPM++ 2M Karras\",\n    \"txt2img/Sampling steps/visible\": true,\n    \"txt2img/Sampling steps/value\": 20,\n    \"txt2img/Sampling steps/minimum\": 1,\n    \"txt2img/Sampling steps/maximum\": 150,\n    \"txt2img/Sampling steps/step\": 1,\n    \"txt2img/Hires. fix/visible\": true,\n    \"txt2img/Hires. fix/value\": false,\n    \"txt2img/Upscaler/visible\": true,\n    \"txt2img/Upscaler/value\": \"Latent\",\n    \"txt2img/Hires steps/visible\": true,\n    \"txt2img/Hires steps/value\": 0,\n    \"txt2img/Hires steps/minimum\": 0,\n    \"txt2img/Hires steps/maximum\": 150,\n    \"txt2img/Hires steps/step\": 1,\n    \"txt2img/Denoising strength/visible\": true,\n    \"txt2img/Denoising strength/value\": 0.7,\n    \"txt2img/Denoising strength/minimum\": 0.0,\n    \"txt2img/Denoising strength/maximum\": 1.0,\n    \"txt2img/Denoising strength/step\": 0.01,\n    \"txt2img/Upscale by/visible\": true,\n    \"txt2img/Upscale by/value\": 2.0,\n    \"txt2img/Upscale by/minimum\": 1.0,\n    \"txt2img/Upscale by/maximum\": 4.0,\n    \"txt2img/Upscale by/step\": 0.05,\n    \"txt2img/Resize width to/visible\": true,\n    \"txt2img/Resize width to/value\": 0,\n    \"txt2img/Resize width to/minimum\": 0,\n    \"txt2img/Resize width to/maximum\": 2048,\n    \"txt2img/Resize width to/step\": 8,\n    \"txt2img/Resize height to/visible\": true,\n    \"txt2img/Resize height to/value\": 0,\n    \"txt2img/Resize height to/minimum\": 0,\n    \"txt2img/Resize height to/maximum\": 2048,\n    \"txt2img/Resize height to/step\": 8,\n    \"txt2img/Hires checkpoint/visible\": true,\n    \"txt2img/Hires checkpoint/value\": \"Use same checkpoint\",\n    \"txt2img/Hires sampling method/visible\": true,\n    \"txt2img/Hires sampling method/value\": \"Use same sampler\",\n    \"txt2img/Hires prompt/visible\": true,\n    \"txt2img/Hires prompt/value\": \"\",\n    \"txt2img/Hires negative prompt/visible\": true,\n    \"txt2img/Hires negative prompt/value\": \"\",\n    \"txt2img/Refiner/visible\": true,\n    \"customscript/refiner.py/txt2img/Refiner/value\": false,\n    \"txt2img/Refiner/value\": false,\n    \"customscript/refiner.py/txt2img/Checkpoint/visible\": true,\n    \"customscript/refiner.py/txt2img/Checkpoint/value\": \"\",\n    \"customscript/refiner.py/txt2img/Switch at/visible\": true,\n    \"customscript/refiner.py/txt2img/Switch at/value\": 0.8,\n    \"customscript/refiner.py/txt2img/Switch at/minimum\": 0.01,\n    \"customscript/refiner.py/txt2img/Switch at/maximum\": 1.0,\n    \"customscript/refiner.py/txt2img/Switch at/step\": 0.01,\n    \"txt2img/Width/visible\": true,\n    \"txt2img/Width/value\": 512,\n    \"txt2img/Width/minimum\": 64,\n    \"txt2img/Width/maximum\": 2048,\n    \"txt2img/Width/step\": 8,\n    \"txt2img/Height/visible\": true,\n    \"txt2img/Height/value\": 512,\n    \"txt2img/Height/minimum\": 64,\n    \"txt2img/Height/maximum\": 2048,\n    \"txt2img/Height/step\": 8,\n    \"txt2img/⇅/visible\": true,\n    \"txt2img/Batch count/visible\": true,\n    \"txt2img/Batch count/value\": 1,\n    \"txt2img/Batch count/minimum\": 1,\n    \"txt2img/Batch count/maximum\": 100,\n    \"txt2img/Batch count/step\": 1,\n    \"txt2img/Batch size/visible\": true,\n    \"txt2img/Batch size/value\": 1,\n    \"txt2img/Batch size/minimum\": 1,\n    \"txt2img/Batch size/maximum\": 8,\n    \"txt2img/Batch size/step\": 1,\n    \"txt2img/CFG Scale/visible\": true,\n    \"txt2img/CFG Scale/value\": 7.0,\n    \"txt2img/CFG Scale/minimum\": 1.0,\n    \"txt2img/CFG Scale/maximum\": 30.0,\n    \"txt2img/CFG Scale/step\": 0.5,\n    \"customscript/seed.py/txt2img/Seed/visible\": true,\n    \"customscript/seed.py/txt2img/Seed/value\": -1,\n    \"txt2img/🎲️/visible\": true,\n    \"txt2img/♻️/visible\": true,\n    \"customscript/seed.py/txt2img/Extra/visible\": true,\n    \"customscript/seed.py/txt2img/Extra/value\": false,\n    \"customscript/seed.py/txt2img/Variation seed/visible\": true,\n    \"customscript/seed.py/txt2img/Variation seed/value\": -1,\n    \"customscript/seed.py/txt2img/Variation strength/visible\": true,\n    \"customscript/seed.py/txt2img/Variation strength/value\": 0.0,\n    \"customscript/seed.py/txt2img/Variation strength/minimum\": 0,\n    \"customscript/seed.py/txt2img/Variation strength/maximum\": 1,\n    \"customscript/seed.py/txt2img/Variation strength/step\": 0.01,\n    \"customscript/seed.py/txt2img/Resize seed from width/visible\": true,\n    \"customscript/seed.py/txt2img/Resize seed from width/value\": 0,\n    \"customscript/seed.py/txt2img/Resize seed from width/minimum\": 0,\n    \"customscript/seed.py/txt2img/Resize seed from width/maximum\": 2048,\n    \"customscript/seed.py/txt2img/Resize seed from width/step\": 8,\n    \"customscript/seed.py/txt2img/Resize seed from height/visible\": true,\n    \"customscript/seed.py/txt2img/Resize seed from height/value\": 0,\n    \"customscript/seed.py/txt2img/Resize seed from height/minimum\": 0,\n    \"customscript/seed.py/txt2img/Resize seed from height/maximum\": 2048,\n    \"customscript/seed.py/txt2img/Resize seed from height/step\": 8,\n    \"txt2img/Override settings/value\": null,\n    \"txt2img/Script/visible\": true,\n    \"txt2img/Script/value\": \"None\",\n    \"customscript/prompt_matrix.py/txt2img/Put variable parts at start of prompt/visible\": true,\n    \"customscript/prompt_matrix.py/txt2img/Put variable parts at start of prompt/value\": false,\n    \"customscript/prompt_matrix.py/txt2img/Use different seed for each picture/visible\": true,\n    \"customscript/prompt_matrix.py/txt2img/Use different seed for each picture/value\": false,\n    \"customscript/prompt_matrix.py/txt2img/Select prompt/visible\": true,\n    \"customscript/prompt_matrix.py/txt2img/Select prompt/value\": \"positive\",\n    \"customscript/prompt_matrix.py/txt2img/Select joining char/visible\": true,\n    \"customscript/prompt_matrix.py/txt2img/Select joining char/value\": \"comma\",\n    \"customscript/prompt_matrix.py/txt2img/Grid margins (px)/visible\": true,\n    \"customscript/prompt_matrix.py/txt2img/Grid margins (px)/value\": 0,\n    \"customscript/prompt_matrix.py/txt2img/Grid margins (px)/minimum\": 0,\n    \"customscript/prompt_matrix.py/txt2img/Grid margins (px)/maximum\": 500,\n    \"customscript/prompt_matrix.py/txt2img/Grid margins (px)/step\": 2,\n    \"customscript/prompts_from_file.py/txt2img/Iterate seed every line/visible\": true,\n    \"customscript/prompts_from_file.py/txt2img/Iterate seed every line/value\": false,\n    \"customscript/prompts_from_file.py/txt2img/Use same random seed for all lines/visible\": true,\n    \"customscript/prompts_from_file.py/txt2img/Use same random seed for all lines/value\": false,\n    \"customscript/prompts_from_file.py/txt2img/Insert prompts at the/visible\": true,\n    \"customscript/prompts_from_file.py/txt2img/Insert prompts at the/value\": \"start\",\n    \"customscript/prompts_from_file.py/txt2img/List of prompt inputs/visible\": true,\n    \"customscript/prompts_from_file.py/txt2img/List of prompt inputs/value\": \"\",\n    \"customscript/xyz_grid.py/txt2img/X type/visible\": true,\n    \"customscript/xyz_grid.py/txt2img/X type/value\": \"Seed\",\n    \"customscript/xyz_grid.py/txt2img/X values/visible\": true,\n    \"customscript/xyz_grid.py/txt2img/X values/value\": \"\",\n    \"customscript/xyz_grid.py/txt2img/Y type/visible\": true,\n    \"customscript/xyz_grid.py/txt2img/Y type/value\": \"Nothing\",\n    \"customscript/xyz_grid.py/txt2img/Y values/visible\": true,\n    \"customscript/xyz_grid.py/txt2img/Y values/value\": \"\",\n    \"customscript/xyz_grid.py/txt2img/Z type/visible\": true,\n    \"customscript/xyz_grid.py/txt2img/Z type/value\": \"Nothing\",\n    \"customscript/xyz_grid.py/txt2img/Z values/visible\": true,\n    \"customscript/xyz_grid.py/txt2img/Z values/value\": \"\",\n    \"customscript/xyz_grid.py/txt2img/Draw legend/visible\": true,\n    \"customscript/xyz_grid.py/txt2img/Draw legend/value\": true,\n    \"customscript/xyz_grid.py/txt2img/Keep -1 for seeds/visible\": true,\n    \"customscript/xyz_grid.py/txt2img/Keep -1 for seeds/value\": false,\n    \"customscript/xyz_grid.py/txt2img/Include Sub Images/visible\": true,\n    \"customscript/xyz_grid.py/txt2img/Include Sub Images/value\": false,\n    \"customscript/xyz_grid.py/txt2img/Include Sub Grids/visible\": true,\n    \"customscript/xyz_grid.py/txt2img/Include Sub Grids/value\": false,\n    \"customscript/xyz_grid.py/txt2img/Grid margins (px)/visible\": true,\n    \"customscript/xyz_grid.py/txt2img/Grid margins (px)/value\": 0,\n    \"customscript/xyz_grid.py/txt2img/Grid margins (px)/minimum\": 0,\n    \"customscript/xyz_grid.py/txt2img/Grid margins (px)/maximum\": 500,\n    \"customscript/xyz_grid.py/txt2img/Grid margins (px)/step\": 2,\n    \"customscript/xyz_grid.py/txt2img/Use text inputs instead of dropdowns/visible\": true,\n    \"customscript/xyz_grid.py/txt2img/Use text inputs instead of dropdowns/value\": false,\n    \"txt2img/Swap X/Y axes/visible\": true,\n    \"txt2img/Swap Y/Z axes/visible\": true,\n    \"txt2img/Swap X/Z axes/visible\": true,\n    \"txt2img/📂/visible\": true,\n    \"txt2img/💾/visible\": true,\n    \"txt2img/🗃️/visible\": true,\n    \"txt2img/🖼️/visible\": true,\n    \"txt2img/🎨️/visible\": true,\n    \"txt2img/📐/visible\": true,\n    \"txt2img/Description/visible\": true,\n    \"txt2img/Description/value\": \"\",\n    \"txt2img/Cancel/visible\": true,\n    \"txt2img/Replace preview/visible\": true,\n    \"txt2img/Save/visible\": true,\n    \"txt2img/Preferred VAE/visible\": true,\n    \"txt2img/Preferred VAE/value\": \"None\",\n    \"txt2img/Stable Diffusion version/visible\": true,\n    \"txt2img/Stable Diffusion version/value\": \"Unknown\",\n    \"txt2img/Activation text/visible\": true,\n    \"txt2img/Activation text/value\": \"\",\n    \"txt2img/Preferred weight/visible\": true,\n    \"txt2img/Preferred weight/value\": 0.0,\n    \"txt2img/Preferred weight/minimum\": 0.0,\n    \"txt2img/Preferred weight/maximum\": 2.0,\n    \"txt2img/Preferred weight/step\": 0.01,\n    \"txt2img/Random prompt/visible\": true,\n    \"txt2img/Random prompt/value\": \"\",\n    \"txt2img/txt2img_extra_sort_order/value\": \"Path\",\n    \"txt2img/Show dirs/value\": true,\n    \"img2img/Prompt/visible\": true,\n    \"img2img/Prompt/value\": \"\",\n    \"img2img/Negative prompt/visible\": true,\n    \"img2img/Negative prompt/value\": \"\",\n    \"img2img/Interrupt/visible\": true,\n    \"img2img/Skip/visible\": true,\n    \"img2img/Generate/visible\": true,\n    \"img2img/↙️/visible\": true,\n    \"img2img/🗑️/visible\": true,\n    \"img2img/📋/visible\": true,\n    \"img2img/📎/visible\": true,\n    \"img2img/📦/visible\": true,\n    \"img2img/Styles/visible\": true,\n    \"img2img/Styles/value\": [],\n    \"img2img/🖌️/visible\": true,\n    \"img2img/🔄/visible\": true,\n    \"img2img/📝/visible\": true,\n    \"img2img/Close/visible\": true,\n    \"img2img/Tabs@img2img_extra_tabs/selected\": null,\n    \"img2img/Tabs@mode_img2img/selected\": null,\n    \"img2img/img2img/visible\": true,\n    \"img2img/sketch/visible\": true,\n    \"img2img/inpaint/visible\": true,\n    \"img2img/inpaint sketch/visible\": true,\n    \"img2img/Input directory/visible\": true,\n    \"img2img/Input directory/value\": \"\",\n    \"img2img/Output directory/visible\": true,\n    \"img2img/Output directory/value\": \"\",\n    \"img2img/Inpaint batch mask directory (required for inpaint batch processing only)/visible\": true,\n    \"img2img/Inpaint batch mask directory (required for inpaint batch processing only)/value\": \"\",\n    \"img2img/Append png info to prompts/visible\": true,\n    \"img2img/Append png info to prompts/value\": false,\n    \"img2img/PNG info directory/visible\": true,\n    \"img2img/PNG info directory/value\": \"\",\n    \"img2img/Resize mode/visible\": true,\n    \"img2img/Resize mode/value\": \"Just resize\",\n    \"img2img/Mask blur/visible\": true,\n    \"img2img/Mask blur/value\": 4,\n    \"img2img/Mask blur/minimum\": 0,\n    \"img2img/Mask blur/maximum\": 64,\n    \"img2img/Mask blur/step\": 1,\n    \"img2img/Mask transparency/value\": 0,\n    \"img2img/Mask transparency/minimum\": 0,\n    \"img2img/Mask transparency/maximum\": 100,\n    \"img2img/Mask transparency/step\": 1,\n    \"img2img/Mask mode/visible\": true,\n    \"img2img/Mask mode/value\": \"Inpaint masked\",\n    \"img2img/Masked content/visible\": true,\n    \"img2img/Masked content/value\": \"original\",\n    \"img2img/Inpaint area/visible\": true,\n    \"img2img/Inpaint area/value\": \"Whole picture\",\n    \"img2img/Only masked padding, pixels/visible\": true,\n    \"img2img/Only masked padding, pixels/value\": 32,\n    \"img2img/Only masked padding, pixels/minimum\": 0,\n    \"img2img/Only masked padding, pixels/maximum\": 256,\n    \"img2img/Only masked padding, pixels/step\": 4,\n    \"img2img/Sampling method/visible\": true,\n    \"img2img/Sampling method/value\": \"DPM++ 2M Karras\",\n    \"img2img/Sampling steps/visible\": true,\n    \"img2img/Sampling steps/value\": 20,\n    \"img2img/Sampling steps/minimum\": 1,\n    \"img2img/Sampling steps/maximum\": 150,\n    \"img2img/Sampling steps/step\": 1,\n    \"img2img/Refiner/visible\": true,\n    \"customscript/refiner.py/img2img/Refiner/value\": false,\n    \"img2img/Refiner/value\": false,\n    \"customscript/refiner.py/img2img/Checkpoint/visible\": true,\n    \"customscript/refiner.py/img2img/Checkpoint/value\": \"\",\n    \"customscript/refiner.py/img2img/Switch at/visible\": true,\n    \"customscript/refiner.py/img2img/Switch at/value\": 0.8,\n    \"customscript/refiner.py/img2img/Switch at/minimum\": 0.01,\n    \"customscript/refiner.py/img2img/Switch at/maximum\": 1.0,\n    \"customscript/refiner.py/img2img/Switch at/step\": 0.01,\n    \"img2img/Width/visible\": true,\n    \"img2img/Width/value\": 512,\n    \"img2img/Width/minimum\": 64,\n    \"img2img/Width/maximum\": 2048,\n    \"img2img/Width/step\": 8,\n    \"img2img/Height/visible\": true,\n    \"img2img/Height/value\": 512,\n    \"img2img/Height/minimum\": 64,\n    \"img2img/Height/maximum\": 2048,\n    \"img2img/Height/step\": 8,\n    \"img2img/⇅/visible\": true,\n    \"img2img/📐/visible\": true,\n    \"img2img/Scale/visible\": true,\n    \"img2img/Scale/value\": 1.0,\n    \"img2img/Scale/minimum\": 0.05,\n    \"img2img/Scale/maximum\": 4.0,\n    \"img2img/Scale/step\": 0.05,\n    \"img2img/Unused/visible\": true,\n    \"img2img/Unused/value\": 0,\n    \"img2img/Unused/minimum\": 0,\n    \"img2img/Unused/maximum\": 100,\n    \"img2img/Unused/step\": 1,\n    \"img2img/Batch count/visible\": true,\n    \"img2img/Batch count/value\": 1,\n    \"img2img/Batch count/minimum\": 1,\n    \"img2img/Batch count/maximum\": 100,\n    \"img2img/Batch count/step\": 1,\n    \"img2img/Batch size/visible\": true,\n    \"img2img/Batch size/value\": 1,\n    \"img2img/Batch size/minimum\": 1,\n    \"img2img/Batch size/maximum\": 8,\n    \"img2img/Batch size/step\": 1,\n    \"img2img/CFG Scale/visible\": true,\n    \"img2img/CFG Scale/value\": 7.0,\n    \"img2img/CFG Scale/minimum\": 1.0,\n    \"img2img/CFG Scale/maximum\": 30.0,\n    \"img2img/CFG Scale/step\": 0.5,\n    \"img2img/Image CFG Scale/value\": 1.5,\n    \"img2img/Image CFG Scale/minimum\": 0,\n    \"img2img/Image CFG Scale/maximum\": 3.0,\n    \"img2img/Image CFG Scale/step\": 0.05,\n    \"img2img/Denoising strength/visible\": true,\n    \"img2img/Denoising strength/value\": 0.75,\n    \"img2img/Denoising strength/minimum\": 0.0,\n    \"img2img/Denoising strength/maximum\": 1.0,\n    \"img2img/Denoising strength/step\": 0.01,\n    \"customscript/seed.py/img2img/Seed/visible\": true,\n    \"customscript/seed.py/img2img/Seed/value\": -1,\n    \"img2img/🎲️/visible\": true,\n    \"img2img/♻️/visible\": true,\n    \"customscript/seed.py/img2img/Extra/visible\": true,\n    \"customscript/seed.py/img2img/Extra/value\": false,\n    \"customscript/seed.py/img2img/Variation seed/visible\": true,\n    \"customscript/seed.py/img2img/Variation seed/value\": -1,\n    \"customscript/seed.py/img2img/Variation strength/visible\": true,\n    \"customscript/seed.py/img2img/Variation strength/value\": 0.0,\n    \"customscript/seed.py/img2img/Variation strength/minimum\": 0,\n    \"customscript/seed.py/img2img/Variation strength/maximum\": 1,\n    \"customscript/seed.py/img2img/Variation strength/step\": 0.01,\n    \"customscript/seed.py/img2img/Resize seed from width/visible\": true,\n    \"customscript/seed.py/img2img/Resize seed from width/value\": 0,\n    \"customscript/seed.py/img2img/Resize seed from width/minimum\": 0,\n    \"customscript/seed.py/img2img/Resize seed from width/maximum\": 2048,\n    \"customscript/seed.py/img2img/Resize seed from width/step\": 8,\n    \"customscript/seed.py/img2img/Resize seed from height/visible\": true,\n    \"customscript/seed.py/img2img/Resize seed from height/value\": 0,\n    \"customscript/seed.py/img2img/Resize seed from height/minimum\": 0,\n    \"customscript/seed.py/img2img/Resize seed from height/maximum\": 2048,\n    \"customscript/seed.py/img2img/Resize seed from height/step\": 8,\n    \"img2img/Override settings/value\": null,\n    \"img2img/Script/visible\": true,\n    \"img2img/Script/value\": \"None\",\n    \"customscript/img2imgalt.py/img2img/Override `Sampling method` to Euler?(this method is built for it)/visible\": true,\n    \"customscript/img2imgalt.py/img2img/Override `Sampling method` to Euler?(this method is built for it)/value\": true,\n    \"customscript/img2imgalt.py/img2img/Override `prompt` to the same value as `original prompt`?(and `negative prompt`)/visible\": true,\n    \"customscript/img2imgalt.py/img2img/Override `prompt` to the same value as `original prompt`?(and `negative prompt`)/value\": true,\n    \"customscript/img2imgalt.py/img2img/Original prompt/visible\": true,\n    \"customscript/img2imgalt.py/img2img/Original prompt/value\": \"\",\n    \"customscript/img2imgalt.py/img2img/Original negative prompt/visible\": true,\n    \"customscript/img2imgalt.py/img2img/Original negative prompt/value\": \"\",\n    \"customscript/img2imgalt.py/img2img/Override `Sampling Steps` to the same value as `Decode steps`?/visible\": true,\n    \"customscript/img2imgalt.py/img2img/Override `Sampling Steps` to the same value as `Decode steps`?/value\": true,\n    \"customscript/img2imgalt.py/img2img/Decode steps/visible\": true,\n    \"customscript/img2imgalt.py/img2img/Decode steps/value\": 50,\n    \"customscript/img2imgalt.py/img2img/Decode steps/minimum\": 1,\n    \"customscript/img2imgalt.py/img2img/Decode steps/maximum\": 150,\n    \"customscript/img2imgalt.py/img2img/Decode steps/step\": 1,\n    \"customscript/img2imgalt.py/img2img/Override `Denoising strength` to 1?/visible\": true,\n    \"customscript/img2imgalt.py/img2img/Override `Denoising strength` to 1?/value\": true,\n    \"customscript/img2imgalt.py/img2img/Decode CFG scale/visible\": true,\n    \"customscript/img2imgalt.py/img2img/Decode CFG scale/value\": 1.0,\n    \"customscript/img2imgalt.py/img2img/Decode CFG scale/minimum\": 0.0,\n    \"customscript/img2imgalt.py/img2img/Decode CFG scale/maximum\": 15.0,\n    \"customscript/img2imgalt.py/img2img/Decode CFG scale/step\": 0.1,\n    \"customscript/img2imgalt.py/img2img/Randomness/visible\": true,\n    \"customscript/img2imgalt.py/img2img/Randomness/value\": 0.0,\n    \"customscript/img2imgalt.py/img2img/Randomness/minimum\": 0.0,\n    \"customscript/img2imgalt.py/img2img/Randomness/maximum\": 1.0,\n    \"customscript/img2imgalt.py/img2img/Randomness/step\": 0.01,\n    \"customscript/img2imgalt.py/img2img/Sigma adjustment for finding noise for image/visible\": true,\n    \"customscript/img2imgalt.py/img2img/Sigma adjustment for finding noise for image/value\": false,\n    \"customscript/loopback.py/img2img/Loops/visible\": true,\n    \"customscript/loopback.py/img2img/Loops/value\": 4,\n    \"customscript/loopback.py/img2img/Loops/minimum\": 1,\n    \"customscript/loopback.py/img2img/Loops/maximum\": 32,\n    \"customscript/loopback.py/img2img/Loops/step\": 1,\n    \"customscript/loopback.py/img2img/Final denoising strength/visible\": true,\n    \"customscript/loopback.py/img2img/Final denoising strength/value\": 0.5,\n    \"customscript/loopback.py/img2img/Final denoising strength/minimum\": 0,\n    \"customscript/loopback.py/img2img/Final denoising strength/maximum\": 1,\n    \"customscript/loopback.py/img2img/Final denoising strength/step\": 0.01,\n    \"customscript/loopback.py/img2img/Denoising strength curve/visible\": true,\n    \"customscript/loopback.py/img2img/Denoising strength curve/value\": \"Linear\",\n    \"customscript/loopback.py/img2img/Append interrogated prompt at each iteration/visible\": true,\n    \"customscript/loopback.py/img2img/Append interrogated prompt at each iteration/value\": \"None\",\n    \"customscript/outpainting_mk_2.py/img2img/Pixels to expand/visible\": true,\n    \"customscript/outpainting_mk_2.py/img2img/Pixels to expand/value\": 128,\n    \"customscript/outpainting_mk_2.py/img2img/Pixels to expand/minimum\": 8,\n    \"customscript/outpainting_mk_2.py/img2img/Pixels to expand/maximum\": 256,\n    \"customscript/outpainting_mk_2.py/img2img/Pixels to expand/step\": 8,\n    \"customscript/outpainting_mk_2.py/img2img/Mask blur/visible\": true,\n    \"customscript/outpainting_mk_2.py/img2img/Mask blur/value\": 8,\n    \"customscript/outpainting_mk_2.py/img2img/Mask blur/minimum\": 0,\n    \"customscript/outpainting_mk_2.py/img2img/Mask blur/maximum\": 64,\n    \"customscript/outpainting_mk_2.py/img2img/Mask blur/step\": 1,\n    \"customscript/outpainting_mk_2.py/img2img/Fall-off exponent (lower=higher detail)/visible\": true,\n    \"customscript/outpainting_mk_2.py/img2img/Fall-off exponent (lower=higher detail)/value\": 1.0,\n    \"customscript/outpainting_mk_2.py/img2img/Fall-off exponent (lower=higher detail)/minimum\": 0.0,\n    \"customscript/outpainting_mk_2.py/img2img/Fall-off exponent (lower=higher detail)/maximum\": 4.0,\n    \"customscript/outpainting_mk_2.py/img2img/Fall-off exponent (lower=higher detail)/step\": 0.01,\n    \"customscript/outpainting_mk_2.py/img2img/Color variation/visible\": true,\n    \"customscript/outpainting_mk_2.py/img2img/Color variation/value\": 0.05,\n    \"customscript/outpainting_mk_2.py/img2img/Color variation/minimum\": 0.0,\n    \"customscript/outpainting_mk_2.py/img2img/Color variation/maximum\": 1.0,\n    \"customscript/outpainting_mk_2.py/img2img/Color variation/step\": 0.01,\n    \"customscript/poor_mans_outpainting.py/img2img/Pixels to expand/visible\": true,\n    \"customscript/poor_mans_outpainting.py/img2img/Pixels to expand/value\": 128,\n    \"customscript/poor_mans_outpainting.py/img2img/Pixels to expand/minimum\": 8,\n    \"customscript/poor_mans_outpainting.py/img2img/Pixels to expand/maximum\": 256,\n    \"customscript/poor_mans_outpainting.py/img2img/Pixels to expand/step\": 8,\n    \"customscript/poor_mans_outpainting.py/img2img/Mask blur/visible\": true,\n    \"customscript/poor_mans_outpainting.py/img2img/Mask blur/value\": 4,\n    \"customscript/poor_mans_outpainting.py/img2img/Mask blur/minimum\": 0,\n    \"customscript/poor_mans_outpainting.py/img2img/Mask blur/maximum\": 64,\n    \"customscript/poor_mans_outpainting.py/img2img/Mask blur/step\": 1,\n    \"customscript/poor_mans_outpainting.py/img2img/Masked content/visible\": true,\n    \"customscript/poor_mans_outpainting.py/img2img/Masked content/value\": \"fill\",\n    \"customscript/prompt_matrix.py/img2img/Put variable parts at start of prompt/visible\": true,\n    \"customscript/prompt_matrix.py/img2img/Put variable parts at start of prompt/value\": false,\n    \"customscript/prompt_matrix.py/img2img/Use different seed for each picture/visible\": true,\n    \"customscript/prompt_matrix.py/img2img/Use different seed for each picture/value\": false,\n    \"customscript/prompt_matrix.py/img2img/Select prompt/visible\": true,\n    \"customscript/prompt_matrix.py/img2img/Select prompt/value\": \"positive\",\n    \"customscript/prompt_matrix.py/img2img/Select joining char/visible\": true,\n    \"customscript/prompt_matrix.py/img2img/Select joining char/value\": \"comma\",\n    \"customscript/prompt_matrix.py/img2img/Grid margins (px)/visible\": true,\n    \"customscript/prompt_matrix.py/img2img/Grid margins (px)/value\": 0,\n    \"customscript/prompt_matrix.py/img2img/Grid margins (px)/minimum\": 0,\n    \"customscript/prompt_matrix.py/img2img/Grid margins (px)/maximum\": 500,\n    \"customscript/prompt_matrix.py/img2img/Grid margins (px)/step\": 2,\n    \"customscript/prompts_from_file.py/img2img/Iterate seed every line/visible\": true,\n    \"customscript/prompts_from_file.py/img2img/Iterate seed every line/value\": false,\n    \"customscript/prompts_from_file.py/img2img/Use same random seed for all lines/visible\": true,\n    \"customscript/prompts_from_file.py/img2img/Use same random seed for all lines/value\": false,\n    \"customscript/prompts_from_file.py/img2img/Insert prompts at the/visible\": true,\n    \"customscript/prompts_from_file.py/img2img/Insert prompts at the/value\": \"start\",\n    \"customscript/prompts_from_file.py/img2img/List of prompt inputs/visible\": true,\n    \"customscript/prompts_from_file.py/img2img/List of prompt inputs/value\": \"\",\n    \"customscript/sd_upscale.py/img2img/Tile overlap/visible\": true,\n    \"customscript/sd_upscale.py/img2img/Tile overlap/value\": 64,\n    \"customscript/sd_upscale.py/img2img/Tile overlap/minimum\": 0,\n    \"customscript/sd_upscale.py/img2img/Tile overlap/maximum\": 256,\n    \"customscript/sd_upscale.py/img2img/Tile overlap/step\": 16,\n    \"customscript/sd_upscale.py/img2img/Scale Factor/visible\": true,\n    \"customscript/sd_upscale.py/img2img/Scale Factor/value\": 2.0,\n    \"customscript/sd_upscale.py/img2img/Scale Factor/minimum\": 1.0,\n    \"customscript/sd_upscale.py/img2img/Scale Factor/maximum\": 4.0,\n    \"customscript/sd_upscale.py/img2img/Scale Factor/step\": 0.05,\n    \"customscript/sd_upscale.py/img2img/Upscaler/visible\": true,\n    \"customscript/sd_upscale.py/img2img/Upscaler/value\": \"None\",\n    \"customscript/xyz_grid.py/img2img/X type/visible\": true,\n    \"customscript/xyz_grid.py/img2img/X type/value\": \"Seed\",\n    \"customscript/xyz_grid.py/img2img/X values/visible\": true,\n    \"customscript/xyz_grid.py/img2img/X values/value\": \"\",\n    \"customscript/xyz_grid.py/img2img/Y type/visible\": true,\n    \"customscript/xyz_grid.py/img2img/Y type/value\": \"Nothing\",\n    \"customscript/xyz_grid.py/img2img/Y values/visible\": true,\n    \"customscript/xyz_grid.py/img2img/Y values/value\": \"\",\n    \"customscript/xyz_grid.py/img2img/Z type/visible\": true,\n    \"customscript/xyz_grid.py/img2img/Z type/value\": \"Nothing\",\n    \"customscript/xyz_grid.py/img2img/Z values/visible\": true,\n    \"customscript/xyz_grid.py/img2img/Z values/value\": \"\",\n    \"customscript/xyz_grid.py/img2img/Draw legend/visible\": true,\n    \"customscript/xyz_grid.py/img2img/Draw legend/value\": true,\n    \"customscript/xyz_grid.py/img2img/Keep -1 for seeds/visible\": true,\n    \"customscript/xyz_grid.py/img2img/Keep -1 for seeds/value\": false,\n    \"customscript/xyz_grid.py/img2img/Include Sub Images/visible\": true,\n    \"customscript/xyz_grid.py/img2img/Include Sub Images/value\": false,\n    \"customscript/xyz_grid.py/img2img/Include Sub Grids/visible\": true,\n    \"customscript/xyz_grid.py/img2img/Include Sub Grids/value\": false,\n    \"customscript/xyz_grid.py/img2img/Grid margins (px)/visible\": true,\n    \"customscript/xyz_grid.py/img2img/Grid margins (px)/value\": 0,\n    \"customscript/xyz_grid.py/img2img/Grid margins (px)/minimum\": 0,\n    \"customscript/xyz_grid.py/img2img/Grid margins (px)/maximum\": 500,\n    \"customscript/xyz_grid.py/img2img/Grid margins (px)/step\": 2,\n    \"customscript/xyz_grid.py/img2img/Use text inputs instead of dropdowns/visible\": true,\n    \"customscript/xyz_grid.py/img2img/Use text inputs instead of dropdowns/value\": false,\n    \"img2img/Swap X/Y axes/visible\": true,\n    \"img2img/Swap Y/Z axes/visible\": true,\n    \"img2img/Swap X/Z axes/visible\": true,\n    \"img2img/📂/visible\": true,\n    \"img2img/💾/visible\": true,\n    \"img2img/🗃️/visible\": true,\n    \"img2img/🖼️/visible\": true,\n    \"img2img/🎨️/visible\": true,\n    \"img2img/Description/visible\": true,\n    \"img2img/Description/value\": \"\",\n    \"img2img/Cancel/visible\": true,\n    \"img2img/Replace preview/visible\": true,\n    \"img2img/Save/visible\": true,\n    \"img2img/Preferred VAE/visible\": true,\n    \"img2img/Preferred VAE/value\": \"None\",\n    \"img2img/Stable Diffusion version/visible\": true,\n    \"img2img/Stable Diffusion version/value\": \"Unknown\",\n    \"img2img/Activation text/visible\": true,\n    \"img2img/Activation text/value\": \"\",\n    \"img2img/Preferred weight/visible\": true,\n    \"img2img/Preferred weight/value\": 0.0,\n    \"img2img/Preferred weight/minimum\": 0.0,\n    \"img2img/Preferred weight/maximum\": 2.0,\n    \"img2img/Preferred weight/step\": 0.01,\n    \"img2img/Random prompt/visible\": true,\n    \"img2img/Random prompt/value\": \"\",\n    \"img2img/img2img_extra_sort_order/value\": \"Path\",\n    \"img2img/Show dirs/value\": true,\n    \"extras/Tabs@mode_extras/selected\": null,\n    \"extras/Input directory/visible\": true,\n    \"extras/Input directory/value\": \"\",\n    \"extras/Output directory/visible\": true,\n    \"extras/Output directory/value\": \"\",\n    \"extras/Show result images/visible\": true,\n    \"extras/Show result images/value\": true,\n    \"extras/Tabs@extras_resize_mode/selected\": null,\n    \"customscript/postprocessing_upscale.py/extras/Resize/visible\": true,\n    \"customscript/postprocessing_upscale.py/extras/Resize/value\": 4,\n    \"customscript/postprocessing_upscale.py/extras/Resize/minimum\": 1.0,\n    \"customscript/postprocessing_upscale.py/extras/Resize/maximum\": 8.0,\n    \"customscript/postprocessing_upscale.py/extras/Resize/step\": 0.05,\n    \"customscript/postprocessing_upscale.py/extras/Width/visible\": true,\n    \"customscript/postprocessing_upscale.py/extras/Width/value\": 512,\n    \"customscript/postprocessing_upscale.py/extras/Width/minimum\": 64,\n    \"customscript/postprocessing_upscale.py/extras/Width/maximum\": 2048,\n    \"customscript/postprocessing_upscale.py/extras/Width/step\": 8,\n    \"customscript/postprocessing_upscale.py/extras/Height/visible\": true,\n    \"customscript/postprocessing_upscale.py/extras/Height/value\": 512,\n    \"customscript/postprocessing_upscale.py/extras/Height/minimum\": 64,\n    \"customscript/postprocessing_upscale.py/extras/Height/maximum\": 2048,\n    \"customscript/postprocessing_upscale.py/extras/Height/step\": 8,\n    \"extras/⇅/visible\": true,\n    \"customscript/postprocessing_upscale.py/extras/Crop to fit/visible\": true,\n    \"customscript/postprocessing_upscale.py/extras/Crop to fit/value\": true,\n    \"customscript/postprocessing_upscale.py/extras/Upscaler 1/visible\": true,\n    \"customscript/postprocessing_upscale.py/extras/Upscaler 1/value\": \"None\",\n    \"customscript/postprocessing_upscale.py/extras/Upscaler 2/visible\": true,\n    \"customscript/postprocessing_upscale.py/extras/Upscaler 2/value\": \"None\",\n    \"customscript/postprocessing_upscale.py/extras/Upscaler 2 visibility/visible\": true,\n    \"customscript/postprocessing_upscale.py/extras/Upscaler 2 visibility/value\": 0.0,\n    \"customscript/postprocessing_upscale.py/extras/Upscaler 2 visibility/minimum\": 0.0,\n    \"customscript/postprocessing_upscale.py/extras/Upscaler 2 visibility/maximum\": 1.0,\n    \"customscript/postprocessing_upscale.py/extras/Upscaler 2 visibility/step\": 0.001,\n    \"extras/GFPGAN/visible\": true,\n    \"customscript/postprocessing_gfpgan.py/extras/GFPGAN/value\": false,\n    \"extras/GFPGAN/value\": false,\n    \"customscript/postprocessing_gfpgan.py/extras/Visibility/visible\": true,\n    \"customscript/postprocessing_gfpgan.py/extras/Visibility/value\": 1.0,\n    \"customscript/postprocessing_gfpgan.py/extras/Visibility/minimum\": 0.0,\n    \"customscript/postprocessing_gfpgan.py/extras/Visibility/maximum\": 1.0,\n    \"customscript/postprocessing_gfpgan.py/extras/Visibility/step\": 0.001,\n    \"extras/CodeFormer/visible\": true,\n    \"customscript/postprocessing_codeformer.py/extras/CodeFormer/value\": false,\n    \"extras/CodeFormer/value\": false,\n    \"customscript/postprocessing_codeformer.py/extras/Visibility/visible\": true,\n    \"customscript/postprocessing_codeformer.py/extras/Visibility/value\": 1.0,\n    \"customscript/postprocessing_codeformer.py/extras/Visibility/minimum\": 0.0,\n    \"customscript/postprocessing_codeformer.py/extras/Visibility/maximum\": 1.0,\n    \"customscript/postprocessing_codeformer.py/extras/Visibility/step\": 0.001,\n    \"customscript/postprocessing_codeformer.py/extras/Weight (0 = maximum effect, 1 = minimum effect)/visible\": true,\n    \"customscript/postprocessing_codeformer.py/extras/Weight (0 = maximum effect, 1 = minimum effect)/value\": 0,\n    \"customscript/postprocessing_codeformer.py/extras/Weight (0 = maximum effect, 1 = minimum effect)/minimum\": 0.0,\n    \"customscript/postprocessing_codeformer.py/extras/Weight (0 = maximum effect, 1 = minimum effect)/maximum\": 1.0,\n    \"customscript/postprocessing_codeformer.py/extras/Weight (0 = maximum effect, 1 = minimum effect)/step\": 0.001,\n    \"extras/Auto focal point crop/visible\": true,\n    \"customscript/postprocessing_focal_crop.py/extras/Auto focal point crop/value\": false,\n    \"extras/Auto focal point crop/value\": false,\n    \"customscript/postprocessing_focal_crop.py/extras/Focal point face weight/visible\": true,\n    \"customscript/postprocessing_focal_crop.py/extras/Focal point face weight/value\": 0.9,\n    \"customscript/postprocessing_focal_crop.py/extras/Focal point face weight/minimum\": 0.0,\n    \"customscript/postprocessing_focal_crop.py/extras/Focal point face weight/maximum\": 1.0,\n    \"customscript/postprocessing_focal_crop.py/extras/Focal point face weight/step\": 0.05,\n    \"customscript/postprocessing_focal_crop.py/extras/Focal point entropy weight/visible\": true,\n    \"customscript/postprocessing_focal_crop.py/extras/Focal point entropy weight/value\": 0.15,\n    \"customscript/postprocessing_focal_crop.py/extras/Focal point entropy weight/minimum\": 0.0,\n    \"customscript/postprocessing_focal_crop.py/extras/Focal point entropy weight/maximum\": 1.0,\n    \"customscript/postprocessing_focal_crop.py/extras/Focal point entropy weight/step\": 0.05,\n    \"customscript/postprocessing_focal_crop.py/extras/Focal point edges weight/visible\": true,\n    \"customscript/postprocessing_focal_crop.py/extras/Focal point edges weight/value\": 0.5,\n    \"customscript/postprocessing_focal_crop.py/extras/Focal point edges weight/minimum\": 0.0,\n    \"customscript/postprocessing_focal_crop.py/extras/Focal point edges weight/maximum\": 1.0,\n    \"customscript/postprocessing_focal_crop.py/extras/Focal point edges weight/step\": 0.05,\n    \"customscript/postprocessing_focal_crop.py/extras/Create debug image/visible\": true,\n    \"customscript/postprocessing_focal_crop.py/extras/Create debug image/value\": false,\n    \"extras/Auto-sized crop/visible\": true,\n    \"customscript/processing_autosized_crop.py/extras/Auto-sized crop/value\": false,\n    \"extras/Auto-sized crop/value\": false,\n    \"customscript/processing_autosized_crop.py/extras/Dimension lower bound/visible\": true,\n    \"customscript/processing_autosized_crop.py/extras/Dimension lower bound/value\": 384,\n    \"customscript/processing_autosized_crop.py/extras/Dimension lower bound/minimum\": 64,\n    \"customscript/processing_autosized_crop.py/extras/Dimension lower bound/maximum\": 2048,\n    \"customscript/processing_autosized_crop.py/extras/Dimension lower bound/step\": 8,\n    \"customscript/processing_autosized_crop.py/extras/Dimension upper bound/visible\": true,\n    \"customscript/processing_autosized_crop.py/extras/Dimension upper bound/value\": 768,\n    \"customscript/processing_autosized_crop.py/extras/Dimension upper bound/minimum\": 64,\n    \"customscript/processing_autosized_crop.py/extras/Dimension upper bound/maximum\": 2048,\n    \"customscript/processing_autosized_crop.py/extras/Dimension upper bound/step\": 8,\n    \"customscript/processing_autosized_crop.py/extras/Area lower bound/visible\": true,\n    \"customscript/processing_autosized_crop.py/extras/Area lower bound/value\": 4096,\n    \"customscript/processing_autosized_crop.py/extras/Area lower bound/minimum\": 4096,\n    \"customscript/processing_autosized_crop.py/extras/Area lower bound/maximum\": 4194304,\n    \"customscript/processing_autosized_crop.py/extras/Area lower bound/step\": 1,\n    \"customscript/processing_autosized_crop.py/extras/Area upper bound/visible\": true,\n    \"customscript/processing_autosized_crop.py/extras/Area upper bound/value\": 409600,\n    \"customscript/processing_autosized_crop.py/extras/Area upper bound/minimum\": 4096,\n    \"customscript/processing_autosized_crop.py/extras/Area upper bound/maximum\": 4194304,\n    \"customscript/processing_autosized_crop.py/extras/Area upper bound/step\": 1,\n    \"customscript/processing_autosized_crop.py/extras/Resizing objective/visible\": true,\n    \"customscript/processing_autosized_crop.py/extras/Resizing objective/value\": \"Maximize area\",\n    \"customscript/processing_autosized_crop.py/extras/Error threshold/visible\": true,\n    \"customscript/processing_autosized_crop.py/extras/Error threshold/value\": 0.1,\n    \"customscript/processing_autosized_crop.py/extras/Error threshold/minimum\": 0,\n    \"customscript/processing_autosized_crop.py/extras/Error threshold/maximum\": 1,\n    \"customscript/processing_autosized_crop.py/extras/Error threshold/step\": 0.01,\n    \"extras/Caption/visible\": true,\n    \"customscript/postprocessing_caption.py/extras/Caption/value\": false,\n    \"extras/Caption/value\": false,\n    \"extras/Create flipped copies/visible\": true,\n    \"customscript/postprocessing_create_flipped_copies.py/extras/Create flipped copies/value\": false,\n    \"extras/Create flipped copies/value\": false,\n    \"extras/Split oversized images/visible\": true,\n    \"customscript/postprocessing_split_oversized.py/extras/Split oversized images/value\": false,\n    \"extras/Split oversized images/value\": false,\n    \"customscript/postprocessing_split_oversized.py/extras/Threshold/visible\": true,\n    \"customscript/postprocessing_split_oversized.py/extras/Threshold/value\": 0.5,\n    \"customscript/postprocessing_split_oversized.py/extras/Threshold/minimum\": 0.0,\n    \"customscript/postprocessing_split_oversized.py/extras/Threshold/maximum\": 1.0,\n    \"customscript/postprocessing_split_oversized.py/extras/Threshold/step\": 0.05,\n    \"customscript/postprocessing_split_oversized.py/extras/Overlap ratio/visible\": true,\n    \"customscript/postprocessing_split_oversized.py/extras/Overlap ratio/value\": 0.2,\n    \"customscript/postprocessing_split_oversized.py/extras/Overlap ratio/minimum\": 0.0,\n    \"customscript/postprocessing_split_oversized.py/extras/Overlap ratio/maximum\": 0.9,\n    \"customscript/postprocessing_split_oversized.py/extras/Overlap ratio/step\": 0.05,\n    \"extras/Interrupt/visible\": true,\n    \"extras/Skip/visible\": true,\n    \"extras/Generate/visible\": true,\n    \"extras/📂/visible\": true,\n    \"extras/🖼️/visible\": true,\n    \"extras/🎨️/visible\": true,\n    \"extras/📐/visible\": true,\n    \"pnginfo/Send to txt2img/visible\": true,\n    \"pnginfo/Send to img2img/visible\": true,\n    \"pnginfo/Send to inpaint/visible\": true,\n    \"pnginfo/Send to extras/visible\": true,\n    \"modelmerger/Primary model (A)/visible\": true,\n    \"modelmerger/Primary model (A)/value\": null,\n    \"modelmerger/🔄/visible\": true,\n    \"modelmerger/Secondary model (B)/visible\": true,\n    \"modelmerger/Secondary model (B)/value\": null,\n    \"modelmerger/Tertiary model (C)/visible\": true,\n    \"modelmerger/Tertiary model (C)/value\": null,\n    \"modelmerger/Custom Name (Optional)/visible\": true,\n    \"modelmerger/Custom Name (Optional)/value\": \"\",\n    \"modelmerger/Multiplier (M) - set to 0 to get model A/visible\": true,\n    \"modelmerger/Multiplier (M) - set to 0 to get model A/value\": 0.3,\n    \"modelmerger/Multiplier (M) - set to 0 to get model A/minimum\": 0.0,\n    \"modelmerger/Multiplier (M) - set to 0 to get model A/maximum\": 1.0,\n    \"modelmerger/Multiplier (M) - set to 0 to get model A/step\": 0.05,\n    \"modelmerger/Interpolation Method/visible\": true,\n    \"modelmerger/Interpolation Method/value\": \"Weighted sum\",\n    \"modelmerger/Checkpoint format/visible\": true,\n    \"modelmerger/Checkpoint format/value\": \"safetensors\",\n    \"modelmerger/Save as float16/visible\": true,\n    \"modelmerger/Save as float16/value\": false,\n    \"modelmerger/Copy config from/visible\": true,\n    \"modelmerger/Copy config from/value\": \"A, B or C\",\n    \"modelmerger/Bake in VAE/visible\": true,\n    \"modelmerger/Bake in VAE/value\": \"None\",\n    \"modelmerger/Discard weights with matching name/visible\": true,\n    \"modelmerger/Discard weights with matching name/value\": \"\",\n    \"modelmerger/Save metadata/visible\": true,\n    \"modelmerger/Save metadata/value\": true,\n    \"modelmerger/Add merge recipe metadata/visible\": true,\n    \"modelmerger/Add merge recipe metadata/value\": true,\n    \"modelmerger/Copy metadata from merged models/visible\": true,\n    \"modelmerger/Copy metadata from merged models/value\": true,\n    \"modelmerger/Read metadata from selected checkpoints/visible\": true,\n    \"modelmerger/Merge/visible\": true,\n    \"train/Tabs@train_tabs/selected\": null,\n    \"train/Name/visible\": true,\n    \"train/Name/value\": \"\",\n    \"train/Initialization text/visible\": true,\n    \"train/Initialization text/value\": \"*\",\n    \"train/Number of vectors per token/visible\": true,\n    \"train/Number of vectors per token/value\": 1,\n    \"train/Number of vectors per token/minimum\": 1,\n    \"train/Number of vectors per token/maximum\": 75,\n    \"train/Number of vectors per token/step\": 1,\n    \"train/Overwrite Old Embedding/visible\": true,\n    \"train/Overwrite Old Embedding/value\": false,\n    \"train/Create embedding/visible\": true,\n    \"train/Enter hypernetwork layer structure/visible\": true,\n    \"train/Enter hypernetwork layer structure/value\": \"1, 2, 1\",\n    \"train/Select activation function of hypernetwork. Recommended : Swish / Linear(none)/visible\": true,\n    \"train/Select activation function of hypernetwork. Recommended : Swish / Linear(none)/value\": \"linear\",\n    \"train/Select Layer weights initialization. Recommended: Kaiming for relu-like, Xavier for sigmoid-like, Normal otherwise/visible\": true,\n    \"train/Select Layer weights initialization. Recommended: Kaiming for relu-like, Xavier for sigmoid-like, Normal otherwise/value\": \"Normal\",\n    \"train/Add layer normalization/visible\": true,\n    \"train/Add layer normalization/value\": false,\n    \"train/Use dropout/visible\": true,\n    \"train/Use dropout/value\": false,\n    \"train/Enter hypernetwork Dropout structure (or empty). Recommended : 0~0.35 incrementing sequence: 0, 0.05, 0.15/visible\": true,\n    \"train/Enter hypernetwork Dropout structure (or empty). Recommended : 0~0.35 incrementing sequence: 0, 0.05, 0.15/value\": \"0, 0, 0\",\n    \"train/Overwrite Old Hypernetwork/visible\": true,\n    \"train/Overwrite Old Hypernetwork/value\": false,\n    \"train/Create hypernetwork/visible\": true,\n    \"train/Embedding/visible\": true,\n    \"train/Embedding/value\": null,\n    \"train/🔄/visible\": true,\n    \"train/Hypernetwork/visible\": true,\n    \"train/Hypernetwork/value\": null,\n    \"train/Embedding Learning rate/visible\": true,\n    \"train/Embedding Learning rate/value\": \"0.005\",\n    \"train/Hypernetwork Learning rate/visible\": true,\n    \"train/Hypernetwork Learning rate/value\": \"0.00001\",\n    \"train/Gradient Clipping/visible\": true,\n    \"train/Gradient Clipping/value\": \"disabled\",\n    \"train/Batch size/visible\": true,\n    \"train/Batch size/value\": 1,\n    \"train/Gradient accumulation steps/visible\": true,\n    \"train/Gradient accumulation steps/value\": 1,\n    \"train/Dataset directory/visible\": true,\n    \"train/Dataset directory/value\": \"\",\n    \"train/Log directory/visible\": true,\n    \"train/Log directory/value\": \"textual_inversion\",\n    \"train/Prompt template/visible\": true,\n    \"train/Prompt template/value\": \"style_filewords.txt\",\n    \"train/Width/visible\": true,\n    \"train/Width/value\": 512,\n    \"train/Width/minimum\": 64,\n    \"train/Width/maximum\": 2048,\n    \"train/Width/step\": 8,\n    \"train/Height/visible\": true,\n    \"train/Height/value\": 512,\n    \"train/Height/minimum\": 64,\n    \"train/Height/maximum\": 2048,\n    \"train/Height/step\": 8,\n    \"train/Do not resize images/visible\": true,\n    \"train/Do not resize images/value\": false,\n    \"train/Max steps/visible\": true,\n    \"train/Max steps/value\": 100000,\n    \"train/Save an image to log directory every N steps, 0 to disable/visible\": true,\n    \"train/Save an image to log directory every N steps, 0 to disable/value\": 500,\n    \"train/Save a copy of embedding to log directory every N steps, 0 to disable/visible\": true,\n    \"train/Save a copy of embedding to log directory every N steps, 0 to disable/value\": 500,\n    \"train/Use PNG alpha channel as loss weight/visible\": true,\n    \"train/Use PNG alpha channel as loss weight/value\": false,\n    \"train/Save images with embedding in PNG chunks/visible\": true,\n    \"train/Save images with embedding in PNG chunks/value\": true,\n    \"train/Read parameters (prompt, etc...) from txt2img tab when making previews/visible\": true,\n    \"train/Read parameters (prompt, etc...) from txt2img tab when making previews/value\": false,\n    \"train/Shuffle tags by ',' when creating prompts./visible\": true,\n    \"train/Shuffle tags by ',' when creating prompts./value\": false,\n    \"train/Drop out tags when creating prompts./visible\": true,\n    \"train/Drop out tags when creating prompts./value\": 0,\n    \"train/Drop out tags when creating prompts./minimum\": 0,\n    \"train/Drop out tags when creating prompts./maximum\": 1,\n    \"train/Drop out tags when creating prompts./step\": 0.1,\n    \"train/Choose latent sampling method/visible\": true,\n    \"train/Choose latent sampling method/value\": \"once\",\n    \"train/Train Embedding/visible\": true,\n    \"train/Interrupt/visible\": true,\n    \"train/Train Hypernetwork/visible\": true,\n    \"webui/Tabs@tabs/selected\": null\n}"
        },
        {
          "name": "webui-macos-env.sh",
          "type": "blob",
          "size": 0.6552734375,
          "content": "#!/bin/bash\n####################################################################\n#                          macOS defaults                          #\n# Please modify webui-user.sh to change these instead of this file #\n####################################################################\n\nif [[ -x \"$(command -v python3.10)\" ]]\nthen\n    python_cmd=\"python3.10\"\nfi\n\nexport install_dir=\"$HOME\"\n#export COMMANDLINE_ARGS=\"--skip-torch-cuda-test --upcast-sampling --no-half-vae --use-cpu interrogate\"\nexport TORCH_COMMAND=\"pip install torch==2.0.1 torchvision==0.15.2\"\nexport PYTORCH_ENABLE_MPS_FALLBACK=1\n\n####################################################################\n"
        },
        {
          "name": "webui-user.bat",
          "type": "blob",
          "size": 0.08203125,
          "content": "@echo off\n\nset PYTHON=\nset GIT=\nset VENV_DIR=\nset COMMANDLINE_ARGS=\n\ncall webui.bat\n"
        },
        {
          "name": "webui-user.sh",
          "type": "blob",
          "size": 1.298828125,
          "content": "#!/bin/bash\n#########################################################\n# Uncomment and change the variables below to your need:#\n#########################################################\n\n# Install directory without trailing slash\n#install_dir=\"/home/$(whoami)\"\n\n# Name of the subdirectory\n#clone_dir=\"stable-diffusion-webui\"\n\n# Commandline arguments for webui.py, for example: export COMMANDLINE_ARGS=\"--medvram --opt-split-attention\"\n#export COMMANDLINE_ARGS=\n\n# python3 executable\n#python_cmd=\"python3\"\n\n# git executable\n#export GIT=\"git\"\n\n# python3 venv without trailing slash (defaults to ${install_dir}/${clone_dir}/venv)\n#venv_dir=\"venv\"\n\n# script to launch to start the app\n#export LAUNCH_SCRIPT=\"launch.py\"\n\n# install command for torch\n#export TORCH_COMMAND=\"pip install torch==1.12.1+cu113 --extra-index-url https://download.pytorch.org/whl/cu113\"\n\n# Requirements file to use for stable-diffusion-webui\n#export REQS_FILE=\"requirements_versions.txt\"\n\n# Fixed git repos\n#export K_DIFFUSION_PACKAGE=\"\"\n#export GFPGAN_PACKAGE=\"\"\n\n# Fixed git commits\n#export STABLE_DIFFUSION_COMMIT_HASH=\"\"\n#export CODEFORMER_COMMIT_HASH=\"\"\n#export BLIP_COMMIT_HASH=\"\"\n\n# Uncomment to enable accelerated launch\n#export ACCELERATE=\"True\"\n\n# Uncomment to disable TCMalloc\n#export NO_TCMALLOC=\"True\"\n\n###########################################\n"
        },
        {
          "name": "webui.bat",
          "type": "blob",
          "size": 2.19921875,
          "content": "@echo off\n\nif exist webui.settings.bat (\n    call webui.settings.bat\n)\n\nif not defined PYTHON (set PYTHON=python)\nif defined GIT (set \"GIT_PYTHON_GIT_EXECUTABLE=%GIT%\")\nif not defined VENV_DIR (set \"VENV_DIR=%~dp0%venv\")\n\nset SD_WEBUI_RESTART=tmp/restart\nset ERROR_REPORTING=FALSE\n\nmkdir tmp 2>NUL\n\n%PYTHON% -c \"\" >tmp/stdout.txt 2>tmp/stderr.txt\nif %ERRORLEVEL% == 0 goto :check_pip\necho Couldn't launch python\ngoto :show_stdout_stderr\n\n:check_pip\n%PYTHON% -mpip --help >tmp/stdout.txt 2>tmp/stderr.txt\nif %ERRORLEVEL% == 0 goto :start_venv\nif \"%PIP_INSTALLER_LOCATION%\" == \"\" goto :show_stdout_stderr\n%PYTHON% \"%PIP_INSTALLER_LOCATION%\" >tmp/stdout.txt 2>tmp/stderr.txt\nif %ERRORLEVEL% == 0 goto :start_venv\necho Couldn't install pip\ngoto :show_stdout_stderr\n\n:start_venv\nif [\"%VENV_DIR%\"] == [\"-\"] goto :skip_venv\nif [\"%SKIP_VENV%\"] == [\"1\"] goto :skip_venv\n\ndir \"%VENV_DIR%\\Scripts\\Python.exe\" >tmp/stdout.txt 2>tmp/stderr.txt\nif %ERRORLEVEL% == 0 goto :activate_venv\n\nfor /f \"delims=\" %%i in ('CALL %PYTHON% -c \"import sys; print(sys.executable)\"') do set PYTHON_FULLNAME=\"%%i\"\necho Creating venv in directory %VENV_DIR% using python %PYTHON_FULLNAME%\n%PYTHON_FULLNAME% -m venv \"%VENV_DIR%\" >tmp/stdout.txt 2>tmp/stderr.txt\nif %ERRORLEVEL% == 0 goto :activate_venv\necho Unable to create venv in directory \"%VENV_DIR%\"\ngoto :show_stdout_stderr\n\n:activate_venv\nset PYTHON=\"%VENV_DIR%\\Scripts\\Python.exe\"\necho venv %PYTHON%\n\n:skip_venv\nif [%ACCELERATE%] == [\"True\"] goto :accelerate\ngoto :launch\n\n:accelerate\necho Checking for accelerate\nset ACCELERATE=\"%VENV_DIR%\\Scripts\\accelerate.exe\"\nif EXIST %ACCELERATE% goto :accelerate_launch\n\n:launch\n%PYTHON% launch.py %*\nif EXIST tmp/restart goto :skip_venv\npause\nexit /b\n\n:accelerate_launch\necho Accelerating\n%ACCELERATE% launch --num_cpu_threads_per_process=6 launch.py\nif EXIST tmp/restart goto :skip_venv\npause\nexit /b\n\n:show_stdout_stderr\n\necho.\necho exit code: %errorlevel%\n\nfor /f %%i in (\"tmp\\stdout.txt\") do set size=%%~zi\nif %size% equ 0 goto :show_stderr\necho.\necho stdout:\ntype tmp\\stdout.txt\n\n:show_stderr\nfor /f %%i in (\"tmp\\stderr.txt\") do set size=%%~zi\nif %size% equ 0 goto :show_stderr\necho.\necho stderr:\ntype tmp\\stderr.txt\n\n:endofscript\n\necho.\necho Launch unsuccessful. Exiting.\npause\n"
        },
        {
          "name": "webui.py",
          "type": "blob",
          "size": 5.13671875,
          "content": "from __future__ import annotations\n\nimport os\nimport time\n\nfrom modules import timer\nfrom modules import initialize_util\nfrom modules import initialize\n\nstartup_timer = timer.startup_timer\nstartup_timer.record(\"launcher\")\n\ninitialize.imports()\n\ninitialize.check_versions()\n\n\ndef create_api(app):\n    from modules.api.api import Api\n    from modules.call_queue import queue_lock\n\n    api = Api(app, queue_lock)\n    return api\n\n\ndef api_only():\n    from fastapi import FastAPI\n    from modules.shared_cmd_options import cmd_opts\n\n    initialize.initialize()\n\n    app = FastAPI()\n    initialize_util.setup_middleware(app)\n    api = create_api(app)\n\n    from modules import script_callbacks\n    script_callbacks.before_ui_callback()\n    script_callbacks.app_started_callback(None, app)\n\n    print(f\"Startup time: {startup_timer.summary()}.\")\n    api.launch(\n        server_name=\"0.0.0.0\" if cmd_opts.listen else \"127.0.0.1\",\n        port=cmd_opts.port if cmd_opts.port else 7861,\n        root_path=f\"/{cmd_opts.subpath}\" if cmd_opts.subpath else \"\"\n    )\n\n\ndef webui():\n    from modules.shared_cmd_options import cmd_opts\n\n    launch_api = cmd_opts.api\n    initialize.initialize()\n\n    from modules import shared, ui_tempdir, script_callbacks, ui, progress, ui_extra_networks\n\n    while 1:\n        if shared.opts.clean_temp_dir_at_start:\n            ui_tempdir.cleanup_tmpdr()\n            startup_timer.record(\"cleanup temp dir\")\n\n        script_callbacks.before_ui_callback()\n        startup_timer.record(\"scripts before_ui_callback\")\n\n        shared.demo = ui.create_ui()\n        startup_timer.record(\"create ui\")\n\n        if not cmd_opts.no_gradio_queue:\n            shared.demo.queue(64)\n\n        gradio_auth_creds = list(initialize_util.get_gradio_auth_creds()) or None\n\n        auto_launch_browser = False\n        if os.getenv('SD_WEBUI_RESTARTING') != '1':\n            if shared.opts.auto_launch_browser == \"Remote\" or cmd_opts.autolaunch:\n                auto_launch_browser = True\n            elif shared.opts.auto_launch_browser == \"Local\":\n                auto_launch_browser = not cmd_opts.webui_is_non_local\n\n        app, local_url, share_url = shared.demo.launch(\n            share=cmd_opts.share,\n            server_name=initialize_util.gradio_server_name(),\n            server_port=cmd_opts.port,\n            ssl_keyfile=cmd_opts.tls_keyfile,\n            ssl_certfile=cmd_opts.tls_certfile,\n            ssl_verify=cmd_opts.disable_tls_verify,\n            debug=cmd_opts.gradio_debug,\n            auth=gradio_auth_creds,\n            inbrowser=auto_launch_browser,\n            prevent_thread_lock=True,\n            allowed_paths=cmd_opts.gradio_allowed_path,\n            app_kwargs={\n                \"docs_url\": \"/docs\",\n                \"redoc_url\": \"/redoc\",\n            },\n            root_path=f\"/{cmd_opts.subpath}\" if cmd_opts.subpath else \"\",\n        )\n\n        startup_timer.record(\"gradio launch\")\n\n        # gradio uses a very open CORS policy via app.user_middleware, which makes it possible for\n        # an attacker to trick the user into opening a malicious HTML page, which makes a request to the\n        # running web ui and do whatever the attacker wants, including installing an extension and\n        # running its code. We disable this here. Suggested by RyotaK.\n        app.user_middleware = [x for x in app.user_middleware if x.cls.__name__ != 'CORSMiddleware']\n\n        initialize_util.setup_middleware(app)\n\n        progress.setup_progress_api(app)\n        ui.setup_ui_api(app)\n\n        if launch_api:\n            create_api(app)\n\n        ui_extra_networks.add_pages_to_demo(app)\n\n        startup_timer.record(\"add APIs\")\n\n        with startup_timer.subcategory(\"app_started_callback\"):\n            script_callbacks.app_started_callback(shared.demo, app)\n\n        timer.startup_record = startup_timer.dump()\n        print(f\"Startup time: {startup_timer.summary()}.\")\n\n        try:\n            while True:\n                server_command = shared.state.wait_for_server_command(timeout=5)\n                if server_command:\n                    if server_command in (\"stop\", \"restart\"):\n                        break\n                    else:\n                        print(f\"Unknown server command: {server_command}\")\n        except KeyboardInterrupt:\n            print('Caught KeyboardInterrupt, stopping...')\n            server_command = \"stop\"\n\n        if server_command == \"stop\":\n            print(\"Stopping server...\")\n            # If we catch a keyboard interrupt, we want to stop the server and exit.\n            shared.demo.close()\n            break\n\n        # disable auto launch webui in browser for subsequent UI Reload\n        os.environ.setdefault('SD_WEBUI_RESTARTING', '1')\n\n        print('Restarting UI...')\n        shared.demo.close()\n        time.sleep(0.5)\n        startup_timer.reset()\n        script_callbacks.app_reload_callback()\n        startup_timer.record(\"app reload callback\")\n        script_callbacks.script_unloaded_callback()\n        startup_timer.record(\"scripts unloaded callback\")\n        initialize.initialize_rest(reload_script_modules=True)\n\n\nif __name__ == \"__main__\":\n    from modules.shared_cmd_options import cmd_opts\n\n    if cmd_opts.nowebui:\n        api_only()\n    else:\n        webui()\n"
        },
        {
          "name": "webui.sh",
          "type": "blob",
          "size": 7.8369140625,
          "content": "#!/usr/bin/env bash\n#################################################\n# Please do not make any changes to this file,  #\n# change the variables in webui-user.sh instead #\n#################################################\n\nSCRIPT_DIR=$( cd -- \"$( dirname -- \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )\n\n\n# If run from macOS, load defaults from webui-macos-env.sh\nif [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n    if [[ -f \"$SCRIPT_DIR\"/webui-macos-env.sh ]]\n        then\n        source \"$SCRIPT_DIR\"/webui-macos-env.sh\n    fi\nfi\n\n# Read variables from webui-user.sh\n# shellcheck source=/dev/null\nif [[ -f \"$SCRIPT_DIR\"/webui-user.sh ]]\nthen\n    source \"$SCRIPT_DIR\"/webui-user.sh\nfi\n\n# If $venv_dir is \"-\", then disable venv support\nuse_venv=1\nif [[ $venv_dir == \"-\" ]]; then\n  use_venv=0\nfi\n\n# Set defaults\n# Install directory without trailing slash\nif [[ -z \"${install_dir}\" ]]\nthen\n    install_dir=\"$SCRIPT_DIR\"\nfi\n\n# Name of the subdirectory (defaults to stable-diffusion-webui)\nif [[ -z \"${clone_dir}\" ]]\nthen\n    clone_dir=\"stable-diffusion-webui\"\nfi\n\n# python3 executable\nif [[ -z \"${python_cmd}\" ]]\nthen\n    python_cmd=\"python3\"\nfi\n\n# git executable\nif [[ -z \"${GIT}\" ]]\nthen\n    export GIT=\"git\"\nelse\n    export GIT_PYTHON_GIT_EXECUTABLE=\"${GIT}\"\nfi\n\n# python3 venv without trailing slash (defaults to ${install_dir}/${clone_dir}/venv)\nif [[ -z \"${venv_dir}\" ]] && [[ $use_venv -eq 1 ]]\nthen\n    venv_dir=\"venv\"\nfi\n\nif [[ -z \"${LAUNCH_SCRIPT}\" ]]\nthen\n    LAUNCH_SCRIPT=\"launch.py\"\nfi\n\n# this script cannot be run as root by default\ncan_run_as_root=0\n\n# read any command line flags to the webui.sh script\nwhile getopts \"f\" flag > /dev/null 2>&1\ndo\n    case ${flag} in\n        f) can_run_as_root=1;;\n        *) break;;\n    esac\ndone\n\n# Disable sentry logging\nexport ERROR_REPORTING=FALSE\n\n# Do not reinstall existing pip packages on Debian/Ubuntu\nexport PIP_IGNORE_INSTALLED=0\n\n# Pretty print\ndelimiter=\"################################################################\"\n\nprintf \"\\n%s\\n\" \"${delimiter}\"\nprintf \"\\e[1m\\e[32mInstall script for stable-diffusion + Web UI\\n\"\nprintf \"\\e[1m\\e[34mTested on Debian 11 (Bullseye), Fedora 34+ and openSUSE Leap 15.4 or newer.\\e[0m\"\nprintf \"\\n%s\\n\" \"${delimiter}\"\n\n# Do not run as root\nif [[ $(id -u) -eq 0 && can_run_as_root -eq 0 ]]\nthen\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    printf \"\\e[1m\\e[31mERROR: This script must not be launched as root, aborting...\\e[0m\"\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    exit 1\nelse\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    printf \"Running on \\e[1m\\e[32m%s\\e[0m user\" \"$(whoami)\"\n    printf \"\\n%s\\n\" \"${delimiter}\"\nfi\n\nif [[ $(getconf LONG_BIT) = 32 ]]\nthen\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    printf \"\\e[1m\\e[31mERROR: Unsupported Running on a 32bit OS\\e[0m\"\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    exit 1\nfi\n\nif [[ -d .git ]]\nthen\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    printf \"Repo already cloned, using it as install directory\"\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    install_dir=\"${PWD}/../\"\n    clone_dir=\"${PWD##*/}\"\nfi\n\n# Check prerequisites\ngpu_info=$(lspci 2>/dev/null | grep -E \"VGA|Display\")\ncase \"$gpu_info\" in\n    *\"Navi 1\"*)\n        export HSA_OVERRIDE_GFX_VERSION=10.3.0\n        if [[ -z \"${TORCH_COMMAND}\" ]]\n        then\n            pyv=\"$(${python_cmd} -c 'import sys; print(\".\".join(map(str, sys.version_info[0:2])))')\"\n            if [[ $(bc <<< \"$pyv <= 3.10\") -eq 1 ]] \n            then\n                # Navi users will still use torch 1.13 because 2.0 does not seem to work.\n                export TORCH_COMMAND=\"pip install torch==1.13.1+rocm5.2 torchvision==0.14.1+rocm5.2 --index-url https://download.pytorch.org/whl/rocm5.2\"\n            else\n                printf \"\\e[1m\\e[31mERROR: RX 5000 series GPUs must be using at max python 3.10, aborting...\\e[0m\"\n                exit 1\n            fi\n        fi\n    ;;\n    *\"Navi 2\"*) export HSA_OVERRIDE_GFX_VERSION=10.3.0\n    ;;\n    *\"Navi 3\"*) [[ -z \"${TORCH_COMMAND}\" ]] && \\\n         export TORCH_COMMAND=\"pip install torch torchvision --index-url https://download.pytorch.org/whl/test/rocm5.6\"\n        # Navi 3 needs at least 5.5 which is only on the torch 2.1.0 release candidates right now\n    ;;\n    *\"Renoir\"*) export HSA_OVERRIDE_GFX_VERSION=9.0.0\n        printf \"\\n%s\\n\" \"${delimiter}\"\n        printf \"Experimental support for Renoir: make sure to have at least 4GB of VRAM and 10GB of RAM or enable cpu mode: --use-cpu all --no-half\"\n        printf \"\\n%s\\n\" \"${delimiter}\"\n    ;;\n    *)\n    ;;\nesac\nif ! echo \"$gpu_info\" | grep -q \"NVIDIA\";\nthen\n    if echo \"$gpu_info\" | grep -q \"AMD\" && [[ -z \"${TORCH_COMMAND}\" ]]\n    then\n        export TORCH_COMMAND=\"pip install torch==2.0.1+rocm5.4.2 torchvision==0.15.2+rocm5.4.2 --index-url https://download.pytorch.org/whl/rocm5.4.2\"\n    fi\nfi\n\nfor preq in \"${GIT}\" \"${python_cmd}\"\ndo\n    if ! hash \"${preq}\" &>/dev/null\n    then\n        printf \"\\n%s\\n\" \"${delimiter}\"\n        printf \"\\e[1m\\e[31mERROR: %s is not installed, aborting...\\e[0m\" \"${preq}\"\n        printf \"\\n%s\\n\" \"${delimiter}\"\n        exit 1\n    fi\ndone\n\nif [[ $use_venv -eq 1 ]] && ! \"${python_cmd}\" -c \"import venv\" &>/dev/null\nthen\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    printf \"\\e[1m\\e[31mERROR: python3-venv is not installed, aborting...\\e[0m\"\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    exit 1\nfi\n\ncd \"${install_dir}\"/ || { printf \"\\e[1m\\e[31mERROR: Can't cd to %s/, aborting...\\e[0m\" \"${install_dir}\"; exit 1; }\nif [[ -d \"${clone_dir}\" ]]\nthen\n    cd \"${clone_dir}\"/ || { printf \"\\e[1m\\e[31mERROR: Can't cd to %s/%s/, aborting...\\e[0m\" \"${install_dir}\" \"${clone_dir}\"; exit 1; }\nelse\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    printf \"Clone stable-diffusion-webui\"\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    \"${GIT}\" clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git \"${clone_dir}\"\n    cd \"${clone_dir}\"/ || { printf \"\\e[1m\\e[31mERROR: Can't cd to %s/%s/, aborting...\\e[0m\" \"${install_dir}\" \"${clone_dir}\"; exit 1; }\nfi\n\nif [[ $use_venv -eq 1 ]] && [[ -z \"${VIRTUAL_ENV}\" ]];\nthen\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    printf \"Create and activate python venv\"\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    cd \"${install_dir}\"/\"${clone_dir}\"/ || { printf \"\\e[1m\\e[31mERROR: Can't cd to %s/%s/, aborting...\\e[0m\" \"${install_dir}\" \"${clone_dir}\"; exit 1; }\n    if [[ ! -d \"${venv_dir}\" ]]\n    then\n        \"${python_cmd}\" -m venv \"${venv_dir}\"\n        first_launch=1\n    fi\n    # shellcheck source=/dev/null\n    if [[ -f \"${venv_dir}\"/bin/activate ]]\n    then\n        source \"${venv_dir}\"/bin/activate\n    else\n        printf \"\\n%s\\n\" \"${delimiter}\"\n        printf \"\\e[1m\\e[31mERROR: Cannot activate python venv, aborting...\\e[0m\"\n        printf \"\\n%s\\n\" \"${delimiter}\"\n        exit 1\n    fi\nelse\n    printf \"\\n%s\\n\" \"${delimiter}\"\n    printf \"python venv already activate or run without venv: ${VIRTUAL_ENV}\"\n    printf \"\\n%s\\n\" \"${delimiter}\"\nfi\n\n# Try using TCMalloc on Linux\nprepare_tcmalloc() {\n    if [[ \"${OSTYPE}\" == \"linux\"* ]] && [[ -z \"${NO_TCMALLOC}\" ]] && [[ -z \"${LD_PRELOAD}\" ]]; then\n        TCMALLOC=\"$(PATH=/sbin:$PATH ldconfig -p | grep -Po \"libtcmalloc(_minimal|)\\.so\\.\\d\" | head -n 1)\"\n        if [[ ! -z \"${TCMALLOC}\" ]]; then\n            echo \"Using TCMalloc: ${TCMALLOC}\"\n            export LD_PRELOAD=\"${TCMALLOC}\"\n        else\n            printf \"\\e[1m\\e[31mCannot locate TCMalloc (improves CPU memory usage)\\e[0m\\n\"\n        fi\n    fi\n}\n\nKEEP_GOING=1\nexport SD_WEBUI_RESTART=tmp/restart\nwhile [[ \"$KEEP_GOING\" -eq \"1\" ]]; do\n    if [[ ! -z \"${ACCELERATE}\" ]] && [ ${ACCELERATE}=\"True\" ] && [ -x \"$(command -v accelerate)\" ]; then\n        printf \"\\n%s\\n\" \"${delimiter}\"\n        printf \"Accelerating launch.py...\"\n        printf \"\\n%s\\n\" \"${delimiter}\"\n        prepare_tcmalloc\n        accelerate launch --num_cpu_threads_per_process=6 \"${LAUNCH_SCRIPT}\" \"$@\"\n    else\n        printf \"\\n%s\\n\" \"${delimiter}\"\n        printf \"Launching launch.py...\"\n        printf \"\\n%s\\n\" \"${delimiter}\"\n        prepare_tcmalloc\n        \"${python_cmd}\" -u \"${LAUNCH_SCRIPT}\" \"$@\"\n    fi\n\n    if [[ ! -f tmp/restart ]]; then\n        KEEP_GOING=0\n    fi\ndone\n"
        }
      ]
    }
  ]
}