{
  "metadata": {
    "timestamp": 1736559669885,
    "page": 338,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "neozhaoliang/pywonderland",
      "stars": 4177,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0478515625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# IPython Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# dotenv\n.env\n\n# virtualenv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n\n*-data.inc\nsrc/**/*.py.bak\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2017 Zhao Liang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.3154296875,
          "content": "# A Tour in the Wonderland of Math with Python\n\n> **A collection of python scripts for drawing beautiful figures and animating interesting algorithms in mathematics**.\n\n## About this repo\n\nThe purpose of this project is to show the beauty of math with python by rendering high quality images, videos and animations. It consists of several independent projects with each one illustrates a special object/algorithm in math. The topics are chosen largely due to my personal taste:\n\n1. They must produce appealing results.\n2. There must be some non-trivial math behind them.\n3. The code should be as simple as possible.\n\n# What's fun here\n\n\n+ Todd-Coxeter algorithm and uniform polytopes\n\n    Use Todd-Coxeter algorithm to compute the data of a polytope, and render it in POV-Ray.\n\n    [[Book]](https://www.routledge.com/Handbook-of-Computational-Group-Theory/Holt-Eick-OBrien/p/book/9780367659448) | [[Doc]](https://pywonderland.com/polytopes)\n\n    <p align=\"center\">\n    <img src=\"images/polytopes.png\" width=600>\n    </p>\n\n    <p align=\"center\">\n    <img src=\"images/polyhedra_mirrors.png\" width=600>\n    </p>\n\n\n+ Möbius transformations\n\n    + When a Möbius transformation is an isometry of the hyperbolic disk, it must be of elliptic/parabolic/hyperbolic type, and it's elliptic/parabolic/hyperbolic if and only if it's a composition of reflections about two intersecting/parallel/hyper-parallel mirrors.\n\n        <p align=\"center\">\n        <img src=\"images/mobius.png\" width=600>\n        </p>\n\n    + A Möbius transformation can be uniquely extended to an isometry of the hyperbolic upper-half space.\n\n        <p align=\"center\">\n        <img src=\"images/h3_isometry.png\" width=600>\n        </p>\n\n+ Coxeter automata and 2D Uniform tilings\n\n    [[Casselman's Paper]](https://personal.math.ubc.ca/~cass/research/pdf/roots.pdf) | [[Doc]](https://pywonderland.com/uniform-tilings/)\n\n    <p align=\"center\">\n    <img src=\"images/hyperbolic-tilings.png\" width=600>\n    </p>\n\n+ GIF animations of maze and cellular automata\n\n    Generate maze animations containing thousands of frames in a few seconds. No external libs used and no drawing api call!\n\n    [[Doc]](https://pywonderland.com/gifmaze)\n\n    |    |    |\n    |:---:|:---:|\n    | ![](images/kruskal.gif) | ![](images/wilson-bfs.gif)    |\n    | ![](images/gosperglidergun.gif) | ![](images/langton-ant.gif) |\n\n\n+ Domino shuffling algorithm\n\n    This algorithm samples a perfectly random tiling of a aztec diamond.\n\n    [[Mathologer Video]](https://www.youtube.com/watch?v=Yy7Q8IWNfHM) | [[Paper]](https://arxiv.org/abs/math/9201305)\n\n    <p align=\"center\">\n    <img src=\"images/dominoshuffling.gif\" width=400>\n    </p>\n\n+ Propp and Wilson's coupling from the past algorithm\n\n    [[Book](https://www.cambridge.org/core/books/finite-markov-chains-and-algorithmic-applications/EE10AF27811B43B02E05905DC6413467)]\n\n    <p align=\"center\">\n    <img src=\"images/random_lozenge_tiling.svg\" width=400>\n    </p>\n\n+ Catacaustics of plane curves\n\n    Use sympy to compute catacaustics of parametric and implicit curves.\n\n    [[Doc](https://pywonderland.com/catacaustics)]\n\n    |   |   |\n    |:---:|:---:|\n    | Cardioid as a catacaustic of circle | Nephroid as a catacaustic of cardioid |\n    |![](images/caustics_cardioid.png) | ![](images/caustics_nephroid.png)|\n\n\n+ Coxeter element and Coxeter plane\n\n    We explain how to project the E8 root system to its Coxeter plane.\n\n    [[Casselman's Paper](https://personal.math.ubc.ca/~cass/research/pdf/Element.pdf)] | [[Doc](https://pywonderland.com/e8-and-coxeter-plane/)]\n\n    |   |    |\n    |:---:|:---:|\n    | E8   |  5-Cube   |\n    | <img src=\"images/e8.svg\" width=300> | <img src=\"images/5-cube.svg\" width=300> |\n\n\n+ Assassin vs Bodyguards\n\n    Consider a room of regular polygon shape in the xy-plane, and let A (an \"assassin\") and T (a \"target\") be two arbitrary-but-fixed points within the room. Suppose that the room behaves like a billiard table, so that any ray (a.k.a \"shot\") from the assassin will bounce off the walls of the room, with the angle of incidence equaling the angle of reflection.\n\n    Puzzle: Is it possible to block any possible shot from A to T by placing a finite number of points in the room?\n\n    [[PBS Video](https://www.youtube.com/watch?v=a7gp9c2p0UQ)] | [[math3ma blog](https://www.math3ma.com/blog/is-the-square-a-secure-polygon)]\n\n    <p align=\"center\">\n    <img src=\"images/assassin_vs_bodyguards.png\" width=600>\n    </p>\n\n\n# How to use\n\nAll projects here are implemented in a ready-to-use manner for new comers. You can simply run the examples without tweaking any parameters once you have the dependencies installed correctly.\n\n# Dependencies\n\nThe recommended way to install all dependencies is simply running the bash script `install_dependencies.sh`.\n\n```\nsudo bash install_dependencies.sh\n```\n\nOr you can install the python libs by pip:\n\n```\npip install -r requirements.txt\n```\n\nOpen source softwares required:\n\n+ `python3-tk` (for file dialog)\n+ `ImageMagick` (for making gif animations)\n+ `FFmpeg` (for saving animations to video files)\n+ `POV-Ray` (for generating high quality raytracing results)\n+ `graphviz` (for drawing automata of Coxeter groups)\n+ `Inkscape` (optional, for convering large svg files to png)\n\nThey can all be installed via command-line:\n\n```\nsudo apt-get install python3-tk imagemagick ffmpeg povray graphviz inkscape\n```\n\n\nNote `pygraphviz` also requires `libgraphviz-dev`:\n\n```\nsudo apt-get install libgraphviz-dev\n```\n\nIn the scripts these softwares are called in command line as `povray`, `ffmpeg`, `convert` (from `ImageMagick`), etc. For Windows users you should add the directories contain these .exe files to the system `Path` environment variables to let the system know what executables these commands refer to. For example on Windows the default location of POV-Ray's exe file is `C:\\Program Files\\POV-Ray\\v3.7\\bin\\pvengine64.exe`, so you should add `C:\\Program Files\\POV-Ray\\v3.7\\bin` to system `Path` and rename `pvengine64.exe` to `povray.exe`, then you can run the scripts without any changes and everything should work fine.\n\n## Thanks\n\nI have learned a lot from the following people:\n\n- [Bill Casselman](http://www.math.ubc.ca/~cass/)\n- [Roice Nelson](https://github.com/roice3)\n- [Possibly Wrong](https://possiblywrong.wordpress.com/)\n- [Jos Leys](http://www.josleys.com/)\n- [Greg Egan](http://gregegan.net/)\n- [Matthew Arcus](https://github.com/matthewarcus).\n\n## License\n\nsee the LICENSE file.\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "install_dependencies.sh",
          "type": "blob",
          "size": 0.1953125,
          "content": "#!/bin/bash\n\nsudo apt-get install \\\n     povray \\\n     ffmpeg \\\n     imagemagick \\\n     graphviz \\\n     libgraphviz-dev \\\n     python3-cairocffi \\\n     inkscape\n\nsudo pip3 install -r requirements.txt\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1123046875,
          "content": "jupyter\nloguru\nmatplotlib\nnumba\nnumpy\npillow\npycairo\npyglet==1.5.27\npyyaml\nscipy\nsortedcontainers\nsympy\ntqdm\nvispy\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}