{
  "metadata": {
    "timestamp": 1736559665947,
    "page": 331,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sensity-ai/dot",
      "stars": 4190,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.0859375,
          "content": "[flake8]\nmax-line-length = 120\nextend-ignore = E203\nper-file-ignores = __init__.py:F401\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.654296875,
          "content": "# repo ignores\r\ndata/results/*\r\nsaved_models/*\r\n*.patch\r\n\r\n# Created by https://www.toptal.com/developers/gitignore/api/python,macos,windows,linux\r\n# Edit at https://www.toptal.com/developers/gitignore?templates=python,macos,windows,linux\r\n\r\n### Linux ###\r\n*~\r\n\r\n# temporary files which can be created if a process still has a handle open of a deleted file\r\n.fuse_hidden*\r\n\r\n# KDE directory preferences\r\n.directory\r\n\r\n# Linux trash folder which might appear on any partition or disk\r\n.Trash-*\r\n\r\n# .nfs files are created when an open file is removed but is still being accessed\r\n.nfs*\r\n\r\n### macOS ###\r\n# General\r\n.DS_Store\r\n.AppleDouble\r\n.LSOverride\r\n\r\n# Icon must end with two \\r\r\nIcon\r\n\r\n\r\n# Thumbnails\r\n._*\r\n\r\n# Files that might appear in the root of a volume\r\n.DocumentRevisions-V100\r\n.fseventsd\r\n.Spotlight-V100\r\n.TemporaryItems\r\n.Trashes\r\n.VolumeIcon.icns\r\n.com.apple.timemachine.donotpresent\r\n\r\n# Directories potentially created on remote AFP share\r\n.AppleDB\r\n.AppleDesktop\r\nNetwork Trash Folder\r\nTemporary Items\r\n.apdisk\r\n\r\n### macOS Patch ###\r\n# iCloud generated files\r\n*.icloud\r\n\r\n### Python ###\r\n# Byte-compiled / optimized / DLL files\r\n__pycache__/\r\n*.py[cod]\r\n*$py.class\r\n\r\n# C extensions\r\n*.so\r\n\r\n# Distribution / packaging\r\n.Python\r\nbuild/\r\ndevelop-eggs/\r\ndist/\r\ndownloads/\r\neggs/\r\n.eggs/\r\nlib/\r\nlib64/\r\nparts/\r\nsdist/\r\nvar/\r\nwheels/\r\nshare/python-wheels/\r\n*.egg-info/\r\n.installed.cfg\r\n*.egg\r\nMANIFEST\r\n\r\n# PyInstaller\r\n#  Usually these files are written by a python script from a template\r\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\r\n*.manifest\r\n*.spec\r\n\r\n# Installer logs\r\npip-log.txt\r\npip-delete-this-directory.txt\r\n\r\n# Unit test / coverage reports\r\nhtmlcov/\r\n.tox/\r\n.nox/\r\n.coverage\r\n.coverage.*\r\n.cache\r\nnosetests.xml\r\ncoverage.xml\r\n*.cover\r\n*.py,cover\r\n.hypothesis/\r\n.pytest_cache/\r\ncover/\r\n\r\n# Translations\r\n*.mo\r\n*.pot\r\n\r\n# Django stuff:\r\n*.log\r\nlocal_settings.py\r\ndb.sqlite3\r\ndb.sqlite3-journal\r\n\r\n# Flask stuff:\r\ninstance/\r\n.webassets-cache\r\n\r\n# Scrapy stuff:\r\n.scrapy\r\n\r\n# Sphinx documentation\r\ndocs/_build/\r\n\r\n# PyBuilder\r\n.pybuilder/\r\ntarget/\r\n\r\n# Jupyter Notebook\r\n.ipynb_checkpoints\r\n\r\n# IPython\r\nprofile_default/\r\nipython_config.py\r\n\r\n# pyenv\r\n#   For a library or package, you might want to ignore these files since the code is\r\n#   intended to run in multiple environments; otherwise, check them in:\r\n# .python-version\r\n\r\n# pipenv\r\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\r\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\r\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\r\n#   install all needed dependencies.\r\n#Pipfile.lock\r\n\r\n# poetry\r\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\r\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\r\n#   commonly ignored for libraries.\r\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\r\n#poetry.lock\r\n\r\n# pdm\r\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\r\n#pdm.lock\r\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\r\n#   in version control.\r\n#   https://pdm.fming.dev/#use-with-ide\r\n.pdm.toml\r\n\r\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\r\n__pypackages__/\r\n\r\n# Celery stuff\r\ncelerybeat-schedule\r\ncelerybeat.pid\r\n\r\n# SageMath parsed files\r\n*.sage.py\r\n\r\n# Environments\r\n.env\r\n.venv\r\nenv/\r\nvenv/\r\nENV/\r\nenv.bak/\r\nvenv.bak/\r\n\r\n# Spyder project settings\r\n.spyderproject\r\n.spyproject\r\n\r\n# Rope project settings\r\n.ropeproject\r\n\r\n# mkdocs documentation\r\n/site\r\n\r\n# mypy\r\n.mypy_cache/\r\n.dmypy.json\r\ndmypy.json\r\n\r\n# Pyre type checker\r\n.pyre/\r\n\r\n# pytype static type analyzer\r\n.pytype/\r\n\r\n# Cython debug symbols\r\ncython_debug/\r\n\r\n# PyCharm\r\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\r\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\r\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\r\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\r\n#.idea/\r\n\r\n### Windows ###\r\n# Windows thumbnail cache files\r\nThumbs.db\r\nThumbs.db:encryptable\r\nehthumbs.db\r\nehthumbs_vista.db\r\n\r\n# Dump file\r\n*.stackdump\r\n\r\n# Folder config file\r\n[Dd]esktop.ini\r\n\r\n# Recycle Bin used on file shares\r\n$RECYCLE.BIN/\r\n\r\n# Windows Installer files\r\n*.cab\r\n*.msi\r\n*.msix\r\n*.msm\r\n*.msp\r\n\r\n# Windows shortcuts\r\n*.lnk\r\n\r\n# End of https://www.toptal.com/developers/gitignore/api/python,macos,windows,linux\r\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.1171875,
          "content": "default_language_version:\n    python: python3.8\n\nrepos:\n      - repo: https://github.com/pre-commit/pre-commit-hooks\n        rev: v4.3.0\n        hooks:\n          - id: check-json\n          - id: check-toml\n          - id: check-yaml\n            args: [--allow-multiple-documents]\n          - id: end-of-file-fixer\n          - id: mixed-line-ending\n          - id: trailing-whitespace\n            args: [--markdown-linebreak-ext=md]\n            exclude: \"setup.cfg\"\n\n      - repo: https://github.com/psf/black\n        rev: 22.6.0\n        hooks:\n          - id: black\n\n      - repo: https://github.com/PyCQA/flake8\n        rev: 6.0.0\n        hooks:\n          - id: flake8\n            args: [--max-line-length=150, --extend-ignore=E203]\n\n      - repo: https://github.com/PyCQA/isort\n        rev: 5.12.0\n        hooks:\n          - id: isort\n            args: [\"--profile\", \"black\"]\n\n      - repo: https://github.com/pre-commit/mirrors-mypy\n        rev: v0.961\n        hooks:\n          - id: mypy\n            files: ^dot/\n            args: [--ignore-missing, --no-strict-optional]\n            additional_dependencies: [types-pyyaml, types-requests]\n"
        },
        {
          "name": ".yamllint",
          "type": "blob",
          "size": 0.619140625,
          "content": "---\nyaml-files:\n    - '*.yaml'\n    - '*.yml'\n    - .yamllint\n\nrules:\n    braces: enable\n    brackets: enable\n    colons: enable\n    commas: enable\n    comments:\n        level: warning\n    comments-indentation:\n        level: warning\n    document-end: disable\n    document-start: disable\n    empty-lines: enable\n    empty-values: disable\n    hyphens: enable\n    indentation: enable\n    key-duplicates: enable\n    key-ordering: disable\n    line-length: disable\n    new-line-at-end-of-file: enable\n    new-lines: enable\n    octal-values: disable\n    quoted-strings: disable\n    trailing-spaces: enable\n    truthy:\n        level: warning\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.474609375,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n* Fix fomm model download by @Ghassen-Chaabouni in https://github.com/sensity-ai/dot/pull/160\n* Add video and image swap to the GUI by @Ghassen-Chaabouni in https://github.com/sensity-ai/dot/pull/116\n\n## [1.3.0] - 2024-02-19\n\n## What's Changed\n* Trace error in CLI and UI by @Ghassen-Chaabouni in https://github.com/sensity-ai/dot/pull/137\n* Update Windows executable by @Ghassen-Chaabouni in https://github.com/sensity-ai/dot/pull/133\n* Update colab notebook by @Ghassen-Chaabouni in https://github.com/sensity-ai/dot/pull/128\n* Add a Docker container for dot by @Ghassen-Chaabouni in https://github.com/sensity-ai/dot/pull/95\n* Fix of cusolver error on GPU by @Ghassen-Chaabouni in https://github.com/sensity-ai/dot/pull/110\n* Update the GUI, PyTorch and the documentation by @Ghassen-Chaabouni in https://github.com/sensity-ai/dot/pull/107\n\n**Full Changelog**: https://github.com/sensity-ai/dot/compare/1.2.0...1.3.0\n\n## [1.2.0] - 2023-07-20\n\n## What's Changed\n* Create a dot executable for windows by @Ghassen-Chaabouni in https://github.com/sensity-ai/dot/pull/92\n* Add a graphical interface for dot by @Ghassen-Chaabouni in https://github.com/sensity-ai/dot/pull/85\n* Update README and CONTRIBUTING by @giorgiop in https://github.com/sensity-ai/dot/pull/40\n* Fix config paths in additional scripts under `scripts/` folder by @Ghassen-Chaabouni in https://github.com/sensity-ai/dot/pull/43\n* Update README and add instructions for running dot with an Android emulator by @Ghassen-Chaabouni in https://github.com/sensity-ai/dot/pull/45\n\n**Full Changelog**: https://github.com/sensity-ai/dot/compare/1.1.0...1.2.0\n\n## [1.1.0] - 2022-07-27\n\n## What's Changed\n* Update readme by @giorgiop in https://github.com/sensity-ai/dot/pull/6\n* Add more press on README.md by @giorgiop in https://github.com/sensity-ai/dot/pull/7\n* [ImgBot] Optimize images by @imgbot in https://github.com/sensity-ai/dot/pull/8\n* Update README to Download Models from Github Release Binaries by @ajndkr in https://github.com/sensity-ai/dot/pull/19\n* Update README + Add Github Templates by @ajndkr in https://github.com/sensity-ai/dot/pull/16\n* Verify camera ID when running dot in camera mode by @ajndkr in https://github.com/sensity-ai/dot/pull/18\n* Add Feature to Use Config Files by @ajndkr in https://github.com/sensity-ai/dot/pull/17\n* ⬆️ Bump numpy from 1.21.1 to 1.22.0 by @dependabot in https://github.com/sensity-ai/dot/pull/25\n* Update python version to 3.8 by @vassilispapadop in https://github.com/sensity-ai/dot/pull/28\n* Requirements changes now trigger CI by @giorgiop in https://github.com/sensity-ai/dot/pull/27\n* Fix python3.8 pip cache location in CI by @ajndkr in https://github.com/sensity-ai/dot/pull/29\n* Fix `--save_folder` CLI Option by @vassilispapadop and @Ghassen-Chaabouni in https://github.com/sensity-ai/dot/pull/26\n* Add contributors list by @ajndkr in https://github.com/sensity-ai/dot/pull/31\n* Add Google Colab demo notebook by @ajndkr in https://github.com/sensity-ai/dot/pull/33\n* Speed up SimSwap's `reverse2original` by @ajndkr and @Ghassen-Chaabouni in https://github.com/sensity-ai/dot/pull/20\n* Add `bumpversion` for semantic versioning by @ajndkr in https://github.com/sensity-ai/dot/pull/34\n* Update README with speed metrics by @giorgiop in https://github.com/sensity-ai/dot/pull/37\n\n## New Contributors\n* @giorgiop made their first contribution in https://github.com/sensity-ai/dot/pull/6\n* @ghassen1302 made their first contribution in https://github.com/sensity-ai/dot/pull/6\n* @imgbot made their first contribution in https://github.com/sensity-ai/dot/pull/8\n* @ajndkr made their first contribution in https://github.com/sensity-ai/dot/pull/19\n* @dependabot made their first contribution in https://github.com/sensity-ai/dot/pull/25\n* @vassilispapadop made their first contribution in https://github.com/sensity-ai/dot/pull/28\n\n**Full Changelog**: https://github.com/sensity-ai/dot/compare/1.0.0...1.1.0\n\n## [1.0.0] - 2022-06-04\n\n* dot is open sourced\n\n**Full Changelog**: https://github.com/sensity-ai/dot/commits/1.0.0\n\n[Unreleased]: https://github.com/sensity-ai/dot/compare/1.2.0...HEAD\n[1.2.0]: https://github.com/sensity-ai/dot/compare/1.1.0...1.2.0\n[1.1.0]: https://github.com/sensity-ai/dot/compare/1.0.0...1.1.0\n[1.0.0]: https://github.com/sensity-ai/dot/releases/tag/1.0.0\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.5966796875,
          "content": "# Contributing\n\nWhen contributing to this repository, please refer to the following.\n\n## Suggested Guidelines\n\n1. When opening a pull request (PR), the title should be clear and concise in describing the changes. The PR description can include a more descriptive log of the changes.\n2. If the pull request (PR) is linked to a specific issue, the PR should be linked to the issue. You can use the [Closing Keywords](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue) in the PR description to automatically link the issue. Merging a PR will close the linked issue.\n3. This repository follows the [Google Python Style Guide](https://google.github.io/styleguide/pyguide.html) for code formatting.\n4. If you are working on improving the speed of *dot*, please read first our guide on [code profiling](docs/profiling.md).\n\n## Setup Dev-Tools\n\n1. Install Dev Requirements\n\n ```bash\n pip install -r requirements-dev.txt\n ```\n\n2. Install Pre-Commit Hooks\n\n ```bash\n pre-commit install\n ```\n\n## CI/CD\n\nRun Unit Tests (with coverage):\n\n```bash\npytest --cov=src --cov-report=term-missing:skip-covered --cov-fail-under=10\n```\n\nLock Base and Dev Requirements (pre-requisite: `pip install pip-tools==6.8.0`):\n\n ```bash\n pip-compile setup.cfg\n pip-compile --extra=dev --output-file=requirements-dev.txt --strip-extras setup.cfg\n ```\n\n## Semantic Versioning\n\nThis repository follows the [Semantic Versioning](https://semver.org/) standard.\n\nBump a major release:\n\n```bash\nbumpversion major\n```\n\nBump a minor release:\n\n```bash\nbumpversion minor\n```\n\nBump a patch release:\n\n```bash\nbumpversion patch\n```\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.3818359375,
          "content": "FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04\n\n# copy repo codebase\nCOPY . ./dot\n\n# set working directory\nWORKDIR ./dot\n\nARG DEBIAN_FRONTEND=noninteractive\n\n# Install system dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    # Needed by opencv\n    libglib2.0-0 libsm6 libgl1 \\\n    libxext6 libxrender1 ffmpeg \\\n    build-essential cmake wget unzip zip \\\n    git libprotobuf-dev protobuf-compiler \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Install Miniconda\nRUN wget \\\n    https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n    && mkdir /root/.conda \\\n    && bash Miniconda3-latest-Linux-x86_64.sh -b \\\n    && rm -f Miniconda3-latest-Linux-x86_64.sh\n\n# Add Miniconda to the PATH environment variable\nENV PATH=\"/root/miniconda3/bin:${PATH}\"\n\nRUN conda --version\n\n# Install requirements\nRUN conda config --add channels conda-forge\nRUN conda install python==3.8\nRUN conda install pip==21.3\nRUN pip install onnxruntime-gpu==1.9.0\nRUN pip install -r requirements.txt\n\n# Install pytorch\nRUN pip install --no-cache-dir torch==2.0.1+cu118 torchvision==0.15.2+cu118 torchaudio==2.0.2 --index-url https://download.pytorch.org/whl/cu118\n\n# Install dot\nRUN pip install -e .\n\n# Download and extract the checkpoints\nRUN pip install gdown\nRUN gdown 1Qaf9hE62XSvgmxR43dfiwEPWWS_dXSCE\nRUN unzip -o dot_model_checkpoints.zip\nRUN rm -rf *.z*\n\nENTRYPOINT /bin/bash\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.455078125,
          "content": "Copyright (c) 2022, Sensity B.V.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.0576171875,
          "content": "<div align=\"center\">\n\n<h1> the Deepfake Offensive Toolkit </h1>\n\n[![stars](https://img.shields.io/github/stars/sensity-ai/dot)](https://github.com/sensity-ai/dot/stargazers)\n[![license](https://img.shields.io/badge/License-BSD_3--Clause-blue.svg)](https://github.com/sensity-ai/dot/blob/main/LICENSE)\n[![Python 3.8](https://img.shields.io/badge/python-3.8-blue.svg)](https://www.python.org/downloads/release/python-3812/)\n[![build-dot](https://github.com/sensity-ai/dot/actions/workflows/build_dot.yaml/badge.svg)](https://github.com/sensity-ai/dot/actions/workflows/build_dot.yaml)\n[![code-check](https://github.com/sensity-ai/dot/actions/workflows/code_check.yaml/badge.svg)](https://github.com/sensity-ai/dot/actions/workflows/code_check.yaml)\n\n<a href=\"https://colab.research.google.com/github/sensity-ai/dot/blob/main/notebooks/colab_demo.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" height=20></a>\n\n</div>\n\n*dot* (aka Deepfake Offensive Toolkit) makes real-time, controllable deepfakes ready for virtual cameras injection. *dot* is created for performing penetration testing against e.g. identity verification and video conferencing systems, for the use by security analysts, Red Team members, and biometrics researchers.\n\nIf you want to learn more about *dot* is used for penetration tests with deepfakes in the industry, read these articles by [The Verge](https://www.theverge.com/2022/5/18/23092964/deepfake-attack-facial-recognition-liveness-test-banks-sensity-report) and [Biometric Update](https://www.biometricupdate.com/202205/sensity-alleges-biometric-onboarding-providers-downplaying-deepfake-threat).\n\ndot *is developed for research and demonstration purposes. As an end user, you have the responsibility to obey all applicable laws when using this program. Authors and contributing developers assume no liability and are not responsible for any misuse or damage caused by the use of this program.*\n\n<p align=\"center\">\n<img src=\"./assets/dot_intro.gif\" width=\"500\"/>\n</p>\n\n## How it works\n\nIn a nutshell, *dot* works like this\n\n```mermaid\nflowchart LR;\n    A(your webcam feed) --> B(suite of realtime deepfakes);\n    B(suite of realtime deepfakes) --> C(virtual camera injection);\n```\n\nAll deepfakes supported by *dot* do not require additional training. They can be used\nin real-time on the fly on a photo that becomes the target of face impersonation.\nSupported methods:\n\n- face swap (via [SimSwap](https://github.com/neuralchen/SimSwap)), at resolutions `224` and `512`\n  - with the option of face superresolution (via [GPen](https://github.com/yangxy/GPEN)) at resolutions `256` and `512`\n- lower quality face swap (via OpenCV)\n- [FOMM](https://github.com/AliaksandrSiarohin/first-order-model), First Order Motion Model for image animation\n\n## Running dot\n\n### Graphical interface\n\n#### GUI Installation\n\nDownload and run the dot executable for your OS:\n\n- Windows (Tested on Windows 10 and 11):\n  - Download `dot.zip` from [here](https://drive.google.com/file/d/1_duaEs2SAUGfAvr5oC4V3XR-ZzBtWQXo/view), unzip it and then run `dot.exe`\n- Ubuntu:\n  - ToDo\n- Mac (Tested on Apple M2 Sonoma 14.0):\n\n  - Download `dot-m2.zip` from [here](https://drive.google.com/file/d/1KTRzQrl_AVpiFIxUxW_k2F5EsosJJ_1Y/view?usp=sharing) and unzip it\n  - Open terminal and run `xattr -cr dot-executable.app` to remove any extended attributes\n  - In case of camera reading error:\n    - Right click and choose `Show Package Contents`\n    - Execute `dot-executable` from `Contents/MacOS` folder\n\n#### GUI Usage\n\nUsage example:\n\n1. Specify the source image in the field `source`.\n2. Specify the camera id number in the field `target`. In most cases, `0` is the correct camera id.\n3. Specify the config file in the field `config_file`. Select a default configuration from the dropdown list or use a custom file.\n4. (Optional) Check the field `use_gpu` to use the GPU.\n5. Click on the `RUN` button to start the deepfake.\n\nFor more information about each field, click on the menu `Help/Usage`.\n\nWatch the following demo video for better understanding of the interface\n\n<p align=\"center\">\n<img src=\"./assets/gui_dot_demo.gif\" width=\"500\" height=\"406\"/>\n</p>\n\n### Command Line\n\n#### CLI Installation\n\n##### Install Pre-requisites\n\n- Linux\n\n    ```bash\n    sudo apt install ffmpeg cmake\n    ```\n\n- MacOS\n\n    ```bash\n    brew install ffmpeg cmake\n    ```\n\n- Windows\n\n    1. Download and install Visual Studio Community from [here](https://visualstudio.microsoft.com/vs/community/)\n    2. Install Desktop development with C++ from the Visual studio installer\n\n##### Create Conda Environment\n\n> The instructions assumes that you have Miniconda installed on your machine. If you don't, you can refer to this [link](https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html) for installation instructions.\n\n###### With GPU Support\n\n```bash\nconda env create -f envs/environment-gpu.yaml\nconda activate dot\n```\n\nInstall the `torch` and `torchvision` dependencies based on the CUDA version installed on your machine:\n\n- Install CUDA 11.8 from [link](https://developer.nvidia.com/cuda-11-8-0-download-archive)\n- Install `cudatoolkit` from `conda`: `conda install cudatoolkit=<cuda_version_no>` (replace `<cuda_version_no>` with the version on your machine)\n- Install `torch` and `torchvision` dependencies: `pip install torch==2.0.1+<cuda_tag> torchvision==0.15.2+<cuda_tag> torchaudio==2.0.2 --index-url https://download.pytorch.org/whl/cu118`, where `<cuda_tag>` is the CUDA tag defined by Pytorch. For example, `pip install torch==2.0.1+cu118 torchvision==0.15.2+cu118 torchaudio==2.0.2 --index-url https://download.pytorch.org/whl/cu118` for CUDA 11.8.\n\n  Note: `torch1.9.0+cu111` can also be used.\n\nTo check that `torch` and `torchvision` are installed correctly, run the following command: `python -c \"import torch; print(torch.cuda.is_available())\"`. If the output is `True`, the dependencies are installed with CUDA support.\n\n###### With MPS Support(Apple Silicon)\n\n```bash\nconda env create -f envs/environment-apple-m2.yaml\nconda activate dot\n```\n\nTo check that `torch` and `torchvision` are installed correctly, run the following command: `python -c \"import torch; print(torch.backends.mps.is_available())\"`. If the output is `True`, the dependencies are installed with Metal programming framework support.\n\n###### With CPU Support (slow, not recommended)\n\n```bash\nconda env create -f envs/environment-cpu.yaml\nconda activate dot\n```\n\n##### Install dot\n\n```bash\npip install -e .\n```\n\n##### Download Models\n\n- Download dot model checkpoints from [here](https://drive.google.com/file/d/1Y_11R66DL4N1WY8cNlXVNR3RkHnGDGWX/view)\n- Unzip the downloaded file in the root of this project\n\n#### CLI Usage\n\nRun `dot --help` to get a full list of available options.\n\n1. Simswap\n\n    ```bash\n    dot -c ./configs/simswap.yaml --target 0 --source \"./data\" --use_gpu\n    ```\n\n2. SimSwapHQ\n\n    ```bash\n    dot -c ./configs/simswaphq.yaml --target 0 --source \"./data\" --use_gpu\n    ```\n\n3. FOMM\n\n    ```bash\n    dot -c ./configs/fomm.yaml --target 0 --source \"./data\" --use_gpu\n    ```\n\n4. FaceSwap CV2\n\n    ```bash\n    dot -c ./configs/faceswap_cv2.yaml --target 0 --source \"./data\" --use_gpu\n\n    ```\n\n**Note**: To enable face superresolution, use the flag `--gpen_type gpen_256` or `--gpen_type gpen_512`. To use *dot* on CPU (not recommended), do not pass the `--use_gpu` flag.\n\n#### Controlling dot with CLI\n\n> **Disclaimer**: We use the `SimSwap` technique for the following demonstration\n\nRunning *dot* via any of the above methods generates real-time Deepfake on the input video feed using source images from the `data/` folder.\n\n<p align=\"center\">\n<img src=\"./assets/dot_run.gif\" width=\"500\"/>\n</p>\n\nWhen running *dot* a list of available control options appear on the terminal window as shown above. You can toggle through and select different source images by pressing the associated control key.\n\nWatch the following demo video for better understanding of the control options:\n\n<p align=\"center\">\n<img src=\"./assets/dot_demo.gif\" width=\"480\"/>\n</p>\n\n## Docker\n\n### Setting up docker\n\n- Build the container\n\n    ```\n    docker-compose up --build -d\n    ```\n\n- Access the container\n\n    ```\n    docker-compose exec dot \"/bin/bash\"\n    ```\n\n### Connect docker to the webcam\n\n#### Ubuntu\n\n1. Build the container\n\n    ```\n    docker build -t dot -f Dockerfile .\n    ```\n\n2. Run the container\n\n    ```\n    xhost +\n    docker run -ti --gpus all \\\n    -e NVIDIA_DRIVER_CAPABILITIES=compute,utility \\\n    -e NVIDIA_VISIBLE_DEVICES=all \\\n    -e PYTHONUNBUFFERED=1 \\\n    -e DISPLAY \\\n    -v .:/dot \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix:rw \\\n    --runtime nvidia \\\n    --entrypoint /bin/bash \\\n    -p 8080:8080 \\\n    --device=/dev/video0:/dev/video0 \\\n    dot\n    ```\n\n#### Windows\n\n1. Follow the instructions [here](https://medium.com/@jijupax/connect-the-webcam-to-docker-on-mac-or-windows-51d894c44468) under Windows to set up the webcam with docker.\n\n2. Build the container\n\n    ```\n    docker build -t dot -f Dockerfile .\n    ```\n3. Run the container\n\n    ```\n    docker run -ti --gpus all \\\n    -e NVIDIA_DRIVER_CAPABILITIES=compute,utility \\\n    -e NVIDIA_VISIBLE_DEVICES=all \\\n    -e PYTHONUNBUFFERED=1 \\\n    -e DISPLAY=192.168.99.1:0 \\\n    -v .:/dot \\\n    --runtime nvidia \\\n    --entrypoint /bin/bash \\\n    -p 8080:8080 \\\n    --device=/dev/video0:/dev/video0 \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    dot\n    ```\n\n#### macOS\n\n1. Follow the instructions [here](https://github.com/gzupark/boot2docker-webcam-mac/blob/master/README.md) to set up the webcam with docker.\n\n2. Build the container\n\n    ```\n    docker build -t dot -f Dockerfile .\n    ```\n3. Run the container\n\n    ```\n    docker run -ti --gpus all \\\n    -e NVIDIA_DRIVER_CAPABILITIES=compute,utility \\\n    -e NVIDIA_VISIBLE_DEVICES=all \\\n    -e PYTHONUNBUFFERED=1 \\\n    -e DISPLAY=$IP:0 \\\n    -v .:/dot \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    --runtime nvidia \\\n    --entrypoint /bin/bash \\\n    -p 8080:8080 \\\n    --device=/dev/video0:/dev/video0 \\\n    dot\n    ```\n\n## Virtual Camera Injection\n\nInstructions vary depending on your operating system.\n\n### Windows\n\n- Install [OBS Studio](https://obsproject.com/).\n\n- Run OBS Studio.\n\n- In the Sources section, press on Add button (\"+\" sign),\n\n  select Windows Capture and press OK. In the appeared window,\n  choose \"[python.exe]: fomm\" in Window drop-down menu and press OK.\n  Then select Edit -> Transform -> Fit to screen.\n\n- In OBS Studio, go to Tools -> VirtualCam. Check AutoStart,\n\n  set Buffered Frames to 0 and press Start.\n\n- Now `OBS-Camera` camera should be available in Zoom\n\n  (or other videoconferencing software).\n\n### Ubuntu\n\n```bash\nsudo apt update\nsudo apt install v4l-utils v4l2loopback-dkms v4l2loopback-utils\nsudo modprobe v4l2loopback devices=1 card_label=\"OBS Cam\" exclusive_caps=1\nv4l2-ctl --list-devices\nsudo add-apt-repository ppa:obsproject/obs-studio\nsudo apt install obs-studio\n```\n\nOpen `OBS Studio` and check if `tools --> v4l2sink` exists.\nIf it doesn't follow these instructions:\n\n```bash\nmkdir -p ~/.config/obs-studio/plugins/v4l2sink/bin/64bit/\nln -s /usr/lib/obs-plugins/v4l2sink.so ~/.config/obs-studio/plugins/v4l2sink/bin/64bit/\n```\n\nUse the virtual camera with `OBS Studio`:\n\n- Open `OBS Studio`\n- Go to `tools --> v4l2sink`\n- Select `/dev/video2` and `YUV420`\n- Click on `start`\n- Join a meeting and select `OBS Cam`\n\n### MacOS\n\n- Download and install OBS Studio for MacOS from [here](https://obsproject.com/)\n- Open OBS and follow the first-time setup (you might be required to enable certain permissions in *System Preferences*)\n- Run *dot* with `--use_cam` flag to enable camera feed\n- Click the \"+\" button in the sources section → select \"Windows Capture\", create a new source and enter \"OK\" → select window with \"python\" included in the name and enter OK\n- Click \"Start Virtual Camera\" button in the controls section\n- Select \"OBS Cam\" as default camera in the video settings of the application target of the injection\n\n## Run dot with an Android emulator\n\nIf you are performing a test against a mobile app, virtual cameras are much harder to inject. An alternative is to use mobile emulators and still resort to virtual camera injection.\n\n- Run `dot`. Check [running dot](https://github.com/sensity-ai/dot#running-dot) for more information.\n\n- Run `OBS Studio` and set up the virtual camera. Check [virtual-camera-injection](https://github.com/sensity-ai/dot#virtual-camera-injection) for more information.\n\n- Download and Install [Genymotion](https://www.genymotion.com/download/).\n\n- Open Genymotion and set up the Android emulator.\n\n- Set up dot with the Android emulator:\n  - Open the Android emulator.\n  - Click on `camera` and select `OBS-Camera` as front and back cameras. A preview of the dot window should appear.\n  In case there is no preview, restart `OBS` and the emulator and try again.\n  If that didn't work, use a different virtual camera software like `e2eSoft VCam` or `ManyCam`.\n  - `dot` deepfake output should be now the emulator's phone camera.\n\n## Speed\n\n### With GPU\n\n\nTested on a AMD Ryzen 5 2600 Six-Core Processor with one NVIDIA GeForce RTX 2070\n\n```example\nSimswap: FPS 13.0\nSimswap + gpen 256: FPS 7.0\nSimswapHQ: FPS 11.0\nFOMM: FPS 31.0\n```\n\n### With Apple Silicon\n\n\nTested on Macbook Air M2 2022 16GB\n```example\nSimswap: FPS 3.2\nSimswap + gpen 256: FPS 1.8\nSimswapHQ: FPS 2.7\nFOMM: FPS 2.0\n```\n\n## License\n\n*This is not a commercial Sensity product, and it is distributed freely with no warranties*\n\nThe software is distributed under [BSD 3-Clause](LICENSE).\n*dot* utilizes several open source libraries. If you use *dot*, make sure you agree with their\nlicenses too. In particular, this codebase is built on top of the following research projects:\n\n- <https://github.com/AliaksandrSiarohin/first-order-model>\n- <https://github.com/alievk/avatarify-python>\n- <https://github.com/neuralchen/SimSwap>\n- <https://github.com/yangxy/GPEN>\n\n## Contributing\n\nIf you have ideas for improving *dot*, feel free to open relevant Issues and PRs. Please read [CONTRIBUTING.md](./CONTRIBUTING.md) before contributing to the repository.\n\n## Maintainers\n\n- [@ghassen1302](https://github.com/ghassen1302)\n- [@vassilispapadop](https://github.com/vassilispapadop)\n- [@giorgiop](https://github.com/giorgiop)\n- [@AjinkyaIndulkar](https://github.com/AjinkyaIndulkar)\n- [@kjod](https://github.com/kjod)\n\n## Contributors\n\n[![](https://img.shields.io/github/contributors-anon/sensity-ai/dot)](https://github.com/sensity-ai/dot/graphs/contributors)\n\n<a href=\"https://github.com/sensity-ai/dot/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=sensity-ai/dot\" />\n</a>\n\n## Run `dot` on pre-recorded image and video files\n\n- [Run *dot* on image and video files instead of camera feed](docs/run_without_camera.md)\n\n## FAQ\n\n- **`dot` is very slow and I can't run it in real time**\n\nMake sure that you are running it on a GPU card by using the `--use_gpu` flag. CPU is not recommended.\nIf you still find it too slow it may be because you running it on an old GPU model, with less than 8GB of RAM.\n\n- **Does `dot` only work with a webcam feed or also with a pre-recorded video?**\n\nYou can use `dot` on a pre-recorded video file by [these scripts](docs/run_without_camera.md) or try it directly on [Colab](https://colab.research.google.com/github/sensity-ai/dot/blob/main/notebooks/colab_demo.ipynb).\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.509765625,
          "content": "services:\n  dot:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    # Set environment variables, if needed\n    environment:\n      - PYTHONUNBUFFERED=1\n      - NVIDIA_DRIVER_CAPABILITIES=compute,utility\n      - NVIDIA_VISIBLE_DEVICES=all\n    # Preserve files across container restarts\n    volumes:\n      - .:/dot\n    # Use NVIDIA runtime to enable GPU support in the container\n    runtime: nvidia\n    entrypoint: /bin/bash\n    ports:\n      - \"8080:8080\"\n    container_name: dot\n    stdin_open: true\n    tty: true\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "envs",
          "type": "tree",
          "content": null
        },
        {
          "name": "notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.1552734375,
          "content": "[build-system]\nrequires = [\n  \"setuptools>=42\",\n  \"wheel\",\n]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.pytest.ini_options]\nfilterwarnings = [\"ignore:.*\"]\n"
        },
        {
          "name": "requirements-apple-m2.txt",
          "type": "blob",
          "size": 2.498046875,
          "content": "#\n# This file is autogenerated by pip-compile with python 3.8\n# To update, run:\n#\n#    pip-compile setup.cfg\n#\nabsl-py==1.1.0\n    # via mediapipe\nattrs==21.4.0\n    # via mediapipe\ncertifi==2023.7.22\n    # via requests\nchardet==4.0.0\n    # via requests\nclick==8.0.2\n    # via dot (setup.cfg)\ncycler==0.11.0\n    # via matplotlib\ndlib==19.19.0\n    # via dot (setup.cfg)\nface-alignment==1.3.3\n    # via dot (setup.cfg)\nflatbuffers==2.0\n    # via onnxruntime\nfonttools==4.43.0\n    # via matplotlib\nidna==2.10\n    # via requests\nimageio==2.19.3\n    # via scikit-image\nkiwisolver==1.4.3\n    # via matplotlib\nkornia==0.6.5\n    # via dot (setup.cfg)\nllvmlite==0.38.1\n    # via numba\nmatplotlib==3.5.2\n    # via mediapipe\nmediapipe-silicon\n    # via dot (setup.cfg)\nmediapipe==0.10.3\nnetworkx==2.8.4\n    # via scikit-image\nnumba==0.55.2\n    # via face-alignment\nnumpy==1.22.0\n    # via\n    #   dot (setup.cfg)\n    #   face-alignment\n    #   imageio\n    #   matplotlib\n    #   mediapipe\n    #   numba\n    #   onnxruntime\n    #   opencv-contrib-python\n    #   opencv-python\n    #   pywavelets\n    #   scikit-image\n    #   scipy\n    #   tifffile\n    #   torchvision\nonnxruntime==1.15.1\n    # via dot (setup.cfg)\nopencv-contrib-python==4.5.5.62\n    # via\n    #   dot (setup.cfg)\n    #   mediapipe\nopencv-python==4.5.5.62\n    # via\n    #   dot (setup.cfg)\n    #   face-alignment\npackaging==21.3\n    # via\n    #   kornia\n    #   matplotlib\n    #   scikit-image\npillow==10.0.1\n    # via\n    #   dot (setup.cfg)\n    #   imageio\n    #   matplotlib\n    #   scikit-image\n    #   torchvision\nprotobuf==3.20.2\n    # via\n    #   dot (setup.cfg)\n    #   mediapipe\n    #   onnxruntime\npyparsing==3.0.9\n    # via\n    #   matplotlib\n    #   packaging\npython-dateutil==2.8.2\n    # via matplotlib\npywavelets==1.3.0\n    # via scikit-image\npyyaml==5.4.1\n    # via dot (setup.cfg)\nrequests==2.31.0\n    # via dot (setup.cfg)\nscikit-image==0.19.1\n    # via\n    #   dot (setup.cfg)\n    #   face-alignment\nscipy==1.10.1\n    # via\n    #   dot (setup.cfg)\n    #   face-alignment\n    #   scikit-image\nsix==1.16.0\n    # via\n    #   mediapipe\n    #   python-dateutil\ntifffile==2022.5.4\n    # via scikit-image\ntorch==2.0.1\n    # via\n    #   dot (setup.cfg)\n    #   face-alignment\n    #   kornia\n    #   torchvision\ntorchvision==0.15.2\n    # via dot (setup.cfg)\ntqdm==4.64.0\n    # via face-alignment\ntyping-extensions==4.3.0\n    # via torch\nurllib3==1.26.18\n    # via requests\nwheel==0.38.1\n    # via mediapipe\n\n# The following packages are considered to be unsafe in a requirements file:\n# setuptools\n"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 5.3603515625,
          "content": "#\n# This file is autogenerated by pip-compile with Python 3.8\n# by the following command:\n#\n#    pip-compile --extra=dev --output-file=requirements-dev.txt --strip-extras setup.cfg\n#\nabsl-py==1.1.0\n    # via mediapipe\naltgraph==0.17.3\n    # via pyinstaller\nasttokens==2.0.5\n    # via stack-data\natomicwrites==1.4.1\n    # via pytest\nattrs==21.4.0\n    # via\n    #   mediapipe\n    #   pytest\nbackcall==0.2.0\n    # via ipython\nblack==22.3.0\n    # via dot (setup.cfg)\nbump2version==1.0.1\n    # via bumpversion\nbumpversion==0.6.0\n    # via dot (setup.cfg)\ncertifi==2023.7.22\n    # via requests\ncffi==1.15.1\n    # via sounddevice\ncfgv==3.3.1\n    # via pre-commit\ncharset-normalizer==3.2.0\n    # via requests\nclick==8.0.2\n    # via\n    #   black\n    #   dot (setup.cfg)\ncolorama==0.4.6\n    # via\n    #   click\n    #   ipython\n    #   pytest\n    #   tqdm\ncoloredlogs==15.0.1\n    # via onnxruntime-gpu\ncoverage==6.4.2\n    # via\n    #   coverage\n    #   pytest-cov\ncustomtkinter==5.2.0\n    # via dot (setup.cfg)\ncycler==0.11.0\n    # via matplotlib\ndarkdetect==0.8.0\n    # via customtkinter\ndecorator==5.1.1\n    # via\n    #   ipdb\n    #   ipython\ndistlib==0.3.4\n    # via virtualenv\ndlib==19.19.0\n    # via dot (setup.cfg)\nexecuting==0.8.3\n    # via stack-data\nface-alignment==1.4.1\n    # via dot (setup.cfg)\nfilelock==3.7.1\n    # via\n    #   torch\n    #   virtualenv\nflake8==3.9.2\n    # via dot (setup.cfg)\nflatbuffers==2.0\n    # via\n    #   mediapipe\n    #   onnxruntime-gpu\nfonttools==4.43.0\n    # via matplotlib\nhumanfriendly==10.0\n    # via coloredlogs\nidentify==2.5.1\n    # via pre-commit\nidna==2.10\n    # via requests\nimageio==2.19.3\n    # via scikit-image\niniconfig==1.1.1\n    # via pytest\nipdb==0.13.9\n    # via dot (setup.cfg)\nipython==8.10.0\n    # via\n    #   dot (setup.cfg)\n    #   ipdb\nisort==5.12.0\n    # via dot (setup.cfg)\njedi==0.18.1\n    # via ipython\njinja2==3.1.3\n    # via torch\nkiwisolver==1.4.3\n    # via matplotlib\nkornia==0.6.5\n    # via dot (setup.cfg)\nllvmlite==0.38.1\n    # via numba\nmarkupsafe==2.1.3\n    # via jinja2\nmatplotlib==3.5.2\n    # via mediapipe\nmatplotlib-inline==0.1.3\n    # via ipython\nmccabe==0.6.1\n    # via flake8\nmediapipe==0.10.3\n    # via dot (setup.cfg)\nmpmath==1.3.0\n    # via sympy\nmypy-extensions==0.4.3\n    # via black\nnetworkx==2.8.4\n    # via\n    #   scikit-image\n    #   torch\nnodeenv==1.7.0\n    # via pre-commit\nnumba==0.55.2\n    # via face-alignment\nnumpy==1.22.0\n    # via\n    #   dot (setup.cfg)\n    #   face-alignment\n    #   imageio\n    #   matplotlib\n    #   mediapipe\n    #   numba\n    #   onnxruntime-gpu\n    #   opencv-contrib-python\n    #   opencv-python\n    #   pywavelets\n    #   scikit-image\n    #   scipy\n    #   tifffile\n    #   torchvision\nonnxruntime-gpu==1.18.0\n    # via dot (setup.cfg)\nopencv-contrib-python==4.5.5.62\n    # via\n    #   dot (setup.cfg)\n    #   mediapipe\nopencv-python==4.5.5.62\n    # via\n    #   dot (setup.cfg)\n    #   face-alignment\npackaging==21.3\n    # via\n    #   kornia\n    #   matplotlib\n    #   onnxruntime-gpu\n    #   pytest\n    #   scikit-image\nparso==0.8.3\n    # via jedi\npathspec==0.9.0\n    # via black\npefile==2023.2.7\n    # via pyinstaller\npickleshare==0.7.5\n    # via ipython\npillow==10.0.1\n    # via\n    #   dot (setup.cfg)\n    #   imageio\n    #   matplotlib\n    #   scikit-image\n    #   torchvision\nplatformdirs==2.5.2\n    # via\n    #   black\n    #   virtualenv\npluggy==1.0.0\n    # via pytest\npre-commit==2.19.0\n    # via dot (setup.cfg)\nprompt-toolkit==3.0.30\n    # via ipython\nprotobuf==3.20.2\n    # via\n    #   dot (setup.cfg)\n    #   mediapipe\n    #   onnxruntime-gpu\npure-eval==0.2.2\n    # via stack-data\npy==1.11.0\n    # via pytest\npycodestyle==2.7.0\n    # via flake8\npycparser==2.21\n    # via cffi\npyflakes==2.3.1\n    # via flake8\npygments==2.15.0\n    # via ipython\npyinstaller==5.13.1\n    # via dot (setup.cfg)\npyinstaller-hooks-contrib==2023.5\n    # via pyinstaller\npyparsing==3.0.9\n    # via\n    #   matplotlib\n    #   packaging\npyreadline3==3.4.1\n    # via humanfriendly\npytest==7.1.2\n    # via\n    #   dot (setup.cfg)\n    #   pytest-cov\npytest-cov==3.0.0\n    # via dot (setup.cfg)\npython-dateutil==2.8.2\n    # via matplotlib\npywavelets==1.3.0\n    # via scikit-image\npywin32-ctypes==0.2.2\n    # via pyinstaller\npyyaml==5.4.1\n    # via\n    #   dot (setup.cfg)\n    #   pre-commit\nrequests==2.31.0\n    # via\n    #   dot (setup.cfg)\n    #   torchvision\nscikit-image==0.19.1\n    # via\n    #   dot (setup.cfg)\n    #   face-alignment\nscipy==1.10.0\n    # via\n    #   dot (setup.cfg)\n    #   face-alignment\n    #   scikit-image\nsix==1.16.0\n    # via\n    #   asttokens\n    #   python-dateutil\n    #   virtualenv\nsounddevice==0.4.6\n    # via mediapipe\nstack-data==0.3.0\n    # via ipython\nsympy==1.12\n    # via\n    #   onnxruntime-gpu\n    #   torch\ntifffile==2022.5.4\n    # via scikit-image\ntoml==0.10.2\n    # via\n    #   ipdb\n    #   pre-commit\ntomli==2.0.1\n    # via\n    #   black\n    #   coverage\n    #   pytest\ntorch==2.0.1\n    # via\n    #   dot (setup.cfg)\n    #   face-alignment\n    #   kornia\n    #   torchvision\ntorchvision==0.15.2\n    # via dot (setup.cfg)\ntqdm==4.64.0\n    # via face-alignment\ntraitlets==5.3.0\n    # via\n    #   ipython\n    #   matplotlib-inline\ntypes-pyyaml==6.0.10\n    # via dot (setup.cfg)\ntyping-extensions==4.3.0\n    # via\n    #   black\n    #   torch\nurllib3==1.26.18\n    # via requests\nvirtualenv==20.15.1\n    # via pre-commit\nwcwidth==0.2.5\n    # via prompt-toolkit\n\n# The following packages are considered to be unsafe in a requirements file:\n# setuptools\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 3.3076171875,
          "content": "#\n# This file is autogenerated by pip-compile with Python 3.8\n# by the following command:\n#\n#    pip-compile setup.cfg\n#\nabsl-py==1.1.0\n    # via mediapipe\nattrs==21.4.0\n    # via mediapipe\ncertifi==2023.7.22\n    # via requests\ncffi==1.15.1\n    # via sounddevice\ncharset-normalizer==3.2.0\n    # via requests\nclick==8.0.2\n    # via dot (setup.cfg)\ncolorama==0.4.6\n    # via\n    #   click\n    #   pytest\n    #   tqdm\ncoloredlogs==15.0.1\n    # via onnxruntime-gpu\ncustomtkinter==5.2.0\n    # via dot (setup.cfg)\ncycler==0.11.0\n    # via matplotlib\ndarkdetect==0.8.0\n    # via customtkinter\ndlib==19.19.0\n    # via dot (setup.cfg)\nexceptiongroup==1.1.2\n    # via pytest\nface-alignment==1.4.1\n    # via dot (setup.cfg)\nfilelock==3.12.2\n    # via torch\nflatbuffers==2.0\n    # via\n    #   mediapipe\n    #   onnxruntime-gpu\nfonttools==4.43.0\n    # via matplotlib\nhumanfriendly==10.0\n    # via coloredlogs\nidna==2.10\n    # via requests\nimageio==2.19.3\n    # via scikit-image\niniconfig==2.0.0\n    # via pytest\njinja2==3.1.3\n    # via torch\nkiwisolver==1.4.3\n    # via matplotlib\nkornia==0.6.5\n    # via dot (setup.cfg)\nllvmlite==0.38.1\n    # via numba\nmarkupsafe==2.1.3\n    # via jinja2\nmatplotlib==3.5.2\n    # via mediapipe\nmediapipe==0.10.3\n    # via dot (setup.cfg)\nmpmath==1.3.0\n    # via sympy\nnetworkx==2.8.4\n    # via\n    #   scikit-image\n    #   torch\nnumba==0.55.2\n    # via face-alignment\nnumpy==1.22.0\n    # via\n    #   dot (setup.cfg)\n    #   face-alignment\n    #   imageio\n    #   matplotlib\n    #   mediapipe\n    #   numba\n    #   onnxruntime-gpu\n    #   opencv-contrib-python\n    #   opencv-python\n    #   pywavelets\n    #   scikit-image\n    #   scipy\n    #   tifffile\n    #   torchvision\nonnxruntime-gpu==1.18.0\n    # via dot (setup.cfg)\nopencv-contrib-python==4.5.5.62\n    # via\n    #   dot (setup.cfg)\n    #   mediapipe\nopencv-python==4.5.5.62\n    # via\n    #   dot (setup.cfg)\n    #   face-alignment\npackaging==21.3\n    # via\n    #   kornia\n    #   matplotlib\n    #   onnxruntime-gpu\n    #   pytest\n    #   scikit-image\npillow==10.0.1\n    # via\n    #   dot (setup.cfg)\n    #   imageio\n    #   matplotlib\n    #   scikit-image\n    #   torchvision\npluggy==1.2.0\n    # via pytest\nprotobuf==3.20.2\n    # via\n    #   dot (setup.cfg)\n    #   mediapipe\n    #   onnxruntime-gpu\npycparser==2.21\n    # via cffi\npyparsing==3.0.9\n    # via\n    #   matplotlib\n    #   packaging\npyreadline3==3.4.1\n    # via humanfriendly\npytest==7.4.0\n    # via dot (setup.cfg)\npython-dateutil==2.8.2\n    # via matplotlib\npywavelets==1.3.0\n    # via scikit-image\npyyaml==5.4.1\n    # via dot (setup.cfg)\nrequests==2.31.0\n    # via\n    #   dot (setup.cfg)\n    #   torchvision\nscikit-image==0.19.1\n    # via\n    #   dot (setup.cfg)\n    #   face-alignment\nscipy==1.10.0\n    # via\n    #   dot (setup.cfg)\n    #   face-alignment\n    #   scikit-image\nsix==1.16.0\n    # via python-dateutil\nsounddevice==0.4.6\n    # via mediapipe\nsympy==1.12\n    # via\n    #   onnxruntime-gpu\n    #   torch\ntifffile==2022.5.4\n    # via scikit-image\ntomli==2.0.1\n    # via pytest\ntorch==2.0.1\n    # via\n    #   dot (setup.cfg)\n    #   face-alignment\n    #   kornia\n    #   torchvision\ntorchvision==0.15.2\n    # via dot (setup.cfg)\ntqdm==4.64.0\n    # via face-alignment\ntyping-extensions==4.3.0\n    # via torch\nurllib3==1.26.18\n    # via requests\n\n# The following packages are considered to be unsafe in a requirements file:\n# setuptools\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.177734375,
          "content": "[bumpversion]\ncurrent_version = 1.4.0\ncommit = True\ntag = False\nparse = (?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)?\nserialize = \n\t{major}.{minor}.{patch}\n\n[bumpversion:file:src/dot/__init__.py]\nsearch = __version__ = \"{current_version}\"\nreplace = __version__ = \"{new_version}\"\n\n[metadata]\nname = dot\nversion = attr: dot.__version__\nauthor = attr: dot.__author__\ndescription = attr: dot.__doc__\nlong_description = file: README.md\nlog_description_content_type = text/markdown\nurl = attr: dot.__url__\nlicense = BSD 3-Clause License\nclassifiers = \n\tProgramming Language :: Python :: 3.8\n\n[options]\npackage_dir = \n\t= src\npackages = find:\npython_requires = >=3.8,<3.9\ninstall_requires = \n\tclick\n\tdlib\n\tface_alignment==1.4.1\n\tkornia\n\tmediapipe\n\tnumpy\n\tonnxruntime-gpu==1.18.0\n\topencv-contrib-python\n\topencv_python\n\tPillow\n\tprotobuf\n\tPyYAML\n\trequests\n\tscikit_image\n\tscipy\n\ttorch==2.0.1\n\ttorchvision==0.15.2\n\tcustomtkinter\n\tpytest\n\n[options.extras_require]\ndev = \n\tblack\n\tbumpversion\n\tflake8\n\tipdb\n\tipython\n\tisort==5.12.0\n\tpre-commit\n\tpyinstaller\n\tpytest\n\tpytest-cov\n\ttypes-PyYAML\n\n[options.packages.find]\nwhere = src\n\n[options.entry_points]\nconsole_scripts = \n\tdot = dot.__main__:main\n\tdot-ui = dot.ui.ui:main\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}