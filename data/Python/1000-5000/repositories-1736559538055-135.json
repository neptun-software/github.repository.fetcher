{
  "metadata": {
    "timestamp": 1736559538055,
    "page": 135,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "huashengdun/webssh",
      "stars": 4644,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.1982421875,
          "content": "[run]\nbranch = true\nsource = webssh\n\n[report]\nexclude_lines =\n    if self.debug:\n    pragma: no cover\n    raise NotImplementedError\n    if __name__ == .__main__.:\nignore_errors = True\nomit =\n    tests/*\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0048828125,
          "content": ".git\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7587890625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template \n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\n.pytest_cache/\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# database file\n*.sqlite\n*.sqlite3\n*.db\n\n# temporary file\n*.swp\n\n# known_hosts file\nknown_hosts\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.4072265625,
          "content": "FROM python:3-alpine\n\nLABEL maintainer='<author>'\nLABEL version='0.0.0-dev.0-build.0'\n\nADD . /code\nWORKDIR /code\nRUN \\\n  apk add --no-cache libc-dev libffi-dev gcc && \\\n  pip install -r requirements.txt --no-cache-dir && \\\n  apk del gcc libc-dev libffi-dev && \\\n  addgroup webssh && \\\n  adduser -Ss /bin/false -g webssh webssh && \\\n  chown -R webssh:webssh /code\n\nEXPOSE 8888/tcp\nUSER webssh\nCMD [\"python\", \"run.py\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2017 Shengdun Hua\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2353515625,
          "content": "include LICENSE\n\nrecursive-include tests *\nprune tests/__pycache__\nprune tests/.pytest_cache\n\nrecursive-include webssh *\nprune webssh/__pycache__\nprune webssh/.pytest_cache\n\nglobal-exclude *.pyc\nglobal-exclude *.log\nglobal-exclude .coverage\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.0908203125,
          "content": "## WebSSH\n\n[![python](https://github.com/huashengdun/webssh/actions/workflows/python.yml/badge.svg)](https://github.com/huashengdun/webssh/actions/workflows/python.yml)\n[![codecov](https://raw.githubusercontent.com/huashengdun/webssh/coverage-badge/coverage.svg)](https://raw.githubusercontent.com/huashengdun/webssh/coverage-badge/coverage.svg)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/webssh.svg)\n![PyPI](https://img.shields.io/pypi/v/webssh.svg)\n\n\n### Introduction\n\nA simple web application to be used as an ssh client to connect to your ssh servers. It is written in Python, base on tornado, paramiko and xterm.js.\n\n### Features\n\n* SSH password authentication supported, including empty password.\n* SSH public-key authentication supported, including DSA RSA ECDSA Ed25519 keys.\n* Encrypted keys supported.\n* Two-Factor Authentication (time-based one-time password) supported.\n* Fullscreen terminal supported.\n* Terminal window resizable.\n* Auto detect the ssh server's default encoding.\n* Modern browsers including Chrome, Firefox, Safari, Edge, Opera supported.\n\n\n### Preview\n\n![Login](preview/login.png)\n![Terminal](preview/terminal.png)\n\n\n### How it works\n```\n+---------+     http     +--------+    ssh    +-----------+\n| browser | <==========> | webssh | <=======> | ssh server|\n+---------+   websocket  +--------+    ssh    +-----------+\n```\n\n### Requirements\n\n* Python 3.8+\n\n\n### Quickstart\n\n1. Install this app, run command `pip install webssh`\n2. Start a webserver, run command `wssh`\n3. Open your browser, navigate to `127.0.0.1:8888`\n4. Input your data, submit the form.\n\n\n### Server options\n\n```bash\n# start a http server with specified listen address and listen port\nwssh --address='2.2.2.2' --port=8000\n\n# start a https server, certfile and keyfile must be passed\nwssh --certfile='/path/to/cert.crt' --keyfile='/path/to/cert.key'\n\n# missing host key policy\nwssh --policy=reject\n\n# logging level\nwssh --logging=debug\n\n# log to file\nwssh --log-file-prefix=main.log\n\n# more options\nwssh --help\n```\n\n### Browser console\n\n```javascript\n// connect to your ssh server\nwssh.connect(hostname, port, username, password, privatekey, passphrase, totp);\n\n// pass an object to wssh.connect\nvar opts = {\n  hostname: 'hostname',\n  port: 'port',\n  username: 'username',\n  password: 'password',\n  privatekey: 'the private key text',\n  passphrase: 'passphrase',\n  totp: 'totp'\n};\nwssh.connect(opts);\n\n// without an argument, wssh will use the form data to connect\nwssh.connect();\n\n// set a new encoding for client to use\nwssh.set_encoding(encoding);\n\n// reset encoding to use the default one\nwssh.reset_encoding();\n\n// send a command to the server\nwssh.send('ls -l');\n```\n\n### Custom Font\n\nTo use custom font, put your font file in the directory `webssh/static/css/fonts/` and restart the server.\n\n### URL Arguments\n\nSupport passing arguments by url (query or fragment) like following examples:\n\nPassing form data (password must be encoded in base64, privatekey not supported)\n```bash\nhttp://localhost:8888/?hostname=xx&username=yy&password=str_base64_encoded\n```\n\nPassing a terminal background color\n```bash\nhttp://localhost:8888/#bgcolor=green\n```\n\nPassing a terminal font color\n```bash\nhttp://localhost:8888/#fontcolor=red\n```\n\nPassing a user defined title\n```bash\nhttp://localhost:8888/?title=my-ssh-server\n```\n\nPassing an encoding\n```bash\nhttp://localhost:8888/#encoding=gbk\n```\n\nPassing a font size\n```bash\nhttp://localhost:8888/#fontsize=24\n```\n\nPassing a command executed right after login\n```bash\nhttp://localhost:8888/?command=pwd\n```\n\nPassing a terminal type\n```bash\nhttp://localhost:8888/?term=xterm-256color\n```\n\n### Use Docker\n\nStart up the app\n```\ndocker-compose up\n```\n\nTear down the app\n```\ndocker-compose down\n```\n\n### Tests\n\nRequirements\n```\npip install pytest pytest-cov codecov flake8 mock\n```\n\nUse unittest to run all tests\n```\npython -m unittest discover tests\n```\n\nUse pytest to run all tests\n```\npython -m pytest tests\n```\n\n### Deployment\n\nRunning behind an Nginx server\n\n```bash\nwssh --address='127.0.0.1' --port=8888 --policy=reject\n```\n```nginx\n# Nginx config example\nlocation / {\n    proxy_pass http://127.0.0.1:8888;\n    proxy_http_version 1.1;\n    proxy_read_timeout 300;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_set_header Host $http_host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Real-PORT $remote_port;\n}\n```\n\nRunning as a standalone server\n```bash\nwssh --port=8080 --sslport=4433 --certfile='cert.crt' --keyfile='cert.key' --xheaders=False --policy=reject\n```\n\n\n### Tips\n\n* For whatever deployment choice you choose, don't forget to enable SSL.\n* By default plain http requests from a public network will be either redirected or blocked and being redirected takes precedence over being blocked.\n* Try to use reject policy as the missing host key policy along with your verified known_hosts, this will prevent man-in-the-middle attacks. The idea is that it checks the system host keys file(\"~/.ssh/known_hosts\") and the application host keys file(\"./known_hosts\") in order, if the ssh server's hostname is not found or the key is not matched, the connection will be aborted.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 5.517578125,
          "content": "WebSSH\n------\n\n|Build Status| |codecov| |PyPI - Python Version| |PyPI|\n\nIntroduction\n~~~~~~~~~~~~\n\nA simple web application to be used as an ssh client to connect to your\nssh servers. It is written in Python, base on tornado, paramiko and\nxterm.js.\n\nFeatures\n~~~~~~~~\n\n-  SSH password authentication supported, including empty password.\n-  SSH public-key authentication supported, including DSA RSA ECDSA\n   Ed25519 keys.\n-  Encrypted keys supported.\n-  Two-Factor Authentication (time-based one-time password) supported.\n-  Fullscreen terminal supported.\n-  Terminal window resizable.\n-  Auto detect the ssh server's default encoding.\n-  Modern browsers including Chrome, Firefox, Safari, Edge, Opera\n   supported.\n\nPreview\n~~~~~~~\n\n|Login| |Terminal|\n\nHow it works\n~~~~~~~~~~~~\n\n::\n\n    +---------+     http     +--------+    ssh    +-----------+\n    | browser | <==========> | webssh | <=======> | ssh server|\n    +---------+   websocket  +--------+    ssh    +-----------+\n\nRequirements\n~~~~~~~~~~~~\n\n-  Python 3.8+\n\nQuickstart\n~~~~~~~~~~\n\n1. Install this app, run command ``pip install webssh``\n2. Start a webserver, run command ``wssh``\n3. Open your browser, navigate to ``127.0.0.1:8888``\n4. Input your data, submit the form.\n\nServer options\n~~~~~~~~~~~~~~\n\n.. code:: bash\n\n    # start a http server with specified listen address and listen port\n    wssh --address='2.2.2.2' --port=8000\n\n    # start a https server, certfile and keyfile must be passed\n    wssh --certfile='/path/to/cert.crt' --keyfile='/path/to/cert.key'\n\n    # missing host key policy\n    wssh --policy=reject\n\n    # logging level\n    wssh --logging=debug\n\n    # log to file\n    wssh --log-file-prefix=main.log\n\n    # more options\n    wssh --help\n\nBrowser console\n~~~~~~~~~~~~~~~\n\n.. code:: javascript\n\n    // connect to your ssh server\n    wssh.connect(hostname, port, username, password, privatekey, passphrase, totp);\n\n    // pass an object to wssh.connect\n    var opts = {\n      hostname: 'hostname',\n      port: 'port',\n      username: 'username',\n      password: 'password',\n      privatekey: 'the private key text',\n      passphrase: 'passphrase',\n      totp: 'totp'\n    };\n    wssh.connect(opts);\n\n    // without an argument, wssh will use the form data to connect\n    wssh.connect();\n\n    // set a new encoding for client to use\n    wssh.set_encoding(encoding);\n\n    // reset encoding to use the default one\n    wssh.reset_encoding();\n\n    // send a command to the server\n    wssh.send('ls -l');\n\nCustom Font\n~~~~~~~~~~~\n\nTo use custom font, put your font file in the directory\n``webssh/static/css/fonts/`` and restart the server.\n\nURL Arguments\n~~~~~~~~~~~~~\n\nSupport passing arguments by url (query or fragment) like following\nexamples:\n\nPassing form data (password must be encoded in base64, privatekey not\nsupported)\n\n.. code:: bash\n\n    http://localhost:8888/?hostname=xx&username=yy&password=str_base64_encoded\n\nPassing a terminal background color\n\n.. code:: bash\n\n    http://localhost:8888/#bgcolor=green\n\nPassing a user defined title\n\n.. code:: bash\n\n    http://localhost:8888/?title=my-ssh-server\n\nPassing an encoding\n\n.. code:: bash\n\n    http://localhost:8888/#encoding=gbk\n\nPassing a command executed right after login\n\n.. code:: bash\n\n    http://localhost:8888/?command=pwd\n\nPassing a terminal type\n\n.. code:: bash\n\n    http://localhost:8888/?term=xterm-256color\n\nUse Docker\n~~~~~~~~~~\n\nStart up the app\n\n::\n\n    docker-compose up\n\nTear down the app\n\n::\n\n    docker-compose down\n\nTests\n~~~~~\n\nRequirements\n\n::\n\n    pip install pytest pytest-cov codecov flake8 mock\n\nUse unittest to run all tests\n\n::\n\n    python -m unittest discover tests\n\nUse pytest to run all tests\n\n::\n\n    python -m pytest tests\n\nDeployment\n~~~~~~~~~~\n\nRunning behind an Nginx server\n\n.. code:: bash\n\n    wssh --address='127.0.0.1' --port=8888 --policy=reject\n\n.. code:: nginx\n\n    # Nginx config example\n    location / {\n        proxy_pass http://127.0.0.1:8888;\n        proxy_http_version 1.1;\n        proxy_read_timeout 300;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Real-PORT $remote_port;\n    }\n\nRunning as a standalone server\n\n.. code:: bash\n\n    wssh --port=8080 --sslport=4433 --certfile='cert.crt' --keyfile='cert.key' --xheaders=False --policy=reject\n\nTips\n~~~~\n\n-  For whatever deployment choice you choose, don't forget to enable\n   SSL.\n-  By default plain http requests from a public network will be either\n   redirected or blocked and being redirected takes precedence over\n   being blocked.\n-  Try to use reject policy as the missing host key policy along with\n   your verified known\\_hosts, this will prevent man-in-the-middle\n   attacks. The idea is that it checks the system host keys\n   file(\"~/.ssh/known\\_hosts\") and the application host keys\n   file(\"./known\\_hosts\") in order, if the ssh server's hostname is not\n   found or the key is not matched, the connection will be aborted.\n\n.. |Build Status| image:: https://travis-ci.org/huashengdun/webssh.svg?branch=master\n   :target: https://travis-ci.org/huashengdun/webssh\n.. |codecov| image:: https://codecov.io/gh/huashengdun/webssh/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/huashengdun/webssh\n.. |PyPI - Python Version| image:: https://img.shields.io/pypi/pyversions/webssh.svg\n.. |PyPI| image:: https://img.shields.io/pypi/v/webssh.svg\n.. |Login| image:: https://github.com/huashengdun/webssh/raw/master/preview/login.png\n.. |Terminal| image:: https://github.com/huashengdun/webssh/raw/master/preview/terminal.png\n\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.0703125,
          "content": "version: '3'\nservices:\n  web:\n    build: .\n    ports:\n    - \"8888:8888\"\n"
        },
        {
          "name": "preview",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0302734375,
          "content": "paramiko==3.0.0\ntornado==6.2.0\n"
        },
        {
          "name": "run.py",
          "type": "blob",
          "size": 0.0673828125,
          "content": "from webssh.main import main\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.1298828125,
          "content": "[wheel]\nuniversal = 1\n\n[metadata]\nlicense_file = LICENSE\n\n[flake8]\nexclude = .git,build,dist,tests, __init__.py\nmax-line-length = 79\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.9599609375,
          "content": "import codecs\nfrom setuptools import setup\nfrom webssh._version import __version__ as version\n\n\nwith codecs.open('README.rst', encoding='utf-8') as f:\n    long_description = f.read()\n\n\nsetup(\n    name='webssh',\n    version=version,\n    description='Web based ssh client',\n    long_description=long_description,\n    author='Shengdun Hua',\n    author_email='webmaster0115@gmail.com',\n    url='https://github.com/huashengdun/webssh',\n    packages=['webssh'],\n    entry_points='''\n    [console_scripts]\n    wssh = webssh.main:main\n    ''',\n    license='MIT',\n    include_package_data=True,\n    classifiers=[\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n    ],\n    install_requires=[\n        'tornado>=4.5.0',\n        'paramiko>=2.3.1',\n    ],\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "webssh",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}