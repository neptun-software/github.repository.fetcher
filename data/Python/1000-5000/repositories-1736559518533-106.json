{
  "metadata": {
    "timestamp": 1736559518533,
    "page": 106,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tschellenbach/Stream-Framework",
      "stars": 4731,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.26171875,
          "content": "[report]\nexclude_lines =\n    pragma: no cover\n    raise NotImplementedError\n\tdef __repr__\n    if self.debug:\n    if settings.DEBUG\n    raise AssertionError\n    raise NotImplementedError\n    if 0:\n    if __name__ == .__main__.:\n[run]\nomit = stream_framework/__init__.py"
        },
        {
          "name": ".coveralls.yml",
          "type": "blob",
          "size": 0.0673828125,
          "content": "repo_token: 2E5AJ7x7K9hIqTi2RrWmOt32D9OGFTwBG\nservice_name: travis-ci"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.126953125,
          "content": "*.log\n*.pot\n*.pyc\n*.egg-info\n/.cache\nlocal_settings.py\n\n.vagrant\n.DS_Store\n\npinterest_example/static/CACHE/\n.sass-cache\n.coverage\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.341796875,
          "content": "language: python\npython:\n  - 3.5\n  - 3.4\n  - 2.7\nsudo: false\naddons:\n  apt:\n    packages:\n    - libev4\n    - libev-dev\nnotifications:\n  email:\n    - tbarbugli@gmail.com\n    - thierryschellenbach@gmail.com\ncache: pip\nenv:\n  - CASSANDRA_DRIVER=\"3.7.1\"\n  - CASSANDRA_DRIVER=\"3.6.0\"\n  - CASSANDRA_DRIVER=\"3.5.0\"\n  - CASSANDRA_DRIVER=\"3.4.1\"\n  - CASSANDRA_DRIVER=\"3.3.0\"\n  - CASSANDRA_DRIVER=\"3.2.2\"\n  - CASSANDRA_DRIVER=\"3.1.1\"\n  - CASSANDRA_DRIVER=\"3.0.0\"\n  - CASSANDRA_DRIVER=\"2.7.2\"\n\nmatrix:\n  fast_finish: true\n  exclude:\n    - python: 3.5\n      env: CASSANDRA_DRIVER=\"3.3.0\"\n    - python: 3.5\n      env: CASSANDRA_DRIVER=\"3.2.2\"\n    - python: 3.5\n      env: CASSANDRA_DRIVER=\"3.1.1\"\n    - python: 3.5\n      env: CASSANDRA_DRIVER=\"3.0.0\"\n    - python: 3.5\n      env: CASSANDRA_DRIVER=\"2.7.2\"\n    - python: 3.4\n      env: CASSANDRA_DRIVER=\"3.3.0\"\n\nservices:\n  - redis\n  - cassandra\nbefore_install:\n  - git clone https://github.com/tbarbugli/stream_framework_example.git pinterest_example\nbefore_script:\n  - echo 'DROP KEYSPACE test_stream_framework;' | /usr/local/cassandra/bin/cqlsh;\ninstall:\n  - pip install --upgrade pip\n  - pip install cassandra-driver==$CASSANDRA_DRIVER\n  - pip install -e .[redis,cassandra]\n  - pip freeze\n  - pip install cassandra-driver==$CASSANDRA_DRIVER\nscript:\n  - CQLENG_ALLOW_SCHEMA_MANAGEMENT=\"yes\" py.test -l --tb=short stream_framework/tests\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.1845703125,
          "content": "Project Authors\n * Thierry Schellenbach\n * Tommaso Barbugli\n * Guyon Moree\n * Alessandro Sansoterra (Example app design)\n\nContributors\n * Anislav Atanasov\n * Miguel Gomard\n * Jelte Fennema\n"
        },
        {
          "name": "CHANGES",
          "type": "blob",
          "size": 2.3701171875,
          "content": "==== 1.4.0 ====\n\n- make add_to_storage signature consistent on all implementations (args and kwargs were missing for some)\n- Add support for cassandra-driver 3.2.0+\n- Use extras_require pip feature instead of custom install arguments\n\n==== 1.3.5 ====\n\n- Fix ignored redis_server timeline parameter\n\n==== 1.3.4 ====\n\n- faster deserialization for Cassandra feeds (skip ORM layer during serialization)\n- optional cassandra install\n- allow to use cassandra-driver v3 via install option\n\nBreaking changes:\n-----------------\n\nCassandra users:\n    * activity serializers now get a dictionary instead of a CQL model instances when loading data\n    * feeds' timelines that implements get_slice_from_storage now must return a dict instead of CQL model instance\n\n\n==== 1.3.3 ====\n\n- easier test setup\n- add default protocol_version for Cassandra (v2)\n- default serialization_id for aggregated activities is now with millisecond resolution\n- add built-in sorting to Activity class\n\n==== 1.3.2 ====\n\n- support for using stream-framework with cassandra-driver 3.0.0. this enables support for cassandra 3.3\n\n==== 1.3.1 ====\n\n- update cassandra driver to 2.7.2\n\n==== 1.3.0 ====\n\n- removed feedly legacy module\n- move to cassandra driver 2.7 (CQLEngine dev happens on the driver since 2.5)\n\n==== 1.2.0 ====\n\n- python 2.7 and 3.4 support\n\n==== 1.1.3 ====\n\n- remove batch inserts for cassandra backend, move to async parallel statements\n- millisecond timestamp resolution\n- manager's follow_user method now respects async parameter\n- custom cassandra models are now easy to use\n\n==== 1.1.2 ====\n\n- Fixed potential memory leak with memoize decorator (Cassandra only)\n\n==== 1.1.1 ====\n\n- fixed pypi link to github\n\n==== 1.1.0 ====\n\n- Support activity_id (asc and desc) sorting for Redis backed feeds (thanks to Anislav)\n- Configurable aggregated feeds update_seen_at and update_read_at fields\n- Faster redis counts (using ZCARD instead of ZCOUNT -inf +inf)\n\nBreaking changes:\n----------------\nAggregated activities update_seen_at and update_read_at attributes are not stored in UTC by default\n\n==== 1.0.1 ====\n\n- Fixes some legacy feedly names in code\n- Better documentation\n\n==== 1.0.0 ====\n\n- Renamed from Feedly to Stream Framework\n- Feedly install via pypi will be supported till 22-01-2015\n- The new package is available on pypi here https://pypi.python.org/pypi/stream_framework/\n- And support the from feedly import * syntax till 19-03-2015\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.5166015625,
          "content": "Copyright (c) Thierry Schellenbach\n\n (http://www.mellowmorning.com)\nAll rights reserved.\n\nRedistribution and use of this software in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n- Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n- Neither the name of Thierry Schellenbach. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission of Thierry Schellenbach.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.091796875,
          "content": "include LICENSE.txt\ninclude AUTHORS\ninclude CHANGES\ninclude README.md\nprune pinterest_example\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.8525390625,
          "content": "Stream Framework\n----------------\n\n[![Build Status](https://travis-ci.org/tschellenbach/Stream-Framework.svg?branch=master)](https://travis-ci.org/tschellenbach/Stream-Framework)\n[![StackShare](https://img.shields.io/badge/tech-stack-0690fa.svg?style=flat)](https://stackshare.io/stream/stream-framework)\n\n\n## Activity Streams & Newsfeeds ##\n\n<p align=\"center\">\n  <img src=\"https://dvqg2dogggmn6.cloudfront.net/images/mood-home.png\" alt=\"Examples of what you can build\" title=\"What you can build\"/>\n</p>\n\nStream Framework is a Python library which allows you to build activity streams & newsfeeds using Cassandra and/or Redis. If you're not using python have a look at [Stream][stream-url], which supports Node, Ruby, PHP, Python, Go, Scala, Java and REST.\n\nExamples of what you can build are:\n\n* Activity streams such as seen on Github\n* A Twitter style newsfeed\n* A feed like Instagram/ Pinterest\n* Facebook style newsfeeds\n* A notification system\n\n(Feeds are also commonly called: Activity Streams, activity feeds, news streams.)\n\n## Stream ##\n\n<a href=\"https://getstream.io/\"><img src=\"http://dvqg2dogggmn6.cloudfront.net/images/getstream-dot-io-logo-light.png\" alt=\"Build scalable newsfeeds and activity streams using getstream.io\" title=\"Build scalable newsfeeds and activity streams using getstream.io\" width=\"300px\"/></a>\n\nStream Framework's authors also offer a web service for building scalable newsfeeds & activity streams at [Stream][stream-url].\nIt allows you to create your feeds by talking to a beautiful and easy to use REST API. There are clients available for Node, Ruby, PHP, Python, Go, Scala and Java. The [Get Started](https://getstream.io/get_started/#intro) page explains the API & concept in a few clicks. It's a lot easier to use, free up to 3 million feed updates and saves you the hassle of maintaining Cassandra, Redis, Faye, RabbitMQ and Celery workers.\n\n\n## Background Articles ##\n\nA lot has been written about the best approaches to building feed based systems.\nHere's a collection of some of the talks:\n\n-   [Twitter 2013][twitter_2013]: Redis based, database fallback, very similar to Fashiolista's old approach.\n-   [Etsy feed scaling][etsy]: Gearman, separate scoring and aggregation steps, rollups - aggregation part two\n-   [LinkedIn ranked feeds][linkedin]\n-   [Facebook history][facebook]\n-   [Django project with good naming conventions][djproject]\n-   [Activity stream specification][activity_stream]\n-   [Quora post on best practices][quora]\n-   [Quora scaling a social network feed][quora2]\n-   [Redis ruby example][redisruby]\n-   [FriendFeed approach][friendfeed]\n-   [Thoonk setup][thoonk]\n-   [Yahoo Research Paper][yahoo]\n-   [Twitter’s approach][twitter]\n-   [Cassandra at Instagram][instagram]\n-   [Relevancy at Etsy][etsy_relevancy]\n-   [Zite architecture overview][zite]\n-   [Ranked feeds with ES][es]\n-   [Riak at Xing - by Dr. Stefan Kaes & Sebastian Röbke][xing]\n-   [Riak and Scala at Yammer][yammer]\n\n\n\n\n## Stream Framework ##\n\n\n**Installation**\n\nInstallation through `pip` is recommended::\n\n    $ pip install stream-framework\n\nBy default `stream-framework` does not install the required dependencies for redis and cassandra:\n\n***Install stream-framework with Redis dependencies***\n\n    $ pip install stream-framework[redis]\n\n***Install stream-framework with Cassandra dependencies***\n\n    $ pip install stream-framework[cassandra]\n\n***Install stream-framework with both Redis and Cassandra dependencies***\n\n    $ pip install stream-framework[redis,cassandra]\n\n\n**Authors & Contributors**\n\n * Thierry Schellenbach ([thierry@getstream.io](mailto:thierry@getstream.io))\n * Tommaso Barbugli ([tommaso@getstream.io](mailto:tommaso@getstream.io))\n * Anislav Atanasov\n * Guyon Morée\n\n**Resources**\n\n * [Documentation]\n * [Bug Tracker]\n * [Code]\n * [Travis CI]\n * [Stackoverflow]\n\n**Example application**\n\nWe've included a [Pinterest-like example application][example_app_link] based on Stream Framework.\n\n**Tutorials**\n\n * [Pinterest-style feed example app][mellowmorning_example]\n\n\n## Using Stream Framework ##\n\nThis quick example will show you how to publish a \"Pin\" to all your followers. So let's create an activity for the item you just pinned.\n\n```python\nfrom stream_framework.activity import Activity\n\n\ndef create_activity(pin):\n    activity = Activity(\n        pin.user_id,\n        PinVerb,\n        pin.id,\n        pin.influencer_id,\n        time=make_naive(pin.created_at, pytz.utc),\n        extra_context=dict(item_id=pin.item_id)\n    )\n    return activity\n```\n\nNext up we want to start publishing this activity on several feeds.\nFirst of all, we want to insert it into your personal feed, and then into your followers' feeds.\nLet's start by defining these feeds.\n\n```python\n\nfrom stream_framework.feeds.redis import RedisFeed\n\n\nclass UserPinFeed(PinFeed):\n    key_format = 'feed:user:%(user_id)s'\n\n\nclass PinFeed(RedisFeed):\n    key_format = 'feed:normal:%(user_id)s'\n```\n\nWriting to these feeds is very simple. For instance to write to the feed of user 13 one would do:\n\n```python\n\nfeed = UserPinFeed(13)\nfeed.add(activity)\n```\n\nBut we don't want to publish to just one users feed. We want to publish to the feeds of all users which follow you.\nThis action is called a \"fanout\" and is abstracted away in the manager class.\nWe need to subclass the Manager class and tell it how we can figure out which users follow us.\n\n```python\n\nfrom stream_framework.feed_managers.base import Manager\n\n\nclass PinManager(Manager):\n    feed_classes = dict(\n        normal=PinFeed,\n    )\n    user_feed_class = UserPinFeed\n\n    def add_pin(self, pin):\n        activity = pin.create_activity()\n        # add user activity adds it to the user feed, and starts the fanout\n        self.add_user_activity(pin.user_id, activity)\n\n    def get_user_follower_ids(self, user_id):\n        ids = Follow.objects.filter(target=user_id).values_list('user_id', flat=True)\n        return {FanoutPriority.HIGH:ids}\n\nmanager = PinManager()\n```\n\nNow that the manager class is set up, broadcasting a pin becomes as easy as:\n\n```python\nmanager.add_pin(pin)\n```\n\nCalling this method will insert the pin into your personal feed and into all the feeds of users which follow you.\nIt does so by spawning many small tasks via Celery. In Django (or any other framework) you can now show the users feed.\n\n```python\n# django example\n\n@login_required\ndef feed(request):\n    '''\n    Items pinned by the people you follow\n    '''\n    context = RequestContext(request)\n    feed = manager.get_feeds(request.user.id)['normal']\n    activities = list(feed[:25])\n    context['activities'] = activities\n    response = render_to_response('core/feed.html', context)\n    return response\n\n```\n\nThis example only briefly covered how Stream Framework works.\nThe full explanation can be found on [the documentation][Documentation].\n\n## Features ##\n\nStream Framework uses Celery and Redis/Cassandra to build a system with heavy writes and extremely light reads.\nIt features:\n\n  - Asynchronous tasks (All the heavy lifting happens in the background, your users don't wait for it)\n  - Reusable components (You will need to make tradeoffs based on your use cases, Stream Framework doesn't get in your way)\n  - Full Cassandra and Redis support\n  - The Cassandra storage uses the new CQL3 and Python-Driver packages, which give you access to the latest Cassandra features.\n  - Build for the extremely performant Cassandra 2.1. 2.2 and 3.3 also pass the test suite, but no production experience.\n\n<!-- links -->\n\n[stream-url]: https://getstream.io/\n[fashiolista]: http://www.fashiolista.com/\n[blog]: https://getstream.io/blog/introducing-the-stream-framework/\n[stream_js]: https://github.com/tschellenbach/stream-js\n[stream_python]: https://github.com/tschellenbach/stream-python\n[stream_php]: https://github.com/tbarbugli/stream-php\n[stream_ruby]: https://github.com/tbarbugli/stream-ruby\n[fashiolista_flat]: http://www.fashiolista.com/feed/?feed_type=F\n[fashiolista_aggregated]: http://www.fashiolista.com/feed/?feed_type=A\n[fashiolista_notification]: http://www.fashiolista.com/my_style/notification/\n[example_app_link]: https://github.com/tbarbugli/stream_framework_example\n[twitter_2013]: http://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html\n[etsy]: http://www.slideshare.net/danmckinley/etsy-activity-feeds-architecture/\n[quora]: http://www.quora.com/What-are-best-practices-for-building-something-like-a-News-Feed?q=news+feeds\n[linkedin]: https://engineering.linkedin.com/blog/2016/03/followfeed--linkedin-s-feed-made-faster-and-smarter\n[facebook]: http://www.infoq.com/presentations/Facebook-Software-Stack\n[djproject]: https://github.com/justquick/django-activity-stream\n[activity_stream]: http://activitystrea.ms/specs/atom/1.0/\n[quora2]: http://www.quora.com/What-are-the-scaling-issues-to-keep-in-mind-while-developing-a-social-network-feed\n[redisruby]: http://blog.waxman.me/how-to-build-a-fast-news-feed-in-redis\n[friendfeed]: http://backchannel.org/blog/friendfeed-schemaless-mysql\n[thoonk]: http://blog.thoonk.com/\n[yahoo]: http://jeffterrace.com/docs/feeding-frenzy-sigmod10-web.pdf\n[twitter]: http://www.slideshare.net/nkallen/q-con-3770885\n[instagram]: http://planetcassandra.org/blog/post/instagram-making-the-switch-to-cassandra-from-redis-75-instasavings\n[etsy_relevancy]: http://mimno.infosci.cornell.edu/info6150/readings/p1640-hu.pdf\n[zite]: http://blog.zite.com/2012/01/11/zite-under-the-hood/\n[es]: https://speakerdeck.com/viadeoteam/a-personalized-news-feed\n[xing]: https://www.youtube.com/watch?v=38yKu5HR-tM\n[yammer]: http://basho.com/posts/business/riak-and-scala-at-yammer/\n[mellowmorning_example]: http://www.mellowmorning.com/2013/10/18/scalable-pinterest-tutorial-feedly-redis/\n[Documentation]: https://stream-framework.readthedocs.io/\n[Bug Tracker]: https://github.com/tschellenbach/Stream-Framework/issues\n[Code]: http://github.com/tschellenbach/Stream-Framework\n[Travis CI]: http://travis-ci.org/tschellenbach/Stream-Framework/\n[Stackoverflow]: http://stackoverflow.com/questions/tagged/stream-framework\n"
        },
        {
          "name": "ROADMAP",
          "type": "blob",
          "size": 0.3037109375,
          "content": "Feel free to request features on the Github issue tracker.\nOur roadmap currently looks like this:\n\n* Documentation improvements\n* Database backend so you can get started easily\n\nFuture\n\n* Relevancy based feeds\n* Include an API similar to getstream.io so Ruby, PHP and Node folks can also use Stream Framework.\n\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 0.765625,
          "content": "# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nVagrant::Config.run do |config|\n  config.vm.box = \"precise64\"\n  config.vm.box_url = \"http://files.vagrantup.com/precise64.box\"\n\n  config.vm.share_folder \"workspace\", \"/vagrant_workspace\", \"../\"\n  config.vm.customize [\"modifyvm\", :id, \"--memory\", 1024]\n  config.vm.network :hostonly, '192.168.50.55'\n\n  config.vm.provision :shell, :inline => \"apt-get update\"\n  config.vm.provision :puppet do |puppet|\n     puppet.manifests_path = \"vagrant/puppet/manifests\"\n     puppet.module_path = \"vagrant/puppet/modules\"\n     puppet.manifest_file  = \"local_dev.pp\"\n    facts = {\n      :ec2_userdata => {\n        :role => 'local_dev',\n        :environment => 'development'\n      }.to_json,\n      :vagrant => true,\n    }\n    puppet.facter = facts\n   end\nend\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabfile.py",
          "type": "blob",
          "size": 1.2080078125,
          "content": "from fabric.api import local, cd\nimport os\nPROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))\n\n\ndef publish(test='yes'):\n    '''\n    Easy publishing of my nice open source project\n    '''\n    if test == 'yes':\n        validate()\n\n    from stream_framework import __version__\n    tag_name = 'v%s' % __version__\n    local('python setup.py sdist upload')\n\n    local('git tag %s' % tag_name)\n    local('git push origin --tags')\n\n\ndef validate():\n    with cd(PROJECT_ROOT):\n        local('pep8 --exclude=migrations --ignore=E501,E225,W293 stream_framework')\n        # local('pyflakes -x W stream_framework')\n        local(\n            'py.test -sl --tb=short --cov coveralls --cov-report html --cov stream_framework stream_framework/tests')\n\n\ndef clean():\n    # all dirs which contain python code\n    python_dirs = []\n    for root, dirs, files in os.walk(PROJECT_ROOT):\n        python_dir = any(f.endswith('.py') for f in files)\n        if python_dir:\n            python_dirs.append(root)\n    for d in python_dirs:\n        local('bash -c \"autopep8 -i %s/*.py\"' % d)\n\n\ndef docs():\n    local('DJANGO_SETTINGS_MODULE=stream_framework.tests.settings pandoc -s -w rst README.md -o docs/readme.rst')\n    local('sphinx-build -Eav docs html')\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.1103515625,
          "content": "[pytest]\naddopts = --doctest-modules\npython_files = *.py\nDJANGO_SETTINGS_MODULE = stream_framework.tests.settings"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.068359375,
          "content": "#!/usr/bin/env python\n\nfrom io import open\nfrom setuptools import setup, find_packages\nfrom setuptools.command.test import test as TestCommand\nfrom stream_framework import __version__, __maintainer__, __email__\nimport sys\n\nlong_description = open('README.md', encoding=\"utf-8\").read()\n\ntests_require = [\n    'Django>=1.3',\n    'mock',\n    'pep8',\n    'unittest2',\n    'pytest',\n]\n\ninstall_requires = [\n    'celery>=3.0.0',\n    'six'\n]\n\nextras_require = {\n    'test': tests_require,\n    'redis': ['redis>=2.8.0'],\n    'cassandra': ['cassandra-driver>=2.7.2'],\n}\n\nclass PyTest(TestCommand):\n\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = []\n        self.test_suite = True\n\n    def run_tests(self):\n        # import here, cause outside the eggs aren't loaded\n        import pytest\n        errno = pytest.main(self.test_args)\n        sys.exit(errno)\n\nsetup(\n    name='stream_framework',\n    version=__version__,\n    author=__maintainer__,\n    author_email=__email__,\n    url='https://github.com/tschellenbach/Stream-Framework/',\n    description='Stream Framework allows you to build complex feed and caching structures using Redis.',\n    long_description=long_description,\n    packages=find_packages(),\n    zip_safe=False,\n    install_requires=install_requires,\n    extras_require=extras_require,\n    cmdclass={'test': PyTest},\n    tests_require=tests_require,\n    include_package_data=True,\n    classifiers=[\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'Operating System :: OS Independent',\n        'Topic :: Software Development',\n        'Development Status :: 5 - Production/Stable',\n        'License :: OSI Approved :: GNU General Public License (GPL)',\n        'Natural Language :: English',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Topic :: Scientific/Engineering :: Mathematics',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Framework :: Django'\n    ],\n)\n"
        },
        {
          "name": "stream_framework",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}