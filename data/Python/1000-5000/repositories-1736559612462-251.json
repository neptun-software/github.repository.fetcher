{
  "metadata": {
    "timestamp": 1736559612462,
    "page": 251,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "quantumlib/Cirq",
      "stars": 4389,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".codecov.yaml",
          "type": "blob",
          "size": 0.244140625,
          "content": "# Summary: configuration for codecov/codecov-action used in ci.yml.\n# See https://github.com/codecov/codecov-action for info about the GitHub Action.\n\ncoverage:\n  status:\n    project:\n      default:\n        threshold: 0.1%\n\nignore:\n  - \"**/*_pb2.py\"\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.4375,
          "content": "# ignore compiled python files\n__pycache__\n*.pyc\n\n# ignore idea SDK\n.idea/*\n.vscode\n\n# ignore cache\n.cache/*\n.mypy_cache/*\n.pytest_cache/*\n\n# ignore coverage files\n*.py,cover\n*.coverage\n*.coverage.*\n\n# packaging\n*.egg-info/\n\n# swap files\n*.swp\n\n# Mac only\n.DS_Store\n\n# From asv\n*.asv/\n\n# Ignore generated Jupyter files\n*.ipynb_checkpoints/\n\n# Ignore Bazel files\n/bazel-*\n\n# Default pycharm virtual env\n.venv/\n\n# pyenv configuration\n.python-version\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.7236328125,
          "content": "# migrating to the black formatter\na61e51b53612735e93b3bb8a7605030c499cd6c7\n\n# adding flynt formatting for strings\n7a335e3ef297057b4a12f7c21d4e8dd426b44ca0\n\n# Format cirq-core with latest version of black (#5159)\ncb6940a40141dba95cba84f5acc27acbeb65b17c\n\n# Format cirq-google with latest version of black (#5160)\n77fb93af5ebbb5bcf7f8a4dc3fd2fba0e827488c\n\n# Format cirq-google with skip-magic-trailing-comma (#5171)\n01a7cb94a90482557ac26b705adbb379e139a7b2\n\n# Format according to new black rules (#5259)\n27152c63cc74d526e3adca721ac12e8842ac6fa5\n\n# Rewrite strings to satisfy pylint consider-using-f-string (#6198)\n084e273aba66bb31ed4fc524ffbbedadbf840a59\n\n# Format all files with black-24.3.0 (#6513)\n1a6c16a07cb37136a7674dc9f2e114942c88e02b\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2021484375,
          "content": "# Mark generated protobuf files to be collapsed by default in PRs\n# See: https://github.com/github/linguist/#generated-code\n*_pb2.py         linguist-generated=true\n*_pb2.pyi        linguist-generated=true\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4970703125,
          "content": "# ignore compiled python files\n__pycache__\n*.pyc\n\n# ignore idea SDK\n.idea/*\n.vscode\n\n# ignore cache\n.cache/*\n.mypy_cache/*\n.pytest_cache/*\n\n# ignore coverage files\n*.py,cover\n*.coverage\n*.coverage.*\n\n# packaging\n*.egg-info/\nbuild/\n\n# API docs\ndocs/api_docs\n\n# swap files\n*.swp\n\n# Mac only\n.DS_Store\n\n# From asv\n*.asv/\n\n# Ignore generated Jupyter files\n*.ipynb_checkpoints/\n\n# Ignore Bazel files\n/bazel-*\n\n# Default pycharm virtual env\n.venv/\n\n# pyenv configuration\n.python-version\n\n# notebook test output\nout\n"
        },
        {
          "name": ".zenodo.json",
          "type": "blob",
          "size": 0.4560546875,
          "content": "{\n    \"description\": \"Cirq is a Python library for writing, manipulating, and optimizing quantum circuits and running them against quantum computers and simulators.\",\n    \"license\": \"Apache-2.0\",\n    \"title\": \"Cirq\",\n    \"upload_type\": \"software\",\n    \"creators\": [\n        {\n            \"name\": \"Cirq Developers\"\n        }\n    ],\n    \"access_right\": \"open\",\n    \"notes\": \"See full list of authors on GitHub: https://github.com/quantumlib/Cirq/graphs/contributors\"\n}\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.28515625,
          "content": "# This is the list of Cirq authors for copyright purposes.\n#\n# This does not necessarily list everyone who has contributed code, since in\n# some cases, their employer may be the copyright holder.  To see the full list\n# of contributors, see the revision history in source control.\nGoogle LLC\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.8623046875,
          "content": "cff-version: 1.2.0\nmessage: If you use this software, please cite it as below.\nauthors:\n  - name: Cirq Developers\n    website: https://github.com/quantumlib/Cirq/graphs/contributors\ntitle: Cirq\nabstract: Python package for writing, manipulating, and running quantum circuits on quantum computers and simulators.\nversion: 1.4.1\ndate-released: 2024-06-26\nurl: https://quantumai.google/cirq\nrepository-code: https://github.com/quantumlib/Cirq\nlicense: Apache-2.0\nidentifiers:\n  - type: doi\n    value: 10.5281/zenodo.4062499\n    description: Archival DOI for Cirq software releases.\ntype: software\nkeywords:\n  - api\n  - nisq\n  - noisy intermediate-scale quantum\n  - python\n  - quantum algorithms\n  - quantum circuit simulation\n  - quantum circuits\n  - quantum computing\n  - quantum programming\n  - quantum programming languages\n  - quantum simulation\n  - sdk\n  - simulation\n  - software\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 4.30078125,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of\nexperience, education, socio-economic status, nationality, personal appearance,\nrace, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n*   Using welcoming and inclusive language\n*   Being respectful of differing viewpoints and experiences\n*   Gracefully accepting constructive criticism\n*   Focusing on what is best for the community\n*   Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n*   The use of sexualized language or imagery and unwelcome sexual attention or\n    advances\n*   Trolling, insulting/derogatory comments, and personal or political attacks\n*   Public or private harassment\n*   Publishing others' private information, such as a physical or electronic\n    address, without explicit permission\n*   Other conduct which could reasonably be considered inappropriate in a\n    professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, or to ban temporarily or permanently any\ncontributor for other behaviors that they deem inappropriate, threatening,\noffensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\nThis Code of Conduct also applies outside the project spaces when the Project\nStewards have a reasonable belief that an individual's behavior may have a\nnegative impact on the project or its community.\n\n## Conflict Resolution\n\nWe do not believe that all conflict is bad; healthy debate and disagreement\noften yield positive results. However, it is never okay to be disrespectful or\nto engage in behavior that violates the project’s Code of Conduct.\n\nIf you see someone violating the Code of Conduct, you are encouraged to address\nthe behavior directly with those involved. Many issues can be resolved quickly\nand easily, and this gives people more control over the outcome of their\ndispute. If you are unable to resolve the matter for any reason, or if the\nbehavior is threatening or harassing, report it. We are dedicated to providing\nan environment where participants feel welcome and safe.\n\nReports should be directed to quantumai-oss-maintainers@googlegroups.com,\nthe project stewards at Google Quantum AI. They will then work with a committee\nconsisting of representatives from the Open Source Programs Office and the\nGoogle Open Source Strategy team. If for any reason you are uncomfortable\nreaching out to the Project Stewards, please email opensource@google.com.\n\nWe will investigate every complaint, but you may not receive a direct response.\nWe will use our discretion in determining when and how to follow up on reported\nincidents, which may range from not taking action to permanent expulsion from\nthe project and project-sponsored spaces. We will notify the accused of the\nreport and provide them an opportunity to discuss it before any action is taken.\nThe identity of the reporter will be omitted from the details of the report\nsupplied to the accused. In potentially harmful situations, such as ongoing\nharassment or threats to anyone's safety, we may take action without notice.\n\n## Attribution\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4,\navailable at\nhttps://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.9365234375,
          "content": "# How to Contribute\n\nWe'd love to accept your patches and contributions to this project.\nWe do have some guidelines to follow, covered in this document, but don't\nworry about (or expect to) get everything right the first time!\nCreate a pull request and we'll nudge you in the right direction. Please also\nnote that we have a [code of conduct](CODE_OF_CONDUCT.md) to make Cirq an\nopen and welcoming community environment.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a [Contributor License\nAgreement](https://cla.developers.google.com/about) (CLA). You\n(or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to https://cla.developers.google.com/ to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Pull Request Process and Code Review\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose.\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) has\ninformation on using pull requests.\n\nThe preferred manner for submitting pull requests is for developers to fork\nthe Cirq [repository](https://github.com/quantumlib/Cirq) and then use a [git\nbranch](https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell)\nfrom this fork to create a pull request to the main Cirq repo. The basic process for setting\nup a fork is as follows:\n\n1. Fork the Cirq repository (you can use the _Fork_ button in upper right\ncorner of the [repository page](https://github.com/quantumlib/Cirq)).\nForking creates a new GitHub repo at the location\n`https://github.com/USERNAME/Cirq`, where `USERNAME` is\nyour GitHub user name. Use the instructions on the\n[development page](docs/dev/development.md) to download a copy to\nyour local machine. You need only do this once.\n1. Check out the `main` branch and create a new branch from `main`:\n    ```shell\n    git checkout main -b new_branch_name\n    ```\n    where `new_branch_name` is the name of your new branch.\n1. Do your work and commit your changes to this branch.\n1. If your local copy has drifted out of sync with the `main` branch of the\nmain Cirq repo, you may need to merge in the latest changes.  To do this,\nfirst update your local `main` and then merge your local `main`\ninto your branch:\n    ```shell\n    # Track the upstream repo (if your local repo hasn't):\n    git remote add upstream https://github.com/quantumlib/Cirq.git\n\n    # Update your local main.\n    git fetch upstream\n    git checkout main\n    git merge upstream/main\n    # Merge local main into your branch.\n    git checkout new_branch_name\n    git merge main\n    ```\n    You may need to fix [merge conflicts](\n    https://docs.github.com/articles/about-merge-conflicts)\n    during one or both of these merge processes.\n1. Finally, push your changes to your forked copy of the Cirq repo on GitHub:\n    ```shell\n    git push origin new_branch_name\n    ```\n1. Now when you navigate to the Cirq repository on GitHub\n(https://github.com/quantumlib/Cirq),\nyou should see the option to create a new pull request from\nyour clone repository.  Alternatively, you can create the pull request\nby navigating to the \"Pull requests\" tab in the page, and selecting\nthe appropriate branches.\n1. A reviewer will comment on your code and may ask for changes.\nYou can perform the necessary changes locally, and then push the new commit\nfollowing the same process as above.\n\n## Development Environment Setup\n\nPlease refer to our [development page](docs/dev/development.md) for\ninstructions on setting up your local development environment.\n\n## Code Testing Standards\n\nWhen a pull request is created or updated, various automatic checks will\nrun on GitHub to ensure that the changes won't break Cirq, as well as to make\nsure they meet the Cirq project's coding standards.\n\nCirq includes a continuous integration tool to perform testing.  See our\n[development page](docs/dev/development.md) on how to run the continuous\nintegration checks locally.\n\nPlease be aware of the following coding standards that will be applied to any\nnew changes.\n\n- **Tests**.\nExisting tests must continue to pass (or be updated) when new changes are\nintroduced. We use [pytest](https://docs.pytest.org) to run our\ntests.\n- **Coverage**.\nCode should be covered by tests.\nWe use [pytest-cov](https://pytest-cov.readthedocs.io) to compute\ncoverage, and custom tooling to filter down the output to only include new or\nchanged code. We don't require 100% coverage, but any uncovered code must\nbe annotated with `# pragma: no cover`. To ignore coverage of a single line,\nplace `# pragma: no cover` at the end of the line. To ignore coverage for\nan entire block, start the block with a `# pragma: no cover` comment on its\nown line.\n- **Lint**.\nCode should meet common style standards for Python and be free of error-prone\nconstructs. We use [Pylint](https://www.pylint.org/) to check for code lint.\nTo see which lint checks we enforce, see the\n[dev_tools/conf/.pylintrc](dev_tools/conf/.pylintrc) file. When Pylint produces\na false positive, it can be silenced with annotations. For example, the\nannotation `# pylint: disable=unused-import` would silence a warning about\nan unused import.\n- **Types**.\nCode should have [type annotations](https://www.python.org/dev/peps/pep-0484/).\nWe use [mypy](http://mypy-lang.org/) to check that type annotations are correct.\nWhen type checking produces a false positive, it can be silenced with\nannotations such as `# type: ignore`.\n\n## Request For Comment Process for New Major Features\n\nFor larger contributions that will benefit from design reviews, please use the Cirq\n[Request for Comment](docs/dev/rfc_process.md) process.\n\n## Developing notebooks\n\nPlease refer to our [notebooks guide](docs/dev/notebooks.md) on how to develop\niPython notebooks for documentation.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.794921875,
          "content": "FROM python:3.10-slim AS cirq_base\n\n# Install dependencies.\n# rm -rf /var/lib/apt/lists/* cleans up apt cache. See https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\nRUN DEBIAN_FRONTEND=noninteractive apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n     python3-pip \\\n     locales \\\n     && rm -rf /var/lib/apt/lists/*\n\n\n# Configure UTF-8 encoding.\nRUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && locale-gen\nENV LANG en_US.UTF-8  \nENV LANGUAGE en_US:en  \nENV LC_ALL en_US.UTF-8 \n\n# Make python3 default\nRUN rm -f /usr/bin/python \\\n     && ln -s /usr/bin/python3 /usr/bin/python\n#cirq stable image\nFROM cirq_base AS cirq_stable\nRUN pip3 install cirq\n\n##cirq pre_release image\nFROM cirq_base AS cirq_pre_release\nRUN pip3 install cirq~=1.0.dev\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.015625,
          "content": "include LICENSE\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 4.8408203125,
          "content": ".. image:: https://raw.githubusercontent.com/quantumlib/Cirq/main/docs/images/Cirq_logo_color.png\n  :target: https://github.com/quantumlib/cirq\n  :alt: Cirq\n  :width: 500px\n\nCirq is a Python library for writing, manipulating, and optimizing quantum\ncircuits and running them against quantum computers and simulators.\n\n.. image:: https://github.com/quantumlib/Cirq/actions/workflows/ci.yml/badge.svg?event=schedule\n  :target: https://github.com/quantumlib/Cirq\n  :alt: Build Status\n\n.. image:: https://codecov.io/gh/quantumlib/Cirq/branch/main/graph/badge.svg\n  :target: https://codecov.io/gh/quantumlib/Cirq\n\n.. image:: https://badge.fury.io/py/cirq.svg\n  :target: https://badge.fury.io/py/cirq\n\n\nInstallation and Documentation\n------------------------------\n\nCirq documentation is available at `quantumai.google/cirq <https://quantumai.google/cirq>`_.\n\nDocumentation for the latest **pre-release** version of cirq (tracks the repository's main branch; what you get if you ``pip install cirq~=1.0.dev``), is available `here <https://quantumai.google/reference/python/cirq/all_symbols?version=nightly>`__.\n\nDocumentation for the latest **stable** version of cirq (what you get if you ``pip install cirq``) is available `here <https://quantumai.google/reference/python/cirq/all_symbols>`__.\n\n\n- `Installation <https://quantumai.google/cirq/start/install>`_\n- `Documentation <https://quantumai.google/cirq>`_\n- `Tutorials <https://quantumai.google/cirq/build>`_\n\nFor a comprehensive list all of the interactive Jupyter Notebooks in our repo (including the ones not yet published to the site) open our repo in `Colab <https://colab.research.google.com/github/quantumlib/Cirq>`_.\n\nFor the latest news regarding Cirq, sign up to the `Cirq-announce email list <https://groups.google.com/forum/#!forum/cirq-announce>`__!\n\n\nHello Qubit\n-----------\n\nA simple example to get you up and running:\n\n.. code-block:: python\n\n  import cirq\n\n  # Pick a qubit.\n  qubit = cirq.GridQubit(0, 0)\n\n  # Create a circuit\n  circuit = cirq.Circuit(\n      cirq.X(qubit)**0.5,  # Square root of NOT.\n      cirq.measure(qubit, key='m')  # Measurement.\n  )\n  print(\"Circuit:\")\n  print(circuit)\n\n  # Simulate the circuit several times.\n  simulator = cirq.Simulator()\n  result = simulator.run(circuit, repetitions=20)\n  print(\"Results:\")\n  print(result)\n\nExample output:\n\n.. code-block::\n\n  Circuit:\n  (0, 0): ───X^0.5───M('m')───\n  Results:\n  m=11000111111011001000\n\n\nFeature requests / Bugs / Questions\n-----------------------------------\n\nIf you have feature requests or you found a bug, please `file them on GitHub <https://github.com/quantumlib/Cirq/issues/new/choose>`__.\n\nFor questions about how to use Cirq post to\n`Quantum Computing Stack Exchange <https://quantumcomputing.stackexchange.com/>`__ with the\n`cirq <https://quantumcomputing.stackexchange.com/questions/tagged/cirq>`__ tag.\n\nHow to cite Cirq\n----------------\n\nCirq is uploaded to Zenodo automatically. Click on the badge below to see all the citation formats for all versions.\n\n.. image:: https://zenodo.org/badge/DOI/10.5281/zenodo.4062499.svg\n  :target: https://doi.org/10.5281/zenodo.4062499\n  :alt: DOI\n\nCirq Contributors Community\n---------------------------\n\nWe welcome contributions! Before opening your first PR, a good place to start is to read our\n`guidelines <https://github.com/quantumlib/cirq/blob/main/CONTRIBUTING.md>`__.\n\nWe are dedicated to cultivating an open and inclusive community to build software for near term quantum computers.\nPlease read our `code of conduct <https://github.com/quantumlib/cirq/blob/main/CODE_OF_CONDUCT.md>`__ for the rules of engagement within our community.\n\n**Cirq Cynque** is our weekly meeting for contributors to discuss upcoming features, designs, issues, community and status of different efforts.\nTo get an invitation please join the `cirq-dev email list <https://groups.google.com/forum/#!forum/cirq-dev>`__ which also serves as yet another platform to discuss contributions and design ideas.\n\nSee Also\n--------\n\nFor those interested in using quantum computers to solve problems in\nchemistry and materials science, we encourage exploring\n`OpenFermion <https://github.com/quantumlib/openfermion>`__ and\nits sister library for compiling quantum simulation algorithms in Cirq,\n`OpenFermion-Cirq <https://github.com/quantumlib/openfermion-cirq>`__.\n\nFor machine learning enthusiasts, `Tensorflow Quantum <https://github.com/tensorflow/quantum>`__ is a great project to check out!\n\nFor a powerful quantum circuit simulator that integrates well with Cirq, we recommend looking at `qsim <https://github.com/quantumlib/qsim>`__.\n\nFinally, `ReCirq <https://github.com/quantumlib/ReCirq>`__ contains real world experiments using Cirq.\n\nContact\n-------\n\nFor any questions or concerns not addressed here, please feel free to reach out to\nquantumai-oss-maintainers@googlegroups.com.\n\nCirq is not an official Google product. Copyright 2019 The Cirq Developers\n"
        },
        {
          "name": "SUPPORT.md",
          "type": "blob",
          "size": 1.1748046875,
          "content": "# Support\n\nThank you for your interest in this project! If you are experiencing problems\nor have questions, the following are some suggestions for how to get help.\n\n> [!NOTE]\n> Before participating in our community, please read our [code of\n> conduct](CODE_OF_CONDUCT.md). By interacting with this repository,\n> organization, or community, you agree to abide by its terms.\n\n## Report an issue or request a feature\n\nTo report an issue or request a feature in Cirq, please first search the [issue\ntracker on GitHub](https://github.com/quantumlib/Cirq/issues) to check if there\nis already an open issue identical or similar to your bug report/feature\nrequest. If there is none, go ahead and file a new issue in the issue tracker.\n\n## Attend the developer meetings\n\n_Cirq Cynq_ is our biweekly virtual meeting of contributors to discuss\neverything from issues to ongoing efforts, as well as to ask questions. Join\nthe [`cirq-dev` Google Group](https://groups.google.com/forum/#!forum/cirq-dev)\nto get an automatic meeting invitation.\n\n## Contact the maintainers\n\nFor any questions or concerns not addressed here, please email\n[quantum-oss-maintainers@google.com](mailto:quantum-oss-maintainers@google.com).\n"
        },
        {
          "name": "apt-system-requirements.txt",
          "type": "blob",
          "size": 0.037109375,
          "content": "texlive-latex-base\nlatexmk\npython3-tk\n"
        },
        {
          "name": "asv.conf.json",
          "type": "blob",
          "size": 0.521484375,
          "content": "{\n    \"version\": 1,\n    \"project\": \"Cirq\",\n    \"project_url\": \"https://quantumai.google/cirq\",\n    \"repo\": \".\",\n    \"repo_subdir\": \"cirq-core/\",\n    \"branches\": [\"main\"],\n    \"dvcs\": \"git\",\n    \"environment_type\": \"virtualenv\",\n    \"show_commit_url\": \"https://github.com/quantumlib/Cirq/commit/\",\n    \"pythons\": [\"3.10\"],\n    \"matrix\": {\"env_nobuild\": {\"PYTHONOPTIMIZE\": [\"-O\", \"\"]}},\n    \"benchmark_dir\": \"benchmarks\",\n    \"env_dir\": \".asv/env\",\n    \"results_dir\": \".asv/results\",\n    \"html_dir\": \".asv/html\",\n    \"hash_length\": 8\n}\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "check",
          "type": "tree",
          "content": null
        },
        {
          "name": "cirq-aqt",
          "type": "tree",
          "content": null
        },
        {
          "name": "cirq-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "cirq-google",
          "type": "tree",
          "content": null
        },
        {
          "name": "cirq-ionq",
          "type": "tree",
          "content": null
        },
        {
          "name": "cirq-pasqal",
          "type": "tree",
          "content": null
        },
        {
          "name": "cirq-rigetti",
          "type": "tree",
          "content": null
        },
        {
          "name": "cirq-web",
          "type": "tree",
          "content": null
        },
        {
          "name": "conftest.py",
          "type": "blob",
          "size": 2.44921875,
          "content": "# Copyright 2021 The Cirq Developers\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport pytest\nimport numpy as np\n\n\ndef pytest_addoption(parser):\n    parser.addoption(\n        \"--rigetti-integration\",\n        action=\"store_true\",\n        default=False,\n        help=\"run Rigetti integration tests\",\n    )\n    parser.addoption(\n        \"--enable-slow-tests\", action=\"store_true\", default=False, help=\"run slow tests\"\n    )\n    parser.addoption(\n        \"--warn-numpy-data-promotion\",\n        action=\"store_true\",\n        default=False,\n        help=\"enable NumPy 2 data type promotion warnings\",\n    )\n\n\ndef pytest_configure(config):\n    # If requested, globally enable verbose NumPy 2 warnings about data type\n    # promotion. See https://numpy.org/doc/2.0/numpy_2_0_migration_guide.html.\n    if config.option.warn_numpy_data_promotion:\n        np._set_promotion_state(\"weak_and_warn\")\n\n\ndef pytest_collection_modifyitems(config, items):\n    # Let pytest handle markexpr if present.  Make an exception for\n    # `pytest --co -m skip` so we can check test skipping rules below.\n    markexpr_words = frozenset(config.option.markexpr.split())\n    if not markexpr_words.issubset([\"not\", \"skip\"]):\n        return  # pragma: no cover\n\n    # our marks for tests to be skipped by default\n    skip_marks = {\n        \"rigetti_integration\": pytest.mark.skip(reason=\"need --rigetti-integration option to run\"),\n        \"slow\": pytest.mark.skip(reason=\"need --enable-slow-tests option to run\"),\n        \"weekly\": pytest.mark.skip(reason='only run by weekly automation'),\n    }\n\n    # drop skip_marks for tests enabled by command line options\n    if config.option.rigetti_integration:\n        del skip_marks[\"rigetti_integration\"]  # pragma: no cover\n    if config.option.enable_slow_tests:\n        del skip_marks[\"slow\"]  # pragma: no cover\n    skip_keywords = frozenset(skip_marks.keys())\n\n    for item in items:\n        for k in skip_keywords.intersection(item.keywords):\n            item.add_marker(skip_marks[k])\n"
        },
        {
          "name": "dev_tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.6474609375,
          "content": "[tool.black]\nline-length = 100\ntarget_version = ['py310', 'py311', 'py312']\nskip-string-normalization = true\nskip-magic-trailing-comma = true\n\n[tool.pytest.ini_options]\nfilterwarnings = [\n    \"ignore:Matplotlib is currently using agg:UserWarning\",\n    \"ignore:FigureCanvasAgg is non-interactive.*cannot be shown:UserWarning\",\n]\nmarkers = [\n    \"rigetti_integration: tests that connect to Quil compiler or QVM.\",\n    \"slow: slow tests that should be skipped by default.\",\n    \"weekly: tests to be run only by weekly CI automation.\",\n]\n# Silence deprecation warnings about option \"asyncio_default_fixture_loop_scope\"\nasyncio_default_fixture_loop_scope = \"function\"\n"
        },
        {
          "name": "release.md",
          "type": "blob",
          "size": 10.4189453125,
          "content": "# Versioning and Releases\n\nBelow is info on how we version releases, and how the releases\nthemselves are created. Note that development is done on the `main`\nbranch, so if you want to use a more stable version you should use one\nof the [releases](https://github.com/quantumlib/Cirq/releases) or\ninstall from pypi using `pip install cirq`.  The release from the\nlatest commit to main can be installed with `pip install cirq~=1.0.dev`.\n\n## Versioning\n\nWe follow [semantic versioning](https://semver.org/) for labeling our\nreleases.  Versions are labeled MAJOR.MINOR.PATCH where each of these\nis a numerical value. The following guarantees are provided:\n\n1. All packages released at the same time from the Cirq repository will share\n   the same [Semantic Versioning 2.0.0](https://semver.org/) number.\n   1. Packages may have different version numbers in the future, at which point\n      this policy will be updated.\n2. Libraries in the `cirq-core` directory (with the exception of\n   `cirq-core/cirq/contrib`) adhere to the guarantees outlined in the Semantic\n   Versioning specification. In summary: “Bug fixes not affecting the API\n   increment the patch version, backwards compatible API additions/changes\n   increment the minor version, and backwards incompatible API changes increment\n   the major version.”\n3. The contrib directory (at `cirq-core/cirq/contrib`) follows Semantic\n   Versioning except the MINOR version increment policy: releases with MINOR\n   version increments may contain backward-incompatible functionality changes to\n   its public API.\n   1. May be changed to strictly follow Semantic Versioning in the future, at\n      which point this policy will be updated.\n4. Cirq vendor directories (`cirq-aqt`, `cirq-google`, `cirq-ionq`, etc.) follow\n   Semantic Versioning except the MINOR version increment policy: each vendor\n   directory has a separate policy on whether MINOR version increments provide\n   backward-compatibility guarantees, as described in `version_policy.md` in the\n   respective directory.\n   1. If `version_policy.md` does not exist in a particular vendor directory,\n      MINOR version increments may contain backward-incompatible functionality\n      changes to its public API.\n   2. For each vendor directory, version policies may be modified to strictly\n      follow Semantic Versioning in the future.\n5. Versions based on unreleased branches of main will be suffixed with \".dev\".\n\nThe rules for version changes are:\n* Increment the PATCH version if all changes are bug fixes only.\n* Increment the MINOR version if changes contain functionalities which are\n  backward-compatible, or if a vendor directory or `contrib` contains\n  backward-incompatible changes and the policy for the directory allows\n  backward-incompatible changes for a minor version increment.\n\nA major version increment process has not been established. Until then,\nbackward-incompatible changes are not allowed for `cirq-core` and vendor\ndirectories that prohibit them for a minor version increment.\n\n## Releases\n\nWe use github's release system for creating releases.  Release are listed\n[on the Cirq release page](https://github.com/quantumlib/Cirq/releases).\n\nOur development process uses the `main` branch for development.\nMain will always use the next unreleased minor version with the suffix\nof \".dev\".  When a release is performed, the \".dev\" will be removed and tagged\nin a release branch with a version tag (vX.X.X).  Then, main will be updated\nto the next minor version.  This can always be found in the\n[version file](./cirq-core/cirq/_version.py).\n\n### Release Schedule\nReleases are made on an as-needed basis determined by Cirq maintainers. All Cirq\npackages (including vendor packages such as `cirq-aqt`) are released at the same\ntime.\n\n## Before you release: flush the deprecation backlog\n\nEnsure that all the deprecations are removed that were meant to be deprecated for the given release. \nE.g. if you want to release `v0.11`, you can check with `git grep 'v0.11'` for all the lines containing this deadline.\nMake sure none of those are released.  \n\n## Release Procedure\n\nThis procedure can be followed by authorized cirq developers to perform a\nrelease.\n\n### Preparation\n\nSystem requirements: Linux, python3.10\n\nFor MINOR / MAJOR release: Make sure you're on an up-to-date main branch and \nin cirq's root directory.\n\n```bash\ngit checkout main\ngit pull origin main  # or upstream main\ngit status  # should be no pending changes\n```\n\nFor PATCH update: Make sure you checked out the version you want to patch. \nTypically this will be something like `${MAJOR}.${MINOR}.${LAST_PATCH}` \n\n```bash\ngit fetch origin # or upstream - to fetch all tags\ngit checkout <desired tag to patch>   \ngit status  # should be no pending changes\n```\n\nEnsure you have pypi and test pypi accounts with access to cirq distribution.\nThis can be done by visiting test.pypi.org, logging in, and accessing the cirq\ndistribution.\n\nFor the following script to work, you will need the following env variables\ndefined: `TEST_TWINE_USERNAME`, `TEST_TWINE_PASSWORD`, `PROD_TWINE_USERNAME`,\n`PROD_TWINE_PASSWORD`.\n\nIt is highly recommended to use different passwords for test and prod to avoid\naccidentally pushing to prod.\n\nAlso define these variables for the versions you are releasing:\n\n```bash\nVER=VERSION_YOU_WANT_TO_RELEASE  # e.g. \"0.7.0\"\nNEXT_VER=NEXT_VERSION  # e.g. \"0.8.0\" (skip for PATCH releases)\n```\n\n### Create release branch\n\nCreate a release branch called \"v${VERSION}-dev\":\n\n```bash\ngit checkout -b \"v${VER}-dev\"\n```\n\nIf you are doing a PATCH update, also cherrypick the commits for the fixes \nyou want to include in your update and resolve all potential merge conflicts \ncarefully: \n\n```bash\ngit cherry-pick <commit> \n```\n\nBump the version on the release branch: \n\n```bash\npython dev_tools/modules.py replace_version --old ${VER}.dev --new ${VER} \ngit add .\ngit commit -m \"Removing ${VER}.dev -> ${VER}\"\ngit push origin \"v${VER}-dev\"\n```\n\n### Bump the main version \n\nWARNING: Only bump the main version for minor and major releases, for PATCH\nupdates, leave it as it is.  \n\n```bash\ngit checkout main -b \"version_bump_${NEXT_VER}\"\npython dev_tools/modules.py replace_version --old ${VER}.dev --new ${NEXT_VER}.dev\ngit add .\ngit commit -m \"Bump cirq version to ${NEXT_VER}\"\ngit push origin \"version_bump_${NEXT_VER}\"\n```\n\nThe main branch should never see a non-dev version specifier.\n\n### Create distribution wheel\n\nFrom release branch, create a binary distribution wheel. This is the package\nthat will go to pypi.\n\n```bash\ngit checkout \"v${VER}-dev\"\n./dev_tools/packaging/produce-package.sh dist\nls dist  # should only contain one file, for each modules \n```\n\n### Push to test pypi\n\nThe package server pypi has a test server where packages can be uploaded to\ncheck that they work correctly before pushing the real version.  This section\nillustrates how to upload the package to test pypi and verify that it works.\n\nFirst, upload the package in the dist/ directory.  (Ensure that this is the only\npackage in this directory, or modify the commands to upload only this\nfile).\n\n```bash\ntwine upload --repository-url=https://test.pypi.org/legacy/ -u=\"$TEST_TWINE_USERNAME\" -p=\"$TEST_TWINE_PASSWORD\" \"dist/*\"\n```\n\nNext, run automated verification.\n\nNote: sometimes the first verification from test pypi will fail.\n\n```bash\n# NOTE: FIRST RUN WILL LIKELY FAIL - pypi might not have yet indexed the version\n./dev_tools/packaging/verify-published-package.sh \"${VER}\" --test\n```\nOnce this runs, you can create a virtual environment to perform\nmanual verification as a sanity check and to check version number and\nany high-risk features that have changed this release.\n\n```bash\nmkvirtualenv \"verify_test_${VER}\" --python=/usr/bin/python3\npip install -r dev_tools/requirements/dev.env.txt\npip install --index-url=https://test.pypi.org/simple/ cirq==\"${VER}\"\npython -c \"import cirq; print(cirq.__version__)\"\npython  # just do some stuff checking that latest features are present\n```\n\n### Draft release notes and email\n\nPut together a release notes document that can be used as part of a\nrelease and for an announcement email.\n\nYou can model the release notes on the previous release from the\n[Release page](https://github.com/quantumlib/Cirq/releases).\n\n1. Fill out the new version in \"Tag Version\" and choose your release \nbranch to create the tag from.   \n2. Attach the generated whl file to the release \n\nRetrieve all commits since the last release with:\n```git log \"--pretty=%h %s\"```.\n\nYou can get the changes to the top-level objects and protocols by\nchecking the history of the init files. `git diff <previous version>..HEAD cirq-core/cirq/__init__.py`\n\nYou can get the contributing authors for the release by running:\n`git log <previous version>..HEAD --pretty=\"%an\" | sort | uniq | sed ':a;N;$!ba;s/\\n/, /g'`\n\n### cirq-google Changelog\nAdd cirq-google release notes to `cirq-google/CHANGELOG.md` following the [changelog format](https://keepachangelog.com/en/1.0.0/)\n\n### Release to prod pypi\n\nUpload to prod pypi using the following command:\n\n```bash\ntwine upload --username=\"$PROD_TWINE_USERNAME\" --password=\"$PROD_TWINE_PASSWORD\" \"dist/*\"\n```\n\nPerform automated verification tests:\n\n```bash\n# NOTE: FIRST RUN WILL LIKELY FAIL - pypi might not have yet indexed the version\n./dev_tools/packaging/verify-published-package.sh \"${VER}\" --prod\n```\n\nNext, create a virtual environment to perform manual verification of the\nrelease.\n\n```bash\nmkvirtualenv \"verify_${VER}\" --python=/usr/bin/python3\npip install cirq\npython -c \"import cirq; print(cirq.__version__)\"\n```\n\n###  Create the release\n\nUsing the information above, create the release on the\n[Release page](https://github.com/quantumlib/Cirq/releases).\nBe sure to include the whl file as an attachment.\n\n### Release PR for notebooks\n\nIf there are unreleased notebooks, that are under testing (`NOTEBOOKS_DEPENDING_ON_UNRELEASED_FEATURES` is not empty in [dev_tools/notebooks/isolated_notebook_test.py](dev_tools/notebooks/isolated_notebook_test.py)), follow the steps in our [notebooks guide](docs/dev/notebooks.md).\n\n### Create zenodo release\n\nGot to the [Zenodo release page](https://zenodo.org/record/6599601#.YpZCspPMLzc).\nLogin using credentials within Google's internal password utility (or get\nsomeone from Google to do this).  Click \"New Version\".\n\n*   Upload the new zip file (found in releases page under \"assets\").\n*   Remove old zip file.\n*   Update version.\n*   Double check all other fields.\n*   Click publish.\n\n\n### Email cirq-announce\n\nLastly, email cirq-announce@googlegroups.com with the release notes\nand an announcement of the new version.\n\nCongratulate yourself for a well done release!\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.642578125,
          "content": "# Copyright 2018 The Cirq Developers\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\nfrom setuptools import setup\n\n# This reads the __version__ variable from cirq/_version.py\n__version__ = ''\n\nfrom dev_tools import modules\nfrom dev_tools.requirements import explode\n\nexec(open('cirq-core/cirq/_version.py').read())\n\nname = 'cirq'\n\ndescription = (\n    'A framework for creating, editing, and invoking '\n    'Noisy Intermediate Scale Quantum (NISQ) circuits.'\n)\n\n# README file as long_description.\nlong_description = io.open('README.rst', encoding='utf-8').read()\n\n# If CIRQ_PRE_RELEASE_VERSION is set then we update the version to this value.\n# It is assumed that it ends with one of `.devN`, `.aN`, `.bN`, `.rcN` and hence\n# it will be a pre-release version on PyPi. See\n# https://packaging.python.org/guides/distributing-packages-using-setuptools/#pre-release-versioning\n# for more details.\nif 'CIRQ_PRE_RELEASE_VERSION' in os.environ:\n    __version__ = os.environ['CIRQ_PRE_RELEASE_VERSION']\n    long_description = (\n        \"**This is a development version of Cirq and may be \"\n        \"unstable.**\\n\\n**For the latest stable release of Cirq \"\n        \"see**\\n`here <https://pypi.org/project/cirq>`__.\\n\\n\" + long_description\n    )\n\n# Sanity check\nassert __version__, 'Version string cannot be empty'\n\n# This is a pure metapackage that installs all our packages\nrequirements = [f'{p.name}=={p.version}' for p in modules.list_modules()]\n\ndev_requirements = explode('dev_tools/requirements/deps/dev-tools.txt')\n\n# filter out direct urls (https://github.com/pypa/pip/issues/6301)\ndev_requirements = [r.strip() for r in dev_requirements if \"https://\" not in r]\n\nsetup(\n    name=name,\n    version=__version__,\n    url='http://github.com/quantumlib/cirq',\n    author='The Cirq Developers',\n    author_email='cirq-dev@googlegroups.com',\n    maintainer=\"The Quantum AI open-source software maintainers\",\n    maintainer_email=\"quantum-oss-maintainers@google.com\",\n    python_requires='>=3.10.0',\n    install_requires=requirements,\n    extras_require={'dev_env': dev_requirements},\n    license='Apache 2',\n    description=description,\n    long_description=long_description,\n    packages=[],\n)\n"
        }
      ]
    }
  ]
}