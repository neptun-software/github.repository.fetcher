{
  "metadata": {
    "timestamp": 1736560418753,
    "page": 981,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "OpenGVLab/InternGPT",
      "stars": 3213,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.279296875,
          "content": "# compilation and distribution\n__pycache__\n_ext\n*.pyc\n*.pyd\n*.so\n*.dll\n*.egg-info/\nbuild/\ndist/\nwheels/\n\n# Editor temporaries\n*.swn\n*.swo\n*.swp\n*~\n\n# editor settings\n.idea\n.vscode\n_darcs\n\n# custom files\n./image/\ntmp_files/\n.DS_Store\n\n# model files\nmodel_zoo\nshells/\ncertificate/\nimage/\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 6.58203125,
          "content": "# 🛠️Installation：\n## Basic requirements\n* Linux\n* Python 3.8+\n* PyTorch 1.12+\n* CUDA 11.6+\n* GCC & G++ 5.4+\n* GPU Memory >= 17G for loading basic tools(HuskyVQA, SegmentAnything, ImageOCRRecognition)\n  \n## Install anaconda\nReference Installation Tutorial : [English Tutorial](https://linuxize.com/post/how-to-install-anaconda-on-ubuntu-20-04/) or [Chinese Tutorial](https://zhuanlan.zhihu.com/p/440548295)\n\n## Clone project\nExecute the following command in the root directory:\n```\ngit clone https://github.com/OpenGVLab/InternGPT.git\n```\nCommon errors and their resolutions : \n1. git installation status: done\n   Execute the following command in the terminal\n     `git --version`\n   If it is not installed, execute the following command.\n   `sudo apt install git`\n2. If the download speed is too slow:\n   modify the preceding command as follows:\n   `git clone git://github.com/OpenGVLab/InternGPT.git` \n\n## 🗃Model zoo\nour `model_zoo` has been released in [huggingface](https://huggingface.co/spaces/OpenGVLab/InternGPT/tree/main/model_zoo)! \nYou can download it and directly place it into the root directory of this repo before running the app.\n\nHuskyVQA, a strong VQA model, is also available in `model_zoo`. More details can refer to our [report](https://arxiv.org/pdf/2305.05662.pdf).\n\n**Note for husky checkpoint**\n\nDue to the license issuse, we could directly provide the checkpoint of Husky. The `model_zoo` contains the delta checkpoint between Husky and [LLAMA](https://github.com/facebookresearch/llama). \n\nTo build the actual checkpoint of Husky, you need the original checkpoint of LLAMA, which should be put in `model_zoo/llama/7B`. We support automatically download the llama checkpoint, but you need to request a form for the download url from Meta (see [here](https://github.com/facebookresearch/llama/tree/llama_v1#llama)). Once you have the download url, paste it into `PRESIGNED_URL=\"\"` at [third-party/llama_download.sh](third-party/llama_download.sh).\n\nThen, rerun the app would automatically download the original checkpoint, convert it to huggingface format, and build the Husky checkpoint. \n\nPlease make sure these folder `model_zoo/llama`, and  `model_zoo/llama_7B_hf` contain the correct checkpoint, otherwise you should delete the folder and let the app download it again.\nOtherwise, you might encounter issuses similar as [issue #5](https://github.com/OpenGVLab/InternGPT/issues/5)\n> model_zoo\\llama_7B_hf does not appear to have a file named config.json. \n\n> FileNotFoundError: [Errno 2] No such file or directory: 'model_zoo/llama/7B/params.json'\n> \n**Current project directory structure**\n\n![tree](https://github.com/ErfeiCui/InternGPT/assets/135142412/23b0f694-6224-49d2-af8e-98b87fcb946c)\n\n\n## :tent:Install dependencies\n* **Create a virtual environment**\n  `conda activate -n igpt python=3.8`\n  ![1 2](https://github.com/ErfeiCui/InternGPT/assets/135142412/b6d10672-7348-4fa2-a020-10198fc1acc6)\n  ![1 3](https://github.com/ErfeiCui/InternGPT/assets/135142412/bd9e5ff5-6c3a-4cd7-8347-bb8c5af5672a)\n\n* **Activate the virtual environment**\n  `conda activate igpt`\n  *Verify if you have successfully entered the virtual environment*\n  ![Inked1 4](https://github.com/ErfeiCui/InternGPT/assets/135142412/5d7971b6-a881-4050-bdc7-0668d99eecd5)\n\n\n* **Install essential  dependencies**\n  `conda install pytorch==1.13.0 torchvision==0.14.0 torchaudio==0.13.0 pytorch-cuda=11.6 -c pytorch -c nvidia`\n  **notices**:Download all dependencies simultaneously and ensure to include \"-c pytorch -c nvidia\" to avoid version conflicts.\n  ![1 5](https://github.com/ErfeiCui/InternGPT/assets/135142412/7625651f-f8a4-4d4b-9109-61e821af21e5)\n  ![1 6](https://github.com/ErfeiCui/InternGPT/assets/135142412/3a1f9935-3cdd-403e-bed4-20bcdf486b0a)\n  \n* **Install additional dependencies**\n  `pip install -r requirements.txt`\n  ![Inked1 7](https://github.com/ErfeiCui/InternGPT/assets/135142412/20532657-f914-4834-b63e-4192bfe3aa2f)\n  ![1 8](https://github.com/ErfeiCui/InternGPT/assets/135142412/0f7caaa7-81ad-4f12-b911-cc46ddaaea05)\n\n* **Install detectron2**\n  * Install gcc & g++\n    `apt-get install gcc`\n    `apt-get install g++`\n    `apt-get install make`\n    **notices**:For most systems, the latest version of GCC and G++ will be downloaded automatically. To check the version of GCC, execute the command `gcc --version`. If the version is lower than 5.4, please refer to the following instructions to download the specific version: [down gcc](https://blog.csdn.net/liboyang71/article/details/77152577)\n   * Install detectron2\n     `git clone https://github.com/facebookresearch/detectron2.git`\n     ![Inked1 9](https://github.com/ErfeiCui/InternGPT/assets/135142412/cc28482d-1df0-40e4-9e3c-ad93eee32b92)\n\n     `python -m pip install -e detectron2`\n     ![Inked2 0](https://github.com/ErfeiCui/InternGPT/assets/135142412/b2ee729d-9a0c-4114-bf7c-0432c23a84ff)\n     ![2 1](https://github.com/ErfeiCui/InternGPT/assets/135142412/b49fa28c-b766-4b33-a840-d602d47a090d)\n\n   * notices\n     When encountering the messages \"Compile without GPU support\" or \"Detectron2 CUDA compiler: Not available,\" please consider the following:\n     ``` \n     python -c \"import torch\n     from torch.utils.cpp_extension import CUDA_HOME\n     print(torch.cuda.is_available(), CUDA_HOME)\"\n     ```\n\n\n## Start the service\n`python -u app.py \\\n--load \"ImageOCRRecognition_cuda:0,Text2Image_cuda:0,SegmentAnything_cuda:0,ActionRecognition_cuda:0,VideoCaption_cuda:0,DenseCaption_cuda:0,ReplaceMaskedAnything_cuda:0,LDMInpainting_cuda:0,SegText2Image_cuda:0,ScribbleText2Image_cuda:0,Image2Scribble_cuda:0,Image2Canny_cuda:0,CannyText2Image_cuda:0,StyleGAN_cuda:0,Anything2Image_cuda:0,HuskyVQA_cuda:0\" -e -p 3456 --https\n`\n\nNow, you can access iGPT demo by visiting `https://{ip}:3456` through your browser:\n![result](https://github.com/ErfeiCui/InternGPT/assets/135142412/897212f2-47cc-4d0c-ace3-a24f42ec5bd2)\n\n\n# Deploying with docker\n\n* **Installation**\nPlease refer to the official documentation to install: [Docker](https://docs.docker.com/engine/install/), [Docker compose](https://docs.docker.com/compose/install/) , and [ NVIDIA Container Toolkit](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#install-guide).\n\n* **Build and run an image**\n  Please add model_zoo and certificate folders to the root directory of this repo, and change `/path/to/model_zoo` and `/path/to/certificate` in `docker/docker-compose.yml` to model_zoo and certificate directories on your machine respectively.\n\n  For more features of our iGPT, You can modify the `load` variable in the `command` section in the docker compose file.\n\n  ```shell\n  cd docker\n  # Build and run an image (require GPUs):\n  docker compose up \n\n  ```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.4228515625,
          "content": "[[中文文档]](README_CN.md)\n\n**The project is still under construction, we will continue to update it and welcome contributions/pull requests from the community.**\n\n<p align=\"center\"><img src=\"./assets/gvlab_logo.png\" width=\"600\"></p>\n\n<a src=\"https://img.shields.io/discord/1099920215724277770?label=Discord&logo=discord\" href=\"https://discord.gg/khWBFnCgAN\">\n    <img src=\"https://img.shields.io/discord/1099920215724277770?label=Discord&logo=discord\"> </a> | <a src=\"https://img.shields.io/badge/GPU%20Demo-Open-green?logo=alibabacloud\" href=\"https://ichat.opengvlab.com\">\n    <img src=\"https://img.shields.io/badge/Demo-Open-green?logo=alibabacloud\"> </a> | <a src=\"https://img.shields.io/twitter/follow/opengvlab?style=social\" href=\"https://twitter.com/opengvlab\">\n    <img src=\"https://img.shields.io/twitter/follow/opengvlab?style=social\">  </a> \n    \n\n\n# 🤖💬 InternGPT [[Paper](https://arxiv.org/pdf/2305.05662.pdf)] \n\n\n<!-- ## Description -->\n**InternGPT**(short for **iGPT**) / **InternChat**(short for **iChat**) is pointing-language-driven visual interactive system, allowing you to interact with ChatGPT by clicking, dragging and drawing using a pointing device. The name InternGPT stands for **inter**action, **n**onverbal, and Chat**GPT**. Different from existing interactive systems that rely on pure language, by incorporating pointing instructions, iGPT significantly improves the efficiency of communication between users and chatbots, as well as the accuracy of chatbots in vision-centric tasks, especially in complicated visual scenarios. Additionally, in iGPT, an auxiliary control mechanism is used to improve the control capability of LLM, and a large vision-language model termed **Husky** is fine-tuned for high-quality multi-modal dialogue (impressing ChatGPT-3.5-turbo with **93.89% GPT-4 Quality**).\n\n\n## 🤖💬 Online Demo\n**InternGPT** is online (see [https://igpt.opengvlab.com](https://igpt.opengvlab.com/)). Let's try it!\n\n[**NOTE**] It is possible that you are waiting in a lengthy queue. You can clone our repo and run it with your private GPU.\n\n\n**<a id=\"draggan_demo\">Video Demo with DragGAN: </a>**\n\nhttps://github.com/OpenGVLab/InternGPT/assets/13723743/529abde4-5dce-48de-bb38-0a0c199bb980\n\n**<a id=\"imagebind_demo\">Video Demo with ImageBind: </a>**\n\nhttps://github.com/OpenGVLab/InternGPT/assets/13723743/bacf3e58-6c24-4c0f-8cf7-e0c4b8b3d2af\n\n**<a id=\"igpt_demo\">iGPT Video Demo: </a>**\n\nhttps://github.com/OpenGVLab/InternGPT/assets/13723743/8fd9112f-57d9-4871-a369-4e1929aa2593\n\n\n\n\n## 🥳 🚀 What's New \n- (2023.06.19) We optimize the GPU memory usage when executing the tools. Please refer to [Get Started](#get_started).\n\n- (2023.06.19) We update the [INSTALL.md](https://github.com/OpenGVLab/InternGPT/blob/main/INSTALL.md) which provides more detailed instructions for setting up environment.\n\n- (2023.05.31) It is with great regret that due to some emergency reasons, we have to suspend the online demo. If you want to experience all the features, please try them after deploying locally.\n\n- (2023.05.24) 🎉🎉🎉 We have supported the [DragGAN](https://github.com/Zeqiang-Lai/DragGAN)! Please see the [video demo](#draggan_demo) for the usage. Let's try this awesome feauture: [Demo](https://igpt.opengvlab.com/). （我们现在支持了功能完全的[DragGAN](https://github.com/Zeqiang-Lai/DragGAN)! 可以拖动、可以自定义图片，具体用法见[video demo](#draggan_demo)，复现的DragGAN代码在[这里](https://github.com/Zeqiang-Lai/DragGAN)，在线demo在[这里](https://igpt.opengvlab.com/)）\n\n- (2023.05.18) We have supported [ImageBind](https://github.com/facebookresearch/ImageBind). Please see the [video demo](#imagebind_demo) for the usage. \n\n- (2023.05.15) The [model_zoo](https://huggingface.co/spaces/OpenGVLab/InternGPT/tree/main/model_zoo) including HuskyVQA has been released! Try it on your local machine!\n\n- (2023.05.15) Our code is also publicly available on [Hugging Face](https://huggingface.co/spaces/OpenGVLab/InternGPT)! You can duplicate the repository and run it on your own GPUs.\n\n### 🧭 User Manual\n\nUpdate:\n\n(2023.05.24) We now support [DragGAN](https://arxiv.org/abs/2305.10973). You can try it as follows:\n- Click the button `New Image`;\n- Click the image where blue denotes the start point and red denotes the end point;\n- Notice that the number of blue points is the same as the number of red points. Then you can click the button `Drag It`;\n- After processing, you will receive an edited image and a video that visualizes the editing process.\n<br>\n\n(2023.05.18) We now support [ImageBind](https://github.com/facebookresearch/ImageBind). If you want to generate a new image conditioned on audio, you can upload an audio file in advance:\n- To **generate a new image from a single audio file**, you can send the message like: `\"generate a real image from this audio\"`;\n- To **generate a new image from audio and text**, you can send the message like: `\"generate a real image from this audio and {your prompt}\"`;\n- To **generate a new image from audio and image**, you need to upload an image and then send the message like: `\"generate a new image from above image and audio\"`.\n\n<br>\n\n**Main features:**\n\nAfter uploading the image, you can have a **multi-modal dialogue** by sending messages like: `\"what is it in the image?\"` or `\"what is the background color of image?\"`.     \nYou also can interactively operate, edit or generate the image as follows:\n- You can click the image and press the button **`Pick`** to **visualize the segmented region** or press the button **`OCR`** to **recognize the words** at chosen position;\n- To **remove the masked reigon** in the image, you can send the message like: `\"remove the masked region\"`;\n- To **replace the masked reigon** in the image, you can send the message like: `\"replace the masked region with {your prompt}\"`;\n- To **generate a new image**, you can send the message like: `\"generate a new image based on its segmentation describing {your prompt}\"`\n- To **create a new image by your scribble**, you should press button **`Whiteboard`** and draw in the board. After drawing, you need to press the button **`Save`** and send the message like: `\"generate a new image based on this scribble describing {your prompt}\"`.\n\n\n## 🗓️ Schedule\n- [ ] Support [VisionLLM](https://github.com/OpenGVLab/VisionLLM)\n- [ ] Support Chinese\n- [ ] Support MOSS\n- [ ] More powerful foundation models based on [InternImage](https://github.com/OpenGVLab/InternImage) and [InternVideo](https://github.com/OpenGVLab/InternVideo)\n- [ ] More accurate interactive experience\n- [ ] OpenMMLab toolkit\n- [ ] Web page & code generation \n- [ ] Support search engine \n- [ ] Low cost deployment\n- [x] Support [DragGAN](https://arxiv.org/abs/2305.10973)\n- [x] Support [ImageBind](https://github.com/facebookresearch/ImageBind)\n- [x] Response verification for agent\n- [x] Prompt optimization\n- [x] User manual and video demo\n- [x] Support voice assistant\n- [x] Support click interaction\n- [x] Interactive image editing\n- [x] Interactive image generation\n- [x] Interactive visual question answering\n- [x] Segment anything\n- [x] Image inpainting\n- [x] Image caption\n- [x] Image matting\n- [x] Optical character recognition\n- [x] Action recognition\n- [x] Video caption\n- [x] Video dense caption\n- [x] Video highlight interpretation\n\n\n## 🏠 System Overview\n<p align=\"center\"><img width=\"800\" src=\"./assets/arch1.png\" alt=\"arch\"></p>\n\n## 🎁 Major Features \n<details>\n<summary>Remove the masked object</summary>\n<p align=\"center\"><img src=\"./assets/demo2.gif\" width=\"500\"></p>\n</details>\n\n<details>\n<summary>Interactive image editing</summary>\n<p align=\"center\"><img src=\"./assets/demo3.gif\" width=\"500\"></p>\n</details>\n\n<details>\n<summary>Image generation</summary>\n<p align=\"center\"><img src=\"./assets/demo4.gif\" width=\"500\"></p>\n</details>\n\n<details>\n<summary>Interactive visual question answer</summary>\n<p align=\"center\"><img src=\"./assets/demo5.gif\" width=\"500\"></p>\n</details>\n\n<details>\n<summary>Interactive image generation</summary>\n<p align=\"center\"><img src=\"https://github.com/OpenGVLab/InternGPT/assets/8529570/2b0da08e-af86-453d-99e5-1327f93aa917\" width=\"500\"></p>\n</details>\n\n<details>\n<summary>Video highlight interpretation</summary>\n<p align=\"center\"><img src=\"./assets/demo6.jpg\" width=\"500\"></p>\n</details>\n\n\n## 🛠️ Installation\n\nSee [INSTALL.md](INSTALL.md)\n\n## 👨‍🏫 <a id=\"get_started\">Get Started </a>\n\nRunning the following shell can start a gradio service for our basic features:\n```shell\npython -u app.py --load \"HuskyVQA_cuda:0,SegmentAnything_cuda:0,ImageOCRRecognition_cuda:0\" --port 3456 -e\n```\n\nif you want to enable the voice assistant, please use `openssl` to generate the certificate:\n```shell\nmkdir certificate\nopenssl req -x509 -newkey rsa:4096 -keyout certificate/key.pem -out certificate/cert.pem -sha256 -days 365 -nodes\n```\n\nand then run:\n```shell\npython -u app.py --load \"HuskyVQA_cuda:0,SegmentAnything_cuda:0,ImageOCRRecognition_cuda:0\" \\\n--port 3456 --https -e\n```\n\nFor all features of our iGPT, you need to run:\n```shell\npython -u app.py \\\n--load \"ImageOCRRecognition_cuda:0,Text2Image_cuda:0,SegmentAnything_cuda:0,ActionRecognition_cuda:0,VideoCaption_cuda:0,DenseCaption_cuda:0,ReplaceMaskedAnything_cuda:0,LDMInpainting_cuda:0,SegText2Image_cuda:0,ScribbleText2Image_cuda:0,Image2Scribble_cuda:0,Image2Canny_cuda:0,CannyText2Image_cuda:0,StyleGAN_cuda:0,Anything2Image_cuda:0,HuskyVQA_cuda:0\" \\\n-p 3456 --https -e\n```\n\nNotice that `-e` flag can save a lot of memory.\n\n### Selectively Loading Features\nWhen you only want to try DragGAN, you just need to load StyleGAN and open the tab \"DragGAN\":\n```shell\npython -u app.py --load \"StyleGAN_cuda:0\" --tab \"DragGAN\" --port 3456 --https -e\n```\n\nIn this situation, you can only use the functions of DragGAN, which frees you from some dependencies that you are not interested in.\n\n## 🎫 License\n\nThis project is released under the [Apache 2.0 license](LICENSE). \n\n## 🖊️ Citation\n\nIf you find this project useful in your research, please consider cite:\n\n```BibTeX\n@article{2023interngpt,\n  title={InternGPT: Solving Vision-Centric Tasks by Interacting with ChatGPT Beyond Language},\n  author={Liu, Zhaoyang and He, Yinan and Wang, Wenhai and Wang, Weiyun and Wang, Yi and Chen, Shoufa and Zhang, Qinglong and Lai, Zeqiang and Yang, Yang and Li, Qingyun and Yu, Jiashuo and others},\n  journal={arXiv preprint arXiv:2305.05662},\n  year={2023}\n}\n```\n\n## 🤝 Acknowledgement\nThanks to the open source of the following projects:\n\n[Hugging Face](https://github.com/huggingface) &#8194;\n[LangChain](https://github.com/hwchase17/langchain) &#8194;\n[TaskMatrix](https://github.com/microsoft/TaskMatrix) &#8194;\n[SAM](https://github.com/facebookresearch/segment-anything) &#8194;\n[Stable Diffusion](https://github.com/CompVis/stable-diffusion) &#8194; \n[ControlNet](https://github.com/lllyasviel/ControlNet) &#8194; \n[InstructPix2Pix](https://github.com/timothybrooks/instruct-pix2pix) &#8194; \n[BLIP](https://github.com/salesforce/BLIP) &#8194;\n[Latent Diffusion Models](https://github.com/CompVis/latent-diffusion) &#8194;\n[EasyOCR](https://github.com/JaidedAI/EasyOCR)&#8194;\n[ImageBind](https://github.com/facebookresearch/ImageBind) &#8194;\n[DragGAN](https://github.com/XingangPan/DragGAN) &#8194;\n\nWelcome to discuss with us and continuously improve the user experience of InternGPT.\n\nIf you want to join our WeChat group, please scan the following QR Code to add our assistant as a Wechat friend:\n\n<p align=\"center\"><img width=\"300\" alt=\"image\" src=\"https://github.com/OpenGVLab/DragGAN/assets/26198430/e3f0807f-956a-474e-8fd2-1f7c22d73997\"></p> \n\n\n\n\n"
        },
        {
          "name": "README_CN.md",
          "type": "blob",
          "size": 10.8623046875,
          "content": "[[English Document](https://github.com/OpenGVLab/internGPT/blob/main/README.md)]\n\n**[NOTE] 该项目仍在建设中，我们将继续更新，并欢迎社区的贡献/拉取请求。**\n\n<p align=\"center\"><img src=\"./assets/gvlab_logo.png\" width=\"600\"></p>\n\n<a src=\"https://img.shields.io/discord/1099920215724277770?label=Discord&logo=discord\" href=\"https://discord.gg/khWBFnCgAN\">\n<img src=\"https://img.shields.io/discord/1099920215724277770?label=Discord&logo=discord\"> </a> | <a src=\"https://img.shields.io/badge/GPU Demo-Open-green?logo=alibabacloud\" href=\"https://ichat.opengvlab.com\">\n<img src=\"https://img.shields.io/badge/Demo-Open-green?logo=alibabacloud\"> </a> | <a src=\"https://img.shields.io/twitter/follow/opengvlab?style=social\" href=\"https://twitter.com/opengvlab\">\n<img src=\"https://img.shields.io/twitter/follow/opengvlab?style=social\">\n\n# 🤖💬 InternGPT [[论文](https://arxiv.org/pdf/2305.05662.pdf)]\n<!-- ## 描述 -->\n**InternGPT**（简称 **iGPT**） / **InternChat**（简称 **iChat**） 是一种基于指向语言驱动的视觉交互系统，允许您使用指向设备通过点击、拖动和绘制与 ChatGPT 进行互动。internGPT 的名称代表了 **inter**action（交互）、**n**onverbal（非语言）和 Chat**GPT**。与依赖纯语言的现有交互系统不同，通过整合指向指令，iGPT 显著提高了用户与聊天机器人之间的沟通效率，以及聊天机器人在视觉为中心任务中的准确性，特别是在复杂的视觉场景中。此外，在 iGPT 中，采用辅助控制机制来提高 LLM 的控制能力，并对一个大型视觉-语言模型 **Husky** 进行微调，以实现高质量的多模态对话（在ChatGPT-3.5-turbo评测中达到 **93.89% GPT-4 质量**）。\n\n\n## 🥳 🚀 更新\n- (2023.05.24) 🎉🎉🎉 现在已经支持[DragGAN](https://github.com/Zeqiang-Lai/DragGAN)! 使用方法请参考[视频演示](#draggan_demo)。赶紧来体验这个新功能吧: [Demo](https://igpt.opengvlab.com/).\n\n- (2023.05.18) 已支持[ImageBind](https://github.com/facebookresearch/ImageBind) 🎉🎉🎉。使用方法请参考[视频演示](#imagebind_demo)。赶紧来体验: [Demo](https://igpt.opengvlab.com/)\n\n- (2023.05.15) [model_zoo](https://huggingface.co/spaces/OpenGVLab/InternGPT/tree/main/model_zoo) 已经公开，里面包含了HuskyVQA! 赶紧在你自己的机器上部署试试吧!\n\n- (2023.05.15) 我们的代码在 [Hugging Face](https://huggingface.co/spaces/OpenGVLab/InternGPT)也同步更新! 你可以复制一份仓库，然后使用自己的GPU运行demo。\n\n  \n## 🤖💬 在线Demo\n**InternGPT** 上线了 (请访问： [https://igpt.opengvlab.com](https://igpt.opengvlab.com/)). 赶紧来体验吧!\n[注意] 可能会出现排队等待较长时间。您可以clone我们的仓库并使用您自己的GPU运行。\n \n### 🧭 Usage Tips\n更新：\n  \n(2023.05.24) 我们现在支持 [DragGAN](https://arxiv.org/abs/2305.10973)。你可以按照以下步骤试用：\n\n- 点击 `New Image` 按钮；\n- 点击图片，其中蓝色表示起点，红色表示终点；\n- 注意蓝色点的个数要和红色点的个数相同。然后你可以点击 `Drag It` 按钮；\n- 处理完成后，你会收到一张编辑后的图片和一个展示编辑过程的视频。\n  \n<br>\n  \n(2023.05.18) 我们现在已支持 [ImageBind](https://github.com/facebookresearch/ImageBind)。如果你想根据音频生成一张新的图片，你可以提前上传一个音频文件：\n\n- 从**单个音频生成新的图片**，你可以发送如下消息：`\"generate a real image from this audio\"`;\n- 从**音频和文本生成新的图片**，你可以发送如下消息：`\"generate a real image from this audio and {your prompt}\"`;\n- 从**音频和图片生成新的图片**，你需要再上传一个图片，然后发送如下消息：`\"generate a new image from above image and audio\"`;\n  \n<br>\n\n**主要功能使用：**\n\n在图片上传成功后, 您可以发送如下消息与iGPT进行多模态相关的对话：`\"what is it in the image?\"` or `\"what is the background color of image?\"`.   \n您同样也可以交互式地操作、编辑或者生成图片，具体如下：\n- 点击图片上的任意位置，然后按下 **`Pick`** 按钮，**预览分割区域**。您也可以按下 **`OCR`** 按钮，识别具体位置处存在的所有单词；\n- 要在图像中 **删除掩码区域**，您可以发送如下消息：`“remove the masked region”`；\n- 要在图像中 **替换掩码区域的物体为其他物体**，您可以发送如下消息：`“replace the masked region with {your prompt}”`；\n- 想 **生成新图像**，您可以发送如下消息：`“generate a new image based on its segmentation describing {your prompt}”`；\n- 想通过 **涂鸦创建新图像**，您应该按下 **`Whiteboard`** 按钮并在白板上绘制。绘制完成后，您需要按下 **`保存`** 按钮并发送如下消息：`“generate a new image based on this scribble describing {your prompt}”`。\n \n\n[**InternGPT** 已上线，尝试一下！](https://igpt.opengvlab.com)\n\n**<a id=\"draggan_demo\">Video Demo with DragGAN: </a>**\n\nhttps://github.com/OpenGVLab/InternGPT/assets/13723743/529abde4-5dce-48de-bb38-0a0c199bb980\n\n<a id=\"imagebind_demo\">**iGPT + ImageBind视频演示：**</a>\n  \nhttps://github.com/OpenGVLab/InternGPT/assets/13723743/bacf3e58-6c24-4c0f-8cf7-e0c4b8b3d2af\n \n<a id=\"igpt_demo\">**iGPT 视频演示：**</a>\n  \nhttps://github.com/OpenGVLab/InternGPT/assets/13723743/8fd9112f-57d9-4871-a369-4e1929aa2593\n\n  \n## 🗓️ 项目规划\n  \n- [ ] 支持中文\n- [ ] 支持 MOSS\n- [ ] 基于 InternImage 和 InternVideo 的更强大的基础模型\n- [ ] 更准确的交互体验\n- [ ] OpenMMLab Toolkit\n- [ ] 网页 & 代码生成\n- [ ] 支持搜索引擎 \n- [ ] 低成本部署\n- [x] 支持 [DragGAN](https://arxiv.org/abs/2305.10973)\n- [x] 支持 [ImageBind](https://github.com/facebookresearch/ImageBind)\n- [x] Agent响应验证\n- [x] 提示词优化\n- [x] 用户手册和视频demo\n- [x] 支持语音助手\n- [x] 支持点击交互\n- [x] 交互式图像编辑\n- [x] 交互式图像生成\n- [x] 交互式视觉问答\n- [x] Segment Anything模型\n- [x] 图像修复\n- [x] 图像描述\n- [x] 图像抠图\n- [x] 光学字符识别（OCR）\n- [x] 动作识别\n- [x] 视频描述\n- [x] 视频密集描述\n- [x] 视频高光时刻截取\n\n  \n## 🏠 系统概览\n<p align=\"center\"><img src=\"./assets/arch1.png\" alt=\"Logo\"></p>\n  \n## 🎁 主要功能\n<!--<!-- <p align=\"center\"><img src=\"./assets/online_demo.gif\" alt=\"Logo\"></p> -->\n\n<details>\n<summary>A) 移除遮盖的对象</summary>\n<p align=\"center\"><img src=\"./assets/demo2.gif\" width=\"500\"></p>\n</details>\n\n<details>\n<summary>B) 交互式图像编辑</summary>\n<p align=\"center\"><img src=\"./assets/tower.gif\" width=\"500\"></p>\n</details>\n\n<details>\n<summary>C) 图像生成</summary>\n<p align=\"center\"><img src=\"./assets/demo4.gif\" width=\"500\"></p>\n</details>\n\n<details>\n<summary>D) 交互式视觉问答</summary>\n<p align=\"center\"><img src=\"./assets/demo5.gif\" width=\"500\"></p>\n</details>\n\n<details>\n<summary>E) 交互式图像生成</summary>\n<p align=\"center\"><img src=\"https://github.com/OpenGVLab/InternGPT/assets/8529570/2b0da08e-af86-453d-99e5-1327f93aa917\" width=\"500\"></p>\n</details>\n\n<details>\n<summary>F) 视频高光解说</summary>\n<p align=\"center\"><img src=\"./assets/demo6.jpg\" width=\"500\"></p>\n</details>\n\n<!-- ![alt](\"./assets/demo5.gif\" \"title\") -->\n\n## 🛠️ 安装\n\n### 基本要求\n- Linux \n- Python 3.8+ \n- PyTorch 1.12+\n- CUDA 11.6+ \n- GCC & G++ 5.4+\n- GPU Memory > 17G 用于加载基本工具 (HuskyVQA, SegmentAnything, ImageOCRRecognition)\n\n### 安装Python的依赖项\n```shell\npip install -r requirements.txt\n```\n\n\n### 🗃 模型库\n我们模型库 `model_zoo` 正式在[huggingface](https://huggingface.co/spaces/OpenGVLab/InternGPT/tree/main/model_zoo)公开！在运行我们的demo前，你需要先将`model_zoo`下载到本地，然后放进项目的根目录下面。\n\n小彩蛋：HuskyVQA模型也在`model_zoo`里开源了！经我们测试，HuskyVQA的视觉问答能力达到了业界顶尖水平。更多细节请参考我们的[report](https://arxiv.org/pdf/2305.05662.pdf)。\n\n### 使用docker部署\n\n请提前将`model_zoo`和`certificate`文件添加到项目的根目录下面, 然后将`docker/InternGPT_CN/docker-compose.yml`中的`/path/to/InternGPT`变量修改为项目根目录。\n\n你可以修改`docker/InternGPT_CN/docker-compose.yml`文件中`command`部分的`load`变量来运行更多的功能。\n\n```shell\ncd docker/InternGPT_CN\n# 构建镜像并运行一个容器\ndocker compose up \n# 或者启动一个交互式BASH会话\ndocker compose run -i --entrypoint /bin/bash igpt_cn\n```\n\n## 👨‍🏫 运行指南\n\n运行以下 shell 可启动一个 gradio 服务：\n\n```shell\npython -u app.py --load \"HuskyVQA_cuda:0,SegmentAnything_cuda:0,ImageOCRRecognition_cuda:0\" --port 3456 -e\n```\n如果您想启用语音助手，请使用 openssl 生成证书：\n\n```shell\nmkdir certificate\nopenssl req -x509 -newkey rsa:4096 -keyout certificate/key.pem -out certificate/cert.pem -sha256 -days 365 -nodes\n```\n然后运行：\n\n```shell\npython -u app.py --load \"HuskyVQA_cuda:0,SegmentAnything_cuda:0,ImageOCRRecognition_cuda:0\" --port 3456 --https -e\n```\n如果您想减少响应时间并且有足够的显存容量，请移除命令中的`-e`选项。\n\n\n\n## 🎫 许可\n\n该项目根据[Apache 2.0 license](LICENSE)发布。\n\n## 🖊️ 引用\n\n如果您在研究中发现这个项目有用，请考虑引用我们的论文：\n```BibTeX\n@article{2023interngpt,\n  title={InternGPT: Solving Vision-Centric Tasks by Interacting with ChatGPT Beyond Language},\n  author={Liu, Zhaoyang and He, Yinan and Wang, Wenhai and Wang, Weiyun and Wang, Yi and Chen, Shoufa and Zhang, Qinglong and Yang, Yang and Li, Qingyun and Yu, Jiashuo and others},\n  journal={arXiv preprint arXiv:2305.05662},\n  year={2023}\n}\n```\n\n## 🤝 致谢\n\n感谢以下开源项目:\n\n[Hugging Face](https://github.com/huggingface) &#8194;\n[LangChain](https://github.com/hwchase17/langchain) &#8194;\n[TaskMatrix](https://github.com/microsoft/TaskMatrix) &#8194;\n[SAM](https://github.com/facebookresearch/segment-anything) &#8194;\n[Stable Diffusion](https://github.com/CompVis/stable-diffusion) &#8194; \n[ControlNet](https://github.com/lllyasviel/ControlNet) &#8194; \n[InstructPix2Pix](https://github.com/timothybrooks/instruct-pix2pix) &#8194; \n[BLIP](https://github.com/salesforce/BLIP) &#8194;\n[Latent Diffusion Models](https://github.com/CompVis/latent-diffusion) &#8194;\n[EasyOCR](https://github.com/JaidedAI/EasyOCR)&#8194;\n[ImageBind](https://github.com/facebookresearch/ImageBind) &#8194;\n[DragGAN](https://github.com/XingangPan/DragGAN) &#8194;\n\n\n如果您在试用、运行、部署中有任何问题，欢迎加入我们的微信群讨论！如果您对项目有任何的想法和建议，欢迎加入我们的微信群讨论！\n\n加入微信群组二维码：\n  \n\n<p align=\"center\"><img src=\"https://github.com/OpenGVLab/InternGPT/assets/13723743/01617600-4918-4096-8e03-159b96650952\" width=\"300\"></p>\n\n"
        },
        {
          "name": "app.py",
          "type": "blob",
          "size": 21.96875,
          "content": "# coding: utf-8\nimport os\nimport numpy as np\nos.environ['CURL_CA_BUNDLE'] = ''\nos.environ['MKL_SERVICE_FORCE_INTEL'] = '1'\n\ntry:\n    import detectron2\nexcept:\n    os.system('pip install git+https://github.com/facebookresearch/detectron2.git')\n\nfrom pathlib import Path\nimport sys\nsys.path.insert(0, str(Path(__file__).resolve().parent / \"third-party\" / \"lama\"))\n\nimport random\nfrom PIL import Image\nimport numpy as np\nimport argparse\nfrom functools import partial\n\nimport gradio as gr\nimport gradio.themes.base as ThemeBase\nfrom gradio.themes.utils import colors, fonts, sizes\n\nfrom openai.error import APIConnectionError\n\n# from iGPT.models import *\n\nfrom iGPT.controllers import ConversationBot\n\nimport openai\nfrom langchain.llms.openai import OpenAI\n\n\napi_base = os.environ.get('OPENAI_API_BASE', None)\nif api_base is not None:\n    openai.api_base = api_base\n\nos.makedirs('image', exist_ok=True)\n\n\nclass ImageSketcher(gr.Image):\n    \"\"\"\n    Code is from https://github.com/ttengwang/Caption-Anything/blob/main/app.py#L32.\n    Fix the bug of gradio.Image that cannot upload with tool == 'sketch'.\n    \"\"\"\n\n    is_template = True  # Magic to make this work with gradio.Block, don't remove unless you know what you're doing.\n\n    def __init__(self, **kwargs):\n        super().__init__(tool=\"sketch\", **kwargs)\n\n    def preprocess(self, x):\n        if x is None:\n            return x\n        if self.tool == 'sketch' and self.source in [\"upload\", \"webcam\"]:\n            # assert isinstance(x, dict)\n            if isinstance(x, dict) and x['mask'] is None:\n                decode_image = gr.processing_utils.decode_base64_to_image(x['image'])\n                width, height = decode_image.size\n                mask = np.zeros((height, width, 4), dtype=np.uint8)\n                mask[..., -1] = 255\n                mask = self.postprocess(mask)\n                x['mask'] = mask\n            elif not isinstance(x, dict):\n                decode_image = gr.processing_utils.decode_base64_to_image(x)\n                width, height = decode_image.size\n                decode_image.save('sketch_test.png')\n                # print(width, height)\n                mask = np.zeros((height, width, 4), dtype=np.uint8)\n                mask[..., -1] = 255\n                mask = self.postprocess(mask)\n                x = {'image': x, 'mask': mask}\n        x = super().preprocess(x)\n        return x\n\n\nclass Seafoam(ThemeBase.Base):\n    def __init__(\n        self,\n        *,\n        primary_hue=colors.emerald,\n        secondary_hue=colors.blue,\n        neutral_hue=colors.gray,\n        spacing_size=sizes.spacing_md,\n        radius_size=sizes.radius_md,\n        text_size=sizes.text_lg,\n        font=(\n            fonts.GoogleFont(\"Quicksand\"),\n            \"ui-sans-serif\",\n            \"sans-serif\",\n        ),\n        font_mono=(\n            fonts.GoogleFont(\"IBM Plex Mono\"),\n            \"ui-monospace\",\n            \"monospace\",\n        ),\n    ):\n        super().__init__(\n            primary_hue=primary_hue,\n            secondary_hue=secondary_hue,\n            neutral_hue=neutral_hue,\n            spacing_size=spacing_size,\n            radius_size=radius_size,\n            text_size=text_size,\n            font=font,\n            font_mono=font_mono,\n        )\n        super().set(\n            # body_background_fill=\"#D8E9EB\",\n            body_background_fill_dark=\"#111111\",\n            button_primary_background_fill=\"*primary_300\",\n            button_primary_background_fill_hover=\"*primary_200\",\n            button_primary_text_color=\"black\",\n            button_secondary_background_fill=\"*secondary_300\",\n            button_secondary_background_fill_hover=\"*secondary_200\",\n            border_color_primary=\"#0BB9BF\",\n            slider_color=\"*secondary_300\",\n            slider_color_dark=\"*secondary_600\",\n            block_title_text_weight=\"600\",\n            block_border_width=\"3px\",\n            block_shadow=\"*shadow_drop_lg\",\n            button_shadow=\"*shadow_drop_lg\",\n            button_large_padding=\"10px\",\n        )\n\n\ncss='''\n#image_upload {align-items: center; max-width: 640px}\n'''\n\ndef cut_dialogue_history(history_memory, keep_last_n_words=500):\n    if history_memory is None or len(history_memory) == 0:\n        return history_memory\n    tokens = history_memory.split()\n    n_tokens = len(tokens)\n    print(f\"history_memory:{history_memory}, n_tokens: {n_tokens}\")\n    if n_tokens < keep_last_n_words:\n        return history_memory\n    paragraphs = history_memory.split('\\n')\n    last_n_tokens = n_tokens\n    while last_n_tokens >= keep_last_n_words:\n        last_n_tokens -= len(paragraphs[0].split(' '))\n        paragraphs = paragraphs[1:]\n    return '\\n' + '\\n'.join(paragraphs)\n\n\ndef login_with_key(bot, debug, api_key):\n    # Just for debug\n    print('===>logging in')\n    user_state = [{}]\n    is_error = True\n    if debug:\n        user_state = bot.init_agent()\n        return gr.update(visible=True), gr.update(visible=False), gr.update(visible=False, value=''), user_state\n    else:\n        if api_key and len(api_key) > 30:\n            print(api_key)\n            os.environ[\"OPENAI_API_KEY\"] = api_key\n            openai.api_key = api_key\n            try:\n                llm = OpenAI(temperature=0)\n                llm('Hi!')\n                response = 'Success!'\n                is_error = False\n                user_state = bot.init_agent()\n            except Exception as err:\n                # gr.update(visible=True)\n                print(err)\n                response = 'Incorrect key, please input again'\n                is_error = True\n        else:\n            is_error = True\n            response = 'Incorrect key, please input again'\n        \n        return gr.update(visible=not is_error), gr.update(visible=is_error), gr.update(visible=is_error, value=response), user_state\n\n    \ndef change_input_type(flag):\n    if flag:\n        print('Using voice input.')\n    else:\n        print('Using text input.')\n    return gr.update(visible=not flag), gr.update(visible=flag)\n\ndef random_image():\n    root_path = './assets/images'\n    img_list = os.listdir(root_path)\n    img_item = random.sample(img_list, 1)[0]\n    return Image.open(os.path.join(root_path, img_item))\n\ndef random_video():\n    root_path = './assets/videos'\n    vid_list = os.listdir(root_path)\n    vid_item = random.sample(vid_list, 1)[0]\n    return os.path.join(root_path, vid_item)\n\ndef random_audio():\n    root_path = './assets/audio'\n    aud_list = os.listdir(root_path)\n    aud_item = random.sample(aud_list, 1)[0]\n    print(os.path.join(root_path, aud_item))\n    return os.path.join(root_path, aud_item)\n\ndef add_whiteboard():\n    # wb = np.ones((1080, 1920, 3), dtype=np.uint8) * 255\n    wb = np.ones((720, 1280, 3), dtype=np.uint8) * 255\n    return Image.fromarray(wb)\n\ndef change_max_iter(max_iters):\n    return gr.update(maximum=max_iters)\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-p', '--port', type=int, default=7862)\n    parser.add_argument('-d', '--debug', action='store_true')\n    parser.add_argument('--https', action='store_true')\n    parser.add_argument('--load', type=str, default=\"HuskyVQA_cuda:0,ImageOCRRecognition_cuda:0,SegmentAnything_cuda:0\")\n    parser.add_argument('--tab', type=str, default=\"Audio,DragGAN,Image,Video\")\n    parser.add_argument('-e', '--e-mode', action='store_true')\n    args = parser.parse_args()\n    load_dict = {e.split('_')[0].strip(): e.split('_')[1].strip() for e in args.load.split(',')}\n    bot = ConversationBot(load_dict=load_dict, e_mode=args.e_mode)\n    with gr.Blocks(theme=Seafoam(), css=css) as demo:\n        state = gr.State([])\n        # user_state is dict. Keys: [agent, memory, image_path, video_path, seg_mask, image_caption, OCR_res, ...]\n        user_state = gr.State([])\n\n        gr.HTML(\n            \"\"\"\n            <div align='center'> <img src='/file=./assets/gvlab_logo.png' style='height:70px'/> </div>\n            <p align=\"center\"><a href=\"https://github.com/OpenGVLab/InternGPT\"><b>GitHub</b></a>\n            &nbsp;&nbsp;&nbsp; <a href=\"https://arxiv.org/pdf/2305.05662.pdf\"><b>Report</b></a>\n            &nbsp;&nbsp;&nbsp; <a href=\"https://github.com/OpenGVLab/InternGPT/assets/13723743/8fd9112f-57d9-4871-a369-4e1929aa2593\"><b>Video Demo</b></a>\n            &nbsp;&nbsp;&nbsp; <a href=\"https://github.com/OpenGVLab/InternGPT/tree/main#imagebind_demo\"><b>Video Demo with ImageBind</b></a>\n            &nbsp;&nbsp;&nbsp; <a href=\"https://github.com/OpenGVLab/InternGPT/tree/main#draggan_demo\"><b>Video Demo with DragGAN</b></a></p>\n            \"\"\"\n        )\n\n        with gr.Row(visible=True, elem_id='login') as login:\n            with gr.Column(scale=0.6, min_width=0) :\n                openai_api_key_text = gr.Textbox(\n                    placeholder=\"Input openAI API key\",\n                    show_label=False,\n                    label=\"OpenAI API Key\",\n                    lines=1,\n                    type=\"password\").style(container=False)\n            with gr.Column(scale=0.4, min_width=0):\n                key_submit_button = gr.Button(value=\"Please log in with your OpenAI API Key\", interactive=True, variant='primary').style(container=False) \n\n        with gr.Row(visible=False) as user_interface:\n            with gr.Column(scale=0.5, elem_id=\"text_input\") as chat_part:\n                chatbot = gr.Chatbot(elem_id=\"chatbot\", label=\"InternGPT\").style(height=360)\n                with gr.Row(visible=True) as input_row:\n                    with gr.Column(min_width=0) as text_col:\n                        txt = gr.Textbox(show_label=False, placeholder=\"Enter text and press enter, or upload an image\").style(\n                            container=False)\n                        audio2text_input = gr.Audio(source=\"microphone\", type=\"filepath\", visible=False)\n                with gr.Row(visible=True) as input_btn:    \n                    with gr.Column(scale=0.5, min_width=0):\n                        audio_switch = gr.Checkbox(label=\"🎤 Voice Assistant\", elem_id='audio_switch', info=None)\n                    with gr.Column(scale=0.5, min_width=20):\n                        send_btn = gr.Button(\"📤 Send\", variant=\"primary\", visible=True)\n                    \n            with gr.Column(elem_id=\"visual_input\", scale=0.5) as img_part:\n                if 'Audio' in args.tab:\n                    with gr.Tab(\"Audio (with ImageBind)\", elem_id='audio_tab') as audio_tab:\n                        audio_input = gr.Audio(source=\"upload\", type=\"filepath\", visible=True, elem_id=\"audio_upload\").style(height=360)\n                        add_aud_example = gr.Button(\"📻 Audio Example\", variant=\"primary\")\n                    \n                    add_aud_example.click(random_audio, [], [audio_input,]).then( \n                        bot.upload_audio, [audio_input, state, user_state], \n                        [chatbot, state, user_state])\n                    \n                    audio_input.upload( \n                        bot.upload_audio, [audio_input, state, user_state], \n                        [chatbot, state, user_state])\n\n                if 'DragGAN' in args.tab:\n                    with gr.Tab(\"DragGAN\", elem_id='drag_gan_tab') as drag_gan_tab:\n                        drag_image = gr.Image(interactive=False).style(height=340)\n                        with gr.Row(elem_id='drag_gan_btn') as drag_btn_row:   \n                            with gr.Column(scale=0.33, min_width=0):\n                                drag_new_img_btn = gr.Button('🖼️ New Image', variant='primary') \n                            with gr.Column(scale=0.33, min_width=0):\n                                drag_btn = gr.Button('🖱︎ Drag It', variant='primary')\n                            with gr.Column(scale=0.33, min_width=0):\n                                drag_reset_btn = gr.Button('🧹 Clear Points', variant='primary')\n                        with gr.Row(elem_id='drag_gan_progress'):   \n                            with gr.Column(scale=0.5, min_width=0):\n                                drag_max_iters = gr.Slider(1, 100, 25, step=1, label='Max Iterations', elem_id='drag_max_iters')\n                            with gr.Column(scale=0.5, min_width=0):\n                                progress = gr.Slider(value=0, maximum=25, label='Progress', interactive=False, elem_id='progress')\n                    drag_new_img_btn.click(bot.gen_new_image, [state, user_state], [drag_image, chatbot, state, user_state])\n                    drag_image.select(bot.save_points_for_drag_gan, [drag_image, user_state, ], [drag_image, user_state, ])\n                    drag_btn.click(\n                        bot.drag_it, [drag_image, drag_max_iters, state, user_state], [drag_image, progress, chatbot, state, user_state]\n                    )\n                    drag_max_iters.change(change_max_iter, [drag_max_iters,], [progress, ])\n                    drag_reset_btn.click(bot.reset_drag_points, [drag_image, user_state], [drag_image, user_state, ])\n                    drag_gan_tab.select(\n                        bot.gen_new_image, [state, user_state], [drag_image, chatbot, state, user_state])\n\n\n                if 'Image' in args.tab:\n                    with gr.Tab(\"Image\", elem_id='image_tab') as img_tab:\n                        click_img = ImageSketcher(type=\"pil\", interactive=True, brush_radius=15, elem_id=\"image_upload\").style(height=360)\n                        with gr.Row() as img_btn:\n                            with gr.Column(scale=0.25, min_width=0):\n                                process_seg_btn = gr.Button(value=\"👆 Pick\", variant=\"primary\", elem_id=\"process_seg_btn\")\n                            with gr.Column(scale=0.25, min_width=0):\n                                process_ocr_btn = gr.Button(value=\"🔍 OCR\", variant=\"primary\", elem_id=\"process_ocr_btn\")\n                            with gr.Column(scale=0.25, min_width=0):\n                                process_save_btn = gr.Button(value=\"📁 Save\", variant=\"primary\", elem_id=\"process_save_btn\")\n                            with gr.Column(scale=0.25, min_width=0):\n                                clear_btn = gr.Button(value=\"🗑️ Clear All\", elem_id=\"clear_btn\")\n\n                        with gr.Row(visible=True) as img_example:\n                            with gr.Column(scale=0.5, min_width=0, visible=True) :\n                                add_img_example = gr.Button(\"🖼️ Image Example\", variant=\"primary\")\n                            with gr.Column(scale=0.5, min_width=0):\n                                whiteboard_mode = gr.Button(\"⬜️ Whiteboard Mode\", variant=\"primary\", visible=True)\n                        \n                    add_img_example.click(random_image, [], [click_img,]).then( \n                                        bot.upload_image, [click_img, state, user_state], \n                                        [chatbot, state, user_state])\n                    \n                    whiteboard_mode.click(add_whiteboard, [], [click_img, ])\n\n                    click_img.upload(lambda: gr.update(interactive=False), [], [send_btn]).then( \n                        bot.upload_image, [click_img, state, user_state], \n                        [chatbot, state, user_state]).then(\n                        lambda: gr.update(interactive=True), [], [send_btn])\n                    \n                    process_ocr_btn.click(\n                        lambda: gr.update(interactive=False), [], [process_ocr_btn]).then(\n                        bot.process_ocr, [click_img, state, user_state], [click_img, chatbot, state, user_state]).then(\n                        lambda: gr.update(interactive=True), [], [process_ocr_btn]\n                    )\n                    \n                    process_seg_btn.click(\n                        lambda: gr.update(interactive=False), [], [process_seg_btn]).then(\n                        bot.process_seg, [click_img, state, user_state], [click_img, chatbot, state, user_state]).then(\n                        lambda: gr.update(interactive=True), [], [process_seg_btn]\n                    )\n                    \n                    process_save_btn.click(\n                        lambda: gr.update(interactive=False), [], [process_save_btn]).then(\n                        bot.process_save, [click_img, state, user_state], [click_img, chatbot, state, user_state]).then(\n                        lambda: gr.update(interactive=True), [], [process_save_btn]\n                    )\n                    clear_func = partial(bot.clear_user_state, True)\n                    clear_btn.click(lambda: None, [], [click_img, ]).then(\n                        lambda: [], None, state).then(\n                        clear_func, [user_state, ], [user_state, ]).then(\n                        lambda: None, None, chatbot\n                    ).then(lambda: '', None, [txt, ])\n\n                if 'Video' in args.tab:\n                    with gr.Tab(\"Video\", elem_id='video_tab') as video_tab:\n                        video_input = gr.Video(interactive=True, include_audio=True, elem_id=\"video_upload\").style(height=360)\n                        add_vid_example = gr.Button(\"📽 Video Example\", variant=\"primary\")\n\n                    add_vid_example.click(random_video, [], [video_input,]).then( \n                    bot.upload_video, [video_input, state, user_state], \n                    [chatbot, state, user_state])\n\n                    video_input.upload( \n                        bot.upload_video, [video_input, state, user_state], \n                        [chatbot, state, user_state])\n                    clear_func = partial(bot.clear_user_state, False)\n                    video_input.clear(clear_func, [user_state, ], [user_state, ])\n            \n\n            login_func = partial(login_with_key, bot, args.debug)\n            openai_api_key_text.submit(login_func, [openai_api_key_text], [user_interface, openai_api_key_text, key_submit_button, user_state])\n            key_submit_button.click(login_func, [openai_api_key_text, ], [user_interface, openai_api_key_text, key_submit_button, user_state])\n            \n            txt.submit(\n                lambda: gr.update(interactive=False), [], [send_btn]).then(\n                lambda: gr.update(interactive=False), [], [txt]).then(\n                lambda: gr.update(interactive=False), [], [audio_switch]).then(\n                bot.run_text, [txt, state, user_state], [chatbot, state, user_state]).then(\n                    lambda: \"\", None, [txt, ]).then(\n                lambda: gr.update(interactive=True), [], [txt]).then(\n                    lambda: gr.update(interactive=True), [], [send_btn]\n                ).then(\n                    lambda: gr.update(interactive=True), [], [audio_switch]\n                )\n\n            send_btn.click(\n                lambda: gr.update(interactive=False), [], [send_btn]).then(\n                lambda: gr.update(interactive=False), [], [txt]).then(\n                lambda: gr.update(interactive=False), [], [audio_switch]).then(\n                bot.run_task, [audio_switch, txt, audio2text_input, state, user_state], [chatbot, state, user_state]).then(\n                lambda: \"\", None, [txt, ]).then(\n                lambda: gr.update(interactive=True), [], [send_btn]).then(\n                    lambda: gr.update(interactive=True), [], [txt]\n                ).then(\n                    lambda: gr.update(interactive=True), [], [audio_switch]\n                )\n            \n            audio_switch.change(change_input_type, [audio_switch, ], [txt, audio2text_input])\n            \n        gr.Markdown(\n            '''\n            **User Manual:**\n    \n            Update:\n\n            (2023.05.24) We now support [DragGAN](https://github.com/Zeqiang-Lai/DragGAN). You can try it as follows:\n            - Click the button `New Image`;\n            - Click the image where blue denotes the start point and red denotes the end point;\n            - Notice that the number of blue points is the same as the number of red points. Then you can click the button `Drag It`;\n            - After processing, you will receive an edited image and a video that visualizes the editing process.\n\n            <br>(2023.05.18) We now support [ImageBind](https://github.com/facebookresearch/ImageBind). If you want to generate a new image conditioned on audio, you can upload an audio file in advance:\n            - To **generate a new image from a single audio file**, you can send the message like: `\"generate a real image from this audio\"`;\n            - To **generate a new image from audio and text**, you can send the message like: `\"generate a real image from this audio and {your prompt}\"`;\n            - To **generate a new image from audio and image**, you need to upload an image and then send the message like: `\"generate a new image from above image and audio\"`;\n\n            <br>After uploading the image, you can have a **multi-modal dialogue** by sending messages like: `\"what is it in the image?\"` or `\"what is the background color of the image?\"`.\n\n            You also can interactively operate, edit or generate the image as follows:\n            - You can click the image and press the button **`Pick`** to **visualize the segmented region** or press the button **`OCR`** to **recognize the words** at chosen position;\n            - To **remove the masked region** in the image, you can send the message like: `\"remove the masked region\"`;\n            - To **replace the masked region** in the image, you can send the message like: `\"replace the masked region with {your prompt}\"`;\n            - To **generate a new image**, you can send the message like: `\"generate a new image based on its segmentation describing {your prompt}\"`.\n            - To **create a new image by your scribble**, you should press button **`Whiteboard`** and draw in the board. After drawing, you need to press the button **`Save`** and send the message like: `\"generate a new image based on this scribble describing {your prompt}\"`.\n\n            '''\n        )\n        gr.HTML(\n            \"\"\"\n            <body>\n            <p style=\"font-family:verdana;color:#11AA00\";>More features are coming soon. Hope you have fun with our demo!</p>\n            </body>\n            \"\"\"\n        )\n\n    if args.https:\n        demo.queue().launch(server_name=\"0.0.0.0\", ssl_certfile=\"./certificate/cert.pem\", ssl_keyfile=\"./certificate/key.pem\", ssl_verify=False, server_port=args.port)\n    else:\n        demo.queue().launch(server_name=\"0.0.0.0\", server_port=args.port)\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "iGPT",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.5888671875,
          "content": "torch==1.13.0\nopencv-python==4.5.5.64\nPillow==9.5.0\nopenai-whisper==20230314\ngradio==3.28.1\ntransformers==4.28.0\ndiffusers==0.15.1\ncontrolnet_aux\nlangchain==0.0.101\ndecord==0.6.0\nopenai==0.27.4\nffmpeg-python==0.2.0\nfairscale==0.4.3\nlvis==0.5.3\nsuno-bark\neasyocr==1.6.2\neasydict==1.9\nscikit-learn==0.24.2\npytorch-lightning==1.5.10\nalbumentations==0.5.2\nwebdataset==0.2.48\nkornia==0.5.0\nsentencepiece==0.1.98\naccelerate==0.18.0\ntimm==0.6.13\ngit+https://github.com/facebookresearch/segment-anything.git\nwget\nprotobuf==3.20\npytorchvideo==0.1.5\nsoundfile\nfvcore\ndecord==0.6.0\nftfy\nregex\neinops\nimageio-ffmpeg"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third-party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}