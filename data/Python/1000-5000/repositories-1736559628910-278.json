{
  "metadata": {
    "timestamp": 1736559628910,
    "page": 278,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebookarchive/augmented-traffic-control",
      "stars": 4324,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.1298828125,
          "content": "[run]\nbranch = True\nomit =\n  atc/atcd/tests/*\n  # files generated by thrift\n  atc/atc_thrift/atc_thrift/*\n  # chef files\n  chef/*/*\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.345703125,
          "content": "*.log\n*.pot\n*.pyc\n*.sqlite3\nlocal_settings.py\n*.swp\n*.swo\nexternal/\ncollected_static/\n.vagrant\n.DS_Store\nMakefile.in\naclocal.m4\nautom4te.cache/\nbuild-aux/\nconfig.h\nconfig.h.in\nconfig.status\nconfigure\nlibtool\nm4/\n.deps/\n.libs/\n**/build/\n**/dist/\n*.egg-info\n*.lo\n*.o\n*.la\nstamp-h1\ncheck_atc\ncheck_atc.trs\n*.cap\n*.har\npcap2har/\ninternal\n.coverage\n.kitchen/\n"
        },
        {
          "name": ".pep8",
          "type": "blob",
          "size": 0.041015625,
          "content": "[pep8]\nexclude = migrations,*/atc_thrift/\n"
        },
        {
          "name": ".rubocop.yml",
          "type": "blob",
          "size": 0.134765625,
          "content": "AllCops:\n    Exclude:\n        - '**/Berksfile'\n        - '**/Vagrantfile'\n        - '**/metadata.rb'\nStyle/HashSyntax:\n    Enabled: false\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.345703125,
          "content": "sudo: false\nlanguage: python\npython:\n    - \"2.7\"\ninstall:\n    - pip install flake8\n    - pip install pep8\n    - pip install atc/atc_thrift/ atc/atcd/ atc/django-atc-api/ atc/django-atc-demo-ui/ atc/django-atc-profile-storage/\n    - pip install -r atc/atcd/requirements/requirements-testing.txt\nscript:\n    - make python_lint\n    - py.test atc/atcd/tests\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.322265625,
          "content": "# Changelog\n\n* 0.1.6\n    * Suport for Django 1.10 #296\n\n* 0.1.5\n    * Fix handling of POSTed profiles. #287\n\n* 0.1.4\n    * Bump django to 1.9 and django-bootstrap-themes to 3.3.6\n    * Fix chef run on Ubuntu\n\n* 0.1.3\n    * Support Django rest framework 3.2\n\n* 0.1.2\n    * Fixes:\n        * Better detection of logging subsystem and don't fail if /dev/log does not exist\n        * Regenerating thrift files was overriding package version #107\n        * Fixes the UI to run in older browsers\n    * Featues:\n        * UI improvements\n        * Added remote controlling functionality to the UI\n        * Added a set of sample profiles #56\n        * Created a dockerized instance of ATC\n        * Added --atcd-dont-drop-packets flag to not drop packets when going beyond the max bandwidth. Packets will be buffered instead.\n    * Misc:\n        * More unittest\n        * More documentation fixes\n        * Shape test util\n        * Script to dump system config for troubleshooting purpose\n        * Code refactoring\n        * Updated to React 0.13.3\n\n* 0.1.1\n    * Fixes:\n        * Fix profile creation in Firefox #59\n        * Fix installing packages through pip when wheel is not used #77\n    * Misc:\n        * Added some unittest\n        * Build and test PR on Travis\n        * Bunch of typo fixes\n        * More documentation\n\n* 0.1.0\n    * Initial Release\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.681640625,
          "content": "# Contributing to Augmented Traffic Control\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Our Development Process\n\nAugmented Traffic Control is maintained and developed on github. It is designed to be\neasily extensible and contain API that can be reused by external services/frontends.\n\nSend us your pull requests, and we'd be happy to provide feedback and merge\nas appropriate.\n\n## Pull Requests\nWe actively welcome your pull requests.\n1. Fork the repo and create your branch from `master`.\n2. If you've added code that should be tested, add tests\n3. If you've changed APIs, update the documentation.\n4. Make sure your code lints (e.g., pyflakes, PEP8, etc).46. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n5. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\n## Contributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## Issues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\n\n## Coding Style\n* PEP-8 compliant\n* 80 character line length\n* General pyFlakes compliance (e.g., no * imports)\n\n## License\nBy contributing to Augmented Traffic Control, you agree that your contributions will be licensed\nunder its BSD license.\n"
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 0.1669921875,
          "content": "* Alessandro Salvatori\n* Ameesh Goyal\n* Andrew Pope\n* Anthony Gargiulo\n* Chris Vander Mey\n* Emmanuel Bretelle\n* Gus Luxton\n* John Morrow\n* Patrick Shuff\n* Zeal Jagannatha\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.509765625,
          "content": "BSD License\n\nFor Augmented Traffic Control software\n\nCopyright (c) 2014-present, Facebook, Inc. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n * Neither the name Facebook nor the names of its contributors may be used to\n   endorse or promote products derived from this software without specific\n   prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.302734375,
          "content": "#\n#  Copyright (c) 2014, Facebook, Inc.\n#  All rights reserved.\n#\n#  This source code is licensed under the BSD-style license found in the\n#  LICENSE file in the root directory of this source tree. An additional grant\n#  of patent rights can be found in the PATENTS file in the same directory.\n#\n\n\n# Vagrant names used for testing.\n# Described fully in `tests/Vagrantfile`.\nTESTVMS = gateway client server\n\nFLAKE=python -m flake8\nPEP=pep8\n\n\n# By default, we just lint since we want this to be **fast**.\n# In the future when unit testing becomes better this should run quick tests.\n.PHONY: default\ndefault: lint\n\n\n# Do all the things!\n.PHONY: all\nall: lint fulltest\n\n\n# Install packages locally.\n.PHONY: install\ninstall:\n\tcd atc/atc_thrift && pip install --upgrade --force-reinstall .\n\tcd atc/atcd && pip install --upgrade --force-reinstall .\n\tcd atc/django-atc-api && pip install --upgrade --force-reinstall .\n\tcd atc/django-atc-demo-ui && pip install --upgrade --force-reinstall .\n\tcd atc/django-atc-profile-storage && pip install --upgrade --force-reinstall .\n\n\n# Publish packages to PyPi.\n.PHONY: publish\npublish:\n\tcd atc/atc_thrift && python setup.py publish\n\tcd atc/atcd && python setup.py publish\n\tcd atc/django-atc-api && python setup.py publish\n\tcd atc/django-atc-demo-ui && python setup.py publish\n\tcd atc/django-atc-profile-storage && python setup.py publish\n\n\n# Cleans up python dist files\n.PHONY: clean\nclean:\n\trm -rf atc/{atcd,atc_thrift,django-atc-api,django-atc-demo-ui,django-atc-profile-storage}/{build,dist}\n\n\n# Lint the various sources that ATC includes:\n#  chef/  - chef cookbooks\n#  atc/   - ATC source code\n#  tests/ - ATC test code\n.PHONY: lint\nlint: chef_lint python_lint\n\n.PHONY: chef_lint\nchef_lint:\n\trubocop chef/atc\n\tfoodcritic chef/atc\n\n.PHONY: python_lint\npython_lint:\n\t$(PEP) atc\n\t$(FLAKE) atc\n\t$(FLAKE) tests/\n\n\n# Performs setup, runs the tests, then cleans up.\n# Should be used for automated testing.\n.PHONY: fulltest\nfulltest: testvup test testvdown\n\n\n# Runs the ATC test suite.\n# This can be run manually for quick testing.\n# Requires that the test VMs have been created by `testvup`\n.PHONY: test\ntest:\n\tnosetests -s tests/\n\n\n# Creates vagrant VMs for testing.\n.PHONY: testvup\ntestvup:\n\tcd tests/ && vagrant up ${TESTVMS}\n\n\n# Tears down vagrant VMs.\n.PHONY: testvdown\ntestvdown:\n\tcd tests/ && vagrant destroy -f ${TESTVMS}\n"
        },
        {
          "name": "PATENTS",
          "type": "blob",
          "size": 1.94921875,
          "content": "Additional Grant of Patent Rights Version 2\n\n\"Software\" means the Augmented Traffic Control software distributed by Facebook, Inc.\n\nFacebook, Inc. (\"Facebook\") hereby grants to each recipient of the Software\n(\"you\") a perpetual, worldwide, royalty-free, non-exclusive, irrevocable\n(subject to the termination provision below) license under any Necessary\nClaims, to make, have made, use, sell, offer to sell, import, and otherwise\ntransfer the Software. For avoidance of doubt, no license is granted under\nFacebook’s rights in any patent claims that are infringed by (i) modifications\nto the Software made by you or any third party or (ii) the Software in\ncombination with any software or other technology.\n\nThe license granted hereunder will terminate, automatically and without notice,\nif you (or any of your subsidiaries, corporate affiliates or agents) initiate\ndirectly or indirectly, or take a direct financial interest in, any Patent\nAssertion: (i) against Facebook or any of its subsidiaries or corporate\naffiliates, (ii) against any party if such Patent Assertion arises in whole or\nin part from any software, technology, product or service of Facebook or any of\nits subsidiaries or corporate affiliates, or (iii) against any party relating\nto the Software. Notwithstanding the foregoing, if Facebook or any of its\nsubsidiaries or corporate affiliates files a lawsuit alleging patent\ninfringement against you in the first instance, and you respond by filing a\npatent infringement counterclaim in that lawsuit against that party that is\nunrelated to the Software, the license granted hereunder will not terminate\nunder section (i) of this paragraph due to such counterclaim.\n\nA \"Necessary Claim\" is a claim of a patent owned by Facebook that is\nnecessarily infringed by the Software standing alone.\n\nA \"Patent Assertion\" is any lawsuit or other action alleging direct, indirect,\nor contributory infringement or inducement to infringe any patent, including a\ncross-claim or counterclaim.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.0771484375,
          "content": "# Augmented Traffic Control\n\n[![build-status-image]][travis]\n[![pypi-version]][pypi]\n\n\nFull documentation for the project is available at [http://facebook.github.io/augmented-traffic-control/](http://facebook.github.io/augmented-traffic-control/).\n\n## Overview\n\nAugmented Traffic Control (ATC) is a tool to simulate network conditions. It allows controlling the connection that a device has to the internet. Developers can use `ATC` to test their application across varying network conditions, easily emulating high speed, mobile, and even severely impaired networks.\nAspects of the connection that can be controlled include:\n\n* bandwidth\n* latency\n* packet loss\n* corrupted packets\n* packets ordering\n\nIn order to be able to shape the network traffic, ATC must be running on a device that routes the traffic and sees the real IP address of the device, like your network gateway for instance. This also allows any devices that route through `ATC` to be able to shape their traffic. Traffic can be shaped/unshaped using a web interface allowing any devices with a web browser to use `ATC` without the need for a client application.\n\nATC is made of multiple components that interact together:\n* [`atcd`](atc/atcd): The ATC daemon which is responsible for setting/unsetting traffic shaping. `atcd` exposes a [Thrift](https://thrift.apache.org/) interface to interact with it.\n* [`django-atc-api`](atc/django-atc-api): A [Django](https://www.djangoproject.com/) app based on [Django Rest Framework](http://www.django-rest-framework.org/) that provides a RESTful interface to `atcd`.\n* [`django-atc-demo-ui`](atc/django-atc-demo-ui): A Django app that provides a simple Web UI to use `atc` from a mobile phone.\n* [`django-atc-profile-storage`](atc/django-atc-profile-storage): A Django app that can be used to save shaping profiles, making it easier to re-use them later without manually re-entering those settings.\n\nBy splitting `ATC` in sub-components, it make it easier to hack on it or build on top of it. While `django-atc-demo-ui` is shipped as part of `ATC`'s main repository to allow people to be able to use `ATC` out of the box, by providing a REST API to `atcd`, it makes it relatively easy to interact with `atcd` via the command line and opens the path for the community to be able to build creative command line tools, web UI or mobile apps that interact with `ATC`.\n\n![ATC architecture][atc_architecture]\n\n## Requirements\n\nMost requirements are handled automatically by [pip](https://pip.pypa.io), the packaging system used by ATC, and each `ATC` package may have different requirements and the README.md files of the respective packages should be checked for more details. Anyhow, some requirements apply to the overall codebase:\n\n* Python 2.7: Currently, ATC is only supported on python version 2.7.\n* Django 1.10: Currently, ATC is only supported using django version 1.10.\n\n\n## Installing ATC\n\nThe fact that `ATC` is splitted in multiple packages allows for multiple deployment scenarii. However, deploying all the packages on the same host is the simplest and most likely fitting most use cases.\n\nTo get more details on how to install/configure each packages, please refer to the packages' respective READMEs.\n\n### Packages\n\nThe easiest way to install `ATC` is by using `pip`.\n``` bash\npip install atc_thrift atcd django-atc-api django-atc-demo-ui django-atc-profile-storage\n```\n\n### Django\n\nNow that we have all the packages installed, we need to create a new Django project in which we will use our Django app.\n\n``` bash\ndjango-admin startproject atcui\ncd atcui\n```\n\nNow that we have our django project, we need to configure it to use our apps and we need to tell it how to route to our apps.\n\nOpen `atcui/settings.py` and enable the `ATC` apps by adding to `INSTALLED_APPS`:\n\n``` python\nINSTALLED_APPS = (\n    ...\n    # Django ATC API\n    'rest_framework',\n    'atc_api',\n    # Django ATC Demo UI\n    'bootstrap_themes',\n    'django_static_jquery',\n    'atc_demo_ui',\n    # Django ATC Profile Storage\n    'atc_profile_storage',\n)\n```\n\nNow, open `atcui/urls.py` and enable routing to the `ATC` apps by adding the routes to `urlpatterns`:\n``` python\n...\n...\nfrom django.views.generic.base import RedirectView\nfrom django.conf.urls import include\n\nurlpatterns = [\n    ...\n    # Django ATC API\n    url(r'^api/v1/', include('atc_api.urls')),\n    # Django ATC Demo UI\n    url(r'^atc_demo_ui/', include('atc_demo_ui.urls')),\n    # Django ATC profile storage\n    url(r'^api/v1/profiles/', include('atc_profile_storage.urls')),\n    url(r'^$', RedirectView.as_view(url='/atc_demo_ui/', permanent=False)),\n]\n```\n\nFinally, let's update the Django DB:\n``` bash\npython manage.py migrate\n```\n\n## Running ATC\n\nAll require packages should now be installed and configured. We now need to run the daemon and the UI interface. While we will run `ATC` straight from the command line in this example, you can refer to example [sysvinit](chef/atc/files/default/init.d) and [upstart](chef/atc/templates/default/upstart) scripts.\n\n### atcd\n\n`atcd` modifies network related settings and as such needs to run in privileged mode:\n\n``` bash\nsudo atcd\n```\nSupposing `eth0` is your interface to connect to the internet and `eth1`, your interface to connect to your lan, this should just work. If your setting is slightly different, use the command line arguments `--atcd-wan` and `--atcd-lan` to adapt to your configuration.\n\n### ATC UI\n\nThe UI on the other hand is a standard Django Web app and can be run as a normal user. Make sure you are in the directory that was created when you ran `django-admin startproject atcui` and run:\n\n``` bash\npython manage.py runserver 0.0.0.0:8000\n```\n\nYou should now be able to access the web UI at http://localhost:8000\n\n## ATC Code Structure\n\nATC source code is available under the [atc](atc/) directory, it is currently composed of:\n\n* [atc_thrift](atc/atc_thrift) the thrift interface's library\n* [atcd](atc/atcd) the ATC daemon that runs on the router doing the traffic shaping\n* [django-atc-api](atc/django-atc-api) A django app that provides a RESTful interface to `atcd`\n* [django-atc-demo-ui](atc/django-atc-demo-ui) A django app that provides a simple demo UI leveraging the RESTful API\n* [django-atc-profile-storage](atc/django-atc-profile-storage) A django app that allows saving shaping profiles to DB allowing users to select their favorite profile from a list instead of re-entering all the profile details every time.\n\n\nThe [chef](chef/) directory contains 2 chef cookbooks:\n\n* [atc](chef/atc/) A cookbook to deploy ATC. It also allows to deploy ATC in a Virtual Box VM in order to develop on ATC.\n* [atclient](chef/atcclient) Set up a Linux Desktop VM that can be used to test shaping end to end.\n\n### atcd\n\n`atcd` is the daemon that runs on the router that does the shaping. Interaction with the daemon is done using [thrift](https://thrift.apache.org/). The interface definition can be found in [atc_thrift.thrift](atc/atc_thrift/atc_thrift.thrift).\n\n### atc_thrift\n\n`atc_thrift` defines the thrift interface to communicate with the `atcd` daemon.\n\n### django-atc-api\n\n`django-atc-api` is a django app that provide a REST API to the `atcd` daemon. Web applications, command line tools can use the API in order to shape/unshape traffic.\n\n### django-atc-demo-ui\n\n`django-atc-demo-ui` is a simple Web UI to enable/disable traffic shaping. The UI is mostly written in [React](http://facebook.github.io/react/)\n\n### django-atc-profile-storage\n\n`django-atc-profile-storage` allows saving profiles to DB. A typical use case will be to save a list of predefined/often used shaping settings that you want to be able to accessing in just a few clicks/taps.\n\n## Developing on ATC\n\nTo make ATC development easier, we use Virtual Box and Vagrant to provision and run a VM that will run the ATC daemon and the ATC UI from your git checkout.\n\nInteracting with ATC will only shape the traffic within the VM and not on the host.\n\n### Setting up the environment\n\nNote: vagrant is an easy way to set up a test environment, but virtualization will produce different results than a setup on bare-metal. We recommend using vagrant only for testing/development and using bare-metal for setups which require realistic shaping settings.\n\nYou will need to install VirtualBox, Vagrant and a couple of plugins:\n\n* [VirtualBox](https://www.virtualbox.org/wiki/Downloads)\n* [Vagrant](https://www.vagrantup.com/downloads.html)\n* [Chef DK](https://downloads.chef.io/chef-dk/)\n* Install some vagrant plugins:\n * vagrant plugin install vagrant-berkshelf --plugin-version '>= 2.0.1'\n * vagrant plugin install vagrant-omnibus\n* Clone this repo: git clone git@github.com:facebook/augmented-traffic-control.git atc\n\n### Running ATC\n\nOnce in the repo, go to the `chef/atc` directory and run:\n\n``` bash\nvagrant up trusty\n```\n\nThis will take some time before it completes, once the VM is provision, SSH into it:\n\n``` bash\nvagrant ssh trusty\n```\n\nYou should now be able to access ATC at: http://localhost:8080/\n\n### Using the Sample Profiles\n\nOnce you've got ATC up and running, you can run the script `utils/restore-profiles.sh` to setup the set of default profiles.\n\nThe script needs to be passed a `hostname:port` with the location of your ATC instance:\n\n    utils/restore-profiles.sh localhost:8080\n\nAfter doing this, you should see the 10 sample profiles listed below in your ATC instance:\n\n- `2G - Developing Rural`\n- `2G - Developing Urban`\n- `3G - Average`\n- `3G - Good`\n- `Cable`\n- `DSL`\n- `Edge - Average`\n- `Edge - Good`\n- `Edge - Lossy`\n- `No Connectivity`\n\nNaturally, you cannot improve your natural network speed by selecting a faster profile than your service. For example, selecting the `Cable` profile will not make your network faster if your natural connection speed resembles DSL more closely.\n\n### Hacking on the code\n\nHacking on ATC is done from the host and tested in the VM. In order to reflect the changes, you will need to start the services manually.\n\nBoth `atcd` and `atcui` have their python libraries installed in a *python virtualenv* so you will need to activate the environment in order to be able to run the services.\n\nThe *virtualenv* is installed in */usr/local/atc/venv/bin/activate* .\n\n``` bash\nsource /usr/local/atc/venv/bin/activate\n```\n\n#### Running the daemon\n\nThe `atcd` daemon is running under the root user privileges, all operations below needs to be done as root.\n\nTo run the daemon manually, first make sure it is not running in the background:\n\n``` bash\nservice atcd stop\n```\n\nAnd run the daemon:\n\n``` bash\natcd\n```\n\nOnce you are happy with your changes and you want to test them, you will need to kill the daemon and restart it in order to apply the changes.\n\n#### Running the API/UI\n\nThis is a django project and, when running the django built-in HTTP server, will detect code changes and reload automatically.\n\nTo run the HTTP REST API and UI:\n\n``` bash\ncd /var/django && python manage.py runserver 0.0.0.0:8000\n```\n\n[atc_architecture]: https://facebook.github.io/augmented-traffic-control/images/atc_overview.png\n[build-status-image]: https://travis-ci.org/facebook/augmented-traffic-control.svg?branch=master\n[travis]: https://travis-ci.org/facebook/augmented-traffic-control?branch=master\n[pypi-version]: https://pypip.in/version/atcd/badge.svg\n[pypi]: https://pypi.python.org/pypi/atcd\n\n"
        },
        {
          "name": "Setup.md",
          "type": "blob",
          "size": 2.6962890625,
          "content": "Setup\n========\n\nRequirements\n--------\n\n### Linux\n\n`ATC` makes use of [`iproute2`](http://www.linuxfoundation.org/collaborate/workgroups/networking/iproute2) which is only\nsupported on platforms running a linux kernel.\n\n### Network Gateway\n\n`ATC` is intended to be deployed to a network gateway. Normally this would mean that the machine `ATC` runs on would\nrequire **2 network interfaces**, one for WAN and one for LAN. However it is possible to simulate this setup by making\nuse of more advanced [virtual interfaces](https://wiki.archlinux.org/index.php/VLAN) and routing options on the host.\n\n### `python 2.7` and `pip`\n\n`ATC` requires `python 2.7` to work correctly, complete with `pip`. \n\n### virtualenv\n\nAlthough not strictly required, use of a [virtualenv](https://virtualenv.pypa.io/en/latest/) is recommended.\n\nTo setup a new virtualenv in `~/atc/venv`:\n\n```shell\nmkdir -p ~/atc\nvirtualenv ~/atc/venv\nsource ~/atc/venv/bin/activate\n```\n\nOn production environments, you probably want to put your atc installation somewhere besides\n`~/atc`.\n\nATC Daemon\n--------\n\nInstallation:\n\n```shell\npip install atcd\n```\n\nRunning `atcd` (as root):\n\n```shell\natcd --atcd-lan eth0 --atcd-wan eth1\n```\n\nATC Interface\n--------\n\nInstall the ATC API and UI packages:\n\n```shell\npip install django-atc-api django-atc-demo-ui django-atc-profile-storage\n```\n\n### Django Webapp Setup\n\nATC's Interfaces are written with [Django](https://www.djangoproject.com/), so they require a\n`django` webapp to work correctly.\n\nTo create and setup this webapp you will need the `django` python package:\n\n```shell\npip install django\n```\n\nTo create a new Django webapp:\n\n```shell\ncd ~/atc\ndjango-admin startproject atcui\n```\n\nOnce you have a django webapp setup, you can enable the ATC apps by adding them to the `INSTALLED_APPS` list in\ndjango's `settings.py`:\n\n```python\nINSTALLED_APPS = (\n    ...\n    # Django ATC API\n    'rest_framework',\n    'atc_api',\n    # Django ATC Demo UI\n    'bootstrap_themes',\n    'django_static_jquery',\n    'atc_demo_ui',\n    # Django ATC Profile Storage\n    'atc_profile_storage',\n)\n```\n\nOnce this is done, you can add the ATC urls to the django webapp's `urls.py`:\n\n```python\nfrom django.views.generic.base import RedirectView\n\n...\n\nurlpatterns = patterns('',\n    ...\n    # Django ATC API\n    url(r'^api/v1/', include('atc_api.urls')),\n    # Django ATC Demo UI\n    url(r'^atc_demo_ui/', include('atc_demo_ui.urls')),\n    # Django ATC profile storage\n    url(r'^api/v1/profiles/', include('atc_profile_storage.urls')),\n    url(r'^$', RedirectView.as_view(url='/atc_demo_ui/', permanent=False)),\n)\n```\n\nMigrate the django database:\n\n```shell\npython manage.py migrate\n```\n\nAnd finally, run the django server:\n\n```shell\npython manage.py runserver 0.0.0.0:8080\n```\n"
        },
        {
          "name": "atc",
          "type": "tree",
          "content": null
        },
        {
          "name": "chef",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.064453125,
          "content": "[flake8]\nexclude = migrations,settings.py,*/atc_thrift/atc_thrift\n"
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}