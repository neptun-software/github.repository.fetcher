{
  "metadata": {
    "timestamp": 1736560009223,
    "page": 817,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "antgroup/echomimic",
      "stars": 3395,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.060546875,
          "content": "ffmpeg-4.4-amd64-static\npretrained_weights\noutput\n__pycache__\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.08984375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.3505859375,
          "content": "<h1 align='center'>EchoMimic: Lifelike Audio-Driven Portrait Animations through Editable Landmark Conditioning</h1>\n\n<div align='center'>\n    <a href='https://github.com/yuange250' target='_blank'>Zhiyuan Chen</a><sup>*</sup>&emsp;\n    <a href='https://github.com/JoeFannie' target='_blank'>Jiajiong Cao</a><sup>*</sup>&emsp;\n    <a href='https://github.com/octavianChen' target='_blank'>Zhiquan Chen</a><sup></sup>&emsp;\n    <a href='https://lymhust.github.io/' target='_blank'>Yuming Li</a><sup></sup>&emsp;\n    <a href='https://github.com/' target='_blank'>Chenguang Ma</a><sup></sup>\n</div>\n<div align='center'>\n    *Equal Contribution.\n</div>\n\n<div align='center'>\nTerminal Technology Department, Alipay, Ant Group.\n</div>\n<br>\n<div align='center'>\n    <a href='https://antgroup.github.io/ai/echomimic/'><img src='https://img.shields.io/badge/Project-Page-blue'></a>\n    <a href='https://huggingface.co/BadToBest/EchoMimic'><img src='https://img.shields.io/badge/%F0%9F%A4%97%20HuggingFace-Model-yellow'></a>\n    <a href='https://huggingface.co/spaces/BadToBest/EchoMimic'><img src='https://img.shields.io/badge/%F0%9F%A4%97%20HuggingFace-Demo-yellow'></a>\n    <a href='https://www.modelscope.cn/models/BadToBest/EchoMimic'><img src='https://img.shields.io/badge/ModelScope-Model-purple'></a>\n    <a href='https://www.modelscope.cn/studios/BadToBest/BadToBest'><img src='https://img.shields.io/badge/ModelScope-Demo-purple'></a>\n    <a href='https://arxiv.org/abs/2407.08136'><img src='https://img.shields.io/badge/Paper-Arxiv-red'></a>\n</div>\n\n## &#x1F680; EchoMimic Series\n* EchoMimicV1: Lifelike Audio-Driven Portrait Animations through Editable Landmark Conditioning. [GitHub](https://github.com/antgroup/echomimic)\n* EchoMimicV2: Towards Striking, Simplified, and Semi-Body Human Animation. [GitHub](https://github.com/antgroup/echomimic_v2)\n\n## &#x1F4E3; Updates\n* [2024.12.10] 🔥 EchoMimic is accepted by AAAI 2025.\n* [2024.11.21] 🔥🔥🔥 We release our [EchoMimicV2](https://github.com/antgroup/echomimic_v2) codes and models.\n* [2024.08.02] 🔥 EchoMimic is now available on [huggingface](https://huggingface.co/spaces/BadToBest/EchoMimic) with A100 GPU. Thanks Wenmeng Zhou@ModelScope.\n* [2024.07.25] 🔥🔥🔥 Accelerated models and pipe on **Audio Driven** are released. The inference speed can be improved by **10x** (from ~7mins/240frames to ~50s/240frames on V100 GPU)\n* [2024.07.23] 🔥 EchoMimic gradio demo on [modelscope](https://www.modelscope.cn/studios/BadToBest/BadToBest) is ready.\n* [2024.07.23] 🔥 EchoMimic gradio demo on [huggingface](https://huggingface.co/spaces/fffiloni/EchoMimic) is ready. Thanks Sylvain Filoni@fffiloni.\n* [2024.07.17] 🔥🔥🔥 Accelerated models and pipe on **Audio + Selected Landmarks** are released. The inference speed can be improved by **10x** (from ~7mins/240frames to ~50s/240frames on V100 GPU)\n* [2024.07.14] 🔥 [ComfyUI](https://github.com/smthemex/ComfyUI_EchoMimic) is now available. Thanks @smthemex for the contribution. \n* [2024.07.13] 🔥 Thanks [NewGenAI](https://www.youtube.com/@StableAIHub) for the [video installation tutorial](https://www.youtube.com/watch?v=8R0lTIY7tfI).\n* [2024.07.13] 🔥 We release our pose&audio driven codes and models.\n* [2024.07.12] 🔥 WebUI and GradioUI versions are released. We thank @greengerong @Robin021 and @O-O1024 for their contributions.\n* [2024.07.12] 🔥 Our [paper](https://arxiv.org/abs/2407.08136) is in public on arxiv.\n* [2024.07.09] 🔥 We release our audio driven codes and models.\n\n## &#x1F305; Gallery\n### Audio Driven (Sing)\n\n<table class=\"center\">\n    \n<tr>\n    <td width=30% style=\"border: none\">\n        <video controls loop src=\"https://github.com/antgroup/echomimic/assets/11451501/d014d921-9f94-4640-97ad-035b00effbfe\" muted=\"false\"></video>\n    </td>\n    <td width=30% style=\"border: none\">\n        <video controls loop src=\"https://github.com/antgroup/echomimic/assets/11451501/877603a5-a4f9-4486-a19f-8888422daf78\" muted=\"false\"></video>\n    </td>\n    <td width=30% style=\"border: none\">\n        <video controls loop src=\"https://github.com/antgroup/echomimic/assets/11451501/e0cb5afb-40a6-4365-84f8-cb2834c4cfe7\" muted=\"false\"></video>\n    </td>\n</tr>\n\n</table>\n\n### Audio Driven (English)\n\n<table class=\"center\">\n    \n<tr>\n    <td width=30% style=\"border: none\">\n        <video controls loop src=\"https://github.com/antgroup/echomimic/assets/11451501/386982cd-3ff8-470d-a6d9-b621e112f8a5\" muted=\"false\"></video>\n    </td>\n    <td width=30% style=\"border: none\">\n        <video controls loop src=\"https://github.com/antgroup/echomimic/assets/11451501/5c60bb91-1776-434e-a720-8857a00b1501\" muted=\"false\"></video>\n    </td>\n    <td width=30% style=\"border: none\">\n        <video controls loop src=\"https://github.com/antgroup/echomimic/assets/11451501/1f15adc5-0f33-4afa-b96a-2011886a4a06\" muted=\"false\"></video>\n    </td>\n</tr>\n\n</table>\n\n### Audio Driven (Chinese)\n\n<table class=\"center\">\n    \n<tr>\n    <td width=30% style=\"border: none\">\n        <video controls loop src=\"https://github.com/antgroup/echomimic/assets/11451501/a8092f9a-a5dc-4cd6-95be-1831afaccf00\" muted=\"false\"></video>\n    </td>\n    <td width=30% style=\"border: none\">\n        <video controls loop src=\"https://github.com/antgroup/echomimic/assets/11451501/c8b5c59f-0483-42ef-b3ee-4cffae6c7a52\" muted=\"false\"></video>\n    </td>\n    <td width=30% style=\"border: none\">\n        <video controls loop src=\"https://github.com/antgroup/echomimic/assets/11451501/532a3e60-2bac-4039-a06c-ff6bf06cb4a4\" muted=\"false\"></video>\n    </td>\n</tr>\n\n</table>\n\n### Landmark Driven\n\n<table class=\"center\">\n    \n<tr>\n    <td width=30% style=\"border: none\">\n        <video controls loop src=\"https://github.com/antgroup/echomimic/assets/11451501/1da6c46f-4532-4375-a0dc-0a4d6fd30a39\" muted=\"false\"></video>\n    </td>\n    <td width=30% style=\"border: none\">\n        <video controls loop src=\"https://github.com/antgroup/echomimic/assets/11451501/d4f4d5c1-e228-463a-b383-27fb90ed6172\" muted=\"false\"></video>\n    </td>\n    <td width=30% style=\"border: none\">\n        <video controls loop src=\"https://github.com/antgroup/echomimic/assets/11451501/18bd2c93-319e-4d1c-8255-3f02ba717475\" muted=\"false\"></video>\n    </td>\n</tr>\n\n</table>\n\n### Audio + Selected Landmark Driven\n\n<table class=\"center\">\n    \n<tr>\n    <td width=30% style=\"border: none\">\n        <video controls loop src=\"https://github.com/antgroup/echomimic/assets/11451501/4a29d735-ec1b-474d-b843-3ff0bdf85f55\" muted=\"false\"></video>\n    </td>\n    <td width=30% style=\"border: none\">\n        <video controls loop src=\"https://github.com/antgroup/echomimic/assets/11451501/b994c8f5-8dae-4dd8-870f-962b50dc091f\" muted=\"false\"></video>\n    </td>\n    <td width=30% style=\"border: none\">\n        <video controls loop src=\"https://github.com/antgroup/echomimic/assets/11451501/955c1d51-07b2-494d-ab93-895b9c43b896\" muted=\"false\"></video>\n    </td>\n</tr>\n\n</table>\n\n**（Some demo images above are sourced from image websites. If there is any infringement, we will immediately remove them and apologize.）**\n\n## ⚒️ Installation\n\n### Download the Codes\n\n```bash\n  git clone https://github.com/BadToBest/EchoMimic\n  cd EchoMimic\n```\n\n### Python Environment Setup\n\n- Tested System Environment: Centos 7.2/Ubuntu 22.04, Cuda >= 11.7\n- Tested GPUs: A100(80G) / RTX4090D (24G) / V100(16G)\n- Tested Python Version: 3.8 / 3.10 / 3.11\n\nCreate conda environment (Recommended):\n\n```bash\n  conda create -n echomimic python=3.8\n  conda activate echomimic\n```\n\nInstall packages with `pip`\n```bash\n  pip install -r requirements.txt\n```\n\n### Download ffmpeg-static\nDownload and decompress [ffmpeg-static](https://www.johnvansickle.com/ffmpeg/old-releases/ffmpeg-4.4-amd64-static.tar.xz), then\n```\nexport FFMPEG_PATH=/path/to/ffmpeg-4.4-amd64-static\n```\n\n### Download pretrained weights\n\n```shell\ngit lfs install\ngit clone https://huggingface.co/BadToBest/EchoMimic pretrained_weights\n```\n\nThe **pretrained_weights** is organized as follows.\n\n```\n./pretrained_weights/\n├── denoising_unet.pth\n├── reference_unet.pth\n├── motion_module.pth\n├── face_locator.pth\n├── sd-vae-ft-mse\n│   └── ...\n├── sd-image-variations-diffusers\n│   └── ...\n└── audio_processor\n    └── whisper_tiny.pt\n```\n\nIn which **denoising_unet.pth** / **reference_unet.pth** / **motion_module.pth** / **face_locator.pth** are the main checkpoints of **EchoMimic**. Other models in this hub can be also downloaded from it's original hub, thanks to their brilliant works:\n- [sd-vae-ft-mse](https://huggingface.co/stabilityai/sd-vae-ft-mse)\n- [sd-image-variations-diffusers](https://huggingface.co/lambdalabs/sd-image-variations-diffusers)\n- [audio_processor(whisper)](https://openaipublic.azureedge.net/main/whisper/models/65147644a518d12f04e32d6f3b26facc3f8dd46e5390956a9424a650c0ce22b9/tiny.pt)\n\n### Audio-Drived Algo Inference \nRun the python inference script:\n\n```bash\n  python -u infer_audio2vid.py\n  python -u infer_audio2vid_pose.py\n```\n\n### Audio-Drived Algo Inference On Your Own Cases \n\nEdit the inference config file **./configs/prompts/animation.yaml**, and add your own case:\n\n```bash\ntest_cases:\n  \"path/to/your/image\":\n    - \"path/to/your/audio\"\n```\n\nThe run the python inference script:\n```bash\n  python -u infer_audio2vid.py\n```\n\n### Motion Alignment between Ref. Img. and Driven Vid.\n\n(Firstly download the checkpoints with '_pose.pth' postfix from huggingface)\n\nEdit driver_video and ref_image to your path in demo_motion_sync.py, then run\n```bash\n  python -u demo_motion_sync.py\n```\n\n### Audio&Pose-Drived Algo Inference\nEdit ./configs/prompts/animation_pose.yaml, then run\n```bash\n  python -u infer_audio2vid_pose.py\n```\n\n### Pose-Drived Algo Inference\nSet draw_mouse=True in line 135 of infer_audio2vid_pose.py. Edit ./configs/prompts/animation_pose.yaml, then run\n```bash\n  python -u infer_audio2vid_pose.py\n```\n\n### Run the Gradio UI\n\nThanks to the contribution from @Robin021:\n\n```bash\n\npython -u webgui.py --server_port=3000\n\n```\n\n## 📝 Release Plans\n\n|  Status  | Milestone                                                                | ETA |\n|:--------:|:-------------------------------------------------------------------------|:--:|\n|    ✅    | The inference source code of the Audio-Driven algo meet everyone on GitHub   | 9th July, 2024 |\n|    ✅    | Pretrained models trained on English and Mandarin Chinese to be released | 9th July, 2024 |\n|    ✅    | The inference source code of the Pose-Driven algo meet everyone on GitHub   | 13th July, 2024 |\n|    ✅    | Pretrained models with better pose control to be released                | 13th July, 2024 |\n|    ✅    | Accelerated models to be released                                        | 17th July, 2024 |\n|    🚀    | Pretrained models with better sing performance to be released            | TBD |\n|    🚀    | Large-Scale and High-resolution Chinese-Based Talking Head Dataset       | TBD |\n\n## ⚖️ Disclaimer\nThis project is intended for academic research, and we explicitly disclaim any responsibility for user-generated content. Users are solely liable for their actions while using the generative model. The project contributors have no legal affiliation with, nor accountability for, users' behaviors. It is imperative to use the generative model responsibly, adhering to both ethical and legal standards.\n\n## 🙏🏻 Acknowledgements\n\nWe would like to thank the contributors to the [AnimateDiff](https://github.com/guoyww/AnimateDiff), [Moore-AnimateAnyone](https://github.com/MooreThreads/Moore-AnimateAnyone) and [MuseTalk](https://github.com/TMElyralab/MuseTalk) repositories, for their open research and exploration. \n\nWe are also grateful to [V-Express](https://github.com/tencent-ailab/V-Express) and [hallo](https://github.com/fudan-generative-vision/hallo) for their outstanding work in the area of diffusion-based talking heads.\n\nIf we missed any open-source projects or related articles, we would like to complement the acknowledgement of this specific work immediately.\n\n## 📒 Citation\n\nIf you find our work useful for your research, please consider citing the paper :\n\n```\n@misc{chen2024echomimic,\n  title={EchoMimic: Lifelike Audio-Driven Portrait Animations through Editable Landmark Conditioning},\n  author={Zhiyuan Chen, Jiajiong Cao, Zhiquan Chen, Yuming Li, Chenguang Ma},\n  year={2024},\n  eprint={2407.08136},\n  archivePrefix={arXiv},\n  primaryClass={cs.CV}\n}\n```\n\n## 🌟 Star History\n[![Star History Chart](https://api.star-history.com/svg?repos=antgroup/echomimic&type=Date)](https://star-history.com/#antgroup/echomimic&Date)\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo_motion_sync.py",
          "type": "blob",
          "size": 5.94921875,
          "content": "from src.utils.mp_utils  import LMKExtractor\nfrom src.utils.draw_utils import FaceMeshVisualizer\nfrom src.utils.img_utils import pil_to_cv2, cv2_to_pil, center_crop_cv2, pils_from_video, save_videos_from_pils, save_video_from_cv2_list\nfrom PIL import Image\nimport cv2\nfrom IPython import embed\nimport numpy as np\nimport copy\nfrom src.utils.motion_utils import motion_sync\nimport pathlib\nimport torch\nimport pickle\nfrom glob import glob\nimport os\n\nvis = FaceMeshVisualizer(draw_iris=False, draw_mouse=True, draw_eye=True, draw_nose=True, draw_eyebrow=True, draw_pupil=True)\n\nimsize = (512, 512)\nvisualization = True\ndriver_video = \"./assets/driven_videos/a.mp4\"\n# driver_videos = glob(\"/nas2/luoque.lym/evaluation/test_datasets/gt_data/OurDataset/*.mp4\")\nref_image = './assets/test_imgs/d.png'\n# ref_image = 'panda.png'\n\nlmk_extractor = LMKExtractor()\n\ninput_frames_cv2 = [cv2.resize(center_crop_cv2(pil_to_cv2(i)), imsize) for i in pils_from_video(driver_video)]\nref_frame =cv2.resize(cv2.imread(ref_image), (512, 512))\nref_det = lmk_extractor(ref_frame)\n# print(ref_det)\n\nsequence_driver_det = []\ntry: \n    for frame in input_frames_cv2:\n        result = lmk_extractor(frame)\n        assert result is not None, \"{}, bad video, face not detected\".format(driver_video)\n        sequence_driver_det.append(result)\nexcept:\n    print(\"face detection failed\")\n    exit()\nprint(len(sequence_driver_det))\n\nif visualization:\n    pose_frames_driver = [vis.draw_landmarks((512, 512), i[\"lmks\"], normed=True) for i in sequence_driver_det]\n    poses_add_driver = [(i * 0.5 + j * 0.5).clip(0,255).astype(np.uint8)  for i, j in zip(input_frames_cv2, pose_frames_driver)]\n\nsave_dir = './{}'.format(ref_image.split('/')[-1].replace('.png', ''))\nos.makedirs(save_dir, exist_ok=True)\n\nsequence_det_ms = motion_sync(sequence_driver_det, ref_det)\nfor i in range(len(sequence_det_ms)):\n    with open('{}/{}.pkl'.format(save_dir, i), 'wb') as file:\n        pickle.dump(sequence_det_ms[i], file)\nif visualization:\n    pose_frames = [vis.draw_landmarks((512, 512), i, normed=False) for i in sequence_det_ms]\n    poses_add = [(i * 0.5 + ref_frame * 0.5).clip(0,255).astype(np.uint8) for i in pose_frames]\n\n# sequence_det_ms = motion_sync(sequence_driver_det, ref_det, per_landmark_align=False)\n# for i in range(len(sequence_det_ms)):\n#     tmp = {}\n#     tmp[\"lmks\"] = sequence_det_ms[i]\n#     with open('{}_v2/{}.pkl'.format(save_dir, i), 'wb') as file:\n#         pickle.dump(tmp, file)\n# pose_frames_wo_lmkalign = [vis.draw_landmarks((512, 512), i, normed=False) for i in sequence_det_ms]\n# poses_add_wo_lmkalign = [(i * 0.5 + ref_frame * 0.5).clip(0,255).astype(np.uint8) for i in pose_frames_wo_lmkalign]\n\nposes_cat = [np.concatenate([i, j], axis=1) for i, j in zip(poses_add_driver, poses_add)]\n\nsave_video_from_cv2_list(poses_cat, \"./vis_example.mp4\", fps=24.0)\n\n\n# for ref_image in ref_images[:1]:\n# # for driver_video in driver_videos:\n#     # ref_image = \"./samples/007.png\"\n#     # save_dir = '/nas2/jiajiong.caojiajio/data/test_pose/OurDataset/{}'.format(driver_video.split('/')[-1].replace('.mp4', ''))\n#     save_dir = './{}'.format(ref_image.split('/')[-1].replace('.png', ''))\n#     os.makedirs(save_dir+'_v1', exist_ok=True)\n#     os.makedirs(save_dir+'_v2', exist_ok=True)\n#     #\"./samples/hedra_003.png\"\n\n#     #\"./samples/video_temp_fix.mov\"\n#     input_frames_cv2 = [cv2.resize(center_crop_cv2(pil_to_cv2(i)), imsize) for i in pils_from_video(driver_video)]\n#     # input_frames_cv2 = [cv2.resize(pil_to_cv2(i), imsize) for i in pils_from_video(driver_video)]\n#     lmk_extractor = LMKExtractor()\n\n#     ref_frame =cv2.resize(cv2.imread(ref_image), (512, 512))\n#     ref_det = lmk_extractor(ref_frame)\n\n#     sequence_driver_det = []\n#     try: \n#         for frame in input_frames_cv2:\n#             result = lmk_extractor(frame)\n#             assert result is not None, \"{}, bad video, face not detected\".format(driver_video)\n#             sequence_driver_det.append(result)\n#     except:\n#         continue\n#     print(len(sequence_driver_det))\n\n#     # os.makedirs(save_dir, exist_ok=True)\n#     # for i in range(len(sequence_driver_det)):\n#     #     with open('{}/{}.pkl'.format(save_dir, i), 'wb') as file:\n#     #         pickle.dump(sequence_driver_det[i][\"lmks\"] * imsize[0], file)\n\n\n\n#         #[vis.draw_landmarks(imsize, i[\"lmks\"], normed=True, white=True) for i in det_results]\n\n#     pose_frames_driver = [vis.draw_landmarks((512, 512), i[\"lmks\"], normed=True) for i in sequence_driver_det]\n#     poses_add_driver = [(i * 0.5 + j * 0.5).clip(0,255).astype(np.uint8)  for i, j in zip(input_frames_cv2, pose_frames_driver)]\n\n#     sequence_det_ms = motion_sync(sequence_driver_det, ref_det)\n#     for i in range(len(sequence_det_ms)):\n#         tmp = {}\n#         tmp[\"lmks\"] = sequence_det_ms[i]\n#         with open('{}_v1/{}.pkl'.format(save_dir, i), 'wb') as file:\n#             pickle.dump(tmp, file)\n#     pose_frames = [vis.draw_landmarks((512, 512), i, normed=False) for i in sequence_det_ms]\n#     poses_add = [(i * 0.5 + ref_frame * 0.5).clip(0,255).astype(np.uint8) for i in pose_frames]\n\n#     sequence_det_ms = motion_sync(sequence_driver_det, ref_det, per_landmark_align=False)\n#     for i in range(len(sequence_det_ms)):\n#         tmp = {}\n#         tmp[\"lmks\"] = sequence_det_ms[i]\n#         with open('{}_v2/{}.pkl'.format(save_dir, i), 'wb') as file:\n#             pickle.dump(tmp, file)\n#     pose_frames_wo_lmkalign = [vis.draw_landmarks((512, 512), i, normed=False) for i in sequence_det_ms]\n#     poses_add_wo_lmkalign = [(i * 0.5 + ref_frame * 0.5).clip(0,255).astype(np.uint8) for i in pose_frames_wo_lmkalign]\n\n#     poses_cat = [np.concatenate([i, j, k], axis=1) for i, j, k in zip(poses_add_driver, poses_add_wo_lmkalign, poses_add)]\n\n#     save_video_from_cv2_list(poses_cat, \"./output/example2.mp4\", fps=24.0)\n#     # exit()\n#     #embed()\n\n#     #poses_cat = [(i * 0.5 + j * 0.5).clip(0,255).astype(np.uint8)  for i, j in zip(input_frames_cv2, pose_frames)]\n#     #save_videos_from_pils([cv2_to_pil(i) for i in poses_cat], \"./output/pose_cat.mp4\", fps=24)"
        },
        {
          "name": "infer_audio2vid.py",
          "type": "blob",
          "size": 9.5966796875,
          "content": "#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n'''\n@Project ：EchoMimic\n@File    ：audio2vid.py\n@Author  ：juzhen.czy\n@Date    ：2024/3/4 17:43 \n'''\nimport argparse\nimport os\n\nimport random\nimport platform\nimport subprocess\nfrom datetime import datetime\nfrom pathlib import Path\n\nimport cv2\nimport numpy as np\nimport torch\nfrom diffusers import AutoencoderKL, DDIMScheduler\nfrom omegaconf import OmegaConf\nfrom PIL import Image\n\nfrom src.models.unet_2d_condition import UNet2DConditionModel\nfrom src.models.unet_3d_echo import EchoUNet3DConditionModel\nfrom src.models.whisper.audio2feature import load_audio_model\nfrom src.pipelines.pipeline_echo_mimic import Audio2VideoPipeline\nfrom src.utils.util import save_videos_grid, crop_and_pad\nfrom src.models.face_locator import FaceLocator\nfrom moviepy.editor import VideoFileClip, AudioFileClip\nfrom facenet_pytorch import MTCNN\n\nffmpeg_path = os.getenv('FFMPEG_PATH')\nif ffmpeg_path is None and platform.system() in ['Linux', 'Darwin']:\n    try:\n        result = subprocess.run(['which', 'ffmpeg'], capture_output=True, text=True)\n        if result.returncode == 0:\n            ffmpeg_path = result.stdout.strip()\n            print(f\"FFmpeg is installed at: {ffmpeg_path}\")\n        else:\n            print(\"FFmpeg is not installed. Please download ffmpeg-static and export to FFMPEG_PATH.\")\n            print(\"For example: export FFMPEG_PATH=/musetalk/ffmpeg-4.4-amd64-static\")\n    except Exception as e:\n        pass\n\nif ffmpeg_path is not None and ffmpeg_path not in os.getenv('PATH'):\n    print(\"Adding FFMPEG_PATH to PATH\")\n    os.environ[\"PATH\"] = f\"{ffmpeg_path}:{os.environ['PATH']}\"\n\ndef parse_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--config\", type=str, default=\"./configs/prompts/animation.yaml\")\n    parser.add_argument(\"-W\", type=int, default=512)\n    parser.add_argument(\"-H\", type=int, default=512)\n    parser.add_argument(\"-L\", type=int, default=1200)\n    parser.add_argument(\"--seed\", type=int, default=420)\n    parser.add_argument(\"--facemusk_dilation_ratio\", type=float, default=0.1)\n    parser.add_argument(\"--facecrop_dilation_ratio\", type=float, default=0.5)\n\n    parser.add_argument(\"--context_frames\", type=int, default=12)\n    parser.add_argument(\"--context_overlap\", type=int, default=3)\n\n    parser.add_argument(\"--cfg\", type=float, default=2.5)\n    parser.add_argument(\"--steps\", type=int, default=30)\n    parser.add_argument(\"--sample_rate\", type=int, default=16000)\n    parser.add_argument(\"--fps\", type=int, default=24)\n    parser.add_argument(\"--device\", type=str, default=\"cuda\")\n\n    args = parser.parse_args()\n\n    return args\n\ndef select_face(det_bboxes, probs):\n    ## max face from faces that the prob is above 0.8\n    ## box: xyxy\n    if det_bboxes is None or probs is None:\n        return None\n    filtered_bboxes = []\n    for bbox_i in range(len(det_bboxes)):\n        if probs[bbox_i] > 0.8:\n            filtered_bboxes.append(det_bboxes[bbox_i])\n    if len(filtered_bboxes) == 0:\n        return None\n\n    sorted_bboxes = sorted(filtered_bboxes, key=lambda x:(x[3]-x[1]) * (x[2] - x[0]), reverse=True)\n    return sorted_bboxes[0]\n\n\n\ndef main():\n    args = parse_args()\n\n    config = OmegaConf.load(args.config)\n    if config.weight_dtype == \"fp16\":\n        weight_dtype = torch.float16\n    else:\n        weight_dtype = torch.float32\n\n    device = args.device\n    if device.__contains__(\"cuda\") and not torch.cuda.is_available():\n        device = \"cpu\"\n\n    inference_config_path = config.inference_config\n    infer_config = OmegaConf.load(inference_config_path)\n\n\n    ############# model_init started #############\n\n    ## vae init\n    vae = AutoencoderKL.from_pretrained(\n        config.pretrained_vae_path,\n    ).to(\"cuda\", dtype=weight_dtype)\n\n    ## reference net init\n    reference_unet = UNet2DConditionModel.from_pretrained(\n        config.pretrained_base_model_path,\n        subfolder=\"unet\",\n    ).to(dtype=weight_dtype, device=device)\n    reference_unet.load_state_dict(\n        torch.load(config.reference_unet_path, map_location=\"cpu\"),\n    )\n\n    ## denoising net init\n    if os.path.exists(config.motion_module_path):\n        ### stage1 + stage2\n        denoising_unet = EchoUNet3DConditionModel.from_pretrained_2d(\n            config.pretrained_base_model_path,\n            config.motion_module_path,\n            subfolder=\"unet\",\n            unet_additional_kwargs=infer_config.unet_additional_kwargs,\n        ).to(dtype=weight_dtype, device=device)\n    else:\n        ### only stage1\n        denoising_unet = EchoUNet3DConditionModel.from_pretrained_2d(\n            config.pretrained_base_model_path,\n            \"\",\n            subfolder=\"unet\",\n            unet_additional_kwargs={\n                \"use_motion_module\": False,\n                \"unet_use_temporal_attention\": False,\n                \"cross_attention_dim\": infer_config.unet_additional_kwargs.cross_attention_dim\n            }\n        ).to(dtype=weight_dtype, device=device)\n    denoising_unet.load_state_dict(\n        torch.load(config.denoising_unet_path, map_location=\"cpu\"),\n        strict=False\n    )\n\n    ## face locator init\n    face_locator = FaceLocator(320, conditioning_channels=1, block_out_channels=(16, 32, 96, 256)).to(\n        dtype=weight_dtype, device=\"cuda\"\n    )\n    face_locator.load_state_dict(torch.load(config.face_locator_path))\n\n    ### load audio processor params\n    audio_processor = load_audio_model(model_path=config.audio_model_path, device=device)\n\n    ### load face detector params\n    face_detector = MTCNN(image_size=320, margin=0, min_face_size=20, thresholds=[0.6, 0.7, 0.7], factor=0.709, post_process=True, device=device)\n\n    ############# model_init finished #############\n\n    width, height = args.W, args.H\n    sched_kwargs = OmegaConf.to_container(infer_config.noise_scheduler_kwargs)\n    scheduler = DDIMScheduler(**sched_kwargs)\n\n    pipe = Audio2VideoPipeline(\n        vae=vae,\n        reference_unet=reference_unet,\n        denoising_unet=denoising_unet,\n        audio_guider=audio_processor,\n        face_locator=face_locator,\n        scheduler=scheduler,\n    )\n    pipe = pipe.to(\"cuda\", dtype=weight_dtype)\n\n    date_str = datetime.now().strftime(\"%Y%m%d\")\n    time_str = datetime.now().strftime(\"%H%M\")\n    save_dir_name = f\"{time_str}--seed_{args.seed}-{args.W}x{args.H}\"\n    save_dir = Path(f\"output/{date_str}/{save_dir_name}\")\n    save_dir.mkdir(exist_ok=True, parents=True)\n\n    for ref_image_path in config[\"test_cases\"].keys():\n        for audio_path in config[\"test_cases\"][ref_image_path]:\n\n            if args.seed is not None and args.seed > -1:\n                generator = torch.manual_seed(args.seed)\n            else:\n                generator = torch.manual_seed(random.randint(100, 1000000))\n\n            ref_name = Path(ref_image_path).stem\n            audio_name = Path(audio_path).stem\n            final_fps = args.fps\n\n            #### face musk prepare\n            face_img = cv2.imread(ref_image_path)\n            face_mask = np.zeros((face_img.shape[0], face_img.shape[1])).astype('uint8')\n\n            det_bboxes, probs = face_detector.detect(face_img)\n            select_bbox = select_face(det_bboxes, probs)\n            if select_bbox is None:\n                face_mask[:, :] = 255\n            else:\n                xyxy = select_bbox[:4]\n                xyxy = np.round(xyxy).astype('int')\n                rb, re, cb, ce = xyxy[1], xyxy[3], xyxy[0], xyxy[2]\n                r_pad = int((re - rb) * args.facemusk_dilation_ratio)\n                c_pad = int((ce - cb) * args.facemusk_dilation_ratio)\n                face_mask[rb - r_pad : re + r_pad, cb - c_pad : ce + c_pad] = 255\n\n                #### face crop\n                r_pad_crop = int((re - rb) * args.facecrop_dilation_ratio)\n                c_pad_crop = int((ce - cb) * args.facecrop_dilation_ratio)\n                crop_rect = [max(0, cb - c_pad_crop), max(0, rb - r_pad_crop), min(ce + c_pad_crop, face_img.shape[1]), min(re + r_pad_crop, face_img.shape[0])]\n                print(crop_rect)\n                face_img, _ = crop_and_pad(face_img, crop_rect)\n                face_mask, _ = crop_and_pad(face_mask, crop_rect)\n                face_img = cv2.resize(face_img, (args.W, args.H))\n                face_mask = cv2.resize(face_mask, (args.W, args.H))\n\n            ref_image_pil = Image.fromarray(face_img[:, :, [2, 1, 0]])\n            face_mask_tensor = torch.Tensor(face_mask).to(dtype=weight_dtype, device=\"cuda\").unsqueeze(0).unsqueeze(0).unsqueeze(0) / 255.0\n\n            video = pipe(\n                ref_image_pil,\n                audio_path,\n                face_mask_tensor,\n                width,\n                height,\n                args.L,\n                args.steps,\n                args.cfg,\n                generator=generator,\n                audio_sample_rate=args.sample_rate,\n                context_frames=args.context_frames,\n                fps=final_fps,\n                context_overlap=args.context_overlap\n            ).videos\n\n            video = video\n            save_videos_grid(\n                video,\n                f\"{save_dir}/{ref_name}_{audio_name}_{args.H}x{args.W}_{int(args.cfg)}_{time_str}.mp4\",\n                n_rows=1,\n                fps=final_fps,\n            )\n\n            video_clip = VideoFileClip(f\"{save_dir}/{ref_name}_{audio_name}_{args.H}x{args.W}_{int(args.cfg)}_{time_str}.mp4\")\n            audio_clip = AudioFileClip(audio_path)\n            video_clip = video_clip.set_audio(audio_clip)\n            video_clip.write_videofile(f\"{save_dir}/{ref_name}_{audio_name}_{args.H}x{args.W}_{int(args.cfg)}_{time_str}_withaudio.mp4\", codec=\"libx264\", audio_codec=\"aac\")\n            print(f\"{save_dir}/{ref_name}_{audio_name}_{args.H}x{args.W}_{int(args.cfg)}_{time_str}_withaudio.mp4\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "infer_audio2vid_acc.py",
          "type": "blob",
          "size": 9.603515625,
          "content": "#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n'''\n@Project ：EchoMimic\n@File    ：audio2vid.py\n@Author  ：juzhen.czy\n@Date    ：2024/3/4 17:43 \n'''\nimport argparse\nimport os\n\nimport random\nimport platform\nimport subprocess\nfrom datetime import datetime\nfrom pathlib import Path\n\nimport cv2\nimport numpy as np\nimport torch\nfrom diffusers import AutoencoderKL, DDIMScheduler\nfrom omegaconf import OmegaConf\nfrom PIL import Image\n\nfrom src.models.unet_2d_condition import UNet2DConditionModel\nfrom src.models.unet_3d_echo import EchoUNet3DConditionModel\nfrom src.models.whisper.audio2feature import load_audio_model\nfrom src.pipelines.pipeline_echo_mimic_acc import Audio2VideoPipeline\nfrom src.utils.util import save_videos_grid, crop_and_pad\nfrom src.models.face_locator import FaceLocator\nfrom moviepy.editor import VideoFileClip, AudioFileClip\nfrom facenet_pytorch import MTCNN\n\nffmpeg_path = os.getenv('FFMPEG_PATH')\nif ffmpeg_path is None and platform.system() in ['Linux', 'Darwin']:\n    try:\n        result = subprocess.run(['which', 'ffmpeg'], capture_output=True, text=True)\n        if result.returncode == 0:\n            ffmpeg_path = result.stdout.strip()\n            print(f\"FFmpeg is installed at: {ffmpeg_path}\")\n        else:\n            print(\"FFmpeg is not installed. Please download ffmpeg-static and export to FFMPEG_PATH.\")\n            print(\"For example: export FFMPEG_PATH=/musetalk/ffmpeg-4.4-amd64-static\")\n    except Exception as e:\n        pass\n\nif ffmpeg_path is not None and ffmpeg_path not in os.getenv('PATH'):\n    print(\"Adding FFMPEG_PATH to PATH\")\n    os.environ[\"PATH\"] = f\"{ffmpeg_path}:{os.environ['PATH']}\"\n\ndef parse_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--config\", type=str, default=\"./configs/prompts/animation_acc.yaml\")\n    parser.add_argument(\"-W\", type=int, default=512)\n    parser.add_argument(\"-H\", type=int, default=512)\n    parser.add_argument(\"-L\", type=int, default=1200)\n    parser.add_argument(\"--seed\", type=int, default=420)\n    parser.add_argument(\"--facemusk_dilation_ratio\", type=float, default=0.1)\n    parser.add_argument(\"--facecrop_dilation_ratio\", type=float, default=0.5)\n\n    parser.add_argument(\"--context_frames\", type=int, default=12)\n    parser.add_argument(\"--context_overlap\", type=int, default=3)\n\n    parser.add_argument(\"--cfg\", type=float, default=1.0)\n    parser.add_argument(\"--steps\", type=int, default=6)\n    parser.add_argument(\"--sample_rate\", type=int, default=16000)\n    parser.add_argument(\"--fps\", type=int, default=24)\n    parser.add_argument(\"--device\", type=str, default=\"cuda\")\n\n    args = parser.parse_args()\n\n    return args\n\ndef select_face(det_bboxes, probs):\n    ## max face from faces that the prob is above 0.8\n    ## box: xyxy\n    if det_bboxes is None or probs is None:\n        return None\n    filtered_bboxes = []\n    for bbox_i in range(len(det_bboxes)):\n        if probs[bbox_i] > 0.8:\n            filtered_bboxes.append(det_bboxes[bbox_i])\n    if len(filtered_bboxes) == 0:\n        return None\n\n    sorted_bboxes = sorted(filtered_bboxes, key=lambda x:(x[3]-x[1]) * (x[2] - x[0]), reverse=True)\n    return sorted_bboxes[0]\n\n\n\ndef main():\n    args = parse_args()\n\n    config = OmegaConf.load(args.config)\n    if config.weight_dtype == \"fp16\":\n        weight_dtype = torch.float16\n    else:\n        weight_dtype = torch.float32\n\n    device = args.device\n    if device.__contains__(\"cuda\") and not torch.cuda.is_available():\n        device = \"cpu\"\n\n    inference_config_path = config.inference_config\n    infer_config = OmegaConf.load(inference_config_path)\n\n\n    ############# model_init started #############\n\n    ## vae init\n    vae = AutoencoderKL.from_pretrained(\n        config.pretrained_vae_path,\n    ).to(\"cuda\", dtype=weight_dtype)\n\n    ## reference net init\n    reference_unet = UNet2DConditionModel.from_pretrained(\n        config.pretrained_base_model_path,\n        subfolder=\"unet\",\n    ).to(dtype=weight_dtype, device=device)\n    reference_unet.load_state_dict(\n        torch.load(config.reference_unet_path, map_location=\"cpu\"),\n    )\n\n    ## denoising net init\n    if os.path.exists(config.motion_module_path):\n        ### stage1 + stage2\n        denoising_unet = EchoUNet3DConditionModel.from_pretrained_2d(\n            config.pretrained_base_model_path,\n            config.motion_module_path,\n            subfolder=\"unet\",\n            unet_additional_kwargs=infer_config.unet_additional_kwargs,\n        ).to(dtype=weight_dtype, device=device)\n    else:\n        ### only stage1\n        denoising_unet = EchoUNet3DConditionModel.from_pretrained_2d(\n            config.pretrained_base_model_path,\n            \"\",\n            subfolder=\"unet\",\n            unet_additional_kwargs={\n                \"use_motion_module\": False,\n                \"unet_use_temporal_attention\": False,\n                \"cross_attention_dim\": infer_config.unet_additional_kwargs.cross_attention_dim\n            }\n        ).to(dtype=weight_dtype, device=device)\n    denoising_unet.load_state_dict(\n        torch.load(config.denoising_unet_path, map_location=\"cpu\"),\n        strict=False\n    )\n\n    ## face locator init\n    face_locator = FaceLocator(320, conditioning_channels=1, block_out_channels=(16, 32, 96, 256)).to(\n        dtype=weight_dtype, device=\"cuda\"\n    )\n    face_locator.load_state_dict(torch.load(config.face_locator_path))\n\n    ### load audio processor params\n    audio_processor = load_audio_model(model_path=config.audio_model_path, device=device)\n\n    ### load face detector params\n    face_detector = MTCNN(image_size=320, margin=0, min_face_size=20, thresholds=[0.6, 0.7, 0.7], factor=0.709, post_process=True, device=device)\n\n    ############# model_init finished #############\n\n    width, height = args.W, args.H\n    sched_kwargs = OmegaConf.to_container(infer_config.noise_scheduler_kwargs)\n    scheduler = DDIMScheduler(**sched_kwargs)\n\n    pipe = Audio2VideoPipeline(\n        vae=vae,\n        reference_unet=reference_unet,\n        denoising_unet=denoising_unet,\n        audio_guider=audio_processor,\n        face_locator=face_locator,\n        scheduler=scheduler,\n    )\n    pipe = pipe.to(\"cuda\", dtype=weight_dtype)\n\n    date_str = datetime.now().strftime(\"%Y%m%d\")\n    time_str = datetime.now().strftime(\"%H%M\")\n    save_dir_name = f\"{time_str}--seed_{args.seed}-{args.W}x{args.H}\"\n    save_dir = Path(f\"output/{date_str}/{save_dir_name}\")\n    save_dir.mkdir(exist_ok=True, parents=True)\n\n    for ref_image_path in config[\"test_cases\"].keys():\n        for audio_path in config[\"test_cases\"][ref_image_path]:\n\n            if args.seed is not None and args.seed > -1:\n                generator = torch.manual_seed(args.seed)\n            else:\n                generator = torch.manual_seed(random.randint(100, 1000000))\n\n            ref_name = Path(ref_image_path).stem\n            audio_name = Path(audio_path).stem\n            final_fps = args.fps\n\n            #### face musk prepare\n            face_img = cv2.imread(ref_image_path)\n            face_mask = np.zeros((face_img.shape[0], face_img.shape[1])).astype('uint8')\n\n            det_bboxes, probs = face_detector.detect(face_img)\n            select_bbox = select_face(det_bboxes, probs)\n            if select_bbox is None:\n                face_mask[:, :] = 255\n            else:\n                xyxy = select_bbox[:4]\n                xyxy = np.round(xyxy).astype('int')\n                rb, re, cb, ce = xyxy[1], xyxy[3], xyxy[0], xyxy[2]\n                r_pad = int((re - rb) * args.facemusk_dilation_ratio)\n                c_pad = int((ce - cb) * args.facemusk_dilation_ratio)\n                face_mask[rb - r_pad : re + r_pad, cb - c_pad : ce + c_pad] = 255\n\n                #### face crop\n                r_pad_crop = int((re - rb) * args.facecrop_dilation_ratio)\n                c_pad_crop = int((ce - cb) * args.facecrop_dilation_ratio)\n                crop_rect = [max(0, cb - c_pad_crop), max(0, rb - r_pad_crop), min(ce + c_pad_crop, face_img.shape[1]), min(re + r_pad_crop, face_img.shape[0])]\n                print(crop_rect)\n                face_img, _ = crop_and_pad(face_img, crop_rect)\n                face_mask, _ = crop_and_pad(face_mask, crop_rect)\n                face_img = cv2.resize(face_img, (args.W, args.H))\n                face_mask = cv2.resize(face_mask, (args.W, args.H))\n\n            ref_image_pil = Image.fromarray(face_img[:, :, [2, 1, 0]])\n            face_mask_tensor = torch.Tensor(face_mask).to(dtype=weight_dtype, device=\"cuda\").unsqueeze(0).unsqueeze(0).unsqueeze(0) / 255.0\n\n            video = pipe(\n                ref_image_pil,\n                audio_path,\n                face_mask_tensor,\n                width,\n                height,\n                args.L,\n                args.steps,\n                args.cfg,\n                generator=generator,\n                audio_sample_rate=args.sample_rate,\n                context_frames=args.context_frames,\n                fps=final_fps,\n                context_overlap=args.context_overlap\n            ).videos\n\n            video = video\n            save_videos_grid(\n                video,\n                f\"{save_dir}/{ref_name}_{audio_name}_{args.H}x{args.W}_{int(args.cfg)}_{time_str}.mp4\",\n                n_rows=1,\n                fps=final_fps,\n            )\n\n            video_clip = VideoFileClip(f\"{save_dir}/{ref_name}_{audio_name}_{args.H}x{args.W}_{int(args.cfg)}_{time_str}.mp4\")\n            audio_clip = AudioFileClip(audio_path)\n            video_clip = video_clip.set_audio(audio_clip)\n            video_clip.write_videofile(f\"{save_dir}/{ref_name}_{audio_name}_{args.H}x{args.W}_{int(args.cfg)}_{time_str}_withaudio.mp4\", codec=\"libx264\", audio_codec=\"aac\")\n            print(f\"{save_dir}/{ref_name}_{audio_name}_{args.H}x{args.W}_{int(args.cfg)}_{time_str}_withaudio.mp4\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "infer_audio2vid_pose.py",
          "type": "blob",
          "size": 9.3671875,
          "content": "import argparse\nimport os\nimport random\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import List\n\nimport av\nimport cv2\nimport numpy as np\nimport torch\nimport torchvision\nfrom diffusers import AutoencoderKL, DDIMScheduler\nfrom diffusers.pipelines.stable_diffusion import StableDiffusionPipeline\nfrom einops import repeat\nfrom omegaconf import OmegaConf\nfrom PIL import Image\nfrom torchvision import transforms\nfrom transformers import CLIPVisionModelWithProjection\n\nfrom src.models.unet_2d_condition import UNet2DConditionModel\nfrom src.models.unet_3d_echo import EchoUNet3DConditionModel\nfrom src.models.whisper.audio2feature import load_audio_model\nfrom src.pipelines.pipeline_echo_mimic_pose import AudioPose2VideoPipeline\nfrom src.utils.util import get_fps, read_frames, save_videos_grid, crop_and_pad\nimport sys\nfrom src.models.face_locator import FaceLocator\nfrom moviepy.editor import VideoFileClip, AudioFileClip\nfrom facenet_pytorch import MTCNN\nfrom src.utils.draw_utils import FaceMeshVisualizer\nimport pickle\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--config\", type=str, default=\"./configs/prompts/animation_pose.yaml\")\n    parser.add_argument(\"-W\", type=int, default=512)\n    parser.add_argument(\"-H\", type=int, default=512)\n    parser.add_argument(\"-L\", type=int, default=240)\n    parser.add_argument(\"--seed\", type=int, default=420)\n    parser.add_argument(\"--crop_face\", type=int, default=1)\n    parser.add_argument(\"--facemusk_dilation_ratio\", type=float, default=0.1)\n    parser.add_argument(\"--facecrop_dilation_ratio\", type=float, default=0.5)\n\n    parser.add_argument(\"--context_frames\", type=int, default=12)\n    parser.add_argument(\"--context_overlap\", type=int, default=3)\n\n    parser.add_argument(\"--cfg\", type=float, default=2.5)\n    parser.add_argument(\"--steps\", type=int, default=30)\n    parser.add_argument(\"--sample_rate\", type=int, default=16000)\n    parser.add_argument(\"--fps\", type=int, default=24)\n    parser.add_argument(\"--device\", type=str, default=\"cuda\")\n\n    args = parser.parse_args()\n\n    return args\n\ndef select_face(det_bboxes, probs):\n    ## max face from faces that the prob is above 0.8\n    ## box: xyxy\n    filtered_bboxes = []\n    for bbox_i in range(len(det_bboxes)):\n        if probs[bbox_i] > 0.8:\n            filtered_bboxes.append(det_bboxes[bbox_i])\n    if len(filtered_bboxes) == 0:\n        return None\n\n    sorted_bboxes = sorted(filtered_bboxes, key=lambda x:(x[3]-x[1]) * (x[2] - x[0]), reverse=True)\n    return sorted_bboxes[0]\n\n\ndef main():\n    args = parse_args()\n\n    config = OmegaConf.load(args.config)\n    if config.weight_dtype == \"fp16\":\n        weight_dtype = torch.float16\n    else:\n        weight_dtype = torch.float32\n\n    device = args.device\n    if device.__contains__(\"cuda\") and not torch.cuda.is_available():\n        device = \"cpu\"\n\n    inference_config_path = config.inference_config\n    infer_config = OmegaConf.load(inference_config_path)\n\n    ############# model_init started #############\n\n    ## vae init\n    vae = AutoencoderKL.from_pretrained(\n        config.pretrained_vae_path,\n    ).to(\"cuda\", dtype=weight_dtype)\n\n    ## reference net init\n    reference_unet = UNet2DConditionModel.from_pretrained(\n        config.pretrained_base_model_path,\n        subfolder=\"unet\",\n    ).to(dtype=weight_dtype, device=device)\n    reference_unet.load_state_dict(\n        torch.load(config.reference_unet_path, map_location=\"cpu\"),\n    )\n\n    ## denoising net init\n    if os.path.exists(config.motion_module_path):\n        ### stage1 + stage2\n        denoising_unet = EchoUNet3DConditionModel.from_pretrained_2d(\n            config.pretrained_base_model_path,\n            config.motion_module_path,\n            subfolder=\"unet\",\n            unet_additional_kwargs=infer_config.unet_additional_kwargs,\n        ).to(dtype=weight_dtype, device=device)\n    else:\n        ### only stage1\n        denoising_unet = EchoUNet3DConditionModel.from_pretrained_2d(\n            config.pretrained_base_model_path,\n            \"\",\n            subfolder=\"unet\",\n            unet_additional_kwargs={\n                \"use_motion_module\": False,\n                \"unet_use_temporal_attention\": False,\n                \"cross_attention_dim\": infer_config.unet_additional_kwargs.cross_attention_dim\n            }\n        ).to(dtype=weight_dtype, device=device)\n    denoising_unet.load_state_dict(\n        torch.load(config.denoising_unet_path, map_location=\"cpu\"),\n        strict=False\n    )\n\n    ## face locator init\n    face_locator = FaceLocator(320, conditioning_channels=3, block_out_channels=(16, 32, 96, 256)).to(\n        dtype=weight_dtype, device=\"cuda\"\n    )\n    face_locator.load_state_dict(torch.load(config.face_locator_path))\n\n    visualizer = FaceMeshVisualizer(draw_iris=False, draw_mouse=False)\n\n    ### load audio processor params\n    audio_processor = load_audio_model(model_path=config.audio_model_path, device=device)\n\n    ### load face detector params\n    face_detector = MTCNN(image_size=320, margin=0, min_face_size=20, thresholds=[0.6, 0.7, 0.7], factor=0.709, post_process=True, device=device)\n\n    ############# model_init finished #############\n\n    width, height = args.W, args.H\n    sched_kwargs = OmegaConf.to_container(infer_config.noise_scheduler_kwargs)\n    scheduler = DDIMScheduler(**sched_kwargs)\n\n    pipe = AudioPose2VideoPipeline(\n        vae=vae,\n        reference_unet=reference_unet,\n        denoising_unet=denoising_unet,\n        audio_guider=audio_processor,\n        face_locator=face_locator,\n        scheduler=scheduler,\n    )\n\n    pipe = pipe.to(\"cuda\", dtype=weight_dtype)\n\n    date_str = datetime.now().strftime(\"%Y%m%d\")\n    time_str = datetime.now().strftime(\"%H%M\")\n    save_dir_name = f\"{time_str}--seed_{args.seed}-{args.W}x{args.H}\"\n    save_dir = Path(f\"output/{date_str}/{save_dir_name}\")\n    save_dir.mkdir(exist_ok=True, parents=True)\n\n    for ref_image_path in config[\"test_cases\"].keys():\n        for file_path in config[\"test_cases\"][ref_image_path]:\n            if \".wav\" in file_path:\n                audio_path = file_path\n            else:\n                pose_dir = file_path\n\n        if args.seed is not None and args.seed > -1:\n            generator = torch.manual_seed(args.seed)\n        else:\n            generator = torch.manual_seed(random.randint(100, 1000000))\n\n        ref_name = Path(ref_image_path).stem\n        audio_name = Path(audio_path).stem\n        final_fps = args.fps\n\n        #ref_image_pil = Image.open(ref_image_path).convert(\"RGB\")\n\n        ### face crop\n        face_img = cv2.imread(ref_image_path)\n\n        if args.crop_face:\n            det_bboxes, probs = face_detector.detect(face_img)\n            select_bbox = select_face(det_bboxes, probs)\n            if select_bbox is not None:\n                xyxy = select_bbox[:4]\n                xyxy = np.round(xyxy).astype('int')\n                rb, re, cb, ce = xyxy[1], xyxy[3], xyxy[0], xyxy[2]\n\n                r_pad_crop = int((re - rb) * args.facecrop_dilation_ratio)\n                c_pad_crop = int((ce - cb) * args.facecrop_dilation_ratio)\n                crop_rect = [max(0, cb - c_pad_crop), max(0, rb - r_pad_crop), min(ce + c_pad_crop, face_img.shape[1]), min(re + r_pad_crop, face_img.shape[0])]\n                print(crop_rect)\n                face_img, _ = crop_and_pad(face_img, crop_rect)\n                face_img = cv2.resize(face_img, (args.W, args.H))\n\n        ref_image_pil = Image.fromarray(face_img[:, :, [2, 1, 0]])\n\n        # ==================== face_locator =====================\n        pose_list = []\n        for index in range(len(os.listdir(pose_dir))):\n            tgt_musk_path = os.path.join(pose_dir, f\"{index}.pkl\")\n\n            with open(tgt_musk_path, \"rb\") as f:\n                tgt_kpts = pickle.load(f)\n            tgt_musk = visualizer.draw_landmarks((args.W, args.H), tgt_kpts)\n            tgt_musk_pil = Image.fromarray(np.array(tgt_musk).astype(np.uint8)).convert('RGB')\n            pose_list.append(torch.Tensor(np.array(tgt_musk_pil)).to(dtype=weight_dtype, device=\"cuda\").permute(2,0,1) / 255.0)\n        face_mask_tensor = torch.stack(pose_list, dim=1).unsqueeze(0)\n\n\n        video = pipe(\n            ref_image_pil,\n            audio_path,\n            face_mask_tensor,\n            width,\n            height,\n            args.L,\n            args.steps,\n            args.cfg,\n            generator=generator,\n            audio_sample_rate=args.sample_rate,\n            context_frames=12,\n            fps=final_fps,\n            context_overlap=3\n        ).videos\n\n        final_length = min(video.shape[2], face_mask_tensor.shape[2], args.L)\n        video = torch.cat([video[:, :, :final_length, :, :], face_mask_tensor[:, :, :final_length, :, :].detach().cpu()], dim=-1)\n        save_videos_grid(\n            video,\n            f\"{save_dir}/{ref_name}_{audio_name}_{args.H}x{args.W}_{int(args.cfg)}_{time_str}.mp4\",\n            n_rows=2,\n            fps=final_fps,\n        )\n\n        from moviepy.editor import VideoFileClip, AudioFileClip\n        video_clip = VideoFileClip(f\"{save_dir}/{ref_name}_{audio_name}_{args.H}x{args.W}_{int(args.cfg)}_{time_str}.mp4\")\n        audio_clip = AudioFileClip(audio_path)\n        video_clip = video_clip.set_audio(audio_clip)\n        video_clip.write_videofile(f\"{save_dir}/{ref_name}_{audio_name}_{args.H}x{args.W}_{int(args.cfg)}_{time_str}_withaudio.mp4\", codec=\"libx264\", audio_codec=\"aac\")\n        print(f\"{save_dir}/{ref_name}_{audio_name}_{args.H}x{args.W}_{int(args.cfg)}_{time_str}_withaudio.mp4\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n"
        },
        {
          "name": "infer_audio2vid_pose_acc.py",
          "type": "blob",
          "size": 13.8525390625,
          "content": "import argparse\nimport os\nimport random\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import List\n\nimport av\nimport cv2\nimport numpy as np\nimport torch\nimport torchvision\nimport torch.nn.functional as F\nfrom diffusers import AutoencoderKL, DDIMScheduler\nfrom diffusers.pipelines.stable_diffusion import StableDiffusionPipeline\nfrom einops import repeat\nfrom omegaconf import OmegaConf\nfrom PIL import Image\nfrom torchvision import transforms\nfrom transformers import CLIPVisionModelWithProjection\n\nfrom src.models.unet_2d_condition import UNet2DConditionModel\nfrom src.models.unet_3d_echo import EchoUNet3DConditionModel\nfrom src.models.whisper.audio2feature import load_audio_model\nfrom src.pipelines.pipeline_echo_mimic_pose_acc import AudioPose2VideoPipeline\nfrom src.utils.util import get_fps, read_frames, save_videos_grid, crop_and_pad\nimport sys\nfrom src.models.face_locator import FaceLocator\nfrom moviepy.editor import VideoFileClip, AudioFileClip\nfrom facenet_pytorch import MTCNN\nfrom src.utils.draw_utils import FaceMeshVisualizer\nimport pickle\nfrom src.utils.motion_utils import motion_sync\nfrom src.utils.mp_utils  import LMKExtractor\nfrom src.utils.img_utils import pil_to_cv2, cv2_to_pil, center_crop_cv2, pils_from_video, save_videos_from_pils, save_video_from_cv2_list\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--config\", type=str, default=\"./configs/prompts/animation_pose_acc.yaml\")\n    parser.add_argument(\"-W\", type=int, default=512)\n    parser.add_argument(\"-H\", type=int, default=512)\n    parser.add_argument(\"-L\", type=int, default=1200)\n    parser.add_argument(\"--seed\", type=int, default=420)\n    parser.add_argument(\"--facemusk_dilation_ratio\", type=float, default=0.1)\n    parser.add_argument(\"--facecrop_dilation_ratio\", type=float, default=0.5)\n\n    parser.add_argument(\"--context_frames\", type=int, default=12)\n    parser.add_argument(\"--context_overlap\", type=int, default=3)\n    parser.add_argument(\"--crop_face\", type=int, default=1)\n    parser.add_argument(\"--motion_sync\", type=int, default=1)\n    parser.add_argument(\"--paste_back\", type=int, default=0)\n\n    parser.add_argument(\"--cfg\", type=float, default=1.0)\n    parser.add_argument(\"--steps\", type=int, default=6)\n    parser.add_argument(\"--sample_rate\", type=int, default=16000)\n    parser.add_argument(\"--fps\", type=int, default=24)\n    parser.add_argument(\"--device\", type=str, default=\"cuda\")\n\n    args = parser.parse_args()\n\n    return args\n\ndef select_face(det_bboxes, probs):\n    ## max face from faces that the prob is above 0.8\n    ## box: xyxy\n    filtered_bboxes = []\n    for bbox_i in range(len(det_bboxes)):\n        if probs[bbox_i] > 0.8:\n            filtered_bboxes.append(det_bboxes[bbox_i])\n    if len(filtered_bboxes) == 0:\n        return None\n\n    sorted_bboxes = sorted(filtered_bboxes, key=lambda x:(x[3]-x[1]) * (x[2] - x[0]), reverse=True)\n    return sorted_bboxes[0]\n\n\ndef main():\n    args = parse_args()\n\n    config = OmegaConf.load(args.config)\n    if config.weight_dtype == \"fp16\":\n        weight_dtype = torch.float16\n    else:\n        weight_dtype = torch.float32\n\n    device = args.device\n    if device.__contains__(\"cuda\") and not torch.cuda.is_available():\n        device = \"cpu\"\n\n    inference_config_path = config.inference_config\n    infer_config = OmegaConf.load(inference_config_path)\n\n    ############# model_init started #############\n\n    ## vae init\n    vae = AutoencoderKL.from_pretrained(\n        config.pretrained_vae_path,\n    ).to(\"cuda\", dtype=weight_dtype)\n\n    ## reference net init\n    reference_unet = UNet2DConditionModel.from_pretrained(\n        config.pretrained_base_model_path,\n        subfolder=\"unet\",\n    ).to(dtype=weight_dtype, device=device)\n    reference_unet.load_state_dict(\n        torch.load(config.reference_unet_path, map_location=\"cpu\"),\n    )\n\n    ## denoising net init\n    if os.path.exists(config.motion_module_path):\n        ### stage1 + stage2\n        denoising_unet = EchoUNet3DConditionModel.from_pretrained_2d(\n            config.pretrained_base_model_path,\n            config.motion_module_path,\n            subfolder=\"unet\",\n            unet_additional_kwargs=infer_config.unet_additional_kwargs,\n        ).to(dtype=weight_dtype, device=device)\n    else:\n        ### only stage1\n        denoising_unet = EchoUNet3DConditionModel.from_pretrained_2d(\n            config.pretrained_base_model_path,\n            \"\",\n            subfolder=\"unet\",\n            unet_additional_kwargs={\n                \"use_motion_module\": False,\n                \"unet_use_temporal_attention\": False,\n                \"cross_attention_dim\": infer_config.unet_additional_kwargs.cross_attention_dim\n            }\n        ).to(dtype=weight_dtype, device=device)\n    denoising_unet.load_state_dict(\n        torch.load(config.denoising_unet_path, map_location=\"cpu\"),\n        strict=False\n    )\n\n    ## face locator init\n    face_locator = FaceLocator(320, conditioning_channels=3, block_out_channels=(16, 32, 96, 256)).to(\n        dtype=weight_dtype, device=\"cuda\"\n    )\n    face_locator.load_state_dict(torch.load(config.face_locator_path))\n\n    visualizer = FaceMeshVisualizer(draw_iris=False, draw_mouse=False)\n\n    ### load audio processor params\n    audio_processor = load_audio_model(model_path=config.audio_model_path, device=device)\n\n    ### load face detector params\n    face_detector = MTCNN(image_size=320, margin=0, min_face_size=20, thresholds=[0.6, 0.7, 0.7], factor=0.709, post_process=True, device=device)\n\n    ############# model_init finished #############\n\n    width, height = args.W, args.H\n    sched_kwargs = OmegaConf.to_container(infer_config.noise_scheduler_kwargs)\n    scheduler = DDIMScheduler(**sched_kwargs)\n\n    pipe = AudioPose2VideoPipeline(\n        vae=vae,\n        reference_unet=reference_unet,\n        denoising_unet=denoising_unet,\n        audio_guider=audio_processor,\n        face_locator=face_locator,\n        scheduler=scheduler,\n    )\n\n    pipe = pipe.to(\"cuda\", dtype=weight_dtype)\n\n    date_str = datetime.now().strftime(\"%Y%m%d\")\n    time_str = datetime.now().strftime(\"%H%M\")\n    save_dir_name = f\"{time_str}--seed_{args.seed}-{args.W}x{args.H}\"\n    save_dir = Path(f\"output/{date_str}/{save_dir_name}\")\n    save_dir.mkdir(exist_ok=True, parents=True)\n\n    for ref_image_path in config[\"test_cases\"].keys():\n        for file_path in config[\"test_cases\"][ref_image_path]:\n            if \".wav\" in file_path:\n                audio_path = file_path\n            else:\n                pose_dir = file_path\n\n        if args.seed is not None and args.seed > -1:\n            generator = torch.manual_seed(args.seed)\n        else:\n            generator = torch.manual_seed(random.randint(100, 1000000))\n\n        ref_name = Path(ref_image_path).stem\n        audio_name = Path(audio_path).stem\n        final_fps = args.fps\n\n        # ref_image_pil = Image.open(ref_image_path).convert(\"RGB\")\n        #### face crop\n        ori_img_pil = Image.open(ref_image_path).convert(\"RGB\")\n        face_img = cv2.imread(ref_image_path)\n        ori_size = (face_img.shape[1], face_img.shape[0])\n\n        if args.crop_face:\n            det_bboxes, probs = face_detector.detect(face_img)\n            select_bbox = select_face(det_bboxes, probs)\n            if select_bbox is not None:\n                xyxy = select_bbox[:4]\n                xyxy = np.round(xyxy).astype('int')\n                rb, re, cb, ce = xyxy[1], xyxy[3], xyxy[0], xyxy[2]\n\n                r_pad_crop = int((re - rb) * args.facecrop_dilation_ratio)\n                c_pad_crop = int((ce - cb) * args.facecrop_dilation_ratio)\n                crop_rect = [max(0, cb - c_pad_crop), max(0, rb - r_pad_crop), min(ce + c_pad_crop, face_img.shape[1]), min(re + r_pad_crop, face_img.shape[0])]\n                print(crop_rect)\n                face_img, ori_face_rect = crop_and_pad(face_img, crop_rect)\n                print(ori_face_rect)\n                ori_face_size = (ori_face_rect[2]-ori_face_rect[0], ori_face_rect[3]-ori_face_rect[1])\n                face_img = cv2.resize(face_img, (args.W, args.H))\n        ref_image_pil = Image.fromarray(face_img[:, :, [2, 1, 0]])\n\n        if args.motion_sync:\n            if os.path.isdir(pose_dir) or pose_dir[-4:]!='.mp4':\n                print(\"motion_sync skipped. Please replace the pose dir with the driven video to enable it.\")\n            else:\n                imsize = (args.W, args.H)\n                ref_image_pil.save('tmp_ref_img.png')\n                lmk_extractor = LMKExtractor()\n\n                input_frames_cv2 = [cv2.resize(center_crop_cv2(pil_to_cv2(i)), imsize) for i in pils_from_video(pose_dir)]\n                ref_frame = face_img\n                ref_det = lmk_extractor(ref_frame)\n\n                sequence_driver_det = []\n                try: \n                    for frame in input_frames_cv2:\n                        result = lmk_extractor(frame)\n                        assert result is not None, \"{}, bad video, face not detected\".format(driver_video)\n                        sequence_driver_det.append(result)\n                except:\n                    print(\"motion_sync error: face detection failed\")\n                    exit()\n                pose_save_dir = './{}'.format(ref_image_path.split('/')[-1].replace('.png', ''))\n                os.makedirs(pose_save_dir, exist_ok=True)\n                sequence_det_ms = motion_sync(sequence_driver_det, ref_det)\n                for i in range(len(sequence_det_ms)):\n                    with open('{}/{}.pkl'.format(pose_save_dir, i), 'wb') as file:\n                        pickle.dump(sequence_det_ms[i], file)\n                pose_dir = pose_save_dir\n\n\n        # ==================== face_locator =====================\n        pose_list = []\n        for index in range(len(os.listdir(pose_dir))):\n            tgt_musk_path = os.path.join(pose_dir, f\"{index}.pkl\")\n\n            with open(tgt_musk_path, \"rb\") as f:\n                tgt_kpts = pickle.load(f)\n            tgt_musk = visualizer.draw_landmarks((args.W, args.H), tgt_kpts)\n            tgt_musk_pil = Image.fromarray(np.array(tgt_musk).astype(np.uint8)).convert('RGB')\n            pose_list.append(torch.Tensor(np.array(tgt_musk_pil)).to(dtype=weight_dtype, device=\"cuda\").permute(2,0,1) / 255.0)\n        face_mask_tensor = torch.stack(pose_list, dim=1).unsqueeze(0)\n        #face_mask_tensor = torch.zeros_like(face_mask_tensor)\n\n\n        video = pipe(\n            ref_image_pil,\n            audio_path,\n            face_mask_tensor,\n            width,\n            height,\n            args.L,\n            args.steps,\n            args.cfg,\n            generator=generator,\n            audio_sample_rate=args.sample_rate,\n            context_frames=12,\n            fps=final_fps,\n            context_overlap=3\n        ).videos\n\n        final_length = min(video.shape[2], face_mask_tensor.shape[2], args.L)\n        face_tensor = video[:, :, :final_length, :, :].contiguous()\n        video = torch.cat([face_tensor, face_mask_tensor[:, :, :final_length, :, :].detach().cpu()], dim=-1)\n        save_videos_grid(\n            video,\n            f\"{save_dir}/{ref_name}_{audio_name}_{args.H}x{args.W}_{int(args.cfg)}_{time_str}.mp4\",\n            n_rows=2,\n            fps=final_fps,\n        )\n\n        from moviepy.editor import VideoFileClip, AudioFileClip\n        video_clip = VideoFileClip(f\"{save_dir}/{ref_name}_{audio_name}_{args.H}x{args.W}_{int(args.cfg)}_{time_str}.mp4\")\n        audio_clip = AudioFileClip(audio_path)\n        video_clip = video_clip.set_audio(audio_clip)\n        video_clip.write_videofile(f\"{save_dir}/{ref_name}_{audio_name}_{args.H}x{args.W}_{int(args.cfg)}_{time_str}_withaudio.mp4\", codec=\"libx264\", audio_codec=\"aac\")\n        print(f\"{save_dir}/{ref_name}_{audio_name}_{args.H}x{args.W}_{int(args.cfg)}_{time_str}_withaudio.mp4\")\n\n        if args.paste_back:\n            transform = transforms.Compose([\n                transforms.ToTensor()\n            ])\n\n            # face_tensor = video[:, :, :final_length, :, :]\n            b, c, f, h, w = face_tensor.shape\n            reshaped_tensor = face_tensor.view(b*f*c, 1, h, w)\n            new_w, new_h = ori_face_size\n            resized_tensor = F.interpolate(reshaped_tensor, size=(new_h, new_w), mode='bilinear', align_corners=False)\n            review_face_tensor = resized_tensor.view(b, c, f, new_h, new_w)\n\n            mask_img_pil = Image.open('./assets/mask_image_512.png').convert(\"RGB\").resize(ori_face_size)\n            mask_img_tensor = transform(mask_img_pil)\n            mask_tensor_expanded = mask_img_tensor.unsqueeze(0).unsqueeze(0).repeat(1, final_length, 1, 1, 1).permute(0,2,1,3,4).contiguous()\n            b, c, f, h, w = mask_tensor_expanded.shape\n            reshaped_tensor = mask_tensor_expanded.view(b*f*c, 1, h, w)\n            resized_tensor = F.interpolate(reshaped_tensor, size=(new_h, new_w), mode='bilinear', align_corners=False)\n            review_mask_tensor = resized_tensor.view(b, c, f, new_h, new_w)\n\n            ori_img_tensor = transform(ori_img_pil)\n            # batch_size = 1\n            # num_frames = final_length\n            # channels = ori_img_tensor.shape[0]\n            # height = ori_img_tensor.shape[1]\n            # width = ori_img_tensor.shape[2]\n            img_tensor_expanded = ori_img_tensor.unsqueeze(0).unsqueeze(0).repeat(1, final_length, 1, 1, 1).permute(0,2,1,3,4)\n            final_mask_tensor = torch.ones_like(img_tensor_expanded)\n            final_mask_tensor[:, :, :, ori_face_rect[1]:ori_face_rect[3], ori_face_rect[0]:ori_face_rect[2]] = (1.0 - review_mask_tensor)\n            final_face_tensor = torch.zeros_like(img_tensor_expanded)\n            final_face_tensor[:, :, :, ori_face_rect[1]:ori_face_rect[3], ori_face_rect[0]:ori_face_rect[2]] = review_face_tensor\n\n            psbk_video = final_mask_tensor * img_tensor_expanded + (1.0 - final_mask_tensor) * final_face_tensor\n            save_videos_grid(\n                psbk_video,\n                f\"{save_dir}/psbk_{ref_name}_{audio_name}_{args.H}x{args.W}_{int(args.cfg)}_{time_str}.mp4\",\n                n_rows=1,\n                fps=final_fps,\n            )\n\n\n\nif __name__ == \"__main__\":\n    main()\n\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.2705078125,
          "content": "torch>=2.0.1,<=2.2.2\ntorchvision>=0.15.2,<=0.17.2\ntorchaudio>=2.0.2,<=2.2.2\nmediapipe\ntransformers>=4.38.2\ndiffusers==0.24.0\ntorchmetrics\ntorchtyping\ntqdm\nffmpeg-python==0.2.0\nfacenet_pytorch==2.5.0\nmoviepy==1.0.3\neinops==0.4.1\nomegaconf==2.3.0\nopencv-python\nav==11.0.0\ngradio\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "webgui.py",
          "type": "blob",
          "size": 10.4228515625,
          "content": "#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n'''\nwebui\n'''\n\nimport os\nimport random\nfrom datetime import datetime\nfrom pathlib import Path\n\nimport cv2\nimport numpy as np\nimport torch\nfrom diffusers import AutoencoderKL, DDIMScheduler\nfrom omegaconf import OmegaConf\nfrom PIL import Image\nfrom src.models.unet_2d_condition import UNet2DConditionModel\nfrom src.models.unet_3d_echo import EchoUNet3DConditionModel\nfrom src.models.whisper.audio2feature import load_audio_model\nfrom src.pipelines.pipeline_echo_mimic import Audio2VideoPipeline\nfrom src.utils.util import save_videos_grid, crop_and_pad\nfrom src.models.face_locator import FaceLocator\nfrom moviepy.editor import VideoFileClip, AudioFileClip\nfrom facenet_pytorch import MTCNN\nimport argparse\n\nimport gradio as gr\n\ndefault_values = {\n    \"width\": 512,\n    \"height\": 512,\n    \"length\": 1200,\n    \"seed\": 420,\n    \"facemask_dilation_ratio\": 0.1,\n    \"facecrop_dilation_ratio\": 0.5,\n    \"context_frames\": 12,\n    \"context_overlap\": 3,\n    \"cfg\": 2.5,\n    \"steps\": 30,\n    \"sample_rate\": 16000,\n    \"fps\": 24,\n    \"device\": \"cuda\"\n}\n\nffmpeg_path = os.getenv('FFMPEG_PATH')\nif ffmpeg_path is None:\n    print(\"please download ffmpeg-static and export to FFMPEG_PATH. \\nFor example: export FFMPEG_PATH=/musetalk/ffmpeg-4.4-amd64-static\")\nelif ffmpeg_path not in os.getenv('PATH'):\n    print(\"add ffmpeg to path\")\n    os.environ[\"PATH\"] = f\"{ffmpeg_path}:{os.environ['PATH']}\"\n\n\nconfig_path = \"./configs/prompts/animation.yaml\"\nconfig = OmegaConf.load(config_path)\nif config.weight_dtype == \"fp16\":\n    weight_dtype = torch.float16\nelse:\n    weight_dtype = torch.float32\n\ndevice = \"cuda\"\nif not torch.cuda.is_available():\n    device = \"cpu\"\n\ninference_config_path = config.inference_config\ninfer_config = OmegaConf.load(inference_config_path)\n\n############# model_init started #############\n## vae init\nvae = AutoencoderKL.from_pretrained(config.pretrained_vae_path).to(\"cuda\", dtype=weight_dtype)\n\n## reference net init\nreference_unet = UNet2DConditionModel.from_pretrained(\n    config.pretrained_base_model_path,\n    subfolder=\"unet\",\n).to(dtype=weight_dtype, device=device)\nreference_unet.load_state_dict(torch.load(config.reference_unet_path, map_location=\"cpu\"))\n\n## denoising net init\nif os.path.exists(config.motion_module_path):\n    ### stage1 + stage2\n    denoising_unet = EchoUNet3DConditionModel.from_pretrained_2d(\n        config.pretrained_base_model_path,\n        config.motion_module_path,\n        subfolder=\"unet\",\n        unet_additional_kwargs=infer_config.unet_additional_kwargs,\n    ).to(dtype=weight_dtype, device=device)\nelse:\n    ### only stage1\n    denoising_unet = EchoUNet3DConditionModel.from_pretrained_2d(\n        config.pretrained_base_model_path,\n        \"\",\n        subfolder=\"unet\",\n        unet_additional_kwargs={\n            \"use_motion_module\": False,\n            \"unet_use_temporal_attention\": False,\n            \"cross_attention_dim\": infer_config.unet_additional_kwargs.cross_attention_dim\n        }\n    ).to(dtype=weight_dtype, device=device)\n\ndenoising_unet.load_state_dict(torch.load(config.denoising_unet_path, map_location=\"cpu\"), strict=False)\n\n## face locator init\nface_locator = FaceLocator(320, conditioning_channels=1, block_out_channels=(16, 32, 96, 256)).to(dtype=weight_dtype, device=\"cuda\")\nface_locator.load_state_dict(torch.load(config.face_locator_path))\n\n## load audio processor params\naudio_processor = load_audio_model(model_path=config.audio_model_path, device=device)\n\n## load face detector params\nface_detector = MTCNN(image_size=320, margin=0, min_face_size=20, thresholds=[0.6, 0.7, 0.7], factor=0.709, post_process=True, device=device)\n\n############# model_init finished #############\n\nsched_kwargs = OmegaConf.to_container(infer_config.noise_scheduler_kwargs)\nscheduler = DDIMScheduler(**sched_kwargs)\n\npipe = Audio2VideoPipeline(\n    vae=vae,\n    reference_unet=reference_unet,\n    denoising_unet=denoising_unet,\n    audio_guider=audio_processor,\n    face_locator=face_locator,\n    scheduler=scheduler,\n).to(\"cuda\", dtype=weight_dtype)\n\ndef select_face(det_bboxes, probs):\n    ## max face from faces that the prob is above 0.8\n    ## box: xyxy\n    if det_bboxes is None or probs is None:\n        return None\n    filtered_bboxes = []\n    for bbox_i in range(len(det_bboxes)):\n        if probs[bbox_i] > 0.8:\n            filtered_bboxes.append(det_bboxes[bbox_i])\n    if len(filtered_bboxes) == 0:\n        return None\n    sorted_bboxes = sorted(filtered_bboxes, key=lambda x:(x[3]-x[1]) * (x[2] - x[0]), reverse=True)\n    return sorted_bboxes[0]\n\ndef process_video(uploaded_img, uploaded_audio, width, height, length, seed, facemask_dilation_ratio, facecrop_dilation_ratio, context_frames, context_overlap, cfg, steps, sample_rate, fps, device):\n\n    if seed is not None and seed > -1:\n        generator = torch.manual_seed(seed)\n    else:\n        generator = torch.manual_seed(random.randint(100, 1000000))\n\n    #### face musk prepare\n    face_img = cv2.imread(uploaded_img)\n    face_mask = np.zeros((face_img.shape[0], face_img.shape[1])).astype('uint8')\n    det_bboxes, probs = face_detector.detect(face_img)\n    select_bbox = select_face(det_bboxes, probs)\n    if select_bbox is None:\n        face_mask[:, :] = 255\n    else:\n        xyxy = select_bbox[:4]\n        xyxy = np.round(xyxy).astype('int')\n        rb, re, cb, ce = xyxy[1], xyxy[3], xyxy[0], xyxy[2]\n        r_pad = int((re - rb) * facemask_dilation_ratio)\n        c_pad = int((ce - cb) * facemask_dilation_ratio)\n        face_mask[rb - r_pad : re + r_pad, cb - c_pad : ce + c_pad] = 255\n        \n        #### face crop\n        r_pad_crop = int((re - rb) * facecrop_dilation_ratio)\n        c_pad_crop = int((ce - cb) * facecrop_dilation_ratio)\n        crop_rect = [max(0, cb - c_pad_crop), max(0, rb - r_pad_crop), min(ce + c_pad_crop, face_img.shape[1]), min(re + r_pad_crop, face_img.shape[0])]\n        face_img = crop_and_pad(face_img, crop_rect)\n        face_mask = crop_and_pad(face_mask, crop_rect)\n        face_img = cv2.resize(face_img, (width, height))\n        face_mask = cv2.resize(face_mask, (width, height))\n\n    ref_image_pil = Image.fromarray(face_img[:, :, [2, 1, 0]])\n    face_mask_tensor = torch.Tensor(face_mask).to(dtype=weight_dtype, device=\"cuda\").unsqueeze(0).unsqueeze(0).unsqueeze(0) / 255.0\n    \n    video = pipe(\n        ref_image_pil,\n        uploaded_audio,\n        face_mask_tensor,\n        width,\n        height,\n        length,\n        steps,\n        cfg,\n        generator=generator,\n        audio_sample_rate=sample_rate,\n        context_frames=context_frames,\n        fps=fps,\n        context_overlap=context_overlap\n    ).videos\n\n    save_dir = Path(\"output/tmp\")\n    save_dir.mkdir(exist_ok=True, parents=True)\n    output_video_path = save_dir / \"output_video.mp4\"\n    save_videos_grid(video, str(output_video_path), n_rows=1, fps=fps)\n\n    video_clip = VideoFileClip(str(output_video_path))\n    audio_clip = AudioFileClip(uploaded_audio)\n    final_output_path = save_dir / \"output_video_with_audio.mp4\"\n    video_clip = video_clip.set_audio(audio_clip)\n    video_clip.write_videofile(str(final_output_path), codec=\"libx264\", audio_codec=\"aac\")\n\n    return final_output_path\n  \nwith gr.Blocks() as demo:\n    gr.Markdown('# EchoMimic')\n    gr.Markdown('![]()')\n    with gr.Row():\n        with gr.Column():\n            uploaded_img = gr.Image(type=\"filepath\", label=\"Reference Image\")\n            uploaded_audio = gr.Audio(type=\"filepath\", label=\"Input Audio\")\n        with gr.Column():\n            output_video = gr.Video()\n\n    with gr.Accordion(\"Configuration\", open=False):\n        width = gr.Slider(label=\"Width\", minimum=128, maximum=1024, value=default_values[\"width\"])\n        height = gr.Slider(label=\"Height\", minimum=128, maximum=1024, value=default_values[\"height\"])\n        length = gr.Slider(label=\"Length\", minimum=100, maximum=5000, value=default_values[\"length\"])\n        seed = gr.Slider(label=\"Seed\", minimum=0, maximum=10000, value=default_values[\"seed\"])\n        facemask_dilation_ratio = gr.Slider(label=\"Facemask Dilation Ratio\", minimum=0.0, maximum=1.0, step=0.01, value=default_values[\"facemask_dilation_ratio\"])\n        facecrop_dilation_ratio = gr.Slider(label=\"Facecrop Dilation Ratio\", minimum=0.0, maximum=1.0, step=0.01, value=default_values[\"facecrop_dilation_ratio\"])\n        context_frames = gr.Slider(label=\"Context Frames\", minimum=0, maximum=50, step=1, value=default_values[\"context_frames\"])\n        context_overlap = gr.Slider(label=\"Context Overlap\", minimum=0, maximum=10, step=1, value=default_values[\"context_overlap\"])\n        cfg = gr.Slider(label=\"CFG\", minimum=0.0, maximum=10.0, step=0.1, value=default_values[\"cfg\"])\n        steps = gr.Slider(label=\"Steps\", minimum=1, maximum=100, step=1, value=default_values[\"steps\"])\n        sample_rate = gr.Slider(label=\"Sample Rate\", minimum=8000, maximum=48000, step=1000, value=default_values[\"sample_rate\"])\n        fps = gr.Slider(label=\"FPS\", minimum=1, maximum=60, step=1, value=default_values[\"fps\"])\n        device = gr.Radio(label=\"Device\", choices=[\"cuda\", \"cpu\"], value=default_values[\"device\"])\n\n    generate_button = gr.Button(\"Generate Video\")\n\n    def generate_video(uploaded_img, uploaded_audio, width, height, length, seed, facemask_dilation_ratio, facecrop_dilation_ratio, context_frames, context_overlap, cfg, steps, sample_rate, fps, device):\n\n        final_output_path = process_video(\n            uploaded_img, uploaded_audio, width, height, length, seed, facemask_dilation_ratio, facecrop_dilation_ratio, context_frames, context_overlap, cfg, steps, sample_rate, fps, device\n        )        \n        output_video= final_output_path\n        return final_output_path\n\n    generate_button.click(\n        generate_video,\n        inputs=[\n            uploaded_img,\n            uploaded_audio,\n            width,\n            height,\n            length,\n            seed,\n            facemask_dilation_ratio,\n            facecrop_dilation_ratio,\n            context_frames,\n            context_overlap,\n            cfg,\n            steps,\n            sample_rate,\n            fps,\n            device\n        ],\n        outputs=output_video\n    )\nparser = argparse.ArgumentParser(description='EchoMimic')\nparser.add_argument('--server_name', type=str, default='0.0.0.0', help='Server name')\nparser.add_argument('--server_port', type=int, default=7680, help='Server port')\nargs = parser.parse_args()\n\n# demo.launch(server_name=args.server_name, server_port=args.server_port, inbrowser=True)\n\nif __name__ == '__main__':\n    #demo.launch(server_name='0.0.0.0')\n    demo.launch(server_name=args.server_name, server_port=args.server_port, inbrowser=True)\n"
        }
      ]
    }
  ]
}