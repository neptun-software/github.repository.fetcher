{
  "metadata": {
    "timestamp": 1736559863171,
    "page": 619,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hynek/structlog",
      "stars": 3678,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".git_archival.txt",
          "type": "blob",
          "size": 0.099609375,
          "content": "node: $Format:%H$\nnode-date: $Format:%cI$\ndescribe-name: $Format:%(describe:tags=true,match=*[0-9]*)$\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1396484375,
          "content": "# Force LF line endings for text files\n* text=auto eol=lf\n\n# Needed for hatch-vcs / setuptools-scm-git-archive\n.git_archival.txt  export-subst\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1728515625,
          "content": "*.pyc\n*.pyo\n.DS_Store\n.cache\n.coverage*\n.direnv\n.envrc\n.mypy_cache\n.pytest_cache\n.tox\n.vscode\n.idea\nbenchmarks\nbuild\ndist\ndocs/_build\nhtmlcov\ntmp\nstructlog.docset\nstructlog.tgz\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.6787109375,
          "content": "---\nci:\n  autoupdate_schedule: monthly\n\nrepos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.8.6\n    hooks:\n      - id: ruff\n        args: [--fix, --exit-non-zero-on-fix]\n      - id: ruff-format\n\n  - repo: https://github.com/econchick/interrogate\n    rev: 1.7.0\n    hooks:\n      - id: interrogate\n        args: [tests]\n\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.3.0\n    hooks:\n      - id: codespell\n        args: [-L, alog]\n\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n        exclude: docs/_static\n      - id: check-toml\n      - id: check-yaml\n"
        },
        {
          "name": ".python-version-default",
          "type": "blob",
          "size": 0.0048828125,
          "content": "3.13\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.455078125,
          "content": "---\nversion: 2\n\nbuild:\n  os: ubuntu-lts-latest\n  tools:\n    # Keep version in sync with tox.ini/docs and ci.yml/docs.\n    python: \"3.12\"\n  jobs:\n    # Need the tags to calculate the version.\n    post_checkout:\n      - git fetch --tags\n\n    # Replace versions in sponsor URLs.\n    pre_build:\n      - python -Im pip install tox-uv\n      - python -Im tox run -e docs-sponsors\n\npython:\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - docs\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 44.53515625,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/) and this project adheres to [Calendar Versioning](https://calver.org/).\n\nThe **first number** of the version is the year.\nThe **second number** is incremented with each release, starting at 1 for each year.\nThe **third number** is for emergencies when we need to start branches for older releases.\n\nYou can find our backwards-compatibility policy [here](https://github.com/hynek/structlog/blob/main/.github/SECURITY.md).\n\n<!-- changelog follows -->\n\n\n## [Unreleased](https://github.com/hynek/structlog/compare/24.4.0...HEAD)\n\n## Changed\n\n- `structlog.typing.BindableLogger` protocol now returns `Self` instead of `BindableLogger`.\n  This adds a dependency on [*typing-extensions*](https://pypi.org/project/typing-extensions/) for Pythons older than 3.11.\n\n  [#642](https://github.com/hynek/structlog/pull/642)\n  [#659](https://github.com/hynek/structlog/pull/659)\n\n- `structlog.dev.ConsoleRenderer` will quote string value with special characters.\n\n  [#647](https://github.com/hynek/structlog/pull/647)\n\n\n## Fixed\n\n- Fix handling calls to `{logger}.exception()` outside of exception blocks.\n  Depending on the structlog configuration,\n  this either resulted in an event dict key `exception: \"MISSING\"` or lead to an error.\n  Now, an invalid or missing `exc_info` will just be ignored.\n  This means, that calling `{logger}.exception()` outside of an exception block is basically the same as calling `{logger}.error()`.\n\n  [#634](https://github.com/hynek/structlog/issues/634)\n  [#680](https://github.com/hynek/structlog/pull/680)\n\n- Instantiating `structlog.dev.ConsoleRenderer` does not mutate the passed *styles* dict anymore.\n\n  [#669](https://github.com/hynek/structlog/pull/669)\n\n- The native `FilteringBoundLogger.fatal()` method now maps to the critical level, as it does in the standard library.\n  Note that the level is discouraged to use there, so we recommend to stick to `error()` or `critical()`.\n\n  [#677](https://github.com/hynek/structlog/pull/677)\n\n- `structlog.tracebacks.ExceptionDictTransformer` now actually accepts `None` for `locals_max_length` and `locals_max_string`.\n\n  [#675](https://github.com/hynek/structlog/pull/675)\n\n\n## [24.4.0](https://github.com/hynek/structlog/compare/24.3.0...24.4.0) - 2024-07-17\n\n### Changed\n\nNo code changes since 24.3.0\n\n\n## [24.3.0](https://github.com/hynek/structlog/compare/24.2.0...24.3.0) - 2024-07-17\n\n### Added\n\n- Restore feature parity between `structlog.traceback.ExceptionDictTransformer` and Rich's traceback extractor:\n\n  - When displaying locals, use Rich for formatting if it is available.\n  - When displaying locals, call `repr()` on strings, too (improves handling of `SecretStr` implementations).\n  - Add `locals_max_length` config option\n  - Add `locals_hide_sunder` config option\n  - Add `locals_hide_dunder` config option\n  - Add `suppress` config option\n\n  [#627](https://github.com/hynek/structlog/pull/627)\n\n\n### Changed\n\n- `structlog.testing.capture_logs()` now maps the `exception` log level to `error` (as it's elsewhere).\n  [#628](https://github.com/hynek/structlog/pull/628)\n\n\n## [24.2.0](https://github.com/hynek/structlog/compare/24.1.0...24.2.0) - 2024-05-27\n\n### Added\n\n- It is now possible to disable log level-padding in `structlog.dev.LogLevelColumnFormatter` and `structlog.dev.ConsoleRenderer`.\n  [#599](https://github.com/hynek/structlog/pull/599)\n\n- The `structlog.processors.CallsiteParameterAdder` can now be pickled.\n  [#603](https://github.com/hynek/structlog/pull/603)\n\n- `structlog.processors.CallsiteParameterAdder` now also works with `structlog.stdlib.BoundLogger`'s non-standard async methods (`ainfo()`, and so forth)\n  [#618](https://github.com/hynek/structlog/pull/618)\n\n\n### Changed\n\n- `structlog.processors.LogfmtRenderer` now escapes newlines.\n  [#592](https://github.com/hynek/structlog/pull/592)\n\n- `structlog.processors.LogfmtRenderer` now escapes backslashes and double quotes.\n  [#594](https://github.com/hynek/structlog/pull/594)\n\n- `structlog.processors.CallsiteParameterAdder` has been optimized to be about 2x faster.\n  [#606](https://github.com/hynek/structlog/pull/606)\n\n\n### Fixed\n\n- `structlog.stdlib.render_to_log_kwargs` now correctly passes stacklevel as a kwarg to stdlib logging.\n  [#619](https://github.com/hynek/structlog/pull/620)\n\n\n\n## [24.1.0](https://github.com/hynek/structlog/compare/23.3.0...24.1.0) - 2024-01-08\n\n### Fixed\n\n- The lazy logger proxy returned by `structlog.get_logger()` now returns its initial values when asked for context.\n  When asked for context before binding for the first time, it returned an empty dictionary in 23.3.0.\n\n- The displayed level name when using `structlog.stdlib.BoundLogger.exception()` is `\"error\"` instead of `\"exception\"`.\n  Fixes regression in 23.3.0.\n  [#584](https://github.com/hynek/structlog/issues/584)\n\n- Don't ignore the `width` argument of `RichTracebackFormatter`.\n  [#587](https://github.com/hynek/structlog/issues/587)\n\n\n## [23.3.0](https://github.com/hynek/structlog/compare/23.2.0...23.3.0) - 2023-12-29\n\n### Added\n\n- The colorful development logger is now even more configurable!\n  Choose freely your colors and the order of the key-value pairs!\n  Implement your own formatters for certain keys!\n\n  Implementing the output on top of the new columns API has changed the default very slightly, but shouldn't be noticeable.\n  [#577](https://github.com/hynek/structlog/issues/577)\n\n- Async log methods (those starting with an `a`) now also support the collection of callsite information using `structlog.processors.CallsiteParameterAdder`.\n  [#565](https://github.com/hynek/structlog/issues/565)\n\n\n### Changed\n\n- `structlog.stdlib.recreate_defaults()` now also adds `structlog.stdlib.add_logger_name` to the processors.\n  Check out the [updated screenshot](https://raw.githubusercontent.com/hynek/structlog/main/docs/_static/console_renderer.png)!\n\n\n### Fixed\n\n- The return value from `get_logger()` (a `BoundLoggerLazyProxy`) now passes `isinstance`-checks against `structlog.typing.BindableLogger` on Python 3.12.\n  [#561](https://github.com/hynek/structlog/issues/561)\n\n- `structlog.threadlocal.tmp_bind()` now also works with `BoundLoggerLazyProxy` (in other words: before anything is bound to a bound logger).\n\n- stdlib: `ProcessorFormatter` can now be told to not render the log record message using `getMessage` and just `str(record.msg)` instead.\n  [#550](https://github.com/hynek/structlog/issues/550)\n\n- stdlib: `structlog.stdlib.BoundLogger.exception()`'s handling of`LogRecord.exc_info` is now set consistent with `logging`.\n  [#571](https://github.com/hynek/structlog/issues/571)\n  [#572](https://github.com/hynek/structlog/issues/572)\n\n\n## [23.2.0](https://github.com/hynek/structlog/compare/23.1.0...23.2.0) - 2023-10-09\n\n### Removed\n\n- Support for Python 3.7.\n\n\n### Added\n\n- Official support for Python 3.12.\n  [#515](https://github.com/hynek/structlog/issues/515)\n\n- `structlog.processors.MaybeTimeStamper` that only adds a timestamp if there isn't one already.\n  [#81](https://github.com/hynek/structlog/issues/81)\n\n- `structlog.dev.ConsoleRenderer` now supports renamed timestamp keys using the *timestamp_key* parameter.\n  [#541](https://github.com/hynek/structlog/issues/541)\n\n- `structlog.dev.RichTracebackFormatter` that allows to configure the traceback formatting.\n  [#542](https://github.com/hynek/structlog/issues/542)\n\n\n### Fixed\n\n- `FilteringBoundLogger.exception()` and  `FilteringBoundLogger.aexception()` now support positional argument formatting like the rest of the methods.\n  [#531](https://github.com/hynek/structlog/issues/531)\n- `structlog.processors.format_exc_info()` and `structlog.dev.ConsoleRenderer` do not crash anymore when told to format a non-existent exception.\n  [#533](https://github.com/hynek/structlog/issues/533)\n\n\n## [23.1.0](https://github.com/hynek/structlog/compare/22.3.0...23.1.0) - 2023-04-06\n\n### Added\n\n- `structlog.stdlib.BoundLogger` now has, analogously to our native logger, a full set of async log methods prefixed with an `a`: `await log.ainfo(\"event!\")`\n  [#502](https://github.com/hynek/structlog/issues/502)\n\n- The default configuration now respects the presence of `FORCE_COLOR` (regardless of its value, unless an empty string).\n  This disables all heuristics whether it makes sense to use colors.\n  [#503](https://github.com/hynek/structlog/issues/503)\n\n- The default configuration now respects the presence of [`NO_COLOR`](https://no-color.org) (regardless of its value, unless an empty string).\n  This disables all heuristics whether it makes sense to use colors and overrides `FORCE_COLOR`.\n  [#504](https://github.com/hynek/structlog/issues/504)\n\n\n### Fixed\n\n- ConsoleRenderer now reuses the `_figure_out_exc_info` to process the `exc_info` argument like `ExceptionRenderer` does.\n  This prevents crashes if the actual Exception is passed for the *exc_info* argument instead of a tuple or `True`.\n  [#482](https://github.com/hynek/structlog/issues/482)\n\n- `FilteringBoundLogger.aexception()` now extracts the exception info using `sys.exc_info()` before passing control to the asyncio executor (where original exception info is no longer available).\n  [#488](https://github.com/hynek/structlog/issues/488)\n\n\n## [22.3.0](https://github.com/hynek/structlog/compare/22.2.0...22.3.0) - 2022-11-24\n\n### Changed\n\n- String interpolation in `FilteringBoundLogger` (used by default) is now only attempted if positional arguments are passed.\n  This prevents crashes if something different than a string is passed for the *event* argument.\n  [#475](https://github.com/hynek/structlog/pull/475)\n\n\n### Fixed\n\n- String interpolation doesn't cause crashes in filtered log call anymore.\n  [#478](https://github.com/hynek/structlog/pull/478)\n\n\n## [22.2.0](https://github.com/hynek/structlog/compare/22.1.0...22.2.0) - 2022-11-19\n\n### Deprecated\n\n- Accessing package metadata as attributes on the *structlog* module is deprecated (for example, `structlog.__version__`).\n  Please use [`importlib.metadata`](https://docs.python.org/3.10/library/importlib.metadata.html) instead (for Python 3.7: the [*importlib-metadata*](https://pypi.org/project/importlib-metadata/) PyPI package).\n- The `structlog.types` module is now deprecated in favor of the `structlog.typing` module.\n  It seems like the Python typing community is settling on this name.\n\n\n### Added\n\n- `FilteringBoundLogger` (used by default) now allows for string interpolation using positional arguments:\n\n  ```pycon\n  >>> log.info(\"Hello %s! The answer is %d.\", \"World\", 42, x=1)\n  2022-10-07 10:04.31 [info     ] Hello World! The answer is 42. x=1\n  ```\n\n  [#454](https://github.com/hynek/structlog/pull/454)\n\n- `FilteringBoundLogger` now also has support for *asyncio*-based logging.\n  Instead of a wrapper class like `structlog.stdlib.AsyncBoundLogger`, async equivalents have been added for all logging methods.\n  So instead of `log.info(\"hello\")` you can also write `await log.ainfo(\"hello\")` in async functions and methods.\n\n  This seems like the better approach and if it's liked by the community, `structlog.stdlib.BoundLogger` will get those methods too.\n  [#457](https://github.com/hynek/structlog/pull/457)\n\n\n### Changed\n\n- The documentation has been **heavily** overhauled.\n  Have a look if you haven't lately!\n  Especially the graphs in the [standard library chapter](https://www.structlog.org/en/latest/standard-library.html) have proven valuable to many.\n- The build backend has been switched to [*Hatch*](https://hatch.pypa.io/).\n\n\n### Fixed\n\n- The timestamps in the default configuration now use the correct separator (`:`) for seconds.\n\n\n## [22.1.0](https://github.com/hynek/structlog/compare/21.5.0...22.1.0) - 2022-07-20\n\n### Removed\n\n- Python 3.6 is not supported anymore.\n- Pickling is now only possible with protocol version 3 and newer.\n\n\n### Deprecated\n\n- The entire `structlog.threadlocal` module is deprecated.\n  Please use the primitives from `structlog.contextvars` instead.\n\n  If you're using the modern APIs (`bind_threadlocal()` / `merge_threadlocal()`) it's enough to replace them 1:1 with their `contextvars` counterparts.\n  The old approach around `wrap_dict()` has been discouraged for a while.\n\n  Currently there are no concrete plans to remove the module, but no patches against it will be accepted from now on.\n  [#409](https://github.com/hynek/structlog/pull/409)\n\n\n### Added\n\n- `structlog.processors.StackInfoRenderer` now has an *additional_ignores* parameter that allows you to filter out your own logging layer.\n  [#396](https://github.com/hynek/structlog/issues/396)\n- Added `structlog.WriteLogger`, a faster – but more low-level – alternative to `structlog.PrintLogger`.\n  It works the way `PrintLogger` used to work in previous versions.\n  [#403](https://github.com/hynek/structlog/pull/403)\n  [#404](https://github.com/hynek/structlog/pull/404)\n- `structlog.make_filtering_bound_logger()`-returned loggers now also have a `log()` method to match the `structlog.stdlib.BoundLogger` signature closer.\n  [#413](https://github.com/hynek/structlog/pull/413)\n- Added structured logging of tracebacks via the `structlog.tracebacks` module,\n  and most notably the `structlog.tracebacks.ExceptionDictTransformer` which can be used with the new `structlog.processors.ExceptionRenderer` to render JSON tracebacks.\n  [#407](https://github.com/hynek/structlog/pull/407)\n- `structlog.stdlib.recreate_defaults(log_level=logging.NOTSET)` that recreates *structlog*'s defaults on top of standard library's `logging`.\n  It optionally also configures `logging` to log to standard out at the passed log level.\n  [#428](https://github.com/hynek/structlog/pull/428)\n- `structlog.processors.EventRenamer` allows you to rename the hitherto hard-coded event dict key `event` to something else.\n  Optionally, you can rename another key to `event` at the same time, too.\n  So adding `EventRenamer(to=\"msg\", replace_by=\"_event\")` to your processor pipeline will rename the standard `event` key to `msg` and then rename the `_event` key to `event`.\n  This allows you to use the `event` key in your own log files and to have consistent log message keys across languages.\n- `structlog.dev.ConsoleRenderer(event_key=\"event\")` now allows to customize the name of the key that is used for the log message.\n\n\n### Changed\n\n- `structlog.make_filtering_bound_logger()` now returns a method with the same signature for all log levels, whether they are active or not.\n  This ensures that invalid calls to inactive log levels are caught immediately and don't explode once the log level changes.\n  [#401](https://github.com/hynek/structlog/pull/401)\n- `structlog.PrintLogger` – that is used by default – now uses `print()` for printing, making it a better citizen for interactive terminal applications.\n  [#399](https://github.com/hynek/structlog/pull/399)\n- `structlog.testing.capture_logs` now works for already initialized bound loggers.\n  [#408](https://github.com/hynek/structlog/pull/412)\n- `structlog.processors.format_exc_info()` is no longer a function, but an instance of `structlog.processors.ExceptionRenderer`.\n  Its behavior has not changed.\n  [#407](https://github.com/hynek/structlog/pull/407)\n- The default configuration now includes the `structlog.contextvars.merge_contextvars` processor.\n  That means you can use [`structlog.contextvars`](https://www.structlog.org/en/stable/contextvars.html) features without configuring *structlog*.\n\n\n### Fixed\n\n- Overloaded the `bind`, `unbind`, `try_unbind` and `new` methods in the `FilteringBoundLogger` [Protocol](https://docs.python.org/3/library/typing.html#typing.Protocol).\n  This makes it easier to use objects of type `FilteringBoundLogger` in a typed context.\n  [#392](https://github.com/hynek/structlog/pull/392)\n- Monkeypatched `sys.stdout`s are now handled more gracefully by `ConsoleRenderer` (that's used by default).\n  [#404](https://github.com/hynek/structlog/pull/404)\n- `structlog.stdlib.render_to_log_kwargs()` now correctly handles the presence of `exc_info`, `stack_info`, and `stackLevel` in the event dictionary.\n  They are transformed into proper keyword arguments instead of putting them into the `extra` dictionary.\n  [#424](https://github.com/hynek/structlog/issues/424),\n  [#427](https://github.com/hynek/structlog/issues/427)\n\n\n## [21.5.0](https://github.com/hynek/structlog/compare/21.4.0...21.5.0) - 2021-12-16\n\n### Added\n\n- Added the `structlog.processors.LogfmtRenderer` processor to render log lines using the [*logfmt*](https://brandur.org/logfmt) format.\n  [#376](https://github.com/hynek/structlog/pull/376)\n- Added the `structlog.stdlib.ExtraAdder` processor that adds extra attributes of `logging.LogRecord` objects to the event dictionary.\n  This processor can be used for adding data passed in the `extra` parameter of the `logging` module's log methods to the event dictionary.\n  [#209](https://github.com/hynek/structlog/pull/209),\n  [#377](https://github.com/hynek/structlog/pull/377)\n- Added the `structlog.processor.CallsiteParameterAdder` processor that adds parameters of the callsite that an event dictionary originated from to the event dictionary.\n  This processor can be used to enrich events dictionaries with information such as the function name, line number and filename that an event dictionary originated from.\n  [#380](https://github.com/hynek/structlog/pull/380)\n\n\n## [21.4.0](https://github.com/hynek/structlog/compare/21.3.0...21.4.0) - 2021-11-25\n\n### Added\n\n- Added the `structlog.threadlocal.bound_threadlocal` and `structlog.contextvars.bound_contextvars` decorator/context managers to temporarily bind key-value pairs to a thread-local and context-local context.\n  [#371](https://github.com/hynek/structlog/pull/371)\n\n\n### Fixed\n\n- Fixed import when running in optimized mode (`PYTHONOPTIMIZE=2` or `python -OO`)\n.\n  [#373](https://github.com/hynek/structlog/pull/373)\n\n\n## [21.3.0](https://github.com/hynek/structlog/compare/21.2.0...21.3.0) - 2021-11-20\n\n### Added\n\n- `structlog.dev.ConsoleRenderer` now has `sort_keys` boolean parameter that allows to disable the sorting of keys on output.\n  [#358](https://github.com/hynek/structlog/pull/358)\n\n\n### Changed\n\n- *structlog* switched its packaging to [*flit*](https://flit.pypa.io/).\n  Users shouldn't notice a difference, but (re-)packagers might.\n- `structlog.stdlib.AsyncBoundLogger` now determines the running loop when logging, not on instantiation.\n  That has a minor performance impact, but makes it more robust when loops change (for example, `aiohttp.web.run_app()`), or you want to use `sync_bl` *before* a loop has started.\n\n\n### Fixed\n\n- `structlog.processors.TimeStamper` now works well with [*FreezeGun*](https://github.com/spulec/freezegun) even when it gets applied before the loggers are configured.\n  [#364](https://github.com/hynek/structlog/pull/364)\n\n- `structlog.stdlib.ProcessorFormatter` now has a *processors* argument that allows to define a processor chain to run over *all* log entries.\n\n  Before running the chain, two additional keys are added to the event dictionary: `_record` and `_from_structlog`.\n  With them it's possible to extract information from `logging.LogRecord`s and differentiate between *structlog* and `logging` log entries while processing them.\n\n  The old *processor* (singular) parameter is now deprecated, but no plans exist to remove it.\n  [#365](https://github.com/hynek/structlog/pull/365)\n\n\n## [21.2.0](https://github.com/hynek/structlog/compare/21.1.0...21.2.0) - 2021-10-12\n\n### Added\n\n- `structlog.threadlocal.get_threadlocal()` and `structlog.contextvars.get_contextvars()` can now be used to get a copy of the current thread-local/context-local context that has been bound using `structlog.threadlocal.bind_threadlocal()` and `structlog.contextvars.bind_contextvars()`.\n  [#331](https://github.com/hynek/structlog/pull/331),\n  [#337](https://github.com/hynek/structlog/pull/337)\n- `structlog.threadlocal.get_merged_threadlocal(bl)` and `structlog.contextvars.get_merged_contextvars(bl)` do the same, but also merge the context from a bound logger *bl*.\n  Same pull requests as previous change.\n- `structlog.contextvars.bind_contextvars()` now returns a mapping of keys to `contextvars.Token`s, allowing you to reset values using the new `structlog.contextvars.reset_contextvars()`.\n  [#339](https://github.com/hynek/structlog/pull/339)\n- Exception rendering in `structlog.dev.ConsoleLogger` is now configurable using the `exception_formatter` setting.\n  If either the [Rich](https://github.com/Textualize/rich) or the [*better-exceptions*](https://github.com/qix-/better-exceptions) package is present, *structlog* will use them for pretty-printing tracebacks.\n  Rich takes precedence over *better-exceptions* if both are present.\n\n  This only works if `format_exc_info` is **absent** in the processor chain.\n  [#330](https://github.com/hynek/structlog/pull/330),\n  [#349](https://github.com/hynek/structlog/pull/349)\n- The final processor can now return a `bytearray` (additionally to `str` and `bytes`).\n  [#344](https://github.com/hynek/structlog/issues/344)\n\n\n### Changed\n\n- To implement pretty exceptions (see Changes below), `structlog.dev.ConsoleRenderer` now formats exceptions itself.\n\n  Make sure to remove `format_exc_info` from your processor chain if you configure *structlog* manually.\n  This change is not really breaking, because the old use-case will keep working as before.\n  However if you pass `pretty_exceptions=True` (which is the default if either `rich` or `better-exceptions` is installed), a warning will be raised and the exception will be rendered without prettification.\n- All use of [Colorama](https://github.com/tartley/colorama) on non-Windows systems has been excised.\n  Thus, colors are now enabled by default in `structlog.dev.ConsoleRenderer` on non-Windows systems.\n  You can keep using Colorama to customize colors, of course.\n  [#345](https://github.com/hynek/structlog/pull/345)\n\n\n### Fixed\n\n- *structlog* is now importable if `sys.stdout` is `None` (for example, when running using `pythonw`). [#313](https://github.com/hynek/structlog/issues/313)\n\n\n## [21.1.0](https://github.com/hynek/structlog/compare/20.2.0...21.1.0) - 2021-02-18\n\n### Changed\n\n- `structlog.dev.ConsoleRenderer` will now look for a `logger_name` key if no `logger` key is set.\n  [#295](https://github.com/hynek/structlog/pull/295)\n\n\n### Fixed\n\n- `structlog.threadlocal.wrap_dict()` now has a correct type annotation.\n  [#290](https://github.com/hynek/structlog/pull/290)\n- Fix isolation in `structlog.contextvars`.\n  [#302](https://github.com/hynek/structlog/pull/302)\n- The default configuration and loggers are pickleable again.\n  [#301](https://github.com/hynek/structlog/pull/301)\n\n\n## [20.2.0](https://github.com/hynek/structlog/compare/20.1.0...20.2.0) - 2020-12-31\n\n### Removed\n\n- Python 2.7 and 3.5 aren't supported anymore.\n  The package meta data should ensure that you keep getting 20.1.0 on those versions.\n  [#244](https://github.com/hynek/structlog/pull/244)\n\n\n### Deprecated\n\n- Accessing the `_context` attribute of a bound logger is now deprecated.\n  Please use the new `structlog.get_context()`.\n\n\n### Added\n\n- *structlog* has now type hints for all of its APIs!\n  Since *structlog* is highly dynamic and configurable, this led to a few concessions like a specialized `structlog.stdlib.get_logger()` whose only difference to `structlog.get_logger()` is that it has the correct type hints.\n\n  We consider them provisional for the time being – that means the backwards-compatibility does not apply to them in its full strength until we feel we got it right.\n  Please feel free to provide feedback!\n  [#223](https://github.com/hynek/structlog/issues/223),\n  [#282](https://github.com/hynek/structlog/issues/282)\n- Added `structlog.make_filtering_logger` that can be used like `configure(wrapper_class=make_filtering_bound_logger(logging.INFO))`.\n  It creates a highly optimized bound logger whose inactive methods only consist of a `return None`.\n  This is now also the default logger.\n- As a complement, `structlog.stdlib.add_log_level()` can now additionally be imported as `structlog.processors.add_log_level` since it just adds the method name to the event dict.\n- Added `structlog.BytesLogger` to avoid unnecessary encoding round trips.\n  Concretely this is useful with *orjson* which returns bytes.\n  [#271](https://github.com/hynek/structlog/issues/271)\n- The final processor now also may return bytes that are passed untouched to the wrapped logger.\n- `structlog.get_context()` allows you to retrieve the original context of a bound logger. [#266](https://github.com/hynek/structlog/issues/266),\n- Added `structlog.testing.CapturingLogger` for more unit testing goodness.\n- Added `structlog.stdlib.AsyncBoundLogger` that executes logging calls in a thread executor and therefore doesn't block.\n  [#245](https://github.com/hynek/structlog/pull/245)\n\n\n### Changed\n\n- The default bound logger (`wrapper_class`) if you don't configure *structlog* has changed.\n  It's mostly compatible with the old one but a few uncommon methods like `log`, `failure`, or `err` don't exist anymore.\n\n  You can regain the old behavior by using `structlog.configure(wrapper_class=structlog.BoundLogger)`.\n\n  Please note that due to the various interactions between settings, it's possible that you encounter even more errors.\n  We **strongly** urge you to always configure all possible settings since the default configuration is *not* covered by our backwards-compatibility policy.\n- `structlog.processors.add_log_level()` is now part of the default configuration.\n- `structlog.stdlib.ProcessorFormatter` no longer uses exceptions for control flow, allowing `foreign_pre_chain` processors to use `sys.exc_info()` to access the real exception.\n\n\n### Fixed\n\n- `structlog.PrintLogger` now supports `copy.deepcopy()`.\n  [#268](https://github.com/hynek/structlog/issues/268)\n\n\n## [20.1.0](https://github.com/hynek/structlog/compare/19.2.0...20.1.0) - 2020-01-28\n\n### Deprecated\n\n- This is the last version to support Python 2.7 (including PyPy) and 3.5.\n  All following versions will only support Python 3.6 or later.\n\n\n### Added\n\n- Added a new module `structlog.contextvars` that allows to have a global but context-local *structlog* context the same way as with `structlog.threadlocal` since 19.2.0.\n  [#201](https://github.com/hynek/structlog/issues/201),\n  [#236](https://github.com/hynek/structlog/pull/236)\n- Added a new module `structlog.testing` for first class testing support.\n  The first entry is the context manager `capture_logs()` that allows to make assertions about structured log calls.\n  [#14](https://github.com/hynek/structlog/issues/14),\n  [#234](https://github.com/hynek/structlog/pull/234)\n- Added `structlog.threadlocal.unbind_threadlocal()`.\n  [#239](https://github.com/hynek/structlog/pull/239)\n\n\n### Fixed\n\n- The logger created by `structlog.get_logger()` is not detected as an abstract method anymore, when attached to an abstract base class.\n  [#229](https://github.com/hynek/structlog/issues/229)\n- Colorama isn't initialized lazily on Windows anymore because it breaks rendering.\n  [#232](https://github.com/hynek/structlog/issues/232),\n  [#242](https://github.com/hynek/structlog/pull/242)\n\n\n## [19.2.0](https://github.com/hynek/structlog/compare/19.1.0...19.2.0) - 2019-10-16\n\n### Removed\n\n- Python 3.4 is not supported anymore.\nIt has been unsupported by the Python core team for a while now and its PyPI downloads are negligible.\n\n  It's very unlikely that *structlog* will break under 3.4 anytime soon, but we don't test it anymore.\n\n\n### Added\n\n- Full Python 3.8 support for `structlog.stdlib`.\n- Added more pass-through properties to `structlog.stdlib.BoundLogger`. To makes it easier to use it as a drop-in replacement for `logging.Logger`.\n  [#198](https://github.com/hynek/structlog/issues/198)\n- Added new processor `structlog.dev.set_exc_info()` that will set `exc_info=True` if the method's name is `exception` and `exc_info` isn't set at all.\n  *This is only necessary when the standard library integration is not used*.\n  It fixes the problem that in the default configuration, `structlog.get_logger().exception(\"hi\")` in an `except` block would not print the exception without passing `exc_info=True` to it explicitly.\n  [#130](https://github.com/hynek/structlog/issues/130),\n  [#173](https://github.com/hynek/structlog/issues/173),\n  [#200](https://github.com/hynek/structlog/issues/200),\n  [#204](https://github.com/hynek/structlog/issues/204)\n- Added a new thread-local API that allows binding values to a thread-local context explicitly without affecting the default behavior of `bind()`.\n  [#222](https://github.com/hynek/structlog/issues/222),\n  [#225](https://github.com/hynek/structlog/issues/225)\n- Added *pass_foreign_args* argument to `structlog.stdlib.ProcessorFormatter`. It allows to pass a foreign log record's *args* attribute to the event dictionary under the `positional_args` key.\n  [#228](https://github.com/hynek/structlog/issues/228)\n\n\n\n### Changed\n\n- `structlog.stdlib.ProcessorFormatter` now takes a logger object as an optional keyword argument.\n  This makes `ProcessorFormatter` work properly with `stuctlog.stdlib.filter_by_level()`.\n  [#219](https://github.com/hynek/structlog/issues/219)\n- `structlog.dev.ConsoleRenderer` now calls `str()` on the event value. [#221](https://github.com/hynek/structlog/issues/221)\n\n\n### Fixed\n\n- `structlog.dev.ConsoleRenderer` now uses no colors by default, if Colorama is not available.\n  [#215](https://github.com/hynek/structlog/issues/215)\n- `structlog.dev.ConsoleRenderer` now initializes Colorama lazily, to prevent accidental side-effects just by importing *structlog*.\n  [#210](https://github.com/hynek/structlog/issues/210)\n- A best effort has been made to make as much of *structlog* pickleable as possible to make it friendlier with `multiprocessing` and similar libraries.\n  Some classes can only be pickled on Python 3 or using the [dill](https://pypi.org/project/dill/) library though and that is very unlikely to change.\n\n  So far, the configuration proxy, `structlog.processor.TimeStamper`, `structlog.BoundLogger`, `structlog.PrintLogger` and `structlog.dev.ConsoleRenderer` have been made pickleable.\n  Please report if you need any another class fixed.\n  [#126](https://github.com/hynek/structlog/issues/126)\n\n\n## [19.1.0](https://github.com/hynek/structlog/compare/18.2.0...19.1.0) - 2019-02-02\n\n### Added\n\n- `structlog.ReturnLogger` and `structlog.PrintLogger` now have a `fatal()` log method.\n  [#181](https://github.com/hynek/structlog/issues/181)\n\n\n### Changed\n\n- As announced in 18.1.0, `pip install -e .[dev]` now installs all development dependencies.\n  Sorry for the inconveniences this undoubtedly will cause!\n- *structlog* now tolerates passing through `dict`s to stdlib logging.\n  [#187](https://github.com/hynek/structlog/issues/187),\n  [#188](https://github.com/hynek/structlog/pull/188),\n  [#189](https://github.com/hynek/structlog/pull/189)\n\n\n### Fixed\n\n- Under certain (rather unclear) circumstances, the frame extraction could throw an `SystemError: error return without exception set`.\n  A workaround has been added.\n  [#174](https://github.com/hynek/structlog/issues/174)\n\n\n## [18.2.0](https://github.com/hynek/structlog/compare/18.1.0...18.2.0) - 2018-09-05\n\n### Added\n\n- Added `structlog.stdlib.add_log_level_number()` processor that adds the level *number* to the event dictionary.\n  Can be used to simplify log filtering.\n  [#151](https://github.com/hynek/structlog/pull/151)\n- `structlog.processors.JSONRenderer` now allows for overwriting the *default* argument of its serializer.\n  [#77](https://github.com/hynek/structlog/pull/77),\n  [#163](https://github.com/hynek/structlog/pull/163)\n- Added `try_unbind()` that works like `unbind()` but doesn't raise a `KeyError` if one of the keys is missing.\n  [#171](https://github.com/hynek/structlog/pull/171)\n\n\n## [18.1.0](https://github.com/hynek/structlog/compare/17.2.0...18.1.0) - 2018-01-27\n\n### Deprecated\n\n- The meaning of the `structlog[dev]` installation target will change from \"colorful output\" to \"dependencies to develop *structlog*\" in 19.1.0.\n\n  The main reason behind this decision is that it's impossible to have a *structlog* in your normal dependencies and additionally a `structlog[dev]` for development (`pip` will report an error).\n\n\n### Added\n\n- `structlog.dev.ConsoleRenderer` now accepts a *force_colors* argument to output colored logs even if the destination is not a tty.\n  Use this option if your logs are stored in files that are intended to be streamed to the console.\n- `structlog.dev.ConsoleRenderer` now accepts a *level_styles* argument for overriding the colors for individual levels, as well as to add new levels.\n  See the docs for `ConsoleRenderer.get_default_level_styles()` for usage.\n  [#139](https://github.com/hynek/structlog/pull/139)\n- Added `structlog.is_configured()` to check whether or not *structlog* has been configured.\n- Added `structlog.get_config()` to introspect current configuration.\n\n\n### Changed\n\n- Empty strings are valid events now.\n  [#110](https://github.com/hynek/structlog/issues/110)\n- `structlog.stdlib.BoundLogger.exception()` now uses the `exc_info` argument if it has been passed instead of setting it unconditionally to `True`. [#149](https://github.com/hynek/structlog/pull/149)\n- Default configuration now uses plain `dict`s on Python 3.6+ and PyPy since they are ordered by default.\n\n\n### Fixed\n- Do not encapsulate Twisted failures twice with newer versions of Twisted.\n  [#144](https://github.com/hynek/structlog/issues/144)\n\n\n## [17.2.0](https://github.com/hynek/structlog/compare/17.1.0...17.2.0) - 2017-05-15\n\n### Added\n\n- `structlog.stdlib.ProcessorFormatter` now accepts *keep_exc_info* and *keep_stack_info* arguments to control what to do with this information on log records.\n  Most likely you want them both to be `False` therefore it's the default.\n  [#109](https://github.com/hynek/structlog/issues/109)\n\n\n### Fixed\n- `structlog.stdlib.add_logger_name()` now works in `structlog.stdlib.ProcessorFormatter`'s `foreign_pre_chain`.\n  [#112](https://github.com/hynek/structlog/issues/112)\n- Clear log record args in `structlog.stdlib.ProcessorFormatter` after rendering.\n  This fix is for you if you tried to use it and got `TypeError: not all arguments converted during string formatting` exceptions.\n  [#116](https://github.com/hynek/structlog/issues/116),\n  [#117](https://github.com/hynek/structlog/issues/117)\n\n\n## [17.1.0](https://github.com/hynek/structlog/compare/16.1.0...17.1.0) - 2017-04-24\n\nThe main features of this release are massive improvements in standard library's `logging` integration.\nHave a look at the updated [standard library chapter](https://www.structlog.org/en/stable/standard-library.html) on how to use them!\nSpecial thanks go to [Fabian Büchler](https://github.com/fabianbuechler), [Gilbert Gilb's](https://github.com/gilbsgilbs), [Iva Kaneva](https://github.com/if-fi), [insolite](https://github.com/insolite), and [sky-code](https://github.com/sky-code), that made them possible.\n\n\n### Added\n\n- Added `structlog.stdlib.render_to_log_kwargs()`.\n  This allows you to use `logging`-based formatters to take care of rendering your entries.\n  [#98](https://github.com/hynek/structlog/issues/98)\n- Added `structlog.stdlib.ProcessorFormatter` which does the opposite: This allows you to run *structlog* processors on arbitrary `logging.LogRecords`.\n  [#79](https://github.com/hynek/structlog/issues/79),\n  [#105](https://github.com/hynek/structlog/issues/105)\n- Added *repr_native_str* to `structlog.processors.KeyValueRenderer` and `structlog.dev.ConsoleRenderer`.\n  This allows for human-readable non-ASCII output on Python 2 (`repr()` on Python 2 behaves like `ascii()` on Python 3 in that regard).\n  As per compatibility policy, it's on (original behavior) in `KeyValueRenderer` and off (human-friendly behavior) in `ConsoleRenderer`.\n  [#94](https://github.com/hynek/structlog/issues/94)\n- Added *colors* argument to `structlog.dev.ConsoleRenderer` and made it the default renderer.\n  [#78](https://github.com/hynek/structlog/pull/78)\n\n\n### Changed\n\n- The default renderer now is `structlog.dev.ConsoleRenderer` if you don't configure *structlog*.\n  Colors are used if available and human-friendly timestamps are prepended.\n  This is in line with our backwards-compatibility policy that explicitly excludes default settings.\n- UNIX epoch timestamps from `structlog.processors.TimeStamper` are more precise now.\n- Positional arguments are now removed even if they are empty.\n  [#82](https://github.com/hynek/structlog/pull/82)\n\n\n## Fixed\n\n- Fixed bug with Python 3 and `structlog.stdlib.BoundLogger.log()`.\n  Error log level was not reproducible and was logged as exception one time out of two.\n  [#92](https://github.com/hynek/structlog/pull/92)\n\n\n## [16.1.0](https://github.com/hynek/structlog/compare/16.0.0...16.1.0) - 2016-05-24\n\n### Removed\n\n- Python 3.3 and 2.6 aren't supported anymore.\n  They may work by chance but any effort to keep them working has ceased.\n\n  The last Python 2.6 release was on October 29, 2013 and isn't supported by the CPython core team anymore.\n  Major Python packages like Django and Twisted dropped Python 2.6 a while ago already.\n\n  Python 3.3 never had a significant user base and wasn't part of any distribution's LTS release.\n\n\n### Added\n\n- Added a `drop_missing` argument to `KeyValueRenderer`.\n  If `key_order` is used and a key is missing a value, it's not rendered at all instead of being rendered as `None`.\n  [#67](https://github.com/hynek/structlog/pull/67)\n\n\n### Fixed\n\n- Exceptions without a `__traceback__` are now also rendered on Python 3.\n- Don't cache loggers in lazy proxies returned from `get_logger()`.\n  This lead to in-place mutation of them if used before configuration which in turn lead to the problem that configuration was applied only partially to them later.\n  [#72](https://github.com/hynek/structlog/pull/72)\n\n\n## [16.0.0](https://github.com/hynek/structlog/compare/15.3.0...16.0.0) - 2016-01-28\n\n### Added\n\n- Added `structlog.dev.ConsoleRenderer` that renders the event dictionary aligned and with colors.\n- Added `structlog.processors.UnicodeDecoder` that will decode all byte string values in an event dictionary to Unicode.\n- Added `serializer` parameter to `structlog.processors.JSONRenderer` which allows for using different (possibly faster) JSON encoders than the standard library.\n\n\n### Changed\n\n- `structlog.processors.ExceptionPrettyPrinter` and `structlog.processors.format_exc_info` now support passing of Exceptions on Python 3.\n- [*six*](https://six.readthedocs.io/) is now used for compatibility.\n\n\n### Fixed\n\n- The context is now cleaned up when exiting `structlog.threadlocal.tmp_bind` in case of exceptions.\n  [#64](https://github.com/hynek/structlog/issues/64)\n- Be more more lenient about missing `__name__`s.\n  [#62](https://github.com/hynek/structlog/pull/62)\n\n\n## [15.3.0](https://github.com/hynek/structlog/compare/15.2.0...15.3.0) - 2015-09-25\n\n### Added\n\n- Officially support Python 3.5.\n- Added `structlog.ReturnLogger.failure` and `structlog.PrintLogger.failure` as preparation for the new Twisted logging system.\n\n\n### Fixed\n\n- Tolerate frames without a `__name__`, better.\n  [#58](https://github.com/hynek/structlog/pull/58)\n\n\n## [15.2.0](https://github.com/hynek/structlog/compare/15.1.0...15.2.0) - 2015-06-10\n\n### Added\n\n- Added option to specify target key in `structlog.processors.TimeStamper` processor.\n  [#51](https://github.com/hynek/structlog/pull/51)\n\n\n### Changed\n\n- Allow empty lists of processors.\n  This is a valid use case since [#26](https://github.com/hynek/structlog/issues/26) has been merged.\n  Before, supplying an empty list resulted in the defaults being used.\n- Better support of `logging.Logger.exception` within *structlog*.\n  [#52](https://github.com/hynek/structlog/pull/52)\n\n\n### Fixed\n\n- Prevent Twisted's `log.err` from quoting strings rendered by `structlog.twisted.JSONRenderer`.\n\n\n## [15.1.0](https://github.com/hynek/structlog/compare/15.0.0...15.1.0) - 2015-02-24\n\n### Fixed\n\n- Tolerate frames without a `__name__` when guessing callsite names.\n\n\n## [15.0.0](https://github.com/hynek/structlog/compare/0.4.2...15.0.0) - 2015-01-23\n\n### Added\n\n- Added `structlog.stdlib.add_log_level` and `structlog.stdlib.add_logger_name` processors.\n  [#44](https://github.com/hynek/structlog/pull/44)\n- Added `structlog.stdlib.BoundLogger.log`.\n  [#42](https://github.com/hynek/structlog/pull/42)\n- Added `structlog.stdlib.BoundLogger.exception`.\n  [#22](https://github.com/hynek/structlog/pull/22)\n\n\n### Changed\n\n- Pass positional arguments to stdlib wrapped loggers that use string formatting.\n  [#19](https://github.com/hynek/structlog/pull/19)\n- *structlog* is now dually licensed under the [Apache License, Version 2](https://choosealicense.com/licenses/apache/) and the [MIT](https://choosealicense.com/licenses/mit/) license.\n  Therefore it is now legal to use *structlog* with [GPLv2](https://choosealicense.com/licenses/gpl-2.0/)-licensed projects.\n  [#28](https://github.com/hynek/structlog/pull/28)\n\n\n## [0.4.2](https://github.com/hynek/structlog/compare/0.4.1...0.4.2) - 2014-07-26\n\n### Removed\n\n- Drop support for Python 3.2.\n  There is no justification to add complexity for a Python version that nobody uses.\n  If you are one of the [0.350%](https://alexgaynor.net/2014/jan/03/pypi-download-statistics/) that use Python 3.2, please stick to the 0.4 branch; critical bugs will still be fixed.\n\n\n### Added\n\n- Officially support Python 3.4.\n- Allow final processor to return a dictionary.\n  See the adapting chapter.\n  [#26](https://github.com/hynek/structlog/issues/26)\n- Test Twisted-related code on Python 3 (with some caveats).\n\n\n### Fixed\n\n- Fixed a memory leak in greenlet code that emulates thread locals.\n  It shouldn't matter in practice unless you use multiple wrapped dicts within one program that is rather unlikely.\n  [#8](https://github.com/hynek/structlog/pull/8)\n- `structlog.PrintLogger` now is thread-safe.\n- `from structlog import *` works now (but you still shouldn't use it).\n\n\n## [0.4.1](https://github.com/hynek/structlog/compare/0.4.0...0.4.1) - 2013-12-19\n\n### Changed\n\n- Don't cache proxied methods in `structlog.threadlocal._ThreadLocalDictWrapper`. This doesn't affect regular users.\n\n\n### Fixed\n\n- Various doc fixes.\n\n\n## [0.4.0](https://github.com/hynek/structlog/compare/0.3.2...0.4.0) - 2013-11-10\n\n### Added\n\n- Added `structlog.processors.StackInfoRenderer` for adding stack information to log entries without involving exceptions.\n  Also added it to default processor chain.\n  [#6](https://github.com/hynek/structlog/pull/6)\n- Allow optional positional arguments for `structlog.get_logger` that are passed to logger factories.\n  The standard library factory uses this for explicit logger naming.\n  [#12](https://github.com/hynek/structlog/pull/12)\n- Add `structlog.processors.ExceptionPrettyPrinter` for development and testing when multiline log entries aren't just acceptable but even helpful.\n- Allow the standard library name guesser to ignore certain frame names.\n  This is useful together with frameworks.\n- Add meta data (for example, function names, line numbers) extraction for wrapped stdlib loggers. [#5](https://github.com/hynek/structlog/pull/5)\n\n\n## [0.3.2](https://github.com/hynek/structlog/compare/0.3.1...0.3.2) - 2013-09-27\n\n### Fixed\n\n- Fix stdlib's name guessing.\n\n\n## [0.3.1](https://github.com/hynek/structlog/compare/0.3.0...0.3.1) - 2013-09-26\n\n### Fixed\n\n- Added forgotten `structlog.processors.TimeStamper` to API documentation.\n\n\n## [0.3.0](https://github.com/hynek/structlog/compare/0.2.0...0.3.0) - 2013-09-23\n\n### Changes:\n\n- Greatly enhanced and polished the documentation and added a new theme based on Write The Docs, requests, and Flask.\n- Add Python Standard Library-specific BoundLogger that has an explicit API instead of intercepting unknown method calls.\n  See `structlog.stdlib.BoundLogger`.\n- `structlog.ReturnLogger` now allows arbitrary positional and keyword arguments.\n- Add Twisted-specific BoundLogger that has an explicit API instead of intercepting unknown method calls.\n  See `structlog.twisted.BoundLogger`.\n- Allow logger proxies that are returned by `structlog.get_logger` and `structlog.wrap_logger` to cache the BoundLogger they assemble according to configuration on first use.\n  See the chapter on performance and the `cache_logger_on_first_use` argument of `structlog.configure` and `structlog.wrap_logger`.\n- Extract a common base class for loggers that does nothing except keeping the context state.\n  This makes writing custom loggers much easier and more straight-forward. See `structlog.BoundLoggerBase`.\n\n\n## [0.2.0](https://github.com/hynek/structlog/compare/0.1.0...0.2.0) - 2013-09-17\n\n### Added\n\n- Add `key_order` option to `structlog.processors.KeyValueRenderer` for more predictable log entries with any `dict` class.\n- Enhance Twisted support by offering JSONification of non-structlog log entries.\n- Allow for custom serialization in `structlog.twisted.JSONRenderer` without abusing `__repr__`.\n\n\n### Changed\n\n- Promote to stable, thus henceforth a strict backwards-compatibility policy is put into effect.\n- `structlog.PrintLogger` now uses proper I/O routines and is thus viable not only for examples but also for production.\n\n\n## [0.1.0](https://github.com/hynek/structlog/tree/0.1.0) - 2013-09-16\n\nInitial release.\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 0.3974609375,
          "content": "Licensed under either of\n\n- Apache License, Version 2.0 (LICENSE-APACHE or <https://choosealicense.com/licenses/apache/>)\n- or MIT license (LICENSE-MIT or <https://choosealicense.com/licenses/mit/>)\n\nat your option.\n\nAny contribution intentionally submitted for inclusion in the work by you, as\ndefined in the Apache-2.0 license, shall be dual-licensed as above, without any\nadditional terms or conditions.\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 9.935546875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0869140625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Hynek Schlawack and the structlog contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.0703125,
          "content": "structlog\nCopyright 2013 Hynek Schlawack and the structlog contributors\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.767578125,
          "content": "# *structlog*: Structured Logging for Python\n\n<p align=\"center\">\n   <a href=\"https://www.structlog.org/\">\n      <img src=\"docs/_static/structlog_logo.svg\" width=\"35%\" alt=\"structlog: Structured Logging for Python\" />\n   </a>\n</p>\n\n<p align=\"center\">\n   <a href=\"https://www.structlog.org/en/stable/?badge=stable\"><img src=\"https://img.shields.io/badge/Docs-Read%20The%20Docs-black\" alt=\"Documentation\" /></a>\n   <a href=\"https://github.com/hynek/structlog/blob/main/COPYRIGHT\"><img src=\"https://img.shields.io/badge/license-MIT%2FApache--2.0-C06524\" alt=\"License: MIT / Apache 2.0\" /></a>\n   <a href=\"https://bestpractices.coreinfrastructure.org/projects/6560\"><img src=\"https://bestpractices.coreinfrastructure.org/projects/6560/badge\"></a>\n   <a href=\"https://doi.org/10.5281/zenodo.7353739\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.7353739.svg\" alt=\"DOI\"></a>\n   <a href=\"https://pypi.org/project/structlog/\"><img src=\"https://img.shields.io/pypi/pyversions/structlog.svg\" alt=\"Supported Python versions of the current PyPI release.\" /></a>\n   <a href=\"https://pepy.tech/project/structlog\"><img src=\"https://static.pepy.tech/personalized-badge/structlog?period=month&units=international_system&left_color=grey&right_color=blue&left_text=Downloads%20/%20Month\" alt=\"Downloads per month\" /></a>\n</p>\n\n<p align=\"center\"><em>Simple. Powerful. Fast. Pick three.</em></p>\n\n<!-- begin-short -->\n\n*structlog* is *the* production-ready logging solution for Python:\n\n- **Simple**: Everything is about **functions** that take and return **dictionaries** – all hidden behind **familiar APIs**.\n- **Powerful**: Functions and dictionaries aren’t just simple but also powerful.\n  *structlog* leaves *you* in control.\n- **Fast**: *structlog* is not hamstrung by designs of yore.\n  Its flexibility comes not at the price of performance.\n\nThanks to its flexible design, *you* choose whether you want *structlog* to take care of the **output** of your log entries or whether you prefer to **forward** them to an existing logging system like the standard library's `logging` module.\n\nThe output format is just as flexible and *structlog* comes with support for JSON, [*logfmt*](https://brandur.org/logfmt), as well as pretty console output out-of-the-box:\n\n[![image](https://github.com/hynek/structlog/blob/main/docs/_static/console_renderer.png?raw=true)](https://github.com/hynek/structlog/blob/main/docs/_static/console_renderer.png?raw=true)\n\n\n## Sponsors\n\n*structlog* would not be possible without our [amazing sponsors](https://github.com/sponsors/hynek).\nEspecially those generously supporting us at the *The Organization* tier and higher:\n\n<!-- pause-short -->\n\n<p align=\"center\">\n\n<!-- [[[cog\nimport pathlib, tomllib\n\nfor sponsor in tomllib.loads(pathlib.Path(\"pyproject.toml\").read_text())[\"tool\"][\"sponcon\"][\"sponsors\"]:\n      print(f'<a href=\"{sponsor[\"url\"]}\"><img title=\"{sponsor[\"title\"]}\" src=\"docs/_static/sponsors/{sponsor[\"img\"]}\" width=\"190\" /></a>')\n]]] -->\n<a href=\"https://www.variomedia.de/\"><img title=\"Variomedia AG\" src=\"docs/_static/sponsors/Variomedia.svg\" width=\"190\" /></a>\n<a href=\"https://tidelift.com/?utm_source=lifter&utm_medium=referral&utm_campaign=hynek\"><img title=\"Tidelift\" src=\"docs/_static/sponsors/Tidelift.svg\" width=\"190\" /></a>\n<a href=\"https://klaviyo.com/\"><img title=\"Klaviyo\" src=\"docs/_static/sponsors/Klaviyo.svg\" width=\"190\" /></a>\n<a href=\"https://www.emsys-renewables.com/\"><img title=\"emsys renewables\" src=\"docs/_static/sponsors/emsys-renewables.svg\" width=\"190\" /></a>\n<a href=\"https://filepreviews.io/\"><img title=\"FilePreviews\" src=\"docs/_static/sponsors/FilePreviews.svg\" width=\"190\" /></a>\n<a href=\"https://polar.sh/\"><img title=\"Polar\" src=\"docs/_static/sponsors/Polar.svg\" width=\"190\" /></a>\n<!-- [[[end]]] -->\n\n</p>\n\n<!-- continue-short -->\n\n<p align=\"center\">\n   <strong>Please consider <a href=\"https://github.com/sponsors/hynek\">joining them</a> to help make <em>structlog</em>’s maintenance more sustainable!</strong>\n</p>\n\n## Introduction\n\n*structlog* has been successfully used in production at every scale since **2013**, while embracing cutting-edge technologies like *asyncio*, context variables, or type hints as they emerged.\nIts paradigms proved influential enough to [help design](https://twitter.com/sirupsen/status/638330548361019392) structured logging [packages across ecosystems](https://github.com/sirupsen/logrus).\n\n<!-- end-short -->\n\nA short explanation on *why* structured logging is good for you, and why *structlog* is the right tool for the job can be found in the [Why chapter](https://www.structlog.org/en/stable/why.html) of our documentation.\n\nOnce you feel inspired to try it out, check out our friendly [Getting Started tutorial](https://www.structlog.org/en/stable/getting-started.html).\n\n<!-- begin tutorials -->\nFor a fully-fledged zero-to-hero tutorial, check out [*A Comprehensive Guide to Python Logging with structlog*](https://betterstack.com/community/guides/logging/structlog/).\n\nIf you prefer videos over reading, check out [Markus Holtermann](https://chaos.social/@markush)'s talk *Logging Rethought 2: The Actions of Frank Taylor Jr.*:\n\n<p align=\"center\">\n   <a href=\"https://www.youtube.com/watch?v=Y5eyEgyHLLo\">\n      <img width=\"50%\" src=\"https://img.youtube.com/vi/Y5eyEgyHLLo/maxresdefault.jpg\">\n   </a>\n</p>\n<!-- end tutorials -->\n\n## Credits\n\n*structlog* is written and maintained by [Hynek Schlawack](https://hynek.me/).\nThe idea of bound loggers is inspired by previous work by [Jean-Paul Calderone](https://github.com/exarkun) and [David Reid](https://github.com/dreid).\n\nThe development is kindly supported by my employer [Variomedia AG](https://www.variomedia.de/), *structlog*’s [Tidelift subscribers](https://tidelift.com/?utm_source=lifter&utm_medium=referral&utm_campaign=hynek), and all my amazing [GitHub Sponsors](https://github.com/sponsors/hynek).\n\nThe logs-loving beaver logo has been contributed by [Lynn Root](https://www.roguelynn.com).\n\n\n<!-- begin-meta -->\n\n## Project Links\n\n- [**Get Help**](https://stackoverflow.com/questions/tagged/structlog) (use the *structlog* tag on Stack Overflow)\n- [**PyPI**](https://pypi.org/project/structlog/)\n- [**GitHub**](https://github.com/hynek/structlog)\n- [**Documentation**](https://www.structlog.org/)\n- [**Changelog**](https://github.com/hynek/structlog/tree/main/CHANGELOG.md)\n- [**Third-party Extensions**](https://github.com/hynek/structlog/wiki/Third-party-Extensions)\n\n\n## *structlog* for Enterprise\n\nAvailable as part of the [Tidelift Subscription](https://tidelift.com/?utm_source=lifter&utm_medium=referral&utm_campaign=hynek).\n\nThe maintainers of *structlog* and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source packages you use to build your applications.\nSave time, reduce risk, and improve code health, while paying the maintainers of the exact packages you use.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 7.3740234375,
          "content": "# SPDX-License-Identifier: MIT OR Apache-2.0\n\n[build-system]\nrequires = [\"hatchling\", \"hatch-vcs\", \"hatch-fancy-pypi-readme>=22.8.0\"]\nbuild-backend = \"hatchling.build\"\n\n\n[project]\ndynamic = [\"readme\", \"version\"]\nname = \"structlog\"\ndescription = \"Structured Logging for Python\"\nauthors = [{ name = \"Hynek Schlawack\", email = \"hs@ox.cx\" }]\nrequires-python = \">=3.8\"\nlicense = \"MIT OR Apache-2.0\"\nkeywords = [\"logging\", \"structured\", \"structure\", \"log\"]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n    \"Topic :: System :: Logging\",\n    \"Typing :: Typed\",\n]\ndependencies = [\"typing-extensions; python_version<'3.11'\"]\n\n[project.urls]\nDocumentation = \"https://www.structlog.org/\"\nChangelog = \"https://github.com/hynek/structlog/blob/main/CHANGELOG.md\"\nGitHub = \"https://github.com/hynek/structlog\"\nFunding = \"https://github.com/sponsors/hynek\"\nTidelift = \"https://tidelift.com?utm_source=lifter&utm_medium=referral&utm_campaign=hynek\"\nMastodon = \"https://mastodon.social/@hynek\"\nBluesky = \"https://bsky.app/profile/hynek.me\"\nTwitter = \"https://twitter.com/hynek\"\n\n[project.optional-dependencies]\ntests = [\n    \"freezegun>=0.2.8\",\n    \"pretend\",\n    \"pytest-asyncio>=0.17\",\n    \"pytest>=6.0\",\n    \"simplejson\",\n]\n# Need Twisted & Rich for stubs.\n# Otherwise mypy fails in tox.\ntyping = [\"mypy>=1.4\", \"rich\", \"twisted\"]\ndocs = [\n    \"cogapp\",\n    \"furo\",\n    \"myst-parser\",\n    \"sphinx\",\n    \"sphinx-notfound-page\",\n    \"sphinxcontrib-mermaid\",\n    \"sphinxext-opengraph\",\n    \"twisted\",\n]\ndev = [\"structlog[tests,typing]\"]\n\n\n[tool.hatch.version]\nsource = \"vcs\"\nraw-options = { local_scheme = \"no-local-version\" }\n\n\n[tool.pytest.ini_options]\naddopts = [\"-ra\", \"--strict-markers\", \"--strict-config\"]\ntestpaths = \"tests\"\nxfail_strict = true\nfilterwarnings = [\n    \"once::Warning\",\n    'ignore:datetime.datetime.utcfromtimestamp\\(\\) is deprecated:DeprecationWarning:dateutil.tz',\n]\nasyncio_mode = \"auto\"\nasyncio_default_fixture_loop_scope = \"function\"\n\n\n[tool.coverage.run]\nparallel = true\nbranch = true\nsource = [\"structlog\"]\n\n[tool.coverage.paths]\nsource = [\"src\", \".tox/py*/**/site-packages\"]\n\n[tool.coverage.report]\nshow_missing = true\nskip_covered = true\nomit = [\"src/structlog/_greenlets.py\"]\nexclude_lines = [\n    # a more strict default pragma\n    \"\\\\# pragma: no cover\\\\b\",\n\n    # allow defensive code\n    \"^\\\\s*raise AssertionError\\\\b\",\n    \"^\\\\s*raise NotImplementedError\\\\b\",\n    \"^\\\\s*return NotImplemented\\\\b\",\n    \"^\\\\s*raise$\",\n\n    # typing-related code\n    \"^if (False|TYPE_CHECKING):\",\n    \": \\\\.\\\\.\\\\.(\\\\s*#.*)?$\",\n    \"^ +\\\\.\\\\.\\\\.$\",\n    \"-> ['\\\"]?NoReturn['\\\"]?:\",\n]\n\n\n[tool.interrogate]\nomit-covered-files = true\nverbose = 2\nfail-under = 100\nwhitelist-regex = [\"test_.*\"]\n\n\n[tool.ruff]\nsrc = [\"src\", \"tests\"]\nline-length = 79\n\n[tool.ruff.lint]\nselect = [\"ALL\"]\nignore = [\n    \"A\",       # shadowing is fine\n    \"ANN\",     # Mypy is better at this\n    \"ARG\",     # unused arguments are common w/ interfaces\n    \"C901\",    # sometimes you trade complexity for performance\n    \"COM\",     # Formatter takes care of our commas\n    \"D\",       # We prefer our own docstring style.\n    \"E501\",    # leave line-length enforcement to formatter\n    \"EM101\",   # simple strings are fine\n    \"FBT\",     # bools are our friends\n    \"FIX\",     # Yes, we want XXX as a marker.\n    \"INP001\",  # sometimes we want Python files outside of packages\n    \"ISC001\",  # conflicts with formatter\n    \"N802\",    # some names are non-pep8 due to stdlib logging / Twisted\n    \"N803\",    # ditto\n    \"N806\",    # ditto\n    \"PLR0913\", # leave complexity to me\n    \"PLR2004\", # numbers are sometimes fine\n    \"PLW2901\", # overwriting a loop var can be useful\n    \"RUF001\",  # leave my smart characters alone\n    \"RUF001\",  # leave my smart characters alone\n    \"SLF001\",  # private members are accessed by friendly functions\n    \"T201\",    # prints are fine\n    \"TC\",      # TYPE_CHECKING blocks break autodocs\n    \"TD\",      # we don't follow other people's todo style\n    \"TID252\",  # Relative imports are fine\n    \"TRY003\",  # simple strings are fine\n    \"TRY004\",  # too many false negatives\n    \"TRY300\",  # else blocks are nice, but code-locality is nicer\n    \"PTH\",     # pathlib can be slow, so no point to rewrite\n]\n\n[tool.ruff.lint.per-file-ignores]\n\"tests/*\" = [\n    \"B018\",    # \"useless\" expressions can be useful in tests\n    \"BLE\",     # tests have different rules around exceptions\n    \"EM\",      # tests have different rules around exceptions\n    \"LOG001\",  # need to instantiate log messages in tests\n    \"PLC1901\", # empty strings are falsey, but are less specific in tests\n    \"RUF012\",  # no type hints in tests\n    \"S\",       # it's test; chill out security\n    \"SIM300\",  # Yoda rocks in tests\n    \"TRY\",     # tests have different rules around exceptions\n]\n\n[tool.ruff.lint.isort]\nlines-between-types = 1\nlines-after-imports = 2\n\n\n[tool.mypy]\nstrict = true\npretty = true\n\nshow_error_codes = true\nenable_error_code = [\"ignore-without-code\"]\nignore_missing_imports = true\n\nwarn_return_any = false\n\n[[tool.mypy.overrides]]\nmodule = \"tests.*\"\nignore_errors = true\n\n[[tool.mypy.overrides]]\nmodule = \"tests.typing.*\"\nignore_errors = false\n\n\n[tool.hatch.metadata.hooks.fancy-pypi-readme]\ncontent-type = \"text/markdown\"\n\n[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]\ntext = '''<p align=\"center\">\n    <img\n        src=\"https://www.structlog.org/en/stable/_static/structlog_logo_small.png\"\n        alt=\"structlog mascot\"\n    />\n</p>\n'''\n\n[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]\npath = \"README.md\"\nstart-after = \"<!-- begin-short -->\\n\"\nend-before = \"\\n<!-- end-short -->\"\n\n[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]\npath = \"README.md\"\nstart-after = \"<!-- begin-meta -->\\n\"\n\n[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]\ntext = \"\"\"\n\n\n## Release Information\n\n\"\"\"\n\n[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]\npath = \"CHANGELOG.md\"\nstart-after = \"<!-- changelog follows -->\"\npattern = \"\\n(###.+?\\n)## \"\n\n[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]\ntext = \"\"\"\n---\n\n[Full Changelog →](https://www.structlog.org/en/stable/changelog.html)\n\n\n\"\"\"\n\n[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]\npath = \"README.md\"\nstart-at = \"## Credits\"\nend-before = \"<!-- begin-meta -->\"\n\n# Point sponsor image URLs to versions.\n[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]\npattern = 'docs\\/_static\\/sponsors'\nreplacement = 'https://www.structlog.org/en/$HFPR_VERSION/_static/sponsors'\n\n\n[[tool.sponcon.sponsors]]\ntitle = \"Variomedia AG\"\nurl = \"https://www.variomedia.de/\"\nimg = \"Variomedia.svg\"\n\n[[tool.sponcon.sponsors]]\ntitle = \"Tidelift\"\nurl = \"https://tidelift.com/?utm_source=lifter&utm_medium=referral&utm_campaign=hynek\"\nimg = \"Tidelift.svg\"\n\n[[tool.sponcon.sponsors]]\ntitle = \"Klaviyo\"\nurl = \"https://klaviyo.com/\"\nimg = \"Klaviyo.svg\"\n\n[[tool.sponcon.sponsors]]\ntitle = \"emsys renewables\"\nurl = \"https://www.emsys-renewables.com/\"\nimg = \"emsys-renewables.svg\"\n\n[[tool.sponcon.sponsors]]\ntitle = \"FilePreviews\"\nurl = \"https://filepreviews.io/\"\nimg = \"FilePreviews.svg\"\n\n[[tool.sponcon.sponsors]]\ntitle = \"Polar\"\nurl = \"https://polar.sh/\"\nimg = \"Polar.svg\"\n"
        },
        {
          "name": "show_off.py",
          "type": "blob",
          "size": 0.861328125,
          "content": "\"\"\"\nShow how console logging looks like.\n\nThis is used for the screenshot in the readme and\n<https://www.structlog.org/en/stable/development.html>.\n\"\"\"\n\nfrom dataclasses import dataclass\n\nimport structlog\n\n\n@dataclass\nclass SomeClass:\n    x: int\n    y: str\n\n\nstructlog.stdlib.recreate_defaults()  # so we have logger names\n\nlog = structlog.get_logger(\"some_logger\")\n\nlog.debug(\"debugging is hard\", a_list=[1, 2, 3])\nlog.info(\"informative!\", some_key=\"some_value\")\nlog.warning(\"uh-uh!\")\nlog.error(\"omg\", a_dict={\"a\": 42, \"b\": \"foo\"})\nlog.critical(\"wtf\", what=SomeClass(x=1, y=\"z\"))\n\n\nlog2 = structlog.get_logger(\"another_logger\")\n\n\ndef make_call_stack_more_impressive():\n    try:\n        d = {\"x\": 42}\n        print(SomeClass(d[\"y\"], \"foo\"))\n    except Exception:\n        log2.exception(\"poor me\")\n    log.info(\"all better now!\", stack_info=True)\n\n\nmake_call_stack_more_impressive()\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 2.8740234375,
          "content": "[tox]\nmin_version = 4\nenv_list =\n    pre-commit,\n    mypy-pkg,\n    py3{8,9,10,11,12,13}-{tests,mypy}\n    py3{8,13}-tests-{colorama,be,rich},\n    docs{,-sponsors},\n    coverage-report\n\n\n[testenv]\npackage = wheel\nwheel_build_env = .pkg\nextras =\n    tests: tests\n    mypy: typing\ncommands =\n    tests: pytest {posargs}\n    mypy: mypy tests/typing\n\n\n# Run oldest and latest under Coverage.\n# Keep in-sync with coverage `depends below.\n[testenv:py3{8,13}-tests{,-colorama,-be,-rich}]\ndeps =\n    coverage[toml]\n    py313: twisted\n    colorama: colorama\n    rich: rich\n    be: better-exceptions\ncommands = coverage run -m pytest {posargs}\n\n\n[testenv:coverage-report]\ndeps = coverage[toml]\nskip_install = true\nparallel_show_output = true\n# Keep in-sync with test env definition above.\ndepends = py3{8,13}-{tests,colorama,be,rich}\ncommands =\n    coverage combine\n    coverage report\n\n\n[testenv:docs]\n# Keep base_python in sync with ci.yml/docs and .readthedocs.yaml.\nbase_python = py312\nextras = docs\ncommands =\n    sphinx-build -n -T -W -b html -d {envtmpdir}/doctrees docs docs/_build/html\n    sphinx-build -n -T -W -b doctest -d {envtmpdir}/doctrees docs docs/_build/html\n\n[testenv:docs-watch]\npackage = editable\nbase_python = {[testenv:docs]base_python}\nextras = {[testenv:docs]extras}\ndeps = watchfiles\ncommands =\n    watchfiles \\\n        --ignore-paths docs/_build/ \\\n        'sphinx-build -W -n --jobs auto -b html -d {envtmpdir}/doctrees docs docs/_build/html' \\\n        src \\\n        docs\n\n[testenv:docs-linkcheck]\nbase_python = {[testenv:docs]base_python}\nextras = {[testenv:docs]extras}\ncommands = sphinx-build -W -b linkcheck -d {envtmpdir}/doctrees docs docs/_build/html\n\n[testenv:docs-sponsors]\ndescription = Ensure sponsor logos are up to date.\ndeps = cogapp\ncommands = cog -rP README.md docs/index.md\n\n\n[testenv:pre-commit]\nskip_install = true\ndeps = pre-commit\ncommands = pre-commit run --all-files\n\n\n[testenv:mypy-pkg]\nextras = typing\ncommands = mypy src\n\n\n[testenv:pyright]\ndeps = pyright\nextras = typing\ncommands = pyright tests/typing\n\n\n[testenv:color-force]\nhelp = A visual check that FORCE_COLOR is working.\nset_env = FORCE_COLOR=1\ncommands = python -c \"import structlog; structlog.get_logger().warning('should be colorful')\"\n\n\n[testenv:color-no]\nhelp = A visual check that NO_COLOR is working.\nset_env = NO_COLOR=1\ncommands = python -c \"import structlog; structlog.get_logger().warning('should be plain')\"\n\n\n[testenv:docset]\ndeps = doc2dash\nextras = docs\nallowlist_externals =\n    rm\n    cp\n    tar\ncommands =\n    rm -rf structlog.docset structlog.tgz docs/_build\n    sphinx-build -n -T -W -b html -d {envtmpdir}/doctrees docs docs/_build/html\n    doc2dash --index-page index.html --icon docs/_static/docset-icon.png --online-redirect-url https://www.structlog.org/en/latest/ docs/_build/html\n    cp docs/_static/docset-icon@2x.png structlog.docset/icon@2x.png\n    tar --exclude='.DS_Store' -cvzf structlog.tgz structlog.docset\n"
        }
      ]
    }
  ]
}