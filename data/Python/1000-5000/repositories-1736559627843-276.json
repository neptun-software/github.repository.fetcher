{
  "metadata": {
    "timestamp": 1736559627843,
    "page": 276,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "graphql-python/graphene-django",
      "stars": 4325,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.0498046875,
          "content": "[run]\nomit = */tests/*,graphene_django/debug/sql/*\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.146484375,
          "content": "# Created by https://www.gitignore.io\n\n### Python ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\n.env/\nvenv/\n.venv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# PyCharm\n.idea\n\n# Databases\n*.sqlite3\n.vscode\n\n# swap\n[._]*.s[a-v][a-z]\n[._]*.sw[a-p]\n[._]s[a-v][a-z]\n[._]sw[a-p]\n# session\nSession.vim\n# temporary\n.netrwhist\n*~\n# auto-generated tag files\ntags\n.tox/\n.pytest_cache/\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n.python-version\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.595703125,
          "content": "default_language_version:\n  python: python3.11\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.5.0\n    hooks:\n    -   id: check-merge-conflict\n    -   id: check-json\n    -   id: check-yaml\n    -   id: debug-statements\n    -   id: end-of-file-fixer\n        exclude: ^docs/.*$\n    -   id: pretty-format-json\n        args:\n        - --autofix\n    -   id: trailing-whitespace\n        exclude: README.md\n-   repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.1.2\n    hooks:\n    -   id: ruff\n        args: [--fix, --exit-non-zero-on-fix, --show-fixes]\n    -   id: ruff-format\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.42578125,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\nversion: 2\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.12\"\n\n# Build documentation in the \"docs/\" directory with Sphinx\nsphinx:\n  configuration: docs/conf.py\n\n# See https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n   install:\n      - requirements: docs/requirements.txt\n"
        },
        {
          "name": ".ruff.toml",
          "type": "blob",
          "size": 0.83984375,
          "content": "select = [\n    \"E\",    # pycodestyle\n    \"W\",    # pycodestyle\n    \"F\",    # pyflake\n    \"I\",    # isort\n    \"B\",    # flake8-bugbear\n    \"C4\",   # flake8-comprehensions\n    \"UP\",   # pyupgrade\n]\n\nignore = [\n    \"E501\",  # line-too-long\n    \"B017\",  # pytest.raises(Exception) should be considered evil\n    \"B028\",  # warnings.warn called without an explicit stacklevel keyword argument\n    \"B904\",  # check for raise statements in exception handlers that lack a from clause\n    \"W191\",  # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules\n]\n\nexclude = [\n    \"**/docs\",\n]\n\ntarget-version = \"py38\"\n\n[per-file-ignores]\n# Ignore unused imports (F401) in these files\n\"__init__.py\" = [\"F401\"]\n\"graphene_django/compat.py\" = [\"F401\"]\n\n[isort]\nknown-first-party = [\"graphene\", \"graphene-django\"]\nknown-local-folder = [\"cookbook\"]\ncombine-as-imports = true\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.271484375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at me@syrusakbary.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.3408203125,
          "content": "# Contributing\n\nThanks for helping to make graphene-django great!\n\nWe welcome all kinds of contributions:\n\n- Bug fixes\n- Documentation improvements\n- New features\n- Refactoring & tidying\n\n\n## Getting started\n\nIf you have a specific contribution in mind, be sure to check the [issues](https://github.com/graphql-python/graphene-django/issues) and [projects](https://github.com/graphql-python/graphene-django/projects) in progress - someone could already be working on something similar and you can help out.\n\n\n## Project setup\n\nAfter cloning this repo, ensure dependencies are installed by running:\n\n```sh\nmake dev-setup\n```\n\n## Running tests\n\nAfter developing, the full test suite can be evaluated by running:\n\n```sh\nmake tests\n```\n\n## Opening Pull Requests\n\nPlease fork the project and open a pull request against the `main` branch.\n\nThis will trigger a series of test and lint checks.\n\nWe advise that you format and run lint locally before doing this to save time:\n\n```sh\nmake format\nmake lint\n```\n\n## Documentation\n\nThe [documentation](http://docs.graphene-python.org/projects/django/en/latest/) is generated using the excellent [Sphinx](http://www.sphinx-doc.org/) and a custom theme.\n\nThe documentation dependencies are installed by running:\n\n```sh\ncd docs\npip install -r requirements.txt\n```\n\nThen to produce a HTML version of the documentation:\n\n```sh\nmake html\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0615234375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016-Present Syrus Akbary\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.26171875,
          "content": "include README.md LICENSE\nrecursive-include graphene_django/templates *\nrecursive-include graphene_django/static *\n\ninclude examples/cookbook/cookbook/ingredients/fixtures/ingredients.json\ninclude examples/cookbook-plain/cookbook/ingredients/fixtures/ingredients.json\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.7880859375,
          "content": ".PHONY: help\nhelp:\n\t@echo \"Please use \\`make <target>' where <target> is one of\"\n\t@grep -E '^\\.PHONY: [a-zA-Z_-]+ .*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \"(: |##)\"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$2, $$3}'\n\n.PHONY: dev-setup ## Install development dependencies\ndev-setup:\n\tpip install -e \".[dev]\"\n\tpython -m pre_commit install\n\n.PHONY: tests ## Run unit tests\ntests:\n\tPYTHONPATH=. pytest graphene_django --cov=graphene_django -vv\n\n.PHONY: format ## Format code\nformat:\n\truff format graphene_django examples setup.py\n\n.PHONY: lint ## Lint code\nlint:\n\truff graphene_django examples\n\n.PHONY: docs ## Generate docs\ndocs: dev-setup\n\tcd docs && make install && make html\n\n.PHONY: docs-live ## Generate docs with live reloading\ndocs-live: dev-setup\n\tcd docs && make install && make livehtml\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.8271484375,
          "content": "# ![Graphene Logo](http://graphene-python.org/favicon.png) Graphene-Django\n\n[![build][build-image]][build-url]\n[![pypi][pypi-image]][pypi-url]\n[![Anaconda-Server Badge][conda-image]][conda-url]\n[![coveralls][coveralls-image]][coveralls-url]\n\n[build-image]: https://github.com/graphql-python/graphene-django/workflows/Tests/badge.svg\n[build-url]: https://github.com/graphql-python/graphene-django/actions\n[pypi-image]: https://img.shields.io/pypi/v/graphene-django.svg?style=flat\n[pypi-url]: https://pypi.org/project/graphene-django/\n[coveralls-image]: https://coveralls.io/repos/github/graphql-python/graphene-django/badge.svg?branch=master\n[coveralls-url]: https://coveralls.io/github/graphql-python/graphene-django?branch=master\n[conda-image]: https://img.shields.io/conda/vn/conda-forge/graphene-django.svg\n[conda-url]: https://anaconda.org/conda-forge/graphene-django\n\nGraphene-Django is an open-source library that provides seamless integration between Django, a high-level Python web framework, and Graphene, a library for building GraphQL APIs. The library allows developers to create GraphQL APIs in Django quickly and efficiently while maintaining a high level of performance.\n\n## Features\n\n* Seamless integration with Django models\n* Automatic generation of GraphQL schema\n* Integration with Django's authentication and permission system\n* Easy querying and filtering of data\n* Support for Django's pagination system\n* Compatible with Django's form and validation system\n* Extensive documentation and community support\n\n## Installation\n\nTo install Graphene-Django, run the following command:\n\n```sh\npip install graphene-django\n```\n\n## Configuration\n\nAfter installation, add 'graphene_django' to your Django project's `INSTALLED_APPS` list and define the GraphQL schema in your project's settings:\n\n```python\nINSTALLED_APPS = [\n    # ...\n    'graphene_django',\n]\n\nGRAPHENE = {\n    'SCHEMA': 'myapp.schema.schema'\n}\n```\n\n## Usage\n\nTo use Graphene-Django, create a `schema.py` file in your Django app directory and define your GraphQL types and queries:\n\n```python\nimport graphene\nfrom graphene_django import DjangoObjectType\nfrom .models import MyModel\n\nclass MyModelType(DjangoObjectType):\n    class Meta:\n        model = MyModel\n\nclass Query(graphene.ObjectType):\n    mymodels = graphene.List(MyModelType)\n\n    def resolve_mymodels(self, info, **kwargs):\n        return MyModel.objects.all()\n\nschema = graphene.Schema(query=Query)\n```\n\nThen, expose the GraphQL API in your Django project's `urls.py` file:\n\n```python\nfrom django.urls import path\nfrom graphene_django.views import GraphQLView\nfrom . import schema\n\nurlpatterns = [\n    # ...\n    path('graphql/', GraphQLView.as_view(graphiql=True)), # Given that schema path is defined in GRAPHENE['SCHEMA'] in your settings.py\n]\n```\n\n## Testing\n\nGraphene-Django provides support for testing GraphQL APIs using Django's test client. To create tests, create a `tests.py` file in your Django app directory and write your test cases:\n\n```python\nfrom django.test import TestCase\nfrom graphene_django.utils.testing import GraphQLTestCase\nfrom . import schema\n\nclass MyModelAPITestCase(GraphQLTestCase):\n    GRAPHENE_SCHEMA = schema.schema\n\n    def test_query_all_mymodels(self):\n        response = self.query(\n            '''\n            query {\n                mymodels {\n                    id\n                    name\n                }\n            }\n            '''\n        )\n\n        self.assertResponseNoErrors(response)\n        self.assertEqual(len(response.data['mymodels']), MyModel.objects.count())\n```\n\n## Contributing\n\nContributions to Graphene-Django are always welcome! To get started, check the repository's [issue tracker](https://github.com/graphql-python/graphene-django/issues) and [contribution guidelines](https://github.com/graphql-python/graphene-django/blob/main/CONTRIBUTING.md).\n\n## License\n\nGraphene-Django is released under the [MIT License](https://github.com/graphql-python/graphene-django/blob/main/LICENSE).\n\n## Resources\n\n* [Official GitHub Repository](https://github.com/graphql-python/graphene-django)\n* [Graphene Documentation](http://docs.graphene-python.org/en/latest/)\n* [Django Documentation](https://docs.djangoproject.com/en/stable/)\n* [GraphQL Specification](https://spec.graphql.org/)\n* [GraphiQL](https://github.com/graphql/graphiql) - An in-browser IDE for exploring GraphQL APIs\n* [Graphene-Django Community](https://spectrum.chat/graphene) - Join the community to discuss questions and share ideas related to Graphene-Django\n\n## Tutorials and Examples\n\n* [Official Graphene-Django Tutorial](https://docs.graphene-python.org/projects/django/en/latest/tutorial-plain/)\n* [Building a GraphQL API with Django and Graphene-Django](https://www.howtographql.com/graphql-python/0-introduction/)\n* [Real-world example: Django, Graphene, and Relay](https://github.com/graphql-python/swapi-graphene)\n\n## Related Projects\n\n* [Graphene](https://github.com/graphql-python/graphene) - A library for building GraphQL APIs in Python\n* [Graphene-SQLAlchemy](https://github.com/graphql-python/graphene-sqlalchemy) - Integration between Graphene and SQLAlchemy, an Object Relational Mapper (ORM) for Python\n* [Graphene-File-Upload](https://github.com/lmcgartland/graphene-file-upload) - A package providing an Upload scalar for handling file uploads in Graphene\n* [Graphene-Subscriptions](https://github.com/graphql-python/graphene-subscriptions) - A package for adding real-time subscriptions to Graphene-based GraphQL APIs\n\n## Support\n\nIf you encounter any issues or have questions regarding Graphene-Django, feel free to [submit an issue](https://github.com/graphql-python/graphene-django/issues/new) on the official GitHub repository. You can also ask for help and share your experiences with the Graphene-Django community on [💬 Discord](https://discord.gg/Fftt273T79)\n\n## Release Notes\n\n* See [Releases page on github](https://github.com/graphql-python/graphene-django/releases)\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "graphene_django",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.1728515625,
          "content": "[aliases]\ntest=pytest\n\n[bdist_wheel]\nuniversal=1\n\n[coverage:run]\nomit = */tests/*\n\n[tool:pytest]\nDJANGO_SETTINGS_MODULE = examples.django_test_settings\naddopts = --random-order\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.2607421875,
          "content": "import ast\nimport re\n\nfrom setuptools import find_packages, setup\n\n_version_re = re.compile(r\"__version__\\s+=\\s+(.*)\")\n\nwith open(\"graphene_django/__init__.py\", \"rb\") as f:\n    version = str(\n        ast.literal_eval(_version_re.search(f.read().decode(\"utf-8\")).group(1))\n    )\n\nrest_framework_require = [\"djangorestframework>=3.6.3\"]\n\n\ntests_require = [\n    \"pytest>=7.3.1\",\n    \"pytest-cov\",\n    \"pytest-random-order\",\n    \"coveralls\",\n    \"mock\",\n    \"pytz\",\n    \"django-filter>=22.1\",\n    \"pytest-django>=4.5.2\",\n] + rest_framework_require\n\n\ndev_requires = [\n    \"ruff==0.1.2\",\n    \"pre-commit\",\n] + tests_require\n\nsetup(\n    name=\"graphene-django\",\n    version=version,\n    description=\"Graphene Django integration\",\n    long_description=open(\"README.md\").read(),\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/graphql-python/graphene-django\",\n    author=\"Syrus Akbary\",\n    author_email=\"me@syrusakbary.com\",\n    license=\"MIT\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.1\",\n        \"Framework :: Django :: 4.2\",\n    ],\n    keywords=\"api graphql protocol rest relay graphene\",\n    packages=find_packages(exclude=[\"tests\", \"examples\", \"examples.*\"]),\n    install_requires=[\n        \"graphene>=3.0,<4\",\n        \"graphql-core>=3.1.0,<4\",\n        \"graphql-relay>=3.1.1,<4\",\n        \"Django>=3.2\",\n        \"promise>=2.1\",\n        \"text-unidecode\",\n    ],\n    setup_requires=[\"pytest-runner\"],\n    tests_require=tests_require,\n    rest_framework_require=rest_framework_require,\n    extras_require={\n        \"test\": tests_require,\n        \"rest_framework\": rest_framework_require,\n        \"dev\": dev_requires,\n    },\n    include_package_data=True,\n    zip_safe=False,\n    platforms=\"any\",\n)\n"
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.8857421875,
          "content": "[tox]\nenvlist =\n    py{38,39,310}-django32\n    py{38,39}-django42\n    py{310,311,312}-django{42,50,51,main}\n    pre-commit\n\n[gh-actions]\npython =\n    3.8: py38\n    3.9: py39\n    3.10: py310\n    3.11: py311\n    3.12: py312\n\n[gh-actions:env]\nDJANGO =\n    3.2: django32\n    4.2: django42\n    5.0: django50\n    5.1: django51\n    main: djangomain\n\n[testenv]\npassenv = *\nusedevelop = True\nsetenv =\n    DJANGO_SETTINGS_MODULE=examples.django_test_settings\n    PYTHONPATH=.\ndeps =\n    -e.[test]\n    psycopg2-binary\n    django32: Django>=3.2,<4.0\n    django42: Django>=4.2,<4.3\n    django50: Django>=5.0,<5.1\n    django51: Django>=5.1,<5.2\n    djangomain: https://github.com/django/django/archive/main.zip\ncommands = {posargs:pytest --cov=graphene_django graphene_django examples}\n\n[testenv:pre-commit]\nskip_install = true\ndeps = pre-commit\ncommands =\n    pre-commit run {posargs:--all-files --show-diff-on-failure}\n"
        }
      ]
    }
  ]
}