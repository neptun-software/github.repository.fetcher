{
  "metadata": {
    "timestamp": 1736560027770,
    "page": 843,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google-research/football",
      "stars": 3365,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.5419921875,
          "content": ".git/\n\n# Output directories\nbuild*/\nthird_party/gfootball_engine/build*/\n\n# CMake files and directories\n**CMakeCache.txt\n**CMakeFiles/\n**Makefile\n**cmake_install.cmake\n\n# Some Python directories\ngfootball.egg-info/\ndist/\nfootball-env*/\n# in case someone named virtual environment differently\n**/site-packages/\n**__pycache__/\n\n# Compiled object files and libraries (dynamic and static)\n**/*.o\n**/*.obj\n**/*.so\n**/*.so.*\n**/*.dylib\n**/*.dll\n**/*.a\n**/*.lib\n\n\n# IDEA files\n**.idea/\n**cmake-build-*/\n\n# Visual Studio and VS Code\n**.vsbuild/\n**.vscode/\n**.vs/\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.177734375,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text=auto\n\n# Bash scripts should always have LF line endings to support Docker on Windows\n*.sh text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4658203125,
          "content": "# When updating this file don't forget to update MANIFEST.in\n\n# Python related files\nbuild/\n*.egg-info/\n__pycache__\ndist/\n# virtual environment\nfootball-env*/\n\n# CMake related directories and files\nthird_party/gfootball_engine/build*\nthird_party/gfootball_engine/CMakeFiles/\nthird_party/gfootball_engine/Testing/\nthird_party/gfootball_engine/.cmake/\ncmake-build-*/\nvcpkg_installed/\nC[M,m]akeCache.txt\nMakefile\ncmake_install.cmake\n*.a\n*.so\n*.dylib\n*.pyd\n*.cbp\n\n# IDE\n.idea\n.vs*\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 6.7900390625,
          "content": "Numbering scheme:\nEach environment release number is of the form vX.Y[.P]. X is the major version\nnumber, Y is the minor version number, P is the patch version if any. Experiment results within the same X\nshould not change, as modifications made to the environment are either\nnew features or backward compatible bug fixes. We will maintain vX branches\npointing at the most recent vX.Y.\n\nv2.10.3\n- Add Conda support on macOS.\n- Improve development setup on all platforms (symlink instead of copying).\n- Fix Boost.Bind compilation warnings.\n- Replace scipy dependency with numpy.\n- Limit Gym version to v0.21.0 for now.\n- Add GitHub workflow for building on macOS.\n\nv2.10.2\n- Replace deprecated FindPythonLibs CMake module.\n- Support Apple Silicon.\n- Build and publish Python 3.10-x64 wheels on Windows.\n- Speed up `docker build` by ignoring development files.\n\nv2.10.1\n- Improve crash reporting in the engine.\n- Update environment tests.\n\nv2.10\n- Windows support.\n- Development mode (pip install -e .)\n\nv2.9\n- Drop hard dependency on Tensorflow.\n- Make installation easier, support for Ubuntu 20.04.\n\nv2.8\n- Added support for hardware accelerated headless rendering.\n- Minor fixes for the issues reported by Kaggle contestants.\n\nv2.7\n- Fix propagation of a single pass/shot action between players upon control switch.\n- Improve logic which prevents agents blocking the game.\n\nv2.6\n- Address minor issues reported by Kaggle contestants.\n\nv2.5\n- Make 2D videos more readable and color-blind friendly.\n- Do not allow agents to block the game by exploiting kick-off.\n\nv2.4\n- Support for configurable rendering resolution.\n- Kaggle competition links.\n\nv2.3\n- Fix to scenario's second_half feature.\n\nv2.2\n- Minor changes to the information displayed in the video replays.\n- Changes to Kaggle competition scenario.\n- Minor code cleanups.\n\nv2.1\n- Introduction of `builtin_ai` action, which lets agent dynamically give control\n  of the player to the native game's built-in AI. It can be useful when training\n  multiagent setup incrementally (for example start by controlling all 11 players,\n  for 10 of them generate `builtin_ai` action. Over time stop using `builtin_ai`\n  action for an increasing number of players). Introduction of `v2` action set\n  which is an extension of the `default` action set with `builtin_ai` action.\n- Improved documentation for using Docker image, support for rendering with Docker.\n- Fix to observation shape returned by wrappers.\n\nv2.0.7\n- A number of documentation updates.\n- `info` returned by step() API call returns pointers to recorded dumps.\n\nv2.0.6\n- Small fixes to getState/setState.\n- Memory usage reduction when saving replay videos is enabled.\n\nv2.0.5\n- Support compilation on OSX.\n\nv2.0.4\n- Added Colab support (see readme file).\n- Some minor bug fixes (including https://github.com/google-research/football/issues/110)\n\nv2.0 - this release is not backward-compatible due to making game fully symmetric (training agents can behave differently).\n- Game is fully symmetric now (playing left to right and right to left is equivalent). All observations are modified inside of the\n  environment and from agent's perspective the game is always presented as playing from left to right (no need to train from both\n  sides).\n- Introduction of get_state() and set_state() API methods, which allow for saving and loading state of the entire environment.\n  Using these methods it is possible to move back in time and investigate possible outcomes of different actions taken\n  at exactly the same non-initial state of the episode.\n- Introduction of GYM-like render() method to the environment API which enables rendering dynamically. It is not needed anymore to\n  pro-actively start environment with --render flag in order to see rendered episodes at any time.\n- By default team losing the goal starts the game with the ball.\n\nv1.5\n- Fix to numerical issue resulting in asserts in long runs (https://github.com/google-research/football/issues/78).\n- Eliminate dependense on Glee (https://github.com/google-research/football/issues/77)\n- Created google-research-football@google.com email for direct contact with the environment team.\n\nv1.4\n- Added implementation of architecture 'gfootball_impala_cnn' used in the paper.\n- Added possibility of loading PPO checkpoints as players, added example checkpoints (for levels 11_vs_11_easy_stochastic and academy_run_to_score_with_keeper).\n- Removed TensorFlow dependency when running only the environment (but for training OpenAI baselines it's still needed)\n\nv1.3\n- Fix to pixel representation (https://github.com/google-research/football/issues/54,56,57).\n\nv1.2\n- Reduction of memory usage by the environment (https://github.com/google-research/football/issues/47).\n- Reduction of memory usage during compilation (https://github.com/google-research/football/issues/49).\n- Elimination of --no-pie compilation flag (https://github.com/google-research/football/issues/53).\n- Fix for broken wrappers.py (https://github.com/google-research/football/issues/54).\n\nv1.1\n- Add support for running multiple environment instances in a single process.\n- Replaced left_players and right_players with a single players flag. This allows for controling players in both teams by a single agent (useful for self-play).\n- Make ball_owned_player and ball_owned_team consistent (fix for https://github.com/google-research/football/issues/45).\n- Removed paper.pdf and references to it. The paper is now at https://arxiv.org/abs/1907.11180.\n\nv1.0 (released July 19th, 2019)\n- added support for multi agent training with run_multiagent_rllib.py example.\n- added enable_sides_swap parameter to create_environment, which enables random swapping of team sides for each episode. This is useful for self-play training.\n- over 3x speedup to the game engine.\n- renamed home/away teams to left/right.\n- eliminated implicit observation and action rotation for the right team. `is_active_left` denotes controlling left team.\n- config is not passed anymore to the reset method.\n- minor game engine bug fixes and code cleanup.\n- eliminated chdir calls from the environment, so that working dir does not change.\n- backfilled missing values in simple115 representation for the case when training with less than 22 players.\n- updated game engine to use Boost.Signals2.\n- updated environment to the new OpenAI Gym API.\n\nv0.3 (released June 14th, 2019)\n- change action set to include sliding, dribbling and keeper rush.\n- cleanup in action set & sticky actions on python side.\n- change to env: now it release non-sticky actions after a single environment step.\n- game engine change: the goalkeeper now move backwards when the ball if bound.\n  for the goal and is flying high.\n- game engine change: call randomize with seed right before match creation.\n- update documentation with frequent problems & mailing list.\n- updated paper.pdf with citation to RoboCup and new action set.\n\nv0.2 - initial release (released June 7th, 2019)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.25,
          "content": "# How to Contribute\n\n# Issues\n\n* Please tag your issue with `bug`, `feature request`, or `question` to help us\n  effectively respond.\n* Please include the versions of TensorFlow and Tensor2Tensor you are running\n  (run `pip list | grep tensor`)\n* Please provide the command line you ran as well as the log output.\n\n# Pull Requests\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution,\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5009765625,
          "content": "ARG DOCKER_BASE\nFROM $DOCKER_BASE\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get --no-install-recommends install -yq git cmake build-essential \\\n  libgl1-mesa-dev libsdl2-dev \\\n  libsdl2-image-dev libsdl2-ttf-dev libsdl2-gfx-dev libboost-all-dev \\\n  libdirectfb-dev libst-dev mesa-utils xvfb x11vnc \\\n  python3-pip\n\nRUN python3 -m pip install --upgrade pip setuptools wheel\nRUN python3 -m pip install psutil\n\nCOPY . /gfootball\nRUN cd /gfootball && python3 -m pip install .\nWORKDIR '/gfootball'\n"
        },
        {
          "name": "Dockerfile_examples",
          "type": "blob",
          "size": 0.734375,
          "content": "ARG DOCKER_BASE\nFROM $DOCKER_BASE\nARG DEVICE\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get --no-install-recommends install -yq git cmake build-essential \\\n  libgl1-mesa-dev libsdl2-dev \\\n  libsdl2-image-dev libsdl2-ttf-dev libsdl2-gfx-dev libboost-all-dev \\\n  libdirectfb-dev libst-dev mesa-utils xvfb x11vnc \\\n  python3-pip\n\nRUN python3 -m pip install --upgrade pip setuptools wheel\nRUN python3 -m pip install --no-cache-dir psutil dm-sonnet==1.*\nRUN python3 -m pip list | grep 'tensorflow ' || python3 -m pip install --no-cache-dir tensorflow==1.15.*\n\nRUN python3 -m pip install --no-cache-dir git+https://github.com/openai/baselines.git@master\nCOPY . /gfootball\nRUN cd /gfootball && python3 -m pip install .\nWORKDIR '/gfootball'\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0439453125,
          "content": "                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.6875,
          "content": "include gfootball/build_game_engine.*\nrecursive-include gfootball/colabs *\nrecursive-include gfootball/doc *\nrecursive-include gfootball/eval_server/proto *\nrecursive-include gfootball/examples *\n\ninclude Dockerfile Dockerfile_examples .dockerignore CHANGELOG CONTRIBUTING.md requirements.txt run_docker_test.sh\n\nrecursive-include third_party/fonts *\nrecursive-include third_party/gfootball_engine *\nrecursive-exclude third_party/gfootball_engine *.a *.so cmake_install.cmake Makefile\n\nprune third_party/gfootball_engine/CMakeFiles\nprune third_party/gfootball_engine/cmake-build-*\nprune third_party/gfootball_engine/build*\nprune third_party/gfootball_engine/.vs*\nprune third_party/gfootball_engine/.idea\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.9609375,
          "content": "# Google Research Football\n\nThis repository contains an RL environment based on open-source game Gameplay\nFootball. <br> It was created by the Google Brain team for research purposes.\n\nUseful links:\n\n* [Run in Colab](https://colab.research.google.com/github/google-research/football/blob/master/gfootball/colabs/gfootball_example_from_prebuild.ipynb) - start training in less that 2 minutes.\n* [Google Research Football Paper](https://arxiv.org/abs/1907.11180)\n* [GoogleAI blog post](https://ai.googleblog.com/2019/06/introducing-google-research-football.html)\n* [Google Research Football on Cloud](https://towardsdatascience.com/reproducing-google-research-football-rl-results-ac75cf17190e)\n* [GRF Kaggle competition](https://www.kaggle.com/c/google-football) - take part in the competition playing games against others, win prizes and become the GRF Champion!\n\n\nWe'd like to thank Bastiaan Konings Schuiling, who authored and open-sourced the original version of this game.\n\n\n## Quick Start\n\n### In colab\n\nOpen our example [Colab](https://colab.research.google.com/github/google-research/football/blob/master/gfootball/colabs/gfootball_example_from_prebuild.ipynb), that will allow you to start training your model in less than 2 minutes.\n\nThis method doesn't support game rendering on screen - if you want to see the game running, please use the method below.\n\n### Using Docker\n\nThis is the recommended way for Linux-based systems to avoid incompatible package versions.\nInstructions are available [here](gfootball/doc/docker.md).\n\n### On your computer\n\n#### 1. Install required packages\n#### Linux\n```shell\nsudo apt-get install git cmake build-essential libgl1-mesa-dev libsdl2-dev \\\nlibsdl2-image-dev libsdl2-ttf-dev libsdl2-gfx-dev libboost-all-dev \\\nlibdirectfb-dev libst-dev mesa-utils xvfb x11vnc python3-pip\n\npython3 -m pip install --upgrade pip setuptools psutil wheel\n```\n\n#### macOS\nFirst install [brew](https://brew.sh/). It should automatically install Command Line Tools.\nNext install required packages:\n\n```shell\nbrew install git python3 cmake sdl2 sdl2_image sdl2_ttf sdl2_gfx boost boost-python3\n\npython3 -m pip install --upgrade pip setuptools psutil wheel\n```\n\n\n#### Windows\nInstall [Git](https://git-scm.com/download/win) and [Python 3](https://www.python.org/downloads/).\nUpdate pip in the Command Line (here and for the **next steps** type `python` instead of `python3`)\n```commandline\npython -m pip install --upgrade pip setuptools psutil wheel\n```\n\n\n#### 2. Install GFootball\n#### Option a. From PyPi package (recommended)\n```shell\npython3 -m pip install gfootball\n```\n\n#### Option b. Installing from sources using GitHub repository \n(On Windows you have to install additional tools and set an environment variable, see \n[Compiling Engine](gfootball/doc/compile_engine.md#windows) for detailed instructions.)\n\n```shell\ngit clone https://github.com/google-research/football.git\ncd football\n```\n\nOptionally you can use [virtual environment](https://docs.python.org/3/tutorial/venv.html):\n\n```shell\npython3 -m venv football-env\nsource football-env/bin/activate\n```\n\nNext, build the game engine and install dependencies:\n\n```shell\npython3 -m pip install .\n```\nThis command can run for a couple of minutes, as it compiles the C++ environment in the background.\nIf you face any problems, first check [Compiling Engine](gfootball/doc/compile_engine.md) documentation and search GitHub issues.\n\n\n#### 3. Time to play!\n```shell\npython3 -m gfootball.play_game --action_set=full\n```\nMake sure to check out the [keyboard mappings](#keyboard-mappings).\nTo quit the game press Ctrl+C in the terminal.\n\n# Contents #\n\n* [Running training](#training-agents-to-play-GRF)\n* [Playing the game](#playing-the-game)\n    * [Keyboard mappings](#keyboard-mappings)\n    * [Play vs built-in AI](#play-vs-built-in-AI)\n    * [Play vs pre-trained agent](#play-vs-pre-trained-agent)\n    * [Trained checkpoints](#trained-checkpoints)\n* [Environment API](gfootball/doc/api.md)\n* [Observations & Actions](gfootball/doc/observation.md)\n* [Scenarios](gfootball/doc/scenarios.md)\n* [Multi-agent support](gfootball/doc/multi_agent.md)\n* [Running in docker](gfootball/doc/docker.md)\n* [Saving replays, logs, traces](gfootball/doc/saving_replays.md)\n* [Imitation Learning](gfootball/doc/imitation.md)\n\n## Training agents to play GRF\n\n### Run training\nIn order to run TF training, you need to install additional dependencies\n\n- Update PIP, so that tensorflow 1.15 is available: `python3 -m pip install --upgrade pip setuptools wheel`\n- TensorFlow: `python3 -m pip install tensorflow==1.15.*` or\n  `python3 -m pip install tensorflow-gpu==1.15.*`, depending on whether you want CPU or\n  GPU version;\n- Sonnet and psutil: `python3 -m pip install dm-sonnet==1.* psutil`;\n- OpenAI Baselines:\n  `python3 -m pip install git+https://github.com/openai/baselines.git@master`.\n\nThen:\n\n- To run example PPO experiment on `academy_empty_goal` scenario, run\n  `python3 -m gfootball.examples.run_ppo2 --level=academy_empty_goal_close`\n- To run on `academy_pass_and_shoot_with_keeper` scenario, run\n  `python3 -m gfootball.examples.run_ppo2 --level=academy_pass_and_shoot_with_keeper`\n\nIn order to train with nice replays being saved, run\n`python3 -m gfootball.examples.run_ppo2 --dump_full_episodes=True --render=True`\n\nIn order to reproduce PPO results from the paper, please refer to:\n\n- gfootball/examples/repro_checkpoint_easy.sh\n- gfootball/examples/repro_scoring_easy.sh\n\n## Playing the game\n\nPlease note that playing the game is implemented through an environment, so human-controlled players use the same interface as the agents.\nOne important implication is that there is a single action per 100 ms reported to the environment, which might cause a lag effect when playing.\n\n\n### Keyboard mappings\nThe game defines following keyboard mapping (for the `keyboard` player type):\n\n* `ARROW UP` - run to the top.\n* `ARROW DOWN` - run to the bottom.\n* `ARROW LEFT` - run to the left.\n* `ARROW RIGHT` - run to the right.\n* `S` - short pass in the attack mode, pressure in the defense mode.\n* `A` - high pass in the attack mode, sliding in the defense mode.\n* `D` - shot in the attack mode, team pressure in the defense mode.\n* `W` - long pass in the attack mode, goalkeeper pressure in the defense mode.\n* `Q` - switch the active player in the defense mode.\n* `C` - dribble in the attack mode.\n* `E` - sprint.\n\n### Play vs built-in AI\nRun `python3 -m gfootball.play_game --action_set=full`. By default, it starts\nthe base scenario and the left player is controlled by the keyboard. Different\ntypes of players are supported (gamepad, external bots, agents...). For possible\noptions run `python3 -m gfootball.play_game -helpfull`.\n\n### Play vs pre-trained agent\n\nIn particular, one can play against agent trained with `run_ppo2` script with\nthe following command (notice no action_set flag, as PPO agent uses default\naction set):\n`python3 -m gfootball.play_game --players \"keyboard:left_players=1;ppo2_cnn:right_players=1,checkpoint=$YOUR_PATH\"`\n\n### Trained checkpoints\nWe provide trained PPO checkpoints for the following scenarios:\n\n  - [11_vs_11_easy_stochastic](https://storage.googleapis.com/gfootball/11_vs_11_easy_stochastic_v2),\n  - [academy_run_to_score_with_keeper](https://storage.googleapis.com/gfootball/academy_run_to_score_with_keeper_v2).\n\nIn order to see the checkpoints playing, run\n`python3 -m gfootball.play_game --players \"ppo2_cnn:left_players=1,policy=gfootball_impala_cnn,checkpoint=$CHECKPOINT\" --level=$LEVEL`,\nwhere `$CHECKPOINT` is the path to downloaded checkpoint. Please note that the checkpoints were trained with Tensorflow 1.15 version. Using \ndifferent Tensorflow version may result in errors. The easiest way to run these checkpoints is through provided `Dockerfile_examples` image.\nSee [running in docker](gfootball/doc/docker.md) for details (just override the default Docker definition with `-f Dockerfile_examples` parameter).\n\nIn order to train against a checkpoint, you can pass 'extra_players' argument to create_environment function.\nFor example extra_players='ppo2_cnn:right_players=1,policy=gfootball_impala_cnn,checkpoint=$CHECKPOINT'.\n"
        },
        {
          "name": "gfootball",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1591796875,
          "content": "# If you change any of the requirements here please don't forget to change them in setup.py too\npygame>=1.9.6\nopencv-python\npsutil\nnumpy\ngym<=0.21.0\nabsl-py\nwheel\n"
        },
        {
          "name": "run_docker_test.sh",
          "type": "blob",
          "size": 0.615234375,
          "content": "#!/bin/bash\nset -e\ndocker build --build-arg DOCKER_BASE=ubuntu:20.04 . -t gfootball_docker_test\ndocker run --gpus all -v /tmp/.X11-unix:/tmp/.X11-unix:rw --entrypoint bash -it gfootball_docker_test -c 'set -e; for x in `find gfootball/env -name *_test.py`; do UNITTEST_IN_DOCKER=1 PYTHONPATH=/ python3 $x; done'\n\ndocker build --build-arg DOCKER_BASE=ubuntu:18.04 . -t gfootball_docker_test -f Dockerfile_examples\ndocker run -v /tmp/.X11-unix:/tmp/.X11-unix:rw --gpus all --entrypoint python3 -it gfootball_docker_test gfootball/examples/run_ppo2.py --level=academy_empty_goal_close --num_timesteps=10000\necho \"Test successful!!!\"\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 7.33984375,
          "content": "# coding=utf-8\n# Copyright 2019 Google LLC\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Install Google Research Football.\"\"\"\n\nimport os\nimport sys\nimport glob\nimport platform\nimport shutil\nfrom setuptools import find_packages\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext\n\n\nclass CMakeExtension(Extension):\n\n  def __init__(self, name):\n    # don't invoke the original build_ext for this special extension\n    sources = ['third_party/gfootball_engine/src/misc/empty.cpp']\n    super().__init__(name, sources=sources, optional=True)\n\n\nclass CustomBuild(build_ext):\n  \"\"\"Custom installation script to build the C++ environment.\"\"\"\n\n  def run(self):\n    if platform.system() == 'Windows':\n      self.run_windows()\n    else:\n      self.run_unix()\n    super(CustomBuild, self).run()\n\n  def run_unix(self):\n    if os.path.exists(self.build_lib):\n      dest_dir = os.path.join(self.build_lib, 'gfootball_engine')\n    else:\n      # For the development install (pip install -e .)\n      # gfootball_engine module has to be located in the project root directory.\n      dest_dir = \"gfootball_engine\"\n      if not os.path.exists(dest_dir):\n        try:\n          os.symlink(os.path.abspath('third_party/gfootball_engine'), dest_dir)\n        except:\n          raise OSError(\"Google Research Football: Could not create symlink to %s\"\n                        \"for the development install.\" % dest_dir)\n\n    try:\n      use_prebuilt_lib = int(os.environ.get('GFOOTBALL_USE_PREBUILT_SO', '0'))\n    except ValueError:\n      raise ValueError('Could not parse GFOOTBALL_USE_PREBUILT_SO environment '\n                       'variable as int. Please set it to 0 or 1')\n\n    if use_prebuilt_lib:\n      if os.system(\n            'cp third_party/gfootball_engine/lib/prebuilt_gameplayfootball.so ' +\n            dest_dir + '/_gameplayfootball.so'):\n        raise OSError(\n            'Failed to copy pre-built library to a final destination %s.' %\n            dest_dir)\n    else:\n      # Compile the engine\n      if os.system('gfootball/build_game_engine.sh'):\n        raise OSError('Google Research Football compilation failed')\n      # There might be multiple compiled modules (e.g. for different python versions)\n      # Copy them all\n      libs = glob.glob(f'third_party/gfootball_engine/_gameplayfootball*.so')\n      copy_compiled_libs(libs, dest_dir)\n    copy_fonts(dest_dir)\n\n  def run_windows(self):\n    guide_message = 'Please follow the guide on how to install prerequisites: ' \\\n                    'https://github.com/google-research/football/blob/master/gfootball/doc/compile_engine.md#windows'\n    if not os.environ.get('VCPKG_ROOT'):\n      raise OSError('VCPKG_ROOT environment variable is not defined.\\n' + guide_message)\n\n    if os.path.exists(self.build_lib):\n      dest_dir = os.path.join(self.build_lib, 'gfootball_engine')\n    else:\n      # For the development install (pip install -e .)\n      # gfootball_engine module has to be located in the project root directory.\n      dest_dir = \"gfootball_engine\"\n      if not os.path.exists(dest_dir):\n        try:\n          os.symlink(os.path.abspath('third_party/gfootball_engine'), dest_dir, target_is_directory=True)\n        except OSError:\n          # Windows doesn't support symlinks for unprivileged users\n          # Fall back to copying the files\n          os.mkdir(dest_dir)\n          shutil.copy2('third_party/gfootball_engine/__init__.py', dest_dir)\n          data_dir = os.path.join(dest_dir, 'data')\n          if not os.path.exists(data_dir):\n            shutil.copytree('third_party/gfootball_engine/data', data_dir)\n\n    os.environ['GENERATOR_PLATFORM'] = 'x64' if sys.maxsize > 2 ** 32 else 'Win32'\n    py_major, py_minor, _ = platform.python_version_tuple()\n    os.environ['PY_VERSION'] = f'{py_major}.{py_minor}'\n    if os.system('gfootball\\\\build_game_engine.bat'):\n      raise OSError('Google Research Football compilation failed.\\n' + guide_message)\n    # Copy compiled library and its dependencies\n    lib_path = 'third_party/gfootball_engine/build_win/Release/'\n    libs = glob.glob(f'{lib_path}*.pyd') + glob.glob(f'{lib_path}*.dll')\n    copy_compiled_libs(libs, dest_dir)\n    copy_fonts(dest_dir)\n\n\ndef copy_compiled_libs(libs, dest_dir):\n  \"\"\"Copy compiled libraries to the destination directory.\"\"\"\n  for lib in libs:\n    try:\n      shutil.copy2(lib, dest_dir)\n    except shutil.SameFileError:\n      # In case the file is the same do nothing\n      pass\n\n\ndef copy_fonts(dest_dir):\n  \"\"\"Copy fonts to the destination directory.\"\"\"\n  dst_fonts = os.path.join(dest_dir, \"fonts\")\n  if not os.path.exists(dst_fonts):\n    shutil.copytree(\"third_party/fonts\", dst_fonts)\n\n\ndef process_develop_setup():\n  \"\"\"\n  Clean up (if necessary) some directories before or after running\n  setup in development (a.k.a. editable) mode (`pip install -e .`).\n  \"\"\"\n  if 'develop' in sys.argv and os.path.exists('build'):\n    # Remove `build` directory created by a regular installation\n    shutil.rmtree('build')\n  elif 'develop' not in sys.argv and os.path.exists('gfootball_engine'):\n    # If `pip install .` is called after development mode,\n    # remove the 'fonts' directory copied by a `develop` setup\n    copied_fonts = 'third_party/gfootball_engine/fonts'\n    if os.path.exists(copied_fonts):\n      shutil.rmtree(copied_fonts)\n    # Remove .so files (.pyd on Windows)\n    for empty_lib in glob.glob(\"brainball_cpp_engine*\"):\n      os.remove(empty_lib)\n    # Finally, remove symlink to the gfootball_engine directory\n    if not os.path.exists('gfootball_engine'):\n      return\n    if os.path.islink('gfootball_engine'):\n      if platform.system() == 'Windows':\n        os.remove('gfootball_engine')\n      else:\n        os.unlink('gfootball_engine')\n    else:\n      shutil.rmtree('gfootball_engine')\n\n\n# TODO: Add CI tests for develop setup on all platforms\nprocess_develop_setup()\npackages = find_packages() + find_packages('third_party')\n\nsetup(\n    name='gfootball',\n    version='2.10.3',\n    description=('Google Research Football - RL environment based on '\n                 'open-source game Gameplay Football'),\n    long_description=('Please see [our GitHub page](https://github.com/google-research/football) '\n                      'for details.'),\n    long_description_content_type='text/markdown',\n    author='Google LLC',\n    author_email='no-reply@google.com',\n    url='https://github.com/google-research/football',\n    license='Apache 2.0',\n    packages=packages,\n    package_dir={'gfootball_engine': 'third_party/gfootball_engine'},\n    # If you change the requirements here please don't forget to change the requirements.txt too\n    install_requires=[\n        'pygame>=1.9.6',\n        'opencv-python',\n        'psutil',\n        'numpy',\n        'gym<=0.21.0',\n        'absl-py',\n        'wheel',\n    ],\n    include_package_data=True,\n    keywords='gfootball reinforcement-learning python machine learning',\n    ext_modules=[CMakeExtension('brainball_cpp_engine')],\n    cmdclass={'build_ext': CustomBuild},\n)\n"
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}