{
  "metadata": {
    "timestamp": 1736559748646,
    "page": 455,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "buriburisuri/speech-to-text-wavenet",
      "stars": 3964,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0205078125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# IPython Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# dotenv\n.env\n\n# virtualenv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.3994140625,
          "content": "## 0.0.0.2 ( 2017-03-20 )\n\nFeatures :\n    - add more datasets ( VCTK + LibriSpeech, TEDLIUM release 2). \n      Total # of sentence is now 240,612. ( Previously 36,395 )\n    - split dataset into train, valid and test to check validation/test loss.\n    - add simple speed variation augmentation\n    - support multiple GPU training \n    - support Docker image\n    \nRefactored :\n    - adapted to tensorflow 1.0.0\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.0615234375,
          "content": "# Speech-to-Text-WaveNet : End-to-end sentence level English speech recognition using DeepMind's WaveNet\nA tensorflow implementation of speech recognition based on DeepMind's [WaveNet: A Generative Model for Raw Audio](https://arxiv.org/abs/1609.03499). (Hereafter the Paper)\n\nAlthough [ibab](https://github.com/ibab/tensorflow-wavenet) and [tomlepaine](https://github.com/tomlepaine/fast-wavenet) have already implemented WaveNet with tensorflow, they did not implement speech recognition. That's why we decided to implement it ourselves. \n\nSome of Deepmind's recent papers are tricky to reproduce. The Paper also omitted specific details about the implementation, and we had to fill the gaps in our own way.\n\nHere are a few important notes.\n\nFirst, while the Paper used the TIMIT dataset for the speech recognition experiment, we used the free VTCK dataset.\n\nSecond, the Paper added a mean-pooling layer after the dilated convolution layer for down-sampling. We extracted [MFCC](https://en.wikipedia.org/wiki/Mel-frequency_cepstrum) from wav files and removed the final mean-pooling layer because the original setting was impossible to run on our TitanX GPU.\n\nThird, since the TIMIT dataset has phoneme labels, the Paper trained the model with two loss terms, phoneme classification and next phoneme prediction. We, instead, used a single CTC loss because VCTK provides sentence-level labels. As a result, we used only dilated conv1d layers without any dilated conv1d layers.\n\nFinally, we didn't do quantitative analyses such as BLEU score and post-processing by combining a language model due to the time constraints.\n\nThe final architecture is shown in the following figure.\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/buriburisuri/speech-to-text-wavenet/master/png/architecture.png\" width=\"1024\"/>\n</p>\n(Some images are cropped from [WaveNet: A Generative Model for Raw Audio](https://arxiv.org/abs/1609.03499) and [Neural Machine Translation in Linear Time](https://arxiv.org/abs/1610.10099))  \n\n\n## Version \n\nCurrent Version : __***0.0.0.2***__\n\n## Dependencies ( VERSION MUST BE MATCHED EXACTLY! )\n\n1. [tensorflow](https://www.tensorflow.org/versions/r0.11/get_started/os_setup.html#pip-installation) == 1.0.0\n1. [sugartensor](https://github.com/buriburisuri/sugartensor) == 1.0.0.2\n1. [pandas](http://pandas.pydata.org/pandas-docs/stable/install.html) >= 0.19.2\n1. [librosa](https://github.com/librosa/librosa) == 0.5.0\n1. [scikits.audiolab](https://pypi.python.org/pypi/scikits.audiolab)==0.11.0\n\nIf you have problems with the librosa library, try to install ffmpeg by the following command. ( Ubuntu 14.04 )  \n<pre><code>\nsudo add-apt-repository ppa:mc3man/trusty-media\nsudo apt-get update\nsudo apt-get dist-upgrade -y\nsudo apt-get -y install ffmpeg\n</code></pre>\n\n## Dataset\n\nWe used [VCTK](http://homepages.inf.ed.ac.uk/jyamagis/page3/page58/page58.html), \n[LibriSpeech](http://www.openslr.org/12/) and [TEDLIUM release 2](http://www-lium.univ-lemans.fr/en/content/ted-lium-corpus) corpus.\nTotal number of sentences in the training set composed of the above three corpus is 240,612. \nValid and test set is built using only LibriSpeech and TEDLIUM corpuse, because VCTK corpus does not have valid and test set. \nAfter downloading the each corpus, extract them in the 'asset/data/VCTK-Corpus', 'asset/data/LibriSpeech' and \n 'asset/data/TEDLIUM_release2' directories. \n \nAudio was augmented by the scheme in the [Tom Ko et al](http://speak.clsp.jhu.edu/uploads/publications/papers/1050_pdf.pdf)'s paper. \n(Thanks @migvel for your kind information)  \n\n## Pre-processing dataset\n\nThe TEDLIUM release 2 dataset provides audio data in the SPH format, so we should convert them to some format \nlibrosa library can handle. Run the following command in the 'asset/data' directory convert SPH to wave format.  \n<pre><code>\nfind -type f -name '*.sph' | awk '{printf \"sox -t sph %s -b 16 -t wav %s\\n\", $0, $0\".wav\" }' | bash\n</code></pre>\n\nIf you don't have installed `sox`, please installed it first.\n<pre><code>\nsudo apt-get install sox\n</code></pre>\n\nWe found the main bottle neck is disk read time when training, so we decide to pre-process the whole audio data into \n  the MFCC feature files which is much smaller. And we highly recommend using SSD instead of hard drive.  \n  Run the following command in the console to pre-process whole dataset.\n<pre><code>\npython preprocess.py\n</code></pre>\n \n\n## Training the network\n\nExecute\n<pre><code>\npython train.py ( <== Use all available GPUs )\nor\nCUDA_VISIBLE_DEVICES=0,1 python train.py ( <== Use only GPU 0, 1 )\n</code></pre>\nto train the network. You can see the result ckpt files and log files in the 'asset/train' directory.\nLaunch tensorboard --logdir asset/train/log to monitor training process.\n\nWe've trained this model on a 3 Nvidia 1080 Pascal GPUs during 40 hours until 50 epochs and we picked the epoch when the \nvalidatation loss is minimum. In our case, it is epoch 40.  If you face the out of memory error, \nreduce batch_size in the train.py file from 16 to 4.  \n\nThe CTC losses at each epoch are as following table:\n\n| epoch | train set | valid set | test set | \n| :----: | ----: | ----: | ----: |\n| 20 | 79.541500 | 73.645237 | 83.607269 |\n| 30 | 72.884180 | 69.738348 | 80.145867 |\n| 40 | 69.948266 | 66.834316 | 77.316114 |\n| 50 | 69.127240 | 67.639895 | 77.866674 |\n\n\n## Testing the network\n\nAfter training finished, you can check valid or test set CTC loss by the following command.\n<pre><code>\npython test.py --set train|valid|test --frac 1.0(0.01~1.0)\n</code></pre>\nThe `frac` option will be useful if you want to test only the fraction of dataset for fast evaluation. \n\n## Transforming speech wave file to English text \n \nExecute\n<pre><code>\npython recognize.py --file <wave_file path>\n</code></pre>\nto transform a speech wave file to the English sentence. The result will be printed on the console. \n\nFor example, try the following command.\n<pre><code>\npython recognize.py --file asset/data/LibriSpeech/test-clean/1089/134686/1089-134686-0000.flac\npython recognize.py --file asset/data/LibriSpeech/test-clean/1089/134686/1089-134686-0001.flac\npython recognize.py --file asset/data/LibriSpeech/test-clean/1089/134686/1089-134686-0002.flac\npython recognize.py --file asset/data/LibriSpeech/test-clean/1089/134686/1089-134686-0003.flac\npython recognize.py --file asset/data/LibriSpeech/test-clean/1089/134686/1089-134686-0004.flac\n</code></pre>\n\nThe result will be as follows:\n<pre><code>\nhe hoped there would be stoo for dinner turnips and charrats and bruzed patatos and fat mutton pieces to be ladled out in th thick peppered flower fatan sauce\nstuffid into you his belly counsiled him\nafter early night fall the yetl lampse woich light hop here and there on the squalled quarter of the browfles\no berty and he god in your mind\nnumbrt tan fresh nalli is waiting on nou cold nit husband\n</code></pre>\n\nThe ground truth is as follows:\n<pre><code>\nHE HOPED THERE WOULD BE STEW FOR DINNER TURNIPS AND CARROTS AND BRUISED POTATOES AND FAT MUTTON PIECES TO BE LADLED OUT IN THICK PEPPERED FLOUR FATTENED SAUCE\nSTUFF IT INTO YOU HIS BELLY COUNSELLED HIM\nAFTER EARLY NIGHTFALL THE YELLOW LAMPS WOULD LIGHT UP HERE AND THERE THE SQUALID QUARTER OF THE BROTHELS\nHELLO BERTIE ANY GOOD IN YOUR MIND\nNUMBER TEN FRESH NELLY IS WAITING ON YOU GOOD NIGHT HUSBAND\n</code></pre>\n\nAs mentioned earlier, there is no language model, so there are some cases where capital letters, punctuations, and words are misspelled.\n\n## pre-trained models\n\nYou can transform a speech wave file to English text with the pre-trained model on the VCTK corpus. \nExtract [the following zip file](https://drive.google.com/file/d/0B3ILZKxzcrUyVWwtT25FemZEZ1k/view?usp=sharing&resourcekey=0-R4oPytT6GC2AGiIGi8L_ag) to the 'asset/train/' directory.\n\n## Docker support\n\nSee docker [README.md](docker/README.md).\n\n## Future works\n\n1. Language Model\n1. Polyglot(Multi-lingual) Model\n\nWe think that we should replace CTC beam decoder with a practical language model  \nand the polyglot speech recognition model will be a good candidate to future works.\n\n## Other resources\n\n1. [ibab's WaveNet(speech synthesis) tensorflow implementation](https://github.com/ibab/tensorflow-wavenet)\n1. [tomlepaine's Fast WaveNet(speech synthesis) tensorflow implementation](https://github.com/ibab/tensorflow-wavenet)\n\n## Namju's other repositories\n\n1. [SugarTensor](https://github.com/buriburisuri/sugartensor)\n1. [EBGAN tensorflow implementation](https://github.com/buriburisuri/ebgan)\n1. [Timeseries gan tensorflow implementation](https://github.com/buriburisuri/timeseries_gan)\n1. [Supervised InfoGAN tensorflow implementation](https://github.com/buriburisuri/supervised_infogan)\n1. [AC-GAN tensorflow implementation](https://github.com/buriburisuri/ac-gan)\n1. [SRGAN tensorflow implementation](https://github.com/buriburisuri/SRGAN)\n1. [ByteNet-Fast Neural Machine Translation](https://github.com/buriburisuri/ByteNet)\n\n## Citation\n\nIf you find this code useful please cite us in your work:\n\n<pre><code>\nKim and Park. Speech-to-Text-WaveNet. 2016. GitHub repository. https://github.com/buriburisuri/.\n</code></pre>\n\n# Authors\n\nNamju Kim (namju.kim@kakaocorp.com) at KakaoBrain Corp.\n\nKyubyong Park (kbpark@jamonglab.com) at KakaoBrain Corp.\n"
        },
        {
          "name": "data.py",
          "type": "blob",
          "size": 3.755859375,
          "content": "import sugartensor as tf\nimport numpy as np\nimport csv\nimport string\n\n\n__author__ = 'namju.kim@kakaobrain.com'\n\n\n# default data path\n_data_path = 'asset/data/'\n\n#\n# vocabulary table\n#\n\n# index to byte mapping\nindex2byte = ['<EMP>', ' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g',\n              'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\n              'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\n# byte to index mapping\nbyte2index = {}\nfor i, ch in enumerate(index2byte):\n    byte2index[ch] = i\n\n# vocabulary size\nvoca_size = len(index2byte)\n\n\n# convert sentence to index list\ndef str2index(str_):\n\n    # clean white space\n    str_ = ' '.join(str_.split())\n    # remove punctuation and make lower case\n    str_ = str_.translate(None, string.punctuation).lower()\n\n    res = []\n    for ch in str_:\n        try:\n            res.append(byte2index[ch])\n        except KeyError:\n            # drop OOV\n            pass\n    return res\n\n\n# convert index list to string\ndef index2str(index_list):\n    # transform label index to character\n    str_ = ''\n    for ch in index_list:\n        if ch > 0:\n            str_ += index2byte[ch]\n        elif ch == 0:  # <EOS>\n            break\n    return str_\n\n\n# print list of index list\ndef print_index(indices):\n    for index_list in indices:\n        print(index2str(index_list))\n\n\n# real-time wave to mfcc conversion function\n@tf.sg_producer_func\ndef _load_mfcc(src_list):\n\n    # label, wave_file\n    label, mfcc_file = src_list\n\n    # decode string to integer\n    label = np.fromstring(label, np.int)\n\n    # load mfcc\n    mfcc = np.load(mfcc_file, allow_pickle=False)\n\n    # speed perturbation augmenting\n    mfcc = _augment_speech(mfcc)\n\n    return label, mfcc\n\n\ndef _augment_speech(mfcc):\n\n    # random frequency shift ( == speed perturbation effect on MFCC )\n    r = np.random.randint(-2, 2)\n\n    # shifting mfcc\n    mfcc = np.roll(mfcc, r, axis=0)\n\n    # zero padding\n    if r > 0:\n        mfcc[:r, :] = 0\n    elif r < 0:\n        mfcc[r:, :] = 0\n\n    return mfcc\n\n\n# Speech Corpus\nclass SpeechCorpus(object):\n\n    def __init__(self, batch_size=16, set_name='train'):\n\n        # load meta file\n        label, mfcc_file = [], []\n        with open(_data_path + 'preprocess/meta/%s.csv' % set_name) as csv_file:\n            reader = csv.reader(csv_file, delimiter=',')\n            for row in reader:\n                # mfcc file\n                mfcc_file.append(_data_path + 'preprocess/mfcc/' + row[0] + '.npy')\n                # label info ( convert to string object for variable-length support )\n                label.append(np.asarray(row[1:], dtype=np.int).tostring())\n\n        # to constant tensor\n        label_t = tf.convert_to_tensor(label)\n        mfcc_file_t = tf.convert_to_tensor(mfcc_file)\n\n        # create queue from constant tensor\n        label_q, mfcc_file_q \\\n            = tf.train.slice_input_producer([label_t, mfcc_file_t], shuffle=True)\n\n        # create label, mfcc queue\n        label_q, mfcc_q = _load_mfcc(source=[label_q, mfcc_file_q],\n                                     dtypes=[tf.sg_intx, tf.sg_floatx],\n                                     capacity=256, num_threads=64)\n\n        # create batch queue with dynamic pad\n        batch_queue = tf.train.batch([label_q, mfcc_q], batch_size,\n                                     shapes=[(None,), (20, None)],\n                                     num_threads=64, capacity=batch_size*32,\n                                     dynamic_pad=True)\n\n        # split data\n        self.label, self.mfcc = batch_queue\n        # batch * time * dim\n        self.mfcc = self.mfcc.sg_transpose(perm=[0, 2, 1])\n        # calc total batch count\n        self.num_batch = len(label) // batch_size\n\n        # print info\n        tf.sg_info('%s set loaded.(total data=%d, total batch=%d)'\n                   % (set_name.upper(), len(label), self.num_batch))\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "model.py",
          "type": "blob",
          "size": 1.451171875,
          "content": "import sugartensor as tf\n\n\nnum_blocks = 3     # dilated blocks\nnum_dim = 128      # latent dimension\n\n\n#\n# logit calculating graph using atrous convolution\n#\ndef get_logit(x, voca_size):\n\n    # residual block\n    def res_block(tensor, size, rate, block, dim=num_dim):\n\n        with tf.sg_context(name='block_%d_%d' % (block, rate)):\n\n            # filter convolution\n            conv_filter = tensor.sg_aconv1d(size=size, rate=rate, act='tanh', bn=True, name='conv_filter')\n\n            # gate convolution\n            conv_gate = tensor.sg_aconv1d(size=size, rate=rate,  act='sigmoid', bn=True, name='conv_gate')\n\n            # output by gate multiplying\n            out = conv_filter * conv_gate\n\n            # final output\n            out = out.sg_conv1d(size=1, dim=dim, act='tanh', bn=True, name='conv_out')\n\n            # residual and skip output\n            return out + tensor, out\n\n    # expand dimension\n    with tf.sg_context(name='front'):\n        z = x.sg_conv1d(size=1, dim=num_dim, act='tanh', bn=True, name='conv_in')\n\n    # dilated conv block loop\n    skip = 0  # skip connections\n    for i in range(num_blocks):\n        for r in [1, 2, 4, 8, 16]:\n            z, s = res_block(z, size=7, rate=r, block=i)\n            skip += s\n\n    # final logit layers\n    with tf.sg_context(name='logit'):\n        logit = (skip\n                 .sg_conv1d(size=1, act='tanh', bn=True, name='conv_1')\n                 .sg_conv1d(size=1, dim=voca_size, name='conv_2'))\n\n    return logit\n"
        },
        {
          "name": "png",
          "type": "tree",
          "content": null
        },
        {
          "name": "preprocess.py",
          "type": "blob",
          "size": 7.69921875,
          "content": "import numpy as np\nimport pandas as pd\nimport glob\nimport csv\nimport librosa\nimport scikits.audiolab\nimport data\nimport os\nimport subprocess\n\n__author__ = 'namju.kim@kakaobrain.com'\n\n\n# data path\n_data_path = \"asset/data/\"\n\n\n#\n# process VCTK corpus\n#\n\ndef process_vctk(csv_file):\n\n    # create csv writer\n    writer = csv.writer(csv_file, delimiter=',')\n\n    # read label-info\n    df = pd.read_table(_data_path + 'VCTK-Corpus/speaker-info.txt', usecols=['ID'],\n                       index_col=False, delim_whitespace=True)\n\n    # read file IDs\n    file_ids = []\n    for d in [_data_path + 'VCTK-Corpus/txt/p%d/' % uid for uid in df.ID.values]:\n        file_ids.extend([f[-12:-4] for f in sorted(glob.glob(d + '*.txt'))])\n\n    for i, f in enumerate(file_ids):\n\n        # wave file name\n        wave_file = _data_path + 'VCTK-Corpus/wav48/%s/' % f[:4] + f + '.wav'\n        fn = wave_file.split('/')[-1]\n        target_filename = 'asset/data/preprocess/mfcc/' + fn + '.npy'\n        if os.path.exists( target_filename ):\n            continue\n        # print info\n        print(\"VCTK corpus preprocessing (%d / %d) - '%s']\" % (i, len(file_ids), wave_file))\n\n        # load wave file\n        wave, sr = librosa.load(wave_file, mono=True, sr=None)\n\n        # re-sample ( 48K -> 16K )\n        wave = wave[::3]\n\n        # get mfcc feature\n        mfcc = librosa.feature.mfcc(wave, sr=16000)\n\n        # get label index\n        label = data.str2index(open(_data_path + 'VCTK-Corpus/txt/%s/' % f[:4] + f + '.txt').read())\n\n        # save result ( exclude small mfcc data to prevent ctc loss )\n        if len(label) < mfcc.shape[1]:\n            # save meta info\n            writer.writerow([fn] + label)\n            # save mfcc\n            np.save(target_filename, mfcc, allow_pickle=False)\n\n\n#\n# process LibriSpeech corpus\n#\n\ndef process_libri(csv_file, category):\n\n    parent_path = _data_path + 'LibriSpeech/' + category + '/'\n    labels, wave_files = [], []\n\n    # create csv writer\n    writer = csv.writer(csv_file, delimiter=',')\n\n    # read directory list by speaker\n    speaker_list = glob.glob(parent_path + '*')\n    for spk in speaker_list:\n\n        # read directory list by chapter\n        chapter_list = glob.glob(spk + '/*/')\n        for chap in chapter_list:\n\n            # read label text file list\n            txt_list = glob.glob(chap + '/*.txt')\n            for txt in txt_list:\n                with open(txt, 'rt') as f:\n                    records = f.readlines()\n                    for record in records:\n                        # parsing record\n                        field = record.split('-')  # split by '-'\n                        speaker = field[0]\n                        chapter = field[1]\n                        field = field[2].split()  # split field[2] by ' '\n                        utterance = field[0]  # first column is utterance id\n\n                        # wave file name\n                        wave_file = parent_path + '%s/%s/%s-%s-%s.flac' % \\\n                                                  (speaker, chapter, speaker, chapter, utterance)\n                        wave_files.append(wave_file)\n\n                        # label index\n                        labels.append(data.str2index(' '.join(field[1:])))  # last column is text label\n\n    # save results\n    for i, (wave_file, label) in enumerate(zip(wave_files, labels)):\n        fn = wave_file.split('/')[-1]\n        target_filename = 'asset/data/preprocess/mfcc/' + fn + '.npy'\n        if os.path.exists( target_filename ):\n            continue\n        # print info\n        print(\"LibriSpeech corpus preprocessing (%d / %d) - '%s']\" % (i, len(wave_files), wave_file))\n\n        # load flac file\n        wave, sr, _ = scikits.audiolab.flacread(wave_file)\n\n        # get mfcc feature\n        mfcc = librosa.feature.mfcc(wave, sr=16000)\n\n        # save result ( exclude small mfcc data to prevent ctc loss )\n        if len(label) < mfcc.shape[1]:\n            # filename\n\n            # save meta info\n            writer.writerow([fn] + label)\n\n            # save mfcc\n            np.save(target_filename, mfcc, allow_pickle=False)\n\n\n#\n# process TEDLIUM corpus\n#\ndef convert_sph( sph, wav ):\n    \"\"\"Convert an sph file into wav format for further processing\"\"\"\n    command = [\n        'sox','-t','sph', sph, '-b','16','-t','wav', wav\n    ]\n    subprocess.check_call( command ) # Did you install sox (apt-get install sox)\n\ndef process_ted(csv_file, category):\n\n    parent_path = _data_path + 'TEDLIUM_release2/' + category + '/'\n    labels, wave_files, offsets, durs = [], [], [], []\n\n    # create csv writer\n    writer = csv.writer(csv_file, delimiter=',')\n\n    # read STM file list\n    stm_list = glob.glob(parent_path + 'stm/*')\n    for stm in stm_list:\n        with open(stm, 'rt') as f:\n            records = f.readlines()\n            for record in records:\n                field = record.split()\n\n                # wave file name\n                wave_file = parent_path + 'sph/%s.sph.wav' % field[0]\n                wave_files.append(wave_file)\n\n                # label index\n                labels.append(data.str2index(' '.join(field[6:])))\n\n                # start, end info\n                start, end = float(field[3]), float(field[4])\n                offsets.append(start)\n                durs.append(end - start)\n\n    # save results\n    for i, (wave_file, label, offset, dur) in enumerate(zip(wave_files, labels, offsets, durs)):\n        fn = \"%s-%.2f\" % (wave_file.split('/')[-1], offset)\n        target_filename = 'asset/data/preprocess/mfcc/' + fn + '.npy'\n        if os.path.exists( target_filename ):\n            continue\n        # print info\n        print(\"TEDLIUM corpus preprocessing (%d / %d) - '%s-%.2f]\" % (i, len(wave_files), wave_file, offset))\n        # load wave file\n        if not os.path.exists( wave_file ):\n            sph_file = wave_file.rsplit('.',1)[0]\n            if os.path.exists( sph_file ):\n                convert_sph( sph_file, wave_file )\n            else:\n                raise RuntimeError(\"Missing sph file from TedLium corpus at %s\"%(sph_file))\n        wave, sr = librosa.load(wave_file, mono=True, sr=None, offset=offset, duration=dur)\n\n        # get mfcc feature\n        mfcc = librosa.feature.mfcc(wave, sr=16000)\n\n        # save result ( exclude small mfcc data to prevent ctc loss )\n        if len(label) < mfcc.shape[1]:\n            # filename\n\n            # save meta info\n            writer.writerow([fn] + label)\n\n            # save mfcc\n            np.save(target_filename, mfcc, allow_pickle=False)\n\n\n#\n# Create directories\n#\nif not os.path.exists('asset/data/preprocess'):\n    os.makedirs('asset/data/preprocess')\nif not os.path.exists('asset/data/preprocess/meta'):\n    os.makedirs('asset/data/preprocess/meta')\nif not os.path.exists('asset/data/preprocess/mfcc'):\n    os.makedirs('asset/data/preprocess/mfcc')\n\n\n#\n# Run pre-processing for training\n#\n\n# VCTK corpus\ncsv_f = open('asset/data/preprocess/meta/train.csv', 'w')\nprocess_vctk(csv_f)\ncsv_f.close()\n\n# LibriSpeech corpus for train\ncsv_f = open('asset/data/preprocess/meta/train.csv', 'a+')\nprocess_libri(csv_f, 'train-clean-360')\ncsv_f.close()\n\n# TEDLIUM corpus for train\ncsv_f = open('asset/data/preprocess/meta/train.csv', 'a+')\nprocess_ted(csv_f, 'train')\ncsv_f.close()\n\n#\n# Run pre-processing for validation\n#\n\n# LibriSpeech corpus for valid\ncsv_f = open('asset/data/preprocess/meta/valid.csv', 'w')\nprocess_libri(csv_f, 'dev-clean')\ncsv_f.close()\n\n# TEDLIUM corpus for valid\ncsv_f = open('asset/data/preprocess/meta/valid.csv', 'a+')\nprocess_ted(csv_f, 'dev')\ncsv_f.close()\n\n#\n# Run pre-processing for testing\n#\n\n# LibriSpeech corpus for test\ncsv_f = open('asset/data/preprocess/meta/test.csv', 'w')\nprocess_libri(csv_f, 'test-clean')\ncsv_f.close()\n\n# TEDLIUM corpus for test\ncsv_f = open('asset/data/preprocess/meta/test.csv', 'a+')\nprocess_ted(csv_f, 'test')\ncsv_f.close()\n\n"
        },
        {
          "name": "recognize.py",
          "type": "blob",
          "size": 1.4306640625,
          "content": "# -*- coding: utf-8 -*-\nimport sugartensor as tf\nimport numpy as np\nimport librosa\nfrom model import *\nimport data\n\n\n__author__ = 'namju.kim@kakaobrain.com'\n\n\n# set log level to debug\ntf.sg_verbosity(10)\n\n#\n# hyper parameters\n#\n\nbatch_size = 1     # batch size\n\n#\n# inputs\n#\n\n# vocabulary size\nvoca_size = data.voca_size\n\n# mfcc feature of audio\nx = tf.placeholder(dtype=tf.sg_floatx, shape=(batch_size, None, 20))\n\n# sequence length except zero-padding\nseq_len = tf.not_equal(x.sg_sum(axis=2), 0.).sg_int().sg_sum(axis=1)\n\n# encode audio feature\nlogit = get_logit(x, voca_size=voca_size)\n\n# ctc decoding\ndecoded, _ = tf.nn.ctc_beam_search_decoder(logit.sg_transpose(perm=[1, 0, 2]), seq_len, merge_repeated=False)\n\n# to dense tensor\ny = tf.sparse_to_dense(decoded[0].indices, decoded[0].dense_shape, decoded[0].values) + 1\n\n#\n# regcognize wave file\n#\n\n# command line argument for input wave file path\ntf.sg_arg_def(file=('', 'speech wave file to recognize.'))\n\n# load wave file\nwav, _ = librosa.load(tf.sg_arg().file, mono=True, sr=16000)\n# get mfcc feature\nmfcc = np.transpose(np.expand_dims(librosa.feature.mfcc(wav, 16000), axis=0), [0, 2, 1])\n\n# run network\nwith tf.Session() as sess:\n\n    # init variables\n    tf.sg_init(sess)\n\n    # restore parameters\n    saver = tf.train.Saver()\n    saver.restore(sess, tf.train.latest_checkpoint('asset/train'))\n    # run session\n    label = sess.run(y, feed_dict={x: mfcc})\n\n    # print label\n    data.print_index(label)\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.07421875,
          "content": "sugartensor==1.0.0.2\npandas==0.19.2\nlibrosa==0.5.0\nscikits.audiolab==0.11.0\n"
        },
        {
          "name": "test.py",
          "type": "blob",
          "size": 2.1201171875,
          "content": "import sugartensor as tf\nfrom data import SpeechCorpus, voca_size\nfrom model import *\nimport numpy as np\nfrom tqdm import tqdm\n\n\n__author__ = 'namju.kim@kakaobrain.com'\n\n\n# set log level to debug\ntf.sg_verbosity(10)\n\n# command line argument for set_name\ntf.sg_arg_def(set=('valid', \"'train', 'valid', or 'test'.  The default is 'valid'\"))\ntf.sg_arg_def(frac=(1.0, \"test fraction ratio to whole data set. The default is 1.0(=whole set)\"))\n\n\n#\n# hyper parameters\n#\n\n# batch size\nbatch_size = 16\n\n#\n# inputs\n#\n\n# corpus input tensor ( with QueueRunner )\ndata = SpeechCorpus(batch_size=batch_size, set_name=tf.sg_arg().set)\n\n# mfcc feature of audio\nx = data.mfcc\n# target sentence label\ny = data.label\n\n# sequence length except zero-padding\nseq_len = tf.not_equal(x.sg_sum(axis=2), 0.).sg_int().sg_sum(axis=1)\n\n#\n# Testing Graph\n#\n\n# encode audio feature\nlogit = get_logit(x, voca_size=voca_size)\n\n# CTC loss\nloss = logit.sg_ctc(target=y, seq_len=seq_len)\n\n#\n# run network\n#\n\nwith tf.Session(config=tf.ConfigProto(allow_soft_placement=True)) as sess:\n\n    # init variables\n    tf.sg_init(sess)\n\n    # restore parameters\n    saver = tf.train.Saver()\n    saver.restore(sess, tf.train.latest_checkpoint('asset/train'))\n\n    # logging\n    tf.sg_info('Testing started on %s set at global step[%08d].' %\n               (tf.sg_arg().set.upper(), sess.run(tf.sg_global_step())))\n\n    with tf.sg_queue_context():\n\n        # create progress bar\n        iterator = tqdm(range(0, int(data.num_batch * tf.sg_arg().frac)), total=int(data.num_batch * tf.sg_arg().frac),\n                        initial=0, desc='test', ncols=70, unit='b', leave=False)\n\n        # batch loop\n        loss_avg = 0.\n        for _ in iterator:\n\n            # run session\n            batch_loss = sess.run(loss)\n\n            # loss history update\n            if batch_loss is not None and \\\n                    not np.isnan(batch_loss.all()) and not np.isinf(batch_loss.all()):\n                loss_avg += np.mean(batch_loss)\n\n        # final average\n        loss_avg /= data.num_batch * tf.sg_arg().frac\n\n    # logging\n    tf.sg_info('Testing finished on %s.(CTC loss=%f)' % (tf.sg_arg().set.upper(), loss_avg))\n"
        },
        {
          "name": "train.py",
          "type": "blob",
          "size": 1.02734375,
          "content": "import sugartensor as tf\nfrom data import SpeechCorpus, voca_size\nfrom model import *\n\n\n__author__ = 'namju.kim@kakaobrain.com'\n\n\n# set log level to debug\ntf.sg_verbosity(10)\n\n\n#\n# hyper parameters\n#\n\nbatch_size = 16    # total batch size\n\n#\n# inputs\n#\n\n# corpus input tensor\ndata = SpeechCorpus(batch_size=batch_size * tf.sg_gpus())\n\n# mfcc feature of audio\ninputs = tf.split(data.mfcc, tf.sg_gpus(), axis=0)\n# target sentence label\nlabels = tf.split(data.label, tf.sg_gpus(), axis=0)\n\n# sequence length except zero-padding\nseq_len = []\nfor input_ in inputs:\n    seq_len.append(tf.not_equal(input_.sg_sum(axis=2), 0.).sg_int().sg_sum(axis=1))\n\n\n# parallel loss tower\n@tf.sg_parallel\ndef get_loss(opt):\n    # encode audio feature\n    logit = get_logit(opt.input[opt.gpu_index], voca_size=voca_size)\n    # CTC loss\n    return logit.sg_ctc(target=opt.target[opt.gpu_index], seq_len=opt.seq_len[opt.gpu_index])\n\n#\n# train\n#\ntf.sg_train(lr=0.0001, loss=get_loss(input=inputs, target=labels, seq_len=seq_len),\n            ep_size=data.num_batch, max_ep=50)\n"
        }
      ]
    }
  ]
}