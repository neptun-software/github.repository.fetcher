{
  "metadata": {
    "timestamp": 1736559949727,
    "page": 725,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjczMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cea-sec/miasm",
      "stars": 3524,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 1.4541015625,
          "content": "version: 1.{build}\n\nconfiguration:\n  - Release\n\nclone_folder: c:\\projects\\miasm\n\nenvironment:\n  matrix:\n    - platform: Win32\n      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      PLATFORM_TOOLSET: v141\n      PYTHON: c:\\Python38\n      PYTHON_VERSION: \"3.8.x\"\n\n    - platform: x64\n      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      PLATFORM_TOOLSET: v141\n      PYTHON: c:\\Python38-x64\n      PYTHON_VERSION: \"3.8.x\"\n      # on_finish:\n      #  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))\n\ninstall:\n  - cmd: cd c:\\projects\\miasm\n  - cmd: \"%PYTHON%\\\\python.exe -m pip install -r requirements.txt\"\n  - cmd: \"%PYTHON%\\\\python.exe -m pip install -r optional_requirements.txt\"\n\nbuild_script:\n  - cmd: if \"%platform%\"==\"Win32\" call \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\" x86\n  - cmd: if \"%platform%\"==\"x64\" call \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\" x64\n  - \"%PYTHON%\\\\python.exe setup.py build\"\n  - \"%PYTHON%\\\\python.exe setup.py install\"\n\ntest_script:\n  - cmd: cd c:\\projects\\miasm\\test\n  - \"%PYTHON%\\\\python.exe -W error test_all.py\"\n\nafter_test:\n  - cmd: chdir\n  - cmd: set plat\n  - cmd: if \"%platform%\"==\"Win32\" 7z a -t7z ..\\miasm.x86.release.7z c:\\projects\\miasm\\build\\*lib*\n  - cmd: if \"%platform%\"==\"X64\" 7z a -t7z ..\\miasm.x64.release.7z c:\\projects\\miasm\\build\\*lib*\n\nartifacts:\n  - path: miasm.*.7z\n"
        },
        {
          "name": ".codespell_ignore",
          "type": "blob",
          "size": 0.0537109375,
          "content": "ba\ndum\ndont\nuint\nmye\niff\nnto\nrela\ndaa\nod\nblocs\nfpr\nseh\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.189453125,
          "content": "# Build directory\n/build/*\ndist/\nsdists/\n# Emacs files\n*~\n# Compiled python files\n__pycache__/\n*.py[cod]\n# Generated files\n*.egg*\n**.dot\n**.so\nVERSION\n# Virtual environments\nvenv*/\n.env/\n.venv*/"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.828125,
          "content": "sudo: false\nlanguage: python\npython:\n  - 2.7\n  - 3.6\naddons:\n  apt:\n    sources: ['llvm-toolchain-xenial-6.0', 'ubuntu-toolchain-r-test']\n    packages:\n      - llvm-6.0\n      - llvm-6.0-dev\n      - g++-5\nenv:\n  global: CXX=g++-5 LLVM_CONFIG=llvm-config-6.0\n  matrix:\n    - MIASM_TEST_EXTRA_ARG=\"-o regression -t long,python,llvm,gcc,z3,qemu,cparser\"\n    - MIASM_TEST_EXTRA_ARG=\"-o example -t long,python,llvm,gcc,z3,qemu,cparser\"\n    - MIASM_TEST_EXTRA_ARG=\"-o long\"\n    - MIASM_TEST_EXTRA_ARG=\"-o qemu -t llvm,gcc\"\n    - MIASM_TEST_EXTRA_ARG=\"-o qemu -t python,gcc\"\n    - MIASM_TEST_EXTRA_ARG=\"-o qemu -t python,llvm\"\n    - MIASM_TEST_EXTRA_ARG=\"-o llvm -t qemu,long\"\n    - MIASM_TEST_EXTRA_ARG=\"-o gcc -t qemu,long\"\n    - MIASM_TEST_EXTRA_ARG=\"-o python -t qemu,long\"\n    - MIASM_TEST_EXTRA_ARG=\"-o z3\"\n    - MIASM_TEST_EXTRA_ARG=\"-o cparser\"\n    - MIASM_EXTENTED_TESTS_LS_X64=\"ls_x64\"\n    - MIASM_EXTENTED_TESTS_LOADER=\"loader\"\n    - MIASM_EXTENTED_TESTS_IR=\"ir_tests\"\nbefore_script:\n- pip install -r optional_requirements.txt\n# codespell\n- \"pip install codespell && git ls-files | xargs codespell --ignore-words=.codespell_ignore 2>/dev/null\"\n# install\n- python setup.py build build_ext\n- python setup.py install\n# extended tests\n- git clone https://github.com/cea-sec/miasm-extended-tests\nscript:\n  - test -z \"$MIASM_TEST_EXTRA_ARG\" || (cd test && flags=\"\"; python --version |& grep -q \"Python 3\" || flags=\"-W error\"; python $flags test_all.py $MIASM_TEST_EXTRA_ARG && git ls-files -o --exclude-standard)\n  - test -z \"$MIASM_EXTENTED_TESTS_LS_x64\" || (cd \"miasm-extended-tests/$MIASM_EXTENTED_TESTS_LS_X64\" && ./run.sh \"$TRAVIS_BUILD_DIR\")\n  - test -z \"$MIASM_EXTENTED_TESTS_LOADER\" || (cd \"miasm-extended-tests/$MIASM_EXTENTED_TESTS_LOADER\" && ./test_dll.py)\n  - test -z \"$MIASM_EXTENTED_TESTS_IR\" || (cd \"miasm-extended-tests/$MIASM_EXTENTED_TESTS_IR\" && ./run.sh)\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.3857421875,
          "content": "# Changelog\n\n## [Unreleased]\n\n## 0.1.5 - 2023-04-18\n### Fixed\n- header files for pip\n\n## 0.1.4 - 2023-04-04\n### Added\n- Support minimal PE/TLS\n- Added docstring by @williballenthin\n- Added remove_memory_page api by @carolineLe\n- Added minimalist linux env by @Frky\n- Documentation of expression\n- Documentation translation by @carolineLe\n- EXCEPT_SYSCALL by @Te-k\n- Use int(expr) instead of expr.arg.arg\n- IDAPython 7.4 porting by @nofiv\n- Fixed jitter on Windows by @jbgalet\n- Add trace api by @carolineLe\n- Add LocationDB documentation\n- Add Lifter documentation\n- Update to ida 7.x by @su-vikas\n- CI for python 3.10\n\n### Fixed\n- Str/bytes api by @WilliamBruneau\n- Fix pe loader by @carolineLe\n- Fix VirtualProtect when splitting access rights by @carolineLe\n- Bug in ms x86-64 calling convention by @Frky\n- Clean SSA api\n- fix MIPS/PPC/ARM by @IridiumXOR\n- Fix win/seh ListEntries by @carolineLe\n- Fix propagation expression algorithm\n- Replace api jitter.set_win_str by set_win_str(jitter...)\n- Fix Win api by @carolineLe\n- Llvm jitter by @aguinet\n- Fix Win api by @icecr4ck\n- Fix Win api by @Frky\n- Fix BitField by @w4kfu\n- Fix pe loader by @Ana06\n- Ida examples\n- Renamed *arch lifters\n- Docker by @clslgrnc\n- REX prefix by @KKomarov\n- Fix winapi by @tdrrdt\n- pyparsing dependency/setup.py by @P403n1x87\n- pop reg sp by @0xeb\n- Fix collections by @williambruneau\n- call back arm by @0xling\n- documentation by @CLOVIS-AI\n- many fixes by @CLOVIS-AI\n- really manu fixes by @CLOVIS-AI\n\n### Removed\n- asm_raw/asm_bloc/asm_bloc_bad old class (deprecated)\n- python 2.7 by @mrexodia\n\n## 0.1.3 - 2019-12-12\n### Added\n- Miasm can be installed with PIP (https://pypi.org/project/miasm/)\n\n### Fixed\n- Fixed DSE mem_read\n\n\n## 0.1.2 - 2019-12-11\n### Added\n- `find_path_from_src` added by @nofiv to DiGraph\n- Some simplifications (cst == X+ cst; X ^cst = cst)\n- Add a cache for C types\n- IR Simplifier\n- Add \"remove_breakpoints_by_address\" capability to jitter\n- compose_and_mask simplification by @icecr4ck\n- X86: high level op saturation semantic\n- Add extended tests for travis\n- memory breakpoint example by @idl3r\n- Miasm Logo\n\n### Fixed\n- Support Python2/Python3 done with @p-l-\n- Aarch64/PPC/x86 instructions/semantic\n- rev16/nop/ldrsb added by @hax0kartik\n- x86 rep instruction fixed by @nofiv\n- x86 ENDBR32/ENDBR64/CET fixed by @WilliamBruneau\n- SSA unused var\n- .shift to .base_address by @su-vikas\n- Propagate Phi with same sources\n- Clean unssa code\n- simplification fixed by @jie-lin\n- simplification fixed by @icecr4ck\n- Update/clean jitter code\n - PyGetInt/Python3/Bignum fix by @WilliamBruneau\n- macOS code fix by @trufae\n- macOS fix/updt by @icecr4ck\n- tipo by @Spl3en\n- Rename/Include `elfesteem` as `loader` in Miasm\n- Fix str/bytes by @carolineLe\n- Fix loader vm2pe by @WilliamBruneau\n- Codespell by @WilliamBruneau\n- internal representation for path as str\n- int1 handling by @losynix\n- x86 fix (ud2, roundsd, ir) by @htfy96\n- IDA graph example by @WilliamBruneau\n- Compilation on android by @WilliamBruneau\n- fix imports by @themaks\n- fix readme by @monperrus\n- get_win_str_[aw]/set_win_str_[aw] API out of jitter\n- get_c_str/set_c_str API in jitter\n- sembuilder fix by @htfy96\n- x86/rep by @a-vincent\n- Add simplifications regression tests\n- add sc2pe/get_export by @WilliamBruneau\n\n\n## 0.1.1 - 2019-01-16\n### Added\n- Graph: add postdominators computation from [@GAJaloyan](https://github.com/GAJaloyan)\n- Multiple X86/MeP/Arm/Amrt/Aarch64 mnemonics ([@guedou](https://github.com/guedou), [@w4kfu](https://github.com/w4kfu), [@nguigo](https://github.com/nguigo))\n- Qemu regression tests for X86_64\n- Start export of the intermediate language to LLVM\n- IR simplifications\n- Typos & codespell checker from [@p-l-](https://github.com/p-l-)\n- High level flags for MSP430\n\n### Fixed\n- Out-of-SSA with new algorithm\n- Travis cleanup/rework/improvement from [@stephengroat](https://github.com/stephengroat)\n- Jitter: pc update\n- Jitter/python: global refactoring\n- Change ExprMem pointer access (.ptr instead of .arg)\n- Rename IR operators idiv/imod to sdiv/smod for homogeneity\n- Clean replace_expr from [@Mizari](https://github.com/Mizari)\n- Various fixes\n- Instruction to_string from [@nofiv](https://github.com/nofiv)\n\n## 0.1.0 - 2018-11-12\n### Added\n- Support for Windows added from [@0vercl0k](https://github.com/0vercl0k)\n- Support for Appveyor\n- Symbolic execution memory management has been rewritten. As a result, the\n  global performance of symbolic execution has improved\n- Support for some of Thumb2 instructions\n- Support for build on OpenBSD\n- Support for `mips32b` emulation\n- Support for XMMs registers / 128 bits operations for all jitter engine\n- New IR word: ExpLoc (representing a location in the code)\n- New symbol management: LocationDB (replacing symbol_pool)\n- Split IRCFG from IntermediateRepresntation\n- SSA transformation added from [@mrphrazer](https://github.com/mrphrazer)\n- Support ELF relocations\n- Support for SSE (with qemu test)\n- Support for full Linux environment emulation + syscall\n- Support for explicit flags (eflags + size extend)\n- Support for (buggy) un-ssa\n- Improvement of floats handling\n- Added Toshiba MeP architecture added from [@guedou](https://github.com/guedou)\n- Add constant expressions propagation (ssa based)\n- Support for ARM SVC added from [@aguinet](https://github.com/aguinet)\n- Introduce `ExprMem.ptr`\n- Add various expression simplifications\n- Add immediate postdominator computation from [@GAJaloyan](https://github.com/GAJaloyan)\n\n### Removed\n- TCC support is dropped\n### Fixed\n- Trace api improved\n- Various fixes for the PPC architecture\n- Various fixes for the x86 architecture\n- Various fixes for ARM instructions\n- Various fixes in IDA plugins\n- Various code refactoring\n- No more default size in any `Expr`\n- `ExprAff` renamed to `ExprAssign`\n- Problems who might occurs when comparing for inequality (`!=`) in some of\n  Miasm objects\n- Instruction parsing codes have been cleaned and simplified\n- Resource rebuilding for PE\n- Better BigEndian handling in Miasm\n- Misleading name `EXCEPT_BREAKPOINT_INTERN` is renamed `EXCEPT_BREAKPOINT_MEMORY`\n- Gentoo compilation\n- Jitter memory page management\n- Sanitization of floats representation\n- Fix build on 32 bit machines\n- Fix DSE read/write bug\n- Sandbox's option `use-seh` renamed to the more precise `use-windows-structs`\n- Clean simplifier cache on pass enabling\n\n## 0.0.1 - 2018-03-12\n### Added\n- This CHANGELOG file\n- Version tracking\n\n[Unreleased]: https://github.com/cea-sec/miasm/compare/v0.1.0...HEAD\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.662109375,
          "content": "# This file is part of Miasm-Docker.\n# Copyright 2019 Camille Mougey <commial@gmail.com>\n#\n# Miasm-Docker is free software: you can redistribute it and/or modify it\n# under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Miasm-Docker is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n# License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Miasm-Docker. If not, see <http://www.gnu.org/licenses/>.\n\nFROM debian:buster\nLABEL maintainer=\"Camille Mougey <commial@gmail.com>\"\n\n# Download needed packages\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        gcc \\\n        g++ \\\n        python3 \\\n        python3-dev \\\n        python3-pip \\\n        python3-setuptools \\\n        python3-wheel \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /root/.cache\n\nWORKDIR /opt/miasm\n\n# Install Requirements\nCOPY requirements.txt /opt/miasm/requirements.txt\nRUN pip3 install -r requirements.txt\nCOPY optional_requirements.txt /opt/miasm/optional_requirements.txt\nRUN pip3 install -r optional_requirements.txt\n\n# Install miasm\nCOPY README.md /opt/miasm/README.md\nCOPY setup.py /opt/miasm/setup.py\nCOPY miasm /opt/miasm/miasm\nRUN pip3 install .\n\n# Get everything else\nCOPY . /opt/miasm\n\n# Set user\nRUN useradd miasm && \\\n    chown -Rh miasm /opt/miasm\nUSER miasm\n\n# Default cmd\nWORKDIR /opt/miasm/test\nCMD [\"/bin/bash\", \"-c\", \"/usr/bin/python3 test_all.py -m\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.0673828125,
          "content": "[![Build Status](https://travis-ci.org/cea-sec/miasm.svg)](https://travis-ci.org/cea-sec/miasm)\n[![Build status](https://ci.appveyor.com/api/projects/status/g845jr23nt18uf29/branch/master?svg=true)](https://ci.appveyor.com/project/cea-sec/miasm)\n[![Miasm tests](https://github.com/cea-sec/miasm/actions/workflows/tests.yml/badge.svg?branch=master)](https://github.com/cea-sec/miasm/actions/workflows/tests.yml?branch=master)\n[![Code Climate](https://codeclimate.com/github/cea-sec/miasm/badges/gpa.svg)](https://codeclimate.com/github/cea-sec/miasm)\n[![Join the chat at https://gitter.im/cea-sec/miasm](https://badges.gitter.im/cea-sec/miasm.svg)](https://gitter.im/cea-sec/miasm?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/cea-sec/miasm/master/doc/logo_miasm.png\">\n</p>\n\n\nWhat is Miasm?\n==============\n\nMiasm is a free and open source (GPLv2) reverse engineering framework.\nMiasm aims to analyze / modify / generate binary programs. Here is\na non exhaustive list of features:\n\n* Opening / modifying / generating PE / ELF 32 / 64 LE / BE\n* Assembling / Disassembling X86 / ARM / MIPS / SH4 / MSP430\n* Representing assembly semantic using intermediate language\n* Emulating using JIT (dynamic code analysis, unpacking, ...)\n* Expression simplification for automatic de-obfuscation\n* ...\n\nSee the official [blog](http://miasm.re) for more examples and demos.\n\nTable of Contents\n=================\n\n- [What is Miasm?](#user-content-what-is-miasm)\n- [Basic examples](#user-content-basic-examples)\n\t- [Assembling / Disassembling](#user-content-assembling--disassembling)\n\t- [Intermediate representation](#user-content-intermediate-representation)\n\t- [Emulation](#user-content-emulation)\n\t- [Symbolic execution](#user-content-symbolic-execution)\n- [How does it work?](#user-content-how-does-it-work)\n- [Documentation](#user-content-documentation)\n- [Obtaining Miasm](#user-content-obtaining-miasm)\n\t- [Software requirements](#user-content-software-requirements)\n\t- [Configuration](#user-content-configuration)\n\t- [Windows & IDA](#user-content-windows--ida)\n- [Testing](#user-content-testing)\n- [They already use Miasm](#user-content-they-already-use-miasm)\n- [Misc](#user-content-misc)\n\n\nBasic examples\n==============\n\nAssembling / Disassembling\n--------------------------\n\nImport Miasm x86 architecture:\n```pycon\n>>> from miasm.arch.x86.arch import mn_x86\n>>> from miasm.core.locationdb import LocationDB\n```\nGet a location db:\n\n```pycon\n>>> loc_db = LocationDB()\n```\nAssemble a line:\n```pycon\n>>> l = mn_x86.fromstring('XOR ECX, ECX', loc_db, 32)\n>>> print(l)\nXOR        ECX, ECX\n>>> mn_x86.asm(l)\n['1\\xc9', '3\\xc9', 'g1\\xc9', 'g3\\xc9']\n```\nModify an operand:\n```pycon\n>>> l.args[0] = mn_x86.regs.EAX\n>>> print(l)\nXOR        EAX, ECX\n>>> a = mn_x86.asm(l)\n>>> print(a)\n['1\\xc8', '3\\xc1', 'g1\\xc8', 'g3\\xc1']\n```\nDisassemble the result:\n```pycon\n>>> print(mn_x86.dis(a[0], 32))\nXOR        EAX, ECX\n```\nUsing `Machine` abstraction:\n\n```pycon\n>>> from miasm.analysis.machine import Machine\n>>> mn = Machine('x86_32').mn\n>>> print(mn.dis('\\x33\\x30', 32))\nXOR        ESI, DWORD PTR [EAX]\n```\n\nFor MIPS:\n```pycon\n>>> mn = Machine('mips32b').mn\n>>> print(mn.dis(b'\\x97\\xa3\\x00 ', \"b\"))\nLHU        V1, 0x20(SP)\n```\nIntermediate representation\n---------------------------\n\nCreate an instruction:\n\n```pycon\n>>> machine = Machine('arml')\n>>> instr = machine.mn.dis('\\x00 \\x88\\xe0', 'l')\n>>> print(instr)\nADD        R2, R8, R0\n```\n\nCreate an intermediate representation object:\n```pycon\n>>> lifter = machine.lifter_model_call(loc_db)\n```\nCreate an empty ircfg:\n```pycon\n>>> ircfg = lifter.new_ircfg()\n```\nAdd instruction to the pool:\n```pycon\n>>> lifter.add_instr_to_ircfg(instr, ircfg)\n```\n\nPrint current pool:\n```pycon\n>>> for lbl, irblock in ircfg.blocks.items():\n...     print(irblock)\nloc_0:\nR2 = R8 + R0\n\nIRDst = loc_4\n\n```\nWorking with IR, for instance by getting side effects:\n```pycon\n>>> for lbl, irblock in ircfg.blocks.items():\n...     for assignblk in irblock:\n...         rw = assignblk.get_rw()\n...         for dst, reads in rw.items():\n...             print('read:   ', [str(x) for x in reads])\n...             print('written:', dst)\n...             print()\n...\nread:    ['R8', 'R0']\nwritten: R2\n\nread:    []\nwritten: IRDst\n\n```\n\nMore information on Miasm IR is in the [corresponding Jupyter Notebook](https://github.com/cea-sec/miasm/blob/master/doc/expression/expression.ipynb).\n\nEmulation\n---------\n\nGiving a shellcode:\n```pycon\n00000000 8d4904      lea    ecx, [ecx+0x4]\n00000003 8d5b01      lea    ebx, [ebx+0x1]\n00000006 80f901      cmp    cl, 0x1\n00000009 7405        jz     0x10\n0000000b 8d5bff      lea    ebx, [ebx-1]\n0000000e eb03        jmp    0x13\n00000010 8d5b01      lea    ebx, [ebx+0x1]\n00000013 89d8        mov    eax, ebx\n00000015 c3          ret\n>>> s = b'\\x8dI\\x04\\x8d[\\x01\\x80\\xf9\\x01t\\x05\\x8d[\\xff\\xeb\\x03\\x8d[\\x01\\x89\\xd8\\xc3'\n```\nImport the shellcode thanks to the `Container` abstraction:\n\n```pycon\n>>> from miasm.analysis.binary import Container\n>>> c = Container.from_string(s, loc_db)\n>>> c\n<miasm.analysis.binary.ContainerUnknown object at 0x7f34cefe6090>\n```\n\nDisassembling the shellcode at address `0`:\n\n```pycon\n>>> from miasm.analysis.machine import Machine\n>>> machine = Machine('x86_32')\n>>> mdis = machine.dis_engine(c.bin_stream, loc_db=loc_db)\n>>> asmcfg = mdis.dis_multiblock(0)\n>>> for block in asmcfg.blocks:\n...  print(block)\n...\nloc_0\nLEA        ECX, DWORD PTR [ECX + 0x4]\nLEA        EBX, DWORD PTR [EBX + 0x1]\nCMP        CL, 0x1\nJZ         loc_10\n->      c_next:loc_b    c_to:loc_10\nloc_10\nLEA        EBX, DWORD PTR [EBX + 0x1]\n->      c_next:loc_13\nloc_b\nLEA        EBX, DWORD PTR [EBX + 0xFFFFFFFF]\nJMP        loc_13\n->      c_to:loc_13\nloc_13\nMOV        EAX, EBX\nRET\n```\n\nInitializing the JIT engine with a stack:\n\n```pycon\n>>> jitter = machine.jitter(loc_db, jit_type='python')\n>>> jitter.init_stack()\n```\n\nAdd the shellcode in an arbitrary memory location:\n```pycon\n>>> run_addr = 0x40000000\n>>> from miasm.jitter.csts import PAGE_READ, PAGE_WRITE\n>>> jitter.vm.add_memory_page(run_addr, PAGE_READ | PAGE_WRITE, s)\n```\n\nCreate a sentinelle to catch the return of the shellcode:\n\n```Python\ndef code_sentinelle(jitter):\n    jitter.running = False\n    jitter.pc = 0\n    return True\n\n>>> jitter.add_breakpoint(0x1337beef, code_sentinelle)\n>>> jitter.push_uint32_t(0x1337beef)\n```\n\nActive logs:\n\n```pycon\n>>> jitter.set_trace_log()\n```\n\nRun at arbitrary address:\n\n```pycon\n>>> jitter.init_run(run_addr)\n>>> jitter.continue_run()\nRAX 0000000000000000 RBX 0000000000000000 RCX 0000000000000000 RDX 0000000000000000\nRSI 0000000000000000 RDI 0000000000000000 RSP 000000000123FFF8 RBP 0000000000000000\nzf 0000000000000000 nf 0000000000000000 of 0000000000000000 cf 0000000000000000\nRIP 0000000040000000\n40000000 LEA        ECX, DWORD PTR [ECX+0x4]\nRAX 0000000000000000 RBX 0000000000000000 RCX 0000000000000004 RDX 0000000000000000\nRSI 0000000000000000 RDI 0000000000000000 RSP 000000000123FFF8 RBP 0000000000000000\nzf 0000000000000000 nf 0000000000000000 of 0000000000000000 cf 0000000000000000\n....\n4000000e JMP        loc_0000000040000013:0x40000013\nRAX 0000000000000000 RBX 0000000000000000 RCX 0000000000000004 RDX 0000000000000000\nRSI 0000000000000000 RDI 0000000000000000 RSP 000000000123FFF8 RBP 0000000000000000\nzf 0000000000000000 nf 0000000000000000 of 0000000000000000 cf 0000000000000000\nRIP 0000000040000013\n40000013 MOV        EAX, EBX\nRAX 0000000000000000 RBX 0000000000000000 RCX 0000000000000004 RDX 0000000000000000\nRSI 0000000000000000 RDI 0000000000000000 RSP 000000000123FFF8 RBP 0000000000000000\nzf 0000000000000000 nf 0000000000000000 of 0000000000000000 cf 0000000000000000\nRIP 0000000040000013\n40000015 RET\n>>>\n\n```\n\nInteracting with the jitter:\n\n```pycon\n>>> jitter.vm\nad 1230000 size 10000 RW_ hpad 0x2854b40\nad 40000000 size 16 RW_ hpad 0x25e0ed0\n\n>>> hex(jitter.cpu.EAX)\n'0x0L'\n>>> jitter.cpu.ESI = 12\n```\n\nSymbolic execution\n------------------\n\nInitializing the IR pool:\n\n```pycon\n>>> lifter = machine.lifter_model_call(loc_db)\n>>> ircfg = lifter.new_ircfg_from_asmcfg(asmcfg)\n```\n\nInitializing the engine with default symbolic values:\n\n```pycon\n>>> from miasm.ir.symbexec import SymbolicExecutionEngine\n>>> sb = SymbolicExecutionEngine(lifter)\n```\n\nLaunching the execution:\n\n```pycon\n>>> symbolic_pc = sb.run_at(ircfg, 0)\n>>> print(symbolic_pc)\n((ECX + 0x4)[0:8] + 0xFF)?(0xB,0x10)\n```\n\nSame, with step logs (only changes are displayed):\n\n```pycon\n>>> sb = SymbolicExecutionEngine(lifter, machine.mn.regs.regs_init)\n>>> symbolic_pc = sb.run_at(ircfg, 0, step=True)\nInstr LEA        ECX, DWORD PTR [ECX + 0x4]\nAssignblk:\nECX = ECX + 0x4\n________________________________________________________________________________\nECX                = ECX + 0x4\n________________________________________________________________________________\nInstr LEA        EBX, DWORD PTR [EBX + 0x1]\nAssignblk:\nEBX = EBX + 0x1\n________________________________________________________________________________\nEBX                = EBX + 0x1\nECX                = ECX + 0x4\n________________________________________________________________________________\nInstr CMP        CL, 0x1\nAssignblk:\nzf = (ECX[0:8] + -0x1)?(0x0,0x1)\nnf = (ECX[0:8] + -0x1)[7:8]\npf = parity((ECX[0:8] + -0x1) & 0xFF)\nof = ((ECX[0:8] ^ (ECX[0:8] + -0x1)) & (ECX[0:8] ^ 0x1))[7:8]\ncf = (((ECX[0:8] ^ 0x1) ^ (ECX[0:8] + -0x1)) ^ ((ECX[0:8] ^ (ECX[0:8] + -0x1)) & (ECX[0:8] ^ 0x1)))[7:8]\naf = ((ECX[0:8] ^ 0x1) ^ (ECX[0:8] + -0x1))[4:5]\n________________________________________________________________________________\naf                 = (((ECX + 0x4)[0:8] + 0xFF) ^ (ECX + 0x4)[0:8] ^ 0x1)[4:5]\npf                 = parity((ECX + 0x4)[0:8] + 0xFF)\nzf                 = ((ECX + 0x4)[0:8] + 0xFF)?(0x0,0x1)\nECX                = ECX + 0x4\nof                 = ((((ECX + 0x4)[0:8] + 0xFF) ^ (ECX + 0x4)[0:8]) & ((ECX + 0x4)[0:8] ^ 0x1))[7:8]\nnf                 = ((ECX + 0x4)[0:8] + 0xFF)[7:8]\ncf                 = (((((ECX + 0x4)[0:8] + 0xFF) ^ (ECX + 0x4)[0:8]) & ((ECX + 0x4)[0:8] ^ 0x1)) ^ ((ECX + 0x4)[0:8] + 0xFF) ^ (ECX + 0x4)[0:8] ^ 0x1)[7:8]\nEBX                = EBX + 0x1\n________________________________________________________________________________\nInstr JZ         loc_key_1\nAssignblk:\nIRDst = zf?(loc_key_1,loc_key_2)\nEIP = zf?(loc_key_1,loc_key_2)\n________________________________________________________________________________\naf                 = (((ECX + 0x4)[0:8] + 0xFF) ^ (ECX + 0x4)[0:8] ^ 0x1)[4:5]\nEIP                = ((ECX + 0x4)[0:8] + 0xFF)?(0xB,0x10)\npf                 = parity((ECX + 0x4)[0:8] + 0xFF)\nIRDst              = ((ECX + 0x4)[0:8] + 0xFF)?(0xB,0x10)\nzf                 = ((ECX + 0x4)[0:8] + 0xFF)?(0x0,0x1)\nECX                = ECX + 0x4\nof                 = ((((ECX + 0x4)[0:8] + 0xFF) ^ (ECX + 0x4)[0:8]) & ((ECX + 0x4)[0:8] ^ 0x1))[7:8]\nnf                 = ((ECX + 0x4)[0:8] + 0xFF)[7:8]\ncf                 = (((((ECX + 0x4)[0:8] + 0xFF) ^ (ECX + 0x4)[0:8]) & ((ECX + 0x4)[0:8] ^ 0x1)) ^ ((ECX + 0x4)[0:8] + 0xFF) ^ (ECX + 0x4)[0:8] ^ 0x1)[7:8]\nEBX                = EBX + 0x1\n________________________________________________________________________________\n>>>\n```\n\n\nRetry execution with a concrete ECX. Here, the symbolic / concolic execution reach the shellcode's end:\n\n```pycon\n>>> from miasm.expression.expression import ExprInt\n>>> sb.symbols[machine.mn.regs.ECX] = ExprInt(-3, 32)\n>>> symbolic_pc = sb.run_at(ircfg, 0, step=True)\nInstr LEA        ECX, DWORD PTR [ECX + 0x4]\nAssignblk:\nECX = ECX + 0x4\n________________________________________________________________________________\naf                 = (((ECX + 0x4)[0:8] + 0xFF) ^ (ECX + 0x4)[0:8] ^ 0x1)[4:5]\nEIP                = ((ECX + 0x4)[0:8] + 0xFF)?(0xB,0x10)\npf                 = parity((ECX + 0x4)[0:8] + 0xFF)\nIRDst              = ((ECX + 0x4)[0:8] + 0xFF)?(0xB,0x10)\nzf                 = ((ECX + 0x4)[0:8] + 0xFF)?(0x0,0x1)\nECX                = 0x1\nof                 = ((((ECX + 0x4)[0:8] + 0xFF) ^ (ECX + 0x4)[0:8]) & ((ECX + 0x4)[0:8] ^ 0x1))[7:8]\nnf                 = ((ECX + 0x4)[0:8] + 0xFF)[7:8]\ncf                 = (((((ECX + 0x4)[0:8] + 0xFF) ^ (ECX + 0x4)[0:8]) & ((ECX + 0x4)[0:8] ^ 0x1)) ^ ((ECX + 0x4)[0:8] + 0xFF) ^ (ECX + 0x4)[0:8] ^ 0x1)[7:8]\nEBX                = EBX + 0x1\n________________________________________________________________________________\nInstr LEA        EBX, DWORD PTR [EBX + 0x1]\nAssignblk:\nEBX = EBX + 0x1\n________________________________________________________________________________\naf                 = (((ECX + 0x4)[0:8] + 0xFF) ^ (ECX + 0x4)[0:8] ^ 0x1)[4:5]\nEIP                = ((ECX + 0x4)[0:8] + 0xFF)?(0xB,0x10)\npf                 = parity((ECX + 0x4)[0:8] + 0xFF)\nIRDst              = ((ECX + 0x4)[0:8] + 0xFF)?(0xB,0x10)\nzf                 = ((ECX + 0x4)[0:8] + 0xFF)?(0x0,0x1)\nECX                = 0x1\nof                 = ((((ECX + 0x4)[0:8] + 0xFF) ^ (ECX + 0x4)[0:8]) & ((ECX + 0x4)[0:8] ^ 0x1))[7:8]\nnf                 = ((ECX + 0x4)[0:8] + 0xFF)[7:8]\ncf                 = (((((ECX + 0x4)[0:8] + 0xFF) ^ (ECX + 0x4)[0:8]) & ((ECX + 0x4)[0:8] ^ 0x1)) ^ ((ECX + 0x4)[0:8] + 0xFF) ^ (ECX + 0x4)[0:8] ^ 0x1)[7:8]\nEBX                = EBX + 0x2\n________________________________________________________________________________\nInstr CMP        CL, 0x1\nAssignblk:\nzf = (ECX[0:8] + -0x1)?(0x0,0x1)\nnf = (ECX[0:8] + -0x1)[7:8]\npf = parity((ECX[0:8] + -0x1) & 0xFF)\nof = ((ECX[0:8] ^ (ECX[0:8] + -0x1)) & (ECX[0:8] ^ 0x1))[7:8]\ncf = (((ECX[0:8] ^ 0x1) ^ (ECX[0:8] + -0x1)) ^ ((ECX[0:8] ^ (ECX[0:8] + -0x1)) & (ECX[0:8] ^ 0x1)))[7:8]\naf = ((ECX[0:8] ^ 0x1) ^ (ECX[0:8] + -0x1))[4:5]\n________________________________________________________________________________\naf                 = 0x0\nEIP                = ((ECX + 0x4)[0:8] + 0xFF)?(0xB,0x10)\npf                 = 0x1\nIRDst              = ((ECX + 0x4)[0:8] + 0xFF)?(0xB,0x10)\nzf                 = 0x1\nECX                = 0x1\nof                 = 0x0\nnf                 = 0x0\ncf                 = 0x0\nEBX                = EBX + 0x2\n________________________________________________________________________________\nInstr JZ         loc_key_1\nAssignblk:\nIRDst = zf?(loc_key_1,loc_key_2)\nEIP = zf?(loc_key_1,loc_key_2)\n________________________________________________________________________________\naf                 = 0x0\nEIP                = 0x10\npf                 = 0x1\nIRDst              = 0x10\nzf                 = 0x1\nECX                = 0x1\nof                 = 0x0\nnf                 = 0x0\ncf                 = 0x0\nEBX                = EBX + 0x2\n________________________________________________________________________________\nInstr LEA        EBX, DWORD PTR [EBX + 0x1]\nAssignblk:\nEBX = EBX + 0x1\n________________________________________________________________________________\naf                 = 0x0\nEIP                = 0x10\npf                 = 0x1\nIRDst              = 0x10\nzf                 = 0x1\nECX                = 0x1\nof                 = 0x0\nnf                 = 0x0\ncf                 = 0x0\nEBX                = EBX + 0x3\n________________________________________________________________________________\nInstr LEA        EBX, DWORD PTR [EBX + 0x1]\nAssignblk:\nIRDst = loc_key_3\n________________________________________________________________________________\naf                 = 0x0\nEIP                = 0x10\npf                 = 0x1\nIRDst              = 0x13\nzf                 = 0x1\nECX                = 0x1\nof                 = 0x0\nnf                 = 0x0\ncf                 = 0x0\nEBX                = EBX + 0x3\n________________________________________________________________________________\nInstr MOV        EAX, EBX\nAssignblk:\nEAX = EBX\n________________________________________________________________________________\naf                 = 0x0\nEIP                = 0x10\npf                 = 0x1\nIRDst              = 0x13\nzf                 = 0x1\nECX                = 0x1\nof                 = 0x0\nnf                 = 0x0\ncf                 = 0x0\nEBX                = EBX + 0x3\nEAX                = EBX + 0x3\n________________________________________________________________________________\nInstr RET\nAssignblk:\nIRDst = @32[ESP[0:32]]\nESP = {ESP[0:32] + 0x4 0 32}\nEIP = @32[ESP[0:32]]\n________________________________________________________________________________\naf                 = 0x0\nEIP                = @32[ESP]\npf                 = 0x1\nIRDst              = @32[ESP]\nzf                 = 0x1\nECX                = 0x1\nof                 = 0x0\nnf                 = 0x0\ncf                 = 0x0\nEBX                = EBX + 0x3\nESP                = ESP + 0x4\nEAX                = EBX + 0x3\n________________________________________________________________________________\n>>>\n```\n\n\n\nHow does it work?\n=================\n\nMiasm embeds its own disassembler, intermediate language and\ninstruction semantic. It is written in Python.\n\nTo emulate code, it uses LLVM, GCC, Clang or Python to JIT the\nintermediate representation. It can emulate shellcodes and all or parts of\nbinaries. Python callbacks can be executed to interact with the execution, for\ninstance to emulate library functions effects.\n\nDocumentation\n=============\n\nSome documentation ressources are available in the [doc](doc) folder.\n\nAn auto-generated documentation is available:\n* [Doxygen](http://miasm.re/miasm_doxygen)\n* [pdoc](http://miasm.re/miasm_pdoc)\n\nObtaining Miasm\n===============\n\n* Clone the repository: [Miasm on GitHub](https://github.com/cea-sec/miasm/)\n* Get one of the Docker images at [Docker Hub](https://registry.hub.docker.com/u/miasm/)\n\nSoftware requirements\n---------------------\n\nMiasm uses:\n\n* python-pyparsing\n* python-dev\n* optionally python-pycparser (version >= 2.17)\n\nTo enable code JIT, one of the following module is mandatory:\n* GCC\n* Clang\n* LLVM with Numba llvmlite, see below\n\n'optional' Miasm can also use:\n* Z3, the [Theorem Prover](https://github.com/Z3Prover/z3)\n\nConfiguration\n-------------\n\nTo use the jitter, GCC or LLVM is recommended\n* GCC (any version)\n* Clang (any version)\n* LLVM\n  * Debian (testing/unstable): Not tested\n  * Debian stable/Ubuntu/Kali/whatever: `pip install llvmlite` or install from [llvmlite](https://github.com/numba/llvmlite)\n  * Windows: Not tested\n* Build and install Miasm:\n```pycon\n$ cd miasm_directory\n$ python setup.py build\n$ sudo python setup.py install\n```\n\nIf something goes wrong during one of the jitter modules compilation, Miasm will\nskip the error and disable the corresponding module (see the compilation\noutput).\n\nWindows & IDA\n-------------\n\nMost of Miasm's IDA plugins use a subset of Miasm functionality.\nA quick way to have them working is to add:\n* `pyparsing.py` to `C:\\...\\IDA\\python\\` or `pip install pyparsing`\n* `miasm/miasm` directory to `C:\\...\\IDA\\python\\`\n\nAll features excepting JITter related ones will be available. For a more complete installation, please refer to above paragraphs.\n\nTesting\n=======\n\nMiasm comes with a set of regression tests. To run all of them:\n\n```pycon\ncd miasm_directory/test\n\n# Run tests using our own test runner\npython test_all.py\n\n# Run tests using standard frameworks (slower, require 'parameterized')\npython -m unittest test_all.py        # sequential, requires 'unittest'\npython -m pytest test_all.py          # sequential, requires 'pytest'\npython -m pytest -n auto test_all.py  # parallel, requires 'pytest' and 'pytest-xdist'\n```\n\nSome options can be specified:\n\n* Mono threading: `-m`\n* Code coverage instrumentation: `-c`\n* Only fast tests: `-t long` (excludes the long tests)\n\nThey already use Miasm\n======================\n\nTools\n-----\n\n* [Sibyl](https://github.com/cea-sec/Sibyl): A function divination tool\n* [R2M2](https://github.com/guedou/r2m2): Use miasm as a radare2 plugin\n* [CGrex](https://github.com/mechaphish/cgrex): Targeted patcher for CGC binaries\n* [ethRE](https://github.com/jbcayrou/ethRE): Reversing tool for Ethereum EVM (with corresponding Miasm2 architecture)\n\nBlog posts / papers / conferences\n---------------------------------\n\n* [Deobfuscation: recovering an OLLVM-protected program](http://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html)\n* [Taming a Wild Nanomite-protected MIPS Binary With Symbolic Execution: No Such Crackme](https://doar-e.github.io/blog/2014/10/11/taiming-a-wild-nanomite-protected-mips-binary-with-symbolic-execution-no-such-crackme/)\n* [Génération rapide de DGA avec Miasm](https://www.lexsi.com/securityhub/generation-rapide-de-dga-avec-miasm/): Quick computation of DGA (French article)\n* [Enabling Client-Side Crash-Resistance to Overcome Diversification and Information Hiding](https://www.internetsociety.org/sites/default/files/blogs-media/enabling-client-side-crash-resistance-overcome-diversification-information-hiding.pdf): Detect undirected call potential arguments\n* [Miasm: Framework de reverse engineering](https://www.sstic.org/2012/presentation/miasm_framework_de_reverse_engineering/) (French)\n* [Tutorial miasm](https://www.sstic.org/2014/presentation/Tutorial_miasm/) (French video)\n* [Graphes de dépendances : Petit Poucet style](https://www.sstic.org/2016/presentation/graphes_de_dpendances__petit_poucet_style/): DepGraph (French)\n\nBooks\n-----\n\n* [Practical Reverse Engineering: X86, X64, Arm, Windows Kernel, Reversing Tools, and Obfuscation](http://eu.wiley.com/WileyCDA/WileyTitle/productCd-1118787315,subjectCd-CSJ0.html): Introduction to Miasm (Chapter 5 \"Obfuscation\")\n* [BlackHat Python - Appendix](https://github.com/oreilly-japan/black-hat-python-jp-support/tree/master/appendix-A): Japan security book's samples\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "miasm",
          "type": "tree",
          "content": null
        },
        {
          "name": "optional_requirements.txt",
          "type": "blob",
          "size": 0.0654296875,
          "content": "pycparser\nz3-solver==4.8.7.0\nllvmlite==0.38.0\nparameterized~=0.8.1\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0234375,
          "content": "pyparsing>=2.4.1\nfuture\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 15.7861328125,
          "content": "#! /usr/bin/env python2\n\nfrom __future__ import print_function\n# Reference: https://stackoverflow.com/a/13468644/1806760\nfrom setuptools import setup, Extension\nfrom distutils.util import get_platform\nfrom distutils.sysconfig import get_python_lib, get_config_vars\nfrom distutils.dist import DistributionMetadata\nfrom distutils.command.install_data import install_data\nfrom distutils.spawn import find_executable\nimport subprocess\nfrom tempfile import TemporaryFile\nimport fnmatch\nimport io\nimport os\nimport platform\nfrom shutil import copy2, copyfile, rmtree\nimport sys\nimport tempfile\nimport atexit\nimport re\n\nis_win = platform.system() == \"Windows\"\nis_mac = platform.system() == \"Darwin\"\nis_64bit = platform.architecture()[0] == \"64bit\"\nif is_win:\n    import winreg\n\ndef set_extension_compile_args(extension):\n    rel_lib_path = extension.name.replace(\".\", \"/\")\n    abs_lib_path = os.path.join(get_python_lib(), rel_lib_path)\n    lib_name = abs_lib_path + \".so\"\n    extension.extra_link_args = [ \"-Wl,-install_name,\" + lib_name]\n\nclass smart_install_data(install_data):\n    \"\"\"Replacement for distutils.command.install_data to handle\n    configuration files location.\n    \"\"\"\n    def run(self):\n        # install files to /etc when target was /usr(/local)/etc\n        self.data_files = [\n            (path, files) for path, files in self.data_files\n            if path  # skip README.md or any file with an empty path\n        ]\n        return install_data.run(self)\n\ndef win_get_llvm_reg():\n    REG_PATH = \"SOFTWARE\\\\LLVM\\\\LLVM\"\n    try:\n      return winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_PATH, 0, winreg.KEY_READ | winreg.KEY_WOW64_32KEY)\n    except FileNotFoundError:\n      pass\n    return winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_PATH, 0, winreg.KEY_READ)\n\ndef win_find_clang_path():\n    try:\n        with win_get_llvm_reg() as rkey:\n            return winreg.QueryValueEx(rkey, None)[0]\n    except FileNotFoundError:\n        # Visual Studio ships with an optional Clang distribution, try to detect it\n        clang_cl = find_executable(\"clang-cl\")\n        if clang_cl is None:\n            return None\n        return os.path.abspath(os.path.join(os.path.dirname(clang_cl), \"..\", \"..\"))\n\ndef win_get_clang_version(clang_path):\n    try:\n        clang_cl = os.path.join(clang_path, \"bin\", \"clang.exe\")\n        stdout = subprocess.check_output(\"\\\"{}\\\" --version\".format(clang_cl))\n        version = stdout.splitlines(False)[0].decode()\n        match = re.search(r\"version (\\d+\\.\\d+\\.\\d+)\", version)\n        if match is None:\n            return None\n        version = list(map(lambda s: int(s), match.group(1).split(\".\")))\n        return version\n    except FileNotFoundError:\n        return None\n\ndef win_use_clang():\n    # To force python to use clang we copy the binaries in a temporary directory that's added to the PATH.\n    # We could use the build directory created by distutils for this, but it seems non-trivial to gather\n    # (https://stackoverflow.com/questions/12896367/reliable-way-to-get-the-build-directory-from-within-setup-py).\n\n    clang_path = win_find_clang_path()\n    if clang_path is None:\n        return False\n    clang_version = win_get_clang_version(clang_path)\n    if clang_version is None:\n        return False\n    tmpdir = tempfile.mkdtemp(prefix=\"llvm\")\n\n    copyfile(os.path.join(clang_path, \"bin\", \"clang-cl.exe\"), os.path.join(tmpdir, \"cl.exe\"))\n\n    # If you run the installation from a Visual Studio command prompt link.exe will already exist\n    # Fall back to LLVM's lld-link.exe which is compatible with link's command line\n    if find_executable(\"link\") is None:\n        # LLVM >= 14.0.0 started supporting the /LTCG flag\n        # Earlier versions will error during the linking phase so bail out now\n        if clang_version[0] < 14:\n            return False\n        copyfile(os.path.join(clang_path, \"bin\", \"lld-link.exe\"), os.path.join(tmpdir, \"link.exe\"))\n\n    # Add the temporary directory at the front of the PATH and clean up on exit\n    os.environ[\"PATH\"] = \"%s;%s\" % (tmpdir, os.environ[\"PATH\"])\n    atexit.register(lambda dir_: rmtree(dir_), tmpdir)\n    print(\"Found Clang {}.{}.{}: {}\".format(clang_version[0], clang_version[1], clang_version[2], clang_path))\n    return True\n\nbuild_extensions = True\nbuild_warnings = []\nwin_force_clang = False\nif is_win:\n    if is_64bit or find_executable(\"cl\") is None:\n        # We do not change to clang if under 32 bits, because even with Clang we\n        # do not use uint128_t with the 32 bits ABI. Regardless we can try to\n        # find it when building in 32-bit mode if cl.exe was not found in the PATH.\n        win_force_clang = win_use_clang()\n        if is_64bit and not win_force_clang:\n            build_warnings.append(\"Could not find a suitable Clang/LLVM installation. You can download LLVM from https://releases.llvm.org\")\n            build_warnings.append(\"Alternatively you can select the 'C++ Clang-cl build tools' in the Visual Studio Installer\")\n            build_extensions = False\n    cl = find_executable(\"cl\")\n    link = find_executable(\"link\")\n    if cl is None or link is None:\n        build_warnings.append(\"Could not find cl.exe and/or link.exe in the PATH, try building miasm from a Visual Studio command prompt\")\n        build_warnings.append(\"More information at: https://wiki.python.org/moin/WindowsCompilers\")\n        build_extensions = False\n    else:\n        print(\"Found cl.exe: {}\".format(cl))\n        print(\"Found link.exe: {}\".format(link))\n\ndef build_all():\n    packages=[\n        \"miasm\",\n        \"miasm/arch\",\n        \"miasm/arch/x86\",\n        \"miasm/arch/arm\",\n        \"miasm/arch/aarch64\",\n        \"miasm/arch/msp430\",\n        \"miasm/arch/mep\",\n        \"miasm/arch/sh4\",\n        \"miasm/arch/mips32\",\n        \"miasm/arch/ppc\",\n        \"miasm/core\",\n        \"miasm/expression\",\n        \"miasm/ir\",\n        \"miasm/ir/translators\",\n        \"miasm/analysis\",\n        \"miasm/os_dep\",\n        \"miasm/os_dep/linux\",\n        \"miasm/loader\",\n        \"miasm/jitter\",\n        \"miasm/jitter/arch\",\n        \"miasm/jitter/loader\",\n    ]\n    ext_modules_all = [\n        Extension(\n            \"miasm.jitter.VmMngr\",\n            [\n                \"miasm/jitter/vm_mngr.c\",\n                \"miasm/jitter/vm_mngr_py.c\",\n                \"miasm/jitter/bn.c\",\n            ]\n        ),\n        Extension(\n            \"miasm.jitter.arch.JitCore_x86\",\n            [\n                \"miasm/jitter/JitCore.c\",\n                \"miasm/jitter/vm_mngr.c\",\n                \"miasm/jitter/vm_mngr_py.c\",\n                \"miasm/jitter/op_semantics.c\",\n                \"miasm/jitter/bn.c\",\n                \"miasm/jitter/arch/JitCore_x86.c\"\n            ]\n        ),\n        Extension(\n            \"miasm.jitter.arch.JitCore_arm\",\n            [\n                \"miasm/jitter/JitCore.c\",\n                \"miasm/jitter/vm_mngr.c\",\n                \"miasm/jitter/vm_mngr_py.c\",\n                \"miasm/jitter/op_semantics.c\",\n                \"miasm/jitter/bn.c\",\n                \"miasm/jitter/arch/JitCore_arm.c\"\n            ]\n        ),\n        Extension(\n            \"miasm.jitter.arch.JitCore_aarch64\",\n            [\n                \"miasm/jitter/JitCore.c\",\n                \"miasm/jitter/vm_mngr.c\",\n                \"miasm/jitter/vm_mngr_py.c\",\n                \"miasm/jitter/op_semantics.c\",\n                \"miasm/jitter/bn.c\",\n                \"miasm/jitter/arch/JitCore_aarch64.c\"\n            ]\n        ),\n        Extension(\n            \"miasm.jitter.arch.JitCore_msp430\",\n            [\n                \"miasm/jitter/JitCore.c\",\n                \"miasm/jitter/vm_mngr.c\",\n                \"miasm/jitter/vm_mngr_py.c\",\n                \"miasm/jitter/op_semantics.c\",\n                \"miasm/jitter/bn.c\",\n                \"miasm/jitter/arch/JitCore_msp430.c\"\n            ]\n        ),\n        Extension(\n            \"miasm.jitter.arch.JitCore_mep\",\n            [\n                \"miasm/jitter/JitCore.c\",\n                \"miasm/jitter/vm_mngr.c\",\n                \"miasm/jitter/vm_mngr_py.c\",\n                \"miasm/jitter/bn.c\",\n                \"miasm/jitter/arch/JitCore_mep.c\"\n            ]\n        ),\n        Extension(\n            \"miasm.jitter.arch.JitCore_mips32\",\n            [\n                \"miasm/jitter/JitCore.c\",\n                \"miasm/jitter/vm_mngr.c\",\n                \"miasm/jitter/vm_mngr_py.c\",\n                \"miasm/jitter/op_semantics.c\",\n                \"miasm/jitter/bn.c\",\n                \"miasm/jitter/arch/JitCore_mips32.c\"\n            ]\n        ),\n        Extension(\n            \"miasm.jitter.arch.JitCore_ppc32\",\n            [\n                \"miasm/jitter/JitCore.c\",\n                \"miasm/jitter/vm_mngr.c\",\n                \"miasm/jitter/vm_mngr_py.c\",\n                \"miasm/jitter/op_semantics.c\",\n                \"miasm/jitter/bn.c\",\n                \"miasm/jitter/arch/JitCore_ppc32.c\"\n            ],\n            depends=[\n                \"miasm/jitter/arch/JitCore_ppc32.h\",\n                \"miasm/jitter/arch/JitCore_ppc32_regs.h\",\n                \"miasm/jitter/bn.h\",\n            ]\n        ),\n        Extension(\n            \"miasm.jitter.arch.JitCore_m68k\",\n            [\n                \"miasm/jitter/JitCore.c\",\n                \"miasm/jitter/vm_mngr.c\",\n                \"miasm/jitter/vm_mngr_py.c\",\n                \"miasm/jitter/op_semantics.c\",\n                \"miasm/jitter/bn.c\",\n                \"miasm/jitter/arch/JitCore_m68k.c\"\n            ]\n        ),\n        Extension(\n            \"miasm.jitter.Jitllvm\",\n            [\n                \"miasm/jitter/Jitllvm.c\",\n                \"miasm/jitter/bn.c\",\n                \"miasm/runtime/udivmodti4.c\",\n                \"miasm/runtime/divti3.c\",\n                \"miasm/runtime/udivti3.c\"\n            ],\n            depends=[\n                \"miasm/runtime/export.h\",\n                \"miasm/runtime/int_endianness.h\",\n                \"miasm/runtime/int_lib.h\",\n                \"miasm/runtime/int_types.h\",\n                \"miasm/runtime/int_util.h\",\n            ]\n        ),\n        Extension(\"miasm.jitter.Jitgcc\",\n                  [\"miasm/jitter/Jitgcc.c\",\n                   \"miasm/jitter/bn.c\",\n                  ]),\n        ]\n\n    if is_win:\n        # Force setuptools to use whatever msvc version installed\n        # https://docs.python.org/3/distutils/apiref.html#module-distutils.msvccompiler\n        os.environ[\"MSSdk\"] = \"1\"\n        os.environ[\"DISTUTILS_USE_SDK\"] = \"1\"\n        extra_compile_args = [\"-D_CRT_SECURE_NO_WARNINGS\"]\n        if win_force_clang:\n            march = \"-m64\" if is_64bit else \"-m32\"\n            extra_compile_args += [\n                march,\n                \"-Wno-unused-command-line-argument\",\n                \"-Wno-visibility\",\n                \"-Wno-dll-attribute-on-redeclaration\",\n                \"-Wno-tautological-compare\",\n                \"-Wno-unused-but-set-variable\",\n            ]\n        for extension in ext_modules_all:\n            extension.extra_compile_args = extra_compile_args\n    elif is_mac:\n        for extension in ext_modules_all:\n            set_extension_compile_args(extension)\n        cfg_vars = get_config_vars()\n        cfg_vars[\"LDSHARED\"] = cfg_vars[\"LDSHARED\"].replace(\"-bundle\", \"-dynamiclib\")\n\n    # Do not attempt to build the extensions when disabled\n    if not build_extensions:\n        ext_modules_all = []\n\n    print(\"building\")\n    if not os.path.exists(\"build\"):\n        os.mkdir(\"build\")\n    build_ok = False\n    for name, ext_modules in [(\"all\", ext_modules_all)]:\n        print(\"build with\", repr(name))\n        try:\n            s = setup(\n                name = \"miasm\",\n                version = __import__(\"miasm\").VERSION,\n                packages = packages,\n                data_files=[(\"\", [\"README.md\"])],\n                package_data = {\n                    \"miasm\": [\n                        \"jitter/*.h\",\n                        \"jitter/arch/*.h\",\n                        \"runtime/*.h\",\n                        \"VERSION\"\n                    ]\n                },\n                install_requires=[\"future\", \"pyparsing>=2.4.1\"],\n                cmdclass={\"install_data\": smart_install_data},\n                ext_modules = ext_modules,\n                # Metadata\n                author = \"Fabrice Desclaux\",\n                author_email = \"serpilliere@droid-corp.org\",\n                description = \"Machine code manipulation library\",\n                license = \"GPLv2\",\n                long_description=long_description,\n                long_description_content_type=long_description_content_type,\n                keywords = [\n                    \"reverse engineering\",\n                    \"disassembler\",\n                    \"emulator\",\n                    \"symbolic execution\",\n                    \"intermediate representation\",\n                    \"assembler\",\n                ],\n                classifiers=[\n                    \"Programming Language :: Python :: 2\",\n                    \"Programming Language :: Python :: 3\",\n                    \"Programming Language :: Python :: 2.7\",\n                    \"Programming Language :: Python :: 3.6\",\n                ],\n                url = \"http://miasm.re\",\n            )\n        except SystemExit as e:\n            print(repr(e))\n            continue\n        build_ok = True\n        break\n    if not build_ok:\n        if len(build_warnings) > 0:\n            print(\"ERROR: There was an issue setting up the build environment:\")\n            for warning in build_warnings:\n                print(\"  \" + warning)\n        raise ValueError(\"Unable to build Miasm!\")\n    print(\"build\", name)\n    # we copy libraries from build dir to current miasm directory\n    build_base = \"build\"\n    if \"build\" in s.command_options:\n        if \"build_base\" in s.command_options[\"build\"]:\n            build_base = s.command_options[\"build\"][\"build_base\"]\n\n    print(build_base)\n    if is_win and build_extensions:\n        libs = []\n        for root, _, files in os.walk(build_base):\n            for filename in files:\n                if not filename.endswith(\".lib\"):\n                    continue\n                f_path = os.path.join(root, filename)\n                libs.append(f_path)\n\n        lib_dirname = None\n        for dirname in os.listdir(build_base):\n            if not dirname.startswith(\"lib\"):\n                continue\n            lib_dirname = dirname\n            break\n\n        jitters = []\n        for lib in libs:\n            filename = os.path.basename(lib)\n            dst = os.path.join(build_base, lib_dirname, \"miasm\", \"jitter\")\n            # Windows built libraries may have a name like VmMngr.cp38-win_amd64.lib\n            if not any([fnmatch.fnmatch(filename, pattern) for pattern in [\"VmMngr.*lib\", \"Jitgcc.*lib\", \"Jitllvm.*lib\"]]):\n                dst = os.path.join(dst, \"arch\")\n            dst = os.path.join(dst, filename)\n            if not os.path.isfile(dst):\n                print(\"Copying\", lib, \"to\", dst)\n                copy2(lib, dst)\n\n    # Inform the user about the skipped build\n    if not build_extensions:\n        print(\"WARNING: miasm jit extensions were not compiled, details:\")\n        for warning in build_warnings:\n            print(\"  \" + warning)\n\nwith io.open(os.path.join(os.path.abspath(os.path.dirname(\"__file__\")),\n                       \"README.md\"), encoding=\"utf-8\") as fdesc:\n    long_description = fdesc.read()\nlong_description_content_type = \"text/markdown\"\n\n\n# Monkey patching (distutils does not handle Description-Content-Type\n# from long_description_content_type parameter in setup()).\n_write_pkg_file_orig = DistributionMetadata.write_pkg_file\n\n\ndef _write_pkg_file(self, file):\n    with TemporaryFile(mode=\"w+\", encoding=\"utf-8\") as tmpfd:\n        _write_pkg_file_orig(self, tmpfd)\n        tmpfd.seek(0)\n        for line in tmpfd:\n            if line.startswith(\"Metadata-Version: \"):\n                file.write(\"Metadata-Version: 2.1\\n\")\n            elif line.startswith(\"Description: \"):\n                file.write(\"Description-Content-Type: %s; charset=UTF-8\\n\" %\n                           long_description_content_type)\n                file.write(line)\n            else:\n                file.write(line)\n\n\nDistributionMetadata.write_pkg_file = _write_pkg_file\n\n\nbuild_all()\n\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}