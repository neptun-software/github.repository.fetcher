{
  "metadata": {
    "timestamp": 1736559958257,
    "page": 738,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "PyCQA/flake8",
      "stars": 3503,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".bandit.yml",
          "type": "blob",
          "size": 0.2861328125,
          "content": "skips:\n- B101  # Ignore defensive `assert`s (especially useful for mypy)\n- B404  # Ignore warnings about importing subprocess\n- B603  # Ignore warnings about calling subprocess.Popen without shell=True\n- B607  # Ignore warnings about calling subprocess.Popen without a full path to executable\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1201171875,
          "content": "*.egg\n*.egg-info\n*.log\n*.pyc\n*.sw*\n*.zip\n.cache\n.coverage\n.coverage.*\n.eggs\n.tox\n/.mypy_cache\nbuild\ndist\ndocs/build/html/*\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.380859375,
          "content": "Ian Stapleton Cordasco <graffatcolmingov@gmail.com> Ian Cordasco <graffatcolmingov@gmail.com>\nIan Stapleton Cordasco <graffatcolmingov@gmail.com> Ian Cordasco <sigmavirus24@users.noreply.github.com>\nIan Stapleton Cordasco <graffatcolmingov@gmail.com> Ian Cordasco <ian.cordasco@rackspace.com>\nIan Stapleton Cordasco <graffatcolmingov@gmail.com> Ian Cordasco <icordasc+bitbucket@coglib.com>\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.0751953125,
          "content": "repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.5.0\n    hooks:\n    -   id: check-yaml\n    -   id: debug-statements\n    -   id: end-of-file-fixer\n    -   id: trailing-whitespace\n        exclude: ^tests/fixtures/\n-   repo: https://github.com/asottile/setup-cfg-fmt\n    rev: v2.5.0\n    hooks:\n    -   id: setup-cfg-fmt\n-   repo: https://github.com/asottile/reorder-python-imports\n    rev: v3.12.0\n    hooks:\n    -   id: reorder-python-imports\n        args: [\n            --application-directories, '.:src',\n            --py38-plus,\n            --add-import, 'from __future__ import annotations',\n        ]\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v3.15.0\n    hooks:\n    -   id: pyupgrade\n        args: [--py38-plus]\n-   repo: https://github.com/psf/black\n    rev: 23.12.1\n    hooks:\n    -   id: black\n        args: [--line-length=79]\n-   repo: https://github.com/PyCQA/flake8\n    rev: 7.0.0\n    hooks:\n    -   id: flake8\n-   repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.8.0\n    hooks:\n    -   id: mypy\n        exclude: ^(docs/|example-plugin/)\n"
        },
        {
          "name": ".pre-commit-hooks.yaml",
          "type": "blob",
          "size": 0.220703125,
          "content": "-   id: flake8\n    name: flake8\n    description: '`flake8` is a command-line utility for enforcing style consistency across Python projects.'\n    entry: flake8\n    language: python\n    types: [python]\n    require_serial: true\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 11.90234375,
          "content": "[MASTER]\n\n# Specify a configuration file.\n#rcfile=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Add files or directories to the blacklist. They should be base names, not\n# paths.\nignore=CVS,.git,flake8.egg-info\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n# Use multiple processes to speed up Pylint.\njobs=4\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=no\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code\nextension-pkg-whitelist=\n\n# Allow optimization of some AST trees. This will activate a peephole AST\n# optimizer, which will apply various small optimizations. For instance, it can\n# be used to obtain the result of joining multiple strings with the addition\n# operator. Joining a lot of strings can lead to a maximum recursion error in\n# Pylint and this flag can prevent that. It has one side effect, the resulting\n# AST will be different than the one from reality.\noptimize-ast=no\n\n\n[MESSAGES CONTROL]\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED\nconfidence=INFERENCE_FAILURE\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time. See also the \"--disable\" option for examples.\n#enable=\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once).You can also use \"--disable=all\" to\n# disable everything first and then reenable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use\"--disable=all --enable=classes\n# --disable=W\"\ndisable=intern-builtin,nonzero-method,parameter-unpacking,backtick,raw_input-builtin,dict-view-method,filter-builtin-not-iterating,long-builtin,unichr-builtin,input-builtin,unicode-builtin,file-builtin,map-builtin-not-iterating,delslice-method,apply-builtin,cmp-method,setslice-method,coerce-method,long-suffix,raising-string,import-star-module-level,buffer-builtin,reload-builtin,unpacking-in-except,print-statement,hex-method,old-octal-literal,metaclass-assignment,dict-iter-method,range-builtin-not-iterating,using-cmp-argument,indexing-exception,no-absolute-import,coerce-builtin,getslice-method,suppressed-message,execfile-builtin,round-builtin,useless-suppression,reduce-builtin,old-raise-syntax,zip-builtin-not-iterating,cmp-builtin,xrange-builtin,standarderror-builtin,old-division,oct-method,next-method-called,old-ne-operator,basestring-builtin\n\n\n[REPORTS]\n\n# Set the output format. Available formats are text, parseable, colorized, msvs\n# (visual studio) and html. You can also give a reporter class, eg\n# mypackage.mymodule.MyReporterClass.\noutput-format=text\n\n# Put messages in a separate file for each module / package specified on the\n# command line instead of printing them on stdout. Reports (if any) will be\n# written in a file name \"pylint_global.[txt|html]\".\nfiles-output=no\n\n# Tells whether to display a full report or only the messages\nreports=no\n\n# Python expression which should return a note less than 10 (10 is the highest\n# note). You have access to the variables errors warning, statement which\n# respectively contain the number of errors / warnings messages and the total\n# number of statements analyzed. This is used by the global evaluation report\n# (RP0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details\n#msg-template=\n\n\n[BASIC]\n\n# List of builtins function names that should not be used, separated by a comma\nbad-functions=map,filter\n\n# Good variable names which should always be accepted, separated by a comma\ngood-names=i,j,k,ex,Run,_\n\n# Bad variable names which should always be refused, separated by a comma\nbad-names=foo,bar,baz,toto,tutu,tata\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Include a hint for the correct naming format with invalid-name\ninclude-naming-hint=yes\n\n# Regular expression matching correct argument names\nargument-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Naming hint for argument names\nargument-name-hint=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression matching correct attribute names\nattr-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Naming hint for attribute names\nattr-name-hint=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression matching correct constant names\nconst-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n\n# Naming hint for constant names\nconst-name-hint=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n\n# Regular expression matching correct class names\nclass-rgx=[A-Z_][a-zA-Z0-9]+$\n\n# Naming hint for class names\nclass-name-hint=[A-Z_][a-zA-Z0-9]+$\n\n# Regular expression matching correct inline iteration names\ninlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$\n\n# Naming hint for inline iteration names\ninlinevar-name-hint=[A-Za-z_][A-Za-z0-9_]*$\n\n# Regular expression matching correct class attribute names\nclass-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n\n# Naming hint for class attribute names\nclass-attribute-name-hint=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n\n# Regular expression matching correct function names\nfunction-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Naming hint for function names\nfunction-name-hint=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression matching correct module names\nmodule-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n\n# Naming hint for module names\nmodule-name-hint=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n\n# Regular expression matching correct method names\nmethod-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Naming hint for method names\nmethod-name-hint=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression matching correct variable names\nvariable-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Naming hint for variable names\nvariable-name-hint=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=^_\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=-1\n\n\n[ELIF]\n\n# Maximum number of nested blocks for function / method body\nmax-nested-blocks=5\n\n\n[FORMAT]\n\n# Maximum number of characters on a single line.\nmax-line-length=100\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=no\n\n# List of optional constructs for which whitespace checking is disabled. `dict-\n# separator` is used to allow tabulation in dicts, etc.: {1  : 1,\\n222: 2}.\n# `trailing-comma` allows a space between comma and closing bracket: (a, ).\n# `empty-line` allows space-only lines.\nno-space-check=trailing-comma,dict-separator\n\n# Maximum number of lines in a module\nmax-module-lines=1000\n\n# String used as indentation unit. This is usually \"    \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n# Number of spaces of indent required inside a hanging  or continued line.\nindent-after-paren=4\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\n\n\n[LOGGING]\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format\nlogging-modules=logging\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,XXX,TODO\n\n\n[SIMILARITIES]\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=no\n\n\n[SPELLING]\n\n# Spelling dictionary name. Available dictionaries: none. To make it working\n# install python-enchant package.\nspelling-dict=\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# A path to a file that contains private dictionary; one word per line.\nspelling-private-dict-file=\n\n# Tells whether to store unknown words to indicated private dictionary in\n# --spelling-private-dict-file option instead of raising a message.\nspelling-store-unknown-words=no\n\n\n[TYPECHECK]\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis. It\n# supports qualified module names, as well as Unix pattern matching.\nignored-modules=\n\n# List of classes names for which member attributes should not be checked\n# (useful for classes with attributes dynamically set). This supports can work\n# with qualified names.\nignored-classes=\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=\n\n\n[VARIABLES]\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# A regular expression matching the name of dummy variables (i.e. expectedly\n# not used).\ndummy-variables-rgx=_$|dummy\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid to define new builtins when possible.\nadditional-builtins=\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,_cb\n\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,__new__,setUp\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=mcs\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,_fields,_replace,_source,_make\n\n\n[DESIGN]\n\n# Maximum number of arguments for function / method\nmax-args=20\n\n# Argument names that match this expression will be ignored. Default to name\n# with leading underscore\nignored-argument-names=_.*\n\n# Maximum number of locals for function / method body\nmax-locals=20\n\n# Maximum number of return / yield for function / method body\nmax-returns=6\n\n# Maximum number of branch for function / method body\nmax-branches=12\n\n# Maximum number of statements in function / method body\nmax-statements=50\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=10\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n# Maximum number of boolean expressions in an if statement\nmax-bool-expr=5\n\n\n[IMPORTS]\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled)\nimport-graph=\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled)\next-import-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled)\nint-import-graph=\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.140625,
          "content": "version: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\npython:\n  install:\n  - path: .\n  - requirements: docs/source/requirements.txt\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 0.119140625,
          "content": "Please refer to `Contributing to Flake8\n<https://flake8.pycqa.org/en/latest/internal/contributing.html>`_\non our website.\n"
        },
        {
          "name": "CONTRIBUTORS.txt",
          "type": "blob",
          "size": 0.4619140625,
          "content": "Project created by Tarek Ziadé.\n\nContributors (by order of appearance) :\n\n- Tamás Gulácsi\n- Nicolas Dumazet\n- Stefan Scherfke\n- Chris Adams\n- Ben Bass\n- Ask Solem\n- Steven Kryskalla\n- Gustavo Picon\n- Jannis Leidel\n- Miki Tebeka\n- David Cramer\n- Peter Teichman\n- Ian Cordasco\n- Oleg Broytman\n- Marc Labbé\n- Bruno Miguel Custódio\n- Florent Xicluna\n- Austin Morton\n- Michael McNeil Forbes\n- Christian Long\n- Tyrel Souza\n- Corey Farwell\n- Michael Penkov\n- Anthony Sottile\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.14453125,
          "content": "== Flake8 License (MIT) ==\n\nCopyright (C) 2011-2013 Tarek Ziade <tarek@ziade.org>\nCopyright (C) 2012-2016 Ian Cordasco <graffatcolmingov@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 2.6015625,
          "content": ".. image:: https://github.com/PyCQA/flake8/workflows/main/badge.svg\n   :target: https://github.com/PyCQA/flake8/actions?query=workflow%3Amain\n   :alt: build status\n\n.. image:: https://results.pre-commit.ci/badge/github/PyCQA/flake8/main.svg\n   :target: https://results.pre-commit.ci/latest/github/PyCQA/flake8/main\n   :alt: pre-commit.ci status\n\n.. image:: https://img.shields.io/discord/825463413634891776.svg\n   :target: https://discord.gg/qYxpadCgkx\n   :alt: Discord\n\n========\n Flake8\n========\n\nFlake8 is a wrapper around these tools:\n\n- PyFlakes\n- pycodestyle\n- Ned Batchelder's McCabe script\n\nFlake8 runs all the tools by launching the single ``flake8`` command.\nIt displays the warnings in a per-file, merged output.\n\nIt also adds a few features:\n\n- files that contain this line are skipped::\n\n    # flake8: noqa\n\n- lines that contain a ``# noqa`` comment at the end will not issue warnings.\n- you can ignore specific errors on a line with ``# noqa: <error>``, e.g.,\n  ``# noqa: E234``. Multiple codes can be given, separated by comma. The ``noqa`` token is case insensitive, the colon before the list of codes is required otherwise the part after ``noqa`` is ignored\n- Git and Mercurial hooks\n- extendable through ``flake8.extension`` and ``flake8.formatting`` entry\n  points\n\n\nQuickstart\n==========\n\nSee our `quickstart documentation\n<https://flake8.pycqa.org/en/latest/index.html#quickstart>`_ for how to install\nand get started with Flake8.\n\n\nFrequently Asked Questions\n==========================\n\nFlake8 maintains an `FAQ <https://flake8.pycqa.org/en/latest/faq.html>`_ in its\ndocumentation.\n\n\nQuestions or Feedback\n=====================\n\nIf you have questions you'd like to ask the developers, or feedback you'd like\nto provide, feel free to use the mailing list: code-quality@python.org\n\nWe would love to hear from you. Additionally, if you have a feature you'd like\nto suggest, the mailing list would be the best place for it.\n\n\nLinks\n=====\n\n* `Flake8 Documentation <https://flake8.pycqa.org/en/latest/>`_\n\n* `GitHub Project <https://github.com/pycqa/flake8>`_\n\n* `All (Open and Closed) Issues\n  <https://github.com/pycqa/flake8/issues?q=is%3Aissue>`_\n\n* `Code-Quality Archives\n  <https://mail.python.org/mailman/listinfo/code-quality>`_\n\n* `Code of Conduct\n  <https://flake8.pycqa.org/en/latest/internal/contributing.html#code-of-conduct>`_\n\n* `Getting Started Contributing\n  <https://flake8.pycqa.org/en/latest/internal/contributing.html>`_\n\n\nMaintenance\n===========\n\nFlake8 was created by Tarek Ziadé and is currently maintained by `anthony sottile\n<https://github.com/sponsors/asottile>`_ and `Ian Cordasco\n<https://www.coglib.com/~icordasc/>`_\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "dev-requirements.txt",
          "type": "blob",
          "size": 0.00390625,
          "content": "tox\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "example-plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.0908203125,
          "content": "[pytest]\nnorecursedirs = .git .* *.egg* docs dist build\naddopts = -rw\nfilterwarnings = error\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.9794921875,
          "content": "[metadata]\nname = flake8\nversion = attr: flake8.__version__\ndescription = the modular source code checker: pep8 pyflakes and co\nlong_description = file: README.rst\nlong_description_content_type = text/x-rst\nurl = https://github.com/pycqa/flake8\nauthor = Tarek Ziade\nauthor_email = tarek@ziade.org\nmaintainer = Ian Stapleton Cordasco\nmaintainer_email = graffatcolmingov@gmail.com\nlicense = MIT\nlicense_files = LICENSE\nclassifiers =\n    Development Status :: 5 - Production/Stable\n    Environment :: Console\n    Framework :: Flake8\n    Intended Audience :: Developers\n    License :: OSI Approved :: MIT License\n    Programming Language :: Python\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3 :: Only\n    Programming Language :: Python :: Implementation :: CPython\n    Programming Language :: Python :: Implementation :: PyPy\n    Topic :: Software Development :: Libraries :: Python Modules\n    Topic :: Software Development :: Quality Assurance\n\n[options]\npackages = find:\ninstall_requires =\n    mccabe>=0.7.0,<0.8.0\n    pycodestyle>=2.12.0,<2.13.0\n    pyflakes>=3.2.0,<3.3.0\npython_requires = >=3.8.1\npackage_dir =\n    =src\n\n[options.packages.find]\nwhere = src\n\n[options.entry_points]\nconsole_scripts =\n    flake8 = flake8.main.cli:main\nflake8.extension =\n    F = flake8.plugins.pyflakes:FlakesChecker\n    E = flake8.plugins.pycodestyle:pycodestyle_logical\n    W = flake8.plugins.pycodestyle:pycodestyle_physical\nflake8.report =\n    default = flake8.formatting.default:Default\n    pylint = flake8.formatting.default:Pylint\n    quiet-filename = flake8.formatting.default:FilenameOnly\n    quiet-nothing = flake8.formatting.default:Nothing\n\n[bdist_wheel]\nuniversal = 1\n\n[coverage:run]\nsource =\n    flake8\n    tests\nplugins = covdefaults\n\n[coverage:report]\nfail_under = 97\n\n[mypy]\ncheck_untyped_defs = true\ndisallow_any_generics = true\ndisallow_incomplete_defs = true\ndisallow_untyped_defs = true\nno_implicit_optional = true\nwarn_unused_ignores = true\n\n[mypy-tests.*]\ndisallow_untyped_defs = false\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.193359375,
          "content": "\"\"\"Packaging logic for Flake8.\"\"\"\nfrom __future__ import annotations\n\nimport os\nimport sys\n\nimport setuptools\n\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), \"src\"))\n\nsetuptools.setup()\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 2.3154296875,
          "content": "[tox]\nminversion=2.3.1\nenvlist = py,flake8,linters,docs\n\n[testenv]\ndeps =\n    pytest!=3.0.5,!=5.2.3\n    coverage>=6\n    covdefaults\ncommands =\n    coverage run -m pytest {posargs}\n    coverage report\n    # ensure 100% coverage of tests\n    coverage report --fail-under 100 --include tests/*\n\n# Dogfood our current main version\n[testenv:dogfood]\nskip_install = true\ndeps =\n    wheel\ncommands =\n    python setup.py -qq bdist_wheel\n    pip install --force-reinstall -U --pre --find-links ./dist/ flake8\n    flake8 --version\n    flake8 src/flake8/ tests/ setup.py\n\n# Linters\n[testenv:flake8]\nskip_install = true\ndeps =\n    flake8\n    flake8-bugbear\n    flake8-docstrings>=1.3.1\n    flake8-typing-imports>=1.1\n    pep8-naming\ncommands =\n    flake8 src/flake8/ tests/ setup.py\n\n[testenv:pylint]\nskip_install = true\ndeps =\n    pyflakes\n    pylint!=2.5.0\ncommands =\n    pylint src/flake8\n\n[testenv:doc8]\nskip_install = true\ndeps =\n    sphinx\n    doc8\ncommands =\n    doc8 docs/source/\n\n[testenv:pre-commit]\nskip_install = true\ndeps = pre-commit\ncommands =\n    pre-commit run --all-files --show-diff-on-failure\n\n[testenv:bandit]\nskip_install = true\ndeps =\n    bandit\ncommands =\n    bandit -r src/flake8/ -c .bandit.yml\n\n[testenv:linters]\nskip_install = true\ndeps =\n    {[testenv:flake8]deps}\n    {[testenv:pylint]deps}\n    {[testenv:doc8]deps}\n    {[testenv:readme]deps}\n    {[testenv:bandit]deps}\ncommands =\n    {[testenv:flake8]commands}\n    {[testenv:pylint]commands}\n    {[testenv:doc8]commands}\n    {[testenv:readme]commands}\n    {[testenv:bandit]commands}\n\n# Documentation\n[testenv:docs]\ndeps =\n    -rdocs/source/requirements.txt\ncommands =\n    sphinx-build -E -W -c docs/source/ -b html docs/source/ docs/build/html\n\n[testenv:serve-docs]\nskip_install = true\nchangedir = docs/build/html\ndeps =\ncommands =\n    python -m http.server {posargs}\n\n[testenv:readme]\ndeps =\n    readme_renderer\ncommands =\n    python setup.py check -r -s\n\n# Release tooling\n[testenv:build]\nskip_install = true\ndeps =\n    wheel\n    setuptools\ncommands =\n    python setup.py -q sdist bdist_wheel\n\n[testenv:release]\nskip_install = true\ndeps =\n    {[testenv:build]deps}\n    twine >= 1.5.0\ncommands =\n    {[testenv:build]commands}\n    twine upload --skip-existing dist/*\n\n[flake8]\nextend-ignore = E203\nper-file-ignores =\n    src/flake8/formatting/_windows_color.py: N806\n    tests/*: D\nmax-complexity = 10\n"
        }
      ]
    }
  ]
}