{
  "metadata": {
    "timestamp": 1736559676243,
    "page": 347,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "linkedin/Liger-Kernel",
      "stars": 4145,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.173828125,
          "content": "__pycache__/\n*.egg-info/\nsite/\n.cache/\n.venv/\nvenv/\n.ipynb_checkpoints/\n\n# Misc\n.DS_Store\n\n# Build\nbuild/\ndist/\n\n# Lockfiles\nuv.lock\n\n# Benchmark images\nbenchmark/visualizations\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.28125,
          "content": "BSD 2-CLAUSE LICENSE\nCopyright 2024 LinkedIn Corporation \nAll Rights Reserved.\nRedistribution and use in source and binary forms, with or\nwithout modification, are permitted provided that the following\nconditions are met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided\nwith the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.7109375,
          "content": ".PHONY: test checkstyle test-convergence all\n\n\nall: checkstyle test test-convergence\n\n# Command to run pytest for correctness tests\ntest:\n\tpython -m pytest --disable-warnings test/ --ignore=test/convergence\n\n# Command to run flake8 (code style check), isort (import ordering), and black (code formatting)\n# Subsequent commands still run if the previous fails, but return failure at the end\ncheckstyle:\n\truff check . --fix; ruff_check_status=$$?; \\\n\truff format .; ruff_format_status=$$?; \\\n\tif [ $$ruff_check_status -ne 0 ] || [ $$ruff_format_status -ne 0 ]; then \\\n\t\texit 1; \\\n\tfi\n\n# Command to run pytest for convergence tests\n# We have to explicitly set HF_DATASETS_OFFLINE=1, or dataset will silently try to send metrics and timeout (80s) https://github.com/huggingface/datasets/blob/37a603679f451826cfafd8aae00738b01dcb9d58/src/datasets/load.py#L286\ntest-convergence:\n\tHF_DATASETS_OFFLINE=1 python -m pytest --disable-warnings test/convergence/test_mini_models.py\n\tHF_DATASETS_OFFLINE=1 python -m pytest --disable-warnings test/convergence/test_mini_models_multimodal.py\n\tHF_DATASETS_OFFLINE=1 python -m pytest --disable-warnings test/convergence/test_mini_models_with_logits.py\n\n# Command to run all benchmark scripts and update benchmarking data file\n# By default this doesn't overwrite existing data for the same benchmark experiment\n# run with `make run-benchmarks OVERWRITE=1` to overwrite existing benchmark data\nBENCHMARK_DIR = benchmark/scripts\nBENCHMARK_SCRIPTS = $(wildcard $(BENCHMARK_DIR)/benchmark_*.py)\nOVERWRITE ?= 0\n\nrun-benchmarks:\n\t@for script in $(BENCHMARK_SCRIPTS); do \\\n\t\techo \"Running benchmark: $$script\"; \\\n\t\tif [ $(OVERWRITE) -eq 1 ]; then \\\n\t\t\tpython $$script --overwrite; \\\n\t\telse \\\n\t\t\tpython $$script; \\\n\t\tfi; \\\n\tdone\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 2.017578125,
          "content": "Copyright 2024 LinkedIn Corporation\nAll Rights Reserved.\n\nLicensed under the BSD 2-Clause License (the \"License\").  See License in the project root for license information.\n\nThis product includes software developed by LinkedIn Corporation.\n\nThis product contains code derived from the following open source projects:\n\n1. Unsloth\n   Copyright (c) 2023 Unsloth AI\n   Licensed under the Apache License, Version 2.0\n   Source: https://github.com/unslothai/unsloth\n   \n   The `calculate_settings` function to determine block size and warp is reused for Norm and MLP operations.\n   Modifications and additions were made to the RMS Norm implementation.\n\n2. Triton\n   Copyright (c) 2023 OpenAI\n   Licensed under the MIT License\n   Source: https://github.com/openai/triton\n   \n   Modifications were made based on Triton tutorials for the RMS Norm implementation.\n\n3. Efficient Cross Entropy\n   Copyright (c) 2023 Mohamed Malek\n   Licensed under the MIT License\n   Source: https://github.com/mgmalek/efficient_cross_entropy\n   \n   The idea of gradient-in-forward and chunking was used in the Linear Cross Entropy implementation.\n\n4. Flash Attention\n   Copyright (c) 2023 Tri Dao, Daniel Y. Fu, Stefano Ermon, Atri Rudra, Christopher RÃ©\n   Licensed under the BSD 3-Clause License\n   Source: https://github.com/Dao-AILab/flash-attention\n   \n   Optimization ideas such as tiling and recomputation were inspired by this work.\n\n5. AutoAWQ\n   Copyright (c) 2023 Casper Hansen\n   Licensed under the MIT License\n   Source: https://github.com/casper-hansen/AutoAWQ\n   \n   The design of the automodel was referenced from this project.\n\n6. llm.c\n   Copyright (c) 2023 Andrej Karpathy\n   Licensed under the MIT License\n   Source: https://github.com/karpathy/llm.c\n   \n   The design of end-to-end testing was referenced from this project.\n\n7. Tiny Shakespeare Dataset\n   Source: https://huggingface.co/datasets/karpathy/tiny_shakespeare\n   \n   This dataset is used to conduct convergence tests on mini models.\n\nFor full license texts, please refer to the respective project repositories.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.626953125,
          "content": "<a name=\"readme-top\"></a>\r\n\r\n# Liger Kernel: Efficient Triton Kernels for LLM Training\r\n\r\n\r\n<table style=\"width: 100%; text-align: center; border-collapse: collapse;\">\r\n    <tr>\r\n        <th style=\"padding: 10px;\" colspan=\"2\">Stable</th>\r\n        <th style=\"padding: 10px;\" colspan=\"2\">Nightly</th>\r\n        <th style=\"padding: 10px;\">Discord</th>\r\n        <th style=\"padding: 10px;\">Build</th>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"padding: 10px;\">\r\n            <a href=\"https://pepy.tech/project/liger-kernel\">\r\n                <img src=\"https://static.pepy.tech/badge/liger-kernel\" alt=\"Downloads (Stable)\">\r\n            </a>\r\n        </td>\r\n        <td style=\"padding: 10px;\">\r\n            <a href=\"https://pypi.org/project/liger-kernel\">\r\n                <img alt=\"PyPI - Version\" src=\"https://img.shields.io/pypi/v/liger-kernel?color=green\">\r\n            </a>\r\n        </td>\r\n        <td style=\"padding: 10px;\">\r\n            <a href=\"https://pepy.tech/project/liger-kernel-nightly\">\r\n                <img src=\"https://static.pepy.tech/badge/liger-kernel-nightly\" alt=\"Downloads (Nightly)\">\r\n            </a>\r\n        </td>\r\n        <td style=\"padding: 10px;\">\r\n            <a href=\"https://pypi.org/project/liger-kernel-nightly\">\r\n                <img alt=\"PyPI - Version\" src=\"https://img.shields.io/pypi/v/liger-kernel-nightly?color=green\">\r\n            </a>\r\n        </td>\r\n        <td style=\"padding: 10px;\">\r\n            <a href=\"https://discord.gg/gpumode\">\r\n                <img src=\"https://dcbadge.vercel.app/api/server/gpumode?style=flat\" alt=\"Join Our Discord\">\r\n            </a>\r\n        </td>\r\n        <td style=\"padding: 10px;\">\r\n            <div style=\"display: block;\">\r\n                <a href=\"https://github.com/linkedin/Liger-Kernel/actions/workflows/nvi-ci.yml\">\r\n                    <img src=\"https://github.com/linkedin/Liger-Kernel/actions/workflows/nvi-ci.yml/badge.svg?event=schedule\" alt=\"Build\">\r\n                </a>\r\n            </div>\r\n            <div style=\"display: block;\">\r\n                <a href=\"https://github.com/linkedin/Liger-Kernel/actions/workflows/amd-ci.yml\">\r\n                    <img src=\"https://github.com/linkedin/Liger-Kernel/actions/workflows/amd-ci.yml/badge.svg?event=schedule\" alt=\"Build\">\r\n                </a>\r\n            </div>\r\n        </td>\r\n    </tr>\r\n</table>\r\n\r\n\r\n\r\n<img src=\"https://raw.githubusercontent.com/linkedin/Liger-Kernel/main/docs/images/logo-banner.png\">\r\n\r\n[Installation](#installation) | [Getting Started](#getting-started) | [Examples](#examples) | [High-level APIs](#high-level-apis) | [Low-level APIs](#low-level-apis) | [Cite our work](#cite-this-work)\r\n\r\n<details>\r\n  <summary>Latest News ðŸ”¥</summary>\r\n    \r\n  - [2024/12/11] We release [v0.5.0](https://github.com/linkedin/Liger-Kernel/releases/tag/v0.5.0): 80% more memory efficient post training losses (DPO, ORPO, CPO, etc)! \r\n  - [2024/12/5] We release LinkedIn Engineering Blog - [Liger-Kernel: Empowering an open source ecosystem of Triton Kernels for Efficient LLM Training](https://www.linkedin.com/blog/engineering/open-source/liger-kernel-open-source-ecosystem-for-efficient-llm-training)\r\n  - [2024/11/6] We release [v0.4.0](https://github.com/linkedin/Liger-Kernel/releases/tag/v0.4.0): Full AMD support, Tech Report, Modal CI, Llama-3.2-Vision!\r\n  - [2024/10/21] We have released the tech report of Liger Kernel on Arxiv: https://arxiv.org/pdf/2410.10989\r\n  - [2024/9/6] We release v0.2.1 ([X post](https://x.com/liger_kernel/status/1832168197002510649)). 2500+ Stars, 10+ New Contributors, 50+ PRs, 50k Downloads in two weeks!\r\n  - [2024/8/31] CUDA MODE talk, [Liger-Kernel: Real-world Triton kernel for LLM Training](https://youtu.be/gWble4FreV4?si=dxPeIchhkJ36Mbns), [Slides](https://github.com/cuda-mode/lectures?tab=readme-ov-file#lecture-28-liger-kernel)\r\n  - [2024/8/23] Official release: check out our [X post](https://x.com/hsu_byron/status/1827072737673982056)\r\n\r\n</details>\r\n\r\n\r\n**Liger Kernel** is a collection of Triton kernels designed specifically for LLM training. It can effectively increase multi-GPU **training throughput by 20%** and reduces **memory usage by 60%**. We have implemented **Hugging Face Compatible** `RMSNorm`, `RoPE`, `SwiGLU`, `CrossEntropy`, `FusedLinearCrossEntropy`, and more to come. The kernel works out of the box with [Flash Attention](https://github.com/Dao-AILab/flash-attention), [PyTorch FSDP](https://pytorch.org/tutorials/intermediate/FSDP_tutorial.html), and [Microsoft DeepSpeed](https://github.com/microsoft/DeepSpeed). We welcome contributions from the community to gather the best kernels for LLM training.\r\n\r\nWe've also added optimized Post-Training kernels that deliver **up to 80% memory savings** for alignment and distillation tasks. We support losses like DPO, CPO, ORPO, SimPO, JSD, and many more. Check out [how we optimize the memory](https://x.com/hsu_byron/status/1866577403918917655).\r\n\r\n## Supercharge Your Model with Liger Kernel\r\n\r\n![Banner](https://raw.githubusercontent.com/linkedin/Liger-Kernel/main/docs/images/banner.GIF)\r\n\r\nWith one line of code, Liger Kernel can increase throughput by more than 20% and reduce memory usage by 60%, thereby enabling longer context lengths, larger batch sizes, and massive vocabularies.\r\n\r\n\r\n| Speed Up                 | Memory Reduction        |\r\n|--------------------------|-------------------------|\r\n| ![Speed up](https://raw.githubusercontent.com/linkedin/Liger-Kernel/main/docs/images/e2e-tps.png) | ![Memory](https://raw.githubusercontent.com/linkedin/Liger-Kernel/main/docs/images/e2e-memory.png) |\r\n\r\n> **Note:**\r\n> - Benchmark conditions: LLaMA 3-8B, Batch Size = 8, Data Type = `bf16`, Optimizer = AdamW, Gradient Checkpointing = True, Distributed Strategy = FSDP1 on 8 A100s.\r\n> - Hugging Face models start to OOM at a 4K context length, whereas Hugging Face + Liger Kernel scales up to 16K.\r\n\r\n## Optimize Post Training with Liger Kernel\r\n\r\n<p align=\"center\">\r\n    <img src=\"https://raw.githubusercontent.com/linkedin/Liger-Kernel/main/docs/images/post-training.png\" width=\"50%\" alt=\"Post Training\">\r\n</p>\r\n\r\nWe provide optimized post training kernels like DPO, ORPO, SimPO, and more which can reduce memory usage by up to 80%. You can easily use them as python modules.\r\n\r\n```python\r\nfrom liger_kernel.chunked_loss import LigerFusedLinearDPOLoss\r\norpo_loss = LigerFusedLinearORPOLoss()\r\ny = orpo_loss(lm_head.weight, x, target)\r\n```\r\n\r\n\r\n## Examples\r\n\r\n| **Use Case**                                    | **Description**                                                                                   |\r\n|------------------------------------------------|---------------------------------------------------------------------------------------------------|\r\n| [**Hugging Face Trainer**](https://github.com/linkedin/Liger-Kernel/tree/main/examples/huggingface)      | Train LLaMA 3-8B ~20% faster with over 40% memory reduction on Alpaca dataset using 4 A100s with FSDP |\r\n| [**Lightning Trainer**](https://github.com/linkedin/Liger-Kernel/tree/main/examples/lightning)         | Increase 15% throughput and reduce memory usage by 40% with LLaMA3-8B on MMLU dataset using 8 A100s with DeepSpeed ZeRO3 |\r\n| [**Medusa Multi-head LLM (Retraining Phase)**](https://github.com/linkedin/Liger-Kernel/tree/main/examples/medusa)        | Reduce memory usage by 80% with 5 LM heads and improve throughput by 40% using 8 A100s with FSDP |\r\n| [**Vision-Language Model SFT**](https://github.com/linkedin/Liger-Kernel/tree/main/examples/huggingface/run_qwen2_vl.sh)      | Finetune Qwen2-VL on image-text data using 4 A100s with FSDP |\r\n| [**Liger ORPO Trainer**](https://github.com/linkedin/Liger-Kernel/blob/main/examples/alignment/run_orpo.py)      | Align Llama 3.2 using Liger ORPO Trainer with FSDP with 50% memory reduction |\r\n\r\n## Key Features\r\n\r\n- **Ease of use:** Simply patch your Hugging Face model with one line of code, or compose your own model using our Liger Kernel modules.\r\n- **Time and memory efficient:** In the same spirit as Flash-Attn, but for layers like **RMSNorm**, **RoPE**, **SwiGLU**, and **CrossEntropy**! Increases multi-GPU training throughput by 20% and reduces memory usage by 60% with **kernel fusion**, **in-place replacement**, and **chunking** techniques.\r\n- **Exact:** Computation is exactâ€”no approximations! Both forward and backward passes are implemented with rigorous unit tests and undergo convergence testing against training runs without Liger Kernel to ensure accuracy.\r\n- **Lightweight:** Liger Kernel has minimal dependencies, requiring only Torch and Tritonâ€”no extra libraries needed! Say goodbye to dependency headaches!\r\n- **Multi-GPU supported:** Compatible with multi-GPU setups (PyTorch FSDP, DeepSpeed, DDP, etc.).\r\n- **Trainer Framework Integration**: [Axolotl](https://github.com/axolotl-ai-cloud/axolotl), [LLaMa-Factory](https://github.com/hiyouga/LLaMA-Factory), [SFTTrainer](https://github.com/huggingface/trl/releases/tag/v0.10.1), [Hugging Face Trainer](https://github.com/huggingface/transformers/pull/32860), [SWIFT](https://github.com/modelscope/ms-swift)\r\n\r\n## Installation\r\n\r\n### Dependencies\r\n\r\n#### CUDA\r\n\r\n- `torch >= 2.1.2`\r\n- `triton >= 2.3.0`\r\n\r\n#### ROCm\r\n\r\n- `torch >= 2.5.0` Install according to the instruction in Pytorch official webpage.\r\n- `triton >= 3.0.0` Install from pypi. (e.g. `pip install triton==3.0.0`)\r\n\r\n### Optional Dependencies\r\n\r\n- `transformers >= 4.x`: Required if you plan to use the transformers models patching APIs. The specific model you are working will dictate the minimum version of transformers.\r\n\r\n> **Note:**\r\n> Our kernels inherit the full spectrum of hardware compatibility offered by [Triton](https://github.com/triton-lang/triton).\r\n\r\nTo install the stable version:\r\n\r\n```bash\r\n$ pip install liger-kernel\r\n```\r\n\r\nTo install the nightly version:\r\n\r\n```bash\r\n$ pip install liger-kernel-nightly\r\n```\r\n\r\nTo install from source:\r\n\r\n```bash\r\ngit clone https://github.com/linkedin/Liger-Kernel.git\r\ncd Liger-Kernel\r\n\r\n# Install Default Dependencies\r\n# Setup.py will detect whether you are using AMD or NVIDIA\r\npip install -e .\r\n\r\n# Setup Development Dependencies\r\npip install -e \".[dev]\"\r\n```\r\n\r\n\r\n## Getting Started\r\n\r\nThere are a couple of ways to apply Liger kernels, depending on the level of customization required.\r\n\r\n### 1. Use AutoLigerKernelForCausalLM\r\n\r\nUsing the `AutoLigerKernelForCausalLM` is the simplest approach, as you don't have to import a model-specific patching API. If the model type is supported, the modeling code will be automatically patched using the default settings.\r\n\r\n```python\r\nfrom liger_kernel.transformers import AutoLigerKernelForCausalLM\r\n\r\n# This AutoModel wrapper class automatically monkey-patches the\r\n# model with the optimized Liger kernels if the model is supported.\r\nmodel = AutoLigerKernelForCausalLM.from_pretrained(\"path/to/some/model\")\r\n```\r\n\r\n### 2. Apply Model-Specific Patching APIs\r\n\r\nUsing the [patching APIs](#patching), you can swap Hugging Face models with optimized Liger Kernels.\r\n\r\n```python\r\nimport transformers\r\nfrom liger_kernel.transformers import apply_liger_kernel_to_llama\r\n\r\n# 1a. Adding this line automatically monkey-patches the model with the optimized Liger kernels\r\napply_liger_kernel_to_llama()\r\n\r\n# 1b. You could alternatively specify exactly which kernels are applied\r\napply_liger_kernel_to_llama(\r\n  rope=True,\r\n  swiglu=True,\r\n  cross_entropy=True,\r\n  fused_linear_cross_entropy=False,\r\n  rms_norm=False\r\n)\r\n\r\n# 2. Instantiate patched model\r\nmodel = transformers.AutoModelForCausalLM(\"path/to/llama/model\")\r\n```\r\n\r\n### 3. Compose Your Own Model\r\n\r\nYou can take individual [kernels](#kernels) to compose your models.\r\n\r\n```python\r\nfrom liger_kernel.transformers import LigerFusedLinearCrossEntropyLoss\r\nimport torch.nn as nn\r\nimport torch\r\n\r\nmodel = nn.Linear(128, 256).cuda()\r\n\r\n# fuses linear + cross entropy layers together and performs chunk-by-chunk computation to reduce memory\r\nloss_fn = LigerFusedLinearCrossEntropyLoss()\r\n\r\ninput = torch.randn(4, 128, requires_grad=True, device=\"cuda\")\r\ntarget = torch.randint(256, (4, ), device=\"cuda\")\r\n\r\nloss = loss_fn(model.weight, input, target)\r\nloss.backward()\r\n```\r\n\r\n## High-level APIs\r\n\r\n### AutoModel\r\n\r\n| **AutoModel Variant** | **API** |\r\n|-----------|---------|\r\n| AutoModelForCausalLM | `liger_kernel.transformers.AutoLigerKernelForCausalLM` |\r\n\r\n\r\n### Patching\r\n\r\n| **Model**   | **API**                                                      | **Supported Operations**                                                |\r\n|-------------|--------------------------------------------------------------|-------------------------------------------------------------------------|\r\n| LLaMA 2 & 3 | `liger_kernel.transformers.apply_liger_kernel_to_llama`   | RoPE, RMSNorm, SwiGLU, CrossEntropyLoss, FusedLinearCrossEntropy        |\r\n| LLaMA 3.2-Vision | `liger_kernel.transformers.apply_liger_kernel_to_mllama`   | RoPE, RMSNorm, SwiGLU, CrossEntropyLoss, FusedLinearCrossEntropy        |\r\n| Mistral     | `liger_kernel.transformers.apply_liger_kernel_to_mistral`  | RoPE, RMSNorm, SwiGLU, CrossEntropyLoss, FusedLinearCrossEntropy        |\r\n| Mixtral     | `liger_kernel.transformers.apply_liger_kernel_to_mixtral`  | RoPE, RMSNorm, SwiGLU, CrossEntropyLoss, FusedLinearCrossEntropy        |\r\n| Gemma1      | `liger_kernel.transformers.apply_liger_kernel_to_gemma`    | RoPE, RMSNorm, GeGLU, CrossEntropyLoss, FusedLinearCrossEntropy         |\r\n| Gemma2      | `liger_kernel.transformers.apply_liger_kernel_to_gemma2`   | RoPE, RMSNorm, GeGLU, CrossEntropyLoss, FusedLinearCrossEntropy         |\r\n| Qwen2, Qwen2.5, & QwQ      | `liger_kernel.transformers.apply_liger_kernel_to_qwen2`    | RoPE, RMSNorm, SwiGLU, CrossEntropyLoss, FusedLinearCrossEntropy        |\r\n| Qwen2-VL       | `liger_kernel.transformers.apply_liger_kernel_to_qwen2_vl`    | RMSNorm, LayerNorm, SwiGLU, CrossEntropyLoss, FusedLinearCrossEntropy        |\r\n| Phi3 & Phi3.5       | `liger_kernel.transformers.apply_liger_kernel_to_phi3`     | RoPE, RMSNorm, SwiGLU, CrossEntropyLoss, FusedLinearCrossEntropy         |\r\n\r\n\r\n## Low-level APIs\r\n\r\n- `Fused Linear` kernels combine linear layers with losses, reducing memory usage by up to 80% - ideal for HBM-constrained workloads.\r\n- Other kernels use fusion and in-place techniques for memory and performance optimization.\r\n\r\n### Model Kernels\r\n\r\n| **Kernel**                      | **API**                                                     |\r\n|---------------------------------|-------------------------------------------------------------|\r\n| RMSNorm                         | `liger_kernel.transformers.LigerRMSNorm`                    |\r\n| LayerNorm                       | `liger_kernel.transformers.LigerLayerNorm`                  |\r\n| RoPE                            | `liger_kernel.transformers.liger_rotary_pos_emb`            |\r\n| SwiGLU                          | `liger_kernel.transformers.LigerSwiGLUMLP`                  |\r\n| GeGLU                           | `liger_kernel.transformers.LigerGEGLUMLP`                   |\r\n| CrossEntropy                    | `liger_kernel.transformers.LigerCrossEntropyLoss`           |\r\n| Fused Linear CrossEntropy         | `liger_kernel.transformers.LigerFusedLinearCrossEntropyLoss`|\r\n\r\n\r\n### Alignment Kernels\r\n\r\n| **Kernel**                      | **API**                                                     |\r\n|---------------------------------|-------------------------------------------------------------|\r\n| Fused Linear CPO Loss           | `liger_kernel.chunked_loss.LigerFusedLinearCPOLoss`       |\r\n| Fused Linear DPO Loss           | `liger_kernel.chunked_loss.LigerFusedLinearDPOLoss`       |\r\n| Fused Linear ORPO Loss          | `liger_kernel.chunked_loss.LigerFusedLinearORPOLoss`      |\r\n| Fused Linear SimPO Loss         | `liger_kernel.chunked_loss.LigerFusedLinearSimPOLoss`     |\r\n\r\n### Distillation Kernels\r\n\r\n| **Kernel**                      | **API**                                                     |\r\n|---------------------------------|-------------------------------------------------------------|\r\n| KLDivergence                    | `liger_kernel.transformers.LigerKLDIVLoss`                  |\r\n| JSD                             | `liger_kernel.transformers.LigerJSD`                        |\r\n| Fused Linear JSD                  | `liger_kernel.transformers.LigerFusedLinearJSD`             |\r\n\r\n### Experimental Kernels\r\n\r\n| **Kernel**                      | **API**                                                     |\r\n|---------------------------------|-------------------------------------------------------------|\r\n| Embedding                       | `liger_kernel.transformers.experimental.LigerEmbedding`     |\r\n| Matmul int2xint8                | `liger_kernel.transformers.experimental.matmul` |\r\n\r\n\r\n## Contributing, Acknowledgements, and License\r\n\r\n- [Contributing Guidelines](https://github.com/linkedin/Liger-Kernel/blob/main/docs/CONTRIBUTING.md)\r\n- [Acknowledgements](https://github.com/linkedin/Liger-Kernel/blob/main/docs/Acknowledgement.md)\r\n- [License Information](https://github.com/linkedin/Liger-Kernel/blob/main/docs/License.md)\r\n\r\n## Sponsorship and Collaboration\r\n \r\n- [AMD](https://www.amd.com/en.html): Providing AMD GPUs for our AMD CI.\r\n- [Intel](https://www.intel.com/): Providing Intel GPUs for our Intel CI.\r\n- [Modal](https://modal.com/): Free 3000 credits from GPU MODE IRL for our NVIDIA CI.\r\n- [EmbeddedLLM](https://embeddedllm.com/): Making Liger Kernel run fast and stable on AMD. \r\n- [HuggingFace](https://huggingface.co/): Integrating Liger Kernel into Hugging Face Transformers and TRL.\r\n- [Lightning AI](https://lightning.ai/): Integrating Liger Kernel into Lightning Thunder.\r\n- [Axolotl](https://axolotl.ai/): Integrating Liger Kernel into Axolotl.\r\n- [Llama-Factory](https://github.com/hiyouga/LLaMA-Factory): Integrating Liger Kernel into Llama-Factory.\r\n\r\n## Contact\r\n\r\n- For issues, create a Github ticket in this repository\r\n- For open discussion, join [our discord channel](https://discord.gg/gpumode)\r\n- For formal collaboration, send an email to byhsu@linkedin.com\r\n\r\n## Cite this work\r\n\r\nBiblatex entry:\r\n```bib\r\n@article{hsu2024ligerkernelefficienttriton,\r\n      title={Liger Kernel: Efficient Triton Kernels for LLM Training},\r\n      author={Pin-Lun Hsu and Yun Dai and Vignesh Kothapalli and Qingquan Song and Shao Tang and Siyu Zhu and Steven Shimizu and Shivam Sahni and Haowen Ning and Yanning Chen},\r\n      year={2024},\r\n      eprint={2410.10989},\r\n      archivePrefix={arXiv},\r\n      primaryClass={cs.LG},\r\n      url={https://arxiv.org/abs/2410.10989},\r\n      journal={arXiv preprint arXiv:2410.10989},\r\n}\r\n```\r\n\r\n## Star History\r\n[![Star History Chart](https://api.star-history.com/svg?repos=linkedin/Liger-Kernel&type=Date)](https://star-history.com/#linkedin/Liger-Kernel&Date)\r\n\r\n<p align=\"right\" style=\"font-size: 14px; color: #555; margin-top: 20px;\">\r\n    <a href=\"#readme-top\" style=\"text-decoration: none; color: #007bff; font-weight: bold;\">\r\n        â†‘ Back to Top â†‘\r\n    </a>\r\n</p>\r\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "dev",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.2294921875,
          "content": "[build-system]\nrequires = [\"setuptools>=42\", \"wheel\", \"setuptools-scm\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"liger_kernel\"\nversion = \"0.5.2\"\ndescription = \"Efficient Triton kernels for LLM Training\"\nurls = { \"Homepage\" = \"https://github.com/linkedin/Liger-Kernel\" }\nreadme = { file = \"README.md\", content-type = \"text/markdown\" }\nlicense = { file = \"LICENSE\" }\ndynamic = [\"dependencies\", \"optional-dependencies\"]\n\n[tool.setuptools]\npackage-dir = {\"\" = \"src\"}\n\n[tool.setuptools.packages.find]\nwhere = [\"src\"]\ninclude = [\"liger_kernel*\"]\nnamespaces = false\n\n[tool.pytest.ini_options]\npythonpath = [\"src\", \".\"]\nasyncio_mode = \"auto\"\nlog_cli = true\nlog_cli_level = \"INFO\"\n\n[tool.ruff]\nline-length = 120\ntarget-version = \"py310\"\nrespect-gitignore = true\nsrc = [\"src\"]\n\n[tool.ruff.lint]\nselect = [\n    \"E\",  # pycodestyle errors\n    \"F\",  # pyflakes\n    \"I\",  # isort\n]\nignore = [\"E501\", \"B006\", \"E731\", \"A002\", \"E203\"]\n\nexclude = [\n    \".git\",\n    \"__pycache__\",\n    \"benchmark_internal/others\",\n    \".venv\",\n]\n\n[tool.ruff.format]\nquote-style = \"double\"\nindent-style = \"space\"\nskip-magic-trailing-comma = false\nline-ending = \"auto\"\n\n[tool.ruff.lint.isort]\nknown-first-party = [\"liger_kernel\"]\nforce-single-line = true\nlines-between-types = 1\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.728515625,
          "content": "# setup.py\n\nimport subprocess\n\nfrom typing import Literal\n\nfrom setuptools import setup\n\n\ndef get_default_dependencies():\n    \"\"\"Determine the appropriate dependencies based on detected hardware.\"\"\"\n    platform = get_platform()\n\n    if platform in [\"cuda\", \"cpu\"]:\n        return [\n            \"torch>=2.1.2\",\n            \"triton>=2.3.1\",\n        ]\n    elif platform == \"rocm\":\n        return [\n            \"torch>=2.6.0.dev\",\n            \"triton>=3.0.0\",\n        ]\n\n\ndef get_optional_dependencies():\n    \"\"\"Get optional dependency groups.\"\"\"\n    return {\n        \"dev\": [\n            \"transformers>=4.44.2\",\n            \"matplotlib>=3.7.2\",\n            \"flake8>=4.0.1.1\",\n            \"black>=24.4.2\",\n            \"isort>=5.13.2\",\n            \"pytest>=7.1.2\",\n            \"pytest-xdist\",\n            \"pytest-rerunfailures\",\n            \"datasets>=2.19.2\",\n            \"seaborn\",\n        ]\n    }\n\n\n# TODO: add intel XPU\ndef get_platform() -> Literal[\"cuda\", \"rocm\", \"cpu\"]:\n    \"\"\"\n    Detect whether the system has NVIDIA or AMD GPU without torch dependency.\n    \"\"\"\n    # Try nvidia-smi first\n    try:\n        subprocess.run([\"nvidia-smi\"], check=True)\n        print(\"NVIDIA GPU detected\")\n        return \"cuda\"\n    except (subprocess.SubprocessError, FileNotFoundError):\n        # If nvidia-smi fails, check for ROCm\n        try:\n            subprocess.run([\"rocm-smi\"], check=True)\n            print(\"ROCm GPU detected\")\n            return \"rocm\"\n        except (subprocess.SubprocessError, FileNotFoundError):\n            print(\"No GPU detected\")\n            return \"cpu\"\n\n\nsetup(\n    name=\"liger_kernel\",\n    package_dir={\"\": \"src\"},\n    packages=[\"liger_kernel\"],\n    install_requires=get_default_dependencies(),\n    extras_require=get_optional_dependencies(),\n)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}