{
  "metadata": {
    "timestamp": 1736559947628,
    "page": 721,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjczMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "anasty17/mirror-leech-telegram-bot",
      "stars": 3529,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0087890625,
          "content": "mltbenv/*"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1875,
          "content": "mltbenv/*\nconfig.py\n*.pyc\ndata*\n.vscode\n.idea\n*.json\n*.pickle\n.netrc\nlog.txt\naccounts/*\nThumbnails/*\nrclone/*\ntokens/*\nsabnzbd/*\nlist_drives.txt\ncookies.txt\ndownloads\nbot.session*\nrclone.conf\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.22265625,
          "content": "FROM anasty17/mltb:latest\n\nWORKDIR /usr/src/app\nRUN chmod 777 /usr/src/app\n\nRUN python3 -m venv mltbenv\n\nCOPY requirements.txt .\nRUN mltbenv/bin/pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD [\"bash\", \"start.sh\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3251953125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 36.6474609375,
          "content": "This Telegram Bot, based on [python-aria-mirror-bot](https://github.com/lzzy12/python-aria-mirror-bot), has undergone\nsubstantial modifications and is designed for efficiently mirroring or leeching files from the Internet to various\ndestinations, including Google Drive, Telegram, or any rclone-supported cloud. It is built using asynchronous\nprogramming in Python.\n\n- **TELEGRAM CHANNEL:** https://t.me/mltb_official_channel\n- **TELEGRAM GROUP:** https://t.me/mltb_official_support\n\n<details>\n  <summary><h1>Features</h1></summary>\n\n<details>\n  <summary><h5>QBittorrent</h5></summary>\n\n- External access to webui, so you can remove files or edit settings. Then you can sync settings in database with sync button in bsetting\n- Select files from a Torrent before and during download using mltb file selector (Requires Base URL) (task option)\n- Seed torrents to a specific ratio and time (task option)\n- Edit Global Options while the bot is running from bot settings (global option)\n\n</details>\n\n<details>\n  <summary><h5>Aria2c</h5></summary>\n\n- Select files from a Torrent before and during download (Requires Base URL) (task option)\n- Seed torrents to a specific ratio and time (task option)\n- Netrc support (global option)\n- Direct link authentication for a specific link while using the bot (it will work even if only the username or password\n  is provided) (task option)\n- Edit Global Options while the bot is running from bot settings (global option)\n\n</details>\n\n<details>\n  <summary><h5>Sabnzbd</h5></summary>\n\n- External access to web interface, so you can remove files or edit settings. Then you can sync settings in database with sync button in bsetting\n- Edit Global Options while the bot is running from bot settings (global option)\n- Servers menu to edit/add/remove usenet servers\n\n</details>\n\n<details>\n  <summary><h5>TG Upload/Download</h5></summary>\n\n- Split size (global, user, and task option)\n- Thumbnail (user and task option)\n- Leech filename prefix (user option)\n- Set upload as a document or as media (global, user and task option)\n- Upload all files to a specific chat (superGroup/channel/private/topic) (global, user, and task option)\n- Equal split size settings (global and user option)\n- Ability to leech split file parts in a media group (global and user option)\n- Download restricted messages (document or link) by tg private/public/super links (task option)\n- Choose transfer by bot or user session in case you have a premium plan (global, user option and task option)\n- Mix upload between user and bot session with respect to file size (global, user option and task option)\n- Upload with custom layout multiple thubnmail (global, user option and task option)\n- Topics support\n\n</details>\n\n<details>\n  <summary><h5>Google Drive</h5></summary>\n\n- Download/Upload/Clone/Delete/Count from/to Google Drive\n- Count Google Drive files/folders\n- Search in multiple Drive folder/TeamDrive\n- Use Token.pickle if the file is not found with a Service Account, for all Gdrive functions\n- Random Service Account for each task\n- Recursive Search (only with `root` or TeamDrive ID, folder ids will be listed with a non-recursive method). Based\n  on [Sreeraj](https://github.com/SVR666) searchX-bot. (task option)\n- Stop Duplicates (global and user option)\n- Custom upload destination (global, user, and task option)\n- Ability to choose token.pickle or service acccount and upload destinations from list with or without buttons (global, user and task option)\n- Index link support only\n  for [Bhadoo](https://gitlab.com/GoogleDriveIndex/Google-Drive-Index/-/blob/master/src/worker.js)\n\n</details>\n\n<details>\n  <summary><h5>Rclone</h5></summary>\n\n- Transfer (download/upload/clone-server-side) without or with random service accounts (global and user option)\n- Ability to choose config, remote and path from list with or without buttons (global, user and task option)\n- Ability to set flags for each task or globally from config (global, user and task option)\n- Abitity to select specific files or folders to download/copy using buttons (task option)\n- Rclone.conf (global and user option)\n- Rclone serve for combine remote to use it as index from all remotes (global option)\n- Upload destination (global, user and task option)\n\n</details>\n\n<details>\n  <summary><h5>Status</h5></summary>\n\n- Download/Upload/Extract/Archive/Seed/Clone Status\n- Status Pages for an unlimited number of tasks, view a specific number of tasks in a message (global option)\n- Interval message update (global option)\n- Next/Previous buttons to get different pages (global and user option)\n- Status buttons to get specific tasks for the chosen status regarding transfer type if the number of tasks is more than\n  30 (global and user option)\n- Steps buttons for how much next/previous buttons should step backward/forward (global and user option)\n- Status for each user (no auto refresh)\n\n</details>\n\n<details>\n  <summary><h5>Yt-dlp</h5></summary>\n\n- Yt-dlp quality buttons (task option)\n- Ability to use a specific yt-dlp option (global, user, and task option)\n- Netrc support (global option)\n- Cookies support (global option)\n- Embed the original thumbnail and add it for leech\n- All supported audio formats\n\n</details>\n\n<details>\n  <summary><h5>JDownloader</h5></summary>\n\n- Synchronize Settings (global option)\n- Waiting to select (enable/disable files or change variants) before download start\n- DLC file support\n- All settings can be edited from the remote access to your JDownloader with Web Interface, Android App, iPhone App or\n  Browser Extensions\n\n</details>\n\n<details>\n  <summary><h5>Mongo Database</h5></summary>\n\n- Store bot settings\n- Store user settings including thumbnails and all private files\n- Store RSS data\n- Store incompleted task messages\n- Store JDownloader settings\n- Store config.py file on first build and incase any change occured to it, then next build it will define variables\n  from config.py instead of database\n\n</details>\n\n<details>\n  <summary><h5>Torrents Search</h5></summary>\n\n- Search on torrents with Torrent Search API\n- Search on torrents with variable plugins using qBittorrent search engine\n\n</details>\n\n<details>\n  <summary><h5>Archives</h5></summary>\n\n- Extract splits with or without password\n- Zip file/folder with or without password\n- Decompress zst files\n- Using 7-zip tool to extract with or without password all supported types:\n\n> ZIP, RAR, TAR, 7z, ISO, WIM, CAB, GZIP, BZIP2, APM, ARJ, CHM, CPIO, CramFS, DEB, DMG, FAT, HFS, LZH, LZMA, LZMA2,MBR,\n> MSI, MSLZ, NSIS, NTFS, RPM, SquashFS, UDF, VHD, XAR, Z, TAR.XZ, CBZ\n\n</details>\n\n<details>\n  <summary><h5>RSS</h5></summary>\n\n- Based on this repository [rss-chan](https://github.com/hyPnOtICDo0g/rss-chan)\n- Rss feed (user option)\n- Title Filters (feed option)\n- Edit any feed while running: pause, resume, edit command and edit filters (feed option)\n- Sudo settings to control users feeds\n- All functions have been improved using buttons from one command.\n\n</details>\n\n<details>\n  <summary><h5>Overall</h5></summary>\n\n- Docker image support for linux `amd64, arm64/v8, arm/v7`\n- Edit variables and overwrite the private files while bot running (bot, user settings)\n- Update bot at startup and with restart command using `UPSTREAM_REPO`\n- Telegraph. Based on [Sreeraj](https://github.com/SVR666) loaderX-bot\n- Mirror/Leech/Watch/Clone/Count/Del by reply\n- Mirror/Leech/Clone multi links/files with one command\n- Custom name for all links except torrents. For files you should add extension except yt-dlp links (global and user\n  option)\n- Extensions Filter for the files to be uploaded/cloned (global and user option)\n- View Link button. Extra button to open index link in broswer instead of direct download for file\n- Queueing System for all tasks (global option)\n- Ability to zip/unzip multi links in same directory. Mostly helpful in unziping tg file parts (task option)\n- Bulk download from telegram txt file or text message contains links seperated by new line (task option)\n- Join splitted files that have splitted before by split(linux pkg) (task option)\n- Sample video Generator (task option)\n- Screenshots Generator (task option)\n- Ability to cancel upload/clone/archive/extract/split/queue (task option)\n- Cancel all buttons for choosing specific tasks status to cancel (global option)\n- Convert videos and audios to specific format with filter (task option)\n- Force start to upload or download or both from queue using cmds or args once you add the download (task option)\n- Shell and Executor\n- Add sudo users\n- Ability to save upload paths\n- Name Substitution to rename the files before upload\n- User can select whether he want to use his rclone.conf/token.pickle without adding mpt: or mrcc: before path/gd-id\n- FFmpeg commands to execute it after download (task option)\n- Supported Direct links Generators:\n\n> mediafire (file/folders), hxfile.co (need cookies txt with name) [hxfile.txt], streamtape.com, streamsb.net, streamhub.ink,\n> streamvid.net, doodstream.com,\n> feurl.com, upload.ee, pixeldrain.com, racaty.net, 1fichier.com, 1drv.ms (Only works for file not folder or business\n> account), filelions.com, streamwish.com, send.cm (file/folders), solidfiles.com, linkbox.to (file/folders),\n> shrdsk.me (\n> sharedisk.io), akmfiles.com, wetransfer.com, pcloud.link, gofile.io (file/folders), easyupload.io, mdisk.me (with\n> ytdl),\n> tmpsend.com, qiwi.gg, berkasdrive.com, mp4upload.com, terabox.com (videos only file/folders).\n\n</details>\n</details>\n\n<details>\n  <summary><h1>How to deploy?</h1></summary>\n\n<details>\n  <summary><h2>Prerequisites</h2></summary>\n\n<details>\n  <summary><h5>1. Installing requirements</h5></summary>\n\n- Clone this repo:\n\n```\ngit clone https://github.com/anasty17/mirror-leech-telegram-bot mirrorbot/ && cd mirrorbot\n```\n\n- For Debian based distros\n\n```\nsudo apt install python3 python3-pip\n```\n\nInstall Docker by following the [official Docker docs](https://docs.docker.com/engine/install/debian/)\n\n- For Arch and it's derivatives:\n\n```\nsudo pacman -S docker python\n```\n\n- Install dependencies for running setup scripts:\n\n```\npip3 install -r requirements-cli.txt\n```\n\n------\n\n</details>\n\n<details>\n  <summary><h5>2. Setting up config file</h5></summary>\n\n```\ncp config_sample.py config.py\n```\n\nFill up rest of the fields. Meaning of each field is discussed below.\n\n**1. Required Fields**\n\n- `BOT_TOKEN`: The Telegram Bot Token that you got from [@BotFather](https://t.me/BotFather). `Str`\n- `OWNER_ID`: The Telegram User ID (not username) of the Owner of the bot. `Int`\n- `TELEGRAM_API`: This is to authenticate your Telegram account for downloading Telegram files. You can get this\n  from <https://my.telegram.org>. `Int`\n- `TELEGRAM_HASH`: This is to authenticate your Telegram account for downloading Telegram files. You can get this\n  from <https://my.telegram.org>. `Str`\n\n**2. Optional Fields**\n\n- `USER_SESSION_STRING`: To download/upload from your telegram account if user is `PREMIUM` and to send rss. To generate\n  session string use this command `python3 generate_string_session.py` after mounting repo folder for sure. `Str`. *\n  *NOTE**: You can't use bot with private message. Use it with superGroup.\n- `DATABASE_URL`: Your Mongo Database URL (Connection string). Follow\n  this [Create Database](https://github.com/anasty17/test?tab=readme-ov-file#create-database) to\n  create database. Data will be saved in Database: bot settings, users settings, rss data and incomplete tasks. **NOTE**: You can always edit all settings that saved in database from the official site -> (Browse collections). `Str`\n- `DOWNLOAD_DIR`: The path to the vps local folder where the downloads should be downloaded to. `Str`\n- `CMD_SUFFIX`: Commands index number. This number will added at the end all commands. `Str`|`Int`\n- `AUTHORIZED_CHATS`: Fill user_id and chat_id of groups/users you want to authorize. To auth only specific topic(s) write it in this format `chat_id|thread_id` Ex:-100XXXXXXXXXXX or -100XXXXXXXXXXX|10 or Ex:-100XXXXXXXXXXX|10|12. Separate them by space. `Str`\n- `SUDO_USERS`: Fill user_id of users whom you want to give sudo permission. Separate them by space. `Str`\n- `DEFAULT_UPLOAD`: Whether `rc` to upload to `RCLONE_PATH` or `gd` to upload to `GDRIVE_ID`. Default is `rc`. Read\n  More [HERE](https://github.com/anasty17/mirror-leech-telegram-bot/tree/master#upload).`Str`\n- `STATUS_UPDATE_INTERVAL`: Time in seconds after which the progress/status message will be updated. Recommended `10`\n  seconds at least. `Int`\n- `STATUS_LIMIT`: Limit the no. of tasks shown in status message with buttons. Default is `10`. **NOTE**: Recommended\n  limit is `4` tasks. `Int`\n- `EXTENSION_FILTER`: File extensions that won't upload/clone. Separate them by space. `Str`\n- `INCOMPLETE_TASK_NOTIFIER`: Get incomplete task messages after restart. Require database and superGroup. Default\n  is `False`. `Bool`\n- `FILELION_API`: Filelion api key to mirror Filelion links. Get it\n  from [Filelion](https://vidhide.com/?op=my_account). `Str`\n- `STREAMWISH_API`: Streamwish api key to mirror Streamwish links. Get it\n  from [Streamwish](https://streamwish.com/?op=my_account). `Str`\n- `YT_DLP_OPTIONS`: Default yt-dlp options. Check all possible\n  options [HERE](https://github.com/yt-dlp/yt-dlp/blob/master/yt_dlp/YoutubeDL.py#L184) or use\n  this [script](https://t.me/mltb_official_channel/177) to convert cli arguments to api options. Format: key:value|key:\n  value|key:value. Add `^` before integer or float, some numbers must be numeric and some string. `Str`\n    - Example: \"format:bv*+mergeall[vcodec=none]|nocheckcertificate:True\"\n- `USE_SERVICE_ACCOUNTS`: Whether to use Service Accounts or not, with google-api-python-client. For this to work\n  see [Using Service Accounts](https://github.com/anasty17/mirror-leech-telegram-bot#generate-service-accounts-what-is-service-account)\n  section below. Default is `False`. `Bool`\n- `FFMPEG_CMDS`: Dict of list values of ffmpeg commands. You can set multiple ffmpeg commands for all files before upload. Don't write ffmpeg at beginning, start directly with the arguments. `Dict`\n  - Examples: {\"subtitle\": [\"-i mltb.mkv -c copy -c:s srt mltb.mkv\", \"-i mltb.video -c copy -c:s srt mltb\"], \"convert\": [\"-i mltb.m4a -c:a libmp3lame -q:a 2 mltb.mp3\", \"-i mltb.audio -c:a libmp3lame -q:a 2 mltb.mp3\"]}\n  **Notes**:\n  - Don't add ffmpeg at the beginning!\n  - Add `-del` to the list which you want from the bot to delete the original files after command run complete!\n  - To execute one of those lists in bot for example, you must use -ff subtitle (list key) or -ff convert (list key)\n  - Seed will get disbaled while using this option\n  **Example**:\n  - Here I will explain how to use mltb.* which is reference to files you want to work on.\n  1. First cmd: the input is mltb.mkv so this cmd will work only on mkv videos and the output is mltb.mkv also so all outputs is mkv. `-del` will delete the original media after complete run of the cmd.\n  2. Second cmd: the input is mltb.video so this cmd will work on all videos and the output is only mltb so the extenstion is same as input files.\n  3. Third cmd: the input in mltb.m4a so this cmd will work only on m4a audios and the output is mltb.mp3 so the output extension is mp3.\n  4. Fourth cmd: the input is mltb.audio so this cmd will work on all audios and the output is mltb.mp3 so the output extension is mp3.\n- `NAME_SUBSTITUTE`: Add word/letter/character/sentense/pattern to remove or replace with other words with sensitive case or without. `Str` \n  **Notes**:\n    1. Seed will get disbaled while using this option\n    2. Before any character you must add `\\BACKSLASH`, those are the characters: `\\^$.|?*+()[]{}-`\n    * Example: script/code/s | mirror/leech | tea/ /s | clone | cpu/ | \\[mltb\\]/mltb | \\\\text\\\\/text/s\n    - script will get replaced by code with sensitive case\n    - mirror will get replaced by leech\n    - tea will get replaced by space with sensitive case\n    - clone will get removed\n    - cpu will get replaced by space\n    - [mltb] will get replaced by mltb\n    - \\text\\ will get replaced by text with sensitive case\n\n**3. GDrive Tools**\n\n- `GDRIVE_ID`: This is the Folder/TeamDrive ID of the Google Drive OR `root` to which you want to upload all the mirrors\n  using google-api-python-client. `Str`\n- `IS_TEAM_DRIVE`: Set `True` if uploading to TeamDrive using google-api-python-client. Default is `False`. `Bool`\n- `INDEX_URL`: Refer to <https://gitlab.com/ParveenBhadooOfficial/Google-Drive-Index>. `Str`\n- `STOP_DUPLICATE`: Bot will check file/folder name in Drive incase uploading to `GDRIVE_ID`. If it's present in Drive\n  then downloading or cloning will be stopped. (**NOTE**: Item will be checked using name and not hash, so this feature\n  is not perfect yet). Default is `False`. `Bool`\n\n**4. Rclone**\n\n- `RCLONE_PATH`: Default rclone path to which you want to upload all the files/folders using rclone. `Str`\n- `RCLONE_FLAGS`: key:value|key|key|key:value . Check here all [RcloneFlags](https://rclone.org/flags/). `Str`\n- `RCLONE_SERVE_URL`: Valid URL where the bot is deployed to use rclone serve. Format of URL should be `http://myip`,\n  where `myip` is the IP/Domain(public) of your bot or if you have chosen port other than `80` so write it in this\n  format `http://myip:port` (`http` and not `https`). `Str`\n- `RCLONE_SERVE_PORT`: Which is the **RCLONE_SERVE_URL** Port. Default is `8080`. `Int`\n- `RCLONE_SERVE_USER`: Username for rclone serve authentication. `Str`\n- `RCLONE_SERVE_PASS`: Password for rclone serve authentication. `Str`\n\n**5. Update**\n\n- `UPSTREAM_REPO`: Your github repository link, if your repo is private\n  add `https://username:{githubtoken}@github.com/{username}/{reponame}` format. Get token\n  from [Github settings](https://github.com/settings/tokens). So you can update your bot from filled repository on each\n  restart. `Str`.\n    - **NOTE**: Any change in docker or requirements you need to deploy/build again with updated repo to take effect.\n      DON'T delete .gitignore file. For more information\n      read [THIS](https://github.com/anasty17/mirror-leech-telegram-bot/tree/master#upstream-repo-recommended).\n- `UPSTREAM_BRANCH`: Upstream branch for update. Default is `master`. `Str`\n\n**6. Leech**\n\n- `LEECH_SPLIT_SIZE`: Size of split in bytes. Default is `2GB`. Default is `4GB` if your account is premium. `Int`\n- `AS_DOCUMENT`: Default type of Telegram file upload. Default is `False` mean as media. `Bool`\n- `EQUAL_SPLITS`: Split files larger than **LEECH_SPLIT_SIZE** into equal parts size (Not working with zip cmd). Default\n  is `False`. `Bool`\n- `MEDIA_GROUP`: View Uploaded splitted file parts in media group. Default is `False`. `Bool`.\n- `USER_TRANSMISSION`: Upload/Download by user session. Only in superChat. Default is `False`. `Bool`\n- `MIXED_LEECH`: Upload by user and bot session with respect to file size. Only in superChat. Default is `False`. `Bool`\n- `LEECH_FILENAME_PREFIX`: Add custom word to leeched file name. `Str`\n- `LEECH_DUMP_CHAT`: ID or USERNAME or PM(private message) to where files would be uploaded. `Int`|`Str`. Add `-100` before channel/superGroup id.\n- `THUMBNAIL_LAYOUT`: Thumbnail layout (widthxheight, 2x2, 3x3, 2x4, 4x4, ...) of how many photo arranged for the thumbnail.`Str`\n\n**7. qBittorrent/Aria2c/Sabnzbd**\n\n- `TORRENT_TIMEOUT`: Timeout of dead torrents downloading with qBittorrent and Aria2c in seconds. `Int`\n- `BASE_URL`: Valid BASE URL where the bot is deployed to use torrent/nzb web files selection. Format of URL should\n  be `http://myip`, where `myip` is the IP/Domain(public) of your bot or if you have chosen port other than `80` so\n  write it in this format `http://myip:port` (`http` and not `https`). `Str`\n- `BASE_URL_PORT`: Which is the **BASE_URL** Port. Default is `80`. `Int`\n- `WEB_PINCODE`: Whether to ask for pincode before selecting files from torrent in web or not. Default\n  is `False`. `Bool`.\n    - **Qbittorrent NOTE**: If your facing ram issues then set limit for `MaxConnections`,\n      decrease `AsyncIOThreadsCount`, set limit of `DiskWriteCacheSize` to `32` and decrease `MemoryWorkingSetLimit`\n      from qbittorrent.conf or bsetting command.\n    - Open port 8090 in your vps to access webui from any device. username: mltb, password: mltbmltb\n\n**8. JDownloader**\n\n- `JD_EMAIL`: jdownloader email sign up on [JDownloader](https://my.jdownloader.org/). `Str`\n- `JD_PASS`: jdownloader password. `Str`\n  - **JDownloader Config**: You can use your config from local machine in bot by *zipping* cfg folder (cfg.zip) and add it in repo folder.\n\n**9. Sabnzbd**\n\n- `USENET_SERVERS`: list of dictionaries, you can add as much as you want and there is a button for servers in sabnzbd settings to edit current servers and add new servers. `List`\n\n  ***[{'name': 'main', 'host': '', 'port': 563, 'timeout': 60, 'username': '', 'password': '', 'connections': 8, 'ssl': 1, 'ssl_verify': 2, 'ssl_ciphers': '', 'enable': 1, 'required': 0, 'optional': 0, 'retention': 0, 'send_group': 0, 'priority': 0}]***\n\n  - [READ THIS FOR MORE INFORMATION](https://sabnzbd.org/wiki/configuration/4.2/servers)\n\n  - Open port 8070 in your vps to access full web interface from any device. Use it like http://ip:8070/sabnzbd/. username: mltb, password: mltbmltb\n\n**10. RSS**\n\n- `RSS_DELAY`: Time in seconds for rss refresh interval. Recommended `600` second at least. Default is `600` in\n  sec. `Int`\n- `RSS_CHAT`: Chat `ID or USERNAME or ID|TOPIC_ID or USERNAME|TOPIC_ID` where rss links will be sent. If you want message to be sent to the channel then add channel id. Add `-100` before channel id. `Int`|`Str`\n    - **RSS NOTES**: `RSS_CHAT` is required, otherwise monitor will not work. You must use `USER_STRING_SESSION` --OR--\n      *CHANNEL*. If using channel then bot should be added in both channel and group(linked to channel) and `RSS_CHAT`\n      is the channel id, so messages sent by the bot to channel will be forwarded to group. Otherwise\n      with `USER_STRING_SESSION` add group id for `RSS_CHAT`. If `DATABASE_URL` not added you will miss the feeds while\n      bot offline.\n\n**11. Queue System**\n\n- `QUEUE_ALL`: Number of parallel tasks of downloads and uploads. For example if 20 task added and `QUEUE_ALL` is `8`,\n  then the summation of uploading and downloading tasks are 8 and the rest in queue. `Int`. \n    **NOTE**: if you want to fill `QUEUE_DOWNLOAD` or `QUEUE_UPLOAD`, then `QUEUE_ALL` value must be greater than or equal to the greatest one and\n  less than or equal to summation of `QUEUE_UPLOAD` and `QUEUE_DOWNLOAD`.\n- `QUEUE_DOWNLOAD`: Number of all parallel downloading tasks. `Int`\n- `QUEUE_UPLOAD`: Number of all parallel uploading tasks. `Int`\n\n**12. Torrent Search**\n\n- `SEARCH_API_LINK`: Search api app link. Get your api from deploying\n  this [repository](https://github.com/Ryuk-me/Torrent-Api-py). `Str`\n    - Supported Sites:\n  > 1337x, Piratebay, Nyaasi, Torlock, Torrent Galaxy, Zooqle, Kickass, Bitsearch, MagnetDL, Libgen, YTS, Limetorrent,\n  TorrentFunk, Glodls, TorrentProject and YourBittorrent\n- `SEARCH_LIMIT`: Search limit for search api, limit for each site and not overall result limit. Default is zero (\n  Default api limit for each site). `Int`\n- `SEARCH_PLUGINS`: List of qBittorrent search plugins (github raw links). I have added some plugins, you can remove/add\n  plugins as you want. Main\n  Source: [qBittorrent Search Plugins (Official/Unofficial)](https://github.com/qbittorrent/search-plugins). `List`\n\n------\n\n</details>\n</details>\n\n<details>\n  <summary><h2>Build And Run the Docker Image</h2></summary>\n\nMake sure you still mount the repo folder and installed the docker from official documentation.\n\n- There are two methods to build and run the docker:\n    1. Using official docker commands.\n    2. Using docker-compose. (Recommended)\n\n------\n\n<details>\n  <summary><h3>Build And Run The Docker Image Using Official Docker Commands</h3></summary>\n\n- Start Docker daemon (SKIP if already running, mostly you don't need to do this):\n\n```\nsudo dockerd\n```\n\n- Build Docker image:\n\n```\nsudo docker build . -t mltb\n```\n\n- Run the image:\n\n```\nsudo docker run -p 80:80 -p 8080:8080 -p 8070:8070 -p 8090:8090 mltb\n```\n\n- To stop the running image:\n\n```\nsudo docker ps\n```\n\n```\nsudo docker stop id\n```\n\n----\n\n</details>\n\n<details>\n  <summary><h3>Build And Run The Docker Image Using docker-compose</h3></summary>\n\n**NOTE**: If you want to use ports other than 80 and 8080 for torrent file selection and rclone serve respectively,\nchange it in [docker-compose.yml](https://github.com/anasty17/mirror-leech-telegram-bot/blob/master/docker-compose.yml)\nalso.\n\n- Install docker compose plugin\n\n```\nsudo apt install docker-compose-plugin\n```\n\n- Build and run Docker image or to view current running image:\n\n```\nsudo docker compose up\n```\n\n- After editing files with nano for example (nano start.sh) or git pull:\n\n```\nsudo docker compose up --build\n```\n\n- To stop the running image:\n\n```\nsudo docker compose stop\n```\n\n- To run the image:\n\n```\nsudo docker compose start\n```\n\n- To get log from already running image (after mounting the folder):\n\n```\nsudo docker compose logs --follow\n```\n\n------\n\n</details>\n\n**IMPORTANT NOTES**:\n\n1. Set `BASE_URL_PORT` and `RCLONE_SERVE_PORT` variables to any port you want to use. Default is `80` and `8080`\n   respectively.\n\n2. Check the number of processing units of your machine with `nproc` cmd and times it by 4, then\n   edit `AsyncIOThreadsCount` in qBittorrent.conf.\n\n------\n\n</details>\n</details>\n\n<details>\n  <summary><h1>Extras</h1></summary>\n\n<details>\n  <summary><h5>Bot commands to be set in <a href=\"https://t.me/BotFather\">@BotFather</a></h5></summary>\n\n```\nmirror - or /m Mirror\nqbmirror - or /qm Mirror torrent using qBittorrent\njdmirror - or /jm Mirror using jdownloader\nnzbmirror - or /nm Mirror using sabnzbd\nytdl - or /y Mirror yt-dlp supported links\nleech - or /l Upload to telegram\nqbleech - or /ql Leech torrent using qBittorrent\njdleech - or /jl Leech using jdownloader\nnzbleech - or /nl Leech using sabnzbd\nytdlleech - or /yl Leech yt-dlp supported links\nclone - Copy file/folder to Drive\ncount - Count file/folder from GDrive\nusetting - or /us User settings\nbsetting - or /bs Bot settings\nstatus - Get Mirror Status message\nsel - Select files from torrent\nrss - Rss menu\nlist - Search files in Drive\nsearch - Search for torrents with API\ncancel - or /c Cancel a task\ncancelall - Cancel all tasks\nforcestart - or /fs to start task from queue\ndel - Delete file/folder from GDrive\nlog - Get the Bot Log\nshell - Run commands in Shell\naexec - Execute async function\nexec - Execute sync function\nrestart - Restart the Bot\nrestartses - Restart Telegram Session(s)\nstats - Bot Usage Stats\nping - Ping the Bot\nhelp - All cmds with description\n```\n\n------\n\n</details>\n\n<details>\n  <summary><h5>Getting Google OAuth API credential file and token.pickle</h5></summary>\n\n**NOTES**\n\n- Old authentication changed, now we can't use bot or replit to generate token.pickle. You need OS with a local browser.\n  For example `Termux`.\n- Windows users should install python3 and pip. You can find how to install and use them from google or from\n  this [telegraph](https://telegra.ph/Create-Telegram-Mirror-Leech-Bot-by-Deploying-App-with-Heroku-Branch-using-Github-Workflow-12-06)\n  from [Wiszky](https://github.com/vishnoe115) tutorial.\n- You can ONLY open the generated link from `generate_drive_token.py` in local browser.\n\n1. Visit the [Google Cloud Console](https://console.developers.google.com/apis/credentials)\n2. Go to the OAuth Consent tab, fill it, and save.\n3. Go to the Credentials tab and click Create Credentials -> OAuth Client ID\n4. Choose Desktop and Create.\n5. Publish your OAuth consent screen App to prevent **token.pickle** from expire\n6. Use the download button to download your credentials.\n7. Move that file to the root of mirrorbot, and rename it to **credentials.json**\n8. Visit [Google API page](https://console.developers.google.com/apis/library)\n9. Search for Google Drive Api and enable it\n10. Finally, run the script to generate **token.pickle** file for Google Drive:\n\n```\npip3 install google-api-python-client google-auth-httplib2 google-auth-oauthlib\npython3 generate_drive_token.py\n```\n\n------\n\n</details>\n\n<details>\n  <summary><h5>Generating rclone.conf</h5></summary>\n\n1. Install rclone from [Official Site](https://rclone.org/install/)\n2. Create new remote(s) using `rclone config` command.\n3. Copy rclone.conf from .config/rclone/rclone.conf to repo folder\n\n------\n\n</details>\n\n<details>\n  <summary><h5>Upload</h5></summary>\n\n- `RCLONE_PATH` is like `GDRIVE_ID` a default path for mirror. In additional to those variables `DEFAULT_UPLOAD` to\n  choose the default tool whether it's rclone or google-api-python-client.\n- If `DEFAULT_UPLOAD` = 'rc' then you must fill `RCLONE_PATH` with path as default one or with `rcl` to select\n  destination path on each new task.\n- If `DEFAULT_UPLOAD` = 'gd' then you must fill `GDRIVE_ID` with folder/TD id.\n- rclone.conf can be added before deploy like token.pickle to repo folder root or use bsetting to upload it as private\n  file.\n- If rclone.conf uploaded from usetting or added in `rclone/{user_id}.conf` then `RCLONE_PATH` must start with `mrcc:`.\n- Whenever you want to write path manually to use user rclone.conf that added from usetting then you must add\n  the `mrcc:` at the beginning.\n- So in short, up: has 4 possible values which is: gd(Upload to GDRIVE_ID), rc(Upload to RCLONE_PATH), rcl(Select Rclone\n  Path) and rclone_path(remote:path(owner rclone.conf) or mrcc:remote:path(user rclone.conf))\n\n------\n\n</details>\n\n<details>\n  <summary><h5>UPSTREAM REPO (Recommended)</h5></summary>\n\n- `UPSTREAM_REPO` variable can be used for edit/add any file in repository.\n- You can add private/public repository link to grab/overwrite all files from it.\n- You can skip adding the privates files like token.pickle or accounts folder before deploying, simply\n  fill `UPSTREAM_REPO` private one in case you want to grab all files including private files.\n- If you added private files while deploying and you have added private `UPSTREAM_REPO` and your private files in this\n  private repository, so your private files will be overwritten from this repository. Also if you are using database for\n  private files, then all files from database will override the private files that added before deploying or from\n  private `UPSTREAM_REPO`.\n- If you filled `UPSTREAM_REPO` with the official repository link, then be carefull incase any change in\n  requirements.txt your bot will not start after restart. In this case you need to deploy again with updated code to\n  install the new requirements or simply by changing the `UPSTREAM_REPO` to you fork link with that old updates.\n- In case you you filled `UPSTREAM_REPO` with your fork link be carefull also if you fetched the commits from the\n  official repository.\n- The changes in your `UPSTREAM_REPO` will take affect only after restart.\n\n------\n\n</details>\n\n<details>\n  <summary><h5>Bittorrent Seed</h5></summary>\n\n- Using `-d` argument alone will lead to use global options for aria2c or qbittorrent.\n\n<details>\n  <summary><h3>QBittorrent</h3></summary>\n\n- Global options: `GlobalMaxRatio` and `GlobalMaxSeedingMinutes` in qbittorrent.conf, `-1` means no limit, but you can\n  cancel manually.\n    - **NOTE**: Don't change `MaxRatioAction`.\n\n</details>\n\n<details>\n  <summary><h3>Aria2c</h3></summary>\n\n- Global options: `--seed-ratio` (0 means no limit) and `--seed-time` (0 means no seed) in aria.sh.\n\n------\n\n</details>\n</details>\n\n<details>\n  <summary><h5>Using Service Accounts for uploading to avoid user rate limit</h5></summary>\n\n> For Service Account to work, you must set `USE_SERVICE_ACCOUNTS` = \"True\" in config file or environment variables.\n> **NOTE**: Using Service Accounts is only recommended while uploading to a Team Drive.\n\n<details>\n  <summary><h3>1. Generate Service Accounts. <a href=\"https://cloud.google.com/iam/docs/service-accounts\">What is Service Account?</a></h3></summary>\nLet us create only the Service Accounts that we need.\n\n**Warning**: Abuse of this feature is not the aim of this project and we do **NOT** recommend that you make a lot of\nprojects, just one project and 100 SAs allow you plenty of use, its also possible that over abuse might get your\nprojects banned by Google.\n\n> **NOTE**: If you have created SAs in past from this script, you can also just re download the keys by running:\n\n```\npython3 gen_sa_accounts.py --download-keys $PROJECTID\n```\n\n> **NOTE:** 1 Service Account can upload/copy around 750 GB a day, 1 project can make 100 Service Accounts so you can\n> upload 75 TB a day.\n\n> **NOTE:** All people can copy `2TB/DAY` from each file creator (uploader account), so if you got\n> error `userRateLimitExceeded` that doesn't mean your limit exceeded but file creator limit have been exceeded which\n> is `2TB/DAY`.\n\n#### Two methods to create service accounts\n\nChoose one of these methods\n\n<details>\n  <summary><h5>1. Create Service Accounts in existed Project (Recommended Method)</h5></summary>\n\n- List your projects ids\n\n```\npython3 gen_sa_accounts.py --list-projects\n```\n\n- Enable services automatically by this command\n\n```\npython3 gen_sa_accounts.py --enable-services $PROJECTID\n```\n\n- Create Sevice Accounts to current project\n\n```\npython3 gen_sa_accounts.py --create-sas $PROJECTID\n```\n\n- Download Sevice Accounts as accounts folder\n\n```\npython3 gen_sa_accounts.py --download-keys $PROJECTID\n```\n\n</details>\n\n<details>\n  <summary><h5>2. Create Service Accounts in New Project</h5></summary>\n\n```\npython3 gen_sa_accounts.py --quick-setup 1 --new-only\n```\n\nA folder named accounts will be created which will contain keys for the Service Accounts.\n\n</details>\n</details>\n\n<details>\n  <summary><h3>2. Add Service Accounts</h3></summary>\n\n#### Two methods to add service accounts\n\nChoose one of these methods\n\n<details>\n  <summary><h5>1. Add Them To Google Group then to Team Drive (Recommended)</h5></summary>\n\n- Mount accounts folder\n\n```\ncd accounts\n```\n\n- Grab emails form all accounts to emails.txt file that would be created in accounts folder\n- `For Windows using PowerShell`\n\n```\n$emails = Get-ChildItem .\\**.json |Get-Content -Raw |ConvertFrom-Json |Select -ExpandProperty client_email >>emails.txt\n```\n\n- `For Linux`\n\n```\ngrep -oPh '\"client_email\": \"\\K[^\"]+' *.json > emails.txt\n```\n\n- Unmount acounts folder\n\n```\ncd ..\n```\n\nThen add emails from emails.txt to Google Group, after that add this Google Group to your Shared Drive and promote it to\nmanager and delete email.txt file from accounts folder\n\n</details>\n\n<details>\n  <summary><h5>2. Add Them To Team Drive Directly</h5></summary>\n\n- Run:\n\n```\npython3 add_to_team_drive.py -d SharedTeamDriveSrcID\n```\n\n------\n\n</details>\n</details>\n</details>\n\n<details>\n  <summary><h5>Create Database</h5></summary>\n\n1. Go to `https://mongodb.com/` and sign-up.\n2. Create Shared Cluster.\n3. Press on `Database` under `Deployment` Header, your created cluster will be there.\n5. Press on connect, choose `Allow Access From Anywhere` and press on `Add IP Address` without editing the ip, then\n   create user.\n6. After creating user press on `Choose a connection`, then press on `Connect your application`. Choose `Driver` *\n   *python** and `version` **3.12 or later**.\n7. Copy your `connection string` and replace `<password>` with the password of your user, then press close.\n\n------\n\n</details>\n\n<details>\n  <summary><h5>Multi Drive List</h5></summary>\n\nTo use list from multi TD/folder. Run driveid.py in your terminal and follow it. It will generate **list_drives.txt**\nfile or u can simply create `list_drives.txt` file in working directory and fill it, check below format:\n\n```\nDriveName folderID/tdID or `root` IndexLink(if available)\nDriveName folderID/tdID or `root` IndexLink(if available)\n```\n\nExample:\n\n```\nTD1 root https://example.dev\nTD2 0AO1JDB1t3i5jUk9PVA https://example.dev\n```\n\n-----\n\n</details>\n\n<details>\n  <summary><h5>Yt-dlp and Aria2c Authentication Using .netrc File</h5></summary>\n\nFor using your premium accounts in yt-dlp or for protected Index Links, create .netrc file according to following\nformat:\n\n**Note**: Create .netrc and not netrc, this file will be hidden, so view hidden files to edit it after creation.\n\nFormat:\n\n```\nmachine host login username password my_password\n```\n\nUsing Aria2c you can also use built in feature from bot with or without username. Here example for index link without\nusername.\n\n```\nmachine example.workers.dev password index_password\n```\nWhere host is the name of extractor (eg. instagram, Twitch). Multiple accounts of different hosts can be added each\nseparated by a new line.\n\n**Yt-dlp**: \nAuthentication using [cookies.txt](https://github.com/yt-dlp/yt-dlp/wiki/FAQ#how-do-i-pass-cookies-to-yt-dlp) file.\n\n\n-----\n\n</details>\n</details>\n\n\n# All Thanks To Our Contributors\n\n<a href=\"https://github.com/anasty17/mirror-leech-telegram-bot/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=anasty17/mirror-leech-telegram-bot\" />\n</a>\n\n# Donations\n\n<p> If you feel like showing your appreciation for this project, then how about buying me a coffee.</p>\n\n[![\"Buy Me A Coffee\"](https://storage.ko-fi.com/cdn/kofi2.png)](https://ko-fi.com/anasty17)\n\nBinance ID:\n\n```\n52187862\n```\n\nUSDT Address:\n\n```\nTEzjjfkxLKQqndpsdpkA7jgiX7QQCL5p4f\n```\n\nNetwork:\n\n```\nTRC20\n```\nTRX Address:\n\n```\nTEzjjfkxLKQqndpsdpkA7jgiX7QQCL5p4f\n```\n\nNetwork:\n\n```\nTRC20\n```\n\nBTC Address:\n\n```\n17dkvxjqdc3yiaTs6dpjUB1TjV3tD7ScWe\n```\n\nETH Address:\n\n```\n0xf798a8a1c72d593e16d8f3bb619ebd1a093c7309\n```\n\n-----\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.03125,
          "content": "theme: jekyll-theme-time-machine"
        },
        {
          "name": "add_to_team_drive.py",
          "type": "blob",
          "size": 3.142578125,
          "content": "from __future__ import print_function\n\nimport argparse\nimport glob\nimport googleapiclient.discovery\nimport json\nimport os\nimport pickle\nimport progress.bar\nimport sys\nimport time\nfrom google.auth.transport.requests import Request\nfrom google_auth_oauthlib.flow import InstalledAppFlow\n\nstt = time.time()\n\nparse = argparse.ArgumentParser(\n    description=\"A tool to add service accounts to a shared drive from a folder containing credential files.\"\n)\nparse.add_argument(\n    \"--path\",\n    \"-p\",\n    default=\"accounts\",\n    help=\"Specify an alternative path to the service accounts folder.\",\n)\nparse.add_argument(\n    \"--credentials\",\n    \"-c\",\n    default=\"./credentials.json\",\n    help=\"Specify the relative path for the credentials file.\",\n)\nparse.add_argument(\n    \"--yes\", \"-y\", default=False, action=\"store_true\", help=\"Skips the sanity prompt.\"\n)\nparsereq = parse.add_argument_group(\"required arguments\")\nparsereq.add_argument(\n    \"--drive-id\", \"-d\", help=\"The ID of the Shared Drive.\", required=True\n)\n\nargs = parse.parse_args()\nacc_dir = args.path\ndid = args.drive_id\ncredentials = glob.glob(args.credentials)\n\ntry:\n    open(credentials[0], \"r\")\n    print(\">> Found credentials.\")\nexcept IndexError:\n    print(\">> No credentials found.\")\n    sys.exit(0)\n\nif not args.yes:\n    # input('Make sure the following client id is added to the shared drive as Manager:\\n' + json.loads((open(\n    # credentials[0],'r').read()))['installed']['client_id'])\n    input(\n        \">> Make sure the **Google account** that has generated credentials.json\\n   is added into your Team Drive \"\n        \"(shared drive) as Manager\\n>> (Press any key to continue)\"\n    )\n\ncreds = None\nif os.path.exists(\"token_sa.pickle\"):\n    with open(\"token_sa.pickle\", \"rb\") as token:\n        creds = pickle.load(token)\n# If there are no (valid) credentials available, let the user log in.\nif not creds or not creds.valid:\n    if creds and creds.expired and creds.refresh_token:\n        creds.refresh(Request())\n    else:\n        flow = InstalledAppFlow.from_client_secrets_file(\n            credentials[0],\n            scopes=[\n                \"https://www.googleapis.com/auth/admin.directory.group\",\n                \"https://www.googleapis.com/auth/admin.directory.group.member\",\n            ],\n        )\n        # creds = flow.run_local_server(port=0)\n        creds = flow.run_console()\n    # Save the credentials for the next run\n    with open(\"token_sa.pickle\", \"wb\") as token:\n        pickle.dump(creds, token)\n\ndrive = googleapiclient.discovery.build(\"drive\", \"v3\", credentials=creds)\nbatch = drive.new_batch_http_request()\n\naa = glob.glob(f\"{acc_dir}/*.json\")\npbar = progress.bar.Bar(\"Readying accounts\", max=len(aa))\nfor i in aa:\n    ce = json.loads(open(i, \"r\").read())[\"client_email\"]\n    batch.add(\n        drive.permissions().create(\n            fileId=did,\n            supportsAllDrives=True,\n            body={\"role\": \"organizer\", \"type\": \"user\", \"emailAddress\": ce},\n        )\n    )\n    pbar.next()\npbar.finish()\nprint(\"Adding...\")\nbatch.execute()\n\nprint(\"Complete.\")\nhours, rem = divmod((time.time() - stt), 3600)\nminutes, sec = divmod(rem, 60)\nprint(\"Elapsed Time:\\n{:0>2}:{:0>2}:{:05.2f}\".format(int(hours), int(minutes), sec))\n"
        },
        {
          "name": "aria-nox-nzb.sh",
          "type": "blob",
          "size": 1.0302734375,
          "content": "tracker_list=$(curl -Ns https://ngosang.github.io/trackerslist/trackers_all_http.txt | awk '$0' | tr '\\n\\n' ',')\naria2c --allow-overwrite=true --auto-file-renaming=true --bt-enable-lpd=true --bt-detach-seed-only=true \\\n       --bt-remove-unselected-file=true --bt-tracker=\"[$tracker_list]\" --bt-max-peers=0 --enable-rpc=true \\\n       --rpc-max-request-size=1024M --max-connection-per-server=10 --max-concurrent-downloads=1000 --split=10 \\\n       --seed-ratio=0 --check-integrity=true --continue=true --daemon=true --disk-cache=40M --force-save=true \\\n       --min-split-size=10M --follow-torrent=mem --check-certificate=false --optimize-concurrent-downloads=true \\\n       --http-accept-gzip=true --max-file-not-found=0 --max-tries=20  --peer-id-prefix=-qB4520- --reuse-uri=true \\\n       --content-disposition-default-utf8=true --user-agent=Wget/1.12 --peer-agent=qBittorrent/4.5.2 --quiet=true \\\n       --summary-interval=0 --max-upload-limit=1K\nqbittorrent-nox -d --profile=\"$(pwd)\"\nsabnzbdplus -f sabnzbd/SABnzbd.ini -s :::8070 -b 0 -d -c -l 0 --console"
        },
        {
          "name": "bot",
          "type": "tree",
          "content": null
        },
        {
          "name": "captain-definition",
          "type": "blob",
          "size": 0.0595703125,
          "content": "{\n  \"schemaVersion\": 2,\n  \"dockerfilePath\": \"./Dockerfile\"\n}\n"
        },
        {
          "name": "config_sample.py",
          "type": "blob",
          "size": 3.322265625,
          "content": "# REQUIRED CONFIG\nBOT_TOKEN = \"\"\nOWNER_ID = 0\nTELEGRAM_API = 0\nTELEGRAM_HASH = \"\"\n# OPTIONAL CONFIG\nUSER_SESSION_STRING = \"\"\nDOWNLOAD_DIR = \"/usr/src/app/downloads/\"\nCMD_SUFFIX = \"\"\nAUTHORIZED_CHATS = \"\"\nSUDO_USERS = \"\"\nDATABASE_URL = \"\"\nSTATUS_LIMIT = 10\nDEFAULT_UPLOAD = \"rc\"\nSTATUS_UPDATE_INTERVAL = 15\nFILELION_API = \"\"\nSTREAMWISH_API = \"\"\nEXTENSION_FILTER = \"\"\nINCOMPLETE_TASK_NOTIFIER = False\nYT_DLP_OPTIONS = \"\"\nUSE_SERVICE_ACCOUNTS = False\nNAME_SUBSTITUTE = \"\"\nFFMPEG_CMDS = {}\n# GDrive Tools\nGDRIVE_ID = \"\"\nIS_TEAM_DRIVE = False\nSTOP_DUPLICATE = False\nINDEX_URL = \"\"\n# Rclone\nRCLONE_PATH = \"\"\nRCLONE_FLAGS = \"\"\nRCLONE_SERVE_URL = \"\"\nRCLONE_SERVE_PORT = 0\nRCLONE_SERVE_USER = \"\"\nRCLONE_SERVE_PASS = \"\"\n# JDownloader\nJD_EMAIL = \"\"\nJD_PASS = \"\"\n# Sabnzbd\nUSENET_SERVERS = [\n    {\n        \"name\": \"main\",\n        \"host\": \"\",\n        \"port\": 563,\n        \"timeout\": 60,\n        \"username\": \"\",\n        \"password\": \"\",\n        \"connections\": 8,\n        \"ssl\": 1,\n        \"ssl_verify\": 2,\n        \"ssl_ciphers\": \"\",\n        \"enable\": 1,\n        \"required\": 0,\n        \"optional\": 0,\n        \"retention\": 0,\n        \"send_group\": 0,\n        \"priority\": 0,\n    }\n]\n# Update\nUPSTREAM_REPO = \"\"\nUPSTREAM_BRANCH = \"master\"\n# Leech\nLEECH_SPLIT_SIZE = 0\nAS_DOCUMENT = False\nEQUAL_SPLITS = False\nMEDIA_GROUP = False\nUSER_TRANSMISSION = False\nMIXED_LEECH = False\nLEECH_FILENAME_PREFIX = \"\"\nLEECH_DUMP_CHAT = \"\"\nTHUMBNAIL_LAYOUT = \"\"\n# qBittorrent/Aria2c\nTORRENT_TIMEOUT = 0\nBASE_URL = \"\"\nBASE_URL_PORT = 0\nWEB_PINCODE = False\n# Queueing system\nQUEUE_ALL = 0\nQUEUE_DOWNLOAD = 0\nQUEUE_UPLOAD = 0\n# RSS\nRSS_DELAY = 600\nRSS_CHAT = \"\"\n# Torrent Search\nSEARCH_API_LINK = \"\"\nSEARCH_LIMIT = 0\nSEARCH_PLUGINS = [\n    \"https://raw.githubusercontent.com/qbittorrent/search-plugins/master/nova3/engines/piratebay.py\",\n    \"https://raw.githubusercontent.com/qbittorrent/search-plugins/master/nova3/engines/limetorrents.py\",\n    \"https://raw.githubusercontent.com/qbittorrent/search-plugins/master/nova3/engines/torlock.py\",\n    \"https://raw.githubusercontent.com/qbittorrent/search-plugins/master/nova3/engines/torrentscsv.py\",\n    \"https://raw.githubusercontent.com/qbittorrent/search-plugins/master/nova3/engines/eztv.py\",\n    \"https://raw.githubusercontent.com/qbittorrent/search-plugins/master/nova3/engines/torrentproject.py\",\n    \"https://raw.githubusercontent.com/MaurizioRicci/qBittorrent_search_engines/master/kickass_torrent.py\",\n    \"https://raw.githubusercontent.com/MaurizioRicci/qBittorrent_search_engines/master/yts_am.py\",\n    \"https://raw.githubusercontent.com/MadeOfMagicAndWires/qBit-plugins/master/engines/linuxtracker.py\",\n    \"https://raw.githubusercontent.com/MadeOfMagicAndWires/qBit-plugins/master/engines/nyaasi.py\",\n    \"https://raw.githubusercontent.com/LightDestory/qBittorrent-Search-Plugins/master/src/engines/ettv.py\",\n    \"https://raw.githubusercontent.com/LightDestory/qBittorrent-Search-Plugins/master/src/engines/glotorrents.py\",\n    \"https://raw.githubusercontent.com/LightDestory/qBittorrent-Search-Plugins/master/src/engines/thepiratebay.py\",\n    \"https://raw.githubusercontent.com/v1k45/1337x-qBittorrent-search-plugin/master/leetx.py\",\n    \"https://raw.githubusercontent.com/nindogo/qbtSearchScripts/master/magnetdl.py\",\n    \"https://raw.githubusercontent.com/msagca/qbittorrent_plugins/main/uniondht.py\",\n    \"https://raw.githubusercontent.com/khensolomon/leyts/master/yts.py\",\n]\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.1640625,
          "content": "services:\n  app:\n    build: .\n    command: bash start.sh\n    restart: on-failure\n    ports:\n      - \"80:80\"\n      - \"8080:8080\"\n      - \"8070:8070\"\n      - \"8090:8090\"\n"
        },
        {
          "name": "driveid.py",
          "type": "blob",
          "size": 2.0400390625,
          "content": "import os\nimport re\n\nprint(\n    \"\\n\\n\"\n    \"        Bot can search files recursively, but you have to add the list of drives you want to search.\\n\"\n    \"        Use the following format: (You can use 'root' in the ID in case you wan to use main drive.)\\n\"\n    \"        teamdrive NAME      -->   anything that you likes\\n\"\n    \"        teamdrive ID        -->   id of teamdrives in which you likes to search ('root' for main drive)\\n\"\n    \"        teamdrive INDEX URL -->   enter index url for this drive.\\n\"\n    \"                                  go to the respective drive and copy the url from address bar\\n\"\n)\nmsg = \"\"\nif os.path.exists(\"list_drives.txt\"):\n    with open(\"list_drives.txt\", \"r+\") as f:\n        lines = f.read()\n    if not re.match(r\"^\\s*$\", lines):\n        print(lines)\n        print(\n            \"\\n\\n\"\n            \"      DO YOU WISH TO KEEP THE ABOVE DETAILS THAT YOU PREVIOUSLY ADDED???? ENTER (y/n)\\n\"\n            \"      IF NOTHING SHOWS ENTER n\"\n        )\n        while 1:\n            choice = input()\n            if choice in [\"y\", \"Y\"]:\n                msg = f\"{lines}\"\n                break\n            elif choice in [\"n\", \"N\"]:\n                break\n            else:\n                print(\n                    \"\\n\\n      DO YOU WISH TO KEEP THE ABOVE DETAILS ???? y/n <=== this is option ..... OPEN YOUR EYES & READ...\"\n                )\nnum = int(input(\"    How Many Drive/Folder You Likes To Add : \"))\nfor count in range(1, num + 1):\n    print(f\"\\n        > DRIVE - {count}\\n\")\n    name = input(\"    Enter Drive NAME  (anything)     : \")\n    id = input(\"    Enter Drive ID                   : \")\n    index = input(\"    Enter Drive INDEX URL (optional) : \")\n    if not name or not id:\n        print(\"\\n\\n        ERROR : Dont leave the name/id without filling.\")\n        exit(1)\n    name = name.replace(\" \", \"_\")\n    if index:\n        if index[-1] == \"/\":\n            index = index[:-1]\n    else:\n        index = \"\"\n    msg += f\"{name} {id} {index}\\n\"\nwith open(\"list_drives.txt\", \"w\") as file:\n    file.truncate(0)\n    file.write(msg)\nprint(\"\\n\\n    Done!\")\n"
        },
        {
          "name": "gen_sa_accounts.py",
          "type": "blob",
          "size": 13.7412109375,
          "content": "import errno\nimport os\nimport pickle\nimport sys\nfrom argparse import ArgumentParser\nfrom base64 import b64decode\nfrom glob import glob\nfrom google.auth.transport.requests import Request\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom googleapiclient.discovery import build\nfrom googleapiclient.errors import HttpError\nfrom json import loads\nfrom random import choice\nfrom time import sleep\n\nSCOPES = [\n    \"https://www.googleapis.com/auth/drive\",\n    \"https://www.googleapis.com/auth/cloud-platform\",\n    \"https://www.googleapis.com/auth/iam\",\n]\nproject_create_ops = []\ncurrent_key_dump = []\nsleep_time = 30\n\n\n# Create count SAs in project\ndef _create_accounts(service, project, count):\n    batch = service.new_batch_http_request(callback=_def_batch_resp)\n    for _ in range(count):\n        aid = _generate_id(\"mfc-\")\n        batch.add(\n            service.projects()\n            .serviceAccounts()\n            .create(\n                name=f\"projects/{project}\",\n                body={\n                    \"accountId\": aid,\n                    \"serviceAccount\": {\"displayName\": aid},\n                },\n            )\n        )\n    batch.execute()\n\n\n# Create accounts needed to fill project\ndef _create_remaining_accounts(iam, project):\n    print(f\"Creating accounts in {project}\")\n    sa_count = len(_list_sas(iam, project))\n    while sa_count != 100:\n        _create_accounts(iam, project, 100 - sa_count)\n        sa_count = len(_list_sas(iam, project))\n\n\n# Generate a random id\ndef _generate_id(prefix=\"saf-\"):\n    chars = \"-abcdefghijklmnopqrstuvwxyz1234567890\"\n    return prefix + \"\".join(choice(chars) for _ in range(25)) + choice(chars[1:])\n\n\n# List projects using service\ndef _get_projects(service):\n    return [i[\"projectId\"] for i in service.projects().list().execute()[\"projects\"]]\n\n\n# Default batch callback handler\ndef _def_batch_resp(id, resp, exception):\n    if exception is not None:\n        if str(exception).startswith(\"<HttpError 429\"):\n            sleep(sleep_time / 100)\n        else:\n            print(exception)\n\n\n# Project Creation Batch Handler\ndef _pc_resp(id, resp, exception):\n    global project_create_ops\n    if exception is not None:\n        print(exception)\n    else:\n        for i in resp.values():\n            project_create_ops.append(i)\n\n\n# Project Creation\ndef _create_projects(cloud, count):\n    global project_create_ops\n    batch = cloud.new_batch_http_request(callback=_pc_resp)\n    new_projs = []\n    for _ in range(count):\n        new_proj = _generate_id()\n        new_projs.append(new_proj)\n        batch.add(cloud.projects().create(body={\"project_id\": new_proj}))\n    batch.execute()\n\n    for i in project_create_ops:\n        while True:\n            resp = cloud.operations().get(name=i).execute()\n            if \"done\" in resp and resp[\"done\"]:\n                break\n            sleep(3)\n    return new_projs\n\n\n# Enable services ste for projects in projects\ndef _enable_services(service, projects, ste):\n    batch = service.new_batch_http_request(callback=_def_batch_resp)\n    for i in projects:\n        for j in ste:\n            batch.add(service.services().enable(name=f\"projects/{i}/services/{j}\"))\n    batch.execute()\n\n\n# List SAs in project\ndef _list_sas(iam, project):\n    resp = (\n        iam.projects()\n        .serviceAccounts()\n        .list(name=f\"projects/{project}\", pageSize=100)\n        .execute()\n    )\n    return resp[\"accounts\"] if \"accounts\" in resp else []\n\n\n# Create Keys Batch Handler\ndef _batch_keys_resp(id, resp, exception):\n    global current_key_dump\n    if exception is not None:\n        current_key_dump = None\n        sleep(sleep_time / 100)\n    elif current_key_dump is None:\n        sleep(sleep_time / 100)\n    else:\n        current_key_dump.append(\n            (\n                resp[\"name\"][resp[\"name\"].rfind(\"/\") :],\n                b64decode(resp[\"privateKeyData\"]).decode(\"utf-8\"),\n            )\n        )\n\n\n# Create Keys\ndef _create_sa_keys(iam, projects, path):\n    global current_key_dump\n    for i in projects:\n        current_key_dump = []\n        print(f\"Downloading keys from {i}\")\n        while current_key_dump is None or len(current_key_dump) != 100:\n            batch = iam.new_batch_http_request(callback=_batch_keys_resp)\n            total_sas = _list_sas(iam, i)\n            for j in total_sas:\n                batch.add(\n                    iam.projects()\n                    .serviceAccounts()\n                    .keys()\n                    .create(\n                        name=f\"projects/{i}/serviceAccounts/{j['uniqueId']}\",\n                        body={\n                            \"privateKeyType\": \"TYPE_GOOGLE_CREDENTIALS_FILE\",\n                            \"keyAlgorithm\": \"KEY_ALG_RSA_2048\",\n                        },\n                    )\n                )\n            batch.execute()\n            if current_key_dump is None:\n                print(f\"Redownloading keys from {i}\")\n                current_key_dump = []\n            else:\n                for index, j in enumerate(current_key_dump):\n                    with open(f\"{path}/{index}.json\", \"w+\") as f:\n                        f.write(j[1])\n\n\n# Delete Service Accounts\ndef _delete_sas(iam, project):\n    sas = _list_sas(iam, project)\n    batch = iam.new_batch_http_request(callback=_def_batch_resp)\n    for i in sas:\n        batch.add(iam.projects().serviceAccounts().delete(name=i[\"name\"]))\n    batch.execute()\n\n\ndef serviceaccountfactory(\n    credentials=\"credentials.json\",\n    token=\"token_sa.pickle\",\n    path=None,\n    list_projects=False,\n    list_sas=None,\n    create_projects=None,\n    max_projects=12,\n    enable_services=None,\n    services=[\"iam\", \"drive\"],\n    create_sas=None,\n    delete_sas=None,\n    download_keys=None,\n):\n    selected_projects = []\n    proj_id = loads(open(credentials, \"r\").read())[\"installed\"][\"project_id\"]\n    creds = None\n    if os.path.exists(token):\n        with open(token, \"rb\") as t:\n            creds = pickle.load(t)\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n        else:\n            flow = InstalledAppFlow.from_client_secrets_file(credentials, SCOPES)\n\n            creds = flow.run_local_server(port=0, open_browser=False)\n\n        with open(token, \"wb\") as t:\n            pickle.dump(creds, t)\n\n    cloud = build(\"cloudresourcemanager\", \"v1\", credentials=creds)\n    iam = build(\"iam\", \"v1\", credentials=creds)\n    serviceusage = build(\"serviceusage\", \"v1\", credentials=creds)\n\n    projs = None\n    while projs is None:\n        try:\n            projs = _get_projects(cloud)\n        except HttpError as e:\n            if (\n                loads(e.content.decode(\"utf-8\"))[\"error\"][\"status\"]\n                == \"PERMISSION_DENIED\"\n            ):\n                try:\n                    serviceusage.services().enable(\n                        name=f\"projects/{proj_id}/services/cloudresourcemanager.googleapis.com\"\n                    ).execute()\n                except HttpError as e:\n                    print(e._get_reason())\n                    input(\"Press Enter to retry.\")\n    if list_projects:\n        return _get_projects(cloud)\n    if list_sas:\n        return _list_sas(iam, list_sas)\n    if create_projects:\n        print(f\"creat projects: {create_projects}\")\n        if create_projects > 0:\n            current_count = len(_get_projects(cloud))\n            if current_count + create_projects <= max_projects:\n                print(\"Creating %d projects\" % (create_projects))\n                nprjs = _create_projects(cloud, create_projects)\n                selected_projects = nprjs\n            else:\n                sys.exit(\n                    \"No, you cannot create %d new project (s).\\n\"\n                    \"Please reduce value of --quick-setup.\\n\"\n                    \"Remember that you can totally create %d projects (%d already).\\n\"\n                    \"Please do not delete existing projects unless you know what you are doing\"\n                    % (create_projects, max_projects, current_count)\n                )\n        else:\n            print(\n                \"Will overwrite all service accounts in existing projects.\\n\"\n                \"So make sure you have some projects already.\"\n            )\n            input(\"Press Enter to continue...\")\n\n    if enable_services:\n        ste = [enable_services]\n        if enable_services == \"~\":\n            ste = selected_projects\n        elif enable_services == \"*\":\n            ste = _get_projects(cloud)\n        services = [f\"{i}.googleapis.com\" for i in services]\n        print(\"Enabling services\")\n        _enable_services(serviceusage, ste, services)\n    if create_sas:\n        stc = [create_sas]\n        if create_sas == \"~\":\n            stc = selected_projects\n        elif create_sas == \"*\":\n            stc = _get_projects(cloud)\n        for i in stc:\n            _create_remaining_accounts(iam, i)\n    if download_keys:\n        try:\n            os.mkdir(path)\n        except OSError as e:\n            if e.errno != errno.EEXIST:\n                raise\n        std = [download_keys]\n        if download_keys == \"~\":\n            std = selected_projects\n        elif download_keys == \"*\":\n            std = _get_projects(cloud)\n        _create_sa_keys(iam, std, path)\n    if delete_sas:\n        std = []\n        std.append(delete_sas)\n        if delete_sas == \"~\":\n            std = selected_projects\n        elif delete_sas == \"*\":\n            std = _get_projects(cloud)\n        for i in std:\n            print(f\"Deleting service accounts in {i}\")\n            _delete_sas(iam, i)\n\n\nif __name__ == \"__main__\":\n    parse = ArgumentParser(description=\"A tool to create Google service accounts.\")\n    parse.add_argument(\n        \"--path\",\n        \"-p\",\n        default=\"accounts\",\n        help=\"Specify an alternate directory to output the credential files.\",\n    )\n    parse.add_argument(\n        \"--token\", default=\"token_sa.pickle\", help=\"Specify the pickle token file path.\"\n    )\n    parse.add_argument(\n        \"--credentials\",\n        default=\"credentials.json\",\n        help=\"Specify the credentials file path.\",\n    )\n    parse.add_argument(\n        \"--list-projects\",\n        default=False,\n        action=\"store_true\",\n        help=\"List projects viewable by the user.\",\n    )\n    parse.add_argument(\n        \"--list-sas\", default=False, help=\"List service accounts in a project.\"\n    )\n    parse.add_argument(\n        \"--create-projects\", type=int, default=None, help=\"Creates up to N projects.\"\n    )\n    parse.add_argument(\n        \"--max-projects\",\n        type=int,\n        default=12,\n        help=\"Max amount of project allowed. Default: 12\",\n    )\n    parse.add_argument(\n        \"--enable-services\",\n        default=None,\n        help=\"Enables services on the project. Default: IAM and Drive\",\n    )\n    parse.add_argument(\n        \"--services\",\n        nargs=\"+\",\n        default=[\"iam\", \"drive\"],\n        help=\"Specify a different set of services to enable. Overrides the default.\",\n    )\n    parse.add_argument(\n        \"--create-sas\", default=None, help=\"Create service accounts in a project.\"\n    )\n    parse.add_argument(\n        \"--delete-sas\", default=None, help=\"Delete service accounts in a project.\"\n    )\n    parse.add_argument(\n        \"--download-keys\",\n        default=None,\n        help=\"Download keys for all the service accounts in a project.\",\n    )\n    parse.add_argument(\n        \"--quick-setup\",\n        default=None,\n        type=int,\n        help=\"Create projects, enable services, create service accounts and download keys. \",\n    )\n    parse.add_argument(\n        \"--new-only\",\n        default=False,\n        action=\"store_true\",\n        help=\"Do not use exisiting projects.\",\n    )\n    args = parse.parse_args()\n    # If credentials file is invalid, search for one.\n    if not os.path.exists(args.credentials):\n        options = glob(\"*.json\")\n        print(\n            \"No credentials found at %s. Please enable the Drive API in:\\n\"\n            \"https://developers.google.com/drive/api/v3/quickstart/python\\n\"\n            \"and save the json file as credentials.json\" % args.credentials\n        )\n        if not options:\n            exit(-1)\n        else:\n            print(\"Select a credentials file below.\")\n            inp_options = [str(i) for i in list(range(1, len(options) + 1))] + options\n            for i in range(len(options)):\n                print(\"  %d) %s\" % (i + 1, options[i]))\n            inp = None\n            while True:\n                inp = input(\"> \")\n                if inp in inp_options:\n                    break\n            args.credentials = inp if inp in options else options[int(inp) - 1]\n            print(\n                f\"Use --credentials {args.credentials} next time to use this credentials file.\"\n            )\n    if args.quick_setup:\n        opt = \"~\" if args.new_only else \"*\"\n        args.services = [\"iam\", \"drive\"]\n        args.create_projects = args.quick_setup\n        args.enable_services = opt\n        args.create_sas = opt\n        args.download_keys = opt\n    resp = serviceaccountfactory(\n        path=args.path,\n        token=args.token,\n        credentials=args.credentials,\n        list_projects=args.list_projects,\n        list_sas=args.list_sas,\n        create_projects=args.create_projects,\n        max_projects=args.max_projects,\n        create_sas=args.create_sas,\n        delete_sas=args.delete_sas,\n        enable_services=args.enable_services,\n        services=args.services,\n        download_keys=args.download_keys,\n    )\n    if resp is not None:\n        if args.list_projects:\n            if resp:\n                print(\"Projects (%d):\" % len(resp))\n                for i in resp:\n                    print(f\"  {i}\")\n            else:\n                print(\"No projects.\")\n        elif args.list_sas:\n            if resp:\n                print(\"Service accounts in %s (%d):\" % (args.list_sas, len(resp)))\n                for i in resp:\n                    print(f\"  {i['email']} ({i['uniqueId']})\")\n            else:\n                print(\"No service accounts.\")\n"
        },
        {
          "name": "generate_drive_token.py",
          "type": "blob",
          "size": 0.8701171875,
          "content": "import os\nimport pickle\nfrom google.auth.transport.requests import Request\nfrom google_auth_oauthlib.flow import InstalledAppFlow\n\ncredentials = None\n__G_DRIVE_TOKEN_FILE = \"token.pickle\"\n__OAUTH_SCOPE = [\"https://www.googleapis.com/auth/drive\"]\nif os.path.exists(__G_DRIVE_TOKEN_FILE):\n    with open(__G_DRIVE_TOKEN_FILE, \"rb\") as f:\n        credentials = pickle.load(f)\n        if (\n            (credentials is None or not credentials.valid)\n            and credentials\n            and credentials.expired\n            and credentials.refresh_token\n        ):\n            credentials.refresh(Request())\nelse:\n    flow = InstalledAppFlow.from_client_secrets_file(\"credentials.json\", __OAUTH_SCOPE)\n    credentials = flow.run_local_server(port=0, open_browser=False)\n\n# Save the credentials for the next run\nwith open(__G_DRIVE_TOKEN_FILE, \"wb\") as token:\n    pickle.dump(credentials, token)\n"
        },
        {
          "name": "generate_string_session.py",
          "type": "blob",
          "size": 0.373046875,
          "content": "try:\n    from pyrogram import Client\nexcept Exception as e:\n    print(e)\n    print(\"\\nInstall pyrogram: pip3 install pyrogram\")\n    exit(1)\n\nprint(\"Required pyrogram V2 or greater.\")\nAPI_KEY = int(input(\"Enter API KEY: \"))\nAPI_HASH = input(\"Enter API HASH: \")\nwith Client(name=\"USS\", api_id=API_KEY, api_hash=API_HASH, in_memory=True) as app:\n    print(app.export_session_string())\n"
        },
        {
          "name": "myjd",
          "type": "tree",
          "content": null
        },
        {
          "name": "qBittorrent",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements-cli.txt",
          "type": "blob",
          "size": 0.1005859375,
          "content": "oauth2client\ngoogle-api-python-client\nprogress\nprogressbar2\nhttplib2shim\ngoogle_auth_oauthlib\npyrofork\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.345703125,
          "content": "aiofiles\naioshutil\nanytree\napscheduler\naria2p\nasyncio\ncloudscraper\ndnspython\nfeedparser\nflask\ngevent\ngoogle-api-python-client\ngoogle-auth-httplib2\ngoogle-auth-oauthlib\ngunicorn\nhttpx\nlxml\nmotor\nnatsort\npar2cmdline-turbo\npillow\npsutil\npymongo\npyrofork\npython-magic\nqbittorrent-api\nrequests\ntelegraph\ntenacity\ntgcrypto\nurllib3\nuvloop\nxattr\nyt-dlp[default]\n"
        },
        {
          "name": "sabnzbd",
          "type": "tree",
          "content": null
        },
        {
          "name": "sabnzbdapi",
          "type": "tree",
          "content": null
        },
        {
          "name": "start.sh",
          "type": "blob",
          "size": 0.0595703125,
          "content": "source mltbenv/bin/activate\npython3 update.py\npython3 -m bot\n"
        },
        {
          "name": "update.py",
          "type": "blob",
          "size": 2.7099609375,
          "content": "from sys import exit\nfrom importlib import import_module\nfrom logging import (\n    FileHandler,\n    StreamHandler,\n    INFO,\n    basicConfig,\n    error as log_error,\n    info as log_info,\n    getLogger,\n    ERROR,\n)\nfrom os import path, remove\nfrom pymongo.mongo_client import MongoClient\nfrom pymongo.server_api import ServerApi\nfrom subprocess import run as srun\n\ngetLogger(\"pymongo\").setLevel(ERROR)\n\nif path.exists(\"log.txt\"):\n    with open(\"log.txt\", \"r+\") as f:\n        f.truncate(0)\n\nif path.exists(\"rlog.txt\"):\n    remove(\"rlog.txt\")\n\nbasicConfig(\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n    handlers=[FileHandler(\"log.txt\"), StreamHandler()],\n    level=INFO,\n)\n\nsettings = import_module(\"config\")\nconfig_file = {\n    key: value.strip() if isinstance(value, str) else value\n    for key, value in vars(settings).items()\n    if not key.startswith(\"__\")\n}\n\nBOT_TOKEN = config_file.get(\"BOT_TOKEN\", \"\")\nif not BOT_TOKEN:\n    log_error(\"BOT_TOKEN variable is missing! Exiting now\")\n    exit(1)\n\nBOT_ID = BOT_TOKEN.split(\":\", 1)[0]\n\nif DATABASE_URL := config_file.get(\"DATABASE_URL\", \"\").strip():\n    try:\n        conn = MongoClient(DATABASE_URL, server_api=ServerApi(\"1\"))\n        db = conn.mltb\n        old_config = db.settings.deployConfig.find_one({\"_id\": BOT_ID})\n        config_dict = db.settings.config.find_one({\"_id\": BOT_ID})\n        if old_config is not None:\n            del old_config[\"_id\"]\n        if (\n            old_config is not None and old_config == config_file or old_config is None\n        ) and config_dict is not None:\n            config_file[\"UPSTREAM_REPO\"] = config_dict[\"UPSTREAM_REPO\"]\n            config_file[\"UPSTREAM_BRANCH\"] = config_dict[\"UPSTREAM_BRANCH\"]\n        conn.close()\n    except Exception as e:\n        log_error(f\"Database ERROR: {e}\")\n\nUPSTREAM_REPO = config_file.get(\"UPSTREAM_REPO\", \"\").strip()\n\nUPSTREAM_BRANCH = config_file.get(\"UPSTREAM_BRANCH\", \"\").strip() or \"master\"\n\nif UPSTREAM_REPO:\n    if path.exists(\".git\"):\n        srun([\"rm\", \"-rf\", \".git\"])\n\n    update = srun(\n        [\n            f\"git init -q \\\n                     && git config --global user.email e.anastayyar@gmail.com \\\n                     && git config --global user.name mltb \\\n                     && git add . \\\n                     && git commit -sm update -q \\\n                     && git remote add origin {UPSTREAM_REPO} \\\n                     && git fetch origin -q \\\n                     && git reset --hard origin/{UPSTREAM_BRANCH} -q\"\n        ],\n        shell=True,\n    )\n\n    if update.returncode == 0:\n        log_info(\"Successfully updated with latest commit from UPSTREAM_REPO\")\n    else:\n        log_error(\n            \"Something went wrong while updating, check UPSTREAM_REPO if valid or not!\"\n        )\n"
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}