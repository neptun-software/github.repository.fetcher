{
  "metadata": {
    "timestamp": 1736560429178,
    "page": 998,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjEwMDA=",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pyeve/cerberus",
      "stars": 3186,
      "defaultBranch": "1.3.x",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3203125,
          "content": "*.py[co]\n\n# Packages\n*.egg\n*.egg-info\ndist\nbuild\neggs\nparts\nbin\nvar\nsdist\ndevelop-eggs\n.installed.cfg\n.eggs/\n\n# Installer logs\npip-log.txt\n\n# Testing\n.benchmarks/\n.cache\n.coverage\n.mypy_cache/\n.pytest_cache/\n.tox\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n\n# Sphinx\n_build\n\n# Jetbrains\n.idea\n.vscode/\n.devcontainer/\n"
        },
        {
          "name": ".linting-config.yaml",
          "type": "blob",
          "size": 0.546875,
          "content": "# mind that a similar file exists for pre-commit usage\nrepos:\n  - repo: https://github.com/psf/black\n    rev: stable\n    hooks:\n      - id: black\n        args: [--check]\n        language_version: python3.12\n        types:\n          - python\n        exclude: ^docs/conf.py$\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v1.4.0\n    hooks:\n      - id: check-yaml\n        types:\n          - yaml\n      - id: debug-statements\n        types:\n          - python\n      - id: flake8\n        types:\n          - python\n        exclude: ^docs/conf.py$\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.5439453125,
          "content": "# mind that a similar file exists for linting usage\nrepos:\n  - repo: https://github.com/psf/black\n    rev: stable\n    hooks:\n      - id: black\n        args: [--quiet]\n        language_version: python3.12\n        types:\n          - python\n        exclude: ^docs/conf.py$\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v1.4.0\n    hooks:\n      - id: check-yaml\n        types:\n          - yaml\n      - id: debug-statements\n        types:\n          - python\n      - id: flake8\n        types:\n          - python\n        exclude: ^docs/conf.py$\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.197265625,
          "content": "---\n\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3\"\n\nformats: all\n\npython:\n  install:\n    - path: .\n    - requirements: docs/requirements.txt\n\nsphinx:\n  configuration: docs/conf.py\n\n...\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 1.1181640625,
          "content": "Cerberus is developed and maintained by the Cerberus community. It was created\nby Nicola Iarocci.\n\nCore maintainers\n~~~~~~~~~~~~~~~~\n\n- Nicola Iarocci (nicolaiarocci)\n- Frank Sachsenheim (funkyfuture)\n\nContributors\n~~~~~~~~~~~~\n\n- Antoine Lubineau\n- Arsh Singh\n- Audric Schiltknecht\n- Brandon Aubie\n- Brett\n- Bruno Oliveira\n- Bryan W. Weber\n- C.D. Clark III\n- Christian Hogan\n- Connor Zapfel\n- Damián Nohales\n- Danielle Pizzolli\n- Davis Kirkendall\n- Denis Carriere\n- Dominik Kellner\n- Eelke Hermens\n- Evgeny Odegov\n- Florian Rathgeber\n- Gabriel Wainer\n- Harro van der Klauw\n- Jaroslav Semančík\n- Jonathan Huot\n- Kaleb Pomeroy\n- Kirill Pavlov\n- Kornelijus Survila\n- Lujeni\n- Luke Bechtel\n- Luo Peng\n- Martijn Vermaat\n- Martin Ortbauer\n- Matthew Ellison\n- Michael Klich\n- Nik Haldimann\n- Nikita Melentev\n- Nikita Vlaznev\n- Paul Weaver\n- Peter Demin\n- Riccardo\n- Roman Redkovich\n- Scott Crunkleton\n- Sebastian Heid\n- Sebastian Rajo\n- Sergey Leshchenko\n- Tobias Betz\n- Trong Hieu HA\n- Vipul Gupta\n- Waldir Pimenta\n- Yauhen Shulitski\n- calve\n- gilbsgilbs\n\nA full, up-to-date list of contributors is available from git with:\n\n    git shortlog -sne\n"
        },
        {
          "name": "CHANGES.rst",
          "type": "blob",
          "size": 24.673828125,
          "content": "Cerberus Changelog\n==================\n\nVersion 1.3.7\n-------------\n\nReleased on December 31, 2024.\n\nFixed\n~~~~~\n\n- Amends missing changelog\n\n\nVersion 1.3.6\n-------------\n\nReleased on December 23, 2024.\n\nNew\n~~~\n\n- Support for Python 3.12 & 3.13\n\nFixed\n~~~~~\n\n- Escaping in docstrings (`#608`_)\n\n.. _`#608`: https://github.com/pyeve/cerberus/issues/608\n\nVersion 1.3.5\n-------------\n\nReleased on August 9, 2023.\n\nNew\n~~~\n\n- Support for Python 3.10 & 3.11\n- The HTML documentation uses the *furo* theme\n\nFixed\n~~~~~\n\n- ``*of`` rules are skipped for ``None`` values (`#582`_)\n- Validations of mappings would raise an exception when the field's rules were\n  provided as reference to a registry item (`#599`_)\n\n.. _`#582`: https://github.com/pyeve/cerberus/issues/582\n.. _`#599`: https://github.com/pyeve/cerberus/issues/599\n\nImproved\n~~~~~~~~\n\n- Various minor improvements of the documentation\n\nVersion 1.3.4\n-------------\n\nReleased on May 5, 2021.\n\nFixed\n~~~~~\n\n- Reverts the unsatisfying fix for `#557`_,\n- instead a ``RuntimeError`` is thrown when Python is running with optimization\n  level 2 (`#567`_)\n\n.. _`#567`: https://github.com/pyeve/cerberus/issues/567\n\nVersion 1.3.3\n-------------\n\nReleased on April 11, 2021.\n\nNew\n~~~\n\n- Adds a benchmark to observe overall performance between code changes (`#531`_)\n- Adds support for Python 3.9\n- The Continuous Integration now runs on GitHub Actions\n\nFixed\n~~~~~\n\n- Fixed unresolved registry references when getting a constraint for an error\n  (`#562`_)\n- Fixed crash when submitting non-hashable values to ``allowed`` (`#524`_)\n- Fixed schema validation for rules specifications with space (`#527`_)\n- Replaced deprecated rule name ``validator`` with ``check_with`` in the docs\n  (`#527`_)\n- Use the UnconcernedValidator when the Python interpreter is executed with\n  an optimization flag (`#557`_)\n- Several fixes and refinements of the docs\n\n.. _`#524`: https://github.com/pyeve/cerberus/issues/524\n.. _`#527`: https://github.com/pyeve/cerberus/issues/527\n.. _`#531`: https://github.com/pyeve/cerberus/issues/531\n.. _`#557`: https://github.com/pyeve/cerberus/issues/557\n.. _`#562`: https://github.com/pyeve/cerberus/issues/562\n\nVersion 1.3.2\n-------------\n\nReleased on October 29, 2019.\n\nNew\n~~~\n\n- Support for Python 3.8\n\nFixed\n~~~~~\n\n- Fixed the message of the ``BasicErrorHandler`` for an invalid amount of items\n  (`#505`_)\n- Added ``setuptools`` as dependency to the package metadata (`#499`_)\n- The ``CHANGES.rst`` document is properly included in the package (`#493`_)\n\nImproved\n~~~~~~~~\n\n- Docs: Examples were added for the ``min``- and ``maxlength`` rules. (`#509`_)\n\n.. _`#509`: https://github.com/pyeve/cerberus/issues/509\n.. _`#505`: https://github.com/pyeve/cerberus/issues/505\n.. _`#499`: https://github.com/pyeve/cerberus/issues/499\n.. _`#493`: https://github.com/pyeve/cerberus/issues/493\n\nVersion 1.3.1\n-------------\n\nReleases on May 10, 2019.\n\nFixed\n~~~~~\n\n- Fixed the expansion of the deprecated rule names ``keyschema`` and\n  ``valueschema`` (`#482`_)\n- ``*of_``-typesavers properly expand rule names containing ``_`` (`#484`_)\n\nImproved\n~~~~~~~~\n- Add ``maintainer`` and ``maintainer_email`` to setup.py (`#481`_)\n- Add ``project_urls`` to setup.py (`#480`_)\n- Don't ignore all exceptions during coercions for nullable fields. If a\n- Coercion raises an exception for a nullable field where the field is not\n  ``None`` the validation now fails. (`#490`_)\n\n.. _`#490`: https://github.com/pyeve/cerberus/issues/490\n.. _`#484`: https://github.com/pyeve/cerberus/issues/484\n.. _`#482`: https://github.com/pyeve/cerberus/issues/482\n.. _`#481`: https://github.com/pyeve/cerberus/issues/481\n.. _`#480`: https://github.com/pyeve/cerberus/issues/480\n\nVersion 1.3\n-----------\n\nReleases on April 30, 2019.\n\nNew\n~~~\n- Add ``require_all`` rule and validator argument (`#417`_)\n- The ``contains`` rule (`#358`_)\n- All fields that are defined as ``readonly`` are removed from a document\n  when a validator has the ``purge_readonly`` flag set to ``True`` (`#240`_)\n- The ``validator`` rule is renamed to ``check_with``. The old name is\n  deprecated and will not be available in the next major release of Cerberus\n  (`#405`_)\n- The rules ``keyschema`` and ``valueschema`` are renamed to ``keysrules`` and\n  ``valuesrules``; the old names are deprecated and will not be available in\n  the next major release of Cerbers (`#385`_)\n- The ``meta`` pseudo-rule can be used to store arbitrary application data\n  related to a field in a schema\n- Python 3.7 officially supported (`#451`_)\n- **Python 2.6 and 3.3 are no longer supported**\n\nFixed\n~~~~~\n- Fix test test_{default,default_setter}_none_nonnullable (`#435`_)\n- Normalization rules defined within the ``items`` rule are applied (`#361`_)\n- Defaults are applied to undefined fields from an ``allow_unknown``\n  definition (`#310`_)\n- The ``forbidden`` value now handles any input type (`#449`_)\n- The `allowed` rule will not be evaluated on fields that have a legit ``None``\n  value (`#454`_)\n- If the cerberus distribution cannot not be found, the version is set to the\n  value ``unknown`` (`#472`_)\n\nImproved\n~~~~~~~~\n- Suppress DeprecationWarning about collections.abc (`#451`_)\n- Omit warning when no schema for ``meta`` rule constraint is available\n  (`#425`_)\n- Add ``.eggs`` to .gitignore file (`#420`_)\n- Reformat code to match Black code-style (`#402`_)\n- Perform lint checks and fixes on staged files, as a pre-commit hook (`#402`_)\n- Change ``allowed`` rule to use containers instead of lists (`#384`_)\n- Remove ``Registry`` from top level namespace (`#354`_)\n- Remove ``utils.is_class``\n- Check the ``empty`` rule against values of type ``Sized``\n- Various micro optimizations and 'safety belts' that were inspired by adding\n  type annotations to a branch of the code base\n\nDocs\n~~~~\n- Fix semantical versioning naming. There are only two hard things in Computer\n  Science: cache invalidation and naming things -- *Phil Karlton* (`#429`_)\n- Improve documentation of the regex rule (`#389`_)\n- Expand upon `validator` rules (`#320`_)\n- Include all errors definitions in API docs (`#404`_)\n- Improve changelog format (`#406`_)\n- Update homepage URL in package metadata (`#382`_)\n- Add feature freeze note to CONTRIBUTING and note on Python support in\n  README\n- Add the intent of a ``dataclasses`` module to ROADMAP.md\n- Update README link; make it point to the new PyPI website\n- Update README with elaborations on versioning and testing\n- Fix misspellings and missing pronouns\n- Remove redundant hint from ``*of-rules``.\n- Add usage recommendation regarding the ``*of-rules``\n- Add a few clarifications to the GitHub issue template\n- Update README link; make it point to the new PyPI website\n\n.. _`#472`: https://github.com/pyeve/cerberus/pull/472\n.. _`#454`: https://github.com/pyeve/cerberus/issues/454\n.. _`#451`: https://github.com/pyeve/cerberus/pull/451\n.. _`#449`: https://github.com/pyeve/cerberus/pull/449\n.. _`#435`: https://github.com/pyeve/cerberus/pull/435\n.. _`#429`: https://github.com/pyeve/cerberus/pull/429\n.. _`#425`: https://github.com/pyeve/cerberus/pull/425\n.. _`#420`: https://github.com/pyeve/cerberus/issues/420\n.. _`#417`: https://github.com/pyeve/cerberus/issues/417\n.. _`#406`: https://github.com/pyeve/cerberus/issues/406\n.. _`#405`: https://github.com/pyeve/cerberus/issues/405\n.. _`#404`: https://github.com/pyeve/cerberus/issues/404\n.. _`#402`: https://github.com/pyeve/cerberus/issues/402\n.. _`#389`: https://github.com/pyeve/cerberus/issues/389\n.. _`#385`: https://github.com/pyeve/cerberus/issues/385\n.. _`#384`: https://github.com/pyeve/cerberus/issues/384\n.. _`#382`: https://github.com/pyeve/cerberus/issues/382\n.. _`#361`: https://github.com/pyeve/cerberus/pull/361\n.. _`#358`: https://github.com/pyeve/cerberus/issues/358\n.. _`#354`: https://github.com/pyeve/cerberus/issues/354\n.. _`#320`: https://github.com/pyeve/cerberus/issues/320\n.. _`#310`: https://github.com/pyeve/cerberus/issues/310\n.. _`#240`: https://github.com/pyeve/cerberus/issues/240\n\nVersion 1.2\n-----------\n\nReleased on April 12, 2018.\n\n- New: docs: Add note that normalization cannot be applied within an ``*of-rule``.\n  (Frank Sachsenheim)\n- New: Add the ability to query for a type of error in an error tree.\n  (Frank Sachsenheim)\n- New: Add errors.MAPPING_SCHEMA on errors within subdocuments.\n  (Frank Sachsenheim)\n- New: Support for Types Definitions, which allow quick types check on the fly.\n  (Frank Sachsenheim)\n\n- Fix: Simplify the tests with Docker by using a volume for tox environments.\n  (Frank Sachsenheim)\n- Fix: Schema registries do not work on dict fields.\n  Closes :issue:`318`. (Frank Sachsenheim)\n- Fix: Need to drop some rules when ``empty`` is allowed.\n  Closes :issue:`326`. (Frank Sachsenheim)\n- Fix: typo in README (Christian Hogan)\n- Fix: Make ``purge_unknown`` and ``allow_unknown`` play nice together.\n  Closes :issue:`324`. (Audric Schiltknecht)\n- Fix: API reference lacks generated content.\n  Closes :issue:`281`. (Frank Sachsenheim)\n- Fix: ``readonly`` works properly just in the first validation.\n  Closes :issue:`311`. (Frank Sachsenheim)\n- Fix: ``coerce`` ignores ``nullable: True``.\n  Closes :issue:`269`. (Frank Sachsenheim)\n- Fix: A dependency is not considered satisfied if it has a null value.\n  Closes :issue:`305`. (Frank Sachsenheim)\n- Override ``UnvalidatedSchema.copy``. (Peter Demin)\n- Fix: README link. (Gabriel Wainer)\n- Fix: Regression: allow_unknown causes dictionary validation to fail with\n  a KeyError. Closes :issue:`302`. (Frank Sachsenheim)\n- Fix: Error when setting fields as tuples instead of lists.\n  Closes :issue:`271`. (Sebastian Rajo)\n- Fix: Correctly handle nested logic and group errors.\n  Closes :issue:`278` and :issue:`299`. (Kornelijus Survila)\n- CI: Reactivate testing on PyPy3. (Frank Sachsenheim)\n\nVersion 1.1\n-----------\n\nReleased on January 25, 2017.\n\n- New: Python 3.6 support. (Frank Sachsenheim)\n- New: Users can implement their own semantics in Validator._lookup_field.\n  (Frank Sachsenheim)\n- New: Allow applying of ``empty`` rule to sequences and mappings.\n  Closes :issue:`270`. (Frank Sachsenheim)\n\n- Fix: Better handling of unicode in ``allowed`` rule.\n  Closes :issue:`280`. (Michael Klich).\n- Fix: Rules sets with normalization rules fail.\n  Closes :issue:`283`. (Frank Sachsenheim)\n- Fix: Spelling error in RULE_SCHEMA_SEPARATOR constant (Antoine Lubineau)\n- Fix: Expand schemas and rules sets when added to a registry. Closes :issue:`284`\n  (Frank Sachsenheim)\n- Fix: ``readonly`` conflicts with ``default`` rule. Closes :issue:`268` (Dominik\n  Kellner).\n- Fix: Creating custom Validator instance with ``_validator_*`` method raises\n  ``SchemaError``. Closes :issue:`265` (Frank Sachsenheim).\n- Fix: Consistently use new style classes (Dominik Kellner).\n- Fix: ``NotImplemented`` does not derive from ``BaseException``. (Bryan W.\n  Weber).\n\n- Completely switch to py.test. Closes :issue:`213` (Frank Sachsenheim).\n- Convert ``self.assert`` method calls to plain ``assert`` calls supported by\n  pytest. Addresses :issue:`213` (Bruno Oliveira).\n\n- Docs: Clarifications concerning dependencies and unique rules. (Frank\n  Sachsenheim)\n- Docs: Fix custom coerces documentation. Closes :issue:`285`. (gilbsgilbs)\n- Docs: Add note concerning regex flags. Closes :issue:`173`. (Frank Sachsenheim)\n- Docs: Explain that normalization and coercion are performed on a copy of the\n  original document (Sergey Leshchenko)\n\nVersion 1.0.1\n-------------\n\nReleased on September 1, 2016.\n\n- Fix: bump trove classifier to Production/Stable (5).\n\nVersion 1.0\n-----------\n\nReleased on September 1, 2016.\n\n.. warning::\n\n    This is a major release which breaks backward compatibility in several\n    ways. Don't worry, these changes are for the better. However, if you are\n    upgrading, then you should really take the time to read the list of\n    `Breaking Changes`_ and consider their impact on your codebase. For your\n    convenience, some :doc:`upgrade notes <upgrading>` have been included.\n\n- New: Add capability to use references in schemas. (Frank Sachsenheim)\n- New: Support for binary type. (Matthew Ellison)\n- New: Allow callables for 'default' schema rule. (Dominik Kellner)\n- New: Support arbitrary types with 'max' and 'min' (Frank Sachsenheim).\n- New: Support any iterable with 'minlength' and 'maxlength'.\n  Closes :issue:`158`. (Frank Sachsenheim)\n- New: 'default' normalization rule. Closes :issue:`131`. (Damián Nohales)\n- New: 'excludes' rule (calve). Addresses :issue:`132`.\n- New: 'forbidden' rule. (Frank Sachsenheim)\n- New: 'rename'-rule renames a field to a given value during normalization\n  (Frank Sachsenheim).\n- New: 'rename_handler'-rule that takes an callable that renames unknown\n  fields. (Frank Sachsenheim)\n- New: 'Validator.purge_unknown'-property and conditional purging of unknown\n  fields. (Frank Sachsenheim)\n- New: 'coerce', 'rename_handler' and 'validator' can use class-methods (Frank\n  Sachsenheim).\n- New: '\\*of'-rules can be extended by concatenating another rule. (Frank\n  Sachsenheim)\n- New: Allows various error output with error handlers (Frank Sachsenheim).\n- New: Available rules etc. of a Validator-instance are accessible as\n  'validation_rules', 'normalization_rules', 'types', 'validators' and\n  'coercer' -property. (Frank Sachsenheim)\n- New: Custom rule's method docstrings can contain an expression to validate\n  constraints for that rule when a schema is validated. (Frank Sachsenheim).\n- New: 'Validator.root_schema' complements 'Validator.root_document'. (Frank\n  Sachsenheim)\n- New: 'Validator.document_path' and 'Validator.schema_path' properties can\n  be used to determine the relation of the currently validating document to the\n  'root_document' / 'root_schema'. (Frank Sachsenheim)\n- New: Known, validated definition schemas are cached, thus validation run-time\n  of schemas is reduced. (Frank Sachsenheim)\n- New: Add testing with Docker. (Frank Sachsenheim)\n- New: Support CPython 3.5. (Frank Sachsenheim)\n\n- Fix: 'allow_unknown' inside \\*of rule is ignored. Closes #251. (Davis\n  Kirkendall)\n- Fix: unexpected TypeError when using allow_unknown in a schema defining\n  a list of dicts. Closes :issue:`250`. (Davis Kirkendall)\n- Fix: validate with 'update=True' does not work when required fields are in\n  a list of subdicts. (Jonathan Huot)\n- Fix: 'number' type fails if value is boolean.\n  Closes :issue:`144`. (Frank Sachsenheim)\n- Fix: allow None in 'default' normalization rule. (Damián Nohales)\n- Fix: in 0.9.2, coerce does not maintain proper nesting on dict fields. Closes\n  :issue:`185`.\n- Fix: normalization not working for valueschema and propertyschema. Closes\n  :issue:`155`. (Frank Sachsenheim)\n- Fix: 'coerce' on List elements produces unexpected results.\n  Closes :issue:`161`. (Frank Sachsenheim)\n- Fix: 'coerce'-constraints are validated. (Frank Sachsenheim)\n- Fix: Unknown fields are normalized. (Frank Sachsenheim)\n- Fix: Dependency on boolean field now works as expected.\n  Addresses :issue:`138`. (Roman Redkovich)\n- Fix: Add missing deprecation-warnings. (Frank Sachsenheim)\n\n- Docs: clarify read-only rule. Closes :issue:`127`.\n- Docs: split Usage page into Usage; Validation Rules: Normalization Rules.\n  (Frank Sachsenheim)\n\nBreaking Changes\n~~~~~~~~~~~~~~~~\nSeveral relevant breaking changes have been introduced with this release. For\nthe inside scoop, please see the :doc:`upgrade notes <upgrading>`.\n\n- Change: 'errors' values are lists containing error messages. Previously, they\n  were simple strings if single errors, lists otherwise.\n  Closes :issue:`210`. (Frank Sachsenheim)\n- Change: Custom validator methods: remove the second argument.\n  (Frank Sachsenheim)\n- Change: Custom validator methods: invert the logic of the conditional clauses\n  where is tested what a value is not / has not. (Frank Sachsenheim)\n- Change: Custom validator methods: replace calls to 'self._error' with\n  'return True', or False, or None. (Frank Sachsenheim)\n- Change: Remove 'transparent_schema_rule' in favor of docstring schema\n  validation. (Frank Sachsenheim)\n- Change: Rename 'property_schema' rule to 'keyschema'. (Frank Sachsenheim)\n- Change: Replace 'validate_update' method with 'update' keywork argument.\n  (Frank Sachsenheim)\n- Change: The processed root-document of is now available as 'root_document'-\n  property of the (child-)Validator. (Frank Sachsenheim)\n- Change: Removed 'context'-argument from 'validate'-method as this is set\n  upon the creation of a child-validator. (Frank Sachsenheim)\n- Change: 'ValidationError'-exception renamed to 'DocumentError'.\n  (Frank Sachsenheim)\n- Change: Consolidated all schema-related error-messages' names.\n  (Frank Sachsenheim)\n- Change: Use warnings.warn for deprecation-warnings if available.\n  (Frank Sachsenheim)\n\nVersion 0.9.2\n-------------\n\nReleased on September 23, 2015\n\n- Fix: don't rely on deepcopy since it can't properly handle complex objects in\n  Python 2.6.\n\nVersion 0.9.1\n-------------\n\nReleased on July 7 2015\n\n- Fix: 'required' is always evaluated, independent of eventual missing\n  dependencies. This changes the previous behaviour whereas a required field\n  with dependencies would only be reported as missing if all dependencies were\n  met. A missing required field will always be reported. Also see the\n  discussion in https://github.com/pyeve/eve/pull/665.\n\nVersion 0.9\n-----------\n\nReleased on June 24 2015.\nCodename: 'Mastrolindo'.\n\n- New: 'oneof' rule which provides a list of definitions in which only one\n  should validate (C.D. Clark III).\n- New: 'noneof' rule which provides a list of definitions that should all not\n  validate (C.D. Clark III).\n- New: 'anyof' rule accepts a list of definitions and checks that one\n  definition validates (C.D. Clark III).\n- New: 'allof' rule validates if if all definitions validate (C.D. Clark III).\n- New: 'validator.validated' takes a document as argument and returns\n  a validated document or 'None' if validation failed (Frank Sachsenheim).\n- New: PyPy support (Frank Sachsenheim).\n- New: Type coercion (Brett).\n- New: Added 'propertyschema' validation rule (Frank Sachsenheim).\n\n- Change: Use 'str.format' in error messages so if someone wants to override\n  them does not get an exception if arguments are not passed.\n  Closes :issue:`105`. (Brett)\n- Change: 'keyschema' renamed to 'valueschema', print a deprecation warning\n  (Frank Sachsenheim).\n- Change: 'type' can also be a list of types (Frank Sachsenheim).\n\n- Fix: useages of 'document' to 'self.document' in '_validate' (Frank\n  Sachsenheim).\n- Fix: when 'items' is applied to a list, field name is used as key for\n  'validator.errors', and offending field indexes are used as keys for field\n  errors ({'a_list_of_strings': {1: 'not a string'}}) 'type' can be a list of\n  valid types.\n- Fix: Ensure that additional `**kwargs` of a subclass persist through\n  validation (Frank Sachsenheim).\n- Fix: improve failure message when testing against multiple types (Frank\n  Sachsenheim).\n- Fix: ignore 'keyschema' when not a mapping (Frank Sachsenheim).\n- Fix: ignore 'schema' when not a sequence (Frank Sachsenheim).\n- Fix: allow_unknown can also be set for nested dicts.\n  Closes :issue:`75`. (Tobias Betz)\n- Fix: raise SchemaError when an unallowed 'type' is used in conjunction with\n  'schema' rule (Tobias Betz).\n\n- Docs: added section that points out that YAML, JSON, etc. can be used to\n  define schemas (C.D. Clark III).\n- Docs: Improve 'allow_unknown' documentation (Frank Sachsenheim).\n\nVersion 0.8.1\n-------------\n\nReleased on Mar 16 2015.\n\n- Fix: dependency on a sub-document field does not work. Closes :issue:`64`.\n- Fix: readonly validation should happen before any other validation.\n  Closes :issue:`63`.\n- Fix: allow_unknown does not apply to sub-dictionaries in a list.\n  Closes :issue:`67`.\n- Fix: two tests being ignored because of name typo.\n- Fix: update mode does not ignore required fields in subdocuments.\n  Closes :issue:`72`.\n- Fix: allow_unknown does not respect custom rules. Closes :issue:`66`.\n- Fix: typo in docstrings (Riccardo).\n\nVersion 0.8\n-----------\n\nReleased on Jan 7 2015.\n\n- 'dependencies' also supports dependency values.\n- 'allow_unknown' can also be set to a validation schema, in which case unknown\n  fields will be validated against it. Closes pyeve/eve:issue:`405`.\n- New function-based custom validation mode (Luo Peng).\n- Fields with empty definitions in schema were reported as non-existent. Now\n  they are considered as valid, whatever their value is (Jaroslav Semančík).\n- If dependencies are precised for a 'required' field, then the presence of the\n  field is only validated if all dependencies are present (Trong Hieu HA).\n- Documentation typo (Nikita Vlaznev :issue:`55`).\n- [CI] Add travis_retry to pip install in case of network issues (Helgi Þormar\n  Þorbjörnsson :issue:`49`)\n\nVersion 0.7.2\n-------------\n\nReleased on Jun 19 2014.\n\n- Successfully validate int as float type (Florian Rathgeber).\n\nVersion 0.7.1\n-------------\n\nReleased on Jun 17 2014.\n\n- Validation schemas are now validated up-front. When you pass a Schema to the\n  Validator it will be validated against the supported ruleset (Paul Weaver).\n  Closes :issue:`39`.\n- Custom validators also have access to a special 'self.document' variable that\n  allows validation of a field to happen in context of the rest of the document\n  (Josh Villbrandt).\n- Validator options like 'allow_unknown' and 'ignore_none_values' are now taken\n  into consideration when validating sub-dictionaries. Closes :issue:`40`.\n\nVersion 0.7\n-----------\n\nReleased on May 16 2014.\n\n- Python 3.4 is now supported.\n- tox support.\n- Added 'dependencies' validation rule (Lujeni).\n- Added 'keyschema' validation rule (Florian Rathgeber).\n- Added 'regex' validation rule. Closes :issue:`29`.\n- Added 'set' as a core data type. Closes :issue:`31`.\n- Not-nullable fields are validated independetly of their type definition\n  (Jaroslav Semančík).\n- Python trove classifiers added to setup.py. Closes :issue:`32`.\n- 'min' and 'max' now apply to floats and numbers too. Closes :issue:`30`.\n\nVersion 0.6\n-----------\n\nReleased on February 10 2014\n\n- Added 'number' data type, which validates against both float and integer\n  values (Brandon Aubie).\n- Added support for running tests with py.test\n- Fix non-blocking problem introduced with 0.5 (Martin Ortbauer).\n- Fix bug when _error() is calld twice for a field (Jaroslav Semančík).\n- More precise error message in rule 'schema' validation (Jaroslav Semančík).\n- Use 'allowed' field for integer just like for string (Peter Demin).\n\nVersion 0.5\n-----------\n\nReleased on December 4 2013\n\n- 'validator.errors' now returns a dictionary where keys are document fields\n  and values are lists of validation errors for the field.\n- Validator instances are now callable. Instead of `validated\n  = validator.validate(document)` you can now choose to do 'validated\n  = validator(document)' (Eelke Hermens).\n\nVersion 0.4.0\n-------------\n\nReleased on September 24 2013.\n\n- 'validate_update' is deprecated and will be removed with next release. Use\n  'validate' with 'update=True' instead. Closes :issue:`21`.\n- Fixed a minor encoding issue which made installing on Windows/Python3\n  impossible. Closes :issue:`19` (Arsh Singh).\n- Fix documentation typo (Daniele Pizzolli).\n- 'type' validation is always performed first (only exception being\n  'nullable'). On failure, subsequent rules on the same field are skipped.\n  Closes :issue:`18`.\n\nVersion 0.3.0\n-------------\n\nReleased on July 9 2013.\n\n- docstrings now conform to PEP8.\n- `self.errors` returns an empty list if validate() has not been called.\n- added validation for the 'float' data type.\n- 'nullable' rule added to allow for null field values to be accepted in\n  validations. This is different than required in that you can actively change\n  a value to None instead of omitting or ignoring it. It is essentially the\n  ignore_none_values, allowing for more fine grained control down to the field\n  level (Kaleb Pomeroy).\n\nVersion 0.2.0\n-------------\n\nReleased on April 18 2013.\n\n- 'allow_unknown' option added.\n\nVersion 0.1.0\n-------------\n\nReleased on March 15 2013.\nCodename: 'Claw'.\n\n- entering beta phase.\n- support for Python 3.\n- pep8 and pyflakes fixes (Harro van der Klauw).\n- removed superflous typecheck for empty validator (Harro van der Klauw).\n- 'ignore_none_values' option to ignore None values when type checking (Harro\n  van der Klauw).\n- 'minlenght' and 'maxlength' now apply to lists as well (Harro van der Klauw).\n\n\nVersion 0.0.3\n-------------\n\nReleased on January 29 2013\n\n- when a list item fails, its offset is now returned along with the list name.\n- 'transparent_schema_rules' option added.\n- 'empty' rule for string fields.\n- 'schema' rule on lists of arbitrary lenght (Martjin Vermaat).\n- 'allowed' rule on strings (Martjin Vermaat).\n- 'items' (dict) is now deprecated. Use the upgraded 'schema' rule instead.\n- AUTHORS file added to sources.\n- CHANGES file added to sources.\n\n\nVersion 0.0.2\n-------------\n\nReleased on November 22 2012.\n\n- Added support for addition and validation of custom data types.\n- Several documentation improvements.\n\nVersion 0.0.1\n-------------\n\nReleased on October 16 2012.\n\nFirst public preview release.\n\n.. _`upgrade notes`: https://docs.python-cerberus.org/upgrading.html\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.7333984375,
          "content": "ISC License\n\nCopyright (c) 2012-2016 Nicola Iarocci.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1298828125,
          "content": "include AUTHORS\ninclude CHANGES\ninclude CONTRIBUTING.rst\ninclude LICENSE\ninclude README.rst\ninclude ROADMAP.md\ninclude UPGRADING.rst\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 3.0771484375,
          "content": "Cerberus |latest-version|\n=========================\n|python-support| |black|\n\nCerberus is a lightweight and extensible data validation library for Python.\n\n.. code-block:: python\n\n    >>> v = Validator({'name': {'type': 'string'}})\n    >>> v.validate({'name': 'john doe'})\n    True\n\n\nFeatures\n--------\n\nCerberus provides type checking and other base functionality out of the box and\nis designed to be non-blocking and easily and widely extensible, allowing for\ncustom validation. It has no dependencies, but has the potential to become\nyours.\n\n\nVersioning & Interpreter support\n--------------------------------\n\nStarting with Cerberus 1.2, it is maintained according to\n`semantic versioning`_. So, a major release sheds off the old and defines a\nspace for the new, minor releases ship further new features and improvements\n(you know the drill, new bugs are inevitable too), and micro releases polish a\ndefinite amount of features to glory.\n\nWe intend to test Cerberus against all CPython interpreters at least until half\na year after their `end of life`_ and against the most recent PyPy interpreter\nas a requirement for a release. If you still need to use it with a potential\nsecurity hole in your setup, it should most probably work with the latest\nminor version branch from the time when the interpreter was still tested.\nSubsequent minor versions have good chances as well. In any case, you are\nadvised to run the contributed test suite on your target system.\n\n\nDocumentation\n-------------\n\nComplete documentation is available at http://docs.python-cerberus.org\n\n\nInstallation\n------------\n\nCerberus is on PyPI_, so all you need to do is:\n\n.. code-block:: console\n\n    $ pip install cerberus\n\n\nTesting\n-------\n\nJust run:\n\n.. code-block:: console\n\n    $ python setup.py test\n\nOr you can use tox to run the tests under all supported Python versions. Make\nsure the required python versions are installed and run:\n\n.. code-block:: console\n\n    $ pip install tox  # first time only\n    $ tox\n\n\nContributing\n------------\n\nPlease see the `Contribution Guidelines`_.\n\n\nCopyright\n---------\n\nCerberus is an open source project by `Nicola Iarocci`_. See the license_ file\nfor more information.\n\n\n.. _Contribution Guidelines: https://github.com/pyeve/cerberus/blob/1.3.x/CONTRIBUTING.rst\n.. _end of life: https://devguide.python.org/#status-of-python-branches\n.. _license: https://github.com/pyeve/cerberus/blob/1.3.x/LICENSE\n.. _Nicola Iarocci: https://nicolaiarocci.com/\n.. _PyPI: https://pypi.python.org/\n.. _semantic versioning: https://semver.org/\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :alt: Black code style\n   :target: https://black.readthedocs.io/\n.. |latest-version| image:: https://img.shields.io/pypi/v/cerberus.svg\n   :alt: Latest version on PyPI\n   :target: https://pypi.org/project/cerberus\n.. |license| image:: https://img.shields.io/pypi/l/cerberus.svg\n   :alt: Software license\n   :target: https://github.com/pyeve/cerberus/blob/1.3.x/LICENSE\n.. |python-support| image:: https://img.shields.io/pypi/pyversions/cerberus.svg\n   :target: https://pypi.python.org/pypi/cerberus\n   :alt: Python versions\n"
        },
        {
          "name": "UPGRADING.rst",
          "type": "blob",
          "size": 4.0361328125,
          "content": "Upgrading to Cerberus 1.0\n=========================\n\nMajor Additions\n---------------\n\nError Handling\n..............\n\nThe inspection on and representation of errors is thoroughly overhauled and\nallows a more detailed and flexible handling. Make sure you have look on\n:doc:`errors`.\n\nAlso, :attr:`~cerberus.Validator.errors` (as provided by the default\n:class:`~cerberus.errors.BasicErrorHandler`) values are lists containing\nerror messages, and possibly a ``dict`` as last item containing nested errors.\nPreviously, they were strings if single errors per field occurred; lists\notherwise.\n\n\nDeprecations\n------------\n\n``Validator`` class\n...................\n\ntransparent_schema_rules\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn the past you could override the schema validation by setting\n``transparent_schema_rules`` to ``True``. Now all rules whose implementing\nmethod's docstring contain a schema to validate the arguments for that rule in the\nvalidation schema, are validated.\nTo omit the schema validation for a particular rule, just omit that definition,\nbut consider it a bad practice.\nThe :class:`~cerberus.Validator`-attribute and -initialization-argument\n``transparent_schema_rules`` are removed without replacement.\n\nvalidate_update\n~~~~~~~~~~~~~~~\n\nThe method ``validate_update`` has been removed from\n:class:`~cerberus.Validator`. Instead use :meth:`~cerberus.Validator.validate`\nwith the keyword-argument ``update`` set to ``True``.\n\n\nRules\n.....\n\nitems (for mappings)\n~~~~~~~~~~~~~~~~~~~~\n\nThe usage of the ``items``-rule is restricted to sequences.\nIf you still had schemas that used that rule to validate\n:term:`mappings <mapping>`, just rename these instances to ``schema``\n(:ref:`docs <schema_dict-rule>`).\n\nkeyschema & valueschema\n~~~~~~~~~~~~~~~~~~~~~~~\n\nTo reflect the common terms in the Pythoniverse [#]_, the rule for validating\nall *values* of a :term:`mapping` was renamed from ``keyschema`` to\n``valueschema``. Furthermore a rule was implemented to validate all *keys*,\nintroduced as ``propertyschema``, now renamed to ``keyschema``. This means code\nusing prior versions of cerberus would not break, but bring up wrong results!\n\nTo update your code you may adapt cerberus' iteration:\n\n  1. Rename ``keyschema`` to ``valueschema`` in your schemas. (``0.9``)\n  2. Rename ``propertyschema`` to ``keyschema`` in your schemas. (``1.0``)\n\nNote that ``propertyschema`` will *not* be handled as an alias like\n ``keyschema`` was in the ``0.9``-branch.\n\n\nCustom validators\n.................\n\nData types\n~~~~~~~~~~\n\nSince the ``type``-rule allowed multiple arguments cerberus' type validation\ncode was somewhat cumbersome as it had to deal with the circumstance that each\ntype checking method would file an error though another one may not - and thus\npositively validate the constraint as a whole.\nThe refactoring of the error handling allows cerberus' type validation to be\nmuch more lightweight and to formulate the corresponding methods in a simpler\nway.\n\nPreviously such a method would test what a value *is not* and submit an error.\nNow a method tests what a value *is* to be expected and returns ``True`` in\nthat case.\n\nThis is the most critical part of updating your code, but still easy when your\nhead is clear. Of course your code is well tested. It's essentially these\nthree steps. Search, Replace and Regex may come at your service.\n\n  1. Remove the second method's argument (probably named ``field``).\n  2. Invert the logic of the conditional clauses where is tested what a value\n     is not / has not.\n  3. Replace calls to ``self._error`` below such clauses with\n     ``return True``.\n\nA method doesn't need to return ``False`` or any value when expected criteria\nare not met.\n\nHere's the change from the :ref:`documentation <new-types>` example.\n\npre-1.0:\n\n.. code-block:: python\n\n     def _validate_type_objectid(self, field, value):\n         if not re.match('[a-f0-9]{24}', value):\n             self._error(field, errors.BAD_TYPE)\n\n1.0:\n\n.. code-block:: python\n\n     def _validate_type_objectid(self, value):\n         if re.match('[a-f0-9]{24}', value):\n             return True\n\n\n\n.. [#] compare :term:`dictionary`\n"
        },
        {
          "name": "artwork",
          "type": "tree",
          "content": null
        },
        {
          "name": "cerberus",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.75,
          "content": "[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"Cerberus\"\nversion = \"1.3.7\"\ndescription = \"\"\"\\\nLightweight, extensible schema and data validation tool for Python\\\ndictionaries.\\\n\"\"\"\nauthors = [\n    {name = \"Nicola Iarocci\", email = \"nicola@nicolaiarocci.com\"},\n]\nmaintainers = [\n    {name = \"Frank Sachsenheim\", email = \"funkyfuture@riseup.net\"},\n]\nlicense = {file = \"LICENSE\"}\nreadme = \"README.rst\"\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Developers\",\n    \"Natural Language :: English\",\n    \"License :: OSI Approved :: ISC License (ISCL)\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n    \"Programming Language :: Python :: Implementation :: CPython\",\n    \"Programming Language :: Python :: Implementation :: PyPy\",\n]\nkeywords = [\n    \"validation\",\n    \"schema\",\n    \"dictionaries\",\n    \"documents\",\n    \"normalization\"\n]\nrequires-python = \">=3.7\"\ndependencies = [\"importlib-metadata; python_version < '3.8'\"]\n\n[project.urls]\nDocumentation = \"http://docs.python-cerberus.org\"\nRepository = \"https://github.com/pyeve/cerberus\"\n\n\n[tool.black]\nsafe = true\nskip-string-normalization = true\n\n\n[tool.pytest.ini_options]\nfilterwarnings = [\n    \"error\"\n]\n\n\n[tool.setuptools]\ninclude-package-data = false\n\n[tool.setuptools.packages.find]\ninclude = [\"cerberus\"]\nexclude = [\"*.benchmarks\", \"*.tests\"]\n"
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.521484375,
          "content": "[tox]\nenvlist=py37,py38,py39,py310,py311,py312,pypy3,doclinks,doctest,linting\n\n[testenv]\ndeps=pytest\ncommands=pytest cerberus/tests\n\n[testenv:doclinks]\ndeps=-rdocs/requirements.txt\nallowlist_externals=make\nchangedir=docs\ncommands=make linkcheck\n\n[testenv:doctest]\ndeps=PyYAML\n     -rdocs/requirements.txt\nallowlist_externals=make\nchangedir=docs\ncommands=make doctest\n\n[testenv:linting]\nskipsdist=True\ndeps=pre-commit\ncommands=pre-commit run --config .linting-config.yaml --all-files\n\n[flake8]\nmax-line-length=88\nignore=E203,W503,W605\n"
        }
      ]
    }
  ]
}