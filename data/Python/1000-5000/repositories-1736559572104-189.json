{
  "metadata": {
    "timestamp": 1736559572104,
    "page": 189,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cyclotruc/gitingest",
      "stars": 4527,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.314453125,
          "content": "# Git\n.git\n.gitignore\n\n# Python\n__pycache__\n*.pyc\n*.pyo\n*.pyd\n.Python\nenv\npip-log.txt\npip-delete-this-directory.txt\n.tox\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.log\n\n# Virtual environment\nvenv\n.env\n.venv\nENV\n\n# IDE\n.idea\n.vscode\n*.swp\n*.swo\n\n# Project specific\ndocs/\ntests/\n*.md\nLICENSE\nsetup.py\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.2109375,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\ntmp/*\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control\n.pdm.toml\n.pdm-python\n.pdm-build/\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n.python-version\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n.vscode/settings.json\n.DS_Store\n\n# Project specific\nhistory.txt\ncleanup.py\nCaddyfile\n\n# ignore default output directory\ntmp/*\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 3.9208984375,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      # Files\n      - id: check-added-large-files\n        description: \"Prevent large files from being committed.\"\n        args: [\"--maxkb=10000\"]\n      - id: check-case-conflict\n        description: \"Check for files that would conflict in case-insensitive filesystems.\"\n      - id: fix-byte-order-marker\n        description: \"Remove utf-8 byte order marker.\"\n      - id: mixed-line-ending\n        description: \"Replace mixed line ending.\"\n\n      # Links\n      - id: destroyed-symlinks\n        description: \"Detect symlinks which are changed to regular files with a content of a path which that symlink was pointing to.\"\n\n      # File files for parseable syntax: python\n      - id: check-ast\n\n      # File and line endings\n      - id: end-of-file-fixer\n        description: \"Ensure that a file is either empty, or ends with one newline.\"\n      - id: trailing-whitespace\n        description: \"Trim trailing whitespace.\"\n\n      # Python\n      - id: check-docstring-first\n        description: \"Check a common error of defining a docstring after code.\"\n      - id: requirements-txt-fixer\n        description: \"Sort entries in requirements.txt.\"\n\n  - repo: https://github.com/MarcoGorelli/absolufy-imports\n    rev: v0.3.1\n    hooks:\n      - id: absolufy-imports\n        description: \"Automatically convert relative imports to absolute. (Use `args: [--never]` to revert.)\"\n\n  - repo: https://github.com/psf/black\n    rev: 24.10.0\n    hooks:\n      - id: black\n\n  - repo: https://github.com/asottile/pyupgrade\n    rev: v3.19.1\n    hooks:\n      - id: pyupgrade\n        description: \"Automatically upgrade syntax for newer versions.\"\n        args: [--py3-plus, --py36-plus, --py38-plus, --py39-plus, --py310-plus]\n\n  - repo: https://github.com/pre-commit/pygrep-hooks\n    rev: v1.10.0\n    hooks:\n      - id: python-check-blanket-noqa\n        description: \"Enforce that `noqa` annotations always occur with specific codes. Sample annotations: `# noqa: F401`, `# noqa: F401,W203`.\"\n      - id: python-check-blanket-type-ignore\n        description: \"Enforce that `# type: ignore` annotations always occur with specific codes. Sample annotations: `# type: ignore[attr-defined]`, `# type: ignore[attr-defined, name-defined]`.\"\n      - id: python-use-type-annotations\n        description: \"Enforce that python3.6+ type annotations are used instead of type comments.\"\n\n  - repo: https://github.com/PyCQA/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n        description: \"Sort imports alphabetically, and automatically separated into sections and by type.\"\n\n\n  - repo: https://github.com/djlint/djLint\n    rev: v1.36.4\n    hooks:\n      - id: djlint-reformat-jinja\n\n  - repo: https://github.com/igorshubovych/markdownlint-cli\n    rev: v0.43.0\n    hooks:\n      - id: markdownlint\n        description: \"Lint markdown files.\"\n        args: [\"--disable=line-length\"]\n\n  - repo: https://github.com/terrencepreilly/darglint\n    rev: v1.8.1\n    hooks:\n      - id: darglint\n        name: darglint for source\n        args: [--docstring-style=numpy]\n        files: ^src/\n\n  - repo: https://github.com/pycqa/pylint\n    rev: v3.3.3\n    hooks:\n      - id: pylint\n        name: pylint for source\n        files: ^src/\n        additional_dependencies:\n          [\n            click,\n            fastapi-analytics,\n            pytest-asyncio,\n            python-dotenv,\n            slowapi,\n            starlette,\n            tiktoken,\n            uvicorn,\n          ]\n      - id: pylint\n        name: pylint for tests\n        files: ^tests/\n        args:\n          - --rcfile=tests/.pylintrc\n        additional_dependencies:\n          [\n            click,\n            fastapi-analytics,\n            pytest,\n            pytest-asyncio,\n            python-dotenv,\n            slowapi,\n            starlette,\n            tiktoken,\n            uvicorn,\n          ]\n\n  - repo: meta\n    hooks:\n      - id: check-hooks-apply\n      - id: check-useless-excludes\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.083984375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n<romain@coderamp.io>.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org),\nversion 2.0, available at\n<https://www.contributor-covenant.org/version/2/0/code_of_conduct.html>.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\nFor answers to common questions about this code of conduct, see the FAQ at\n<https://www.contributor-covenant.org/faq>. Translations are available at\n<https://www.contributor-covenant.org/translations>.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.0703125,
          "content": "# Build stage\nFROM python:3.12-slim AS builder\n\nWORKDIR /build\n\n# Copy requirements first to leverage Docker cache\nCOPY requirements.txt .\n\n# Install build dependencies and Python packages\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends gcc python3-dev \\\n    && pip install --no-cache-dir --upgrade pip \\\n    && pip install --no-cache-dir --timeout 1000 -r requirements.txt \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Runtime stage\nFROM python:3.12-slim\n\n# Set Python environment variables\nENV PYTHONUNBUFFERED=1\nENV PYTHONDONTWRITEBYTECODE=1\n\n# Install git\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends git curl\\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\n# Create a non-root user\nRUN useradd -m -u 1000 appuser\n\nCOPY --from=builder /usr/local/lib/python3.12/site-packages/ /usr/local/lib/python3.12/site-packages/\nCOPY src/ ./\n\n# Change ownership of the application files\nRUN chown -R appuser:appuser /app\n\n# Switch to non-root user\nUSER appuser\n\nEXPOSE 8000\n\nCMD [\"python\", \"-m\", \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "MIT License\n\nCopyright (c) 2024 Romain Courtois\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.609375,
          "content": "# Gitingest\n\n[![Image](./docs/frontpage.png \"Gitingest main page\")](https://gitingest.com)\n\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/cyclotruc/gitingest/blob/main/LICENSE)\n[![PyPI version](https://badge.fury.io/py/gitingest.svg)](https://badge.fury.io/py/gitingest)\n[![GitHub stars](https://img.shields.io/github/stars/cyclotruc/gitingest?style=social.svg)](https://github.com/cyclotruc/gitingest)\n[![Downloads](https://pepy.tech/badge/gitingest)](https://pepy.tech/project/gitingest)\n\n[![Discord](https://dcbadge.limes.pink/api/server/https://discord.com/invite/zerRaGK9EC)](https://discord.com/invite/zerRaGK9EC)\n\nTurn any Git repository into a prompt-friendly text ingest for LLMs.\n\nYou can also replace `hub` with `ingest` in any GitHub URL to access the coresponding digest\n\n[gitingest.com](https://gitingest.com/) · [Chrome Extension](https://chromewebstore.google.com/detail/adfjahbijlkjfoicpjkhjicpjpjfaood) · [Firefox Add-on](https://addons.mozilla.org/firefox/addon/gitingest/)\n\n## 🚀 Features\n\n- **Easy code context**: Get a text digest from a git repository URL or a directory\n- **Smart Formatting**: Optimized output format for LLM prompts\n- **Statistics about**:\n  - File and directory structure\n  - Size of the extract\n  - Token count\n- **CLI tool**: Run it as a shell command (currently on Linux only)\n- **Python package**: Import it in your code\n\n## 📦 Installation\n\n``` bash\npip install gitingest\n```\n\n## 🧩 Browser Extension Usage\n\n<!-- markdownlint-disable MD033 -->\n<a href=\"https://chromewebstore.google.com/detail/adfjahbijlkjfoicpjkhjicpjpjfaood\" target=\"_blank\" title=\"Get Gitingest Extension from Chrome Web Store\"><img height=\"48\" src=\"https://github.com/user-attachments/assets/20a6e44b-fd46-4e6c-8ea6-aad436035753\" alt=\"Available in the Chrome Web Store\" /></a>\n<a href=\"https://addons.mozilla.org/firefox/addon/gitingest/\" target=\"_blank\" title=\"Get Gitingest Extension from Firefox Add-ons\"><img height=\"48\" src=\"https://github.com/user-attachments/assets/c0e99e6b-97cf-4af2-9737-099db7d3538b\" alt=\"Get The Add-on for Firefox\" /></a>\n<a href=\"https://microsoftedge.microsoft.com/addons/detail/nfobhllgcekbmpifkjlopfdfdmljmipf\" target=\"_blank\" title=\"Get Gitingest Extension from Firefox Add-ons\"><img height=\"48\" src=\"https://github.com/user-attachments/assets/204157eb-4cae-4c0e-b2cb-db514419fd9e\" alt=\"Get from the Edge Add-ons\" /></a>\n<!-- markdownlint-enable MD033 -->\n\nThe extension is open source at [lcandy2/gitingest-extension](https://github.com/lcandy2/gitingest-extension).\nIssues and feature requests are welcome to the repo.\n\n## 💡 Command line usage\n\nThe `gitingest` command line tool allows you to analyze codebases and create a text dump of their contents.\n\n```bash\n# Basic usage\ngitingest /path/to/directory\n\n# From URL\ngitingest https://github.com/cyclotruc/gitingest\n\n# See more options\ngitingest --help\n```\n\nThis will write the digest in a text file (default `digest.txt`) in your current working directory.\n\n## 🐛 Python package usage\n\n```python\nfrom gitingest import ingest\n\nsummary, tree, content = ingest(\"path/to/directory\")\n\n# or from URL\nsummary, tree, content = ingest(\"https://github.com/cyclotruc/gitingest\")\n```\n\nBy default, this won't write a file but can be enabled with the `output` argument\n\n## 🌐 Self-host\n\n1. Build the image:\n\n   ``` bash\n   docker build -t gitingest .\n   ```\n\n2. Run the container:\n\n   ``` bash\n   docker run -d --name gitingest -p 8000:8000 gitingest\n   ```\n\nThe application will be available at `http://localhost:8000`\n\nIf you are hosting it on a domain, you can specify the allowed hostnames via env variable `ALLOWED_HOSTS`.\n\n   ```bash\n   #Default: \"gitingest.com,*.gitingest.com,localhost, 127.0.0.1\".\n   ALLOWED_HOSTS=\"example.com, localhost, 127.0.0.1\"\n   ```\n\n## 🛠️ Stack\n\n- [Tailwind CSS](https://tailwindcss.com/) - Frontend\n- [FastAPI](https://github.com/fastapi/fastapi) - Backend framework\n- [Jinja2](https://jinja.palletsprojects.com/) - HTML templating\n- [tiktoken](https://github.com/openai/tiktoken) - Token estimation\n- [apianalytics.dev](https://www.apianalytics.dev/) - Simple Analytics\n\n### Looking for a javascript/node package?\n\nCheck out the NPM alternative 📦 Repomix: <https://github.com/yamadashy/repomix>\n\n## ✔️ Contributing to Gitingest\n\nGitingest aims to be friendly for first time contributors, with a simple python and html codebase.\n If you need any help while working with the code, reach out to us on [discord](https://discord.com/invite/zerRaGK9EC)\n\n### Ways to help (non-technical)\n\n- Provide your feedback and ideas on Discord\n- Open an issue on GitHub to report a bug / submit a feature request\n- Talk about Gitingest on social media\n\n### How to submit a PR\n\n1. Fork the repository & clone it locally\n2. Setup the dev environment (see Development section bellow)\n3. Run unit tests with `pytest`\n4. Commit your changes and run `pre-commit`\n5. Open a pull request on Github for review and feedback\n6. (Optionnal) Invite project maintainer to your branch for easier collaboration\n\n## 🔧 Development\n\n### Run web UI locally\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/cyclotruc/gitingest.git\n   cd gitingest\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   pip install -r requirements-dev.txt\n   python -m venv .venv\n   source .venv/bin/activate\n   pre-commit install\n   ```\n\n3. Run the application:\n\n   ```bash\n   cd src\n   uvicorn main:app --reload\n   ```\n\n4. Run unit tests:\n\n   ```bash\n   pytest\n   ```\n\nThe application should be available at `http://localhost:8000`\n\n### Working on the CLI\n\n1. Install the package in dev mode:\n\n   ```bash\n   pip install -e .\n   ```\n\n2. Run the CLI:\n\n   ```bash\n   gitingest --help\n   ```\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.267578125,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nIf you have discovered a vulnerability inside the project, report it privately at <romain@coderamp.io>. This way the maintainer can work on a proper fix without disclosing the problem to the public before it has been solved.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.78125,
          "content": "[project]\nname = \"gitingest\"\nversion = \"0.1.2\"\ndescription=\"CLI tool to analyze and create text dumps of codebases for LLMs\"\nreadme = {file = \"README.md\", content-type = \"text/markdown\" }\nrequires-python = \">= 3.10\"\ndependencies = [\n    \"click>=8.0.0\",\n    \"fastapi-analytics\",\n    \"fastapi[standard]\",\n    \"python-dotenv\",\n    \"slowapi\",\n    \"starlette\",\n    \"tiktoken\",\n    \"uvicorn\",\n]\nlicense = {file = \"LICENSE\"}\nauthors = [{name = \"Romain Courtois\", email = \"romain@coderamp.io\"}]\nclassifiers=[\n    \"Development Status :: 3 - Alpha\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n]\n\n[project.scripts]\ngitingest = \"gitingest.cli:main\"\n\n[project.urls]\nhomepage = \"https://gitingest.com\"\ngithub = \"https://github.com/cyclotruc/gitingest\"\n\n[build-system]\nrequires = [\"setuptools>=61.0\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.setuptools]\npackages = {find = {where = [\"src\"]}}\ninclude-package-data = true\n\n# Linting configuration\n[tool.pylint.format]\nmax-line-length = 119\n\n[tool.pylint.'MESSAGES CONTROL']\ndisable = [\n    \"too-many-arguments\",\n    \"too-many-positional-arguments\",\n    \"too-many-locals\",\n    \"too-few-public-methods\",\n    \"broad-exception-caught\",\n    \"duplicate-code\",\n]\n\n[tool.pycln]\nall = true\n\n[tool.isort]\nprofile = \"black\"\nline_length = 119\nremove_redundant_aliases = true\nfloat_to_top = true\norder_by_type = true\nfilter_files = true\n\n[tool.black]\nline-length = 119\n\n# Test configuration\n[tool.pytest.ini_options]\npythonpath = [\"src\"]\ntestpaths = [\"tests/\"]\npython_files = \"test_*.py\"\nasyncio_mode = \"auto\"\npython_classes = \"Test*\"\npython_functions = \"test_*\"\n"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.0712890625,
          "content": "-r requirements.txt\nblack\ndjlint\npre-commit\npylint\npytest\npytest-asyncio\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.095703125,
          "content": "click>=8.0.0\nfastapi-analytics\nfastapi[standard]\npython-dotenv\nslowapi\nstarlette\ntiktoken\nuvicorn\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.8974609375,
          "content": "from setuptools import find_packages, setup\n\nsetup(\n    name=\"gitingest\",\n    version=\"0.1.2\",\n    packages=find_packages(where=\"src\"),\n    package_dir={\"\": \"src\"},\n    include_package_data=True,\n    install_requires=[\n        \"click>=8.0.0\",\n        \"tiktoken\",\n    ],\n    entry_points={\n        \"console_scripts\": [\n            \"gitingest=gitingest.cli:main\",\n        ],\n    },\n    python_requires=\">=3.6\",\n    author=\"Romain Courtois\",\n    author_email=\"romain@coderamp.io\",\n    description=\"CLI tool to analyze and create text dumps of codebases for LLMs\",\n    long_description=open(\"README.md\").read(),\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/cyclotruc/gitingest\",\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 3\",\n    ],\n)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}