{
  "metadata": {
    "timestamp": 1736559773452,
    "page": 490,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Significant-Gravitas/Auto-GPT-Plugins",
      "stars": 3895,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.5146484375,
          "content": "# Top-most EditorConfig file\nroot = true\n\n# Set default charset\n[*]\ncharset = utf-8\n\n# Use black formatter for python files\n[*.py]\nprofile = black\n\n# Set defaults for windows and batch filess\n[*.bat]\nend_of_line = crlf\nindent_style = space\nindent_size = 2\n\n# Set defaults for shell scripts\n[*.sh]\nend_of_line = lf\ntrim_trailing_whitespace = true\ninsert_final_newline = false\n\n# Set defaults for Makefiles\n[Makefile]\nend_of_line = lf\nindent_style = tab\nindent_size = 4\ntrim_trailing_whitespace = true\ninsert_final_newline = true"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.15234375,
          "content": "[flake8]\nmax-line-length = 88\nextend-ignore = E203\nexclude =\n    .tox,\n    __pycache__,\n    *.pyc,\n    .env\n    venv/*\n    .venv/*\n    reports/*\n    dist/*\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.8681640625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# Dev Environments\n.idea\n.devcontainer/devcontainer.json\n.vscode/settings.json\n\n# Mac OS Files\n**/.DS_Store\n/.vs\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.869140625,
          "content": "repos:\n  - repo: https://github.com/sourcery-ai/sourcery\n    rev: v1.1.0 # Get the latest tag from https://github.com/sourcery-ai/sourcery/tags\n    hooks:\n      - id: sourcery\n\n  - repo: git://github.com/pre-commit/pre-commit-hooks\n    rev: v0.9.2\n    hooks:\n      - id: check-added-large-files\n        args: [\"--maxkb=500\"]\n      - id: check-byte-order-marker\n      - id: check-case-conflict\n      - id: check-merge-conflict\n      - id: check-symlinks\n      - id: debug-statements\n\n  - repo: local\n    hooks:\n      - id: isort\n        name: isort-local\n        entry: isort\n        language: python\n        types: [python]\n        exclude: .+/(dist|.venv|venv|build)/.+\n        pass_filenames: true\n      - id: black\n        name: black-local\n        entry: black\n        language: python\n        types: [python]\n        exclude: .+/(dist|.venv|venv|build)/.+\n        pass_filenames: true\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0517578125,
          "content": "MIT License\n\nCopyright (c) 2023 Toran Bruce Richards\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.3681640625,
          "content": "ifeq ($(OS),Windows_NT)\n    os := win\n    SCRIPT_EXT := .bat\n    SHELL_CMD := cmd /C\nelse\n    os := nix\n    SCRIPT_EXT := .sh\n    SHELL_CMD := bash\nendif\n\nhelpers = @$(SHELL_CMD) helpers$(SCRIPT_EXT) $1\n\nclean: helpers$(SCRIPT_EXT)\n\t$(call helpers,clean)\n\nqa: helpers$(SCRIPT_EXT)\n\t$(call helpers,qa)\n\nstyle: helpers$(SCRIPT_EXT)\n\t$(call helpers,style)\n\n.PHONY: clean qa style\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.14453125,
          "content": "# Auto-GPT-Plugins\n\n> ‚ö†Ô∏èüíÄ **WARNING** üíÄ‚ö†Ô∏è:\n> Always examine the code of any plugin you use thoroughly, as plugins can execute any Python code, leading to potential malicious activities such as stealing your API keys.\n\n> ‚öôÔ∏è **WORK IN PROGRESS** ‚öôÔ∏è:\n> The plugin API is still being refined. If you are developing a plugin, expect changes in the upcoming versions.\n\n## New in Auto-GPT 0.4.1\n- Unzipped plugins are now supported! You can now clone or download plugins directly from GitHub and place them in the `plugins` directory without zipping, as long as they are in the correct (NEW) format.\n- Plugins settings have been moved out of the `.env` file to a new `plugins_config.yaml` file in the root directory of Auto-GPT.\n- `ALLOWLISTED_PLUGINS` and `DENYLISTED_PLUGINS` `.env` settings are deprecated and will be removed in a future release.\n- Plugins must now be explicitly enabled in plugins. See the [installation](#installation) section for more details.\n- The plugin format has changed. For now the old zip format is still supported, but will be removed in a future release. See the [plugin format](#plugin-format) section for more details.\n\n### Note: The Auto-GPT-Plugins repo must still be Zipped\n\n> The core Auto-GPT Plugins are still in the old format, and will need to be zipped as shown in the instructions below. **THEY WILL NOT WORK UNZIPPED**. This will be fixed in a future release.\n\n## Installation\n\n**_‚ö†Ô∏èThis is a work in progress‚ö†Ô∏è_**\n\nHere are the steps to configure Auto-GPT Plugins. \n\n1. **Install Auto-GPT**\n\n   If you haven't done so, follow the installation instructions given by [Auto-GPT](https://github.com/Significant-Gravitas/Auto-GPT) to install it.\n\n1. **Download the plugins folder from the `root` of `Auto-GPT` directory**\n\n    To download it directly from your Auto-GPT directory, you can run this command on Linux or MacOS:\n\n    ```bash\n    curl -L -o ./plugins/Auto-GPT-Plugins.zip https://github.com/Significant-Gravitas/Auto-GPT-Plugins/archive/refs/heads/master.zip\n    ```\n\n    Or in PowerShell:\n\n    ```pwsh\n    Invoke-WebRequest -Uri \"https://github.com/Significant-Gravitas/Auto-GPT-Plugins/archive/refs/heads/master.zip\"     -OutFile \"./plugins/Auto-GPT-Plugins.zip\"\n    ```\n\n1. **Execute the dependency install script for plugins**\n\n    This can be run via:\n\n    Linux or MacOS:\n\n    ```bash\n    ./run.sh --install-plugin-deps\n    ```\n\n   Windows:\n\n    ```pwsh\n   .\\run.bat --install-plugin-deps\n    ```\n\n    Or directly via the CLI:\n\n    ```bash\n    python -m autogpt --install-plugin-deps\n    ````\n\n1. **Enable the plugins** \n\n    To activate a plugin, the user should create or edit the `plugins_config.yaml` file located in the root directory of Auto-GPT. All plugin options can be configured in this file. \n    \n    For example, if the `astro` plugin needs to be enabled, the following line should be added to the `plugins_config.yaml` file:\n    ```yaml\n    AutoGPTSpacePlugin:\n        config: {}\n        enabled: true\n    ```\n\n1. **Alernate option to enable the plugins** (May cease to function at any point as the .env support for plugins may change)\n   \n   In your .env file add the lines below. If your plugins_config.yaml does not exist it should generate correctly when you run Auto-GPT based on what you populate below.\n   ```\n   ################################################################################\n   ### ALLOWLISTED PLUGINS\n   ################################################################################\n\n   #ALLOWLISTED_PLUGINS - Sets the listed plugins that are allowed (Example: plugin1,plugin2,plugin3)\n   ALLOWLISTED_PLUGINS=AutoGPTReddit\n\n   DENYLISTED_PLUGINS=AutoGPTBluesky,AutoGPTTelegram,AutoGPTEmailPlugin,AutoGPTNewsSearch,PlannerPlugin,AutoGPTSceneXPlugin,AutoGPTTwitter,AutoGPTWikipediaSearch,AutoGPTWolframAlphaSearch,AutoGPTSpacePlugin,AutoGPTBaiduSearch,AutoGPTBingSearch\n   ```\n   \n## Plugins\n\nThere are two categories of plugins: **first party** and **third party**.\n\n **First-party plugins** are a curated list of widely-used plugins, and are included in this repo. They and are installed by default when the plugin platform is installed. See the [First Party Plugins](#first-party-plugins) section below for a comprehensive list.\n\n **Third-party plugins** need to be added individually. They may be useful for your specific needs. See the [Third Party Plugins](#third-party-plugins) section below for a short list of third-party plugins, and for information on how to add your plugin. Note: The Auto-GPT community has developed numerous third-party plugins and this list doesn't include them all. See the [Community-contributed plugins directory](#community-contributed-plugins-directory) section below for a more comprehensive list.\n\n### Community contributed plugins directory\n\nCommunity member and contributor, **[@dylanintech](https://github.com/dylanintech/)**, maintains a [**growing directory**](https://autoplugins.vercel.app/) of **Auto-GPT plugins and their contributors. To get your plugin listed in that directory, add your info to the `data` array in `plugins.tsx` of [his repo](https://github.com/dylanintech/autoplugins) and submit a PR. \n\n### First Party Plugins\n\nYou can see the first-party plugins below. These are included in this Auto-GPT-Plugins repo and are installed by default when the plugin platform is installed.\n\n| Plugin       | Description     | Location |\n|--------------|-----------|--------|\n| Astro Info   | This gives Auto-GPT info about astronauts.                                                           | [autogpt_plugins/astro](https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/astro)           |\n| API Tools        | This allows Auto-GPT to make API calls of various kinds.                                                           | [autogpt_plugins/api_tools](https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/api_tools)           |\n| Baidu Search |  This search plugin integrates Baidu search engines into Auto-GPT. | [autogpt_plugins/baidu_search](https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/baidu_search)|\n| Bing Search      | This search plugin integrates Bing search engines into Auto-GPT.                                                  | [autogpt_plugins/bing_search](https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/bing_search)       |\n| Bluesky | Enables Auto-GPT to retrieve posts from Bluesky and create new posts. | [autogpt_plugins/bluesky](https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/bluesky)|\n| Email            | Revolutionize email management with the Auto-GPT Email Plugin, leveraging AI to automate drafting and intelligent replies. | [autogpt_plugins/email](https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/email)                 |\n| News Search      | This search plugin integrates News Articles searches, using the NewsAPI aggregator into Auto-GPT.                 | [autogpt_plugins/news_search](https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/news_search)   |\n| Planner          | Simple Task Planner Module for Auto-GPT  | [autogpt_plugins/planner](https://github.com/Significant-Gravitas/Auto-GPT-Plugins/blob/master/src/autogpt_plugins/planner/) |\n| Random Values    | Enable Auto-GPT to generate various random numbers and strings.                                                    | [autogpt_plugins/random_values](https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/random_values) |\n| SceneX           | Explore image storytelling beyond pixels with the Auto-GPT SceneX Plugin.                                        | [autogpt_plugins/scenex](https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/scenex)               |\n| SerpApi          | Search on a broad range of search engines supported by SerpApi and get rich information from the results.        | [autogpt_plugins/serpapi](https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/serpapi)|\n| Telegram |  A smoothly working Telegram bot that gives you all the messages you would normally get through the Terminal. | [autogpt_plugins/telegram](https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/telegram) |\n| Twitter          | Auto-GPT is capable of retrieving Twitter posts and other related content by accessing the Twitter platform via the v1.1 API using Tweepy.               | [autogpt_plugins/twitter](https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/twitter)           |\n| Wikipedia Search | This allows Auto-GPT to use Wikipedia directly.                                                                    | [autogpt_plugins/wikipedia_search](https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/wikipedia_search) |\n| WolframAlpha Search | This allows AutoGPT to use WolframAlpha directly.                                                                                         | [autogpt_plugins/wolframalpha_search](https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/wolframalpha_search)|\n\n\n### Third Party Plugins\n\nThird-party plugins are created by contributors and are not included in this repository. For more information about these plugins, please visit their respective GitHub pages.\n\nHere is a non-comprehensive list of third-party plugins. If you have a plugin you'd like to add to this list, please submit a PR.\n\n| Plugin       | Description     | Repository |\n|--------------|-----------------|-------------|\n| Alpaca-Trading | Trade stocks and crypto, paper or live with Auto-GPT | [danikhan632/Auto-GPT-AlpacaTrader-Plugin](https://github.com/danikhan632/Auto-GPT-AlpacaTrader-Plugin)|\n| AutoGPTReddit | Reddit Access | [NeonN3mesis/AutoGPTReddit](https://github.com/NeonN3mesis/AutoGPTReddit)|\n| AutoGPT User Input Request | Allow Auto-GPT to specifically request user input in continous mode | [HFrovinJensen/Auto-GPT-User-Input-Plugin](https://github.com/HFrovinJensen/Auto-GPT-User-Input-Plugin)|\n| BingAI | Enable Auto-GPT to fetch information via BingAI, saving time, API requests while maintaining accuracy. This does not remove the need for OpenAI API keys | [gravelBridge/AutoGPT-BingAI](https://github.com/gravelBridge/AutoGPT-BingAI)|\n| Crypto | Trade crypto with Auto-GPT | [isaiahbjork/Auto-GPT-Crypto-Plugin](https://github.com/isaiahbjork/Auto-GPT-Crypto-Plugin)|\n| Discord | Interact with your Auto-GPT instance through Discord | [gravelBridge/AutoGPT-Discord](https://github.com/gravelBridge/AutoGPT-Discord)|\n| Dolly AutoGPT Cloner | A way to compose & run multiple Auto-GPT processes that cooperate, till core has multi-agent support | [pr-0f3t/Auto-GPT-Dolly-Plugin](https://github.com/pr-0f3t/Auto-GPT-Dolly-Plugin)|\n| Google Analytics | Connect your Google Analytics Account to Auto-GPT. | [isaiahbjork/Auto-GPT-Google-Analytics-Plugin](https://github.com/isaiahbjork/Auto-GPT-Google-Analytics-Plugin)|\n| IFTTT webhooks | This plugin allows you to easily integrate IFTTT connectivity using Maker | [AntonioCiolino/AutoGPT-IFTTT](https://github.com/AntonioCiolino/AutoGPT-IFTTT)|\n| iMessage | Send and Get iMessages using Auto-GPT | [danikhan632/Auto-GPT-Messages-Plugin](https://github.com/danikhan632/Auto-GPT-Messages-Plugin)|\n| Instagram | Instagram access | [jpetzke/AutoGPT-Instagram](https://github.com/jpetzke/AutoGPT-Instagram)|\n| Mastodon  | Simple Mastodon plugin to send toots through a Mastodon account | [ppetermann/AutoGPTMastodonPlugin](https://github.com/ppetermann/AutoGPTMastodonPlugin)|\n| MetaTrader | Connect your MetaTrader Account to Auto-GPT. | [isaiahbjork/Auto-GPT-MetaTrader-Plugin](https://github.com/isaiahbjork/Auto-GPT-MetaTrader-Plugin) |\n| Mindware | The App Store for AutoGPT. With one API key, unlock access to a growing list of plugins. | [open-mindware/AutoGPT-Mindware](https://github.com/open-mindware/AutoGPT-Mindware) |\n| Notion      | Notion plugin for Auto-GPT.  | [doutv/Auto-GPT-Notion](https://github.com/doutv/Auto-GPT-Notion) |\n| Slack | This plugin allows to receive commands and send messages to slack channels | [adithya77/Auto-GPT-slack-plugin](https://github.com/adithya77/Auto-GPT-slack-plugin)\n| Spoonacular | Find recipe insiprations using Auto-GPT | [minfenglu/Auto-GPT-Spoonacular-Plugin](https://github.com/minfenglu/Auto-GPT-Spoonacular-Plugin)\n| System Information      | This plugin adds an extra line to the prompt, serving as a hint for the AI to use shell commands likely supported by the current system. By incorporating this plugin, you can ensure that the AI model provides more accurate and system-specific shell commands, improving its overall performance and usefulness. | [hdkiller/Auto-GPT-SystemInfo](https://github.com/hdkiller/Auto-GPT-SystemInfo) |\n| TiDB Serverless   | Connect your TiDB Serverless database to Auto-GPT, enable get query results from database | [pingcap/Auto-GPT-TiDB-Serverless-Plugin](https://github.com/pingcap/Auto-GPT-TiDB-Serverless-Plugin)\n| Todoist-Plugin | Allow Auto-GPT to programatically interact with yor Todoist to create, update, and manage your Todoist | [danikhan632/Auto-GPT-Todoist-Plugin](https://github.com/danikhan632/Auto-GPT-Todoist-Plugin) |\n| Weather | A simple weather plugin wrapping around python-weather | [ppetermann/Auto-GPT-WeatherPlugin](https://github.com/ppetermann/Auto-GPT-WeatherPlugin) |\n| Web-Interaction | Enable Auto-GPT to fully interact with websites! Allows Auto-GPT to click elements, input text, and scroll | [gravelBridge/AutoGPT-Web-Interaction](https://github.com/gravelBridge/AutoGPT-Web-Interaction)|\n| Website-Carbon-Footprint | Take advantage of the Website Carbon Footprint API with Auto-GPT | [arananet/Auto-GPT-Website-Carbon-Footprint](https://github.com/arananet/Auto-GPT-Website-Carbon-Footprint)|\n| WolframAlpha | Access to WolframAlpha to do math and get accurate information | [gravelBridge/AutoGPT-WolframAlpha](https://github.com/gravelBridge/AutoGPT-WolframAlpha)|\n| YouTube   | Various YouTube features including downloading and understanding | [jpetzke/AutoGPT-YouTube](https://github.com/jpetzke/AutoGPT-YouTube) |\n| Zapier webhooks | This plugin allows you to easily integrate Zapier connectivity | [AntonioCiolino/AutoGPT-Zapier](https://github.com/AntonioCiolino/AutoGPT-Zapier)|\n| Project Management | Streamline your Project Management with ease: Jira, Trello, and Google Calendar Made Effortless| [minfenglu/AutoGPT-PM-Plugin](https://github.com/minfenglu/AutoGPT-PM-Plugin)|\n| RabbitMQ | This plugin allows you to communicate with your Auto-GPT instance via microservice.| [tomtom94/AutoGPT-RabbitMQ](https://github.com/tomtom94/AutoGPT-RabbitMQ)|\n\n## Configuration\n\nPlugins must be enabled in `plugins_config.yaml`. \n\nIf you still have `ALLOWLISTED_PLUGINS` and `DENYLISTED_PLUGINS` in your `.env` file, Auto-GPT will use them to create the `plugins_config.yaml` file the first time. \n\nThis file contains a list of plugins to load. The format is as follows:\n\n```yaml\nplugin_a:\n  config:\n    api_key: my-api-key\n  enabled: false\nPluginB:\n  config: {}\n  enabled: true\n\n```\n\nThe various sections are as follows:\n\n- key: The name of the plugin. E.g. `plugin_a` or `PluginB`.\n\n    This is used to load the plugin. It's format depends on whether the plugin is zipped or unzipped.\n    \n    **For zipped plugins**, the key must be the name of the plugin **class**. For example, the `weather` plugin in this repository would `WeatherPlugin`, and in the example above, `PluginB` is most likely a zipped plugin.\n\n    **For unzipped plugins**, the key must be the name of the plugin **directory**. For example, in the example above, the `plugin_a` directory would be loaded as a plugin.\n\n- config: The configuration for the plugin. \n\n    This is passed to the plugin when it is loaded. The format of this field depends on the plugin. This field is optional. Use `{}` if you do not need to pass any configuration to the plugin.\n\n    Note that `plugins_config.yaml` file is only used by Auto-GPT to decide whether to load a plugin. For specific plugin settings, please refer to the documentation provided for each plugin. Plugin developers may still rely on`.env` for other plugin specific settings. We encourage developers to migrate their settings to the `config` field in the new `plugins_config.yaml` file.\n\n- enabled: Determines whether the plugin is loaded. \n\n## Creating a Plugin\n\nCreating a plugin is a rewarding experience! You can choose between first-party or third-party plugins. First-party plugins are included in this repo and are installed by default along with other plugins when the plugin platform is installed. Third-party plugins need to be added individually. Use first-party plugins for plugins you expect others to use and want, and third-party for things specific to you.\n\n## Plugin Format\n\nPlugins must follow a specific structure in order to be found and loaded successfully. The structure depends on whether a plugin is zipped or unzipped.\n\nZipped plugins must subclasses `AutoGPTPluginTemplate`(https://github.com/Significant-Gravitas/Auto-GPT-Plugin-Template), and implement all the methods defined in AutoGPTPluginTemplate.\n\nUnzipped plugins can also subclass `AutoGPTPluginTemplate`, but it is not required. They can implement only the methods they need. However, the name of the plugin's directory is used to load the plugin, so it must be unique within AutoGPT's `plugins` directory.\n\n### First Party Plugins How-To\n\n1. Clone this plugins repo\n1. Follow the structure of the other plugins, implementing the plugin interface as required\n1. Write your tests\n1. Add your name to the [codeowners](.github/CODEOWNERS) file\n1. Add your plugin to the [Readme](README.md)\n1. Add your plugin to the [autogpt-package](https://github.com/kurtosis-tech/autogpt-package/blob/main/plugins.star). You can copy the line of any of the standard plugins and just add another entry in the dictionary. Raise a PR & get it merged\n1. Add your plugin to the [plugin installation integration test](.github/workflows/test-plugin-installation.yml)\n1. Make a PR back to this repo!\n\n### Third Party Plugins How-To\n\n1. Clone [the third party template](https://github.com/Significant-Gravitas/Auto-GPT-Plugin-Template).\n1. Follow the instructions in the [third party template readme](https://github.com/Significant-Gravitas/Auto-GPT-Plugin-Template).\n\n### Migrating Third Party to First Party\n\nWe appreciate your contribution of a plugin to the project!\n\n1. Clone this repository.\n1. Make a folder for your plugin under `src/autogpt_plugins`. Use a simple descriptive name such as `notion`, `twitter`, or `web_ui`.\n1. Add the files from your third-party plugin located at `src/auto_gpt_plugin_template` into the folder you created.\n1. Include your README from your third-party plugin in the folder you created.\n1. Add your plugin to the root README with a description and a link to your plugin-specific README.\n1. Add your plugin's Python package requirements to `requirements.txt`.\n1. Add tests to get your plugin to 80% code coverage.\n1. Add your name to the [codeowners](.github/CODEOWNERS) file.\n1. Add your plugin to the [Readme](README.md).\n1. Submit a pull request back to this repository!\n\n## Get Help\n\nFor more information, visit the [discord](https://discord.gg/autogpt) server.\n"
        },
        {
          "name": "helpers.sh",
          "type": "blob",
          "size": 0.8505859375,
          "content": "#!/usr/bin/env bash\n\nclean() {\n  # Remove build artifacts and temporary files\n  rm -rf build 2>/dev/null || true\n  rm -rf dist 2>/dev/null || true\n  rm -rf __pycache__ 2>/dev/null || true\n  rm -rf *.egg-info 2>/dev/null || true\n  rm -rf **/*.egg-info 2>/dev/null || true\n  rm -rf *.pyc 2>/dev/null || true\n  rm -rf **/*.pyc 2>/dev/null || true\n  rm -rf reports 2>/dev/null || true\n}\n\nqa() {\n  # Run static analysis tools\n  flake8 .\n  python run_pylint.py\n}\n\nstyle() {\n  # Format code\n  isort .\n  black --exclude=\".*\\/*(dist|venv|.venv|test-results)\\/*.*\" .\n}\n\nif [ \"$1\" = \"clean\" ]; then\n  echo Removing build artifacts and temporary files...\n  clean\nelif [ \"$1\" = \"qa\" ]; then\n  echo Running static analysis tools...\n  qa\nelif [ \"$1\" = \"style\" ]; then\n  echo Running code formatters...\n  style\nelse\n  echo \"Usage: $0 [clean|qa|style]\"\n  exit 1\nfi\n\necho Done!\necho\nexit 0"
        },
        {
          "name": "pylintrc",
          "type": "blob",
          "size": 13.6953125,
          "content": "# This Pylint rcfile contains a best-effort configuration to uphold the\n# best-practices and style described in the Google Python style guide:\n#   https://google.github.io/styleguide/pyguide.html\n#\n# Its canonical open-source location is:\n#   https://google.github.io/styleguide/pylintrc\n\n[MASTER]\n\n# Files or directories to be skipped. They should be base names, not paths.\nignore=\n\n# Files or directories matching the regex patterns are skipped. The regex\n# matches against base names, not paths.\nignore-patterns=\n\n# Pickle collected data for later comparisons.\npersistent=no\n\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n# Use multiple processes to speed up Pylint.\njobs=4\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=no\n\n\n[MESSAGES CONTROL]\n\nignore=*.pyc\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED\nconfidence=\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once). See also the \"--disable\" option for examples.\n#enable=\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once).You can also use \"--disable=all\" to\n# disable everything first and then reenable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use\"--disable=all --enable=classes\n# --disable=W\"\ndisable=abstract-method,\n        parse-error,\n        apply-builtin,\n        arguments-differ,\n        attribute-defined-outside-init,\n        backtick,\n        bad-option-value,\n        basestring-builtin,\n        buffer-builtin,\n        c-extension-no-member,\n        consider-using-enumerate,\n        cmp-builtin,\n        cmp-method,\n        coerce-builtin,\n        coerce-method,\n        delslice-method,\n        div-method,\n        duplicate-code,\n        eq-without-hash,\n        execfile-builtin,\n        file-builtin,\n        filter-builtin-not-iterating,\n        fixme,\n        getslice-method,\n        global-statement,\n        hex-method,\n        idiv-method,\n        implicit-str-concat,\n        import-error,\n        import-self,\n        import-star-module-level,\n        inconsistent-return-statements,\n        input-builtin,\n        intern-builtin,\n        invalid-str-codec,\n        locally-disabled,\n        long-builtin,\n        long-suffix,\n        map-builtin-not-iterating,\n        misplaced-comparison-constant,\n        missing-function-docstring,\n        metaclass-assignment,\n        next-method-called,\n        next-method-defined,\n        no-absolute-import,\n        no-else-break,\n        no-else-continue,\n        no-else-raise,\n        no-else-return,\n        no-init,  # added\n        no-member,\n        no-name-in-module,\n        no-self-use,\n        nonzero-method,\n        oct-method,\n        old-division,\n        old-ne-operator,\n        old-octal-literal,\n        old-raise-syntax,\n        parameter-unpacking,\n        print-statement,\n        raising-string,\n        range-builtin-not-iterating,\n        raw_input-builtin,\n        rdiv-method,\n        reduce-builtin,\n        relative-import,\n        reload-builtin,\n        round-builtin,\n        setslice-method,\n        signature-differs,\n        standarderror-builtin,\n        suppressed-message,\n        sys-max-int,\n        too-few-public-methods,\n        too-many-ancestors,\n        too-many-arguments,\n        too-many-boolean-expressions,\n        too-many-branches,\n        too-many-instance-attributes,\n        too-many-locals,\n        too-many-nested-blocks,\n        too-many-public-methods,\n        too-many-return-statements,\n        too-many-statements,\n        trailing-newlines,\n        unichr-builtin,\n        unicode-builtin,\n        unnecessary-pass,\n        unpacking-in-except,\n        useless-else-on-loop,\n        useless-object-inheritance,\n        useless-suppression,\n        using-cmp-argument,\n        wrong-import-order,\n        xrange-builtin,\n        zip-builtin-not-iterating,\n\n\n[REPORTS]\n\n# Set the output format. Available formats are text, parseable, colorized, msvs\n# (visual studio) and html. You can also give a reporter class, eg\n# mypackage.mymodule.MyReporterClass.\noutput-format=text\n\n# Tells whether to display a full report or only the messages\nreports=no\n\n# Python expression which should return a note less than 10 (10 is the highest\n# note). You have access to the variables errors warning, statement which\n# respectively contain the number of errors / warnings messages and the total\n# number of statements analyzed. This is used by the global evaluation report\n# (RP0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details\n#msg-template=\n\n\n[BASIC]\n\n# Good variable names which should always be accepted, separated by a comma\ngood-names=main,_\n\n# Bad variable names which should always be refused, separated by a comma\nbad-names=\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Include a hint for the correct naming format with invalid-name\ninclude-naming-hint=no\n\n# List of decorators that produce properties, such as abc.abstractproperty. Add\n# to this list to register other decorators that produce valid properties.\nproperty-classes=abc.abstractproperty,cached_property.cached_property,cached_property.threaded_cached_property,cached_property.cached_property_with_ttl,cached_property.threaded_cached_property_with_ttl\n\n# Regular expression matching correct function names\nfunction-rgx=^(?:(?P<exempt>setUp|tearDown|setUpModule|tearDownModule)|(?P<camel_case>_?[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_?[a-z][a-z0-9_]*))$\n\n# Regular expression matching correct variable names\nvariable-rgx=^[a-z][a-z0-9_]*$\n\n# Regular expression matching correct constant names\nconst-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$\n\n# Regular expression matching correct attribute names\nattr-rgx=^_{0,2}[a-z][a-z0-9_]*$\n\n# Regular expression matching correct argument names\nargument-rgx=^[a-z][a-z0-9_]*$\n\n# Regular expression matching correct class attribute names\nclass-attribute-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$\n\n# Regular expression matching correct inline iteration names\ninlinevar-rgx=^[a-z][a-z0-9_]*$\n\n# Regular expression matching correct class names\nclass-rgx=^_?[A-Z][a-zA-Z0-9]*$\n\n# Regular expression matching correct module names\nmodule-rgx=^(_?[a-z][a-z0-9_]*|__init__|__main__)$\n\n# Regular expression matching correct method names\nmethod-rgx=(?x)^(?:(?P<exempt>_[a-z0-9_]+__|runTest|setUp|tearDown|setUpTestCase|tearDownTestCase|setupSelf|tearDownClass|setUpClass|(test|assert)_*[A-Z0-9][a-zA-Z0-9_]*|next)|(?P<camel_case>_{0,2}[A-Z][a-zA-Z0-9_]*)|(?P<snake_case>_{0,2}[a-z][a-z0-9_]*))$\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=(__.*__|main|test.*|.*test|.*Test)$\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=10\n\n\n[TYPECHECK]\n\n# List of decorators that produce context managers, such as\n# contextlib.contextmanager. Add to this list to register other decorators that\n# produce valid context managers.\ncontextmanager-decorators=contextlib.contextmanager,contextlib2.contextmanager\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis. It\n# supports qualified module names, as well as Unix pattern matching.\nignored-modules=\n\n# List of class names for which member attributes should not be checked (useful\n# for classes with dynamically set attributes). This supports the use of\n# qualified names.\nignored-classes=optparse.Values,thread._local,_thread._local\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=\n\n\n[FORMAT]\n\n# Maximum number of characters on a single line.\nmax-line-length=88\n\n# TODO(https://github.com/PyCQA/pylint/issues/3352): Direct pylint to exempt\n# lines made too long by directives to pytype.\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=(?x)(\n  ^\\s*(\\#\\ )?<?https?://\\S+>?$|\n  ^\\s*(from\\s+\\S+\\s+)?import\\s+.+$)\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=yes\n\n# Maximum number of lines in a module\nmax-module-lines=99999\n\n# String used as indentation unit.  The internal Google style guide mandates 2\n# spaces.  Google's externaly-published style guide says 4, consistent with\n# PEP 8.  Here, we use 2 spaces, for conformity with many open-sourced Google\n# projects (like TensorFlow).\nindent-string='    '\n\n# Number of spaces of indent required inside a hanging  or continued line.\nindent-after-paren=4\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=TODO\n\n\n[STRING]\n\n# This flag controls whether inconsistent-quotes generates a warning when the\n# character used as a quote delimiter is used inconsistently within a module.\ncheck-quote-consistency=yes\n\n\n[VARIABLES]\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# A regular expression matching the name of dummy variables (i.e. expectedly\n# not used).\ndummy-variables-rgx=^\\*{0,2}(_$|unused_|dummy_)\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid to define new builtins when possible.\nadditional-builtins=\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,_cb\n\n# List of qualified module names which can have objects that can redefine\n# builtins.\nredefining-builtins-modules=six,six.moves,past.builtins,future.builtins,functools\n\n\n[LOGGING]\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format\nlogging-modules=logging,absl.logging,tensorflow.io.logging\n\n\n[SIMILARITIES]\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=no\n\n\n[SPELLING]\n\n# Spelling dictionary name. Available dictionaries: none. To make it working\n# install python-enchant package.\nspelling-dict=\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# A path to a file that contains private dictionary; one word per line.\nspelling-private-dict-file=\n\n# Tells whether to store unknown words to indicated private dictionary in\n# --spelling-private-dict-file option instead of raising a message.\nspelling-store-unknown-words=no\n\n\n[IMPORTS]\n\n# Deprecated modules which should not be used, separated by a comma\ndeprecated-modules=regsub,\n                   TERMIOS,\n                   Bastion,\n                   rexec,\n                   sets\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled)\nimport-graph=\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled)\next-import-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled)\nint-import-graph=\n\n# Force import order to recognize a module as part of the standard\n# compatibility libraries.\nknown-standard-library=\n\n# Force import order to recognize a module as part of a third party library.\nknown-third-party=enchant, absl\n\n# Analyse import fallback blocks. This can be used to support both Python 2 and\n# 3 compatible code, which means that the block might have code that exists\n# only in one or another interpreter, leading to false positives when analysed.\nanalyse-fallback-blocks=no\n\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,\n                      __new__,\n                      setUp\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,\n                  _fields,\n                  _replace,\n                  _source,\n                  _make\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls,\n                            class_\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=mcs\n\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when being caught. Defaults to\n# \"Exception\"\novergeneral-exceptions=builtins.StandardError,\n                       builtins.Exception,\n                       builtins.BaseException\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.90625,
          "content": "[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"agpt_plugins\"\nversion = \"0.0.2\"\nauthors = [\n  { name=\"Torantulino\", email=\"support@agpt.co\" }, { name=\"Riensen\", email=\"3340218+riensen@users.noreply.github.com\" }\n]\ndescription = \"The plugins for Auto-GPT.\"\nreadme = \"README.md\"\nrequires-python = \">=3.8\"\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: OS Independent\",\n]\ndependencies = [\"abstract-singleton\"]\n\n[project.urls]\n\"Homepage\" = \"https://github.com/Significant-Gravitas/Auto-GPT-Plugins\"\n\"Bug Tracker\" = \"https://github.com/Significant-Gravitas/Auto-GPT-Plugins\"\n\n[tool.black]\nline-length = 88\ntarget-version = ['py38']\ninclude = '\\.pyi?$'\nextend-exclude = \"\"\n\n[tool.isort]\nprofile = \"black\"\n\n[tool.pylint.messages_control]\ndisable = \"C0330, C0326\"\n\n[tool.pylint.format]\nmax-line-length = \"88\""
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.3310546875,
          "content": "abstract-singleton\natproto\nauto-gpt-plugin-template @ git+https://github.com/Significant-Gravitas/Auto-GPT-Plugin-Template@0.1.0\nblack\nbs4\nbuild\ncolorama\nflake8\nisort\nnewsapi-python\npandas\npylint\npytest\npytest-cov\npython-lorem\npython-telegram-bot\nrequests\nrequests-mock\nsetuptools\ntweepy==4.13.0\ntwine\nvalidators\nwheel\nwolframalpha==5.0.0\n"
        },
        {
          "name": "run_pylint.py",
          "type": "blob",
          "size": 0.4150390625,
          "content": "\"\"\"\n    https://stackoverflow.com/questions/49100806/\n    pylint-and-subprocess-run-returning-exit-status-28\n\"\"\"\nimport subprocess\n\ncmd = \" pylint src\\\\**\\\\*\"\ntry:\n    subprocComplete = subprocess.run(\n        cmd, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE\n    )\n    print(subprocComplete.stdout.decode(\"utf-8\"))\nexcept subprocess.CalledProcessError as err:\n    print(err.output.decode(\"utf-8\"))\n"
        },
        {
          "name": "sourcery.yaml",
          "type": "blob",
          "size": 1.66796875,
          "content": "# ü™Ñ This is your project's Sourcery configuration file.\n\n# You can use it to get Sourcery working in the way you want, such as\n# ignoring specific refactorings, skipping directories in your project,\n# or writing custom rules.\n\n# üìö For a complete reference to this file, see the documentation at\n# https://docs.sourcery.ai/Configuration/Project-Settings/\n\n# This file was auto-generated by Sourcery on 2023-02-25 at 21:07.\n\nversion: \"1\" # The schema version of this config file\n\nignore: # A list of paths or files which Sourcery will ignore.\n  - .git\n  - venv\n  - .venv\n  - build\n  - dist\n  - env\n  - .env\n  - .tox\n\nrule_settings:\n  enable:\n    - default\n    - gpsg\n  disable: [] # A list of rule IDs Sourcery will never suggest.\n  rule_types:\n    - refactoring\n    - suggestion\n    - comment\n  python_version: \"3.9\" # A string specifying the lowest Python version your project supports. Sourcery will not suggest refactorings requiring a higher Python version.\n\n# rules:  # A list of custom rules Sourcery will include in its analysis.\n# - id: no-print-statements\n#   description: Do not use print statements in the test directory.\n#   pattern: print(...)\n#   language: python\n#   replacement:\n#   condition:\n#   explanation:\n#   paths:\n#     include:\n#     - test\n#     exclude:\n#     - conftest.py\n#   tests: []\n#   tags: []\n\n# rule_tags: {} # Additional rule tags.\n\n# metrics:\n#   quality_threshold: 25.0\n\n# github:\n#   labels: []\n#   ignore_labels:\n#   - sourcery-ignore\n#   request_review: author\n#   sourcery_branch: sourcery/{base_branch}\n\n# clone_detection:\n#   min_lines: 3\n#   min_duplicates: 2\n#   identical_clones_only: false\n\n# proxy:\n#   url:\n#   ssl_certs_file:\n#   no_ssl_verify: false\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}