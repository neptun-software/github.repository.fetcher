{
  "metadata": {
    "timestamp": 1736559852058,
    "page": 601,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "drathier/stack-overflow-import",
      "stars": 3701,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0869140625,
          "content": "# Created by .ignore support plugin (hsz.mobi)\n### Python template\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# IPython Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# dotenv\n.env\n\n# virtualenv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 1.3359375,
          "content": "StackOverflow Importer\n======================\n\nDo you ever feel like all you’re doing is copy/pasting from Stack\nOverflow?\n\nLet’s take it one step further.\n\n| ``from stackoverflow import quick_sort`` will go through the search\n  results\n| of ``[python] quick sort`` looking for the largest code block that\n  doesn’t\n| syntax error in the highest voted answer from the highest voted\n  question\n| and return it as a module. If that answer doesn’t have any valid\n  python\n| code, it checks the next highest voted answer for code blocks.\n\n.. code:: python\n\n    >>> from stackoverflow import quick_sort, split_into_chunks\n\n    >>> print(quick_sort.sort([1, 3, 2, 5, 4]))\n    [1, 2, 3, 4, 5]\n    \n    >>> print(list(split_into_chunks.chunk(\"very good chunk func\")))\n    ['very ', 'good ', 'chunk', ' func']\n    \n    >>> print(\"I wonder who made split_into_chunks\", split_into_chunks.__author__)\n    I wonder who made split_into_chunks https://stackoverflow.com/a/35107113\n    \n    >>> print(\"but what's the license? Can I really use this?\", quick_sort.__license__)\n    but what's the license? Can I really use this? CC BY-SA 3.0\n    >>> assert(\"nice, attribution!\")\n\nThis module is licensed under whatever license you want it to be as \nlong as the license is compatible with the fact that I blatantly \ncopied multiple lines of code from the Python standard library.\n"
        },
        {
          "name": "main.py",
          "type": "blob",
          "size": 0.451171875,
          "content": "from stackoverflow import quick_sort, split_into_chunks\nprint(quick_sort.sort([1, 3, 2, 5, 4]))\nprint(list(split_into_chunks.chunk(\"very good chunk func\")))\nprint(\"gotta take a break\")\nfrom time import  time\nt1 = time()\nfrom stackoverflow import time_delay\nprint(\"that's enough, let's continue\", time()-t1)\nprint(\"I wonder who made split_into_chunks\", split_into_chunks.__author__)\nprint(\"but what's the license? Can I really use this?\", quick_sort.__license__)\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.1220703125,
          "content": "\"\"\"A setuptools based setup module.\n\nSee:\nhttps://packaging.python.org/en/latest/distributing.html\nhttps://github.com/pypa/sampleproject\n\"\"\"\n\nfrom setuptools import setup\nfrom codecs import open\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\n\nwith open(path.join(here, 'README.rst'), encoding='utf-8') as f:\n    long_description = f.read()\n\nsetup(\n    name='stackoverflow',\n    version='0.1.0',\n    description='A sample Python project',\n    long_description=long_description,\n    url='https://github.com/drathier/stack-overflow-import',\n    author='https://github.com/drathier',\n    author_email='fille.haglund@hotmail.com',\n    license='WTFPL',\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Build Tools',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n    ],\n    keywords='stackoverflow development boilerplate',\n    packages=[\"stackoverflow\"],\n    install_requires=['requests'],\n)\n"
        },
        {
          "name": "stackoverflow",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}