{
  "metadata": {
    "timestamp": 1736559467446,
    "page": 29,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Lyken17/pytorch-OpCounter",
      "stars": 4935,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.2392578125,
          "content": ".DS_Store\nfx_explore/\n# *test*\n*.t7\n*.pth\n# only keep the setup.py under root folder\n./*.py\n!./setup.py\n\n.idea/\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2018 Ligeng Zhu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.2861328125,
          "content": "# THOP: PyTorch-OpCounter\n\n## How to install \n    \n`pip install thop` (now continously intergrated on [Github actions](https://github.com/features/actions))\n\nOR\n\n`pip install --upgrade git+https://github.com/Lyken17/pytorch-OpCounter.git`\n    \n## How to use \n* Basic usage \n    ```python\n    from torchvision.models import resnet50\n    from thop import profile\n    model = resnet50()\n    input = torch.randn(1, 3, 224, 224)\n    macs, params = profile(model, inputs=(input, ))\n    ```    \n\n* Define the rule for 3rd party module.\n    ```python\n    class YourModule(nn.Module):\n        # your definition\n    def count_your_model(model, x, y):\n        # your rule here\n    \n    input = torch.randn(1, 3, 224, 224)\n    macs, params = profile(model, inputs=(input, ), \n                            custom_ops={YourModule: count_your_model})\n    ```\n    \n* Improve the output readability\n\n    Call `thop.clever_format` to give a better format of the output.\n    ```python\n    from thop import clever_format\n    macs, params = clever_format([macs, params], \"%.3f\")\n    ```    \n    \n## Results of Recent Models\n\nThe implementation are adapted from `torchvision`. Following results can be obtained using [benchmark/evaluate_famous_models.py](benchmark/evaluate_famous_models.py).\n\n<p align=\"center\">\n<table>\n<tr>\n<td>\n\nModel | Params(M) | MACs(G)\n---|---|---\nalexnet | 61.10 | 0.77\nvgg11 | 132.86 | 7.74\nvgg11_bn | 132.87 | 7.77\nvgg13 | 133.05 | 11.44\nvgg13_bn | 133.05 | 11.49\nvgg16 | 138.36 | 15.61\nvgg16_bn | 138.37 | 15.66\nvgg19 | 143.67 | 19.77\nvgg19_bn | 143.68 | 19.83\nresnet18 | 11.69 | 1.82\nresnet34 | 21.80 | 3.68\nresnet50 | 25.56 | 4.14\nresnet101 | 44.55 | 7.87\nresnet152 | 60.19 | 11.61\nwide_resnet101_2 | 126.89 | 22.84\nwide_resnet50_2 | 68.88 | 11.46\n\n</td>\n<td>\n\nModel | Params(M) | MACs(G)\n---|---|---\nresnext50_32x4d | 25.03 | 4.29\nresnext101_32x8d | 88.79 | 16.54\ndensenet121 | 7.98 | 2.90\ndensenet161 | 28.68 | 7.85\ndensenet169 | 14.15 | 3.44\ndensenet201 | 20.01 | 4.39\nsqueezenet1_0 | 1.25 | 0.82\nsqueezenet1_1 | 1.24 | 0.35\nmnasnet0_5 | 2.22 | 0.14\nmnasnet0_75 | 3.17 | 0.24\nmnasnet1_0 | 4.38 | 0.34\nmnasnet1_3 | 6.28 | 0.53\nmobilenet_v2 | 3.50 | 0.33\nshufflenet_v2_x0_5 | 1.37 | 0.05\nshufflenet_v2_x1_0 | 2.28 | 0.15\nshufflenet_v2_x1_5 | 3.50 | 0.31\nshufflenet_v2_x2_0 | 7.39 | 0.60\ninception_v3 | 27.16 | 5.75\n\n</td>\n</tr>\n</p>\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 0.1806640625,
          "content": "TODOs.\n\n1. A more user-friendly warning for un-defined modules. [Done]\n2. Supports for models in torchvision (e.g., residual add).\n3. Layer wise printing\n\nIntegration with torchprofile?"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.103515625,
          "content": "#!/usr/bin/env bash\nrm -rf build/ dist/\npython setup.py bdist_wheel\ntwine check dist/*\ntwine upload dist/*"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.1103515625,
          "content": "#!/usr/bin/env python\nimport os, sys\nimport shutil\nimport datetime\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\nreadme = open(\"README.md\").read()\n\nfp = open(\"thop/__version__.py\", \"r\").read()\nVERSION = eval(fp.strip().split()[-1])\n\nrequirements = [\n    \"torch\",\n]\n\n# import subprocess\n# commit_hash = subprocess.check_output(\"git rev-parse HEAD\", shell=True).decode('UTF-8').rstrip()\n# VERSION += \"_\" + str(int(commit_hash, 16))[:8]\nVERSION += \"_\" + datetime.datetime.now().strftime(\"%Y%m%d%H%M\")[2:]\nprint(VERSION)\n\nsetup(\n    # Metadata\n    name=\"thop\",\n    version=VERSION,\n    author=\"Ligeng Zhu\",\n    author_email=\"ligeng.zhu+github@gmail.com\",\n    url=\"https://github.com/Lyken17/pytorch-OpCounter/\",\n    description=\"A tool to count the FLOPs of PyTorch model.\",\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    license=\"MIT\",\n    # Package info\n    packages=find_packages(exclude=(\"*test*\",)),\n    #\n    zip_safe=True,\n    install_requires=requirements,\n    # Classifiers\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n    ],\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "thop",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}