{
  "metadata": {
    "timestamp": 1736559556666,
    "page": 165,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ThioJoe/YT-Spammer-Purge",
      "stars": 4585,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "client_secrets.json\ntoken.pickle\n\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.064453125,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.564453125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# Secrets\nclient_secrets.json\ntoken.pickle\n\n# VS Code and PyCharm Temp files\n.idea\n.vscode\n\n# Misc temp files\n.dccache\n\n# Ignore log files\nlogs/\nSpam_*.txt\nSpam_*.rtf\n\n# Ignore user-generated config file\nSpamPurgeConfig.ini\n\n# Ignore Resources Folders\nspam_lists/\nSpamPurge_Resources/\n.DS_Store\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.912109375,
          "content": "## Contributing Guidelines\n\n- If you'd like to make a pull request to contribute, please keep it simple. If you use some higher level techniques I don't understand, I'm not going to approve it because I won't be able to maintain it.\n\n- Please don't make a pull request with a bunch of changes in syntax just for the sake of 'best practices' (ex: changing \"if blah == False\" to \"if not blah\"). Unless something makes a difference to performance frankly I don't care.\n\n- Avoid adding new non-standard libraries if at all possible. If you have an idea that would require one, please suggest it as an issue first instead of going through all the work and submitting a pull request.\n\n- Don't modify SpamAccountsList.txt, SpamDomainsList.txt & SpamThreadsList.txt in the assets folder. There is a dedicated repo for these, for which you can submit additions via issues - https://github.com/ThioJoe/YT-Spam-Domains-List\n\n- MAKE SURE IT RUNS\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.49609375,
          "content": "FROM python:3-slim AS builder\n\nRUN apt-get update && \\\n    apt-get install -y gcc \\\n    cmake \\\n    python3-dev \\\n    build-essential\nCOPY requirements.txt ./\nRUN pip install --no-cache-dir --user -r requirements.txt\n\nFROM python:3-slim\n\nWORKDIR /usr/src/app\nRUN apt-get update && \\\n    apt-get install -y libtk8.6 && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY --from=builder /root/.local /root/.local\n\nCOPY YTSpammerPurge.py ./\nADD Scripts ./Scripts\nADD assets ./assets\n\nCMD [ \"python\", \"./YTSpammerPurge.py\" ]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3251953125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.5673828125,
          "content": "\n<!---------------------------------[ Header ]---------------------------------->\n\n<h1 align = 'center'>\n    <img \n        src = '/assets/icon.png' \n        height = '100' \n        width = '100' \n        alt = '' \n    >\n    <br>\n    YouTube Spammer Purge\n    <br>\n</h1>\n\n<!---------------------------------[ Badges ]---------------------------------->\n\n<div align = 'center'>   \n    <a href = 'https://github.com/ThioJoe/YT-Spammer-Purge/releases'>\n        <img src = 'https://img.shields.io/github/v/release/ThioJoe/YT-Spammer-Purge?include_prereleases&label=Latest%20Release' height = '20' alt = 'Latest Release'>\n    </a>\n    <a href = 'https://github.com/ThioJoe/YT-Spammer-Purge/actions/workflows/codeql-analysis.yml'>\n        <img src = 'https://github.com/ThioJoe/YT-Spammer-Purge/actions/workflows/codeql-analysis.yml/badge.svg' height = '20' alt = 'CodeQL'>\n    </a>\n    <a href = 'https://github.com/ThioJoe/YT-Spammer-Purge/actions/workflows/docker-build.yml'>\n        <img src = 'https://github.com/ThioJoe/YT-Spammer-Purge/actions/workflows/docker-build.yml/badge.svg' height = '20' alt = 'docker-build'>\n    </a>\n</div>\n\n<br>\n\n**What Is This?** - Allows you to filter and search for spammer comments on your channel and other's channel(s) in many different ways AND delete/report them all at once (see features below). \n\n**How to Download:** Click the \"[Releases]\" link on the right, then on the latest release, under 'Assets' click to download \"YTSpammerPurge.exe\". (You might have to click \"Assets\" to view the files for the release)\n> * [Linux Setup Instructions](https://github.com/ThioJoe/YouTube-Spammer-Purge/wiki/Linux-Installation-Instructions)\n> * [MacOS Setup Instructions](https://github.com/ThioJoe/YouTube-Spammer-Purge/wiki/MacOS-Instructions)\n> * (Windows installation not necessary if using exe file. But see how to set up required API key [on this page](https://github.com/ThioJoe/YT-Spammer-Purge/wiki/Instructions:-Obtaining-an-API-Key))\n\n### **Detailed Info & Documentation →** Visit the wiki [(Click Here)][Wiki] for more detailed writeups on the program\n\n## Features\n\n* 15 Different Filtering Methods\n  * **Auto-Smart Mode (Recommended)**: Automatically detects multiple spammer techniques\n  * **Sensitive-Smart Mode**: More likely to catch elusive spammers, but with more false positives\n  * **Scan by Channel ID**: Enter a known spammer's channel link or ID directly\n  * **Scan Usernames** for: Individual special characters, individual strings, or using a custom Regex expression\n  * **Scan Comment Text**: (Same 3 options as above)\n  * **Scan Usernames and Comment Text** simultaneously: (Same 3 options as above)\n  * **ASCII Mode**: Scan Usernames for non-ASCII special characters (three different sensitivities)\n* 4 Different Scanning Modes\n  * Scan a **single video**\n  * Scan **Recent Videos** (Up to 5)\n  * Scan recent comments across **entire channel** (all videos)\n  * *Experimental*: Scan a **community post**\n* Automatic deletion of all found comments (after confirmation), as well as the option to ban them\n* Options to instead Report spam comments or 'Hold For Review'\n* Ability to create config file to skip pre-set options\n* Rich text log files\n* 'Recovery Mode' option to re-instate previously deleted comments\n* Displays \"match samples\" after printing comments list to easily spot false positives\n* Ability to exclude selected authors before deletion / reporting\n\n## Purpose\n\nRecently, there has been a massive infestation of spam on YouTube where fake impersonator accounts leave spam/scam replies to hundreds of users on a creator's videos. YouTube has fortunately now made it so the \"Hide User From Channel\" button instantly removes all of that user's comments, but there are sometimes many different spammers, and it can be difficult to find them all.\n\nTherefore I created this script to allow you to easily scan for and purge these spammer comments. **IT DOES NOT PREVENT SPAMMERS - It only makes it easier to delete them when they show up!** YouTube still must implement better native tools for dealing with spammers.\n\n## 🤔 Pro-Tip If This Seems Sketchy: Limiting The App's Access 🤔\n\nIf you feel sketched out about giving the app the required high level permissions to your channel (very understandable), you could instead use the app in 'moderator mode' (set in the config file). First, some context: When you grant access to another channel to be a moderator for your channel, they are able to mark comments for 'held for review', and this permission works through the API as well. \n\n_Therefore,_ what you could do is create an _blank dummy-google-account_ with nothing on it except a empty new channel. Then you can grant _that_ channel permission to be a moderator, and use the app through _the dummy moderator account_. **This way, you know that the app will never have the ability to do more than mark comments as held for review** (which the app supports) on your main channel, and have no other access to your account's data. You just won't be able to ban the spammers through this app directly, but you can still remove/hide their comments instead of deleting them. Just make sure to create the google cloud API project on the dummy account instead.\n\nRead some additional details about 'moderator mode' on the [wiki page here][Moderator Mode].\n\n**An Additional Note:** No matter the settings, the program runs completely locally on your own machine using the API key and Google Cloud project you created yourself, so even as the program's creator I will never have access to your channel.\n\n## Usage Notes -READ THIS\n\n1. To use this script, you will need to obtain your own API credentials file by making a project via the Google Developers Console (aka 'Google Cloud Platform'). The credential file should be re-named `client_secret.json` and be placed in the same directory as this script. [See Instructions Here][API Key].\n\n2. **IF IT FREEZES** while scanning, it is probably because you clicked within the command prompt window and entered \"selection mode\" which pauses everything. **To unfreeze it, simply right click within the window, or press the Escape key.**\n\n3. I'm a total amateur, so if something doesn't work I'll try to fix it but might not even know how, so don't expect too much. Therefore **I OFFER NO WARRANTY OR GUARANTEE FOR THIS SCRIPT. USE AT YOUR OWN RISK.** I tested it on my own and implemented some failsafes as best as I could, but there could always be some kind of unexpected bug. You should inspect the code yourself.\n\n## Video: Project Demonstrations\n\n<p align=\"center\">Latest Demonstration Video: https://www.youtube.com/watch?v=2tRppXW_aKo</p>\n\n[![Demo Updated Thumbnail]][Demo Updated]\n\n<p align=\"center\">Original Demo for Context: https://www.youtube.com/watch?v=-vOakOgYLUI</p>\n\n[![Demo 1 Thumbnail]][Demo 1]\n\n(Takes you to YouTube, not embedded. See timestamps in video description.)\n\n## Screenshots\n\n<div align = 'center'>\n    <h2>Opening Menu</h2>\n    <br>\n    <img \n        width = '675' \n        alt = 'Opening Menu' \n        src = 'https://user-images.githubusercontent.com/93459510/174273252-5b5c0d03-db79-4e17-a8b6-77cd9a329ac4.png'>\n    <br>\n    <h2>Filter Mode Selection</h2>\n    <br>\n    <img \n         height = '353'\n         width = '675' \n        alt = 'Filter Mode Selection' \n        src = 'https://user-images.githubusercontent.com/93459510/174273476-5af0a1ad-9ca1-4fea-976d-e731ce336922.png'>\n    <br>\n    <h2>Scanning<br>(Auto Smart Mode)</h2>\n    <br>\n    <img \n        height = '353'\n        width = '675' \n        alt = 'Scanning (Auto Smart Mode)' \n        src = 'https://user-images.githubusercontent.com/93459510/174273577-38e51d30-f313-4053-ba31-bb2724770dda.png'>\n    <br>\n    <h2>Matched Comments List</h2>\n    <br>\n    <img \n        height = '353'\n        width = '675' \n        alt = 'Matched Comments List' \n        src = 'https://user-images.githubusercontent.com/93459510/174273656-0fb22382-ec88-4e63-88f3-e4a93ac1f1ad.png'>\n    <br>\n    <h2>Match Samples and Deletion Menu</h2>\n    <br>\n    <img \n        height = '353'\n        width = '675' \n        alt = 'Match Samples and Deletion Menu' \n        src = 'https://user-images.githubusercontent.com/93459510/174273744-3d5a174a-904a-493e-af37-bcca44c57820.png'>\n    <br>\n</div>\n\n<br>\n\n## Installation\n\nIf using the python script version (not the exe), there is a requirements.txt with necessary modules. Created with Python 3.9.7\n\nEither way, you DO need to acquire your own API credentials file to access the YouTube API - [See Instructions Here][API Key].\n\n### **Operating System Specific Instructions:**\n\n#### Windows\n\nOn Windows, you may download the latest EXE file from the [Releases page][Releases], or you may install YTSpammerPurge manually.\nIf you are not sure how to install YTSpammerPurge manually, it is probably best to install the EXE.\n\n#### Linux / MacOS\n\nThe easiest way to install YTSpammerPurge is using the install script.\n\n```bash\nbash <(curl -s https://raw.githubusercontent.com/ThioJoe/YT-Spammer-Purge/main/install.sh)\n```\n\n<img \n    width = '500'\n    src = 'https://user-images.githubusercontent.com/60006481/154855672-165565a1-50db-47d4-bf39-0fb576710f63.gif'>\n\nSee one of the following if you need further help:\n* [Linux Setup Instructions][Instructions Linux]\n* [MacOS Setup Instructions][Instructions MacOS]\n\n##### Updating\n\nTo update YTSpammerPurge, run the `install.sh` file inside your installation.\n\n<img \n    width = '500'\n    src = 'https://user-images.githubusercontent.com/60006481/154855673-bf2e8fdb-eaa3-4583-a2a1-80ef4816e2bc.gif'>\n\n##### Manual Installation\n\nIf your system is not yet supported by the install script, you may install YTSpammerPurge manually by following the guide [Here (Linux Setup Instructions)][Instructions Linux]\n\n### **Docker Instructions:**\n\nBefore running `docker-compose` you must run the `YTSpammerPurge.py` script at least once with your `client_secrets.json` file to confirm OAuth credentials and generate the config/token files.\n\nThe generated config files, token, and Spam Purge Resources will all be bound to the docker container via volumes.\n\nOnce you generated the token and config files you are ready to run the docker image.\n\n\nNow you can run `docker-compose up` to start the container, or use the image to run on a Kubernetes cluster for example.\nTo build your own version you can run this command: `docker-compose -f docker-compose.yml -f docker-compose.override.yml up --build`\n\n\n## Instructions - Obtaining YouTube API Key\nTo use this script, you will need an \"Oauth2\" credential to access the scanning and deletion functions via YouTube's Data API. Otherwise this script won't work at all. \n* #### Instructions can be found on this page: [Instructions: Obtaining an API Key][API Key]\n* #### **Or, follow a video WalkThrough Here: <https://www.youtube.com/watch?v=c6ebWvay8dE>**  \n\n\n<!----------------------------------------------------------------------------->\n\n[Releases]: https://github.com/ThioJoe/YouTube-Spammer-Purge/releases\n[Wiki]: https://github.com/ThioJoe/YT-Spammer-Purge/wiki\n\n[Moderator Mode]: https://github.com/ThioJoe/YT-Spammer-Purge/wiki/Moderator-Mode-&-Limiting-Permissions\n[API Key]: https://github.com/ThioJoe/YT-Spammer-Purge/wiki/Instructions:-Obtaining-an-API-Key\n\n[Instructions MacOS]: https://github.com/ThioJoe/YouTube-Spammer-Purge/wiki/MacOS-Instructions\n[Instructions Linux]: https://github.com/ThioJoe/YouTube-Spammer-Purge/wiki/Linux-Installation-Instructions\n\n\n[Demo Updated Thumbnail]: https://user-images.githubusercontent.com/12518330/147130101-ff84cd0e-c1fb-43d9-a3be-4c9d4b95d7b0.png\n[Demo Updated]: https://www.youtube.com/watch?v=2tRppXW_aKo\n\n[Demo 1 Thumbnail]: https://user-images.githubusercontent.com/12518330/140164510-7c886cd9-b9d4-4d6d-a466-fb58dd42ab48.jpg\n[Demo 1]: https://www.youtube.com/watch?v=-vOakOgYLUI\n\n\n"
        },
        {
          "name": "Scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "YTSpammerPurge.py",
          "type": "blob",
          "size": 88.26171875,
          "content": "#!/usr/bin/env python3\n# -*- coding: UTF-8 -*-\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n#######################################################################################################\n################################# YOUTUBE SPAM COMMENT DELETER ########################################\n#######################################################################################################\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n###\n### Function: Allows you to scan for spam comments with multiple methods, and delete them all at once\n###\n### Purpose:  Recently, there has been a massive infestation of spam on YouTube where fake impersonator\n###           accounts leave spam/scam replies to hundreds of users on a creator's videos.\n###\n###           For some god-forsaken reason, YouTube offers no way to delete all comments by a specific\n###           user at once, meaning you must delete them one by one BY HAND.\n###\n###           YouTube offers a functionality to ban a user, but it does NOT delete previous comments.\n###           Therefore I created this script to allow you to instantly purge their spam comments.\n###\n### NOTES:    1. To use this script, you will need to obtain your own API credentials file by making\n###\t\t\t\t       a project via the Google Developers Console (aka 'Google Cloud Platform').\n###              The credential file should be re-named 'client_secret.json' and be placed in the\n###              same directory as this script.\n###\t\t\t\t            >>> See the Readme for instructions on this.\n###\n###           2. I suck at programming so if something doesn't work I'll try to fix it but might not\n###              even know how, so don't expect too much.\n###\n### Author:   ThioJoe - YouTube.com/ThioJoe\n###                     Twitter.com/ThioJoe\n###\n### GitHub:   https://github.com/ThioJoe/YT-Spammer-Purge/\n###\n### License:  GPL-3.0\n###\n### IMPORTANT:  I OFFER NO WARRANTY OR GUARANTEE FOR THIS SCRIPT. USE AT YOUR OWN RISK.\n###             I tested it on my own and implemented some failsafes as best as I could,\n###             but there could always be some kind of bug. You should inspect the code yourself.\nversion = \"2.17.1\"\nconfigVersion = 32\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\nprint(\"Importing Script Modules...\")\n# Import other module files\nfrom Scripts.shared_imports import *\nimport Scripts.auth as auth\nimport Scripts.validation as validation\nimport Scripts.utils as utils\nimport Scripts.files as files\nimport Scripts.logging as logging\nimport Scripts.operations as operations\nimport Scripts.user_tools as user_tools\nfrom Scripts.community_downloader import main as get_community_comments #Args = post's ID, comment limit\nimport Scripts.community_downloader as community_downloader\nfrom Scripts.utils import choice\n\nprint(\"Importing Standard Libraries...\")\n# Standard Libraries\nimport time\nfrom dataclasses import dataclass\nfrom datetime import datetime, timedelta\nfrom collections import namedtuple\nimport json, ast\nfrom pkg_resources import parse_version\n\nprint(\"Importing Third-Party Modules...\")\n# Other Libraries\nfrom googleapiclient.errors import HttpError\n\n\n\n##########################################################################################\n##########################################################################################\n###################################### MAIN ##############################################\n##########################################################################################\n##########################################################################################\n\n\ndef main():\n  global S\n  global B\n  global F\n  # These variables are from shared_imports.py\n  # S - Style\n  # B - Background\n  # F - Foreground\n\n  # Run check on python version, must be 3.6 or higher because of f strings\n  if sys.version_info[0] < 3 or sys.version_info[1] < 6:\n    print(\"Error Code U-2: This program requires running python 3.6 or higher! You are running\" + str(sys.version_info[0]) + \".\" + str(sys.version_info[1]))\n    input(\"Press Enter to Exit...\")\n    sys.exit()\n\n  # Declare Global Variables\n  global YOUTUBE\n  global CURRENTUSER\n  User = namedtuple('User', 'id name configMatch')\n\n  # Some Typehints\n  scanMode: str\n  config: dict\n  jsonData: dict\n  versionInfoJson: dict\n\n  utils.clear_terminal()\n\n  print(\"\\nLoading YT Spammer Purge @ \" + str(version) + \"...\")\n\n  # Authenticate with the Google API - If token expired and invalid, deletes and re-authenticates\n  YOUTUBE = auth.first_authentication()\n\n           #### Prepare Resources ####\n  resourceFolder = RESOURCES_FOLDER_NAME\n  whitelistPathWithName = os.path.join(resourceFolder, \"whitelist.txt\")\n  spamListFolder = os.path.join(resourceFolder, \"Spam_Lists\")\n  filtersFolder = os.path.join(resourceFolder, \"Filters\")\n  filterFileName = \"filter_variables.py\"\n  spamListDict = {\n      'Lists': {\n        'Domains':  {'FileName': \"SpamDomainsList.txt\"},\n        'Accounts': {'FileName': \"SpamAccountsList.txt\"},\n        'Threads':  {'FileName': \"SpamThreadsList.txt\"}\n      },\n      'Meta': {\n        'VersionInfo': {'FileName': \"SpamVersionInfo.json\"},\n        'SpamListFolder': spamListFolder\n        #'LatestLocalVersion': {} # Gets added later during check, this line here for reference\n      }\n  }\n  filterListDict = {\n    'Files': {\n      'FilterVariables': {'FileName': filterFileName}\n    },\n    'ResourcePath': filtersFolder\n    #'LocalVersion': {} # Gets added later during check, this line here for reference\n  }\n\n  resourcesDict = {\n    'Whitelist': {\n      'PathWithName': whitelistPathWithName,\n      'FileName': \"whitelist.txt\",\n    }\n  }\n\n  print(\"Checking for updates to program and spam lists...\")\n  # Check if resources, spam list, and filters folders exist, and create them\n  if not os.path.isdir(resourceFolder):\n    try:\n      os.mkdir(resourceFolder)\n      # Create readme\n      with open(os.path.join(resourceFolder, \"_What_Is_This_Folder.txt\"), \"w\") as f:\n        f.write(\"# This Resources folder is used to store resources required for the YT Spammer Purge program.\\n\")\n        f.write(\"# Note: If you had a previous spam_lists folder that was created in the same folder as \\n\")\n        f.write(\"# the .exe file, you can delete that old spam_lists folder. The resources folder is the \\n\")\n        f.write(\"# new location they will be stored.\\n\")\n\n    except:\n      print(\"\\nError: Could not create folder. To update the spam lists, try creating a folder called 'SpamPurge_Resources',\")\n      print(\"       then inside that, create another folder called 'Spam_Lists'.\")\n      input(\"Press Enter to Continue...\")\n\n  if os.path.isdir(resourceFolder) and not os.path.isdir(spamListFolder):\n    try:\n      os.mkdir(spamListFolder)\n    except:\n      print(\"\\nError: Could not create folder. To update the spam lists, go into the 'SpamPurge_Resources' folder,\")\n      print(\"       then inside that, create another folder called 'Spam_Lists'.\")\n\n  if os.path.isdir(resourceFolder) and not os.path.isdir(filtersFolder):\n      try:\n        os.mkdir(filtersFolder)\n      except:\n        print(\"\\nError: Could not create folder. To update the spam lists, go into the 'SpamPurge_Resources' folder,\")\n        print(\"       then inside that, create another folder called 'Filters'.\")\n\n  # Prepare to check and ingest spammer list files\n  # Iterate and get paths of each list. Also gets path of filter_variables.py\n  # This for loops might not actually do anything?\n  for x,spamList in spamListDict['Lists'].items():\n    spamList['Path'] = os.path.join(spamListFolder, spamList['FileName'])\n\n  spamListDict['Meta']['VersionInfo']['Path'] = os.path.join(spamListFolder, spamListDict['Meta']['VersionInfo']['FileName']) # Path to version included in packaged assets folder\n\n  # Check if each spam list exists, if not copy from assets, then get local version number, calculate latest version number\n  latestLocalSpamListVersion = \"1900.12.31\"\n  for x, spamList in spamListDict['Lists'].items():\n    if not os.path.exists(spamList['Path']):\n      files.copy_asset_file(spamList['FileName'], spamList['Path'])\n\n    listVersion = files.get_list_file_version(spamList['Path'])\n    spamList['Version'] = listVersion\n    if listVersion and parse_version(listVersion) > parse_version(latestLocalSpamListVersion):\n      latestLocalSpamListVersion = listVersion\n\n  spamListDict['Meta']['VersionInfo']['LatestLocalVersion'] = latestLocalSpamListVersion\n\n  # Check for version info file, if it doesn't exist, get from assets folder\n  if not os.path.exists(spamListDict['Meta']['VersionInfo']['Path']):\n    files.copy_asset_file(spamListDict['Meta']['VersionInfo']['FileName'], spamListDict['Meta']['VersionInfo']['Path'])\n\n  # Check if filter_variables.py is in Spampurge_Resources, if not copy from temp folder or scripts, depending if using pyinstaller\n  filterFilePath = os.path.join(filtersFolder, filterFileName)\n  if not os.path.exists(filterFilePath):\n    files.copy_scripts_file(filterFileName, filterFilePath)\n\n  # Get stored spam list version data from json file\n  jsonData = open(spamListDict['Meta']['VersionInfo']['Path'], 'r', encoding=\"utf-8\")\n  versionInfoJson = str(json.load(jsonData)) # Parses json file into a string\n  versionInfo = ast.literal_eval(versionInfoJson) # Parses json string into a dictionary\n  spamListDict['Meta']['VersionInfo']['LatestRelease'] = versionInfo['LatestRelease']\n  spamListDict['Meta']['VersionInfo']['LastChecked'] = versionInfo['LastChecked']\n\n  # Get current version of filter_variables.py that is in the SpamPurge_Resources/Filters folder\n  filterVersion = files.get_current_filter_version(filterListDict)\n  filterListDict['LocalVersion'] = filterVersion\n\n  # Check for primary config file, load into dictionary 'config'. If no config found, loads data from default config in assets folder\n  utils.clear_terminal()\n  config = files.load_config_file(configVersion)\n  validation.validate_config_settings(config)\n  utils.clear_terminal()\n\n  # Disable colors before they are used anywhere\n  if config['colors_enabled'] == False:\n    # Disables colors entirely\n    init(autoreset=True, strip=True, convert=False)\n  else:\n    # Initiates colorama and creates shorthand variables for resetting colors\n    init(autoreset=True)\n\n  # Check for program and list updates if auto updates enabled in config\n  try:\n    if config['release_channel'] == \"all\":\n      updateReleaseChannel = \"all\"\n    elif config['release_channel'] == \"stable\":\n      updateReleaseChannel = \"stable\"\n    else:\n      print(\"Invalid value for 'release_channel' in config file. Must be 'All' or 'Stable'\")\n      print(\"Defaulting to 'All'\")\n      input(\"Press Enter to Continue...\")\n      updateReleaseChannel = \"all\"\n  except KeyError:\n    print(\"\\nYour version of the config file does not specify a release channel. Defaulting to 'All'\")\n    print(f\"{F.YELLOW}Re-create your config{S.R} to get the latest version.\")\n    input(\"\\nPress Enter to Continue...\")\n    updateReleaseChannel = \"all\"\n\n  if config['auto_check_update'] == True:\n    try:\n      updateAvailable = files.check_for_update(version, updateReleaseChannel, silentCheck=True, )\n    except Exception as e:\n      print(f\"{F.LIGHTRED_EX}Error Code U-3 occurred while checking for updates. (Checking can be disabled using the config file setting) Continuing...{S.R}\\n\")\n      updateAvailable = None\n\n    # Only check for updates once a day, compare current date to last checked date\n    if datetime.today() > datetime.strptime(spamListDict['Meta']['VersionInfo']['LastChecked'], '%Y.%m.%d.%H.%M')+timedelta(days=1):\n      # Check for update to filter variables file\n      files.check_for_filter_update(filterListDict, silentCheck=True)\n      # Check spam lists if today or tomorrow's date is later than the last update date (add day to account for time zones)\n      if datetime.today()+timedelta(days=1) >= datetime.strptime(spamListDict['Meta']['VersionInfo']['LatestLocalVersion'], '%Y.%m.%d'):\n        spamListDict = files.check_lists_update(spamListDict, silentCheck=True)        \n\n  else:\n    updateAvailable = False\n\n  # In all scenarios, load spam lists into memory\n  for x, spamList in spamListDict['Lists'].items():\n    spamList['FilterContents'] = files.ingest_list_file(spamList['Path'], keepCase=False)\n\n  # In all scenarios, load filter variables into memory. Must import prepare_modes after filter_variables has been updated and placed in SpamPurge_Resources\n  print(\"Loading filter file...\\n\")\n  import Scripts.prepare_modes as modes\n\n  ####### Load Other Data into MiscData #######\n  print(\"\\nLoading other assets..\\n\")\n  @dataclass\n  class MiscDataStore:\n    resources:dict\n    spamLists:dict\n    totalCommentCount:int\n    channelOwnerID:str\n    channelOwnerName:str\n\n  miscData = MiscDataStore(\n    resources = {},\n    spamLists = {},\n    totalCommentCount = 0,\n    channelOwnerID = \"\",\n    channelOwnerName = \"\",\n    )\n\n  miscData.resources = resourcesDict\n  rootDomainListAssetFile = \"rootZoneDomainList.txt\"\n  rootDomainList = files.ingest_asset_file(rootDomainListAssetFile)\n  miscData.resources['rootDomainList'] = rootDomainList\n  miscData.spamLists['spamDomainsList'] = spamListDict['Lists']['Domains']['FilterContents']\n  miscData.spamLists['spamAccountsList'] = spamListDict['Lists']['Accounts']['FilterContents']\n  miscData.spamLists['spamThreadsList'] = spamListDict['Lists']['Threads']['FilterContents']\n\n\n  # Create Whitelist if it doesn't exist,\n  if not os.path.exists(whitelistPathWithName):\n    with open(whitelistPathWithName, \"a\") as f:\n      f.write(\"# Commenters whose channel IDs are in this list will always be ignored. You can add or remove IDs (one per line) from this list as you wish.\\n\")\n      f.write(\"# Channel IDs for a channel can be found in the URL after clicking a channel's name while on the watch page or where they've left a comment.\\n\")\n      f.write(\"# - Channels that were 'excluded' will also appear in this list.\\n\")\n      f.write(\"# - Lines beginning with a '#' are comments and aren't read by the program. (But do not put a '#' on the same line as actual data)\\n\\n\")\n    miscData.resources['Whitelist']['WhitelistContents'] = []\n  else:\n    miscData.resources['Whitelist']['WhitelistContents'] = files.ingest_list_file(whitelistPathWithName, keepCase=True)\n\n  if config:\n    moderator_mode = config['moderator_mode']\n  else:\n    moderator_mode = False\n\n  utils.clear_terminal()\n\n\n\n  #----------------------------------- Begin Showing Program ---------------------------------\n  print(f\"{F.LIGHTYELLOW_EX}\\n===================== YOUTUBE SPAMMER PURGE v\" + version + f\" ====================={S.R}\")\n  print(\"=========== https://github.com/ThioJoe/YT-Spammer-Purge ===========\")\n  print(\"================= Author: ThioJoe - YouTube.com/ThioJoe ================ \\n\")\n\n  # Instructions\n  print(\"Purpose: Lets you scan for spam comments and mass-delete them all at once \\n\")\n  print(\"NOTE: It's probably better to scan individual videos, because you can scan all those comments,\")\n  print(\"      but scanning your entire channel must be limited and might miss older spam comments.\")\n  print(\"You will be shown the comments to confirm before they are deleted.\")\n\n  # While loop until user confirms they are logged into the correct account\n  confirmedCorrectLogin = False\n  while confirmedCorrectLogin == False:\n    # Get channel ID and title of current user, confirm with user\n    userInfo = auth.get_current_user(config)\n    CURRENTUSER = User(id=userInfo[0], name=userInfo[1], configMatch=userInfo[2]) # Returns [channelID, channelTitle, configmatch]\n    auth.CURRENTUSER = CURRENTUSER\n    print(\"\\n    >  Currently logged in user: \" + f\"{F.LIGHTGREEN_EX}\" + str(CURRENTUSER.name) + f\"{S.R} (Channel ID: {F.LIGHTGREEN_EX}\" + str(CURRENTUSER.id) + f\"{S.R} )\")\n    if choice(\"       Continue as this user?\", CURRENTUSER.configMatch) == True:\n      confirmedCorrectLogin = True\n      utils.clear_terminal()\n    else:\n      auth.remove_token()\n      utils.clear_terminal()\n      YOUTUBE = auth.get_authenticated_service()\n\n  # Declare Classes\n  @dataclass\n  class ScanInstance:\n    matchedCommentsDict: dict         #Comments flagged by the filter\n    duplicateCommentsDict: dict       #Comments flagged as duplicates\n    repostedCommentsDict: dict          #Comments stolen from other users\n    otherCommentsByMatchedAuthorsDict: dict #Comments not matched, but are by a matched author\n    scannedThingsList: list           #List of posts or videos that were scanned\n    spamThreadsDict: dict             #Comments flagged as parent of spam threads\n    allScannedCommentsDict: dict      #All comments scanned for this instance\n    vidIdDict: dict                   #Contains the video ID on which each comment is found\n    vidTitleDict: dict                #Contains the titles of each video ID\n    matchSamplesDict: dict            #Contains sample info for every flagged comment of all types\n    authorMatchCountDict: dict        #The number of flagged comments per author\n    scannedRepliesCount: int          #The current number of replies scanned so far\n    scannedCommentsCount: int         #The current number of comments scanned so far\n    logTime: str                      #The time at which the scan was started\n    logFileName: str                  #Contains a string of the current date/time to be used as a log file name or anything else\n    errorOccurred:bool                #True if an error occurred during the scan\n\n\n  ##############################################\n  ######### PRIMARY INSTANCE FUNCTION ##########\n  ##############################################\n  ## Allows Re-running Program From Main Menu ##\n  ##############################################\n  def primaryInstance(miscData):\n    timestamp = datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\n\n    # Instantiate class for primary instance\n    current = ScanInstance(\n      matchedCommentsDict={},\n      duplicateCommentsDict={},\n      repostedCommentsDict={},\n      otherCommentsByMatchedAuthorsDict={},\n      scannedThingsList=[],\n      spamThreadsDict = {},\n      allScannedCommentsDict={},\n      vidIdDict={},\n      vidTitleDict={},\n      matchSamplesDict={},\n      authorMatchCountDict={},\n      scannedRepliesCount=0,\n      scannedCommentsCount=0,\n      logTime = timestamp,\n      logFileName = None,\n      errorOccurred = False,\n      )\n\n    # Declare Default Variables\n    maxScanNumber = 999999999\n    scanVideoID = None\n    videosToScan = []\n    recentPostsListofDicts = []\n    postURL = \"\"\n    loggingEnabled = False\n    userNotChannelOwner = False\n\n    utils.clear_terminal()\n\n    # -----------------------------------------------------------------------------------------------------------------------------\n    if updateAvailable != False:\n      updateStringLabel = \"Update Available: \"\n      if updateAvailable == True: # Stable update available\n        updateString = f\"{B.LIGHTGREEN_EX}{F.BLACK} Yes {S.R}\"\n\n      elif updateAvailable == \"beta\": # Beta Update Available\n        if updateReleaseChannel == \"stable\":\n          updateStringLabel = \"\"\n          updateString = \"\"\n        else:\n          updateString = f\"{B.LIGHTCYAN_EX}{F.BLACK} Beta {S.R}\"\n      elif updateAvailable == None:\n        updateString = f\"{F.LIGHTRED_EX}Error{S.R}\"\n        print(\"> Note: Error during check for updates. Select 'Check For Updates' for details.\")\n\n    else:\n      if config['auto_check_update'] == False:\n        updateStringLabel = \"Update Checking: \"\n        updateString = \"Off\"\n      else:\n        updateStringLabel = \"\"\n        updateString = \"\"\n\n    # User selects scanning mode,  while Loop to get scanning mode, so if invalid input, it will keep asking until valid input\n    print(\"\\n{:<59}{:<18}{:>7}\".format(\"> At any prompt, enter 'X' to return here\", updateStringLabel, updateString))\n    print(\"> Enter 'Q' now to quit\")\n\n    print(f\"\\n\\n-------------------------------- {F.YELLOW}Scanning Options{S.R} --------------------------------\")\n    print(f\"      1. Scan {F.LIGHTCYAN_EX}specific videos{S.R}\")\n    print(f\"      2. Scan {F.LIGHTCYAN_EX}recent videos{S.R} for a channel\")\n    print(f\"      3. Scan recent comments across your {F.LIGHTBLUE_EX}Entire Channel{S.R}\")\n    print(f\"      4. Scan a specific {F.LIGHTMAGENTA_EX}community post{S.R} (Experimental)\")\n    print(f\"      5. Scan {F.LIGHTMAGENTA_EX}recent community posts{S.R} for a channel (Experimental)\")\n    print(f\"\\n--------------------------------- {F.YELLOW}Other Options{S.R} ----------------------------------\")\n    print(f\"      6. Create your own {F.LIGHTGREEN_EX}config file(s){S.R} to run the program with pre-set settings\")\n    print(f\"      7. Remove comments using a {F.LIGHTRED_EX}pre-existing list{S.R} or log file\")\n    print(f\"      8. Recover deleted comments using log file\")\n    print(f\"      9. Check & Download {F.LIGHTCYAN_EX}Updates{S.R}\")\n    print(f\"      10. {F.BLACK}{B.LIGHTGREEN_EX} NEW! {S.R} Helpful Tools\")\n    print(\"\")\n\n\n\n    # Make sure input is valid, if not ask again\n    validMode:bool = False\n    validConfigSetting:bool = True\n    while validMode == False:\n      if validConfigSetting == True and config and config['scan_mode'] != 'ask':\n        scanMode = config['scan_mode']\n      else:\n        scanMode = input(\"Choice (1-10): \")\n      if scanMode.lower() == \"q\":\n        sys.exit()\n\n      # Set scanMode Variable Names\n      validModeValues = ['1', '2', '3', '4', '5', '6', '7', '8', '9','10', 'chosenvideos', 'recentvideos', 'entirechannel', 'communitypost', 'commentlist', 'recentcommunityposts']\n      if scanMode in validModeValues:\n        validMode = True\n        if scanMode == \"1\" or scanMode == \"chosenvideos\":\n          scanMode = \"chosenVideos\"\n        elif scanMode == \"2\" or scanMode == \"recentvideos\":\n          scanMode = \"recentVideos\"\n        elif scanMode == \"3\" or scanMode == \"entirechannel\":\n          scanMode = \"entireChannel\"\n        elif scanMode == \"4\" or scanMode == \"communitypost\":\n          scanMode = \"communityPost\"\n        elif scanMode == \"5\" or scanMode == \"recentcommunityposts\":\n          scanMode = \"recentCommunityPosts\"\n        elif scanMode == \"6\":\n          scanMode = \"makeConfig\"\n        elif scanMode == \"7\" or scanMode == \"commentlist\":\n          scanMode = \"commentList\"\n        elif scanMode == \"8\":\n          scanMode = \"recoverMode\"\n        elif scanMode == \"9\":\n          scanMode = \"checkUpdates\"\n        elif scanMode == \"10\":\n          scanMode = \"tools\"\n      else:\n        print(f\"\\nInvalid choice: {scanMode} - Enter a number from 1 to 10\")\n        validConfigSetting = False\n\n# ================================================================================= CHOSEN VIDEOS ======================================================================================================\n\n    # If chooses to scan single video - Validate Video ID, get title, and confirm with user\n    if scanMode == \"chosenVideos\":\n      # While loop to get video ID and if invalid ask again\n      confirm:bool = False\n      validConfigSetting = True\n      while confirm == False:\n        numVideos = 1\n        allVideosMatchBool = True\n        miscData.totalCommentCount = 0\n\n        # Checks if input list is empty and if contains only valid video IDs\n        listNotEmpty:bool = False\n        validVideoIDs = False # False just to get into the loop\n        while listNotEmpty == False or validVideoIDs == False:\n          if validConfigSetting == True and config and config['videos_to_scan'] != 'ask':\n            enteredVideosList = utils.string_to_list(config['videos_to_scan'])\n            if len(enteredVideosList) == 0:\n              validConfigSetting = False\n              listNotEmpty = False\n              print(f\"{F.LIGHTRED_EX}\\nError: Video list is empty!{S.R}\")\n            else:\n              listNotEmpty = True\n          else:\n            print(f\"\\nEnter a list of {F.YELLOW}Video Links{S.R} or {F.YELLOW}Video IDs{S.R} to scan, separated by commas.\")\n            print(\" > Note: All videos must be from the same channel.\")\n            enteredVideosList = utils.string_to_list(input(\"\\nEnter here: \"))\n            if str(enteredVideosList).lower() == \"['x']\":\n              return True # Return to main menu\n            validConfigSetting = False\n            if len(enteredVideosList) == 0:\n              listNotEmpty = False\n              print(f\"{F.LIGHTRED_EX}\\nError: Video list is empty!{S.R}\")\n            else:\n              listNotEmpty = True\n\n          # Validates all video IDs/Links, gets necessary info about them\n          validVideoIDs:bool = True\n          videosToScan = []\n          videoListResult = [] # True/False, video ID, videoTitle, commentCount, channelID, channelTitle\n          for i in range(len(enteredVideosList)):\n            videoListResult.append([])\n            videosToScan.append({})\n            videoListResult[i] = validation.validate_video_id(enteredVideosList[i]) # Sends link or video ID for isolation and validation\n            if videoListResult[i][0] == False:\n              validVideoIDs = False\n              validConfigSetting = False\n              confirm = False\n              break\n\n        for i in range(len(videoListResult)): # Change this\n          if videoListResult[i][0] == True:\n            videosToScan[i]['videoID'] = str(videoListResult[i][1])\n            videosToScan[i]['videoTitle'] = str(videoListResult[i][2])\n            videosToScan[i]['commentCount'] = int(videoListResult[i][3])\n            videosToScan[i]['channelOwnerID'] = str(videoListResult[i][4])\n            videosToScan[i]['channelOwnerName'] = str(videoListResult[i][5])\n            miscData.totalCommentCount += int(videoListResult[i][3])\n            if str(videoListResult[i][1]) not in current.vidTitleDict:\n              current.vidTitleDict[videoListResult[i][1]] = str(videoListResult[i][2])\n          else:\n            print(f\"\\nInvalid Video: {enteredVideosList[i]}  |  Video ID = {videoListResult[1]}\")\n            validConfigSetting = False\n            break\n\n          # Check each video against first to ensure all on same channel\n          if allVideosMatchBool == True:\n            misMatchVidIndex = 0\n          if videosToScan[0]['channelOwnerID'] != videosToScan[i]['channelOwnerID']:\n            misMatchVidIndex += 1\n            if allVideosMatchBool == True:\n              print(f\"\\n {F.LIGHTRED_EX}ERROR: Videos scanned together all must be from the same channel.{S.R}\")\n              print(\"  The following videos do not match the channel owner of the first video in the list: \")\n            if misMatchVidIndex == 11 and len(enteredVideosList) > 10:\n              remainingCount = str(len(enteredVideosList) - 10)\n              userChoice = choice(f\"There are {remainingCount} more mis-matched videos, do you want to see the rest?\")\n              if userChoice == False:\n                break\n              elif userChoice == None:\n                return True # Return to main menu\n            print(f\"  {misMatchVidIndex}. {str(videosToScan[i]['videoTitle'])}\")\n            validConfigSetting = False\n            allVideosMatchBool = False\n\n        # If videos not from same channel, skip and re-prompt\n        if allVideosMatchBool == True:\n          # Print video titles, if there are many, ask user to see all if more than 5\n          i = 0\n          print(f\"\\n{F.BLUE}Chosen Videos:{S.R}\")\n          for video in videosToScan:\n            i += 1\n            if i==6 and len(enteredVideosList) > 5:\n              remainingCount = str(len(enteredVideosList) - 5)\n              if config['skip_confirm_video'] == False:\n                userChoice = choice(f\"You have entered many videos, do you need to see the rest (x{remainingCount})?\")\n                if userChoice == False:\n                  break\n                elif userChoice == None:\n                  return True # Return to main menu\n            print(f\" {i}. {video['videoTitle']}\")\n          print(\"\")\n\n          if CURRENTUSER.id != videosToScan[0]['channelOwnerID']:\n            userNotChannelOwner = True\n\n          miscData.channelOwnerID = videosToScan[0]['channelOwnerID']\n          miscData.channelOwnerName = videosToScan[0]['channelOwnerName']\n\n          # Ask if correct videos, or skip if config\n          if config['skip_confirm_video'] == True:\n            confirm = True\n          else:\n            if userNotChannelOwner == True and moderator_mode == False:\n              print(f\"{F.LIGHTRED_EX}NOTE: This is not your video. Enabling '{F.YELLOW}Not Your Channel Mode{F.LIGHTRED_EX}'. You can report spam comments, but not delete them.{S.R}\")\n            elif userNotChannelOwner == True and moderator_mode == True:\n              print(f\"{F.LIGHTRED_EX}NOTE: {F.YELLOW}Moderator Mode is enabled{F.LIGHTRED_EX}. You can hold comments for review when using certain modes{S.R}\")\n            print(\"Total number of comments to scan: \" + str(miscData.totalCommentCount))\n            if miscData.totalCommentCount >= 100000:\n              print(f\"\\n{B.YELLOW}{F.BLACK} WARNING: {S.R} You have chosen to scan a large amount of comments. The default API quota limit ends up\")\n              print(f\" around {F.YELLOW}10,000 comment deletions per day{S.R}. If you find more spam than that you will go over the limit.\")\n              print(f\"        > Read more about the quota limits for this app here: {F.YELLOW}TJoe.io/api-limit-info{S.R}\")\n              if userNotChannelOwner == False or moderator_mode == True:\n                print(f\"{F.LIGHTCYAN_EX}> Note:{S.R} You may want to disable 'check_deletion_success' in the config, as this doubles the API cost! (So a 5K limit)\")\n            confirm = choice(\"Is this video list correct?\", bypass=validConfigSetting)\n            if confirm == None:\n              return True # Return to main menu\n\n# ============================================================================ RECENT VIDEOS ==========================================================================================================\n\n    elif scanMode == \"recentVideos\":\n      confirm = False\n      validEntry = False\n      validChannel = False\n\n      while validChannel == False:\n        # Get and verify config setting for channel ID\n        if config['channel_to_scan'] != 'ask':\n          if config['channel_to_scan'] == 'mine':\n            channelID = CURRENTUSER.id\n            channelTitle = CURRENTUSER.name\n            validChannel = True\n            break\n          else:\n            validChannel, channelID, channelTitle = validation.validate_channel_id(config['channel_to_scan'])\n            if validChannel == True:\n              break\n            else:\n              print(\"Invalid Channel ID or Link in config file!\")\n\n        print(f\"\\nEnter a {F.YELLOW}channel ID or Link{S.R} to scan {F.LIGHTCYAN_EX}recent videos{S.R} from\")\n        print(f\"   > If scanning {F.YELLOW}your own channel{S.R}, just hit {F.LIGHTGREEN_EX}Enter{S.R}\")\n        inputtedChannel = input(\"\\nEnter Here: \")\n        if inputtedChannel == \"\":\n          channelID = CURRENTUSER.id\n          channelTitle = CURRENTUSER.name\n          validChannel = True\n        elif str(inputtedChannel).lower() == \"x\":\n          return True # Return to main menu\n        else:\n          validChannel, channelID, channelTitle = validation.validate_channel_id(inputtedChannel)\n\n      if CURRENTUSER.id != channelID:\n        userNotChannelOwner = True\n\n      print(f\"\\nChosen Channel: {F.LIGHTCYAN_EX}{channelTitle}{S.R}\")\n\n      # Get number of recent videos to scan, either from config or user input, and validate\n      while validEntry == False or confirm == False:\n        videosToScan=[]\n        validConfigSetting = True\n        if config['recent_videos_amount'] != 'ask' and validConfigSetting == True:\n          numVideos = config['recent_videos_amount']\n          try:\n            numVideos = int(numVideos)\n          except:\n            validConfigSetting = False\n            print(\"Invalid number entered in config file for recent_videos_amount\")\n            numVideos = None\n        else:\n          print(f\"\\nEnter the {F.YELLOW}number of most recent videos{S.R} to scan back-to-back:\")\n          numVideos = input(\"\\nNumber of Recent Videos: \")\n          print(\"\")\n          if str(numVideos).lower() == \"x\":\n            return True # Return to main menu\n        try:\n          numVideos = int(numVideos)\n          if numVideos > 0 and numVideos <= 5000:\n            validEntry = True\n            validConfigSetting = True\n          else:\n            print(\"Error: Entry must be from 1 to 5000 (the YouTube API Limit)\")\n            validEntry = False\n            validConfigSetting = False\n        except ValueError:\n          print(f\"{F.LIGHTRED_EX}Error:{S.R} Entry must be a whole number greater than zero.\")\n          validEntry = False\n        if validEntry == True and numVideos >= 1000:\n          print(f\"\\n{B.YELLOW}{F.BLACK} WARNING: {S.R} You have chosen to scan a large amount of videos. With the default API quota limit,\")\n          print(f\" every 1000 videos will use up 20% of the quota {F.YELLOW}just from listing the videos alone, before any comment scanning.{S.R}\")\n          print(f\"        > Read more about the quota limits for this app here: {F.YELLOW}TJoe.io/api-limit-info{S.R}\")\n\n        if validEntry == True:\n          # Fetch recent videos and print titles to user for confirmation\n          videosToScan = operations.get_recent_videos(current, channelID, numVideos)\n          if str(videosToScan) == \"MainMenu\":\n            return True # Return to main menu\n          if len(videosToScan) == 0:\n            print(f\"\\n{F.LIGHTRED_EX}Error:{S.R} No scannable videos found in selected range!  They all may have no comments and/or are live streams.\")\n            if config['auto_close'] == True:\n              print(\"Auto-close enabled in config. Exiting in 5 seconds...\")\n              time.sleep(5)\n              sys.exit()\n            else:\n              input(\"\\nPress Enter to return to main menu...\")\n              return True\n\n          # Get total comment count\n          miscData.totalCommentCount = 0\n          for video in videosToScan:\n            miscData.totalCommentCount += int(video['commentCount'])\n\n          if len(videosToScan) < numVideos:\n            print(f\"\\n{F.YELLOW} WARNING:{S.R} Only {len(videosToScan)} videos found. Videos may be skipped if there are no comments.\")\n          print(\"\\nRecent Videos To Be Scanned:\")\n          for i in range(len(videosToScan)):\n            if config['skip_confirm_video'] == False:\n              if i == 10 and len(videosToScan) > 11:\n                remainingCount = str(len(videosToScan) - 10)\n                userChoice = choice(f\"There are {remainingCount} more recent videos, do you want to see the rest?\")\n                if userChoice == False:\n                  break\n                elif userChoice == None:\n                  return True # Return to main menu\n            print(f\"  {i+1}. {videosToScan[i]['videoTitle']}\")\n\n          if config['skip_confirm_video'] == True and validConfigSetting == True:\n            confirm = True\n          else:\n            if userNotChannelOwner == True and moderator_mode == False:\n              print(f\"{F.LIGHTRED_EX}NOTE: These aren't your videos. Enabling '{F.YELLOW}Not Your Channel Mode{F.LIGHTRED_EX}'. You can report spam comments, but not delete them.{S.R}\")\n            elif userNotChannelOwner == True and moderator_mode == True:\n              print(f\"{F.LIGHTRED_EX}NOTE: {F.YELLOW}Moderator Mode is enabled{F.LIGHTRED_EX}. You can hold comments for review when using certain modes{S.R}\")\n            print(\"\\nTotal number of comments to scan: \" + str(miscData.totalCommentCount))\n            if miscData.totalCommentCount >= 100000:\n              print(f\"\\n{B.YELLOW}{F.BLACK} WARNING: {S.R} You have chosen to scan a large amount of comments. The default API quota limit ends up\")\n              print(f\" around {F.YELLOW}10,000 comment deletions per day{S.R}. If you find more spam than that you will go over the limit.\")\n              print(f\"        > Read more about the quota limits for this app here: {F.YELLOW}TJoe.io/api-limit-info{S.R}\")\n              if userNotChannelOwner == True or moderator_mode == True:\n                print(f\"{F.LIGHTCYAN_EX}> Note:{S.R} You may want to disable 'check_deletion_success' in the config, as this doubles the API cost! (So a 5K limit)\")\n            confirm = choice(\"Is everything correct?\", bypass=config['skip_confirm_video'])\n            if confirm == None:\n              return True # Return to main menu\n\n      miscData.channelOwnerID = channelID\n      miscData.channelOwnerName = channelTitle\n\n# ============================================================================= ENTIRE CHANNEL ============================================================================================================\n\n    # If chooses to scan entire channel - Validate Channel ID\n    elif scanMode == \"entireChannel\":\n      numVideos = 1 # Using this variable to indicate only one loop of scanning done later\n      # While loop to get max scan number, not an integer, asks again\n      validInteger = False\n      if config: validConfigSetting = True\n      while validInteger == False:\n        try:\n          if validConfigSetting == True and config and config['max_comments'] != 'ask':\n            maxScanNumber = int(config['max_comments'])\n          else:\n            maxScanNumber = input(f\"Enter the maximum {F.YELLOW}number of comments{S.R} to scan: \")\n            if str(maxScanNumber).lower() == \"x\":\n              return True # Return to main menu\n            maxScanNumber = int(maxScanNumber)\n\n            if maxScanNumber >= 100000:\n              print(f\"\\n{B.YELLOW}{F.BLACK} WARNING: {S.R} You have chosen to scan a large amount of comments. The default API quota limit ends up\")\n              print(f\" around {F.YELLOW}10,000 comment deletions per day{S.R}. If you find more spam than that you will go over the limit.\")\n              print(f\"        > Read more about the quota limits for this app here: {F.YELLOW}TJoe.io/api-limit-info{S.R}\")\n              if userNotChannelOwner == True or moderator_mode == True:\n                print(f\"{F.LIGHTCYAN_EX}> Note:{S.R} You may want to disable 'check_deletion_success' in the config, as this doubles the API cost! (So a 5K limit)\")\n              userChoice = choice(\"Do you still want to continue?\")\n              if userChoice == None:\n                return True # Return to main menu\n\n          if maxScanNumber > 0:\n            validInteger = True # If it gets here, it's an integer, otherwise goes to exception\n          else:\n            print(\"\\nInvalid Input! Number must be greater than zero.\")\n            validConfigSetting = False\n        except:\n          print(\"\\nInvalid Input! - Must be a whole number.\")\n          validConfigSetting = False\n\n      miscData.channelOwnerID = CURRENTUSER.id\n      miscData.channelOwnerName = CURRENTUSER.name\n\n# ================================================================================ COMMUNITY POST =====================================================================================================\n\n    elif scanMode == 'communityPost':\n      print(f\"\\nNOTES: This mode is {F.YELLOW}experimental{S.R}, and not as polished as other features. Expect some janky-ness.\")\n      print(\"   > It is also much slower to retrieve comments, because it does not use the API\")\n      confirm = False\n      while confirm == False:\n        communityPostInput = input(\"\\nEnter the ID or link of the community post: \")\n        if str(communityPostInput).lower() == \"x\":\n          return True # Return to main menu\n        # Validate post ID or link, get additional info about owner, and useable link\n        isValid, communityPostID, postURL, postOwnerID, postOwnerUsername = validation.validate_post_id(communityPostInput)\n        if isValid == True:\n          print(\"\\nCommunity Post By: \" + postOwnerUsername)\n          if postOwnerID != CURRENTUSER.id:\n            userNotChannelOwner = True\n            print(f\"\\n{F.YELLOW}Warning:{S.R} You are scanning someone else's post. '{F.LIGHTRED_EX}Not Your Channel Mode{S.R}' Enabled.\")\n          confirm = choice(\"Continue?\")\n          if confirm == None:\n            return True # Return to main menu\n        else:\n          print(\"Problem interpreting the post information, please check the link or ID.\")\n      miscData.channelOwnerID = postOwnerID\n      miscData.channelOwnerName = postOwnerUsername\n\n      # Checking config for max comments in config\n      if config['max_comments'] != 'ask':\n        validInteger = False\n        try:\n          maxScanNumber = int(config['max_comments'])\n          if maxScanNumber > 0:\n            validInteger = True\n          else:\n            pass\n        except:\n          pass\n\n        if validInteger == False:\n          print(\"\\nInvalid max_comments setting in config! Number must be a whole number greater than zero.\")\n        while validInteger == False:\n          maxScanInput = input(f\"\\nEnter the maximum {F.YELLOW}number of comments{S.R} to scan: \")\n          if str(maxScanInput).lower() == \"x\":\n            return True # Return to main menu\n          try:\n            maxScanNumber = int(maxScanInput)\n            if maxScanNumber > 0:\n              validInteger = True # If it gets here, it's an integer, otherwise goes to exception\n            else:\n              print(\"\\nInvalid Input! Number must be a whole number greater than zero.\")\n          except:\n            print(\"\\nInvalid Input! - Must be a whole number greater than zero.\")\n\n# ==================================================================== RECENT COMMUNITY POSTS =============================================================================================================\n\n    # Recent Community Posts\n    elif scanMode == 'recentCommunityPosts':\n      print(f\"\\nNOTES: This mode is {F.YELLOW}experimental{S.R}, and not as polished as other features. Expect some janky-ness.\")\n      print(\"   > It is also much slower to retrieve comments, because it does not use the API\")\n\n      confirm = False\n      validEntry = False\n      validChannel = False\n\n      while validChannel == False:\n        # Get and verify config setting for channel ID\n        if config['channel_to_scan'] != 'ask':\n          if config['channel_to_scan'] == 'mine':\n            channelID = CURRENTUSER.id\n            channelTitle = CURRENTUSER.name\n            validChannel = True\n            break\n          else:\n            validChannel, channelID, channelTitle = validation.validate_channel_id(config['channel_to_scan'])\n            if validChannel == True:\n              break\n            else:\n              print(\"Invalid Channel ID or Link in config file!\")\n\n        print(f\"\\nEnter a {F.YELLOW}channel ID or Link{S.R} to scan {F.LIGHTCYAN_EX}recent community posts{S.R} from\")\n        print(f\"   > If scanning {F.YELLOW}your own channel{S.R}, just hit {F.LIGHTGREEN_EX}Enter{S.R}\")\n        inputtedChannel = input(\"\\nEnter Here: \")\n        if inputtedChannel == \"\":\n          channelID = CURRENTUSER.id\n          channelTitle = CURRENTUSER.name\n          validChannel = True\n        elif str(inputtedChannel).lower() == \"x\":\n          return True # Return to main menu\n        else:\n          validChannel, channelID, channelTitle = validation.validate_channel_id(inputtedChannel)\n\n      if CURRENTUSER.id != channelID:\n        userNotChannelOwner = True\n\n      # Get and print community posts\n      recentPostsListofDicts = community_downloader.fetch_recent_community_posts(channelID)\n\n      print(\"\\n------------------------------------------------------------\")\n      print(f\"Retrieved {F.YELLOW}{len(recentPostsListofDicts)} recent posts{S.R} from {F.LIGHTCYAN_EX}{channelTitle}{S.R}\")\n      print(f\"\\n  Post Content Samples:\")\n      for i in range(len(recentPostsListofDicts)):\n        # recentPostsListofDicts = {post id : post text} - Below prints sample of post text\n        print(f\"    {i+1}.\".ljust(9, \" \") + f\"{list(recentPostsListofDicts[i].values())[0][0:50]}\")\n\n      if userNotChannelOwner == True:\n              print(f\"\\n > {F.LIGHTRED_EX}Warning:{S.R} You are scanning someone else's post. {F.LIGHTRED_EX}'Not Your Channel Mode'{S.R} Enabled.\")\n\n      print(f\"\\n{F.YELLOW}How many{S.R} of the most recent posts do you want to scan?\")\n\n      inputStr = \"\"\n      while True:\n        if config['recent_videos_amount'] != 'ask' and inputStr == \"\":\n          inputStr = config['recent_videos_amount']\n        else:\n          inputStr = input(\"\\nNumber of Recent Posts: \")\n          if str(inputStr).lower() == \"x\":\n            return True\n\n        try:\n          numRecentPosts = int(inputStr)\n          if numRecentPosts > len(recentPostsListofDicts):\n            print(\"Number entered is more than posts available. Will just scan all posts available.\")\n            numRecentPosts = len(recentPostsListofDicts)\n            break\n          elif numRecentPosts <= 0:\n            print(\"Please enter a whole number greater than zero.\")\n          else:\n            break\n        except ValueError:\n          print(\"Invalid Input! - Must be a whole number.\")\n\n      miscData.channelOwnerID = channelID\n      miscData.channelOwnerName = channelTitle\n\n# =============================================================================== OTHER MENU OPTIONS =============================================================================================\n\n    # Create config file\n    elif scanMode == \"makeConfig\":\n      result = files.create_config_file(configDict=config)\n      if str(result) == \"MainMenu\":\n        return True\n\n    # Check for latest version\n    elif scanMode == \"checkUpdates\":\n      files.check_lists_update(spamListDict)\n      files.check_for_update(version, updateReleaseChannel)\n      files.check_for_filter_update(filterListDict, silentCheck=True)\n      input(\"\\nPress Enter to return to main menu...\")\n      return True\n\n    # Recove deleted comments mode\n    elif scanMode == \"recoverMode\":\n      result = modes.recover_deleted_comments(config)\n      if str(result) == \"MainMenu\":\n        return True\n\n    elif scanMode == \"commentList\":\n      result = modes.delete_comment_list(config)\n      if str(result) == \"MainMenu\":\n        return True\n\n    elif scanMode == \"tools\":\n      result = user_tools.user_tools_menu(config)\n      if str(result) == \"MainMenu\":\n        return True\n\n# ====================================================================================================================================================================================================\n# ====================================================================================================================================================================================================\n\n    # Set Menu Colors\n    autoSmartColor = F.YELLOW\n    sensitiveColor = F.YELLOW\n    IDColor = F.LIGHTRED_EX\n    usernameColor = F.LIGHTBLUE_EX\n    textColor = F.CYAN\n    usernameTextColor = F.LIGHTBLUE_EX\n    asciiColor = F.LIGHTMAGENTA_EX\n    styleID = S.BRIGHT\n    styleOther = S.BRIGHT\n    a1 = \"\"\n    a2 = \"\"\n\n    # Change menu display & colors of some options depending on privileges\n    if userNotChannelOwner:\n      styleOther = S.DIM\n      a2 = f\"{F.LIGHTRED_EX}*{S.R}\" # a = asterisk\n\n    if not moderator_mode and userNotChannelOwner:\n      styleID = S.DIM\n      a1 = f\"{F.LIGHTRED_EX}*{S.R}\"\n\n    # User inputs filtering mode\n    print(\"\\n-------------------------------------------------------\")\n    print(f\"~~~~~~~~~~~ Choose how to identify spammers ~~~~~~~~~~~\")\n    print(\"-------------------------------------------------------\")\n    print(f\"{S.BRIGHT} 1. {S.R}{F.BLACK}{B.LIGHTGREEN_EX}(RECOMMENDED):{S.R} {S.BRIGHT}{autoSmartColor}Auto-Smart Mode{F.R}: Automatically detects multiple spammer techniques{S.R}\")\n    print(f\"{S.BRIGHT} 2. {sensitiveColor}Sensitive-Smart Mode{F.R}: Much more likely to catch all spammers, but with significantly more false positives{S.R}\")\n    print(f\"{a1}{styleID} 3. Enter Spammer's {IDColor}channel ID(s) or link(s){F.R}{S.R}\")\n    print(f\"{a2}{styleOther} 4. Scan {usernameColor}usernames{F.R} for criteria you choose{S.R}\")\n    print(f\"{a2}{styleOther} 5. Scan {textColor}comment text{F.R} for criteria you choose{S.R}\")\n    print(f\"{a2}{styleOther} 6. Scan both {usernameTextColor}usernames{F.R} and {textColor}comment text{F.R} for criteria you choose{S.R}\")\n    print(f\"{a2}{styleOther} 7. ASCII Mode: Scan usernames for {asciiColor}ANY non-ASCII special characters{F.R} (May cause collateral damage!){S.R}\")\n\n\n    if userNotChannelOwner == True and moderator_mode == False:\n      print(f\" {F.LIGHTRED_EX}*Note: With 'Not Your Channel Mode' enabled, you can only report matched comments while using 'Auto-Smart Mode' \\n        or 'Sensitive-Smart Mode'.{S.R}\") # Based on filterModesAllowedforNonOwners\n    elif userNotChannelOwner == True and moderator_mode == True:\n      print(f\" {F.LIGHTRED_EX}*Note: With 'Moderator Mode', you can Hold and/or Report using: 'Auto-Smart', 'Sensitive-Smart', and Channel ID modes.{S.R}\")\n    # Make sure input is valid, if not ask again\n    validFilterMode = False\n    validFilterSubMode = False\n    filterSubMode = None\n    validConfigSetting = True\n\n    validConfigSetting = True\n    while validFilterMode == False:\n      if validConfigSetting == True and config and config['filter_mode'] != 'ask':\n        filterChoice = config['filter_mode']\n      else:\n        filterChoice = input(\"\\nChoice (1-7): \")\n\n      if str(filterChoice).lower() == \"x\":\n        return True # Return to main menu\n\n      validChoices = ['1', '2', '3', '4', '5', '6', '7', 'id', 'username', 'text', 'nameandtext', 'autoascii', 'autosmart', 'sensitivesmart']\n      if filterChoice in validChoices:\n        validFilterMode = True\n        # Set string variable names for filtering modes\n        if filterChoice == \"1\" or filterChoice == \"autosmart\":\n          filterMode = \"AutoSmart\"\n        elif filterChoice == \"2\" or filterChoice == \"sensitivesmart\":\n          filterMode = \"SensitiveSmart\"\n        elif filterChoice == \"3\" or filterChoice == \"id\":\n          filterMode = \"ID\"\n        elif filterChoice == \"4\" or filterChoice == \"username\":\n          filterMode = \"Username\"\n        elif filterChoice == \"5\" or filterChoice == \"text\":\n          filterMode = \"Text\"\n        elif filterChoice == \"6\" or filterChoice == \"nameandtext\":\n          filterMode = \"NameAndText\"\n        elif filterChoice == \"7\" or filterChoice == \"autoascii\":\n          filterMode = \"AutoASCII\"\n\n      else:\n        print(f\"\\nInvalid Filter Mode: {filterChoice} - Enter a whole number from 1-7\")\n        validConfigSetting = False\n\n    ## Get filter sub-mode to decide if searching characters or string\n    if config['filter_submode'] != 'ask':\n      filterSubMode = config['filter_submode']\n      validConfigSetting = True\n    else:\n      validConfigSetting = False\n\n    if filterMode == \"Username\" or filterMode == \"Text\" or filterMode == \"NameAndText\":\n      print(\"\\n--------------------------------------------------------------\")\n      if filterMode == \"Username\":\n        print(\"~~~ What do you want to scan usernames for specifically? ~~~\")\n      elif filterMode == \"Text\":\n        print(\"~~~ What do you want to scan comment text for specifically? ~~~\")\n      elif filterMode == \"NameAndText\":\n        print(\"~~~ What do you want to scan names and comments for specifically? ~~~\")\n      print(f\" 1. A {F.CYAN}certain special character{S.R}, or set of multiple characters\")\n      print(f\" 2. An {F.LIGHTMAGENTA_EX}entire string{S.R}, or multiple strings\")\n      print(f\" 3. Advanced: A custom {F.YELLOW}Regex pattern{S.R} you'll enter\")\n\n      while validFilterSubMode == False:\n        if validConfigSetting == True:\n          pass\n        else:\n          filterSubMode = input(\"\\nChoice (1, 2, or 3): \")\n        if str(filterSubMode).lower() == \"x\":\n          return True # Return to main menu\n\n        validFilterSubModes = [\"1\", \"2\", \"3\", \"characters\", \"strings\", \"regex\"]\n        if filterSubMode in validFilterSubModes:\n          validFilterSubMode = True\n          validConfigSetting = True\n          if filterSubMode == \"1\" or filterSubMode == \"characters\":\n            filterSubMode = \"chars\"\n          elif filterSubMode == \"2\" or filterSubMode == \"strings\":\n            filterSubMode = \"string\"\n          elif filterSubMode == \"3\" or filterSubMode == \"regex\":\n            filterSubMode = \"regex\"\n        else:\n          print(f\"\\nInvalid choice: {filterSubMode} - Enter 1, 2 or 3\")\n          validConfigSetting = False\n\n\n    ### Prepare Filtering Modes ###\n    # Default values for filter criteria\n    inputtedSpammerChannelID = None\n    inputtedUsernameFilter = None\n    inputtedCommentTextFilter = None\n    regexPattern = \"\"\n\n    if filterMode == \"ID\":\n      filterSettings = modes.prepare_filter_mode_ID(scanMode, config)\n      inputtedSpammerChannelID = filterSettings[0]\n\n    elif filterMode == \"AutoASCII\":\n      filterSettings = modes.prepare_filter_mode_non_ascii(scanMode, config)\n      regexPattern = filterSettings[0]\n\n    elif filterMode == \"AutoSmart\":\n      filterSettings = modes.prepare_filter_mode_smart(scanMode, config, miscData)\n      inputtedUsernameFilter = filterSettings[0]\n      inputtedCommentTextFilter = filterSettings[0]\n    elif filterMode == \"SensitiveSmart\":\n      filterSettings = modes.prepare_filter_mode_smart(scanMode, config, miscData, sensitive=True)\n      inputtedUsernameFilter = filterSettings[0]\n      inputtedCommentTextFilter = filterSettings[0]\n\n    elif filterSubMode == \"chars\":\n      filterSettings = modes.prepare_filter_mode_chars(scanMode, filterMode, config)\n    elif filterSubMode == \"string\":\n      filterSettings = modes.prepare_filter_mode_strings(scanMode, filterMode, config)\n    elif filterSubMode == \"regex\":\n      filterSettings = modes.prepare_filter_mode_regex(scanMode, filterMode, config)\n      regexPattern = filterSettings[0]\n\n    if filterSettings[0] == \"MainMenu\":\n      return True\n\n    if filterMode == \"Username\":\n      inputtedUsernameFilter = filterSettings[0]\n    elif filterMode == \"Text\":\n      inputtedCommentTextFilter = filterSettings[0]\n    elif filterMode == \"NameAndText\":\n      inputtedUsernameFilter = filterSettings[0]\n      inputtedCommentTextFilter = filterSettings[0]\n\n    # Prepare scan mode info dictionary\n    if videosToScan:\n      current.scannedThingsList = list(item['videoID'] for item in videosToScan)\n    elif recentPostsListofDicts:\n     current.scannedThingsList = list(list(post.keys())[0] for post in recentPostsListofDicts)[0:numRecentPosts]\n    elif postURL:\n      current.scannedThingsList = [postURL]\n    else:\n      current.scannedThingsList = []\n\n    ##################### START SCANNING #####################\n    filtersDict = {\n      'filterSettings': filterSettings,\n      'filterMode': filterMode,\n      'filterSubMode': filterSubMode,\n      'CustomChannelIdFilter': inputtedSpammerChannelID,\n      'CustomUsernameFilter': inputtedUsernameFilter,\n      'CustomCommentTextFilter': inputtedCommentTextFilter,\n      'CustomRegexPattern': regexPattern\n      }\n\n    if scanMode == \"communityPost\" or scanMode == \"recentCommunityPosts\":\n      def scan_community_post(current, config, communityPostID, limit, postScanProgressDict=None, postText=None):\n        authorKeyAllCommentsDict = {}\n        allCommunityCommentsDict = get_community_comments(communityPostID=communityPostID, limit=limit, postScanProgressDict=postScanProgressDict, postText=postText)\n        retrievedCount = len(allCommunityCommentsDict)\n        print(f\"\\nRetrieved {retrievedCount} comments from post.\\n\")\n        scannedCount = 0\n        threadDict = {}\n\n        # Analyze and store comments\n        for key, value in allCommunityCommentsDict.items():\n          currentCommentDict = {\n            'authorChannelID':value['authorChannelID'],\n            'parentAuthorChannelID':None,\n            'authorChannelName':value['authorName'],\n            'commentText':value['commentText'],\n            'commentID':key,\n            #'originalCommentID': None\n            }\n          try:\n            if value['authorChannelID'] in authorKeyAllCommentsDict:\n              authorKeyAllCommentsDict[value['authorChannelID']].append(currentCommentDict)\n            else:\n              authorKeyAllCommentsDict[value['authorChannelID']] = [currentCommentDict]\n          except TypeError: # Try/Except might not be necessary, might remove later\n            pass\n          operations.check_against_filter(current, filtersDict, miscData, config, currentCommentDict, videoID=communityPostID)\n\n          # Scam for spam threads\n          if (filtersDict['filterMode'] == \"AutoSmart\" or filtersDict['filterMode'] == \"SensitiveSmart\") and config['detect_spam_threads'] == True:\n            threadDict = operations.make_community_thread_dict(key, allCommunityCommentsDict)\n            if threadDict and len(threadDict) > 7: # Only if more than 7 replies\n              parentCommentDict = dict(currentCommentDict)\n              parentCommentDict['videoID'] = communityPostID\n              current = operations.check_spam_threads(current, filtersDict, miscData, config, parentCommentDict, threadDict)\n          scannedCount += 1\n\n          # Print Progress\n          percent = ((scannedCount / retrievedCount) * 100)\n          progressStats = f\"[ {str(scannedCount)} / {str(retrievedCount)} ]\".ljust(15, \" \") + f\" ({percent:.2f}%)\"\n          print(f'  {progressStats}  -  Analyzing Comments For Spam ', end='\\r')\n        print(\"                                                                                        \")\n\n        dupeCheckModes = utils.string_to_list(config['duplicate_check_modes'])\n        if filtersDict['filterMode'].lower() in dupeCheckModes:\n          operations.check_duplicates(current, config, miscData, authorKeyAllCommentsDict, communityPostID)\n        # repostCheckModes = utils.string_to_list(config['stolen_comments_check_modes'])\n        # if filtersDict['filterMode'].lower() in repostCheckModes:\n        #   operations.check_reposts(current, config, miscData, allCommunityCommentsDict, communityPostID)\n          print(\"                                                                                                                       \")\n\n      if scanMode == \"communityPost\":\n        scan_community_post(current, config, communityPostID, maxScanNumber)\n\n      elif scanMode == \"recentCommunityPosts\":\n        postScanProgressDict = {'scanned':0, 'total':numRecentPosts}\n\n        for post in recentPostsListofDicts:\n          postScanProgressDict['scanned'] += 1\n          id = list(post.keys())[0] # Each dict only has one key/value pair, so makes list of length 1, so id is in index 0\n          postText = list(post.values())[0] # Same as above but applies to values\n          current.vidTitleDict[id] = f\"[Community Post]: {postText}\"\n\n          scan_community_post(current, config, id, maxScanNumber, postScanProgressDict=postScanProgressDict, postText=postText)\n          if postScanProgressDict['scanned'] == numRecentPosts:\n            break\n\n    else:\n      # Goes to get comments for first page\n      print(\"\\n------------------------------------------------------------------------------\")\n      print(\"(Note: If the program appears to freeze, try right clicking within the window)\\n\")\n      print(\"                          --- Scanning --- \\n\")\n\n      # ----------------------------------------------------------------------------------------------------------------------\n      def scan_video(miscData, config, filtersDict, scanVideoID, videosToScan=None, currentVideoDict=None, videoTitle=None, showTitle=False, i=1):\n        if currentVideoDict is None:\n          currentVideoDict = {}\n        nextPageToken, currentVideoDict = operations.get_comments(current, filtersDict, miscData, config, currentVideoDict, scanVideoID, videosToScan=videosToScan)\n        if nextPageToken == \"Error\":\n            return \"Error\"\n\n        if showTitle == True and len(videosToScan) > 0:\n          # Prints video title, progress count, adds enough spaces to cover up previous stat print line\n          offset = 95 - len(videoTitle)\n          if offset > 0:\n            spacesStr = \" \" * offset\n          else:\n            spacesStr = \"\"\n          print(f\"Scanning {i}/{len(videosToScan)}: \" + videoTitle + spacesStr + \"\\n\")\n\n        operations.print_count_stats(current, miscData, videosToScan, final=False)  # Prints comment scan stats, updates on same line\n        # After getting first page, if there are more pages, goes to get comments for next page\n        while nextPageToken != \"End\" and current.scannedCommentsCount < maxScanNumber:\n          nextPageToken, currentVideoDict = operations.get_comments(current, filtersDict, miscData, config, currentVideoDict, scanVideoID, nextPageToken, videosToScan=videosToScan)\n          if nextPageToken == \"Error\":\n            return \"Error\"\n        return \"OK\"\n      # ----------------------------------------------------------------------------------------------------------------------\n\n      if scanMode == \"entireChannel\":\n        status = scan_video(miscData, config, filtersDict, scanVideoID)\n        if status == \"Error\":\n          pass\n\n      elif scanMode == \"recentVideos\" or scanMode == \"chosenVideos\":\n        i = 1\n        for video in videosToScan:\n          currentVideoDict = {}\n          scanVideoID = str(video['videoID'])\n          videoTitle = str(video['videoTitle'])\n          status = scan_video(miscData, config, filtersDict, scanVideoID, videosToScan=videosToScan, currentVideoDict=currentVideoDict, videoTitle=videoTitle, showTitle=True, i=i)\n          if status == \"Error\":\n            break\n          i += 1\n\n      if current.errorOccurred == False:\n        operations.print_count_stats(current, miscData, videosToScan, final=True)  # Prints comment scan stats, finalizes\n      else:\n        utils.print_break_finished(scanMode)\n    ##########################################################\n    bypass = False\n    if config['enable_logging'] != 'ask':\n      logSetting = config['enable_logging']\n      if logSetting == True:\n        loggingEnabled = True\n        bypass = True\n      elif logSetting == False:\n        loggingEnabled = False\n        bypass = True\n      elif logSetting == \"ask\":\n        bypass = False\n      else:\n        bypass = False\n        print(\"Error Code C-2: Invalid value for 'enable_logging' in config file:  \" + logSetting)\n\n    # Counts number of found spam comments and prints list\n    if not current.matchedCommentsDict and not current.duplicateCommentsDict and not current.spamThreadsDict and not current.repostedCommentsDict: # If no spam comments found, exits\n      print(f\"{B.RED}{F.BLACK} No matched comments or users found! {F.R}{B.R}{S.R}\\n\")\n      print(f\"If you see missed spam or false positives, you can submit a filter suggestion here: {F.YELLOW}TJoe.io/filter-feedback{S.R}\")\n\n      # Can still log to json even though no comments\n      if config['json_log_all_comments'] and config['json_log'] and config['enable_logging'] != False:\n        print(f\"Because you enabled '{F.LIGHTCYAN_EX}json_log_all_comments{S.R}' in config, {F.LIGHTCYAN_EX}continuing on to log anyway{S.R}.\")\n        jsonSettingsDict = {}\n        current, logMode, jsonSettingsDict = logging.prepare_logFile_settings(current, config, miscData, jsonSettingsDict, filtersDict, bypass)\n        jsonDataDict = logging.get_extra_json_data([], jsonSettingsDict)\n        logging.write_json_log(current, config, jsonSettingsDict, {}, jsonDataDict)\n\n      if config['auto_close'] == False:\n        input(\"\\nPress Enter to return to main menu...\")\n        return True\n      elif config['auto_close'] == True:\n        print(\"\\nAuto-close enabled in config. Exiting in 5 seconds...\")\n        time.sleep(5)\n        sys.exit()\n    print(f\"Number of {S.BRIGHT}{F.LIGHTRED_EX}Matched{S.R} Comments Found: {B.RED}{F.WHITE} {str(len(current.matchedCommentsDict))} {F.R}{B.R}{S.R}\")\n    if current.spamThreadsDict:\n      print(f\"\\nNumber of {S.BRIGHT}{F.RED}Spam Bot Threads{S.R} Found: {S.BRIGHT}{B.RED}{F.WHITE} {str(len(current.spamThreadsDict))} {F.R}{B.R}{S.R}\")\n    if current.duplicateCommentsDict:\n      print(f\"\\nNumber of {S.BRIGHT}{F.LIGHTBLUE_EX}Non-Matched But Duplicate{S.R} Comments Found: {S.BRIGHT}{F.WHITE}{B.BLUE} {str(len(current.duplicateCommentsDict))} {F.R}{B.R}{S.R}\")\n    if current.repostedCommentsDict:\n      print(f\"\\nNumber of {S.BRIGHT}{F.LIGHTBLUE_EX}Non-Matched But Stolen & Reposted{S.R} Comments Found: {S.BRIGHT}{F.WHITE}{B.BLUE} {str(len(current.repostedCommentsDict))} {F.R}{B.R}{S.R}\")\n\n    # If spam comments were found, continue\n    if bypass == False:\n      # Asks user if they want to save list of spam comments to a file\n      print(f\"\\nComments ready to display. Also {F.LIGHTGREEN_EX}save a log file?{S.R} {B.GREEN}{F.BLACK} Highly Recommended! {F.R}{B.R}{S.R}\")\n      print(f\"        (It even allows you to {F.LIGHTGREEN_EX}restore{S.R} deleted comments later)\")\n      loggingEnabled = choice(f\"Save Log File (Recommended)?\")\n      if loggingEnabled == None:\n        return True # Return to main menu\n      print(\"\")\n\n    # Prepare log file and json log file settings - Location and names\n    jsonSettingsDict = {}\n    if loggingEnabled == True:\n      current, logMode, jsonSettingsDict = logging.prepare_logFile_settings(current, config, miscData, jsonSettingsDict, filtersDict, bypass)\n      print(\"\\n-----------------------------------------------------------------------------------------------------------------\\n\")\n    else:\n      print(\"Continuing without logging... \\n\")\n      logMode = None\n      jsonSettingsDict['jsonLogging'] = False\n\n    # Prints list of spam comments\n    if scanMode == \"communityPost\":\n      scanVideoID = communityPostID\n\n    # Print comments  and write to log files\n    logFileContents, logMode = logging.print_comments(current, config, scanVideoID, loggingEnabled, scanMode, logMode)\n\n    print(f\"\\n{F.WHITE}{B.RED} NOTE: {S.R} Check that all comments listed above are indeed spam.\")\n    print(f\" > If you see missed spam or false positives, you can submit a filter suggestion here: {F.YELLOW}TJoe.io/filter-feedback{S.R}\")\n    print()\n\n    ### ---------------- Decide whether to skip deletion ----------------\n    returnToMenu = False\n\n    # Defaults\n    deletionEnabled = False\n    deletionMode = None # Should be changed later, but if missed it will default to heldForReview\n    confirmDelete = None # If None, will later cause user to be asked to delete\n    if moderator_mode == False:\n      filterModesAllowedforNonOwners = [\"AutoSmart\", \"SensitiveSmart\"]\n    elif moderator_mode == True:\n      filterModesAllowedforNonOwners = [\"AutoSmart\", \"SensitiveSmart\", 'ID']\n\n    # If user isn't channel owner and not using allowed filter mode, skip deletion\n    if userNotChannelOwner == True and filterMode not in filterModesAllowedforNonOwners:\n      confirmDelete = False\n      deletionEnabled = False\n      print(f\"{F.LIGHTRED_EX}Error:{S.R}To prevent abuse, even in moderator mode, you can only use filter modes: Auto Smart, Sensitive Smart, and ID\")\n      response = input(\"Press Enter to Continue, or type 'x' to return to Main Menu...\")\n      if response.lower() == 'x':\n        return True\n\n    # Test skip_deletion preference - If passes both, will either delete or ask user to delete\n    if config['skip_deletion'] == True:\n      print(\"\\nConfig setting skip_deletion enabled.\")\n      returnToMenu = True\n\n    elif config['skip_deletion'] != False:\n      print(\"Error Code C-3: Invalid value for 'skip_deletion' in config file. Must be 'True' or 'False'. Current Value:  \" + str(config['skip_deletion']))\n      print(f\"Defaulting to '{F.YELLOW}False{S.R}'\")\n      input(\"\\nPress Enter to Continue...\")\n\n    ### ----------------------------------------------------------------\n\n    ### ------------- Decide whether to ask before deleting -------------\n    # Using config to determine deletion type, block invalid settings\n    elif config['delete_without_reviewing'] == False:\n      deletionEnabled = \"Allowed\"\n      if config['removal_type'] == \"reportspam\" or userNotChannelOwner == True:\n        deletionMode = \"reportSpam\"\n      elif config['removal_type'] == \"heldforreview\":\n        deletionMode = \"heldForReview\"\n      elif config['removal_type'] == \"rejected\":\n        deletionMode = \"rejected\"\n      else:\n        print(\"Error Code C-4: Invalid value for 'removal_type' in config file. Must be 'heldforreview', 'rejected', or 'reportSpam':  \" + config['removal_type'])\n        input(\"\\nPress Enter to Exit...\")\n        sys.exit()\n\n    # User wants to automatically delete with no user intervention\n    elif config['delete_without_reviewing'] == True:\n      if userNotChannelOwner == True:\n          confirmDelete = \"report\"\n          deletionMode = \"reportSpam\"\n          deletionEnabled = True\n      elif config['removal_type'] == \"reportspam\" or config['removal_type'] == \"heldforreview\":\n        if filterMode == \"AutoSmart\" or filterMode == \"ID\":\n          deletionEnabled = True\n          if config['removal_type'] == \"reportspam\":\n            deletionMode = \"reportSpam\"\n            confirmDelete = \"report\"\n          elif config['removal_type'] == \"heldforreview\":\n            deletionMode = \"heldForReview\"\n            confirmDelete = \"hold\"\n        else:\n          # If non-permitted filter mode with delete_without_reviewing, will allow deletion, but now warns and requires usual confirmation prompt\n          print(\"Error Code C-5: 'delete_without_reviewing' is set to 'True' in config file. So only filter mode 'AutoSmart' allowed..\\n\")\n          print(\"Next time use one of those filter modes, or set 'delete_without_reviewing' to 'False'.\")\n          print(\"    > For this run, you will be asked to confirm removal of spam comments.\")\n          input(\"\\nPress Enter to Continue...\")\n          confirmDelete = None\n          deletionEnabled = \"Allowed\"\n      else:\n        print(\"Error Code C-6: 'delete_without_reviewing' is set to 'True' in config file. So 'removal_type' must be either 'heldForReview' or 'reportSpam'.\\n\")\n        print(\"Next time, either set one of those removal types, or set 'delete_without_reviewing' to 'False'.\")\n        print(\"    > For this run, you will be asked to confirm removal of spam comments.\")\n        input(\"\\nPress Enter to Continue...\")\n        confirmDelete = None\n        deletionEnabled = \"Allowed\"\n    else:\n      # Catch Invalid value\n      print(\"Error C-7: Invalid value for 'delete_without_reviewing' in config file. Must be 'True' or 'False':  \" + config['delete_without_reviewing'])\n      input(\"\\nPress Enter to Exit...\")\n      sys.exit()\n\n    # Check if deletion is enabled, otherwise block and quit\n    if returnToMenu == False and deletionEnabled != \"Allowed\" and deletionEnabled != True:\n        print(\"\\nThe deletion functionality was not enabled. Cannot delete or report comments.\")\n        print(\"Possible Cause: You're scanning someone else's video with a non-supported filter mode.\\n\")\n        print(f\"If you think this is a bug, you may report it on this project's GitHub page: {F.YELLOW}TJoe.io/bug-report{S.R}\")\n        if config['auto_close'] == True:\n          print(\"\\nAuto-close enabled in config. Exiting in 5 seconds...\")\n          time.sleep(5)\n          sys.exit()\n        else:\n          input(\"\\nPress Enter to return to main menu...\")\n          return True\n\n    ### ---------------- Set Up How To Handle Comments  ----------------\n    rtfExclude = None\n    plaintextExclude = None\n    authorsToExcludeSet = set()\n    commentIDExcludeSet = set()\n    exclude = False\n    excludedCommentsDict = {}\n    excludeDisplayString = \"\"\n    # If not skipped by config, ask user what to do\n    if confirmDelete == None and returnToMenu == False:\n      # Menu for deletion mode\n      validResponses = ['delete', 'report', 'hold', 'none']\n      while confirmDelete == None or confirmDelete.lower() not in validResponses:\n        # Title\n        if current.errorOccurred == True:\n          print(f\"\\n--- {F.WHITE}{B.RED} NOTE: {S.R} Options limited due to error during scanning ---\")\n        if exclude == False:\n          print(f\"{F.YELLOW}How do you want to handle {F.BLACK}{B.YELLOW} ALL {S.R}{F.YELLOW} the listed comments above?{S.R} (Including Non-Matched Duplicates)\")\n        elif exclude == True:\n          print(f\"{F.YELLOW}How do you want to handle the rest of the comments (not ones you {F.LIGHTGREEN_EX}excluded{F.YELLOW})?{S.R}\")\n        if userNotChannelOwner == True and moderator_mode == False:\n          print(f\"{F.GREEN}~~ Not Your Channel Mode: Only Reporting is Possible ~~{S.R}\")\n        if userNotChannelOwner == True and moderator_mode == True:\n          print(f\"{F.GREEN}~~ Moderator Mode: Reporting and Holding for Review is possible ~~{S.R}\")\n\n        # Exclude\n        if exclude == False:\n          print(f\" > To {F.LIGHTGREEN_EX}exclude certain authors{S.R}: Type \\'{F.LIGHTGREEN_EX}exclude{S.R}\\' followed by a list of the numbers (or ranges of #'s) {F.LIGHTMAGENTA_EX}from the sample list{S.R}\")\n          print(\"      > Example:  exclude 1, 3-5, 7, 12-15\")\n          print(f\" > To {F.LIGHTGREEN_EX}only process certain authors{S.R}: Type \\'{F.LIGHTGREEN_EX}only{S.R}\\' followed by a list of the numbers (or ranges of #s) {F.LIGHTMAGENTA_EX}from the sample list{S.R}\")\n          print(\"      > Example:  only 1, 3-5, 7, 12-15  --  (Will effectively exclude the 'inverse' of the 'only' selected authors)\")\n\n        # Delete & Hold\n        if exclude == False:\n          if userNotChannelOwner == False and current.errorOccurred == False:\n            print(f\" > To {F.LIGHTRED_EX}delete ALL of the above comments{S.R}: Type '{F.LIGHTRED_EX}DELETE{S.R}', then hit Enter.\")\n          if (userNotChannelOwner == False or moderator_mode == True) and current.errorOccurred == False:\n            print(f\" > To {F.LIGHTRED_EX}move ALL comments above to 'Held For Review' in YT Studio{S.R}: Type '{F.LIGHTRED_EX}HOLD{S.R}', then hit Enter.\")\n        elif exclude == True:\n          if userNotChannelOwner == False and current.errorOccurred == False:\n            print(f\" > To {F.LIGHTRED_EX}delete the rest of the comments{S.R}: Type '{F.LIGHTRED_EX}DELETE{S.R}', then hit Enter.\")\n          if (userNotChannelOwner == False or moderator_mode == True) and current.errorOccurred == False:\n            print(f\" > To {F.LIGHTRED_EX}move rest of comments above to 'Held For Review' in YT Studio{S.R}: Type '{F.LIGHTRED_EX}HOLD{S.R}', then hit Enter.\")\n\n        # Report & None\n        if current.errorOccurred == False:\n          print(f\" > To {F.LIGHTCYAN_EX}report the comments for spam{S.R}, type '{F.LIGHTCYAN_EX}REPORT{S.R}'.\")\n        if loggingEnabled:\n          print(f\" > To do nothing and {F.YELLOW}only log{S.R}, type '{F.YELLOW}NONE{S.R}'\")\n        else:\n          print(f\" > To do {F.YELLOW}nothing{S.R}, type '{F.YELLOW}NONE{S.R}'\")\n\n        if config['json_log'] == True and config['json_extra_data'] == True and loggingEnabled:\n          print(f\"\\n{F.WHITE}{B.BLUE} JSON NOTE: {S.R} You must proceed to write the JSON log file, even if you choose nothing\")\n\n        # Take Entry\n        confirmDelete = input(\"\\n (Not Case Sensitive) Input: \")\n\n        # Process Entry\n        if confirmDelete.lower() == \"delete\" and userNotChannelOwner == False:\n          deletionEnabled = True\n          deletionMode = \"rejected\"\n\n        elif confirmDelete.lower() == \"hold\" and (userNotChannelOwner == False or moderator_mode == True):\n          deletionEnabled = True\n          deletionMode = \"heldForReview\"\n\n        elif confirmDelete.lower() == \"report\":\n          deletionEnabled = True\n          deletionMode = \"reportSpam\"\n\n        elif \"exclude\" in confirmDelete.lower() or \"only\" in confirmDelete.lower():\n          if \"exclude\" in confirmDelete.lower():\n            onlyBool = False\n\n          elif \"only\" in confirmDelete.lower():\n            onlyBool = True\n\n          if loggingEnabled:\n            logInfo = {\n              'logMode': logMode,\n              'logFileContents': logFileContents,\n              'jsonSettingsDict': jsonSettingsDict,\n              'filtersDict': filtersDict\n              }\n          else:\n            logInfo = None\n\n          # This is very messy for now, will later consolidate the parameters\n          current, excludedCommentsDict, authorsToExcludeSet, commentIDExcludeSet, rtfFormattedExcludes, plaintextFormattedExcludes = operations.exclude_authors(current, config, miscData, excludedCommentsDict, authorsToExcludeSet, commentIDExcludeSet, excludeDisplayString, inputtedString=confirmDelete, logInfo=logInfo, only=onlyBool)\n          miscData.resources['Whitelist']['WhitelistContents'] = files.ingest_list_file(whitelistPathWithName, keepCase=True)\n          exclude = True\n\n          # Check that remaining comments list to remove is not empty\n          if not current.matchedCommentsDict and not current.duplicateCommentsDict and not current.spamThreadsDict and not current.repostedCommentsDict:\n            print(f\"\\n{F.YELLOW}All authors excluded, no comments left to remove!{S.R}\")\n            input(\"\\nPress Enter to log and/or return to main menu...\")\n            returnToMenu = True\n            break\n\n        elif confirmDelete.lower() == \"none\":\n          returnToMenu = True\n\n        else:\n          print(f\"\\n{F.LIGHTRED_EX}ERROR:{S.R} This entry was invalid or not allowed with current settings: {confirmDelete}\")\n          input(\"\\nPress Enter to try again...\")\n          print(\"\\n\")\n\n    # Combine commentIDs from different match type dicts\n    combinedCommentDict = dict(current.matchedCommentsDict)\n    combinedCommentDict.update(current.duplicateCommentsDict)\n    combinedCommentDict.update(current.spamThreadsDict)\n    combinedCommentDict.update(current.repostedCommentsDict)\n    includeOtherAuthorComments = False\n\n    banChoice = False\n    if returnToMenu == False:\n      # Set deletion mode friendly name\n      if deletionMode == \"rejected\":\n        deletionModeFriendlyName = \"Removed\"\n      elif deletionMode == \"heldForReview\":\n        deletionModeFriendlyName = \"Moved to 'Held for Review' Section\"\n      elif deletionMode == \"reportSpam\":\n        deletionModeFriendlyName = \"Reported for spam\"\n\n      # Set or choose ban mode, check if valid based on deletion mode\n      if (deletionMode == \"rejected\" or deletionMode == \"reportSpam\" or deletionMode == \"heldForReview\") and deletionEnabled == True and current.errorOccurred == False:\n        proceedWithDeletion = True\n        if config['enable_ban'] != \"ask\":\n          if config['enable_ban'] == False:\n            pass\n          elif config['enable_ban'] == True:\n            print(\"Error Code C-8: 'enable_ban' is set to 'True' in config file. Only possible config options are 'ask' or 'False' when using config.\\n\")\n            input(\"Press Enter to Continue...\")\n          else:\n            print(\"Error Code C-9: 'enable_ban' is set to an invalid value in config file. Only possible config options are 'ask' or 'False' when using config.\\n\")\n            input(\"Press Enter to Continue...\")\n        elif deletionMode == \"rejected\":\n          print(\"\\nAlso ban the spammer(s)?\")\n          banChoice = choice(f\"{F.YELLOW}Ban{S.R} the spammer(s) ?\")\n          if banChoice == None:\n            banChoice = False\n            returnToMenu = True\n            includeOtherAuthorComments = False\n\n        if deletionMode == \"rejected\" or deletionMode == \"heldForReview\":\n          if config['remove_all_author_comments'] != 'ask':\n            includeOtherAuthorComments = config['remove_all_author_comments']\n          else:\n            print(f\"\\nAlso remove {F.YELLOW}all other comments{S.R} from the selected authors, even if their other comments weren't matched?\")\n            includeOtherAuthorComments = choice(\"Choose:\")\n        else:\n          includeOtherAuthorComments = False\n\n      else:\n        proceedWithDeletion = False\n        deletionModeFriendlyName=\"Nothing (Log Only)\"\n    else:\n      proceedWithDeletion = False\n      deletionModeFriendlyName=\"Nothing (Log Only)\"\n\n    # Print Final Logs\n    if includeOtherAuthorComments == True:\n      current = operations.get_all_author_comments(current, config, miscData, current.allScannedCommentsDict)\n      combinedCommentDict.update(current.otherCommentsByMatchedAuthorsDict)\n\n    if loggingEnabled == True:\n      # Rewrites the contents of entire file, but now without the excluded comments in the list of comment IDs\n      # Also if other non-matched comments by matched authors were added\n      if exclude == True or current.otherCommentsByMatchedAuthorsDict:\n        # This is just to redo the logFileContents to write later, not to actually write to log file\n        logFileContents, logMode = logging.print_comments(current, config, scanVideoID, loggingEnabled, scanMode, logMode, doWritePrint=False)\n\n        # Update logFile Contents after updating them\n        logInfo = {\n          'logMode': logMode,\n          'logFileContents': logFileContents,\n          'jsonSettingsDict': jsonSettingsDict,\n          'filtersDict': filtersDict \n          }\n        logging.rewrite_log_file(current, logInfo, combinedCommentDict)\n      print(\"Updating log file, please wait...\", end=\"\\r\")\n\n      # Appends the excluded comment info to the log file that was just re-written\n      if exclude == True:\n        if logInfo['logMode'] == \"rtf\":\n          logging.write_rtf(current.logFileName, str(rtfFormattedExcludes))\n        elif logInfo['logMode'] == \"plaintext\":\n          logging.write_plaintext_log(current.logFileName, str(plaintextFormattedExcludes))\n      print(\"                                          \")\n\n      print(\" Finishing Log File...\", end=\"\\r\")\n      logging.write_log_completion_summary(current, exclude, logMode, banChoice, deletionModeFriendlyName, includeOtherAuthorComments)\n      print(\"                               \")\n\n      # Write Json Log File\n      if config['json_log'] == True and loggingEnabled and (current.matchedCommentsDict or current.duplicateCommentsDict or current.spamThreadsDict or current.repostedCommentsDict):\n        print(\"\\nWriting JSON log file...\")\n        if config['json_extra_data'] == True:\n          if current.errorOccurred == False:\n            jsonDataDict = logging.get_extra_json_data(list(current.matchSamplesDict.keys()), jsonSettingsDict)\n            logging.write_json_log(current, config, jsonSettingsDict, combinedCommentDict, jsonDataDict)\n          else:\n            print(f\"\\n{F.LIGHTRED_EX}NOTE:{S.R} Extra JSON data collection disabled due to error during scanning\")\n        else:\n          logging.write_json_log(current, config, jsonSettingsDict, combinedCommentDict)\n        if returnToMenu == True:\n          print(\"\\nJSON Operation Finished.\")\n    ### ---------------- Reporting / Deletion Begin  ----------------\n    if returnToMenu == False:\n      if proceedWithDeletion == True:\n        operations.delete_found_comments(list(combinedCommentDict), banChoice, deletionMode)\n        if deletionMode != \"reportSpam\":\n          if config['check_deletion_success'] == True:\n            operations.check_deleted_comments(list(combinedCommentDict))\n          elif config['check_deletion_success'] == False:\n            print(\"\\nSkipped checking if deletion was successful.\\n\")\n\n      if config['auto_close'] == True:\n        print(\"\\nProgram Complete.\")\n        print(\"Auto-close enabled in config. Exiting in 5 seconds...\")\n        time.sleep(5)\n        sys.exit()\n      else:\n        input(f\"\\nProgram {F.LIGHTGREEN_EX}Complete{S.R}. Press Enter to return to main menu...\")\n        return True\n    elif current.errorOccurred == True:\n      if config['auto_close'] == True:\n        print(\"Deletion disabled due to error during scanning. Auto-close enabled in config. Exiting in 5 seconds...\")\n        time.sleep(5)\n        sys.exit()\n      else:\n        input(f\"\\nDeletion disabled due to error during scanning. Press Enter to return to main menu...\")\n        return True\n\n    elif config['skip_deletion'] == True:\n      if config['auto_close'] == True:\n        print(\"\\nDeletion disabled in config file.\")\n        print(\"Auto-close enabled in config. Exiting in 5 seconds...\")\n        time.sleep(5)\n        sys.exit()\n      else:\n        if confirmDelete != None and str(confirmDelete.lower()) == \"none\":\n          input(f\"\\nDeletion {F.LIGHTCYAN_EX}Declined{S.R}. Press Enter to return to main menu...\")\n        else:\n          input(f\"\\nDeletion {F.LIGHTRED_EX}Cancelled{S.R}. Press Enter to return to main menu...\")\n        return True\n    else:\n      if config['auto_close'] == True:\n        print(\"Deletion Cancelled. Auto-close enabled in config. Exiting in 5 seconds...\")\n        time.sleep(5)\n        sys.exit()\n      else:\n        input(f\"\\nDeletion {F.LIGHTRED_EX}Cancelled{S.R}. Press Enter to return to main menu...\")\n        return True\n  # -------------------------------------------------------------------------------------------------------------------------------------------------\n  # ------------------------------------------------END PRIMARY INSTANCE-----------------------------------------------------------------------------\n  # -------------------------------------------------------------------------------------------------------------------------------------------------\n\n  # Loops Entire Program to Main Menu\n  continueRunning = True\n  while continueRunning == True:\n    continueRunning = primaryInstance(miscData)\n\n\n# Runs the program\nif __name__ == \"__main__\":\n#   #For speed testing\n\n  # import cProfile\n  # cProfile.run('main()', \"output.dat\")\n  # import pstats\n  # from pstats import SortKey\n  # with open(\"output_time.txt\", \"w\") as f:\n  #   p = pstats.Stats(\"output.dat\", stream=f)\n  #   p.sort_stats(\"time\").print_stats()\n  # with open(\"output_calls.txt\", \"w\") as f:\n  #   p = pstats.Stats(\"output.dat\", stream=f)\n  #   p.sort_stats(\"calls\").print_stats()\n\n\n# -------------------------------------------------------------------------------------------------------------------------------------------------\n  print(\"Running Main Program...\")\n  try:\n    #remind()\n    main()\n\n\n  except SystemExit:\n    sys.exit()\n  except HttpError as hx:\n    traceback.print_exc()\n    print(\"------------------------------------------------\")\n    print(\"Error Message: \" + str(hx))\n    if hx.status_code:\n      print(\"Status Code: \" + str(hx.status_code))\n      if hx.error_details[0][\"reason\"]: # If error reason is available, print it\n          reason = str(hx.error_details[0][\"reason\"])\n          utils.print_exception_reason(reason)\n      print(f\"\\nAn {F.LIGHTRED_EX}'HttpError'{S.R} was raised. This is sometimes caused by a remote server error. See the error info above.\")\n      print(f\"If this keeps happening, consider posting a bug report on the GitHub issues page, and include the above error info.\")\n      print(f\"Short Link: {F.YELLOW}TJoe.io/bug-report{S.R}\")\n      input(\"\\nPress Enter to Exit...\")\n    else:\n      print(f\"{F.LIGHTRED_EX}Unknown Error - Code: Z-1{S.R} occurred. If this keeps happening, consider posting a bug report on the GitHub issues page, and include the above error info.\")\n      print(f\"Short Link: {F.YELLOW}TJoe.io/bug-report{S.R}\")\n      input(\"\\n Press Enter to Exit...\")\n  except UnboundLocalError as ux:\n    traceback.print_exc()\n    print(\"------------------------------------------------\")\n    print(\"Error Message: \" + str(ux))\n    if \"referenced before assignment\" in str(ux):\n      print(f\"\\n{F.LIGHTRED_EX}Error - Code: X-2{S.R} occurred. This is almost definitely {F.YELLOW}my fault and requires patching{S.R} (big bruh moment)\")\n      print(f\"Please post a bug report on the GitHub issues page, and include the above error info.\")\n      print(f\"Short Link: {F.YELLOW}TJoe.io/bug-report{S.R}\")\n      print(\"    (In the mean time, try using a previous release of the program.)\")\n      input(\"\\n Press Enter to Exit...\")\n    else:\n      traceback.print_exc()\n      print(\"------------------------------------------------\")\n      print(f\"\\n{F.LIGHTRED_EX}Unknown Error - Code: Z-2{S.R} occurred. If this keeps happening,\")\n      print(\"consider posting a bug report on the GitHub issues page, and include the above error info.\")\n      print(f\"Short Link: {F.YELLOW}TJoe.io/bug-report{S.R}\")\n      input(\"\\n Press Enter to Exit...\")\n  except KeyError as kx:\n    traceback.print_exc()\n    print(\"------------------------------------------------\")\n    if \"config\" in str(kx):\n      print(f\"{F.LIGHTRED_EX}Unknown Error - Code: X-3{S.R}\")\n      print(\"Are you using an outdated version of the config file? Try re-creating the config file to get the latest version.\")\n      print(f\"{F.LIGHTYELLOW_EX}If that doesn't work{S.R}, consider posting a {F.LIGHTYELLOW_EX}bug report{S.R} on the GitHub issues page, and include the above error info.\")\n    else:\n      print(f\"{F.RED}Unknown Error - Code: X-4{S.R} occurred. This is {F.YELLOW}probably my fault{S.R},\")\n      print(f\"please post a {F.LIGHTYELLOW_EX}bug report{S.R} on the GitHub issues page, and include the above error info.\")\n    print(f\"Short Link: {F.YELLOW}TJoe.io/bug-report{S.R}\")\n    input(\"\\n Press Enter to Exit...\")\n  except TypeError:\n    traceback.print_exc()\n    print(\"------------------------------------------------\")\n    print(f\"{F.RED}Unknown Error - Code: X-5{S.R} occurred. This is {F.YELLOW}probably my fault{S.R},\")\n    print(f\"please post a {F.LIGHTYELLOW_EX}bug report{S.R} on the GitHub issues page, and include the above error info.\")\n    print(f\"Short Link: {F.YELLOW}TJoe.io/bug-report{S.R}\")\n    input(\"\\n Press Enter to Exit...\")\n  except KeyboardInterrupt:\n    print(\"\\n\\nProcess Cancelled via Keyboard Shortcut\")\n    sys.exit()\n  except Exception as x:\n    traceback.print_exc()\n    print(\"------------------------------------------------\")\n    print(\"Error Message: \" + str(x))\n    print(f\"\\n{F.LIGHTRED_EX}Unknown Error - Code: Z-3{S.R} occurred. If this keeps happening, consider posting a bug report\")\n    print(\"on the GitHub issues page, and include the above error info.\")\n    print(f\"Short Link: {F.YELLOW}TJoe.io/bug-report{S.R}\")\n    input(\"\\n Press Enter to Exit...\")\n  else:\n    print(\"\\nFinished Executing.\")\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.override.yml",
          "type": "blob",
          "size": 0.1279296875,
          "content": "version: '3.7'\n\nservices:\n  yt-spammer-purge:\n    image: yt-spammer-purge\n    build:\n      context: .\n      dockerfile: Dockerfile\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.3408203125,
          "content": "version: '3.7'\n\nservices:\n  yt-spammer-purge:\n    image: ghcr.io/thiojoe/yt-spammer-purge:latest\n    volumes:\n      - ./SpamPurgeConfig.ini:/usr/src/app/SpamPurgeConfig.ini\n      - ./client_secrets.json:/usr/src/app/client_secrets.json\n      - ./token.pickle:/usr/src/app/token.pickle\n      - ./SpamPurge_Resources:/usr/src/app/SpamPurge_Resources\n\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 8.12890625,
          "content": "#!/usr/bin/env bash\n\nclear\n# Clear screen before running any commands\n\nREQUIREMENTS_INSTALLED=0\n# Implemented in install_MAIN\nDEPS_ONLY=0\n# Implemented at bottom of file\nPDEPS_ONLY=0\n# Implemented at bottom of file\nASSUME_YES=0\n# Implemented in confirm function\n\nprint_usage() {\n   # Display Usage\n   echo \"Usage: $0 [-y] [-d] [-c] [-p] [-h]\"\n   echo\n   echo \"Installer script for The YouTube Spammer Purge application.\"\n   echo\n   echo \"Options:\"\n   echo \"    -y     Assume yes: Skip confirmation prompts.\"\n   echo \"    -d     Only install OS-Specific dependencies.\"\n   echo \"    -c     Skip installing OS-Specific dependencies.\"\n   echo \"           This could be useful to those who have unsupported systems\"\n   echo \"    -p     Only install Python dependencies\"\n   echo \"    -h     Print this Help.\"\n   echo\n}\n\n# Get the options\nwhile getopts \":hdcyp\" option; do\n\tcase $option in\n\t\th)  # display Help\n\t\t\tprint_usage\n\t\t\texit;;\n\t\td)  # Install dependencies only\n\t\t\tDEPS_ONLY=1;;\n\t\tc)  # Skip installing dependencies\n\t\t\tREQUIREMENTS_INSTALLED=1;;\n\t\tp)  # Install Python dependencies only\n\t\t\tPDEPS_ONLY=1;;\n\t\ty)  # Assume YES\n\t\t\tASSUME_YES=1;;\n\t\t\\?) # Invalid option\n\t\t\techo \"Error: Invalid option. See option -h for help.\"\n\t\t\texit 1 ;;\n\tesac\ndone\n\n# Credit to https://stackoverflow.com/questions/29436275/how-to-prompt-for-yes-or-no-in-bash\n# Slightly edited\nconfirm() {\n    [[ $ASSUME_YES -eq 1 ]] && echo \"Assuming YES.\" && return 0\n    while true; do\n        read -r -p \"$* [y/n]: \" yn\n\n        if [[ \"$yn\" =~ ^([yY][eE][sS]|[yY])+$ ]]; then\n            return 0\n        fi\n\n        if [[ \"$yn\" =~ ^([nN][oO]|[nN])+$ ]]; then\n            return 1\n        fi\n\n    done\n}\n\ninstall_fail () {\n    echo \"Install Failed.\"\n    exit 1\n}\n\ninstall_debian () {\n    sudo apt-get install python3 python3-dev python3-tk python3-pip git || install_fail\n}\n\ninstall_fedora () {\n    sudo dnf install python3 python3-tkinter python3-pip git python3-devel || install_fail\n}\n\ninstall_centos () {\n    sudo yum install -y python3 || install_fail\n    rpm -q epel-release &> /dev/null || EPEL=0\n    sudo yum install -y python3-tkinter epel-release python3-pip git || install_fail\n    # Honestly not sure why it's installing epel and then uninstalling\n    [[ $EPEL -eq 0 ]] && sudo yum remove -y epel-release\n}\n\ninstall_arch () {\n    sudo pacman -S --needed python3 tk git && python3 -m ensurepip || install_fail\n}\n\ninstall_macos() {\n    echo \"This script will install Homebrew, along with YT-Spammer-Purge's requirements.\"\n    echo \"Continue installation?\"\n    confirm && echo \"Ok, installing requirements.\" || install_fail\n    if test ! \"$(which brew)\"; then\n        #Install homebrew\n        echo \"Installing homebrew...\"\n        /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n    fi\n    # Install python3.10 & git or fail out\n    brew install python@3.10 && \\\n    brew install tcl-tk && \\\n    brew install python-tk && \\\n    brew install git || \\\n        install_fail\n}\n\ninstall_python_requirements () {\n    python3 -m pip install -q -r requirements.txt --user && \\\n        echo \"Python requirements installed.\" || exit 1\n    # Pip should give an error if it fails.\n}\n\ninstall_os_requirements () {\n    echo \"YT-Spammer-Purge has a few OS-Specific requirements that you will need to install.\"\n\n    # Check for known OS's\n    INSTALLED=0\n\n    case \"$(uname -s)\" in\n        Darwin*) install_macos && INSTALLED=1 || install_fail;;\n        # Mac\n        #CYGWIN*) do_something;;\n        # Cygwin Emulator -- Unimplemented\n        #MINGW*) do_something;;\n        # MINGW Emulator -- Unimplemented\n    esac\n\n    [[ -e /etc/debian_version ]] && install_debian && INSTALLED=1\n\n    [[ -e /etc/fedora-release ]] && install_fedora && INSTALLED=1\n\n    [[ -e  /etc/centos-release ]] && install_centos && INSTALLED=1\n\n    [[ -e /etc/arch-release ]] && install_arch && INSTALLED=1\n\n    [[ $INSTALLED -eq 0 ]] && printf \"You are on an unknown system. You will have to install the required packages manually.\\nAfter installing your requirements, you can run install.sh -c to skip this step of the installation.\\nContributions are welcome to add support for your system:\\nhttps://github.com/ThioJoe/YT-Spammer-Purge\" && exit 1\n\n    return 0\n}\n\ninstall_latest_release () {\n    echo \"We are now going to download the code for YT-Spammer-Purge.\"\n    git clone https://github.com/ThioJoe/YT-Spammer-Purge\n    cd YT-Spammer-Purge || exit 5\n    # Use non-1 exit code for debugging\n    git checkout -q -m \"$(git describe --abbrev=0 --tags)\"\n    # Go to latest release\n}\n\ninstall_MAIN () {\n    clear\n    echo \"We will now install YT-Spammer-Purge.\"\n    echo \"Continue?\"\n    confirm || install_fail\n    echo \"Installing.\"\n    # Check what OS we're running on\n\n    # Check if we already installed the requirements -- git is needed to check for which mode to run.\n    [[ $REQUIREMENTS_INSTALLED -eq 0 ]] && install_os_requirements\n\n    echo \"--------------------------\"\n\n    install_latest_release\n    # install_latest_release cd's into YT-Spammer-Purge\n\n    # Since we've gotten python3 installed:\n\n    echo \"--------------------------\"\n    install_python_requirements\n\n    # Done!\n\n    printf \"Dependencies and Program installed into .\\YT-Spammer-Purge!\\nNow follow these instructions to get a client_secrets.json file!\\nhttps://github.com/ThioJoe/YT-Spammer-Purge/wiki/Instructions:-Obtaining-an-API-Key\\n\\nYou may run this script again inside your installation to update.\\n\"\n    exit 0\n}\n\ncheck_python_requirements () {\n    # This assumes we are in the YT-Spammer-Purge directory\n    echo \"Checking installed requirements\"\n    python3 -c \"import pkg_resources; pkg_resources.require(open('requirements.txt',mode='r'))\" &>/dev/null || install_python_requirements\n}\n\nupdate () {\n    # This assumes we are in the YT-Spammer-Purge directory\n    check_python_requirements\n    clear\n    echo \"We will now attempt to update YT-Spammer-Purge.\"\n    echo \"Current version is $(git describe --abbrev=0 --tags)\"\n    echo \"Continue?\"\n    confirm || exit 1\n    echo \"Updating...\"\n\n\n    git fetch origin\n    echo \"Latest version is $(git describe origin --abbrev=0 --tags)\"\n    echo \"Updating to this version.\"\n    git checkout -q -m \"$(git describe origin --abbrev=0 --tags)\"\n    install_python_requirements\n    # In case requirements are updated\n\n    echo \"--------------------------\"\n    echo \"Updated!\"\n    echo \"Report any bugs to TJoe.io/bug-report\"\n    exit 0\n}\n\ncheck_git_missing () {\n    [[ $(git remote get-url origin) == *\"YT-Spammer-Purge\"* ]] && return 0\n    # If this is a valid YT-Spammer-Purge install, return 0\n    # If this is a fork, with a name different than YT-Spammer-Purge, this check will fail.\n    # If you are running this on a fork, please replace every instance of 'YT-Spammer-Purge' with your fork name.\n    clear\n    echo \"It looks like you downloaded a .zip of YT-Spammer-Purge\"\n    echo \"Automated updates do not work on these versions, but you may download the latest version of YT-Spammer-Purge using this script.\"\n    echo \"If you choose to re-download the latest verion of YT-Spammer-Purge using this script, automated updates will be re-enabled.\"\n    echo \"The latest YT-Spammer-Purge with automated updates will be downloaded to a sub-directory of the same name.\"\n    echo \"Would you like to re-install YT-Spammer-Purge?\"\n    confirm && echo \"OK, installing.\" || exit 1\n    install_MAIN\n    exit 0\n}\n\n\n# Start running commands to choose what to do next.\n\n[[ $DEPS_ONLY -eq 1 ]] && install_os_requirements && exit 0\n\n[[ $PDEPS_ONLY -eq 1 ]] && install_python_requirements && exit 0\n\n# Check if any of these commands are missing/failing:\n# -  git\n# -  python3\n# -  python3 -c \"import tkinter\"\n#\nif ( ! command -v git &> /dev/null ) | ( ! command -v python3 &> /dev/null ) | ( ! python3 -c \"import tkinter\" &>/dev/null )\nthen\n    echo \"You are missing some required packages.\"\n    install_os_requirements\n    REQUIREMENTS_INSTALLED=1\nfi\n\n[[ -e YTSpammerPurge.py ]] && check_git_missing && update\n# If YTSpammerPurge.py exists in the dir, check if it is a valid YT-Spammer-Purge install, and either re-install or update\n# These will exit when they succeed\n\ninstall_MAIN\n# If get-url succeeds, update, else install\n# Will exit if succeed\n\n# Script should not reach this point, error if it does\nexit 1\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.19140625,
          "content": "google_api_python_client>=2.41.0\ngoogle_auth_oauthlib>=0.5.1\nprotobuf>=4.21.11\ncolorama==0.4.4\nrtfunicode==2.0\ncertifi>=2021.10.8\nsix>=1.16.0\nlevenshtein>=0.20.9\nregex>=2022.3.15\nrapidfuzz>=2.0.7\n"
        }
      ]
    }
  ]
}