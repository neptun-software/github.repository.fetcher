{
  "metadata": {
    "timestamp": 1736559616837,
    "page": 259,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SciPhi-AI/R2R",
      "stars": 4374,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".env.example",
          "type": "blob",
          "size": 0.4951171875,
          "content": "# Environment variables for LLM provider(s)\nexport OPENAI_API_KEY=sk-...\n#  uncomment the following lines to enable other LLM providers\n# export ANTHROPIC_API_KEY=...\n# export VERTEX_API_KEY=...\n# Add other provider keys as needed\n\n# Environment variables for the Postgres database\nexport R2R_POSTGRES_USER=your_user\nexport R2R_POSTGRES_PASSWORD=your_password\nexport R2R_POSTGRES_HOST=your_host\nexport R2R_POSTGRES_PORT=your_port\nexport R2R_POSTGRES_DBNAME=your_db\nexport R2R_PROJECT_NAME=your_project_name\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.08984375,
          "content": "*.html linguist-documentation\n*.ipynb linguist-documentation\ntemplates/** linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3056640625,
          "content": "**/.DS_Store\n.env\n.DS_Store\n*.gguf\nlogs/\nworkspace/\npy/workspace/\nuploads/\nenv/\n**/__pycache__\n**/.mypy_cache\n**/.pytest_cache\ndump/*\n.next\nnode_modules\n.idea\n\ncoverage.xml\n.coverage\n\n**/*.sqlite*\n**/*.sqlite3*\n\nnode_modules/\ndist/\n**/.data/*\n\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n*.test\ngo.work\ngo.work.sum\n\n.vscode/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.74609375,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.3.0\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n      - id: check-added-large-files\n      - id: check-ast\n      - id: check-yaml\n\n  - repo: local\n    hooks:\n      - id: check-typing-imports\n        name: Check for Dict, List, or Union usage\n        entry: bash -c 'echo \"Checking for typing imports...\" && find . -name \"*.py\" | grep -v \"/migrations/\" | xargs grep -n \"from typing.*import.*[^d]Dict\\\\|from typing.*import.*List\\\\|from typing.*import.*Union\" || exit 0 && echo \"⚠️  Please import dict instead of Dict, list instead of List, and the logical OR operator\" && exit 1'\n        language: system\n        types: [python]\n        pass_filenames: false\n        exclude: ^py/migrations/\n\n  - repo: local\n    hooks:\n      - id: check-print-statements\n        name: Check for print statements\n        entry: bash -c 'echo \"Checking for print statements...\" && find . -name \"*.py\" ! -path \"./py/cli/*\" ! -path \"./py/core/examples/*\" ! -path \"./py/migrations/*\" ! -path \"./py/tests/*\" | xargs grep -n \"print(\" || exit 0 && echo \"Found print statements!\" && exit 1'\n        language: system\n        types: [python]\n        pass_filenames: false\n\n  - repo: local\n    hooks:\n      - id: isort\n        name: isort\n        entry: bash -c 'cd py && poetry run isort .'\n        language: system\n        types: [python]\n        pass_filenames: false\n\n      - id: black\n        name: black\n        entry: bash -c 'cd py && poetry run black .'\n        language: system\n        types: [python]\n        pass_filenames: false\n\n      - id: mypy\n        name: mypy\n        entry: bash -c 'cd py && poetry run mypy .'\n        language: system\n        types: [python]\n        pass_filenames: false\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 2.0224609375,
          "content": "# Contributor Covenant Code of Conduct Summary\n\nTL;DR: Be nice. Be respectful. Be professional. Don't be a jerk.\n\n## Commitment\n\nWe strive for a harassment-free, inclusive, and healthy community experience for all, regardless of personal characteristics or background.\n\n## Expected Behaviors\n\n- **Empathy and Kindness**: Show understanding and kindness to others.\n- **Respect**: Value different viewpoints and experiences.\n- **Constructive Feedback**: Offer and accept feedback graciously.\n- **Accountability**: Own up to mistakes and learn from them.\n- **Community Focus**: Prioritize what's best for the whole community.\n\n## Unacceptable Behaviors\n\n- **Sexualized Content**: Avoid sexual language and unwelcome sexual attention.\n- **Disrespect**: No trolling, insults, or derogatory comments.\n- **Harassment**: Public or private harassment is unacceptable.\n- **Privacy Violations**: Do not share private information without consent.\n- **Inappropriate Conduct**: Behavior not suitable for a professional setting is not allowed.\n\n## Enforcement\n\n- **Leaders' Responsibility**: Leaders clarify standards and take corrective actions.\n- **Scope**: Applies to all community spaces and when representing the community.\n- **Reporting**: Incidents can be reported to owen@sciphi.ai.\n\n## Enforcement Guidelines\n\n- **Correction**: Private warning for unprofessional behavior.\n- **Warning**: Consequences for repeated violations.\n- **Temporary Ban**: For serious or sustained inappropriate behavior.\n- **Permanent Ban**: For egregious violations, including harassment.\n\n## Attribution\n\nAdapted from the [Contributor Covenant version 2.1](https://www.contributor-covenant.org/version/2/1/code_of_conduct.html), with Community Impact Guidelines inspired by [Mozilla's code of conduct enforcement ladder](https://www.mozilla.org/en-US/about/governance/policies/participation/).\n\nFor more details and FAQs, visit [https://www.contributor-covenant.org/faq](https://www.contributor-covenant.org/faq). Translations are available [here](https://www.contributor-covenant.org/translations).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.982421875,
          "content": "# R2R Contribution Guide\n\n## Quick Start\n\n- **Pre-Discussion**: Feel free to propose your ideas via issues, [Discord](https://discord.gg/p6KqD2kjtB) if you want to get early feedback.\n- **Code of Conduct**: Adhere to our [Code of Conduct](./CODE_OF_CONDUCT.md) in all interactions.\n- **Pull Requests (PRs)**: Follow the PR process for contributions.\n\n## Pull Request Process\n\n1. **Dependencies**: Ensure all dependencies are necessary and documented.\n2. **Documentation**: Update README.md with any changes to interfaces, including new environment variables, exposed ports, and other relevant details.\n3. **Versioning**: Increment version numbers in examples and README.md following [SemVer](http://semver.org/).\n4. **Review**: A PR can be merged after receiving approval from at least two other developers. If you lack merge permissions, request a review for merging.\n\n## Attribution\n\nThis Code of Conduct adapts from the [Contributor Covenant, version 1.4](http://contributor-covenant.org/version/1/4/).\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0576171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2024 EmergentAGI Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.md",
          "type": "blob",
          "size": 0.09375,
          "content": "# The R2R Manifest\n\nWe will do our best to build useful AI tools for developers _(before AGI)_.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.01171875,
          "content": "py/README.md"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.5419921875,
          "content": "\n# Security Policy\n\nAt R2R, we take the security of our project and its users seriously. We appreciate the contributions of security researchers and developers in helping us identify and address potential vulnerabilities.\n\n## Reporting a Vulnerability\n\nIf you discover a potential security vulnerability in R2R, please follow these steps to report it:\n\n1. Create a new issue on the GitHub repository using the \"Vulnerability Disclosure\" issue template.\n2. Set the issue as \"confidential\" if you are unsure whether the issue is a potential vulnerability or not. It is easier to make a confidential issue public than to remediate an issue that should have been confidential.\n3. Label the issue with the `security` label at a minimum. Additional labels may be applied by the security team and other project maintainers to assist with the triage process.\n4. Provide a detailed description of the vulnerability, including steps to reproduce, potential impact, and any other relevant information.\n5. If the issue contains sensitive information or user-specific data, such as private repository contents, assign the `keep confidential` label to the issue. If possible, avoid including such information directly in the issue and instead provide links to resources that are only accessible to the project maintainers.\n\n## Vulnerability Handling Process\n\nOnce a vulnerability is reported, the R2R security team will follow these steps:\n\n1. Acknowledge receipt of the vulnerability report within 48 hours.\n2. Assess the severity and impact of the vulnerability.\n3. Develop a fix or mitigation plan for the vulnerability.\n4. Notify the reporter about the progress and estimated timeline for the fix.\n5. Once the fix is ready, release a new version of R2R that addresses the vulnerability.\n6. Publicly disclose the vulnerability and the fix after a reasonable period to allow users to update their installations.\n\n## Scope\n\nThis security policy applies to the R2R codebase and its dependencies. It does not cover vulnerabilities in the underlying operating systems, hardware, or third-party libraries used by R2R.\n\n## Recognition\n\nWe greatly appreciate the efforts of security researchers and developers who responsibly disclose vulnerabilities to us. With your permission, we will acknowledge your contribution in the release notes and any public disclosures related to the vulnerability.\n\n## Contact\n\nIf you have any questions or concerns regarding the security of R2R, please contact the project maintainers at [security@r2r.com](mailto:security@r2r.com).\n\nThank you for helping us keep R2R and its users secure!\n"
        },
        {
          "name": "js",
          "type": "tree",
          "content": null
        },
        {
          "name": "llms.txt",
          "type": "blob",
          "size": 331.431640625,
          "content": "# Understanding Internals of R2R Library\n\n## Table of Contents\n\n1. [Introduction](#introduction)\n2. [Installation](#installation)\n   - [Prerequisites](#prerequisites)\n   - [Docker Installation](#docker-installation)\n     - [Install the R2R CLI & Python SDK](#install-the-r2r-cli--python-sdk)\n     - [Start R2R with Docker](#start-r2r-with-docker)\n   - [Google Cloud Platform Deployment](#google-cloud-platform-deployment)\n     - [Overview](#overview)\n     - [Creating a Google Compute Engine Instance](#creating-a-google-compute-engine-instance)\n     - [Installing Dependencies](#installing-dependencies)\n     - [Setting up R2R](#setting-up-r2r)\n     - [Configuring Port Forwarding for Local Access](#configuring-port-forwarding-for-local-access)\n     - [Exposing Ports for Public Access (Optional)](#exposing-ports-for-public-access-optional)\n     - [Conclusion](#conclusion-1)\n3. [R2R Application Lifecycle](#r2r-application-lifecycle)\n   - [Developer Workflow](#developer-workflow)\n   - [User Interaction](#user-interaction)\n   - [Hello R2R (Code Example)](#hello-r2r-code-example)\n4. [Configuration](#configuration)\n   - [Configuration Overview](#configuration-overview)\n   - [Server-Side Configuration (`r2r.toml`)](#server-side-configuration-r2rtoml)\n     - [Example: `r2r.toml`](#example-r2rtoml)\n   - [Runtime Overrides](#runtime-overrides)\n   - [Postgres Configuration](#postgres-configuration)\n     - [Example Configuration](#example-configuration-1)\n     - [Key Features](#key-features)\n   - [Embedding Configuration](#embedding-configuration)\n     - [Example Configuration](#example-configuration-2)\n   - [Auth & Users Configuration](#auth--users-configuration)\n     - [Example Configuration](#example-configuration-3)\n     - [Key Features](#key-features-1)\n   - [Data Ingestion Configuration](#data-ingestion-configuration)\n     - [Example Configuration](#example-configuration-4)\n   - [Retrieval Configuration](#retrieval-configuration)\n     - [Example Configuration](#example-configuration-5)\n   - [RAG Configuration](#rag-configuration)\n     - [Example Configuration](#example-configuration-6)\n   - [Graphs Configuration](#graphs-configuration)\n     - [Example Configuration](#example-configuration-7)\n   - [Prompts Configuration](#prompts-configuration)\n     - [Example Configuration](#example-configuration-8)\n5. [Data Ingestion](#data-ingestion)\n   - [Introduction](#introduction-1)\n   - [Ingestion Modes](#ingestion-modes)\n   - [Ingesting Documents](#ingesting-documents)\n     - [Example Response](#example-response)\n   - [Ingesting Pre-Processed Chunks](#ingesting-pre-processed-chunks)\n     - [Example](#example-1)\n   - [Deleting Documents and Chunks](#deleting-documents-and-chunks)\n     - [Delete a Document](#delete-a-document)\n     - [Sample Output](#sample-output)\n     - [Key Features of Deletion](#key-features-of-deletion)\n   - [Additional Configuration & Concepts](#additional-configuration--concepts)\n     - [Light vs. Full Deployments](#light-vs-full-deployments)\n     - [Provider Configuration](#provider-configuration)\n   - [Conclusion](#conclusion-2)\n6. [Contextual Enrichment](#contextual-enrichment)\n   - [The Challenge of Context Loss](#the-challenge-of-context-loss)\n   - [Introducing Contextual Enrichment](#introducing-contextual-enrichment)\n   - [Enabling Enrichment](#enabling-enrichment)\n   - [Enrichment Strategies Explained](#enrichment-strategies-explained)\n     - [Neighborhood Strategy](#neighborhood-strategy)\n     - [Semantic Strategy](#semantic-strategy)\n   - [The Enrichment Process](#the-enrichment-process)\n   - [Implementation and Results](#implementation-and-results)\n     - [Viewing Enriched Results](#viewing-enriched-results)\n   - [Metadata and Storage](#metadata-and-storage)\n   - [Best Practices](#best-practices-1)\n   - [Conclusion](#conclusion-3)\n7. [AI Powered Search](#ai-powered-search)\n   - [Introduction](#introduction-2)\n   - [Understanding Search Modes](#understanding-search-modes)\n   - [How R2R Hybrid Search Works](#how-r2r-hybrid-search-works)\n   - [Vector Search](#vector-search)\n     - [Example](#example-2)\n   - [Hybrid Search](#hybrid-search)\n     - [Example](#example-3)\n   - [Knowledge Graph Search](#knowledge-graph-search)\n     - [Example](#example-4)\n   - [Reciprocal Rank Fusion (RRF)](#reciprocal-rank-fusion-rrf)\n   - [Result Ranking](#result-ranking)\n   - [Configuration](#configuration-1)\n     - [Choosing a Search Mode](#choosing-a-search-mode)\n   - [Best Practices](#best-practices-2)\n   - [Conclusion](#conclusion-4)\n8. [Retrieval-Augmented Generation (RAG)](#retrieval-augmented-generation-rag)\n   - [Basic RAG](#basic-rag)\n     - [Example](#example-5)\n     - [Sample Output](#sample-output-1)\n   - [RAG with Hybrid Search](#rag-w-hybrid-search)\n     - [Example](#example-6)\n   - [Streaming RAG](#streaming-rag)\n     - [Example](#example-7)\n   - [Customizing RAG](#customizing-rag)\n     - [Example](#example-8)\n   - [Advanced RAG Techniques](#advanced-rag-techniques)\n     - [HyDE (Hypothetical Document Embeddings)](#hyde-hypothetical-document-embeddings)\n       - [Workflow](#workflow)\n       - [Python Example](#python-example-1)\n       - [Sample Output](#sample-output-2)\n     - [RAG-Fusion](#rag-fusion)\n       - [Workflow](#workflow-1)\n       - [Python Example](#python-example-2)\n       - [Sample Output](#sample-output-3)\n   - [Combining with Other Settings](#combining-with-other-settings)\n     - [Example](#example-9)\n   - [Customization and Server-Side Defaults](#customization-and-server-side-defaults)\n     - [Example](#example-10)\n   - [Conclusion](#conclusion-5)\n9. [Knowledge Graphs in R2R](#knowledge-graphs-in-r2r)\n   - [Overview](#overview-2)\n   - [System Architecture](#system-architecture)\n   - [Getting Started](#getting-started)\n     - [Document-Level Extraction](#document-level-extraction)\n       - [Python Example](#python-example-3)\n     - [Creating Collection Graphs](#creating-collection-graphs)\n       - [Python Example](#python-example-4)\n     - [Managing Collection Graphs](#managing-collection-graphs)\n       - [Python Example](#python-example-5)\n       - [Example Output](#example-output-4)\n   - [Graph-Collection Relationship](#graph-collection-relationship)\n   - [Knowledge Graph Workflow](#knowledge-graph-workflow)\n     - [Step 1: Extract Document Knowledge](#step-1-extract-document-knowledge)\n     - [Step 2: Initialize and Populate Graph](#step-2-initialize-and-populate-graph)\n     - [Step 3: View Entities and Relationships](#step-3-view-entities-and-relationships)\n     - [Step 4: Build Graph Communities](#step-4-build-graph-communities)\n     - [Step 5: KG-Enhanced Search](#step-5-kg-enhanced-search)\n     - [Step 6: Reset Graph](#step-6-reset-graph)\n   - [Graph Synchronization](#graph-synchronization)\n     - [Document Updates](#document-updates)\n     - [Cross-Collection Updates](#cross-collection-updates)\n   - [Access Control](#access-control)\n     - [Python Example](#python-example-6)\n   - [Using Knowledge Graphs](#using-knowledge-graphs)\n     - [Search Integration](#search-integration)\n       - [Curl Example](#curl-example-1)\n     - [RAG Integration](#rag-integration)\n       - [Python Example](#python-example-7)\n   - [Best Practices](#best-practices-3)\n     - [Document Management](#document-management)\n     - [Collection Management](#collection-management)\n     - [Performance Optimization](#performance-optimization)\n     - [Access Control](#access-control-1)\n   - [Troubleshooting](#troubleshooting-1)\n   - [Conclusion](#conclusion-6)\n   - [Next Steps](#next-steps-1)\n10. [GraphRAG in R2R](#graphrag-in-r2r)\n    - [Overview](#overview-1)\n    - [Architecture](#architecture)\n    - [Understanding Communities](#understanding-communities)\n       - [Example Communities](#example-communities)\n    - [Implementation Guide](#implementation-guide)\n       - [Prerequisites](#prerequisites-1)\n         - [Python Example](#python-example-8)\n       - [Building Communities](#building-communities)\n         - [Python Example](#python-example-9)\n         - [Build Process Includes](#build-process-includes)\n       - [Using GraphRAG](#using-graphrag)\n         - [Python Example](#python-example-10)\n    - [Understanding Results](#understanding-results)\n       - [Document Chunks](#document-chunks)\n       - [Graph Elements](#graph-elements)\n       - [Communities](#communities-1)\n    - [Scaling GraphRAG](#scaling-graphrag)\n       - [Using Orchestration](#using-orchestration)\n         - [Access Hatchet UI](#access-hatchet-ui)\n         - [Features](#features-1)\n         - [Example Diagram](#example-diagram)\n    - [Best Practices](#best-practices-4)\n       - [Development](#development)\n       - [Performance](#performance-1)\n       - [Quality](#quality)\n    - [Troubleshooting](#troubleshooting-2)\n    - [Next Steps](#next-steps-2)\n    - [Conclusion](#conclusion-7)\n    - [Security Considerations](#security-considerations-1)\n11. [Agent](#agent)\n    - [Understanding R2R’s RAG Agent](#understanding-r2rs-rag-agent)\n       - [Planned Extensions](#planned-extensions)\n    - [Configuration](#configuration-2)\n       - [Default Configuration](#default-configuration)\n       - [Enable Web Search](#enable-web-search)\n    - [Using the RAG Agent](#using-the-rag-agent)\n       - [Python Example](#python-example-11)\n       - [Streaming Responses](#streaming-responses)\n    - [Context-Aware Responses](#context-aware-responses)\n    - [Working with Files](#working-with-files)\n       - [Python Example](#python-example-12)\n    - [Advanced Features](#advanced-features)\n       - [Combined Search Capabilities](#combined-search-capabilities)\n          - [Example](#example-11)\n       - [Custom Search Settings](#custom-search-settings)\n          - [Example](#example-12)\n    - [Best Practices](#best-practices-5)\n       - [Conversation Management](#conversation-management)\n       - [Search Optimization](#search-optimization)\n       - [Response Handling](#response-handling)\n    - [Error Handling](#error-handling-1)\n       - [Python Example](#python-example-13)\n    - [Limitations](#limitations)\n    - [Future Developments](#future-developments)\n    - [Conclusion](#conclusion-8)\n    - [Security Considerations](#security-considerations-2)\n12. [Orchestration](#orchestration)\n    - [Key Concepts](#key-concepts)\n    - [Orchestration in R2R](#orchestration-in-r2r)\n       - [Benefits of Orchestration](#benefits-of-orchestration)\n       - [Workflows in R2R](#workflows-in-r2r)\n          - [List of Workflows](#list-of-workflows)\n    - [Orchestration GUI](#orchestration-gui)\n       - [Access GUI](#access-gui)\n       - [Login](#login-1)\n          - [Credentials](#credentials-1)\n          - [Logging into Hatchet](#logging-into-hatchet)\n       - [Running Tasks](#running-tasks)\n          - [Running Tasks Screenshot](#running-tasks-screenshot)\n       - [Inspecting a Workflow](#inspecting-a-workflow)\n          - [Inspecting a Workflow Screenshot](#inspecting-a-workflow-screenshot)\n       - [Long Running Tasks](#long-running-tasks)\n          - [Long Running Tasks Screenshot](#long-running-tasks-screenshot)\n    - [Coming Soon](#coming-soon)\n    - [Best Practices](#best-practices-6)\n       - [Development](#development-1)\n       - [Performance](#performance-2)\n       - [Quality](#quality-1)\n    - [Troubleshooting](#troubleshooting-3)\n    - [Conclusion](#conclusion-9)\n13. [Maintenance & Scaling](#maintenance--scaling)\n    - [Vector Indices](#vector-indices)\n       - [Do You Need Vector Indices?](#do-you-need-vector-indices)\n       - [Vector Index Management](#vector-index-management)\n          - [Python Example: Creating and Deleting a Vector Index](#python-example-14)\n       - [Important Considerations](#important-considerations-1)\n    - [System Updates and Maintenance](#system-updates-and-maintenance)\n       - [Version Management](#version-management)\n          - [Check Current R2R Version](#check-current-r2r-version)\n       - [Update Process](#update-process)\n          - [Steps with Commands](#steps-with-commands)\n       - [Database Migration Management](#database-migration-management)\n          - [Check Current Migration](#check-current-migration)\n          - [Apply Migrations](#apply-migrations)\n    - [Managing Multiple Environments](#managing-multiple-environments)\n       - [Example with Environment Variables](#example-with-environment-variables)\n    - [Troubleshooting](#troubleshooting-4)\n       - [Steps](#steps-1)\n    - [Scaling Strategies](#scaling-strategies)\n       - [Horizontal Scaling](#horizontal-scaling)\n          - [Load Balancing](#load-balancing)\n          - [Sharding](#sharding)\n       - [Vertical Scaling](#vertical-scaling)\n          - [Cloud Provider Solutions](#cloud-provider-solutions)\n          - [Memory Optimization](#memory-optimization)\n       - [Multi-User Considerations](#multi-user-considerations)\n          - [Filtering Optimization](#filtering-optimization)\n          - [Collection Management](#collection-management-1)\n          - [Resource Allocation](#resource-allocation)\n       - [Performance Monitoring](#performance-monitoring)\n          - [Metrics](#metrics)\n    - [Performance Considerations](#performance-considerations-1)\n       - [Strategies](#strategies)\n    - [Additional Resources](#additional-resources-1)\n    - [Best Practices](#best-practices-7)\n       - [Optimize Indexing](#optimize-indexing)\n       - [Monitor Resources](#monitor-resources)\n       - [Regular Maintenance](#regular-maintenance)\n       - [Plan Scaling Ahead](#plan-scaling-ahead)\n    - [Conclusion](#conclusion-10)\n14. [Web Development](#web-development)\n    - [Hello R2R—JavaScript](#hello-r2rjavascript)\n       - [Example: `r2r-js/examples/hello_r2r.js`](#example-r2r-jsexampleshello_r2rjs)\n    - [r2r-js Client](#r2r-js-client)\n       - [Installing](#installing-1)\n       - [Creating the Client](#creating-the-client)\n       - [Log into the Server](#log-into-the-server)\n       - [Ingesting Files](#ingesting-files-1)\n          - [Example and Sample Output](#example-and-sample-output-1)\n       - [Performing RAG](#performing-rag-1)\n          - [Example and Sample Output](#example-and-sample-output-2)\n    - [Connecting to a Web App](#connecting-to-a-web-app)\n       - [Setting up an API Route](#setting-up-an-api-route)\n       - [Frontend: React Component](#frontend-react-component)\n       - [Template Repository](#template-repository)\n          - [Usage Steps](#usage-steps-1)\n    - [Best Practices](#best-practices-8)\n       - [Secure API Routes](#secure-api-routes)\n       - [Optimize Frontend Performance](#optimize-frontend-performance)\n       - [Handle Errors Gracefully](#handle-errors-gracefully)\n       - [Implement Caching](#implement-caching)\n       - [Maintain Consistent State](#maintain-consistent-state)\n    - [Conclusion](#conclusion-11)\n15. [User Management](#user-management)\n    - [Introduction](#introduction-3)\n    - [Basic Usage](#basic-usage-2)\n       - [User Registration and Login](#user-registration-and-login-1)\n          - [Python Example](#python-example-15)\n       - [Email Verification (Optional)](#email-verification-optional-1)\n       - [Token Refresh](#token-refresh-1)\n       - [User-Specific Search](#user-specific-search-1)\n          - [Curl Example](#curl-example-2)\n       - [User Logout](#user-logout-1)\n          - [Curl Example](#curl-example-3)\n    - [Advanced Authentication Features](#advanced-authentication-features-1)\n       - [Password Management](#password-management-1)\n          - [Python Example](#python-example-16)\n       - [User Profile Management](#user-profile-management-1)\n          - [Python Example](#python-example-17)\n       - [Account Deletion](#account-deletion-1)\n          - [Python Example](#python-example-18)\n       - [Logout](#logout-2)\n          - [Python Example](#python-example-19)\n    - [Superuser Capabilities and Default Admin Creation](#superuser-capabilities-and-default-admin-creation)\n       - [Superuser Capabilities](#superuser-capabilities-1)\n       - [Default Admin Creation](#default-admin-creation-1)\n          - [Configuration](#configuration-3)\n       - [Accessing Superuser Features](#accessing-superuser-features-1)\n          - [Python Example](#python-example-20)\n    - [Security Considerations for Superusers](#security-considerations-for-superusers)\n    - [Security Considerations](#security-considerations-3)\n    - [Customizing Authentication](#customizing-authentication)\n    - [Troubleshooting](#troubleshooting-5)\n    - [Conclusion](#conclusion-12)\n16. [Collections](#collections)\n    - [Introduction](#introduction-4)\n    - [Basic Usage](#basic-usage-3)\n       - [Collection CRUD Operations](#collection-crud-operations-1)\n          - [Creating a Collection](#creating-a-collection)\n             - [Python Example](#python-example-21)\n          - [Retrieving Collection Details](#retrieving-collection-details)\n             - [Python Example](#python-example-22)\n          - [Updating a Collection](#updating-a-collection-1)\n             - [Python Example](#python-example-23)\n          - [Deleting a Collection](#deleting-a-collection-1)\n             - [Example](#example-13)\n    - [User Management in Collections](#user-management-in-collections)\n       - [Adding a User to a Collection](#adding-a-user-to-a-collection)\n          - [Example](#example-14)\n       - [Removing a User from a Collection](#removing-a-user-from-a-collection)\n          - [Example](#example-15)\n       - [Listing Users in a Collection](#listing-users-in-a-collection)\n          - [Example](#example-16)\n       - [Getting Collections for a User](#getting-collections-for-a-user)\n          - [Example](#example-17)\n    - [Document Management in Collections](#document-management-in-collections)\n       - [Assigning a Document to a Collection](#assigning-a-document-to-a-collection)\n          - [Example](#example-18)\n       - [Removing a Document from a Collection](#removing-a-document-from-a-collection)\n          - [Example](#example-19)\n       - [Listing Documents in a Collection](#listing-documents-in-a-collection)\n          - [Example](#example-20)\n       - [Getting Collections for a Document](#getting-collections-for-a-document)\n          - [Example](#example-21)\n    - [Advanced Collection Management](#advanced-collection-management)\n       - [Generating Synthetic Descriptions](#generating-synthetic-descriptions)\n          - [Example](#example-22)\n       - [Collection Overview](#collection-overview-1)\n          - [Example](#example-23)\n    - [Pagination and Filtering](#pagination-and-filtering-1)\n       - [Examples](#examples-1)\n    - [Security Considerations](#security-considerations-4)\n    - [Customizing Collection Permissions](#customizing-collection-permissions)\n    - [Troubleshooting](#troubleshooting-6)\n    - [Conclusion](#conclusion-13)\n    - [Next Steps](#next-steps-3)\n17. [Telemetry](#telemetry)\n    - [Introduction](#introduction-5)\n    - [Disabling Telemetry](#disabling-telemetry)\n       - [Example](#example-24)\n    - [Collected Information](#collected-information)\n    - [Telemetry Data Storage](#telemetry-data-storage)\n       - [Note](#note)\n    - [Why We Collect Telemetry](#why-we-collect-telemetry)\n    - [Conclusion](#conclusion-14)\n18. [Embedding](#embedding)\n    - [Embedding System](#embedding-system)\n    - [Embedding Configuration](#embedding-configuration-1)\n       - [Example: `r2r.toml`](#example-r2rtoml-1)\n    - [Advanced Embedding Features in R2R](#advanced-embedding-features-in-r2r)\n       - [Batched Processing](#batched-processing)\n          - [Python Example](#python-example-24)\n       - [Concurrent Request Management](#concurrent-request-management-1)\n    - [Performance Considerations](#performance-considerations-2)\n       - [Strategies](#strategies-1)\n    - [Supported LiteLLM Providers](#supported-litellm-providers)\n       - [Example Configuration](#example-configuration-9)\n       - [Supported Models](#supported-models)\n    - [Performance Considerations](#performance-considerations-3)\n    - [Conclusion](#conclusion-15)\n19. [Prompts](#prompts)\n    - [Prompt Management in R2R](#prompt-management-in-r2r)\n    - [Default Prompts](#default-prompts)\n       - [Example: `default_rag.yaml`](#example-default_ragyaml)\n       - [Prompt Files](#prompt-files)\n    - [Prompt Provider](#prompt-provider)\n    - [Prompt Structure](#prompt-structure)\n    - [Managing Prompts](#managing-prompts)\n       - [Adding a Prompt](#adding-a-prompt)\n          - [Example](#example-25)\n       - [Updating a Prompt](#updating-a-prompt)\n          - [Example](#example-26)\n       - [Retrieving a Prompt](#retrieving-a-prompt)\n          - [Example](#example-27)\n    - [Security Considerations](#security-considerations-5)\n    - [Conclusion](#conclusion-16)\n20. [RAG](#rag)\n    - [RAG Customization](#rag-customization)\n       - [Components](#components)\n    - [LLM Provider Configuration](#llm-provider-configuration)\n    - [Retrieval Configuration](#retrieval-configuration-1)\n    - [Combining LLM and Retrieval Configuration for RAG](#combining-llm-and-retrieval-configuration-for-rag)\n       - [Example](#example-28)\n    - [RAG Prompt Override](#rag-prompt-override)\n       - [Example](#example-29)\n    - [Agent-based Interaction](#agent-based-interaction)\n       - [Example](#example-30)\n    - [Conclusion](#conclusion-17)\n21. [Graphs](#graphs)\n    - [Graphs](#graphs-1)\n    - [Knowledge Graph Operations](#knowledge-graph-operations)\n       - [Entity Management](#entity-management-1)\n       - [Relationship Management](#relationship-management-1)\n       - [Batch Import](#batch-import)\n       - [Vector Search](#vector-search-1)\n       - [Community Detection](#community-detection)\n    - [Customization](#customization-1)\n    - [Conclusion](#conclusion-18)\n22. [Conclusion](#conclusion-19)\n\n---\n\n## Introduction\n\n**R2R** (Retrieval to Riches) is an engine for building user-facing **Retrieval-Augmented Generation (RAG)** applications. It provides core services through an architecture of providers, services, and an integrated RESTful API. This documentation offers a detailed walkthrough of interacting with R2R, including installation, configuration, and leveraging its advanced features such as data ingestion, search, RAG, and knowledge graphs.\n\nFor a deeper dive into the R2R system architecture, refer to the [R2R System Architecture](https://r2r-docs.sciphi.ai/introduction/system).\n\n---\n\n## Installation\n\nBefore diving into R2R's features, ensure that you have completed the [installation instructions](https://r2r-docs.sciphi.ai/documentation/installation/overview).\n\n### Prerequisites\n\n- **Python 3.8+**: Ensure Python is installed on your system.\n- **Docker**: Required for Docker-based installations. Install Docker from the [official Docker installation guide](https://docs.docker.com/engine/install/).\n- **pip**: Python package installer.\n\n### Docker Installation\n\nThis installation guide is for the **Full R2R**. For solo developers or teams prototyping, start with [R2R Light](https://r2r-docs.sciphi.ai/documentation/installation/light/local-system).\n\n#### Install the R2R CLI & Python SDK\n\n```bash\npip install r2r\n```\n\n> **Note**: A distinct CLI binary for R2R is under active development. For specific needs or feature requests, reach out to the R2R team.\n\n#### Start R2R with Docker\n\nThe Full R2R installation uses a custom configuration (`full.toml`). Launch R2R with Docker:\n\n```bash\nr2r serve --docker --config-path=full.toml\n```\n\n> This command pulls necessary Docker images and starts required containers, including R2R, Hatchet, and Postgres+pgvector. Access the live server at [http://localhost:7272](http://localhost:7272/).\n\n### Google Cloud Platform Deployment\n\nDeploying R2R on Google Cloud Platform (GCP) involves setting up a Compute Engine instance, installing dependencies, and configuring port forwarding.\n\n#### Overview\n\n1. **Creating a Google Compute Engine Instance**\n2. **Installing Dependencies**\n3. **Setting up R2R**\n4. **Configuring Port Forwarding for Local Access**\n5. **Exposing Ports for Public Access (Optional)**\n6. **Security Considerations**\n\n#### Creating a Google Compute Engine Instance\n\n1. **Log in** to the Google Cloud Console.\n2. Navigate to **Compute Engine** > **VM instances**.\n3. Click **Create Instance**.\n4. Configure the instance:\n   - **Name**: Choose a name.\n   - **Region and Zone**: Select based on preference.\n   - **Machine Configuration**:\n     - **Series**: N1\n     - **Machine type**: `n1-standard-4` (4 vCPU, 15 GB memory) or higher.\n   - **Boot Disk**:\n     - **OS**: Ubuntu 22.04 LTS\n     - **Size**: 500 GB\n   - **Firewall**: Allow HTTP and HTTPS traffic.\n5. Click **Create** to launch the instance.\n\n#### Installing Dependencies\n\nSSH into your instance and run the following commands:\n\n```bash\n# Update package list and install Python and pip\nsudo apt update\nsudo apt install python3-pip -y\n\n# Install R2R\npip install r2r\n\n# Add R2R to PATH\necho 'export PATH=$PATH:$HOME/.local/bin' >> ~/.bashrc\nsource ~/.bashrc\n\n# Install Docker\nsudo apt-get update\nsudo apt-get install ca-certificates curl gnupg -y\nsudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\nsudo chmod a+r /etc/apt/keyrings/docker.gpg\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y\n\n# Add your user to the Docker group\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Verify Docker installation\ndocker run hello-world\n```\n\n#### Setting up R2R\n\n```bash\n# Set required remote providers\nexport OPENAI_API_KEY=sk-...\n\n# Optional - pass in a custom configuration\nr2r serve --docker --full\n```\n\n#### Configuring Port Forwarding for Local Access\n\nUse SSH port forwarding to access R2R locally:\n\n```bash\ngcloud compute ssh --zone \"your-zone\" \"your-instance-name\" -- -L 7273:localhost:7273 -L 7274:localhost:7274\n```\n\n#### Exposing Ports for Public Access (Optional)\n\nTo make R2R publicly accessible:\n\n1. **Create a Firewall Rule**:\n   - Navigate to **VPC network** > **Firewall**.\n   - Click **Create Firewall Rule**.\n   - **Name**: Allow-R2R\n   - **Target tags**: `r2r-server`\n   - **Source IP ranges**: `0.0.0.0/0`\n   - **Protocols and ports**: `tcp:7272`\n2. **Add Network Tag to Instance**:\n   - Go to **Compute Engine** > **VM instances**.\n   - Click on your instance.\n   - Click **Edit**.\n   - Under **Network tags**, add `r2r-server`.\n   - Click **Save**.\n3. **Ensure R2R Listens on All Interfaces**.\n\nAfter starting R2R, access it at:\n\n```\nhttp://<your-instance-external-ip>:7272\n```\n\n> **Security Considerations**:\n> - Use HTTPS with a valid SSL certificate.\n> - Restrict source IP addresses in firewall rules.\n> - Regularly update and patch your system.\n\n#### Conclusion\n\nYou have successfully deployed R2R on Google Cloud Platform. The application is accessible locally via SSH tunneling and optionally publicly. Ensure proper security measures are in place before exposing R2R to the internet.\n\nFor more details, refer to the [R2R Configuration Documentation](https://r2r-docs.sciphi.ai/documentation/configuration/overview).\n\n---\n\n## R2R Application Lifecycle\n\nR2R's application lifecycle encompasses customization, configuration, deployment, implementation, and interaction. The lifecycle is designed to provide flexibility and scalability for various use cases.\n\n### Developer Workflow\n\n- **Customize**: Developers tailor R2R applications using R2RConfig and the R2R SDK.\n- **Configure**: Adjust settings via configuration files (`r2r.toml`) or runtime overrides.\n- **Deploy**: Launch R2R using Docker, cloud platforms, or local installations.\n- **Implement**: Integrate R2R into applications using provided APIs and SDKs.\n- **Interact**: Users engage with the R2R application through interfaces like dashboards or APIs to perform RAG queries or search documents.\n\n### User Interaction\n\n- **Users** interact with the R2R application, typically over an HTTP interface, to run RAG queries or search documents.\n- Access the **R2R Dashboard** for managing documents, collections, and performing searches.\n\n### Hello R2R (Code Example)\n\n**Python Example** at `core/examples/hello_r2r.py`:\n\n```python\nfrom r2r import R2RClient\n\nclient = R2RClient(\"http://localhost:7272\")\n\n# Create a test document\nwith open(\"test.txt\", \"w\") as file:\n    file.write(\"John is a person that works at Google.\")\n\nclient.documents.create(file_path=\"test.txt\")\n\n# Call RAG directly\nrag_response = client.retrieval.rag(\n    query=\"Who is John\",\n    rag_generation_config={\"model\": \"openai/gpt-4o-mini\", \"temperature\": 0.0},\n)\n\nresults = rag_response[\"results\"]\n\nprint(f\"Search Results:\\n{results['search_results']}\")\nprint(f\"Completion:\\n{results['completion']}\")\n```\n\n**Sample Output:**\n\n```json\n{\n  \"results\": {\n    \"search_results\": {\n      \"chunk_search_results\": [\n        {\n          \"chunk_id\": \"b9f40dbd-2c8e-5c0a-8454-027ac45cb0ed\",\n          \"document_id\": \"7c319fbe-ca61-5770-bae2-c3d0eaa8f45c\",\n          \"score\": 0.6847735847465275,\n          \"text\": \"John is a person that works at Google.\",\n          \"metadata\": {\n            \"version\": \"v0\",\n            \"chunk_order\": 0,\n            \"document_type\": \"txt\",\n            \"associated_query\": \"Who is John\"\n          }\n        }\n      ],\n      \"kg_search_results\": []\n    },\n    \"completion\": {\n      \"id\": \"chatcmpl-AV1Sc9DORfHvq7yrmukxfJPDV5dCB\",\n      \"choices\": [\n        {\n          \"finish_reason\": \"stop\",\n          \"index\": 0,\n          \"message\": {\n            \"content\": \"John is a person that works at Google [1].\",\n            \"role\": \"assistant\"\n          }\n        }\n      ],\n      \"created\": 1731957146,\n      \"model\": \"gpt-4o-mini\",\n      \"object\": \"chat.completion\",\n      \"usage\": {\n        \"completion_tokens\": 11,\n        \"prompt_tokens\": 145,\n        \"total_tokens\": 156\n      }\n    }\n  }\n}\n```\n\nThis snippet:\n1. Creates a file with simple text.\n2. Ingests it to R2R.\n3. Runs a **Retrieval-Augmented Generation** query.\n4. Prints the context matched (“search_results”) and the generated answer (“completion”).\n\n---\n\n## Configuration\n\nR2R is highly configurable, allowing you to tailor its behavior to your specific needs. Configuration can be done at the server-side using configuration files (`r2r.toml`) or at runtime via API calls.\n\n### Configuration Overview\n\nR2R configurations are divided into two primary levels:\n1. **Server-Side Configuration**: Managed through the `r2r.toml` file and environment variables.\n2. **Runtime Overrides**: Passed directly in API calls to adjust settings dynamically.\n\n### Server-Side Configuration (`r2r.toml`)\n\nThe `r2r.toml` file allows you to define server-side settings that govern the behavior of R2R. Below are the main configuration sections:\n\n#### Example: `r2r.toml`\n\n```toml\n[completion]\nprovider = \"litellm\"\nconcurrent_request_limit = 16\n\n[completion.generation_config]\nmodel = \"openai/gpt-4o\"\ntemperature = 0.5\n\n[ingestion]\nprovider = \"r2r\"\nchunking_strategy = \"recursive\"\nchunk_size = 1024\nchunk_overlap = 512\nexcluded_parsers = [\"mp4\"]\n\n[database]\nprovider = \"postgres\"\nuser = \"your_postgres_user\"\npassword = \"your_postgres_password\"\nhost = \"your_postgres_host\"\nport = \"your_postgres_port\"\ndb_name = \"your_database_name\"\nproject_name = \"your_project_name\"\n\n[embedding]\nprovider = \"litellm\"\nbase_model = \"openai/text-embedding-3-small\"\nbase_dimension = 512\nbatch_size = 512\nrerank_model = \"BAAI/bge-reranker-v2-m3\"\nconcurrent_request_limit = 256\n\n[auth]\nprovider = \"r2r\"\nrequire_authentication = true\nrequire_email_verification = false\ndefault_admin_email = \"admin@example.com\"\ndefault_admin_password = \"change_me_immediately\"\naccess_token_lifetime_in_minutes = 60\nrefresh_token_lifetime_in_days = 7\nsecret_key = \"your-secret-key\"\n\n[ingestion.chunk_enrichment_settings]\nenable_chunk_enrichment = true\nstrategies = [\"semantic\", \"neighborhood\"]\nforward_chunks = 3\nbackward_chunks = 3\nsemantic_neighbors = 10\nsemantic_similarity_threshold = 0.7\ngeneration_config = { model = \"openai/gpt-4o-mini\" }\n\n[agent]\nsystem_instruction_name = \"rag_agent\"\ntool_names = [\"local_search\", \"web_search\"]\n\n[database.graph_creation_settings]\nentity_types = []\nrelation_types = []\nmax_knowledge_triples = 100\nfragment_merge_count = 4\ngeneration_config = { model = \"openai/gpt-4o-mini\" }\n\n[database.graph_enrichment_settings]\nmax_description_input_length = 65536\nmax_summary_input_length = 65536\ngeneration_config = { model = \"openai/gpt-4o-mini\" }\nleiden_params = {}\n\n[database.graph_settings]\ngeneration_config = { model = \"openai/gpt-4o-mini\" }\n```\n\n### Runtime Overrides\n\nRuntime overrides allow you to adjust configurations dynamically without modifying the `r2r.toml` file. This is useful for temporary changes or testing different settings on the fly.\n\n**Example: Customizing RAG Query at Runtime**\n\n```python\nrag_response = client.retrieval.rag(\n    query=\"Who is Jon Snow?\",\n    rag_generation_config={\n        \"model\": \"anthropic/claude-3-haiku-20240307\",\n        \"temperature\": 0.7\n    },\n    search_settings={\n        \"use_semantic_search\": True,\n        \"limit\": 20,\n        \"use_hybrid_search\": True\n    }\n)\n```\n\n### Postgres Configuration\n\nR2R uses Postgres for relational and vector data storage, leveraging the `pgvector` extension for vector indexing.\n\n#### Example Configuration\n\n```toml\n[database]\nprovider = \"postgres\"\nuser = \"your_postgres_user\"\npassword = \"your_postgres_password\"\nhost = \"your_postgres_host\"\nport = \"your_postgres_port\"\ndb_name = \"your_database_name\"\nproject_name = \"your_project_name\"\n```\n\n**Key Features:**\n- **pgvector**: Enables efficient vector operations.\n- **Full-Text Indexing**: Utilizes Postgres’s `ts_rank` for full-text search.\n- **JSONB**: Stores flexible metadata.\n\n### Embedding Configuration\n\nR2R uses **LiteLLM** to manage embedding providers, allowing flexibility in selecting different LLM providers.\n\n#### Example Configuration\n\n```toml\n[embedding]\nprovider = \"litellm\"\nbase_model = \"openai/text-embedding-3-small\"\nbase_dimension = 512\nbatch_size = 512\nrerank_model = \"BAAI/bge-reranker-v2-m3\"\nconcurrent_request_limit = 256\n```\n\n**Environment Variables:**\n- `OPENAI_API_KEY`\n- `HUGGINGFACE_API_KEY`\n- `ANTHROPIC_API_KEY`\n- `COHERE_API_KEY`\n- `OLLAMA_API_KEY`\n- etc.\n\n**Supported Providers:**\n- OpenAI\n- Azure\n- Anthropic\n- Cohere\n- Ollama\n- HuggingFace\n- Bedrock\n- Vertex AI\n- Voyage AI\n\n### Auth & Users Configuration\n\nR2R’s authentication system supports secure user registration, login, session management, and access control.\n\n#### Example Configuration\n\n```toml\n[auth]\nprovider = \"r2r\"\nrequire_authentication = true\nrequire_email_verification = false\ndefault_admin_email = \"admin@example.com\"\ndefault_admin_password = \"change_me_immediately\"\naccess_token_lifetime_in_minutes = 60\nrefresh_token_lifetime_in_days = 7\nsecret_key = \"your-secret-key\"\n```\n\n**Key Features:**\n- **JWT-Based Authentication**: Utilizes access and refresh tokens.\n- **Email Verification**: Optional, recommended for production.\n- **Superuser Management**: Default admin creation and superuser capabilities.\n\n### Data Ingestion Configuration\n\nConfigure how R2R ingests documents, including parsing, chunking, and embedding strategies.\n\n#### Example Configuration\n\n```toml\n[ingestion]\nprovider = \"r2r\"\nchunking_strategy = \"recursive\"\nchunk_size = 1024\nchunk_overlap = 512\nexcluded_parsers = [\"mp4\"]\n\n[ingestion.chunk_enrichment_settings]\nenable_chunk_enrichment = true\nstrategies = [\"semantic\", \"neighborhood\"]\nforward_chunks = 3\nbackward_chunks = 3\nsemantic_neighbors = 10\nsemantic_similarity_threshold = 0.7\ngeneration_config = { model = \"openai/gpt-4o-mini\" }\n```\n\n**Modes:**\n- `fast`: Speed-oriented ingestion.\n- `hi-res`: Comprehensive, high-quality ingestion.\n- `custom`: Fine-grained control with a full `ingestion_config` dictionary.\n\n### Retrieval Configuration\n\nFocuses on search settings, combining vector and knowledge-graph search capabilities.\n\n#### Example Configuration\n\n```json\n{\n  \"search_settings\": {\n    \"use_semantic_search\": true,\n    \"limit\": 20,\n    \"use_hybrid_search\": true,\n    \"graph_search_settings\": {\n      \"use_graph_search\": true,\n      \"kg_search_type\": \"local\"\n    }\n  }\n}\n```\n\n### RAG Configuration\n\nCustomize RAG (Retrieval-Augmented Generation) settings, including the language model's behavior.\n\n#### Example Configuration\n\n```python\nrag_generation_config = {\n    \"model\": \"anthropic/claude-3-haiku-20240307\",\n    \"temperature\": 0.7,\n    \"top_p\": 0.95,\n    \"max_tokens_to_sample\": 1500,\n    \"stream\": True\n}\n```\n\n### Graphs Configuration\n\nDefines settings related to knowledge graph creation and enrichment.\n\n#### Example Configuration\n\n```toml\n[database.graph_creation_settings]\nentity_types = []\nrelation_types = []\nmax_knowledge_triples = 100\nfragment_merge_count = 4\ngeneration_config = { model = \"openai/gpt-4o-mini\" }\n\n[database.graph_enrichment_settings]\nmax_description_input_length = 65536\nmax_summary_input_length = 65536\ngeneration_config = { model = \"openai/gpt-4o-mini\" }\nleiden_params = {}\n\n[database.graph_settings]\ngeneration_config = { model = \"openai/gpt-4o-mini\" }\n```\n\n### Prompts Configuration\n\nManages prompt templates used for various tasks within R2R.\n\n#### Example Configuration\n\nPrompts are stored in Postgres and can be managed via the SDK.\n\n**Example: Adding a Prompt**\n\n```python\nresponse = client.prompts.add_prompt(\n    name=\"my_new_prompt\",\n    template=\"Hello, {name}! Welcome to {service}.\",\n    input_types={\"name\": \"str\", \"service\": \"str\"}\n)\n```\n\n---\n\n## Data Ingestion\n\n### Introduction\n\nR2R provides a powerful and flexible ingestion pipeline to process and manage various types of documents. It supports a wide range of file formats—text, documents, PDFs, images, audio, and video—and transforms them into searchable, analyzable content. The ingestion process includes parsing, chunking, embedding, and optionally extracting entities and relationships for knowledge graph construction.\n\nThis section will guide you through:\n\n- Ingesting files, raw text, or pre-processed chunks\n- Choosing an ingestion mode (`fast`, `hi-res`, or `custom`)\n- Updating and deleting documents and chunks\n\nFor more on configuring ingestion, see the [Ingestion Configuration Overview](https://r2r-docs.sciphi.ai/documentation/configuration/ingestion) and [Parsing & Chunking](https://r2r-docs.sciphi.ai/documentation/configuration/ingestion/parsing_and_chunking).\n\n### Ingestion Modes\n\nR2R offers three primary ingestion modes to tailor the process to your requirements:\n\n| Mode    | Description                                                                                                          |\n|---------|----------------------------------------------------------------------------------------------------------------------|\n| `fast`  | Speed-oriented ingestion that prioritizes rapid processing with minimal enrichment. Ideal for quickly processing large volumes of documents. |\n| `hi-res`| Comprehensive, high-quality ingestion that may leverage multimodal foundation models for parsing complex documents and PDFs. Suitable for documents requiring detailed analysis. |\n| `custom`| Advanced mode offering fine-grained control. Users provide a full `ingestion_config` dict or object to specify parser options, chunking strategy, character limits, and more. |\n\n**Example Usage:**\n\n```python\nfile_path = 'path/to/file.txt'\nmetadata = {'key1': 'value1'}\n\n# hi-res mode for thorough extraction\ningest_response = client.documents.create(\n    file_path=file_path,\n    metadata=metadata,\n    ingestion_mode=\"hi-res\"\n)\n\n# fast mode for quick processing\ningest_response = client.documents.create(\n    file_path=file_path,\n    ingestion_mode=\"fast\"\n)\n\n# custom mode for full control\ningest_response = client.documents.create(\n    file_path=file_path,\n    ingestion_mode=\"custom\",\n    ingestion_config={\n        \"provider\": \"unstructured_local\",\n        \"strategy\": \"auto\",\n        \"chunking_strategy\": \"by_title\",\n        \"new_after_n_chars\": 256,\n        \"max_characters\": 512,\n        \"combine_under_n_chars\": 64,\n        \"overlap\": 100,\n    }\n)\n```\n\n### Ingesting Documents\n\nA `Document` represents ingested content in R2R. When you ingest a file, text, or chunks:\n\n1. **Parsing**: Converts source files into text.\n2. **Chunking**: Breaks text into manageable units.\n3. **Embedding**: Generates embeddings for semantic search.\n4. **Storing**: Persists chunks and embeddings for retrieval.\n5. **Knowledge Graph Integration**: Optionally extracts entities and relationships.\n\nIn a **full** R2R installation, ingestion is asynchronous. Monitor ingestion status and confirm when documents are ready:\n\n```bash\nr2r documents list\n```\n\n**Example Response:**\n\n```json\n{\n  \"id\": \"9fbe403b-c11c-5aae-8ade-ef22980c3ad1\",\n  \"title\": \"file.txt\",\n  \"user_id\": \"2acb499e-8428-543b-bd85-0d9098718220\",\n  \"type\": \"txt\",\n  \"created_at\": \"2024-09-05T18:20:47.921933Z\",\n  \"updated_at\": \"2024-09-05T18:20:47.921938Z\",\n  \"ingestion_status\": \"success\",\n  \"restructuring_status\": \"pending\",\n  \"version\": \"v0\",\n  \"summary\": \"The document contains a ....\",\n  \"collection_ids\": [],\n  \"metadata\": {\"version\": \"v0\"}\n}\n```\n\nAn `ingestion_status` of `\"success\"` confirms the document is fully ingested. Also, check the R2R dashboard at [http://localhost:7273](http://localhost:7273/) for ingestion progress and status.\n\nFor more details on creating documents, refer to the [Create Document API](https://r2r-docs.sciphi.ai/api-and-sdks/documents/create-document).\n\n### Ingesting Pre-Processed Chunks\n\nIf you have pre-processed chunks from your own pipeline, ingest them directly. Useful if content is already divided into logical segments.\n\n**Example:**\n\n```python\nchunks = [\"This is my first parsed chunk\", \"This is my second parsed chunk\"]\n\ningest_response = client.documents.create(\n    chunks=chunks,\n    ingestion_mode=\"fast\"  # use fast for quick chunk ingestion\n)\n\nprint(ingest_response)\n# {'results': [{'message': 'Document created and ingested successfully.', 'document_id': '7a0dad00-b041-544e-8028-bc9631a0a527'}]}\n```\n\nFor more on ingesting chunks, see the [Create Chunks API](https://r2r-docs.sciphi.ai/api-and-sdks/chunks/create-chunks).\n\n### Deleting Documents and Chunks\n\nTo remove documents or chunks, use their respective `delete` methods.\n\n**Delete a Document:**\n\n```bash\ncurl -X DELETE http://localhost:7272/v3/documents/9fbe403b-c11c-5aae-8ade-ef22980c3ad1 \\\n  -H \"Content-Type: application/json\"\n```\n\n**Sample Output:**\n\n```json\n{\"results\": {\"success\": true}}\n```\n\n**Key Features of Deletion:**\n\n1. **Deletion by Document ID**: Remove specific documents.\n2. **Cascading Deletion**: Deletes associated chunks and metadata.\n3. **Deletion by Filter**: Delete documents based on criteria like text match or user ID using `documents/by-filter`.\n\nThis mechanism ensures precise control over document management within R2R.\n\nFor advanced document management and user authentication details, refer to the [User Auth Cookbook](https://r2r-docs.sciphi.ai/cookbooks/user-auth).\n\n### Additional Configuration & Concepts\n\n- **Light vs. Full Deployments**:\n  - **Light**: Uses R2R’s built-in parser and supports synchronous ingestion.\n  - **Full**: Orchestrates ingestion tasks asynchronously and integrates with complex providers like `unstructured_local`.\n\n- **Provider Configuration**:\n  - Settings in `r2r.toml` or at runtime (`ingestion_config`) adjust parsing and chunking strategies.\n    - `fast` and `hi-res` modes influenced by strategies like `\"auto\"` or `\"hi_res\"`.\n    - `custom` mode allows overriding chunk size, overlap, excluded parsers, and more at runtime.\n\nFor detailed configuration options, see:\n\n- [Data Ingestion Configuration](https://r2r-docs.sciphi.ai/documentation/configuration/ingestion)\n- [Parsing & Chunking Configuration](https://r2r-docs.sciphi.ai/documentation/configuration/ingestion/parsing_and_chunking)\n\n### Conclusion\n\nR2R’s ingestion pipeline is flexible and efficient, allowing you to tailor ingestion to your needs:\n\n- Use `fast` for quick processing.\n- Use `hi-res` for high-quality, multimodal analysis.\n- Use `custom` for advanced, granular control.\n\nEasily ingest documents or pre-processed chunks, update their content, and delete them when no longer needed. Combined with powerful retrieval and knowledge graph capabilities, R2R enables seamless integration of advanced document management into your applications.\n\n---\n\n## Contextual Enrichment\n\nEnhance your RAG system chunks with rich contextual information to address the challenge of context loss in individual chunks.\n\n### The Challenge of Context Loss\n\nDuring ingestion, large documents are broken down into smaller chunks for efficient processing. However, isolated chunks may lack broader context, leading to incomplete or unclear responses.\n\n**Example:**\n\nUsing Lyft’s 2021 annual report:\n\n- **Original Chunk:**\n  ```\n  storing unrented and returned vehicles. These impacts to the demand for and operations of the different rental programs have and may continue to adversely affect our business, financial condition and results of operation.\n  ```\n\n- **Questions Raised:**\n  - What specific impacts are being discussed?\n  - Which rental programs are affected?\n  - What’s the broader context of these business challenges?\n\n### Introducing Contextual Enrichment\n\nContextual enrichment enhances chunks with relevant information from surrounding or semantically related content, giving each chunk a “memory” of related information.\n\n### Enabling Enrichment\n\nConfigure your `r2r.toml` file with the following settings:\n\n```toml\n[ingestion.chunk_enrichment_settings]\nenable_chunk_enrichment = true  # disabled by default\nstrategies = [\"semantic\", \"neighborhood\"]\nforward_chunks = 3  # Look ahead 3 chunks\nbackward_chunks = 3  # Look behind 3 chunks\nsemantic_neighbors = 10  # Find 10 semantically similar chunks\nsemantic_similarity_threshold = 0.7  # Minimum similarity score\ngeneration_config = { model = \"openai/gpt-4o-mini\" }\n```\n\n### Enrichment Strategies Explained\n\nR2R implements two strategies for chunk enrichment:\n\n#### 1. Neighborhood Strategy\n\n- **Forward Looking**: Captures upcoming context (default: 3 chunks).\n- **Backward Looking**: Incorporates previous context (default: 3 chunks).\n- **Use Case**: Effective for narrative documents with linear context flow.\n\n#### 2. Semantic Strategy\n\n- **Vector Similarity**: Identifies chunks with similar meanings regardless of location.\n- **Configurable Neighbors**: Customizable number of similar chunks.\n- **Similarity Threshold**: Ensures relevance by setting minimum similarity scores.\n- **Use Case**: Ideal for documents with recurring themes across sections.\n\n### The Enrichment Process\n\nR2R uses a prompt to guide the Language Model (LLM) during enrichment:\n\n**Task:**\n\nEnrich and refine the given chunk of text using information from the provided context chunks. The goal is to make the chunk more precise and self-contained.\n\n**Context Chunks:**\n\n```\n{context_chunks}\n```\n\n**Chunk to Enrich:**\n\n```\n{chunk}\n```\n\n**Instructions:**\n\n1. Rewrite the chunk in third person.\n2. Replace all common nouns with appropriate proper nouns.\n3. Use information from the context chunks to enhance clarity.\n4. Ensure the enriched chunk remains independent and self-contained.\n5. Maintain original scope without bleeding information.\n6. Focus on precision and informativeness.\n7. Preserve original meaning while improving clarity.\n8. Output only the enriched chunk.\n\n**Enriched Chunk:**\n\n```\n[Enriched Chunk Output]\n```\n\n### Implementation and Results\n\nTo process documents with enrichment:\n\n```bash\nr2r documents create --file_path path/to/lyft_2021.pdf\n```\n\n#### Viewing Enriched Results\n\nAccess enriched chunks through the API:\n\n```bash\ncurl -X GET http://localhost:7272/v3/document/{document_id}/chunks\n```\n\n**Before Enrichment:**\n\n```\nstoring unrented and returned vehicles. These impacts to the demand for and operations of the different rental programs have and may continue to adversely affect our business, financial condition and results of operation.\n```\n\n**After Enrichment:**\n\n```\nThe impacts of the COVID-19 pandemic on the demand for and operations of the various vehicle rental programs, including Lyft Rentals and the Express Drive program, have resulted in challenges regarding the storage of unrented and returned vehicles. These adverse conditions are anticipated to continue affecting Lyft's overall business performance, financial condition, and operational results.\n```\n\n**Enhancements in Enriched Chunk:**\n\n- Specifies the cause (COVID-19 pandemic).\n- Names specific programs (Lyft Rentals, Express Drive).\n- Provides clearer context about the business impact.\n- Maintains professional, third-person tone.\n\n### Metadata and Storage\n\nR2R maintains both enriched and original versions:\n\n```json\n{\n  \"results\": [\n    {\n      \"text\": \"enriched_version\",\n      \"metadata\": {\n        \"original_text\": \"original_version\",\n        \"chunk_enrichment_status\": \"success\"\n        // ... additional metadata ...\n      }\n    }\n  ]\n}\n```\n\nThis dual storage ensures transparency and allows for version comparison when needed.\n\n### Best Practices\n\n1. **Tune Your Parameters**: Adjust `forward_chunks`, `backward_chunks`, and `semantic_neighbors` based on document structure.\n2. **Monitor Enrichment Quality**: Regularly review enriched chunks to ensure accuracy.\n3. **Consider Document Type**: Different documents may benefit from different enrichment strategies.\n4. **Balance Context Size**: More context isn’t always better; find the optimal size for your use case.\n\n---\n\n## AI Powered Search\n\nR2R supports advanced search capabilities, including vector search, hybrid search (keyword + vector), and knowledge graph-enhanced search. This section covers the understanding of search modes, configuration, and best practices.\n\n### Introduction\n\nR2R’s hybrid search blends keyword-based full-text search with semantic vector search, delivering results that are both contextually relevant and precise. This unified approach excels at handling complex queries where both exact terms and overall meaning matter.\n\n### Understanding Search Modes\n\nR2R supports multiple search modes to simplify or customize your search configuration:\n\n| Mode      | Description                                                                                                          |\n|-----------|----------------------------------------------------------------------------------------------------------------------|\n| `basic`   | Primarily semantic search. Suitable for straightforward scenarios where semantic understanding is key.              |\n| `advanced`| Combines semantic and full-text search by default, enabling hybrid search with well-tuned default parameters.         |\n| `custom`  | Allows full control over search settings, including toggling semantic and full-text search independently.            |\n\n- **`advanced` Mode**: Automatically configures hybrid search with balanced parameters.\n- **`custom` Mode**: Manually set `use_hybrid_search=True` or enable both `use_semantic_search` and `use_fulltext_search` for a hybrid setup.\n\n### How R2R Hybrid Search Works\n\n1. **Full-Text Search**:\n   - Utilizes Postgres’s `ts_rank_cd` and `websearch_to_tsquery` for exact term matches.\n\n2. **Semantic Search**:\n   - Employs vector embeddings to locate contextually related documents, even without exact keyword matches.\n\n3. **Reciprocal Rank Fusion (RRF)**:\n   - Merges results from both full-text and semantic searches using a formula to ensure balanced ranking.\n\n4. **Result Ranking**:\n   - Orders results based on the combined RRF score, providing balanced and meaningful search outcomes.\n\n### Vector Search\n\nVector search leverages semantic embeddings to find documents that are contextually similar to the query, even if they don't contain the exact keywords.\n\n**Example:**\n\n```bash\ncurl -X POST http://localhost:7272/v3/retrieval/search \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"query\": \"What was Uber'\\''s profit in 2020?\",\n    \"search_settings\": {\n      \"use_semantic_search\": true,\n      \"search_settings\": {\n        \"chunk_settings\": {\n          \"index_measure\": \"l2_distance\",\n          \"limit\": 10\n        }\n      }\n    }\n  }'\n```\n\n**Sample Output:**\n\nIncludes chunk-based results with text, metadata, etc.\n\n### Hybrid Search\n\nHybrid search combines keyword-based full-text search with semantic vector search to deliver more relevant results.\n\n**Example:**\n\n```bash\ncurl -X POST http://localhost:7272/v3/retrieval/search \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"query\": \"What was Uber'\\''s profit in 2020?\",\n    \"search_settings\": {\n      \"use_hybrid_search\": true,\n      \"hybrid_settings\": {\n        \"full_text_weight\": 1.0,\n        \"semantic_weight\": 5.0,\n        \"full_text_limit\": 200,\n        \"rrf_k\": 50\n      },\n      \"filters\": {\n        \"title\": {\n          \"$in\": [\"lyft_2021.pdf\", \"uber_2021.pdf\"]\n        }\n      },\n      \"limit\": 10,\n      \"chunk_settings\": {\n        \"index_measure\": \"l2_distance\",\n        \"probes\": 25,\n        \"ef_search\": 100\n      }\n    }\n  }'\n```\n\n### Knowledge Graph Search\n\nKnowledge graph search enhances retrieval by leveraging relationships and entities extracted from documents.\n\n**Example:**\n\n```bash\ncurl -X POST http://localhost:7272/v3/retrieval/search \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"query\": \"Who was Aristotle?\",\n    \"graph_search_settings\": {\n      \"use_graph_search\": true,\n      \"kg_search_type\": \"local\"\n    }\n  }'\n```\n\n### Reciprocal Rank Fusion (RRF)\n\nRRF is a technique used to merge results from different search strategies, ensuring balanced and relevant ranking.\n\n### Result Ranking\n\nResults are ranked based on the combined RRF score, providing a balanced mix of exact term matches and semantic relevance.\n\n### Configuration\n\n**Choosing a Search Mode:**\n\n| Mode      | Description                                               | Example Configuration                                                 |\n|-----------|-----------------------------------------------------------|-----------------------------------------------------------------------|\n| `basic`   | Semantic-only search                                      | `search_mode = \"basic\"`                                                |\n| `advanced`| Hybrid search with well-tuned defaults                    | `search_mode = \"advanced\"`                                             |\n| `custom`  | Manually configure hybrid search settings                 | ```python<br>search_mode = \"custom\"<br>search_settings = {<br> \"use_semantic_search\": True,<br> \"use_fulltext_search\": True,<br> \"hybrid_settings\": {<br> \"full_text_weight\": 1.0,<br> \"semantic_weight\": 5.0,<br> \"full_text_limit\": 200,<br> \"rrf_k\": 50<br> }<br> }``` |\n\nFor detailed runtime configuration and combining `search_mode` with custom `search_settings`, refer to the [Search API Documentation](https://r2r-docs.sciphi.ai/api-and-sdks/retrieval/search-app).\n\n### Best Practices\n\n1. **Optimize Database and Embeddings**:\n   - Ensure Postgres indexing and vector store configurations are optimized for performance.\n\n2. **Adjust Weights and Limits**:\n   - Tweak `full_text_weight`, `semantic_weight`, and `rrf_k` values in `custom` mode.\n\n3. **Regular Updates**:\n   - Keep embeddings and indexes up-to-date to maintain search quality.\n\n4. **Choose Appropriate Embeddings**:\n   - Select an embedding model that fits your content domain for the best semantic results.\n\n### Conclusion\n\nR2R’s hybrid search delivers robust, context-aware retrieval by merging semantic and keyword-driven approaches. Whether you choose `basic` mode for simplicity, `advanced` mode for out-of-the-box hybrid search, or `custom` mode for granular control, R2R ensures you can tailor the search experience to your unique needs.\n\n---\n\n## Retrieval-Augmented Generation (RAG)\n\nR2R couples its powerful retrieval capabilities with large language models (LLMs) to provide comprehensive Q&A and content generation based on ingested documents.\n\n### Basic RAG\n\n**Example:**\n\n```bash\ncurl -X POST http://localhost:7272/v3/retrieval/rag \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"query\": \"What was Uber'\\''s profit in 2020?\"\n  }'\n```\n\n**Sample Output:**\n\n```json\n{\n  \"results\": [\n    \"ChatCompletion(...)\"\n  ]\n}\n```\n\n### RAG with Hybrid Search\n\nCombine hybrid search logic with RAG for enhanced results.\n\n**Example:**\n\n```bash\ncurl -X POST http://localhost:7272/v3/retrieval/rag \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"query\": \"Who is Jon Snow?\",\n    \"search_settings\": {\n      \"use_hybrid_search\": true,\n      \"limit\": 10\n    }\n  }'\n```\n\n### Streaming RAG\n\nStream RAG responses in real-time, providing partial results as they are generated.\n\n**Example:**\n\n```bash\nr2r retrieval rag --query=\"who was aristotle\" --use-hybrid-search=True --stream\n```\n\nIt streams real-time tokens.\n\n### Customizing RAG\n\nYou can control various aspects of RAG, including search settings, generation config, and LLM providers.\n\n**Example:**\n\n```bash\ncurl -X POST http://localhost:7272/v3/retrieval/rag \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"query\": \"Who is Jon Snow?\",\n    \"rag_generation_config\": {\n      \"model\": \"claude-3-haiku-20240307\",\n      \"temperature\": 0.7\n    }\n  }'\n```\n\n### Advanced RAG Techniques\n\nR2R supports advanced RAG techniques, currently in beta, including HyDE and RAG-Fusion.\n\n#### HyDE (Hypothetical Document Embeddings)\n\nHyDE enhances retrieval by generating and embedding hypothetical documents based on the query.\n\n**Workflow:**\n\n1. **Query Expansion**: Generates hypothetical answers or documents using an LLM.\n2. **Enhanced Embedding**: Embeds these hypothetical documents to create a richer semantic search space.\n3. **Similarity Search**: Uses the embeddings to find the most relevant actual documents in the database.\n4. **Informed Generation**: Combines retrieved documents and the original query to generate the final response.\n\n**Python Example:**\n\n```python\nfrom r2r import R2RClient\n\nclient = R2RClient()\n\nhyde_response = client.retrieval.rag(\n    \"What are the main themes in Shakespeare's plays?\",\n    search_settings={\n        \"search_strategy\": \"hyde\",\n        \"limit\": 10\n    }\n)\n\nprint('hyde_response = ', hyde_response)\n```\n\n**Sample Output:**\n\n```json\n{\n  \"results\": {\n    \"completion\": \"...\",\n    \"search_results\": {\n      \"chunk_search_results\": [\n        {\n          \"score\": 0.7715058326721191,\n          \"text\": \"## Paragraph from the Chapter...\",\n          \"metadata\": {\n            \"associated_query\": \"The fundamental theorem of calculus...\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n#### RAG-Fusion\n\nRAG-Fusion improves retrieval quality by combining results from multiple search iterations.\n\n**Workflow:**\n\n1. **Query Expansion**: Generates multiple related queries.\n2. **Multiple Retrievals**: Each query retrieves relevant documents.\n3. **Reciprocal Rank Fusion (RRF)**: Re-ranks documents using RRF.\n4. **Enhanced RAG**: Uses re-ranked documents to generate the final response.\n\n**Python Example:**\n\n```python\nfrom r2r import R2RClient\n\nclient = R2RClient()\n\nrag_fusion_response = client.retrieval.rag(\n    \"Explain the theory of relativity\",\n    search_settings={\n        \"search_strategy\": \"rag_fusion\",\n        \"limit\": 20\n    }\n)\n\nprint('rag_fusion_response = ', rag_fusion_response)\n```\n\n**Sample Output:**\n\n```json\n{\n  \"results\": {\n    \"completion\": \"...\",\n    \"search_results\": {\n      \"chunk_search_results\": [\n        {\n          \"score\": 0.04767399003253049,\n          \"text\": \"18. The theory of relativity, proposed by Albert Einstein in 1905...\",\n          \"metadata\": {\n            \"associated_queries\": [\"What is the theory of relativity?\", ...]\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n### Combining with Other Settings\n\nYou can combine advanced RAG techniques with other search and RAG settings for enhanced performance.\n\n**Example:**\n\n```python\ncustom_rag_response = client.retrieval.rag(\n    \"Describe the impact of climate change on biodiversity\",\n    search_settings={\n        \"search_strategy\": \"hyde\",\n        \"limit\": 15,\n        \"use_hybrid_search\": True\n    },\n    rag_generation_config={\n        \"model\": \"anthropic/claude-3-opus-20240229\",\n        \"temperature\": 0.7\n    }\n)\n```\n\n### Customization and Server-Side Defaults\n\nWhile R2R allows runtime configuration of advanced techniques, server-side defaults can also be modified for consistent behavior. This includes updating prompts used for techniques like HyDE and RAG-Fusion.\n\n- **General Configuration**: Refer to the [R2R Configuration Documentation](https://r2r-docs.sciphi.ai/documentation/configuration/overview).\n- **Customizing Prompts**: Learn about customizing prompts [here](https://r2r-docs.sciphi.ai/documentation/configuration/retrieval/prompts).\n\n**Example:**\n\n```toml\n[rag_generation_config]\nmodel = \"anthropic/claude-3-opus-20240229\"\ntemperature = 0.7\n```\n\n### Conclusion\n\nBy leveraging advanced RAG techniques and customizing their underlying prompts, you can significantly enhance the quality and relevance of your retrieval and generation processes. Experiment with different strategies, settings, and prompt variations to find the optimal configuration for your specific use case. R2R's flexibility allows iterative improvement and adaptation to changing requirements.\n\n---\n\n## Knowledge Graphs in R2R\n\nKnowledge graphs enhance search accuracy and context understanding by extracting and connecting information from your documents. R2R uses a two-level architecture:\n\n1. **Document Level**: Entities and relationships are first extracted and stored with their source documents.\n2. **Collection Level**: Collections act as soft containers that include documents and maintain corresponding graphs.\n\n### Overview\n\nR2R supports robust knowledge graph functionality to enhance document understanding and retrieval. By extracting entities and relationships from documents and organizing them into collections, R2R enables advanced graph-based analysis and search capabilities.\n\n**Note**: Refer to the [Knowledge Graph Cookbook](https://r2r-docs.sciphi.ai/cookbooks/knowledge-graphs) and [GraphRAG Cookbook](https://r2r-docs.sciphi.ai/cookbooks/graphrag) for detailed guides.\n\n### System Architecture\n\n```\nCollection (Soft Container)\n    |\nDocuments\n    |--> Extracted Entities & Relationships\nKnowledge Graph\n    |\nPermissions\n    |\nUser\n```\n\n**Collections Provide:**\n\n- Flexible document organization (documents can belong to multiple collections)\n- Access control and sharing\n- Graph synchronization and updates\n\n### Getting Started\n\n#### Document-Level Extraction\n\nExtract entities and relationships from documents.\n\n**Python Example:**\n\n```python\nfrom r2r import R2RClient\n\nclient = R2RClient(\"http://localhost:7272\")\n\n# Extract entities and relationships\ndocument_id = \"your-document-id\"\nextract_response = client.documents.extract(document_id)\n\n# View extracted knowledge\nentities = client.documents.list_entities(document_id)\nrelationships = client.documents.list_relationships(document_id)\n```\n\n#### Creating Collection Graphs\n\nEach collection maintains its own graph.\n\n**Python Example:**\n\n```python\n# Create collection\ncollection = client.collections.create(\n    \"Research Papers\",\n    \"ML research papers with knowledge graph analysis\"\n)\ncollection_id = collection[\"results\"][\"id\"]\n\n# Add documents to collection\nclient.collections.add_document(collection_id, document_id)\n\n# Generate description for the collection\nclient.collections.update(\n    collection_id,\n    generate_description=True\n)\n\n# Pull document knowledge into collection graph\nclient.graphs.pull(collection_id)\n```\n\n#### Managing Collection Graphs\n\n**Python Example:**\n\n```python\n# List entities in collection graph\nentities = client.graphs.list_entities(collection_id)\n\n# List relationships in collection graph\nrelationships = client.graphs.list_relationships(collection_id)\n```\n\n**Example Output:**\n\n- **Entity:**\n  ```json\n  {\n    \"name\": \"DEEP_LEARNING\",\n    \"description\": \"A subset of machine learning using neural networks\",\n    \"category\": \"CONCEPT\",\n    \"id\": \"ce46e955-ed77-4c17-8169-e878baf3fbb9\"\n  }\n  ```\n- **Relationship:**\n  ```json\n  {\n    \"subject\": \"DEEP_LEARNING\",\n    \"predicate\": \"IS_SUBSET_OF\",\n    \"object\": \"MACHINE_LEARNING\",\n    \"description\": \"Deep learning is a specialized branch of machine learning\"\n  }\n  ```\n\n### Graph-Collection Relationship\n\n- Each collection has an associated graph.\n- The `pull` operation syncs the graph with the collection.\n- Allows experimental modifications without affecting the base data.\n\n### Knowledge Graph Workflow\n\n1. **Extract Document Knowledge**:\n   ```bash\n   curl -X POST http://localhost:7272/v3/documents/${document_id}/extract\n   ```\n2. **Initialize and Populate Graph**:\n   ```bash\n   curl -X POST http://localhost:7272/v3/graphs/${collection_id}/pull\n   ```\n3. **View Entities and Relationships**:\n   ```bash\n   curl -X GET http://localhost:7272/v3/graphs/${collection_id}/entities\n   curl -X GET http://localhost:7272/v3/graphs/${collection_id}/relationships\n   ```\n4. **Build Graph Communities**:\n   ```bash\n   curl -X POST http://localhost:7272/v3/graphs/${collection_id}/communities/build\n   curl -X GET http://localhost:7272/v3/graphs/${collection_id}/communities\n   ```\n5. **KG-Enhanced Search**:\n   ```bash\n   curl -X POST http://localhost:7272/v3/retrieval/search \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n      \"query\": \"who was aristotle?\",\n      \"graph_search_settings\": {\n        \"use_graph_search\": true,\n        \"kg_search_type\": \"local\"\n      }\n    }'\n   ```\n6. **Reset Graph**:\n   ```bash\n   curl -X POST http://localhost:7272/v3/graphs/${collection_id}/reset\n   ```\n\n### Graph Synchronization\n\n#### Document Updates\n\nWhen documents change:\n\n```python\n# Update document\nclient.documents.update(document_id, new_content)\n\n# Re-extract knowledge\nclient.documents.extract(document_id)\n\n# Update collection graphs\nclient.graphs.pull(collection_id)\n```\n\n#### Cross-Collection Updates\n\nDocuments can belong to multiple collections:\n\n```python\n# Add document to multiple collections\nclient.collections.add_document(document_id, collection_id_1)\nclient.collections.add_document(document_id, collection_id_2)\n\n# Update all relevant graphs\nclient.graphs.pull(collection_id_1)\nclient.graphs.pull(collection_id_2)\n```\n\n### Access Control\n\nManage access to graphs through collection permissions.\n\n**Python Example:**\n\n```python\n# Give user access to collection and its graph\nclient.collections.add_user(user_id, collection_id)\n\n# Remove access\nclient.collections.remove_user(user_id, collection_id)\n\n# List users with access\nusers = client.collections.list_users(collection_id)\n```\n\n### Using Knowledge Graphs\n\n#### Search Integration\n\nGraphs automatically enhance search for collection members.\n\n**Curl Example:**\n\n```bash\ncurl -X POST http://localhost:7272/v3/retrieval/search \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"query\": \"What is deep learning?\",\n    \"graph_search_settings\": {\n      \"use_graph_search\": true,\n      \"kg_search_type\": \"local\"\n    }\n  }'\n```\n\n#### RAG Integration\n\nKnowledge graphs enhance RAG responses.\n\n**Python Example:**\n\n```python\nresponse = client.retrieval.rag(\n    \"Explain deep learning's relationship to ML\",\n    graph_search_settings={\n        \"enabled\": True\n    }\n)\n```\n\n### Best Practices\n\n#### Document Management\n\n- Extract knowledge after document updates.\n- Monitor extraction quality at the document level.\n- Extractions stay with source documents.\n- Consider document size and complexity when extracting.\n\n#### Collection Management\n\n- Keep collections focused on related documents.\n- Use meaningful collection names and descriptions.\n- Documents can belong to multiple collections.\n- Pull changes when document extractions update.\n\n#### Performance Optimization\n\n- Start with small document sets to test extraction.\n- Use collection-level operations for bulk processing.\n- Monitor graph size and complexity.\n- Consider using [orchestration](https://r2r-docs.sciphi.ai/cookbooks/orchestration) for large collections.\n\n#### Access Control\n\n- Plan collection structure around sharing needs.\n- Review access permissions regularly.\n- Document collection purposes and access patterns.\n- Use collection metadata to track graph usage.\n\n### Troubleshooting\n\n**Common Issues and Solutions:**\n\n1. **Missing Extractions**:\n   - Verify document extraction completed successfully.\n   - Check document format and content.\n   - Ensure collection graph was pulled after extraction.\n\n2. **Graph Sync Issues**:\n   - Confirm all documents are properly extracted.\n   - Check collection membership.\n   - Try resetting and re-pulling collection graph.\n\n3. **Performance Problems**:\n   - Monitor collection size.\n   - Check extraction batch sizes.\n   - Consider splitting large collections.\n   - Use pagination for large result sets.\n\n### Conclusion\n\nR2R’s knowledge graph capabilities enhance document understanding and improve search and RAG operations by providing structured and interconnected information from your documents.\n\n### Next Steps\n\n- Explore [GraphRAG](https://r2r-docs.sciphi.ai/cookbooks/graphrag) for advanced features.\n- Learn about [hybrid search](https://r2r-docs.sciphi.ai/cookbooks/hybrid-search) integration.\n- Discover more about [collections](https://r2r-docs.sciphi.ai/cookbooks/collections).\n- Set up [orchestration](https://r2r-docs.sciphi.ai/cookbooks/orchestration) for large-scale processing.\n\n---\n\n## GraphRAG in R2R\n\nGraphRAG extends traditional RAG by leveraging community detection and summarization within knowledge graphs. This approach provides richer context and more comprehensive answers by understanding how information is clustered and connected across your documents.\n\n### Overview\n\nGraphRAG enhances RAG by integrating community detection and summarization within knowledge graphs, enabling more contextual and clustered information retrieval.\n\n#### Architecture\n\n```\nUser Query\n    |\nQueryTransformPipe\n    |\nMultiSearchPipe\n    |\nVectorSearchPipe\n    |\nRAG-Fusion Process\n    |\nReciprocal Rank Fusion\n    |\nRAG Generation\n    |\nKnowledge Graph DB\n```\n\n### Understanding Communities\n\n**Communities** are automatically detected clusters of related information in your knowledge graph, providing:\n\n1. **Higher-Level Understanding**: Grasp document themes.\n2. **Summarized Context**: Concise summaries for related concepts.\n3. **Improved Retrieval**: Topic-based organization enhances search relevance.\n\n**Example Communities:**\n\n| Domain           | Community Examples                                     |\n|------------------|--------------------------------------------------------|\n| Scientific Papers| Research methods, theories, research teams             |\n| News Articles    | World events, industry sectors, key figures           |\n| Technical Docs   | System components, APIs, user workflows                |\n| Legal Documents  | Case types, jurisdictions, legal principles            |\n\n### Implementation Guide\n\n#### Prerequisites\n\nEnsure you have:\n\n- Documents ingested into a collection.\n- Entities and relationships extracted.\n- Graph synchronized.\n\n**Python Example:**\n\n```python\nfrom r2r import R2RClient\n\nclient = R2RClient(\"http://localhost:7272\")\n\n# Setup collection and extract knowledge\ncollection_id = \"your-collection-id\"\nclient.collections.extract(collection_id)\nclient.graphs.pull(collection_id)\n```\n\n#### Building Communities\n\n**Python Example:**\n\n```python\n# Generate a description for the collection\nclient.collections.update(\n    collection_id,\n    generate_description=True\n)\n\n# Build communities for your collection's graph\nbuild_response = client.graphs.build(collection_id)\n```\n\n**Build Process Includes:**\n\n1. Analyzes graph connectivity.\n2. Identifies dense subgraphs.\n3. Generates community summaries.\n4. Creates findings and insights.\n\n#### Using GraphRAG\n\nOnce communities are built, they integrate into search and RAG.\n\n**Python Example:**\n\n```python\n# Search across all levels\nsearch_response = client.retrieval.search(\n    \"What are the key theories?\",\n    search_settings={\n        \"graph_settings\": {\n            \"enabled\": True,\n        }\n    }\n)\n\n# RAG with community context\nrag_response = client.retrieval.rag(\n    \"Explain the relationships between theories\",\n    graph_search_settings={\n        \"enabled\": True\n    }\n)\n```\n\n### Understanding Results\n\nGraphRAG returns three types of results:\n\n#### 1. Document Chunks\n\n```json\n{\n  \"chunk_id\": \"70c96e8f-e5d3-5912-b79b-13c5793f17b5\",\n  \"text\": \"Example document text...\",\n  \"score\": 0.78,\n  \"metadata\": {\n    \"document_type\": \"txt\",\n    \"associated_query\": \"query text\"\n  }\n}\n```\n\n#### 2. Graph Elements\n\n```json\n{\n  \"content\": {\n    \"name\": \"CONCEPT_NAME\",\n    \"description\": \"Entity description...\"\n  },\n  \"result_type\": \"entity\",\n  \"score\": 0.74\n}\n```\n\n#### 3. Communities\n\n```json\n{\n  \"content\": {\n    \"name\": \"Community Name\",\n    \"summary\": \"High-level community description...\",\n    \"findings\": [\n      \"Key insight 1 with supporting evidence...\",\n      \"Key insight 2 with supporting evidence...\"\n    ],\n    \"rating\": 9.0,\n    \"rating_explanation\": \"Explanation of importance...\"\n  },\n  \"result_type\": \"community\",\n  \"score\": 0.57\n}\n```\n\n### Scaling GraphRAG\n\n#### Using Orchestration\n\nFor large collections, utilize R2R’s orchestration capabilities via Hatchet UI.\n\n**Access Hatchet UI:**\n\n- **URL**: [http://localhost:7274](http://localhost:7274)\n- **Login Credentials**:\n  - **Email**: admin@example.com\n  - **Password**: Admin123!!\n\n**Features:**\n\n- Monitor document extraction progress.\n- Track community detection status.\n- Handle errors and workflow retries.\n\n**Example Diagram:**\n\n![Monitoring GraphRAG workflows in Hatchet](https://files.buildwithfern.com/https://sciphi.docs.buildwithfern.com/2024-12-13T18:29:49.890Z/images/hatchet_workflow.png)\n\n### Best Practices\n\n1. **Development**:\n   - Start with small document sets.\n   - Test with single documents first.\n   - Scale gradually to larger collections.\n\n2. **Performance**:\n   - Monitor community size and complexity.\n   - Use pagination for large result sets.\n   - Consider breaking very large collections.\n\n3. **Quality**:\n   - Review community summaries.\n   - Validate findings accuracy.\n   - Monitor retrieval relevance.\n\n### Troubleshooting\n\n**Common Issues and Solutions:**\n\n1. **Poor Community Quality**:\n   - Check entity extraction quality.\n   - Review relationship connections.\n   - Adjust collection scope.\n\n2. **Performance Issues**:\n   - Monitor graph size.\n   - Check community complexity.\n   - Use orchestration for large graphs.\n\n3. **Integration Problems**:\n   - Verify extraction completion.\n   - Check collection synchronization.\n   - Review API configurations.\n\n### Next Steps\n\n- Explore [hybrid search](https://r2r-docs.sciphi.ai/cookbooks/hybrid-search) integration.\n- Learn about [collection management](https://r2r-docs.sciphi.ai/cookbooks/collections).\n- Discover more about [observability](https://r2r-docs.sciphi.ai/cookbooks/observability).\n\n### Conclusion\n\nGraphRAG enhances R2R’s RAG capabilities by integrating community detection and summarization within knowledge graphs. This results in richer, more contextualized responses, improving the overall quality of information retrieval and generation.\n\n---\n\n## Agent\n\nR2R’s agentic capabilities allow for intelligent systems that formulate their own questions, search for information, and provide informed responses based on retrieved context. Agents can be customized on the fly to suit various tasks.\n\n**Note**: Agents in R2R are in beta. Feedback is encouraged at [founders@sciphi.ai](mailto:founders@sciphi.ai).\n\n### Understanding R2R’s RAG Agent\n\nR2R’s RAG agent combines large language models with search capabilities over ingested documents to provide powerful, context-aware responses. When initializing an R2R application, it automatically creates a RAG assistant ready for use.\n\n**Planned Extensions:**\n\n- Multiple tool support (e.g., code interpreter, file search)\n- Persistent conversation threads\n- Complete end-to-end observability of agent interactions\n- Local RAG capabilities for offline AI agents\n\n### Configuration\n\nThe RAG agent is configured through the `r2r.toml` file. By default, it uses local search.\n\n**Default Configuration:**\n\n```toml\n[agent]\nsystem_instruction_name = \"rag_agent\"\ntool_names = [\"local_search\"]\n```\n\n**Enable Web Search:**\n\n```toml\n[agent]\nsystem_instruction_name = \"rag_agent\"\ntool_names = [\"local_search\", \"web_search\"]\n```\n\n### Using the RAG Agent\n\nAccess the agent through the R2R API via the `agent` endpoint.\n\n**Python Example:**\n\n```python\nfrom r2r import R2RClient\n\n# Initialize the client\nclient = R2RClient(\"http://localhost:7272\")\n\n# Make a simple query\nfirst_reply = client.retrieval.agent(\n    message={\"role\": \"user\", \"content\": \"Who was Aristotle?\"},\n    search_settings={\"limit\": 5, \"filters\": {}},\n)\n\n# Save the conversation ID for continued interaction\nconversation_id = first_reply[\"results\"][\"conversation_id\"]\n\n# Make a follow-up query using the conversation context\nsecond_reply = client.retrieval.agent(\n    message={\"role\": \"user\", \"content\": \"What were his contributions to philosophy?\"},\n    search_settings={\"limit\": 5, \"filters\": {}},\n    conversation_id=conversation_id,\n)\n```\n\n**Streaming Responses:**\n\n```python\nstreaming_response = client.agent(\n    message={\"role\": \"user\", \"content\": \"Who was Aristotle?\"},\n    search_settings={\"limit\": 5, \"filters\": {}},\n    rag_generation_config={\"max_tokens\": 300, \"stream\": True},\n    conversation_id=conversation_id,\n)\n\nprint(\"Streaming RAG Assistant Response:\")\nfor chunk in streaming_response:\n    print(chunk, end=\"\", flush=True)\n```\n\n### Context-Aware Responses\n\nThe agent maintains conversation context, enabling it to handle follow-up questions intelligently based on conversation history.\n\n### Working with Files\n\nThe Conversation API allows the agent to be aware of specific files within a conversation.\n\n**Python Example:**\n\n```python\n# Create a new conversation\nconversation = client.conversations.create(\"results\")\n\n# Inform the agent about available files\nclient.conversations.add_message(\n    conversation_id=conversation[\"id\"],\n    role=\"system\",\n    content=\"You have access to the following file: {document_info['title']}\"\n)\n\n# Query with file context\nresponse = client.retrieval.agent(\n    message={\n        \"role\": \"user\",\n        \"content\": \"Summarize the main points of the document\"\n    },\n    search_settings={\"limit\": 5, \"filters\": {}},\n    conversation_id=conversation[\"id\"]\n)\n```\n\n### Advanced Features\n\n#### Combined Search Capabilities\n\nWhen both local and web search are enabled, the agent can:\n\n- Search through your local document store.\n- Perform web searches for additional context.\n- Maintain conversation context.\n- Synthesize information from multiple sources.\n\n**Example:**\n\n```python\nresponse = client.retrieval.agent(\n    message={\n        \"role\": \"user\",\n        \"content\": \"Compare historical and modern interpretations\"\n    },\n    search_settings={\n        \"limit\": 5,\n        \"filters\": {},\n        \"use_web_search\": True  # requires `Serper` API key\n    },\n    conversation_id=conversation_id\n)\n```\n\n#### Custom Search Settings\n\nCustomize search behavior using the `search_settings` parameter.\n\n**Example:**\n\n```python\nresponse = client.retrieval.agent(\n    message={\"role\": \"user\", \"content\": \"Query\"},\n    search_settings={\n        \"limit\": 5,  # Number of results to return\n        \"filters\": {\n            \"date\": \"2023\",  # Example filter\n            \"category\": \"technology\"\n        }\n    }\n)\n```\n\n### Best Practices\n\n1. **Conversation Management**:\n   - Maintain conversation IDs for related queries.\n   - Use the system role to provide context about available files.\n   - Clear conversation context when starting new topics.\n\n2. **Search Optimization**:\n   - Adjust the `limit` parameter based on needed context.\n   - Use filters to narrow search scope.\n   - Consider enabling web search for broader context.\n\n3. **Response Handling**:\n   - Use streaming for long responses.\n   - Process response chunks appropriately in streaming mode.\n   - Check for error messages in responses.\n\n### Error Handling\n\nThe agent may return error messages in the response. Always check for errors.\n\n**Python Example:**\n\n```python\nfrom r2r import R2RException\n\ntry:\n    await client.retrieval.agent(...)\nexcept R2RException as e:\n    if e.status_code == 401:\n        print(\"Invalid credentials\")\n    elif e.status_code == 400:\n        print(\"Email not verified\")\n```\n\n### Limitations\n\n- **Beta Feature**: The agent is currently in beta.\n- **Web Search Requirements**: Requires additional configuration.\n- **Streaming Response Structure**: May differ from non-streaming responses.\n- **Offline Mode Limitations**: Some features may not be available offline.\n\n### Future Developments\n\nR2R plans to enhance the agent system with:\n\n- Enhanced tool integration.\n- Improved conversation management.\n- Better search capabilities.\n- More customization options.\n\nStay updated with the latest developments by checking the R2R documentation regularly.\n\n### Conclusion\n\nR2R’s agent system provides powerful, context-aware interactions by combining LLMs with advanced search capabilities. By leveraging these features, you can create intelligent assistants that offer comprehensive and accurate responses based on your document corpus.\n\n---\n\n## Orchestration\n\nOrchestration in R2R is managed using [Hatchet](https://docs.hatchet.run/home), a distributed, fault-tolerant task queue that handles complex workflows such as ingestion and knowledge graph construction.\n\n### Key Concepts\n\n| Concept          | Description                                                                 |\n|------------------|-----------------------------------------------------------------------------|\n| **Workflows**    | Sets of functions executed in response to external triggers.               |\n| **Workers**      | Long-running processes that execute workflow functions.                    |\n| **Managed Queue**| Low-latency queue for handling real-time tasks.                            |\n\n### Orchestration in R2R\n\n#### Benefits of Orchestration\n\n1. **Scalability**: Efficiently handles large-scale tasks.\n2. **Fault Tolerance**: Built-in retry mechanisms and error handling.\n3. **Flexibility**: Easy to add or modify workflows as R2R’s capabilities expand.\n\n#### Workflows in R2R\n\n1. **IngestFilesWorkflow**: Handles file ingestion, parsing, chunking, and embedding.\n2. **UpdateFilesWorkflow**: Manages updating existing files.\n3. **KgExtractAndStoreWorkflow**: Extracts and stores knowledge graph information.\n4. **CreateGraphWorkflow**: Orchestrates knowledge graph creation.\n5. **EnrichGraphWorkflow**: Handles graph enrichment processes like node creation and clustering.\n\n### Orchestration GUI\n\nAccess the Hatchet front-end application at [http://localhost:7274](http://localhost:7274).\n\n#### Login\n\nUse the following credentials to log in:\n\n- **Email**: admin@example.com\n- **Password**: Admin123!!\n\n![Logging into Hatchet](https://files.buildwithfern.com/https://sciphi.docs.buildwithfern.com/2024-12-13T18:29:49.890Z/images/hatchet_login.png)\n\n#### Running Tasks\n\nAfter initiating tasks like `r2r documents create-samples`, view running workflows:\n\n![Running Workflows](https://files.buildwithfern.com/https://sciphi.docs.buildwithfern.com/2024-12-13T18:29:49.890Z/images/hatchet_running.png)\n\n#### Inspecting a Workflow\n\nInspect and manage individual workflows, including retrying failed jobs:\n\n![Inspecting a Workflow](https://files.buildwithfern.com/https://sciphi.docs.buildwithfern.com/2024-12-13T18:29:49.890Z/images/hatchet_workflow.png)\n\n#### Long Running Tasks\n\nHatchet supports long-running tasks, essential for processes like graph construction.\n\n![Long Running Tasks](https://files.buildwithfern.com/https://sciphi.docs.buildwithfern.com/2024-12-13T18:29:49.890Z/images/hatchet_long_running.png)\n\n### Coming Soon\n\nDetails about upcoming orchestration features will be available soon.\n\n### Best Practices\n\n1. **Development**:\n   - Start with small document sets.\n   - Test with single documents first.\n   - Scale gradually to larger collections.\n\n2. **Performance**:\n   - Monitor community size and complexity.\n   - Use pagination for large result sets.\n   - Consider breaking very large collections.\n\n3. **Quality**:\n   - Review community summaries.\n   - Validate findings accuracy.\n   - Monitor retrieval relevance.\n\n### Troubleshooting\n\n**Common Issues and Solutions:**\n\n1. **Unable to Create/Modify Collections**:\n   - Ensure the user has superuser privileges.\n\n2. **User Not Seeing Collection Content**:\n   - Verify that the user is correctly added to the collection.\n   - Ensure documents are properly assigned.\n\n3. **Performance Issues with Large Collections**:\n   - Use pagination when retrieving users or documents.\n   - Consider splitting large collections.\n\n### Conclusion\n\nOrchestration via Hatchet enables R2R to handle complex and large-scale workflows efficiently. By leveraging workflows and monitoring tools, you can ensure smooth and scalable operations within your R2R deployment.\n\n---\n\n## Maintenance & Scaling\n\nEffective maintenance and scaling are crucial for ensuring R2R operates optimally, especially as data volumes grow.\n\n### Vector Indices\n\n#### Do You Need Vector Indices?\n\nVector indices are **not necessary for all deployments**, particularly in multi-user applications where queries are typically filtered by `user_id`, reducing the number of vectors searched.\n\n**Consider implementing vector indices when:**\n\n- Users search across hundreds of thousands of documents.\n- Query latency becomes a bottleneck even with user-specific filtering.\n- Supporting cross-user search functionality at scale.\n\nFor development or smaller deployments, the overhead of maintaining vector indices often outweighs their benefits.\n\n#### Vector Index Management\n\nR2R supports multiple indexing methods, with HNSW (Hierarchical Navigable Small World) being recommended for most use cases.\n\n**Python Example: Creating and Deleting a Vector Index**\n\n```python\nfrom r2r import R2RClient\n\nclient = R2RClient()\n\n# Create vector index\ncreate_response = client.indices.create(\n    {\n        \"table_name\": \"vectors\",\n        \"index_method\": \"hnsw\",\n        \"index_measure\": \"cosine_distance\",\n        \"index_arguments\": {\n            \"m\": 16,  # Number of connections per element\n            \"ef_construction\": 64  # Size of dynamic candidate list\n        },\n    }\n)\n\n# List existing indices\nindices = client.indices.list()\n\n# Delete an index\ndelete_response = client.indices.delete(\n    index_name=\"ix_vector_cosine_ops_hnsw__20241021211541\",\n    table_name=\"vectors\",\n)\n\nprint('delete_response = ', delete_response)\n```\n\n#### Important Considerations\n\n1. **Pre-warming Requirement**:\n   - New indices start “cold” and require warming for optimal performance.\n   - Initial queries will be slower until the index is loaded into memory.\n   - Implement explicit pre-warming in production.\n   - Warming must be repeated after system restarts.\n\n2. **Resource Usage**:\n   - Index creation is CPU and memory intensive.\n   - Memory usage scales with dataset size and the `m` parameter.\n   - Create indices during off-peak hours.\n\n3. **Performance Tuning**:\n   - **HNSW Parameters**:\n     - `m`: 16-64 (higher = better quality, more memory)\n     - `ef_construction`: 64-100 (higher = better quality, longer build time)\n   - **Distance Measures**:\n     - `cosine_distance`: Best for normalized vectors (most common)\n     - `l2_distance`: Better for absolute distances\n     - `max_inner_product`: Optimized for dot product similarity\n\n### System Updates and Maintenance\n\n#### Version Management\n\n**Check Current R2R Version:**\n\n```bash\nr2r version\n```\n\n#### Update Process\n\n1. **Prepare for Update**\n\n```bash\n# Check current versions\nr2r version\nr2r db current\n\n# Generate system report (optional)\nr2r generate-report\n```\n\n2. **Stop Running Services**\n\n```bash\nr2r docker-down\n```\n\n3. **Update R2R**\n\n```bash\nr2r update\n```\n\n4. **Update Database**\n\n```bash\nr2r db upgrade\n```\n\n5. **Restart Services**\n\n```bash\nr2r serve --docker [additional options]\n```\n\n#### Database Migration Management\n\nR2R uses database migrations to manage schema changes.\n\n**Check Current Migration:**\n\n```bash\nr2r db current\n```\n\n**Apply Migrations:**\n\n```bash\nr2r db upgrade\n```\n\n### Managing Multiple Environments\n\nUse different project names and schemas for different environments.\n\n**Example:**\n\n```bash\n# Development\nexport R2R_PROJECT_NAME=r2r_dev\nr2r serve --docker --project-name r2r-dev\n\n# Staging\nexport R2R_PROJECT_NAME=r2r_staging\nr2r serve --docker --project-name r2r-staging\n\n# Production\nexport R2R_PROJECT_NAME=r2r_prod\nr2r serve --docker --project-name r2r-prod\n```\n\n### Troubleshooting\n\nIf issues occur:\n\n1. **Generate a System Report**\n\n```bash\nr2r generate-report\n```\n\n2. **Check Container Health**\n\n```bash\nr2r docker-down\nr2r serve --docker\n```\n\n3. **Review Database State**\n\n```bash\nr2r db current\nr2r db history\n```\n\n4. **Roll Back if Needed**\n\n```bash\nr2r db downgrade --revision <previous-working-version>\n```\n\n### Scaling Strategies\n\n#### Horizontal Scaling\n\nFor applications serving many users:\n\n1. **Load Balancing**\n   - Deploy multiple R2R instances behind a load balancer.\n   - Each instance handles a subset of users.\n\n2. **Sharding**\n   - Shard by `user_id` for large multi-user deployments.\n   - Each shard handles a subset of users, maintaining performance with millions of documents.\n\n#### Vertical Scaling\n\nFor applications requiring large single-user searches:\n\n1. **Cloud Provider Solutions**\n   - **AWS RDS**: Supports up to 1 billion vectors per instance.\n   - **Example Instance Types**:\n     - `db.r6g.16xlarge`: Suitable for up to 100M vectors.\n     - `db.r6g.metal`: Can handle 1B+ vectors.\n\n2. **Memory Optimization**\n\n```python\n# Optimize for large vector collections\nclient.indices.create(\n    table_name=\"vectors\",\n    index_method=\"hnsw\",\n    index_arguments={\n        \"m\": 32,  # Increased for better performance\n        \"ef_construction\": 80  # Balanced for large collections\n    }\n)\n```\n\n#### Multi-User Considerations\n\n1. **Filtering Optimization**\n\n```python\n# Efficient per-user search\nresponse = client.retrieval.search(\n    \"query\",\n    search_settings={\n        \"filters\": {\n            \"user_id\": {\"$eq\": \"current_user_id\"}\n        }\n    }\n)\n```\n\n2. **Collection Management**\n   - Group related documents into collections.\n   - Enable efficient access control.\n   - Optimize search scope.\n\n3. **Resource Allocation**\n   - Monitor per-user resource usage.\n   - Implement usage quotas if needed.\n   - Consider dedicated instances for power users.\n\n#### Performance Monitoring\n\nMonitor the following metrics to inform scaling decisions:\n\n1. **Query Performance**\n   - Average query latency per user.\n   - Number of vectors searched per query.\n   - Cache hit rates.\n\n2. **System Resources**\n   - Memory usage per instance.\n   - CPU utilization.\n   - Storage growth rate.\n\n3. **User Patterns**\n   - Number of active users.\n   - Query patterns and peak usage times.\n   - Document count per user.\n\n### Performance Considerations\n\nWhen configuring embeddings in R2R, consider these optimization strategies:\n\n1. **Batch Size Optimization**:\n   - Larger batch sizes improve throughput but increase latency.\n   - Consider provider-specific rate limits when setting batch size.\n   - Balance memory usage with processing speed.\n\n2. **Concurrent Requests**:\n   - Adjust `concurrent_request_limit` based on provider capabilities.\n   - Monitor API usage and adjust limits accordingly.\n   - Implement local caching for frequently embedded texts.\n\n3. **Model Selection**:\n   - Balance embedding dimension size with accuracy requirements.\n   - Consider cost per token for different providers.\n   - Evaluate multilingual requirements when choosing models.\n\n4. **Resource Management**:\n   - Monitor memory usage with large batch sizes.\n   - Implement appropriate error handling and retry strategies.\n   - Consider implementing local model fallbacks for critical systems.\n\n### Additional Resources\n\n- [Python SDK Ingestion Documentation](https://r2r-docs.sciphi.ai/documentation/python-sdk/ingestion)\n- [CLI Maintenance Documentation](https://r2r-docs.sciphi.ai/documentation/cli/maintenance)\n- [Ingestion Configuration Documentation](https://r2r-docs.sciphi.ai/documentation/configuration/ingestion)\n\n### Best Practices\n\n1. **Optimize Indexing**: Ensure proper indexing for both full-text and vector searches.\n2. **Monitor Resources**: Keep track of CPU, memory, and storage usage.\n3. **Regular Maintenance**: Perform regular vacuuming and updates to maintain database performance.\n4. **Plan Scaling Ahead**: Anticipate growth and implement scaling strategies proactively.\n\n### Conclusion\n\nEffective maintenance and scaling strategies ensure that R2R remains performant and reliable as your data and user base grow. By optimizing vector indices, managing system updates, and employing robust scaling strategies, you can maintain an efficient and scalable R2R deployment.\n\n---\n\n## Web Development\n\nWeb developers can easily integrate R2R into their projects using the [R2R JavaScript client](https://github.com/SciPhi-AI/r2r-js). For extensive references and examples, explore the [R2R Application](https://r2r-docs.sciphi.ai/cookbooks/application) and its source code.\n\n### Hello R2R—JavaScript\n\nR2R offers configurable vector search and RAG capabilities with direct method calls.\n\n#### Example: `r2r-js/examples/hello_r2r.js`\n\n```javascript\nconst { r2rClient } = require(\"r2r-js\");\n\nconst client = new r2rClient(\"http://localhost:7272\");\n\nasync function main() {\n    const files = [\n        { path: \"examples/data/raskolnikov.txt\", name: \"raskolnikov.txt\" },\n    ];\n\n    const EMAIL = \"admin@example.com\";\n    const PASSWORD = \"change_me_immediately\";\n\n    console.log(\"Logging in...\");\n    await client.users.login(EMAIL, PASSWORD);\n\n    console.log(\"Ingesting file...\");\n    const documentResult = await client.documents.create({\n        file: { path: \"examples/data/raskolnikov.txt\", name: \"raskolnikov.txt\" },\n        metadata: { title: \"raskolnikov.txt\" },\n    });\n\n    console.log(\"Document result:\", JSON.stringify(documentResult, null, 2));\n\n    console.log(\"Performing RAG...\");\n    const ragResponse = await client.rag({\n        query: \"What does the file talk about?\",\n        rag_generation_config: {\n            model: \"openai/gpt-4o\",\n            temperature: 0.0,\n            stream: false,\n        },\n    });\n\n    console.log(\"Search Results:\");\n    ragResponse.results.search_results.chunk_search_results.forEach(\n        (result, index) => {\n            console.log(`\\nResult ${index + 1}:`);\n            console.log(`Text: ${result.metadata.text.substring(0, 100)}...`);\n            console.log(`Score: ${result.score}`);\n        },\n    );\n\n    console.log(\"\\nCompletion:\");\n    console.log(ragResponse.results.completion.choices[0].message.content);\n}\n\nmain();\n```\n\n### r2r-js Client\n\n#### Installing\n\nInstall the R2R JavaScript client using [npm](https://www.npmjs.com/package/r2r-js):\n\n```bash\nnpm install r2r-js\n```\n\n#### Creating the Client\n\nFirst, create the R2R client and specify the base URL where the R2R server is running.\n\n```javascript\nconst { r2rClient } = require(\"r2r-js\");\n\n// http://localhost:7272 or your R2R server address\nconst client = new r2rClient(\"http://localhost:7272\");\n```\n\n#### Log into the Server\n\nAuthenticate the session using default superuser credentials.\n\n```javascript\nconst EMAIL = \"admin@example.com\";\nconst PASSWORD = \"change_me_immediately\";\n\nconsole.log(\"Logging in...\");\nawait client.users.login(EMAIL, PASSWORD);\n```\n\n#### Ingesting Files\n\nSpecify and ingest files.\n\n```javascript\nconst file = { path: \"examples/data/raskolnikov.txt\", name: \"raskolnikov.txt\" };\n\nconsole.log(\"Ingesting file...\");\nconst ingestResult = await client.documents.create({\n    file: { path: \"examples/data/raskolnikov.txt\", name: \"raskolnikov.txt\" },\n    metadata: { title: \"raskolnikov.txt\" },\n});\n\nconsole.log(\"Ingest result:\", JSON.stringify(ingestResult, null, 2));\n```\n\n**Sample Output:**\n\n```json\n{\n  \"results\": {\n    \"processed_documents\": [\n      \"Document 'raskolnikov.txt' processed successfully.\"\n    ],\n    \"failed_documents\": [],\n    \"skipped_documents\": []\n  }\n}\n```\n\n#### Performing RAG\n\nMake a RAG request.\n\n```javascript\nconsole.log(\"Performing RAG...\");\nconst ragResponse = await client.rag({\n    query: \"What does the file talk about?\",\n    rag_generation_config: {\n        model: \"openai/gpt-4o\",\n        temperature: 0.0,\n        stream: false,\n    },\n});\n\nconsole.log(\"Search Results:\");\nragResponse.results.search_results.chunk_search_results.forEach(\n    (result, index) => {\n        console.log(`\\nResult ${index + 1}:`);\n        console.log(`Text: ${result.metadata.text.substring(0, 100)}...`);\n        console.log(`Score: ${result.score}`);\n    },\n);\n\nconsole.log(\"\\nCompletion:\");\nconsole.log(ragResponse.results.completion.choices[0].message.content);\n```\n\n**Sample Output:**\n\n```\nPerforming RAG...\n\nSearch Results:\n\nResult 1:\nText: praeterire culinam eius, cuius ianua semper aperta erat, cogebatur. Et quoties praeteribat,...\n\nScore: 0.08281802143835804\n\nResult 2:\nText: In vespera praecipue calida ineunte Iulio iuvenis e cenaculo in quo hospitabatur in S. loco exiit et...\n\nScore: 0.052743945852283036\n\n...\n\nCompletion:\nThe file discusses the experiences and emotions of a young man who is staying in a small room in a tall house.\nHe is burdened by debt and feels anxious and ashamed whenever he passes by the kitchen of his landlady, whose\ndoor is always open [1]. On a particularly warm evening in early July, he leaves his room and walks slowly towards\na bridge, trying to avoid encountering his landlady on the stairs. His room, which is more like a closet than a\nproper room, is located under the roof of the five-story house, while the landlady lives on the floor below and\nprovides him with meals and services [2].\n```\n\n### Connecting to a Web App\n\nIntegrate R2R into web applications by creating API routes and React components.\n\n#### Setting up an API Route\n\nCreate `r2r-query.ts` in the `pages/api` directory to handle R2R queries.\n\n#### Frontend: React Component\n\nCreate a React component, e.g., `index.tsx`, to interact with the API route, providing an interface for user queries and displaying results.\n\n#### Template Repository\n\nFor a complete working example, check out the [R2R Web Dev Template Repository](https://github.com/SciPhi-AI/r2r-webdev-template).\n\n**Usage:**\n\n1. **Clone the Repository:**\n\n```bash\ngit clone https://github.com/SciPhi-AI/r2r-webdev-template.git\ncd r2r-webdev-template\n```\n\n2. **Install Dependencies:**\n\n```bash\npnpm install\n```\n\n3. **Run the Development Server:**\n\nEnsure your R2R server is running, then start the frontend:\n\n```bash\npnpm dev\n```\n\nAccess the dashboard at [http://localhost:3000](http://localhost:3000).\n\n### Best Practices\n\n1. **Secure API Routes**: Ensure API routes are protected and validate user input.\n2. **Optimize Frontend Performance**: Lazy load components and manage state efficiently.\n3. **Handle Errors Gracefully**: Provide user-friendly error messages and fallback options.\n4. **Implement Caching**: Cache frequent queries to reduce load and improve response times.\n5. **Maintain Consistent State**: Synchronize frontend state with backend data to prevent discrepancies.\n\n### Conclusion\n\nThe R2R JavaScript client simplifies integration into web applications, enabling developers to build powerful RAG features with minimal setup. Utilize the template repository for a quick start and explore more advanced examples in the [R2R Dashboard](https://github.com/SciPhi-AI/R2R-Application).\n\n---\n\n## User Management\n\nR2R provides robust user authentication and management capabilities, ensuring secure and efficient access control over documents and features.\n\n### Introduction\n\nR2R's authentication system supports secure user registration, login, session management, and access control. This guide covers basic usage, advanced features, security considerations, and troubleshooting.\n\nFor detailed configuration, refer to the [Authentication Configuration Documentation](https://r2r-docs.sciphi.ai/documentation/configuration/auth) and the [User API Reference](https://r2r-docs.sciphi.ai/api-and-sdks/users/users).\n\n**Default Behavior**: When `require_authentication` is set to `false` (default in `r2r.toml`), unauthenticated requests use default admin credentials. Use caution in production environments.\n\n### Basic Usage\n\n#### User Registration and Login\n\n**Python Example:**\n\n```python\nfrom r2r import R2RClient\n\nclient = R2RClient(\"http://localhost:7272\")  # Replace with your R2R deployment URL\n\n# Register a new user\nuser_result = client.users.create(\"user1@test.com\", \"password123\")\nprint(user_result)\n# {'results': {'email': 'user1@test.com', 'id': 'bf417057-f104-4e75-8579-c74d26fcbed3', ...}}\n\n# Login immediately (assuming email verification is disabled)\nlogin_result = client.users.login(\"user1@test.com\", \"password123\")\nprint(login_result)\n# {'results': {'access_token': {...}, 'refresh_token': {...}}}\n```\n\n#### Email Verification (Optional)\n\nIf email verification is enabled:\n\n```python\n# Verify email\nverify_result = client.users.verify_email(\"verification_code_here\")\nprint(verify_result)\n# {\"results\": {\"message\": \"Email verified successfully\"}}\n```\n\n#### Token Refresh\n\nRefresh an expired access token:\n\n```python\nrefresh_result = client.users.refresh_access_token(\"YOUR_REFRESH_TOKEN\")\nprint(refresh_result)\n# {'access_token': {...}, 'refresh_token': {...}}\n```\n\n#### User-Specific Search\n\nAuthenticated searches are filtered based on the user's permissions.\n\n**Curl Example:**\n\n```bash\ncurl -X POST http://localhost:7272/v3/retrieval/search \\\n  -H \"Authorization: Bearer YOUR_ACCESS_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"query\": \"Who was Aristotle\"\n  }'\n```\n\n**Sample Output:**\n\n```json\n{\n  \"results\": {\n    \"chunk_search_results\": [],\n    \"kg_search_results\": []\n  }\n}\n```\n\n> *Search results are empty for a new user.*\n\n#### User Logout\n\nInvalidate the current access token.\n\n**Curl Example:**\n\n```bash\ncurl -X POST http://localhost:7272/v3/users/logout \\\n  -H \"Authorization: Bearer YOUR_ACCESS_TOKEN\"\n```\n\n**Sample Output:**\n\n```json\n{\n  \"results\": {\"message\": \"Logged out successfully\"}\n}\n```\n\n### Advanced Authentication Features\n\n#### Password Management\n\nUsers can change their passwords and request password resets.\n\n**Python Example:**\n\n```python\n# Change password\nchange_password_result = client.users.change_password(\"password123\", \"new_password\")\nprint(change_password_result)\n# {\"results\": {\"message\": \"Password changed successfully\"}}\n\n# Request password reset\nreset_request_result = client.users.request_password_reset(\"user@example.com\")\nprint(reset_request_result)\n# {\"results\": {\"message\": \"If the email exists, a reset link has been sent\"}}\n\n# Confirm password reset\nreset_confirm_result = client.users.confirm_password_reset(\"reset_token_here\", \"new_password\")\nprint(reset_confirm_result)\n# {\"results\": {\"message\": \"Password reset successfully\"}}\n```\n\n#### User Profile Management\n\nUsers can view and update their profiles.\n\n**Python Example:**\n\n```python\n# Update user profile (requires login)\nupdate_result = client.users.update_user(name=\"John Doe\", bio=\"R2R enthusiast\")\nprint(update_result)\n# {'results': {'email': 'user1@test.com', 'id': '76eea168-9f98-4672-af3b-2c26ec92d7f8', ...}}\n```\n\n#### Account Deletion\n\nUsers can delete their accounts.\n\n**Python Example:**\n\n```python\n# Delete account (requires password confirmation)\nuser_id = register_response[\"results\"][\"id\"]  # Use the actual user ID\ndelete_result = client.delete_user(user_id, \"password123\")\nprint(delete_result)\n# {'results': {'message': 'User account deleted successfully'}}\n```\n\n#### Logout\n\nTo end a user session:\n\n```python\n# Logout\nlogout_result = client.users.logout()\nprint(f\"Logout Result:\\n{logout_result}\")\n# {'results': {'message': 'Logged out successfully'}}\n```\n\n### Superuser Capabilities and Default Admin Creation\n\n#### Superuser Capabilities\n\nSuperusers have elevated privileges, enabling them to:\n\n1. **User Management**: View, modify, and delete user accounts.\n2. **System-wide Document Access**: Access and manage all documents.\n3. **Analytics and Observability**: Access system-wide analytics and logs.\n4. **Configuration Management**: Modify system configurations and settings.\n\n#### Default Admin Creation\n\nR2R automatically creates a default admin user during initialization via the `R2RAuthProvider` class.\n\n**Configuration:**\n\n```toml\n[auth]\nprovider = \"r2r\"\naccess_token_lifetime_in_minutes = 60\nrefresh_token_lifetime_in_days = 7\nrequire_authentication = true\nrequire_email_verification = false\ndefault_admin_email = \"admin@example.com\"\ndefault_admin_password = \"change_me_immediately\"\n```\n\n- **`require_authentication`**: Set to `false` for development/testing; `true` for production.\n- **`require_email_verification`**: Set to `false` by default; consider enabling for production.\n\n#### Accessing Superuser Features\n\nAuthenticate as the default admin or another superuser to access superuser features.\n\n**Python Example:**\n\n```python\nfrom r2r import R2RClient\n\nclient = R2RClient(\"http://localhost:7272\")\n\n# Login as admin\nlogin_result = client.users.login(\"admin@example.com\", \"change_me_immediately\")\n\n# Access superuser features\nusers_overview = client.users.list()\nprint(users_overview)\n\n# Access system-wide logs\nlogs = client.logs()\nprint(logs)\n\n# Perform analytics\nanalytics_result = client.analytics(\n    {\"all_latencies\": \"search_latency\"},\n    {\"search_latencies\": [\"basic_statistics\", \"search_latency\"]}\n)\nprint(analytics_result)\n```\n\n### Security Considerations for Superusers\n\nWhen using superuser capabilities:\n\n1. **Limit Superuser Access**: Only grant to trusted individuals.\n2. **Use Strong Passwords**: Ensure superuser accounts use strong, unique passwords.\n3. **Enable Authentication and Verification**: Set `require_authentication` and `require_email_verification` to `true` in production.\n4. **Audit Superuser Actions**: Regularly review logs of superuser activities.\n5. **Rotate Credentials**: Periodically update superuser credentials, including the default admin password.\n\n### Security Considerations\n\nWhen implementing user authentication, consider the following security best practices:\n\n1. **Use HTTPS**: Always use HTTPS in production to encrypt data in transit.\n2. **Implement Rate Limiting**: Protect against brute-force attacks by limiting login attempts.\n3. **Use Secure Password Hashing**: R2R uses bcrypt for password hashing by default.\n4. **Implement Multi-Factor Authentication (MFA)**: Add MFA for an extra layer of security.\n5. **Regular Security Audits**: Conduct regular security audits of your authentication system.\n\n### Customizing Authentication\n\nR2R’s authentication system is flexible and can be customized to fit your specific needs:\n\n1. **Custom User Fields**: Extend the User model to include additional fields.\n2. **OAuth Integration**: Integrate with third-party OAuth providers for social login.\n3. **Custom Password Policies**: Implement custom password strength requirements.\n4. **User Roles and Permissions**: Implement a role-based access control system.\n\n### Troubleshooting\n\n**Common Issues and Solutions:**\n\n1. **Login Fails After Registration**:\n   - Ensure email verification is completed if enabled.\n\n2. **Token Refresh Fails**:\n   - Check if the refresh token has expired; the user may need to log in again.\n\n3. **Unable to Change Password**:\n   - Verify that the current password is correct.\n\n### Conclusion\n\nR2R provides a comprehensive set of user authentication and management features, allowing developers to implement secure and user-friendly applications. By leveraging these capabilities, you can implement robust user authentication, document management, and access control in your R2R-based projects.\n\nFor more advanced use cases or custom implementations, refer to the R2R documentation or reach out to the community for support.\n\n---\n\n## Collections\n\n### Introduction\n\nA **collection** in R2R is a logical grouping of users and documents that allows for efficient access control and organization. Collections enable you to manage permissions and access to documents at a group level, rather than individually.\n\nR2R provides robust document collection management, allowing developers to implement efficient access control and organization of users and documents.\n\n**Note**: Collection permissioning in R2R is under development and may continue evolving in future releases.\n\n### Basic Usage\n\n#### Collection CRUD Operations\n\n**Creating a Collection:**\n\n```python\nfrom r2r import R2RClient\n\nclient = R2RClient(\"http://localhost:7272\")  # Replace with your R2R deployment URL\n\n# Create a new collection\ncollection_result = client.collections.create(\"Marketing Team\", \"Collection for marketing department\")\nprint(f\"Collection creation result: {collection_result}\")\n# {'results': {'collection_id': '123e4567-e89b-12d3-a456-426614174000', 'name': 'Marketing Team', 'description': 'Collection for marketing department', ...}}\n```\n\n**Retrieving Collection Details:**\n\n```python\ncollection_id = '123e4567-e89b-12d3-a456-426614174000'  # Use the actual collection_id\n\ncollection_details = client.collections.retrieve(collection_id)\nprint(f\"Collection details: {collection_details}\")\n# {'results': {'collection_id': '123e4567-e89b-12d3-a456-426614174000', 'name': 'Marketing Team', 'description': 'Collection for marketing department', ...}}\n```\n\n**Updating a Collection:**\n\n```python\nupdate_result = client.collections.update(\n    collection_id,\n    name=\"Updated Marketing Team\",\n    description=\"New description for marketing team\"\n)\nprint(f\"Collection update result: {update_result}\")\n# {'results': {'collection_id': '123e4567-e89b-12d3-a456-426614174000', 'name': 'Updated Marketing Team', 'description': 'New description for marketing team', ...}}\n```\n\n**Deleting a Collection:**\n\n```python\nclient.collections.delete(collection_id)\n```\n\n### User Management in Collections\n\n#### Adding a User to a Collection\n\n```python\nuser_id = '456e789f-g01h-34i5-j678-901234567890'  # Valid user ID\ncollection_id = '123e4567-e89b-12d3-a456-426614174000'  # Valid collection ID\n\nadd_user_result = client.collections.add_user(user_id, collection_id)\nprint(f\"Add user to collection result: {add_user_result}\")\n# {'results': {'message': 'User successfully added to the collection'}}\n```\n\n#### Removing a User from a Collection\n\n```python\nremove_user_result = client.collections.remove_user(user_id, collection_id)\nprint(f\"Remove user from collection result: {remove_user_result}\")\n# {'results': None}\n```\n\n#### Listing Users in a Collection\n\n```python\nusers_in_collection = client.collections.list_users(collection_id)\nprint(f\"Users in collection: {users_in_collection}\")\n# {'results': [{'user_id': '456e789f-g01h-34i5-j678-901234567890', 'email': 'user@example.com', 'name': 'John Doe', ...}, ...]}\n```\n\n#### Getting Collections for a User\n\n```python\nuser_collections = client.user.list_collections(user_id)\nprint(f\"User's collections: {user_collections}\")\n# {'results': [{'collection_id': '123e4567-e89b-12d3-a456-426614174000', 'name': 'Updated Marketing Team', ...}, ...]}\n```\n\n### Document Management in Collections\n\n#### Assigning a Document to a Collection\n\n```python\ndocument_id = '789g012j-k34l-56m7-n890-123456789012'  # Valid document ID\n\nassign_doc_result = client.collections.add_document(collection_id, document_id)\nprint(f\"Assign document to collection result: {assign_doc_result}\")\n# {'results': {'message': 'Document successfully assigned to the collection'}}\n```\n\n#### Removing a Document from a Collection\n\n```python\nremove_doc_result = client.collections.remove_document(collection_id, document_id)\nprint(f\"Remove document from collection result: {remove_doc_result}\")\n# {'results': {'message': 'Document successfully removed from the collection'}}\n```\n\n#### Listing Documents in a Collection\n\n```python\ndocs_in_collection = client.collections.list_documents(collection_id)\nprint(f\"Documents in collection: {docs_in_collection}\")\n# {'results': [{'document_id': '789g012j-k34l-56m7-n890-123456789012', 'title': 'Marketing Strategy 2024', ...}, ...]}\n```\n\n#### Getting Collections for a Document\n\n```python\ndocument_collections = client.documents.list_collections(document_id)\nprint(f\"Document's collections: {document_collections}\")\n# {'results': [{'collection_id': '123e4567-e89b-12d3-a456-426614174000', 'name': 'Updated Marketing Team', ...}, ...]}\n```\n\n### Advanced Collection Management\n\n#### Generating Synthetic Descriptions\n\nGenerate a description for a collection using an LLM.\n\n```python\nupdate_result = client.collections.update(\n    collection_id,\n    generate_description=True\n)\nprint(f\"Collection update result: {update_result}\")\n# {'results': {'collection_id': '123e4567-e89b-12d3-a456-426614174000', 'name': 'Updated Marketing Team', 'description': 'A rich description...', ...}}\n```\n\n#### Collection Overview\n\nGet an overview of collections, including user and document counts.\n\n```python\ncollections_list = client.collections.list()\nprint(f\"Collections overview: {collections_list}\")\n# {'results': [{'collection_id': '123e4567-e89b-12d3-a456-426614174000', 'name': 'Updated Marketing Team', 'description': 'New description...', 'user_count': 5, 'document_count': 10, ...}, ...]}\n```\n\n### Pagination and Filtering\n\nMany collection-related methods support pagination and filtering.\n\n**Examples:**\n\n```python\n# List collections with pagination\npaginated_collections = client.collections.list(offset=10, limit=20)\n\n# Get users in a collection with pagination\npaginated_users = client.collections.list_users(collection_id, offset=5, limit=10)\n\n# Get documents in a collection with pagination\npaginated_docs = client.collections.list_documents(collection_id, offset=0, limit=50)\n\n# Get specific collections by IDs\nspecific_collections = client.collections.list(collection_ids=['id1', 'id2', 'id3'])\n```\n\n### Security Considerations\n\nWhen implementing collection permissions, consider the following security best practices:\n\n1. **Least Privilege Principle**: Assign minimum necessary permissions to users and collections.\n2. **Regular Audits**: Periodically review collection memberships and document assignments.\n3. **Access Control**: Ensure only authorized users (e.g., admins) can perform collection management operations.\n4. **Logging and Monitoring**: Implement comprehensive logging for all collection-related actions.\n\n### Customizing Collection Permissions\n\nWhile R2R’s current collection system follows a flat hierarchy, you can build more complex permission structures:\n\n1. **Custom Roles**: Implement application-level roles within collections (e.g., collection admin, editor, viewer).\n2. **Hierarchical Collections**: Create a hierarchy by establishing parent-child relationships between collections in your application logic.\n3. **Permission Inheritance**: Implement rules for permission inheritance based on collection memberships.\n\n### Troubleshooting\n\n**Common Issues and Solutions:**\n\n1. **Unable to Create/Modify Collections**:\n   - Ensure the user has superuser privileges.\n\n2. **User Not Seeing Collection Content**:\n   - Verify that the user is correctly added to the collection.\n   - Ensure documents are properly assigned.\n\n3. **Performance Issues with Large Collections**:\n   - Use pagination when retrieving users or documents.\n   - Consider splitting large collections.\n\n### Conclusion\n\nR2R’s collection permissioning system provides a foundation for implementing sophisticated access control in your applications. As the feature set evolves, more advanced capabilities will become available. Regularly update your practices based on the latest R2R documentation.\n\n### Next Steps\n\n- Explore [GraphRAG](https://r2r-docs.sciphi.ai/cookbooks/graphrag) for advanced features.\n- Learn about [hybrid search](https://r2r-docs.sciphi.ai/cookbooks/hybrid-search) integration.\n- Discover more about [observability](https://r2r-docs.sciphi.ai/cookbooks/observability).\n- Set up [orchestration](https://r2r-docs.sciphi.ai/cookbooks/orchestration) for large-scale processing.\n\n---\n\n## Telemetry\n\nR2R uses telemetry to collect **anonymous** usage information. This data helps understand how R2R is used, prioritize new features and bug fixes, and improve overall performance and stability.\n\n### Introduction\n\nR2R uses telemetry to collect **anonymous** usage information. This data helps understand how R2R is used, prioritize new features and bug fixes, and improve overall performance and stability.\n\n### Disabling Telemetry\n\nTo opt out of telemetry, set an environment variable:\n\n```bash\nexport TELEMETRY_ENABLED=false\n```\n\n**Valid Values**: `false`, `0`, `f`\n\nWhen telemetry is disabled, no events are captured.\n\n### Collected Information\n\nOur telemetry system collects basic, anonymous information such as:\n\n- **Feature Usage**: Which features are being used and their frequency.\n- **Performance Metrics**: Query latencies, system resource usage.\n- **Error Logs**: Information about errors and exceptions.\n\n### Telemetry Data Storage\n\n*Details about telemetry data storage are not provided in the original document.*\n\n### Why We Collect Telemetry\n\nTelemetry data helps us:\n\n1. Understand which features are most valuable to users.\n2. Identify areas for improvement.\n3. Prioritize development efforts.\n4. Enhance R2R’s overall performance and stability.\n\nWe appreciate your participation in our telemetry program, as it directly contributes to making R2R better for everyone.\n\n### Conclusion\n\nTelemetry in R2R provides valuable insights into system usage and performance, enabling continuous improvement. Users concerned about privacy can easily disable telemetry by setting the appropriate environment variable.\n\n---\n\n## Embedding\n\n### Embedding System\n\nR2R uses embeddings as the foundation for semantic search and similarity matching capabilities. The embedding system converts text into high-dimensional vectors that capture semantic meaning, enabling powerful search and retrieval operations.\n\nR2R leverages **LiteLLM** to route embedding requests due to their provider flexibility. Read more about [LiteLLM here](https://docs.litellm.ai/).\n\n### Embedding Configuration\n\nCustomize the embedding system through the `embedding` section in your `r2r.toml` file, along with corresponding environment variables for sensitive information.\n\n**Example: `r2r.toml`**\n\n```toml\n[embedding]\nprovider = \"litellm\"  # defaults to \"litellm\"\nbase_model = \"openai/text-embedding-3-small\"  # defaults to \"openai/text-embedding-3-large\"\nbase_dimension = 512  # defaults to 3072\nbatch_size = 512  # defaults to 128\nrerank_model = \"BAAI/bge-reranker-v2-m3\"  # defaults to None\nconcurrent_request_limit = 256  # defaults to 256\n```\n\n**Environment Variables:**\n\n- `OPENAI_API_KEY`\n- `OPENAI_API_BASE`\n- `HUGGINGFACE_API_KEY`\n- `HUGGINGFACE_API_BASE`\n- `ANTHROPIC_API_KEY`\n- `COHERE_API_KEY`\n- `OLLAMA_API_KEY`\n- `BEDROCK_API_KEY`\n- `VERTEX_AI_API_KEY`\n- `VOYAGE_AI_API_KEY`\n\n### Advanced Embedding Features in R2R\n\n#### Batched Processing\n\nR2R implements intelligent batching for embedding operations to optimize throughput and, in some cases, cost.\n\n**Python Example:**\n\n```python\nclass EmbeddingProvider:\n    async def embed_texts(self, texts: List[str]) -> List[List[float]]:\n        batches = [texts[i:i + self.batch_size] for i in range(0, len(texts), self.batch_size)]\n        embeddings = []\n        for batch in batches:\n            batch_embeddings = await self._process_batch(batch)\n            embeddings.extend(batch_embeddings)\n        return embeddings\n```\n\n#### Concurrent Request Management\n\nThe system manages requests with rate limiting and concurrency control.\n\n1. **Rate Limiting**: Prevents API throttling through intelligent request scheduling.\n2. **Concurrent Processing**: Manages multiple embedding requests efficiently.\n3. **Error Handling**: Implements retry logic with exponential backoff.\n\n### Performance Considerations\n\nWhen configuring embeddings in R2R, consider these optimization strategies:\n\n1. **Batch Size Optimization**:\n   - Larger batch sizes improve throughput but increase latency.\n   - Consider provider-specific rate limits when setting batch size.\n   - Balance memory usage with processing speed.\n\n2. **Concurrent Requests**:\n   - Adjust `concurrent_request_limit` based on provider capabilities.\n   - Monitor API usage and adjust limits accordingly.\n   - Implement local caching for frequently embedded texts.\n\n3. **Model Selection**:\n   - Balance embedding dimension size with accuracy requirements.\n   - Consider cost per token for different providers.\n   - Evaluate multilingual requirements when choosing models.\n\n4. **Resource Management**:\n   - Monitor memory usage with large batch sizes.\n   - Implement appropriate error handling and retry strategies.\n   - Consider implementing local model fallbacks for critical systems.\n\n### Supported LiteLLM Providers\n\nR2R supports multiple LiteLLM providers:\n\n- **OpenAI**\n- **Azure**\n- **Anthropic**\n- **Cohere**\n- **Ollama**\n- **HuggingFace**\n- **Bedrock**\n- **Vertex AI**\n- **Voyage AI**\n\n**Example Configuration:**\n\n```toml\n[embedding]\nprovider = \"litellm\"\nbase_model = \"openai/text-embedding-3-small\"\nbase_dimension = 512\n\n# Environment Variables\nexport OPENAI_API_KEY=your_openai_key\n# Set other environment variables as needed\n```\n\n**Supported Models:**\n\n- `openai/text-embedding-3-small`\n- `openai/text-embedding-3-large`\n- `openai/text-embedding-ada-002`\n\n### Performance Considerations\n\n1. **Batch Size Optimization**:\n   - Larger batches improve throughput but may increase latency.\n   - Balance batch size with memory and processing speed.\n\n2. **Concurrent Requests**:\n   - Adjust based on provider capabilities.\n   - Monitor and optimize based on API usage.\n\n3. **Model Selection**:\n   - Choose models that fit your domain and accuracy needs.\n   - Consider cost implications of different models.\n\n### Conclusion\n\nR2R’s embedding system, powered by LiteLLM, offers flexible and powerful semantic search capabilities. By optimizing batch sizes, managing concurrent requests, and selecting appropriate models, you can ensure efficient and accurate embeddings tailored to your application's needs.\n\n---\n\n## Prompts\n\n### Prompt Management in R2R\n\nR2R provides a flexible system for managing prompts, allowing you to create, update, retrieve, and delete prompts dynamically. This system is crucial for customizing the behavior of language models and ensuring consistent interactions across your application.\n\n### Default Prompts\n\nR2R comes with a set of default prompts loaded from YAML files located in the [`py/core/providers/database/prompts`](https://github.com/SciPhi-AI/R2R/tree/main/py/core/providers/database/prompts) directory. These prompts serve as starting points for various tasks.\n\n**Example: `default_rag.yaml`**\n\n```yaml\ndefault_rag:\n  template: >\n    ## Task:\n\n    Answer the query given immediately below given the context which follows later. Use line item references like [1], [2], ... to refer to specifically numbered items in the provided context. Pay close attention to the title of each given source to ensure consistency with the query.\n\n    ### Query:\n\n    {query}\n\n    ### Context:\n\n    {context}\n\n    ### Response:\n```\n\n#### Prompt Files\n\n| Prompt File                                  | Purpose                                                                                       |\n|----------------------------------------------|-----------------------------------------------------------------------------------------------|\n| `default_rag.yaml`                           | Default prompt for Retrieval-Augmented Generation (RAG) tasks.                              |\n| `graphrag_community_reports.yaml`             | Used in GraphRAG to generate reports about communities or clusters in the knowledge graph.   |\n| `graphrag_entity_description.yaml`            | System prompt for the “map” phase in GraphRAG, used to process individual nodes or edges.     |\n| `graphrag_map_system.yaml`                    | System prompt for the “map” phase in GraphRAG.                                              |\n| `graphrag_reduce_system.yaml`                 | System prompt for the “reduce” phase in GraphRAG.                                           |\n| `graphrag_triples_extraction_few_shot.yaml`   | Few-shot prompt for extracting subject-predicate-object triplets in GraphRAG.               |\n| `hyde.yaml`                                  | Related to Hypothetical Document Embeddings (HyDE) for improving retrieval performance.      |\n| `rag_agent.yaml`                             | Defines behavior and instructions for the RAG agent, coordinating retrieval and generation.  |\n| `rag_context.yaml`                           | Used to process or format the context retrieved for RAG tasks.                               |\n| `rag_fusion.yaml`                            | Used in RAG fusion techniques for combining information from multiple retrieved passages.    |\n| `system.yaml`                                | Contains general system-level prompts or instructions for the R2R system.                    |\n\n### Prompt Provider\n\nR2R uses a Postgres class to manage prompts, enabling storage, retrieval, and manipulation of prompts. This leverages both a Postgres database and YAML files for flexibility and persistence.\n\n**Key Features:**\n\n1. **Database Storage**: Prompts are stored in a Postgres table for efficient querying and updates.\n2. **YAML File Support**: Prompts can be loaded from YAML files, facilitating version control and distribution.\n3. **In-Memory Cache**: Prompts are kept in memory for fast access during runtime.\n\n### Prompt Structure\n\nEach prompt in R2R consists of:\n\n- **Name**: A unique identifier for the prompt.\n- **Template**: The actual text of the prompt, which may include placeholders for dynamic content.\n- **Input Types**: A dictionary specifying the expected types for any dynamic inputs to the prompt.\n\n### Managing Prompts\n\nR2R provides several endpoints and SDK methods for managing prompts:\n\n#### Adding a Prompt\n\n```python\nfrom r2r import R2RClient\n\nclient = R2RClient()\n\nresponse = client.prompts.add_prompt(\n    name=\"my_new_prompt\",\n    template=\"Hello, {name}! Welcome to {service}.\",\n    input_types={\"name\": \"str\", \"service\": \"str\"}\n)\n```\n\n#### Updating a Prompt\n\n```python\nresponse = client.prompts.update_prompt(\n    name=\"my_existing_prompt\",\n    template=\"Updated template: {variable}\",\n    input_types={\"variable\": \"str\"}\n)\n```\n\n#### Retrieving a Prompt\n\n```python\nresponse = client.prompts.get_prompt(\n    prompt_name=\"my_prompt\",\n    inputs={\"variable\": \"example\"},\n    prompt_override=\"Optional override text\"\n)\n```\n\nRefer to the [Prompt API Reference](https://r2r-docs.sciphi.ai/api-and-sdks/prompts) for more details.\n\n### Security Considerations\n\nAccess to prompt management functions is restricted to superusers to prevent unauthorized modifications to system prompts. Ensure only trusted administrators have superuser access to your R2R deployment.\n\n### Conclusion\n\nR2R’s prompt management system offers powerful and flexible control over language model behavior. By effectively managing prompts, you can create dynamic, context-aware, and maintainable AI-powered features tailored to your application's needs.\n\n---\n\n## RAG\n\n### RAG Customization\n\nRAG (Retrieval-Augmented Generation) in R2R can be extensively customized to suit various use cases. The main components for customization are:\n\n1. **Generation Configuration**: Control the language model’s behavior.\n2. **Search Settings**: Fine-tune the retrieval process.\n3. **Task Prompt Override**: Customize the system prompt for specific tasks.\n\n#### LLM Provider Configuration\n\nRefer to the [LLM Configuration](https://r2r-docs.sciphi.ai/documentation/configuration/llm) page for detailed information.\n\n#### Retrieval Configuration\n\nRefer to the [Retrieval Configuration](https://r2r-docs.sciphi.ai/documentation/configuration/retrieval/overview) page for detailed information.\n\n### Combining LLM and Retrieval Configuration for RAG\n\nThe `rag_generation_config` parameter allows you to customize the language model’s behavior. Default settings are set on the server-side using `r2r.toml`. These settings can be overridden at runtime.\n\n**Python Example:**\n\n```python\nfrom r2r import R2RClient\n\nclient = R2RClient()\n\nresponse = client.retrieval.rag(\n    \"Who was Aristotle?\",\n    rag_generation_config={\n        \"model\": \"anthropic/claude-3-haiku-20240307\",\n        \"temperature\": 0.7,\n    },\n    search_settings={\n        \"use_semantic_search\": True,\n        \"limit\": 20,\n        \"use_hybrid_search\": True\n    }\n)\n```\n\n### RAG Prompt Override\n\nFor specialized tasks, override the default RAG task prompt at runtime.\n\n**Python Example:**\n\n```python\ntask_prompt_override = \"\"\"You are an AI assistant specializing in quantum computing.\n\nYour task is to provide a concise summary of the latest advancements in the field,\nfocusing on practical applications and breakthroughs from the past year.\"\"\"\n\nresponse = client.retrieval.rag(\n    \"What are the latest advancements in quantum computing?\",\n    rag_generation_config=rag_generation_config,\n    task_prompt_override=task_prompt_override\n)\n```\n\n### Agent-based Interaction\n\nR2R supports multi-turn conversations and complex query processing through its agent endpoint.\n\n**Python Example:**\n\n```python\nfrom r2r import R2RClient\n\nclient = R2RClient(\"http://localhost:7272\")\n\nmessages = [\n    {\"role\": \"system\", \"content\": \"You are a helpful AI assistant.\"},\n    {\"role\": \"user\", \"content\": \"What are the key differences between quantum and classical computing?\"}\n]\n\nresponse = client.retrieval.agent(\n    messages=messages,\n    vector_search_settings=vector_search_settings,\n    graph_settings=graph_settings,\n    rag_generation_config=rag_generation_config,\n)\n```\n\n### Conclusion\n\nBy leveraging R2R’s RAG customization options, you can fine-tune retrieval and generation processes to best suit your specific use case and requirements, enhancing the overall performance and relevance of your AI-powered features.\n\n---\n\n## Graphs\n\n### Graphs\n\nR2R supports robust knowledge graph functionality to enhance document understanding and retrieval. By extracting entities and relationships from documents and organizing them into collections, R2R enables advanced graph-based analysis and search capabilities.\n\n**Note**: Refer to the [Knowledge Graph Cookbook](https://r2r-docs.sciphi.ai/cookbooks/knowledge-graphs) and [GraphRAG Cookbook](https://r2r-docs.sciphi.ai/cookbooks/graphrag) for detailed guides.\n\n### Knowledge Graph Operations\n\n#### Entity Management\n\n- **Add Entities**: Add new entities to the knowledge graph.\n- **Update Entities**: Modify existing entities.\n- **Retrieve Entities**: Fetch entities based on criteria.\n\n#### Relationship Management\n\n- **Create Relationships**: Define relationships between entities.\n- **Query Relationships**: Fetch relationships based on criteria.\n\n#### Batch Import\n\nEfficiently import large amounts of data using batched operations.\n\n#### Vector Search\n\nPerform similarity searches on entity embeddings to find related entities.\n\n#### Community Detection\n\nIdentify and manage communities within the graph to understand clusters of related information.\n\n### Customization\n\nCustomize knowledge graph extraction and search processes by modifying `kg_triples_extraction_prompt` and adjusting model configurations in `kg_extraction_settings` and `graph_settings`.\n\n### Conclusion\n\nR2R’s knowledge graph capabilities enhance document understanding and improve search and RAG operations by providing structured and interconnected information from your documents.\n\n# HTTP API of R2R Library\n\nWelcome to the **R2R (Retrieve to Retrieve) API** documentation. This guide provides an exhaustive overview of all available API endpoints, organized into logical sections with detailed descriptions, request and response schemas, error codes, and usage examples. Whether you're integrating R2R into your application or developing workflows around it, this documentation will serve as your essential reference.\n\n---\n\n## Table of Contents\n\n1. [Introduction](#introduction)\n2. [Authentication](#authentication)\n3. [Documents](#documents)\n    - [Overview](#overview)\n    - [Available Endpoints](#available-endpoints)\n    - [Endpoint Details](#endpoint-details)\n4. [Chunks](#chunks)\n    - [Overview](#overview-1)\n    - [Available Endpoints](#available-endpoints-1)\n    - [Endpoint Details](#endpoint-details-1)\n5. [Graphs](#graphs)\n    - [Overview](#overview-2)\n    - [Available Endpoints](#available-endpoints-2)\n    - [Endpoint Details](#endpoint-details-2)\n6. [Entities](#entities)\n    - [Overview](#overview-3)\n    - [Available Endpoints](#available-endpoints-3)\n    - [Endpoint Details](#endpoint-details-3)\n7. [Relationships](#relationships)\n    - [Overview](#overview-4)\n    - [Available Endpoints](#available-endpoints-4)\n    - [Endpoint Details](#endpoint-details-4)\n8. [Communities](#communities)\n    - [Overview](#overview-5)\n    - [Available Endpoints](#available-endpoints-5)\n    - [Endpoint Details](#endpoint-details-5)\n9. [Retrieval](#retrieval)\n    - [Overview](#overview-6)\n    - [Available Endpoints](#available-endpoints-6)\n    - [Endpoint Details](#endpoint-details-6)\n10. [Indices](#indices)\n    - [Overview](#overview-7)\n    - [Available Endpoints](#available-endpoints-7)\n    - [Endpoint Details](#endpoint-details-7)\n11. [Users](#users)\n    - [Overview](#overview-8)\n    - [Available Endpoints](#available-endpoints-8)\n    - [Endpoint Details](#endpoint-details-8)\n12. [Collections](#collections)\n    - [Overview](#overview-9)\n    - [Available Endpoints](#available-endpoints-9)\n    - [Endpoint Details](#endpoint-details-9)\n13. [Conversations](#conversations)\n    - [Overview](#overview-10)\n    - [Available Endpoints](#available-endpoints-10)\n    - [Endpoint Details](#endpoint-details-10)\n14. [Prompts](#prompts)\n    - [Overview](#overview-11)\n    - [Available Endpoints](#available-endpoints-11)\n    - [Endpoint Details](#endpoint-details-11)\n15. [System](#system)\n    - [Overview](#overview-12)\n    - [Available Endpoints](#available-endpoints-12)\n    - [Endpoint Details](#endpoint-details-12)\n16. [Common Use Cases](#common-use-cases)\n17. [Conclusion](#conclusion)\n\n---\n\n## Introduction\n\n**R2R (Retrieve to Retrieve)** is a robust content management and retrieval system designed to ingest, manage, and retrieve various types of documents efficiently. It leverages advanced features such as semantic search, knowledge graph creation, and conversational agents powered by large language models (LLMs). This API allows seamless integration with R2R’s functionalities, enabling developers to build sophisticated applications and workflows.\n\n---\n\n## Authentication\n\nBefore accessing any R2R API endpoints, ensure you have authenticated and obtained the necessary access tokens. Authentication is handled via Bearer tokens included in the `Authorization` header of each request.\n\n### Example Header\n\n```http\nAuthorization: Bearer YOUR_API_KEY\n```\n\n---\n\n## Documents\n\n### Overview\n\nA **Document** in R2R represents an ingested piece of content such as text files, PDFs, images, or audio files. Documents undergo processing to generate **Chunks**, extract **Entities** & **Relationships**, and facilitate the construction of knowledge graphs. They are central to R2R’s content management system and are associated with metadata and collections for organized access control.\n\n### Core Features of Documents\n\n1. **Ingestion & Processing**\n    - Upload new content or update existing documents.\n    - Automatic chunking and optional summarization.\n    - Metadata storage and advanced filtering capabilities.\n\n2. **Knowledge Graph Extraction**\n    - Extract Entities and Relationships for building knowledge graphs.\n    - Maintain ingestion and extraction status.\n\n3. **Collections & Access Control**\n    - Organize documents into Collections.\n    - Manage user access to documents at a collection level.\n\n### Available Endpoints\n\n| Method | Endpoint                           | Description                                                                                         |\n| :---- | :---------------------------------- | :-------------------------------------------------------------------------------------------------- |\n| POST   | `/documents`                         | Ingest a new document from a file or text content. Supports `multipart/form-data`.                  |\n| POST   | `/documents/{id}`                    | Update an existing document with new content or metadata.                                           |\n| GET    | `/documents`                         | List documents with pagination. Can filter by IDs.                                                  |\n| GET    | `/documents/{id}`                    | Get details of a specific document.                                                                 |\n| GET    | `/documents/{id}/chunks`             | Retrieve the chunks generated from a document.                                                      |\n| GET    | `/documents/{id}/download`           | Download the original document file.                                                                |\n| DELETE | `/documents/{id}`                    | Delete a specific document.                                                                         |\n| DELETE | `/documents/by-filter`               | Delete multiple documents using filters.                                                            |\n| GET    | `/documents/{id}/collections`        | List collections containing a document (**superuser only**).                                        |\n| POST   | `/documents/{id}/extract`            | Extract entities and relationships from a document for knowledge graph creation.                     |\n| GET    | `/documents/{id}/entities`           | Retrieve entities extracted from the document.                                                      |\n| GET    | `/documents/{id}/relationships`      | List relationships between entities found in the document.                                          |\n\n### Endpoint Details\n\n#### 1. List Documents\n\n```http\nGET /v3/documents\n```\n\n**Description:**\nReturns a paginated list of documents accessible to the authenticated user. Regular users see only their own documents or those shared through collections, while superusers see all documents.\n\n**Query Parameters:**\n\n| Parameter                   | Type     | Required | Description                                                                 |\n| :-------------------------- | :------- | :------ | :-------------------------------------------------------------------------- |\n| `ids`                       | `string` | No      | A comma-separated list of document IDs to retrieve.                         |\n| `offset`                    | `integer`| No      | Number of objects to skip. Defaults to `0`.                                 |\n| `limit`                     | `integer`| No      | Max number of objects to return, `1–100`. Defaults to `100`.               |\n| `include_summary_embeddings`| `integer`| No      | Whether to include embeddings of each document summary (`1` for true, `0` for false). |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"id\",\n      \"collection_ids\": [\"collection_ids\"],\n      \"owner_id\": \"owner_id\",\n      \"document_type\": \"mp3\",\n      \"metadata\": { \"key\": \"value\" },\n      \"version\": \"version\",\n      \"title\": \"title\",\n      \"size_in_bytes\": 1,\n      \"ingestion_status\": \"pending\",\n      \"extraction_status\": \"pending\",\n      \"created_at\": \"2024-01-15T09:30:00Z\",\n      \"updated_at\": \"2024-01-15T09:30:00Z\",\n      \"ingestion_attempt_number\": 1,\n      \"summary\": \"summary\",\n      \"summary_embedding\": [1.1]\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n---\n\n#### 2. Create a New Document\n\n```http\nPOST /v3/documents\n```\n\n**Description:**\nCreates a new Document object from an input file, text content, or pre-processed chunks. The ingestion process can be configured using an `ingestion_mode` or a custom `ingestion_config`.\n\n**Ingestion Modes:**\n\n- `hi-res`: Comprehensive parsing and enrichment, including summaries and thorough processing.\n- `fast`: Speed-focused ingestion that skips certain enrichment steps like summaries.\n- `custom`: Provide a full `ingestion_config` to customize the entire ingestion process.\n\n**Note:**\nEither a file or text content must be provided, but not both. Documents are shared through `Collections`, allowing for specified cross-user interactions. The ingestion process runs asynchronously, and its progress can be tracked using the returned `task_id`.\n\n**Request (Multipart Form):**\n\n| Parameter                 | Type     | Required | Description                                                          |\n| :------------------------ | :------- | :------ | :------------------------------------------------------------------- |\n| `file`                    | `string` | No      | The file to ingest. Exactly one of `file`, `raw_text`, or `chunks` must be provided. |\n| `raw_text`                | `string` | No      | Raw text content to ingest. Exactly one of `file`, `raw_text`, or `chunks` must be provided. |\n| `chunks`                  | `string` | No      | Pre-processed text chunks to ingest. Exactly one of `file`, `raw_text`, or `chunks` must be provided. |\n| `id`                      | `string` | No      | Document ID. If omitted, a new ID will be generated.                 |\n| `collection_ids`          | `string` | No      | Collection IDs to associate with the document. Defaults to the user’s default collection if not provided. |\n| `metadata`                | `string` | No      | Metadata such as title, description, or custom fields in JSON format. |\n| `ingestion_mode`          | `enum`   | No      | `hi-res`, `fast`, or `custom`.                                       |\n| `ingestion_config`        | `string` | No      | Custom ingestion settings if `ingestion_mode` is `custom`.           |\n| `run_with_orchestration`  | `boolean`| No      | Whether ingestion runs with orchestration. Default is `true`.         |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"message\": \"Document ingestion started.\",\n    \"document_id\": \"generated_document_id\",\n    \"task_id\": \"ingestion_task_id\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/documents\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -F \"file=@/path/to/document.pdf\" \\\n     -F \"metadata={\\\"title\\\": \\\"Sample Document\\\", \\\"description\\\": \\\"A sample document for ingestion.\\\"}\"\n```\n\n---\n\n#### 3. Retrieve a Document\n\n```http\nGET /v3/documents/:id\n```\n\n**Description:**\nRetrieves detailed information about a specific document by its ID. This includes metadata and processing status. The document’s content is **not** returned here; use `/documents/{id}/download` to retrieve the file itself.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                     |\n| :-------- | :----- | :------ | :------------------------------ |\n| `id`      | `string` | Yes      | The Document ID to retrieve.    |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"id\",\n    \"collection_ids\": [\"collection_ids\"],\n    \"owner_id\": \"owner_id\",\n    \"document_type\": \"pdf\",\n    \"metadata\": { \"key\": \"value\" },\n    \"version\": \"version\",\n    \"title\": \"title\",\n    \"size_in_bytes\": 1024,\n    \"ingestion_status\": \"success\",\n    \"extraction_status\": \"enriched\",\n    \"created_at\": \"2024-01-15T09:30:00Z\",\n    \"updated_at\": \"2024-01-15T09:30:00Z\",\n    \"ingestion_attempt_number\": 1,\n    \"summary\": \"document summary\",\n    \"summary_embedding\": [1.1, 2.2, 3.3]\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/documents/document_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 4. Delete a Document\n\n```http\nDELETE /v3/documents/:id\n```\n\n**Description:**\nDeletes a specific document, including its associated chunks and references. **Note:** This action does not currently affect the knowledge graph or other derived data.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description        |\n| :-------- | :----- | :------ | :----------------- |\n| `id`      | `string` | Yes      | The Document ID to delete. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"success\": true\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X DELETE \"https://api.example.com/v3/documents/document_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 5. Delete Documents by Filter\n\n```http\nDELETE /v3/documents/by-filter\n```\n\n**Description:**\nDeletes multiple documents based on provided filters. Only the user’s own documents can be deleted using this method.\n\n**Request Body:**\n\nA JSON object containing filter criteria using operators like `$eq`, `$neq`, `$gt`, `$gte`, `$lt`, `$lte`, `$like`, `$ilike`, `$in`, and `$nin`.\n\n**Example Request Body:**\n\n```json\n{\n  \"filters\": {\n    \"document_type\": { \"$eq\": \"pdf\" },\n    \"size_in_bytes\": { \"$gte\": 100000 }\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"success\": true\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X DELETE \"https://api.example.com/v3/documents/by-filter\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"filters\": {\"document_type\": {\"$eq\": \"pdf\"}}}'\n```\n\n---\n\n#### 6. List Document Chunks\n\n```http\nGET /v3/documents/:id/chunks\n```\n\n**Description:**\nRetrieves the text chunks generated from a document during ingestion. Chunks represent semantic sections of the document and are used for retrieval and analysis.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                          |\n| :-------- | :----- | :------ | :----------------------------------- |\n| `id`      | `string` | Yes      | The Document ID to retrieve chunks for. |\n\n**Query Parameters:**\n\n| Parameter         | Type      | Required | Description                                       |\n| :---------------- | :-------- | :------ | :------------------------------------------------ |\n| `offset`          | `integer` | No      | Number of chunks to skip. Defaults to `0`.        |\n| `limit`           | `integer` | No      | Number of chunks to return (`1–100`). Defaults to `100`. |\n| `include_vectors` | `boolean` | No      | Whether to include vector embeddings in the response (`true` or `false`). |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"chunk-id\",\n      \"document_id\": \"document-id\",\n      \"owner_id\": \"owner-id\",\n      \"collection_ids\": [\"collection-id\"],\n      \"text\": \"Chunk content\",\n      \"metadata\": { \"key\": \"value\" },\n      \"vector\": [1.1, 2.2, 3.3]\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/documents/document_id/chunks?limit=10\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 7. Download Document Content\n\n```http\nGET /v3/documents/:id/download\n```\n\n**Description:**\nDownloads the original file content of a document. For uploaded files, it returns the file with its proper MIME type. For text-only documents, it returns the content as plain text.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description        |\n| :-------- | :----- | :------ | :----------------- |\n| `id`      | `string` | Yes      | The Document ID to download. |\n\n**Successful Response:**\n\n- Returns the file content with appropriate headers.\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/documents/document_id/download\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -o downloaded_document.pdf\n```\n\n---\n\n#### 8. List Document Collections (Superuser Only)\n\n```http\nGET /v3/documents/:id/collections\n```\n\n**Description:**\nLists all collections containing the specified document. **Superuser only**.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description        |\n| :-------- | :----- | :------ | :----------------- |\n| `id`      | `string` | Yes      | The Document ID.    |\n\n**Query Parameters:**\n\n| Parameter | Type      | Required | Description                           |\n| :-------- | :-------- | :------ | :------------------------------------ |\n| `offset`  | `integer` | No      | Number of collections to skip. Defaults to `0`. |\n| `limit`   | `integer` | No      | Number of collections to return (`1–100`). Defaults to `100`. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"collection-id\",\n      \"name\": \"Collection Name\",\n      \"graph_cluster_status\": \"string\",\n      \"graph_sync_status\": \"string\",\n      \"created_at\": \"2024-01-15T09:30:00Z\",\n      \"updated_at\": \"2024-01-15T09:30:00Z\",\n      \"user_count\": 10,\n      \"document_count\": 50,\n      \"owner_id\": \"owner_id\",\n      \"description\": \"A sample collection.\"\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/documents/document_id/collections\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 9. Extract Entities and Relationships\n\n```http\nPOST /v3/documents/:id/extract\n```\n\n**Description:**\nExtracts entities and relationships from a document for knowledge graph creation. This process involves parsing the document into chunks, extracting entities and relationships using LLMs, and storing them in the knowledge graph.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                                                   |\n| :-------- | :----- | :------ | :------------------------------------------------------------ |\n| `id`      | `string` | Yes      | The Document ID to extract entities and relationships from.   |\n\n**Query Parameters:**\n\n| Parameter                  | Type     | Required | Description                                                                  |\n| :------------------------- | :------- | :------ | :--------------------------------------------------------------------------- |\n| `run_type`                 | `string` | No      | `\"estimate\"` or `\"run\"`. Determines whether to return an estimate or execute extraction. |\n| `run_with_orchestration`   | `boolean`| No      | Whether to run the extraction process with orchestration. Defaults to `true`. |\n\n**Request Body:**\n\nAn optional JSON object containing various extraction settings.\n\n| Parameter                          | Type     | Required | Description                                                   |\n| :---------------------------------- | :------- | :------ | :------------------------------------------------------------ |\n| `graphrag_relationships_extraction_few_shot` | `string` | No | The prompt to use for knowledge graph extraction. Defaults to `graphrag_relationships_extraction_few_shot`. |\n| `graphrag_entity_description_prompt` | `string` | No | The prompt to use for entity description generation. Defaults to `graphrag_entity_description`. |\n| `entity_types`                     | `array`  | No       | The types of entities to extract.                            |\n| `relation_types`                   | `array`  | No       | The types of relations to extract.                           |\n| `chunk_merge_count`                | `integer`| No       | Number of extractions to merge into a single KG extraction. Defaults to `4`. |\n| `max_knowledge_relationships`      | `integer`| No       | Maximum number of knowledge relationships to extract from each chunk. Defaults to `100`. |\n| `max_description_input_length`     | `integer`| No       | Maximum length of the description for a node in the graph. Defaults to `65536`. |\n| `generation_config`                | `object` | No       | Configuration for text generation during graph enrichment.    |\n| `model`                            | `string` | No       | Model to use for text generation.                            |\n| `temperature`                      | `double` | No       | Temperature setting for generation.                         |\n| `top_p`                            | `double` | No       | Top-p setting for generation.                               |\n| `max_tokens_to_sample`             | `integer`| No       | Maximum tokens to sample during generation.                 |\n| `stream`                           | `boolean`| No       | Whether to stream the generation output.                    |\n| `functions`                        | `array`  | No       | List of functions for generation.                           |\n| `tools`                            | `array`  | No       | List of tools for generation.                               |\n| `add_generation_kwargs`            | `object` | No       | Additional generation keyword arguments.                    |\n| `api_base`                         | `string` | No       | API base URL for generation.                                |\n| `response_format`                  | `object` | No       | Response format configuration.                              |\n| `graphrag_map_system`              | `string` | No       | System prompt for graphrag map prompt. Defaults to `graphrag_map_system`. |\n| `graphrag_reduce_system`            | `string` | No       | System prompt for graphrag reduce prompt. Defaults to `graphrag_reduce_system`. |\n| `max_community_description_length` | `integer`| No       | Maximum community description length. Defaults to `65536`.   |\n| `max_llm_queries_for_global_search`| `integer`| No       | Maximum LLM queries for global search. Defaults to `250`.    |\n| `limits`                           | `object` | No       | Limits for graph search.                                    |\n| `enabled`                          | `boolean`| No       | Whether to enable graph search.                             |\n| `rag_generation_config`            | `object` | No       | Configuration for RAG generation.                           |\n| `task_prompt_override`             | `string` | No       | Optional custom prompt to override default.                 |\n| `include_title_if_available`       | `boolean`| No       | Include document titles in responses when available.        |\n\n**Example Request Body:**\n\n```json\n{\n  \"run_type\": \"run\",\n  \"settings\": {\n    \"entity_types\": [\"Person\", \"Location\"],\n    \"relation_types\": [\"BornIn\", \"WorksAt\"],\n    \"chunk_merge_count\": 5,\n    \"max_knowledge_relationships\": 150,\n    \"generation_config\": {\n      \"model\": \"gpt-4\",\n      \"temperature\": 0.7,\n      \"top_p\": 0.9,\n      \"max_tokens_to_sample\": 100,\n      \"stream\": false\n    }\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"message\": \"Entity and relationship extraction started.\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/documents/document_id/extract\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"run_type\": \"run\",\n           \"settings\": {\n             \"entity_types\": [\"Person\", \"Location\"],\n             \"relation_types\": [\"BornIn\", \"WorksAt\"],\n             \"chunk_merge_count\": 5,\n             \"max_knowledge_relationships\": 150\n           }\n         }'\n```\n\n---\n\n#### 10. Get Document Entities\n\n```http\nGET /v3/documents/:id/entities\n```\n\n**Description:**\nRetrieves entities extracted from the specified document.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                |\n| :-------- | :----- | :------ | :------------------------- |\n| `id`      | `string` | Yes      | The Document ID.           |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"entity_id\",\n      \"name\": \"Entity Name\",\n      \"description\": \"Entity Description\",\n      \"category\": \"Category\",\n      \"metadata\": { \"key\": \"value\" },\n      \"description_embedding\": [1.2, 3.4, 5.6],\n      \"chunk_ids\": [\"chunk_id1\", \"chunk_id2\"],\n      \"parent_id\": \"parent_entity_id\"\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/documents/document_id/entities\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 11. Get Document Relationships\n\n```http\nGET /v3/documents/:id/relationships\n```\n\n**Description:**\nRetrieves relationships extracted from the specified document.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                |\n| :-------- | :----- | :------ | :------------------------- |\n| `id`      | `string` | Yes      | The Document ID.           |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"subject\": \"John Doe\",\n      \"predicate\": \"WorksAt\",\n      \"object\": \"OpenAI\",\n      \"id\": \"relationship_id\",\n      \"description\": \"John Doe works at OpenAI.\",\n      \"subject_id\": \"entity_id1\",\n      \"object_id\": \"entity_id2\",\n      \"weight\": 1.1,\n      \"chunk_ids\": [\"chunk_id1\", \"chunk_id2\"],\n      \"parent_id\": \"parent_relationship_id\",\n      \"description_embedding\": [1.1, 2.2, 3.3],\n      \"metadata\": { \"department\": \"Research\" }\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/documents/document_id/relationships\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n## Chunks\n\n### Overview\n\nA **Chunk** in R2R represents a processed segment of text derived from a parent Document. Chunks are optimized for semantic retrieval, knowledge graph construction, and vector-based operations. Each chunk contains text content, metadata, and optional vector embeddings, facilitating efficient search and analysis.\n\n### Core Features of Chunks\n\n1. **Semantic Retrieval & Search**\n    - Enables semantic similarity searches across document contents.\n    - Supports vector-based retrieval methods.\n\n2. **Knowledge Graph Integration**\n    - Serves as the basis for extracting and linking Entities and Relationships.\n    - Facilitates retrieval-augmented generation (RAG) operations.\n\n3. **Metadata Management**\n    - Stores additional information and custom fields for enhanced filtering and organization.\n\n### Available Endpoints\n\n| Method | Endpoint                     | Description                                                           |\n| :---- | :--------------------------- | :-------------------------------------------------------------------- |\n| GET    | `/chunks`                   | List chunks with pagination and filtering options                     |\n| POST   | `/chunks/search`            | Perform semantic search across chunks with complex filtering          |\n| GET    | `/chunks/{id}`              | Retrieve a specific chunk by ID                                       |\n| POST   | `/chunks/{id}`              | Update an existing chunk’s content or metadata                        |\n| DELETE | `/chunks/{id}`              | Delete a specific chunk                                               |\n\n### Endpoint Details\n\n#### 1. List Chunks\n\n```http\nGET /v3/chunks\n```\n\n**Description:**\nLists chunks with pagination, optionally filtering by metadata or including vectors.\n\n**Query Parameters:**\n\n| Parameter         | Type      | Required | Description                                      |\n| :---------------- | :-------- | :------ | :----------------------------------------------- |\n| `metadata_filter`  | `string` | No      | Filter chunks based on metadata fields.          |\n| `include_vectors`  | `boolean`| No      | Include vector embeddings in the response (`true` or `false`). |\n| `offset`           | `integer`| No      | Number of chunks to skip. Defaults to `0`.        |\n| `limit`            | `integer`| No      | Number of chunks to return (`1–100`). Defaults to `100`. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"id\",\n      \"document_id\": \"document_id\",\n      \"owner_id\": \"owner_id\",\n      \"collection_ids\": [\"collection_ids\"],\n      \"text\": \"text\",\n      \"metadata\": { \"key\": \"value\" },\n      \"vector\": [1.1, 2.2, 3.3]\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/chunks?limit=10&include_vectors=true\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 2. Search Chunks\n\n```http\nPOST /v3/chunks/search\n```\n\n**Description:**\nPerforms a semantic search query over all stored chunks. This endpoint allows for complex filtering of search results using PostgreSQL-based queries, supporting various operators and advanced search configurations.\n\n**Allowed Operators:**\n\n- `eq`: Equals\n- `neq`: Not equals\n- `gt`: Greater than\n- `gte`: Greater than or equal\n- `lt`: Less than\n- `lte`: Less than or equal\n- `like`: Pattern matching\n- `ilike`: Case-insensitive pattern matching\n- `in`: In list\n- `nin`: Not in list\n\n**Request Body:**\n\nA JSON object containing the search query and optional search settings.\n\n**Example Request Body:**\n\n```json\n{\n  \"query\": \"Find documents related to machine learning\",\n  \"search_settings\": {\n    \"use_semantic_search\": true,\n    \"filters\": {\n      \"document_type\": { \"$eq\": \"pdf\" }\n    },\n    \"limit\": 20\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"chunk-id\",\n      \"document_id\": \"document_id\",\n      \"collection_ids\": [\"collection_id1\", \"collection_id2\"],\n      \"score\": 0.95,\n      \"text\": \"Relevant chunk text.\",\n      \"metadata\": { \"title\": \"example.pdf\" },\n      \"owner_id\": \"owner_id\"\n    }\n  ]\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/chunks/search\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"query\": \"machine learning\",\n           \"search_settings\": {\n             \"use_semantic_search\": true,\n             \"filters\": { \"document_type\": { \"$eq\": \"pdf\" } },\n             \"limit\": 10\n           }\n         }'\n```\n\n---\n\n#### 3. Retrieve a Chunk\n\n```http\nGET /v3/chunks/:id\n```\n\n**Description:**\nRetrieves a specific chunk by its ID, including its content, metadata, and associated document/collection information.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description           |\n| :-------- | :----- | :------ | :-------------------- |\n| `id`      | `string` | Yes      | The Chunk ID to retrieve. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"chunk-id\",\n    \"document_id\": \"document-id\",\n    \"owner_id\": \"owner-id\",\n    \"collection_ids\": [\"collection-id\"],\n    \"text\": \"Chunk content\",\n    \"metadata\": { \"key\": \"value\" },\n    \"vector\": [1.1, 2.2, 3.3]\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/chunks/chunk_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 4. Update Chunk\n\n```http\nPOST /v3/chunks/:id\n```\n\n**Description:**\nUpdates an existing chunk’s content and/or metadata. Upon updating, the chunk’s vectors are automatically recomputed based on the new content.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description           |\n| :-------- | :----- | :------ | :-------------------- |\n| `id`      | `string` | Yes      | The Chunk ID to update. |\n\n**Request Body:**\n\nA JSON object containing the updated chunk details.\n\n**Example Request Body:**\n\n```json\n{\n  \"id\": \"chunk-id\",\n  \"text\": \"Updated chunk content.\",\n  \"metadata\": { \"newKey\": \"newValue\" }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"chunk-id\",\n    \"document_id\": \"document-id\",\n    \"owner_id\": \"owner-id\",\n    \"collection_ids\": [\"collection-id\"],\n    \"text\": \"Updated chunk content.\",\n    \"metadata\": { \"newKey\": \"newValue\" },\n    \"vector\": [4.4, 5.5, 6.6]\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/chunks/chunk_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"id\": \"chunk_id\",\n           \"text\": \"Updated chunk content.\",\n           \"metadata\": { \"newKey\": \"newValue\" }\n         }'\n```\n\n---\n\n#### 5. Delete Chunk\n\n```http\nDELETE /v3/chunks/:id\n```\n\n**Description:**\nDeletes a specific chunk by its ID. The parent document remains intact.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description           |\n| :-------- | :----- | :------ | :-------------------- |\n| `id`      | `string` | Yes      | The Chunk ID to delete. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"success\": true\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X DELETE \"https://api.example.com/v3/chunks/chunk_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n## Graphs\n\n### Overview\n\nA **Graph** in R2R is a knowledge graph associated with a specific **Collection**. It comprises **Entities**, **Relationships**, and **Communities** (groupings of related entities). Graphs facilitate the organization and retrieval of interconnected information, enabling advanced data analysis and exploration.\n\n### Core Features of Graphs\n\n1. **Git-like Model**\n    - Each Collection has an associated Graph that can diverge independently.\n    - The `pull` operation syncs document knowledge into the graph.\n    - Changes can be experimental without affecting the base Collection and underlying documents.\n\n2. **Knowledge Organization**\n    - Automatic entity and relationship extraction from documents.\n    - Community detection for hierarchical knowledge organization.\n    - Support for manual creation and editing of entities, relationships, and communities.\n    - Rich metadata and property management.\n\n3. **Access Control**\n    - Graph operations are tied to Collection permissions.\n    - Superuser privileges required for certain operations like community building.\n    - Document-level access checks when pulling content.\n\n### Available Endpoints\n\n| Method | Endpoint                                 | Description                                  |\n| :---- | :--------------------------------------- | :------------------------------------------- |\n| GET    | `/graphs/{collection_id}`                | Get graph details                           |\n| POST   | `/graphs/{collection_id}/pull`           | Sync documents with graph                   |\n| POST   | `/graphs/{collection_id}/communities/build` | Build graph communities                 |\n| POST   | `/graphs/{collection_id}/reset`          | Reset graph to initial state                |\n| GET    | `/graphs/{collection_id}/entities`                 | List entities                                |\n| POST   | `/graphs/{collection_id}/entities`                 | Create entity                                |\n| GET    | `/graphs/{collection_id}/entities/{entity_id}`     | Get entity                                   |\n| POST   | `/graphs/{collection_id}/entities/{entity_id}`     | Update entity                                |\n| DELETE | `/graphs/{collection_id}/entities/{entity_id}`     | Delete entity                                |\n| GET    | `/graphs/{collection_id}/relationships`            | List relationships                           |\n| POST   | `/graphs/{collection_id}/relationships`            | Create relationship                          |\n| GET    | `/graphs/{collection_id}/relationships/{relationship_id}` | Get relationship                     |\n| POST   | `/graphs/{collection_id}/relationships/{relationship_id}` | Update relationship                  |\n| DELETE | `/graphs/{collection_id}/relationships/{relationship_id}` | Delete relationship                  |\n| GET    | `/graphs/{collection_id}/communities`               | List communities                             |\n| POST   | `/graphs/{collection_id}/communities`               | Create community                             |\n| GET    | `/graphs/{collection_id}/communities/{community_id}` | Get community                            |\n| POST   | `/graphs/{collection_id}/communities/{community_id}` | Update community                       |\n| DELETE | `/graphs/{collection_id}/communities/{community_id}` | Delete community                       |\n\n### Endpoint Details\n\n#### 1. List Graphs\n\n```http\nGET /v3/graphs\n```\n\n**Description:**\nReturns a paginated list of graphs accessible to the authenticated user. Filter by `collection_ids` if needed. Regular users see only their own collections' graphs, while superusers see all graphs.\n\n**Query Parameters:**\n\n| Parameter        | Type     | Required | Description                    |\n| :--------------- | :------- | :------ | :----------------------------- |\n| `collection_ids` | `string` | No      | Comma-separated list of collection IDs to filter graphs. |\n| `offset`         | `integer`| No      | Number of graphs to skip. Defaults to `0`. |\n| `limit`          | `integer`| No      | Number of graphs to return (`1–100`). Defaults to `100`. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"id\",\n      \"collection_id\": \"collection_id\",\n      \"name\": \"graph_name\",\n      \"status\": \"status\",\n      \"created_at\": \"2024-01-15T09:30:00Z\",\n      \"updated_at\": \"2024-01-15T09:30:00Z\",\n      \"document_ids\": [\"document_ids\"],\n      \"description\": \"description\"\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/graphs?limit=10\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 2. Retrieve Graph Details\n\n```http\nGET /v3/graphs/:collection_id\n```\n\n**Description:**\nRetrieves detailed information about a specific graph associated with a collection.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                        |\n| :------------- | :----- | :------ | :--------------------------------- |\n| `collection_id`| `string` | Yes      | The Collection ID associated with the graph. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"id\",\n    \"collection_id\": \"collection_id\",\n    \"name\": \"name\",\n    \"status\": \"status\",\n    \"created_at\": \"2024-01-15T09:30:00Z\",\n    \"updated_at\": \"2024-01-15T09:30:00Z\",\n    \"document_ids\": [\"document_ids\"],\n    \"description\": \"description\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/graphs/collection_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 3. Update Graph\n\n```http\nPOST /v3/graphs/:collection_id\n```\n\n**Description:**\nUpdates the configuration of a specific graph, including its name and description.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                        |\n| :------------- | :----- | :------ | :--------------------------------- |\n| `collection_id`| `string` | Yes      | The Collection ID associated with the graph. |\n\n**Request Body:**\n\nA JSON object containing the updated graph details.\n\n**Example Request Body:**\n\n```json\n{\n  \"name\": \"new-name\",\n  \"description\": \"updated description\"\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"success\": true\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/graphs/collection_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"name\": \"new-name\",\n           \"description\": \"updated description\"\n         }'\n```\n\n---\n\n#### 4. Reset Graph\n\n```http\nPOST /v3/graphs/:collection_id/reset\n```\n\n**Description:**\nResets the graph to its initial state by deleting all associated data. This action does **not** delete the underlying source documents.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                        |\n| :------------- | :----- | :------ | :--------------------------------- |\n| `collection_id`| `string` | Yes      | The Collection ID associated with the graph. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"success\": true\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/graphs/collection_id/reset\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 5. Pull Latest Entities to Graph\n\n```http\nPOST /v3/graphs/:collection_id/pull\n```\n\n**Description:**\nSynchronizes document entities and relationships into the graph, ensuring the graph reflects the latest document data.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                        |\n| :------------- | :----- | :------ | :--------------------------------- |\n| `collection_id`| `string` | Yes      | The Collection ID associated with the graph. |\n\n**Request Body:**\n\nOptional boolean parameters to control the pull operation.\n\n**Example Request Body:**\n\n```json\n{\n  \"force\": true\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"success\": true\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/graphs/collection_id/pull\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -d '{\"force\": true}'\n```\n\n---\n\n## Entities\n\n### Overview\n\n**Entities** are the fundamental building blocks of a knowledge graph in R2R. They represent distinct concepts, objects, or individuals extracted from documents. Entities are linked through **Relationships**, forming a comprehensive network of interconnected information.\n\n### Core Features of Entities\n\n1. **Extraction & Creation**\n    - Automatically extracted from document chunks.\n    - Manual creation and editing through API endpoints.\n\n2. **Metadata Management**\n    - Stores detailed metadata for each entity.\n    - Supports categorization and classification.\n\n3. **Relationship Linking**\n    - Connected to other entities via Relationships.\n    - Facilitates multi-hop traversal and semantic queries.\n\n### Available Endpoints\n\n| Method | Endpoint                                   | Description                           |\n| :---- | :----------------------------------------- | :------------------------------------ |\n| GET    | `/graphs/{collection_id}/entities`         | List entities                         |\n| POST   | `/graphs/{collection_id}/entities`         | Create entity                         |\n| GET    | `/graphs/{collection_id}/entities/{entity_id}` | Get entity                      |\n| POST   | `/graphs/{collection_id}/entities/{entity_id}` | Update entity                  |\n| DELETE | `/graphs/{collection_id}/entities/{entity_id}` | Delete entity                  |\n\n### Endpoint Details\n\n#### 1. List Entities in a Graph\n\n```http\nGET /v3/graphs/:collection_id/entities\n```\n\n**Description:**\nLists all entities within a specific graph, supporting pagination.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                        |\n| :------------- | :----- | :------ | :--------------------------------- |\n| `collection_id`| `string` | Yes      | The Collection ID associated with the graph. |\n\n**Query Parameters:**\n\n| Parameter | Type      | Required | Description                    |\n| :-------- | :-------- | :------ | :----------------------------- |\n| `offset`  | `integer` | No      | Number of entities to skip. Defaults to `0`. |\n| `limit`   | `integer` | No      | Number of entities to return (`1–100`). Defaults to `100`. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"entity_id\",\n      \"name\": \"Entity Name\",\n      \"description\": \"Entity Description\",\n      \"category\": \"Category\",\n      \"metadata\": { \"key\": \"value\" },\n      \"description_embedding\": [1.2, 3.4, 5.6],\n      \"chunk_ids\": [\"chunk_id1\", \"chunk_id2\"],\n      \"parent_id\": \"parent_entity_id\"\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/graphs/collection_id/entities?limit=10\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 2. Create Entity in Graph\n\n```http\nPOST /v3/graphs/:collection_id/entities\n```\n\n**Description:**\nCreates a new entity within a specified graph.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                        |\n| :------------- | :----- | :------ | :--------------------------------- |\n| `collection_id`| `string` | Yes      | The Collection ID associated with the graph. |\n\n**Request Body:**\n\nA JSON object containing the details of the entity to be created.\n\n**Example Request Body:**\n\n```json\n{\n  \"name\": \"John Doe\",\n  \"description\": \"A software engineer.\",\n  \"category\": \"Person\",\n  \"metadata\": {\n    \"role\": \"Developer\"\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"entity_id\",\n    \"name\": \"John Doe\",\n    \"description\": \"A software engineer.\",\n    \"category\": \"Person\",\n    \"metadata\": {\n      \"role\": \"Developer\"\n    },\n    \"description_embedding\": [1.2, 3.4, 5.6],\n    \"chunk_ids\": [\"chunk_id1\", \"chunk_id2\"],\n    \"parent_id\": \"parent_entity_id\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/graphs/collection_id/entities\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"name\": \"John Doe\",\n           \"description\": \"A software engineer.\",\n           \"category\": \"Person\",\n           \"metadata\": { \"role\": \"Developer\" }\n         }'\n```\n\n---\n\n#### 3. Get Entity\n\n```http\nGET /v3/graphs/:collection_id/entities/:entity_id\n```\n\n**Description:**\nRetrieves detailed information about a specific entity within a graph.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                                |\n| :------------- | :----- | :------ | :----------------------------------------- |\n| `collection_id`| `string` | Yes      | The Collection ID associated with the graph. |\n| `entity_id`     | `string` | Yes      | The Entity ID to retrieve.                  |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"entity_id\",\n    \"name\": \"John Doe\",\n    \"description\": \"A software engineer.\",\n    \"category\": \"Person\",\n    \"metadata\": {\n      \"role\": \"Developer\"\n    },\n    \"description_embedding\": [1.2, 3.4, 5.6],\n    \"chunk_ids\": [\"chunk_id1\", \"chunk_id2\"],\n    \"parent_id\": \"parent_entity_id\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/graphs/collection_id/entities/entity_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 4. Update Entity\n\n```http\nPOST /v3/graphs/:collection_id/entities/:entity_id\n```\n\n**Description:**\nUpdates the details of an existing entity within a graph.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                                |\n| :------------- | :----- | :------ | :----------------------------------------- |\n| `collection_id`| `string` | Yes      | The Collection ID associated with the graph. |\n| `entity_id`     | `string` | Yes      | The Entity ID to update.                   |\n\n**Request Body:**\n\nA JSON object containing the updated details of the entity.\n\n**Example Request Body:**\n\n```json\n{\n  \"name\": \"Jane Doe\",\n  \"description\": \"A senior software engineer.\",\n  \"category\": \"Person\",\n  \"metadata\": {\n    \"role\": \"Lead Developer\"\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"entity_id\",\n    \"name\": \"Jane Doe\",\n    \"description\": \"A senior software engineer.\",\n    \"category\": \"Person\",\n    \"metadata\": {\n      \"role\": \"Lead Developer\"\n    },\n    \"description_embedding\": [2.3, 4.5, 6.7],\n    \"chunk_ids\": [\"chunk_id3\", \"chunk_id4\"],\n    \"parent_id\": \"parent_entity_id\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/graphs/collection_id/entities/entity_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"name\": \"Jane Doe\",\n           \"description\": \"A senior software engineer.\",\n           \"category\": \"Person\",\n           \"metadata\": { \"role\": \"Lead Developer\" }\n         }'\n```\n\n---\n\n#### 5. Delete Entity\n\n```http\nDELETE /v3/graphs/:collection_id/entities/:entity_id\n```\n\n**Description:**\nDeletes a specific entity from the graph.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                                |\n| :------------- | :----- | :------ | :----------------------------------------- |\n| `collection_id`| `string` | Yes      | The Collection ID associated with the graph. |\n| `entity_id`     | `string` | Yes      | The Entity ID to delete.                   |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"success\": true\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X DELETE \"https://api.example.com/v3/graphs/collection_id/entities/entity_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n## Relationships\n\n### Overview\n\n**Relationships** define the connections between **Entities** within a graph, establishing how different entities relate to one another. They are pivotal for understanding the structure and interconnections within your knowledge graph, enabling complex queries and insights.\n\n### Core Features of Relationships\n\n1. **Connection Building**\n    - Links between entities to represent interactions, hierarchies, or associations.\n\n2. **Metadata and Weighting**\n    - Stores additional information and weightings to signify the strength or importance of the relationship.\n\n3. **Semantic Navigation**\n    - Facilitates multi-hop traversal and semantic queries within the graph.\n\n### Available Endpoints\n\n| Method | Endpoint                                      | Description                                    |\n| :---- | :-------------------------------------------- | :--------------------------------------------- |\n| GET    | `/graphs/{collection_id}/relationships`       | List relationships                            |\n| POST   | `/graphs/{collection_id}/relationships`       | Create relationship                           |\n| GET    | `/graphs/{collection_id}/relationships/{relationship_id}` | Get relationship                  |\n| POST   | `/graphs/{collection_id}/relationships/{relationship_id}` | Update relationship           |\n| DELETE | `/graphs/{collection_id}/relationships/{relationship_id}` | Delete relationship           |\n\n### Endpoint Details\n\n#### 1. List Relationships\n\n```http\nGET /v3/graphs/:collection_id/relationships\n```\n\n**Description:**\nLists all relationships within a specific graph, supporting pagination.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                        |\n| :------------- | :----- | :------ | :--------------------------------- |\n| `collection_id`| `string` | Yes      | The Collection ID associated with the graph. |\n\n**Query Parameters:**\n\n| Parameter | Type      | Required | Description                    |\n| :-------- | :-------- | :------ | :----------------------------- |\n| `offset`  | `integer` | No      | Number of relationships to skip. Defaults to `0`. |\n| `limit`   | `integer` | No      | Number of relationships to return (`1–100`). Defaults to `100`. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"subject\": \"John Doe\",\n      \"predicate\": \"WorksAt\",\n      \"object\": \"OpenAI\",\n      \"id\": \"relationship_id\",\n      \"description\": \"John Doe works at OpenAI.\",\n      \"subject_id\": \"entity_id1\",\n      \"object_id\": \"entity_id2\",\n      \"weight\": 1.1,\n      \"chunk_ids\": [\"chunk_id1\", \"chunk_id2\"],\n      \"parent_id\": \"parent_relationship_id\",\n      \"description_embedding\": [1.1, 2.2, 3.3],\n      \"metadata\": { \"department\": \"Research\" }\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/graphs/collection_id/relationships?limit=10\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 2. Create Relationship\n\n```http\nPOST /v3/graphs/:collection_id/relationships\n```\n\n**Description:**\nCreates a new relationship within a specified graph, linking two entities.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                        |\n| :------------- | :----- | :------ | :--------------------------------- |\n| `collection_id`| `string` | Yes      | The Collection ID associated with the graph. |\n\n**Request Body:**\n\nA JSON object containing the details of the relationship to be created.\n\n**Example Request Body:**\n\n```json\n{\n  \"subject\": \"John Doe\",\n  \"subject_id\": \"entity_id1\",\n  \"predicate\": \"WorksAt\",\n  \"object\": \"OpenAI\",\n  \"object_id\": \"entity_id2\",\n  \"description\": \"John Doe works at OpenAI.\",\n  \"weight\": 1.1,\n  \"metadata\": {\n    \"department\": \"Research\"\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"subject\": \"John Doe\",\n    \"predicate\": \"WorksAt\",\n    \"object\": \"OpenAI\",\n    \"id\": \"relationship_id\",\n    \"description\": \"John Doe works at OpenAI.\",\n    \"subject_id\": \"entity_id1\",\n    \"object_id\": \"entity_id2\",\n    \"weight\": 1.1,\n    \"chunk_ids\": [\"chunk_id1\", \"chunk_id2\"],\n    \"parent_id\": \"parent_relationship_id\",\n    \"description_embedding\": [1.1, 2.2, 3.3],\n    \"metadata\": {\n      \"department\": \"Research\"\n    }\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/graphs/collection_id/relationships\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"subject\": \"John Doe\",\n           \"subject_id\": \"entity_id1\",\n           \"predicate\": \"WorksAt\",\n           \"object\": \"OpenAI\",\n           \"object_id\": \"entity_id2\",\n           \"description\": \"John Doe works at OpenAI.\",\n           \"weight\": 1.1,\n           \"metadata\": { \"department\": \"Research\" }\n         }'\n```\n\n---\n\n#### 3. Get Relationship\n\n```http\nGET /v3/graphs/:collection_id/relationships/:relationship_id\n```\n\n**Description:**\nRetrieves detailed information about a specific relationship within a graph.\n\n**Path Parameters:**\n\n| Parameter          | Type   | Required | Description                                |\n| :----------------- | :----- | :------ | :----------------------------------------- |\n| `collection_id`    | `string` | Yes      | The Collection ID associated with the graph. |\n| `relationship_id`  | `string` | Yes      | The Relationship ID to retrieve.           |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"subject\": \"John Doe\",\n    \"predicate\": \"WorksAt\",\n    \"object\": \"OpenAI\",\n    \"id\": \"relationship_id\",\n    \"description\": \"John Doe works at OpenAI.\",\n    \"subject_id\": \"entity_id1\",\n    \"object_id\": \"entity_id2\",\n    \"weight\": 1.1,\n    \"chunk_ids\": [\"chunk_id1\", \"chunk_id2\"],\n    \"parent_id\": \"parent_relationship_id\",\n    \"description_embedding\": [1.1, 2.2, 3.3],\n    \"metadata\": {\n      \"department\": \"Research\"\n    }\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/graphs/collection_id/relationships/relationship_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 4. Update Relationship\n\n```http\nPOST /v3/graphs/:collection_id/relationships/:relationship_id\n```\n\n**Description:**\nUpdates the details of an existing relationship within a graph.\n\n**Path Parameters:**\n\n| Parameter          | Type   | Required | Description                                |\n| :----------------- | :----- | :------ | :----------------------------------------- |\n| `collection_id`    | `string` | Yes      | The Collection ID associated with the graph. |\n| `relationship_id`  | `string` | Yes      | The Relationship ID to update.             |\n\n**Request Body:**\n\nA JSON object containing the updated details of the relationship.\n\n**Example Request Body:**\n\n```json\n{\n  \"subject\": \"Jane Doe\",\n  \"subject_id\": \"entity_id3\",\n  \"predicate\": \"CollaboratesWith\",\n  \"object\": \"OpenAI Research\",\n  \"object_id\": \"entity_id4\",\n  \"description\": \"Jane Doe collaborates with OpenAI Research.\",\n  \"weight\": 2.0,\n  \"metadata\": {\n    \"project\": \"AI Development\"\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"subject\": \"Jane Doe\",\n    \"predicate\": \"CollaboratesWith\",\n    \"object\": \"OpenAI Research\",\n    \"id\": \"relationship_id\",\n    \"description\": \"Jane Doe collaborates with OpenAI Research.\",\n    \"subject_id\": \"entity_id3\",\n    \"object_id\": \"entity_id4\",\n    \"weight\": 2.0,\n    \"chunk_ids\": [\"chunk_id3\", \"chunk_id4\"],\n    \"parent_id\": \"parent_relationship_id\",\n    \"description_embedding\": [2.2, 4.4, 6.6],\n    \"metadata\": {\n      \"project\": \"AI Development\"\n    }\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/graphs/collection_id/relationships/relationship_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"subject\": \"Jane Doe\",\n           \"subject_id\": \"entity_id3\",\n           \"predicate\": \"CollaboratesWith\",\n           \"object\": \"OpenAI Research\",\n           \"object_id\": \"entity_id4\",\n           \"description\": \"Jane Doe collaborates with OpenAI Research.\",\n           \"weight\": 2.0,\n           \"metadata\": { \"project\": \"AI Development\" }\n         }'\n```\n\n---\n\n#### 5. Delete Relationship\n\n```http\nDELETE /v3/graphs/:collection_id/relationships/:relationship_id\n```\n\n**Description:**\nDeletes a specific relationship from the graph.\n\n**Path Parameters:**\n\n| Parameter          | Type   | Required | Description                                |\n| :----------------- | :----- | :------ | :----------------------------------------- |\n| `collection_id`    | `string` | Yes      | The Collection ID associated with the graph. |\n| `relationship_id`  | `string` | Yes      | The Relationship ID to delete.             |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"success\": true\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X DELETE \"https://api.example.com/v3/graphs/collection_id/relationships/relationship_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n## Communities\n\n### Overview\n\n**Communities** are clusters of related **Entities** within a graph, representing groupings of interconnected information. They are generated through clustering algorithms and can be manually managed to reflect domain-specific knowledge structures.\n\n### Core Features of Communities\n\n1. **Automatic Generation**\n    - Built using clustering algorithms based on entity relationships and similarities.\n\n2. **Manual Management**\n    - Allows manual creation, editing, and deletion of communities to reflect specific organizational needs.\n\n3. **Hierarchical Organization**\n    - Supports hierarchical structures, enabling nested communities for detailed knowledge organization.\n\n4. **Metadata Integration**\n    - Stores metadata and descriptions for each community, facilitating better understanding and navigation.\n\n### Available Endpoints\n\n| Method | Endpoint                                      | Description                                         |\n| :---- | :-------------------------------------------- | :-------------------------------------------------- |\n| POST   | `/graphs/{collection_id}/communities/build`   | Build communities from existing graph data          |\n| GET    | `/graphs/{collection_id}/communities`         | List communities                                    |\n| POST   | `/graphs/{collection_id}/communities`         | Create community                                    |\n| GET    | `/graphs/{collection_id}/communities/{community_id}` | Get community                             |\n| POST   | `/graphs/{collection_id}/communities/{community_id}` | Update community                        |\n| DELETE | `/graphs/{collection_id}/communities/{community_id}` | Delete community                        |\n\n### Endpoint Details\n\n#### 1. Build Communities\n\n```http\nPOST /v3/graphs/:collection_id/communities/build\n```\n\n**Description:**\nBuilds communities within the graph by analyzing entity relationships and similarities. This process utilizes clustering algorithms to identify and group related entities.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                        |\n| :------------- | :----- | :------ | :--------------------------------- |\n| `collection_id`| `string` | Yes      | The Collection ID associated with the graph. |\n\n**Request Body:**\n\nA JSON object containing settings for the community building process.\n\n**Example Request Body:**\n\n```json\n{\n  \"run_type\": \"run\",\n  \"graph_enrichment_settings\": {\n    \"algorithm\": \"Leiden\",\n    \"parameters\": {\n      \"resolution\": 1.0\n    }\n  },\n  \"run_with_orchestration\": true\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"success\": true\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/graphs/collection_id/communities/build\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"run_type\": \"run\",\n           \"graph_enrichment_settings\": { \"algorithm\": \"Leiden\", \"parameters\": { \"resolution\": 1.0 } },\n           \"run_with_orchestration\": true\n         }'\n```\n\n---\n\n#### 2. List Communities\n\n```http\nGET /v3/graphs/:collection_id/communities\n```\n\n**Description:**\nLists all communities within a specific graph, supporting pagination.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                        |\n| :------------- | :----- | :------ | :--------------------------------- |\n| `collection_id`| `string` | Yes      | The Collection ID associated with the graph. |\n\n**Query Parameters:**\n\n| Parameter | Type      | Required | Description                    |\n| :-------- | :-------- | :------ | :----------------------------- |\n| `offset`  | `integer` | No      | Number of communities to skip. Defaults to `0`. |\n| `limit`   | `integer` | No      | Number of communities to return (`1–100`). Defaults to `100`. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"name\": \"AI Researchers\",\n      \"summary\": \"Community of AI researchers focused on machine learning.\",\n      \"level\": 1,\n      \"findings\": [\"Research papers\", \"Collaborative projects\"],\n      \"id\": 1,\n      \"community_id\": \"community_id\",\n      \"collection_id\": \"collection_id\",\n      \"rating\": 9.5,\n      \"rating_explanation\": \"High engagement and output.\",\n      \"description_embedding\": [2.2, 4.4, 6.6],\n      \"attributes\": { \"key\": \"value\" },\n      \"created_at\": \"2024-01-15T09:30:00Z\",\n      \"updated_at\": \"2024-01-15T09:30:00Z\"\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/graphs/collection_id/communities?limit=10\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 3. Create Community\n\n```http\nPOST /v3/graphs/:collection_id/communities\n```\n\n**Description:**\nCreates a new community within a graph. While communities are typically built automatically via the `/communities/build` endpoint, this endpoint allows for manual creation to reflect specific organizational needs.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                        |\n| :------------- | :----- | :------ | :--------------------------------- |\n| `collection_id`| `string` | Yes      | The Collection ID associated with the graph. |\n\n**Request Body:**\n\nA JSON object containing the details of the community to be created.\n\n**Example Request Body:**\n\n```json\n{\n  \"name\": \"AI Researchers\",\n  \"summary\": \"Community of AI researchers focused on machine learning.\",\n  \"findings\": [\"Research papers\", \"Collaborative projects\"],\n  \"rating\": 9.5,\n  \"rating_explanation\": \"High engagement and output.\"\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"name\": \"AI Researchers\",\n    \"summary\": \"Community of AI researchers focused on machine learning.\",\n    \"level\": 1,\n    \"findings\": [\"Research papers\", \"Collaborative projects\"],\n    \"id\": 1,\n    \"community_id\": \"community_id\",\n    \"collection_id\": \"collection_id\",\n    \"rating\": 9.5,\n    \"rating_explanation\": \"High engagement and output.\",\n    \"description_embedding\": [2.2, 4.4, 6.6],\n    \"attributes\": { \"key\": \"value\" },\n    \"created_at\": \"2024-01-15T09:30:00Z\",\n    \"updated_at\": \"2024-01-15T09:30:00Z\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/graphs/collection_id/communities\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"name\": \"AI Researchers\",\n           \"summary\": \"Community of AI researchers focused on machine learning.\",\n           \"findings\": [\"Research papers\", \"Collaborative projects\"],\n           \"rating\": 9.5,\n           \"rating_explanation\": \"High engagement and output.\"\n         }'\n```\n\n---\n\n#### 4. Get Community\n\n```http\nGET /v3/graphs/:collection_id/communities/:community_id\n```\n\n**Description:**\nRetrieves detailed information about a specific community within a graph.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                                |\n| :------------- | :----- | :------ | :----------------------------------------- |\n| `collection_id`| `string` | Yes      | The Collection ID associated with the graph. |\n| `community_id` | `string` | Yes      | The Community ID to retrieve.              |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"name\": \"AI Researchers\",\n    \"summary\": \"Community of AI researchers focused on machine learning.\",\n    \"level\": 1,\n    \"findings\": [\"Research papers\", \"Collaborative projects\"],\n    \"id\": 1,\n    \"community_id\": \"community_id\",\n    \"collection_id\": \"collection_id\",\n    \"rating\": 9.5,\n    \"rating_explanation\": \"High engagement and output.\",\n    \"description_embedding\": [2.2, 4.4, 6.6],\n    \"attributes\": { \"key\": \"value\" },\n    \"created_at\": \"2024-01-15T09:30:00Z\",\n    \"updated_at\": \"2024-02-20T10:45:00Z\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/graphs/collection_id/communities/community_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 5. Update Community\n\n```http\nPOST /v3/graphs/:collection_id/communities/:community_id\n```\n\n**Description:**\nUpdates the details of an existing community within a graph.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                                |\n| :------------- | :----- | :------ | :----------------------------------------- |\n| `collection_id`| `string` | Yes      | The Collection ID associated with the graph. |\n| `community_id` | `string` | Yes      | The Community ID to update.                |\n\n**Request Body:**\n\nA JSON object containing the updated details of the community.\n\n**Example Request Body:**\n\n```json\n{\n  \"name\": \"Senior AI Researchers\",\n  \"summary\": \"Community of senior AI researchers with a focus on deep learning.\",\n  \"findings\": [\"Advanced research papers\", \"International collaborations\"],\n  \"rating\": 9.8,\n  \"rating_explanation\": \"Exceptional contribution and leadership.\"\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"name\": \"Senior AI Researchers\",\n    \"summary\": \"Community of senior AI researchers with a focus on deep learning.\",\n    \"level\": 2,\n    \"findings\": [\"Advanced research papers\", \"International collaborations\"],\n    \"id\": 1,\n    \"community_id\": \"community_id\",\n    \"collection_id\": \"collection_id\",\n    \"rating\": 9.8,\n    \"rating_explanation\": \"Exceptional contribution and leadership.\",\n    \"description_embedding\": [3.3, 6.6, 9.9],\n    \"attributes\": { \"key\": \"new_value\" },\n    \"created_at\": \"2024-01-15T09:30:00Z\",\n    \"updated_at\": \"2024-02-20T10:45:00Z\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/graphs/collection_id/communities/community_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"name\": \"Senior AI Researchers\",\n           \"summary\": \"Community of senior AI researchers with a focus on deep learning.\",\n           \"findings\": [\"Advanced research papers\", \"International collaborations\"],\n           \"rating\": 9.8,\n           \"rating_explanation\": \"Exceptional contribution and leadership.\"\n         }'\n```\n\n---\n\n#### 6. Delete Community\n\n```http\nDELETE /v3/graphs/:collection_id/communities/:community_id\n```\n\n**Description:**\nDeletes a specific community from the graph.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                                |\n| :------------- | :----- | :------ | :----------------------------------------- |\n| `collection_id`| `string` | Yes      | The Collection ID associated with the graph. |\n| `community_id` | `string` | Yes      | The Community ID to delete.                |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"success\": true\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X DELETE \"https://api.example.com/v3/graphs/collection_id/communities/community_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n## Retrieval\n\n### Overview\n\nR2R’s **Retrieval** system offers advanced search and generation capabilities powered by vector search, knowledge graphs, and large language models (LLMs). The system provides multiple ways to interact with your data, including:\n\n- **Semantic Search**: Direct semantic similarity searches across documents and chunks.\n- **Retrieval-Augmented Generation (RAG)**: Combines retrieval with language model generation to produce informative responses grounded in your content.\n- **Conversational Agents**: Multi-turn conversational interfaces powered by RAG for complex queries.\n- **Completions**: Direct access to language model generation without retrieval.\n- **Embeddings**: Generate vector embeddings for provided text.\n\n### Core Features of Retrieval\n\n1. **Vector Search**\n    - Semantic similarity matching using document/chunk embeddings.\n    - Hybrid search combining vector and keyword approaches.\n    - Complex filtering with Postgres-style operators.\n    - Configurable search limits and thresholds.\n\n2. **Knowledge Graph Search**\n    - Entity and relationship-based retrieval.\n    - Multi-hop traversal for connected information.\n    - Local and global search strategies.\n    - Community-aware knowledge structures.\n\n3. **RAG Generation**\n    - Context-aware responses using retrieved content.\n    - Customizable generation parameters.\n    - Source attribution and citations.\n    - Streaming support for real-time responses.\n\n4. **RAG Agent**\n    - Multi-turn conversational capabilities.\n    - Complex query decomposition.\n    - Context maintenance across interactions.\n    - Branch management for conversation trees.\n\n5. **Completion**\n    - Direct access to language model generation capabilities.\n    - Supports both single-turn and multi-turn conversations.\n\n6. **Embeddings**\n    - Generate numerical embedding vectors for provided text using specified models.\n\n### Available Endpoints\n\n| Method | Endpoint                  | Description                                                                               |\n| :---- | :------------------------ | :---------------------------------------------------------------------------------------- |\n| POST   | `/retrieval/search`     | Perform semantic/hybrid/graph search.                                                     |\n| POST   | `/retrieval/rag`        | Generate RAG-based responses.                                                             |\n| POST   | `/retrieval/agent`      | Engage a RAG-powered conversational agent.                                                |\n| POST   | `/retrieval/completion` | Generate text completions using a language model.                                         |\n| POST   | `/retrieval/embedding`  | Generate embeddings for the provided text using a specified model.                        |\n\n### Endpoint Details\n\n#### 1. Search R2R\n\n```http\nPOST /v3/retrieval/search\n```\n\n**Description:**\nPerforms a search query against vector and/or graph-based databases, supporting various search modes and complex filtering.\n\n**Search Modes:**\n\n- `basic`: Defaults to semantic search. Simple and easy to use.\n- `advanced`: Combines semantic search with full-text search for more comprehensive results.\n- `custom`: Complete control over how search is performed. Provide a full `SearchSettings` object.\n\n**Note:**\nIf `filters` or `limit` are provided alongside `basic` or `advanced`, they will override the default settings for that mode.\n\n**Allowed Operators:**\n\n- `eq`: Equals\n- `neq`: Not equals\n- `gt`: Greater than\n- `gte`: Greater than or equal\n- `lt`: Less than\n- `lte`: Less than or equal\n- `like`: Pattern matching\n- `ilike`: Case-insensitive pattern matching\n- `in`: In list\n- `nin`: Not in list\n\n**Request Body:**\n\nA JSON object containing the search query and optional search settings.\n\n**Example Request Body:**\n\n```json\n{\n  \"query\": \"machine learning advancements\",\n  \"search_mode\": \"advanced\",\n  \"search_settings\": {\n    \"use_semantic_search\": true,\n    \"use_fulltext_search\": true,\n    \"filters\": { \"document_type\": { \"$eq\": \"pdf\" } },\n    \"limit\": 20\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"chunk_search_results\": [\n      {\n        \"id\": \"3f3d47f3-8baf-58eb-8bc2-0171fb1c6e09\",\n        \"document_id\": \"3e157b3a-8469-51db-90d9-52e7d896b49b\",\n        \"collection_ids\": [\"collection_id1\"],\n        \"score\": 0.23943702876567796,\n        \"text\": \"Example text from the document\",\n        \"metadata\": {\n          \"associated_query\": \"What is the capital of France?\",\n          \"title\": \"example_document.pdf\"\n        },\n        \"owner_id\": \"2acb499e-8428-543b-bd85-0d9098718220\"\n      }\n    ],\n    \"graph_search_results\": [\n      {\n        \"content\": {\n          \"name\": \"Entity Name\",\n          \"description\": \"Entity Description\",\n          \"metadata\": { \"key\": \"value\" }\n        },\n        \"result_type\": \"entity\",\n        \"chunk_ids\": [\"c68dc72e-fc23-5452-8f49-d7bd46088a96\"],\n        \"metadata\": {\n          \"associated_query\": \"What is the capital of France?\"\n        }\n      }\n    ]\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/retrieval/search\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"query\": \"machine learning advancements\",\n           \"search_mode\": \"advanced\",\n           \"search_settings\": {\n             \"use_semantic_search\": true,\n             \"use_fulltext_search\": true,\n             \"filters\": { \"document_type\": { \"$eq\": \"pdf\" } },\n             \"limit\": 20\n           }\n         }'\n```\n\n---\n\n#### 2. RAG Query\n\n```http\nPOST /v3/retrieval/rag\n```\n\n**Description:**\nExecutes a Retrieval-Augmented Generation (RAG) query. This endpoint combines search results with language model generation, allowing for context-based answers. It supports the same filtering capabilities as the search endpoint and can be customized using the `rag_generation_config` parameter.\n\n**Request Body:**\n\nA JSON object containing the query, search settings, and optional generation configurations.\n\n**Example Request Body:**\n\n```json\n{\n  \"query\": \"Latest trends in AI\",\n  \"search_mode\": \"custom\",\n  \"search_settings\": {\n    \"use_semantic_search\": true,\n    \"filters\": { \"publication_year\": { \"$gte\": 2020 } },\n    \"limit\": 5\n  },\n  \"rag_generation_config\": {\n    \"model\": \"gpt-4\",\n    \"temperature\": 0.7,\n    \"max_tokens\": 150\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"chunk_search_results\": [\n      {\n        \"id\": \"chunk_id\",\n        \"document_id\": \"document_id\",\n        \"collection_ids\": [\"collection_id1\"],\n        \"score\": 0.95,\n        \"text\": \"Latest trends in AI include deep learning advancements...\",\n        \"metadata\": {\n          \"associated_query\": \"Latest trends in AI\",\n          \"title\": \"ai_trends_2024.pdf\"\n        },\n        \"owner_id\": \"owner_id\"\n      }\n    ],\n    \"graph_search_results\": [\n      {\n        \"content\": {\n          \"name\": \"Deep Learning\",\n          \"description\": \"A subset of machine learning involving neural networks.\",\n          \"metadata\": { \"field\": \"Artificial Intelligence\" }\n        },\n        \"result_type\": \"entity\",\n        \"chunk_ids\": [\"chunk_id1\"],\n        \"metadata\": {\n          \"associated_query\": \"Latest trends in AI\"\n        }\n      }\n    ],\n    \"generated_answer\": \"Recent advancements in AI include the development of more efficient neural network architectures, improvements in reinforcement learning algorithms, and enhanced capabilities in natural language understanding and generation. These innovations are driving progress in various fields such as healthcare, autonomous vehicles, and personalized education.\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/retrieval/rag\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"query\": \"Latest trends in AI\",\n           \"search_mode\": \"custom\",\n           \"search_settings\": {\n             \"use_semantic_search\": true,\n             \"filters\": { \"publication_year\": { \"$gte\": 2020 } },\n             \"limit\": 5\n           },\n           \"rag_generation_config\": {\n             \"model\": \"gpt-4\",\n             \"temperature\": 0.7,\n             \"max_tokens\": 150\n           }\n         }'\n```\n\n---\n\n#### 3. RAG-powered Conversational Agent\n\n```http\nPOST /v3/retrieval/agent\n```\n\n**Description:**\nEngages with an intelligent RAG-powered conversational agent for complex information retrieval and analysis. This advanced endpoint combines retrieval-augmented generation (RAG) with a conversational AI agent to provide detailed, context-aware responses based on your document collection.\n\n**Key Features:**\n\n- Hybrid search combining vector and knowledge graph approaches.\n- Contextual conversation management with `conversation_id` tracking.\n- Customizable generation parameters for response style and length.\n- Source document citation with optional title inclusion.\n- Streaming support for real-time responses.\n- Branch management for exploring different conversation paths.\n\n**Use Cases:**\n\n- Research assistance and literature review.\n- Document analysis and summarization.\n- Technical support and troubleshooting.\n- Educational Q&A and tutoring.\n- Knowledge base exploration.\n\n**Request Body:**\n\nA JSON object containing the message, search settings, and optional conversation parameters.\n\n**Example Request Body:**\n\n```json\n{\n  \"message\": {\n    \"role\": \"user\",\n    \"content\": \"Can you summarize the latest AI research?\",\n    \"name\": \"User\"\n  },\n  \"search_mode\": \"advanced\",\n  \"search_settings\": {\n    \"use_semantic_search\": true,\n    \"use_fulltext_search\": true,\n    \"filters\": { \"publication_year\": { \"$gte\": 2023 } },\n    \"limit\": 3\n  },\n  \"conversation_id\": \"conversation_id\",\n  \"branch_id\": \"branch_id\"\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"messages\": [\n      {\n        \"role\": \"assistant\",\n        \"content\": \"Certainly! The latest AI research focuses on advancements in deep learning, reinforcement learning, and natural language processing. Notable projects include the development of more efficient neural network architectures and improved model interpretability techniques.\",\n        \"name\": \"Assistant\",\n        \"function_call\": {},\n        \"tool_calls\": [],\n        \"conversation_id\": \"conversation_id\",\n        \"branch_id\": \"branch_id\"\n      }\n    ]\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/retrieval/agent\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"message\": {\n             \"role\": \"user\",\n             \"content\": \"Can you summarize the latest AI research?\",\n             \"name\": \"User\"\n           },\n           \"search_mode\": \"advanced\",\n           \"search_settings\": {\n             \"use_semantic_search\": true,\n             \"use_fulltext_search\": true,\n             \"filters\": { \"publication_year\": { \"$gte\": 2023 } },\n             \"limit\": 3\n           },\n           \"conversation_id\": \"conversation_id\",\n           \"branch_id\": \"branch_id\"\n         }'\n```\n\n---\n\n#### 4. Generate Message Completions\n\n```http\nPOST /v3/retrieval/completion\n```\n\n**Description:**\nGenerates completions for a list of messages using the language model. The generation process can be customized using the `generation_config` parameter.\n\n**Request Body:**\n\nA JSON object containing the messages and optional generation configurations.\n\n**Example Request Body:**\n\n```json\n{\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Tell me about the advancements in AI.\"\n    }\n  ],\n  \"generation_config\": {\n    \"model\": \"gpt-4\",\n    \"temperature\": 0.7,\n    \"top_p\": 0.9,\n    \"max_tokens_to_sample\": 150,\n    \"stream\": false\n  },\n  \"response_model\": \"gpt-4\"\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"messages\": [\n      {\n        \"role\": \"assistant\",\n        \"content\": \"Recent advancements in AI include the development of more efficient neural network architectures, improvements in reinforcement learning algorithms, and enhanced capabilities in natural language understanding and generation. These innovations are driving progress in various fields such as healthcare, autonomous vehicles, and personalized education.\",\n        \"conversation_id\": \"conversation_id\",\n        \"branch_id\": \"branch_id\"\n      }\n    ]\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/retrieval/completion\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"messages\": [\n             {\n               \"role\": \"user\",\n               \"content\": \"Tell me about the advancements in AI.\"\n             }\n           ],\n           \"generation_config\": {\n             \"model\": \"gpt-4\",\n             \"temperature\": 0.7,\n             \"top_p\": 0.9,\n             \"max_tokens_to_sample\": 150,\n             \"stream\": false\n           },\n           \"response_model\": \"gpt-4\"\n         }'\n```\n\n---\n\n#### 5. Generate Embeddings\n\n```http\nPOST /v3/retrieval/embedding\n```\n\n**Description:**\nGenerates numerical embedding vectors for the provided text using a specified model.\n\n**Request Body:**\n\nA JSON object containing the text to generate embeddings for.\n\n**Example Request Body:**\n\n```json\n{\n  \"text\": \"Artificial Intelligence is transforming the world.\"\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"embeddings\": [0.123, 0.456, 0.789]\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/retrieval/embedding\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"text\": \"Artificial Intelligence is transforming the world.\"\n         }'\n```\n\n---\n\n## Indices\n\n### Overview\n\nAn **Index** in R2R represents a vector index structure optimized for similarity search operations across chunks or entities. Indices are crucial for efficient retrieval in Retrieval-Augmented Generation (RAG) applications, supporting various similarity measures and index types tailored to different use cases.\n\n### Core Features of Indices\n\n1. **Fast Similarity Search**\n    - Enables rapid retrieval of similar vectors based on specified measures.\n\n2. **Multiple Index Methods**\n    - Supports various indexing methods like Hierarchical Navigable Small World (HNSW) and Inverted File (IVF-Flat) for different performance and recall needs.\n\n3. **Configurable Similarity Measures**\n    - Allows selection of similarity measures such as cosine distance, L2 distance, and inner product distance.\n\n4. **Concurrent Index Building**\n    - Supports concurrent operations to prevent downtime during index construction.\n\n5. **Performance Optimization**\n    - Tailors indices for optimized vector operations and query performance.\n\n### Available Endpoints\n\n| Method | Endpoint            | Description                               |\n| :---- | :------------------ | :---------------------------------------- |\n| POST   | `/indices`          | Create a new vector index                 |\n| GET    | `/indices`          | List available indices with pagination    |\n| GET    | `/indices/{id}`     | Get details of a specific index           |\n| PUT    | `/indices/{id}`     | Update an existing index’s configuration  |\n| DELETE | `/indices/{id}`     | Delete an existing index                  |\n| GET    | `/indices/{table_name}/{index_name}` | Get vector index details  |\n| DELETE | `/indices/{table_name}/{index_name}` | Delete a vector index      |\n\n### Endpoint Details\n\n#### 1. List Vector Indices\n\n```http\nGET /v3/indices\n```\n\n**Description:**\nLists existing vector similarity search indices with pagination support. Returns details about each index including name, table name, indexing method, parameters, size, and performance statistics.\n\n**Query Parameters:**\n\n| Parameter | Type      | Required | Description                                       |\n| :-------- | :-------- | :------ | :------------------------------------------------ |\n| `filters` | `string` | No      | Filter based on table name, index method, etc.    |\n| `offset`  | `integer`| No      | Number of indices to skip. Defaults to `0`.        |\n| `limit`   | `integer`| No      | Number of indices to return (`1–100`). Defaults to `100`. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"indices\": [\n      {\n        \"id\": \"index_id\",\n        \"name\": \"ai_research_vectors\",\n        \"table_name\": \"vectors\",\n        \"index_method\": \"HNSW\",\n        \"index_measure\": \"cosine_distance\",\n        \"index_arguments\": {\n          \"m\": 16,\n          \"ef_construction\": 200,\n          \"ef\": 50\n        },\n        \"status\": \"active\",\n        \"size_in_bytes\": 500000000,\n        \"row_count\": 100000,\n        \"created_at\": \"2024-01-15T09:30:00Z\",\n        \"updated_at\": \"2024-01-15T09:30:00Z\",\n        \"performance_statistics\": {\n          \"average_query_time_ms\": 5,\n          \"memory_usage_mb\": 250,\n          \"cache_hit_rate_percent\": 90\n        }\n      }\n    ]\n  },\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/indices?limit=10\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 2. Create Vector Index\n\n```http\nPOST /v3/indices\n```\n\n**Description:**\nCreates a new vector similarity search index over the target table. Supported tables include `vectors`, `entity`, `document_collections`, etc. This process is resource-intensive and supports concurrent building to prevent downtime.\n\n**Supported Index Methods:**\n\n1. **HNSW (Hierarchical Navigable Small World)**\n    - **Best for:** High-dimensional vectors requiring fast approximate nearest neighbor search.\n    - **Pros:** Very fast search, good recall, memory-resident for speed.\n    - **Cons:** Slower index construction, higher memory usage.\n    - **Key Parameters:**\n        - `m`: Number of connections per layer (higher = better recall but more memory).\n        - `ef_construction`: Build-time search width (higher = better recall but slower build).\n        - `ef`: Query-time search width (higher = better recall but slower search).\n\n2. **IVF-Flat (Inverted File with Flat Storage)**\n    - **Best for:** Balance between build speed, search speed, and recall.\n    - **Pros:** Faster index construction, less memory usage.\n    - **Cons:** Slightly slower search than HNSW.\n    - **Key Parameters:**\n        - `lists`: Number of clusters (usually sqrt(n) where n is number of vectors).\n        - `probe`: Number of nearest clusters to search.\n\n**Supported Similarity Measures:**\n\n- `cosine_distance`: Best for comparing semantic similarity.\n- `l2_distance`: Best for comparing absolute distances.\n- `ip_distance`: Best for comparing raw dot products.\n\n**Notes:**\n\n- Index creation can be resource-intensive for large datasets.\n- Use `run_with_orchestration=true` for large indices to prevent timeouts.\n- The `concurrently` option allows other operations while building.\n- Index names must be unique per table.\n\n**Request Body:**\n\nA JSON object containing the configuration for the index.\n\n**Example Request Body:**\n\n```json\n{\n  \"config\": {\n    \"name\": \"ai_research_vectors\",\n    \"table_name\": \"vectors\",\n    \"index_method\": \"HNSW\",\n    \"index_measure\": \"cosine_distance\",\n    \"index_arguments\": {\n      \"m\": 16,\n      \"ef_construction\": 200,\n      \"ef\": 50\n    },\n    \"concurrently\": true,\n    \"run_with_orchestration\": true\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"message\": \"Index creation started.\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/indices\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"config\": {\n             \"name\": \"ai_research_vectors\",\n             \"table_name\": \"vectors\",\n             \"index_method\": \"HNSW\",\n             \"index_measure\": \"cosine_distance\",\n             \"index_arguments\": {\n               \"m\": 16,\n               \"ef_construction\": 200,\n               \"ef\": 50\n             },\n             \"concurrently\": true,\n             \"run_with_orchestration\": true\n           }\n         }'\n```\n\n---\n\n#### 3. Get Vector Index Details\n\n```http\nGET /v3/indices/:table_name/:index_name\n```\n\n**Description:**\nRetrieves detailed information about a specific vector index, including its configuration, size, performance statistics, and maintenance information.\n\n**Path Parameters:**\n\n| Parameter    | Type   | Required | Description                                     |\n| :----------: | :---- | :------ | :---------------------------------------------- |\n| `table_name` | `string` | Yes      | The table of vector embeddings (`vectors`, `entity`, `document_collections`). |\n| `index_name` | `string` | Yes      | The name of the index to retrieve details for.   |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"configuration\": {\n      \"method\": \"HNSW\",\n      \"measure\": \"cosine_distance\",\n      \"parameters\": {\n        \"m\": 16,\n        \"ef_construction\": 200,\n        \"ef\": 50\n      }\n    },\n    \"size_in_bytes\": 500000000,\n    \"row_count\": 100000,\n    \"build_progress\": \"Completed\",\n    \"performance_statistics\": {\n      \"average_query_time_ms\": 5,\n      \"memory_usage_mb\": 250,\n      \"cache_hit_rate_percent\": 90,\n      \"recent_query_patterns\": [\"nearest neighbor\", \"range search\"]\n    },\n    \"maintenance_information\": {\n      \"last_vacuum\": \"2024-02-01T10:00:00Z\",\n      \"fragmentation_level\": \"Low\",\n      \"recommended_optimizations\": [\"Increase ef parameter for better recall.\"]\n    }\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/indices/vectors/ai_research_vectors\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 4. Delete Vector Index\n\n```http\nDELETE /v3/indices/:table_name/:index_name\n```\n\n**Description:**\nDeletes an existing vector similarity search index. Deletion is permanent and cannot be undone. Underlying vector data remains intact, but queries will fall back to sequential scan, potentially slowing down search operations.\n\n**Notes:**\n\n- Deletion may affect dependent operations; ensure index dependencies are managed before deletion.\n- Use `run_with_orchestration=true` for large indices to prevent timeouts.\n\n**Path Parameters:**\n\n| Parameter    | Type   | Required | Description                                     |\n| :----------: | :---- | :------ | :---------------------------------------------- |\n| `table_name` | `string` | Yes      | The table of vector embeddings (`vectors`, `entity`, `document_collections`). |\n| `index_name` | `string` | Yes      | The name of the index to delete.                |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"message\": \"Index deletion initiated.\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X DELETE \"https://api.example.com/v3/indices/vectors/ai_research_vectors\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n## Users\n\n### Overview\n\nA **User** in R2R represents an authenticated entity that can interact with the system. Users are the foundation of R2R’s access control system, enabling granular permissions management, activity tracking, and content organization through collections.\n\n### Core Features of Users\n\n1. **Authentication & Authorization**\n    - Secure login and token-based authentication.\n    - Role-based access control (regular users vs. superusers).\n\n2. **Collection Membership Management**\n    - Manage access to documents and graphs through collections.\n    - Add or remove users from collections to control access.\n\n3. **Activity Tracking & Analytics**\n    - Monitor user activities and interactions within the system.\n\n4. **Metadata Customization**\n    - Store additional user information such as name, bio, and profile picture.\n\n5. **Superuser Capabilities**\n    - Manage system-wide settings, users, and prompts.\n\n### Available Endpoints\n\n| Method | Endpoint                                      | Description                                         |\n| :---- | :-------------------------------------------- | :-------------------------------------------------- |\n| GET    | `/users`                                      | List users with pagination (superusers only)       |\n| GET    | `/users/{user_id}`                            | Get detailed user information                      |\n| GET    | `/users/{user_id}/collections`                | List user’s collections                             |\n| POST   | `/users/{user_id}/collections/{collection_id}`| Add user to collection                              |\n| DELETE | `/users/{user_id}/collections/{collection_id}`| Remove user from collection                         |\n| POST   | `/users/{user_id}`                            | Update user information                             |\n| POST   | `/users/register`                             | Register a new user                                 |\n| POST   | `/users/verify-email`                         | Verify user's email address                         |\n| POST   | `/users/login`                                | Authenticate user and get tokens                    |\n| POST   | `/users/logout`                               | Log out current user                                |\n| POST   | `/users/refresh-token`                        | Refresh access token using a refresh token          |\n| POST   | `/users/change-password`                      | Change the authenticated user’s password            |\n| POST   | `/users/request-password-reset`               | Request a password reset for a user                  |\n| POST   | `/users/reset-password`                       | Reset a user’s password using a reset token          |\n| GET    | `/users/me`                                   | Get detailed information about the currently authenticated user |\n| GET    | `/users/{id}`                                 | Get detailed information about a specific user       |\n| POST   | `/users/{id}`                                 | Update user information                              |\n| DELETE | `/users/{id}`                                 | Delete a specific user                               |\n| GET    | `/users/{id}/collections`                     | List all collections associated with a specific user |\n| POST   | `/users/{id}/collections/{collection_id}`     | Add a user to a collection                          |\n| DELETE | `/users/{id}/collections/{collection_id}`     | Remove a user from a collection                     |\n\n### Endpoint Details\n\n#### 1. Register a New User\n\n```http\nPOST /v3/users/register\n```\n\n**Description:**\nRegisters a new user with the provided email and password. Upon registration, the user is inactive until their email is verified.\n\n**Request Body:**\n\nA JSON object containing the user's email and password.\n\n**Example Request Body:**\n\n```json\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"SecurePassword123!\"\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"user-id\",\n    \"email\": \"user@example.com\",\n    \"is_active\": true,\n    \"is_superuser\": false,\n    \"created_at\": \"2024-01-15T09:30:00Z\",\n    \"updated_at\": \"2024-01-15T09:30:00Z\",\n    \"is_verified\": false,\n    \"collection_ids\": [\"collection_id1\"],\n    \"graph_ids\": [\"graph_id1\"],\n    \"document_ids\": [\"document_id1\"],\n    \"hashed_password\": \"hashed_password\",\n    \"verification_code_expiry\": \"2024-01-16T09:30:00Z\",\n    \"name\": \"John Doe\",\n    \"bio\": \"A software developer.\",\n    \"profile_picture\": \"https://example.com/profile.jpg\",\n    \"total_size_in_bytes\": 204800,\n    \"num_files\": 10\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Invalid input or email already exists.\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/users/register\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"email\": \"user@example.com\",\n           \"password\": \"SecurePassword123!\"\n         }'\n```\n\n---\n\n#### 2. Verify User's Email Address\n\n```http\nPOST /v3/users/verify-email\n```\n\n**Description:**\nVerifies a user’s email address using a verification code sent during registration.\n\n**Request Body:**\n\nA JSON object containing the user's email and verification code.\n\n**Example Request Body:**\n\n```json\n{\n  \"email\": \"user@example.com\",\n  \"verification_code\": \"123456\"\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"message\": \"Email verified successfully.\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Invalid verification code or email.\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/users/verify-email\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"email\": \"user@example.com\",\n           \"verification_code\": \"123456\"\n         }'\n```\n\n---\n\n#### 3. Authenticate User and Get Tokens\n\n```http\nPOST /v3/users/login\n```\n\n**Description:**\nAuthenticates a user and provides access and refresh tokens upon successful login.\n\n**Request Body:**\n\nA JSON object containing the user's email and password.\n\n**Example Request Body:**\n\n```json\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"SecurePassword123!\"\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"access_token\": {\n      \"token\": \"access_token_string\",\n      \"token_type\": \"Bearer\"\n    },\n    \"refresh_token\": {\n      \"token\": \"refresh_token_string\",\n      \"token_type\": \"Bearer\"\n    }\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Invalid credentials or account inactive.\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/users/login\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"email\": \"user@example.com\",\n           \"password\": \"SecurePassword123!\"\n         }'\n```\n\n---\n\n#### 4. Log Out Current User\n\n```http\nPOST /v3/users/logout\n```\n\n**Description:**\nLogs out the current user, invalidating their access token.\n\n**Request Body:**\n\nNo parameters required.\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"message\": \"Logged out successfully.\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Invalid token or already logged out.\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/users/logout\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 5. Refresh Access Token\n\n```http\nPOST /v3/users/refresh-token\n```\n\n**Description:**\nRefreshes the access token using a valid refresh token, providing new access and refresh tokens.\n\n**Request Body:**\n\nA JSON object containing the refresh token.\n\n**Example Request Body:**\n\n```json\n{\n  \"refresh_token\": \"refresh_token_string\"\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"access_token\": {\n      \"token\": \"new_access_token_string\",\n      \"token_type\": \"Bearer\"\n    },\n    \"refresh_token\": {\n      \"token\": \"new_refresh_token_string\",\n      \"token_type\": \"Bearer\"\n    }\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Invalid or expired refresh token.\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/users/refresh-token\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"refresh_token\": \"refresh_token_string\"\n         }'\n```\n\n---\n\n#### 6. Change User Password\n\n```http\nPOST /v3/users/change-password\n```\n\n**Description:**\nChanges the authenticated user’s password.\n\n**Request Body:**\n\nA JSON object containing the current and new passwords.\n\n**Example Request Body:**\n\n```json\n{\n  \"current_password\": \"OldPassword123!\",\n  \"new_password\": \"NewSecurePassword456!\"\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"message\": \"Password changed successfully.\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Invalid current password or new password does not meet criteria.\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/users/change-password\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"current_password\": \"OldPassword123!\",\n           \"new_password\": \"NewSecurePassword456!\"\n         }'\n```\n\n---\n\n#### 7. Request Password Reset\n\n```http\nPOST /v3/users/request-password-reset\n```\n\n**Description:**\nRequests a password reset for a user by sending a reset link to their email.\n\n**Request Body:**\n\nA JSON object containing the user's email.\n\n**Example Request Body:**\n\n```json\n{\n  \"email\": \"user@example.com\"\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"message\": \"Password reset link sent to email.\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Email does not exist or already requested.\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/users/request-password-reset\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"email\": \"user@example.com\"\n         }'\n```\n\n---\n\n#### 8. Reset Password with Token\n\n```http\nPOST /v3/users/reset-password\n```\n\n**Description:**\nResets a user’s password using a valid reset token.\n\n**Request Body:**\n\nA JSON object containing the reset token and the new password.\n\n**Example Request Body:**\n\n```json\n{\n  \"reset_token\": \"reset_token_string\",\n  \"new_password\": \"NewSecurePassword456!\"\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"message\": \"Password reset successfully.\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Invalid or expired reset token.\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/users/reset-password\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"reset_token\": \"reset_token_string\",\n           \"new_password\": \"NewSecurePassword456!\"\n         }'\n```\n\n---\n\n#### 9. List All Users (Superusers Only)\n\n```http\nGET /v3/users\n```\n\n**Description:**\nLists all users in the system with pagination and filtering options. Accessible only by superusers.\n\n**Query Parameters:**\n\n| Parameter | Type      | Required | Description                           |\n| :-------- | :-------- | :------ | :------------------------------------ |\n| `ids`     | `string` | No      | A comma-separated list of user IDs to retrieve. |\n| `offset`  | `integer`| No      | Number of users to skip. Defaults to `0`. |\n| `limit`   | `integer`| No      | Number of users to return (`1–100`). Defaults to `100`. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"user_id\",\n      \"email\": \"user@example.com\",\n      \"is_active\": true,\n      \"is_superuser\": false,\n      \"created_at\": \"2024-01-15T09:30:00Z\",\n      \"updated_at\": \"2024-01-15T09:30:00Z\",\n      \"is_verified\": true,\n      \"collection_ids\": [\"collection_id1\"],\n      \"graph_ids\": [\"graph_id1\"],\n      \"document_ids\": [\"document_id1\"],\n      \"hashed_password\": \"hashed_password\",\n      \"verification_code_expiry\": \"2024-01-16T09:30:00Z\",\n      \"name\": \"John Doe\",\n      \"bio\": \"A software developer.\",\n      \"profile_picture\": \"https://example.com/profile.jpg\",\n      \"total_size_in_bytes\": 204800,\n      \"num_files\": 10\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/users?limit=10\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 10. Get Authenticated User Details\n\n```http\nGET /v3/users/me\n```\n\n**Description:**\nRetrieves detailed information about the currently authenticated user.\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"id\",\n    \"email\": \"email@example.com\",\n    \"is_active\": true,\n    \"is_superuser\": true,\n    \"created_at\": \"2024-01-15T09:30:00Z\",\n    \"updated_at\": \"2024-01-15T09:30:00Z\",\n    \"is_verified\": true,\n    \"collection_ids\": [\"collection_id1\"],\n    \"graph_ids\": [\"graph_id1\"],\n    \"document_ids\": [\"document_id1\"],\n    \"hashed_password\": \"hashed_password\",\n    \"verification_code_expiry\": \"2024-01-16T09:30:00Z\",\n    \"name\": \"John Doe\",\n    \"bio\": \"A software developer.\",\n    \"profile_picture\": \"https://example.com/profile.jpg\",\n    \"total_size_in_bytes\": 204800,\n    \"num_files\": 10\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/users/me\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 11. Get User Details\n\n```http\nGET /v3/users/:id\n```\n\n**Description:**\nRetrieves detailed information about a specific user. Users can only access their own information unless they are superusers.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                |\n| :-------- | :----- | :------ | :------------------------- |\n| `id`      | `string` | Yes      | The User ID to retrieve.   |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"user_id\",\n    \"email\": \"user@example.com\",\n    \"is_active\": true,\n    \"is_superuser\": false,\n    \"created_at\": \"2024-01-15T09:30:00Z\",\n    \"updated_at\": \"2024-01-15T09:30:00Z\",\n    \"is_verified\": true,\n    \"collection_ids\": [\"collection_id1\"],\n    \"graph_ids\": [\"graph_id1\"],\n    \"document_ids\": [\"document_id1\"],\n    \"hashed_password\": \"hashed_password\",\n    \"verification_code_expiry\": \"2024-01-16T09:30:00Z\",\n    \"name\": \"John Doe\",\n    \"bio\": \"A software developer.\",\n    \"profile_picture\": \"https://example.com/profile.jpg\",\n    \"total_size_in_bytes\": 204800,\n    \"num_files\": 10\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/users/user_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 12. Update User Information\n\n```http\nPOST /v3/users/:id\n```\n\n**Description:**\nUpdates user information. Users can only update their own information unless they are superusers. Superuser status can only be modified by existing superusers.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                         |\n| :-------- | :----- | :------ | :---------------------------------- |\n| `id`      | `string` | Yes      | The User ID to update.              |\n\n**Request Body:**\n\nA JSON object containing the updated user details.\n\n**Example Request Body:**\n\n```json\n{\n  \"email\": \"new_email@example.com\",\n  \"name\": \"Jane Doe\",\n  \"bio\": \"An experienced software engineer.\",\n  \"profile_picture\": \"https://example.com/new_profile.jpg\"\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"user_id\",\n    \"email\": \"new_email@example.com\",\n    \"is_active\": true,\n    \"is_superuser\": false,\n    \"created_at\": \"2024-01-15T09:30:00Z\",\n    \"updated_at\": \"2024-02-20T10:45:00Z\",\n    \"is_verified\": true,\n    \"collection_ids\": [\"collection_id1\"],\n    \"graph_ids\": [\"graph_id1\"],\n    \"document_ids\": [\"document_id1\"],\n    \"hashed_password\": \"hashed_password\",\n    \"verification_code_expiry\": \"2024-01-16T09:30:00Z\",\n    \"name\": \"Jane Doe\",\n    \"bio\": \"An experienced software engineer.\",\n    \"profile_picture\": \"https://example.com/new_profile.jpg\",\n    \"total_size_in_bytes\": 204800,\n    \"num_files\": 10\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/users/user_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"email\": \"new_email@example.com\",\n           \"name\": \"Jane Doe\",\n           \"bio\": \"An experienced software engineer.\",\n           \"profile_picture\": \"https://example.com/new_profile.jpg\"\n         }'\n```\n\n---\n\n#### 13. Delete User\n\n```http\nDELETE /v3/users/:id\n```\n\n**Description:**\nDeletes a specific user account. Users can only delete their own account unless they are superusers.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                        |\n| :-------- | :----- | :------ | :--------------------------------- |\n| `id`      | `string` | Yes      | The User ID to delete.             |\n\n**Request Body:**\n\nA JSON object containing optional parameters to confirm deletion.\n\n**Example Request Body:**\n\n```json\n{\n  \"password\": \"SecurePassword123!\",\n  \"delete_vector_data\": true\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"success\": true\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X DELETE \"https://api.example.com/v3/users/user_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"password\": \"SecurePassword123!\",\n           \"delete_vector_data\": true\n         }'\n```\n\n---\n\n#### 14. List User's Collections\n\n```http\nGET /v3/users/:id/collections\n```\n\n**Description:**\nRetrieves all collections associated with a specific user. Users can only access their own collections unless they are superusers.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                        |\n| :-------- | :----- | :------ | :--------------------------------- |\n| `id`      | `string` | Yes      | The User ID to retrieve collections for. |\n\n**Query Parameters:**\n\n| Parameter | Type      | Required | Description                           |\n| :-------- | :-------- | :------ | :------------------------------------ |\n| `offset`  | `integer` | No      | Number of collections to skip. Defaults to `0`. |\n| `limit`   | `integer` | No      | Number of collections to return (`1–100`). Defaults to `100`. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"collection_id\",\n      \"name\": \"Collection Name\",\n      \"graph_cluster_status\": \"status\",\n      \"graph_sync_status\": \"status\",\n      \"created_at\": \"2024-01-15T09:30:00Z\",\n      \"updated_at\": \"2024-01-15T09:30:00Z\",\n      \"user_count\": 10,\n      \"document_count\": 50,\n      \"owner_id\": \"owner_id\",\n      \"description\": \"A sample collection.\"\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/users/user_id/collections?limit=10\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 15. Add User to Collection\n\n```http\nPOST /v3/users/:id/collections/:collection_id\n```\n\n**Description:**\nAdds a user to a specific collection, granting them access to its documents and graphs. The authenticated user must have admin permissions for the collection to add new users.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                                |\n| :------------- | :----- | :------ | :----------------------------------------- |\n| `id`           | `string` | Yes      | The User ID to add to the collection.      |\n| `collection_id`| `string` | Yes      | The Collection ID to add the user to.       |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"success\": true\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/users/user_id/collections/collection_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 16. Remove User from Collection\n\n```http\nDELETE /v3/users/:id/collections/:collection_id\n```\n\n**Description:**\nRemoves a user from a specific collection, revoking their access to its documents and graphs. The authenticated user must have admin permissions for the collection to remove users.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                                |\n| :------------- | :----- | :------ | :----------------------------------------- |\n| `id`           | `string` | Yes      | The User ID to remove from the collection. |\n| `collection_id`| `string` | Yes      | The Collection ID to remove the user from.  |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"success\": true\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X DELETE \"https://api.example.com/v3/users/user_id/collections/collection_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n## Collections\n\n### Overview\n\nA **Collection** in R2R is a logical grouping mechanism that organizes documents, enabling efficient access control and collaboration among users. Collections serve as the primary unit for managing permissions, sharing content, and organizing related documents across users and teams.\n\n### Core Features of Collections\n\n1. **Organizational Structure**\n    - Groups related documents for better management and retrieval.\n\n2. **Access Control & Permissions**\n    - Manages user access at the collection level, allowing for granular permissions management.\n\n3. **Content Sharing**\n    - Facilitates sharing of documents and associated data among users within the collection.\n\n4. **Collaboration Capabilities**\n    - Enables multiple users to collaborate on document ingestion, management, and retrieval within a collection.\n\n5. **Metadata Management**\n    - Stores metadata and descriptions for each collection to provide context and organization.\n\n### Available Endpoints\n\n| Method | Endpoint                                         | Description                                                   |\n| :---- | :----------------------------------------------- | :------------------------------------------------------------ |\n| POST   | `/collections`                                   | Create a new collection                                       |\n| GET    | `/collections`                                   | List collections with pagination and filtering               |\n| GET    | `/collections/{id}`                              | Get details of a specific collection                          |\n| POST   | `/collections/{id}`                              | Update an existing collection                                 |\n| DELETE | `/collections/{id}`                              | Delete an existing collection                                 |\n| GET    | `/collections/{id}/documents`                    | List documents in a collection                                |\n| POST   | `/collections/{id}/documents/{document_id}`      | Add a document to a collection                                |\n| POST   | `/collections/{id}/extract`                      | Extract entities and relationships for all unextracted documents in the collection |\n| DELETE | `/collections/{id}/documents/{document_id}`      | Remove a document from a collection                           |\n| GET    | `/collections/{id}/users`                        | List users with access to a collection                        |\n| POST   | `/collections/{id}/users/{user_id}`              | Add a user to a collection                                    |\n| DELETE | `/collections/{id}/users/{user_id}`              | Remove a user from a collection                               |\n\n### Endpoint Details\n\n#### 1. List Collections\n\n```http\nGET /v3/collections\n```\n\n**Description:**\nReturns a paginated list of collections the authenticated user has access to. Results can be filtered by specific collection IDs. Regular users will see collections they own or have access to, while superusers can view all collections. Collections are ordered by last modification date, with the most recent first.\n\n**Query Parameters:**\n\n| Parameter | Type      | Required | Description                           |\n| :-------- | :-------- | :------ | :------------------------------------ |\n| `ids`     | `string` | No      | A comma-separated list of collection IDs to retrieve. If not provided, all accessible collections will be returned. |\n| `offset`  | `integer`| No      | Number of collections to skip. Defaults to `0`. |\n| `limit`   | `integer`| No      | Number of collections to return (`1–100`). Defaults to `100`. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"collection_id\",\n      \"name\": \"AI Research Collection\",\n      \"graph_cluster_status\": \"active\",\n      \"graph_sync_status\": \"synchronized\",\n      \"created_at\": \"2024-01-15T09:30:00Z\",\n      \"updated_at\": \"2024-01-15T09:30:00Z\",\n      \"user_count\": 5,\n      \"document_count\": 10,\n      \"owner_id\": \"owner_id\",\n      \"description\": \"A collection of documents related to AI research.\"\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/collections?limit=10\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 2. Create a New Collection\n\n```http\nPOST /v3/collections\n```\n\n**Description:**\nCreates a new collection and automatically adds the creating user to it.\n\n**Request Body:**\n\nA JSON object containing the name and optional description of the collection.\n\n**Example Request Body:**\n\n```json\n{\n  \"name\": \"AI Research Collection\",\n  \"description\": \"A collection of documents related to AI research.\"\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"collection_id\",\n    \"name\": \"AI Research Collection\",\n    \"graph_cluster_status\": \"active\",\n    \"graph_sync_status\": \"synchronized\",\n    \"created_at\": \"2024-01-15T09:30:00Z\",\n    \"updated_at\": \"2024-01-15T09:30:00Z\",\n    \"user_count\": 1,\n    \"document_count\": 0,\n    \"owner_id\": \"user_id\",\n    \"description\": \"A collection of documents related to AI research.\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/collections\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"name\": \"AI Research Collection\",\n           \"description\": \"A collection of documents related to AI research.\"\n         }'\n```\n\n---\n\n#### 3. Get Collection Details\n\n```http\nGET /v3/collections/:id\n```\n\n**Description:**\nRetrieves detailed information about a specific collection.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                        |\n| :-------- | :----- | :------ | :--------------------------------- |\n| `id`      | `string` | Yes      | The Collection ID to retrieve details for. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"collection_id\",\n    \"name\": \"AI Research Collection\",\n    \"graph_cluster_status\": \"active\",\n    \"graph_sync_status\": \"synchronized\",\n    \"created_at\": \"2024-01-15T09:30:00Z\",\n    \"updated_at\": \"2024-01-15T09:30:00Z\",\n    \"user_count\": 10,\n    \"document_count\": 50,\n    \"owner_id\": \"owner_id\",\n    \"description\": \"A collection of documents related to AI research.\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/collections/collection_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 4. Update Collection\n\n```http\nPOST /v3/collections/:id\n```\n\n**Description:**\nUpdates the configuration of an existing collection, including its name and description.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                        |\n| :-------- | :----- | :------ | :--------------------------------- |\n| `id`      | `string` | Yes      | The Collection ID to update.        |\n\n**Request Body:**\n\nA JSON object containing the updated details of the collection.\n\n**Example Request Body:**\n\n```json\n{\n  \"name\": \"Advanced AI Research Collection\",\n  \"description\": \"An updated description for the AI research collection.\"\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"collection_id\",\n    \"name\": \"Advanced AI Research Collection\",\n    \"graph_cluster_status\": \"active\",\n    \"graph_sync_status\": \"synchronized\",\n    \"created_at\": \"2024-01-15T09:30:00Z\",\n    \"updated_at\": \"2024-02-20T10:45:00Z\",\n    \"user_count\": 10,\n    \"document_count\": 50,\n    \"owner_id\": \"owner_id\",\n    \"description\": \"An updated description for the AI research collection.\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/collections/collection_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"name\": \"Advanced AI Research Collection\",\n           \"description\": \"An updated description for the AI research collection.\"\n         }'\n```\n\n---\n\n#### 5. Delete Collection\n\n```http\nDELETE /v3/collections/:id\n```\n\n**Description:**\nDeletes an existing collection. This action removes all associations but does not delete the documents within it.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                        |\n| :-------- | :----- | :------ | :--------------------------------- |\n| `id`      | `string` | Yes      | The Collection ID to delete.        |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"success\": true\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X DELETE \"https://api.example.com/v3/collections/collection_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 6. Add Document to Collection\n\n```http\nPOST /v3/collections/:id/documents/:document_id\n```\n\n**Description:**\nAdds a document to a specific collection, enabling access to the document within that collection's context.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                        |\n| :------------- | :----- | :------ | :--------------------------------- |\n| `id`           | `string` | Yes      | The Collection ID to add the document to. |\n| `document_id`  | `string` | Yes      | The Document ID to add.            |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"message\": \"Document added to collection successfully.\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/collections/collection_id/documents/document_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 7. Remove Document from Collection\n\n```http\nDELETE /v3/collections/:id/documents/:document_id\n```\n\n**Description:**\nRemoves a document from a specific collection, revoking access to it within that collection's context. This action does not delete the document itself.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                        |\n| :------------- | :----- | :------ | :--------------------------------- |\n| `id`           | `string` | Yes      | The Collection ID to remove the document from. |\n| `document_id`  | `string` | Yes      | The Document ID to remove.         |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"success\": true\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X DELETE \"https://api.example.com/v3/collections/collection_id/documents/document_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 8. List Documents in Collection\n\n```http\nGET /v3/collections/:id/documents\n```\n\n**Description:**\nRetrieves all documents within a specific collection, supporting pagination and sorting options.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                        |\n| :-------- | :----- | :------ | :--------------------------------- |\n| `id`      | `string` | Yes      | The Collection ID to retrieve documents from. |\n\n**Query Parameters:**\n\n| Parameter | Type      | Required | Description                           |\n| :-------- | :-------- | :------ | :------------------------------------ |\n| `offset`  | `integer` | No      | Number of documents to skip. Defaults to `0`. |\n| `limit`   | `integer` | No      | Number of documents to return (`1–100`). Defaults to `100`. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"document_id\",\n      \"collection_ids\": [\"collection_id1\", \"collection_id2\"],\n      \"owner_id\": \"owner_id\",\n      \"document_type\": \"pdf\",\n      \"metadata\": {\n        \"title\": \"AI Research Paper\",\n        \"description\": \"A comprehensive study on AI advancements.\"\n      },\n      \"version\": \"1.0\",\n      \"title\": \"AI Research Paper\",\n      \"size_in_bytes\": 102400,\n      \"ingestion_status\": \"success\",\n      \"extraction_status\": \"success\",\n      \"created_at\": \"2024-01-15T09:30:00Z\",\n      \"updated_at\": \"2024-01-15T09:30:00Z\",\n      \"ingestion_attempt_number\": 1,\n      \"summary\": \"This paper explores recent advancements in artificial intelligence.\",\n      \"summary_embedding\": [1.1, 2.2, 3.3],\n      \"total_entries\": 1\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/collections/collection_id/documents?limit=10\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 9. List Users in Collection\n\n```http\nGET /v3/collections/:id/users\n```\n\n**Description:**\nRetrieves all users with access to a specific collection, supporting pagination and sorting options.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                        |\n| :-------- | :----- | :------ | :--------------------------------- |\n| `id`      | `string` | Yes      | The Collection ID to retrieve users from. |\n\n**Query Parameters:**\n\n| Parameter | Type      | Required | Description                           |\n| :-------- | :-------- | :------ | :------------------------------------ |\n| `offset`  | `integer` | No      | Number of users to skip. Defaults to `0`. |\n| `limit`   | `integer` | No      | Number of users to return (`1–100`). Defaults to `100`. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"user_id\",\n      \"email\": \"user@example.com\",\n      \"is_active\": true,\n      \"is_superuser\": false,\n      \"created_at\": \"2024-01-15T09:30:00Z\",\n      \"updated_at\": \"2024-01-15T09:30:00Z\",\n      \"is_verified\": true,\n      \"collection_ids\": [\"collection_id1\"],\n      \"graph_ids\": [\"graph_id1\"],\n      \"document_ids\": [\"document_id1\"],\n      \"hashed_password\": \"hashed_password\",\n      \"verification_code_expiry\": \"2024-01-16T09:30:00Z\",\n      \"name\": \"John Doe\",\n      \"bio\": \"A software developer.\",\n      \"profile_picture\": \"https://example.com/profile.jpg\",\n      \"total_size_in_bytes\": 204800,\n      \"num_files\": 10\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/collections/collection_id/users?limit=10\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 10. Add User to Collection\n\n```http\nPOST /v3/collections/:id/users/:user_id\n```\n\n**Description:**\nAdds a user to a specific collection, granting them access to its documents and graphs. The authenticated user must have admin permissions for the collection to add new users.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                                |\n| :------------- | :----- | :------ | :----------------------------------------- |\n| `id`           | `string` | Yes      | The Collection ID to add the user to.       |\n| `user_id`      | `string` | Yes      | The User ID to add to the collection.       |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"success\": true\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/collections/collection_id/users/user_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 11. Remove User from Collection\n\n```http\nDELETE /v3/collections/:id/users/:user_id\n```\n\n**Description:**\nRemoves a user from a specific collection, revoking their access to its documents and graphs. The authenticated user must have admin permissions for the collection to remove users.\n\n**Path Parameters:**\n\n| Parameter      | Type   | Required | Description                                |\n| :------------- | :----- | :------ | :----------------------------------------- |\n| `id`           | `string` | Yes      | The Collection ID to remove the user from.  |\n| `user_id`      | `string` | Yes      | The User ID to remove from the collection.  |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"success\": true\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X DELETE \"https://api.example.com/v3/collections/collection_id/users/user_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 12. Extract Entities and Relationships (Collection-level)\n\n```http\nPOST /v3/collections/:id/extract\n```\n\n**Description:**\nExtracts entities and relationships from all unextracted documents within a collection, facilitating comprehensive knowledge graph construction.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                        |\n| :-------- | :----- | :------ | :--------------------------------- |\n| `id`      | `string` | Yes      | The Collection ID to extract from.  |\n\n**Query Parameters:**\n\n| Parameter                | Type      | Required | Description                                     |\n| :----------------------- | :-------- | :------ | :---------------------------------------------- |\n| `run_type`               | `string` | No      | `\"estimate\"` or `\"run\"`. Determines operation type. |\n| `run_with_orchestration` | `boolean`| No      | Whether to run the extraction process with orchestration. |\n\n**Request Body:**\n\nAn optional JSON object containing various extraction prompts and configurations.\n\n**Example Request Body:**\n\n```json\n{\n  \"run_type\": \"run\",\n  \"settings\": {\n    \"entity_types\": [\"Person\", \"Organization\"],\n    \"relation_types\": [\"EmployedBy\", \"CollaboratesWith\"],\n    \"chunk_merge_count\": 5,\n    \"max_knowledge_relationships\": 150,\n    \"generation_config\": {\n      \"model\": \"gpt-4\",\n      \"temperature\": 0.7,\n      \"top_p\": 0.9,\n      \"max_tokens_to_sample\": 100,\n      \"stream\": false\n    }\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"message\": \"Entity and relationship extraction initiated for collection.\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/collections/collection_id/extract\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"run_type\": \"run\",\n           \"settings\": {\n             \"entity_types\": [\"Person\", \"Organization\"],\n             \"relation_types\": [\"EmployedBy\", \"CollaboratesWith\"],\n             \"chunk_merge_count\": 5,\n             \"max_knowledge_relationships\": 150\n           }\n         }'\n```\n\n---\n\n## Conversations\n\n### Overview\n\nA **Conversation** in R2R represents a threaded exchange of messages that can branch into multiple paths. Conversations provide a structured way to maintain dialogue history, support branching discussions, and manage message flows, enabling interactive and dynamic interactions with the system.\n\n### Core Features of Conversations\n\n1. **Threaded Message Management**\n    - Maintains a history of messages exchanged within the conversation.\n\n2. **Branching Paths**\n    - Supports branching, allowing the conversation to explore different topics or directions.\n\n3. **Message Editing**\n    - Allows updating existing messages with history preservation.\n\n4. **Metadata Attachment**\n    - Stores additional information with messages for enhanced context.\n\n5. **Context Maintenance**\n    - Maintains conversational context across multiple interactions for coherent dialogue.\n\n### Available Endpoints\n\n| Method | Endpoint                                      | Description                                  |\n| :---- | :-------------------------------------------- | :------------------------------------------- |\n| POST   | `/conversations`                              | Create a new conversation                    |\n| GET    | `/conversations`                              | List conversations with pagination           |\n| GET    | `/conversations/{id}`                         | Get conversation details                     |\n| DELETE | `/conversations/{id}`                         | Delete a conversation                        |\n| POST   | `/conversations/{id}/messages`                 | Add a message to conversation                |\n| PUT    | `/conversations/{id}/messages/{message_id}`    | Update an existing message                   |\n| GET    | `/conversations/{id}/branches`                 | List conversation branches                   |\n\n### Endpoint Details\n\n#### 1. List Conversations\n\n```http\nGET /v3/conversations\n```\n\n**Description:**\nLists all conversations accessible to the authenticated user, supporting pagination and filtering.\n\n**Query Parameters:**\n\n| Parameter | Type      | Required | Description                           |\n| :-------- | :-------- | :------ | :------------------------------------ |\n| `ids`     | `string` | No      | A comma-separated list of conversation IDs to retrieve. If not provided, all accessible conversations will be returned. |\n| `offset`  | `integer`| No      | Number of conversations to skip. Defaults to `0`. |\n| `limit`   | `integer`| No      | Number of conversations to return (`1–100`). Defaults to `100`. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"conversation_id\",\n      \"created_at\": \"2024-01-15T09:30:00Z\",\n      \"user_id\": \"user_id\",\n      \"name\": \"AI Chatbot Conversation\"\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/conversations?limit=10\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 2. Create a New Conversation\n\n```http\nPOST /v3/conversations\n```\n\n**Description:**\nCreates a new conversation for the authenticated user.\n\n**Request Body:**\n\nNo parameters required.\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"conversation_id\",\n    \"created_at\": \"2024-01-15T09:30:00Z\",\n    \"user_id\": \"user_id\",\n    \"name\": \"AI Chatbot Conversation\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/conversations\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 3. Get Conversation Details\n\n```http\nGET /v3/conversations/:id\n```\n\n**Description:**\nRetrieves detailed information about a specific conversation. Can optionally retrieve details of a specific branch.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                        |\n| :-------- | :----- | :------ | :--------------------------------- |\n| `id`      | `string` | Yes      | The Conversation ID to retrieve.    |\n\n**Query Parameters:**\n\n| Parameter   | Type      | Required | Description                                |\n| :---------- | :-------- | :------ | :----------------------------------------- |\n| `branch_id` | `string` | No      | The ID of the specific branch to retrieve. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"conversation_id\",\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"Hello! How can I assist you today?\",\n        \"name\": \"Assistant\",\n        \"function_call\": {},\n        \"tool_calls\": []\n      },\n      \"metadata\": {}\n    }\n  ]\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/conversations/conversation_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 4. Delete Conversation\n\n```http\nDELETE /v3/conversations/:id\n```\n\n**Description:**\nDeletes an existing conversation, removing all associated messages and branches.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                        |\n| :-------- | :----- | :------ | :--------------------------------- |\n| `id`      | `string` | Yes      | The Conversation ID to delete.      |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {}\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X DELETE \"https://api.example.com/v3/conversations/conversation_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 5. Add Message to Conversation\n\n```http\nPOST /v3/conversations/:id/messages\n```\n\n**Description:**\nAdds a new message to an existing conversation.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                        |\n| :-------- | :----- | :------ | :--------------------------------- |\n| `id`      | `string` | Yes      | The Conversation ID to add the message to. |\n\n**Request Body:**\n\nA JSON object containing the message details.\n\n**Example Request Body:**\n\n```json\n{\n  \"content\": \"Hello, can you help me with AI research?\",\n  \"role\": \"user\",\n  \"parent_id\": \"parent_message_id\",\n  \"metadata\": {\n    \"topic\": \"AI Research\"\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"message_id\",\n    \"message\": {\n      \"role\": \"user\",\n      \"content\": \"Hello, can you help me with AI research?\",\n      \"name\": \"User\",\n      \"function_call\": {},\n      \"tool_calls\": []\n    },\n    \"metadata\": {\n      \"topic\": \"AI Research\"\n    }\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/conversations/conversation_id/messages\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"content\": \"Hello, can you help me with AI research?\",\n           \"role\": \"user\",\n           \"parent_id\": \"parent_message_id\",\n           \"metadata\": { \"topic\": \"AI Research\" }\n         }'\n```\n\n---\n\n#### 6. Update Message in Conversation\n\n```http\nPUT /v3/conversations/:id/messages/:message_id\n```\n\n**Description:**\nUpdates an existing message within a conversation.\n\n**Path Parameters:**\n\n| Parameter     | Type   | Required | Description                                |\n| :------------ | :----- | :------ | :----------------------------------------- |\n| `id`          | `string` | Yes      | The Conversation ID containing the message. |\n| `message_id`  | `string` | Yes      | The Message ID to update.                  |\n\n**Request Body:**\n\nA JSON object containing the updated message details.\n\n**Example Request Body:**\n\n```json\n{\n  \"content\": \"Hello, can you assist me with advanced AI research?\",\n  \"metadata\": {\n    \"topic\": \"Advanced AI Research\"\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"message\": {\n      \"role\": \"user\",\n      \"content\": \"Hello, can you assist me with advanced AI research?\",\n      \"name\": \"User\",\n      \"function_call\": {},\n      \"tool_calls\": []\n    },\n    \"metadata\": {\n      \"topic\": \"Advanced AI Research\"\n    }\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X PUT \"https://api.example.com/v3/conversations/conversation_id/messages/message_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"content\": \"Hello, can you assist me with advanced AI research?\",\n           \"metadata\": { \"topic\": \"Advanced AI Research\" }\n         }'\n```\n\n---\n\n#### 7. List Conversation Branches\n\n```http\nGET /v3/conversations/:id/branches\n```\n\n**Description:**\nLists all branches within a specific conversation, supporting pagination.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                        |\n| :-------- | :----- | :------ | :--------------------------------- |\n| `id`      | `string` | Yes      | The Conversation ID to retrieve branches for. |\n\n**Query Parameters:**\n\n| Parameter | Type      | Required | Description                           |\n| :-------- | :-------- | :------ | :------------------------------------ |\n| `offset`  | `integer` | No      | Number of branches to skip. Defaults to `0`. |\n| `limit`   | `integer` | No      | Number of branches to return (`1–100`). Defaults to `100`. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"branch_id\": \"branch_id\",\n      \"created_at\": \"2024-01-16T10:00:00Z\",\n      \"branch_point_id\": \"message_id\",\n      \"content\": \"Branch content here.\",\n      \"user_id\": \"user_id\",\n      \"name\": \"Branch Name\"\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/conversations/conversation_id/branches?limit=10\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n## Prompts\n\n### Overview\n\nA **Prompt** in R2R represents a templated instruction or query pattern managed by superusers. Prompts provide a consistent and reusable way to structure interactions with language models and other AI components, ensuring standardized outputs and interactions across the system.\n\n### Core Features of Prompts\n\n1. **Templated Instruction Management**\n    - Centralizes prompt templates for consistent usage.\n\n2. **Type-safe Input Handling**\n    - Defines input types for dynamic prompt generation.\n\n3. **Centralized Governance**\n    - Managed by superusers to maintain standardization.\n\n4. **Dynamic Prompt Generation**\n    - Supports dynamic insertion of input values into templates.\n\n5. **Version Control**\n    - Maintains versions of prompts for historical reference and rollback.\n\n### Available Endpoints\n\n| Method | Endpoint         | Description                                 |\n| :---- | :--------------- | :------------------------------------------ |\n| POST   | `/prompts`       | Create a new prompt template                |\n| GET    | `/prompts`       | List all available prompts                  |\n| GET    | `/prompts/{name}`| Get a specific prompt with optional inputs  |\n| PUT    | `/prompts/{name}`| Update an existing prompt                   |\n| DELETE | `/prompts/{name}`| Delete a prompt template                    |\n\n### Endpoint Details\n\n#### 1. List All Prompts\n\n```http\nGET /v3/prompts\n```\n\n**Description:**\nLists all available prompts. Accessible only by superusers.\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"prompt_id\",\n      \"name\": \"greeting_prompt\",\n      \"template\": \"Hello, {name}!\",\n      \"created_at\": \"2024-01-15T09:30:00Z\",\n      \"updated_at\": \"2024-02-20T10:45:00Z\",\n      \"input_types\": {\n        \"name\": \"string\",\n        \"age\": \"integer\"\n      }\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Access denied or invalid request.\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/prompts\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 2. Create a New Prompt\n\n```http\nPOST /v3/prompts\n```\n\n**Description:**\nCreates a new prompt with the provided configuration. Only superusers can create prompts.\n\n**Request Body:**\n\nA JSON object containing the prompt's name, template, and input types.\n\n**Example Request Body:**\n\n```json\n{\n  \"name\": \"greeting_prompt\",\n  \"template\": \"Hello, {name}! You are {age} years old.\",\n  \"input_types\": {\n    \"name\": \"string\",\n    \"age\": \"integer\"\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"message\": \"Prompt created successfully.\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Invalid input or access denied.\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/prompts\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"name\": \"greeting_prompt\",\n           \"template\": \"Hello, {name}! You are {age} years old.\",\n           \"input_types\": { \"name\": \"string\", \"age\": \"integer\" }\n         }'\n```\n\n---\n\n#### 3. Get an Existing Prompt\n\n```http\nGET /v3/prompts/:name\n```\n\n**Description:**\nRetrieves a specific prompt by name, optionally with input values and overrides.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                |\n| :-------- | :----- | :------ | :------------------------- |\n| `name`    | `string` | Yes      | The name of the prompt.    |\n\n**Query Parameters:**\n\n| Parameter         | Type      | Required | Description                             |\n| :---------------- | :-------- | :------ | :-------------------------------------- |\n| `prompt_override` | `string` | No      | Optional custom prompt override.        |\n\n**Request Body:**\n\nA JSON object containing input values for the prompt.\n\n**Example Request Body:**\n\n```json\n{\n  \"inputs\": {\n    \"name\": \"Alice\",\n    \"age\": 30\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"prompt_id\",\n    \"name\": \"greeting_prompt\",\n    \"template\": \"Hello, Alice! You are 30 years old.\",\n    \"created_at\": \"2024-01-15T09:30:00Z\",\n    \"updated_at\": \"2024-02-20T10:45:00Z\",\n    \"input_types\": {\n      \"name\": \"string\",\n      \"age\": \"integer\"\n    }\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Invalid prompt name or access denied.\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/prompts/greeting_prompt\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"inputs\": { \"name\": \"Alice\", \"age\": 30 }\n         }'\n```\n\n---\n\n#### 4. Update an Existing Prompt\n\n```http\nPUT /v3/prompts/:name\n```\n\n**Description:**\nUpdates an existing prompt’s template and/or input types. Only superusers can update prompts.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                |\n| :-------- | :----- | :------ | :------------------------- |\n| `name`    | `string` | Yes      | The name of the prompt.    |\n\n**Request Body:**\n\nA JSON object containing the updated template and input types.\n\n**Example Request Body:**\n\n```json\n{\n  \"template\": \"Greetings, {name}! You are {age} years old.\",\n  \"input_types\": {\n    \"name\": \"string\",\n    \"age\": \"integer\",\n    \"location\": \"string\"\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"message\": \"Prompt updated successfully.\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Invalid prompt name or update parameters.\n\n**Example cURL:**\n\n```bash\ncurl -X PUT \"https://api.example.com/v3/prompts/greeting_prompt\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"template\": \"Greetings, {name}! You are {age} years old.\",\n           \"input_types\": { \"name\": \"string\", \"age\": \"integer\", \"location\": \"string\" }\n         }'\n```\n\n---\n\n#### 5. Delete a Prompt\n\n```http\nDELETE /v3/prompts/:name\n```\n\n**Description:**\nDeletes a prompt by name. Only superusers can delete prompts.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                |\n| :-------- | :----- | :------ | :------------------------- |\n| `name`    | `string` | Yes      | The name of the prompt.    |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"success\": true\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Invalid prompt name or access denied.\n\n**Example cURL:**\n\n```bash\ncurl -X DELETE \"https://api.example.com/v3/prompts/greeting_prompt\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n## Conversations\n\n### Overview\n\nA **Conversation** in R2R maintains a threaded and potentially branching series of messages between users and the system. Conversations support context persistence, enabling multi-turn dialogues that can adapt and diverge based on user interactions.\n\n### Core Features of Conversations\n\n1. **Threaded Message Management**\n    - Maintains a sequence of messages exchanged within the conversation.\n\n2. **Branching Paths**\n    - Supports branching to explore different topics or directions within the same conversation.\n\n3. **Message Editing with History Preservation**\n    - Allows updating existing messages while preserving the conversation history.\n\n4. **Metadata Attachment**\n    - Stores additional information with messages for enhanced context and organization.\n\n5. **Context Maintenance**\n    - Maintains conversational context across multiple interactions for coherent and relevant responses.\n\n### Available Endpoints\n\n| Method | Endpoint                                    | Description                                  |\n| :---- | :------------------------------------------ | :------------------------------------------- |\n| POST   | `/conversations`                            | Create a new conversation                    |\n| GET    | `/conversations`                            | List conversations with pagination           |\n| GET    | `/conversations/{id}`                       | Get conversation details                     |\n| DELETE | `/conversations/{id}`                       | Delete a conversation                        |\n| POST   | `/conversations/{id}/messages`               | Add a message to conversation                |\n| PUT    | `/conversations/{id}/messages/{message_id}`  | Update an existing message                   |\n| GET    | `/conversations/{id}/branches`               | List conversation branches                   |\n\n### Endpoint Details\n\n#### 1. List Conversations\n\n```http\nGET /v3/conversations\n```\n\n**Description:**\nLists all conversations accessible to the authenticated user, supporting pagination and filtering.\n\n**Query Parameters:**\n\n| Parameter | Type      | Required | Description                           |\n| :-------- | :-------- | :------ | :------------------------------------ |\n| `ids`     | `string` | No      | A comma-separated list of conversation IDs to retrieve. If not provided, all accessible conversations will be returned. |\n| `offset`  | `integer`| No      | Number of conversations to skip. Defaults to `0`. |\n| `limit`   | `integer`| No      | Number of conversations to return (`1–100`). Defaults to `100`. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"conversation_id\",\n      \"created_at\": \"2024-01-15T09:30:00Z\",\n      \"user_id\": \"user_id\",\n      \"name\": \"AI Chatbot Conversation\"\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/conversations?limit=10\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 2. Create a New Conversation\n\n```http\nPOST /v3/conversations\n```\n\n**Description:**\nCreates a new conversation for the authenticated user.\n\n**Request Body:**\n\nNo parameters required.\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"conversation_id\",\n    \"created_at\": \"2024-01-15T09:30:00Z\",\n    \"user_id\": \"user_id\",\n    \"name\": \"AI Chatbot Conversation\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/conversations\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 3. Get Conversation Details\n\n```http\nGET /v3/conversations/:id\n```\n\n**Description:**\nRetrieves detailed information about a specific conversation. Optionally, you can retrieve details of a specific branch within the conversation.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                        |\n| :-------- | :----- | :------ | :--------------------------------- |\n| `id`      | `string` | Yes      | The Conversation ID to retrieve.    |\n\n**Query Parameters:**\n\n| Parameter   | Type      | Required | Description                                |\n| :---------- | :-------- | :------ | :----------------------------------------- |\n| `branch_id` | `string` | No      | The ID of the specific branch to retrieve. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"conversation_id\",\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"Hello! How can I assist you today?\",\n        \"name\": \"Assistant\",\n        \"function_call\": {},\n        \"tool_calls\": []\n      },\n      \"metadata\": {}\n    }\n  ]\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/conversations/conversation_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 4. Delete Conversation\n\n```http\nDELETE /v3/conversations/:id\n```\n\n**Description:**\nDeletes an existing conversation, removing all associated messages and branches.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                        |\n| :-------- | :----- | :------ | :--------------------------------- |\n| `id`      | `string` | Yes      | The Conversation ID to delete.      |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {}\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X DELETE \"https://api.example.com/v3/conversations/conversation_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 5. Add Message to Conversation\n\n```http\nPOST /v3/conversations/:id/messages\n```\n\n**Description:**\nAdds a new message to an existing conversation.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                        |\n| :-------- | :----- | :------ | :--------------------------------- |\n| `id`      | `string` | Yes      | The Conversation ID to add the message to. |\n\n**Request Body:**\n\nA JSON object containing the message details.\n\n**Example Request Body:**\n\n```json\n{\n  \"content\": \"Hello, can you help me with AI research?\",\n  \"role\": \"user\",\n  \"parent_id\": \"parent_message_id\",\n  \"metadata\": {\n    \"topic\": \"AI Research\"\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"message_id\",\n    \"message\": {\n      \"role\": \"user\",\n      \"content\": \"Hello, can you help me with AI research?\",\n      \"name\": \"User\",\n      \"function_call\": {},\n      \"tool_calls\": []\n    },\n    \"metadata\": {\n      \"topic\": \"AI Research\"\n    }\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/conversations/conversation_id/messages\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"content\": \"Hello, can you help me with AI research?\",\n           \"role\": \"user\",\n           \"parent_id\": \"parent_message_id\",\n           \"metadata\": { \"topic\": \"AI Research\" }\n         }'\n```\n\n---\n\n#### 6. Update Message in Conversation\n\n```http\nPUT /v3/conversations/:id/messages/:message_id\n```\n\n**Description:**\nUpdates an existing message within a conversation.\n\n**Path Parameters:**\n\n| Parameter     | Type   | Required | Description                                |\n| :------------ | :----- | :------ | :----------------------------------------- |\n| `id`          | `string` | Yes      | The Conversation ID containing the message. |\n| `message_id`  | `string` | Yes      | The Message ID to update.                   |\n\n**Request Body:**\n\nA JSON object containing the updated message details.\n\n**Example Request Body:**\n\n```json\n{\n  \"content\": \"Hello, can you assist me with advanced AI research?\",\n  \"metadata\": {\n    \"topic\": \"Advanced AI Research\"\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"message\": {\n      \"role\": \"user\",\n      \"content\": \"Hello, can you assist me with advanced AI research?\",\n      \"name\": \"User\",\n      \"function_call\": {},\n      \"tool_calls\": []\n    },\n    \"metadata\": {\n      \"topic\": \"Advanced AI Research\"\n    }\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X PUT \"https://api.example.com/v3/conversations/conversation_id/messages/message_id\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"content\": \"Hello, can you assist me with advanced AI research?\",\n           \"metadata\": { \"topic\": \"Advanced AI Research\" }\n         }'\n```\n\n---\n\n#### 7. List Conversation Branches\n\n```http\nGET /v3/conversations/:id/branches\n```\n\n**Description:**\nLists all branches within a specific conversation, supporting pagination.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                        |\n| :-------- | :----- | :------ | :--------------------------------- |\n| `id`      | `string` | Yes      | The Conversation ID to retrieve branches for. |\n\n**Query Parameters:**\n\n| Parameter | Type      | Required | Description                           |\n| :-------- | :-------- | :------ | :------------------------------------ |\n| `offset`  | `integer` | No      | Number of branches to skip. Defaults to `0`. |\n| `limit`   | `integer` | No      | Number of branches to return (`1–100`). Defaults to `100`. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"branch_id\": \"branch_id\",\n      \"created_at\": \"2024-01-16T10:00:00Z\",\n      \"branch_point_id\": \"message_id\",\n      \"content\": \"Branch content here.\",\n      \"user_id\": \"user_id\",\n      \"name\": \"Branch Name\"\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/conversations/conversation_id/branches?limit=10\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n## Prompts\n\n### Overview\n\nA **Prompt** in R2R represents a templated instruction or query pattern that can be reused across the system. Managed by superusers, prompts provide a standardized way to interact with language models and other AI components, ensuring consistent outputs and interactions.\n\n### Core Features of Prompts\n\n1. **Templated Instruction Management**\n    - Centralizes prompt templates for consistent usage.\n\n2. **Type-safe Input Handling**\n    - Defines input types for dynamic prompt generation.\n\n3. **Centralized Governance**\n    - Managed by superusers to maintain standardization.\n\n4. **Dynamic Prompt Generation**\n    - Supports dynamic insertion of input values into templates.\n\n5. **Version Control**\n    - Maintains versions of prompts for historical reference and rollback.\n\n### Available Endpoints\n\n| Method | Endpoint         | Description                                 |\n| :---- | :--------------- | :------------------------------------------ |\n| POST   | `/prompts`        | Create a new prompt template                |\n| GET    | `/prompts`        | List all available prompts                  |\n| GET    | `/prompts/{name}` | Get a specific prompt with optional inputs  |\n| PUT    | `/prompts/{name}` | Update an existing prompt                   |\n| DELETE | `/prompts/{name}` | Delete a prompt template                    |\n\n### Endpoint Details\n\n#### 1. List All Prompts\n\n```http\nGET /v3/prompts\n```\n\n**Description:**\nLists all available prompts. Accessible only by superusers.\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": \"prompt_id\",\n      \"name\": \"greeting_prompt\",\n      \"template\": \"Hello, {name}!\",\n      \"created_at\": \"2024-01-15T09:30:00Z\",\n      \"updated_at\": \"2024-02-20T10:45:00Z\",\n      \"input_types\": {\n        \"name\": \"string\",\n        \"age\": \"integer\"\n      }\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Access denied or invalid request.\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/prompts\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 2. Create a New Prompt\n\n```http\nPOST /v3/prompts\n```\n\n**Description:**\nCreates a new prompt with the provided configuration. Only superusers can create prompts.\n\n**Request Body:**\n\nA JSON object containing the prompt's name, template, and input types.\n\n**Example Request Body:**\n\n```json\n{\n  \"name\": \"greeting_prompt\",\n  \"template\": \"Hello, {name}! You are {age} years old.\",\n  \"input_types\": {\n    \"name\": \"string\",\n    \"age\": \"integer\"\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"message\": \"Prompt created successfully.\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Invalid input or access denied.\n\n**Example cURL:**\n\n```bash\ncurl -X POST \"https://api.example.com/v3/prompts\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"name\": \"greeting_prompt\",\n           \"template\": \"Hello, {name}! You are {age} years old.\",\n           \"input_types\": { \"name\": \"string\", \"age\": \"integer\" }\n         }'\n```\n\n---\n\n#### 3. Get an Existing Prompt\n\n```http\nGET /v3/prompts/:name\n```\n\n**Description:**\nRetrieves a specific prompt by name, optionally with input values and overrides.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                |\n| :-------- | :----- | :------ | :------------------------- |\n| `name`    | `string` | Yes      | The name of the prompt.    |\n\n**Query Parameters:**\n\n| Parameter         | Type      | Required | Description                             |\n| :---------------- | :-------- | :------ | :-------------------------------------- |\n| `prompt_override` | `string` | No      | Optional custom prompt override.        |\n\n**Request Body:**\n\nA JSON object containing input values for the prompt.\n\n**Example Request Body:**\n\n```json\n{\n  \"inputs\": {\n    \"name\": \"Alice\",\n    \"age\": 30\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"id\": \"prompt_id\",\n    \"name\": \"greeting_prompt\",\n    \"template\": \"Hello, Alice! You are 30 years old.\",\n    \"created_at\": \"2024-01-15T09:30:00Z\",\n    \"updated_at\": \"2024-02-20T10:45:00Z\",\n    \"input_types\": {\n      \"name\": \"string\",\n      \"age\": \"integer\"\n    }\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Invalid prompt name or access denied.\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/prompts/greeting_prompt\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"inputs\": { \"name\": \"Alice\", \"age\": 30 }\n         }'\n```\n\n---\n\n#### 4. Update an Existing Prompt\n\n```http\nPUT /v3/prompts/:name\n```\n\n**Description:**\nUpdates an existing prompt’s template and/or input types. Only superusers can update prompts.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                |\n| :-------- | :----- | :------ | :------------------------- |\n| `name`    | `string` | Yes      | The name of the prompt.    |\n\n**Request Body:**\n\nA JSON object containing the updated template and input types.\n\n**Example Request Body:**\n\n```json\n{\n  \"template\": \"Greetings, {name}! You are {age} years old.\",\n  \"input_types\": {\n    \"name\": \"string\",\n    \"age\": \"integer\",\n    \"location\": \"string\"\n  }\n}\n```\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"message\": \"Prompt updated successfully.\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Invalid prompt name or update parameters.\n\n**Example cURL:**\n\n```bash\ncurl -X PUT \"https://api.example.com/v3/prompts/greeting_prompt\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"template\": \"Greetings, {name}! You are {age} years old.\",\n           \"input_types\": { \"name\": \"string\", \"age\": \"integer\", \"location\": \"string\" }\n         }'\n```\n\n---\n\n#### 5. Delete a Prompt\n\n```http\nDELETE /v3/prompts/:name\n```\n\n**Description:**\nDeletes a prompt by name. Only superusers can delete prompts.\n\n**Path Parameters:**\n\n| Parameter | Type   | Required | Description                |\n| :-------- | :----- | :------ | :------------------------- |\n| `name`    | `string` | Yes      | The name of the prompt.    |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"success\": true\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Invalid prompt name or access denied.\n\n**Example cURL:**\n\n```bash\ncurl -X DELETE \"https://api.example.com/v3/prompts/greeting_prompt\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n## System\n\n### Overview\n\nThe **System** section of the R2R API provides endpoints for monitoring and managing the overall health, logs, settings, and status of the R2R system. These tools are essential for administrators and superusers to ensure the system operates smoothly and efficiently.\n\n### Core Features of System Endpoints\n\n1. **Health Monitoring**\n    - Check the overall health status of the R2R system.\n\n2. **Log Retrieval**\n    - Access system logs for monitoring and debugging purposes.\n\n3. **Settings Management**\n    - Retrieve and manage current configuration settings of the R2R system.\n\n4. **Server Status**\n    - Get real-time information about server uptime and resource usage.\n\n### Available Endpoints\n\n| Method | Endpoint               | Description                                                   |\n| :---- | :--------------------- | :------------------------------------------------------------ |\n| GET    | `/system/logs`         | Retrieve system logs for monitoring and debugging purposes.  |\n| GET    | `/system/health`       | Check the overall health status of the R2R system.           |\n| GET    | `/system/settings`     | Retrieve the current configuration settings of the R2R system. |\n| GET    | `/system/status`       | Retrieve the current server status, including uptime and resource usage. |\n\n### Endpoint Details\n\n#### 1. R2R Logs\n\n```http\nGET /v3/system/logs\n```\n\n**Description:**\nRetrieves system logs for monitoring and debugging purposes.\n\n**Query Parameters:**\n\n| Parameter        | Type      | Required | Description                                  |\n| :--------------- | :-------- | :------ | :------------------------------------------- |\n| `run_type_filter`| `string` | No      | Filter logs based on run type (e.g., \"ingestion\", \"extraction\"). |\n| `offset`         | `integer`| No      | Number of log entries to skip. Defaults to `0`. |\n| `limit`          | `integer`| No      | Number of log entries to return (`1–100`). Defaults to `100`. |\n\n**Successful Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"run_id\": \"run_id\",\n      \"run_type\": \"ingestion\",\n      \"entries\": [\n        {\n          \"key\": \"event\",\n          \"value\": \"Document ingested successfully.\",\n          \"timestamp\": \"2024-01-15T09:30:00Z\",\n          \"user_id\": \"user_id\"\n        }\n      ],\n      \"timestamp\": \"2024-01-15T09:30:00Z\",\n      \"user_id\": \"user_id\"\n    }\n  ],\n  \"total_entries\": 1\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/system/logs?limit=10\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 2. Check System Health\n\n```http\nGET /v3/system/health\n```\n\n**Description:**\nChecks the overall health status of the R2R system, ensuring that all components are functioning correctly.\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"message\": \"System is healthy.\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: System is experiencing issues.\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/system/health\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 3. R2R Settings\n\n```http\nGET /v3/system/settings\n```\n\n**Description:**\nRetrieves the current configuration settings of the R2R system, including prompt configurations and project name.\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"config\": {\n      \"setting_key\": \"setting_value\"\n    },\n    \"prompts\": {\n      \"prompt_name\": \"prompt_template\"\n    },\n    \"r2r_project_name\": \"R2R Project\"\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Access denied or invalid request.\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/system/settings\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n#### 4. Server Status\n\n```http\nGET /v3/system/status\n```\n\n**Description:**\nRetrieves the current server status, including uptime and resource usage statistics.\n\n**Successful Response:**\n\n```json\n{\n  \"results\": {\n    \"start_time\": \"2024-01-01T00:00:00Z\",\n    \"uptime_seconds\": 86400,\n    \"cpu_usage_percent\": 75.5,\n    \"memory_usage_percent\": 65.2\n  }\n}\n```\n\n**Error Response:**\n\n- **422 Unprocessable Entity**: Unable to retrieve server status.\n\n**Example cURL:**\n\n```bash\ncurl -X GET \"https://api.example.com/v3/system/status\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n---\n\n## Common Use Cases\n\nR2R API is designed to support a wide range of use cases, enabling users to harness the full potential of their data. Here are some common scenarios:\n\n1. **Research and Analysis**\n    - **Literature Review:** Ingest and analyze academic papers to extract key entities and relationships.\n    - **Document Summarization:** Automatically generate summaries of large documents for quick insights.\n    - **Relationship Discovery:** Identify and visualize connections between different entities within a dataset.\n    - **Cross-reference Verification:** Ensure consistency and accuracy across related documents.\n\n2. **Question Answering**\n    - **Technical Support:** Provide users with accurate and context-aware responses to technical queries.\n    - **Educational Assistance:** Develop tutoring systems that assist students with their studies by providing relevant information.\n    - **Policy Compliance:** Analyze and respond to queries related to compliance policies within an organization.\n    - **Data Exploration:** Enable users to explore datasets through natural language questions.\n\n3. **Content Generation**\n    - **Report Writing:** Automatically generate comprehensive reports based on ingested data.\n    - **Documentation Creation:** Create detailed documentation for projects, APIs, or processes.\n    - **Content Summarization:** Condense lengthy content into concise summaries for easier consumption.\n    - **Knowledge Synthesis:** Combine information from multiple sources to create unified knowledge bases.\n\n4. **Conversational Applications**\n    - **Interactive Chatbots:** Develop chatbots that engage users in meaningful conversations, leveraging the knowledge graph for accurate responses.\n    - **Virtual Assistants:** Create assistants that help users manage tasks, retrieve information, and perform actions based on conversational inputs.\n    - **Educational Tutors:** Build systems that provide personalized tutoring and learning experiences.\n    - **Research Aids:** Assist researchers in navigating complex datasets and extracting valuable insights through conversation.\n\n---\n\n## Conclusion\n\nThis comprehensive documentation provides an in-depth overview of the **R2R API**, encompassing all available endpoints, their functionalities, request and response structures, and practical usage examples. By leveraging the R2R API, you can effectively manage, retrieve, and interact with your document collections, build sophisticated knowledge graphs, and develop intelligent conversational agents.\n\n### Key Highlights:\n\n- **Document Management:** Efficiently ingest, update, and manage various document types, enabling structured retrieval and analysis.\n- **Chunking & Indexing:** Optimize your data for semantic search and vector-based operations with robust chunking and indexing mechanisms.\n- **Knowledge Graphs:** Build and manage detailed knowledge graphs through entity and relationship extraction, facilitating advanced data exploration.\n- **Retrieval Capabilities:** Harness powerful retrieval features including semantic search, RAG, and conversational agents to interact with your data intelligently.\n- **User & Collection Management:** Control access and collaboration through granular user and collection management features.\n- **System Tools:** Monitor and maintain the health and performance of your R2R system with dedicated system endpoints.\n\nFor further assistance, refer to the [R2R Docs](https://r2r-docs.sciphi.ai) or contact our support team.\n\n---\n\n# **R2R Deployment Guidelines**\n\nWelcome to the **R2R Deployment Guidelines**. This comprehensive guide will walk you through deploying the R2R (Retrieval to Riches) application using Docker and Docker Compose. The deployment includes setting up essential services such as PostgreSQL, RabbitMQ, Hatchet, Unstructured, Graph Clustering, R2R itself, R2R Dashboard, and Nginx. By following these guidelines, you will ensure a smooth and efficient deployment of R2R with all necessary configurations.\n\n---\n\n## **Table of Contents**\n1. [Prerequisites](#prerequisites)\n2. [Deployment Overview](#deployment-overview)\n3. [Setting Up Environment Variables](#setting-up-environment-variables)\n4. [Dockerfile and Dockerfile.unstructured Overview](#dockerfile-and-dockerfileunstructured-overview)\n5. [Docker Compose Configuration](#docker-compose-configuration)\n   - [Networks and Volumes](#networks-and-volumes)\n   - [Services Breakdown](#services-breakdown)\n6. [Building and Running the Deployment](#building-and-running-the-deployment)\n   - [Step 1: Clone the Repository](#step-1-clone-the-repository)\n   - [Step 2: Configure Environment Variables](#step-2-configure-environment-variables)\n   - [Step 3: Build Docker Images](#step-3-build-docker-images)\n   - [Step 4: Deploy Services with Docker Compose](#step-4-deploy-services-with-docker-compose)\n7. [Initial Setup Steps](#initial-setup-steps)\n   - [Creating the Hatchet API Token](#creating-the-hatchet-api-token)\n8. [Accessing R2R and Hatchet Dashboard](#accessing-r2r-and-hatchet-dashboard)\n9. [Configuring Nginx as a Reverse Proxy](#configuring-nginx-as-a-reverse-proxy)\n10. [Configuring R2R](#configuring-r2r)\n11. [Maintenance and Scaling](#maintenance-and-scaling)\n12. [Security Considerations](#security-considerations)\n13. [Troubleshooting](#troubleshooting)\n14. [Conclusion](#conclusion)\n\n---\n\n## **Prerequisites**\n\nBefore proceeding with the deployment, ensure you have the following prerequisites:\n\n- **Operating System**: Linux, macOS, or Windows with WSL 2 (for Windows users).\n- **Docker**: Installed on your system. [Install Docker](https://docs.docker.com/get-docker/).\n- **Docker Compose**: Installed and up-to-date. [Install Docker Compose](https://docs.docker.com/compose/install/).\n- **Git**: To clone the repository. [Install Git](https://git-scm.com/downloads).\n- **Sufficient Resources**: Ensure your system has adequate CPU, memory, and disk space to handle the services.\n\n---\n\n## **Deployment Overview**\n\nThe deployment consists of the following key components:\n\n1. **PostgreSQL with pgvector**: Database for storing relational and vector data.\n2. **Hatchet Services**: Includes Hatchet Postgres, RabbitMQ, Migration, Setup Config, Engine, and Dashboard.\n3. **Unstructured Service**: Handles document processing and parsing.\n4. **Graph Clustering Service**: Manages community detection within knowledge graphs.\n5. **R2R Application**: The core application providing Retrieval-Augmented Generation (RAG) functionalities.\n6. **R2R Dashboard**: User interface for managing R2R.\n7. **Nginx**: Acts as a reverse proxy to route traffic to R2R and other services.\n\nThe deployment is managed using Docker Compose, orchestrating the interaction between these services.\n\n---\n\n## **Setting Up Environment Variables**\n\nEnvironment variables are crucial for configuring services. You can set them directly in your shell or use a `.env` file for Docker Compose.\n\n### **Creating a `.env` File**\n\nCreate a `.env` file in the root directory of your project with the following content:\n\n```dotenv\n# General R2R Settings\nR2R_PORT=7272\nR2R_HOST=0.0.0.0\nR2R_CONFIG_NAME=\nR2R_CONFIG_PATH=/app/config\nR2R_PROJECT_NAME=r2r_default\n\n# PostgreSQL Settings\nR2R_POSTGRES_USER=postgres\nR2R_POSTGRES_PASSWORD=postgres\nR2R_POSTGRES_HOST=postgres\nR2R_POSTGRES_PORT=5432\nR2R_POSTGRES_DBNAME=postgres\nR2R_POSTGRES_MAX_CONNECTIONS=1024\nR2R_POSTGRES_STATEMENT_CACHE_SIZE=100\n\n# Hatchet Settings\nHATCHET_POSTGRES_USER=hatchet_user\nHATCHET_POSTGRES_PASSWORD=hatchet_password\nHATCHET_POSTGRES_DBNAME=hatchet\nHATCHET_CLIENT_GRPC_MAX_RECV_MESSAGE_LENGTH=134217728\nHATCHET_CLIENT_GRPC_MAX_SEND_MESSAGE_LENGTH=134217728\n\n# RabbitMQ Settings\nR2R_RABBITMQ_PORT=5673\nR2R_RABBITMQ_MGMT_PORT=15673\n\n# Graph Clustering Settings\nR2R_GRAPH_CLUSTERING_PORT=7276\n\n# R2R Dashboard Settings\nR2R_DASHBOARD_PORT=7273\n\n# Nginx Settings\nR2R_NGINX_PORT=7280\n\n# API Keys and External Services\nOPENAI_API_KEY=your_openai_api_key\nOPENAI_API_BASE=https://api.openai.com\nANTHROPIC_API_KEY=your_anthropic_api_key\nAZURE_API_KEY=your_azure_api_key\nAZURE_API_BASE=https://api.azure.com\nAZURE_API_VERSION=2023-03-15-preview\nGOOGLE_APPLICATION_CREDENTIALS=/path/to/your/google/credentials.json\nVERTEX_PROJECT=your_vertex_project\nVERTEX_LOCATION=your_vertex_location\nAWS_ACCESS_KEY_ID=your_aws_access_key_id\nAWS_SECRET_ACCESS_KEY=your_aws_secret_access_key\nAWS_REGION_NAME=your_aws_region\nGROQ_API_KEY=your_groq_api_key\nCOHERE_API_KEY=your_cohere_api_key\nANYSCALE_API_KEY=your_anyscale_api_key\nOLLAMA_API_BASE=http://host.docker.internal:11434\nHUGGINGFACE_API_BASE=http://host.docker.internal:8080\nHUGGINGFACE_API_KEY=your_huggingface_api_key\nUNSTRUCTURED_API_KEY=your_unstructured_api_key\nUNSTRUCTURED_API_URL=https://api.unstructured.io/general/v0/general\nUNSTRUCTURED_SERVICE_URL=http://unstructured:7275\nUNSTRUCTURED_NUM_WORKERS=10\nCLUSTERING_SERVICE_URL=http://graph_clustering:7276\n```\n\n> **Note**: Replace placeholder values (e.g., `your_openai_api_key`) with your actual credentials and configurations. Ensure sensitive information like API keys and passwords are securely stored and managed.\n\n---\n\n## **Dockerfile and Dockerfile.unstructured Overview**\n\n### **Dockerfile**\n\nThe `Dockerfile` is used to build the R2R application image.\n\n- **Base Image**: `python:3.12-slim`\n- **System Dependencies**: GCC, G++, Musl-dev, Curl, Libffi-dev, Gfortran, Libopenblas-dev, Poppler-utils, Rust (via Rustup)\n- **Python Dependencies**: Installed via Poetry with extras `core ingestion-bundle`\n- **Final Image**: Copies site-packages and binaries from the builder stage, sets environment variables, exposes the configured port, and runs the application using Uvicorn.\n\n### **Dockerfile.unstructured**\n\nThe `Dockerfile.unstructured` builds the Unstructured service image.\n\n- **Base Image**: `python:3.12-slim`\n- **System Dependencies**: GCC, G++, Musl-dev, Curl, Libffi-dev, Gfortran, Libopenblas-dev, Tesseract-OCR, Libleptonica-dev, Poppler-utils, Libmagic1, Pandoc, LibreOffice, OpenCV dependencies\n- **Python Dependencies**: Installed Unstructured with `unstructured[all-docs]`, Gunicorn, Uvicorn, FastAPI, HTTPX\n- **Final Steps**: Copies `main.py`, exposes port `7275`, and runs the application using Uvicorn with 8 workers.\n\n---\n\n## **Docker Compose Configuration**\n\nDocker Compose orchestrates the deployment of all services. There are three main Docker Compose files provided:\n\n1. **compose.yaml**: Basic setup with PostgreSQL and R2R.\n2. **compose.full.yaml**: Extends `compose.yaml` by adding Hatchet, RabbitMQ, and related services.\n3. **compose.full_with_replicas.yaml**: Further extends `compose.full.yaml` with additional replicas and services.\n\nFor a comprehensive deployment, we'll focus on using `compose.full_with_replicas.yaml`.\n\n### **Networks and Volumes**\n\n#### **Networks**\n\n- **r2r-network**: A bridge network facilitating communication between all services.\n\n#### **Volumes**\n\n- **hatchet_certs**: Stores Hatchet SSL certificates.\n- **hatchet_config**: Configuration files for Hatchet.\n- **hatchet_api_key**: Stores the Hatchet API key.\n- **postgres_data**: Persistent storage for PostgreSQL data.\n- **hatchet_rabbitmq_data**: Persistent storage for RabbitMQ data.\n- **hatchet_rabbitmq_conf**: Configuration files for RabbitMQ.\n- **hatchet_postgres_data**: Persistent storage for Hatchet PostgreSQL data.\n\n> **Note**: Volumes ensure data persistence across container restarts and deployments.\n\n### **Services Breakdown**\n\nBelow is a detailed overview of each service included in `compose.full_with_replicas.yaml`.\n\n1. **PostgreSQL (`postgres`)**\n\n   - **Image**: `pgvector/pgvector:pg16`\n   - **Purpose**: Primary database with vector support for R2R.\n   - **Environment Variables**:\n     - `POSTGRES_USER`: Database username.\n     - `POSTGRES_PASSWORD`: Database password.\n     - `POSTGRES_HOST`: Hostname for the database service.\n     - `POSTGRES_PORT`: Port number.\n     - `POSTGRES_MAX_CONNECTIONS`: Maximum allowed connections.\n   - **Volumes**: `postgres_data` for persistent storage.\n   - **Ports**: Maps `${R2R_POSTGRES_PORT:-5432}` on the host to `5432` in the container.\n   - **Healthcheck**: Ensures PostgreSQL is ready before other services depend on it.\n   - **Restart Policy**: `on-failure`\n\n2. **Hatchet PostgreSQL (`hatchet-postgres`)**\n\n   - **Image**: `postgres:latest`\n   - **Purpose**: Dedicated PostgreSQL instance for Hatchet.\n   - **Environment Variables**:\n     - `POSTGRES_DB`: Database name (default `hatchet`).\n     - `POSTGRES_USER`: Database username (default `hatchet_user`).\n     - `POSTGRES_PASSWORD`: Database password (default `hatchet_password`).\n   - **Volumes**: `hatchet_postgres_data` for persistent storage.\n   - **Healthcheck**: Ensures Hatchet PostgreSQL is ready.\n\n3. **RabbitMQ (`hatchet-rabbitmq`)**\n\n   - **Image**: `rabbitmq:3-management`\n   - **Purpose**: Message broker for Hatchet orchestration.\n   - **Environment Variables**:\n     - `RABBITMQ_DEFAULT_USER`: Default RabbitMQ user (`user`).\n     - `RABBITMQ_DEFAULT_PASS`: Default RabbitMQ password (`password`).\n   - **Ports**:\n     - `${R2R_RABBITMQ_PORT:-5673}` on the host to `5672` in the container.\n     - `${R2R_RABBITMQ_MGMT_PORT:-15673}` on the host to `15672` in the container.\n   - **Volumes**:\n     - `hatchet_rabbitmq_data`: Persistent storage for RabbitMQ data.\n     - `hatchet_rabbitmq_conf`: Configuration files for RabbitMQ.\n   - **Healthcheck**: Ensures RabbitMQ is operational.\n\n4. **Hatchet Create DB (`hatchet-create-db`)**\n\n   - **Image**: `postgres:latest`\n   - **Purpose**: Initializes the Hatchet database if it doesn't exist.\n   - **Command**: Waits for PostgreSQL to be ready and creates the database if absent.\n   - **Environment Variables**:\n     - `DATABASE_URL`: Connection string for Hatchet PostgreSQL.\n   - **Depends On**: `hatchet-postgres`\n   - **Networks**: `r2r-network`\n\n5. **Hatchet Migration (`hatchet-migration`)**\n\n   - **Image**: `ghcr.io/hatchet-dev/hatchet/hatchet-migrate:latest`\n   - **Purpose**: Applies database migrations for Hatchet.\n   - **Environment Variables**:\n     - `DATABASE_URL`: Connection string for Hatchet PostgreSQL.\n   - **Depends On**: `hatchet-create-db`\n   - **Networks**: `r2r-network`\n\n6. **Hatchet Setup Config (`hatchet-setup-config`)**\n\n   - **Image**: `ghcr.io/hatchet-dev/hatchet/hatchet-admin:latest`\n   - **Purpose**: Configures Hatchet with initial settings.\n   - **Command**: Runs Hatchet admin quickstart with specific options.\n   - **Environment Variables**:\n     - `DATABASE_URL`: Connection string for Hatchet PostgreSQL.\n     - `HATCHET_CLIENT_GRPC_MAX_RECV_MESSAGE_LENGTH`: GRPC settings.\n     - Other Hatchet-specific configurations.\n   - **Volumes**:\n     - `hatchet_certs`: SSL certificates.\n     - `hatchet_config`: Configuration files.\n   - **Depends On**:\n     - `hatchet-migration`\n     - `hatchet-rabbitmq`\n   - **Networks**: `r2r-network`\n\n7. **Hatchet Engine (`hatchet-engine`)**\n\n   - **Image**: `ghcr.io/hatchet-dev/hatchet/hatchet-engine:latest`\n   - **Purpose**: Core engine for Hatchet operations.\n   - **Command**: Runs Hatchet engine with specified configuration.\n   - **Environment Variables**:\n     - `DATABASE_URL`: Connection string for Hatchet PostgreSQL.\n     - GRPC settings.\n   - **Ports**: Maps `${R2R_HATCHET_ENGINE_PORT:-7077}` on the host to `7077` in the container.\n   - **Volumes**:\n     - `hatchet_certs`: SSL certificates.\n     - `hatchet_config`: Configuration files.\n   - **Healthcheck**: Ensures the Hatchet engine is live.\n   - **Depends On**: `hatchet-setup-config`\n   - **Restart Policy**: `on-failure`\n\n8. **Hatchet Dashboard (`hatchet-dashboard`)**\n\n   - **Image**: `ghcr.io/hatchet-dev/hatchet/hatchet-dashboard:latest`\n   - **Purpose**: Web interface for managing Hatchet.\n   - **Command**: Runs Hatchet dashboard with specified configuration.\n   - **Environment Variables**:\n     - `DATABASE_URL`: Connection string for Hatchet PostgreSQL.\n   - **Ports**: Maps `${R2R_HATCHET_DASHBOARD_PORT:-7274}` on the host to `80` in the container.\n   - **Volumes**:\n     - `hatchet_certs`: SSL certificates.\n     - `hatchet_config`: Configuration files.\n   - **Depends On**: `hatchet-setup-config`\n   - **Networks**: `r2r-network`\n\n9. **Setup Token (`setup-token`)**\n\n   - **Image**: `ghcr.io/hatchet-dev/hatchet/hatchet-admin:latest`\n   - **Purpose**: Generates and stores the Hatchet API token.\n   - **Command**: Executes a shell script to create and validate the API token.\n   - **Volumes**:\n     - `hatchet_certs`: SSL certificates.\n     - `hatchet_config`: Configuration files.\n     - `hatchet_api_key`: Stores the generated API key.\n   - **Depends On**: `hatchet-setup-config`\n   - **Networks**: `r2r-network`\n\n10. **Unstructured (`unstructured`)**\n\n    - **Image**: `${UNSTRUCTURED_IMAGE:-ragtoriches/unst-prod}`\n    - **Purpose**: Handles document parsing and processing.\n    - **Healthcheck**: Ensures the Unstructured service is operational.\n    - **Networks**: `r2r-network`\n\n11. **Graph Clustering (`graph_clustering`)**\n\n    - **Image**: `${GRAPH_CLUSTERING_IMAGE:-ragtoriches/cluster-prod}`\n    - **Purpose**: Manages community detection within knowledge graphs.\n    - **Ports**: Maps `${R2R_GRAPH_CLUSTERING_PORT:-7276}` on the host to `7276` in the container.\n    - **Healthcheck**: Ensures the Graph Clustering service is operational.\n    - **Networks**: `r2r-network`\n\n12. **R2R (`r2r`)**\n\n    - **Image**: `${R2R_IMAGE:-ragtoriches/prod:latest}`\n    - **Build Context**: Current directory (`.`)\n    - **Environment Variables**:\n      - General R2R settings (`R2R_PORT`, `R2R_HOST`, etc.).\n      - PostgreSQL connection details.\n      - API keys for external services (OpenAI, Anthropic, Azure, etc.).\n      - Hatchet and Graph Clustering settings.\n    - **Command**: Sets the Hatchet API token and starts the R2R application using Uvicorn.\n    - **Healthcheck**: Ensures the R2R application is operational.\n    - **Restart Policy**: `on-failure`\n    - **Volumes**:\n      - `${R2R_CONFIG_PATH:-/}`: Configuration directory.\n      - `hatchet_api_key`: Read-only access to the Hatchet API key.\n    - **Extra Hosts**: Adds `host.docker.internal` to facilitate communication with host services.\n    - **Depends On**:\n      - `setup-token`\n      - `unstructured`\n    - **Networks**: `r2r-network`\n\n13. **R2R Dashboard (`r2r-dashboard`)**\n\n    - **Image**: `emrgntcmplxty/r2r-dashboard:latest`\n    - **Environment Variables**:\n      - `NEXT_PUBLIC_R2R_DEPLOYMENT_URL`: URL to the R2R API.\n      - `NEXT_PUBLIC_HATCHET_DASHBOARD_URL`: URL to the Hatchet Dashboard.\n    - **Ports**: Maps `${R2R_DASHBOARD_PORT:-7273}` on the host to `3000` in the container.\n    - **Networks**: `r2r-network`\n\n14. **Nginx (`nginx`)**\n\n    - **Image**: `nginx:latest`\n    - **Purpose**: Acts as a reverse proxy to route traffic to R2R and other services.\n    - **Ports**: Maps `${R2R_NGINX_PORT:-7280}` on the host to `80` in the container.\n    - **Volumes**: Mounts `nginx.conf` from the host to the container.\n    - **Depends On**: `r2r`\n    - **Deploy Resources**:\n      - Limits CPU to `0.5`\n      - Limits memory to `512M`\n    - **Healthcheck**: Ensures Nginx is operational.\n    - **Networks**: `r2r-network`\n\n> **Note**: Ensure that `nginx.conf` is properly configured to proxy requests to the appropriate services.\n\n---\n\n## **Building and Running the Deployment**\n\n### **Step 1: Clone the Repository**\n\nFirst, clone the R2R repository containing all necessary deployment files.\n\n```bash\ngit clone https://github.com/SciPhi-AI/r2r.git\ncd r2r\n```\n\n> **Note**: Replace the repository URL with the actual URL if different.\n\n### **Step 2: Configure Environment Variables**\n\nEnsure that all necessary environment variables are set. You can use the `.env` file method described earlier.\n\n```bash\ncp .env.example .env\n# Edit the .env file with your specific configurations\nnano .env\n```\n\n> **Tip**: Use a text editor of your choice (e.g., `vim`, `nano`) to edit the `.env` file.\n\n### **Step 3: Build Docker Images**\n\nBuild the Docker images using the provided `Dockerfile` and `Dockerfile.unstructured`.\n\n```bash\n# Build the R2R application image\ndocker build -t r2r-app -f Dockerfile .\n\n# Build the Unstructured service image\ndocker build -t unstructured-service -f Dockerfile.unstructured .\n```\n\n> **Note**: Ensure Docker is running before executing these commands. The build process may take several minutes.\n\n### **Step 4: Deploy Services with Docker Compose**\n\nUse Docker Compose to deploy all services as defined in `compose.full_with_replicas.yaml`.\n\n```bash\ndocker-compose -f compose.full_with_replicas.yaml up -d\n```\n\n> **Flags Explained**:\n> - `-f compose.full_with_replicas.yaml`: Specifies the Docker Compose file to use.\n> - `up`: Builds, (re)creates, starts, and attaches to containers for a service.\n> - `-d`: Runs containers in the background (detached mode).\n\n> **Monitoring Deployment**:\n> You can monitor the status of your services using:\n> ```bash\n> docker-compose -f compose.full_with_replicas.yaml ps\n> ```\n\n---\n\n## **Initial Setup Steps**\n\nAfter deploying the services, perform the following initial setup steps to configure Hatchet and R2R.\n\n### **Creating the Hatchet API Token**\n\nThe `setup-token` service is responsible for generating the Hatchet API token, which R2R uses to communicate with Hatchet.\n\n1. **Ensure `setup-token` Service is Running**\n\n   The `setup-token` service should have already been started by Docker Compose. Verify its status:\n\n   ```bash\n   docker-compose -f compose.full_with_replicas.yaml ps\n   ```\n\n2. **Verify Token Generation**\n\n   The token is stored in the `hatchet_api_key` volume. To retrieve the token:\n\n   ```bash\n   docker exec -it <r2r_container_name> cat /hatchet_api_key/api_key.txt\n   ```\n\n   Replace `<r2r_container_name>` with the actual container name, which can be found using:\n\n   ```bash\n   docker-compose -f compose.full_with_replicas.yaml ps\n   ```\n\n3. **Set Hatchet API Token Environment Variable**\n\n   Ensure that the `HATCHET_CLIENT_TOKEN` environment variable is correctly set in the `r2r` service. This is handled automatically by the `r2r` service command, which reads the token from the `hatchet_api_key` volume.\n\n---\n\n## **Accessing R2R and Hatchet Dashboard**\n\n### **R2R API**\n\n- **URL**: `http://<your-server-ip>:7272`\n- **Health Check Endpoint**: `http://<your-server-ip>:7272/v3/health`\n\n### **Hatchet Dashboard**\n\n- **URL**: `http://<your-server-ip>:7274`\n\n### **R2R Dashboard**\n\n- **URL**: `http://<your-server-ip>:7273`\n\n### **Nginx Reverse Proxy**\n\n- **URL**: `http://<your-server-ip>:7280`\n\n> **Note**: Replace `<your-server-ip>` with your server's actual IP address or domain name. Ensure that the specified ports are open and accessible.\n\n---\n\n## **Configuring Nginx as a Reverse Proxy**\n\nNginx serves as a reverse proxy, directing incoming traffic to the appropriate services based on the configuration in `nginx.conf`.\n\n### **Sample `nginx.conf`**\n\nEnsure you have an `nginx.conf` file in your project root with appropriate proxy settings. Here's a basic example:\n\n```nginx\nworker_processes 1;\n\nevents { worker_connections 1024; }\n\nhttp {\n    server {\n        listen 80;\n\n        location /api/ {\n            proxy_pass http://r2r:7272/;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n\n        location /dashboard/ {\n            proxy_pass http://r2r-dashboard:3000/;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n\n        location /hatchet-dashboard/ {\n            proxy_pass http://hatchet-dashboard:80/;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n\n        location / {\n            proxy_pass http://nginx:80/;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n}\n```\n\n> **Customization**: Modify `nginx.conf` according to your routing needs. Ensure that service names in `proxy_pass` match the service names defined in Docker Compose.\n\n### **Reloading Nginx Configuration**\n\nAfter updating `nginx.conf`, reload Nginx to apply changes:\n\n```bash\ndocker-compose -f compose.full_with_replicas.yaml exec nginx nginx -s reload\n```\n\n---\n\n## **Configuring R2R**\n\nR2R's behavior is controlled via the `r2r.toml` file. Ensure this file is correctly configured before starting the services.\n\n### **Sample `r2r.toml`**\n\nBelow is a sample `r2r.toml` with essential configurations:\n\n```toml\n[app]\ndefault_max_documents_per_user = 100\ndefault_max_chunks_per_user = 10000\ndefault_max_collections_per_user = 10\n\n[agent]\nsystem_instruction_name = \"rag_agent\"\ntool_names = [\"local_search\"]\n\n  [agent.generation_config]\n  model = \"openai/gpt-4o\"\n\n[auth]\nprovider = \"r2r\"\naccess_token_lifetime_in_minutes = 60\nrefresh_token_lifetime_in_days = 7\nrequire_authentication = false\nrequire_email_verification = false\ndefault_admin_email = \"admin@example.com\"\ndefault_admin_password = \"change_me_immediately\"\n\n[completion]\nprovider = \"litellm\"\nconcurrent_request_limit = 64\n\n  [completion.generation_config]\n  model = \"openai/gpt-4o\"\n  temperature = 0.1\n  top_p = 1\n  max_tokens_to_sample = 1024\n  stream = false\n  add_generation_kwargs = { }\n\n[crypto]\nprovider = \"bcrypt\"\n\n[database]\nprovider = \"postgres\"\ndefault_collection_name = \"Default\"\ndefault_collection_description = \"Your default collection.\"\nbatch_size = 256\n\n  [database.graph_creation_settings]\n    clustering_mode = \"local\"\n    graph_entity_description_prompt = \"graphrag_entity_description\"\n    entity_types = []\n    relation_types = []\n    fragment_merge_count = 1\n    max_knowledge_relationships = 100\n    max_description_input_length = 65536\n    generation_config = { model = \"openai/gpt-4o-mini\" }\n\n  [database.graph_enrichment_settings]\n    community_reports_prompt = \"graphrag_community_reports\"\n    max_summary_input_length = 65536\n    generation_config = { model = \"openai/gpt-4o-mini\" }\n    leiden_params = {}\n\n  [database.graph_search_settings]\n    generation_config = { model = \"openai/gpt-4o-mini\" }\n\n  [database.limits]\n    global_per_min = 300\n    monthly_limit = 10000\n\n  [database.route_limits]\n    \"/v3/retrieval/search\" = { route_per_min = 120 }\n    \"/v3/retrieval/rag\" = { route_per_min = 30 }\n\n[embedding]\nprovider = \"litellm\"\nbase_model = \"openai/text-embedding-3-small\"\nbase_dimension = 512\nbatch_size = 128\nadd_title_as_prefix = false\nconcurrent_request_limit = 256\nquantization_settings = { quantization_type = \"FP32\" }\n\n[file]\nprovider = \"postgres\"\n\n[ingestion]\nprovider = \"r2r\"\nchunking_strategy = \"recursive\"\nchunk_size = 1024\nchunk_overlap = 512\nexcluded_parsers = [\"mp4\"]\ndocument_summary_model = \"openai/gpt-4o-mini\"\nvision_img_model = \"openai/gpt-4o\"\nvision_pdf_model = \"openai/gpt-4o\"\n\n  [ingestion.chunk_enrichment_settings]\n    enable_chunk_enrichment = false\n    strategies = [\"semantic\", \"neighborhood\"]\n    forward_chunks = 3\n    backward_chunks = 3\n    semantic_neighbors = 10\n    semantic_similarity_threshold = 0.7\n    generation_config = { model = \"openai/gpt-4o-mini\" }\n\n  [ingestion.extra_parsers]\n    pdf = \"zerox\"\n\n[logging]\nprovider = \"r2r\"\nlog_table = \"logs\"\nlog_info_table = \"log_info\"\n\n[orchestration]\nprovider = \"simple\"\n\n[prompt]\nprovider = \"r2r\"\n\n[email]\nprovider = \"console_mock\"\n```\n\n### **Key Configuration Sections**\n\n- **[app]**: Sets default limits for documents, chunks, and collections per user.\n- **[agent]**: Configures the RAG agent, specifying tools and generation models.\n- **[auth]**: Authentication settings, including token lifetimes and default admin credentials.\n- **[completion]**: Settings for text completion, including provider and generation configurations.\n- **[crypto]**: Cryptographic provider.\n- **[database]**: PostgreSQL settings, knowledge graph configurations, and rate limits.\n- **[embedding]**: Embedding provider configurations.\n- **[file]**: File storage provider.\n- **[ingestion]**: Data ingestion settings, including chunking strategies and enrichment configurations.\n- **[logging]**: Logging provider and tables.\n- **[orchestration]**: Orchestration provider settings.\n- **[prompt]**: Prompt management provider.\n- **[email]**: Email provider settings.\n\n> **Customization**: Adjust the `r2r.toml` file according to your specific requirements. Ensure that all paths, models, and service URLs match your deployment environment.\n\n---\n\n## **Maintenance and Scaling**\n\n### **Vector Indices**\n\n**Do You Need Vector Indices?**\n\nVector indices enhance search capabilities but are not necessary for all deployments, especially in multi-user environments with user-specific filtering.\n\n**When to Implement Vector Indices:**\n\n- Large-scale searches across hundreds of thousands of documents.\n- When query latency becomes a bottleneck.\n- Supporting cross-user search functionalities.\n\n**Vector Index Management:**\n\nR2R supports various indexing methods, with HNSW (Hierarchical Navigable Small World) recommended for most use cases.\n\n**Example: Creating and Deleting a Vector Index**\n\n```python\nfrom r2r import R2RClient\n\nclient = R2RClient()\n\n# Create vector index\ncreate_response = client.indices.create(\n    {\n        \"table_name\": \"vectors\",\n        \"index_method\": \"hnsw\",\n        \"index_measure\": \"cosine_distance\",\n        \"index_arguments\": {\n            \"m\": 16,\n            \"ef_construction\": 64\n        },\n    }\n)\n\n# List existing indices\nindices = client.indices.list()\n\n# Delete an index\ndelete_response = client.indices.delete(\n    index_name=\"ix_vector_cosine_ops_hnsw__20241021211541\",\n    table_name=\"vectors\",\n)\n\nprint('delete_response = ', delete_response)\n```\n\n**Important Considerations:**\n\n1. **Pre-warming**: New indices start \"cold\" and require warming for optimal performance.\n2. **Resource Usage**: Index creation is CPU and memory-intensive. Perform during off-peak hours.\n3. **Performance Tuning**:\n   - **HNSW Parameters**:\n     - `m`: 16-64 (higher = better quality, more memory)\n     - `ef_construction`: 64-100 (higher = better quality, longer build time)\n   - **Distance Measures**:\n     - `cosine_distance`: Best for normalized vectors.\n     - `l2_distance`: Better for absolute distances.\n     - `max_inner_product`: Optimized for dot product similarity.\n\n### **System Updates and Maintenance**\n\n**Version Management**\n\nCheck the current R2R version:\n\n```bash\ndocker-compose -f compose.full_with_replicas.yaml exec r2r r2r version\n```\n\n**Update Process**\n\n1. **Prepare for Update**\n\n   ```bash\n   docker-compose -f compose.full_with_replicas.yaml exec r2r r2r version\n   docker-compose -f compose.full_with_replicas.yaml exec r2r r2r db current\n   docker-compose -f compose.full_with_replicas.yaml exec r2r r2r generate-report\n   ```\n\n2. **Stop Running Services**\n\n   ```bash\n   docker-compose -f compose.full_with_replicas.yaml down\n   ```\n\n3. **Update R2R**\n\n   ```bash\n   docker-compose -f compose.full_with_replicas.yaml pull\n   docker-compose -f compose.full_with_replicas.yaml up -d --build\n   ```\n\n4. **Update Database**\n\n   ```bash\n   docker-compose -f compose.full_with_replicas.yaml exec r2r r2r db upgrade\n   ```\n\n5. **Restart Services**\n\n   ```bash\n   docker-compose -f compose.full_with_replicas.yaml up -d\n   ```\n\n**Database Migration Management**\n\nCheck current migration:\n\n```bash\ndocker-compose -f compose.full_with_replicas.yaml exec r2r r2r db current\n```\n\nApply migrations:\n\n```bash\ndocker-compose -f compose.full_with_replicas.yaml exec r2r r2r db upgrade\n```\n\nRollback if necessary:\n\n```bash\ndocker-compose -f compose.full_with_replicas.yaml exec r2r r2r db downgrade --revision <previous-working-version>\n```\n\n### **Managing Multiple Environments**\n\nUse different project names and schemas for development, staging, and production environments.\n\n**Example:**\n\n```bash\n# Development\nexport R2R_PROJECT_NAME=r2r_dev\ndocker-compose -f compose.full_with_replicas.yaml up -d\n\n# Staging\nexport R2R_PROJECT_NAME=r2r_staging\ndocker-compose -f compose.full_with_replicas.yaml up -d\n\n# Production\nexport R2R_PROJECT_NAME=r2r_prod\ndocker-compose -f compose.full_with_replicas.yaml up -d\n```\n\n---\n\n## **Security Considerations**\n\nEnsuring the security of your deployment is paramount. Follow these best practices to secure your R2R deployment.\n\n1. **Secure Environment Variables**\n\n   - Store sensitive information like API keys and passwords securely.\n   - Avoid hardcoding secrets in configuration files. Use environment variables or secret management tools.\n\n2. **Use HTTPS**\n\n   - Configure Nginx to use HTTPS with valid SSL certificates to encrypt data in transit.\n   - Update `nginx.conf` to include SSL configurations.\n\n3. **Restrict Access to Services**\n\n   - Limit access to PostgreSQL and RabbitMQ to only necessary services.\n   - Use firewall rules to restrict external access to sensitive ports.\n\n4. **Strong Passwords**\n\n   - Use strong, unique passwords for all services, especially for PostgreSQL and RabbitMQ.\n   - Regularly update and rotate passwords.\n\n5. **Enable Authentication and Verification**\n\n   - In `r2r.toml`, set `require_authentication = true` and `require_email_verification = true` for production environments.\n   - Update default admin credentials immediately after deployment.\n\n6. **Rate Limiting**\n\n   - Configure rate limits in `r2r.toml` to prevent abuse:\n     ```toml\n     [database.route_limits]\n       \"/v3/retrieval/search\" = { route_per_min = 120 }\n       \"/v3/retrieval/rag\" = { route_per_min = 30 }\n     ```\n\n7. **Regular Security Audits**\n\n   - Periodically review logs and monitor for suspicious activities.\n   - Keep all services and dependencies updated with the latest security patches.\n\n8. **Secure Nginx Configuration**\n\n   - Ensure Nginx is properly configured to prevent vulnerabilities like open redirects and XSS attacks.\n   - Implement security headers:\n     ```nginx\n     add_header X-Content-Type-Options nosniff;\n     add_header X-Frame-Options DENY;\n     add_header X-XSS-Protection \"1; mode=block\";\n     add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n     ```\n\n---\n\n## **Troubleshooting**\n\nDeployments can encounter issues. Below are common problems and their solutions.\n\n1. **Service Not Starting**\n\n   - **Check Logs**:\n     ```bash\n     docker-compose -f compose.full_with_replicas.yaml logs <service_name>\n     ```\n   - **Example**:\n     ```bash\n     docker-compose -f compose.full_with_replicas.yaml logs r2r\n     ```\n\n2. **Database Connection Issues**\n\n   - **Verify Environment Variables**: Ensure `R2R_POSTGRES_HOST`, `R2R_POSTGRES_PORT`, `R2R_POSTGRES_USER`, and `R2R_POSTGRES_PASSWORD` are correct.\n   - **Check Service Status**:\n     ```bash\n     docker-compose -f compose.full_with_replicas.yaml ps\n     ```\n\n3. **Healthchecks Failing**\n\n   - **Inspect Health Status**:\n     ```bash\n     docker inspect --format='{{json .State.Health}}' <container_name>\n     ```\n   - **Restart Services**:\n     ```bash\n     docker-compose -f compose.full_with_replicas.yaml restart <service_name>\n     ```\n\n4. **API Not Responding**\n\n   - **Ensure R2R is Running**:\n     ```bash\n     docker-compose -f compose.full_with_replicas.yaml ps\n     ```\n   - **Check Network Connectivity**:\n     ```bash\n     docker-compose -f compose.full_with_replicas.yaml exec r2r ping postgres\n     ```\n\n5. **Token Generation Issues**\n\n   - **Verify `setup-token` Service Logs**:\n     ```bash\n     docker-compose -f compose.full_with_replicas.yaml logs setup-token\n     ```\n   - **Ensure `hatchet_api_key` Volume is Mounted Correctly**\n\n6. **Nginx Proxy Issues**\n\n   - **Check Nginx Configuration**: Ensure `nginx.conf` correctly routes traffic.\n   - **Reload Nginx**:\n     ```bash\n     docker-compose -f compose.full_with_replicas.yaml exec nginx nginx -s reload\n     ```\n\n7. **Unstructured Service Failures**\n\n   - **Check Dependencies**: Ensure all system dependencies are installed.\n   - **Inspect Logs**:\n     ```bash\n     docker-compose -f compose.full_with_replicas.yaml logs unstructured\n     ```\n\n---\n\n## **Conclusion**\n\nDeploying R2R involves orchestrating multiple services to work seamlessly together. By following this guide, you should be able to set up a robust and secure R2R deployment tailored to your needs. Remember to regularly update your services, monitor performance, and enforce security best practices to maintain the integrity and efficiency of your R2R application.\n\nFor further assistance, refer to the [R2R Comprehensive Documentation](#) or reach out to the [SciPhi AI Support Team](mailto:support@sciphi.ai).\n"
        },
        {
          "name": "py",
          "type": "tree",
          "content": null
        },
        {
          "name": "services",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}