{
  "metadata": {
    "timestamp": 1736559865998,
    "page": 623,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Janspiry/Image-Super-Resolution-via-Iterative-Refinement",
      "stars": 3670,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.7783203125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nexperiments/*\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n*.lmdb\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.736328125,
          "content": "# Image Super-Resolution via Iterative Refinement\n\n[Paper](https://arxiv.org/pdf/2104.07636.pdf ) |  [Project](https://iterative-refinement.github.io/ )\n\n## Brief\n\nThis is an unofficial implementation of **Image Super-Resolution via Iterative Refinement(SR3)** by **PyTorch**.\n\nThere are some implementation details that may vary from the paper's description, which may be different from the actual `SR3` structure due to details missing. Specifically, we:\n\n- Used the ResNet block and channel concatenation style like vanilla `DDPM`.\n- Used the attention mechanism in low-resolution features ( $16 \\times 16$ ) like vanilla `DDPM`.\n- Encode the $\\gamma$ as `FilM` structure did in `WaveGrad`, and embed it without affine transformation.\n- Define the posterior variance as $\\dfrac{1-\\gamma_{t-1}}{1-\\gamma_{t}} \\beta_t$  rather than $\\beta_t$,  which gives similar results to the vanilla paper.\n\n**If you just want to upscale $(64 \\times 64)\\text{px} \\rightarrow (512 \\times 512)\\text{px}$ images using the pre-trained model, check out [this google colab script](https://colab.research.google.com/drive/1G1txPI1GKueKH0cSi_DgQFKwfyJOXlhY?usp=sharing).**\n\n## Status\n\n**★★★ NEW: The follow-up [Palette-Image-to-Image-Diffusion-Models](https://arxiv.org/abs/2111.05826) is now available; See the details [here](https://github.com/Janspiry/Palette-Image-to-Image-Diffusion-Models) ★★★**\n\n### Conditional Generation (with Super Resolution)\n\n- [x] 16×16 -> 128×128 on FFHQ-CelebaHQ\n- [x] 64×64 -> 512×512 on FFHQ-CelebaHQ\n\n### Unconditional Generation\n\n- [x] 128×128 face generation on FFHQ\n- [ ] ~~1024×1024 face generation by a cascade of 3 models~~\n\n### Training Step\n\n- [x] log / logger\n- [x] metrics evaluation\n- [x] multi-gpu support\n- [x] resume training / pretrained model\n- [x] validate alone script\n- [x] [Weights and Biases Logging](https://github.com/Janspiry/Image-Super-Resolution-via-Iterative-Refinement/pull/44) 🌟 NEW\n\n\n\n## Results\n\n*Note:*  We set the maximum reverse steps budget to $2000$. We limited the model parameters in `Nvidia 1080Ti`, **image noise** and **hue deviation** occasionally appear in high-resolution images, resulting in low scores.  There is a lot of room for optimization.  **We are welcome to any contributions for more extensive experiments and code enhancements.**\n\n| Tasks/Metrics        | SSIM(+) | PSNR(+) | FID(-)  | IS(+)   |\n| -------------------- | ----------- | -------- | ---- | ---- |\n| 16×16 -> 128×128 | 0.675       | 23.26    | - | - |\n| 64×64 -> 512×512     | 0.445 | 19.87 | - | - |\n| 128×128 | - | - | | |\n| 1024×1024 | - | - |      |      |\n\n- #### 16×16 -> 128×128 on FFHQ-CelebaHQ [[More Results](https://drive.google.com/drive/folders/1Vk1lpHzbDf03nME5fV9a-lWzSh3kMK14?usp=sharing)]\n\n| <img src=\"./misc/sr_process_16_128_0.png\" alt=\"show\" style=\"zoom:90%;\" /> |  <img src=\"./misc/sr_process_16_128_1.png\" alt=\"show\" style=\"zoom:90%;\" />    |   <img src=\"./misc/sr_process_16_128_2.png\" alt=\"show\" style=\"zoom:90%;\" />   |\n| ------------------------------------------------------------ | ---- | ---- |\n\n- #### 64×64 -> 512×512 on FFHQ-CelebaHQ [[More Results](https://drive.google.com/drive/folders/1yp_4xChPSZUeVIgxbZM-e3ZSsSgnaR9Z?usp=sharing)]\n\n| <img src=\"./misc/sr_64_512_0_inf.png\" alt=\"show\" style=\"zoom:90%;\" /> | <img src=\"./misc/sr_64_512_0_sr.png\" alt=\"show\" style=\"zoom:90%;\" /> | <img src=\"./misc/sr_64_512_0_hr.png\" alt=\"show\" style=\"zoom:90%;\" /> |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| <img src=\"./misc/sr_64_512_1_sr.png\" alt=\"show\" style=\"zoom:90%;\" /> | <img src=\"./misc/sr_64_512_2_sr.png\" alt=\"show\" style=\"zoom:90%;\" /> | <img src=\"./misc/sr_64_512_3_sr.png\" alt=\"show\" style=\"zoom:90%;\" /> |\n\n- #### 128×128 face generation on FFHQ [[More Results](https://drive.google.com/drive/folders/13AsjRwDw4wMmL0bK7wPd2rP7ds7eyAMh?usp=sharing)]\n\n| <img src=\"./misc/sample_process_128_0.png\" alt=\"show\" style=\"zoom:90%;\" /> |  <img src=\"./misc/sample_process_128_1.png\" alt=\"show\" style=\"zoom:90%;\" />    |   <img src=\"./misc/sample_process_128_2.png\" alt=\"show\" style=\"zoom:90%;\" />   |\n| ------------------------------------------------------------ | ---- | ---- |\n\n\n\n## Usage\n### Environment\n```python\npip install -r requirement.txt\n```\n\n### Pretrained Model\n\nThis paper is based on \"Denoising Diffusion Probabilistic Models\", and we build both DDPM/SR3 network structures, which use timesteps/gamma as model embedding inputs, respectively. In our experiments, the SR3 model can achieve better visual results with the same reverse steps and learning rate. You can select the JSON files with annotated suffix names to train the different models.\n\n| Tasks                             | Platform（Code：qwer)                                        | \n| --------------------------------- | ------------------------------------------------------------ |\n| 16×16 -> 128×128 on FFHQ-CelebaHQ | [Google Drive](https://drive.google.com/drive/folders/12jh0K8XoM1FqpeByXvugHHAF3oAZ8KRu?usp=sharing)\\|[Baidu Yun](https://pan.baidu.com/s/1OzsGZA2Vmq1ZL_VydTbVTQ) |  \n| 64×64 -> 512×512 on FFHQ-CelebaHQ | [Google Drive](https://drive.google.com/drive/folders/1mCiWhFqHyjt5zE4IdA41fjFwCYdqDzSF?usp=sharing)\\|[Baidu Yun](https://pan.baidu.com/s/1orzFmVDxMmlXQa2Ty9zY3g) |   \n| 128×128 face generation on FFHQ   | [Google Drive](https://drive.google.com/drive/folders/1ldukMgLKAxE7qiKdFJlu-qubGlnW-982?usp=sharing)\\|[Baidu Yun](https://pan.baidu.com/s/1Vsd08P1A-48OGmnRV0E7Fg ) | \n\n```python\n# Download the pretrained model and edit [sr|sample]_[ddpm|sr3]_[resolution option].json about \"resume_state\":\n\"resume_state\": [your pretrained model's path]\n```\n\n### Data Prepare\n\n#### New Start\n\nIf you didn't have the data, you can prepare it by following steps:\n\n- [FFHQ 128×128](https://github.com/NVlabs/ffhq-dataset) | [FFHQ 512×512](https://www.kaggle.com/arnaud58/flickrfaceshq-dataset-ffhq)\n- [CelebaHQ 256×256](https://www.kaggle.com/badasstechie/celebahq-resized-256x256) | [CelebaMask-HQ 1024×1024](https://drive.google.com/file/d/1badu11NqxGf6qM3PTTooQDJvQbejgbTv/view)\n\nDownload the dataset and prepare it in **LMDB** or **PNG** format using script.\n\n```python\n# Resize to get 16×16 LR_IMGS and 128×128 HR_IMGS, then prepare 128×128 Fake SR_IMGS by bicubic interpolation\npython data/prepare_data.py  --path [dataset root]  --out [output root] --size 16,128 -l\n```\n\nthen you need to change the datasets config to your data path and image resolution: \n\n```json\n\"datasets\": {\n    \"train\": {\n        \"dataroot\": \"dataset/ffhq_16_128\", // [output root] in prepare.py script\n        \"l_resolution\": 16, // low resolution need to super_resolution\n        \"r_resolution\": 128, // high resolution\n        \"datatype\": \"lmdb\", //lmdb or img, path of img files\n    },\n    \"val\": {\n        \"dataroot\": \"dataset/celebahq_16_128\", // [output root] in prepare.py script\n    }\n},\n```\n\n#### Own Data\n\nYou also can use your image data by following steps, and we have some examples in dataset folder.\n\nAt first, you should organize the images layout like this, this step can be finished by `data/prepare_data.py` automatically:\n\n```shell\n# set the high/low resolution images, bicubic interpolation images path \ndataset/celebahq_16_128/\n├── hr_128 # it's same with sr_16_128 directory if you don't have ground-truth images.\n├── lr_16 # vinilla low resolution images\n└── sr_16_128 # images ready to super resolution\n```\n\n```python\n# super resolution from 16 to 128\npython data/prepare_data.py  --path [dataset root]  --out celebahq --size 16,128 -l\n```\n\n*Note: Above script can be used whether you have the vanilla high-resolution images or not.*\n\nthen you need to change the dataset config to your data path and image resolution: \n\n```json\n\"datasets\": {\n    \"train|val\": { // train and validation part\n        \"dataroot\": \"dataset/celebahq_16_128\",\n        \"l_resolution\": 16, // low resolution need to super_resolution\n        \"r_resolution\": 128, // high resolution\n        \"datatype\": \"img\", //lmdb or img, path of img files\n    }\n},\n```\n\n### Training/Resume Training\n\n```python\n# Use sr.py and sample.py to train the super resolution task and unconditional generation task, respectively.\n# Edit json files to adjust network structure and hyperparameters\npython sr.py -p train -c config/sr_sr3.json\n```\n\n### Test/Evaluation\n\n```python\n# Edit json to add pretrain model path and run the evaluation \npython sr.py -p val -c config/sr_sr3.json\n\n# Quantitative evaluation alone using SSIM/PSNR metrics on given result root\npython eval.py -p [result root]\n```\n\n### Inference Alone\n\nSet the  image path like steps in `Own Data`, then run the script:\n\n```python\n# run the script\npython infer.py -c [config file]\n```\n\n## Weights and Biases 🎉\n\nThe library now supports experiment tracking, model checkpointing and model prediction visualization with [Weights and Biases](https://wandb.ai/site). You will need to [install W&B](https://pypi.org/project/wandb/) and login by using your [access token](https://wandb.ai/authorize). \n\n```\npip install wandb\n\n# get your access token from wandb.ai/authorize\nwandb login\n```\n\nW&B logging functionality is added to the `sr.py`, `sample.py` and `infer.py` files. You can pass `-enable_wandb` to start logging.\n\n- `-log_wandb_ckpt`: Pass this argument along with `-enable_wandb` to save model checkpoints as [W&B Artifacts](https://docs.wandb.ai/guides/artifacts). Both `sr.py` and `sample.py` is enabled with model checkpointing. \n- `-log_eval`: Pass this argument along with `-enable_wandb` to save the evaluation result as interactive [W&B Tables](https://docs.wandb.ai/guides/data-vis). Note that only `sr.py` is enabled with this feature. If you run `sample.py` in eval mode, the generated images will automatically be logged as image media panel. \n- `-log_infer`: While running `infer.py` pass this argument along with `-enable_wandb` to log the inference results as interactive W&B Tables. \n\nYou can find more on using these features [here](https://github.com/Janspiry/Image-Super-Resolution-via-Iterative-Refinement/pull/44). 🚀\n\n\n## Acknowledgements\n\nOur work is based on the following theoretical works:\n\n- [Denoising Diffusion Probabilistic Models](https://arxiv.org/pdf/2006.11239.pdf)\n- [Image Super-Resolution via Iterative Refinement](https://arxiv.org/pdf/2104.07636.pdf)\n- [WaveGrad: Estimating Gradients for Waveform Generation](https://arxiv.org/abs/2009.00713)\n- [Large Scale GAN Training for High Fidelity Natural Image Synthesis](https://arxiv.org/abs/1809.11096)\n\nFurthermore, we are benefitting a lot from the following projects:\n\n- https://github.com/bhushan23/BIG-GAN\n- https://github.com/lmnt-com/wavegrad\n- https://github.com/rosinality/denoising-diffusion-pytorch\n- https://github.com/lucidrains/denoising-diffusion-pytorch\n- https://github.com/hejingwenhejingwen/AdaFM\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "dataset",
          "type": "tree",
          "content": null
        },
        {
          "name": "eval.py",
          "type": "blob",
          "size": 1.3095703125,
          "content": "import argparse\nimport core.metrics as Metrics\nfrom PIL import Image\nimport numpy as np\nimport glob\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-p', '--path', type=str,\n                        default='experiments/basic_sr_ffhq_210809_142238/results')\n    args = parser.parse_args()\n    real_names = list(glob.glob('{}/*_hr.png'.format(args.path)))\n    fake_names = list(glob.glob('{}/*_sr.png'.format(args.path)))\n\n    real_names.sort()\n    fake_names.sort()\n\n    avg_psnr = 0.0\n    avg_ssim = 0.0\n    idx = 0\n    for rname, fname in zip(real_names, fake_names):\n        idx += 1\n        ridx = rname.rsplit(\"_hr\")[0]\n        fidx = rname.rsplit(\"_sr\")[0]\n        assert ridx == fidx, 'Image ridx:{ridx}!=fidx:{fidx}'.format(\n            ridx, fidx)\n\n        hr_img = np.array(Image.open(rname))\n        sr_img = np.array(Image.open(fname))\n        psnr = Metrics.calculate_psnr(sr_img, hr_img)\n        ssim = Metrics.calculate_ssim(sr_img, hr_img)\n        avg_psnr += psnr\n        avg_ssim += ssim\n        if idx % 20 == 0:\n            print('Image:{}, PSNR:{:.4f}, SSIM:{:.4f}'.format(idx, psnr, ssim))\n\n    avg_psnr = avg_psnr / idx\n    avg_ssim = avg_ssim / idx\n\n    # log\n    print('# Validation # PSNR: {:.4e}'.format(avg_psnr))\n    print('# Validation # SSIM: {:.4e}'.format(avg_ssim))\n"
        },
        {
          "name": "infer.py",
          "type": "blob",
          "size": 3.7001953125,
          "content": "import torch\nimport data as Data\nimport model as Model\nimport argparse\nimport logging\nimport core.logger as Logger\nimport core.metrics as Metrics\nfrom core.wandb_logger import WandbLogger\nfrom tensorboardX import SummaryWriter\nimport os\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-c', '--config', type=str, default='config/sr_sr3_64_512.json',\n                        help='JSON file for configuration')\n    parser.add_argument('-p', '--phase', type=str, choices=['val'], help='val(generation)', default='val')\n    parser.add_argument('-gpu', '--gpu_ids', type=str, default=None)\n    parser.add_argument('-debug', '-d', action='store_true')\n    parser.add_argument('-enable_wandb', action='store_true')\n    parser.add_argument('-log_infer', action='store_true')\n    \n    # parse configs\n    args = parser.parse_args()\n    opt = Logger.parse(args)\n    # Convert to NoneDict, which return None for missing key.\n    opt = Logger.dict_to_nonedict(opt)\n\n    # logging\n    torch.backends.cudnn.enabled = True\n    torch.backends.cudnn.benchmark = True\n\n    Logger.setup_logger(None, opt['path']['log'],\n                        'train', level=logging.INFO, screen=True)\n    Logger.setup_logger('val', opt['path']['log'], 'val', level=logging.INFO)\n    logger = logging.getLogger('base')\n    logger.info(Logger.dict2str(opt))\n    tb_logger = SummaryWriter(log_dir=opt['path']['tb_logger'])\n\n    # Initialize WandbLogger\n    if opt['enable_wandb']:\n        wandb_logger = WandbLogger(opt)\n    else:\n        wandb_logger = None\n\n    # dataset\n    for phase, dataset_opt in opt['datasets'].items():\n        if phase == 'val':\n            val_set = Data.create_dataset(dataset_opt, phase)\n            val_loader = Data.create_dataloader(\n                val_set, dataset_opt, phase)\n    logger.info('Initial Dataset Finished')\n\n    # model\n    diffusion = Model.create_model(opt)\n    logger.info('Initial Model Finished')\n\n    diffusion.set_new_noise_schedule(\n        opt['model']['beta_schedule']['val'], schedule_phase='val')\n    \n    logger.info('Begin Model Inference.')\n    current_step = 0\n    current_epoch = 0\n    idx = 0\n\n    result_path = '{}'.format(opt['path']['results'])\n    os.makedirs(result_path, exist_ok=True)\n    for _,  val_data in enumerate(val_loader):\n        idx += 1\n        diffusion.feed_data(val_data)\n        diffusion.test(continous=True)\n        visuals = diffusion.get_current_visuals(need_LR=False)\n\n        hr_img = Metrics.tensor2img(visuals['HR'])  # uint8\n        fake_img = Metrics.tensor2img(visuals['INF'])  # uint8\n\n        sr_img_mode = 'grid'\n        if sr_img_mode == 'single':\n            # single img series\n            sr_img = visuals['SR']  # uint8\n            sample_num = sr_img.shape[0]\n            for iter in range(0, sample_num):\n                Metrics.save_img(\n                    Metrics.tensor2img(sr_img[iter]), '{}/{}_{}_sr_{}.png'.format(result_path, current_step, idx, iter))\n        else:\n            # grid img\n            sr_img = Metrics.tensor2img(visuals['SR'])  # uint8\n            Metrics.save_img(\n                sr_img, '{}/{}_{}_sr_process.png'.format(result_path, current_step, idx))\n            Metrics.save_img(\n                Metrics.tensor2img(visuals['SR'][-1]), '{}/{}_{}_sr.png'.format(result_path, current_step, idx))\n\n        Metrics.save_img(\n            hr_img, '{}/{}_{}_hr.png'.format(result_path, current_step, idx))\n        Metrics.save_img(\n            fake_img, '{}/{}_{}_inf.png'.format(result_path, current_step, idx))\n\n        if wandb_logger and opt['log_infer']:\n            wandb_logger.log_eval_data(fake_img, Metrics.tensor2img(visuals['SR'][-1]), hr_img)\n\n    if wandb_logger and opt['log_infer']:\n        wandb_logger.log_eval_table(commit=True)\n"
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "model",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirement.txt",
          "type": "blob",
          "size": 0.0849609375,
          "content": "torch>=1.6\ntorchvision\nnumpy\npandas\ntqdm\nlmdb\nopencv-python\npillow\ntensorboardx\nwandb\n\n"
        },
        {
          "name": "sample.py",
          "type": "blob",
          "size": 6.51171875,
          "content": "import torch\nimport data as Data\nimport model as Model\nimport argparse\nimport logging\nimport core.logger as Logger\nimport core.metrics as Metrics\nfrom core.wandb_logger import WandbLogger\nfrom tensorboardX import SummaryWriter\nimport os\nimport numpy as np\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-c', '--config', type=str, default='config/sample_sr3_128.json',\n                        help='JSON file for configuration')\n    parser.add_argument('-p', '--phase', type=str, choices=['train', 'val'],\n                        help='Run either train(training) or val(generation)', default='train')\n    parser.add_argument('-gpu', '--gpu_ids', type=str, default=None)\n    parser.add_argument('-debug', '-d', action='store_true')\n    parser.add_argument('-enable_wandb', action='store_true')\n    parser.add_argument('-log_wandb_ckpt', action='store_true')\n\n    # parse configs\n    args = parser.parse_args()\n    opt = Logger.parse(args)\n    # Convert to NoneDict, which return None for missing key.\n    opt = Logger.dict_to_nonedict(opt)\n\n    # logging\n    torch.backends.cudnn.enabled = True\n    torch.backends.cudnn.benchmark = True\n\n    Logger.setup_logger(None, opt['path']['log'],\n                        'train', level=logging.INFO, screen=True)\n    Logger.setup_logger('val', opt['path']['log'], 'val', level=logging.INFO)\n    logger = logging.getLogger('base')\n    logger.info(Logger.dict2str(opt))\n    tb_logger = SummaryWriter(log_dir=opt['path']['tb_logger'])\n\n    # Initialize WandbLogger\n    if opt['enable_wandb']:\n        wandb_logger = WandbLogger(opt)\n        val_step = 0\n    else:\n        wandb_logger = None\n\n    # dataset\n    for phase, dataset_opt in opt['datasets'].items():\n        if phase == 'train' and args.phase != 'val':\n            train_set = Data.create_dataset(dataset_opt, phase)\n            train_loader = Data.create_dataloader(\n                train_set, dataset_opt, phase)\n    logger.info('Initial Dataset Finished')\n\n    # model\n    diffusion = Model.create_model(opt)\n    logger.info('Initial Model Finished')\n\n    # Train\n    current_step = diffusion.begin_step\n    current_epoch = diffusion.begin_epoch\n    n_iter = opt['train']['n_iter']\n    sample_sum = opt['datasets']['val']['data_len']\n\n    if opt['path']['resume_state']:\n        logger.info('Resuming training from epoch: {}, iter: {}.'.format(\n            current_epoch, current_step))\n\n    diffusion.set_new_noise_schedule(\n        opt['model']['beta_schedule'][opt['phase']], schedule_phase=opt['phase'])\n    if opt['phase'] == 'train':\n        while current_step < n_iter:\n            current_epoch += 1\n            for _, train_data in enumerate(train_loader):\n                current_step += 1\n                if current_step > n_iter:\n                    break\n                diffusion.feed_data(train_data)\n                diffusion.optimize_parameters()\n                # log\n                if current_step % opt['train']['print_freq'] == 0:\n                    logs = diffusion.get_current_log()\n                    message = '<epoch:{:3d}, iter:{:8,d}> '.format(\n                        current_epoch, current_step)\n                    for k, v in logs.items():\n                        message += '{:s}: {:.4e} '.format(k, v)\n                        tb_logger.add_scalar(k, v, current_step)\n                    logger.info(message)\n\n                    if wandb_logger:\n                        wandb_logger.log_metrics(logs)\n\n                # validation\n                if current_step % opt['train']['val_freq'] == 0:\n                    result_path = '{}/{}'.format(opt['path']\n                                                 ['results'], current_epoch)\n                    os.makedirs(result_path, exist_ok=True)\n\n                    diffusion.set_new_noise_schedule(\n                        opt['model']['beta_schedule']['val'], schedule_phase='val')\n\n                    for idx in range(sample_sum):\n                        diffusion.sample(continous=False)\n                        visuals = diffusion.get_current_visuals(sample=True)\n                        sample_img = Metrics.tensor2img(\n                            visuals['SAM'])  # uint8\n                        # generation\n                        Metrics.save_img(\n                            sample_img, '{}/{}_{}_sr.png'.format(result_path, current_step, idx))\n\n                        tb_logger.add_image(\n                            'Iter_{}'.format(current_step),\n                            np.transpose(sample_img, [2, 0, 1]),\n                            idx)\n\n                        if wandb_logger:\n                            wandb_logger.log_image(f'validation_{idx}', sample_img)\n\n                    diffusion.set_new_noise_schedule(\n                        opt['model']['beta_schedule']['train'], schedule_phase='train')\n\n                if current_step % opt['train']['save_checkpoint_freq'] == 0:\n                    logger.info('Saving models and training states.')\n                    diffusion.save_network(current_epoch, current_step)\n\n                    if wandb_logger and opt['log_wandb_ckpt']:\n                        wandb_logger.log_checkpoint(current_epoch, current_step)\n\n        # save model\n        logger.info('End of training.')\n    else:\n        logger.info('Begin Model Evaluation.')\n\n        result_path = '{}'.format(opt['path']['results'])\n        os.makedirs(result_path, exist_ok=True)\n        sample_imgs = []\n        for idx in range(sample_sum):\n            idx += 1\n            diffusion.sample(continous=True)\n            visuals = diffusion.get_current_visuals(sample=True)\n\n            show_img_mode = 'grid'\n            if show_img_mode == 'single':\n                # single img series\n                sample_img = visuals['SAM']  # uint8\n                sample_num = sample_img.shape[0]\n                for iter in range(0, sample_num):\n                    Metrics.save_img(\n                        Metrics.tensor2img(sample_img[iter]), '{}/{}_{}_sample_{}.png'.format(result_path, current_step, idx, iter))\n            else:\n                # grid img\n                sample_img = Metrics.tensor2img(visuals['SAM'])  # uint8\n                Metrics.save_img(\n                    sample_img, '{}/{}_{}_sample_process.png'.format(result_path, current_step, idx))\n                Metrics.save_img(\n                    Metrics.tensor2img(visuals['SAM'][-1]), '{}/{}_{}_sample.png'.format(result_path, current_step, idx))\n            \n            sample_imgs.append(Metrics.tensor2img(visuals['SAM'][-1]))\n\n        if wandb_logger:\n            wandb_logger.log_images('eval_images', sample_imgs)\n"
        },
        {
          "name": "sr.py",
          "type": "blob",
          "size": 10.255859375,
          "content": "import torch\nimport data as Data\nimport model as Model\nimport argparse\nimport logging\nimport core.logger as Logger\nimport core.metrics as Metrics\nfrom core.wandb_logger import WandbLogger\nfrom tensorboardX import SummaryWriter\nimport os\nimport numpy as np\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-c', '--config', type=str, default='config/sr_sr3_16_128.json',\n                        help='JSON file for configuration')\n    parser.add_argument('-p', '--phase', type=str, choices=['train', 'val'],\n                        help='Run either train(training) or val(generation)', default='train')\n    parser.add_argument('-gpu', '--gpu_ids', type=str, default=None)\n    parser.add_argument('-debug', '-d', action='store_true')\n    parser.add_argument('-enable_wandb', action='store_true')\n    parser.add_argument('-log_wandb_ckpt', action='store_true')\n    parser.add_argument('-log_eval', action='store_true')\n\n    # parse configs\n    args = parser.parse_args()\n    opt = Logger.parse(args)\n    # Convert to NoneDict, which return None for missing key.\n    opt = Logger.dict_to_nonedict(opt)\n\n    # logging\n    torch.backends.cudnn.enabled = True\n    torch.backends.cudnn.benchmark = True\n\n    Logger.setup_logger(None, opt['path']['log'],\n                        'train', level=logging.INFO, screen=True)\n    Logger.setup_logger('val', opt['path']['log'], 'val', level=logging.INFO)\n    logger = logging.getLogger('base')\n    logger.info(Logger.dict2str(opt))\n    tb_logger = SummaryWriter(log_dir=opt['path']['tb_logger'])\n\n    # Initialize WandbLogger\n    if opt['enable_wandb']:\n        import wandb\n        wandb_logger = WandbLogger(opt)\n        wandb.define_metric('validation/val_step')\n        wandb.define_metric('epoch')\n        wandb.define_metric(\"validation/*\", step_metric=\"val_step\")\n        val_step = 0\n    else:\n        wandb_logger = None\n\n    # dataset\n    for phase, dataset_opt in opt['datasets'].items():\n        if phase == 'train' and args.phase != 'val':\n            train_set = Data.create_dataset(dataset_opt, phase)\n            train_loader = Data.create_dataloader(\n                train_set, dataset_opt, phase)\n        elif phase == 'val':\n            val_set = Data.create_dataset(dataset_opt, phase)\n            val_loader = Data.create_dataloader(\n                val_set, dataset_opt, phase)\n    logger.info('Initial Dataset Finished')\n\n    # model\n    diffusion = Model.create_model(opt)\n    logger.info('Initial Model Finished')\n\n    # Train\n    current_step = diffusion.begin_step\n    current_epoch = diffusion.begin_epoch\n    n_iter = opt['train']['n_iter']\n\n    if opt['path']['resume_state']:\n        logger.info('Resuming training from epoch: {}, iter: {}.'.format(\n            current_epoch, current_step))\n\n    diffusion.set_new_noise_schedule(\n        opt['model']['beta_schedule'][opt['phase']], schedule_phase=opt['phase'])\n    if opt['phase'] == 'train':\n        while current_step < n_iter:\n            current_epoch += 1\n            for _, train_data in enumerate(train_loader):\n                current_step += 1\n                if current_step > n_iter:\n                    break\n                diffusion.feed_data(train_data)\n                diffusion.optimize_parameters()\n                # log\n                if current_step % opt['train']['print_freq'] == 0:\n                    logs = diffusion.get_current_log()\n                    message = '<epoch:{:3d}, iter:{:8,d}> '.format(\n                        current_epoch, current_step)\n                    for k, v in logs.items():\n                        message += '{:s}: {:.4e} '.format(k, v)\n                        tb_logger.add_scalar(k, v, current_step)\n                    logger.info(message)\n\n                    if wandb_logger:\n                        wandb_logger.log_metrics(logs)\n\n                # validation\n                if current_step % opt['train']['val_freq'] == 0:\n                    avg_psnr = 0.0\n                    idx = 0\n                    result_path = '{}/{}'.format(opt['path']\n                                                 ['results'], current_epoch)\n                    os.makedirs(result_path, exist_ok=True)\n\n                    diffusion.set_new_noise_schedule(\n                        opt['model']['beta_schedule']['val'], schedule_phase='val')\n                    for _,  val_data in enumerate(val_loader):\n                        idx += 1\n                        diffusion.feed_data(val_data)\n                        diffusion.test(continous=False)\n                        visuals = diffusion.get_current_visuals()\n                        sr_img = Metrics.tensor2img(visuals['SR'])  # uint8\n                        hr_img = Metrics.tensor2img(visuals['HR'])  # uint8\n                        lr_img = Metrics.tensor2img(visuals['LR'])  # uint8\n                        fake_img = Metrics.tensor2img(visuals['INF'])  # uint8\n\n                        # generation\n                        Metrics.save_img(\n                            hr_img, '{}/{}_{}_hr.png'.format(result_path, current_step, idx))\n                        Metrics.save_img(\n                            sr_img, '{}/{}_{}_sr.png'.format(result_path, current_step, idx))\n                        Metrics.save_img(\n                            lr_img, '{}/{}_{}_lr.png'.format(result_path, current_step, idx))\n                        Metrics.save_img(\n                            fake_img, '{}/{}_{}_inf.png'.format(result_path, current_step, idx))\n                        tb_logger.add_image(\n                            'Iter_{}'.format(current_step),\n                            np.transpose(np.concatenate(\n                                (fake_img, sr_img, hr_img), axis=1), [2, 0, 1]),\n                            idx)\n                        avg_psnr += Metrics.calculate_psnr(\n                            sr_img, hr_img)\n\n                        if wandb_logger:\n                            wandb_logger.log_image(\n                                f'validation_{idx}', \n                                np.concatenate((fake_img, sr_img, hr_img), axis=1)\n                            )\n\n                    avg_psnr = avg_psnr / idx\n                    diffusion.set_new_noise_schedule(\n                        opt['model']['beta_schedule']['train'], schedule_phase='train')\n                    # log\n                    logger.info('# Validation # PSNR: {:.4e}'.format(avg_psnr))\n                    logger_val = logging.getLogger('val')  # validation logger\n                    logger_val.info('<epoch:{:3d}, iter:{:8,d}> psnr: {:.4e}'.format(\n                        current_epoch, current_step, avg_psnr))\n                    # tensorboard logger\n                    tb_logger.add_scalar('psnr', avg_psnr, current_step)\n\n                    if wandb_logger:\n                        wandb_logger.log_metrics({\n                            'validation/val_psnr': avg_psnr,\n                            'validation/val_step': val_step\n                        })\n                        val_step += 1\n\n                if current_step % opt['train']['save_checkpoint_freq'] == 0:\n                    logger.info('Saving models and training states.')\n                    diffusion.save_network(current_epoch, current_step)\n\n                    if wandb_logger and opt['log_wandb_ckpt']:\n                        wandb_logger.log_checkpoint(current_epoch, current_step)\n\n            if wandb_logger:\n                wandb_logger.log_metrics({'epoch': current_epoch-1})\n\n        # save model\n        logger.info('End of training.')\n    else:\n        logger.info('Begin Model Evaluation.')\n        avg_psnr = 0.0\n        avg_ssim = 0.0\n        idx = 0\n        result_path = '{}'.format(opt['path']['results'])\n        os.makedirs(result_path, exist_ok=True)\n        for _,  val_data in enumerate(val_loader):\n            idx += 1\n            diffusion.feed_data(val_data)\n            diffusion.test(continous=True)\n            visuals = diffusion.get_current_visuals()\n\n            hr_img = Metrics.tensor2img(visuals['HR'])  # uint8\n            lr_img = Metrics.tensor2img(visuals['LR'])  # uint8\n            fake_img = Metrics.tensor2img(visuals['INF'])  # uint8\n\n            sr_img_mode = 'grid'\n            if sr_img_mode == 'single':\n                # single img series\n                sr_img = visuals['SR']  # uint8\n                sample_num = sr_img.shape[0]\n                for iter in range(0, sample_num):\n                    Metrics.save_img(\n                        Metrics.tensor2img(sr_img[iter]), '{}/{}_{}_sr_{}.png'.format(result_path, current_step, idx, iter))\n            else:\n                # grid img\n                sr_img = Metrics.tensor2img(visuals['SR'])  # uint8\n                Metrics.save_img(\n                    sr_img, '{}/{}_{}_sr_process.png'.format(result_path, current_step, idx))\n                Metrics.save_img(\n                    Metrics.tensor2img(visuals['SR'][-1]), '{}/{}_{}_sr.png'.format(result_path, current_step, idx))\n\n            Metrics.save_img(\n                hr_img, '{}/{}_{}_hr.png'.format(result_path, current_step, idx))\n            Metrics.save_img(\n                lr_img, '{}/{}_{}_lr.png'.format(result_path, current_step, idx))\n            Metrics.save_img(\n                fake_img, '{}/{}_{}_inf.png'.format(result_path, current_step, idx))\n\n            # generation\n            eval_psnr = Metrics.calculate_psnr(Metrics.tensor2img(visuals['SR'][-1]), hr_img)\n            eval_ssim = Metrics.calculate_ssim(Metrics.tensor2img(visuals['SR'][-1]), hr_img)\n\n            avg_psnr += eval_psnr\n            avg_ssim += eval_ssim\n\n            if wandb_logger and opt['log_eval']:\n                wandb_logger.log_eval_data(fake_img, Metrics.tensor2img(visuals['SR'][-1]), hr_img, eval_psnr, eval_ssim)\n\n        avg_psnr = avg_psnr / idx\n        avg_ssim = avg_ssim / idx\n\n        # log\n        logger.info('# Validation # PSNR: {:.4e}'.format(avg_psnr))\n        logger.info('# Validation # SSIM: {:.4e}'.format(avg_ssim))\n        logger_val = logging.getLogger('val')  # validation logger\n        logger_val.info('<epoch:{:3d}, iter:{:8,d}> psnr: {:.4e}, ssim：{:.4e}'.format(\n            current_epoch, current_step, avg_psnr, avg_ssim))\n\n        if wandb_logger:\n            if opt['log_eval']:\n                wandb_logger.log_eval_table()\n            wandb_logger.log_metrics({\n                'PSNR': float(avg_psnr),\n                'SSIM': float(avg_ssim)\n            })\n"
        }
      ]
    }
  ]
}