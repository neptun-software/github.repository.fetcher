{
  "metadata": {
    "timestamp": 1736559927449,
    "page": 695,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "FactoryBoy/factory_boy",
      "stars": 3561,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1708984375,
          "content": "# Temporary files\n.*.swp\n*.pyc\n*.pyo\n.idea/\n\n# Build-related files\ndocs/_build/\nauto_dev_requirements*.txt\n.coverage\n.tox\n*.egg-info\n*.egg\nbuild/\ndist/\nhtmlcov/\nMANIFEST\ntags\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1591796875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at raphael DOT barrois AT xelmail DOT com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 2.7080078125,
          "content": "Contributing\n============\n\nThanks for taking the time to contribute to factory_boy!\n\nCode of Conduct\n---------------\n\nThis project and everyone participating in it is governed by the `Code of\nConduct`_. By participating, you are expected to uphold this code. Please\nreport inappropriate behavior to raphael DOT barrois AT xelmail DOT com.\n\n.. _Code of Conduct: https://github.com/FactoryBoy/factory_boy/blob/master/CODE_OF_CONDUCT.md\n\n*(If I'm the person with the inappropriate behavior, please accept my\napologies. I know I can mess up. I can't expect you to tell me, but if you\nchose to do so, I'll do my best to handle criticism constructively.\n-- Raphaël)*\n\n*(As the community around this project grows, we hope to have more core\ndevelopers available to handle that kind of issues)*\n\n\nContributions\n-------------\n\nBug reports, patches, documentation improvements and suggestions are welcome!\n\nPlease open an issue_ or send a `pull request`_.\n\nFeedback about the documentation is especially valuable — the authors of\n``factory_boy`` feel more confident about writing code than writing docs :-)\n\n.. _issue: https://github.com/FactoryBoy/factory_boy/issues/new\n.. _pull request: https://github.com/FactoryBoy/factory_boy/compare/\n\n\nWhere to start?\n---------------\n\nIf you're new to the project and want to help, a great first step would be:\n\n* Fixing an issue in the docs (outdated setup instructions, missing information,\n  unclear feature, etc.);\n* Working on an existing issue (some should be marked ``BeginnerFriendly``);\n* Reviewing an existing pull request;\n* Or any other way you'd like to help.\n\n\nCode contributions\n------------------\n\nIn order to merge some code, you'll need to open a `pull request`_.\n\nThere are a few rules to keep in mind regarding pull requests:\n\n* A pull request should only solve a single issue / add a single feature;\n* If the code change is significant, please also create an issue_ for easier discussion;\n* We have automated testing; please make sure that the updated code passes automated checks;\n* We're striving to improve the quality of the library, with higher test and docs coverage.\n  If you don't know how/where to add docs or tests, we'll be very happy to point you in the right\n  direction!\n\n\nQuestions\n---------\n\nGitHub issues aren't a good medium for handling questions. There are better\nplaces to ask questions, for example Stack Overflow; please use the\n``factory-boy`` tag to make those questions easy to find by the maintainers.\n\nIf you want to ask a question anyway, please make sure that:\n\n- it's a question about ``factory_boy`` and not about ``Django`` or ``Faker``;\n- it isn't answered by the documentation;\n- it wasn't asked already.\n\nA good question can be written as a suggestion to improve the documentation.\n"
        },
        {
          "name": "CREDITS",
          "type": "blob",
          "size": 4.33984375,
          "content": "Credits\n=======\n\n\nMaintainers\n-----------\n\nThe ``factory_boy`` project is operated and maintained by:\n\n* Jeff Widman <jeff@jeffwidman.com> (https://github.com/jeffwidman)\n* Raphaël Barrois <raphael.barrois+fboy@polytechnique.org> (https://github.com/rbarrois)\n\n\n.. _contributors:\n\nContributors\n------------\n\nThe project was initially created by Mark Sandstrom <mark@deliciouslynerdy.com>.\n\n\nThe project has received contributions from (in alphabetical order):\n\n* Adam Chainz <adam@adamj.eu>\n* Alejandro <tovarich@gmail.com>\n* Alexey Kotlyarov <a@koterpillar.com>\n* Amit Shah <amit@amwam.me>\n* Anas Zahim <zanass0@gmail.com> (https://github.com/kamotos)\n* Andrey Voronov <voronov84@gmail.com>\n* Branko Majic <branko@majic.rs>\n* Carl Meyer <carl@oddbird.net>\n* Chris Lasher <chris.lasher@gmail.com>\n* Chris Seto <chriskseto@gmail.com>\n* Christoph Sieghart <sigi@0x2a.at>\n* David Baumgold <david@davidbaumgold.com>\n* Demur Nodia <demur.nodia@gmail.com> (https://github.com/demonno)\n* Eduard Iskandarov <edikexp@gmail.com>\n* Federico Bond <federicobond@gmail.com> (https://github.com/federicobond)\n* Flavio Curella <flavio.curella@gmail.com>\n* François Freitag <mail@franek.fr>\n* George Hickman <george@ghickman.co.uk>\n* Grégoire Deveaux <gregoire.deveaux@backmarket.com>\n* Hervé Cauwelier <herve.cauwelier@polyconseil.fr>\n* Hugo Osvaldo Barrera <hugo@barrera.io>\n* Ilya Baryshev <baryshev@gmail.com>\n* Ilya Pirogov <ilja.pirogov@gmail.com>\n* Ionuț Arțăriși <ionut@artarisi.eu>\n* Issa Jubril <issa.jubril@andela.com>\n* Ivan Miric <imiric@gmail.com>\n* Janusz Skonieczny <wooyek@users.noreply.github.com>\n* Javier Buzzi <kingbuzzman@users.noreply.github.com> (https://github.com/kingbuzzman)\n* Jeff Widman <jeff@jeffwidman.com> (https://github.com/jeffwidman)\n* Jon Dufresne <jon.dufresne@gmail.com>\n* Jonathan Tushman <jtushman@pipewave.com>\n* Joshua Carp <jm.carp@gmail.com>\n* Leonardo Lazzaro <llazzaro@dc.uba.ar>\n* Luke GB <github@lukegb.com>\n* Marc Abramowitz <marc@marc-abramowitz.com>\n* Mark Sandstrom <mark@deliciouslynerdy.com>\n* Martin Bächtold <martin+factoryboy@baechtold.me> (https://github.com/mbaechtold)\n* Michael Joseph <michaeljoseph+github@gmail.com>\n* Mikhail Korobov <kmike84@gmail.com>\n* Oleg Pidsadnyi <oleg.pidsadnyi@gmail.com>\n* Omer <omer@stokeet.com>\n* Pauly Fenwar <fenney@gmail.com>\n* Peter Marsh <pete@skimlinks.com>\n* Puneeth Chaganti <punchagan@muse-amuse.in>\n* QuantumGhost <obelisk.reg+github@gmail.com>\n* Raphaël Barrois <raphael.barrois+fboy@polytechnique.org> (https://github.com/rbarrois)\n* Rich Rauenzahn <rich@vmware.com>\n* Richard Moch <richard@mbp.polyconseil.fr>\n* Rob Zyskowski <zyskowski.rob@gmail.com>\n* Robrecht De Rouck <Robrecht.De.Rouck@gmail.com>\n* Samuel Paccoud <samuel@sampaccoud.com>\n* Sarah Boyce <sarahvboyce95@gmail.com>\n* Saul Shanabrook <s.shanabrook@gmail.com>\n* Sean Löfgren <SeanBE@users.noreply.github.com>\n* Shahriar Tajbakhsh <shahriar@metaview.ai>\n* Tom <tom@tomleo.com>\n* alex-netquity <alex@netquity.com>\n* anentropic <ego@anentropic.com>\n* minimumserious <commande.romain@gmail.com>\n* mluszczyk <mluszczyk@users.noreply.github.com>\n* nkryptic <nkryptic@gmail.com>\n* obiwanus <ivan@ivanovs.info>\n* tsouvarev <tsouvarev@mail.ru>\n* yamaneko <yamaneko1212@gmail.com>\n\n\n\nContributor license agreement\n-----------------------------\n\n.. note:: This agreement is required to allow redistribution of submitted contributions.\n          See http://oss-watch.ac.uk/resources/cla for an explanation.\n\nAny contributor proposing updates to the code or documentation of this project *MUST*\nadd its name to the list in the :ref:`contributors` section, thereby \"signing\" the\nfollowing contributor license agreement:\n\nThey accept and agree to the following terms for their present end future contributions\nsubmitted to the ``factory_boy`` project:\n\n* They represent that they are legally entitled to grant this license, and that their\n  contributions are their original creation\n\n* They grant the ``factory_boy`` project a perpetual, worldwide, non-exclusive,\n  no-charge, royalty-free, irrevocable copyright license to reproduce,\n  prepare derivative works of, publicly display, sublicense and distribute their contributions\n  and such derivative works.\n\n* They are not expected to provide support for their contributions, except to the extent they\n  desire to provide support.\n\n\n.. note:: The above agreement is inspired by the Apache Contributor License Agreement.\n\n.. vim:set ft=rst:\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 0.017578125,
          "content": "docs/changelog.rst"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.109375,
          "content": "Copyright (c) 2010 Mark Sandstrom\nCopyright (c) 2011-2015 Raphaël Barrois\nCopyright (c) The FactoryBoy project\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2578125,
          "content": "include ChangeLog CODE_OF_CONDUCT.md CONTRIBUTING.rst CREDITS LICENSE README.rst\ninclude Makefile tox.ini\n\ngraft factory\n\ngraft docs\ngraft examples\ngraft tests\n\nexclude readthedocs.yml\nglobal-exclude *.py[cod] __pycache__ .*.sw[po]\nprune .github\nprune docs/_build\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.6865234375,
          "content": "PACKAGE=factory\nTESTS_DIR=tests\nDOC_DIR=docs\nEXAMPLES_DIR=examples\nSETUP_PY=setup.py\n\n# Use current python binary instead of system default.\nCOVERAGE = python $(shell which coverage)\nFLAKE8 = flake8\nISORT = isort\nCTAGS = ctags\n\n\nall: default\n\n\ndefault:\n\n\n# Package management\n# ==================\n\n\n# DOC: Remove temporary or compiled files\nclean:\n\tfind . -type f -name '*.pyc' -delete\n\tfind . -type f -path '*/__pycache__/*' -delete\n\tfind . -type d -empty -delete\n\t@rm -rf tmp_test/\n\n\n# DOC: Install and/or upgrade dependencies\nupdate:\n\tpip install --upgrade pip setuptools\n\tpip install --upgrade --editable .[dev,doc]\n\tpip freeze\n\n\nrelease:\n\tfullrelease\n\n\n.PHONY: clean update release\n\n\n# Tests and quality\n# =================\n\n\n# DOC: Run tests for all supported versions (creates a set of virtualenvs)\ntestall:\n\ttox\n\n# DOC: Run tests for the currently installed version\n# Remove cgi warning when dropping support for Django 3.2.\ntest:\n\tmypy --ignore-missing-imports tests/test_typing.py\n\tpython \\\n\t\t-b \\\n\t\t-X dev \\\n\t\t-Werror \\\n\t\t-Wignore:::mongomock: \\\n\t\t-Wignore:::mongomock.__version__: \\\n\t\t-Wignore:::pkg_resources: \\\n\t\t-m unittest\n\n# DOC: Test the examples\nexample-test:\n\t$(MAKE) -C $(EXAMPLES_DIR) test\n\n\n\n# Note: we run the linter in two runs, because our __init__.py files has specific warnings we want to exclude\n# DOC: Perform code quality tasks\nlint:\n\t$(FLAKE8) --exclude $(PACKAGE)/__init__.py $(EXAMPLES_DIR) $(PACKAGE) $(SETUP_PY) $(TESTS_DIR)\n\t$(FLAKE8) --ignore F401 $(PACKAGE)/__init__.py\n\t$(ISORT) --check-only --diff $(EXAMPLES_DIR) $(PACKAGE) $(SETUP_PY) $(TESTS_DIR)\n\tcheck-manifest\n\ncoverage:\n\t$(COVERAGE) erase\n\t$(COVERAGE) run --branch -m unittest\n\t$(COVERAGE) report\n\t$(COVERAGE) html\n\n\n.PHONY: test testall example-test lint coverage\n\n\n# Development\n# ===========\n\n# DOC: Generate a \"tags\" file\nTAGS:\n\t$(CTAGS) --recurse $(PACKAGE) $(TESTS_DIR)\n\n.PHONY: TAGS\n\n\n# Documentation\n# =============\n\n\n# DOC: Compile the documentation\ndoc:\n\t$(MAKE) -C $(DOC_DIR) SPHINXOPTS=\"-n -W\" html\n\nlinkcheck:\n\t$(MAKE) -C $(DOC_DIR) linkcheck\n\nspelling:\n\t$(MAKE) -C $(DOC_DIR) SPHINXOPTS=-W spelling\n\n# DOC: Show this help message\nhelp:\n\t@grep -A1 '^# DOC:' Makefile \\\n\t | awk '    \t\t\t\t\t\\\n\t    BEGIN { FS=\"\\n\"; RS=\"--\\n\"; opt_len=0; }    \\\n\t    {    \t\t\t\t\t\\\n\t\tdoc=$$1; name=$$2;    \t\t\t\\\n\t\tsub(\"# DOC: \", \"\", doc);    \t\t\\\n\t\tsub(\":\", \"\", name);    \t\t\t\\\n\t\tif (length(name) > opt_len) {    \t\\\n\t\t    opt_len = length(name)    \t\t\\\n\t\t}    \t\t\t\t\t\\\n\t\topts[NR] = name;    \t\t\t\\\n\t\tdocs[name] = doc;    \t\t\t\\\n\t    }    \t\t\t\t\t\\\n\t    END {    \t\t\t\t\t\\\n\t\tpat=\"%-\" (opt_len + 4) \"s %s\\n\";    \t\\\n\t\tasort(opts);    \t\t\t\\\n\t\tfor (i in opts) {    \t\t\t\\\n\t\t    opt=opts[i];    \t\t\t\\\n\t\t    printf pat, opt, docs[opt]    \t\\\n\t\t}    \t\t\t\t\t\\\n\t    }'\n\n\n.PHONY: doc linkcheck help\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 12.8935546875,
          "content": "factory_boy\n===========\n\n.. image:: https://github.com/FactoryBoy/factory_boy/workflows/Test/badge.svg\n    :target: https://github.com/FactoryBoy/factory_boy/actions?query=workflow%3ATest\n\n.. image:: https://github.com/FactoryBoy/factory_boy/workflows/Check/badge.svg\n    :target: https://github.com/FactoryBoy/factory_boy/actions?query=workflow%3ACheck\n\n.. image:: https://img.shields.io/pypi/v/factory_boy.svg\n    :target: https://factoryboy.readthedocs.io/en/latest/changelog.html\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/pyversions/factory_boy.svg\n    :target: https://pypi.org/project/factory-boy/\n    :alt: Supported Python versions\n\n.. image:: https://img.shields.io/pypi/wheel/factory_boy.svg\n    :target: https://pypi.org/project/factory-boy/\n    :alt: Wheel status\n\n.. image:: https://img.shields.io/pypi/l/factory_boy.svg\n    :target: https://github.com/FactoryBoy/factory_boy/blob/master/LICENSE\n    :alt: License\n\nfactory_boy is a fixtures replacement based on thoughtbot's `factory_bot <https://github.com/thoughtbot/factory_bot>`_.\n\nAs a fixtures replacement tool, it aims to replace static, hard to maintain fixtures\nwith easy-to-use factories for complex objects.\n\nInstead of building an exhaustive test setup with every possible combination of corner cases,\n``factory_boy`` allows you to use objects customized for the current test,\nwhile only declaring the test-specific fields:\n\n.. code-block:: python\n\n    class FooTests(unittest.TestCase):\n\n        def test_with_factory_boy(self):\n            # We need a 200€, paid order, shipping to australia, for a VIP customer\n            order = OrderFactory(\n                amount=200,\n                status='PAID',\n                customer__is_vip=True,\n                address__country='AU',\n            )\n            # Run the tests here\n\n        def test_without_factory_boy(self):\n            address = Address(\n                street=\"42 fubar street\",\n                zipcode=\"42Z42\",\n                city=\"Sydney\",\n                country=\"AU\",\n            )\n            customer = Customer(\n                first_name=\"John\",\n                last_name=\"Doe\",\n                phone=\"+1234\",\n                email=\"john.doe@example.org\",\n                active=True,\n                is_vip=True,\n                address=address,\n            )\n            # etc.\n\nfactory_boy is designed to work well with various ORMs (Django, MongoDB, SQLAlchemy),\nand can easily be extended for other libraries.\n\nIts main features include:\n\n- Straightforward declarative syntax\n- Chaining factory calls while retaining the global context\n- Support for multiple build strategies (saved/unsaved instances, stubbed objects)\n- Multiple factories per class support, including inheritance\n\n\nLinks\n-----\n\n* Documentation: https://factoryboy.readthedocs.io/\n* Repository: https://github.com/FactoryBoy/factory_boy\n* Package: https://pypi.org/project/factory-boy/\n* Mailing-list: `factoryboy@googlegroups.com <mailto:factoryboy@googlegroups.com>`_ | https://groups.google.com/forum/#!forum/factoryboy\n\n\nDownload\n--------\n\nPyPI: https://pypi.org/project/factory-boy/\n\n.. code-block:: sh\n\n    $ pip install factory_boy\n\nSource: https://github.com/FactoryBoy/factory_boy/\n\n.. code-block:: sh\n\n    $ git clone git://github.com/FactoryBoy/factory_boy/\n    $ python setup.py install\n\n\nUsage\n-----\n\n\n.. note:: This section provides a quick summary of factory_boy features.\n          A more detailed listing is available in the full documentation.\n\n\nDefining factories\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nFactories declare a set of attributes used to instantiate a Python object.\nThe class of the object must be defined in the ``model`` field of a ``class Meta:`` attribute:\n\n.. code-block:: python\n\n    import factory\n    from . import models\n\n    class UserFactory(factory.Factory):\n        class Meta:\n            model = models.User\n\n        first_name = 'John'\n        last_name = 'Doe'\n        admin = False\n\n    # Another, different, factory for the same object\n    class AdminFactory(factory.Factory):\n        class Meta:\n            model = models.User\n\n        first_name = 'Admin'\n        last_name = 'User'\n        admin = True\n\n\nORM integration\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nfactory_boy integration with Object Relational Mapping (ORM) tools is provided\nthrough specific ``factory.Factory`` subclasses:\n\n* Django, with ``factory.django.DjangoModelFactory``\n* Mogo, with ``factory.mogo.MogoFactory``\n* MongoEngine, with ``factory.mongoengine.MongoEngineFactory``\n* SQLAlchemy, with ``factory.alchemy.SQLAlchemyModelFactory``\n\nMore details can be found in the ORM section.\n\n\nUsing factories\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nfactory_boy supports several different instantiation strategies: build, create, and stub:\n\n.. code-block:: python\n\n    # Returns a User instance that's not saved\n    user = UserFactory.build()\n\n    # Returns a saved User instance.\n    # UserFactory must subclass an ORM base class, such as DjangoModelFactory.\n    user = UserFactory.create()\n\n    # Returns a stub object (just a bunch of attributes)\n    obj = UserFactory.stub()\n\n\nYou can use the Factory class as a shortcut for the default instantiation strategy:\n\n.. code-block:: python\n\n    # Same as UserFactory.create()\n    user = UserFactory()\n\n\nNo matter which strategy is used, it's possible to override the defined attributes by passing keyword arguments:\n\n.. code-block:: pycon\n\n    # Build a User instance and override first_name\n    >>> user = UserFactory.build(first_name='Joe')\n    >>> user.first_name\n    \"Joe\"\n\n\nIt is also possible to create a bunch of objects in a single call:\n\n.. code-block:: pycon\n\n    >>> users = UserFactory.build_batch(10, first_name=\"Joe\")\n    >>> len(users)\n    10\n    >>> [user.first_name for user in users]\n    [\"Joe\", \"Joe\", \"Joe\", \"Joe\", \"Joe\", \"Joe\", \"Joe\", \"Joe\", \"Joe\", \"Joe\"]\n\n\nRealistic, random values\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nDemos look better with random yet realistic values; and those realistic values can also help discover bugs.\nFor this, factory_boy relies on the excellent `faker <https://faker.readthedocs.io/en/latest/>`_ library:\n\n.. code-block:: python\n\n    class RandomUserFactory(factory.Factory):\n        class Meta:\n            model = models.User\n\n        first_name = factory.Faker('first_name')\n        last_name = factory.Faker('last_name')\n\n.. code-block:: pycon\n\n    >>> RandomUserFactory()\n    <User: Lucy Murray>\n\n\nReproducible random values\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nThe use of fully randomized data in tests is quickly a problem for reproducing broken builds.\nTo that purpose, factory_boy provides helpers to handle the random seeds it uses, located in the ``factory.random`` module:\n\n.. code-block:: python\n\n    import factory.random\n\n    def setup_test_environment():\n        factory.random.reseed_random('my_awesome_project')\n        # Other setup here\n\n\nLazy Attributes\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nMost factory attributes can be added using static values that are evaluated when the factory is defined,\nbut some attributes (such as fields whose value is computed from other elements)\nwill need values assigned each time an instance is generated.\n\nThese \"lazy\" attributes can be added as follows:\n\n.. code-block:: python\n\n    class UserFactory(factory.Factory):\n        class Meta:\n            model = models.User\n\n        first_name = 'Joe'\n        last_name = 'Blow'\n        email = factory.LazyAttribute(lambda a: '{}.{}@example.com'.format(a.first_name, a.last_name).lower())\n        date_joined = factory.LazyFunction(datetime.now)\n\n.. code-block:: pycon\n\n    >>> UserFactory().email\n    \"joe.blow@example.com\"\n\n\n.. note:: ``LazyAttribute`` calls the function with the object being constructed as an argument, when\n          ``LazyFunction`` does not send any argument.\n\n\nSequences\n\"\"\"\"\"\"\"\"\"\n\nUnique values in a specific format (for example, e-mail addresses) can be generated using sequences. Sequences are defined by using ``Sequence`` or the decorator ``sequence``:\n\n.. code-block:: python\n\n    class UserFactory(factory.Factory):\n        class Meta:\n            model = models.User\n\n        email = factory.Sequence(lambda n: 'person{}@example.com'.format(n))\n\n    >>> UserFactory().email\n    'person0@example.com'\n    >>> UserFactory().email\n    'person1@example.com'\n\n\nAssociations\n\"\"\"\"\"\"\"\"\"\"\"\"\n\nSome objects have a complex field, that should itself be defined from a dedicated factories.\nThis is handled by the ``SubFactory`` helper:\n\n.. code-block:: python\n\n    class PostFactory(factory.Factory):\n        class Meta:\n            model = models.Post\n\n        author = factory.SubFactory(UserFactory)\n\n\nThe associated object's strategy will be used:\n\n\n.. code-block:: python\n\n    # Builds and saves a User and a Post\n    >>> post = PostFactory()\n    >>> post.id is None  # Post has been 'saved'\n    False\n    >>> post.author.id is None  # post.author has been saved\n    False\n\n    # Builds but does not save a User, and then builds but does not save a Post\n    >>> post = PostFactory.build()\n    >>> post.id is None\n    True\n    >>> post.author.id is None\n    True\n\nSupport Policy\n--------------\n\n``factory_boy`` supports active Python versions as well as PyPy3.\n\n- **Python**'s `supported versions\n  <https://devguide.python.org/versions/#supported-versions>`__.\n- **Django**'s `supported\n  versions <https://www.djangoproject.com/download/#supported-versions>`__.\n- **SQLAlchemy**: `latest version on PyPI <https://pypi.org/project/SQLAlchemy/>`__.\n- **MongoEngine**: `latest version on PyPI <https://pypi.org/project/mongoengine/>`__.\n\nDebugging factory_boy\n---------------------\n\nDebugging factory_boy can be rather complex due to the long chains of calls.\nDetailed logging is available through the ``factory`` logger.\n\nA helper, `factory.debug()`, is available to ease debugging:\n\n.. code-block:: python\n\n    with factory.debug():\n        obj = TestModel2Factory()\n\n\n    import logging\n    logger = logging.getLogger('factory')\n    logger.addHandler(logging.StreamHandler())\n    logger.setLevel(logging.DEBUG)\n\nThis will yield messages similar to those (artificial indentation):\n\n.. code-block:: ini\n\n    BaseFactory: Preparing tests.test_using.TestModel2Factory(extra={})\n      LazyStub: Computing values for tests.test_using.TestModel2Factory(two=<OrderedDeclarationWrapper for <factory.declarations.SubFactory object at 0x1e15610>>)\n        SubFactory: Instantiating tests.test_using.TestModelFactory(__containers=(<LazyStub for tests.test_using.TestModel2Factory>,), one=4), create=True\n        BaseFactory: Preparing tests.test_using.TestModelFactory(extra={'__containers': (<LazyStub for tests.test_using.TestModel2Factory>,), 'one': 4})\n          LazyStub: Computing values for tests.test_using.TestModelFactory(one=4)\n          LazyStub: Computed values, got tests.test_using.TestModelFactory(one=4)\n        BaseFactory: Generating tests.test_using.TestModelFactory(one=4)\n      LazyStub: Computed values, got tests.test_using.TestModel2Factory(two=<tests.test_using.TestModel object at 0x1e15410>)\n    BaseFactory: Generating tests.test_using.TestModel2Factory(two=<tests.test_using.TestModel object at 0x1e15410>)\n\nContributing\n------------\n\nfactory_boy is distributed under the MIT License.\n\nIssues should be opened through `GitHub Issues <https://github.com/FactoryBoy/factory_boy/issues/>`_; whenever possible, a pull request should be included.\nQuestions and suggestions are welcome on the `mailing-list <mailto:factoryboy@googlegroups.com>`_.\n\nDevelopment dependencies can be installed in a `virtualenv\n<https://docs.python.org/3/tutorial/venv.html>`_ with:\n\n.. code-block:: sh\n\n    $ pip install --editable '.[dev]'\n\nAll pull requests should pass the test suite, which can be launched simply with:\n\n.. code-block:: sh\n\n    $ make testall\n\n\n\nIn order to test coverage, please use:\n\n.. code-block:: sh\n\n    $ make coverage\n\n\nTo test with a specific framework version, you may use a ``tox`` target:\n\n.. code-block:: sh\n\n    # list all tox environments\n    $ tox --listenvs\n\n    # run tests inside a specific environment (django/mongoengine/SQLAlchemy are not installed)\n    $ tox -e py310\n\n    # run tests inside a specific environment (django)\n    $ tox -e py310-djangomain\n\n    # run tests inside a specific environment (alchemy)\n    $ tox -e py310-alchemy\n\n    # run tests inside a specific environment (mongoengine)\n    $ tox -e py310-mongo\n\n\nPackaging\n---------\n\nFor users interesting in packaging FactoryBoy into downstream distribution channels\n(e.g. ``.deb``, ``.rpm``, ``.ebuild``), the following tips might be helpful:\n\nDependencies\n\"\"\"\"\"\"\"\"\"\"\"\"\n\nThe package's run-time dependencies are listed in ``setup.cfg``.\nThe dependencies useful for building and testing the library are covered by the\n``dev`` and ``doc`` extras.\n\nMoreover, all development / testing tasks are driven through ``make(1)``.\n\nBuilding\n\"\"\"\"\"\"\"\"\n\nIn order to run the build steps (currently only for docs), run:\n\n.. code-block:: sh\n\n    python setup.py egg_info\n    make doc\n\nTesting\n\"\"\"\"\"\"\"\n\nWhen testing for the active Python environment, run the following:\n\n.. code-block:: sh\n\n    make test\n\n.. note::\n\n    You must make sure that the ``factory`` module is importable, as it is imported from\n    the testing code.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "factory",
          "type": "tree",
          "content": null
        },
        {
          "name": "readthedocs.yml",
          "type": "blob",
          "size": 0.158203125,
          "content": "---\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\npython:\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - doc\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 2.265625,
          "content": "[metadata]\nname = factory_boy\nversion = 3.3.2.dev0\ndescription = A versatile test fixtures replacement based on thoughtbot's factory_bot for Ruby.\nlong_description = file: README.rst\n# https://docutils.sourceforge.io/FAQ.html#what-s-the-official-mime-type-for-restructuredtext-data\nlong_description_content_type = text/x-rst\nauthor = Mark Sandstrom\nauthor_email = mark@deliciouslynerdy.com\nmaintainer = Raphaël Barrois\nmaintainer_email = raphael.barrois+fboy@polytechnique.org\nurl = https://github.com/FactoryBoy/factory_boy\nkeywords = factory_boy, factory, fixtures\nlicense = MIT\nclassifiers =\n    Development Status :: 5 - Production/Stable\n    Framework :: Django\n    Framework :: Django :: 4.2\n    Framework :: Django :: 5.1\n    Intended Audience :: Developers\n    License :: OSI Approved :: MIT License\n    Operating System :: OS Independent\n    Programming Language :: Python\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3 :: Only\n    Programming Language :: Python :: 3.8\n    Programming Language :: Python :: 3.9\n    Programming Language :: Python :: 3.10\n    Programming Language :: Python :: 3.11\n    Programming Language :: Python :: 3.12\n    Programming Language :: Python :: Implementation :: CPython\n    Programming Language :: Python :: Implementation :: PyPy\n    Topic :: Software Development :: Testing\n    Topic :: Software Development :: Libraries :: Python Modules\n\n[options]\npackages = factory\npython_requires = >=3.8\ninstall_requires =\n    Faker>=0.7.0\n\n[options.extras_require]\ndev =\n    coverage\n    Django\n    flake8\n    isort\n    mypy\n    Pillow\n    SQLAlchemy\n    mongoengine\n    mongomock\n    wheel>=0.32.0\n    tox\n    zest.releaser[recommended]\ndoc =\n    Sphinx\n    sphinx_rtd_theme\n    sphinxcontrib-spelling\n\n[bdist_wheel]\nuniversal = 1\n\n[zest.releaser]\n; semver-style versions\nversion-levels = 3\n\n[distutils]\nindex-servers = pypi\n\n[flake8]\nignore =\n    # Ignore \"and\" at start of line.\n    W503\n    # Ignore \"do not assign a lambda expression, use a def\".\n    E731\nmax-line-length = 120\n\n[isort]\nmulti_line_output = 3\ninclude_trailing_comma = True\nforce_grid_wrap = 0\nuse_parentheses = True\nline_length = 88\n\n[coverage:run]\ndynamic_context = test_function\n\n[coverage:report]\ninclude=\n    factory/*.py\n    tests/*.py\n\n[coverage:html]\nshow_contexts = True\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.0595703125,
          "content": "#!/usr/bin/env python\n\nfrom setuptools import setup\n\nsetup()\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.3173828125,
          "content": "[tox]\nminversion = 1.9\nenvlist =\n    lint\n    docs\n    examples\n    linkcheck\n    py{38,39,310,311,312,py39,py310}\n    py{38,39,310,311,312}-django42-mongo-alchemy\n    py{py39,py310}-django42-mongo-alchemy\n    py{310,311,312}-django51-mongo-alchemy\n    pypy310-django51-mongo-alchemy\n    py310-djangomain-mongo-alchemy\n\n[gh-actions]\npython =\n    3.8: py38\n    3.9: py39\n    3.10: py310\n    3.11: py311\n    3.12: py312\n    pypy-3.9: pypy39\n    pypy-3.10: pypy310\n\n[testenv]\ndeps =\n    mypy\n    alchemy: SQLAlchemy\n    mongo: mongoengine\n    mongo: mongomock\n    # mongomock imports pkg_resources, provided by setuptools.\n    mongo: setuptools>=66.1.1\n    django{42,51,main}: Pillow\n    django42: Django>=4.2,<5.0\n    django51: Django>=5.1,<5.2\n    djangomain: https://github.com/django/django/archive/main.tar.gz\n\nsetenv =\n    py: DJANGO_SETTINGS_MODULE=tests.djapp.settings\n\nallowlist_externals = make\ncommands = make test\n\n[testenv:docs]\nextras = doc\n\nwhitelist_externals = make\ncommands = make doc spelling\n\n[testenv:examples]\ndeps =\n    -rexamples/requirements.txt\n\nwhitelist_externals = make\ncommands = make example-test\n\n[testenv:linkcheck]\nextras = doc\n\nwhitelist_externals = make\ncommands = make linkcheck\n\n[testenv:lint]\ndeps =\n    -rexamples/requirements.txt\n    check_manifest\nextras = dev\n\nwhitelist_externals = make\ncommands = make lint\n"
        }
      ]
    }
  ]
}