{
  "metadata": {
    "timestamp": 1736559583863,
    "page": 209,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nateraw/stable-diffusion-videos",
      "stars": 4487,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.828125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# Extra stuff to ignore\ndreams\nimages\nrun.py\ntest_outputs\nexamples/music"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.8056640625,
          "content": "# stable-diffusion-videos\n\nTry it yourself in Colab: [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/nateraw/stable-diffusion-videos/blob/main/stable_diffusion_videos.ipynb)\n<!--\nTPU version (~x6 faster than standard colab GPUs): [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/nateraw/stable-diffusion-videos/blob/main/flax_stable_diffusion_videos.ipynb)\n-->\n\n**Example** - morphing between \"blueberry spaghetti\" and \"strawberry spaghetti\"\n\nhttps://user-images.githubusercontent.com/32437151/188721341-6f28abf9-699b-46b0-a72e-fa2a624ba0bb.mp4\n\n## Installation\n\n```bash\npip install stable_diffusion_videos\n```\n\n## Usage\n\nCheck out the [examples](./examples) folder for example scripts 👀\n\n### Making Videos\n\nNote: For Apple M1 architecture, use ```torch.float32``` instead, as ```torch.float16``` is not available on MPS.\n\n```python\nfrom stable_diffusion_videos import StableDiffusionWalkPipeline\nimport torch\n\npipeline = StableDiffusionWalkPipeline.from_pretrained(\n    \"CompVis/stable-diffusion-v1-4\",\n    torch_dtype=torch.float16,\n).to(\"cuda\")\n\nvideo_path = pipeline.walk(\n    prompts=['a cat', 'a dog'],\n    seeds=[42, 1337],\n    num_interpolation_steps=3,\n    height=512,  # use multiples of 64 if > 512. Multiples of 8 if < 512.\n    width=512,   # use multiples of 64 if > 512. Multiples of 8 if < 512.\n    output_dir='dreams',        # Where images/videos will be saved\n    name='animals_test',        # Subdirectory of output_dir where images/videos will be saved\n    guidance_scale=8.5,         # Higher adheres to prompt more, lower lets model take the wheel\n    num_inference_steps=50,     # Number of diffusion steps per image generated. 50 is good default\n)\n```\n\n### Making Music Videos\n\n*New!* Music can be added to the video by providing a path to an audio file. The audio will inform the rate of interpolation so the videos move to the beat 🎶\n\n```python\nfrom stable_diffusion_videos import StableDiffusionWalkPipeline\nimport torch\n\npipeline = StableDiffusionWalkPipeline.from_pretrained(\n    \"CompVis/stable-diffusion-v1-4\",\n    torch_dtype=torch.float16,\n).to(\"cuda\")\n\n# Seconds in the song.\naudio_offsets = [146, 148]  # [Start, end]\nfps = 30  # Use lower values for testing (5 or 10), higher values for better quality (30 or 60)\n\n# Convert seconds to frames\nnum_interpolation_steps = [(b-a) * fps for a, b in zip(audio_offsets, audio_offsets[1:])]\n\nvideo_path = pipeline.walk(\n    prompts=['a cat', 'a dog'],\n    seeds=[42, 1337],\n    num_interpolation_steps=num_interpolation_steps,\n    audio_filepath='audio.mp3',\n    audio_start_sec=audio_offsets[0],\n    fps=fps,\n    height=512,  # use multiples of 64 if > 512. Multiples of 8 if < 512.\n    width=512,   # use multiples of 64 if > 512. Multiples of 8 if < 512.\n    output_dir='dreams',        # Where images/videos will be saved\n    guidance_scale=7.5,         # Higher adheres to prompt more, lower lets model take the wheel\n    num_inference_steps=50,     # Number of diffusion steps per image generated. 50 is good default\n)\n```\n\n### Using the UI\n\n```python\nfrom stable_diffusion_videos import StableDiffusionWalkPipeline, Interface\nimport torch\n\npipeline = StableDiffusionWalkPipeline.from_pretrained(\n    \"CompVis/stable-diffusion-v1-4\",\n    torch_dtype=torch.float16,\n).to(\"cuda\")\n\ninterface = Interface(pipeline)\ninterface.launch()\n```\n\n## Credits\n\nThis work built off of [a script](https://gist.github.com/karpathy/00103b0037c5aaea32fe1da1af553355\n) shared by [@karpathy](https://github.com/karpathy). The script was modified to [this gist](https://gist.github.com/nateraw/c989468b74c616ebbc6474aa8cdd9e53), which was then updated/modified to this repo. \n\n## Contributing\n\nYou can file any issues/feature requests [here](https://github.com/nateraw/stable-diffusion-videos/issues)\n\nEnjoy 🤗\n<!--Commenting this section out for now, as there are issues with RealESRGAN python package-->\n<!--\n\n## Extras\n### Upsample with Real-ESRGAN\n\nYou can also 4x upsample your images with [Real-ESRGAN](https://github.com/xinntao/Real-ESRGAN)!\n\nIt's included when you pip install the latest version of `stable-diffusion-videos`! \n\nYou'll be able to use `upsample=True` in the `walk` function, like this:\n\n```python\npipeline.walk(['a cat', 'a dog'], [234, 345], upsample=True)\n```\n\nThe above may cause you to run out of VRAM. No problem, you can do upsampling separately.\n\nTo upsample an individual image:\n\n```python\nfrom stable_diffusion_videos import RealESRGANModel\n\nmodel = RealESRGANModel.from_pretrained('nateraw/real-esrgan')\nenhanced_image = model('your_file.jpg')\n```\n\nOr, to do a whole folder:\n\n```python\nfrom stable_diffusion_videos import RealESRGANModel\n\nmodel = RealESRGANModel.from_pretrained('nateraw/real-esrgan')\nmodel.upsample_imagefolder('path/to/images/', 'path/to/output_dir')\n```\n-->\n\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "flax_stable_diffusion_videos.ipynb",
          "type": "blob",
          "size": 12.1201171875,
          "content": "{\n  \"cells\": [\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"view-in-github\",\n        \"colab_type\": \"text\"\n      },\n      \"source\": [\n        \"<a href=\\\"https://colab.research.google.com/github/charlielito/stable-diffusion-videos/blob/feature%2Fflax_tpu/flax_stable_diffusion_videos.ipynb\\\" target=\\\"_parent\\\"><img src=\\\"https://colab.research.google.com/assets/colab-badge.svg\\\" alt=\\\"Open In Colab\\\"/></a>\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"z4GhhH25OdYq\"\n      },\n      \"source\": [\n        \"# Flax Stable Diffusion Videos\\n\",\n        \"\\n\",\n        \"This notebook allows you to generate videos by interpolating the latent space of [Stable Diffusion](https://github.com/CompVis/stable-diffusion) using TPU for faster inference.\\n\",\n        \"\\n\",\n        \"In comparison with standard Colab GPU, this runs ~6x faster after the first run. The first run is comparable to the GPU version because it compiles the code.\\n\",\n        \"\\n\",\n        \"You can either dream up different versions of the same prompt, or morph between different text prompts (with seeds set for each for reproducibility).\\n\",\n        \"\\n\",\n        \"If you like this notebook:\\n\",\n        \"- consider giving the [repo a star](https://github.com/nateraw/stable-diffusion-videos) ⭐️\\n\",\n        \"- consider following us on Github [@nateraw](https://github.com/nateraw) [@charlielito](https://github.com/charlielito)\\n\",\n        \"\\n\",\n        \"You can file any issues/feature requests [here](https://github.com/nateraw/stable-diffusion-videos/issues)\\n\",\n        \"\\n\",\n        \"Enjoy 🤗\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"dvdCBpWWOhW-\"\n      },\n      \"source\": [\n        \"## Setup\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"#@title Set up JAX\\n\",\n        \"#@markdown If you see an error, make sure you are using a TPU backend. Select `Runtime` in the menu above, then select the option \\\"Change runtime type\\\" and then select `TPU` under the `Hardware accelerator` setting.\\n\",\n        \"!pip install --upgrade jax jaxlib \\n\",\n        \"\\n\",\n        \"import jax.tools.colab_tpu\\n\",\n        \"jax.tools.colab_tpu.setup_tpu('tpu_driver_20221011')\\n\",\n        \"\\n\",\n        \"!pip install flax diffusers transformers ftfy\\n\",\n        \"jax.devices()\"\n      ],\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"5EZdSq4HtmcE\"\n      },\n      \"execution_count\": null,\n      \"outputs\": []\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"Xwfc0ej1L9A0\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"%%capture\\n\",\n        \"! pip install stable_diffusion_videos\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"H7UOKJhVOonb\"\n      },\n      \"source\": [\n        \"## Run the App 🚀\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"g71hslP8OntM\"\n      },\n      \"source\": [\n        \"### Load the Interface\\n\",\n        \"\\n\",\n        \"This step will take a couple minutes the first time you run it.\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"bgSNS368L-DV\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"import numpy as np\\n\",\n        \"import jax\\n\",\n        \"import jax.numpy as jnp\\n\",\n        \"\\n\",\n        \"from jax import pmap\\n\",\n        \"from flax.jax_utils import replicate\\n\",\n        \"from flax.training.common_utils import shard\\n\",\n        \"from PIL import Image\\n\",\n        \"\\n\",\n        \"from stable_diffusion_videos import FlaxStableDiffusionWalkPipeline, Interface\\n\",\n        \"\\n\",\n        \"pipeline, params = FlaxStableDiffusionWalkPipeline.from_pretrained(\\n\",\n        \"    \\\"CompVis/stable-diffusion-v1-4\\\", \\n\",\n        \"    revision=\\\"bf16\\\", \\n\",\n        \"    dtype=jnp.bfloat16\\n\",\n        \")\\n\",\n        \"p_params = replicate(params)\\n\",\n        \"\\n\",\n        \"interface = Interface(pipeline, params=p_params)\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"kidtsR3c2P9Z\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"#@title Connect to Google Drive to Save Outputs\\n\",\n        \"\\n\",\n        \"#@markdown If you want to connect Google Drive, click the checkbox below and run this cell. You'll be prompted to authenticate.\\n\",\n        \"\\n\",\n        \"#@markdown If you just want to save your outputs in this Colab session, don't worry about this cell\\n\",\n        \"\\n\",\n        \"connect_google_drive = True #@param {type:\\\"boolean\\\"}\\n\",\n        \"\\n\",\n        \"#@markdown Then, in the interface, use this path as the `output` in the Video tab to save your videos to Google Drive:\\n\",\n        \"\\n\",\n        \"#@markdown > /content/gdrive/MyDrive/stable_diffusion_videos\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"if connect_google_drive:\\n\",\n        \"    from google.colab import drive\\n\",\n        \"\\n\",\n        \"    drive.mount('/content/gdrive')\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"VxjRVNnMOtgU\"\n      },\n      \"source\": [\n        \"### Launch\\n\",\n        \"\\n\",\n        \"This cell launches a Gradio Interface. Here's how I suggest you use it:\\n\",\n        \"\\n\",\n        \"1. Use the \\\"Images\\\" tab to generate images you like.\\n\",\n        \"    - Find two images you want to morph between\\n\",\n        \"    - These images should use the same settings (guidance scale, height, width)\\n\",\n        \"    - Keep track of the seeds/settings you used so you can reproduce them\\n\",\n        \"\\n\",\n        \"2. Generate videos using the \\\"Videos\\\" tab\\n\",\n        \"    - Using the images you found from the step above, provide the prompts/seeds you recorded\\n\",\n        \"    - Set the `num_interpolation_steps` - for testing you can use a small number like 3 or 5, but to get great results you'll want to use something larger (60-200 steps). \\n\",\n        \"\\n\",\n        \"💡 **Pro tip** - Click the link that looks like `https://<id-number>.gradio.app` below , and you'll be able to view it in full screen.\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"8es3_onUOL3J\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"interface.launch(debug=True)\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"mFCoTvlnPi4u\"\n      },\n      \"source\": [\n        \"---\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"SjTQLCiLOWeo\"\n      },\n      \"source\": [\n        \"## Use `walk` programmatically\\n\",\n        \"\\n\",\n        \"The other option is to not use the interface, and instead use `walk` programmatically. Here's how you would do that...\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"fGQPClGwOR9R\"\n      },\n      \"source\": [\n        \"First we define a helper fn for visualizing videos in colab\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"GqTWc8ZhNeLU\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"from IPython.display import HTML\\n\",\n        \"from base64 import b64encode\\n\",\n        \"\\n\",\n        \"def visualize_video_colab(video_path):\\n\",\n        \"    mp4 = open(video_path,'rb').read()\\n\",\n        \"    data_url = \\\"data:video/mp4;base64,\\\" + b64encode(mp4).decode()\\n\",\n        \"    return HTML(\\\"\\\"\\\"\\n\",\n        \"    <video width=400 controls>\\n\",\n        \"        <source src=\\\"%s\\\" type=\\\"video/mp4\\\">\\n\",\n        \"    </video>\\n\",\n        \"    \\\"\\\"\\\" % data_url)\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"Vd_RzwkoPM7X\"\n      },\n      \"source\": [\n        \"Walk! 🚶‍♀️\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"Hv2wBZXXMQ-I\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"video_path = pipeline.walk(\\n\",\n        \"    p_params,\\n\",\n        \"    ['a cat', 'a dog'],\\n\",\n        \"    [42, 1337],\\n\",\n        \"    fps=5,                      # use 5 for testing, 25 or 30 for better quality\\n\",\n        \"    num_interpolation_steps=30,  # use 3-5 for testing, 30 or more for better results\\n\",\n        \"    height=512,                 # use multiples of 64 if > 512. Multiples of 8 if < 512.\\n\",\n        \"    width=512,                  # use multiples of 64 if > 512. Multiples of 8 if < 512.\\n\",\n        \"    jit=True                    # To use all TPU cores\\n\",\n        \")\\n\",\n        \"visualize_video_colab(video_path)\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"oLXULBMwSDnY\"\n      },\n      \"source\": [\n        \"### Bonus! Music videos\\n\",\n        \"\\n\",\n        \"First, we'll need to install `youtube-dl`\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"%%capture\\n\",\n        \"! pip install youtube-dl\"\n      ],\n      \"metadata\": {\n        \"id\": \"302zMC44aiC6\"\n      },\n      \"execution_count\": null,\n      \"outputs\": []\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"Then, we can download an example music file. Here we download one from my soundcloud:\"\n      ],\n      \"metadata\": {\n        \"id\": \"Q3gCLCkLanzO\"\n      }\n    },\n    {\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"! youtube-dl -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 -o \\\"music/thoughts.%(ext)s\\\" https://soundcloud.com/nateraw/thoughts\"\n      ],\n      \"metadata\": {\n        \"id\": \"rEsTe_ujagE5\"\n      },\n      \"execution_count\": null,\n      \"outputs\": []\n    },\n    {\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"from IPython.display import Audio\\n\",\n        \"\\n\",\n        \"Audio(filename='music/thoughts.mp3')\"\n      ],\n      \"metadata\": {\n        \"id\": \"RIKA-l5la28j\"\n      },\n      \"execution_count\": null,\n      \"outputs\": []\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"DsIxXFTKSG5j\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# Seconds in the song\\n\",\n        \"audio_offsets = [7, 9]\\n\",\n        \"fps = 8\\n\",\n        \"\\n\",\n        \"# Convert seconds to frames\\n\",\n        \"num_interpolation_steps = [(b-a) * fps for a, b in zip(audio_offsets, audio_offsets[1:])]\\n\",\n        \"\\n\",\n        \"video_path = pipeline.walk(\\n\",\n        \"    p_params,\\n\",\n        \"    prompts=['blueberry spaghetti', 'strawberry spaghetti'],\\n\",\n        \"    seeds=[42, 1337],\\n\",\n        \"    num_interpolation_steps=num_interpolation_steps,\\n\",\n        \"    height=512,                            # use multiples of 64\\n\",\n        \"    width=512,                             # use multiples of 64\\n\",\n        \"    audio_filepath='music/thoughts.mp3',   # Use your own file\\n\",\n        \"    audio_start_sec=audio_offsets[0],      # Start second of the provided audio\\n\",\n        \"    fps=fps,                               # important to set yourself based on the num_interpolation_steps you defined\\n\",\n        \"    batch_size=2,                          # in TPU-v2 typically maximum of 3 for 512x512\\n\",\n        \"    output_dir='./dreams',                 # Where images will be saved\\n\",\n        \"    name=None,                             # Subdir of output dir. will be timestamp by default\\n\",\n        \"    jit=True                               # To use all TPU cores\\n\",\n        \")\\n\",\n        \"visualize_video_colab(video_path)\"\n      ]\n    }\n  ],\n  \"metadata\": {\n    \"accelerator\": \"TPU\",\n    \"colab\": {\n      \"provenance\": [],\n      \"include_colab_link\": true\n    },\n    \"gpuClass\": \"standard\",\n    \"kernelspec\": {\n      \"display_name\": \"Python 3.9.12 ('base')\",\n      \"language\": \"python\",\n      \"name\": \"python3\"\n    },\n    \"language_info\": {\n      \"codemirror_mode\": {\n        \"name\": \"ipython\",\n        \"version\": 3\n      },\n      \"file_extension\": \".py\",\n      \"mimetype\": \"text/x-python\",\n      \"name\": \"python\",\n      \"nbconvert_exporter\": \"python\",\n      \"pygments_lexer\": \"ipython3\",\n      \"version\": \"3.9.12\"\n    },\n    \"vscode\": {\n      \"interpreter\": {\n        \"hash\": \"7d7b96a25c39fa7937ff3ab94e1dd8c63b93cb924b8f0093093c6266e25a78bc\"\n      }\n    }\n  },\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0\n}"
        },
        {
          "name": "packages.txt",
          "type": "blob",
          "size": 0.0234375,
          "content": "ffmpeg\nx264\nlibx264-dev\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.6962890625,
          "content": "[project]\nname = \"stable_diffusion_videos\"\ndescription = \"Create 🔥 videos with Stable Diffusion by exploring the latent space and morphing between text prompts.\"\nreadme = \"README.md\"\nlicense = {file = \"LICENSE\"}\nauthors = [\n   {name = \"Nathan Raw\", email = 'naterawdata@gmail.com'},\n]\ndynamic = [\n  \"version\",\n]\ndependencies = [\n  \"transformers>=4.21.0\",\n  \"diffusers\",\n  \"scipy\",\n  \"fire\",\n  \"gradio\",\n  \"librosa\",\n  \"av<10.0.0\",\n  \"realesrgan\",\n  \"protobuf==3.20.*\",\n  \"fsspec>=2023.4.0\",\n]\n[project.urls]\nSource = \"https://github.com/nateraw/stable-diffusion-videos\"\n\n[tool.setuptools]\ninclude-package-data = true\n\n[tool.setuptools.dynamic]\nversion = {attr = \"stable_diffusion_videos.__version__\"}\n\n[tool.setuptools.packages.find]\nwhere = [\".\"]  # list of folders that contain the packages ([\".\"] by default)\ninclude = [\"stable_diffusion_videos*\"]  # package names should match these glob patterns ([\"*\"] by default)\nnamespaces = false  # to disable scanning PEP 420 namespaces (true by default)\n\n[build-system]\nrequires = [\n  \"setuptools\",\n  \"wheel\",\n]\n\n[tool.pytest.ini_options]\naddopts = [\n    \"--color=yes\"\n]\n\n[tool.ruff]\ntarget-version = \"py38\"\nline-length = 79\n# Enable Pyflakes `E` and `F` codes by default.\nlint.select = [\n    \"E\",\n    \"W\", # see: https://pypi.org/project/pycodestyle\n    \"F\", # see: https://pypi.org/project/pyflakes\n    \"I\", #see: https://pypi.org/project/isort/\n    \"RUF100\" # alternative to yesqa\n]\nlint.ignore-init-module-imports = true\nlint.unfixable = [\"F401\"]\n\n[tool.ruff.pydocstyle]\n# Use Google-style docstrings.\nconvention = \"google\"\n\n[tool.ruff.pycodestyle]\nignore-overlong-task-comments = true\n\n[tool.ruff.lint.mccabe]\n# Unlike Flake8, default to a complexity level of 10.\nmax-complexity = 10\n"
        },
        {
          "name": "stable_diffusion_videos.ipynb",
          "type": "blob",
          "size": 10.751953125,
          "content": "{\n  \"cells\": [\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"view-in-github\",\n        \"colab_type\": \"text\"\n      },\n      \"source\": [\n        \"<a href=\\\"https://colab.research.google.com/github/nateraw/stable-diffusion-videos/blob/nate-fix-breaking-changes/stable_diffusion_videos.ipynb\\\" target=\\\"_parent\\\"><img src=\\\"https://colab.research.google.com/assets/colab-badge.svg\\\" alt=\\\"Open In Colab\\\"/></a>\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"z4GhhH25OdYq\"\n      },\n      \"source\": [\n        \"# Stable Diffusion Videos\\n\",\n        \"\\n\",\n        \"This notebook allows you to generate videos by interpolating the latent space of [Stable Diffusion](https://github.com/CompVis/stable-diffusion).\\n\",\n        \"\\n\",\n        \"You can either dream up different versions of the same prompt, or morph between different text prompts (with seeds set for each for reproducibility).\\n\",\n        \"\\n\",\n        \"If you like this notebook:\\n\",\n        \"- consider giving the [repo a star](https://github.com/nateraw/stable-diffusion-videos) ⭐️\\n\",\n        \"- consider following me on Github [@nateraw](https://github.com/nateraw)\\n\",\n        \"\\n\",\n        \"You can file any issues/feature requests [here](https://github.com/nateraw/stable-diffusion-videos/issues)\\n\",\n        \"\\n\",\n        \"Enjoy 🤗\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"dvdCBpWWOhW-\"\n      },\n      \"source\": [\n        \"## Setup\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"Xwfc0ej1L9A0\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"%%capture\\n\",\n        \"! pip install git+https://github.com/nateraw/stable-diffusion-videos\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"H7UOKJhVOonb\"\n      },\n      \"source\": [\n        \"## Run the App 🚀\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"g71hslP8OntM\"\n      },\n      \"source\": [\n        \"### Load the Interface\\n\",\n        \"\\n\",\n        \"This step will take a couple minutes the first time you run it.\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"bgSNS368L-DV\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"import torch\\n\",\n        \"\\n\",\n        \"from stable_diffusion_videos.app import Interface\\n\",\n        \"from stable_diffusion_videos.stable_diffusion_pipeline import StableDiffusionWalkPipeline\\n\",\n        \"\\n\",\n        \"pipeline = StableDiffusionWalkPipeline.from_pretrained(\\n\",\n        \"    \\\"CompVis/stable-diffusion-v1-4\\\",\\n\",\n        \"    torch_dtype=torch.float16,\\n\",\n        \"    revision=\\\"fp16\\\",\\n\",\n        \").to(\\\"cuda\\\")\\n\",\n        \"\\n\",\n        \"interface = Interface(pipeline)\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"kidtsR3c2P9Z\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"#@title Connect to Google Drive to Save Outputs\\n\",\n        \"\\n\",\n        \"#@markdown If you want to connect Google Drive, click the checkbox below and run this cell. You'll be prompted to authenticate.\\n\",\n        \"\\n\",\n        \"#@markdown If you just want to save your outputs in this Colab session, don't worry about this cell\\n\",\n        \"\\n\",\n        \"connect_google_drive = True #@param {type:\\\"boolean\\\"}\\n\",\n        \"\\n\",\n        \"#@markdown Then, in the interface, use this path as the `output` in the Video tab to save your videos to Google Drive:\\n\",\n        \"\\n\",\n        \"#@markdown > /content/gdrive/MyDrive/stable_diffusion_videos\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"if connect_google_drive:\\n\",\n        \"    from google.colab import drive\\n\",\n        \"\\n\",\n        \"    drive.mount('/content/gdrive')\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"VxjRVNnMOtgU\"\n      },\n      \"source\": [\n        \"### Launch\\n\",\n        \"\\n\",\n        \"This cell launches a Gradio Interface. Here's how I suggest you use it:\\n\",\n        \"\\n\",\n        \"1. Use the \\\"Images\\\" tab to generate images you like.\\n\",\n        \"    - Find two images you want to morph between\\n\",\n        \"    - These images should use the same settings (guidance scale, height, width)\\n\",\n        \"    - Keep track of the seeds/settings you used so you can reproduce them\\n\",\n        \"\\n\",\n        \"2. Generate videos using the \\\"Videos\\\" tab\\n\",\n        \"    - Using the images you found from the step above, provide the prompts/seeds you recorded\\n\",\n        \"    - Set the `num_interpolation_steps` - for testing you can use a small number like 3 or 5, but to get great results you'll want to use something larger (60-200 steps).\\n\",\n        \"\\n\",\n        \"💡 **Pro tip** - Click the link that looks like `https://<id-number>.gradio.app` below , and you'll be able to view it in full screen.\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"8es3_onUOL3J\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"interface.launch(debug=True)\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"mFCoTvlnPi4u\"\n      },\n      \"source\": [\n        \"---\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"SjTQLCiLOWeo\"\n      },\n      \"source\": [\n        \"## Use `walk` programmatically\\n\",\n        \"\\n\",\n        \"The other option is to not use the interface, and instead use `walk` programmatically. Here's how you would do that...\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"fGQPClGwOR9R\"\n      },\n      \"source\": [\n        \"First we define a helper fn for visualizing videos in colab\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"GqTWc8ZhNeLU\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"from IPython.display import HTML\\n\",\n        \"from base64 import b64encode\\n\",\n        \"\\n\",\n        \"def visualize_video_colab(video_path):\\n\",\n        \"    mp4 = open(video_path,'rb').read()\\n\",\n        \"    data_url = \\\"data:video/mp4;base64,\\\" + b64encode(mp4).decode()\\n\",\n        \"    return HTML(\\\"\\\"\\\"\\n\",\n        \"    <video width=400 controls>\\n\",\n        \"        <source src=\\\"%s\\\" type=\\\"video/mp4\\\">\\n\",\n        \"    </video>\\n\",\n        \"    \\\"\\\"\\\" % data_url)\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"Vd_RzwkoPM7X\"\n      },\n      \"source\": [\n        \"Walk! 🚶‍♀️\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"Hv2wBZXXMQ-I\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"video_path = pipeline.walk(\\n\",\n        \"    ['a cat', 'a dog'],\\n\",\n        \"    [42, 1337],\\n\",\n        \"    fps=5,                      # use 5 for testing, 25 or 30 for better quality\\n\",\n        \"    num_interpolation_steps=5,  # use 3-5 for testing, 30 or more for better results\\n\",\n        \"    height=512,                 # use multiples of 64 if > 512. Multiples of 8 if < 512.\\n\",\n        \"    width=512,                  # use multiples of 64 if > 512. Multiples of 8 if < 512.\\n\",\n        \")\\n\",\n        \"visualize_video_colab(video_path)\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"oLXULBMwSDnY\"\n      },\n      \"source\": [\n        \"### Bonus! Music videos\\n\",\n        \"\\n\",\n        \"First, we'll need to install `youtube-dl`\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"%%capture\\n\",\n        \"! pip install youtube-dl\"\n      ],\n      \"metadata\": {\n        \"id\": \"302zMC44aiC6\"\n      },\n      \"execution_count\": null,\n      \"outputs\": []\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"Then, we can download an example music file. Here we download one from my soundcloud:\"\n      ],\n      \"metadata\": {\n        \"id\": \"Q3gCLCkLanzO\"\n      }\n    },\n    {\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"! youtube-dl -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 -o \\\"music/thoughts.%(ext)s\\\" https://soundcloud.com/nateraw/thoughts\"\n      ],\n      \"metadata\": {\n        \"id\": \"rEsTe_ujagE5\"\n      },\n      \"execution_count\": null,\n      \"outputs\": []\n    },\n    {\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"from IPython.display import Audio\\n\",\n        \"\\n\",\n        \"Audio(filename='music/thoughts.mp3')\"\n      ],\n      \"metadata\": {\n        \"id\": \"RIKA-l5la28j\"\n      },\n      \"execution_count\": null,\n      \"outputs\": []\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"DsIxXFTKSG5j\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# Seconds in the song\\n\",\n        \"audio_offsets = [7, 9]\\n\",\n        \"fps = 8\\n\",\n        \"\\n\",\n        \"# Convert seconds to frames\\n\",\n        \"num_interpolation_steps = [(b-a) * fps for a, b in zip(audio_offsets, audio_offsets[1:])]\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"video_path = pipeline.walk(\\n\",\n        \"    prompts=['blueberry spaghetti', 'strawberry spaghetti'],\\n\",\n        \"    seeds=[42, 1337],\\n\",\n        \"    num_interpolation_steps=num_interpolation_steps,\\n\",\n        \"    height=512,                            # use multiples of 64\\n\",\n        \"    width=512,                             # use multiples of 64\\n\",\n        \"    audio_filepath='music/thoughts.mp3',    # Use your own file\\n\",\n        \"    audio_start_sec=audio_offsets[0],       # Start second of the provided audio\\n\",\n        \"    fps=fps,                               # important to set yourself based on the num_interpolation_steps you defined\\n\",\n        \"    batch_size=4,                          # increase until you go out of memory.\\n\",\n        \"    output_dir='./dreams',                 # Where images will be saved\\n\",\n        \"    name=None,                             # Subdir of output dir. will be timestamp by default\\n\",\n        \")\\n\",\n        \"visualize_video_colab(video_path)\"\n      ]\n    }\n  ],\n  \"metadata\": {\n    \"accelerator\": \"GPU\",\n    \"colab\": {\n      \"provenance\": [],\n      \"include_colab_link\": true\n    },\n    \"gpuClass\": \"standard\",\n    \"kernelspec\": {\n      \"display_name\": \"Python 3.9.12 ('base')\",\n      \"language\": \"python\",\n      \"name\": \"python3\"\n    },\n    \"language_info\": {\n      \"codemirror_mode\": {\n        \"name\": \"ipython\",\n        \"version\": 3\n      },\n      \"file_extension\": \".py\",\n      \"mimetype\": \"text/x-python\",\n      \"name\": \"python\",\n      \"nbconvert_exporter\": \"python\",\n      \"pygments_lexer\": \"ipython3\",\n      \"version\": \"3.9.12\"\n    },\n    \"vscode\": {\n      \"interpreter\": {\n        \"hash\": \"7d7b96a25c39fa7937ff3ab94e1dd8c63b93cb924b8f0093093c6266e25a78bc\"\n      }\n    }\n  },\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0\n}\n"
        },
        {
          "name": "stable_diffusion_videos",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}