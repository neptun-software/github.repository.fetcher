{
  "metadata": {
    "timestamp": 1736559899469,
    "page": 655,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jendrikseipp/vulture",
      "stars": 3624,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1240234375,
          "content": "*.py[cod]\nMANIFEST\nbuild/\ncoverage.xml\ndist/\nhtmlcov/\nvulture.egg-info/\n.cache/\n.coverage\n.pytest_cache/\n.tox/\n.venv/\n.vscode/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.1279296875,
          "content": "repos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.1.13\n    hooks:\n      - id: ruff\n      - id: ruff-format\n"
        },
        {
          "name": ".pre-commit-hooks.yaml",
          "type": "blob",
          "size": 0.4453125,
          "content": "- id: vulture\n  name: vulture\n  language: python\n  entry: vulture\n  description: Find unused Python code.\n  types: [python]\n  # Vulture needs access to all files for a complete analysis, so we\n  # prevent pre-commit from passing only the changed files. Instead,\n  # please create a `pyproject.toml` file in your repository and specify\n  # all files that Vulture should check under `[tool.vulture] --> paths`.\n  pass_filenames: false\n  require_serial: true\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 10.951171875,
          "content": "# next (unreleased)\n\n* Handle `while True` loops without `break` statements (kreathon).\n\n# 2.14 (2024-12-08)\n\n* Improve reachability analysis (kreathon, #270, #302).\n* Add type hints for `get_unused_code` and the fields of the `Item` class (John Doknjas, #361).\n\n# 2.13 (2024-10-02)\n\n* Add support for Python 3.13 (Jendrik Seipp, #369).\n* Add PyPI and conda-forge badges to README file (Trevor James Smith, #356).\n* Include `tests/**/*.toml` in sdist (Colin Watson).\n\n# 2.12 (2024-09-17)\n\n* Use `ruff` for linting and formatting (Anh Trinh, #347, #349).\n* Replace `tox` by `pre-commit` for linting and formatting (Anh Trinh, #349).\n* Add `--config` flag to specify path to pyproject.toml configuration file (Glen Robertson, #352).\n\n# 2.11 (2024-01-06)\n\n* Switch to tomllib/tomli to support heterogeneous arrays (Sebastian Csar, #340).\n* Bump flake8, flake8-comprehensions and flake8-bugbear (Sebastian Csar, #341).\n* Provide whitelist parity for `MagicMock` and `Mock` (maxrake, #342).\n\n# 2.10 (2023-10-06)\n\n* Drop support for Python 3.7 (Jendrik Seipp, #323).\n* Add support for Python 3.12 (Jendrik Seipp, #332).\n* Use `end_lineno` AST attribute to obtain more accurate line counts (Jendrik Seipp).\n\n# 2.9.1 (2023-08-21)\n\n* Use exit code 0 for `--help` and `--version` again (Jendrik Seipp, #321).\n\n# 2.9 (2023-08-20)\n\n* Use exit code 3 when dead code is found (whosayn, #319).\n* Treat non-supported decorator names as \"@\" instead of crashing (Llandy3d and Jendrik Seipp, #284).\n* Drop support for Python 3.6 (Jendrik Seipp).\n\n# 2.8 (2023-08-10)\n\n* Add `UnicodeEncodeError` exception handling to `core.py` (milanbalazs, #299).\n* Add whitelist for `Enum` attributes `_name_` and `_value_` (Eugene Toder, #305).\n* Run tests and add PyPI trove for Python 3.11 (Jendrik Seipp).\n\n# 2.7 (2023-01-08)\n\n* Ignore `setup_module()`, `teardown_module()`, etc. in pytest `test_*.py` files (Jendrik Seipp).\n* Add whitelist for `socketserver.TCPServer.allow_reuse_address` (Ben Elliston).\n* Clarify that `--exclude` patterns are matched against absolute paths (Jendrik Seipp, #260).\n* Fix example in README file (Jendrik Seipp, #272).\n\n# 2.6 (2022-09-19)\n\n* Add basic `match` statement support (kreathon, #276, #291).\n\n# 2.5 (2022-07-03)\n\n* Mark imports in `__all__` as used (kreathon, #172, #282).\n* Add whitelist for `pint.UnitRegistry.default_formatter` (Ben Elliston, #258).\n\n# 2.4 (2022-05-19)\n\n* Print absolute filepaths as relative again (as in version 2.1 and before)\n  if they are below the current directory (The-Compiler, #246).\n* Run tests and add PyPI trove for Python 3.10 (chayim, #266).\n* Allow using the `del` keyword to mark unused variables (sshishov, #279).\n\n# 2.3 (2021-01-16)\n\n* Add [pre-commit](https://pre-commit.com) hook (Cl√©ment Robert, #244).\n\n# 2.2 (2021-01-15)\n\n* Only parse format strings when being used with `locals()` (jingw, #225).\n* Don't override paths in pyproject.toml with empty CLI paths (bcbnz, #228).\n* Run continuous integration tests for Python 3.9 (ju-sh, #232).\n* Use pathlib internally (ju-sh, #226).\n\n# 2.1 (2020-08-19)\n\n* Treat `getattr/hasattr(obj, \"constant_string\", ...)` as a reference to\n  `obj.constant_string` (jingw, #219).\n* Fix false positives when assigning to `x.some_name` but reading via\n  `some_name`, at the cost of potential false negatives (jingw, #221).\n* Allow reading options from `pyproject.toml` (Michel Albert, #164, #215).\n\n# 2.0 (2020-08-11)\n\n* Parse `# type: ...` comments if on Python 3.8+ (jingw, #220).\n* Bump minimum Python version to 3.6 (Jendrik Seipp, #218). The last\n  Vulture release that supports Python 2.7 and Python 3.5 is version 1.6.\n* Consider all files under `test` or `tests` directories test files\n  (Jendrik Seipp).\n* Ignore `logging.Logger.propagate` attribute (Jendrik Seipp).\n\n# 1.6 (2020-07-28)\n\n* Differentiate between functions and methods (Jendrik Seipp, #112, #209).\n* Move from Travis to GitHub actions (RJ722, #211).\n\n# 1.5 (2020-05-24)\n\n* Support flake8 \"noqa\" error codes F401 (unused import) and F841 (unused\n  local variable) (RJ722, #195).\n* Detect unreachable code in conditional expressions\n  (Agathiyan Bragadeesh, #178).\n\n# 1.4 (2020-03-30)\n\n* Ignore unused import statements in `__init__.py` (RJ722, #192).\n* Report first decorator's line number for unused decorated objects on\n  Python 3.8+ (RJ722, #200).\n* Check code with black and pyupgrade.\n\n# 1.3 (2020-02-03)\n\n* Detect redundant 'if' conditions without 'else' blocks.\n* Add whitelist for `string.Formatter` (Joseph Bylund, #183).\n\n# 1.2 (2019-11-22)\n\n* Fix tests for Python 3.8 (#166).\n* Use new `Constant` AST node under Python 3.8+ (#175).\n* Add test for f-strings (#177).\n* Add whitelist for `logging` module.\n\n# 1.1 (2019-09-23)\n\n* Add `sys.excepthook` to `sys` whitelist.\n* Add whitelist for `ctypes` module.\n* Check that type annotations are parsed and type comments are ignored\n  (thanks @kx-chen).\n* Support checking files with BOM under Python 2.7 (#170).\n\n# 1.0 (2018-10-23)\n\n* Add `--ignore-decorators` flag (thanks @RJ722).\n* Add whitelist for `threading` module (thanks @andrewhalle).\n\n# 0.29 (2018-07-31)\n\n* Add `--ignore-names` flag for ignoring names matching the given glob\n  patterns (thanks @RJ722).\n\n# 0.28 (2018-07-05)\n\n* Add `--make-whitelist` flag for reporting output in whitelist format\n  (thanks @RJ722).\n* Ignore case of `--exclude` arguments on Windows.\n* Add `*-test.py` to recognized test file patterns.\n* Add `failureException`, `longMessage` and `maxDiff` to `unittest`\n  whitelist.\n* Refer to actual objects rather than their mocks in default\n  whitelists (thanks @RJ722).\n* Don't import any Vulture modules in setup.py (thanks @RJ722).\n\n# 0.27 (2018-06-05)\n\n* Report `while (True): ... else: ...` as unreachable (thanks @RJ722).\n* Use `argparse` instead of `optparse`.\n* Whitelist Mock.return\\_value and Mock.side\\_effect in unittest.mock\n  module.\n* Drop support for Python 2.6 and 3.3.\n* Improve documentation and test coverage (thanks @RJ722).\n\n# 0.26 (2017-08-28)\n\n* Detect `async` function definitions (thanks @RJ722).\n* Add `Item.get_report()` method (thanks @RJ722).\n* Move method for finding Python modules out of Vulture class.\n\n# 0.25 (2017-08-15)\n\n* Detect unsatisfiable statements containing `and`, `or` and `not`.\n* Use filenames and line numbers as tie-breakers when sorting by size.\n* Store first and last line numbers in Item objects.\n* Pass relevant options directly to `scavenge()` and `report()`.\n\n# 0.24 (2017-08-14)\n\n* Detect unsatisfiable `while`-conditions (thanks @RJ722).\n* Detect unsatisfiable `if`- and `else`-conditions (thanks @RJ722).\n* Handle null bytes in source code.\n\n# 0.23 (2017-08-10)\n\n* Add `--min-confidence` flag (thanks @RJ722).\n\n# 0.22 (2017-08-04)\n\n* Detect unreachable code after `return`, `break`, `continue` and\n  `raise` (thanks @RJ722).\n* Parse all variable and attribute names in new format strings.\n* Extend ast whitelist.\n\n# 0.21 (2017-07-26)\n\n* If an unused item is defined multiple times, report it multiple\n  times.\n* Make size estimates for function calls more accurate.\n* Create wheel files for Vulture (thanks @RJ722).\n\n# 0.20 (2017-07-26)\n\n* Report unused tuple assignments as dead code.\n* Report attribute names that have the same names as variables as dead\n  code.\n* Let Item class inherit from `object` (thanks @RJ722).\n* Handle names imported as aliases like all other used variable names.\n* Rename Vulture.used\\_vars to Vulture.used\\_names.\n* Use function for determining which imports to ignore.\n* Only try to import each whitelist file once.\n* Store used names and used attributes in sets instead of lists.\n* Fix estimating the size of code containing ellipses (...).\n* Refactor and simplify code.\n\n# 0.19 (2017-07-20)\n\n* Don't ignore <span class=\"title-ref\">\\_\\_foo</span> variable names.\n* Use separate methods for determining whether to ignore classes and\n  functions.\n* Only try to find a whitelist for each defined import once (thanks\n  @roivanov).\n* Fix finding the last child for many types of AST nodes.\n\n# 0.18 (2017-07-17)\n\n* Make <span class=\"title-ref\">--sort-by-size</span> faster and more\n  accurate (thanks @RJ722).\n\n# 0.17 (2017-07-17)\n\n* Add <span class=\"title-ref\">get\\_unused\\_code()</span> method.\n* Return with exit code 1 when syntax errors are found or files can't\n  be read.\n\n# 0.16 (2017-07-12)\n\n* Differentiate between unused classes and functions (thanks @RJ722).\n* Add --sort-by-size option (thanks @jackric and @RJ722).\n* Count imports as used if they are accessed as module attributes.\n\n# 0.15 (2017-07-04)\n\n* Automatically include whitelists based on imported modules (thanks\n  @RJ722).\n* Add --version parameter (thanks @RJ722).\n* Add appveyor tests for testing on Windows (thanks @RJ722).\n\n# 0.14 (2017-04-06)\n\n* Add stub whitelist file for Python standard library (thanks @RJ722)\n* Ignore class names starting with \"Test\" in \"test\\_\" files (thanks\n  @thisch).\n* Ignore \"test\\_\" functions only in \"test\\_\" files.\n\n# 0.13 (2017-03-06)\n\n* Ignore star-imported names since we cannot detect whether they are\n  used.\n* Move repository to GitHub.\n\n# 0.12 (2017-01-05)\n\n* Detect unused imports.\n* Use tokenize.open() on Python \\>= 3.2 for reading input files,\n  assume UTF-8 encoding on older Python versions.\n\n# 0.11 (2016-11-27)\n\n* Use the system's default encoding when reading files.\n* Report syntax errors instead of aborting.\n\n# 0.10 (2016-07-14)\n\n* Detect unused function and method arguments (issue #15).\n* Detect unused \\*args and \\*\\*kwargs parameters.\n* Change license from GPL to MIT.\n\n# 0.9 (2016-06-29)\n\n* Don't flag attributes as unused if they are used as global variables\n  in another module (thanks Florian Bruhin).\n* Don't consider \"True\" and \"False\" variable names.\n* Abort with error message when invoked on .pyc files.\n\n# 0.8.1 (2015-09-28)\n\n* Fix code for Python 3.\n\n# 0.8 (2015-09-28)\n\n* Do not flag names imported with \"import as\" as dead code (thanks Tom\n  Terrace).\n\n# 0.7 (2015-09-26)\n\n* Exit with exitcode 1 if path on commandline can't be found.\n* Test vulture with vulture using a whitelist module for false\n  positives.\n* Add tests that run vulture as a script.\n* Add \"python setup.py test\" command for running tests.\n* Add support for tox.\n* Raise test coverage to 100%.\n* Remove ez\\_setup.py.\n\n# 0.6 (2014-09-06)\n\n* Ignore function names starting with \"test\\_\".\n* Parse variable names in new format strings (e.g. \"This is\n  {x}\".format(x=\"nice\")).\n* Only parse alphanumeric variable names in format strings and ignore\n  types.\n* Abort with exit code 1 on syntax errors.\n* Support installation under Windows by using setuptools (thanks\n  Reuben Fletcher-Costin).\n\n# 0.5 (2014-05-09)\n\n* If dead code is found, exit with 1.\n\n# 0.4.1 (2013-09-17)\n\n* Only warn if a path given on the command line cannot be found.\n\n# 0.4 (2013-06-23)\n\n* Ignore unused variables starting with an underscore.\n* Show warning for syntax errors instead of aborting directly.\n* Print warning if a file cannot be found.\n\n# 0.3 (2012-03-19)\n\n* Add support for python3\n* Report unused attributes\n* Find tuple assignments in comprehensions\n* Scan files given on the command line even if they don't end with .py\n\n# 0.2 (2012-03-18)\n\n* Only format nodes in verbose mode (gives 4x speedup).\n\n# 0.1 (2012-03-17)\n\n* First release.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.275390625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at jendrikseipp@gmail.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.1201171875,
          "content": "# Contributing to Vulture\n\n## Creating and cloning a fork\n\nFork the Vulture repository on GitHub by clicking the \"fork\" button on the\ntop right. Then clone your fork to your local machine:\n\n    $ git clone https://github.com/USERNAME/vulture.git # Use your GitHub username.\n    $ cd vulture\n\n## Installation\n\nWe recommend using a Python virtual environment to isolate the\ninstallation of vulture.\n\n### Setting up the virtual environment\n\nYou can read more about `virtualenv` in the [virtualenv\ndocumentation](http://virtualenv.readthedocs.org).\n\nTo install the `virtualenv` package using `pip`, run:\n\n    $ python3 -m pip install virtualenv\n\nNow you can create your own environment (named `vulture_dev`):\n\n    $ virtualenv vulture_dev\n\nNow, whenever you work on the project, activate the corresponding\nenvironment.\n\n  - On **Unix-based** systems, this can be done with:\n\n        $ source vulture_dev/bin/activate\n\n  - And on **Windows** this is done with:\n\n        $ vulture_dev\\scripts\\activate\n\nTo leave the virtual environment use:\n\n    (vulture_dev)$ deactivate\n\n### Installing vulture\n\nNavigate to your cloned `vulture` directory, and run the following to\ninstall in development mode:\n\n    $ pip install --editable .\n\n### Installing test tools\n\nVulture uses tox for testing. You can read more about it in the [tox\ndocumentation](https://tox.readthedocs.io).\n\nTo install `tox`, run:\n\n    $ pip install tox\n\nIt's also recommended that you use `pre-commit` to catch style errors\nearly:\n\n    $ pip install pre-commit\n    $ pre-commit install\n\n## Coding standards\n\n### Creating a new branch\n\nTo start working on a pull request, create a new branch to work on. You\nshould never develop on your main branch because your main branch\nshould always be synchronized with the main repo‚Äôs main branch, which\nis challenging if it has new commits. Create a branch using:\n\n    $ git checkout -b your-new-branch\n\n#### Naming branches\n\nBranch names should describe the feature/issue that you want to work on,\nbut at the same time be short.\n\n### Commits\n\nEach commit should be atomic and its message should adequately describe\nthe change in a clear manner. Use imperative, e.g., \"Fix issue12.\" instead\nof \"Fixed issue12.\". Please make sure that you only fix the issue at hand\nor implement the desired new feature instead of making \"drive-by\" changes\nlike adding type hints.\n\n### Formating and linting\n\nRun `pre-commit` using:\n\n    $ pre-commit run --all-files\n\n## Testing\n\nRun `tox` using:\n\n    $ tox\n\n## Pull requests\n\n### How to send a pull request?\n\nPush your changes to your fork with:\n\n    $ git push --set-upstream origin BRANCHNAME\n\nThen visit your fork on GitHub, change the branch to the one you committed\nto, and click the `New Pull Request` button.\n\n### Follow-up\n\nIn case your PR needs to be updated (tests fail or reviewer requests some\nchanges), update it by committing on top of your branch. It is not\nnecessary to amend your previous commit, since we will usually squash all\ncommits when merging anyway.\n\n### Feedback\n\nTake reviewer feedback positively. It's unlikely for a PR to be merged on\nthe first attempt, but don‚Äôt worry that‚Äôs just how it works. It helps to\nkeep the code clean.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.083984375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2012-2020 Jendrik Seipp (jendrikseipp@gmail.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.115234375,
          "content": "include *.md\ninclude *.txt\ninclude tests/*.py\ninclude tests/**/*.toml\ninclude tox.ini\ninclude vulture/whitelists/*.py\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.3173828125,
          "content": "# Vulture - Find dead code\n\n[![PyPI Version](https://img.shields.io/pypi/v/vulture.svg)](https://pypi.python.org/pypi/vulture)\n[![Conda Version](https://img.shields.io/conda/vn/conda-forge/vulture.svg)](https://anaconda.org/conda-forge/vulture)\n![CI:Test](https://github.com/jendrikseipp/vulture/workflows/CI/badge.svg)\n[![Codecov Badge](https://codecov.io/gh/jendrikseipp/vulture/branch/main/graphs/badge.svg)](https://codecov.io/gh/jendrikseipp/vulture?branch=main)\n\nVulture finds unused code in Python programs. This is useful for\ncleaning up and finding errors in large code bases. If you run Vulture\non both your library and test suite you can find untested code.\n\nDue to Python's dynamic nature, static code analyzers like Vulture are\nlikely to miss some dead code. Also, code that is only called implicitly\nmay be reported as unused. Nonetheless, Vulture can be a very helpful\ntool for higher code quality.\n\n## Features\n\n* fast: uses static code analysis\n* tested: tests itself and has complete test coverage\n* complements pyflakes and has the same output syntax\n* sorts unused classes and functions by size with `--sort-by-size`\n\n## Installation\n\n    $ pip install vulture\n\n## Usage\n\n    $ vulture myscript.py  # or\n    $ python3 -m vulture myscript.py\n    $ vulture myscript.py mypackage/\n    $ vulture myscript.py --min-confidence 100  # Only report 100% dead code.\n\nThe provided arguments may be Python files or directories. For each\ndirectory Vulture analyzes all contained\n<span class=\"title-ref\">\\*.py</span> files.\n\nAfter you have found and deleted dead code, run Vulture again, because\nit may discover more dead code.\n\n## Types of unused code\n\nIn addition to finding unused functions, classes, etc., Vulture can detect\nunreachable code. Each chunk of dead code is assigned a *confidence value*\nbetween 60% and 100%, where a value of 100% signals that it is certain that the\ncode won't be executed. Values below 100% are *very rough* estimates (based on\nthe type of code chunk) for how likely it is that the code is unused.\n\n| Code type | Confidence value |\n| ------------------- | -- |\n| function/method/class argument, unreachable code | 100% |\n| import | 90% |\n| attribute, class, function, method, property, variable | 60% |\n\nYou can use the `--min-confidence` flag to set the minimum confidence\nfor code to be reported as unused. Use `--min-confidence 100` to only\nreport code that is guaranteed to be unused within the analyzed files.\n\n## Handling false positives\n\nWhen Vulture incorrectly reports chunks of code as unused, you have\nseveral options for suppressing the false positives. If fixing your false\npositives could benefit other users as well, please file an issue report.\n\n#### Whitelists\n\nThe recommended option is to add used code that is reported as unused to a\nPython module and add it to the list of scanned paths. To obtain such a\nwhitelist automatically, pass `--make-whitelist` to Vulture:\n\n    $ vulture mydir --make-whitelist > whitelist.py\n    $ vulture mydir whitelist.py\n\nNote that the resulting `whitelist.py` file will contain valid Python\nsyntax, but for Python to be able to *run* it, you will usually have to\nmake some modifications.\n\nWe collect whitelists for common Python modules and packages in\n`vulture/whitelists/` (pull requests are welcome).\n\n#### Ignoring files\n\nIf you want to ignore a whole file or directory, use the `--exclude` parameter\n(e.g., `--exclude \"*settings.py,*/docs/*.py,*/test_*.py,*/.venv/*.py\"`). The\nexclude patterns are matched against absolute paths.\n\n#### Flake8 noqa comments\n\n<!-- Hide noqa docs until we decide whether we want to support it.\nAnother way of ignoring errors is to annotate the line causing the false\npositive with `# noqa: <ERROR_CODE>` in a trailing comment (e.g., `#\nnoqa: V103`). The `ERROR_CODE` specifies what kind of dead code to\nignore (see the table below for the list of error codes). In case no\nerror code is specified, Vulture ignores all results for the line.\n(Note that the line number for decorated objects is the line number of\nthe first decorator.)\n-->\n\nFor compatibility with [flake8](https://flake8.pycqa.org/), Vulture\nsupports the [F401 and\nF841](https://flake8.pycqa.org/en/latest/user/error-codes.html) error\ncodes for ignoring unused imports (`# noqa: F401`) and unused local\nvariables (`# noqa: F841`). However, we recommend using whitelists instead\nof `noqa` comments, since `noqa` comments add visual noise to the code and\nmake it harder to read.\n\n#### Ignoring names\n\nYou can use `--ignore-names foo*,ba[rz]` to let Vulture ignore all names\nstarting with `foo` and the names `bar` and `baz`. Additionally, the\n`--ignore-decorators` option can be used to ignore the names of functions\ndecorated with the given decorator (but not their arguments or function body).\nThis is helpful for example in Flask\nprojects, where you can use `--ignore-decorators \"@app.route\"` to ignore all\nfunction names with the `@app.route` decorator. Note that Vulture simplifies\ndecorators it cannot parse: `@foo.bar(x, y)` becomes \"@foo.bar\" and\n`@foo.bar(x, y).baz` becomes \"@\" internally.\n\nWe recommend using whitelists instead of `--ignore-names` or\n`--ignore-decorators` whenever possible, since whitelists are\nautomatically checked for syntactic correctness when passed to Vulture\nand often you can even pass them to your Python interpreter and let it\ncheck that all whitelisted code actually still exists in your project.\n\n#### Marking unused variables\n\nThere are situations where you can't just remove unused variables, e.g.,\nin function signatures. The recommended solution is to use the `del`\nkeyword as described in the\n[PyLint manual](http://pylint-messages.wikidot.com/messages:w0613) and on\n[StackOverflow](https://stackoverflow.com/a/14836005):\n\n```python\ndef foo(x, y):\n    del y\n    return x + 3\n```\n\nVulture will also ignore all variables that start with an underscore, so\nyou can use `_x, y = get_pos()` to mark unused tuple assignments or\nfunction arguments, e.g., `def foo(x, _y)`.\n\n#### Minimum confidence\n\nRaise the minimum [confidence value](#types-of-unused-code) with the `--min-confidence` flag.\n\n#### Unreachable code\n\nIf Vulture complains about code like `if False:`, you can use a Boolean\nflag `debug = False` and write `if debug:` instead. This makes the code\nmore readable and silences Vulture.\n\n#### Forward references for type annotations\n\nSee [#216](https://github.com/jendrikseipp/vulture/issues/216). For\nexample, instead of `def foo(arg: \"Sequence\"): ...`, we recommend using\n\n``` python\nfrom __future__ import annotations\n\ndef foo(arg: Sequence):\n    ...\n```\n\n\n## Configuration\n\nYou can also store command line arguments in `pyproject.toml` under the\n`tool.vulture` section. Simply remove leading dashes and replace all\nremaining dashes with underscores.\n\nOptions given on the command line have precedence over options in\n`pyproject.toml`.\n\nExample Config:\n\n``` toml\n[tool.vulture]\nexclude = [\"*file*.py\", \"dir/\"]\nignore_decorators = [\"@app.route\", \"@require_*\"]\nignore_names = [\"visit_*\", \"do_*\"]\nmake_whitelist = true\nmin_confidence = 80\npaths = [\"myscript.py\", \"mydir\", \"whitelist.py\"]\nsort_by_size = true\nverbose = true\n```\n\nVulture will automatically look for a `pyproject.toml` in the current working directory.\n\nTo use a `pyproject.toml` in another directory, you can use the `--config path/to/pyproject.toml` flag.\n\n## Integrations\n\nYou can use a [pre-commit](https://pre-commit.com/#install) hook to run\nVulture before each commit. For this, install pre-commit and add the\nfollowing to the `.pre-commit-config.yaml` file in your repository:\n\n```yaml\nrepos:\n  - repo: https://github.com/jendrikseipp/vulture\n    rev: 'v2.3'  # or any later Vulture version\n    hooks:\n      - id: vulture\n```\n\nThen run `pre-commit install`. Finally, create a `pyproject.toml` file\nin your repository and specify all files that Vulture should check under\n`[tool.vulture] --> paths` (see above).\n\nThere's also a [GitHub Action for Vulture](https://github.com/gtkacz/vulture-action)\nand you can use Vulture programatically. For example:\n\n``` python\nimport vulture\n\nv = vulture.Vulture()\nv.scavenge(['.'])\nunused_code = v.get_unused_code()  # returns a list of `Item` objects\n```\n\n## How does it work?\n\nVulture uses the `ast` module to build abstract syntax trees for all\ngiven files. While traversing all syntax trees it records the names of\ndefined and used objects. Afterwards, it reports the objects which have\nbeen defined, but not used. This analysis ignores scopes and only takes\nobject names into account.\n\nVulture also detects unreachable code by looking for code after\n`return`, `break`, `continue` and `raise` statements, and by searching\nfor unsatisfiable `if`- and `while`-conditions.\n\n## Sort by size\n\nWhen using the `--sort-by-size` option, Vulture sorts unused code by its\nnumber of lines. This helps developers prioritize where to look for dead\ncode first.\n\n## Examples\n\nConsider the following Python script (`dead_code.py`):\n\n``` python\nimport os\n\nclass Greeter:\n    def greet(self):\n        print(\"Hi\")\n\ndef hello_world():\n    message = \"Hello, world!\"\n    greeter = Greeter()\n    func_name = \"greet\"\n    greet_func = getattr(greeter, func_name)\n    greet_func()\n\nif __name__ == \"__main__\":\n    hello_world()\n```\n\nCalling :\n\n    $ vulture dead_code.py\n\nresults in the following output:\n\n    dead_code.py:1: unused import 'os' (90% confidence)\n    dead_code.py:4: unused function 'greet' (60% confidence)\n    dead_code.py:8: unused variable 'message' (60% confidence)\n\nVulture correctly reports `os` and `message` as unused but it fails to\ndetect that `greet` is actually used. The recommended method to deal\nwith false positives like this is to create a whitelist Python file.\n\n**Preparing whitelists**\n\nIn a whitelist we simulate the usage of variables, attributes, etc. For\nthe program above, a whitelist could look as follows:\n\n``` python\n# whitelist_dead_code.py\nfrom dead_code import Greeter\nGreeter.greet\n```\n\nAlternatively, you can pass `--make-whitelist` to Vulture and obtain an\nautomatically generated whitelist.\n\nPassing both the original program and the whitelist to Vulture\n\n    $ vulture dead_code.py whitelist_dead_code.py\n\nmakes Vulture ignore the `greet` method:\n\n    dead_code.py:1: unused import 'os' (90% confidence)\n    dead_code.py:8: unused variable 'message' (60% confidence)\n\n<!-- Hide noqa docs until we decide whether we want to support it.\n**Using \"# noqa\"**\n\n```python\nimport os  # noqa\n\nclass Greeter:  # noqa: V102\n    def greet(self):  # noqa: V103\n        print(\"Hi\")\n```\n\n## Error codes\n\nFor compatibility with [flake8](https://flake8.pycqa.org/), Vulture\nsupports the [F401 and\nF841](https://flake8.pycqa.org/en/latest/user/error-codes.html) error\ncodes.\n\n| Error codes |    Description    |\n| ----------- | ----------------- |\n| V101        | Unused attribute  |\n| V102        | Unused class      |\n| V103        | Unused function   |\n| V104, F401  | Unused import     |\n| V105        | Unused property   |\n| V106        | Unused method     |\n| V107, F841  | Unused variable   |\n| V201        | Unreachable code  |\n\n-->\n\n## Exit codes\n\n| Exit code |                          Description                          |\n| --------- | ------------------------------------------------------------- |\n|     0     | No dead code found                                            |\n|     1     | Invalid input (file missing, syntax error, wrong encoding)    |\n|     2     | Invalid command line arguments                                |\n|     3     | Dead code found                                               |\n\n## Similar programs\n\n  - [pyflakes](https://pypi.org/project/pyflakes/) finds unused imports\n    and unused local variables (in addition to many other programmatic\n    errors).\n  - [coverage](https://pypi.org/project/coverage/) finds unused code\n    more reliably than Vulture, but requires all branches of the code to\n    actually be run.\n  - [uncalled](https://pypi.org/project/uncalled/) finds dead code by\n    using the abstract syntax tree (like Vulture), regular expressions,\n    or both.\n  - [dead](https://pypi.org/project/dead/) finds dead code by using the\n    abstract syntax tree (like Vulture).\n\n## Participate\n\nPlease visit <https://github.com/jendrikseipp/vulture> to report any\nissues or to make pull requests.\n\n  - Contributing guide:\n    [CONTRIBUTING.md](https://github.com/jendrikseipp/vulture/blob/main/CONTRIBUTING.md)\n  - Release notes:\n    [CHANGELOG.md](https://github.com/jendrikseipp/vulture/blob/main/CHANGELOG.md)\n  - Roadmap:\n    [TODO.md](https://github.com/jendrikseipp/vulture/blob/main/TODO.md)\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 1.6806640625,
          "content": "# TODOs\n\n* Add --ignore-attributes-for-classes option. When visiting such a class,\n  mark all its attributes as used. Fixes (partly):\n    * https://github.com/jendrikseipp/vulture/issues/309\n    * https://github.com/jendrikseipp/vulture/issues/264\n    * https://github.com/jendrikseipp/vulture/issues/249\n    * https://github.com/jendrikseipp/vulture/issues/315\n  Use these as test cases.\n* Honor (speaking) pylint error codes (e.g., # pylint:\n  disable=unused-import): unused-import, unused-variable, unused-argument,\n  possibly-unused-variable and unreachable-code. See\n  https://github.com/janjur/readable-pylint-messages#unused-import.\n\n# Non-TODOs\n\n* Ignore hidden files and directories (might be unexpected, use\n  --exclude instead).\n* Use Assign instead of Name AST nodes for estimating the size of\n  assignments (KISS).\n* Only count lines for unused code by storing a function `get_size` in\n  Item for computing the size on demand. This is 1.5 times as slow as\n  computing no sizes.\n* Compute sizes on demand. Storing nodes increases memory usage from\n  ~120 MiB to ~580 MiB for tensorflow's Python code.\n* Detect unreachable code for `ast.Assert` (`assert False` is common\n  idiom for aborting rogue code).\n* Detect superfluous expressions like `a <= b`, `42`, `foo and bar`\n  occurring outside of a statement (hard to detect if code is\n  unneeded).\n* Detect that body of `if foo:` is unreachable if foo is only assigned\n  \"false\" values (complicated: e.g., foo = \\[\\]; foo.append(1); if\n  foo: ...).\n* Use coverage.py to detect false-positives (\\#109). Workflow too\n  complicated.\n* Ignore some decorators by default: @app.route, @cli.command.\n* Ignore functions in conftest.py files that start with \"pytest_\".\n"
        },
        {
          "name": "dev",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.6845703125,
          "content": "[tool.ruff]\nexclude = [\n  \".eggs\",\n  \".git\",\n  \"_build\",\n  \"build\",\n  \"dist\",\n  \"htmlcov\",\n  \"vulture.egg-info\",\n  \".cache\",\n  \".coverage\",\n  \".pytest_cache\",\n  \".tox\",\n  \".venv\",\n  \".vscode\",\n]\n\n# Same as Black.\nline-length = 79\nindent-width = 4\n\ntarget-version = \"py38\"\n\n[tool.ruff.lint]\n# ruff enables Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.\nselect = [\n  \"B\", # flake8-bugbear\n  \"C4\", # comprehensions\n  \"E\", # pycodestyle\n  \"F\", # pyflakes\n  \"I001\", # isort\n  \"SIM\", # flake8-simplify\n  \"UP\", # pyupgrade\n]\nignore = [\n  \"C408\", # unnecessary dict call\n  \"SIM115\", # Use context handler for opening files\n]\n\n# Allow fix for all enabled rules (when `--fix`) is provided.\nfixable = [\"ALL\"]\nunfixable = []\n\n# Allow unused variables when underscore-prefixed.\ndummy-variable-rgx = \"^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$\"\n\n[tool.ruff.lint.per-file-ignores]\n\"vulture/whitelists/*.py\" = [\"B018\"]\n\n[tool.ruff.format]\n# Like Black, use double quotes for strings.\nquote-style = \"double\"\n\n# Like Black, indent with spaces, rather than tabs.\nindent-style = \"space\"\n\n# Like Black, respect magic trailing commas.\nskip-magic-trailing-comma = false\n\n# Like Black, automatically detect the appropriate line ending.\nline-ending = \"auto\"\n\n# Enable auto-formatting of code examples in docstrings. Markdown,\n# reStructuredText code/literal blocks and doctests are all supported.\n#\n# This is currently disabled by default, but it is planned for this\n# to be opt-out in the future.\ndocstring-code-format = false\n\n# Set the line length limit used when formatting code snippets in\n# docstrings.\n#\n# This only has an effect when the `docstring-code-format` setting is\n# enabled.\ndocstring-code-line-length = \"dynamic\"\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0390625,
          "content": "tomli >= 1.1.0; python_version < '3.11'\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.1875,
          "content": "[coverage:run]\nomit =\n  setup.py\n  .tox/*\nparallel = true\n\n[tool:pytest]\naddopts = --cov vulture --cov-report=html --cov-report=term --cov-report=xml --cov-append\n\n[bdist_wheel]\nuniversal = 1\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.9931640625,
          "content": "#! /usr/bin/env python\n\nimport pathlib\nimport re\n\nimport setuptools\n\n\ndef find_version(*parts):\n    here = pathlib.Path(__file__).parent\n    version_file = here.joinpath(*parts).read_text()\n    version_match = re.search(\n        r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]$\", version_file, re.M\n    )\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n\nwith open(\"README.md\") as f1, open(\"CHANGELOG.md\") as f2:\n    long_description = f1.read() + \"\\n\\n\" + f2.read()\n\nwith open(\"requirements.txt\") as f:\n    install_requires = f.read().splitlines()\n\nsetuptools.setup(\n    name=\"vulture\",\n    version=find_version(\"vulture\", \"version.py\"),\n    description=\"Find dead code\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    keywords=\"dead-code-removal\",\n    author=\"Jendrik Seipp\",\n    author_email=\"jendrikseipp@gmail.com\",\n    url=\"https://github.com/jendrikseipp/vulture\",\n    license=\"MIT\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n        \"Programming Language :: Python :: 3.13\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Software Development :: Quality Assurance\",\n    ],\n    install_requires=install_requires,\n    entry_points={\"console_scripts\": [\"vulture = vulture.core:main\"]},\n    python_requires=\">=3.8\",\n    packages=setuptools.find_packages(exclude=[\"tests\"]),\n    package_data={\"vulture\": [\"whitelists/*.py\"]},\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.6279296875,
          "content": "[tox]\nenvlist = cleanup, py{38,310,311,312,313}  # Skip py39 since it chokes on distutils.\nskip_missing_interpreters = true\n\n# Erase old coverage results, then accumulate them during this tox run.\n[testenv:cleanup]\ndeps =\n  coverage\ncommands =\n  coverage erase\n\n[testenv]\ndeps =\n  coverage\n  pint  # Use latest version to catch API changes.\n  pytest\n  pytest-cov\n  pytype ; python_version < '3.13'\ncommands =\n  pytest {posargs}\n# Install package as wheel in all envs (https://hynek.me/articles/turbo-charge-tox/).\npackage = wheel\nwheel_build_env = .pkg\n\n[pytest]\nfilterwarnings =\n  error::DeprecationWarning\n  error::PendingDeprecationWarning\n"
        },
        {
          "name": "vulture",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}