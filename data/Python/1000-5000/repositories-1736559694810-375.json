{
  "metadata": {
    "timestamp": 1736559694810,
    "page": 375,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "has2k1/plotnine",
      "stars": 4102,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.033203125,
          "content": "plotnine/_version.py export-subst\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.134765625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n__pypackages__/\nnode_modules/\n\n# Environments\n.direnv\n.venv\nvenv\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n.pytest_cache\n.ruff_cache\n.mypy_cache\n\n# plotnine testing\ntests/result_images/\nnotes.txt\nexamples/.ipynb_checkpoints\n\n# plotnine developing\n.ipynb_checkpoints/\n*.ipynb\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff\n*.log\n\n# PyBuilder\ntarget/\n\n# OS generated files\n.DS_Store\n.DS_Store?\n\n# AirSpeed Velocity benchmarks are not necessary as yet,\n# so it is a private branch and this gives a clean\n# git status\nbenchmarks\n\n# version file generated by setuptools-scm\nplotnine/_version.py\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.212890625,
          "content": "repos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.8.4\n    hooks:\n      # Run the linter.\n      - id: ruff\n        args: [--select=I001, --fix]\n      # Run the formatter.\n      - id: ruff-format\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.560546875,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: doc/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - doc\n    - requirements: requirements/examples.txt\n"
        },
        {
          "name": "CITATION.bib",
          "type": "blob",
          "size": 0.21484375,
          "content": "@misc{plotnine,\n  author = {The plotnine development team},\n  title  = {plotnine: A grammar of graphics for Python},\n  url    = {https://github.com/has2k1/plotnine},\n  doi    = {https://doi.org/10.5281/zenodo.1325308}\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2022 Hassan Kibirige\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.0244140625,
          "content": ".PHONY: clean-pyc clean-build doc clean visualize-tests build\nBROWSER := python -mwebbrowser\n\nhelp:\n\t@echo \"clean - remove all build, test, coverage and Python artifacts\"\n\t@echo \"clean-build - remove build artifacts\"\n\t@echo \"clean-pyc - remove Python file artifacts\"\n\t@echo \"clean-test - remove test and coverage artifacts\"\n\t@echo \"lint - check style with ruff\"\n\t@echo \"test - run tests quickly with the default Python\"\n\t@echo \"coverage - check code coverage quickly with the default Python\"\n\t@echo \"docs - generate Sphinx HTML documentation, including API docs\"\n\t@echo \"release - package and upload a release\"\n\t@echo \"dist - package\"\n\t@echo \"install - install the package to the active Python's site-packages\"\n\t@echo \"develop - install the package in development mode\"\n\nclean: clean-build clean-cache clean-test\n\nclean-build:\n\trm -fr build/\n\trm -fr dist/\n\tfind . -name '*.egg-info' -exec rm -fr {} +\n\nclean-cache:\n\tfind . -name '__pycache__' -exec rm -fr {} +\n\nclean-test:\n\trm -f .coverage\n\trm -f coverage.xml\n\trm -fr htmlcov/\n\trm -fr tests/result_images/*\n\nruff:\n\truff check . $(args)\n\nformat:\n\truff format . --check\n\nformat-fix:\n\truff format .\n\nlint: ruff\n\nlint-fix:\n\tmake lint args=\"--fix\"\n\nfix: format-fix lint-fix\n\ntypecheck:\n\tpyright\n\ntest: clean-test\n\texport MATPLOTLIB_BACKEND=agg\n\tpytest\n\nvisualize-tests:\n\tpython tools/visualize_tests.py\n\nupdate-baseline-images:\n\tpython tools/update_baseline_images.py\n\ncoverage:\n\tcoverage report -m\n\tcoverage html\n\t$(BROWSER) htmlcov/index.html\n\ndoc:\n\t$(MAKE) -C doc doc\n\ndoc-preview:\n\t$(MAKE) -C doc preview\n\nrelease-major:\n\t@python ./tools/release-checklist.py major\n\nrelease-minor:\n\t@python ./tools/release-checklist.py minor\n\nrelease-patch:\n\t@python ./tools/release-checklist.py patch\n\ndist: clean\n\tpython -m build\n\tls -l dist\n\nbuild: dist\n\ninstall: clean\n\tuv pip install \".[extra]\"\n\ndoc-deps:\n\tuv pip install -e \".[doc]\"\n\tuv pip install -r requirements/doc.txt\n\tcd doc && make deps\n\ndevelop: clean-cache\n\tuv pip install -e \".[all]\"\n\ndevelop-update: clean-cache\n\tuv pip install --upgrade -e \".[all]\"\n\tpre-commit autoupdate\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.314453125,
          "content": "# plotnine <img width=\"20%\" align=\"right\" src=\"https://github.com/has2k1/plotnine/blob/logos/doc/images/logo-512.png?raw=true\">\n\n[![Release](https://img.shields.io/pypi/v/plotnine.svg)](https://pypi.python.org/pypi/plotnine)\n[![License](https://img.shields.io/pypi/l/plotnine.svg)](https://pypi.python.org/pypi/plotnine)\n[![DOI](https://zenodo.org/badge/89276692.svg)](https://zenodo.org/badge/latestdoi/89276692)\n[![Build Status](https://github.com/has2k1/plotnine/workflows/build/badge.svg?branch=main)](https://github.com/has2k1/plotnine/actions?query=branch%3Amain+workflow%3A%22build%22)\n[![Coverage](https://codecov.io/github/has2k1/plotnine/coverage.svg?branch=main)](https://codecov.io/github/has2k1/plotnine?branch=main)\n\nplotnine is an implementation of a *grammar of graphics* in Python\nbased on [ggplot2](https://github.com/tidyverse/ggplot2).\nThe grammar allows you to compose plots by explicitly mapping variables in a\ndataframe to the visual characteristics (position, color, size etc.) of objects that make up the plot.\n\nPlotting with a *grammar of graphics* is powerful. Custom (and otherwise\ncomplex) plots are easy to think about and build incrementally, while the\nsimple plots remain simple to create.\n\nTo learn more about how to use plotnine, check out the\n[documentation](https://plotnine.org). Since plotnine\nhas an API similar to ggplot2, where it lacks in coverage the\n[ggplot2 documentation](http://ggplot2.tidyverse.org/reference/index.html)\nmay be helpful.\n\n\n## Example\n\n```python\nfrom plotnine import *\nfrom plotnine.data import mtcars\n```\n\nBuilding a complex plot piece by piece.\n\n1. Scatter plot\n\n   ```python\n   (\n       ggplot(mtcars, aes(\"wt\", \"mpg\"))\n       + geom_point()\n   )\n   ```\n\n   <img width=\"90%\" align=\"center\" src=\"https://github.com/has2k1/plotnine/blob/logos/doc/images/readme-image-1.png?raw=true\">\n\n2. Scatter plot colored according some variable\n\n   ```python\n   (\n       ggplot(mtcars, aes(\"wt\", \"mpg\", color=\"factor(gear)\"))\n       + geom_point()\n   )\n   ```\n\n   <img width=\"90%\" align=\"center\" src=\"https://github.com/has2k1/plotnine/blob/logos/doc/images/readme-image-2.png?raw=true\">\n\n3. Scatter plot colored according some variable and\n   smoothed with a linear model with confidence intervals.\n\n   ```python\n   (\n       ggplot(mtcars, aes(\"wt\", \"mpg\", color=\"factor(gear)\"))\n       + geom_point()\n       + stat_smooth(method=\"lm\")\n   )\n   ```\n\n   <img width=\"90%\" align=\"center\" src=\"https://github.com/has2k1/plotnine/blob/logos/doc/images/readme-image-3.png?raw=true\">\n\n4. Scatter plot colored according some variable,\n   smoothed with a linear model with confidence intervals and\n   plotted on separate panels.\n\n   ```python\n   (\n       ggplot(mtcars, aes(\"wt\", \"mpg\", color=\"factor(gear)\"))\n       + geom_point()\n       + stat_smooth(method=\"lm\")\n       + facet_wrap(\"gear\")\n   )\n   ```\n\n   <img width=\"90%\" align=\"center\" src=\"https://github.com/has2k1/plotnine/blob/logos/doc/images/readme-image-4.png?raw=true\">\n\n5. Adjust the themes\n\n\n   I) Make it playful\n\n   ```python\n   (\n       ggplot(mtcars, aes(\"wt\", \"mpg\", color=\"factor(gear)\"))\n       + geom_point()\n       + stat_smooth(method=\"lm\")\n       + facet_wrap(\"gear\")\n       + theme_xkcd()\n   )\n   ```\n\n   <img width=\"90%\" align=\"center\" src=\"https://github.com/has2k1/plotnine/blob/logos/doc/images/readme-image-5.png?raw=true\">\n\n   II) Or professional\n\n   ```python\n   (\n       ggplot(mtcars, aes(\"wt\", \"mpg\", color=\"factor(gear)\"))\n       + geom_point()\n       + stat_smooth(method=\"lm\")\n       + facet_wrap(\"gear\")\n       + theme_tufte()\n   )\n   ```\n\n   <img width=\"90%\" align=\"center\" src=\"https://github.com/has2k1/plotnine/blob/logos/doc/images/readme-image-5alt.png?raw=true\">\n\n## Installation\n\nOfficial release\n\n```console\n# Using pip\n$ pip install plotnine             # 1. should be sufficient for most\n$ pip install 'plotnine[extra]'    # 2. includes extra/optional packages\n$ pip install 'plotnine[test]'     # 3. testing\n$ pip install 'plotnine[doc]'      # 4. generating docs\n$ pip install 'plotnine[dev]'      # 5. development (making releases)\n$ pip install 'plotnine[all]'      # 6. everything\n\n# Or using conda\n$ conda install -c conda-forge plotnine\n```\n\nDevelopment version\n\n```console\n$ pip install git+https://github.com/has2k1/plotnine.git\n```\n\n## Contributing\n\nOur documentation could use some examples, but we are looking for something\na little bit special. We have two criteria:\n\n1. Simple looking plots that otherwise require a trick or two.\n2. Plots that are part of a data analytic narrative. That is, they provide\n   some form of clarity showing off the `geom`, `stat`, ... at their\n   differential best.\n\nIf you come up with something that meets those criteria, we would love to\nsee it. See [plotnine-examples](https://github.com/has2k1/plotnine-examples).\n\nIf you discover a bug checkout the [issues](https://github.com/has2k1/plotnine/issues)\nif it has not been reported, yet please file an issue.\n\nAnd if you can fix a bug, your contribution is welcome.\n\nTesting\n-------\n\nPlotnine has tests that generate images which are compared to baseline images known\nto be correct. To generate images that are consistent across all systems you have\nto install matplotlib from source. You can do that with ``pip`` using the command.\n\n```console\n$ pip install matplotlib --no-binary matplotlib\n```\n\nOtherwise there may be small differences in the text rendering that throw off the\nimage comparisons.\n"
        },
        {
          "name": "code-of-conduct.md",
          "type": "blob",
          "size": 5.1201171875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at codeofconduct@posit.co.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n<https://www.contributor-covenant.org/version/2/1/code_of_conduct.html>.\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][https://github.com/mozilla/inclusion].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n<https://www.contributor-covenant.org/faq>. Translations are available at <https://www.contributor-covenant.org/translations>.\n\n[homepage]: https://www.contributor-covenant.org\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.232421875,
          "content": "codecov:\n  require_ci_to_pass: true\n\ncomment:\n   behavior: default\n   branches:\n      - 'main'\n\ncoverage:\n   round: 'down'\n   range: 90..100\n   status:\n      project:\n         default:\n            target: auto\n            threshold: 0.5%\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "licences",
          "type": "tree",
          "content": null
        },
        {
          "name": "plotnine",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 6.021484375,
          "content": "########## Project ##########\n[project]\nname = \"plotnine\"\ndescription = \"A Grammar of Graphics for Python\"\nlicense = {file = \"LICENSE\"}\nauthors = [\n  {name = \"Hassan Kibirige\", email = \"has2k1@gmail.com\"},\n]\ndynamic = [\"version\"]\nreadme = \"README.md\"\nclassifiers = [\n    \"Intended Audience :: Science/Research\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: Microsoft :: Windows\",\n    \"Operating System :: Unix\",\n    \"Operating System :: MacOS\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n    \"Framework :: Matplotlib\",\n    \"Topic :: Scientific/Engineering :: Visualization\"\n]\ndependencies = [\n    \"matplotlib>=3.8.0\",\n    \"pandas>=2.2.0\",\n    \"mizani~=0.13.0\",\n    \"numpy>=1.23.5\",\n    \"scipy>=1.8.0\",\n    \"statsmodels>=0.14.0\",\n]\nrequires-python = \">=3.10\"\n\n[project.optional-dependencies]\nall = [\n    \"plotnine[extra]\",\n    \"plotnine[doc]\",\n    \"plotnine[lint]\",\n    \"plotnine[test]\",\n    \"plotnine[build]\",\n    \"plotnine[dev]\",\n]\n\nextra = [\n    \"adjustText>=1.2.0\",\n    \"geopandas>=1.0.0\",\n    \"scikit-learn>1.2.0\",\n    \"scikit-misc>=0.5.1\"\n]\n\ndoc = [\n    \"jupyter\",\n    \"nbsphinx\",\n    \"click\",\n    \"numpydoc>=0.9.1\",\n    \"quartodoc>=0.7.2\",\n]\n\nlint = [\n    \"ruff\",\n]\n\ntest = [\n    \"pytest-cov>=4.0.0\"\n]\n\nbuild = [\n    \"build\",\n    \"wheel\",\n]\n\ndev = [\n    \"twine\",\n    \"plotnine[typing]\",\n    \"pre-commit\",\n]\n\ntyping = [\n    \"pyright==1.1.391\",\n    \"ipython\",\n    \"pandas-stubs\",\n]\n\n[project.urls]\nhomepage = \"https://plotnine.readthedocs.io/en/stable\"\nrepository = \"https://github.com/has2k1/plotnine\"\nchangelog = \"https://plotnine.readthedocs.io/en/stable/changelog.html\"\nci = \"https://github.com/has2k1/plotnine/actions\"\n\n########## Build System ##########\n# Reference https://github.com/pydata/xarray/blob/main/pyproject.toml\n[build-system]\nrequires = [\n    \"setuptools>=59\",\n    \"setuptools_scm[toml]>=6.4\",\n    \"wheel\",\n]\nbuild-backend = \"setuptools.build_meta\"\n\n########## Tool - Setuptools ##########\n# If you only specify the top-level package (=plotnine) setuptools complains\n# about not listing the sub-packages. Since we want every sub-package in the\n# plotnine package, it is easier to use find directive.\n[tool.setuptools.packages.find]\ninclude = [\"plotnine*\"]\n\n[tool.setuptools_scm]\nfallback_version = \"999\"\nversion_scheme = 'post-release'\n\n########## Tool - Pytest ##########\n[tool.pytest.ini_options]\ntestpaths = [\n    \"tests\"\n]\ndoctest_optionflags = \"ALLOW_BYTES NORMALIZE_WHITESPACE\"\naddopts = \"--pyargs --cov=plotnine --cov-report=xml --import-mode=importlib\"\n\n########## Tool - Coverage ##########\n# Coverage.py\n[tool.coverage.run]\nbranch = true\nsource = [\"plotnine\"]\ninclude = [\n    \"plotnine/*\"\n]\nomit = [\n    \"tests/*\",\n    \"plotnine/typing.py\",\n    \"plotnine/_utils/dev.py\",\n]\n\ndisable_warnings = [\"include-ignored\"]\n\n[tool.coverage.report]\nexclude_lines = [\n    \"pragma: no cover\",\n    \"^def test_\",\n    \"if __name__ == .__main__.:\",\n    \"raise NotImplementedError('Not Implemented')\",\n    \"if typing.TYPE_CHECKING:\",\n    \"if TYPE_CHECKING:\",\n    \"except ImportError:\",\n    \"except PackageNotFoundError:\",\n]\nprecision = 1\n\n\n########## Tool - Pyright ##########\n[tool.pyright]\n# Paths of directories or files that should be included. If no paths\n# are specified, pyright defaults to the directory that contains the\n# config file. Paths may contain wildcard characters ** (a directory or\n# multiple levels of directories), * (a sequence of zero or more\n# characters), or ? (a single character). If no include paths are\n# specified, the root path for the workspace is assumed.\ninclude = [\n    \"plotnine/\"\n]\n\n# Paths of directories or files whose diagnostic output (errors and\n# warnings) should be suppressed even if they are an included file or\n# within the transitive closure of an included file. Paths may contain\n# wildcard characters ** (a directory or multiple levels of\n# directories), * (a sequence of zero or more characters), or ? (a\n# single character).\nignore = []\n\n# Set of identifiers that should be assumed to contain a constant\n# value wherever used within this program. For example, { \"DEBUG\": true\n# } indicates that pyright should assume that the identifier DEBUG will\n# always be equal to True. If this identifier is used within a\n# conditional expression (such as if not DEBUG:) pyright will use the\n# indicated value to determine whether the guarded block is reachable\n# or not. Member expressions that reference one of these constants\n# (e.g. my_module.DEBUG) are also supported.\ndefineConstant = { DEBUG = true }\n\n# typeCheckingMode = \"strict\"\nuseLibraryCodeForTypes = true\nreportUnnecessaryTypeIgnoreComment = true\n\n\n# Specifies a list of execution environments (see below). Execution\n# environments are searched from start to finish by comparing the path\n# of a source file with the root path specified in the execution\n# environment.\nexecutionEnvironments = []\n\nstubPath = \"\"\n\n########## Tool - Ruff ##########\n[tool.ruff]\nline-length = 79\n\n[tool.ruff.lint]\nselect = [\n   \"E\",\n   \"F\",\n   \"I\",\n   \"TCH\",\n   \"Q\",\n   \"PIE\",\n   \"PTH\",\n   \"PD\",\n   \"PYI\",\n   \"RSE\",\n   \"SIM\",\n   \"B904\",\n   \"FLY\",\n   \"NPY\",\n   \"PERF102\"\n]\nignore = [\n    \"E741\",  # Ambiguous l\n    \"E743\",  # Ambiguous I\n    # .reset_index, .rename, .replace\n    # This will remain the correct choice until we enable copy-on-write\n    \"PD002\",\n    # Use specific rule codes when ignoring type issues and\n    # not # type: ignore\n    \"PGH003\"\n]\n\n# Allow autofix for all enabled rules (when `--fix`) is provided.\nfixable = [\"ALL\"]\nunfixable = []\n\n# Exclude a variety of commonly ignored directories.\nexclude = [\n    \"plotnine/themes/seaborn_rcmod.py\",\n    \"**/__pycache__\",\n    \"node_modules\"\n]\n\n\n# Allow unused variables when underscore-prefixed.\ndummy-variable-rgx = \"^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$\"\n\n[tool.ruff.lint.per-file-ignores]\n\"plotnine/__init__.py\" = [\"F403\", \"F405\"]\n\"plotnine/typing.py\" = [\"F401\", \"TCH001\"]\n\"doc/_renderers/numpydoc.py\" = [\"F811\"]\n\"doc/_renderers/format.py\" = [\"F811\"]\n\"doc/_renderer.py\" = [\"F811\"]\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}