{
  "metadata": {
    "timestamp": 1736560395005,
    "page": 949,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google-research/albert",
      "stars": 3253,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.3291015625,
          "content": "# Initially taken from Github's Python gitignore file\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.0712890625,
          "content": "# How to Contribute\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows\n[Google's Open Source Community Guidelines](https://opensource.google/conduct/).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.349609375,
          "content": "ALBERT\n======\n\n***************New March 28, 2020 ***************\n\nAdd a colab [tutorial](https://github.com/google-research/albert/blob/master/albert_glue_fine_tuning_tutorial.ipynb) to run fine-tuning for GLUE datasets.\n\n***************New January 7, 2020 ***************\n\nv2 TF-Hub models should be working now with TF 1.15, as we removed the\nnative Einsum op from the graph. See updated TF-Hub links below.\n\n***************New December 30, 2019 ***************\n\nChinese models are released. We would like to thank [CLUE team ](https://github.com/CLUEbenchmark/CLUE) for providing the training data.\n\n- [Base](https://storage.googleapis.com/albert_models/albert_base_zh.tar.gz)\n- [Large](https://storage.googleapis.com/albert_models/albert_large_zh.tar.gz)\n- [Xlarge](https://storage.googleapis.com/albert_models/albert_xlarge_zh.tar.gz)\n- [Xxlarge](https://storage.googleapis.com/albert_models/albert_xxlarge_zh.tar.gz)\n\nVersion 2 of ALBERT models is released.\n\n- Base: [[Tar file](https://storage.googleapis.com/albert_models/albert_base_v2.tar.gz)] [[TF-Hub](https://tfhub.dev/google/albert_base/3)]\n- Large: [[Tar file](https://storage.googleapis.com/albert_models/albert_large_v2.tar.gz)] [[TF-Hub](https://tfhub.dev/google/albert_large/3)]\n- Xlarge: [[Tar file](https://storage.googleapis.com/albert_models/albert_xlarge_v2.tar.gz)] [[TF-Hub](https://tfhub.dev/google/albert_xlarge/3)]\n- Xxlarge: [[Tar file](https://storage.googleapis.com/albert_models/albert_xxlarge_v2.tar.gz)] [[TF-Hub](https://tfhub.dev/google/albert_xxlarge/3)]\n\nIn this version, we apply 'no dropout', 'additional training data' and 'long training time' strategies to all models. We train ALBERT-base for 10M steps and other models for 3M steps.\n\nThe result comparison to the v1 models is as followings:\n\n|                | Average  | SQuAD1.1 | SQuAD2.0 | MNLI     | SST-2    | RACE     |\n|----------------|----------|----------|----------|----------|----------|----------|\n|V2              |\n|ALBERT-base     |82.3      |90.2/83.2 |82.1/79.3 |84.6      |92.9      |66.8      |\n|ALBERT-large    |85.7      |91.8/85.2 |84.9/81.8 |86.5      |94.9      |75.2      |\n|ALBERT-xlarge   |87.9      |92.9/86.4 |87.9/84.1 |87.9      |95.4      |80.7      |\n|ALBERT-xxlarge  |90.9      |94.6/89.1 |89.8/86.9 |90.6      |96.8      |86.8      |\n|V1              |\n|ALBERT-base     |80.1      |89.3/82.3 | 80.0/77.1|81.6      |90.3      | 64.0     |\n|ALBERT-large    |82.4      |90.6/83.9 | 82.3/79.4|83.5      |91.7      | 68.5     |\n|ALBERT-xlarge   |85.5      |92.5/86.1 | 86.1/83.1|86.4      |92.4      | 74.8     |\n|ALBERT-xxlarge  |91.0      |94.8/89.3 | 90.2/87.4|90.8      |96.9      | 86.5     |\n\nThe comparison shows that for ALBERT-base, ALBERT-large, and ALBERT-xlarge, v2 is much better than v1, indicating the importance of applying the above three strategies. On average, ALBERT-xxlarge is slightly worse than the v1, because of the following two reasons: 1) Training additional 1.5 M steps (the only difference between these two models is training for 1.5M steps and 3M steps) did not lead to significant performance improvement. 2) For v1, we did a little bit hyperparameter search among the parameters sets given by BERT, Roberta, and XLnet. For v2, we simply adopt the parameters from v1 except for RACE, where we use a learning rate of 1e-5 and 0 [ALBERT DR](https://arxiv.org/pdf/1909.11942.pdf) (dropout rate for ALBERT in finetuning). The original (v1) RACE hyperparameter will cause model divergence for v2 models. Given that the downstream tasks are sensitive to the fine-tuning hyperparameters, we should be careful about so called slight improvements.\n\nALBERT is \"A Lite\" version of BERT, a popular unsupervised language\nrepresentation learning algorithm. ALBERT uses parameter-reduction techniques\nthat allow for large-scale configurations, overcome previous memory limitations,\nand achieve better behavior with respect to model degradation.\n\nFor a technical description of the algorithm, see our paper:\n\n[ALBERT: A Lite BERT for Self-supervised Learning of Language Representations](https://arxiv.org/abs/1909.11942)\n\nZhenzhong Lan, Mingda Chen, Sebastian Goodman, Kevin Gimpel, Piyush Sharma, Radu Soricut\n\nRelease Notes\n=============\n\n- Initial release: 10/9/2019\n\nResults\n=======\n\nPerformance of ALBERT on GLUE benchmark results using a single-model setup on\ndev:\n\n| Models            | MNLI     | QNLI     | QQP      | RTE      | SST      | MRPC     | CoLA     | STS      |\n|-------------------|----------|----------|----------|----------|----------|----------|----------|----------|\n| BERT-large        | 86.6     | 92.3     | 91.3     | 70.4     | 93.2     | 88.0     | 60.6     | 90.0     |\n| XLNet-large       | 89.8     | 93.9     | 91.8     | 83.8     | 95.6     | 89.2     | 63.6     | 91.8     |\n| RoBERTa-large     | 90.2     | 94.7     | **92.2** | 86.6     | 96.4     | **90.9** | 68.0     | 92.4     |\n| ALBERT (1M)       | 90.4     | 95.2     | 92.0     | 88.1     | 96.8     | 90.2     | 68.7     | 92.7     |\n| ALBERT (1.5M)     | **90.8** | **95.3** | **92.2** | **89.2** | **96.9** | **90.9** | **71.4** | **93.0** |\n\nPerformance of ALBERT-xxl on SQuaD and RACE benchmarks using a single-model\nsetup:\n\n|Models                    | SQuAD1.1 dev  | SQuAD2.0 dev  | SQuAD2.0 test | RACE test (Middle/High) |\n|--------------------------|---------------|---------------|---------------|-------------------------|\n|BERT-large                | 90.9/84.1     | 81.8/79.0     | 89.1/86.3     | 72.0 (76.6/70.1)        |\n|XLNet                     | 94.5/89.0     | 88.8/86.1     | 89.1/86.3     | 81.8 (85.5/80.2)        |\n|RoBERTa                   | 94.6/88.9     | 89.4/86.5     | 89.8/86.8     | 83.2 (86.5/81.3)        |\n|UPM                       | -             | -             | 89.9/87.2     | -                       |\n|XLNet + SG-Net Verifier++ | -             | -             | 90.1/87.2     | -                       |\n|ALBERT (1M)               | 94.8/89.2     | 89.9/87.2     | -             | 86.0 (88.2/85.1)        |\n|ALBERT (1.5M)             | **94.8/89.3** | **90.2/87.4** | **90.9/88.1** | **86.5 (89.0/85.5)**    |\n\n\nPre-trained Models\n==================\nTF-Hub modules are available:\n\n- Base: [[Tar file](https://storage.googleapis.com/albert_models/albert_base_v1.tar.gz)] [[TF-Hub](https://tfhub.dev/google/albert_base/1)]\n- Large: [[Tar file](https://storage.googleapis.com/albert_models/albert_large_v1.tar.gz)] [[TF-Hub](https://tfhub.dev/google/albert_large/1)]\n- Xlarge: [[Tar file](https://storage.googleapis.com/albert_models/albert_xlarge_v1.tar.gz)] [[TF-Hub](https://tfhub.dev/google/albert_xlarge/1)]\n- Xxlarge: [[Tar file](https://storage.googleapis.com/albert_models/albert_xxlarge_v1.tar.gz)] [[TF-Hub](https://tfhub.dev/google/albert_xxlarge/1)]\n\nExample usage of the TF-Hub module in code:\n\n```\ntags = set()\nif is_training:\n  tags.add(\"train\")\nalbert_module = hub.Module(\"https://tfhub.dev/google/albert_base/1\", tags=tags,\n                           trainable=True)\nalbert_inputs = dict(\n    input_ids=input_ids,\n    input_mask=input_mask,\n    segment_ids=segment_ids)\nalbert_outputs = albert_module(\n    inputs=albert_inputs,\n    signature=\"tokens\",\n    as_dict=True)\n\n# If you want to use the token-level output, use\n# albert_outputs[\"sequence_output\"] instead.\noutput_layer = albert_outputs[\"pooled_output\"]\n```\n\nMost of the fine-tuning scripts in this repository support TF-hub modules\nvia the `--albert_hub_module_handle` flag.\n\nPre-training Instructions\n=========================\nTo pretrain ALBERT, use `run_pretraining.py`:\n\n```\npip install -r albert/requirements.txt\npython -m albert.run_pretraining \\\n    --input_file=... \\\n    --output_dir=... \\\n    --init_checkpoint=... \\\n    --albert_config_file=... \\\n    --do_train \\\n    --do_eval \\\n    --train_batch_size=4096 \\\n    --eval_batch_size=64 \\\n    --max_seq_length=512 \\\n    --max_predictions_per_seq=20 \\\n    --optimizer='lamb' \\\n    --learning_rate=.00176 \\\n    --num_train_steps=125000 \\\n    --num_warmup_steps=3125 \\\n    --save_checkpoints_steps=5000\n```\n\nFine-tuning on GLUE\n===================\nTo fine-tune and evaluate a pretrained ALBERT on GLUE, please see the\nconvenience script `run_glue.sh`.\n\nLower-level use cases may want to use the `run_classifier.py` script directly.\nThe `run_classifier.py` script is used both for fine-tuning and evaluation of\nALBERT on individual GLUE benchmark tasks, such as MNLI:\n\n```\npip install -r albert/requirements.txt\npython -m albert.run_classifier \\\n  --data_dir=... \\\n  --output_dir=... \\\n  --init_checkpoint=... \\\n  --albert_config_file=... \\\n  --spm_model_file=... \\\n  --do_train \\\n  --do_eval \\\n  --do_predict \\\n  --do_lower_case \\\n  --max_seq_length=128 \\\n  --optimizer=adamw \\\n  --task_name=MNLI \\\n  --warmup_step=1000 \\\n  --learning_rate=3e-5 \\\n  --train_step=10000 \\\n  --save_checkpoints_steps=100 \\\n  --train_batch_size=128\n```\n\nGood default flag values for each GLUE task can be found in `run_glue.sh`.\n\nYou can fine-tune the model starting from TF-Hub modules instead of raw\ncheckpoints by setting e.g.\n`--albert_hub_module_handle=https://tfhub.dev/google/albert_base/1` instead\nof `--init_checkpoint`.\n\nYou can find the spm_model_file in the tar files or under the assets folder of\nthe tf-hub module. The name of the model file is \"30k-clean.model\".\n\nAfter evaluation, the script should report some output like this:\n\n```\n***** Eval results *****\n  global_step = ...\n  loss = ...\n  masked_lm_accuracy = ...\n  masked_lm_loss = ...\n  sentence_order_accuracy = ...\n  sentence_order_loss = ...\n```\n\nFine-tuning on SQuAD\n====================\nTo fine-tune and evaluate a pretrained model on SQuAD v1, use the\n`run_squad_v1.py` script:\n\n```\npip install -r albert/requirements.txt\npython -m albert.run_squad_v1 \\\n  --albert_config_file=... \\\n  --output_dir=... \\\n  --train_file=... \\\n  --predict_file=... \\\n  --train_feature_file=... \\\n  --predict_feature_file=... \\\n  --predict_feature_left_file=... \\\n  --init_checkpoint=... \\\n  --spm_model_file=... \\\n  --do_lower_case \\\n  --max_seq_length=384 \\\n  --doc_stride=128 \\\n  --max_query_length=64 \\\n  --do_train=true \\\n  --do_predict=true \\\n  --train_batch_size=48 \\\n  --predict_batch_size=8 \\\n  --learning_rate=5e-5 \\\n  --num_train_epochs=2.0 \\\n  --warmup_proportion=.1 \\\n  --save_checkpoints_steps=5000 \\\n  --n_best_size=20 \\\n  --max_answer_length=30\n```\n\nYou can fine-tune the model starting from TF-Hub modules instead of raw\ncheckpoints by setting e.g.\n`--albert_hub_module_handle=https://tfhub.dev/google/albert_base/1` instead\nof `--init_checkpoint`.\n\nFor SQuAD v2, use the `run_squad_v2.py` script:\n\n```\npip install -r albert/requirements.txt\npython -m albert.run_squad_v2 \\\n  --albert_config_file=... \\\n  --output_dir=... \\\n  --train_file=... \\\n  --predict_file=... \\\n  --train_feature_file=... \\\n  --predict_feature_file=... \\\n  --predict_feature_left_file=... \\\n  --init_checkpoint=... \\\n  --spm_model_file=... \\\n  --do_lower_case \\\n  --max_seq_length=384 \\\n  --doc_stride=128 \\\n  --max_query_length=64 \\\n  --do_train \\\n  --do_predict \\\n  --train_batch_size=48 \\\n  --predict_batch_size=8 \\\n  --learning_rate=5e-5 \\\n  --num_train_epochs=2.0 \\\n  --warmup_proportion=.1 \\\n  --save_checkpoints_steps=5000 \\\n  --n_best_size=20 \\\n  --max_answer_length=30\n```\n\nYou can fine-tune the model starting from TF-Hub modules instead of raw\ncheckpoints by setting e.g.\n`--albert_hub_module_handle=https://tfhub.dev/google/albert_base/1` instead\nof `--init_checkpoint`.\n\nFine-tuning on RACE\n===================\nFor RACE, use the `run_race.py` script:\n\n```\npip install -r albert/requirements.txt\npython -m albert.run_race \\\n  --albert_config_file=... \\\n  --output_dir=... \\\n  --train_file=... \\\n  --eval_file=... \\\n  --data_dir=...\\\n  --init_checkpoint=... \\\n  --spm_model_file=... \\\n  --max_seq_length=512 \\\n  --max_qa_length=128 \\\n  --do_train \\\n  --do_eval \\\n  --train_batch_size=32 \\\n  --eval_batch_size=8 \\\n  --learning_rate=1e-5 \\\n  --train_step=12000 \\\n  --warmup_step=1000 \\\n  --save_checkpoints_steps=100\n```\n\nYou can fine-tune the model starting from TF-Hub modules instead of raw\ncheckpoints by setting e.g.\n`--albert_hub_module_handle=https://tfhub.dev/google/albert_base/1` instead\nof `--init_checkpoint`.\n\nSentencePiece\n=============\nCommand for generating the sentence piece vocabulary:\n\n```\nspm_train \\\n--input all.txt --model_prefix=30k-clean --vocab_size=30000 --logtostderr\n--pad_id=0 --unk_id=1 --eos_id=-1 --bos_id=-1\n--control_symbols=[CLS],[SEP],[MASK]\n--user_defined_symbols=\"(,),\\\",-,.,–,£,€\"\n--shuffle_input_sentence=true --input_sentence_size=10000000\n--character_coverage=0.99995 --model_type=unigram\n```\n"
        },
        {
          "name": "__init__.py",
          "type": "blob",
          "size": 0.591796875,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n"
        },
        {
          "name": "albert_glue_fine_tuning_tutorial.ipynb",
          "type": "blob",
          "size": 11.1328125,
          "content": "{\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0,\n  \"metadata\": {\n    \"colab\": {\n      \"name\": \"albert_glue_fine_tuning_tutorial\",\n      \"provenance\": [],\n      \"collapsed_sections\": [],\n      \"toc_visible\": true\n    },\n    \"kernelspec\": {\n      \"name\": \"python3\",\n      \"display_name\": \"Python 3\"\n    },\n    \"accelerator\": \"TPU\"\n  },\n  \"cells\": [\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"y8SJfpgTccDB\",\n        \"colab_type\": \"text\"\n      },\n      \"source\": [\n        \"\\n\",\n        \"<a href=\\\"https://colab.research.google.com/github/google-research/albert/blob/master/albert_glue_fine_tuning_tutorial.ipynb\\\" target=\\\"_parent\\\"><img src=\\\"https://colab.research.google.com/assets/colab-badge.svg\\\" alt=\\\"Open In Colab\\\"/></a>\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"id\": \"wHQH4OCHZ9bq\",\n        \"colab_type\": \"code\",\n        \"cellView\": \"form\",\n        \"colab\": {}\n      },\n      \"source\": [\n        \"# @title Copyright 2020 The ALBERT Authors. All Rights Reserved.\\n\",\n        \"#\\n\",\n        \"# Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\",\n        \"# you may not use this file except in compliance with the License.\\n\",\n        \"# You may obtain a copy of the License at\\n\",\n        \"#\\n\",\n        \"#     http://www.apache.org/licenses/LICENSE-2.0\\n\",\n        \"#\\n\",\n        \"# Unless required by applicable law or agreed to in writing, software\\n\",\n        \"# distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\",\n        \"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\",\n        \"# See the License for the specific language governing permissions and\\n\",\n        \"# limitations under the License.\\n\",\n        \"# ==============================================================================\"\n      ],\n      \"execution_count\": 0,\n      \"outputs\": []\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"rkTLZ3I4_7c_\",\n        \"colab_type\": \"text\"\n      },\n      \"source\": [\n        \"# ALBERT End to End (Fine-tuning + Predicting) with Cloud TPU\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"1wtjs1QDb3DX\",\n        \"colab_type\": \"text\"\n      },\n      \"source\": [\n        \"## Overview\\n\",\n        \"\\n\",\n        \"ALBERT is \\\"A Lite\\\" version of BERT, a popular unsupervised language representation learning algorithm. ALBERT uses parameter-reduction techniques that allow for large-scale configurations, overcome previous memory limitations, and achieve better behavior with respect to model degradation.\\n\",\n        \"\\n\",\n        \"For a technical description of the algorithm, see our paper:\\n\",\n        \"\\n\",\n        \"https://arxiv.org/abs/1909.11942\\n\",\n        \"\\n\",\n        \"Zhenzhong Lan, Mingda Chen, Sebastian Goodman, Kevin Gimpel, Piyush Sharma, Radu Soricut\\n\",\n        \"\\n\",\n        \"This Colab demonstates using a free Colab Cloud TPU to fine-tune GLUE tasks built on top of pretrained ALBERT models and \\n\",\n        \"run predictions on tuned model. The colab demonsrates loading pretrained ALBERT models from both [TF Hub](https://www.tensorflow.org/hub) and checkpoints.\\n\",\n        \"\\n\",\n        \"**Note:**  You will need a GCP (Google Compute Engine) account and a GCS (Google Cloud \\n\",\n        \"Storage) bucket for this Colab to run.\\n\",\n        \"\\n\",\n        \"Please follow the [Google Cloud TPU quickstart](https://cloud.google.com/tpu/docs/quickstart) for how to create GCP account and GCS bucket. You have [$300 free credit](https://cloud.google.com/free/) to get started with any GCP product. You can learn more about Cloud TPU at https://cloud.google.com/tpu/docs.\\n\",\n        \"\\n\",\n        \"This notebook is hosted on GitHub. To view it in its original repository, after opening the notebook, select **File > View on GitHub**.\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"Ld-JXlueIuPH\",\n        \"colab_type\": \"text\"\n      },\n      \"source\": [\n        \"## Instructions\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"POkof5uHaQ_c\",\n        \"colab_type\": \"text\"\n      },\n      \"source\": [\n        \"<h3><a href=\\\"https://cloud.google.com/tpu/\\\"><img valign=\\\"middle\\\" src=\\\"https://raw.githubusercontent.com/GoogleCloudPlatform/tensorflow-without-a-phd/master/tensorflow-rl-pong/images/tpu-hexagon.png\\\" width=\\\"50\\\"></a>  &nbsp;&nbsp;Train on TPU</h3>\\n\",\n        \"\\n\",\n        \"   1. Create a Cloud Storage bucket for your TensorBoard logs at http://console.cloud.google.com/storage and fill in the BUCKET parameter in the \\\"Parameters\\\" section below.\\n\",\n        \" \\n\",\n        \"   1. On the main menu, click Runtime and select **Change runtime type**. Set \\\"TPU\\\" as the hardware accelerator.\\n\",\n        \"   1. Click Runtime again and select **Runtime > Run All** (Watch out: the \\\"Colab-only auth for this notebook and the TPU\\\" cell requires user input). You can also run the cells manually with Shift-ENTER.\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"UdMmwCJFaT8F\",\n        \"colab_type\": \"text\"\n      },\n      \"source\": [\n        \"### Set up your TPU environment\\n\",\n        \"\\n\",\n        \"In this section, you perform the following tasks:\\n\",\n        \"\\n\",\n        \"*   Set up a Colab TPU running environment\\n\",\n        \"*   Verify that you are connected to a TPU device\\n\",\n        \"*   Upload your credentials to TPU to access your GCS bucket.\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"id\": \"191zq3ZErihP\",\n        \"colab_type\": \"code\",\n        \"colab\": {}\n      },\n      \"source\": [\n        \"# TODO(lanzhzh): Add support for 2.x.\\n\",\n        \"%tensorflow_version 1.x\\n\",\n        \"import os\\n\",\n        \"import pprint\\n\",\n        \"import json\\n\",\n        \"import tensorflow as tf\\n\",\n        \"\\n\",\n        \"assert \\\"COLAB_TPU_ADDR\\\" in os.environ, \\\"ERROR: Not connected to a TPU runtime; please see the first cell in this notebook for instructions!\\\"\\n\",\n        \"TPU_ADDRESS = \\\"grpc://\\\" + os.environ[\\\"COLAB_TPU_ADDR\\\"] \\n\",\n        \"TPU_TOPOLOGY = \\\"2x2\\\"\\n\",\n        \"print(\\\"TPU address is\\\", TPU_ADDRESS)\\n\",\n        \"\\n\",\n        \"from google.colab import auth\\n\",\n        \"auth.authenticate_user()\\n\",\n        \"with tf.Session(TPU_ADDRESS) as session:\\n\",\n        \"  print('TPU devices:')\\n\",\n        \"  pprint.pprint(session.list_devices())\\n\",\n        \"\\n\",\n        \"  # Upload credentials to TPU.\\n\",\n        \"  with open('/content/adc.json', 'r') as f:\\n\",\n        \"    auth_info = json.load(f)\\n\",\n        \"  tf.contrib.cloud.configure_gcs(session, credentials=auth_info)\\n\",\n        \"    # Now credentials are set for all future sessions on this TPU.\"\n      ],\n      \"execution_count\": 0,\n      \"outputs\": []\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"HUBP35oCDmbF\",\n        \"colab_type\": \"text\"\n      },\n      \"source\": [\n        \"### Prepare and import ALBERT modules\\n\",\n        \"​\\n\",\n        \"With your environment configured, you can now prepare and import the ALBERT modules. The following step clones the source code from GitHub.\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"id\": \"7wzwke0sxS6W\",\n        \"colab_type\": \"code\",\n        \"colab\": {},\n        \"cellView\": \"code\"\n      },\n      \"source\": [\n        \"#TODO(lanzhzh): Add pip support\\n\",\n        \"import sys\\n\",\n        \"\\n\",\n        \"!test -d albert || git clone https://github.com/google-research/albert albert\\n\",\n        \"if not 'albert' in sys.path:\\n\",\n        \"  sys.path += ['albert']\\n\",\n        \"  \\n\",\n        \"!pip install sentencepiece\\n\"\n      ],\n      \"execution_count\": 0,\n      \"outputs\": []\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"RRu1aKO1D7-Z\",\n        \"colab_type\": \"text\"\n      },\n      \"source\": [\n        \"### Prepare for training\\n\",\n        \"\\n\",\n        \"This next section of code performs the following tasks:\\n\",\n        \"\\n\",\n        \"*  Specify GS bucket, create output directory for model checkpoints and eval results.\\n\",\n        \"*  Specify task and download training data.\\n\",\n        \"*  Specify ALBERT pretrained model\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"id\": \"tYkaAlJNfhul\",\n        \"colab_type\": \"code\",\n        \"colab\": {},\n        \"cellView\": \"form\"\n      },\n      \"source\": [\n        \"# Please find the full list of tasks and their fintuning hyperparameters\\n\",\n        \"# here https://github.com/google-research/albert/blob/master/run_glue.sh\\n\",\n        \"\\n\",\n        \"BUCKET = \\\"albert_tutorial_glue\\\" #@param { type: \\\"string\\\" }\\n\",\n        \"TASK = 'MRPC' #@param {type:\\\"string\\\"}\\n\",\n        \"# Available pretrained model checkpoints:\\n\",\n        \"#   base, large, xlarge, xxlarge\\n\",\n        \"ALBERT_MODEL = 'base' #@param {type:\\\"string\\\"}\\n\",\n        \"\\n\",\n        \"TASK_DATA_DIR = 'glue_data'\\n\",\n        \"\\n\",\n        \"BASE_DIR = \\\"gs://\\\" + BUCKET\\n\",\n        \"if not BASE_DIR or BASE_DIR == \\\"gs://\\\":\\n\",\n        \"  raise ValueError(\\\"You must enter a BUCKET.\\\")\\n\",\n        \"DATA_DIR = os.path.join(BASE_DIR, \\\"data\\\")\\n\",\n        \"MODELS_DIR = os.path.join(BASE_DIR, \\\"models\\\")\\n\",\n        \"OUTPUT_DIR = 'gs://{}/albert-tfhub/models/{}'.format(BUCKET, TASK)\\n\",\n        \"tf.gfile.MakeDirs(OUTPUT_DIR)\\n\",\n        \"print('***** Model output directory: {} *****'.format(OUTPUT_DIR))\\n\",\n        \"\\n\",\n        \"# Download glue data.\\n\",\n        \"! test -d download_glue_repo || git clone https://gist.github.com/60c2bdb54d156a41194446737ce03e2e.git download_glue_repo\\n\",\n        \"!python download_glue_repo/download_glue_data.py --data_dir=$TASK_DATA_DIR --tasks=$TASK\\n\",\n        \"print('***** Task data directory: {} *****'.format(TASK_DATA_DIR))\\n\",\n        \"\\n\",\n        \"ALBERT_MODEL_HUB = 'https://tfhub.dev/google/albert_' + ALBERT_MODEL + '/3'\"\n      ],\n      \"execution_count\": 0,\n      \"outputs\": []\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"Hcpfl4N2EdOk\",\n        \"colab_type\": \"text\"\n      },\n      \"source\": [\n        \"Now let's run the fine-tuning scripts. If you use the default MRPC task, this should be finished in around 10 mintues and you will get an accuracy of around 86.5.\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"id\": \"o8qXPxv8-kBO\",\n        \"colab_type\": \"code\",\n        \"colab\": {}\n      },\n      \"source\": [\n        \"os.environ['TFHUB_CACHE_DIR'] = OUTPUT_DIR\\n\",\n        \"!python -m albert.run_classifier \\\\\\n\",\n        \"  --data_dir=\\\"glue_data/\\\" \\\\\\n\",\n        \"  --output_dir=$OUTPUT_DIR \\\\\\n\",\n        \"  --albert_hub_module_handle=$ALBERT_MODEL_HUB \\\\\\n\",\n        \"  --spm_model_file=\\\"from_tf_hub\\\" \\\\\\n\",\n        \"  --do_train=True \\\\\\n\",\n        \"  --do_eval=True \\\\\\n\",\n        \"  --do_predict=False \\\\\\n\",\n        \"  --max_seq_length=512 \\\\\\n\",\n        \"  --optimizer=adamw \\\\\\n\",\n        \"  --task_name=$TASK \\\\\\n\",\n        \"  --warmup_step=200 \\\\\\n\",\n        \"  --learning_rate=2e-5 \\\\\\n\",\n        \"  --train_step=800 \\\\\\n\",\n        \"  --save_checkpoints_steps=100 \\\\\\n\",\n        \"  --train_batch_size=32 \\\\\\n\",\n        \"  --tpu_name=$TPU_ADDRESS \\\\\\n\",\n        \"  --use_tpu=True\"\n      ],\n      \"execution_count\": 0,\n      \"outputs\": []\n    }\n  ]\n}\n"
        },
        {
          "name": "classifier_utils.py",
          "type": "blob",
          "size": 34.7314453125,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Utility functions for GLUE classification tasks.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nimport collections\nimport csv\nimport os\nfrom albert import fine_tuning_utils\nfrom albert import modeling\nfrom albert import optimization\nfrom albert import tokenization\nimport tensorflow.compat.v1 as tf\nfrom tensorflow.compat.v1 import estimator as tf_estimator\nfrom tensorflow.contrib import metrics as contrib_metrics\nfrom tensorflow.contrib import tpu as contrib_tpu\n\n\nclass InputExample(object):\n  \"\"\"A single training/test example for simple sequence classification.\"\"\"\n\n  def __init__(self, guid, text_a, text_b=None, label=None):\n    \"\"\"Constructs a InputExample.\n\n    Args:\n      guid: Unique id for the example.\n      text_a: string. The untokenized text of the first sequence. For single\n        sequence tasks, only this sequence must be specified.\n      text_b: (Optional) string. The untokenized text of the second sequence.\n        Only must be specified for sequence pair tasks.\n      label: (Optional) string. The label of the example. This should be\n        specified for train and dev examples, but not for test examples.\n    \"\"\"\n    self.guid = guid\n    self.text_a = text_a\n    self.text_b = text_b\n    self.label = label\n\n\nclass PaddingInputExample(object):\n  \"\"\"Fake example so the num input examples is a multiple of the batch size.\n\n  When running eval/predict on the TPU, we need to pad the number of examples\n  to be a multiple of the batch size, because the TPU requires a fixed batch\n  size. The alternative is to drop the last batch, which is bad because it means\n  the entire output data won't be generated.\n\n  We use this class instead of `None` because treating `None` as padding\n  battches could cause silent errors.\n  \"\"\"\n\n\nclass InputFeatures(object):\n  \"\"\"A single set of features of data.\"\"\"\n\n  def __init__(self,\n               input_ids,\n               input_mask,\n               segment_ids,\n               label_id,\n               guid=None,\n               example_id=None,\n               is_real_example=True):\n    self.input_ids = input_ids\n    self.input_mask = input_mask\n    self.segment_ids = segment_ids\n    self.label_id = label_id\n    self.example_id = example_id\n    self.guid = guid\n    self.is_real_example = is_real_example\n\n\nclass DataProcessor(object):\n  \"\"\"Base class for data converters for sequence classification data sets.\"\"\"\n\n  def __init__(self, use_spm, do_lower_case):\n    super(DataProcessor, self).__init__()\n    self.use_spm = use_spm\n    self.do_lower_case = do_lower_case\n\n  def get_train_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for the train set.\"\"\"\n    raise NotImplementedError()\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for the dev set.\"\"\"\n    raise NotImplementedError()\n\n  def get_test_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for prediction.\"\"\"\n    raise NotImplementedError()\n\n  def get_labels(self):\n    \"\"\"Gets the list of labels for this data set.\"\"\"\n    raise NotImplementedError()\n\n  @classmethod\n  def _read_tsv(cls, input_file, quotechar=None):\n    \"\"\"Reads a tab separated value file.\"\"\"\n    with tf.gfile.Open(input_file, \"r\") as f:\n      reader = csv.reader(f, delimiter=\"\\t\", quotechar=quotechar)\n      lines = []\n      for line in reader:\n        lines.append(line)\n      return lines\n\n  def process_text(self, text):\n    if self.use_spm:\n      return tokenization.preprocess_text(text, lower=self.do_lower_case)\n    else:\n      return tokenization.convert_to_unicode(text)\n\n\nclass MnliProcessor(DataProcessor):\n  \"\"\"Processor for the MultiNLI data set (GLUE version).\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"MNLI\", \"train.tsv\")), \"train\")\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"MNLI\", \"dev_matched.tsv\")),\n        \"dev_matched\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"MNLI\", \"test_matched.tsv\")),\n        \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"contradiction\", \"entailment\", \"neutral\"]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):\n      if i == 0:\n        continue\n      # Note(mingdachen): We will rely on this guid for GLUE submission.\n      guid = self.process_text(line[0])\n      text_a = self.process_text(line[8])\n      text_b = self.process_text(line[9])\n      if set_type == \"test\":\n        label = \"contradiction\"\n      else:\n        label = self.process_text(line[-1])\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n\nclass MisMnliProcessor(MnliProcessor):\n  \"\"\"Processor for the Mismatched MultiNLI data set (GLUE version).\"\"\"\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"MNLI\", \"dev_mismatched.tsv\")),\n        \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"MNLI\", \"test_mismatched.tsv\")),\n        \"test\")\n\n\nclass MrpcProcessor(DataProcessor):\n  \"\"\"Processor for the MRPC data set (GLUE version).\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"MRPC\", \"train.tsv\")), \"train\")\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"MRPC\", \"dev.tsv\")), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"MRPC\", \"test.tsv\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"0\", \"1\"]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):\n      if i == 0:\n        continue\n      guid = \"%s-%s\" % (set_type, i)\n      text_a = self.process_text(line[3])\n      text_b = self.process_text(line[4])\n      if set_type == \"test\":\n        guid = line[0]\n        label = \"0\"\n      else:\n        label = self.process_text(line[0])\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n\nclass ColaProcessor(DataProcessor):\n  \"\"\"Processor for the CoLA data set (GLUE version).\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"CoLA\", \"train.tsv\")), \"train\")\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"CoLA\", \"dev.tsv\")), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"CoLA\", \"test.tsv\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"0\", \"1\"]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):\n      # Only the test set has a header\n      if set_type == \"test\" and i == 0:\n        continue\n      guid = \"%s-%s\" % (set_type, i)\n      if set_type == \"test\":\n        guid = line[0]\n        text_a = self.process_text(line[1])\n        label = \"0\"\n      else:\n        text_a = self.process_text(line[3])\n        label = self.process_text(line[1])\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=None, label=label))\n    return examples\n\n\nclass Sst2Processor(DataProcessor):\n  \"\"\"Processor for the SST-2 data set (GLUE version).\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"SST-2\", \"train.tsv\")), \"train\")\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"SST-2\", \"dev.tsv\")), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"SST-2\", \"test.tsv\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"0\", \"1\"]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):\n      if i == 0:\n        continue\n      if set_type != \"test\":\n        guid = \"%s-%s\" % (set_type, i)\n        text_a = self.process_text(line[0])\n        label = self.process_text(line[1])\n      else:\n        guid = self.process_text(line[0])\n        # guid = \"%s-%s\" % (set_type, line[0])\n        text_a = self.process_text(line[1])\n        label = \"0\"\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=None, label=label))\n    return examples\n\n\nclass StsbProcessor(DataProcessor):\n  \"\"\"Processor for the STS-B data set (GLUE version).\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"STS-B\", \"train.tsv\")), \"train\")\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"STS-B\", \"dev.tsv\")), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"STS-B\", \"test.tsv\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [None]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):\n      if i == 0:\n        continue\n      guid = self.process_text(line[0])\n      # guid = \"%s-%s\" % (set_type, line[0])\n      text_a = self.process_text(line[7])\n      text_b = self.process_text(line[8])\n      if set_type != \"test\":\n        label = float(line[-1])\n      else:\n        label = 0\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n\nclass QqpProcessor(DataProcessor):\n  \"\"\"Processor for the QQP data set (GLUE version).\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"QQP\", \"train.tsv\")), \"train\")\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"QQP\", \"dev.tsv\")), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"QQP\", \"test.tsv\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"0\", \"1\"]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):\n      if i == 0:\n        continue\n      guid = line[0]\n      # guid = \"%s-%s\" % (set_type, line[0])\n      if set_type != \"test\":\n        try:\n          text_a = self.process_text(line[3])\n          text_b = self.process_text(line[4])\n          label = self.process_text(line[5])\n        except IndexError:\n          continue\n      else:\n        text_a = self.process_text(line[1])\n        text_b = self.process_text(line[2])\n        label = \"0\"\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n\nclass QnliProcessor(DataProcessor):\n  \"\"\"Processor for the QNLI data set (GLUE version).\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"QNLI\", \"train.tsv\")), \"train\")\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"QNLI\", \"dev.tsv\")),\n        \"dev_matched\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"QNLI\", \"test.tsv\")),\n        \"test_matched\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"entailment\", \"not_entailment\"]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):\n      if i == 0:\n        continue\n      guid = self.process_text(line[0])\n      # guid = \"%s-%s\" % (set_type, line[0])\n      text_a = self.process_text(line[1])\n      text_b = self.process_text(line[2])\n      if set_type == \"test_matched\":\n        label = \"entailment\"\n      else:\n        label = self.process_text(line[-1])\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n\nclass RteProcessor(DataProcessor):\n  \"\"\"Processor for the RTE data set (GLUE version).\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"RTE\", \"train.tsv\")), \"train\")\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"RTE\", \"dev.tsv\")), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"RTE\", \"test.tsv\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"entailment\", \"not_entailment\"]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):\n      if i == 0:\n        continue\n      guid = self.process_text(line[0])\n      # guid = \"%s-%s\" % (set_type, line[0])\n      text_a = self.process_text(line[1])\n      text_b = self.process_text(line[2])\n      if set_type == \"test\":\n        label = \"entailment\"\n      else:\n        label = self.process_text(line[-1])\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n\nclass WnliProcessor(DataProcessor):\n  \"\"\"Processor for the WNLI data set (GLUE version).\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"WNLI\", \"train.tsv\")), \"train\")\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"WNLI\", \"dev.tsv\")), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"WNLI\", \"test.tsv\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"0\", \"1\"]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):\n      if i == 0:\n        continue\n      guid = self.process_text(line[0])\n      # guid = \"%s-%s\" % (set_type, line[0])\n      text_a = self.process_text(line[1])\n      text_b = self.process_text(line[2])\n      if set_type != \"test\":\n        label = self.process_text(line[-1])\n      else:\n        label = \"0\"\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n\nclass AXProcessor(DataProcessor):\n  \"\"\"Processor for the AX data set (GLUE version).\"\"\"\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"diagnostic\", \"diagnostic.tsv\")),\n        \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"contradiction\", \"entailment\", \"neutral\"]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):\n      if i == 0:\n        continue\n      # Note(mingdachen): We will rely on this guid for GLUE submission.\n      guid = self.process_text(line[0])\n      text_a = self.process_text(line[1])\n      text_b = self.process_text(line[2])\n      if set_type == \"test\":\n        label = \"contradiction\"\n      else:\n        label = self.process_text(line[-1])\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n\ndef convert_single_example(ex_index, example, label_list, max_seq_length,\n                           tokenizer, task_name):\n  \"\"\"Converts a single `InputExample` into a single `InputFeatures`.\"\"\"\n\n  if isinstance(example, PaddingInputExample):\n    return InputFeatures(\n        input_ids=[0] * max_seq_length,\n        input_mask=[0] * max_seq_length,\n        segment_ids=[0] * max_seq_length,\n        label_id=0,\n        is_real_example=False)\n\n  if task_name != \"sts-b\":\n    label_map = {}\n    for (i, label) in enumerate(label_list):\n      label_map[label] = i\n\n  tokens_a = tokenizer.tokenize(example.text_a)\n  tokens_b = None\n  if example.text_b:\n    tokens_b = tokenizer.tokenize(example.text_b)\n\n  if tokens_b:\n    # Modifies `tokens_a` and `tokens_b` in place so that the total\n    # length is less than the specified length.\n    # Account for [CLS], [SEP], [SEP] with \"- 3\"\n    _truncate_seq_pair(tokens_a, tokens_b, max_seq_length - 3)\n  else:\n    # Account for [CLS] and [SEP] with \"- 2\"\n    if len(tokens_a) > max_seq_length - 2:\n      tokens_a = tokens_a[0:(max_seq_length - 2)]\n\n  # The convention in ALBERT is:\n  # (a) For sequence pairs:\n  #  tokens:   [CLS] is this jack ##son ##ville ? [SEP] no it is not . [SEP]\n  #  type_ids: 0     0  0    0    0     0       0 0     1  1  1  1   1 1\n  # (b) For single sequences:\n  #  tokens:   [CLS] the dog is hairy . [SEP]\n  #  type_ids: 0     0   0   0  0     0 0\n  #\n  # Where \"type_ids\" are used to indicate whether this is the first\n  # sequence or the second sequence. The embedding vectors for `type=0` and\n  # `type=1` were learned during pre-training and are added to the\n  # embedding vector (and position vector). This is not *strictly* necessary\n  # since the [SEP] token unambiguously separates the sequences, but it makes\n  # it easier for the model to learn the concept of sequences.\n  #\n  # For classification tasks, the first vector (corresponding to [CLS]) is\n  # used as the \"sentence vector\". Note that this only makes sense because\n  # the entire model is fine-tuned.\n  tokens = []\n  segment_ids = []\n  tokens.append(\"[CLS]\")\n  segment_ids.append(0)\n  for token in tokens_a:\n    tokens.append(token)\n    segment_ids.append(0)\n  tokens.append(\"[SEP]\")\n  segment_ids.append(0)\n\n  if tokens_b:\n    for token in tokens_b:\n      tokens.append(token)\n      segment_ids.append(1)\n    tokens.append(\"[SEP]\")\n    segment_ids.append(1)\n\n  input_ids = tokenizer.convert_tokens_to_ids(tokens)\n\n  # The mask has 1 for real tokens and 0 for padding tokens. Only real\n  # tokens are attended to.\n  input_mask = [1] * len(input_ids)\n\n  # Zero-pad up to the sequence length.\n  while len(input_ids) < max_seq_length:\n    input_ids.append(0)\n    input_mask.append(0)\n    segment_ids.append(0)\n\n  assert len(input_ids) == max_seq_length\n  assert len(input_mask) == max_seq_length\n  assert len(segment_ids) == max_seq_length\n\n  if task_name != \"sts-b\":\n    label_id = label_map[example.label]\n  else:\n    label_id = example.label\n\n  if ex_index < 5:\n    tf.logging.info(\"*** Example ***\")\n    tf.logging.info(\"guid: %s\" % (example.guid))\n    tf.logging.info(\"tokens: %s\" % \" \".join(\n        [tokenization.printable_text(x) for x in tokens]))\n    tf.logging.info(\"input_ids: %s\" % \" \".join([str(x) for x in input_ids]))\n    tf.logging.info(\"input_mask: %s\" % \" \".join([str(x) for x in input_mask]))\n    tf.logging.info(\"segment_ids: %s\" % \" \".join([str(x) for x in segment_ids]))\n    tf.logging.info(\"label: %s (id = %d)\" % (example.label, label_id))\n\n  feature = InputFeatures(\n      input_ids=input_ids,\n      input_mask=input_mask,\n      segment_ids=segment_ids,\n      label_id=label_id,\n      is_real_example=True)\n  return feature\n\n\ndef file_based_convert_examples_to_features(\n    examples, label_list, max_seq_length, tokenizer, output_file, task_name):\n  \"\"\"Convert a set of `InputExample`s to a TFRecord file.\"\"\"\n\n  writer = tf.python_io.TFRecordWriter(output_file)\n\n  for (ex_index, example) in enumerate(examples):\n    if ex_index % 10000 == 0:\n      tf.logging.info(\"Writing example %d of %d\" % (ex_index, len(examples)))\n\n    feature = convert_single_example(ex_index, example, label_list,\n                                     max_seq_length, tokenizer, task_name)\n\n    def create_int_feature(values):\n      f = tf.train.Feature(int64_list=tf.train.Int64List(value=list(values)))\n      return f\n\n    def create_float_feature(values):\n      f = tf.train.Feature(float_list=tf.train.FloatList(value=list(values)))\n      return f\n\n    features = collections.OrderedDict()\n    features[\"input_ids\"] = create_int_feature(feature.input_ids)\n    features[\"input_mask\"] = create_int_feature(feature.input_mask)\n    features[\"segment_ids\"] = create_int_feature(feature.segment_ids)\n    features[\"label_ids\"] = create_float_feature([feature.label_id])\\\n        if task_name == \"sts-b\" else create_int_feature([feature.label_id])\n    features[\"is_real_example\"] = create_int_feature(\n        [int(feature.is_real_example)])\n\n    tf_example = tf.train.Example(features=tf.train.Features(feature=features))\n    writer.write(tf_example.SerializeToString())\n  writer.close()\n\n\ndef file_based_input_fn_builder(input_file, seq_length, is_training,\n                                drop_remainder, task_name, use_tpu, bsz,\n                                multiple=1):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n  labeltype = tf.float32 if task_name == \"sts-b\" else tf.int64\n\n  name_to_features = {\n      \"input_ids\": tf.FixedLenFeature([seq_length * multiple], tf.int64),\n      \"input_mask\": tf.FixedLenFeature([seq_length * multiple], tf.int64),\n      \"segment_ids\": tf.FixedLenFeature([seq_length * multiple], tf.int64),\n      \"label_ids\": tf.FixedLenFeature([], labeltype),\n      \"is_real_example\": tf.FixedLenFeature([], tf.int64),\n  }\n\n  def _decode_record(record, name_to_features):\n    \"\"\"Decodes a record to a TensorFlow example.\"\"\"\n    example = tf.parse_single_example(record, name_to_features)\n\n    # tf.Example only supports tf.int64, but the TPU only supports tf.int32.\n    # So cast all int64 to int32.\n    for name in list(example.keys()):\n      t = example[name]\n      if t.dtype == tf.int64:\n        t = tf.to_int32(t)\n      example[name] = t\n\n    return example\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    if use_tpu:\n      batch_size = params[\"batch_size\"]\n    else:\n      batch_size = bsz\n\n    # For training, we want a lot of parallel reading and shuffling.\n    # For eval, we want no shuffling and parallel reading doesn't matter.\n    d = tf.data.TFRecordDataset(input_file)\n    if is_training:\n      d = d.repeat()\n      d = d.shuffle(buffer_size=100)\n\n    d = d.apply(\n        tf.data.experimental.map_and_batch(\n            lambda record: _decode_record(record, name_to_features),\n            batch_size=batch_size,\n            drop_remainder=drop_remainder))\n\n    return d\n\n  return input_fn\n\n\ndef _truncate_seq_pair(tokens_a, tokens_b, max_length):\n  \"\"\"Truncates a sequence pair in place to the maximum length.\"\"\"\n\n  # This is a simple heuristic which will always truncate the longer sequence\n  # one token at a time. This makes more sense than truncating an equal percent\n  # of tokens from each, since if one sequence is very short then each token\n  # that's truncated likely contains more information than a longer sequence.\n  while True:\n    total_length = len(tokens_a) + len(tokens_b)\n    if total_length <= max_length:\n      break\n    if len(tokens_a) > len(tokens_b):\n      tokens_a.pop()\n    else:\n      tokens_b.pop()\n\n\ndef create_model(albert_config, is_training, input_ids, input_mask, segment_ids,\n                 labels, num_labels, use_one_hot_embeddings, task_name,\n                 hub_module):\n  \"\"\"Creates a classification model.\"\"\"\n  (output_layer, _) = fine_tuning_utils.create_albert(\n      albert_config=albert_config,\n      is_training=is_training,\n      input_ids=input_ids,\n      input_mask=input_mask,\n      segment_ids=segment_ids,\n      use_one_hot_embeddings=use_one_hot_embeddings,\n      use_einsum=True,\n      hub_module=hub_module)\n\n  hidden_size = output_layer.shape[-1]\n\n  output_weights = tf.get_variable(\n      \"output_weights\", [num_labels, hidden_size],\n      initializer=tf.truncated_normal_initializer(stddev=0.02))\n\n  output_bias = tf.get_variable(\n      \"output_bias\", [num_labels], initializer=tf.zeros_initializer())\n\n  with tf.variable_scope(\"loss\"):\n    if is_training:\n      # I.e., 0.1 dropout\n      output_layer = tf.nn.dropout(output_layer, keep_prob=0.9)\n\n    logits = tf.matmul(output_layer, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    if task_name != \"sts-b\":\n      probabilities = tf.nn.softmax(logits, axis=-1)\n      predictions = tf.argmax(probabilities, axis=-1, output_type=tf.int32)\n      log_probs = tf.nn.log_softmax(logits, axis=-1)\n      one_hot_labels = tf.one_hot(labels, depth=num_labels, dtype=tf.float32)\n\n      per_example_loss = -tf.reduce_sum(one_hot_labels * log_probs, axis=-1)\n    else:\n      probabilities = logits\n      logits = tf.squeeze(logits, [-1])\n      predictions = logits\n      per_example_loss = tf.square(logits - labels)\n    loss = tf.reduce_mean(per_example_loss)\n\n    return (loss, per_example_loss, probabilities, logits, predictions)\n\n\ndef model_fn_builder(albert_config, num_labels, init_checkpoint, learning_rate,\n                     num_train_steps, num_warmup_steps, use_tpu,\n                     use_one_hot_embeddings, task_name, hub_module=None,\n                     optimizer=\"adamw\"):\n  \"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"\n\n  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n    \"\"\"The `model_fn` for TPUEstimator.\"\"\"\n\n    tf.logging.info(\"*** Features ***\")\n    for name in sorted(features.keys()):\n      tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\n\n    input_ids = features[\"input_ids\"]\n    input_mask = features[\"input_mask\"]\n    segment_ids = features[\"segment_ids\"]\n    label_ids = features[\"label_ids\"]\n    is_real_example = None\n    if \"is_real_example\" in features:\n      is_real_example = tf.cast(features[\"is_real_example\"], dtype=tf.float32)\n    else:\n      is_real_example = tf.ones(tf.shape(label_ids), dtype=tf.float32)\n\n    is_training = (mode == tf_estimator.ModeKeys.TRAIN)\n\n    (total_loss, per_example_loss, probabilities, logits, predictions) = \\\n        create_model(albert_config, is_training, input_ids, input_mask,\n                     segment_ids, label_ids, num_labels, use_one_hot_embeddings,\n                     task_name, hub_module)\n\n    tvars = tf.trainable_variables()\n    initialized_variable_names = {}\n    scaffold_fn = None\n    if init_checkpoint:\n      (assignment_map, initialized_variable_names\n      ) = modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)\n      if use_tpu:\n\n        def tpu_scaffold():\n          tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n          return tf.train.Scaffold()\n\n        scaffold_fn = tpu_scaffold\n      else:\n        tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n\n    tf.logging.info(\"**** Trainable Variables ****\")\n    for var in tvars:\n      init_string = \"\"\n      if var.name in initialized_variable_names:\n        init_string = \", *INIT_FROM_CKPT*\"\n      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                      init_string)\n\n    output_spec = None\n    if mode == tf_estimator.ModeKeys.TRAIN:\n\n      train_op = optimization.create_optimizer(\n          total_loss, learning_rate, num_train_steps, num_warmup_steps,\n          use_tpu, optimizer)\n\n      output_spec = contrib_tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          train_op=train_op,\n          scaffold_fn=scaffold_fn)\n    elif mode == tf_estimator.ModeKeys.EVAL:\n      if task_name not in [\"sts-b\", \"cola\"]:\n        def metric_fn(per_example_loss, label_ids, logits, is_real_example):\n          predictions = tf.argmax(logits, axis=-1, output_type=tf.int32)\n          accuracy = tf.metrics.accuracy(\n              labels=label_ids, predictions=predictions,\n              weights=is_real_example)\n          loss = tf.metrics.mean(\n              values=per_example_loss, weights=is_real_example)\n          return {\n              \"eval_accuracy\": accuracy,\n              \"eval_loss\": loss,\n          }\n      elif task_name == \"sts-b\":\n        def metric_fn(per_example_loss, label_ids, logits, is_real_example):\n          \"\"\"Compute Pearson correlations for STS-B.\"\"\"\n          # Display labels and predictions\n          concat1 = contrib_metrics.streaming_concat(logits)\n          concat2 = contrib_metrics.streaming_concat(label_ids)\n\n          # Compute Pearson correlation\n          pearson = contrib_metrics.streaming_pearson_correlation(\n              logits, label_ids, weights=is_real_example)\n\n          # Compute MSE\n          # mse = tf.metrics.mean(per_example_loss)\n          mse = tf.metrics.mean_squared_error(\n              label_ids, logits, weights=is_real_example)\n\n          loss = tf.metrics.mean(\n              values=per_example_loss,\n              weights=is_real_example)\n\n          return {\"pred\": concat1, \"label_ids\": concat2, \"pearson\": pearson,\n                  \"MSE\": mse, \"eval_loss\": loss,}\n      elif task_name == \"cola\":\n        def metric_fn(per_example_loss, label_ids, logits, is_real_example):\n          \"\"\"Compute Matthew's correlations for COLA.\"\"\"\n          predictions = tf.argmax(logits, axis=-1, output_type=tf.int32)\n          # https://en.wikipedia.org/wiki/Matthews_correlation_coefficient\n          tp, tp_op = tf.metrics.true_positives(\n              labels=label_ids, predictions=predictions,\n              weights=is_real_example)\n          tn, tn_op = tf.metrics.true_negatives(\n              labels=label_ids, predictions=predictions,\n              weights=is_real_example)\n          fp, fp_op = tf.metrics.false_positives(\n              labels=label_ids, predictions=predictions,\n              weights=is_real_example)\n          fn, fn_op = tf.metrics.false_negatives(\n              labels=label_ids, predictions=predictions,\n              weights=is_real_example)\n\n          # Compute Matthew's correlation\n          mcc = tf.div_no_nan(\n              tp * tn - fp * fn,\n              tf.pow((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn), 0.5))\n\n          # Compute accuracy\n          accuracy = tf.metrics.accuracy(\n              labels=label_ids, predictions=predictions,\n              weights=is_real_example)\n\n          loss = tf.metrics.mean(\n              values=per_example_loss,\n              weights=is_real_example)\n\n          return {\"matthew_corr\": (mcc, tf.group(tp_op, tn_op, fp_op, fn_op)),\n                  \"eval_accuracy\": accuracy, \"eval_loss\": loss,}\n\n      eval_metrics = (metric_fn,\n                      [per_example_loss, label_ids, logits, is_real_example])\n      output_spec = contrib_tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          eval_metrics=eval_metrics,\n          scaffold_fn=scaffold_fn)\n    else:\n      output_spec = contrib_tpu.TPUEstimatorSpec(\n          mode=mode,\n          predictions={\n              \"probabilities\": probabilities,\n              \"predictions\": predictions\n          },\n          scaffold_fn=scaffold_fn)\n    return output_spec\n\n  return model_fn\n\n\n# This function is not used by this file but is still used by the Colab and\n# people who depend on it.\ndef input_fn_builder(features, seq_length, is_training, drop_remainder):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  all_input_ids = []\n  all_input_mask = []\n  all_segment_ids = []\n  all_label_ids = []\n\n  for feature in features:\n    all_input_ids.append(feature.input_ids)\n    all_input_mask.append(feature.input_mask)\n    all_segment_ids.append(feature.segment_ids)\n    all_label_ids.append(feature.label_id)\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    batch_size = params[\"batch_size\"]\n\n    num_examples = len(features)\n\n    # This is for demo purposes and does NOT scale to large data sets. We do\n    # not use Dataset.from_generator() because that uses tf.py_func which is\n    # not TPU compatible. The right way to load data is with TFRecordReader.\n    d = tf.data.Dataset.from_tensor_slices({\n        \"input_ids\":\n            tf.constant(\n                all_input_ids, shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"input_mask\":\n            tf.constant(\n                all_input_mask,\n                shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"segment_ids\":\n            tf.constant(\n                all_segment_ids,\n                shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"label_ids\":\n            tf.constant(all_label_ids, shape=[num_examples], dtype=tf.int32),\n    })\n\n    if is_training:\n      d = d.repeat()\n      d = d.shuffle(buffer_size=100)\n\n    d = d.batch(batch_size=batch_size, drop_remainder=drop_remainder)\n    return d\n\n  return input_fn\n\n\n# This function is not used by this file but is still used by the Colab and\n# people who depend on it.\ndef convert_examples_to_features(examples, label_list, max_seq_length,\n                                 tokenizer, task_name):\n  \"\"\"Convert a set of `InputExample`s to a list of `InputFeatures`.\"\"\"\n\n  features = []\n  for (ex_index, example) in enumerate(examples):\n    if ex_index % 10000 == 0:\n      tf.logging.info(\"Writing example %d of %d\" % (ex_index, len(examples)))\n\n    feature = convert_single_example(ex_index, example, label_list,\n                                     max_seq_length, tokenizer, task_name)\n\n    features.append(feature)\n  return features\n"
        },
        {
          "name": "create_pretraining_data.py",
          "type": "blob",
          "size": 22.669921875,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# coding=utf-8\n\"\"\"Create masked LM/next sentence masked_lm TF examples for ALBERT.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nimport collections\nimport random\nfrom albert import tokenization\nimport numpy as np\nimport six\nfrom six.moves import range\nfrom six.moves import zip\nimport tensorflow.compat.v1 as tf\n\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\nflags.DEFINE_string(\"input_file\", None,\n                    \"Input raw text file (or comma-separated list of files).\")\n\nflags.DEFINE_string(\n    \"output_file\", None,\n    \"Output TF example file (or comma-separated list of files).\")\n\nflags.DEFINE_string(\n    \"vocab_file\", None,\n    \"The vocabulary file that the ALBERT model was trained on.\")\n\nflags.DEFINE_string(\"spm_model_file\", None,\n                    \"The model file for sentence piece tokenization.\")\n\nflags.DEFINE_string(\"input_file_mode\", \"r\",\n                    \"The data format of the input file.\")\n\nflags.DEFINE_bool(\n    \"do_lower_case\", True,\n    \"Whether to lower case the input text. Should be True for uncased \"\n    \"models and False for cased models.\")\n\nflags.DEFINE_bool(\n    \"do_whole_word_mask\", True,\n    \"Whether to use whole word masking rather than per-WordPiece masking.\")\n\nflags.DEFINE_bool(\n    \"do_permutation\", False,\n    \"Whether to do the permutation training.\")\n\nflags.DEFINE_bool(\n    \"favor_shorter_ngram\", True,\n    \"Whether to set higher probabilities for sampling shorter ngrams.\")\n\nflags.DEFINE_bool(\n    \"random_next_sentence\", False,\n    \"Whether to use the sentence that's right before the current sentence \"\n    \"as the negative sample for next sentence prection, rather than using \"\n    \"sentences from other random documents.\")\n\nflags.DEFINE_integer(\"max_seq_length\", 512, \"Maximum sequence length.\")\n\nflags.DEFINE_integer(\"ngram\", 3, \"Maximum number of ngrams to mask.\")\n\nflags.DEFINE_integer(\"max_predictions_per_seq\", 20,\n                     \"Maximum number of masked LM predictions per sequence.\")\n\nflags.DEFINE_integer(\"random_seed\", 12345, \"Random seed for data generation.\")\n\nflags.DEFINE_integer(\n    \"dupe_factor\", 40,\n    \"Number of times to duplicate the input data (with different masks).\")\n\nflags.DEFINE_float(\"masked_lm_prob\", 0.15, \"Masked LM probability.\")\n\nflags.DEFINE_float(\n    \"short_seq_prob\", 0.1,\n    \"Probability of creating sequences which are shorter than the \"\n    \"maximum length.\")\n\n\nclass TrainingInstance(object):\n  \"\"\"A single training instance (sentence pair).\"\"\"\n\n  def __init__(self, tokens, segment_ids, masked_lm_positions, masked_lm_labels,\n               is_random_next, token_boundary):\n    self.tokens = tokens\n    self.segment_ids = segment_ids\n    self.is_random_next = is_random_next\n    self.token_boundary = token_boundary\n    self.masked_lm_positions = masked_lm_positions\n    self.masked_lm_labels = masked_lm_labels\n\n  def __str__(self):\n    s = \"\"\n    s += \"tokens: %s\\n\" % (\" \".join(\n        [tokenization.printable_text(x) for x in self.tokens]))\n    s += \"segment_ids: %s\\n\" % (\" \".join([str(x) for x in self.segment_ids]))\n    s += \"token_boundary: %s\\n\" % (\" \".join(\n        [str(x) for x in self.token_boundary]))\n    s += \"is_random_next: %s\\n\" % self.is_random_next\n    s += \"masked_lm_positions: %s\\n\" % (\" \".join(\n        [str(x) for x in self.masked_lm_positions]))\n    s += \"masked_lm_labels: %s\\n\" % (\" \".join(\n        [tokenization.printable_text(x) for x in self.masked_lm_labels]))\n    s += \"\\n\"\n    return s\n\n  def __repr__(self):\n    return self.__str__()\n\n\ndef write_instance_to_example_files(instances, tokenizer, max_seq_length,\n                                    max_predictions_per_seq, output_files):\n  \"\"\"Create TF example files from `TrainingInstance`s.\"\"\"\n  writers = []\n  for output_file in output_files:\n    writers.append(tf.python_io.TFRecordWriter(output_file))\n\n  writer_index = 0\n\n  total_written = 0\n  for (inst_index, instance) in enumerate(instances):\n    input_ids = tokenizer.convert_tokens_to_ids(instance.tokens)\n    input_mask = [1] * len(input_ids)\n    segment_ids = list(instance.segment_ids)\n    token_boundary = list(instance.token_boundary)\n    assert len(input_ids) <= max_seq_length\n\n    while len(input_ids) < max_seq_length:\n      input_ids.append(0)\n      input_mask.append(0)\n      segment_ids.append(0)\n      token_boundary.append(0)\n\n    assert len(input_ids) == max_seq_length\n    assert len(input_mask) == max_seq_length\n    assert len(segment_ids) == max_seq_length\n\n    masked_lm_positions = list(instance.masked_lm_positions)\n    masked_lm_ids = tokenizer.convert_tokens_to_ids(instance.masked_lm_labels)\n    masked_lm_weights = [1.0] * len(masked_lm_ids)\n\n    multiplier = 1 + int(FLAGS.do_permutation)\n    while len(masked_lm_positions) < max_predictions_per_seq * multiplier:\n      masked_lm_positions.append(0)\n      masked_lm_ids.append(0)\n      masked_lm_weights.append(0.0)\n\n    sentence_order_label = 1 if instance.is_random_next else 0\n\n    features = collections.OrderedDict()\n    features[\"input_ids\"] = create_int_feature(input_ids)\n    features[\"input_mask\"] = create_int_feature(input_mask)\n    features[\"segment_ids\"] = create_int_feature(segment_ids)\n    features[\"token_boundary\"] = create_int_feature(token_boundary)\n    features[\"masked_lm_positions\"] = create_int_feature(masked_lm_positions)\n    features[\"masked_lm_ids\"] = create_int_feature(masked_lm_ids)\n    features[\"masked_lm_weights\"] = create_float_feature(masked_lm_weights)\n    # Note: We keep this feature name `next_sentence_labels` to be compatible\n    # with the original data created by lanzhzh@. However, in the ALBERT case\n    # it does contain sentence_order_label.\n    features[\"next_sentence_labels\"] = create_int_feature(\n        [sentence_order_label])\n\n    tf_example = tf.train.Example(features=tf.train.Features(feature=features))\n\n    writers[writer_index].write(tf_example.SerializeToString())\n    writer_index = (writer_index + 1) % len(writers)\n\n    total_written += 1\n\n    if inst_index < 20:\n      tf.logging.info(\"*** Example ***\")\n      tf.logging.info(\"tokens: %s\" % \" \".join(\n          [tokenization.printable_text(x) for x in instance.tokens]))\n\n      for feature_name in features.keys():\n        feature = features[feature_name]\n        values = []\n        if feature.int64_list.value:\n          values = feature.int64_list.value\n        elif feature.float_list.value:\n          values = feature.float_list.value\n        tf.logging.info(\n            \"%s: %s\" % (feature_name, \" \".join([str(x) for x in values])))\n\n  for writer in writers:\n    writer.close()\n\n  tf.logging.info(\"Wrote %d total instances\", total_written)\n\n\ndef create_int_feature(values):\n  feature = tf.train.Feature(int64_list=tf.train.Int64List(value=list(values)))\n  return feature\n\n\ndef create_float_feature(values):\n  feature = tf.train.Feature(float_list=tf.train.FloatList(value=list(values)))\n  return feature\n\n\ndef create_training_instances(input_files, tokenizer, max_seq_length,\n                              dupe_factor, short_seq_prob, masked_lm_prob,\n                              max_predictions_per_seq, rng):\n  \"\"\"Create `TrainingInstance`s from raw text.\"\"\"\n  all_documents = [[]]\n\n  # Input file format:\n  # (1) One sentence per line. These should ideally be actual sentences, not\n  # entire paragraphs or arbitrary spans of text. (Because we use the\n  # sentence boundaries for the \"next sentence prediction\" task).\n  # (2) Blank lines between documents. Document boundaries are needed so\n  # that the \"next sentence prediction\" task doesn't span between documents.\n  for input_file in input_files:\n    with tf.gfile.GFile(input_file, FLAGS.input_file_mode) as reader:\n      while True:\n        line = reader.readline()\n        if not FLAGS.spm_model_file:\n          line = tokenization.convert_to_unicode(line)\n        if not line:\n          break\n        if FLAGS.spm_model_file:\n          line = tokenization.preprocess_text(line, lower=FLAGS.do_lower_case)\n        else:\n          line = line.strip()\n\n        # Empty lines are used as document delimiters\n        if not line:\n          all_documents.append([])\n        tokens = tokenizer.tokenize(line)\n        if tokens:\n          all_documents[-1].append(tokens)\n\n  # Remove empty documents\n  all_documents = [x for x in all_documents if x]\n  rng.shuffle(all_documents)\n\n  vocab_words = list(tokenizer.vocab.keys())\n  instances = []\n  for _ in range(dupe_factor):\n    for document_index in range(len(all_documents)):\n      instances.extend(\n          create_instances_from_document(\n              all_documents, document_index, max_seq_length, short_seq_prob,\n              masked_lm_prob, max_predictions_per_seq, vocab_words, rng))\n\n  rng.shuffle(instances)\n  return instances\n\n\ndef create_instances_from_document(\n    all_documents, document_index, max_seq_length, short_seq_prob,\n    masked_lm_prob, max_predictions_per_seq, vocab_words, rng):\n  \"\"\"Creates `TrainingInstance`s for a single document.\"\"\"\n  document = all_documents[document_index]\n\n  # Account for [CLS], [SEP], [SEP]\n  max_num_tokens = max_seq_length - 3\n\n  # We *usually* want to fill up the entire sequence since we are padding\n  # to `max_seq_length` anyways, so short sequences are generally wasted\n  # computation. However, we *sometimes*\n  # (i.e., short_seq_prob == 0.1 == 10% of the time) want to use shorter\n  # sequences to minimize the mismatch between pre-training and fine-tuning.\n  # The `target_seq_length` is just a rough target however, whereas\n  # `max_seq_length` is a hard limit.\n  target_seq_length = max_num_tokens\n  if rng.random() < short_seq_prob:\n    target_seq_length = rng.randint(2, max_num_tokens)\n\n  # We DON'T just concatenate all of the tokens from a document into a long\n  # sequence and choose an arbitrary split point because this would make the\n  # next sentence prediction task too easy. Instead, we split the input into\n  # segments \"A\" and \"B\" based on the actual \"sentences\" provided by the user\n  # input.\n  instances = []\n  current_chunk = []\n  current_length = 0\n  i = 0\n  while i < len(document):\n    segment = document[i]\n    current_chunk.append(segment)\n    current_length += len(segment)\n    if i == len(document) - 1 or current_length >= target_seq_length:\n      if current_chunk:\n        # `a_end` is how many segments from `current_chunk` go into the `A`\n        # (first) sentence.\n        a_end = 1\n        if len(current_chunk) >= 2:\n          a_end = rng.randint(1, len(current_chunk) - 1)\n\n        tokens_a = []\n        for j in range(a_end):\n          tokens_a.extend(current_chunk[j])\n\n        tokens_b = []\n        # Random next\n        is_random_next = False\n        if len(current_chunk) == 1 or \\\n            (FLAGS.random_next_sentence and rng.random() < 0.5):\n          is_random_next = True\n          target_b_length = target_seq_length - len(tokens_a)\n\n          # This should rarely go for more than one iteration for large\n          # corpora. However, just to be careful, we try to make sure that\n          # the random document is not the same as the document\n          # we're processing.\n          for _ in range(10):\n            random_document_index = rng.randint(0, len(all_documents) - 1)\n            if random_document_index != document_index:\n              break\n\n          random_document = all_documents[random_document_index]\n          random_start = rng.randint(0, len(random_document) - 1)\n          for j in range(random_start, len(random_document)):\n            tokens_b.extend(random_document[j])\n            if len(tokens_b) >= target_b_length:\n              break\n          # We didn't actually use these segments so we \"put them back\" so\n          # they don't go to waste.\n          num_unused_segments = len(current_chunk) - a_end\n          i -= num_unused_segments\n        elif not FLAGS.random_next_sentence and rng.random() < 0.5:\n          is_random_next = True\n          for j in range(a_end, len(current_chunk)):\n            tokens_b.extend(current_chunk[j])\n          # Note(mingdachen): in this case, we just swap tokens_a and tokens_b\n          tokens_a, tokens_b = tokens_b, tokens_a\n        # Actual next\n        else:\n          is_random_next = False\n          for j in range(a_end, len(current_chunk)):\n            tokens_b.extend(current_chunk[j])\n        truncate_seq_pair(tokens_a, tokens_b, max_num_tokens, rng)\n\n        assert len(tokens_a) >= 1\n        assert len(tokens_b) >= 1\n\n        tokens = []\n        segment_ids = []\n        tokens.append(\"[CLS]\")\n        segment_ids.append(0)\n        for token in tokens_a:\n          tokens.append(token)\n          segment_ids.append(0)\n\n        tokens.append(\"[SEP]\")\n        segment_ids.append(0)\n\n        for token in tokens_b:\n          tokens.append(token)\n          segment_ids.append(1)\n        tokens.append(\"[SEP]\")\n        segment_ids.append(1)\n\n        (tokens, masked_lm_positions,\n         masked_lm_labels, token_boundary) = create_masked_lm_predictions(\n             tokens, masked_lm_prob, max_predictions_per_seq, vocab_words, rng)\n        instance = TrainingInstance(\n            tokens=tokens,\n            segment_ids=segment_ids,\n            is_random_next=is_random_next,\n            token_boundary=token_boundary,\n            masked_lm_positions=masked_lm_positions,\n            masked_lm_labels=masked_lm_labels)\n        instances.append(instance)\n      current_chunk = []\n      current_length = 0\n    i += 1\n\n  return instances\n\n\nMaskedLmInstance = collections.namedtuple(\"MaskedLmInstance\",\n                                          [\"index\", \"label\"])\n\n\ndef _is_start_piece_sp(piece):\n  \"\"\"Check if the current word piece is the starting piece (sentence piece).\"\"\"\n  special_pieces = set(list('!\"#$%&\\\"()*+,-./:;?@[\\\\]^_`{|}~'))\n  special_pieces.add(u\"€\".encode(\"utf-8\"))\n  special_pieces.add(u\"£\".encode(\"utf-8\"))\n  # Note(mingdachen):\n  # For foreign characters, we always treat them as a whole piece.\n  english_chars = set(list(\"abcdefghijklmnopqrstuvwxyz\"))\n  if (six.ensure_str(piece).startswith(\"▁\") or\n      six.ensure_str(piece).startswith(\"<\") or piece in special_pieces or\n      not all([i.lower() in english_chars.union(special_pieces)\n               for i in piece])):\n    return True\n  else:\n    return False\n\n\ndef _is_start_piece_bert(piece):\n  \"\"\"Check if the current word piece is the starting piece (BERT).\"\"\"\n  # When a word has been split into\n  # WordPieces, the first token does not have any marker and any subsequence\n  # tokens are prefixed with ##. So whenever we see the ## token, we\n  # append it to the previous set of word indexes.\n  return not six.ensure_str(piece).startswith(\"##\")\n\n\ndef is_start_piece(piece):\n  if FLAGS.spm_model_file:\n    return _is_start_piece_sp(piece)\n  else:\n    return _is_start_piece_bert(piece)\n\n\ndef create_masked_lm_predictions(tokens, masked_lm_prob,\n                                 max_predictions_per_seq, vocab_words, rng):\n  \"\"\"Creates the predictions for the masked LM objective.\"\"\"\n\n  cand_indexes = []\n  # Note(mingdachen): We create a list for recording if the piece is\n  # the starting piece of current token, where 1 means true, so that\n  # on-the-fly whole word masking is possible.\n  token_boundary = [0] * len(tokens)\n\n  for (i, token) in enumerate(tokens):\n    if token == \"[CLS]\" or token == \"[SEP]\":\n      token_boundary[i] = 1\n      continue\n    # Whole Word Masking means that if we mask all of the wordpieces\n    # corresponding to an original word.\n    #\n    # Note that Whole Word Masking does *not* change the training code\n    # at all -- we still predict each WordPiece independently, softmaxed\n    # over the entire vocabulary.\n    if (FLAGS.do_whole_word_mask and len(cand_indexes) >= 1 and\n        not is_start_piece(token)):\n      cand_indexes[-1].append(i)\n    else:\n      cand_indexes.append([i])\n      if is_start_piece(token):\n        token_boundary[i] = 1\n\n  output_tokens = list(tokens)\n\n  masked_lm_positions = []\n  masked_lm_labels = []\n\n  if masked_lm_prob == 0:\n    return (output_tokens, masked_lm_positions,\n            masked_lm_labels, token_boundary)\n\n  num_to_predict = min(max_predictions_per_seq,\n                       max(1, int(round(len(tokens) * masked_lm_prob))))\n\n  # Note(mingdachen):\n  # By default, we set the probilities to favor shorter ngram sequences.\n  ngrams = np.arange(1, FLAGS.ngram + 1, dtype=np.int64)\n  pvals = 1. / np.arange(1, FLAGS.ngram + 1)\n  pvals /= pvals.sum(keepdims=True)\n\n  if not FLAGS.favor_shorter_ngram:\n    pvals = pvals[::-1]\n\n  ngram_indexes = []\n  for idx in range(len(cand_indexes)):\n    ngram_index = []\n    for n in ngrams:\n      ngram_index.append(cand_indexes[idx:idx+n])\n    ngram_indexes.append(ngram_index)\n\n  rng.shuffle(ngram_indexes)\n\n  masked_lms = []\n  covered_indexes = set()\n  for cand_index_set in ngram_indexes:\n    if len(masked_lms) >= num_to_predict:\n      break\n    if not cand_index_set:\n      continue\n    # Note(mingdachen):\n    # Skip current piece if they are covered in lm masking or previous ngrams.\n    for index_set in cand_index_set[0]:\n      for index in index_set:\n        if index in covered_indexes:\n          continue\n\n    n = np.random.choice(ngrams[:len(cand_index_set)],\n                         p=pvals[:len(cand_index_set)] /\n                         pvals[:len(cand_index_set)].sum(keepdims=True))\n    index_set = sum(cand_index_set[n - 1], [])\n    n -= 1\n    # Note(mingdachen):\n    # Repeatedly looking for a candidate that does not exceed the\n    # maximum number of predictions by trying shorter ngrams.\n    while len(masked_lms) + len(index_set) > num_to_predict:\n      if n == 0:\n        break\n      index_set = sum(cand_index_set[n - 1], [])\n      n -= 1\n    # If adding a whole-word mask would exceed the maximum number of\n    # predictions, then just skip this candidate.\n    if len(masked_lms) + len(index_set) > num_to_predict:\n      continue\n    is_any_index_covered = False\n    for index in index_set:\n      if index in covered_indexes:\n        is_any_index_covered = True\n        break\n    if is_any_index_covered:\n      continue\n    for index in index_set:\n      covered_indexes.add(index)\n\n      masked_token = None\n      # 80% of the time, replace with [MASK]\n      if rng.random() < 0.8:\n        masked_token = \"[MASK]\"\n      else:\n        # 10% of the time, keep original\n        if rng.random() < 0.5:\n          masked_token = tokens[index]\n        # 10% of the time, replace with random word\n        else:\n          masked_token = vocab_words[rng.randint(0, len(vocab_words) - 1)]\n\n      output_tokens[index] = masked_token\n\n      masked_lms.append(MaskedLmInstance(index=index, label=tokens[index]))\n  assert len(masked_lms) <= num_to_predict\n\n  rng.shuffle(ngram_indexes)\n\n  select_indexes = set()\n  if FLAGS.do_permutation:\n    for cand_index_set in ngram_indexes:\n      if len(select_indexes) >= num_to_predict:\n        break\n      if not cand_index_set:\n        continue\n      # Note(mingdachen):\n      # Skip current piece if they are covered in lm masking or previous ngrams.\n      for index_set in cand_index_set[0]:\n        for index in index_set:\n          if index in covered_indexes or index in select_indexes:\n            continue\n\n      n = np.random.choice(ngrams[:len(cand_index_set)],\n                           p=pvals[:len(cand_index_set)] /\n                           pvals[:len(cand_index_set)].sum(keepdims=True))\n      index_set = sum(cand_index_set[n - 1], [])\n      n -= 1\n\n      while len(select_indexes) + len(index_set) > num_to_predict:\n        if n == 0:\n          break\n        index_set = sum(cand_index_set[n - 1], [])\n        n -= 1\n      # If adding a whole-word mask would exceed the maximum number of\n      # predictions, then just skip this candidate.\n      if len(select_indexes) + len(index_set) > num_to_predict:\n        continue\n      is_any_index_covered = False\n      for index in index_set:\n        if index in covered_indexes or index in select_indexes:\n          is_any_index_covered = True\n          break\n      if is_any_index_covered:\n        continue\n      for index in index_set:\n        select_indexes.add(index)\n    assert len(select_indexes) <= num_to_predict\n\n    select_indexes = sorted(select_indexes)\n    permute_indexes = list(select_indexes)\n    rng.shuffle(permute_indexes)\n    orig_token = list(output_tokens)\n\n    for src_i, tgt_i in zip(select_indexes, permute_indexes):\n      output_tokens[src_i] = orig_token[tgt_i]\n      masked_lms.append(MaskedLmInstance(index=src_i, label=orig_token[src_i]))\n\n  masked_lms = sorted(masked_lms, key=lambda x: x.index)\n\n  for p in masked_lms:\n    masked_lm_positions.append(p.index)\n    masked_lm_labels.append(p.label)\n  return (output_tokens, masked_lm_positions, masked_lm_labels, token_boundary)\n\n\ndef truncate_seq_pair(tokens_a, tokens_b, max_num_tokens, rng):\n  \"\"\"Truncates a pair of sequences to a maximum sequence length.\"\"\"\n  while True:\n    total_length = len(tokens_a) + len(tokens_b)\n    if total_length <= max_num_tokens:\n      break\n\n    trunc_tokens = tokens_a if len(tokens_a) > len(tokens_b) else tokens_b\n    assert len(trunc_tokens) >= 1\n\n    # We want to sometimes truncate from the front and sometimes from the\n    # back to add more randomness and avoid biases.\n    if rng.random() < 0.5:\n      del trunc_tokens[0]\n    else:\n      trunc_tokens.pop()\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  tokenizer = tokenization.FullTokenizer(\n      vocab_file=FLAGS.vocab_file, do_lower_case=FLAGS.do_lower_case,\n      spm_model_file=FLAGS.spm_model_file)\n\n  input_files = []\n  for input_pattern in FLAGS.input_file.split(\",\"):\n    input_files.extend(tf.gfile.Glob(input_pattern))\n\n  tf.logging.info(\"*** Reading from input files ***\")\n  for input_file in input_files:\n    tf.logging.info(\"  %s\", input_file)\n\n  rng = random.Random(FLAGS.random_seed)\n  instances = create_training_instances(\n      input_files, tokenizer, FLAGS.max_seq_length, FLAGS.dupe_factor,\n      FLAGS.short_seq_prob, FLAGS.masked_lm_prob, FLAGS.max_predictions_per_seq,\n      rng)\n\n  tf.logging.info(\"number of instances: %i\", len(instances))\n\n  output_files = FLAGS.output_file.split(\",\")\n  tf.logging.info(\"*** Writing to output files ***\")\n  for output_file in output_files:\n    tf.logging.info(\"  %s\", output_file)\n\n  write_instance_to_example_files(instances, tokenizer, FLAGS.max_seq_length,\n                                  FLAGS.max_predictions_per_seq, output_files)\n\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"input_file\")\n  flags.mark_flag_as_required(\"output_file\")\n  flags.mark_flag_as_required(\"vocab_file\")\n  tf.app.run()\n"
        },
        {
          "name": "export_checkpoints.py",
          "type": "blob",
          "size": 5.888671875,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nr\"\"\"Exports a minimal module for ALBERT models.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nimport os\nfrom absl import app\nfrom absl import flags\nfrom albert import modeling\nimport tensorflow.compat.v1 as tf\n\nflags.DEFINE_string(\n    \"albert_directory\", None,\n    \"The config json file corresponding to the pre-trained ALBERT model. \"\n    \"This specifies the model architecture.\")\n\nflags.DEFINE_string(\n    \"checkpoint_name\", \"model.ckpt-best\",\n    \"Name of the checkpoint under albert_directory to be exported.\")\n\nflags.DEFINE_bool(\n    \"do_lower_case\", True,\n    \"Whether to lower case the input text. Should be True for uncased \"\n    \"models and False for cased models.\")\n\nflags.DEFINE_string(\"export_path\", None, \"Path to the output module.\")\n\nFLAGS = flags.FLAGS\n\n\ndef gather_indexes(sequence_tensor, positions):\n  \"\"\"Gathers the vectors at the specific positions over a minibatch.\"\"\"\n  sequence_shape = modeling.get_shape_list(sequence_tensor, expected_rank=3)\n  batch_size = sequence_shape[0]\n  seq_length = sequence_shape[1]\n  width = sequence_shape[2]\n\n  flat_offsets = tf.reshape(\n      tf.range(0, batch_size, dtype=tf.int32) * seq_length, [-1, 1])\n  flat_positions = tf.reshape(positions + flat_offsets, [-1])\n  flat_sequence_tensor = tf.reshape(sequence_tensor,\n                                    [batch_size * seq_length, width])\n  output_tensor = tf.gather(flat_sequence_tensor, flat_positions)\n  return output_tensor\n\n\ndef get_mlm_logits(input_tensor, albert_config, mlm_positions, output_weights):\n  \"\"\"From run_pretraining.py.\"\"\"\n  input_tensor = gather_indexes(input_tensor, mlm_positions)\n  with tf.variable_scope(\"cls/predictions\"):\n    # We apply one more non-linear transformation before the output layer.\n    # This matrix is not used after pre-training.\n    with tf.variable_scope(\"transform\"):\n      input_tensor = tf.layers.dense(\n          input_tensor,\n          units=albert_config.embedding_size,\n          activation=modeling.get_activation(albert_config.hidden_act),\n          kernel_initializer=modeling.create_initializer(\n              albert_config.initializer_range))\n      input_tensor = modeling.layer_norm(input_tensor)\n\n    # The output weights are the same as the input embeddings, but there is\n    # an output-only bias for each token.\n    output_bias = tf.get_variable(\n        \"output_bias\",\n        shape=[albert_config.vocab_size],\n        initializer=tf.zeros_initializer())\n    logits = tf.matmul(\n        input_tensor, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n  return logits\n\n\ndef get_sentence_order_logits(input_tensor, albert_config):\n  \"\"\"Get loss and log probs for the next sentence prediction.\"\"\"\n\n  # Simple binary classification. Note that 0 is \"next sentence\" and 1 is\n  # \"random sentence\". This weight matrix is not used after pre-training.\n  with tf.variable_scope(\"cls/seq_relationship\"):\n    output_weights = tf.get_variable(\n        \"output_weights\",\n        shape=[2, albert_config.hidden_size],\n        initializer=modeling.create_initializer(\n            albert_config.initializer_range))\n    output_bias = tf.get_variable(\n        \"output_bias\", shape=[2], initializer=tf.zeros_initializer())\n\n    logits = tf.matmul(input_tensor, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    return logits\n\n\ndef build_model(sess):\n  \"\"\"Module function.\"\"\"\n  input_ids = tf.placeholder(tf.int32, [None, None], \"input_ids\")\n  input_mask = tf.placeholder(tf.int32, [None, None], \"input_mask\")\n  segment_ids = tf.placeholder(tf.int32, [None, None], \"segment_ids\")\n  mlm_positions = tf.placeholder(tf.int32, [None, None], \"mlm_positions\")\n\n  albert_config_path = os.path.join(\n      FLAGS.albert_directory, \"albert_config.json\")\n  albert_config = modeling.AlbertConfig.from_json_file(albert_config_path)\n  model = modeling.AlbertModel(\n      config=albert_config,\n      is_training=False,\n      input_ids=input_ids,\n      input_mask=input_mask,\n      token_type_ids=segment_ids,\n      use_one_hot_embeddings=False)\n\n  get_mlm_logits(model.get_sequence_output(), albert_config,\n                 mlm_positions, model.get_embedding_table())\n  get_sentence_order_logits(model.get_pooled_output(), albert_config)\n\n  checkpoint_path = os.path.join(FLAGS.albert_directory, FLAGS.checkpoint_name)\n  tvars = tf.trainable_variables()\n  (assignment_map, initialized_variable_names\n  ) = modeling.get_assignment_map_from_checkpoint(tvars, checkpoint_path)\n\n  tf.logging.info(\"**** Trainable Variables ****\")\n  for var in tvars:\n    init_string = \"\"\n    if var.name in initialized_variable_names:\n      init_string = \", *INIT_FROM_CKPT*\"\n    tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                    init_string)\n  tf.train.init_from_checkpoint(checkpoint_path, assignment_map)\n  init = tf.global_variables_initializer()\n  sess.run(init)\n  return sess\n\n\ndef main(_):\n  sess = tf.Session()\n  tf.train.get_or_create_global_step()\n  sess = build_model(sess)\n  my_vars = []\n  for var in tf.global_variables():\n    if \"lamb_v\" not in var.name and \"lamb_m\" not in var.name:\n      my_vars.append(var)\n  saver = tf.train.Saver(my_vars)\n  saver.save(sess, FLAGS.export_path)\n\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"albert_directory\")\n  flags.mark_flag_as_required(\"export_path\")\n  app.run(main)\n"
        },
        {
          "name": "export_to_tfhub.py",
          "type": "blob",
          "size": 7.59765625,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nr\"\"\"Exports a minimal TF-Hub module for ALBERT models.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nimport os\nfrom absl import app\nfrom absl import flags\nfrom albert import modeling\nimport tensorflow.compat.v1 as tf\nimport tensorflow_hub as hub\n\nflags.DEFINE_string(\n    \"albert_directory\", None,\n    \"The config json file corresponding to the pre-trained ALBERT model. \"\n    \"This specifies the model architecture.\")\n\nflags.DEFINE_string(\n    \"checkpoint_name\", \"model.ckpt-best\",\n    \"Name of the checkpoint under albert_directory to be exported.\")\n\nflags.DEFINE_bool(\n    \"do_lower_case\", True,\n    \"Whether to lower case the input text. Should be True for uncased \"\n    \"models and False for cased models.\")\n\nflags.DEFINE_bool(\n    \"use_einsum\", True,\n    \"Whether to use tf.einsum or tf.reshape+tf.matmul for dense layers. Must \"\n    \"be set to False for TFLite compatibility.\")\n\nflags.DEFINE_string(\"export_path\", None, \"Path to the output TF-Hub module.\")\n\nFLAGS = flags.FLAGS\n\n\ndef gather_indexes(sequence_tensor, positions):\n  \"\"\"Gathers the vectors at the specific positions over a minibatch.\"\"\"\n  sequence_shape = modeling.get_shape_list(sequence_tensor, expected_rank=3)\n  batch_size = sequence_shape[0]\n  seq_length = sequence_shape[1]\n  width = sequence_shape[2]\n\n  flat_offsets = tf.reshape(\n      tf.range(0, batch_size, dtype=tf.int32) * seq_length, [-1, 1])\n  flat_positions = tf.reshape(positions + flat_offsets, [-1])\n  flat_sequence_tensor = tf.reshape(sequence_tensor,\n                                    [batch_size * seq_length, width])\n  output_tensor = tf.gather(flat_sequence_tensor, flat_positions)\n  return output_tensor\n\n\ndef get_mlm_logits(model, albert_config, mlm_positions):\n  \"\"\"From run_pretraining.py.\"\"\"\n  input_tensor = gather_indexes(model.get_sequence_output(), mlm_positions)\n  with tf.variable_scope(\"cls/predictions\"):\n    # We apply one more non-linear transformation before the output layer.\n    # This matrix is not used after pre-training.\n    with tf.variable_scope(\"transform\"):\n      input_tensor = tf.layers.dense(\n          input_tensor,\n          units=albert_config.embedding_size,\n          activation=modeling.get_activation(albert_config.hidden_act),\n          kernel_initializer=modeling.create_initializer(\n              albert_config.initializer_range))\n      input_tensor = modeling.layer_norm(input_tensor)\n\n    # The output weights are the same as the input embeddings, but there is\n    # an output-only bias for each token.\n    output_bias = tf.get_variable(\n        \"output_bias\",\n        shape=[albert_config.vocab_size],\n        initializer=tf.zeros_initializer())\n    logits = tf.matmul(\n        input_tensor, model.get_embedding_table(), transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n  return logits\n\n\ndef get_sop_log_probs(model, albert_config):\n  \"\"\"Get loss and log probs for the next sentence prediction.\"\"\"\n  input_tensor = model.get_pooled_output()\n  # Simple binary classification. Note that 0 is \"next sentence\" and 1 is\n  # \"random sentence\". This weight matrix is not used after pre-training.\n  with tf.variable_scope(\"cls/seq_relationship\"):\n    output_weights = tf.get_variable(\n        \"output_weights\",\n        shape=[2, albert_config.hidden_size],\n        initializer=modeling.create_initializer(\n            albert_config.initializer_range))\n    output_bias = tf.get_variable(\n        \"output_bias\", shape=[2], initializer=tf.zeros_initializer())\n\n    logits = tf.matmul(input_tensor, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n    return log_probs\n\n\ndef module_fn(is_training):\n  \"\"\"Module function.\"\"\"\n  input_ids = tf.placeholder(tf.int32, [None, None], \"input_ids\")\n  input_mask = tf.placeholder(tf.int32, [None, None], \"input_mask\")\n  segment_ids = tf.placeholder(tf.int32, [None, None], \"segment_ids\")\n  mlm_positions = tf.placeholder(tf.int32, [None, None], \"mlm_positions\")\n\n  albert_config_path = os.path.join(\n      FLAGS.albert_directory, \"albert_config.json\")\n  albert_config = modeling.AlbertConfig.from_json_file(albert_config_path)\n  model = modeling.AlbertModel(\n      config=albert_config,\n      is_training=is_training,\n      input_ids=input_ids,\n      input_mask=input_mask,\n      token_type_ids=segment_ids,\n      use_one_hot_embeddings=False,\n      use_einsum=FLAGS.use_einsum)\n\n  mlm_logits = get_mlm_logits(model, albert_config, mlm_positions)\n  sop_log_probs = get_sop_log_probs(model, albert_config)\n\n  vocab_model_path = os.path.join(FLAGS.albert_directory, \"30k-clean.model\")\n  vocab_file_path = os.path.join(FLAGS.albert_directory, \"30k-clean.vocab\")\n\n  config_file = tf.constant(\n      value=albert_config_path, dtype=tf.string, name=\"config_file\")\n  vocab_model = tf.constant(\n      value=vocab_model_path, dtype=tf.string, name=\"vocab_model\")\n  # This is only for visualization purpose.\n  vocab_file = tf.constant(\n      value=vocab_file_path, dtype=tf.string, name=\"vocab_file\")\n\n  # By adding `config_file, vocab_model and vocab_file`\n  # to the ASSET_FILEPATHS collection, TF-Hub will\n  # rewrite this tensor so that this asset is portable.\n  tf.add_to_collection(tf.GraphKeys.ASSET_FILEPATHS, config_file)\n  tf.add_to_collection(tf.GraphKeys.ASSET_FILEPATHS, vocab_model)\n  tf.add_to_collection(tf.GraphKeys.ASSET_FILEPATHS, vocab_file)\n\n  hub.add_signature(\n      name=\"tokens\",\n      inputs=dict(\n          input_ids=input_ids, input_mask=input_mask, segment_ids=segment_ids),\n      outputs=dict(\n          sequence_output=model.get_sequence_output(),\n          pooled_output=model.get_pooled_output()))\n\n  hub.add_signature(\n      name=\"sop\",\n      inputs=dict(\n          input_ids=input_ids, input_mask=input_mask, segment_ids=segment_ids),\n      outputs=dict(\n          sequence_output=model.get_sequence_output(),\n          pooled_output=model.get_pooled_output(),\n          sop_log_probs=sop_log_probs))\n\n  hub.add_signature(\n      name=\"mlm\",\n      inputs=dict(\n          input_ids=input_ids,\n          input_mask=input_mask,\n          segment_ids=segment_ids,\n          mlm_positions=mlm_positions),\n      outputs=dict(\n          sequence_output=model.get_sequence_output(),\n          pooled_output=model.get_pooled_output(),\n          mlm_logits=mlm_logits))\n\n  hub.add_signature(\n      name=\"tokenization_info\",\n      inputs={},\n      outputs=dict(\n          vocab_file=vocab_model,\n          do_lower_case=tf.constant(FLAGS.do_lower_case)))\n\n\ndef main(_):\n  tags_and_args = []\n  for is_training in (True, False):\n    tags = set()\n    if is_training:\n      tags.add(\"train\")\n    tags_and_args.append((tags, dict(is_training=is_training)))\n  spec = hub.create_module_spec(module_fn, tags_and_args=tags_and_args)\n  checkpoint_path = os.path.join(FLAGS.albert_directory, FLAGS.checkpoint_name)\n  tf.logging.info(\"Using checkpoint {}\".format(checkpoint_path))\n  spec.export(FLAGS.export_path, checkpoint_path=checkpoint_path)\n\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"albert_directory\")\n  flags.mark_flag_as_required(\"export_path\")\n  app.run(main)\n"
        },
        {
          "name": "fine_tuning_utils.py",
          "type": "blob",
          "size": 3.169921875,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Helper library for ALBERT fine-tuning.\n\nThis library can be used to construct ALBERT models for fine-tuning, either from\njson config files or from TF-Hub modules.\n\"\"\"\n\nfrom albert import modeling\nfrom albert import tokenization\nimport tensorflow.compat.v1 as tf\nimport tensorflow_hub as hub\n\n\ndef _create_model_from_hub(hub_module, is_training, input_ids, input_mask,\n                           segment_ids):\n  \"\"\"Creates an ALBERT model from TF-Hub.\"\"\"\n  tags = set()\n  if is_training:\n    tags.add(\"train\")\n  albert_module = hub.Module(hub_module, tags=tags, trainable=True)\n  albert_inputs = dict(\n      input_ids=input_ids,\n      input_mask=input_mask,\n      segment_ids=segment_ids)\n  albert_outputs = albert_module(\n      inputs=albert_inputs,\n      signature=\"tokens\",\n      as_dict=True)\n  return (albert_outputs[\"pooled_output\"], albert_outputs[\"sequence_output\"])\n\n\ndef _create_model_from_scratch(albert_config, is_training, input_ids,\n                               input_mask, segment_ids, use_one_hot_embeddings,\n                               use_einsum):\n  \"\"\"Creates an ALBERT model from scratch/config.\"\"\"\n  model = modeling.AlbertModel(\n      config=albert_config,\n      is_training=is_training,\n      input_ids=input_ids,\n      input_mask=input_mask,\n      token_type_ids=segment_ids,\n      use_one_hot_embeddings=use_one_hot_embeddings,\n      use_einsum=use_einsum)\n  return (model.get_pooled_output(), model.get_sequence_output())\n\n\ndef create_albert(albert_config, is_training, input_ids, input_mask,\n                  segment_ids, use_one_hot_embeddings, use_einsum, hub_module):\n  \"\"\"Creates an ALBERT, either from TF-Hub or from scratch.\"\"\"\n  if hub_module:\n    tf.logging.info(\"creating model from hub_module: %s\", hub_module)\n    return _create_model_from_hub(hub_module, is_training, input_ids,\n                                  input_mask, segment_ids)\n  else:\n    tf.logging.info(\"creating model from albert_config\")\n    return _create_model_from_scratch(albert_config, is_training, input_ids,\n                                      input_mask, segment_ids,\n                                      use_one_hot_embeddings, use_einsum)\n\n\ndef create_vocab(vocab_file, do_lower_case, spm_model_file, hub_module):\n  \"\"\"Creates a vocab, either from vocab file or from a TF-Hub module.\"\"\"\n  if hub_module:\n    use_spm = True if spm_model_file else False\n    return tokenization.FullTokenizer.from_hub_module(\n        hub_module=hub_module, use_spm=use_spm)\n  else:\n    return tokenization.FullTokenizer.from_scratch(\n        vocab_file=vocab_file, do_lower_case=do_lower_case,\n        spm_model_file=spm_model_file)\n\n"
        },
        {
          "name": "lamb_optimizer.py",
          "type": "blob",
          "size": 5.4716796875,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Functions and classes related to optimization (weight updates).\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport re\nimport six\nimport tensorflow.compat.v1 as tf\n\n# pylint: disable=g-direct-tensorflow-import\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import linalg_ops\nfrom tensorflow.python.ops import math_ops\n# pylint: enable=g-direct-tensorflow-import\n\n\nclass LAMBOptimizer(tf.train.Optimizer):\n  \"\"\"LAMB (Layer-wise Adaptive Moments optimizer for Batch training).\"\"\"\n  # A new optimizer that includes correct L2 weight decay, adaptive\n  # element-wise updating, and layer-wise justification. The LAMB optimizer\n  # was proposed by Yang You, Jing Li, Jonathan Hseu, Xiaodan Song,\n  # James Demmel, and Cho-Jui Hsieh in a paper titled as Reducing BERT\n  # Pre-Training Time from 3 Days to 76 Minutes (arxiv.org/abs/1904.00962)\n\n  def __init__(self,\n               learning_rate,\n               weight_decay_rate=0.0,\n               beta_1=0.9,\n               beta_2=0.999,\n               epsilon=1e-6,\n               exclude_from_weight_decay=None,\n               exclude_from_layer_adaptation=None,\n               name=\"LAMBOptimizer\"):\n    \"\"\"Constructs a LAMBOptimizer.\"\"\"\n    super(LAMBOptimizer, self).__init__(False, name)\n\n    self.learning_rate = learning_rate\n    self.weight_decay_rate = weight_decay_rate\n    self.beta_1 = beta_1\n    self.beta_2 = beta_2\n    self.epsilon = epsilon\n    self.exclude_from_weight_decay = exclude_from_weight_decay\n    # exclude_from_layer_adaptation is set to exclude_from_weight_decay if the\n    # arg is None.\n    # TODO(jingli): validate if exclude_from_layer_adaptation is necessary.\n    if exclude_from_layer_adaptation:\n      self.exclude_from_layer_adaptation = exclude_from_layer_adaptation\n    else:\n      self.exclude_from_layer_adaptation = exclude_from_weight_decay\n\n  def apply_gradients(self, grads_and_vars, global_step=None, name=None):\n    \"\"\"See base class.\"\"\"\n    assignments = []\n    for (grad, param) in grads_and_vars:\n      if grad is None or param is None:\n        continue\n\n      param_name = self._get_variable_name(param.name)\n\n      m = tf.get_variable(\n          name=six.ensure_str(param_name) + \"/adam_m\",\n          shape=param.shape.as_list(),\n          dtype=tf.float32,\n          trainable=False,\n          initializer=tf.zeros_initializer())\n      v = tf.get_variable(\n          name=six.ensure_str(param_name) + \"/adam_v\",\n          shape=param.shape.as_list(),\n          dtype=tf.float32,\n          trainable=False,\n          initializer=tf.zeros_initializer())\n\n      # Standard Adam update.\n      next_m = (\n          tf.multiply(self.beta_1, m) + tf.multiply(1.0 - self.beta_1, grad))\n      next_v = (\n          tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2,\n                                                    tf.square(grad)))\n\n      update = next_m / (tf.sqrt(next_v) + self.epsilon)\n\n      # Just adding the square of the weights to the loss function is *not*\n      # the correct way of using L2 regularization/weight decay with Adam,\n      # since that will interact with the m and v parameters in strange ways.\n      #\n      # Instead we want ot decay the weights in a manner that doesn't interact\n      # with the m/v parameters. This is equivalent to adding the square\n      # of the weights to the loss with plain (non-momentum) SGD.\n      if self._do_use_weight_decay(param_name):\n        update += self.weight_decay_rate * param\n\n      ratio = 1.0\n      if self._do_layer_adaptation(param_name):\n        w_norm = linalg_ops.norm(param, ord=2)\n        g_norm = linalg_ops.norm(update, ord=2)\n        ratio = array_ops.where(math_ops.greater(w_norm, 0), array_ops.where(\n            math_ops.greater(g_norm, 0), (w_norm / g_norm), 1.0), 1.0)\n\n      update_with_lr = ratio * self.learning_rate * update\n\n      next_param = param - update_with_lr\n\n      assignments.extend(\n          [param.assign(next_param),\n           m.assign(next_m),\n           v.assign(next_v)])\n    return tf.group(*assignments, name=name)\n\n  def _do_use_weight_decay(self, param_name):\n    \"\"\"Whether to use L2 weight decay for `param_name`.\"\"\"\n    if not self.weight_decay_rate:\n      return False\n    if self.exclude_from_weight_decay:\n      for r in self.exclude_from_weight_decay:\n        if re.search(r, param_name) is not None:\n          return False\n    return True\n\n  def _do_layer_adaptation(self, param_name):\n    \"\"\"Whether to do layer-wise learning rate adaptation for `param_name`.\"\"\"\n    if self.exclude_from_layer_adaptation:\n      for r in self.exclude_from_layer_adaptation:\n        if re.search(r, param_name) is not None:\n          return False\n    return True\n\n  def _get_variable_name(self, param_name):\n    \"\"\"Get the variable name from the tensor name.\"\"\"\n    m = re.match(\"^(.*):\\\\d+$\", six.ensure_str(param_name))\n    if m is not None:\n      param_name = m.group(1)\n    return param_name\n"
        },
        {
          "name": "modeling.py",
          "type": "blob",
          "size": 45.03125,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"The main ALBERT model and related functions.\n\nFor a description of the algorithm, see https://arxiv.org/abs/1909.11942.\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport copy\nimport json\nimport math\nimport re\nimport numpy as np\nimport six\nfrom six.moves import range\nimport tensorflow.compat.v1 as tf\nfrom tensorflow.contrib import layers as contrib_layers\n\n\nclass AlbertConfig(object):\n  \"\"\"Configuration for `AlbertModel`.\n\n  The default settings match the configuration of model `albert_xxlarge`.\n  \"\"\"\n\n  def __init__(self,\n               vocab_size,\n               embedding_size=128,\n               hidden_size=4096,\n               num_hidden_layers=12,\n               num_hidden_groups=1,\n               num_attention_heads=64,\n               intermediate_size=16384,\n               inner_group_num=1,\n               down_scale_factor=1,\n               hidden_act=\"gelu\",\n               hidden_dropout_prob=0,\n               attention_probs_dropout_prob=0,\n               max_position_embeddings=512,\n               type_vocab_size=2,\n               initializer_range=0.02):\n    \"\"\"Constructs AlbertConfig.\n\n    Args:\n      vocab_size: Vocabulary size of `inputs_ids` in `AlbertModel`.\n      embedding_size: size of voc embeddings.\n      hidden_size: Size of the encoder layers and the pooler layer.\n      num_hidden_layers: Number of hidden layers in the Transformer encoder.\n      num_hidden_groups: Number of group for the hidden layers, parameters in\n        the same group are shared.\n      num_attention_heads: Number of attention heads for each attention layer in\n        the Transformer encoder.\n      intermediate_size: The size of the \"intermediate\" (i.e., feed-forward)\n        layer in the Transformer encoder.\n      inner_group_num: int, number of inner repetition of attention and ffn.\n      down_scale_factor: float, the scale to apply\n      hidden_act: The non-linear activation function (function or string) in the\n        encoder and pooler.\n      hidden_dropout_prob: The dropout probability for all fully connected\n        layers in the embeddings, encoder, and pooler.\n      attention_probs_dropout_prob: The dropout ratio for the attention\n        probabilities.\n      max_position_embeddings: The maximum sequence length that this model might\n        ever be used with. Typically set this to something large just in case\n        (e.g., 512 or 1024 or 2048).\n      type_vocab_size: The vocabulary size of the `token_type_ids` passed into\n        `AlbertModel`.\n      initializer_range: The stdev of the truncated_normal_initializer for\n        initializing all weight matrices.\n    \"\"\"\n    self.vocab_size = vocab_size\n    self.embedding_size = embedding_size\n    self.hidden_size = hidden_size\n    self.num_hidden_layers = num_hidden_layers\n    self.num_hidden_groups = num_hidden_groups\n    self.num_attention_heads = num_attention_heads\n    self.inner_group_num = inner_group_num\n    self.down_scale_factor = down_scale_factor\n    self.hidden_act = hidden_act\n    self.intermediate_size = intermediate_size\n    self.hidden_dropout_prob = hidden_dropout_prob\n    self.attention_probs_dropout_prob = attention_probs_dropout_prob\n    self.max_position_embeddings = max_position_embeddings\n    self.type_vocab_size = type_vocab_size\n    self.initializer_range = initializer_range\n\n  @classmethod\n  def from_dict(cls, json_object):\n    \"\"\"Constructs a `AlbertConfig` from a Python dictionary of parameters.\"\"\"\n    config = AlbertConfig(vocab_size=None)\n    for (key, value) in six.iteritems(json_object):\n      config.__dict__[key] = value\n    return config\n\n  @classmethod\n  def from_json_file(cls, json_file):\n    \"\"\"Constructs a `AlbertConfig` from a json file of parameters.\"\"\"\n    with tf.gfile.GFile(json_file, \"r\") as reader:\n      text = reader.read()\n    return cls.from_dict(json.loads(text))\n\n  def to_dict(self):\n    \"\"\"Serializes this instance to a Python dictionary.\"\"\"\n    output = copy.deepcopy(self.__dict__)\n    return output\n\n  def to_json_string(self):\n    \"\"\"Serializes this instance to a JSON string.\"\"\"\n    return json.dumps(self.to_dict(), indent=2, sort_keys=True) + \"\\n\"\n\n\nclass AlbertModel(object):\n  \"\"\"BERT model (\"Bidirectional Encoder Representations from Transformers\").\n\n  Example usage:\n\n  ```python\n  # Already been converted from strings into ids\n  input_ids = tf.constant([[31, 51, 99], [15, 5, 0]])\n  input_mask = tf.constant([[1, 1, 1], [1, 1, 0]])\n  token_type_ids = tf.constant([[0, 0, 1], [0, 2, 0]])\n\n  config = modeling.AlbertConfig(vocab_size=32000, hidden_size=512,\n    num_hidden_layers=8, num_attention_heads=6, intermediate_size=1024)\n\n  model = modeling.AlbertModel(config=config, is_training=True,\n    input_ids=input_ids, input_mask=input_mask, token_type_ids=token_type_ids)\n\n  label_embeddings = tf.get_variable(...)\n  pooled_output = model.get_pooled_output()\n  logits = tf.matmul(pooled_output, label_embeddings)\n  ...\n  ```\n  \"\"\"\n\n  def __init__(self,\n               config,\n               is_training,\n               input_ids,\n               input_mask=None,\n               token_type_ids=None,\n               use_one_hot_embeddings=False,\n               use_einsum=True,\n               scope=None):\n    \"\"\"Constructor for AlbertModel.\n\n    Args:\n      config: `AlbertConfig` instance.\n      is_training: bool. true for training model, false for eval model. Controls\n        whether dropout will be applied.\n      input_ids: int32 Tensor of shape [batch_size, seq_length].\n      input_mask: (optional) int32 Tensor of shape [batch_size, seq_length].\n      token_type_ids: (optional) int32 Tensor of shape [batch_size, seq_length].\n      use_one_hot_embeddings: (optional) bool. Whether to use one-hot word\n        embeddings or tf.embedding_lookup() for the word embeddings.\n      use_einsum: (optional) bool. Whether to use einsum or reshape+matmul for\n        dense layers\n      scope: (optional) variable scope. Defaults to \"bert\".\n\n    Raises:\n      ValueError: The config is invalid or one of the input tensor shapes\n        is invalid.\n    \"\"\"\n    config = copy.deepcopy(config)\n    if not is_training:\n      config.hidden_dropout_prob = 0.0\n      config.attention_probs_dropout_prob = 0.0\n\n    input_shape = get_shape_list(input_ids, expected_rank=2)\n    batch_size = input_shape[0]\n    seq_length = input_shape[1]\n\n    if input_mask is None:\n      input_mask = tf.ones(shape=[batch_size, seq_length], dtype=tf.int32)\n\n    if token_type_ids is None:\n      token_type_ids = tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)\n\n    with tf.variable_scope(scope, default_name=\"bert\"):\n      with tf.variable_scope(\"embeddings\"):\n        # Perform embedding lookup on the word ids.\n        (self.word_embedding_output,\n         self.output_embedding_table) = embedding_lookup(\n             input_ids=input_ids,\n             vocab_size=config.vocab_size,\n             embedding_size=config.embedding_size,\n             initializer_range=config.initializer_range,\n             word_embedding_name=\"word_embeddings\",\n             use_one_hot_embeddings=use_one_hot_embeddings)\n\n        # Add positional embeddings and token type embeddings, then layer\n        # normalize and perform dropout.\n        self.embedding_output = embedding_postprocessor(\n            input_tensor=self.word_embedding_output,\n            use_token_type=True,\n            token_type_ids=token_type_ids,\n            token_type_vocab_size=config.type_vocab_size,\n            token_type_embedding_name=\"token_type_embeddings\",\n            use_position_embeddings=True,\n            position_embedding_name=\"position_embeddings\",\n            initializer_range=config.initializer_range,\n            max_position_embeddings=config.max_position_embeddings,\n            dropout_prob=config.hidden_dropout_prob,\n            use_one_hot_embeddings=use_one_hot_embeddings)\n\n      with tf.variable_scope(\"encoder\"):\n        # Run the stacked transformer.\n        # `sequence_output` shape = [batch_size, seq_length, hidden_size].\n        self.all_encoder_layers = transformer_model(\n            input_tensor=self.embedding_output,\n            attention_mask=input_mask,\n            hidden_size=config.hidden_size,\n            num_hidden_layers=config.num_hidden_layers,\n            num_hidden_groups=config.num_hidden_groups,\n            num_attention_heads=config.num_attention_heads,\n            intermediate_size=config.intermediate_size,\n            inner_group_num=config.inner_group_num,\n            intermediate_act_fn=get_activation(config.hidden_act),\n            hidden_dropout_prob=config.hidden_dropout_prob,\n            attention_probs_dropout_prob=config.attention_probs_dropout_prob,\n            initializer_range=config.initializer_range,\n            do_return_all_layers=True,\n            use_einsum=use_einsum)\n\n      self.sequence_output = self.all_encoder_layers[-1]\n      # The \"pooler\" converts the encoded sequence tensor of shape\n      # [batch_size, seq_length, hidden_size] to a tensor of shape\n      # [batch_size, hidden_size]. This is necessary for segment-level\n      # (or segment-pair-level) classification tasks where we need a fixed\n      # dimensional representation of the segment.\n      with tf.variable_scope(\"pooler\"):\n        # We \"pool\" the model by simply taking the hidden state corresponding\n        # to the first token. We assume that this has been pre-trained\n        first_token_tensor = tf.squeeze(self.sequence_output[:, 0:1, :], axis=1)\n        self.pooled_output = tf.layers.dense(\n            first_token_tensor,\n            config.hidden_size,\n            activation=tf.tanh,\n            kernel_initializer=create_initializer(config.initializer_range))\n\n  def get_pooled_output(self):\n    return self.pooled_output\n\n  def get_sequence_output(self):\n    \"\"\"Gets final hidden layer of encoder.\n\n    Returns:\n      float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n      to the final hidden of the transformer encoder.\n    \"\"\"\n    return self.sequence_output\n\n  def get_all_encoder_layers(self):\n    return self.all_encoder_layers\n\n  def get_word_embedding_output(self):\n    \"\"\"Get output of the word(piece) embedding lookup.\n\n    This is BEFORE positional embeddings and token type embeddings have been\n    added.\n\n    Returns:\n      float Tensor of shape [batch_size, seq_length, embedding_size]\n      corresponding to the output of the word(piece) embedding layer.\n    \"\"\"\n    return self.word_embedding_output\n\n  def get_embedding_output(self):\n    \"\"\"Gets output of the embedding lookup (i.e., input to the transformer).\n\n    Returns:\n      float Tensor of shape [batch_size, seq_length, embedding_size]\n      corresponding to the output of the embedding layer, after summing the word\n      embeddings with the positional embeddings and the token type embeddings,\n      then performing layer normalization. This is the input to the transformer.\n    \"\"\"\n    return self.embedding_output\n\n  def get_embedding_table(self):\n    return self.output_embedding_table\n\n\ndef gelu(x):\n  \"\"\"Gaussian Error Linear Unit.\n\n  This is a smoother version of the RELU.\n  Original paper: https://arxiv.org/abs/1606.08415\n  Args:\n    x: float Tensor to perform activation.\n\n  Returns:\n    `x` with the GELU activation applied.\n  \"\"\"\n  cdf = 0.5 * (1.0 + tf.tanh(\n      (np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3)))))\n  return x * cdf\n\n\ndef get_activation(activation_string):\n  \"\"\"Maps a string to a Python function, e.g., \"relu\" => `tf.nn.relu`.\n\n  Args:\n    activation_string: String name of the activation function.\n\n  Returns:\n    A Python function corresponding to the activation function. If\n    `activation_string` is None, empty, or \"linear\", this will return None.\n    If `activation_string` is not a string, it will return `activation_string`.\n\n  Raises:\n    ValueError: The `activation_string` does not correspond to a known\n      activation.\n  \"\"\"\n\n  # We assume that anything that\"s not a string is already an activation\n  # function, so we just return it.\n  if not isinstance(activation_string, six.string_types):\n    return activation_string\n\n  if not activation_string:\n    return None\n\n  act = activation_string.lower()\n  if act == \"linear\":\n    return None\n  elif act == \"relu\":\n    return tf.nn.relu\n  elif act == \"gelu\":\n    return gelu\n  elif act == \"tanh\":\n    return tf.tanh\n  else:\n    raise ValueError(\"Unsupported activation: %s\" % act)\n\n\ndef get_assignment_map_from_checkpoint(tvars, init_checkpoint, num_of_group=0):\n  \"\"\"Compute the union of the current variables and checkpoint variables.\"\"\"\n  assignment_map = {}\n  initialized_variable_names = {}\n\n  name_to_variable = collections.OrderedDict()\n  for var in tvars:\n    name = var.name\n    m = re.match(\"^(.*):\\\\d+$\", name)\n    if m is not None:\n      name = m.group(1)\n    name_to_variable[name] = var\n  init_vars = tf.train.list_variables(init_checkpoint)\n  init_vars_name = [name for (name, _) in init_vars]\n\n  if num_of_group > 0:\n    assignment_map = []\n    for gid in range(num_of_group):\n      assignment_map.append(collections.OrderedDict())\n  else:\n    assignment_map = collections.OrderedDict()\n\n  for name in name_to_variable:\n    if name in init_vars_name:\n      tvar_name = name\n    elif (re.sub(r\"/group_\\d+/\", \"/group_0/\",\n                 six.ensure_str(name)) in init_vars_name and\n          num_of_group > 1):\n      tvar_name = re.sub(r\"/group_\\d+/\", \"/group_0/\", six.ensure_str(name))\n    elif (re.sub(r\"/ffn_\\d+/\", \"/ffn_1/\", six.ensure_str(name))\n          in init_vars_name and num_of_group > 1):\n      tvar_name = re.sub(r\"/ffn_\\d+/\", \"/ffn_1/\", six.ensure_str(name))\n    elif (re.sub(r\"/attention_\\d+/\", \"/attention_1/\", six.ensure_str(name))\n          in init_vars_name and num_of_group > 1):\n      tvar_name = re.sub(r\"/attention_\\d+/\", \"/attention_1/\",\n                         six.ensure_str(name))\n    else:\n      tf.logging.info(\"name %s does not get matched\", name)\n      continue\n    tf.logging.info(\"name %s match to %s\", name, tvar_name)\n    if num_of_group > 0:\n      group_matched = False\n      for gid in range(1, num_of_group):\n        if ((\"/group_\" + str(gid) + \"/\" in name) or\n            (\"/ffn_\" + str(gid) + \"/\" in name) or\n            (\"/attention_\" + str(gid) + \"/\" in name)):\n          group_matched = True\n          tf.logging.info(\"%s belongs to %dth\", name, gid)\n          assignment_map[gid][tvar_name] = name\n      if not group_matched:\n        assignment_map[0][tvar_name] = name\n    else:\n      assignment_map[tvar_name] = name\n    initialized_variable_names[name] = 1\n    initialized_variable_names[six.ensure_str(name) + \":0\"] = 1\n\n  return (assignment_map, initialized_variable_names)\n\n\ndef dropout(input_tensor, dropout_prob):\n  \"\"\"Perform dropout.\n\n  Args:\n    input_tensor: float Tensor.\n    dropout_prob: Python float. The probability of dropping out a value (NOT of\n      *keeping* a dimension as in `tf.nn.dropout`).\n\n  Returns:\n    A version of `input_tensor` with dropout applied.\n  \"\"\"\n  if dropout_prob is None or dropout_prob == 0.0:\n    return input_tensor\n\n  output = tf.nn.dropout(input_tensor, rate=dropout_prob)\n  return output\n\n\ndef layer_norm(input_tensor, name=None):\n  \"\"\"Run layer normalization on the last dimension of the tensor.\"\"\"\n  return contrib_layers.layer_norm(\n      inputs=input_tensor, begin_norm_axis=-1, begin_params_axis=-1, scope=name)\n\n\ndef layer_norm_and_dropout(input_tensor, dropout_prob, name=None):\n  \"\"\"Runs layer normalization followed by dropout.\"\"\"\n  output_tensor = layer_norm(input_tensor, name)\n  output_tensor = dropout(output_tensor, dropout_prob)\n  return output_tensor\n\n\ndef create_initializer(initializer_range=0.02):\n  \"\"\"Creates a `truncated_normal_initializer` with the given range.\"\"\"\n  return tf.truncated_normal_initializer(stddev=initializer_range)\n\n\ndef get_timing_signal_1d_given_position(channels,\n                                        position,\n                                        min_timescale=1.0,\n                                        max_timescale=1.0e4):\n  \"\"\"Get sinusoids of diff frequencies, with timing position given.\n\n  Adapted from add_timing_signal_1d_given_position in\n  //third_party/py/tensor2tensor/layers/common_attention.py\n\n  Args:\n    channels: scalar, size of timing embeddings to create. The number of\n        different timescales is equal to channels / 2.\n    position: a Tensor with shape [batch, seq_len]\n    min_timescale: a float\n    max_timescale: a float\n\n  Returns:\n    a Tensor of timing signals [batch, seq_len, channels]\n  \"\"\"\n  num_timescales = channels // 2\n  log_timescale_increment = (\n      math.log(float(max_timescale) / float(min_timescale)) /\n      (tf.to_float(num_timescales) - 1))\n  inv_timescales = min_timescale * tf.exp(\n      tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)\n  scaled_time = (\n      tf.expand_dims(tf.to_float(position), 2) * tf.expand_dims(\n          tf.expand_dims(inv_timescales, 0), 0))\n  signal = tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=2)\n  signal = tf.pad(signal, [[0, 0], [0, 0], [0, tf.mod(channels, 2)]])\n  return signal\n\n\ndef embedding_lookup(input_ids,\n                     vocab_size,\n                     embedding_size=128,\n                     initializer_range=0.02,\n                     word_embedding_name=\"word_embeddings\",\n                     use_one_hot_embeddings=False):\n  \"\"\"Looks up words embeddings for id tensor.\n\n  Args:\n    input_ids: int32 Tensor of shape [batch_size, seq_length] containing word\n      ids.\n    vocab_size: int. Size of the embedding vocabulary.\n    embedding_size: int. Width of the word embeddings.\n    initializer_range: float. Embedding initialization range.\n    word_embedding_name: string. Name of the embedding table.\n    use_one_hot_embeddings: bool. If True, use one-hot method for word\n      embeddings. If False, use `tf.nn.embedding_lookup()`.\n\n  Returns:\n    float Tensor of shape [batch_size, seq_length, embedding_size].\n  \"\"\"\n  # This function assumes that the input is of shape [batch_size, seq_length,\n  # num_inputs].\n  #\n  # If the input is a 2D tensor of shape [batch_size, seq_length], we\n  # reshape to [batch_size, seq_length, 1].\n  if input_ids.shape.ndims == 2:\n    input_ids = tf.expand_dims(input_ids, axis=[-1])\n\n  embedding_table = tf.get_variable(\n      name=word_embedding_name,\n      shape=[vocab_size, embedding_size],\n      initializer=create_initializer(initializer_range))\n\n  if use_one_hot_embeddings:\n    flat_input_ids = tf.reshape(input_ids, [-1])\n    one_hot_input_ids = tf.one_hot(flat_input_ids, depth=vocab_size)\n    output = tf.matmul(one_hot_input_ids, embedding_table)\n  else:\n    output = tf.nn.embedding_lookup(embedding_table, input_ids)\n\n  input_shape = get_shape_list(input_ids)\n\n  output = tf.reshape(output,\n                      input_shape[0:-1] + [input_shape[-1] * embedding_size])\n  return (output, embedding_table)\n\n\ndef embedding_postprocessor(input_tensor,\n                            use_token_type=False,\n                            token_type_ids=None,\n                            token_type_vocab_size=16,\n                            token_type_embedding_name=\"token_type_embeddings\",\n                            use_position_embeddings=True,\n                            position_embedding_name=\"position_embeddings\",\n                            initializer_range=0.02,\n                            max_position_embeddings=512,\n                            dropout_prob=0.1,\n                            use_one_hot_embeddings=True):\n  \"\"\"Performs various post-processing on a word embedding tensor.\n\n  Args:\n    input_tensor: float Tensor of shape [batch_size, seq_length,\n      embedding_size].\n    use_token_type: bool. Whether to add embeddings for `token_type_ids`.\n    token_type_ids: (optional) int32 Tensor of shape [batch_size, seq_length].\n      Must be specified if `use_token_type` is True.\n    token_type_vocab_size: int. The vocabulary size of `token_type_ids`.\n    token_type_embedding_name: string. The name of the embedding table variable\n      for token type ids.\n    use_position_embeddings: bool. Whether to add position embeddings for the\n      position of each token in the sequence.\n    position_embedding_name: string. The name of the embedding table variable\n      for positional embeddings.\n    initializer_range: float. Range of the weight initialization.\n    max_position_embeddings: int. Maximum sequence length that might ever be\n      used with this model. This can be longer than the sequence length of\n      input_tensor, but cannot be shorter.\n    dropout_prob: float. Dropout probability applied to the final output tensor.\n    use_one_hot_embeddings: bool. If True, use one-hot method for word\n      embeddings. If False, use `tf.nn.embedding_lookup()`.\n\n  Returns:\n    float tensor with same shape as `input_tensor`.\n\n  Raises:\n    ValueError: One of the tensor shapes or input values is invalid.\n  \"\"\"\n  input_shape = get_shape_list(input_tensor, expected_rank=3)\n  batch_size = input_shape[0]\n  seq_length = input_shape[1]\n  width = input_shape[2]\n\n  output = input_tensor\n\n  if use_token_type:\n    if token_type_ids is None:\n      raise ValueError(\"`token_type_ids` must be specified if\"\n                       \"`use_token_type` is True.\")\n    token_type_table = tf.get_variable(\n        name=token_type_embedding_name,\n        shape=[token_type_vocab_size, width],\n        initializer=create_initializer(initializer_range))\n    # This vocab will be small so we always do one-hot here, since it is always\n    # faster for a small vocabulary, unless converting to tflite model.\n    if use_one_hot_embeddings:\n      flat_token_type_ids = tf.reshape(token_type_ids, [-1])\n      one_hot_ids = tf.one_hot(flat_token_type_ids, depth=token_type_vocab_size)\n      token_type_embeddings = tf.matmul(one_hot_ids, token_type_table)\n      token_type_embeddings = tf.reshape(token_type_embeddings,\n                                         [batch_size, seq_length, width])\n    else:\n      token_type_embeddings = tf.nn.embedding_lookup(token_type_table,\n                                                     token_type_ids)\n    output += token_type_embeddings\n\n  if use_position_embeddings:\n    assert_op = tf.assert_less_equal(seq_length, max_position_embeddings)\n    with tf.control_dependencies([assert_op]):\n      full_position_embeddings = tf.get_variable(\n          name=position_embedding_name,\n          shape=[max_position_embeddings, width],\n          initializer=create_initializer(initializer_range))\n      # Since the position embedding table is a learned variable, we create it\n      # using a (long) sequence length `max_position_embeddings`. The actual\n      # sequence length might be shorter than this, for faster training of\n      # tasks that do not have long sequences.\n      #\n      # So `full_position_embeddings` is effectively an embedding table\n      # for position [0, 1, 2, ..., max_position_embeddings-1], and the current\n      # sequence has positions [0, 1, 2, ... seq_length-1], so we can just\n      # perform a slice.\n      position_embeddings = tf.slice(full_position_embeddings, [0, 0],\n                                     [seq_length, -1])\n      num_dims = len(output.shape.as_list())\n\n      # Only the last two dimensions are relevant (`seq_length` and `width`), so\n      # we broadcast among the first dimensions, which is typically just\n      # the batch size.\n      position_broadcast_shape = []\n      for _ in range(num_dims - 2):\n        position_broadcast_shape.append(1)\n      position_broadcast_shape.extend([seq_length, width])\n      position_embeddings = tf.reshape(position_embeddings,\n                                       position_broadcast_shape)\n      output += position_embeddings\n\n  output = layer_norm_and_dropout(output, dropout_prob)\n  return output\n\n\ndef einsum_via_matmul(input_tensor, w, num_inner_dims):\n  \"\"\"Implements einsum via matmul and reshape ops.\n\n  Args:\n    input_tensor: float Tensor of shape [<batch_dims>, <inner_dims>].\n    w: float Tensor of shape [<inner_dims>, <outer_dims>].\n    num_inner_dims: int. number of dimensions to use for inner products.\n\n  Returns:\n    float Tensor of shape [<batch_dims>, <outer_dims>].\n  \"\"\"\n  input_shape = get_shape_list(input_tensor)\n  w_shape = get_shape_list(w)\n  batch_dims = input_shape[: -num_inner_dims]\n  inner_dims = input_shape[-num_inner_dims:]\n  outer_dims = w_shape[num_inner_dims:]\n  inner_dim = np.prod(inner_dims)\n  outer_dim = np.prod(outer_dims)\n  if num_inner_dims > 1:\n    input_tensor = tf.reshape(input_tensor, batch_dims + [inner_dim])\n  if len(w_shape) > 2:\n    w = tf.reshape(w, [inner_dim, outer_dim])\n  ret = tf.matmul(input_tensor, w)\n  if len(outer_dims) > 1:\n    ret = tf.reshape(ret, batch_dims + outer_dims)\n  return ret\n\n\ndef dense_layer_3d(input_tensor,\n                   num_attention_heads,\n                   head_size,\n                   initializer,\n                   activation,\n                   use_einsum,\n                   name=None):\n  \"\"\"A dense layer with 3D kernel.\n\n  Args:\n    input_tensor: float Tensor of shape [batch, seq_length, hidden_size].\n    num_attention_heads: Number of attention heads.\n    head_size: The size per attention head.\n    initializer: Kernel initializer.\n    activation: Actication function.\n    use_einsum: bool. Whether to use einsum or reshape+matmul for dense layers.\n    name: The name scope of this layer.\n\n  Returns:\n    float logits Tensor.\n  \"\"\"\n\n  input_shape = get_shape_list(input_tensor)\n  hidden_size = input_shape[2]\n\n  with tf.variable_scope(name):\n    w = tf.get_variable(\n        name=\"kernel\",\n        shape=[hidden_size, num_attention_heads * head_size],\n        initializer=initializer)\n    w = tf.reshape(w, [hidden_size, num_attention_heads, head_size])\n    b = tf.get_variable(\n        name=\"bias\",\n        shape=[num_attention_heads * head_size],\n        initializer=tf.zeros_initializer)\n    b = tf.reshape(b, [num_attention_heads, head_size])\n    if use_einsum:\n      ret = tf.einsum(\"BFH,HND->BFND\", input_tensor, w)\n    else:\n      ret = einsum_via_matmul(input_tensor, w, 1)\n    ret += b\n  if activation is not None:\n    return activation(ret)\n  else:\n    return ret\n\n\ndef dense_layer_3d_proj(input_tensor,\n                        hidden_size,\n                        head_size,\n                        initializer,\n                        activation,\n                        use_einsum,\n                        name=None):\n  \"\"\"A dense layer with 3D kernel for projection.\n\n  Args:\n    input_tensor: float Tensor of shape [batch,from_seq_length,\n      num_attention_heads, size_per_head].\n    hidden_size: The size of hidden layer.\n    head_size: The size of head.\n    initializer: Kernel initializer.\n    activation: Actication function.\n    use_einsum: bool. Whether to use einsum or reshape+matmul for dense layers.\n    name: The name scope of this layer.\n\n  Returns:\n    float logits Tensor.\n  \"\"\"\n  input_shape = get_shape_list(input_tensor)\n  num_attention_heads = input_shape[2]\n  with tf.variable_scope(name):\n    w = tf.get_variable(\n        name=\"kernel\",\n        shape=[num_attention_heads * head_size, hidden_size],\n        initializer=initializer)\n    w = tf.reshape(w, [num_attention_heads, head_size, hidden_size])\n    b = tf.get_variable(\n        name=\"bias\", shape=[hidden_size], initializer=tf.zeros_initializer)\n    if use_einsum:\n      ret = tf.einsum(\"BFND,NDH->BFH\", input_tensor, w)\n    else:\n      ret = einsum_via_matmul(input_tensor, w, 2)\n    ret += b\n  if activation is not None:\n    return activation(ret)\n  else:\n    return ret\n\n\ndef dense_layer_2d(input_tensor,\n                   output_size,\n                   initializer,\n                   activation,\n                   use_einsum,\n                   num_attention_heads=1,\n                   name=None):\n  \"\"\"A dense layer with 2D kernel.\n\n  Args:\n    input_tensor: Float tensor with rank 3.\n    output_size: The size of output dimension.\n    initializer: Kernel initializer.\n    activation: Activation function.\n    use_einsum: bool. Whether to use einsum or reshape+matmul for dense layers.\n    num_attention_heads: number of attention head in attention layer.\n    name: The name scope of this layer.\n\n  Returns:\n    float logits Tensor.\n  \"\"\"\n  del num_attention_heads  # unused\n  input_shape = get_shape_list(input_tensor)\n  hidden_size = input_shape[2]\n  with tf.variable_scope(name):\n    w = tf.get_variable(\n        name=\"kernel\",\n        shape=[hidden_size, output_size],\n        initializer=initializer)\n    b = tf.get_variable(\n        name=\"bias\", shape=[output_size], initializer=tf.zeros_initializer)\n    if use_einsum:\n      ret = tf.einsum(\"BFH,HO->BFO\", input_tensor, w)\n    else:\n      ret = tf.matmul(input_tensor, w)\n    ret += b\n  if activation is not None:\n    return activation(ret)\n  else:\n    return ret\n\n\ndef dot_product_attention(q, k, v, bias, dropout_rate=0.0):\n  \"\"\"Dot-product attention.\n\n  Args:\n    q: Tensor with shape [..., length_q, depth_k].\n    k: Tensor with shape [..., length_kv, depth_k]. Leading dimensions must\n      match with q.\n    v: Tensor with shape [..., length_kv, depth_v] Leading dimensions must\n      match with q.\n    bias: bias Tensor (see attention_bias())\n    dropout_rate: a float.\n\n  Returns:\n    Tensor with shape [..., length_q, depth_v].\n  \"\"\"\n  logits = tf.matmul(q, k, transpose_b=True)  # [..., length_q, length_kv]\n  logits = tf.multiply(logits, 1.0 / math.sqrt(float(get_shape_list(q)[-1])))\n  if bias is not None:\n    # `attention_mask` = [B, T]\n    from_shape = get_shape_list(q)\n    if len(from_shape) == 4:\n      broadcast_ones = tf.ones([from_shape[0], 1, from_shape[2], 1], tf.float32)\n    elif len(from_shape) == 5:\n      # from_shape = [B, N, Block_num, block_size, depth]#\n      broadcast_ones = tf.ones([from_shape[0], 1, from_shape[2], from_shape[3],\n                                1], tf.float32)\n\n    bias = tf.matmul(broadcast_ones,\n                     tf.cast(bias, tf.float32), transpose_b=True)\n\n    # Since attention_mask is 1.0 for positions we want to attend and 0.0 for\n    # masked positions, this operation will create a tensor which is 0.0 for\n    # positions we want to attend and -10000.0 for masked positions.\n    adder = (1.0 - bias) * -10000.0\n\n    # Since we are adding it to the raw scores before the softmax, this is\n    # effectively the same as removing these entirely.\n    logits += adder\n  else:\n    adder = 0.0\n\n  attention_probs = tf.nn.softmax(logits, name=\"attention_probs\")\n  attention_probs = dropout(attention_probs, dropout_rate)\n  return tf.matmul(attention_probs, v)\n\n\ndef attention_layer(from_tensor,\n                    to_tensor,\n                    attention_mask=None,\n                    num_attention_heads=1,\n                    query_act=None,\n                    key_act=None,\n                    value_act=None,\n                    attention_probs_dropout_prob=0.0,\n                    initializer_range=0.02,\n                    batch_size=None,\n                    from_seq_length=None,\n                    to_seq_length=None,\n                    use_einsum=True):\n  \"\"\"Performs multi-headed attention from `from_tensor` to `to_tensor`.\n\n  Args:\n    from_tensor: float Tensor of shape [batch_size, from_seq_length,\n      from_width].\n    to_tensor: float Tensor of shape [batch_size, to_seq_length, to_width].\n    attention_mask: (optional) int32 Tensor of shape [batch_size, seq_length].\n      The values should be 1 or 0. The attention scores will effectively\n      be set to -infinity for any positions in the mask that are 0, and\n      will be unchanged for positions that are 1.\n    num_attention_heads: int. Number of attention heads.\n    query_act: (optional) Activation function for the query transform.\n    key_act: (optional) Activation function for the key transform.\n    value_act: (optional) Activation function for the value transform.\n    attention_probs_dropout_prob: (optional) float. Dropout probability of the\n      attention probabilities.\n    initializer_range: float. Range of the weight initializer.\n    batch_size: (Optional) int. If the input is 2D, this might be the batch size\n      of the 3D version of the `from_tensor` and `to_tensor`.\n    from_seq_length: (Optional) If the input is 2D, this might be the seq length\n      of the 3D version of the `from_tensor`.\n    to_seq_length: (Optional) If the input is 2D, this might be the seq length\n      of the 3D version of the `to_tensor`.\n    use_einsum: bool. Whether to use einsum or reshape+matmul for dense layers\n\n  Returns:\n    float Tensor of shape [batch_size, from_seq_length, num_attention_heads,\n      size_per_head].\n\n  Raises:\n    ValueError: Any of the arguments or tensor shapes are invalid.\n  \"\"\"\n  from_shape = get_shape_list(from_tensor, expected_rank=[2, 3])\n  to_shape = get_shape_list(to_tensor, expected_rank=[2, 3])\n  size_per_head = int(from_shape[2]/num_attention_heads)\n\n  if len(from_shape) != len(to_shape):\n    raise ValueError(\n        \"The rank of `from_tensor` must match the rank of `to_tensor`.\")\n\n  if len(from_shape) == 3:\n    batch_size = from_shape[0]\n    from_seq_length = from_shape[1]\n    to_seq_length = to_shape[1]\n  elif len(from_shape) == 2:\n    if (batch_size is None or from_seq_length is None or to_seq_length is None):\n      raise ValueError(\n          \"When passing in rank 2 tensors to attention_layer, the values \"\n          \"for `batch_size`, `from_seq_length`, and `to_seq_length` \"\n          \"must all be specified.\")\n\n  # Scalar dimensions referenced here:\n  #   B = batch size (number of sequences)\n  #   F = `from_tensor` sequence length\n  #   T = `to_tensor` sequence length\n  #   N = `num_attention_heads`\n  #   H = `size_per_head`\n\n  # `query_layer` = [B, F, N, H]\n  q = dense_layer_3d(from_tensor, num_attention_heads, size_per_head,\n                     create_initializer(initializer_range), query_act,\n                     use_einsum, \"query\")\n\n  # `key_layer` = [B, T, N, H]\n  k = dense_layer_3d(to_tensor, num_attention_heads, size_per_head,\n                     create_initializer(initializer_range), key_act,\n                     use_einsum, \"key\")\n  # `value_layer` = [B, T, N, H]\n  v = dense_layer_3d(to_tensor, num_attention_heads, size_per_head,\n                     create_initializer(initializer_range), value_act,\n                     use_einsum, \"value\")\n  q = tf.transpose(q, [0, 2, 1, 3])\n  k = tf.transpose(k, [0, 2, 1, 3])\n  v = tf.transpose(v, [0, 2, 1, 3])\n  if attention_mask is not None:\n    attention_mask = tf.reshape(\n        attention_mask, [batch_size, 1, to_seq_length, 1])\n    # 'new_embeddings = [B, N, F, H]'\n  new_embeddings = dot_product_attention(q, k, v, attention_mask,\n                                         attention_probs_dropout_prob)\n\n  return tf.transpose(new_embeddings, [0, 2, 1, 3])\n\n\ndef attention_ffn_block(layer_input,\n                        hidden_size=768,\n                        attention_mask=None,\n                        num_attention_heads=1,\n                        attention_head_size=64,\n                        attention_probs_dropout_prob=0.0,\n                        intermediate_size=3072,\n                        intermediate_act_fn=None,\n                        initializer_range=0.02,\n                        hidden_dropout_prob=0.0,\n                        use_einsum=True):\n  \"\"\"A network with attention-ffn as sub-block.\n\n  Args:\n    layer_input: float Tensor of shape [batch_size, from_seq_length,\n      from_width].\n    hidden_size: (optional) int, size of hidden layer.\n    attention_mask: (optional) int32 Tensor of shape [batch_size, seq_length].\n      The values should be 1 or 0. The attention scores will effectively be set\n      to -infinity for any positions in the mask that are 0, and will be\n      unchanged for positions that are 1.\n    num_attention_heads: int. Number of attention heads.\n    attention_head_size: int. Size of attention head.\n    attention_probs_dropout_prob: float. dropout probability for attention_layer\n    intermediate_size: int. Size of intermediate hidden layer.\n    intermediate_act_fn: (optional) Activation function for the intermediate\n      layer.\n    initializer_range: float. Range of the weight initializer.\n    hidden_dropout_prob: (optional) float. Dropout probability of the hidden\n      layer.\n    use_einsum: bool. Whether to use einsum or reshape+matmul for dense layers\n\n  Returns:\n    layer output\n  \"\"\"\n\n  with tf.variable_scope(\"attention_1\"):\n    with tf.variable_scope(\"self\"):\n      attention_output = attention_layer(\n          from_tensor=layer_input,\n          to_tensor=layer_input,\n          attention_mask=attention_mask,\n          num_attention_heads=num_attention_heads,\n          attention_probs_dropout_prob=attention_probs_dropout_prob,\n          initializer_range=initializer_range,\n          use_einsum=use_einsum)\n\n    # Run a linear projection of `hidden_size` then add a residual\n    # with `layer_input`.\n    with tf.variable_scope(\"output\"):\n      attention_output = dense_layer_3d_proj(\n          attention_output,\n          hidden_size,\n          attention_head_size,\n          create_initializer(initializer_range),\n          None,\n          use_einsum=use_einsum,\n          name=\"dense\")\n      attention_output = dropout(attention_output, hidden_dropout_prob)\n  attention_output = layer_norm(attention_output + layer_input)\n  with tf.variable_scope(\"ffn_1\"):\n    with tf.variable_scope(\"intermediate\"):\n      intermediate_output = dense_layer_2d(\n          attention_output,\n          intermediate_size,\n          create_initializer(initializer_range),\n          intermediate_act_fn,\n          use_einsum=use_einsum,\n          num_attention_heads=num_attention_heads,\n          name=\"dense\")\n      with tf.variable_scope(\"output\"):\n        ffn_output = dense_layer_2d(\n            intermediate_output,\n            hidden_size,\n            create_initializer(initializer_range),\n            None,\n            use_einsum=use_einsum,\n            num_attention_heads=num_attention_heads,\n            name=\"dense\")\n      ffn_output = dropout(ffn_output, hidden_dropout_prob)\n  ffn_output = layer_norm(ffn_output + attention_output)\n  return ffn_output\n\n\ndef transformer_model(input_tensor,\n                      attention_mask=None,\n                      hidden_size=768,\n                      num_hidden_layers=12,\n                      num_hidden_groups=12,\n                      num_attention_heads=12,\n                      intermediate_size=3072,\n                      inner_group_num=1,\n                      intermediate_act_fn=\"gelu\",\n                      hidden_dropout_prob=0.1,\n                      attention_probs_dropout_prob=0.1,\n                      initializer_range=0.02,\n                      do_return_all_layers=False,\n                      use_einsum=True):\n  \"\"\"Multi-headed, multi-layer Transformer from \"Attention is All You Need\".\n\n  This is almost an exact implementation of the original Transformer encoder.\n\n  See the original paper:\n  https://arxiv.org/abs/1706.03762\n\n  Also see:\n  https://github.com/tensorflow/tensor2tensor/blob/master/tensor2tensor/models/transformer.py\n\n  Args:\n    input_tensor: float Tensor of shape [batch_size, seq_length, hidden_size].\n    attention_mask: (optional) int32 Tensor of shape [batch_size, seq_length],\n      with 1 for positions that can be attended to and 0 in positions that\n      should not be.\n    hidden_size: int. Hidden size of the Transformer.\n    num_hidden_layers: int. Number of layers (blocks) in the Transformer.\n    num_hidden_groups: int. Number of group for the hidden layers, parameters\n      in the same group are shared.\n    num_attention_heads: int. Number of attention heads in the Transformer.\n    intermediate_size: int. The size of the \"intermediate\" (a.k.a., feed\n      forward) layer.\n    inner_group_num: int, number of inner repetition of attention and ffn.\n    intermediate_act_fn: function. The non-linear activation function to apply\n      to the output of the intermediate/feed-forward layer.\n    hidden_dropout_prob: float. Dropout probability for the hidden layers.\n    attention_probs_dropout_prob: float. Dropout probability of the attention\n      probabilities.\n    initializer_range: float. Range of the initializer (stddev of truncated\n      normal).\n    do_return_all_layers: Whether to also return all layers or just the final\n      layer.\n    use_einsum: bool. Whether to use einsum or reshape+matmul for dense layers\n\n  Returns:\n    float Tensor of shape [batch_size, seq_length, hidden_size], the final\n    hidden layer of the Transformer.\n\n  Raises:\n    ValueError: A Tensor shape or parameter is invalid.\n  \"\"\"\n  if hidden_size % num_attention_heads != 0:\n    raise ValueError(\n        \"The hidden size (%d) is not a multiple of the number of attention \"\n        \"heads (%d)\" % (hidden_size, num_attention_heads))\n\n  attention_head_size = hidden_size // num_attention_heads\n  input_shape = get_shape_list(input_tensor, expected_rank=3)\n  input_width = input_shape[2]\n\n  all_layer_outputs = []\n  if input_width != hidden_size:\n    prev_output = dense_layer_2d(\n        input_tensor, hidden_size, create_initializer(initializer_range),\n        None, use_einsum=use_einsum, name=\"embedding_hidden_mapping_in\")\n  else:\n    prev_output = input_tensor\n  with tf.variable_scope(\"transformer\", reuse=tf.AUTO_REUSE):\n    for layer_idx in range(num_hidden_layers):\n      group_idx = int(layer_idx / num_hidden_layers * num_hidden_groups)\n      with tf.variable_scope(\"group_%d\" % group_idx):\n        with tf.name_scope(\"layer_%d\" % layer_idx):\n          layer_output = prev_output\n          for inner_group_idx in range(inner_group_num):\n            with tf.variable_scope(\"inner_group_%d\" % inner_group_idx):\n              layer_output = attention_ffn_block(\n                  layer_input=layer_output,\n                  hidden_size=hidden_size,\n                  attention_mask=attention_mask,\n                  num_attention_heads=num_attention_heads,\n                  attention_head_size=attention_head_size,\n                  attention_probs_dropout_prob=attention_probs_dropout_prob,\n                  intermediate_size=intermediate_size,\n                  intermediate_act_fn=intermediate_act_fn,\n                  initializer_range=initializer_range,\n                  hidden_dropout_prob=hidden_dropout_prob,\n                  use_einsum=use_einsum)\n              prev_output = layer_output\n              all_layer_outputs.append(layer_output)\n  if do_return_all_layers:\n    return all_layer_outputs\n  else:\n    return all_layer_outputs[-1]\n\n\ndef get_shape_list(tensor, expected_rank=None, name=None):\n  \"\"\"Returns a list of the shape of tensor, preferring static dimensions.\n\n  Args:\n    tensor: A tf.Tensor object to find the shape of.\n    expected_rank: (optional) int. The expected rank of `tensor`. If this is\n      specified and the `tensor` has a different rank, and exception will be\n      thrown.\n    name: Optional name of the tensor for the error message.\n\n  Returns:\n    A list of dimensions of the shape of tensor. All static dimensions will\n    be returned as python integers, and dynamic dimensions will be returned\n    as tf.Tensor scalars.\n  \"\"\"\n  if name is None:\n    name = tensor.name\n\n  if expected_rank is not None:\n    assert_rank(tensor, expected_rank, name)\n\n  shape = tensor.shape.as_list()\n\n  non_static_indexes = []\n  for (index, dim) in enumerate(shape):\n    if dim is None:\n      non_static_indexes.append(index)\n\n  if not non_static_indexes:\n    return shape\n\n  dyn_shape = tf.shape(tensor)\n  for index in non_static_indexes:\n    shape[index] = dyn_shape[index]\n  return shape\n\n\ndef reshape_to_matrix(input_tensor):\n  \"\"\"Reshapes a >= rank 2 tensor to a rank 2 tensor (i.e., a matrix).\"\"\"\n  ndims = input_tensor.shape.ndims\n  if ndims < 2:\n    raise ValueError(\"Input tensor must have at least rank 2. Shape = %s\" %\n                     (input_tensor.shape))\n  if ndims == 2:\n    return input_tensor\n\n  width = input_tensor.shape[-1]\n  output_tensor = tf.reshape(input_tensor, [-1, width])\n  return output_tensor\n\n\ndef reshape_from_matrix(output_tensor, orig_shape_list):\n  \"\"\"Reshapes a rank 2 tensor back to its original rank >= 2 tensor.\"\"\"\n  if len(orig_shape_list) == 2:\n    return output_tensor\n\n  output_shape = get_shape_list(output_tensor)\n\n  orig_dims = orig_shape_list[0:-1]\n  width = output_shape[-1]\n\n  return tf.reshape(output_tensor, orig_dims + [width])\n\n\ndef assert_rank(tensor, expected_rank, name=None):\n  \"\"\"Raises an exception if the tensor rank is not of the expected rank.\n\n  Args:\n    tensor: A tf.Tensor to check the rank of.\n    expected_rank: Python integer or list of integers, expected rank.\n    name: Optional name of the tensor for the error message.\n\n  Raises:\n    ValueError: If the expected shape doesn't match the actual shape.\n  \"\"\"\n  if name is None:\n    name = tensor.name\n\n  expected_rank_dict = {}\n  if isinstance(expected_rank, six.integer_types):\n    expected_rank_dict[expected_rank] = True\n  else:\n    for x in expected_rank:\n      expected_rank_dict[x] = True\n\n  actual_rank = tensor.shape.ndims\n  if actual_rank not in expected_rank_dict:\n    scope_name = tf.get_variable_scope().name\n    raise ValueError(\n        \"For the tensor `%s` in scope `%s`, the actual rank \"\n        \"`%d` (shape = %s) is not equal to the expected rank `%s`\" %\n        (name, scope_name, actual_rank, str(tensor.shape), str(expected_rank)))\n"
        },
        {
          "name": "modeling_test.py",
          "type": "blob",
          "size": 10.2744140625,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport json\nimport random\nimport re\n\nfrom albert import modeling\nimport numpy as np\nimport six\nfrom six.moves import range\nimport tensorflow.compat.v1 as tf\n\n\nclass AlbertModelTest(tf.test.TestCase):\n\n  class AlbertModelTester(object):\n\n    def __init__(self,\n                 parent,\n                 batch_size=13,\n                 seq_length=7,\n                 is_training=True,\n                 use_input_mask=True,\n                 use_token_type_ids=True,\n                 vocab_size=99,\n                 embedding_size=32,\n                 hidden_size=32,\n                 num_hidden_layers=5,\n                 num_attention_heads=4,\n                 intermediate_size=37,\n                 hidden_act=\"gelu\",\n                 hidden_dropout_prob=0.1,\n                 attention_probs_dropout_prob=0.1,\n                 max_position_embeddings=512,\n                 type_vocab_size=16,\n                 initializer_range=0.02,\n                 scope=None):\n      self.parent = parent\n      self.batch_size = batch_size\n      self.seq_length = seq_length\n      self.is_training = is_training\n      self.use_input_mask = use_input_mask\n      self.use_token_type_ids = use_token_type_ids\n      self.vocab_size = vocab_size\n      self.embedding_size = embedding_size\n      self.hidden_size = hidden_size\n      self.num_hidden_layers = num_hidden_layers\n      self.num_attention_heads = num_attention_heads\n      self.intermediate_size = intermediate_size\n      self.hidden_act = hidden_act\n      self.hidden_dropout_prob = hidden_dropout_prob\n      self.attention_probs_dropout_prob = attention_probs_dropout_prob\n      self.max_position_embeddings = max_position_embeddings\n      self.type_vocab_size = type_vocab_size\n      self.initializer_range = initializer_range\n      self.scope = scope\n\n    def create_model(self):\n      input_ids = AlbertModelTest.ids_tensor([self.batch_size, self.seq_length],\n                                             self.vocab_size)\n\n      input_mask = None\n      if self.use_input_mask:\n        input_mask = AlbertModelTest.ids_tensor(\n            [self.batch_size, self.seq_length], vocab_size=2)\n\n      token_type_ids = None\n      if self.use_token_type_ids:\n        token_type_ids = AlbertModelTest.ids_tensor(\n            [self.batch_size, self.seq_length], self.type_vocab_size)\n\n      config = modeling.AlbertConfig(\n          vocab_size=self.vocab_size,\n          embedding_size=self.embedding_size,\n          hidden_size=self.hidden_size,\n          num_hidden_layers=self.num_hidden_layers,\n          num_attention_heads=self.num_attention_heads,\n          intermediate_size=self.intermediate_size,\n          hidden_act=self.hidden_act,\n          hidden_dropout_prob=self.hidden_dropout_prob,\n          attention_probs_dropout_prob=self.attention_probs_dropout_prob,\n          max_position_embeddings=self.max_position_embeddings,\n          type_vocab_size=self.type_vocab_size,\n          initializer_range=self.initializer_range)\n\n      model = modeling.AlbertModel(\n          config=config,\n          is_training=self.is_training,\n          input_ids=input_ids,\n          input_mask=input_mask,\n          token_type_ids=token_type_ids,\n          scope=self.scope)\n\n      outputs = {\n          \"embedding_output\": model.get_embedding_output(),\n          \"sequence_output\": model.get_sequence_output(),\n          \"pooled_output\": model.get_pooled_output(),\n          \"all_encoder_layers\": model.get_all_encoder_layers(),\n      }\n      return outputs\n\n    def check_output(self, result):\n      self.parent.assertAllEqual(\n          result[\"embedding_output\"].shape,\n          [self.batch_size, self.seq_length, self.embedding_size])\n\n      self.parent.assertAllEqual(\n          result[\"sequence_output\"].shape,\n          [self.batch_size, self.seq_length, self.hidden_size])\n\n      self.parent.assertAllEqual(result[\"pooled_output\"].shape,\n                                 [self.batch_size, self.hidden_size])\n\n  def test_default(self):\n    self.run_tester(AlbertModelTest.AlbertModelTester(self))\n\n  def test_config_to_json_string(self):\n    config = modeling.AlbertConfig(vocab_size=99, hidden_size=37)\n    obj = json.loads(config.to_json_string())\n    self.assertEqual(obj[\"vocab_size\"], 99)\n    self.assertEqual(obj[\"hidden_size\"], 37)\n\n  def test_einsum_via_matmul(self):\n    batch_size = 8\n    seq_length = 12\n    num_attention_heads = 3\n    head_size = 6\n    hidden_size = 10\n\n    input_tensor = np.random.uniform(0, 1,\n                                     [batch_size, seq_length, hidden_size])\n    input_tensor = tf.constant(input_tensor, dtype=tf.float32)\n    w = np.random.uniform(0, 1, [hidden_size, num_attention_heads, head_size])\n    w = tf.constant(w, dtype=tf.float32)\n    ret1 = tf.einsum(\"BFH,HND->BFND\", input_tensor, w)\n    ret2 = modeling.einsum_via_matmul(input_tensor, w, 1)\n    self.assertAllClose(ret1, ret2)\n\n    input_tensor = np.random.uniform(0, 1,\n                                     [batch_size, seq_length,\n                                      num_attention_heads, head_size])\n    input_tensor = tf.constant(input_tensor, dtype=tf.float32)\n    w = np.random.uniform(0, 1, [num_attention_heads, head_size, hidden_size])\n    w = tf.constant(w, dtype=tf.float32)\n    ret1 = tf.einsum(\"BFND,NDH->BFH\", input_tensor, w)\n    ret2 = modeling.einsum_via_matmul(input_tensor, w, 2)\n    self.assertAllClose(ret1, ret2)\n\n  def run_tester(self, tester):\n    with self.test_session() as sess:\n      ops = tester.create_model()\n      init_op = tf.group(tf.global_variables_initializer(),\n                         tf.local_variables_initializer())\n      sess.run(init_op)\n      output_result = sess.run(ops)\n      tester.check_output(output_result)\n\n      self.assert_all_tensors_reachable(sess, [init_op, ops])\n\n  @classmethod\n  def ids_tensor(cls, shape, vocab_size, rng=None, name=None):\n    \"\"\"Creates a random int32 tensor of the shape within the vocab size.\"\"\"\n    if rng is None:\n      rng = random.Random()\n\n    total_dims = 1\n    for dim in shape:\n      total_dims *= dim\n\n    values = []\n    for _ in range(total_dims):\n      values.append(rng.randint(0, vocab_size - 1))\n\n    return tf.constant(value=values, dtype=tf.int32, shape=shape, name=name)\n\n  def assert_all_tensors_reachable(self, sess, outputs):\n    \"\"\"Checks that all the tensors in the graph are reachable from outputs.\"\"\"\n    graph = sess.graph\n\n    ignore_strings = [\n        \"^.*/assert_less_equal/.*$\",\n        \"^.*/dilation_rate$\",\n        \"^.*/Tensordot/concat$\",\n        \"^.*/Tensordot/concat/axis$\",\n        \"^testing/.*$\",\n    ]\n\n    ignore_regexes = [re.compile(x) for x in ignore_strings]\n\n    unreachable = self.get_unreachable_ops(graph, outputs)\n    filtered_unreachable = []\n    for x in unreachable:\n      do_ignore = False\n      for r in ignore_regexes:\n        m = r.match(six.ensure_str(x.name))\n        if m is not None:\n          do_ignore = True\n      if do_ignore:\n        continue\n      filtered_unreachable.append(x)\n    unreachable = filtered_unreachable\n\n    self.assertEqual(\n        len(unreachable), 0, \"The following ops are unreachable: %s\" %\n        (\" \".join([x.name for x in unreachable])))\n\n  @classmethod\n  def get_unreachable_ops(cls, graph, outputs):\n    \"\"\"Finds all of the tensors in graph that are unreachable from outputs.\"\"\"\n    outputs = cls.flatten_recursive(outputs)\n    output_to_op = collections.defaultdict(list)\n    op_to_all = collections.defaultdict(list)\n    assign_out_to_in = collections.defaultdict(list)\n\n    for op in graph.get_operations():\n      for x in op.inputs:\n        op_to_all[op.name].append(x.name)\n      for y in op.outputs:\n        output_to_op[y.name].append(op.name)\n        op_to_all[op.name].append(y.name)\n      if str(op.type) == \"Assign\":\n        for y in op.outputs:\n          for x in op.inputs:\n            assign_out_to_in[y.name].append(x.name)\n\n    assign_groups = collections.defaultdict(list)\n    for out_name in assign_out_to_in.keys():\n      name_group = assign_out_to_in[out_name]\n      for n1 in name_group:\n        assign_groups[n1].append(out_name)\n        for n2 in name_group:\n          if n1 != n2:\n            assign_groups[n1].append(n2)\n\n    seen_tensors = {}\n    stack = [x.name for x in outputs]\n    while stack:\n      name = stack.pop()\n      if name in seen_tensors:\n        continue\n      seen_tensors[name] = True\n\n      if name in output_to_op:\n        for op_name in output_to_op[name]:\n          if op_name in op_to_all:\n            for input_name in op_to_all[op_name]:\n              if input_name not in stack:\n                stack.append(input_name)\n\n      expanded_names = []\n      if name in assign_groups:\n        for assign_name in assign_groups[name]:\n          expanded_names.append(assign_name)\n\n      for expanded_name in expanded_names:\n        if expanded_name not in stack:\n          stack.append(expanded_name)\n\n    unreachable_ops = []\n    for op in graph.get_operations():\n      is_unreachable = False\n      all_names = [x.name for x in op.inputs] + [x.name for x in op.outputs]\n      for name in all_names:\n        if name not in seen_tensors:\n          is_unreachable = True\n      if is_unreachable:\n        unreachable_ops.append(op)\n    return unreachable_ops\n\n  @classmethod\n  def flatten_recursive(cls, item):\n    \"\"\"Flattens (potentially nested) a tuple/dictionary/list to a list.\"\"\"\n    output = []\n    if isinstance(item, list):\n      output.extend(item)\n    elif isinstance(item, tuple):\n      output.extend(list(item))\n    elif isinstance(item, dict):\n      for (_, v) in six.iteritems(item):\n        output.append(v)\n    else:\n      return [item]\n\n    flat_output = []\n    for x in output:\n      flat_output.extend(cls.flatten_recursive(x))\n    return flat_output\n\n\nif __name__ == \"__main__\":\n  tf.test.main()\n"
        },
        {
          "name": "optimization.py",
          "type": "blob",
          "size": 7.64453125,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Functions and classes related to optimization (weight updates).\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nimport re\nfrom albert import lamb_optimizer\nimport six\nfrom six.moves import zip\nimport tensorflow.compat.v1 as tf\nfrom tensorflow.contrib import tpu as contrib_tpu\n\n\ndef create_optimizer(loss, init_lr, num_train_steps, num_warmup_steps, use_tpu,\n                     optimizer=\"adamw\", poly_power=1.0, start_warmup_step=0,\n                     colocate_gradients_with_ops=False, excluded_tvars=None):\n  \"\"\"Creates an optimizer training op.\"\"\"\n  global_step = tf.train.get_or_create_global_step()\n\n  learning_rate = tf.constant(value=init_lr, shape=[], dtype=tf.float32)\n\n  # Implements linear decay of the learning rate.\n  learning_rate = tf.train.polynomial_decay(\n      learning_rate,\n      global_step,\n      num_train_steps,\n      end_learning_rate=0.0,\n      power=poly_power,\n      cycle=False)\n\n  # Implements linear warmup. I.e., if global_step - start_warmup_step <\n  # num_warmup_steps, the learning rate will be\n  # `(global_step - start_warmup_step)/num_warmup_steps * init_lr`.\n  if num_warmup_steps:\n    tf.logging.info(\"++++++ warmup starts at step \" + str(start_warmup_step)\n                    + \", for \" + str(num_warmup_steps) + \" steps ++++++\")\n    global_steps_int = tf.cast(global_step, tf.int32)\n    start_warm_int = tf.constant(start_warmup_step, dtype=tf.int32)\n    global_steps_int = global_steps_int - start_warm_int\n    warmup_steps_int = tf.constant(num_warmup_steps, dtype=tf.int32)\n\n    global_steps_float = tf.cast(global_steps_int, tf.float32)\n    warmup_steps_float = tf.cast(warmup_steps_int, tf.float32)\n\n    warmup_percent_done = global_steps_float / warmup_steps_float\n    warmup_learning_rate = init_lr * warmup_percent_done\n\n    is_warmup = tf.cast(global_steps_int < warmup_steps_int, tf.float32)\n    learning_rate = (\n        (1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate)\n\n  # It is OK that you use this optimizer for finetuning, since this\n  # is how the model was trained (note that the Adam m/v variables are NOT\n  # loaded from init_checkpoint.)\n  # It is OK to use AdamW in the finetuning even the model is trained by LAMB.\n  # As report in the Bert pulic github, the learning rate for SQuAD 1.1 finetune\n  # is 3e-5, 4e-5 or 5e-5. For LAMB, the users can use 3e-4, 4e-4,or 5e-4 for a\n  # batch size of 64 in the finetune.\n  if optimizer == \"adamw\":\n    tf.logging.info(\"using adamw\")\n    optimizer = AdamWeightDecayOptimizer(\n        learning_rate=learning_rate,\n        weight_decay_rate=0.01,\n        beta_1=0.9,\n        beta_2=0.999,\n        epsilon=1e-6,\n        exclude_from_weight_decay=[\"LayerNorm\", \"layer_norm\", \"bias\"])\n  elif optimizer == \"lamb\":\n    tf.logging.info(\"using lamb\")\n    optimizer = lamb_optimizer.LAMBOptimizer(\n        learning_rate=learning_rate,\n        weight_decay_rate=0.01,\n        beta_1=0.9,\n        beta_2=0.999,\n        epsilon=1e-6,\n        exclude_from_weight_decay=[\"LayerNorm\", \"layer_norm\", \"bias\"])\n  else:\n    raise ValueError(\"Not supported optimizer: \", optimizer)\n\n  if use_tpu:\n    optimizer = contrib_tpu.CrossShardOptimizer(optimizer)\n\n  tvars = tf.trainable_variables()\n  for tvar in tvars:\n    if excluded_tvars and tvar.name in excluded_tvars:\n      tvars.remove(tvar)\n\n  grads = tf.gradients(\n      loss, tvars, colocate_gradients_with_ops=colocate_gradients_with_ops)\n\n  # This is how the model was pre-trained.\n  (grads, _) = tf.clip_by_global_norm(grads, clip_norm=1.0)\n\n  train_op = optimizer.apply_gradients(\n      list(zip(grads, tvars)), global_step=global_step)\n\n  # Normally the global step update is done inside of `apply_gradients`.\n  # However, neither `AdamWeightDecayOptimizer` nor `LAMBOptimizer` do this.\n  # But if you use a different optimizer, you should probably take this line\n  # out.\n  new_global_step = global_step + 1\n  train_op = tf.group(train_op, [global_step.assign(new_global_step)])\n  return train_op\n\n\nclass AdamWeightDecayOptimizer(tf.train.Optimizer):\n  \"\"\"A basic Adam optimizer that includes \"correct\" L2 weight decay.\"\"\"\n\n  def __init__(self,\n               learning_rate,\n               weight_decay_rate=0.0,\n               beta_1=0.9,\n               beta_2=0.999,\n               epsilon=1e-6,\n               exclude_from_weight_decay=None,\n               name=\"AdamWeightDecayOptimizer\"):\n    \"\"\"Constructs a AdamWeightDecayOptimizer.\"\"\"\n    super(AdamWeightDecayOptimizer, self).__init__(False, name)\n\n    self.learning_rate = learning_rate\n    self.weight_decay_rate = weight_decay_rate\n    self.beta_1 = beta_1\n    self.beta_2 = beta_2\n    self.epsilon = epsilon\n    self.exclude_from_weight_decay = exclude_from_weight_decay\n\n  def apply_gradients(self, grads_and_vars, global_step=None, name=None):\n    \"\"\"See base class.\"\"\"\n    assignments = []\n    for (grad, param) in grads_and_vars:\n      if grad is None or param is None:\n        continue\n\n      param_name = self._get_variable_name(param.name)\n\n      m = tf.get_variable(\n          name=six.ensure_str(param_name) + \"/adam_m\",\n          shape=param.shape.as_list(),\n          dtype=tf.float32,\n          trainable=False,\n          initializer=tf.zeros_initializer())\n      v = tf.get_variable(\n          name=six.ensure_str(param_name) + \"/adam_v\",\n          shape=param.shape.as_list(),\n          dtype=tf.float32,\n          trainable=False,\n          initializer=tf.zeros_initializer())\n\n      # Standard Adam update.\n      next_m = (\n          tf.multiply(self.beta_1, m) + tf.multiply(1.0 - self.beta_1, grad))\n      next_v = (\n          tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2,\n                                                    tf.square(grad)))\n\n      update = next_m / (tf.sqrt(next_v) + self.epsilon)\n\n      # Just adding the square of the weights to the loss function is *not*\n      # the correct way of using L2 regularization/weight decay with Adam,\n      # since that will interact with the m and v parameters in strange ways.\n      #\n      # Instead we want ot decay the weights in a manner that doesn't interact\n      # with the m/v parameters. This is equivalent to adding the square\n      # of the weights to the loss with plain (non-momentum) SGD.\n      if self._do_use_weight_decay(param_name):\n        update += self.weight_decay_rate * param\n\n      update_with_lr = self.learning_rate * update\n\n      next_param = param - update_with_lr\n\n      assignments.extend(\n          [param.assign(next_param),\n           m.assign(next_m),\n           v.assign(next_v)])\n    return tf.group(*assignments, name=name)\n\n  def _do_use_weight_decay(self, param_name):\n    \"\"\"Whether to use L2 weight decay for `param_name`.\"\"\"\n    if not self.weight_decay_rate:\n      return False\n    if self.exclude_from_weight_decay:\n      for r in self.exclude_from_weight_decay:\n        if re.search(r, param_name) is not None:\n          return False\n    return True\n\n  def _get_variable_name(self, param_name):\n    \"\"\"Get the variable name from the tensor name.\"\"\"\n    m = re.match(\"^(.*):\\\\d+$\", six.ensure_str(param_name))\n    if m is not None:\n      param_name = m.group(1)\n    return param_name\n"
        },
        {
          "name": "optimization_test.py",
          "type": "blob",
          "size": 1.7509765625,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom albert import optimization\nfrom six.moves import range\nfrom six.moves import zip\nimport tensorflow.compat.v1 as tf\n\n\nclass OptimizationTest(tf.test.TestCase):\n\n  def test_adam(self):\n    with self.test_session() as sess:\n      w = tf.get_variable(\n          \"w\",\n          shape=[3],\n          initializer=tf.constant_initializer([0.1, -0.2, -0.1]))\n      x = tf.constant([0.4, 0.2, -0.5])\n      loss = tf.reduce_mean(tf.square(x - w))\n      tvars = tf.trainable_variables()\n      grads = tf.gradients(loss, tvars)\n      global_step = tf.train.get_or_create_global_step()\n      optimizer = optimization.AdamWeightDecayOptimizer(learning_rate=0.2)\n      train_op = optimizer.apply_gradients(list(zip(grads, tvars)), global_step)\n      init_op = tf.group(tf.global_variables_initializer(),\n                         tf.local_variables_initializer())\n      sess.run(init_op)\n      for _ in range(100):\n        sess.run(train_op)\n      w_np = sess.run(w)\n      self.assertAllClose(w_np.flat, [0.4, 0.2, -0.5], rtol=1e-2, atol=1e-2)\n\n\nif __name__ == \"__main__\":\n  tf.test.main()\n"
        },
        {
          "name": "race_utils.py",
          "type": "blob",
          "size": 15.40234375,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Utility functions for RACE dataset.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport json\nimport os\nfrom albert import classifier_utils\nfrom albert import fine_tuning_utils\nfrom albert import modeling\nfrom albert import optimization\nfrom albert import tokenization\nimport tensorflow.compat.v1 as tf\nfrom tensorflow.compat.v1 import estimator as tf_estimator\nfrom tensorflow.contrib import tpu as contrib_tpu\n\n\nclass InputExample(object):\n  \"\"\"A single training/test example for the RACE dataset.\"\"\"\n\n  def __init__(self,\n               example_id,\n               context_sentence,\n               start_ending,\n               endings,\n               label=None):\n    self.example_id = example_id\n    self.context_sentence = context_sentence\n    self.start_ending = start_ending\n    self.endings = endings\n    self.label = label\n\n  def __str__(self):\n    return self.__repr__()\n\n  def __repr__(self):\n    l = [\n        \"id: {}\".format(self.example_id),\n        \"context_sentence: {}\".format(self.context_sentence),\n        \"start_ending: {}\".format(self.start_ending),\n        \"ending_0: {}\".format(self.endings[0]),\n        \"ending_1: {}\".format(self.endings[1]),\n        \"ending_2: {}\".format(self.endings[2]),\n        \"ending_3: {}\".format(self.endings[3]),\n    ]\n\n    if self.label is not None:\n      l.append(\"label: {}\".format(self.label))\n\n    return \", \".join(l)\n\n\nclass RaceProcessor(object):\n  \"\"\"Processor for the RACE data set.\"\"\"\n\n  def __init__(self, use_spm, do_lower_case, high_only, middle_only):\n    super(RaceProcessor, self).__init__()\n    self.use_spm = use_spm\n    self.do_lower_case = do_lower_case\n    self.high_only = high_only\n    self.middle_only = middle_only\n\n  def get_train_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for the train set.\"\"\"\n    return self.read_examples(\n        os.path.join(data_dir, \"RACE\", \"train\"))\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for the dev set.\"\"\"\n    return self.read_examples(\n        os.path.join(data_dir, \"RACE\", \"dev\"))\n\n  def get_test_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for prediction.\"\"\"\n    return self.read_examples(\n        os.path.join(data_dir, \"RACE\", \"test\"))\n\n  def get_labels(self):\n    \"\"\"Gets the list of labels for this data set.\"\"\"\n    return [\"A\", \"B\", \"C\", \"D\"]\n\n  def process_text(self, text):\n    if self.use_spm:\n      return tokenization.preprocess_text(text, lower=self.do_lower_case)\n    else:\n      return tokenization.convert_to_unicode(text)\n\n  def read_examples(self, data_dir):\n    \"\"\"Read examples from RACE json files.\"\"\"\n    examples = []\n    for level in [\"middle\", \"high\"]:\n      if level == \"middle\" and self.high_only: continue\n      if level == \"high\" and self.middle_only: continue\n      cur_dir = os.path.join(data_dir, level)\n\n      cur_path = os.path.join(cur_dir, \"all.txt\")\n      with tf.gfile.Open(cur_path) as f:\n        for line in f:\n          cur_data = json.loads(line.strip())\n\n          answers = cur_data[\"answers\"]\n          options = cur_data[\"options\"]\n          questions = cur_data[\"questions\"]\n          context = self.process_text(cur_data[\"article\"])\n\n          for i in range(len(answers)):\n            label = ord(answers[i]) - ord(\"A\")\n            qa_list = []\n\n            question = self.process_text(questions[i])\n            for j in range(4):\n              option = self.process_text(options[i][j])\n\n              if \"_\" in question:\n                qa_cat = question.replace(\"_\", option)\n              else:\n                qa_cat = \" \".join([question, option])\n\n              qa_list.append(qa_cat)\n\n            examples.append(\n                InputExample(\n                    example_id=cur_data[\"id\"],\n                    context_sentence=context,\n                    start_ending=None,\n                    endings=[qa_list[0], qa_list[1], qa_list[2], qa_list[3]],\n                    label=label\n                )\n            )\n\n    return examples\n\n\ndef convert_single_example(example_index, example, label_size, max_seq_length,\n                           tokenizer, max_qa_length):\n  \"\"\"Loads a data file into a list of `InputBatch`s.\"\"\"\n\n  # RACE is a multiple choice task. To perform this task using AlBERT,\n  # we will use the formatting proposed in \"Improving Language\n  # Understanding by Generative Pre-Training\" and suggested by\n  # @jacobdevlin-google in this issue\n  # https://github.com/google-research/bert/issues/38.\n  #\n  # Each choice will correspond to a sample on which we run the\n  # inference. For a given RACE example, we will create the 4\n  # following inputs:\n  # - [CLS] context [SEP] choice_1 [SEP]\n  # - [CLS] context [SEP] choice_2 [SEP]\n  # - [CLS] context [SEP] choice_3 [SEP]\n  # - [CLS] context [SEP] choice_4 [SEP]\n  # The model will output a single value for each input. To get the\n  # final decision of the model, we will run a softmax over these 4\n  # outputs.\n  if isinstance(example, classifier_utils.PaddingInputExample):\n    return classifier_utils.InputFeatures(\n        example_id=0,\n        input_ids=[[0] * max_seq_length] * label_size,\n        input_mask=[[0] * max_seq_length] * label_size,\n        segment_ids=[[0] * max_seq_length] * label_size,\n        label_id=0,\n        is_real_example=False)\n  else:\n    context_tokens = tokenizer.tokenize(example.context_sentence)\n    if example.start_ending is not None:\n      start_ending_tokens = tokenizer.tokenize(example.start_ending)\n\n    all_input_tokens = []\n    all_input_ids = []\n    all_input_mask = []\n    all_segment_ids = []\n    for ending in example.endings:\n      # We create a copy of the context tokens in order to be\n      # able to shrink it according to ending_tokens\n      context_tokens_choice = context_tokens[:]\n      if example.start_ending is not None:\n        ending_tokens = start_ending_tokens + tokenizer.tokenize(ending)\n      else:\n        ending_tokens = tokenizer.tokenize(ending)\n      # Modifies `context_tokens_choice` and `ending_tokens` in\n      # place so that the total length is less than the\n      # specified length.  Account for [CLS], [SEP], [SEP] with\n      # \"- 3\"\n      ending_tokens = ending_tokens[- max_qa_length:]\n\n      if len(context_tokens_choice) + len(ending_tokens) > max_seq_length - 3:\n        context_tokens_choice = context_tokens_choice[: (\n            max_seq_length - 3 - len(ending_tokens))]\n      tokens = [\"[CLS]\"] + context_tokens_choice + (\n          [\"[SEP]\"] + ending_tokens + [\"[SEP]\"])\n      segment_ids = [0] * (len(context_tokens_choice) + 2) + [1] * (\n          len(ending_tokens) + 1)\n\n      input_ids = tokenizer.convert_tokens_to_ids(tokens)\n      input_mask = [1] * len(input_ids)\n\n      # Zero-pad up to the sequence length.\n      padding = [0] * (max_seq_length - len(input_ids))\n      input_ids += padding\n      input_mask += padding\n      segment_ids += padding\n\n      assert len(input_ids) == max_seq_length\n      assert len(input_mask) == max_seq_length\n      assert len(segment_ids) == max_seq_length\n\n      all_input_tokens.append(tokens)\n      all_input_ids.append(input_ids)\n      all_input_mask.append(input_mask)\n      all_segment_ids.append(segment_ids)\n\n    label = example.label\n    if example_index < 5:\n      tf.logging.info(\"*** Example ***\")\n      tf.logging.info(\"id: {}\".format(example.example_id))\n      for choice_idx, (tokens, input_ids, input_mask, segment_ids) in \\\n           enumerate(zip(all_input_tokens, all_input_ids, all_input_mask, all_segment_ids)):\n        tf.logging.info(\"choice: {}\".format(choice_idx))\n        tf.logging.info(\"tokens: {}\".format(\" \".join(tokens)))\n        tf.logging.info(\n            \"input_ids: {}\".format(\" \".join(map(str, input_ids))))\n        tf.logging.info(\n            \"input_mask: {}\".format(\" \".join(map(str, input_mask))))\n        tf.logging.info(\n            \"segment_ids: {}\".format(\" \".join(map(str, segment_ids))))\n        tf.logging.info(\"label: {}\".format(label))\n\n    return classifier_utils.InputFeatures(\n        example_id=example.example_id,\n        input_ids=all_input_ids,\n        input_mask=all_input_mask,\n        segment_ids=all_segment_ids,\n        label_id=label\n    )\n\n\ndef file_based_convert_examples_to_features(\n    examples, label_list, max_seq_length, tokenizer,\n    output_file, max_qa_length):\n  \"\"\"Convert a set of `InputExample`s to a TFRecord file.\"\"\"\n\n  writer = tf.python_io.TFRecordWriter(output_file)\n\n  for (ex_index, example) in enumerate(examples):\n    if ex_index % 10000 == 0:\n      tf.logging.info(\"Writing example %d of %d\" % (ex_index, len(examples)))\n\n    feature = convert_single_example(ex_index, example, len(label_list),\n                                     max_seq_length, tokenizer, max_qa_length)\n\n    def create_int_feature(values):\n      f = tf.train.Feature(int64_list=tf.train.Int64List(value=list(values)))\n      return f\n\n    features = collections.OrderedDict()\n    features[\"input_ids\"] = create_int_feature(sum(feature.input_ids, []))\n    features[\"input_mask\"] = create_int_feature(sum(feature.input_mask, []))\n    features[\"segment_ids\"] = create_int_feature(sum(feature.segment_ids, []))\n    features[\"label_ids\"] = create_int_feature([feature.label_id])\n    features[\"is_real_example\"] = create_int_feature(\n        [int(feature.is_real_example)])\n\n    tf_example = tf.train.Example(features=tf.train.Features(feature=features))\n    writer.write(tf_example.SerializeToString())\n  writer.close()\n\n\ndef create_model(albert_config, is_training, input_ids, input_mask, segment_ids,\n                 labels, num_labels, use_one_hot_embeddings, max_seq_length,\n                 dropout_prob, hub_module):\n  \"\"\"Creates a classification model.\"\"\"\n  bsz_per_core = tf.shape(input_ids)[0]\n\n  input_ids = tf.reshape(input_ids, [bsz_per_core * num_labels, max_seq_length])\n  input_mask = tf.reshape(input_mask,\n                          [bsz_per_core * num_labels, max_seq_length])\n  token_type_ids = tf.reshape(segment_ids,\n                              [bsz_per_core * num_labels, max_seq_length])\n\n  (output_layer, _) = fine_tuning_utils.create_albert(\n      albert_config=albert_config,\n      is_training=is_training,\n      input_ids=input_ids,\n      input_mask=input_mask,\n      segment_ids=token_type_ids,\n      use_one_hot_embeddings=use_one_hot_embeddings,\n      use_einsum=True,\n      hub_module=hub_module)\n\n  hidden_size = output_layer.shape[-1].value\n\n  output_weights = tf.get_variable(\n      \"output_weights\", [1, hidden_size],\n      initializer=tf.truncated_normal_initializer(stddev=0.02))\n\n  output_bias = tf.get_variable(\n      \"output_bias\", [1],\n      initializer=tf.zeros_initializer())\n\n  with tf.variable_scope(\"loss\"):\n    if is_training:\n      # I.e., 0.1 dropout\n      output_layer = tf.nn.dropout(\n          output_layer, keep_prob=1 - dropout_prob)\n\n    logits = tf.matmul(output_layer, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    logits = tf.reshape(logits, [bsz_per_core, num_labels])\n    probabilities = tf.nn.softmax(logits, axis=-1)\n    predictions = tf.argmax(probabilities, axis=-1, output_type=tf.int32)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n\n    one_hot_labels = tf.one_hot(\n        labels, depth=tf.cast(num_labels, dtype=tf.int32), dtype=tf.float32)\n\n    per_example_loss = -tf.reduce_sum(one_hot_labels * log_probs, axis=-1)\n    loss = tf.reduce_mean(per_example_loss)\n\n    return (loss, per_example_loss, probabilities, logits, predictions)\n\n\ndef model_fn_builder(albert_config, num_labels, init_checkpoint, learning_rate,\n                     num_train_steps, num_warmup_steps, use_tpu,\n                     use_one_hot_embeddings, max_seq_length, dropout_prob,\n                     hub_module):\n  \"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"\n\n  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n    \"\"\"The `model_fn` for TPUEstimator.\"\"\"\n\n    tf.logging.info(\"*** Features ***\")\n    for name in sorted(features.keys()):\n      tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\n\n    input_ids = features[\"input_ids\"]\n    input_mask = features[\"input_mask\"]\n    segment_ids = features[\"segment_ids\"]\n    label_ids = features[\"label_ids\"]\n    is_real_example = None\n    if \"is_real_example\" in features:\n      is_real_example = tf.cast(features[\"is_real_example\"], dtype=tf.float32)\n    else:\n      is_real_example = tf.ones(tf.shape(label_ids), dtype=tf.float32)\n\n    is_training = (mode == tf_estimator.ModeKeys.TRAIN)\n\n    (total_loss, per_example_loss, probabilities, logits, predictions) = \\\n        create_model(albert_config, is_training, input_ids, input_mask,\n                     segment_ids, label_ids, num_labels,\n                     use_one_hot_embeddings, max_seq_length, dropout_prob,\n                     hub_module)\n\n    tvars = tf.trainable_variables()\n    initialized_variable_names = {}\n    scaffold_fn = None\n    if init_checkpoint:\n      (assignment_map, initialized_variable_names\n      ) = modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)\n      if use_tpu:\n\n        def tpu_scaffold():\n          tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n          return tf.train.Scaffold()\n\n        scaffold_fn = tpu_scaffold\n      else:\n        tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n\n    tf.logging.info(\"**** Trainable Variables ****\")\n    for var in tvars:\n      init_string = \"\"\n      if var.name in initialized_variable_names:\n        init_string = \", *INIT_FROM_CKPT*\"\n      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                      init_string)\n\n    output_spec = None\n    if mode == tf_estimator.ModeKeys.TRAIN:\n\n      train_op = optimization.create_optimizer(\n          total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)\n\n      output_spec = contrib_tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          train_op=train_op,\n          scaffold_fn=scaffold_fn)\n    elif mode == tf_estimator.ModeKeys.EVAL:\n      def metric_fn(per_example_loss, label_ids, logits, is_real_example):\n        predictions = tf.argmax(logits, axis=-1, output_type=tf.int32)\n        accuracy = tf.metrics.accuracy(\n            labels=label_ids, predictions=predictions,\n            weights=is_real_example)\n        loss = tf.metrics.mean(\n            values=per_example_loss, weights=is_real_example)\n        return {\n            \"eval_accuracy\": accuracy,\n            \"eval_loss\": loss,\n        }\n\n      eval_metrics = (metric_fn,\n                      [per_example_loss, label_ids, logits, is_real_example])\n      output_spec = contrib_tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          eval_metrics=eval_metrics,\n          scaffold_fn=scaffold_fn)\n    else:\n      output_spec = contrib_tpu.TPUEstimatorSpec(\n          mode=mode,\n          predictions={\"probabilities\": probabilities,\n                       \"predictions\": predictions},\n          scaffold_fn=scaffold_fn)\n    return output_spec\n\n  return model_fn\n\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.197265625,
          "content": "# Run pip install --upgrade pip if tensorflow 1.15 cannot be found\ntensorflow==1.15.2   # CPU Version of TensorFlow\ntensorflow_hub==0.7\n# tensorflow-gpu==1.15  # GPU version of TensorFlow\nsentencepiece\n"
        },
        {
          "name": "run_classifier.py",
          "type": "blob",
          "size": 21.3583984375,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"BERT finetuning on classification tasks.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport math\nimport os\nimport time\nfrom albert import classifier_utils\nfrom albert import fine_tuning_utils\nfrom albert import modeling\nimport tensorflow.compat.v1 as tf\nfrom tensorflow.compat.v1 import estimator as tf_estimator\nfrom tensorflow.contrib import cluster_resolver as contrib_cluster_resolver\nfrom tensorflow.contrib import tpu as contrib_tpu\n\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\n## Required parameters\nflags.DEFINE_string(\n    \"data_dir\", None,\n    \"The input data dir. Should contain the .tsv files (or other data files) \"\n    \"for the task.\")\n\nflags.DEFINE_string(\n    \"albert_config_file\", None,\n    \"The config json file corresponding to the pre-trained ALBERT model. \"\n    \"This specifies the model architecture.\")\n\nflags.DEFINE_string(\"task_name\", None, \"The name of the task to train.\")\n\nflags.DEFINE_string(\n    \"vocab_file\", None,\n    \"The vocabulary file that the ALBERT model was trained on.\")\n\nflags.DEFINE_string(\"spm_model_file\", None,\n                    \"The model file for sentence piece tokenization.\")\n\nflags.DEFINE_string(\n    \"output_dir\", None,\n    \"The output directory where the model checkpoints will be written.\")\n\nflags.DEFINE_string(\"cached_dir\", None,\n                    \"Path to cached training and dev tfrecord file. \"\n                    \"The file will be generated if not exist.\")\n\n## Other parameters\n\nflags.DEFINE_string(\n    \"init_checkpoint\", None,\n    \"Initial checkpoint (usually from a pre-trained BERT model).\")\n\nflags.DEFINE_string(\n    \"albert_hub_module_handle\", None,\n    \"If set, the ALBERT hub module to use.\")\n\nflags.DEFINE_bool(\n    \"do_lower_case\", True,\n    \"Whether to lower case the input text. Should be True for uncased \"\n    \"models and False for cased models.\")\n\nflags.DEFINE_integer(\n    \"max_seq_length\", 512,\n    \"The maximum total input sequence length after WordPiece tokenization. \"\n    \"Sequences longer than this will be truncated, and sequences shorter \"\n    \"than this will be padded.\")\n\nflags.DEFINE_bool(\"do_train\", False, \"Whether to run training.\")\n\nflags.DEFINE_bool(\"do_eval\", False, \"Whether to run eval on the dev set.\")\n\nflags.DEFINE_bool(\n    \"do_predict\", False,\n    \"Whether to run the model in inference mode on the test set.\")\n\nflags.DEFINE_integer(\"train_batch_size\", 32, \"Total batch size for training.\")\n\nflags.DEFINE_integer(\"eval_batch_size\", 8, \"Total batch size for eval.\")\n\nflags.DEFINE_integer(\"predict_batch_size\", 8, \"Total batch size for predict.\")\n\nflags.DEFINE_float(\"learning_rate\", 5e-5, \"The initial learning rate for Adam.\")\n\nflags.DEFINE_integer(\"train_step\", 1000,\n                     \"Total number of training steps to perform.\")\n\nflags.DEFINE_integer(\n    \"warmup_step\", 0,\n    \"number of steps to perform linear learning rate warmup for.\")\n\nflags.DEFINE_integer(\"save_checkpoints_steps\", 1000,\n                     \"How often to save the model checkpoint.\")\n\nflags.DEFINE_integer(\"keep_checkpoint_max\", 5,\n                     \"How many checkpoints to keep.\")\n\nflags.DEFINE_integer(\"iterations_per_loop\", 1000,\n                     \"How many steps to make in each estimator call.\")\n\nflags.DEFINE_bool(\"use_tpu\", False, \"Whether to use TPU or GPU/CPU.\")\n\nflags.DEFINE_string(\"optimizer\", \"adamw\", \"Optimizer to use\")\n\ntf.flags.DEFINE_string(\n    \"tpu_name\", None,\n    \"The Cloud TPU to use for training. This should be either the name \"\n    \"used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 \"\n    \"url.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_zone\", None,\n    \"[Optional] GCE zone where the Cloud TPU is located in. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\n    \"gcp_project\", None,\n    \"[Optional] Project name for the Cloud TPU-enabled project. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\"master\", None, \"[Optional] TensorFlow master URL.\")\n\nflags.DEFINE_integer(\n    \"num_tpu_cores\", 8,\n    \"Only used if `use_tpu` is True. Total number of TPU cores to use.\")\n\nflags.DEFINE_string(\n    \"export_dir\", None,\n    \"The directory where the exported SavedModel will be stored.\")\n\nflags.DEFINE_float(\n    \"threshold_to_export\", float(\"nan\"),\n    \"The threshold value that should be used with the exported classifier. \"\n    \"When specified, the threshold will be attached to the exported \"\n    \"SavedModel, and served along with the predictions. Please use the \"\n    \"saved model cli (\"\n    \"https://www.tensorflow.org/guide/saved_model#details_of_the_savedmodel_command_line_interface\"\n    \") to view the output signature of the threshold.\")\n\n\ndef _serving_input_receiver_fn():\n  \"\"\"Creates an input function for serving.\"\"\"\n  seq_len = FLAGS.max_seq_length\n  serialized_example = tf.placeholder(\n      dtype=tf.string, shape=[None], name=\"serialized_example\")\n  features = {\n      \"input_ids\": tf.FixedLenFeature([seq_len], dtype=tf.int64),\n      \"input_mask\": tf.FixedLenFeature([seq_len], dtype=tf.int64),\n      \"segment_ids\": tf.FixedLenFeature([seq_len], dtype=tf.int64),\n  }\n  feature_map = tf.parse_example(serialized_example, features=features)\n  feature_map[\"is_real_example\"] = tf.constant(1, dtype=tf.int32)\n  feature_map[\"label_ids\"] = tf.constant(0, dtype=tf.int32)\n\n  # tf.Example only supports tf.int64, but the TPU only supports tf.int32.\n  # So cast all int64 to int32.\n  for name in feature_map.keys():\n    t = feature_map[name]\n    if t.dtype == tf.int64:\n      t = tf.to_int32(t)\n    feature_map[name] = t\n\n  return tf_estimator.export.ServingInputReceiver(\n      features=feature_map, receiver_tensors=serialized_example)\n\n\ndef _add_threshold_to_model_fn(model_fn, threshold):\n  \"\"\"Adds the classifier threshold to the given model_fn.\"\"\"\n\n  def new_model_fn(features, labels, mode, params):\n    spec = model_fn(features, labels, mode, params)\n    threshold_tensor = tf.constant(threshold, dtype=tf.float32)\n    default_serving_export = spec.export_outputs[\n        tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\n    default_serving_export.outputs[\"threshold\"] = threshold_tensor\n    return spec\n\n  return new_model_fn\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  processors = {\n      \"cola\": classifier_utils.ColaProcessor,\n      \"mnli\": classifier_utils.MnliProcessor,\n      \"mismnli\": classifier_utils.MisMnliProcessor,\n      \"mrpc\": classifier_utils.MrpcProcessor,\n      \"rte\": classifier_utils.RteProcessor,\n      \"sst-2\": classifier_utils.Sst2Processor,\n      \"sts-b\": classifier_utils.StsbProcessor,\n      \"qqp\": classifier_utils.QqpProcessor,\n      \"qnli\": classifier_utils.QnliProcessor,\n      \"wnli\": classifier_utils.WnliProcessor,\n  }\n\n  if not (FLAGS.do_train or FLAGS.do_eval or FLAGS.do_predict or\n          FLAGS.export_dir):\n    raise ValueError(\n        \"At least one of `do_train`, `do_eval`, `do_predict' or `export_dir` \"\n        \"must be True.\")\n\n  if not FLAGS.albert_config_file and not FLAGS.albert_hub_module_handle:\n    raise ValueError(\"At least one of `--albert_config_file` and \"\n                     \"`--albert_hub_module_handle` must be set\")\n\n  if FLAGS.albert_config_file:\n    albert_config = modeling.AlbertConfig.from_json_file(\n        FLAGS.albert_config_file)\n    if FLAGS.max_seq_length > albert_config.max_position_embeddings:\n      raise ValueError(\n          \"Cannot use sequence length %d because the ALBERT model \"\n          \"was only trained up to sequence length %d\" %\n          (FLAGS.max_seq_length, albert_config.max_position_embeddings))\n  else:\n    albert_config = None  # Get the config from TF-Hub.\n\n  tf.gfile.MakeDirs(FLAGS.output_dir)\n\n  task_name = FLAGS.task_name.lower()\n\n  if task_name not in processors:\n    raise ValueError(\"Task not found: %s\" % (task_name))\n\n  processor = processors[task_name](\n      use_spm=True if FLAGS.spm_model_file else False,\n      do_lower_case=FLAGS.do_lower_case)\n\n  label_list = processor.get_labels()\n\n  tokenizer = fine_tuning_utils.create_vocab(\n      vocab_file=FLAGS.vocab_file,\n      do_lower_case=FLAGS.do_lower_case,\n      spm_model_file=FLAGS.spm_model_file,\n      hub_module=FLAGS.albert_hub_module_handle)\n\n  tpu_cluster_resolver = None\n  if FLAGS.use_tpu and FLAGS.tpu_name:\n    tpu_cluster_resolver = contrib_cluster_resolver.TPUClusterResolver(\n        FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)\n\n  is_per_host = contrib_tpu.InputPipelineConfig.PER_HOST_V2\n  if FLAGS.do_train:\n    iterations_per_loop = int(min(FLAGS.iterations_per_loop,\n                                  FLAGS.save_checkpoints_steps))\n  else:\n    iterations_per_loop = FLAGS.iterations_per_loop\n  run_config = contrib_tpu.RunConfig(\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      save_checkpoints_steps=int(FLAGS.save_checkpoints_steps),\n      keep_checkpoint_max=0,\n      tpu_config=contrib_tpu.TPUConfig(\n          iterations_per_loop=iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n\n  train_examples = None\n  if FLAGS.do_train:\n    train_examples = processor.get_train_examples(FLAGS.data_dir)\n  model_fn = classifier_utils.model_fn_builder(\n      albert_config=albert_config,\n      num_labels=len(label_list),\n      init_checkpoint=FLAGS.init_checkpoint,\n      learning_rate=FLAGS.learning_rate,\n      num_train_steps=FLAGS.train_step,\n      num_warmup_steps=FLAGS.warmup_step,\n      use_tpu=FLAGS.use_tpu,\n      use_one_hot_embeddings=FLAGS.use_tpu,\n      task_name=task_name,\n      hub_module=FLAGS.albert_hub_module_handle,\n      optimizer=FLAGS.optimizer)\n\n  if not math.isnan(FLAGS.threshold_to_export):\n    model_fn = _add_threshold_to_model_fn(model_fn, FLAGS.threshold_to_export)\n\n  # If TPU is not available, this will fall back to normal Estimator on CPU\n  # or GPU.\n  estimator = contrib_tpu.TPUEstimator(\n      use_tpu=FLAGS.use_tpu,\n      model_fn=model_fn,\n      config=run_config,\n      train_batch_size=FLAGS.train_batch_size,\n      eval_batch_size=FLAGS.eval_batch_size,\n      predict_batch_size=FLAGS.predict_batch_size,\n      export_to_tpu=False)  # http://yaqs/4707241341091840\n\n  if FLAGS.do_train:\n    cached_dir = FLAGS.cached_dir\n    if not cached_dir:\n      cached_dir = FLAGS.output_dir\n    train_file = os.path.join(cached_dir, task_name + \"_train.tf_record\")\n    if not tf.gfile.Exists(train_file):\n      classifier_utils.file_based_convert_examples_to_features(\n          train_examples, label_list, FLAGS.max_seq_length, tokenizer,\n          train_file, task_name)\n    tf.logging.info(\"***** Running training *****\")\n    tf.logging.info(\"  Num examples = %d\", len(train_examples))\n    tf.logging.info(\"  Batch size = %d\", FLAGS.train_batch_size)\n    tf.logging.info(\"  Num steps = %d\", FLAGS.train_step)\n    train_input_fn = classifier_utils.file_based_input_fn_builder(\n        input_file=train_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=True,\n        drop_remainder=True,\n        task_name=task_name,\n        use_tpu=FLAGS.use_tpu,\n        bsz=FLAGS.train_batch_size)\n    estimator.train(input_fn=train_input_fn, max_steps=FLAGS.train_step)\n\n  if FLAGS.do_eval:\n    eval_examples = processor.get_dev_examples(FLAGS.data_dir)\n    num_actual_eval_examples = len(eval_examples)\n    if FLAGS.use_tpu:\n      # TPU requires a fixed batch size for all batches, therefore the number\n      # of examples must be a multiple of the batch size, or else examples\n      # will get dropped. So we pad with fake examples which are ignored\n      # later on. These do NOT count towards the metric (all tf.metrics\n      # support a per-instance weight, and these get a weight of 0.0).\n      while len(eval_examples) % FLAGS.eval_batch_size != 0:\n        eval_examples.append(classifier_utils.PaddingInputExample())\n\n    cached_dir = FLAGS.cached_dir\n    if not cached_dir:\n      cached_dir = FLAGS.output_dir\n    eval_file = os.path.join(cached_dir, task_name + \"_eval.tf_record\")\n    if not tf.gfile.Exists(eval_file):\n      classifier_utils.file_based_convert_examples_to_features(\n          eval_examples, label_list, FLAGS.max_seq_length, tokenizer,\n          eval_file, task_name)\n\n    tf.logging.info(\"***** Running evaluation *****\")\n    tf.logging.info(\"  Num examples = %d (%d actual, %d padding)\",\n                    len(eval_examples), num_actual_eval_examples,\n                    len(eval_examples) - num_actual_eval_examples)\n    tf.logging.info(\"  Batch size = %d\", FLAGS.eval_batch_size)\n\n    # This tells the estimator to run through the entire set.\n    eval_steps = None\n    # However, if running eval on the TPU, you will need to specify the\n    # number of steps.\n    if FLAGS.use_tpu:\n      assert len(eval_examples) % FLAGS.eval_batch_size == 0\n      eval_steps = int(len(eval_examples) // FLAGS.eval_batch_size)\n\n    eval_drop_remainder = True if FLAGS.use_tpu else False\n    eval_input_fn = classifier_utils.file_based_input_fn_builder(\n        input_file=eval_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=False,\n        drop_remainder=eval_drop_remainder,\n        task_name=task_name,\n        use_tpu=FLAGS.use_tpu,\n        bsz=FLAGS.eval_batch_size)\n\n    best_trial_info_file = os.path.join(FLAGS.output_dir, \"best_trial.txt\")\n\n    def _best_trial_info():\n      \"\"\"Returns information about which checkpoints have been evaled so far.\"\"\"\n      if tf.gfile.Exists(best_trial_info_file):\n        with tf.gfile.GFile(best_trial_info_file, \"r\") as best_info:\n          global_step, best_metric_global_step, metric_value = (\n              best_info.read().split(\":\"))\n          global_step = int(global_step)\n          best_metric_global_step = int(best_metric_global_step)\n          metric_value = float(metric_value)\n      else:\n        metric_value = -1\n        best_metric_global_step = -1\n        global_step = -1\n      tf.logging.info(\n          \"Best trial info: Step: %s, Best Value Step: %s, \"\n          \"Best Value: %s\", global_step, best_metric_global_step, metric_value)\n      return global_step, best_metric_global_step, metric_value\n\n    def _remove_checkpoint(checkpoint_path):\n      for ext in [\"meta\", \"data-00000-of-00001\", \"index\"]:\n        src_ckpt = checkpoint_path + \".{}\".format(ext)\n        tf.logging.info(\"removing {}\".format(src_ckpt))\n        tf.gfile.Remove(src_ckpt)\n\n    def _find_valid_cands(curr_step):\n      filenames = tf.gfile.ListDirectory(FLAGS.output_dir)\n      candidates = []\n      for filename in filenames:\n        if filename.endswith(\".index\"):\n          ckpt_name = filename[:-6]\n          idx = ckpt_name.split(\"-\")[-1]\n          if int(idx) > curr_step:\n            candidates.append(filename)\n      return candidates\n\n    output_eval_file = os.path.join(FLAGS.output_dir, \"eval_results.txt\")\n\n    if task_name == \"sts-b\":\n      key_name = \"pearson\"\n    elif task_name == \"cola\":\n      key_name = \"matthew_corr\"\n    else:\n      key_name = \"eval_accuracy\"\n\n    global_step, best_perf_global_step, best_perf = _best_trial_info()\n    writer = tf.gfile.GFile(output_eval_file, \"w\")\n    while global_step < FLAGS.train_step:\n      steps_and_files = {}\n      filenames = tf.gfile.ListDirectory(FLAGS.output_dir)\n      for filename in filenames:\n        if filename.endswith(\".index\"):\n          ckpt_name = filename[:-6]\n          cur_filename = os.path.join(FLAGS.output_dir, ckpt_name)\n          if cur_filename.split(\"-\")[-1] == \"best\":\n            continue\n          gstep = int(cur_filename.split(\"-\")[-1])\n          if gstep not in steps_and_files:\n            tf.logging.info(\"Add {} to eval list.\".format(cur_filename))\n            steps_and_files[gstep] = cur_filename\n      tf.logging.info(\"found {} files.\".format(len(steps_and_files)))\n      if not steps_and_files:\n        tf.logging.info(\"found 0 file, global step: {}. Sleeping.\"\n                        .format(global_step))\n        time.sleep(60)\n      else:\n        for checkpoint in sorted(steps_and_files.items()):\n          step, checkpoint_path = checkpoint\n          if global_step >= step:\n            if (best_perf_global_step != step and\n                len(_find_valid_cands(step)) > 1):\n              _remove_checkpoint(checkpoint_path)\n            continue\n          result = estimator.evaluate(\n              input_fn=eval_input_fn,\n              steps=eval_steps,\n              checkpoint_path=checkpoint_path)\n          global_step = result[\"global_step\"]\n          tf.logging.info(\"***** Eval results *****\")\n          for key in sorted(result.keys()):\n            tf.logging.info(\"  %s = %s\", key, str(result[key]))\n            writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n          writer.write(\"best = {}\\n\".format(best_perf))\n          if result[key_name] > best_perf:\n            best_perf = result[key_name]\n            best_perf_global_step = global_step\n          elif len(_find_valid_cands(global_step)) > 1:\n            _remove_checkpoint(checkpoint_path)\n          writer.write(\"=\" * 50 + \"\\n\")\n          writer.flush()\n          with tf.gfile.GFile(best_trial_info_file, \"w\") as best_info:\n            best_info.write(\"{}:{}:{}\".format(\n                global_step, best_perf_global_step, best_perf))\n    writer.close()\n\n    for ext in [\"meta\", \"data-00000-of-00001\", \"index\"]:\n      src_ckpt = \"model.ckpt-{}.{}\".format(best_perf_global_step, ext)\n      tgt_ckpt = \"model.ckpt-best.{}\".format(ext)\n      tf.logging.info(\"saving {} to {}\".format(src_ckpt, tgt_ckpt))\n      tf.io.gfile.rename(\n          os.path.join(FLAGS.output_dir, src_ckpt),\n          os.path.join(FLAGS.output_dir, tgt_ckpt),\n          overwrite=True)\n\n  if FLAGS.do_predict:\n    predict_examples = processor.get_test_examples(FLAGS.data_dir)\n    num_actual_predict_examples = len(predict_examples)\n    if FLAGS.use_tpu:\n      # TPU requires a fixed batch size for all batches, therefore the number\n      # of examples must be a multiple of the batch size, or else examples\n      # will get dropped. So we pad with fake examples which are ignored\n      # later on.\n      while len(predict_examples) % FLAGS.predict_batch_size != 0:\n        predict_examples.append(classifier_utils.PaddingInputExample())\n\n    predict_file = os.path.join(FLAGS.output_dir, \"predict.tf_record\")\n    classifier_utils.file_based_convert_examples_to_features(\n        predict_examples, label_list,\n        FLAGS.max_seq_length, tokenizer,\n        predict_file, task_name)\n\n    tf.logging.info(\"***** Running prediction*****\")\n    tf.logging.info(\"  Num examples = %d (%d actual, %d padding)\",\n                    len(predict_examples), num_actual_predict_examples,\n                    len(predict_examples) - num_actual_predict_examples)\n    tf.logging.info(\"  Batch size = %d\", FLAGS.predict_batch_size)\n\n    predict_drop_remainder = True if FLAGS.use_tpu else False\n    predict_input_fn = classifier_utils.file_based_input_fn_builder(\n        input_file=predict_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=False,\n        drop_remainder=predict_drop_remainder,\n        task_name=task_name,\n        use_tpu=FLAGS.use_tpu,\n        bsz=FLAGS.predict_batch_size)\n\n    checkpoint_path = os.path.join(FLAGS.output_dir, \"model.ckpt-best\")\n    result = estimator.predict(\n        input_fn=predict_input_fn,\n        checkpoint_path=checkpoint_path)\n\n    output_predict_file = os.path.join(FLAGS.output_dir, \"test_results.tsv\")\n    output_submit_file = os.path.join(FLAGS.output_dir, \"submit_results.tsv\")\n    with tf.gfile.GFile(output_predict_file, \"w\") as pred_writer,\\\n        tf.gfile.GFile(output_submit_file, \"w\") as sub_writer:\n      sub_writer.write(\"index\" + \"\\t\" + \"prediction\\n\")\n      num_written_lines = 0\n      tf.logging.info(\"***** Predict results *****\")\n      for (i, (example, prediction)) in\\\n          enumerate(zip(predict_examples, result)):\n        probabilities = prediction[\"probabilities\"]\n        if i >= num_actual_predict_examples:\n          break\n        output_line = \"\\t\".join(\n            str(class_probability)\n            for class_probability in probabilities) + \"\\n\"\n        pred_writer.write(output_line)\n\n        if task_name != \"sts-b\":\n          actual_label = label_list[int(prediction[\"predictions\"])]\n        else:\n          actual_label = str(prediction[\"predictions\"])\n        sub_writer.write(example.guid + \"\\t\" + actual_label + \"\\n\")\n        num_written_lines += 1\n    assert num_written_lines == num_actual_predict_examples\n\n  if FLAGS.export_dir:\n    tf.gfile.MakeDirs(FLAGS.export_dir)\n    checkpoint_path = os.path.join(FLAGS.output_dir, \"model.ckpt-best\")\n    tf.logging.info(\"Starting to export model.\")\n    subfolder = estimator.export_saved_model(\n        export_dir_base=FLAGS.export_dir,\n        serving_input_receiver_fn=_serving_input_receiver_fn,\n        checkpoint_path=checkpoint_path)\n    tf.logging.info(\"Model exported to %s.\", subfolder)\n\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"data_dir\")\n  flags.mark_flag_as_required(\"task_name\")\n  flags.mark_flag_as_required(\"spm_model_file\")\n  flags.mark_flag_as_required(\"output_dir\")\n  tf.app.run()\n"
        },
        {
          "name": "run_glue.sh",
          "type": "blob",
          "size": 1.9287109375,
          "content": "#!/bin/bash\n# This is a convenience script for evaluating ALBERT on the GLUE benchmark.\n#\n# By default, this script uses a pretrained ALBERT v1 BASE model, but you may\n# use a custom checkpoint or any compatible TF-Hub checkpoint with minimal\n# edits to environment variables (see ALBERT_HUB_MODULE_HANDLE below).\n#\n# This script does fine-tuning and evaluation on 8 tasks, so it may take a\n# while to complete if you do not have a hardware accelerator.\n\nset -ex\n\npython3 -m venv $HOME/albertenv\n. $HOME/albertenv/bin/activate\n\nOUTPUT_DIR_BASE=\"$(mktemp -d)\"\nOUTPUT_DIR=\"${OUTPUT_DIR_BASE}/output\"\n\n# To start from a custom pretrained checkpoint, set ALBERT_HUB_MODULE_HANDLE\n# below to an empty string and set INIT_CHECKPOINT to your checkpoint path.\nALBERT_HUB_MODULE_HANDLE=\"https://tfhub.dev/google/albert_base/1\"\nINIT_CHECKPOINT=\"\"\n\npip3 install --upgrade pip\npip3 install numpy\npip3 install -r requirements.txt\n\nfunction run_task() {\n  COMMON_ARGS=\"--output_dir=\"${OUTPUT_DIR}/$1\" --data_dir=\"${ALBERT_ROOT}/glue\" --vocab_file=\"${ALBERT_ROOT}/vocab.txt\" --spm_model_file=\"${ALBERT_ROOT}/30k-clean.model\" --do_lower_case --max_seq_length=512 --optimizer=adamw --task_name=$1 --warmup_step=$2 --learning_rate=$3 --train_step=$4 --save_checkpoints_steps=$5 --train_batch_size=$6\"\n  python3 -m run_classifier \\\n      ${COMMON_ARGS} \\\n      --do_train \\\n      --nodo_eval \\\n      --nodo_predict \\\n      --albert_hub_module_handle=\"${ALBERT_HUB_MODULE_HANDLE}\" \\\n      --init_checkpoint=\"${INIT_CHECKPOINT}\"\n  python3 -m run_classifier \\\n      ${COMMON_ARGS} \\\n      --nodo_train \\\n      --do_eval \\\n      --do_predict \\\n      --albert_hub_module_handle=\"${ALBERT_HUB_MODULE_HANDLE}\"\n}\n\nrun_task SST-2 1256 1e-5 20935 100 32\nrun_task MNLI 1000 3e-5 10000 100 128\nrun_task CoLA 320 1e-5 5336 100 16\nrun_task QNLI 1986 1e-5 33112 200 32\nrun_task QQP 1000 5e-5 14000 100 128\nrun_task RTE 200 3e-5 800 100 32\nrun_task STS-B 214 2e-5 3598 100 16\nrun_task MRPC 200 2e-5 800 100 32\n"
        },
        {
          "name": "run_pretraining.py",
          "type": "blob",
          "size": 21.9970703125,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Run masked LM/next sentence masked_lm pre-training for ALBERT.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nimport os\nimport time\nfrom albert import modeling\nfrom albert import optimization\nfrom six.moves import range\nimport tensorflow.compat.v1 as tf\nfrom tensorflow.compat.v1 import estimator as tf_estimator\nfrom tensorflow.contrib import cluster_resolver as contrib_cluster_resolver\nfrom tensorflow.contrib import tpu as contrib_tpu\n\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\n## Required parameters\nflags.DEFINE_string(\n    \"albert_config_file\", None,\n    \"The config json file corresponding to the pre-trained ALBERT model. \"\n    \"This specifies the model architecture.\")\n\nflags.DEFINE_string(\n    \"input_file\", None,\n    \"Input TF example files (can be a glob or comma separated).\")\n\nflags.DEFINE_string(\n    \"output_dir\", None,\n    \"The output directory where the model checkpoints will be written.\")\n\n## Other parameters\nflags.DEFINE_string(\n    \"init_checkpoint\", None,\n    \"Initial checkpoint (usually from a pre-trained ALBERT model).\")\n\nflags.DEFINE_integer(\n    \"max_seq_length\", 512,\n    \"The maximum total input sequence length after WordPiece tokenization. \"\n    \"Sequences longer than this will be truncated, and sequences shorter \"\n    \"than this will be padded. Must match data generation.\")\n\nflags.DEFINE_integer(\n    \"max_predictions_per_seq\", 20,\n    \"Maximum number of masked LM predictions per sequence. \"\n    \"Must match data generation.\")\n\nflags.DEFINE_bool(\"do_train\", True, \"Whether to run training.\")\n\nflags.DEFINE_bool(\"do_eval\", False, \"Whether to run eval on the dev set.\")\n\nflags.DEFINE_integer(\"train_batch_size\", 4096, \"Total batch size for training.\")\n\nflags.DEFINE_integer(\"eval_batch_size\", 64, \"Total batch size for eval.\")\n\nflags.DEFINE_enum(\"optimizer\", \"lamb\", [\"adamw\", \"lamb\"],\n                  \"The optimizer for training.\")\n\nflags.DEFINE_float(\"learning_rate\", 0.00176, \"The initial learning rate.\")\n\nflags.DEFINE_float(\"poly_power\", 1.0, \"The power of poly decay.\")\n\nflags.DEFINE_integer(\"num_train_steps\", 125000, \"Number of training steps.\")\n\nflags.DEFINE_integer(\"num_warmup_steps\", 3125, \"Number of warmup steps.\")\n\nflags.DEFINE_integer(\"start_warmup_step\", 0, \"The starting step of warmup.\")\n\nflags.DEFINE_integer(\"save_checkpoints_steps\", 5000,\n                     \"How often to save the model checkpoint.\")\n\nflags.DEFINE_integer(\"keep_checkpoint_max\", 5,\n                     \"How many checkpoints to keep.\")\n\nflags.DEFINE_integer(\"iterations_per_loop\", 1000,\n                     \"How many steps to make in each estimator call.\")\n\nflags.DEFINE_integer(\"max_eval_steps\", 100, \"Maximum number of eval steps.\")\n\nflags.DEFINE_bool(\"use_tpu\", False, \"Whether to use TPU or GPU/CPU.\")\n\nflags.DEFINE_bool(\"init_from_group0\", False, \"Whether to initialize\"\n                  \"parameters of other groups from group 0\")\n\ntf.flags.DEFINE_string(\n    \"tpu_name\", None,\n    \"The Cloud TPU to use for training. This should be either the name \"\n    \"used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 \"\n    \"url.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_zone\", None,\n    \"[Optional] GCE zone where the Cloud TPU is located in. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\n    \"gcp_project\", None,\n    \"[Optional] Project name for the Cloud TPU-enabled project. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\"master\", None, \"[Optional] TensorFlow master URL.\")\n\nflags.DEFINE_integer(\n    \"num_tpu_cores\", 8,\n    \"Only used if `use_tpu` is True. Total number of TPU cores to use.\")\n\nflags.DEFINE_float(\n    \"masked_lm_budget\", 0,\n    \"If >0, the ratio of masked ngrams to unmasked ngrams. Default 0,\"\n    \"for offline masking\")\n\n\ndef model_fn_builder(albert_config, init_checkpoint, learning_rate,\n                     num_train_steps, num_warmup_steps, use_tpu,\n                     use_one_hot_embeddings, optimizer, poly_power,\n                     start_warmup_step):\n  \"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"\n\n  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n    \"\"\"The `model_fn` for TPUEstimator.\"\"\"\n\n    tf.logging.info(\"*** Features ***\")\n    for name in sorted(features.keys()):\n      tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\n\n    input_ids = features[\"input_ids\"]\n    input_mask = features[\"input_mask\"]\n    segment_ids = features[\"segment_ids\"]\n    masked_lm_positions = features[\"masked_lm_positions\"]\n    masked_lm_ids = features[\"masked_lm_ids\"]\n    masked_lm_weights = features[\"masked_lm_weights\"]\n    # Note: We keep this feature name `next_sentence_labels` to be compatible\n    # with the original data created by lanzhzh@. However, in the ALBERT case\n    # it does represent sentence_order_labels.\n    sentence_order_labels = features[\"next_sentence_labels\"]\n\n    is_training = (mode == tf_estimator.ModeKeys.TRAIN)\n\n    model = modeling.AlbertModel(\n        config=albert_config,\n        is_training=is_training,\n        input_ids=input_ids,\n        input_mask=input_mask,\n        token_type_ids=segment_ids,\n        use_one_hot_embeddings=use_one_hot_embeddings)\n\n    (masked_lm_loss, masked_lm_example_loss,\n     masked_lm_log_probs) = get_masked_lm_output(albert_config,\n                                                 model.get_sequence_output(),\n                                                 model.get_embedding_table(),\n                                                 masked_lm_positions,\n                                                 masked_lm_ids,\n                                                 masked_lm_weights)\n\n    (sentence_order_loss, sentence_order_example_loss,\n     sentence_order_log_probs) = get_sentence_order_output(\n         albert_config, model.get_pooled_output(), sentence_order_labels)\n\n    total_loss = masked_lm_loss + sentence_order_loss\n\n    tvars = tf.trainable_variables()\n\n    initialized_variable_names = {}\n    scaffold_fn = None\n    if init_checkpoint:\n      tf.logging.info(\"number of hidden group %d to initialize\",\n                      albert_config.num_hidden_groups)\n      num_of_initialize_group = 1\n      if FLAGS.init_from_group0:\n        num_of_initialize_group = albert_config.num_hidden_groups\n        if albert_config.net_structure_type > 0:\n          num_of_initialize_group = albert_config.num_hidden_layers\n      (assignment_map, initialized_variable_names\n      ) = modeling.get_assignment_map_from_checkpoint(\n              tvars, init_checkpoint, num_of_initialize_group)\n      if use_tpu:\n\n        def tpu_scaffold():\n          for gid in range(num_of_initialize_group):\n            tf.logging.info(\"initialize the %dth layer\", gid)\n            tf.logging.info(assignment_map[gid])\n            tf.train.init_from_checkpoint(init_checkpoint, assignment_map[gid])\n          return tf.train.Scaffold()\n\n        scaffold_fn = tpu_scaffold\n      else:\n        for gid in range(num_of_initialize_group):\n          tf.logging.info(\"initialize the %dth layer\", gid)\n          tf.logging.info(assignment_map[gid])\n          tf.train.init_from_checkpoint(init_checkpoint, assignment_map[gid])\n\n    tf.logging.info(\"**** Trainable Variables ****\")\n    for var in tvars:\n      init_string = \"\"\n      if var.name in initialized_variable_names:\n        init_string = \", *INIT_FROM_CKPT*\"\n      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                      init_string)\n\n    output_spec = None\n    if mode == tf_estimator.ModeKeys.TRAIN:\n      train_op = optimization.create_optimizer(\n          total_loss, learning_rate, num_train_steps, num_warmup_steps,\n          use_tpu, optimizer, poly_power, start_warmup_step)\n\n      output_spec = contrib_tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          train_op=train_op,\n          scaffold_fn=scaffold_fn)\n    elif mode == tf_estimator.ModeKeys.EVAL:\n\n      def metric_fn(*args):\n        \"\"\"Computes the loss and accuracy of the model.\"\"\"\n        (masked_lm_example_loss, masked_lm_log_probs, masked_lm_ids,\n         masked_lm_weights, sentence_order_example_loss,\n         sentence_order_log_probs, sentence_order_labels) = args[:7]\n\n\n        masked_lm_log_probs = tf.reshape(masked_lm_log_probs,\n                                         [-1, masked_lm_log_probs.shape[-1]])\n        masked_lm_predictions = tf.argmax(\n            masked_lm_log_probs, axis=-1, output_type=tf.int32)\n        masked_lm_example_loss = tf.reshape(masked_lm_example_loss, [-1])\n        masked_lm_ids = tf.reshape(masked_lm_ids, [-1])\n        masked_lm_weights = tf.reshape(masked_lm_weights, [-1])\n        masked_lm_accuracy = tf.metrics.accuracy(\n            labels=masked_lm_ids,\n            predictions=masked_lm_predictions,\n            weights=masked_lm_weights)\n        masked_lm_mean_loss = tf.metrics.mean(\n            values=masked_lm_example_loss, weights=masked_lm_weights)\n\n        metrics = {\n            \"masked_lm_accuracy\": masked_lm_accuracy,\n            \"masked_lm_loss\": masked_lm_mean_loss,\n        }\n\n        sentence_order_log_probs = tf.reshape(\n            sentence_order_log_probs, [-1, sentence_order_log_probs.shape[-1]])\n        sentence_order_predictions = tf.argmax(\n            sentence_order_log_probs, axis=-1, output_type=tf.int32)\n        sentence_order_labels = tf.reshape(sentence_order_labels, [-1])\n        sentence_order_accuracy = tf.metrics.accuracy(\n            labels=sentence_order_labels,\n            predictions=sentence_order_predictions)\n        sentence_order_mean_loss = tf.metrics.mean(\n            values=sentence_order_example_loss)\n        metrics.update({\n            \"sentence_order_accuracy\": sentence_order_accuracy,\n            \"sentence_order_loss\": sentence_order_mean_loss\n        })\n        return metrics\n\n      metric_values = [\n          masked_lm_example_loss, masked_lm_log_probs, masked_lm_ids,\n          masked_lm_weights, sentence_order_example_loss,\n          sentence_order_log_probs, sentence_order_labels\n      ]\n\n      eval_metrics = (metric_fn, metric_values)\n\n      output_spec = contrib_tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          eval_metrics=eval_metrics,\n          scaffold_fn=scaffold_fn)\n    else:\n      raise ValueError(\"Only TRAIN and EVAL modes are supported: %s\" % (mode))\n\n    return output_spec\n\n  return model_fn\n\n\ndef get_masked_lm_output(albert_config, input_tensor, output_weights, positions,\n                         label_ids, label_weights):\n  \"\"\"Get loss and log probs for the masked LM.\"\"\"\n  input_tensor = gather_indexes(input_tensor, positions)\n\n\n  with tf.variable_scope(\"cls/predictions\"):\n    # We apply one more non-linear transformation before the output layer.\n    # This matrix is not used after pre-training.\n    with tf.variable_scope(\"transform\"):\n      input_tensor = tf.layers.dense(\n          input_tensor,\n          units=albert_config.embedding_size,\n          activation=modeling.get_activation(albert_config.hidden_act),\n          kernel_initializer=modeling.create_initializer(\n              albert_config.initializer_range))\n      input_tensor = modeling.layer_norm(input_tensor)\n\n    # The output weights are the same as the input embeddings, but there is\n    # an output-only bias for each token.\n    output_bias = tf.get_variable(\n        \"output_bias\",\n        shape=[albert_config.vocab_size],\n        initializer=tf.zeros_initializer())\n    logits = tf.matmul(input_tensor, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n\n    label_ids = tf.reshape(label_ids, [-1])\n    label_weights = tf.reshape(label_weights, [-1])\n\n    one_hot_labels = tf.one_hot(\n        label_ids, depth=albert_config.vocab_size, dtype=tf.float32)\n\n    # The `positions` tensor might be zero-padded (if the sequence is too\n    # short to have the maximum number of predictions). The `label_weights`\n    # tensor has a value of 1.0 for every real prediction and 0.0 for the\n    # padding predictions.\n    per_example_loss = -tf.reduce_sum(log_probs * one_hot_labels, axis=[-1])\n    numerator = tf.reduce_sum(label_weights * per_example_loss)\n    denominator = tf.reduce_sum(label_weights) + 1e-5\n    loss = numerator / denominator\n\n  return (loss, per_example_loss, log_probs)\n\n\ndef get_sentence_order_output(albert_config, input_tensor, labels):\n  \"\"\"Get loss and log probs for the next sentence prediction.\"\"\"\n\n  # Simple binary classification. Note that 0 is \"next sentence\" and 1 is\n  # \"random sentence\". This weight matrix is not used after pre-training.\n  with tf.variable_scope(\"cls/seq_relationship\"):\n    output_weights = tf.get_variable(\n        \"output_weights\",\n        shape=[2, albert_config.hidden_size],\n        initializer=modeling.create_initializer(\n            albert_config.initializer_range))\n    output_bias = tf.get_variable(\n        \"output_bias\", shape=[2], initializer=tf.zeros_initializer())\n\n    logits = tf.matmul(input_tensor, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n    labels = tf.reshape(labels, [-1])\n    one_hot_labels = tf.one_hot(labels, depth=2, dtype=tf.float32)\n    per_example_loss = -tf.reduce_sum(one_hot_labels * log_probs, axis=-1)\n    loss = tf.reduce_mean(per_example_loss)\n    return (loss, per_example_loss, log_probs)\n\n\ndef gather_indexes(sequence_tensor, positions):\n  \"\"\"Gathers the vectors at the specific positions over a minibatch.\"\"\"\n  sequence_shape = modeling.get_shape_list(sequence_tensor, expected_rank=3)\n  batch_size = sequence_shape[0]\n  seq_length = sequence_shape[1]\n  width = sequence_shape[2]\n\n  flat_offsets = tf.reshape(\n      tf.range(0, batch_size, dtype=tf.int32) * seq_length, [-1, 1])\n  flat_positions = tf.reshape(positions + flat_offsets, [-1])\n  flat_sequence_tensor = tf.reshape(sequence_tensor,\n                                    [batch_size * seq_length, width])\n  output_tensor = tf.gather(flat_sequence_tensor, flat_positions)\n  return output_tensor\n\n\ndef input_fn_builder(input_files,\n                     max_seq_length,\n                     max_predictions_per_seq,\n                     is_training,\n                     num_cpu_threads=4):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    batch_size = params[\"batch_size\"]\n\n    name_to_features = {\n        \"input_ids\": tf.FixedLenFeature([max_seq_length], tf.int64),\n        \"input_mask\": tf.FixedLenFeature([max_seq_length], tf.int64),\n        \"segment_ids\": tf.FixedLenFeature([max_seq_length], tf.int64),\n        # Note: We keep this feature name `next_sentence_labels` to be\n        # compatible with the original data created by lanzhzh@. However, in\n        # the ALBERT case it does represent sentence_order_labels.\n        \"next_sentence_labels\": tf.FixedLenFeature([1], tf.int64),\n    }\n\n    if FLAGS.masked_lm_budget:\n      name_to_features.update({\n          \"token_boundary\":\n              tf.FixedLenFeature([max_seq_length], tf.int64)})\n    else:\n      name_to_features.update({\n          \"masked_lm_positions\":\n              tf.FixedLenFeature([max_predictions_per_seq], tf.int64),\n          \"masked_lm_ids\":\n              tf.FixedLenFeature([max_predictions_per_seq], tf.int64),\n          \"masked_lm_weights\":\n              tf.FixedLenFeature([max_predictions_per_seq], tf.float32)})\n\n    # For training, we want a lot of parallel reading and shuffling.\n    # For eval, we want no shuffling and parallel reading doesn't matter.\n    if is_training:\n      d = tf.data.Dataset.from_tensor_slices(tf.constant(input_files))\n      d = d.repeat()\n      d = d.shuffle(buffer_size=len(input_files))\n\n      # `cycle_length` is the number of parallel files that get read.\n      cycle_length = min(num_cpu_threads, len(input_files))\n\n      # `sloppy` mode means that the interleaving is not exact. This adds\n      # even more randomness to the training pipeline.\n      d = d.apply(\n          tf.data.experimental.parallel_interleave(\n              tf.data.TFRecordDataset,\n              sloppy=is_training,\n              cycle_length=cycle_length))\n      d = d.shuffle(buffer_size=100)\n    else:\n      d = tf.data.TFRecordDataset(input_files)\n      # Since we evaluate for a fixed number of steps we don't want to encounter\n      # out-of-range exceptions.\n      d = d.repeat()\n\n    # We must `drop_remainder` on training because the TPU requires fixed\n    # size dimensions. For eval, we assume we are evaluating on the CPU or GPU\n    # and we *don't* want to drop the remainder, otherwise we wont cover\n    # every sample.\n    d = d.apply(\n        tf.data.experimental.map_and_batch_with_legacy_function(\n            lambda record: _decode_record(record, name_to_features),\n            batch_size=batch_size,\n            num_parallel_batches=num_cpu_threads,\n            drop_remainder=True))\n    tf.logging.info(d)\n    return d\n\n  return input_fn\n\n\ndef _decode_record(record, name_to_features):\n  \"\"\"Decodes a record to a TensorFlow example.\"\"\"\n  example = tf.parse_single_example(record, name_to_features)\n\n  # tf.Example only supports tf.int64, but the TPU only supports tf.int32.\n  # So cast all int64 to int32.\n  for name in list(example.keys()):\n    t = example[name]\n    if t.dtype == tf.int64:\n      t = tf.to_int32(t)\n    example[name] = t\n\n  return example\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  if not FLAGS.do_train and not FLAGS.do_eval:\n    raise ValueError(\"At least one of `do_train` or `do_eval` must be True.\")\n\n  albert_config = modeling.AlbertConfig.from_json_file(FLAGS.albert_config_file)\n\n  tf.gfile.MakeDirs(FLAGS.output_dir)\n\n  input_files = []\n  for input_pattern in FLAGS.input_file.split(\",\"):\n    input_files.extend(tf.gfile.Glob(input_pattern))\n\n  tf.logging.info(\"*** Input Files ***\")\n  for input_file in input_files:\n    tf.logging.info(\"  %s\" % input_file)\n\n  tpu_cluster_resolver = None\n  if FLAGS.use_tpu and FLAGS.tpu_name:\n    tpu_cluster_resolver = contrib_cluster_resolver.TPUClusterResolver(\n        FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)\n\n  is_per_host = contrib_tpu.InputPipelineConfig.PER_HOST_V2\n  run_config = contrib_tpu.RunConfig(\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n      keep_checkpoint_max=FLAGS.keep_checkpoint_max,\n      tpu_config=contrib_tpu.TPUConfig(\n          iterations_per_loop=FLAGS.iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n\n  model_fn = model_fn_builder(\n      albert_config=albert_config,\n      init_checkpoint=FLAGS.init_checkpoint,\n      learning_rate=FLAGS.learning_rate,\n      num_train_steps=FLAGS.num_train_steps,\n      num_warmup_steps=FLAGS.num_warmup_steps,\n      use_tpu=FLAGS.use_tpu,\n      use_one_hot_embeddings=FLAGS.use_tpu,\n      optimizer=FLAGS.optimizer,\n      poly_power=FLAGS.poly_power,\n      start_warmup_step=FLAGS.start_warmup_step)\n\n  # If TPU is not available, this will fall back to normal Estimator on CPU\n  # or GPU.\n  estimator = contrib_tpu.TPUEstimator(\n      use_tpu=FLAGS.use_tpu,\n      model_fn=model_fn,\n      config=run_config,\n      train_batch_size=FLAGS.train_batch_size,\n      eval_batch_size=FLAGS.eval_batch_size)\n\n  if FLAGS.do_train:\n    tf.logging.info(\"***** Running training *****\")\n    tf.logging.info(\"  Batch size = %d\", FLAGS.train_batch_size)\n    train_input_fn = input_fn_builder(\n        input_files=input_files,\n        max_seq_length=FLAGS.max_seq_length,\n        max_predictions_per_seq=FLAGS.max_predictions_per_seq,\n        is_training=True)\n    estimator.train(input_fn=train_input_fn, max_steps=FLAGS.num_train_steps)\n\n  if FLAGS.do_eval:\n    tf.logging.info(\"***** Running evaluation *****\")\n    tf.logging.info(\"  Batch size = %d\", FLAGS.eval_batch_size)\n    global_step = -1\n    output_eval_file = os.path.join(FLAGS.output_dir, \"eval_results.txt\")\n    writer = tf.gfile.GFile(output_eval_file, \"w\")\n    eval_input_fn = input_fn_builder(\n        input_files=input_files,\n        max_seq_length=FLAGS.max_seq_length,\n        max_predictions_per_seq=FLAGS.max_predictions_per_seq,\n        is_training=False)\n    best_perf = 0\n    key_name = \"masked_lm_accuracy\"\n    while global_step < FLAGS.num_train_steps:\n      if estimator.latest_checkpoint() is None:\n        tf.logging.info(\"No checkpoint found yet. Sleeping.\")\n        time.sleep(1)\n      else:\n        result = estimator.evaluate(\n            input_fn=eval_input_fn, steps=FLAGS.max_eval_steps)\n        global_step = result[\"global_step\"]\n        tf.logging.info(\"***** Eval results *****\")\n        checkpoint_path = estimator.latest_checkpoint()\n        for key in sorted(result.keys()):\n          tf.logging.info(\"  %s = %s\", key, str(result[key]))\n          writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n          if result[key_name] > best_perf:\n            best_perf = result[key_name]\n            for ext in [\"meta\", \"data-00000-of-00001\", \"index\"]:\n              src_ckpt = checkpoint_path + \".{}\".format(ext)\n              tgt_ckpt = checkpoint_path.rsplit(\n                  \"-\", 1)[0] + \"-best.{}\".format(ext)\n              tf.logging.info(\"saving {} to {}\".format(src_ckpt, tgt_ckpt))\n              tf.gfile.Copy(src_ckpt, tgt_ckpt, overwrite=True)\n              writer.write(\"saved {} to {}\\n\".format(src_ckpt, tgt_ckpt))\n\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"input_file\")\n  flags.mark_flag_as_required(\"albert_config_file\")\n  flags.mark_flag_as_required(\"output_dir\")\n  tf.app.run()\n"
        },
        {
          "name": "run_pretraining_test.py",
          "type": "blob",
          "size": 4.58984375,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for run_pretraining.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\nimport random\nimport tempfile\nfrom absl.testing import flagsaver\nfrom albert import modeling\nfrom albert import run_pretraining\nimport tensorflow.compat.v1 as tf\n\nFLAGS = tf.app.flags.FLAGS\n\n\ndef _create_config_file(filename, max_seq_length, vocab_size):\n  \"\"\"Creates an AlbertConfig and saves it to file.\"\"\"\n  albert_config = modeling.AlbertConfig(\n      vocab_size,\n      embedding_size=5,\n      hidden_size=14,\n      num_hidden_layers=3,\n      num_hidden_groups=1,\n      num_attention_heads=2,\n      intermediate_size=19,\n      inner_group_num=1,\n      down_scale_factor=1,\n      hidden_act=\"gelu\",\n      hidden_dropout_prob=0,\n      attention_probs_dropout_prob=0,\n      max_position_embeddings=max_seq_length,\n      type_vocab_size=2,\n      initializer_range=0.02)\n  with tf.gfile.Open(filename, \"w\") as outfile:\n    outfile.write(albert_config.to_json_string())\n\n\ndef _create_record(max_predictions_per_seq, max_seq_length, vocab_size):\n  \"\"\"Returns a tf.train.Example containing random data.\"\"\"\n  example = tf.train.Example()\n  example.features.feature[\"input_ids\"].int64_list.value.extend(\n      [random.randint(0, vocab_size - 1) for _ in range(max_seq_length)])\n  example.features.feature[\"input_mask\"].int64_list.value.extend(\n      [random.randint(0, 1) for _ in range(max_seq_length)])\n  example.features.feature[\"masked_lm_positions\"].int64_list.value.extend([\n      random.randint(0, max_seq_length - 1)\n      for _ in range(max_predictions_per_seq)\n  ])\n  example.features.feature[\"masked_lm_ids\"].int64_list.value.extend([\n      random.randint(0, vocab_size - 1) for _ in range(max_predictions_per_seq)\n  ])\n  example.features.feature[\"masked_lm_weights\"].float_list.value.extend(\n      [1. for _ in range(max_predictions_per_seq)])\n  example.features.feature[\"segment_ids\"].int64_list.value.extend(\n      [0 for _ in range(max_seq_length)])\n  example.features.feature[\"next_sentence_labels\"].int64_list.value.append(\n      random.randint(0, 1))\n  return example\n\n\ndef _create_input_file(filename,\n                       max_predictions_per_seq,\n                       max_seq_length,\n                       vocab_size,\n                       size=1000):\n  \"\"\"Creates an input TFRecord file of specified size.\"\"\"\n  with tf.io.TFRecordWriter(filename) as writer:\n    for _ in range(size):\n      ex = _create_record(max_predictions_per_seq, max_seq_length, vocab_size)\n      writer.write(ex.SerializeToString())\n\n\nclass RunPretrainingTest(tf.test.TestCase):\n\n  def _verify_output_file(self, basename):\n    self.assertTrue(tf.gfile.Exists(os.path.join(FLAGS.output_dir, basename)))\n\n  def _verify_checkpoint_files(self, name):\n    self._verify_output_file(name + \".meta\")\n    self._verify_output_file(name + \".index\")\n    self._verify_output_file(name + \".data-00000-of-00001\")\n\n  @flagsaver.flagsaver\n  def test_pretraining(self):\n    # Set up required flags.\n    vocab_size = 97\n    FLAGS.max_predictions_per_seq = 7\n    FLAGS.max_seq_length = 13\n    FLAGS.output_dir = tempfile.mkdtemp(\"output_dir\")\n    FLAGS.albert_config_file = os.path.join(\n        tempfile.mkdtemp(\"config_dir\"), \"albert_config.json\")\n    FLAGS.input_file = os.path.join(\n        tempfile.mkdtemp(\"input_dir\"), \"input_data.tfrecord\")\n    FLAGS.do_train = True\n    FLAGS.do_eval = True\n    FLAGS.num_train_steps = 1\n    FLAGS.save_checkpoints_steps = 1\n\n    # Construct requisite input files.\n    _create_config_file(FLAGS.albert_config_file, FLAGS.max_seq_length,\n                        vocab_size)\n    _create_input_file(FLAGS.input_file, FLAGS.max_predictions_per_seq,\n                       FLAGS.max_seq_length, vocab_size)\n\n    # Run the pretraining.\n    run_pretraining.main(None)\n\n    # Verify output.\n    self._verify_checkpoint_files(\"model.ckpt-best\")\n    self._verify_checkpoint_files(\"model.ckpt-1\")\n    self._verify_output_file(\"eval_results.txt\")\n    self._verify_output_file(\"checkpoint\")\n\n\nif __name__ == \"__main__\":\n  tf.test.main()\n"
        },
        {
          "name": "run_race.py",
          "type": "blob",
          "size": 17.400390625,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"ALBERT finetuning runner with sentence piece tokenization.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\nimport time\nfrom albert import classifier_utils\nfrom albert import fine_tuning_utils\nfrom albert import modeling\nfrom albert import race_utils\nimport tensorflow.compat.v1 as tf\nfrom tensorflow.contrib import cluster_resolver as contrib_cluster_resolver\nfrom tensorflow.contrib import tpu as contrib_tpu\n\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\n## Required parameters\nflags.DEFINE_string(\n    \"data_dir\", None,\n    \"The input data dir. Should contain the .tsv files (or other data files) \"\n    \"for the task.\")\n\nflags.DEFINE_string(\n    \"albert_config_file\", None,\n    \"The config json file corresponding to the pre-trained ALBERT model. \"\n    \"This specifies the model architecture.\")\n\nflags.DEFINE_string(\"task_name\", \"race\", \"The name of the task to train.\")\n\nflags.DEFINE_string(\"vocab_file\", None,\n                    \"The vocabulary file that the ALBERT model was trained on.\")\n\nflags.DEFINE_string(\"train_file\", None,\n                    \"path to preprocessed tfrecord file. \"\n                    \"The file will be generated if not exst.\")\n\nflags.DEFINE_string(\"eval_file\", None,\n                    \"path to preprocessed tfrecord file. \"\n                    \"The file will be generated if not exst.\")\n\nflags.DEFINE_string(\"predict_file\", None,\n                    \"path to preprocessed tfrecord file. \"\n                    \"The file will be generated if not exst.\")\n\nflags.DEFINE_string(\"spm_model_file\", None,\n                    \"The model file for sentence piece tokenization.\")\n\nflags.DEFINE_string(\n    \"output_dir\", None,\n    \"The output directory where the model checkpoints will be written.\")\n\n## Other parameters\n\nflags.DEFINE_string(\n    \"init_checkpoint\", None,\n    \"Initial checkpoint (usually from a pre-trained ALBERT model).\")\n\nflags.DEFINE_string(\n    \"albert_hub_module_handle\", None,\n    \"If set, the ALBERT hub module to use.\")\n\nflags.DEFINE_bool(\n    \"do_lower_case\", True,\n    \"Whether to lower case the input text. Should be True for uncased \"\n    \"models and False for cased models.\")\n\nflags.DEFINE_float(\"dropout_prob\", 0.1, \"dropout probability.\")\n\nflags.DEFINE_integer(\n    \"max_seq_length\", 512,\n    \"The maximum total input sequence length after WordPiece tokenization. \"\n    \"Sequences longer than this will be truncated, and sequences shorter \"\n    \"than this will be padded.\")\n\nflags.DEFINE_integer(\n    \"max_qa_length\", 128,\n    \"The maximum total input sequence length after WordPiece tokenization. \"\n    \"Sequences longer than this will be truncated, and sequences shorter \"\n    \"than this will be padded.\")\n\nflags.DEFINE_integer(\n    \"num_keep_checkpoint\", 5,\n    \"maximum number of keep checkpoints\")\n\n\nflags.DEFINE_bool(\n    \"high_only\", False,\n    \"Whether to only run the model on the high school set.\")\n\nflags.DEFINE_bool(\n    \"middle_only\", False,\n    \"Whether to only run the model on the middle school set.\")\n\nflags.DEFINE_bool(\"do_train\", True, \"Whether to run training.\")\n\nflags.DEFINE_bool(\"do_eval\", True, \"Whether to run eval on the dev set.\")\n\nflags.DEFINE_bool(\n    \"do_predict\", False,\n    \"Whether to run the model in inference mode on the test set.\")\n\nflags.DEFINE_integer(\"train_batch_size\", 32, \"Total batch size for training.\")\n\nflags.DEFINE_integer(\"eval_batch_size\", 8, \"Total batch size for eval.\")\n\nflags.DEFINE_integer(\"predict_batch_size\", 8, \"Total batch size for predict.\")\n\nflags.DEFINE_float(\"learning_rate\", 1e-5, \"The initial learning rate for Adam.\")\n\nflags.DEFINE_integer(\"train_step\", 12000,\n                     \"Total number of training epochs to perform.\")\n\nflags.DEFINE_integer(\n    \"warmup_step\", 1000,\n    \"number of steps to perform linear learning rate warmup for.\")\n\nflags.DEFINE_integer(\"save_checkpoints_steps\", 100,\n                     \"How often to save the model checkpoint.\")\n\nflags.DEFINE_integer(\"iterations_per_loop\", 1000,\n                     \"How many steps to make in each estimator call.\")\n\nflags.DEFINE_bool(\"use_tpu\", False, \"Whether to use TPU or GPU/CPU.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_name\", None,\n    \"The Cloud TPU to use for training. This should be either the name \"\n    \"used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 \"\n    \"url.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_zone\", None,\n    \"[Optional] GCE zone where the Cloud TPU is located in. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\n    \"gcp_project\", None,\n    \"[Optional] Project name for the Cloud TPU-enabled project. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\"master\", None, \"[Optional] TensorFlow master URL.\")\n\nflags.DEFINE_integer(\n    \"num_tpu_cores\", 8,\n    \"Only used if `use_tpu` is True. Total number of TPU cores to use.\")\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  processors = {\n      \"race\": race_utils.RaceProcessor\n  }\n\n  if not FLAGS.do_train and not FLAGS.do_eval and not FLAGS.do_predict:\n    raise ValueError(\n        \"At least one of `do_train`, `do_eval` or `do_predict' must be True.\")\n\n  albert_config = modeling.AlbertConfig.from_json_file(FLAGS.albert_config_file)\n\n  if FLAGS.max_seq_length > albert_config.max_position_embeddings:\n    raise ValueError(\n        \"Cannot use sequence length %d because the ALBERT model \"\n        \"was only trained up to sequence length %d\" %\n        (FLAGS.max_seq_length, albert_config.max_position_embeddings))\n\n  tf.gfile.MakeDirs(FLAGS.output_dir)\n\n  task_name = FLAGS.task_name.lower()\n\n  if task_name not in processors:\n    raise ValueError(\"Task not found: %s\" % (task_name))\n\n  processor = processors[task_name](\n      use_spm=True if FLAGS.spm_model_file else False,\n      do_lower_case=FLAGS.do_lower_case,\n      high_only=FLAGS.high_only,\n      middle_only=FLAGS.middle_only)\n\n  label_list = processor.get_labels()\n\n  tokenizer = fine_tuning_utils.create_vocab(\n      vocab_file=FLAGS.vocab_file,\n      do_lower_case=FLAGS.do_lower_case,\n      spm_model_file=FLAGS.spm_model_file,\n      hub_module=FLAGS.albert_hub_module_handle)\n\n  tpu_cluster_resolver = None\n  if FLAGS.use_tpu and FLAGS.tpu_name:\n    tpu_cluster_resolver = contrib_cluster_resolver.TPUClusterResolver(\n        FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)\n\n  is_per_host = contrib_tpu.InputPipelineConfig.PER_HOST_V2\n  if FLAGS.do_train:\n    iterations_per_loop = int(min(FLAGS.iterations_per_loop,\n                                  FLAGS.save_checkpoints_steps))\n  else:\n    iterations_per_loop = FLAGS.iterations_per_loop\n  run_config = contrib_tpu.RunConfig(\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      save_checkpoints_steps=int(FLAGS.save_checkpoints_steps),\n      keep_checkpoint_max=0,\n      tpu_config=contrib_tpu.TPUConfig(\n          iterations_per_loop=iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n\n  train_examples = None\n  if FLAGS.do_train:\n    train_examples = processor.get_train_examples(FLAGS.data_dir)\n\n  model_fn = race_utils.model_fn_builder(\n      albert_config=albert_config,\n      num_labels=len(label_list),\n      init_checkpoint=FLAGS.init_checkpoint,\n      learning_rate=FLAGS.learning_rate,\n      num_train_steps=FLAGS.train_step,\n      num_warmup_steps=FLAGS.warmup_step,\n      use_tpu=FLAGS.use_tpu,\n      use_one_hot_embeddings=FLAGS.use_tpu,\n      max_seq_length=FLAGS.max_seq_length,\n      dropout_prob=FLAGS.dropout_prob,\n      hub_module=FLAGS.albert_hub_module_handle)\n\n  # If TPU is not available, this will fall back to normal Estimator on CPU\n  # or GPU.\n  estimator = contrib_tpu.TPUEstimator(\n      use_tpu=FLAGS.use_tpu,\n      model_fn=model_fn,\n      config=run_config,\n      train_batch_size=FLAGS.train_batch_size,\n      eval_batch_size=FLAGS.eval_batch_size,\n      predict_batch_size=FLAGS.predict_batch_size)\n\n  if FLAGS.do_train:\n    if not tf.gfile.Exists(FLAGS.train_file):\n      race_utils.file_based_convert_examples_to_features(\n          train_examples, label_list, FLAGS.max_seq_length, tokenizer,\n          FLAGS.train_file, FLAGS.max_qa_length)\n    tf.logging.info(\"***** Running training *****\")\n    tf.logging.info(\"  Num examples = %d\", len(train_examples))\n    tf.logging.info(\"  Batch size = %d\", FLAGS.train_batch_size)\n    tf.logging.info(\"  Num steps = %d\", FLAGS.train_step)\n    train_input_fn = classifier_utils.file_based_input_fn_builder(\n        input_file=FLAGS.train_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=True,\n        drop_remainder=True,\n        task_name=task_name,\n        use_tpu=FLAGS.use_tpu,\n        bsz=FLAGS.train_batch_size,\n        multiple=len(label_list))\n    estimator.train(input_fn=train_input_fn, max_steps=FLAGS.train_step)\n\n  if FLAGS.do_eval:\n    eval_examples = processor.get_dev_examples(FLAGS.data_dir)\n    num_actual_eval_examples = len(eval_examples)\n    if FLAGS.use_tpu:\n      # TPU requires a fixed batch size for all batches, therefore the number\n      # of examples must be a multiple of the batch size, or else examples\n      # will get dropped. So we pad with fake examples which are ignored\n      # later on. These do NOT count towards the metric (all tf.metrics\n      # support a per-instance weight, and these get a weight of 0.0).\n      while len(eval_examples) % FLAGS.eval_batch_size != 0:\n        eval_examples.append(classifier_utils.PaddingInputExample())\n\n    if not tf.gfile.Exists(FLAGS.eval_file):\n      race_utils.file_based_convert_examples_to_features(\n          eval_examples, label_list, FLAGS.max_seq_length, tokenizer,\n          FLAGS.eval_file, FLAGS.max_qa_length)\n\n    tf.logging.info(\"***** Running evaluation *****\")\n    tf.logging.info(\"  Num examples = %d (%d actual, %d padding)\",\n                    len(eval_examples), num_actual_eval_examples,\n                    len(eval_examples) - num_actual_eval_examples)\n    tf.logging.info(\"  Batch size = %d\", FLAGS.eval_batch_size)\n\n    # This tells the estimator to run through the entire set.\n    eval_steps = None\n    # However, if running eval on the TPU, you will need to specify the\n    # number of steps.\n    if FLAGS.use_tpu:\n      assert len(eval_examples) % FLAGS.eval_batch_size == 0\n      eval_steps = int(len(eval_examples) // FLAGS.eval_batch_size)\n\n    eval_drop_remainder = True if FLAGS.use_tpu else False\n    eval_input_fn = classifier_utils.file_based_input_fn_builder(\n        input_file=FLAGS.eval_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=False,\n        drop_remainder=eval_drop_remainder,\n        task_name=task_name,\n        use_tpu=FLAGS.use_tpu,\n        bsz=FLAGS.eval_batch_size,\n        multiple=len(label_list))\n\n    def _find_valid_cands(curr_step):\n      filenames = tf.gfile.ListDirectory(FLAGS.output_dir)\n      candidates = []\n      for filename in filenames:\n        if filename.endswith(\".index\"):\n          ckpt_name = filename[:-6]\n          idx = ckpt_name.split(\"-\")[-1]\n          if idx != \"best\" and int(idx) > curr_step:\n            candidates.append(filename)\n      return candidates\n\n    output_eval_file = os.path.join(FLAGS.output_dir, \"eval_results.txt\")\n    checkpoint_path = os.path.join(FLAGS.output_dir, \"model.ckpt-best\")\n    key_name = \"eval_accuracy\"\n    if tf.gfile.Exists(checkpoint_path + \".index\"):\n      result = estimator.evaluate(\n          input_fn=eval_input_fn,\n          steps=eval_steps,\n          checkpoint_path=checkpoint_path)\n      best_perf = result[key_name]\n      global_step = result[\"global_step\"]\n    else:\n      global_step = -1\n      best_perf = -1\n      checkpoint_path = None\n    writer = tf.gfile.GFile(output_eval_file, \"w\")\n    while global_step < FLAGS.train_step:\n      steps_and_files = {}\n      filenames = tf.gfile.ListDirectory(FLAGS.output_dir)\n      for filename in filenames:\n        if filename.endswith(\".index\"):\n          ckpt_name = filename[:-6]\n          cur_filename = os.path.join(FLAGS.output_dir, ckpt_name)\n          if cur_filename.split(\"-\")[-1] == \"best\":\n            continue\n          gstep = int(cur_filename.split(\"-\")[-1])\n          if gstep not in steps_and_files:\n            tf.logging.info(\"Add {} to eval list.\".format(cur_filename))\n            steps_and_files[gstep] = cur_filename\n      tf.logging.info(\"found {} files.\".format(len(steps_and_files)))\n      # steps_and_files = sorted(steps_and_files, key=lambda x: x[0])\n      if not steps_and_files:\n        tf.logging.info(\"found 0 file, global step: {}. Sleeping.\"\n                        .format(global_step))\n        time.sleep(1)\n      else:\n        for ele in sorted(steps_and_files.items()):\n          step, checkpoint_path = ele\n          if global_step >= step:\n            if len(_find_valid_cands(step)) > 1:\n              for ext in [\"meta\", \"data-00000-of-00001\", \"index\"]:\n                src_ckpt = checkpoint_path + \".{}\".format(ext)\n                tf.logging.info(\"removing {}\".format(src_ckpt))\n                tf.gfile.Remove(src_ckpt)\n            continue\n          result = estimator.evaluate(\n              input_fn=eval_input_fn,\n              steps=eval_steps,\n              checkpoint_path=checkpoint_path)\n          global_step = result[\"global_step\"]\n          tf.logging.info(\"***** Eval results *****\")\n          for key in sorted(result.keys()):\n            tf.logging.info(\"  %s = %s\", key, str(result[key]))\n            writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n          writer.write(\"best = {}\\n\".format(best_perf))\n          if result[key_name] > best_perf:\n            best_perf = result[key_name]\n            for ext in [\"meta\", \"data-00000-of-00001\", \"index\"]:\n              src_ckpt = checkpoint_path + \".{}\".format(ext)\n              tgt_ckpt = checkpoint_path.rsplit(\"-\", 1)[0] + \"-best.{}\".format(ext)\n              tf.logging.info(\"saving {} to {}\".format(src_ckpt, tgt_ckpt))\n              tf.gfile.Copy(src_ckpt, tgt_ckpt, overwrite=True)\n              writer.write(\"saved {} to {}\\n\".format(src_ckpt, tgt_ckpt))\n\n          if len(_find_valid_cands(global_step)) > 1:\n            for ext in [\"meta\", \"data-00000-of-00001\", \"index\"]:\n              src_ckpt = checkpoint_path + \".{}\".format(ext)\n              tf.logging.info(\"removing {}\".format(src_ckpt))\n              tf.gfile.Remove(src_ckpt)\n          writer.write(\"=\" * 50 + \"\\n\")\n    writer.close()\n  if FLAGS.do_predict:\n    predict_examples = processor.get_test_examples(FLAGS.data_dir)\n    num_actual_predict_examples = len(predict_examples)\n    if FLAGS.use_tpu:\n      # TPU requires a fixed batch size for all batches, therefore the number\n      # of examples must be a multiple of the batch size, or else examples\n      # will get dropped. So we pad with fake examples which are ignored\n      # later on.\n      while len(predict_examples) % FLAGS.predict_batch_size != 0:\n        predict_examples.append(classifier_utils.PaddingInputExample())\n      assert len(predict_examples) % FLAGS.predict_batch_size == 0\n      predict_steps = int(len(predict_examples) // FLAGS.predict_batch_size)\n\n    predict_file = os.path.join(FLAGS.output_dir, \"predict.tf_record\")\n    race_utils.file_based_convert_examples_to_features(\n        predict_examples, label_list,\n        FLAGS.max_seq_length, tokenizer,\n        predict_file, FLAGS.max_qa_length)\n\n    tf.logging.info(\"***** Running prediction*****\")\n    tf.logging.info(\"  Num examples = %d (%d actual, %d padding)\",\n                    len(predict_examples), num_actual_predict_examples,\n                    len(predict_examples) - num_actual_predict_examples)\n    tf.logging.info(\"  Batch size = %d\", FLAGS.predict_batch_size)\n\n    predict_drop_remainder = True if FLAGS.use_tpu else False\n    predict_input_fn = classifier_utils.file_based_input_fn_builder(\n        input_file=predict_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=False,\n        drop_remainder=predict_drop_remainder,\n        task_name=task_name,\n        use_tpu=FLAGS.use_tpu,\n        bsz=FLAGS.predict_batch_size,\n        multiple=len(label_list))\n\n    checkpoint_path = os.path.join(FLAGS.output_dir, \"model.ckpt-best\")\n    result = estimator.evaluate(\n        input_fn=predict_input_fn,\n        steps=predict_steps,\n        checkpoint_path=checkpoint_path)\n\n    output_predict_file = os.path.join(FLAGS.output_dir, \"predict_results.txt\")\n    with tf.gfile.GFile(output_predict_file, \"w\") as pred_writer:\n      # num_written_lines = 0\n      tf.logging.info(\"***** Predict results *****\")\n      pred_writer.write(\"***** Predict results *****\\n\")\n      for key in sorted(result.keys()):\n        tf.logging.info(\"  %s = %s\", key, str(result[key]))\n        pred_writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n      pred_writer.write(\"best = {}\\n\".format(best_perf))\n\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"data_dir\")\n  flags.mark_flag_as_required(\"spm_model_file\")\n  flags.mark_flag_as_required(\"albert_config_file\")\n  flags.mark_flag_as_required(\"output_dir\")\n  tf.app.run()\n"
        },
        {
          "name": "run_squad_v1.py",
          "type": "blob",
          "size": 20.1337890625,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Run ALBERT on SQuAD v1.1 using sentence piece tokenization.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\nimport json\nimport os\nimport random\nimport time\nfrom albert import fine_tuning_utils\nfrom albert import modeling\nfrom albert import squad_utils\nimport six\nimport tensorflow.compat.v1 as tf\nfrom tensorflow.compat.v1 import estimator as tf_estimator\n\nfrom tensorflow.contrib import cluster_resolver as contrib_cluster_resolver\nfrom tensorflow.contrib import tpu as contrib_tpu\n\n\n# pylint: disable=g-import-not-at-top\nif six.PY2:\n  import six.moves.cPickle as pickle\nelse:\n  import pickle\n# pylint: enable=g-import-not-at-top\n\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\n## Required parameters\nflags.DEFINE_string(\n    \"albert_config_file\", None,\n    \"The config json file corresponding to the pre-trained BERT model. \"\n    \"This specifies the model architecture.\")\n\nflags.DEFINE_string(\"vocab_file\", None,\n                    \"The vocabulary file that the BERT model was trained on.\")\n\nflags.DEFINE_string(\"spm_model_file\", None,\n                    \"The model file for sentence piece tokenization.\")\n\nflags.DEFINE_string(\n    \"output_dir\", None,\n    \"The output directory where the model checkpoints will be written.\")\n\n## Other parameters\nflags.DEFINE_string(\"train_file\", None,\n                    \"SQuAD json for training. E.g., train-v1.1.json\")\n\nflags.DEFINE_string(\n    \"predict_file\", None,\n    \"SQuAD json for predictions. E.g., dev-v1.1.json or test-v1.1.json\")\n\nflags.DEFINE_string(\"train_feature_file\", None,\n                    \"training feature file.\")\n\nflags.DEFINE_string(\n    \"predict_feature_file\", None,\n    \"Location of predict features. If it doesn't exist, it will be written. \"\n    \"If it does exist, it will be read.\")\n\nflags.DEFINE_string(\n    \"predict_feature_left_file\", None,\n    \"Location of predict features not passed to TPU. If it doesn't exist, it \"\n    \"will be written. If it does exist, it will be read.\")\n\nflags.DEFINE_string(\n    \"init_checkpoint\", None,\n    \"Initial checkpoint (usually from a pre-trained BERT model).\")\n\nflags.DEFINE_string(\n    \"albert_hub_module_handle\", None,\n    \"If set, the ALBERT hub module to use.\")\n\nflags.DEFINE_bool(\n    \"do_lower_case\", True,\n    \"Whether to lower case the input text. Should be True for uncased \"\n    \"models and False for cased models.\")\n\nflags.DEFINE_integer(\n    \"max_seq_length\", 384,\n    \"The maximum total input sequence length after WordPiece tokenization. \"\n    \"Sequences longer than this will be truncated, and sequences shorter \"\n    \"than this will be padded.\")\n\nflags.DEFINE_integer(\n    \"doc_stride\", 128,\n    \"When splitting up a long document into chunks, how much stride to \"\n    \"take between chunks.\")\n\nflags.DEFINE_integer(\n    \"max_query_length\", 64,\n    \"The maximum number of tokens for the question. Questions longer than \"\n    \"this will be truncated to this length.\")\n\nflags.DEFINE_bool(\"do_train\", False, \"Whether to run training.\")\n\nflags.DEFINE_bool(\"do_predict\", False, \"Whether to run eval on the dev set.\")\n\nflags.DEFINE_integer(\"train_batch_size\", 32, \"Total batch size for training.\")\n\nflags.DEFINE_integer(\"predict_batch_size\", 8,\n                     \"Total batch size for predictions.\")\n\nflags.DEFINE_float(\"learning_rate\", 5e-5, \"The initial learning rate for Adam.\")\n\nflags.DEFINE_float(\"num_train_epochs\", 3.0,\n                   \"Total number of training epochs to perform.\")\n\nflags.DEFINE_float(\n    \"warmup_proportion\", 0.1,\n    \"Proportion of training to perform linear learning rate warmup for. \"\n    \"E.g., 0.1 = 10% of training.\")\n\nflags.DEFINE_integer(\"save_checkpoints_steps\", 1000,\n                     \"How often to save the model checkpoint.\")\n\nflags.DEFINE_integer(\"iterations_per_loop\", 1000,\n                     \"How many steps to make in each estimator call.\")\n\nflags.DEFINE_integer(\n    \"n_best_size\", 20,\n    \"The total number of n-best predictions to generate in the \"\n    \"nbest_predictions.json output file.\")\n\nflags.DEFINE_integer(\n    \"max_answer_length\", 30,\n    \"The maximum length of an answer that can be generated. This is needed \"\n    \"because the start and end predictions are not conditioned on one another.\")\n\nflags.DEFINE_bool(\"use_tpu\", False, \"Whether to use TPU or GPU/CPU.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_name\", None,\n    \"The Cloud TPU to use for training. This should be either the name \"\n    \"used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 \"\n    \"url.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_zone\", None,\n    \"[Optional] GCE zone where the Cloud TPU is located in. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\n    \"gcp_project\", None,\n    \"[Optional] Project name for the Cloud TPU-enabled project. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\"master\", None, \"[Optional] TensorFlow master URL.\")\n\nflags.DEFINE_integer(\n    \"num_tpu_cores\", 8,\n    \"Only used if `use_tpu` is True. Total number of TPU cores to use.\")\n\nflags.DEFINE_bool(\n    \"use_einsum\", True,\n    \"Whether to use tf.einsum or tf.reshape+tf.matmul for dense layers. Must \"\n    \"be set to False for TFLite compatibility.\")\n\nflags.DEFINE_string(\n    \"export_dir\",\n    default=None,\n    help=(\"The directory where the exported SavedModel will be stored.\"))\n\n\ndef validate_flags_or_throw(albert_config):\n  \"\"\"Validate the input FLAGS or throw an exception.\"\"\"\n\n  if not FLAGS.do_train and not FLAGS.do_predict and not FLAGS.export_dir:\n    err_msg = \"At least one of `do_train` or `do_predict` or `export_dir`\" + \"must be True.\"\n    raise ValueError(err_msg)\n\n  if FLAGS.do_train:\n    if not FLAGS.train_file:\n      raise ValueError(\n          \"If `do_train` is True, then `train_file` must be specified.\")\n  if FLAGS.do_predict:\n    if not FLAGS.predict_file:\n      raise ValueError(\n          \"If `do_predict` is True, then `predict_file` must be specified.\")\n    if not FLAGS.predict_feature_file:\n      raise ValueError(\n          \"If `do_predict` is True, then `predict_feature_file` must be \"\n          \"specified.\")\n    if not FLAGS.predict_feature_left_file:\n      raise ValueError(\n          \"If `do_predict` is True, then `predict_feature_left_file` must be \"\n          \"specified.\")\n\n  if FLAGS.max_seq_length > albert_config.max_position_embeddings:\n    raise ValueError(\n        \"Cannot use sequence length %d because the ALBERT model \"\n        \"was only trained up to sequence length %d\" %\n        (FLAGS.max_seq_length, albert_config.max_position_embeddings))\n\n  if FLAGS.max_seq_length <= FLAGS.max_query_length + 3:\n    raise ValueError(\n        \"The max_seq_length (%d) must be greater than max_query_length \"\n        \"(%d) + 3\" % (FLAGS.max_seq_length, FLAGS.max_query_length))\n\n\ndef build_squad_serving_input_fn(seq_length):\n  \"\"\"Builds a serving input fn for raw input.\"\"\"\n\n  def _seq_serving_input_fn():\n    \"\"\"Serving input fn for raw images.\"\"\"\n    input_ids = tf.placeholder(\n        shape=[1, seq_length], name=\"input_ids\", dtype=tf.int32)\n    input_mask = tf.placeholder(\n        shape=[1, seq_length], name=\"input_mask\", dtype=tf.int32)\n    segment_ids = tf.placeholder(\n        shape=[1, seq_length], name=\"segment_ids\", dtype=tf.int32)\n\n    inputs = {\n        \"input_ids\": input_ids,\n        \"input_mask\": input_mask,\n        \"segment_ids\": segment_ids\n    }\n    return tf_estimator.export.ServingInputReceiver(features=inputs,\n                                                    receiver_tensors=inputs)\n\n  return _seq_serving_input_fn\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  albert_config = modeling.AlbertConfig.from_json_file(FLAGS.albert_config_file)\n\n  validate_flags_or_throw(albert_config)\n\n  tf.gfile.MakeDirs(FLAGS.output_dir)\n\n  tokenizer = fine_tuning_utils.create_vocab(\n      vocab_file=FLAGS.vocab_file,\n      do_lower_case=FLAGS.do_lower_case,\n      spm_model_file=FLAGS.spm_model_file,\n      hub_module=FLAGS.albert_hub_module_handle)\n\n  tpu_cluster_resolver = None\n  if FLAGS.use_tpu and FLAGS.tpu_name:\n    tpu_cluster_resolver = contrib_cluster_resolver.TPUClusterResolver(\n        FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)\n\n  is_per_host = contrib_tpu.InputPipelineConfig.PER_HOST_V2\n  if FLAGS.do_train:\n    iterations_per_loop = int(min(FLAGS.iterations_per_loop,\n                                  FLAGS.save_checkpoints_steps))\n  else:\n    iterations_per_loop = FLAGS.iterations_per_loop\n  run_config = contrib_tpu.RunConfig(\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      keep_checkpoint_max=0,\n      save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n      tpu_config=contrib_tpu.TPUConfig(\n          iterations_per_loop=iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n\n  train_examples = None\n  num_train_steps = None\n  num_warmup_steps = None\n  if FLAGS.do_train:\n    train_examples = squad_utils.read_squad_examples(\n        input_file=FLAGS.train_file, is_training=True)\n    num_train_steps = int(\n        len(train_examples) / FLAGS.train_batch_size * FLAGS.num_train_epochs)\n    num_warmup_steps = int(num_train_steps * FLAGS.warmup_proportion)\n\n    # Pre-shuffle the input to avoid having to make a very large shuffle\n    # buffer in in the `input_fn`.\n    rng = random.Random(12345)\n    rng.shuffle(train_examples)\n\n  model_fn = squad_utils.v1_model_fn_builder(\n      albert_config=albert_config,\n      init_checkpoint=FLAGS.init_checkpoint,\n      learning_rate=FLAGS.learning_rate,\n      num_train_steps=num_train_steps,\n      num_warmup_steps=num_warmup_steps,\n      use_tpu=FLAGS.use_tpu,\n      use_one_hot_embeddings=FLAGS.use_tpu,\n      use_einsum=FLAGS.use_einsum,\n      hub_module=FLAGS.albert_hub_module_handle)\n\n  # If TPU is not available, this will fall back to normal Estimator on CPU\n  # or GPU.\n  estimator = contrib_tpu.TPUEstimator(\n      use_tpu=FLAGS.use_tpu,\n      model_fn=model_fn,\n      config=run_config,\n      train_batch_size=FLAGS.train_batch_size,\n      predict_batch_size=FLAGS.predict_batch_size)\n\n  if FLAGS.do_train:\n    # We write to a temporary file to avoid storing very large constant tensors\n    # in memory.\n\n    if not tf.gfile.Exists(FLAGS.train_feature_file):\n      train_writer = squad_utils.FeatureWriter(\n          filename=os.path.join(FLAGS.train_feature_file), is_training=True)\n      squad_utils.convert_examples_to_features(\n          examples=train_examples,\n          tokenizer=tokenizer,\n          max_seq_length=FLAGS.max_seq_length,\n          doc_stride=FLAGS.doc_stride,\n          max_query_length=FLAGS.max_query_length,\n          is_training=True,\n          output_fn=train_writer.process_feature,\n          do_lower_case=FLAGS.do_lower_case)\n      train_writer.close()\n\n    tf.logging.info(\"***** Running training *****\")\n    tf.logging.info(\"  Num orig examples = %d\", len(train_examples))\n    # tf.logging.info(\"  Num split examples = %d\", train_writer.num_features)\n    tf.logging.info(\"  Batch size = %d\", FLAGS.train_batch_size)\n    tf.logging.info(\"  Num steps = %d\", num_train_steps)\n    del train_examples\n\n    train_input_fn = squad_utils.input_fn_builder(\n        input_file=FLAGS.train_feature_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=True,\n        drop_remainder=True,\n        use_tpu=FLAGS.use_tpu,\n        bsz=FLAGS.train_batch_size,\n        is_v2=False)\n    estimator.train(input_fn=train_input_fn, max_steps=num_train_steps)\n\n  if FLAGS.do_predict:\n    with tf.gfile.Open(FLAGS.predict_file) as predict_file:\n      prediction_json = json.load(predict_file)[\"data\"]\n\n    eval_examples = squad_utils.read_squad_examples(\n        input_file=FLAGS.predict_file, is_training=False)\n\n    if (tf.gfile.Exists(FLAGS.predict_feature_file) and tf.gfile.Exists(\n        FLAGS.predict_feature_left_file)):\n      tf.logging.info(\"Loading eval features from {}\".format(\n          FLAGS.predict_feature_left_file))\n      with tf.gfile.Open(FLAGS.predict_feature_left_file, \"rb\") as fin:\n        eval_features = pickle.load(fin)\n    else:\n      eval_writer = squad_utils.FeatureWriter(\n          filename=FLAGS.predict_feature_file, is_training=False)\n      eval_features = []\n\n      def append_feature(feature):\n        eval_features.append(feature)\n        eval_writer.process_feature(feature)\n\n      squad_utils.convert_examples_to_features(\n          examples=eval_examples,\n          tokenizer=tokenizer,\n          max_seq_length=FLAGS.max_seq_length,\n          doc_stride=FLAGS.doc_stride,\n          max_query_length=FLAGS.max_query_length,\n          is_training=False,\n          output_fn=append_feature,\n          do_lower_case=FLAGS.do_lower_case)\n      eval_writer.close()\n\n      with tf.gfile.Open(FLAGS.predict_feature_left_file, \"wb\") as fout:\n        pickle.dump(eval_features, fout)\n\n    tf.logging.info(\"***** Running predictions *****\")\n    tf.logging.info(\"  Num orig examples = %d\", len(eval_examples))\n    tf.logging.info(\"  Num split examples = %d\", len(eval_features))\n    tf.logging.info(\"  Batch size = %d\", FLAGS.predict_batch_size)\n\n    predict_input_fn = squad_utils.input_fn_builder(\n        input_file=FLAGS.predict_feature_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=False,\n        drop_remainder=False,\n        use_tpu=FLAGS.use_tpu,\n        bsz=FLAGS.predict_batch_size,\n        is_v2=False)\n\n    def get_result(checkpoint):\n      \"\"\"Evaluate the checkpoint on SQuAD 1.0.\"\"\"\n      # If running eval on the TPU, you will need to specify the number of\n      # steps.\n      reader = tf.train.NewCheckpointReader(checkpoint)\n      global_step = reader.get_tensor(tf.GraphKeys.GLOBAL_STEP)\n      all_results = []\n      for result in estimator.predict(\n          predict_input_fn, yield_single_examples=True,\n          checkpoint_path=checkpoint):\n        if len(all_results) % 1000 == 0:\n          tf.logging.info(\"Processing example: %d\" % (len(all_results)))\n        unique_id = int(result[\"unique_ids\"])\n        start_log_prob = [float(x) for x in result[\"start_log_prob\"].flat]\n        end_log_prob = [float(x) for x in result[\"end_log_prob\"].flat]\n        all_results.append(\n            squad_utils.RawResult(\n                unique_id=unique_id,\n                start_log_prob=start_log_prob,\n                end_log_prob=end_log_prob))\n\n      output_prediction_file = os.path.join(\n          FLAGS.output_dir, \"predictions.json\")\n      output_nbest_file = os.path.join(\n          FLAGS.output_dir, \"nbest_predictions.json\")\n\n      result_dict = {}\n      squad_utils.accumulate_predictions_v1(\n          result_dict, eval_examples, eval_features,\n          all_results, FLAGS.n_best_size, FLAGS.max_answer_length)\n      predictions = squad_utils.write_predictions_v1(\n          result_dict, eval_examples, eval_features, all_results,\n          FLAGS.n_best_size, FLAGS.max_answer_length,\n          output_prediction_file, output_nbest_file)\n\n      return squad_utils.evaluate_v1(\n          prediction_json, predictions), int(global_step)\n\n    def _find_valid_cands(curr_step):\n      filenames = tf.gfile.ListDirectory(FLAGS.output_dir)\n      candidates = []\n      for filename in filenames:\n        if filename.endswith(\".index\"):\n          ckpt_name = filename[:-6]\n          idx = ckpt_name.split(\"-\")[-1]\n          if idx != \"best\" and int(idx) > curr_step:\n            candidates.append(filename)\n      return candidates\n\n    output_eval_file = os.path.join(FLAGS.output_dir, \"eval_results.txt\")\n    checkpoint_path = os.path.join(FLAGS.output_dir, \"model.ckpt-best\")\n    key_name = \"f1\"\n    writer = tf.gfile.GFile(output_eval_file, \"w\")\n    if tf.gfile.Exists(checkpoint_path + \".index\"):\n      result = get_result(checkpoint_path)\n      best_perf = result[0][key_name]\n      global_step = result[1]\n    else:\n      global_step = -1\n      best_perf = -1\n      checkpoint_path = None\n    while global_step < num_train_steps:\n      steps_and_files = {}\n      filenames = tf.gfile.ListDirectory(FLAGS.output_dir)\n      for filename in filenames:\n        if filename.endswith(\".index\"):\n          ckpt_name = filename[:-6]\n          cur_filename = os.path.join(FLAGS.output_dir, ckpt_name)\n          if cur_filename.split(\"-\")[-1] == \"best\":\n            continue\n          gstep = int(cur_filename.split(\"-\")[-1])\n          if gstep not in steps_and_files:\n            tf.logging.info(\"Add {} to eval list.\".format(cur_filename))\n            steps_and_files[gstep] = cur_filename\n      tf.logging.info(\"found {} files.\".format(len(steps_and_files)))\n      if not steps_and_files:\n        tf.logging.info(\"found 0 file, global step: {}. Sleeping.\"\n                        .format(global_step))\n        time.sleep(60)\n      else:\n        for ele in sorted(steps_and_files.items()):\n          step, checkpoint_path = ele\n          if global_step >= step:\n            if len(_find_valid_cands(step)) > 1:\n              for ext in [\"meta\", \"data-00000-of-00001\", \"index\"]:\n                src_ckpt = checkpoint_path + \".{}\".format(ext)\n                tf.logging.info(\"removing {}\".format(src_ckpt))\n                tf.gfile.Remove(src_ckpt)\n            continue\n          result, global_step = get_result(checkpoint_path)\n          tf.logging.info(\"***** Eval results *****\")\n          for key in sorted(result.keys()):\n            tf.logging.info(\"  %s = %s\", key, str(result[key]))\n            writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n          if result[key_name] > best_perf:\n            best_perf = result[key_name]\n            for ext in [\"meta\", \"data-00000-of-00001\", \"index\"]:\n              src_ckpt = checkpoint_path + \".{}\".format(ext)\n              tgt_ckpt = checkpoint_path.rsplit(\n                  \"-\", 1)[0] + \"-best.{}\".format(ext)\n              tf.logging.info(\"saving {} to {}\".format(src_ckpt, tgt_ckpt))\n              tf.gfile.Copy(src_ckpt, tgt_ckpt, overwrite=True)\n              writer.write(\"saved {} to {}\\n\".format(src_ckpt, tgt_ckpt))\n          writer.write(\"best {} = {}\\n\".format(key_name, best_perf))\n          tf.logging.info(\"  best {} = {}\\n\".format(key_name, best_perf))\n\n          if len(_find_valid_cands(global_step)) > 2:\n            for ext in [\"meta\", \"data-00000-of-00001\", \"index\"]:\n              src_ckpt = checkpoint_path + \".{}\".format(ext)\n              tf.logging.info(\"removing {}\".format(src_ckpt))\n              tf.gfile.Remove(src_ckpt)\n          writer.write(\"=\" * 50 + \"\\n\")\n\n    checkpoint_path = os.path.join(FLAGS.output_dir, \"model.ckpt-best\")\n    result, global_step = get_result(checkpoint_path)\n    tf.logging.info(\"***** Final Eval results *****\")\n    for key in sorted(result.keys()):\n      tf.logging.info(\"  %s = %s\", key, str(result[key]))\n      writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n    writer.write(\"best perf happened at step: {}\".format(global_step))\n\n  if FLAGS.export_dir:\n    tf.gfile.MakeDirs(FLAGS.export_dir)\n    squad_serving_input_fn = (\n        build_squad_serving_input_fn(FLAGS.max_seq_length))\n    tf.logging.info(\"Starting to export model.\")\n    subfolder = estimator.export_saved_model(\n        export_dir_base=os.path.join(FLAGS.export_dir, \"saved_model\"),\n        serving_input_receiver_fn=squad_serving_input_fn)\n\n    tf.logging.info(\"Starting to export TFLite.\")\n    converter = tf.lite.TFLiteConverter.from_saved_model(\n        subfolder,\n        input_arrays=[\"input_ids\", \"input_mask\", \"segment_ids\"],\n        output_arrays=[\"start_logits\", \"end_logits\"])\n    float_model = converter.convert()\n    tflite_file = os.path.join(FLAGS.export_dir, \"albert_model.tflite\")\n    with tf.gfile.GFile(tflite_file, \"wb\") as f:\n      f.write(float_model)\n\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"spm_model_file\")\n  flags.mark_flag_as_required(\"albert_config_file\")\n  flags.mark_flag_as_required(\"output_dir\")\n  tf.app.run()\n"
        },
        {
          "name": "run_squad_v2.py",
          "type": "blob",
          "size": 19.02734375,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Run ALBERT on SQuAD v2.0 using sentence piece tokenization.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\nimport json\nimport os\nimport random\nimport time\n\nfrom albert import fine_tuning_utils\nfrom albert import modeling\nfrom albert import squad_utils\nimport six\nimport tensorflow.compat.v1 as tf\n\nfrom tensorflow.contrib import cluster_resolver as contrib_cluster_resolver\nfrom tensorflow.contrib import tpu as contrib_tpu\n\n\n# pylint: disable=g-import-not-at-top\nif six.PY2:\n  import six.moves.cPickle as pickle\nelse:\n  import pickle\n# pylint: enable=g-import-not-at-top\n\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\n## Required parameters\nflags.DEFINE_string(\n    \"albert_config_file\", None,\n    \"The config json file corresponding to the pre-trained ALBERT model. \"\n    \"This specifies the model architecture.\")\n\nflags.DEFINE_string(\"vocab_file\", None,\n                    \"The vocabulary file that the ALBERT model was trained on.\")\n\nflags.DEFINE_string(\"spm_model_file\", None,\n                    \"The model file for sentence piece tokenization.\")\n\nflags.DEFINE_string(\n    \"output_dir\", None,\n    \"The output directory where the model checkpoints will be written.\")\n\n## Other parameters\nflags.DEFINE_string(\"train_file\", None,\n                    \"SQuAD json for training. E.g., train-v1.1.json\")\n\nflags.DEFINE_string(\n    \"predict_file\", None,\n    \"SQuAD json for predictions. E.g., dev-v1.1.json or test-v1.1.json\")\n\nflags.DEFINE_string(\"train_feature_file\", None,\n                    \"training feature file.\")\n\nflags.DEFINE_string(\n    \"predict_feature_file\", None,\n    \"Location of predict features. If it doesn't exist, it will be written. \"\n    \"If it does exist, it will be read.\")\n\nflags.DEFINE_string(\n    \"predict_feature_left_file\", None,\n    \"Location of predict features not passed to TPU. If it doesn't exist, it \"\n    \"will be written. If it does exist, it will be read.\")\n\nflags.DEFINE_string(\n    \"init_checkpoint\", None,\n    \"Initial checkpoint (usually from a pre-trained BERT model).\")\n\nflags.DEFINE_string(\n    \"albert_hub_module_handle\", None,\n    \"If set, the ALBERT hub module to use.\")\n\nflags.DEFINE_bool(\n    \"do_lower_case\", True,\n    \"Whether to lower case the input text. Should be True for uncased \"\n    \"models and False for cased models.\")\n\nflags.DEFINE_integer(\n    \"max_seq_length\", 384,\n    \"The maximum total input sequence length after WordPiece tokenization. \"\n    \"Sequences longer than this will be truncated, and sequences shorter \"\n    \"than this will be padded.\")\n\nflags.DEFINE_integer(\n    \"doc_stride\", 128,\n    \"When splitting up a long document into chunks, how much stride to \"\n    \"take between chunks.\")\n\nflags.DEFINE_integer(\n    \"max_query_length\", 64,\n    \"The maximum number of tokens for the question. Questions longer than \"\n    \"this will be truncated to this length.\")\n\nflags.DEFINE_bool(\"do_train\", False, \"Whether to run training.\")\n\nflags.DEFINE_bool(\"do_predict\", False, \"Whether to run eval on the dev set.\")\n\nflags.DEFINE_integer(\"train_batch_size\", 32, \"Total batch size for training.\")\n\nflags.DEFINE_integer(\"predict_batch_size\", 8,\n                     \"Total batch size for predictions.\")\n\nflags.DEFINE_float(\"learning_rate\", 5e-5, \"The initial learning rate for Adam.\")\n\nflags.DEFINE_float(\"num_train_epochs\", 3.0,\n                   \"Total number of training epochs to perform.\")\n\nflags.DEFINE_float(\n    \"warmup_proportion\", 0.1,\n    \"Proportion of training to perform linear learning rate warmup for. \"\n    \"E.g., 0.1 = 10% of training.\")\n\nflags.DEFINE_integer(\"save_checkpoints_steps\", 1000,\n                     \"How often to save the model checkpoint.\")\n\nflags.DEFINE_integer(\"iterations_per_loop\", 1000,\n                     \"How many steps to make in each estimator call.\")\n\nflags.DEFINE_integer(\n    \"n_best_size\", 20,\n    \"The total number of n-best predictions to generate in the \"\n    \"nbest_predictions.json output file.\")\n\nflags.DEFINE_integer(\n    \"max_answer_length\", 30,\n    \"The maximum length of an answer that can be generated. This is needed \"\n    \"because the start and end predictions are not conditioned on one another.\")\n\nflags.DEFINE_bool(\"use_tpu\", False, \"Whether to use TPU or GPU/CPU.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_name\", None,\n    \"The Cloud TPU to use for training. This should be either the name \"\n    \"used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 \"\n    \"url.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_zone\", None,\n    \"[Optional] GCE zone where the Cloud TPU is located in. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\n    \"gcp_project\", None,\n    \"[Optional] Project name for the Cloud TPU-enabled project. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\"master\", None, \"[Optional] TensorFlow master URL.\")\n\nflags.DEFINE_integer(\n    \"num_tpu_cores\", 8,\n    \"Only used if `use_tpu` is True. Total number of TPU cores to use.\")\n\n\nflags.DEFINE_integer(\"start_n_top\", 5, \"beam size for the start positions.\")\n\nflags.DEFINE_integer(\"end_n_top\", 5, \"beam size for the end positions.\")\n\nflags.DEFINE_float(\"dropout_prob\", 0.1, \"dropout probability.\")\n\n\ndef validate_flags_or_throw(albert_config):\n  \"\"\"Validate the input FLAGS or throw an exception.\"\"\"\n\n  if not FLAGS.do_train and not FLAGS.do_predict:\n    raise ValueError(\"At least one of `do_train` or `do_predict` must be True.\")\n\n  if FLAGS.do_train:\n    if not FLAGS.train_file:\n      raise ValueError(\n          \"If `do_train` is True, then `train_file` must be specified.\")\n  if FLAGS.do_predict:\n    if not FLAGS.predict_file:\n      raise ValueError(\n          \"If `do_predict` is True, then `predict_file` must be specified.\")\n    if not FLAGS.predict_feature_file:\n      raise ValueError(\n          \"If `do_predict` is True, then `predict_feature_file` must be \"\n          \"specified.\")\n    if not FLAGS.predict_feature_left_file:\n      raise ValueError(\n          \"If `do_predict` is True, then `predict_feature_left_file` must be \"\n          \"specified.\")\n\n  if FLAGS.max_seq_length > albert_config.max_position_embeddings:\n    raise ValueError(\n        \"Cannot use sequence length %d because the ALBERT model \"\n        \"was only trained up to sequence length %d\" %\n        (FLAGS.max_seq_length, albert_config.max_position_embeddings))\n\n  if FLAGS.max_seq_length <= FLAGS.max_query_length + 3:\n    raise ValueError(\n        \"The max_seq_length (%d) must be greater than max_query_length \"\n        \"(%d) + 3\" % (FLAGS.max_seq_length, FLAGS.max_query_length))\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  albert_config = modeling.AlbertConfig.from_json_file(FLAGS.albert_config_file)\n\n  validate_flags_or_throw(albert_config)\n\n  tf.gfile.MakeDirs(FLAGS.output_dir)\n\n  tokenizer = fine_tuning_utils.create_vocab(\n      vocab_file=FLAGS.vocab_file,\n      do_lower_case=FLAGS.do_lower_case,\n      spm_model_file=FLAGS.spm_model_file,\n      hub_module=FLAGS.albert_hub_module_handle)\n\n  tpu_cluster_resolver = None\n  if FLAGS.use_tpu and FLAGS.tpu_name:\n    tpu_cluster_resolver = contrib_cluster_resolver.TPUClusterResolver(\n        FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)\n\n  is_per_host = contrib_tpu.InputPipelineConfig.PER_HOST_V2\n  if FLAGS.do_train:\n    iterations_per_loop = int(min(FLAGS.iterations_per_loop,\n                                  FLAGS.save_checkpoints_steps))\n  else:\n    iterations_per_loop = FLAGS.iterations_per_loop\n  run_config = contrib_tpu.RunConfig(\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      keep_checkpoint_max=0,\n      save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n      tpu_config=contrib_tpu.TPUConfig(\n          iterations_per_loop=iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n\n  train_examples = None\n  num_train_steps = None\n  num_warmup_steps = None\n  train_examples = squad_utils.read_squad_examples(\n      input_file=FLAGS.train_file, is_training=True)\n  num_train_steps = int(\n      len(train_examples) / FLAGS.train_batch_size * FLAGS.num_train_epochs)\n  if FLAGS.do_train:\n    num_warmup_steps = int(num_train_steps * FLAGS.warmup_proportion)\n\n    # Pre-shuffle the input to avoid having to make a very large shuffle\n    # buffer in in the `input_fn`.\n    rng = random.Random(12345)\n    rng.shuffle(train_examples)\n\n  model_fn = squad_utils.v2_model_fn_builder(\n      albert_config=albert_config,\n      init_checkpoint=FLAGS.init_checkpoint,\n      learning_rate=FLAGS.learning_rate,\n      num_train_steps=num_train_steps,\n      num_warmup_steps=num_warmup_steps,\n      use_tpu=FLAGS.use_tpu,\n      use_one_hot_embeddings=FLAGS.use_tpu,\n      max_seq_length=FLAGS.max_seq_length,\n      start_n_top=FLAGS.start_n_top,\n      end_n_top=FLAGS.end_n_top,\n      dropout_prob=FLAGS.dropout_prob,\n      hub_module=FLAGS.albert_hub_module_handle)\n\n  # If TPU is not available, this will fall back to normal Estimator on CPU\n  # or GPU.\n  estimator = contrib_tpu.TPUEstimator(\n      use_tpu=FLAGS.use_tpu,\n      model_fn=model_fn,\n      config=run_config,\n      train_batch_size=FLAGS.train_batch_size,\n      predict_batch_size=FLAGS.predict_batch_size)\n\n  if FLAGS.do_train:\n    # We write to a temporary file to avoid storing very large constant tensors\n    # in memory.\n\n    if not tf.gfile.Exists(FLAGS.train_feature_file):\n      train_writer = squad_utils.FeatureWriter(\n          filename=os.path.join(FLAGS.train_feature_file), is_training=True)\n      squad_utils.convert_examples_to_features(\n          examples=train_examples,\n          tokenizer=tokenizer,\n          max_seq_length=FLAGS.max_seq_length,\n          doc_stride=FLAGS.doc_stride,\n          max_query_length=FLAGS.max_query_length,\n          is_training=True,\n          output_fn=train_writer.process_feature,\n          do_lower_case=FLAGS.do_lower_case)\n      train_writer.close()\n\n    tf.logging.info(\"***** Running training *****\")\n    tf.logging.info(\"  Num orig examples = %d\", len(train_examples))\n    # tf.logging.info(\"  Num split examples = %d\", train_writer.num_features)\n    tf.logging.info(\"  Batch size = %d\", FLAGS.train_batch_size)\n    tf.logging.info(\"  Num steps = %d\", num_train_steps)\n    del train_examples\n\n    train_input_fn = squad_utils.input_fn_builder(\n        input_file=FLAGS.train_feature_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=True,\n        drop_remainder=True,\n        use_tpu=FLAGS.use_tpu,\n        bsz=FLAGS.train_batch_size,\n        is_v2=True)\n    estimator.train(input_fn=train_input_fn, max_steps=num_train_steps)\n\n  if FLAGS.do_predict:\n    with tf.gfile.Open(FLAGS.predict_file) as predict_file:\n      prediction_json = json.load(predict_file)[\"data\"]\n    eval_examples = squad_utils.read_squad_examples(\n        input_file=FLAGS.predict_file, is_training=False)\n\n    if (tf.gfile.Exists(FLAGS.predict_feature_file) and tf.gfile.Exists(\n        FLAGS.predict_feature_left_file)):\n      tf.logging.info(\"Loading eval features from {}\".format(\n          FLAGS.predict_feature_left_file))\n      with tf.gfile.Open(FLAGS.predict_feature_left_file, \"rb\") as fin:\n        eval_features = pickle.load(fin)\n    else:\n      eval_writer = squad_utils.FeatureWriter(\n          filename=FLAGS.predict_feature_file, is_training=False)\n      eval_features = []\n\n      def append_feature(feature):\n        eval_features.append(feature)\n        eval_writer.process_feature(feature)\n\n      squad_utils.convert_examples_to_features(\n          examples=eval_examples,\n          tokenizer=tokenizer,\n          max_seq_length=FLAGS.max_seq_length,\n          doc_stride=FLAGS.doc_stride,\n          max_query_length=FLAGS.max_query_length,\n          is_training=False,\n          output_fn=append_feature,\n          do_lower_case=FLAGS.do_lower_case)\n      eval_writer.close()\n\n      with tf.gfile.Open(FLAGS.predict_feature_left_file, \"wb\") as fout:\n        pickle.dump(eval_features, fout)\n\n    tf.logging.info(\"***** Running predictions *****\")\n    tf.logging.info(\"  Num orig examples = %d\", len(eval_examples))\n    tf.logging.info(\"  Num split examples = %d\", len(eval_features))\n    tf.logging.info(\"  Batch size = %d\", FLAGS.predict_batch_size)\n\n    predict_input_fn = squad_utils.input_fn_builder(\n        input_file=FLAGS.predict_feature_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=False,\n        drop_remainder=False,\n        use_tpu=FLAGS.use_tpu,\n        bsz=FLAGS.predict_batch_size,\n        is_v2=True)\n\n    def get_result(checkpoint):\n      \"\"\"Evaluate the checkpoint on SQuAD v2.0.\"\"\"\n      # If running eval on the TPU, you will need to specify the number of\n      # steps.\n      reader = tf.train.NewCheckpointReader(checkpoint)\n      global_step = reader.get_tensor(tf.GraphKeys.GLOBAL_STEP)\n      all_results = []\n      for result in estimator.predict(\n          predict_input_fn, yield_single_examples=True,\n          checkpoint_path=checkpoint):\n        if len(all_results) % 1000 == 0:\n          tf.logging.info(\"Processing example: %d\" % (len(all_results)))\n        unique_id = int(result[\"unique_ids\"])\n        start_top_log_probs = (\n            [float(x) for x in result[\"start_top_log_probs\"].flat])\n        start_top_index = [int(x) for x in result[\"start_top_index\"].flat]\n        end_top_log_probs = (\n            [float(x) for x in result[\"end_top_log_probs\"].flat])\n        end_top_index = [int(x) for x in result[\"end_top_index\"].flat]\n\n        cls_logits = float(result[\"cls_logits\"].flat[0])\n        all_results.append(\n            squad_utils.RawResultV2(\n                unique_id=unique_id,\n                start_top_log_probs=start_top_log_probs,\n                start_top_index=start_top_index,\n                end_top_log_probs=end_top_log_probs,\n                end_top_index=end_top_index,\n                cls_logits=cls_logits))\n\n      output_prediction_file = os.path.join(\n          FLAGS.output_dir, \"predictions.json\")\n      output_nbest_file = os.path.join(\n          FLAGS.output_dir, \"nbest_predictions.json\")\n      output_null_log_odds_file = os.path.join(\n          FLAGS.output_dir, \"null_odds.json\")\n\n      result_dict = {}\n      cls_dict = {}\n      squad_utils.accumulate_predictions_v2(\n          result_dict, cls_dict, eval_examples, eval_features,\n          all_results, FLAGS.n_best_size, FLAGS.max_answer_length,\n          FLAGS.start_n_top, FLAGS.end_n_top)\n\n      return squad_utils.evaluate_v2(\n          result_dict, cls_dict, prediction_json, eval_examples,\n          eval_features, all_results, FLAGS.n_best_size,\n          FLAGS.max_answer_length, output_prediction_file, output_nbest_file,\n          output_null_log_odds_file), int(global_step)\n\n    def _find_valid_cands(curr_step):\n      filenames = tf.gfile.ListDirectory(FLAGS.output_dir)\n      candidates = []\n      for filename in filenames:\n        if filename.endswith(\".index\"):\n          ckpt_name = filename[:-6]\n          idx = ckpt_name.split(\"-\")[-1]\n          if idx != \"best\" and int(idx) > curr_step:\n            candidates.append(filename)\n      return candidates\n\n    output_eval_file = os.path.join(FLAGS.output_dir, \"eval_results.txt\")\n    checkpoint_path = os.path.join(FLAGS.output_dir, \"model.ckpt-best\")\n    key_name = \"f1\"\n    writer = tf.gfile.GFile(output_eval_file, \"w\")\n    if tf.gfile.Exists(checkpoint_path + \".index\"):\n      result = get_result(checkpoint_path)\n      best_perf = result[0][key_name]\n      global_step = result[1]\n    else:\n      global_step = -1\n      best_perf = -1\n      checkpoint_path = None\n    while global_step < num_train_steps:\n      steps_and_files = {}\n      filenames = tf.gfile.ListDirectory(FLAGS.output_dir)\n      for filename in filenames:\n        if filename.endswith(\".index\"):\n          ckpt_name = filename[:-6]\n          cur_filename = os.path.join(FLAGS.output_dir, ckpt_name)\n          if cur_filename.split(\"-\")[-1] == \"best\":\n            continue\n          gstep = int(cur_filename.split(\"-\")[-1])\n          if gstep not in steps_and_files:\n            tf.logging.info(\"Add {} to eval list.\".format(cur_filename))\n            steps_and_files[gstep] = cur_filename\n      tf.logging.info(\"found {} files.\".format(len(steps_and_files)))\n      if not steps_and_files:\n        tf.logging.info(\"found 0 file, global step: {}. Sleeping.\"\n                        .format(global_step))\n        time.sleep(60)\n      else:\n        for ele in sorted(steps_and_files.items()):\n          step, checkpoint_path = ele\n          if global_step >= step:\n            if len(_find_valid_cands(step)) > 1:\n              for ext in [\"meta\", \"data-00000-of-00001\", \"index\"]:\n                src_ckpt = checkpoint_path + \".{}\".format(ext)\n                tf.logging.info(\"removing {}\".format(src_ckpt))\n                tf.gfile.Remove(src_ckpt)\n            continue\n          result, global_step = get_result(checkpoint_path)\n          tf.logging.info(\"***** Eval results *****\")\n          for key in sorted(result.keys()):\n            tf.logging.info(\"  %s = %s\", key, str(result[key]))\n            writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n          if result[key_name] > best_perf:\n            best_perf = result[key_name]\n            for ext in [\"meta\", \"data-00000-of-00001\", \"index\"]:\n              src_ckpt = checkpoint_path + \".{}\".format(ext)\n              tgt_ckpt = checkpoint_path.rsplit(\n                  \"-\", 1)[0] + \"-best.{}\".format(ext)\n              tf.logging.info(\"saving {} to {}\".format(src_ckpt, tgt_ckpt))\n              tf.gfile.Copy(src_ckpt, tgt_ckpt, overwrite=True)\n              writer.write(\"saved {} to {}\\n\".format(src_ckpt, tgt_ckpt))\n          writer.write(\"best {} = {}\\n\".format(key_name, best_perf))\n          tf.logging.info(\"  best {} = {}\\n\".format(key_name, best_perf))\n\n          if len(_find_valid_cands(global_step)) > 2:\n            for ext in [\"meta\", \"data-00000-of-00001\", \"index\"]:\n              src_ckpt = checkpoint_path + \".{}\".format(ext)\n              tf.logging.info(\"removing {}\".format(src_ckpt))\n              tf.gfile.Remove(src_ckpt)\n          writer.write(\"=\" * 50 + \"\\n\")\n\n    checkpoint_path = os.path.join(FLAGS.output_dir, \"model.ckpt-best\")\n    result, global_step = get_result(checkpoint_path)\n    tf.logging.info(\"***** Final Eval results *****\")\n    for key in sorted(result.keys()):\n      tf.logging.info(\"  %s = %s\", key, str(result[key]))\n      writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n    writer.write(\"best perf happened at step: {}\".format(global_step))\n\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"spm_model_file\")\n  flags.mark_flag_as_required(\"albert_config_file\")\n  flags.mark_flag_as_required(\"output_dir\")\n  tf.app.run()\n"
        },
        {
          "name": "run_trivial_model_test.sh",
          "type": "blob",
          "size": 0.5400390625,
          "content": "#!/bin/bash\n# Small integration test script.\n# The values in this file are **not** meant for reproducing actual results.\n\nset -e\nset -x\n\nvirtualenv -p python3 .\nsource ./bin/activate\n\nOUTPUT_DIR_BASE=\"$(mktemp -d)\"\nOUTPUT_DIR=\"${OUTPUT_DIR_BASE}/output\"\n\npip install numpy\npip install -r requirements.txt\npython -m run_pretraining_test \\\n    --output_dir=\"${OUTPUT_DIR}\" \\\n    --do_train \\\n    --do_eval \\\n    --nouse_tpu \\\n    --train_batch_size=2 \\\n    --eval_batch_size=1 \\\n    --max_seq_length=4 \\\n    --num_train_steps=2 \\\n    --max_eval_steps=3\n\n\n"
        },
        {
          "name": "squad_utils.py",
          "type": "blob",
          "size": 62.2470703125,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Utility functions for SQuAD v1.1/v2.0 datasets.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nimport collections\nimport json\nimport math\nimport re\nimport string\nimport sys\nfrom albert import fine_tuning_utils\nfrom albert import modeling\nfrom albert import optimization\nfrom albert import tokenization\nimport numpy as np\nimport six\nfrom six.moves import map\nfrom six.moves import range\nimport tensorflow.compat.v1 as tf\nfrom tensorflow.compat.v1 import estimator as tf_estimator\nfrom tensorflow.contrib import layers as contrib_layers\nfrom tensorflow.contrib import tpu as contrib_tpu\n\n_PrelimPrediction = collections.namedtuple(  # pylint: disable=invalid-name\n    \"PrelimPrediction\",\n    [\"feature_index\", \"start_index\", \"end_index\",\n     \"start_log_prob\", \"end_log_prob\"])\n\n_NbestPrediction = collections.namedtuple(  # pylint: disable=invalid-name\n    \"NbestPrediction\", [\"text\", \"start_log_prob\", \"end_log_prob\"])\n\nRawResult = collections.namedtuple(\"RawResult\",\n                                   [\"unique_id\",\n                                    \"start_log_prob\",\n                                    \"end_log_prob\"])\n\nRawResultV2 = collections.namedtuple(\n    \"RawResultV2\",\n    [\"unique_id\", \"start_top_log_probs\", \"start_top_index\",\n     \"end_top_log_probs\", \"end_top_index\", \"cls_logits\"])\n\n\nclass SquadExample(object):\n  \"\"\"A single training/test example for simple sequence classification.\n\n     For examples without an answer, the start and end position are -1.\n  \"\"\"\n\n  def __init__(self,\n               qas_id,\n               question_text,\n               paragraph_text,\n               orig_answer_text=None,\n               start_position=None,\n               end_position=None,\n               is_impossible=False):\n    self.qas_id = qas_id\n    self.question_text = question_text\n    self.paragraph_text = paragraph_text\n    self.orig_answer_text = orig_answer_text\n    self.start_position = start_position\n    self.end_position = end_position\n    self.is_impossible = is_impossible\n\n  def __str__(self):\n    return self.__repr__()\n\n  def __repr__(self):\n    s = \"\"\n    s += \"qas_id: %s\" % (tokenization.printable_text(self.qas_id))\n    s += \", question_text: %s\" % (\n        tokenization.printable_text(self.question_text))\n    s += \", paragraph_text: [%s]\" % (\" \".join(self.paragraph_text))\n    if self.start_position:\n      s += \", start_position: %d\" % (self.start_position)\n    if self.start_position:\n      s += \", end_position: %d\" % (self.end_position)\n    if self.start_position:\n      s += \", is_impossible: %r\" % (self.is_impossible)\n    return s\n\n\nclass InputFeatures(object):\n  \"\"\"A single set of features of data.\"\"\"\n\n  def __init__(self,\n               unique_id,\n               example_index,\n               doc_span_index,\n               tok_start_to_orig_index,\n               tok_end_to_orig_index,\n               token_is_max_context,\n               tokens,\n               input_ids,\n               input_mask,\n               segment_ids,\n               paragraph_len,\n               p_mask=None,\n               start_position=None,\n               end_position=None,\n               is_impossible=None):\n    self.unique_id = unique_id\n    self.example_index = example_index\n    self.doc_span_index = doc_span_index\n    self.tok_start_to_orig_index = tok_start_to_orig_index\n    self.tok_end_to_orig_index = tok_end_to_orig_index\n    self.token_is_max_context = token_is_max_context\n    self.tokens = tokens\n    self.input_ids = input_ids\n    self.input_mask = input_mask\n    self.segment_ids = segment_ids\n    self.paragraph_len = paragraph_len\n    self.start_position = start_position\n    self.end_position = end_position\n    self.is_impossible = is_impossible\n    self.p_mask = p_mask\n\n\ndef read_squad_examples(input_file, is_training):\n  \"\"\"Read a SQuAD json file into a list of SquadExample.\"\"\"\n  with tf.gfile.Open(input_file, \"r\") as reader:\n    input_data = json.load(reader)[\"data\"]\n\n  examples = []\n  for entry in input_data:\n    for paragraph in entry[\"paragraphs\"]:\n      paragraph_text = paragraph[\"context\"]\n\n      for qa in paragraph[\"qas\"]:\n        qas_id = qa[\"id\"]\n        question_text = qa[\"question\"]\n        start_position = None\n        orig_answer_text = None\n        is_impossible = False\n\n        if is_training:\n          is_impossible = qa.get(\"is_impossible\", False)\n          if (len(qa[\"answers\"]) != 1) and (not is_impossible):\n            raise ValueError(\n                \"For training, each question should have exactly 1 answer.\")\n          if not is_impossible:\n            answer = qa[\"answers\"][0]\n            orig_answer_text = answer[\"text\"]\n            start_position = answer[\"answer_start\"]\n          else:\n            start_position = -1\n            orig_answer_text = \"\"\n\n        example = SquadExample(\n            qas_id=qas_id,\n            question_text=question_text,\n            paragraph_text=paragraph_text,\n            orig_answer_text=orig_answer_text,\n            start_position=start_position,\n            is_impossible=is_impossible)\n        examples.append(example)\n\n  return examples\n\n\ndef _convert_index(index, pos, m=None, is_start=True):\n  \"\"\"Converts index.\"\"\"\n  if index[pos] is not None:\n    return index[pos]\n  n = len(index)\n  rear = pos\n  while rear < n - 1 and index[rear] is None:\n    rear += 1\n  front = pos\n  while front > 0 and index[front] is None:\n    front -= 1\n  assert index[front] is not None or index[rear] is not None\n  if index[front] is None:\n    if index[rear] >= 1:\n      if is_start:\n        return 0\n      else:\n        return index[rear] - 1\n    return index[rear]\n  if index[rear] is None:\n    if m is not None and index[front] < m - 1:\n      if is_start:\n        return index[front] + 1\n      else:\n        return m - 1\n    return index[front]\n  if is_start:\n    if index[rear] > index[front] + 1:\n      return index[front] + 1\n    else:\n      return index[rear]\n  else:\n    if index[rear] > index[front] + 1:\n      return index[rear] - 1\n    else:\n      return index[front]\n\n\ndef convert_examples_to_features(examples, tokenizer, max_seq_length,\n                                 doc_stride, max_query_length, is_training,\n                                 output_fn, do_lower_case):\n  \"\"\"Loads a data file into a list of `InputBatch`s.\"\"\"\n\n  cnt_pos, cnt_neg = 0, 0\n  unique_id = 1000000000\n  max_n, max_m = 1024, 1024\n  f = np.zeros((max_n, max_m), dtype=np.float32)\n\n  for (example_index, example) in enumerate(examples):\n\n    if example_index % 100 == 0:\n      tf.logging.info(\"Converting {}/{} pos {} neg {}\".format(\n          example_index, len(examples), cnt_pos, cnt_neg))\n\n    query_tokens = tokenization.encode_ids(\n        tokenizer.sp_model,\n        tokenization.preprocess_text(\n            example.question_text, lower=do_lower_case))\n\n    if len(query_tokens) > max_query_length:\n      query_tokens = query_tokens[0:max_query_length]\n\n    paragraph_text = example.paragraph_text\n    para_tokens = tokenization.encode_pieces(\n        tokenizer.sp_model,\n        tokenization.preprocess_text(\n            example.paragraph_text, lower=do_lower_case),\n        return_unicode=False)\n\n    chartok_to_tok_index = []\n    tok_start_to_chartok_index = []\n    tok_end_to_chartok_index = []\n    char_cnt = 0\n    para_tokens = [six.ensure_text(token, \"utf-8\") for token in para_tokens]\n    for i, token in enumerate(para_tokens):\n      new_token = six.ensure_text(token).replace(\n          tokenization.SPIECE_UNDERLINE.decode(\"utf-8\"), \" \")\n      chartok_to_tok_index.extend([i] * len(new_token))\n      tok_start_to_chartok_index.append(char_cnt)\n      char_cnt += len(new_token)\n      tok_end_to_chartok_index.append(char_cnt - 1)\n\n    tok_cat_text = \"\".join(para_tokens).replace(\n        tokenization.SPIECE_UNDERLINE.decode(\"utf-8\"), \" \")\n    n, m = len(paragraph_text), len(tok_cat_text)\n\n    if n > max_n or m > max_m:\n      max_n = max(n, max_n)\n      max_m = max(m, max_m)\n      f = np.zeros((max_n, max_m), dtype=np.float32)\n\n    g = {}\n\n    def _lcs_match(max_dist, n=n, m=m):\n      \"\"\"Longest-common-substring algorithm.\"\"\"\n      f.fill(0)\n      g.clear()\n\n      ### longest common sub sequence\n      # f[i, j] = max(f[i - 1, j], f[i, j - 1], f[i - 1, j - 1] + match(i, j))\n      for i in range(n):\n\n        # note(zhiliny):\n        # unlike standard LCS, this is specifically optimized for the setting\n        # because the mismatch between sentence pieces and original text will\n        # be small\n        for j in range(i - max_dist, i + max_dist):\n          if j >= m or j < 0: continue\n\n          if i > 0:\n            g[(i, j)] = 0\n            f[i, j] = f[i - 1, j]\n\n          if j > 0 and f[i, j - 1] > f[i, j]:\n            g[(i, j)] = 1\n            f[i, j] = f[i, j - 1]\n\n          f_prev = f[i - 1, j - 1] if i > 0 and j > 0 else 0\n          if (tokenization.preprocess_text(\n              paragraph_text[i], lower=do_lower_case,\n              remove_space=False) == tok_cat_text[j]\n              and f_prev + 1 > f[i, j]):\n            g[(i, j)] = 2\n            f[i, j] = f_prev + 1\n\n    max_dist = abs(n - m) + 5\n    for _ in range(2):\n      _lcs_match(max_dist)\n      if f[n - 1, m - 1] > 0.8 * n: break\n      max_dist *= 2\n\n    orig_to_chartok_index = [None] * n\n    chartok_to_orig_index = [None] * m\n    i, j = n - 1, m - 1\n    while i >= 0 and j >= 0:\n      if (i, j) not in g: break\n      if g[(i, j)] == 2:\n        orig_to_chartok_index[i] = j\n        chartok_to_orig_index[j] = i\n        i, j = i - 1, j - 1\n      elif g[(i, j)] == 1:\n        j = j - 1\n      else:\n        i = i - 1\n\n    if (all(v is None for v in orig_to_chartok_index) or\n        f[n - 1, m - 1] < 0.8 * n):\n      tf.logging.info(\"MISMATCH DETECTED!\")\n      continue\n\n    tok_start_to_orig_index = []\n    tok_end_to_orig_index = []\n    for i in range(len(para_tokens)):\n      start_chartok_pos = tok_start_to_chartok_index[i]\n      end_chartok_pos = tok_end_to_chartok_index[i]\n      start_orig_pos = _convert_index(chartok_to_orig_index, start_chartok_pos,\n                                      n, is_start=True)\n      end_orig_pos = _convert_index(chartok_to_orig_index, end_chartok_pos,\n                                    n, is_start=False)\n\n      tok_start_to_orig_index.append(start_orig_pos)\n      tok_end_to_orig_index.append(end_orig_pos)\n\n    if not is_training:\n      tok_start_position = tok_end_position = None\n\n    if is_training and example.is_impossible:\n      tok_start_position = 0\n      tok_end_position = 0\n\n    if is_training and not example.is_impossible:\n      start_position = example.start_position\n      end_position = start_position + len(example.orig_answer_text) - 1\n\n      start_chartok_pos = _convert_index(orig_to_chartok_index, start_position,\n                                         is_start=True)\n      tok_start_position = chartok_to_tok_index[start_chartok_pos]\n\n      end_chartok_pos = _convert_index(orig_to_chartok_index, end_position,\n                                       is_start=False)\n      tok_end_position = chartok_to_tok_index[end_chartok_pos]\n      assert tok_start_position <= tok_end_position\n\n    def _piece_to_id(x):\n      if six.PY2 and isinstance(x, six.text_type):\n        x = six.ensure_binary(x, \"utf-8\")\n      return tokenizer.sp_model.PieceToId(x)\n\n    all_doc_tokens = list(map(_piece_to_id, para_tokens))\n\n    # The -3 accounts for [CLS], [SEP] and [SEP]\n    max_tokens_for_doc = max_seq_length - len(query_tokens) - 3\n\n    # We can have documents that are longer than the maximum sequence length.\n    # To deal with this we do a sliding window approach, where we take chunks\n    # of the up to our max length with a stride of `doc_stride`.\n    _DocSpan = collections.namedtuple(  # pylint: disable=invalid-name\n        \"DocSpan\", [\"start\", \"length\"])\n    doc_spans = []\n    start_offset = 0\n    while start_offset < len(all_doc_tokens):\n      length = len(all_doc_tokens) - start_offset\n      if length > max_tokens_for_doc:\n        length = max_tokens_for_doc\n      doc_spans.append(_DocSpan(start=start_offset, length=length))\n      if start_offset + length == len(all_doc_tokens):\n        break\n      start_offset += min(length, doc_stride)\n\n    for (doc_span_index, doc_span) in enumerate(doc_spans):\n      tokens = []\n      token_is_max_context = {}\n      segment_ids = []\n      p_mask = []\n\n      cur_tok_start_to_orig_index = []\n      cur_tok_end_to_orig_index = []\n\n      tokens.append(tokenizer.sp_model.PieceToId(\"[CLS]\"))\n      segment_ids.append(0)\n      p_mask.append(0)\n      for token in query_tokens:\n        tokens.append(token)\n        segment_ids.append(0)\n        p_mask.append(1)\n      tokens.append(tokenizer.sp_model.PieceToId(\"[SEP]\"))\n      segment_ids.append(0)\n      p_mask.append(1)\n\n      for i in range(doc_span.length):\n        split_token_index = doc_span.start + i\n\n        cur_tok_start_to_orig_index.append(\n            tok_start_to_orig_index[split_token_index])\n        cur_tok_end_to_orig_index.append(\n            tok_end_to_orig_index[split_token_index])\n\n        is_max_context = _check_is_max_context(doc_spans, doc_span_index,\n                                               split_token_index)\n        token_is_max_context[len(tokens)] = is_max_context\n        tokens.append(all_doc_tokens[split_token_index])\n        segment_ids.append(1)\n        p_mask.append(0)\n      tokens.append(tokenizer.sp_model.PieceToId(\"[SEP]\"))\n      segment_ids.append(1)\n      p_mask.append(1)\n\n      paragraph_len = len(tokens)\n      input_ids = tokens\n\n      # The mask has 1 for real tokens and 0 for padding tokens. Only real\n      # tokens are attended to.\n      input_mask = [1] * len(input_ids)\n\n      # Zero-pad up to the sequence length.\n      while len(input_ids) < max_seq_length:\n        input_ids.append(0)\n        input_mask.append(0)\n        segment_ids.append(0)\n        p_mask.append(1)\n\n      assert len(input_ids) == max_seq_length\n      assert len(input_mask) == max_seq_length\n      assert len(segment_ids) == max_seq_length\n\n      span_is_impossible = example.is_impossible\n      start_position = None\n      end_position = None\n      if is_training and not span_is_impossible:\n        # For training, if our document chunk does not contain an annotation\n        # we throw it out, since there is nothing to predict.\n        doc_start = doc_span.start\n        doc_end = doc_span.start + doc_span.length - 1\n        out_of_span = False\n        if not (tok_start_position >= doc_start and\n                tok_end_position <= doc_end):\n          out_of_span = True\n        if out_of_span:\n          # continue\n          start_position = 0\n          end_position = 0\n          span_is_impossible = True\n        else:\n          doc_offset = len(query_tokens) + 2\n          start_position = tok_start_position - doc_start + doc_offset\n          end_position = tok_end_position - doc_start + doc_offset\n\n      if is_training and span_is_impossible:\n        start_position = 0\n        end_position = 0\n\n      if example_index < 20:\n        tf.logging.info(\"*** Example ***\")\n        tf.logging.info(\"unique_id: %s\" % (unique_id))\n        tf.logging.info(\"example_index: %s\" % (example_index))\n        tf.logging.info(\"doc_span_index: %s\" % (doc_span_index))\n        tf.logging.info(\"tok_start_to_orig_index: %s\" % \" \".join(\n            [str(x) for x in cur_tok_start_to_orig_index]))\n        tf.logging.info(\"tok_end_to_orig_index: %s\" % \" \".join(\n            [str(x) for x in cur_tok_end_to_orig_index]))\n        tf.logging.info(\"token_is_max_context: %s\" % \" \".join([\n            \"%d:%s\" % (x, y) for (x, y) in six.iteritems(token_is_max_context)\n        ]))\n        tf.logging.info(\"input_pieces: %s\" % \" \".join(\n            [tokenizer.sp_model.IdToPiece(x) for x in tokens]))\n        tf.logging.info(\"input_ids: %s\" % \" \".join([str(x) for x in input_ids]))\n        tf.logging.info(\n            \"input_mask: %s\" % \" \".join([str(x) for x in input_mask]))\n        tf.logging.info(\n            \"segment_ids: %s\" % \" \".join([str(x) for x in segment_ids]))\n\n        if is_training and span_is_impossible:\n          tf.logging.info(\"impossible example span\")\n\n        if is_training and not span_is_impossible:\n          pieces = [tokenizer.sp_model.IdToPiece(token) for token in\n                    tokens[start_position: (end_position + 1)]]\n          answer_text = tokenizer.sp_model.DecodePieces(pieces)\n          tf.logging.info(\"start_position: %d\" % (start_position))\n          tf.logging.info(\"end_position: %d\" % (end_position))\n          tf.logging.info(\n              \"answer: %s\" % (tokenization.printable_text(answer_text)))\n\n          # note(zhiliny): With multi processing,\n          # the example_index is actually the index within the current process\n          # therefore we use example_index=None to avoid being used in the future.\n          # The current code does not use example_index of training data.\n      if is_training:\n        feat_example_index = None\n      else:\n        feat_example_index = example_index\n\n      feature = InputFeatures(\n          unique_id=unique_id,\n          example_index=feat_example_index,\n          doc_span_index=doc_span_index,\n          tok_start_to_orig_index=cur_tok_start_to_orig_index,\n          tok_end_to_orig_index=cur_tok_end_to_orig_index,\n          token_is_max_context=token_is_max_context,\n          tokens=[tokenizer.sp_model.IdToPiece(x) for x in tokens],\n          input_ids=input_ids,\n          input_mask=input_mask,\n          segment_ids=segment_ids,\n          paragraph_len=paragraph_len,\n          start_position=start_position,\n          end_position=end_position,\n          is_impossible=span_is_impossible,\n          p_mask=p_mask)\n\n      # Run callback\n      output_fn(feature)\n\n      unique_id += 1\n      if span_is_impossible:\n        cnt_neg += 1\n      else:\n        cnt_pos += 1\n\n  tf.logging.info(\"Total number of instances: {} = pos {} neg {}\".format(\n      cnt_pos + cnt_neg, cnt_pos, cnt_neg))\n\n\ndef _check_is_max_context(doc_spans, cur_span_index, position):\n  \"\"\"Check if this is the 'max context' doc span for the token.\"\"\"\n\n  # Because of the sliding window approach taken to scoring documents, a single\n  # token can appear in multiple documents. E.g.\n  #  Doc: the man went to the store and bought a gallon of milk\n  #  Span A: the man went to the\n  #  Span B: to the store and bought\n  #  Span C: and bought a gallon of\n  #  ...\n  #\n  # Now the word 'bought' will have two scores from spans B and C. We only\n  # want to consider the score with \"maximum context\", which we define as\n  # the *minimum* of its left and right context (the *sum* of left and\n  # right context will always be the same, of course).\n  #\n  # In the example the maximum context for 'bought' would be span C since\n  # it has 1 left context and 3 right context, while span B has 4 left context\n  # and 0 right context.\n  best_score = None\n  best_span_index = None\n  for (span_index, doc_span) in enumerate(doc_spans):\n    end = doc_span.start + doc_span.length - 1\n    if position < doc_span.start:\n      continue\n    if position > end:\n      continue\n    num_left_context = position - doc_span.start\n    num_right_context = end - position\n    score = min(num_left_context, num_right_context) + 0.01 * doc_span.length\n    if best_score is None or score > best_score:\n      best_score = score\n      best_span_index = span_index\n\n  return cur_span_index == best_span_index\n\n\ndef _get_best_indexes(logits, n_best_size):\n  \"\"\"Get the n-best logits from a list.\"\"\"\n  index_and_score = sorted(enumerate(logits), key=lambda x: x[1], reverse=True)\n\n  best_indexes = []\n  for i in range(len(index_and_score)):\n    if i >= n_best_size:\n      break\n    best_indexes.append(index_and_score[i][0])\n  return best_indexes\n\n\ndef _compute_softmax(scores):\n  \"\"\"Compute softmax probability over raw logits.\"\"\"\n  if not scores:\n    return []\n\n  max_score = None\n  for score in scores:\n    if max_score is None or score > max_score:\n      max_score = score\n\n  exp_scores = []\n  total_sum = 0.0\n  for score in scores:\n    x = math.exp(score - max_score)\n    exp_scores.append(x)\n    total_sum += x\n\n  probs = []\n  for score in exp_scores:\n    probs.append(score / total_sum)\n  return probs\n\n\nclass FeatureWriter(object):\n  \"\"\"Writes InputFeature to TF example file.\"\"\"\n\n  def __init__(self, filename, is_training):\n    self.filename = filename\n    self.is_training = is_training\n    self.num_features = 0\n    self._writer = tf.python_io.TFRecordWriter(filename)\n\n  def process_feature(self, feature):\n    \"\"\"Write a InputFeature to the TFRecordWriter as a tf.train.Example.\"\"\"\n    self.num_features += 1\n\n    def create_int_feature(values):\n      feature = tf.train.Feature(\n          int64_list=tf.train.Int64List(value=list(values)))\n      return feature\n\n    features = collections.OrderedDict()\n    features[\"unique_ids\"] = create_int_feature([feature.unique_id])\n    features[\"input_ids\"] = create_int_feature(feature.input_ids)\n    features[\"input_mask\"] = create_int_feature(feature.input_mask)\n    features[\"segment_ids\"] = create_int_feature(feature.segment_ids)\n    features[\"p_mask\"] = create_int_feature(feature.p_mask)\n\n    if self.is_training:\n      features[\"start_positions\"] = create_int_feature([feature.start_position])\n      features[\"end_positions\"] = create_int_feature([feature.end_position])\n      impossible = 0\n      if feature.is_impossible:\n        impossible = 1\n      features[\"is_impossible\"] = create_int_feature([impossible])\n\n    tf_example = tf.train.Example(features=tf.train.Features(feature=features))\n    self._writer.write(tf_example.SerializeToString())\n\n  def close(self):\n    self._writer.close()\n\n\ndef input_fn_builder(input_file, seq_length, is_training,\n                     drop_remainder, use_tpu, bsz, is_v2):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  name_to_features = {\n      \"unique_ids\": tf.FixedLenFeature([], tf.int64),\n      \"input_ids\": tf.FixedLenFeature([seq_length], tf.int64),\n      \"input_mask\": tf.FixedLenFeature([seq_length], tf.int64),\n      \"segment_ids\": tf.FixedLenFeature([seq_length], tf.int64),\n  }\n  # p_mask is not required for SQuAD v1.1\n  if is_v2:\n    name_to_features[\"p_mask\"] = tf.FixedLenFeature([seq_length], tf.int64)\n\n  if is_training:\n    name_to_features[\"start_positions\"] = tf.FixedLenFeature([], tf.int64)\n    name_to_features[\"end_positions\"] = tf.FixedLenFeature([], tf.int64)\n    name_to_features[\"is_impossible\"] = tf.FixedLenFeature([], tf.int64)\n\n  def _decode_record(record, name_to_features):\n    \"\"\"Decodes a record to a TensorFlow example.\"\"\"\n    example = tf.parse_single_example(record, name_to_features)\n\n    # tf.Example only supports tf.int64, but the TPU only supports tf.int32.\n    # So cast all int64 to int32.\n    for name in list(example.keys()):\n      t = example[name]\n      if t.dtype == tf.int64:\n        t = tf.to_int32(t)\n      example[name] = t\n\n    return example\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    if use_tpu:\n      batch_size = params[\"batch_size\"]\n    else:\n      batch_size = bsz\n\n    # For training, we want a lot of parallel reading and shuffling.\n    # For eval, we want no shuffling and parallel reading doesn't matter.\n    d = tf.data.TFRecordDataset(input_file)\n    if is_training:\n      d = d.repeat()\n      d = d.shuffle(buffer_size=100)\n\n    d = d.apply(\n        tf.data.experimental.map_and_batch(\n            lambda record: _decode_record(record, name_to_features),\n            batch_size=batch_size,\n            drop_remainder=drop_remainder))\n\n    return d\n\n  return input_fn\n\n\ndef create_v1_model(albert_config, is_training, input_ids, input_mask,\n                    segment_ids, use_one_hot_embeddings, use_einsum,\n                    hub_module):\n  \"\"\"Creates a classification model.\"\"\"\n  (_, final_hidden) = fine_tuning_utils.create_albert(\n      albert_config=albert_config,\n      is_training=is_training,\n      input_ids=input_ids,\n      input_mask=input_mask,\n      segment_ids=segment_ids,\n      use_one_hot_embeddings=use_one_hot_embeddings,\n      use_einsum=use_einsum,\n      hub_module=hub_module)\n\n  final_hidden_shape = modeling.get_shape_list(final_hidden, expected_rank=3)\n  batch_size = final_hidden_shape[0]\n  seq_length = final_hidden_shape[1]\n  hidden_size = final_hidden_shape[2]\n\n  output_weights = tf.get_variable(\n      \"cls/squad/output_weights\", [2, hidden_size],\n      initializer=tf.truncated_normal_initializer(stddev=0.02))\n\n  output_bias = tf.get_variable(\n      \"cls/squad/output_bias\", [2], initializer=tf.zeros_initializer())\n\n  final_hidden_matrix = tf.reshape(final_hidden,\n                                   [batch_size * seq_length, hidden_size])\n  logits = tf.matmul(final_hidden_matrix, output_weights, transpose_b=True)\n  logits = tf.nn.bias_add(logits, output_bias)\n\n  logits = tf.reshape(logits, [batch_size, seq_length, 2])\n  logits = tf.transpose(logits, [2, 0, 1])\n\n  unstacked_logits = tf.unstack(logits, axis=0)\n\n  (start_logits, end_logits) = (unstacked_logits[0], unstacked_logits[1])\n\n  return (start_logits, end_logits)\n\n\ndef v1_model_fn_builder(albert_config, init_checkpoint, learning_rate,\n                        num_train_steps, num_warmup_steps, use_tpu,\n                        use_one_hot_embeddings, use_einsum, hub_module):\n  \"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"\n\n  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n    \"\"\"The `model_fn` for TPUEstimator.\"\"\"\n\n    tf.logging.info(\"*** Features ***\")\n    for name in sorted(features.keys()):\n      tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\n\n    if \"unique_ids\" in features:\n      unique_ids = features[\"unique_ids\"]\n    else:\n      unique_ids = None\n    input_ids = features[\"input_ids\"]\n    input_mask = features[\"input_mask\"]\n    segment_ids = features[\"segment_ids\"]\n\n    is_training = (mode == tf_estimator.ModeKeys.TRAIN)\n\n    (start_logits, end_logits) = create_v1_model(\n        albert_config=albert_config,\n        is_training=is_training,\n        input_ids=input_ids,\n        input_mask=input_mask,\n        segment_ids=segment_ids,\n        use_one_hot_embeddings=use_one_hot_embeddings,\n        use_einsum=use_einsum,\n        hub_module=hub_module)\n\n    # Assign names to the logits so that we can refer to them as output tensors.\n    start_logits = tf.identity(start_logits, name=\"start_logits\")\n    end_logits = tf.identity(end_logits, name=\"end_logits\")\n\n    tvars = tf.trainable_variables()\n\n    initialized_variable_names = {}\n    scaffold_fn = None\n    if init_checkpoint:\n      (assignment_map, initialized_variable_names\n      ) = modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)\n      if use_tpu:\n\n        def tpu_scaffold():\n          tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n          return tf.train.Scaffold()\n\n        scaffold_fn = tpu_scaffold\n      else:\n        tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n\n    tf.logging.info(\"**** Trainable Variables ****\")\n    for var in tvars:\n      init_string = \"\"\n      if var.name in initialized_variable_names:\n        init_string = \", *INIT_FROM_CKPT*\"\n      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                      init_string)\n\n    output_spec = None\n    if mode == tf_estimator.ModeKeys.TRAIN:\n      seq_length = modeling.get_shape_list(input_ids)[1]\n\n      def compute_loss(logits, positions):\n        one_hot_positions = tf.one_hot(\n            positions, depth=seq_length, dtype=tf.float32)\n        log_probs = tf.nn.log_softmax(logits, axis=-1)\n        loss = -tf.reduce_mean(\n            tf.reduce_sum(one_hot_positions * log_probs, axis=-1))\n        return loss\n\n      start_positions = features[\"start_positions\"]\n      end_positions = features[\"end_positions\"]\n\n      start_loss = compute_loss(start_logits, start_positions)\n      end_loss = compute_loss(end_logits, end_positions)\n\n      total_loss = (start_loss + end_loss) / 2.0\n\n      train_op = optimization.create_optimizer(\n          total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)\n\n      output_spec = contrib_tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          train_op=train_op,\n          scaffold_fn=scaffold_fn)\n    elif mode == tf_estimator.ModeKeys.PREDICT:\n      predictions = {\n          \"start_log_prob\": start_logits,\n          \"end_log_prob\": end_logits,\n      }\n      if unique_ids is not None:\n        predictions[\"unique_ids\"] = unique_ids\n      output_spec = contrib_tpu.TPUEstimatorSpec(\n          mode=mode, predictions=predictions, scaffold_fn=scaffold_fn)\n    else:\n      raise ValueError(\n          \"Only TRAIN and PREDICT modes are supported: %s\" % (mode))\n    return output_spec\n\n  return model_fn\n\n\ndef accumulate_predictions_v1(result_dict, all_examples, all_features,\n                              all_results, n_best_size, max_answer_length):\n  \"\"\"accumulate predictions for each positions in a dictionary.\"\"\"\n  example_index_to_features = collections.defaultdict(list)\n  for feature in all_features:\n    example_index_to_features[feature.example_index].append(feature)\n\n  unique_id_to_result = {}\n  for result in all_results:\n    unique_id_to_result[result.unique_id] = result\n\n  all_predictions = collections.OrderedDict()\n  all_nbest_json = collections.OrderedDict()\n  scores_diff_json = collections.OrderedDict()\n\n  for (example_index, example) in enumerate(all_examples):\n    if example_index not in result_dict:\n      result_dict[example_index] = {}\n    features = example_index_to_features[example_index]\n\n    prelim_predictions = []\n    min_null_feature_index = 0  # the paragraph slice with min mull score\n    null_start_logit = 0  # the start logit at the slice with min null score\n    null_end_logit = 0  # the end logit at the slice with min null score\n    for (feature_index, feature) in enumerate(features):\n      if feature.unique_id not in result_dict[example_index]:\n        result_dict[example_index][feature.unique_id] = {}\n      result = unique_id_to_result[feature.unique_id]\n      start_indexes = _get_best_indexes(result.start_log_prob, n_best_size)\n      end_indexes = _get_best_indexes(result.end_log_prob, n_best_size)\n      for start_index in start_indexes:\n        for end_index in end_indexes:\n          doc_offset = feature.tokens.index(\"[SEP]\") + 1\n          # We could hypothetically create invalid predictions, e.g., predict\n          # that the start of the span is in the question. We throw out all\n          # invalid predictions.\n          if start_index - doc_offset >= len(feature.tok_start_to_orig_index):\n            continue\n          if end_index - doc_offset >= len(feature.tok_end_to_orig_index):\n            continue\n          if not feature.token_is_max_context.get(start_index, False):\n            continue\n          if end_index < start_index:\n            continue\n          length = end_index - start_index + 1\n          if length > max_answer_length:\n            continue\n          start_log_prob = result.start_log_prob[start_index]\n          end_log_prob = result.end_log_prob[end_index]\n          start_idx = start_index - doc_offset\n          end_idx = end_index - doc_offset\n          if (start_idx, end_idx) not in result_dict[example_index][feature.unique_id]:\n            result_dict[example_index][feature.unique_id][(start_idx, end_idx)] = []\n          result_dict[example_index][feature.unique_id][(start_idx, end_idx)].append((start_log_prob, end_log_prob))\n\n\ndef write_predictions_v1(result_dict, all_examples, all_features,\n                         all_results, n_best_size, max_answer_length,\n                         output_prediction_file, output_nbest_file):\n  \"\"\"Write final predictions to the json file and log-odds of null if needed.\"\"\"\n  tf.logging.info(\"Writing predictions to: %s\" % (output_prediction_file))\n  tf.logging.info(\"Writing nbest to: %s\" % (output_nbest_file))\n\n  example_index_to_features = collections.defaultdict(list)\n  for feature in all_features:\n    example_index_to_features[feature.example_index].append(feature)\n\n  unique_id_to_result = {}\n  for result in all_results:\n    unique_id_to_result[result.unique_id] = result\n\n  all_predictions = collections.OrderedDict()\n  all_nbest_json = collections.OrderedDict()\n  scores_diff_json = collections.OrderedDict()\n\n  for (example_index, example) in enumerate(all_examples):\n    features = example_index_to_features[example_index]\n\n    prelim_predictions = []\n    # keep track of the minimum score of null start+end of position 0\n    score_null = 1000000  # large and positive\n    min_null_feature_index = 0  # the paragraph slice with min mull score\n    null_start_logit = 0  # the start logit at the slice with min null score\n    null_end_logit = 0  # the end logit at the slice with min null score\n    for (feature_index, feature) in enumerate(features):\n      for ((start_idx, end_idx), logprobs) in \\\n        result_dict[example_index][feature.unique_id].items():\n        start_log_prob = 0\n        end_log_prob = 0\n        for logprob in logprobs:\n          start_log_prob += logprob[0]\n          end_log_prob += logprob[1]\n        prelim_predictions.append(\n            _PrelimPrediction(\n                feature_index=feature_index,\n                start_index=start_idx,\n                end_index=end_idx,\n                start_log_prob=start_log_prob / len(logprobs),\n                end_log_prob=end_log_prob / len(logprobs)))\n\n    prelim_predictions = sorted(\n        prelim_predictions,\n        key=lambda x: (x.start_log_prob + x.end_log_prob),\n        reverse=True)\n\n    seen_predictions = {}\n    nbest = []\n    for pred in prelim_predictions:\n      if len(nbest) >= n_best_size:\n        break\n      feature = features[pred.feature_index]\n      if pred.start_index >= 0:  # this is a non-null prediction\n        tok_start_to_orig_index = feature.tok_start_to_orig_index\n        tok_end_to_orig_index = feature.tok_end_to_orig_index\n        start_orig_pos = tok_start_to_orig_index[pred.start_index]\n        end_orig_pos = tok_end_to_orig_index[pred.end_index]\n\n        paragraph_text = example.paragraph_text\n        final_text = paragraph_text[start_orig_pos: end_orig_pos + 1].strip()\n        if final_text in seen_predictions:\n          continue\n\n        seen_predictions[final_text] = True\n      else:\n        final_text = \"\"\n        seen_predictions[final_text] = True\n\n      nbest.append(\n          _NbestPrediction(\n              text=final_text,\n              start_log_prob=pred.start_log_prob,\n              end_log_prob=pred.end_log_prob))\n\n    # In very rare edge cases we could have no valid predictions. So we\n    # just create a nonce prediction in this case to avoid failure.\n    if not nbest:\n      nbest.append(\n          _NbestPrediction(text=\"empty\", start_log_prob=0.0, end_log_prob=0.0))\n\n    assert len(nbest) >= 1\n\n    total_scores = []\n    best_non_null_entry = None\n    for entry in nbest:\n      total_scores.append(entry.start_log_prob + entry.end_log_prob)\n      if not best_non_null_entry:\n        if entry.text:\n          best_non_null_entry = entry\n\n    probs = _compute_softmax(total_scores)\n\n    nbest_json = []\n    for (i, entry) in enumerate(nbest):\n      output = collections.OrderedDict()\n      output[\"text\"] = entry.text\n      output[\"probability\"] = probs[i]\n      output[\"start_log_prob\"] = entry.start_log_prob\n      output[\"end_log_prob\"] = entry.end_log_prob\n      nbest_json.append(output)\n\n    assert len(nbest_json) >= 1\n\n    all_predictions[example.qas_id] = nbest_json[0][\"text\"]\n    all_nbest_json[example.qas_id] = nbest_json\n\n  with tf.gfile.GFile(output_prediction_file, \"w\") as writer:\n    writer.write(json.dumps(all_predictions, indent=4) + \"\\n\")\n\n  with tf.gfile.GFile(output_nbest_file, \"w\") as writer:\n    writer.write(json.dumps(all_nbest_json, indent=4) + \"\\n\")\n\n  return all_predictions\n\n\n####### following are from official SQuAD v1.1 evaluation scripts\ndef normalize_answer_v1(s):\n  \"\"\"Lower text and remove punctuation, articles and extra whitespace.\"\"\"\n\n  def remove_articles(text):\n    return re.sub(r\"\\b(a|an|the)\\b\", \" \", text)\n\n  def white_space_fix(text):\n    return \" \".join(text.split())\n\n  def remove_punc(text):\n    exclude = set(string.punctuation)\n    return \"\".join(ch for ch in text if ch not in exclude)\n\n  def lower(text):\n    return text.lower()\n\n  return white_space_fix(remove_articles(remove_punc(lower(s))))\n\n\ndef f1_score(prediction, ground_truth):\n  prediction_tokens = normalize_answer_v1(prediction).split()\n  ground_truth_tokens = normalize_answer_v1(ground_truth).split()\n  common = (\n      collections.Counter(prediction_tokens)\n      & collections.Counter(ground_truth_tokens))\n  num_same = sum(common.values())\n  if num_same == 0:\n    return 0\n  precision = 1.0 * num_same / len(prediction_tokens)\n  recall = 1.0 * num_same / len(ground_truth_tokens)\n  f1 = (2 * precision * recall) / (precision + recall)\n  return f1\n\n\ndef exact_match_score(prediction, ground_truth):\n  return (normalize_answer_v1(prediction) == normalize_answer_v1(ground_truth))\n\n\ndef metric_max_over_ground_truths(metric_fn, prediction, ground_truths):\n  scores_for_ground_truths = []\n  for ground_truth in ground_truths:\n    score = metric_fn(prediction, ground_truth)\n    scores_for_ground_truths.append(score)\n  return max(scores_for_ground_truths)\n\n\ndef evaluate_v1(dataset, predictions):\n  f1 = exact_match = total = 0\n  for article in dataset:\n    for paragraph in article[\"paragraphs\"]:\n      for qa in paragraph[\"qas\"]:\n        total += 1\n        if qa[\"id\"] not in predictions:\n          message = (\"Unanswered question \" + six.ensure_str(qa[\"id\"]) +\n                     \"  will receive score 0.\")\n          print(message, file=sys.stderr)\n          continue\n        ground_truths = [x[\"text\"] for x in qa[\"answers\"]]\n        # ground_truths = list(map(lambda x: x[\"text\"], qa[\"answers\"]))\n        prediction = predictions[qa[\"id\"]]\n        exact_match += metric_max_over_ground_truths(exact_match_score,\n                                                     prediction, ground_truths)\n        f1 += metric_max_over_ground_truths(f1_score, prediction, ground_truths)\n\n  exact_match = 100.0 * exact_match / total\n  f1 = 100.0 * f1 / total\n\n  return {\"exact_match\": exact_match, \"f1\": f1}\n\n####### above are from official SQuAD v1.1 evaluation scripts\n####### following are from official SQuAD v2.0 evaluation scripts\ndef make_qid_to_has_ans(dataset):\n  qid_to_has_ans = {}\n  for article in dataset:\n    for p in article['paragraphs']:\n      for qa in p['qas']:\n        qid_to_has_ans[qa['id']] = bool(qa['answers'])\n  return qid_to_has_ans\n\ndef normalize_answer_v2(s):\n  \"\"\"Lower text and remove punctuation, articles and extra whitespace.\"\"\"\n  def remove_articles(text):\n    regex = re.compile(r'\\b(a|an|the)\\b', re.UNICODE)\n    return re.sub(regex, ' ', text)\n  def white_space_fix(text):\n    return ' '.join(text.split())\n  def remove_punc(text):\n    exclude = set(string.punctuation)\n    return ''.join(ch for ch in text if ch not in exclude)\n  def lower(text):\n    return text.lower()\n  return white_space_fix(remove_articles(remove_punc(lower(s))))\n\ndef get_tokens(s):\n  if not s: return []\n  return normalize_answer_v2(s).split()\n\ndef compute_exact(a_gold, a_pred):\n  return int(normalize_answer_v2(a_gold) == normalize_answer_v2(a_pred))\n\ndef compute_f1(a_gold, a_pred):\n  gold_toks = get_tokens(a_gold)\n  pred_toks = get_tokens(a_pred)\n  common = collections.Counter(gold_toks) & collections.Counter(pred_toks)\n  num_same = sum(common.values())\n  if len(gold_toks) == 0 or len(pred_toks) == 0:\n    # If either is no-answer, then F1 is 1 if they agree, 0 otherwise\n    return int(gold_toks == pred_toks)\n  if num_same == 0:\n    return 0\n  precision = 1.0 * num_same / len(pred_toks)\n  recall = 1.0 * num_same / len(gold_toks)\n  f1 = (2 * precision * recall) / (precision + recall)\n  return f1\n\ndef get_raw_scores(dataset, preds):\n  exact_scores = {}\n  f1_scores = {}\n  for article in dataset:\n    for p in article['paragraphs']:\n      for qa in p['qas']:\n        qid = qa['id']\n        gold_answers = [a['text'] for a in qa['answers']\n                        if normalize_answer_v2(a['text'])]\n        if not gold_answers:\n          # For unanswerable questions, only correct answer is empty string\n          gold_answers = ['']\n        if qid not in preds:\n          print('Missing prediction for %s' % qid)\n          continue\n        a_pred = preds[qid]\n        # Take max over all gold answers\n        exact_scores[qid] = max(compute_exact(a, a_pred) for a in gold_answers)\n        f1_scores[qid] = max(compute_f1(a, a_pred) for a in gold_answers)\n  return exact_scores, f1_scores\n\ndef apply_no_ans_threshold(scores, na_probs, qid_to_has_ans, na_prob_thresh):\n  new_scores = {}\n  for qid, s in scores.items():\n    pred_na = na_probs[qid] > na_prob_thresh\n    if pred_na:\n      new_scores[qid] = float(not qid_to_has_ans[qid])\n    else:\n      new_scores[qid] = s\n  return new_scores\n\ndef make_eval_dict(exact_scores, f1_scores, qid_list=None):\n  if not qid_list:\n    total = len(exact_scores)\n    return collections.OrderedDict([\n        ('exact', 100.0 * sum(exact_scores.values()) / total),\n        ('f1', 100.0 * sum(f1_scores.values()) / total),\n        ('total', total),\n    ])\n  else:\n    total = len(qid_list)\n    return collections.OrderedDict([\n        ('exact', 100.0 * sum(exact_scores[k] for k in qid_list) / total),\n        ('f1', 100.0 * sum(f1_scores[k] for k in qid_list) / total),\n        ('total', total),\n    ])\n\n\ndef find_best_thresh(preds, scores, na_probs, qid_to_has_ans):\n  num_no_ans = sum(1 for k in qid_to_has_ans if not qid_to_has_ans[k])\n  cur_score = num_no_ans\n  best_score = cur_score\n  best_thresh = 0.0\n  qid_list = sorted(na_probs, key=lambda k: na_probs[k])\n  for i, qid in enumerate(qid_list):\n    if qid not in scores: continue\n    if qid_to_has_ans[qid]:\n      diff = scores[qid]\n    else:\n      if preds[qid]:\n        diff = -1\n      else:\n        diff = 0\n    cur_score += diff\n    if cur_score > best_score:\n      best_score = cur_score\n      best_thresh = na_probs[qid]\n  return 100.0 * best_score / len(scores), best_thresh\n\n\ndef find_all_best_thresh(main_eval, preds, exact_raw, f1_raw, na_probs, qid_to_has_ans):\n  best_exact, exact_thresh = find_best_thresh(preds, exact_raw, na_probs, qid_to_has_ans)\n  best_f1, f1_thresh = find_best_thresh(preds, f1_raw, na_probs, qid_to_has_ans)\n  main_eval['best_exact'] = best_exact\n  main_eval['best_exact_thresh'] = exact_thresh\n  main_eval['best_f1'] = best_f1\n  main_eval['best_f1_thresh'] = f1_thresh\n\n\ndef merge_eval(main_eval, new_eval, prefix):\n  for k in new_eval:\n    main_eval['%s_%s' % (prefix, k)] = new_eval[k]\n\n####### above are from official SQuAD v2.0 evaluation scripts\n\ndef accumulate_predictions_v2(result_dict, cls_dict, all_examples,\n                              all_features, all_results, n_best_size,\n                              max_answer_length, start_n_top, end_n_top):\n  \"\"\"accumulate predictions for each positions in a dictionary.\"\"\"\n\n  example_index_to_features = collections.defaultdict(list)\n  for feature in all_features:\n    example_index_to_features[feature.example_index].append(feature)\n\n  unique_id_to_result = {}\n  for result in all_results:\n    unique_id_to_result[result.unique_id] = result\n\n  all_predictions = collections.OrderedDict()\n  all_nbest_json = collections.OrderedDict()\n  scores_diff_json = collections.OrderedDict()\n\n  for (example_index, example) in enumerate(all_examples):\n    if example_index not in result_dict:\n      result_dict[example_index] = {}\n    features = example_index_to_features[example_index]\n\n    prelim_predictions = []\n    # keep track of the minimum score of null start+end of position 0\n    score_null = 1000000  # large and positive\n\n    for (feature_index, feature) in enumerate(features):\n      if feature.unique_id not in result_dict[example_index]:\n        result_dict[example_index][feature.unique_id] = {}\n      result = unique_id_to_result[feature.unique_id]\n      cur_null_score = result.cls_logits\n\n      # if we could have irrelevant answers, get the min score of irrelevant\n      score_null = min(score_null, cur_null_score)\n\n      doc_offset = feature.tokens.index(\"[SEP]\") + 1\n      for i in range(start_n_top):\n        for j in range(end_n_top):\n          start_log_prob = result.start_top_log_probs[i]\n          start_index = result.start_top_index[i]\n\n          j_index = i * end_n_top + j\n\n          end_log_prob = result.end_top_log_probs[j_index]\n          end_index = result.end_top_index[j_index]\n          # We could hypothetically create invalid predictions, e.g., predict\n          # that the start of the span is in the question. We throw out all\n          # invalid predictions.\n          if start_index - doc_offset >= len(feature.tok_start_to_orig_index):\n            continue\n          if start_index - doc_offset < 0:\n            continue\n          if end_index - doc_offset >= len(feature.tok_end_to_orig_index):\n            continue\n          if not feature.token_is_max_context.get(start_index, False):\n            continue\n          if end_index < start_index:\n            continue\n          length = end_index - start_index + 1\n          if length > max_answer_length:\n            continue\n          start_idx = start_index - doc_offset\n          end_idx = end_index - doc_offset\n          if (start_idx, end_idx) not in result_dict[example_index][feature.unique_id]:\n            result_dict[example_index][feature.unique_id][(start_idx, end_idx)] = []\n          result_dict[example_index][feature.unique_id][(start_idx, end_idx)].append((start_log_prob, end_log_prob))\n    if example_index not in cls_dict:\n      cls_dict[example_index] = []\n    cls_dict[example_index].append(score_null)\n\n\ndef write_predictions_v2(result_dict, cls_dict, all_examples, all_features,\n                         all_results, n_best_size, max_answer_length,\n                         output_prediction_file,\n                         output_nbest_file, output_null_log_odds_file,\n                         null_score_diff_threshold):\n  \"\"\"Write final predictions to the json file and log-odds of null if needed.\"\"\"\n  tf.logging.info(\"Writing predictions to: %s\" % (output_prediction_file))\n  tf.logging.info(\"Writing nbest to: %s\" % (output_nbest_file))\n\n  example_index_to_features = collections.defaultdict(list)\n  for feature in all_features:\n    example_index_to_features[feature.example_index].append(feature)\n\n  unique_id_to_result = {}\n  for result in all_results:\n    unique_id_to_result[result.unique_id] = result\n\n  all_predictions = collections.OrderedDict()\n  all_nbest_json = collections.OrderedDict()\n  scores_diff_json = collections.OrderedDict()\n\n  for (example_index, example) in enumerate(all_examples):\n    features = example_index_to_features[example_index]\n\n    prelim_predictions = []\n    # keep track of the minimum score of null start+end of position 0\n    # score_null = 1000000  # large and positive\n\n    for (feature_index, feature) in enumerate(features):\n      for ((start_idx, end_idx), logprobs) in \\\n        result_dict[example_index][feature.unique_id].items():\n        start_log_prob = 0\n        end_log_prob = 0\n        for logprob in logprobs:\n          start_log_prob += logprob[0]\n          end_log_prob += logprob[1]\n        prelim_predictions.append(\n            _PrelimPrediction(\n                feature_index=feature_index,\n                start_index=start_idx,\n                end_index=end_idx,\n                start_log_prob=start_log_prob / len(logprobs),\n                end_log_prob=end_log_prob / len(logprobs)))\n\n    prelim_predictions = sorted(\n        prelim_predictions,\n        key=lambda x: (x.start_log_prob + x.end_log_prob),\n        reverse=True)\n\n    seen_predictions = {}\n    nbest = []\n    for pred in prelim_predictions:\n      if len(nbest) >= n_best_size:\n        break\n      feature = features[pred.feature_index]\n\n      tok_start_to_orig_index = feature.tok_start_to_orig_index\n      tok_end_to_orig_index = feature.tok_end_to_orig_index\n      start_orig_pos = tok_start_to_orig_index[pred.start_index]\n      end_orig_pos = tok_end_to_orig_index[pred.end_index]\n\n      paragraph_text = example.paragraph_text\n      final_text = paragraph_text[start_orig_pos: end_orig_pos + 1].strip()\n\n      if final_text in seen_predictions:\n        continue\n\n      seen_predictions[final_text] = True\n\n      nbest.append(\n          _NbestPrediction(\n              text=final_text,\n              start_log_prob=pred.start_log_prob,\n              end_log_prob=pred.end_log_prob))\n\n    # In very rare edge cases we could have no valid predictions. So we\n    # just create a nonce prediction in this case to avoid failure.\n    if not nbest:\n      nbest.append(\n          _NbestPrediction(\n              text=\"\",\n              start_log_prob=-1e6,\n              end_log_prob=-1e6))\n\n    total_scores = []\n    best_non_null_entry = None\n    for entry in nbest:\n      total_scores.append(entry.start_log_prob + entry.end_log_prob)\n      if not best_non_null_entry:\n        best_non_null_entry = entry\n\n    probs = _compute_softmax(total_scores)\n\n    nbest_json = []\n    for (i, entry) in enumerate(nbest):\n      output = collections.OrderedDict()\n      output[\"text\"] = entry.text\n      output[\"probability\"] = probs[i]\n      output[\"start_log_prob\"] = entry.start_log_prob\n      output[\"end_log_prob\"] = entry.end_log_prob\n      nbest_json.append(output)\n\n    assert len(nbest_json) >= 1\n    assert best_non_null_entry is not None\n\n    score_diff = sum(cls_dict[example_index]) / len(cls_dict[example_index])\n    scores_diff_json[example.qas_id] = score_diff\n    # predict null answers when null threshold is provided\n    if null_score_diff_threshold is None or score_diff < null_score_diff_threshold:\n      all_predictions[example.qas_id] = best_non_null_entry.text\n    else:\n      all_predictions[example.qas_id] = \"\"\n\n    all_nbest_json[example.qas_id] = nbest_json\n    assert len(nbest_json) >= 1\n\n  with tf.gfile.GFile(output_prediction_file, \"w\") as writer:\n    writer.write(json.dumps(all_predictions, indent=4) + \"\\n\")\n\n  with tf.gfile.GFile(output_nbest_file, \"w\") as writer:\n    writer.write(json.dumps(all_nbest_json, indent=4) + \"\\n\")\n\n  with tf.gfile.GFile(output_null_log_odds_file, \"w\") as writer:\n    writer.write(json.dumps(scores_diff_json, indent=4) + \"\\n\")\n  return all_predictions, scores_diff_json\n\n\ndef create_v2_model(albert_config, is_training, input_ids, input_mask,\n                    segment_ids, use_one_hot_embeddings, features,\n                    max_seq_length, start_n_top, end_n_top, dropout_prob,\n                    hub_module):\n  \"\"\"Creates a classification model.\"\"\"\n  (_, output) = fine_tuning_utils.create_albert(\n      albert_config=albert_config,\n      is_training=is_training,\n      input_ids=input_ids,\n      input_mask=input_mask,\n      segment_ids=segment_ids,\n      use_one_hot_embeddings=use_one_hot_embeddings,\n      use_einsum=True,\n      hub_module=hub_module)\n\n  bsz = tf.shape(output)[0]\n  return_dict = {}\n  output = tf.transpose(output, [1, 0, 2])\n\n  # invalid position mask such as query and special symbols (PAD, SEP, CLS)\n  p_mask = tf.cast(features[\"p_mask\"], dtype=tf.float32)\n\n  # logit of the start position\n  with tf.variable_scope(\"start_logits\"):\n    start_logits = tf.layers.dense(\n        output,\n        1,\n        kernel_initializer=modeling.create_initializer(\n            albert_config.initializer_range))\n    start_logits = tf.transpose(tf.squeeze(start_logits, -1), [1, 0])\n    start_logits_masked = start_logits * (1 - p_mask) - 1e30 * p_mask\n    start_log_probs = tf.nn.log_softmax(start_logits_masked, -1)\n\n  # logit of the end position\n  with tf.variable_scope(\"end_logits\"):\n    if is_training:\n      # during training, compute the end logits based on the\n      # ground truth of the start position\n      start_positions = tf.reshape(features[\"start_positions\"], [-1])\n      start_index = tf.one_hot(start_positions, depth=max_seq_length, axis=-1,\n                               dtype=tf.float32)\n      start_features = tf.einsum(\"lbh,bl->bh\", output, start_index)\n      start_features = tf.tile(start_features[None], [max_seq_length, 1, 1])\n      end_logits = tf.layers.dense(\n          tf.concat([output, start_features], axis=-1),\n          albert_config.hidden_size,\n          kernel_initializer=modeling.create_initializer(\n              albert_config.initializer_range),\n          activation=tf.tanh,\n          name=\"dense_0\")\n      end_logits = contrib_layers.layer_norm(end_logits, begin_norm_axis=-1)\n\n      end_logits = tf.layers.dense(\n          end_logits,\n          1,\n          kernel_initializer=modeling.create_initializer(\n              albert_config.initializer_range),\n          name=\"dense_1\")\n      end_logits = tf.transpose(tf.squeeze(end_logits, -1), [1, 0])\n      end_logits_masked = end_logits * (1 - p_mask) - 1e30 * p_mask\n      end_log_probs = tf.nn.log_softmax(end_logits_masked, -1)\n    else:\n      # during inference, compute the end logits based on beam search\n\n      start_top_log_probs, start_top_index = tf.nn.top_k(\n          start_log_probs, k=start_n_top)\n      start_index = tf.one_hot(start_top_index,\n                               depth=max_seq_length, axis=-1, dtype=tf.float32)\n      start_features = tf.einsum(\"lbh,bkl->bkh\", output, start_index)\n      end_input = tf.tile(output[:, :, None],\n                          [1, 1, start_n_top, 1])\n      start_features = tf.tile(start_features[None],\n                               [max_seq_length, 1, 1, 1])\n      end_input = tf.concat([end_input, start_features], axis=-1)\n      end_logits = tf.layers.dense(\n          end_input,\n          albert_config.hidden_size,\n          kernel_initializer=modeling.create_initializer(\n              albert_config.initializer_range),\n          activation=tf.tanh,\n          name=\"dense_0\")\n      end_logits = contrib_layers.layer_norm(end_logits, begin_norm_axis=-1)\n      end_logits = tf.layers.dense(\n          end_logits,\n          1,\n          kernel_initializer=modeling.create_initializer(\n              albert_config.initializer_range),\n          name=\"dense_1\")\n      end_logits = tf.reshape(end_logits, [max_seq_length, -1, start_n_top])\n      end_logits = tf.transpose(end_logits, [1, 2, 0])\n      end_logits_masked = end_logits * (\n          1 - p_mask[:, None]) - 1e30 * p_mask[:, None]\n      end_log_probs = tf.nn.log_softmax(end_logits_masked, -1)\n      end_top_log_probs, end_top_index = tf.nn.top_k(\n          end_log_probs, k=end_n_top)\n      end_top_log_probs = tf.reshape(\n          end_top_log_probs,\n          [-1, start_n_top * end_n_top])\n      end_top_index = tf.reshape(\n          end_top_index,\n          [-1, start_n_top * end_n_top])\n\n  if is_training:\n    return_dict[\"start_log_probs\"] = start_log_probs\n    return_dict[\"end_log_probs\"] = end_log_probs\n  else:\n    return_dict[\"start_top_log_probs\"] = start_top_log_probs\n    return_dict[\"start_top_index\"] = start_top_index\n    return_dict[\"end_top_log_probs\"] = end_top_log_probs\n    return_dict[\"end_top_index\"] = end_top_index\n\n  # an additional layer to predict answerability\n  with tf.variable_scope(\"answer_class\"):\n    # get the representation of CLS\n    cls_index = tf.one_hot(tf.zeros([bsz], dtype=tf.int32),\n                           max_seq_length,\n                           axis=-1, dtype=tf.float32)\n    cls_feature = tf.einsum(\"lbh,bl->bh\", output, cls_index)\n\n    # get the representation of START\n    start_p = tf.nn.softmax(start_logits_masked, axis=-1,\n                            name=\"softmax_start\")\n    start_feature = tf.einsum(\"lbh,bl->bh\", output, start_p)\n\n    # note(zhiliny): no dependency on end_feature so that we can obtain\n    # one single `cls_logits` for each sample\n    ans_feature = tf.concat([start_feature, cls_feature], -1)\n    ans_feature = tf.layers.dense(\n        ans_feature,\n        albert_config.hidden_size,\n        activation=tf.tanh,\n        kernel_initializer=modeling.create_initializer(\n            albert_config.initializer_range),\n        name=\"dense_0\")\n    ans_feature = tf.layers.dropout(ans_feature, dropout_prob,\n                                    training=is_training)\n    cls_logits = tf.layers.dense(\n        ans_feature,\n        1,\n        kernel_initializer=modeling.create_initializer(\n            albert_config.initializer_range),\n        name=\"dense_1\",\n        use_bias=False)\n    cls_logits = tf.squeeze(cls_logits, -1)\n\n    return_dict[\"cls_logits\"] = cls_logits\n\n  return return_dict\n\n\ndef v2_model_fn_builder(albert_config, init_checkpoint, learning_rate,\n                        num_train_steps, num_warmup_steps, use_tpu,\n                        use_one_hot_embeddings, max_seq_length, start_n_top,\n                        end_n_top, dropout_prob, hub_module):\n  \"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"\n\n  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n    \"\"\"The `model_fn` for TPUEstimator.\"\"\"\n\n    tf.logging.info(\"*** Features ***\")\n    for name in sorted(features.keys()):\n      tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\n\n    # unique_ids = features[\"unique_ids\"]\n    input_ids = features[\"input_ids\"]\n    input_mask = features[\"input_mask\"]\n    segment_ids = features[\"segment_ids\"]\n\n    is_training = (mode == tf_estimator.ModeKeys.TRAIN)\n\n    outputs = create_v2_model(\n        albert_config=albert_config,\n        is_training=is_training,\n        input_ids=input_ids,\n        input_mask=input_mask,\n        segment_ids=segment_ids,\n        use_one_hot_embeddings=use_one_hot_embeddings,\n        features=features,\n        max_seq_length=max_seq_length,\n        start_n_top=start_n_top,\n        end_n_top=end_n_top,\n        dropout_prob=dropout_prob,\n        hub_module=hub_module)\n\n    tvars = tf.trainable_variables()\n\n    initialized_variable_names = {}\n    scaffold_fn = None\n    if init_checkpoint:\n      (assignment_map, initialized_variable_names\n      ) = modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)\n      if use_tpu:\n\n        def tpu_scaffold():\n          tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n          return tf.train.Scaffold()\n\n        scaffold_fn = tpu_scaffold\n      else:\n        tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n\n    tf.logging.info(\"**** Trainable Variables ****\")\n    for var in tvars:\n      init_string = \"\"\n      if var.name in initialized_variable_names:\n        init_string = \", *INIT_FROM_CKPT*\"\n      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                      init_string)\n\n    output_spec = None\n    if mode == tf_estimator.ModeKeys.TRAIN:\n      seq_length = modeling.get_shape_list(input_ids)[1]\n\n      def compute_loss(log_probs, positions):\n        one_hot_positions = tf.one_hot(\n            positions, depth=seq_length, dtype=tf.float32)\n\n        loss = - tf.reduce_sum(one_hot_positions * log_probs, axis=-1)\n        loss = tf.reduce_mean(loss)\n        return loss\n\n      start_loss = compute_loss(\n          outputs[\"start_log_probs\"], features[\"start_positions\"])\n      end_loss = compute_loss(\n          outputs[\"end_log_probs\"], features[\"end_positions\"])\n\n      total_loss = (start_loss + end_loss) * 0.5\n\n      cls_logits = outputs[\"cls_logits\"]\n      is_impossible = tf.reshape(features[\"is_impossible\"], [-1])\n      regression_loss = tf.nn.sigmoid_cross_entropy_with_logits(\n          labels=tf.cast(is_impossible, dtype=tf.float32), logits=cls_logits)\n      regression_loss = tf.reduce_mean(regression_loss)\n\n      # note(zhiliny): by default multiply the loss by 0.5 so that the scale is\n      # comparable to start_loss and end_loss\n      total_loss += regression_loss * 0.5\n      train_op = optimization.create_optimizer(\n          total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)\n\n      output_spec = contrib_tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          train_op=train_op,\n          scaffold_fn=scaffold_fn)\n    elif mode == tf_estimator.ModeKeys.PREDICT:\n      predictions = {\n          \"unique_ids\": features[\"unique_ids\"],\n          \"start_top_index\": outputs[\"start_top_index\"],\n          \"start_top_log_probs\": outputs[\"start_top_log_probs\"],\n          \"end_top_index\": outputs[\"end_top_index\"],\n          \"end_top_log_probs\": outputs[\"end_top_log_probs\"],\n          \"cls_logits\": outputs[\"cls_logits\"]\n      }\n      output_spec = contrib_tpu.TPUEstimatorSpec(\n          mode=mode, predictions=predictions, scaffold_fn=scaffold_fn)\n    else:\n      raise ValueError(\n          \"Only TRAIN and PREDICT modes are supported: %s\" % (mode))\n\n    return output_spec\n\n  return model_fn\n\n\ndef evaluate_v2(result_dict, cls_dict, prediction_json, eval_examples,\n                eval_features, all_results, n_best_size, max_answer_length,\n                output_prediction_file, output_nbest_file,\n                output_null_log_odds_file):\n  null_score_diff_threshold = None\n  predictions, na_probs = write_predictions_v2(\n      result_dict, cls_dict, eval_examples, eval_features,\n      all_results, n_best_size, max_answer_length,\n      output_prediction_file, output_nbest_file,\n      output_null_log_odds_file, null_score_diff_threshold)\n\n  na_prob_thresh = 1.0  # default value taken from the eval script\n  qid_to_has_ans = make_qid_to_has_ans(prediction_json)  # maps qid to True/False\n  has_ans_qids = [k for k, v in qid_to_has_ans.items() if v]\n  no_ans_qids = [k for k, v in qid_to_has_ans.items() if not v]\n  exact_raw, f1_raw = get_raw_scores(prediction_json, predictions)\n  exact_thresh = apply_no_ans_threshold(exact_raw, na_probs, qid_to_has_ans,\n                                        na_prob_thresh)\n  f1_thresh = apply_no_ans_threshold(f1_raw, na_probs, qid_to_has_ans,\n                                     na_prob_thresh)\n  out_eval = make_eval_dict(exact_thresh, f1_thresh)\n  find_all_best_thresh(out_eval, predictions, exact_raw, f1_raw, na_probs, qid_to_has_ans)\n  null_score_diff_threshold = out_eval[\"best_f1_thresh\"]\n\n  predictions, na_probs = write_predictions_v2(\n      result_dict, cls_dict,eval_examples, eval_features,\n      all_results, n_best_size, max_answer_length,\n      output_prediction_file, output_nbest_file,\n      output_null_log_odds_file, null_score_diff_threshold)\n\n  qid_to_has_ans = make_qid_to_has_ans(prediction_json)  # maps qid to True/False\n  has_ans_qids = [k for k, v in qid_to_has_ans.items() if v]\n  no_ans_qids = [k for k, v in qid_to_has_ans.items() if not v]\n  exact_raw, f1_raw = get_raw_scores(prediction_json, predictions)\n  exact_thresh = apply_no_ans_threshold(exact_raw, na_probs, qid_to_has_ans,\n                                        na_prob_thresh)\n  f1_thresh = apply_no_ans_threshold(f1_raw, na_probs, qid_to_has_ans,\n                                     na_prob_thresh)\n  out_eval = make_eval_dict(exact_thresh, f1_thresh)\n  out_eval[\"null_score_diff_threshold\"] = null_score_diff_threshold\n  return out_eval\n"
        },
        {
          "name": "tokenization.py",
          "type": "blob",
          "size": 14.4287109375,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# coding=utf-8\n\"\"\"Tokenization classes.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport unicodedata\nimport six\nfrom six.moves import range\nimport tensorflow.compat.v1 as tf\nimport tensorflow_hub as hub\nimport sentencepiece as spm\n\nSPIECE_UNDERLINE = u\"▁\".encode(\"utf-8\")\n\n\ndef preprocess_text(inputs, remove_space=True, lower=False):\n  \"\"\"preprocess data by removing extra space and normalize data.\"\"\"\n  outputs = inputs\n  if remove_space:\n    outputs = \" \".join(inputs.strip().split())\n\n  if six.PY2 and isinstance(outputs, str):\n    try:\n      outputs = six.ensure_text(outputs, \"utf-8\")\n    except UnicodeDecodeError:\n      outputs = six.ensure_text(outputs, \"latin-1\")\n\n  outputs = unicodedata.normalize(\"NFKD\", outputs)\n  outputs = \"\".join([c for c in outputs if not unicodedata.combining(c)])\n  if lower:\n    outputs = outputs.lower()\n\n  return outputs\n\n\ndef encode_pieces(sp_model, text, return_unicode=True, sample=False):\n  \"\"\"turn sentences into word pieces.\"\"\"\n\n  if six.PY2 and isinstance(text, six.text_type):\n    text = six.ensure_binary(text, \"utf-8\")\n\n  if not sample:\n    pieces = sp_model.EncodeAsPieces(text)\n  else:\n    pieces = sp_model.SampleEncodeAsPieces(text, 64, 0.1)\n  new_pieces = []\n  for piece in pieces:\n    piece = printable_text(piece)\n    if len(piece) > 1 and piece[-1] == \",\" and piece[-2].isdigit():\n      cur_pieces = sp_model.EncodeAsPieces(\n          six.ensure_binary(piece[:-1]).replace(SPIECE_UNDERLINE, b\"\"))\n      if piece[0] != SPIECE_UNDERLINE and cur_pieces[0][0] == SPIECE_UNDERLINE:\n        if len(cur_pieces[0]) == 1:\n          cur_pieces = cur_pieces[1:]\n        else:\n          cur_pieces[0] = cur_pieces[0][1:]\n      cur_pieces.append(piece[-1])\n      new_pieces.extend(cur_pieces)\n    else:\n      new_pieces.append(piece)\n\n  # note(zhiliny): convert back to unicode for py2\n  if six.PY2 and return_unicode:\n    ret_pieces = []\n    for piece in new_pieces:\n      if isinstance(piece, str):\n        piece = six.ensure_text(piece, \"utf-8\")\n      ret_pieces.append(piece)\n    new_pieces = ret_pieces\n\n  return new_pieces\n\n\ndef encode_ids(sp_model, text, sample=False):\n  pieces = encode_pieces(sp_model, text, return_unicode=False, sample=sample)\n  ids = [sp_model.PieceToId(piece) for piece in pieces]\n  return ids\n\n\ndef convert_to_unicode(text):\n  \"\"\"Converts `text` to Unicode (if it's not already), assuming utf-8 input.\"\"\"\n  if six.PY3:\n    if isinstance(text, str):\n      return text\n    elif isinstance(text, bytes):\n      return six.ensure_text(text, \"utf-8\", \"ignore\")\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  elif six.PY2:\n    if isinstance(text, str):\n      return six.ensure_text(text, \"utf-8\", \"ignore\")\n    elif isinstance(text, six.text_type):\n      return text\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  else:\n    raise ValueError(\"Not running on Python2 or Python 3?\")\n\n\ndef printable_text(text):\n  \"\"\"Returns text encoded in a way suitable for print or `tf.logging`.\"\"\"\n\n  # These functions want `str` for both Python2 and Python3, but in one case\n  # it's a Unicode string and in the other it's a byte string.\n  if six.PY3:\n    if isinstance(text, str):\n      return text\n    elif isinstance(text, bytes):\n      return six.ensure_text(text, \"utf-8\", \"ignore\")\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  elif six.PY2:\n    if isinstance(text, str):\n      return text\n    elif isinstance(text, six.text_type):\n      return six.ensure_binary(text, \"utf-8\")\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  else:\n    raise ValueError(\"Not running on Python2 or Python 3?\")\n\n\ndef load_vocab(vocab_file):\n  \"\"\"Loads a vocabulary file into a dictionary.\"\"\"\n  vocab = collections.OrderedDict()\n  with tf.gfile.GFile(vocab_file, \"r\") as reader:\n    while True:\n      token = convert_to_unicode(reader.readline())\n      if not token:\n        break\n      token = token.strip().split()[0] if token.strip() else \" \"\n      if token not in vocab:\n        vocab[token] = len(vocab)\n  return vocab\n\n\ndef convert_by_vocab(vocab, items):\n  \"\"\"Converts a sequence of [tokens|ids] using the vocab.\"\"\"\n  output = []\n  for item in items:\n    output.append(vocab[item])\n  return output\n\n\ndef convert_tokens_to_ids(vocab, tokens):\n  return convert_by_vocab(vocab, tokens)\n\n\ndef convert_ids_to_tokens(inv_vocab, ids):\n  return convert_by_vocab(inv_vocab, ids)\n\n\ndef whitespace_tokenize(text):\n  \"\"\"Runs basic whitespace cleaning and splitting on a piece of text.\"\"\"\n  text = text.strip()\n  if not text:\n    return []\n  tokens = text.split()\n  return tokens\n\n\nclass FullTokenizer(object):\n  \"\"\"Runs end-to-end tokenziation.\"\"\"\n\n  def __init__(self, vocab_file, do_lower_case=True, spm_model_file=None):\n    self.vocab = None\n    self.sp_model = None\n    if spm_model_file:\n      self.sp_model = spm.SentencePieceProcessor()\n      tf.logging.info(\"loading sentence piece model\")\n      # Handle cases where SP can't load the file, but gfile can.\n      sp_model_ = tf.gfile.GFile(spm_model_file, \"rb\").read()\n      self.sp_model.LoadFromSerializedProto(sp_model_)\n      # Note(mingdachen): For the purpose of consisent API, we are\n      # generating a vocabulary for the sentence piece tokenizer.\n      self.vocab = {self.sp_model.IdToPiece(i): i for i\n                    in range(self.sp_model.GetPieceSize())}\n    else:\n      self.vocab = load_vocab(vocab_file)\n      self.basic_tokenizer = BasicTokenizer(do_lower_case=do_lower_case)\n      self.wordpiece_tokenizer = WordpieceTokenizer(vocab=self.vocab)\n    self.inv_vocab = {v: k for k, v in self.vocab.items()}\n\n  @classmethod\n  def from_scratch(cls, vocab_file, do_lower_case, spm_model_file):\n    return FullTokenizer(vocab_file, do_lower_case, spm_model_file)\n\n  @classmethod\n  def from_hub_module(cls, hub_module, use_spm=True):\n    \"\"\"Get the vocab file and casing info from the Hub module.\"\"\"\n    with tf.Graph().as_default():\n      albert_module = hub.Module(hub_module)\n      tokenization_info = albert_module(signature=\"tokenization_info\",\n                                        as_dict=True)\n      with tf.Session() as sess:\n        vocab_file, do_lower_case = sess.run(\n            [tokenization_info[\"vocab_file\"],\n             tokenization_info[\"do_lower_case\"]])\n    if use_spm:\n      spm_model_file = vocab_file\n      vocab_file = None\n    return FullTokenizer(\n        vocab_file=vocab_file, do_lower_case=do_lower_case,\n        spm_model_file=spm_model_file)\n\n  def tokenize(self, text):\n    if self.sp_model:\n      split_tokens = encode_pieces(self.sp_model, text, return_unicode=False)\n    else:\n      split_tokens = []\n      for token in self.basic_tokenizer.tokenize(text):\n        for sub_token in self.wordpiece_tokenizer.tokenize(token):\n          split_tokens.append(sub_token)\n\n    return split_tokens\n\n  def convert_tokens_to_ids(self, tokens):\n    if self.sp_model:\n      tf.logging.info(\"using sentence piece tokenzier.\")\n      return [self.sp_model.PieceToId(\n          printable_text(token)) for token in tokens]\n    else:\n      return convert_by_vocab(self.vocab, tokens)\n\n  def convert_ids_to_tokens(self, ids):\n    if self.sp_model:\n      tf.logging.info(\"using sentence piece tokenzier.\")\n      return [self.sp_model.IdToPiece(id_) for id_ in ids]\n    else:\n      return convert_by_vocab(self.inv_vocab, ids)\n\n\nclass BasicTokenizer(object):\n  \"\"\"Runs basic tokenization (punctuation splitting, lower casing, etc.).\"\"\"\n\n  def __init__(self, do_lower_case=True):\n    \"\"\"Constructs a BasicTokenizer.\n\n    Args:\n      do_lower_case: Whether to lower case the input.\n    \"\"\"\n    self.do_lower_case = do_lower_case\n\n  def tokenize(self, text):\n    \"\"\"Tokenizes a piece of text.\"\"\"\n    text = convert_to_unicode(text)\n    text = self._clean_text(text)\n\n    # This was added on November 1st, 2018 for the multilingual and Chinese\n    # models. This is also applied to the English models now, but it doesn't\n    # matter since the English models were not trained on any Chinese data\n    # and generally don't have any Chinese data in them (there are Chinese\n    # characters in the vocabulary because Wikipedia does have some Chinese\n    # words in the English Wikipedia.).\n    text = self._tokenize_chinese_chars(text)\n\n    orig_tokens = whitespace_tokenize(text)\n    split_tokens = []\n    for token in orig_tokens:\n      if self.do_lower_case:\n        token = token.lower()\n        token = self._run_strip_accents(token)\n      split_tokens.extend(self._run_split_on_punc(token))\n\n    output_tokens = whitespace_tokenize(\" \".join(split_tokens))\n    return output_tokens\n\n  def _run_strip_accents(self, text):\n    \"\"\"Strips accents from a piece of text.\"\"\"\n    text = unicodedata.normalize(\"NFD\", text)\n    output = []\n    for char in text:\n      cat = unicodedata.category(char)\n      if cat == \"Mn\":\n        continue\n      output.append(char)\n    return \"\".join(output)\n\n  def _run_split_on_punc(self, text):\n    \"\"\"Splits punctuation on a piece of text.\"\"\"\n    chars = list(text)\n    i = 0\n    start_new_word = True\n    output = []\n    while i < len(chars):\n      char = chars[i]\n      if _is_punctuation(char):\n        output.append([char])\n        start_new_word = True\n      else:\n        if start_new_word:\n          output.append([])\n        start_new_word = False\n        output[-1].append(char)\n      i += 1\n\n    return [\"\".join(x) for x in output]\n\n  def _tokenize_chinese_chars(self, text):\n    \"\"\"Adds whitespace around any CJK character.\"\"\"\n    output = []\n    for char in text:\n      cp = ord(char)\n      if self._is_chinese_char(cp):\n        output.append(\" \")\n        output.append(char)\n        output.append(\" \")\n      else:\n        output.append(char)\n    return \"\".join(output)\n\n  def _is_chinese_char(self, cp):\n    \"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"\n    # This defines a \"chinese character\" as anything in the CJK Unicode block:\n    #   https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)\n    #\n    # Note that the CJK Unicode block is NOT all Japanese and Korean characters,\n    # despite its name. The modern Korean Hangul alphabet is a different block,\n    # as is Japanese Hiragana and Katakana. Those alphabets are used to write\n    # space-separated words, so they are not treated specially and handled\n    # like the all of the other languages.\n    if ((cp >= 0x4E00 and cp <= 0x9FFF) or  #\n        (cp >= 0x3400 and cp <= 0x4DBF) or  #\n        (cp >= 0x20000 and cp <= 0x2A6DF) or  #\n        (cp >= 0x2A700 and cp <= 0x2B73F) or  #\n        (cp >= 0x2B740 and cp <= 0x2B81F) or  #\n        (cp >= 0x2B820 and cp <= 0x2CEAF) or\n        (cp >= 0xF900 and cp <= 0xFAFF) or  #\n        (cp >= 0x2F800 and cp <= 0x2FA1F)):  #\n      return True\n\n    return False\n\n  def _clean_text(self, text):\n    \"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"\n    output = []\n    for char in text:\n      cp = ord(char)\n      if cp == 0 or cp == 0xfffd or _is_control(char):\n        continue\n      if _is_whitespace(char):\n        output.append(\" \")\n      else:\n        output.append(char)\n    return \"\".join(output)\n\n\nclass WordpieceTokenizer(object):\n  \"\"\"Runs WordPiece tokenziation.\"\"\"\n\n  def __init__(self, vocab, unk_token=\"[UNK]\", max_input_chars_per_word=200):\n    self.vocab = vocab\n    self.unk_token = unk_token\n    self.max_input_chars_per_word = max_input_chars_per_word\n\n  def tokenize(self, text):\n    \"\"\"Tokenizes a piece of text into its word pieces.\n\n    This uses a greedy longest-match-first algorithm to perform tokenization\n    using the given vocabulary.\n\n    For example:\n      input = \"unaffable\"\n      output = [\"un\", \"##aff\", \"##able\"]\n\n    Args:\n      text: A single token or whitespace separated tokens. This should have\n        already been passed through `BasicTokenizer.\n\n    Returns:\n      A list of wordpiece tokens.\n    \"\"\"\n\n    text = convert_to_unicode(text)\n\n    output_tokens = []\n    for token in whitespace_tokenize(text):\n      chars = list(token)\n      if len(chars) > self.max_input_chars_per_word:\n        output_tokens.append(self.unk_token)\n        continue\n\n      is_bad = False\n      start = 0\n      sub_tokens = []\n      while start < len(chars):\n        end = len(chars)\n        cur_substr = None\n        while start < end:\n          substr = \"\".join(chars[start:end])\n          if start > 0:\n            substr = \"##\" + six.ensure_str(substr)\n          if substr in self.vocab:\n            cur_substr = substr\n            break\n          end -= 1\n        if cur_substr is None:\n          is_bad = True\n          break\n        sub_tokens.append(cur_substr)\n        start = end\n\n      if is_bad:\n        output_tokens.append(self.unk_token)\n      else:\n        output_tokens.extend(sub_tokens)\n    return output_tokens\n\n\ndef _is_whitespace(char):\n  \"\"\"Checks whether `chars` is a whitespace character.\"\"\"\n  # \\t, \\n, and \\r are technically control characters but we treat them\n  # as whitespace since they are generally considered as such.\n  if char == \" \" or char == \"\\t\" or char == \"\\n\" or char == \"\\r\":\n    return True\n  cat = unicodedata.category(char)\n  if cat == \"Zs\":\n    return True\n  return False\n\n\ndef _is_control(char):\n  \"\"\"Checks whether `chars` is a control character.\"\"\"\n  # These are technically control characters but we count them as whitespace\n  # characters.\n  if char == \"\\t\" or char == \"\\n\" or char == \"\\r\":\n    return False\n  cat = unicodedata.category(char)\n  if cat in (\"Cc\", \"Cf\"):\n    return True\n  return False\n\n\ndef _is_punctuation(char):\n  \"\"\"Checks whether `chars` is a punctuation character.\"\"\"\n  cp = ord(char)\n  # We treat all non-letter/number ASCII as punctuation.\n  # Characters such as \"^\", \"$\", and \"`\" are not in the Unicode\n  # Punctuation class but we treat them as punctuation anyways, for\n  # consistency.\n  if ((cp >= 33 and cp <= 47) or (cp >= 58 and cp <= 64) or\n      (cp >= 91 and cp <= 96) or (cp >= 123 and cp <= 126)):\n    return True\n  cat = unicodedata.category(char)\n  if cat.startswith(\"P\"):\n    return True\n  return False\n"
        },
        {
          "name": "tokenization_test.py",
          "type": "blob",
          "size": 4.53515625,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nimport os\nimport tempfile\nfrom albert import tokenization\nimport six\nimport tensorflow.compat.v1 as tf\n\n\nclass TokenizationTest(tf.test.TestCase):\n\n  def test_full_tokenizer(self):\n    vocab_tokens = [\n        \"[UNK]\", \"[CLS]\", \"[SEP]\", \"want\", \"##want\", \"##ed\", \"wa\", \"un\", \"runn\",\n        \"##ing\", \",\"\n    ]\n    with tempfile.NamedTemporaryFile(delete=False) as vocab_writer:\n      if six.PY2:\n        vocab_writer.write(\"\".join([x + \"\\n\" for x in vocab_tokens]))\n      else:\n        contents = \"\".join([six.ensure_str(x) + \"\\n\" for x in vocab_tokens])\n        vocab_writer.write(six.ensure_binary(contents, \"utf-8\"))\n\n      vocab_file = vocab_writer.name\n\n    tokenizer = tokenization.FullTokenizer(vocab_file)\n    os.unlink(vocab_file)\n\n    tokens = tokenizer.tokenize(u\"UNwant\\u00E9d,running\")\n    self.assertAllEqual(tokens, [\"un\", \"##want\", \"##ed\", \",\", \"runn\", \"##ing\"])\n\n    self.assertAllEqual(\n        tokenizer.convert_tokens_to_ids(tokens), [7, 4, 5, 10, 8, 9])\n\n  def test_chinese(self):\n    tokenizer = tokenization.BasicTokenizer()\n\n    self.assertAllEqual(\n        tokenizer.tokenize(u\"ah\\u535A\\u63A8zz\"),\n        [u\"ah\", u\"\\u535A\", u\"\\u63A8\", u\"zz\"])\n\n  def test_basic_tokenizer_lower(self):\n    tokenizer = tokenization.BasicTokenizer(do_lower_case=True)\n\n    self.assertAllEqual(\n        tokenizer.tokenize(u\" \\tHeLLo!how  \\n Are yoU?  \"),\n        [\"hello\", \"!\", \"how\", \"are\", \"you\", \"?\"])\n    self.assertAllEqual(tokenizer.tokenize(u\"H\\u00E9llo\"), [\"hello\"])\n\n  def test_basic_tokenizer_no_lower(self):\n    tokenizer = tokenization.BasicTokenizer(do_lower_case=False)\n\n    self.assertAllEqual(\n        tokenizer.tokenize(u\" \\tHeLLo!how  \\n Are yoU?  \"),\n        [\"HeLLo\", \"!\", \"how\", \"Are\", \"yoU\", \"?\"])\n\n  def test_wordpiece_tokenizer(self):\n    vocab_tokens = [\n        \"[UNK]\", \"[CLS]\", \"[SEP]\", \"want\", \"##want\", \"##ed\", \"wa\", \"un\", \"runn\",\n        \"##ing\"\n    ]\n\n    vocab = {}\n    for (i, token) in enumerate(vocab_tokens):\n      vocab[token] = i\n    tokenizer = tokenization.WordpieceTokenizer(vocab=vocab)\n\n    self.assertAllEqual(tokenizer.tokenize(\"\"), [])\n\n    self.assertAllEqual(\n        tokenizer.tokenize(\"unwanted running\"),\n        [\"un\", \"##want\", \"##ed\", \"runn\", \"##ing\"])\n\n    self.assertAllEqual(\n        tokenizer.tokenize(\"unwantedX running\"), [\"[UNK]\", \"runn\", \"##ing\"])\n\n  def test_convert_tokens_to_ids(self):\n    vocab_tokens = [\n        \"[UNK]\", \"[CLS]\", \"[SEP]\", \"want\", \"##want\", \"##ed\", \"wa\", \"un\", \"runn\",\n        \"##ing\"\n    ]\n\n    vocab = {}\n    for (i, token) in enumerate(vocab_tokens):\n      vocab[token] = i\n\n    self.assertAllEqual(\n        tokenization.convert_tokens_to_ids(\n            vocab, [\"un\", \"##want\", \"##ed\", \"runn\", \"##ing\"]), [7, 4, 5, 8, 9])\n\n  def test_is_whitespace(self):\n    self.assertTrue(tokenization._is_whitespace(u\" \"))\n    self.assertTrue(tokenization._is_whitespace(u\"\\t\"))\n    self.assertTrue(tokenization._is_whitespace(u\"\\r\"))\n    self.assertTrue(tokenization._is_whitespace(u\"\\n\"))\n    self.assertTrue(tokenization._is_whitespace(u\"\\u00A0\"))\n\n    self.assertFalse(tokenization._is_whitespace(u\"A\"))\n    self.assertFalse(tokenization._is_whitespace(u\"-\"))\n\n  def test_is_control(self):\n    self.assertTrue(tokenization._is_control(u\"\\u0005\"))\n\n    self.assertFalse(tokenization._is_control(u\"A\"))\n    self.assertFalse(tokenization._is_control(u\" \"))\n    self.assertFalse(tokenization._is_control(u\"\\t\"))\n    self.assertFalse(tokenization._is_control(u\"\\r\"))\n    self.assertFalse(tokenization._is_control(u\"\\U0001F4A9\"))\n\n  def test_is_punctuation(self):\n    self.assertTrue(tokenization._is_punctuation(u\"-\"))\n    self.assertTrue(tokenization._is_punctuation(u\"$\"))\n    self.assertTrue(tokenization._is_punctuation(u\"`\"))\n    self.assertTrue(tokenization._is_punctuation(u\".\"))\n\n    self.assertFalse(tokenization._is_punctuation(u\"A\"))\n    self.assertFalse(tokenization._is_punctuation(u\" \"))\n\n\nif __name__ == \"__main__\":\n  tf.test.main()\n"
        }
      ]
    }
  ]
}