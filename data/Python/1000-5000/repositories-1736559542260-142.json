{
  "metadata": {
    "timestamp": 1736559542260,
    "page": 142,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "neuralchen/SimSwap",
      "stars": 4637,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.064453125,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.8623046875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\ndocs/ppt/\ncheckpoints/\n*.tar\n*.patch\n*.zip\n*.avi\n*.pdf\n*.pptx\n\n*.pth\n*.onnx\nwandb/\ntemp_results/\noutput/*.*"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 18.8818359375,
          "content": "Attribution-NonCommercial 4.0 International\n\n=======================================================================\n\nCreative Commons Corporation (\"Creative Commons\") is not a law firm and\ndoes not provide legal services or legal advice. Distribution of\nCreative Commons public licenses does not create a lawyer-client or\nother relationship. Creative Commons makes its licenses and related\ninformation available on an \"as-is\" basis. Creative Commons gives no\nwarranties regarding its licenses, any material licensed under their\nterms and conditions, or any related information. Creative Commons\ndisclaims all liability for damages resulting from their use to the\nfullest extent possible.\n\nUsing Creative Commons Public Licenses\n\nCreative Commons public licenses provide a standard set of terms and\nconditions that creators and other rights holders may use to share\noriginal works of authorship and other material subject to copyright\nand certain other rights specified in the public license below. The\nfollowing considerations are for informational purposes only, are not\nexhaustive, and do not form part of our licenses.\n\n     Considerations for licensors: Our public licenses are\n     intended for use by those authorized to give the public\n     permission to use material in ways otherwise restricted by\n     copyright and certain other rights. Our licenses are\n     irrevocable. Licensors should read and understand the terms\n     and conditions of the license they choose before applying it.\n     Licensors should also secure all rights necessary before\n     applying our licenses so that the public can reuse the\n     material as expected. Licensors should clearly mark any\n     material not subject to the license. This includes other CC-\n     licensed material, or material used under an exception or\n     limitation to copyright. More considerations for licensors:\n  wiki.creativecommons.org/Considerations_for_licensors\n\n     Considerations for the public: By using one of our public\n     licenses, a licensor grants the public permission to use the\n     licensed material under specified terms and conditions. If\n     the licensor's permission is not necessary for any reason--for\n     example, because of any applicable exception or limitation to\n     copyright--then that use is not regulated by the license. Our\n     licenses grant only permissions under copyright and certain\n     other rights that a licensor has authority to grant. Use of\n     the licensed material may still be restricted for other\n     reasons, including because others have copyright or other\n     rights in the material. A licensor may make special requests,\n     such as asking that all changes be marked or described.\n     Although not required by our licenses, you are encouraged to\n     respect those requests where reasonable. More_considerations\n     for the public: \n  wiki.creativecommons.org/Considerations_for_licensees\n\n=======================================================================\n\nCreative Commons Attribution-NonCommercial 4.0 International Public\nLicense\n\nBy exercising the Licensed Rights (defined below), You accept and agree\nto be bound by the terms and conditions of this Creative Commons\nAttribution-NonCommercial 4.0 International Public License (\"Public\nLicense\"). To the extent this Public License may be interpreted as a\ncontract, You are granted the Licensed Rights in consideration of Your\nacceptance of these terms and conditions, and the Licensor grants You\nsuch rights in consideration of benefits the Licensor receives from\nmaking the Licensed Material available under these terms and\nconditions.\n\nSection 1 -- Definitions.\n\n  a. Adapted Material means material subject to Copyright and Similar\n     Rights that is derived from or based upon the Licensed Material\n     and in which the Licensed Material is translated, altered,\n     arranged, transformed, or otherwise modified in a manner requiring\n     permission under the Copyright and Similar Rights held by the\n     Licensor. For purposes of this Public License, where the Licensed\n     Material is a musical work, performance, or sound recording,\n     Adapted Material is always produced where the Licensed Material is\n     synched in timed relation with a moving image.\n\n  b. Adapter's License means the license You apply to Your Copyright\n     and Similar Rights in Your contributions to Adapted Material in\n     accordance with the terms and conditions of this Public License.\n\n  c. Copyright and Similar Rights means copyright and/or similar rights\n     closely related to copyright including, without limitation,\n     performance, broadcast, sound recording, and Sui Generis Database\n     Rights, without regard to how the rights are labeled or\n     categorized. For purposes of this Public License, the rights\n     specified in Section 2(b)(1)-(2) are not Copyright and Similar\n     Rights.\n  d. Effective Technological Measures means those measures that, in the\n     absence of proper authority, may not be circumvented under laws\n     fulfilling obligations under Article 11 of the WIPO Copyright\n     Treaty adopted on December 20, 1996, and/or similar international\n     agreements.\n\n  e. Exceptions and Limitations means fair use, fair dealing, and/or\n     any other exception or limitation to Copyright and Similar Rights\n     that applies to Your use of the Licensed Material.\n\n  f. Licensed Material means the artistic or literary work, database,\n     or other material to which the Licensor applied this Public\n     License.\n\n  g. Licensed Rights means the rights granted to You subject to the\n     terms and conditions of this Public License, which are limited to\n     all Copyright and Similar Rights that apply to Your use of the\n     Licensed Material and that the Licensor has authority to license.\n\n  h. Licensor means the individual(s) or entity(ies) granting rights\n     under this Public License.\n\n  i. NonCommercial means not primarily intended for or directed towards\n     commercial advantage or monetary compensation. For purposes of\n     this Public License, the exchange of the Licensed Material for\n     other material subject to Copyright and Similar Rights by digital\n     file-sharing or similar means is NonCommercial provided there is\n     no payment of monetary compensation in connection with the\n     exchange.\n\n  j. Share means to provide material to the public by any means or\n     process that requires permission under the Licensed Rights, such\n     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  k. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n     the Council of 11 March 1996 on the legal protection of databases,\n     as amended and/or succeeded, as well as other essentially\n     equivalent rights anywhere in the world.\n\n  l. You means the individual or entity exercising the Licensed Rights\n     under this Public License. Your has a corresponding meaning.\n\nSection 2 -- Scope.\n\n  a. License grant.\n\n       1. Subject to the terms and conditions of this Public License,\n          the Licensor hereby grants You a worldwide, royalty-free,\n          non-sublicensable, non-exclusive, irrevocable license to\n          exercise the Licensed Rights in the Licensed Material to:\n\n            a. reproduce and Share the Licensed Material, in whole or\n               in part, for NonCommercial purposes only; and\n\n            b. produce, reproduce, and Share Adapted Material for\n               NonCommercial purposes only.\n\n       2. Exceptions and Limitations. For the avoidance of doubt, where\n          Exceptions and Limitations apply to Your use, this Public\n          License does not apply, and You do not need to comply with\n          its terms and conditions.\n\n       3. Term. The term of this Public License is specified in Section\n          6(a).\n\n       4. Media and formats; technical modifications allowed. The\n          Licensor authorizes You to exercise the Licensed Rights in\n          all media and formats whether now known or hereafter created,\n          and to make technical modifications necessary to do so. The\n          Licensor waives and/or agrees not to assert any right or\n          authority to forbid You from making technical modifications\n          necessary to exercise the Licensed Rights, including\n          technical modifications necessary to circumvent Effective\n          Technological Measures. For purposes of this Public License,\n          simply making modifications authorized by this Section 2(a)\n          (4) never produces Adapted Material.\n\n       5. Downstream recipients.\n\n            a. Offer from the Licensor -- Licensed Material. Every\n               recipient of the Licensed Material automatically\n               receives an offer from the Licensor to exercise the\n               Licensed Rights under the terms and conditions of this\n               Public License.\n\n            b. No downstream restrictions. You may not offer or impose\n               any additional or different terms or conditions on, or\n               apply any Effective Technological Measures to, the\n               Licensed Material if doing so restricts exercise of the\n               Licensed Rights by any recipient of the Licensed\n               Material.\n\n       6. No endorsement. Nothing in this Public License constitutes or\n          may be construed as permission to assert or imply that You\n          are, or that Your use of the Licensed Material is, connected\n          with, or sponsored, endorsed, or granted official status by,\n          the Licensor or others designated to receive attribution as\n          provided in Section 3(a)(1)(A)(i).\n\n  b. Other rights.\n\n       1. Moral rights, such as the right of integrity, are not\n          licensed under this Public License, nor are publicity,\n          privacy, and/or other similar personality rights; however, to\n          the extent possible, the Licensor waives and/or agrees not to\n          assert any such rights held by the Licensor to the limited\n          extent necessary to allow You to exercise the Licensed\n          Rights, but not otherwise.\n\n       2. Patent and trademark rights are not licensed under this\n          Public License.\n\n       3. To the extent possible, the Licensor waives any right to\n          collect royalties from You for the exercise of the Licensed\n          Rights, whether directly or through a collecting society\n          under any voluntary or waivable statutory or compulsory\n          licensing scheme. In all other cases the Licensor expressly\n          reserves any right to collect such royalties, including when\n          the Licensed Material is used other than for NonCommercial\n          purposes.\n\nSection 3 -- License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the\nfollowing conditions.\n\n  a. Attribution.\n\n       1. If You Share the Licensed Material (including in modified\n          form), You must:\n\n            a. retain the following if it is supplied by the Licensor\n               with the Licensed Material:\n\n                 i. identification of the creator(s) of the Licensed\n                    Material and any others designated to receive\n                    attribution, in any reasonable manner requested by\n                    the Licensor (including by pseudonym if\n                    designated);\n\n                ii. a copyright notice;\n\n               iii. a notice that refers to this Public License;\n\n                iv. a notice that refers to the disclaimer of\n                    warranties;\n\n                 v. a URI or hyperlink to the Licensed Material to the\n                    extent reasonably practicable;\n\n            b. indicate if You modified the Licensed Material and\n               retain an indication of any previous modifications; and\n\n            c. indicate the Licensed Material is licensed under this\n               Public License, and include the text of, or the URI or\n               hyperlink to, this Public License.\n\n       2. You may satisfy the conditions in Section 3(a)(1) in any\n          reasonable manner based on the medium, means, and context in\n          which You Share the Licensed Material. For example, it may be\n          reasonable to satisfy the conditions by providing a URI or\n          hyperlink to a resource that includes the required\n          information.\n\n       3. If requested by the Licensor, You must remove any of the\n          information required by Section 3(a)(1)(A) to the extent\n          reasonably practicable.\n\n       4. If You Share Adapted Material You produce, the Adapter's\n          License You apply must not prevent recipients of the Adapted\n          Material from complying with this Public License.\n\nSection 4 -- Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that\napply to Your use of the Licensed Material:\n\n  a. for the avoidance of doubt, Section 2(a)(1) grants You the right\n     to extract, reuse, reproduce, and Share all or a substantial\n     portion of the contents of the database for NonCommercial purposes\n     only;\n\n  b. if You include all or a substantial portion of the database\n     contents in a database in which You have Sui Generis Database\n     Rights, then the database in which You have Sui Generis Database\n     Rights (but not its individual contents) is Adapted Material; and\n\n  c. You must comply with the conditions in Section 3(a) if You Share\n     all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not\nreplace Your obligations under this Public License where the Licensed\nRights include other Copyright and Similar Rights.\n\nSection 5 -- Disclaimer of Warranties and Limitation of Liability.\n\n  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE\n     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS\n     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF\n     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,\n     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,\n     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR\n     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,\n     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT\n     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT\n     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\n\n  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE\n     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,\n     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,\n     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,\n     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR\n     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN\n     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR\n     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR\n     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\n\n  c. The disclaimer of warranties and limitation of liability provided\n     above shall be interpreted in a manner that, to the extent\n     possible, most closely approximates an absolute disclaimer and\n     waiver of all liability.\n\nSection 6 -- Term and Termination.\n\n  a. This Public License applies for the term of the Copyright and\n     Similar Rights licensed here. However, if You fail to comply with\n     this Public License, then Your rights under this Public License\n     terminate automatically.\n\n  b. Where Your right to use the Licensed Material has terminated under\n     Section 6(a), it reinstates:\n\n       1. automatically as of the date the violation is cured, provided\n          it is cured within 30 days of Your discovery of the\n          violation; or\n\n       2. upon express reinstatement by the Licensor.\n\n     For the avoidance of doubt, this Section 6(b) does not affect any\n     right the Licensor may have to seek remedies for Your violations\n     of this Public License.\n\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n     License.\n\nSection 7 -- Other Terms and Conditions.\n\n  a. The Licensor shall not be bound by any additional or different\n     terms or conditions communicated by You unless expressly agreed.\n\n  b. Any arrangements, understandings, or agreements regarding the\n     Licensed Material not stated herein are separate from and\n     independent of the terms and conditions of this Public License.\n\nSection 8 -- Interpretation.\n\n  a. For the avoidance of doubt, this Public License does not, and\n     shall not be interpreted to, reduce, limit, restrict, or impose\n     conditions on any use of the Licensed Material that could lawfully\n     be made without permission under this Public License.\n\n  b. To the extent possible, if any provision of this Public License is\n     deemed unenforceable, it shall be automatically reformed to the\n     minimum extent necessary to make it enforceable. If the provision\n     cannot be reformed, it shall be severed from this Public License\n     without affecting the enforceability of the remaining terms and\n     conditions.\n\n  c. No term or condition of this Public License will be waived and no\n     failure to comply consented to unless expressly agreed to by the\n     Licensor.\n\n  d. Nothing in this Public License constitutes or may be interpreted\n     as a limitation upon, or waiver of, any privileges and immunities\n     that apply to the Licensor or You, including from the legal\n     processes of any jurisdiction or authority.\n\n=======================================================================\n\nCreative Commons is not a party to its public\nlicenses. Notwithstanding, Creative Commons may elect to apply one of\nits public licenses to material it publishes and in those instances\nwill be considered the “Licensor.” The text of the Creative Commons\npublic licenses is dedicated to the public domain under the CC0 Public\nDomain Dedication. Except for the limited purpose of indicating that\nmaterial is shared under a Creative Commons public license or as\notherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\nto any of its public licenses or any other arrangements,\nunderstandings, or agreements concerning use of licensed material. For\nthe avoidance of doubt, this paragraph does not form part of the\npublic licenses.\n\nCreative Commons may be contacted at creativecommons.org.\n"
        },
        {
          "name": "MultiSpecific.ipynb",
          "type": "blob",
          "size": 29.0693359375,
          "content": "{\"nbformat\":4,\"nbformat_minor\":0,\"metadata\":{\"colab\":{\"name\":\"MultiSpecific.ipynb\",\"provenance\":[],\"collapsed_sections\":[],\"authorship_tag\":\"ABX9TyNw8SfPWhG77cf/e7YZd178\"},\"kernelspec\":{\"name\":\"python3\",\"display_name\":\"Python 3\"},\"language_info\":{\"name\":\"python\"},\"accelerator\":\"GPU\"},\"cells\":[{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"7_gtFoV8BuRx\"},\"source\":[\"This is an example of SimSwap on processing video with multiple faces with designated sources.\\n\",\"\\n\",\"Code path: https://github.com/neuralchen/SimSwap\\n\",\"Paper path: https://arxiv.org/pdf/2106.06340v1.pdf.\"]},{\"cell_type\":\"code\",\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"0Y1RfpzsCAl9\",\"executionInfo\":{\"status\":\"ok\",\"timestamp\":1625380781426,\"user_tz\":-480,\"elapsed\":586,\"user\":{\"displayName\":\"José Lampreia\",\"photoUrl\":\"\",\"userId\":\"16015278604201270582\"}},\"outputId\":\"2a897b34-72f1-4515-ac6f-2f0e2d4ea4f7\"},\"source\":[\"## make sure you are using a runtime with GPU\\n\",\"## you can check at Runtime/Change runtime type in the top bar.\\n\",\"!nvidia-smi\"],\"execution_count\":1,\"outputs\":[{\"output_type\":\"stream\",\"text\":[\"Sun Jul  4 06:39:39 2021       \\n\",\"+-----------------------------------------------------------------------------+\\n\",\"| NVIDIA-SMI 465.27       Driver Version: 460.32.03    CUDA Version: 11.2     |\\n\",\"|-------------------------------+----------------------+----------------------+\\n\",\"| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\\n\",\"| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\\n\",\"|                               |                      |               MIG M. |\\n\",\"|===============================+======================+======================|\\n\",\"|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\\n\",\"| N/A   45C    P8     9W /  70W |      0MiB / 15109MiB |      0%      Default |\\n\",\"|                               |                      |                  N/A |\\n\",\"+-------------------------------+----------------------+----------------------+\\n\",\"                                                                               \\n\",\"+-----------------------------------------------------------------------------+\\n\",\"| Processes:                                                                  |\\n\",\"|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\\n\",\"|        ID   ID                                                   Usage      |\\n\",\"|=============================================================================|\\n\",\"|  No running processes found                                                 |\\n\",\"+-----------------------------------------------------------------------------+\\n\"],\"name\":\"stdout\"}]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"0Qzzx2UpDkqw\"},\"source\":[\"All file changes make by this notebook are temporary. \\n\",\"You can try to mount your own google drive to store files if you wang.\\n\"]},{\"cell_type\":\"code\",\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"VA_4CeWZCHLP\",\"executionInfo\":{\"status\":\"ok\",\"timestamp\":1625380786661,\"user_tz\":-480,\"elapsed\":4693,\"user\":{\"displayName\":\"José Lampreia\",\"photoUrl\":\"\",\"userId\":\"16015278604201270582\"}},\"outputId\":\"d0665552-be92-45b0-aab2-f84c619a51fb\"},\"source\":[\"!git clone https://github.com/neuralchen/SimSwap\\n\",\"!cd SimSwap && git pull\"],\"execution_count\":2,\"outputs\":[{\"output_type\":\"stream\",\"text\":[\"Cloning into 'SimSwap'...\\n\",\"remote: Enumerating objects: 667, done.\\u001b[K\\n\",\"remote: Counting objects: 100% (48/48), done.\\u001b[K\\n\",\"remote: Compressing objects: 100% (35/35), done.\\u001b[K\\n\",\"remote: Total 667 (delta 19), reused 28 (delta 13), pack-reused 619\\u001b[K\\n\",\"Receiving objects: 100% (667/667), 132.14 MiB | 44.44 MiB/s, done.\\n\",\"Resolving deltas: 100% (292/292), done.\\n\",\"Already up to date.\\n\"],\"name\":\"stdout\"}]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"Y5K4au_UCkKn\",\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"executionInfo\":{\"status\":\"ok\",\"timestamp\":1625380797906,\"user_tz\":-480,\"elapsed\":11253,\"user\":{\"displayName\":\"José Lampreia\",\"photoUrl\":\"\",\"userId\":\"16015278604201270582\"}},\"outputId\":\"7429f153-bc6d-48c2-eb3c-21f1f02fede9\"},\"source\":[\"!pip install insightface==0.2.1 onnxruntime moviepy\\n\",\"!pip install googledrivedownloader\\n\",\"!pip install imageio==2.4.1\"],\"execution_count\":3,\"outputs\":[{\"output_type\":\"stream\",\"text\":[\"Collecting insightface==0.2.1\\n\",\"  Downloading https://files.pythonhosted.org/packages/ee/1e/6395bbe0db665f187c8e49266cda54fcf661f182192370d409423e4943e4/insightface-0.2.1-py2.py3-none-any.whl\\n\",\"Collecting onnxruntime\\n\",\"\\u001b[?25l  Downloading https://files.pythonhosted.org/packages/f9/76/3d0f8bb2776961c7335693df06eccf8d099e48fa6fb552c7546867192603/onnxruntime-1.8.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.5MB)\\n\",\"\\u001b[K     |████████████████████████████████| 4.5MB 37.5MB/s \\n\",\"\\u001b[?25hRequirement already satisfied: moviepy in /usr/local/lib/python3.7/dist-packages (0.2.3.5)\\n\",\"Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (0.22.2.post1)\\n\",\"Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (2.23.0)\\n\",\"Collecting onnx\\n\",\"\\u001b[?25l  Downloading https://files.pythonhosted.org/packages/3f/9b/54c950d3256e27f970a83cd0504efb183a24312702deed0179453316dbd0/onnx-1.9.0-cp37-cp37m-manylinux2010_x86_64.whl (12.2MB)\\n\",\"\\u001b[K     |████████████████████████████████| 12.2MB 32.2MB/s \\n\",\"\\u001b[?25hRequirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (3.2.2)\\n\",\"Requirement already satisfied: Pillow in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (7.1.2)\\n\",\"Requirement already satisfied: scikit-image in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (0.16.2)\\n\",\"Requirement already satisfied: opencv-python in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (4.1.2.30)\\n\",\"Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (4.41.1)\\n\",\"Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (1.4.1)\\n\",\"Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (1.19.5)\\n\",\"Requirement already satisfied: easydict in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (1.9)\\n\",\"Requirement already satisfied: flatbuffers in /usr/local/lib/python3.7/dist-packages (from onnxruntime) (1.12)\\n\",\"Requirement already satisfied: protobuf in /usr/local/lib/python3.7/dist-packages (from onnxruntime) (3.12.4)\\n\",\"Requirement already satisfied: imageio<3.0,>=2.1.2 in /usr/local/lib/python3.7/dist-packages (from moviepy) (2.4.1)\\n\",\"Requirement already satisfied: decorator<5.0,>=4.0.2 in /usr/local/lib/python3.7/dist-packages (from moviepy) (4.4.2)\\n\",\"Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->insightface==0.2.1) (1.0.1)\\n\",\"Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->insightface==0.2.1) (3.0.4)\\n\",\"Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->insightface==0.2.1) (1.24.3)\\n\",\"Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->insightface==0.2.1) (2021.5.30)\\n\",\"Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->insightface==0.2.1) (2.10)\\n\",\"Requirement already satisfied: typing-extensions>=3.6.2.1 in /usr/local/lib/python3.7/dist-packages (from onnx->insightface==0.2.1) (3.7.4.3)\\n\",\"Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from onnx->insightface==0.2.1) (1.15.0)\\n\",\"Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->insightface==0.2.1) (2.8.1)\\n\",\"Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->insightface==0.2.1) (0.10.0)\\n\",\"Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->insightface==0.2.1) (2.4.7)\\n\",\"Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->insightface==0.2.1) (1.3.1)\\n\",\"Requirement already satisfied: networkx>=2.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image->insightface==0.2.1) (2.5.1)\\n\",\"Requirement already satisfied: PyWavelets>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image->insightface==0.2.1) (1.1.1)\\n\",\"Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from protobuf->onnxruntime) (57.0.0)\\n\",\"Installing collected packages: onnx, insightface, onnxruntime\\n\",\"Successfully installed insightface-0.2.1 onnx-1.9.0 onnxruntime-1.8.0\\n\",\"Requirement already satisfied: googledrivedownloader in /usr/local/lib/python3.7/dist-packages (0.4)\\n\",\"Requirement already satisfied: imageio==2.4.1 in /usr/local/lib/python3.7/dist-packages (2.4.1)\\n\",\"Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from imageio==2.4.1) (1.19.5)\\n\",\"Requirement already satisfied: pillow in /usr/local/lib/python3.7/dist-packages (from imageio==2.4.1) (7.1.2)\\n\"],\"name\":\"stdout\"}]},{\"cell_type\":\"code\",\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"gQ7ZoIbLFCye\",\"executionInfo\":{\"status\":\"ok\",\"timestamp\":1625380798405,\"user_tz\":-480,\"elapsed\":533,\"user\":{\"displayName\":\"José Lampreia\",\"photoUrl\":\"\",\"userId\":\"16015278604201270582\"}},\"outputId\":\"8448a0a3-a19e-44c2-a044-f4d3f9152e91\"},\"source\":[\"import os\\n\",\"os.chdir(\\\"SimSwap\\\")\\n\",\"!ls\"],\"execution_count\":4,\"outputs\":[{\"output_type\":\"stream\",\"text\":[\" crop_224\\t        simswaplogo\\n\",\" data\\t\\t        test_one_image.py\\n\",\" demo_file\\t        test_video_swapmulti.py\\n\",\" docs\\t\\t        test_video_swap_multispecific.py\\n\",\" insightface_func       test_video_swapsingle.py\\n\",\" LICENSE\\t        test_video_swapspecific.py\\n\",\" models\\t\\t        test_wholeimage_swapmulti.py\\n\",\" options\\t        test_wholeimage_swap_multispecific.py\\n\",\" output\\t\\t        test_wholeimage_swapsingle.py\\n\",\" README.md\\t        test_wholeimage_swapspecific.py\\n\",\"'SimSwap colab.ipynb'   util\\n\"],\"name\":\"stdout\"}]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"ZvGp-p0nOmKE\",\"executionInfo\":{\"status\":\"ok\",\"timestamp\":1625380798407,\"user_tz\":-480,\"elapsed\":17,\"user\":{\"displayName\":\"José Lampreia\",\"photoUrl\":\"\",\"userId\":\"16015278604201270582\"}}},\"source\":[\"## You can upload filed manually\\n\",\"# from google.colab import drive\\n\",\"# drive.mount('/content/gdrive')\"],\"execution_count\":5,\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"gLti1J0pEFjJ\",\"executionInfo\":{\"status\":\"ok\",\"timestamp\":1625380813268,\"user_tz\":-480,\"elapsed\":14876,\"user\":{\"displayName\":\"José Lampreia\",\"photoUrl\":\"\",\"userId\":\"16015278604201270582\"}},\"outputId\":\"99dc9306-9b9a-475d-cc7d-a3f423bd1e81\"},\"source\":[\"from google_drive_downloader import GoogleDriveDownloader\\n\",\"\\n\",\"### it seems that google drive link may not be permenant, you can find this ID from our open url.\\n\",\"# GoogleDriveDownloader.download_file_from_google_drive(file_id='1TLNdIufzwesDbyr_nVTR7Zrx9oRHLM_N',\\n\",\"#                                     dest_path='./arcface_model/arcface_checkpoint.tar')\\n\",\"# GoogleDriveDownloader.download_file_from_google_drive(file_id='1PXkRiBUYbu1xWpQyDEJvGKeqqUFthJcI',\\n\",\"#                                     dest_path='./checkpoints.zip')\\n\",\"\\n\",\"!wget -P ./arcface_model https://github.com/neuralchen/SimSwap/releases/download/1.0/arcface_checkpoint.tar\\n\",\"!wget https://github.com/neuralchen/SimSwap/releases/download/1.0/checkpoints.zip\\n\",\"!unzip ./checkpoints.zip  -d ./checkpoints\\n\",\"!wget -P ./parsing_model/checkpoint https://github.com/neuralchen/SimSwap/releases/download/1.0/79999_iter.pth\"],\"execution_count\":6,\"outputs\":[{\"output_type\":\"stream\",\"text\":[\"--2021-07-04 06:39:56--  https://github.com/neuralchen/SimSwap/releases/download/1.0/arcface_checkpoint.tar\\n\",\"Resolving github.com (github.com)... 140.82.114.3\\n\",\"Connecting to github.com (github.com)|140.82.114.3|:443... connected.\\n\",\"HTTP request sent, awaiting response... 302 Found\\n\",\"Location: https://github-releases.githubusercontent.com/374891081/e17b9d00-dcb8-11eb-8c4f-1412bcea78a6?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210704%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210704T063956Z&X-Amz-Expires=300&X-Amz-Signature=b6d431c65405e894ddc994061c5fe8fe87db4e71e702513aec01f398a1004825&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=374891081&response-content-disposition=attachment%3B%20filename%3Darcface_checkpoint.tar&response-content-type=application%2Foctet-stream [following]\\n\",\"--2021-07-04 06:39:56--  https://github-releases.githubusercontent.com/374891081/e17b9d00-dcb8-11eb-8c4f-1412bcea78a6?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210704%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210704T063956Z&X-Amz-Expires=300&X-Amz-Signature=b6d431c65405e894ddc994061c5fe8fe87db4e71e702513aec01f398a1004825&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=374891081&response-content-disposition=attachment%3B%20filename%3Darcface_checkpoint.tar&response-content-type=application%2Foctet-stream\\n\",\"Resolving github-releases.githubusercontent.com (github-releases.githubusercontent.com)... 185.199.108.154, 185.199.109.154, 185.199.110.154, ...\\n\",\"Connecting to github-releases.githubusercontent.com (github-releases.githubusercontent.com)|185.199.108.154|:443... connected.\\n\",\"HTTP request sent, awaiting response... 200 OK\\n\",\"Length: 766871429 (731M) [application/octet-stream]\\n\",\"Saving to: ‘./arcface_model/arcface_checkpoint.tar’\\n\",\"\\n\",\"arcface_checkpoint. 100%[===================>] 731.34M  64.4MB/s    in 11s     \\n\",\"\\n\",\"2021-07-04 06:40:07 (68.4 MB/s) - ‘./arcface_model/arcface_checkpoint.tar’ saved [766871429/766871429]\\n\",\"\\n\",\"--2021-07-04 06:40:07--  https://github.com/neuralchen/SimSwap/releases/download/1.0/checkpoints.zip\\n\",\"Resolving github.com (github.com)... 140.82.113.3\\n\",\"Connecting to github.com (github.com)|140.82.113.3|:443... connected.\\n\",\"HTTP request sent, awaiting response... 302 Found\\n\",\"Location: https://github-releases.githubusercontent.com/374891081/a8dac400-dcb6-11eb-933f-977cd7f5f554?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210704%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210704T063831Z&X-Amz-Expires=300&X-Amz-Signature=3fd2850d03abb9301bf5ba5969d82eb73cb0b940b85e45de2e1e34f1ba2eaf09&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=374891081&response-content-disposition=attachment%3B%20filename%3Dcheckpoints.zip&response-content-type=application%2Foctet-stream [following]\\n\",\"--2021-07-04 06:40:07--  https://github-releases.githubusercontent.com/374891081/a8dac400-dcb6-11eb-933f-977cd7f5f554?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210704%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210704T063831Z&X-Amz-Expires=300&X-Amz-Signature=3fd2850d03abb9301bf5ba5969d82eb73cb0b940b85e45de2e1e34f1ba2eaf09&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=374891081&response-content-disposition=attachment%3B%20filename%3Dcheckpoints.zip&response-content-type=application%2Foctet-stream\\n\",\"Resolving github-releases.githubusercontent.com (github-releases.githubusercontent.com)... 185.199.108.154, 185.199.109.154, 185.199.110.154, ...\\n\",\"Connecting to github-releases.githubusercontent.com (github-releases.githubusercontent.com)|185.199.108.154|:443... connected.\\n\",\"HTTP request sent, awaiting response... 200 OK\\n\",\"Length: 256461775 (245M) [application/octet-stream]\\n\",\"Saving to: ‘checkpoints.zip’\\n\",\"\\n\",\"checkpoints.zip     100%[===================>] 244.58M   219MB/s    in 1.1s    \\n\",\"\\n\",\"2021-07-04 06:40:08 (219 MB/s) - ‘checkpoints.zip’ saved [256461775/256461775]\\n\",\"\\n\",\"Archive:  ./checkpoints.zip\\n\",\"   creating: ./checkpoints/people/\\n\",\"  inflating: ./checkpoints/people/iter.txt  \\n\",\"  inflating: ./checkpoints/people/latest_net_D1.pth  \\n\",\"  inflating: ./checkpoints/people/latest_net_D2.pth  \\n\",\"  inflating: ./checkpoints/people/latest_net_G.pth  \\n\",\"  inflating: ./checkpoints/people/loss_log.txt  \\n\",\"  inflating: ./checkpoints/people/opt.txt  \\n\",\"   creating: ./checkpoints/people/web/\\n\",\"   creating: ./checkpoints/people/web/images/\\n\"],\"name\":\"stdout\"}]},{\"cell_type\":\"code\",\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"fJ9DYRrCPIUL\",\"executionInfo\":{\"status\":\"ok\",\"timestamp\":1625380821122,\"user_tz\":-480,\"elapsed\":7869,\"user\":{\"displayName\":\"José Lampreia\",\"photoUrl\":\"\",\"userId\":\"16015278604201270582\"}},\"outputId\":\"a3d1d841-440c-4244-8045-cb0ce3cc81fd\"},\"source\":[\"!wget --no-check-certificate \\\"https://sh23tw.dm.files.1drv.com/y4mmGiIkNVigkSwOKDcV3nwMJulRGhbtHdkheehR5TArc52UjudUYNXAEvKCii2O5LAmzGCGK6IfleocxuDeoKxDZkNzDRSt4ZUlEt8GlSOpCXAFEkBwaZimtWGDRbpIGpb_pz9Nq5jATBQpezBS6G_UtspWTkgrXHHxhviV2nWy8APPx134zOZrUIbkSF6xnsqzs3uZ_SEX_m9Rey0ykpx9w\\\" -O antelope.zip\\n\",\"!unzip ./antelope.zip -d ./insightface_func/models/\"],\"execution_count\":7,\"outputs\":[{\"output_type\":\"stream\",\"text\":[\"--2021-07-04 06:40:11--  https://sh23tw.dm.files.1drv.com/y4mmGiIkNVigkSwOKDcV3nwMJulRGhbtHdkheehR5TArc52UjudUYNXAEvKCii2O5LAmzGCGK6IfleocxuDeoKxDZkNzDRSt4ZUlEt8GlSOpCXAFEkBwaZimtWGDRbpIGpb_pz9Nq5jATBQpezBS6G_UtspWTkgrXHHxhviV2nWy8APPx134zOZrUIbkSF6xnsqzs3uZ_SEX_m9Rey0ykpx9w\\n\",\"Resolving sh23tw.dm.files.1drv.com (sh23tw.dm.files.1drv.com)... 13.107.42.12\\n\",\"Connecting to sh23tw.dm.files.1drv.com (sh23tw.dm.files.1drv.com)|13.107.42.12|:443... connected.\\n\",\"HTTP request sent, awaiting response... 200 OK\\n\",\"Length: 248024513 (237M) [application/zip]\\n\",\"Saving to: ‘antelope.zip’\\n\",\"\\n\",\"antelope.zip        100%[===================>] 236.53M  52.4MB/s    in 4.7s    \\n\",\"\\n\",\"2021-07-04 06:40:16 (49.9 MB/s) - ‘antelope.zip’ saved [248024513/248024513]\\n\",\"\\n\",\"Archive:  ./antelope.zip\\n\",\"   creating: ./insightface_func/models/antelope/\\n\",\"  inflating: ./insightface_func/models/antelope/glintr100.onnx  \\n\",\"  inflating: ./insightface_func/models/antelope/scrfd_10g_bnkps.onnx  \\n\"],\"name\":\"stdout\"}]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"PfSsND36EMvn\",\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"executionInfo\":{\"status\":\"ok\",\"timestamp\":1625380827902,\"user_tz\":-480,\"elapsed\":6811,\"user\":{\"displayName\":\"José Lampreia\",\"photoUrl\":\"\",\"userId\":\"16015278604201270582\"}},\"outputId\":\"8130e97d-b4a0-4988-85fb-e2bc3e755259\"},\"source\":[\"import cv2\\n\",\"import torch\\n\",\"import fractions\\n\",\"import numpy as np\\n\",\"from PIL import Image\\n\",\"import torch.nn.functional as F\\n\",\"from torchvision import transforms\\n\",\"from models.models import create_model\\n\",\"from options.test_options import TestOptions\\n\",\"from insightface_func.face_detect_crop_multi import Face_detect_crop\\n\",\"from util.videoswap_multispecific import video_swap\\n\",\"import os\\n\",\"import glob\"],\"execution_count\":8,\"outputs\":[{\"output_type\":\"stream\",\"text\":[\"Imageio: 'ffmpeg-linux64-v3.3.1' was not found on your computer; downloading it now.\\n\",\"Try 1. Download from https://github.com/imageio/imageio-binaries/raw/master/ffmpeg/ffmpeg-linux64-v3.3.1 (43.8 MB)\\n\",\"Downloading: 8192/45929032 bytes (0.0%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b3432448/45929032 bytes (7.5%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b7036928/45929032 bytes (15.3%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b10641408/45929032 bytes (23.2%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b14278656/45929032 bytes (31.1%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b18104320/45929032 bytes (39.4%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b21954560/45929032 bytes (47.8%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b25780224/45929032 bytes (56.1%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b29736960/45929032 bytes (64.7%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b33488896/45929032 bytes (72.9%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b37093376/45929032 bytes (80.8%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b40689664/45929032 bytes (88.6%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b44392448/45929032 bytes (96.7%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b45929032/45929032 bytes (100.0%)\\n\",\"  Done\\n\",\"File saved as /root/.imageio/ffmpeg/ffmpeg-linux64-v3.3.1.\\n\"],\"name\":\"stdout\"}]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"rxSbZ2EDNDlf\",\"executionInfo\":{\"status\":\"ok\",\"timestamp\":1625380827903,\"user_tz\":-480,\"elapsed\":12,\"user\":{\"displayName\":\"José Lampreia\",\"photoUrl\":\"\",\"userId\":\"16015278604201270582\"}}},\"source\":[\"def lcm(a, b): return abs(a * b) / fractions.gcd(a, b) if a and b else 0\\n\",\"\\n\",\"transformer = transforms.Compose([\\n\",\"        transforms.ToTensor(),\\n\",\"        #transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\\n\",\"    ])\\n\",\"\\n\",\"transformer_Arcface = transforms.Compose([\\n\",\"        transforms.ToTensor(),\\n\",\"        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\\n\",\"    ])\\n\"],\"execution_count\":9,\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"ye8iS0UVPMRg\",\"executionInfo\":{\"status\":\"ok\",\"timestamp\":1625380828574,\"user_tz\":-480,\"elapsed\":680,\"user\":{\"displayName\":\"José Lampreia\",\"photoUrl\":\"\",\"userId\":\"16015278604201270582\"}},\"outputId\":\"cb5a4b02-b1d0-4ff8-f542-5c1b3c9703d9\"},\"source\":[\"!ls ./checkpoints\"],\"execution_count\":10,\"outputs\":[{\"output_type\":\"stream\",\"text\":[\"people\\n\"],\"name\":\"stdout\"}]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"wwJOwR9LNKRz\",\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"executionInfo\":{\"status\":\"ok\",\"timestamp\":1625380828576,\"user_tz\":-480,\"elapsed\":13,\"user\":{\"displayName\":\"José Lampreia\",\"photoUrl\":\"\",\"userId\":\"16015278604201270582\"}},\"outputId\":\"0f92f785-4d9c-4130-b24d-76871b2dafba\"},\"source\":[\"opt = TestOptions()\\n\",\"opt.initialize()\\n\",\"opt.parser.add_argument('-f') ## dummy arg to avoid bug\\n\",\"opt = opt.parse()\\n\",\"opt.multisepcific_dir = './demo_file/multispecific' ## or replace it with folder from your own google drive\\n\",\"                           ## and remember to follow the dir structure in usage.md\\n\",\"opt.video_path = './demo_file/multi_people_1080p.mp4' ## or replace it with video from your own google drive\\n\",\"opt.output_path = './output/multi_test_multispecific.mp4'\\n\",\"opt.temp_path = './tmp'\\n\",\"opt.Arc_path = './arcface_model/arcface_checkpoint.tar'\\n\",\"opt.name = 'people'\\n\",\"opt.isTrain = False\\n\",\"opt.use_mask = True  ## new feature up-to-date\\n\",\"\\n\",\"crop_size = opt.crop_size\\n\"],\"execution_count\":11,\"outputs\":[{\"output_type\":\"stream\",\"text\":[\"------------ Options -------------\\n\",\"Arc_path: models/BEST_checkpoint.tar\\n\",\"aspect_ratio: 1.0\\n\",\"batchSize: 8\\n\",\"checkpoints_dir: ./checkpoints\\n\",\"cluster_path: features_clustered_010.npy\\n\",\"data_type: 32\\n\",\"dataroot: ./datasets/cityscapes/\\n\",\"display_winsize: 512\\n\",\"engine: None\\n\",\"export_onnx: None\\n\",\"f: /root/.local/share/jupyter/runtime/kernel-19937219-895d-4d02-9a72-5cfa0e889adf.json\\n\",\"feat_num: 3\\n\",\"fineSize: 512\\n\",\"fp16: False\\n\",\"gpu_ids: [0]\\n\",\"how_many: 50\\n\",\"id_thres: 0.03\\n\",\"image_size: 224\\n\",\"input_nc: 3\\n\",\"instance_feat: False\\n\",\"isTrain: False\\n\",\"label_feat: False\\n\",\"label_nc: 0\\n\",\"latent_size: 512\\n\",\"loadSize: 1024\\n\",\"load_features: False\\n\",\"local_rank: 0\\n\",\"max_dataset_size: inf\\n\",\"model: pix2pixHD\\n\",\"multisepcific_dir: ./demo_file/multispecific\\n\",\"nThreads: 2\\n\",\"n_blocks_global: 6\\n\",\"n_blocks_local: 3\\n\",\"n_clusters: 10\\n\",\"n_downsample_E: 4\\n\",\"n_downsample_global: 3\\n\",\"n_local_enhancers: 1\\n\",\"name: people\\n\",\"nef: 16\\n\",\"netG: global\\n\",\"ngf: 64\\n\",\"niter_fix_global: 0\\n\",\"no_flip: False\\n\",\"no_instance: False\\n\",\"no_simswaplogo: False\\n\",\"norm: batch\\n\",\"norm_G: spectralspadesyncbatch3x3\\n\",\"ntest: inf\\n\",\"onnx: None\\n\",\"output_nc: 3\\n\",\"output_path: ./output/\\n\",\"phase: test\\n\",\"pic_a_path: ./crop_224/gdg.jpg\\n\",\"pic_b_path: ./crop_224/zrf.jpg\\n\",\"pic_specific_path: ./crop_224/zrf.jpg\\n\",\"resize_or_crop: scale_width\\n\",\"results_dir: ./results/\\n\",\"semantic_nc: 3\\n\",\"serial_batches: False\\n\",\"temp_path: ./temp_results\\n\",\"tf_log: False\\n\",\"use_dropout: False\\n\",\"use_encoded_image: False\\n\",\"verbose: False\\n\",\"video_path: ./demo_file/multi_people_1080p.mp4\\n\",\"which_epoch: latest\\n\",\"-------------- End ----------------\\n\"],\"name\":\"stdout\"}]},{\"cell_type\":\"code\",\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"UFt8zQrAMq9F\",\"executionInfo\":{\"status\":\"ok\",\"timestamp\":1625381428564,\"user_tz\":-480,\"elapsed\":599996,\"user\":{\"displayName\":\"José Lampreia\",\"photoUrl\":\"\",\"userId\":\"16015278604201270582\"}},\"outputId\":\"46188013-3f6d-4174-9959-d1fd203dcc0d\"},\"source\":[\"pic_specific = opt.pic_specific_path\\n\",\"crop_size = opt.crop_size\\n\",\"multisepcific_dir = opt.multisepcific_dir\\n\",\"\\n\",\"torch.nn.Module.dump_patches = True\\n\",\"model = create_model(opt)\\n\",\"model.eval()\\n\",\"\\n\",\"app = Face_detect_crop(name='antelope', root='./insightface_func/models')\\n\",\"app.prepare(ctx_id= 0, det_thresh=0.6, det_size=(640,640))\\n\",\"# The specific person to be swapped(source)\\n\",\"source_specific_id_nonorm_list = []\\n\",\"source_path = os.path.join(multisepcific_dir,'SRC_*')\\n\",\"source_specific_images_path = sorted(glob.glob(source_path))\\n\",\"\\n\",\"with torch.no_grad():\\n\",\"    for source_specific_image_path in source_specific_images_path:\\n\",\"        specific_person_whole = cv2.imread(source_specific_image_path)\\n\",\"        specific_person_align_crop, _ = app.get(specific_person_whole,crop_size)\\n\",\"        specific_person_align_crop_pil = Image.fromarray(cv2.cvtColor(specific_person_align_crop[0],cv2.COLOR_BGR2RGB)) \\n\",\"        specific_person = transformer_Arcface(specific_person_align_crop_pil)\\n\",\"        specific_person = specific_person.view(-1, specific_person.shape[0], specific_person.shape[1], specific_person.shape    [2])\\n\",\"        # convert numpy to tensor\\n\",\"        specific_person = specific_person.cuda()\\n\",\"        #create latent id\\n\",\"        specific_person_downsample = F.interpolate(specific_person, size=(112,112))\\n\",\"        specific_person_id_nonorm = model.netArc(specific_person_downsample)\\n\",\"        source_specific_id_nonorm_list.append(specific_person_id_nonorm.clone())\\n\",\"\\n\",\"    # The person who provides id information (list)\\n\",\"    target_id_norm_list = []\\n\",\"    target_path = os.path.join(multisepcific_dir,'DST_*')\\n\",\"    target_images_path = sorted(glob.glob(target_path))\\n\",\"\\n\",\"    for target_image_path in target_images_path:\\n\",\"        img_a_whole = cv2.imread(target_image_path)\\n\",\"        img_a_align_crop, _ = app.get(img_a_whole,crop_size)\\n\",\"        img_a_align_crop_pil = Image.fromarray(cv2.cvtColor(img_a_align_crop[0],cv2.COLOR_BGR2RGB)) \\n\",\"        img_a = transformer_Arcface(img_a_align_crop_pil)\\n\",\"        img_id = img_a.view(-1, img_a.shape[0], img_a.shape[1], img_a.shape[2])\\n\",\"        # convert numpy to tensor\\n\",\"        img_id = img_id.cuda()\\n\",\"        #create latent id\\n\",\"        img_id_downsample = F.interpolate(img_id, size=(112,112))\\n\",\"        latend_id = model.netArc(img_id_downsample)\\n\",\"        latend_id = F.normalize(latend_id, p=2, dim=1)\\n\",\"        target_id_norm_list.append(latend_id.clone())\\n\",\"        \\n\",\"    assert len(target_id_norm_list) == len(source_specific_id_nonorm_list), \\\"The number of images in source and target  directory must be same !!!\\\"\\n\",\"    video_swap(opt.video_path, target_id_norm_list,source_specific_id_nonorm_list, opt.id_thres, \\\\\\n\",\"        model, app, opt.output_path,temp_results_dir=opt.temp_path,no_simswaplogo=opt.no_simswaplogo,use_mask=opt.use_mask)\"],\"execution_count\":12,\"outputs\":[{\"output_type\":\"stream\",\"text\":[\"input mean and std: 127.5 127.5\\n\",\"find model: ./insightface_func/models/antelope/glintr100.onnx recognition\\n\",\"find model: ./insightface_func/models/antelope/scrfd_10g_bnkps.onnx detection\\n\",\"set det-size: (640, 640)\\n\"],\"name\":\"stdout\"},{\"output_type\":\"stream\",\"text\":[\"\\r  0%|          | 0/594 [00:00<?, ?it/s]\"],\"name\":\"stderr\"},{\"output_type\":\"stream\",\"text\":[\"(142, 366, 4)\\n\"],\"name\":\"stdout\"},{\"output_type\":\"stream\",\"text\":[\"100%|██████████| 594/594 [08:28<00:00,  1.17it/s]\\n\"],\"name\":\"stderr\"},{\"output_type\":\"stream\",\"text\":[\"[MoviePy] >>>> Building video ./output/multi_test_multispecific.mp4\\n\",\"[MoviePy] Writing audio in multi_test_multispecificTEMP_MPY_wvf_snd.mp3\\n\"],\"name\":\"stdout\"},{\"output_type\":\"stream\",\"text\":[\"100%|██████████| 438/438 [00:00<00:00, 832.16it/s]\"],\"name\":\"stderr\"},{\"output_type\":\"stream\",\"text\":[\"[MoviePy] Done.\\n\",\"[MoviePy] Writing video ./output/multi_test_multispecific.mp4\\n\"],\"name\":\"stdout\"},{\"output_type\":\"stream\",\"text\":[\"\\n\",\"100%|██████████| 595/595 [00:53<00:00, 11.11it/s]\\n\"],\"name\":\"stderr\"},{\"output_type\":\"stream\",\"text\":[\"[MoviePy] Done.\\n\",\"[MoviePy] >>>> Video ready: ./output/multi_test_multispecific.mp4 \\n\",\"\\n\"],\"name\":\"stdout\"}]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"Rty2GsyZZrI6\"},\"source\":[],\"execution_count\":null,\"outputs\":[]}]}"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.900390625,
          "content": "# SimSwap: An Efficient Framework For High Fidelity Face Swapping\n## Proceedings of the 28th ACM International Conference on Multimedia\n**The official repository with Pytorch**\n\n**Our method can realize **arbitrary face swapping** on images and videos with **one single trained model**.**\n\n***We are recruiting full-time engineers. If you are interested, please send an [email](mailto:chen19910528@sjtu.edu.cn?subject=[GitHub]%20Source%20Han%20Sans) to my team. Please refer to the website for specific recruitment conditions: [Requirements](https://join.sjtu.edu.cn/Admin/QsPreview.aspx?qsid=44f5413a90974114b8f5e643177ef32d)***\n\nTraining and test code are now available!\n[ <a href=\"https://colab.research.google.com/github/neuralchen/SimSwap/blob/main/train.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"google colab logo\"></a>](https://colab.research.google.com/github/neuralchen/SimSwap/blob/main/train.ipynb)\n\nWe are working with our incoming paper SimSwap++, keeping expecting!\n\nThe high resolution version of ***SimSwap-HQ*** is supported!\n\n[![simswaplogo](/docs/img/logo1.png)](https://github.com/neuralchen/SimSwap)\n\nOur paper can be downloaded from [[Arxiv]](https://arxiv.org/pdf/2106.06340v1.pdf) [[ACM DOI]](https://dl.acm.org/doi/10.1145/3394171.3413630)\n\n\n### This project also received support from [SocialBook](https://socialbook.io).\n<!-- [![logo](./simswaplogo/socialbook_logo.2020.357eed90add7705e54a8.svg)](https://socialbook.io) -->\n<img width=30% src=\"./simswaplogo/socialbook_logo.2020.357eed90add7705e54a8.svg\"/>\n\n<!-- [[Google Drive]](https://drive.google.com/file/d/1fcfWOGt1mkBo7F0gXVKitf8GJMAXQxZD/view?usp=sharing) \n[[Baidu Drive ]](https://pan.baidu.com/s/1-TKFuycRNUKut8hn4IimvA) Password: ```ummt``` -->\n\n## Attention\n***This project is for technical and academic use only. Please do not apply it to illegal and unethical scenarios.***\n\n***In the event of violation of the legal and ethical requirements of the user's country or region, this code repository is exempt from liability***\n\n***Please do not ignore the content at the end of this README!***\n\nIf you find this project useful, please star it. It is the greatest appreciation of our work.\n\n## Top News <img width=8% src=\"./docs/img/new.gif\"/>\n\n**`2023-09-26`**: We fixed bugs in colab!\n\n**`2023-04-25`**: We fixed the \"AttributeError: 'SGD' object has no attribute 'defaults' now\" bug. If you have already downloaded **arcface_checkpoint.tar**, please **download it again**. Also, you also need to update the scripts in ```./models/```.\n\n**`2022-04-21`**: For resource limited users, we provide the cropped VGGFace2-224 dataset [[Google Driver] VGGFace2-224 (10.8G)](https://drive.google.com/file/d/19pWvdEHS-CEG6tW3PdxdtZ5QEymVjImc/view?usp=sharing) [[Baidu Driver]](https://pan.baidu.com/s/1OiwLJHVBSYB4AY2vEcfN0A) [Password: lrod].\n\n**`2022-04-20`**: Training scripts are now available. We highly recommend that you guys train the simswap model with our released high quality dataset [VGGFace2-HQ](https://github.com/NNNNAI/VGGFace2-HQ).\n\n**`2021-11-24`**: We have trained a beta version of ***SimSwap-HQ*** on [VGGFace2-HQ](https://github.com/NNNNAI/VGGFace2-HQ) and open sourced the checkpoint of this model (if you think the Simswap 512 is cool, please star our  [VGGFace2-HQ](https://github.com/NNNNAI/VGGFace2-HQ) repo). Please don’t forget to go to [Preparation](./docs/guidance/preparation.md) and [Inference for image or video face swapping](./docs/guidance/usage.md) to check the latest set up.\n\n**`2021-11-23`**: The google drive link of [VGGFace2-HQ](https://github.com/NNNNAI/VGGFace2-HQ) is released. \n\n**`2021-11-17`**: We released a high resolution face dataset [VGGFace2-HQ](https://github.com/NNNNAI/VGGFace2-HQ) and the method to generate this dataset. This dataset is for research purpose. \n\n**`2021-08-30`**: Docker has been supported, please refer [here](https://replicate.ai/neuralchen/simswap-image) for details.\n\n**`2021-08-17`**: We have updated the [Preparation](./docs/guidance/preparation.md), The main change is that the gpu version of onnx is now installed by default, Now the time to process a video is greatly reduced.\n\n**`2021-07-19`**: ***Obvious border abruptness has been resolved***. We add the ability to using mask and upgrade the old algorithm for better visual effect, please go to [Inference for image or video face swapping](./docs/guidance/usage.md) for details. Please don’t forget to go to [Preparation](./docs/guidance/preparation.md) to check the latest set up. (Thanks for the help from [@woctezuma](https://github.com/woctezuma) and [@instant-high](https://github.com/instant-high))\n\n## The first open source high resolution dataset for face swapping!!!\n## High Resolution Dataset [VGGFace2-HQ](https://github.com/NNNNAI/VGGFace2-HQ)\n\n[![logo](./docs/img/vggface2_hq_compare.png)](https://github.com/NNNNAI/VGGFace2-HQ)\n\n\n\n\n## Dependencies\n- python3.6+\n- pytorch1.5+\n- torchvision\n- opencv\n- pillow\n- numpy\n- imageio\n- moviepy\n- insightface\n- ***timm==0.5.4***\n\n## Training\n\n[Preparation](./docs/guidance/preparation.md)\n\nThe training script is slightly different from the original version, e.g., we replace the patch discriminator with the projected discriminator, which saves a lot of hardware overhead and achieves slightly better results.\n\nIn order to ensure the normal training, the batch size must be greater than 1.\n\nFriendly reminder, due to the difference in training settings, the user-trained model will have subtle differences in visual effects from the pre-trained model we provide.\n\n- Train 224 models with VGGFace2 224*224 [[Google Driver] VGGFace2-224 (10.8G)](https://drive.google.com/file/d/19pWvdEHS-CEG6tW3PdxdtZ5QEymVjImc/view?usp=sharing) [[Baidu Driver] ](https://pan.baidu.com/s/1OiwLJHVBSYB4AY2vEcfN0A) [Password: lrod]\n\nFor faster convergence and better results, a large batch size (more than 16) is recommended!\n\n***We recommend training more than 400K iterations (batch size is 16), 600K~800K will be better, more iterations will not be recommended.***\n\n\n```\npython train.py --name simswap224_test --batchSize 8  --gpu_ids 0 --dataset /path/to/VGGFace2HQ --Gdeep False\n```\n\n[Colab demo for training 224 model][ <a href=\"https://colab.research.google.com/github/neuralchen/SimSwap/blob/main/train.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"google colab logo\"></a>](https://colab.research.google.com/github/neuralchen/SimSwap/blob/main/train.ipynb)\n\nFor faster convergence and better results, a large batch size (more than 16) is recommended!\n\n- Train 512 models with VGGFace2-HQ 512*512 [VGGFace2-HQ](https://github.com/NNNNAI/VGGFace2-HQ).\n```\npython train.py --name simswap512_test  --batchSize 16  --gpu_ids 0 --dataset /path/to/VGGFace2HQ --Gdeep True\n```\n\n\n\n## Inference with a pretrained SimSwap model\n[Preparation](./docs/guidance/preparation.md)\n\n[Inference for image or video face swapping](./docs/guidance/usage.md)\n\n[Colab demo](https://colab.research.google.com/github/neuralchen/SimSwap/blob/main/SimSwap%20colab.ipynb)\n\n<div style=\"background: yellow; width:140px; font-weight:bold;font-family: sans-serif;\">Stronger feature</div>\n\n[Colab for switching specific faces in multi-face videos][ <a href=\"https://colab.research.google.com/github/neuralchen/SimSwap/blob/main/MultiSpecific.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"google colab logo\"></a>](https://colab.research.google.com/github/neuralchen/SimSwap/blob/main/MultiSpecific.ipynb)\n\n[Image face swapping demo & Docker image on Replicate](https://replicate.ai/neuralchen/simswap-image)\n\n\n\n## Video\n<img src=\"./docs/img/video.webp\"/>\n<div>\n<img width=24% src=\"./docs/img/anni.webp\"/>\n<img width=24% src=\"./docs/img/chenglong.webp\"/>\n<img width=24% src=\"./docs/img/zhoujielun.webp\"/>\n<img width=24% src=\"./docs/img/zhuyin.webp\"/>\n</div>\n<div>\n<img width=49% src=\"./docs/img/mama_mask_short.webp\"/>\n<img width=49% src=\"./docs/img/mama_mask_wuyifan_short.webp\"/>\n</div>\n\n## Results\n![Results1](/docs/img/results1.PNG)\n\n![Results2](/docs/img/total.PNG)\n\n\n<!-- ![video2](/docs/img/anni.webp)\n![video3](/docs/img/chenglong.webp)\n![video4](/docs/img/zhoujielun.webp)\n![video5](/docs/img/zhuyin.webp) -->\n\n\n**High-quality videos can be found in the link below:**\n\n[[Mama(video) 1080p]](https://drive.google.com/file/d/1mnSlwzz7f4H2O7UwApAHo64mgK4xSNyK/view?usp=sharing)\n\n[[Google Drive link for video 1]](https://drive.google.com/file/d/1hdne7Gw39d34zt3w1NYV3Ln5cT8PfCNm/view?usp=sharing)\n\n[[Google Drive link for video 2]](https://drive.google.com/file/d/1bDEg_pVeFYLnf9QLSMuG8bsjbRPk0X5_/view?usp=sharing)\n\n[[Google Drive link for video 3]](https://drive.google.com/file/d/1oftHAnLmgFis4XURcHTccGSWbWSXYKK1/view?usp=sharing)\n\n[[Baidu Drive link for video]](https://pan.baidu.com/s/1WTS6jm2TY17bYJurw57LUg ) Password: ```b26n```\n\n[[Online Video]](https://www.bilibili.com/video/BV12v411p7j5/)\n\n## User case\nIf you have some interesting results after using our project and are willing to share, you can contact us by email or share directly on the issue. Later, we may make a separate section to show these results, which should be cool.\n\nAt the same time, if you have suggestions for our project, please feel free to ask questions in the issue, or contact us directly via email: [email1](mailto:chenxuanhongzju@outlook.com), [email2](mailto:nicklau26@foxmail.com), [email3](mailto:ziangliu824@gmail.com). (All three can be contacted, just choose any one)\n\n## License\nFor academic and non-commercial use only.The whole project is under the CC-BY-NC 4.0 license. See [LICENSE](https://github.com/neuralchen/SimSwap/blob/main/LICENSE) for additional details.\n\n\n## To cite our papers\n```\n@inproceedings{DBLP:conf/mm/ChenCNG20,\n  author    = {Renwang Chen and\n               Xuanhong Chen and\n               Bingbing Ni and\n               Yanhao Ge},\n  title     = {SimSwap: An Efficient Framework For High Fidelity Face Swapping},\n  booktitle = {{MM} '20: The 28th {ACM} International Conference on Multimedia},\n  year      = {2020}\n}\n```\n```\n@Article{simswapplusplus,\n    author  = {Xuanhong Chen and\n              Bingbing Ni and\n              Yutian Liu and\n              Naiyuan Liu and\n              Zhilin Zeng and\n              Hang Wang},\n    title   = {SimSwap++: Towards Faster and High-Quality Identity Swapping},\n    journal = {{IEEE} Trans. Pattern Anal. Mach. Intell.},\n    volume  = {46},\n    number  = {1},\n    pages   = {576--592},\n    year    = {2024}\n}\n```\n\n## Related Projects\n\n**Please visit our another ACMMM2020 high-quality style transfer project**\n\n[![logo](./docs/img/logo.png)](https://github.com/neuralchen/ASMAGAN)\n\n[![title](/docs/img/title.png)](https://github.com/neuralchen/ASMAGAN)\n\n**Please visit our AAAI2021 sketch based rendering project**\n\n[![logo](./docs/img/girl2.gif)](https://github.com/TZYSJTU/Sketch-Generation-with-Drawing-Process-Guided-by-Vector-Flow-and-Grayscale)\n[![title](/docs/img/girl2-RGB.png)](https://github.com/TZYSJTU/Sketch-Generation-with-Drawing-Process-Guided-by-Vector-Flow-and-Grayscale)\n\n**Please visit our high resolution face dataset VGGFace2-HQ**\n\n[![logo](./docs/img/vggface2_hq_compare.png)](https://github.com/NNNNAI/VGGFace2-HQ)\n\nLearn about our other projects \n\n[[VGGFace2-HQ]](https://github.com/NNNNAI/VGGFace2-HQ);\n\n[[RainNet]](https://neuralchen.github.io/RainNet);\n\n[[Sketch Generation]](https://github.com/TZYSJTU/Sketch-Generation-with-Drawing-Process-Guided-by-Vector-Flow-and-Grayscale);\n\n[[CooGAN]](https://github.com/neuralchen/CooGAN);\n\n[[Knowledge Style Transfer]](https://github.com/AceSix/Knowledge_Transfer);\n\n[[SimSwap]](https://github.com/neuralchen/SimSwap);\n\n[[ASMA-GAN]](https://github.com/neuralchen/ASMAGAN);\n\n[[SNGAN-Projection-pytorch]](https://github.com/neuralchen/SNGAN_Projection)\n\n[[Pretrained_VGG19]](https://github.com/neuralchen/Pretrained_VGG19).\n\n## Acknowledgements\n\n<!--ts-->\n* [Deepfacelab](https://github.com/iperov/DeepFaceLab)\n* [Insightface](https://github.com/deepinsight/insightface)\n* [Face-parsing.PyTorch](https://github.com/zllrunning/face-parsing.PyTorch)\n* [BiSeNet](https://github.com/CoinCheung/BiSeNet)\n<!--te-->\n"
        },
        {
          "name": "SimSwap colab.ipynb",
          "type": "blob",
          "size": 26.81640625,
          "content": "{\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0,\n  \"metadata\": {\n    \"colab\": {\n      \"name\": \"SimSwap colab.ipynb\",\n      \"provenance\": [],\n      \"collapsed_sections\": []\n    },\n    \"kernelspec\": {\n      \"name\": \"python3\",\n      \"display_name\": \"Python 3\"\n    },\n    \"language_info\": {\n      \"name\": \"python\"\n    },\n    \"accelerator\": \"GPU\"\n  },\n  \"cells\": [\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"7_gtFoV8BuRx\"\n      },\n      \"source\": [\n        \"This is a simple example of SimSwap on processing video with multiple faces. You can change the codes for inference based on our other scripts for image or single face swapping.\\n\",\n        \"\\n\",\n        \"Code path: https://github.com/neuralchen/SimSwap\\n\",\n        \"\\n\",\n        \"Paper path: https://arxiv.org/pdf/2106.06340v1.pdf or https://dl.acm.org/doi/10.1145/3394171.3413630\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"0Y1RfpzsCAl9\",\n        \"outputId\": \"a39470a0-9689-409d-a0a4-e2afd5d3b5dd\"\n      },\n      \"source\": [\n        \"## make sure you are using a runtime with GPU\\n\",\n        \"## you can check at Runtime/Change runtime type in the top bar.\\n\",\n        \"!nvidia-smi\"\n      ],\n      \"execution_count\": 1,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"Mon Jun 21 02:13:20 2021       \\n\",\n            \"+-----------------------------------------------------------------------------+\\n\",\n            \"| NVIDIA-SMI 465.27       Driver Version: 460.32.03    CUDA Version: 11.2     |\\n\",\n            \"|-------------------------------+----------------------+----------------------+\\n\",\n            \"| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\\n\",\n            \"| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\\n\",\n            \"|                               |                      |               MIG M. |\\n\",\n            \"|===============================+======================+======================|\\n\",\n            \"|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\\n\",\n            \"| N/A   45C    P8    10W /  70W |      0MiB / 15109MiB |      0%      Default |\\n\",\n            \"|                               |                      |                  N/A |\\n\",\n            \"+-------------------------------+----------------------+----------------------+\\n\",\n            \"                                                                               \\n\",\n            \"+-----------------------------------------------------------------------------+\\n\",\n            \"| Processes:                                                                  |\\n\",\n            \"|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\\n\",\n            \"|        ID   ID                                                   Usage      |\\n\",\n            \"|=============================================================================|\\n\",\n            \"|  No running processes found                                                 |\\n\",\n            \"+-----------------------------------------------------------------------------+\\n\"\n          ],\n          \"name\": \"stdout\"\n        }\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"0Qzzx2UpDkqw\"\n      },\n      \"source\": [\n        \"## Installation\\n\",\n        \"\\n\",\n        \"All file changes made by this notebook are temporary. \\n\",\n        \"You can try to mount your own google drive to store files if you want.\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"VA_4CeWZCHLP\",\n        \"outputId\": \"4b0f176f-87e7-4772-8b47-c2098d8f3bf6\"\n      },\n      \"source\": [\n        \"!git clone https://github.com/neuralchen/SimSwap\\n\",\n        \"!cd SimSwap && git pull\"\n      ],\n      \"execution_count\": 2,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"Cloning into 'SimSwap'...\\n\",\n            \"remote: Enumerating objects: 362, done.\\u001b[K\\n\",\n            \"remote: Counting objects: 100% (362/362), done.\\u001b[K\\n\",\n            \"remote: Compressing objects: 100% (281/281), done.\\u001b[K\\n\",\n            \"remote: Total 362 (delta 149), reused 272 (delta 67), pack-reused 0\\u001b[K\\n\",\n            \"Receiving objects: 100% (362/362), 101.31 MiB | 32.47 MiB/s, done.\\n\",\n            \"Resolving deltas: 100% (149/149), done.\\n\",\n            \"Already up to date.\\n\"\n          ],\n          \"name\": \"stdout\"\n        }\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"id\": \"Y5K4au_UCkKn\",\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"outputId\": \"9691a7a4-192e-4ec2-c3c1-1f2c933d7b6a\"\n      },\n      \"source\": [\n        \"!pip install insightface==0.2.1 onnxruntime moviepy\\n\",\n        \"!pip install googledrivedownloader\\n\",\n        \"!pip install imageio==2.4.1\"\n      ],\n      \"execution_count\": 3,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"Collecting insightface==0.2.1\\n\",\n            \"  Downloading https://files.pythonhosted.org/packages/ee/1e/6395bbe0db665f187c8e49266cda54fcf661f182192370d409423e4943e4/insightface-0.2.1-py2.py3-none-any.whl\\n\",\n            \"Collecting onnxruntime\\n\",\n            \"\\u001b[?25l  Downloading https://files.pythonhosted.org/packages/f9/76/3d0f8bb2776961c7335693df06eccf8d099e48fa6fb552c7546867192603/onnxruntime-1.8.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.5MB)\\n\",\n            \"\\u001b[K     |████████████████████████████████| 4.5MB 10.2MB/s \\n\",\n            \"\\u001b[?25hRequirement already satisfied: moviepy in /usr/local/lib/python3.7/dist-packages (0.2.3.5)\\n\",\n            \"Collecting onnx\\n\",\n            \"\\u001b[?25l  Downloading https://files.pythonhosted.org/packages/3f/9b/54c950d3256e27f970a83cd0504efb183a24312702deed0179453316dbd0/onnx-1.9.0-cp37-cp37m-manylinux2010_x86_64.whl (12.2MB)\\n\",\n            \"\\u001b[K     |████████████████████████████████| 12.2MB 51.4MB/s \\n\",\n            \"\\u001b[?25hRequirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (3.2.2)\\n\",\n            \"Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (4.41.1)\\n\",\n            \"Requirement already satisfied: Pillow in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (7.1.2)\\n\",\n            \"Requirement already satisfied: scikit-image in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (0.16.2)\\n\",\n            \"Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (2.23.0)\\n\",\n            \"Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (0.22.2.post1)\\n\",\n            \"Requirement already satisfied: opencv-python in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (4.1.2.30)\\n\",\n            \"Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (1.19.5)\\n\",\n            \"Requirement already satisfied: easydict in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (1.9)\\n\",\n            \"Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from insightface==0.2.1) (1.4.1)\\n\",\n            \"Requirement already satisfied: flatbuffers in /usr/local/lib/python3.7/dist-packages (from onnxruntime) (1.12)\\n\",\n            \"Requirement already satisfied: protobuf in /usr/local/lib/python3.7/dist-packages (from onnxruntime) (3.12.4)\\n\",\n            \"Requirement already satisfied: decorator<5.0,>=4.0.2 in /usr/local/lib/python3.7/dist-packages (from moviepy) (4.4.2)\\n\",\n            \"Requirement already satisfied: imageio<3.0,>=2.1.2 in /usr/local/lib/python3.7/dist-packages (from moviepy) (2.4.1)\\n\",\n            \"Requirement already satisfied: typing-extensions>=3.6.2.1 in /usr/local/lib/python3.7/dist-packages (from onnx->insightface==0.2.1) (3.7.4.3)\\n\",\n            \"Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from onnx->insightface==0.2.1) (1.15.0)\\n\",\n            \"Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->insightface==0.2.1) (1.3.1)\\n\",\n            \"Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->insightface==0.2.1) (2.8.1)\\n\",\n            \"Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->insightface==0.2.1) (0.10.0)\\n\",\n            \"Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->insightface==0.2.1) (2.4.7)\\n\",\n            \"Requirement already satisfied: networkx>=2.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image->insightface==0.2.1) (2.5.1)\\n\",\n            \"Requirement already satisfied: PyWavelets>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image->insightface==0.2.1) (1.1.1)\\n\",\n            \"Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->insightface==0.2.1) (2.10)\\n\",\n            \"Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->insightface==0.2.1) (2021.5.30)\\n\",\n            \"Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->insightface==0.2.1) (3.0.4)\\n\",\n            \"Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->insightface==0.2.1) (1.24.3)\\n\",\n            \"Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->insightface==0.2.1) (1.0.1)\\n\",\n            \"Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from protobuf->onnxruntime) (57.0.0)\\n\",\n            \"Installing collected packages: onnx, insightface, onnxruntime\\n\",\n            \"Successfully installed insightface-0.2.1 onnx-1.9.0 onnxruntime-1.8.0\\n\",\n            \"Requirement already satisfied: googledrivedownloader in /usr/local/lib/python3.7/dist-packages (0.4)\\n\",\n            \"Requirement already satisfied: imageio==2.4.1 in /usr/local/lib/python3.7/dist-packages (2.4.1)\\n\",\n            \"Requirement already satisfied: pillow in /usr/local/lib/python3.7/dist-packages (from imageio==2.4.1) (7.1.2)\\n\",\n            \"Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from imageio==2.4.1) (1.19.5)\\n\"\n          ],\n          \"name\": \"stdout\"\n        }\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"gQ7ZoIbLFCye\",\n        \"outputId\": \"bb35e7e2-14b7-4f36-d62a-499ba041cf64\"\n      },\n      \"source\": [\n        \"import os\\n\",\n        \"os.chdir(\\\"SimSwap\\\")\\n\",\n        \"!ls\"\n      ],\n      \"execution_count\": 4,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \" crop_224\\t    models\\t\\t   test_one_image.py\\n\",\n            \" data\\t\\t    options\\t\\t   test_video_swapmulti.py\\n\",\n            \" demo_file\\t    output\\t\\t   test_video_swapsingle.py\\n\",\n            \" doc\\t\\t    README.md\\t\\t   test_wholeimage_swapmulti.py\\n\",\n            \" insightface_func  'SimSwap colab.ipynb'   test_wholeimage_swapsingle.py\\n\",\n            \" LICENSE\\t    simswaplogo\\t\\t   util\\n\"\n          ],\n          \"name\": \"stdout\"\n        }\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"gLti1J0pEFjJ\",\n        \"outputId\": \"e93c3f98-01df-458e-b791-c32f7343e705\"\n      },\n      \"source\": [\n        \"from google_drive_downloader import GoogleDriveDownloader\\n\",\n        \"\\n\",\n        \"### it seems that google drive link may not be permenant, you can find this ID from our open url.\\n\",\n        \"# GoogleDriveDownloader.download_file_from_google_drive(file_id='1TLNdIufzwesDbyr_nVTR7Zrx9oRHLM_N',\\n\",\n        \"#                                     dest_path='./arcface_model/arcface_checkpoint.tar')\\n\",\n        \"# GoogleDriveDownloader.download_file_from_google_drive(file_id='1PXkRiBUYbu1xWpQyDEJvGKeqqUFthJcI',\\n\",\n        \"#                                     dest_path='./checkpoints.zip')\\n\",\n        \"\\n\",\n        \"!wget -P ./arcface_model https://github.com/neuralchen/SimSwap/releases/download/1.0/arcface_checkpoint.tar\\n\",\n        \"!wget https://github.com/neuralchen/SimSwap/releases/download/1.0/checkpoints.zip\\n\",\n        \"!unzip ./checkpoints.zip  -d ./checkpoints\\n\",\n        \"!wget -P ./parsing_model/checkpoint https://github.com/neuralchen/SimSwap/releases/download/1.0/79999_iter.pth\"\n      ],\n      \"execution_count\": 5,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"Downloading 1TLNdIufzwesDbyr_nVTR7Zrx9oRHLM_N into ./arcface_model/arcface_checkpoint.tar... Done.\\n\",\n            \"Downloading 1PXkRiBUYbu1xWpQyDEJvGKeqqUFthJcI into ./checkpoints.zip... Done.\\n\",\n            \"Archive:  ./checkpoints.zip\\n\",\n            \"   creating: ./checkpoints/people/\\n\",\n            \"  inflating: ./checkpoints/people/iter.txt  \\n\",\n            \"  inflating: ./checkpoints/people/latest_net_D1.pth  \\n\",\n            \"  inflating: ./checkpoints/people/latest_net_D2.pth  \\n\",\n            \"  inflating: ./checkpoints/people/latest_net_G.pth  \\n\",\n            \"  inflating: ./checkpoints/people/loss_log.txt  \\n\",\n            \"  inflating: ./checkpoints/people/opt.txt  \\n\",\n            \"   creating: ./checkpoints/people/web/\\n\",\n            \"   creating: ./checkpoints/people/web/images/\\n\"\n          ],\n          \"name\": \"stdout\"\n        }\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"aSRnK5V4HI-k\",\n        \"outputId\": \"e688746c-c33a-485c-808c-54a7370f0c53\"\n      },\n      \"source\": [\n        \"## You can upload filed manually\\n\",\n        \"# from google.colab import drive\\n\",\n        \"# drive.mount('/content/gdrive')\\n\",\n        \"\\n\",\n        \"### Now onedrive file can be downloaded in Colab directly!\\n\",\n        \"### If the link blow is not permanent, you can just download it from the \\n\",\n        \"### open url(can be found at [our repo]/doc/guidance/preparation.md) and copy the assigned download link here.\\n\",\n        \"### many thanks to woctezuma for this very useful help\\n\",\n        \"!wget --no-check-certificate \\\"https://sh23tw.dm.files.1drv.com/y4mmGiIkNVigkSwOKDcV3nwMJulRGhbtHdkheehR5TArc52UjudUYNXAEvKCii2O5LAmzGCGK6IfleocxuDeoKxDZkNzDRSt4ZUlEt8GlSOpCXAFEkBwaZimtWGDRbpIGpb_pz9Nq5jATBQpezBS6G_UtspWTkgrXHHxhviV2nWy8APPx134zOZrUIbkSF6xnsqzs3uZ_SEX_m9Rey0ykpx9w\\\" -O antelope.zip\\n\",\n        \"!unzip ./antelope.zip -d ./insightface_func/models/\\n\"\n      ],\n      \"execution_count\": 6,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"--2021-06-21 02:14:17--  https://sh23tw.dm.files.1drv.com/y4mmGiIkNVigkSwOKDcV3nwMJulRGhbtHdkheehR5TArc52UjudUYNXAEvKCii2O5LAmzGCGK6IfleocxuDeoKxDZkNzDRSt4ZUlEt8GlSOpCXAFEkBwaZimtWGDRbpIGpb_pz9Nq5jATBQpezBS6G_UtspWTkgrXHHxhviV2nWy8APPx134zOZrUIbkSF6xnsqzs3uZ_SEX_m9Rey0ykpx9w\\n\",\n            \"Resolving sh23tw.dm.files.1drv.com (sh23tw.dm.files.1drv.com)... 13.107.42.12\\n\",\n            \"Connecting to sh23tw.dm.files.1drv.com (sh23tw.dm.files.1drv.com)|13.107.42.12|:443... connected.\\n\",\n            \"HTTP request sent, awaiting response... 200 OK\\n\",\n            \"Length: 248024513 (237M) [application/zip]\\n\",\n            \"Saving to: ‘antelope.zip’\\n\",\n            \"\\n\",\n            \"antelope.zip        100%[===================>] 236.53M  6.16MB/s    in 31s     \\n\",\n            \"\\n\",\n            \"2021-06-21 02:14:48 (7.66 MB/s) - ‘antelope.zip’ saved [248024513/248024513]\\n\",\n            \"\\n\",\n            \"Archive:  ./antelope.zip\\n\",\n            \"   creating: ./insightface_func/models/antelope/\\n\",\n            \"  inflating: ./insightface_func/models/antelope/glintr100.onnx  \\n\",\n            \"  inflating: ./insightface_func/models/antelope/scrfd_10g_bnkps.onnx  \\n\"\n          ],\n          \"name\": \"stdout\"\n        }\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"BsGmIMxLVxyO\"\n      },\n      \"source\": [\n        \"## Inference\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"PfSsND36EMvn\",\n        \"outputId\": \"f28c98fd-4c6d-40fa-e3c7-99b606c7492a\"\n      },\n      \"source\": [\n        \"import cv2\\n\",\n        \"import torch\\n\",\n        \"import fractions\\n\",\n        \"import numpy as np\\n\",\n        \"from PIL import Image\\n\",\n        \"import torch.nn.functional as F\\n\",\n        \"from torchvision import transforms\\n\",\n        \"from models.models import create_model\\n\",\n        \"from options.test_options import TestOptions\\n\",\n        \"from insightface_func.face_detect_crop_multi import Face_detect_crop\\n\",\n        \"from util.videoswap import video_swap\\n\",\n        \"from util.add_watermark import watermark_image\"\n      ],\n      \"execution_count\": 7,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"Imageio: 'ffmpeg-linux64-v3.3.1' was not found on your computer; downloading it now.\\n\",\n            \"Try 1. Download from https://github.com/imageio/imageio-binaries/raw/master/ffmpeg/ffmpeg-linux64-v3.3.1 (43.8 MB)\\n\",\n            \"Downloading: 8192/45929032 bytes (0.0%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b1286144/45929032 bytes (2.8%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b3653632/45929032 bytes (8.0%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b7479296/45929032 bytes (16.3%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b11526144/45929032 bytes (25.1%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b15171584/45929032 bytes (33.0%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b18997248/45929032 bytes (41.4%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b22724608/45929032 bytes (49.5%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b26673152/45929032 bytes (58.1%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b30728192/45929032 bytes (66.9%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b34725888/45929032 bytes (75.6%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b38879232/45929032 bytes (84.7%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b42680320/45929032 bytes (92.9%)\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b45929032/45929032 bytes (100.0%)\\n\",\n            \"  Done\\n\",\n            \"File saved as /root/.imageio/ffmpeg/ffmpeg-linux64-v3.3.1.\\n\"\n          ],\n          \"name\": \"stdout\"\n        }\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"id\": \"rxSbZ2EDNDlf\"\n      },\n      \"source\": [\n        \"transformer = transforms.Compose([\\n\",\n        \"        transforms.ToTensor(),\\n\",\n        \"        #transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\\n\",\n        \"    ])\\n\",\n        \"\\n\",\n        \"transformer_Arcface = transforms.Compose([\\n\",\n        \"        transforms.ToTensor(),\\n\",\n        \"        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\\n\",\n        \"    ])\\n\",\n        \"\\n\",\n        \"detransformer = transforms.Compose([\\n\",\n        \"        transforms.Normalize([0, 0, 0], [1/0.229, 1/0.224, 1/0.225]),\\n\",\n        \"        transforms.Normalize([-0.485, -0.456, -0.406], [1, 1, 1])\\n\",\n        \"    ])\"\n      ],\n      \"execution_count\": 8,\n      \"outputs\": []\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\"\n        },\n        \"id\": \"wwJOwR9LNKRz\",\n        \"outputId\": \"bdc82f7b-21c4-403f-94d1-b92911698b4a\"\n      },\n      \"source\": [\n        \"opt = TestOptions()\\n\",\n        \"opt.initialize()\\n\",\n        \"opt.parser.add_argument('-f') ## dummy arg to avoid bug\\n\",\n        \"opt = opt.parse()\\n\",\n        \"opt.pic_a_path = './demo_file/Iron_man.jpg' ## or replace it with image from your own google drive\\n\",\n        \"opt.video_path = './demo_file/multi_people_1080p.mp4' ## or replace it with video from your own google drive\\n\",\n        \"opt.output_path = './output/demo.mp4'\\n\",\n        \"opt.temp_path = './tmp'\\n\",\n        \"opt.Arc_path = './arcface_model/arcface_checkpoint.tar'\\n\",\n        \"opt.isTrain = False\\n\",\n        \"opt.use_mask = True  ## new feature up-to-date\\n\",\n        \"\\n\",\n        \"crop_size = opt.crop_size\\n\",\n        \"\\n\",\n        \"torch.nn.Module.dump_patches = True\\n\",\n        \"model = create_model(opt)\\n\",\n        \"model.eval()\\n\",\n        \"\\n\",\n        \"app = Face_detect_crop(name='antelope', root='./insightface_func/models')\\n\",\n        \"app.prepare(ctx_id= 0, det_thresh=0.6, det_size=(640,640))\\n\",\n        \"\\n\",\n        \"with torch.no_grad():\\n\",\n        \"    pic_a = opt.pic_a_path\\n\",\n        \"    # img_a = Image.open(pic_a).convert('RGB')\\n\",\n        \"    img_a_whole = cv2.imread(pic_a)\\n\",\n        \"    img_a_align_crop, _ = app.get(img_a_whole,crop_size)\\n\",\n        \"    img_a_align_crop_pil = Image.fromarray(cv2.cvtColor(img_a_align_crop[0],cv2.COLOR_BGR2RGB)) \\n\",\n        \"    img_a = transformer_Arcface(img_a_align_crop_pil)\\n\",\n        \"    img_id = img_a.view(-1, img_a.shape[0], img_a.shape[1], img_a.shape[2])\\n\",\n        \"\\n\",\n        \"    # convert numpy to tensor\\n\",\n        \"    img_id = img_id.cuda()\\n\",\n        \"\\n\",\n        \"    #create latent id\\n\",\n        \"    img_id_downsample = F.interpolate(img_id, size=(112,112))\\n\",\n        \"    latend_id = model.netArc(img_id_downsample)\\n\",\n        \"    latend_id = latend_id.detach().to('cpu')\\n\",\n        \"    latend_id = latend_id/np.linalg.norm(latend_id,axis=1,keepdims=True)\\n\",\n        \"    latend_id = latend_id.to('cuda')\\n\",\n        \"\\n\",\n        \"    video_swap(opt.video_path, latend_id, model, app, opt.output_path, temp_results_dir=opt.temp_path, use_mask=opt.use_mask)\"\n      ],\n      \"execution_count\": 9,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"------------ Options -------------\\n\",\n            \"Arc_path: models/BEST_checkpoint.tar\\n\",\n            \"aspect_ratio: 1.0\\n\",\n            \"batchSize: 8\\n\",\n            \"checkpoints_dir: ./checkpoints\\n\",\n            \"cluster_path: features_clustered_010.npy\\n\",\n            \"data_type: 32\\n\",\n            \"dataroot: ./datasets/cityscapes/\\n\",\n            \"display_winsize: 512\\n\",\n            \"engine: None\\n\",\n            \"export_onnx: None\\n\",\n            \"f: /root/.local/share/jupyter/runtime/kernel-6d955151-4911-464a-824d-f0806d8071f6.json\\n\",\n            \"feat_num: 3\\n\",\n            \"fineSize: 512\\n\",\n            \"fp16: False\\n\",\n            \"gpu_ids: [0]\\n\",\n            \"how_many: 50\\n\",\n            \"image_size: 224\\n\",\n            \"input_nc: 3\\n\",\n            \"instance_feat: False\\n\",\n            \"isTrain: False\\n\",\n            \"label_feat: False\\n\",\n            \"label_nc: 0\\n\",\n            \"latent_size: 512\\n\",\n            \"loadSize: 1024\\n\",\n            \"load_features: False\\n\",\n            \"local_rank: 0\\n\",\n            \"max_dataset_size: inf\\n\",\n            \"model: pix2pixHD\\n\",\n            \"nThreads: 2\\n\",\n            \"n_blocks_global: 6\\n\",\n            \"n_blocks_local: 3\\n\",\n            \"n_clusters: 10\\n\",\n            \"n_downsample_E: 4\\n\",\n            \"n_downsample_global: 3\\n\",\n            \"n_local_enhancers: 1\\n\",\n            \"name: people\\n\",\n            \"nef: 16\\n\",\n            \"netG: global\\n\",\n            \"ngf: 64\\n\",\n            \"niter_fix_global: 0\\n\",\n            \"no_flip: False\\n\",\n            \"no_instance: False\\n\",\n            \"norm: batch\\n\",\n            \"norm_G: spectralspadesyncbatch3x3\\n\",\n            \"ntest: inf\\n\",\n            \"onnx: None\\n\",\n            \"output_nc: 3\\n\",\n            \"output_path: ./output/\\n\",\n            \"phase: test\\n\",\n            \"pic_a_path: ./crop_224/gdg.jpg\\n\",\n            \"pic_b_path: ./crop_224/zrf.jpg\\n\",\n            \"resize_or_crop: scale_width\\n\",\n            \"results_dir: ./results/\\n\",\n            \"semantic_nc: 3\\n\",\n            \"serial_batches: False\\n\",\n            \"temp_path: ./temp_results\\n\",\n            \"tf_log: False\\n\",\n            \"use_dropout: False\\n\",\n            \"use_encoded_image: False\\n\",\n            \"verbose: False\\n\",\n            \"video_path: ./demo_file/multi_people_1080p.mp4\\n\",\n            \"which_epoch: latest\\n\",\n            \"-------------- End ----------------\\n\",\n            \"input mean and std: 127.5 127.5\\n\",\n            \"find model: ./insightface_func/models/antelope/glintr100.onnx recognition\\n\",\n            \"find model: ./insightface_func/models/antelope/scrfd_10g_bnkps.onnx detection\\n\",\n            \"set det-size: (640, 640)\\n\"\n          ],\n          \"name\": \"stdout\"\n        },\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"\\r  0%|          | 0/594 [00:00<?, ?it/s]\"\n          ],\n          \"name\": \"stderr\"\n        },\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"(142, 366, 4)\\n\"\n          ],\n          \"name\": \"stdout\"\n        },\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"100%|██████████| 594/594 [08:45<00:00,  1.13it/s]\\n\"\n          ],\n          \"name\": \"stderr\"\n        },\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"[MoviePy] >>>> Building video ./output/demo.mp4\\n\",\n            \"[MoviePy] Writing audio in demoTEMP_MPY_wvf_snd.mp3\\n\"\n          ],\n          \"name\": \"stdout\"\n        },\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"100%|██████████| 438/438 [00:00<00:00, 877.18it/s]\\n\"\n          ],\n          \"name\": \"stderr\"\n        },\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"[MoviePy] Done.\\n\",\n            \"[MoviePy] Writing video ./output/demo.mp4\\n\"\n          ],\n          \"name\": \"stdout\"\n        },\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"100%|██████████| 595/595 [00:53<00:00, 11.15it/s]\\n\"\n          ],\n          \"name\": \"stderr\"\n        },\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"[MoviePy] Done.\\n\",\n            \"[MoviePy] >>>> Video ready: ./output/demo.mp4 \\n\",\n            \"\\n\"\n          ],\n          \"name\": \"stdout\"\n        }\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"id\": \"Rty2GsyZZrI6\"\n      },\n      \"source\": [],\n      \"execution_count\": null,\n      \"outputs\": []\n    }\n  ]\n}"
        },
        {
          "name": "cog.yaml",
          "type": "blob",
          "size": 0.4248046875,
          "content": "build:\n  gpu: true\n  python_version: \"3.8\"\n  system_packages:\n    - \"libgl1-mesa-glx\"\n    - \"libglib2.0-0\"\n  python_packages:\n    - \"imageio==2.9.0\"\n    - \"torch==1.8.0\"\n    - \"torchvision==0.9.0\"\n    - \"numpy==1.21.1\"\n    - \"insightface==0.2.1\"\n    - \"ipython==7.21.0\"\n    - \"Pillow==8.3.1\"\n    - \"opencv-python==4.5.3.56\"\n    - \"Fraction==1.5.1\"\n    - \"onnxruntime-gpu==1.8.1\"\n    - \"moviepy==1.0.3\"\n\npredict: \"predict.py:Predictor\"\n"
        },
        {
          "name": "crop_224",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo_file",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "download-weights.sh",
          "type": "blob",
          "size": 0.640625,
          "content": "#!/bin/sh\nwget -P ./arcface_model https://github.com/neuralchen/SimSwap/releases/download/1.0/arcface_checkpoint.tar\nwget https://github.com/neuralchen/SimSwap/releases/download/1.0/checkpoints.zip\nunzip ./checkpoints.zip  -d ./checkpoints\nrm checkpoints.zip\nwget --no-check-certificate \"https://sh23tw.dm.files.1drv.com/y4mmGiIkNVigkSwOKDcV3nwMJulRGhbtHdkheehR5TArc52UjudUYNXAEvKCii2O5LAmzGCGK6IfleocxuDeoKxDZkNzDRSt4ZUlEt8GlSOpCXAFEkBwaZimtWGDRbpIGpb_pz9Nq5jATBQpezBS6G_UtspWTkgrXHHxhviV2nWy8APPx134zOZrUIbkSF6xnsqzs3uZ_SEX_m9Rey0ykpx9w\" -O antelope.zip\nmkdir -p insightface_func/models\nunzip ./antelope.zip -d ./insightface_func/models/\nrm antelope.zip\n"
        },
        {
          "name": "insightface_func",
          "type": "tree",
          "content": null
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "options",
          "type": "tree",
          "content": null
        },
        {
          "name": "output",
          "type": "tree",
          "content": null
        },
        {
          "name": "parsing_model",
          "type": "tree",
          "content": null
        },
        {
          "name": "pg_modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "predict.py",
          "type": "blob",
          "size": 3.927734375,
          "content": "import cog\nimport tempfile\nfrom pathlib import Path\nimport argparse\nimport cv2\nimport torch\nfrom PIL import Image\nimport torch.nn.functional as F\nfrom torchvision import transforms\nfrom models.models import create_model\nfrom options.test_options import TestOptions\nfrom util.reverse2original import reverse2wholeimage\nfrom util.norm import SpecificNorm\nfrom test_wholeimage_swapmulti import _totensor\nfrom insightface_func.face_detect_crop_multi import Face_detect_crop as Face_detect_crop_multi\nfrom insightface_func.face_detect_crop_single import Face_detect_crop as Face_detect_crop_single\n\n\nclass Predictor(cog.Predictor):\n    def setup(self):\n        self.transformer_Arcface = transforms.Compose([\n            transforms.ToTensor(),\n            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n        ])\n\n    @cog.input(\"source\", type=Path, help=\"source image\")\n    @cog.input(\"target\", type=Path, help=\"target image\")\n    @cog.input(\"mode\", type=str, options=['single', 'all'], default='all',\n               help=\"swap a single face (the one with highest confidence by face detection) or all faces in the target image\")\n    def predict(self, source, target, mode='all'):\n\n        app = Face_detect_crop_multi(name='antelope', root='./insightface_func/models')\n\n        if mode == 'single':\n            app = Face_detect_crop_single(name='antelope', root='./insightface_func/models')\n\n        app.prepare(ctx_id=0, det_thresh=0.6, det_size=(640, 640))\n\n        options = TestOptions()\n        options.initialize()\n        opt = options.parser.parse_args([\"--Arc_path\", 'arcface_model/arcface_checkpoint.tar', \"--pic_a_path\", str(source),\n                                         \"--pic_b_path\", str(target), \"--isTrain\", False, \"--no_simswaplogo\"])\n\n        str_ids = opt.gpu_ids.split(',')\n        opt.gpu_ids = []\n        for str_id in str_ids:\n            id = int(str_id)\n            if id >= 0:\n                opt.gpu_ids.append(id)\n\n        # set gpu ids\n        if len(opt.gpu_ids) > 0:\n            torch.cuda.set_device(opt.gpu_ids[0])\n\n        torch.nn.Module.dump_patches = True\n        model = create_model(opt)\n        model.eval()\n\n        crop_size = opt.crop_size\n        spNorm = SpecificNorm()\n\n        with torch.no_grad():\n            pic_a = opt.pic_a_path\n            img_a_whole = cv2.imread(pic_a)\n            img_a_align_crop, _ = app.get(img_a_whole, crop_size)\n            img_a_align_crop_pil = Image.fromarray(cv2.cvtColor(img_a_align_crop[0], cv2.COLOR_BGR2RGB))\n            img_a = self.transformer_Arcface(img_a_align_crop_pil)\n            img_id = img_a.view(-1, img_a.shape[0], img_a.shape[1], img_a.shape[2])\n\n            # convert numpy to tensor\n            img_id = img_id.cuda()\n\n            # create latent id\n            img_id_downsample = F.interpolate(img_id, size=(112,112))\n            latend_id = model.netArc(img_id_downsample)\n            latend_id = F.normalize(latend_id, p=2, dim=1)\n\n            ############## Forward Pass ######################\n\n            pic_b = opt.pic_b_path\n            img_b_whole = cv2.imread(pic_b)\n            img_b_align_crop_list, b_mat_list = app.get(img_b_whole, crop_size)\n\n            swap_result_list = []\n            b_align_crop_tenor_list = []\n\n            for b_align_crop in img_b_align_crop_list:\n                b_align_crop_tenor = _totensor(cv2.cvtColor(b_align_crop, cv2.COLOR_BGR2RGB))[None, ...].cuda()\n\n                swap_result = model(None, b_align_crop_tenor, latend_id, None, True)[0]\n                swap_result_list.append(swap_result)\n                b_align_crop_tenor_list.append(b_align_crop_tenor)\n\n            net = None\n\n            out_path = Path(tempfile.mkdtemp()) / \"output.png\"\n\n            reverse2wholeimage(b_align_crop_tenor_list, swap_result_list, b_mat_list, crop_size, img_b_whole, None,\n                               str(out_path), opt.no_simswaplogo,\n                               pasring_model=net, use_mask=opt.use_mask, norm=spNorm)\n            return out_path\n"
        },
        {
          "name": "simswaplogo",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_one_image.py",
          "type": "blob",
          "size": 2.58203125,
          "content": "\nimport cv2\nimport torch\nimport fractions\nimport numpy as np\nfrom PIL import Image\nimport torch.nn.functional as F\nfrom torchvision import transforms\nfrom models.models import create_model\nfrom options.test_options import TestOptions\n\n\ndef lcm(a, b): return abs(a * b) / fractions.gcd(a, b) if a and b else 0\n\ntransformer = transforms.Compose([\n        transforms.ToTensor(),\n        #transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])\n\ntransformer_Arcface = transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])\n\ndetransformer = transforms.Compose([\n        transforms.Normalize([0, 0, 0], [1/0.229, 1/0.224, 1/0.225]),\n        transforms.Normalize([-0.485, -0.456, -0.406], [1, 1, 1])\n    ])\nif __name__ == '__main__':\n    opt = TestOptions().parse()\n\n    start_epoch, epoch_iter = 1, 0\n\n    torch.nn.Module.dump_patches = True\n    model = create_model(opt)\n    model.eval()\n\n    with torch.no_grad():\n        \n        pic_a = opt.pic_a_path\n        img_a = Image.open(pic_a).convert('RGB')\n        img_a = transformer_Arcface(img_a)\n        img_id = img_a.view(-1, img_a.shape[0], img_a.shape[1], img_a.shape[2])\n\n        pic_b = opt.pic_b_path\n\n        img_b = Image.open(pic_b).convert('RGB')\n        img_b = transformer(img_b)\n        img_att = img_b.view(-1, img_b.shape[0], img_b.shape[1], img_b.shape[2])\n\n        # convert numpy to tensor\n        img_id = img_id.cuda()\n        img_att = img_att.cuda()\n\n        #create latent id\n        img_id_downsample = F.interpolate(img_id, size=(112,112))\n        latend_id = model.netArc(img_id_downsample)\n        latend_id = latend_id.detach().to('cpu')\n        latend_id = latend_id/np.linalg.norm(latend_id,axis=1,keepdims=True)\n        latend_id = latend_id.to('cuda')\n\n\n        ############## Forward Pass ######################\n        img_fake = model(img_id, img_att, latend_id, latend_id, True)\n\n\n        for i in range(img_id.shape[0]):\n            if i == 0:\n                row1 = img_id[i]\n                row2 = img_att[i]\n                row3 = img_fake[i]\n            else:\n                row1 = torch.cat([row1, img_id[i]], dim=2)\n                row2 = torch.cat([row2, img_att[i]], dim=2)\n                row3 = torch.cat([row3, img_fake[i]], dim=2)\n\n        #full = torch.cat([row1, row2, row3], dim=1).detach()\n        full = row3.detach()\n        full = full.permute(1, 2, 0)\n        output = full.to('cpu')\n        output = np.array(output)\n        output = output[..., ::-1]\n\n        output = output*255\n\n        cv2.imwrite(opt.output_path + 'result.jpg', output)"
        },
        {
          "name": "test_video_swap_multispecific.py",
          "type": "blob",
          "size": 4,
          "content": "\nimport cv2\nimport torch\nimport fractions\nfrom PIL import Image\nimport torch.nn.functional as F\nfrom torchvision import transforms\nfrom models.models import create_model\nfrom options.test_options import TestOptions\nfrom insightface_func.face_detect_crop_multi import Face_detect_crop\nfrom util.videoswap_multispecific import video_swap\nimport os\nimport glob\n\ndef lcm(a, b): return abs(a * b) / fractions.gcd(a, b) if a and b else 0\n\ntransformer = transforms.Compose([\n        transforms.ToTensor(),\n        #transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])\n\ntransformer_Arcface = transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])\n\n# detransformer = transforms.Compose([\n#         transforms.Normalize([0, 0, 0], [1/0.229, 1/0.224, 1/0.225]),\n#         transforms.Normalize([-0.485, -0.456, -0.406], [1, 1, 1])\n#     ])\n\n\nif __name__ == '__main__':\n    opt = TestOptions().parse()\n    pic_specific = opt.pic_specific_path\n    start_epoch, epoch_iter = 1, 0\n    crop_size = opt.crop_size\n\n    multisepcific_dir = opt.multisepcific_dir\n    torch.nn.Module.dump_patches = True\n    if crop_size == 512:\n        opt.which_epoch = 550000\n        opt.name = '512'\n        mode = 'ffhq'\n    else:\n        mode = 'None'\n    model = create_model(opt)\n    model.eval()\n\n\n    app = Face_detect_crop(name='antelope', root='./insightface_func/models')\n    app.prepare(ctx_id= 0, det_thresh=0.6, det_size=(640,640),mode=mode)\n\n    # The specific person to be swapped(source)\n\n    source_specific_id_nonorm_list = []\n    source_path = os.path.join(multisepcific_dir,'SRC_*')\n    source_specific_images_path = sorted(glob.glob(source_path))\n    with torch.no_grad():\n        for source_specific_image_path in source_specific_images_path:\n            specific_person_whole = cv2.imread(source_specific_image_path)\n            specific_person_align_crop, _ = app.get(specific_person_whole,crop_size)\n            specific_person_align_crop_pil = Image.fromarray(cv2.cvtColor(specific_person_align_crop[0],cv2.COLOR_BGR2RGB)) \n            specific_person = transformer_Arcface(specific_person_align_crop_pil)\n            specific_person = specific_person.view(-1, specific_person.shape[0], specific_person.shape[1], specific_person.shape[2])\n            # convert numpy to tensor\n            specific_person = specific_person.cuda()\n            #create latent id\n            specific_person_downsample = F.interpolate(specific_person, size=(112,112))\n            specific_person_id_nonorm = model.netArc(specific_person_downsample)\n            source_specific_id_nonorm_list.append(specific_person_id_nonorm.clone())\n\n\n        # The person who provides id information (list)\n        target_id_norm_list = []\n        target_path = os.path.join(multisepcific_dir,'DST_*')\n        target_images_path = sorted(glob.glob(target_path))\n\n        for target_image_path in target_images_path:\n            img_a_whole = cv2.imread(target_image_path)\n            img_a_align_crop, _ = app.get(img_a_whole,crop_size)\n            img_a_align_crop_pil = Image.fromarray(cv2.cvtColor(img_a_align_crop[0],cv2.COLOR_BGR2RGB)) \n            img_a = transformer_Arcface(img_a_align_crop_pil)\n            img_id = img_a.view(-1, img_a.shape[0], img_a.shape[1], img_a.shape[2])\n            # convert numpy to tensor\n            img_id = img_id.cuda()\n            #create latent id\n            img_id_downsample = F.interpolate(img_id, size=(112,112))\n            latend_id = model.netArc(img_id_downsample)\n            latend_id = F.normalize(latend_id, p=2, dim=1)\n            target_id_norm_list.append(latend_id.clone())\n\n        assert len(target_id_norm_list) == len(source_specific_id_nonorm_list), \"The number of images in source and target directory must be same !!!\"\n\n\n\n        video_swap(opt.video_path, target_id_norm_list,source_specific_id_nonorm_list, opt.id_thres, \\\n            model, app, opt.output_path,temp_results_dir=opt.temp_path,no_simswaplogo=opt.no_simswaplogo,use_mask=opt.use_mask,crop_size=crop_size)\n\n"
        },
        {
          "name": "test_video_swapmulti.py",
          "type": "blob",
          "size": 2.8466796875,
          "content": "'''\nAuthor: Naiyuan liu\nGithub: https://github.com/NNNNAI\nDate: 2021-11-23 17:03:58\nLastEditors: Naiyuan liu\nLastEditTime: 2021-11-24 19:00:34\nDescription: \n'''\n\nimport cv2\nimport torch\nimport fractions\nimport numpy as np\nfrom PIL import Image\nimport torch.nn.functional as F\nfrom torchvision import transforms\nfrom models.models import create_model\nfrom options.test_options import TestOptions\nfrom insightface_func.face_detect_crop_multi import Face_detect_crop\nfrom util.videoswap import video_swap\nimport os\n\ndef lcm(a, b): return abs(a * b) / fractions.gcd(a, b) if a and b else 0\n\ntransformer = transforms.Compose([\n        transforms.ToTensor(),\n        #transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])\n\ntransformer_Arcface = transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])\n\n# detransformer = transforms.Compose([\n#         transforms.Normalize([0, 0, 0], [1/0.229, 1/0.224, 1/0.225]),\n#         transforms.Normalize([-0.485, -0.456, -0.406], [1, 1, 1])\n#     ])\n\n\nif __name__ == '__main__':\n    opt = TestOptions().parse()\n\n    start_epoch, epoch_iter = 1, 0\n    crop_size = opt.crop_size\n\n    torch.nn.Module.dump_patches = True\n\n    if crop_size == 512:\n        opt.which_epoch = 550000\n        opt.name = '512'\n        mode = 'ffhq'\n    else:\n        mode = 'None'\n    model = create_model(opt)\n    model.eval()\n\n    app = Face_detect_crop(name='antelope', root='./insightface_func/models')\n    app.prepare(ctx_id= 0, det_thresh=0.6, det_size=(640,640),mode = mode)\n\n    with torch.no_grad():\n        pic_a = opt.pic_a_path\n        # img_a = Image.open(pic_a).convert('RGB')\n        img_a_whole = cv2.imread(pic_a)\n        img_a_align_crop, _ = app.get(img_a_whole,crop_size)\n        img_a_align_crop_pil = Image.fromarray(cv2.cvtColor(img_a_align_crop[0],cv2.COLOR_BGR2RGB)) \n        img_a = transformer_Arcface(img_a_align_crop_pil)\n        img_id = img_a.view(-1, img_a.shape[0], img_a.shape[1], img_a.shape[2])\n\n        # pic_b = opt.pic_b_path\n        # img_b_whole = cv2.imread(pic_b)\n        # img_b_align_crop, b_mat = app.get(img_b_whole,crop_size)\n        # img_b_align_crop_pil = Image.fromarray(cv2.cvtColor(img_b_align_crop,cv2.COLOR_BGR2RGB)) \n        # img_b = transformer(img_b_align_crop_pil)\n        # img_att = img_b.view(-1, img_b.shape[0], img_b.shape[1], img_b.shape[2])\n\n        # convert numpy to tensor\n        img_id = img_id.cuda()\n        # img_att = img_att.cuda()\n\n        #create latent id\n        img_id_downsample = F.interpolate(img_id, size=(112,112))\n        latend_id = model.netArc(img_id_downsample)\n        latend_id = F.normalize(latend_id, p=2, dim=1)\n\n        video_swap(opt.video_path, latend_id, model, app, opt.output_path,temp_results_dir=opt.temp_path,\\\n            no_simswaplogo=opt.no_simswaplogo,use_mask=opt.use_mask,crop_size=crop_size)\n\n"
        },
        {
          "name": "test_video_swapsingle.py",
          "type": "blob",
          "size": 2.8447265625,
          "content": "'''\nAuthor: Naiyuan liu\nGithub: https://github.com/NNNNAI\nDate: 2021-11-23 17:03:58\nLastEditors: Naiyuan liu\nLastEditTime: 2021-11-24 19:00:38\nDescription: \n'''\n\nimport cv2\nimport torch\nimport fractions\nimport numpy as np\nfrom PIL import Image\nimport torch.nn.functional as F\nfrom torchvision import transforms\nfrom models.models import create_model\nfrom options.test_options import TestOptions\nfrom insightface_func.face_detect_crop_single import Face_detect_crop\nfrom util.videoswap import video_swap\nimport os\n\ndef lcm(a, b): return abs(a * b) / fractions.gcd(a, b) if a and b else 0\n\ntransformer = transforms.Compose([\n        transforms.ToTensor(),\n        #transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])\n\ntransformer_Arcface = transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])\n\n# detransformer = transforms.Compose([\n#         transforms.Normalize([0, 0, 0], [1/0.229, 1/0.224, 1/0.225]),\n#         transforms.Normalize([-0.485, -0.456, -0.406], [1, 1, 1])\n#     ])\n\n\nif __name__ == '__main__':\n    opt = TestOptions().parse()\n\n    start_epoch, epoch_iter = 1, 0\n    crop_size = opt.crop_size\n\n    torch.nn.Module.dump_patches = True\n    if crop_size == 512:\n        opt.which_epoch = 550000\n        opt.name = '512'\n        mode = 'ffhq'\n    else:\n        mode = 'None'\n    model = create_model(opt)\n    model.eval()\n\n\n    app = Face_detect_crop(name='antelope', root='./insightface_func/models')\n    app.prepare(ctx_id= 0, det_thresh=0.6, det_size=(640,640),mode=mode)\n    with torch.no_grad():\n        pic_a = opt.pic_a_path\n        # img_a = Image.open(pic_a).convert('RGB')\n        img_a_whole = cv2.imread(pic_a)\n        img_a_align_crop, _ = app.get(img_a_whole,crop_size)\n        img_a_align_crop_pil = Image.fromarray(cv2.cvtColor(img_a_align_crop[0],cv2.COLOR_BGR2RGB)) \n        img_a = transformer_Arcface(img_a_align_crop_pil)\n        img_id = img_a.view(-1, img_a.shape[0], img_a.shape[1], img_a.shape[2])\n\n        # pic_b = opt.pic_b_path\n        # img_b_whole = cv2.imread(pic_b)\n        # img_b_align_crop, b_mat = app.get(img_b_whole,crop_size)\n        # img_b_align_crop_pil = Image.fromarray(cv2.cvtColor(img_b_align_crop,cv2.COLOR_BGR2RGB)) \n        # img_b = transformer(img_b_align_crop_pil)\n        # img_att = img_b.view(-1, img_b.shape[0], img_b.shape[1], img_b.shape[2])\n\n        # convert numpy to tensor\n        img_id = img_id.cuda()\n        # img_att = img_att.cuda()\n\n        #create latent id\n        img_id_downsample = F.interpolate(img_id, size=(112,112))\n        latend_id = model.netArc(img_id_downsample)\n        latend_id = F.normalize(latend_id, p=2, dim=1)\n\n        video_swap(opt.video_path, latend_id, model, app, opt.output_path,temp_results_dir=opt.temp_path,\\\n            no_simswaplogo=opt.no_simswaplogo,use_mask=opt.use_mask,crop_size=crop_size)\n\n"
        },
        {
          "name": "test_video_swapspecific.py",
          "type": "blob",
          "size": 3.6357421875,
          "content": "'''\nAuthor: Naiyuan liu\nGithub: https://github.com/NNNNAI\nDate: 2021-11-23 17:03:58\nLastEditors: Naiyuan liu\nLastEditTime: 2021-11-24 19:00:42\nDescription: \n'''\n\nimport cv2\nimport torch\nimport fractions\nimport numpy as np\nfrom PIL import Image\nimport torch.nn.functional as F\nfrom torchvision import transforms\nfrom models.models import create_model\nfrom options.test_options import TestOptions\nfrom insightface_func.face_detect_crop_multi import Face_detect_crop\nfrom util.videoswap_specific import video_swap\nimport os\n\ndef lcm(a, b): return abs(a * b) / fractions.gcd(a, b) if a and b else 0\n\ntransformer = transforms.Compose([\n        transforms.ToTensor(),\n        #transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])\n\ntransformer_Arcface = transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])\n\n# detransformer = transforms.Compose([\n#         transforms.Normalize([0, 0, 0], [1/0.229, 1/0.224, 1/0.225]),\n#         transforms.Normalize([-0.485, -0.456, -0.406], [1, 1, 1])\n#     ])\n\n\nif __name__ == '__main__':\n    opt = TestOptions().parse()\n    pic_specific = opt.pic_specific_path\n    start_epoch, epoch_iter = 1, 0\n    crop_size = opt.crop_size\n\n    torch.nn.Module.dump_patches = True\n    if crop_size == 512:\n        opt.which_epoch = 550000\n        opt.name = '512'\n        mode = 'ffhq'\n    else:\n        mode = 'None'\n    model = create_model(opt)\n    model.eval()\n\n\n    app = Face_detect_crop(name='antelope', root='./insightface_func/models')\n    app.prepare(ctx_id= 0, det_thresh=0.6, det_size=(640,640),mode=mode)\n    with torch.no_grad():\n        pic_a = opt.pic_a_path\n        # img_a = Image.open(pic_a).convert('RGB')\n        img_a_whole = cv2.imread(pic_a)\n        img_a_align_crop, _ = app.get(img_a_whole,crop_size)\n        img_a_align_crop_pil = Image.fromarray(cv2.cvtColor(img_a_align_crop[0],cv2.COLOR_BGR2RGB)) \n        img_a = transformer_Arcface(img_a_align_crop_pil)\n        img_id = img_a.view(-1, img_a.shape[0], img_a.shape[1], img_a.shape[2])\n\n        # pic_b = opt.pic_b_path\n        # img_b_whole = cv2.imread(pic_b)\n        # img_b_align_crop, b_mat = app.get(img_b_whole,crop_size)\n        # img_b_align_crop_pil = Image.fromarray(cv2.cvtColor(img_b_align_crop,cv2.COLOR_BGR2RGB)) \n        # img_b = transformer(img_b_align_crop_pil)\n        # img_att = img_b.view(-1, img_b.shape[0], img_b.shape[1], img_b.shape[2])\n\n        # convert numpy to tensor\n        img_id = img_id.cuda()\n        # img_att = img_att.cuda()\n\n        #create latent id\n        img_id_downsample = F.interpolate(img_id, size=(112,112))\n        latend_id = model.netArc(img_id_downsample)\n        latend_id = F.normalize(latend_id, p=2, dim=1)\n\n\n        # The specific person to be swapped\n        specific_person_whole = cv2.imread(pic_specific)\n        specific_person_align_crop, _ = app.get(specific_person_whole,crop_size)\n        specific_person_align_crop_pil = Image.fromarray(cv2.cvtColor(specific_person_align_crop[0],cv2.COLOR_BGR2RGB)) \n        specific_person = transformer_Arcface(specific_person_align_crop_pil)\n        specific_person = specific_person.view(-1, specific_person.shape[0], specific_person.shape[1], specific_person.shape[2])\n        specific_person = specific_person.cuda()\n        specific_person_downsample = F.interpolate(specific_person, size=(112,112))\n        specific_person_id_nonorm = model.netArc(specific_person_downsample)\n\n        video_swap(opt.video_path, latend_id,specific_person_id_nonorm, opt.id_thres, \\\n            model, app, opt.output_path,temp_results_dir=opt.temp_path,no_simswaplogo=opt.no_simswaplogo,use_mask=opt.use_mask,crop_size=crop_size)\n\n"
        },
        {
          "name": "test_wholeimage_swap_multispecific.py",
          "type": "blob",
          "size": 6.849609375,
          "content": "'''\nAuthor: Naiyuan liu\nGithub: https://github.com/NNNNAI\nDate: 2021-11-23 17:03:58\nLastEditors: Naiyuan liu\nLastEditTime: 2021-11-24 19:19:22\nDescription: \n'''\n\nimport cv2\nimport torch\nimport fractions\nimport numpy as np\nfrom PIL import Image\nimport torch.nn.functional as F\nfrom torchvision import transforms\nfrom models.models import create_model\nfrom options.test_options import TestOptions\nfrom insightface_func.face_detect_crop_multi import Face_detect_crop\nfrom util.reverse2original import reverse2wholeimage\nimport os\nfrom util.add_watermark import watermark_image\nimport torch.nn as nn\nfrom util.norm import SpecificNorm\nimport glob\nfrom parsing_model.model import BiSeNet\n\ndef lcm(a, b): return abs(a * b) / fractions.gcd(a, b) if a and b else 0\n\ntransformer_Arcface = transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])\n\ndef _totensor(array):\n    tensor = torch.from_numpy(array)\n    img = tensor.transpose(0, 1).transpose(0, 2).contiguous()\n    return img.float().div(255)\n\ndef _toarctensor(array):\n    tensor = torch.from_numpy(array)\n    img = tensor.transpose(0, 1).transpose(0, 2).contiguous()\n    return img.float().div(255)\n\nif __name__ == '__main__':\n    opt = TestOptions().parse()\n\n    start_epoch, epoch_iter = 1, 0\n    crop_size = opt.crop_size\n\n    multisepcific_dir = opt.multisepcific_dir\n\n    torch.nn.Module.dump_patches = True\n\n    if crop_size == 512:\n        opt.which_epoch = 550000\n        opt.name = '512'\n        mode = 'ffhq'\n    else:\n        mode = 'None'\n\n    logoclass = watermark_image('./simswaplogo/simswaplogo.png')\n    model = create_model(opt)\n    model.eval()\n    mse = torch.nn.MSELoss().cuda()\n\n    spNorm =SpecificNorm()\n\n\n    app = Face_detect_crop(name='antelope', root='./insightface_func/models')\n    app.prepare(ctx_id= 0, det_thresh=0.6, det_size=(640,640),mode = mode)\n\n    with torch.no_grad():\n        # The specific person to be swapped(source)\n\n        source_specific_id_nonorm_list = []\n        source_path = os.path.join(multisepcific_dir,'SRC_*')\n        source_specific_images_path = sorted(glob.glob(source_path))\n\n        for source_specific_image_path in source_specific_images_path:\n            specific_person_whole = cv2.imread(source_specific_image_path)\n            specific_person_align_crop, _ = app.get(specific_person_whole,crop_size)\n            specific_person_align_crop_pil = Image.fromarray(cv2.cvtColor(specific_person_align_crop[0],cv2.COLOR_BGR2RGB)) \n            specific_person = transformer_Arcface(specific_person_align_crop_pil)\n            specific_person = specific_person.view(-1, specific_person.shape[0], specific_person.shape[1], specific_person.shape[2])\n            # convert numpy to tensor\n            specific_person = specific_person.cuda()\n            #create latent id\n            specific_person_downsample = F.interpolate(specific_person, size=(112,112))\n            specific_person_id_nonorm = model.netArc(specific_person_downsample)\n            source_specific_id_nonorm_list.append(specific_person_id_nonorm.clone())\n\n\n        # The person who provides id information (list)\n        target_id_norm_list = []\n        target_path = os.path.join(multisepcific_dir,'DST_*')\n        target_images_path = sorted(glob.glob(target_path))\n\n        for target_image_path in target_images_path:\n            img_a_whole = cv2.imread(target_image_path)\n            img_a_align_crop, _ = app.get(img_a_whole,crop_size)\n            img_a_align_crop_pil = Image.fromarray(cv2.cvtColor(img_a_align_crop[0],cv2.COLOR_BGR2RGB)) \n            img_a = transformer_Arcface(img_a_align_crop_pil)\n            img_id = img_a.view(-1, img_a.shape[0], img_a.shape[1], img_a.shape[2])\n            # convert numpy to tensor\n            img_id = img_id.cuda()\n            #create latent id\n            img_id_downsample = F.interpolate(img_id, size=(112,112))\n            latend_id = model.netArc(img_id_downsample)\n            latend_id = F.normalize(latend_id, p=2, dim=1)\n            target_id_norm_list.append(latend_id.clone())\n\n        assert len(target_id_norm_list) == len(source_specific_id_nonorm_list), \"The number of images in source and target directory must be same !!!\"\n\n        ############## Forward Pass ######################\n\n        pic_b = opt.pic_b_path\n        img_b_whole = cv2.imread(pic_b)\n\n        img_b_align_crop_list, b_mat_list = app.get(img_b_whole,crop_size)\n        # detect_results = None\n        swap_result_list = []\n\n        id_compare_values = [] \n        b_align_crop_tenor_list = []\n        for b_align_crop in img_b_align_crop_list:\n\n            b_align_crop_tenor = _totensor(cv2.cvtColor(b_align_crop,cv2.COLOR_BGR2RGB))[None,...].cuda()\n\n            b_align_crop_tenor_arcnorm = spNorm(b_align_crop_tenor)\n            b_align_crop_tenor_arcnorm_downsample = F.interpolate(b_align_crop_tenor_arcnorm, size=(112,112))\n            b_align_crop_id_nonorm = model.netArc(b_align_crop_tenor_arcnorm_downsample)\n\n            id_compare_values.append([])\n            for source_specific_id_nonorm_tmp in source_specific_id_nonorm_list:\n                id_compare_values[-1].append(mse(b_align_crop_id_nonorm,source_specific_id_nonorm_tmp).detach().cpu().numpy())\n            b_align_crop_tenor_list.append(b_align_crop_tenor)\n\n        id_compare_values_array = np.array(id_compare_values).transpose(1,0)\n        min_indexs = np.argmin(id_compare_values_array,axis=0)\n        min_value = np.min(id_compare_values_array,axis=0)\n\n        swap_result_list = [] \n        swap_result_matrix_list = []\n        swap_result_ori_pic_list = []\n\n        for tmp_index, min_index in enumerate(min_indexs):\n            if min_value[tmp_index] < opt.id_thres:\n                swap_result = model(None, b_align_crop_tenor_list[tmp_index], target_id_norm_list[min_index], None, True)[0]\n                swap_result_list.append(swap_result)\n                swap_result_matrix_list.append(b_mat_list[tmp_index])\n                swap_result_ori_pic_list.append(b_align_crop_tenor_list[tmp_index])\n            else:\n                pass\n\n        if len(swap_result_list) !=0:\n\n            if opt.use_mask:\n                n_classes = 19\n                net = BiSeNet(n_classes=n_classes)\n                net.cuda()\n                save_pth = os.path.join('./parsing_model/checkpoint', '79999_iter.pth')\n                net.load_state_dict(torch.load(save_pth))\n                net.eval()\n            else:\n                net =None\n        \n            reverse2wholeimage(swap_result_ori_pic_list, swap_result_list, swap_result_matrix_list, crop_size, img_b_whole, logoclass,\\\n                os.path.join(opt.output_path, 'result_whole_swap_multispecific.jpg'), opt.no_simswaplogo,pasring_model =net,use_mask=opt.use_mask, norm = spNorm)\n\n            print(' ')\n\n            print('************ Done ! ************')\n        \n        else:\n            print('The people you specified are not found on the picture: {}'.format(pic_b))\n"
        },
        {
          "name": "test_wholeimage_swapmulti.py",
          "type": "blob",
          "size": 3.53125,
          "content": "'''\nAuthor: Naiyuan liu\nGithub: https://github.com/NNNNAI\nDate: 2021-11-23 17:03:58\nLastEditors: Naiyuan liu\nLastEditTime: 2021-11-24 19:19:26\nDescription: \n'''\n\nimport cv2\nimport torch\nimport fractions\nimport numpy as np\nfrom PIL import Image\nimport torch.nn.functional as F\nfrom torchvision import transforms\nfrom models.models import create_model\nfrom options.test_options import TestOptions\nfrom insightface_func.face_detect_crop_multi import Face_detect_crop\nfrom util.reverse2original import reverse2wholeimage\nimport os\nfrom util.add_watermark import watermark_image\nfrom util.norm import SpecificNorm\nfrom parsing_model.model import BiSeNet\n\ndef lcm(a, b): return abs(a * b) / fractions.gcd(a, b) if a and b else 0\n\ntransformer_Arcface = transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])\n\ndef _totensor(array):\n    tensor = torch.from_numpy(array)\n    img = tensor.transpose(0, 1).transpose(0, 2).contiguous()\n    return img.float().div(255)\n\nif __name__ == '__main__':\n    opt = TestOptions().parse()\n\n    start_epoch, epoch_iter = 1, 0\n    crop_size = opt.crop_size\n\n    torch.nn.Module.dump_patches = True\n    if crop_size == 512:\n        opt.which_epoch = 550000\n        opt.name = '512'\n        mode = 'ffhq'\n    else:\n        mode = 'None'\n    logoclass = watermark_image('./simswaplogo/simswaplogo.png')\n    model = create_model(opt)\n    model.eval()\n    spNorm =SpecificNorm()\n\n    app = Face_detect_crop(name='antelope', root='./insightface_func/models')\n    app.prepare(ctx_id= 0, det_thresh=0.6, det_size=(640,640),mode=mode)\n\n    with torch.no_grad():\n        pic_a = opt.pic_a_path\n\n        img_a_whole = cv2.imread(pic_a)\n        img_a_align_crop, _ = app.get(img_a_whole,crop_size)\n        img_a_align_crop_pil = Image.fromarray(cv2.cvtColor(img_a_align_crop[0],cv2.COLOR_BGR2RGB)) \n        img_a = transformer_Arcface(img_a_align_crop_pil)\n        img_id = img_a.view(-1, img_a.shape[0], img_a.shape[1], img_a.shape[2])\n\n        # convert numpy to tensor\n        img_id = img_id.cuda()\n\n        #create latent id\n        img_id_downsample = F.interpolate(img_id, size=(112,112))\n        latend_id = model.netArc(img_id_downsample)\n        latend_id = F.normalize(latend_id, p=2, dim=1)\n\n\n        ############## Forward Pass ######################\n\n        pic_b = opt.pic_b_path\n        img_b_whole = cv2.imread(pic_b)\n\n        img_b_align_crop_list, b_mat_list = app.get(img_b_whole,crop_size)\n        # detect_results = None\n        swap_result_list = []\n        b_align_crop_tenor_list = []\n\n        for b_align_crop in img_b_align_crop_list:\n\n            b_align_crop_tenor = _totensor(cv2.cvtColor(b_align_crop,cv2.COLOR_BGR2RGB))[None,...].cuda()\n\n            swap_result = model(None, b_align_crop_tenor, latend_id, None, True)[0]\n            swap_result_list.append(swap_result)\n            b_align_crop_tenor_list.append(b_align_crop_tenor)\n\n\n        if opt.use_mask:\n            n_classes = 19\n            net = BiSeNet(n_classes=n_classes)\n            net.cuda()\n            save_pth = os.path.join('./parsing_model/checkpoint', '79999_iter.pth')\n            net.load_state_dict(torch.load(save_pth))\n            net.eval()\n        else:\n            net =None\n\n        reverse2wholeimage(b_align_crop_tenor_list,swap_result_list, b_mat_list, crop_size, img_b_whole, logoclass, \\\n            os.path.join(opt.output_path, 'result_whole_swapmulti.jpg'),opt.no_simswaplogo,pasring_model =net,use_mask=opt.use_mask, norm = spNorm)\n        print(' ')\n\n        print('************ Done ! ************')\n"
        },
        {
          "name": "test_wholeimage_swapsingle.py",
          "type": "blob",
          "size": 3.53515625,
          "content": "'''\nAuthor: Naiyuan liu\nGithub: https://github.com/NNNNAI\nDate: 2021-11-23 17:03:58\nLastEditors: Naiyuan liu\nLastEditTime: 2021-11-24 19:19:43\nDescription: \n'''\n\nimport cv2\nimport torch\nimport fractions\nimport numpy as np\nfrom PIL import Image\nimport torch.nn.functional as F\nfrom torchvision import transforms\nfrom models.models import create_model\nfrom options.test_options import TestOptions\nfrom insightface_func.face_detect_crop_single import Face_detect_crop\nfrom util.reverse2original import reverse2wholeimage\nimport os\nfrom util.add_watermark import watermark_image\nfrom util.norm import SpecificNorm\nfrom parsing_model.model import BiSeNet\n\ndef lcm(a, b): return abs(a * b) / fractions.gcd(a, b) if a and b else 0\n\ntransformer_Arcface = transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])\n\ndef _totensor(array):\n    tensor = torch.from_numpy(array)\n    img = tensor.transpose(0, 1).transpose(0, 2).contiguous()\n    return img.float().div(255)\nif __name__ == '__main__':\n    opt = TestOptions().parse()\n\n    start_epoch, epoch_iter = 1, 0\n    crop_size = opt.crop_size\n\n    torch.nn.Module.dump_patches = True\n    if crop_size == 512:\n        opt.which_epoch = 550000\n        opt.name = '512'\n        mode = 'ffhq'\n    else:\n        mode = 'None'\n    logoclass = watermark_image('./simswaplogo/simswaplogo.png')\n    model = create_model(opt)\n    model.eval()\n\n    spNorm =SpecificNorm()\n    app = Face_detect_crop(name='antelope', root='./insightface_func/models')\n    app.prepare(ctx_id= 0, det_thresh=0.6, det_size=(640,640),mode=mode)\n\n    with torch.no_grad():\n        pic_a = opt.pic_a_path\n\n        img_a_whole = cv2.imread(pic_a)\n        img_a_align_crop, _ = app.get(img_a_whole,crop_size)\n        img_a_align_crop_pil = Image.fromarray(cv2.cvtColor(img_a_align_crop[0],cv2.COLOR_BGR2RGB)) \n        img_a = transformer_Arcface(img_a_align_crop_pil)\n        img_id = img_a.view(-1, img_a.shape[0], img_a.shape[1], img_a.shape[2])\n\n        # convert numpy to tensor\n        img_id = img_id.cuda()\n\n        #create latent id\n        img_id_downsample = F.interpolate(img_id, size=(112,112))\n        latend_id = model.netArc(img_id_downsample)\n        latend_id = F.normalize(latend_id, p=2, dim=1)\n\n\n        ############## Forward Pass ######################\n\n        pic_b = opt.pic_b_path\n        img_b_whole = cv2.imread(pic_b)\n\n        img_b_align_crop_list, b_mat_list = app.get(img_b_whole,crop_size)\n        # detect_results = None\n        swap_result_list = []\n\n        b_align_crop_tenor_list = []\n\n        for b_align_crop in img_b_align_crop_list:\n\n            b_align_crop_tenor = _totensor(cv2.cvtColor(b_align_crop,cv2.COLOR_BGR2RGB))[None,...].cuda()\n\n            swap_result = model(None, b_align_crop_tenor, latend_id, None, True)[0]\n            swap_result_list.append(swap_result)\n            b_align_crop_tenor_list.append(b_align_crop_tenor)\n\n        if opt.use_mask:\n            n_classes = 19\n            net = BiSeNet(n_classes=n_classes)\n            net.cuda()\n            save_pth = os.path.join('./parsing_model/checkpoint', '79999_iter.pth')\n            net.load_state_dict(torch.load(save_pth))\n            net.eval()\n        else:\n            net =None\n\n        reverse2wholeimage(b_align_crop_tenor_list, swap_result_list, b_mat_list, crop_size, img_b_whole, logoclass, \\\n            os.path.join(opt.output_path, 'result_whole_swapsingle.jpg'), opt.no_simswaplogo,pasring_model =net,use_mask=opt.use_mask, norm = spNorm)\n\n        print(' ')\n\n        print('************ Done ! ************')\n"
        },
        {
          "name": "test_wholeimage_swapspecific.py",
          "type": "blob",
          "size": 5.1494140625,
          "content": "'''\nAuthor: Naiyuan liu\nGithub: https://github.com/NNNNAI\nDate: 2021-11-23 17:03:58\nLastEditors: Naiyuan liu\nLastEditTime: 2021-11-24 19:19:47\nDescription: \n'''\n\nimport cv2\nimport torch\nimport fractions\nimport numpy as np\nfrom PIL import Image\nimport torch.nn.functional as F\nfrom torchvision import transforms\nfrom models.models import create_model\nfrom options.test_options import TestOptions\nfrom insightface_func.face_detect_crop_multi import Face_detect_crop\nfrom util.reverse2original import reverse2wholeimage\nimport os\nfrom util.add_watermark import watermark_image\nimport torch.nn as nn\nfrom util.norm import SpecificNorm\nfrom parsing_model.model import BiSeNet\n\ndef lcm(a, b): return abs(a * b) / fractions.gcd(a, b) if a and b else 0\n\ntransformer_Arcface = transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])\n\ndef _totensor(array):\n    tensor = torch.from_numpy(array)\n    img = tensor.transpose(0, 1).transpose(0, 2).contiguous()\n    return img.float().div(255)\n\ndef _toarctensor(array):\n    tensor = torch.from_numpy(array)\n    img = tensor.transpose(0, 1).transpose(0, 2).contiguous()\n    return img.float().div(255)\n\nif __name__ == '__main__':\n    opt = TestOptions().parse()\n\n    start_epoch, epoch_iter = 1, 0\n    crop_size = opt.crop_size\n\n    torch.nn.Module.dump_patches = True\n    if crop_size == 512:\n        opt.which_epoch = 550000\n        opt.name = '512'\n        mode = 'ffhq'\n    else:\n        mode = 'None'\n    logoclass = watermark_image('./simswaplogo/simswaplogo.png')\n    model = create_model(opt)\n    model.eval()\n    mse = torch.nn.MSELoss().cuda()\n\n    spNorm =SpecificNorm()\n\n\n    app = Face_detect_crop(name='antelope', root='./insightface_func/models')\n    app.prepare(ctx_id= 0, det_thresh=0.6, det_size=(640,640),mode=mode)\n\n    pic_a = opt.pic_a_path\n    pic_specific = opt.pic_specific_path\n\n    # The person who provides id information \n    img_a_whole = cv2.imread(pic_a)\n    img_a_align_crop, _ = app.get(img_a_whole,crop_size)\n    img_a_align_crop_pil = Image.fromarray(cv2.cvtColor(img_a_align_crop[0],cv2.COLOR_BGR2RGB)) \n    img_a = transformer_Arcface(img_a_align_crop_pil)\n    img_id = img_a.view(-1, img_a.shape[0], img_a.shape[1], img_a.shape[2])\n\n    # convert numpy to tensor\n    img_id = img_id.cuda()\n\n    #create latent id\n    img_id_downsample = F.interpolate(img_id, size=(112,112))\n    latend_id = model.netArc(img_id_downsample)\n    latend_id = F.normalize(latend_id, p=2, dim=1)\n\n\n    # The specific person to be swapped\n    specific_person_whole = cv2.imread(pic_specific)\n    specific_person_align_crop, _ = app.get(specific_person_whole,crop_size)\n    specific_person_align_crop_pil = Image.fromarray(cv2.cvtColor(specific_person_align_crop[0],cv2.COLOR_BGR2RGB)) \n    specific_person = transformer_Arcface(specific_person_align_crop_pil)\n    specific_person = specific_person.view(-1, specific_person.shape[0], specific_person.shape[1], specific_person.shape[2])\n\n    # convert numpy to tensor\n    specific_person = specific_person.cuda()\n\n    #create latent id\n    specific_person_downsample = F.interpolate(specific_person, size=(112,112))\n    specific_person_id_nonorm = model.netArc(specific_person_downsample)\n    # specific_person_id_norm = F.normalize(specific_person_id_nonorm, p=2, dim=1)\n\n    ############## Forward Pass ######################\n\n    pic_b = opt.pic_b_path\n    img_b_whole = cv2.imread(pic_b)\n\n    img_b_align_crop_list, b_mat_list = app.get(img_b_whole,crop_size)\n    # detect_results = None\n    swap_result_list = []\n\n    id_compare_values = [] \n    b_align_crop_tenor_list = []\n    for b_align_crop in img_b_align_crop_list:\n\n        b_align_crop_tenor = _totensor(cv2.cvtColor(b_align_crop,cv2.COLOR_BGR2RGB))[None,...].cuda()\n\n        b_align_crop_tenor_arcnorm = spNorm(b_align_crop_tenor)\n        b_align_crop_tenor_arcnorm_downsample = F.interpolate(b_align_crop_tenor_arcnorm, size=(112,112))\n        b_align_crop_id_nonorm = model.netArc(b_align_crop_tenor_arcnorm_downsample)\n\n        id_compare_values.append(mse(b_align_crop_id_nonorm,specific_person_id_nonorm).detach().cpu().numpy())\n        b_align_crop_tenor_list.append(b_align_crop_tenor)\n\n    id_compare_values_array = np.array(id_compare_values)\n    min_index = np.argmin(id_compare_values_array)\n    min_value = id_compare_values_array[min_index]\n\n    if opt.use_mask:\n        n_classes = 19\n        net = BiSeNet(n_classes=n_classes)\n        net.cuda()\n        save_pth = os.path.join('./parsing_model/checkpoint', '79999_iter.pth')\n        net.load_state_dict(torch.load(save_pth))\n        net.eval()\n    else:\n        net =None\n\n    if min_value < opt.id_thres:\n\n        swap_result = model(None, b_align_crop_tenor_list[min_index], latend_id, None, True)[0]\n\n        reverse2wholeimage([b_align_crop_tenor_list[min_index]], [swap_result], [b_mat_list[min_index]], crop_size, img_b_whole, logoclass, \\\n            os.path.join(opt.output_path, 'result_whole_swapspecific.jpg'), opt.no_simswaplogo,pasring_model =net,use_mask=opt.use_mask, norm = spNorm)\n\n        print(' ')\n\n        print('************ Done ! ************')\n\n    else:\n        print('The person you specified is not found on the picture: {}'.format(pic_b))\n"
        },
        {
          "name": "train.ipynb",
          "type": "blob",
          "size": 7.2958984375,
          "content": "{\n  \"cells\": [\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"fC7QoKePuJWu\"\n      },\n      \"source\": [\n        \"#Training Demo\\n\",\n        \"This is a simple example for training the SimSwap 224*224 with VGGFace2-224.\\n\",\n        \"\\n\",\n        \"Code path: https://github.com/neuralchen/SimSwap\\n\",\n        \"If you like the SimSwap project, please star it!\\n\",\n        \"Paper path: https://arxiv.org/pdf/2106.06340v1.pdf or https://dl.acm.org/doi/10.1145/3394171.3413630\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": 1,\n      \"metadata\": {\n        \"id\": \"J8WrNaQHuUGC\"\n      },\n      \"outputs\": [\n        {\n          \"name\": \"stdout\",\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"Fri Apr 22 12:19:42 2022       \\n\",\n            \"+-----------------------------------------------------------------------------+\\n\",\n            \"| NVIDIA-SMI 456.71       Driver Version: 456.71       CUDA Version: 11.1     |\\n\",\n            \"|-------------------------------+----------------------+----------------------+\\n\",\n            \"| GPU  Name            TCC/WDDM | Bus-Id        Disp.A | Volatile Uncorr. ECC |\\n\",\n            \"| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\\n\",\n            \"|===============================+======================+======================|\\n\",\n            \"|   0  TITAN Xp           WDDM  | 00000000:01:00.0  On |                  N/A |\\n\",\n            \"| 23%   36C    P8    15W / 250W |   1135MiB / 12288MiB |      4%      Default |\\n\",\n            \"+-------------------------------+----------------------+----------------------+\\n\",\n            \"                                                                               \\n\",\n            \"+-----------------------------------------------------------------------------+\\n\",\n            \"| Processes:                                                                  |\\n\",\n            \"|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\\n\",\n            \"|        ID   ID                                                   Usage      |\\n\",\n            \"|=============================================================================|\\n\",\n            \"|    0   N/A  N/A      1232    C+G   Insufficient Permissions        N/A      |\\n\",\n            \"|    0   N/A  N/A      1240    C+G   Insufficient Permissions        N/A      |\\n\",\n            \"|    0   N/A  N/A      1528    C+G   ...y\\\\ShellExperienceHost.exe    N/A      |\\n\",\n            \"|    0   N/A  N/A      7296    C+G   Insufficient Permissions        N/A      |\\n\",\n            \"|    0   N/A  N/A      8280    C+G   C:\\\\Windows\\\\explorer.exe         N/A      |\\n\",\n            \"|    0   N/A  N/A      9532    C+G   ...artMenuExperienceHost.exe    N/A      |\\n\",\n            \"|    0   N/A  N/A      9896    C+G   ...5n1h2txyewy\\\\SearchApp.exe    N/A      |\\n\",\n            \"|    0   N/A  N/A     11040    C+G   ...2txyewy\\\\TextInputHost.exe    N/A      |\\n\",\n            \"|    0   N/A  N/A     11424    C+G   Insufficient Permissions        N/A      |\\n\",\n            \"|    0   N/A  N/A     13112    C+G   ...icrosoft VS Code\\\\Code.exe    N/A      |\\n\",\n            \"|    0   N/A  N/A     18720    C+G   ...-2.9.15\\\\GitHubDesktop.exe    N/A      |\\n\",\n            \"|    0   N/A  N/A     22996    C+G   ...bbwe\\\\Microsoft.Photos.exe    N/A      |\\n\",\n            \"|    0   N/A  N/A     23512    C+G   ...me\\\\Application\\\\chrome.exe    N/A      |\\n\",\n            \"|    0   N/A  N/A     25892    C+G   Insufficient Permissions        N/A      |\\n\",\n            \"+-----------------------------------------------------------------------------+\\n\"\n          ]\n        }\n      ],\n      \"source\": [\n        \"!nvidia-smi\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"Z6BtQIgWuoqt\"\n      },\n      \"source\": [\n        \"Installation\\n\",\n        \"All file changes made by this notebook are temporary. You can try to mount your own google drive to store files if you want.\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"wdQJ9d8N8Tnf\"\n      },\n      \"source\": [\n        \"#Get Scripts\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"9jZWwt97uvIe\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"!git clone https://github.com/neuralchen/SimSwap\\n\",\n        \"!cd SimSwap && git pull\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"ATLrrbso8Y-Y\"\n      },\n      \"source\": [\n        \"# Install Blocks\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"rwvbPhtOvZAL\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"!pip install googledrivedownloader\\n\",\n        \"!pip install timm==0.5.4\\n\",\n        \"!wget -P SimSwap/arcface_model https://github.com/neuralchen/SimSwap/releases/download/1.0/arcface_checkpoint.tar\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"hleVtHIJ_QUK\"\n      },\n      \"source\": [\n        \"#Download the Training Dataset\\n\",\n        \"We employ the cropped VGGFace2-224 dataset for this toy training demo.\\n\",\n        \"\\n\",\n        \"You can download the dataset from our google driver https://drive.google.com/file/d/19pWvdEHS-CEG6tW3PdxdtZ5QEymVjImc/view?usp=sharing\\n\",\n        \"\\n\",\n        \"***Please check the dataset in dir /content/TrainingData***\\n\",\n        \"\\n\",\n        \"***If dataset already exists in /content/TrainingData, please do not run blow scripts!***\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"h2tyjBl0Llxp\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"%mkdir /content/TrainingData\\n\",\n        \"!wget --load-cookies /tmp/cookies.txt \\\"https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id=19pWvdEHS-CEG6tW3PdxdtZ5QEymVjImc' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\\\\1\\\\n/p')&id=19pWvdEHS-CEG6tW3PdxdtZ5QEymVjImc\\\" -O /content/TrainingData/vggface2_crop_arcfacealign_224.tar && rm -rf /tmp/cookies.txt\\n\",\n        \"%cd /content/\\n\",\n        \"!tar -xzvf /content/TrainingData/vggface2_crop_arcfacealign_224.tar -C /content/TrainingData\\n \",\n        \"!rm /content/TrainingData/vggface2_crop_arcfacealign_224.tar\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"o5SNDWzA8LjJ\"\n      },\n      \"source\": [\n        \"#Trainig\\n\",\n        \"Batch size must larger than 1!\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"XCxHa4oW507s\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"%cd /content/SimSwap\\n\",\n        \"!ls\\n\",\n        \"!python train.py --name simswap224_test --gpu_ids 0 --dataset /content/TrainingData/vggface2_crop_arcfacealign_224 --Gdeep False\"\n      ]\n    }\n  ],\n  \"metadata\": {\n    \"accelerator\": \"GPU\",\n    \"colab\": {\n      \"collapsed_sections\": [],\n      \"name\": \"train.ipynb\",\n      \"provenance\": []\n    },\n    \"kernelspec\": {\n      \"display_name\": \"Python 3\",\n      \"name\": \"python3\"\n    },\n    \"language_info\": {\n      \"name\": \"python\",\n      \"version\": \"3.8.5\"\n    }\n  },\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0\n}\n"
        },
        {
          "name": "train.py",
          "type": "blob",
          "size": 11.998046875,
          "content": "#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n#############################################################\n# File: train.py\n# Created Date: Monday December 27th 2021\n# Author: Chen Xuanhong\n# Email: chenxuanhongzju@outlook.com\n# Last Modified:  Friday, 22nd April 2022 10:49:26 am\n# Modified By: Chen Xuanhong\n# Copyright (c) 2021 Shanghai Jiao Tong University\n#############################################################\n\nimport os\nimport time\nimport random\nimport argparse\nimport numpy as np\n\nimport torch\nimport torch.nn.functional as F\nfrom torch.backends import cudnn\nimport torch.utils.tensorboard as tensorboard\n\nfrom util import util\nfrom util.plot import plot_batch\n\nfrom models.projected_model import fsModel\nfrom data.data_loader_Swapping import GetLoader\n\ndef str2bool(v):\n    return v.lower() in ('true')\n\nclass TrainOptions:\n    def __init__(self):\n        self.parser = argparse.ArgumentParser()\n        self.initialized = False\n        \n    def initialize(self):\n        self.parser.add_argument('--name', type=str, default='simswap', help='name of the experiment. It decides where to store samples and models')\n        self.parser.add_argument('--gpu_ids', default='0')\n        self.parser.add_argument('--checkpoints_dir', type=str, default='./checkpoints', help='models are saved here')\n        self.parser.add_argument('--isTrain', type=str2bool, default='True')\n\n        # input/output sizes       \n        self.parser.add_argument('--batchSize', type=int, default=4, help='input batch size')       \n\n        # for displays\n        self.parser.add_argument('--use_tensorboard', type=str2bool, default='False')\n\n        # for training\n        self.parser.add_argument('--dataset', type=str, default=\"/path/to/VGGFace2\", help='path to the face swapping dataset')\n        self.parser.add_argument('--continue_train', type=str2bool, default='False', help='continue training: load the latest model')\n        self.parser.add_argument('--load_pretrain', type=str, default='./checkpoints/simswap224_test', help='load the pretrained model from the specified location')\n        self.parser.add_argument('--which_epoch', type=str, default='10000', help='which epoch to load? set to latest to use latest cached model')\n        self.parser.add_argument('--phase', type=str, default='train', help='train, val, test, etc')\n        self.parser.add_argument('--niter', type=int, default=10000, help='# of iter at starting learning rate')\n        self.parser.add_argument('--niter_decay', type=int, default=10000, help='# of iter to linearly decay learning rate to zero')\n        self.parser.add_argument('--beta1', type=float, default=0.0, help='momentum term of adam')\n        self.parser.add_argument('--lr', type=float, default=0.0004, help='initial learning rate for adam')\n        self.parser.add_argument('--Gdeep', type=str2bool, default='False')\n\n        # for discriminators         \n        self.parser.add_argument('--lambda_feat', type=float, default=10.0, help='weight for feature matching loss')\n        self.parser.add_argument('--lambda_id', type=float, default=30.0, help='weight for id loss')\n        self.parser.add_argument('--lambda_rec', type=float, default=10.0, help='weight for reconstruction loss') \n\n        self.parser.add_argument(\"--Arc_path\", type=str, default='arcface_model/arcface_checkpoint.tar', help=\"run ONNX model via TRT\")\n        self.parser.add_argument(\"--total_step\", type=int, default=1000000, help='total training step')\n        self.parser.add_argument(\"--log_frep\", type=int, default=200, help='frequence for printing log information')\n        self.parser.add_argument(\"--sample_freq\", type=int, default=1000, help='frequence for sampling')\n        self.parser.add_argument(\"--model_freq\", type=int, default=10000, help='frequence for saving the model')\n\n        \n\n\n        self.isTrain = True\n        \n    def parse(self, save=True):\n        if not self.initialized:\n            self.initialize()\n        self.opt = self.parser.parse_args()\n        self.opt.isTrain = self.isTrain   # train or test\n\n        args = vars(self.opt)\n\n        print('------------ Options -------------')\n        for k, v in sorted(args.items()):\n            print('%s: %s' % (str(k), str(v)))\n        print('-------------- End ----------------')\n\n        # save to the disk\n        if self.opt.isTrain:\n            expr_dir = os.path.join(self.opt.checkpoints_dir, self.opt.name)\n            util.mkdirs(expr_dir)\n            if save and not self.opt.continue_train:\n                file_name = os.path.join(expr_dir, 'opt.txt')\n                with open(file_name, 'wt') as opt_file:\n                    opt_file.write('------------ Options -------------\\n')\n                    for k, v in sorted(args.items()):\n                        opt_file.write('%s: %s\\n' % (str(k), str(v)))\n                    opt_file.write('-------------- End ----------------\\n')\n        return self.opt\n\n\nif __name__ == '__main__':\n\n    opt         = TrainOptions().parse()\n    iter_path   = os.path.join(opt.checkpoints_dir, opt.name, 'iter.txt')\n\n    sample_path = os.path.join(opt.checkpoints_dir, opt.name, 'samples')\n\n    if not os.path.exists(sample_path):\n        os.makedirs(sample_path)\n    \n    log_path = os.path.join(opt.checkpoints_dir, opt.name, 'summary')\n\n    if not os.path.exists(log_path):\n        os.makedirs(log_path)\n\n    if opt.continue_train:\n        try:\n            start_epoch, epoch_iter = np.loadtxt(iter_path , delimiter=',', dtype=int)\n        except:\n            start_epoch, epoch_iter = 1, 0\n        print('Resuming from epoch %d at iteration %d' % (start_epoch, epoch_iter))        \n    else:    \n        start_epoch, epoch_iter = 1, 0\n\n    os.environ['CUDA_VISIBLE_DEVICES'] = str(opt.gpu_ids)\n    print(\"GPU used : \", str(opt.gpu_ids))\n\n    \n    cudnn.benchmark = True\n\n    \n\n    model = fsModel()\n\n    model.initialize(opt)\n\n    #####################################################\n    if opt.use_tensorboard:\n        tensorboard_writer  = tensorboard.SummaryWriter(log_path)\n        logger              = tensorboard_writer\n        \n    log_name = os.path.join(opt.checkpoints_dir, opt.name, 'loss_log.txt')\n\n    with open(log_name, \"a\") as log_file:\n        now = time.strftime(\"%c\")\n        log_file.write('================ Training Loss (%s) ================\\n' % now)\n\n    optimizer_G, optimizer_D = model.optimizer_G, model.optimizer_D\n\n    loss_avg        = 0\n    refresh_count   = 0\n    imagenet_std    = torch.Tensor([0.229, 0.224, 0.225]).view(3,1,1)\n    imagenet_mean   = torch.Tensor([0.485, 0.456, 0.406]).view(3,1,1)\n\n    train_loader    = GetLoader(opt.dataset,opt.batchSize,8,1234)\n\n    randindex = [i for i in range(opt.batchSize)]\n    random.shuffle(randindex)\n\n    if not opt.continue_train:\n        start   = 0\n    else:\n        start   = int(opt.which_epoch)\n    total_step  = opt.total_step\n    import datetime\n    print(\"Start to train at %s\"%(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')))\n    \n    from util.logo_class import logo_class\n    logo_class.print_start_training()\n    model.netD.feature_network.requires_grad_(False)\n\n    # Training Cycle\n    for step in range(start, total_step):\n        model.netG.train()\n        for interval in range(2):\n            random.shuffle(randindex)\n            src_image1, src_image2  = train_loader.next()\n            \n            if step%2 == 0:\n                img_id = src_image2\n            else:\n                img_id = src_image2[randindex]\n\n            img_id_112      = F.interpolate(img_id,size=(112,112), mode='bicubic')\n            latent_id       = model.netArc(img_id_112)\n            latent_id       = F.normalize(latent_id, p=2, dim=1)\n            if interval:\n                \n                img_fake        = model.netG(src_image1, latent_id)\n                gen_logits,_    = model.netD(img_fake.detach(), None)\n                loss_Dgen       = (F.relu(torch.ones_like(gen_logits) + gen_logits)).mean()\n\n                real_logits,_   = model.netD(src_image2,None)\n                loss_Dreal      = (F.relu(torch.ones_like(real_logits) - real_logits)).mean()\n\n                loss_D          = loss_Dgen + loss_Dreal\n                optimizer_D.zero_grad()\n                loss_D.backward()\n                optimizer_D.step()\n            else:\n                \n                # model.netD.requires_grad_(True)\n                img_fake        = model.netG(src_image1, latent_id)\n                # G loss\n                gen_logits,feat = model.netD(img_fake, None)\n                \n                loss_Gmain      = (-gen_logits).mean()\n                img_fake_down   = F.interpolate(img_fake, size=(112,112), mode='bicubic')\n                latent_fake     = model.netArc(img_fake_down)\n                latent_fake     = F.normalize(latent_fake, p=2, dim=1)\n                loss_G_ID       = (1 - model.cosin_metric(latent_fake, latent_id)).mean()\n                real_feat       = model.netD.get_feature(src_image1)\n                feat_match_loss = model.criterionFeat(feat[\"3\"],real_feat[\"3\"]) \n                loss_G          = loss_Gmain + loss_G_ID * opt.lambda_id + feat_match_loss * opt.lambda_feat\n                \n\n                if step%2 == 0:\n                    #G_Rec\n                    loss_G_Rec  = model.criterionRec(img_fake, src_image1) * opt.lambda_rec\n                    loss_G      += loss_G_Rec\n\n                optimizer_G.zero_grad()\n                loss_G.backward()\n                optimizer_G.step()\n                \n\n        ############## Display results and errors ##########\n        ### print out errors\n        # Print out log info\n        if (step + 1) % opt.log_frep == 0:\n            # errors = {k: v.data.item() if not isinstance(v, int) else v for k, v in loss_dict.items()}\n            errors = {\n                \"G_Loss\":loss_Gmain.item(),\n                \"G_ID\":loss_G_ID.item(),\n                \"G_Rec\":loss_G_Rec.item(),\n                \"G_feat_match\":feat_match_loss.item(),\n                \"D_fake\":loss_Dgen.item(),\n                \"D_real\":loss_Dreal.item(),\n                \"D_loss\":loss_D.item()\n            }\n            if opt.use_tensorboard:\n                for tag, value in errors.items():\n                    logger.add_scalar(tag, value, step)\n            message = '( step: %d, ) ' % (step)\n            for k, v in errors.items():\n                message += '%s: %.3f ' % (k, v)\n\n            print(message)\n            with open(log_name, \"a\") as log_file:\n                log_file.write('%s\\n' % message)\n\n        ### display output images\n        if (step + 1) % opt.sample_freq == 0:\n            model.netG.eval()\n            with torch.no_grad():\n                imgs        = list()\n                zero_img    = (torch.zeros_like(src_image1[0,...]))\n                imgs.append(zero_img.cpu().numpy())\n                save_img    = ((src_image1.cpu())* imagenet_std + imagenet_mean).numpy()\n                for r in range(opt.batchSize):\n                    imgs.append(save_img[r,...])\n                arcface_112     = F.interpolate(src_image2,size=(112,112), mode='bicubic')\n                id_vector_src1  = model.netArc(arcface_112)\n                id_vector_src1  = F.normalize(id_vector_src1, p=2, dim=1)\n\n                for i in range(opt.batchSize):\n                    \n                    imgs.append(save_img[i,...])\n                    image_infer = src_image1[i, ...].repeat(opt.batchSize, 1, 1, 1)\n                    img_fake    = model.netG(image_infer, id_vector_src1).cpu()\n                    \n                    img_fake    = img_fake * imagenet_std\n                    img_fake    = img_fake + imagenet_mean\n                    img_fake    = img_fake.numpy()\n                    for j in range(opt.batchSize):\n                        imgs.append(img_fake[j,...])\n                print(\"Save test data\")\n                imgs = np.stack(imgs, axis = 0).transpose(0,2,3,1)\n                plot_batch(imgs, os.path.join(sample_path, 'step_'+str(step+1)+'.jpg'))\n\n        ### save latest model\n        if (step+1) % opt.model_freq==0:\n            print('saving the latest model (steps %d)' % (step+1))\n            model.save(step+1)            \n            np.savetxt(iter_path, (step+1, total_step), delimiter=',', fmt='%d')\n    wandb.finish()"
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}