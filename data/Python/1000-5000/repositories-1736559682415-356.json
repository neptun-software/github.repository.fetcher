{
  "metadata": {
    "timestamp": 1736559682415,
    "page": 356,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mindee/doctr",
      "stars": 4133,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".conda",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.8388671875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# Temp files\ndoctr/version.py\nlogs/\nwandb/\n.idea/\n\n# Checkpoints\n*.pt\n*.pb\n*.index\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.595703125,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: check-ast\n      - id: check-yaml\n        exclude: .conda\n      - id: check-toml\n      - id: check-json\n      - id: check-added-large-files\n        exclude: docs/images/\n      - id: end-of-file-fixer\n      - id: trailing-whitespace\n      - id: debug-statements\n      - id: check-merge-conflict\n      - id: no-commit-to-branch\n        args: ['--branch', 'main']\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.8.3\n    hooks:\n      - id: ruff\n        args: [ --fix ]\n      - id: ruff-format\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.09765625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\ncontact@mindee.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.5546875,
          "content": "# Contributing to docTR\n\nEverything you need to know to contribute efficiently to the project.\n\n## Codebase structure\n\n- [doctr](https://github.com/mindee/doctr/blob/main/doctr) - The package codebase\n- [tests](https://github.com/mindee/doctr/blob/main/tests) - Python unit tests\n- [docs](https://github.com/mindee/doctr/blob/main/docs) - Library documentation building\n- [scripts](https://github.com/mindee/doctr/blob/main/scripts) - Example scripts\n- [references](https://github.com/mindee/doctr/blob/main/references) - Reference training scripts\n- [demo](https://github.com/mindee/doctr/blob/main/demo) - Small demo app to showcase docTR capabilities\n- [api](https://github.com/mindee/doctr/blob/main/api) - A minimal template to deploy a REST API with docTR\n\n## Continuous Integration\n\nThis project uses the following integrations to ensure proper codebase maintenance:\n\n- [Github Worklow](https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow) - run jobs for package build and coverage\n- [Codecov](https://codecov.io/) - reports back coverage results\n\nAs a contributor, you will only have to ensure coverage of your code by adding appropriate unit testing of your code.\n\n## Feedback\n\n### Feature requests & bug report\n\nWhether you encountered a problem, or you have a feature suggestion, your input has value and can be used by contributors to reference it in their developments. For this purpose, we advise you to use Github [issues](https://github.com/mindee/doctr/issues).\n\nFirst, check whether the topic wasn't already covered in an open / closed issue. If not, feel free to open a new one! When doing so, use issue templates whenever possible and provide enough information for other contributors to jump in.\n\n### Questions\n\nIf you are wondering how to do something with docTR, or a more general question, you should consider checking out Github [discussions](https://github.com/mindee/doctr/discussions). See it as a Q&A forum, or the docTR-specific StackOverflow!\n\n## Developing docTR\n\n### Developer mode installation\n\nInstall all additional dependencies with the following command:\n\n```shell\npython -m pip install --upgrade pip\npip install -e '.[dev]'\npre-commit install\n```\n\n### Commits\n\n- **Code**: ensure to provide docstrings to your Python code. In doing so, please follow [Google-style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html) so it can ease the process of documentation later.\n- **Commit message**: please follow [Udacity guide](http://udacity.github.io/git-styleguide/)\n\n### Unit tests\n\nIn order to run the same unit tests as the CI workflows, you can run unittests locally:\n\n```shell\nmake test\n```\n\n### Code quality\n\nTo run all quality checks together\n\n```shell\nmake quality\n```\n\n#### Code style verification\n\nTo run all style checks together\n\n```shell\nmake style\n```\n\n### Modifying the documentation\n\nThe current documentation is built using `sphinx` thanks to our CI.\nYou can build the documentation locally:\n\n```shell\nmake docs-single-version\n```\n\nPlease note that files that have not been modified will not be rebuilt. If you want to force a complete rebuild, you can delete the `_build` directory. Additionally, you may need to clear your web browser's cache to see the modifications.\n\nYou can now open your local version of the documentation located at `docs/_build/index.html` in your browser\n\n## Let's connect\n\nShould you wish to connect somewhere else than on GitHub, feel free to join us on [Slack](https://join.slack.com/t/mindee-community/shared_invite/zt-uzgmljfl-MotFVfH~IdEZxjp~0zldww), where you will find a `#doctr` channel!\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.27734375,
          "content": "FROM nvidia/cuda:12.2.0-base-ubuntu22.04\n\nENV DEBIAN_FRONTEND=noninteractive\nENV LANG=C.UTF-8\nENV PYTHONUNBUFFERED=1\nENV PYTHONDONTWRITEBYTECODE=1\n\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    # - Other packages\n    build-essential \\\n    pkg-config \\\n    curl \\\n    wget \\\n    software-properties-common \\\n    unzip \\\n    git \\\n    # - Packages to build Python\n    tar make gcc zlib1g-dev libffi-dev libssl-dev liblzma-dev libbz2-dev libsqlite3-dev \\\n    # - Packages for docTR\n    libgl1-mesa-dev libsm6 libxext6 libxrender-dev libpangocairo-1.0-0 \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install Python\nARG PYTHON_VERSION=3.10.13\n\nRUN wget http://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz && \\\n    tar -zxf Python-$PYTHON_VERSION.tgz && \\\n    cd Python-$PYTHON_VERSION && \\\n    mkdir /opt/python/ && \\\n    ./configure --prefix=/opt/python && \\\n    make && \\\n    make install && \\\n    cd .. && \\\n    rm Python-$PYTHON_VERSION.tgz && \\\n    rm -r Python-$PYTHON_VERSION\n\nENV PATH=/opt/python/bin:$PATH\n\n# Install docTR\nARG FRAMEWORK=tf\nARG DOCTR_REPO='mindee/doctr'\nARG DOCTR_VERSION=main\nRUN pip3 install -U pip setuptools wheel && \\\n    pip3 install \"python-doctr[$FRAMEWORK]@git+https://github.com/$DOCTR_REPO.git@$DOCTR_VERSION\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0703125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2022 Mindee\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.794921875,
          "content": ".PHONY: quality style test test-common test-tf test-torch docs-single-version docs\n# this target runs checks on all files\nquality:\n\truff check .\n\tmypy doctr/\n\n# this target runs checks on all files and potentially modifies some of them\nstyle:\n\truff format .\n\truff check --fix .\n\n# Run tests for the library\ntest:\n\tcoverage run -m pytest tests/common/ -rs\n\tUSE_TF='1' coverage run -m pytest tests/tensorflow/ -rs\n\tUSE_TORCH='1' coverage run -m pytest tests/pytorch/ -rs\n\ntest-common:\n\tcoverage run -m pytest tests/common/ -rs\n\ntest-tf:\n\tUSE_TF='1' coverage run -m pytest tests/tensorflow/ -rs\n\ntest-torch:\n\tUSE_TORCH='1' coverage run -m pytest tests/pytorch/ -rs\n\n# Check that docs can build\ndocs-single-version:\n\tsphinx-build docs/source docs/_build -a\n\n# Check that docs can build\ndocs:\n\tcd docs && bash build.sh\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.732421875,
          "content": "<p align=\"center\">\n  <img src=\"https://github.com/mindee/doctr/raw/main/docs/images/Logo_doctr.gif\" width=\"40%\">\n</p>\n\n[![Slack Icon](https://img.shields.io/badge/Slack-Community-4A154B?style=flat-square&logo=slack&logoColor=white)](https://slack.mindee.com) [![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](LICENSE) ![Build Status](https://github.com/mindee/doctr/workflows/builds/badge.svg) [![Docker Images](https://img.shields.io/badge/Docker-4287f5?style=flat&logo=docker&logoColor=white)](https://github.com/mindee/doctr/pkgs/container/doctr) [![codecov](https://codecov.io/gh/mindee/doctr/branch/main/graph/badge.svg?token=577MO567NM)](https://codecov.io/gh/mindee/doctr) [![CodeFactor](https://www.codefactor.io/repository/github/mindee/doctr/badge?s=bae07db86bb079ce9d6542315b8c6e70fa708a7e)](https://www.codefactor.io/repository/github/mindee/doctr) [![Codacy Badge](https://api.codacy.com/project/badge/Grade/340a76749b634586a498e1c0ab998f08)](https://app.codacy.com/gh/mindee/doctr?utm_source=github.com&utm_medium=referral&utm_content=mindee/doctr&utm_campaign=Badge_Grade) [![Doc Status](https://github.com/mindee/doctr/workflows/doc-status/badge.svg)](https://mindee.github.io/doctr) [![Pypi](https://img.shields.io/badge/pypi-v0.10.0-blue.svg)](https://pypi.org/project/python-doctr/) [![Hugging Face Spaces](https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue)](https://huggingface.co/spaces/mindee/doctr) [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/mindee/notebooks/blob/main/doctr/quicktour.ipynb) [![Gurubase](https://img.shields.io/badge/Gurubase-Ask%20docTR%20Guru-006BFF)](https://gurubase.io/g/doctr)\n\n\n**Optical Character Recognition made seamless & accessible to anyone, powered by TensorFlow 2 & PyTorch**\n\nWhat you can expect from this repository:\n\n- efficient ways to parse textual information (localize and identify each word) from your documents\n- guidance on how to integrate this in your current architecture\n\n![OCR_example](https://github.com/mindee/doctr/raw/main/docs/images/ocr.png)\n\n## Quick Tour\n\n### Getting your pretrained model\n\nEnd-to-End OCR is achieved in docTR using a two-stage approach: text detection (localizing words), then text recognition (identify all characters in the word).\nAs such, you can select the architecture used for [text detection](https://mindee.github.io/doctr/latest/modules/models.html#doctr-models-detection), and the one for [text recognition](https://mindee.github.io/doctr/latest//modules/models.html#doctr-models-recognition) from the list of available implementations.\n\n```python\nfrom doctr.models import ocr_predictor\n\nmodel = ocr_predictor(det_arch='db_resnet50', reco_arch='crnn_vgg16_bn', pretrained=True)\n```\n\n### Reading files\n\nDocuments can be interpreted from PDF or images:\n\n```python\nfrom doctr.io import DocumentFile\n# PDF\npdf_doc = DocumentFile.from_pdf(\"path/to/your/doc.pdf\")\n# Image\nsingle_img_doc = DocumentFile.from_images(\"path/to/your/img.jpg\")\n# Webpage (requires `weasyprint` to be installed)\nwebpage_doc = DocumentFile.from_url(\"https://www.yoursite.com\")\n# Multiple page images\nmulti_img_doc = DocumentFile.from_images([\"path/to/page1.jpg\", \"path/to/page2.jpg\"])\n```\n\n### Putting it together\n\nLet's use the default pretrained model for an example:\n\n```python\nfrom doctr.io import DocumentFile\nfrom doctr.models import ocr_predictor\n\nmodel = ocr_predictor(pretrained=True)\n# PDF\ndoc = DocumentFile.from_pdf(\"path/to/your/doc.pdf\")\n# Analyze\nresult = model(doc)\n```\n\n### Dealing with rotated documents\n\nShould you use docTR on documents that include rotated pages, or pages with multiple box orientations,\nyou have multiple options to handle it:\n\n- If you only use straight document pages with straight words (horizontal, same reading direction),\nconsider passing `assume_straight_boxes=True` to the ocr_predictor. It will directly fit straight boxes\non your page and return straight boxes, which makes it the fastest option.\n\n- If you want the predictor to output straight boxes (no matter the orientation of your pages, the final localizations\nwill be converted to straight boxes), you need to pass `export_as_straight_boxes=True` in the predictor. Otherwise, if `assume_straight_pages=False`, it will return rotated bounding boxes (potentially with an angle of 0°).\n\nIf both options are set to False, the predictor will always fit and return rotated boxes.\n\nTo interpret your model's predictions, you can visualize them interactively as follows:\n\n```python\n# Display the result (requires matplotlib & mplcursors to be installed)\nresult.show()\n```\n\n![Visualization sample](https://github.com/mindee/doctr/raw/main/docs/images/doctr_example_script.gif)\n\nOr even rebuild the original document from its predictions:\n\n```python\nimport matplotlib.pyplot as plt\n\nsynthetic_pages = result.synthesize()\nplt.imshow(synthetic_pages[0]); plt.axis('off'); plt.show()\n```\n\n![Synthesis sample](https://github.com/mindee/doctr/raw/main/docs/images/synthesized_sample.png)\n\nThe `ocr_predictor` returns a `Document` object with a nested structure (with `Page`, `Block`, `Line`, `Word`, `Artefact`).\nTo get a better understanding of our document model, check our [documentation](https://mindee.github.io/doctr/modules/io.html#document-structure):\n\nYou can also export them as a nested dict, more appropriate for JSON format:\n\n```python\njson_output = result.export()\n```\n\n### Use the KIE predictor\n\nThe KIE predictor is a more flexible predictor compared to OCR as your detection model can detect multiple classes in a document. For example, you can have a detection model to detect just dates and addresses in a document.\n\nThe KIE predictor makes it possible to use detector with multiple classes with a recognition model and to have the whole pipeline already setup for you.\n\n```python\nfrom doctr.io import DocumentFile\nfrom doctr.models import kie_predictor\n\n# Model\nmodel = kie_predictor(det_arch='db_resnet50', reco_arch='crnn_vgg16_bn', pretrained=True)\n# PDF\ndoc = DocumentFile.from_pdf(\"path/to/your/doc.pdf\")\n# Analyze\nresult = model(doc)\n\npredictions = result.pages[0].predictions\nfor class_name in predictions.keys():\n    list_predictions = predictions[class_name]\n    for prediction in list_predictions:\n        print(f\"Prediction for {class_name}: {prediction}\")\n```\n\nThe KIE predictor results per page are in a dictionary format with each key representing a class name and it's value are the predictions for that class.\n\n### If you are looking for support from the Mindee team\n\n[![Bad OCR test detection image asking the developer if they need help](https://github.com/mindee/doctr/raw/main/docs/images/doctr-need-help.png)](https://mindee.com/product/doctr)\n\n## Installation\n\n### Prerequisites\n\nPython 3.10 (or higher) and [pip](https://pip.pypa.io/en/stable/) are required to install docTR.\n\n### Latest release\n\nYou can then install the latest release of the package using [pypi](https://pypi.org/project/python-doctr/) as follows:\n\n```shell\npip install python-doctr\n```\n\n> :warning: Please note that the basic installation is not standalone, as it does not provide a deep learning framework, which is required for the package to run.\n\nWe try to keep framework-specific dependencies to a minimum. You can install framework-specific builds as follows:\n\n```shell\n# for TensorFlow\npip install \"python-doctr[tf]\"\n# for PyTorch\npip install \"python-doctr[torch]\"\n# optional dependencies for visualization, html, and contrib modules can be installed as follows:\npip install \"python-doctr[torch,viz,html,contib]\"\n```\n\nFor MacBooks with M1 chip, you will need some additional packages or specific versions:\n\n- TensorFlow 2: [metal plugin](https://developer.apple.com/metal/tensorflow-plugin/)\n- PyTorch: [version >= 2.0.0](https://pytorch.org/get-started/locally/#start-locally)\n\n### Developer mode\n\nAlternatively, you can install it from source, which will require you to install [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).\nFirst clone the project repository:\n\n```shell\ngit clone https://github.com/mindee/doctr.git\npip install -e doctr/.\n```\n\nAgain, if you prefer to avoid the risk of missing dependencies, you can install the TensorFlow or the PyTorch build:\n\n```shell\n# for TensorFlow\npip install -e doctr/.[tf]\n# for PyTorch\npip install -e doctr/.[torch]\n```\n\n## Models architectures\n\nCredits where it's due: this repository is implementing, among others, architectures from published research papers.\n\n### Text Detection\n\n- DBNet: [Real-time Scene Text Detection with Differentiable Binarization](https://arxiv.org/pdf/1911.08947.pdf).\n- LinkNet: [LinkNet: Exploiting Encoder Representations for Efficient Semantic Segmentation](https://arxiv.org/pdf/1707.03718.pdf)\n- FAST: [FAST: Faster Arbitrarily-Shaped Text Detector with Minimalist Kernel Representation](https://arxiv.org/pdf/2111.02394.pdf)\n\n### Text Recognition\n\n- CRNN: [An End-to-End Trainable Neural Network for Image-based Sequence Recognition and Its Application to Scene Text Recognition](https://arxiv.org/pdf/1507.05717.pdf).\n- SAR: [Show, Attend and Read:A Simple and Strong Baseline for Irregular Text Recognition](https://arxiv.org/pdf/1811.00751.pdf).\n- MASTER: [MASTER: Multi-Aspect Non-local Network for Scene Text Recognition](https://arxiv.org/pdf/1910.02562.pdf).\n- ViTSTR: [Vision Transformer for Fast and Efficient Scene Text Recognition](https://arxiv.org/pdf/2105.08582.pdf).\n- PARSeq: [Scene Text Recognition with Permuted Autoregressive Sequence Models](https://arxiv.org/pdf/2207.06966).\n\n## More goodies\n\n### Documentation\n\nThe full package documentation is available [here](https://mindee.github.io/doctr/) for detailed specifications.\n\n### Demo app\n\nA minimal demo app is provided for you to play with our end-to-end OCR models!\n\n![Demo app](https://github.com/mindee/doctr/raw/main/docs/images/demo_update.png)\n\n#### Live demo\n\nCourtesy of :hugs: [Hugging Face](https://huggingface.co/) :hugs:, docTR has now a fully deployed version available on [Spaces](https://huggingface.co/spaces)!\nCheck it out [![Hugging Face Spaces](https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue)](https://huggingface.co/spaces/mindee/doctr)\n\n#### Running it locally\n\nIf you prefer to use it locally, there is an extra dependency ([Streamlit](https://streamlit.io/)) that is required.\n\n##### Tensorflow version\n\n```shell\npip install -r demo/tf-requirements.txt\n```\n\nThen run your app in your default browser with:\n\n```shell\nUSE_TF=1 streamlit run demo/app.py\n```\n\n##### PyTorch version\n\n```shell\npip install -r demo/pt-requirements.txt\n```\n\nThen run your app in your default browser with:\n\n```shell\nUSE_TORCH=1 streamlit run demo/app.py\n```\n\n#### TensorFlow.js\n\nInstead of having your demo actually running Python, you would prefer to run everything in your web browser?\nCheck out our [TensorFlow.js demo](https://github.com/mindee/doctr-tfjs-demo) to get started!\n\n![TFJS demo](https://github.com/mindee/doctr/raw/main/docs/images/demo_illustration_mini.png)\n\n### Docker container\n\nWe offer Docker container support for easy testing and deployment. [Here are the available docker tags.](https://github.com/mindee/doctr/pkgs/container/doctr).\n\n#### Using GPU with docTR Docker Images\n\nThe docTR Docker images are GPU-ready and based on CUDA `12.2`. Make sure your host is **at least `12.2`**, otherwise Torch or TensorFlow won't be able to initialize the GPU.\nPlease ensure that Docker is configured to use your GPU.\n\nTo verify and configure GPU support for Docker, please follow the instructions provided in the [NVIDIA Container Toolkit Installation Guide](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html).\n\nOnce Docker is configured to use GPUs, you can run docTR Docker containers with GPU support:\n\n```shell\ndocker run -it --gpus all ghcr.io/mindee/doctr:torch-py3.9.18-2024-10 bash\n```\n\n#### Available Tags\n\nThe Docker images for docTR follow a specific tag nomenclature: `<deps>-py<python_version>-<doctr_version|YYYY-MM>`. Here's a breakdown of the tag structure:\n\n- `<deps>`: `tf`, `torch`, `tf-viz-html-contrib` or `torch-viz-html-contrib`.\n- `<python_version>`: `3.9.18`, `3.10.13` or `3.11.8`.\n- `<doctr_version>`: a tag >= `v0.11.0`\n- `<YYYY-MM>`: e.g. `2014-10`\n\nHere are examples of different image tags:\n\n| Tag                        | Description                                       |\n|----------------------------|---------------------------------------------------|\n| `tf-py3.10.13-v0.11.0`       | TensorFlow version `3.10.13` with docTR `v0.11.0`. |\n| `torch-viz-html-contrib-py3.11.8-2024-10`       | Torch with extra dependencies version `3.11.8` from latest commit on `main` in `2024-10`. |\n| `torch-py3.11.8-2024-10`| PyTorch version `3.11.8` from latest commit on `main` in `2024-10`. |\n\n#### Building Docker Images Locally\n\nYou can also build docTR Docker images locally on your computer.\n\n```shell\ndocker build -t doctr .\n```\n\nYou can specify custom Python versions and docTR versions using build arguments. For example, to build a docTR image with TensorFlow, Python version `3.9.10`, and docTR version `v0.7.0`, run the following command:\n\n```shell\ndocker build -t doctr --build-arg FRAMEWORK=tf --build-arg PYTHON_VERSION=3.9.10 --build-arg DOCTR_VERSION=v0.7.0 .\n```\n\n### Example script\n\nAn example script is provided for a simple documentation analysis of a PDF or image file:\n\n```shell\npython scripts/analyze.py path/to/your/doc.pdf\n```\n\nAll script arguments can be checked using `python scripts/analyze.py --help`\n\n### Minimal API integration\n\nLooking to integrate docTR into your API? Here is a template to get you started with a fully working API using the wonderful [FastAPI](https://github.com/tiangolo/fastapi) framework.\n\n#### Deploy your API locally\n\nSpecific dependencies are required to run the API template, which you can install as follows:\n\n```shell\ncd api/\npip install poetry\nmake lock\npip install -r requirements.txt\n```\n\nYou can now run your API locally:\n\n```shell\nuvicorn --reload --workers 1 --host 0.0.0.0 --port=8002 --app-dir api/ app.main:app\n```\n\nAlternatively, you can run the same server on a docker container if you prefer using:\n\n```shell\nPORT=8002 docker-compose up -d --build\n```\n\n#### What you have deployed\n\nYour API should now be running locally on your port 8002. Access your automatically-built documentation at [http://localhost:8002/redoc](http://localhost:8002/redoc) and enjoy your three functional routes (\"/detection\", \"/recognition\", \"/ocr\", \"/kie\"). Here is an example with Python to send a request to the OCR route:\n\n```python\nimport requests\n\nparams = {\"det_arch\": \"db_resnet50\", \"reco_arch\": \"crnn_vgg16_bn\"}\n\nwith open('/path/to/your/doc.jpg', 'rb') as f:\n    files = [  # application/pdf, image/jpeg, image/png supported\n        (\"files\", (\"doc.jpg\", f.read(), \"image/jpeg\")),\n    ]\nprint(requests.post(\"http://localhost:8080/ocr\", params=params, files=files).json())\n```\n\n### Example notebooks\n\nLooking for more illustrations of docTR features? You might want to check the [Jupyter notebooks](https://github.com/mindee/doctr/tree/main/notebooks) designed to give you a broader overview.\n\n## Citation\n\nIf you wish to cite this project, feel free to use this [BibTeX](http://www.bibtex.org/) reference:\n\n```bibtex\n@misc{doctr2021,\n    title={docTR: Document Text Recognition},\n    author={Mindee},\n    year={2021},\n    publisher = {GitHub},\n    howpublished = {\\url{https://github.com/mindee/doctr}}\n}\n```\n\n## Contributing\n\nIf you scrolled down to this section, you most likely appreciate open source. Do you feel like extending the range of our supported characters? Or perhaps submitting a paper implementation? Or contributing in any other way?\n\nYou're in luck, we compiled a short guide (cf. [`CONTRIBUTING`](https://mindee.github.io/doctr/contributing/contributing.html)) for you to easily do so!\n\n## License\n\nDistributed under the Apache 2.0 License. See [`LICENSE`](https://github.com/mindee/doctr?tab=Apache-2.0-1-ov-file#readme) for more information.\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "doctr",
          "type": "tree",
          "content": null
        },
        {
          "name": "notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 5.8916015625,
          "content": "[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"python-doctr\"\ndescription = \"Document Text Recognition (docTR): deep Learning for high-performance OCR on documents.\"\nauthors = [{name = \"Mindee\", email = \"contact@mindee.com\"}]\nmaintainers = [\n    {name = \"François-Guillaume Fernandez\"},\n    {name = \"Charles Gaillard\"},\n    {name = \"Olivier Dulcy\"},\n    {name = \"Felix Dittrich\"},\n]\nreadme = \"README.md\"\nrequires-python = \">=3.10.0,<4\"\nlicense = {file = \"LICENSE\"}\nkeywords=[\"OCR\", \"deep learning\", \"computer vision\", \"tensorflow\", \"pytorch\", \"text detection\", \"text recognition\"]\nclassifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Education\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n        \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n]\ndynamic = [\"version\"]\ndependencies = [\n    # For proper typing, mypy needs numpy>=1.20.0 (cf. https://github.com/numpy/numpy/pull/16515)\n    # Additional typing support is brought by numpy>=1.22.4, but core build sticks to >=1.16.0\n    \"numpy>=1.16.0,<3.0.0\",\n    \"scipy>=1.4.0,<2.0.0\",\n    \"h5py>=3.1.0,<4.0.0\",\n    \"opencv-python>=4.5.0,<5.0.0\",\n    \"pypdfium2>=4.11.0,<5.0.0\",\n    \"pyclipper>=1.2.0,<2.0.0\",\n    \"shapely>=1.6.0,<3.0.0\",\n    \"langdetect>=1.0.9,<2.0.0\",\n    \"rapidfuzz>=3.0.0,<4.0.0\",\n    \"huggingface-hub>=0.20.0,<1.0.0\",\n    \"Pillow>=9.2.0\",\n    \"defusedxml>=0.7.0\",\n    \"anyascii>=0.3.2\",\n    \"tqdm>=4.30.0\",\n]\n\n[project.optional-dependencies]\ntf = [\n    # cf. https://github.com/mindee/doctr/pull/1461\n    \"tensorflow[and-cuda]>=2.15.0,<3.0.0; sys_platform == 'linux'\",\n    \"tensorflow>=2.15.0,<3.0.0; sys_platform != 'linux'\", # TensorFlow compatible for macOS and Windows\n    \"tf-keras>=2.15.0,<3.0.0\",  # Keep keras 2 compatibility\n    \"tf2onnx>=1.16.0,<2.0.0\",  # cf. https://github.com/onnx/tensorflow-onnx/releases/tag/v1.16.0\n]\ntorch = [\n    \"torch>=2.0.0,<3.0.0\",\n    \"torchvision>=0.15.0\",\n    \"onnx>=1.12.0,<3.0.0\",\n]\nhtml = [\n    \"weasyprint>=55.0\",\n]\nviz = [\n    \"matplotlib>=3.1.0\",\n    \"mplcursors>=0.3\",\n]\ncontrib = [\n    \"onnxruntime>=1.11.0\",\n]\ntesting = [\n    \"pytest>=5.3.2\",\n    \"coverage[toml]>=4.5.4\",\n    \"onnxruntime>=1.11.0\",\n    \"requests>=2.20.0\",\n    \"psutil>=5.9.5\"\n]\nquality = [\n    \"ruff>=0.1.5\",\n    \"mypy>=0.812\",\n    \"pre-commit>=2.17.0\",\n]\ndocs = [\n    \"sphinx>=3.0.0,!=3.5.0\",\n    \"sphinxemoji>=0.1.8\",\n    \"sphinx-copybutton>=0.3.1\",\n    \"docutils<0.22\",\n    \"recommonmark>=0.7.1\",\n    \"sphinx-markdown-tables>=0.0.15\",\n    \"sphinx-tabs>=3.3.0\",\n    \"furo>=2022.3.4\",\n]\ndev = [\n    # Tensorflow\n    # cf. https://github.com/mindee/doctr/pull/1461\n    \"tensorflow[and-cuda]>=2.15.0,<3.0.0; sys_platform == 'linux'\",\n    \"tensorflow>=2.15.0,<3.0.0; sys_platform != 'linux'\", # TensorFlow compatible for macOS and Windows\n    \"tf-keras>=2.15.0,<3.0.0\",  # Keep keras 2 compatibility\n    \"tf2onnx>=1.16.0,<2.0.0\",  # cf. https://github.com/onnx/tensorflow-onnx/releases/tag/v1.16.0\n    # PyTorch\n    \"torch>=2.0.0,<3.0.0\",\n    \"torchvision>=0.15.0\",\n    \"onnx>=1.12.0,<3.0.0\",\n    # Extras\n    \"weasyprint>=55.0\",\n    \"matplotlib>=3.1.0\",\n    \"mplcursors>=0.3\",\n    # Testing\n    \"pytest>=5.3.2\",\n    \"coverage[toml]>=4.5.4\",\n    \"onnxruntime>=1.11.0\",\n    \"requests>=2.20.0\",\n    \"psutil>=5.9.5\",\n    # Quality\n    \"ruff>=0.3.0\",\n    \"mypy>=1.0\",\n    \"pre-commit>=3.0.0\",\n    # Docs\n    \"sphinx>=3.0.0,!=3.5.0\",\n    \"sphinxemoji>=0.1.8\",\n    \"sphinx-copybutton>=0.3.1\",\n    \"docutils<0.22\",\n    \"recommonmark>=0.7.1\",\n    \"sphinx-markdown-tables>=0.0.15\",\n    \"sphinx-tabs>=3.3.0\",\n    \"furo>=2022.3.4\",\n]\n\n[project.urls]\ndocumentation = \"https://mindee.github.io/doctr\"\nrepository = \"https://github.com/mindee/doctr\"\ntracker = \"https://github.com/mindee/doctr/issues\"\nchangelog = \"https://mindee.github.io/doctr/changelog.html\"\n\n[tool.setuptools]\nzip-safe = true\n\n[tool.setuptools.packages.find]\nexclude = [\"api*\", \"demo*\", \"docs*\", \"notebooks*\", \"references*\", \"scripts*\", \"tests*\"]\n\n[tool.setuptools.package-data]\ndoctr = [\"py.typed\"]\n\n[tool.mypy]\nfiles = \"doctr/\"\nshow_error_codes = true\npretty = true\nwarn_unused_ignores = true\nwarn_redundant_casts = true\nno_implicit_optional = true\ncheck_untyped_defs = true\nimplicit_reexport = false\n\n[[tool.mypy.overrides]]\nmodule = [\n\t\"anyascii.*\",\n\t\"tensorflow.*\",\n    \"keras.*\",\n\t\"torchvision.*\",\n    \"onnxruntime.*\",\n\t\"PIL.*\",\n\t\"tqdm.*\",\n\t\"scipy.*\",\n\t\"cv2.*\",\n\t\"h5py.*\",\n\t\"matplotlib.*\",\n\t\"pyclipper.*\",\n\t\"shapely.*\",\n\t\"tf2onnx.*\",\n\t\"mplcursors.*\",\n\t\"defusedxml.*\",\n\t\"weasyprint.*\",\n\t\"huggingface_hub.*\",\n\t\"pypdfium2.*\",\n\t\"rapidfuzz.*\",\n\t\"langdetect.*\",\n]\nignore_missing_imports = true\n\n[tool.ruff]\nexclude = [\".git\", \"venv*\", \"build\", \"**/__init__.py\"]\nline-length = 120\ntarget-version = \"py310\"\npreview=true\n\n[tool.ruff.lint]\nselect = [\n    # https://docs.astral.sh/ruff/rules/\n    \"E\", \"W\", \"F\", \"I\", \"N\", \"Q\", \"C4\", \"T10\", \"LOG\",\n    \"D101\", \"D103\", \"D201\",\"D202\",\"D207\",\"D208\",\"D214\",\"D215\",\"D300\",\"D301\",\"D417\", \"D419\", \"D207\"  # pydocstyle\n]\nignore = [\"E402\", \"E203\", \"F403\", \"E731\", \"N812\", \"N817\", \"C408\", \"LOG015\"]\n\n[tool.ruff.lint.isort]\nknown-first-party = [\"doctr\", \"app\", \"utils\"]\nknown-third-party = [\"tensorflow\", \"keras\", \"torch\", \"torchvision\", \"wandb\", \"tqdm\", \"fastapi\", \"onnxruntime\", \"cv2\"]\n\n[tool.ruff.lint.per-file-ignores]\n\"doctr/models/**.py\" = [\"N806\", \"F841\"]\n\"doctr/datasets/**.py\" = [\"N806\"]\n\"tests/**.py\" = [\"D\"]\n\"scripts/**.py\" = [\"D\"]\n\"docs/**.py\" = [\"D\"]\n\"references/**.py\" = [\"D\"]\n\"api/**.py\" = [\"D\"]\n\"demo/**.py\" = [\"D\"]\n\".github/**.py\" = [\"D\"]\n\n\n[tool.ruff.lint.flake8-quotes]\ndocstring-quotes = \"double\"\n\n[tool.coverage.run]\nsource = [\"doctr\"]\n"
        },
        {
          "name": "references",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.6552734375,
          "content": "# Copyright (C) 2021-2025, Mindee.\n\n# This program is licensed under the Apache License 2.0.\n# See LICENSE or go to <https://opensource.org/licenses/Apache-2.0> for full license details.\n\nimport os\nfrom pathlib import Path\n\nfrom setuptools import setup\n\nPKG_NAME = \"python-doctr\"\nVERSION = os.getenv(\"BUILD_VERSION\", \"0.10.1a0\")\n\n\nif __name__ == \"__main__\":\n    print(f\"Building wheel {PKG_NAME}-{VERSION}\")\n\n    # Dynamically set the __version__ attribute\n    cwd = Path(__file__).parent.absolute()\n    with open(cwd.joinpath(\"doctr\", \"version.py\"), \"w\", encoding=\"utf-8\") as f:\n        f.write(f\"__version__ = '{VERSION}'\\n\")\n\n    setup(name=PKG_NAME, version=VERSION)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}