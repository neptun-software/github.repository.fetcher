{
  "metadata": {
    "timestamp": 1736559700452,
    "page": 383,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "RoganDawes/P4wnP1",
      "stars": 4093,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.6015625,
          "content": "[submodule \"duckencoder\"]\n\tpath = duckencoder\n\turl = https://github.com/mame82/duckencoder.py\n[submodule \"john-1-8-0-jumbo_raspbian_jessie_precompiled\"]\n\tpath = john-1-8-0-jumbo_raspbian_jessie_precompiled\n\turl = https://github.com/mame82/john-1-8-0-jumbo_raspbian_jessie_precompiled\n[submodule \"Responder\"]\n\tpath = Responder\n\turl = https://github.com/mame82/Responder\n\tbranch = EMULATE_INTERNET_AND_WPAD_ANYWAY\n[submodule \"nexmon\"]\n\tpath = nexmon\n\turl = https://github.com/mame82/P4wnP1_nexmon_additions\n[submodule \"hostapd-mana\"]\n\tpath = hostapd-mana\n\turl = https://github.com/mame82/P4wnP1_hostapd-mana_additions\n"
        },
        {
          "name": "DISCLAIMER.md",
          "type": "blob",
          "size": 0.58984375,
          "content": "DISCLAIMER\r\n==========\r\n\r\n**P4wnP1** is dedicated to penetration testers, redteamers and InfoSec personal.\r\nP4wnP1 is a Proof of Concept and should be used for authorized testing and/or \r\neducational purposes only. The only exception is using it against devices\r\nor a network, owned by yourself.\r\n\r\nI take no responsibility for the abuse of P4wnP1 or any information given in\r\nthe related documents. \r\n\r\n**I DO NOT GRANT PERMISSIONS TO USE P4wnP1 TO BREAK THE LAW.**\r\n\r\nAs P4wnP1 is meant as a Proof of Concept, it is likely that bugs occur.\r\nI disclaim any warranty for P4wnP1, it is provided \"as is\".\r\n"
        },
        {
          "name": "DuckyScripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 6.1103515625,
          "content": "# FAQ\n\n## General questions\n\n### Does this run on a Pi Zero (non WiFi)?\nMost of the payloads do, but not the HID backdoor (if you'd enable USB networking for this payload, it would be possible to connect to the backdoor shell, but 127.0.0.1 attacks are out of scope for this project).\nAn example for a more sophisticated payload running without WiFi is the \"HID frontdoor\": [video link](https://www.youtube.com/watch?v=MI8DFlKLHBk)\n\n\n### How to connect P4wnP1 to Internet, once installed ?\n\n#### Method 1\nHere's a little tutorial video, showing the steps on Windows 10. Requirement: `network-only.txt`payload has to be running.\n\n[video link](https://youtu.be/QEWaIoal5qU)\n\n#### Method 2\nEdit the variables that start with \"WIFI_CLIENT\" to match the credentials with an existing accesspoint with ethernet connectivity and set WIFI_CLIENT to true.\nP4wnP1 will connect to this accesspoint instead of starting one.\n\n### Does this run on other ARM devices?\nP4wnP1 uses several features specific to raspbian. Among others: \n- the RNDIS ratepatch is specific to the raspbian RNDIS kernel module\n- the LED interaction is based on raspbian FS interface\n- USB OTG detection is based on raspbian DEBUG FS integration\n- the USB gadget stack is only tested against the UDC of the raspberry \n\nBut everyone is free to port this to other devices.\n\n### Should I change passwords?\nSure... and don't forget the WiFi password ;-)\n\n### The setup isn't easy, will there be a prebuilt image?\nNo. But I'm going to rework `INSTALL.md` to give some guidance on how to get the Pi Zero ready.\n\n### What's the purpose of \"John the Ripper (JtR)\" and \"Responder.py\"\nThe package came from an idea in early development stage. There's an attack mentioned in the README, which allows you to steal NetNTLMv2 hashes from locked Windows boxes (Rob ‘MUBIX’ Fuller: “Snagging creds from locked machines”). This was in fact the first payload that was implemented on P4wnP1 (Rsponder.py is there for the same reason, as it is needed to carry out the attack). The plan was to develop a \"LOCKPICKER\" for Windows hosts with weak credentials, which would do the following:\n1. Steal the NetNTLMv2 hash with the 'Mubix' approach\n2. Fetch the hash from Responder.db and hand it over to John the Ripper\n3. Try to crack the hash until either P4wnP1 is shutdown or the John the Ripper reports a SUCCESS.\n4. On SUCESS, use the HID keyboard to type out the plaintext password and unlock the machine.\n\nSo if you ask, \"Where is the lock picker?\" ... It has never been finished, for multiple reasons.\n- The chance for the \"Snagging creds attack\" to succeed is very low, since Microsoft patched the issue.\n- The third party application I found vulnerable to this was patched, too (see `README.md` for reference).\n- Implementing the lock picker isn't a real challenge and there's a whole lot of other work to do on P4wnP1. So feel free to contribute.\n\nAnyway, both tools could come in handy on various payloads (even ones I couldn't even imagine today). The JtR, which could be fetched from the raspbian repo with `apt-get install john`, isn't really feature rich. It only supports a basic set of hash types. The package included in P4wnP1 is the JtR Jumbo version, which can handle a ton of hash types. It was compiled on the Pi itself. The hash rate for the mentioned NetNTLMv2 hashes on the Pi Zero W is about 100,000 hashes per second. This means if you have a dictionary with 100,000 passwords and your victim chooses one of them, cracking would take a second, max.\nThe Responder.py version is a slightly modified one, allowing it to respond to probe requests of Microsoft Windows to check its \"online status\" in such a manner, that the system believes it has Internet access. This could come in handy in several network attacks.\n\n## HID backdoor payload\n\n### What's the difference between this and an ordinary BadUSB? \n\nThat is a really good question. Karsten Nohl was the first using the term \"BadUSB\". What he described (or showed) was that ordinary commercial USB devices could be reprogrammed to make them act differently. Thus it was possible to mod a normal USB flash drive (with PHISON controller) into an USB keyboard, running keyboard attacks. But the concept wasn't all about keyboards. In fact one could reprogram a vulnerable USB device to be anything, as long as it is defined in the USB specs (and one is able to reverse and modify a firmware based on an Intel 8051 derivate).\nSo the more precise question should be: \"What's the difference between this and an ordinary RubberDucky attack?\"\n\n### What's the difference between this and an ordinary RubberDucky attack?\nThe backdoor payload does the same as a RubberDucky attack. The difference is that you can launch keyboard attacks from a WiFi based custom SSH shell on demand. The target sees only two HID devices, no other USB hardware.\nFrom the moment you use the `FireStage1` command things change a bit:\nAs stated there are two HID devices. The first one is a HID keyboard (used to carry out the keyboard attacks). The second HID device is a GENERIC HID device. The `FireStage1` command uses the keyboard device, to type out code building up a sort of protocol stack. This protocol stack is used to communicate with P4wnP1 via the second HID device. \n\nTo be more precise:\nThe shell that spawns using the `shell` command doesn't use a network connection, a serial port or any other communication device. It is based on a pure Human Interface Device. Now try to explain to your firewall to block this communication channel (this isn't socket based). Or try to explain to your endpoint protection to block USB HID devices and say goodbye to all kinds of controllers using this standard. I guess the difference becomes clear!\nSo to carry out pure keyboard attacks, this kind of \"covert channel\" isn't needed, you can run them as soon as you SSH into P4wnP1s backdoor interface. But once the covert channel is up after issuing `FireStage1` there should be no need to run further keyboard attacks, as long as you know what you're doing. The input to the shell (and other spawned processes) is tunnelled through the HID channel.\n\n### Where is the code for the client side payload?\nHere: https://github.com/mame82/P4wnP1_HID_backdoor_client\n\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 7.3095703125,
          "content": "# P4wnP1 Install Guide\n\nDon't waste your time following complicated install instructions: A ready-to-go image of latest P4wnP1 version could be found on the release page:\nhttps://github.com/mame82/P4wnP1/releases (seems some of you missed it).\n\n## Step 1 - Install Raspbian Lite\n 1.  Download: \n [Jessie Lite image](http://downloads.raspberrypi.org/raspbian_lite/images/raspbian_lite-2017-07-05/) \n or\n [Stretch Lite image](https://www.raspberrypi.org/downloads/raspbian/) (recomended)\n 2. Follow the guide [here](https://www.raspberrypi.org/documentation/installation/installing-images/README.md)\n\n## Step 2 - Connect the Pi (Zero) to Internet\n\nSeveral methods are existing to do this\n\n - Method 1: Attaching an USB hub along with a Network Interface (NIC) and use it to connect to the Internet\n - Method 2: Put the SD card into another Raspberry Pi with built-in NIC and connect to the Internet (for example a Pi 3)\n - Method 3: This is the preferred one, as no additional hardware should be needed. Configure the Raspberry Pi **Zero** to act as USB Ethernet adapter and connect back to Internet through your host (Internet Connection Sharing on Windows, iptables MASQUERADING rule on Linux).\n - Method 4: How I do it currently (see `\"Getting headless Pi Zero online\"`)\n\nA guide on how to do method 3 could be found [here](http://www.circuitbasics.com/raspberry-pi-zero-ethernet-gadget/). Two things should be noted on method 3:\n\n1. Most Raspberry Pi Zero USB gadget configurations interfere with the configuration of P4wnP1 (which for example doesn't use \"g_ether\"). The setup script of P4wnP1 tries to fix interfering configurations. If you encouter problems, please try another method to connect to Internet and revert the changes done to the bare RASPBIAN JESSIE/STRETCH image.\n2. Unlike described in most tutorials (including the linked one), the SSH server on current Raspbian isn't running by default. You have to boot up the Pi into interactive mode and run `sudo update-rc.d ssh enable` (avoid manual changes to `/etc/rc2.d/`, most times this messes things up).\n \n## Getting headless Pi Zero Online (my way, needs a micro USB cable + SD card reader + KALI Linux)\n\nI'm doing this on Kali Linux, most other distros should be fine, too (I'm working as root user on Kali, so depending on the distribution you need to add `sudo` or change too root, in order to run privileged commands). I don't use Windows 10 anymore, because the default USB over Ethernet driver gets detected as \"USB Serial device\", which is hard to overcome.\n1. Prepare a fresh Raspbian Lite SD card\n2. Mount the SD card to your KALI box **before** booting the Pi to first time.\n3. On the boot partition edit the file `config.txt` and append the line `dtoverlay=dwc2` to enable USB gadget overlay.\n4. On boot partition change insert `modules-load=dwc2,g_ether` into `cmdline.txt` between \"rootwait\" and \"quiet\". This enables the Ethernet USB gadget kernel module on boot.\n5. Create an empty file called `ssh` in the same folder where `cmdline.txt` and `config.txt` reside, in order to enable SSH on boot.\n6. The SD card is prepared. Install it in your Pi and connect a micro USB capable to the inner USB port of the Pi (the one marked with \"USB\" not with \"PWR in\".\n7. Connect the Pi to your Kali Box and wait till it finished booting.\n\nSo this should bring up a new network interface on your box, which in my case is called `usb0` and has to be enabled with `ifconfig usb0 up`. The problem is, that the Pi runs a DHCP client on títs internal interface, waiting to receive a DHCP lease with an IP to use. As this lease will never be sent (as long as you haven't configured a DHCP server on usb0). We don't know the IP of the Pi. You could attach an HDMI monitor and the Pi will print out the IP used. But as promised, we do it in my way and that is headless.\nNow that the Pi isn't able too receive a DHCP lease, it chooses its own IP with a process called APIPA. I don't want to explain everything here, but one part of APIPA is important: Before the Pi chooses its IP, it has to check if any other host is using it already. This is done via ARP request. So if we sniff on our `usb0` interface, shortly after bringing it up, we should see an ARP request. To fecth this request, I personally use tshark, but every other sniffer should be fine, as long as you bring it up fast enough. So instead of running only `ifconfig usb0 up` we do the following.\n`ifconfig usb0 up && thshark -i usb0`\n\n8. Watch the tshark output, till you see an ARP request with an IP (who has 169.254.241.194 in my case)\n9. Stop tshark with `CTRL + C` and grab a copy of the IP.\n10. Configure your `usb0` interface to reside in the same subnet, I choose `169.254.241.1` and thus run the following command:\n`ifconfig usb0 169.254.241.1`.\n\nImportant: If the interface `usb0` isn't configured to manual setup, it is likely that a DHCP client is running. Trying to retreive a DHCP lease would wipe the IP configuration done in step 10 (ending up with Internet connection loss at some later point). The quick and dirty way to circumvent this on Kali, is to stop the network manager service with `service network-manager stop`\n\n11. test if you could reach out to the Pi with `ping 169.254.241.194`\n12. If everything goes fine, you should now be able to login with `ssh pi@169.254.241.194`\n\nTwo more things left. You have to configure your Kali box to allow outbound masquerading on your internet interface (eth0 in my case), like this:\n\n13. `iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE` to enable masquerading (don't forget to replace eth0 with your internet interface)\n14. `echo 1 > /proc/sys/net/ipv4/ip_forward` to enable kernel based routing on the Kali machine\n\nNow KALI should be ready to root out traffic on its internet interface, but the Pi doesn't need to know who is the rooter, so we tell him. From the SSH session on the Pi run:\n\n15. `route add -net default gw 169.254.241.1` (here the address you configured on your usb interface is needed\n16. At this point raspbian should be able to reach the internet, test this with something like `ping 8.8.8.8`\n\nThe last thing to do is to tell the Pi, how to resolve DNS names, with:\n\n17. `echo nameserver 8.8.8.8 > /etc/resolv.conf` where 8.8.8.8 is a google DNS which you could change according to your needs\n18. The Pi should be online and able to resolve DNS names, test with `ping www.google.de`\n\nIf you made it till here, your're ready to go on with P4wnP1 installation.\n\n## Login to Pi Zero online\n\nNow you should be ready to login to the Internet connected **Raspberry Pi Zero** either directly or via SSH. Only the Pi Zero supports USB device emulation at time of this writing, so it doesn't make any sence to try this with another model.\nP4wnP1 setup is meant to be run by the user `pi` so use this user, the default password is `raspberry` which of course could be changed.\n\n## Install P4wnP1\n\nEnter the following commands to install P4wnP1:\n\n    sudo apt-get -y install git\n    cd /home/pi\n    git clone --recursive https://github.com/mame82/P4wnP1\n    cd P4wnP1\n    ./install.sh\n\nThe setup process will take some time (installing packages, compiling pycrypto), so go and have a coffee.\nIf something goes wrong you should receive some error message.\n\n## Run P4wnP1\n\nIf nothing went wrong you could shutdown the Pi and reconnect it to a Windows Box.\nTo see the output, you could either connect a HDMI device or login via SSH (use PuTTY on Windows) with `pi@172.16.0.1`.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "MouseScripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 41.751953125,
          "content": "P4wnP1 by MaMe82\n================\n\nP4wnP1 is a highly customizable USB attack platform, based on a low cost Raspberry Pi Zero or Raspberry Pi Zero W (required for HID backdoor).\n\nImportant\n---------\n\n**The successor of P4wnP1 is called P4wnP1 A.L.O.A. and hosted here:** https://github.com/mame82/P4wnP1_aloa\n\nThis repo isn't really suspended, but I'm using all of my time to work on P4wnP1's successor. \nThe new Repo is still private, but information on progress are published via twitter, from time to time ([@P4wnP1](https://twitter.com/p4wnp1) or [@MaMe82](https://twitter.com/mame82)).\n\n**More important:** Don't waste your time following complicated install instructions: A ready-to-go image of latest P4wnP1 version could be found on the release page:\nhttps://github.com/mame82/P4wnP1/releases (seems some of you missed it).\n  \n\nTL;TR\n-----\n\n[Official WiKi](http://p4wnp1.readthedocs.io/en/latest/) started by @jcstill and @Swiftb0y\n\nThere isn't a short summary of this README. If you want to handle this nice tool, I'm afraid you have to read this.\n\nThe most important sections:\n- Windows LockPicker\n- HID covert channel frontdoor\n- HID covert channel backdoor (**this is the new main feature**)\n- Getting started section\n\n\nIntroduction\n============\n\nSince the initial release in February 2017, P4wnP1 has come a long way.\nToday advanced features are merged back into the master branch, among others:\n-   the **Windows LockPicker** (unlock Windows boxes with weak passwords, fully automated by attaching P4wnP1)\n-   the **HID covert channel backdoor** (Get remote shell access on air gapped Windows targets tunneled only through HID devices, relayed to a WiFi hotspot with SSH access with a Pi Zero W. The target doesn't see a network adapter, serial or any other communication device.)\n-   the **HID covert channel frontdoor** (Get access to a python shell on P4wnP1 from a restricted Windows host, tunneled through a raw HID device with low footprint. The target doesn't see a network adapter, serial or any other communication device.)\n-\trefined USB, **modular USB setup**\n\nExternal Resources using P4wnP1\n==================\n\n-    Dan The IOT Man, Introduction + Install instructions \"P4wnP1 – The Pi Zero based USB attack-Platform\": [Dan the IOT Man]\n-    Black Hat Sessions XV, workshop material \"Weaponizing the Raspberry Pi Zero\" (Workshop material + slides): [BHSXV]\n-    ihacklabs[dot]com, tutorial \"Red Team Arsenal – Hardware :: P4wnp1 Walkthrough\" (Spanish): [part 1], [part 2], [part 3]\n\n  [BHSXV]: https://www.madison-gurkha.com/hands-onhacking-raspberrypi-en\n  [part 1]: https://www.ihacklabs.com/es/red-team-arsenal-hardware-p4wnp1-walkthrough-cargando-y-disparando-con-la-raspberry-pi-zero-w-parte-1/\n  [part 2]: https://www.ihacklabs.com/es/red-team-arsenal-hardware-p4wnp1-walkthrough-cargando-y-disparando-con-la-raspberry-pi-zero-w-parte-2/\n  [part 3]: https://www.ihacklabs.com/es/red-team-arsenal-hardware-p4wnp1-walkthrough-cargando-y-disparando-con-la-raspberry-pi-zero-w-parte-3/\n  [Dan the IOT Man]: https://dantheiotman.com/2017/09/15/p4wnp1-the-pi-zero-based-usb-attack-platform/\n\nP4wnP1 Features (quick summary)\n===============================\n\n-\t**WiFi Hotspot** for SSH access (Pi Zero W only), support for hidden ESSID\n-\t**operate WiFi in client mode** (Pi Zero W only), to relay USB network attacks through WiFi with internet access (MitM)\n-   the USB device features work in **every possible combination** with Windows **Plug and Play** support (class drivers)\n-   Support for device types\n\t- **HID covert channel communication device** (see sections 'HID covert channel frontdoor' and 'HID covert channel backdoor')\n    - **HID Keyboard**\n    - **USB Mass storage** (currently only in demo setup with 128 Megabyte drive)\n    - **RNDIS** (Windows Networking)\n    - **CDC ECM** (MacOS / Linux Networking)\n-\tRaspberry Pi **LED state feedback** with a simple bash command (`led_blink`)\n-   customizable **bash based payload scripts** (see `payloads/` subfolder for examples)\n-   includes **Responder** and a precompiled **John the Ripper Jumbo** version\n-   **Auto attack:** P4wnP1 automatically boots to standard shell if an OTG adapter is attached, the current payload only runs if P4wnP1 is connected as USB device to a target (without USB OTG adapter)\n\n\n\nPayload descritions and video demos of included payloads\n========================================================\n\nAs it is a flexible framework, P4wnP1 allows to develop custom payloads only limited by the imagination of the pentester using it.\nTo get a basic idea some payloads are already included and described here:\n\n\n## Payload: Windows LockPicker\n\n\nThis payload extends the \"Snagging creds from locked machine\" approach, presented by Mubix (see credits), to its obvious successor:\n\n**P4wnP1 LockPicker cracks grabbed hashes and unlocks the target on success, using its keyboard capabilities.** This happens fully automated, without further user interaction.\n\n### Video demo\n\nI'm still no video producer, so maybe somebody feels called upon to do a demo.\nHere's my (sh**ty) attempt:\n[![P4wnP1 LockPicker demo youtube](https://img.youtube.com/vi/7fCPsb6quKc/0.jpg)](https://www.youtube.com/watch?v=7fCPsb6quKc)\n\nHere's a version of someone doing this much better, thanks @Seytonic\n[![P4wnP1 LockPicker demo youtube](https://img.youtube.com/vi/KDJKE10LCjM/0.jpg)](https://www.youtube.com/watch?v=KDJKE10LCjM)\n\n\n### Attack chain (short summary):\n1. The USB network interface of P4wnP1 is used to bring up a DHCP which provides its configuration to the target client.\n2. Among other options, a WPAD entry is placed and static routes for the whole IPv4 address space are deployed to the target.\n3. P4wnP1 redirects traffic dedicated to remote hosts to itself using different techniques.\n4. Requests for various protocols originating from the target, are fetched by \"Responder.py\", which forces authentication and tries to steal the hashes used for authentication.\n5. If a hash is grabbed, P4wnP1 LED blinks three times in sequence, to signal that you can unplug and walk away with the hashes for offline cracking. **Or...**\n6. ... you leave P4wnP1 plugged and the hashes are handed over to John the Ripper, which tries to bruteforce the captured hash.\n7. If the ´password of the user who locked the box is weakly chosen, chances are high that John the Ripper will be able to crack it, which leads to...\n8. ... **P4wnP1** ultimately enters the password, in order to unlock the box and you're able to access the box (the cracked password is stored in `collected` folder, along with the hashes).\n\nThe payload `Win10_LockPicker.txt` has to be chosen in `setup.cfg` to carry out the attack. **It is important to modify the payloads \"lang\" parameter to your target's language**. If you attach a HDMI monitor to P4wnP1, you could watch the status output of the attack (including captured hash and plain creds, if you made it this far).\n\n## Payload: Stealing Browser credentials (hakin9_tutorial)\n\n\nThis payload runs a PowerShell script, typed out via P4wnP1's built-in keyboard, in order to dump stored credentials of Microsoft Edge or Internet Explorer. Fetched credentials are stored to P4wnP1's flashdrive (USB Mass Storage).\nAs the name implies, this payload is the result of an hakin9 article on payload development for P4wnP1, which is yet unpublished. For this reason, the payload has RNDIS enabled, although not needed to carry out the attack.\nIts main purpose is to show how to store the result from a keyboard based attack, to P4wnP1's flashdrive, although the drive letter is only known at runtime of the payload.\n\n### Video demo\n\n[![P4wnP1 LockPicker demo youtube](https://img.youtube.com/vi/iZXNQNIpm7s/0.jpg)](https://www.youtube.com/watch?v=iZXNQNIpm7s)\n\n## Backdooring Windows Lock Screen\n\n\nThis payload plants a **backdoor which allows to access a command shell with SYSTEM level privileges from the Windows Lockscreen**. Once planted, the shell is triggered by sticky keys.\n\nThe payload itself is purely keyboard based.\nThe widely known approach to achieve the payloads's goal, is to replace the `sethc.exe` file. Anyway, this payload does the change based on a registry hack (Debugger property of Image execution options). This means the attack is less noisy, as the filesystem doesn't get touched directly. Additionally the payload shows how to **use P4wnP1's keyboard triggers**. Pressing NUMLOCK multiple times plants the backdoor, while pressing SCROLLLOCK multiple times removes the backdoor again.\nLast but not least, the attack demoes a simple **UAC bypass**, as the PowerShell session used has to be ran with elevated privileges.\n\nThe attack requires an unlocked target run by an Administrator account.\n\nThe payload demoed here isn't published yet.\n\n### Video demo\n\n[![P4wnP1 LockPicker demo youtube](https://img.youtube.com/vi/uu15fIb9vbs/0.jpg)](https://www.youtube.com/watch?v=uu15fIb9vbs)\n\n\n\n## Payload: HID covert channel frontdoor\n\n\n### Video demo\n\n\n[![P4wnP1 HID demo youtube](https://img.youtube.com/vi/MI8DFlKLHBk/0.jpg)](https://www.youtube.com/watch?v=MI8DFlKLHBk&yt:cc=on)\n\n### HID frontdoor features\n\n-    Plug and Play install of HID device on Windows (tested on Windows 7 and Windows 10)\n-    Covert channel based on a raw HID device\n-    Pure **in memory PowerShell payload** - nothing is written to disk\n-    Synchronous data transfer with about 32KBytes/s (fast enough for shells and small file transfers)\n-    Custom protocol stack to handle HID communication and deal with HID data fragmentation\n-    HID based file transfer from P4wnP1 to target memory\n-    **Stage 0:** P4wnP1 sits and waits, till the attacker triggers the payload stage 1 (frequently pressing NUMLOCK)\n-    **Stage 1:** payload with \"user space driver\" for HID covert channel communication protocols is **typed out to the target via USB keyboard**\n-    **Stage 2:** Communications switches to HID channel and gives access to a custom shell on P4wnP1. This could be used to upload and run PowerShell scripts, which are hosted on P4wnP1, directly into memory of the PowerShell process running on the target. This happens without touching disk or using network communications, at any time.\n\n\n## Payload HID covert channel backdoor (Pi Zero W only)\n\n\n### Video demo\n\n\n[![P4wnP1 HID demo youtube](https://img.youtube.com/vi/Pft7voW5ui8/0.jpg)](https://www.youtube.com/watch?v=Pft7voW5ui8)\n\nThe video is produced by @Seytonic, you should check out his youtube channel with hacking related tutorials and various projects, if you're interested in more stuff like this (link in credits).\n\n**@Seytonic** thanks for the great tutorial\n\n### HID backdoor features\n\n- Payload to bridge an Airgap target, by relaying a shell over raw HID and provide it from P4wnP1 via WiFi\n- Plug and Play install of HID device on Windows (tested on Windows 7 and Windows 10)\n- Covert channel based on raw HID\n- Pure **in memory, multi stage payload** - nothing is written to disk, small footprint (compared to typical PowerShell IOCs)\n- RAT like control server with custom shell:\n    - Auto completition for core commands\n\t- Send keystrokes on demand\n\t- Excute DuckyScripts (menu driven)\n\t- Trigger remote backdoor to bring up HID covert channel\n\t- creation of **multiple** remote processes (only with covert channel connection)\n\t- console interaction with managed remote processes (only with covert channel connection)\n\t- auto kill of remote payload on disconnect\n\t- `shell` command to  create remote shell (only with covert channel connection)\n\t- server could be accessed with SSH via WiFi when the `hid_backdoor.txt` payload is running\n\n## HID backdoor attack chain and usage\n\n\n### 1. Preparation\n\n- Choose the `hid_backdoor.txt` payload in `setup.cfg` (using the interactive USB OTG mode or one of the payloads with SSH network access, like `network_only.txt`)\n- Attach P4wnp1 to the target host (Windows 7 to 10)\n\n### 2. Access the P4wnP1 backdoor shell\n\n- During boot up, P4wnP1 opens a wireless network called `P4wnP1` (password: `MaMe82-P4wnP1`)\n- Connect to the network and SSH in with `pi@172.24.0.1`\n- If everything went fine, you should be greeted by the interactive P4wnP1 backdoor shell (If not, it is likely that the target hasn't finished loading the USB keyboard drivers). The SSH password is the password of the user `pi`, which is `raspberry` in the default configuration.\n\n### 3. Ad-Hoc keyboard attacks from P4wnP1 backdoor shell (without using the covert channel), could be done from here:\n\n- Entering `help` shows available commands\n- Use the `SetKeyboardLayout` to set the keyboard layout according to your target's language. **This step is important and should always be taken first, otherwise most keyboard based attacks fail.**\n- to print the current keyboard layout use `GetKeyboardLayout`. The default keyboard language for the P4wnP1 backdoor shell could be changed in `hidtools/backdoor/config.txt`\n- use the `SendKeys` command followed by an ASCII key sequence to send keystrokes to the target\n- As you will notice, the `SendKeys` command is somehow restricted, no control keys could be sent, even a RETURN is problematic. So for more complex key sequences the `FireDuckyScript` command comes to help.\n- `FireDuckyScript` accepts the name of a script residing in the `DuckyScript/` folder. The folder is prefilled with some demo scripts. If you omit the script name behind the `FireDuckyScript` command, you will be presented with a menue to choose a script. If you wonder why one would write a DuckyScript sending an `<ALT> + <F4>` only, you're thinking in the old world of RubberDucky. With P4wnP1 and its capbility to run DuckyScripts dynamically, such short scripts come in handy. If you don't know what I'm talking about run the `P4wnP1_youtube.duck` script and you'll know where scripts like `AltF4_Return.duck` are needed ;-)\n\nSo that's all\n\n... no just joking. Four months without commits wouldn't have been passed if there isn't more. Up till here, there was no covert channel communication, right?!\n\n### 4. Fire stage 1 of the covert channel payload ('FireStage1' command)\n- As we are able to print characters to the target, we are able to remotly execute code. P4wnP1 uses this capability to type out a PowerShell script, which builds and executes the covert channel communication stack. This attack works in multiple steps:\n    1. Keystrokes are injected to start a PowerShell session and type out stage 1 of the payload. Depending on how the command `FireStage1` is used, this happens in different flavours. By default a short stub is executed, which hides the command windows from the user, followed by the stage 1 main script.\n\t2. The stage 1 main script comes in two fashions:\n       - Type 1: A pure PowerShell script which is short and thus fast, but uses the infamous IEX command (this command has the capability to make threat hunters and blue teamers happy). This is the default stage 1 payload.\n       - Type 2: A dot NET assembly, which is loaded and executed via PowerShell. This stage 1 payload takes longer to execute, as more characters are needed. But, as you may already know, it doesn't use the IEX command.\n- It is worth mentioning, that the PowerShell session is started without command line arguments, so there's nothing which triggers detection mechanisms for malicious command lines. Theres no parameter like `-exec bypass`, `-enc`, `-NoProfile` or `hidden` ... nothing suspicious! The shortcoming is, that we need to wait till the PowerShell window opens before typing is continued. As we are not able to detect for input readiness and there are boxes which take years to bring up an interactive PowerShell window, the delay between running `powershell.exe` and starting of stage1 typeout could be changed with the second parameter to the `FireStage1` command (default is 1000 milliseconds).\n- Last but not least, if you append `nohide` to the end of the `FireStage1` command line, the Window hiding stub isn't executed in upfront and you should be able to see all my sh**ty debug output.\n\n### 5. Loading stage 2\n- There's no rocket sience here. The stage 1 payload initializes the basic interface to the custom HID device and receives stage 2 **fully automated**. Stage 2 includes all the protocol layers and the final backdoor. It gets directly loaded into memory as dot NET assembly.\n- So why dot NET ? The early versions of the backdoor have been fully developed in PowerShell. This resulted in a big mess when it comes to multi threading, PS 2.0 compatability without class inheritance and multi thread debugging with ISE. I don't want to say that is impossible (if you watched the commit history, there's the proof that it is possible), but there's no benefit. To be precise, there are disadvantages: Much more code is needed to achieve the same, the code is slower and **PowerShell Module Logging would be able to catch every single script command from the payload**. In contrast to using a dot NET assembly, where the only PowerShell commands which could get logged, are the ones which load the assembly and run the stage 2 trigger. Everything else is gone as soon as the payload quits. So ... small footprint, yeah.\n- But don't get \"PowerShell inline assemlies\" compiled to a temporary file on disk ?!?! Yes, they do! At least if they're written with CSharp inline code. Luckily P4wnP1 doesn't do this. The assemblies are shipped pre-compiled.\n\n### 6. Using the backdoor connection\n- After stage 2 has successfully ran, the prompt of the P4wnP1 backdoor shell should indicate a client connection.\n- From here on, new commands are usable, these include:\n    - `CreateProcess`\n\t- `interact`\n\t- `KillProcess`\n\t- `KillClient`\n\t- and ... :-) ... `shell`\n- I'm too tired to explain these here, but I guess you'll find it out.\n\n## HID backdoor attack - summary\n\n1. Choose `hid_backdoor.txt` payload\n2. Connect P4wnP1 device to Windows target\n3. Connect to the newly spawned `P4wnP1` WiFi with a different device (could be a smartphone, as long as a SSH client is installed)\n4. Set the correct target keyboard layout with `SetKeyboardLayout` (or alter `hidtools/backdoor/config.txt`)\n5. On the P4wnP1 shell run `SendKeys` or `FireDuckyScript` to inject key strokes\n6. To fire up the covert channel HID backdoor, issue the command `FireStage1`\n7. After the target connected back, enter `shell` to create a remote shell through the covert channel\n\n## HID backdoor - Currently missing features\n\n- File transfer implementation (upload / download) ... but hey... you guys are redteamers and pentesters! You know how to deal with non-interactive remote shells, right? If not go and take an OSCP or something like that, but don't bother me with a feature request for this.\n**Update:** File transfer for HID backdoor is implented wit the commands `upload` and `download` - **so files are move back and forth through a raw HID device now** between P4wnP1 and the target, now\n- Run TCP sockets through the HID channel. Yes, it would be really nice to have a SOCKS4a or SOCKS5 listening on P4wnP1, tunneling comms through the target client. I'm not sure when this will get done, as this PoC project consumed far too much time. But hey, the underlying communication layers are prepared to handle multiple channels and as far as I know, you're staring at the source code, right now!\n\n\n\nP4wnP1 more advanced features (excerpt)\n=======================================\n\n\nAdvanced HID Keyboard Features\n------------------------------\n\n-   Keyboard payloads could be **triggered by targets main keyboard LEDs** (NUMLOCK, CAPSLOCK and SCROLLLOCK)\n-   **dynamic payload branching** based on LED triggers\n-   Supports **DuckyScript** (see hid_keyboard2.txt payload for an advanced example)\n-   Supports **raw ASCII Output via HID Keyboard** (could be used to print out character based files via keyboard, like `cat /var/log syslog | outhid`)\n-   **Multi Keyboard language layout support** (no need to worry about target language when using HID commands)\n-   Output starts when target keyboard driver is loaded (no need for manual delays, `onKeyboardUp` callback could be used in payloads)\n\n\nAdvanced Network Features\n-------------------------\n\n-   Fake **RNDIS network interface speed up to 20GB/s** to get the lowest metric and win every fight for the dominating 'default gateway' entry in routing tables, while carrying out network attacks (patch could be found [here](https://github.com/mame82/ratepatch/commits/master) and the README [here](https://github.com/mame82/ratepatch/blob/master/README.md))\n-   **Automatic link detection** and interface switching, if a payload enables both RNDIS and ECM network\n-   SSH server is running by default, so P4wnP1 could be connected on 172.16.0.1 (as long as the payload enables RNDIS, CDC ECM or both) or on 172.24.0.1 via WiFi\n-   if both, WiFi client mode and WiFi Access Point mode, are enabled - **P4wnP1 fails over to open an Access Point in case the target WiFi isn't reachable** (Pi Zero W only)\n\n\nAdvanced payload features\n-------------------------\n\n-   bash **payloads based on callbacks** (see [`template.txt`](payloads/template.txt) payload for details)\n    - **onNetworkUp** (when target host gets network link active)\n\t- **onTargetGotIP** (if the target received an IP, the IP could be accessed from the payload script)\n\t- **onKeyboardUp** (when keyboard driver installation on target has finished and keyboard is usable)\n\t- **onLogin** (when a user logs in to P4wnP1 via SSH)\n- configuration can be done globally (`setup.cfg`) or overwritten per payload (if the same parameter is defined in the payload script)\n- settings include:\n    - USB config (Vendor ID, Product ID, **device types to enable** ...)\n    - WiFi config (SSID, password ...)\n\t- HID keyboard config (**target keyboard language** etc.)\n\t- Network and DHCP config\n\t- **Payload Selection**\n\n\nFeature Comparison with BashBunny\n=================================\n\nSome days after initial P4wnP1 commit, Hak5's BashBunny was announced (and ordered by myself). Here's a little feature comparison:\n\n| Feature                                                                         | BashBunny                                                                                               | P4wnP1                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n|---------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| RNDIS, CDC ECM, HID , serial and Mass storage support                           | supported, usable in several combinations, Windows Class driver support (Plug and Play) in most modes   | supported, usable in most combinations, Windows Class driver support (Plug and Play) in all modes as composite device                                                                                                                                                                                                                                                                                                                                                                             |\n| Target to device communication on covert HID channel                            | no                                                                                                      | Raw HID device allows communication with Windows Targets (PowerShell 2.0+ present) via raw HID</br>  There's a full automated payload, allowing to access P4wnP1 bash via a custom PowerShell console from target device (see 'hid_frontdoor.txt' payload). </br> An additional payload based on this technique, allows to expose a backdoor session to P4wnP1 via HID covert channel and relaying it via WiFi/Bluetooth to any SSH capable device (bridging airgaps, payload 'hid_backdoor.txt') |\n| **Mouse emulation**                                                                 | no                                                                                                      | Supported: relative Mouse positioning (most OS, including Android) + ABSOLUTE mouse positioning (Windows); dedicated scripting language \"MouseScript\" to control the Mouse, MouseScripts on-demand from HID backdoor shell                                                                                                                                                                                                                                                                        |\n| Trigger payloads via target keyboard                                            | No                                                                                                      | Hardware based: LEDs for CAPSLOCK/SCROLLLOCK and NUMLOCK are read back and used to branch or trigger payloads (see ``hid_keyboard2.txt`` payload)                                                                                                                                                                                                                                                                                                                                                 |\n| Interactive DuckyScript execution                                               | Not supported                                                                                           | supported, HID backdoor could be used to fire scripts on-demand (via WiFi, Bluetooth or from Internet using the HID remote backdoor)                                                                                                                                                                                                                                                                                                                                                              |\n| USB configuration changable during runtime                                      | supported                                                                                               | will maybe be implemented                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| Support for RubberDucky payloads                                                | supported                                                                                               | supported                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| Support for piping command output to HID keyboard out                           | no                                                                                                      | supported                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| Switchable payloads                                                             | Hardware switch                                                                                         | manually in interactive mode (Hardware switch could be soldered, script support is a low priority ToDo. At least till somebody prints a housing for the Pi which has such a switch and PIN connectors)                                                                                                                                                                                                                                                                                            |\n| Interactive Login with display out                                              | SSH / serial                                                                                            | SSH / serial / stand-alone (USB OTG + HDMI)                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| Performance                                                                     | High performance ARM quad core CPU, SSD Flash                                                           | Low performance single core ARM CPU, SDCARD                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| Network interface bitrate                                                       | Windows RNDIS: **2 GBit/s**</br>Linux/MacOS ECM: **100 MBit/s**</br>Real bitrate 450 MBit max (USB 2.0) | Windows RNDIS: **20 GBit/s**</br>Linux/MacOS ECM: **4 GBit/s** (detected as 1 GBit/s interface on MacOS)</br>Real bitrate 450 MBit max (USB 2.0)</br>[Here's the needed P4wnP1 patch](https://github.com/mame82/ratepatch)                                                                                                                                                                                                                                                                        |\n| LED indicator                                                                   | RGB Led, driven by single payload command                                                               | mono color LED, driven by a single payload command                                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| Customization                                                                   | Debian based OS with package manager                                                                    | Debian based OS with package manager                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| External network access via WLAN (relay attacks, MitM attacks, airgap bridging) | Not possible, no external interface                                                                     | supported with Pi Zero W                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| SSH access via **Bluetooth**                                                        | not possible                                                                                            | supported (Pi Zero W)                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| Connect to existing WiFi networks (headless)                                    | not possible                                                                                            | supported (Pi Zero W)                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| Shell **access via Internet**                                                       | not possible                                                                                            | supported (WiFi client connection + SSH remote port forwarding to SSH server owned by the pentester via AutoSSH)                                                                                                                                                                                                                                                                                                                                                                                  |\n| Ease of use                                                                     | Easy, change payloads based on USB drive, simple bash based scripting language                          | Medium, bash based event driven payloads, inline commands for HID (DuckyScript and ASCII keyboard printing, as well as LED control)                                                                                                                                                                                                                                                                                                                                                               |\n| Available payloads                                                              | Fast growing github repo (big community)                                                                |  Slowly growing github repo (spare time one man show ;-)) Edit: Growing community, but no payload contributions so far                                                                                                                                                                                                                                                                                                                                                                            |\n| In one sentence ...                                                             | \"World's most advanced USB attack platform.\"                                                            | A open source project for the pentesting and red teaming community.                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| Total Costs of Ownership                                                        | about 99 USD                                                                                            | about 5 USD (11 USD fow WLAN capability with Pi Zero W)                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n\nSumUp: BashBunny is directed to easy usage, but costs 20 times as much as the basic P4wnP1 hardware. P4wnP1 is directed to a more advanced user, but allows outbound communication on a separate network interface (routing and MitM traffic to upstream internet, hardware backdoor etc.)\n\nInstall instructions\n====================\n\nRefer to [INSTALL.md] (outdated, will be rewritten someday)\n\nGetting started\n===============\n\nThe default payload (payloads/network_only.txt) makes th Pi accessible via Ethernet over USB and WiFi.\nYou could SSH into P4wnP1\n\nvia USB\n\n    pi@172.16.0.1\n\nor via WiFi\n\n\tpi@172.24.0.1\n\tNetwork name: P4wnP1\n\tKey: MaMe82-P4wnP1\n\n\nFrom there you could alter `setup.cfg` to change the current payload (`PAYLOAD` parameter) and keyboard language (`LANG` parameter).\n\nCaution:\nIf the chosen payload overwites the global `LANG` parameter (like the hid_keyboard demo payloads), you have to change the `LANG` parameter in the payload, too. If your remove the `LANG` parameter from the payload, the setting from `setup.cfg` is taken. In short words, settings in payloads have higher priority than settings in `setup.cfg`\n\nRequirements\n============\n\n-   Raspberry Pi Zero / Pi Zero W (other Pis don’t support USB gadget because they’re equipped with a Hub, so don’t ask)\n-   Raspbian Jessie/Stretch Lite pre installed (kernel is updated by the P4wnP1 installer, as the current kernel has errors in the USB gadget modules, resulting in a crash)\n-   Internet connection to run the `install.sh` script\n-   the project is still work in progress, so features and new payloads are added in frequently (make sure to have an updated copy of P4wnP1 repo)\n\nSnagging creds from locked machines, vulnerable application (Oracle JAVA JRE/JDK vuln)\n======================================================================================\n\nDuring tests of P4wnP1 a product has been found to answer NTLM authentication requests on wpad.dat on a locked and fully patched Windows 10 machine. The NTLM hash of the logged in user is sent by a third party software, even if the machine isn’t domain joined. The flaw has been reported to the respective vendor. Details will be added to the readme as soon as a patch is available. For now I’ll recently update the disclosure timeline here.\n\nDisclosure Timeline discovered NTLM hash leak:\n\n| Date        \t| Action                                       \t|\n|-------------\t|----------------------------------------------\t|\n| Feb-23-2017 \t| Initial report submitted to Oracle (Email)   \t|\n| Feb-23-2017 \t| Oracle reports back, investigating the issue \t|\n| Mar-01-2017 \t| Oracle confirmed issue, working on fix       \t|\n| Mar-23-2017 \t| Oracle: monthly status Update \"Being fixed in main codeline\"      \t|\n| Apr-23-2017   | Oracle: monthly status Update \"Being fixed in main codeline\"  (yes, Oracle statement doesn't change)      |\n| May-23-2017 \t| Oracle: monthly status Update \"Being fixed in main codeline\"      \t|\n| Jun-23-2017 \t| Oracle: monthly status Update \"Being fixed in main codeline\"      \t|\n| Jul-14-2017 \t| Oracle: released an update and registered **CVE-2017-10125**. See [link](http://www.securityfocus.com/bid/99809)      \t|\n\nSo here we are now. The **vulnerable product has been the Oracle Java JRE and JDK** (1.7 Update 141 and 1.8 Update 131). The issue has been fixed with the \"Oracle Critical Patch Update Advisory - July 2017\", which could be found [here](http://www.oracle.com/technetwork/security-advisory/cpujul2017-3236622.html). So go and update your Java JRE/JDK.\n\nCredits to\n==========\n\n-    Seytonic (youtube channel on hacking and hardware projects: [Seytonic]\n-    Rogan Dawes (sensepost, core developer of Universal Serial Abuse - USaBUSe): [USaBUSe]\n-    Samy Kamkar: [PoisonTap]\n-    Rob ‘MUBIX’ Fuller: [“Snagging creds from locked machines”] and MUBIX at [github]\n-    Laurent Gaffie (lgandx): [Responder]\n-    Darren Kitchen (hak5darren): [DuckEncoder], time to implement a WiFi capable successor for BashBunny ;-)\n\n  [Seytonic]: https://www.youtube.com/channel/UCW6xlqxSY3gGur4PkGPEUeA\n  [PoisonTap]: https://github.com/samyk/poisontap\n  [“Snagging creds from locked machines”]: https://room362.com/post/2016/snagging-creds-from-locked-machines/\n  [github]: https://github.com/mubix\n  [Responder]: https://github.com/lgandx/Responder\n  [DuckEncoder]: https://github.com/hak5darren/USB-Rubber-Ducky/\n  [INSTALL.md]: https://github.com/mame82/P4wnP1/blob/master/INSTALL.md\n  [USaBUSe]: https://github.com/sensepost/USaBUSe\n"
        },
        {
          "name": "Responder",
          "type": "commit",
          "content": null
        },
        {
          "name": "ToDo.txt",
          "type": "blob",
          "size": 2.3779296875,
          "content": "1) [DONE] fix issues in duckencoder.py \n\nflake8 . --count --select=E901,E999,F821,F822,F823 --show-source --statistics\n\n./hidtools/backdoor/DuckEncoder.py:190:43: F821 undefined name 'key_entry'\n\t\t\tprint \"Error: No keycode entry for \" + key_entry\n                                          ^\n\n./hidtools/backdoor/DuckEncoder.py:392:17: F821 undefined name 'parseScriptLine'\n\t\t\t\t\t\tresult += parseScriptLine(lastLine, keyProp, langProp)\n                ^\n                \n2) [DONE] get rid of doubled duckencoder (symlink the submodule or add ./duckencoder to pythons module path)\n\n3) [DONE] Add option to change AP name\n\n4) [DONE] Add menue driven lagunage selection, \"SetKeyboardLanguage without parametes gives a menu\n\n5) [Open] Add filesystem browsing commands for target (analog to local command lcd, lpwd, lls) --> preparation for file transfer\n\t- [partially] FileSystem class for payload created: https://github.com/mame82/P4wnP1_HID_backdoor_client/blob/master/P4wnP1/FileSystem.cs\n\t- [open] Create payload functions to acces filesystem commands\n\t- [open] create callers and handlers for the remote functions on server\n\n6) [open] refine backdoor payload, to alter language setting of the backdoor server based on language setting of payload (usability)\n\n7) [open] Rework duckencoder.py: https://github.com/mame82/duckencoder.py/pull/2 (automated testing has to be deployed)\n\nFuture:\n\n8) Integrate file transfer\n\t- Write classes for asynchronous, thread based file transfer channels\n\t- Implement protocol methods for control channel\n\t- needed capabilities: \n\t\tUploadRAM (uupload file to memory only, to be able to run in memory PS scripts for example)\n\t\tUploadDisc\n\t\tDownload\n\t\t\n9) Integrate HID tunneled socket communication\n\t- MileStone far, far awy\n\t- Listener sockets + connect sockets\t\n\n10) Socks4a / Socks5\n\t- after basic socket integration to have a multiplexed pivot channel\n\t\n11) Refine USB Mass Storage Support\n\t- make it configurable (allow CD-Rom emulation with mounted iso)\n\t- mount flashdrive image to P4wnP1 local file system, when not used by payload\n\t\n12) Allow changing USB modes, whil payload is running\n- needs full rework of the payload mechanism (callbacks would have to be called multiple times, maybe iterative payload design instead)\n- example use case: Run network attack, save captured data to internally mounted USB flashdrive image, reinit USB stack to mimic a flashdrive and present the captured data\n"
        },
        {
          "name": "boot",
          "type": "tree",
          "content": null
        },
        {
          "name": "conf",
          "type": "tree",
          "content": null
        },
        {
          "name": "duckencoder",
          "type": "commit",
          "content": null
        },
        {
          "name": "hidtools",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 11.5615234375,
          "content": "#!/bin/bash\n\n#    This file is part of P4wnP1.\n#\n#    Copyright (c) 2017, Marcus Mengs. \n#\n#    P4wnP1 is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#\n#    P4wnP1 is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with P4wnP1.  If not, see <http://www.gnu.org/licenses/>.\n\n\n# P4wnP1 install script.\n#       Author: Marcus Mengs (MaMe82)\n#\n# Notes:\n#   - install.sh should only be run ONCE\n#   - work in progress (contains possible errors and typos)\n#\t- the script needs an Internet connection to install the required packages\n\n\n# get DIR the script is running from (by CD'ing in and running pwd\nwdir=$( cd $(dirname $BASH_SOURCE[0]) && pwd)\n\n# check for wifi capability\nif $wdir/wifi/check_wifi.sh; then WIFI=true; else WIFI=false; fi\n\n# check Internet conectivity against \necho \"Testing Internet connection and name resolution...\"\nif [ \"$(curl -s http://www.msftncsi.com/ncsi.txt)\" != \"Microsoft NCSI\" ]; then \n        echo \"...[Error] No Internet connection or name resolution doesn't work! Exiting...\"\n        exit\nfi\necho \"...[pass] Internet connection works\"\n\n# check for Raspbian Jessie\necho \"Testing if the system runs Raspbian Jessie or Stretch...\"\nif ! (grep -q -E \"Raspbian.*jessie\" /etc/os-release || grep -q -E \"Raspbian.*stretch\" /etc/os-release) ; then\n        echo \"...[Error] Pi is not running Raspbian Jessie or Stretch! Exiting ...\"\n        exit\nfi\necho \"...[pass] Pi seems to be running Raspbian Jessie or Stretch\"\nif (grep -q -E \"Raspbian.*stretch\" /etc/os-release) ; then\n\tSTRETCH=true\nfi\n\n\necho \"Backing up resolv.conf\"\nsudo cp /etc/resolv.conf /tmp/resolv.conf\n\necho \"Installing needed packages...\"\nsudo apt-get -y update\nsudo apt-get -y upgrade # include patched bluetooth stack\n#if $WIFI; then\n#\tsudo apt-get install -y dnsmasq git python-pip python-dev screen sqlite3 inotify-tools hostapd\n#else\n#\tsudo apt-get install -y dnsmasq git python-pip python-dev screen sqlite3 inotify-tools\n#fi\n\n# hostapd gets installed in even if WiFi isn't present (SD card could be moved from \"Pi Zero\" to \"Pi Zero W\" later on)\nsudo apt-get -y install dnsmasq git python-pip python-dev screen sqlite3 inotify-tools hostapd autossh bluez bluez-tools bridge-utils ethtool  policykit-1 tshark tcpdump iodine\n\n\n# at this point the nameserver in /etc/resolv.conf is set to 127.0.0.1, so we replace it with 8.8.8.8\n#\tNote: \n#\tA better way would be to backup before dnsmasq install, with\n#\t\t$ sudo bash -c \"cat /etc/resolv.conf > /tmp/backup\"\n#\tand restore here with\n#\t\t$ sudo bash -c \"cat /tmp/backup > /etc/resolv.conf\"\nsudo bash -c \"cat /tmp/resolv.conf > /etc/resolv.conf\"\n# append 8.8.8.8 as fallback secondary dns\nsudo bash -c \"echo nameserver 8.8.8.8 >> /etc/resolv.conf\"\n\n# install pycrypto\necho \"Installing needed python additions...\"\n# Fix: issue of conflicting filename 'setup.cfg' with paython setuptools\n# Reported by  PoSHMagiC0de\n# https://github.com/mame82/P4wnP1/issues/52#issuecomment-325236711\nmv setup.cfg setup.bkp\nsudo pip install pycrypto # already present on stretch\nsudo pip install pydispatcher\nmv setup.bkp setup.cfg\n\n# Installing Responder isn't needed anymore as it is packed into the Repo as submodule\n#echo \"Installing Responder (patched MaMe82 branch with Internet connection emulation and wpad additions)...\"\n# clone Responder from own repo (at least till patches are merged into master)\n#git clone -b EMULATE_INTERNET_AND_WPAD_ANYWAY --single-branch https://github.com/mame82/Responder\n\n# disable interfering services\necho \"Disabeling unneeded services to shorten boot time ...\"\nsudo update-rc.d ntp disable # not needed for stretch (only jessie)\nsudo update-rc.d avahi-daemon disable\nsudo update-rc.d dhcpcd disable\nsudo update-rc.d networking disable\nsudo update-rc.d avahi-daemon disable\nsudo update-rc.d dnsmasq disable # we start this by hand later on\n\necho \"Create udev rule for HID devices...\"\n# rule to set access rights for /dev/hidg* to 0666 \necho 'SUBSYSTEM==\"hidg\",KERNEL==\"hidg[0-9]\", MODE=\"0666\"' > /tmp/udevrule\nsudo bash -c 'cat /tmp/udevrule > /lib/udev/rules.d/99-usb-hid.rules'\n\necho \"Enable SSH server...\"\nsudo update-rc.d ssh enable\n\necho \"Checking network setup..\"\n# set manual configuration for usb0 (RNDIS) if not already done\nif ! grep -q -E '^iface usb0 inet manual$' /etc/network/interfaces; then\n\techo \"Entry for manual configuration of RNDIS interface not found, adding...\"\n\tsudo /bin/bash -c \"printf '\\niface usb0 inet manual\\n' >> /etc/network/interfaces\"\nelse\n\techo \"Entry for manual configuration of RNDIS interface found\"\nfi\n\n# set manual configuration for usb1 (CDC ECM) if not already done\nif ! grep -q -E '^iface usb1 inet manual$' /etc/network/interfaces; then\n\techo \"Entry for manual configuration of CDC ECM interface not found, adding...\"\n\tsudo /bin/bash -c \"printf '\\niface usb1 inet manual\\n' >> /etc/network/interfaces\"\nelse\n\techo \"Entry for manual configuration of CDC ECM interface found\"\nfi\n\necho \"Unpacking John the Ripper Jumbo edition...\"\nif $STRETCH; then\n\tcd john-1-8-0-jumbo_raspbian_jessie_precompiled/\n\tgit fetch\n\tgit checkout jtr_stretch\n\tcd ..\n\ttar zxf john-1-8-0-jumbo_raspbian_jessie_precompiled/john-1-8-0-jumbo_raspbian_stretch_precompiled.tar.gz\nelse\n\ttar xJf john-1-8-0-jumbo_raspbian_jessie_precompiled/john-1.8.0-jumbo-1_precompiled_raspbian_jessie.tar.xz\nfi\n\n\n# overwrite Responder configuration\necho \"Configure Responder...\"\nsudo mkdir -p /var/www\nsudo chmod a+r /var/www\ncp conf/default_Responder.conf Responder/Responder.conf\nsudo cp conf/default_index.html /var/www/index.html\nsudo chmod a+r /var/www/index.html\n\n\n# create 128 MB image for USB storage\necho \"Creating 128 MB image for USB Mass Storage emulation\"\nmkdir -p $wdir/USB_STORAGE\ndd if=/dev/zero of=$wdir/USB_STORAGE/image.bin bs=1M count=128\nmkdosfs $wdir/USB_STORAGE/image.bin\n\n# create folder to store loot found\nmkdir -p $wdir/collected\n\n\n# create systemd service unit for P4wnP1 startup\n# Note: switched to multi-user.target to make nexmon monitor mode work\nif [ ! -f /etc/systemd/system/P4wnP1.service ]; then\n        echo \"Injecting P4wnP1 startup script...\"\n        cat <<- EOF | sudo tee /etc/systemd/system/P4wnP1.service > /dev/null\n                [Unit]\n                Description=P4wnP1 Startup Service\n                #After=systemd-modules-load.service\n                After=local-fs.target\n                DefaultDependencies=no\n                Before=sysinit.target\n\n                [Service]\n                #Type=oneshot\n                Type=forking\n                RemainAfterExit=yes\n                ExecStart=/bin/bash $wdir/boot/boot_P4wnP1\n                StandardOutput=journal+console\n                StandardError=journal+console\n\n                [Install]\n                WantedBy=multi-user.target\n                #WantedBy=sysinit.target\nEOF\nfi\n\nsudo systemctl enable P4wnP1.service\n\n# create systemd service for bluetooth NAP\nif [ ! -f /etc/systemd/system/P4wnP1-bt-nap.service ]; then\n        echo \"Injecting P4wnP1 BLUETOOTH NAP startup script...\"\n        cat << EOF | sudo tee /etc/systemd/system/P4wnP1-bt-nap.service > /dev/null\n\n[Unit]\nDescription=P4wnP1 Bluetooth NAP service\nAfter=bluetooth.service\nPartOf=bluetooth.service\n\n[Service]\nType=forking\nRemainAfterExit=yes\nExecStart=/bin/bash /home/pi/P4wnP1/boot/init_bt.sh\nStandardOutput=journal+console\nStandardError=journal+console\n\n[Install]\nWantedBy=bluetooth.target\n\nEOF\nfi\n\nsudo systemctl enable P4wnP1-bt-nap.service\n\nif ! grep -q -E '^.+P4wnP1 STARTUP$' /home/pi/.profile; then\n\techo \"Adding P4wnP1 startup script to /home/pi/.profile...\"\ncat << EOF >> /home/pi/.profile\n# P4wnP1 STARTUP\nsource /tmp/profile.sh\ndeclare -f onLogin > /dev/null && onLogin\nEOF\nfi\n\n# removing FSCK from fstab, as this slows down boot (jumps in on stretch nearly every boot)\necho \"Disable FSCK on boot ...\"\nsudo sed -i -E 's/[12]$/0/g' /etc/fstab\n\n# enable autologin for user pi (requires RASPBIAN JESSIE LITE, should be checked)\necho \"Enable autologin for user pi...\"\nsudo ln -fs /etc/systemd/system/autologin@.service /etc/systemd/system/getty.target.wants/getty@tty1.service\n\n# setup USB gadget capable overlay FS (needs Pi Zero, but shouldn't be checked - setup must \n# be possible from other Pi to ease up Internet connection)\necho \"Enable overlay filesystem for USB gadgedt suport...\"\nsudo sed -n -i -e '/^dtoverlay=/!p' -e '$adtoverlay=dwc2' /boot/config.txt\n\n# add libcomposite to /etc/modules\necho \"Enable kernel module for USB Composite Device emulation...\"\nif [ ! -f /tmp/modules ]; then sudo touch /etc/modules; fi\nsudo sed -n -i -e '/^libcomposite/!p' -e '$alibcomposite' /etc/modules\n\necho \"Removing all former modules enabled in /boot/cmdline.txt...\"\nsudo sed -i -e 's/modules-load=.*dwc2[',''_'a-zA-Z]*//' /boot/cmdline.txt\n\necho \"Installing kernel update ...\"\n# still needed on current stretch releas, kernel 4.9.41+ ships still\n# with broken HID gadget module (installing still needs a cup of coffee)\n# Note:  last working Jessie version was the one with kernel 4.4.50+\n#        stretch kernel known working is 4.9.45+ (only available via update right now)\n\n# Raspbian stretch with Kernel >= 4.9.50+ needed for working bluetooth nap\n#sudo rpi-update 913eddd6d23f14ce34ae473a4c080c5c840ed583 # force kernel 4.9.51+ for nexmon compatability\n\n# Raspbian stretch with Kernel >= 4.9.78+ (working bluetooth, nexmon module compiled for this version)\nsudo rpi-update 23a007716a0c6a8677097be859cf7063ae093d27\n\n# ToDo: the correct branch of nexmon for the current update kernel should be checked out here,\n#       to do this the downloaded kernel version has to be feteched, which is only available after reboot from `uname -r`\n#       The logic to do this will be implemented in init_wifi_nexmon, to allow checking out the correct branch of \"P4wnP1_nexmon_addition\"\n#       if it doesn't match the current kernel at runtime\n\n\necho \"Generating keypair for use with AutoSSH...\"\nsource $wdir/setup.cfg\n\nmkdir -p -- \"$(dirname -- \"$AUTOSSH_PRIVATE_KEY\")\"\n\nssh-keygen -q -N \"\" -C \"P4wnP1\" -f $AUTOSSH_PRIVATE_KEY && SUCCESS=true\nif $SUCCESS; then\n        echo \"... keys created\"\n        echo\n        echo \"Use \\\"$wdir/ssh/pushkey.sh\\\"\"\n        echo \"in order to promote the public key to a remote SSH server\"\nelse\n\techo \"Creation of SSH key pair failed!\"\nfi\n\n\necho\necho\necho \"====================================================================================\"\necho \"If you came till here without errors, you shoud be good to go with your P4wnP1...\"\necho \"...if not - sorry, you're on your own, as this is work in progress\"\necho \necho \"Attach P4wnP1 to a host and you should be able to SSH in with pi@172.16.0.1 (via RNDIS/CDC ECM)\"\necho\necho \"If you use a USB OTG adapter to attach a keyboard, P4wnP1 boots into interactive mode\"\necho\necho \"If you're using a Pi Zero W, a WiFi AP should be opened. You could use the AP to setup P4wnP1, too.\"\necho \"          WiFi name:    P4wnP1\"\necho \"          Key:          MaMe82-P4wnP1\"\necho \"          SSH access:    pi@172.24.0.1 (password: raspberry)\"\necho\necho \"  or via Bluetooth NAP:    pi@172.26.0.1 (password: raspberry)\"\necho\necho \"Go to your installation directory. From there you can alter the settings in the file 'setup.cfg',\"\necho \"like payload and language selection\"\necho \necho \"If you're using a Pi Zero W, give the HID backdoor a try ;-)\"\necho\necho \"You need to reboot the Pi now!\"\necho \"====================================================================================\"\n\n"
        },
        {
          "name": "john-1-8-0-jumbo_raspbian_jessie_precompiled",
          "type": "commit",
          "content": null
        },
        {
          "name": "ledtool",
          "type": "tree",
          "content": null
        },
        {
          "name": "nexmon",
          "type": "commit",
          "content": null
        },
        {
          "name": "payloads",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 8.994140625,
          "content": "#!/bin/sh\n\n###########################\n# General config\n#   \tthese are the default settings\n#\tthe setting are only used, if not defined in the payload itself\n###########################\n\n# USB setup\n# ---------------------------\n# Make sure to change USB_PID if you enable different USB functionality in order\n# to force Windows to enumerate the device again\nUSB_VID=\"0x1d6b\"        # Vendor ID\nUSB_PID=\"0x0137\"        # Product ID\n\nUSE_ECM=true            # if true CDC ECM will be enabled\nUSE_RNDIS=true          # if true RNDIS will be enabled\nUSE_HID=false            # if true HID (keyboard) will be enabled\nUSE_HID_MOUSE=true            # if true HID mouse will be enabled\nUSE_RAWHID=false         # if true a raw HID device will be enabled\nUSE_UMS=false           # if true USB Mass Storage will be enabled\n\n# ===========================================\n# Network and DHCP options USB over Ethernet\n# ===========================================\n\n# We choose an IP with a very small subnet (see comments in README.rst)\nIF_IP=\"172.16.0.1\" # IP used by P4wnP1\nIF_MASK=\"255.255.255.252\"\nIF_DHCP_RANGE=\"172.16.0.2,172.16.0.2\" # DHCP Server IP Range\n\nROUTE_SPOOF=false # set two static routes on target to cover whole IPv4 range\nWPAD_ENTRY=false # provide a WPAD entry via DHCP pointing to responder\n\n# ============================\n# WiFi options (only Pi Zero W)\n# ============================\nWIFI_NEXMON=false # Experimental: enables the use of Nexmon driver + firmware to add monitor mode capability\nWIFI_NEXMON_BRING_UP_MONITOR_FIRST=true # if this option is set to true, the additional monitor interface is brought up before hostapd is started (and thus not available to hostapd)\n\nWIFI_REG=US # WiFi regulatory domain (if not set accordingly, WiFi channels are missing)\n\n# Access Point Settings\n# ---------------------\n\nWIFI_ACCESSPOINT=true\nWIFI_ACCESSPOINT_NAME=\"P4wnP1\"\nWIFI_ACCESSPOINT_AUTH=true # Use WPA2_PSK if true, no authentication if false\nWIFI_ACCESSPOINT_CHANNEL=6\nWIFI_ACCESSPOINT_PSK=\"MaMe82-P4wnP1\"\nWIFI_ACCESSPOINT_IP=\"172.24.0.1\" # IP used by P4wnP1\nWIFI_ACCESSPOINT_NETMASK=\"255.255.255.0\"\nWIFI_ACCESSPOINT_DHCP_RANGE=\"172.24.0.2,172.24.0.100\" # DHCP Server IP Range\nWIFI_ACCESSPOINT_HIDE_SSID=false # use to hide SSID of WLAN (you have to manually connect to the name given by WIFI_ACCESSPOINT_NAME)\n\nWIFI_ACCESSPOINT_DHCP_BE_GATEWAY=false # propagate P4wnP1 as router if true (only makes sense when an upstream is available\nWIFI_ACCESSPOINT_DHCP_BE_DNS=false # propagate P4wnP1 as nameserver if true (only makes sense when an upstream is available\nWIFI_ACCESSPOINT_DNS_FORWARD=false # if true, P4wnP1 listens with a DNS forwader on UPD port 53 of the WiFi interface (traffic is forwaded to P4wnP1's system DNS)\n\nWIFI_ACCESSPOINT_KARMA=false # enables Karma attack with modified nexmon firmware, requires WIFI_NEXMON=true\nWIFI_ACCESSPOINT_KARMA_LOUD=false # if true beacons for SSIDs spotted in probe requests are broadcasted (maximum 20)\n\n# WiFi Client Settings\n# --------------------\n\nWIFI_CLIENT=false \t# enables connecting to existing WiFi (currently only WPA2 PSK)\n\t\t\t# example payload: wifi_connect.txt\n\t\t\t# Warning: could slow down boot, because:\n\t\t\t#\t- scan for target network is issued upfront\n\t\t\t#\t- DHCP client is started and waits for a lease on WiFi adapter\n\t\t\t# Note: if WIFI_ACCESSPOINT is enabled, too:\n\t\t\t#\t- P4wnP1 tries to connect to the given WiFi\n\t\t\t# \t- if connection fails, the AccessPoint is started instead\nWIFI_CLIENT_SSID=\"Accespoint Name\" # name of target network\nWIFI_CLIENT_PSK=\"AccessPoint password\" # passphrase for target network\nWIFI_CLIENT_STORE_NETWORK=false # unused right now, should be used to store known networks, but priority has to be given if multiple known networks are present\nWIFI_CLIENT_OVERWRITE_PSK=true # unused right now, in case the network WIFI_CLIENT_STORE_NETWORK is set an existing PSK gets overwritten\n\n# ==================================\n# Keyboard settings for HID keyboard\n# ==================================\nlang=\"us\" # Keyboard language for outhid and duckhid commands\nHID_KEYBOARD_TEST=true # if enabled 'onKeyboardUp' is fired as soon as the host initializes the keyboard\n\n# ===============================================\n# Settings for reachback connections with AutoSSH\n# ===============================================\nAUTOSSH_ENABLED=false # if enabled P4wnP1 will continuously try to bring up a SSH connection tunneling out its internal SSH server to a remote SSH Server\nAUTOSSH_REMOTE_HOST=YourSSH-server.com # host address of the remote SSH server\nAUTOSSH_REMOTE_USER=root # valid user of the remote SSH server (passwordless login has to be possible with the key given by AUTOSSH_PRIVATE_KEY)\nAUTOSSH_PRIVATE_KEY=\"$wdir/ssh/keys/P4wnP1_id\" # private key used to login to the remote server (has to be present in ~/.ssh/authorized_keys file of AUTOSSH_REMOTE_USER)\nAUTOSSH_PUBLIC_KEY=\"$wdir/ssh/keys/P4wnP1_id.pub\" # this key has to be present in ~/.ssh/authorized_keys file of AUTOSSH_REMOTE_USER, (use ./ssh/pushkey.sh to assist)\nAUTOSSH_REMOTE_PORT=8765 # P4wnP1's SSH shell will be reachable at this port on the remote SSH server (the port is bound to localhost and thus not exposed to public facing IP)\n\n\n# =============================\n# Settings for Bluetooth PAN (Pi Zero W only)\n# =============================\n# Note: Connecting Bluetooth Network Access Point (NAP) with a mobile device\n#       requires to disable other networks with internet access on this device in most cases\n#       (like WiFi).\n#       NAP provided by P4wnP1 doesn't necessarily provide Internet access, but is used to\n#       grant network access on P4wnP1 via bluetooth. The alternative would be to establish\n#       a \"Group Network (GN)\" instead of NAP, which unfortunately didn't work in most test cases,\n#       when it cames to connection of a mobile device.\n#       So if Internet should be provided from P4wnP1 via NAP (which isn't the purpose of P4wnP1),\n#       P4wnP1 itself has to be connected to Internet (for example using RNDIS + ICS on windows or\n#       using the WiFi client mode). Additionally iptables rules have to be deployed to enable MASQUERADING\n#       on the respective outbound interface.\n#\n#\t\tTo summerize: P4wnP1 provides NAP as access option to SSH via bluetooth, not to serve Internet,\n#       although this could be achieved.\n\nBLUETOOTH_NAP=false # Enable Bluetooth NAP to SSH in via Bluetooth\nBLUETOOTH_NAP_PIN=1337 # unused, PIN authentication currently not working (custom agent for bluez 5 needed)\nBLUETOOTH_NAP_IP=\"172.26.0.1\" # IP used by P4wnP1\nBLUETOOTH_NAP_NETMASK=\"255.255.255.0\"\nBLUETOOTH_NAP_DHCP_RANGE=\"172.26.0.2,172.26.0.100\" # DHCP Server IP Range\n\nBLUETOOTH_PAN_AUTO=false \t# Overides BLUETOOTH_NAP !! Instead of providing a NAP P4wnP1 tries to use an existing bluetooth NAP as soon as a device providing one has paired \n\t\t\t\t# AND CONNECTED (not the common behavior for a device providing bluetooth tethering, but possible)\n\t\t\t\t# Important: P4wnP1 doesn't try to pair or connect a device on its own, but is discoverable (although no bluetooth services are provided)\n\n# =============================\n# Settings for USB Mass Storage\n# =============================\n\n\n\n# =====================\n# Payload selection\n# =====================\n\nPAYLOAD=network_only.txt\n#PAYLOAD=wifi_covert_channel/hid_only_delivery64.txt # WiFi covert channel (HID only delivery), insert P4wnP1 to target, press NUMLOCK rapidly to infect ... remove P4wnP1 and provided it with Power, lock in via WiFi and use the C2 server for the covert channel\n#PAYLOAD=wifi_covert_channel/hid_only_delivery32.txt # 32bit version untested\n#PAYLOAD=wifi_covert_channel/hid_only_delivery64_bt_only.txt # WiFi covert channel version which use Bluetooth instead of a WiFi AP to provide C2 server access (no visible P4wnP1 WiFi, at all)\n#PAYLOAD=nexmon/karma.txt # Experimental Rogue AP in Karma mode using Nexmon (seemoo-lab) firmware for Monitor/Injection (+ MaMe82 KARMA firmware mod) and Responder\n#PAYLOAD=nexmon/karma_bt_upstream.txt\n#PAYLOAD=hid_mouse.txt # HID mouse demo: Shows different ways of positioning the mouse pointer, using P4wnP1's MouseScript languag\n#PAYLOAD=hid_backdoor_remote.txt # AutoSSH \"reachback\" version of hid_backdoor (see payload comments for details)\n#PAYLOAD=wifi_connect.txt\n#PAYLOAD=stickykey/trigger.txt # Backdoor Windows LockScreen with SYSTEM shell, triggered by NUMLOCK, trigger SCROLLLOCK to revert the changes\n#PAYLOAD=hakin9_tutorial/payload.txt # steals stored plain credentials of Internet Explorer or Edge and saves them to USB flash drive (for hakin9 tutorial)\n#PAYLOAD=Win10_LockPicker.txt # Steals NetNTLMv2 hash from locked Window machine, attempts to crack the hash and enters the plain password to unlock the machin on success\n#PAYLOAD=hid_backdoor.txt # under (heavy) development\n#PAYLOAD=hid_frontdoor.txt # HID covert channel demo: Triggers P4wnP1 covert channel console by pressing NUMLOCK 5 times on target (Windows)\n#PAYLOAD=hid_keyboard.txt # HID keyboard demo: Waits till target installed keyboard driver and writes \"Keyboard is running\" to notepad\n#PAYLOAD=hid_keyboard2.txt # HID keyboard demo: triggered by CAPS-, NUM- or SCROLL-LOCK interaction on target\n"
        },
        {
          "name": "ssh",
          "type": "tree",
          "content": null
        },
        {
          "name": "wifi",
          "type": "tree",
          "content": null
        },
        {
          "name": "writeup_lockpicker.md",
          "type": "blob",
          "size": 39.001953125,
          "content": "# History of P4wnP1, inner workings of LockPicker payload, network traffic analysis for the attack and quick look on KB4041691 (addressing the attack vector of LockPicker)\n\nIf you're only interested in the technical aspects, jump down to the respective sections!\n\n## Genesis and development of P4wnP1 and the LockPicker payload\n\nBack in September 2016 the following blog post came to my attention: \n[\"Snagging creds from locked machines\"](https://room362.com/post/2016/snagging-creds-from-locked-machines/) by **Rob \"Mubix\" Fuller**. \n\nWhat Mubix described was disturbing, because it seems to be too easy to steal a hash from a locked Windows box. Giving it a shot was a good opportunity, to take a break from the \"Penetration Testing With Kali Linux (PWK)\" course, which I was into during that time. \n\nSmall problem: Mubix used customizable USB devices, USB Amory or Hak5's LAN Turtle to be precise, which I couldn't get my hands on quickly. So I took 5 minutes and modified a rogue AP which I had ready for awareness trainings, in order to carry out the attack via WiFi (more on the attack chain later, but it essentially it doesn't matter if the network device in use is based on USB or something else). So I went on, locked down my Windows 10 box and connected to the prepared WiFi AP (from the lock screen). **BOOM**  ... about 10 seconds later a NetNTLMv2 hash of the (privileged) user I was working with was captured by the AP (salt was known).\nI couldn't believe that this really happened. The blog post was online for several days, my box was fully patched, but it worked instantly and only took some seconds.\n\nI was interested in what was happening here. To do some analysis I fired up a sniffer and deployed audit rules to get some insights in the processes and data exchange involved. With the system prepared for the new goal (find the root cause), I took a second attempt to capture the hash ... nothing ! No NetNTMLv2 hash captured.\nA third attempt ... Nothing, no hash ! Fourth to tenth attempt - still nothing. \n\nSeems I was lucky at the first attempt, so I stopped doing research on that.\n\nDuring the next 3 month I turned back to usual tasks like: Taking my OSCP exam, working to make my employer happy and become a father once more. In other words: I was busy with other things.\n\nAlthough I was busy, one more blog post took my attention: This time it was [PoisonTap](https://samy.pl/poisontap/) by **Samy Kamkar**. \n\nBeside some neat techniques (like DNS rebinding, to access a victim's router configuration front-end webpage from the internal network, relayed through a web browser with poisoned webcache using a planted JavaScript backdoor ... pooh, long sentence ...). Samy used a cheap **Raspberry Pi Zero** to deploy the payload via **Ethernet over USB**. Up to this point I was using patched Android mobiles to deploy USB network attacks, but I wasn't aware of the fact that USB gadgets could be used with the RPi0.\n \nNext logical step: I opened up a webbrowser and pressed the \"order\" button on a page selling the RPi0. Again I was out of luck trying to repeat this, the Pi0 could only be ordered once.\n\n\nBy the end of January 2017, I had the time to review the research of Mubix and SamyK and thus unboxed my RPi0, which was unused so far. I started to port the attack of Mubix to Raspbian and thought it could be a good idea to solve minor problems:\n- deal with CDC ECM vs RNDIS setup (use the same DHCP configuration, no matter which device is activly used)\n- modify Responder to make Microsoft connection tests succeed (Captive Portal detection), although the device has no upstream connection\n- routing based redirection of every IPv4 address (refining of Samy's approach)\n- change the USB gadget configuration in a way, which allows to emulate multiple devices without the need of additional driver installation or modifications on the target OS (PnP class drivers)\n\nAfter tying everything together, I decided to share it with the InfoSec community and pushed everything to github. This was back on **February 23, 2017 - the birth of P4wnP1** (read: \"Pwn Pi\").\n\nThe projects consisted of two bash scripts, which reassembled the attack presented by Mubix, with some minor refinements.\nUnfortunately carrying out the attack failed in most cases. To be more precise: It failed targeting Windows, but it succeeded on 3rd party tools like the Java Updater (at least if you manage to keep your  breath long enough while staring on a locked Windows screen waiting for a hash to arrive from Java Updater). The findings have been reported to Oracle and **CVE-2017-10125** assigned (disclosure timeline is still in project's README).\n\nAs the aim of P4wnP1's USB stack was to be able to bring up multiple USB devices at once, without the need of manual driver installation, a simple idea existed since starting the project: *Instead of storing the hash, the device could be used to cracked it and type it out to the target's lock screen.*\nAnyway, I was done with stealing hashes from locked machines, because the success rate wasn't high - the only vendor I have found vulnerable received a report. This didn't hinder me from adding in support for HID keyboard emulation, about a week after P4wnP1's initial release. \n\nObviously the RPi0 had great potential for use cases in pentests, while coming at very low costs. I wasn't really able to unfold this potential, when Hak5 introduced the BashBunny in March 2017.\n\nDamn ... there's a device in USB flashdrive form factor, being able to do exactly the things P4wnP1 was intended to do! In fact it had much better specs than the RPi0 (color LED, SSD flash, Allwinner H3 based SoC). \nI felt there was no need for a project like P4wnP1 anymore, beside the fact that one could buy 20 RPi0 for the price of a single BashBunny. \n\nI looked destiny straight in the eye, opened up a webbrowser again and pressed the order button on Hak5's webshop to receive my BashBunny. Goodbye \"P4wnP1\" ... end of live reached after about a week of existence. \n\nYou may have noticed: I was a bit frustrated. But the frustration ended abruptly, when availability of the Bluetooth and WiFi capable **Raspberry Pi Zero W** was announced during the same week. Once more I hit the order button. With Pi0W it was the old game again ... I could only order a single device, no matter how hard I tried. Seems I'm not able to complete repetetive tasks.\n\nIn March 2017 I stepped back from the project (reminder: there's still no LockPicker payload) and only added in minor improvements. The cause wasn't that I gave up on it, but when the Pi Zero W arrived, a new idea was planted which I wasn't able to get out of my head:\n\n*I've got a cheap device which is able to emulate a bunch of USB peripherals and almost every possible USB HID interface, while being accessible via WiFi and Bluetooth. What if something like the keyboard LEDs could be used to built a covert channel in order to tunnel out IO from a shell running on a target and relay everything over WiFi or Bluetooth?*\n\nWhat should I say, I ultimately jumped into prototyping for this idea. It took about a month till April 2017, till I had a PoC ready. The basic idea was implemented the other way around: An insider uses P4wnP1, attaches it to a Windows target and is able to communicate with a bash shell running on P4wnP1. The nice thing about this: On the target side (Windows) everything runs in-memory, based on PowerShell. No privileges are needed, no communication devices are spawned to talk to P4wnP1 ... only pure HID. The result was published and is called `HID frontdoor` today. \n\nWhile working on the HID channel I stumbled across several obstacles and in the end across the best research done in this field by **Sensepost**. Of course I was already aware of these guys (remember the rogue AP mentioned in the beginning? It was backed by \"mana-toolkit\"). But what I wasn't aware of their project [**Universal Serial Abuse**](https://sensepost.com/blog/2016/universal-serial-abuse/) (what a shame, because it was presented at [DEF CON 24](USaBUSe)).\n\nI got in touch with **Rogan Dawes**. I don't know how to describe the conversation with my restricted English skills, maybe: *\"a misuse of github issues for excessive inter-project discussions\"* ?!\n\nIn the end I have to shout out **big thanks to Rogan**. I would have been able to bring up the covert channel myself, but without the ongoing exchange on this topic I would still be stuck on a transfer rate of 3.2KByte/s today. This isn't the case:\n\nIn July 2017, a full fledged Windows backdoor which communicates with the target using only pure HID was released. It could handle multiple channels, with transfer rates about 50KByte/s (60000 Byte/s is the theoretical maximum on USB 2.0 using this technique). Everything was based on a custom multi layer protocol stack and an RPC-like approach. \n\nIn less technical terms: \nYou could communicate with P4wnP1 from most WiFi or Bluetooth capable device equipped with a SSH client and pop multiple remote shells. The target only sees HID devices.\n\nThe final implementation of this new major feature is called `HID backdoor`, today. Some additional core features, which are used by the backdoor have been introduced to the project during this time:\n\n- WiFi support\n- DuckyScript parsing\n- on-demand keyboard attacks, triggered via WiFi\n- Payload system based on callback events (language bash)\n- Payload branching, triggered by LEDs of the target's real keyboard\n- status indication via LED\n- etc.\n\nA lot of effort has been put into this and everything was working nicely. During the next weeks, minor improvements have been introduce (like Bluetooth support, payload templates etc.). So P4wnP1 had its \"reason for existence\" and I was in good mood. In fact I was in such a good mood, that I decided to pull out my BashBunny, which was barely used so far, and do some tests for comparison with P4wnP1. To be honest, doing this put a smile in my face.\n\t\nThis smile didn't remain very long. It was washed away exactly at the point in time, when I fired BashBunny's \"QuickCreds\" payload (another implementation of the attack presented by Mubix) against my Windows 10 machine. About 30 seconds later the LED indicated a hash was grabbed. Checking it ... indeed the hash of the user I had a logon session with.\n\nDamn! How could I have missed this? The whole P4wnP1 project was started to carry out this attack, but it never worked reliably. So what was wrong with my approach?\nOnce more, I tried to analyze what was happening, the smile went back to my face: It wasn't able to successfully carry out the attack a second time! Same problem I was facing with P4wnP1 several month, ago. I was convinced that the issue was fixed with MS16-112 up to this point, but BashBunny has proven that it was still alive and it only works under certain conditions (probable only if a network device is attached the first time).\n\nFinally on August 1, 2017 the `LockPicker` payload was released. It reassembled all the ideas and findings. Including the early idea of cracking the hash on P4wnP1 itself and type it out to the target's lock screen, in order to ultimately unlock the box (which of course is more a PoC, as hash cracking with a Pi0 is far way from being an optimal setup). P4wnP1's final implementation of the attack was showcased by **Seytonic** in this [youtube video](https://www.youtube.com/watch?v=KDJKE10LCjM).\n\n\nThe payload was working reliably and I was a bit surprised to find Windows 10 itself being the root cause. This, unfortunately, was after releasing `LockPicker` and brought to Microsoft's attention on August 8, 2017.\nThe conversation with Microsoft revealed that I was badly mistaken, when taking the assumption that this issue was already addressed with MS16-112.\n\nI hadn't done my homework very well, which isn't the best excuse for not respecting responsible disclosure. The impact, on the other hand, wasn't too high for the following reasons:\n\n1. The issue was already well understood and for sure brought to Microsoft's attention before (Mubix disclosed the base idea about 11 month earlier)\n2. Microsoft didn't consider this as security flaw, because the attack was carried out using physical access (10 immutable laws of security). In fact, they had to be convinced to review the issue, because the underlying attack vector is network based (remember the WiFi scenario of my initial test).\n\nMicrosoft finally informed me, that the issue is going to be fixed with the October patch for Windows 10. It was was released with KB4041691 on October 10, 2017.\n\nThe remaining sections describe the technical aspects of the attack. Let's start with the original approach presented by Mubix.\n\n## Snaggin creds from locked machines by Rob \"Mubix\" Fuller\n\nAs the blog post which explains everything has been linked above, I don't get into details too much. This is the summary of the attack:\n\n1. A new network device is deployed and runs a DHCP server which hands out leases to the target.\n2. One of the DHCP options is a `Web Proxy Autodiscovery Protocol (WPAD)` entry (option 252). This entry promotes the URL on which the clients are able to receive a `Proxy-Auto-Configuration (PAC)` file. While WPAD could fill several text pages if considered as attack vector, some aspects are of importance here:\n   - The WPAD entry delivered via DHCP has priority over WPAD entries deployed over DNS, from Windows perspective\n   - The PAC script has to be fetched via HTTP by the client in order to use it\n   - This means, a simple DHCP option could be used to induce the target OS to issue a HTTP request to an attacker controlled URL. At least Windows seems to be happy to do so in the end.\n3. As the attacker is in control of the DHCP leases provided to the target, it isn't much of a problem to propagate a gateway or DNS server, in order to redirect HTTP requests to himself (the malicious network device). In fact this isn't needed at all, as the WPAD URL could use a host part, which directly points to the malicious device.\n4. As every webserver can ask the HTTP client for authentication, Mubix uses Responder to do exactly this for incoming requests to the PAC file provided with the WPAD URL. In contrast to most public webservers, neither *BASIC AUTHENTICATION*, nor *DIGEST AUTHENTICATION* is used, but the rogue webserver is asking the client for *NTLM HTTP AUTHENTICATION*. This basically means, the webserver provides a challenge to the client, which is used along with the user's password to create an NTLMv2 hash. To be more precise, a NetNTLMv2 hash is created (a pure NTLM hash wouldn't contain a salt). Having a hash with salt renders PtH attacks or rainbow table cracking useless. Anyway, as Responder issued the challenge, the salt is known to the attacker and the password is crackable (depending on how strong it was chosen).\n5. Windows tries to fetch the PAC file (even if the machine is locked) and happily sends the NetNTLMv2 hash for the currently active user logon session to the target.\n\nDoing all of this takes less than a minute (including installing drivers for the malicious USB Ethernet device).\n\n## Changes introduced to Mubix's attack in P4wnP1's LockPicker\n\n\n### 1. Switching USB VID\nThe first change I introduced, was that every attack is carried out with a new USB device.\n\nBased on my observations, carrying out the attack multiple times against the same target with the same device doesn't work well. I haven't done in-depth analysis on the cause, but it seems Windows stores proxy settings for formerly seen networks in registry. Changing USB settings like USB PID and VID, while still being able to use Windows Plug and Play class drivers for USB RNDIS networking, was one of the early tasks of P4wnP1. This essentially allows to chose a **random USB PID** on every boot, which in the end makes Windows believe that it has to deal with a new USB Ethernet device which is unknown so far (no matter how often it is used, unless the randomly chosen PID collides with a PID used earlier).\n\n### 2. No authentication on WPAD URL\n\nInstead of forcing the client to authenticate against the WPAD URL, the PAC script is delivered without further authentication. This allows the client to issue HTTP CONNECT requests against a HTTP proxy, which is propagated in the PAC script. The HTTP proxy now asks for the NTLM authentication, when the client requests a web resource from the proxy via HTTP CONNECT. It is worth mentioning, that the tool used to accomplish this task was Responder and that the feature of delivering the PAC file without authentication was requested by somebody well-known in 2012: [Mubix](https://github.com/SpiderLabs/Responder/issues/4)\n\n### 3. Intercepting almost every public IPv4 address\n\nThe DHCP server running on P4wnP1 propagates two static routing entries:\n- `0.0.0.0/1` gateway P4wnP1 IP\n- `128.0.0.0/1` gateway P4wnP1 IP\n\nFrom client perspective there are two new known networks, which wrap up the IPv4 range.\nThis means: For none of the possible target IPs the system's default gateway has to be used, because a more specific route exists, pointing to P4wnP1. Every packet destinated to an IP address in this range (except the ones for private networks which have a more specific route on the target) gets delivered to P4wnP1. Up to this point, this is exactly the approach used by Samy Kamkar with PoisontTap, but one thing is missing so far:\nThe packets are received by P4wnP1, but destinated to a foreign IP. Even if IPv4 forwarding would have been enabled, we haven't got an upstream connection, which could be used to deliver the packets (at least with this P4wnP1 payload ;-) ).\n\nThis last problem is solved with a simple iptables rule, which redirects every UDP and TCP packet destinated to the outside (hits the PREROUTING chain of the NAT table) back to P4wnP1:\n\n```\niptables -t nat -A PREROUTING -i $active_interface -p tcp -m addrtype ! --dst-type MULTICAST,BROADCAST,LOCAL -j REDIRECT\niptables -t nat -A PREROUTING -i $active_interface -p udp -m addrtype ! --dst-type MULTICAST,BROADCAST,LOCAL -j REDIRECT\n```\n\nAs shown in the iptables rules above, multicast and broadcast addresses are excluded. Multicast LLMNR requests, for example, are fetched by Responder in order to poison this type of name resolution (and as a result redirect traffic to P4wnP1's IP).\n\nSo why has this been done, anyway? Now, as the attack is backed by Responder authentication could be forced on a bunch of other services by this tool (FTP, SMB, HTTP etc.). We only assure that Responder is able to receive every possible request.\n\nIt should be noted, that the target isn't able to connect to any public service while doing this, as essentially everything ends up being fetched by Responder. So these settings are only used in this special P4wnP1 payload and considered demystified now (I received several requests for explanation of the respective payload options):\n- the `WPAD_ENTRY` option enables propagation of a WPAD URL pointing to P4wnP1's IP via DHCP\n- the `ROUTE_SPOOF` option enables propagation of the two routes highlighted above via DHCP\n\nWhy was I doing that ? Consider the following scenario:\n\nWe try to force Windows to send an NTLM authenticated HTTP CONNECT request to P4wnP1, where Responder is waiting to receive such an request on its rogue HTTP Proxy (to grab the hash). If this won't happen, there's still a chance some 3rd party software is issuing such an authenticated request. If the 3rd party software respects the systems proxy settings, we are fine - everything would work as intended and the hash would end up at Responder. If the 3rd party software disrespects the proxy and sends a HTTP request to a hard coded public IP, the outbound packet would match one of the two routes given above and ultimately being send to P4wnP1 (acting as gateway for the two routes). P4wnP1 now redirects the packet (meant to be routed outwards) to itself, where it ends up at Responders rouge HTTP server again. Authentication is requested once more and a hash could be grabbed. \n\nWhy a \"hard coded\" IP ? Only to explain the behavior, if the client tries to resolve the IP via DNS, the result would end directly at the P4wnP1 IP, because Responder runs a rogue DNS server (which has been propagated via DHCP). Additionally we are talking about a scenario where a USB Ethernet device gets attached to a target machine, which already had network access - for sure some DNS queries have already been resolved and the IPs ended up in DNS cache. We owe these remote IPs now.\n\n\nOne more thing should be mentioned according the example above: Instead of forcing authentication on pure HTTP GET requests, Responder could be tuned to deliver a default HTTP response. This again could be used to deliver a webpage with a HTML element pointing to a source like `file://p4wnp1_ip/something`. Depending on the browser settings, this would force an SMB request to the UNC path used. The SMB request again ends up on Responder which forces NTLM authentication on the faked SMB share.\n\nOh ... how could I forget - if you're curious why Responder could force authentication on HTTP, but deliver a response in case the WPAD config is requested ... this was another small modification I introduced to Responder for testing purposes.\n\nTo summarize:\nThe changes introduced are raising the chances to grab a hash in ways differing from the one intended initially.\n\n\n\n### 4. Passing MSFT connect tests\n\nThis isn't exactly a change used by this payload (it wasn't needed), but a feature introduced to the modified Responder.\nWindows does some DNS and HTTP requests to well known URLs with predefined content, in order to determine if Internet access is available (this is for example used for captive portal detection). In an early phase of the project, I thought it would be a good idea to make Windows believe it is online, although every communication ends up at P4wnP1. It turns out that this isn't needed to carry out the attack, as the needed HTTP CONNECT requests are issued by Windows, even if the connect tests failed. So this isn't used by the payload, but the feature exists.\n\n### 5. Grabbing the hash from Responder's SQLLite DB\n\nInstead of trying to rip out a captured hash from one of the log files produced by Responder, the hashes are directly exported from the SQLite database used by Responder. This has several advantages: The most important one is, that the needed SQL query could be used to filter out false positives.\n\nWhat are false positives ?\n\nAs mentioned there exists 3rd party software, which is pleased to provide some hashes to Responder. Unfortunately, these hashes couldn't always be used, because they don't represent a logon session. I don't comment on what Software I'm talking about, but if you take a closer look on the payload you could see which hashes I wasn't interested in.\n\n### 6. Storing, cracking, typing out\n\nThere's not much to say about this. P4wnP1's ships with a pre-compiled version of John the Ripper (JtR) Jumbo. If you throw JtR Jumbo against a file with NetNTLMv2 hashes without changing its default settings, it will try to crack in so called \"batch mode\". This means: JtR starts with a dictionary attack (dictionary of about 30000 weak credentials packed with JtR Jumbo) and goes on with pattern based bruteforcing until it is stopped by someone or the hash has been cracked.\n\nNow `LockPicker` waits till JtR succeeds (of course a grabbed hash is stored internally before doing so, so one could walk away with it and go on with offline cracking).\nOn success the payload stores the plain password for later use and hands it over to the emulated HID keyboard which types it out to ultimatly unlock the box.\n\nIn order to do so, two conditions have to be met (beside the password being weak enough to get cracked):\n- The language setting of the payload has to match the target's keyboard language layout\n- The plain password must only consist of ASCII chars, only. This is due to the fact, that P4wnP1's internal keyboard implementation interprets ASCII input only (which is fine for being DuckyScript compatible, but not enough to type out unicode chars from different languages)\n\n### Conclusion\n\nThe extensions mentioned made the attack pretty much reliable and produce at least a stored hash in nearly every case. \n\n\n## Root cause analysis / Microsoft Patch\n\nAs already mentioned, I didn't put enough effort into this. For instance I didn't analyze which binaries are involved (although I got a rough picture on the Windows services accessing the rogue HTTP proxy). I was focused on analyzing the network traffic. Doing this, it became pretty clear that the service which sent out the hashes was belonging to Windows 10 itself. When recognizing this, I reported to Microsoft without further delays. There hasn't been a CVE assigned, because this case was considered as *\"part of an overall hardening effort for NTLM\"* by Microsoft. For this reason I don't provide a disclosure timeline in this writeup. In the end it is important to know, that Microsoft addressed the issue with KB4041691 on October 10, 2017.\n\nThe following questions haven't been answered by Microsoft (or have been answered with *\"no comment\"*):\n\n\n1) Is the patch going to prevent 3rd party tools from leaking NTLM hashes from locked machines (like the Java JRE updater problem mentioned in the projects README) ?\n2) How is the problem addressed on Windows 7, it was proven vulnerable to the same attack in most of my tests ?\n3) \"hardening effort for NTLM\" is a term leaving much room for interpretation. Does it refer to measures against leaking of hashes or using them for authentication (like PtH attacks or attacks against TGT/TGS combined with kerberos RC4 downgrade). I doubt you're referring the latter, as the case was related to NetNTLMv2 not to NTLM(v2). So could you please be more precise on \"hardening effort for NTLM\"?\n\n### Relevant Network communication on a System without patch applied\n\n#### 1. DHCP (Discover, Offer, Request, Ack)\n\nHere the DHCP Offer is of interest:\n\n```\nBootstrap Protocol (Offer)\n... snip ...\n    Your (client) IP address: 172.16.0.2\n    Next server IP address: 172.16.0.1\n... snip ...\n    Option: (54) DHCP Server Identifier\n        Length: 4\n        DHCP Server Identifier: 172.16.0.1\n... snip ...\n    Option: (252) Private/Proxy autodiscovery\n        Length: 26\n        Private/Proxy autodiscovery: http://172.16.0.1/wpad.dat\n    Option: (249) Private/Classless Static Route (Microsoft)\n        Length: 12\n         0.0.0.0/1-172.16.0.1\n         128.0.0.0/1-172.16.0.1\n    Option: (121) Classless Static Route\n        Length: 12\n         0.0.0.0/1-172.16.0.1\n         128.0.0.0/1-172.16.0.1\n    Option: (44) NetBIOS over TCP/IP Name Server\n        Length: 4\n        NetBIOS over TCP/IP Name Server: 172.16.0.1\n    Option: (6) Domain Name Server\n        Length: 4\n        Domain Name Server: 172.16.0.1\n    Option: (3) Router\n        Length: 4\n        Router: 172.16.0.1\n... snip ...\n```\n\nThe excerpt from above highlight the points already discussed (static IPv4 routes + URL to PAC script).\n\n#### 2. Request to PAC file on provided WPAD URL\n\n```\nGET /wpad.dat HTTP/1.1\nConnection: Keep-Alive\nAccept: */*\nUser-Agent: WinHttp-Autoproxy-Service/5.1\nHost: 172.16.0.1\n\nHTTP/1.1 200 OK\nServer: Microsoft-IIS/7.5\nDate: Thu, 03 Aug 2017 14:53:25 GMT\nContent-Type: application/x-ns-proxy-autoconfig\nContent-Length: 333\n\nfunction FindProxyForURL(url, host){if ((host == \"localhost\") || shExpMatch(host, \"localhost.*\") ||(host == \"127.0.0.1\") || (host == \"10.0.0.1\") || isPlainHostName(host)) return \"DIRECT\"; if (dnsDomainIs(host, \"RespProxySrv\")||shExpMatch(host, \"(*.RespProxySrv|RespProxySrv)\")) return \"DIRECT\"; return \"PROXY authtome:3128; DIRECT\";}\n```\n\nThe snippet above shows how a Windows requests the propagated PAC file with a service using the user agent `WinHttp-Autoproxy-Service/5.1`.\n\nAdditionally it is shown that this request succeeds (no authentication requested) and a PAC script is delivered, which advices the HTTP clients to use the WebProxy at `authtome:3128` for every connection which isn't directed to `localhost` or `10.0.0.1`.\n\nAs `authtome` isn't a known host, the client is forced to resolve the name (LLMNR, NBNS, DNS). It would have been easier to supply the P4wnP1 IP directly, but responder is answering name resolution requests anyway (so this wasn't needed and never changed).\n\n\n#### 3. Name Resolution via LLMNR\n\n```\nInternet Protocol Version 4, Src: 172.16.0.1, Dst: 172.16.0.2\nUser Datagram Protocol, Src Port: 5355, Dst Port: 51442\nLink-local Multicast Name Resolution (response)\n... snip ...\n    Queries\n        authtome: type A, class IN\n            Name: authtome\n            [Name Length: 8]\n            [Label Count: 1]\n            Type: A (Host Address) (1)\n            Class: IN (0x0001)\n    Answers\n        authtome: type A, class IN, addr 172.16.0.1\n            Name: authtome\n            Type: A (Host Address) (1)\n            Class: IN (0x0001)\n            Time to live: 30\n            Data length: 4\n            Address: 172.16.0.1\n```\n\nThe snippet shows the response of Responder for the LLMNR based name resolution request for `authtome`. So `authme` is now tied to P4wnP1's IP.\nThis \"namespoofing\" actually isn't a needed part to make the hash stealing attack work. I included it to highlight that the goal could be achieved using other spoofing / redirection / MitM attacks. \n\nWhy ? Because even Microsoft asked for clarification on how this vector could be exploited network based (remember, conflict with #3 of \"10 Immutable Laws Of Security\"), without attaching an USB device. Of course there are many ways to grab a NetNTLM(v2) hash network based, especially when Responder joins the game. I'm also aware of the fact, that is doesn't matter if the boxes spitting out hashes are locked during an engagement, when network access is granted - but in this context it should matter (Keep WiFi based attacks in mind - Evil Twin, Karma APs etc.).\n\n#### 4. CONNECT request on proxy (authtome:3128)\n\n```\n ... snip ...\nInternet Protocol Version 4, Src: 172.16.0.2, Dst: 172.16.0.1\nTransmission Control Protocol, Src Port: 50286, Dst Port: 3128, Seq: 1, Ack: 1, Len: 103\nHypertext Transfer Protocol\n    CONNECT v10.vortex-win.data.microsoft.com:443 HTTP/1.1\\r\\n\n    Host: v10.vortex-win.data.microsoft.com:443\\r\\n\n    \\r\\n\n    [Full request URI: v10.vortex-win.data.microsoft.com:443]\n```\n\nThe snippet shown above shows one of the early CONNECT requests to our proxy for a well known domain. Additionally it showcases another advantage of using a proxy over using a webserver, when it comes to traffic analysis: In contrast to a normal HTTP GET request, a CONNECT request contains a complete URI, because the proxy isn't DNS aware. In other words, you don't need to correlate to DNS requests.\n\nLet's look have a look into the content of the answer:\n\n```\nHTTP/1.1 407 Unauthorized\nServer: Microsoft-IIS/7.5\nDate: Thu, 03 Aug 2017 14:53:25 GMT\nContent-Type: text/html\nProxy-Authenticate: NTLM\nProxy-Connection: close\nCache-Control: no-cache\nPragma: no-cache\nProxy-Support: Session-Based-Authentication\nContent-Length: 0\n```\n\nThe proxy responds with a 407 and requests NTLM authentication!\n\n#### 5. Next CONNECT request (NTLMSSP negotiation + challenge)\n\n```\nInternet Protocol Version 4, Src: 172.16.0.2, Dst: 172.16.0.1\nTransmission Control Protocol, Src Port: 50287, Dst Port: 3128, Seq: 1, Ack: 1, Len: 187\nHypertext Transfer Protocol\n    CONNECT v10.vortex-win.data.microsoft.com:443 HTTP/1.1\\r\\n\n    Host: v10.vortex-win.data.microsoft.com:443\\r\\n\n    Proxy-Authorization: NTLM TlRMTVNTUAABAAAAB4IIogAAAAAAAAAAAAAAAAAAAAAKADk4AAAADw==\\r\\n\n        NTLM Secure Service Provider\n            NTLMSSP identifier: NTLMSSP\n            NTLM Message Type: NTLMSSP_NEGOTIATE (0x00000001)\n            Negotiate Flags: 0xa2088207, Negotiate 56, Negotiate 128, Negotiate Version, Negotiate Extended Security, Negotiate Always Sign, Negotiate NTLM key, Request Target, Negotiate OEM, Negotiate UNICODE\n            Calling workstation domain: NULL\n            Calling workstation name: NULL\n            Version 10.0 (Build 14393); NTLM Current Revision 15\n    \\r\\n\n    [Full request URI: v10.vortex-win.data.microsoft.com:443]\n```\n\nThe new CONNECT request shown above starts the NTLM negotiation with data provided by the Windows \"Security Support Provider (SSP)\"\n\n```\n    HTTP/1.1 407 Unauthorized\\r\\n\n    Server: Microsoft-IIS/7.5\\r\\n\n    Date: Thu, 03 Aug 2017 14:53:25 GMT\\r\\n\n    Content-Type: text/html\\r\\n\n     [truncated]Proxy-Authenticate: NTLM TlRMTVN ... snip ... wADMALgBzAG0AYg\n        NTLM Secure Service Provider\n            NTLMSSP identifier: NTLMSSP\n            NTLM Message Type: NTLMSSP_CHALLENGE (0x00000002)\n            Target Name: SMB\n            Negotiate Flags: 0xa2890205, Negotiate 56, Negotiate 128, Negotiate Version, Negotiate Target Info, Negotiate Extended Security, Target Type Domain, Negotiate NTLM key, Request Target, Negotiate UNICODE\n            NTLM Server Challenge: e45117cfa5e7264c\n            Reserved: 0000000000000000\n            Target Info\n            Version 5.2 (Build 3790); NTLM Current Revision 15\n    Content-Length: 0\\r\\n\n    \\r\\n\n```\n\nAgain Responder send back a 407 to the negotiation request, but instead of a `Proxy-Connection: close` header like in the last response, a CHALLENGE is sent to the client.\nAs the challenge is produced by responder, it is known to the attacker and could be used to crack the resulting NTLM hash. \nSo the last part of the puzzle is the NTLMSSP_AUTH response, which we await to receive for our challenge. The NTLMSSP_AUTH should contain the NetNTLMv2 hash.\n\n#### 6. Receiving the NTLMSSP_AUTH (empty)\n\n```\nHypertext Transfer Protocol\n    CONNECT v10.vortex-win.data.microsoft.com:443 HTTP/1.1\\r\\n\n    Host: v10.vortex-win.data.microsoft.com:443\\r\\n\n    Proxy-Authorization: NTLM TlRMTV ...snip ... BJAAA=\\r\\n\n        NTLM Secure Service Provider\n            NTLMSSP identifier: NTLMSSP\n            NTLM Message Type: NTLMSSP_AUTH (0x00000003)\n            Lan Manager Response: 00\n            NTLM Response: Empty\n            Domain name: NULL\n            User name: NULL\n            Host name: DESKTOP-4CDILFI\n            Session Key: Empty\n... snip ...\n```\n\nThe HTTP payload above is an excerpt from the NTLMSSP_AUTH received from the service requesting `CONNECT v10.vortex-win.data.microsoft.com:443`. \n\nThe nice thing about this is that both, `USER name` and `NTLM Response` are empty. So the attacker isn't able to receive a hash.\n\nIt is worth mentioning, that the same happens with a bunch of other services, among others the connection tests (e.g. `http://www.msftconnecttest.com/connecttest.txt` for Windows 10). Additionally it is worth mentioning that although connection tests respect the proxy, they use a `HTTP GET` request instead of a `HTTP CONNECT` (maybe part of connection testing together with neat things like STUN). One thing I was curious about is that, although all connection tests failed, Windows doesn't give up on requesting `v10.vortex-win.data.microsoft.com`. Interpretation of this agressive behavior is left to the reader.\n\nThe most curious thing is pointed out under the next heading:\n\n#### 7. Receiving the NTLMSSP_AUTH from a chatty service\n\n```\nHypertext Transfer Protocol\n    GET http://ctldl.windowsupdate.com/msdownload/update/v3/static/trustedr/en/authrootstl.cab?a37ed22714196257 HTTP/1.1\\r\\n\n    Proxy-Connection: Keep-Alive\\r\\n\n    Accept: */*\\r\\n\n    User-Agent: Microsoft-CryptoAPI/10.0\\r\\n\n    Host: ctldl.windowsupdate.com\\r\\n\n     [truncated]Proxy-Authorization: NTLM TlRMTVNT ... snip ... QA0AEMAR\n        NTLM Secure Service Provider\n            NTLMSSP identifier: NTLMSSP\n            NTLM Message Type: NTLMSSP_AUTH (0x00000003)\n            Lan Manager Response: 000000000000000000000000000000000000000000000000\n            LMv2 Client Challenge: 0000000000000000\n            NTLM Response: 5895b13976 ... snip ...\n            Domain name: DESKTOP-4CDILFI\n            User name: unpriv\n            Host name: DESKTOP-4CDILFI\n            Session Key: Empty\n   \\r\\n\n    [Full request URI: http://ctldl.windowsupdate.com/msdownload/update/v3/static/trustedr/en/authrootstl.cab?a37ed22714196257]\n```\n\nThe NTLMSSP_AUTH shown above is produced by a ** service vulnerable to the attack** (negotiation and challenge are left out, but follow the principals introduced before).\n\nSome things have changed:\n1. A User-Agent header was introduced, allowing a very, very, very rough guess on the service producing this **`User-Agent: Microsoft-CryptoAPI/10.0`**\n2. The request URI (GET request), allows a very rough guess on the application being responsible for this request **`... http://ctldl.windowsupdate.com/ ...`** (questions like, why is this plain HTTP are out of scope)\n3. A **username** and **NTLM Response** have been provided \n\nSo at this point we have a valid NetNTLMv2 hash, along with the challenge which is enough for cracking.\n\nIt should be noted that the test system wasn't domain joined !!!\n\n### Relevant Network communication on a System patched with KB4041691\n\n\n```\nHypertext Transfer Protocol\n    CONNECT fe2.update.microsoft.com:443 HTTP/1.1\\r\\n\n    Host: fe2.update.microsoft.com:443\\r\\n\n    Proxy-Authorization: NTLM TlRMTVNTUAAD ...snip... BJAEwARgBJAAA=\\r\\n\n        NTLM Secure Service Provider\n            NTLMSSP identifier: NTLMSSP\n            NTLM Message Type: NTLMSSP_AUTH (0x00000003)\n            Lan Manager Response: 00\n            NTLM Response: Empty\n            Domain name: NULL\n            User name: NULL\n            Host name: DESKTOP-4CDILFI\n            Session Key: Empty\n            Negotiate Flags: 0xa2880a05, Negotiate 56, Negotiate 128, Negotiate Version, Negotiate Target Info, Negotiate Extended Security, Negotiate Anonymous, Negotiate NTLM key, Request Target, Negotiate UNICODE\n            Version 10.0 (Build 14393); NTLM Current Revision 15\n... snip ...\n\n\nHypertext Transfer Protocol\n    CONNECT sls.update.microsoft.com:443 HTTP/1.1\\r\\n\n    Host: sls.update.microsoft.com:443\\r\\n\n    Proxy-Authorization: NTLM TlRMTVNT ... snip ... ARgBJAAA=\\r\\n\n        NTLM Secure Service Provider\n            NTLMSSP identifier: NTLMSSP\n            NTLM Message Type: NTLMSSP_AUTH (0x00000003)\n            Lan Manager Response: 00\n            NTLM Response: Empty\n            Domain name: NULL\n            User name: NULL\n            Host name: DESKTOP-4CDILFI\n            Session Key: Empty\n            Negotiate Flags: 0xa2880a05, Negotiate 56, Negotiate 128, Negotiate Version, Negotiate Target Info, Negotiate Extended Security, Negotiate Anonymous, Negotiate NTLM key, Request Target, Negotiate UNICODE\n            Version 10.0 (Build 14393); NTLM Current Revision 15\n... snip ...\n```\n\nI left out most of the thing already explained. The two HTTP payloads shown above are NTLMSSP_AUTH responses to new update URIs. Both arrived at the rogue proxy (among with other requests already discussed). **None of the NTLMSSP_AUTH packages seen on the test system contained a `NTLM Response` or `User name`**. A request from a service with user agent `Microsoft-CryptoAPI/10.0` or a request targeting `http://ctldl.windowsupdate.com` hasn't been spotted in my tests.\n\n### Conclusion\n\nThe issue spotted and reported to Microsoft seems to be patched. I haven't done further research on the following aspects (and I won't do it):\n\n- identifying the binary responsible for delivering the hashes on an unpatched system\n- binary diffing the patch\n- testing on Windows 7\n- testing on domain joined machines\n- not verified that 3rd party applications aren't able to send NTLMSSP_AUTHs with valid hashes from locked machines\n\n## Credits\n\n- Rogan Dawes + Sensepost\n- Rob \"Mubix\" Fuller\n- Seytonic\n- Samy Kamkar\n- Microsoft (MSRC + Nate)\n- lgandx (+ SpiderLabs for Responder)\n\nEvery supporter of P4wnP1 and the growing Github community\n"
        }
      ]
    }
  ]
}