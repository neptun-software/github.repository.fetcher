{
  "metadata": {
    "timestamp": 1736559900041,
    "page": 656,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cornellius-gp/gpytorch",
      "stars": 3623,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".conda",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.9267578125,
          "content": "# Atom plugin files and ctags\n.ftpconfig\n.ftpconfig.cson\n.ftpignore\n*.tags\n*.tags1\n\n# VS Code settings stuff\n.vscode\n.pylintrc\n# Project specific\ngpytorch/libfft\n.pytest_cache\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Type checking\n.pyre/\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n# vim\n*.swp\n\n# watchman\n.watchmanconfig\n\n# Ignore macOS stuff\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n# Data files that might be downloaded\n**/*.tar.gz\n**/*.txt\n\n# version file (auto-generated by setuptools_scm)\ngpytorch/version.py\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.1865234375,
          "content": "repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.2.0\n    hooks:\n    -   id: check-byte-order-marker\n    -   id: check-case-conflict\n    -   id: check-merge-conflict\n    -   id: end-of-file-fixer\n    -   id: forbid-new-submodules\n    -   id: mixed-line-ending\n        args: [--fix=lf]\n    -   id: trailing-whitespace\n    -   id: debug-statements\n-   repo: https://github.com/pycqa/flake8\n    rev: 4.0.1\n    hooks:\n    -   id: flake8\n        args: [--config=setup.cfg]\n        exclude: ^(examples/.*)|(docs/.*)\n-   repo: https://github.com/omnilib/ufmt\n    rev: v2.0.0\n    hooks:\n    -   id: ufmt\n        additional_dependencies:\n        - black == 22.3.0\n        - usort == 1.0.3\n        exclude: ^(build/.*)|(docs/.*)|(examples/.*)\n-   repo: https://github.com/jumanjihouse/pre-commit-hooks\n    rev: 2.1.6\n    hooks:\n    -   id: require-ascii\n        exclude: ^(examples/.*\\.ipynb)|(.github/ISSUE_TEMPLATE/.*)\n    -   id: script-must-have-extension\n    -   id: forbid-binary\n        exclude: ^(examples/.*)|(test/examples/old_variational_strategy_model.pth)\n-   repo: https://github.com/Lucas-C/pre-commit-hooks\n    rev: v1.1.13\n    hooks:\n    -   id: forbid-crlf\n    -   id: forbid-tabs\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 0.1748046875,
          "content": "[TYPECHECK]\n\n# List of members which are set dynamically and missed by Pylint inference\n# system, and so shouldn't trigger E1101 when accessed.\ngenerated-members=numpy.*, torch.*\n"
        },
        {
          "name": ".pyre_configuration",
          "type": "blob",
          "size": 0.4697265625,
          "content": "{\n  \"site_package_search_strategy\": \"pep561\",\n  \"source_directories\": [\n    \"gpytorch/\"\n  ],\n  \"ignore_all_errors\": [\n    \"gpytorch/functions/*.py\",\n    \"gpytorch/lazy/*.py\",\n    \"gpytorch/test/*.py\"\n  ],\n  \"search_path\": [\n    \".\",\n    \"../linear_operator\",\n    {\"site-package\": \"faiss\"},\n    {\"site-package\": \"linear_operator\"},\n    {\"site-package\": \"pykeops\"},\n    {\"site-package\": \"pyro\"},\n    {\"site-package\": \"scipy\"},\n    {\"site-package\": \"sklearn\"}\n  ],\n  \"strict\": true\n}\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.8193359375,
          "content": "# .readthedocs.yml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\nbuild:\n  os: \"ubuntu-22.04\"\n  tools:\n    python: \"3.8\"\n  jobs:\n    pre_install:  # Lock version of torch at 1.11\n      - pip install torch==1.11.0+cpu -f https://download.pytorch.org/whl/torch_stable.html\n    pre_build:\n      - python -m setuptools_scm  # Get correct version number\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/source/conf.py\n  fail_on_warning: true\n\n# Optionally build your docs in additional formats such as PDF\n#formats:\n  #- pdf\n\n# Optionally set the version of Python and requirements required to build your docs\npython:\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - docs\n        - pyro\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.4970703125,
          "content": "# Contributing to GPyTorch\n\nThanks for contributing!\n\n## Development installation\n\nTo get the development installation with all the necessary dependencies for\nlinting, testing, and building the documentation, run the following:\n```bash\ngit clone https://github.com/cornellius-gp/gpytorch.git\ncd gpytorch\npip install -e .[dev,docs,examples,keops,pyro,test]  # keops and pyro are optional\npre-commit install\n```\n\n\n## Our Development Process\n\n### Formatting and Linting\n\nGPyTorch uses [pre-commit](https://pre-commit.com) for code formatting\nand [flake8](https://flake8.pycqa.org/en/latest/) for linting.\nThis enforces a common code style across the repository.\nThe [development installation instructions](#development-installation) should install both tools, and no additional configuration should be necessary.\n\n`flake8` and `pre-commit` are both run every time you make a local commit.\nTo run both commands independent of making a commit:\n```bash\nSKIP=flake8 pre-commit run --files test/**/*.py gpytorch/**/*.py\nflake8\n```\n\n### Docstrings\nWe use [standard sphinx docstrings](https://sphinx-rtd-tutorial.readthedocs.io/en/latest/docstrings.html) (not Google-style).\n\n\n### Type Hints\n\nGPyTorch aims to be fully typed using Python 3.8+\n[type hints](https://www.python.org/dev/peps/pep-0484/).\n\nWe recognize that we have a long way to go towards fully typing the library,\nbut we expect all contributions to also use proper type annotations.\nWhile we currently do not enforce full consistency of these in our continuous integration\ntest, you should strive to type check your code locally.\nFor this we recommend using [pyre](https://pyre-check.org/).\n\n\n### Unit Tests\n\nWe use python's `unittest` to run unit tests:\n```bash\npython -m unittest\n```\n\n- To run tests within a specific directory, run (e.g.) `python -m unittest discover -s test/kernels`.\n- To run a specific unit test, run (e.g.) `python -m unittest test.operators.test_rbf_kernel.TestRBFKernel.test_active_dims_range`.\n\n\n### Documentation\n\nGPyTorch uses sphinx to generate documentation, and ReadTheDocs to host documentation.\nTo build the documentation locally, ensure that sphinx and its plugins are properly installed (see the [development installation section](#development-installation) for instructions).\nThen run:\n\n```bash\ncd docs\nSKIP_EXAMPLES=true make html\ncd build/html\npython -m http.server 8000\n```\n\nIf you are making an update to one of the example notebooks, drop the `SKIP_EXAMPLES=true` environment variable:\n(This takes longer to build.)\n\n```bash\ncd docs\nmake html\ncd build/html\npython -m http.server 8000\n```\n\nThe documentation will be available at http://localhost:8000.\nYou will have to rerun the `make html` or `SKIP_EXAMPLES=true make html` command every time you wish to update the docs.\n\n**Important**: Our CI requires that the documentation compiles *WITHOUT WARNINGS*.\nPlease ensure that you can build the documentation locally without producing any warnings.\n\n## Pull Requests\nWe greatly appreciate PRs! To minimze back-and-forward communication, please ensure that your PR includes the following:\n\n1. **Code changes.** (the bug fix/new feature/updated documentation/etc.)\n1. **Unit tests.** If you are updating any code, you should add an appropraite unit test.\n   - If you are fixing a bug, make sure that there's a new unit test that catches the bug.\n     (I.e., there should be a new unit test that fails before your bug fix, but passes after your bug fix.\n     This ensures that we don't have any accidental regressions in the code base.)\n   - If you are adding a new feature, you should add unit tests for this new feature.\n1. **Documentation.** Any new objects/methods should have [appropriate docstrings](#docstrings).\n   - If you are adding a new object, **please ensure that it appears in the documentation.**\n     You may have to add the object to the appropriate file in [docs/source](https://github.com/cornellius-gp/gpytorch/tree/main/docs/source).\n1. **Example notebooks.** Any major new functionality, tutorials, or examples should have an example jupyter notebook.\n   - If you are adding a new notebook, **please ensure that it appears in the documentation.**\n     You may have to add the object to the appropriate file in [docs/source](https://github.com/cornellius-gp/gpytorch/tree/main/examples/).\n\nBefore submitting a PR, ensure the following:\n1. **Code is proprerly formatted and linted.** Linting and formatting checking should happen automatically if you have followed the development installation instructions.\n   See [the formatting and linting](#formatting-and-linting) section for more info.\n1. **Unit tests pass.** See [the unit tests section](#unit-tests) for more info.\n1. **Documentation renders correctly without warnings.** [Build the documentation locally](#documentation) to ensure that your new class/docstrings are rendered correctly. Ensure that sphinx can build the documentation without warnings.\n\n\n## Issues\n\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\nWe accept the following types of issues:\n- Bug reports\n- Requests for documentation/examples\n- Feature requests\n- Opportuntities to refactor code\n- Performance issues (speed, memory, etc.)\n\nPlease refrain from using the issue tracker for questions or debugging personal code.\nInstead please use the [GPyTorch discussions forum](https://github.com/cornellius-gp/gpytorch/discussions).\n\n## License\n\nBy contributing to GPyTorch, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2017 Jake Gardner\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.7177734375,
          "content": "# GPyTorch\n\n---\n[![Test Suite](https://github.com/cornellius-gp/gpytorch/actions/workflows/run_test_suite.yml/badge.svg)](https://github.com/cornellius-gp/gpytorch/actions/workflows/run_test_suite.yml)\n[![Documentation Status](https://readthedocs.org/projects/gpytorch/badge/?version=latest)](https://gpytorch.readthedocs.io/en/latest/?badge=latest)\n[![License](https://img.shields.io/badge/license-MIT-green.svg)](LICENSE)\n\n[![Python Version](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\n[![Conda](https://img.shields.io/conda/v/gpytorch/gpytorch.svg)](https://anaconda.org/gpytorch/gpytorch)\n[![PyPI](https://img.shields.io/pypi/v/gpytorch.svg)](https://pypi.org/project/gpytorch)\n\nGPyTorch is a Gaussian process library implemented using PyTorch. GPyTorch is designed for creating scalable, flexible, and modular Gaussian process models with ease.\n\nInternally, GPyTorch differs from many existing approaches to GP inference by performing most inference operations using numerical linear algebra techniques like preconditioned conjugate gradients.\nImplementing a scalable GP method is as simple as providing a matrix multiplication routine with the kernel matrix and its derivative via our [LinearOperator](https://github.com/cornellius-gp/linear_operator) interface,\nor by composing many of our already existing `LinearOperators`.\nThis allows not only for easy implementation of popular scalable GP techniques,\nbut often also for significantly improved utilization of GPU computing compared to solvers based on the Cholesky decomposition.\n\nGPyTorch provides (1) significant GPU acceleration (through MVM based inference);\n(2) state-of-the-art implementations of the latest algorithmic advances for scalability and flexibility ([SKI/KISS-GP](http://proceedings.mlr.press/v37/wilson15.pdf), [stochastic Lanczos expansions](https://arxiv.org/abs/1711.03481), [LOVE](https://arxiv.org/pdf/1803.06058.pdf), [SKIP](https://arxiv.org/pdf/1802.08903.pdf), [stochastic variational](https://arxiv.org/pdf/1611.00336.pdf) [deep kernel learning](http://proceedings.mlr.press/v51/wilson16.pdf), ...);\n(3) easy integration with deep learning frameworks.\n\n\n## Examples, Tutorials, and Documentation\n\nSee our [**documentation, examples, tutorials**](https://gpytorch.readthedocs.io/en/latest/) on how to construct all sorts of models in GPyTorch.\n\n## Installation\n\n**Requirements**:\n- Python >= 3.8\n- PyTorch >= 2.0\n\nInstall GPyTorch using pip or conda:\n\n```bash\npip install gpytorch\nconda install gpytorch -c gpytorch\n```\n\n(To use packages globally but install GPyTorch as a user-only package, use `pip install --user` above.)\n\n#### Latest (Unstable) Version\n\nTo upgrade to the latest (unstable) version, run\n\n```bash\npip install --upgrade git+https://github.com/cornellius-gp/linear_operator.git\npip install --upgrade git+https://github.com/cornellius-gp/gpytorch.git\n```\n\n#### Development version\n\nIf you are contributing a pull request, it is best to perform a manual installation:\n\n```sh\ngit clone https://github.com/cornellius-gp/gpytorch.git\ncd gpytorch\npip install -e .[dev,docs,examples,keops,pyro,test]  # keops and pyro are optional\n```\n\n#### ArchLinux Package\n**Note**: Experimental AUR package. For most users, we recommend installation by conda or pip.\n\nGPyTorch is also available on the [ArchLinux User Repository](https://wiki.archlinux.org/index.php/Arch_User_Repository) (AUR).\nYou can install it with an [AUR helper](https://wiki.archlinux.org/index.php/AUR_helpers), like [`yay`](https://aur.archlinux.org/packages/yay/), as follows:\n\n```bash\nyay -S python-gpytorch\n```\nTo discuss any issues related to this AUR package refer to the comments section of\n[`python-gpytorch`](https://aur.archlinux.org/packages/python-gpytorch/).\n\n\n## Citing Us\n\nIf you use GPyTorch, please cite the following papers:\n> [Gardner, Jacob R., Geoff Pleiss, David Bindel, Kilian Q. Weinberger, and Andrew Gordon Wilson. \"GPyTorch: Blackbox Matrix-Matrix Gaussian Process Inference with GPU Acceleration.\" In Advances in Neural Information Processing Systems (2018).](https://arxiv.org/abs/1809.11165)\n```\n@inproceedings{gardner2018gpytorch,\n  title={GPyTorch: Blackbox Matrix-Matrix Gaussian Process Inference with GPU Acceleration},\n  author={Gardner, Jacob R and Pleiss, Geoff and Bindel, David and Weinberger, Kilian Q and Wilson, Andrew Gordon},\n  booktitle={Advances in Neural Information Processing Systems},\n  year={2018}\n}\n```\n\n## Contributing\n\nSee the contributing guidelines [CONTRIBUTING.md](https://github.com/cornellius-gp/gpytorch/blob/main/CONTRIBUTING.md)\nfor information on submitting issues and pull requests.\n\n\n## The Team\n\nGPyTorch is primarily maintained by:\n- [Jake Gardner](https://www.cis.upenn.edu/~jacobrg/index.html) (University of Pennsylvania)\n- [Geoff Pleiss](http://github.com/gpleiss) (Columbia University)\n- [Kilian Weinberger](http://kilian.cs.cornell.edu/) (Cornell University)\n- [Andrew Gordon Wilson](https://cims.nyu.edu/~andrewgw/) (New York University)\n- [Max Balandat](https://research.fb.com/people/balandat-max/) (Meta)\n\nWe would like to thank our other contributors including (but not limited to)\nEytan Bakshy,\nWesley Maddox,\nKe Alexander Wang,\nRuihan Wu,\nSait Cakmak,\nDavid Eriksson,\nSam Daulton,\nMartin Jankowiak,\nSam Stanton,\nZitong Zhou,\nDavid Arbour,\nKarthik Rajkumar,\nBram Wallace,\nJared Frank,\nand many more!\n\n\n## Acknowledgements\nDevelopment of GPyTorch is supported by funding from\nthe [Bill and Melinda Gates Foundation](https://www.gatesfoundation.org/),\nthe [National Science Foundation](https://www.nsf.gov/),\n[SAP](https://www.sap.com/index.html),\nthe [Simons Foundation](https://www.simonsfoundation.org),\nand the [Gatsby Charitable Trust](https://www.gatsby.org.uk).\n\n\n## License\n\nGPyTorch is [MIT licensed](https://github.com/cornellius-gp/gpytorch/blob/main/LICENSE).\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "gpytorch",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.26953125,
          "content": "[build-system]\nrequires = [\"setuptools\", \"setuptools-scm\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.black]\nline-length = 120\n\n[tool.usort.known]\nfirst_party = [\"gpytorch\"]\n\n[tool.setuptools_scm]\nlocal_scheme = \"node-and-date\"\nwrite_to = \"./gpytorch/version.py\"\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.2373046875,
          "content": "[pep8]\nmax-line-length = 120\n\n[flake8]\nmax-line-length = 120\nignore = E203, E731, E741, F403, F405, F722, W503, W605\nexclude =\n  build,examples\n\n[build_sphinx]\nall-files = 1\nsource-dir = docs/source\nbuild-dir = docs/build\nwarning-is-error = 1\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.9462890625,
          "content": "#!/usr/bin/env python3\n\nimport io\nimport os\nimport re\nimport sys\n\nfrom setuptools import find_packages, setup\n\nREQUIRED_MAJOR = 3\nREQUIRED_MINOR = 8\n\n# Check for python version\nif sys.version_info < (REQUIRED_MAJOR, REQUIRED_MINOR):\n    error = (\n        \"Your version of python ({major}.{minor}) is too old. You need python >= {required_major}.{required_minor}.\"\n    ).format(\n        major=sys.version_info.major,\n        minor=sys.version_info.minor,\n        required_minor=REQUIRED_MINOR,\n        required_major=REQUIRED_MAJOR,\n    )\n    sys.exit(error)\n\n\n# Get version\ndef find_version(*file_paths):\n    try:\n        with io.open(os.path.join(os.path.dirname(__file__), *file_paths), encoding=\"utf8\") as fp:\n            version_file = fp.read()\n        version_match = re.search(r\"^__version__ = version = ['\\\"]([^'\\\"]*)['\\\"]\", version_file, re.M)\n        return version_match.group(1)\n    except Exception:\n        return None\n\n\nreadme = open(\"README.md\").read()\n\n\ntorch_min = \"2.0\"\ninstall_requires = [\n    \"jaxtyping==0.2.19\",\n    \"mpmath>=0.19,<=1.3\",  # avoid incompatibiltiy with torch+sympy with mpmath 1.4\n    \"scikit-learn\",\n    \"scipy>=1.6.0\",\n    \"linear_operator>=0.5.3\",\n]\n# if recent dev version of PyTorch is installed, no need to install stable\ntry:\n    import torch\n\n    if torch.__version__ >= torch_min:\n        install_requires = [\">=\".join([\"torch\", torch_min])] + install_requires\nexcept ImportError:\n    pass\n\n\n# Run the setup\nsetup(\n    name=\"gpytorch\",\n    version=find_version(\"gpytorch\", \"version.py\"),\n    description=\"An implementation of Gaussian Processes in Pytorch\",\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    author=\"Jake Gardner, Geoff Pleiss\",\n    url=\"https://gpytorch.ai\",\n    author_email=\"gpleiss@gmail.com\",\n    project_urls={\n        \"Documentation\": \"https://gpytorch.readthedocs.io\",\n        \"Source\": \"https://github.com/cornellius-gp/gpytorch/\",\n    },\n    license=\"MIT\",\n    classifiers=[\"Development Status :: 5 - Production/Stable\", \"Programming Language :: Python :: 3\"],\n    packages=find_packages(exclude=[\"test\", \"test.*\"]),\n    python_requires=\">=3.8\",\n    install_requires=install_requires,\n    extras_require={\n        \"dev\": [\"pre-commit\", \"setuptools_scm\", \"twine\", \"ufmt\"],\n        \"docs\": [\n            \"ipykernel<=6.17.1\",\n            \"ipython<=8.6.0\",\n            \"m2r2<=0.3.3.post2\",\n            \"nbclient<=0.7.3\",\n            \"nbformat<=5.8.0\",\n            \"nbsphinx<=0.9.1\",\n            \"lxml_html_clean\",\n            \"platformdirs<=3.2.0\",\n            \"setuptools_scm<=7.1.0\",\n            \"sphinx<=6.2.1\",\n            \"sphinx_autodoc_typehints<=1.23.0\",\n            \"sphinx_rtd_theme<0.5\",\n            \"uncompyle6<=3.9.0\",\n        ],\n        \"examples\": [\"ipython\", \"jupyter\", \"matplotlib\", \"scipy\", \"torchvision\", \"tqdm\"],\n        \"keops\": [\"pykeops>=1.1.1\"],\n        \"pyro\": [\"pyro-ppl>=1.8\"],\n        \"test\": [\"flake8==4.0.1\", \"flake8-print==4.0.0\", \"pytest\", \"nbval\"],\n    },\n    test_suite=\"test\",\n)\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}