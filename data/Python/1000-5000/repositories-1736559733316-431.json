{
  "metadata": {
    "timestamp": 1736559733316,
    "page": 431,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pyinfra-dev/pyinfra",
      "stars": 4005,
      "defaultBranch": "3.x",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.044921875,
          "content": "[*.json]\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.0732421875,
          "content": "# Run black & isort on everything\n2d4792eba3233c77a298d86e9638434688e3a1c5\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.306640625,
          "content": ".DS_Store\n.ropeproject\n\n*.pyc\n*.egg-info\n\n.*swp\n\nbuild/\ndist/\n\nvenv/\n.venv/\n.cache/\n.mypy_cache/\n.pytest_cache/\n.python-version\n\n.vagrant*\n\n.coverage\n\n.docstmp\ndocs/build/\ndocs/public/\ndocs/connectors/\ndocs/facts/\ndocs/operations/\ndocs/apidoc/\ndocs/_deploy_globals.rst\n\n.idea/\n.vscode/\n\npyinfra-debug.log\nMakefile\n"
        },
        {
          "name": ".typos.toml",
          "type": "blob",
          "size": 0.462890625,
          "content": "[files]\nextend-exclude = [\n    \"tests/facts/apt.SimulateOperationWillChange/upgrade.json\",\n    \"tests/facts/opkg.OpkgPackages/opkg_packages.json\",\n    \"tests/words.txt\",\n]\n\n[default]\nextend-ignore-re = [\n    \"shell\\\\('uptim'\\\\)\",\n    '\"fpr:::::::::',\n    '== \"fpr\":',\n    \"00740ba1\",\n    \"forr something in\",\n    \"unknown tag 'forr'\",\n    \"nd6 options=\",\n    \"4Ue1\", # Ignore false positive in test_sshuserclient.py (EXAMPLE_KEY_1)\n]\n\n[default.extend-words]\ndatas = \"datas\"\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 7.83984375,
          "content": "# v3.2\n\nHello 2025! Here's pyinfra 3.2 - with another incredible round of contributions from the community, THANK YOU ALL. New stuff:\n\n- Add total counts to results summary (@NichtJens)\n- Enable passing extra data via `local.include` (@TimothyWillard)\n- Validate inventory files and display warnings for unexpected variables (@simonhammes)\n\nNew operations/facts:\n\n- Add `pipx` operations (`packages`, `upgrade_all`, `ensure_path`) facts (`PipxPackages`, `PipxEnvironment`) and operations (@maisim)\n- Add `server.OsRelease` fact (@wowi42)\n- Add `podman.PodmanSystemInfo` and `podman.PodmanPs` facts (@bauen1)\n- Add many extra arguments (including generic args) to `files.FindFiles*` facts (@JakkuSakura)\n- Add `system` argument to `git.config` operation (@Pirols)\n- Add `psql_database` argument to postgres operations & facts (@hamishfagg)\n- Add `files.Sha384File` fact and `sha384sum` argument to `files.download` operation (@simonhammes)\n- Add `apt.SimulateOperationWillChange` fact (@bauen1)\n- Detect changes in `apt.upgrade` and `apt.dist_upgrade` operations (@bauen1)\n- Add `fibootmgr.EFIBootMgr` fact (@bauen1)\n- Add opkg facts and operations (@morrison12)\n\nFixes:\n\n- Multiple fixes for `server.crontab` operation and facts (@JakkuSakura)\n- Correctly handle `latest` argument with requirements file in `pip.packages` operation (@amiraliakbari)\n- Fix regex used to parse installed apk packages (@simonhammes)\n- Fix SSH connector overwriting known hosts files (@vo452)\n\nDocs/internal tweaks:\n\n- Add type annotations for many more operations (@simonhammes)\n- Add typos CI checking to replace flake8-spellcheck (@simonhammes)\n- Bump CI actions and dependencies (@simonhammes)\n- Require JSON tests to include all arguments\n- Remove unused `configparser` dependency (@bkmgit)\n- Many small documentation fixes/tweaks\n\n# v3.1.1\n\n- Improve errors with 2.x style `@decorator` (vs `@decorator()`) functions\n- Document adding custom connectors (@simonhammes)\n- Add basic API example to docs (@pirate)\n- Fix sphinx warnings (@simonhammes)\n- Fix force & pull arguments in `git.worktree` operation\n- Fix `server.reboot` reconnection (@wackou)\n- Fix chroot/local connector non-utf file gets (@evoldstad)\n- Fix `AptSources` fact to parse components in order & with digits (@rsfzi)\n\n# v3.1\n\nHere's pyinfra 3.1 - a release primarily driven by contributors new and old - a HUGE THANK YOU to all of you who dedicate time to work on pushing pyinfra forward. New stuff:\n\n- Add `zfs` operations (`dataset`, `snapshot`, `volume`, `filesystem`) facts (`Pools`, `Datasets`, `Filesystems`, `Snapshots`, `Volumes`) (@taliaferro)\n- Add `flatpak` operations (`packages`) and facts (`FlatpakPackage`, `FlatpakPackages`) (@JustScreaMy)\n- Add `jinja_env_kwargs` argument to `files.template` operation (@DonDebonair)\n- Add using dictionaries as `@terraform` output (map from group -> hosts)\n- Add default `@terraform` output key - `pyinfra_inventory.value`, promote connector to beta\n- Add support for multiple keys in each `server.authorized_keys` file (@matthijskooijman)\n- Add print all dependency versions with `--support` flag (@kytta)\n\nFixes:\n\n- Fix when `ssh_hostname` is set as override data, don't do inventory hostname check\n- Fix `apt.AptSources` parsing special characters (@CondensedTea)\n- Fix `server.reboot` connection detection (@bauen1 + @lemmi)\n- Fix systemd flagging of sockets running (@bauen1)\n- Fix mysql dump quoting (@simonhammes)\n- Fix tilde expansion in files facts (@simonhammes)\n- Fix host lookup check with SSH alias config (@simonhammes)\n- Fix crontab comparison (@andrew-d)\n\nDocs/internal tweaks:\n\n- Improve operations documentation (@bauen1)\n- Default to local machine if `user_name` set in systecmt (@bauen1)\n- Improve efficiency of Docker operations (@apecnascimento)\n- Shallow copy `host.data` data to mutation\n\n# v3.0.2\n\n- Fix `OperationMeta.did_change`: this is now a function as originally designed\n- Add quick test for `host.when` context manager\n- Remove extra detected changes note when not relevant\n\n# v3.0.1\n\n- Switch to `command -v` not `which` in `server.Which` fact (@lemmi)\n- Fix detection of xbps in `server.packages` operation (@romain-dartigues)\n- Fix argument typo in operations doc (@scoufman)\n- Add expanded note about detected changes + hidden side effects during execution\n- Fix missing global arguments in group data files\n- Fix `--group-data` CLI argument behaviour\n- Remove unused/dead `--quiet` flag\n\n# v3.0\n\nWelcome to pyinfra v3! This version is the biggest overhaul of pyinfra since it was created back in 2015. Most v2 deployment code should be automatically compatible, but as always be aware. Major changes:\n\n### Runtime operation execution\n\npyinfra now executes operations at runtime, rather than pre-generating commands. Although the change isn't noticeable this fixes an entire class of bugs and confusion. See the [limitations](https://docs.pyinfra.com/en/2.x/deploy-process.html#limitations) section in the v2 docs. All of those issues are now a thing of the past.\n\nThis represents a huge overhaul of pyinfra's internals and should be a huge improvement for users.\n\nCare has been taken to reduce the overhead of this change which still supports the same diffs and change proposal mechanism.\n\n### CLI flow & prompts\n\nThe pyinfra CLI will now prompt (instead of ignore, or immediately exit) when problems are encountered, allowing the user to choose to continue. Additionally an approval step is added before executing changes (this can be skipped with `-y` or setting the `PYINFRA_YES` environment variable).\n\n### Extendable connectors API, typing overhaul\n\nv3 of pyinfra includes for the first time a (mostly) typed internal API with proper support for IDE linting. There's a whole new connectors API that provides a framework for building new connectors.\n\n### Breaking changes\n\n- Rename `_use_sudo_password` argument to `_sudo_password`\n- Remove `winrm` connector and `windows*` operations/facts, moving to [`pyinfra-windows`](https://github.com/pyinfra-dev/pyinfra-windows)\n- The deploy decorator must now be called, ie used as `@deploy()`, and is now typed\n- Remove broken Ansible inventory connector\n\n### Operations & Facts\n\n- Add `docker.container`, `docker.image`, `docker.volume`, `docker.network` & `docker.prune` operations (@apecnascimento)\n- Add `runit.service` operation and `RunitStatus` fact (@lemmi)\n- Add `TmpDir` fact\n- Add `services` argument to systemd facts for filtering\n- Add type hints for all the operations (@stone-w4tch3r)\n- Lowercase pip packages properly (PEP-0426)\n- Rename `postgresql` -> `postgres` operations & facts (old ones still work)\n- Improve IP/MAC parsing in `NetworkDevices` fact (@sudoBash418)\n- Enable getting `Home` fact for other users (@matthijskooijman)\n- Use users correct home directory in `server.user_authorized_keys` operation (@matthijskooijman)\n- Fix `destination`/`not_destination` arguments in `iptables.rule` operation\n- Fix remote dirs when executing from Windows in `files.sync` operation (@Renerick)\n- Fix quoting of systemd unit names (@martenlienen)\n\n### Other Changes\n\n- Add new `_if` global argument to control operation execution at runtime\n- Add `--debug-all` flag to set debug logging for all packages\n- Retry SSH connections on failure (configurable, see [SSH connector](https://docs.pyinfra.com/en/3.x/connectors/ssh.html#available-data)) (@fwiesel)\n- Documentation typo fixes (@szepeviktor, @sudoBash418)\n- Fix handling of binary files in Docker connector (@matthijskooijman)\n- Add `will_change` attribute and `did_change` context manager to `OperationMeta`\n- Replace use of `pkg_resources` with `importlib.metadata` (@diazona)\n- Fix identifying Python inventory files as modules (@martenlienen)\n- Fix typed arguments order (@cdleonard)\n- Check that fact commands don't take global arguments (@martenlienen)\n\n# v2.x\n\n[See this file in the `2.x` branch](https://github.com/Fizzadar/pyinfra/blob/2.x/CHANGELOG.md).\n\n# v1.x\n\n[See this file in the `1.x` branch](https://github.com/Fizzadar/pyinfra/blob/1.x/CHANGELOG.md).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.2197265625,
          "content": "# Contributing to pyinfra\n\n🎉 Hello! Thank you for taking the time to contribute to pyinfra! 🎉\n\nPlease see [**the contributing guide on the pyinfra documentation**](https://docs.pyinfra.com/en/latest/contributing.html).\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.05078125,
          "content": "Copyright (C) 2020 Nick Barrett <nick@fizzadar.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0576171875,
          "content": "include README.md LICENSE.md CHANGELOG.md pyinfra/py.typed\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.1728515625,
          "content": "<p align=\"center\">\n    <a href=\"https://pyinfra.com\">\n        <img src=\"https://pyinfra.com/static/logo_readme.png\" alt=\"pyinfra\" />\n    </a>\n</p>\n\n<p>\n    pyinfra turns Python code into shell commands and runs them on your servers. Execute ad-hoc commands and write declarative operations. Target SSH servers, local machine and Docker containers. Fast and scales from one server to thousands. Think <code>ansible</code> but Python instead of YAML, and a lot faster.\n</p>\n\n---\n\n<h3>\n    <a href=\"https://docs.pyinfra.com/page/getting-started.html\"><strong>Getting Started</strong></a> &bull;\n    <a href=\"https://github.com/pyinfra-dev/pyinfra-examples\"><strong>Examples Repo</strong></a> &bull;\n    <a href=\"https://matrix.to/#/#pyinfra:matrix.org\"><strong>Chat on Matrix</strong></a>\n</h3>\n<p>\n    <a href=\"https://docs.pyinfra.com\"><strong>Documentation</strong></a> &bull;\n    <a href=\"https://docs.pyinfra.com/page/support.html\"><strong>Help & Support</strong></a> &bull;\n    <a href=\"https://docs.pyinfra.com/page/contributing.html\"><strong>Contributing</strong></a>\n</p>\n\n---\n\nWhy pyinfra? Design features include:\n\n+ 🚀 **Super fast** execution over thousands of hosts with predictable performance.\n+ 🚨 **Instant debugging** with realtime stdin/stdout/stderr output (`-vvv`).\n+ 🔄 **Idempotent operations** that enable diffs and dry runs before making changes.\n+ 📦 **Extendable** with the entire Python package ecosystem.\n+ 💻 **Agentless execution** against anything with shell access.\n+ 🔌 **Integrated** with connectors for Docker, Terraform, Vagrant and more.\n\n<img width=\"100%\" src=\"https://pyinfra.com/static/example_deploy.gif\" />\n\n## Quickstart\n\nInstall pyinfra with `pip`:\n\n```\npip install pyinfra\n```\n\nNow you can execute commands on hosts via SSH:\n\n```sh\npyinfra my-server.net exec -- echo \"hello world\"\n```\n\nOr target Docker containers, the local machine, and other [connectors](https://docs.pyinfra.com/page/connectors.html):\n\n```sh\npyinfra @docker/ubuntu exec -- echo \"Hello world\"\npyinfra @local exec -- echo \"Hello world\"\n```\n\nAs well as executing commands you can define state using [operations](https://docs.pyinfra.com/page/operations.html):\n\n```sh\n# Install iftop apt package if not present\npyinfra @docker/ubuntu apt.packages iftop update=true _sudo=true\n```\n\nWhich can then be saved as a Python file like `deploy.py`:\n\n\n```py\nfrom pyinfra.operations import apt\n\napt.packages(\n    name=\"Ensure iftop is installed\",\n    packages=['iftop'],\n    update=True,\n    _sudo=True,\n)\n```\n\nThe hosts can also be saved in a file, for example `inventory.py`:\n\n```py\ntargets = [\"@docker/ubuntu\", \"my-test-server.net\"]\n```\n\n\nAnd executed together:\n\n```sh\npyinfra inventory.py deploy.py\n```\n\nNow you know the building blocks of pyinfra! By combining inventory, operations and Python code you can deploy anything.\n\nSee the more detailed [getting started](https://docs.pyinfra.com/page/getting-started.html) or [using operations](https://docs.pyinfra.com/page/using-operations.html) guides. See how to use [inventory & data](https://docs.pyinfra.com/page/inventory-data.html), [global arguments](https://docs.pyinfra.com/page/arguments.html) and [the CLI](https://docs.pyinfra.com/page/cli.html) or check out the [documented examples](https://docs.pyinfra.com/page/examples.html).\n\n---\n\n<p align=\"center\">\n    <a href=\"https://pypi.python.org/pypi/pyinfra\"><img alt=\"PyPI version\" src=\"https://img.shields.io/pypi/v/pyinfra?color=blue\"></a>\n    <a href=\"https://pepy.tech/project/pyinfra\"><img alt=\"PyPi downloads\" src=\"https://pepy.tech/badge/pyinfra\"></a>\n    <a href=\"https://docs.pyinfra.com\"><img alt=\"Docs status\" src=\"https://img.shields.io/github/actions/workflow/status/Fizzadar/pyinfra/docs.yml?branch=2.x\"></a>\n    <a href=\"https://github.com/Fizzadar/pyinfra/actions?query=workflow%3A%22Execute+tests%22\"><img alt=\"Execute tests status\" src=\"https://img.shields.io/github/actions/workflow/status/Fizzadar/pyinfra/test.yml?branch=2.x\"></a>\n    <a href=\"https://codecov.io/github/Fizzadar/pyinfra\"><img alt=\"Codecov Coverage\" src=\"https://img.shields.io/codecov/c/gh/Fizzadar/pyinfra\"></a>\n    <a href=\"https://github.com/Fizzadar/pyinfra/blob/2.x/LICENSE.md\"><img alt=\"MIT Licensed\" src=\"https://img.shields.io/pypi/l/pyinfra\"></a>\n</p>\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.0830078125,
          "content": "coverage:\n  status:\n    patch: off\n    project:\n      default:\n        threshold: 1%\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyinfra",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyinfra_cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.3720703125,
          "content": "[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.black]\nline-length = 100\ntarget-version = [\"py38\"]\n\n[tool.isort]\nprofile = \"black\"\nline_length = 100\ncombine_as_imports = true\ninclude_trailing_comma = true\n\n[tool.mypy]\ncheck_untyped_defs = true\nignore_missing_imports = true\nenable_incomplete_feature = \"Unpack\"\nfiles = \"pyinfra,pyinfra_cli\"\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.70703125,
          "content": "[bdist_wheel]\nuniversal = 1\n\n\n[flake8]\nexclude = .git,venv,build\nignore = W503,C815,C816,E704,E203,SC\nmax-line-length = 100\n\n# flake8-quotes\ninline-quotes = double\nmultiline-quotes = double\ndocstring-quotes = double\n\n# flake8-import-order\nimport-order-style = edited\napplication-import-names = pyinfra,pyinfra_cli,docs\n\n# flake8-spellcheck\nwhitelist = tests/words.txt\ndictionaries=en_US,python,technical,django\n\n\n[coverage:report]\nshow_missing = true\nskip_covered = true\nprecision = 1\ninclude = pyinfra/*, pyinfra_cli/*\n\n[coverage:run]\nconcurrency = gevent\n\n\n[tool:pytest]\n# Skip end-to-end tests by default\naddopts = -m'not end_to_end'\nmarkers =\n    end_to_end\n    end_to_end_docker\n    end_to_end_local\n    end_to_end_ssh\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 4.7958984375,
          "content": "import re\nimport sys\nfrom io import open\n\ntry:\n    from setuptools import find_packages, setup\n\nexcept ImportError:\n    print(\n        \"\"\"\nError: pyinfra needs setuptools in order to install:\n\nusing pip: pip install setuptools\nusing a package manager (apt, yum, etc), normally named: python-setuptools\n    \"\"\".strip(),\n    )\n\n    sys.exit(1)\n\n\nINSTALL_REQUIRES = (\n    \"gevent>=1.5\",\n    \"paramiko>=2.7,<4\",  # 2.7 (2019) adds OpenSSH key format + Match SSH config\n    \"click>2\",\n    \"jinja2>2,<4\",\n    \"python-dateutil>2,<3\",\n    \"setuptools\",\n    \"pywinrm\",\n    \"typeguard\",\n    \"distro>=1.6,<2\",\n    \"packaging>=16.1\",\n    # Backport of graphlib used for DAG operation ordering\n    'graphlib_backport ; python_version < \"3.9\"',\n    # Backport of typing for Unpack (added 3.11)\n    'typing-extensions ; python_version < \"3.11\"',\n    # Backport of importlib.metadata for entry_points(group=...) (added 3.10)\n    'importlib_metadata>=3.6 ; python_version < \"3.10\"',\n)\n\nTEST_REQUIRES = (\n    # Unit testing\n    \"pytest==8.3.3\",\n    \"coverage==7.6.1\",\n    \"pytest-cov==5.0.0\",\n    # Formatting & linting\n    \"black==24.8.0\",\n    \"isort==5.13.2\",\n    \"flake8==7.1.1\",\n    \"flake8-black==0.3.6\",\n    \"flake8-isort==6.1.1\",\n    # Typing\n    \"mypy\",\n    \"types-cryptography\",\n    \"types-paramiko\",\n    \"types-python-dateutil\",\n    \"types-PyYAML\",\n    \"types-setuptools\",\n)\n\nDOCS_REQUIRES = (\n    \"pyinfra-guzzle_sphinx_theme==0.16\",\n    \"myst-parser==3.0.1\",\n    \"sphinx==6.2.1\",\n)\n\nDEV_REQUIRES = (\n    TEST_REQUIRES\n    + DOCS_REQUIRES\n    + (\n        # Releasing\n        \"wheel\",\n        \"twine\",\n        # Dev debugging\n        \"ipython\",\n        \"ipdb\",\n        \"ipdbplugin\",\n        # Lint spellchecking, dev only (don't fail CI)\n        \"flake8-spellcheck==0.12.1\",\n        \"redbaron\",  # for generating type stubs\n    )\n)\n\n\ndef get_version_from_changelog():\n    # Regex matching pattern followed by 3 numerical values separated by '.'\n    pattern = re.compile(r\"^# v(?P<version>[0-9]+\\.[0-9]+(\\.[0-9]+)?(\\.?[a-z0-9]+)?)$\")\n\n    with open(\"CHANGELOG.md\", \"r\", encoding=\"utf-8\") as fn:\n        for line in fn.readlines():\n            match = pattern.match(line.strip())\n            if match:\n                return \"\".join(match.group(\"version\"))\n    raise RuntimeError(\"No version found in CHANGELOG.md\")\n\n\ndef get_readme_contents():\n    with open(\"README.md\", \"r\", encoding=\"utf-8\") as f:\n        return f.read()\n\n\nif __name__ == \"__main__\":\n    setup(\n        version=get_version_from_changelog(),\n        name=\"pyinfra\",\n        description=\"pyinfra automates/provisions/manages/deploys infrastructure.\",\n        long_description=get_readme_contents(),\n        long_description_content_type=\"text/markdown\",\n        author=\"Nick / Fizzadar\",\n        author_email=\"pointlessrambler@gmail.com\",\n        license=\"MIT\",\n        url=\"https://pyinfra.com\",\n        project_urls={\n            \"Documentation\": \"https://docs.pyinfra.com\",\n            \"GitHub\": \"https://github.com/Fizzadar/pyinfra\",\n        },\n        packages=find_packages(exclude=[\"tests\", \"docs\"]),\n        entry_points={\n            \"console_scripts\": (\"pyinfra=pyinfra_cli.__main__:execute_pyinfra\",),\n            \"pyinfra.connectors\": [\n                \"chroot = pyinfra.connectors.chroot:ChrootConnector\",\n                \"docker = pyinfra.connectors.docker:DockerConnector\",\n                \"local = pyinfra.connectors.local:LocalConnector\",\n                \"ssh = pyinfra.connectors.ssh:SSHConnector\",\n                \"dockerssh = pyinfra.connectors.dockerssh:DockerSSHConnector\",\n                # Inventory only connectors\n                \"terraform = pyinfra.connectors.terraform:TerraformInventoryConnector\",\n                \"vagrant = pyinfra.connectors.vagrant:VagrantInventoryConnector\",\n            ],\n        },\n        python_requires=\">=3.8\",\n        install_requires=INSTALL_REQUIRES,\n        extras_require={\n            \"test\": TEST_REQUIRES,\n            \"docs\": DOCS_REQUIRES,\n            \"dev\": DEV_REQUIRES,\n        },\n        include_package_data=True,\n        classifiers=[\n            \"Development Status :: 5 - Production/Stable\",\n            \"Environment :: Console\",\n            \"Intended Audience :: Developers\",\n            \"Intended Audience :: System Administrators\",\n            \"Intended Audience :: Information Technology\",\n            \"License :: OSI Approved :: MIT License\",\n            \"Operating System :: OS Independent\",\n            \"Programming Language :: Python :: 3\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"Programming Language :: Python :: 3.11\",\n            \"Programming Language :: Python :: 3.12\",\n            \"Topic :: System :: Systems Administration\",\n            \"Topic :: System :: Installation/Setup\",\n            \"Topic :: Utilities\",\n        ],\n    )\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}