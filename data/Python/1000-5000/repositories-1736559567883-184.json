{
  "metadata": {
    "timestamp": 1736559567883,
    "page": 184,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jasperproject/jasper-client",
      "stars": 4542,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.1220703125,
          "content": "[report]\nomit =  \n    */python?.?/*\n    */site-packages/nose/*\n    *__init__*\nexclude_lines =\n    if __name__ == .__main__.:\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.822265625,
          "content": "# Generic files to ignore\n*~\n*.lock\n*.DS_Store\n*.swp\n*.out\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff/Logfiles\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Coverage reports for a specific version\n.coverage\n\n# SublimeLinter config file\n.sublimelinterrc\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.59375,
          "content": "env:\n    - ARCH=x86\nlanguage: python\nsudo: false\npython:\n    - \"2.7\"\ncache:\n  directories:\n    - \"$HOME/.pip-cache/\"\n    - \"/home/travis/virtualenv/python2.7\"\ninstall: \n    - \"pip install -r client/requirements.txt  --download-cache $HOME/.pip-cache\"\n    - \"pip install python-coveralls --download-cache $HOME/.pip-cache\"\n    - \"pip install coverage  --download-cache $HOME/.pip-cache\"\n    - \"pip install flake8  --download-cache $HOME/.pip-cache\"\nbefore_script:\n    - \"flake8 jasper.py client tests\"\nscript:\n    - \"coverage run -m unittest discover\"\nafter_success:\n    - \"coverage report\"\n    - \"coveralls\"\n"
        },
        {
          "name": "AUTHORS.md",
          "type": "blob",
          "size": 0.74609375,
          "content": "Jasper was originally created by Shubhro Saha and Charles Marsh in early 2014.\nIn August 2014, the core development team has been joined by Jan Holthuis.\n\n    Jan Holthuis <jan.holthuis@ruhr-uni-bochum.de>\n    Charles Marsh <crmarsh@princeton.edu>\n    Shubhro Saha <saha@princeton.edu>\n\nHere is a probably incomplete list of contributors, that helped to improve\nJasper. Thanks a lot!\n\n    Alex Bate <alex@alexbate.co.uk>\n    Andy Buckingham <andy@andybee.com>\n    David Celis <me@davidcel.is>\n    Cedric Claidiere\n    dag0310\n    Alex Siri\n    Andrew Stahlman <andrew.stahlman@gmail.com>\n    James Timmons\n\n*Please alphabetize new entries*\n\nWe'd also like to thank all the people who reported bugs, helped\nanswer newbie questions, and generally made Jasper better."
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.88671875,
          "content": "# Contributing to Jasper\n\nWant to contribute to Jasper? Great! We're always happy to have more contributors. Before you start developing, though, we ask that you read through this document in-full. It's full of tips and guidelines--if you skip it, you'll likely miss something important (and your pull request will probably be rejected as a result).\n\nThroughout the process of contributing, there's one thing we'd like you to remember: Jasper was developed (and is maintained) by what might be described as \"volunteers\". They earn no money for their work on Jasper and give their time solely for the advancement of the software and the enjoyment of its users. While they will do their best to get back to you regarding issues and pull requests, **your patience is appreciated**.\n\n## Reporting Bugs\n\nThe [bug tracker](https://github.com/jasperproject/jasper-client/issues) at Github is for reporting bugs in Jasper. If you encounter problems during installation or compilation of one of Jasper's dependencies for example, do not create a new issue here. Please open a new thread in the [support forum](https://groups.google.com/forum/#!forum/jasper-support-forum) instead. Also, make sure that it's not a usage issue.\n\nIf you think that you found a bug and that you're using the most recent version of Jasper, please include a detailed description what you did and how to reproduce the bug. If Jasper crashes, run it with `--debug` as command line argument and also include the full stacktrace (not just the last line). If you post output, put it into a [fenced code block](https://help.github.com/articles/github-flavored-markdown/#fenced-code-blocks). Last but not least: have a look at [Simon Tatham's \"How to Report Bugs Effectively\"](http://www.chiark.greenend.org.uk/~sgtatham/bugs.html) to learn how to write a good bug report.\n\n## Opening Pull Requests\n\n### Philosophies\n\nThere are a few key philosophies to preserve while designing features for Jasper:\n\n1. **The core Jasper software (`jasper-client`) must remain decoupled from any third-party web services.** For example, the Jasper core should never depend on Google Translate in any way. This is to avoid unnecessary dependences on web services that might change or become paid over time.\n2. **The core Jasper software (`jasper-client`) must remain decoupled from any paid software or services.** Of course, you're free to use whatever you'd like when running Jasper locally or in a fork, but the main branch needs to remain free and open-source.\n3. **Jasper should be _usable_ by both beginner and expert programmers.** If you make a radical change, in particular one that requires some sort of setup, try to offer an easy-to-run alternative or tutorial. See, for example, the profile populator ([`jasper-client/client/populate.py`](https://github.com/jasperproject/jasper-client/blob/master/client/populate.py)), which abstracts away the difficulty of correctly formatting and populating the user profile.\n\n### DOs and DON'Ts\n\nWhile developing, you **_should_**:\n\n\n1. **Ensure that the existing unit tests pass.** They can be run via `python2 -m unittest discover` for Jasper's main folder.\n2. **Test _every commit_ on a Raspberry Pi**. Testing locally (i.e., on OS X or Windows or whatnot) is insufficient, as you'll often run into semi-unpredictable issues when you port over to the Pi. You should both run the unit tests described above and do some anecdotal testing (i.e., run Jasper, trigger at least one module).\n3. **Ensure that your code conforms to [PEP8](http://legacy.python.org/dev/peps/pep-0008/) and our existing code standards.** For example, we used camel case in a few places (this could be changed--send in a pull request!). In general, however, defer to PEP8. We also really like Jeff Knupp's [_Writing Idiomatic Python_](http://www.jeffknupp.com/writing-idiomatic-python-ebook/). We use `flake8` to check this, so run it from Jasper's main folder before committing.\n4. Related to the above: **Include docstrings that follow our existing format!** Good documentation is a good thing.\n4. **Add any new Python dependencies to requirements.txt.** Make sure that your additional dependencies are dependencies of `jasper-client` and not existing packages on your disk image!\n5. **Explain _why_ your change is necessary.** What does it accomplish? Is this something that others will want as well?\n6. Once your pull request has received some positive feedback: **Submit a parallel pull request to the [documentation repository](https://github.com/jasperproject/jasperproject.github.io)** to keep the docs in sync.\n\nOn the other hand, you **_should not_**:\n\n1. **Commit _any_ modules to the _jasper-client_ repository.** The modules included in _jasper-client_ are meant as illustrative examples. Any new modules that you'd like to share should be done so through other means. If you'd like us to [list your module](http://jasperproject.github.io/documentation/modules/) on the web site, [submit a pull request here](https://github.com/jasperproject/jasperproject.github.io/blob/master/documentation/modules/index.md).\n2. **_Not_ do any of the DOs!**\n\n### TODOs\n\nIf you're looking for something to do, here are some suggestions:\n\n1. Improve unit-testing for `jasper-client`. The Jasper modules and `brain.py` have ample testing, but other Python modules (`conversation.py`, `mic.py`, etc.) do not.\n2. Come up with a better way to automate testing on the Pi. This might include spinning up some sort of VM with [Docker](http://docs.docker.io), or take a completely different approach.\n3. Buff up the text-refinement functions in [`alteration.py`](https://github.com/jasperproject/jasper-client/blob/master/client/alteration.py). These are meant to convert text to a form that will sound more human-friendly when spoken by your TTS software, but are quite minimal at the moment.\n4. Make Jasper more platform-independent. Currently, Jasper is only supported on Raspberry Pi and OS X.\n5. Decouple Jasper from any specific Linux audio driver implementation.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.091796875,
          "content": "# The MIT License (MIT)\n\n*Copyright (c) 2014-2015 Charles Marsh, Shubhro Saha & Jan Holthuis*\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.1689453125,
          "content": "jasper-client\n=============\n\n[![Build Status](https://travis-ci.org/jasperproject/jasper-client.svg?branch=master)](https://travis-ci.org/jasperproject/jasper-client) [![Coverage Status](https://img.shields.io/coveralls/jasperproject/jasper-client.svg)](https://coveralls.io/r/jasperproject/jasper-client) [![Codacy Badge](https://www.codacy.com/project/badge/3a50e1bc2261419894d76b7e2c1ac694)](https://www.codacy.com/app/jasperproject/jasper-client)\n\nClient code for the Jasper voice computing platform. Jasper is an open source platform for developing always-on, voice-controlled applications.\n\nLearn more at [jasperproject.github.io](http://jasperproject.github.io/), where we have assembly and installation instructions, as well as extensive documentation. For the relevant disk image, please visit [SourceForge](http://sourceforge.net/projects/jasperproject/).\n\n## Contributing\n\nIf you'd like to contribute to Jasper, please read through our **[Contributing Guide](CONTRIBUTING.md)**, which outlines the philosophies to preserve, tests to run, and more. We highly recommend reading through this guide before writing any code.\n\nThe Contributing Guide also outlines some prospective features and areas that could use love. However, for a more thorough overview of Jasper's direction and goals, check out the **[Product Roadmap](https://github.com/jasperproject/jasper-client/wiki/Roadmap)**.\n\nThanks in advance for any and all work you contribute to Jasper!\n\n## Support\n\nIf you run into an issue or require technical support, please first look through the closed and open **[GitHub Issues](https://github.com/jasperproject/jasper-client/issues)**, as you may find a solution there (or some useful advice, at least).\n\nIf you're still having trouble, the next place to look would be the new **[Google Group support forum](https://groups.google.com/forum/#!forum/jasper-support-forum)** or join the `#jasper` IRC channel on **chat.freenode.net**. If your problem remains unsolved, feel free to create a post there describing the issue, the steps you've taken to debug it, etc.\n\n## Contact\n\nJasper's core developers are [Shubhro Saha](http://www.shubhro.com), [Charles Marsh](http://www.crmarsh.com) and [Jan Holthuis](http://homepage.ruhr-uni-bochum.de/Jan.Holthuis/).  All of them can be reached by email at [saha@princeton.edu](mailto:saha@princeton.edu), [crmarsh@princeton.edu](mailto:crmarsh@princeton.edu) and [jan.holthuis@ruhr-uni-bochum.de](mailto:jan.holthuis@ruhr-uni-bochum.de) respectively. However, for technical support and other problems, please go through the channels mentioned above.\n\nFor a complete list of code contributors, please see [AUTHORS.md](AUTHORS.md).\n\n## License\n\n*Copyright (c) 2014-2015, Charles Marsh, Shubhro Saha & Jan Holthuis. All rights reserved.*\n\nJasper is covered by the MIT license, a permissive free software license that lets you do anything you want with the source code, as long as you provide back attribution and [\"don't hold \\[us\\] liable\"](http://choosealicense.com). For the full license text see the [LICENSE.md](LICENSE.md) file.\n\n*Note that this licensing only refers to the Jasper client code (i.e.,  the code on GitHub) and not to the disk image itself (i.e., the code on SourceForge).*\n"
        },
        {
          "name": "boot",
          "type": "tree",
          "content": null
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "jasper.py",
          "type": "blob",
          "size": 5.4716796875,
          "content": "#!/usr/bin/env python2\n# -*- coding: utf-8-*-\n\nimport os\nimport sys\nimport shutil\nimport logging\n\nimport yaml\nimport argparse\n\nfrom client import tts\nfrom client import stt\nfrom client import jasperpath\nfrom client import diagnose\nfrom client.conversation import Conversation\n\n# Add jasperpath.LIB_PATH to sys.path\nsys.path.append(jasperpath.LIB_PATH)\n\nparser = argparse.ArgumentParser(description='Jasper Voice Control Center')\nparser.add_argument('--local', action='store_true',\n                    help='Use text input instead of a real microphone')\nparser.add_argument('--no-network-check', action='store_true',\n                    help='Disable the network connection check')\nparser.add_argument('--diagnose', action='store_true',\n                    help='Run diagnose and exit')\nparser.add_argument('--debug', action='store_true', help='Show debug messages')\nargs = parser.parse_args()\n\nif args.local:\n    from client.local_mic import Mic\nelse:\n    from client.mic import Mic\n\n\nclass Jasper(object):\n    def __init__(self):\n        self._logger = logging.getLogger(__name__)\n\n        # Create config dir if it does not exist yet\n        if not os.path.exists(jasperpath.CONFIG_PATH):\n            try:\n                os.makedirs(jasperpath.CONFIG_PATH)\n            except OSError:\n                self._logger.error(\"Could not create config dir: '%s'\",\n                                   jasperpath.CONFIG_PATH, exc_info=True)\n                raise\n\n        # Check if config dir is writable\n        if not os.access(jasperpath.CONFIG_PATH, os.W_OK):\n            self._logger.critical(\"Config dir %s is not writable. Jasper \" +\n                                  \"won't work correctly.\",\n                                  jasperpath.CONFIG_PATH)\n\n        # FIXME: For backwards compatibility, move old config file to newly\n        #        created config dir\n        old_configfile = os.path.join(jasperpath.LIB_PATH, 'profile.yml')\n        new_configfile = jasperpath.config('profile.yml')\n        if os.path.exists(old_configfile):\n            if os.path.exists(new_configfile):\n                self._logger.warning(\"Deprecated profile file found: '%s'. \" +\n                                     \"Please remove it.\", old_configfile)\n            else:\n                self._logger.warning(\"Deprecated profile file found: '%s'. \" +\n                                     \"Trying to copy it to new location '%s'.\",\n                                     old_configfile, new_configfile)\n                try:\n                    shutil.copy2(old_configfile, new_configfile)\n                except shutil.Error:\n                    self._logger.error(\"Unable to copy config file. \" +\n                                       \"Please copy it manually.\",\n                                       exc_info=True)\n                    raise\n\n        # Read config\n        self._logger.debug(\"Trying to read config file: '%s'\", new_configfile)\n        try:\n            with open(new_configfile, \"r\") as f:\n                self.config = yaml.safe_load(f)\n        except OSError:\n            self._logger.error(\"Can't open config file: '%s'\", new_configfile)\n            raise\n\n        try:\n            stt_engine_slug = self.config['stt_engine']\n        except KeyError:\n            stt_engine_slug = 'sphinx'\n            logger.warning(\"stt_engine not specified in profile, defaulting \" +\n                           \"to '%s'\", stt_engine_slug)\n        stt_engine_class = stt.get_engine_by_slug(stt_engine_slug)\n\n        try:\n            slug = self.config['stt_passive_engine']\n            stt_passive_engine_class = stt.get_engine_by_slug(slug)\n        except KeyError:\n            stt_passive_engine_class = stt_engine_class\n\n        try:\n            tts_engine_slug = self.config['tts_engine']\n        except KeyError:\n            tts_engine_slug = tts.get_default_engine_slug()\n            logger.warning(\"tts_engine not specified in profile, defaulting \" +\n                           \"to '%s'\", tts_engine_slug)\n        tts_engine_class = tts.get_engine_by_slug(tts_engine_slug)\n\n        # Initialize Mic\n        self.mic = Mic(tts_engine_class.get_instance(),\n                       stt_passive_engine_class.get_passive_instance(),\n                       stt_engine_class.get_active_instance())\n\n    def run(self):\n        if 'first_name' in self.config:\n            salutation = (\"How can I be of service, %s?\"\n                          % self.config[\"first_name\"])\n        else:\n            salutation = \"How can I be of service?\"\n        self.mic.say(salutation)\n\n        conversation = Conversation(\"JASPER\", self.mic, self.config)\n        conversation.handleForever()\n\nif __name__ == \"__main__\":\n\n    print(\"*******************************************************\")\n    print(\"*             JASPER - THE TALKING COMPUTER           *\")\n    print(\"* (c) 2015 Shubhro Saha, Charlie Marsh & Jan Holthuis *\")\n    print(\"*******************************************************\")\n\n    logging.basicConfig()\n    logger = logging.getLogger()\n    logger.getChild(\"client.stt\").setLevel(logging.INFO)\n\n    if args.debug:\n        logger.setLevel(logging.DEBUG)\n\n    if not args.no_network_check and not diagnose.check_network_connection():\n        logger.warning(\"Network not connected. This may prevent Jasper from \" +\n                       \"running properly.\")\n\n    if args.diagnose:\n        failed_checks = diagnose.run()\n        sys.exit(0 if not failed_checks else 1)\n\n    try:\n        app = Jasper()\n    except Exception:\n        logger.error(\"Error occured!\", exc_info=True)\n        sys.exit(1)\n\n    app.run()\n"
        },
        {
          "name": "static",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}