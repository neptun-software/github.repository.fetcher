{
  "metadata": {
    "timestamp": 1736559541454,
    "page": 141,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rbreaves/kinto",
      "stars": 4637,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0888671875,
          "content": "*.py linguist-detectable=true\n*.json liguist-detectable=false\n*.c linguist-detectable=true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0615234375,
          "content": ".env/\n.DS_Store\n__pycache__/\nxkeysnail/\nkeybindings_*\nmutter_*\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 29.7529296875,
          "content": "# Kinto.sh\n\n![kinto-color-132](https://user-images.githubusercontent.com/10969616/94909977-9d2d4900-0469-11eb-8710-986289fe7240.gif)\n\n\n[![GitHub release](https://img.shields.io/github/release/rbreaves/kinto.svg)](https://github.com/rbreaves/kinto/releases/latest)\n\n\\- Mac-style shortcut keys for Linux & Windows. \\-\n\nSeamless copy and paste with all apps and terminals. The zero effort solution.\n\nv1.2 Release - Kinto now includes a system tray and simple wizard to setup the install with minimal effort.\n\nKinto is powered by [xkeysnail](https://github.com/mooz/xkeysnail) for Linux & by [Autohotkey](https://github.com/Lexikos/AutoHotkey_L) for Windows 10 & 11.\n\nNote: VNC is now experimentally supported on Linux w/ the latest releases, but you must compile & install x11vnc. More info can be [found here](https://gist.github.com/rbreaves/87059f92f030ee4e068f911ddb56a4dd).\n\n~~Note: If you plan to remote into Linux via VNC, xRDP, Synergy or other remote desktop solutions then remove the current release & try an earlier [v1.0.7-3](https://github.com/rbreaves/kinto/releases/tag/1.0.7-3) release. It uses xkb so it'll work with virtual xinput devices. Some v1.1-x releases may offer both, but all v1.2.x releases ended support for xkb. I do plan to bring offical support back for virtual input devices.~~\n\n### [Table of Contents ](#Table-of-Contents)\n\n## Donations\n\nIf you like or appreciate this project then please consider donating.\n\n|**Wishlists**|[Amazon](https://smile.amazon.com/hz/wishlist/ls/3EVXR21VFKD9Z?ref_=wl_share)|[Adafruit](https://www.adafruit.com/wishlists/515932)|[eBay](https://www.ebay.com/mye/myebay/WatchList?custom_list_id=636668138019)|\n|---|---|---|---|\n\nI have received some really great letters with donations & email. I've also posted some of them with redacted first names to kinto.sh.\n\nAlso if you would like to send me a keyboard directly then please reach out to me over [twitter](https://twitter.com/gbit86) and send me a DM.\n\n## How to install (Linux)\n\nVideo Tutorial: [Install Kinto.sh for Linux in less than a minute](https://www.youtube.com/watch?v=kd4al45XD1g)\n\n[Linux Requirements](#What-does-Kinto-require)\n\n<img src=\"https://user-images.githubusercontent.com/10969616/97070698-179c4500-15a0-11eb-8064-c03aa7f4d4a5.png\" width=\"75%\">\n\n### Quick Install Method\n\nPaste the following into your Terminal\n```\n/bin/bash -c \"$(wget -qO- https://raw.githubusercontent.com/rbreaves/kinto/HEAD/install/linux.sh || curl -fsSL https://raw.githubusercontent.com/rbreaves/kinto/HEAD/install/linux.sh)\"\n```\n\nUninstall\n```\n/bin/bash <( wget -qO- https://raw.githubusercontent.com/rbreaves/kinto/HEAD/install/linux.sh || curl -fsSL https://raw.githubusercontent.com/rbreaves/kinto/HEAD/install/linux.sh ) -r\n```\n\n### Old Install Method\n\n```\ngit clone https://github.com/rbreaves/kinto.git\ncd kinto\nsudo apt update\nsudo apt install python3\n./setup.py\n```\n\n**Troubleshoot**\n\nIf the wizard does not appear then either type in \"kinto.sh\" in your application overview search bar or run this following command.\n```\n~/.config/kinto/gui/kinto-gui.py\n```\n\n**Issues with Numpad?**\n\nTry toggling numlock on & off (clear key on official mac keyboards). If it still does not work then restart the Kinto service and try toggling the numlock/clear key again, it will likely work after that. #369\n\n**Uninstall Kinto**\n\n```\n./setup.py -r\n```\n\n**Other tips**\n\nIf you want a global menu app similar to what mac users have then I strongly recommend Ubuntu Budgie as it has the Vala Appmenu built in and ready for activation. Short of that Vala-AppMenu can be installed in various distros, mileage will vary. If you try to activate it in the latest 20.xx releases with XFCE then you may need to run the following commands.\n\n```\nsudo apt install xfce4-appmenu-plugin vala-panel-appmenu-common appmenu-gtk2-module appmenu-gtk3-module appmenu-gtk-module-common\nxfconf-query -c xsettings -p /Gtk/Modules -n -t string -s \"appmenu-gtk-module\"\n```\n\n**Fractional HiDPI Scaling for Gnome/Budgie w/ x11**\n\nhttps://github.com/rbreaves/betterScale\n\nUse this with autorandr to save your settings as a profile that will auto re-apply when needed.\n\n\n## How to Install (Windows)\n\nVideo Tutorial: [How to Install Kinto.sh on Windows 10](https://youtu.be/sRk8A8krz40)\n\n[Windows 10 Requirements](#Kinto-for-Windows-10-Requirements)\n\n### Quick install\nOpen Powershell as Administrator and copy and paste the following. This will download & extract Kinto, install chocolatey, python3 and then install Kinto.\n\n**⚠ NOTE: Please inspect https://raw.githubusercontent.com/rbreaves/kinto/master/install/windows.ps1 and https://chocolatey.org/install.ps1 before running scripts directly. More information about running powershell scripts in this context can be found [here](https://chocolatey.org/install).**\n\n```\nSet-ExecutionPolicy Bypass -Scope Process -Force\niwr https://raw.githubusercontent.com/rbreaves/kinto/master/install/windows.ps1 -UseBasicParsing | iex\n```\n\n\nUpdate system tray to show Kinto icon at all times (optional)\n```\ncmd /c \"explorer shell:::{05d7b0f4-2121-4eff-bf6b-ed3f69b894d9}\"\n```\n\n### Old method\n\n1. Open Powershell (Right click and Run as Administrator)\n\n2. clone this repo\n```\ngit clone https://github.com/rbreaves/kinto.git\ncd kinto\n```\n3. Install - Select keyboard type\n```\npy setup.py\n```\n\n4. How to make Kinto stay visible in system tray (optional)\n\n<img src=\"https://user-images.githubusercontent.com/10969616/85195077-2f338c00-b295-11ea-8aa3-e6aa06a9a279.png\" width=\"50%\" height=\"50%\">\n<img src=\"https://user-images.githubusercontent.com/10969616/85195079-30fd4f80-b295-11ea-8bcd-257990b77dcb.png\" width=\"50%\" height=\"50%\">\n<img src=\"https://user-images.githubusercontent.com/10969616/85195082-322e7c80-b295-11ea-8c81-320dab424c3c.png\" width=\"50%\" height=\"50%\">\n\n**Uninstall Kinto**\n\n```\npy setup.py\n```\n\nSelect Uninstall\n\n## How to use in Remote Desktop Solutions\n\nRDP fully works as long as the entire keyboard input is being captured. RDP had been working for awhile with Windows but as of 2/14/2021 Linux & macOS is now supported. VNC & other protocols may work, but is likely most dependent on how the keyboard input is captured on the computer running the client.\n\n|Program|Src/Remote Client ⇒|Dst/Remote Server|Works? |Notes|\n|---|---|---|---|---|\n|Official MS RDP (mstsc.exe)| ❖Windows ⇒| ❖Windows  | ✅ Yes| Note: Make sure to set all keyboard input to go to remote. |\n|Official MS RDP (mstsc.exe)| ❖Windows ⇒| 🍎macOS  | ✅ Yes| Note: Must compile & install xrdp.   |\n|Official MS RDC from Store| ❖Windows ⇒| ❖Windows  | ✅ Yes| Note: Only when maximized, all modifier keys will not pass in otherwise. |\n|Official MS RDC from Store| ❖Windows ⇒| 🍎macOS  | ✅ Yes| Note: Must compile & install xrdp.   |\n|RealVNC| ❖Windows ⇒| 🐧Linux  | ✅ Yes| Note: Compile & install my forked [x11vnc](https://gist.github.com/rbreaves/87059f92f030ee4e068f911ddb56a4dd) for compatibility. |\n|Official MS RDP (mstsc.exe)| ❖Windows ⇒| 🐧Linux  | ✅ Yes | Note: Compile & install my forked [x11vnc](https://gist.github.com/rbreaves/87059f92f030ee4e068f911ddb56a4dd) for compatibility, then setup xrdp like normal & use xrdp 0.9.18+. |\n|Official MS RDC from Store| ❖Windows ⇒| 🐧Linux  | ✅ Yes | Note: Compile & install my forked [x11vnc](https://gist.github.com/rbreaves/87059f92f030ee4e068f911ddb56a4dd) for compatibility, then setup xrdp like normal & use xrdp 0.9.18+. |\n|Official MS RDP| ChromeOS 87+⇒| ❖Windows  | ✅ Yes|May work on earlier versions as well, if they support Android apps|\n|Remmina| 🐧Linux*/ChromeOS 87+⇒| ❖Windows  | ✅ Yes|*Use hover menu to enable \"Grab all keyboard events\"|\n|FreeRDP| 🐧Linux/ChromeOS 87+⇒| ❖Windows  | ✅ Yes | |\n|FreeRDP| 🍎macOS⇒| ❖Windows  | ✅ Yes| [FreeRDP for macOS](#FreeRDP-for-macOS)|\n|Remote Desktop Manager Free|🍎iOS⇒| ❖Windows  | ✅ Yes| |\n|Jump Desktop (RDP)| 🍎macOS*/iOS ⇒| ❖Windows  | ✅ Yes|*Preferences -> Keyboard -> Disable \"Key Conversions\", Enabled \"Send macOS Shortcuts\" under Keyboard shortcuts|\n|Jump Desktop (VNC)| 🍎macOS⇒| 🐧Linux   | ✅ Yes| Note: Compile & install my forked [x11vnc](https://gist.github.com/rbreaves/87059f92f030ee4e068f911ddb56a4dd) for compatibility & use xrdp 0.9.18+. |\n|RealVNC| 🍎macOS⇒| 🐧Linux   | ✅ Yes| Note: Compile & install my forked [x11vnc](https://gist.github.com/rbreaves/87059f92f030ee4e068f911ddb56a4dd) for compatibility. |\n|Official MS RDP| 🍎macOS⇒| ❖Windows  | ❌ No|Initial Cmd key press not being passed|\n|Remote Desktop Manager Free| 🍎macOS⇒| ❖Windows  | ❌ No|Initial Cmd key press not being passed|\n|Royal TSX Client| 🍎macOS⇒| ❖Windows  | ❌ No|Initial Cmd key press not being passed|\n|Official MS RDP| 🍎🤖iOS/Android⇒| ❖Windows  | ❌ No|No workaround atm|\n\n## How to Remap Windows keyboards for remote access to macOS\nQuick summary - Swap Alt & Win to conform with Apple keyboard layouts. Sharpkeys for Windows, Setkeycodes for Linux, then install Kinto.sh or change/update the Keyboard Type to Apple in the system tray.\nhttps://benreaves.medium.com/macos-to-linux-back-again-c6151200f4dc\n\n## FreeRDP for macOS\n\n1. Install [brew.sh](https://brew.sh).\n\n```/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"```\n\n2. Install XQuartz (x11/xorg)\n\n```brew install --cask xquartz```\n\n3. log off and back on.\n4. Install FreeRDP\n\n```brew install freerdp```\n\n5. Disable [NLA](https://kb.parallels.com/en/123661), if it is enabled on the destination.\n6. Run command to access machine\nNote: 192.168.x.x = Your IP.\n\n```xfreerdp /u:your_username /v:192.168.x.x /cert-ignore /auto-reconnect-max-retries:0 /f +clipboard -decorations```\n\n7. Click on XQuartz -> Preferences and set these checkmarks so that fullscreen can work, may need to quit it and re-run the xfreerdp command from step 6.\n\n<img src=\"https://user-images.githubusercontent.com/10969616/108144025-68bfcf80-708e-11eb-96cc-2930b7b1694a.png\" width=\"50%\">\n\nMore info here\nhttps://medium.com/idomongodb/macos-rdp-to-a-windows-machine-1e0f52f777b\n\n## Jump Desktop for macOS\n\nScreenshots of how to configure Jump Desktop for macOS users accessing a Windows PC with Kinto installed. I apologize that it is not a free RDP client - BUT it does work, and at $15 it is reasonable if you plan to use it frequently.\n\n<img src=\"https://user-images.githubusercontent.com/10969616/107990246-a2fb7500-6f99-11eb-8c19-0a9b538b996f.png\" width=\"25%\">\n<img src=\"https://user-images.githubusercontent.com/10969616/107990265-a8f15600-6f99-11eb-9922-bbcfa0b92031.png\" width=\"50%\">\n<img src=\"https://user-images.githubusercontent.com/10969616/107990256-a68efc00-6f99-11eb-9f31-575ed6016944.png\" width=\"50%\">\n\n\n## Table of Contents\n\n[How to install (Linux)](#How-to-install-Linux)\n\n[How to install (Windows)](#How-to-install-Windows)\n\n[What does this do exactly?](#What-does-this-do-exactly)\n\n[What's different from other remappers?](#Whats-different)\n\n[What does Kinto require?](#What-does-Kinto-require)\n\n[Shortcut Creation](#Shortcut-Creation)\n\n[How to Upgrade/Control Kinto](#How-to-Upgrade-Kinto)\n\n[Troubleshooting](#Troubleshooting)\n\n[Language Support](#Language-Support)\n\n[Related or Useful Resources](#Related-or-Useful-Resources)\n\n[Contributing](#Contributing)\n\n[More information about Kinto](#More-information-about-Kinto)\n\n[License](#License)\n\n[Credits and Contributions](#Credits-and-Contributions)\n\n## What does this do exactly?\n\nKinto works for standard Windows, Apple and Chromebook keyboards. The following however describes the dynamic rebinding based on a standard Windows/Mac keyboard.\n\n- Cursor/word-wise shortcut keys have been added to align with macOS keyboard shortcuts.\n\n**GUI**\n|**Physical**| Ctrl  |  Win/Alt |  Alt/Cmd | Spacebar|\n|---|---|---|---|---|\n|**Virtual**|  Win/Super* | Alt  |  RCtrl |Spacebar|\n\n*Win/Super will properly remap to LCtrl when needed to fully support expected keymaps.\n\n**Terminal**\n|**Physical**| Ctrl  |  Win/Alt |  Alt/Cmd | Spacebar|\n|---|---|---|---|---|\n|**Virtual**|  LCtrl | Alt  |  RCtrl |Spacebar|\n\nNote: RCtrl for terminals is also adding in Shift most of the time, however it depends on the specific terminal in use and will change itself to the expected keymaps of that terminal application.\n\n## What's different?\n\nCompared to most other remappers ***this is a complete system-wide remap of your base level modifier keys***, this saves time. You're not going to die a death of a thousand papercuts from trying to support every shortcut key under the sun.\n\nIt also retains some of the most commonly used system level shortcut keys, such as Cmd-C/V, Cmd-Tab, and Ctrl-Tab among others. You will keep seamless copy & paste between all apps, ability to switch Windows while still using the physical Cmd/Alt key position; switch tabs in your favorite terminals, code editors, or web browsers. Depending on your OS and/or Desktop Environment you may also be able to switch Virtual Desktop environments the same way as well and other basic system level shortcuts.\n\nIf your OS and macOS have similar functionality on the system level, but only differ by a slight difference of a shortcut command then Kinto likely supports it already. If Kinto doesn't have what you need then you can open up a support ticket and it will be added. You can also fork the project to add the fix and I will merge it via a PR you make.\n\nAdditionally, if you are using a cross-platform app and if it happens to have a few shortcut keys that differ then that can very easily be added to either the kinto.py or kinto.ahk configuration files which on Windows is located here `~/.kinto/kinto.ahk` and on Linux it can be found here `~/.config/kinto/kinto.py`. More info can be found here [Shortcut Creation](#Shortcut-Creation)\n\n## What does Kinto require?\n\n- Python\n- systemd or sysvinit\n- x11\n- xkeysnail\n\n### Kinto for Windows 10 Requirements\n\n- [Git for Windows](https://git-scm.com/download/win)\n- Powershell - run as Administrator\n- [Python3](https://www.python.org/downloads/windows/)\n\nOther programs that will be installed when you run ./setup.py\n- Chocolatey\n- Autohotkey\n- Strawberry Perl\n\nNote: Sublime Text users should disable screen rotation hotkeys as they will interfere with multi-cursor and possibly other combos. See https://windowsloop.com/disable-screen-rotation-keyboard-shortcut/ for details.\n\nYou may also want to disable the Xbox Game Bar so that Win+G or other shortcuts will not interfere with any of your remaps. Start menu -> Game bar shortcuts -> toggle Off.\n\n## Shortcut Creation\n\n[Linux Shortcut Creation (Xkeysnail)](#Linux-Xkeysnail)\n\n[Windows Shortcut Creation (Autohotkey)](#Windows-Autohotkey)\n\n\n## Linux (Xkeysnail)\n\n**GUI Keys**\n| Value| Description|Mac/Kinto Equivalent|\n| ----- |:--------:|:--------:|\n|C,Ctrl|Control|Cmd|\n|M,Alt| Alt/Option|Alt/Option|\n|Super | Win/Super|Ctrl|\n\n**Terminal Keys**\n| Value| Description|Mac/Kinto Equivalent|\n| ----- |:--------:|:--------:|\n|RC,RCtrl|Right Control → Left & Right Alt/Cmd key|Cmd|\n|M,Alt|Alt/Option|Alt/Option|\n|LC,LCtrl |Left Control|Ctrl|\n\nYou can define new keymaps for your specific app via this method. You also do not have to cancel out the original keybinding if you do not need or want to, but you can do so with \"pass_through_key\".\n\n### Defining Keymaps Per App\n```\n# Keybindings for Sublime Text\ndefine_keymap(re.compile(\"Sublime_text\"),{\n    K(\"C-h\"): pass_through_key,          # cancel replace\n    K(\"Ctrl-Alt-f\"): K(\"Ctrl-h\"),        # replace\n    K(\"C-M-v\"): [K(\"C-k\"), K(\"C-v\")],    # paste_from_history\n}\n```\n\nIn the above example I am also showing that you can define a single shortcut to enact multiple shortcut keys if needed by defining an array of shortcuts to trigger.\n\nTo make changes you can edit ~/.config/kinto/kinto.py under linux & restart the xkeysnail service via the system tray, app or CLI.\n\nsystemd\n```\nsudo systemctl restart xkeysnail\n```\n\nsysvinit\n```\nsudo -E /etc/init.d/kinto restart\n```\n\nMore information can be seen on the readme page of [xkeysnail](https://github.com/mooz/xkeysnail).\n\n## Windows (Autohotkey)\n\nThis applies to the Windows version of Kinto and how to add additional support for Applications. The configuration file location is `~/.kinto/kinto.ahk` and after updating it you will want to right click on the tray icon and click on setting your keyboard type again and it will re-apply the latest changes.\n\nWindows 10 has a couple of ways that you need to be aware of when trying to add a specific application, the typical method of how to add any exe program, but then there is also the newer UWP app format that some applications use which will require a similar but different method, both will be discussed.\n\n### Defining Keymaps Per App by EXE Name\nYou can use the following legend **but** realize that these remaps reference the Virtual keys in the diagrams mentioned near the beginning of this document, so **do not** confuse it with the physical key unless they happen to be the same key.\n\n|Autohotkey Symbol|Virtual key|Description|\n|---|---|---|\n|^,Ctrl|Control|Primary modifier, 1st rock from the spacebar|\n|!,Alt|Alt|Secondary modifier, 2nd rock from the spacebar|\n|#,Win|Win/Super|Tertiary modifier, 3rd rock from the spacebar|\n\n```\n...\n#IfWinActive ahk_exe sublime_text.exe\n    #^Up::send !{O}                                         ; Switch file\n    #^f::send {F11}                                         ; toggle_full_screen\n    ^!v::send {Ctrl Down}k{Ctrl Up}{Ctrl Down}v{Ctrl Up}    ; paste_from_history\n    ...\n#If\n...\n```\n\nWith this being Autohotkey you can easily pull knowledge from the Autohotkey forums for just about any issue you may have as well.\n\n### Defining Keymaps Per UWP App\n\n```\n#If WinActive(\"- OneNote ahk_class ApplicationFrameWindow\", \"OneNote\")\n...\n    ; Add your keymaps here\n...\n#If\n```\n\nI don't have too many examples on this one, most developers seem to be shying away from UWP. Kinto currently supports \"Fluent Terminal\" which is a UWP app, but it is also being grouped with other Terminal apps for hotkey remapping. You may take a look at that, but you may also want to try creating a new Autohotkey file and use the Window Spy feature built into Autohotkey to help you discover the full name and class names of any application.\n\n## Shortcut Creation (XKB)\nThe older xkb shortcut method info can be read about in ticket [#125](https://github.com/rbreaves/kinto/issues/125).\n\n## How to Upgrade Kinto\n\nSimply bring down the latest then you can re-run the setup.py installer, it will stop the service and re-install Kinto.\n\nNote: If you have made any custom changes to ~/.config/kinto then you will need to backup or rename those directories before running an update.\n\n```\ngit pull origin master\n./setup.py\n```\n\n## How to Control Kinto\n\nThis info is now superceded by the fact that linux has a full fledge GUI and system tray app that is very easy to use, but I will keep the command line options for those that want to know what they are.\n\nStatus\n\nsystemd\n```\nsudo systemctl status xkeysnail\n```\n\nsysvinit\n```\ntail -f /tmp/kinto.log\n```\n\nStop (your keymap will return to normal)\n\nsystemd\n```\nsudo systemctl stop xkeysnail\n```\n\nsysvinit\n```\nsudo -E /etc/init.d/kinto stop\n```\n\nStart\n\nsystemd\n```\nsudo systemctl start xkeysnail\n```\n\nsysvinit\n```\nsudo -E /etc/init.d/kinto start\n```\n\nRestart\n\nsystemd\n```\nsudo systemctl restart xkeysnail\n```\n\nsysvinit\n```\nsudo -E /etc/init.d/kinto restart\n```\n\n## Troubleshooting\n\n### Installed successfully, but modifier keys are not properly remapped?\n\nAre you using a VM on macOS? If so you may need to disable automatic remapping of the Cmd key when using Vmware Fusion of Parallels.\n\nDisable Parallels Re-mapping:\n1) Open Parallels and go to Preferences.\n2) Click Keyboard and disable the Virtual machine shortcuts.\n3) Close Preferences.\n\nTo disable keyboard mapping:\n1) From Fusion's menu bar, click VMware Fusion > Preferences...\n2) Click Keyboard & Mouse.\n3) Click the Key Mappings tab.\n4) Deselect Enable Key Mapping.\n\n### Does not start when you log in or after you reboot?\n\nYou may need to manually set your DISPLAY in the systemd service file. Normally it pulls in the proper DISPLAY value but if it doesn't you can try this.\n\nAnother possibility is the SELinux could be enabled and needs to be set to permissive. (aka /etc/selinux/config)\n\nTo reset the display variable\n\n```\necho $DISPLAY\n\n# :0.0\n```\n\nYou can use the Kinto.sh app or system tray to edit your service file.\n\nkinto.sh gui\n1. Edit -> Edit Service\nkinto tray\n1. Customize -> Edit Service\n\nor you can use your terminal.\n\nsudo nano /etc/systemd/system/xkeysnail.service\n```\n...\n[Service]\nType=simple\nRestart=always\nEnvironment=DISPLAY=:0.0\n...\n```\n\nIf you continue to have issues then open a ticket and send me the info.\n\n## Language Support\nI'd appreciate any help from people with non-US based keyboards, to help ensure that these keymaps and keyswap methods work in all or most languages.\n\n## Related or Useful Resources\n\n[Xkeysnail](https://github.com/mooz/xkeysnail) by mooz\n\nYet another keyboard remapping tool for X environment\n\n[libinput-gestures](https://github.com/bulletmark/libinput-gestures)\nThree finger gesture or other type of gestures for desktop switching or other features within a Linux distro. More info here for quickly setting it up. Make sure you logoff after setting your user to access input. https://www.reddit.com/r/GalliumOS/comments/5lgrxe/psa_multitouch_gestures_on_galliumos/\n\n[Interception](https://gitlab.com/interception/linux/tools)\n\nAnother low level key remapper, not as easily configurable as Xkeysnail, but does not rely on X11.\n\n[Wincent](https://github.com/wincent/wincent) by Greg Hurrell\n\nDot files and configurations that may help those that want mac-style shortcut keys that work under Wayland, or w/o x11.\n[Vim #102: macOS keyboard bindings on Linux](https://www.youtube.com/watch?v=TBqTHesnzkI)\n\n[mac-precision-touchpad](https://github.com/imbushuo/mac-precision-touchpad) by imbushuo\n\nWindows 10 touchpad to precision touchpad driver\n\n[macOS-cursors-for-Windows](https://github.com/antiden/macOS-cursors-for-Windows) by antiden\n\nmacOS cursors for Windows\n\n[QuickLook](https://github.com/QL-Win/QuickLook) for Windows by QL-Win\n\nIt allows users to peek into a file content in lightning speed by just pressing the Space key\n\n[fusuma](https://github.com/iberianpig/fusuma) by iberianpig\n\nMultitouch gestures with libinput driver on Linux\n\n[Facetime HD Camera for Linux](https://github.com/patjak/bcwc_pcie) by patjak\n\nLinux driver for Facetime HD on macbooks\n\n[Windows Terminal Preview](https://aka.ms/terminal-preview) by Microsoft\n\nThe best Terminal app built for Windows hands down. I have tried countless, but this one actually seems to get everything right, despite the lack of a GUI to configure all aspects of the program. Custom configurations have to be done via a json file - but given the performance and feature set I feel like it is a decent trade off.\n\nI will update Kinto to have custom configurations for this specific Terminal in the future. Will make seamless copy & paste, which already works, work even better (Cmd-C can still trigger sigint - but there is a fix for that that involves updating the json config).\n\n[PowerToys - Windows only](https://github.com/microsoft/PowerToys) by microsoft\n\nWindows system utilities to maximize productivity\n\n[AutoHotKey - Windows only](https://github.com/AutoHotkey/AutoHotkey) by AutoHotkey\n\nAutoHotkey is a powerful and easy to use scripting language for desktop automation on Windows.\n\n[pykeymacs](https://github.com/zhanghai/pykeymacs) by zhanghai\n\nEmacs style keyboard macros implemented in Python\n\n[Dynamic Wallpapers](https://github.com/adi1090x/dynamic-wallpaper) by adi1090x\n\nSimple bash script to set a Dynamic Wallpaper according to certain conditions.\n\n[macify-linux](https://github.com/Jonchun/macify-linux) by JonChun\n\nAutomated setup scripts to transform Linux into macOS. (Uses Kinto for key remaps)\n\n[ibus-typing-booster](https://github.com/mike-fabian/ibus-typing-booster) by mike-fabian\n\nibus-typing-booster is a completion input method for faster typing\n\n[twemoji color font](https://github.com/eosrei/twemoji-color-font) by eosrei\n\nTwitter Unicode 12 emoji color SVGinOT font for Linux/MacOS/Windows\n\n[iTerm2 Color Schemes](https://github.com/mbadolato/iTerm2-Color-Schemes) by mbadolato\n\nOver 225 terminal color schemes/themes for iTerm/iTerm2. Includes ports to Terminal, Konsole, PuTTY, Xresources, XRDB, Remmina, Termite, XFCE, Tilda, FreeBSD VT, Terminator, Kitty...\n\n[espanso](https://github.com/federico-terzi/espanso) by federico-terzi\n\nCross-platform Text Expander written in Rust\n\n[GalliumOS](https://github.com/GalliumOS/galliumos-distro) by GalliumOS\n\nDocs, issues, and artwork sources for GalliumOS\n\n[eOS-X](https://github.com/ipproductions/eOS-X) by ipproductions\n\nDark & Light Theme w/ OSX controls for Elementary OS\n\n[Autorandr](https://github.com/phillipberndt/autorandr) by phillipberndt\n\nAuto-detect the connected display hardware and load the appropriate X11 setup using xrandr\n\n[Barrier](https://github.com/debauchee/barrier) by debauchee (Note: Does not appear to work with Kinto v1.2+, may work w/ Kinto v1.1?)\n\nOpen-source KVM software\n\n[Synergy Free Binaries](https://github.com/amankhoza/synergy-binaries) by amankhoza\n\nThe latest freely available Synergy binaries\n\n[Synergy Official](https://symless.com/) by Symless\n\nLatest Official Synergy\n\n[Karabiner-Elements](https://github.com/pqrs-org/Karabiner-Elements) by pqrs-org\n\nKarabiner-Elements is a powerful utility for keyboard customization on macOS Sierra (10.12) or later. \n\n[mbpfan](https://github.com/linux-on-mac/mbpfan) by linux-on-mac\n\nA simple daemon to control fan speed on all MacBook/MacBook Pros (probably all Apple computers) for Linux Kernel 3 and newer\n\n[vala-panel](https://github.com/rilian-la-te/vala-panel) by rilian-la-te\n\nVala rewrite of SimplePanel - GitHub mirror (Global Menu for XFCE)\n\n## Contributing\n\nI welcome any and all contributors who want to add something to this project.\n\nYou can read the configuration files and the open issue tickets such as [#44 Shortcut Translation Tables](https://github.com/rbreaves/kinto/issues/44), [#115 Shortcut Creation (xkeysnail)](https://github.com/rbreaves/kinto/issues/115), and [#348 Missing Shortcuts: Post them here](https://github.com/rbreaves/kinto/issues/348) to best understand what's currently happening and how best to contribute.\n\n## More information about Kinto\n\nhttps://medium.com/@benreaves/kinto-v1-0-released-2018e6401d2e\nhttps://medium.com/@benreaves/kinto-a-mac-inspired-keyboard-mapping-for-linux-58f731817c0\n\n## License\n\nGPL v2\n\n## Credits and Contributions\n\nI would just like to thank a few people here directly that have helped me tremendously with completing this project and without their support, direct, indirect or otherwise I would have had difficulty completing this undertaking. I will list these things off in chronological order mostly.\n\nFirst off I'd like to thank the Stackoverflow and Stackexchange community. I have probably rubbed some mods the wrong way over there, but the people from the community in general are extremely helpful and gracious and without their contributions would have made this much more difficult. The person I'd like to thank most though from over there is Glen Whitney. Without his detailed explaining of how to rebind keys in xkb this would not have come together at all, as every other remapping solution were non-starters as complexity increases. *Kinto today no longer uses xkb, but Glen Whitney did provide the basis of a workable method that helped me pursue this method and think it was a worthwhile project to pursue, so for that I thank him.*\n\nSecondarily I'd like to thank Christian Eriksson*, as he provided information that kept me up at night.. literally. Even after I implemented a similar bash script to one he had suggested I knew that fully implementing a c/c++ solution was where Kinto needed to head to and his explanation was better than I remember it being now that I have gone back to read it again. He also never provided a full implementation of a c/c++ solution - he did hit on the pain points pretty well of what one would need to do and watch out for. I am not sure where I got the first example code of implementing a c based solution, but he definitely went over it well.\n\n\nKui and his gist file** was really the c based solution that I found had the fewest issues to resolve to making it a reliable solution. It didn't account for all failures very well, aka BadWindow issues, but it made for a great foundation on which Kintox11 is built. I cannot thank him enough for putting it out there for others to work with.\n\nLastly these four people were also very helpful to me as well. @probonopd for being one of the first people to install and use Kinto and gave me the initial feedback to include wordwise support! He also has really great articles*** posted on HackerNews & Medium about UI/UX design. Another person I'd like to thank is @owzim, his feedback allowed me to rapidly iterate and fix several bugs to support additional platforms better. The last two are members of the #ubuntu channel in IRC on freenode, tarzeau ( @alexmyczko ) and sarnold. Alex contributing a proper Makefile, so the project can be packaged properly, and sarnold help me find that IBus could resolve an issue I was having with needing to detect the caret status.\n\n**Updated 6/13/2020**\n\nI would also like to thank Jonathan Chun for his patience in helping me work through a very difficult problem related to Alt-Tab switching, which led to the current xkeysnail iteration of Kinto for Linux that far exceeds the original xkb implementation. There are also several others that have created issue tickets that have contributed greatly.\n\nIf I left anyone out then I apologize, that was not intentional. I am happy to say that this project is at a state of completion. Bug fixes will primarily be the only activity happening going forward and possibly a rewrite for Wayland at some point. Contributions as mentioned above are welcomed, and will be merged into master if they help with the goal of making typing on linux more like a mac.\n\n*https://askubuntu.com/questions/1010276/can-i-act-on-the-event-that-a-window-opens-without-polling\n\n**https://gist.github.com/kui/2622504\n\n***https://medium.com/@probonopd/make-it-simple-linux-desktop-usability-part-1-5fa0fb369b42\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "install",
          "type": "tree",
          "content": null
        },
        {
          "name": "linux",
          "type": "tree",
          "content": null
        },
        {
          "name": "prekinto.py",
          "type": "blob",
          "size": 1.31640625,
          "content": "class bcolors:\n\tHEADER = '\\033[95m'\n\tOKBLUE = '\\033[94m'\n\tOKGREEN = '\\033[92m'\n\tWARNING = '\\033[93m'\n\tFAIL = '\\033[91m'\n\tENDC = '\\033[0m'\n\tBOLD = '\\033[1m'\n\tUNDERLINE = '\\033[4m'\n\tCBOLD     = '\\033[1m'\n\tCITALIC   = '\\033[3m'\n\tCURL      = '\\033[4m'\n\tCBLINK    = '\\033[5m'\n\tCBLINK2   = '\\033[6m'\n\tCSELECTED = '\\033[7m'\n\n\tCBLACK  = '\\033[30m'\n\tCRED    = '\\033[31m'\n\tCGREEN  = '\\033[32m'\n\tCYELLOW = '\\033[33m'\n\tCBLUE   = '\\033[34m'\n\tCVIOLET = '\\033[35m'\n\tCBEIGE  = '\\033[36m'\n\tCWHITE  = '\\033[37m'\n\n\tCBLACKBG  = '\\033[40m'\n\tCREDBG    = '\\033[41m'\n\tCGREENBG  = '\\033[42m'\n\tCYELLOWBG = '\\033[43m'\n\tCBLUEBG   = '\\033[44m'\n\tCVIOLETBG = '\\033[45m'\n\tCBEIGEBG  = '\\033[46m'\n\tCWHITEBG  = '\\033[47m'\n\n\tCGREY    = '\\033[90m'\n\tCRED2    = '\\033[91m'\n\tCGREEN2  = '\\033[92m'\n\tCYELLOW2 = '\\033[93m'\n\tCBLUE2   = '\\033[94m'\n\tCVIOLET2 = '\\033[95m'\n\tCBEIGE2  = '\\033[96m'\n\tCWHITE2  = '\\033[97m'\n\n\tCGREYBG    = '\\033[100m'\n\tCREDBG2    = '\\033[101m'\n\tCGREENBG2  = '\\033[102m'\n\tCYELLOWBG2 = '\\033[103m'\n\tCBLUEBG2   = '\\033[104m'\n\tCVIOLETBG2 = '\\033[105m'\n\tCBEIGEBG2  = '\\033[106m'\n\tCWHITEBG2  = '\\033[107m'\n\ndef yn_choice(message, default='y'):\n    choices = 'Y/n' if default.lower() in ('y', 'yes') else 'y/N'\n    choice = input(\"%s (%s) \" % (message, choices))\n    values = ('y', 'yes', '') if choices == 'Y/n' else ('y', 'yes')\n    return choice.strip().lower() in values"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 7.107421875,
          "content": "#!/usr/bin/env python3\nimport json, time, os, sys, subprocess, shlex, platform,argparse\nfrom shutil import copyfile\nfrom subprocess import PIPE, Popen\nfrom prekinto import *\n\nparser = argparse.ArgumentParser()\n\nparser.add_argument('-r', dest='uninstall', action='store_true', help=\"uninstall kinto\")\nparser.add_argument('--remove', dest='uninstall', action='store_true', help=\"uninstall kinto\")\n\nargs = parser.parse_args()\n\nhomedir = os.path.expanduser(\"~\")\nkintotype = 0\n\ndef windows_setup():\n\tkeymaps = [\"Apple keyboard standard\", \"Windows keyboard standard\",\"Chromebook\",\"IBM - No Super/Win\",\"Uninstall\"]\n\tfor index, item in enumerate(keymaps):\n\t\tprint(\"    %i. %s\" % (index+1, item))\n\tdefault = 0\n\twhile not int(default) in range(1,len(keymaps)+1):\n\t\tdefault = int(input(\"\\nPlease enter your desired keymap (1 - \" + str(len(keymaps)) + \") : \"))\n\tprint(\"\")\n\t# Short DOS path notation\n\tpath= cmdline('echo ''%cd%''')[:-1]\n\tif default > 0 and default < 5:\n\t\tprint(\"Will now install chocolatey and autohotkey with elevated privileges...\")\n\t\tprint(\"This install will fail if you are not running with elevated privileges\")\n\t\tos.system('powershell -executionpolicy bypass \".\\\\windows\\\\autohotkey.ps1\"')\n\t\tprint(\"Copying autohotkey combinations for Terminals & Editors...\")\n\t\tos.system('copy /Y \"' + path + '\\\\windows\\\\kinto.ahk\" \"' + homedir + '\\\\kinto-new.ahk\"')\n\tif default < 3:\n\t\tos.system('C:\\\\Strawberry\\\\perl\\\\bin\\\\perl.exe -pi -e \"s/(; )(.*)(; Default)(?!( - ST2CODE))(.*)/$2$3$5/gm\" ' + homedir + '\\\\kinto-new.ahk')\n\tif default == 1:\n\t\tkbtype = \"mac\"\n\t\tos.system('C:\\\\Strawberry\\\\perl\\\\bin\\\\perl.exe -pi -e \"s/(; )(.*)(; MacModifiers)/$2$3/gm\" ' + homedir + '\\\\kinto-new.ahk')\n\telif default == 2:\n\t\tkbtype = \"win\"\n\t\tos.system('C:\\\\Strawberry\\\\perl\\\\bin\\\\perl.exe -pi -e \"s/(; )(.*)(; WinModifiers)/$2$3/gm\" ' + homedir + '\\\\kinto-new.ahk')\n\telif default == 5:\n\t\tprint(\"Removing any old registry keys from prior versions...\")\n\t\tp = subprocess.Popen(['powershell.exe', \"Remove-ItemProperty -Path HKLM:'SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout' -Name 'Scancode Map' -ErrorAction SilentlyContinue\"], stdout=sys.stdout)\n\t\tprint(\"Removing Kinto from Startup folder...\")\n\t\tos.system(\"(del \\\"C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\StartUp\\\\kinto.ahk\\\") 2> nul\")\n\t\tos.system('(del \"%userprofile%\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\STARTM~1\\\\Programs\\\\Startup\\\\kinto-start.vbs\") 2> nul')\n\t\tprint(\"Ending any running Kinto tasks...\")\n\t\tos.system(\"(taskkill /IM autohotkey.exe) 2> nul\")\n\t\tprint(\"Removing Kinto from users profile directory...\")\n\t\tos.system('(rd /s /q \"%userprofile%\\\\.kinto\") 2> nul')\n\t\tprint(\"\")\n\t\tprint(\"Uninstall of Kinto is Complete.\")\n\tif default == 3:\n\t\tkbtype = \"chrome\"\n\t\tos.system('C:\\\\Strawberry\\\\perl\\\\bin\\\\perl.exe -pi -e \"s/(; )(.*)(; Chromebook)/$2$3/gm\" ' + homedir + '\\\\kinto-new.ahk')\n\t\tos.system('C:\\\\Strawberry\\\\perl\\\\bin\\\\perl.exe -pi -e \"s/(; )(.*)(; WinModifiers\\/CB)/$2$3/gm\" ' + homedir + '\\\\kinto-new.ahk')\n\tif default == 3 or default == 4:\n\t\tos.system('C:\\\\Strawberry\\\\perl\\\\bin\\\\perl.exe -pi -e \"s/(; )(.*)(; CB\\/IBM)/$2$3/gm\" ' + homedir + '\\\\kinto-new.ahk')\n\t\tos.system('C:\\\\Strawberry\\\\perl\\\\bin\\\\perl.exe -pi -e \"s/(; )(.*)(; WinModifiers\\/CB\\/IBM)/$2$3/gm\" ' + homedir + '\\\\kinto-new.ahk')\n\tif default == 4:\n\t\tkbtype = \"ibm\"\n\t\tos.system('C:\\\\Strawberry\\\\perl\\\\bin\\\\perl.exe -pi -e \"s/(; )(.*)(; IBM)/$2$3/gm\" ' + homedir + '\\\\kinto-new.ahk')\n\tif default > 0 and default < 5:\n\t\tstvscode = yn_choice(bcolors.CYELLOW2 + \"Would you like to use Sublime Text 3 keymaps in VS Code?\\n\" + bcolors.ENDC)\n\t\tprint(\"\\nWill now install Ubuntu Terminal Theme as default...\")\n\t\tos.system('regedit \"' + path + '\\\\windows\\\\theme_ubuntu.reg\"')\n\t\tos.system('robocopy \"'+ path + '\\\\assets\" \"%userprofile%\\\\.kinto\\\\assets\" /E')\n\t\tif (stvscode and (default > 0 or default < 3)):\n\t\t\tos.system('C:\\\\Strawberry\\\\perl\\\\bin\\\\perl.exe -pi -e \"s/(; )(.*)(; Default - ST2CODE)/$2$3/gm\" ' + homedir + '\\\\kinto-new.ahk')\n\t\telif (stvscode and (default == 3 or default == 4 )):\n\t\t\tos.system('C:\\\\Strawberry\\\\perl\\\\bin\\\\perl.exe -pi -e \"s/(; )(.*)(; CB/IBM - ST2CODE)/$2$3/gm\" ' + homedir + '\\\\kinto-new.ahk')\n\t\tos.system('copy /Y \"' + path + '\\\\windows\\\\kinto-start.vbs\" \"%userprofile%\\\\.kinto\\\\kinto-start.vbs\"')\n\t\tos.system('C:\\\\Strawberry\\\\perl\\\\bin\\\\perl.exe -pi -e \"s/{kbtype}/' + kbtype + '/gm\" \"%userprofile%\\\\.kinto\\\\kinto-start.vbs\"')\n\t\tos.system('copy /Y \"' + path + '\\\\windows\\\\usb.vbs\" \"%userprofile%\\\\.kinto\\\\usb.vbs\"')\n\t\tos.system('copy /Y \"' + path + '\\\\windows\\\\detectUSB.ahk\" \"%userprofile%\\\\.kinto\\\\detectUSB.ahk\"')\n\t\tos.system('mklink \"%userprofile%\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\STARTM~1\\\\Programs\\\\Startup\\\\kinto-start.vbs\" \"%userprofile%\\\\.kinto\\\\kinto-start.vbs\"')\n\t\tos.system('copy /Y \"'+ path + '\\\\windows\\\\NoShell.vbs\" \"%userprofile%\\\\.kinto\\\\NoShell.vbs\"')\n\t\tos.system('copy /Y \"'+ path + '\\\\windows\\\\toggle_kb.bat\" \"%userprofile%\\\\.kinto\\\\toggle_kb.bat\"')\n\t\tos.system('copy /Y \"'+ homedir + '\\\\kinto-new.ahk\" \"%userprofile%\\\\.kinto\\\\kinto.ahk\"')\n\t\tos.system(\"del /f \" + homedir + \"\\\\kinto-new.ahk\")\n\t\tos.system(\"del \\\"C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\StartUp\\\\kinto.ahk\\\" 2> nul\")\n\t\tuserpath = cmdline('cmd /c for %A in (\"%userprofile%\") do @echo %~sA')[:-1]\n\t\tprint('Starting... \"' + userpath + '\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\STARTM~1\\\\Programs\\\\Startup\\\\kinto-start.vbs\"')\n\t\tos.system('\"' + userpath + '\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\STARTM~1\\\\Programs\\\\Startup\\\\kinto-start.vbs\"')\n\t# \t# print(\"\\nPlease log off and back on for changes to take full effect.\")\n\t\tprint(\"If using WSL then please remember to right click on title bar -> Properties -> Edit Options -> Use Ctrl+Shift+C/V as Copy/Paste and enable it.\")\n\telse:\n\t\tos.system(\"(del \\\"C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\StartUp\\\\kinto.ahk\\\") 2> nul\")\n\ndef cmdline(command):\n    process = Popen(\n        args=command,\n        stdout=PIPE,\n        universal_newlines=True,\n        shell=True\n    )\n    return process.communicate()[0]\n\nif platform.system() == 'Windows':\n\tprint(\"\\nYou are detected as running Windows.\")\n\twindows_setup()\n\tsys.exit()\n\ncheck_x11 = cmdline(\"(env | grep -i x11 || loginctl show-session \\\"$XDG_SESSION_ID\\\" -p Type) | awk -F= '{print $2}'\").strip()\n\nif len(check_x11) == 0:\n\tif os.name != 'nt':\n\t\tprint(\"You are not using x11, please logout and back in using x11/Xorg\")\n\t\tsys.exit()\n\telse:\n\t\tprint(\"\\nYou are detected as running Windows.\")\n\t\twindows_setup()\n\t\tsys.exit()\n\ndistro = cmdline(\"awk -F= '$1==\\\"NAME\\\" { print $2 ;}' /etc/os-release\").replace('\"','').strip().split(\" \")[0]\ndename = cmdline(\"./linux/system-config/dename.sh\").replace('\"','').strip().split(\" \")[0].lower()\n\nrun_pkg = \"\"\n\nif os.path.isdir(homedir + \"/.config/kinto\") == False:\n\tos.mkdir(homedir + \"/.config/kinto\")\n\ttime.sleep(0.5)\n\n\ncmdline(\"git fetch\")\n\ncolor_arr = [bcolors.CBEIGE,bcolors.CRED2,bcolors.CGREEN,bcolors.CYELLOW ]\n\nkintover = cmdline('echo \"$(git describe --tag --abbrev=0 | head -n 1)\" \"build\" \"$(git rev-parse --short HEAD)\"')\n\nprint(\"\\nKinto \" + kintover + \"Type in Linux like it's a Mac.\\n\")\n\nif args.uninstall:\n\tsubprocess.check_call(shlex.split(\"./xkeysnail_service.sh uninstall\"))\n\texit()\n\nsubprocess.check_call(shlex.split(\"./xkeysnail_service.sh\"))\n\n\n"
        },
        {
          "name": "windows",
          "type": "tree",
          "content": null
        },
        {
          "name": "xkeysnail_service.sh",
          "type": "blob",
          "size": 30.546875,
          "content": "#!/bin/bash\n\n# set about:config?filter=ui.key.menuAccessKeyFocuses\n# to false for wordwise to work in Firefox\n\nfunction pause(){\n read -s -n 1 -p \"Press any key to continue . . .\"\n echo \"\"\n}\n\ntypeset -l distro\ndistro=$(awk -F= '$1==\"NAME\" { gsub(\"[\\\",!,_, ]\",\"\",$2);print $2 ;}' /etc/os-release)\ntypeset -l dename\ndename=$(./linux/system-config/dename.sh | cut -d \" \" -f1)\n\nsysv=$(pidof systemd >/dev/null 2>&1 && echo \"1\" || echo \"0\")\n\nfunction uninstall {\n\n\techo -e \"\\nNote: Restoring keys is only relevant if you had installed a version prior to 1.2 of Kinto. You should skip this step if 1.2+ is all you have installed.\"\n\n\twhile true; do\n\tread -rep $'\\nPress R to restore your original shortcuts.\\nPress F to reset to factory shortcuts.\\nPress N to skip. (f/r/N)\\n' yn\n\t\tcase $yn in\n\t\t\t[Ff]* ) yn=\"f\"; break;;\n\t\t\t[Rr]* ) yn=\"r\";break;;\n\t\t\t[Nn]* ) yn=\"n\";break;;\n\t\t\t* ) yn=\"n\";break;;\n\t\tesac\n\tdone\n\n\tif [ \"$yn\" == \"f\" ];then\n\t\techo \"Reset to factory shortcuts\"\n\t\tif [[ $dename == \"gnome\" || $dename == \"budgie\" ]];then\n\t\t\techo \"Resetting DE hotkeys...\"\n\t\t\techo \"gsettings reset-recursively org.gnome.desktop.wm.keybindings\"\n\t\t\tgsettings reset-recursively org.gnome.desktop.wm.keybindings\n\t\t\techo \"gsettings reset-recursively org.gnome.mutter.keybindings\"\n\t\t\tgsettings reset-recursively org.gnome.mutter.keybindings\n\t\t\tdconf dump /org/gnome/mutter/ > mutter.conf\n\t\t\tdconf load /org/gnome/mutter/ < mutter.conf\n\t\telif [ \"$dename\" == \"kde\" ];then\n\t\t\techo \"Resetting DE hotkeys...\"\n\t\t\tmv ~/.config/kwinrc ~/.config/kwinrc.kinto\n\t\t\tmv ~/.config/kglobalshortcutsrc ~/.config/kglobalshortcutsrc.kinto\n\t\telif [ \"$dename\" == \"xfce\" ];then\n\t\t\techo \"Resetting DE hotkeys...\"\n\t\t\tif test -f \"/etc/mx-version\";then\n\t\t\t\tcp /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml ~/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml\n\t\t\telse\n\t\t\t\tcp /etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml ~/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml\n\t\t\tfi\n\t\tfi\n\telif [ \"$yn\" == \"r\" ]; then\n\t\techo \"Restore original user shortcuts\"\n\t\tif [[ $dename == \"gnome\" || $dename == \"budgie\" ]]; then\n\t\t\techo \"Restoring DE hotkeys...\"\n\t\t\twmkeys=$(ls | grep -m1 \"keybinding\")\n\t\t\tmutterkeys=$(ls | grep -m1 \"mutter_\")\n\t\t\tif [[ ${#wmkeys} > 0 ]]; then\n\t\t\t\techo \"dconf load /org/gnome/desktop/wm/keybindings/ < $wmkeys\"\n\t\t\t\tdconf load /org/gnome/desktop/wm/keybindings/ < \"$wmkeys\"\n\t\t\telse\n\t\t\t\techo \"Gnome Desktop keybindings backup not found...\"\n\t\t\tfi\n\t\t\tif [[ ${#mutterkeys} > 0 ]]; then\n\t\t\t\techo \"dconf load /org/gnome/mutter/keybindings/ < $mutterkeys\"\n\t\t\t\tdconf load /org/gnome/mutter/keybindings/ <\"$mutterkeys\"\n\t\t\tfi\n\t\t\tif [[ ${#wmkeys} > 0 ]] || [[ ${#mutterkeys} > 0 ]]; then\n\t\t\t\techo \"Gnome hotkeys have been successfully restored.\"\n\t\t\tfi\n\t\telif [ \"$dename\" == \"kde\" ]; then\n\t\t\techo \"Restoring DE hotkeys...\"\n\t\t\tkwinkeys=$(ls | grep -m1 \"kwinrc\")\n\t\t\tkdekeys=$(ls | grep -m1 \"kglobalshortcutsrc\")\n\t\t\tcp ./\"$kdekeys\" ~/.config/kglobalshortcutsrc\n\t\t\tcp ./\"$kwinkeys\" ~/.config/kwinrc\n\t\telif [ \"$dename\" == \"xfce\" ]; then\n\t\t\techo \"Restoring DE hotkeys...\"\n\t\t\txfcekeys=$(ls | grep -m1 \"xfce4-keyboard\")\n\t\t\tcp ./\"$xfcekeys\" ~/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml\n\t\tfi\n\telif [ \"$yn\" == \"n\" ]; then\n\t\techo \"Skipping...\"\n\tfi\n\tif [[ $dename == \"gnome\" || $dename == \"budgie\" || $dename == \"mate\" ]]; then\n\t\techo -e \"\\nWill still be restoring the overlay key\"\n\t\techo -e \"gsettings set org.gnome.mutter overlay-key 'super'\\n\"\n\t\tgsettings set org.gnome.mutter overlay-key 'super'\n\t# Repetitive - xfce restore factory or backup does this\n\t# Also needs to check if whiskermenu is even being used\n\t# elif [[ $dename == \"xfce\" ]]; then\n\t# \techo -e \"\\nWill still be restoring the overlay key\"\n\t# \techo -e \"xfconf-query --channel xfce4-keyboard-shortcuts --property \\\"/commands/custom/Super_L\\\" --create --type string --set \\\"xfce4-popup-whiskermenu\\\"\"\n\t# \txfconf-query --channel xfce4-keyboard-shortcuts --property \"/commands/custom/Super_L\" --create --type string --set \"xfce4-popup-whiskermenu\"\n\tfi\n}\n\nfunction removeAppleKB {\n\t# Undo Apple keyboard cmd & alt swap\n\tif test -f \"/sys/module/hid_apple/parameters/swap_opt_cmd\" && [ `cat /sys/module/hid_apple/parameters/swap_opt_cmd` == \"1\" ]; then\n\t\techo '0' | sudo tee /sys/module/hid_apple/parameters/swap_opt_cmd\n\t\techo 'options hid_apple swap_opt_cmd=0' | sudo tee /etc/modprobe.d/hid_apple.conf\n\t\tsudo update-initramfs -u -k all\n\tfi\n\tif test -f \"/sys/module/applespi/parameters/swap_opt_cmd\" && [ `cat /sys/module/applespi/parameters/swap_opt_cmd` == \"1\" ]; then\n\t\techo '0' | sudo tee /sys/module/applespi/parameters/swap_opt_cmd\n\t\techo 'options applespi swap_opt_cmd=0' | sudo tee /etc/modprobe.d/applespi.conf\n\t\tsudo update-initramfs -u -k all\n\tfi\n}\n\nfunction budgieUninstall {\n\tif [ -f /usr/bin/budgie-desktop ];then\n\t\techo -e \"\\nYour system may log you off immediately during the restoration of budgie-daemon.\\n\"\n\t\tread -n 1 -s -r -p \"Press any key to continue...\"\n\t\tbdmd5=\"$(md5sum /usr/bin/budgie-daemon | awk '{ print $1 }')\"\n\t\toldbdmd5=$(md5sum ./budgie-daemon_10.5.1.bak | awk '{ print $1 }')\n\t\tif [ \"$bdmd5\" != \"$oldbdmd5\" ]; then\n\t\t\techo -e \"\\nReplacing budgie-daemon with backup...\"\n\t\t\tsudo pkill budgie-daemon && sudo cp ./budgie-daemon_10.5.1.bak /usr/bin/budgie-daemon\n\t\telse\n\t\t\techo -e \"\\nBudgie-daemon is already an original.\"\n\t\tfi\n\tfi\n}\n\nfunction budgieUpdate {\n\t# Check for budgie and install App Switching hack\n\tif [ -f /usr/bin/budgie-desktop ];then\n\t\twhile true; do\n\t\t\tread -rep $'Would you like to update Budgie to support proper App Switching? (y/n)\\n(Your system may immediately log you out after this runs.)\\n' yn\n\t\t\tcase $yn in\n\t\t\t\t[Yy]* ) yn=\"y\"; break;;\n\t\t\t\t[Nn]* ) yn=\"n\";break;;\n\t\t\t\t* ) echo \"Please answer yes or no.\";;\n\t\t\tesac\n\t\tdone\n\t\tif [ \"$yn\" == \"y\" ]; then\n\t\t\tbudgieVersion=\"$(/usr/bin/budgie-desktop --version | awk '{ print $2; }' | head -n1)\"\n\t\t\tif [ \"$budgieVersion\" == \"10.5.1\" ]; then\n\t\t\t\tif ! [ -f ./linux/system-config/budgie-daemon_10.5.1 ]; then\n\t\t\t\t\twget https://github.com/rbreaves/budgie-desktop/blob/binaries/binaries/budgie-daemon_10.5.1?raw=true -O ./linux/system-config/budgie-daemon_10.5.1\n\t\t\t\tfi\n\t\t\t\tbdmd5=$(md5sum /usr/bin/budgie-daemon | awk '{ print $1 }')\n\t\t\t\tnewbdmd5=$(md5sum ./linux/system-config/budgie-daemon_10.5.1 | awk '{ print $1 }')\n\t\t\t\tif [ \"$bdmd5\" != \"$newbdmd5\" ]; then\n\t\t\t\t\tcp /usr/bin/budgie-daemon ./budgie-daemon_\"$budgieVersion\".bak\n\t\t\t\t\tsudo pkill budgie-daemon && sudo cp ./linux/system-config/budgie-daemon_10.5.1 /usr/bin/budgie-daemon\n\t\t\t\t\techo \"Updated Budgie to use App Switching Patch\"\n\t\t\t\telse\n\t\t\t\t\techo \"Budgie-daemon already patched, skipping replacement.\"\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\techo \"Your Budgie version was $budgieVersion and the patch is for 10.5.1.\"\n\t\t\t\twhile true; do\n\t\t\t\t\tread -rep $'Would you like to replace it any ways? (y/n)\\n(A backup will be made)\\n' yn\n\t\t\t\t\tcase $yn in\n\t\t\t\t\t\t[Yy]* ) yn=\"y\"; break;;\n\t\t\t\t\t\t[Nn]* ) yn=\"n\";break;;\n\t\t\t\t\t\t* ) echo \"Please answer yes or no.\";;\n\t\t\t\t\tesac\n\t\t\t\tdone\n\t\t\t\tif [ \"$yn\" == \"y\" ]; then\n\t\t\t\t\tif ! [ -f ./linux/system-config/budgie-daemon_10.5.1 ]; then\n\t\t\t\t\t\twget https://github.com/rbreaves/budgie-desktop/raw/43d3b44243b0bcaee3262a79818024a651475b58/binaries/budgie-daemon_10.5.1 -O ./linux/system-config/budgie-daemon_10.5.1\n\t\t\t\t\tfi\n\t\t\t\t\tcp /usr/bin/budgie-daemon ./budgie-daemon_\"$budgieVersion\".bak\n\t\t\t\t\tsudo pkill budgie-daemon && sudo cp ./linux/system-config/budgie-daemon_10.5.1 /usr/bin/budgie-daemon\n\t\t\t\t\techo \"Updated Budgie to use App Switching Patch\"\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\tfi\n}\n\nif [[ $1 == \"5\" || $1 == \"uninstall\" || $1 == \"Uninstall\" ]]; then\n\techo \"Uninstalling Kinto - xkeysnail (udev)\"\n\tuninstall\n\techo \"Removing any Apple driver settings Kinto may have have set...\"\n\tremoveAppleKB\n\techo \"Killing the Kinto tray...\"\n\tpkill -f kintotray >/dev/null 2>&1\n\techo \"Stopping the Kinto service...\"\n\tsudo systemctl stop xkeysnail >/dev/null 2>&1\n\techo \"Disabling the Kinto service...\"\n\tsudo systemctl disable xkeysnail >/dev/null 2>&1\n\techo \"Killing any remaining xkeysnail processes...\"\n\tsudo pkill -f bin/xkeysnail >/dev/null 2>&1\n\techo \"Killing any Kinto related threads from Kinto tray or the gui...\"\n\tsudo pkill -f \"is-active xkeysnail\" >/dev/null 2>&1\n\techo -e \"\\nRemoving Kinto...\"\n\techo \"rm /etc/sudoers.d/limitedadmins\"\n\techo \"rm ~/.config/autostart/xkeysnail.desktop\"\n\techo \"rm ~/.config/autostart/kintotray.desktop\"\n\techo \"rm -rf ~/.config/kinto\"\n\techo \"rm /usr/share/applications/kinto.desktop\"\n\tsudo rm /etc/sudoers.d/limitedadmins >/dev/null 2>&1\n\trm ~/.config/autostart/xkeysnail.desktop >/dev/null 2>&1\n\trm ~/.config/autostart/kintotray.desktop  >/dev/null 2>&1\n\trm -rf ~/.config/kinto >/dev/null 2>&1\n\tsudo rm /usr/share/applications/kinto.desktop  >/dev/null 2>&1\n\techo -e \"\\nRemoving Kinto's systemd service files...\"\n\techo \"rm /etc/systemd/system/xkeysnail.service\"\n\techo \"rm /etc/systemd/system/graphical.target.wants/xkeysnail.service\"\n\techo \"rm /usr/lib/systemd/system/xkeysnail.service\"\n\techo \"rm /lib/systemd/system/xkeysnail.service\"\n\tsudo rm /etc/init.d/kinto >/dev/null 2>&1\n\tsudo rm /etc/systemd/system/xkeysnail.service >/dev/null 2>&1\n\tsudo rm /etc/systemd/system/graphical.target.wants/xkeysnail.service >/dev/null 2>&1\n\tsudo rm /usr/lib/systemd/system/xkeysnail.service >/dev/null 2>&1\n\tsudo rm /lib/systemd/system/xkeysnail.service >/dev/null 2>&1\n\tif [ -f /usr/local/bin/logoff.sh ];then\n\t\tsudo rm /usr/local/bin/logoff.sh\n\tfi\n\tif [[ $distro == \"elementaryos\" ]]; then\n\t\tgsettings set io.elementary.terminal.settings natural-copy-paste true\n\tfi\n\tsudo systemctl daemon-reload\n\t# sudo systemctl --state=not-found --all | grep xkeysnail\n\texit 0\nfi\n\nsudo systemctl stop xkeysnail >/dev/null 2>&1\nsudo systemctl disable xkeysnail >/dev/null 2>&1\nsudo pkill -f bin/xkeysnail >/dev/null 2>&1\nsudo pkill -f kinto-gui.py >/dev/null 2>&1\nsudo pkill -f kintotray.py >/dev/null 2>&1\nps aux | awk '/[s]h -c while/ {print $2}' | xargs -r -n1 sudo kill\nsudo pkill -f \"is-active xkeysnail\" >/dev/null 2>&1\n\nif [ \"$distro\" == \"manjarolinux\" ]; then\n\twhile true; do\n\t\tread -rep $'\\nHave you run \\\"sudo pacman -Syu\\\" before running Kinto setup? (y/n): ' updated\t\n\t\tcase $updated in\n\t\t\t[Yy]* ) mjupdated='yes'; break;;\n\t\t\t[Nn]* ) mjupdated='no'; break;;\n\t\t\t* ) echo -e \"\\nPlease answer [y]es or [n]o.\";;\n\t\tesac\n\tdone\n\tif [[ \"$mjupdated\" == \"no\" ]]; then \n\t\techo \n\t\techo \"================================================================================\"\n\t\techo \"==========  Please run a full system update before installing Kinto.  ==========\" \n\t\techo \"================================================================================\"\n\t\techo \n\t\texit 0\n\tfi\nfi\n\n# Add additional shortcuts if needed, does not modify existing ones\n\nif [[ $dename == 'gnome' || $dename == 'budgie' ]];then\n\tif [[ $(gsettings get org.gnome.mutter overlay-key | grep \"''\\|' '\" | wc -l) != 1 ]];then\n\t\tbound=$(gsettings get org.gnome.mutter overlay-key)\n\t\techo \"Overlay key, \" $bound \", detected. Will be removing so Super-Space can remap to Cmd-Space for app launching..\"\n\t\tgsettings set org.gnome.mutter overlay-key ''\n\tfi\nelif [[ $dename == 'xfce' ]];then\n\tlauncher=$(cat ~/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml | grep 'name=\"Super_L\"' | sed 's:.*=\"::')\n\t# echo \"${#launcher}\"\n\tif [[ \"${#launcher}\" -eq 0 ]]; then\n\t\txfconf-query --channel xfce4-keyboard-shortcuts --property \"/commands/custom/Super_L\" --create --type string --set \"xfce4-popup-whiskermenu\"\n\t\techo \"Resetting Super_L, please wait...\"\n\t\tsleep 6\n\t\tlauncher=$(cat ~/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml | grep 'name=\"Super_L\"' | sed 's:.*=\"::')\n\t\tif [[ \"${#launcher}\" -gt 0 ]]; then\n\t\t\techo \"Success.\"\n\t\telse\n\t\t\techo \"Failed. Skipping setup of Cmd-Space.\"\n\t\tfi\n\tfi\n\tif [[ \"${#launcher}\" -gt 0 ]]; then\n\t\tnlauncher=${launcher::-3}\n\t\t# Replace Alt-F1 help file w/ whisker menu alternative hotkey\n\t\txfconf-query --channel xfce4-keyboard-shortcuts --property \"/commands/custom/<Alt>F1\" --reset\n\t\t# Clear Alt-F3 App Finder for sublime text global replace\n\t\txfconf-query --channel xfce4-keyboard-shortcuts --property \"/commands/custom/<Alt>F3\" --reset\n\t\txfconf-query --channel xfce4-keyboard-shortcuts --property \"/commands/custom/<Alt>F1\" --create --type string --set \"$nlauncher\" && echo \"$nlauncher has been set to Alt-F1 for Cmd-Space to work.\"\n\t\t# Unset Super_L to avoid issues during setup, will re-apply at the end\n\t\txfconf-query --channel xfce4-keyboard-shortcuts --property \"/commands/custom/Super_L\" --reset\n\t\t# xfconf-query --channel xfce4-keyboard-shortcuts --property \"/commands/custom/<Super>grave\" --create --type string --set \"switch_window_key\"\n\n\tfi\n\t# Unset Super-Tab, breaks Ctrl-Tab. switch_window_key\n\tsed -i '/.*name=\\\"&lt;Super&gt;Tab.*$/d' ~/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml\nfi\n\n# if ls /etc/apt/sources.list.d/system76* 1> /dev/null 2>&1; then\nif [[ $distro == 'popos' ]]; then\n\t# Addition, does not overwrite existing\n\tif [[ $(gsettings get org.gnome.desktop.wm.keybindings minimize | grep \"\\[\\]\" | wc -l) != 1 ]];then\n\t\techo \"Adding Super-h (Cmd+h) to hide/minimize Window.\"\n\t\tgsettings set org.gnome.desktop.wm.keybindings minimize \"['<Super>h','<Alt>F9']\"\n\t\t# work around to make sure settings survive reboot\n\t\tdconf dump /org/gnome/desktop/wm/keybindings/ > tempkb.conf\n\t\tdconf load /org/gnome/desktop/wm/keybindings/ < tempkb.conf\n\telse\n\t\tbound=$(gsettings get org.gnome.desktop.wm.keybindings minimize)\n\t\techo \"Hide/minimize Window is already bound to \" $bound \" , please remap it to Super-H for kinto.\"\n\t\techo \"gsettings set org.gnome.desktop.wm.keybindings minimize \\\"['<Super>h','<Alt>F9']\\\"\"\n\tfi\nfi\n\nif [[ $distro == \"elementaryos\" ]]; then\n\tgsettings set io.elementary.terminal.settings natural-copy-paste false\n\tsudo ./linux/system-config/unipkg.sh libvte-2.91-dev\nfi\n\nif ! [ -x \"$(command -v xhost)\" ] || ! [ -x \"$(command -v gcc)\" ]; then\n\tif [ \"$distro\" == \"manjarolinux\" ]; then\n\t\tsudo ./linux/system-config/unipkg.sh \"xorg-xhost gcc\"\n\tfi\nfi\n\nif [[ $dename == \"kde\" ]]; then\n\tif [[ $distro == \"manjarolinux\" ]] || cat /etc/os-release | grep -E \"^ID(_LIKE)?\" | grep -q arch; then # Manjario or other arch-like distros: SteamOS3,HoloISO\n\t\tsudo ./linux/system-config/unipkg.sh vte3\n\t\tsudo ./linux/system-config/unipkg.sh python-pip\n\telse\n\t\tsudo ./linux/system-config/unipkg.sh libvte-2.91-dev\n\tfi\nfi\nif [[ $distro == 'kdeneon' ]]; then\n\tkwriteconfig5 --file \"$HOME/.config/kglobalshortcutsrc\" --group \"kwin\" --key \"Show Desktop\" \"Meta+D,none,Show Desktop\"\n\tkwriteconfig5 --file \"$HOME/.config/kglobalshortcutsrc\" --group \"kwin\" --key \"Window Close\" \"Alt+F4,none,Close Window\"\n\tkwriteconfig5 --file \"$HOME/.config/kglobalshortcutsrc\" --group \"kwin\" --key \"Window Minimize\" \"Meta+PgDown,none,Minimize Window\"\n\tkwriteconfig5 --file \"$HOME/.config/kglobalshortcutsrc\" --group \"kwin\" --key \"Window Maximize\" \"Meta+PgUp,none,Maximize Window\"\n\tkquitapp5 kglobalaccel && sleep 2s && kglobalaccel5 &\nfi\n\nif [[ $distro == 'fedora' ]] || [[ $distro == 'fedoralinux' ]]; then\n\tif [[ $(gsettings get org.gnome.desktop.wm.keybindings show-desktop | grep \"\\[\\]\" | wc -l) == 1 ]];then\n\t\tgsettings set org.gnome.desktop.wm.keybindings show-desktop \"['<Super>d']\"\n\telse\n\t\tif [[ $(gsettings get org.gnome.desktop.wm.keybindings show-desktop | grep \"<Super>d\" | wc -l) == 0 ]]; then\n\t\t\techo 'Kinto will not set your \"Show Desktop\" hotkey due to it already being set.\\nPlease set Show Desktop to Super-D, or Edit Kinto'\"'\"'s config.'\n\t\t\techo \"Did not run the following.\"\n\t\t\techo \"gsettings set org.gnome.desktop.wm.keybindings show-desktop \\\"['<Super>d']\\\"\"\t\n\t\tfi\n\tfi\nfi\n\n# if [ $# -eq 0 ]; then\n# \techo \"Install Kinto - xkeysnail (udev)\"\n# \techo \"  1) Windows & Mac (HID driver) - Most Standard keyboards (& 1st party usb/bt Apple keyboards)\"\n# \techo \"  2) Mac Only & VMs on Macbooks - 3rd & 1st party Apple keyboards\"\n# \techo \"  3) Chromebook - Chromebook running Linux\"\n# \techo \"  4) IBM M - Keyboards w/o Super/Win keys\"\n# \t# echo \"  5) Uninstall\"\n\n# \tread n\n\n# \tset \"$n\"\n# fi\n\n# branch=$(git rev-parse --abbrev-ref HEAD)\n# if [ \"$branch\" == \"dev\" ] || [ \"$branch\" == \"alpha\" ];then\n# \twhile true; do\n# \tread -rep $'\\nExperimental Support for Firefox/Chrome Back/Forward hotkeys (Cmd+Left/Right)?\\n(Keys could get stuck, switch windows or press ctrl &/or super to release) (y/n)\\n' yn\n# \tcase $yn in\n# \t\t[Yy]* ) exp='/sbin/runuser -l {username} -c \"export DISPLAY={displayid};{homedir}/.config/kinto/caret_status_xkey.sh\\&\";'; expsh='\"{homedir}/.config/kinto/caret_status_xkey.sh\"'; break;;\n# \t\t[Nn]* ) exp=\" \"; expsh=\" \" break;;\n# \t\t# * ) echo \"Please answer yes or no.\";;\n# \tesac\n# \tdone\n# else\n# \techo -e \"\\nSupport for Firefox/Chrome Back/Forward hotkeys (Cmd+Left/Right) disabled on $branch w/ xkeysnail \\n\"\nexp=\" \"\nexpsh=\" \"\n# fi\n# sudo systemctl enable xkeysnail >/dev/null 2>&1\n# if ! [ -x \"$(command -v inotifywait)\" ]; then\n# \techo \"Will need to install inotify-tools to restart key remapper live for config file changes...\"\n# \tsudo ./linux/system-config/unipkg.sh inotify-tools\n# fi\nif ! [ -x \"$(command -v git)\" ]; then\n\techo \"Will need to install git...\"\n\tsudo ./linux/system-config/unipkg.sh git\nfi\nif ! [ -x \"$(command -v pip3)\" ]; then\n\techo \"Will need to install python3-pip...\"\n\tsudo ./linux/system-config/unipkg.sh python3-pip\nfi\nif ! [ -x \"$(command -v python3-config)\" ]; then\n\tif [ \"$distro\" == \"ubuntu\" ] || [ \"${distro::6}\" == \"debian\" ] || [ \"$distro\" == 'linuxmint' ]; then\n\t\tpydev=\"python3-dev python3-tk\"\n\telif [ \"$distro\" == \"fedora\" ] || [ \"$distro\" == \"fedoralinux\" ]; then\n\t\tpydev=\"python3-devel python3-tkinter\"\n\tfi\n\tif [ \"$distro\" == \"gnome\" ] || [ \"$distro\" == \"fedora\" ] || [ \"$distro\" == \"fedoralinux\" ] || [ \"${distro::6}\" == \"debian\" ] || [ \"$distro\" == 'linuxmint' ] ; then\n\t\techo \"Will need to install $pydev...\"\n\t\tsudo ./linux/system-config/unipkg.sh \"$pydev\"\n\tfi\nfi\n# if [ \"$distro\" == \"ubuntu\" ] && [ \"$dename\" == \"gnome\" ];then\n# \tsudo ./linux/system-config/unipkg.sh gnome-tweaks gnome-shell-extension-appindicator gir1.2-appindicator3-0.1\n# fi\nif ! [ -x \"$(command -v xhost)\" ] || ! [ -x \"$(command -v gcc)\" ]; then\n\tif [ \"$distro\" == \"\\\"manjaro linux\\\"\" ]; then\n\t\tsudo ./linux/system-config/unipkg.sh \"xorg-xhost gcc\"\n\tfi\nfi\nif [ \"$distro\" == 'linuxmint' ] ; then\n\tpip3 install setuptools\nelif [ \"${distro::6}\" == \"debian\" ]; then\n\tsudo pip3 install setuptools wheel\nfi\n\npip3 install pillow\n\n# echo \"Transferring files...\"\nmkdir -p ~/.config/kinto\n\n# KDE xhost fix\n# mkdir -p ~/.kde/Autostart\n# echo -e '#!/bin/sh\\rxhost +SI:localuser:root' > ~/.kde/Autostart/kintohost.sh\n# chmod +x ~/.kde/Autostart/kintohost.sh\n\n# KDE startup - xhost fix\nmkdir -p ~/.config/autostart\nif [ ! \"$sysv\" -eq 0 ];then\n\tyes | cp -rf ./linux/xkeysnail.desktop ~/.config/kinto/xkeysnail.desktop\nelse\n\tyes | cp -rf ./linux/xkeysnail_sysv.desktop ~/.config/kinto/xkeysnail.desktop\nfi\n\n# yes | cp -rf ./linux/xkeystart.sh ~/.config/kinto/xkeystart.sh\n\n# *** More testing needing, universal way of killing kinto on user log out? ***\n# yes | sudo cp -rf linux/root_logoff.sh /usr/local/bin/logoff.sh\n# sudo chown root:root /usr/local/bin/logoff.sh\n# sudo chmod u+rwx /usr/local/bin/logoff.sh\n# sudo chmod go-w+rx /usr/local/bin/logoff.sh\n# *** End universal killing of kinto\n\n# logoff fix - not solid for every os. Prevents missed 1 character input on login\n# yes | sudo cp -rf linux/gnome_logoff.sh ~/.config/kinto/logoff.sh\n\nif [ -d \"./.git\" ] \nthen\n\techo \"$(git describe --tag --abbrev=0 | head -n 1)\" \"build\" \"$(git rev-parse --short HEAD)\" > ~/.config/kinto/version\nelif [ -f \"./dl_version\" ]; then\n\tcp ./dl_version  ~/.config/kinto/version\nelse\n\t# Not a typo - v is built in\n\techo \"ersion Unknown\"  > ~/.config/kinto/version\nfi\n\nyes | cp -rf ./linux/kinto.py ./linux/kinto.py.new\nyes | cp -rf ./linux/gui/ ~/.config/kinto/\nyes | cp -nrf ./linux/initkb ~/.config/kinto/initkb\nyes | cp -rf ./linux/killdups.sh ~/.config/kinto/killdups.sh\nyes | cp -rf ./linux/trayapps/appindicator/kintotray.py ~/.config/kinto/kintotray.py\nyes | cp -rf ./linux/trayapps/appindicator/kintotray.desktop ~/.config/kinto/kintotray.desktop\nyes | cp -rf ./linux/gui/kinto.desktop ./linux/gui/kinto.desktop.new\nyes | cp -rf ./linux/trayapps/appindicator/icons/kinto-color-16.svg ~/.config/kinto/kinto-color.svg\nyes | cp -rf ./linux/trayapps/appindicator/icons/kinto-color-16.svg ~/.config/kinto/kinto-color-48.svg\nyes | cp -rf ./linux/trayapps/appindicator/icons/kinto-invert-16.svg ~/.config/kinto/kinto-invert.svg\nyes | cp -rf ./linux/trayapps/appindicator/icons/kinto-solid-16.svg ~/.config/kinto/kinto-solid.svg\nyes | cp -rf ./linux/trayapps/appindicator/icons/kinto.svg ~/.config/kinto/kinto.svg\n# yes | cp -rf ./linux/system-config/caret_status_xkey.sh ~/.config/kinto/caret_status_xkey.sh\n\nyes | cp -rf ./linux/limitedadmins ./linux/limitedadmins.new\nsed -i \"s/{username}/`whoami`/g\" ./linux/limitedadmins.new\nsed -i \"s#{systemctl}#`\\\\which systemctl`#g\" ./linux/limitedadmins.new\nsed -i \"s#{pkill}#`\\\\which pkill`#g\" ./linux/limitedadmins.new\nif [ ! \"$sysv\" -eq 0 ];then\n\techo \"Using systemd...\"\n\tyes | cp -rf ./linux/xkeysnail.service ./linux/xkeysnail.service.new\n\t# yes | cp -rf ./linux/xkeysnail.timer ~/.config/systemd/user/xkeysnail.timer\n\tsed -i \"s#{experimental-caret}#$exp#g\" ./linux/xkeysnail.service.new\n\tif [ \"$expsh\" != \" \" ];then\n\t\tsed -i \"s#{kill-caret}#/usr/bin/pkill -f $expsh#g\" ./linux/xkeysnail.service.new\n\telse\n\t\tsed -i \"s#{kill-caret}#$expsh#g\" ./linux/xkeysnail.service.new\n\tfi\n\tsed -i \"s/{username}/`whoami`/g\" ./linux/xkeysnail.service.new\n\tsed -i \"s#{homedir}#`echo \"$HOME\"`#g\" ./linux/xkeysnail.service.new\n\tsed -i \"s#{xhost}#`\\\\which xhost`#g\" ./linux/xkeysnail.service.new\n\tsed -i \"s/{displayid}/`echo \"$DISPLAY\"`/g\" ./linux/xkeysnail.service.new\nelse\n\techo \"Using sysvinit...\"\nfi\nsed -i \"s#{homedir}#`echo \"$HOME\"`#g\" ~/.config/kinto/kintotray.desktop\nsed -i \"s#{homedir}#`echo \"$HOME\"`#g\" ~/.config/kinto/gui/kinto-gui.py\nsed -i \"s#{homedir}#`echo \"$HOME\"`#g\" ./linux/gui/kinto.desktop.new\nsudo mv ./linux/gui/kinto.desktop.new /usr/share/applications/kinto.desktop\nsed -i \"s#{systemctl}#`\\\\which systemctl`#g\" ~/.config/kinto/xkeysnail.desktop\nsed -i \"s#{xhost}#`\\\\which xhost`#g\" ~/.config/kinto/xkeysnail.desktop\nsed -i \"s#{homedir}#`echo \"$HOME\"`#g\" ~/.config/kinto/xkeysnail.desktop\n# sed -i \"s#{homedir}#`echo \"$HOME\"`#g\" ~/.config/kinto/prexk.sh\n# sed -i \"s/{displayid}/`echo \"$DISPLAY\"`/g\" ~/.config/kinto/prexk.sh\n\nif [[ $dename == \"budgie\" ]]; then\n\tperl -pi -e \"s/\\s{4}(# )(K.*)(# Default SL - Change workspace.*budgie.*)/    \\$2\\$3/g\" ./linux/kinto.py.new >/dev/null 2>&1\nfi\n\nif [[ $distro == \"popos\" ]]; then\n\tperl -pi -e \"\\s{4}(# )(K.*)(# SL - .*popos.*)/    \\$2\\$3/g\" ./linux/kinto.py.new >/dev/null 2>&1\nfi\n\nif [[ $distro == 'fedora' ]] || [[ $distro == 'fedoralinux' ]]; then\n\tperl -pi -e \"\\s{4}(# )(K.*)(# SL - .*fedora.*)/    \\$2\\$3/g\" ./linux/kinto.py.new >/dev/null 2>&1\n\tsed -i \"s#{sudo}##g\" ./linux/xkeysnail.service.new\n\tselinuxuser=system_u\n\tselinuxtype=systemd_unit_file_t\nelse\n\tsed -i \"s#{sudo}#`\\\\which sudo` #g\" ./linux/xkeysnail.service.new\nfi\n\nif [[ $distro == \"elementaryos\" ]]; then\n\tperl -pi -e \"\\s{4}(# )(K.*)(# SL - .*eos.*)/    \\$2\\$3/g\" ./linux/kinto.py.new >/dev/null 2>&1\nfi\n\nif [[ \"$distro\" == \"manjaro\"* ]]; then\n\tperl -pi -e \"\\s{4}(# )(K.*)(# SL - .*manjaro.*)/    \\$2\\$3/g\" ./linux/kinto.py.new >/dev/null 2>&1\nfi\n\nif [[ $dename == \"gnome\" ]]; then\n\tperl -pi -e \"\\s{4}(# )(K.*)(# SL - .*ubuntu.*)/    \\$2\\$3/g\" ./linux/kinto.py.new >/dev/null 2>&1\nfi\n\nif [[ $dename == \"kde\" ]]; then\n\techo \"Applying Cmd-Space to open App Launcher for KDE...\"\n\tperl -pi -e \"s/(# )(.*)(#.*kde)/\\$2\\$3/g\" ./linux/kinto.py.new >/dev/null 2>&1\nfi\n\nif [[ $dename == \"xfce\" ]]; then\n\tperl -pi -e \"\\s{4}(# )(K.*)(# SL - .*xfce.*)/    \\$2\\$3/g\" ./linux/kinto.py.new >/dev/null 2>&1\n\tperl -pi -e \"s/(# )(.*)(# xfce4)/\\$2\\$3/g\" ./linux/kinto.py.new\n\tperl -pi -e \"s/(\\w.*)(# Default not-xfce4)/# \\$1\\$2/g\" ./linux/kinto.py.new\nfi\n\nif [[ $dename == \"xfce\" ]] && ls /etc/apt/sources.list.d/enso* 1> /dev/null 2>&1; then\n    echo \"enso OS detected, applying Cmd-Space for Launchy...\"\n    perl -pi -e \"s/(K\\(\\\"RC-Space)(.*)(# )(xfce4)/\\$3\\$1\\$2\\$3\\$4/g\" ./linux/kinto.py.new >/dev/null 2>&1\n    xfconf-query --channel xfce4-keyboard-shortcuts --property \"/commands/custom/<Primary>space\" --create --type string --set \"launchy\"\nfi\n\nif ! [[ $1 == \"5\" || $1 == \"uninstall\" || $1 == \"Uninstall\" ]]; then\n\n\tmv ./linux/kinto.py.new ~/.config/kinto/kinto.py\n\t# if [ \"$distro\" == \"fedora\" ];then\n\tif [ ! \"$sysv\" -eq 0 ];then\n\t\t# echo \"Using systemd...\"\n\t\tsudo rm /etc/systemd/system/xkeysnail.service >/dev/null 2>&1\n\telse\n\t\t# echo \"Using sysvinit...\"\n\t\techo \"\"\n\tfi\n\tif [ -d /usr/lib/systemd/system ];then\n\t\txkeypath=\"/usr/lib/systemd/system/\"\n\telif [ -d /lib/systemd/system ];then\n\t\txkeypath=\"/lib/systemd/system/\"\n\tfi\n\txhost +SI:localuser:root\n\tgit clone -b kinto --depth 10 https://github.com/rbreaves/xkeysnail.git\n\tcd xkeysnail\n\tgiturl=$(git ls-remote --get-url)\n\tif [ \"$giturl\" != \"https://github.com/rbreaves/xkeysnail.git\" ];then\n\t\techo -e \"\\nreplacing xkeysnail with fork...\\n\"\n\t\tcd ..\n\t\trm -rf ./xkeysnail\n\t\tgit clone -b kinto --depth 10 https://github.com/rbreaves/xkeysnail.git\n\t\tcd xkeysnail\n\tfi\n\tsudo pip3 install --upgrade . --break-system-packages\n\tcd ..\n\twhich xkeysnail\n\tif [ $? -eq 1 ]; then\n\t\techo -e \"\\nKinto install has \\e[1m\\033[0;91mfailed\\e[0m.\\n\"\n\t\techo -e \"cd into ./xkeysnail\"\n\t\techo -e \"Run 'sudo pip3 install --upgrade .' to debug issue\"\n\t\texit 0\n\tfi\n\tsed -i \"s#{xkeysnail}#`which xkeysnail`#g\" ./linux/limitedadmins.new\n\tif [[ $distro == 'fedora' ]] || [[ $distro == 'fedoralinux' ]]; then\n\t\techo \"Changing SELinux context\"\n\t\tsudo chcon -v --user=$selinuxuser --type=$selinuxtype \"$xkeypath\"xkeysnail.service\n\tfi\n\tsudo chown root:root ./linux/limitedadmins.new\n\t# Add a check here for xkeysnail path resolving\n\tsudo mv ./linux/limitedadmins.new /etc/sudoers.d/limitedadmins\n\tif [ ! \"$sysv\" -eq 0 ];then\n\t\t# echo \"Using systemd...\"\n\t\tsed -i \"s#{xkeysnail}#`which xkeysnail`#g\" ./linux/xkeysnail.service.new\n\t\tsudo mv ./linux/xkeysnail.service.new \"$xkeypath\"xkeysnail.service && echo \"Service file added to \"$xkeypath\"xkeysnail.service\"\n\n\t\tif [[ $distro == 'fedora' ]] || [[ $distro == 'fedoralinux' ]]; then\n\t\t\tsudo cp \"$xkeypath\"xkeysnail.service /etc/systemd/system/xkeysnail.service && echo \"Copied service file to system...\" || echo \"Failed to create copy...\"\n\t\t\tsudo cp \"$xkeypath\"xkeysnail.service /etc/systemd/system/graphical.target.wants/xkeysnail.service && echo \"Copied service file to system for graphical target...\" || echo \"Failed to create copy for graphical target...\"\n\t\t\tsudo chown -R root:root /etc/systemd/system/xkeysnail.service && echo \"Ownership set for root...\" || echo \"Failed to set ownership...\"\n\t\t\tsudo chown -R root:root /etc/systemd/system/graphical.target.wants/xkeysnail.service && echo \"Ownership set for root...\" || echo \"Failed to set ownership...\"\n\t\t\tsudo chmod 644 /etc/systemd/system/xkeysnail.service && echo \"Permissions set to 644...\" || echo \"Failed to set permissions...\"\n\t\t\tsudo chmod 644 /etc/systemd/system/graphical.target.wants/xkeysnail.service && echo \"Permissions set to 644...\" || echo \"Failed to set permissions...\"\n\t\telse\n\t\t\tsudo chown -R root:root \"$xkeypath\"xkeysnail.service && echo \"Ownership set for root...\" || echo \"Failed to set ownership...\"\n\t\t\tsudo chmod 644 \"$xkeypath\"xkeysnail.service && echo \"Permissions set to 644...\" || echo \"Failed to set permissions...\"\n\t\t\tsudo ln -s \"$xkeypath\"xkeysnail.service /etc/systemd/system/xkeysnail.service && echo \"Created soft symlink...\" || echo \"Failed to create soft symlink...\"\n\t\t\tsudo ln -s \"$xkeypath\"xkeysnail.service /etc/systemd/system/graphical.target.wants/xkeysnail.service && echo \"Created soft symlink for graphical target...\" || echo \"Failed to create soft symlink for graphical target...\"\n\t\tfi\n\t\tsudo systemctl daemon-reload\n\t\tsudo systemctl disable xkeysnail\n\t\tsudo systemctl stop xkeysnail\n\telse\n\t\t# echo \"Using sysvinit...\"\n\t\techo \"\"\n\t\tsudo cp ./linux/kinto-service.sh /etc/init.d/kinto\n\t\tsudo -E /etc/init.d/kinto stop\n\t\tmv /tmp/kinto.log /tmp/kinto.log.bak\n\tfi\n\t# sudo systemctl --state=not-found --all | grep xkeysnail\n\t# if [ \"$distro\" == \"fedora\" ];then\n\t# \tsystemctl enable xkeysnail.service\n\t# else\n\t# \tsudo systemctl enable xkeysnail.service\n\t# fi\n\t# sudo systemctl restart xkeysnail\n\tsudo pkill -f kintotray &\n\t# >/dev/null 2>&1\n\tif [[ $dename == \"kde\" ]];then\n\t\tsed -i \"s/systray = true/systray = false/g\" ~/.config/kinto/initkb\n\tfi\n\tnohup python3 ~/.config/kinto/gui/kinto-gui.py >/dev/null 2>&1 &\n\n\techo -e \"Adding xhost fix...\\n\"\n\n\tLINE='xhost +SI:localuser:root'\n\n\tif [ ! -e \"~/.xprofile\" ]; then\n\t\t# Ubuntu xhost fix\n\t\techo \"$LINE\" > ~/.xprofile\n\t\t# echo \"$LINE\" > ~/.xinitrc\n\tfi\n\t# Ubuntu xhost fix\n\tgrep -qF -- \"$LINE\" ~/.xprofile || echo \"$LINE\" >> ~/.xprofile\n\t# KDE xhost fix\n\t# grep -qF -- \"$LINE\" ~/.bashrc || echo \"$LINE\" >> ~/.bashrc\n\t# grep -qF -- \"$LINE\" ~/.xinitrc || echo \"$LINE\" >> ~/.xinitrc\n\n\t# remove kintox11 login startup\n\tif test -f \"~/.config/autostart/kinto.desktop\"; then\n\t\trm ~/.config/autostart/kinto.desktop\n\tfi\n\n\techo -e \"Kinto install is \\e[1m\\e[32mcomplete\\e[0m.\\n\"\n\n\techo \"If the setup wizard fails to appear then please run this command.\"\n\techo -e \"~/.config/kinto/gui/kinto-gui.py\\n\"\n\techo -e \"You can then either \\e]8;;https://google.com\\a\\e[1m\\e[36mG\\033[0;91mo\\033[0;93mo\\e[1m\\e[36mg\\e[1m\\e[32ml\\033[0;91me\\e[0m\\e]8;;\\a what dependencies you may be missing\\nor \\e]8;;https://github.com/rbreaves/kinto/issues/new\\?assignees=rbreaves&labels=bug&template=bug_report.md&title=\\aopen an issue ticket.\\e]8;;\\a\\n\"\n\n\t# echo -e \"\\033[0;91mAfter the installer completes press Any key to re-apply your overlay (Super key) menu launcher.\\e[0m\\n\"\n\n\t# if [[ $dename == 'gnome' || $dename == 'budgie' ]];then\n\t# \techo \"GNOME: gsettings set org.gnome.mutter overlay-key 'super'\"\n\t# elif [[ $dename == 'xfce' ]];then\n\t# \techo \"XFCE: xfconf-query --channel xfce4-keyboard-shortcuts --property \\\"/commands/custom/Super_L\\\" --create --type string --set \\\"$nlauncher\\\"\"\n\t# fi\n\n\t# read -n 1 -s -r -p \"\"\n\n\t# if [[ $dename == 'gnome' || $dename == 'budgie' ]];then\n\t# \tgsettings set org.gnome.mutter overlay-key 'super'\n\t# elif [[ $dename == 'xfce' ]];then\n\t# \techo -e \"\\nSetting xfce4 launcher $nlauncher back to Super_L.\"\n\t# \txfconf-query --channel xfce4-keyboard-shortcuts --property \"/commands/custom/Super_L\" --create --type string --set \"$nlauncher\" && echo \"Success.\"\n\t# fi\n\t\n\n\tif [ \"$distro\" == \"manjarolinux\" ]; then\n\t\techo \"If you are using Manjaro and see an error about 'GLIBC_2.xx not found' appears then please update your system.\"\n\t\techo \"sudo pacman -Syu\"\n\tfi\n\n\tif [ \"$dename\" == \"gnome\" ];then\n\t\techo \"Gnome may not support appindicators well, so by default you may need to install packages before enabling the System Tray.\"\n\t\techo \"You may try one of the following extensions.\"\n\t\techo -e \"    1) \\e]8;;https://extensions.gnome.org/extension/615/appindicator-support/\\aAppIndicator and KStatusNotifierItem Support\\e]8;;\\a\"\n\t\techo -e \"    2) \\e]8;;https://extensions.gnome.org/extension/1031/topicons/\\aTopIcons Plus\\e]8;;\\a\"\n\t\techo -e \"\\nNote: you may want these supporting packages\\n'sudo apt install gnome-tweaks gnome-shell-extension-appindicator gir1.2-appindicator3-0.1'\"\n\tfi\n\nfi\n"
        }
      ]
    }
  ]
}