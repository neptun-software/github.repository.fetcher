{
  "metadata": {
    "timestamp": 1736559453501,
    "page": 6,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Trusted-AI/adversarial-robustness-toolbox",
      "stars": 4986,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.26953125,
          "content": "[run]\nbranch = True\nsource = art\n\n[report]\nexclude_lines =\n    if self.debug:\n    pragma: no cover\n    raise NotImplementedError\n    if __name__ == .__main__.:\n    if TYPE_CHECKING:\nignore_errors = True\nomit =\n    docs/*\n    examples/*\n    notebooks/*\n    tests/*\n    utils/*\n"
        },
        {
          "name": ".dockerIgnore",
          "type": "blob",
          "size": 0.01953125,
          "content": "./venv*\n.git\n./TMP/\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.083984375,
          "content": "# Remove IPython notebooks from language statistics\n*.ipynb linguist-detectable=false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.3876953125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports / type hints\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n.mypy_cache\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# IPython Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# dotenv\n.env\n\n# virtualenv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n\n# ignore local config\n*config.ini\n\n# ignore pictures\n*.jpg\ndemo/pics/*\n\n# Things TF might pull when testing\n*.gz\n*.npy\n*.npz\n*.ipynb\n.DS_Store\n\n# ignore PyCharm project files\n.idea/\n\n# Exceptions for notebooks/\n!notebooks/*.ipynb\n!notebooks/adaptive_defence_evaluations/*.ipynb\n!notebooks/adversarial_patch/*.ipynb\n!notebooks/art_evaluations/*.ipynb\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 17.7001953125,
          "content": "[MAIN]\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Files or directories to be skipped. They should be base names, not\n# paths.\nignore=CVS\n\n# Add files or directories matching the regex patterns to the ignore-list. The\n# regex matches against paths and can be in Posix or Windows format.\nignore-paths=\n\n# Files or directories matching the regex patterns are skipped. The regex\n# matches against base names, not paths.\nignore-patterns=^\\.#\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=\n    pylint.extensions.check_elif,\n    pylint.extensions.bad_builtin,\n    pylint.extensions.docparams,\n    pylint.extensions.for_any_all,\n    pylint.extensions.set_membership,\n    pylint.extensions.code_style,\n    pylint.extensions.overlapping_exceptions,\n    pylint.extensions.typing,\n    pylint.extensions.redefined_variable_type,\n    pylint.extensions.comparison_placement,\n    pylint.extensions.broad_try_clause,\n    pylint.extensions.dict_init_mutate,\n    pylint.extensions.consider_refactoring_into_while_condition,\n\n# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the\n# number of processors available to use.\njobs=1\n\n# When enabled, pylint would attempt to guess common misconfiguration and emit\n# user-friendly hints instead of false-positive error messages.\nsuggestion-mode=yes\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=no\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code\nextension-pkg-allow-list=\n\n# Minimum supported python version\npy-version = 3.9.0\n\n# Control the amount of potential inferred values when inferring a single\n# object. This can help the performance when dealing with large functions or\n# complex, nested conditions.\nlimit-inference-results=100\n\n# Specify a score threshold under which the program will exit with error.\nfail-under=10.0\n\n# Return non-zero exit code if any of these messages/categories are detected,\n# even if score is above --fail-under value. Syntax same as enable. Messages\n# specified are enabled, while categories only check already-enabled messages.\nfail-on=\n\n# Clear in-memory caches upon conclusion of linting. Useful if running pylint in\n# a server-like mode.\nclear-cache-post-run=no\n\n\n[MESSAGES CONTROL]\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED\n# confidence=\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once). See also the \"--disable\" option for examples.\nenable=\n    use-symbolic-message-instead,\n    useless-suppression,\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once).You can also use \"--disable=all\" to\n# disable everything first and then re-enable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use\"--disable=all --enable=classes\n# --disable=W\"\n\ndisable=\n    attribute-defined-outside-init,\n    invalid-name,\n    missing-docstring,\n    protected-access,\n    too-few-public-methods,\n    # handled by black\n    format,\n    # We anticipate #3512 where it will become optional\n    fixme,\n    consider-using-assignment-expr,\n    # ART\n    duplicate-code,\n    no-member,\n    import-outside-toplevel,\n    import-error,\n    not-callable,\n    too-many-arguments,\n    too-many-locals,\n    unsupported-binary-operation,\n\n[REPORTS]\n\n# Set the output format. Available formats are text, parseable, colorized, msvs\n# (visual studio) and html. You can also give a reporter class, eg\n# mypackage.mymodule.MyReporterClass.\noutput-format=text\n\n# Tells whether to display a full report or only the messages\nreports=no\n\n# Python expression which should return a note less than 10 (10 is the highest\n# note). You have access to the variables 'fatal', 'error', 'warning', 'refactor', 'convention'\n# and 'info', which contain the number of messages in each category, as\n# well as 'statement', which is the total number of statements analyzed. This\n# score is used by the global evaluation report (RP0004).\nevaluation=max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details\n#msg-template=\n\n# Activate the evaluation score.\nscore=yes\n\n\n[LOGGING]\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format\nlogging-modules=logging\n\n# The type of string formatting that logging methods do. `old` means using %\n# formatting, `new` is for `{}` formatting.\nlogging-format-style=old\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,XXX,TODO\n\n# Regular expression of note tags to take in consideration.\n#notes-rgx=\n\n\n[SIMILARITIES]\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=6\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=yes\n\n# Signatures are removed from the similarity computation\nignore-signatures=yes\n\n\n[VARIABLES]\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid defining new builtins when possible.\nadditional-builtins=\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,_cb\n\n# Tells whether unused global variables should be treated as a violation.\nallow-global-unused-variables=yes\n\n# List of names allowed to shadow builtins\nallowed-redefined-builtins=\n\n# List of qualified module names which can have objects that can redefine\n# builtins.\nredefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io\n\n\n[FORMAT]\n\n# Maximum number of characters on a single line.\nmax-line-length=100\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=no\n\n# Allow the body of a class to be on the same line as the declaration if body\n# contains single statement.\nsingle-line-class-stmt=no\n\n# Maximum number of lines in a module\nmax-module-lines=2000\n\n# String used as indentation unit. This is usually \"    \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n# Number of spaces of indent required inside a hanging or continued line.\nindent-after-paren=4\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\n\n\n[BASIC]\n\n# Good variable names which should always be accepted, separated by a comma\ngood-names=i,j,k,ex,Run,_\n\n# Good variable names regexes, separated by a comma. If names match any regex,\n# they will always be accepted\ngood-names-rgxs=\n\n# Bad variable names which should always be refused, separated by a comma\nbad-names=foo,bar,baz,toto,tutu,tata\n\n# Bad variable names regexes, separated by a comma. If names match any regex,\n# they will always be refused\nbad-names-rgxs=\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Include a hint for the correct naming format with invalid-name\ninclude-naming-hint=no\n\n# Naming style matching correct function names.\nfunction-naming-style=snake_case\n\n# Regular expression matching correct function names\nfunction-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Naming style matching correct variable names.\nvariable-naming-style=snake_case\n\n# Regular expression matching correct variable names\nvariable-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Naming style matching correct constant names.\nconst-naming-style=UPPER_CASE\n\n# Regular expression matching correct constant names\nconst-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n\n# Naming style matching correct attribute names.\nattr-naming-style=snake_case\n\n# Regular expression matching correct attribute names\nattr-rgx=[a-z_][a-z0-9_]{2,}$\n\n# Naming style matching correct argument names.\nargument-naming-style=snake_case\n\n# Regular expression matching correct argument names\nargument-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Naming style matching correct class attribute names.\nclass-attribute-naming-style=any\n\n# Regular expression matching correct class attribute names\nclass-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n\n# Naming style matching correct class constant names.\nclass-const-naming-style=UPPER_CASE\n\n# Regular expression matching correct class constant names. Overrides class-\n# const-naming-style.\n#class-const-rgx=\n\n# Naming style matching correct inline iteration names.\ninlinevar-naming-style=any\n\n# Regular expression matching correct inline iteration names\ninlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$\n\n# Naming style matching correct class names.\nclass-naming-style=PascalCase\n\n# Regular expression matching correct class names\nclass-rgx=[A-Z_][a-zA-Z0-9]+$\n\n\n# Naming style matching correct module names.\nmodule-naming-style=snake_case\n\n# Regular expression matching correct module names\nmodule-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n\n\n# Naming style matching correct method names.\nmethod-naming-style=snake_case\n\n# Regular expression matching correct method names\nmethod-rgx=[a-z_][a-z0-9_]{2,}$\n\n# Regular expression matching correct type variable names\n#typevar-rgx=\n\n# Regular expression which should only match function or class names that do\n# not require a docstring. Use ^(?!__init__$)_ to also check __init__.\nno-docstring-rgx=__.*__\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=-1\n\n# List of decorators that define properties, such as abc.abstractproperty.\nproperty-classes=abc.abstractproperty\n\n\n[TYPECHECK]\n\n# Regex pattern to define which classes are considered mixins if ignore-mixin-\n# members is set to 'yes'\nmixin-class-rgx=.*MixIn\n\n# List of module names for which member attributes should not be checked and\n# will not be imported (useful for modules/projects where namespaces are\n# manipulated during runtime and thus existing member attributes cannot be\n# deduced by static analysis). It supports qualified module names, as well\n# as Unix pattern matching.\nignored-modules=\n\n# List of class names for which member attributes should not be checked (useful\n# for classes with dynamically set attributes). This supports the use of\n# qualified names.\nignored-classes=SQLObject, optparse.Values, thread._local, _thread._local\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=REQUEST,acl_users,aq_parent,argparse.Namespace\n\n# List of decorators that create context managers from functions, such as\n# contextlib.contextmanager.\ncontextmanager-decorators=contextlib.contextmanager\n\n# Tells whether to warn about missing members when the owner of the attribute\n# is inferred to be None.\nignore-none=yes\n\n# This flag controls whether pylint should warn about no-member and similar\n# checks whenever an opaque object is returned when inferring. The inference\n# can return multiple potential results while evaluating a Python object, but\n# some branches might not be evaluated, which results in partial inference. In\n# that case, it might be useful to still emit no-member and other checks for\n# the rest of the inferred objects.\nignore-on-opaque-inference=yes\n\n# Show a hint with possible names when a member name was not found. The aspect\n# of finding the hint is based on edit distance.\nmissing-member-hint=yes\n\n# The minimum edit distance a name should have in order to be considered a\n# similar match for a missing member name.\nmissing-member-hint-distance=1\n\n# The total number of similar names that should be taken in consideration when\n# showing a hint for a missing member.\nmissing-member-max-choices=1\n\n[SPELLING]\n\n# Spelling dictionary name. Available dictionaries: none. To make it working\n# install python-enchant package.\nspelling-dict=\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# List of comma separated words that should be considered directives if they\n# appear and the beginning of a comment and should not be checked.\nspelling-ignore-comment-directives=fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:,pragma:,# noinspection\n\n# A path to a file that contains private dictionary; one word per line.\nspelling-private-dict-file=.pyenchant_pylint_custom_dict.txt\n\n# Tells whether to store unknown words to indicated private dictionary in\n# --spelling-private-dict-file option instead of raising a message.\nspelling-store-unknown-words=no\n\n# Limits count of emitted suggestions for spelling mistakes.\nmax-spelling-suggestions=2\n\n\n[DESIGN]\n\n# Maximum number of arguments for function / method\nmax-args = 9\n\n# Maximum number of locals for function / method body\nmax-locals = 19\n\n# Maximum number of return / yield for function / method body\nmax-returns=11\n\n# Maximum number of branch for function / method body\nmax-branches = 20\n\n# Maximum number of statements in function / method body\nmax-statements = 50\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=11\n\n# Maximum number of statements in a try-block\nmax-try-statements = 7\n\n# Maximum number of positional arguments (see R0917).\nmax-positional-arguments = 12\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,__new__,setUp,__post_init__\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=mcs\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,_fields,_replace,_source,_make\n\n# Warn about protected attribute access inside special methods\ncheck-protected-access-in-special-methods=no\n\n[IMPORTS]\n\n# List of modules that can be imported at any level, not just the top level\n# one.\nallow-any-import-level=\n\n# Allow wildcard imports from modules that define __all__.\nallow-wildcard-with-all=no\n\n# Allow explicit reexports by alias from a package __init__.\nallow-reexport-from-package=no\n\n# Analyse import fallback blocks. This can be used to support both Python 2 and\n# 3 compatible code, which means that the block might have code that exists\n# only in one or another interpreter, leading to false positives when analysed.\nanalyse-fallback-blocks=no\n\n# Deprecated modules which should not be used, separated by a comma\ndeprecated-modules=regsub,TERMIOS,Bastion,rexec\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled)\nimport-graph=\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled)\next-import-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled)\nint-import-graph=\n\n# Force import order to recognize a module as part of the standard\n# compatibility libraries.\nknown-standard-library=_string\n\n# Force import order to recognize a module as part of a third party library.\nknown-third-party=enchant\n\n# Couples of modules and preferred modules, separated by a comma.\npreferred-modules=\n\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when being caught. Defaults to\n# \"Exception\"\novergeneral-exceptions=builtins.Exception\n\n\n[TYPING]\n\n# Set to ``no`` if the app / library does **NOT** need to support runtime\n# introspection of type annotations. If you use type annotations\n# **exclusively** for type checking of an application, you're probably fine.\n# For libraries, evaluate if some users what to access the type hints at\n# runtime first, e.g., through ``typing.get_type_hints``. Applies to Python\n# versions 3.7 - 3.9\nruntime-typing = no\n\n\n[DEPRECATED_BUILTINS]\n\n# List of builtins function names that should not be used, separated by a comma\nbad-functions=map,input\n\n\n[REFACTORING]\n\n# Maximum number of nested blocks for function / method body\nmax-nested-blocks=5\n\n# Complete name of functions that never returns. When checking for\n# inconsistent-return-statements if a never returning function is called then\n# it will be considered as an explicit return statement and no message will be\n# printed.\nnever-returning-functions=sys.exit,argparse.parse_error\n\n\n[STRING]\n\n# This flag controls whether inconsistent-quotes generates a warning when the\n# character used as a quote delimiter is used inconsistently within a module.\ncheck-quote-consistency=no\n\n# This flag controls whether the implicit-str-concat should generate a warning\n# on implicit string concatenation in sequences defined over several lines.\ncheck-str-concat-over-line-jumps=no\n\n\n[CODE_STYLE]\n\n# Max line length for which to sill emit suggestions. Used to prevent optional\n# suggestions which would get split by a code formatter (e.g., black). Will\n# default to the setting for ``max-line-length``.\n#max-line-length-suggestions="
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.572265625,
          "content": "# This is the official list of Adversarial Robustness Toolbox (ART) Authors for copyright purposes.\n\n# Names should be added to this file as:\n# - Organization\n# - Person <email address>\n\n- International Business Machines Corporation (IBM)\n- Two Six Technologies\n- Kyushu University\n- Intel Corporation\n- University of Chicago\n- The MITRE Corporation\n- General Motors Company\n- AGH University of Science and Technology\n- Rensselaer Polytechnic Institute (RPI)\n- IMT Atlantique\n- Johns Hopkins University\n- Troj.AI\n- VMware Inc.\n- University of Michigan\n- University of Wisconsin-Madison\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.685546875,
          "content": "The Adversarial Robustness Toolbox (ART) is dedicated to providing a harassment-free experience for everyone, regardless of gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, age, race, or religion. We do not tolerate harassment of participants in any form.\n\nThis code of conduct applies to all Adversarial Robustness Toolbox spaces, both online and off. Anyone who violates this code of conduct may be sanctioned or expelled from these spaces at the discretion of the Trusted-AI team.\n\nWe may add additional rules over time, which will be made clearly available to participants. Participants are responsible for knowing and abiding by these rules.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.142578125,
          "content": "# Contributing to the Adversarial Robustness Toolbox\n\n## Adding new Features\nAdding new features, improving documentation, fixing bugs, or writing tutorials are all examples of helpful \ncontributions. Furthermore, if you are publishing a new attack or defense, we strongly encourage you to add it to the \nAdversarial Robustness Toolbox so that others may evaluate it fairly in their own work.\n\nBug fixes can be initiated through GitHub pull requests. When making code contributions to the Adversarial Robustness \nToolbox, we ask that you follow the `PEP 8` coding standard and that you provide unit tests for the new features.\n\nContributions of new features must include unit test covering at least 80% of the new statements.\n\n## Validating Git Commits\nThis project uses [DCO](https://developercertificate.org/). Be sure to sign off your commits using the `-s` flag or \nadding `Signed-off-By: Name<Email>` in the commit message. Example:\n```bash\ngit commit -s -m 'Informative commit message'\n```\n\n## Unit tests\nWhen submitting additional unit tests for ART, in order to keep the code base maintainable, please make sure each unit \ntest can run ideally in a few seconds.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.193359375,
          "content": "FROM nvidia/cuda:11.3.1-cudnn8-runtime-ubuntu20.04\n\nRUN apt-get update -y\nRUN DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get -y install tzdata\nRUN apt-get install -y python3 python3-distutils python3-pip\n\nRUN pip3 install tensorflow==2.9.1 keras==2.9.0 numpy==1.22.4 scipy==1.8.1 matplotlib==3.5.2 scikit-learn==1.1.2 \\\n                 six==1.15.0 Pillow==9.2.0 pytest-cov==3.0.0 tqdm==4.64.0 statsmodels==0.13.2 pydub==0.25.1 \\\n                 resampy==0.3.1 ffmpeg-python==0.2.0 cma==3.2.2 pandas==1.4.3 h5py==3.7.0 tensorflow-addons==0.17.1 \\\n                 mxnet==1.6.0 torch==1.12.0 torchaudio==0.12.0 torchvision==0.13.0 catboost==1.0.6 GPy==1.10.0 \\\n                 lightgbm==3.3.2 xgboost==1.6.1 kornia==0.6.6 lief==0.12.1 pytest==7.1.2 pytest-pep8==1.0.6 \\\n                 pytest-mock==3.8.2 requests==2.28.1\n\nRUN apt-get -y install ffmpeg libavcodec-extra vim git\n\nRUN mkdir /project\nWORKDIR /project\nADD . /project\nRUN pip3 install .\n\nRUN echo \"You should think about possibly upgrading these outdated packages\"\nRUN pip3 list --outdated\n\n# NOTE to contributors: When changing/adding packages, please make sure that the packages are consistent with those\n# present within the requirements_test.txt files"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0791015625,
          "content": "MIT License\n\nCopyright (C) The Adversarial Robustness Toolbox (ART) Authors 2018\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MAINTAINERS.md",
          "type": "blob",
          "size": 3.162109375,
          "content": "# Maintainers Guide\n\nFollowing is the current list of maintainers on this project\n\nThe maintainers are listed in alphabetical order of their Github username.\n- Beat Buesser ([beat-buesser](https://github.com/beat-buesser))\n- Ian Molloy ([imolloy](https://github.com/imolloy))\n- Mathieu Sinn ([mathsinn](https://github.com/mathsinn))\n- Ngoc Minh Tran ([minhitbk](https://github.com/minhitbk))\n- Irina Nicolae ([ririnicolae](https://github.com/ririnicolae))\n\n## Methodology\n\nThe quality of the master branch should never be compromised.\n\nThe remainder of this document details how to merge pull requests to the\nrepositories.\n\n## Merge Approval\n\nThe project maintainers use LGTM (Looks Good To Me) in comments on the pull\nrequest to indicate acceptance prior to merging. A change requires LGTMs from\ntwo project maintainers. If the code is written by a maintainer, the change\nonly requires one additional LGTM.\n\n## Reviewing Pull Requests\n\nWe recommend reviewing pull requests directly within GitHub. This allows a\npublic commentary on changes, providing transparency for all users. When\nproviding feedback be civil, courteous, and kind. Disagreement is fine, so long\nas the discourse is carried out politely. If we see a record of uncivil or\nabusive comments, we will revoke your commit privileges and invite you to leave\nthe project.\n\nDuring your review, consider the following points:\n\n### Does the change have positive impact?\n\nSome proposed changes may not represent a positive impact to the project. Ask\nwhether or not the change will make understanding the code easier, or if it\ncould simply be a personal preference on the part of the author (see\n[bikeshedding](https://en.wiktionary.org/wiki/bikeshedding)).\n\nPull requests that do not have a clear positive impact should be closed without\nmerging.\n\n### Do the changes make sense?\n\nIf you do not understand what the changes are or what they accomplish, ask the\nauthor for clarification. Ask the author to add comments and/or clarify test\ncase names to make the intentions clear.\n\nAt times, such clarification will reveal that the author may not be using the\ncode correctly, or is unaware of features that accommodate their needs. If you\nfeel this is the case, work up a code sample that would address the pull\nrequest for them, and feel free to close the pull request once they confirm.\n\n### Does the change introduce a new feature?\n\nFor any given pull request, ask yourself \"is this a new feature?\" If so, does\nthe pull request (or associated issue) contain narrative indicating the need\nfor the feature? If not, ask them to provide that information.\n\nAre new unit tests in place that test all new behaviors introduced? If not, do\nnot merge the feature until they are! Is documentation in place for the new\nfeature? (See the documentation guidelines). If not, do not merge the feature\nuntil it is! Is the feature necessary for general use cases? Try and keep the\nscope of any given component narrow. If a proposed feature does not fit that\nscope, recommend to the user that they maintain the feature on their own, and\nclose the request. You may also recommend that they see if the feature gains\ntraction among other users, and suggest they re-submit when they can show such\nsupport."
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1376953125,
          "content": "include *.md\ninclude CODE_OF_CONDUCT\ninclude LICENSE\nrecursive-include models/ *.npy\ngraft docs\nprune docs/_build\ngraft examples\ngraft tests\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.0888671875,
          "content": "PROJECT_HOME_DIR := ${CURDIR}\n\nbuild:\n    # Builds a TensorFlow 2 ART docker container\n    # IMPORTANT ! If you have an existing python env folder make sure to first add it to the `.dockerIgnore` \\\n    to reduce the size of your the art docker image\n\tdocker build -t project-art-tf2 .\n\nbuild1:\n\t# Builds a TensorFlow 1 ART docker container\n    # IMPORTANT ! If you have an existing python env folder make sure to first add it to the `.dockerIgnore` \\\n    to reduce the size of your the art docker image\n\tdocker build -t project-art-tf1 .\n\nrun-bash:\n\tdocker  run --rm -it --name project-art-run-bash -v ${PWD}:/project/ -v ~/.art/:/root/.art/ project-art-tf2  /bin/bash\n\nrun-test:\n\tdocker  run --rm --name project-art-run-test -v ${PWD}:/project/ -v ~/.art/:/root/.art/  project-art-tf2\n\nrun-pep:\n\tdocker  run --rm --name project-art-run-pep -v ${PWD}:/project/ -v ~/.art/:/root/.art/ project-art-tf2 py.test --pep8 -m pep8\n\nrun-jupyter:\n\tdocker  run --rm  --name project-art-run-jupyter -v ${PWD}:/project/ -v ~/.art/:/root/.art/ -p 8888:8888 project-art-tf2 jupyter notebook --ip 0.0.0.0 --no-browser --allow-root\n"
        },
        {
          "name": "PULL_REQUEST_TEMPLATE.md",
          "type": "blob",
          "size": 1.1953125,
          "content": "# Description\n\nPlease include a summary of the change, motivation and which issue is fixed. Any dependencies changes should also be included.\n\nFixes # (issue)\n\n## Type of change\n\nPlease check all relevant options.\n\n- [ ] Improvement (non-breaking)\n- [ ] Bug fix (non-breaking)\n- [ ] New feature (non-breaking)\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n- [ ] This change requires a documentation update\n\n# Testing\n\nPlease describe the tests that you ran to verify your changes. Consider listing any relevant details of your test configuration.\n\n- [ ] Test A\n- [ ] Test B\n\n**Test Configuration**:\n- OS\n- Python version\n- ART version or commit number\n- TensorFlow / Keras / PyTorch / MXNet version\n\n# Checklist\n\n- [ ] My code follows the style guidelines of this project\n- [ ] I have performed a self-review of my own code\n- [ ] I have commented my code\n- [ ] I have made corresponding changes to the documentation\n- [ ] My changes generate no new warnings\n- [ ] I have added tests that prove my fix is effective or that my feature works\n- [ ] New and existing unit tests pass locally with my changes\n- [ ] My changes have been tested using both CPU and GPU devices\n"
        },
        {
          "name": "README-cn.md",
          "type": "blob",
          "size": 4.921875,
          "content": "# Adversarial Robustness Toolbox (ART) v1.19\n<p align=\"center\">\n  <img src=\"docs/images/art_lfai.png?raw=true\" width=\"467\" title=\"ART logo\">\n</p>\n<br />\n\n![CodeQL](https://github.com/Trusted-AI/adversarial-robustness-toolbox/workflows/CodeQL/badge.svg)\n[![Documentation Status](https://readthedocs.org/projects/adversarial-robustness-toolbox/badge/?version=latest)](http://adversarial-robustness-toolbox.readthedocs.io/en/latest/?badge=latest)\n[![PyPI](https://badge.fury.io/py/adversarial-robustness-toolbox.svg)](https://badge.fury.io/py/adversarial-robustness-toolbox)\n[![codecov](https://codecov.io/gh/Trusted-AI/adversarial-robustness-toolbox/branch/main/graph/badge.svg)](https://codecov.io/gh/Trusted-AI/adversarial-robustness-toolbox)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/adversarial-robustness-toolbox)](https://pypi.org/project/adversarial-robustness-toolbox/)\n[![slack-img](https://img.shields.io/badge/chat-on%20slack-yellow.svg)](https://ibm-art.slack.com/)\n[![Downloads](https://static.pepy.tech/badge/adversarial-robustness-toolbox)](https://pepy.tech/project/adversarial-robustness-toolbox)\n[![Downloads](https://static.pepy.tech/badge/adversarial-robustness-toolbox/month)](https://pepy.tech/project/adversarial-robustness-toolbox)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/5090/badge)](https://bestpractices.coreinfrastructure.org/projects/5090)\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/lfai/artwork/master/lfaidata-assets/lfaidata-project-badge/graduate/color/lfaidata-project-badge-graduate-color.png\" alt=\"LF AI & Data\" width=\"300\"/>\n</p>\n\n对抗性鲁棒性工具集（ART）是用于机器学习安全性的Python库。ART 由\n[Linux Foundation AI & Data Foundation](https://lfaidata.foundation) (LF AI & Data)。 ART提供的工具可\n帮助开发人员和研究人员针对以下方面捍卫和评估机器学习模型和应用程序：\n逃逸，数据污染，模型提取和推断的对抗性威胁。ART支持所有流行的机器学习框架\n（TensorFlow，Keras，PyTorch，MXNet，scikit-learn，XGBoost，LightGBM，CatBoost，GPy等），所有数据类型\n（图像，表格，音频，视频等）和机器学习任务（分类，物体检测，语音识别，\n生成模型，认证等）。\n\n## Adversarial Threats\n\n<p align=\"center\">\n  <img src=\"docs/images/adversarial_threats_attacker.png?raw=true\" width=\"400\" title=\"ART logo\">\n  <img src=\"docs/images/adversarial_threats_art.png?raw=true\" width=\"400\" title=\"ART logo\">\n</p>\n<br />\n\n## ART for Red and Blue Teams (selection)\n\n<p align=\"center\">\n  <img src=\"docs/images/white_hat_blue_red.png?raw=true\" width=\"800\" title=\"ART Red and Blue Teams\">\n</p>\n<br />\n\n## 学到更多\n\n| **[开始使用][get-started]**     | **[文献资料][documentation]**     | **[贡献][contributing]**           |\n|-------------------------------------|-------------------------------|-----------------------------------|\n| - [安装][installation]<br>- [例子](examples/README.md)<br>- [Notebooks](notebooks/README.md) | - [攻击][attacks]<br>- [防御][defences]<br>- [评估器][estimators]<br>- [指标][metrics]<br>- [技术文档](https://adversarial-robustness-toolbox.readthedocs.io) | - [Slack](https://ibm-art.slack.com), [邀请函](https://join.slack.com/t/ibm-art/shared_invite/enQtMzkyOTkyODE4NzM4LTA4NGQ1OTMxMzFmY2Q1MzE1NWI2MmEzN2FjNGNjOGVlODVkZDE0MjA1NTA4OGVkMjVkNmQ4MTY1NmMyOGM5YTg)<br>- [贡献](CONTRIBUTING.md)<br>- [路线图][roadmap]<br>- [引用][citing] |\n\n[get-started]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/Get-Started\n[attacks]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/ART-Attacks\n[defences]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/ART-Defences\n[estimators]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/ART-Estimators\n[metrics]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/ART-Metrics\n[contributing]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/Contributing\n[documentation]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/Documentation\n[installation]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/Get-Started#setup\n[roadmap]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/Roadmap\n[citing]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/Contributing#citing-art\n\n该库正在不断开发中。欢迎反馈，错误报告和贡献！\n\n# 致谢\n\n本材料部分基于国防高级研究计划局（DARPA）支持的工作，合同编号HR001120C0013。\n本材料中表达的任何意见，发现和结论或建议均为作者的观点，并不一定反映国防高级研究计划局（DARPA）的观点。\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.1708984375,
          "content": "# Adversarial Robustness Toolbox (ART) v1.19\n<p align=\"center\">\n  <img src=\"docs/images/art_lfai.png?raw=true\" width=\"467\" title=\"ART logo\">\n</p>\n<br />\n\n![CodeQL](https://github.com/Trusted-AI/adversarial-robustness-toolbox/workflows/CodeQL/badge.svg)\n[![Documentation Status](https://readthedocs.org/projects/adversarial-robustness-toolbox/badge/?version=latest)](http://adversarial-robustness-toolbox.readthedocs.io/en/latest/?badge=latest)\n[![PyPI](https://badge.fury.io/py/adversarial-robustness-toolbox.svg)](https://badge.fury.io/py/adversarial-robustness-toolbox)\n[![codecov](https://codecov.io/gh/Trusted-AI/adversarial-robustness-toolbox/branch/main/graph/badge.svg)](https://codecov.io/gh/Trusted-AI/adversarial-robustness-toolbox)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/adversarial-robustness-toolbox)](https://pypi.org/project/adversarial-robustness-toolbox/)\n[![slack-img](https://img.shields.io/badge/chat-on%20slack-yellow.svg)](https://ibm-art.slack.com/)\n[![Downloads](https://static.pepy.tech/badge/adversarial-robustness-toolbox)](https://pepy.tech/project/adversarial-robustness-toolbox)\n[![Downloads](https://static.pepy.tech/badge/adversarial-robustness-toolbox/month)](https://pepy.tech/project/adversarial-robustness-toolbox)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/5090/badge)](https://bestpractices.coreinfrastructure.org/projects/5090)\n\n[中文README请按此处](README-cn.md)\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/lfai/artwork/master/lfaidata-assets/lfaidata-project-badge/graduate/color/lfaidata-project-badge-graduate-color.png\" alt=\"LF AI & Data\" width=\"300\"/>\n</p>\n\nAdversarial Robustness Toolbox (ART) is a Python library for Machine Learning Security. ART is hosted by the \n[Linux Foundation AI & Data Foundation](https://lfaidata.foundation) (LF AI & Data). ART provides tools that enable\ndevelopers and researchers to defend and evaluate Machine Learning models and applications against the\nadversarial threats of Evasion, Poisoning, Extraction, and Inference. ART supports all popular machine learning frameworks\n(TensorFlow, Keras, PyTorch, MXNet, scikit-learn, XGBoost, LightGBM, CatBoost, GPy, etc.), all data types\n(images, tables, audio, video, etc.) and machine learning tasks (classification, object detection, speech recognition,\ngeneration, certification, etc.).\n\n## Adversarial Threats\n\n<p align=\"center\">\n  <img src=\"docs/images/adversarial_threats_attacker.png?raw=true\" width=\"400\" title=\"ART logo\">\n  <img src=\"docs/images/adversarial_threats_art.png?raw=true\" width=\"400\" title=\"ART logo\">\n</p>\n<br />\n\n## ART for Red and Blue Teams (selection)\n\n<p align=\"center\">\n  <img src=\"docs/images/white_hat_blue_red.png?raw=true\" width=\"800\" title=\"ART Red and Blue Teams\">\n</p>\n<br />\n\n## Learn more\n\n| **[Get Started][get-started]**     | **[Documentation][documentation]**     | **[Contributing][contributing]**           |\n|-------------------------------------|-------------------------------|-----------------------------------|\n| - [Installation][installation]<br>- [Examples](examples/README.md)<br>- [Notebooks](notebooks/README.md) | - [Attacks][attacks]<br>- [Defences][defences]<br>- [Estimators][estimators]<br>- [Metrics][metrics]<br>- [Technical Documentation](https://adversarial-robustness-toolbox.readthedocs.io) | - [Slack](https://ibm-art.slack.com), [Invitation](https://join.slack.com/t/ibm-art/shared_invite/enQtMzkyOTkyODE4NzM4LTA4NGQ1OTMxMzFmY2Q1MzE1NWI2MmEzN2FjNGNjOGVlODVkZDE0MjA1NTA4OGVkMjVkNmQ4MTY1NmMyOGM5YTg)<br>- [Contributing](CONTRIBUTING.md)<br>- [Roadmap][roadmap]<br>- [Citing][citing] |\n\n[get-started]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/Get-Started\n[attacks]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/ART-Attacks\n[defences]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/ART-Defences\n[estimators]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/ART-Estimators\n[metrics]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/ART-Metrics\n[contributing]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/Contributing\n[documentation]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/Documentation\n[installation]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/Get-Started#setup\n[roadmap]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/Roadmap\n[citing]: https://github.com/Trusted-AI/adversarial-robustness-toolbox/wiki/Contributing#citing-art\n\nThe library is under continuous development. Feedback, bug reports and contributions are very welcome!\n\n# Acknowledgment\nThis material is partially based upon work supported by the Defense Advanced Research Projects Agency (DARPA) under\nContract No. HR001120C0013. Any opinions, findings and conclusions or recommendations expressed in this material are\nthose of the author(s) and do not necessarily reflect the views of the Defense Advanced Research Projects Agency (DARPA).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.224609375,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n(Following https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md)\n\nPlease email reports about any security related issues you find to info@lfai.foundation. This mail is delivered to a small team maintaining the Trusted-AI projects. Your email will be acknowledged within a few business day, and you'll receive a more detailed response to your email within 7 days indicating the next steps in handling your report.\n\nPlease use a descriptive subject line for your report email. After the initial reply to your report, the team will endeavor to keep you informed of the progress being made towards a fix and announcement.\n\nIn addition, please include the following information along with your report:\n\nYour name and affiliation (if any).\nA description of the technical details of the vulnerabilities. It is very important to let us know how we can reproduce your findings.\nAn explanation who can exploit this vulnerability, and what they gain when doing so -- write an attack scenario. This will help us evaluate your report quickly, especially if the issue is complex.\nWhether this vulnerability public or known to third parties. If it is, please provide details.\nIf you believe that an existing (public) issue is security-related, please send an email to info@lfai.foundation. The email should include the issue ID and a short description of why it should be handled according to this security policy.\n\nWe apply the following disclosure process:\n\nWhen a report is received, we confirm the issue and determine its severity.\nIf we know of specific third-party services or software based on ART that require mitigation before publication, those projects will be notified.\nAn advisory is prepared (but not published) which details the problem and steps for mitigation.\nThe vulnerability is fixed and potential workarounds are identified.\nWherever possible, the fix is also prepared for the branches corresponding to all releases of ART at most one year old. We will attempt to commit these fixes as soon as possible, and as close together as possible.\n\nPatch releases are published for all fixed released versions and the advisory is published.\n\nNote that each version of ART is supported for only 1 year after the release.\n"
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.837890625,
          "content": "codecov:\n  bot: \"codecov-io\"\n  max_report_age: 24\n  disable_default_path_fixes: no\n  require_ci_to_pass: yes\n  notify:\n    after_n_builds: 2\n    wait_for_ci: yes\n\ncoverage:\n  precision: 2\n  round: down\n  range: \"70...100\"\n\n  status:\n    project: yes\n    patch: yes\n    changes: no\n\n  status:\n    project:\n      default:\n        # basic\n        target: 83\n        threshold: 0\n        base: auto\n        flags: null\n        paths: null\n        # advanced\n        branches: null\n        if_not_found: success\n        if_ci_failed: error\n        informational: False\n        only_pulls: false\n\n    patch:\n      default:\n        target: auto\n        threshold: 95\n\nparsers:\n  gcov:\n    branch_detection:\n      conditional: yes\n      loop: yes\n      method: no\n      macro: no\n\ncomment:\n  layout: \"reach,diff,flags,tree\"\n  behavior: default\n  require_changes: no\n"
        },
        {
          "name": "conftest.py",
          "type": "blob",
          "size": 38.537109375,
          "content": "# MIT License\n#\n# Copyright (C) The Adversarial Robustness Toolbox (ART) Authors 2020\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n# documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\n# persons to whom the Software is furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n# Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\nimport importlib\nimport json\nimport logging\nimport os\nimport shutil\nimport tempfile\nfrom typing import Dict, List, TYPE_CHECKING, Union\nimport warnings\n\nimport numpy as np\nimport pytest\nimport requests\n\nfrom art.data_generators import (\n    KerasDataGenerator,\n    MXDataGenerator,\n    PyTorchDataGenerator,\n    TensorFlowDataGenerator,\n    TensorFlowV2DataGenerator,\n)\nfrom art.defences.preprocessor import FeatureSqueezing, JpegCompression, SpatialSmoothing\nfrom art.estimators.classification import KerasClassifier\nfrom tests.utils import (\n    ARTTestFixtureNotImplemented,\n    get_attack_classifier_pt,\n    get_image_classifier_kr,\n    get_image_classifier_kr_functional,\n    get_image_classifier_kr_tf,\n    get_image_classifier_kr_tf_functional,\n    get_image_classifier_kr_tf_with_wildcard,\n    get_image_classifier_mxnet_custom_ini,\n    get_image_classifier_pt,\n    get_image_classifier_pt_functional,\n    get_image_classifier_tf,\n    get_image_classifier_hf,\n    get_image_gan_tf_v2,\n    get_image_generator_tf_v2,\n    get_tabular_classifier_kr,\n    get_tabular_classifier_pt,\n    get_tabular_classifier_scikit_list,\n    get_tabular_classifier_tf,\n    load_dataset,\n    master_seed,\n)\n\nif TYPE_CHECKING:\n    import torch\n\nlogger = logging.getLogger(__name__)\n\ndeep_learning_frameworks = [\n    \"keras\", \"tensorflow1\", \"tensorflow2\", \"tensorflow2v1\", \"pytorch\", \"kerastf\", \"mxnet\", \"jax\", \"huggingface\",\n]\nnon_deep_learning_frameworks = [\"scikitlearn\"]\n\nart_supported_frameworks = []\nart_supported_frameworks.extend(deep_learning_frameworks)\nart_supported_frameworks.extend(non_deep_learning_frameworks)\n\nmaster_seed(1234)\n\n\ndef get_default_framework():\n    import tensorflow as tf\n\n    if tf.__version__[0] == \"2\":\n        default_framework = \"tensorflow2\"\n    else:\n        default_framework = \"tensorflow1\"\n\n    return default_framework\n\n\ndef pytest_addoption(parser):\n    parser.addoption(\n        \"--framework\",\n        action=\"store\",\n        default=get_default_framework(),\n        help=\"ART tests allow you to specify which framework to use. The default framework used is `tensorflow`. \"\n        \"Other options available are {0}\".format(art_supported_frameworks),\n    )\n\n\n@pytest.fixture\ndef image_dl_estimator_defended(framework):\n    def _image_dl_estimator_defended(one_classifier=False, **kwargs):\n        sess = None\n        classifier = None\n\n        clip_values = (0, 1)\n        fs = FeatureSqueezing(bit_depth=2, clip_values=clip_values)\n\n        defenses = []\n        if kwargs.get(\"defenses\") is None:\n            defenses.append(fs)\n        else:\n            if \"FeatureSqueezing\" in kwargs.get(\"defenses\"):\n                defenses.append(fs)\n            if \"JpegCompression\" in kwargs.get(\"defenses\"):\n                defenses.append(JpegCompression(clip_values=clip_values, apply_predict=True))\n            if \"SpatialSmoothing\" in kwargs.get(\"defenses\"):\n                defenses.append(SpatialSmoothing())\n            del kwargs[\"defenses\"]\n\n        if framework == \"tensorflow2\":\n            classifier, _ = get_image_classifier_tf(**kwargs)\n\n        if framework == \"keras\":\n            classifier = get_image_classifier_kr(**kwargs)\n\n        if framework == \"kerastf\":\n            classifier = get_image_classifier_kr_tf(**kwargs)\n\n        if framework == \"pytorch\":\n            classifier = get_image_classifier_pt(**kwargs)\n            for i, defense in enumerate(defenses):\n                if \"channels_first\" in defense.params:\n                    defenses[i].channels_first = classifier.channels_first\n\n        if classifier is not None:\n            classifier.set_params(preprocessing_defences=defenses)\n        else:\n            raise ARTTestFixtureNotImplemented(\n                \"no defended image estimator\", image_dl_estimator_defended.__name__, framework, {\"defenses\": defenses}\n            )\n\n        return classifier, sess\n\n    return _image_dl_estimator_defended\n\n\n@pytest.fixture(scope=\"function\")\ndef image_dl_estimator_for_attack(framework, image_dl_estimator, image_dl_estimator_defended):\n    def _image_dl_estimator_for_attack(attack, defended=False, **kwargs):\n        if defended:\n            potential_classifier, _ = image_dl_estimator_defended(**kwargs)\n        else:\n            potential_classifier, _ = image_dl_estimator(**kwargs)\n        image_dl_estimator_for_attack\n        classifier_list = [potential_classifier]\n        classifier_tested = [\n            potential_classifier\n            for potential_classifier in classifier_list\n            if all(t in type(potential_classifier).__mro__ for t in attack._estimator_requirements)\n        ]\n\n        if len(classifier_tested) == 0:\n            raise ARTTestFixtureNotImplemented(\n                \"no estimator available\", image_dl_estimator_for_attack.__name__, framework, {\"attack\": attack}\n            )\n        return classifier_tested[0]\n\n    return _image_dl_estimator_for_attack\n\n\n@pytest.fixture\ndef estimator_for_attack(framework):\n    # TODO DO NOT USE THIS FIXTURE this needs to be refactored into image_dl_estimator_for_attack\n    def _get_attack_classifier_list(**kwargs):\n        if framework == \"pytorch\":\n            return get_attack_classifier_pt(**kwargs)\n\n        raise ARTTestFixtureNotImplemented(\"no estimator available\", image_dl_estimator_for_attack.__name__, framework)\n\n    return _get_attack_classifier_list\n\n\n@pytest.fixture(autouse=True)\ndef setup_tear_down_framework(framework):\n    # Ran before each test\n    if framework == \"tensorflow1\" or framework == \"tensorflow2\":\n        import tensorflow as tf\n\n        if tf.__version__[0] != \"2\":\n            tf.reset_default_graph()\n\n    if framework == \"tensorflow2v1\":\n        import tensorflow.compat.v1 as tf1\n\n        tf1.reset_default_graph()\n    yield True\n\n    # Ran after each test\n    if framework == \"keras\":\n        import keras\n\n        keras.backend.clear_session()\n\n\n@pytest.fixture\ndef image_iterator(framework, get_default_mnist_subset, default_batch_size):\n    (x_train_mnist, y_train_mnist), (_, _) = get_default_mnist_subset\n\n    def _get_image_iterator():\n        if framework == \"keras\" or framework == \"kerastf\":\n            from keras.preprocessing.image import ImageDataGenerator\n\n            keras_gen = ImageDataGenerator(\n                width_shift_range=0.075,\n                height_shift_range=0.075,\n                rotation_range=12,\n                shear_range=0.075,\n                zoom_range=0.05,\n                fill_mode=\"constant\",\n                cval=0,\n            )\n            return keras_gen.flow(x_train_mnist, y_train_mnist, batch_size=default_batch_size)\n\n        if framework in [\"tensorflow1\", \"tensorflow2v1\"]:\n            import tensorflow.compat.v1 as tf\n\n            x_tensor = tf.convert_to_tensor(x_train_mnist.reshape(10, 100, 28, 28, 1))\n            y_tensor = tf.convert_to_tensor(y_train_mnist.reshape(10, 100, 10))\n            dataset = tf.data.Dataset.from_tensor_slices((x_tensor, y_tensor))\n            return dataset.make_initializable_iterator()\n\n        if framework == \"tensorflow2\":\n            import tensorflow as tf\n\n            dataset = tf.data.Dataset.from_tensor_slices((x_train_mnist, y_train_mnist)).batch(default_batch_size)\n            return dataset\n\n        if framework in [\"pytorch\", \"huggingface\"]:\n            import torch\n\n            # Create tensors from data\n            x_train_tens = torch.from_numpy(x_train_mnist)\n            x_train_tens = x_train_tens.float()\n            y_train_tens = torch.from_numpy(y_train_mnist)\n            dataset = torch.utils.data.TensorDataset(x_train_tens, y_train_tens)\n            return torch.utils.data.DataLoader(dataset=dataset, batch_size=default_batch_size, shuffle=True)\n\n        if framework == \"mxnet\":\n            from mxnet import gluon\n\n            dataset = gluon.data.dataset.ArrayDataset(x_train_mnist, y_train_mnist)\n            return gluon.data.DataLoader(dataset, batch_size=5, shuffle=True)\n\n        return None\n\n    return _get_image_iterator\n\n\n@pytest.fixture\ndef image_data_generator(framework, get_default_mnist_subset, image_iterator, default_batch_size):\n    def _image_data_generator(**kwargs):\n        (x_train_mnist, y_train_mnist), (_, _) = get_default_mnist_subset\n        image_it = image_iterator()\n        data_generator = None\n\n        if framework == \"keras\" or framework == \"kerastf\":\n            data_generator = KerasDataGenerator(\n                iterator=image_it,\n                size=x_train_mnist.shape[0],\n                batch_size=default_batch_size,\n            )\n\n        if framework in [\"tensorflow1\", \"tensorflow2v1\"]:\n            data_generator = TensorFlowDataGenerator(\n                sess=kwargs[\"sess\"],\n                iterator=image_it,\n                iterator_type=\"initializable\",\n                iterator_arg={},\n                size=x_train_mnist.shape[0],\n                batch_size=default_batch_size,\n            )\n\n        if framework == \"tensorflow2\":\n            data_generator = TensorFlowV2DataGenerator(\n                iterator=image_it,\n                size=x_train_mnist.shape[0],\n                batch_size=default_batch_size,\n            )\n\n        if framework in [\"pytorch\", \"huggingface\"]:\n            data_generator = PyTorchDataGenerator(\n                iterator=image_it, size=x_train_mnist.shape[0], batch_size=default_batch_size\n            )\n\n        if framework == \"mxnet\":\n            data_generator = MXDataGenerator(\n                iterator=image_it, size=x_train_mnist.shape[0], batch_size=default_batch_size\n            )\n\n        return data_generator\n\n    return _image_data_generator\n\n\n@pytest.fixture\ndef store_expected_values(request):\n    \"\"\"\n    Stores expected values to be retrieved by the expected_values fixture\n    Note1: Numpy arrays MUST be converted to list before being stored as json\n    Note2: It's possible to store both a framework independent and framework specific value. If both are stored the\n    framework specific value will be used\n    :param request:\n    :return:\n    \"\"\"\n\n    def _store_expected_values(values_to_store, framework=\"\"):\n\n        framework_name = framework\n        if framework_name:\n            framework_name = \"_\" + framework_name\n\n        file_name = request.node.location[0].split(\"/\")[-1][:-3] + \".json\"\n\n        try:\n            with open(\n                os.path.join(os.path.dirname(__file__), os.path.dirname(request.node.location[0]), file_name), \"r\"\n            ) as f:\n                expected_values = json.load(f)\n        except FileNotFoundError:\n            expected_values = {}\n\n        test_name = request.node.name + framework_name\n        expected_values[test_name] = values_to_store\n\n        with open(\n                os.path.join(os.path.dirname(__file__), os.path.dirname(request.node.location[0]), file_name), \"w\"\n        ) as f:\n            json.dump(expected_values, f, indent=4)\n\n    return _store_expected_values\n\n\n@pytest.fixture\ndef expected_values(framework, request):\n    \"\"\"\n    Retrieves the expected values that were stored using the store_expected_values fixture\n    :param request:\n    :return:\n    \"\"\"\n\n    file_name = request.node.location[0].split(\"/\")[-1][:-3] + \".json\"\n\n    framework_name = framework\n    if framework_name:\n        framework_name = \"_\" + framework_name\n\n    def _expected_values():\n        with open(\n            os.path.join(os.path.dirname(__file__), os.path.dirname(request.node.location[0]), file_name), \"r\"\n        ) as f:\n            expected_values = json.load(f)\n\n            # searching first for any framework specific expected value\n            framework_specific_values = request.node.name + framework_name\n            if framework_specific_values in expected_values:\n                return expected_values[framework_specific_values]\n            elif request.node.name in expected_values:\n                return expected_values[request.node.name]\n            else:\n                raise ARTTestFixtureNotImplemented(\n                    \"Couldn't find any expected values for test {0}\".format(request.node.name),\n                    expected_values.__name__,\n                    framework_name,\n                )\n\n    return _expected_values\n\n\n@pytest.fixture(scope=\"session\")\ndef get_image_classifier_mx_model():\n    import mxnet  # lgtm [py/import-and-import-from]\n\n    # TODO needs to be made parameterizable once Mxnet allows multiple identical models to be created in one session\n    from_logits = True\n\n    class Model(mxnet.gluon.nn.Block):\n        def __init__(self, **kwargs):\n            super(Model, self).__init__(**kwargs)\n            self.model = mxnet.gluon.nn.Sequential()\n            self.model.add(\n                mxnet.gluon.nn.Conv2D(\n                    channels=1,\n                    kernel_size=7,\n                    activation=\"relu\",\n                ),\n                mxnet.gluon.nn.MaxPool2D(pool_size=4, strides=4),\n                mxnet.gluon.nn.Flatten(),\n                mxnet.gluon.nn.Dense(\n                    10,\n                    activation=None,\n                ),\n            )\n\n        def forward(self, x):\n            y = self.model(x)\n            if from_logits:\n                return y\n\n            return y.softmax()\n\n    model = Model()\n    custom_init = get_image_classifier_mxnet_custom_ini()\n    model.initialize(init=custom_init)\n    return model\n\n\n@pytest.fixture\ndef get_image_classifier_mx_instance(get_image_classifier_mx_model, mnist_shape):\n    import mxnet  # lgtm [py/import-and-import-from]\n    from art.estimators.classification import MXClassifier\n\n    model = get_image_classifier_mx_model\n\n    def _get_image_classifier_mx_instance(from_logits=True):\n        if from_logits is False:\n            # due to the fact that only 1 instance of get_image_classifier_mx_model can be created in one session\n            # this will be resolved once Mxnet allows for 2 models with identical weights to be created in 1 session\n            raise ARTTestFixtureNotImplemented(\n                \"Currently only supporting Mxnet classifier with from_logit set to True\",\n                get_image_classifier_mx_instance.__name__,\n                framework,\n            )\n\n        loss = mxnet.gluon.loss.SoftmaxCrossEntropyLoss(from_logits=from_logits)\n        trainer = mxnet.gluon.Trainer(model.collect_params(), \"sgd\", {\"learning_rate\": 0.1})\n\n        # Get classifier\n        mxc = MXClassifier(\n            model=model,\n            loss=loss,\n            input_shape=mnist_shape,\n            # input_shape=(28, 28, 1),\n            nb_classes=10,\n            optimizer=trainer,\n            ctx=None,\n            channels_first=True,\n            clip_values=(0, 1),\n            preprocessing_defences=None,\n            postprocessing_defences=None,\n            preprocessing=(0.0, 1.0),\n        )\n\n        return mxc\n\n    return _get_image_classifier_mx_instance\n\n\n@pytest.fixture\ndef supported_losses_types(framework):\n    def supported_losses_types():\n        if framework == \"keras\":\n            return [\"label\", \"function_losses\", \"function_backend\"]\n        if framework == \"kerastf\":\n            # if loss_type is not \"label\" and loss_name not in [\"categorical_hinge\", \"kullback_leibler_divergence\"]:\n            return [\"label\", \"function\", \"class\"]\n\n        raise ARTTestFixtureNotImplemented(\n            \"Could not find supported_losses_types\", supported_losses_types.__name__, framework\n        )\n\n    return supported_losses_types\n\n\n@pytest.fixture\ndef supported_losses_logit(framework):\n    def _supported_losses_logit():\n        if framework == \"keras\":\n            return [\"categorical_crossentropy_function_backend\", \"sparse_categorical_crossentropy_function_backend\"]\n        if framework == \"kerastf\":\n            # if loss_type is not \"label\" and loss_name not in [\"categorical_hinge\", \"kullback_leibler_divergence\"]:\n            return [\n                \"categorical_crossentropy_function\",\n                \"categorical_crossentropy_class\",\n                \"sparse_categorical_crossentropy_function\",\n                \"sparse_categorical_crossentropy_class\",\n            ]\n        raise ARTTestFixtureNotImplemented(\n            \"Could not find supported_losses_logit\", supported_losses_logit.__name__, framework\n        )\n\n    return _supported_losses_logit\n\n\n@pytest.fixture\ndef supported_losses_proba(framework):\n    def _supported_losses_proba():\n        if framework == \"keras\":\n            return [\n                \"categorical_hinge_function_losses\",\n                \"categorical_crossentropy_label\",\n                \"categorical_crossentropy_function_losses\",\n                \"categorical_crossentropy_function_backend\",\n                \"sparse_categorical_crossentropy_label\",\n                \"sparse_categorical_crossentropy_function_losses\",\n                \"sparse_categorical_crossentropy_function_backend\",\n            ]\n        if framework == \"kerastf\":\n            return [\n                \"categorical_hinge_function\",\n                \"categorical_hinge_class\",\n                \"categorical_crossentropy_label\",\n                \"categorical_crossentropy_function\",\n                \"categorical_crossentropy_class\",\n                \"sparse_categorical_crossentropy_label\",\n                \"sparse_categorical_crossentropy_function\",\n                \"sparse_categorical_crossentropy_class\",\n                # \"kullback_leibler_divergence_function\",\n                \"kullback_leibler_divergence_class\",\n            ]\n\n        raise ARTTestFixtureNotImplemented(\n            \"Could not find supported_losses_proba\", supported_losses_proba.__name__, framework\n        )\n\n    return _supported_losses_proba\n\n\n@pytest.fixture\ndef image_dl_generator(framework):\n    def _image_dl_generator(**kwargs):\n        if framework == \"tensorflow2\":\n            return get_image_generator_tf_v2(64, 100)\n        raise ARTTestFixtureNotImplemented(\"no test generator available\", image_dl_generator.__name__, framework)\n\n    return _image_dl_generator\n\n\n@pytest.fixture\ndef image_dl_gan(framework):\n    sess = None\n\n    def _image_dl_gan(**kwargs):\n        if framework == \"tensorflow2\":\n            return get_image_gan_tf_v2(**kwargs), sess\n        raise ARTTestFixtureNotImplemented(\"no test gan available\", image_dl_gan.__name__, framework)\n\n    return _image_dl_gan\n\n\n@pytest.fixture\ndef image_dl_estimator(framework, get_image_classifier_mx_instance):\n    def _image_dl_estimator(functional=False, **kwargs):\n        sess = None\n        wildcard = False\n        classifier = None\n\n        if kwargs.get(\"wildcard\") is not None:\n            if kwargs.get(\"wildcard\") is True:\n                wildcard = True\n            del kwargs[\"wildcard\"]\n\n        if framework == \"keras\":\n            if wildcard is False and functional is False:\n                if functional:\n                    classifier = get_image_classifier_kr_functional(**kwargs)\n                else:\n                    try:\n                        classifier = get_image_classifier_kr(**kwargs)\n                    except NotImplementedError:\n                        raise ARTTestFixtureNotImplemented(\n                            \"This combination of loss function options is currently not supported.\",\n                            image_dl_estimator.__name__,\n                            framework,\n                        )\n        if framework in [\"tensorflow1\", \"tensorflow2\", \"tensorflow2v1\"]:\n            if wildcard is False and functional is False:\n                classifier, sess = get_image_classifier_tf(**kwargs, framework=framework)\n                return classifier, sess\n        if framework == \"pytorch\":\n            if not wildcard:\n                if functional:\n                    classifier = get_image_classifier_pt_functional(**kwargs)\n                else:\n                    classifier = get_image_classifier_pt(**kwargs)\n        if framework == \"kerastf\":\n            if wildcard:\n                classifier = get_image_classifier_kr_tf_with_wildcard(**kwargs)\n            else:\n                if functional:\n                    classifier = get_image_classifier_kr_tf_functional(**kwargs)\n                else:\n                    classifier = get_image_classifier_kr_tf(**kwargs)\n\n        if framework == \"mxnet\":\n            if wildcard is False and functional is False:\n                classifier = get_image_classifier_mx_instance(**kwargs)\n\n        if framework == \"huggingface\":\n            if not wildcard:\n                classifier = get_image_classifier_hf(**kwargs)\n\n        if classifier is None:\n            raise ARTTestFixtureNotImplemented(\n                \"no test deep learning estimator available\", image_dl_estimator.__name__, framework\n            )\n\n        return classifier, sess\n\n    return _image_dl_estimator\n\n\n@pytest.fixture\ndef art_warning(request):\n    def _art_warning(exception):\n        if type(exception) is ARTTestFixtureNotImplemented:\n            if request.node.get_closest_marker(\"framework_agnostic\"):\n                if not request.node.get_closest_marker(\"parametrize\"):\n                    raise Exception(\n                        \"This test has marker framework_agnostic decorator which means it will only be ran \"\n                        \"once. However the ART test exception was thrown, hence it is never run fully. \"\n                    )\n            elif (\n                request.node.get_closest_marker(\"only_with_platform\")\n                and len(request.node.get_closest_marker(\"only_with_platform\").args) == 1\n            ):\n                raise Exception(\n                    \"This test has marker only_with_platform decorator which means it will only be ran \"\n                    \"once. However the ARTTestFixtureNotImplemented exception was thrown, hence it is \"\n                    \"never run fully. \"\n                )\n\n            # NotImplementedErrors are raised in ART whenever a test model does not exist for a specific\n            # model/framework combination. By catching there here, we can provide a report at the end of each\n            # pytest run list all models requiring to be implemented.\n            warnings.warn(UserWarning(exception))\n        else:\n            raise exception\n\n    return _art_warning\n\n\n@pytest.fixture\ndef decision_tree_estimator(framework):\n    def _decision_tree_estimator(clipped=True):\n        if framework == \"scikitlearn\":\n            return get_tabular_classifier_scikit_list(clipped=clipped, model_list_names=[\"decisionTreeClassifier\"])[0]\n\n        raise ARTTestFixtureNotImplemented(\n            \"no test decision_tree_classifier available\", decision_tree_estimator.__name__, framework\n        )\n\n    return _decision_tree_estimator\n\n\n@pytest.fixture\ndef tabular_dl_estimator(framework):\n    def _tabular_dl_estimator(clipped=True):\n        classifier = None\n        if framework == \"keras\":\n            if clipped:\n                classifier = get_tabular_classifier_kr()\n            else:\n                kr_classifier = get_tabular_classifier_kr()\n                classifier = KerasClassifier(model=kr_classifier.model, use_logits=False, channels_first=True)\n\n        if framework == \"tensorflow1\" or framework == \"tensorflow2\":\n            if clipped:\n                classifier, _ = get_tabular_classifier_tf()\n\n        if framework == \"pytorch\":\n            if clipped:\n                classifier = get_tabular_classifier_pt()\n\n        if classifier is None:\n            raise ARTTestFixtureNotImplemented(\n                \"no deep learning tabular estimator available\", tabular_dl_estimator.__name__, framework\n            )\n        return classifier\n\n    return _tabular_dl_estimator\n\n\n@pytest.fixture(scope=\"function\")\ndef create_test_image(create_test_dir):\n    test_dir = create_test_dir\n    # Download one ImageNet pic for tests\n    url = \"http://farm1.static.flickr.com/163/381342603_81db58bea4.jpg\"\n    result = requests.get(url, stream=True)\n    if result.status_code == 200:\n        image = result.raw.read()\n        f = open(os.path.join(test_dir, \"test.jpg\"), \"wb\")\n        f.write(image)\n        f.close()\n\n    yield os.path.join(test_dir, \"test.jpg\")\n\n\n@pytest.fixture(scope=\"session\")\ndef framework(request):\n    ml_framework = request.config.getoption(\"--framework\")\n    if ml_framework == \"tensorflow\":\n        import tensorflow as tf\n\n        if tf.__version__[0] == \"2\":\n            ml_framework = \"tensorflow2\"\n        else:\n            ml_framework = \"tensorflow1\"\n\n    if ml_framework not in art_supported_frameworks:\n        raise Exception(\n            \"framework value {0} is unsupported. Please use one of these valid values: {1}\".format(\n                ml_framework, \" \".join(art_supported_frameworks)\n            )\n        )\n    # if utils_test.is_valid_framework(framework):\n    #     raise Exception(\"The framework specified was incorrect. Valid options available\n    #     are {0}\".format(art_supported_frameworks))\n    return ml_framework\n\n\n@pytest.fixture(scope=\"session\")\ndef default_batch_size():\n    yield 16\n\n\n@pytest.fixture(scope=\"session\")\ndef load_iris_dataset():\n    logging.info(\"Loading Iris dataset\")\n    (x_train_iris, y_train_iris), (x_test_iris, y_test_iris), _, _ = load_dataset(\"iris\")\n\n    yield (x_train_iris, y_train_iris), (x_test_iris, y_test_iris)\n\n\n@pytest.fixture(scope=\"function\")\ndef get_iris_dataset(load_iris_dataset, framework):\n    (x_train_iris, y_train_iris), (x_test_iris, y_test_iris) = load_iris_dataset\n\n    x_train_iris_original = x_train_iris.copy()\n    y_train_iris_original = y_train_iris.copy()\n    x_test_iris_original = x_test_iris.copy()\n    y_test_iris_original = y_test_iris.copy()\n\n    yield (x_train_iris, y_train_iris), (x_test_iris, y_test_iris)\n\n    np.testing.assert_array_almost_equal(x_train_iris_original, x_train_iris, decimal=3)\n    np.testing.assert_array_almost_equal(y_train_iris_original, y_train_iris, decimal=3)\n    np.testing.assert_array_almost_equal(x_test_iris_original, x_test_iris, decimal=3)\n    np.testing.assert_array_almost_equal(y_test_iris_original, y_test_iris, decimal=3)\n\n\n@pytest.fixture(scope=\"session\")\ndef load_diabetes_dataset():\n    logging.info(\"Loading Diabetes dataset\")\n    (x_train_diabetes, y_train_diabetes), (x_test_diabetes, y_test_diabetes), _, _ = load_dataset(\"diabetes\")\n\n    yield (x_train_diabetes, y_train_diabetes), (x_test_diabetes, y_test_diabetes)\n\n\n@pytest.fixture(scope=\"function\")\ndef get_diabetes_dataset(load_diabetes_dataset, framework):\n    (x_train_diabetes, y_train_diabetes), (x_test_diabetes, y_test_diabetes) = load_diabetes_dataset\n\n    x_train_diabetes_original = x_train_diabetes.copy()\n    y_train_diabetes_original = y_train_diabetes.copy()\n    x_test_diabetes_original = x_test_diabetes.copy()\n    y_test_diabetes_original = y_test_diabetes.copy()\n\n    yield (x_train_diabetes, y_train_diabetes), (x_test_diabetes, y_test_diabetes)\n\n    np.testing.assert_array_almost_equal(x_train_diabetes_original, x_train_diabetes, decimal=3)\n    np.testing.assert_array_almost_equal(y_train_diabetes_original, y_train_diabetes, decimal=3)\n    np.testing.assert_array_almost_equal(x_test_diabetes_original, x_test_diabetes, decimal=3)\n    np.testing.assert_array_almost_equal(y_test_diabetes_original, y_test_diabetes, decimal=3)\n\n\n@pytest.fixture(scope=\"session\")\ndef default_dataset_subset_sizes():\n    n_train = 1000\n    n_test = 100\n    yield n_train, n_test\n\n\n@pytest.fixture()\ndef mnist_shape(framework):\n    if framework in [\"pytorch\", \"mxnet\", \"huggingface\"]:\n        return (1, 28, 28)\n    else:\n        return (28, 28, 1)\n\n\n@pytest.fixture()\ndef cifar10_shape(framework):\n    if framework == \"pytorch\" or framework == \"mxnet\":\n        return (3, 32, 32)\n    else:\n        return (32, 32, 3)\n\n\n@pytest.fixture()\ndef get_default_mnist_subset(get_mnist_dataset, default_dataset_subset_sizes, mnist_shape):\n    (x_train_mnist, y_train_mnist), (x_test_mnist, y_test_mnist) = get_mnist_dataset\n    n_train, n_test = default_dataset_subset_sizes\n\n    x_train_mnist = np.reshape(x_train_mnist, (x_train_mnist.shape[0],) + mnist_shape).astype(np.float32)\n    x_test_mnist = np.reshape(x_test_mnist, (x_test_mnist.shape[0],) + mnist_shape).astype(np.float32)\n\n    yield (x_train_mnist[:n_train], y_train_mnist[:n_train]), (x_test_mnist[:n_test], y_test_mnist[:n_test])\n\n\n@pytest.fixture()\ndef get_default_cifar10_subset(get_cifar10_dataset, default_dataset_subset_sizes, cifar10_shape):\n    (x_train_cifar10, y_train_cifar10), (x_test_cifar10, y_test_cifar10) = get_cifar10_dataset\n    n_train, n_test = default_dataset_subset_sizes\n\n    x_train_cifar10 = np.reshape(x_train_cifar10, (x_train_cifar10.shape[0],) + cifar10_shape).astype(np.float32)\n    x_test_cifar10 = np.reshape(x_test_cifar10, (x_test_cifar10.shape[0],) + cifar10_shape).astype(np.float32)\n\n    yield (x_train_cifar10[:n_train], y_train_cifar10[:n_train]), (x_test_cifar10[:n_test], y_test_cifar10[:n_test])\n\n\n@pytest.fixture(scope=\"session\")\ndef load_mnist_dataset():\n    logging.info(\"Loading mnist\")\n    (x_train_mnist, y_train_mnist), (x_test_mnist, y_test_mnist), _, _ = load_dataset(\"mnist\")\n    yield (x_train_mnist, y_train_mnist), (x_test_mnist, y_test_mnist)\n\n\n@pytest.fixture(scope=\"session\")\ndef load_cifar10_dataset():\n    logging.info(\"Loading cifar10\")\n    (x_train_cifar10, y_train_cifar10), (x_test_cifar10, y_test_cifar10), _, _ = load_dataset(\"cifar10\")\n    yield (x_train_cifar10, y_train_cifar10), (x_test_cifar10, y_test_cifar10)\n\n\n@pytest.fixture(scope=\"function\")\ndef create_test_dir():\n    test_dir = tempfile.mkdtemp()\n    yield test_dir\n    shutil.rmtree(test_dir)\n\n\n@pytest.fixture(scope=\"function\")\ndef get_mnist_dataset(load_mnist_dataset, mnist_shape):\n    (x_train_mnist, y_train_mnist), (x_test_mnist, y_test_mnist) = load_mnist_dataset\n\n    x_train_mnist = np.reshape(x_train_mnist, (x_train_mnist.shape[0],) + mnist_shape).astype(np.float32)\n    x_test_mnist = np.reshape(x_test_mnist, (x_test_mnist.shape[0],) + mnist_shape).astype(np.float32)\n\n    x_train_mnist_original = x_train_mnist.copy()\n    y_train_mnist_original = y_train_mnist.copy()\n    x_test_mnist_original = x_test_mnist.copy()\n    y_test_mnist_original = y_test_mnist.copy()\n\n    yield (x_train_mnist, y_train_mnist), (x_test_mnist, y_test_mnist)\n\n    # Check that the test data has not been modified, only catches changes in attack.generate if self has been used\n    np.testing.assert_array_almost_equal(x_train_mnist_original, x_train_mnist, decimal=3)\n    np.testing.assert_array_almost_equal(y_train_mnist_original, y_train_mnist, decimal=3)\n    np.testing.assert_array_almost_equal(x_test_mnist_original, x_test_mnist, decimal=3)\n    np.testing.assert_array_almost_equal(y_test_mnist_original, y_test_mnist, decimal=3)\n\n\n@pytest.fixture(scope=\"function\")\ndef get_cifar10_dataset(load_cifar10_dataset, cifar10_shape):\n    (x_train_cifar10, y_train_cifar10), (x_test_cifar10, y_test_cifar10) = load_cifar10_dataset\n\n    x_train_cifar10 = np.reshape(x_train_cifar10, (x_train_cifar10.shape[0],) + cifar10_shape).astype(np.float32)\n    x_test_cifar10 = np.reshape(x_test_cifar10, (x_test_cifar10.shape[0],) + cifar10_shape).astype(np.float32)\n\n    x_train_cifar10_original = x_train_cifar10.copy()\n    y_train_cifar10_original = y_train_cifar10.copy()\n    x_test_cifar10_original = x_test_cifar10.copy()\n    y_test_cifar10_original = y_test_cifar10.copy()\n\n    yield (x_train_cifar10, y_train_cifar10), (x_test_cifar10, y_test_cifar10)\n\n    # Check that the test data has not been modified, only catches changes in attack.generate if self has been used\n    np.testing.assert_array_almost_equal(x_train_cifar10_original, x_train_cifar10, decimal=3)\n    np.testing.assert_array_almost_equal(y_train_cifar10_original, y_train_cifar10, decimal=3)\n    np.testing.assert_array_almost_equal(x_test_cifar10_original, x_test_cifar10, decimal=3)\n    np.testing.assert_array_almost_equal(y_test_cifar10_original, y_test_cifar10, decimal=3)\n\n\n# ART test fixture to skip test for specific framework values\n# eg: @pytest.mark.only_with_platform(\"tensorflow\")\n@pytest.fixture(autouse=True)\ndef only_with_platform(request, framework):\n    if request.node.get_closest_marker(\"only_with_platform\"):\n        if framework not in request.node.get_closest_marker(\"only_with_platform\").args:\n            pytest.skip(\"skipped on this platform: {}\".format(framework))\n\n\n# ART test fixture to skip test for specific framework values\n# eg: @pytest.mark.skip_framework(\"tensorflow\", \"keras\", \"pytorch\", \"scikitlearn\",\n# \"mxnet\", \"kerastf\", \"non_dl_frameworks\", \"dl_frameworks\")\n@pytest.fixture(autouse=True)\ndef skip_by_framework(request, framework):\n    if request.node.get_closest_marker(\"skip_framework\"):\n        framework_to_skip_list = list(request.node.get_closest_marker(\"skip_framework\").args)\n        if \"dl_frameworks\" in framework_to_skip_list:\n            framework_to_skip_list.extend(deep_learning_frameworks)\n\n        if \"non_dl_frameworks\" in framework_to_skip_list:\n            framework_to_skip_list.extend(non_deep_learning_frameworks)\n\n        if \"tensorflow\" in framework_to_skip_list:\n            framework_to_skip_list.append(\"tensorflow1\")\n            framework_to_skip_list.append(\"tensorflow2\")\n            framework_to_skip_list.append(\"tensorflow2v1\")\n\n        if framework in framework_to_skip_list:\n            pytest.skip(\"skipped on this platform: {}\".format(framework))\n\n\n@pytest.fixture\ndef make_customer_record():\n    def _make_customer_record(name):\n        return {\"name\": name, \"orders\": []}\n\n    return _make_customer_record\n\n\n@pytest.fixture(autouse=True)\ndef framework_agnostic(request, framework):\n    if request.node.get_closest_marker(\"framework_agnostic\"):\n        if framework != get_default_framework():\n            pytest.skip(\"framework agnostic test skipped for framework : {}\".format(framework))\n\n\n# ART test fixture to skip test for specific required modules\n# eg: @pytest.mark.skip_module(\"deepspeech_pytorch\", \"apex.amp\", \"object_detection\")\n@pytest.fixture(autouse=True)\ndef skip_by_module(request):\n    if request.node.get_closest_marker(\"skip_module\"):\n        modules_from_args = request.node.get_closest_marker(\"skip_module\").args\n\n        # separate possible parent modules and test them first\n        modules_parents = [m.split(\".\", 1)[0] for m in modules_from_args]\n\n        # merge with modules including submodules (Note: sort ensures that parent comes first)\n        modules_full = sorted(set(modules_parents).union(modules_from_args))\n\n        for module in modules_full:\n            if module in modules_full:\n                module_spec = importlib.util.find_spec(module)\n                module_found = module_spec is not None\n\n                if not module_found:\n                    pytest.skip(f\"Test skipped because package {module} not available.\")\n\n\n@pytest.fixture()\ndef fix_get_rcnn():\n\n    from art.estimators.estimator import BaseEstimator, LossGradientsMixin\n    from art.estimators.object_detection.object_detector import ObjectDetectorMixin\n\n    class DummyObjectDetector(ObjectDetectorMixin, LossGradientsMixin, BaseEstimator):\n        def __init__(self):\n            self._clip_values = (0, 1)\n            self.channels_first = False\n            self._input_shape = None\n            self._compute_loss_count = 1\n\n        def loss_gradient(self, x: np.ndarray, y: None, **kwargs):\n            return np.ones_like(x)\n\n        def fit(self, x: np.ndarray, y, batch_size: int = 128, nb_epochs: int = 20, **kwargs):\n            raise NotImplementedError\n\n        def predict(self, x: np.ndarray, batch_size: int = 128, **kwargs):\n            dict_i = {\"boxes\": np.array([[0.1, 0.2, 0.3, 0.4]]), \"labels\": np.array([[2]]), \"scores\": np.array([[0.8]])}\n            return [dict_i] * x.shape[0]\n\n        @property\n        def native_label_is_pytorch_format(self):\n            return True\n\n        @property\n        def input_shape(self):\n            return self._input_shape\n\n        def compute_losses(\n            self, x: np.ndarray, y: Union[List[Dict[str, np.ndarray]], List[Dict[str, \"torch.Tensor\"]]]\n        ) -> Dict[str, np.ndarray]:\n\n            losses_dict = {\n                \"loss_classifier\": np.array(0.43572357, dtype=float),\n                \"loss_box_reg\": np.array(0.17341757, dtype=float),\n                \"loss_objectness\": np.array(0.02198849, dtype=float),\n                \"loss_rpn_box_reg\": np.array(0.03471708, dtype=float),\n            }\n\n            return losses_dict\n\n        def compute_loss(\n            self, x: np.ndarray, y: Union[List[Dict[str, np.ndarray]], List[Dict[str, \"torch.Tensor\"]]], **kwargs\n        ) -> Union[np.ndarray, \"torch.Tensor\"]:\n            self._compute_loss_count += 1\n            loss = 0.43572357 / self._compute_loss_count\n            return loss\n\n    frcnn = DummyObjectDetector()\n    return frcnn\n\n\n@pytest.fixture()\ndef fix_get_goturn():\n\n    from art.estimators.estimator import BaseEstimator, LossGradientsMixin\n    from art.estimators.object_tracking.object_tracker import ObjectTrackerMixin\n\n    class DummyObjectTracker(ObjectTrackerMixin, LossGradientsMixin, BaseEstimator):\n        def __init__(self):\n            super().__init__(\n                model=None,\n                clip_values=(0, 1),\n                preprocessing_defences=None,\n                postprocessing_defences=None,\n                preprocessing=(0, 1),\n            )\n\n            import torch\n\n            self.channels_first = False\n            self._input_shape = None\n            self.postprocessing_defences = None\n            self.device = torch.device(\"cpu\")\n\n        def loss_gradient(self, x: np.ndarray, y: None, **kwargs):\n            return np.ones_like(x)\n\n        def fit(self, x: np.ndarray, y, batch_size: int = 128, nb_epochs: int = 20, **kwargs):\n            raise NotImplementedError\n\n        def predict(self, x: np.ndarray, batch_size: int = 128, **kwargs):\n            boxes_list = list()\n            for i in range(x.shape[1]):\n                boxes_list.append([0.1, 0.2, 0.3, 0.4])\n\n            dict_i = {\"boxes\": np.array(boxes_list), \"labels\": np.array([[2]]), \"scores\": np.array([[0.8]])}\n            return [dict_i] * x.shape[0]\n\n        @property\n        def native_label_is_pytorch_format(self):\n            return True\n\n        @property\n        def input_shape(self):\n            return self._input_shape\n\n    goturn = DummyObjectTracker()\n    return goturn\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.150390625,
          "content": "[tool.black]\nline-length=120\n[tool.ruff]\nexclude = [\".venv\", \"contrib\"]\nlint.ignore = [\"F401\"]\n[tool.ruff.lint.per-file-ignores]\n \"examples/*\" = [\"E402\"]\n"
        },
        {
          "name": "readthedocs.yml",
          "type": "blob",
          "size": 0.1923828125,
          "content": "version: 2\n\nbuild:\n  os: ubuntu-20.04\n  tools:\n    python: \"3.9\"\n\npython:\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - docs\n\nsphinx:\n  configuration: docs/conf.py\n"
        },
        {
          "name": "requirements_test.txt",
          "type": "blob",
          "size": 1.3134765625,
          "content": "# base\n\nnumpy>=1.18.5,<1.27\nscipy==1.10.1\nmatplotlib==3.7.1\nscikit-learn==1.4.1.post1\nsix==1.16.0\nPillow==10.3.0\ntqdm==4.67.1\nstatsmodels==0.14.2\npydub==0.25.1\nresampy==0.4.3\nffmpeg-python==0.2.0\ncma==3.3.0\npandas==2.2.2\nlibrosa==0.10.1\nnumba~=0.56.4\nopencv-python\nsortedcontainers==2.4.0\nh5py==3.10.0\nmultiprocess>=0.70.12\n\n# frameworks\n\ntensorflow==2.14.0\nkeras==2.14.0\ntensorflow-addons>=0.13.0\n\n# using mxnet-native for reproducible test results on CI machines without Intel Architecture Processors, but mxnet is fully supported by ART\nmxnet-native==1.8.0.post0\n\n# PyTorch\n--find-links https://download.pytorch.org/whl/cpu/torch_stable.html\ntorch==2.5.0\ntorchaudio==2.5.0\ntorchvision==0.20.0\n\n# PyTorch image transformers\ntimm==0.9.2\n\ncatboost==1.2.3\nGPy==1.13.1\nlightgbm==4.3.0\nxgboost==2.1.1\n\nkornia~=0.7.1\ntensorboardX==2.6.2.2\nlief==0.15.1\njax[cpu]==0.4.26\n\n# lingvo==0.13.1\n\n# tests and style checking\npytest~=8.3.2\npytest-mock~=3.14.0\npytest-cov~=5.0.0\npylint==3.2.6\nmypy==1.11.1\npycodestyle==2.12.1\nblack==24.8.0\nruff==0.5.5\ntypes-six==1.16.21.9\ntypes-PyYAML==6.0.12.20240917\ntypes-setuptools==71.1.0.20240726\n\n# other\nrequests~=2.32.3\nultralytics==8.0.217\nipython==8.25.0\n\n# ART\n-e .\n\n# NOTE to contributors: When changing/adding packages, please make sure that the packages are consistent with those\n# present within the Dockerfile\n"
        },
        {
          "name": "run_tests.sh",
          "type": "blob",
          "size": 11.4921875,
          "content": "#!/usr/bin/env bash\n\nexit_code=0\n\n# Set TensorFlow logging to minimum level ERROR\nexport TF_CPP_MIN_LOG_LEVEL=\"3\"\n\n# --------------------------------------------------------------------------------------------------------------- TESTS\n\n# NOTE: All the tests should be ran within this loop. All other tests are legacy tests that must be made framework\n# independent to be incorporated within this loop\nframeworkList=(\"tensorflow\" \"keras\" \"pytorch\" \"scikitlearn\" \"mxnet\" \"kerastf\")\nframework=$1\nlegacy_module=$2\n\nif [[ ${framework} != \"legacy\" ]]\nthen\n    echo \"#######################################################################\"\n    echo \"############### Running tests with framework $framework ###############\"\n    echo \"#######################################################################\"\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv tests/defences/detector/evasion --framework=$framework --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed defences/detector/evasion tests\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv tests/defences/detector/poison/test_spectral_signature_defense.py --framework=$framework --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed defences/detector/poison/test_spectral_signature_defense.py tests\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv tests/defences/preprocessor --framework=$framework --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed defences/preprocessor tests\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv tests/defences/trainer --framework=$framework --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed defences/trainer tests\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv tests/defences/transformer --framework=$framework --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed defences/transformer tests\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv tests/preprocessing/audio --framework=$framework --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed preprocessing/audio tests\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv tests/preprocessing/image --framework=$framework --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed preprocessing/image tests\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv tests/preprocessing/expectation_over_transformation --framework=$framework --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed preprocessing/expectation_over_transformation tests\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv tests/utils --framework=$framework --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed utils tests\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv -s tests/attacks/poison/ --framework=$framework  --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed attacks/poison tests\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv -s tests/attacks/evasion/ --framework=$framework  --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed attacks/evasion\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv tests/estimators/speech_recognition/ --framework=$framework  --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed estimators/speech_recognition tests\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv tests/attacks/inference/ --framework=$framework --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed attacks/inference\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append -q -vv tests/classifiersFrameworks/  --framework=$framework --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed classifiersFrameworks tests\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv tests/estimators/classification/test_deeplearning_common.py --framework=$framework --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed estimators/classification/test_deeplearning_common.py $framework\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv tests/estimators/classification/test_deeplearning_specific.py --framework=$framework --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed estimators/classification tests for framework $framework\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv tests/estimators/certification/ --framework=$framework --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed estimators/certification tests for framework $framework\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv tests/estimators/classification/test_blackbox_existing_predictions.py --framework=$framework --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed estimators/classification/test_blackbox_existing_predictions.py $framework\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv tests/estimators/regression/test_blackbox.py --framework=$framework --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed estimators/regression/test_blackbox.py $framework\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv tests/metrics/privacy --framework=$framework --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed metrics/privacy tests\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv tests/evaluations --framework=$framework --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed evaluations tests\"; fi\n\n    pytest --cov-report=xml --cov=art --cov-append  -q -vv tests/test_summary_writer.py --framework=$framework --durations=0\n    if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed summary writer tests\"; fi\n\nelse\n    declare -a attacks_1=(\"tests/attacks/test_adversarial_patch.py\" \\\n                          \"tests/attacks/test_adversarial_embedding.py\" \\\n                          \"tests/attacks/test_backdoor_attack.py\" \\\n                          \"tests/attacks/test_carlini.py\" \\\n                          \"tests/attacks/test_copycat_cnn.py\" \\\n                          \"tests/attacks/test_decision_tree_attack.py\" \\\n                          \"tests/attacks/test_deepfool.py\" \\\n                          \"tests/attacks/test_elastic_net.py\" \\\n                          \"tests/attacks/test_feature_collision.py\" \\\n                          \"tests/attacks/test_functionally_equivalent_extraction.py\" \\\n                          \"tests/attacks/test_graphite.py\" \\\n                          \"tests/attacks/test_hclu.py\" \\\n                          \"tests/attacks/test_input_filter.py\" \\\n                          \"tests/attacks/test_hop_skip_jump.py\" \\\n                          \"tests/attacks/test_iterative_method.py\" \\\n                          \"tests/attacks/test_knockoff_nets.py\" )\n\n    declare -a attacks_2=(\"tests/attacks/test_newtonfool.py\" \\\n                          \"tests/attacks/test_poisoning_attack_svm.py\" \\\n                          \"tests/attacks/test_projected_gradient_descent.py\" \\\n                          \"tests/attacks/test_saliency_map.py\" \\\n                          \"tests/attacks/test_spatial_transformation.py\" \\\n                          \"tests/attacks/test_universal_perturbation.py\" \\\n                          \"tests/attacks/test_virtual_adversarial.py\" \\\n                          \"tests/attacks/test_zoo.py\" \\\n                          \"tests/attacks/test_pixel_attack.py\" \\\n                          \"tests/attacks/test_threshold_attack.py\" \\\n                          \"tests/attacks/test_wasserstein.py\" \\\n                          \"tests/attacks/test_shapeshifter.py\" \\\n                          \"tests/attacks/test_targeted_universal_perturbation.py\" \\\n                          \"tests/attacks/test_simba.py\" )\n\n    declare -a estimators=(\"tests/estimators/classification/test_blackbox.py\" \\\n                           \"tests/estimators/classification/test_catboost.py\" \\\n                           \"tests/estimators/classification/test_classifier.py\" \\\n                           \"tests/estimators/classification/test_deep_partition_ensemble.py\" \\\n                           \"tests/estimators/classification/test_detector_classifier.py\" \\\n                           \"tests/estimators/classification/test_ensemble.py\" \\\n                           \"tests/estimators/classification/test_GPy.py\" \\\n                           \"tests/estimators/classification/test_input_filter.py\" \\\n                           \"tests/estimators/classification/test_lightgbm.py\" \\\n                           \"tests/estimators/classification/test_query_efficient_bb.py\" \\\n                           \"tests/estimators/classification/test_scikitlearn.py\" \\\n                           \"tests/estimators/classification/test_xgboost.py\" \\\n                           \"tests/estimators/regression/test_scikitlearn.py\" )\n\n    declare -a defences=(\"tests/defences/test_adversarial_trainer.py\" \\\n                         \"tests/defences/test_class_labels.py\" \\\n                         \"tests/defences/test_defensive_distillation.py\" \\\n                         \"tests/defences/test_feature_squeezing.py\" \\\n                         \"tests/defences/test_gaussian_augmentation.py\" \\\n                         \"tests/defences/test_gaussian_noise.py\" \\\n                         \"tests/defences/test_high_confidence.py\" \\\n                         \"tests/defences/test_label_smoothing.py\" \\\n                         \"tests/defences/test_neural_cleanse.py\" \\\n                         \"tests/defences/test_pixel_defend.py\" \\\n                         \"tests/defences/test_reverse_sigmoid.py\" \\\n                         \"tests/defences/test_rounded.py\" \\\n                         \"tests/defences/test_thermometer_encoding.py\" \\\n                         \"tests/defences/test_variance_minimization.py\" \\\n                         \"tests/defences/detector/evasion/test_beyond_detector.py\" \\\n                         \"tests/defences/detector/evasion/test_binary_activation_detector.py\" \\\n                         \"tests/defences/detector/evasion/test_binary_input_detector.py\" \\\n                         \"tests/defences/detector/evasion/test_subsetscanning_detector.py\" \\\n                         \"tests/defences/detector/poison/test_activation_defence.py\" \\\n                         \"tests/defences/detector/poison/test_clustering_analyzer.py\" \\\n                         \"tests/defences/detector/poison/test_ground_truth_evaluator.py\" \\\n                         \"tests/defences/detector/poison/test_provenance_defence.py\" \\\n                         \"tests/defences/detector/poison/test_roni.py\" )\n\n    declare -a metrics=(\"tests/metrics/test_gradient_check.py\" \\\n                        \"tests/metrics/test_metrics.py\" \\\n                        \"tests/metrics/test_verification_decision_trees.py\" )\n\n    declare -a art=(\"tests/test_data_generators.py\" \\\n                    \"tests/test_optimizers.py\" \\\n                    \"tests/test_utils.py\" \\\n                    \"tests/test_visualization.py\" )\n\n    # ----------------------------------------------------------------------------------------------- CODE TO RUN TESTS\n\n    run_test () {\n      test=$1\n      test_file_name=\"$(echo ${test} | rev | cut -d'/' -f1 | rev)\"\n\n      echo $'\\n\\n'\n      echo \"######################################################################\"\n      echo ${test}\n      echo \"######################################################################\"\n      pytest --cov-report=xml --cov=art --cov-append  -q -vv ${test} --durations=0\n      if [[ $? -ne 0 ]]; then exit_code=1; echo \"Failed $test\"; fi\n    }\n\n    tests=\"$legacy_module[@]\"\n    for test in \"${!tests}\"; do\n        run_test ${test}\n    done\nfi\n\nexit ${exit_code}\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.744140625,
          "content": "[metadata]\ndescription-file = README.md\n\n[tool:pytest]\nflake8-max-line-length = 120\nflake8-ignore =\n    *.py E402 W503 E203 E231 E251 E701\n    # imported but unused\n    */__init__.py F401\n    */preprocessing.py F401\nmarkers =\n    skip_framework: marks a test to be skipped for specific framework values. Valid values are (\"tensorflow\" \"keras\" \"mxnet\" \"pytorch\" \"scikitlearn\")\n    only_with_platform: DEPRECATED only used for legacy tests. Use skip_framework instead. marks a test to be performed only for a specific framework value\n    framework_agnostic: marks a test to be agnostic to frameworks and run only for one default framework\n    skip_module: Skip the test if a module is not available in the current environment\n\n[mypy]\nignore_missing_imports = True\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 4.005859375,
          "content": "import codecs\nimport os\n\nfrom setuptools import find_packages, setup\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\ninstall_requires = [\n    \"numpy>=1.18.0\",\n    \"scipy>=1.4.1\",\n    \"scikit-learn>=0.22.2\",\n    \"six\",\n    \"setuptools\",\n    \"tqdm\",\n]\n\ndocs_require = [\n    \"sphinx >= 1.4\",\n    \"sphinx_rtd_theme\",\n    \"sphinx-autodoc-annotation\",\n    \"sphinx-autodoc-typehints\",\n    \"matplotlib\",\n    \"numpy>=1.18.0\",\n    \"scipy>=1.4.1\",\n    \"six>=1.13.0\",\n    \"scikit-learn>=0.22.2\",\n    \"Pillow>=6.0.0\",\n]\n\n\ndef read(rel_path):\n    here = os.path.abspath(os.path.dirname(__file__))\n    with codecs.open(os.path.join(here, rel_path), \"r\", encoding=\"utf-8\") as fp:\n        return fp.read()\n\n\ndef get_version(rel_path):\n    for line in read(rel_path).splitlines():\n        if line.startswith(\"__version__\"):\n            delim = '\"' if '\"' in line else \"'\"\n            return line.split(delim)[1]\n    raise RuntimeError(\"Unable to find version string.\")\n\n\nsetup(\n    name=\"adversarial-robustness-toolbox\",\n    version=get_version(\"art/__init__.py\"),\n    description=\"Toolbox for adversarial machine learning.\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"Irina Nicolae\",\n    author_email=\"irinutza.n@gmail.com\",\n    maintainer=\"Beat Buesser\",\n    maintainer_email=\"beat.buesser@ie.ibm.com\",\n    url=\"https://github.com/Trusted-AI/adversarial-robustness-toolbox\",\n    license=\"MIT\",\n    install_requires=install_requires,\n    extras_require={\n        \"docs\": docs_require,\n        \"catboost\": [\"catboost\"],\n        \"gpy\": [\"GPy\"],\n        \"keras\": [\"keras\", \"h5py\"],\n        \"lightgbm\": [\"lightgbm\"],\n        \"mxnet\": [\"mxnet\"],\n        \"tensorflow\": [\"tensorflow\", \"tensorflow_addons\", \"h5py\"],\n        \"tensorflow_image\": [\"tensorflow\", \"tensorflow_addons\", \"h5py\", \"Pillow\", \"ffmpeg-python\", \"opencv-python\"],\n        \"tensorflow_audio\": [\"tensorflow\", \"tensorflow_addons\", \"h5py\", \"pydub\", \"resampy\", \"librosa\"],\n        \"pytorch\": [\"torch\", \"torchvision\"],\n        \"pytorch_image\": [\"torch\", \"torchvision\", \"kornia\", \"Pillow\", \"ffmpeg-python\", \"opencv-python\"],\n        \"pytorch_audio\": [\"torch\", \"torchvision\", \"torchaudio\", \"pydub\", \"resampy\", \"librosa\"],\n        \"xgboost\": [\"xgboost\"],\n        \"lingvo_asr\": [\"tensorflow-gpu==2.1.0\", \"lingvo==0.6.4\", \"pydub\", \"resampy\", \"librosa\"],\n        \"all\": [\n            \"mxnet\",\n            \"catboost\",\n            \"lightgbm\",\n            \"tensorflow\",\n            \"tensorflow-addons\",\n            \"h5py\",\n            \"torch\",\n            \"torchvision\",\n            \"xgboost\",\n            \"pandas\",\n            \"kornia\",\n            \"matplotlib\",\n            \"Pillow\",\n            \"statsmodels\",\n            \"pydub\",\n            \"resampy\",\n            \"ffmpeg-python\",\n            \"cma\",\n            \"librosa\",\n            \"opencv-python\",\n            \"numba\",\n        ],\n        \"non_framework\": [\n            \"matplotlib\",\n            \"Pillow\",\n            \"statsmodels\",\n            \"pydub\",\n            \"resampy\",\n            \"ffmpeg-python\",\n            \"cma\",\n            \"pandas\",\n            \"librosa\",\n            \"opencv-python\",\n            \"pytest\",\n            \"pytest-flake8\",\n            \"pytest-mock\",\n            \"pytest-cov\",\n            \"requests\",\n            \"sortedcontainers\",\n            \"numba\",\n            \"timm\",\n            \"multiprocess\",\n        ]\n    },\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Education\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n        \"Topic :: Security\",\n    ],\n    packages=find_packages(),\n    include_package_data=True,\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}