{
  "metadata": {
    "timestamp": 1736559821319,
    "page": 558,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "naturomics/CapsNet-Tensorflow",
      "stars": 3802,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0390625,
          "content": "*__pycache__\ndata*\n.ropeproject\nlogdir*\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.1923828125,
          "content": "This repo is under development, your contribution is welcome.\n\n- If you have any questions, feel free to open an issue.\n- If you want to contribute your code, fork it, and open your Pull Requests.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.8212890625,
          "content": "# CapsNet-Tensorflow\n\n[![Contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=plastic)](CONTRIBUTING.md)\n[![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg?style=plastic)](https://opensource.org/licenses/Apache-2.0)\n[![Gitter](https://img.shields.io/gitter/room/nwjs/nw.js.svg?style=plastic)](https://gitter.im/CapsNet-Tensorflow/Lobby)\n\nA Tensorflow implementation of CapsNet based on Geoffrey Hinton's paper [Dynamic Routing Between Capsules](https://arxiv.org/abs/1710.09829)\n\n![capsVSneuron](imgs/capsuleVSneuron.png)\n\n> **Notes:**\n> 1. The current version supports [MNIST](http://yann.lecun.com/exdb/mnist/) and [Fashion-MNIST](https://github.com/zalandoresearch/fashion-mnist) datasets. The current test accuracy for MNIST is `99.64%`, and Fashion-MNIST `90.60%`, see details in the [Results](https://github.com/naturomics/CapsNet-Tensorflow#results) section\n> 2. See [dist_version](dist_version) for multi-GPU support\n> 3. [Here(知乎)](https://zhihu.com/question/67287444/answer/251460831) is an article explaining my understanding of the paper. It may be helpful in understanding the code.\n\n\n> **Important:**\n>\n> If you need to apply CapsNet model to your own datasets or build up a new model with the basic block of CapsNet, please follow my new project [CapsLayer](https://github.com/naturomics/CapsLayer), which is an advanced library for capsule theory, aiming to integrate capsule-relevant technologies, provide relevant analysis tools, develop related application examples, and promote the development of capsule theory. For example, you can use capsule layer block in your code easily with the API ``capsLayer.layers.fully_connected`` and ``capsLayer.layers.conv2d``\n\n\n## Requirements\n- Python\n- NumPy\n- [Tensorflow](https://github.com/tensorflow/tensorflow)>=1.3\n- tqdm (for displaying training progress info)\n- scipy (for saving images)\n\n## Usage\n**Step 1.** Download this repository with ``git`` or click the [download ZIP](https://github.com/naturomics/CapsNet-Tensorflow/archive/master.zip) button.\n\n```\n$ git clone https://github.com/naturomics/CapsNet-Tensorflow.git\n$ cd CapsNet-Tensorflow\n```\n\n**Step 2.** Download [MNIST](http://yann.lecun.com/exdb/mnist/) or [Fashion-MNIST](https://github.com/zalandoresearch/fashion-mnist) dataset. In this step, you have two choices:\n\n- a) Automatic downloading with `download_data.py` script\n```\n$ python download_data.py   (for mnist dataset)\n$ python download_data.py --dataset fashion-mnist --save_to data/fashion-mnist (for fashion-mnist dataset)\n```\n\n- b) Manual downloading with `wget` or other tools, move and extract dataset into ``data/mnist`` or ``data/fashion-mnist`` directory, for example:\n\n```\n$ mkdir -p data/mnist\n$ wget -c -P data/mnist http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\n$ wget -c -P data/mnist http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\n$ wget -c -P data/mnist http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\n$ wget -c -P data/mnist http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\n$ gunzip data/mnist/*.gz\n```\n\n**Step 3.** Start the training(Using the MNIST dataset by default):\n\n```\n$ python main.py\n$ # or training for fashion-mnist dataset\n$ python main.py --dataset fashion-mnist\n$ # If you need to monitor the training process, open tensorboard with this command\n$ tensorboard --logdir=logdir\n$ # or use `tail` command on linux system\n$ tail -f results/val_acc.csv\n```\n\n**Step 4.** Calculate test accuracy\n\n```\n$ python main.py --is_training=False\n$ # for fashion-mnist dataset\n$ python main.py --dataset fashion-mnist --is_training=False\n```\n\n> **Note:** The default parameters of batch size is 128, and epoch 50. You may need to modify the ``config.py`` file or use command line parameters to suit your case, e.g. set batch size to 64 and do once test summary every 200 steps: ``python main.py  --test_sum_freq=200 --batch_size=48``\n\n## Results\nThe pictures here are plotted by tensorboard and my tool `plot_acc.R`\n\n- training loss\n\n![total_loss](results/total_loss.png)\n![margin_loss](results/margin_loss.png)\n![reconstruction_loss](results/reconstruction_loss.png)\n\nHere are the models I trained and my talk and something else:\n\n[Baidu Netdisk](https://pan.baidu.com/s/1pLp8fdL)(password:ahjs)\n\n- The best val error(using reconstruction)\n\nRouting iteration | 1 | 3 | 4 |\n:-----|:----:|:----:|:------|\nval error | 0.36 | 0.36 | 0.41 |\n*Paper* | 0.29 | 0.25 | - |\n\n![test_acc](results/routing_trials.png)\n\n\n> My simple comments for capsule\n> 1. A new version neural unit(vector in vector out, not scalar in scalar out)\n> 2. The routing algorithm is similar to attention mechanism\n> 3. Anyway, a great potential work, a lot to be built upon\n\n\n## My weChat:\n ![my_wechat](/imgs/my_wechat_QR.png)\n\n### Reference\n- [XifengGuo/CapsNet-Keras](https://github.com/XifengGuo/CapsNet-Keras): referred for some code optimizations\n"
        },
        {
          "name": "capsLayer.py",
          "type": "blob",
          "size": 7.6748046875,
          "content": "\"\"\"\nLicense: Apache-2.0\nAuthor: Huadong Liao\nE-mail: naturomics.liao@gmail.com\n\"\"\"\n\nimport numpy as np\nimport tensorflow as tf\n\nfrom config import cfg\nfrom utils import reduce_sum\nfrom utils import softmax\nfrom utils import get_shape\n\n\nepsilon = 1e-9\n\n\nclass CapsLayer(object):\n    ''' Capsule layer.\n    Args:\n        input: A 4-D tensor.\n        num_outputs: the number of capsule in this layer.\n        vec_len: integer, the length of the output vector of a capsule.\n        layer_type: string, one of 'FC' or \"CONV\", the type of this layer,\n            fully connected or convolution, for the future expansion capability\n        with_routing: boolean, this capsule is routing with the\n                      lower-level layer capsule.\n\n    Returns:\n        A 4-D tensor.\n    '''\n    def __init__(self, num_outputs, vec_len, with_routing=True, layer_type='FC'):\n        self.num_outputs = num_outputs\n        self.vec_len = vec_len\n        self.with_routing = with_routing\n        self.layer_type = layer_type\n\n    def __call__(self, input, kernel_size=None, stride=None):\n        '''\n        The parameters 'kernel_size' and 'stride' will be used while 'layer_type' equal 'CONV'\n        '''\n        if self.layer_type == 'CONV':\n            self.kernel_size = kernel_size\n            self.stride = stride\n\n            if not self.with_routing:\n                # the PrimaryCaps layer, a convolutional layer\n                # input: [batch_size, 20, 20, 256]\n                # assert input.get_shape() == [cfg.batch_size, 20, 20, 256]\n\n                # NOTE: I can't find out any words from the paper whether the\n                # PrimaryCap convolution does a ReLU activation or not before\n                # squashing function, but experiment show that using ReLU get a\n                # higher test accuracy. So, which one to use will be your choice\n                capsules = tf.contrib.layers.conv2d(input, self.num_outputs * self.vec_len,\n                                                    self.kernel_size, self.stride, padding=\"VALID\",\n                                                    activation_fn=tf.nn.relu)\n                # capsules = tf.contrib.layers.conv2d(input, self.num_outputs * self.vec_len,\n                #                                    self.kernel_size, self.stride,padding=\"VALID\",\n                #                                    activation_fn=None)\n                capsules = tf.reshape(capsules, (cfg.batch_size, -1, self.vec_len, 1))\n\n                # return tensor with shape [batch_size, 1152, 8, 1]\n                capsules = squash(capsules)\n                return(capsules)\n\n        if self.layer_type == 'FC':\n            if self.with_routing:\n                # the DigitCaps layer, a fully connected layer\n                # Reshape the input into [batch_size, 1152, 1, 8, 1]\n                self.input = tf.reshape(input, shape=(cfg.batch_size, -1, 1, input.shape[-2].value, 1))\n\n                with tf.variable_scope('routing'):\n                    # b_IJ: [batch_size, num_caps_l, num_caps_l_plus_1, 1, 1],\n                    # about the reason of using 'batch_size', see issue #21\n                    b_IJ = tf.constant(np.zeros([cfg.batch_size, input.shape[1].value, self.num_outputs, 1, 1], dtype=np.float32))\n                    capsules = routing(self.input, b_IJ, num_outputs=self.num_outputs, num_dims=self.vec_len)\n                    capsules = tf.squeeze(capsules, axis=1)\n\n            return(capsules)\n\n\ndef routing(input, b_IJ, num_outputs=10, num_dims=16):\n    ''' The routing algorithm.\n\n    Args:\n        input: A Tensor with [batch_size, num_caps_l=1152, 1, length(u_i)=8, 1]\n               shape, num_caps_l meaning the number of capsule in the layer l.\n        num_outputs: the number of output capsules.\n        num_dims: the number of dimensions for output capsule.\n    Returns:\n        A Tensor of shape [batch_size, num_caps_l_plus_1, length(v_j)=16, 1]\n        representing the vector output `v_j` in the layer l+1\n    Notes:\n        u_i represents the vector output of capsule i in the layer l, and\n        v_j the vector output of capsule j in the layer l+1.\n     '''\n\n    # W: [1, num_caps_i, num_caps_j * len_v_j, len_u_j, 1]\n    input_shape = get_shape(input)\n    W = tf.get_variable('Weight', shape=[1, input_shape[1], num_dims * num_outputs] + input_shape[-2:],\n                        dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=cfg.stddev))\n    biases = tf.get_variable('bias', shape=(1, 1, num_outputs, num_dims, 1))\n\n    # Eq.2, calc u_hat\n    # Since tf.matmul is a time-consuming op,\n    # A better solution is using element-wise multiply, reduce_sum and reshape\n    # ops instead. Matmul [a, b] x [b, c] is equal to a series ops as\n    # element-wise multiply [a*c, b] * [a*c, b], reduce_sum at axis=1 and\n    # reshape to [a, c]\n    input = tf.tile(input, [1, 1, num_dims * num_outputs, 1, 1])\n    # assert input.get_shape() == [cfg.batch_size, 1152, 160, 8, 1]\n\n    u_hat = reduce_sum(W * input, axis=3, keepdims=True)\n    u_hat = tf.reshape(u_hat, shape=[-1, input_shape[1], num_outputs, num_dims, 1])\n    # assert u_hat.get_shape() == [cfg.batch_size, 1152, 10, 16, 1]\n\n    # In forward, u_hat_stopped = u_hat; in backward, no gradient passed back from u_hat_stopped to u_hat\n    u_hat_stopped = tf.stop_gradient(u_hat, name='stop_gradient')\n\n    # line 3,for r iterations do\n    for r_iter in range(cfg.iter_routing):\n        with tf.variable_scope('iter_' + str(r_iter)):\n            # line 4:\n            # => [batch_size, 1152, 10, 1, 1]\n            c_IJ = softmax(b_IJ, axis=2)\n\n            # At last iteration, use `u_hat` in order to receive gradients from the following graph\n            if r_iter == cfg.iter_routing - 1:\n                # line 5:\n                # weighting u_hat with c_IJ, element-wise in the last two dims\n                # => [batch_size, 1152, 10, 16, 1]\n                s_J = tf.multiply(c_IJ, u_hat)\n                # then sum in the second dim, resulting in [batch_size, 1, 10, 16, 1]\n                s_J = reduce_sum(s_J, axis=1, keepdims=True) + biases\n                # assert s_J.get_shape() == [cfg.batch_size, 1, num_outputs, num_dims, 1]\n\n                # line 6:\n                # squash using Eq.1,\n                v_J = squash(s_J)\n                # assert v_J.get_shape() == [cfg.batch_size, 1, 10, 16, 1]\n            elif r_iter < cfg.iter_routing - 1:  # Inner iterations, do not apply backpropagation\n                s_J = tf.multiply(c_IJ, u_hat_stopped)\n                s_J = reduce_sum(s_J, axis=1, keepdims=True) + biases\n                v_J = squash(s_J)\n\n                # line 7:\n                # reshape & tile v_j from [batch_size ,1, 10, 16, 1] to [batch_size, 1152, 10, 16, 1]\n                # then matmul in the last tow dim: [16, 1].T x [16, 1] => [1, 1], reduce mean in the\n                # batch_size dim, resulting in [1, 1152, 10, 1, 1]\n                v_J_tiled = tf.tile(v_J, [1, input_shape[1], 1, 1, 1])\n                u_produce_v = reduce_sum(u_hat_stopped * v_J_tiled, axis=3, keepdims=True)\n                # assert u_produce_v.get_shape() == [cfg.batch_size, 1152, 10, 1, 1]\n\n                # b_IJ += tf.reduce_sum(u_produce_v, axis=0, keep_dims=True)\n                b_IJ += u_produce_v\n\n    return(v_J)\n\n\ndef squash(vector):\n    '''Squashing function corresponding to Eq. 1\n    Args:\n        vector: A tensor with shape [batch_size, 1, num_caps, vec_len, 1] or [batch_size, num_caps, vec_len, 1].\n    Returns:\n        A tensor with the same shape as vector but squashed in 'vec_len' dimension.\n    '''\n    vec_squared_norm = reduce_sum(tf.square(vector), -2, keepdims=True)\n    scalar_factor = vec_squared_norm / (1 + vec_squared_norm) / tf.sqrt(vec_squared_norm + epsilon)\n    vec_squashed = scalar_factor * vector  # element-wise\n    return(vec_squashed)\n"
        },
        {
          "name": "capsNet.py",
          "type": "blob",
          "size": 7.3046875,
          "content": "\"\"\"\nLicense: Apache-2.0\nAuthor: Huadong Liao\nE-mail: naturomics.liao@gmail.com\n\"\"\"\n\nimport tensorflow as tf\n\nfrom config import cfg\nfrom utils import get_batch_data\nfrom utils import softmax\nfrom utils import reduce_sum\nfrom capsLayer import CapsLayer\n\n\nepsilon = 1e-9\n\n\nclass CapsNet(object):\n    def __init__(self, is_training=True, height=28, width=28, channels=1, num_label=10):\n        \"\"\"\n        Args:\n            height: Integer, the height of inputs.\n            width: Integer, the width of inputs.\n            channels: Integer, the channels of inputs.\n            num_label: Integer, the category number.\n        \"\"\"\n        self.height = height\n        self.width = width\n        self.channels = channels\n        self.num_label = num_label\n\n        self.graph = tf.Graph()\n\n        with self.graph.as_default():\n            if is_training:\n                self.X, self.labels = get_batch_data(cfg.dataset, cfg.batch_size, cfg.num_threads)\n                self.Y = tf.one_hot(self.labels, depth=self.num_label, axis=1, dtype=tf.float32)\n\n                self.build_arch()\n                self.loss()\n                self._summary()\n\n                # t_vars = tf.trainable_variables()\n                self.global_step = tf.Variable(0, name='global_step', trainable=False)\n                self.optimizer = tf.train.AdamOptimizer()\n                self.train_op = self.optimizer.minimize(self.total_loss, global_step=self.global_step)\n            else:\n                self.X = tf.placeholder(tf.float32, shape=(cfg.batch_size, self.height, self.width, self.channels))\n                self.labels = tf.placeholder(tf.int32, shape=(cfg.batch_size, ))\n                self.Y = tf.reshape(self.labels, shape=(cfg.batch_size, self.num_label, 1))\n                self.build_arch()\n\n        tf.logging.info('Seting up the main structure')\n\n    def build_arch(self):\n        with tf.variable_scope('Conv1_layer'):\n            # Conv1, return tensor with shape [batch_size, 20, 20, 256]\n            conv1 = tf.contrib.layers.conv2d(self.X, num_outputs=256,\n                                             kernel_size=9, stride=1,\n                                             padding='VALID')\n\n        # Primary Capsules layer, return tensor with shape [batch_size, 1152, 8, 1]\n        with tf.variable_scope('PrimaryCaps_layer'):\n            primaryCaps = CapsLayer(num_outputs=32, vec_len=8, with_routing=False, layer_type='CONV')\n            caps1 = primaryCaps(conv1, kernel_size=9, stride=2)\n\n        # DigitCaps layer, return shape [batch_size, 10, 16, 1]\n        with tf.variable_scope('DigitCaps_layer'):\n            digitCaps = CapsLayer(num_outputs=self.num_label, vec_len=16, with_routing=True, layer_type='FC')\n            self.caps2 = digitCaps(caps1)\n\n        # Decoder structure in Fig. 2\n        # 1. Do masking, how:\n        with tf.variable_scope('Masking'):\n            # a). calc ||v_c||, then do softmax(||v_c||)\n            # [batch_size, 10, 16, 1] => [batch_size, 10, 1, 1]\n            self.v_length = tf.sqrt(reduce_sum(tf.square(self.caps2),\n                                               axis=2, keepdims=True) + epsilon)\n            self.softmax_v = softmax(self.v_length, axis=1)\n            # assert self.softmax_v.get_shape() == [cfg.batch_size, self.num_label, 1, 1]\n\n            # b). pick out the index of max softmax val of the 10 caps\n            # [batch_size, 10, 1, 1] => [batch_size] (index)\n            self.argmax_idx = tf.to_int32(tf.argmax(self.softmax_v, axis=1))\n            # assert self.argmax_idx.get_shape() == [cfg.batch_size, 1, 1]\n            self.argmax_idx = tf.reshape(self.argmax_idx, shape=(cfg.batch_size, ))\n\n            # Method 1.\n            if not cfg.mask_with_y:\n                # c). indexing\n                # It's not easy to understand the indexing process with argmax_idx\n                # as we are 3-dim animal\n                masked_v = []\n                for batch_size in range(cfg.batch_size):\n                    v = self.caps2[batch_size][self.argmax_idx[batch_size], :]\n                    masked_v.append(tf.reshape(v, shape=(1, 1, 16, 1)))\n\n                self.masked_v = tf.concat(masked_v, axis=0)\n                assert self.masked_v.get_shape() == [cfg.batch_size, 1, 16, 1]\n            # Method 2. masking with true label, default mode\n            else:\n                self.masked_v = tf.multiply(tf.squeeze(self.caps2), tf.reshape(self.Y, (-1, self.num_label, 1)))\n                self.v_length = tf.sqrt(reduce_sum(tf.square(self.caps2), axis=2, keepdims=True) + epsilon)\n\n        # 2. Reconstructe the MNIST images with 3 FC layers\n        # [batch_size, 1, 16, 1] => [batch_size, 16] => [batch_size, 512]\n        with tf.variable_scope('Decoder'):\n            vector_j = tf.reshape(self.masked_v, shape=(cfg.batch_size, -1))\n            fc1 = tf.contrib.layers.fully_connected(vector_j, num_outputs=512)\n            fc2 = tf.contrib.layers.fully_connected(fc1, num_outputs=1024)\n            self.decoded = tf.contrib.layers.fully_connected(fc2,\n                                                             num_outputs=self.height * self.width * self.channels,\n                                                             activation_fn=tf.sigmoid)\n\n    def loss(self):\n        # 1. The margin loss\n\n        # [batch_size, 10, 1, 1]\n        # max_l = max(0, m_plus-||v_c||)^2\n        max_l = tf.square(tf.maximum(0., cfg.m_plus - self.v_length))\n        # max_r = max(0, ||v_c||-m_minus)^2\n        max_r = tf.square(tf.maximum(0., self.v_length - cfg.m_minus))\n        assert max_l.get_shape() == [cfg.batch_size, self.num_label, 1, 1]\n\n        # reshape: [batch_size, 10, 1, 1] => [batch_size, 10]\n        max_l = tf.reshape(max_l, shape=(cfg.batch_size, -1))\n        max_r = tf.reshape(max_r, shape=(cfg.batch_size, -1))\n\n        # calc T_c: [batch_size, 10]\n        # T_c = Y, is my understanding correct? Try it.\n        T_c = self.Y\n        # [batch_size, 10], element-wise multiply\n        L_c = T_c * max_l + cfg.lambda_val * (1 - T_c) * max_r\n\n        self.margin_loss = tf.reduce_mean(tf.reduce_sum(L_c, axis=1))\n\n        # 2. The reconstruction loss\n        orgin = tf.reshape(self.X, shape=(cfg.batch_size, -1))\n        squared = tf.square(self.decoded - orgin)\n        self.reconstruction_err = tf.reduce_mean(squared)\n\n        # 3. Total loss\n        # The paper uses sum of squared error as reconstruction error, but we\n        # have used reduce_mean in `# 2 The reconstruction loss` to calculate\n        # mean squared error. In order to keep in line with the paper,the\n        # regularization scale should be 0.0005*784=0.392\n        self.total_loss = self.margin_loss + cfg.regularization_scale * self.reconstruction_err\n\n    # Summary\n    def _summary(self):\n        train_summary = []\n        train_summary.append(tf.summary.scalar('train/margin_loss', self.margin_loss))\n        train_summary.append(tf.summary.scalar('train/reconstruction_loss', self.reconstruction_err))\n        train_summary.append(tf.summary.scalar('train/total_loss', self.total_loss))\n        recon_img = tf.reshape(self.decoded, shape=(cfg.batch_size, self.height, self.width, self.channels))\n        train_summary.append(tf.summary.image('reconstruction_img', recon_img))\n        self.train_summary = tf.summary.merge(train_summary)\n\n        correct_prediction = tf.equal(tf.to_int32(self.labels), self.argmax_idx)\n        self.accuracy = tf.reduce_sum(tf.cast(correct_prediction, tf.float32))\n"
        },
        {
          "name": "config.py",
          "type": "blob",
          "size": 1.931640625,
          "content": "import tensorflow as tf\n\nflags = tf.app.flags\n\n\n############################\n#    hyper parameters      #\n############################\n\n# For separate margin loss\nflags.DEFINE_float('m_plus', 0.9, 'the parameter of m plus')\nflags.DEFINE_float('m_minus', 0.1, 'the parameter of m minus')\nflags.DEFINE_float('lambda_val', 0.5, 'down weight of the loss for absent digit classes')\n\n# for training\nflags.DEFINE_integer('batch_size', 128, 'batch size')\nflags.DEFINE_integer('epoch', 50, 'epoch')\nflags.DEFINE_integer('iter_routing', 3, 'number of iterations in routing algorithm')\nflags.DEFINE_boolean('mask_with_y', True, 'use the true label to mask out target capsule or not')\n\nflags.DEFINE_float('stddev', 0.01, 'stddev for W initializer')\nflags.DEFINE_float('regularization_scale', 0.392, 'regularization coefficient for reconstruction loss, default to 0.0005*784=0.392')\n\n\n############################\n#   environment setting    #\n############################\nflags.DEFINE_string('dataset', 'mnist', 'The name of dataset [mnist, fashion-mnist')\nflags.DEFINE_boolean('is_training', True, 'train or predict phase')\nflags.DEFINE_integer('num_threads', 8, 'number of threads of enqueueing examples')\nflags.DEFINE_string('logdir', 'logdir', 'logs directory')\nflags.DEFINE_integer('train_sum_freq', 100, 'the frequency of saving train summary(step)')\nflags.DEFINE_integer('val_sum_freq', 500, 'the frequency of saving valuation summary(step)')\nflags.DEFINE_integer('save_freq', 3, 'the frequency of saving model(epoch)')\nflags.DEFINE_string('results', 'results', 'path for saving results')\n\n############################\n#   distributed setting    #\n############################\nflags.DEFINE_integer('num_gpu', 2, 'number of gpus for distributed training')\nflags.DEFINE_integer('batch_size_per_gpu', 128, 'batch size on 1 gpu')\nflags.DEFINE_integer('thread_per_gpu', 4, 'Number of preprocessing threads per tower.')\n\ncfg = tf.app.flags.FLAGS\n# tf.logging.set_verbosity(tf.logging.INFO)\n"
        },
        {
          "name": "dist_version",
          "type": "tree",
          "content": null
        },
        {
          "name": "download_data.py",
          "type": "blob",
          "size": 3.2080078125,
          "content": "import os\nimport sys\nimport gzip\nimport shutil\nfrom six.moves import urllib\n\n# mnist dataset\nHOMEPAGE = \"http://yann.lecun.com/exdb/mnist/\"\nMNIST_TRAIN_IMGS_URL = HOMEPAGE + \"train-images-idx3-ubyte.gz\"\nMNIST_TRAIN_LABELS_URL = HOMEPAGE + \"train-labels-idx1-ubyte.gz\"\nMNIST_TEST_IMGS_URL = HOMEPAGE + \"t10k-images-idx3-ubyte.gz\"\nMNIST_TEST_LABELS_URL = HOMEPAGE + \"t10k-labels-idx1-ubyte.gz\"\n\n# fashion-mnist dataset\nHOMEPAGE = \"http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/\"\nFASHION_MNIST_TRAIN_IMGS_URL = HOMEPAGE + \"train-images-idx3-ubyte.gz\"\nFASHION_MNIST_TRAIN_LABELS_URL = HOMEPAGE + \"train-labels-idx1-ubyte.gz\"\nFASHION_MNIST_TEST_IMGS_URL = HOMEPAGE + \"t10k-images-idx3-ubyte.gz\"\nFASHION_MNIST_TEST_LABELS_URL = HOMEPAGE + \"t10k-labels-idx1-ubyte.gz\"\n\n\ndef download_and_uncompress_zip(URL, dataset_dir, force=False):\n    '''\n    Args:\n        URL: the download links for data\n        dataset_dir: the path to save data\n        force: re-download data\n    '''\n    filename = URL.split('/')[-1]\n    filepath = os.path.join(dataset_dir, filename)\n    if not os.path.exists(dataset_dir):\n        os.mkdir(dataset_dir)\n    extract_to = os.path.splitext(filepath)[0]\n\n    def download_progress(count, block_size, total_size):\n        sys.stdout.write(\"\\r>> Downloading %s %.1f%%\" % (filename, float(count * block_size) / float(total_size) * 100.))\n        sys.stdout.flush()\n\n    if not force and os.path.exists(filepath):\n        print(\"file %s already exist\" % (filename))\n    else:\n        filepath, _ = urllib.request.urlretrieve(URL, filepath, download_progress)\n        print()\n        print('Successfully Downloaded', filename)\n\n    # with zipfile.ZipFile(filepath) as fd:\n    with gzip.open(filepath, 'rb') as f_in, open(extract_to, 'wb') as f_out:\n        print('Extracting ', filename)\n        shutil.copyfileobj(f_in, f_out)\n        print('Successfully extracted')\n        print()\n\n\ndef start_download(dataset, save_to, force):\n    if not os.path.exists(save_to):\n        os.makedirs(save_to)\n    if dataset == 'mnist':\n        download_and_uncompress_zip(MNIST_TRAIN_IMGS_URL, save_to, force)\n        download_and_uncompress_zip(MNIST_TRAIN_LABELS_URL, save_to, force)\n        download_and_uncompress_zip(MNIST_TEST_IMGS_URL, save_to, force)\n        download_and_uncompress_zip(MNIST_TEST_LABELS_URL, save_to, force)\n    elif dataset == 'fashion-mnist':\n        download_and_uncompress_zip(FASHION_MNIST_TRAIN_IMGS_URL, save_to, force)\n        download_and_uncompress_zip(FASHION_MNIST_TRAIN_LABELS_URL, save_to, force)\n        download_and_uncompress_zip(FASHION_MNIST_TEST_IMGS_URL, save_to, force)\n        download_and_uncompress_zip(FASHION_MNIST_TEST_LABELS_URL, save_to, force)\n    else:\n        raise Exception(\"Invalid dataset name! please check it: \", dataset)\n\nif __name__ == '__main__':\n    import argparse\n    parser = argparse.ArgumentParser('Script for automatically downloading datasets')\n    parser.add_argument(\"--dataset\", default='mnist', choices=['mnist', 'fashion-mnist', 'smallNORB'])\n    save_to = os.path.join('data', 'mnist')\n    parser.add_argument(\"--save_to\", default=save_to)\n    parser.add_argument(\"--force\", default=False, type=bool)\n    args = parser.parse_args()\n    start_download(args.dataset, args.save_to, args.force)\n"
        },
        {
          "name": "imgs",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.py",
          "type": "blob",
          "size": 4.91796875,
          "content": "import os\nimport sys\nimport numpy as np\nimport tensorflow as tf\nfrom tqdm import tqdm\n\nfrom config import cfg\nfrom utils import load_data\nfrom capsNet import CapsNet\n\n\ndef save_to():\n    if not os.path.exists(cfg.results):\n        os.mkdir(cfg.results)\n    if cfg.is_training:\n        loss = cfg.results + '/loss.csv'\n        train_acc = cfg.results + '/train_acc.csv'\n        val_acc = cfg.results + '/val_acc.csv'\n\n        if os.path.exists(val_acc):\n            os.remove(val_acc)\n        if os.path.exists(loss):\n            os.remove(loss)\n        if os.path.exists(train_acc):\n            os.remove(train_acc)\n\n        fd_train_acc = open(train_acc, 'w')\n        fd_train_acc.write('step,train_acc\\n')\n        fd_loss = open(loss, 'w')\n        fd_loss.write('step,loss\\n')\n        fd_val_acc = open(val_acc, 'w')\n        fd_val_acc.write('step,val_acc\\n')\n        return(fd_train_acc, fd_loss, fd_val_acc)\n    else:\n        test_acc = cfg.results + '/test_acc.csv'\n        if os.path.exists(test_acc):\n            os.remove(test_acc)\n        fd_test_acc = open(test_acc, 'w')\n        fd_test_acc.write('test_acc\\n')\n        return(fd_test_acc)\n\n\ndef train(model, supervisor, num_label):\n    trX, trY, num_tr_batch, valX, valY, num_val_batch = load_data(cfg.dataset, cfg.batch_size, is_training=True)\n    Y = valY[:num_val_batch * cfg.batch_size].reshape((-1, 1))\n\n    fd_train_acc, fd_loss, fd_val_acc = save_to()\n    config = tf.ConfigProto()\n    config.gpu_options.allow_growth = True\n    with supervisor.managed_session(config=config) as sess:\n        print(\"\\nNote: all of results will be saved to directory: \" + cfg.results)\n        for epoch in range(cfg.epoch):\n            print(\"Training for epoch %d/%d:\" % (epoch, cfg.epoch))\n            if supervisor.should_stop():\n                print('supervisor stoped!')\n                break\n            for step in tqdm(range(num_tr_batch), total=num_tr_batch, ncols=70, leave=False, unit='b'):\n                start = step * cfg.batch_size\n                end = start + cfg.batch_size\n                global_step = epoch * num_tr_batch + step\n\n                if global_step % cfg.train_sum_freq == 0:\n                    _, loss, train_acc, summary_str = sess.run([model.train_op, model.total_loss, model.accuracy, model.train_summary])\n                    assert not np.isnan(loss), 'Something wrong! loss is nan...'\n                    supervisor.summary_writer.add_summary(summary_str, global_step)\n\n                    fd_loss.write(str(global_step) + ',' + str(loss) + \"\\n\")\n                    fd_loss.flush()\n                    fd_train_acc.write(str(global_step) + ',' + str(train_acc / cfg.batch_size) + \"\\n\")\n                    fd_train_acc.flush()\n                else:\n                    sess.run(model.train_op)\n\n                if cfg.val_sum_freq != 0 and (global_step) % cfg.val_sum_freq == 0:\n                    val_acc = 0\n                    for i in range(num_val_batch):\n                        start = i * cfg.batch_size\n                        end = start + cfg.batch_size\n                        acc = sess.run(model.accuracy, {model.X: valX[start:end], model.labels: valY[start:end]})\n                        val_acc += acc\n                    val_acc = val_acc / (cfg.batch_size * num_val_batch)\n                    fd_val_acc.write(str(global_step) + ',' + str(val_acc) + '\\n')\n                    fd_val_acc.flush()\n\n            if (epoch + 1) % cfg.save_freq == 0:\n                supervisor.saver.save(sess, cfg.logdir + '/model_epoch_%04d_step_%02d' % (epoch, global_step))\n\n        fd_val_acc.close()\n        fd_train_acc.close()\n        fd_loss.close()\n\n\ndef evaluation(model, supervisor, num_label):\n    teX, teY, num_te_batch = load_data(cfg.dataset, cfg.batch_size, is_training=False)\n    fd_test_acc = save_to()\n    with supervisor.managed_session(config=tf.ConfigProto(allow_soft_placement=True)) as sess:\n        supervisor.saver.restore(sess, tf.train.latest_checkpoint(cfg.logdir))\n        tf.logging.info('Model restored!')\n\n        test_acc = 0\n        for i in tqdm(range(num_te_batch), total=num_te_batch, ncols=70, leave=False, unit='b'):\n            start = i * cfg.batch_size\n            end = start + cfg.batch_size\n            acc = sess.run(model.accuracy, {model.X: teX[start:end], model.labels: teY[start:end]})\n            test_acc += acc\n        test_acc = test_acc / (cfg.batch_size * num_te_batch)\n        fd_test_acc.write(str(test_acc))\n        fd_test_acc.close()\n        print('Test accuracy has been saved to ' + cfg.results + '/test_acc.csv')\n\n\ndef main(_):\n    tf.logging.info(' Loading Graph...')\n    num_label = 10\n    model = CapsNet()\n    tf.logging.info(' Graph loaded')\n\n    sv = tf.train.Supervisor(graph=model.graph, logdir=cfg.logdir, save_model_secs=0)\n\n    if cfg.is_training:\n        tf.logging.info(' Start training...')\n        train(model, sv, num_label)\n        tf.logging.info('Training done')\n    else:\n        evaluation(model, sv, num_label)\n\nif __name__ == \"__main__\":\n    tf.app.run()\n"
        },
        {
          "name": "plot_acc.R",
          "type": "blob",
          "size": 0.7333984375,
          "content": "#! /bin/env Rscript\n\nlibrary(ggplot2)\n\ndat1<-read.csv('results/accuracy_1_iter.csv')\ndat2<-read.csv('results/accuracy_2_iter.csv')\ndat3<-read.csv('results/accuracy_3_iter.csv')\ndata_dim<-dim(dat1)\ndat1<-data.frame(dat1, routing_iter=factor(rep(1, data_dim[1])))\ndat2<-data.frame(dat2, routing_iter=factor(rep(2, data_dim[1])))\ndat3<-data.frame(dat3, routing_iter=factor(rep(3, data_dim[1])))\ndata<-rbind(dat1,dat2,dat3)\np<-ggplot(data,aes(x=step, y=test_acc, color=routing_iter))\np<-p + geom_line() + ylim(c(0.975, .997)) + xlim(c(0, 49000))\np<-p + labs(title='Test accuracy of different routing iterations') + theme(plot.title=element_text(hjust=0.5), legend.position=c(0.92, 0.6))\nggsave(p, filename='results/routing_trials.png', width=5, height=5)\n"
        },
        {
          "name": "results",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils.py",
          "type": "blob",
          "size": 4.966796875,
          "content": "import os\nimport scipy\nimport numpy as np\nimport tensorflow as tf\n\n\ndef load_mnist(batch_size, is_training=True):\n    path = os.path.join('data', 'mnist')\n    if is_training:\n        fd = open(os.path.join(path, 'train-images-idx3-ubyte'))\n        loaded = np.fromfile(file=fd, dtype=np.uint8)\n        trainX = loaded[16:].reshape((60000, 28, 28, 1)).astype(np.float32)\n\n        fd = open(os.path.join(path, 'train-labels-idx1-ubyte'))\n        loaded = np.fromfile(file=fd, dtype=np.uint8)\n        trainY = loaded[8:].reshape((60000)).astype(np.int32)\n\n        trX = trainX[:55000] / 255.\n        trY = trainY[:55000]\n\n        valX = trainX[55000:, ] / 255.\n        valY = trainY[55000:]\n\n        num_tr_batch = 55000 // batch_size\n        num_val_batch = 5000 // batch_size\n\n        return trX, trY, num_tr_batch, valX, valY, num_val_batch\n    else:\n        fd = open(os.path.join(path, 't10k-images-idx3-ubyte'))\n        loaded = np.fromfile(file=fd, dtype=np.uint8)\n        teX = loaded[16:].reshape((10000, 28, 28, 1)).astype(np.float)\n\n        fd = open(os.path.join(path, 't10k-labels-idx1-ubyte'))\n        loaded = np.fromfile(file=fd, dtype=np.uint8)\n        teY = loaded[8:].reshape((10000)).astype(np.int32)\n\n        num_te_batch = 10000 // batch_size\n        return teX / 255., teY, num_te_batch\n\n\ndef load_fashion_mnist(batch_size, is_training=True):\n    path = os.path.join('data', 'fashion-mnist')\n    if is_training:\n        fd = open(os.path.join(path, 'train-images-idx3-ubyte'))\n        loaded = np.fromfile(file=fd, dtype=np.uint8)\n        trainX = loaded[16:].reshape((60000, 28, 28, 1)).astype(np.float32)\n\n        fd = open(os.path.join(path, 'train-labels-idx1-ubyte'))\n        loaded = np.fromfile(file=fd, dtype=np.uint8)\n        trainY = loaded[8:].reshape((60000)).astype(np.int32)\n\n        trX = trainX[:55000] / 255.\n        trY = trainY[:55000]\n\n        valX = trainX[55000:, ] / 255.\n        valY = trainY[55000:]\n\n        num_tr_batch = 55000 // batch_size\n        num_val_batch = 5000 // batch_size\n\n        return trX, trY, num_tr_batch, valX, valY, num_val_batch\n    else:\n        fd = open(os.path.join(path, 't10k-images-idx3-ubyte'))\n        loaded = np.fromfile(file=fd, dtype=np.uint8)\n        teX = loaded[16:].reshape((10000, 28, 28, 1)).astype(np.float)\n\n        fd = open(os.path.join(path, 't10k-labels-idx1-ubyte'))\n        loaded = np.fromfile(file=fd, dtype=np.uint8)\n        teY = loaded[8:].reshape((10000)).astype(np.int32)\n\n        num_te_batch = 10000 // batch_size\n        return teX / 255., teY, num_te_batch\n\n\ndef load_data(dataset, batch_size, is_training=True, one_hot=False):\n    if dataset == 'mnist':\n        return load_mnist(batch_size, is_training)\n    elif dataset == 'fashion-mnist':\n        return load_fashion_mnist(batch_size, is_training)\n    else:\n        raise Exception('Invalid dataset, please check the name of dataset:', dataset)\n\n\ndef get_batch_data(dataset, batch_size, num_threads):\n    if dataset == 'mnist':\n        trX, trY, num_tr_batch, valX, valY, num_val_batch = load_mnist(batch_size, is_training=True)\n    elif dataset == 'fashion-mnist':\n        trX, trY, num_tr_batch, valX, valY, num_val_batch = load_fashion_mnist(batch_size, is_training=True)\n    data_queues = tf.train.slice_input_producer([trX, trY])\n    X, Y = tf.train.shuffle_batch(data_queues, num_threads=num_threads,\n                                  batch_size=batch_size,\n                                  capacity=batch_size * 64,\n                                  min_after_dequeue=batch_size * 32,\n                                  allow_smaller_final_batch=False)\n\n    return(X, Y)\n\n\ndef save_images(imgs, size, path):\n    '''\n    Args:\n        imgs: [batch_size, image_height, image_width]\n        size: a list with tow int elements, [image_height, image_width]\n        path: the path to save images\n    '''\n    imgs = (imgs + 1.) / 2  # inverse_transform\n    return(scipy.misc.imsave(path, mergeImgs(imgs, size)))\n\n\ndef mergeImgs(images, size):\n    h, w = images.shape[1], images.shape[2]\n    imgs = np.zeros((h * size[0], w * size[1], 3))\n    for idx, image in enumerate(images):\n        i = idx % size[1]\n        j = idx // size[1]\n        imgs[j * h:j * h + h, i * w:i * w + w, :] = image\n\n    return imgs\n\n\n# For version compatibility\ndef reduce_sum(input_tensor, axis=None, keepdims=False):\n    try:\n        return tf.reduce_sum(input_tensor, axis=axis, keepdims=keepdims)\n    except:\n        return tf.reduce_sum(input_tensor, axis=axis, keep_dims=keepdims)\n\n\n# For version compatibility\ndef softmax(logits, axis=None):\n    try:\n        return tf.nn.softmax(logits, axis=axis)\n    except:\n        return tf.nn.softmax(logits, dim=axis)\n\n\ndef get_shape(inputs, name=None):\n    name = \"shape\" if name is None else name\n    with tf.name_scope(name):\n        static_shape = inputs.get_shape().as_list()\n        dynamic_shape = tf.shape(inputs)\n        shape = []\n        for i, dim in enumerate(static_shape):\n            dim = dim if dim is not None else dynamic_shape[i]\n            shape.append(dim)\n        return(shape)\n"
        }
      ]
    }
  ]
}