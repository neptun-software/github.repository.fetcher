{
  "metadata": {
    "timestamp": 1736559924240,
    "page": 690,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "miyakogi/pyppeteer",
      "stars": 3566,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.0419921875,
          "content": "[run]\nomit=setup.py\nsource=pyppeteer,tests\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0029296875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# Virtualenv\nenv/\nvenv/\nbin/\ninclude/\nlib/\nlib64\nlib64/\nman/\npyvenv.cfg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\n.doit.db.*\n.mypy_cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# pyenv python configuration file\n.python-version\n\n# pycharm file\n.idea/\n\n###### direnv ######\n.direnv\n.envrc\n\n###### zsh-autoenv ######\n.autoenv.zsh\n.autoenv_leave.zsh\n\n# test files\ntrace.json\n"
        },
        {
          "name": ".noserc",
          "type": "blob",
          "size": 0.1015625,
          "content": "[nosetests]\nlogging-level=INFO\n# no-path-adjustment=true\n# with-coverage=true\n# cover-package=pyppeteer\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.798828125,
          "content": "# Config file for automatic testing at travis-ci.org\n# This file will be regenerated if you run travis_pypi_setup.py\n\nlanguage: python\n\nmatrix:\n  include:\n    - dist: xenial\n      python: 3.5\n      env: TOXENV=\"py35\"\n    - dist: xenial\n      python: 3.6\n      env: TOXENV=\"py36\"\n    - dist: xenial\n      python: 3.7\n      env: TOXENV=\"py37,doit,codecov\"\n    - os: osx\n      osx_image: xcode10.2  # Python 3.7.2 running on macOS 10.14.3\n      language: shell\n      env: TOXENV=\"py37\"\n      before_install: python3 --version\n    - os: windows\n      language: shell\n      before_install: choco install python\n      env:\n        - PATH=/c/Python37:/c/Python37/Scripts:$PATH\n          TOXENV=\"py37\"\n  allow_failures:\n    - os: windows  # windows build is unstable on Travis\n\n\ninstall:\n  - pip3 install tox\n\nscript:\n  - tox\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 8.181640625,
          "content": "History\n=======\n\n## Version 0.0.26 (next version)\n\n* Add `$PYPPETEER_NO_PROGRESS_BAR` environment variable\n* `pyppeteer.defaultArgs` now accepts that help infer chromium command-line flags.\n* `pyppeteer.launch()` argument `ignoreDefaultArgs` now accepts a list of flags to ignore.\n* `Page.type()` now supports typing emoji\n* `Page.pdf()` accepts a new argument `preferCSSPageSize`\n* Add new option `defaultViewport` to `launch()` and `connect()`\n* Add `BrowserContext.pages()` method\n\n## Version 0.0.25 (2018-09-27)\n\n* Fix miss-spelled methods and functions\n  * Change `Browser.isIncognite` to `Browser.isIncognito`\n  * Change `Browser.createIncogniteBrowserContext` to `Browser.createIncognitoBrowserContext`\n  * Change `chromium_excutable` to `chromium_executable`\n  * Remove `craete` function in `page.py`\n\n## Version 0.0.24 (2018-09-12)\n\nCatch up puppeteer v1.6.0\n\n* Add `ElementHandle.isIntersectingViewport()`\n* Add `reportAnonymousScript` option to `Coverage.startJSCoverage()`\n* Add `Page.waitForRequest` and `Page.waitForResponse` methods\n* Now possible to attach to extension background pages with `Target.page()`\n* Improved reliability of clicking with `Page.click()` and `ElementHandle.click()`\n\n## Version 0.0.23 (2018-09-10)\n\nCatch up puppeteer v1.5.0\n\n* Add `BrowserContext` class\n* Add `Worker` class\n* Change `CDPSession.send` to a normal function which returns awaitable value\n* Add `Page.isClosed` method\n* Add `ElementHandle.querySelectorAllEval` and `ElementHandle.JJeval`\n* Add `Target.opener`\n* Add `Request.isNavigationRequest`\n\n## Version 0.0.22 (2018-09-06)\n\nCatch up puppeteer v1.4.0\n\n* Add `pyppeteer.DEBUG` variable\n* Add `Page.browser`\n* Add `Target.browser`\n* Add `ElementHandle.querySelectorEval` and `ElementHandle.Jeval`\n* Add `runBeforeUnload` option to `Page.close` method\n* Change `Page.querySelectorEval` to raise `ElementHandleError` when element which matches `selector` is not found\n* Report 'Log' domain entries as 'console' events\n* Fix `Page.goto` to return response when page pushes new state\n* (OS X) Suppress long log when extracting chromium\n\n\n## Version 0.0.21 (2018-08-21)\n\nCatch up puppeteer v1.3.0\n\n* Add `pyppeteer-install` command\n* Add `autoClose` option to `launch` function\n* Add `loop` option to `launch` function (experimental)\n* Add `Page.setBypassCSP` method\n* `Page.tracing.stop` returns result data\n* Rename `documentloaded` to `domcontentloaded` on `waitUntil` option\n* Fix `slowMo` option\n* Fix anchor navigation\n* Fix to return response via redirects\n* Continue to find WS URL while process is alive\n\n\n## Version 0.0.20 (2018-08-11)\n\n* Run on msys/cygwin, anyway\n* Raise error correctly when connection failed (PR#91)\n* Change browser download location and temporary user data directory to:\n    * If `$PYPPETEER_HOME` environment variable is defined, use this location\n    * Otherwise, use platform dependent locations, based on [appdirs](https://pypi.org/project/appdirs/):\n        * `'C:\\Users\\<username>\\AppData\\Local\\pyppeteer'` (Windows)\n        * `'/Users/<username>/Library/Application Support/pyppeteer'` (OS X)\n        * `'/home/<username>/.local/share/pyppeteer'` (Linux)\n            * or in `'$XDG_DATA_HOME/pyppeteer'` if `$XDG_DATA_HOME` is defined\n\n* Introduce `$PYPPETEER_CHROMIUM_REVISION`\n* Introduce `$PYPPETEER_HOME`\n* Add `logLevel` option to `launch` and `connect` functions\n* Add page `close` event\n* Add `ElementHandle.boxModel` method\n* Add an option to disable timeout for `waitFor` functions\n\n\n## Version 0.0.19 (2018-07-05)\n\nCatch up puppeteer v1.2.0\n\n* Add `ElementHandle.contentFrame` method\n* Add `Request.redirectChain` method\n* `Page.addScriptTag` accepts a new option `type`\n\n\n## Version 0.0.18 (2018-07-04)\n\nCatch up puppeteer v1.1.1\n\n* Add `Page.waitForXPath` and `Frame.waitForXPath`\n* `Page.waitFor` accepts xpath string which starts with `//`\n* Add `Response.fromCache` and `Response.fromServiceWorker`\n* Add `SecurityDetails` class and `response.securityDetails`\n* Add `Page.setCacheEnabled` method\n* Add `ExecutionContext.frame`\n* Add `dumpio` option to `launch` function\n* Add `slowMo` option to `connect` function\n* `launcher.connect` can be access from package top\n  * `from pyppeteer import connect` is now valid\n* Add `Frame.evaluateHandle`\n* Add `Page.Events.DOMContentLoaded`\n\n\n## Version 0.0.17 (2018-04-02)\n\n* Mark as alpha\n\n* Gracefully terminate browser process\n* `Request.method` and `Request.postData` return `None` if no data\n* Change `Target.url` and `Target.type` to properties\n* Change `Dialog.message` and `Dialog.defaultValue` to properties\n* Fix: properly emit `Browser.targetChanged` events\n* Fix: properly emit `Browser.targetDestroyed` events\n\n\n## Version 0.0.16 (2018-03-23)\n\n* BugFix: Skip SIGHUP option on windows (windows does not support this signal)\n\n\n## Version 0.0.15 (2018-03-22)\n\nCatch up puppeteer v1.0.0\n\n* Support `raf` and `mutation` polling for `waitFor*` methods\n* Add `Page.coverage` to support JS and CSS coverage\n* Add XPath support with `Page.xpath`, `Frame.xpath`, and `ElementHandle.xpath`\n* Add `Target.createCDPSession` to work with raw Devtools Protocol\n* Change `Frame.executionContext` from property to coroutine\n* Add `ignoreDefaultArgs` option to `pyppeteer.launch`\n* Add `handleSIGINT`/`handleSIGTERM`/`handleSIGHUP` options to `pyppeteer.launch`\n* Add `Page.setDefaultNavigationTimeout` method\n* `Page.waitFor*` methods accept `JSHandle` as argument\n* Implement `Frame.content` and `Frame.setContent` methods\n* `page.tracing.start` accepts custom tracing categories option\n* Add `Browser.process` property\n* Add `Request.frame` property\n\n\n## Version 0.0.14 (2018-03-14)\n\n* Read WS endpoint from web interface instead of stdout\n* Pass environment variables of python process to chrome by default\n* Do not limit size of websocket frames\n\n* BugFix:\n    * `Keyboard.type`\n    * `Page.Events.Metrics`\n\n## Version 0.0.13 (2018-03-10)\n\nCatch up puppeteer v0.13.0\n\n* `pyppeteer.launch()` is now **coroutine**\n* Implement `connect` function\n* `PYPPETEER_DOWNLOAD_HOST` env variable specifies host part of URL to download chromium\n* Rename `setRequestInterceptionEnable` to `setRequestInterception`\n* Rename `Page.getMetrics` to `Page.metrics`\n* Implement `Browser.pages` to access all pages\n    * Add `Target` class and some new method on Browser\n* Add `ElementHandle.querySelector` and `ElementHandle.querySelectorAll`\n* Refactor NavigatorWatcher\n    * add `documentloaded`, `networkidle0`, and `networkidle2` options\n* `Request.abort` accepts error code\n* `addScriptTag` and `addStyleTag` return `ElementHandle`\n* Add `force_expr` option to `evaluate` method\n* `Page.select` returns selected values\n* Add `pyppeteer.version` and `pyppeteer.version_info`\n\n* BugFix:\n    * Do not change original options dictionary\n    * `Page.frames`\n    * `Page.queryObjects`\n    * `Page.exposeFunction`\n    * Request interception\n    * Console API\n    * websocket error on closing browser (#24)\n\n## Version 0.0.12 (2018-03-01)\n\n* BugFix (#33)\n\n## Version 0.0.11 (2018-03-01)\n\nCatch up puppeteer v0.12.0\n\n* Remove `ElementHandle.evaluate`\n* Remove `ElementHandle.attribute`\n* Deprecate `Page.plainText`\n* Deprecate `Page.injectFile`\n* Add `Page.querySelectorAllEval`\n* Add `Page.select` and `Page.type`\n* Add `ElementHandle.boundingBox` and `ElementHandle.screenshot`\n* Add `ElementHandle.focus`, `ElementHandle.type`, and `ElementHandle.press`\n* Add `getMetrics` method\n* Add `offlineMode`\n\n## Version 0.0.10 (2018-02-27)\n\n* Enable to import `launch` from package root\n* Change `browser.close` to coroutine function\n* Catch up puppeteer v0.11.0\n\n### Version 0.0.9 (2017-09-09)\n\n* Delete temporary user data directory when browser closed\n* Fix bug to fail extracting zip on mac\n\n### Version 0.0.8 (2017-09-03)\n\n* Change chromium revision\n* Support steps option of `Mouse.move()`\n* Experimentally supports python 3.5 by py-backwards\n\n### Version 0.0.7 (2017-09-03)\n\n* Catch up puppeteer v0.10.2\n    * Add `Page.querySelectorEval` (`Page.$eval` in puppeteer)\n    * Deprecate `ElementHandle.attribute`\n    * Add `Touchscreen` class and implement `Page.tap` and `ElementHandle.tap`\n\n### Version 0.0.6 (2017-09-02)\n\n* Accept keyword arguments for options\n* Faster polling on `waitFor*` functions\n* Fix bugs\n\n### Version 0.0.5 (2017-08-30)\n\n* Implement pdf printing\n* Implement `waitFor*` functions\n\n### Version 0.0.4 (2017-08-30)\n\n* Register PyPI\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.126953125,
          "content": "\nMIT License\n\nCopyright (c) 2017, Hiroyuki Takagi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nThis software includes the work that is distributed in the Apache License 2.0.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.236328125,
          "content": "include README.md\ninclude LICENSE\ninclude CHANGES.md\n\nrecursive-include tests *\nrecursive-exclude * __pycache__\nrecursive-exclude * *.py[co]\n\nrecursive-include docs *.rst conf.py Makefile *.jpg *.png *.gif *.js *.css *.html\nprune docs/_build\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.669921875,
          "content": ".PHONY: clean clean-test clean-pyc clean-build docs help\n.DEFAULT_GOAL := help\ndefine BROWSER_PYSCRIPT\nimport os, webbrowser, sys\ntry:\n\tfrom urllib import pathname2url\nexcept:\n\tfrom urllib.request import pathname2url\n\nwebbrowser.open(\"file://\" + pathname2url(os.path.abspath(sys.argv[1])))\nendef\nexport BROWSER_PYSCRIPT\n\ndefine PRINT_HELP_PYSCRIPT\nimport re, sys\n\nfor line in sys.stdin:\n\tmatch = re.match(r'^([a-zA-Z_-]+):.*?## (.*)$$', line)\n\tif match:\n\t\ttarget, help = match.groups()\n\t\tprint(\"%-20s %s\" % (target, help))\nendef\nexport PRINT_HELP_PYSCRIPT\nBROWSER := python -c \"$$BROWSER_PYSCRIPT\"\n\nhelp:\n\t@python -c \"$$PRINT_HELP_PYSCRIPT\" < $(MAKEFILE_LIST)\n\nclean: clean-build clean-pyc clean-test ## remove all build, test, coverage and Python artifacts\n\nclean-build: ## remove build artifacts\n\t@echo \"Remove build files (build/, dist/, .egg*, ...).\"\n\t@rm -fr build/\n\t@rm -fr dist/\n\t@rm -fr .eggs/\n\t@find . -name '*.egg-info' -exec rm -fr {} +\n\t@find . -name '*.egg' -exec rm -f {} +\n\nclean-pyc: ## remove Python file artifacts\n\t@echo \"Remove python files (*.py[co], __pycache__, ...).\"\n\t@find . -name '*.pyc' -exec rm -f {} +\n\t@find . -name '*.pyo' -exec rm -f {} +\n\t@find . -name '*~' -exec rm -f {} +\n\t@find . -name '__pycache__' -exec rm -fr {} +\n\nclean-test: ## remove test and coverage artifacts\n\t@echo \"Remove test/coverage files (.coverage, htmlcov/).\"\n\t@rm -f .coverage\n\t@rm -fr htmlcov/\n\n.PHONY: green\ngreen:  ## run green test\n\t@echo \"Run green.\"\n\t@cd maint && \\\n\tgreen -c ../.green ../pyppeteer\n\ngreen-single:  ## run green with a single process\n\t@echo \"Run green with a single process.\"\n\t@cd maint && \\\n\tgreen -s 1 -c ../.green ../pyppeteer\n\ngreen-cov:  # run green and calculate coverage\n\t@echo \"Run green with coverage.\"\n\t@cd maint && \\\n\tgreen -r -c ../.green ../pyppeteer\n\n.PHONY: flake8\nflake8:  ## run flake8 syntax check\n\tflake8 setup.py pyppeteer\n\n.PHONY: mypy\nmypy:  ## run mypy type check\n\tmypy pyppeteer\n\n.PHONY: pydocstyle\npydocstyle:  ## run pydocstyle check\n\tpydocstyle pyppeteer\n\n# -n option is better but type hints refs are not found\n.PHONY: docs\ndocs:  ## build document\n\t@echo \"Sphinx build start.\"\n\t@cd docs && \\\n\tsphinx-build -q -E -W -j auto -b html . _build/html && \\\n\tcd ../\n\t@echo \"Sphinx build done.\"\n\n.PHONY: sphinx\nsphinx:  ## run document build server\n\t@echo \"### Sphinx Build Server Start ###\"\n\t@python docs/server.py\n\n.PHONY: spell\nspell:  ## run spell check on comments and docstring\n\t@pylint --disable all --enable spelling --spelling-dict en_US --spelling-private-dict-file spell.txt pyppeteer\n\n.PHONY: check\ncheck:  ## run flake8, mypy, pydocstyle, sphinx-build\n\t@doit --verbosity 1 --process 4 --parallel-type thread\n\n.PHONY: test\ntest: check green-cov  ## run style check and test\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.130859375,
          "content": "Pyppeteer\n=========\n\nPyppeteer has moved to [pyppeteer/pyppeteer](https://github.com/pyppeteer/pyppeteer)\n====================================================================================\n\n---\n\n[![PyPI](https://img.shields.io/pypi/v/pyppeteer.svg)](https://pypi.python.org/pypi/pyppeteer)\n[![PyPI version](https://img.shields.io/pypi/pyversions/pyppeteer.svg)](https://pypi.python.org/pypi/pyppeteer)\n[![Documentation](https://img.shields.io/badge/docs-latest-brightgreen.svg)](https://miyakogi.github.io/pyppeteer)\n[![Travis status](https://travis-ci.org/miyakogi/pyppeteer.svg)](https://travis-ci.org/miyakogi/pyppeteer)\n[![AppVeyor status](https://ci.appveyor.com/api/projects/status/nb53tkg9po8v1blk?svg=true)](https://ci.appveyor.com/project/miyakogi/pyppeteer)\n[![codecov](https://codecov.io/gh/miyakogi/pyppeteer/branch/master/graph/badge.svg)](https://codecov.io/gh/miyakogi/pyppeteer)\n\nUnofficial Python port of\n[puppeteer](https://github.com/GoogleChrome/puppeteer) JavaScript (headless)\nchrome/chromium browser automation library.\n\n* Free software: MIT license (including the work distributed under the Apache 2.0 license)\n* Documentation: https://miyakogi.github.io/pyppeteer\n\n## Installation\n\nPyppeteer requires python 3.6+.\n(experimentally supports python 3.5)\n\nInstall by pip from PyPI:\n\n```\npython3 -m pip install pyppeteer\n```\n\nOr install latest version from [github](https://github.com/miyakogi/pyppeteer):\n\n```\npython3 -m pip install -U git+https://github.com/miyakogi/pyppeteer.git@dev\n```\n\n## Usage\n\n> **Note**: When you run pyppeteer first time, it downloads a recent version of Chromium (~100MB).\n> If you don't prefer this behavior, run `pyppeteer-install` command before running scripts which uses pyppeteer.\n\n**Example**: open web page and take a screenshot.\n\n```py\nimport asyncio\nfrom pyppeteer import launch\n\nasync def main():\n    browser = await launch()\n    page = await browser.newPage()\n    await page.goto('http://example.com')\n    await page.screenshot({'path': 'example.png'})\n    await browser.close()\n\nasyncio.get_event_loop().run_until_complete(main())\n```\n\n**Example**: evaluate script on the page.\n\n```py\nimport asyncio\nfrom pyppeteer import launch\n\nasync def main():\n    browser = await launch()\n    page = await browser.newPage()\n    await page.goto('http://example.com')\n    await page.screenshot({'path': 'example.png'})\n\n    dimensions = await page.evaluate('''() => {\n        return {\n            width: document.documentElement.clientWidth,\n            height: document.documentElement.clientHeight,\n            deviceScaleFactor: window.devicePixelRatio,\n        }\n    }''')\n\n    print(dimensions)\n    # >>> {'width': 800, 'height': 600, 'deviceScaleFactor': 1}\n    await browser.close()\n\nasyncio.get_event_loop().run_until_complete(main())\n```\n\nPyppeteer has almost same API as puppeteer.\nMore APIs are listed in the\n[document](https://miyakogi.github.io/pyppeteer/reference.html).\n\n[Puppeteer's document](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#)\nand [troubleshooting](https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md) are also useful for pyppeteer users.\n\n## Differences between puppeteer and pyppeteer\n\nPyppeteer is to be as similar as puppeteer, but some differences between python\nand JavaScript make it difficult.\n\nThese are differences between puppeteer and pyppeteer.\n\n### Keyword arguments for options\n\nPuppeteer uses object (dictionary in python) for passing options to\nfunctions/methods. Pyppeteer accepts both dictionary and keyword arguments for\noptions.\n\nDictionary style option (similar to puppeteer):\n\n```python\nbrowser = await launch({'headless': True})\n```\n\nKeyword argument style option (more pythonic, isn't it?):\n\n```python\nbrowser = await launch(headless=True)\n```\n\n### Element selector method name (`$` -> `querySelector`)\n\nIn python, `$` is not usable for method name.\nSo pyppeteer uses\n`Page.querySelector()`/`Page.querySelectorAll()`/`Page.xpath()` instead of\n`Page.$()`/`Page.$$()`/`Page.$x()`. Pyppeteer also has shorthands for these\nmethods, `Page.J()`, `Page.JJ()`, and `Page.Jx()`.\n\n### Arguments of `Page.evaluate()` and `Page.querySelectorEval()`\n\nPuppeteer's version of `evaluate()` takes JavaScript raw function or string of\nJavaScript expression, but pyppeteer takes string of JavaScript. JavaScript\nstrings can be function or expression. Pyppeteer tries to automatically detect\nthe string is function or expression, but sometimes it fails. If expression\nstring is treated as function and error is raised, add `force_expr=True` option,\nwhich force pyppeteer to treat the string as expression.\n\nExample to get page content:\n\n```python\ncontent = await page.evaluate('document.body.textContent', force_expr=True)\n```\n\nExample to get element's inner text:\n\n```python\nelement = await page.querySelector('h1')\ntitle = await page.evaluate('(element) => element.textContent', element)\n```\n\n## Future Plan\n\n1. Catch up development of puppeteer\n    * Not intend to add original API which puppeteer does not have\n\n## Credits\n\nThis package was created with [Cookiecutter](https://github.com/audreyr/cookiecutter) and the [audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage) project template.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.2080078125,
          "content": "install:\n  - C:\\Python37\\python.exe -V\n  - C:\\Python37\\python.exe -m pip install -U pip setuptools\n  - C:\\Python37\\python.exe -m pip install tox\n\ntest_script:\n  - C:\\Python37\\python.exe -m tox -e py37\n\nbuild: off\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "dodo.py",
          "type": "blob",
          "size": 1.716796875,
          "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\"\"\"Doit task definitions.\"\"\"\n\nimport multiprocessing\n\nfrom doit.action import CmdAction\n\ncores = multiprocessing.cpu_count()\nDOIT_CONFIG = {\n    'default_tasks': [\n        'check',\n    ],\n    'continue': True,\n    'verbosity': 1,\n    'num_process': cores,\n}\n\n\ndef task_flake8():\n    \"\"\"Run flake8 check.\"\"\"\n    return {\n        'actions': ['flake8 setup.py pyppeteer tests'],\n    }\n\n\ndef task_mypy():\n    \"\"\"Run mypy check.\"\"\"\n    return {\n        'actions': ['mypy pyppeteer'],\n    }\n\n\ndef task_pydocstyle():\n    \"\"\"Run docstyle check.\"\"\"\n    return {\n        'actions': ['pydocstyle pyppeteer'],\n    }\n\n\ndef task_docs():\n    \"\"\"Build sphinx document.\"\"\"\n    return {\n        'actions': [\n            'sphinx-build -q -W -E -j auto -b html docs docs/_build/html',\n        ],\n    }\n\n\ndef task_readme():\n    \"\"\"Check long description for package.\"\"\"\n    return {\n        'actions': ['python setup.py check -r -s'],\n    }\n\n\ndef task_spell():\n    \"\"\"Check spelling of comments and docstrings.\"\"\"\n    return {\n        'actions': [\n            'pylint --disable all --enable spelling --spelling-dict en_US '\n            '--spelling-private-dict-file spell.txt pyppeteer'\n        ],\n    }\n\n\ndef task_check():\n    \"\"\"Run flake8/mypy/pydocstyle/docs/readme tasks.\"\"\"\n    return {\n        'actions': None,\n        'task_dep': ['flake8', 'mypy', 'pydocstyle', 'docs', 'readme']\n    }\n\n\ndef task_test():\n    \"\"\"Run pytest.\"\"\"\n    return {\n        'actions': [CmdAction(\n            'pytest -n {}'.format(cores // 2),\n            buffering=1,\n        )],\n        'verbosity': 2,\n    }\n\n\ndef task_all():\n    \"\"\"Run all tests and checks.\"\"\"\n    return {\n        'actions': None,\n        'task_dep': ['test', 'check'],\n    }\n"
        },
        {
          "name": "mypy.ini",
          "type": "blob",
          "size": 0.212890625,
          "content": "[mypy]\nstrict_optional = true\ndisallow_untyped_defs = true\ndisallow_untyped_calls = true\nfollow_imports = silent\nignore_missing_imports = true\nmypy_path = out\n\n[mypy-*/tests/*,*/docs/*,dodo,setup]\nignore_errors = true\n"
        },
        {
          "name": "pyppeteer",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.1748046875,
          "content": "-r requirements-docs.txt\n-r requirements-test.txt\n\nlivereload\nflake8\nmypy\npydocstyle\nreadme_renderer\ndoit\npytest\npytest-xdist\npylint\ngit+https://github.com/miyakogi/pyenchant.git\n"
        },
        {
          "name": "requirements-docs.txt",
          "type": "blob",
          "size": 0.0419921875,
          "content": "sphinx>=1.6,<1.8\nsphinxcontrib-asyncio\nm2r\n"
        },
        {
          "name": "requirements-test.txt",
          "type": "blob",
          "size": 0.017578125,
          "content": "syncer\ntornado>=5\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.4775390625,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom os import path\nfrom setuptools import setup\nimport sys\n\nbasedir = path.dirname(path.abspath(__file__))\nextra_args = {}\n\nif (3, 6) > sys.version_info >= (3, 5):\n    in_dir = path.join(basedir, 'pyppeteer')\n    out_dir = path.join(basedir, '.pyppeteer')\n    packages = ['pyppeteer']\n    package_dir = {'pyppeteer': '.pyppeteer'}\n    if not path.exists(out_dir):\n        if path.exists(in_dir):\n            try:\n                from py_backwards.compiler import compile_files\n            except ImportError:\n                import subprocess\n                subprocess.run(\n                    [sys.executable, '-m', 'pip', 'install', 'py-backwards']\n                )\n                from py_backwards.compiler import compile_files\n            target = (sys.version_info[0], sys.version_info[1])\n            compile_files(in_dir, out_dir, target)\n        else:\n            raise Exception('Could not find package directory')\nelse:\n    packages = ['pyppeteer']\n    package_dir = {'pyppeteer': 'pyppeteer'}\n\nreadme_file = path.join(basedir, 'README.md')\nwith open(readme_file) as f:\n    src = f.read()\n\ntry:\n    from m2r import M2R\n    readme = M2R()(src)\nexcept ImportError:\n    readme = src\n\nrequirements = [\n    'pyee<6',\n    'websockets',\n    'appdirs',\n    'urllib3<1.25',\n    'tqdm'\n]\n\ntest_requirements = [\n    'syncer',\n    'tornado>=5',\n]\n\nsetup(\n    name='pyppeteer',\n    version='0.0.25',\n    description=('Headless chrome/chromium automation library '\n                 '(unofficial port of puppeteer)'),\n    long_description=readme,\n\n    author=\"Hiroyuki Takagi\",\n    author_email='miyako.dev@gmail.com',\n    url='https://github.com/miyakogi/pyppeteer',\n\n    packages=packages,\n    package_dir=package_dir,\n    include_package_data=True,\n    install_requires=requirements,\n    entry_points={\n        'console_scripts': [\n            'pyppeteer-install = pyppeteer.command:install',\n        ],\n    },\n\n    license=\"MIT license\",\n    zip_safe=False,\n    keywords='pyppeteer',\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n    ],\n    python_requires='>=3.5',\n    test_suite='tests',\n    tests_require=test_requirements,\n    **extra_args\n)\n"
        },
        {
          "name": "spell.txt",
          "type": "blob",
          "size": 1.328125,
          "content": "abstracteventloop\naccessdenied\nack\naddressunreachable\napi\narg\nargs\narrowleft\nasync\nasyncio\nauth\nawaitable\nbeforeunload\nblockedbyclient\nblockedbyresponse\nbool\nconnectionaborted\nconnectionclosed\nconnectionfailed\nconnectionreset\nconnectionrefused\ncreateincognitobrowsercontext\ncsp\ncss\nctrl\ncustomargs\ndefaultargs\ndefaultdict\ndevtool\ndevtools\ndialog's\ndict\ndoctype\ndomcontentloaded\ndpr\ndumpio\nelementhandle\nemulatemedia\nendswith\nenv\neval\nevaluatehandle\neventsource\nexecutioncontext\ngoogle\ngoto\nhtml\nhttp\nhttps\niframe\nignoredefaultargs\ninnertext\ninternetdisconnected\nip\nisinstance\njpeg\njpg\njs\njson\njsonized\nkeya\nkeydown\nkeypress\nkeyup\nkillchrome\nkwargs\nlen\nlifecycle\nmousedown\nmousemove\nmouseup\nmsec\nmultimap\nnamenotresolved\nnewpage\nnoqa\noffline\npagefunction\nparams\npdf\npng\npopup\npx\npyee\npyppeteer\npyppeteer's\nqueryselector\nqueryselectorall\nqueryselectoralleval\nqueryselectoreval\nraf\nrecalc\nreq\nrequestfailed\nrequestfinished\nrequest's\nrst\nscreenshot\nscreenshots\nscrollable\nsetbypasscsp\nsetextrahttpheaders\nsetrequestinterception\nssl\nstartcsscoverage\nstartjscoverage\nstderr\nstdout\nstopcsscoverage\nstopjscoverage\nstr\nstylesheet\ntcp\ntexttrack\ntimedout\ntimeline\ntimestamp\ntouchend\ntouchstart\ntruthy\nurl\nusedbytes\nusername\nviewport\nwaitfornavigation\nwaitforrequest\nwaitforresponse\nwaitoptions\nwebkit\nwebpage\nwebsocket\nworkercreated\nworkerdestroyed\nwww\nxhr\nxpath\nzipfile\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.8583984375,
          "content": "[tox]\nenvlist = py{35,36,37},doit\n\n[testenv]\npassenv = DISPLAY CI HOME\nchangedir =\n  py35: {toxworkdir}\nrecreate =\n  py35: true\nwhitelist_externals =\n  py35: cp\ndeps =\n  py35,py36,py37: -rrequirements-test.txt\n  py37: coverage\ncommands =\n  pyppeteer-install\n  py35: cp -r {toxinidir}/tests {toxworkdir}\n  py35: python -m unittest discover {toxworkdir}\n  py36: python -m unittest discover\n  py37: coverage run -m unittest discover\n  py37: coverage report\n\n[testenv:doit]\ndeps =\n  doit\n  flake8\n  mypy\n  pydocstyle\n  readme_renderer\n  -rrequirements-docs.txt\ncommands =\n  doit\n\n[testenv:codecov]\npassenv = CI TRAVIS TRAVIS_*\ndeps = codecov\nskip_install = true\ncommands =\n  codecov\n\n\n[flake8]\nexclude = docs,.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.eggs,*.egg,out\nmax-complexity = 7\n\n[pydocstyle]\nignore = D105,D107,D203,D213,D402,D404\nmatch_dir = (?!(tmp|docs|ja_docs|tests|\\.)).*\n"
        }
      ]
    }
  ]
}