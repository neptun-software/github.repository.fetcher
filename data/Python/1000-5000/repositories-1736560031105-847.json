{
  "metadata": {
    "timestamp": 1736560031105,
    "page": 847,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Belval/TextRecognitionDataGenerator",
      "stars": 3363,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.140625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n.vscode/*\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.80859375,
          "content": "# We use Ubuntu as base image\nFROM ubuntu:22.04\n\nWORKDIR /app\n\n# Install dependencies\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install -y \\\n    git \\\n    locales \\\n    python3-pip \\\n    libsm6 \\\n    libfontconfig1 \\\n    libxrender1 \\\n    zlib1g-dev \\\n    libjpeg-dev \\\n    libpng-dev \\\n    libfreetype6-dev \\\n    libxext6 \\\n    libraqm-dev \\\n    virtualenv \\\n    libgl1-mesa-glx \\\n && rm -rf /var/lib/apt/lists/*\n\n# Set the locale\nRUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \\\n    locale-gen\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n\nRUN virtualenv --python python3 /env\nENV PATH=\"/env/bin:$PATH\"\nCOPY . /app/\n\nRUN pip install --upgrade pip\nRUN pip install codecov\n\nRUN python setup.py install\nRUN pip install -r requirements.txt\nRUN pip install pytest\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2017 Edouard Belval\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.16796875,
          "content": "include README.md\ninclude LICENSE\ninclude trdg/fonts/latin/*\ninclude trdg/fonts/cn/*\ninclude trdg/fonts/ja/*\ninclude trdg/images/*\ninclude trdg/dicts/*\ninclude trdg/texts/*"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.7578125,
          "content": "# TextRecognitionDataGenerator [![CircleCI](https://circleci.com/gh/Belval/TextRecognitionDataGenerator/tree/master.svg?style=svg)](https://circleci.com/gh/Belval/TextRecognitionDataGenerator/tree/master) [![PyPI version](https://badge.fury.io/py/trdg.svg)](https://badge.fury.io/py/trdg) [![codecov](https://codecov.io/gh/Belval/TextRecognitionDataGenerator/branch/master/graph/badge.svg)](https://codecov.io/gh/Belval/TextRecognitionDataGenerator) [![Documentation Status](https://readthedocs.org/projects/textrecognitiondatagenerator/badge/?version=latest)](https://textrecognitiondatagenerator.readthedocs.io/en/latest/?badge=latest)\n\nA synthetic data generator for text recognition\n\n## What is it for?\n\nGenerating text image samples to train an OCR software. Now supporting non-latin text! For a more thorough tutorial see [the official documentation](https://textrecognitiondatagenerator.readthedocs.io/en/latest/index.html).\n\n## What do I need to make it work?\n\nInstall the pypi package\n\n```\npip install trdg\n```\n\nAfterwards, you can use `trdg` from the CLI. I recommend using a virtualenv instead of installing with `sudo`.\n\nIf you want to add another language, you can clone the repository instead. Simply run `pip install -r requirements.txt`\n\n## Docker image\n\nIf you would rather not have to install anything to use TextRecognitionDataGenerator, you can pull the docker image.\n\n```\ndocker pull belval/trdg:latest\n\ndocker run -v /output/path/:/app/out/ -t belval/trdg:latest trdg [args]\n```\n\nThe path (`/output/path/`) must be absolute.\n\n## New\n- Add `--stroke_width` argument to set the width of the text stroke (Thank you [@SunHaozhe](https://github.com/SunHaozhe))\n- Add `--stroke_fill` argument to set the color of the text contour if stroke > 0 (Thank you [@SunHaozhe](https://github.com/SunHaozhe))\n- Add `--word_split` argument to split on word instead of per-character. This is useful for ligature-based languages\n- Add `--dict` argument to specify a custom dictionary (Thank you [@luh0907](https://github.com/luh0907))\n- Add `--font_dir` argument to specify the fonts to use\n- Add `--output_mask` to output character-level mask for each image\n- Add `--character_spacing` to control space between characters (in pixels)\n- Add python module\n- Add `--font` to use only one font for all the generated images (Thank you [@JulienCoutault](https://github.com/JulienCoutault)!)\n- Add `--fit` and `--margins` for finer layout control\n- Change the text orientation using the `-or` parameter\n- Specify text color range using `-tc '#000000,#FFFFFF'`, please note that the quotes are **necessary**\n- Add support for Simplified and Traditional Chinese\n\n## How does it work?\n\nWords will be randomly chosen from a dictionary of a specific language. Then an image of those words will be generated by using font, background, and modifications (skewing, blurring, etc.) as specified.\n\n### Basic (Python module)\n\nThe usage as a Python module is very similar to the CLI, but it is more flexible if you want to include it directly in your training pipeline, and will consume less space and memory. There are 4 generators that can be used.\n\n```py\nfrom trdg.generators import (\n    GeneratorFromDict,\n    GeneratorFromRandom,\n    GeneratorFromStrings,\n    GeneratorFromWikipedia,\n)\n\n# The generators use the same arguments as the CLI, only as parameters\ngenerator = GeneratorFromStrings(\n    ['Test1', 'Test2', 'Test3'],\n    blur=2,\n    random_blur=True\n)\n\nfor img, lbl in generator:\n    # Do something with the pillow images here.\n```\n\nYou can see the full class definition here:\n\n- [`GeneratorFromDict`](trdg/generators/from_dict.py)\n- [`GeneratorFromRandom`](trdg/generators/from_random.py)\n- [`GeneratorFromStrings`](trdg/generators/from_strings.py)\n- [`GeneratorFromWikipedia`](trdg/generators/from_wikipedia.py)\n\n### Basic (CLI)\n\n`trdg -c 1000 -w 5 -f 64`\n\nYou get 1,000 randomly generated images with random text on them like:\n\n![1](samples/1.jpg \"1\")\n![2](samples/2.jpg \"2\")\n![3](samples/3.jpg \"3\")\n![4](samples/4.jpg \"4\")\n![5](samples/5.jpg \"5\")\n\nBy default, they will be generated to `out/` in the current working directory.\n\n### Text skewing\n\nWhat if you want random skewing? Add `-k` and `-rk` (`trdg -c 1000 -w 5 -f 64 -k 5 -rk`)\n\n![6](samples/6.jpg \"6\")\n![7](samples/7.jpg \"7\")\n![8](samples/8.jpg \"8\")\n![9](samples/9.jpg \"9\")\n![10](samples/10.jpg \"10\")\n\n### Text distortion\nYou can also add distortion to the generated text with `-d` and `-do`\n\n![23](samples/24.jpg \"0\")\n![24](samples/25.jpg \"1\")\n![25](samples/26.jpg \"2\")\n\n### Text blurring\n\nBut scanned document usually aren't that clear are they? Add `-bl` and `-rbl` to get gaussian blur on the generated image with user-defined radius (here 0, 1, 2, 4):\n\n![11](samples/11.jpg \"0\")\n![12](samples/12.jpg \"1\")\n![13](samples/13.jpg \"2\")\n![14](samples/14.jpg \"4\")\n\n### Background\n\nMaybe you want another background? Add `-b` to define one of the three available backgrounds: gaussian noise (0), plain white (1), quasicrystal (2) or image (3).\n\n![15](samples/15.jpg \"0\")\n![16](samples/16.jpg \"1\")\n![17](samples/17.jpg \"2\")\n![23](samples/23.jpg \"3\")\n\nWhen using image background (3). A image from the images/ folder will be randomly selected and the text will be written on it.\n\n### Handwritten\n\nOr maybe you are working on an OCR for handwritten text? Add `-hw`! (Experimental)\n\n![18](samples/18.jpg \"0\")\n![19](samples/19.jpg \"1\")\n![20](samples/20.jpg \"2\")\n![21](samples/21.jpg \"3\")\n![22](samples/22.jpg \"4\")\n\nIt uses a Tensorflow model trained using [this excellent project](https://github.com/Grzego/handwriting-generation) by Grzego.\n\n**The project does not require TensorFlow to run if you aren't using this feature**\n\n### Dictionary\n\nThe text is chosen at random in a dictionary file (that can be found in the *dicts* folder) and drawn on a white background made with Gaussian noise. The resulting image is saved as [text]\\_[index].jpg\n\nThere are a lot of parameters that you can tune to get the results you want, therefore I recommend checking out `trdg -h` for more information.\n\n## Create images with Chinese text\n\nIt is simple! Just do `trdg -l cn -c 1000 -w 5`!\n\nGenerated texts come both in simplified and traditional Chinese scripts.\n\nTraditional:\n\n![27](samples/27.jpg \"0\")\n\nSimplified:\n\n![28](samples/28.jpg \"1\")\n\n## Create images with Japanese text \n\nIt is simple! Just do `trdg -l ja -c 1000 -w 5`!\n\nOutput \n\n![29](samples/29.jpg \"2\")\n\n\n## Add new fonts\n\nThe script picks a font at random from the *fonts* directory.\n\n| Directory | Languages |\n|:----|:-----|\n| fonts/latin | English, French, Spanish, German |\n| fonts/cn | Chinese |\n| fonts/ko | Korean |\n| fonts/ja | Japanese |\n| fonts/th | Thai |\n\nSimply add/remove fonts until you get the desired output.\n\nIf you want to add a new non-latin language, the amount of work is minimal.\n\n1. Create a new folder with your language [two-letters code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)\n2. Add a .ttf font in it\n3. Edit `run.py` to add an if statement in `load_fonts()`\n4. Add a text file in `dicts` with the same two-letters code\n5. Run the tool as you normally would but add `-l` with your two-letters code\n\nIt only supports .ttf for now.\n\n## Benchmarks\n\nNumber of images generated per second.\n\n- Intel Core i7-4710HQ @ 2.50Ghz + SSD (-c 1000 -w 1)\n    - `-t 1` : 363 img/s\n    - `-t 2` : 694 img/s\n    - `-t 4` : 1300 img/s\n    - `-t 8` : 1500 img/s\n- AMD Ryzen 7 1700 @ 4.0Ghz + SSD (-c 1000 -w 1)\n    - `-t 1` : 558 img/s\n    - `-t 2` : 1045 img/s\n    - `-t 4` : 2107 img/s\n    - `-t 8` : 3297 img/s\n\n## Contributing\n\n1. Create an issue describing the feature you'll be working on\n2. Code said feature\n3. Create a pull request\n\n## Feature request & issues\n\nIf anything is missing, unclear, or simply not working, open an issue on the repository.\n\n## What is left to do?\n- Better background generation\n- Better handwritten text generation\n- More customization parameters (mostly regarding background)\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.0390625,
          "content": "ignore:\n  - \"trdg/run.py\"\n  - \"tests.py\""
        },
        {
          "name": "custom",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements-hw.txt",
          "type": "blob",
          "size": 0.1796875,
          "content": "Pillow>=10.0.0\nnumpy>=1.16.4,<1.17\nrequests>=2.20.0\nopencv-python>=4.2.0.32\ntqdm>=4.23.0\nbeautifulsoup4>=4.6.0\ndiffimg==0.2.3\ntensorflow>=1.13.1,<1.14\nmatplotlib>=3.0.2\nseaborn>=0.9.0\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1396484375,
          "content": "Pillow>=10.0.0\nrequests>=2.20.0\nopencv-python>=4.2.0.32\ntqdm>=4.23.0\ndiffimg==0.2.3\narabic-reshaper==2.1.3\npython-bidi==0.4.2\nwikipedia>=1.4.0\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0380859375,
          "content": "[metadata]\ndescription-file = README.md"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.771484375,
          "content": "# Always prefer setuptools over distutils\nfrom setuptools import setup, find_packages\n\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\n\nwith open(path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\n    long_description = f.read()\n\nsetup(\n    name=\"trdg\",\n    version=\"1.8.0\",\n    description=\"TextRecognitionDataGenerator: A synthetic data generator for text recognition\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/Belval/TextRecognitionDataGenerator\",\n    author=\"Edouard Belval\",\n    author_email=\"edouard@belval.org\",\n    # Choose your license\n    license=\"MIT\",\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        #   3 - Alpha\n        #   4 - Beta\n        #   5 - Production/Stable\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    keywords=\"synthetic data text-recognition training-set-generator ocr dataset fake text\",\n    packages=find_packages(exclude=[\"contrib\", \"docs\", \"tests\"]),\n    include_package_data=True,\n    install_requires=[\n        \"pillow>=7.0.0\",\n        \"requests>=2.20.0\",\n        \"opencv-python>=4.2.0.32\",\n        \"tqdm>=4.23.0\",\n        \"wikipedia>=1.4.0\",\n        \"diffimg==0.2.3\",\n        \"arabic-reshaper==2.1.3\",\n        \"python-bidi==0.4.2\",\n    ],\n    entry_points={\n        \"console_scripts\": [\n            \"trdg=trdg.run:main\"\n        ],\n    },\n)\n"
        },
        {
          "name": "tests.py",
          "type": "blob",
          "size": 38.9365234375,
          "content": "import os\nimport sys\nimport unittest\nimport subprocess\nimport hashlib\nimport string\n\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), \"./trdg\")))\n\ntry:\n    os.mkdir(\"tests/out\")\nexcept:\n    pass\n\nfrom diffimg import diff\n\nfrom trdg.data_generator import FakeTextDataGenerator\nfrom trdg import background_generator\nfrom trdg.generators import (\n    GeneratorFromDict,\n    GeneratorFromRandom,\n    GeneratorFromStrings,\n    GeneratorFromWikipedia,\n)\nfrom trdg.string_generator import (\n    create_strings_from_file,\n    create_strings_from_dict,\n    create_strings_from_wikipedia,\n    create_strings_randomly,\n)\n\n\ndef empty_directory(path):\n    for f in os.listdir(path):\n        os.remove(os.path.join(path, f))\n\n\nclass Generators(unittest.TestCase):\n    def test_generator_from_dict(self):\n        generator = GeneratorFromDict()\n        i = 0\n        while i < 100:\n            img, lbl = next(generator)\n            self.assertTrue(img.size[1] == 32, \"Shape is not right\")\n            i += 1\n\n    def test_generator_from_random(self):\n        generator = GeneratorFromRandom()\n        i = 0\n        while i < 100:\n            img, lbl = next(generator)\n            self.assertTrue(img.size[1] == 32, \"Shape is not right\")\n            i += 1\n\n    def test_generator_from_strings(self):\n        generator = GeneratorFromStrings([\"TEST TEST TEST\"])\n        i = 0\n        while i < 100:\n            img, lbl = next(generator)\n            self.assertTrue(img.size[1] == 32, \"Shape is not right\")\n            i += 1\n\n    def test_generator_from_wikipedia(self):\n        generator = GeneratorFromWikipedia()\n        i = 0\n        while i < 100:\n            img, lbl = next(generator)\n            self.assertTrue(img.size[1] == 32, \"Shape is not right\")\n            i += 1\n\n    def test_generator_from_dict_stops(self):\n        generator = GeneratorFromDict(count=1)\n        next(generator)\n        self.assertRaises(StopIteration, generator.next)\n\n    def test_generator_from_random_stops(self):\n        generator = GeneratorFromRandom(count=1)\n        next(generator)\n        self.assertRaises(StopIteration, generator.next)\n\n    def test_generator_from_strings_stops(self):\n        generator = GeneratorFromStrings([\"TEST TEST TEST\"], count=1)\n        next(generator)\n        self.assertRaises(StopIteration, generator.next)\n\n    def test_generator_from_wikipedia_stops(self):\n        generator = GeneratorFromWikipedia(count=1)\n        next(generator)\n        self.assertRaises(StopIteration, generator.next)\n\n\nclass DataGenerator(unittest.TestCase):\n    def test_create_string_from_wikipedia(self):\n        \"\"\"\n            Test that the function returns different output if called twice.\n            (And that it doesn't throw of course)\n        \"\"\"\n\n        strings = create_strings_from_wikipedia(20, 2, \"en\")\n\n        self.assertTrue(\n            len(strings) == 2\n            and strings[0] != strings[1]\n            and len(strings[0].split(\" \")) >= 20\n            and len(strings[1].split(\" \")) >= 20\n        )\n\n    def test_create_string_from_file(self):\n        strings = create_strings_from_file(\"tests/test.txt\", 6)\n\n        self.assertTrue(\n            len(strings) == 6 and strings[0] != strings[1] and strings[0] == strings[3]\n        )\n\n    def test_create_strings_from_dict(self):\n        strings = create_strings_from_dict(\n            3, False, 2, [\"TEST\", \"TEST\", \"TEST\", \"TEST\"]\n        )\n\n        self.assertTrue(len(strings) == 2 and len(strings[0].split(\" \")) == 3)\n\n    def test_generate_data_with_format(self):\n        FakeTextDataGenerator.generate(\n            0,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            64,\n            \"jpg\",\n            0,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            0,\n            -1,\n            0,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            False,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/TEST TEST TEST_0.jpg\",\n                \"tests/expected_results/TEST TEST TEST_0.jpg\",\n                delete_diff_file=True,\n            ),\n            0.11\n        )\n\n        os.remove(\"tests/out/TEST TEST TEST_0.jpg\")\n\n    def test_generate_data_with_extension(self):\n        FakeTextDataGenerator.generate(\n            1,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            32,\n            \"png\",\n            0,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            0,\n            -1,\n            0,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            False,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/TEST TEST TEST_1.png\",\n                \"tests/expected_results/TEST TEST TEST_1.png\",\n                delete_diff_file=True,\n            ),\n            0.07\n        )\n\n        os.remove(\"tests/out/TEST TEST TEST_1.png\")\n\n    def test_generate_data_with_skew_angle(self):\n        FakeTextDataGenerator.generate(\n            2,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            64,\n            \"jpg\",\n            15,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            0,\n            -1,\n            0,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            False,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/TEST TEST TEST_2.jpg\",\n                \"tests/expected_results/TEST TEST TEST_2.jpg\",\n                delete_diff_file=True,\n            ),\n            0.05\n        )\n\n        os.remove(\"tests/out/TEST TEST TEST_2.jpg\")\n\n    def test_generate_data_with_blur(self):\n        FakeTextDataGenerator.generate(\n            3,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            64,\n            \"jpg\",\n            0,\n            False,\n            3,\n            False,\n            1,\n            0,\n            0,\n            False,\n            0,\n            -1,\n            0,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            False,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/TEST TEST TEST_3.jpg\",\n                \"tests/expected_results/TEST TEST TEST_3.jpg\",\n                delete_diff_file=True,\n            ),\n            0.06\n        )\n\n        os.remove(\"tests/out/TEST TEST TEST_3.jpg\")\n\n    def test_generate_data_with_sine_distorsion(self):\n        FakeTextDataGenerator.generate(\n            4,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            64,\n            \"jpg\",\n            0,\n            False,\n            3,\n            False,\n            1,\n            1,\n            2,\n            False,\n            0,\n            -1,\n            0,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            False,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/TEST TEST TEST_4.jpg\",\n                \"tests/expected_results/TEST TEST TEST_4.jpg\",\n                delete_diff_file=True,\n            ),\n            0.05\n        )\n\n        os.remove(\"tests/out/TEST TEST TEST_4.jpg\")\n\n    def test_generate_data_with_cosine_distorsion(self):\n        FakeTextDataGenerator.generate(\n            5,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            64,\n            \"jpg\",\n            0,\n            False,\n            3,\n            False,\n            1,\n            2,\n            2,\n            False,\n            0,\n            -1,\n            0,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            False,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/TEST TEST TEST_5.jpg\",\n                \"tests/expected_results/TEST TEST TEST_5.jpg\",\n                delete_diff_file=True,\n            ),\n            0.05\n        )\n\n        os.remove(\"tests/out/TEST TEST TEST_5.jpg\")\n\n    def test_generate_data_with_left_alignment(self):\n        FakeTextDataGenerator.generate(\n            6,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            64,\n            \"jpg\",\n            0,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            0,\n            600,\n            0,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            False,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/TEST TEST TEST_6.jpg\",\n                \"tests/expected_results/TEST TEST TEST_6.jpg\",\n                delete_diff_file=True,\n            ),\n            0.07\n        )\n\n        os.remove(\"tests/out/TEST TEST TEST_6.jpg\")\n\n    def test_generate_data_with_center_alignment(self):\n        FakeTextDataGenerator.generate(\n            7,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            64,\n            \"jpg\",\n            0,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            0,\n            800,\n            1,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            False,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/TEST TEST TEST_7.jpg\",\n                \"tests/expected_results/TEST TEST TEST_7.jpg\",\n                delete_diff_file=True,\n            ),\n            0.05\n        )\n\n        os.remove(\"tests/out/TEST TEST TEST_7.jpg\")\n\n    def test_generate_data_with_right_alignment(self):\n        FakeTextDataGenerator.generate(\n            8,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            64,\n            \"jpg\",\n            0,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            0,\n            1000,\n            2,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            False,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/TEST TEST TEST_8.jpg\",\n                \"tests/expected_results/TEST TEST TEST_8.jpg\",\n                delete_diff_file=True,\n            ),\n            0.05\n        )\n\n        os.remove(\"tests/out/TEST TEST TEST_8.jpg\")\n\n    def test_raise_if_handwritten_and_vertical(self):\n        try:\n            FakeTextDataGenerator.generate(\n                9,\n                \"TEST TEST TEST\",\n                \"tests/font.ttf\",\n                \"tests/out/\",\n                64,\n                \"jpg\",\n                0,\n                False,\n                0,\n                False,\n                1,\n                0,\n                0,\n                True,\n                0,\n                1000,\n                2,\n                \"#010101\",\n                1,\n                1,\n                0,\n                (5, 5, 5, 5),\n                0,\n                0,\n                False,\n                os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n            )\n            raise Exception(\"Vertical handwritten did not throw\")\n        except ValueError:\n            pass\n\n    def test_generate_vertical_text(self):\n        FakeTextDataGenerator.generate(\n            10,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            32,\n            \"jpg\",\n            0,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            0,\n            -1,\n            0,\n            \"#010101\",\n            1,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            False,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/TEST TEST TEST_10.jpg\",\n                \"tests/expected_results/TEST TEST TEST_10.jpg\",\n                delete_diff_file=True,\n            ),\n            0.05\n        )\n\n        os.remove(\"tests/out/TEST TEST TEST_10.jpg\")\n\n    def test_generate_horizontal_text_with_variable_space(self):\n        FakeTextDataGenerator.generate(\n            11,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            32,\n            \"jpg\",\n            0,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            0,\n            -1,\n            0,\n            \"#010101\",\n            0,\n            4,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            False,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/TEST TEST TEST_11.jpg\",\n                \"tests/expected_results/TEST TEST TEST_11.jpg\",\n                delete_diff_file=True,\n            ),\n            0.09\n        )\n\n        os.remove(\"tests/out/TEST TEST TEST_11.jpg\")\n\n    def test_generate_vertical_text_with_variable_space(self):\n        FakeTextDataGenerator.generate(\n            12,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            32,\n            \"jpg\",\n            0,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            0,\n            -1,\n            0,\n            \"#010101\",\n            1,\n            2,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            False,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/TEST TEST TEST_12.jpg\",\n                \"tests/expected_results/TEST TEST TEST_12.jpg\",\n                delete_diff_file=True,\n            ),\n            0.05\n        )\n\n        os.remove(\"tests/out/TEST TEST TEST_12.jpg\")\n\n    def test_generate_text_with_unknown_orientation(self):\n        try:\n            FakeTextDataGenerator.generate(\n                12,\n                \"TEST TEST TEST\",\n                \"tests/font.ttf\",\n                \"tests/out/\",\n                32,\n                \"jpg\",\n                0,\n                False,\n                0,\n                False,\n                1,\n                0,\n                0,\n                False,\n                0,\n                -1,\n                0,\n                \"#010101\",\n                100,\n                2,\n                0,\n                (5, 5, 5, 5),\n                0,\n                0,\n                False,\n                os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n            )\n            raise Exception(\"Unknown orientation did not throw\")\n        except ValueError:\n            pass\n\n    def test_generate_data_with_fit(self):\n        FakeTextDataGenerator.generate(\n            13,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            64,\n            \"jpg\",\n            0,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            0,\n            -1,\n            0,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (0, 0, 0, 0),\n            1,\n            0,\n            False,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/TEST TEST TEST_13.jpg\",\n                \"tests/expected_results/TEST TEST TEST_13.jpg\",\n                delete_diff_file=True,\n            ),\n            0.19\n        )\n\n        os.remove(\"tests/out/TEST TEST TEST_13.jpg\")\n\n    def test_generate_data_with_word_split(self):\n        FakeTextDataGenerator.generate(\n            14,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            64,\n            \"png\",\n            0,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            0,\n            -1,\n            0,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            True,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/TEST TEST TEST_14.png\",\n                \"tests/expected_results/TEST TEST TEST_14.png\",\n                delete_diff_file=True,\n            ),\n            0.05\n        )\n\n        os.remove(\"tests/out/TEST TEST TEST_14.png\")\n\n    def test_generate_data_with_first_name_format(self):\n        FakeTextDataGenerator.generate(\n            15,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            64,\n            \"png\",\n            0,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            0,\n            -1,\n            0,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            True,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/TEST TEST TEST_15.png\",\n                \"tests/expected_results/TEST TEST TEST_15.png\",\n                delete_diff_file=True,\n            ),\n            0.05\n        )\n\n        os.remove(\"tests/out/TEST TEST TEST_15.png\")\n\n    def test_generate_data_with_second_name_format(self):\n        FakeTextDataGenerator.generate(\n            16,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            64,\n            \"png\",\n            0,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            1,\n            -1,\n            0,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            True,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/16_TEST TEST TEST.png\",\n                \"tests/expected_results/16_TEST TEST TEST.png\",\n                delete_diff_file=True,\n            ),\n            0.05\n        )\n\n        os.remove(\"tests/out/16_TEST TEST TEST.png\")\n\n    def test_generate_data_with_third_name_format(self):\n        FakeTextDataGenerator.generate(\n            17,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            64,\n            \"png\",\n            0,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            2,\n            -1,\n            0,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            True,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/17.png\",\n                \"tests/expected_results/17.png\",\n                delete_diff_file=True,\n            ),\n            0.05\n        )\n\n        os.remove(\"tests/out/17.png\")\n\n    def test_generate_data_with_wrong_name_format(self):\n        FakeTextDataGenerator.generate(\n            18,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            64,\n            \"png\",\n            0,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            3,\n            -1,\n            0,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            True,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/TEST TEST TEST_18.png\",\n                \"tests/expected_results/TEST TEST TEST_18.png\",\n                delete_diff_file=True,\n            ),\n            0.05\n        )\n\n        os.remove(\"tests/out/TEST TEST TEST_18.png\")\n\n    def test_generate_data_with_quasicrystal_background_from_generate(self):\n        FakeTextDataGenerator.generate(\n            19,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            64,\n            \"png\",\n            0,\n            False,\n            0,\n            False,\n            2,\n            0,\n            0,\n            False,\n            0,\n            -1,\n            0,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            True,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        os.remove(\"tests/out/TEST TEST TEST_19.png\")\n\n    def test_raise_if_invalid_orientation(self):\n        try:\n            FakeTextDataGenerator.generate(\n                20,\n                \"TEST TEST TEST\",\n                \"tests/font.ttf\",\n                \"tests/out/\",\n                64,\n                \"jpg\",\n                0,\n                False,\n                0,\n                False,\n                1,\n                0,\n                0,\n                False,\n                0,\n                1000,\n                2,\n                \"#010101\",\n                3,\n                1,\n                0,\n                (5, 5, 5, 5),\n                0,\n                0,\n                False,\n                os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n            )\n            raise Exception(\"Invalid orientation did not throw\")\n        except ValueError:\n            pass\n\n    def test_generate_data_with_arabic_text(self):\n        FakeTextDataGenerator.generate(\n            21,\n            \"اختبار اختبار اختبار\",\n            \"tests/font_ar.ttf\",\n            \"tests/out/\",\n            64,\n            \"png\",\n            0,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            1,\n            -1,\n            0,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            True,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/21_اختبار اختبار اختبار.png\",\n                \"tests/expected_results/21_اختبار اختبار اختبار.png\",\n                delete_diff_file=True,\n            ),\n            0.05\n        )\n\n        os.remove(\"tests/out/21_اختبار اختبار اختبار.png\")\n\n    def test_generate_data_with_sorani_kurdish_text(self):\n        FakeTextDataGenerator.generate(\n            23,\n            \"تاقیکردنەوە تاقیکردنەوە تاقیکردنەوە\",\n            \"tests/font_ckb.ttf\",\n            \"tests/out/\",\n            64,\n            \"png\",\n            0,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            1,\n            -1,\n            0,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            True,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/23_تاقیکردنەوە تاقیکردنەوە تاقیکردنەوە.png\",\n                \"tests/expected_results/23_تاقیکردنەوە تاقیکردنەوە تاقیکردنەوە.png\",\n                delete_diff_file=True,\n            ),\n            0.05\n        )\n\n        os.remove(\"tests/out/23_تاقیکردنەوە تاقیکردنەوە تاقیکردنەوە.png\")\n\n    def test_generate_data_with_hindi_text(self):\n        FakeTextDataGenerator.generate(\n            22,\n            \"परीक्षा परीक्षा परीक्षा\",\n            \"tests/font_hi.ttf\",\n            \"tests/out/\",\n            64,\n            \"png\",\n            0,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            1,\n            -1,\n            0,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            True,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/22_परकष परकष परकष.png\",\n                \"tests/expected_results/22_परीक्षा परीक्षा परीक्षा.png\",\n                delete_diff_file=True,\n            ),\n            0.17\n        )\n\n        os.remove(\"tests/out/22_परकष परकष परकष.png\")\n\n    def test_generate_data_with_output_bounding_box(self):\n        FakeTextDataGenerator.generate(\n            21,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            64,\n            \"jpg\",\n            0,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            0,\n            -1,\n            0,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            False,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n            output_bboxes=1,\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/TEST TEST TEST_21.jpg\",\n                \"tests/expected_results/TEST TEST TEST_21.jpg\",\n                delete_diff_file=True,\n            ),\n            0.11\n        )\n\n        os.remove(\"tests/out/TEST TEST TEST_21.jpg\")\n        os.remove(\"tests/out/TEST TEST TEST_21_boxes.txt\")\n\n    def test_generate_data_with_tesseract_output_bounding_box(self):\n        FakeTextDataGenerator.generate(\n            22,\n            \"TEST TEST TEST\",\n            \"tests/font.ttf\",\n            \"tests/out/\",\n            64,\n            \"jpg\",\n            0,\n            False,\n            0,\n            False,\n            1,\n            0,\n            0,\n            False,\n            0,\n            -1,\n            0,\n            \"#010101\",\n            0,\n            1,\n            0,\n            (5, 5, 5, 5),\n            0,\n            0,\n            False,\n            os.path.join(os.path.split(os.path.realpath(__file__))[0], \"trdg/images\"),\n            output_bboxes=2,\n        )\n\n        self.assertLess(\n            diff(\n                \"tests/out/TEST TEST TEST_22.jpg\",\n                \"tests/expected_results/TEST TEST TEST_22.jpg\",\n                delete_diff_file=True,\n            ),\n            0.11\n        )\n\n        os.remove(\"tests/out/TEST TEST TEST_22.jpg\")\n        os.remove(\"tests/out/TEST TEST TEST_22.box\")\n\n    def test_generate_string_with_letters(self):\n        s = create_strings_randomly(1, False, 1, True, False, False, \"en\")[0]\n\n        self.assertTrue(all([l in string.ascii_letters for l in s]))\n\n    def test_generate_string_with_numbers(self):\n        s = create_strings_randomly(1, False, 1, False, True, False, \"en\")[0]\n\n        self.assertTrue(all([l in \"0123456789\" for l in s]))\n\n    def test_generate_string_with_symbols(self):\n        s = create_strings_randomly(1, False, 1, False, False, True, \"en\")[0]\n\n        self.assertTrue(all([l in \"!\\\"#$%&'()*+,-./:;?@[\\\\]^_`{|}~\" for l in s]))\n\n    def test_generate_chinese_string(self):\n        s = create_strings_randomly(1, False, 1, True, False, False, \"cn\")[0]\n\n        cn_chars = [chr(i) for i in range(19968, 40908)]\n\n        self.assertTrue(all([l in cn_chars for l in s]))\n\n    def test_generate_japanese_string(self):\n        s = create_strings_randomly(1, False, 1, True, False, False, \"ja\")[0]\n\n        ja_chars = [chr(i) for i in range(12288, 12543)] + [chr(i) for i in range(65280, 65519)] + [chr(i) for i in range(19968, 40908)]\n\n        self.assertTrue(all([l in ja_chars for l in s]))\n\n    def test_generate_data_with_white_background(self):\n        background_generator.plain_white(64, 128).convert(\"RGB\").save(\n            \"tests/out/white_background.jpg\"\n        )\n\n        self.assertTrue(\n            diff(\n                \"tests/out/white_background.jpg\",\n                \"tests/expected_results/white_background.jpg\",\n                delete_diff_file=True,\n            )\n            < 0.01\n        )\n\n        os.remove(\"tests/out/white_background.jpg\")\n\n    def test_generate_data_with_quasicrystal_background(self):\n        bkgd = background_generator.quasicrystal(64, 128)\n\n        self.assertTrue(len(bkgd.histogram()) > 20 and bkgd.size == (128, 64))\n\n\nclass CommandLineInterface(unittest.TestCase):\n    def test_output_dir(self):\n        args = [\"python3\", \"run.py\", \"-c\", \"1\", \"--output_dir\", \"../tests/out_2/\"]\n        subprocess.Popen(args, cwd=\"trdg/\").wait()\n        self.assertTrue(len(os.listdir(\"tests/out_2/\")) == 1)\n        empty_directory(\"tests/out_2/\")\n\n    def test_language_english(self):\n        args = [\n            \"python3\",\n            \"run.py\",\n            \"-l\",\n            \"en\",\n            \"-c\",\n            \"1\",\n            \"--output_dir\",\n            \"../tests/out/\",\n        ]\n        subprocess.Popen(args, cwd=\"trdg/\").wait()\n        self.assertTrue(len(os.listdir(\"tests/out/\")) == 1)\n        empty_directory(\"tests/out/\")\n\n    def test_language_french(self):\n        args = [\n            \"python3\",\n            \"run.py\",\n            \"-l\",\n            \"fr\",\n            \"-c\",\n            \"1\",\n            \"--output_dir\",\n            \"../tests/out/\",\n        ]\n        subprocess.Popen(args, cwd=\"trdg/\").wait()\n        self.assertTrue(len(os.listdir(\"tests/out/\")) == 1)\n        empty_directory(\"tests/out/\")\n\n    def test_language_spanish(self):\n        args = [\n            \"python3\",\n            \"run.py\",\n            \"-l\",\n            \"es\",\n            \"-c\",\n            \"1\",\n            \"--output_dir\",\n            \"../tests/out/\",\n        ]\n        subprocess.Popen(args, cwd=\"trdg/\").wait()\n        self.assertTrue(len(os.listdir(\"tests/out/\")) == 1)\n        empty_directory(\"tests/out/\")\n\n    def test_language_german(self):\n        args = [\n            \"python3\",\n            \"run.py\",\n            \"-l\",\n            \"de\",\n            \"-c\",\n            \"1\",\n            \"--output_dir\",\n            \"../tests/out/\",\n        ]\n        subprocess.Popen(args, cwd=\"trdg/\").wait()\n        self.assertTrue(len(os.listdir(\"tests/out/\")) == 1)\n        empty_directory(\"tests/out/\")\n\n    def test_language_chinese(self):\n        args = [\n            \"python3\",\n            \"run.py\",\n            \"-l\",\n            \"cn\",\n            \"-c\",\n            \"1\",\n            \"--output_dir\",\n            \"../tests/out/\",\n        ]\n        subprocess.Popen(args, cwd=\"trdg/\").wait()\n        self.assertTrue(len(os.listdir(\"tests/out/\")) == 1)\n        empty_directory(\"tests/out/\")\n\n    def test_count_parameter(self):\n        args = [\"python3\", \"run.py\", \"-c\", \"10\", \"--output_dir\", \"../tests/out/\"]\n        subprocess.Popen(args, cwd=\"trdg/\").wait()\n        self.assertTrue(len(os.listdir(\"tests/out/\")) == 10)\n        empty_directory(\"tests/out/\")\n\n    def test_random_sequences_letter_only(self):\n        args = [\n            \"python3\",\n            \"run.py\",\n            \"-rs\",\n            \"-let\",\n            \"-c\",\n            \"1\",\n            \"--output_dir\",\n            \"../tests/out/\",\n        ]\n        subprocess.Popen(args, cwd=\"trdg/\").wait()\n        self.assertTrue(\n            all(\n                [\n                    c in string.ascii_letters\n                    for f in os.listdir(\"tests/out/\")\n                    for c in f.split(\"_\")[0]\n                ]\n            )\n        )\n        empty_directory(\"tests/out/\")\n\n    def test_random_sequences_number_only(self):\n        args = [\n            \"python3\",\n            \"run.py\",\n            \"-rs\",\n            \"-num\",\n            \"-c\",\n            \"1\",\n            \"--output_dir\",\n            \"../tests/out/\",\n        ]\n        subprocess.Popen(args, cwd=\"trdg/\").wait()\n        self.assertTrue(\n            all(\n                [\n                    c in \"0123456789\"\n                    for f in os.listdir(\"tests/out/\")\n                    for c in f.split(\"_\")[0]\n                ]\n            )\n        )\n        empty_directory(\"tests/out/\")\n\n    def test_random_sequences_symbols_only(self):\n        args = [\n            \"python3\",\n            \"run.py\",\n            \"-rs\",\n            \"-sym\",\n            \"-c\",\n            \"1\",\n            \"--output_dir\",\n            \"../tests/out/\",\n        ]\n        subprocess.Popen(args, cwd=\"trdg/\").wait()\n        with open(\"tests/out/labels.txt\", \"r\") as f:\n            self.assertTrue(\n                all(\n                    [\n                        c in \"!\\\"#$%&'()*+,-./:;?@[\\\\]^_`{|}~\"\n                        for c in f.readline().split(\" \")[1][:-1]\n                    ]\n                )\n            )\n        empty_directory(\"tests/out/\")\n\n    def test_handwritten(self):\n        args = [\"python3\", \"run.py\", \"-c\", \"1\", \"--output_dir\", \"../tests/out/\"]\n        subprocess.Popen(args, cwd=\"trdg/\").wait()\n        self.assertTrue(len(os.listdir(\"tests/out/\")) == 1)\n        empty_directory(\"tests/out/\")\n\n    def test_personalfont(self):\n        args = [\n            \"python3\",\n            \"run.py\",\n            \"--font\",\n            \"fonts/latin/Aller_Bd.ttf\",\n            \"-c\",\n            \"1\",\n            \"--output_dir\",\n            \"../tests/out/\",\n        ]\n        subprocess.Popen(args, cwd=\"trdg/\").wait()\n        self.assertTrue(len(os.listdir(\"tests/out/\")) == 1)\n        empty_directory(\"tests/out/\")\n\n    def test_personalfont_unlocated(self):\n        args = [\n            \"python3\",\n            \"run.py\",\n            \"--font\",\n            \"fonts/latin/unlocatedFont.ttf\",\n            \"-c\",\n            \"1\",\n            \"--output_dir\",\n            \"../tests/out/\",\n        ]\n        subprocess.Popen(args, cwd=\"trdg/\").wait()\n        self.assertTrue(len(os.listdir(\"tests/out/\")) == 0)\n        empty_directory(\"tests/out/\")\n\n    def test_personalfont_directory(self):\n        args = [\n            \"python3\",\n            \"run.py\",\n            \"--font_dir\",\n            \"fonts/latin/\",\n            \"-c\",\n            \"1\",\n            \"--output_dir\",\n            \"../tests/out/\",\n        ]\n        subprocess.Popen(args, cwd=\"trdg/\").wait()\n        self.assertTrue(len(os.listdir(\"tests/out/\")) == 1)\n        empty_directory(\"tests/out/\")\n\n    def test_personalfont_directory_unlocated(self):\n        args = [\n            \"python3\",\n            \"run.py\",\n            \"--font_dir\",\n            \"fonts/void/\",\n            \"-c\",\n            \"1\",\n            \"--output_dir\",\n            \"../tests/out/\",\n        ]\n        subprocess.Popen(args, cwd=\"trdg/\").wait()\n        self.assertTrue(len(os.listdir(\"tests/out/\")) == 0)\n        empty_directory(\"tests/out/\")\n\n    def test_personaldict(self):\n        args = [\n            \"python3\",\n            \"run.py\",\n            \"--dict\",\n            \"dicts/en.txt\",\n            \"-c\",\n            \"1\",\n            \"--output_dir\",\n            \"../tests/out/\",\n        ]\n        subprocess.Popen(args, cwd=\"trdg/\").wait()\n        self.assertTrue(len(os.listdir(\"tests/out/\")) == 1)\n        empty_directory(\"tests/out/\")\n\n    def test_personaldict_unlocated(self):\n        args = [\n            \"python3\",\n            \"run.py\",\n            \"--dict\",\n            \"dicts/unlocatedDict.txt\",\n            \"-c\",\n            \"1\",\n            \"--output_dir\",\n            \"../tests/out/\",\n        ]\n        subprocess.Popen(args, cwd=\"trdg/\").wait()\n        self.assertTrue(len(os.listdir(\"tests/out/\")) == 0)\n        empty_directory(\"tests/out/\")\n\n    def test_first_name_format(self):\n        args = [\n            \"python3\",\n            \"run.py\",\n            \"--dict\",\n            \"dicts/unlocatedDict.txt\",\n            \"-c\",\n            \"1\",\n            \"--output_dir\",\n            \"../tests/out/\",\n        ]\n        subprocess.Popen(args, cwd=\"trdg/\").wait()\n        self.assertTrue(len(os.listdir(\"tests/out/\")) == 0)\n        empty_directory(\"tests/out/\")\n\n\n#    def test_word_count(self):\n#        args = ['python3', 'run.py', '-c', '1', '-w', '5']\n#        subprocess.Popen(args, cwd=\"trdg/\").wait()\n#        self.assertTrue(False)\n#        empty_directory('tests/out/')\n#\n#    def test_extension_jpg(self):\n#        args = ['python3', 'run.py', '-c', '1', '-e', 'jpg']\n#        subprocess.Popen(args, cwd=\"trdg/\").wait()\n#        self.assertTrue(False)\n#        empty_directory('tests/out/')\n#\n#    def test_extension_png(self):\n#        args = ['python3', 'run.py', '-c', '1', '-e', 'png']\n#        subprocess.Popen(args, cwd=\"trdg/\").wait()\n#        self.assertTrue(False)\n#        empty_directory('tests/out/')\n#\n#    def test_name_format_0(self):\n#        args = ['python3', 'run.py', '-c', '1', '-na', '0']\n#        subprocess.Popen(args, cwd=\"trdg/\").wait()\n#        self.assertTrue(False)\n#        empty_directory('tests/out/')\n#\n#    def test_name_format_1(self):\n#        args = ['python3', 'run.py', '-c', '1', '-na', '1']\n#        subprocess.Popen(args, cwd=\"trdg/\").wait()\n#        self.assertTrue(False)\n#        empty_directory('tests/out/')\n#\n#    def test_name_format_2(self):\n#        args = ['python3', 'run.py', '-c', '1', '-na', '2']\n#        subprocess.Popen(args, cwd=\"trdg/\").wait()\n#        self.assertTrue(False)\n#        empty_directory('tests/out/')\n\nif __name__ == \"__main__\":\n    unittest.main()\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "trdg",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}