{
  "metadata": {
    "timestamp": 1736559486411,
    "page": 57,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "JakeWharton/pidcat",
      "stars": 4848,
      "defaultBranch": "master",
      "files": [
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.7958984375,
          "content": "Change Log\n==========\n\nVersion 2.1.0 *(2016-09-07)*\n----------------------------\n\n * New: Explicitly run `adb` in 'brief' mode to ensure proper parsing.\n * New: `-a` / `--all` flag shows all logs.\n * Fix: Setting a tag width to 0 now correctly removes tags.\n\n\nVersion 2.0.0 *(2015-05-25)*\n----------------------------\n\n * New: Display package and process name in birth & death messages.\n * New: Process can be matched in addition to package. For example `com.android.chrome` will match\n   all of Chrome's processes, `com.android.chrome:` will match only its main process, and\n   `com.android.chrome:sandboxed_process1` will match that specific process name.\n * New: `-c` option clears log before reading logs.\n * New: If data is piped to `pidcat` it will be used as the log source instead of `adb`.\n * New: `-t` / `--tag` option allows filtering by tag name (regex supported).\n * New: `-i` / `--ignore-tag` option allows filtering out tags from the logs by name (regex supported).\n * New: `--version` option reports Pidcat's version.\n * New: Obtain unknown process IDs of currently-running apps.\n * New: `--current` option uses the package of the currently visible app for filtering.\n * New: Bash completion support for package names and device names. Requires manual installation of\n   file in `bash_completion.d/`.\n * Fix: Properly match process birth & death from secondary processes.\n * Fix: Support leading spaces in PID numbers.\n * Fix: Default maximum tag length is now 23 (Android's maximum length).\n * Fix: Properly parse Android 5.1+ birth & death messages.\n\n\nVersion 1.4.1 *(2014-01-09)*\n----------------------------\n\n * Fix: Ignore manufacturer-added invalid tag levels.\n\n\nVersion 1.4.0 *(2013-10-12)*\n----------------------------\n\n * Add '--always-display-tags' argument for improved grepping.\n * Ignore bad UTF-8 data.\n * Replace tab characters in log message with four spaces.\n * Package name is now optional.\n\n\nVersion 1.3.1 *(2013-07-12)*\n----------------------------\n\n * Add fatal to log level filtering.\n * Add '-e' and '-d' arguments for quickly selecting the emulator or device.\n * Improve removal of 'nativeGetEnabledTags' log spam.\n\n\nVersion 1.3.0 *(2013-06-19)*\n----------------------------\n\n * Add support for Python 3.\n * Add '-s' argument for specifying device serial.\n * UTF-8 decode log messages.\n\n\nVersion 1.2.1 *(2013-06-14)*\n----------------------------\n\n * Add support for 'fatal' log level.\n\n\nVersion 1.2.0 *(2013-06-13)*\n----------------------------\n\n * Allow multiple packages to be specified.\n * Add argument to filter output based on log level.\n\n\nVersion 1.1.0 *(2013-06-12)*\n----------------------------\n\n * De-duplicate tag name in output.\n * Color strict mode violations and optionally GC messages.\n * Support multiple processes for a package.\n\n\nVersion 1.0.0 *(2013-06-11)*\n----------------------------\n\nInitial version.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.1162109375,
          "content": "PID Cat\n=======\n\nAn update to Jeff Sharkey's excellent [logcat color script][1] which only shows\nlog entries for processes from a specific application package.\n\nDuring application development you often want to only display log messages\ncoming from your app. Unfortunately, because the process ID changes every time\nyou deploy to the phone it becomes a challenge to grep for the right thing.\n\nThis script solves that problem by filtering by application package. Supply the\ntarget package as the sole argument to the python script and enjoy a more\nconvenient development process.\n\n    pidcat com.oprah.bees.android\n\n\nHere is an example of the output when running for the Google Plus app:\n\n![Example screen](screen.png)\n\n\nInstall\n-------\n\nGet the script:\n\n *  OS X: Use [Homebrew][2].\n\n         brew install pidcat\n\n    If you need to install the latest development version\n\n        brew unlink pidcat\n        brew install --HEAD pidcat\n\n * Arch Linux : Install the package called `pidcat-git` from the [AUR][4].\n\n * Others: Download the `pidcat.py` and place it on your PATH.\n\n\nMake sure that `adb` from the [Android SDK][3] is on your PATH. This script will\nnot work unless this is that case. That means, when you type `adb` and press\nenter into your terminal something actually happens.\n\nTo include `adb` and other android tools on your path:\n\n    export PATH=$PATH:<path to Android SDK>/platform-tools\n    export PATH=$PATH:<path to Android SDK>/tools\n\nInclude these lines in your `.bashrc` or `.zshrc`.\n\n*Note:* `<path to Android SDK>` should be absolute and not relative.\n\n`pidcat` requires at least version 8.30 of `coreutils`. Ubuntu 20.04 LTS already ships\nwith it, for 18.04 and below, `coreutils` can be upgraded from the `focal` repo by running\nthe following:\n\n```shell\nsudo add-apt-repository 'deb http://archive.ubuntu.com/ubuntu focal main restricted universe multiverse'\nsudo apt-get update\nsudo apt-get -t focal install coreutils\n```\n\n [1]: http://jsharkey.org/blog/2009/04/22/modifying-the-android-logcat-stream-for-full-color-debugging/\n [2]: http://brew.sh\n [3]: http://developer.android.com/sdk/\n [4]: https://aur.archlinux.org/packages/pidcat-git/\n"
        },
        {
          "name": "bash_completion.d",
          "type": "tree",
          "content": null
        },
        {
          "name": "pidcat.py",
          "type": "blob",
          "size": 12.5009765625,
          "content": "#!/usr/bin/env -S python -u\n\n'''\nCopyright 2009, The Android Open Source Project\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'''\n\n# Script to highlight adb logcat output for console\n# Originally written by Jeff Sharkey, http://jsharkey.org/\n# Piping detection and popen() added by other Android team members\n# Package filtering and output improvements by Jake Wharton, http://jakewharton.com\n\nimport argparse\nimport sys\nimport re\nimport subprocess\nfrom subprocess import PIPE\n\n__version__ = '2.1.0'\n\nLOG_LEVELS = 'VDIWEF'\nLOG_LEVELS_MAP = dict([(LOG_LEVELS[i], i) for i in range(len(LOG_LEVELS))])\nparser = argparse.ArgumentParser(description='Filter logcat by package name')\nparser.add_argument('package', nargs='*', help='Application package name(s)')\nparser.add_argument('-w', '--tag-width', metavar='N', dest='tag_width', type=int, default=23, help='Width of log tag')\nparser.add_argument('-l', '--min-level', dest='min_level', type=str, choices=LOG_LEVELS+LOG_LEVELS.lower(), default='V', help='Minimum level to be displayed')\nparser.add_argument('--color-gc', dest='color_gc', action='store_true', help='Color garbage collection')\nparser.add_argument('--always-display-tags', dest='always_tags', action='store_true',help='Always display the tag name')\nparser.add_argument('--current', dest='current_app', action='store_true',help='Filter logcat by current running app')\nparser.add_argument('-s', '--serial', dest='device_serial', help='Device serial number (adb -s option)')\nparser.add_argument('-d', '--device', dest='use_device', action='store_true', help='Use first device for log input (adb -d option)')\nparser.add_argument('-e', '--emulator', dest='use_emulator', action='store_true', help='Use first emulator for log input (adb -e option)')\nparser.add_argument('-c', '--clear', dest='clear_logcat', action='store_true', help='Clear the entire log before running')\nparser.add_argument('-t', '--tag', dest='tag', action='append', help='Filter output by specified tag(s)')\nparser.add_argument('-i', '--ignore-tag', dest='ignored_tag', action='append', help='Filter output by ignoring specified tag(s)')\nparser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__, help='Print the version number and exit')\nparser.add_argument('-a', '--all', dest='all', action='store_true', default=False, help='Print all log messages')\n\nargs = parser.parse_args()\nmin_level = LOG_LEVELS_MAP[args.min_level.upper()]\n\npackage = args.package\n\nbase_adb_command = ['adb']\nif args.device_serial:\n  base_adb_command.extend(['-s', args.device_serial])\nif args.use_device:\n  base_adb_command.append('-d')\nif args.use_emulator:\n  base_adb_command.append('-e')\n\nif args.current_app:\n  system_dump_command = base_adb_command + [\"shell\", \"dumpsys\", \"activity\", \"activities\"]\n  system_dump = subprocess.Popen(system_dump_command, stdout=PIPE, stderr=PIPE).communicate()[0]\n  running_package_name = re.search(\".*TaskRecord.*A[= ]([^ ^}]*)\", str(system_dump)).group(1)\n  package.append(running_package_name)\n\nif len(package) == 0:\n  args.all = True\n\n# Store the names of packages for which to match all processes.\ncatchall_package = list(filter(lambda package: package.find(\":\") == -1, package))\n# Store the name of processes to match exactly.\nnamed_processes = list(filter(lambda package: package.find(\":\") != -1, package))\n# Convert default process names from <package>: (cli notation) to <package> (android notation) in the exact names match group.\nnamed_processes = map(lambda package: package if package.find(\":\") != len(package) - 1 else package[:-1], named_processes)\n\nheader_size = args.tag_width + 1 + 3 + 1 # space, level, space\n\nstdout_isatty = sys.stdout.isatty()\n\nwidth = -1\ntry:\n  # Get the current terminal width\n  import fcntl, termios, struct\n  h, width = struct.unpack('hh', fcntl.ioctl(0, termios.TIOCGWINSZ, struct.pack('hh', 0, 0)))\nexcept:\n  pass\n\nBLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE = range(8)\n\nRESET = '\\033[0m'\n\ndef termcolor(fg=None, bg=None):\n  codes = []\n  if fg is not None: codes.append('3%d' % fg)\n  if bg is not None: codes.append('10%d' % bg)\n  return '\\033[%sm' % ';'.join(codes) if codes else ''\n\ndef colorize(message, fg=None, bg=None):\n  return termcolor(fg, bg) + message + RESET if stdout_isatty else message\n\ndef indent_wrap(message):\n  if width == -1:\n    return message\n  message = message.replace('\\t', '    ')\n  wrap_area = width - header_size\n  messagebuf = ''\n  current = 0\n  while current < len(message):\n    next = min(current + wrap_area, len(message))\n    messagebuf += message[current:next]\n    if next < len(message):\n      messagebuf += '\\n'\n      messagebuf += ' ' * header_size\n    current = next\n  return messagebuf\n\n\nLAST_USED = [RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN]\nKNOWN_TAGS = {\n  'dalvikvm': WHITE,\n  'Process': WHITE,\n  'ActivityManager': WHITE,\n  'ActivityThread': WHITE,\n  'AndroidRuntime': CYAN,\n  'jdwp': WHITE,\n  'StrictMode': WHITE,\n  'DEBUG': YELLOW,\n}\n\ndef allocate_color(tag):\n  # this will allocate a unique format for the given tag\n  # since we dont have very many colors, we always keep track of the LRU\n  if tag not in KNOWN_TAGS:\n    KNOWN_TAGS[tag] = LAST_USED[0]\n  color = KNOWN_TAGS[tag]\n  if color in LAST_USED:\n    LAST_USED.remove(color)\n    LAST_USED.append(color)\n  return color\n\n\nRULES = {\n  # StrictMode policy violation; ~duration=319 ms: android.os.StrictMode$StrictModeDiskWriteViolation: policy=31 violation=1\n  re.compile(r'^(StrictMode policy violation)(; ~duration=)(\\d+ ms)')\n    : r'%s\\1%s\\2%s\\3%s' % (termcolor(RED), RESET, termcolor(YELLOW), RESET),\n}\n\n# Only enable GC coloring if the user opted-in\nif args.color_gc:\n  # GC_CONCURRENT freed 3617K, 29% free 20525K/28648K, paused 4ms+5ms, total 85ms\n  key = re.compile(r'^(GC_(?:CONCURRENT|FOR_M?ALLOC|EXTERNAL_ALLOC|EXPLICIT) )(freed <?\\d+.)(, \\d+\\% free \\d+./\\d+., )(paused \\d+ms(?:\\+\\d+ms)?)')\n  val = r'\\1%s\\2%s\\3%s\\4%s' % (termcolor(GREEN), RESET, termcolor(YELLOW), RESET)\n\n  RULES[key] = val\n\n\nTAGTYPES = {\n  'V': colorize(' V ', fg=WHITE, bg=BLACK),\n  'D': colorize(' D ', fg=BLACK, bg=BLUE),\n  'I': colorize(' I ', fg=BLACK, bg=GREEN),\n  'W': colorize(' W ', fg=BLACK, bg=YELLOW),\n  'E': colorize(' E ', fg=BLACK, bg=RED),\n  'F': colorize(' F ', fg=BLACK, bg=RED),\n}\n\nPID_LINE = re.compile(r'^\\w+\\s+(\\w+)\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w\\s([\\w|\\.|\\/]+)$')\nPID_START = re.compile(r'^.*: Start proc ([a-zA-Z0-9._:]+) for ([a-z]+ [^:]+): pid=(\\d+) uid=(\\d+) gids=(.*)$')\nPID_START_5_1 = re.compile(r'^.*: Start proc (\\d+):([a-zA-Z0-9._:]+)/[a-z0-9]+ for (.*)$')\nPID_START_DALVIK = re.compile(r'^E/dalvikvm\\(\\s*(\\d+)\\): >>>>> ([a-zA-Z0-9._:]+) \\[ userId:0 \\| appId:(\\d+) \\]$')\nPID_KILL  = re.compile(r'^Killing (\\d+):([a-zA-Z0-9._:]+)/[^:]+: (.*)$')\nPID_LEAVE = re.compile(r'^No longer want ([a-zA-Z0-9._:]+) \\(pid (\\d+)\\): .*$')\nPID_DEATH = re.compile(r'^Process ([a-zA-Z0-9._:]+) \\(pid (\\d+)\\) has died.?$')\nLOG_LINE  = re.compile(r'^([A-Z])/(.+?)\\( *(\\d+)\\): (.*?)$')\nBUG_LINE  = re.compile(r'.*nativeGetEnabledTags.*')\nBACKTRACE_LINE = re.compile(r'^#(.*?)pc\\s(.*?)$')\n\nadb_command = base_adb_command[:]\nadb_command.append('logcat')\nadb_command.extend(['-v', 'brief'])\n\n# Clear log before starting logcat\nif args.clear_logcat:\n  adb_clear_command = list(adb_command)\n  adb_clear_command.append('-c')\n  adb_clear = subprocess.Popen(adb_clear_command)\n\n  while adb_clear.poll() is None:\n    pass\n\n# This is a ducktype of the subprocess.Popen object\nclass FakeStdinProcess():\n  def __init__(self):\n    self.stdout = sys.stdin\n  def poll(self):\n    return None\n\nif sys.stdin.isatty():\n  adb = subprocess.Popen(adb_command, stdin=PIPE, stdout=PIPE)\nelse:\n  adb = FakeStdinProcess()\npids = set()\nlast_tag = None\napp_pid = None\n\ndef match_packages(token):\n  if len(package) == 0:\n    return True\n  if token in named_processes:\n    return True\n  index = token.find(':')\n  return (token in catchall_package) if index == -1 else (token[:index] in catchall_package)\n\ndef parse_death(tag, message):\n  if tag != 'ActivityManager':\n    return None, None\n  kill = PID_KILL.match(message)\n  if kill:\n    pid = kill.group(1)\n    package_line = kill.group(2)\n    if match_packages(package_line) and pid in pids:\n      return pid, package_line\n  leave = PID_LEAVE.match(message)\n  if leave:\n    pid = leave.group(2)\n    package_line = leave.group(1)\n    if match_packages(package_line) and pid in pids:\n      return pid, package_line\n  death = PID_DEATH.match(message)\n  if death:\n    pid = death.group(2)\n    package_line = death.group(1)\n    if match_packages(package_line) and pid in pids:\n      return pid, package_line\n  return None, None\n\ndef parse_start_proc(line):\n  start = PID_START_5_1.match(line)\n  if start is not None:\n    line_pid, line_package, target = start.groups()\n    return line_package, target, line_pid, '', ''\n  start = PID_START.match(line)\n  if start is not None:\n    line_package, target, line_pid, line_uid, line_gids = start.groups()\n    return line_package, target, line_pid, line_uid, line_gids\n  start = PID_START_DALVIK.match(line)\n  if start is not None:\n    line_pid, line_package, line_uid = start.groups()\n    return line_package, '', line_pid, line_uid, ''\n  return None\n\ndef tag_in_tags_regex(tag, tags):\n  return any(re.match(r'^' + t + r'$', tag) for t in map(str.strip, tags))\n\nps_command = base_adb_command + ['shell', 'ps']\nps_pid = subprocess.Popen(ps_command, stdin=PIPE, stdout=PIPE, stderr=PIPE)\nwhile True:\n  try:\n    line = ps_pid.stdout.readline().decode('utf-8', 'replace').strip()\n  except KeyboardInterrupt:\n    break\n  if len(line) == 0:\n    break\n\n  pid_match = PID_LINE.match(line)\n  if pid_match is not None:\n    pid = pid_match.group(1)\n    proc = pid_match.group(2)\n    if proc in catchall_package:\n      seen_pids = True\n      pids.add(pid)\n\nwhile adb.poll() is None:\n  try:\n    line = adb.stdout.readline().decode('utf-8', 'replace').strip()\n  except KeyboardInterrupt:\n    break\n  if len(line) == 0:\n    break\n\n  bug_line = BUG_LINE.match(line)\n  if bug_line is not None:\n    continue\n\n  log_line = LOG_LINE.match(line)\n  if log_line is None:\n    continue\n\n  level, tag, owner, message = log_line.groups()\n  tag = tag.strip()\n  start = parse_start_proc(line)\n  if start:\n    line_package, target, line_pid, line_uid, line_gids = start\n    if match_packages(line_package):\n      pids.add(line_pid)\n\n      app_pid = line_pid\n\n      linebuf  = '\\n'\n      linebuf += colorize(' ' * (header_size - 1), bg=WHITE)\n      linebuf += indent_wrap(' Process %s created for %s\\n' % (line_package, target))\n      linebuf += colorize(' ' * (header_size - 1), bg=WHITE)\n      linebuf += ' PID: %s   UID: %s   GIDs: %s' % (line_pid, line_uid, line_gids)\n      linebuf += '\\n'\n      print(linebuf)\n      last_tag = None # Ensure next log gets a tag printed\n\n  dead_pid, dead_pname = parse_death(tag, message)\n  if dead_pid:\n    pids.remove(dead_pid)\n    linebuf  = '\\n'\n    linebuf += colorize(' ' * (header_size - 1), bg=RED)\n    linebuf += ' Process %s (PID: %s) ended' % (dead_pname, dead_pid)\n    linebuf += '\\n'\n    print(linebuf)\n    last_tag = None # Ensure next log gets a tag printed\n\n  # Make sure the backtrace is printed after a native crash\n  if tag == 'DEBUG':\n    bt_line = BACKTRACE_LINE.match(message.lstrip())\n    if bt_line is not None:\n      message = message.lstrip()\n      owner = app_pid\n\n  if not args.all and owner not in pids:\n    continue\n  if level in LOG_LEVELS_MAP and LOG_LEVELS_MAP[level] < min_level:\n    continue\n  if args.ignored_tag and tag_in_tags_regex(tag, args.ignored_tag):\n    continue\n  if args.tag and not tag_in_tags_regex(tag, args.tag):\n    continue\n\n  linebuf = ''\n\n  if args.tag_width > 0:\n    # right-align tag title and allocate color if needed\n    if tag != last_tag or args.always_tags:\n      last_tag = tag\n      color = allocate_color(tag)\n      tag = tag[-args.tag_width:].rjust(args.tag_width)\n      linebuf += colorize(tag, fg=color)\n    else:\n      linebuf += ' ' * args.tag_width\n    linebuf += ' '\n\n  # write out level colored edge\n  if level in TAGTYPES:\n    linebuf += TAGTYPES[level]\n  else:\n    linebuf += ' ' + level + ' '\n  linebuf += ' '\n\n  # format tag message using rules\n  for matcher in RULES:\n    replace = RULES[matcher]\n    message = matcher.sub(replace, message)\n\n  linebuf += indent_wrap(message)\n  print(linebuf.encode('utf-8'))\n"
        },
        {
          "name": "screen.png",
          "type": "blob",
          "size": 738.4326171875,
          "content": null
        },
        {
          "name": "zsh-completion",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}