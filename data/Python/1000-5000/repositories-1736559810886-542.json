{
  "metadata": {
    "timestamp": 1736559810886,
    "page": 542,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rom1504/img2dataset",
      "stars": 3837,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.142578125,
          "content": "*.egg-info\n.vscode\n.env\noutput_folder\nmyimglist.txt\n__pycache__\n.envtest\nbench\ntest_folder\n.coverage*\n.env*\nwandb\n*.pex\n.pexing\nbuild\n.hypothesis\n"
        },
        {
          "name": ".gitpod.DockerFile",
          "type": "blob",
          "size": 0.0986328125,
          "content": "FROM gitpod/workspace-full:latest\n\nRUN sudo apt-get update && sudo apt-get install -y python3-opencv\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.0322265625,
          "content": "image:\n  file: .gitpod.DockerFile"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 8.32421875,
          "content": "[MASTER]\n\n# Specify a configuration file.\n#rcfile=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Add files or directories to the blacklist. They should be base names, not\n# paths.\nignore=CVS\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n\n[MESSAGES CONTROL]\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time. See also the \"--disable\" option for examples.\nenable=indexing-exception,old-raise-syntax\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once).You can also use \"--disable=all\" to\n# disable everything first and then reenable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use\"--disable=all --enable=classes\n# --disable=W\"\ndisable=design,similarities,no-self-use,attribute-defined-outside-init,locally-disabled,star-args,pointless-except,bad-option-value,global-statement,fixme,suppressed-message,useless-suppression,locally-enabled,no-member,no-name-in-module,import-error,unsubscriptable-object,unbalanced-tuple-unpacking,undefined-variable,not-context-manager,no-else-return,wrong-import-order,unnecessary-pass,logging-fstring-interpolation,logging-format-interpolation,C0330\n\n\n[REPORTS]\n\n# Set the output format. Available formats are text, parseable, colorized, msvs\n# (visual studio) and html. You can also give a reporter class, eg\n# mypackage.mymodule.MyReporterClass.\noutput-format=text\n\n# Tells whether to display a full report or only the messages\nreports=no\n\n# Python expression which should return a note less than 10 (10 is the highest\n# note). You have access to the variables errors warning, statement which\n# respectively contain the number of errors / warnings messages and the total\n# number of statements analyzed. This is used by the global evaluation report\n# (RP0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details\n#msg-template=\n\n\n[TYPECHECK]\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# List of classes names for which member attributes should not be checked\n# (useful for classes with attributes dynamically set).\nignored-classes=SQLObject\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E0201 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=REQUEST,acl_users,aq_parent\n\n# List of decorators that create context managers from functions, such as\n# contextlib.contextmanager.\ncontextmanager-decorators=contextlib.contextmanager,contextlib2.contextmanager\n\n\n[VARIABLES]\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# A regular expression matching the beginning of the name of dummy variables\n# (i.e. not used).\ndummy-variables-rgx=^\\*{0,2}(_$|unused_|dummy_)\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid to define new builtins when possible.\nadditional-builtins=\n\n\n[BASIC]\n\n# Regular expression which should only match correct module names\nmodule-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n\n# Regular expression which should only match correct module level names\nconst-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$\n\n# Regular expression which should only match correct class names\nclass-rgx=^_?[A-Z][a-zA-Z0-9]*$\n\n# Regular expression which should only match correct function names\nfunction-rgx=^(?:(?P<camel_case>_?[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_?[a-z][a-z0-9_]*))$\n\n# Regular expression which should only match correct method names\nmethod-rgx=^(?:(?P<exempt>__[a-z0-9_]+__|next)|(?P<camel_case>_{0,2}[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_{0,2}[a-z][a-z0-9_]*))$\n\n# Regular expression which should only match correct instance attribute names\nattr-rgx=^_{0,2}[a-z][a-z0-9_]*$\n\n# Regular expression which should only match correct argument names\nargument-rgx=^[a-z][a-z0-9_]*$\n\n# Regular expression which should only match correct variable names\nvariable-rgx=^[a-z][a-z0-9_]*$\n\n# Regular expression which should only match correct attribute names in class\n# bodies\nclass-attribute-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$\n\n# Regular expression which should only match correct list comprehension /\n# generator expression variable names\ninlinevar-rgx=^[a-z][a-z0-9_]*$\n\n# Good variable names which should always be accepted, separated by a comma\ngood-names=main,_\n\n# Bad variable names which should always be refused, separated by a comma\nbad-names=\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=(__.*__|main)\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=10\n\n\n[FORMAT]\n\n# Maximum number of characters on a single line.\nmax-line-length=120\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=(?x)\n  (^\\s*(import|from)\\s\n   |\\$Id:\\s\\/\\/depot\\/.+#\\d+\\s\\$\n   |^[a-zA-Z_][a-zA-Z0-9_]*\\s*=\\s*(\"[^\"]\\S+\"|'[^']\\S+')\n   |^\\s*\\#\\ LINT\\.ThenChange\n   |^[^#]*\\#\\ type:\\ [a-zA-Z_][a-zA-Z0-9_.,[\\] ]*$\n   |pylint\n   |\"\"\"\n   |\\#\n   |lambda\n   |(https?|ftp):)\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=y\n\n# Maximum number of lines in a module\nmax-module-lines=99999\n\n# String used as indentation unit. This is usually \" \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n\n[SIMILARITIES]\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=no\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=\n\n\n[IMPORTS]\n\n# Deprecated modules which should not be used, separated by a comma\ndeprecated-modules=regsub,TERMIOS,Bastion,rexec,sets\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled)\nimport-graph=\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled)\next-import-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled)\nint-import-graph=\n\nextension-pkg-whitelist=_jsonnet\n\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,__new__,setUp\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls,class_\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=mcs\n\n\n[DESIGN]\n\n# Maximum number of arguments for function / method\nmax-args=5\n\n# Argument names that match this expression will be ignored. Default to name\n# with leading underscore\nignored-argument-names=_.*\n\n# Maximum number of locals for function / method body\nmax-locals=15\n\n# Maximum number of return / yield for function / method body\nmax-returns=6\n\n# Maximum number of branch for function / method body\nmax-branches=12\n\n# Maximum number of statements in function / method body\nmax-statements=50\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=7\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n\n\n[TOKENS]\n\n# Number of spaces of indent required when the last token on the preceding line\n# is an open (, [, or {.\nindent-after-paren=4"
        },
        {
          "name": "HISTORY.md",
          "type": "blob",
          "size": 6.609375,
          "content": "## 1.45.0\n\n* update pyarrow\n* add incremental model extend (thanks @edwardguil)\n\n## 1.44.1\n\n* extend fire dep range\n\n## 1.44.0\n\n* Deps update\n\n## 1.43.0\n\n* Remove version restriction for fsspec\n\n## 1.42.0\n\n* ray distibutor (thanks @Vaishaal)\n* Remove tmp_dir only if the output dir is not in s3 (thanks @ezzarum)\n* support more input formats (thanks @ldfandian)\n\n## 1.41.0\n\n* Verify hashes during download. (thanks @GeorgiosSmyrnis and @carlini)\n* opencv-python => opencv-python-headless (thanks @shionhonda)\n\n## 1.40.0\n\n* Add SBU captions benchmark\n* Bump ffspec version\n* Fix face blurring when padding/cropping\n* Add support for other hash functions\n\n## 1.39.0\n\n* Make opt out the default, add warning about ethical issues with slowing down democratization of skills and art.\n\n## 1.38.0\n\n* Incorporate face blurring with bounding boxes. (thanks @GeorgiosSmyrnis)\n\n## 1.37.0\n\n* Add support for resizing with fixed aspect ratio while fixing the largest image dimension (thanks @gabrielilharco)\n\n## 1.36.0\n\n* bumping webdataset version to 0.2.5+\n\n## 1.35.0\n\n* added max_image_area flag (thanks @sagadre)\n\n## 1.34.0\n\n* Add argument validator in main.\n* Respect noai and noimageai directives when downloading image files (thanks @raincoastchris)\n* add list of int, float feature in TFRecordSampleWriter (thanks @justHungryMan)\n\n## 1.33.0\n\n* feat: support pyspark < 3 when distributing image-to-dataset job (thanks @nateagr)\n\n## 1.32.0\n\n* feat: support min image size + max aspect ratio (@borisdayma)\n\n## 1.31.0\n\n* feat: allow encoding in different formats (thanks @borisdayma)\n\n## 1.30.2\n\n* Fix error message for incorrect input format \n\n## 1.30.1\n\n* Bug fix: shard id was incorrect when resuming (thanks @lxj616)\n\n## 1.30.0\n\n* Implement shard retrying\n\n## 1.29.0\n\n* Validate input and output format\n* Implement incremental mode\n\n## 1.28.0\n\n* use pyarrow in the reader to make it much faster\n\n## 1.27.4\n\n* use 2022.1.0 of fsspec for python3.6\n\n## 1.27.3\n\n* fix fsspec version\n\n## 1.27.2\n\n* fix fsspec version\n\n## 1.27.1\n\n* add gcsfs to pex\n\n## 1.27.0\n\n* buffered writer fix: release ram more often\n* feat: accept numpy arrays (thanks @borisdayma)\n\n## 1.26.0\n\n* add tfrecord output format (thanks @borisdayma)\n\n## 1.25.6\n\n* fix an interaction between md5 and exif option\n\n## 1.25.5\n\n* fix dependency ranges\n\n## 1.25.4\n\n* use exifread-nocycle to avoid cycle in exifread\n\n## 1.25.3\n\n* retry whole sharding if it fails\n\n## 1.25.2\n\n* retry writing the shard in reader in case of error\n\n## 1.25.1\n\n* small fix for logger and continuing\n* use time instead of perf_counter to measure shard duration\n\n## 1.25.0\n\n* make metadata writer much faster by building the schema in the downloader instead of guessing it\n* add new option allowing to disable reencoding\n\n## 1.24.1\n\n* hide opencv warning\n\n## 1.24.0\n\n* force one thread for opencv\n* make total logger start time the minimum of workers start time\n* add s3fs into the released pex for convenience\n* make sharding faster on high latency fs by using a thread pool\n\n## 1.23.1\n\n* fix logger on s3: do not use listing caching in logger\n\n## 1.23.0\n\n* add tutorial on how to setup a spark cluster and use it for distributed img2dataset\nbetter aws s3 support:\n* initialize logger fs in subprocess to avoid moving fs over a fork()\n* use spawn instead of fork method\n\n* make total logging more intuitive and convenient by logging every worker return\n\n## 1.22.3\n\n* fix release regex\n\n## 1.22.2\n\n* fix fsspec support by using tmp_dir in main.py\n\n## 1.22.1\n\n* fix pex creation\n\n## 1.22.0\n\n* add option not to write\n\n## 1.21.2\n\n* try catch in the logger for json.load\n* prevent error if logger sync is called when no call has been done\n* Add a build-pex target in Makefile and CI\n\n## 1.21.1\n\n* decrease default log interval to 5s\n\n## 1.21.0\n\n* add option to retry http download\n\n## 1.20.2\n\n* add original_width by default for a consistent schema\n\n## 1.20.1\n\n* fix relative path handling\n\n## 1.20.0\n\n* Add multi distributor support : multiprocessing and pyspark\n\n## 1.19.0\n\n* make the reader emits file paths instead of samples\n\n## 1.18.0\n\n* use a logger process to make logging distribution friendly, also save json stat files next to folder/tar files\n\n## 1.17.0\n\n* Use fsspec to support all filesystems\n\n## 1.16.0\n\n* implement md5 of images feature\n\n## 1.15.1\n\n* fix null convert in writer\n\n## 1.15.0\n\n* add parquet writer\n\n## 1.14.0\n\n* make reader memory efficient by using feather files\n\n## 1.13.0\n\n* large refactoring of the whole code in submodules\n* Enhance image resize processing (esp re downscale) (@rwightman)\n\n## 1.12.0\n\n* handle transparency (thanks @borisdayma)\n* add json input file support\n\n\n## 1.11.0\n\n* Add support for .tsv.gz files (thanks @robvanvolt)\n\n## 1.10.1\n\n* raise clean exception on image decoding error\n* remove the \\n in urls for txt inputs\n* save the error message when resizing fails in metadata\n* add type hints to download function\n\n## 1.10.0\n\n* use semaphores to decrease memory usage\n\n## 1.9.9\n\n* fix an issue with resize_mode \"no\"\n\n## 1.9.8\n\n* optimize listing files is back, sorted is eager so the iterator returned by iglob is ok\n\n## 1.9.7\n\n* revert last commit, it could cause double iteration on an iterator which can cause surprising behaviors\n\n## 1.9.6\n\n* optimize listing files (thanks @Skylion)\n\n## 1.9.5\n\n* fix a bug affecting downloading multiple files\n\n## 1.9.4\n\n* ensure sharded_images_to_dl is removed from memory at the end of downloading a file\n\n## 1.9.3\n\n* solve the stemming issue: make keys uniques\n\n## 1.9.2\n\n* Save empty caption if caption are none instead of not having the caption file\n\n## 1.9.1\n\n* fix for the new logging feature when cleaning the status dict\n\n## 1.9.0\n\n* wandb support is back\n\n## 1.8.5\n\n* support for python 3.6\n\n## 1.8.4\n\n* convert caption to str before writing\n\n## 1.8.3\n\n* add back timeout properly\n\n## 1.8.2\n\n* fixes\n\n## 1.8.1\n\n* revert wandb for now, code is too complex and there are issues\n\n## 1.8.0\n\n* feat: custom timeout (thanks @borisdayma)\n* feat: support wandb (thanks @borisdayma)\n\n## 1.7.0\n\n* use albumentations for resizing (thanks @borisdayma)\n\n## 1.6.1\n\n* depend on pyyaml to be able to use the last webdataset\n\n## 1.6.0\n\n* feat: handle tsv + center crop (thanks @borisdayma)\n\n## 1.5.3\n\n* increase stability by closing the pool and tarwriter explicitly\n\n## 1.5.2\n\n* improve memory usage\n\n## 1.5.1\n\n* glob only input files of the right ext\n\n## 1.5.0\n\n* add a save_additional_columns option\n\n## 1.4.0\n\n* Multiple file support\n* Status dataframe\n\n## 1.3.0\n\n* Uses a resizing method less prone to aliasing (thanks @skylion)\n* multi processing + multi threading\n\n## 1.2.0\n\n* add webdataset support and benchmarks\n* supports reading as parquet and csv\n\n## 1.1.1\n\n* fix cli\n\n## 1.1.0\n\n* add image resizing mode\n\n## 1.0.1\n\n* fixes\n\n## 1.0.0\n\n* it works\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "MIT License\n\nCopyright (c) 2021 Romain Beaumont\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.0322265625,
          "content": "install: ## [Local development] Upgrade pip, install requirements, install package.\n\tpython -m pip install -U pip\n\tpython -m pip install -e .\n\ninstall-dev: ## [Local development] Install test requirements\n\tpython -m pip install -r requirements-test.txt\n\nlint: ## [Local development] Run mypy, pylint and black\n\tpython -m mypy img2dataset\n\tpython -m pylint img2dataset\n\tpython -m black --check -l 120 .\n\nblack: ## [Local development] Auto-format python code using black\n\tpython -m black -l 120 .\n\nbuild-pex:\n\tpython3 -m venv .pexing\n\t. .pexing/bin/activate && python -m pip install -U pip && python -m pip install pex\n\t. .pexing/bin/activate && python -m pex setuptools scipy==1.9.0 gcsfs s3fs pyspark==3.2.0 requests==2.27.1 . -o img2dataset.pex -v\n\trm -rf .pexing\n\ntest: ## [Local development] Run unit tests\n\tpython -m pytest -x -s -v tests\n\n.PHONY: help\n\nhelp: # Run `make help` to get help on the make commands\n\t@grep -E '^[0-9a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 26.6025390625,
          "content": "# img2dataset\n[![pypi](https://img.shields.io/pypi/v/img2dataset.svg)](https://pypi.python.org/pypi/img2dataset)\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/rom1504/img2dataset/blob/master/notebook/img2dataset_getting_started.ipynb)\n[![Try it on gitpod](https://img.shields.io/badge/try-on%20gitpod-brightgreen.svg)](https://gitpod.io/#https://github.com/rom1504/img2dataset)\n[![Chat on discord](https://img.shields.io/discord/823813159592001537?color=5865F2&logo=discord&logoColor=white)](https://discord.gg/eq3cAMZtCC)\n\nEasily turn large sets of image urls to an image dataset.\nCan download, resize and package 100M urls in 20h on one machine.\n\nAlso supports saving captions for url+caption datasets.\n\nIf you believe in making reusable tools to make data easy to use for ML and you would like to contribute, please join the [DataToML](https://discord.gg/ep8yUUtCnp) chat.\n\n## Install\n\n```bash\npip install img2dataset\n```\n\nFor better performance, it's highly recommended to set up a fast dns resolver, see [this section](https://github.com/rom1504/img2dataset#setting-up-a-high-performance-dns-resolver)\n\n## Opt-out directives\n\nWebsites can pass the http headers `X-Robots-Tag: noai`, `X-Robots-Tag: noindex` , `X-Robots-Tag: noimageai` and `X-Robots-Tag: noimageindex`\nBy default img2dataset will ignore images with such headers.\n\nTo disable this behavior and download all images, you may pass --disallowed_header_directives '[]'\n\nSee [AI use impact](#ai-use-impact) to understand better why you may decide to enable or disable this feature.\n\n## Examples\n\nExample of datasets to download with example commands are available in the [dataset_examples](dataset_examples) folder. In particular:\n* [mscoco](dataset_examples/mscoco.md) 600k image/text pairs that can be downloaded in 10min\n* [sbucaptions](dataset_examples/SBUcaptions.md) 860K image/text pairs can be downloaded in 20 mins.\n* [cc3m](dataset_examples/cc3m.md) 3M image/text pairs that can be downloaded in one hour\n* [cc12m](dataset_examples/cc12m.md) 12M image/text pairs that can be downloaded in five hour\n* [laion400m](dataset_examples/laion400m.md) 400M image/text pairs that can be downloaded in 3.5 days\n* [laion5B](dataset_examples/laion5B.md) 5B image/text pairs that can be downloaded in 7 days using 10 nodes\n* [laion-aesthetic](dataset_examples/laion-aesthetic.md) Laion aesthetic is a 120M laion5B subset with aesthetic > 7 pwatermark < 0.8 punsafe < 0.5\n* [laion-art](dataset_examples/laion-art.md) Laion aesthetic is a 8M laion5B subset with aesthetic > 8 pwatermark < 0.8 punsafe < 0.5\n* [laion-coco](dataset_examples/laion-coco.md) Laion-COCO is a 600M subset of LAION2B-EN, captioned with an ensemble of BLIP L/14 and 2 CLIP versions (L/14 and RN50x64).\n* [laion-high-resolution](dataset_examples/laion-high-resolution.md) Laion high resolution is a 170M resolution >= 1024x1024 subset of laion5B\n* [laion-face](dataset_examples/laion-face.md) Laion face is the human face subset of LAION-400M for large-scale face pretraining. It has 50M image-text pairs.\n* [coyo-700m](dataset_examples/coyo-700m.md) COYO is a large-scale dataset that contains 747M image-text pairs as well as many other meta-attributes to increase the usability to train various models.\n* [commonpool](dataset_examples/common_pool.md) CommonPool is a large-scale dataset collected from CommonCrawl containing 12.8B image-text pairs.\n* [datacomp-1b](dataset_examples/datacomp.md) DataComp-1B is a large-scale dataset with 1.4B image-text pairs filtered from CommonPool.\n\nFor all these examples, you may want to tweak the resizing to your preferences. The default is 256x256 with white borders.\nSee options below.\n\n## Usage\n\nFirst get some image url list. For example:\n\n```bash\necho 'https://placekitten.com/200/305' >> myimglist.txt\necho 'https://placekitten.com/200/304' >> myimglist.txt\necho 'https://placekitten.com/200/303' >> myimglist.txt\n```\n\nThen, run the tool:\n\n```bash\nimg2dataset --url_list=myimglist.txt --output_folder=output_folder --thread_count=64 --image_size=256\n```\n\nThe tool will then automatically download the urls, resize them, and store them with that format:\n* output_folder\n    * 00000\n        * 000000000.jpg\n        * 000000001.jpg\n        * 000000002.jpg\n\nor as this format if choosing webdataset:\n* output_folder\n    * 00000.tar containing:\n        * 000000000.jpg\n        * 000000001.jpg\n        * 000000002.jpg\n\nwith each number being the position in the list. The subfolders avoids having too many files in a single folder.\n\nIf **captions** are provided, they will be saved as 0.txt, 1.txt, ...\n\nThis can then easily be fed into machine learning training or any other use case.\n\nAlso .json files named 0.json, 1.json,... are saved with these keys:\n* url\n* caption\n* key of the form 000010005 : the first 5 digits are the shard id, the last 4 are the index in the shard\n* status : whether the download succeeded\n* error_message\n* width\n* height\n* original_width\n* original_height\n* exif\n\nAlso a .parquet file will be saved with the same name as the subfolder/tar files containing these same metadata.\nIt can be used to analyze the results efficiently.\n\n.json files will also be saved with the same name suffixed by _stats, they contain stats collected during downloading (download time, number of success, ...)\n\n## Python examples\n\nCheckout these examples to call this as a lib:\n* [simple_example.py](examples/simple_example.py)\n* [pyspark_example.py](examples/pyspark_example.py)\n* [distributed img2dataset tutorial](examples/distributed_img2dataset_tutorial.md)\n\n## API\n\nThis module exposes a single function `download` which takes the same arguments as the command line tool:\n\n* **url_list** A file with the list of url of images to download. It can be a folder of such files. (*required*)\n* **image_size** The size to resize image to (default *256*)\n* **output_folder** The path to the output folder. (default *\"images\"*)\n* **processes_count** The number of processes used for downloading the pictures. This is important to be high for performance. (default *1*)\n* **thread_count** The number of threads used for downloading the pictures. This is important to be high for performance. (default *256*)\n* **resize_mode** The way to resize pictures, can be no, border or keep_ratio (default *border*)\n  * **no** doesn't resize at all\n  * **border** will make the image image_size x image_size and add a border\n  * **keep_ratio** will keep the ratio and make the smallest side of the picture image_size\n  * **keep_ratio_largest** will keep the ratio and make the largest side of the picture image_size\n  * **center_crop** will keep the ratio and center crop the largest side so the picture is squared\n* **resize_only_if_bigger** resize pictures only if bigger that the image_size (default *False*)\n* **upscale_interpolation** kind of upscale interpolation used for resizing (default *\"lanczos\"*)\n* **downscale_interpolation** kind of downscale interpolation used for resizing (default *\"area\"*)\n* **encode_quality** encode quality from 0 to 100, when using png it is the compression factor from 0 to 9 (default *95*)\n* **encode_format** encode format (default *jpg*)\n  * **jpg** jpeg format\n  * **png** png format\n  * **webp** webp format\n* **skip_reencode** whether to skip reencoding if no resizing is done (default *False*)\n* **output_format** decides how to save pictures (default *files*)\n  * **files** saves as a set of subfolder containing pictures\n  * **webdataset** saves as tars containing pictures\n  * **parquet** saves as parquet containing pictures as bytes\n  * **tfrecord** saves as tfrecord containing pictures as bytes\n  * **dummy** does not save. Useful for benchmarks\n* **input_format** decides how to load the urls (default *txt*)\n  * **txt** loads the urls as a text file of url, one per line\n  * **txt.gz** loads the urls as a compressed (gzip) txt.gz with a list of url, one per line\n  * **csv** loads the urls and optional caption as a csv\n  * **csv.gz** loads the urls and optional caption, as a compressed (gzip) csv.gz\n  * **tsv** loads the urls and optional caption as a tsv\n  * **tsv.gz** loads the urls and optional caption, as a compressed (gzip) tsv.gz\n  * **json** loads the urls and optional caption as a json\n  * **json.gz** loads the urls and optional caption, as a compressed (gzip) json.gz\n  * **jsonl** loads the urls and optional caption as a jsonl. see [jsonlines](https://jsonlines.org/) for more\n  * **jsonl.gz** loads the urls and optional caption, as a compressed (gzip) jsonl.gz. see [jsonlines](https://jsonlines.org/) for more\n  * **parquet** loads the urls and optional caption as a parquet\n* **url_col** the name of the url column for parquet and csv (default *url*)\n* **caption_col** the name of the caption column for parquet and csv (default *None*)\n* **bbox_col** the name of the bounding box column. Bounding boxes are assumed to have format ```[x_min, y_min, x_max, y_max]```, with all elements being floats in *[0,1]* (relative to the size of the image). If *None*, then no bounding box blurring is performed (default *None*)\n* **number_sample_per_shard** the number of sample that will be downloaded in one shard (default *10000*)\n* **extract_exif** if true, extract the exif information of the images and save it to the metadata (default *True*)\n* **save_additional_columns** list of additional columns to take from the csv/parquet files and save in metadata files (default *None*)\n* **timeout** maximum time (in seconds) to wait when trying to download an image (default *10*)\n* **enable_wandb** whether to enable wandb logging (default *False*)\n* **wandb_project** name of W&B project used (default *img2dataset*)\n* **oom_shard_count** the order of magnitude of the number of shards, used only to decide what zero padding to use to name the shard files (default *5*)\n* **compute_hash** the hash of raw images to compute and store in the metadata, one of *None*, *md5*, *sha256*, *sha512* (default *sha256*)\n* **verify_hash** if not *None*, then this is a list of two elements that will be used to verify hashes based on the provided input. The first element of this list is the label of the column containing the hashes in the input file, while the second one is the type of the hash that is being checked (default *None*)\n* **distributor** choose how to distribute the downloading (default *multiprocessing*)\n  * **multiprocessing** use a multiprocessing pool to spawn processes\n  * **pyspark** use a pyspark session to create workers on a spark cluster (see details below)\n  * **ray** use a ray cluster. See ray example.\n* **subjob_size** the number of shards to download in each subjob supporting it, a subjob can be a pyspark job for example (default *1000*)\n* **retries** number of time a download should be retried (default *0*)\n* **disable_all_reencoding** if set to True, this will keep the image files in their original state with no resizing and no conversion, will not even check if the image is valid. Useful for benchmarks. To use only if you plan to post process the images by another program and you have plenty of storage available. (default *False*)\n* **min_image_size** minimum size of the image to download (default *0*)\n* **max_image_area** maximum area of the image to download (default *inf*)\n* **max_aspect_ratio** maximum aspect ratio of the image to download (default *inf*)\n* **incremental_mode** Can be \"incremental\", \"overwrite\" or \"extend\". For \"incremental\", img2dataset will download all the shards that were not downloaded, for \"overwrite\" img2dataset will delete recursively the output folder then start from zero, for \"extend\" img2dataset will download shards from the next available shard number (default *incremental*)\n* **max_shard_retry** Number of time to retry failed shards at the end (default *1*)\n* **user_agent_token** Additional identifying token that will be added to the User-Agent header sent with HTTP requests to download images; for example: \"img2downloader\". (default *None*)\n* **disallowed_header_directives** List of X-Robots-Tags header directives that, if present in HTTP response when downloading an image, will cause the image to be excluded from the output dataset. To ignore x-robots-tags, pass '[]'. (default '[\"noai\", \"noimageai\", \"noindex\", \"noimageindex\"]')\n\n## Incremental mode\n\nIf a first download got interrupted for any reason, you can run again with --incremental \"incremental\" (this is the default) and using the same output folder , the same number_sample_per_shard and the same input urls, and img2dataset will complete the download.\n\n## Output format choice\n\nImg2dataset support several formats. There are trade off for which to choose:\n* files: this is the simplest one, images are simply saved as files. It's good for up to 1M samples on a local file system. Beyond that performance issues appear very fast. Handling more than a million files in standard filesystem does not work well.\n* webdataset: webdataset format saves samples in tar files, thanks to [webdataset](https://webdataset.github.io/webdataset/) library, this makes it possible to load the resulting dataset fast in both pytorch, tensorflow and jax. Choose this for most use cases. It works well for any filesystem\n* parquet: parquet is a columnar format that allows fast filtering. It's particularly easy to read it using pyarrow and pyspark. Choose this if the rest of your data ecosystem is based on pyspark. [petastorm](https://github.com/uber/petastorm) can be used to read the data but it's not as easy to use as webdataset\n* tfrecord: tfrecord is a protobuf based format. It's particularly easy to use from tensorflow and using [tf data](https://www.tensorflow.org/guide/data). Use this if you plan to use the dataset only in the tensorflow ecosystem. The tensorflow writer does not use fsspec and as a consequence supports only a limited amount of filesystem, including local, hdfs, s3 and gcs. It is also less efficient than the webdataset writer when writing to other filesystems than local, losing some 30% performance.\n\n## Encode format choice\n\nImages can be encoded in jpeg, png or webp, with different quality settings.\n\nHere are a few comparisons of space used for 1M images at 256 x 256:\n\n| format | quality | compression | size (GB)  |\n| ------ | ------- | ----------- | ---------- |\n| jpg    | 100     | N/A         | 54.2       |\n| jpg    | 95      | N/A         | 29.9       |\n| png    | N/A     | 0           | 187.9      |\n| png    | N/A     | 9           | 97.7       |\n| webp   | 100     | N/A         | 31.0       |\n| webp   | 95      | N/A         | 23.8       |\n\nNotes:\n\n* jpeg at quality 100 is NOT lossless\n* png format is lossless\n* webp at quality >100 is lossless ([see OpenCV Docs](https://docs.opencv.org/3.4/d8/d6a/group__imgcodecs__flags.html))\n* same quality scale between formats does not mean same image quality\n\n## Filtering the dataset\n\nWhenever feasible, you should pre-filter your dataset prior to downloading.\n\nIf needed, you can use:\n* --min_image_size SIZE : to filter out images with one side smaller than SIZE\n* --max_image_area SIZE : to filter out images with area larger than SIZE\n* --max_aspect_ratio RATIO : to filter out images with an aspect ratio greater than RATIO\n\nWhen filtering data, it is recommended to pre-shuffle your dataset to limit the impact on shard size distribution.\n\n## Hashes and security\n\nSome dataset (for example laion5B) expose hashes of original images.\n\nIf you want to be extra safe, you may automatically drop out the images that do not match theses hashes.\nIn that case you can use `--compute_hash \"md5\" --verify_hash '[\"md5\",\"md5\"]'` \nSome of those images are actually still good but have been slightly changed by the websites.\n\n## How to tweak the options\n\nThe default values should be good enough for small sized dataset. For larger ones, these tips may help you get the best performance:\n\n* set the processes_count as the number of cores your machine has\n* increase thread_count as long as your bandwidth and cpu are below the limits\n* I advise to set output_format to webdataset if your dataset has more than 1M elements, it will be easier to manipulate few tars rather than million of files\n* keeping metadata to True can be useful to check what items were already saved and avoid redownloading them\n\nTo benchmark your system, and img2dataset interactions with it, it may be interesting to enable these options (only for testing, not for real downloads)\n* --output_format dummy : will not save anything. Good to remove the storage bottleneck\n* --disable_all_reencoding True : will not reencode anything. Good to remove the cpu bottleneck\nWhen both these options are enabled, the only bottlenecks left are network related: eg dns setup, your bandwidth or the url servers bandwidth.\n\n## File system support\n\nThanks to [fsspec](https://filesystem-spec.readthedocs.io/en/latest/), img2dataset supports reading and writing files in [many file systems](https://github.com/fsspec/filesystem_spec/blob/6233f315548b512ec379323f762b70764efeb92c/fsspec/registry.py#L87).\nTo use it, simply use the prefix of your filesystem before the path. For example `hdfs://`, `s3://`, `http://`, `gcs://`, `ssh://` or `hf://` (includes a [Dataset Viewer](https://huggingface.co/docs/hub/datasets-viewer)).\nSome of these file systems require installing an additional package (for example s3fs for s3, gcsfs for gcs, [fsspec/sshfs](https://github.com/fsspec/sshfs) for ssh, [huggingface_hub](https://huggingface.co/docs/huggingface_hub/guides/hf_file_system) for hf).\nSee fsspec doc for all the details.\n\nIf you need specific configuration for your filesystem, you may handle this problem by using the [fsspec configuration system](https://filesystem-spec.readthedocs.io/en/latest/features.html#configuration) that makes it possible to create a file such as `.config/fsspec/s3.json` and have information in it such as:\n\n```json\n{\n  \"s3\": {\n    \"client_kwargs\": {\n            \"endpoint_url\": \"https://some_endpoint\",\n            \"aws_access_key_id\": \"your_user\",\n           \"aws_secret_access_key\": \"your_password\"\n    }\n  }\n}\n```\n\nWhich may be necessary if using s3 compatible file systems such as [minio](https://min.io/). That kind of configuration also work for all other fsspec-supported file systems.\n\n## Distribution modes\n\nImg2dataset supports several distributors.\n* multiprocessing which spawns a process pool and use these local processes for downloading\n* pyspark which spawns workers in a spark pool to do the downloading\n\nmultiprocessing is a good option for downloading on one machine, and as such it is the default.\nPyspark lets img2dataset use many nodes, which makes it as fast as the number of machines.\nIt can be particularly useful if downloading datasets with more than a billion image.\n\n### pyspark configuration\n\nIn order to use img2dataset with pyspark, you will need to do this:\n1. `pip install pyspark`\n2. use the `--distributor pyspark` option\n3. tweak the `--subjob_size 1000` option: this is the number of images to download in each subjob. Increasing it will mean a longer time of preparation to put the feather files in the temporary dir, a shorter time will mean sending less shards at a time to the pyspark job.\n\nBy default a local spark session will be created.\nYou may want to create a custom spark session depending on your specific spark cluster.\nTo do that check [pyspark_example.py](examples/pyspark_example.py), there you can plug your custom code to create a spark session, then\nrun img2dataset which will use it for downloading.\n\nTo create a spark cluster check the [distributed img2dataset tutorial](examples/distributed_img2dataset_tutorial.md)\n\n## Integration with Weights & Biases\n\nTo enable wandb, use the `--enable_wandb=True` option.\n\nPerformance metrics are monitored through [Weights & Biases](https://wandb.com/).\n\n![W&B metrics](doc_assets/wandb_metrics.png)\n\nIn addition, most frequent errors are logged for easier debugging.\n\n![W&B table](doc_assets/wandb_table.png)\n\nOther features are available:\n\n* logging of environment configuration (OS, python version, CPU count, Hostname, etc)\n* monitoring of hardware resources (GPU/CPU, RAM, Disk, Networking, etc)\n* custom graphs and reports\n* comparison of runs (convenient when optimizing parameters such as number of threads/cpus)\n\nWhen running the script for the first time, you can decide to either associate your metrics to your account or log them anonymously.\n\nYou can also log in (or create an account) before by running `wandb login`.\n\n## Road map\n\nThis tool works very well in the current state for up to 100M elements. Future goals include:\n\n* a benchmark for 1B pictures which may require\n  * further optimization on the resizing part\n  * better multi node support\n  * integrated support for incremental support (only download new elements)\n\n## Architecture notes\n\nThis tool is designed to download pictures as fast as possible.\nThis put a stress on various kind of resources. Some numbers assuming 1350 image/s:\n* Bandwidth: downloading a thousand average image per second requires about 130MB/s\n* CPU: resizing one image may take several milliseconds, several thousand per second can use up to 16 cores\n* DNS querying: million of urls mean million of domains, default OS setting usually are not enough. Setting up a local bind9 resolver may be required\n* Disk: if using resizing, up to 30MB/s write speed is necessary. If not using resizing, up to 130MB/s. Writing in few tar files make it possible to use rotational drives instead of a SSD.\n\nWith these information in mind, the design choice was done in this way:\n* the list of urls is split in K shards. K is chosen such that a shard has a reasonable size on disk (for example 256MB), by default K = 10000\n* N processes are started (using multiprocessing process pool)\n  * each process starts M threads. M should be maximized in order to use as much network as possible while keeping cpu usage below 100%.\n  * each of this thread download 1 image and returns it\n  * the parent thread handle resizing (which means there is at most N resizing running at once, using up the cores but not more)\n  * the parent thread saves to a tar file that is different from other process\n\nThis design make it possible to use the CPU resource efficiently by doing only 1 resize per core, reduce disk overhead by opening 1 file per core, while using the bandwidth resource as much as possible by using M thread per process.\n\nAlso see [architecture.md](img2dataset/architecture.md) for the precise split in python modules.\n\n## Setting up a high performance dns resolver\n\nTo get the best performances with img2dataset, using an efficient dns resolver is needed.\n* knot resolver can run in parallel\n* bind resolver is the historic resolver and is mono core but very optimized\n\n\n### Setting up a knot resolver\n\nFollow [the official quick start](https://knot-resolver.readthedocs.io/en/stable/quickstart-install.html) or run this on ubuntu:\n\ninstall knot with\n\n```bash\nwget https://secure.nic.cz/files/knot-resolver/knot-resolver-release.deb\nsudo dpkg -i knot-resolver-release.deb\nsudo apt update\nsudo apt install -y knot-resolver\nsudo sh -c 'echo `hostname -I` `hostname` >> /etc/hosts'\nsudo sh -c 'echo nameserver 127.0.0.1 > /etc/resolv.conf'\nsudo systemctl stop systemd-resolved\n```\n\nthen start 4 instances with\n\n```bash\nsudo systemctl start kresd@1.service\nsudo systemctl start kresd@2.service\nsudo systemctl start kresd@3.service\nsudo systemctl start kresd@4.service\n```\n\nCheck it works with\n\n```bash\ndig @localhost google.com\n```\n\n### Setting up a bind9 resolver\n\nIn order to keep the success rate high, it is necessary to use an efficient DNS resolver.\nI tried several options: systemd-resolved, dnsmaskq and bind9 and reached the conclusion that bind9 reaches the best performance for this use case.\nHere is how to set this up on Ubuntu. Run:\n\n```bash\nsudo apt install bind9\nsudo vim /etc/bind/named.conf.options\n```\n\nAnd add this in `options`:\n\n```\n\trecursive-clients 10000;\n\tresolver-query-timeout 30000;\n\tmax-clients-per-query 10000;\n\tmax-cache-size 2000m;\n```\n\nThen, run:\n\n```bash\nsudo systemctl restart bind9\necho nameserver 127.0.0.1 | sudo tee -a /etc/resolv.conf\n```\n\nThis will make it possible to keep an high success rate while doing thousands of dns queries.\nYou may also want to [setup bind9 logging](https://nsrc.org/activities/agendas/en/dnssec-3-days/dns/materials/labs/en/dns-bind-logging.html) in order to check that few dns errors happen.\n\n\n## AI use impact\n\nimg2dataset is used to retrieve images from the web and make them easily available for ML use cases. Use cases involve:\n* doing inference and indexing to better understand what is in the web (https://rom1504.github.io/clip-retrieval/ is an example of this)\n* training models\n\nModels that can be trained using image/text datasets include:\n* CLIP: an image understanding model that allow for example to know whether an image is safe, aesthetic, what animal it contains, ...\n* text to image models: generating images based on text\n\nThere is a lot of discussions regarding the consequences of text to image models. Some opinions include:\n* AI art is democratizing art and letting hundred of millions of people express themselves through art. Making art much more prevalent and unique\n* AI models should not be trained on images that creator do not want to share\n\nThe opt out directive try to let creators that do not want to share their art not be used for indexing and for training.\n\n\n## For development\n\nEither locally, or in [gitpod](https://gitpod.io/#https://github.com/rom1504/img2dataset) (do `export PIP_USER=false` there)\n\nSetup a virtualenv:\n\n```bash\npython3 -m venv .env\nsource .env/bin/activate\npip install -e .\n```\n\nto run tests:\n\n```bash\npip install -r requirements-test.txt\n```\nthen\n\n```bash\nmake lint\nmake test\n```\n\nYou can use `make black` to reformat the code\n\n`python -m pytest -x -s -v tests -k \"dummy\"` to run a specific test\n\n## Benchmarks\n\n### 10000 image benchmark\n\n```bash\ncd tests/test_files\nbash benchmark.sh\n```\n\n\n### 18M image benchmark\n\nDownload crawling at home first part, then:\n\n```bash\ncd tests\nbash large_bench.sh\n```\n\nIt takes 3.7h to download 18M pictures\n\n1350 images/s is the currently observed performance. 4.8M images per hour, 116M images per 24h.\n\n\n### 36M image benchmark\n\ndownloading 2 parquet files of 18M items (result 936GB) took 7h24\naverage of 1345 image/s\n\n### 190M benchmark\n\ndownloading 190M images from the [crawling at home dataset](https://github.com/rom1504/cah-prepro) took 41h (result 5TB)\naverage of 1280 image/s\n\n### 5B benchmark\n\ndownloading 5.8B images from the [laion5B dataset](https://laion.ai/laion-5b-a-new-era-of-open-large-scale-multi-modal-datasets/) took 7 days (result 240TB), average of 9500 sample/s on 10 machines, [technical details](https://rom1504.medium.com/semantic-search-at-billions-scale-95f21695689a)\n\n\n\n## Citation\n\n```bibtex\n@misc{beaumont-2021-img2dataset,\n  author = {Romain Beaumont},\n  title = {img2dataset: Easily turn large sets of image urls to an image dataset},\n  year = {2021},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/rom1504/img2dataset}}\n}\n```\n"
        },
        {
          "name": "dataset_examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc_assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "img2dataset",
          "type": "tree",
          "content": null
        },
        {
          "name": "mypy.ini",
          "type": "blob",
          "size": 0.0751953125,
          "content": "# Global options:\n\n[mypy]\npython_version = 3.8\nignore_missing_imports = True\n"
        },
        {
          "name": "notebook",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements-test.txt",
          "type": "blob",
          "size": 0.1826171875,
          "content": "black==24.1.1\nmypy==1.8.0\npylint==3.0.3\npytest-cov==4.1.0\npytest-xdist==3.5.0\npytest==8.0.0\npsutil\npyspark\nuvicorn\nfastapi\ntensorflow\ntensorflow_io\ntypes-requests\ntypes-pkg_resources\nray\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.2275390625,
          "content": "tqdm>=4.62.3,<5\nopencv-python-headless>=4.5.5.62,<5\nfire>=0.4.0,<0.6.0\nwebdataset>=0.2.5,<0.3\npandas>=1.1.5,<3\npyarrow>=6.0.1,<16\nexifread-nocycle>=3.0.1,<4\nalbumentations>=1.1.0,<2\ndataclasses>=0.6,<1.0.0\nwandb>=0.16.0,<0.17\nfsspec\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.498046875,
          "content": "from setuptools import setup, find_packages\nfrom pathlib import Path\nimport os\n\nif __name__ == \"__main__\":\n    with Path(Path(__file__).parent, \"README.md\").open(encoding=\"utf-8\") as file:\n        long_description = file.read()\n\n    def _read_reqs(relpath):\n        fullpath = os.path.join(os.path.dirname(__file__), relpath)\n        with open(fullpath) as f:\n            return [s.strip() for s in f.readlines() if (s.strip() and not s.startswith(\"#\"))]\n\n    REQUIREMENTS = _read_reqs(\"requirements.txt\")\n\n    setup(\n        name=\"img2dataset\",\n        packages=find_packages(),\n        include_package_data=True,\n        version=\"1.45.0\",\n        license=\"MIT\",\n        description=\"Easily turn a set of image urls to an image dataset\",\n        long_description=long_description,\n        long_description_content_type=\"text/markdown\",\n        entry_points={\"console_scripts\": [\"img2dataset = img2dataset:main\"]},\n        author=\"Romain Beaumont\",\n        author_email=\"romain.rom1@gmail.com\",\n        url=\"https://github.com/rom1504/img2dataset\",\n        data_files=[(\".\", [\"README.md\"])],\n        keywords=[\"machine learning\", \"computer vision\", \"download\", \"image\", \"dataset\"],\n        install_requires=REQUIREMENTS,\n        classifiers=[\n            \"Development Status :: 4 - Beta\",\n            \"Intended Audience :: Developers\",\n            \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n            \"License :: OSI Approved :: MIT License\",\n            \"Programming Language :: Python :: 3.6\",\n        ],\n    )\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}