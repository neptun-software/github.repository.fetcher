{
  "metadata": {
    "timestamp": 1736560368466,
    "page": 906,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "flexxui/flexx",
      "stars": 3301,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.853515625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\r\n# IDEs and such\r\n .idea\r\n .vscode\r\n \n# Specific to here\nexp/html_examples.txt\nflexx/resources/phosphor-all.*.js\nflexx/resources/phosphor-all.*.css\n_flexx-notebooks\n_flexx-book\n_feedstock\nflexx_legacy\n_phosphor-all\nexamples/ui/*.html\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbin/\nbuild/\ndevelop-eggs/\ndist/\neggs/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n.ipynb_checkpoints\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n.pytest_cache\r\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n# Rope\n.ropeproject\n\n# Django stuff:\n*.log\n*.pot\n\n# Sphinx documentation and website\ndocs/_build/\ndoc/_build/\n_website/\r\n_live/\n_gh-pages/\n\n# Eclipse\n.settings/"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.080078125,
          "content": "## Introduction\n\nFirst off, thank you for considering contributing to Flexx! Following\nthese guidelines should help to streamline the communication between\nyou and the developers.\n\nThere are many ways to contribute, from writing tutorials or blog posts,\nimproving the docs, submitting bug reports and feature requests or\nwriting code to be included in Flexx itself.\n\nAs there are currently no other channels for communication of support questions,\nthese can be asked using Github issues (for now). For more formal support, you\ncan contact almarklein via gmail.\n\n\n## Ground Rules\n\n* Communicate respectfully.\n* Be welcoming to newcomers and encourage diverse new contributors from\n  all backgrounds. See the [Python Community Code of\n  Conduct](https://www.python.org/psf/codeofconduct/).\n* Keep in mind that the code must be cross platform (Window, OSX, Linux, at least).\n* In most cases, new code should be covered by tests\n* Please make sure that new code follows the style guides. Flexx intends\n  to not be overly dogmatic about style (e.g. most whitespace-related\n  rules are ignored) but style is enforced by tests.\n\n\n## Your First Contribution\n\nIf you're relatively new to Flexx, but would want to contribute, it is already\nhelpful to just try it out and report any problems that you run into (e.g. things\nthare are unclear, counterintuitive or not documented well). Writing a\nblog post about something cool that you made with Flexx is also very\nhelpful.\n\nAt this point, we do not have a special label for \"easy issues\" to work on.\n\nNever contributed to open source before? Here are some useful reads:\nhttp://makeapullrequest.com/ and http://www.firsttimersonly.com/\n\nFeel free to ask for help; everyone is a beginner at first :)\n\n\n## How to report a bug\n\nIf you find a security vulnerability, do NOT open an issue. Send\nalmarklein an email via gmail instead.\n\nWhen filing an issue, make sure to answer these five questions:\n\n* What version of Flexx are you using?\n* What operating system and processor architecture are you using?\n* What browser are you using (if applicable)?\n* What did you do?\n* What did you expect to see?\n* What did you see instead?\n\n\n## How to suggest a feature or enhancement\n\nPlease first check whether the feature (or a very similar feature) has\nalready been requested. If so, subscribe to that issue. Otherwise,\ncreate a new issue describing the proposed feature and why it is\nrelevant (to you).\n\n\n## Code review process\n\nPull requests are not merged if they the tests do not pass. Though review\nmay start before the pull request is completely finished.\n\nAll pull requests are reviewed before they are merged. Reviewers may ask\nto clarify code or make suggestions to improve readability and style.\nDon't feel bad if your contribution does not go as smooth as you had\nhoped; we are gratefull with your contribution and the review\nprocess is there to ensure code quality.\n\nA reviewer may not always respond within a day; it might just be a busy\nweek. If a reviewer has not responded in say a week or two, feel free\nto post a comment with a gentle reminder.\n\n\n## Community\n\nAll community traffic goes through Github for now.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2744140625,
          "content": "Copyright (c) 2015-2020, Flexx developers\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.349609375,
          "content": "include LICENSE README.md\nrecursive-include docs *\nrecursive-include demo *\nrecursive-include flexx README.md\n\nprune docs/_build\nprune docs/ext/__pycache__\n\nrecursive-include tasks *\nrecursive-include flexx/app/tests *\nrecursive-include flexx/event/tests *\nrecursive-include flexx/util/tests *\n\nglobal-exclude .git*\nglobal-exclude *.pyo\nglobal-exclude *.pyc\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.32421875,
          "content": "Flexx\n=====\n\n[![CI](https://github.com/flexxui/flexx/workflows/CI/badge.svg)](https://github.com/flexxui/flexx/actions)\n[![Documentation Status](https://readthedocs.org/projects/flexx/badge/?version=latest)](https://flexx.readthedocs.org)\n[![PyPI version](https://badge.fury.io/py/flexx.svg)](https://badge.fury.io/py/flexx)\n\nWant to stay up-to-date about (changes to) Flexx? Subscribe to the [NEWS issue](https://github.com/flexxui/flexx/issues/477).\n\n\nIntroduction\n------------\n\n[Flexx](https://flexx.readthedocs.io) is a pure Python toolkit for\ncreating graphical user interfaces (GUI's), that uses web technology\nfor its rendering. Apps are written purely in Python; The\n[PScript](https://pscript.readthedocs.io) transpiler generates the\nnecessary JavaScript on the fly.\n\nYou can use Flexx to create (cross platform) desktop applications, web\napplications, and export an app to a standalone HTML document. It also\nworks in the Jupyter notebook.\n\nThe docs are on [Readthedocs](http://flexx.readthedocs.io).\nthe code is on [Github](http://github.com/flexxui/flexx).\n\n\nExample\n-------\n\nClick the image below for an interactive example:\n\n[![demo](https://dl.dropboxusercontent.com/s/x4s7wgv6tpyqsqo/flexx_demo_300.png)](http://flexx.readthedocs.io/en/latest/examples/demo_src.html)\n\n\nMotivation\n----------\n\nThe primary motivation for Flexx is the undeniable fact that the web\n(i.e. browser technology) has become an increasingly popular method for\ndelivering applications to users, also for (interactive) scientific\ncontent.\n\nThe purpose of Flexx is to provide a single application framework to\ncreate desktop applications, web apps, and (hopefully someday) mobile apps.\nBy making use of browser technology, the library itself can be\nrelatively small and pure Python, making it widely available and easy\nto use.\n\n\nA word of caution\n-----------------\n\nFlexx is very versatile and\n[can be used in different ways](https://flexx.readthedocs.io/en/stable/guide/running.html).\nIt also makes it easy to mix Python that runs on the server and Python that\nruns in the browser. This is a powerful feature but this also makes it easy\nto create code that becomes difficult to maintain. You, the developer, must\nensure that Python and PScript code are clearly separated.\n\n\nInstallation\n------------\n\nFlexx requires Python 3.5+ and also works on pypy. Further,\nit depends on:\n\n* the [Tornado](http://www.tornadoweb.org) library (pure Python).\n* the [PScript](http://github.com/flexxui/pscript) library (a pure Python flexxui project).\n* the [Webruntime](http://github.com/flexxui/webruntime) library (a pure Python flexxui project).\n* the [Dialite](http://github.com/flexxui/dialite) library (a pure Python flexxui project).\n\nTo install the latest release (and dependencies), use either of:\n\n```bash\n# Install latest release\npip install flexx\n\n# Install latest from Github\npip install -U https://github.com/flexxui/flexx/archive/master.zip\n```\nOr get the bleeding edge with:\n\n* ``pip install https://github.com/flexxui/flexx/archive/master.zip``\n\n\nSupported browsers\n------------------\n\nFlexx aims to support all modern browsers, including Firefox, Chrome and Edge.\nInternet Explorer version 10 and up should work, but some things may be flaky.\n\nFor running desktop apps, it is needed to have Firefox or NW.js installed.\n\n\nLicense\n-------\n\nFlexx makes use of the liberal 2-clause BSD license. See LICENSE for details.\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "flexx",
          "type": "tree",
          "content": null
        },
        {
          "name": "flexxamples",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 2.0126953125,
          "content": "[flake8]\n# References:\n# http://flake8.readthedocs.org/en/latest/config.html\n# http://flake8.readthedocs.org/en/latest/warnings.html#error-codes\n#\n# Style checks turned on:\n#   F - all pyflake errors\n#   E101 - indentation contains mixed spaces and tabs\n#   E111 - indentation is not a multiple of four\n#   E501 - line too long (see max-line-length)\n\n# ignores:\n# W291 trailing whitespace\n# W293 blanc line contains whitespace\n#\n# E124 closing bracket does not match visual indentation\n# E127 continuation line over-indented for visual indent\n# E203 whitespace before ':'\n# E225 missing whitespace around operator\n# E226 missing whitespace around arithmetic operator\n# E265 block comment should start with '# '\n# E301 expected 1 blank line, found 0\n# E302 expected 2 blank lines, found 1\n# E303 too many blank lines\n# E402 module level import not at top of file\n# E266 too many leading '#' for block comment\n# E731 do not assign a lambda expression, use a def\n# E128 continuation line under-indented for visual indent\n\nexclude: test_*.py,exp/*,docs/*,build/*,dist/*,flexx/lui/*,python_sample*.py,\n  flexx_legacy/*,_feedstock/*\n\nignore: W291,W293,W504,W605,E123,E124,E126,E127,E203,E225,E226,E265,E301,E302,E303,E402,\n    E266,E731,E128,E306,E305,I,D,T,CG,N8,S1,E252,B007\n\nmax-line-length: 88\n\n\n[coverage:report]\n\nomit =\n    setup.py\n    # Do not cover test files themselves\n    */test_*.py\n    flexx/app/_clientcore.py\n\nexclude_lines =\n    # Remember that these are reg exp\n\n    # Have to re-enable the standard pragma\n    pragma: no cover\n\n    raise AssertionError\n    raise NotImplementedError\n    raise JSError\n\n    # Code that will not run on Py\n    class HasSignalsJS:\n    class JS:\n\n    # Don't complain if non-runnable code isn't run:\n    if 0:\n    if False:\n    if __name__ == .__main__.:\n    if this_is_js():\n\n    # Don't complain for platform specific code\n    sys\\.platform.startswith\\(\\'win\\'\\)\n    sys\\.platform.startswith\\(\\'darwin\\'\\)\n    getattr\\(sys, \\'frozen\\'\\,\\ None\\)\n\n    # Don't complain about caught import fails\n    except ImportError:\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 4.732421875,
          "content": "# -*- coding: utf-8 -*-\n\n\"\"\"\nFlexx setup script.\n\"\"\"\n\nimport os\nimport sys\nimport shutil\n\ntry:\n    import setuptools  # noqa, analysis:ignore\nexcept ImportError:\n    pass  # setuptools allows for \"develop\", but it's not essential\n\nfrom distutils.core import setup\n\n\n## Function we need\n\ndef get_version_and_doc(filename):\n    NS = dict(__version__='', __doc__='')\n    docStatus = 0  # Not started, in progress, done\n    for line in open(filename, 'rb').read().decode().splitlines():\n        if line.startswith('__version__'):\n            exec(line.strip(), NS, NS)\n        elif line.startswith('\"\"\"'):\n            if docStatus == 0:\n                docStatus = 1\n                line = line.lstrip('\"')\n            elif docStatus == 1:\n                docStatus = 2\n        if docStatus == 1:\n            NS['__doc__'] += line.rstrip() + '\\n'\n    if not NS['__version__']:\n        raise RuntimeError('Could not find __version__')\n    return NS['__version__'], NS['__doc__']\n\n\ndef get_readme_as_rst(filename):\n    lines = []\n    for line in open(filename, 'rb').read().decode().splitlines():\n        lines.append(line)\n        # Convert links, images, and images with links\n        i1, i2 = line.find('['), line.find(']')\n        i3, i4 = line.find('(', i2), line.find(')', i2)\n        i5, i6 = line.find('(', i4), line.find(')', i4+1)\n        if '[Documentation Status' in line:\n            line.find('x')\n        if '[Build Status' in line:\n            line.find('x')\n        if i1 >=0 and i2 > i1 and i3 == i2 + 1 and i4 > i3:\n            text, link = line[i1+1:i2], line[i3+1:i4]\n            if i1 == 1 and line[0] == '!':\n                # Image\n                lines[-1] = '\\n.. image:: %s\\n' % link\n            elif i1 == 0 and line.startswith('[![') and i5 == i4 + 2 and i6 > i5:\n                # Image with link\n                link2 = line[i5+1:i6]\n                lines[-1] = '\\n.. image:: %s\\n    :target: %s\\n' % (link, link2)\n            else:\n                # RST link: `link text </the/link>`_\n                lines[-1] = '%s`%s <%s>`_%s' % (line[:i1], text, link, line[i4+1:])\n    return '\\n'.join(lines)\n\n\ndef package_tree(pkgroot):\n    subdirs = [os.path.relpath(i[0], THIS_DIR).replace(os.path.sep, '.')\n               for i in os.walk(os.path.join(THIS_DIR, pkgroot))\n               if '__init__.py' in i[2]]\n    return subdirs\n\n\ndef get_all_resources():\n    import logging  # noqa - prevent mixup with logging module inside flexx.util\n    sys.path.insert(0, os.path.join(THIS_DIR, 'flexx', 'util'))\n    from getresource import RESOURCES, get_resoure_path\n    for name in RESOURCES.keys():\n        get_resoure_path(name)\n    sys.path.pop(0)\n\n\n## Collect info for setup()\n\nTHIS_DIR = os.path.dirname(__file__)\n\n# Define name and description\nname = 'flexx'\ndescription = \"Write desktop and web apps in pure Python.\"\n\n# Get version and docstring (i.e. long description)\nversion, doc = get_version_and_doc(os.path.join(THIS_DIR, name, '__init__.py'))\nif os.path.isfile(os.path.join(THIS_DIR, 'README.md')):\n    pass  # render fail - doc = get_readme_as_rst(os.path.join(THIS_DIR, 'README.md'))\n\n# Install resources (e.g. phosphor.js)\nget_all_resources()\n\n\n## Setup\n\nsetup(\n    name=name,\n    version=version,\n    author='Flexx contributors',\n    author_email='almar.klein@gmail.com',\n    license='(new) BSD',\n    url='https://flexx.readthedocs.io',\n    download_url='https://pypi.python.org/pypi/flexx',\n    project_urls={\n        'Documentation': 'https://flexx.readthedocs.io',\n    },\n    keywords=\"ui design, GUI, web, runtime, pyscript, events, properties\",\n    description=description,\n    long_description=doc,\n    platforms='any',\n    provides=[name],\n    python_requires='>=3.5',\n    install_requires=['tornado', 'pscript>=0.7.7', 'webruntime>=0.5.6', 'dialite>=0.5.2'],\n    packages=package_tree('flexx') + package_tree('flexxamples'),\n    package_dir={'flexx': 'flexx', 'flexxamples': 'flexxamples'},\n    package_data={name: ['resources/*']},\n    entry_points={'console_scripts': ['flexx = flexx.__main__:main'], },\n    zip_safe=False,\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Science/Research',\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: User Interfaces',\n        'Topic :: Internet :: WWW/HTTP',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Programming Language :: JavaScript',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n    ],\n)\n"
        },
        {
          "name": "tasks",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}