{
  "metadata": {
    "timestamp": 1736559701580,
    "page": 385,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ets-labs/python-dependency-injector",
      "stars": 4087,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".deepsource.toml",
          "type": "blob",
          "size": 0.173828125,
          "content": "version = 1\n\ntest_patterns = [\"tests/**/test_*.py\"]\n\nexclude_patterns = [\"docs/**\"]\n\n[[analyzers]]\nname = \"python\"\nenabled = true\n\n  [analyzers.meta]\n  runtime_version = \"3.x.x\"\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.841796875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nreports/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# PyCharm\n.idea/\n\n# Virtualenv\nvenv*/\n\n# SQLite\n*.db\n\n# Vim Rope\n.ropeproject/\n\n# Cython artifacts\nsrc/**/*.c\nsrc/**/*.h\nsrc/**/*.so\nsrc/**/*.html\n\n# Workspace for samples\n.workspace/\n\n.vscode/\n"
        },
        {
          "name": "CONTRIBUTORS.rst",
          "type": "blob",
          "size": 0.6572265625,
          "content": "Dependency Injector Contributors\n================================\n\n+ Roman Mogylatov (rmk135)\n+ Konstantin vz'One Enchant (sirkonst)\n+ Terrence Brannon (metaperl)\n+ Stanislav Lobanov (asyncee)\n+ James Lafa (jameslafa)\n+ Vlad Ghita (vlad-ghita)\n+ Jeroen Rietveld (jeroenrietveld)\n+ Dmitry Kuzmin (xotonic)\n+ supakeen (supakeen)\n+ Bruno P. Kinoshita (kinow)\n+ RobinsonMa (RobinsonMa)\n+ RÃ¼diger Busche (JarnoRFB)\n+ Dmitry Rassoshenko (rda-dev)\n+ Fotis Koutoupas (kootoopas)\n+ Shubhendra Singh Chauhan (withshubh)\n+ sonthonaxrk (sonthonaxrk)\n+ Ngo Thanh Loi (Leonn) (loingo95)\n+ Thiago Hiromi (thiromi)\n+ Felipe Rubio (krouw)\n+ Anton Petrov (anton-petrov)\n+ ZipFile (ZipFile)\n"
        },
        {
          "name": "LICENSE.rst",
          "type": "blob",
          "size": 1.458984375,
          "content": "Copyright (c) 2024, Roman Mogylatov\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of \"Dependency Injector\" nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.21484375,
          "content": "recursive-include src/dependency_injector *.py* *.c\nrecursive-include tests *.py\ninclude README.rst\ninclude CONTRIBUTORS.rst\ninclude LICENSE.rst\ninclude requirements.txt\ninclude setup.py\ninclude tox.ini\ninclude py.typed\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.552734375,
          "content": "VERSION := $(shell python setup.py --version)\n\nexport COVERAGE_RCFILE := pyproject.toml\n\nclean:\n\t# Clean sources\n\tfind src -name '*.py[cod]' -delete\n\tfind src -name '__pycache__' -delete\n\tfind src -name '*.c' -delete\n\tfind src -name '*.h' -delete\n\tfind src -name '*.so' -delete\n\tfind src -name '*.html' -delete\n\t# Clean tests\n\tfind tests -name '*.py[co]' -delete\n\tfind tests -name '__pycache__' -delete\n\t# Clean examples\n\tfind examples -name '*.py[co]' -delete\n\tfind examples -name '__pycache__' -delete\n\nbuild: clean\n\t# Compile C extensions\n\tpython setup.py build_ext --inplace\n\t# Move all Cython html reports\n\tmkdir -p reports/cython/\n\tfind src -name '*.html' -exec mv {}  reports/cython/  \\;\n\ndocs-live:\n\tsphinx-autobuild docs docs/_build/html\n\ninstall: uninstall clean build\n\tpip install -ve .\n\nuninstall:\n\t- pip uninstall -y -q dependency-injector 2> /dev/null\n\ntest:\n\t# Unit tests with coverage report\n\tcoverage erase\n\tcoverage run -m pytest -c tests/.configs/pytest.ini\n\tcoverage report\n\tcoverage html\n\ncheck:\n\tflake8 src/dependency_injector/\n\tflake8 examples/\n\n\tpydocstyle src/dependency_injector/\n\tpydocstyle examples/\n\n\tmypy tests/typing\n\ntest-publish: build\n\t# Create distributions\n\tpython -m build --sdist\n\t# Upload distributions to PyPI\n\ttwine upload --repository testpypi dist/dependency-injector-$(VERSION)*\n\npublish:\n\t# Merge release to master branch\n\tgit checkout master\n\tgit merge --no-ff release/$(VERSION) -m \"Merge branch 'release/$(VERSION)' into master\"\n\tgit push origin master\n\t# Create and upload tag\n\tgit tag -a $(VERSION) -m 'version $(VERSION)'\n\tgit push --tags\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 9.771484375,
          "content": ".. figure:: https://raw.githubusercontent.com/wiki/ets-labs/python-dependency-injector/img/logo.svg\n   :target: https://github.com/ets-labs/python-dependency-injector\n\n| \n\n.. image:: https://img.shields.io/pypi/v/dependency_injector.svg\n   :target: https://pypi.org/project/dependency-injector/\n   :alt: Latest Version\n   \n.. image:: https://img.shields.io/pypi/l/dependency_injector.svg\n   :target: https://pypi.org/project/dependency-injector/\n   :alt: License\n\n.. image:: https://img.shields.io/pypi/pyversions/dependency_injector.svg\n   :target: https://pypi.org/project/dependency-injector/\n   :alt: Supported Python versions\n   \n.. image:: https://img.shields.io/pypi/implementation/dependency_injector.svg\n   :target: https://pypi.org/project/dependency-injector/\n   :alt: Supported Python implementations\n\n.. image:: https://pepy.tech/badge/dependency-injector\n   :target: https://pepy.tech/project/dependency-injector\n   :alt: Downloads\n\n.. image:: https://pepy.tech/badge/dependency-injector/month\n   :target: https://pepy.tech/project/dependency-injector\n   :alt: Downloads\n\n.. image:: https://pepy.tech/badge/dependency-injector/week\n   :target: https://pepy.tech/project/dependency-injector\n   :alt: Downloads\n\n.. image:: https://img.shields.io/pypi/wheel/dependency-injector.svg\n   :target: https://pypi.org/project/dependency-injector/\n   :alt: Wheel\n\n.. image:: https://img.shields.io/github/actions/workflow/status/ets-labs/python-dependency-injector/tests-and-linters.yml?branch=master\n   :target: https://github.com/ets-labs/python-dependency-injector/actions\n   :alt: Build Status\n\n.. image:: https://coveralls.io/repos/github/ets-labs/python-dependency-injector/badge.svg?branch=master\n   :target: https://coveralls.io/github/ets-labs/python-dependency-injector?branch=master\n   :alt: Coverage Status\n\nWhat is ``Dependency Injector``?\n================================\n\n``Dependency Injector`` is a dependency injection framework for Python.\n\nIt helps implement the dependency injection principle.\n\nKey features of the ``Dependency Injector``:\n\n- **Providers**. Provides ``Factory``, ``Singleton``, ``Callable``, ``Coroutine``, ``Object``,\n  ``List``, ``Dict``, ``Configuration``, ``Resource``, ``Dependency``, and ``Selector`` providers\n  that help assemble your objects.\n  See `Providers <https://python-dependency-injector.ets-labs.org/providers/index.html>`_.\n- **Overriding**. Can override any provider by another provider on the fly. This helps in testing\n  and configuring dev/stage environment to replace API clients with stubs etc. See\n  `Provider overriding <https://python-dependency-injector.ets-labs.org/providers/overriding.html>`_.\n- **Configuration**. Reads configuration from ``yaml``, ``ini``, and ``json`` files, ``pydantic`` settings,\n  environment variables, and dictionaries.\n  See `Configuration provider <https://python-dependency-injector.ets-labs.org/providers/configuration.html>`_.\n- **Resources**. Helps with initialization and configuring of logging, event loop, thread\n  or process pool, etc. Can be used for per-function execution scope in tandem with wiring.\n  See `Resource provider <https://python-dependency-injector.ets-labs.org/providers/resource.html>`_.\n- **Containers**. Provides declarative and dynamic containers.\n  See `Containers <https://python-dependency-injector.ets-labs.org/containers/index.html>`_.\n- **Wiring**. Injects dependencies into functions and methods. Helps integrate with\n  other frameworks: Django, Flask, Aiohttp, Sanic, FastAPI, etc.\n  See `Wiring <https://python-dependency-injector.ets-labs.org/wiring.html>`_.\n- **Asynchronous**. Supports asynchronous injections.\n  See `Asynchronous injections <https://python-dependency-injector.ets-labs.org/providers/async.html>`_.\n- **Typing**. Provides typing stubs, ``mypy``-friendly.\n  See `Typing and mypy <https://python-dependency-injector.ets-labs.org/providers/typing_mypy.html>`_.\n- **Performance**. Fast. Written in ``Cython``.\n- **Maturity**. Mature and production-ready. Well-tested, documented, and supported.\n\n.. code-block:: python\n\n   from dependency_injector import containers, providers\n   from dependency_injector.wiring import Provide, inject\n\n\n   class Container(containers.DeclarativeContainer):\n\n       config = providers.Configuration()\n\n       api_client = providers.Singleton(\n           ApiClient,\n           api_key=config.api_key,\n           timeout=config.timeout,\n       )\n\n       service = providers.Factory(\n           Service,\n           api_client=api_client,\n       )\n\n\n   @inject\n   def main(service: Service = Provide[Container.service]) -> None:\n       ...\n\n\n   if __name__ == \"__main__\":\n       container = Container()\n       container.config.api_key.from_env(\"API_KEY\", required=True)\n       container.config.timeout.from_env(\"TIMEOUT\", as_=int, default=5)\n       container.wire(modules=[__name__])\n\n       main()  # <-- dependency is injected automatically\n\n       with container.api_client.override(mock.Mock()):\n           main()  # <-- overridden dependency is injected automatically\n\nWhen you call the ``main()`` function the ``Service`` dependency is assembled and injected automatically.\n\nWhen you do testing, you call the ``container.api_client.override()`` method to replace the real API\nclient with a mock. When you call ``main()``, the mock is injected.\n\nYou can override any provider with another provider.\n\nIt also helps you in a re-configuring project for different environments: replace an API client\nwith a stub on the dev or stage.\n\nWith the ``Dependency Injector``, object assembling is consolidated in a container. Dependency injections are defined explicitly.\nThis makes it easier to understand and change how an application works.\n\n.. figure:: https://raw.githubusercontent.com/wiki/ets-labs/python-dependency-injector/img/di-readme.svg\n   :target: https://github.com/ets-labs/python-dependency-injector\n\nVisit the docs to know more about the\n`Dependency injection and inversion of control in Python <https://python-dependency-injector.ets-labs.org/introduction/di_in_python.html>`_.\n\nInstallation\n------------\n\nThe package is available on the `PyPi`_::\n\n    pip install dependency-injector\n\nDocumentation\n-------------\n\nThe documentation is available `here <https://python-dependency-injector.ets-labs.org/>`_.\n\nExamples\n--------\n\nChoose one of the following:\n\n- `Application example (single container) <https://python-dependency-injector.ets-labs.org/examples/application-single-container.html>`_\n- `Application example (multiple containers) <https://python-dependency-injector.ets-labs.org/examples/application-multiple-containers.html>`_\n- `Decoupled packages example (multiple containers) <https://python-dependency-injector.ets-labs.org/examples/decoupled-packages.html>`_\n- `Boto3 example <https://python-dependency-injector.ets-labs.org/examples/boto3.html>`_\n- `Django example <https://python-dependency-injector.ets-labs.org/examples/django.html>`_\n- `Flask example <https://python-dependency-injector.ets-labs.org/examples/flask.html>`_\n- `Aiohttp example <https://python-dependency-injector.ets-labs.org/examples/aiohttp.html>`_\n- `Sanic example <https://python-dependency-injector.ets-labs.org/examples/sanic.html>`_\n- `FastAPI example <https://python-dependency-injector.ets-labs.org/examples/fastapi.html>`_\n- `FastAPI + Redis example <https://python-dependency-injector.ets-labs.org/examples/fastapi-redis.html>`_\n- `FastAPI + SQLAlchemy example <https://python-dependency-injector.ets-labs.org/examples/fastapi-sqlalchemy.html>`_\n\nTutorials\n---------\n\nChoose one of the following:\n\n- `Flask web application tutorial <https://python-dependency-injector.ets-labs.org/tutorials/flask.html>`_\n- `Aiohttp REST API tutorial <https://python-dependency-injector.ets-labs.org/tutorials/aiohttp.html>`_\n- `Asyncio monitoring daemon tutorial <https://python-dependency-injector.ets-labs.org/tutorials/asyncio-daemon.html>`_\n- `CLI application tutorial <https://python-dependency-injector.ets-labs.org/tutorials/cli.html>`_\n\nConcept\n-------\n\nThe framework stands on the `PEP20 (The Zen of Python) <https://www.python.org/dev/peps/pep-0020/>`_ principle:\n\n.. code-block:: bash\n\n   Explicit is better than implicit\n\nYou need to specify how to assemble and where to inject the dependencies explicitly.\n\nThe power of the framework is in its simplicity.\n``Dependency Injector`` is a simple tool for the powerful concept.\n\nFrequently asked questions\n--------------------------\n\nWhat is dependency injection?\n - dependency injection is a principle that decreases coupling and increases cohesion\n\nWhy should I do the dependency injection?\n - your code becomes more flexible, testable, and clear ð\n\nHow do I start applying the dependency injection?\n - you start writing the code following the dependency injection principle\n - you register all of your application components and their dependencies in the container\n - when you need a component, you specify where to inject it or get it from the container\n\nWhat price do I pay and what do I get?\n - you need to explicitly specify the dependencies\n - it will be extra work in the beginning\n - it will payoff as project grows\n\nHave a question?\n - Open a `Github Issue <https://github.com/ets-labs/python-dependency-injector/issues>`_\n\nFound a bug?\n - Open a `Github Issue <https://github.com/ets-labs/python-dependency-injector/issues>`_\n\nWant to help?\n - |star| Star the ``Dependency Injector`` on the `Github <https://github.com/ets-labs/python-dependency-injector/>`_\n - |new| Start a new project with the ``Dependency Injector``\n - |tell| Tell your friend about the ``Dependency Injector``\n\nWant to contribute?\n - |fork| Fork the project\n - |pull| Open a pull request to the ``develop`` branch\n\n.. _PyPi: https://pypi.org/project/dependency-injector/\n\n.. |star| unicode:: U+2B50 U+FE0F .. star sign1\n.. |new| unicode:: U+1F195 .. new sign\n.. |tell| unicode:: U+1F4AC .. tell sign\n.. |fork| unicode:: U+1F500 .. fork sign\n.. |pull| unicode:: U+2B05 U+FE0F .. pull sign\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.7041015625,
          "content": "[build-system]\nrequires = [\"setuptools\", \"Cython\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"dependency-injector\"\nauthors = [\n    {name = \"Roman Mogylatov\", email = \"rmogilatov@gmail.com\"},\n]\nmaintainers = [\n    {name = \"Roman Mogylatov\", email = \"rmogilatov@gmail.com\"},\n]\ndescription = \"Dependency injection framework for Python\"\nreadme = {file = \"README.rst\", content-type = \"text/x-rst\"}\nlicense = {file = \"LICENSE.rst\", content-type = \"text/x-rst\"}\nrequires-python = \">=3.7\"\nkeywords = [\n    \"Dependency injection\",\n    \"DI\",\n    \"Inversion of Control\",\n    \"IoC\",\n    \"Factory\",\n    \"Singleton\",\n    \"Design patterns\",\n    \"Flask\",\n]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: BSD License\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n    \"Programming Language :: Python :: Implementation :: CPython\",\n    \"Programming Language :: Python :: Implementation :: PyPy\",\n    \"Framework :: AsyncIO\",\n    \"Framework :: Bottle\",\n    \"Framework :: Django\",\n    \"Framework :: Flask\",\n    \"Framework :: Pylons\",\n    \"Framework :: Pyramid\",\n    \"Framework :: Pytest\",\n    \"Framework :: TurboGears\",\n    \"Topic :: Software Development\",\n    \"Topic :: Software Development :: Libraries\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n]\ndynamic = [\"version\"]\n\n[project.optional-dependencies]\nyaml = [\"pyyaml\"]\npydantic = [\"pydantic\"]\npydantic2 = [\"pydantic-settings\"]\nflask = [\"flask\"]\naiohttp = [\"aiohttp\"]\n\n[project.urls]\nHomepage = \"https://github.com/ets-labs/python-dependency-injector\"\nDocumentation = \"https://python-dependency-injector.ets-labs.org/\"\nDownload = \"https://pypi.python.org/pypi/dependency_injector\"\n\n[tool.setuptools]\npackage-dir = {\"\" = \"src\"}\n\n[tool.setuptools.packages.find]\nwhere = [\"src\"]\n\n[tool.setuptools.package-data]\ndependency_injector = [\"*.pxd\", \"*.pyi\", \"py.typed\"]\n\n[tool.setuptools.dynamic]\nversion = {attr = \"dependency_injector.__version__\"}\n\n[tool.coverage.run]\nbranch = false\nrelative_files = true\nsource_pkgs = [\"dependency_injector\"]\nplugins = [\"Cython.Coverage\"]\n\n[tool.coverage.html]\ndirectory = \"reports/unittests/\"\n\n[tool.coverage.report]\nshow_missing = true\n\n[tool.isort]\nprofile = \"black\"\n\n[tool.pylint.main]\nignore = [\"tests\"]\n\n[tool.pylint.design]\nmin-public-methods = 0\nmax-public-methods = 30\n"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.212890625,
          "content": "cython==3.0.11\nsetuptools\npytest\npytest-asyncio\ntox\ncoverage\nflake8\nflake8-pyproject\npydocstyle\nsphinx_autobuild\npip\nmypy\npyyaml\nhttpx\nfastapi\npydantic==1.10.17\nnumpy\nscipy\nboto3\nmypy_boto3_s3\n\n-r requirements-ext.txt\n"
        },
        {
          "name": "requirements-doc.txt",
          "type": "blob",
          "size": 0.197265625,
          "content": "# TODO: unpin 3.5.0 when this bug is fixed: https://github.com/sphinx-doc/sphinx/issues/8885\nsphinx\n\n# TODO: unpin jinja2 after sphinx update to 4+\njinja2\n\nsphinx-disqus==1.3.0\n\n-r requirements-ext.txt\n"
        },
        {
          "name": "requirements-ext.txt",
          "type": "blob",
          "size": 0.0224609375,
          "content": "flask\nwerkzeug\naiohttp\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.3271484375,
          "content": "[flake8]\nmax_line_length = 120\nmax_complexity = 10\nexclude = types.py\nper-file-ignores =\n    examples/demo/*: F841\n    examples/containers/traverse.py: E501\n    examples/providers/async.py: F841\n    examples/providers/async_overriding.py: F841\n    examples/wiring/*: F841\n\n[pydocstyle]\nignore = D100,D101,D102,D105,D106,D107,D203,D213\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.873046875,
          "content": "\"\"\"`Dependency injector` setup script.\"\"\"\n\nimport os\n\nfrom Cython.Build import cythonize\nfrom Cython.Compiler import Options\nfrom setuptools import Extension, setup\n\ndebug = os.environ.get(\"DEPENDENCY_INJECTOR_DEBUG_MODE\") == \"1\"\ndefined_macros = []\ncompiler_directives = {\n    \"language_level\": 3,\n    \"profile\": debug,\n    \"linetrace\": debug,\n}\nOptions.annotate = debug\n\n# Adding debug options:\nif debug:\n    defined_macros.extend(\n        [\n            (\"CYTHON_TRACE\", \"1\"),\n            (\"CYTHON_TRACE_NOGIL\", \"1\"),\n            (\"CYTHON_CLINE_IN_TRACEBACK\", \"1\"),\n        ]\n    )\n\n\nsetup(\n    ext_modules=cythonize(\n        [\n            Extension(\n                \"*\",\n                [\"src/**/*.pyx\"],\n                define_macros=defined_macros,\n            ),\n        ],\n        annotate=debug,\n        show_all_warnings=True,\n        compiler_directives=compiler_directives,\n    ),\n)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.9501953125,
          "content": "[tox]\nparallel_show_output = true\nenvlist=\n    coveralls, pylint, flake8, pydocstyle, pydantic-v1, pydantic-v2, 3.7, 3.8, 3.9, 3.10, 3.11, 3.12, 3.13, pypy3.9, pypy3.10\n\n[testenv]\ndeps=\n    pytest\n    pytest-asyncio\n    httpx\n    fastapi\n    flask\n    aiohttp\n    numpy\n    scipy\n    boto3\n    mypy_boto3_s3\n    pydantic-settings\n    werkzeug\nextras=\n    yaml\ncommands = pytest -c tests/.configs/pytest.ini\npython_files = test_*_py3*.py\nsetenv =\n    COVERAGE_RCFILE = pyproject.toml\n\n[testenv:.pkg]\npassenv = DEPENDENCY_INJECTOR_*\n\n[testenv:pydantic-{v1,v2}]\ndescription = run tests with different pydantic versions\nbase_python = python3.12\ndeps =\n    v1: pydantic<2\n    v2: pydantic-settings\n    pytest\n    pytest-asyncio\n    typing_extensions\n    httpx\n    fastapi\n    flask\n    aiohttp\n    numpy\n    scipy\n    boto3\n    mypy_boto3_s3\n    werkzeug\ncommands = pytest -c tests/.configs/pytest.ini -m pydantic\n\n[testenv:coveralls]\npassenv = GITHUB_*, COVERALLS_*, DEPENDENCY_INJECTOR_*\nbasepython=python3.12  # TODO: Upgrade to version 3.13 is blocked by coveralls 4.0.1 not supporting Python 3.13\ndeps=\n    {[testenv]deps}\n    cython>=3,<4\n    coverage>=7\n    coveralls>=4\ncommands=\n    coverage erase\n    coverage run -m pytest -c tests/.configs/pytest.ini\n    coverage report\n    coveralls\n\n[testenv:pypy3.9]\ndeps=\n    pytest\n    pytest-asyncio\n    httpx\n    flask\n    pydantic-settings\n    werkzeug\n    fastapi\n    boto3\n    mypy_boto3_s3\nextras=\n    yaml\ncommands = pytest -c tests/.configs/pytest-py35.ini\n\n\n[testenv:pylint]\ndeps=\n    pylint\n    flask\n    werkzeug\ncommands=\n    - pylint -f colorized src/dependency_injector\n\n[testenv:flake8]\ndeps=\n    flake8\ncommands=\n    flake8 --max-complexity=10 src/dependency_injector/\n    flake8 --max-complexity=10 examples/\n\n[testenv:pydocstyle]\ndeps=\n    pydocstyle\ncommands=\n    pydocstyle src/dependency_injector/\n    pydocstyle examples/\n\n[testenv:mypy]\ndeps=\n    typing_extensions\n    pydantic-settings\n    mypy\ncommands=\n    mypy tests/typing\n"
        }
      ]
    }
  ]
}