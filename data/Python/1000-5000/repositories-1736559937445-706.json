{
  "metadata": {
    "timestamp": 1736559937445,
    "page": 706,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "TencentARC/T2I-Adapter",
      "stars": 3545,
      "defaultBranch": "main",
      "files": [
        {
          "name": "Adapter",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.0859375,
          "content": "<p align=\"center\">\n  <img src=\"https://github.com/TencentARC/T2I-Adapter/assets/17445847/452793ae-dcf7-4c1a-b2ee-f465f8f85236\" height=120>\n</p>\n\n\n### <div align=\"center\">üëâ T2I-Adapter for <b><a href=\"https://github.com/TencentARC/T2I-Adapter/tree/SD\">[SD-1.4/1.5]</a>, for <a href=\"https://github.com/TencentARC/T2I-Adapter\">[SDXL]</a></b></div> \n\n<div align=\"center\">\n\n[![Huggingface T2I-Adapter-SDXL](https://img.shields.io/static/v1?label=Demo&message=Huggingface%20Gradio&color=orange)](https://huggingface.co/spaces/TencentARC/T2I-Adapter-SDXL) &ensp;  [![Blog T2I-Adapter-SDXL](https://img.shields.io/static/v1?label=Blog&message=HuggingFace&color=orange)](https://huggingface.co/blog/t2i-sdxl-adapters) &ensp;   [![arXiv](https://img.shields.io/badge/arXiv-2302.08453-b31b1b.svg?style=flat-square)](https://arxiv.org/abs/2302.08453)\n\n</div> \n\n---\n\nOfficial implementation of **[T2I-Adapter: Learning Adapters to Dig out More Controllable Ability for Text-to-Image Diffusion Models](https://arxiv.org/abs/2302.08453)** based on [Stable Diffusion-XL](https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0).\n\nThe diffusers team and the T2I-Adapter authors have been collaborating to bring the support of T2I-Adapters for Stable Diffusion XL (SDXL) in diffusers! It achieves impressive results in both performance and efficiency. \n\n---\n![image](https://github.com/TencentARC/T2I-Adapter/assets/54032224/d249f699-b6d5-461d-9fdf-f0d009f14f4d)\n\n## üö© **New Features/Updates**\n- ‚úÖ Sep. 8, 2023. We collaborate with the diffusers team to bring the support of T2I-Adapters for Stable Diffusion XL (SDXL) in diffusers! It achieves impressive results in both performance and efficiency. We release T2I-Adapter-SDXL models for [sketch](https://huggingface.co/TencentARC/t2i-adapter-sketch-sdxl-1.0), [canny](https://huggingface.co/TencentARC/t2i-adapter-canny-sdxl-1.0), [lineart](https://huggingface.co/TencentARC/t2i-adapter-lineart-sdxl-1.0), [openpose](https://huggingface.co/TencentARC/t2i-adapter-openpose-sdxl-1.0), [depth-zoe](https://huggingface.co/TencentARC/t2i-adapter-depth-zoe-sdxl-1.0), and [depth-mid](https://huggingface.co/TencentARC/t2i-adapter-depth-midas-sdxl-1.0). We release two online demos: [![Huggingface T2I-Adapter-SDXL](https://img.shields.io/static/v1?label=Demo&message=Huggingface%20Gradio&color=orange)](https://huggingface.co/spaces/TencentARC/T2I-Adapter-SDXL) and [![Huggingface T2I-Adapter-SDXL Doodle](https://img.shields.io/static/v1?label=Demo&message=Huggingface%20Doodly%20Demo&color=orange)](https://huggingface.co/spaces/TencentARC/T2I-Adapter-SDXL-Sketch).\n- ‚úÖ Aug. 21, 2023. We release [T2I-Adapter-SDXL](https://github.com/TencentARC/T2I-Adapter/), including sketch, canny, and keypoint. We still use the original recipe (77M parameters, a single inference) to drive [StableDiffusion-XL](https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0). Due to the limited computing resources, those adapters still need further improvement. We are collaborating with [HuggingFace](https://huggingface.co/), and a more powerful adapter is in the works.\n\n- ‚úÖ Jul. 13, 2023. [Stability AI](https://stability.ai/) release [Stable Doodle](https://stability.ai/blog/clipdrop-launches-stable-doodle), a groundbreaking sketch-to-image tool based on T2I-Adapter and [SDXL](https://huggingface.co/stabilityai/stable-diffusion-xl-base-0.9). It makes drawing easier.\n\n- ‚úÖ Mar. 16, 2023. We add **CoAdapter** (**Co**mposable **Adapter**). The online Huggingface Gadio has been updated [![Huggingface Gradio (CoAdapter)](https://img.shields.io/static/v1?label=Demo&message=Huggingface%20Gradio&color=orange)](https://huggingface.co/spaces/Adapter/CoAdapter). You can also try the [local gradio demo](app_coadapter.py).\n- ‚úÖ Mar. 16, 2023. We have shrunk the git repo with [bfg](https://rtyley.github.io/bfg-repo-cleaner/).  If you encounter any issues when pulling or pushing, you can try re-cloning the repository. Sorry for the inconvenience.\n- ‚úÖ Mar. 3, 2023. Add a [*color adapter (spatial palette)*](https://huggingface.co/TencentARC/T2I-Adapter/tree/main/models), which has only **17M parameters**.\n- ‚úÖ Mar. 3, 2023. Add four new adapters [*style, color, openpose and canny*](https://huggingface.co/TencentARC/T2I-Adapter/tree/main/models). See more info in the **[Adapter Zoo](https://github.com/TencentARC/T2I-Adapter/blob/SD/docs/AdapterZoo.md)**.\n- ‚úÖ Feb. 23, 2023. Add the depth adapter [*t2iadapter_depth_sd14v1.pth*](https://huggingface.co/TencentARC/T2I-Adapter/tree/main/models). See more info in the **[Adapter Zoo](https://github.com/TencentARC/T2I-Adapter/blob/SD/docs/AdapterZoo.md)**.\n- ‚úÖ Feb. 15, 2023. Release [T2I-Adapter](https://github.com/TencentARC/T2I-Adapter/tree/SD).\n\n---\n\n# üî•üî•üî• Why T2I-Adapter-SDXL? \n## The Original Recipe Drives Larger SD.\n\n|   | SD-V1.4/1.5 | SD-XL | T2I-Adapter | T2I-Adapter-SDXL |\n| --- | --- |--- |--- |--- |\n| Parameters | 860M | 2.6B |77 M | 77/79 M | |\n\n## Inherit High-quality Generation from SDXL.\n\n- Lineart-guided\n\nModel from [TencentARC/t2i-adapter-lineart-sdxl-1.0](https://huggingface.co/TencentARC/t2i-adapter-lineart-sdxl-1.0)\n<p align=\"center\">\n  <img src=\"https://huggingface.co/Adapter/t2iadapter/resolve/main/t_lineart.PNG\" height=420>\n</p>\n  \n- Keypoint-guided\n\nModel from [openpose_sdxl_1.0](https://huggingface.co/Adapter/t2iadapter/tree/main/openpose_sdxl_1.0) \n<p align=\"center\">\n  <img src=\"https://huggingface.co/Adapter/t2iadapter/resolve/main/t_pose.PNG\" height=520>\n</p>\n\n- Sketch-guided\n\nModel from [TencentARC/t2i-adapter-sketch-sdxl-1.0](https://huggingface.co/TencentARC/t2i-adapter-sketch-sdxl-1.0)\n<p align=\"center\">\n  <img src=\"https://huggingface.co/Adapter/t2iadapter/resolve/main/t_sketch.PNG\" height=520>\n</p>\n\n- Canny-guided\nModel from [TencentARC/t2i-adapter-canny-sdxl-1.0](https://huggingface.co/TencentARC/t2i-adapter-canny-sdxl-1.0)\n<p align=\"center\">\n  <img src=\"https://huggingface.co/Adapter/t2iadapter/resolve/main/t_canny.PNG\" height=520>\n</p>\n\n- Depth-guided\n\nDepth guided models from [TencentARC/t2i-adapter-depth-midas-sdxl-1.0](https://huggingface.co/TencentARC/t2i-adapter-depth-midas-sdxl-1.0) and [TencentARC/t2i-adapter-depth-zoe-sdxl-1.0](https://huggingface.co/TencentARC/t2i-adapter-depth-zoe-sdxl-1.0) respectively\n<p align=\"center\">\n  <img src=\"https://huggingface.co/Adapter/t2iadapter/resolve/main/t_depth.PNG\" height=520>\n</p>\n\n# üîß Dependencies and Installation\n\n- Python >= 3.8 (Recommend to use [Anaconda](https://www.anaconda.com/download/#linux) or [Miniconda](https://docs.conda.io/en/latest/miniconda.html))\n- [PyTorch >= 2.0.1](https://pytorch.org/)\n```bash\npip install -r requirements.txt\n```\n\n# ‚è¨ Download Models \nAll models will be automatically downloaded. You can also choose to download manually from this [url](https://huggingface.co/TencentARC).\n\n# üî• How to Train\nHere we take sketch guidance as an example, but of course, you can also prepare your own dataset following this method.\n```bash\naccelerate launch train_sketch.py --pretrained_model_name_or_path stabilityai/stable-diffusion-xl-base-1.0 --output_dir experiments/adapter_sketch_xl --config configs/train/Adapter-XL-sketch.yaml --mixed_precision=\"fp16\" --resolution=1024 --learning_rate=1e-5 --max_train_steps=60000 --train_batch_size=1 --gradient_accumulation_steps=4 --report_to=\"wandb\" --seed=42 --num_train_epochs 100\n```\n\nWe train with `FP16` data precision on `4` NVIDIA `A100` GPUs.\n\n# üíª How to Test\nInference requires at least `15GB` of GPU memory.\n\n## Quick start with [diffusers](https://github.com/huggingface/diffusers)\n\nTo get started, first install the required dependencies:\n\n```bash\npip install git+https://github.com/huggingface/diffusers.git@t2iadapterxl # for now\npip install -U controlnet_aux==0.0.7 # for conditioning models and detectors  \npip install transformers accelerate safetensors\n```\n\n1. Images are first downloaded into the appropriate *control image* format.\n 2. The *control image* and *prompt* are passed to the [`StableDiffusionXLAdapterPipeline`](https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/t2i_adapter/pipeline_stable_diffusion_xl_adapter.py#L125).\n\nLet's have a look at a simple example using the [LineArt Adapter](https://huggingface.co/TencentARC/t2i-adapter-lineart-sdxl-1.0).\n\n- Dependency\n```py\nfrom diffusers import StableDiffusionXLAdapterPipeline, T2IAdapter, EulerAncestralDiscreteScheduler, AutoencoderKL\nfrom diffusers.utils import load_image, make_image_grid\nfrom controlnet_aux.lineart import LineartDetector\nimport torch\n\n# load adapter\nadapter = T2IAdapter.from_pretrained(\n  \"TencentARC/t2i-adapter-lineart-sdxl-1.0\", torch_dtype=torch.float16, varient=\"fp16\"\n).to(\"cuda\")\n\n# load euler_a scheduler\nmodel_id = 'stabilityai/stable-diffusion-xl-base-1.0'\neuler_a = EulerAncestralDiscreteScheduler.from_pretrained(model_id, subfolder=\"scheduler\")\nvae=AutoencoderKL.from_pretrained(\"madebyollin/sdxl-vae-fp16-fix\", torch_dtype=torch.float16)\npipe = StableDiffusionXLAdapterPipeline.from_pretrained(\n    model_id, vae=vae, adapter=adapter, scheduler=euler_a, torch_dtype=torch.float16, variant=\"fp16\", \n).to(\"cuda\")\npipe.enable_xformers_memory_efficient_attention()\n\nline_detector = LineartDetector.from_pretrained(\"lllyasviel/Annotators\").to(\"cuda\")\n```\n\n- Condition Image\n```py\nurl = \"https://huggingface.co/Adapter/t2iadapter/resolve/main/figs_SDXLV1.0/org_lin.jpg\"\nimage = load_image(url)\nimage = line_detector(\n    image, detect_resolution=384, image_resolution=1024\n)\n```\n<a href=\"https://huggingface.co/Adapter/t2iadapter/resolve/main/figs_SDXLV1.0/cond_lin.png\"><img width=\"480\" style=\"margin:0;padding:0;\" src=\"https://huggingface.co/Adapter/t2iadapter/resolve/main/figs_SDXLV1.0/cond_lin.png\"/></a>\n\n- Generation\n```py\nprompt = \"Ice dragon roar, 4k photo\"\nnegative_prompt = \"anime, cartoon, graphic, text, painting, crayon, graphite, abstract, glitch, deformed, mutated, ugly, disfigured\"\ngen_images = pipe(\n    prompt=prompt,\n    negative_prompt=negative_prompt,\n    image=image,\n    num_inference_steps=30,\n    adapter_conditioning_scale=0.8,\n    guidance_scale=7.5, \n).images[0]\ngen_images.save('out_lin.png')\n```\n<a href=\"https://huggingface.co/Adapter/t2iadapter/resolve/main/figs_SDXLV1.0/cond_lin.png\"><img width=\"480\" style=\"margin:0;padding:0;\" src=\"https://huggingface.co/Adapter/t2iadapter/resolve/main/figs_SDXLV1.0/res_lin.png\"/></a>\n\n## Online Demo [![Huggingface T2I-Adapter-SDXL](https://img.shields.io/static/v1?label=Demo&message=Huggingface%20Gradio&color=orange)](https://huggingface.co/spaces/TencentARC/T2I-Adapter-SDXL) \n<a href=\"https://huggingface.co/Adapter/t2iadapter/resolve/main/figs_SDXLV1.0/demo_dragon.png\"><img width=\"520\" style=\"margin:0;padding:0;\" src=\"https://huggingface.co/Adapter/t2iadapter/resolve/main/figs_SDXLV1.0/demo_dragon.png\"/></a>\n\n## Online Doodly Demo [![Huggingface T2I-Adapter-SDXL](https://img.shields.io/static/v1?label=Demo&message=Huggingface%20Gradio&color=orange)](https://huggingface.co/spaces/TencentARC/T2I-Adapter-SDXL-Sketch) \n<a href=\"https://huggingface.co/Adapter/t2iadapter/resolve/main/figs_SDXLV1.0/demo_tree.png\"><img width=\"520\" style=\"margin:0;padding:0;\" src=\"https://huggingface.co/Adapter/t2iadapter/resolve/main/figs_SDXLV1.0/demo_tree.png\"/></a>\n<a href=\"https://huggingface.co/Adapter/t2iadapter/resolve/main/figs_SDXLV1.0/demo_doodle_dragon.png\"><img width=\"520\" style=\"margin:0;padding:0;\" src=\"https://huggingface.co/Adapter/t2iadapter/resolve/main/figs_SDXLV1.0/demo_doodle_dragon.png\"/></a>\n\n\n# Tutorials on HuggingFace:\n- Sketch: [https://huggingface.co/TencentARC/t2i-adapter-sketch-sdxl-1.0](https://huggingface.co/TencentARC/t2i-adapter-sketch-sdxl-1.0)\n- Canny: [https://huggingface.co/TencentARC/t2i-adapter-canny-sdxl-1.0](https://huggingface.co/TencentARC/t2i-adapter-canny-sdxl-1.0)\n- Lineart: [https://huggingface.co/TencentARC/t2i-adapter-lineart-sdxl-1.0](https://huggingface.co/TencentARC/t2i-adapter-lineart-sdxl-1.0)\n- Openpose: [https://huggingface.co/TencentARC/t2i-adapter-openpose-sdxl-1.0](https://huggingface.co/TencentARC/t2i-adapter-openpose-sdxl-1.0)\n- Depth-mid: [https://huggingface.co/TencentARC/t2i-adapter-depth-midas-sdxl-1.0](https://huggingface.co/TencentARC/t2i-adapter-depth-midas-sdxl-1.0)\n- Depth-zoe: [https://huggingface.co/TencentARC/t2i-adapter-depth-zoe-sdxl-1.0](https://huggingface.co/TencentARC/t2i-adapter-depth-zoe-sdxl-1.0)\n\n...\n\n# Other Source\nJul. 13, 2023. [Stability AI](https://stability.ai/) release [Stable Doodle](https://stability.ai/blog/clipdrop-launches-stable-doodle), a groundbreaking sketch-to-image tool based on T2I-Adapter and [SDXL](https://huggingface.co/stabilityai/stable-diffusion-xl-base-0.9). It makes drawing easier.\n\nhttps://user-images.githubusercontent.com/73707470/253800159-c7e12362-1ea1-4b20-a44e-bd6c8d546765.mp4\n\n# ü§ó Acknowledgements\n- Thanks to HuggingFace for their support of T2I-Adapter.\n- T2I-Adapter is co-hosted by Tencent ARC Lab and Peking University [VILLA](https://villa.jianzhang.tech/).\n\n# BibTeX\n\n    @article{mou2023t2i,\n      title={T2i-adapter: Learning adapters to dig out more controllable ability for text-to-image diffusion models},\n      author={Mou, Chong and Wang, Xintao and Xie, Liangbin and Wu, Yanze and Zhang, Jian and Qi, Zhongang and Shan, Ying and Qie, Xiaohu},\n      journal={arXiv preprint arXiv:2302.08453},\n      year={2023}\n    }\n"
        },
        {
          "name": "app.py",
          "type": "blob",
          "size": 3.853515625,
          "content": "import copy\nimport gradio as gr\nimport torch\nfrom basicsr.utils import tensor2img\nimport os\nfrom huggingface_hub import hf_hub_url\nimport subprocess\nimport shlex\nimport cv2\nfrom omegaconf import OmegaConf\n\nfrom demo import create_demo_sketch, create_demo_canny, create_demo_pose\nfrom Adapter.Sampling import diffusion_inference\nfrom configs.utils import instantiate_from_config\nfrom Adapter.extra_condition.api import get_cond_model, ExtraCondition\nfrom Adapter.extra_condition import api\nfrom Adapter.inference_base import get_base_argument_parser\n\ntorch.set_grad_enabled(False)\n\nurls = {\n    'TencentARC/T2I-Adapter':[\n        'models_XL/adapter-xl-canny.pth', 'models_XL/adapter-xl-sketch.pth',\n        'models_XL/adapter-xl-openpose.pth', 'third-party-models/body_pose_model.pth',\n        'third-party-models/table5_pidinet.pth'\n    ]\n}\n\nif os.path.exists('checkpoints') == False:\n    os.mkdir('checkpoints')\nfor repo in urls:\n    files = urls[repo]\n    for file in files:\n        url = hf_hub_url(repo, file)\n        name_ckp = url.split('/')[-1]\n        save_path = os.path.join('checkpoints',name_ckp)\n        if os.path.exists(save_path) == False:\n            subprocess.run(shlex.split(f'wget {url} -O {save_path}'))\n\nparser = get_base_argument_parser()\nglobal_opt = parser.parse_args()\nglobal_opt.device = torch.device(\"cuda\") if torch.cuda.is_available() else torch.device(\"cpu\")\n\nDESCRIPTION = '# [T2I-Adapter-XL](https://github.com/TencentARC/T2I-Adapter)'\n\nDESCRIPTION += f'<p>Gradio demo for **T2I-Adapter-XL**: [[GitHub]](https://github.com/TencentARC/T2I-Adapter). If T2I-Adapter-XL is helpful, please help to ‚≠ê the [Github Repo](https://github.com/TencentARC/T2I-Adapter) and recommend it to your friends üòä </p>'\n\n# DESCRIPTION += f'<p>For faster inference without waiting in queue, you may duplicate the space and upgrade to GPU in settings. <a href=\"https://huggingface.co/spaces/Adapter/T2I-Adapter?duplicate=true\"><img style=\"display: inline; margin-top: 0em; margin-bottom: 0em\" src=\"https://bit.ly/3gLdBN6\" alt=\"Duplicate Space\" /></a></p>'\n\n# diffusion sampler creation\nsampler = diffusion_inference('stabilityai/stable-diffusion-xl-base-1.0')\n\ndef run(input_image, in_type, prompt, a_prompt, n_prompt, ddim_steps, scale, seed, cond_name, con_strength):\n    in_type = in_type.lower()\n    prompt = prompt+', '+a_prompt\n    config = OmegaConf.load(f'configs/inference/Adapter-XL-{cond_name}.yaml')\n    # Adapter creation\n    adapter_config = config.model.params.adapter_config\n    adapter = instantiate_from_config(adapter_config).cuda()\n    adapter.load_state_dict(torch.load(config.model.params.adapter_config.pretrained))\n    cond_model = get_cond_model(global_opt, getattr(ExtraCondition, cond_name))\n    process_cond_module = getattr(api, f'get_cond_{cond_name}')\n\n    # diffusion generation\n    cond = process_cond_module(\n        global_opt,\n        input_image, \n        cond_inp_type = in_type, \n        cond_model = cond_model\n    )\n    with torch.no_grad():\n        adapter_features = adapter(cond)\n\n        for i in range(len(adapter_features)):\n            adapter_features[i] = adapter_features[i]*con_strength\n\n        result = sampler.inference(\n            prompt = prompt, \n            prompt_n = n_prompt,\n            steps = ddim_steps,\n            adapter_features = copy.deepcopy(adapter_features), \n            guidance_scale = scale,\n            size = (cond.shape[-2], cond.shape[-1]),\n            seed= seed,\n        )\n    im_cond = tensor2img(cond)\n\n    return result[:,:,::-1], im_cond\n\nwith gr.Blocks(css='style.css') as demo:\n    gr.Markdown(DESCRIPTION)\n    with gr.Tabs():\n        with gr.TabItem('Sketch guided'):\n            create_demo_sketch(run)\n        with gr.TabItem('Canny guided'):\n            create_demo_canny(run)\n        with gr.TabItem('Keypoint guided'):\n            create_demo_pose(run)\n\ndemo.queue(concurrency_count=3, max_size=20)\ndemo.launch(server_name=\"0.0.0.0\")\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "dataset",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo.py",
          "type": "blob",
          "size": 8.0009765625,
          "content": "import gradio as gr\n\ndef create_demo_sketch(run):\n    cond_name = gr.State(value='sketch')\n    with gr.Blocks() as demo:\n        with gr.Row():\n            gr.Markdown('## Control Stable Diffusion-XL with Sketch Maps')\n        with gr.Row():\n            with gr.Column():\n                input_image = gr.Image(source='upload', type='numpy')\n                prompt = gr.Textbox(label='Prompt')\n                run_button = gr.Button(label='Run')\n                in_type = gr.Radio(\n                            choices=[\"Image\", \"Sketch\"],\n                            label=f\"Input type for Sketch\",\n                            interactive=True,\n                            value=\"Image\",\n                        )\n                with gr.Accordion('Advanced options', open=False):\n                    con_strength = gr.Slider(label='Control Strength',\n                                      minimum=0.0,\n                                      maximum=1.0,\n                                      value=1.0,\n                                      step=0.1)\n                    ddim_steps = gr.Slider(label='Steps',\n                                           minimum=1,\n                                           maximum=100,\n                                           value=20,\n                                           step=1)\n                    scale = gr.Slider(label='Guidance Scale',\n                                      minimum=0.1,\n                                      maximum=30.0,\n                                      value=7.5,\n                                      step=0.1)\n                    seed = gr.Slider(label='Seed',\n                                     minimum=-1,\n                                     maximum=2147483647,\n                                     step=1,\n                                     randomize=True)\n                    a_prompt = gr.Textbox(\n                        label='Added Prompt',\n                        value='in real world, high quality')\n                    n_prompt = gr.Textbox(\n                        label='Negative Prompt',\n                        value='extra digit, fewer digits, cropped, worst quality, low quality'\n                    )\n            with gr.Column():\n                result_gallery = gr.Gallery(label='Output',\n                                            show_label=False,\n                                            elem_id='gallery').style(\n                                                grid=2, height='auto')\n        ips = [\n            input_image, in_type, prompt, a_prompt, n_prompt,\n            ddim_steps, scale, seed, cond_name, con_strength\n        ]\n        run_button.click(fn=run,\n                         inputs=ips,\n                         outputs=[result_gallery],\n                         api_name='sketch')\n    return demo\n\ndef create_demo_canny(run):\n    cond_name = gr.State(value='canny')\n    with gr.Blocks() as demo:\n        with gr.Row():\n            gr.Markdown('## Control Stable Diffusion-XL with Canny Maps')\n        with gr.Row():\n            with gr.Column():\n                input_image = gr.Image(source='upload', type='numpy')\n                prompt = gr.Textbox(label='Prompt')\n                run_button = gr.Button(label='Run')\n                in_type = gr.Radio(\n                            choices=[\"Image\", \"Canny\"],\n                            label=f\"Input type for Canny\",\n                            interactive=True,\n                            value=\"Image\",\n                        )\n                with gr.Accordion('Advanced options', open=False):\n                    con_strength = gr.Slider(label='Control Strength',\n                                      minimum=0.0,\n                                      maximum=1.0,\n                                      value=1.0,\n                                      step=0.1)\n                    ddim_steps = gr.Slider(label='Steps',\n                                           minimum=1,\n                                           maximum=100,\n                                           value=20,\n                                           step=1)\n                    scale = gr.Slider(label='Guidance Scale',\n                                      minimum=0.1,\n                                      maximum=30.0,\n                                      value=7.5,\n                                      step=0.1)\n                    seed = gr.Slider(label='Seed',\n                                     minimum=-1,\n                                     maximum=2147483647,\n                                     step=1,\n                                     randomize=True)\n                    a_prompt = gr.Textbox(\n                        label='Added Prompt',\n                        value='in real world, high quality')\n                    n_prompt = gr.Textbox(\n                        label='Negative Prompt',\n                        value='extra digit, fewer digits, cropped, worst quality, low quality'\n                    )\n            with gr.Column():\n                result_gallery = gr.Gallery(label='Output',\n                                            show_label=False,\n                                            elem_id='gallery').style(\n                                                grid=2, height='auto')\n        ips = [\n            input_image, in_type, prompt, a_prompt, n_prompt,\n            ddim_steps, scale, seed, cond_name, con_strength\n        ]\n        run_button.click(fn=run,\n                         inputs=ips,\n                         outputs=[result_gallery],\n                         api_name='canny')\n    return demo\n\ndef create_demo_pose(run):\n    cond_name = gr.State(value='openpose')\n    in_type = gr.State(value='Image')\n    with gr.Blocks() as demo:\n        with gr.Row():\n            gr.Markdown('## Control Stable Diffusion-XL with Keypoint Maps')\n        with gr.Row():\n            with gr.Column():\n                input_image = gr.Image(source='upload', type='numpy')\n                prompt = gr.Textbox(label='Prompt')\n                run_button = gr.Button(label='Run')\n                with gr.Accordion('Advanced options', open=False):\n                    con_strength = gr.Slider(label='Control Strength',\n                                      minimum=0.0,\n                                      maximum=1.0,\n                                      value=1.0,\n                                      step=0.1)\n                    ddim_steps = gr.Slider(label='Steps',\n                                           minimum=1,\n                                           maximum=100,\n                                           value=20,\n                                           step=1)\n                    scale = gr.Slider(label='Guidance Scale',\n                                      minimum=0.1,\n                                      maximum=30.0,\n                                      value=7.5,\n                                      step=0.1)\n                    seed = gr.Slider(label='Seed',\n                                     minimum=-1,\n                                     maximum=2147483647,\n                                     step=1,\n                                     randomize=True)\n                    a_prompt = gr.Textbox(\n                        label='Added Prompt',\n                        value='in real world, high quality')\n                    n_prompt = gr.Textbox(\n                        label='Negative Prompt',\n                        value='extra digit, fewer digits, cropped, worst quality, low quality'\n                    )\n            with gr.Column():\n                result_gallery = gr.Gallery(label='Output',\n                                            show_label=False,\n                                            elem_id='gallery').style(\n                                                grid=2, height='auto')\n        ips = [\n            input_image, in_type, prompt, a_prompt, n_prompt,\n            ddim_steps, scale, seed, cond_name, con_strength\n        ]\n        run_button.click(fn=run,\n                         inputs=ips,\n                         outputs=[result_gallery],\n                         api_name='openpose')\n    return demo"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.095703125,
          "content": "torch==2.0.1\ndiffusers==0.19.3\nomegaconf\ntransformers\ndatasets\npytorch_lightning\ngradio\naccelerate"
        },
        {
          "name": "test.py",
          "type": "blob",
          "size": 1.6708984375,
          "content": "from diffusers import StableDiffusionXLAdapterPipeline, T2IAdapter, EulerAncestralDiscreteScheduler, AutoencoderKL\nfrom diffusers.utils import load_image, make_image_grid\nfrom controlnet_aux.lineart import LineartDetector\nimport torch\n\nif __name__ == '__main__':\n    # load adapter\n    adapter = T2IAdapter.from_pretrained(\n      \"TencentARC/t2i-adapter-lineart-sdxl-1.0\", torch_dtype=torch.float16, varient=\"fp16\"\n    ).to(\"cuda\")\n    \n    # load euler_a scheduler\n    model_id = 'stabilityai/stable-diffusion-xl-base-1.0'\n    euler_a = EulerAncestralDiscreteScheduler.from_pretrained(model_id, subfolder=\"scheduler\")\n    vae=AutoencoderKL.from_pretrained(\"madebyollin/sdxl-vae-fp16-fix\", torch_dtype=torch.float16)\n    pipe = StableDiffusionXLAdapterPipeline.from_pretrained(\n        model_id, vae=vae, adapter=adapter, scheduler=euler_a, torch_dtype=torch.float16, variant=\"fp16\", \n    ).to(\"cuda\")\n    pipe.enable_xformers_memory_efficient_attention()\n    \n    line_detector = LineartDetector.from_pretrained(\"lllyasviel/Annotators\").to(\"cuda\")\n    \n    url = \"https://huggingface.co/Adapter/t2iadapter/resolve/main/figs_SDXLV1.0/org_lin.jpg\"\n    image = load_image(url)\n    image = line_detector(\n        image, detect_resolution=384, image_resolution=1024\n    )\n    \n    prompt = \"Ice dragon roar, 4k photo\"\n    negative_prompt = \"anime, cartoon, graphic, text, painting, crayon, graphite, abstract, glitch, deformed, mutated, ugly, disfigured\"\n    gen_images = pipe(\n        prompt=prompt,\n        negative_prompt=negative_prompt,\n        image=image,\n        num_inference_steps=30,\n        adapter_conditioning_scale=0.8,\n        guidance_scale=7.5, \n    ).images[0]\n    gen_images.save('out_lin.png')\n"
        },
        {
          "name": "train_sketch.py",
          "type": "blob",
          "size": 29.8232421875,
          "content": "#!/usr/bin/env python\n# coding=utf-8\n# Copyright 2023 The HuggingFace Inc. team. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n\nimport argparse\nimport functools\nimport gc\nimport logging\nimport math\nimport os\nimport random\nimport shutil\nfrom pathlib import Path\n\nimport accelerate\nimport numpy as np\nimport torch\nimport torch.nn.functional as F\nimport torch.utils.checkpoint\nimport transformers\nfrom accelerate import Accelerator\nfrom accelerate.logging import get_logger\nfrom accelerate.utils import ProjectConfiguration, set_seed\nfrom datasets import load_dataset\nfrom huggingface_hub import create_repo, upload_folder\nfrom packaging import version\nfrom PIL import Image\nfrom torchvision import transforms\nfrom tqdm.auto import tqdm\nfrom transformers import AutoTokenizer, PretrainedConfig\n\nimport diffusers\nfrom diffusers import (\n    AutoencoderKL,\n    DDPMScheduler,\n    UNet2DConditionModel,\n    UniPCMultistepScheduler,\n)\nfrom diffusers.optimization import get_scheduler\nfrom diffusers.utils import check_min_version, is_wandb_available\nfrom diffusers.utils.import_utils import is_xformers_available\n\nfrom configs.utils import instantiate_from_config\nfrom omegaconf import OmegaConf\nfrom Adapter.extra_condition.model_edge import pidinet\nfrom models.unet import UNet\nfrom basicsr.utils import tensor2img\nimport cv2\nfrom huggingface_hub import hf_hub_url\nimport subprocess\nimport shlex\n\nurls = {\n    'TencentARC/T2I-Adapter':[\n        'third-party-models/body_pose_model.pth', 'third-party-models/table5_pidinet.pth'\n    ]\n}\n\nif os.path.exists('checkpoints') == False:\n    os.mkdir('checkpoints')\nfor repo in urls:\n    files = urls[repo]\n    for file in files:\n        url = hf_hub_url(repo, file)\n        name_ckp = url.split('/')[-1]\n        save_path = os.path.join('checkpoints',name_ckp)\n        if os.path.exists(save_path) == False:\n            subprocess.run(shlex.split(f'wget {url} -O {save_path}'))\n\n\nif is_wandb_available():\n    import wandb\n\n# Will error if the minimal version of diffusers is not installed. Remove at your own risks.\n# check_min_version(\"0.20.0.dev0\")\n\nlogger = get_logger(__name__)\n\ndef import_model_class_from_model_name_or_path(\n    pretrained_model_name_or_path: str, revision: str, subfolder: str = \"text_encoder\"\n):\n    text_encoder_config = PretrainedConfig.from_pretrained(\n        pretrained_model_name_or_path, subfolder=subfolder, revision=revision\n    )\n    model_class = text_encoder_config.architectures[0]\n\n    if model_class == \"CLIPTextModel\":\n        from transformers import CLIPTextModel\n\n        return CLIPTextModel\n    elif model_class == \"CLIPTextModelWithProjection\":\n        from transformers import CLIPTextModelWithProjection\n\n        return CLIPTextModelWithProjection\n    else:\n        raise ValueError(f\"{model_class} is not supported.\")\n\n\ndef parse_args(input_args=None):\n    parser = argparse.ArgumentParser(description=\"Simple example of a T2I-Adapter training script.\")\n    parser.add_argument(\n        \"--pretrained_model_name_or_path\",\n        type=str,\n        default=None,\n        required=True,\n        help=\"Path to pretrained model or model identifier from huggingface.co/models.\",\n    )\n    parser.add_argument(\n        \"--pretrained_vae_model_name_or_path\",\n        type=str,\n        default=None,\n        help=\"Path to an improved VAE to stabilize training. For more details check out: https://github.com/huggingface/diffusers/pull/4038.\",\n    )\n    parser.add_argument(\n        \"--revision\",\n        type=str,\n        default=None,\n        required=False,\n        help=(\n            \"Revision of pretrained model identifier from huggingface.co/models. Trainable model components should be\"\n            \" float32 precision.\"\n        ),\n    )\n    parser.add_argument(\n        \"--tokenizer_name\",\n        type=str,\n        default=None,\n        help=\"Pretrained tokenizer name or path if not the same as model_name\",\n    )\n    parser.add_argument(\n        \"--output_dir\",\n        type=str,\n        default=\"experiments/adapter_xl_sketch\",\n        help=\"The output directory where the model predictions and checkpoints will be written.\",\n    )\n    parser.add_argument(\"--seed\", type=int, default=None, help=\"A seed for reproducible training.\")\n    parser.add_argument(\n        \"--resolution\",\n        type=int,\n        default=1024,\n        help=(\n            \"The resolution for input images, all the images in the train/validation dataset will be resized to this\"\n            \" resolution\"\n        ),\n    )\n    parser.add_argument(\n        \"--crops_coords_top_left_h\",\n        type=int,\n        default=0,\n        help=(\"Coordinate for (the height) to be included in the crop coordinate embeddings needed by SDXL UNet.\"),\n    )\n    parser.add_argument(\n        \"--crops_coords_top_left_w\",\n        type=int,\n        default=0,\n        help=(\"Coordinate for (the height) to be included in the crop coordinate embeddings needed by SDXL UNet.\"),\n    )\n    parser.add_argument(\n        \"--train_batch_size\", type=int, default=4, help=\"Batch size (per device) for the training dataloader.\"\n    )\n    parser.add_argument(\"--num_train_epochs\", type=int, default=1)\n    parser.add_argument(\n        \"--max_train_steps\",\n        type=int,\n        default=None,\n        help=\"Total number of training steps to perform.  If provided, overrides num_train_epochs.\",\n    )\n    parser.add_argument(\n        \"--checkpointing_steps\",\n        type=int,\n        default=1000,\n        help=(\n            \"Save a checkpoint of the training state every X updates. Checkpoints can be used for resuming training via `--resume_from_checkpoint`. \"\n            \"In the case that the checkpoint is better than the final trained model, the checkpoint can also be used for inference.\"\n            \"Using a checkpoint for inference requires separate loading of the original pipeline and the individual checkpointed model components.\"\n            \"See https://huggingface.co/docs/diffusers/main/en/training/dreambooth#performing-inference-using-a-saved-checkpoint for step by step\"\n            \"instructions.\"\n        ),\n    )\n    parser.add_argument(\n        \"--gradient_accumulation_steps\",\n        type=int,\n        default=1,\n        help=\"Number of updates steps to accumulate before performing a backward/update pass.\",\n    )\n    parser.add_argument(\n        \"--gradient_checkpointing\",\n        action=\"store_true\",\n        help=\"Whether or not to use gradient checkpointing to save memory at the expense of slower backward pass.\",\n    )\n    parser.add_argument(\n        \"--learning_rate\",\n        type=float,\n        default=5e-6,\n        help=\"Initial learning rate (after the potential warmup period) to use.\",\n    )\n    parser.add_argument(\n        \"--scale_lr\",\n        action=\"store_true\",\n        default=False,\n        help=\"Scale the learning rate by the number of GPUs, gradient accumulation steps, and batch size.\",\n    )\n    parser.add_argument(\n        \"--config\",\n        type=str,\n        default=\"configs/train/Adapter-XL-sketch.yaml\",\n        help=('config to load the train model and dataset'),\n    )\n    parser.add_argument(\n        \"--lr_scheduler\",\n        type=str,\n        default=\"constant\",\n        help=(\n            'The scheduler type to use. Choose between [\"linear\", \"cosine\", \"cosine_with_restarts\", \"polynomial\",'\n            ' \"constant\", \"constant_with_warmup\"]'\n        ),\n    )\n    parser.add_argument(\n        \"--lr_warmup_steps\", type=int, default=500, help=\"Number of steps for the warmup in the lr scheduler.\"\n    )\n    parser.add_argument(\n        \"--lr_num_cycles\",\n        type=int,\n        default=1,\n        help=\"Number of hard resets of the lr in cosine_with_restarts scheduler.\",\n    )\n    parser.add_argument(\"--lr_power\", type=float, default=1.0, help=\"Power factor of the polynomial scheduler.\")\n    parser.add_argument(\n        \"--use_8bit_adam\", action=\"store_true\", help=\"Whether or not to use 8-bit Adam from bitsandbytes.\"\n    )\n    parser.add_argument(\n        \"--dataloader_num_workers\",\n        type=int,\n        default=0,\n        help=(\n            \"Number of subprocesses to use for data loading. 0 means that the data will be loaded in the main process.\"\n        ),\n    )\n    parser.add_argument(\"--adam_beta1\", type=float, default=0.9, help=\"The beta1 parameter for the Adam optimizer.\")\n    parser.add_argument(\"--adam_beta2\", type=float, default=0.999, help=\"The beta2 parameter for the Adam optimizer.\")\n    parser.add_argument(\"--adam_weight_decay\", type=float, default=1e-2, help=\"Weight decay to use.\")\n    parser.add_argument(\"--adam_epsilon\", type=float, default=1e-08, help=\"Epsilon value for the Adam optimizer\")\n    parser.add_argument(\"--max_grad_norm\", default=1.0, type=float, help=\"Max gradient norm.\")\n    parser.add_argument(\n        \"--logging_dir\",\n        type=str,\n        default=\"logs\",\n        help=(\n            \"[TensorBoard](https://www.tensorflow.org/tensorboard) log directory. Will default to\"\n            \" *output_dir/runs/**CURRENT_DATETIME_HOSTNAME***.\"\n        ),\n    )\n    parser.add_argument(\n        \"--allow_tf32\",\n        action=\"store_true\",\n        help=(\n            \"Whether or not to allow TF32 on Ampere GPUs. Can be used to speed up training. For more information, see\"\n            \" https://pytorch.org/docs/stable/notes/cuda.html#tensorfloat-32-tf32-on-ampere-devices\"\n        ),\n    )\n    parser.add_argument(\n        \"--report_to\",\n        type=str,\n        default=\"tensorboard\",\n        help=(\n            'The integration to report the results and logs to. Supported platforms are `\"tensorboard\"`'\n            ' (default), `\"wandb\"` and `\"comet_ml\"`. Use `\"all\"` to report to all integrations.'\n        ),\n    )\n    parser.add_argument(\n        \"--mixed_precision\",\n        type=str,\n        default=None,\n        choices=[\"no\", \"fp16\", \"bf16\"],\n        help=(\n            \"Whether to use mixed precision. Choose between fp16 and bf16 (bfloat16). Bf16 requires PyTorch >=\"\n            \" 1.10.and an Nvidia Ampere GPU.  Default to the value of accelerate config of the current system or the\"\n            \" flag passed with the `accelerate.launch` command. Use this argument to override the accelerate config.\"\n        ),\n    )\n    parser.add_argument(\n        \"--enable_xformers_memory_efficient_attention\", action=\"store_true\", help=\"Whether or not to use xformers.\"\n    )\n    parser.add_argument(\n        \"--set_grads_to_none\",\n        action=\"store_true\",\n        help=(\n            \"Save more memory by using setting grads to None instead of zero. Be aware, that this changes certain\"\n            \" behaviors, so disable this argument if it causes any problems. More info:\"\n            \" https://pytorch.org/docs/stable/generated/torch.optim.Optimizer.zero_grad.html\"\n        ),\n    )\n    parser.add_argument(\n        \"--proportion_empty_prompts\",\n        type=float,\n        default=0,\n        help=\"Proportion of image prompts to be replaced with empty strings. Defaults to 0 (no prompt replacement).\",\n    )\n    parser.add_argument(\n        \"--tracker_project_name\",\n        type=str,\n        default=\"sd_xl_train_t2i_adapter \",\n        help=(\n            \"The `project_name` argument passed to Accelerator.init_trackers for\"\n            \" more information see https://huggingface.co/docs/accelerate/v0.17.0/en/package_reference/accelerator#accelerate.Accelerator\"\n        ),\n    )\n\n    if input_args is not None:\n        args = parser.parse_args(input_args)\n    else:\n        args = parser.parse_args()\n\n    if args.proportion_empty_prompts < 0 or args.proportion_empty_prompts > 1:\n        raise ValueError(\"`--proportion_empty_prompts` must be in the range [0, 1].\")\n\n    if args.resolution % 8 != 0:\n        raise ValueError(\n            \"`--resolution` must be divisible by 8 for consistently sized encoded images between the VAE and T2I-Adapter.\"\n        )\n\n    return args\n\n\n# Adapted from pipelines.StableDiffusionXLPipeline.encode_prompt\ndef encode_prompt(prompt_batch, text_encoders, tokenizers, proportion_empty_prompts, is_train=True):\n    prompt_embeds_list = []\n\n    captions = []\n    for caption in prompt_batch:\n        if random.random() < proportion_empty_prompts:\n            captions.append(\"\")\n        elif isinstance(caption, str):\n            captions.append(caption)\n        elif isinstance(caption, (list, np.ndarray)):\n            # take a random caption if there are multiple\n            captions.append(random.choice(caption) if is_train else caption[0])\n\n    with torch.no_grad():\n        for tokenizer, text_encoder in zip(tokenizers, text_encoders):\n            text_inputs = tokenizer(\n                captions,\n                padding=\"max_length\",\n                max_length=tokenizer.model_max_length,\n                truncation=True,\n                return_tensors=\"pt\",\n            )\n            text_input_ids = text_inputs.input_ids\n            prompt_embeds = text_encoder(\n                text_input_ids.to(text_encoder.device),\n                output_hidden_states=True,\n            )\n\n            # We are only ALWAYS interested in the pooled output of the final text encoder\n            pooled_prompt_embeds = prompt_embeds[0]\n            prompt_embeds = prompt_embeds.hidden_states[-2]\n            bs_embed, seq_len, _ = prompt_embeds.shape\n            prompt_embeds = prompt_embeds.view(bs_embed, seq_len, -1)\n            prompt_embeds_list.append(prompt_embeds)\n\n    prompt_embeds = torch.concat(prompt_embeds_list, dim=-1)\n    pooled_prompt_embeds = pooled_prompt_embeds.view(bs_embed, -1)\n    return prompt_embeds, pooled_prompt_embeds\n\n\ndef random_threshold(edge, low_threshold=0.3, high_threshold=0.8):\n        threshold = round(random.uniform(low_threshold, high_threshold), 1)\n        edge = edge > threshold\n        return edge\n\n\ndef main(args):\n    logging_dir = Path(args.output_dir, args.logging_dir)\n\n    accelerator_project_config = ProjectConfiguration(project_dir=args.output_dir, logging_dir=logging_dir)\n\n    accelerator = Accelerator(\n        gradient_accumulation_steps=args.gradient_accumulation_steps,\n        mixed_precision=args.mixed_precision,\n        log_with=args.report_to,\n        project_config=accelerator_project_config,\n    )\n\n    # Make one log on every process with the configuration for debugging.\n    logging.basicConfig(\n        format=\"%(asctime)s - %(levelname)s - %(name)s - %(message)s\",\n        datefmt=\"%m/%d/%Y %H:%M:%S\",\n        level=logging.INFO,\n    )\n    logger.info(accelerator.state, main_process_only=False)\n    if accelerator.is_local_main_process:\n        transformers.utils.logging.set_verbosity_warning()\n        diffusers.utils.logging.set_verbosity_info()\n    else:\n        transformers.utils.logging.set_verbosity_error()\n        diffusers.utils.logging.set_verbosity_error()\n\n    # If passed along, set the training seed now.\n    if args.seed is not None:\n        set_seed(args.seed)\n\n    # Handle the repository creation\n    if accelerator.is_main_process:\n        if args.output_dir is not None:\n            os.makedirs(args.output_dir, exist_ok=True)\n\n    # Load the tokenizers\n    tokenizer_one = AutoTokenizer.from_pretrained(\n        args.pretrained_model_name_or_path, subfolder=\"tokenizer\", revision=args.revision, use_fast=False\n    )\n    tokenizer_two = AutoTokenizer.from_pretrained(\n        args.pretrained_model_name_or_path, subfolder=\"tokenizer_2\", revision=args.revision, use_fast=False\n    )\n\n    # import correct text encoder classes\n    text_encoder_cls_one = import_model_class_from_model_name_or_path(\n        args.pretrained_model_name_or_path, args.revision\n    )\n    text_encoder_cls_two = import_model_class_from_model_name_or_path(\n        args.pretrained_model_name_or_path, args.revision, subfolder=\"text_encoder_2\"\n    )\n\n    # Load scheduler and models\n    noise_scheduler = DDPMScheduler.from_pretrained(args.pretrained_model_name_or_path, subfolder=\"scheduler\")\n    text_encoder_one = text_encoder_cls_one.from_pretrained(\n        args.pretrained_model_name_or_path, subfolder=\"text_encoder\", revision=args.revision\n    )\n    text_encoder_two = text_encoder_cls_two.from_pretrained(\n        args.pretrained_model_name_or_path, subfolder=\"text_encoder_2\", revision=args.revision\n    )\n    vae_path = (\n        args.pretrained_model_name_or_path\n        if args.pretrained_vae_model_name_or_path is None\n        else args.pretrained_vae_model_name_or_path\n    )\n    vae = AutoencoderKL.from_pretrained(\n        vae_path,\n        subfolder=\"vae\" if args.pretrained_vae_model_name_or_path is None else None,\n        revision=args.revision,\n    )\n    unet = UNet.from_pretrained(\n        args.pretrained_model_name_or_path, subfolder=\"unet\", revision=args.revision\n    )\n\n    # `accelerate` 0.16.0 will have better support for customized saving\n    if version.parse(accelerate.__version__) >= version.parse(\"0.16.0\"):\n        # create custom saving & loading hooks so that `accelerator.save_state(...)` serializes in a nice format\n        def save_model_hook(models, weights, output_dir):\n            i = len(weights) - 1\n\n            while len(weights) > 0:\n                weights.pop()\n                model = models[i]\n                torch.save(model.state_dict(), os.path.join(output_dir, 'model_%02d.pth'%i))\n                i -= 1\n\n        accelerator.register_save_state_pre_hook(save_model_hook)\n\n    vae.requires_grad_(False)\n    text_encoder_one.requires_grad_(False)\n    text_encoder_two.requires_grad_(False)\n\n    if args.enable_xformers_memory_efficient_attention:\n        if is_xformers_available():\n            import xformers\n\n            xformers_version = version.parse(xformers.__version__)\n            if xformers_version == version.parse(\"0.0.16\"):\n                logger.warn(\n                    \"xFormers 0.0.16 cannot be used for training in some GPUs. If you observe problems during training, please update xFormers to at least 0.0.17. See https://huggingface.co/docs/diffusers/main/en/optimization/xformers for more details.\"\n                )\n            unet.enable_xformers_memory_efficient_attention()\n        else:\n            raise ValueError(\"xformers is not available. Make sure it is installed correctly\")\n\n    if args.gradient_checkpointing:\n        unet.enable_gradient_checkpointing()\n\n    # Enable TF32 for faster training on Ampere GPUs,\n    # cf https://pytorch.org/docs/stable/notes/cuda.html#tensorfloat-32-tf32-on-ampere-devices\n    if args.allow_tf32:\n        torch.backends.cuda.matmul.allow_tf32 = True\n\n    if args.scale_lr:\n        args.learning_rate = (\n            args.learning_rate * args.gradient_accumulation_steps * args.train_batch_size * accelerator.num_processes\n        )\n\n    # Use 8-bit Adam for lower memory usage or to fine-tune the model in 16GB GPUs\n    if args.use_8bit_adam:\n        try:\n            import bitsandbytes as bnb\n        except ImportError:\n            raise ImportError(\n                \"To use 8-bit Adam, please install the bitsandbytes library: `pip install bitsandbytes`.\"\n            )\n\n        optimizer_class = bnb.optim.AdamW8bit\n    else:\n        optimizer_class = torch.optim.AdamW\n\n    # configs\n    config = OmegaConf.load(args.config)\n    # Optimizer creation\n    adapter_config = config.model.params.adapter_config\n    adapter = instantiate_from_config(adapter_config).cuda()\n    params_to_optimize = adapter.parameters()\n    optimizer = optimizer_class(\n        params_to_optimize,\n        lr=args.learning_rate,\n        betas=(args.adam_beta1, args.adam_beta2),\n        weight_decay=args.adam_weight_decay,\n        eps=args.adam_epsilon,\n    )\n    # load sketch model\n    sketch_model = pidinet()\n    ckp = torch.load('checkpoints/table5_pidinet.pth', map_location='cpu')['state_dict']\n    sketch_model.load_state_dict({k.replace('module.', ''): v for k, v in ckp.items()}, strict=True)\n    sketch_model = sketch_model.cuda()\n    for param in sketch_model.parameters():\n        param.required_grad = False\n\n    # For mixed precision training we cast the text_encoder and vae weights to half-precision\n    # as these models are only used for inference, keeping weights in full precision is not required.\n    weight_dtype = torch.float32\n    if accelerator.mixed_precision == \"fp16\":\n        weight_dtype = torch.float16\n    elif accelerator.mixed_precision == \"bf16\":\n        weight_dtype = torch.bfloat16\n\n    # Move vae, unet and text_encoder to device and cast to weight_dtype\n    # The VAE is in float32 to avoid NaN losses.\n    if args.pretrained_vae_model_name_or_path is not None:\n        vae.to(accelerator.device, dtype=weight_dtype)\n    else:\n        vae.to(accelerator.device, dtype=torch.float32)\n    unet.to(accelerator.device, dtype=weight_dtype)\n    text_encoder_one.to(accelerator.device, dtype=weight_dtype)\n    text_encoder_two.to(accelerator.device, dtype=weight_dtype)\n\n    # Here, we compute not just the text embeddings but also the additional embeddings\n    # needed for the SD XL UNet to operate.\n    def compute_embeddings(batch, proportion_empty_prompts, text_encoders, tokenizers, is_train=True):\n        original_size = (args.resolution, args.resolution)\n        target_size = (args.resolution, args.resolution)\n        crops_coords_top_left = (args.crops_coords_top_left_h, args.crops_coords_top_left_w)\n        prompt_batch = batch['txt']\n\n        prompt_embeds, pooled_prompt_embeds = encode_prompt(\n            prompt_batch, text_encoders, tokenizers, proportion_empty_prompts, is_train\n        )\n        add_text_embeds = pooled_prompt_embeds\n\n        # Adapted from pipeline.StableDiffusionXLPipeline._get_add_time_ids\n        add_time_ids = list(original_size + crops_coords_top_left + target_size)\n        add_time_ids = torch.tensor([add_time_ids])\n\n        prompt_embeds = prompt_embeds.to(accelerator.device)\n        add_text_embeds = add_text_embeds.to(accelerator.device)\n        add_time_ids = add_time_ids.repeat(len(prompt_batch), 1)\n        add_time_ids = add_time_ids.to(accelerator.device, dtype=prompt_embeds.dtype)\n        unet_added_cond_kwargs = {\"text_embeds\": add_text_embeds, \"time_ids\": add_time_ids}\n\n        return {\"prompt_embeds\": prompt_embeds}, unet_added_cond_kwargs#, **unet_added_cond_kwargs}\n\n    # Let's first compute all the embeddings so that we can free up the text encoders\n    # from memory.\n    text_encoders = [text_encoder_one, text_encoder_two]\n    tokenizers = [tokenizer_one, tokenizer_two]\n    gc.collect()\n    torch.cuda.empty_cache()\n\n    # data\n    data = instantiate_from_config(config.data)\n    train_dataloader = data.train_dataloader()\n\n    # Scheduler and math around the number of training steps.\n    overrode_max_train_steps = False\n    # num_update_steps_per_epoch = math.ceil(len(train_dataloader) / args.gradient_accumulation_steps)\n    num_update_steps_per_epoch = math.ceil(1e7 / args.gradient_accumulation_steps)\n    if args.max_train_steps is None:\n        args.max_train_steps = args.num_train_epochs * num_update_steps_per_epoch\n        overrode_max_train_steps = True\n\n    lr_scheduler = get_scheduler(\n        args.lr_scheduler,\n        optimizer=optimizer,\n        num_warmup_steps=args.lr_warmup_steps * accelerator.num_processes,\n        num_training_steps=args.max_train_steps * accelerator.num_processes,\n        num_cycles=args.lr_num_cycles,\n        power=args.lr_power,\n    )\n\n    # Prepare everything with our `accelerator`.\n    adapter, optimizer, train_dataloader, lr_scheduler = accelerator.prepare(\n        adapter, optimizer, train_dataloader, lr_scheduler\n    )\n\n    # We need to recalculate our total training steps as the size of the training dataloader may have changed.\n    # num_update_steps_per_epoch = math.ceil(len(train_dataloader) / args.gradient_accumulation_steps)\n    # if overrode_max_train_steps:\n    #     args.max_train_steps = args.num_train_epochs * num_update_steps_per_epoch\n    # # Afterwards we recalculate our number of training epochs\n    # args.num_train_epochs = math.ceil(args.max_train_steps / num_update_steps_per_epoch)\n\n    # We need to initialize the trackers we use, and also store our configuration.\n    # The trackers initializes automatically on the main process.\n    if accelerator.is_main_process:\n        tracker_config = dict(vars(args))\n\n        accelerator.init_trackers(args.tracker_project_name, config=tracker_config)\n\n    # Train!\n    total_batch_size = args.train_batch_size * accelerator.num_processes * args.gradient_accumulation_steps\n\n    logger.info(\"***** Running training *****\")\n    logger.info(f\"  Num Epochs = {args.num_train_epochs}\")\n    logger.info(f\"  Instantaneous batch size per device = {args.train_batch_size}\")\n    logger.info(f\"  Total train batch size (w. parallel, distributed & accumulation) = {total_batch_size}\")\n    logger.info(f\"  Gradient Accumulation steps = {args.gradient_accumulation_steps}\")\n    logger.info(f\"  Total optimization steps = {args.max_train_steps}\")\n    global_step = 0\n    first_epoch = 0\n\n    initial_global_step = 0\n\n    progress_bar = tqdm(\n        range(0, args.max_train_steps),\n        initial=initial_global_step,\n        desc=\"Steps\",\n        # Only show the progress bar once on each machine.\n        disable=not accelerator.is_local_main_process,\n    )\n\n    image_logs = None\n    for epoch in range(first_epoch, args.num_train_epochs):\n        for step, batch in enumerate(train_dataloader):\n            with accelerator.accumulate(adapter):\n                # norm input\n                batch[\"jpg\"] = batch[\"jpg\"].cuda()\n                batch[\"jpg\"] = batch[\"jpg\"]*2.-1.\n                # get sketch\n                edge = 0.5 * batch['jpg'] + 0.5\n                edge = sketch_model(edge)[-1]\n                # add random threshold and random masking\n                edge = random_threshold(edge).to(dtype=weight_dtype)\n\n                # Convert images to latent space\n                if args.pretrained_vae_model_name_or_path is not None:\n                    pixel_values = batch[\"jpg\"].to(dtype=weight_dtype)\n                else:\n                    pixel_values = batch[\"jpg\"]\n                latents = vae.encode(pixel_values).latent_dist.sample()\n                latents = latents * vae.config.scaling_factor\n                if args.pretrained_vae_model_name_or_path is None:\n                    latents = latents.to(weight_dtype)\n\n                # Sample noise that we'll add to the latents\n                noise = torch.randn_like(latents)\n                bsz = latents.shape[0]\n\n                # Cubic sampling to sample a random timestep for each image\n                timesteps = torch.rand((bsz, ), device=latents.device)\n                timesteps = (1 - timesteps**3) * noise_scheduler.config.num_train_timesteps\n                timesteps = timesteps.long()\n\n                # Add noise to the latents according to the noise magnitude at each timestep\n                # (this is the forward diffusion process)\n                noisy_latents = noise_scheduler.add_noise(latents, noise, timesteps)\n\n                # get text embedding\n                prompt_embeds, unet_added_cond_kwargs = compute_embeddings(\n                    batch=batch,proportion_empty_prompts=0,text_encoders=text_encoders,tokenizers=tokenizers\n                )\n\n                # Adapter conditioning.\n                down_block_additional_residuals = adapter(\n                    edge\n                )\n\n                # Predict the noise residual\n                model_pred = unet(\n                    noisy_latents,\n                    timesteps,\n                    encoder_hidden_states=prompt_embeds[\"prompt_embeds\"],\n                    added_cond_kwargs=unet_added_cond_kwargs,\n                    down_block_additional_residuals=[\n                        sample.to(dtype=weight_dtype) for sample in down_block_additional_residuals\n                    ]\n                    # down_block_additional_residuals,\n                ).sample\n\n                # Get the target for loss depending on the prediction type\n                if noise_scheduler.config.prediction_type == \"epsilon\":\n                    target = noise\n                elif noise_scheduler.config.prediction_type == \"v_prediction\":\n                    target = noise_scheduler.get_velocity(latents, noise, timesteps)\n                else:\n                    raise ValueError(f\"Unknown prediction type {noise_scheduler.config.prediction_type}\")\n                loss = F.mse_loss(model_pred.float(), target.float(), reduction=\"mean\")\n\n                accelerator.backward(loss)\n                if accelerator.sync_gradients:\n                    params_to_clip = adapter.parameters()\n                    accelerator.clip_grad_norm_(params_to_clip, args.max_grad_norm)\n                optimizer.step()\n                lr_scheduler.step()\n                optimizer.zero_grad(set_to_none=args.set_grads_to_none)\n\n\n            # Checks if the accelerator has performed an optimization step behind the scenes\n            if accelerator.sync_gradients:\n                progress_bar.update(1)\n                global_step += 1\n\n                if accelerator.is_main_process:\n                    if global_step % args.checkpointing_steps == 0:\n                        save_path = os.path.join(args.output_dir, f\"checkpoint-{global_step}\")\n                        accelerator.save_state(save_path)\n                        logger.info(f\"Saved state to {save_path}\")\n\n            logs = {\"loss\": loss.detach().item(), \"lr\": lr_scheduler.get_last_lr()[0]}\n            progress_bar.set_postfix(**logs)\n            accelerator.log(logs, step=global_step)\n\n            if global_step >= args.max_train_steps:\n                save_path = os.path.join(args.output_dir, f\"checkpoint-{global_step}\")\n                accelerator.save_state(save_path)\n                logger.info(f\"Saved state to {save_path}\")\n                break\n\n        save_path = os.path.join(args.output_dir, f\"checkpoint-{global_step}\")\n        accelerator.save_state(save_path)\n        logger.info(f\"Saved state to {save_path}\")\n\n\nif __name__ == \"__main__\":\n    args = parse_args()\n    main(args)\n"
        }
      ]
    }
  ]
}