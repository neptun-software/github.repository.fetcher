{
  "metadata": {
    "timestamp": 1736560386541,
    "page": 935,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/model_search",
      "stars": 3268,
      "defaultBranch": "master",
      "files": [
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.0751953125,
          "content": "# How to Contribute\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows [Google's Open Source Community\nGuidelines](https://opensource.google.com/conduct/).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.482421875,
          "content": "# Model Search\n\n![header](https://raw.githubusercontent.com/google/model_search/master/model_search/images/model_search_logo.png)\n\nModel search (MS) is a framework that implements AutoML algorithms for model architecture search at scale. It\naims to help researchers speed up their exploration process for finding the right\nmodel architecture for their classification problems (i.e., DNNs with different types of layers).\n\nThe library enables you to:\n\n* Run many AutoML algorithms out of the box on your data - including automatically searching\nfor the right model architecture, the right ensemble of models\nand the best distilled models.\n\n* Compare many different models that are found during the search.\n\n* Create you own search space to customize the types of layers in your neural networks.\n\nThe technical description of the capabilities of this framework are found in\n[InterSpeech paper](https://pdfs.semanticscholar.org/1bca/d4cdfbc01fbb60a815660d034e561843d67a.pdf).\n\nWhile this framework can potentially be used for regression problems, the current\nversion supports classification problems only. Let's start by looking at some\nclassic classification problems and see how the framework can automatically find competitive\nmodel architectures.\n\n## Getting Started\nLet us start with the simplest case. You have a csv file where the features are numbers\nand you would like to run let AutoML find the best model architecture for you.\n\nBelow is a code snippet for doing so:\n\n```python\nimport model_search\nfrom model_search import constants\nfrom model_search import single_trainer\nfrom model_search.data import csv_data\n\ntrainer = single_trainer.SingleTrainer(\n    data=csv_data.Provider(\n        label_index=0,\n        logits_dimension=2,\n        record_defaults=[0, 0, 0, 0],\n        filename=\"model_search/data/testdata/csv_random_data.csv\"),\n    spec=constants.DEFAULT_DNN)\n\ntrainer.try_models(\n    number_models=200,\n    train_steps=1000,\n    eval_steps=100,\n    root_dir=\"/tmp/run_example\",\n    batch_size=32,\n    experiment_name=\"example\",\n    experiment_owner=\"model_search_user\")\n```\n\nThe above code will try 200 different models - all binary classification models,\nas the `logits_dimension` is 2. The root directory will have a subdirectory of all\nmodels, all of which will be already evaluated.\nYou can open the directory with tensorboard and see all the models with the\nevaluation metrics.\n\nThe search will be performed according to the default specification. That can be found in:\n`model_search/configs/dnn_config.pbtxt`.\n\nFor more details about the fields and if you want to create your own specification, you\ncan look at: `model_search/proto/phoenix_spec.proto`.\n\n### Image data example\nBelow is an example of binary classification for images.\n\n```python\nimport model_search\nfrom model_search import constants\nfrom model_search import single_trainer\nfrom model_search.data import image_data\n\ntrainer = single_trainer.SingleTrainer(\n    data=image_data.Provider(\n        input_dir=\"model_search/data/testdata/images\"\n        image_height=100,\n        image_width=100,\n        eval_fraction=0.2),\n    spec=constants.DEFAULT_CNN)\n\ntrainer.try_models(\n    number_models=200,\n    train_steps=1000,\n    eval_steps=100,\n    root_dir=\"/tmp/run_example\",\n    batch_size=32,\n    experiment_name=\"example\",\n    experiment_owner=\"model_search_user\")\n```\nThe api above follows the same input fields as `tf.keras.preprocessing.image_dataset_from_directory`.\n\nThe search will be performed according to the default specification. That can be found in:\n`model_search/configs/cnn_config.pbtxt`.\n\nNow, what if you don't have a csv with the features or images? The next section shows\nhow to run without a csv.\n\n## Non-csv, Non-image data\nTo run with non-csv data, you will have to implement a class inherited from the abstract\nclass `model_search.data.Provider`. This enables us to define our own\n`input_fn` and hence customize the feature columns and the task (i.e., the number\nof classes in the classification task).\n\n```python\nclass Provider(object, metaclass=abc.ABCMeta):\n  \"\"\"A data provider interface.\n\n  The Provider abstract class that defines three function for Estimator related\n  training that return the following:\n    * An input function for training and test input functions that return\n      features and label batch tensors. It is responsible for parsing the\n      dataset and buffering data.\n    * The feature_columns for this dataset.\n    * problem statement.\n  \"\"\"\n\n  def get_input_fn(self, hparams, mode, batch_size: int):\n    \"\"\"Returns an `input_fn` for train and evaluation.\n\n    Args:\n      hparams: tf.HParams for the experiment.\n      mode: Defines whether this is training or evaluation. See\n        `estimator.ModeKeys`.\n      batch_size: the batch size for training and eval.\n\n    Returns:\n      Returns an `input_fn` for train or evaluation.\n    \"\"\"\n\n  def get_serving_input_fn(self, hparams):\n    \"\"\"Returns an `input_fn` for serving in an exported SavedModel.\n\n    Args:\n      hparams: tf.HParams for the experiment.\n\n    Returns:\n      Returns an `input_fn` that takes no arguments and returns a\n        `ServingInputReceiver`.\n    \"\"\"\n\n  @abc.abstractmethod\n  def number_of_classes(self) -> int:\n    \"\"\"Returns the number of classes. Logits dim for regression.\"\"\"\n\n  def get_feature_columns(\n      self\n  ) -> List[Union[feature_column._FeatureColumn,\n                  feature_column_v2.FeatureColumn]]:\n    \"\"\"Returns a `List` of feature columns.\"\"\"\n```\n\nAn example of an implementation can be found in `model_search/data/csv_data.py`.\n\nOnce you have this class, you can pass it to\n`model_search.single_trainer.SingleTrainer` and your single trainer can now\nread your data.\n\n## Adding your models and architectures to a search space\nYou can use our platform to test your own existing models.\n\nOur system searches over what we call `blocks`. We have created an abstract API\nfor an object that resembles a layer in a DNN. All that needs to be implemented for this class is\ntwo functions:\n\n```python\nclass Block(object, metaclass=abc.ABCMeta):\n  \"\"\"Block api for creating a new block.\"\"\"\n\n  @abc.abstractmethod\n  def build(self, input_tensors, is_training, lengths=None):\n    \"\"\"Builds a block for phoenix.\n\n    Args:\n      input_tensors: A list of input tensors.\n      is_training: Whether we are training. Used for regularization.\n      lengths: The lengths of the input sequences in the batch.\n\n    Returns:\n      output_tensors: A list of the output tensors.\n    \"\"\"\n\n  @abc.abstractproperty\n  def is_input_order_important(self):\n    \"\"\"Is the order of the entries in the input tensor important.\n\n    Returns:\n      A bool specifying if the order of the entries in the input is important.\n      Examples where the order is important: Input for a cnn layer.\n      (e.g., pixels an image). Examples when the order is not important:\n      Input for a dense layer.\n    \"\"\"\n```\n\nOnce you have implemented your own blocks (i.e., layers), you need to register them with a \ndecorator. Example:\n\n```python\n@register_block(\n    lookup_name='AVERAGE_POOL_2X2', init_args={'kernel_size': 2}, enum_id=8)\n@register_block(\n    lookup_name='AVERAGE_POOL_4X4', init_args={'kernel_size': 4}, enum_id=9)\nclass AveragePoolBlock(Block):\n  \"\"\"Average Pooling layer.\"\"\"\n\n  def __init__(self, kernel_size=2):\n    self._kernel_size = kernel_size\n\n  def build(self, input_tensors, is_training, lengths=None):\n```\n\n(All code above can be found in `model_search/blocks.py`).\nOnce registered, you can tell the system to search over these blocks by\nsupplying them in `blocks_to_use` in `PhoenixSpec` in\n`model_search/proto/phoenix_spec.proto`. Namely, if you look at the default specification\nfor `dnn` found in `model_search/configs/dnn_config.pbtxt`, you can change the\nrepeated field `blocks_to_use` and add you own registered blocks.\n\nNote: Our system stacks blocks one on top of each other to create tower\narchitectures that are then going to be ensembled. You can set the minimal and\nmaximal depth allowed in the config to 1 which will change the system to search\nover which block perform best for the problem - I.e., your blocks can be now\nan implementation of full classifiers and the system will choose the best one.\n\n## Creating a training stand alone binary without writing a main\nNow, let's assume you have the data class, but you don't want to write a `main`\nfunction to run it.\n\nWe created a simple way to create a `main` that will just train a dataset and is\nconfigurable via flags.\n\nTo create it, you need to follow two steps:\n\n1. You need to register your data provider.\n\n2. You need to call a help function to create a build rule.\n\nExample:\nSuppose you have a provider, then you need to register it via a decorator we\ndefine it as follows:\n\n```python\n@data.register_provider(lookup_name='csv_data_provider', init_args={})\nclass Provider(data.Provider):\n  \"\"\"A csv data provider.\"\"\"\n\n  def __init__(self):\n```\n\nThe above code can be found in `model_search/data/csv_data_for_binary.py`.\n\nNext, once you have such library (data provider defined in a .py file and\nregistered), you can supply this library to a help build function an it will\ncreate a binary rule as follows:\n\n```build\nmodel_search_oss_binary(\n    name = \"csv_data_binary\",\n    dataset_dep = \":csv_data_for_binary\",\n)\n```\n\nYou can also add a test automatically to test integration of your provider with\nthe system as follows:\n\n```build\nmodel_search_oss_test(\n    name = \"csv_data_for_binary_test\",\n    dataset_dep = \":csv_data_for_binary\",\n    problem_type = \"dnn\",\n    extra_args = [\n        \"--filename=$${TEST_SRCDIR}/model_search/data/testdata/csv_random_data.csv\",\n    ],\n    test_data = [\n        \"//model_search/data/testdata:csv_random_data\",\n    ],\n)\n```\n\nThe above function will create a runable binary. The snippets are taken from the\nfollowing file: `model_search/data/BUILD`.\nThe binary is configurable by the flags in `model_search/oss_trainer_lib.py`.\n\n\n## Distributed Runs\nOur system can run a distributed search - I.e., run many search trainer in\nparallel.\n\nHow does it work?\n\nYou need to run your binary on multiple machines. Additionally, you need to\nmake one change to configure the bookkeeping of the search.\n\nOn a single machine, the bookkeeping is done via a file. For a distributed\nsystem however, we need a database.\n\nIn order to point our system to the database, you need to set the flags in the\nfile:\n\n`model_search/metadata/ml_metadata_db.py`\n\nto point to your database.\n\nOnce you have done so, the binaries created from the previous section will\nconnect to this database and an async search will begin.\n\n## Cloud AutoML\nWant to try higher performance AutoML without writing code? Try:\nhttps://cloud.google.com/automl-tables\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 2.09375,
          "content": "# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nworkspace(name = \"model_search\")\n\nload(\"@bazel_tools//tools/build_defs/repo:git.bzl\", \"git_repository\")\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\ngit_repository(\n    name = \"rules_python\",\n    remote = \"https://github.com/bazelbuild/rules_python.git\",\n    tag = \"0.0.2\",\n)\n\nhttp_archive(\n    name = \"six_archive\",\n    build_file_content = \"\"\"py_library(\n         name = \"six\",\n         visibility = [\"//visibility:public\"],\n         srcs = glob([\"*.py\"])\n    )\"\"\",\n    sha256 = \"30639c035cdb23534cd4aa2dd52c3bf48f06e5f4a941509c8bafd8ce11080259\",\n    strip_prefix = \"six-1.15.0\",\n    urls = [\n        \"https://storage.googleapis.com/mirror.tensorflow.org/pypi.python.org/packages/source/s/six/six-1.15.0.tar.gz\",\n        \"https://pypi.python.org/packages/source/s/six/six-1.15.0.tar.gz\",\n    ],\n)\n\nhttp_archive(\n            name = \"com_google_protobuf\",\n            strip_prefix = \"protobuf-3.14.0\",\n            urls = [\"https://github.com/google/protobuf/archive/v3.14.0.tar.gz\"],\n            sha256 = \"d0f5f605d0d656007ce6c8b5a82df3037e1d8fe8b121ed42e536f569dec16113\",\n        )\n\nload(\"@com_google_protobuf//:protobuf_deps.bzl\", \"protobuf_deps\")\nprotobuf_deps()\n\nhttp_archive(\n    name = \"absl_py\",\n    sha256 = \"603febc9b95a8f2979a7bdb77d2f5e4d9b30d4e0d59579f88eba67d4e4cc5462\",\n    strip_prefix = \"abseil-py-pypi-v0.9.0\",\n    urls = [\n        \"https://storage.googleapis.com/mirror.tensorflow.org/github.com/abseil/abseil-py/archive/pypi-v0.9.0.tar.gz\",\n        \"https://github.com/abseil/abseil-py/archive/pypi-v0.9.0.tar.gz\",\n    ],\n)\n"
        },
        {
          "name": "model_search",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.162109375,
          "content": "six==1.15.0\nsklearn==0.0\ntensorflow==2.6.0\ntensorflow-estimator==2.6.0\nkeras==2.6.0\nabsl-py==0.10.0\ntf-slim==1.1.0\nml-metadata==0.26.0\nkeras-tuner==1.0.3\nmock==4.0.3\n"
        }
      ]
    }
  ]
}