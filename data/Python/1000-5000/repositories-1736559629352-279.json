{
  "metadata": {
    "timestamp": 1736559629352,
    "page": 279,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "DepthAnything/Depth-Anything-V2",
      "stars": 4323,
      "defaultBranch": "main",
      "files": [
        {
          "name": "DA-2K.md",
          "type": "blob",
          "size": 1.90234375,
          "content": "# DA-2K Evaluation Benchmark\n\n## Introduction\n\n![DA-2K](assets/DA-2K.png)\n\nDA-2K is proposed in [Depth Anything V2](https://depth-anything-v2.github.io) to evaluate the relative depth estimation capability. It encompasses eight representative scenarios of `indoor`, `outdoor`, `non_real`, `transparent_reflective`, `adverse_style`, `aerial`, `underwater`, and `object`. It consists of 1K diverse high-quality images and 2K precise pair-wise relative depth annotations.\n\nPlease refer to our [paper](https://arxiv.org/abs/2406.09414) for details in constructing this benchmark.\n\n\n## Usage\n\nPlease first [download the benchmark](https://huggingface.co/datasets/depth-anything/DA-2K/tree/main).\n\nAll annotations are stored in `annotations.json`. The annotation file is a JSON object where each key is the path to an image file, and the value is a list of annotations associated with that image. Each annotation describes two points and identifies which point is closer to the camera. The structure is detailed below:\n\n```\n{\n  \"image_path\": [\n    {\n      \"point1\": [h1, w1], # (vertical position, horizontal position)\n      \"point2\": [h2, w2], # (vertical position, horizontal position)\n      \"closer_point\": \"point1\" # we always set \"point1\" as the closer one\n    },\n    ...\n  ],\n  ...\n}\n```\n\nTo visualize the annotations:\n```bash\npython visualize.py [--scene-type <type>]\n```\n\n**Options**\n- `--scene-type <type>` (optional): Specify the scene type (`indoor`, `outdoor`, `non_real`, `transparent_reflective`, `adverse_style`, `aerial`, `underwater`, and `object`). Skip this argument or set <type> as `\"\"` to include all scene types.\n\n## Citation\n\nIf you find this benchmark useful, please consider citing:\n\n```bibtex\n@article{depth_anything_v2,\n  title={Depth Anything V2},\n  author={Yang, Lihe and Kang, Bingyi and Huang, Zilong and Zhao, Zhen and Xu, Xiaogang and Feng, Jiashi and Zhao, Hengshuang},\n  journal={arXiv:2406.09414},\n  year={2024}\n}\n```"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.4970703125,
          "content": "<div align=\"center\">\n<h1>Depth Anything V2</h1>\n\n[**Lihe Yang**](https://liheyoung.github.io/)<sup>1</sup> · [**Bingyi Kang**](https://bingykang.github.io/)<sup>2&dagger;</sup> · [**Zilong Huang**](http://speedinghzl.github.io/)<sup>2</sup>\n<br>\n[**Zhen Zhao**](http://zhaozhen.me/) · [**Xiaogang Xu**](https://xiaogang00.github.io/) · [**Jiashi Feng**](https://sites.google.com/site/jshfeng/)<sup>2</sup> · [**Hengshuang Zhao**](https://hszhao.github.io/)<sup>1*</sup>\n\n<sup>1</sup>HKU&emsp;&emsp;&emsp;<sup>2</sup>TikTok\n<br>\n&dagger;project lead&emsp;*corresponding author\n\n<a href=\"https://arxiv.org/abs/2406.09414\"><img src='https://img.shields.io/badge/arXiv-Depth Anything V2-red' alt='Paper PDF'></a>\n<a href='https://depth-anything-v2.github.io'><img src='https://img.shields.io/badge/Project_Page-Depth Anything V2-green' alt='Project Page'></a>\n<a href='https://huggingface.co/spaces/depth-anything/Depth-Anything-V2'><img src='https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Demo-blue'></a>\n<a href='https://huggingface.co/datasets/depth-anything/DA-2K'><img src='https://img.shields.io/badge/Benchmark-DA--2K-yellow' alt='Benchmark'></a>\n</div>\n\nThis work presents Depth Anything V2. It significantly outperforms [V1](https://github.com/LiheYoung/Depth-Anything) in fine-grained details and robustness. Compared with SD-based models, it enjoys faster inference speed, fewer parameters, and higher depth accuracy.\n\n![teaser](assets/teaser.png)\n\n\n## News\n- **2024-12-22:** [Prompt Depth Anything](https://promptda.github.io/) has been released. It supports 4K resolution metric depth estimation when low-res LiDAR is used to prompt the DA models.\n- **2024-07-06:** Depth Anything V2 is supported in [Transformers](https://github.com/huggingface/transformers/). See the [instructions](https://huggingface.co/docs/transformers/main/en/model_doc/depth_anything_v2) for convenient usage.\n- **2024-06-25:** Depth Anything is integrated into [Apple Core ML Models](https://developer.apple.com/machine-learning/models/). See the instructions ([V1](https://huggingface.co/apple/coreml-depth-anything-small), [V2](https://huggingface.co/apple/coreml-depth-anything-v2-small)) for usage.\n- **2024-06-22:** We release [smaller metric depth models](https://github.com/DepthAnything/Depth-Anything-V2/tree/main/metric_depth#pre-trained-models) based on Depth-Anything-V2-Small and Base.\n- **2024-06-20:** Our repository and project page are flagged by GitHub and removed from the public for 6 days. Sorry for the inconvenience.\n- **2024-06-14:** Paper, project page, code, models, demo, and benchmark are all released.\n\n\n## Pre-trained Models\n\nWe provide **four models** of varying scales for robust relative depth estimation:\n\n| Model | Params | Checkpoint |\n|:-|-:|:-:|\n| Depth-Anything-V2-Small | 24.8M | [Download](https://huggingface.co/depth-anything/Depth-Anything-V2-Small/resolve/main/depth_anything_v2_vits.pth?download=true) |\n| Depth-Anything-V2-Base | 97.5M | [Download](https://huggingface.co/depth-anything/Depth-Anything-V2-Base/resolve/main/depth_anything_v2_vitb.pth?download=true) |\n| Depth-Anything-V2-Large | 335.3M | [Download](https://huggingface.co/depth-anything/Depth-Anything-V2-Large/resolve/main/depth_anything_v2_vitl.pth?download=true) |\n| Depth-Anything-V2-Giant | 1.3B | Coming soon |\n\n\n## Usage\n\n### Prepraration\n\n```bash\ngit clone https://github.com/DepthAnything/Depth-Anything-V2\ncd Depth-Anything-V2\npip install -r requirements.txt\n```\n\nDownload the checkpoints listed [here](#pre-trained-models) and put them under the `checkpoints` directory.\n\n### Use our models\n```python\nimport cv2\nimport torch\n\nfrom depth_anything_v2.dpt import DepthAnythingV2\n\nDEVICE = 'cuda' if torch.cuda.is_available() else 'mps' if torch.backends.mps.is_available() else 'cpu'\n\nmodel_configs = {\n    'vits': {'encoder': 'vits', 'features': 64, 'out_channels': [48, 96, 192, 384]},\n    'vitb': {'encoder': 'vitb', 'features': 128, 'out_channels': [96, 192, 384, 768]},\n    'vitl': {'encoder': 'vitl', 'features': 256, 'out_channels': [256, 512, 1024, 1024]},\n    'vitg': {'encoder': 'vitg', 'features': 384, 'out_channels': [1536, 1536, 1536, 1536]}\n}\n\nencoder = 'vitl' # or 'vits', 'vitb', 'vitg'\n\nmodel = DepthAnythingV2(**model_configs[encoder])\nmodel.load_state_dict(torch.load(f'checkpoints/depth_anything_v2_{encoder}.pth', map_location='cpu'))\nmodel = model.to(DEVICE).eval()\n\nraw_img = cv2.imread('your/image/path')\ndepth = model.infer_image(raw_img) # HxW raw depth map in numpy\n```\n\nIf you do not want to clone this repository, you can also load our models through [Transformers](https://github.com/huggingface/transformers/). Below is a simple code snippet. Please refer to the [official page](https://huggingface.co/docs/transformers/main/en/model_doc/depth_anything_v2) for more details.\n\n- Note 1: Make sure you can connect to Hugging Face and have installed the latest Transformers.\n- Note 2: Due to the [upsampling difference](https://github.com/huggingface/transformers/pull/31522#issuecomment-2184123463) between OpenCV (we used) and Pillow (HF used), predictions may differ slightly. So you are more recommended to use our models through the way introduced above.\n```python\nfrom transformers import pipeline\nfrom PIL import Image\n\npipe = pipeline(task=\"depth-estimation\", model=\"depth-anything/Depth-Anything-V2-Small-hf\")\nimage = Image.open('your/image/path')\ndepth = pipe(image)[\"depth\"]\n```\n\n### Running script on *images*\n\n```bash\npython run.py \\\n  --encoder <vits | vitb | vitl | vitg> \\\n  --img-path <path> --outdir <outdir> \\\n  [--input-size <size>] [--pred-only] [--grayscale]\n```\nOptions:\n- `--img-path`: You can either 1) point it to an image directory storing all interested images, 2) point it to a single image, or 3) point it to a text file storing all image paths.\n- `--input-size` (optional): By default, we use input size `518` for model inference. ***You can increase the size for even more fine-grained results.***\n- `--pred-only` (optional): Only save the predicted depth map, without raw image.\n- `--grayscale` (optional): Save the grayscale depth map, without applying color palette.\n\nFor example:\n```bash\npython run.py --encoder vitl --img-path assets/examples --outdir depth_vis\n```\n\n### Running script on *videos*\n\n```bash\npython run_video.py \\\n  --encoder <vits | vitb | vitl | vitg> \\\n  --video-path assets/examples_video --outdir video_depth_vis \\\n  [--input-size <size>] [--pred-only] [--grayscale]\n```\n\n***Our larger model has better temporal consistency on videos.***\n\n### Gradio demo\n\nTo use our gradio demo locally:\n\n```bash\npython app.py\n```\n\nYou can also try our [online demo](https://huggingface.co/spaces/Depth-Anything/Depth-Anything-V2).\n\n***Note: Compared to V1, we have made a minor modification to the DINOv2-DPT architecture (originating from this [issue](https://github.com/LiheYoung/Depth-Anything/issues/81)).*** In V1, we *unintentionally* used features from the last four layers of DINOv2 for decoding. In V2, we use [intermediate features](https://github.com/DepthAnything/Depth-Anything-V2/blob/2cbc36a8ce2cec41d38ee51153f112e87c8e42d8/depth_anything_v2/dpt.py#L164-L169) instead. Although this modification did not improve details or accuracy, we decided to follow this common practice.\n\n\n## Fine-tuned to Metric Depth Estimation\n\nPlease refer to [metric depth estimation](./metric_depth).\n\n\n## DA-2K Evaluation Benchmark\n\nPlease refer to [DA-2K benchmark](./DA-2K.md).\n\n\n## Community Support\n\n**We sincerely appreciate all the community support for our Depth Anything series. Thank you a lot!**\n\n- Apple Core ML:\n    - https://developer.apple.com/machine-learning/models\n    - https://huggingface.co/apple/coreml-depth-anything-v2-small\n    - https://huggingface.co/apple/coreml-depth-anything-small\n- Transformers:\n    - https://huggingface.co/docs/transformers/main/en/model_doc/depth_anything_v2\n    - https://huggingface.co/docs/transformers/main/en/model_doc/depth_anything\n- TensorRT:\n    - https://github.com/spacewalk01/depth-anything-tensorrt\n    - https://github.com/zhujiajian98/Depth-Anythingv2-TensorRT-python\n- ONNX: https://github.com/fabio-sim/Depth-Anything-ONNX\n- ComfyUI: https://github.com/kijai/ComfyUI-DepthAnythingV2\n- Transformers.js (real-time depth in web): https://huggingface.co/spaces/Xenova/webgpu-realtime-depth-estimation\n- Android:\n  - https://github.com/shubham0204/Depth-Anything-Android\n  - https://github.com/FeiGeChuanShu/ncnn-android-depth_anything\n\n\n## Acknowledgement\n\nWe are sincerely grateful to the awesome Hugging Face team ([@Pedro Cuenca](https://huggingface.co/pcuenq), [@Niels Rogge](https://huggingface.co/nielsr), [@Merve Noyan](https://huggingface.co/merve), [@Amy Roberts](https://huggingface.co/amyeroberts), et al.) for their huge efforts in supporting our models in Transformers and Apple Core ML.\n\nWe also thank the [DINOv2](https://github.com/facebookresearch/dinov2) team for contributing such impressive models to our community.\n\n\n## LICENSE\n\nDepth-Anything-V2-Small model is under the Apache-2.0 license. Depth-Anything-V2-Base/Large/Giant models are under the CC-BY-NC-4.0 license.\n\n\n## Citation\n\nIf you find this project useful, please consider citing:\n\n```bibtex\n@article{depth_anything_v2,\n  title={Depth Anything V2},\n  author={Yang, Lihe and Kang, Bingyi and Huang, Zilong and Zhao, Zhen and Xu, Xiaogang and Feng, Jiashi and Zhao, Hengshuang},\n  journal={arXiv:2406.09414},\n  year={2024}\n}\n\n@inproceedings{depth_anything_v1,\n  title={Depth Anything: Unleashing the Power of Large-Scale Unlabeled Data}, \n  author={Yang, Lihe and Kang, Bingyi and Huang, Zilong and Xu, Xiaogang and Feng, Jiashi and Zhao, Hengshuang},\n  booktitle={CVPR},\n  year={2024}\n}\n```\n"
        },
        {
          "name": "app.py",
          "type": "blob",
          "size": 3.173828125,
          "content": "import glob\nimport gradio as gr\nimport matplotlib\nimport numpy as np\nfrom PIL import Image\nimport torch\nimport tempfile\nfrom gradio_imageslider import ImageSlider\n\nfrom depth_anything_v2.dpt import DepthAnythingV2\n\ncss = \"\"\"\n#img-display-container {\n    max-height: 100vh;\n}\n#img-display-input {\n    max-height: 80vh;\n}\n#img-display-output {\n    max-height: 80vh;\n}\n#download {\n    height: 62px;\n}\n\"\"\"\nDEVICE = 'cuda' if torch.cuda.is_available() else 'mps' if torch.backends.mps.is_available() else 'cpu'\nmodel_configs = {\n    'vits': {'encoder': 'vits', 'features': 64, 'out_channels': [48, 96, 192, 384]},\n    'vitb': {'encoder': 'vitb', 'features': 128, 'out_channels': [96, 192, 384, 768]},\n    'vitl': {'encoder': 'vitl', 'features': 256, 'out_channels': [256, 512, 1024, 1024]},\n    'vitg': {'encoder': 'vitg', 'features': 384, 'out_channels': [1536, 1536, 1536, 1536]}\n}\nencoder = 'vitl'\nmodel = DepthAnythingV2(**model_configs[encoder])\nstate_dict = torch.load(f'checkpoints/depth_anything_v2_{encoder}.pth', map_location=\"cpu\")\nmodel.load_state_dict(state_dict)\nmodel = model.to(DEVICE).eval()\n\ntitle = \"# Depth Anything V2\"\ndescription = \"\"\"Official demo for **Depth Anything V2**.\nPlease refer to our [paper](https://arxiv.org/abs/2406.09414), [project page](https://depth-anything-v2.github.io), or [github](https://github.com/DepthAnything/Depth-Anything-V2) for more details.\"\"\"\n\ndef predict_depth(image):\n    return model.infer_image(image)\n\nwith gr.Blocks(css=css) as demo:\n    gr.Markdown(title)\n    gr.Markdown(description)\n    gr.Markdown(\"### Depth Prediction demo\")\n\n    with gr.Row():\n        input_image = gr.Image(label=\"Input Image\", type='numpy', elem_id='img-display-input')\n        depth_image_slider = ImageSlider(label=\"Depth Map with Slider View\", elem_id='img-display-output', position=0.5)\n    submit = gr.Button(value=\"Compute Depth\")\n    gray_depth_file = gr.File(label=\"Grayscale depth map\", elem_id=\"download\",)\n    raw_file = gr.File(label=\"16-bit raw output (can be considered as disparity)\", elem_id=\"download\",)\n\n    cmap = matplotlib.colormaps.get_cmap('Spectral_r')\n\n    def on_submit(image):\n        original_image = image.copy()\n\n        h, w = image.shape[:2]\n\n        depth = predict_depth(image[:, :, ::-1])\n\n        raw_depth = Image.fromarray(depth.astype('uint16'))\n        tmp_raw_depth = tempfile.NamedTemporaryFile(suffix='.png', delete=False)\n        raw_depth.save(tmp_raw_depth.name)\n\n        depth = (depth - depth.min()) / (depth.max() - depth.min()) * 255.0\n        depth = depth.astype(np.uint8)\n        colored_depth = (cmap(depth)[:, :, :3] * 255).astype(np.uint8)\n\n        gray_depth = Image.fromarray(depth)\n        tmp_gray_depth = tempfile.NamedTemporaryFile(suffix='.png', delete=False)\n        gray_depth.save(tmp_gray_depth.name)\n\n        return [(original_image, colored_depth), tmp_gray_depth.name, tmp_raw_depth.name]\n\n    submit.click(on_submit, inputs=[input_image], outputs=[depth_image_slider, gray_depth_file, raw_file])\n\n    example_files = glob.glob('assets/examples/*')\n    examples = gr.Examples(examples=example_files, inputs=[input_image], outputs=[depth_image_slider, gray_depth_file, raw_file], fn=on_submit)\n\n\nif __name__ == '__main__':\n    demo.queue().launch()"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "depth_anything_v2",
          "type": "tree",
          "content": null
        },
        {
          "name": "metric_depth",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0751953125,
          "content": "gradio_imageslider\ngradio==4.29.0\nmatplotlib\nopencv-python\ntorch\ntorchvision\n"
        },
        {
          "name": "run.py",
          "type": "blob",
          "size": 2.9716796875,
          "content": "import argparse\nimport cv2\nimport glob\nimport matplotlib\nimport numpy as np\nimport os\nimport torch\n\nfrom depth_anything_v2.dpt import DepthAnythingV2\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Depth Anything V2')\n    \n    parser.add_argument('--img-path', type=str)\n    parser.add_argument('--input-size', type=int, default=518)\n    parser.add_argument('--outdir', type=str, default='./vis_depth')\n    \n    parser.add_argument('--encoder', type=str, default='vitl', choices=['vits', 'vitb', 'vitl', 'vitg'])\n    \n    parser.add_argument('--pred-only', dest='pred_only', action='store_true', help='only display the prediction')\n    parser.add_argument('--grayscale', dest='grayscale', action='store_true', help='do not apply colorful palette')\n    \n    args = parser.parse_args()\n    \n    DEVICE = 'cuda' if torch.cuda.is_available() else 'mps' if torch.backends.mps.is_available() else 'cpu'\n    \n    model_configs = {\n        'vits': {'encoder': 'vits', 'features': 64, 'out_channels': [48, 96, 192, 384]},\n        'vitb': {'encoder': 'vitb', 'features': 128, 'out_channels': [96, 192, 384, 768]},\n        'vitl': {'encoder': 'vitl', 'features': 256, 'out_channels': [256, 512, 1024, 1024]},\n        'vitg': {'encoder': 'vitg', 'features': 384, 'out_channels': [1536, 1536, 1536, 1536]}\n    }\n    \n    depth_anything = DepthAnythingV2(**model_configs[args.encoder])\n    depth_anything.load_state_dict(torch.load(f'checkpoints/depth_anything_v2_{args.encoder}.pth', map_location='cpu'))\n    depth_anything = depth_anything.to(DEVICE).eval()\n    \n    if os.path.isfile(args.img_path):\n        if args.img_path.endswith('txt'):\n            with open(args.img_path, 'r') as f:\n                filenames = f.read().splitlines()\n        else:\n            filenames = [args.img_path]\n    else:\n        filenames = glob.glob(os.path.join(args.img_path, '**/*'), recursive=True)\n    \n    os.makedirs(args.outdir, exist_ok=True)\n    \n    cmap = matplotlib.colormaps.get_cmap('Spectral_r')\n    \n    for k, filename in enumerate(filenames):\n        print(f'Progress {k+1}/{len(filenames)}: {filename}')\n        \n        raw_image = cv2.imread(filename)\n        \n        depth = depth_anything.infer_image(raw_image, args.input_size)\n        \n        depth = (depth - depth.min()) / (depth.max() - depth.min()) * 255.0\n        depth = depth.astype(np.uint8)\n        \n        if args.grayscale:\n            depth = np.repeat(depth[..., np.newaxis], 3, axis=-1)\n        else:\n            depth = (cmap(depth)[:, :, :3] * 255)[:, :, ::-1].astype(np.uint8)\n        \n        if args.pred_only:\n            cv2.imwrite(os.path.join(args.outdir, os.path.splitext(os.path.basename(filename))[0] + '.png'), depth)\n        else:\n            split_region = np.ones((raw_image.shape[0], 50, 3), dtype=np.uint8) * 255\n            combined_result = cv2.hconcat([raw_image, split_region, depth])\n            \n            cv2.imwrite(os.path.join(args.outdir, os.path.splitext(os.path.basename(filename))[0] + '.png'), combined_result)"
        },
        {
          "name": "run_video.py",
          "type": "blob",
          "size": 3.662109375,
          "content": "import argparse\nimport cv2\nimport glob\nimport matplotlib\nimport numpy as np\nimport os\nimport torch\n\nfrom depth_anything_v2.dpt import DepthAnythingV2\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Depth Anything V2')\n    \n    parser.add_argument('--video-path', type=str)\n    parser.add_argument('--input-size', type=int, default=518)\n    parser.add_argument('--outdir', type=str, default='./vis_video_depth')\n    \n    parser.add_argument('--encoder', type=str, default='vitl', choices=['vits', 'vitb', 'vitl', 'vitg'])\n    \n    parser.add_argument('--pred-only', dest='pred_only', action='store_true', help='only display the prediction')\n    parser.add_argument('--grayscale', dest='grayscale', action='store_true', help='do not apply colorful palette')\n    \n    args = parser.parse_args()\n    \n    DEVICE = 'cuda' if torch.cuda.is_available() else 'mps' if torch.backends.mps.is_available() else 'cpu'\n    \n    model_configs = {\n        'vits': {'encoder': 'vits', 'features': 64, 'out_channels': [48, 96, 192, 384]},\n        'vitb': {'encoder': 'vitb', 'features': 128, 'out_channels': [96, 192, 384, 768]},\n        'vitl': {'encoder': 'vitl', 'features': 256, 'out_channels': [256, 512, 1024, 1024]},\n        'vitg': {'encoder': 'vitg', 'features': 384, 'out_channels': [1536, 1536, 1536, 1536]}\n    }\n    \n    depth_anything = DepthAnythingV2(**model_configs[args.encoder])\n    depth_anything.load_state_dict(torch.load(f'checkpoints/depth_anything_v2_{args.encoder}.pth', map_location='cpu'))\n    depth_anything = depth_anything.to(DEVICE).eval()\n    \n    if os.path.isfile(args.video_path):\n        if args.video_path.endswith('txt'):\n            with open(args.video_path, 'r') as f:\n                lines = f.read().splitlines()\n        else:\n            filenames = [args.video_path]\n    else:\n        filenames = glob.glob(os.path.join(args.video_path, '**/*'), recursive=True)\n    \n    os.makedirs(args.outdir, exist_ok=True)\n    \n    margin_width = 50\n    cmap = matplotlib.colormaps.get_cmap('Spectral_r')\n    \n    for k, filename in enumerate(filenames):\n        print(f'Progress {k+1}/{len(filenames)}: {filename}')\n        \n        raw_video = cv2.VideoCapture(filename)\n        frame_width, frame_height = int(raw_video.get(cv2.CAP_PROP_FRAME_WIDTH)), int(raw_video.get(cv2.CAP_PROP_FRAME_HEIGHT))\n        frame_rate = int(raw_video.get(cv2.CAP_PROP_FPS))\n        \n        if args.pred_only: \n            output_width = frame_width\n        else: \n            output_width = frame_width * 2 + margin_width\n        \n        output_path = os.path.join(args.outdir, os.path.splitext(os.path.basename(filename))[0] + '.mp4')\n        out = cv2.VideoWriter(output_path, cv2.VideoWriter_fourcc(*\"mp4v\"), frame_rate, (output_width, frame_height))\n        \n        while raw_video.isOpened():\n            ret, raw_frame = raw_video.read()\n            if not ret:\n                break\n            \n            depth = depth_anything.infer_image(raw_frame, args.input_size)\n            \n            depth = (depth - depth.min()) / (depth.max() - depth.min()) * 255.0\n            depth = depth.astype(np.uint8)\n            \n            if args.grayscale:\n                depth = np.repeat(depth[..., np.newaxis], 3, axis=-1)\n            else:\n                depth = (cmap(depth)[:, :, :3] * 255)[:, :, ::-1].astype(np.uint8)\n            \n            if args.pred_only:\n                out.write(depth)\n            else:\n                split_region = np.ones((frame_height, margin_width, 3), dtype=np.uint8) * 255\n                combined_frame = cv2.hconcat([raw_frame, split_region, depth])\n                \n                out.write(combined_frame)\n        \n        raw_video.release()\n        out.release()\n"
        }
      ]
    }
  ]
}