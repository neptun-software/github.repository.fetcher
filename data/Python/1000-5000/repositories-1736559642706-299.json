{
  "metadata": {
    "timestamp": 1736559642706,
    "page": 299,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "IDSIA/sacred",
      "stars": 4272,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bumpversion.cfg",
          "type": "blob",
          "size": 0.125,
          "content": "[bumpversion]\ncurrent_version = 0.8.7\ncommit = True\ntag = True\ntag_name = {new_version}\n\n[bumpversion:file:sacred/__about__.py]\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.3330078125,
          "content": "# Created by http://www.gitignore.io\n\n### Python ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbin/\nbuild/\ndevelop-eggs/\ndist/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n# Rope\n.ropeproject\n\n# Django stuff:\n*.log\n*.pot\n\n# Sphinx documentation\ndocs/_build/\n\n# Jupyter\n.ipynb_checkpoints\n\n\n### PyCharm ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm\n\n## Directory-based project format\n.idea/\n# if you remove the above rule, at least ignore user-specific stuff:\n# .idea/workspace.xml\n# .idea/tasks.xml\n# and these sensitive or high-churn files:\n# .idea/dataSources.ids\n# .idea/dataSources.xml\n# .idea/sqlDataSources.xml\n# .idea/dynamic.xml\n\n## File-based project format\n*.ipr\n*.iws\n*.iml\n\n## Additional for IntelliJ\nout/\n\n# generated by mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# generated by JIRA plugin\natlassian-ide-plugin.xml\n\n# generated by Crashlytics plugin (for Android Studio and Intellij)\ncom_crashlytics_export_strings.xml\n\n# GEdit temporary files\n*~\n\n/.pytest_cache/\npip-wheel-metadata/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.326171875,
          "content": "fail_fast: true\nrepos:\n-   repo: https://github.com/psf/black\n    rev: 22.10.0\n    hooks:\n    - id: black\n      language_version: python3\n-   repo: https://github.com/pycqa/flake8\n    rev: 6.0.0\n    hooks:\n    -   id: flake8\n        exclude: ^(tests|examples|docs)/.*\n        additional_dependencies: [pep8-naming, flake8-docstrings]\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 4.2021484375,
          "content": "============\nContributing\n============\n\nContributions are welcome, and they are greatly appreciated! Every little bit\nhelps, and credit will always be given.\n\nYou can contribute in many ways:\n\nTypes of Contributions\n----------------------\n\nReport Bugs\n~~~~~~~~~~~\n\nReport bugs at https://github.com/IDSIA/sacred/issues.\n\nIf you are reporting a bug, please include:\n\n* Any details about your local setup that might be helpful in troubleshooting.\n* Steps to reproduce the bug, and if possible a minimal example demonstrating the problem.\n\nGood first issue\n~~~~~~~~~~~~~~~~\n\nLook through the GitHub issues for bugs. Anything tagged with \"good first issue\"\nis a great place to get started.\n\nFix Bugs\n~~~~~~~~\n\nLook through the GitHub issues for bugs. Anything tagged with \"bug\"\nis open to whoever wants to fix it.\n\nImplement Features\n~~~~~~~~~~~~~~~~~~\n\nLook through the GitHub issues for features. Anything tagged with \"feature\"\nis open to whoever wants to implement it.\n\nWrite Documentation\n~~~~~~~~~~~~~~~~~~~\n\nSacred could always use more documentation, whether as part of the\nofficial Sacred docs, in docstrings, or even on the web in blog posts,\narticles, and such.\n\nWhen writing docstrings, stick to the `NumPy style\n<https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html>`_.\nHowever, prefer using Python type hints, over type annotation in the docstring.\nThis makes your type hints useable by type checkers and IDEs. An example docstring\ncould look like this.\n\n.. code-block :: python\n\n    def add(a: int, b: int) -> int:\n        \"\"\"Add two numbers.\n\n        Parameters\n        ----------\n        a\n            The first number.\n        b\n            The second number.\n\n        Returns\n        -------\n        The sum of the two numbers.\n        \"\"\"\n        return a + b\n\nSubmit Feedback\n~~~~~~~~~~~~~~~\n\nThe best way to send feedback is to file an issue at https://github.com/IDSIA/sacred/issues.\n\nIf you are proposing a feature:\n\n* Explain in detail how it would work.\n* Keep the scope as narrow as possible, to make it easier to implement.\n* Remember that this is a volunteer-driven project, and that contributions\n  are welcome :)\n\nGet Started!\n------------\n\nReady to contribute? Here's how to set up `sacred` for\nlocal development.\n\n1. Fork_ the `sacred` repo on GitHub.\n2. Clone your fork locally::\n\n    $ git clone git@github.com:your_name_here/sacred.git\n\n3. Create a branch for local development::\n\n    $ git checkout -b name-of-your-bugfix-or-feature\n\n4. Create your development environment and install the pre-commit hooks::\n\n    $ # Activate your environment\n    $ pip install -e .\n    $ pip install -r dev-requirements.txt\n    $ pre-commit install\n\nYou can check that pre-commit works with::\n\n    $ pre-commit run --all-files\n\nif you get the error ``ModuleNotFoundError: No module named 'distutils.spawn'``,\nyou should do the following::\n\n    $ sudo apt-get update\n    $ sudo apt-get install python3-distutils\n\nIt should solve the problem with ``distutils.spawn``.\n\nNow you can make your changes locally.\n\n5. When you're done making changes, check that your changes pass style and unit\n   tests, including testing other Python versions with tox::\n\n    $ tox\n\nTo get tox, use ``pip install tox`` or ``pip install tox-conda``. If you have a conda distribution, you MUST use tox-conda.\n\n6. Commit your changes and push your branch to GitHub::\n\n    $ git add .\n    $ git commit -m \"Your detailed description of your changes.\"\n    $ git push origin name-of-your-bugfix-or-feature\n\n7. Submit a pull request through the GitHub website.\n\n.. _Fork: https://github.com/IDSIA/sacred/fork\n\nPull Request Guidelines\n-----------------------\n\nBefore you submit a pull request, check that it meets these guidelines:\n\n1. Pull requests should be made on their own branch or against master.\n2. The pull request should include tests.\n3. If the pull request adds functionality, the docs should be updated. Put\n   your new functionality into a function with a docstring, and add the\n   feature to the list in README.rst.\n4. The pull request should work for all Python versions listed in the ``setup.py``.\n   Check https://travis-ci.org/IDSIA/sacred/pull_requests\n   for active pull requests or run the ``tox`` command and make sure that the tests pass for all supported Python versions.\n"
        },
        {
          "name": "HISTORY.rst",
          "type": "blob",
          "size": 21.0546875,
          "content": "Release History\n---------------\n\n0.8.7 (2024-11-26)\n++++++++++++++++++\n\nMinor bugfix release, fixing an issue with the numpy 2.0 compatible changes from last release.\n\n* Fix: Restore old behavior of is_different (#933, thanks @n-gao)\n* Doc: Add Sacred to Gurubase (#935, @kursataktas )\n\n0.8.6 (2024-08-26)\n++++++++++++++++++\n\nMinor release for compatibility with Numpy>=2.0\n\n* Add support for Numpy>=2.0 (#928)\n* Switch from dopcopt (unmaintained) to docopt-ng (maintained fork) (#927, thanks @n-gao)\n\n\n0.8.5 (2023-11-13)\n++++++++++++++++++\n\nMinor release with a few small fixes.\n\n* Feature: Add setting for the default heartbeat interval\n* Bugfix: Don't ignore non-loadable classes in config files (#902, thanks @ernestum)\n* Bugfix: Fix an import error that made conda-forge build fail (#921, thanks @n-gao)\n* Doc: Update CDE tool that doesn't exist anymore and fix starter example (#905, #906, thanks @zhimin-z)\n\n0.8.4 (2023-01-25)\n++++++++++++++++++\n\nMinor release with a few small fixes.\n\n* Update tests and supported python versions: sacred now officially supports Python 3.8-3.11 (#872, #892, thanks @jnphilipp)\n* Feature: Allow type annotations in config scopes and future-proofing config scopes by using `ast` instead of a complex regex (thanks @vnmabus)\n* Feature: Expose `MongoClient` in the `MongoObserver` (thanks @Gracecr)\n* Bugfix: Support new numpy versions by removing using Python builtin types instead of the `np.*` aliases (#870, thanks @Kaushalya)\n* Bugfix: Allow `*.ipynb` files as source files when run via `ipython` in non-interactive mode\n* Internal: Add error causes for many errors in the codebase (#894, #898, thanks @cool-RR)\n* Internal: Use GitHub Actions for tests instead of azure pipelines to gain more control (#896)\n* Internal: Use GitHub Actions to automate releases on PyPI\n\n0.8.3 (2022-03-25)\n++++++++++++++++++\n\nA minor release with many small improvements and support for Python 3.10.\n\n* Feature: Support for the new numpy random API (`np.random.Generator`); deprecate old `np.random.RandomState` for np 1.19+ (#779, thanks @jnphilipp)\n* Feature: Add `py.typed` file for typecheckers like mypy (#849, thanks @neophnx)\n* Feature: Validate sacred settings (#774)\n* Feature: Update CLI options: Change run ID from command line (#798, thanks @jnphilipp)\n* Feature: Log named configs and config updates (#823)\n* Feature: Options to save sources and copy resources in FileStorageObserver (#806, thanks @patrick-kidger)\n* Feature: Support for NVIDIA Multi-Instance GPU (#865, thanks @j3soon)\n* Bugfix: Updated testcases to py3.6+; updated dependencies (e.g., tinydb 4+, pytest 6.2.1, pymongo 4.0) (#799, #819, #821, thanks a lot @jnphilipp)\n* Bugfix: Fixes for handling symlinks (#791, thanks @MaxSchambach)\n* Bugfix: Fix docker example (#829, thanks @ahallermed)\n* Doc: Some fixes and update of the documentation (#778, #792, #793, #797, #804, #842, #856, thanks @daliasen @aaronsnoswell @schmitts @Blaizzy)\n\n0.8.2 (2020-11-26)\n++++++++++++++++++\n\nMinor bugfix release that resolves some bugs for Python 3.8+ and issues with the read-only container types.\n\n* Feature: Added support for pickling and YAML serialization to the read-only containers (#775, #737)\n* Feature: Added git integration to SqlObserver (#741)\n* Feature: Added support for a collection prefix in MongoObserver (#704)\n* Bugfix: Fix print_config command for Python 3.8 (#719)\n* Bugfix: Fix save_config command (#765)\n* Bugfix: Named config updates are now distributed correctly during the configuration creation process (#769, #777)\n* Bugfix: Parsing of the nvidia_smi output now also works with non-Unicode (e.g., Chinese) characters in process names (#776)\n* Bugfix: Fix type annotations of MongoObserver (#762)\n* Bugfix: Terminate tee on timeout. This is a workaround that prevents program crashes caused by output capturing (#740)\n* Bugfix: Improve parsing of config scopes (#699, #764)\n* Bugfix: Fix error tracking of ConfigErrors when raised in a config scope (#733)\n* Bugfix: Made git import optional (#724)\n\n\n0.8.1 (2019-11-27)\n++++++++++++++++++\n* Feature: added Google Cloud Storage Observer (thanks @wohlert)\n* Bugfix: revert accidental renaming of --unobserved commandline option\n\n\n0.8.0 (2019-10-14)\n++++++++++++++++++\nMajor release with several breaking changes.\n\n* API change: Dropped support for Python 2\n* API change: Gathering of git information gathering is now enabled by default #595\n* API change: Switched constructor from Observer.create(...) to Observer(...) for all observers.\n* API change: Changed the interface for collecting custom host-information #569\n* API change: Changed interface for defining CLI options. #572\n* Feature: Added new S3 file observer #542\n* Feature: added `started_text` option to TelegramObserver #494\n* Feature: added copy/deepcopy support to read-only containers #500\n* Bugfix: FileStorage Observer is more reliable under parallel execution #503\n* Bugfix: FileStorageObserver now raises an error when an artifact would overwrite an important file #647\n* Bugfix: fixed inconsistent config nesting behavior #409 #505\n* Bugfix: Several fixes for tensorflow integration\n* Bugfix: Fixed crash due to missing brand-key on some machines # 512\n* Internal: Migrated CI server to Azure\n* Internal: Added pre-commit hooks for pep 8 checks and python black for automated code formatting\n* Internal: Started using pathlib.Path instead of os.path in many places\n\n\n0.7.5 (2019-06-20)\n++++++++++++++++++\nLast release to support Python 2.7.\n\n* Feature: major improvements to error reporting (thanks @thequilo)\n* Feature: added print_named_configs command\n* Feature: added option to add metadata to artifacts (thanks @jarnoRFB)\n* Feature: content type detection for artifacts (thanks @jarnoRFB)\n* Feature: automatic seeding for pytorch (thanks @srossi93)\n* Feature: add proxy support to telegram observer (thanks @brickerino)\n* Feature: made MongoObserver fail dump dir configurable (thanks @jarnoRFB)\n* Feature: added queue-based observer that better handles unreliable connections (thanks @jarnoRFB)\n* Bugfix: some fixes to stdout capturing\n* Bugfix: FileStorageObserver now creates directories only when starting a run (#329; thanks @thomasjpfan)\n* Bugfix: Fixed config_hooks (#326; thanks @thomasjpfan)\n* Bugfix: Fixed a crash when overwriting non-dict config entries with dicts (#325; thanks @thomasjpfan)\n* Bugfix: fixed problem with running in conda environment (#341)\n* Bugfix: numpy aware config change detection (#344)\n* Bugfix: allow dependencies to be compiled libraries (thanks @jnphilipp)\n* Bugfix: output colorization now works on 256 and 16 color terminals (thanks @bosr)\n* Bugfix: fixed problem with tinydb observer logging (#327; thanks @michalgregor)\n* Bugfix: ignore folders that have the same name as a named_config (thanks @boeddeker)\n* Bugfix: setup no longer overwrites pre-configured root logger (thanks @thequilo)\n* Bugfix: compatibility with tensorflow 2.0 (thanks @tarik, @gabrieldemarmiesse)\n* Bugfix: fixed exception when no tee is available for stdout capturing (thanks @greg-farquhar)\n* Bugfix: fixed concurrency issue with FileStorageObserver (thanks @dekuenstle)\n\n\n0.7.4 (2018-06-12)\n++++++++++++++++++\n* Bugfix: fixed problem with postgres backend of SQLObserver (thanks @bensternlieb)\n* Bugfix: fixed a problem with the interaction of ingredients and named configs\n* Feature: added metrics logging to the FileStorageObserver (thanks @ummavi)\n\n\n0.7.3 (2018-05-06)\n++++++++++++++++++\n* Feature: support custom experiment base directory (thanks @anibali)\n* Feature: added option to pass existing MongoClient to MongoObserver (thanks @rueberger)\n* Feature: allow setting the config docstring from named configs\n* Feature: added py-cpuinfo as fallback for gathering CPU information (thanks @serv-inc)\n* Feature: added support for _log argument in config function\n* Bugfix: stacktrace filtering now correctly handles chained exceptions (thanks @kamo-naoyuki)\n* Bugfix: resolved issue with stdout capturing sometimes loosing the last few lines\n* Bugfix: fixed the overwrite option of MongoObserver\n* Bugfix: fixed a problem with the heartbeat sometimes not ending\n* Bugfix: fixed an error with running in interactive mode\n* Bugfix: added a check for non-unique ingredient paths (thanks @boeddeker)\n* Bugfix: fixed several problems with utf-8 decoding (thanks @LukasDrude, @wjp)\n* Bugfix: fixed nesting structure of _config (thanks  @boeddeker)\n* Bugfix: fixed crash when using git integration with empty repository (thanks @ramon-oliveira)\n* Bugfix: fixed a crash with first run using sqlite backend\n* Bugfix: fixed several problem with the tests (thanks @thomasjpfan)\n* Bugfix: fixed racing condition in FileStorageObserver (thanks @boeddeker)\n* Bugfix: fixed problem with overwriting named configs of ingredients (thanks @pimdh)\n* Bugfix: removed deprecated call to inspect.getargspec()\n* Bugfix: fixed problem with empty dictionaries disappearing from config updates and named configs (thanks @TomVeniat)\n* Bugfix: fixed problem with commandline parsing when program name contained spaces\n* Bugfix: loglevl option is now taken into account for config related warnings\n* Bugfix: properly handle numpy types in metrics logging\n\n\n0.7.2 (2017-11-02)\n++++++++++++++++++\n* API Change: added host_info to queued_event\n* Feature: improved and configurable dependency discovery system\n* Feature: improved and configurable source-file discovery system\n* Feature: better error messages for missing or misspelled commands\n* Feature: -m flag now supports passing an id for a run to overwrite\n* Feature: allow captured functions to be called outside of a run (thanks @berleon)\n* Bugfix: fixed issue with telegram imports (thanks @millawell)\n\n\n0.7.1 (2017-09-14)\n++++++++++++++++++\n* Refactor: lazy importing of many optional dependencies\n* Feature: added metrics API for adding live monitoring information to the MongoDB\n* Feature: added integration with tensorflow for automatic capturing of LogWriter paths\n* Feature: set seed of tensorflow if it is imported\n* Feature: named_configs can now affect the config of ingredients\n* Bugfix: failed runs now return with exit code 1 by default\n* Bugfix: fixed a problem with UTF-8 symbols in stdout\n* Bugfix: fixed a threading issue with the SQLObserver\n* Bugfix: fixed a problem with consecutive ids in the SQLObserver\n* Bugfix: heartbeat events now also serialize the intermediate results\n* Bugfix: reapeatedly calling run from python with an option for adding an\n          observer, no longer duplicates observers\n* Bugfix: fixed a problem where **kwargs of captured functions might be modified\n* Bugfix: fixed an encoding problem with the FileStorageObserver\n* Bugfix: fixed an issue where determining the version of some packages would crash\n* Bugfix: fixed handling of relative filepaths in the SQLObserver and the TinyDBObserver\n\n\n0.7.0 (2017-05-07)\n++++++++++++++++++\n* Feature: host info now contains information about NVIDIA GPUs (if available)\n* Feature: git integration: sacred now collects info about the git repository\n           of the experiment (if available and if gitpython is installed)\n* Feature: new ``--enforce-clean`` flag that cancels a run if the\n           git repository is dirty\n* Feature: added new TinyDbObserver and TinyDbReader (thanks to @MrKriss)\n* Feature: added new SqlObserver\n* Feature: added new FileStorageObserver\n* Feature: added new SlackObserver\n* Feature: added new TelegramObserver (thanks to @black-puppydog)\n* Feature: added save_config command\n* Feature: added queue flag to just queue a run instead of executing it\n* Feature: added TimeoutInterrupt to signal that a run timed out\n* Feature: experiments can now be run in Jupyter notebook, but will fail with\n           an error by default, which can be deactivated using interactive=True\n* Feature: allow to pass unparsed commandline string to ``ex.run_commandline``.\n* Feature: improved stdout/stderr capturing: it now also collects non-python\n           outputs and logging.\n* Feature: observers now share the id of a run and it is available during\n           runtime as ``run._id``.\n* Feature: new ``--print_config`` flag to always print config first\n* Feature: added sacred.SETTINGS as a place to configure some of the behaviour\n* Feature: ConfigScopes now extract docstrings and line comments and display\n           them when calling ``print_config``\n* Feature: observers are now run in order of priority (settable)\n* Feature: new ``--name=NAME`` option to set the name of experiment for this run\n* Feature: the heartbeat event now stores an intermediate result (if set).\n* Feature: ENVIRONMENT variables can be captured as part of host info.\n* Feature: sped up the applying_lines_and_backfeeds stdout filter. (thanks to @remss)\n* Feature: adding resources by name (thanks to @d4nst)\n* API Change: all times are now in UTC\n* API Change: significantly changed the mongoDB layout\n* API Change: MongoObserver and FileStorageObserver now use consecutive\n              integers as _id\n* API Change: the name passed to Experiment is now optional and defaults to the\n              name of the file in which it was instantiated.\n              (The name is still required for interactive mode)\n* API Change: Artifacts can now be named, and are stored by the observers under\n              that name.\n* API Change: Experiment.run_command is deprecated in favor of run, which now\n              also takes a command_name parameter.\n* API Change: Experiment.run now takes an options argument to add\n              commandline-options also from python.\n* API Change: Experiment.get_experiment_info() now returns source-names as\n              relative paths and includes a separate base_dir entry\n* Dependencies: Migrated from six to future, to avoid conflicts with old\n                preinstalled versions of six.\n* Bugfix: fixed a problem when trying  to set the loglevel to DEBUG\n* Bugfix: type conversions from None to some other type are now correctly ignored\n* Bugfix: fixed a problem with stdout capturing breaking tools that access\n          certain attributes of ``sys.stdout`` or ``sys.stderr``.\n* Bugfix: @main, @automain, @command and @capture now support functions with\n           Python3 style annotations.\n* Bugfix: fixed a problem with config-docs from ingredients not being propagated\n* Bugfix: fixed setting seed to 0 being ignored\n\n0.6.10 (2016-08-08)\n+++++++++++++++++++\n* Bugfix: fixed a problem when trying  to set the loglevel to DEBUG\n* Bugfix: fixed a random crash of the heartbeat thread (see #101).\n* Feature: added --force/-f option to disable errors and warnings concerning\n           suspicious changes. (thanks to Yannic Kilcher)\n* Feature: experiments can now be run in Jupyter notebook, but will fail with\n           an error by default, which can be deactivated using interactive=True\n* Feature: added support for adding a captured out filter, and a filter that\n           and applies backspaces and linefeeds before saving like a terminal\n           would. (thanks to Kevin McGuinness)\n\n0.6.9 (2016-01-16)\n++++++++++++++++++\n* Bugfix: fixed support for ``@ex.named_config`` (was broken by 0.6.8)\n* Bugfix: fixed handling of captured functions with prefix for failing on\n          added unused config entries\n\n0.6.8 (2016-01-14)\n++++++++++++++++++\n* Feature: Added automatic conversion of ``pandas`` datastructures in the\n           custom info dict to json-format in the MongoObserver.\n* Feature: Fail if a new config entry is added but it is not used anywhere\n* Feature: Added a warning if no observers were added to the experiment.\n           Added also an ``unobserved`` keyword to commands and a\n           ``--unobserved`` commandline option to silence that warning\n* Feature: Split the debug flag ``-d`` into two flags: ``-d`` now only disables\n           stacktrace filtering, while ``-D`` adds post-mortem debugging.\n* API change: renamed ``named_configs_to_use`` kwarg in ``ex.run_command``\n              method to ``named_configs``\n* API change: changed the automatic conversion of numpy arrays in the\n              MongoObserver from pickle to human readable nested lists.\n* Bugfix: Fixed a problem with debugging experiments.\n* Bugfix: Fixed a problem with numpy datatypes in the configuration\n* Bugfix: More helpful error messages when using ``return`` or ``yield`` in a\n          config scope\n* Bugfix: Be more helpful when using -m/--mongo_db and pymongo is not installed\n\n0.6.7 (2015-09-11)\n++++++++++++++++++\n* Bugfix: fixed an error when trying to add a mongo observer via command-line\n\n0.6.6 (2015-09-10)\n++++++++++++++++++\n* Feature: added -c/--comment commandline option to add a comment to a run\n* Feature: added -b/--beat_interval commandline option to control the\n           rate of heartbeat events\n* Feature: introduced an easy way of adding custom commandline options\n\n0.6.5 (2015-08-28)\n++++++++++++++++++\n* Feature: Support ``@ex.capture`` on methods (thanks to @Treora)\n* Bugfix: fixed an error that occurred when a dependency module didn't have a\n          the '__file__' attribute\n\n0.6.4 (2015-06-12)\n++++++++++++++++++\n* Bugfix: fixed a problem where some config modification would be displayed as\n          added if there where multiple ConfigScopes involved\n* Bugfix: fixed a problem with tracking typechanges related to None-type\n* Bugfix: fixed a crash related to MongoObserver being an unhashable type\n* Bugfix: added back setslice and delslice methods to DogmaticList for\n          python 2.7 compatibility\n\n0.6.3 (2015-04-28)\n++++++++++++++++++\n* Bugfix: fixed a bug in the mongo observer that would always crash the final\n          save\n* Bugfix: automatic detection of local source files no longer wrongly detects\n          non-local files in subdirectories.\n\n0.6.2 (2015-04-16)\n++++++++++++++++++\n* Bugfix: fixed crash when using artifacts\n* Bugfix: added resources are now saved immediately\n\n0.6.1 (2015-04-05)\n++++++++++++++++++\n* Bugfix: fixed a crash when some numpy datatypes were not present\n          (like numpy.float128)\n* Bugfix: Made MissingDependencyMock callable so it would also correctly\n          report the missing dependency when called\n* Bugfix: MongoObserver would just crash the experiment if the result or the\n          info are not serializable. Now it warns and tries to alter\n          problematic entries such that they can be stored.\n\n0.6 (2015-03-12)\n++++++++++++++++\n* Feature: With the new ``add_artifact`` function files can be added to a run\n           That will fire an ``artifact event`` and they will also be stored\n           in the database by the MongoObserver.\n* Feature: Files can be opened through the experiment using ``open_resource``,\n           which will fire a ``resource_event`` and the file is automatically\n           saved to the database by the MongoObserver\n* Feature: Collections used by the MongoObserver can now have a custom prefix\n* Feature: MongoObserver saves all sources as separate files to the database\n           using GridFS\n* Feature: Sources and package dependencies can now also be manually added\n* Feature: Automatically collect imported sources and dependencies also from\n           ingredients\n* Feature: added print_dependencies command\n* Feature: With the ``--debug`` flag Sacred now automatically enters\n           post-mortem debugging after an exception.\n* Feature: Only filter the stacktrace if exception originated outside of Sacred\n* Feature: Allow to specify a config file (json, pickle or yaml) on the\n           command-line using with.\n* Feature: Normal dictionaries can now be added as configuration to experiments\n           using the new ``add_config`` method.\n* Feature: MongoObserver now tries to reconnect to the MongoDB if connection\n           is lost, and at the end of an experiment writes the entry to a\n           tempfile if the reconnects failed.\n* Bugfix: Invalid config keys could crash the MongoObserver or the\n          print_config command. Now they are checked at the beginning and an\n          exception is thrown.\n* Bugfix: fixed coloring of seeds modified by or entries added by named configs\n* Documentation: greatly improved the examples and added them to the docs\n\n0.5.2 (2015-02-09)\n++++++++++++++++++\n* Bugfix: processor name was not queried correctly on OSX\n\n0.5.1 (2014-10-07)\n++++++++++++++++++\n* Feature: added special argument ``_config`` for captured functions\n* Feature: config entries that remain unchanged through config updates are no\n           longer marked as modified by print_config\n* Optimization: special arguments ``_rnd`` and ``_seed`` are now only generated\n                if needed\n* Bugfix: undocumented defective feature ``**config`` removed from\n          captured functions\n* Bugfix: fixed bug where indentation could lead to errors in a ``ConfigScope``\n* Bugfix: added warning when attempting to overwrite an ingredient\n          and it is ignored by Sacred\n* Bugfix: fixed issue with synchronizing captured out at the end of the run.\n          (before up to 10sec of captured output could be lost at the end)\n* Bugfix: modifications on seed were not marked correctly by print_config\n* Bugfix: changes to seed in NamedConfig would not correctly affect Ingredients\n          Note that in order to fix this we removed the access to seed from all\n          ConfigScopes. You can still set the seed but you can no longer access\n          it from any ConfigScope including named ones.\n          (Of course this does not affect captured functions at all.)\n* Style: Lots of pep8 and pylint fixes\n\n0.5 (2014-09-22)\n++++++++++++++++\n* First public release of Sacred\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.052734375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Klaus Greff\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0625,
          "content": "include LICENSE.txt\ninclude README.rst\ninclude requirements.txt\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.5654296875,
          "content": ".PHONY: help clean clean-pyc clean-build clean-test clean-docs lint test \\\n        test-all coverage docs release dist\n\nhelp:\n\t@echo \"clean - remove all build, doc, test, coverage and Python artifacts\"\n\t@echo \"clean-build - remove build artifacts\"\n\t@echo \"clean-pyc - remove Python file artifacts\"\n\t@echo \"clean-test - remove test and coverage artifacts\"\n\t@echo \"clean-doc - remove documentation artifacts\"\n\t@echo \"lint - check style with flake8\"\n\t@echo \"test - run tests quickly with the default Python\"\n\t@echo \"test-all - run tests on every Python version with tox\"\n\t@echo \"coverage - check code coverage quickly with the default Python\"\n\t@echo \"docs - generate Sphinx HTML documentation, including API docs\"\n\t@echo \"release - package and upload a release\"\n\t@echo \"dist - package\"\n\nclean: clean-build clean-pyc clean-test clean-docs\n\nclean-build:\n\trm -fr build/\n\trm -fr dist/\n\trm -fr *.egg-info\n\nclean-pyc:\n\tfind . -name '*.pyc' -exec rm -f {} +\n\tfind . -name '*.pyo' -exec rm -f {} +\n\tfind . -name '*~' -exec rm -f {} +\n\tfind . -name '__pycache__' -exec rm -fr {} +\n\nclean-test:\n\trm -fr .tox/\n\trm -f .coverage\n\trm -fr htmlcov/\n\trm -fr .cache/\n\nclean-docs:\n\t$(MAKE) -C docs clean\n\nlint:\n\tflake8 sacred\n\ntest: clean-pyc clean-test\n\tpy.test\n\ntest-all: clean-pyc\n\ttox\n\ncoverage: clean-pyc\n\tpy.test --cov sacred\n\tcoverage html\n\txdg-open htmlcov/index.html\n\ndocs:\n\t$(MAKE) -C docs clean\n\t$(MAKE) -C docs html\n\txdg-open docs/_build/html/index.html\n\nrelease: clean\n\tpython setup.py sdist upload\n\tpython setup.py bdist_wheel upload\n\ndist: clean\n\tpython setup.py sdist\n\tpython setup.py bdist_wheel\n\tls -l dist\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 12.3994140625,
          "content": "Sacred\n======\n\n    | *Every experiment is sacred*\n    | *Every experiment is great*\n    | *If an experiment is wasted*\n    | *God gets quite irate*\n\n|pypi| |py_versions| |license| |rtfd| |doi|\n\n|build| |coverage| |code_quality| |black|\n\n\n\n\nSacred is a tool to help you configure, organize, log and reproduce experiments.\nIt is designed to do all the tedious overhead work that you need to do around\nyour actual experiment in order to:\n\n- keep track of all the parameters of your experiment\n- easily run your experiment for different settings\n- save configurations for individual runs in a database\n- reproduce your results\n\nSacred achieves this through the following main mechanisms:\n\n-  **Config Scopes** A very convenient way of the local variables in a function\n   to define the parameters your experiment uses.\n-  **Config Injection**: You can access all parameters of your configuration\n   from every function. They are automatically injected by name.\n-  **Command-line interface**: You get a powerful command-line interface for each\n   experiment that you can use to change parameters and run different variants.\n-  **Observers**: Sacred provides Observers that log all kinds of information\n   about your experiment, its dependencies, the configuration you used,\n   the machine it is run on, and of course the result. These can be saved\n   to a MongoDB, for easy access later.\n-  **Automatic seeding** helps controlling the randomness in your experiments,\n   such that the results remain reproducible.\n\nExample\n-------\n+------------------------------------------------+--------------------------------------------+\n| **Script to train an SVM on the iris dataset** | **The same script as a Sacred experiment** |\n+------------------------------------------------+--------------------------------------------+\n| .. code:: python                               | .. code:: python                           |\n|                                                |                                            |\n|  from numpy.random import permutation          |   from numpy.random import permutation     |\n|  from sklearn import svm, datasets             |   from sklearn import svm, datasets        |\n|                                                |   from sacred import Experiment            |\n|                                                |   ex = Experiment('iris_rbf_svm')          |\n|                                                |                                            |\n|                                                |   @ex.config                               |\n|                                                |   def cfg():                               |\n|  C = 1.0                                       |     C = 1.0                                |\n|  gamma = 0.7                                   |     gamma = 0.7                            |\n|                                                |                                            |\n|                                                |   @ex.automain                             |\n|                                                |   def run(C, gamma):                       |\n|  iris = datasets.load_iris()                   |     iris = datasets.load_iris()            |\n|  perm = permutation(iris.target.size)          |     per = permutation(iris.target.size)    |\n|  iris.data = iris.data[perm]                   |     iris.data = iris.data[per]             |\n|  iris.target = iris.target[perm]               |     iris.target = iris.target[per]         |\n|  clf = svm.SVC(C=C, kernel='rbf',              |     clf = svm.SVC(C=C, kernel='rbf',       |\n|          gamma=gamma)                          |             gamma=gamma)                   |\n|  clf.fit(iris.data[:90],                       |     clf.fit(iris.data[:90],                |\n|          iris.target[:90])                     |             iris.target[:90])              |\n|  print(clf.score(iris.data[90:],               |     return clf.score(iris.data[90:],       |\n|                  iris.target[90:]))            |                      iris.target[90:])     |\n+------------------------------------------------+--------------------------------------------+\n\nDocumentation\n-------------\nThe documentation is hosted at `ReadTheDocs <http://sacred.readthedocs.org/>`_. You can also `Ask Sacred Guru <https://gurubase.io/g/sacred>`_, it is a Sacred-focused AI to answer your questions.\n\nInstalling\n----------\nYou can directly install it from the Python Package Index with pip:\n\n    pip install sacred\n\nOr if you want to do it manually you can checkout the current version from git\nand install it yourself:\n\n   | git clone https://github.com/IDSIA/sacred.git\n   | cd sacred\n   | python setup.py install\n\nYou might want to also install the ``numpy`` and the ``pymongo`` packages. They are\noptional dependencies but they offer some cool features:\n\n    pip install numpy pymongo\n\nTests\n-----\nThe tests for sacred use the `pytest <http://pytest.org/latest/>`_ package.\nYou can execute them by running ``pytest`` in the sacred directory like this:\n\n    pytest\n\nThere is also a config file for `tox <https://tox.readthedocs.io/en/latest/>`_ so you\ncan automatically run the tests for various python versions like this:\n\n    tox\n\nUpdate pytest version\n+++++++++++++++++++++\n\nIf you update or change the pytest version, the following files need to be changed:\n\n- ``dev-requirements.txt``\n- ``tox.ini``\n- ``test/test_utils.py``\n- ``setup.py``\n\nContributing\n------------\nIf you find a bug, have a feature request or want to discuss something general you are welcome to open an\n`issue <https://github.com/IDSIA/sacred/issues>`_. If you have a specific question related\nto the usage of sacred, please ask a question on StackOverflow under the\n`python-sacred tag <https://stackoverflow.com/questions/tagged/python-sacred>`_. We value documentation\na lot. If you find something that should be included in the documentation please\ndocument it or let us know whats missing. If you are using Sacred in one of your projects and want to share\nyour code with others, put your repo in the `Projects using Sacred <docs/projects_using_sacred.rst`>_ list.\nPull requests are highly welcome!\n\nFrontends\n---------\nAt this point there are three frontends to the database entries created by sacred (that I'm aware of).\nThey are developed externally as separate projects.\n\n`Omniboard <https://github.com/vivekratnavel/omniboard>`_\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n.. image:: docs/images/omniboard-table.png\n.. image:: docs/images/omniboard-metric-graphs.png\n\nOmniboard is a web dashboard that helps in visualizing the experiments and metrics / logs collected by sacred.\nOmniboard is written with React, Node.js, Express and Bootstrap.\n\n\n`Incense <https://github.com/JarnoRFB/incense>`_\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n.. image:: docs/images/incense-artifact.png\n.. image:: docs/images/incense-metric.png\n\nIncense is a Python library to retrieve runs stored in a MongoDB and interactively display metrics and artifacts\nin Jupyter notebooks.\n\n`Sacredboard <https://github.com/chovanecm/sacredboard>`_\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n.. image:: docs/images/sacredboard.png\n\nSacredboard is a web-based dashboard interface to the sacred runs stored in a\nMongoDB.\n\n`Neptune <https://neptune.ai/>`_\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n.. image:: docs/images/neptune-compare.png\n.. image:: docs/images/neptune-collaboration.png\n\nNeptune is a metadata store for MLOps, built for teams that run a lot of experiments.\nIt gives you a single place to log, store, display, organize, compare, and query all your model-building metadata via API available for both Python and R programming languages:\n\n.. image:: docs/images/neptune-query-api.png\n\nIn order to log your sacred experiments to Neptune, all you need to do is add an observer:\n\n.. code-block:: python\n\n    from neptune.new.integrations.sacred import NeptuneObserver\n    ex.observers.append(NeptuneObserver(api_token='<YOUR_API_TOKEN>',\n                                        project='<YOUR_WORKSPACE/YOUR_PROJECT>'))\n\nFor more info, check the `Neptune + Sacred integration guide <https://docs.neptune.ai/integrations-and-supported-tools/experiment-tracking/sacred>`_.\n\n`SacredBrowser <https://github.com/michaelwand/SacredBrowser>`_\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n.. image:: docs/images/sacred_browser.png\n\nSacredBrowser is a PyQt4 application to browse the MongoDB entries created by\nsacred experiments.\nFeatures include custom queries, sorting of the results,\naccess to the stored source-code, and many more.\nNo installation is required and it can connect to a local\ndatabase or over the network.\n\n\n`Prophet <https://github.com/Qwlouse/prophet>`_\n+++++++++++++++++++++++++++++++++++++++++++++++\nProphet is an early prototype of a webinterface to the MongoDB entries created by\nsacred experiments, that is discontinued.\nIt requires you to run `RestHeart <http://restheart.org>`_ to access the database.\n\n\nRelated Projects\n----------------\n\n`Sumatra <https://pythonhosted.org/Sumatra/>`_\n++++++++++++++++++++++++++++++++++++++++++++++\n   | Sumatra is a tool for managing and tracking projects based on numerical\n   | simulation and/or analysis, with the aim of supporting reproducible research.\n   | It can be thought of as an automated electronic lab notebook for\n   | computational projects.\n\nSumatra takes a different approach by providing commandline tools to initialize\na project and then run arbitrary code (not just python).\nIt tracks information about all runs in a SQL database and even provides a nice browser tool.\nIt integrates less tightly with the code to be run, which makes it easily\napplicable to non-python experiments.\nBut that also means it requires more setup for each experiment and\nconfiguration needs to be done using files.\nUse this project if you need to run non-python experiments, or are ok with the additional setup/configuration overhead.\n\n\n`Future Gadget Laboratory <https://github.com/Kaixhin/FGLab>`_\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n   | FGLab is a machine learning dashboard, designed to make prototyping\n   | experiments easier. Experiment details and results are sent to a database,\n   | which allows analytics to be performed after their completion. The server\n   | is FGLab, and the clients are FGMachines.\n\nSimilar to Sumatra, FGLab is an external tool that can keep track of runs from\nany program. Projects are configured via a JSON schema and the program needs to\naccept these configurations via command-line options.\nFGLab also takes the role of a basic scheduler by distributing runs over several\nmachines.\n\n\nLicense\n-------\nThis project is released under the terms of the `MIT license <http://opensource.org/licenses/MIT>`_.\n\n\nCiting Sacred\n-------------\n`K. Greff, A. Klein, M. Chovanec, F. Hutter, and J. Schmidhuber, ‘The Sacred Infrastructure for Computational Research’,\nin Proceedings of the 15th Python in Science Conference (SciPy 2017), Austin, Texas, 2017, pp. 49–56\n<http://conference.scipy.org/proceedings/scipy2017/klaus_greff.html>`_.\n\n\n.. |pypi| image:: https://img.shields.io/pypi/v/sacred.svg\n    :target: https://pypi.python.org/pypi/sacred\n    :alt: Current PyPi Version\n\n.. |py_versions| image:: https://img.shields.io/pypi/pyversions/sacred.svg\n    :target: https://pypi.python.org/pypi/sacred\n    :alt: Supported Python Versions\n\n.. |license| image:: https://img.shields.io/badge/license-MIT-blue.png\n    :target: http://choosealicense.com/licenses/mit/\n    :alt: MIT licensed\n\n.. |rtfd| image:: https://readthedocs.org/projects/sacred/badge/?version=latest&style=flat\n    :target: https://sacred.readthedocs.io/en/stable/\n    :alt: ReadTheDocs\n\n.. |doi| image:: https://zenodo.org/badge/doi/10.5281/zenodo.16386.svg\n    :target: http://dx.doi.org/10.5281/zenodo.16386\n    :alt: DOI for this release\n\n.. |build| image:: https://github.com/IDSIA/sacred/actions/workflows/test.yml/badge.svg\n    :target: https://github.com/IDSIA/sacred/actions/workflows/test.yml/badge.svg\n    :alt: Github Actions PyTest\n\n.. |coverage| image:: https://coveralls.io/repos/IDSIA/sacred/badge.svg\n    :target: https://coveralls.io/r/IDSIA/sacred\n    :alt: Coverage Report\n\n.. |code_quality| image:: https://scrutinizer-ci.com/g/IDSIA/sacred/badges/quality-score.png?b=master\n    :target: https://scrutinizer-ci.com/g/IDSIA/sacred/\n    :alt: Code Scrutinizer Quality\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n    :alt: Code style: black\n"
        },
        {
          "name": "dev-requirements.txt",
          "type": "blob",
          "size": 0.521484375,
          "content": "pytest==7.1.2 # tests/test_utils.py depends on that pytest version is exactly 7.1.2\ncolorama\ndocopt-ng\ngitdb2\nGitPython\nhashfs\njsonpickle\nMako\nMarkupSafe\nmock\nmongomock\nmunch>=2.5\npackaging\npandas\npbr\npython-dateutil\npytz\nPyYAML\nscandir\nsentinels\nsmmap2\nSQLAlchemy\ntinydb\ntinydb-serialization\nwrapt\nscikit-learn\npymongo<4.9 # mongomock.gridfs.enable_gridfs_integration() is not compatible with pymongo>=4.9. https://github.com/mongomock/mongomock/issues/903\npy-cpuinfo\nboto3\nmoto\ngoogle-compute-engine\ngoogle-cloud-storage\npre-commit\n"
        },
        {
          "name": "doc-requirements.txt",
          "type": "blob",
          "size": 0.02734375,
          "content": "sphinx\nsphinx-rtd-theme\ndoc8"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.3212890625,
          "content": "[tool.black]\ntarget-version = ['py38', 'py39', 'py310', 'py311']\ninclude = '\\.pyi?$'\nexclude = '''\n(\n  /(\n      \\.eggs         # exclude a few common directories in the\n    | \\.git          # root of the project\n    | \\.hg\n    | \\.mypy_cache\n    | \\.tox\n    | \\.venv\n    | _build\n    | buck-out\n    | build\n    | dist\n  )/\n)\n'''\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1259765625,
          "content": "docopt-ng>=0.9, <1.0\njsonpickle>=2.2.0\nmunch>=2.5, <5.0\nwrapt>=1.0, <2.0\npy-cpuinfo>=4.0\ncolorama>=0.4\npackaging>=18.0\nGitPython\n"
        },
        {
          "name": "sacred",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.4150390625,
          "content": "[bdist_wheel]\nuniversal=1\n[tool:pytest]\npep8ignore =\n    tests/test_config/test_config_scope.py ALL  # Lots of errors that need to be there for testing\n    build/* ALL\n    dist/* ALL\n    sacred.egg-info/* ALL\n[flake8]\nignore = D100,D101,D102,D103,D104,D105,D203,D401,F821,E722,E203,E501,N818,\n         # flake8 default ignores:\n         E121,E123,E126,E226,E24,E704,W503,W504\nmax-complexity = 10\ndocstring-convention = numpy\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.50390625,
          "content": "from pathlib import Path\n\nfrom setuptools import setup, find_packages\nimport os\n\nclassifiers = \"\"\"\nDevelopment Status :: 5 - Production/Stable\nIntended Audience :: Science/Research\nNatural Language :: English\nOperating System :: OS Independent\nProgramming Language :: Python :: 3.8\nProgramming Language :: Python :: 3.9\nProgramming Language :: Python :: 3.10\nProgramming Language :: Python :: 3.11\nTopic :: Utilities\nTopic :: Scientific/Engineering\nTopic :: Scientific/Engineering :: Artificial Intelligence\nTopic :: Software Development :: Libraries :: Python Modules\nLicense :: OSI Approved :: MIT License\n\"\"\"\n\ntry:\n    from sacred import __about__\n\n    about = __about__.__dict__\nexcept ImportError:\n    # installing - dependencies are not there yet\n    # Manually extract the __about__\n    about = dict()\n    exec(open(\"sacred/__about__.py\").read(), about)\n\n\nsetup(\n    name=\"sacred\",\n    version=about[\"__version__\"],\n    author=about[\"__author__\"],\n    author_email=about[\"__author_email__\"],\n    url=about[\"__url__\"],\n    packages=find_packages(include=[\"sacred\", \"sacred.*\"]),\n    package_data={\"sacred\": [os.path.join(\"data\", \"*\"), \"py.typed\"]},\n    scripts=[],\n    python_requires=\">=3.8\",\n    install_requires=Path(\"requirements.txt\").read_text().splitlines(),\n    tests_require=[\"mock>=3.0, <5.0\", \"pytest==7.1.2\"],\n    classifiers=list(filter(None, classifiers.split(\"\\n\"))),\n    description=\"Facilitates automated and reproducible experimental research\",\n    long_description=Path(\"README.rst\").read_text(encoding=\"utf-8\"),\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.9794921875,
          "content": "# Tox (http://tox.testrun.org/) is a tool for running tests\n# in multiple virtualenvs. This configuration file will run the\n# test suite on all supported python versions. To use it, \"pip install tox\"\n# and then run \"tox\" from this directory.\n\n[tox]\nenvlist = py{38,39,310,311}, setup, numpy-{120,121,123,200}, tensorflow-{212,216}\n\n[testenv]\ndeps =\n    -rdev-requirements.txt\ncommands =\n    pytest \\\n        {posargs} # substitute with tox' positional arguments\n\n[testenv:numpy-120]\nbasepython = python\ndeps =\n    -rdev-requirements.txt\n    numpy~=1.20.0\ncommands =\n    pytest tests/test_config {posargs}\n\n[testenv:numpy-121]\nbasepython = python\ndeps =\n    -rdev-requirements.txt\n    numpy~=1.21.0\ncommands =\n    pytest tests/test_config {posargs}\n\n[testenv:numpy-122]\nbasepython = python\ndeps =\n    -rdev-requirements.txt\n    numpy~=1.22.0\ncommands =\n    pytest tests/test_config {posargs}\n\n[testenv:numpy-123]\nbasepython = python\ndeps =\n    -rdev-requirements.txt\n    numpy~=1.23.0\ncommands =\n    pytest tests/test_config {posargs}\n\n[testenv:numpy-124]\nbasepython = python\ndeps =\n    -rdev-requirements.txt\n    numpy~=1.24.0rc1\ncommands =\n    pytest tests/test_config {posargs}\n\n[testenv:numpy-200]\nbasepython = python\ndeps =\n    -rdev-requirements.txt\n    numpy~=2.0.0\ncommands =\n    pytest tests/test_config {posargs}\n\n[testenv:tensorflow-212]\nbasepython = python\ndeps =\n    -rdev-requirements.txt\n    numpy<2.0.0\n    tensorflow~=2.12.0\ncommands =\n    pytest tests/test_stflow tests/test_optional.py \\\n        {posargs}\n\n\n[testenv:tensorflow-216]\nbasepython = python\ndeps =\n    -rdev-requirements.txt\n    tensorflow~=2.16.0\ncommands =\n    pytest tests/test_stflow tests/test_optional.py \\\n        {posargs}\n\n\n[testenv:setup]\nbasepython = python\ndeps =\n    pytest==7.1.2\n    mock\ncommands =\n    pytest {posargs}\n\n[testenv:coverage]\npassenv = TRAVIS, TRAVIS_*\nbasepython = python\ndeps =\n    -rdev-requirements.txt\n    pytest-cov\n    coveralls\n\ncommands =\n    pytest \\\n        --cov sacred \\\n        {posargs}\n    - coveralls\n"
        }
      ]
    }
  ]
}