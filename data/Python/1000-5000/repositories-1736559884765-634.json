{
  "metadata": {
    "timestamp": 1736559884765,
    "page": 634,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "asottile/pyupgrade",
      "stars": 3654,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "*.egg-info\n*.pyc\n/.coverage\n/.tox\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.107421875,
          "content": "repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: check-yaml\n    -   id: debug-statements\n    -   id: double-quote-string-fixer\n    -   id: name-tests-test\n    -   id: requirements-txt-fixer\n-   repo: https://github.com/asottile/setup-cfg-fmt\n    rev: v2.7.0\n    hooks:\n    -   id: setup-cfg-fmt\n-   repo: https://github.com/asottile/reorder-python-imports\n    rev: v3.14.0\n    hooks:\n    -   id: reorder-python-imports\n        args: [--py39-plus, --add-import, 'from __future__ import annotations']\n-   repo: https://github.com/asottile/add-trailing-comma\n    rev: v3.1.0\n    hooks:\n    -   id: add-trailing-comma\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v3.19.1\n    hooks:\n    -   id: pyupgrade\n        args: [--py39-plus]\n-   repo: https://github.com/hhatto/autopep8\n    rev: v2.3.1\n    hooks:\n    -   id: autopep8\n-   repo: https://github.com/PyCQA/flake8\n    rev: 7.1.1\n    hooks:\n    -   id: flake8\n-   repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.14.1\n    hooks:\n    -   id: mypy\n"
        },
        {
          "name": ".pre-commit-hooks.yaml",
          "type": "blob",
          "size": 0.24609375,
          "content": "-   id: pyupgrade\n    name: pyupgrade\n    description: Automatically upgrade syntax for newer versions.\n    entry: pyupgrade\n    language: python\n    types: [python]\n    # for backward compatibility\n    files: ''\n    minimum_pre_commit_version: 0.15.0\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0341796875,
          "content": "Copyright (c) 2017 Anthony Sottile\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.2509765625,
          "content": "[![build status](https://github.com/asottile/pyupgrade/actions/workflows/main.yml/badge.svg)](https://github.com/asottile/pyupgrade/actions/workflows/main.yml)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/asottile/pyupgrade/main.svg)](https://results.pre-commit.ci/latest/github/asottile/pyupgrade/main)\n\npyupgrade\n=========\n\nA tool (and pre-commit hook) to automatically upgrade syntax for newer\nversions of the language.\n\n## Installation\n\n```bash\npip install pyupgrade\n```\n\n## As a pre-commit hook\n\nSee [pre-commit](https://github.com/pre-commit/pre-commit) for instructions\n\nSample `.pre-commit-config.yaml`:\n\n```yaml\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v3.19.1\n    hooks:\n    -   id: pyupgrade\n```\n\n## Implemented features\n\n### Set literals\n\n```diff\n-set(())\n+set()\n-set([])\n+set()\n-set((1,))\n+{1}\n-set((1, 2))\n+{1, 2}\n-set([1, 2])\n+{1, 2}\n-set(x for x in y)\n+{x for x in y}\n-set([x for x in y])\n+{x for x in y}\n```\n\n### Dictionary comprehensions\n\n```diff\n-dict((a, b) for a, b in y)\n+{a: b for a, b in y}\n-dict([(a, b) for a, b in y])\n+{a: b for a, b in y}\n```\n\n### Replace unnecessary lambdas in `collections.defaultdict` calls\n\n```diff\n-defaultdict(lambda: [])\n+defaultdict(list)\n-defaultdict(lambda: list())\n+defaultdict(list)\n-defaultdict(lambda: {})\n+defaultdict(dict)\n-defaultdict(lambda: dict())\n+defaultdict(dict)\n-defaultdict(lambda: ())\n+defaultdict(tuple)\n-defaultdict(lambda: tuple())\n+defaultdict(tuple)\n-defaultdict(lambda: set())\n+defaultdict(set)\n-defaultdict(lambda: 0)\n+defaultdict(int)\n-defaultdict(lambda: 0.0)\n+defaultdict(float)\n-defaultdict(lambda: 0j)\n+defaultdict(complex)\n-defaultdict(lambda: '')\n+defaultdict(str)\n```\n\n### Format Specifiers\n\n```diff\n-'{0} {1}'.format(1, 2)\n+'{} {}'.format(1, 2)\n-'{0}' '{1}'.format(1, 2)\n+'{}' '{}'.format(1, 2)\n```\n\n### printf-style string formatting\n\nAvailability:\n- Unless `--keep-percent-format` is passed.\n\n```diff\n-'%s %s' % (a, b)\n+'{} {}'.format(a, b)\n-'%r %2f' % (a, b)\n+'{!r} {:2f}'.format(a, b)\n-'%(a)s %(b)s' % {'a': 1, 'b': 2}\n+'{a} {b}'.format(a=1, b=2)\n```\n\n### Unicode literals\n\n```diff\n-u'foo'\n+'foo'\n-u\"foo\"\n+'foo'\n-u'''foo'''\n+'''foo'''\n```\n\n### Invalid escape sequences\n\n```diff\n # strings with only invalid sequences become raw strings\n-'\\d'\n+r'\\d'\n # strings with mixed valid / invalid sequences get escaped\n-'\\n\\d'\n+'\\n\\\\d'\n-u'\\d'\n+r'\\d'\n # this fixes a syntax error in python3.3+\n-'\\N'\n+r'\\N'\n```\n\n### `is` / `is not` comparison to constant literals\n\nIn python3.8+, comparison to literals becomes a `SyntaxWarning` as the success\nof those comparisons is implementation specific (due to common object caching).\n\n```diff\n-x is 5\n+x == 5\n-x is not 5\n+x != 5\n-x is 'foo'\n+x == 'foo'\n```\n\n### `.encode()` to bytes literals\n\n```diff\n-'foo'.encode()\n+b'foo'\n-'foo'.encode('ascii')\n+b'foo'\n-'foo'.encode('utf-8')\n+b'foo'\n-u'foo'.encode()\n+b'foo'\n-'\\xa0'.encode('latin1')\n+b'\\xa0'\n```\n\n### extraneous parens in `print(...)`\n\nA fix for [python-modernize/python-modernize#178]\n\n```diff\n # ok: printing an empty tuple\n print(())\n # ok: printing a tuple\n print((1,))\n # ok: parenthesized generator argument\n sum((i for i in range(3)), [])\n # fixed:\n-print((\"foo\"))\n+print(\"foo\")\n```\n\n[python-modernize/python-modernize#178]: https://github.com/python-modernize/python-modernize/issues/178\n\n### constant fold `isinstance` / `issubclass` / `except`\n\n```diff\n-isinstance(x, (int, int))\n+isinstance(x, int)\n\n-issubclass(y, (str, str))\n+issubclass(y, str)\n\n try:\n     raises()\n-except (Error1, Error1, Error2):\n+except (Error1, Error2):\n     pass\n```\n\n### unittest deprecated aliases\n\nRewrites [deprecated unittest method aliases](https://docs.python.org/3/library/unittest.html#deprecated-aliases) to their non-deprecated forms.\n\n```diff\n from unittest import TestCase\n\n\n class MyTests(TestCase):\n     def test_something(self):\n-        self.failUnlessEqual(1, 1)\n+        self.assertEqual(1, 1)\n-        self.assertEquals(1, 1)\n+        self.assertEqual(1, 1)\n```\n\n### `super()` calls\n\n```diff\n class C(Base):\n     def f(self):\n-        super(C, self).f()\n+        super().f()\n```\n\n### \"new style\" classes\n\n#### rewrites class declaration\n\n```diff\n-class C(object): pass\n+class C: pass\n-class C(B, object): pass\n+class C(B): pass\n```\n\n#### removes `__metaclass__ = type` declaration\n\n```diff\n class C:\n-    __metaclass__ = type\n```\n\n### forced `str(\"native\")` literals\n\n```diff\n-str()\n+''\n-str(\"foo\")\n+\"foo\"\n```\n\n### `.encode(\"utf-8\")`\n\n```diff\n-\"foo\".encode(\"utf-8\")\n+\"foo\".encode()\n```\n\n### `# coding: ...` comment\n\nas of [PEP 3120], the default encoding for python source is UTF-8\n\n```diff\n-# coding: utf-8\n x = 1\n```\n\n[PEP 3120]: https://www.python.org/dev/peps/pep-3120/\n\n### `__future__` import removal\n\nAvailability:\n- by default removes `nested_scopes`, `generators`, `with_statement`,\n  `absolute_import`, `division`, `print_function`, `unicode_literals`\n- `--py37-plus` will also remove `generator_stop`\n\n```diff\n-from __future__ import with_statement\n```\n\n### Remove unnecessary py3-compat imports\n\n```diff\n-from io import open\n-from six.moves import map\n-from builtins import object  # python-future\n```\n\n### import replacements\n\nAvailability:\n- `--py36-plus` (and others) will replace imports\n\nsee also [reorder-python-imports](https://github.com/asottile/reorder_python_imports#removing--rewriting-obsolete-six-imports)\n\nsome examples:\n\n```diff\n-from collections import deque, Mapping\n+from collections import deque\n+from collections.abc import Mapping\n```\n\n```diff\n-from typing import Sequence\n+from collections.abc import Sequence\n```\n\n```diff\n-from typing_extensions import Concatenate\n+from typing import Concatenate\n```\n\n### rewrite `mock` imports\n\nAvailability:\n- [Unless `--keep-mock` is passed on the commandline](https://github.com/asottile/pyupgrade/issues/314).\n\n```diff\n-from mock import patch\n+from unittest.mock import patch\n```\n\n### `yield` => `yield from`\n\n```diff\n def f():\n-    for x in y:\n-        yield x\n+    yield from y\n-    for a, b in c:\n-        yield (a, b)\n+    yield from c\n```\n\n### Python2 and old Python3.x blocks\n\n```diff\n import sys\n-if sys.version_info < (3,):  # also understands `six.PY2` (and `not`), `six.PY3` (and `not`)\n-    print('py2')\n-else:\n-    print('py3')\n+print('py3')\n```\n\nAvailability:\n- `--py36-plus` will remove Python <= 3.5 only blocks\n- `--py37-plus` will remove Python <= 3.6 only blocks\n- so on and so forth\n\n```diff\n # using --py36-plus for this example\n\n import sys\n-if sys.version_info < (3, 6):\n-    print('py3.5')\n-else:\n-    print('py3.6+')\n+print('py3.6+')\n\n-if sys.version_info <= (3, 5):\n-    print('py3.5')\n-else:\n-    print('py3.6+')\n+print('py3.6+')\n\n-if sys.version_info >= (3, 6):\n-    print('py3.6+')\n-else:\n-    print('py3.5')\n+print('py3.6+')\n```\n\nNote that `if` blocks without an `else` will not be rewritten as it could introduce a syntax error.\n\n### remove `six` compatibility code\n\n```diff\n-six.text_type\n+str\n-six.binary_type\n+bytes\n-six.class_types\n+(type,)\n-six.string_types\n+(str,)\n-six.integer_types\n+(int,)\n-six.unichr\n+chr\n-six.iterbytes\n+iter\n-six.print_(...)\n+print(...)\n-six.exec_(c, g, l)\n+exec(c, g, l)\n-six.advance_iterator(it)\n+next(it)\n-six.next(it)\n+next(it)\n-six.callable(x)\n+callable(x)\n-six.moves.range(x)\n+range(x)\n-six.moves.xrange(x)\n+range(x)\n\n\n-from six import text_type\n-text_type\n+str\n\n-@six.python_2_unicode_compatible\n class C:\n     def __str__(self):\n         return u'C()'\n\n-class C(six.Iterator): pass\n+class C: pass\n\n-class C(six.with_metaclass(M, B)): pass\n+class C(B, metaclass=M): pass\n\n-@six.add_metaclass(M)\n-class C(B): pass\n+class C(B, metaclass=M): pass\n\n-isinstance(..., six.class_types)\n+isinstance(..., type)\n-issubclass(..., six.integer_types)\n+issubclass(..., int)\n-isinstance(..., six.string_types)\n+isinstance(..., str)\n\n-six.b('...')\n+b'...'\n-six.u('...')\n+'...'\n-six.byte2int(bs)\n+bs[0]\n-six.indexbytes(bs, i)\n+bs[i]\n-six.int2byte(i)\n+bytes((i,))\n-six.iteritems(dct)\n+dct.items()\n-six.iterkeys(dct)\n+dct.keys()\n-six.itervalues(dct)\n+dct.values()\n-next(six.iteritems(dct))\n+next(iter(dct.items()))\n-next(six.iterkeys(dct))\n+next(iter(dct.keys()))\n-next(six.itervalues(dct))\n+next(iter(dct.values()))\n-six.viewitems(dct)\n+dct.items()\n-six.viewkeys(dct)\n+dct.keys()\n-six.viewvalues(dct)\n+dct.values()\n-six.create_unbound_method(fn, cls)\n+fn\n-six.get_unbound_function(meth)\n+meth\n-six.get_method_function(meth)\n+meth.__func__\n-six.get_method_self(meth)\n+meth.__self__\n-six.get_function_closure(fn)\n+fn.__closure__\n-six.get_function_code(fn)\n+fn.__code__\n-six.get_function_defaults(fn)\n+fn.__defaults__\n-six.get_function_globals(fn)\n+fn.__globals__\n-six.raise_from(exc, exc_from)\n+raise exc from exc_from\n-six.reraise(tp, exc, tb)\n+raise exc.with_traceback(tb)\n-six.reraise(*sys.exc_info())\n+raise\n-six.assertCountEqual(self, a1, a2)\n+self.assertCountEqual(a1, a2)\n-six.assertRaisesRegex(self, e, r, fn)\n+self.assertRaisesRegex(e, r, fn)\n-six.assertRegex(self, s, r)\n+self.assertRegex(s, r)\n\n # note: only for *literals*\n-six.ensure_binary('...')\n+b'...'\n-six.ensure_str('...')\n+'...'\n-six.ensure_text('...')\n+'...'\n```\n\n### `open` alias\n\n```diff\n-with io.open('f.txt') as f:\n+with open('f.txt') as f:\n     ...\n```\n\n\n### redundant `open` modes\n\n```diff\n-open(\"foo\", \"U\")\n+open(\"foo\")\n-open(\"foo\", \"Ur\")\n+open(\"foo\")\n-open(\"foo\", \"Ub\")\n+open(\"foo\", \"rb\")\n-open(\"foo\", \"rUb\")\n+open(\"foo\", \"rb\")\n-open(\"foo\", \"r\")\n+open(\"foo\")\n-open(\"foo\", \"rt\")\n+open(\"foo\")\n-open(\"f\", \"r\", encoding=\"UTF-8\")\n+open(\"f\", encoding=\"UTF-8\")\n-open(\"f\", \"wt\")\n+open(\"f\", \"w\")\n```\n\n\n### `OSError` aliases\n\n```diff\n # also understands:\n # - IOError\n # - WindowsError\n # - mmap.error and uses of `from mmap import error`\n # - select.error and uses of `from select import error`\n # - socket.error and uses of `from socket import error`\n\n def throw():\n-    raise EnvironmentError('boom')\n+    raise OSError('boom')\n\n def catch():\n     try:\n         throw()\n-    except EnvironmentError:\n+    except OSError:\n         handle_error()\n```\n\n### `TimeoutError` aliases\n\nAvailability:\n- `--py310-plus` for `socket.timeout`\n- `--py311-plus` for `asyncio.TimeoutError`\n\n```diff\n\n def throw(a):\n     if a:\n-        raise asyncio.TimeoutError('boom')\n+        raise TimeoutError('boom')\n     else:\n-        raise socket.timeout('boom')\n+        raise TimeoutError('boom')\n\n def catch(a):\n     try:\n         throw(a)\n-    except (asyncio.TimeoutError, socket.timeout):\n+    except TimeoutError:\n         handle_error()\n```\n\n### `typing.Text` str alias\n\n```diff\n-def f(x: Text) -> None:\n+def f(x: str) -> None:\n     ...\n```\n\n\n### Unpacking list comprehensions\n\n```diff\n-foo, bar, baz = [fn(x) for x in items]\n+foo, bar, baz = (fn(x) for x in items)\n```\n\n\n### Rewrite `xml.etree.cElementTree` to `xml.etree.ElementTree`\n\n```diff\n-import xml.etree.cElementTree as ET\n+import xml.etree.ElementTree as ET\n-from xml.etree.cElementTree import XML\n+from xml.etree.ElementTree import XML\n```\n\n\n### Rewrite `type` of primitive\n\n```diff\n-type('')\n+str\n-type(b'')\n+bytes\n-type(0)\n+int\n-type(0.)\n+float\n```\n\n### `typing.NamedTuple` / `typing.TypedDict` py36+ syntax\n\nAvailability:\n- `--py36-plus` is passed on the commandline.\n\n```diff\n-NT = typing.NamedTuple('NT', [('a', int), ('b', Tuple[str, ...])])\n+class NT(typing.NamedTuple):\n+    a: int\n+    b: Tuple[str, ...]\n\n-D1 = typing.TypedDict('D1', a=int, b=str)\n+class D1(typing.TypedDict):\n+    a: int\n+    b: str\n\n-D2 = typing.TypedDict('D2', {'a': int, 'b': str})\n+class D2(typing.TypedDict):\n+    a: int\n+    b: str\n```\n\n### f-strings\n\nAvailability:\n- `--py36-plus` is passed on the commandline.\n\n```diff\n-'{foo} {bar}'.format(foo=foo, bar=bar)\n+f'{foo} {bar}'\n-'{} {}'.format(foo, bar)\n+f'{foo} {bar}'\n-'{} {}'.format(foo.bar, baz.womp)\n+f'{foo.bar} {baz.womp}'\n-'{} {}'.format(f(), g())\n+f'{f()} {g()}'\n-'{x}'.format(**locals())\n+f'{x}'\n```\n\n_note_: `pyupgrade` is intentionally timid and will not create an f-string\nif it would make the expression longer or if the substitution parameters are\nsufficiently complicated (as this can decrease readability).\n\n\n### `subprocess.run`: replace `universal_newlines` with `text`\n\nAvailability:\n- `--py37-plus` is passed on the commandline.\n\n```diff\n-output = subprocess.run(['foo'], universal_newlines=True)\n+output = subprocess.run(['foo'], text=True)\n```\n\n\n### `subprocess.run`: replace `stdout=subprocess.PIPE, stderr=subprocess.PIPE` with `capture_output=True`\n\nAvailability:\n- `--py37-plus` is passed on the commandline.\n\n```diff\n-output = subprocess.run(['foo'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+output = subprocess.run(['foo'], capture_output=True)\n```\n\n\n### remove parentheses from `@functools.lru_cache()`\n\nAvailability:\n- `--py38-plus` is passed on the commandline.\n\n```diff\n import functools\n\n-@functools.lru_cache()\n+@functools.lru_cache\n def expensive():\n     ...\n```\n\n### shlex.join\n\nAvailability:\n- `--py38-plus` is passed on the commandline.\n\n```diff\n-' '.join(shlex.quote(arg) for arg in cmd)\n+shlex.join(cmd)\n```\n\n### replace `@functools.lru_cache(maxsize=None)` with shorthand\n\nAvailability:\n- `--py39-plus` is passed on the commandline.\n\n```diff\n import functools\n\n-@functools.lru_cache(maxsize=None)\n+@functools.cache\n def expensive():\n     ...\n```\n\n\n### pep 585 typing rewrites\n\nAvailability:\n- File imports `from __future__ import annotations`\n    - Unless `--keep-runtime-typing` is passed on the commandline.\n- `--py39-plus` is passed on the commandline.\n\n```diff\n-def f(x: List[str]) -> None:\n+def f(x: list[str]) -> None:\n     ...\n```\n\n\n### pep 604 typing rewrites\n\nAvailability:\n- File imports `from __future__ import annotations`\n    - Unless `--keep-runtime-typing` is passed on the commandline.\n- `--py310-plus` is passed on the commandline.\n\n```diff\n-def f() -> Optional[str]:\n+def f() -> str | None:\n     ...\n```\n\n```diff\n-def f() -> Union[int, str]:\n+def f() -> int | str:\n     ...\n```\n\n### pep 696 TypeVar defaults\n\nAvailability:\n- File imports `from __future__ import annotations`\n    - Unless `--keep-runtime-typing` is passed on the commandline.\n- `--py313-plus` is passed on the commandline.\n\n```diff\n-def f() -> Generator[int, None, None]:\n+def f() -> Generator[int]:\n     yield 1\n```\n\n```diff\n-async def f() -> AsyncGenerator[int, None]:\n+async def f() -> AsyncGenerator[int]:\n     yield 1\n```\n\n### remove quoted annotations\n\nAvailability:\n- File imports `from __future__ import annotations`\n\n```diff\n-def f(x: 'queue.Queue[int]') -> C:\n+def f(x: queue.Queue[int]) -> C:\n```\n\n\n### use `datetime.UTC` alias\n\nAvailability:\n- `--py311-plus` is passed on the commandline.\n\n```diff\n import datetime\n\n-datetime.timezone.utc\n+datetime.UTC\n```\n"
        },
        {
          "name": "pyupgrade",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.0341796875,
          "content": "covdefaults>=2.1.0\ncoverage\npytest\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.1572265625,
          "content": "[metadata]\nname = pyupgrade\nversion = 3.19.1\ndescription = A tool to automatically upgrade syntax for newer versions.\nlong_description = file: README.md\nlong_description_content_type = text/markdown\nurl = https://github.com/asottile/pyupgrade\nauthor = Anthony Sottile\nauthor_email = asottile@umich.edu\nlicense = MIT\nlicense_files = LICENSE\nclassifiers =\n    License :: OSI Approved :: MIT License\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3 :: Only\n    Programming Language :: Python :: Implementation :: CPython\n    Programming Language :: Python :: Implementation :: PyPy\n\n[options]\npackages = find:\ninstall_requires =\n    tokenize-rt>=6.1.0\npython_requires = >=3.9\n\n[options.packages.find]\nexclude =\n    tests*\n    testing*\n\n[options.entry_points]\nconsole_scripts =\n    pyupgrade = pyupgrade._main:main\n\n[bdist_wheel]\nuniversal = True\n\n[coverage:run]\nplugins = covdefaults\n\n[mypy]\ncheck_untyped_defs = true\ndisallow_any_generics = true\ndisallow_incomplete_defs = true\ndisallow_untyped_defs = true\nwarn_redundant_casts = true\nwarn_unused_ignores = true\n\n[mypy-testing.*]\ndisallow_untyped_defs = false\n\n[mypy-tests.*]\ndisallow_untyped_defs = false\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.0712890625,
          "content": "from __future__ import annotations\n\nfrom setuptools import setup\nsetup()\n"
        },
        {
          "name": "testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.3154296875,
          "content": "[tox]\nenvlist = py,pypy3,pre-commit\n\n[testenv]\ndeps = -rrequirements-dev.txt\ncommands =\n    coverage erase\n    coverage run -m pytest {posargs:tests}\n    coverage report\n\n[testenv:pre-commit]\nskip_install = true\ndeps = pre-commit\ncommands = pre-commit run --all-files --show-diff-on-failure\n\n[pep8]\nignore = E265,E501,W504\n"
        }
      ]
    }
  ]
}