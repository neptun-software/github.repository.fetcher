{
  "metadata": {
    "timestamp": 1736560357562,
    "page": 890,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Miksus/rocketry",
      "stars": 3317,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.033203125,
          "content": "rocketry/_version.py export-subst\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5263671875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n*pyx\n\n# Build & packaging\nbuild/*\ndist/*\n*egg-info/*\n_version.py\n\n# Jupyter Notebook\n.ipynb_checkpoints\nprototype*\n\n# Environments\n.env\n.venv\nenv/\nenv_linux/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# IDE\n.vscode/\n.idea/\n\n# Testing\n.pytest_cache/\n\n# Private dumps\nproto/\ndraft/\nprivate/\n\n# Data & logs\n*.csv\n*.dat\n*.db\n\n# Private configurations\nprivate.yaml\n\n# Some other random stuff\nbash.exe.stackdump\n\n# Sphinx documentation\ndocs/_build/\n\n# tox\n.tox/\n\n# Coverage\ncov_data/"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.0986328125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nemailing the author.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "Contributors.md",
          "type": "blob",
          "size": 0.146484375,
          "content": "# Contributors\n\nMikael Koli - creator of Rocketry\nMark Mayo - fixes and clean up of repo with python 3 updates, pylint issues\nbogdan - Django cookbook"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2021 Mikael Koli\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2607421875,
          "content": "include rocketry/test/test_files/*.ipynb\ninclude rocketry/test/test_files/*.py\ninclude rocketry/config/defaults/*.json\ninclude rocketry/_session.py\ninclude rocketry/_setup.py\ninclude rocketry/_pkg.py\ninclude rocketry/_version.py\nrecursive-include rocketry/templates *"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.046875,
          "content": "\n\n<h1 align=\"center\"><a href=\"https://rocketry.readthedocs.io\">Rocketry</a></h1>\n<p align=\"center\">\n    <em>The engine to power your Python apps</em>\n</p>\n<p align=\"center\">\n    <a href=\"https://github.com/Miksus/rocketry/actions/workflows/main.yml/badge.svg?branch=master\" target=\"_blank\">\n        <img src=\"https://github.com/Miksus/rocketry/actions/workflows/main.yml/badge.svg?branch=master\" alt=\"Test\">\n    </a>\n    <a href=\"https://codecov.io/gh/Miksus/rocketry\" target=\"_blank\">\n        <img src=\"https://codecov.io/gh/Miksus/rocketry/branch/master/graph/badge.svg?token=U2KF1QA5HT\" alt=\"Test coverage\">\n    </a>\n    <a href=\"https://pypi.org/project/rocketry\" target=\"_blank\">\n        <img src=\"https://badgen.net/pypi/v/rocketry?color=969696\" alt=\"Package version\">\n    </a>\n    <a href=\"https://pypi.org/project/rocketry\" target=\"_blank\">\n        <img src=\"https://badgen.net/pypi/python/rocketry?color=969696&labelColor=black\" alt=\"Supported Python versions\">\n    </a>\n</p>\n\n-----------------\n\n## What is it?\n\nRocketry is a modern statement-based scheduling framework \nfor Python. It is simple, clean and extensive.\nIt is suitable for small and big projects.\n\nThis is how it looks like:\n\n```python\nfrom rocketry import Rocketry\nfrom rocketry.conds import daily\n\napp = Rocketry()\n\n@app.task(daily)\ndef do_daily():\n    ...\n\nif __name__ == '__main__':\n    app.run()\n```\n\nCore functionalities:\n\n- Powerful scheduling\n- Concurrency (async, threading, multiprocess)\n- Parametrization\n- Task pipelining\n- Modifiable session also in runtime\n- Async support\n\nLinks:\n\n- Documentation: https://rocketry.readthedocs.io\n- Source code: https://github.com/Miksus/rocketry\n- Releases: https://pypi.org/project/rocketry/\n\n## Why Rocketry?\n\nUnlike the alternatives, Rocketry's scheduler is \nstatement-based. Rocketry natively supports the \nsame scheduling strategies as the other options, \nincluding cron and task pipelining, but it can also be\narbitrarily extended using custom scheduling statements.\n\nHere is an example of custom conditions:\n\n```python\nfrom rocketry.conds import daily, time_of_week\nfrom pathlib import Path\n\n@app.cond()\ndef file_exists(file):\n    return Path(file).exists()\n\n@app.task(daily.after(\"08:00\") & file_exists(\"myfile.csv\"))\ndef do_work():\n    ...\n```\n\nRocketry is suitable for quick automation projects\nand for larger scale applications. It does not make\nassumptions of your project structure.\n\n## Installation\n\nInstall Rocketry from [PyPI](https://pypi.org/project/rocketry/):\n\n```shell\npip install rocketry\n```\n\n\n## More Examples\n\nHere are some more examples of what it can do.\n\n**Scheduling:**\n\n```python\nfrom rocketry.conds import every\nfrom rocketry.conds import hourly, daily, weekly, \nfrom rocketry.conds import time_of_day\nfrom rocketry.conds import cron\n\n@app.task(every(\"10 seconds\"))\ndef do_continuously():\n    ...\n\n@app.task(daily.after(\"07:00\"))\ndef do_daily_after_seven():\n    ...\n\n@app.task(hourly & time_of_day.between(\"22:00\", \"06:00\"))\ndef do_hourly_at_night():\n    ...\n\n@app.task((weekly.on(\"Mon\") | weekly.on(\"Sat\")) & time_of_day.after(\"10:00\"))\ndef do_twice_a_week_after_ten():\n    ...\n\n@app.task(cron(\"* 2 * * *\"))\ndef do_based_on_cron():\n    ...\n```\n\n**Pipelining tasks:**\n\n```python\nfrom rocketry.conds import daily, after_success\nfrom rocketry.args import Return\n\n@app.task(daily.after(\"07:00\"))\ndef do_first():\n    ...\n    return 'Hello World'\n\n@app.task(after_success(do_first))\ndef do_second(arg=Return('do_first')):\n    # arg contains the value of the task do_first's return\n    ...\n    return 'Hello Python'\n```\n\n\n**Parallelizing tasks:**\n\n```python\nfrom rocketry.conds import daily\n\n@app.task(daily, execution=\"main\")\ndef do_unparallel():\n    ...\n\n@app.task(daily, execution=\"async\")\nasync def do_async():\n    ...\n\n@app.task(daily, execution=\"thread\")\ndef do_on_separate_thread():\n    ...\n\n@app.task(daily, execution=\"process\")\ndef do_on_separate_process():\n    ...\n```\n\n---\n\n## Interested?\n\nRead more from [the documentation](https://rocketry.readthedocs.io).\n\n## About Library\n\n- **Author:** Mikael Koli ([Miksus](https://github.com/Miksus)) - koli.mikael@gmail.com\n- **License:** MIT\n\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.361328125,
          "content": "[build-system]\nrequires = [\"setuptools>=45\", \"setuptools_scm[toml]>=6.2\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.setuptools]\npackages = [\"rocketry\"]\n\n[project]\nname = \"rocketry\"\ndescription = \"Advanced scheduling framework\"\nreadme = \"README.md\"\nlicense = {file=\"LICENSE\"}\nauthors = [\n    {name = \"Mikael Koli\", email = \"koli.mikael@gmail.com\"},\n]\nrequires-python = \">=3.7\"\nclassifiers = [\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n\n    \"Topic :: System\",\n    \"Topic :: Software Development\",\n    \"Topic :: Software Development :: Libraries\",\n    \"Topic :: Software Development :: Libraries :: Application Frameworks\",\n    \"Topic :: Office/Business :: Scheduling\",\n\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: System Administrators\",\n    \"Intended Audience :: Information Technology\",\n]\ndynamic = [\"version\"]\ndependencies = [\n    'python-dateutil', \n    'redbird>=0.5.0', \n    'pydantic'\n]\n\n[tool.setuptools_scm]\nwrite_to = \"rocketry/_version.py\"\nlocal_scheme = \"no-local-version\"\n\n[project.urls]\nHomepage = 'https://github.com/Miksus/rocketry'\nDocumentation = 'https://rocketry.readthedocs.io'\nFunding = 'https://github.com/sponsors/Miksus'\nSource = 'https://github.com/Miksus/rocketry'\nChangelog = 'https://rocketry.readthedocs.io/en/stable/versions.html'\n\n[project.optional-dependencies]\ntest = [\n    \"pytest\",\n    \"pytest-asyncio\",\n]\n\ndocs = [\n    \"sphinx >= 1.7.5\",\n    \"pydata-sphinx-theme\",\n    \"sphinx_book_theme\",\n    \"sphinx-copybutton\",\n    \"sphinx-material\",\n]\n\n[tool.coverage.run]\nsource = [\"rocketry\"]\nbranch = false\nomit = [\n    \"test/*\",\n    \"_version.py\"\n]\ndata_file = \"cov_data/.coverage\"\n\n[tool.coverage.report]\nomit = [\n    \"rocketry/test/*\",\n    \"rocketry/_version.py\",\n    \"rocketry/__main__.py\"\n]\n# Regexes for lines to exclude from consideration\nexclude_lines = [\n    \"pragma: no cover\",\n\n    # Don't complain about abstract methods, they aren't run:\n    '''@(abc\\.)?abstractmethod''',\n\n    # Ignore type checking imports\n    \"if TYPE_CHECKING\",\n]\nignore_errors = true\n\n[tool.coverage.html]\ndirectory = \"htmlcov\""
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.060546875,
          "content": "# Minimum requirements\npydantic\nredbird>=0.5.0\npython-dateutil"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "rocketry",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.2880859375,
          "content": "import sys\n\nsys.stderr.write(\"\"\"\nUnsupported installation method: python setup.py\nPlease use `python -m pip install .` instead.\n\"\"\"\n)\n#sys.exit(1)\nfrom setuptools import setup\n\nsetup(\n    name=\"rocketry\",\n    install_requires = [\n        'python-dateutil', 'redbird>=0.5.0', 'pydantic'\n    ],\n)\n"
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.9287109375,
          "content": "[tox]\nenvlist = py36,py38,py310\n# isolated_build = True\n# requires = [-rrequirements.txt]\n\n[testenv]\ndeps = \n    -rrequirements.txt\n    pytest\n# change pytest tempdir and add posargs from command line\ncommands = pytest --pyargs rocketry -r chars\n\n[testenv:coverage]\nbasepython = python3.8\ndeps = \n    -rrequirements.txt\n    pytest-cov\n    pytest\n# change pytest tempdir and add posargs from command line\ncommands = pytest --cov=rocketry --cov-report=html rocketry/test\n# commands = pytest --cov {envsitepackagesdir}/rocketry --cov-report=html --cov-config=.coveragerc\n\n[testenv:wheeltest]\ndescription = Build and install the wheel and run Pytests in it.\ndeps = \n    pytest\nskip_install = True\ncommands =\n    # /bin/rm -rf build\n    python setup.py bdist_wheel\n    pip install --upgrade  --find-links={toxinidir}/dist rocketry\n    pytest --pyargs rocketry -r chars\n\n[testenv:docs]\ndescription = invoke sphinx-build to build the HTML docs\nbasepython = python3.8\ndeps = \n    -r{toxinidir}/requirements/docs.txt\n    sphinx >= 1.7.5\ncommands = sphinx-build docs \"{toxinidir}/docs/_build/html\" --color -W -bhtml {posargs}\n           sphinx-build -b doctest docs \"{toxinidir}/docs/_build/html\"\n           python -c 'import pathlib; print(\"documentation available under file://\\{0\\}\".format(pathlib.Path(r\"{toxworkdir}\") / \"docs_out\" / \"index.html\"))'\n\n[testenv:build]\ndescription = build the package.\nskip_install = true\n# install_command = pip install --upgrade build\ncommands = python setup.py bdist_wheel sdist\n\n[testenv:release]\ndescription = build and release the package.\nskip_install = true\ndeps = \n    twine\n# install_command = pip install --upgrade build\ncommands = python setup.py bdist_wheel sdist\n           twine upload dist/*\n\n[testenv:release-test]\ndescription = build and release the package.\nskip_install = true\ndeps = \n    twine\n# install_command = pip install --upgrade build\ncommands = python setup.py bdist_wheel sdist\n           twine upload -r testpypi dist/*"
        }
      ]
    }
  ]
}