{
  "metadata": {
    "timestamp": 1736559833062,
    "page": 574,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zeromq/pyzmq",
      "stars": 3765,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.181640625,
          "content": "[run]\nplugins = Cython.Coverage\nparallel = True\nbranch = False\nomit =\n    zmq/eventloop/minitornado/*\n    zmq/tests/*\n\n[report]\nexclude_lines =\n    pragma: no cover\nignore_errors = True\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.2314453125,
          "content": "# flake8 no longer used,\n# ruff config in pyproject.toml\n[flake8]\nexclude = .git,dist,docs,zmq/eventloop/minitornado,buildutils/templates\nignore = E,W\n\nper-file-ignores =\n  **/__init__.py:F401,F403\n  zmq/tests/**:F841\n  examples/**:F841\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.62890625,
          "content": ".idea\n.vagrant\n*.pyc\nzmq/backend/cython/*.c\nzmq/backend/cffi/*.o\nzmq/devices/*.c\nzmq/utils/*.json\nzmq/include/*.h\n__pycache__\nbuild\ndist\nconf\nbundled\nlibzmq-dll\n*.egg-info\n*.so\n*.pyd\n*.dll\n*.dylib\ndocs/source/api/generated\ndocs/gh-pages\nsetup.cfg\nMANIFEST\n.tox\nexamples/security/public_keys\nexamples/security/private_keys\nwheelhouse\n.coverage\n.cache\n.pytest_cache\nwin-dist\n*.pickle\n.ipynb_checkpoints\nvenv\n*.code-workspace\n.vscode\n.mypy_cache\n.coverage\nhtmlcov\ncoverage.xml\nenv\n.eggs\n\nCMakeFiles\nCMakeCache.txt\ncmake_install.cmake\n_deps\n/Makefile\n_src\nlicenses/*\n!licenses/LICENSE.tornado.txt\n.virtual_documents\n/libsodium-*\n/zeromq-*\n*.tar.gz\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.7158203125,
          "content": "Brian E. Granger <ellisonbg@gmail.com> Brian Granger <ellisonbg@gmail.com>\nChris Laws <clawsicus@gmail.com> Chris Laws <claws@localhost>\nDaniel Lundin <dln@eintr.org> Daniel Lundin <dln@spotify.com>\nMin Ragan-Kelley <benjaminrk@gmail.com> Min RK <benjaminrk@gmail.com>\nMin Ragan-Kelley <benjaminrk@gmail.com> MinRK <benjaminrk@gmail.com>\nMichel Pelletier <pelletier.michel@gmail.com> Michel Pelletier <pelletier.michel@yahoo.com>\nNicholas Piël <nicholas@nichol.as> nicholas <nicholas@bastet.ss.sitesupport.com>\nFelipe Cruz <felipecruz@loogica.net> felipecruz <felipecruz@loogica.net>\nFelipe Cruz <felipecruz@loogica.net> Felipe cruz <felipecruz@loogica.net>\nYannick Hold <yannickhold@gmail.com> Yannick Hold <x_godsoul@hotmail.com>\n"
        },
        {
          "name": ".obs",
          "type": "tree",
          "content": null
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.599609375,
          "content": "ci:\n  autoupdate_schedule: monthly\n\nexclude: ^zmq/eventloop/minitornado/\nrepos:\n  - repo: local\n    hooks:\n      - id: constants\n        name: constants\n        files: \"^.*/constants.py\"\n        description: Generate constants files\n        entry: python -m buildutils.constants\n        language: python\n        pass_filenames: false\n        additional_dependencies:\n          - ruff\n  - repo: https://github.com/executablebooks/mdformat\n    rev: 0.7.18  # Use the ref you want to point at\n    hooks:\n      - id: mdformat\n        # Optionally add plugins\n        additional_dependencies:\n          - mdformat-black\n          - mdformat-myst\n        exclude: LICENSE.md\n\n  # autoformat and lint Python code\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.7.2\n    hooks:\n      - id: ruff\n        types_or:\n          - python\n          - jupyter\n          - pyi\n        args: [\"--fix\", \"--show-fixes\"]\n      - id: ruff-format\n        types_or:\n          - python\n          - jupyter\n          - pyi\n        # don't format zmq/constants.py twice\n        exclude: zmq/constants.py\n\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.13.0\n    hooks:\n      - id: mypy\n        files: zmq/.*\n        # mypy gets the wrong results\n        # if we pass specific files instead of the zmq dir\n        # no idea why\n        pass_filenames: false\n        args: [zmq]\n        additional_dependencies:\n          - types-paramiko\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: end-of-file-fixer\n      - id: check-executables-have-shebangs\n      - id: requirements-txt-fixer\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.0322265625,
          "content": "docs/source/_templates\nexternals\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.3291015625,
          "content": "# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\nversion: 2\nformats: all\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\nsphinx:\n  configuration: docs/source/conf.py\n  fail_on_warning: true\n\npython:\n  install:\n    - requirements: docs/requirements.txt\n    - path: .\n"
        },
        {
          "name": "AUTHORS.md",
          "type": "blob",
          "size": 4.697265625,
          "content": "## Authors\n\nThis project was started and continues to be led by Brian E. Granger\n(ellisonbg AT gmail DOT com). Min Ragan-Kelley (benjaminrk AT gmail DOT\ncom) is the primary developer of pyzmq at this time.\n\nThe following people have contributed to the project:\n\n- Alexander Else (alexander DOT else AT team DOT telstra DOT com)\n- Alexander Pyhalov (apyhalov AT gmail DOT com)\n- Alexandr Emelin (frvzmb AT gmail DOT com)\n- Amr Ali (amr AT ledgerx DOT com)\n- Andre Caron (andre DOT l DOT caron AT gmail DOT com)\n- Andrea Crotti (andrea DOT crotti DOT 0 AT gmail DOT com)\n- Andrew Gwozdziewycz (git AT apgwoz DOT com)\n- Baptiste Lepilleur (baptiste DOT lepilleur AT gmail DOT com)\n- Brandyn A. White (bwhite AT dappervision DOT com)\n- Brian E. Granger (ellisonbg AT gmail DOT com)\n- Brian Hoffman (hoffman_brian AT bah DOT com)\n- Carlos A. Rocha (carlos DOT rocha AT gmail DOT com)\n- Chris Laws (clawsicus AT gmail DOT com)\n- Christian Wyglendowski (christian AT bu DOT mp)\n- Christoph Gohlke (cgohlke AT uci DOT edu)\n- Curtis (curtis AT tinbrain DOT net)\n- Cyril Holweck (cyril DOT holweck AT free DOT fr)\n- Dan Colish (dcolish AT gmail DOT com)\n- Daniel Lundin (dln AT eintr DOT org)\n- Daniel Truemper (truemped AT googlemail DOT com)\n- Douglas Creager (douglas DOT creager AT redjack DOT com)\n- Eduardo Stalinho (eduardooc DOT 86 AT gmail DOT com)\n- Eren Güven (erenguven0 AT gmail DOT com)\n- Erick Tryzelaar (erick DOT tryzelaar AT gmail DOT com)\n- Erik Tollerud (erik DOT tollerud AT gmail DOT com)\n- FELD Boris (lothiraldan AT gmail DOT com)\n- Fantix King (fantix DOT king AT gmail DOT com)\n- Felipe Cruz (felipecruz AT loogica DOT net)\n- Fernando Perez (Fernando DOT Perez AT berkeley DOT edu)\n- Frank Wiles (frank AT revsys DOT com)\n- Félix-Antoine Fortin (felix DOT antoine DOT fortin AT gmail DOT com)\n- Gavrie Philipson (gavriep AT il DOT ibm DOT com)\n- Godefroid Chapelle (gotcha AT bubblenet DOT be)\n- Greg Banks (gbanks AT mybasis DOT com)\n- Greg Ward (greg AT gerg DOT ca)\n- Guido Goldstein (github AT a-nugget DOT de)\n- Ian Lee (IanLee1521 AT gmail DOT com)\n- Ionuț Arțăriși (ionut AT artarisi DOT eu)\n- Ivo Danihelka (ivo AT danihelka DOT net)\n- Iyed (iyed DOT bennour AT gmail DOT com)\n- Jim Garrison (jim AT garrison DOT cc)\n- John Gallagher (johnkgallagher AT gmail DOT com)\n- Julian Taylor (jtaylor DOT debian AT googlemail DOT com)\n- Justin Bronder (jsbronder AT gmail DOT com)\n- Justin Riley (justin DOT t DOT riley AT gmail DOT com)\n- Marc Abramowitz (marc AT marc-abramowitz DOT com)\n- Matthew Aburn (mattja6 AT gmail DOT com)\n- Michel Pelletier (pelletier DOT michel AT gmail DOT com)\n- Michel Zou (xantares09 AT hotmail DOT com)\n- Min Ragan-Kelley (benjaminrk AT gmail DOT com)\n- Nell Hardcastle (nell AT dev-nell DOT com)\n- Nicholas Pilkington (nicholas DOT pilkington AT gmail DOT com)\n- Nicholas Piël (nicholas AT nichol DOT as)\n- Nick Pellegrino (npellegrino AT mozilla DOT com)\n- Nicolas Delaby (nicolas DOT delaby AT ezeep DOT com)\n- Ondrej Certik (ondrej AT certik DOT cz)\n- Paul Colomiets (paul AT colomiets DOT name)\n- Pawel Jasinski (pawel DOT jasinski AT gmail DOT com)\n- Phus Lu (phus DOT lu AT gmail DOT com)\n- Robert Buchholz (rbu AT goodpoint DOT de)\n- Robert Jordens (jordens AT gmail DOT com)\n- Ryan Cox (ryan DOT a DOT cox AT gmail DOT com)\n- Ryan Kelly (ryan AT rfk DOT id DOT au)\n- Scott Maxwell (scott AT codecobblers DOT com)\n- Scott Sadler (github AT mashi DOT org)\n- Simon Knight (simon DOT knight AT gmail DOT com)\n- Stefan Friesel (sf AT cloudcontrol DOT de)\n- Stefan van der Walt (stefan AT sun DOT ac DOT za)\n- Stephen Diehl (stephen DOT m DOT diehl AT gmail DOT com)\n- Sylvain Corlay (scorlay AT bloomberg DOT net)\n- Thomas Kluyver (takowl AT gmail DOT com)\n- Thomas Spura (tomspur AT fedoraproject DOT org)\n- Tigger Bear (Tigger AT Tiggers-Mac-mini DOT local)\n- Torsten Landschoff (torsten DOT landschoff AT dynamore DOT de)\n- Vadim Markovtsev (v DOT markovtsev AT samsung DOT com)\n- Yannick Hold (yannickhold AT gmail DOT com)\n- Zbigniew Jędrzejewski-Szmek (zbyszek AT in DOT waw DOT pl)\n- hugo shi (hugoshi AT bleb2 DOT (none))\n- jdgleeson (jdgleeson AT mac DOT com)\n- kyledj (kyle AT bucebuce DOT com)\n- spez (steve AT hipmunk DOT com)\n- stu (stuart DOT axon AT jpcreative DOT co DOT uk)\n- xantares (xantares AT fujitsu-l64 DOT (none))\n\nas reported by:\n\n```\ngit log --all --format='- %aN (%aE)' | sort -u | sed 's/@/ AT /1' | sed -e 's/\\.\\([^ ]\\)/ DOT \\1/g'\n```\n\nwith some adjustments.\n\n### Not in git log\n\n- Brandon Craig-Rhodes (brandon AT rhodesmill DOT org)\n- Eugene Chernyshov (chernyshov DOT eugene AT gmail DOT com)\n- Craig Austin (craig DOT austin AT gmail DOT com)\n\n### gevent_zeromq, now zmq.green\n\n- Travis Cline (travis DOT cline AT gmail DOT com)\n- Ryan Kelly (ryan AT rfk DOT id DOT au)\n- Zachary Voase (z AT zacharyvoase DOT com)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 14.6044921875,
          "content": "cmake_minimum_required(VERSION 3.14...3.28)\nproject(${SKBUILD_PROJECT_NAME} LANGUAGES C CXX)\nset(CMAKE_POLICY_DEFAULT_CMP0077 NEW)\n\nlist(PREPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)\nfind_package(\n  Python\n  COMPONENTS Interpreter Development.Module\n  REQUIRED)\n\n# Python_SOABI isn't always right when cross-compiling\n# SKBUILD_SOABI seems to be\nif (DEFINED SKBUILD_SOABI AND NOT \"${SKBUILD_SOABI}\" STREQUAL \"${Python_SOABI}\")\n  message(WARNING \"SKBUILD_SOABI=${SKBUILD_SOABI} != Python_SOABI=${Python_SOABI}; likely cross-compiling, using SOABI=${SKBUILD_SOABI} from scikit-build\")\n  set(Python_SOABI \"${SKBUILD_SOABI}\")\nendif()\n\n# legacy pyzmq env options, no PYZMQ_ prefix\nset(ZMQ_PREFIX \"auto\" CACHE STRING \"libzmq installation prefix or 'bundled'\")\noption(ZMQ_DRAFT_API \"whether to build the libzmq draft API\" OFF)\noption(PYZMQ_LIBZMQ_RPATH \"Add $ZMQ_PREFIX/lib to $RPATH (true by default). Set to false if libzmq will be bundled or relocated and RPATH is handled separately\" ON)\n\n# anything new should start with PYZMQ_\noption(PYZMQ_LIBZMQ_NO_BUNDLE \"Prohibit building bundled libzmq. Useful for repackaging, to allow default search for libzmq and requiring it to succeed.\" OFF)\nset(PYZMQ_LIBZMQ_VERSION \"4.3.5\" CACHE STRING \"libzmq version when bundling\")\nset(PYZMQ_LIBSODIUM_VERSION \"1.0.20\" CACHE STRING \"libsodium version when bundling\")\nset(PYZMQ_LIBZMQ_URL \"\" CACHE STRING \"full URL to download bundled libzmq\")\nset(PYZMQ_LIBSODIUM_URL \"\" CACHE STRING \"full URL to download bundled libsodium\")\nset(PYZMQ_LIBSODIUM_CONFIGURE_ARGS \"\" CACHE STRING \"semicolon-separated list of arguments to pass to ./configure for bundled libsodium\")\nset(PYZMQ_LIBSODIUM_MSBUILD_ARGS \"\" CACHE STRING \"semicolon-separated list of arguments to pass to msbuild for bundled libsodium\")\nset(PYZMQ_LIBSODIUM_VS_VERSION \"\" CACHE STRING \"Visual studio solution version for bundled libsodium (default: detect from MSVC_VERSION)\")\n\nif (NOT CMAKE_BUILD_TYPE)\n  # default to Release\n  set(CMAKE_BUILD_TYPE \"Release\")\nendif()\n\n# get options from env\n\n# handle booleans\nforeach(_optname ZMQ_DRAFT_API PYZMQ_NO_BUNDLE PYZMQ_LIBZMQ_RPATH)\n  if (DEFINED ENV{${_optname}})\n    if (\"$ENV{${_optname}}\" STREQUAL \"1\" OR \"$ENV{${_optname}}\" STREQUAL \"ON\")\n      set(${_optname} TRUE)\n    else()\n      set(${_optname} FALSE)\n    endif()\n  endif()\nendforeach()\n\nforeach(_optname\n  ZMQ_PREFIX\n  PYZMQ_LIBZMQ_VERSION\n  PYZMQ_LIBZMQ_URL\n  PYZMQ_LIBSODIUM_VERSION\n  PYZMQ_LIBSODIUM_URL\n  PYZMQ_LIBSODIUM_CONFIGURE_ARGS\n  PYZMQ_LIBSODIUM_MSBUILD_ARGS\n  PYZMQ_LIBSODIUM_VS_VERSION\n)\n  if (DEFINED ENV{${_optname}})\n    if (_optname MATCHES \".*_ARGS\")\n      # if it's an _ARGS, split \"-a -b\" into \"-a\" \"-b\"\n      # use native CMake lists for cmake args,\n      # native command-line strings for env variables\n      separate_arguments(${_optname} NATIVE_COMMAND \"$ENV{${_optname}}\")\n    else()\n      set(${_optname} \"$ENV{${_optname}}\")\n    endif()\n  endif()\nendforeach()\n\nif(ZMQ_DRAFT_API)\n  message(STATUS \"enabling ZMQ_DRAFT_API\")\n  add_compile_definitions(ZMQ_BUILD_DRAFT_API=1)\nendif()\n\nif (PYZMQ_LIBSODIUM_VERSION AND NOT PYZMQ_LIBSODIUM_URL)\n  set(PYZMQ_LIBSODIUM_URL \"https://github.com/jedisct1/libsodium/releases/download/${PYZMQ_LIBSODIUM_VERSION}-RELEASE/libsodium-${PYZMQ_LIBSODIUM_VERSION}.tar.gz\")\nendif()\n\nif (PYZMQ_LIBZMQ_VERSION AND NOT PYZMQ_LIBZMQ_URL)\n  set(PYZMQ_LIBZMQ_URL \"https://github.com/zeromq/libzmq/releases/download/v${PYZMQ_LIBZMQ_VERSION}/zeromq-${PYZMQ_LIBZMQ_VERSION}.tar.gz\")\nendif()\n\n#------- bundle libzmq ------\n\nif (NOT ZMQ_PREFIX)\n  # empty string is the same as 'auto'\n  set(ZMQ_PREFIX \"auto\")\nendif()\n\n# default search paths:\n\nforeach(prefix $ENV{PREFIX} \"/opt/homebrew\" \"/opt/local\" \"/usr/local\" \"/usr\")\n  if (IS_DIRECTORY \"${prefix}\")\n    list(APPEND CMAKE_PREFIX_PATH \"${prefix}\")\n  endif()\nendforeach()\n\nif (ZMQ_PREFIX STREQUAL \"auto\")\n  message(CHECK_START \"Looking for libzmq\")\n  find_package(ZeroMQ QUIET)\n  if (ZeroMQ_FOUND AND TARGET libzmq)\n    set(libzmq_target \"libzmq\")\n    get_target_property(_ZMQ_LOCATION libzmq IMPORTED_LOCATION)\n    message(CHECK_PASS \"Found with cmake: ${_ZMQ_LOCATION}\")\n  endif()\n\n  if (NOT ZeroMQ_FOUND)\n    find_package(PkgConfig QUIET)\n    if (PkgConfig_FOUND)\n      message(CHECK_START \"Looking for libzmq with pkg-config\")\n      pkg_check_modules(libzmq libzmq IMPORTED_TARGET)\n      if (TARGET PkgConfig::libzmq)\n        set(ZeroMQ_FOUND TRUE)\n        set(libzmq_target \"PkgConfig::libzmq\")\n        message(CHECK_PASS \"found: -L${libzmq_LIBRARY_DIRS} -l${libzmq_LIBRARIES}\")\n        if (PYZMQ_LIBZMQ_RPATH)\n          foreach(LIBZMQ_LIB_DIR IN LISTS libzmq_LIBRARY_DIRS)\n            message(STATUS \"  Adding ${LIBZMQ_LIB_DIR} to RPATH, set PYZMQ_LIBZMQ_RPATH=OFF if this is not what you want.\")\n            list(APPEND CMAKE_INSTALL_RPATH \"${LIBZMQ_LIB_DIR}\")\n          endforeach()\n        endif()\n      else()\n        message(CHECK_FAIL \"no\")\n      endif()\n    endif()\n  endif()\n\n  if (NOT ZeroMQ_FOUND)\n    message(STATUS \"  Fallback: looking for libzmq in ${CMAKE_PREFIX_PATH}\")\n    find_library(LIBZMQ_LIBRARY NAMES zmq)\n    find_path(LIBZMQ_INCLUDE_DIR \"zmq.h\")\n\n    # check if found\n    if (LIBZMQ_LIBRARY AND LIBZMQ_INCLUDE_DIR)\n      set(ZeroMQ_FOUND TRUE)\n      message(CHECK_PASS \"${LIBZMQ_LIBRARY}\")\n      # NOTE: we _could_ set RPATH here. Should we? Unclear.\n      if (PYZMQ_LIBZMQ_RPATH)\n        get_filename_component(LIBZMQ_LIB_DIR \"${LIBZMQ_LIBRARY}\" DIRECTORY)\n        message(STATUS \"  Adding ${LIBZMQ_LIB_DIR} to RPATH, set PYZMQ_LIBZMQ_RPATH=OFF if this is not what you want.\")\n        list(APPEND CMAKE_INSTALL_RPATH \"${LIBZMQ_LIB_DIR}\")\n      endif()\n    endif()\n  endif()\n\n  if (NOT ZeroMQ_FOUND)\n    if (PYZMQ_NO_BUNDLE)\n      message(CHECK_FAIL \"libzmq not found\")\n      message(FATAL_ERROR \"aborting because bundled libzmq is disabled\")\n    else()\n      message(CHECK_FAIL \"libzmq not found, will bundle libzmq and libsodium\")\n      set(ZMQ_PREFIX \"bundled\")\n    endif()\n  endif()\nelseif (NOT ZMQ_PREFIX STREQUAL \"bundled\")\n  message(CHECK_START \"Looking for libzmq in ${ZMQ_PREFIX}\")\n  find_path(\n    LIBZMQ_INCLUDE_DIR zmq.h\n    PATHS \"${ZMQ_PREFIX}/include\"\n    NO_DEFAULT_PATH\n  )\n  find_library(\n    LIBZMQ_LIBRARY\n    NAMES zmq\n    PATHS \"${ZMQ_PREFIX}/lib\"\n    NO_DEFAULT_PATH\n  )\n  if (LIBZMQ_LIBRARY AND LIBZMQ_INCLUDE_DIR)\n    message(CHECK_PASS \"${LIBZMQ_LIBRARY}\")\n    if (PYZMQ_LIBZMQ_RPATH)\n      # add prefix to RPATH\n      message(STATUS \"  Adding ${ZMQ_PREFIX}/lib to RPATH, set PYZMQ_LIBZMQ_RPATH=OFF if this is not what you want.\")\n      list(APPEND CMAKE_INSTALL_RPATH \"${ZMQ_PREFIX}/lib\")\n    endif()\n  else()\n    message(CHECK_FAIL \"no\")\n    message(FATAL_ERROR \"libzmq not found in ZMQ_PREFIX=${ZMQ_PREFIX}\")\n  endif()\nelse()\n  # bundled\nendif()\n\nif (ZMQ_PREFIX STREQUAL \"bundled\")\n  message(STATUS \"Bundling libzmq and libsodium\")\n  include(FetchContent)\n  add_compile_definitions(ZMQ_STATIC=1)\n  set(BUNDLE_DIR \"${CMAKE_CURRENT_BINARY_DIR}/bundled\")\n  file(MAKE_DIRECTORY \"${BUNDLE_DIR}/lib\")\n  include_directories(${BUNDLE_DIR}/include)\n  list(PREPEND CMAKE_PREFIX_PATH ${BUNDLE_DIR})\n\n  set(LICENSE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/licenses\")\n  file(MAKE_DIRECTORY \"${LICENSE_DIR}\")\n\n  # libsodium\n\n  if (MSVC)\n    set(libsodium_lib \"${BUNDLE_DIR}/lib/libsodium.lib\")\n  else()\n    set(libsodium_lib \"${BUNDLE_DIR}/lib/libsodium.a\")\n  endif()\n\n  FetchContent_Declare(bundled_libsodium\n    URL ${PYZMQ_LIBSODIUM_URL}\n    PREFIX ${BUNDLE_DIR}\n  )\n  FetchContent_MakeAvailable(bundled_libsodium)\n  configure_file(\"${bundled_libsodium_SOURCE_DIR}/LICENSE\" \"${LICENSE_DIR}/LICENSE.libsodium.txt\" COPYONLY)\n  # run libsodium build explicitly here, so it's available to libzmq next\n  set(bundled_libsodium_include \"${bundled_libsodium_SOURCE_DIR}/src/libsodium/include\")\n\n  if(${bundled_libsodium_POPULATED} AND NOT EXISTS \"${libsodium_lib}\")\n    message(STATUS \"building bundled libsodium\")\n    if (MSVC)\n      # select vs build solution by msvc version number\n      if (NOT PYZMQ_LIBSODIUM_VS_VERSION)\n        if(MSVC_VERSION GREATER_EQUAL 1940)\n          message(STATUS \"Unrecognized MSVC_VERSION=${MSVC_VERSION}\")\n          set(MSVC_VERSION 1939)\n        endif()\n\n        if(MSVC_VERSION GREATER_EQUAL 1930)\n          set(PYZMQ_LIBSODIUM_VS_VERSION \"2022\")\n        elseif(MSVC_VERSION GREATER_EQUAL 1920)\n          set(PYZMQ_LIBSODIUM_VS_VERSION \"2019\")\n        elseif(MSVC_VERSION GREATER_EQUAL 1910)\n          set(PYZMQ_LIBSODIUM_VS_VERSION \"2017\")\n        else()\n          message(FATAL_ERROR \"unsupported bundling libsodium for MSVC_VERSION=${MSVC_VERSION} (need at least VS2017)\")\n        endif()\n      endif()\n      find_package(Vcvars REQUIRED)\n      list(APPEND libsodium_build\n        ${Vcvars_LAUNCHER}\n        \"msbuild\"\n        \"/m\"\n        \"/v:n\"\n        \"/p:Configuration=Static${CMAKE_BUILD_TYPE}\"\n        \"/p:Platform=${CMAKE_GENERATOR_PLATFORM}\"\n        \"builds/msvc/vs${PYZMQ_LIBSODIUM_VS_VERSION}/libsodium.sln\"\n      )\n      list(APPEND libsodium_build ${PYZMQ_LIBSODIUM_MSBUILD_ARGS})\n      execute_process(\n        COMMAND ${libsodium_build}\n        WORKING_DIRECTORY ${bundled_libsodium_SOURCE_DIR}\n        COMMAND_ECHO STDOUT\n        # COMMAND_ERROR_IS_FATAL ANY\n        RESULT_VARIABLE _status\n      )\n      if (_status) \n        message(FATAL_ERROR \"failed to build libsodium\")\n      endif()\n      file(GLOB_RECURSE BUILT_LIB \"${bundled_libsodium_SOURCE_DIR}/**/libsodium.lib\")\n      message(STATUS \"copy ${BUILT_LIB} ${libsodium_lib}\")\n      configure_file(${BUILT_LIB} ${libsodium_lib} COPYONLY)\n    else()\n      list(APPEND libsodium_configure\n        ./configure\n        --prefix=${BUNDLE_DIR}\n        --with-pic\n        --disable-dependency-tracking\n        --disable-shared\n        --enable-static\n      )\n      list(APPEND libsodium_configure ${PYZMQ_LIBSODIUM_CONFIGURE_ARGS})\n      execute_process(\n        COMMAND ${libsodium_configure}\n        WORKING_DIRECTORY ${bundled_libsodium_SOURCE_DIR}\n        COMMAND_ECHO      STDOUT\n        # COMMAND_ERROR_IS_FATAL ANY\n        RESULT_VARIABLE _status\n      )\n      # COMMAND_ERROR_IS_FATAL requires cmake 3.19, ubuntu 20.04 has 3.16\n      if (_status) \n        message(FATAL_ERROR \"failed to configure libsodium\")\n      endif()\n      execute_process(\n        COMMAND make\n        WORKING_DIRECTORY ${bundled_libsodium_SOURCE_DIR}\n        COMMAND_ECHO STDOUT\n        # COMMAND_ERROR_IS_FATAL ANY\n        RESULT_VARIABLE _status\n      )\n      if (_status) \n        message(FATAL_ERROR \"failed to build libsodium\")\n      endif()\n      execute_process(\n        COMMAND make install\n        WORKING_DIRECTORY ${bundled_libsodium_SOURCE_DIR}\n        COMMAND_ECHO STDOUT\n        # COMMAND_ERROR_IS_FATAL ANY\n        RESULT_VARIABLE _status\n      )\n      if (_status) \n        message(FATAL_ERROR \"failed to install libsodium\")\n      endif()\n    endif()\n  endif()\n\n  # use libzmq's own cmake, so we can import the libzmq-static target\n  set(ENABLE_CURVE ON)\n  set(ENABLE_DRAFTS ${ZMQ_DRAFT_API})\n  set(ENABLE_LIBSODIUM_RANDOMBYTES_CLOSE \"OFF\")\n  set(WITH_LIBSODIUM ON)\n  set(WITH_LIBSODIUM_STATIC ON)\n  set(LIBZMQ_PEDANTIC OFF)\n  set(LIBZMQ_WERROR OFF)\n  set(WITH_DOC OFF)\n  set(WITH_DOCS OFF)\n  set(BUILD_TESTS OFF)\n  set(BUILD_SHARED OFF)\n  set(BUILD_STATIC ON)\n\n  if(NOT MSVC)\n    # backport check for kqueue, which is wrong in libzmq 4.3.5\n    # libzmq's cmake will proceed with the rest\n    # https://github.com/zeromq/libzmq/pull/4659\n    include(CheckCXXSymbolExists)\n    set(POLLER\n      \"\"\n      CACHE STRING \"Choose polling system for I/O threads. valid values are\n    kqueue, epoll, devpoll, pollset, poll or select [default=autodetect]\")\n    if(POLLER STREQUAL \"\")\n      check_cxx_symbol_exists(kqueue \"sys/types.h;sys/event.h;sys/time.h\" HAVE_KQUEUE)\n      if(HAVE_KQUEUE)\n        set(POLLER \"kqueue\")\n      endif()\n    endif()\n  endif()\n\n  if(MSVC)\n    set(API_POLLER \"select\" CACHE STRING \"Set API Poller (default: select)\")\n  endif()\n\n  FetchContent_Declare(bundled_libzmq\n    URL ${PYZMQ_LIBZMQ_URL}\n    PREFIX ${BUNDLE_DIR}\n  )\n  FetchContent_MakeAvailable(bundled_libzmq)\n  configure_file(\"${bundled_libzmq_SOURCE_DIR}/LICENSE\" \"${LICENSE_DIR}/LICENSE.zeromq.txt\" COPYONLY)\n\n  # target for libzmq static\n  if (TARGET libzmq-static)\n    set(libzmq_target \"libzmq-static\")\n  else()\n    message(FATAL_ERROR \"libzmq-static target not found in bundled libzmq\")\n  endif()\nendif()\n\nif (NOT TARGET \"${libzmq_target}\" AND LIBZMQ_LIBRARY AND LIBZMQ_INCLUDE_DIR)\n  set(libzmq_target \"libzmq\")\n  # construct target from find_library results\n  # what if it was static?\n  add_library(libzmq SHARED IMPORTED)\n  set_property(TARGET libzmq PROPERTY IMPORTED_LOCATION ${LIBZMQ_LIBRARY})\n  set_property(TARGET libzmq PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${LIBZMQ_INCLUDE_DIR})\nendif()\n\n#------- building pyzmq itself -------\n\nmessage(STATUS \"Using Python ${Python_INTERPRETER_ID} ${Python_EXECUTABLE}\")\n\nset(EXT_SRC_DIR \"${CMAKE_CURRENT_BINARY_DIR}/_src\")\nset(ZMQ_BUILDUTILS \"${CMAKE_CURRENT_SOURCE_DIR}/buildutils\")\nfile(MAKE_DIRECTORY \"${EXT_SRC_DIR}\")\n\nif(Python_INTERPRETER_ID STREQUAL \"PyPy\")\n  message(STATUS \"Building CFFI backend\")\n  set(ZMQ_EXT_NAME \"_cffi\")\n\n  set(ZMQ_BACKEND_DEST \"zmq/backend/cffi\")\n  set(ZMQ_C \"${EXT_SRC_DIR}/${ZMQ_EXT_NAME}.c\")\n\n  add_custom_command(\n    OUTPUT ${ZMQ_C}\n    VERBATIM\n    COMMAND \"${Python_EXECUTABLE}\"\n            \"${ZMQ_BUILDUTILS}/build_cffi.py\"\n            \"${ZMQ_C}\"\n  )\nelse()\n  message(STATUS \"Building Cython backend\")\n  find_program(CYTHON \"cython\")\n\n  set(ZMQ_BACKEND_DEST \"zmq/backend/cython\")\n  set(ZMQ_EXT_NAME \"_zmq\")\n  set(ZMQ_C \"${EXT_SRC_DIR}/${ZMQ_EXT_NAME}.c\")\n  set(ZMQ_PYX \"${CMAKE_CURRENT_SOURCE_DIR}/zmq/backend/cython/${ZMQ_EXT_NAME}.py\")\n  add_custom_command(\n    OUTPUT ${ZMQ_C}\n    DEPENDS ${ZMQ_PYX}\n    VERBATIM\n    COMMAND \"${Python_EXECUTABLE}\"\n            -mcython\n            --3str\n            --output-file ${ZMQ_C}\n            --module-name \"zmq.backend.cython._zmq\"\n            ${ZMQ_PYX}\n  )\nendif()\n\nfile(MAKE_DIRECTORY ${ZMQ_BACKEND_DEST})\n\npython_add_library(\n  ${ZMQ_EXT_NAME} MODULE\n  WITH_SOABI\n  ${ZMQ_C}\n)\n\nif (TARGET ${libzmq_target})\n  message(STATUS \"Linking libzmq target ${libzmq_target}\")\n  target_link_libraries(${ZMQ_EXT_NAME} PUBLIC ${libzmq_target})\n  if (\"${libzmq_target}\" STREQUAL \"libzmq-static\" AND NOT MSVC)\n    # seem to need stdc++ for static libzmq on non-Windows\n    # not sure if/when this should be libc++ or how to know\n    target_link_libraries(${ZMQ_EXT_NAME} PUBLIC stdc++)\n  endif()\nelse()\n  message(FATAL_ERROR \"should have a libzmq target ${libzmq_target} to link to...\")\nendif()\n\ntarget_include_directories(${ZMQ_EXT_NAME} PUBLIC \"${CMAKE_CURRENT_SOURCE_DIR}/zmq/utils\")\ninstall(TARGETS ${ZMQ_EXT_NAME} DESTINATION \"${ZMQ_BACKEND_DEST}\" COMPONENT pyzmq)\n\n# add custom target so we exclude bundled targets from installation\n# only need this because the extension name is different for cff/cython\nadd_custom_target(pyzmq DEPENDS ${ZMQ_EXT_NAME})\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.1904296875,
          "content": "# Testing\n\npyzmq is tested on GitHub Actions.\n\n![Build Status](https://github.com/zeromq/pyzmq/actions/workflows/test.yml/badge.svg)\\](https://github.com/zeromq/pyzmq/actions/workflows/test.yml)\n\n## Opening an Issue\n\nFor a good bug report:\n\n1. [Search] for existing Issues, both on GitHub and in general with Google/Stack Overflow before posting a duplicate question.\n1. Update to pyzmq main, if possible, especially if you are already using git. It's\n   possible that the bug you are about to report has already been fixed.\n\nMany things reported as pyzmq Issues are often just libzmq-related,\nand don't have anything to do with pyzmq itself.\nThese are better directed to [zeromq-dev].\n\nWhen making a bug report, it is helpful to tell us as much as you can about your system\n(such as pyzmq version, libzmq version, Python version, OS Version, how you built/installed pyzmq and libzmq, etc.)\n\nThe basics:\n\n```python\nimport sys\nimport zmq\n\nprint(\"libzmq-%s\" % zmq.zmq_version())\nprint(\"pyzmq-%s\" % zmq.pyzmq_version())\nprint(\"Python-%s\" % sys.version)\n```\n\nWhich will give something like:\n\n```\nlibzmq-4.3.4\npyzmq-22.3.0\nPython-3.9.9 | packaged by conda-forge | (main, Dec 20 2021, 02:38:53)\n[Clang 11.1.0 ]\n```\n\n### Your contributions\n\n**Pull Requests are welcome!**\n\nWhen you contribute to PyZMQ, your contributions are made under the same\nlicense as the file you are working on. Any new, original code should be BSD\nlicensed.\n\nWe use [pre-commit] for autoformatting,\nso you hopefully don't need to worry too much about style.\n\nTo install pre-commit:\n\n```\npip install pre-commit\npre-commit install\n```\n\nExamples are copyright their respective authors, and BSD unless otherwise\nspecified by the author.\n\n### Inherited licenses in pyzmq\n\nSome code outside the core is taken from other open-source projects, and\ninherits that project's license.\n\n- zmq/eventloop contains some code derived from [tornado], used under the Apache 2.0 license\n\n- zmq/ssh/forward.py is from [paramiko], and inherits LGPL\n\n- perf examples are (c) iMatix, and MPL\n\n[paramiko]: http://www.lag.net/paramiko\n[pre-commit]: https://pre-commit.com\n[search]: https://github.com/zeromq/pyzmq/issues\n[tornado]: http://www.tornadoweb.org\n[zeromq-dev]: mailto:zeromq-dev@zeromq.org\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.5087890625,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2009-2012, Brian Granger, Min Ragan-Kelley\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2509765625,
          "content": "# only need to track non-version-controlled files to add\ninclude bundled/zeromq/COPYING*\ngraft bundled/zeromq/include\ngraft bundled/zeromq/src\ngraft bundled/zeromq/external/wepoll\nexclude bundled/zeromq/src/Makefile*\nexclude bundled/zeromq/src/platform.hpp\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.89453125,
          "content": "# PyZMQ: Python bindings for ØMQ\n\nThis package contains Python bindings for [ZeroMQ](https://zeromq.org).\nØMQ is a lightweight and fast messaging implementation.\n\nPyZMQ should work with any reasonable version of Python (≥ 3.7), as well as PyPy.\nThe Cython backend used by CPython supports libzmq ≥ 2.1.4 (including 3.2.x and 4.x),\nbut the CFFI backend used by PyPy only supports libzmq ≥ 3.2.2 (including 4.x).\n\nFor a summary of changes to pyzmq, see our\n[changelog](https://pyzmq.readthedocs.io/en/latest/changelog.html).\n\n### ØMQ 3.x, 4.x\n\nPyZMQ fully supports the 3.x and 4.x APIs of libzmq,\ndeveloped at [zeromq/libzmq](https://github.com/zeromq/libzmq).\nNo code to change, no flags to pass,\njust build pyzmq against the latest and it should work.\n\nPyZMQ does not support the old libzmq 2 API on PyPy.\n\n## Documentation\n\nSee PyZMQ's Sphinx-generated\ndocumentation [on Read the Docs](https://pyzmq.readthedocs.io) for API\ndetails, and some notes on Python and Cython development. If you want to\nlearn about using ØMQ in general, the excellent [ØMQ\nGuide](http://zguide.zeromq.org/py:all) is the place to start, which has a\nPython version of every example. We also have some information on our\n[wiki](https://github.com/zeromq/pyzmq/wiki).\n\n## Downloading\n\nUnless you specifically want to develop PyZMQ, we recommend downloading\nthe PyZMQ source code or wheels from\n[PyPI](https://pypi.io/project/pyzmq/),\nor install with conda.\n\nYou can also get the latest source code from our GitHub repository, but\nbuilding from the repository will require that you install recent Cython.\n\n## Building and installation\n\nFor more detail on building pyzmq, see [our docs](https://pyzmq.readthedocs.io/en/latest/howto/build.html).\n\nWe build wheels for macOS, Windows, and Linux, so you can get a binary on those platforms with:\n\n```\npip install pyzmq\n```\n\nbut compiling from source with `pip install pyzmq` should work in most environments.\nMake sure you are using the latest pip, or it may not find the right wheels.\n\nIf the wheel doesn't work for some reason, or you want to force pyzmq to be compiled\n(this is often preferable if you already have libzmq installed and configured the way you want it),\nyou can force installation from source with:\n\n```\npip install --no-binary=pyzmq pyzmq\n```\n\n## Old versions\n\npyzmq 16 drops support Python 2.6 and 3.2.\nIf you need to use one of those Python versions, you can pin your pyzmq version to before 16:\n\n```\npip install 'pyzmq<16'\n```\n\nFor libzmq 2.0.x, use 'pyzmq\\<2.1'\n\npyzmq-2.1.11 was the last version of pyzmq to support Python 2.5,\nand pyzmq ≥ 2.2.0 requires Python ≥ 2.6.\npyzmq-13.0.0 introduces PyPy support via CFFI, which only supports libzmq-3.2.2 and newer.\n\nPyZMQ releases ≤ 2.2.0 matched libzmq versioning, but this is no longer the case,\nstarting with PyZMQ 13.0.0 (it was the thirteenth release, so why not?).\nPyZMQ ≥ 13.0 follows semantic versioning conventions accounting only for PyZMQ itself.\n"
        },
        {
          "name": "RELICENSE",
          "type": "tree",
          "content": null
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.5048828125,
          "content": "# Security Policies and Procedures\n\nThis document outlines security procedures and general policies for the pyzmq project.\n\n- [Reporting a Bug](#reporting-a-bug)\n- [Disclosure Policy](#disclosure-policy)\n- [Comments on this Policy](#comments-on-this-policy)\n\n## Reporting a Bug\n\nThank you for improving the security of pyzmq. We appreciate your efforts and\nresponsible disclosure and will make every effort to acknowledge your\ncontributions.\n\nReport security bugs by emailing the lead maintainer at benjaminrk AT gmail.com.\n\nThe lead maintainer will acknowledge your email as promptly as possible,\nand will follow up with a more detailed response.\n\nWhen the issue is confirmed, a GitHub security advisory will be created to discuss resolutions.\nWe will endeavor to keep you informed of the progress towards a fix and full\nannouncement, and may ask for additional information or guidance.\n\nReport security bugs in libzmq itself or other packages to the mainainers of those packages.\n\n## Disclosure Policy\n\nWhen the security team receives a security bug report, they will assign it to a\nprimary handler. This person will coordinate the fix and release process,\ninvolving the following steps:\n\n- Confirm the problem and determine the affected versions.\n- Audit code to find any potential similar problems.\n- Prepare fixes for all releases still under maintenance. These fixes will be\n  released as fast as possible to npm.\n\n## Comments on this Policy\n\nIf you have suggestions on how this process could be improved please submit a\npull request.\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 1.044921875,
          "content": "#e -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n# This will setup a clean Ubuntu1404 LTS env\n\n$script = <<SCRIPT\nadd-apt-repository ppa:fkrull/deadsnakes-python2.7\napt-get update\napt-get install -y python-pip python3-pip python-dev git htop virtualenvwrapper python2.7 python-virtualenv python-support cython \\\ngit build-essential libtool pkg-config autotools-dev autoconf automake cmake uuid-dev libpcre3-dev valgrind \\\nlibffi-dev\nSCRIPT\n\n# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!\nVAGRANTFILE_API_VERSION = \"2\"\nVAGRANTFILE_LOCAL = 'Vagrantfile.local'\n\nVagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n  config.vm.box = 'ubuntu/trusty64'\n  config.vm.provision \"shell\", inline: $script\n\n  config.vm.provider :virtualbox do |vb|\n    vb.customize [\"modifyvm\", :id, \"--cpus\", \"2\", \"--ioapic\", \"on\", \"--memory\", \"512\" ]\n    vb.customize [\"setextradata\", :id, \"VBoxInternal2/SharedFoldersEnableSymlinksCreate/v-root\", \"1\"]\n  end\n\n  if File.file?(VAGRANTFILE_LOCAL)\n    external = File.read VAGRANTFILE_LOCAL\n    eval external\n  end\nend\n"
        },
        {
          "name": "buildutils",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.1826171875,
          "content": "comment: off\n# show coverage in CI status, but never consider it a failure\ncoverage:\n  status:\n    project:\n      default:\n        target: 0%\n    patch:\n      default:\n        target: 0%\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "mypy.ini",
          "type": "blob",
          "size": 0.3251953125,
          "content": "[mypy]\npython_version = 3.8\nallow_redefinition = True\n#warn_unused_configs = True\n#incremental = False\nignore_missing_imports = True\n\n[mypy-zmq.*]\ndisallow_untyped_calls = False\n\n[mypy-zmq.backend.cffi.*]\nignore_errors = True\n\n[mypy-zmq.backend.cython.*]\nignore_errors = True\n\n[mypy-zmq.eventloop.minitornado.*]\nignore_errors = True\n"
        },
        {
          "name": "mypy_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "perf",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 5.8623046875,
          "content": "# PEP 621 build info\n[build-system]\nrequires = [\n  \"cffi; implementation_name == 'pypy'\",\n  \"cython>=3.0.0; implementation_name != 'pypy'\",\n  \"packaging\",\n  \"scikit-build-core\",\n]\nbuild-backend = \"scikit_build_core.build\"\n\n# Project metadata\n# ref: https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html\n[project]\nname = \"pyzmq\"\nversion = \"26.2.1.dev\"\nauthors = [\n  { name = \"PyZMQ Contributors\", email = \"zeromq-dev@lists.zeromq.org\" },\n  { name = \"Brian E. Granger\" },\n  { name = \"Min Ragan-Kelley\" },\n]\nlicense = { file = \"LICENSE.md\" }\nrequires-python = \">=3.7\"\nclassifiers = [\n  \"Development Status :: 5 - Production/Stable\",\n  \"Intended Audience :: Developers\",\n  \"Intended Audience :: Science/Research\",\n  \"Intended Audience :: System Administrators\",\n  \"License :: OSI Approved :: BSD License\",\n  \"Operating System :: MacOS :: MacOS X\",\n  \"Operating System :: Microsoft :: Windows\",\n  \"Operating System :: POSIX\",\n  \"Topic :: System :: Networking\",\n  \"Programming Language :: Python :: 3\",\n  \"Programming Language :: Python :: 3 :: Only\",\n  \"Programming Language :: Python :: 3.7\",\n  \"Programming Language :: Python :: 3.8\",\n  \"Programming Language :: Python :: 3.9\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n  \"Programming Language :: Python :: 3.12\",\n  \"Programming Language :: Python :: 3.13\",\n]\ndependencies = [\"cffi; implementation_name == 'pypy'\"]\ndescription = \"Python bindings for 0MQ\"\nreadme = \"README.md\"\n\n[project.urls]\nHomepage = \"https://pyzmq.readthedocs.org\"\nDocumentation = \"https://pyzmq.readthedocs.org\"\nSource = \"https://github.com/zeromq/pyzmq\"\nTracker = \"https://github.com/zeromq/pyzmq/issues\"\n\n[tool.scikit-build]\nwheel.packages = [\"zmq\"]\nwheel.license-files = [\"licenses/LICENSE*\"]\n# 3.15 is required by scikit-build-core\ncmake.version = \">=3.15\"\n# only build/install the pyzmq component\ncmake.targets = [\"pyzmq\"]\ninstall.components = [\"pyzmq\"]\n\n[tool.ruff]\n\n[tool.ruff.format]\nexclude = [\n    \"buildutils/templates/*\",\n    \"zmq/eventloop/minitornado/*\",\n]\nquote-style = \"preserve\"\n\n[tool.ruff.lint.isort]\nknown-first-party = [\"zmq\", \"zmq_test_utils\"]\n\n[tool.ruff.lint]\nselect = [\n    \"E\",\n    \"F\",\n    \"UP\",\n    \"I\",\n]\nignore = [\n    \"E501\", # line length (formatter is responsible)\n    \"E721\", # compare types\n    \"F841\", # unused variables\n]\nexclude = [\"buildutils/templates/*\"]\n\n[tool.ruff.lint.per-file-ignores]\n\"__init__.py\" = [\"F4\", \"E4\"]\n\"__init__.pyi\" = [\"F4\", \"E4\"]\n\"tests/*\" = [\"E4\", \"F4\"]\n\"docs/source/conf.py\" = [\"E4\"]\n\"zmq/eventloop/*\" = [\"E402\"]\n\"zmq/ssh/forward.py\" = [\"E\"]\n\n# no longer used autoformatters, linters:\n\n[tool.autoflake]\nignore-init-module-imports = true\nremove-all-unused-imports = true\nremove-duplicate-keys = true\n\n# remove-unused-variables = true\n\n[tool.black]\nskip-string-normalization = true\nexclude = \"zmq/eventloop/minitornado|docs/source/conf.py\"\n\n[tool.isort]\nprofile = \"black\"\nmulti_line_output = 3\nskip = [\"zmq/__init__.py\"]\n\n[tool.tbump]\n# Uncomment this if your project is hosted on GitHub:\ngithub_url = \"https://github.com/zeromq/pyzmq\"\n\n[tool.tbump.version]\ncurrent = \"26.2.1.dev\"\nregex = '''\n  (?P<major>\\d+)\n  \\.\n  (?P<minor>\\d+)\n  \\.\n  (?P<patch>\\d+)\n  (?P<pre>((a|b|rc|)\\d+)|.dev\\d*|)\n  '''\n\n[tool.tbump.git]\nmessage_template = \"Bump to {new_version}\"\ntag_template = \"v{new_version}\"\n\n# For each file to patch, add a [[tool.tbump.file]] config\n# section containing the path of the file, relative to the\n# pyproject.toml location.\n[[tool.tbump.file]]\nsrc = \"pyproject.toml\"\nsearch = 'version = \"{current_version}\"'\n\n[[tool.tbump.file]]\nsrc = \"zmq/sugar/version.py\"\nsearch = '__version__: str = \"{current_version}\"'\n\n[tool.cibuildwheel]\nbuild-verbosity = \"1\"\nfree-threaded-support = true\ntest-requires = [\"pytest>=6\", \"importlib_metadata\"]\ntest-command = \"pytest -vsx {package}/tools/test_wheel.py\"\n\n[tool.cibuildwheel.linux]\nbefore-all = \"bash tools/install_libzmq.sh\"\nmanylinux-x86_64-image = \"manylinux2014\"\nmanylinux-i686-image = \"manylinux2014\"\nmanylinux-aarch64-image = \"manylinux2014\"\nmusllinux-aarch64-image = \"musllinux_1_1\"\nmusllinux-i686-image = \"musllinux_1_1\"\nmusllinux-x86_64-image = \"musllinux_1_1\"\n\n[tool.cibuildwheel.linux.environment]\nZMQ_PREFIX = \"/usr/local\"\nCFLAGS = \"-Wl,-strip-all\"\nCXXFLAGS = \"-Wl,-strip-all\"\n\n[tool.cibuildwheel.macos]\nbefore-all = \"bash tools/install_libzmq.sh\"\nrepair-wheel-command = \"delocate-wheel --sanitize-rpaths --require-archs {delocate_archs} -w {dest_dir} -v {wheel}\"\n\n[tool.cibuildwheel.macos.environment]\n# note: everything here needs to also be duplicated in overrides below\nZMQ_PREFIX = \"/tmp/zmq\"\nMACOSX_DEPLOYMENT_TARGET = \"10.9\"\n\n[tool.cibuildwheel.windows]\nbefore-all = \"python buildutils/bundle.py licenses\"\nrepair-wheel-command = \"\"\"\\\n    delvewheel repair \\\n        -v \\\n        --wheel-dir={dest_dir} \\\n        {wheel} \\\n\"\"\"\n\n[tool.cibuildwheel.windows.config-settings]\n\"cmake.define.ZMQ_PREFIX\" = \"bundled\"\n# statically link MSVCP\n# see https://github.com/zeromq/pyzmq/issues/2012\n# and https://github.com/matplotlib/matplotlib/pull/28687\n\"cmake.define.CMAKE_MSVC_RUNTIME_LIBRARY\" = \"MultiThreaded\"\n\"cmake.define.CMAKE_SHARED_LINKER_FLAGS\" = \"ucrt.lib;vcruntime.lib;/nodefaultlib:libucrt.lib;/nodefaultlib:libvcruntime.lib\"\n# disable IPC/epoll on Windows\n# due to https://github.com/zeromq/pyzmq/issues/1981\n\"cmake.define.ZMQ_HAVE_IPC\" = \"OFF\"\n\"cmake.define.POLLER\" = \"select\"\n\n# mac-arm target is 10.15\n[[tool.cibuildwheel.overrides]]\nselect = \"*macos*{universal2,arm64}*\"\nenvironment = { ZMQ_PREFIX = \"/tmp/zmq\", MACOSX_DEPLOYMENT_TARGET = \"10.15\" }\n\n# manylinux2010 for (less) old cp37-9, pp37-8\n[[tool.cibuildwheel.overrides]]\nselect = \"cp3{7,8,9}-* pp3{7,8}-*\"\nmanylinux-x86_64-image = \"manylinux2010\"\nmanylinux-i686-image = \"manylinux2010\"\n\n# note: manylinux_2_28 builds are added\n# in .github/workflows/wheels.yml\n\n[[tool.cibuildwheel.overrides]]\nselect = \"cp313t-*\"\nbuild-frontend = \"pip; args: -v --pre --extra-index-url https://pypi.anaconda.org/scientific-python-nightly-wheels/simple\"\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.390625,
          "content": "[pytest]\naddopts = --durations 10 --import-mode=importlib\nmarkers =\n    large: these tests use a lot of memory\n    new_console: these tests create a new console\n    wheel: these tests are for installs from a wheel, not dev-installs\n# import-mode=importlib doesn't put testpaths on sys.path\npythonpath = tests\ntestpaths =\n    tests\n# automatically run coroutine tests with asyncio\nasyncio_mode = auto\n"
        },
        {
          "name": "test-requirements.txt",
          "type": "blob",
          "size": 0.95703125,
          "content": "black; platform_python_implementation != \"PyPy\"\n# gevent wheels on mac cause Illegal Instruction\ncodecov\n# coverage 5 has issues with Cython: https://github.com/cython/cython/issues/3515\ncoverage<5; python_version < \"3.7\"\ncoverage>=7.1; python_version >= \"3.7\"\ncython; platform_python_implementation != \"PyPy\" # required for Cython tests\ncython>=3.0.0b3; platform_python_implementation != \"PyPy\" and python_version >= \"3.12\" # required for Cython tests\nflake8\ngevent; platform_python_implementation != \"PyPy\" and sys_platform != \"win32\" and sys_platform != \"darwin\" and python_version < \"3.11\"\nmypy; platform_python_implementation != \"PyPy\"\npymongo\npytest\npytest-asyncio>=0.16; python_version < \"3.7\"\npytest-asyncio>=0.17; python_version >= \"3.7\"\n# pytest-cov 2.11 requires coverage 5, which still doesn't work with Cython\npytest-cov==2.10.*\npytest-rerunfailures\nsetuptools; platform_python_implementation != \"PyPy\" # required for Cython tests after distutils deprecation\ntornado\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "zmq",
          "type": "tree",
          "content": null
        },
        {
          "name": "zmqversion.py",
          "type": "blob",
          "size": 3.935546875,
          "content": "\"\"\"A simply script to scrape zmq.h for the zeromq version.\nThis is similar to the version.sh script in a zeromq source dir, but\nit searches for an installed header, rather than in the current dir.\n\"\"\"\n\n# Copyright (c) PyZMQ Developers\n# Distributed under the terms of the Modified BSD License.\n\nimport os\nimport re\nimport sys\nimport traceback\nfrom configparser import ConfigParser\nfrom warnings import warn\n\npjoin = os.path.join\n\nMAJOR_PAT = '^#define +ZMQ_VERSION_MAJOR +[0-9]+$'\nMINOR_PAT = '^#define +ZMQ_VERSION_MINOR +[0-9]+$'\nPATCH_PAT = '^#define +ZMQ_VERSION_PATCH +[0-9]+$'\n\n\ndef include_dirs_from_path():\n    \"\"\"Check the exec path for include dirs.\"\"\"\n    include_dirs = []\n    for p in os.environ['PATH'].split(os.path.pathsep):\n        if p.endswith('/'):\n            p = p[:-1]\n        if p.endswith('bin'):\n            include_dirs.append(p[:-3] + 'include')\n    return include_dirs\n\n\ndef default_include_dirs():\n    \"\"\"Default to just /usr/local/include:/usr/include\"\"\"\n    return ['/usr/local/include', '/usr/include']\n\n\ndef find_zmq_version():\n    \"\"\"check setup.cfg, then /usr/local/include, then /usr/include for zmq.h.\n    Then scrape zmq.h for the version tuple.\n\n    Returns\n    -------\n        ((major,minor,patch), \"/path/to/zmq.h\")\"\"\"\n    include_dirs = []\n\n    if os.path.exists('setup.cfg'):\n        cfg = ConfigParser()\n        cfg.read('setup.cfg')\n        if 'build_ext' in cfg.sections():\n            items = cfg.items('build_ext')\n            for name, val in items:\n                if name == 'include_dirs':\n                    include_dirs = val.split(os.path.pathsep)\n\n    if not include_dirs:\n        include_dirs = default_include_dirs()\n\n    for include in include_dirs:\n        zmq_h = pjoin(include, 'zmq.h')\n        if os.path.isfile(zmq_h):\n            with open(zmq_h) as f:\n                contents = f.read()\n        else:\n            continue\n\n        line = re.findall(MAJOR_PAT, contents, re.MULTILINE)[0]\n        major = int(re.findall('[0-9]+', line)[0])\n        line = re.findall(MINOR_PAT, contents, re.MULTILINE)[0]\n        minor = int(re.findall('[0-9]+', line)[0])\n        line = re.findall(PATCH_PAT, contents, re.MULTILINE)[0]\n        patch = int(re.findall('[0-9]+', line)[0])\n        return ((major, minor, patch), zmq_h)\n\n    raise OSError(\"Couldn't find zmq.h\")\n\n\ndef ver_str(version):\n    \"\"\"version tuple as string\"\"\"\n    return '.'.join(map(str, version))\n\n\ndef check_zmq_version(min_version):\n    \"\"\"Check that zmq.h has an appropriate version.\"\"\"\n    sv = ver_str(min_version)\n    try:\n        found, zmq_h = find_zmq_version()\n        sf = ver_str(found)\n        if found < min_version:\n            print(f\"This pyzmq requires zeromq >= {sv}\")\n            print(f\"but it appears you are building against {zmq_h}\")\n            print(f\"which has zeromq {sf}\")\n            sys.exit(1)\n    except OSError:\n        msg = '\\n'.join(\n            [\n                \"Couldn't find zmq.h to check for version compatibility.\",\n                \"If you see 'undeclared identifier' errors, your ZeroMQ is likely too old.\",\n                f\"This pyzmq requires zeromq >= {sv}\",\n            ]\n        )\n        warn(msg)\n    except IndexError:\n        msg = '\\n'.join(\n            [\n                \"Couldn't find ZMQ_VERSION macros in zmq.h to check for version compatibility.\",\n                \"This probably means that you have ZeroMQ <= 2.0.9\",\n                \"If you see 'undeclared identifier' errors, your ZeroMQ is likely too old.\",\n                f\"This pyzmq requires zeromq >= {sv}\",\n            ]\n        )\n        warn(msg)\n    except Exception:\n        traceback.print_exc()\n        msg = '\\n'.join(\n            [\n                \"Unexpected Error checking for zmq version.\",\n                \"If you see 'undeclared identifier' errors, your ZeroMQ is likely too old.\",\n                f\"This pyzmq requires zeromq >= {sv}\",\n            ]\n        )\n        warn(msg)\n\n\nif __name__ == '__main__':\n    v, h = find_zmq_version()\n    print(h)\n    print(ver_str(v))\n"
        }
      ]
    }
  ]
}