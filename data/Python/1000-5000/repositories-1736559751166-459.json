{
  "metadata": {
    "timestamp": 1736559751166,
    "page": 459,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nvdv/vprof",
      "stars": 3957,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.021484375,
          "content": "vprof/ui/vprof_min.js\n"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 0.5185546875,
          "content": "{\n   \"env\": {\n    \"browser\": true\n  },\n  \"parserOptions\": {\n      \"ecmaVersion\": 6,\n      \"sourceType\": \"script\"\n  },\n  \"rules\": {\n    \"camelcase\": [\"error\", { \"properties\": \"never\" }],\n    \"curly\": \"error\",\n    \"comma-spacing\": [\"error\", { \"before\": false, \"after\": true }],\n    \"eqeqeq\": \"error\",\n    \"indent\": [\"error\", 2],\n    \"linebreak-style\": [\"error\", \"unix\"],\n    \"no-cond-assign\": [\"error\", \"always\"],\n    \"strict\": [\"error\", \"global\"],\n    \"semi\": \"error\",\n    \"max-len\": [\"error\", 80, { \"ignoreComments\": true }]\n  }\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.095703125,
          "content": "*.pyc\nvprof/ui/vprof_min.js\n.DS_Store\nnode_modules\nbuild\ndist\nvprof.egg-info\n.vscode\n.pypirc\n.venv"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 0.34375,
          "content": "[MESSAGES CONTROL]\ndisable=exec-used, wrong-import-order, fixme,\n        invalid-name, no-member, too-many-arguments, too-many-locals, duplicate-code\n        # Disable duplicate-code globally, since can't disable locally\n        # https://github.com/PyCQA/pylint/issues/214\n[FORMAT]\n\n# Maximum number of characters on a single line.\nmax-line-length=80\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.4189453125,
          "content": "# Contributing to vprof\n\nThanks for taking the time to contribute!\n\nThis is a set of guidelines for contributing to vprof. These are not rules!\nFeel free to propose changes to this document in a pull request.\n\n## How can I contribute?\n\n### Spreading the word\n* Tell your friends or co-workers about vprof.\n* Write a blog post about vprof.\n* Write a tutorial for vprof.\n\n### Reporting bugs\n\n* Before submitting bug report, please check if the problem has already been\nreported.\n* Use clear and descriptive title for the issue.\n* Describe the exact steps to reproduce the problem.\n* Describe behavior you observed after following the steps.\n* Describe behavior you expect to see instead.\n* Include screenshots if it helps to demonstrate the problem.\n* Include version vprof, Python, name and version of OS you are using.\n\n### Suggesting enhancements\nBefore creating feature request, please check if the feature has already been\nrequested or implemented.\n\n### Contributing code\n* If you want to contribute a new feature, please create feature request first. Your new feature request can be out of vprof scope and might not be added to the project.\n* Use clear and descriptive title for the pull request.\n* New code should adhere to respective styleguides.\n* Add unit and integration tests if necessary.\n* All new code should be documented.\n\n## Styleguide\n* PEP 8 for Python.\n* Check `.eslintrc` in the root folder of the project for Javascript styleguide.\n"
        },
        {
          "name": "ISSUE_TEMPLATE.md",
          "type": "blob",
          "size": 0.146484375,
          "content": "<!-- Thanks for contributing! -->\n##### Description\n\n##### How to reproduce\n\n##### Actual results\n\n##### Expected results\n\n##### Version and platform\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2626953125,
          "content": "Copyright (c) 2015-2016, nvdv\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.3623046875,
          "content": "include vprof/ui/profile.html\ninclude vprof/ui/vprof_min.js\ninclude vprof/ui/css/code_heatmap.css\ninclude vprof/ui/css/flame_graph.css\ninclude vprof/ui/css/memory_stats.css\ninclude vprof/ui/css/profiler.css\ninclude vprof/ui/css/vprof.css\ninclude vprof/ui/css/progress.gif\ninclude vprof/ui/favicon.ico\ninclude requirements.txt\ninclude dev_requirements.txt\ninclude LICENSE\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.2255859375,
          "content": "[![PyPI](https://img.shields.io/pypi/v/vprof.svg)](https://pypi.python.org/pypi/vprof/)\n\n# vprof\n\nvprof is a Python package providing rich and interactive visualizations for\nvarious Python program characteristics such as running time and memory usage.\nIt supports Python 3.4+ and distributed under BSD license.\n\nThe project is in active development and some of its features might not work as\nexpected.\n\n## Screenshots\n![vprof-gif](http://i.imgur.com/ikBlfvQ.gif)\n\n## Contributing\nAll contributions are highly encouraged! You can add new features,\nreport and fix existing bugs and write docs and tutorials.\nFeel free to open an issue or send a pull request!\n\n## Prerequisites\nDependencies to build `vprof` from source code:\n * Python 3.4+\n * `pip`\n * `npm` >= 3.3.12\n\n`npm` is required to build `vprof` from sources only.\n\n## Dependencies\nAll Python and `npm` module dependencies are listed in `package.json` and\n`requirements.txt`.\n\n## Installation\n`vprof` can be installed from PyPI\n\n```sh\npip install vprof\n```\n\nTo build `vprof` from sources, clone this repository and execute\n\n```sh\npython3 setup.py deps_install && python3 setup.py build_ui && python3 setup.py install\n```\n\nTo install just `vprof` dependencies, run\n\n```sh\npython3 setup.py deps_install\n```\n\n## Usage\n\n```sh\nvprof -c <config> <src>\n```\n`<config>` is a combination of supported modes:\n\n* `c` - CPU flame graph  ⚠️ **Not available for windows [#62](https://github.com/nvdv/vprof/issues/62)**\n\nShows CPU flame graph for `<src>`.\n\n* `p` - profiler\n\nRuns built-in Python profiler on `<src>` and displays results.\n\n* `m` - memory graph\n\nShows objects that are tracked by CPython GC and left in memory after code\nexecution. Also shows process memory usage after execution of each line of `<src>`.\n\n* `h` - code heatmap\n\nDisplays all executed code of `<src>` with line run times and execution counts.\n\n`<src>` can be Python source file (e.g. `testscript.py`) or path to package\n(e.g. `myproject/test_package`).\n\nTo run scripts with arguments use double quotes\n\n```sh\nvprof -c cmh \"testscript.py --foo --bar\"\n```\n\nModes can be combined\n\n```sh\nvprof -c cm testscript.py\n```\n\n`vprof` can also profile functions. In order to do this,\nlaunch `vprof` in remote mode:\n\n```sh\nvprof -r\n```\n\n`vprof` will open new tab in default web browser and then wait for stats.\n\nTo profile a function run\n\n```python\nfrom vprof import runner\n\ndef foo(arg1, arg2):\n    ...\n\nrunner.run(foo, 'cmhp', args=(arg1, arg2), host='localhost', port=8000)\n```\n\nwhere `cmhp` is profiling mode, `host` and `port` are hostname and port of\n`vprof` server launched in remote mode. Obtained stats will be rendered in new\ntab of default web browser, opened by `vprof -r` command.\n\n`vprof` can save profile stats to file and render visualizations from\npreviously saved file.\n\n```sh\nvprof -c cmh src.py --output-file profile.json\n```\n\nwrites profile to file and\n\n```sh\nvprof --input-file profile.json\n```\nrenders visualizations from previously saved file.\n\nCheck `vprof -h` for full list of supported parameters.\n\nTo show UI help, press `h` when visualizations are displayed.\n\nAlso you can check `examples` directory for more profiling examples.\n\n## Testing\n\n```sh\npython3 setup.py test_python && python3 setup.py test_javascript && python3 setup.py e2e_test\n```\n\n## License\n\nBSD\n"
        },
        {
          "name": "dev_requirements.txt",
          "type": "blob",
          "size": 0.013671875,
          "content": "pylint>=2.0.0\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.7109375,
          "content": "{\n  \"name\": \"vprof-ui\",\n  \"author\": \"nvdv\",\n  \"main\": \"vprof/ui/main.js\",\n  \"dependencies\": {\n    \"browserify\": \"13\",\n    \"browserify-css\": \"latest\",\n    \"d3\": \"4.9.1\",\n    \"eslint\": \"latest\",\n    \"highlight.js\": \"latest\",\n    \"jest\": \"18.0.0\",\n    \"uglify-es\": \"3.0.24\",\n    \"watchify\": \"3.7.0\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint vprof/ui\",\n    \"build\": \"browserify -g browserify-css vprof/ui/main.js | uglifyjs -o vprof/ui/vprof_min.js\",\n    \"watch\": \"watchify vprof/ui/main.js -o vprof/ui/vprof_min.js -v\",\n    \"test\": \"jest\"\n  },\n  \"browserify\": {\n    \"transform\": [\n      \"browserify-css\"\n    ]\n  },\n  \"license\": \"BSD-2-Clause\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"http://github.com/nvdv/vprof.git\"\n  }\n}\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.009765625,
          "content": "psutil>=3\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 5.3134765625,
          "content": "\"\"\"Setup script for vprof.\"\"\"\nimport glob\nimport re\nimport shlex\nimport subprocess\nimport unittest\n\nimport pkg_resources\nfrom distutils import cmd\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\nclass RunUnittestsBackendCommand(cmd.Command):\n    \"\"\"Class that runs backend unit tests.\"\"\"\n    description = 'Run backend unittests'\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        suite = unittest.TestLoader().discover(\n            'vprof/tests/.', pattern=\"*_test.py\")\n        unittest.TextTestRunner(verbosity=2, buffer=True).run(suite)\n\n\nclass RunUnittestsFrontendCommand(cmd.Command):\n    \"\"\"Class that runs frontend unit tests.\"\"\"\n    description = 'Run frontend unittests'\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        subprocess.check_call(shlex.split('npm run test'))\n\n\nclass RunEndToEndTestCommand(cmd.Command):\n    \"\"\"Class that runs end-to-end tests.\"\"\"\n    description = 'Run all end to end tests'\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        suite = unittest.TestLoader().discover(\n            'vprof/tests/.', pattern=\"*_e2e.py\")\n        unittest.TextTestRunner(verbosity=2, buffer=True).run(suite)\n\n\nclass RunLintBackendCommand(cmd.Command):\n    \"\"\"Class that runs Python linter.\"\"\"\n    description = 'Run Python linter'\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        subprocess.check_call(shlex.split(\n            'pylint --reports=n --rcfile=.pylintrc ' + ' '.join(\n                glob.glob('vprof/*.py'))))\n        subprocess.check_call(shlex.split(\n            'pylint --reports=n --rcfile=.pylintrc ' + ' '.join(\n                glob.glob('vprof/tests/*.py'))))\n\n\nclass RunLintFrontendCommand(cmd.Command):\n    \"\"\"Class that runs Javascript linter.\"\"\"\n    description = 'Run Javascript linter'\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        subprocess.check_call(shlex.split('npm run lint'))\n\n\nclass RunCleanCommand(cmd.Command):\n    \"\"\"Class that runs cleanup command.\"\"\"\n    description = 'Clean temporary files up'\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        subprocess.check_output(\n            shlex.split('rm -rf vprof/ui/vprof_min.js'))\n\n\nclass RunDepsInstallCommand(cmd.Command):\n    \"\"\"Class that installs dependencies.\"\"\"\n    description = 'Install dependencies'\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        subprocess.check_call(\n            [\"python3\", '-m', 'pip', 'install', '-r', 'requirements.txt'])\n        subprocess.check_call(\n            [\"python3\", '-m', 'pip', 'install', '-r', 'dev_requirements.txt'])\n        subprocess.check_call(shlex.split('npm install'))\n\n\nclass VProfBuild(install):\n    \"\"\"Class that represents UI build command.\"\"\"\n    def run(self):\n        subprocess.check_call(shlex.split('npm run build'))\n\n\nclass VProfInstall(install):\n    \"\"\"Class that represents install command.\"\"\"\n    def run(self):\n        install.run(self)\n\n\ndef get_vprof_version(filename):\n    \"\"\"Returns actual version specified in filename.\"\"\"\n    with open(filename) as src_file:\n        version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                                  src_file.read(), re.M)\n        if version_match:\n            return version_match.group(1)\n        raise RuntimeError('Unable to find version info.')\n\n\ndef get_description():\n    \"\"\"Reads README.md file.\"\"\"\n    with open('README.md') as readme_file:\n        return readme_file.read()\n\n\ndef get_requirements():\n    \"\"\"Reads package dependencies.\"\"\"\n    with open('requirements.txt') as fp:\n        return [str(r) for r in pkg_resources.parse_requirements(fp)]\n\n\nsetup(\n    name='vprof',\n    version=get_vprof_version('vprof/__main__.py'),\n    packages=['vprof'],\n    description=\"Visual profiler for Python\",\n    url='http://github.com/nvdv/vprof',\n    license='BSD',\n    author='nvdv',\n    author_email='aflatnine@gmail.com',\n    include_package_data=True,\n    keywords=['debugging', 'profiling'],\n    entry_points={\n        'console_scripts': [\n            'vprof = vprof.__main__:main'\n        ]\n    },\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Topic :: Software Development',\n    ],\n    install_requires=get_requirements(),\n    long_description=get_description(),\n    long_description_content_type=\"text/markdown\",\n    cmdclass={\n        'test_python': RunUnittestsBackendCommand,\n        'test_javascript': RunUnittestsFrontendCommand,\n        'e2e_test': RunEndToEndTestCommand,\n        'lint_python': RunLintBackendCommand,\n        'lint_javascript': RunLintFrontendCommand,\n        'deps_install': RunDepsInstallCommand,\n        'build_ui': VProfBuild,\n        'install': VProfInstall,\n    },\n)\n"
        },
        {
          "name": "vprof",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}