{
  "metadata": {
    "timestamp": 1736559586021,
    "page": 212,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ddgth/cf2dns",
      "stars": 4475,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2265625,
          "content": ".DS_Store\n__pycache__\n\n\n# local env files\n.env.local\n.env.*.local\n\n# Log files\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\ncf2dns.log\n\n# Editor directories and files\n.idea\n.vscode\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw?\n\nconfig.json\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.068359375,
          "content": "### cloudflare 明文禁止：优选IP 和 CF代理节点。 使用本服务造成账号封禁，本人概不负责。 2024年12月16日前充值的用户可全额退款。 来源: https://www.landiannews.com/archives/107113.html  --update 2024.12.16\n\n\n### 增加dddb/cf2dns docker镜像  --update 2024.6.4\n\n> 使用方法\n\n1. 拉取cf2dns docker镜像 `docker pull dddb/cf2dns`\n\n2. 新建cf2dns_docker工作路径 `cd ~ && mkdir -p cf2dns_docker/logs && cd cf2dns_docker`\n\n3. 下载所需配置文件 `wget --no-check-certificate -qO ./config.ini https://raw.githubusercontent.com/ddgth/cf2dns/master/docker/src/config.ini`\n\n4. 根据注释修改`config.ini`配置文件\n\n5. 运行docker镜像 `docker run -d -v ~/cf2dns_docker/config.ini:/cf2dns/src/config.ini -v ~/cf2dns_docker/logs:/cf2dns/logs dddb/cf2dns`\n\n6. 查看运行日志 `tail -100f ~/cf2dns_docker/logs/cf2dns.log`\n\n\n\n### 修复腾讯云 DNS 无法调用 --update 2023.1.3\n\n   [API 2.0下线通知](https://cloud.tencent.com/document/product/1278/82311) By github@z0z0r4\n\n### 新增支持Actions自选更新V4或V6 ——update 2022.12.19\n\n> 使用方法\n\n1. 修改 **`.github/workflows/run.yml`**\n\n2. 新增secret **`DOMAINSV6`**\n   \n   ### 新增支持华为云DNS ——update 2022.10.25\n   \n   > 使用方法\n\n3. 安装依赖 **`pip install -r requirements.txt`**\n\n4. 修改配置文件 **`DNS_SERVER`** **`SECRETID`**  **`SECRETKEY`** **`REGION_HW`**\n\n### 新增优选IPv6功能 ——update 2022.07.06\n\n> 使用方法\n\n​    更新代码，修改脚本中的 `TYPE` 参数即可\n\n### 新增默认线路记录 ——update 2021.12.15\n\n如果需要使用默认线路，请将默认线路的cname记录移除或改为其他线路\n\n默认：DEF\n\n境外：AB\n\n### Faker GFW ——update 2021.08.08\n\n最近有很多小伙伴正遭受假墙并伴随着被勒索的困扰，现在增加了预防假墙攻击的功能\n\n> 实现方式\n\n​    之前不管您使用免费的key还是付费的key所筛选出来的Cloudflare IP都是多人共享的，如果其中有人的网站刚好被假墙，而您自选出来的IP刚好和他的相同，那么您的网站也有被假墙的风险，当然我也使用了各种手动去解决这个方法，比如增加接口返回IP数、随机获取优选IP等，但最总还是不能完全杜绝这情况的发现，所以现增加了一个优选IP池，只需在您的key后面加上 **`fgfw`** ,您就会每次执行脚本都能获取到**最新的独享优选IP**，由于这需要消耗更多的服务器硬件和带宽资源，那么每次调用获取最新的独享优选IP时，您只能获取到每个运营商的**2条**优选记录，并且每次调用您将消耗更多的key调用次数，执行频率建议与您DNS服务商的最小TTL保持一直（记得把脚本中的TTL参数也修改了）。\n\n> 使用方法：\n\n1. 新用户：在您购买的KEY后面加上 **`fgfw`** ，并按照下面教程使用即可\n2. 新用户：每个运营商的**2条**优选记录，所以您需要删除目前已经存在的之前优选的A记录然后在您购买的KEY后面加上 **`fgfw`** 即可。\n\n***\n\n### 功能介绍\n\n筛选出优质的Cloudflare IP（目前在暂不开源，以接口方式提供15分钟更新一次），并使用域名服务商提供的API解析到不同线路以达到网站加速的效果（目前只完成DNSPod和阿里云DNS，后续如果有需求将会加入其他运营商的）。\n\n**详细的使用场景请移步我的[小站](https://blog.hostmonit.com/cloudflare-select-ip-plus/)**\n\n### 适用人群\n\n1. 小站长，网站经常被打或网站放置在国外需要稳定且速度相对快的CDN\n2. 服务器在国外但是想建站的小伙伴\n3. 科学上网加速，拯救移动线路（未测试）\n\n### 使用方法\n\n>  必要条件: \n> \n>  ★ Cloudflare自选IP并已接入到DNSPod或阿里云DNS，不知道怎么自选IP可以查看这个[教程](https://blog.hostmonit.com/manually-select-ip/)\n> \n>  ★ Python3、pip环境\n\n#### 方法一：在自己的VPS或电脑中运行（推荐）\n\n1. 安装运行脚本所需依赖\n\n```python\npip install -r requirements.txt\n```\n\n2. 登录[腾讯云后台](https://console.cloud.tencent.com/cam/capi)或者[阿里云后台](https://help.aliyun.com/document_detail/53045.html?spm=a2c4g.11186623.2.11.2c6a2fbdh13O53),获取 SecretId、SecretKey，如果使用阿里云DNS，注意需要添加DNS控制权限**AliyunDNSFullAccess**\n\n3. 将脚本下载到本地修改cf2dns.py中的SecretId、SecretKey\n\n4. 修改脚本中域名配置信息，可配置多个域名和多个子域名，注意选择DNS服务商\n\n5. (可选)从[商店](https://shop.hostmonit.com)购买KEY，当然也可以用脚本中自带的，区别是脚本中自带的KEY是历史优选的Cloudflare IP(也可以从这个[网站](https://stock.hostmonit.com/CloudFlareYes)查到IP的信息)，而购买的KEY是15分钟内获取到的最新的Cloudflare IP。\n\n6. 运行程序，如果能够正常运行可以选择cron定时执行(建议15分钟执行一次)\n\n```python\npython cf2dns.py\n```\n\n#### 方法二：GitHub Actions 运行\n\n1. 登录[腾讯云后台](https://console.cloud.tencent.com/cam/capi)或者[阿里云后台](https://help.aliyun.com/document_detail/53045.html?spm=a2c4g.11186623.2.11.2c6a2fbdh13O53),获取 SecretId、SecretKey，如果使用阿里云DNS，注意需要添加DNS控制权限**AliyunDNSFullAccess**\n\n2. Fork本项目到自己的仓库![fork.png](https://img.hostmonit.com/images/2020/11/05/fork.png)\n\n3. 进入第二步中Fork的项目，点击Settings->Secrets and variables-> Actions -> New repository secret，分别是DOMAINS，KEY，SECRETID，SECRETKEY。\n   \n   > - DOMAINS  需改域名信息，填写时注意不要有换行  例如：`{\"hostmonit.com\": {\"@\": [\"CM\",\"CU\",\"CT\"], \"shop\": [\"CM\", \"CU\", \"CT\"], \"stock\": [\"CM\",\"CU\",\"CT\"]},\"4096.me\": {\"@\": [\"CM\",\"CU\",\"CT\"], \"vv\":[\"CM\",\"CU\",\"CT\"]}}`\n   > - DOMAINSV6 如果需要更新AAA解析请增加此secrets，格式同DOMAINS。\n   > - KEY      API密钥，从[商店](https://shop.hostmonit.com)购买KEY，也可以使用这个KEY `o1zrmHAF` ，区别是 `o1zrmHAF` 是历史优选的Cloudflare IP(也可以从这个[网站](https://stock.hostmonit.com/CloudFlareYes)查到IP的信息)，而购买的KEY是15分钟内获取到的对各运营商速度最优的的Cloudflare IP\n   > - SECRETID  第一部中从[腾讯云后台](https://console.cloud.tencent.com/cam/capi)或者[阿里云后台](https://help.aliyun.com/document_detail/53045.html?spm=a2c4g.11186623.2.11.2c6a2fbdh13O53),获取到的 `SECRETID  `\n   > - SECRETKEY  第一部中从[腾讯云后台](https://console.cloud.tencent.com/cam/capi)或者[阿里云后台](https://help.aliyun.com/document_detail/53045.html?spm=a2c4g.11186623.2.11.2c6a2fbdh13O53),获取到的 `SECRETKEY`\n   \n   ![secret.png](https://img.hostmonit.com/images/2023/03/04/actions.png)\n\n4. 修改您项目中的 `cf2dns_actions.py`文件中的`AFFECT_NUM`和`DNS_SERVER`参数，继续修改`.github/workflows/run.yml` 文件，定时执行的时长(建议15分钟执行一次)，最后点击 `start commit` 提交即可在Actions中的build查看到执行情况，如果看到 `cf2dns` 执行日志中有 `CHANGE DNS SUCCESS` 详情输出，即表示运行成功。**需要注意观察下次定时是否能正确运行，有时候GitHub Actions 挺抽风的**\n   \n   ![modify.png](https://img.hostmonit.com/images/2020/11/05/modify.png)\n   \n   ![commit.png](https://img.hostmonit.com/images/2020/11/05/commit.png)\n   \n   ![build.png](https://img.hostmonit.com/images/2020/11/05/build.png)\n\n### 免责声明\n\n> 1.网络环境错综复杂，适合我的不一定适合你，所以尽量先尝试免费的KEY或者购买试用版的KEY\n> \n> 2.有什么问题和建议请提issue或者Email我，不接受谩骂、扯皮、吐槽\n> \n> 3.为什么收费？ 这个标价我也根本不指望赚钱，甚至不够我国内一台VDS的钱。\n> \n> ★ 如果当前DNSPod有移动、联通、电信线路的解析将会覆盖掉\n> \n> ★ cloudflare 明文禁止：优选IP 和 CF代理节点。 使用本服务造成账号封禁，本人概不负责。 2024年12月16日前充值的用户可全额退款。 https://www.landiannews.com/archives/107113.html  --update 2024.12.16\n"
        },
        {
          "name": "cf2dns.py",
          "type": "blob",
          "size": 10.64453125,
          "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Mail: tongdongdong@outlook.com\nimport random\nimport time\nimport requests\nfrom dns.qCloud import QcloudApiv3 # QcloudApiv3 DNSPod 的 API 更新了 By github@z0z0r4\nfrom dns.aliyun import AliApi\nfrom dns.huawei import HuaWeiApi\nfrom log import Logger\nimport traceback\n\n#可以从https://shop.hostmonit.com获取\nKEY = \"o1zrmHAF\"\n\n#CM:移动 CU:联通 CT:电信  AB:境外 DEF:默认\n#修改需要更改的dnspod域名和子域名\nDOMAINS = {\n    \"hostxxnit.com\": {\"@\": [\"CM\",\"CU\",\"CT\"], \"shop\": [\"CM\", \"CU\", \"CT\"], \"stock\": [\"CM\",\"CU\",\"CT\"]},\n    \"484848.xyz\": {\"@\": [\"CM\",\"CU\",\"CT\"], \"shop\": [\"CM\",\"CU\",\"CT\"]}\n}\n\n#解析生效条数 免费的DNSPod相同线路最多支持2条解析\nAFFECT_NUM = 2\n\n#DNS服务商 如果使用DNSPod改为1 如果使用阿里云解析改成2  如果使用华为云解析改成3\nDNS_SERVER = 1\n\n#如果使用华为云解析 需要从API凭证-项目列表中获取\nREGION_HW = 'cn-east-3'\n\n#如果使用阿里云解析 REGION出现错误再修改 默认不需要修改 https://help.aliyun.com/document_detail/198326.html\nREGION_ALI = 'cn-hongkong'\n\n#解析生效时间，默认为600秒 如果不是DNS付费版用户 不要修改!!!\nTTL = 600\n\n#v4为筛选出IPv4的IP  v6为筛选出IPv6的IP\nTYPE = 'v4'\n\n#API 密钥\n#腾讯云后台获取 https://console.cloud.tencent.com/cam/capi\n#阿里云后台获取 https://help.aliyun.com/document_detail/53045.html?spm=a2c4g.11186623.2.11.2c6a2fbdh13O53  注意需要添加DNS控制权限 AliyunDNSFullAccess\n#华为云后台获取 https://support.huaweicloud.com/devg-apisign/api-sign-provide-aksk.html\nSECRETID = 'WTTCWxxxxxxxxxxxxxxxxxxxxx84O0V'\nSECRETKEY = 'GXkG6D4X1Nxxxxxxxxxxxxxxxxxxxxx4lRg6lT'\n\nlog_cf2dns = Logger('cf2dns.log', level='debug') \n\ndef get_optimization_ip():\n    try:\n        headers = headers = {'Content-Type': 'application/json'}\n        data = {\"key\": KEY, \"type\": TYPE}\n        response = requests.post('https://api.hostmonit.com/get_optimization_ip', json=data, headers=headers)\n        if response.status_code == 200:\n            return response.json()\n        else:\n            log_cf2dns.logger.error(\"CHANGE OPTIMIZATION IP ERROR: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----MESSAGE: REQUEST STATUS CODE IS NOT 200\")\n            return None\n    except Exception as e:\n        log_cf2dns.logger.error(\"CHANGE OPTIMIZATION IP ERROR: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----MESSAGE: \" + str(e))\n        return None\n\ndef changeDNS(line, s_info, c_info, domain, sub_domain, cloud):\n    global AFFECT_NUM, TYPE\n    if TYPE == 'v6':\n        recordType = \"AAAA\"\n    else:\n        recordType = \"A\"\n\n    lines = {\"CM\": \"移动\", \"CU\": \"联通\", \"CT\": \"电信\", \"AB\": \"境外\", \"DEF\": \"默认\"}\n    line = lines[line]\n\n    try:\n        create_num = AFFECT_NUM - len(s_info)\n        if create_num == 0:\n            for info in s_info:\n                if len(c_info) == 0:\n                    break\n                cf_ip = c_info.pop(random.randint(0,len(c_info)-1))[\"ip\"]\n                if cf_ip in str(s_info):\n                    continue\n                ret = cloud.change_record(domain, info[\"recordId\"], sub_domain, cf_ip, recordType, line, TTL)\n                if(DNS_SERVER != 1 or ret[\"code\"] == 0):\n                    log_cf2dns.logger.info(\"CHANGE DNS SUCCESS: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----DOMAIN: \" + domain + \"----SUBDOMAIN: \" + sub_domain + \"----RECORDLINE: \"+line+\"----RECORDID: \" + str(info[\"recordId\"]) + \"----VALUE: \" + cf_ip )\n                else:\n                    log_cf2dns.logger.error(\"CHANGE DNS ERROR: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----DOMAIN: \" + domain + \"----SUBDOMAIN: \" + sub_domain + \"----RECORDLINE: \"+line+\"----RECORDID: \" + str(info[\"recordId\"]) + \"----VALUE: \" + cf_ip + \"----MESSAGE: \" + ret[\"message\"] )\n        elif create_num > 0:\n            for i in range(create_num):\n                if len(c_info) == 0:\n                    break\n                cf_ip = c_info.pop(random.randint(0,len(c_info)-1))[\"ip\"]\n                if cf_ip in str(s_info):\n                    continue\n                ret = cloud.create_record(domain, sub_domain, cf_ip, recordType, line, TTL)\n                if(DNS_SERVER != 1 or ret[\"code\"] == 0):\n                    log_cf2dns.logger.info(\"CREATE DNS SUCCESS: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----DOMAIN: \" + domain + \"----SUBDOMAIN: \" + sub_domain + \"----RECORDLINE: \"+line+\"----VALUE: \" + cf_ip )\n                else:\n                    log_cf2dns.logger.error(\"CREATE DNS ERROR: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----DOMAIN: \" + domain + \"----SUBDOMAIN: \" + sub_domain + \"----RECORDLINE: \"+line+\"----RECORDID: \" + str(info[\"recordId\"]) + \"----VALUE: \" + cf_ip + \"----MESSAGE: \" + ret[\"message\"] )\n        else:\n            for info in s_info:\n                if create_num == 0 or len(c_info) == 0:\n                    break\n                cf_ip = c_info.pop(random.randint(0,len(c_info)-1))[\"ip\"]\n                if cf_ip in str(s_info):\n                    create_num += 1\n                    continue\n                ret = cloud.change_record(domain, info[\"recordId\"], sub_domain, cf_ip, recordType, line, TTL)\n                if(DNS_SERVER != 1 or ret[\"code\"] == 0):\n                    log_cf2dns.logger.info(\"CHANGE DNS SUCCESS: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----DOMAIN: \" + domain + \"----SUBDOMAIN: \" + sub_domain + \"----RECORDLINE: \"+line+\"----RECORDID: \" + str(info[\"recordId\"]) + \"----VALUE: \" + cf_ip )\n                else:\n                    log_cf2dns.logger.error(\"CHANGE DNS ERROR: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----DOMAIN: \" + domain + \"----SUBDOMAIN: \" + sub_domain + \"----RECORDLINE: \"+line+\"----RECORDID: \" + str(info[\"recordId\"]) + \"----VALUE: \" + cf_ip + \"----MESSAGE: \" + ret[\"message\"] )\n                create_num += 1\n    except Exception as e:\n            log_cf2dns.logger.error(\"CHANGE DNS ERROR: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----MESSAGE: \" + str(e))\n\ndef main(cloud):\n    global AFFECT_NUM, TYPE\n    if TYPE == 'v6':\n        recordType = \"AAAA\"\n    else:\n        recordType = \"A\"\n    if len(DOMAINS) > 0:\n        try:\n            cfips = get_optimization_ip()\n            if cfips == None or cfips[\"code\"] != 200:\n                log_cf2dns.logger.error(\"GET CLOUDFLARE IP ERROR: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----MESSAGE: \" + str(cfips[\"info\"]))\n                return\n            cf_cmips = cfips[\"info\"][\"CM\"]\n            cf_cuips = cfips[\"info\"][\"CU\"]\n            cf_ctips = cfips[\"info\"][\"CT\"]\n            for domain, sub_domains in DOMAINS.items():\n                for sub_domain, lines in sub_domains.items():\n                    temp_cf_cmips = cf_cmips.copy()\n                    temp_cf_cuips = cf_cuips.copy()\n                    temp_cf_ctips = cf_ctips.copy()\n                    temp_cf_abips = cf_ctips.copy()\n                    temp_cf_defips = cf_ctips.copy()\n                    if DNS_SERVER == 1:\n                        ret = cloud.get_record(domain, 20, sub_domain, \"CNAME\")\n                        if ret[\"code\"] == 0:\n                            for record in ret[\"data\"][\"records\"]:\n                                if record[\"line\"] == \"移动\" or record[\"line\"] == \"联通\" or record[\"line\"] == \"电信\":\n                                    retMsg = cloud.del_record(domain, record[\"id\"])\n                                    if(retMsg[\"code\"] == 0):\n                                        log_cf2dns.logger.info(\"DELETE DNS SUCCESS: ----Time: \"  + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----DOMAIN: \" + domain + \"----SUBDOMAIN: \" + sub_domain + \"----RECORDLINE: \"+record[\"line\"] )\n                                    else:\n                                        log_cf2dns.logger.error(\"DELETE DNS ERROR: ----Time: \"  + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----DOMAIN: \" + domain + \"----SUBDOMAIN: \" + sub_domain + \"----RECORDLINE: \"+record[\"line\"] + \"----MESSAGE: \" + retMsg[\"message\"] )\n                    ret = cloud.get_record(domain, 100, sub_domain, recordType)\n                    if DNS_SERVER != 1 or ret[\"code\"] == 0 :\n                        if DNS_SERVER == 1 and \"Free\" in ret[\"data\"][\"domain\"][\"grade\"] and AFFECT_NUM > 2:\n                            AFFECT_NUM = 2\n                        cm_info = []\n                        cu_info = []\n                        ct_info = []\n                        ab_info = []\n                        def_info = []\n                        for record in ret[\"data\"][\"records\"]:\n                            info = {}\n                            info[\"recordId\"] = record[\"id\"]\n                            info[\"value\"] = record[\"value\"]\n                            if record[\"line\"] == \"移动\":\n                                cm_info.append(info)\n                            elif record[\"line\"] == \"联通\":\n                                cu_info.append(info)\n                            elif record[\"line\"] == \"电信\":\n                                ct_info.append(info)\n                            elif record[\"line\"] == \"境外\":\n                                ab_info.append(info)\n                            elif record[\"line\"] == \"默认\":\n                                def_info.append(info)\n                        for line in lines:\n                            if line == \"CM\":\n                                changeDNS(\"CM\", cm_info, temp_cf_cmips, domain, sub_domain, cloud)\n                            elif line == \"CU\":\n                                changeDNS(\"CU\", cu_info, temp_cf_cuips, domain, sub_domain, cloud)\n                            elif line == \"CT\":\n                                changeDNS(\"CT\", ct_info, temp_cf_ctips, domain, sub_domain, cloud)\n                            elif line == \"AB\":\n                                changeDNS(\"AB\", ab_info, temp_cf_abips, domain, sub_domain, cloud)\n                            elif line == \"DEF\":\n                                changeDNS(\"DEF\", def_info, temp_cf_defips, domain, sub_domain, cloud)\n        except Exception as e:\n            traceback.print_exc()  \n            log_cf2dns.logger.error(\"CHANGE DNS ERROR: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----MESSAGE: \" + str(e))\n\nif __name__ == '__main__':\n    if DNS_SERVER == 1:\n        cloud = QcloudApiv3(SECRETID, SECRETKEY)\n    elif DNS_SERVER == 2:\n        cloud = AliApi(SECRETID, SECRETKEY, REGION_ALI)\n    elif DNS_SERVER == 3:\n        cloud = HuaWeiApi(SECRETID, SECRETKEY, REGION_HW)\n    main(cloud)"
        },
        {
          "name": "cf2dns_actions.py",
          "type": "blob",
          "size": 10.5107421875,
          "content": "# Mail: tongdongdong@outlook.com\nimport random\nimport time\nimport json\nimport requests\nimport os\nimport traceback\nfrom dns.qCloud import QcloudApiv3 # QcloudApiv3 DNSPod 的 API 更新了 github@z0z0r4\nfrom dns.aliyun import AliApi\nfrom dns.huawei import HuaWeiApi\nimport sys\n\n#可以从https://shop.hostmonit.com获取\nKEY = os.environ[\"KEY\"]  #\"o1zrmHAF\"\n#CM:移动 CU:联通 CT:电信 AB:境外 DEF:默认\n#修改需要更改的dnspod域名和子域名\nDOMAINS = json.loads(os.environ[\"DOMAINS\"])  #{\"hostmonit.com\": {\"@\": [\"CM\",\"CU\",\"CT\"], \"shop\": [\"CM\", \"CU\", \"CT\"], \"stock\": [\"CM\",\"CU\",\"CT\"]},\"4096.me\": {\"@\": [\"CM\",\"CU\",\"CT\"], \"vv\": [\"CM\",\"CU\",\"CT\"]}}\n#腾讯云后台获取 https://console.cloud.tencent.com/cam/capi\nSECRETID = os.environ[\"SECRETID\"]    #'AKIDV**********Hfo8CzfjgN'\nSECRETKEY = os.environ[\"SECRETKEY\"]   #'ZrVs*************gqjOp1zVl'\n#默认为普通版本 不用修改\nAFFECT_NUM = 2\n#DNS服务商 如果使用DNSPod改为1 如果使用阿里云解析改成2  如果使用华为云解析改成3\nDNS_SERVER = 1\n#如果试用华为云解析 需要从API凭证-项目列表中获取\nREGION_HW = 'cn-east-3'\n#如果使用阿里云解析 REGION出现错误再修改 默认不需要修改 https://help.aliyun.com/document_detail/198326.html\nREGION_ALI = 'cn-hongkong'\n#解析生效时间，默认为600秒 如果不是DNS付费版用户 不要修改!!!\nTTL = 600\n#v4为筛选出IPv4的IP  v6为筛选出IPv6的IP\nif len(sys.argv) >= 2:\n    RECORD_TYPE = sys.argv[1]\nelse:\n    RECORD_TYPE = \"A\"\n\n\ndef get_optimization_ip():\n    try:\n        headers = headers = {'Content-Type': 'application/json'}\n        data = {\"key\": KEY, \"type\": \"v4\" if RECORD_TYPE == \"A\" else \"v6\"}\n        response = requests.post('https://api.hostmonit.com/get_optimization_ip', json=data, headers=headers)\n        if response.status_code == 200:\n            return response.json()\n        else:\n            print(\"CHANGE OPTIMIZATION IP ERROR: REQUEST STATUS CODE IS NOT 200\")\n            return None\n    except Exception as e:\n        print(\"CHANGE OPTIMIZATION IP ERROR: \" + str(e))\n        return None\n\ndef changeDNS(line, s_info, c_info, domain, sub_domain, cloud):\n    global AFFECT_NUM, RECORD_TYPE\n\n    lines = {\"CM\": \"移动\", \"CU\": \"联通\", \"CT\": \"电信\", \"AB\": \"境外\", \"DEF\": \"默认\"}\n    line = lines[line]\n\n    try:\n        create_num = AFFECT_NUM - len(s_info)\n        if create_num == 0:\n            for info in s_info:\n                if len(c_info) == 0:\n                    break\n                cf_ip = c_info.pop(random.randint(0,len(c_info)-1))[\"ip\"]\n                if cf_ip in str(s_info):\n                    continue\n                ret = cloud.change_record(domain, info[\"recordId\"], sub_domain, cf_ip, RECORD_TYPE, line, TTL)\n                if(DNS_SERVER != 1 or ret[\"code\"] == 0):\n                    print(\"CHANGE DNS SUCCESS: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----DOMAIN: \" + domain + \"----SUBDOMAIN: \" + sub_domain + \"----RECORDLINE: \"+line+\"----RECORDID: \" + str(info[\"recordId\"]) + \"----VALUE: \" + cf_ip )\n                else:\n                    print(\"CHANGE DNS ERROR: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----DOMAIN: \" + domain + \"----SUBDOMAIN: \" + sub_domain + \"----RECORDLINE: \"+line+\"----RECORDID: \" + str(info[\"recordId\"]) + \"----VALUE: \" + cf_ip + \"----MESSAGE: \" + ret[\"message\"] )\n        elif create_num > 0:\n            for i in range(create_num):\n                if len(c_info) == 0:\n                    break\n                cf_ip = c_info.pop(random.randint(0,len(c_info)-1))[\"ip\"]\n                if cf_ip in str(s_info):\n                    continue\n                ret = cloud.create_record(domain, sub_domain, cf_ip, RECORD_TYPE, line, TTL)\n                if(DNS_SERVER != 1 or ret[\"code\"] == 0):\n                    print(\"CREATE DNS SUCCESS: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----DOMAIN: \" + domain + \"----SUBDOMAIN: \" + sub_domain + \"----RECORDLINE: \"+line+\"----VALUE: \" + cf_ip )\n                else:\n                    print(\"CREATE DNS ERROR: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----DOMAIN: \" + domain + \"----SUBDOMAIN: \" + sub_domain + \"----RECORDLINE: \"+line+\"----RECORDID: \" + str(info[\"recordId\"]) + \"----VALUE: \" + cf_ip + \"----MESSAGE: \" + ret[\"message\"] )\n        else:\n            for info in s_info:\n                if create_num == 0 or len(c_info) == 0:\n                    break\n                cf_ip = c_info.pop(random.randint(0,len(c_info)-1))[\"ip\"]\n                if cf_ip in str(s_info):\n                    create_num += 1\n                    continue\n                ret = cloud.change_record(domain, info[\"recordId\"], sub_domain, cf_ip, RECORD_TYPE, line, TTL)\n                if(DNS_SERVER != 1 or ret[\"code\"] == 0):\n                    print(\"CHANGE DNS SUCCESS: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----DOMAIN: \" + domain + \"----SUBDOMAIN: \" + sub_domain + \"----RECORDLINE: \"+line+\"----RECORDID: \" + str(info[\"recordId\"]) + \"----VALUE: \" + cf_ip )\n                else:\n                    print(\"CHANGE DNS ERROR: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----DOMAIN: \" + domain + \"----SUBDOMAIN: \" + sub_domain + \"----RECORDLINE: \"+line+\"----RECORDID: \" + str(info[\"recordId\"]) + \"----VALUE: \" + cf_ip + \"----MESSAGE: \" + ret[\"message\"] )\n                create_num += 1\n    except Exception as e:\n            print(\"CHANGE DNS ERROR: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----MESSAGE: \" + str(traceback.print_exc()))\n\ndef main(cloud):\n    global AFFECT_NUM, RECORD_TYPE\n    if len(DOMAINS) > 0:\n        try:\n            cfips = get_optimization_ip()\n            if cfips == None or cfips[\"code\"] != 200:\n                print(\"GET CLOUDFLARE IP ERROR: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) )\n                return\n            cf_cmips = cfips[\"info\"][\"CM\"]\n            cf_cuips = cfips[\"info\"][\"CU\"]\n            cf_ctips = cfips[\"info\"][\"CT\"]\n            for domain, sub_domains in DOMAINS.items():\n                for sub_domain, lines in sub_domains.items():\n                    temp_cf_cmips = cf_cmips.copy()\n                    temp_cf_cuips = cf_cuips.copy()\n                    temp_cf_ctips = cf_ctips.copy()\n                    temp_cf_abips = cf_ctips.copy()\n                    temp_cf_defips = cf_ctips.copy()\n                    if DNS_SERVER == 1:\n                        ret = cloud.get_record(domain, 20, sub_domain, \"CNAME\")\n                        if ret[\"code\"] == 0:\n                            for record in ret[\"data\"][\"records\"]:\n                                if record[\"line\"] == \"移动\" or record[\"line\"] == \"联通\" or record[\"line\"] == \"电信\":\n                                    retMsg = cloud.del_record(domain, record[\"id\"])\n                                    if(retMsg[\"code\"] == 0):\n                                        print(\"DELETE DNS SUCCESS: ----Time: \"  + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----DOMAIN: \" + domain + \"----SUBDOMAIN: \" + sub_domain + \"----RECORDLINE: \"+record[\"line\"] )\n                                    else:\n                                        print(\"DELETE DNS ERROR: ----Time: \"  + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----DOMAIN: \" + domain + \"----SUBDOMAIN: \" + sub_domain + \"----RECORDLINE: \"+record[\"line\"] + \"----MESSAGE: \" + retMsg[\"message\"] )\n                    ret = cloud.get_record(domain, 100, sub_domain, RECORD_TYPE)\n                    if DNS_SERVER != 1 or ret[\"code\"] == 0 :\n                        if DNS_SERVER == 1 and \"Free\" in ret[\"data\"][\"domain\"][\"grade\"] and AFFECT_NUM > 2:\n                            AFFECT_NUM = 2\n                        cm_info = []\n                        cu_info = []\n                        ct_info = []\n                        ab_info = []\n                        def_info = []\n                        for record in ret[\"data\"][\"records\"]:\n                            if record[\"line\"] == \"移动\":\n                                info = {}\n                                info[\"recordId\"] = record[\"id\"]\n                                info[\"value\"] = record[\"value\"]\n                                cm_info.append(info)\n                            if record[\"line\"] == \"联通\":\n                                info = {}\n                                info[\"recordId\"] = record[\"id\"]\n                                info[\"value\"] = record[\"value\"]\n                                cu_info.append(info)\n                            if record[\"line\"] == \"电信\":\n                                info = {}\n                                info[\"recordId\"] = record[\"id\"]\n                                info[\"value\"] = record[\"value\"]\n                                ct_info.append(info)\n                            if record[\"line\"] == \"境外\":\n                                info = {}\n                                info[\"recordId\"] = record[\"id\"]\n                                info[\"value\"] = record[\"value\"]\n                                ab_info.append(info)\n                            if record[\"line\"] == \"默认\":\n                                info = {}\n                                info[\"recordId\"] = record[\"id\"]\n                                info[\"value\"] = record[\"value\"]\n                                def_info.append(info)\n                        for line in lines:\n                            if line == \"CM\":\n                                changeDNS(\"CM\", cm_info, temp_cf_cmips, domain, sub_domain, cloud)\n                            elif line == \"CU\":\n                                changeDNS(\"CU\", cu_info, temp_cf_cuips, domain, sub_domain, cloud)\n                            elif line == \"CT\":\n                                changeDNS(\"CT\", ct_info, temp_cf_ctips, domain, sub_domain, cloud)\n                            elif line == \"AB\":\n                                changeDNS(\"AB\", ab_info, temp_cf_abips, domain, sub_domain, cloud)\n                            elif line == \"DEF\":\n                                changeDNS(\"DEF\", def_info, temp_cf_defips, domain, sub_domain, cloud)\n        except Exception as e:\n            print(\"CHANGE DNS ERROR: ----Time: \" + str(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())) + \"----MESSAGE: \" + str(traceback.print_exc()))\n\nif __name__ == '__main__':\n    if DNS_SERVER == 1:\n        cloud = QcloudApiv3(SECRETID, SECRETKEY)\n    elif DNS_SERVER == 2:\n        cloud = AliApi(SECRETID, SECRETKEY, REGION_ALI)\n    elif DNS_SERVER == 3:\n        cloud = HuaWeiApi(SECRETID, SECRETKEY, REGION_HW)\n    main(cloud)"
        },
        {
          "name": "dns",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "log.py",
          "type": "blob",
          "size": 1.720703125,
          "content": "import logging\nfrom logging import handlers\n\nclass Logger(object):\n    level_relations = {\n        'debug':logging.DEBUG,\n        'info':logging.INFO,\n        'warning':logging.WARNING,\n        'error':logging.ERROR,\n        'crit':logging.CRITICAL\n    }#日志级别关系映射\n\n    def __init__(self,filename,level='info',when='D',backCount=3,fmt='%(asctime)s - %(pathname)s[line:%(lineno)d] - %(levelname)s: %(message)s'):\n        self.logger = logging.getLogger(filename)\n        format_str = logging.Formatter(fmt)#设置日志格式\n        self.logger.setLevel(self.level_relations.get(level))#设置日志级别\n        sh = logging.StreamHandler()#往屏幕上输出\n        sh.setFormatter(format_str) #设置屏幕上显示的格式\n        th = handlers.TimedRotatingFileHandler(filename=filename,when=when,backupCount=backCount,encoding='utf-8')#往文件里写入#指定间隔时间自动生成文件的处理器\n        #实例化TimedRotatingFileHandler\n        #interval是时间间隔，backupCount是备份文件的个数，如果超过这个个数，就会自动删除，when是间隔的时间单位，单位有以下几种：\n        # S 秒\n        # M 分\n        # H 小时、\n        # D 天、\n        # W 每星期（interval==0时代表星期一）\n        # midnight 每天凌晨\n        th.setFormatter(format_str)#设置文件里写入的格式\n        self.logger.addHandler(sh) #把对象加到logger里\n        self.logger.addHandler(th)\nif __name__ == '__main__':\n    log = Logger('monitor.log',level='debug')\n    log.logger.debug('debug')\n    log.logger.info('info')\n    log.logger.warning('警告')\n    log.logger.error('报错')\n    log.logger.critical('严重')\n    Logger('error.log', level='error').logger.error('error')"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1611328125,
          "content": "aliyun-python-sdk-alidns==2.6.19\naliyun-python-sdk-core==2.13.29\nhuaweicloudsdkcore==3.1.5\nhuaweicloudsdkdns==3.1.5\nrequests==2.28.1\ntencentcloud-sdk-python==3.0.806"
        }
      ]
    }
  ]
}