{
  "metadata": {
    "timestamp": 1736559987123,
    "page": 780,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mapillary/OpenSfM",
      "stars": 3448,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0205078125,
          "content": "BasedOnStyle: Google\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.318359375,
          "content": "# Ignore everything\n*\n\n# Pick what to include\n!bin\n!data/berlin/config.yaml\n!data/berlin/gcp_list.txt\n!data/berlin/images\n!data/berlin/reconstruction_example.json\n!data/lund/images\n!doc\n!LICENSE\n!opensfm\n!README.md\n!requirements.txt\n!setup.cfg\n!setup.py\n!viewer\n\n# Picking exceptions\ndoc/build\n**/*.so\n**/*.pyc\n**/__pycache__\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.357421875,
          "content": "*.pyc\n*.so\n*.prof\nxcode\n.DS_Store\nlaunch.json\n.vscode\n.idea\n\n# Ignore generated files\n/build\n/cmake_build\n/doc/build\n/dist\n/OpenSfM.egg-info\n.cache\n.pytest_cache\neval\n\n# Viewer\nnode_modules\n\n# Ignore the data folder, but not the berlin example.\ndata/*\ndata/berlin/*\n!data/berlin\n!data/berlin/config.yaml\n!data/berlin/images\n\n# Ignore virtualenv files\nenv/*\n\nPACKAGE\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.130859375,
          "content": "[submodule \"opensfm/src/third_party/pybind11\"]\n\tpath = opensfm/src/third_party/pybind11\n\turl = https://github.com/pybind/pybind11.git\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.142578125,
          "content": "# Changelog\n\n\n## [Unreleased]\n\n### Breaking\n - Main datastructures moved to C++ with Python bindings\n - Drop Python 2 support.  OpenSfM 0.5.x is the latest to support Python2.\n - Undistorted image file names only append the image format if it does not match the distorted image source\n - Undistorted shot ids now match the undistorted image file names and may not match the source shot ids\n\n### Added\n - The file `undistorted/undistorted_shot_ids.json` stores a map from the original shot ids to their corresponding list of undistorted shot ids.\n\n\n## 0.5.1\n\n### Added\n - Switch from python+OpenCV to internal C++ camera models\n - Switch from python to internal C++ tracks manager\n - COLMAP import script\n\n### Changed\n - Docker images : Ubuntu 20.04 (python3), Ubuntu 19.10 (python2)\n\n### Improved\n - Reprojection derivatives are now computed analytically instead of autodiff-ed (20%-45% speed-up on opensfm reconstruct)\n - Phantom4 sensor width @pierotofy\n - Fixed CLANG compilation\n\n\n## 0.4.0\n\n### Added\n - Internal geometric solvers and RANSAC\n\n### Changed\n- Undistorted images, masks and depthmaps are now under the undistorted folder.  Use the `bin/migrate_undistort.sh` script to port old datasets to the new folder structure.\n- Removed dependency on opengv\n- Restructured c++ code\n\n### Improved\n- Undistorting 16bit images now produces 16bit undistorted images. @pierotofy\n- Fix bug on multiple reconstruction alignment. @linusmartensson\n\n\n## 0.3.0\n\n### Added\n- Matching:\n  - Bag-of-words pair selection\n  - VLAD pair selection\n  - Words based matching\n\n### Changed\n- Local bundle adjustment is used by default\n- extract_metadata extracts exif only once\n- Changed default FLANN parameters for faster, less precise matching\n- Require cmake version 3 or later\n\n### Improved\n- Faster local bundle adjustment by limiting the neighborhood and the number of iterations\n- New GCP file format allows for GCPs without known world coordinates\n\n\n## 0.2.0\n\n### Added\n- Python 3 support. @spease\n- Brown-Conrady camera model. @bdholt1\n- reporting\n- docs on coordinates systems and incremental reconstruction pipeline. @jdjakub, @bryanibit\n- export reconstruction in proj4 geographic coordinates\n\n### Improved\n- improved initialization for planar scenes\n- support for recent (1.65+) versions of boost python. @spease\n- fix bug when using GCP. @jhacsonmeza\n- better navigation for 360 images. @mpetroff\n- use loky for better exception handling when using multi-processing. @pierotofy\n\n\n## 0.1.0\n\n### Added\n- Add option `local_bundle_radius` to run bundle adjustment locally around the last added image\n- Add option`optimize_camera_parameters` to optimize or not the internal camera parameters\n- Add tools to split large datasets into multiple submodels and align them a posteriori\n\n### Changed\n- `run_all` command is now named `opensfm_run_all`\n- Features are now saved in the `features` folder. The feature type is no longer used to name the feature folder and files\n- The option `bundle_use_gps` is now `true` by default.\n- Update openMVS exporter with current master `Interface.h`\n\n### Improved\n- Speed up the search for candidate matching images\n- Open binary file in binary mode under Windows\n\n\n## 0.0.0\n\nInitial release.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2705078125,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\naddress, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\nprofessional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at <opensource-conduct@fb.com>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.2197265625,
          "content": "# Contributing to OpenSfM\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Pull Requests\nWe actively welcome your pull requests.\n\n1. Fork the repo and create your branch from `main`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code lints.\n6. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\n## Contributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## Issues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\n\n## License\nBy contributing to OpenSfM, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.626953125,
          "content": "FROM ubuntu:20.04\n\nARG DEBIAN_FRONTEND=noninteractive\n\n# Install apt-getable dependencies\nRUN apt-get update \\\n    && apt-get install -y \\\n        build-essential \\\n        cmake \\\n        git \\\n        libeigen3-dev \\\n        libopencv-dev \\\n        libceres-dev \\\n        python3-dev \\\n        python3-numpy \\\n        python3-opencv \\\n        python3-pip \\\n        python3-pyproj \\\n        python3-scipy \\\n        python3-yaml \\\n        curl \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n\nCOPY . /source/OpenSfM\n\nWORKDIR /source/OpenSfM\n\nRUN pip3 install -r requirements.txt && \\\n    python3 setup.py build\n"
        },
        {
          "name": "Dockerfile.ceres2",
          "type": "blob",
          "size": 1.0458984375,
          "content": "FROM ubuntu:20.04\n\nARG DEBIAN_FRONTEND=noninteractive\n\n# Install apt-getable dependencies\nRUN apt-get update \\\n    && apt-get install -y \\\n        build-essential \\\n        cmake \\\n        git \\\n        libeigen3-dev \\\n        libgoogle-glog-dev \\\n        libopencv-dev \\\n        libsuitesparse-dev \\\n        python3-dev \\\n        python3-numpy \\\n        python3-opencv \\\n        python3-pip \\\n        python3-pyproj \\\n        python3-scipy \\\n        python3-yaml \\\n        curl \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n\n# Install Ceres 2\nRUN \\\n    mkdir -p /source && cd /source && \\\n    curl -L http://ceres-solver.org/ceres-solver-2.0.0.tar.gz | tar xz && \\\n    cd /source/ceres-solver-2.0.0 && \\\n    mkdir -p build && cd build && \\\n    cmake .. -DCMAKE_C_FLAGS=-fPIC -DCMAKE_CXX_FLAGS=-fPIC -DBUILD_EXAMPLES=OFF -DBUILD_TESTING=OFF && \\\n    make -j4 install && \\\n    cd / && rm -rf /source/ceres-solver-2.0.0\n\n\nCOPY . /source/OpenSfM\n\nWORKDIR /source/OpenSfM\n\nRUN pip3 install -r requirements.txt && \\\n    python3 setup.py build\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.26171875,
          "content": "Copyright (c) 2014, mapillary\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.515625,
          "content": "OpenSfM ![Docker workflow](https://github.com/mapillary/opensfm/workflows/Docker%20CI/badge.svg)\n=======\n\n## Overview\nOpenSfM is a Structure from Motion library written in Python. The library serves as a processing pipeline for reconstructing camera poses and 3D scenes from multiple images. It consists of basic modules for Structure from Motion (feature detection/matching, minimal solvers) with a focus on building a robust and scalable reconstruction pipeline. It also integrates external sensor (e.g. GPS, accelerometer) measurements for geographical alignment and robustness. A JavaScript viewer is provided to preview the models and debug the pipeline.\n\n<p align=\"center\">\n  <img src=\"https://opensfm.org/docs/_images/berlin_viewer.jpg\" />\n</p>\n\nCheckout this [blog post with more demos](http://blog.mapillary.com/update/2014/12/15/sfm-preview.html)\n\n\n## Getting Started\n\n* [Building the library][]\n* [Running a reconstruction][]\n* [Documentation][]\n\n\n[Building the library]: https://opensfm.org/docs/building.html (OpenSfM building instructions)\n[Running a reconstruction]: https://opensfm.org/docs/using.html (OpenSfM usage)\n[Documentation]: https://opensfm.org/docs/ (OpenSfM documentation)\n\n## License\nOpenSfM is BSD-style licensed, as found in the LICENSE file.  See also the Facebook Open Source [Terms of Use][] and [Privacy Policy][]\n\n[Terms of Use]: https://opensource.facebook.com/legal/terms (Facebook Open Source - Terms of Use)\n[Privacy Policy]: https://opensource.facebook.com/legal/privacy (Facebook Open Source - Privacy Policy)\n"
        },
        {
          "name": "annotation_gui_gcp",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "export_pmvs.md",
          "type": "blob",
          "size": 3.125,
          "content": "# OpenSfM to PMVS dense point cloud reconstruction\n\nDownload CMVS: http://www.di.ens.fr/cmvs/\n\n- [Install PMVS/CMVS](#pmvs-installation-hints-ubuntu)\n- [PMVS Inputs](#pmvs-inputs)\n- [Usage](#usage)\n\n### PMVS Installation Hints (Linux/Ubuntu)\n- Installation pointers here: http://www.di.ens.fr/cmvs/documentation.html\n\n- Type `make` in `cmvs/program/main`. Should make three binaries: \n    + `pmvs2`\n    + `cmvs`\n    + `genOptions`\n    \n- Most dependencies installed with apt-get: \n\n    `sudo apt-get install libgsl0-dev libblas-dev libatlas-dev liblapack-dev liblapacke-dev`\n\n- Updated Graclus link: http://www.cs.utexas.edu/users/dml/Software/graclus.html\n\n#### Lapack Errors: \nhttp://mdda.net/oss-blog/2014-06/building-VisualSFM-on-FC20/\n\n    ERROR : ../base/numeric/mylapack.cc:6:25: fatal error: clapack/f2c.h: No such file or directory\n\nUpdate `../base/numeric/mylapack.cc`\nFrom: \n\n    extern \"C\" {\n    #include <clapack/f2c.h>\n    #include <clapack/clapack.h>\n    };\nTo: \n\n    extern \"C\" {\n    //#include <clapack/f2c.h>\n    //#include <clapack/clapack.h>\n    #include <lapacke.h>\n    };\n    #define integer int\n\nUpdate `../base/numeric/mylapack.h`\nFrom:\n\n    static void lls(std::vector<float>& A,\n                  std::vector<float>& b,\n                  long int width, long int height);\n\n    static void lls(std::vector<double>& A,\n                  std::vector<double>& b,\n                  long int width, long int height);\nTo:\n\n    static void lls(std::vector<float>& A,\n                  std::vector<float>& b,\n                  int width, int height);\n\n    static void lls(std::vector<double>& A,\n                  std::vector<double>& b,\n                  int width, int height);\n\n#### Accumulate Error:\n\n    ../base/cmvs/bundle.cc: In member function ‘int CMVS::Cbundle::addImagesSub(const std::vector<std::map<int, float> >&)’:\n    ../base/cmvs/bundle.cc:1134:52: error: ‘accumulate’ was not declared in this scope\n       return accumulate(addnum.begin(), addnum.end(), 0);\n\nAdd this to `../base/cmvs/bundle.cc`\n\n    #include <numeric>\n\n#### Stdlib Error: \n    genOption.cc: In function ‘int main(int, char**)’:\n    genOption.cc:17:12: error: ‘exit’ was not declared in this scope\n\nAdd this to `genOption.cc`\n\n    #include <cstdlib>\n\n### PMVS Inputs \n\nThese are the files that `export_pmvs` generates for PMVS from OpenSfM output. More info: http://www.di.ens.fr/pmvs/documentation.html\n\n- Images: `visualize/%08d.jpg` (radially undistorted)\n- Camera Parameters: `txt/%08d.txt`\n- Image Co-Visibility file: `vis.dat`\n- Options file: `options.txt` (includes mention of `vis.dat`)\n- Output directory: `models/`\n\n### Usage\n\nFrom the root OpenSfM directory, run:\n\n    bin/export_pmvs <path_to_dataset>\n\nThere will be an individual pmvs directory for each separate reconstruction. \n\nTo perform the PMVS point cloud reconstruction, run: \n\n    ./pmvs2 <path_to_dataset>/pmvs/recon0/ pmvs_options.txt \n\nThis will generate files in `<path_to_dataset>/pmvs/recon0/models/` including a `pmvs_options.txt.ply`\n\n**Important:** note that the trailing `/` in `recon0/` is needed.  Otherwise PMVS will fail to find the options file and will give an `Unrecognizable option` warning.\n"
        },
        {
          "name": "licenses.csv",
          "type": "blob",
          "size": 0.3291015625,
          "content": "ExifRead, 2.1.2, BSD\nPillow, 6.2.0, HPND\nPyYAML, 5.1, MIT\ncloudpickle, 0.4.0, LICENSE.txt\nfpdf2, 2.4.6, \"LGPL 3.0\"\njoblib, 0.13.2, BSD\nnetworkx, 1.11, BSD\nnumpy, 1.18.1, BSD\npy, 1.8.1, MIT\npyproj, 2.5.0, \"OSI Approved\"\npytest, 3.0.7, MIT\npython-dateutil, 2.6.0, \"Simplified BSD\"\nscipy, 1.4.1, BSD\nsix, 1.14.0, MIT\nxmltodict, 0.10.2, MIT\n"
        },
        {
          "name": "mapillary_structure.json",
          "type": "blob",
          "size": 0.521484375,
          "content": "{\n    \"description\": \"Open source SfM library\",\n    \"repo\": \"OpenSfM\",\n    \"frameworks\": [],\n    \"language\": \"python\",\n    \"maintainers\": [\n      \"paulinus\",\n      \"YanNoun\"\n    ],\n    \"providers\": [\n      {\n        \"dependencies\": [],\n        \"description\": \"Provides the open source SfM library\",\n        \"name\": \"OpenSfM_library_provider\",\n        \"services\": [\n          {\n            \"description\": \"Open source SfM library\",\n            \"name\": \"OpenSfM_library\"\n          }\n        ],\n        \"type\": \"library\"\n      }\n    ]\n}\n"
        },
        {
          "name": "opensfm",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.328125,
          "content": "cloudpickle==0.4.0\nexifread==2.1.2\nflask==2.3.2\nfpdf2==2.4.6\njoblib==0.14.1\nmatplotlib\nnetworkx==2.5\nnumpy>=1.19\nPillow>=8.1.1\npyproj>=1.9.5.1\npytest==3.0.7\npython-dateutil>=2.7\npyyaml==5.4\nscipy>=1.10.0\nSphinx==4.2.0\nsix\nxmltodict==0.10.2\nwheel\nopencv-python==4.5.1.48 ; sys_platform == \"win32\"\nopencv-python ; sys_platform == \"linux\"\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.1455078125,
          "content": "[tool:pytest]\ntestpaths = opensfm\nnorecursedirs = opensfm/src\naddopts = --doctest-modules\n\n[flake8]\nignore = E402\n\n[metadata]\nlicense_file = LICENSE\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.890625,
          "content": "#!/usr/bin/env python3\n\nimport multiprocessing\nimport os\nimport subprocess\nimport sys\n\nimport setuptools\nfrom sphinx.setup_command import BuildDoc\nfrom wheel.bdist_wheel import bdist_wheel\n\nVERSION = (0, 5, 2)\n\n\ndef version_str(version):\n    return \".\".join(map(str, version))\n\n\nclass platform_bdist_wheel(bdist_wheel):\n    \"\"\"Patched bdist_well to make sure wheels include platform tag.\"\"\"\n\n    def finalize_options(self):\n        bdist_wheel.finalize_options(self)\n        self.root_is_pure = False\n\n\ndef configure_c_extension():\n    \"\"\"Configure cmake project to C extension.\"\"\"\n    print(\n        f\"Configuring for python {sys.version_info.major}.{sys.version_info.minor}...\"\n    )\n    os.makedirs(\"cmake_build\", exist_ok=True)\n    cmake_command = [\n        \"cmake\",\n        \"../opensfm/src\",\n        \"-DPYTHON_EXECUTABLE=\" + sys.executable,\n    ]\n    if sys.platform == \"win32\":\n        cmake_command += [\n            \"-DVCPKG_TARGET_TRIPLET=x64-windows\",\n            \"-DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake\",\n        ]\n    subprocess.check_call(cmake_command, cwd=\"cmake_build\")\n\n\ndef build_c_extension():\n    \"\"\"Compile C extension.\"\"\"\n    print(\"Compiling extension...\")\n    if sys.platform == \"win32\":\n        subprocess.check_call(\n            [\"cmake\", \"--build\", \".\", \"--config\", \"Release\"], cwd=\"cmake_build\"\n        )\n    else:\n        subprocess.check_call(\n            [\"make\", \"-j\" + str(multiprocessing.cpu_count())], cwd=\"cmake_build\"\n        )\n\n\nconfigure_c_extension()\nbuild_c_extension()\n\nsetuptools.setup(\n    name=\"opensfm\",\n    version=version_str(VERSION),\n    description=\"A Structure from Motion library\",\n    long_description=open(\"README.md\").read(),\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/mapillary/OpenSfM\",\n    project_urls={\n        \"Documentation\": \"https://docs.opensfm.org/\",\n    },\n    author=\"Mapillary\",\n    license=\"BSD\",\n    packages=setuptools.find_packages(),\n    scripts=[\n        \"bin/opensfm_run_all\",\n        \"bin/opensfm\",\n    ],\n    package_data={\n        \"opensfm\": [\n            \"pybundle.*\",\n            \"pygeo.*\",\n            \"pygeometry.*\",\n            \"pyrobust.*\",\n            \"pyfeatures.*\",\n            \"pydense.*\",\n            \"pysfm.*\",\n            \"pyfoundation.*\",\n            \"pymap.*\",\n            \"data/sensor_data.json\",\n            \"data/camera_calibration.yaml\",\n            \"data/bow/bow_hahog_root_uchar_10000.npz\",\n            \"data/bow/bow_hahog_root_uchar_64.npz\",\n        ]\n    },\n    cmdclass={\n        \"bdist_wheel\": platform_bdist_wheel,\n        \"build_doc\": BuildDoc,\n    },\n    command_options={\n        \"build_doc\": {\n            \"project\": (\"setup.py\", \"OpenSfM\"),\n            \"version\": (\"setup.py\", version_str(VERSION[:2])),\n            \"release\": (\"setup.py\", version_str(VERSION)),\n            \"source_dir\": (\"setup.py\", \"doc/source\"),\n            \"build_dir\": (\"setup.py\", \"build/doc\"),\n        }\n    },\n)\n"
        },
        {
          "name": "stubgen.sh",
          "type": "blob",
          "size": 0.2353515625,
          "content": "#!/bin/bash\n\nstubgen -o . -m opensfm.pybundle\nstubgen -o . -m opensfm.pyfeatures\nstubgen -o . -m opensfm.pymap\nstubgen -o . -m opensfm.pysfm\nstubgen -o . -m opensfm.pydense\nstubgen -o . -m opensfm.pygeometry\nstubgen -o . -m opensfm.pyrobust\n"
        },
        {
          "name": "viewer",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}