{
  "metadata": {
    "timestamp": 1736559885922,
    "page": 636,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bytedance/byteps",
      "stars": 3651,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0576171875,
          "content": "---\nBasedOnStyle: Google\n---\nLanguage: Cpp\nColumnLimit: 80\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.3212890625,
          "content": "# vscode\n.vscode\n*.gz\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nbin/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n# pycharm\n.idea\n\n# mac\n.DS_Store\n\n# for development\nscripts/\nexps/\n\n# dependency tarballs\nucx.tar.gz\nzeromq-4.1.4.tar.gz\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1142578125,
          "content": "[submodule \"3rdparty/ps-lite\"]\n\tpath = 3rdparty/ps-lite\n\turl = https://github.com/bytedance/ps-lite\n\tbranch = byteps\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.5361328125,
          "content": "dist: bionic\nlanguage: python\ncache: pip\njobs:\n  include:\n    - python: 2.7\n    - python: 3.7\nenv:\n  - CUDA=10.1.105-1 CUDA_APT=10-1 CUDA_SHORT=10.1 UBUNTU_VERSION=ubuntu1804\nbefore_install:\n  - CUDA_REPO=cuda-repo-${UBUNTU_VERSION}_${CUDA}_amd64.deb\n  - NCCL_REPO=nvidia-machine-learning-repo-${UBUNTU_VERSION}_1.0.0-1_amd64.deb\n  - wget http://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/${CUDA_REPO}\n  - sudo dpkg -i ${CUDA_REPO}\n  - sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/7fa2af80.pub\n  - wget http://developer.download.nvidia.com/compute/machine-learning/repos/${UBUNTU_VERSION}/x86_64/${NCCL_REPO}\n  - sudo dpkg -i ${NCCL_REPO}\n  - sudo apt update -qq\n  - sudo apt install -y cuda-10-1 libnccl2 libnccl-dev libnuma-dev\n  - sudo apt clean\n  - export CUDA_HOME=/usr/local/cuda-${CUDA_SHORT}\n  - export LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}\n  - export PATH=${CUDA_HOME}/bin:${PATH}\n  - pip install future mxnet-cu101 tensorflow-gpu torch torchvision\ninstall:\n  - export BYTEPS_CUDA_HOME=${CUDA_HOME}\n  - python setup.py install\n  - cd 3rdparty/ps-lite && make -j && cd -\nscript:\n  - export DMLC_NODE_HOST=127.0.0.1\n  - export PORT=8000\n  - 3rdparty/ps-lite/tests/local.sh 1 1 3rdparty/ps-lite/tests/test_benchmark 1024000 10 0\n  - export PORT=8001\n  - 3rdparty/ps-lite/tests/local.sh 2 2 3rdparty/ps-lite/tests/test_benchmark 1024000 10 0\n  - export PORT=8002\n  - 3rdparty/ps-lite/tests/local.sh 4 4 3rdparty/ps-lite/tests/test_benchmark 1024000 10 0\n"
        },
        {
          "name": "3rdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.rst",
          "type": "blob",
          "size": 1.1435546875,
          "content": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nChangelog for BytePS\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n0.2.4 (2020-06)\n------------------\n* Fix compatibility issue with tf2 + standalone keras\n* Add support for tensorflow.keras\n* Improve robustness of broadcast\n\n\n0.2.3 (2020-05)\n------------------\n* Add DistributedDataParallel module for PyTorch\n* Fix the problem of different CPU tensor using the same name\n* Add skip_synchronize api for PyTorch\n* Add the option for lazy/non-lazy init\n\n\n0.2.0 (2020-02)\n------------------\n* Largely improve RDMA performance by enforcing page aligned memory.\n* Add IPC support for RDMA. Now support colocating servers and workers without sacrificing much performance.\n* Fix a hanging bug in BytePS server.\n* Fix RDMA-related segmentation fault problem during fork() (e.g., used by PyTorch data loader).\n* New feature: Enable mixing use of colocate and non-colocate servers, along with a smart tensor allocation strategy.\n* New feature: Add ``bpslaunch`` as the command to launch tasks.\n* Add support for pip install: ``pip3 install byteps``\n\n\n0.1.0 (2019-12)\n------------------\n* First official release.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.546875,
          "content": "# Contribution guidelines\n\nFirst of all, thanks for taking the time to contribute!\n\nPlease refer to the following guidelines to contribute new functionality or bug fixes:\n\n1. Use [autopep8](https://github.com/hhatto/autopep8) to format the Python code.\n2. Use [clang-format](https://clang.llvm.org/docs/ClangFormat.html) to format C++ code. Changes to BytePS C++ code should conform to [Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html).\n3. Add unit tests for any new code you write.\n4. Run unit tests in both CI and GPU environments.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.146484375,
          "content": "BytePS\nCopyright 2019 Bytedance Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.47265625,
          "content": "include */* LICENSE byteps.lds byteps.exp\nrecursive-include * *.cc *.h\nprune .git\nprune dist\nprune bin\nprune __pycache__\nprune 3rdparty\ngraft 3rdparty/ps-lite\nprune 3rdparty/ps-lite/build\nprune 3rdparty/ps-lite/deps\nexclude 3rdparty/ps-lite/tests/test_benchmark\nexclude 3rdparty/ps-lite/tests/test_benchmark.d\nexclude 3rdparty/ps-lite/tests/test_ipc_benchmark\nexclude 3rdparty/ps-lite/tests/test_ipc_benchmark.d\n\ninclude pre_setup.py pre_setup_local.py zeromq-4.1.4.tar.gz ucx.tar.gz\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 1.658203125,
          "content": "BytePS includes derived work from the following:\n\nHorovod\nCopyright 2018 Uber Technologies, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nkennethreitz/setup.py\nCopyright 2019 Kenneth Reitz\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.0791015625,
          "content": "# BytePS\n\n[![Build Status](https://travis-ci.org/bytedance/byteps.svg?branch=master)](https://travis-ci.org/bytedance/byteps)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n![Pypi](https://img.shields.io/pypi/v/byteps.svg)\n\nBytePS is a high performance and general distributed training framework. It supports TensorFlow, Keras, PyTorch, and MXNet, and can run on either TCP or RDMA network.\n\nBytePS outperforms existing open-sourced distributed training frameworks by a large margin. For example, on BERT-large training, BytePS can achieve ~90% scaling efficiency with 256 GPUs (see below), which is much higher than [Horovod](https://github.com/horovod/horovod)+[NCCL](https://github.com/NVIDIA/nccl). In certain scenarios, BytePS can double the training speed compared with Horovod+NCCL.\n\n## News\n- [BytePS paper](https://www.usenix.org/conference/osdi20/presentation/jiang) has been accepted to OSDI'20. The code to reproduce the end-to-end evaluation is available [here](https://github.com/byteps/examples).\n- Support [gradient compression](https://github.com/bytedance/byteps/pull/225).\n- [v0.2.4](https://github.com/bytedance/byteps/tree/v0.2.4)\n    * Fix compatibility issue with tf2 + standalone keras\n    * Add support for tensorflow.keras\n    * Improve robustness of broadcast\n- [v0.2.3](https://github.com/bytedance/byteps/tree/v0.2.3)\n    * Add DistributedDataParallel module for PyTorch\n    * Fix the problem of different CPU tensor using the same name\n    * Add skip_synchronize api for PyTorch\n    * Add the option for lazy/non-lazy init\n- [v0.2.0](https://github.com/bytedance/byteps/tree/v0.2)\n    * Largely improve RDMA performance by enforcing page aligned memory.\n    * Add IPC support for RDMA. Now support colocating servers and workers without sacrificing much performance.\n    * Fix a hanging bug in BytePS server.\n    * Fix RDMA-related segmentation fault problem during fork() (e.g., used by PyTorch data loader).\n    * New feature: Enable mixing use of colocate and non-colocate servers, along with a smart tensor allocation strategy.\n    * New feature: Add ``bpslaunch`` as the command to launch tasks.\n    * Add support for pip install: ``pip3 install byteps``\n\n## Performance\n\nWe show our experiment on BERT-large training, which is based on GluonNLP toolkit. The model uses mixed precision.\n\nWe use Tesla V100 32GB GPUs and set batch size equal to 64 per GPU. Each machine has 8 V100 GPUs (32GB memory) with NVLink-enabled. Machines are inter-connected with 100 Gbps RDMA network. This is the same hardware setup you can get on [AWS](https://aws.amazon.com/about-aws/whats-new/2018/12/introducing-amazon-ec2-p3dn-instances-our-most-powerful-gpu-instance-yet/).\n\nBytePS achieves ~90% scaling efficiency for BERT-large with 256 GPUs. The code is available [here](https://github.com/ymjiang/gluon-nlp/tree/bert-byteps/scripts/bert). As a comparison, Horovod+NCCL has only ~70% scaling efficiency even after expert parameter tunning.\n\n![BERT-Large](https://user-images.githubusercontent.com/13852819/69874496-1ca43600-12f6-11ea-997b-b023e4c93360.png)\n\n\nWith slower network, BytePS offers even more performance advantages -- up to 2x of Horovod+NCCL. You can find more evaluation results at [performance.md](docs/performance.md).\n\n## Goodbye MPI, Hello Cloud\n\nHow can BytePS outperform Horovod by so much? One of the main reasons is that BytePS is designed for cloud and shared clusters, and throws away MPI.\n\nMPI was born in the HPC world and is good for a cluster built with homogeneous hardware and for running a single job. However, cloud (or in-house shared clusters) is different.\n\nThis leads us to rethink the best communication strategy, as explained in [here](docs/rationale.md). In short, BytePS only uses NCCL inside a machine, while re-implements the inter-machine communication.\n\nBytePS also incorporates many acceleration techniques such as hierarchical strategy, pipelining, tensor partitioning, NUMA-aware local communication, priority-based scheduling, etc.\n\n## Quick Start\n\nWe provide a [step-by-step tutorial](docs/step-by-step-tutorial.md) for you to run benchmark training tasks. The simplest way to start is to use our [docker images](docker). Refer to [Documentations](docs) for how to [launch distributed jobs](docs/running.md) and more [detailed configurations](docs/env.md). After you can start BytePS, read [best practice](docs/best-practice.md) to get the best performance.\n\nBelow, we explain how to install BytePS by yourself. There are two options.\n\n### Install by pip\n\n```\npip3 install byteps\n```\n\n### Build from source code\n\nYou can try out the latest features by directly installing from master branch:\n\n```\ngit clone --recursive https://github.com/bytedance/byteps\ncd byteps\npython3 setup.py install\n```\n\nNotes for above two options:\n- BytePS assumes that you have already installed one or more of the following frameworks: TensorFlow / PyTorch / MXNet.\n- BytePS depends on CUDA and NCCL. You should specify the NCCL path with `export BYTEPS_NCCL_HOME=/path/to/nccl`. By default it points to `/usr/local/nccl`.\n- The installation requires gcc>=4.9. If you are working on CentOS/Redhat and have gcc<4.9, you can try `yum install devtoolset-7` before everything else. In general, we recommend using gcc 4.9 for best compatibility ([how to pin gcc](https://github.com/bytedance/byteps/blob/3fba75def0d81c1d3225f8f397cc985200f57de7/docker/Dockerfile.mxnet#L72-L80)).\n- RDMA support: During setup, the script will automatically detect the RDMA header file. If you want to use RDMA, make sure your RDMA environment has been properly installed and tested before install ([install on Ubuntu-18.04](https://github.com/bytedance/byteps/blob/3fba75def0d81c1d3225f8f397cc985200f57de7/docker/Dockerfile.mxnet#L29-L33)).\n\n## Examples\n\nBasic examples are provided under the [example](example) folder. \n\nTo reproduce the end-to-end evaluation in our OSDI'20 paper, find the code at this [repo](https://github.com/byteps/examples).\n\n## Use BytePS in Your Code\n\nThough being totally different at its core, BytePS is highly compatible with Horovod interfaces (Thank you, Horovod community!). We chose Horovod interfaces in order to minimize your efforts for testing BytePS.\n\nIf your tasks only rely on Horovod's allreduce and broadcast, you should be able to switch to BytePS in 1 minute. Simply replace `import horovod.tensorflow as hvd` by `import byteps.tensorflow as bps`, and then replace all `hvd` in your code by `bps`. If your code invokes `hvd.allreduce` directly, you should also replace it by `bps.push_pull`.\n\nMany of our examples were copied from Horovod and modified in this way. For instance, compare the MNIST example for [BytePS](https://github.com/bytedance/byteps/blob/master/example/tensorflow/tensorflow_mnist.py) and [Horovod](https://github.com/horovod/horovod/blob/master/examples/tensorflow_mnist.py).\n\nBytePS also supports other native APIs, e.g., PyTorch Distributed Data Parallel and TensorFlow Mirrored Strategy. See [DistributedDataParallel.md](docs/DistributedDataParallel.md) and [MirroredStrategy.md](docs/MirroredStrategy.md) for usage.\n\n## Limitations and Future Plans\nBytePS does not support pure CPU training for now. One reason is that the [cheap PS assumption](docs/rationale.md) of BytePS do not hold for CPU training. Consequently, you need CUDA and NCCL to build and run BytePS.\n\nWe would like to have below features, and there is no fundamental difficulty to implement them in BytePS architecture. However, they are not implemented yet:\n* Sparse model training\n* Fault-tolerance\n* Straggler-mitigation\n\n## Publications\n\n1. [OSDI'20] \"[A Unified Architecture for Accelerating Distributed DNN Training in Heterogeneous GPU/CPU Clusters](https://www.usenix.org/conference/osdi20/presentation/jiang)\". Yimin Jiang, Yibo Zhu, Chang Lan, Bairen Yi, Yong Cui, Chuanxiong Guo. \n\n2. [SOSP'19] \"[A Generic Communication Scheduler for Distributed DNN Training Acceleration](https://i.cs.hku.hk/~cwu/papers/yhpeng-sosp19.pdf)\". Yanghua Peng, Yibo Zhu, Yangrui Chen, Yixin Bao, Bairen Yi, Chang Lan, Chuan Wu, Chuanxiong Guo. (Code is at [bytescheduler branch](https://github.com/bytedance/byteps/tree/bytescheduler/bytescheduler))\n"
        },
        {
          "name": "byteps.exp",
          "type": "blob",
          "size": 0.046875,
          "content": "*byteps*\n# PyTorch binding\n*PyInit*\n*initc_lib*\n"
        },
        {
          "name": "byteps.lds",
          "type": "blob",
          "size": 0.091796875,
          "content": "{\n  global:\n    *byteps*;\n    # PyTorch binding\n    *PyInit*;\n    *initc_lib*;\n  local: *;\n};\n"
        },
        {
          "name": "byteps",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "launcher",
          "type": "tree",
          "content": null
        },
        {
          "name": "pre_setup.py",
          "type": "blob",
          "size": 0.1748046875,
          "content": "# For internal use. Please do not modify this file.\n\ndef setup():\n    return\n\ndef extra_make_option():\n    return \"\"\n\n# absolute path to the ucx tar.gz file\nucx_tarball_path = \"\"\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 42.2060546875,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Note: To use the 'upload' functionality of this file, you must:\n#   $ pip install twine\n\nimport io\nimport os\nimport sys\nimport re\nimport shutil\nfrom shutil import rmtree\nimport textwrap\nimport shlex\nimport subprocess\n\nfrom setuptools import find_packages, setup, Command, Extension\nfrom setuptools.command.build_ext import build_ext\nfrom setuptools.command.sdist import sdist as sdist_orig\nfrom distutils.errors import CompileError, DistutilsError, DistutilsPlatformError, LinkError, DistutilsSetupError, DistutilsExecError\nfrom distutils import log as distutils_logger\nfrom distutils.version import LooseVersion\nimport traceback\n\nif os.path.isfile('./pre_setup_local.py'):\n    import pre_setup_local as pre_setup\nelse:\n    import pre_setup as pre_setup\n\nserver_lib = Extension('byteps.server.c_lib', [])\ntensorflow_lib = Extension('byteps.tensorflow.c_lib', [])\nmxnet_lib = Extension('byteps.mxnet.c_lib', [])\npytorch_lib = Extension('byteps.torch.c_lib', [])\n\n# Package meta-data.\nNAME = 'byteps'\nDESCRIPTION = 'A high-performance cross-framework Parameter Server for Deep Learning'\nURL = 'https://github.com/bytedance/byteps'\nEMAIL = 'lab-hr@bytedance.com'\nAUTHOR = 'Bytedance Inc.'\nREQUIRES_PYTHON = '>=2.7.0'\nVERSION = '0.2.5'\n\n# What packages are required for this module to be executed?\nREQUIRED = [\n    'cloudpickle',\n    # 'cffi>=1.4.0',\n]\n\n# What packages are optional?\nEXTRAS = {\n    # 'fancy feature': ['django'],\n}\n\n# The rest you shouldn't have to touch too much :)\n# ------------------------------------------------\n# Except, perhaps the License and Trove Classifiers!\n# If you do change the License, remember to change the Trove Classifier for that!\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Import the README and use it as the long-description.\n# Note: this will only work if 'README.md' is present in your MANIFEST.in file!\ntry:\n    with io.open(os.path.join(here, 'README.md'), encoding='utf-8') as f:\n        long_description = '\\n' + f.read()\nexcept OSError:\n    long_description = DESCRIPTION\n\n# Load the package's __version__.py module as a dictionary.\nabout = {}\nif not VERSION:\n    with open(os.path.join(here, NAME, '__version__.py')) as f:\n        exec(f.read(), about)\nelse:\n    about['__version__'] = VERSION\n\n\ndef is_build_action():\n    if len(sys.argv) <= 1:\n        return False\n\n    if sys.argv[1].startswith('build'):\n        return True\n\n    if sys.argv[1].startswith('bdist'):\n        return True\n\n    if sys.argv[1].startswith('install'):\n        return True\n\n\nclass UploadCommand(Command):\n    \"\"\"Support setup.py upload.\"\"\"\n\n    description = 'Build and publish the package.'\n    user_options = []\n\n    @staticmethod\n    def status(s):\n        \"\"\"Prints things in bold.\"\"\"\n        print('\\033[1m{0}\\033[0m'.format(s))\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        try:\n            self.status('Removing previous builds…')\n            rmtree(os.path.join(here, 'dist'))\n        except OSError:\n            pass\n\n        self.status('Building Source and Wheel (universal) distribution…')\n        os.system(\n            '{0} setup.py sdist bdist_wheel --universal'.format(sys.executable))\n\n        self.status('Uploading the package to PyPI via Twine…')\n        os.system('twine upload dist/*')\n\n        self.status('Pushing git tags…')\n        os.system('git tag v{0}'.format(about['__version__']))\n        os.system('git push --tags')\n\n        sys.exit()\n\n\n# Start to build c libs\n# ------------------------------------------------\ndef test_compile(build_ext, name, code, libraries=None, include_dirs=None, library_dirs=None,\n                 macros=None, extra_compile_preargs=None, extra_link_preargs=None):\n    test_compile_dir = os.path.join(build_ext.build_temp, 'test_compile')\n    if not os.path.exists(test_compile_dir):\n        os.makedirs(test_compile_dir)\n\n    source_file = os.path.join(test_compile_dir, '%s.cc' % name)\n    with open(source_file, 'w') as f:\n        f.write(code)\n\n    compiler = build_ext.compiler\n    [object_file] = compiler.object_filenames([source_file])\n    shared_object_file = compiler.shared_object_filename(\n        name, output_dir=test_compile_dir)\n\n    compiler.compile([source_file], extra_preargs=extra_compile_preargs,\n                     include_dirs=include_dirs, macros=macros)\n    compiler.link_shared_object(\n        [object_file], shared_object_file, libraries=libraries, library_dirs=library_dirs,\n        extra_preargs=extra_link_preargs)\n\n    return shared_object_file\n\n\ndef get_mpi_flags():\n    show_command = os.environ.get('BYTEPS_MPICXX_SHOW', 'mpicxx -show')\n    try:\n        mpi_show_output = subprocess.check_output(\n            shlex.split(show_command), universal_newlines=True).strip()\n        mpi_show_args = shlex.split(mpi_show_output)\n        if not mpi_show_args[0].startswith('-'):\n            # Open MPI and MPICH print compiler name as a first word, skip it\n            mpi_show_args = mpi_show_args[1:]\n        # strip off compiler call portion and always escape each arg\n        return ' '.join(['\"' + arg.replace('\"', '\"\\'\"\\'\"') + '\"'\n                         for arg in mpi_show_args])\n    except Exception:\n        raise DistutilsPlatformError(\n            '%s failed (see error below), is MPI in $PATH?\\n'\n            'Note: If your version of MPI has a custom command to show compilation flags, '\n            'please specify it with the BYTEPS_MPICXX_SHOW environment variable.\\n\\n'\n            '%s' % (show_command, traceback.format_exc()))\n\n\ndef get_cpp_flags(build_ext):\n    last_err = None\n    default_flags = ['-std=c++11', '-fPIC', '-Ofast', '-Wall', '-fopenmp', '-march=native', '-mno-avx512f']\n    flags_to_try = []\n    if sys.platform == 'darwin':\n        # Darwin most likely will have Clang, which has libc++.\n        flags_to_try = [default_flags + ['-stdlib=libc++'],\n                        default_flags]\n    else:\n        flags_to_try = [default_flags ,\n                        default_flags + ['-stdlib=libc++']]\n    for cpp_flags in flags_to_try:\n        try:\n            test_compile(build_ext, 'test_cpp_flags', extra_compile_preargs=cpp_flags,\n                         code=textwrap.dedent('''\\\n                    #include <unordered_map>\n                    void test() {\n                    }\n                    '''))\n\n            return cpp_flags\n        except (CompileError, LinkError):\n            last_err = 'Unable to determine C++ compilation flags (see error above).'\n        except Exception:\n            last_err = 'Unable to determine C++ compilation flags.  ' \\\n                       'Last error:\\n\\n%s' % traceback.format_exc()\n\n    raise DistutilsPlatformError(last_err)\n\n\ndef get_link_flags(build_ext):\n    last_err = None\n    libtool_flags = ['-Wl,-exported_symbols_list,byteps.exp']\n    ld_flags = ['-Wl,--version-script=byteps.lds', '-fopenmp']\n    flags_to_try = []\n    if sys.platform == 'darwin':\n        flags_to_try = [libtool_flags, ld_flags]\n    else:\n        flags_to_try = [ld_flags, libtool_flags]\n    for link_flags in flags_to_try:\n        try:\n            test_compile(build_ext, 'test_link_flags', extra_link_preargs=link_flags,\n                         code=textwrap.dedent('''\\\n                    void test() {\n                    }\n                    '''))\n\n            return link_flags\n        except (CompileError, LinkError):\n            last_err = 'Unable to determine C++ link flags (see error above).'\n        except Exception:\n            last_err = 'Unable to determine C++ link flags.  ' \\\n                       'Last error:\\n\\n%s' % traceback.format_exc()\n\n    raise DistutilsPlatformError(last_err)\n\ndef has_rdma_header():\n    ret_code = subprocess.call(\n        \"echo '#include <rdma/rdma_cma.h>' | cpp -H -o /dev/null 2>/dev/null\", shell=True)\n    if ret_code != 0:\n        import warnings\n        warnings.warn(\"\\n\\n No RDMA header file detected. Will disable RDMA for compilation! \\n\\n\")\n    return ret_code==0\n\ndef use_ucx():\n    byteps_with_ucx = int(os.environ.get('BYTEPS_WITH_UCX', 0))\n    return byteps_with_ucx\n\ndef with_pre_setup():\n    return int(os.environ.get('BYTEPS_WITHOUT_PRESETUP', 0)) == 0\n\ndef with_tensorflow():\n    return int(os.environ.get('BYTEPS_WITH_TENSORFLOW', 0))\n\ndef without_tensorflow():\n    return int(os.environ.get('BYTEPS_WITHOUT_TENSORFLOW', 0))\n\ndef with_pytorch():\n    return int(os.environ.get('BYTEPS_WITH_PYTORCH', 0))\n\ndef without_pytorch():\n    return int(os.environ.get('BYTEPS_WITHOUT_PYTORCH', 0))\n\ndef should_build_ucx():\n    has_prebuilt_ucx = os.environ.get('BYTEPS_UCX_HOME', '')\n    return use_ucx() and not has_prebuilt_ucx\n\nucx_default_home = '/usr/local'\ndef get_ucx_prefix():\n    \"\"\" specify where to install ucx \"\"\"\n    ucx_prefix = os.getenv('BYTEPS_UCX_PREFIX', ucx_default_home)\n    return ucx_prefix\n\ndef get_ucx_home():\n    \"\"\" pre-installed ucx path \"\"\"\n    if should_build_ucx():\n        return get_ucx_prefix()\n    return os.environ.get('BYTEPS_UCX_HOME', ucx_default_home)\n\ndef get_common_options(build_ext):\n    cpp_flags = get_cpp_flags(build_ext)\n    link_flags = get_link_flags(build_ext)\n\n    MACROS = [('EIGEN_MPL2_ONLY', 1)]\n    INCLUDES = ['3rdparty/ps-lite/include']\n    SOURCES = ['byteps/common/common.cc',\n               'byteps/common/operations.cc',\n               'byteps/common/core_loops.cc',\n               'byteps/common/global.cc',\n               'byteps/common/logging.cc',\n               'byteps/common/communicator.cc',\n               'byteps/common/scheduled_queue.cc',\n               'byteps/common/ready_table.cc',\n               'byteps/common/shared_memory.cc',\n               'byteps/common/nccl_manager.cc',\n               'byteps/common/cpu_reducer.cc'] + [\n               'byteps/common/compressor/compressor_registry.cc',\n               'byteps/common/compressor/error_feedback.cc',\n               'byteps/common/compressor/momentum.cc',\n               'byteps/common/compressor/impl/dithering.cc',\n               'byteps/common/compressor/impl/onebit.cc',\n               'byteps/common/compressor/impl/randomk.cc',\n               'byteps/common/compressor/impl/topk.cc',\n               'byteps/common/compressor/impl/vanilla_error_feedback.cc',\n               'byteps/common/compressor/impl/nesterov_momentum.cc']\n    if \"BYTEPS_USE_MPI\" in os.environ and os.environ[\"BYTEPS_USE_MPI\"] == \"1\":\n        mpi_flags = get_mpi_flags()\n        COMPILE_FLAGS = cpp_flags + \\\n            shlex.split(mpi_flags) + [\"-DBYTEPS_USE_MPI\"]\n        LINK_FLAGS = link_flags + shlex.split(mpi_flags)\n    else:\n        COMPILE_FLAGS = cpp_flags\n        LINK_FLAGS = link_flags\n\n    LIBRARY_DIRS = []\n    LIBRARIES = []\n\n    nccl_include_dirs, nccl_lib_dirs, nccl_libs = get_nccl_vals()\n    INCLUDES += nccl_include_dirs\n    LIBRARY_DIRS += nccl_lib_dirs\n    LIBRARIES += nccl_libs\n\n    # RDMA and NUMA libs\n    LIBRARIES += ['numa']\n\n    # auto-detect rdma\n    if has_rdma_header():\n        LIBRARIES += ['rdmacm', 'ibverbs', 'rt']\n    if use_ucx():\n        LIBRARIES += ['ucp', 'uct', 'ucs', 'ucm']\n        ucx_home = get_ucx_home()\n        if ucx_home:\n            INCLUDES += [f'{ucx_home}/include']\n            LIBRARY_DIRS += [f'{ucx_home}/lib']\n\n    # ps-lite\n    EXTRA_OBJECTS = ['3rdparty/ps-lite/build/libps.a',\n                     '3rdparty/ps-lite/deps/lib/libzmq.a']\n\n    return dict(MACROS=MACROS,\n                INCLUDES=INCLUDES,\n                SOURCES=SOURCES,\n                COMPILE_FLAGS=COMPILE_FLAGS,\n                LINK_FLAGS=LINK_FLAGS,\n                LIBRARY_DIRS=LIBRARY_DIRS,\n                LIBRARIES=LIBRARIES,\n                EXTRA_OBJECTS=EXTRA_OBJECTS)\n\n\ndef build_server(build_ext, options):\n    server_lib.define_macros = options['MACROS']\n    server_lib.include_dirs = options['INCLUDES']\n    server_lib.sources = ['byteps/server/server.cc',\n                          'byteps/common/cpu_reducer.cc',\n                          'byteps/common/logging.cc',\n                          'byteps/common/common.cc'] + [\n                          'byteps/common/compressor/compressor_registry.cc',\n                          'byteps/common/compressor/error_feedback.cc',\n                          'byteps/common/compressor/impl/dithering.cc',\n                          'byteps/common/compressor/impl/onebit.cc',\n                          'byteps/common/compressor/impl/randomk.cc',\n                          'byteps/common/compressor/impl/topk.cc',\n                          'byteps/common/compressor/impl/vanilla_error_feedback.cc']\n    server_lib.extra_compile_args = options['COMPILE_FLAGS'] + \\\n        ['-DBYTEPS_BUILDING_SERVER']\n    server_lib.extra_link_args = options['LINK_FLAGS']\n    server_lib.extra_objects = options['EXTRA_OBJECTS']\n    server_lib.library_dirs = options['LIBRARY_DIRS']\n\n    # auto-detect rdma\n    if has_rdma_header():\n        server_lib.libraries = ['rdmacm', 'ibverbs', 'rt']\n    else:\n        server_lib.libraries = []\n    if use_ucx():\n        server_lib.libraries += ['ucp', 'uct', 'ucs', 'ucm']\n        ucx_home = get_ucx_home()\n        if ucx_home:\n            server_lib.include_dirs += [f'{ucx_home}/include']\n            server_lib.library_dirs += [f'{ucx_home}/lib']\n\n    build_ext.build_extension(server_lib)\n\n\ndef check_tf_version():\n    try:\n        import tensorflow as tf\n        if LooseVersion(tf.__version__) < LooseVersion('1.1.0'):\n            raise DistutilsPlatformError(\n                'Your TensorFlow version %s is outdated.  '\n                'BytePS requires tensorflow>=1.1.0' % tf.__version__)\n    except ImportError:\n        raise DistutilsPlatformError(\n            'import tensorflow failed, is it installed?\\n\\n%s' % traceback.format_exc())\n    except AttributeError:\n        # This means that tf.__version__ was not exposed, which makes it *REALLY* old.\n        raise DistutilsPlatformError(\n            'Your TensorFlow version is outdated. BytePS requires tensorflow>=1.1.0')\n\n\ndef get_tf_include_dirs():\n    import tensorflow as tf\n    tf_inc = tf.sysconfig.get_include()\n    return [tf_inc, '%s/external/nsync/public' % tf_inc]\n\n\ndef get_tf_lib_dirs():\n    import tensorflow as tf\n    tf_lib = tf.sysconfig.get_lib()\n    return [tf_lib]\n\n\ndef get_tf_libs(build_ext, lib_dirs, cpp_flags):\n    last_err = None\n    for tf_libs in [['tensorflow_framework'], []]:\n        try:\n            lib_file = test_compile(build_ext, 'test_tensorflow_libs',\n                                    library_dirs=lib_dirs, libraries=tf_libs,\n                                    extra_compile_preargs=cpp_flags,\n                                    code=textwrap.dedent('''\\\n                    void test() {\n                    }\n                    '''))\n\n            from tensorflow.python.framework import load_library\n            load_library.load_op_library(lib_file)\n\n            return tf_libs\n        except (CompileError, LinkError):\n            last_err = 'Unable to determine -l link flags to use with TensorFlow (see error above).'\n        except Exception:\n            last_err = 'Unable to determine -l link flags to use with TensorFlow.  ' \\\n                       'Last error:\\n\\n%s' % traceback.format_exc()\n\n    raise DistutilsPlatformError(last_err)\n\n\ndef get_tf_abi(build_ext, include_dirs, lib_dirs, libs, cpp_flags):\n    last_err = None\n    cxx11_abi_macro = '_GLIBCXX_USE_CXX11_ABI'\n    for cxx11_abi in ['0', '1']:\n        try:\n            lib_file = test_compile(build_ext, 'test_tensorflow_abi',\n                                    macros=[(cxx11_abi_macro, cxx11_abi)],\n                                    include_dirs=include_dirs, library_dirs=lib_dirs,\n                                    libraries=libs, extra_compile_preargs=cpp_flags,\n                                    code=textwrap.dedent('''\\\n                #include <string>\n                #include \"tensorflow/core/framework/op.h\"\n                #include \"tensorflow/core/framework/op_kernel.h\"\n                #include \"tensorflow/core/framework/shape_inference.h\"\n                void test() {\n                    auto ignore = tensorflow::strings::StrCat(\"a\", \"b\");\n                }\n                '''))\n\n            from tensorflow.python.framework import load_library\n            load_library.load_op_library(lib_file)\n\n            return cxx11_abi_macro, cxx11_abi\n        except (CompileError, LinkError):\n            last_err = 'Unable to determine CXX11 ABI to use with TensorFlow (see error above).'\n        except Exception:\n            last_err = 'Unable to determine CXX11 ABI to use with TensorFlow.  ' \\\n                       'Last error:\\n\\n%s' % traceback.format_exc()\n\n    raise DistutilsPlatformError(last_err)\n\n\ndef get_tf_flags(build_ext, cpp_flags):\n    import tensorflow as tf\n    try:\n        return tf.sysconfig.get_compile_flags(), tf.sysconfig.get_link_flags()\n    except AttributeError:\n        # fallback to the previous logic\n        tf_include_dirs = get_tf_include_dirs()\n        tf_lib_dirs = get_tf_lib_dirs()\n        tf_libs = get_tf_libs(build_ext, tf_lib_dirs, cpp_flags)\n        tf_abi = get_tf_abi(build_ext, tf_include_dirs,\n                            tf_lib_dirs, tf_libs, cpp_flags)\n\n        compile_flags = []\n        for include_dir in tf_include_dirs:\n            compile_flags.append('-I%s' % include_dir)\n        if tf_abi:\n            compile_flags.append('-D%s=%s' % tf_abi)\n\n        link_flags = []\n        for lib_dir in tf_lib_dirs:\n            link_flags.append('-L%s' % lib_dir)\n        for lib in tf_libs:\n            link_flags.append('-l%s' % lib)\n\n        return compile_flags, link_flags\n\n\ndef build_tf_extension(build_ext, options):\n    check_tf_version()\n    tf_compile_flags, tf_link_flags = get_tf_flags(\n        build_ext, options['COMPILE_FLAGS'])\n\n    # We assume we have CUDA\n    cuda_include_dirs, cuda_lib_dirs = get_cuda_dirs(\n        build_ext, options['COMPILE_FLAGS'])\n    options['MACROS'] += [('HAVE_CUDA', '1')]\n    options['INCLUDES'] += cuda_include_dirs\n    options['LIBRARY_DIRS'] += cuda_lib_dirs\n    options['LIBRARIES'] += ['cudart']\n\n    tensorflow_lib.define_macros = options['MACROS']\n    tensorflow_lib.include_dirs = options['INCLUDES']\n    tensorflow_lib.sources = options['SOURCES'] + \\\n        ['byteps/tensorflow/ops.cc']\n    tensorflow_lib.extra_compile_args = options['COMPILE_FLAGS'] + \\\n        tf_compile_flags\n    tensorflow_lib.extra_link_args = options['LINK_FLAGS'] + tf_link_flags\n    tensorflow_lib.library_dirs = options['LIBRARY_DIRS']\n    tensorflow_lib.libraries = options['LIBRARIES']\n    tensorflow_lib.extra_objects = options['EXTRA_OBJECTS']\n\n    build_ext.build_extension(tensorflow_lib)\n\n\ndef check_mx_version():\n    try:\n        import mxnet as mx\n        if mx.__version__ < '1.4.0':\n            raise DistutilsPlatformError(\n                'Your MXNet version %s is outdated.  '\n                'BytePS requires mxnet>=1.4.0' % mx.__version__)\n    except ImportError:\n        raise DistutilsPlatformError(\n            'import mxnet failed, is it installed?\\n\\n%s' % traceback.format_exc())\n    except AttributeError:\n        raise DistutilsPlatformError(\n            'Your MXNet version is outdated. BytePS requires mxnet>=1.4.0')\n\n\ndef get_mx_include_dirs():\n    try:\n        import mxnet as mx\n        path = mx.libinfo.find_include_path()\n        return path\n    except:\n        # Try to find the path automatically\n        tmp_mxnet_dir = os.getenv(\n            \"BYTEPS_SERVER_MXNET_PATH\", \"/root/mxnet15-rdma\")\n        MXNET_ROOT = os.getenv(\"MXNET_SOURCE_ROOT\", tmp_mxnet_dir)\n        return os.path.join(MXNET_ROOT, 'include/')\n\n\ndef get_mx_lib_dirs():\n    import mxnet as mx\n    mx_libs = mx.libinfo.find_lib_path()\n    mx_lib_dirs = [os.path.dirname(mx_lib) for mx_lib in mx_libs]\n    return mx_lib_dirs\n\n\ndef get_mx_libs(build_ext, lib_dirs, cpp_flags):\n    last_err = None\n    cpp_flags.append('-DDMLC_USE_RDMA')\n    for mx_libs in [['mxnet'], []]:\n        try:\n            lib_file = test_compile(build_ext, 'test_mx_libs',\n                                    library_dirs=lib_dirs, libraries=mx_libs,\n                                    extra_compile_preargs=cpp_flags,\n                                    code=textwrap.dedent('''\\\n                    void test() {\n                    }\n                    '''))\n            return mx_libs\n        except (CompileError, LinkError):\n            last_err = 'Unable to determine -l link flags to use with MXNet (see error above).'\n        except Exception:\n            last_err = 'Unable to determine -l link flags to use with MXNet.  ' \\\n                       'Last error:\\n\\n%s' % traceback.format_exc()\n\n    raise DistutilsPlatformError(last_err)\n\n\ndef get_mx_flags(build_ext, cpp_flags):\n    mx_include_dirs = [get_mx_include_dirs()]\n    mx_lib_dirs = get_mx_lib_dirs()\n    mx_libs = get_mx_libs(build_ext, mx_lib_dirs, cpp_flags)\n\n    compile_flags = []\n    has_mkldnn = is_mx_mkldnn()\n    for include_dir in mx_include_dirs:\n        compile_flags.append('-I%s' % include_dir)\n        if has_mkldnn:\n            mkldnn_include = os.path.join(include_dir, 'mkldnn')\n            compile_flags.append('-I%s' % mkldnn_include)\n\n    link_flags = []\n    for lib_dir in mx_lib_dirs:\n        link_flags.append('-Wl,-rpath,%s' % lib_dir)\n        link_flags.append('-L%s' % lib_dir)\n\n    for lib in mx_libs:\n        link_flags.append('-l%s' % lib)\n\n    return compile_flags, link_flags\n\n\ndef check_macro(macros, key):\n    return any(k == key and v for k, v in macros)\n\n\ndef set_macro(macros, key, new_value):\n    if any(k == key for k, _ in macros):\n        return [(k, new_value if k == key else v) for k, v in macros]\n    else:\n        return macros + [(key, new_value)]\n\n\ndef is_mx_cuda():\n    try:\n        from mxnet import runtime\n        features = runtime.Features()\n        return features.is_enabled('CUDA')\n    except Exception:\n        if 'linux' in sys.platform:\n            try:\n                import mxnet as mx\n                mx_libs = mx.libinfo.find_lib_path()\n                for mx_lib in mx_libs:\n                    output = subprocess.check_output(['readelf', '-d', mx_lib])\n                    if 'cuda' in str(output):\n                        return True\n                return False\n            except Exception:\n                return False\n    return False\n\n\ndef get_cuda_dirs(build_ext, cpp_flags):\n    cuda_include_dirs = []\n    cuda_lib_dirs = []\n\n    cuda_home = os.environ.get('BYTEPS_CUDA_HOME')\n    if cuda_home:\n        cuda_include_dirs += ['%s/include' % cuda_home]\n        cuda_lib_dirs += ['%s/lib' % cuda_home, '%s/lib64' % cuda_home]\n\n    cuda_include = os.environ.get('BYTEPS_CUDA_INCLUDE')\n    if cuda_include:\n        cuda_include_dirs += [cuda_include]\n\n    cuda_lib = os.environ.get('BYTEPS_CUDA_LIB')\n    if cuda_lib:\n        cuda_lib_dirs += [cuda_lib]\n\n    if not cuda_include_dirs and not cuda_lib_dirs:\n        # default to /usr/local/cuda\n        cuda_include_dirs += ['/usr/local/cuda/include']\n        cuda_lib_dirs += ['/usr/local/cuda/lib', '/usr/local/cuda/lib64']\n\n    try:\n        test_compile(build_ext, 'test_cuda', libraries=['cudart'], include_dirs=cuda_include_dirs,\n                     library_dirs=cuda_lib_dirs, extra_compile_preargs=cpp_flags,\n                     code=textwrap.dedent('''\\\n            #include <cuda_runtime.h>\n            void test() {\n                cudaSetDevice(0);\n            }\n            '''))\n    except (CompileError, LinkError):\n        raise DistutilsPlatformError(\n            'CUDA library was not found (see error above).\\n'\n            'Please specify correct CUDA location with the BYTEPS_CUDA_HOME '\n            'environment variable or combination of BYTEPS_CUDA_INCLUDE and '\n            'BYTEPS_CUDA_LIB environment variables.\\n\\n'\n            'BYTEPS_CUDA_HOME - path where CUDA include and lib directories can be found\\n'\n            'BYTEPS_CUDA_INCLUDE - path to CUDA include directory\\n'\n            'BYTEPS_CUDA_LIB - path to CUDA lib directory')\n\n    return cuda_include_dirs, cuda_lib_dirs\n\n\ndef get_nccl_vals():\n    nccl_include_dirs = []\n    nccl_lib_dirs = []\n    nccl_libs = []\n\n    nccl_home = os.environ.get('BYTEPS_NCCL_HOME', '/usr/local/nccl')\n    if nccl_home:\n        nccl_include_dirs += ['%s/include' % nccl_home]\n        nccl_lib_dirs += ['%s/lib' % nccl_home, '%s/lib64' % nccl_home]\n\n    nccl_link_mode = os.environ.get('BYTEPS_NCCL_LINK', 'SHARED')\n    if nccl_link_mode.upper() == 'SHARED':\n        nccl_libs += ['nccl']\n    else:\n        nccl_libs += ['nccl_static']\n\n    return nccl_include_dirs, nccl_lib_dirs, nccl_libs\n\ndef is_mx_mkldnn():\n    try:\n        from mxnet import runtime\n        features = runtime.Features()\n        return features.is_enabled('MKLDNN')\n    except Exception:\n        msg = 'INFO: Cannot detect if MKLDNN is enabled in MXNet. Please \\\n            set MXNET_USE_MKLDNN=1 if MKLDNN is enabled in your MXNet build.'\n        if 'linux' not in sys.platform:\n            # MKLDNN is only enabled by default in MXNet Linux build. Return \n            # False by default for non-linux build but still allow users to \n            # enable it by using MXNET_USE_MKLDNN env variable. \n            print(msg)\n            return os.environ.get('MXNET_USE_MKLDNN', '0') == '1'\n        else:\n            try:\n                import mxnet as mx\n                mx_libs = mx.libinfo.find_lib_path()\n                for mx_lib in mx_libs:\n                    output = subprocess.check_output(['readelf', '-d', mx_lib])\n                    if 'mkldnn' in str(output):\n                        return True\n                return False\n            except Exception:\n                print(msg)\n                return os.environ.get('MXNET_USE_MKLDNN', '0') == '1'\n\n\ndef build_mx_extension(build_ext, options):\n    # clear ROLE -- installation does not need this\n    os.environ.pop(\"DMLC_ROLE\", None)\n\n    check_mx_version()\n    mx_compile_flags, mx_link_flags = get_mx_flags(\n        build_ext, options['COMPILE_FLAGS'])\n\n    mx_have_cuda = is_mx_cuda()\n    macro_have_cuda = check_macro(options['MACROS'], 'HAVE_CUDA')\n    if not mx_have_cuda and macro_have_cuda:\n        raise DistutilsPlatformError(\n            'BytePS build with GPU support was requested, but this MXNet '\n            'installation does not support CUDA.')\n\n    # Update HAVE_CUDA to mean that MXNet supports CUDA.\n    if mx_have_cuda and not macro_have_cuda:\n        cuda_include_dirs, cuda_lib_dirs = get_cuda_dirs(\n            build_ext, options['COMPILE_FLAGS'])\n        options['MACROS'] += [('HAVE_CUDA', '1')]\n        options['INCLUDES'] += cuda_include_dirs\n        options['LIBRARY_DIRS'] += cuda_lib_dirs\n        options['LIBRARIES'] += ['cudart']\n\n    mxnet_lib.define_macros = options['MACROS']\n    if check_macro(options['MACROS'], 'HAVE_CUDA'):\n        mxnet_lib.define_macros += [('MSHADOW_USE_CUDA', '1')]\n    else:\n        mxnet_lib.define_macros += [('MSHADOW_USE_CUDA', '0')]\n    if is_mx_mkldnn():\n        mxnet_lib.define_macros += [('MXNET_USE_MKLDNN', '1')]\n    else:\n        mxnet_lib.define_macros += [('MXNET_USE_MKLDNN', '0')]  \n    mxnet_lib.define_macros += [('MSHADOW_USE_MKL', '0')]\n\n    # use MXNet's DMLC headers first instead of ps-lite's\n    options['INCLUDES'].insert(0, get_mx_include_dirs())\n    mxnet_lib.include_dirs = options['INCLUDES']\n    mxnet_lib.sources = options['SOURCES'] + \\\n        ['byteps/mxnet/ops.cc',\n         'byteps/mxnet/ready_event.cc',\n         'byteps/mxnet/tensor_util.cc',\n         'byteps/mxnet/cuda_util.cc',\n         'byteps/mxnet/adapter.cc']\n    mxnet_lib.extra_compile_args = options['COMPILE_FLAGS'] + \\\n        mx_compile_flags\n    mxnet_lib.extra_link_args = options['LINK_FLAGS'] + mx_link_flags\n    mxnet_lib.extra_objects = options['EXTRA_OBJECTS']\n    mxnet_lib.library_dirs = options['LIBRARY_DIRS']\n    mxnet_lib.libraries = options['LIBRARIES']\n\n    build_ext.build_extension(mxnet_lib)\n\n\ndef dummy_import_torch():\n    try:\n        import torch\n    except:\n        pass\n\n\ndef parse_version(version_str):\n    if \"dev\" in version_str:\n        return 9999999999\n    m = re.match('^(\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))?(?:\\.(\\d+))?', version_str)\n    if m is None:\n        return None\n\n    # turn version string to long integer\n    version = int(m.group(1)) * 10 ** 9\n    if m.group(2) is not None:\n        version += int(m.group(2)) * 10 ** 6\n    if m.group(3) is not None:\n        version += int(m.group(3)) * 10 ** 3\n    if m.group(4) is not None:\n        version += int(m.group(4))\n    return version\n\n\ndef check_torch_version():\n    try:\n        import torch\n        if torch.__version__ < '1.0.1':\n            raise DistutilsPlatformError(\n                'Your torch version %s is outdated.  '\n                'BytePS requires torch>=1.0.1' % torch.__version__)\n    except ImportError:\n            print('import torch failed, is it installed?\\n\\n%s' %\n                  traceback.format_exc())\n\n    # parse version\n    version = parse_version(torch.__version__)\n    if version is None:\n        raise DistutilsPlatformError(\n            'Unable to determine PyTorch version from the version string \\'%s\\'' % torch.__version__)\n    return version\n\n\ndef is_torch_cuda(build_ext, include_dirs, extra_compile_args):\n    try:\n        from torch.utils.cpp_extension import include_paths\n        test_compile(build_ext, 'test_torch_cuda', include_dirs=include_dirs + include_paths(cuda=True),\n                     extra_compile_preargs=extra_compile_args, code=textwrap.dedent('''\\\n            #include <THC/THC.h>\n            void test() {\n            }\n            '''))\n        return True\n    except (CompileError, LinkError, EnvironmentError):\n        print('INFO: Above error indicates that this PyTorch installation does not support CUDA.')\n        return False\n\n\ndef build_torch_extension(build_ext, options, torch_version):\n    pytorch_compile_flags = [\"-std=c++14\" if flag == \"-std=c++11\" \n                             else flag for flag in options['COMPILE_FLAGS']]\n    have_cuda = is_torch_cuda(build_ext, include_dirs=options['INCLUDES'],\n                              extra_compile_args=pytorch_compile_flags)\n    if not have_cuda and check_macro(options['MACROS'], 'HAVE_CUDA'):\n        raise DistutilsPlatformError(\n            'byteps build with GPU support was requested, but this PyTorch '\n            'installation does not support CUDA.')\n\n    # Update HAVE_CUDA to mean that PyTorch supports CUDA.\n    updated_macros = set_macro(\n        options['MACROS'], 'HAVE_CUDA', str(int(have_cuda)))\n\n    # Export TORCH_VERSION equal to our representation of torch.__version__. Internally it's\n    # used for backwards compatibility checks.\n    updated_macros = set_macro(\n       updated_macros, 'TORCH_VERSION', str(torch_version))\n\n    # Always set _GLIBCXX_USE_CXX11_ABI, since PyTorch can only detect whether it was set to 1.\n    import torch\n    updated_macros = set_macro(updated_macros, '_GLIBCXX_USE_CXX11_ABI',\n                               str(int(torch.compiled_with_cxx11_abi())))\n\n    # PyTorch requires -DTORCH_API_INCLUDE_EXTENSION_H\n    updated_macros = set_macro(\n        updated_macros, 'TORCH_API_INCLUDE_EXTENSION_H', '1')\n\n    if have_cuda:\n        from torch.utils.cpp_extension import CUDAExtension as TorchExtension\n    else:\n        # CUDAExtension fails with `ld: library not found for -lcudart` if CUDA is not present\n        from torch.utils.cpp_extension import CppExtension as TorchExtension\n\n    ext = TorchExtension(pytorch_lib.name,\n                         define_macros=updated_macros,\n                         include_dirs=options['INCLUDES'],\n                         sources=options['SOURCES'] + ['byteps/torch/ops.cc',\n                                                       'byteps/torch/ready_event.cc',\n                                                       'byteps/torch/cuda_util.cc',\n                                                       'byteps/torch/adapter.cc',\n                                                       'byteps/torch/handle_manager.cc'],\n                         extra_compile_args=pytorch_compile_flags,\n                         extra_link_args=options['LINK_FLAGS'],\n                         extra_objects=options['EXTRA_OBJECTS'],\n                         library_dirs=options['LIBRARY_DIRS'],\n                         libraries=options['LIBRARIES'])\n\n    # Patch an existing pytorch_lib extension object.\n    for k, v in ext.__dict__.items():\n        pytorch_lib.__dict__[k] = v\n    build_ext.build_extension(pytorch_lib)\n\ndef build_ucx():\n    ucx_tarball_path = os.getenv(\"BYTEPS_UCX_TARBALL_PATH\", \"\")\n    if not ucx_tarball_path and with_pre_setup() \\\n       and hasattr(pre_setup, 'ucx_tarball_path'):\n        ucx_tarball_path = pre_setup.ucx_tarball_path.strip()\n\n    if not ucx_tarball_path:\n        if os.path.exists(\"./ucx.tar.gz\"):\n            ucx_tarball_path = os.path.join(here, './ucx.tar.gz')\n\n    if not ucx_tarball_path:\n        cmd = \"curl -kL {} -o ucx.tar.gz\".format(\"https://github.com/openucx/ucx/archive/refs/tags/v1.11.0.tar.gz\")\n        subprocess.run(cmd, shell=True)\n        ucx_tarball_path = os.path.join(here, './ucx.tar.gz')\n\n    print(\"ucx_tarball_path is\", ucx_tarball_path)\n    ucx_prefix = get_ucx_prefix()\n    sudo_str = \"\" if os.access(ucx_prefix, os.W_OK) else \"sudo\"\n    cmd = \"mkdir -p tmp; tar xzf {} -C tmp; \".format(ucx_tarball_path) + \\\n          \"rm -rf ucx-build; mkdir -p ucx-build; mv tmp/ucx-*/* ucx-build/; \" + \\\n          \"cd ucx-build; pwd; which libtoolize; \" + \\\n          \"./autogen.sh; ./autogen.sh && \" + \\\n          \"./contrib/configure-release --enable-mt --prefix={0} && make -j && {1} make install -j\".format(ucx_prefix, sudo_str)\n    make_process = subprocess.Popen(cmd,\n                                    cwd='3rdparty',\n                                    stdout=sys.stdout,\n                                    stderr=sys.stderr,\n                                    shell=True)\n    make_process.communicate()\n    if make_process.returncode:\n        raise DistutilsSetupError('An ERROR occured while running the '\n                                  'Makefile for the ucx library. '\n                                  'Exit code: {0}'.format(make_process.returncode))\n\n# run the customize_compiler\nclass custom_build_ext(build_ext):\n    def build_extensions(self):\n        if with_pre_setup():\n            pre_setup.setup()\n\n        ucx_home = get_ucx_home()\n        ucx_prefix = get_ucx_prefix()\n        make_option = \"\"\n        # To resolve tf-gcc incompatibility\n        has_cxx_flag = False\n        glibcxx_flag = False\n        if not without_tensorflow():\n            try:\n                import tensorflow as tf\n                make_option += 'ADD_CFLAGS=\"'\n                for flag in tf.sysconfig.get_compile_flags():\n                    if 'D_GLIBCXX_USE_CXX11_ABI' in flag:\n                        has_cxx_flag = True\n                        glibcxx_flag = False if (flag[-1]=='0') else True\n                        make_option += flag + ' '\n                        break\n                make_option += '\" '\n            except:\n                pass\n\n        # To resolve torch-gcc incompatibility\n        if not without_pytorch():\n            try:\n                import torch\n                torch_flag = torch.compiled_with_cxx11_abi()\n                if has_cxx_flag:\n                    if glibcxx_flag != torch_flag:\n                        raise DistutilsError(\n                            '-D_GLIBCXX_USE_CXX11_ABI is not consistent between TensorFlow and PyTorch, '\n                            'consider install them separately.')\n                    else:\n                        pass\n                else:\n                    make_option += 'ADD_CFLAGS=-D_GLIBCXX_USE_CXX11_ABI=' + \\\n                                    str(int(torch_flag)) + ' '\n                    has_cxx_flag = True\n                    glibcxx_flag = torch_flag\n            except:\n                pass\n\n        if not os.path.exists(\"3rdparty/ps-lite/build/libps.a\") or \\\n           not os.path.exists(\"3rdparty/ps-lite/deps/lib\"):\n            print(\"should_build_ucx is\", should_build_ucx())\n            if should_build_ucx():\n                build_ucx()\n\n            if os.environ.get('CI', 'false') == 'false':\n                make_option += \"-j \"\n            if has_rdma_header():\n                make_option += \"USE_RDMA=1 \"\n            if use_ucx():\n                make_option += 'USE_UCX=1 '\n                if ucx_home:\n                    make_option += f'UCX_PATH={ucx_home} '\n\n            if with_pre_setup():\n                make_option += pre_setup.extra_make_option()\n\n            if os.path.exists(\"./zeromq-4.1.4.tar.gz\"):\n                zmq_tarball_path = os.path.join(here, './zeromq-4.1.4.tar.gz')\n                make_option += \" WGET='curl -O '  ZMQ_URL=file://\" + zmq_tarball_path + \" \"\n\n            make_process = subprocess.Popen('make ' + make_option,\n                                            cwd='3rdparty/ps-lite',\n                                            stdout=sys.stdout,\n                                            stderr=sys.stderr,\n                                            shell=True)\n            make_process.communicate()\n            if make_process.returncode:\n                raise DistutilsSetupError('An ERROR occured while running the '\n                                          'Makefile for the ps-lite library. '\n                                          'Exit code: {0}'.format(make_process.returncode))\n\n        options = get_common_options(self)\n        if has_cxx_flag:\n            options['COMPILE_FLAGS'] += ['-D_GLIBCXX_USE_CXX11_ABI=' + str(int(glibcxx_flag))]\n\n        built_plugins = []\n        try:\n            build_server(self, options)\n        except:\n            raise DistutilsSetupError('An ERROR occured while building the server module.\\n\\n'\n                                      '%s' % traceback.format_exc())\n\n        # If PyTorch is installed, it must be imported before others, otherwise\n        # we may get an error: dlopen: cannot load any more object with static TLS\n        if not without_pytorch():\n            dummy_import_torch()\n\n        if not without_tensorflow():\n            try:\n                build_tf_extension(self, options)\n                built_plugins.append(True)\n                print('INFO: Tensorflow extension is built successfully.')\n            except:\n                if not with_tensorflow():\n                    print('INFO: Unable to build TensorFlow plugin, will skip it.\\n\\n'\n                          '%s' % traceback.format_exc())\n                    built_plugins.append(False)\n                else:\n                    raise\n        if not without_pytorch():\n            try:\n                torch_version = check_torch_version()\n                build_torch_extension(self, options, torch_version)\n                built_plugins.append(True)\n                print('INFO: PyTorch extension is built successfully.')\n            except:\n                if not with_pytorch():\n                    print('INFO: Unable to build PyTorch plugin, will skip it.\\n\\n'\n                          '%s' % traceback.format_exc())\n                    built_plugins.append(False)\n                else:\n                    raise\n        if not int(os.environ.get('BYTEPS_WITHOUT_MXNET', 0)):\n            # fix \"libcuda.so.1 not found\" issue\n            cuda_home = os.environ.get('BYTEPS_CUDA_HOME', '/usr/local/cuda')\n            cuda_stub_path = cuda_home + '/lib64/stubs'\n            ln_command = \"cd \" + cuda_stub_path + \"; ln -sf libcuda.so libcuda.so.1\"\n            os.system(ln_command)\n            try:\n                build_mx_extension(self, options)\n                built_plugins.append(True)\n                print('INFO: MXNet extension is built successfully.')\n            except:\n                if not int(os.environ.get('BYTEPS_WITH_MXNET', 0)):\n                    print('INFO: Unable to build MXNet plugin, will skip it.\\n\\n'\n                          '%s' % traceback.format_exc())\n                    built_plugins.append(False)\n                else:\n                    raise\n            finally:\n                os.system(\"rm -rf \" + cuda_stub_path + \"/libcuda.so.1\")\n\n        if not built_plugins:\n            print('INFO: Only server module is built.')\n            return\n\n        if not any(built_plugins):\n            raise DistutilsError(\n                'None of TensorFlow, MXNet, PyTorch plugins were built. See errors above.')\n\n\n# Where the magic happens:\nif not os.path.exists('3rdparty/ps-lite/src'):\n    msg = \"Missing ./3rdparty/ps-lite, ps-lite is required to build BytePS.\"\n    raise ValueError(msg)\n\nif os.path.exists('launcher/launch.py'):\n    if not os.path.exists('bin'):\n        os.mkdir('bin')\n    shutil.copyfile('launcher/launch.py', 'bin/bpslaunch')\n\nextensions_to_build = [server_lib, tensorflow_lib, mxnet_lib, pytorch_lib]\nif int(os.environ.get('BYTEPS_WITHOUT_MXNET', 0)):\n    extensions_to_build.remove(mxnet_lib)\n\nif without_tensorflow():\n    extensions_to_build.remove(tensorflow_lib)\n\nif without_pytorch():\n    extensions_to_build.remove(pytorch_lib)\n\nclass sdist(sdist_orig):\n    def run(self):\n        try:\n            if not os.path.isfile(\"./ucx.tar.gz\"):\n                self.spawn(['curl', '-kL', 'https://github.com/openucx/ucx/archive/refs/tags/v1.11.0.tar.gz', '-o', 'ucx.tar.gz'])\n            if not os.path.isfile(\"./zeromq-4.1.4.tar.gz\"):\n                self.spawn(['curl', '-kL', '-O', 'https://github.com/zeromq/zeromq4-1/releases/download/v4.1.4/zeromq-4.1.4.tar.gz'])\n        except DistutilsExecError:\n            self.warn('failed to download required tarballs')\n        super().run()\n\nsetup(\n    name=NAME,\n    version=about['__version__'],\n    description=DESCRIPTION,\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    author=AUTHOR,\n    author_email=EMAIL,\n    python_requires=REQUIRES_PYTHON,\n    url=URL,\n    packages=find_packages(exclude=('tests',)),\n    install_requires=REQUIRED,\n    extras_require=EXTRAS,\n    include_package_data=True,\n    license='Apache',\n    classifiers=[\n        # Trove classifiers\n        # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Operating System :: POSIX :: Linux'\n    ],\n    ext_modules=extensions_to_build,\n    # $ setup.py publish support.\n    cmdclass={\n        'upload': UploadCommand,\n        'build_ext': custom_build_ext,\n        'sdist': sdist\n    },\n    # cffi is required for PyTorch\n    # If cffi is specified in setup_requires, it will need libffi to be installed on the machine,\n    # which is undesirable.  Luckily, `install` action will install cffi before executing build,\n    # so it's only necessary for `build*` or `bdist*` actions.\n    setup_requires=[],\n    scripts=['bin/bpslaunch']\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}