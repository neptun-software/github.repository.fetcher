{
  "metadata": {
    "timestamp": 1736560376272,
    "page": 917,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nyaadevs/nyaa",
      "stars": 3291,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".docker",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.48046875,
          "content": "#\n# Makes sure all files detected as text have LF as the EOL character,\n# and leaves all files detected as binary untouched.\n#\n\n* text=auto eol=lf\n\n#\n# Text files\n#\n\n# Example\n# *.ext\t\t\ttext\n\n#\n# Binary files (binary is a macro for -text -diff)\n#\n\n# Minified web files\n*.min.css\t\tbinary\n*.min.js\t\tbinary\n\n# Images\n*.png\t\t\tbinary\n*.jpg\t\t\tbinary\n*.jpeg\t\t\tbinary\n*.gif\t\t\tbinary\n*.ico\t\t\tbinary\n\n# Fonts\n*.svg\t\t\tbinary\n*.ttf\t\t\tbinary\n*.woff\t\t\tbinary\n*.woff2\t\t\tbinary\n*.eot\t\t\tbinary\n*.otf\t\t\tbinary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3505859375,
          "content": "# Cache\n__pycache__\n/nyaa/static/.webassets-cache\n\n# Virtual Environments\n/venv\n\n# Coverage\n.coverage\n/htmlcov\n\n# Editors\n/.vscode\n\n# Databases\n*.sql\n/test.db\n\n# Webserver\n/uwsgi.sock\n\n# Application\n/install/*\n/config.py\n/es_sync_config.json\n/test_torrent_batch\n\n# Build Output\nnyaa/static/js/bootstrap-select.min.js\nnyaa/static/js/main.min.js\n\n# Other\n*.swp\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.546875,
          "content": "language: python\n\npython: \"3.7\"\n\ndist: xenial\nsudo: required\n\nmatrix:\n  fast_finish: true\n\ncache: pip\n\nservices:\n  mysql\n\nbefore_install:\n  - mysql -u root -e 'CREATE DATABASE nyaav2 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;'\n\ninstall:\n  - pip install -r requirements.txt\n  - pip install pytest-cov\n  - sed \"s/mysql:\\/\\/test:test123@/mysql:\\/\\/root:@/\" config.example.py > config.py\n  - ./db_create.py\n  - ./db_migrate.py stamp head\n\nscript:\n  - ./dev.py test --cov=nyaa --cov-report=term tests\n  - ./dev.py lint\n\nnotifications:\n  email: false\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.31640625,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    {one line to give the program's name and a brief idea of what it does.}\n    Copyright (C) {year}  {name of author}\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    {project}  Copyright (C) {year}  {fullname}\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.685546875,
          "content": "# NyaaV2 [![Build Status](https://travis-ci.org/nyaadevs/nyaa.svg?branch=master)](https://travis-ci.org/nyaadevs/nyaa)\n\n## Setting up for development\nThis project uses Python 3.7. There are features used that do not exist in 3.6, so make sure to use Python 3.7.\nThis guide also assumes you 1) are using Linux and 2) are somewhat capable with the commandline.   \nIt's not impossible to run Nyaa on Windows, but this guide doesn't focus on that.\n\n### Code Quality:\n- Before we get any deeper, remember to follow PEP8 style guidelines and run `./dev.py lint` before committing to see a list of warnings/problems.\n    - You may also use `./dev.py fix && ./dev.py isort` to automatically fix some of the issues reported by the previous command.\n- Other than PEP8, try to keep your code clean and easy to understand, as well. It's only polite!\n\n### Running Tests\nThe `tests` folder contains tests for the the `nyaa` module and the webserver. To run the tests:\n- Make sure that you are in the python virtual environment.\n- Run `./dev.py test` while in the repository directory.\n\n### Setting up Pyenv\npyenv eases the use of different Python versions, and as not all Linux distros offer 3.7 packages, it's right up our alley.\n- Install dependencies https://github.com/pyenv/pyenv/wiki/Common-build-problems\n- Install `pyenv` https://github.com/pyenv/pyenv/blob/master/README.md#installation\n- Install `pyenv-virtualenv` https://github.com/pyenv/pyenv-virtualenv/blob/master/README.md\n- Install Python 3.7.2 with `pyenv` and create a virtualenv for the project:\n    - `pyenv install 3.7.2`\n    - `pyenv virtualenv 3.7.2 nyaa`\n    - `pyenv activate nyaa`\n- Install dependencies with `pip install -r requirements.txt`\n- Copy `config.example.py` into `config.py`\n    - Change `SITE_FLAVOR` in your `config.py` depending on which instance you want to host\n\n### Setting up MySQL/MariaDB database\nYou *may* use SQLite but the current support for it in this project is outdated and rather unsupported.\n- Enable `USE_MYSQL` flag in config.py\n- Install latest mariadb by following instructions here https://downloads.mariadb.org/mariadb/repositories/\n    - Tested versions: `mysql  Ver 15.1 Distrib 10.0.30-MariaDB, for debian-linux-gnu (x86_64) using readline 5.2`\n- Run the following commands logged in as your root db user (substitute for your own `config.py` values if desired):\n    - `CREATE USER 'test'@'localhost' IDENTIFIED BY 'test123';`\n    - `GRANT ALL PRIVILEGES ON *.* TO 'test'@'localhost';`\n    - `FLUSH PRIVILEGES;`\n    - `CREATE DATABASE nyaav2 DEFAULT CHARACTER SET utf8 COLLATE utf8_bin;`\n\n### Finishing up\n- Run `python db_create.py` to create the database and import categories\n    - Follow the advice of `db_create.py` and run `./db_migrate.py stamp head` to mark the database version for Alembic\n- Start the dev server with `python run.py`\n- When you are finished developing, deactivate your virtualenv with `pyenv deactivate` or `source deactivate` (or just close your shell session)\n\nYou're now ready for simple testing and development!   \nContinue below to learn about database migrations and enabling the advanced search engine, Elasticsearch.\n\n\n## Database migrations\n- Database migrations are done with [flask-Migrate](https://flask-migrate.readthedocs.io/), a wrapper around [Alembic](http://alembic.zzzcomputing.com/en/latest/).\n- If someone has made changes in the database schema and included a new migration script:\n    - If your database has never been marked by Alembic (you're on a database from before the migrations), run `./db_migrate.py stamp head` before pulling the new migration script(s).\n        - If you already have the new scripts, check the output of `./db_migrate.py history` instead and choose a hash that matches your current database state, then run `./db_migrate.py stamp <hash>`.\n    - Update your branch (eg. `git fetch && git rebase origin/master`)\n    - Run `./db_migrate.py upgrade head` to run the migration. Done!\n- If *you* have made a change in the database schema:\n    - Save your changes in `models.py` and ensure the database schema matches the previous version (ie. your new tables/columns are not added to the live database)\n    - Run `./db_migrate.py migrate -m \"Short description of changes\"` to automatically generate a migration script for the changes\n      - Check the script (`migrations/versions/...`) and make sure it works! Alembic may not able to notice all changes.\n    - Run `./db_migrate.py upgrade` to run the migration and verify the upgrade works.\n       - (Run `./db_migrate.py downgrade` to verify the downgrade works as well, then upgrade again)\n\n\n## Setting up and enabling Elasticsearch\n\n### Installing Elasticsearch\n- Install JDK with `sudo apt-get install openjdk-8-jdk`\n- Install [Elasticsearch](https://www.elastic.co/downloads/elasticsearch)\n    - [From packages...](https://www.elastic.co/guide/en/elasticsearch/reference/current/deb.html)\n        - Enable the service:\n            - `sudo systemctl enable elasticsearch.service`\n            - `sudo systemctl start elasticsearch.service`\n    - or [simply extracting the archives and running the files](https://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html), if you don't feel like permantently installing ES\n- Run `curl -XGET 'localhost:9200'` and make sure ES is running\n    - Optional: install [Kibana](https://www.elastic.co/products/kibana) as a search debug frontend for ES\n\n### Enabling MySQL Binlogging\n- Edit your MariaDB/MySQL server configuration and add the following under `[mariadb]`:\n    ```\n    log-bin\n    server_id=1\n    log-basename=master1\n    binlog-format=row\n    ```\n- Restart MariaDB/MySQL (`sudo service mysql restart`)\n- Copy the example configuration (`es_sync_config.example.json`) as `es_sync_config.json` and adjust options in it to your liking (verify the connection options!)\n- Connect to mysql as root\n    - Verify that the result of `SHOW VARIABLES LIKE 'binlog_format';` is `ROW`\n    - Execute `GRANT REPLICATION SLAVE ON *.* TO 'username'@'localhost';` to allow your configured user access to the binlog\n\n### Setting up ES\n- Run `./create_es.sh` to create the indices for the torrents: `nyaa` and `sukebei`\n    - The output should show `acknowledged: true` twice\n- Stop the Nyaa app if you haven't already\n- Run `python import_to_es.py` to import all the torrents (on nyaa and sukebei) into the ES indices.\n    - This may take some time to run if you have plenty of torrents in your database.\n\nEnable the `USE_ELASTIC_SEARCH` flag in `config.py` and (re)start the application.   \nElasticsearch should now be functional! The ES indices won't be updated \"live\" with the current setup, continue below for instructions on how to hook Elasticsearch up to MySQL binlog.   \n\nHowever, take note that binglog is not necessary for simple ES testing and development; you can simply run `import_to_es.py` from time to time to reindex all the torrents.\n\n\n### Setting up sync_es.py\n`sync_es.py` keeps the Elasticsearch indices updated by reading the binlog and pushing the changes to the ES indices.\n- Make sure `es_sync_config.json` is configured with the user you grated the `REPLICATION` permissions\n- Run `import_to_es.py` and copy the outputted JSON into the file specified by `save_loc` in your `es_sync_config.json`\n- Run `sync_es.py` as-is *or*, for actual deployment, set it up as a service and run it, preferably as the system/root\n    - Make sure `sync_es.py` runs within the venv with the right dependencies!\n\nYou're done! The script should now be feeding updates from the database to Elasticsearch.   \nTake note, however, that the specified ES index refresh interval is 30 seconds, which may feel like a long time on local development. Feel free to adjust it or [poke Elasticsearch yourself!](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-refresh.html)\n"
        },
        {
          "name": "WSGI.py",
          "type": "blob",
          "size": 0.4384765625,
          "content": "#!/usr/bin/python3\n# -*- coding: utf-8 -*-\nimport gevent.monkey\ngevent.monkey.patch_all()\n\nfrom nyaa import create_app\n\napp = create_app('config')\n\nif app.config['DEBUG']:\n    from werkzeug.debug import DebuggedApplication\n    app.wsgi_app = DebuggedApplication(app.wsgi_app, True)\n\nif __name__ == '__main__':\n    import gevent.pywsgi\n    gevent_server = gevent.pywsgi.WSGIServer((\"localhost\", 5000), app.wsgi_app)\n    gevent_server.serve_forever()\n"
        },
        {
          "name": "config.example.py",
          "type": "blob",
          "size": 6.810546875,
          "content": "import os\nimport re\n\nDEBUG = True\n\n######################\n## Maintenance mode ##\n######################\n\n# A read-only maintenance mode, in which the database is not modified\nMAINTENANCE_MODE = False\n# A maintenance message (used in layout.html template)\nMAINTENANCE_MODE_MESSAGE = 'Site is currently in read-only maintenance mode.'\n# Allow logging in during maintenance (without updating last login date)\nMAINTENANCE_MODE_LOGINS = True\n\n# Block *anonymous* uploads completely\nRAID_MODE_LIMIT_UPLOADS = False\n# Message prepended to the full error message (account.py)\nRAID_MODE_UPLOADS_MESSAGE = 'Anonymous uploads are currently disabled.'\n\n# Require manual activation for newly registered accounts\nRAID_MODE_LIMIT_REGISTER = False\n# Message prepended to the full error message (account.py)\nRAID_MODE_REGISTER_MESSAGE = 'Registration is currently being limited.'\n\n#############\n## General ##\n#############\n\n# What the site identifies itself as. This affects templates, not database stuff.\nSITE_NAME = 'Nyaa'\n# What the both sites are labeled under (used for eg. email subjects)\nGLOBAL_SITE_NAME = 'Nyaa.si'\n\n# General prefix for running multiple sites, eg. most database tables are site-prefixed\nSITE_FLAVOR = 'nyaa' # 'nyaa' or 'sukebei'\n# Full external urls to both sites, used for site-change links\nEXTERNAL_URLS = {'fap':'***', 'main':'***'}\n\n# Secret keys for Flask\nCSRF_SESSION_KEY = '***'\nSECRET_KEY = '***'\n\n# Present a recaptcha for anonymous uploaders\nUSE_RECAPTCHA = False\n# Require email validation\nUSE_EMAIL_VERIFICATION = False\n# Use MySQL or Sqlite3 (mostly deprecated)\nUSE_MYSQL = True\n# Show seeds/peers/completions in torrent list/page\nENABLE_SHOW_STATS = True\n\n# Enable password recovery (by reset link to given email address)\n# Depends on email support!\nALLOW_PASSWORD_RESET = True\n\n# A list of strings or compiled regexes to deny registering emails by.\n# Regexes will be .search()'d against emails,\n# while strings will be a simple 'string in email.lower()' check.\n# Leave empty to disable the blacklist.\nEMAIL_BLACKLIST = (\n    # Hotmail completely rejects \"untrusted\" emails,\n    # so it's less of a headache to blacklist them as users can't receive the mails anyway.\n    # (Hopefully) complete list of Microsoft email domains follows:\n    re.compile(r'(?i)@hotmail\\.(co|co\\.uk|com|de|dk|eu|fr|it|net|org|se)'),\n    re.compile(r'(?i)@live\\.(co|co.uk|com|de|dk|eu|fr|it|net|org|se|no)'),\n    re.compile(r'(?i)@outlook\\.(at|be|cl|co|co\\.(id|il|nz|th)|com|com\\.(ar|au|au|br|gr|pe|tr|vn)|cz|de|de|dk|dk|es|eu|fr|fr|hu|ie|in|it|it|jp|kr|lv|my|org|ph|pt|sa|se|sg|sk)'),\n    re.compile(r'(?i)@(msn\\.com|passport\\.(com|net))'),\n    # '@dodgydomain.tk'\n)\nEMAIL_SERVER_BLACKLIST = (\n    # Bad mailserver IPs here (MX server.com -> A mail.server.com > 11.22.33.44)\n    # '1.2.3.4', '11.22.33.44'\n)\n\n\n\n# Recaptcha keys (https://www.google.com/recaptcha)\nRECAPTCHA_PUBLIC_KEY = '***'\nRECAPTCHA_PRIVATE_KEY = '***'\n\nBASE_DIR = os.path.abspath(os.path.dirname(__file__))\nif USE_MYSQL:\n    SQLALCHEMY_DATABASE_URI = ('mysql://test:test123@localhost/nyaav2?charset=utf8mb4')\nelse:\n    SQLALCHEMY_DATABASE_URI = (\n        'sqlite:///' + os.path.join(BASE_DIR, 'test.db') + '?check_same_thread=False')\n\n###########\n## EMAIL ##\n###########\n\n# 'smtp' or 'mailgun'\nMAIL_BACKEND = 'mailgun'\nMAIL_FROM_ADDRESS = 'Sender Name <sender@domain.com>'\n\n# Mailgun settings\nMAILGUN_API_BASE = 'https://api.mailgun.net/v3/YOUR_DOMAIN_NAME'\nMAILGUN_API_KEY = 'YOUR_API_KEY'\n\n# SMTP settings\nSMTP_SERVER = '***'\nSMTP_PORT = 587\nSMTP_USERNAME = '***'\nSMTP_PASSWORD = '***'\n\n\n# The maximum number of files a torrent can contain\n# until the site says \"Too many files to display.\"\nMAX_FILES_VIEW = 1000\n\n# Verify uploaded torrents have the given tracker in them?\nENFORCE_MAIN_ANNOUNCE_URL = False\nMAIN_ANNOUNCE_URL = 'http://127.0.0.1:6881/announce'\n\n# Tracker API integration - don't mind this\nTRACKER_API_URL = 'http://127.0.0.1:6881/api'\nTRACKER_API_AUTH = 'topsecret'\n\n#############\n## Account ##\n#############\n\n# Limit torrent upload rate\nRATELIMIT_UPLOADS = True\nRATELIMIT_ACCOUNT_AGE = 7 * 24 * 3600\n# After uploading MAX_UPLOAD_BURST torrents within UPLOAD_BURST_DURATION,\n# the following uploads must be at least UPLOAD_TIMEOUT seconds after the previous upload.\nMAX_UPLOAD_BURST = 5\nUPLOAD_BURST_DURATION = 45 * 60\nUPLOAD_TIMEOUT = 15 * 60\n\n# Torrents uploaded without an account must be at least this big in total (bytes)\n# Set to 0 to disable\nMINIMUM_ANONYMOUS_TORRENT_SIZE = 1 * 1024 * 1024\n\n# Minimum age for an account not to be served a captcha (seconds)\n# Relies on USE_RECAPTCHA. Set to 0 to disable.\nACCOUNT_RECAPTCHA_AGE = 7 * 24 * 3600  # A week\n\n# Seconds after which an IP is allowed to register another account\n# (0 disables the limitation)\nPER_IP_ACCOUNT_COOLDOWN = 24 * 3600\n\n# Backup original .torrent uploads\nBACKUP_TORRENT_FOLDER = 'torrents'\n\n############\n## Search ##\n############\n\n# How many results should a page contain. Applies to RSS as well.\nRESULTS_PER_PAGE = 75\n\n# How many pages we'll return at most\nMAX_PAGES = 100\n\n# How long and how many entries to cache for count queries\nCOUNT_CACHE_SIZE = 256\nCOUNT_CACHE_DURATION = 30\n\n# Use baked queries for database search\nUSE_BAKED_SEARCH = False\n\n# Use better searching with ElasticSearch\n# See README.MD on setup!\nUSE_ELASTIC_SEARCH = False\n# Highlight matches (for debugging)\nENABLE_ELASTIC_SEARCH_HIGHLIGHT = False\n\n# Max ES search results, do not set over 10000\nES_MAX_SEARCH_RESULT = 1000\n# ES index name generally (nyaa or sukebei)\nES_INDEX_NAME = SITE_FLAVOR\n# ES hosts\nES_HOSTS = ['localhost:9200']\n\n################\n## Commenting ##\n################\n\n# Time limit for editing a comment after it has been posted (seconds)\n# Set to 0 to disable\nEDITING_TIME_LIMIT = 0\n\n# Whether to use Gravatar or just always use the default avatar\n# (Useful if run as development instance behind NAT/firewall)\nENABLE_GRAVATAR = True\n\n##########################\n## Trusted Requirements ##\n##########################\n\n# Minimum number of uploads the user needs to have in order to apply for trusted\nTRUSTED_MIN_UPLOADS = 10\n# Minimum number of cumulative downloads the user needs to have across their\n# torrents in order to apply for trusted\nTRUSTED_MIN_DOWNLOADS = 10000\n# Number of days an applicant needs to wait before re-applying\nTRUSTED_REAPPLY_COOLDOWN = 90\n\n###########\n## Cache ##\n###########\n\n# Interesting types include \"simple\", \"redis\" and \"uwsgi\"\n# See https://pythonhosted.org/Flask-Caching/#configuring-flask-caching\nCACHE_TYPE = \"simple\"\n\n# Maximum number of items the cache will store\n# Only applies to \"simple\" and \"filesystem\" cache types\nCACHE_THRESHOLD = 8192\n\n# If you want to use redis, try this\n# CACHE_TYPE = \"redis\"\n# CACHE_REDIS_HOST = \"127.0.0.1\"\n# CACHE_KEY_PREFIX = \"catcache_\"\n\n\n###############\n## Ratelimit ##\n###############\n\n# To actually make this work across multiple worker processes, use redis\n# RATELIMIT_STORAGE_URL=\"redis://host:port\"\nRATELIMIT_KEY_PREFIX=\"nyaaratelimit_\"\n"
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "create_es.sh",
          "type": "blob",
          "size": 0.3046875,
          "content": "#!/usr/bin/env bash\nset -e\n\n# create indices named \"nyaa\" and \"sukebei\", these are hardcoded\ncurl -v -XPUT 'localhost:9200/nyaa?pretty' -H\"Content-Type: application/yaml\" --data-binary @es_mapping.yml\ncurl -v -XPUT 'localhost:9200/sukebei?pretty' -H\"Content-Type: application/yaml\" --data-binary @es_mapping.yml\n"
        },
        {
          "name": "db_create.py",
          "type": "blob",
          "size": 2.3359375,
          "content": "#!/usr/bin/env python3\nimport sqlalchemy\n\nfrom nyaa import create_app, models\nfrom nyaa.extensions import db\n\napp = create_app('config')\n\nNYAA_CATEGORIES = [\n    ('Anime', ['Anime Music Video', 'English-translated', 'Non-English-translated', 'Raw']),\n    ('Audio', ['Lossless', 'Lossy']),\n    ('Literature', ['English-translated', 'Non-English-translated', 'Raw']),\n    ('Live Action', ['English-translated', 'Idol/Promotional Video', 'Non-English-translated', 'Raw']),\n    ('Pictures', ['Graphics', 'Photos']),\n    ('Software', ['Applications', 'Games']),\n]\n\n\nSUKEBEI_CATEGORIES = [\n    ('Art', ['Anime', 'Doujinshi', 'Games', 'Manga', 'Pictures']),\n    ('Real Life', ['Photobooks / Pictures', 'Videos']),\n]\n\n\ndef add_categories(categories, main_class, sub_class):\n    for main_cat_name, sub_cat_names in categories:\n        main_cat = main_class(name=main_cat_name)\n        for i, sub_cat_name in enumerate(sub_cat_names):\n            # Composite keys can't autoincrement, set sub_cat id manually (1-index)\n            sub_cat = sub_class(id=i+1, name=sub_cat_name, main_category=main_cat)\n        db.session.add(main_cat)\n\n\nif __name__ == '__main__':\n    with app.app_context():\n        # Test for the user table, assume db is empty if it's not created\n        database_empty = False\n        try:\n            models.User.query.first()\n        except (sqlalchemy.exc.ProgrammingError, sqlalchemy.exc.OperationalError):\n            database_empty = True\n\n        print('Creating all tables...')\n        db.create_all()\n\n        nyaa_category_test = models.NyaaMainCategory.query.first()\n        if not nyaa_category_test:\n            print('Adding Nyaa categories...')\n            add_categories(NYAA_CATEGORIES, models.NyaaMainCategory, models.NyaaSubCategory)\n\n        sukebei_category_test = models.SukebeiMainCategory.query.first()\n        if not sukebei_category_test:\n            print('Adding Sukebei categories...')\n            add_categories(SUKEBEI_CATEGORIES, models.SukebeiMainCategory, models.SukebeiSubCategory)\n\n        db.session.commit()\n\n        if database_empty:\n            print('Remember to run the following to mark the database up-to-date for Alembic:')\n            print('./db_migrate.py stamp head')\n            # Technically we should be able to do this here, but when you have\n            # Flask-Migrate and Flask-SQA and everything... I didn't get it working.\n"
        },
        {
          "name": "db_migrate.py",
          "type": "blob",
          "size": 0.4287109375,
          "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport sys\n\nfrom flask_script import Manager\nfrom flask_migrate import Migrate, MigrateCommand\n\nfrom nyaa import create_app\nfrom nyaa.extensions import db\n\napp = create_app('config')\nmigrate = Migrate(app, db)\n\nmanager = Manager(app)\nmanager.add_command(\"db\", MigrateCommand)\n\nif __name__ == \"__main__\":\n    # Patch sys.argv to default to 'db'\n    sys.argv.insert(1, 'db')\n\n    manager.run()\n"
        },
        {
          "name": "dev.py",
          "type": "blob",
          "size": 5.015625,
          "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nThis tool is designed to assist developers run common tasks, such as\nchecking the code for lint issues, auto fixing some lint issues and running tests.\nIt imports modules lazily (as-needed basis), so it runs faster!\n\"\"\"\nimport sys\n\nLINT_PATHS = [\n    'nyaa/',\n    'utils/',\n]\nTEST_PATHS = ['tests']\n\n\ndef print_cmd(cmd, args):\n    \"\"\" Prints the command and args as you would run them manually. \"\"\"\n    print('Running: {0}\\n'.format(\n        ' '.join([('\\'' + a + '\\'' if ' ' in a else a) for a in [cmd] + args])))\n    sys.stdout.flush()  # Make sure stdout is flushed before continuing.\n\n\ndef check_config_values():\n    \"\"\" Verify that all max_line_length values match. \"\"\"\n    import configparser\n    config = configparser.ConfigParser()\n    config.read('setup.cfg')\n\n    # Max line length:\n    flake8 = config.get('flake8', 'max_line_length', fallback=None)\n    autopep8 = config.get('pycodestyle', 'max_line_length', fallback=None)\n    isort = config.get('isort', 'line_length', fallback=None)\n\n    values = (v for v in (flake8, autopep8, isort) if v is not None)\n    found = next(values, False)\n    if not found:\n        print('Warning: No max line length setting set in setup.cfg.')\n        return False\n    elif any(v != found for v in values):\n        print('Warning: Max line length settings differ in setup.cfg.')\n        return False\n\n    return True\n\n\ndef print_help():\n    print('Nyaa Development Helper')\n    print('=======================\\n')\n    print('Usage: {0} command [different arguments]'.format(sys.argv[0]))\n    print('Command can be one of the following:\\n')\n    print('  lint | check       : do a lint check (flake8 + flake8-isort)')\n    print('  fix  | autolint    : try and auto-fix lint (autopep8)')\n    print('  isort              : fix import sorting (isort)')\n    print('  test | pytest      : run tests (pytest)')\n    print('  help | -h | --help : show this help and exit')\n    print('')\n    print('You may pass different arguments to the script that is being run.')\n    print('For example: {0} test tests/ --verbose'.format(sys.argv[0]))\n    print('')\n    return 1\n\n\nif __name__ == '__main__':\n    assert sys.version_info >= (3, 6), \"Python 3.6 is required\"\n\n    check_config_values()\n\n    if len(sys.argv) < 2:\n        sys.exit(print_help())\n\n    cmd = sys.argv[1].lower()\n    if cmd in ('help', '-h', '--help'):\n        sys.exit(print_help())\n\n    args = sys.argv[2:]\n    run_default = not (args or set(('--version', '-h', '--help')).intersection(args))\n\n    # Flake8 - lint and common errors checker\n    # When combined with flake8-isort, also checks for unsorted imports.\n    if cmd in ('lint', 'check'):\n        if run_default:\n            # Putting format in the setup.cfg file breaks `pip install flake8`\n            settings = ['--format', '%(path)s [%(row)s:%(col)s] %(code)s: %(text)s',\n                        '--show-source']\n            args = LINT_PATHS + settings + args\n\n        print_cmd('flake8', args)\n        try:\n            from flake8.main.application import Application as Flake8\n        except ImportError as err:\n            print('Unable to load module: {0!r}'.format(err))\n            result = False\n        else:\n            f8 = Flake8()\n            f8.run(args)\n            result = f8.result_count == 0\n\n            if not result:\n                print(\"The code requires some changes.\")\n            else:\n                print(\"Looks good!\")\n        finally:\n            sys.exit(int(not result))\n\n    # AutoPEP8 - auto code linter for most simple errors.\n    if cmd in ('fix', 'autolint'):\n        if run_default:\n            args = LINT_PATHS + args\n\n        print_cmd('autopep8', args)\n        try:\n            from autopep8 import main as autopep8\n        except ImportError as err:\n            print('Unable to load module: {0!r}'.format(err))\n            result = False\n        else:\n            args = [''] + args  # Workaround\n            result = autopep8(args)\n        finally:\n            sys.exit(result)\n\n    # isort - automate import sorting.\n    if cmd in ('isort', ):\n        if run_default:\n            args = LINT_PATHS + ['-rc'] + args\n\n        print_cmd('isort', args)\n        try:\n            from isort.main import main as isort\n        except ImportError as err:\n            print('Unable to load module: {0!r}'.format(err))\n            result = False\n        else:\n            # Need to patch sys.argv for argparse in isort\n            sys.argv.remove(cmd)\n            sys.argv = [sys.argv[0] + ' ' + cmd] + args\n            result = isort()\n        finally:\n            sys.exit(result)\n\n    # py.test - test runner\n    if cmd in ('test', 'pytest'):\n        if run_default:\n            args = TEST_PATHS + args\n\n        print_cmd('pytest', args)\n        try:\n            from pytest import main as pytest\n        except ImportError as err:\n            print('Unable to load module: {0!r}'.format(err))\n            result = False\n        else:\n            result = pytest(args)\n            result = result == 0\n        finally:\n            sys.exit(int(not result))\n\n    sys.exit(print_help())\n"
        },
        {
          "name": "es_mapping.yml",
          "type": "blob",
          "size": 3.8359375,
          "content": "---\n# CREATE DTABASE/TABLE equivalent for elasticsearch, in yaml\n# fo inline comments.\nsettings:\n  analysis:\n    analyzer:\n      my_search_analyzer:\n        type: custom\n        tokenizer: standard\n        char_filter:\n          - my_char_filter\n        filter:\n          - lowercase\n      my_index_analyzer:\n        type: custom\n        tokenizer: standard\n        char_filter:\n          - my_char_filter\n        filter:\n          - resolution\n          - lowercase\n          - word_delimit\n          - my_ngram\n          - trim_zero\n          - unique\n      # For exact matching - separate each character for substring matching + lowercase\n      exact_analyzer:\n        tokenizer: exact_tokenizer\n        filter:\n          - lowercase\n      # For matching full words longer than the ngram limit (15 chars)\n      my_fullword_index_analyzer:\n        type: custom\n        tokenizer: standard\n        char_filter:\n          - my_char_filter\n        filter:\n          - lowercase\n          - word_delimit\n          # Skip tokens shorter than N characters,\n          # since they're already indexed in the main field\n          - fullword_min\n          - unique\n\n    tokenizer:\n      # Splits input into characters, for exact substring matching\n      exact_tokenizer:\n        type: pattern\n        pattern: \"(.)\"\n        group: 1\n\n    filter:\n      my_ngram:\n        type: edge_ngram\n        min_gram: 1\n        max_gram: 15\n      fullword_min:\n        type: length\n        # Remember to change this if you change the max_gram below!\n        min: 16\n      resolution:\n        type: pattern_capture\n        patterns: [\"(\\\\d+)[xX](\\\\d+)\"]\n      trim_zero:\n        type: pattern_capture\n        patterns: [\"0*([0-9]*)\"]\n      word_delimit:\n        type: word_delimiter_graph\n        preserve_original: true\n        split_on_numerics: false\n        # https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-word-delimiter-graph-tokenfilter.html#word-delimiter-graph-tokenfilter-configure-parms\n        # since we're using \"trim\" filters downstream, otherwise\n        # you get weird lucene errors about startOffset\n        adjust_offsets: false\n    char_filter:\n      my_char_filter:\n        type: mapping\n        mappings: [\"-=>_\", \"!=>_\", \"_=>\\\\u0020\"]\n  index:\n    # we're running a single es node, so no sharding necessary,\n    # plus replicas don't really help either.\n    number_of_shards: 1\n    number_of_replicas : 0\n    query:\n      default_field: display_name\nmappings:\n  # disable elasticsearch's \"helpful\" autoschema\n  dynamic: false\n  properties:\n    id:\n      type: long\n    display_name:\n      # TODO could do a fancier tokenizer here to parse out the\n      # the scene convention of stuff in brackets, plus stuff like k-on\n      type: text\n      analyzer: my_index_analyzer\n      fielddata: true # Is this required?\n      fields:\n        # Multi-field for full-word matching (when going over ngram limits)\n        # Note: will have to be queried for, not automatic\n        fullword:\n          type: text\n          analyzer: my_fullword_index_analyzer\n        # Stored for exact phrase matching\n        exact:\n          type: text\n          analyzer: exact_analyzer\n    created_time:\n      type: date\n      #\n    # Only in the ES index for generating magnet links\n    info_hash:\n      type: keyword\n      index: false\n    filesize:\n      type: long\n    anonymous:\n      type: boolean\n    trusted:\n      type: boolean\n    remake:\n      type: boolean\n    complete:\n      type: boolean\n    hidden:\n      type: boolean\n    deleted:\n      type: boolean\n    has_torrent:\n      type: boolean\n    download_count:\n      type: long\n    leech_count:\n      type: long\n    seed_count:\n      type: long\n    comment_count:\n      type: long\n    # these ids are really only for filtering, thus keyword\n    uploader_id:\n      type: keyword\n    main_category_id:\n      type: keyword\n    sub_category_id:\n      type: keyword\n"
        },
        {
          "name": "es_sync_config.example.json",
          "type": "blob",
          "size": 0.263671875,
          "content": "{\n    \"save_loc\": \"/tmp/pos.json\",\n    \"mysql_host\": \"127.0.0.1\",\n    \"mysql_port\": 3306,\n    \"mysql_user\": \"nyaa\",\n    \"mysql_password\": \"some_password\",\n    \"database\": \"nyaav2\",\n    \"internal_queue_depth\": 10000,\n    \"es_chunk_size\": 10000,\n    \"flush_interval\": 5\n}\n"
        },
        {
          "name": "import_to_es.py",
          "type": "blob",
          "size": 4.7490234375,
          "content": "#!/usr/bin/env python\n\"\"\"\nBulk load torents from mysql into elasticsearch `nyaav2` index,\nwhich is assumed to already exist.\nThis is a one-shot deal, so you'd either need to complement it\nwith a cron job or some binlog-reading thing (TODO)\n\"\"\"\nimport sys\nimport json\n\n# This should be progressbar33\nimport progressbar\nfrom elasticsearch import Elasticsearch\nfrom elasticsearch.client import IndicesClient\nfrom elasticsearch import helpers\n\nfrom nyaa import create_app, models\nfrom nyaa.extensions import db\n\napp = create_app('config')\nes = Elasticsearch(hosts=app.config['ES_HOSTS'], timeout=30)\nic = IndicesClient(es)\n\ndef pad_bytes(in_bytes, size):\n    return in_bytes + (b'\\x00' * max(0, size - len(in_bytes)))\n\n# turn into thing that elasticsearch indexes. We flatten in\n# the stats (seeders/leechers) so we can order by them in es naturally.\n# we _don't_ dereference uploader_id to the user's display name however,\n# instead doing that at query time. I _think_ this is right because\n# we don't want to reindex all the user's torrents just because they\n# changed their name, and we don't really want to FTS search on the user anyway.\n# Maybe it's more convenient to derefence though.\ndef mk_es(t, index_name):\n    return {\n        \"_id\": t.id,\n        \"_index\": index_name,\n        \"_source\": {\n            # we're also indexing the id as a number so you can\n            # order by it. seems like this is just equivalent to\n            # order by created_time, but oh well\n            \"id\": t.id,\n            \"display_name\": t.display_name,\n            \"created_time\": t.created_time,\n            # not analyzed but included so we can render magnet links\n            # without querying sql again.\n            \"info_hash\": pad_bytes(t.info_hash, 20).hex(),\n            \"filesize\": t.filesize,\n            \"uploader_id\": t.uploader_id,\n            \"main_category_id\": t.main_category_id,\n            \"sub_category_id\": t.sub_category_id,\n            \"comment_count\": t.comment_count,\n            # XXX all the bitflags are numbers\n            \"anonymous\": bool(t.anonymous),\n            \"trusted\": bool(t.trusted),\n            \"remake\": bool(t.remake),\n            \"complete\": bool(t.complete),\n            # TODO instead of indexing and filtering later\n            # could delete from es entirely. Probably won't matter\n            # for at least a few months.\n            \"hidden\": bool(t.hidden),\n            \"deleted\": bool(t.deleted),\n            \"has_torrent\": t.has_torrent,\n            # Stats\n            \"download_count\": t.stats.download_count,\n            \"leech_count\": t.stats.leech_count,\n            \"seed_count\": t.stats.seed_count,\n        }\n    }\n\n# page through an sqlalchemy query, like the per_fetch but\n# doesn't break the eager joins its doing against the stats table.\n# annoying that this isn't built in somehow.\ndef page_query(query, limit=sys.maxsize, batch_size=10000, progress_bar=None):\n    start = 0\n    while True:\n        # XXX very inelegant way to do this, i'm confus\n        stop = min(limit, start + batch_size)\n        if stop == start:\n            break\n        things = query.slice(start, stop)\n        if not things:\n            break\n        had_things = False\n        for thing in things:\n            had_things = True\n            yield(thing)\n        if not had_things or stop == limit:\n            break\n        if progress_bar:\n            progress_bar.update(start)\n        start = min(limit, start + batch_size)\n\nFLAVORS = [\n    ('nyaa', models.NyaaTorrent),\n    ('sukebei', models.SukebeiTorrent)\n]\n\n# Get binlog status from mysql\nwith app.app_context():\n    master_status = db.engine.execute('SHOW MASTER STATUS;').fetchone()\n\n    position_json = {\n        'log_file': master_status[0],\n        'log_pos': master_status[1]\n    }\n\n    print('Save the following in the file configured in your ES sync config JSON:')\n    print(json.dumps(position_json))\n\n    for flavor, torrent_class in FLAVORS:\n        print('Importing torrents for index', flavor, 'from', torrent_class)\n        bar = progressbar.ProgressBar(\n            maxval=torrent_class.query.count(),\n            widgets=[ progressbar.SimpleProgress(),\n                      ' [', progressbar.Timer(), '] ',\n                      progressbar.Bar(),\n                      ' (', progressbar.ETA(), ') ',\n                ])\n\n        # turn off refreshes while bulk loading\n        ic.put_settings(body={'index': {'refresh_interval': '-1'}}, index=flavor)\n\n        bar.start()\n        helpers.bulk(es, (mk_es(t, flavor) for t in page_query(torrent_class.query, progress_bar=bar)), chunk_size=10000)\n        bar.finish()\n\n        # Refresh the index immideately\n        ic.refresh(index=flavor)\n        print('Index refresh done.')\n\n        # restore to near-enough real time\n        ic.put_settings(body={'index': {'refresh_interval': '30s'}}, index=flavor)\n"
        },
        {
          "name": "info_dicts",
          "type": "tree",
          "content": null
        },
        {
          "name": "lint.sh",
          "type": "blob",
          "size": 0.849609375,
          "content": "#!/bin/bash\n# Lint checker/fixer\n# This script is deprecated, but still works.\n\nfunction auto_fix() {\n  ./dev.py fix && ./dev.py isort\n}\n\n\nfunction check_lint() {\n  ./dev.py lint\n}\n\n# MAIN\naction=auto_fix # default action\nfor arg in \"$@\"\ndo\n  case \"$arg\" in\n  \"-h\" | \"--help\")\n    echo \"+ ========================= +\"\n    echo \"+ This script is deprecated +\"\n    echo \"+    Please use ./dev.py    +\"\n    echo \"+ ========================= +\"\n    echo \"\"\n    echo \"Lint checker/fixer\"\n    echo \"\"\n    echo \"Usage: $0 [-c|--check] [-h|--help]\"\n    echo \"  No arguments : Check and auto-fix some warnings/errors\"\n    echo \"  -c | --check : only check lint (don't auto-fix)\"\n    echo \"  -h | --help  : show this help and exit\"\n    exit 0;\n    ;;\n  \"-c\" | \"--check\")\n    action=check_lint\n    ;;\n  esac\ndone\n\n${action} # run selected action\nif [[ $? -ne 0 ]]; then exit 1; fi\n"
        },
        {
          "name": "migrations",
          "type": "tree",
          "content": null
        },
        {
          "name": "nyaa",
          "type": "tree",
          "content": null
        },
        {
          "name": "rangeban.py",
          "type": "blob",
          "size": 3.560546875,
          "content": "#!/usr/bin/env python3\n\nfrom datetime import datetime\nfrom ipaddress import ip_address\nimport sys\n\nimport click\n\nfrom nyaa import create_app, models\nfrom nyaa.extensions import db\n\n\ndef is_cidr_valid(c):\n    '''Checks whether a CIDR range string is valid.'''\n    try:\n        subnet, mask = c.split('/')\n    except ValueError:\n        return False\n    if int(mask) < 1 or int(mask) > 32:\n        return False\n    try:\n        ip = ip_address(subnet)\n    except ValueError:\n        return False\n    return True\n\n\ndef check_str(b):\n    '''Returns a checkmark or cross depending on the condition.'''\n    return '\\u2713' if b else '\\u2717'\n\n\n@click.group()\ndef rangeban():\n    global app\n    app = create_app('config')\n\n\n@rangeban.command()\n@click.option('--temp/--no-temp', help='Mark this entry as one that may be '\n              'cleaned out occasionally.', default=False)\n@click.argument('cidrrange')\ndef ban(temp, cidrrange):\n    if not is_cidr_valid(cidrrange):\n        click.secho('{} is not of the format xxx.xxx.xxx.xxx/xx.'\n                    .format(cidrrange), err=True, fg='red')\n        sys.exit(1)\n    with app.app_context():\n        ban = models.RangeBan(cidr_string=cidrrange, temp=datetime.utcnow() if temp else None)\n        db.session.add(ban)\n        db.session.commit()\n        click.echo('Added {} for {}.'.format('temp ban' if temp else 'ban',\n                                             cidrrange))\n\n\n@rangeban.command()\n@click.argument('cidrrange')\ndef unban(cidrrange):\n    if not is_cidr_valid(cidrrange):\n        click.secho('{} is not of the format xxx.xxx.xxx.xxx/xx.'\n                    .format(cidrrange), err=True, fg='red')\n        sys.exit(1)\n    with app.app_context():\n        # Dunno why this wants _cidr_string and not cidr_string, probably\n        # due to this all being a janky piece of shit.\n        bans = models.RangeBan.query.filter(\n            models.RangeBan._cidr_string == cidrrange).all()\n        if len(bans) == 0:\n            click.echo('Ban not found.')\n        for b in bans:\n            click.echo('Unbanned {}'.format(b.cidr_string))\n            db.session.delete(b)\n        db.session.commit()\n\n\n@rangeban.command()\ndef list():\n    with app.app_context():\n        bans = models.RangeBan.query.all()\n        if len(bans) == 0:\n            click.echo('No bans.')\n        else:\n            click.secho('ID     CIDR Range         Enabled Temp', bold=True)\n            for b in bans:\n                click.echo('{0: <6} {1: <18} {2: <7} {3: <4}'\n                           .format(b.id, b.cidr_string,\n                                   check_str(b.enabled),\n                                   check_str(b.temp is not None)))\n\n@rangeban.command()\n@click.argument('banid', type=int)\n@click.argument('status')\ndef enabled(banid, status):\n    yeses = ['true', '1', 'yes', '\\u2713']\n    noses = ['false', '0', 'no', '\\u2717']\n    if status.lower() in yeses:\n        set_to = True\n    elif status.lower() in noses:\n        set_to = False\n    else:\n        click.secho('Please choose one of {} or {}.'\n                    .format(yeses, noses), err=True, fg='red')\n        sys.exit(1)\n    with app.app_context():\n        ban = models.RangeBan.query.get(banid)\n        if not ban:\n            click.secho('No ban with id {} found.'\n                        .format(banid), err=True, fg='red')\n            sys.exit(1)\n        ban.enabled = set_to\n        db.session.add(ban)\n        db.session.commit()\n        click.echo('{} ban {} on {}.'.format('Enabled' if set_to else 'Disabled',\n                                             banid, ban._cidr_string))\n\n\n\nif __name__ == '__main__':\n    rangeban()\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.9619140625,
          "content": "alembic==1.0.11\nappdirs==1.4.3\nargon2-cffi==19.1.0\nautopep8==1.4.4\nblinker==1.4\ncffi==1.12.3\nclick==7.0\ndnspython==1.16.0\nelasticsearch==7.0.2\nelasticsearch-dsl==7.0.0\nflake8==3.7.8\nflake8-isort==2.7.0\nFlask==1.1.1\nFlask-Assets==0.12\nFlask-DebugToolbar==0.10.1\nFlask-Migrate==2.5.2\nflask-paginate==0.5.3\nFlask-Script==2.0.6\nFlask-SQLAlchemy==2.4.0\nFlask-WTF==0.14.2\ngevent==1.4.0\ngreenlet==0.4.15\nisort==4.3.21\nitsdangerous==1.1.0\nJinja2==2.10.1\nMako==1.1.0\nMarkupSafe==1.1.1\nmysql-replication==0.19\nmysqlclient==1.4.3\norderedset==2.0.1\npackaging==19.1\npasslib==1.7.1\nprogressbar33==2.4\npy==1.8.0\npycodestyle==2.5.0\npycparser==2.19\nPyMySQL==0.9.3\npyparsing==2.4.2\npytest==5.0.1\npython-dateutil==2.8.0\npython-editor==1.0.4\npython-utils==2.3.0\nrequests==2.22.0\nSQLAlchemy==1.3.6\nSQLAlchemy-FullText-Search==0.2.5\nSQLAlchemy-Utils==0.34.1\nstatsd==3.3.0\nurllib3==1.25.3\nuWSGI==2.0.18\nredis==3.2.1\nwebassets==0.12.1\nWerkzeug==0.15.5\nWTForms==2.2.1\nFlask-Caching==1.7.2\nFlask-Limiter==1.0.1\n"
        },
        {
          "name": "run.py",
          "type": "blob",
          "size": 0.123046875,
          "content": "#!/usr/bin/env python3\nfrom nyaa import create_app\n\napp = create_app('config')\napp.run(host='0.0.0.0', port=5500, debug=True)\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.5078125,
          "content": "[flake8]\nmax_line_length = 100\n# The following line raises an exception on `pip install flake8`\n# So we're using the command line argument instead.\n# format = %(path)s [%(row)s:%(col)s] %(code)s: %(text)s\n\n[pep8]\nmax_line_length = 100\npep8_passes = 2000\nin_place = 1\nrecursive = 1\nverbose = 1\n\n[isort]\nline_length = 100\nnot_skip = __init__.py\ndefault_section = THIRDPARTY\nknown_first_party = nyaa\nknown_flask =\n\tflask*,\n\tjinja2,\n\tmarkupsafe,\n\twerkzeug,\n\twtforms\nsections = STDLIB,FLASK,THIRDPARTY,FIRSTPARTY,LOCALFOLDER\n"
        },
        {
          "name": "sync_es.py",
          "type": "blob",
          "size": 14.6552734375,
          "content": "#!/usr/bin/env python\n\"\"\"\nstream changes in mysql (on the torrents and statistics table) into\nelasticsearch as they happen on the binlog. This keeps elasticsearch in sync\nwith whatever you do to the database, including stuff like admin queries. Also,\nbecause mysql keeps the binlog around for N days before deleting old stuff, you\ncan survive a hiccup of elasticsearch or this script dying and pick up where\nyou left off.\n\nFor that \"picking up\" part, this script depends on one piece of external state:\nits last known binlog filename and position. This is saved off as a JSON file\nto a configurable location on the filesystem periodically. If the file is not\npresent then you can initialize it with the values from `SHOW MASTER STATUS`\nfrom the mysql repl, which will start the sync from current state.\n\nIn the case of catastrophic elasticsearch meltdown where you need to\nreconstruct the index, you'll want to be a bit careful with coordinating\nsync_es and import_to_es scripts. If you run import_to_es first than run\nsync_es against SHOW MASTER STATUS, anything that changed the database between\nwhen import_to_es and sync_es will be lost. Instead, you can run SHOW MASTER\nSTATUS _before_ you run import_to_es. That way you'll definitely pick up any\nchanges that happen while the import_to_es script is dumping stuff from the\ndatabase into es, at the expense of redoing a (small) amount of indexing.\n\nThis uses multithreading so we don't have to block on socket io (both binlog\nreading and es POSTing). asyncio soon™\n\nThis script will exit on any sort of exception, so you'll want to use your\nsupervisor's restart functionality, e.g. Restart=failure in systemd, or\nthe poor man's `while true; do sync_es.py; sleep 1; done` in tmux.\n\"\"\"\nfrom elasticsearch import Elasticsearch\nfrom elasticsearch.helpers import bulk, BulkIndexError\nfrom pymysqlreplication import BinLogStreamReader\nfrom pymysqlreplication.row_event import UpdateRowsEvent, DeleteRowsEvent, WriteRowsEvent\nfrom datetime import datetime\n\nfrom nyaa import create_app, db, models\nfrom nyaa.models import TorrentFlags\napp = create_app('config')\n\nimport sys\nimport json\nimport time\nimport logging\nfrom statsd import StatsClient\nfrom threading import Thread\nfrom queue import Queue, Empty\n\nlogging.basicConfig(format='%(asctime)s %(levelname)s %(name)s - %(message)s')\n\nlog = logging.getLogger('sync_es')\nlog.setLevel(logging.INFO)\n\n# config in json, 2lazy to argparse\nif len(sys.argv) != 2:\n    print(\"need config.json location\", file=sys.stderr)\n    sys.exit(-1)\nwith open(sys.argv[1]) as f:\n    config = json.load(f)\n\n# goes to netdata or other statsd listener\nstats = StatsClient('localhost', 8125, prefix=\"sync_es\")\n\n#logging.getLogger('elasticsearch').setLevel(logging.DEBUG)\n\n# in prod want in /var/lib somewhere probably\nSAVE_LOC = config.get('save_loc', \"/tmp/pos.json\")\nMYSQL_HOST = config.get('mysql_host', '127.0.0.1')\nMYSQL_PORT = config.get('mysql_port', 3306)\nMYSQL_USER = config.get('mysql_user', 'root')\nMYSQL_PW = config.get('mysql_password', 'dunnolol')\nNT_DB = config.get('database', 'nyaav2')\nINTERNAL_QUEUE_DEPTH = config.get('internal_queue_depth', 10000)\nES_CHUNK_SIZE = config.get('es_chunk_size', 10000)\n# seconds since no events happening to flush to es. remember this also\n# interacts with es' refresh_interval setting.\nFLUSH_INTERVAL = config.get('flush_interval', 5)\n\ndef pad_bytes(in_bytes, size):\n    return in_bytes + (b'\\x00' * max(0, size - len(in_bytes)))\n\ndef reindex_torrent(t, index_name):\n    # XXX annoyingly different from import_to_es, and\n    # you need to keep them in sync manually.\n    f = t['flags']\n    doc = {\n        \"id\": t['id'],\n        \"display_name\": t['display_name'],\n        \"created_time\": t['created_time'],\n        \"updated_time\": t['updated_time'],\n        \"description\": t['description'],\n        # not analyzed but included so we can render magnet links\n        # without querying sql again.\n        \"info_hash\": pad_bytes(t['info_hash'], 20).hex(),\n        \"filesize\": t['filesize'],\n        \"uploader_id\": t['uploader_id'],\n        \"main_category_id\": t['main_category_id'],\n        \"sub_category_id\": t['sub_category_id'],\n        \"comment_count\": t['comment_count'],\n        # XXX all the bitflags are numbers\n        \"anonymous\": bool(f & TorrentFlags.ANONYMOUS),\n        \"trusted\": bool(f & TorrentFlags.TRUSTED),\n        \"remake\": bool(f & TorrentFlags.REMAKE),\n        \"complete\": bool(f & TorrentFlags.COMPLETE),\n        # TODO instead of indexing and filtering later\n        # could delete from es entirely. Probably won't matter\n        # for at least a few months.\n        \"hidden\": bool(f & TorrentFlags.HIDDEN),\n        \"deleted\": bool(f & TorrentFlags.DELETED),\n        \"has_torrent\": bool(t['has_torrent']),\n    }\n    # update, so we don't delete the stats if present\n    return {\n        '_op_type': 'update',\n        '_index': index_name,\n        '_id': str(t['id']),\n        \"doc\": doc,\n        \"doc_as_upsert\": True\n    }\n\ndef reindex_stats(s, index_name):\n    # update the torrent at torrent_id, assumed to exist;\n    # this will always be the case if you're reading the binlog\n    # in order; the foreign key constraint on torrent_id prevents\n    # the stats row from existing if the torrent isn't around.\n    return {\n        '_op_type': 'update',\n        '_index': index_name,\n        '_id': str(s['torrent_id']),\n        \"doc\": {\n            \"stats_last_updated\": s[\"last_updated\"],\n            \"download_count\": s[\"download_count\"],\n            \"leech_count\": s['leech_count'],\n            \"seed_count\": s['seed_count'],\n        }}\n\ndef delet_this(row, index_name):\n    return {\n        \"_op_type\": 'delete',\n        '_index': index_name,\n        '_id': str(row['values']['id'])}\n\n# we could try to make this script robust to errors from es or mysql, but since\n# the only thing we can do is \"clear state and retry\", it's easier to leave\n# this to the supervisor. If we we carrying around heavier state in-process,\n# it'd be more worth it to handle errors ourselves.\n# \n# Apparently there's no setDefaultUncaughtExceptionHandler in threading, and\n# sys.excepthook is also broken, so this gives us the same\n# exit-if-anything-happens semantics. \nclass ExitingThread(Thread):\n    def run(self):\n        try:\n            self.run_happy()\n        except:\n            log.exception(\"something happened\")\n            # sys.exit only exits the thread, lame\n            import os\n            os._exit(1)\n\nclass BinlogReader(ExitingThread):\n    # write_buf is the Queue we communicate with\n    def __init__(self, write_buf):\n        Thread.__init__(self)\n        self.write_buf = write_buf\n\n    def run_happy(self):\n        with open(SAVE_LOC) as f:\n            pos = json.load(f)\n\n        stream = BinLogStreamReader(\n                # TODO parse out from config.py or something\n                connection_settings = {\n                    'host': MYSQL_HOST,\n                    'port': MYSQL_PORT,\n                    'user': MYSQL_USER,\n                    'passwd': MYSQL_PW\n                },\n                server_id=10, # arbitrary\n                # only care about this database currently\n                only_schemas=[NT_DB],\n                # these tables in the database\n                only_tables=[\"nyaa_torrents\", \"nyaa_statistics\", \"sukebei_torrents\", \"sukebei_statistics\"],\n                # from our save file\n                resume_stream=True,\n                log_file=pos['log_file'],\n                log_pos=pos['log_pos'],\n                # skip the other stuff like table mapping\n                only_events=[UpdateRowsEvent, DeleteRowsEvent, WriteRowsEvent],\n                # if we're at the head of the log, block until something happens\n                # note it'd be nice to block async-style instead, but the mainline\n                # binlogreader is synchronous. there is an (unmaintained?) fork\n                # using aiomysql if anybody wants to revive that.\n                blocking=True)\n\n        log.info(f\"reading binlog from {stream.log_file}/{stream.log_pos}\")\n\n        for event in stream:\n            # save the pos of the stream and timestamp with each message, so we\n            # can commit in the other thread. and keep track of process latency\n            pos = (stream.log_file, stream.log_pos, event.timestamp)\n            with stats.pipeline() as s:\n                s.incr('total_events')\n                s.incr(f\"event.{event.table}.{type(event).__name__}\")\n                s.incr('total_rows', len(event.rows))\n                s.incr(f\"rows.{event.table}.{type(event).__name__}\", len(event.rows))\n                # XXX not a \"timer\", but we get a histogram out of it\n                s.timing(f\"rows_per_event.{event.table}.{type(event).__name__}\", len(event.rows))\n\n            if event.table == \"nyaa_torrents\" or event.table == \"sukebei_torrents\":\n                if event.table == \"nyaa_torrents\":\n                    index_name = \"nyaa\"\n                else:\n                    index_name = \"sukebei\"\n                if type(event) is WriteRowsEvent:\n                    for row in event.rows:\n                        self.write_buf.put(\n                                (pos, reindex_torrent(row['values'], index_name)),\n                                block=True)\n                elif type(event) is UpdateRowsEvent:\n                    # UpdateRowsEvent includes the old values too, but we don't care\n                    for row in event.rows:\n                        self.write_buf.put(\n                                (pos, reindex_torrent(row['after_values'], index_name)),\n                                block=True)\n                elif type(event) is DeleteRowsEvent:\n                    # ok, bye\n                    for row in event.rows:\n                        self.write_buf.put((pos, delet_this(row, index_name)), block=True)\n                else:\n                    raise Exception(f\"unknown event {type(event)}\")\n            elif event.table == \"nyaa_statistics\" or event.table == \"sukebei_statistics\":\n                if event.table == \"nyaa_statistics\":\n                    index_name = \"nyaa\"\n                else:\n                    index_name = \"sukebei\"\n                if type(event) is WriteRowsEvent:\n                    for row in event.rows:\n                        self.write_buf.put(\n                                (pos, reindex_stats(row['values'], index_name)),\n                                block=True)\n                elif type(event) is UpdateRowsEvent:\n                    for row in event.rows:\n                        self.write_buf.put(\n                                (pos, reindex_stats(row['after_values'], index_name)),\n                                block=True)\n                elif type(event) is DeleteRowsEvent:\n                    # uh ok. Assume that the torrent row will get deleted later,\n                    # which will clean up the entire es \"torrent\" document\n                    pass\n                else:\n                    raise Exception(f\"unknown event {type(event)}\")\n            else:\n              raise Exception(f\"unknown table {s.table}\")\n\nclass EsPoster(ExitingThread):\n    # read_buf is the queue of stuff to bulk post\n    def __init__(self, read_buf, chunk_size=1000, flush_interval=5):\n        Thread.__init__(self)\n        self.read_buf = read_buf\n        self.chunk_size = chunk_size\n        self.flush_interval = flush_interval\n\n    def run_happy(self):\n        es = Elasticsearch(hosts=app.config['ES_HOSTS'], timeout=30)\n\n        last_save = time.time()\n        since_last = 0\n        # XXX keep track of last posted position for save points, awkward\n        posted_log_file = None\n        posted_log_pos = None\n\n        while True:\n            actions = []\n            now = time.time()\n            # wait up to flush_interval seconds after starting the batch\n            deadline = now + self.flush_interval\n            while len(actions) < self.chunk_size and now < deadline:\n                timeout = deadline - now\n                try:\n                    # grab next event from queue with metadata that creepily\n                    # updates, surviving outside the scope of the loop\n                    ((log_file, log_pos, timestamp), action) = \\\n                            self.read_buf.get(block=True, timeout=timeout)\n                    actions.append(action)\n                    now = time.time()\n                except Empty:\n                    # nothing new for the whole interval\n                    break\n\n            if actions:\n                # XXX \"time\" to get histogram of no events per bulk\n                stats.timing('actions_per_bulk', len(actions))\n\n                try:\n                    with stats.timer('post_bulk'):\n                        bulk(es, actions, chunk_size=self.chunk_size)\n                except BulkIndexError as bie:\n                     # in certain cases where we're really out of sync, we update a\n                     # stat when the torrent doc is, causing a \"document missing\"\n                     # error from es, with no way to suppress that server-side.\n                     # Thus ignore that type of error if it's the only problem\n                    for e in bie.errors:\n                        try:\n                            if e['update']['error']['type'] != 'document_missing_exception':\n                                raise bie\n                        except KeyError:\n                            raise bie\n\n                # how far we've gotten in the actual log\n                posted_log_file = log_file\n                posted_log_pos = log_pos\n\n                # how far we're behind, wall clock\n                stats.gauge('process_latency', int((time.time() - timestamp) * 1000))\n            else:\n                log.debug(\"no changes...\")\n\n            since_last += len(actions)\n            # TODO instead of this manual timeout loop, could move this to another queue/thread\n            if posted_log_file is not None and (since_last >= 10000 or (time.time() - last_save) > 10):\n                log.info(f\"saving position {log_file}/{log_pos}, {time.time() - timestamp:,.3f} seconds behind\")\n                with stats.timer('save_pos'):\n                    with open(SAVE_LOC, 'w') as f:\n                        json.dump({\"log_file\": posted_log_file, \"log_pos\": posted_log_pos}, f)\n                last_save = time.time()\n                since_last = 0\n                posted_log_file = None\n                posted_log_pos = None\n\n# in-memory queue between binlog and es. The bigger it is, the more events we\n# can parse in memory while waiting for es to catch up, at the expense of heap.\nbuf = Queue(maxsize=INTERNAL_QUEUE_DEPTH)\n\nreader = BinlogReader(buf)\nreader.daemon = True\nwriter = EsPoster(buf, chunk_size=ES_CHUNK_SIZE, flush_interval=FLUSH_INTERVAL)\nwriter.daemon = True\nreader.start()\nwriter.start()\n\n# on the main thread, poll the queue size for monitoring\nwhile True:\n    stats.gauge('queue_depth', buf.qsize())\n    time.sleep(1)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "torrents",
          "type": "tree",
          "content": null
        },
        {
          "name": "trackers.txt",
          "type": "blob",
          "size": 0.3359375,
          "content": "# These trackers will be added to all generated torrents,\n# to ensure the torrents' continued life in case one or two die.\n# One tracker per line, lines starting with # are disregarded\nudp://open.stealth.si:80/announce\nudp://tracker.opentrackr.org:1337/announce\nudp://tracker.coppersurfer.tk:6969/announce\nudp://exodus.desync.com:6969/announce\n"
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "uwsgi.ini",
          "type": "blob",
          "size": 0.482421875,
          "content": "[uwsgi]\n# socket = [addr:port]\nsocket = uwsgi.sock\nchmod-socket = 664\n\n# logging\ndisable-logging = True\n#logger = file:uwsgi.log\n\n# Base application directory\n#chdir = .\n\n# WSGI module and callable\n# module = [wsgi_module_name]:[application_callable_name]\nmodule = WSGI:app\n\n# master = [master process (true of false)]\nmaster = true\n\n# debugging\ncatch-exceptions = True\n\n# performance\nprocesses = 4\nbuffer-size = 8192\n\nloop = gevent\nsocket-timeout = 10\ngevent = 1000\ngevent-monkey-patch = true\n"
        }
      ]
    }
  ]
}