{
  "metadata": {
    "timestamp": 1736559743053,
    "page": 447,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "novnc/websockify",
      "stars": 3976,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.08984375,
          "content": "*.pyc\n*.o\n*.so\n.project\n.pydevproject\ntarget.cfg\ntarget.cfg.d\n.tox\n\nbuild/\ndist/\n*.egg-info\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "CHANGES.txt",
          "type": "blob",
          "size": 3.7744140625,
          "content": "Changes\n=======\n\n0.12.0\n------\n\n* The simplejson module is no longer needed for redis token support\n* redis tokens can now be either JSON or plain text\n* websockify can now listen to a Unix socket for incoming connections\n\n0.11.0\n------\n\n* Command line now supports disabling directory listings\n* Basic Dockerfile included\n\n0.10.0\n------\n\n* Python 3.4 or newer is now required\n* Empty message frames are now supported\n* Tokens can now specify a Unix domain socket file to connect to\n* Time limits on JWT tokens are now respected\n* Whitespace is better tolerated in token files\n* Lots of minor fixes...\n\n0.9.0\n-----\n\n* Base64 support removed and binary mode is now required\n* Low level WebSocket protocol handling now has its own class\n* Authentication now optionally required for web server\n* Server hostname can be used as the token\n* JWT/JWS/JWE can be used for the token\n* redis can be used for the token\n* Can now log to syslog\n* Improved latency by disabling Nagle for proxied connection\n* Added client certificate authentication\n* Support for password protected certificate key file\n* TLS ciphers and options are now configurable\n* Can be invoked via inetd\n* Lots of minor fixes...\n\n0.8.0\n-----\n\n* Make websockify properly terminate children on SIGTERM (#226)\n* Remove logging in signal handlers (this can cause Python to hang under certain conditions) (#219)\n* Make it easier to log to a file (#205)\n* Add support for IPv6 addresses in tokens in the TokenFile token plugins (#197)\n* Improve auth plugin framework to enable better support for HTTP auth (#194, #201)\n* Fix bug in JSONTokenAPI token plugin (#192)\n* Fix a missing variable in the exception handler (#178)\n\n0.7.0\n-----\n\n* Python 3 support fixes (#140, #155, #159)\n* Generic token-parsing plugins support (#162)\n* Generic authentication plugins support (#172)\n* Fixed frame corruption on big-endian systems (#161)\n* Support heartbeats (via PING) and automatic responses to PONG (#169)\n* Automatically reject unmasked client frames by default (strict mode) (#174)\n* Automatically restart interrupted select calls (#175)\n* Make 'run' respect environment settings (including virtualenv) (#176)\n\n0.6.1 - May 11, 2015\n--------------------\n\n* **PATCH RELEASE**: Fixes a bug causing file_only to not be passed properly\n\n0.6.0 - Feb 18, 2014\n--------------------\n\n* **NOTE** : 0.6.0 will break existing code that sub-classes WebsocketProxy\n* Refactor to use standard SocketServer RequestHandler design\n* Fix zombie process bug on certain systems when using multiprocessing\n* Add better unit tests\n* Log information via python `logging` module\n\n0.5.1 - Jun 27, 2013\n--------------------\n\n * use upstream einaros/ws (>=0.4.27) with websockify.js\n * file_only and no_parent security options for WSRequestHandler\n * Update build of web-socket-js (c0855c6cae)\n * add include/web-socket-js-project submodule to gimite/web-socket-js\n   for DSFG compliance.\n * drop Hixie protocol support\n\n0.4.1 - Mar 12, 2013\n--------------------\n\n * ***NOTE*** : 0.5.0 will drop Hixie protocol support\n * add include/ directory and remove some dev files from source\n   distribution.\n\n0.4.0 - Mar 12, 2013\n--------------------\n\n * ***NOTE*** : 0.5.0 will drop Hixie protocol support\n * use Buffer base64 support in Node.js implementation\n\n0.3.0 - Jan 15, 2013\n--------------------\n\n * refactor into modules: websocket, websocketproxy\n * switch to web-socket-js that uses IETF 6455\n * change to MPL 2.0 license for include/*.js\n * fix session recording\n\n0.2.1 - Oct 15, 2012\n--------------------\n\n * re-released with updated version number\n\n0.2.0 - Sep 17, 2012\n--------------------\n\n * Binary data support in websock.js\n * Target config file/dir and multiple targets with token selector\n * IPv6 fixes\n * SSL target support\n * Proxy to/from unix socket\n\n\n0.1.0 - May 11, 2012\n--------------------\n\n * Initial versioned release.\n\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 7.4716796875,
          "content": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.037109375,
          "content": "include CHANGES.txt README.md COPYING\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.1494140625,
          "content": "TARGETS=rebind.so\nCFLAGS += -fPIC\n\nall: $(TARGETS)\n\nrebind.so: rebind.o\n\t$(CC) $(LDFLAGS) $^ -shared -fPIC -ldl -o $@\n\nclean:\n\trm -f rebind.o rebind.so\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.6015625,
          "content": "## websockify: WebSockets support for any application/server\n\nwebsockify was formerly named wsproxy and was part of the\n[noVNC](https://github.com/novnc/noVNC) project.\n\nAt the most basic level, websockify just translates WebSockets traffic\nto normal socket traffic. Websockify accepts the WebSockets handshake,\nparses it, and then begins forwarding traffic between the client and\nthe target in both directions.\n\n### News/help/contact\n\nNotable commits, announcements and news are posted to\n<a href=\"http://www.twitter.com/noVNC\">@noVNC</a>\n\nIf you are a websockify developer/integrator/user (or want to be)\nplease join the <a\nhref=\"https://groups.google.com/forum/?fromgroups#!forum/novnc\">noVNC/websockify\ndiscussion group</a>\n\nBugs and feature requests can be submitted via [github\nissues](https://github.com/novnc/websockify/issues).\n\nIf you want to show appreciation for websockify you could donate to a great\nnon-profits such as: [Compassion\nInternational](http://www.compassion.com/), [SIL](http://www.sil.org),\n[Habitat for Humanity](http://www.habitat.org), [Electronic Frontier\nFoundation](https://www.eff.org/), [Against Malaria\nFoundation](http://www.againstmalaria.com/), [Nothing But\nNets](http://www.nothingbutnets.net/), etc. Please tweet <a\nhref=\"http://www.twitter.com/noVNC\">@noVNC</a> if you do.\n\n### WebSockets binary data\n\nStarting with websockify 0.5.0, only the HyBi / IETF\n6455 WebSocket protocol is supported. There is no support for the older\nBase64 encoded data format.\n\n\n### Encrypted WebSocket connections (wss://)\n\nTo encrypt the traffic using the WebSocket 'wss://' URI scheme you need to\ngenerate a certificate and key for Websockify to load. By default, Websockify\nloads a certificate file name `self.pem` but the `--cert=CERT` and `--key=KEY`\noptions can override the file name. You can generate a self-signed certificate\nusing openssl. When asked for the common name, use the hostname of the server\nwhere the proxy will be running:\n\n```\nopenssl req -new -x509 -days 365 -nodes -out self.pem -keyout self.pem\n```\n\nFor a self-signed certificate to work, you need to make your client/browser\nunderstand it. You can do this by installing it as accepted certificate, or by\nusing that same certificate for a HTTPS connection to which you navigate first\nand approve. Browsers generally don't give you the \"trust certificate?\" prompt\nby opening a WSS socket with invalid certificate, hence you need to have it\naccept it by either of those two methods. \n\nThe ports may be considered as distinguishing connections by the browser,\nfor example, if your website url is https://my.local:8443 and your WebSocket \nurl is wss://my.local:8001, first browse to https://my.local:8001, add the \nexception, then browse to https://my.local:8443 and add another exception.\nThen an html page served over :8443 will be able to open WSS to :8001\n\nIf you have a commercial/valid SSL certificate with one or more intermediate\ncertificates, concat them into one file, server certificate first, then the\nintermediate(s) from the CA, etc. Point to this file with the `--cert` option\nand then also to the key with `--key`. Finally, use `--ssl-only` as needed.\n\n\n### Additional websockify features\n\nThese are not necessary for the basic operation.\n\n* Daemonizing: When the `-D` option is specified, websockify runs\n  in the background as a daemon process.\n\n* SSL (the wss:// WebSockets URI): This is detected automatically by\n  websockify by sniffing the first byte sent from the client and then\n  wrapping the socket if the data starts with '\\x16' or '\\x80'\n  (indicating SSL).\n\n* Session recording: This feature that allows recording of the traffic\n  sent and received from the client to a file using the `--record`\n  option.\n\n* Mini-webserver: websockify can detect and respond to normal web\n  requests on the same port as the WebSockets proxy. This functionality\n  is activated with the `--web DIR` option where DIR is the root of the\n  web directory to serve.\n\n* Wrap a program: see the \"Wrap a Program\" section below.\n\n* Log files: websockify can save all logging information in a file.\n  This functionality is activated with the `--log-file FILE` option\n  where FILE is the file where the logs should be saved.\n\n* Authentication plugins: websockify can demand authentication for\n  websocket connections and, if you use `--web-auth`, also for normal\n  web requests. This functionality is activated with the\n  `--auth-plugin CLASS` and `--auth-source ARG` options, where CLASS is\n  usually one from auth_plugins.py and ARG is the plugin's configuration.\n\n* Token plugins: a single instance of websockify can connect clients to\n  multiple different pre-configured targets, depending on the token sent\n  by the client using the `token` URL parameter, or the hostname used to\n  reach websockify, if you use `--host-token`. This functionality is\n  activated with the `--token-plugin CLASS` and `--token-source ARG`\n  options, where CLASS is usually one from token_plugins.py and ARG is\n  the plugin's configuration.\n\n### Other implementations of websockify\n\nThe primary implementation of websockify is in python. There are\nseveral alternate implementations in other languages available in\nour sister repositories [websockify-js](https://github.com/novnc/websockify-js)\n(JavaScript/Node.js) and [websockify-other](https://github.com/novnc/websockify-other)\n (C, Clojure, Ruby).\n\nIn addition there are several other external projects that implement\nthe websockify \"protocol\". See the alternate implementation [Feature\nMatrix](https://github.com/novnc/websockify/wiki/Feature_Matrix) for\nmore information.\n\n\n### Wrap a Program\n\nIn addition to proxying from a source address to a target address\n(which may be on a different system), websockify has the ability to\nlaunch a program on the local system and proxy WebSockets traffic to\na normal TCP port owned/bound by the program.\n\nThis is accomplished by the LD_PRELOAD library (`rebind.so`)\nwhich intercepts bind() system calls by the program. The specified\nport is moved to a new localhost/loopback free high port. websockify\nthen proxies WebSockets traffic directed to the original port to the\nnew (moved) port of the program.\n\nThe program wrap mode is invoked by replacing the target with `--`\nfollowed by the program command line to wrap.\n\n    `./run 2023 -- PROGRAM ARGS`\n\nThe `--wrap-mode` option can be used to indicate what action to take\nwhen the wrapped program exits or daemonizes.\n\nHere is an example of using websockify to wrap the vncserver command\n(which backgrounds itself) for use with\n[noVNC](https://github.com/novnc/noVNC):\n\n    `./run 5901 --wrap-mode=ignore -- vncserver -geometry 1024x768 :1`\n\nHere is an example of wrapping telnetd (from krb5-telnetd). telnetd\nexits after the connection closes so the wrap mode is set to respawn\nthe command:\n\n    `sudo ./run 2023 --wrap-mode=respawn -- telnetd -debug 2023`\n\nThe `wstelnet.html` page in the [websockify-js](https://github.com/novnc/websockify-js)\nproject demonstrates a simple WebSockets based telnet client (use\n'localhost' and '2023' for the host and port respectively).\n\n\n### Installing websockify\n\nDownload one of the releases or the latest development version, extract\nit and run `python3 setup.py install` as root in the directory where you\nextracted the files. Normally, this will also install numpy for better\nperformance, if you don't have it installed already. However, numpy is\noptional. If you don't want to install numpy or if you can't compile it,\nyou can edit setup.py and remove the `install_requires=['numpy'],` line\nbefore running `python3 setup.py install`.\n\nAfterwards, websockify should be available in your path. Run\n`websockify --help` to confirm it's installed correctly.\n\n\n### Running with Docker/Podman\nYou can also run websockify using Docker, Podman, Singularity, udocker or\nyour favourite container runtime that support OCI container images.\n\nThe entrypoint of the image is the `run` command.\n\nTo build the image:\n```\n./docker/build.sh\n```\n\nOnce built you can just launch it with the same\narguments you would give to the `run` command and taking care of\nassigning the port mappings:\n```\ndocker run -it --rm -p <port>:<container_port> novnc/websockify <container_port> <run_arguments>\n```\n\nFor example to forward traffic from local port 7000 to 10.1.1.1:5902\nyou can use:\n```\ndocker run -it --rm -p 7000:80 novnc/websockify 80 10.1.1.1:5902\n```\n\nIf you need to include files, like for example for the `--web` or `--cert`\noptions you can just mount the required files in the `/data` volume and then\nyou can reference them in the usual way:\n```\ndocker run -it --rm -p 443:443 -v websockify-data:/data novnc/websockify --cert /data/self.pem --web /data/noVNC :443 --token-plugin TokenRedis --token-source myredis.local:6379 --ssl-only --ssl-version tlsv1_2\n```\n"
        },
        {
          "name": "Windows",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "rebind",
          "type": "blob",
          "size": 0.4140625,
          "content": "#!/usr/bin/env bash\n\nusage() {\n    echo \"Usage: $(basename $0) OLD_PORT NEW_PORT COMMAND_LINE\"\n    echo\n    echo \"Launch COMMAND_LINE, but intercept system calls to bind\"\n    echo \"to OLD_PORT and instead bind them to localhost:NEW_PORT\"\n    exit 2\n}\n\n# Parameter defaults\nmydir=$(readlink -f $(dirname ${0}))\n\nexport REBIND_PORT_OLD=\"${1}\"; shift\nexport REBIND_PORT_NEW=\"${1}\"; shift\n\nLD_PRELOAD=${mydir}/rebind.so \"${@}\"\n\n"
        },
        {
          "name": "rebind.c",
          "type": "blob",
          "size": 2.8193359375,
          "content": "/*\n * rebind: Intercept bind calls and bind to a different port\n * Copyright 2010 Joel Martin\n * Licensed under LGPL version 3 (see docs/LICENSE.LGPL-3)\n *\n * Overload (LD_PRELOAD) bind system call. If REBIND_PORT_OLD and\n * REBIND_PORT_NEW environment variables are set then bind on the new\n * port (of localhost) instead of the old port. \n *\n * This allows a bridge/proxy (such as websockify) to run on the old port and\n * translate traffic to/from the new port.\n *\n * Usage:\n *     LD_PRELOAD=./rebind.so \\\n *     REBIND_PORT_OLD=23 \\\n *     REBIND_PORT_NEW=2023 \\\n *     program\n */\n\n//#define DO_DEBUG 1\n\n#include <stdio.h>\n#include <stdlib.h>\n\n#define __USE_GNU 1  // Pull in RTLD_NEXT\n#include <dlfcn.h>\n\n#include <string.h>\n#include <netinet/in.h>\n\n\n#if defined(DO_DEBUG)\n#define DEBUG(...) \\\n    fprintf(stderr, \"rebind: \"); \\\n    fprintf(stderr, __VA_ARGS__);\n#else\n#define DEBUG(...)\n#endif\n\n\nint bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen)\n{\n    static void * (*func)();\n    int do_move = 0;\n    struct sockaddr_in * addr_in = (struct sockaddr_in *)addr;\n    struct sockaddr_in addr_tmp;\n    socklen_t addrlen_tmp;\n    char * PORT_OLD, * PORT_NEW, * end1, * end2;\n    int ret, oldport, newport, askport = htons(addr_in->sin_port);\n    uint32_t askaddr = htons(addr_in->sin_addr.s_addr);\n    if (!func) func = (void *(*)()) dlsym(RTLD_NEXT, \"bind\");\n\n    DEBUG(\">> bind(%d, _, %d), askaddr %d, askport %d\\n\",\n          sockfd, addrlen, askaddr, askport);\n\n    /* Determine if we should move this socket */\n    if (addr_in->sin_family == AF_INET) {\n        // TODO: support IPv6\n        PORT_OLD = getenv(\"REBIND_OLD_PORT\");\n        PORT_NEW = getenv(\"REBIND_NEW_PORT\");\n        if (PORT_OLD && (*PORT_OLD != '\\0') &&\n            PORT_NEW && (*PORT_NEW != '\\0')) {\n            oldport = strtol(PORT_OLD, &end1, 10);\n            newport = strtol(PORT_NEW, &end2, 10);\n            if (oldport && (*end1 == '\\0') &&\n                newport && (*end2 == '\\0') &&\n                (oldport == askport)) {\n                do_move = 1;\n            }\n        }\n    }\n\n    if (! do_move) {\n        /* Just pass everything right through to the real bind */\n        ret = (long) func(sockfd, addr, addrlen);\n        DEBUG(\"<< bind(%d, _, %d) ret %d\\n\", sockfd, addrlen, ret);\n        return ret;\n    }\n\n    DEBUG(\"binding fd %d on localhost:%d instead of 0x%x:%d\\n\",\n        sockfd, newport, ntohl(addr_in->sin_addr.s_addr), oldport);\n\n    /* Use a temporary location for the new address information */\n    addrlen_tmp = sizeof(addr_tmp);\n    memcpy(&addr_tmp, addr, addrlen_tmp);\n\n    /* Bind to other port on the loopback instead */\n    addr_tmp.sin_addr.s_addr = htonl(INADDR_LOOPBACK);\n    addr_tmp.sin_port = htons(newport);\n    ret = (long) func(sockfd, &addr_tmp, addrlen_tmp);\n\n    DEBUG(\"<< bind(%d, _, %d) ret %d\\n\", sockfd, addrlen, ret);\n    return ret;\n}\n"
        },
        {
          "name": "run",
          "type": "blob",
          "size": 0.076171875,
          "content": "#!/usr/bin/env sh\nset -e\ncd \"$(dirname \"$0\")\"\nexec python3 -m websockify \"$@\"\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.3681640625,
          "content": "from setuptools import setup, find_packages\n\nversion = '0.12.0'\nname = 'websockify'\nlong_description = open(\"README.md\").read() + \"\\n\" + \\\n    open(\"CHANGES.txt\").read() + \"\\n\"\n\nsetup(name=name,\n      version=version,\n      description=\"Websockify.\",\n      long_description=long_description,\n      long_description_content_type=\"text/markdown\",\n      classifiers=[\n          \"Programming Language :: Python\",\n          \"Programming Language :: Python :: 3\",\n          \"Programming Language :: Python :: 3 :: Only\",\n          \"Programming Language :: Python :: 3.6\",\n          \"Programming Language :: Python :: 3.7\",\n          \"Programming Language :: Python :: 3.8\",\n          \"Programming Language :: Python :: 3.9\",\n          \"Programming Language :: Python :: 3.10\",\n          \"Programming Language :: Python :: 3.11\",\n          \"Programming Language :: Python :: 3.12\",\n        ],\n      keywords='noVNC websockify',\n      license='LGPLv3',\n      url=\"https://github.com/novnc/websockify\",\n      author=\"Joel Martin\",\n      author_email=\"github@martintribe.org\",\n\n      packages=['websockify'],\n      include_package_data=True,\n      install_requires=[\n        'numpy', 'requests',\n        'jwcrypto',\n        'redis',\n        ],\n      zip_safe=False,\n      entry_points={\n        'console_scripts': [\n            'websockify = websockify.websocketproxy:websockify_init',\n        ]\n      },\n    )\n"
        },
        {
          "name": "test-requirements.txt",
          "type": "blob",
          "size": 0.0556640625,
          "content": "mock\nnose2\nsix\nredis\nwrapt<=1.12.1;python_version<=\"3.4\"\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.4970703125,
          "content": "# Tox (http://tox.testrun.org/) is a tool for running tests\n# in multiple virtualenvs. This configuration file will run the\n# test suite on all supported python versions. To use it, \"pip install tox\"\n# and then run \"tox\" from this directory.\n\n[tox]\nenvlist = py34\n\n[testenv]\ncommands = nosetests {posargs}\ndeps = -r{toxinidir}/test-requirements.txt\n\n# At some point we should enable this since tox expects it to exist but\n# the code will need pep8ising first.\n#[testenv:pep8]\n#commands = flake8\n#dep = flake8\n"
        },
        {
          "name": "websockify.py",
          "type": "blob",
          "size": 0.0029296875,
          "content": "run"
        },
        {
          "name": "websockify",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}