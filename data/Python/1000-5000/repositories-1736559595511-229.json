{
  "metadata": {
    "timestamp": 1736559595511,
    "page": 229,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pyinvoke/invoke",
      "stars": 4450,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.0390625,
          "content": "comment: false\ncoverage:\n  precision: 0\n"
        },
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.076171875,
          "content": "[run]\nbranch = True\ninclude =\n    invoke/*\n    tests/*\nomit = invoke/vendor/*\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.1484375,
          "content": "[flake8]\nexclude = invoke/vendor,sites,.git,build,dist,alt_env,appveyor\nignore = E124,E125,E128,E261,E301,E302,E303,E306,W503,E731\nmax-line-length = 79\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.099609375,
          "content": "_build\nbuild/\ndist/\n.coverage\n.tox\n*.egg-info\n*.py[cod]\nsrc/\nhtmlcov\ncoverage.xml\n.cache\n.mypy_cache/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.283203125,
          "content": "Copyright (c) 2020 Jeff Forcier.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimer in the documentation\n      and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.294921875,
          "content": "include LICENSE\ninclude README.rst\ninclude tasks.py\nrecursive-include invoke/completion *\nrecursive-include sites *\nrecursive-exclude sites/*/_build *\ninclude dev-requirements.txt\nrecursive-include * py.typed\nrecursive-include tests *\nrecursive-exclude * *.pyc *.pyo\nrecursive-exclude **/__pycache__ *\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 1.296875,
          "content": "|version| |python| |license| |ci| |coverage|\n\n.. |version| image:: https://img.shields.io/pypi/v/invoke\n    :target: https://pypi.org/project/invoke/\n    :alt: PyPI - Package Version\n.. |python| image:: https://img.shields.io/pypi/pyversions/invoke\n    :target: https://pypi.org/project/invoke/\n    :alt: PyPI - Python Version\n.. |license| image:: https://img.shields.io/pypi/l/invoke\n    :target: https://github.com/pyinvoke/invoke/blob/main/LICENSE\n    :alt: PyPI - License\n.. |ci| image:: https://img.shields.io/circleci/build/github/pyinvoke/invoke/main\n    :target: https://app.circleci.com/pipelines/github/pyinvoke/invoke\n    :alt: CircleCI\n.. |coverage| image:: https://img.shields.io/codecov/c/gh/pyinvoke/invoke\n    :target: https://app.codecov.io/gh/pyinvoke/invoke\n    :alt: Codecov\n\nWelcome to Invoke!\n==================\n\nInvoke is a Python (2.7 and 3.4+) library for managing shell-oriented\nsubprocesses and organizing executable Python code into CLI-invokable tasks. It\ndraws inspiration from various sources (``make``/``rake``, Fabric 1.x, etc) to\narrive at a powerful & clean feature set.\n\nTo find out what's new in this version of Invoke, please see `the changelog\n<https://pyinvoke.org/changelog.html#{}>`_.\n\nThe project maintainer keeps a `roadmap\n<https://bitprophet.org/projects#roadmap>`_ on his website.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.20703125,
          "content": "# Security Policy\n\n## Security contact information\n\nTo report a security vulnerability, please use the\n[Tidelift security contact](https://tidelift.com/security).\nTidelift will coordinate the fix and disclosure.\n"
        },
        {
          "name": "THOUGHTS.rst",
          "type": "blob",
          "size": 6.4658203125,
          "content": "==============================================\nRandom thoughts unsuitable for public docs yet\n==============================================\n\nCLI type mapping\n================\n\nSome loose thoughts on bridging the \"shell is strings, Python wants\nlists/dicts/integers/bools/etc\" problem.\n\nMethodologies\n-------------\n\n* Explicit mapping, as with ``argparse``: this particular flag turns into a\n  list/boolean/int/whatever. Because we're specifically mapping to function\n  keyword arguments, a little of that complexity can be removed, but generally\n  it'll look very similar. E.g.::\n\n    @args(foo=int)\n    def mytask(foo):\n        ...\n\n  would turn this::\n\n    $ invoke mytask --foo 7\n\n  into ``7``, not ``\"7\"``.\n* Introspection-based mapping, i.e. introspecting the default values of a\n  function signature and automatically transforming the CLI input. E.g.::\n\n    def mytask(foo=5):\n        ...\n\n  invoked as::\n\n    $ invoke mytask --foo 7\n\n  results in the Python value ``7`` instead of ``\"7\"``, just as with the\n  explicit example above.\n* Formatting-based mapping, i.e. having (optional) conventions in the string\n  format of an incoming flag argument that cause transformations to occur.\n  E.g. we could say that commas in an argument automatically trigger\n  transformation into a list of strings; thus the invocation::\n\n    $ invoke mytask --items a,b,c\n\n  would on the Python end turn into a call like this::\n\n    mytask(items=['a', 'b', 'c'])\n\nWhat to do?\n~~~~~~~~~~~\n\nWe haven't decided exactly how many of these to use -- we may end up using all\nthree of them as appropriate, with some useful/sensible default and the option\nto enable/disable things for power users. The trick is to balance\npower/features with becoming overly complicated to understand or utilize.\n\nOther types\n-----------\n\nThose examples cover integers/numbers, and lists/iterables. Strings are\nobviously easy/the default. What else is there?\n\n* Booleans: these are relatively simple too, either a flag exists (``True``) or\n  is omitted (``False``).\n  \n    * Could also work in a ``--foo`` vs ``--no-foo`` convention to help with\n      the inverse, i.e. values which should default to ``True`` and then need\n      to be turned \"off\" on the command line. E.g.::\n\n        def mytask(option=True):\n            ...\n\n      could result in having a flag called ``--no-option`` instead of\n      ``--option``. (Or possibly both.)\n\n* Dicts: these are tougher, but we could potentially use something like::\n\n    $ invoke mytask --dictopt key1=val1,key2=val2\n\n  resulting in::\n\n    mytask(dictopt={'key1': 'val1', 'key2': 'val2'})\n\n\nParameterizing tasks\n====================\n\nOld \"previous example\" (at time the below was split out of live docs, the\nactual previous example had been changed a lot and no longer applied)::\n\n    $ invoke test --module=foo test --module=bar\n    Cleaning\n    Testing foo\n    Cleaning\n    Testing bar\n\nThe previous example had a bit of duplication in how it was invoked; an\nintermediate use case is to bundle up that sort of parameterization into a\n\"meta\" task that itself invokes other tasks in a parameterized fashion.\n\nTK: API for this? at CLI level would have to be unorthodox invocation, e.g.::\n\n    @task\n    def foo(bar):\n        print(bar)\n\n    $ invoke --parameterize foo --param bar --values 1 2 3 4\n    1\n    2\n    3\n    4\n\nNote how there's no \"real\" invocation of ``foo`` in the normal sense. How to\nhandle partial application (e.g. runtime selection of other non-parameterized\narguments)? E.g.::\n\n    @task\n    def foo(bar, biz):\n        print(\"%s %s\" % (bar, biz))\n\n    $ invoke --parameterize foo --param bar --values 1 2 3 4 --biz \"And a\"\n    And a 1\n    And a 2\n    And a 3\n    And a 4\n\nThat's pretty clunky and foregoes any multi-task invocation. But how could we\nhandle multiple tasks here? If we gave each individual task flags for this,\nlike so::\n\n    $ invoke foo --biz \"And a\" --param foo --values 1 2 3 4\n\nWe could do multiple tasks, but then we're stomping on tasks' argument\nnamespaces (we've taken over ``param`` and ``values``). Really hate that.\n\n**IDEALLY** we'd still limit parameterization to library use since it's an\nadvanced-ish feature and frequently the parameterization vector is dynamic (aka\nnot the sort of thing you'd give at CLI anyway)\n\nProbably best to leave that in the intermediate docs and keep it lib level;\nit's mostly there for Fabric and advanced users, not something the average\nInvoke-only user would care about. Not worth the effort to make it work on CLI\nat this point.\n\n::\n\n    @task\n    def stuff(var):\n        print(var)\n\n    # NOTE: may need to be part of base executor since Collection has to know\n    # to pass the parameterization option/values into Executor().execute()?\n    class ParameterizedExecutor(Executor):\n        # NOTE: assumes single dimension of parameterization.\n        # Realistically would want e.g. {'name': [values], ...} structure and\n        # then do cross product or something\n        def execute(self, task, args, kwargs, parameter=None, values=None):\n            # Would be nice to generalize this?\n            if parameter:\n                # TODO: handle non-None parameter w/ None values (error)\n                # NOTE: this is where parallelization would occur; probably\n                # need to move into sub-method\n                for value in values:\n                    my_kwargs = dict(kwargs)\n                    my_kwargs[parameter] = value\n                    super(self, ParameterizedExecutor).execute(task, kwargs=my_kwargs)\n            else:\n                super(self, ParameterizedExecutor).execute(task, args, kwargs)\n\n\nGetting hairy: one task, with one pre-task, parameterized\n=========================================================\n\n::\n\n    @task\n    def setup():\n        print(\"Yay\")\n\n    @task(pre=[setup])\n    def build():\n        print(\"Woo\")\n\n    class OhGodExecutor(Executor):\n        def execute(self, task, args, kwargs, parameter, values):\n            # assume always parameterized meh\n            # Run pretasks once only, instead of once per parameter value\n            for pre in task.pre:\n                self.execute(self.collection[pre])\n            for value in values:\n                my_kwargs = dict(kwargs)\n                my_kwargs[parameter] = value\n                super(self, OhGodExecutor).execute(task, kwargs=my_kwargs)\n\n\nStill hairy: one task, with a pre-task that itself has a pre-task\n=================================================================\n\nAll the things: two tasks, each with pre-tasks, both parameterized\n==================================================================\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.0888671875,
          "content": "# No codecov comments at all, please - just the github 'checks' is sufficient\ncomment: off\n"
        },
        {
          "name": "dev-requirements.txt",
          "type": "blob",
          "size": 0.4248046875,
          "content": "# Install self before invocations to save a bit of time\n-e .\n# Invocations, for all sorts of things\ninvocations>=3.3\n# Coverage!\ncoverage>=6.2,<7\n# Docs\nreleases>=2\nalabaster==0.7.12\n# Testing\npytest-relaxed>=2\npytest-cov>=4\n# Formatting\n# Flake8 5.x seems to have an odd importlib-metadata incompatibility?\nflake8>=4,<5\nblack>=22.8,<22.9\n# Packaging\nsetuptools>56\n# Debuggery\nicecream>=2.1\n# typing\nmypy==0.971\ntypes-PyYAML==6.0.12.4\n"
        },
        {
          "name": "integration",
          "type": "tree",
          "content": null
        },
        {
          "name": "invoke",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.220703125,
          "content": "[tool.mypy]\n# check_untyped_defs = true\n# follow_imports_for_stubs = true\n# disallow_any_decorated = true\n# disallow_any_generics = true\n# disallow_any_unimported = true\n# disallow_incomplete_defs = true\n# disallow_subclassing_any = true\n# disallow_untyped_calls = true\n# disallow_untyped_decorators = true\ndisallow_untyped_defs = true\n# enable_error_code = [\n#     \"redundant-expr\",\n#     \"truthy-bool\",\n#     \"ignore-without-code\",\n#     \"unused-awaitable\",\n#\nexclude = [\n    \"integration/\", \"tests/\", \"setup.py\", \"sites/www/conf.py\", \"build/\",\n]\nignore_missing_imports = true\n# implicit_reexport = False\n# no_implicit_optional = true\n# pretty = true\n# show_column_numbers = true\n# show_error_codes = true\n# strict_equality = true\nwarn_incomplete_stub = true\nwarn_redundant_casts = true\n# warn_return_any = true\n# warn_unreachable = true\nwarn_unused_ignores = true\n\n[[tool.mypy.overrides]]\nmodule = \"invoke.vendor.*\"\nignore_errors = true\n\n[[tool.mypy.overrides]]\nmodule = \"alabaster\"\nignore_missing_imports = true\n\n[[tool.mypy.overrides]]\nmodule = \"icecream\"\nignore_missing_imports = true\n\n[[tool.mypy.overrides]]\nmodule = \"invocations\"\nignore_missing_imports = true\n\n[[tool.mypy.overrides]]\nmodule = \"pytest_relaxed\"\nignore_missing_imports = true\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.04296875,
          "content": "[pytest]\ntestpaths = tests\npython_files = *\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.6474609375,
          "content": "#!/usr/bin/env python\n\n# Support setuptools only, distutils has a divergent and more annoying API and\n# few folks will lack setuptools.\nfrom setuptools import setup, find_packages\n\n# Version info -- read without importing\n_locals = {}\nwith open(\"invoke/_version.py\") as fp:\n    exec(fp.read(), None, _locals)\nversion = _locals[\"__version__\"]\n\nexclude = []\n\n# Frankenstein long_description\nlong_description = \"\"\"\n{}\n\nFor a high level introduction, including example code, please see `our main\nproject website <https://pyinvoke.org>`_; or for detailed API docs, see `the\nversioned API website <https://docs.pyinvoke.org>`_.\n\"\"\".format(\n    open(\"README.rst\").read()\n)\n\n\nsetup(\n    name=\"invoke\",\n    version=version,\n    description=\"Pythonic task execution\",\n    license=\"BSD\",\n    long_description=long_description,\n    author=\"Jeff Forcier\",\n    author_email=\"jeff@bitprophet.org\",\n    url=\"https://pyinvoke.org\",\n    project_urls={\n        \"Docs\": \"https://docs.pyinvoke.org\",\n        \"Source\": \"https://github.com/pyinvoke/invoke\",\n        \"Issues\": \"https://github.com/pyinvoke/invoke/issues\",\n        \"Changelog\": \"https://www.pyinvoke.org/changelog.html\",\n        \"CI\": \"https://app.circleci.com/pipelines/github/pyinvoke/invoke\",\n    },\n    python_requires=\">=3.6\",\n    packages=find_packages(exclude=exclude),\n    include_package_data=True,\n    entry_points={\n        \"console_scripts\": [\n            \"invoke = invoke.main:program.run\",\n            \"inv = invoke.main:program.run\",\n        ]\n    },\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: System Administrators\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Topic :: Software Development\",\n        \"Topic :: Software Development :: Build Tools\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: System :: Software Distribution\",\n        \"Topic :: System :: Systems Administration\",\n    ],\n)\n"
        },
        {
          "name": "sites",
          "type": "tree",
          "content": null
        },
        {
          "name": "tasks.py",
          "type": "blob",
          "size": 3.9521484375,
          "content": "import os\nfrom typing import TYPE_CHECKING, Optional\n\nfrom invoke import Collection, task, Exit\n\nfrom invocations import ci, checks\nfrom invocations.docs import docs, www, sites, watch_docs\nfrom invocations.pytest import coverage as coverage_, test as test_\nfrom invocations.packaging import vendorize, release\n\nif TYPE_CHECKING:\n    from invoke import Context\n\n\n@task\ndef test(\n    c: \"Context\",\n    verbose: bool = False,\n    color: bool = True,\n    capture: str = \"no\",\n    module: Optional[str] = None,\n    k: Optional[str] = None,\n    x: bool = False,\n    opts: str = \"\",\n    pty: bool = True,\n) -> None:\n    \"\"\"\n    Run pytest. See `invocations.pytest.test` for details.\n\n    This is a simple wrapper around the abovementioned task, which makes a\n    couple minor defaults changes appropriate for this particular test suite,\n    such as:\n\n    - setting ``capture=no`` instead of ``capture=sys``, as we do a very large\n      amount of subprocess IO testing that even the ``sys``  capture screws up\n    - setting ``verbose=False`` because we have a large number of tests and\n      skipping verbose output by default is a ~20% time savings.)\n    \"\"\"\n    # TODO: update test suite to use c.config.run.in_stream = False globally.\n    # somehow.\n    test_(\n        c,\n        verbose=verbose,\n        color=color,\n        capture=capture,\n        module=module,\n        k=k,\n        x=x,\n        opts=opts,\n        pty=pty,\n    )\n\n\n# TODO: replace with invocations' once the \"call truly local tester\" problem is\n# solved (see other TODOs). For now this is just a copy/paste/modify.\n@task(help=test.help)  # type: ignore\ndef integration(\n    c: \"Context\", opts: Optional[str] = None, pty: bool = True\n) -> None:\n    \"\"\"\n    Run the integration test suite. May be slow!\n    \"\"\"\n    # Abort if no default shell on this system - implies some unusual dev\n    # environment. Certain entirely-standalone tests will fail w/o it, even if\n    # tests honoring config overrides (like the unit-test suite) don't.\n    shell = c.config.global_defaults()[\"run\"][\"shell\"]\n    if not c.run(\"which {}\".format(shell), hide=True, warn=True):\n        err = \"No {} on this system - cannot run integration tests! Try a container?\"  # noqa\n        raise Exit(err.format(shell))\n    opts = opts or \"\"\n    opts += \" integration/\"\n    test(c, opts=opts, pty=pty)\n\n\n@task\ndef coverage(\n    c: \"Context\", report: str = \"term\", opts: str = \"\", codecov: bool = False\n) -> None:\n    \"\"\"\n    Run pytest in coverage mode. See `invocations.pytest.coverage` for details.\n    \"\"\"\n    # Use our own test() instead of theirs.\n    # Also add integration test so this always hits both.\n    # (Not regression, since that's \"weird\" / doesn't really hit any new\n    # coverage points)\n    coverage_(\n        c,\n        report=report,\n        opts=opts,\n        tester=test,\n        additional_testers=[integration],\n        codecov=codecov,\n    )\n\n\n@task\ndef regression(c: \"Context\", jobs: int = 8) -> None:\n    \"\"\"\n    Run an expensive, hard-to-test-in-pytest run() regression checker.\n\n    :param int jobs: Number of jobs to run, in total. Ideally num of CPUs.\n    \"\"\"\n    os.chdir(\"integration/_support\")\n    cmd = \"seq {} | parallel -n0 --halt=now,fail=1 inv -c regression check\"\n    c.run(cmd.format(jobs))\n\n\nns = Collection(\n    test,\n    coverage,\n    integration,\n    regression,\n    vendorize,\n    release,\n    www,\n    docs,\n    sites,\n    watch_docs,\n    ci,\n    checks.blacken,\n    checks,\n)\nns.configure(\n    {\n        \"blacken\": {\n            # Skip vendor, build dirs when blackening.\n            # TODO: this is making it seem like I really do want an explicit\n            # arg/conf-opt in the blacken task for \"excluded paths\"...ha\n            \"find_opts\": \"-and -not \\( -path './invoke/vendor*' -or -path './build*' \\)\"  # noqa\n        },\n        \"packaging\": {\n            \"wheel\": True,\n            \"check_desc\": True,\n            \"changelog_file\": os.path.join(\n                www.configuration()[\"sphinx\"][\"source\"], \"changelog.rst\"\n            ),\n        },\n    }\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.3603515625,
          "content": "# Tox (http://tox.testrun.org/) is a tool for running tests\n# in multiple virtualenvs. This configuration file will run the\n# test suite on all supported python versions. To use it, \"pip install tox\"\n# and then run \"tox\" from this directory.\n\n[tox]\nenvlist = py36, py37, py38, py39, 'py310', py311\n\n[testenv]\ncommands =\n    pip install -r dev-requirements.txt\n    spec\n"
        }
      ]
    }
  ]
}