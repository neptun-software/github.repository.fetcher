{
  "metadata": {
    "timestamp": 1736559861361,
    "page": 616,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google-research/multinerf",
      "stars": 3679,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1044921875,
          "content": "internal/pycolmap\n__pycache__/\ninteral/__pycache__/\ntests/__pycache__/\n.DS_Store\n.vscode/\n.idea/\n__MACOSX/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.0771484375,
          "content": "# How to Contribute\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement (CLA). You (or your employer) retain the copyright to your\ncontribution; this simply gives us permission to use and redistribute your\ncontributions as part of the project. Head over to\n<https://cla.developers.google.com/> to see your current agreements on file or\nto sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code Reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows\n[Google's Open Source Community Guidelines](https://opensource.google/conduct/).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.2119140625,
          "content": "# MultiNeRF: A Code Release for Mip-NeRF 360, Ref-NeRF, and RawNeRF\n\n*This is not an officially supported Google product.*\n\nThis repository contains the code release for three CVPR 2022 papers:\n[Mip-NeRF 360](https://jonbarron.info/mipnerf360/),\n[Ref-NeRF](https://dorverbin.github.io/refnerf/), and\n[RawNeRF](https://bmild.github.io/rawnerf/).\nThis codebase was written by\nintegrating our internal implementations of Ref-NeRF and RawNeRF into our\nmip-NeRF 360 implementation. As such, this codebase should exactly\nreproduce the results shown in mip-NeRF 360, but may differ slightly when\nreproducing Ref-NeRF or RawNeRF results.\n\nThis implementation is written in [JAX](https://github.com/google/jax), and\nis a fork of [mip-NeRF](https://github.com/google/mipnerf).\nThis is research code, and should be treated accordingly.\n\n## Setup\n\n```\n# Clone the repo.\ngit clone https://github.com/google-research/multinerf.git\ncd multinerf\n\n# Make a conda environment.\nconda create --name multinerf python=3.9\nconda activate multinerf\n\n# Prepare pip.\nconda install pip\npip install --upgrade pip\n\n# Install requirements.\npip install -r requirements.txt\n\n# Manually install rmbrualla's `pycolmap` (don't use pip's! It's different).\ngit clone https://github.com/rmbrualla/pycolmap.git ./internal/pycolmap\n\n# Confirm that all the unit tests pass.\n./scripts/run_all_unit_tests.sh\n```\nYou'll probably also need to update your JAX installation to support GPUs or TPUs.\n\n## Running\n\nExample scripts for training, evaluating, and rendering can be found in\n`scripts/`. You'll need to change the paths to point to wherever the datasets\nare located. [Gin](https://github.com/google/gin-config) configuration files\nfor our model and some ablations can be found in `configs/`.\nAfter evaluating on the test set of each scene in one of the datasets, you can\nuse `scripts/generate_tables.ipynb` to produce error metrics across all scenes\nin the same format as was used in tables in the paper.\n\n### OOM errors\n\nYou may need to reduce the batch size (`Config.batch_size`) to avoid out of memory\nerrors. If you do this, but want to preserve quality, be sure to increase the number\nof training iterations and decrease the learning rate by whatever scale factor you\ndecrease batch size by.\n\n## Using your own data\n\nSummary: first, calculate poses. Second, train MultiNeRF. Third, render a result video from the trained NeRF model.\n\n1. Calculating poses (using COLMAP):\n```\nDATA_DIR=my_dataset_dir\nbash scripts/local_colmap_and_resize.sh ${DATA_DIR}\n```\n2. Training MultiNeRF:\n```\npython -m train \\\n  --gin_configs=configs/360.gin \\\n  --gin_bindings=\"Config.data_dir = '${DATA_DIR}'\" \\\n  --gin_bindings=\"Config.checkpoint_dir = '${DATA_DIR}/checkpoints'\" \\\n  --logtostderr\n```\n3. Rendering MultiNeRF:\n```\npython -m render \\\n  --gin_configs=configs/360.gin \\\n  --gin_bindings=\"Config.data_dir = '${DATA_DIR}'\" \\\n  --gin_bindings=\"Config.checkpoint_dir = '${DATA_DIR}/checkpoints'\" \\\n  --gin_bindings=\"Config.render_dir = '${DATA_DIR}/render'\" \\\n  --gin_bindings=\"Config.render_path = True\" \\\n  --gin_bindings=\"Config.render_path_frames = 480\" \\\n  --gin_bindings=\"Config.render_video_fps = 60\" \\\n  --logtostderr\n```\nYour output video should now exist in the directory `my_dataset_dir/render/`.\n\nSee below for more detailed instructions on either using COLMAP to calculate poses or writing your own dataset loader (if you already have pose data from another source, like SLAM or RealityCapture).\n\n### Running COLMAP to get camera poses\n\nIn order to run MultiNeRF on your own captured images of a scene, you must first run [COLMAP](https://colmap.github.io/install.html) to calculate camera poses. You can do this using our provided script `scripts/local_colmap_and_resize.sh`. Just make a directory `my_dataset_dir/` and copy your input images into a folder `my_dataset_dir/images/`, then run:\n```\nbash scripts/local_colmap_and_resize.sh my_dataset_dir\n```\nThis will run COLMAP and create 2x, 4x, and 8x downsampled versions of your images. These lower resolution images can be used in NeRF by setting, e.g., the `Config.factor = 4` gin flag.\n\nBy default, `local_colmap_and_resize.sh` uses the OPENCV camera model, which is a perspective pinhole camera with k1, k2 radial and t1, t2 tangential distortion coefficients. To switch to another COLMAP camera model, for example OPENCV_FISHEYE, you can run\n```\nbash scripts/local_colmap_and_resize.sh my_dataset_dir OPENCV_FISHEYE\n```\n\nIf you have a very large capture of more than around 500 images, we recommend switching from the exhaustive matcher to the vocabulary tree matcher in COLMAP (see the script for a commented-out example).\n\nOur script is simply a thin wrapper for COLMAP--if you have run COLMAP yourself, all you need to do to load your scene in NeRF is ensure it has the following format:\n```\nmy_dataset_dir/images/    <--- all input images\nmy_dataset_dir/sparse/0/  <--- COLMAP sparse reconstruction files (cameras, images, points)\n```\n\n### Writing a custom dataloader\n\nIf you already have poses for your own data, you may prefer to write your own custom dataloader.\n\nMultiNeRF includes a variety of dataloaders, all of which inherit from the\nbase\n[Dataset class](https://github.com/google-research/multinerf/blob/main/internal/datasets.py#L152).\n\nThe job of this class is to load all image and pose information from disk, then\ncreate batches of ray and color data for training or rendering a NeRF model.\n\nAny inherited subclass is responsible for loading images and camera poses from\ndisk by implementing the `_load_renderings` method (which is marked as\nabstract by the decorator `@abc.abstractmethod`). This data is then used to\ngenerate train and test batches of ray + color data for feeding through the NeRF\nmodel. The ray parameters are calculated in `_make_ray_batch`.\n\n#### Existing data loaders\n\nTo work from an example, you can see how this function is overloaded for the\ndifferent dataloaders we have already implemented:\n\n-   [Blender](https://github.com/google-research/multinerf/blob/main/internal/datasets.py#L470)\n-   [DTU dataset](https://github.com/google-research/multinerf/blob/main/internal/datasets.py#L793)\n-   [Tanks and Temples](https://github.com/google-research/multinerf/blob/main/internal/datasets.py#L680),\n    as processed by the NeRF++ paper\n-   [Tanks and Temples](https://github.com/google-research/multinerf/blob/main/internal/datasets.py#L728),\n    as processed by the Free View Synthesis paper\n\nThe main data loader we rely on is\n[LLFF](https://github.com/google-research/multinerf/blob/main/internal/datasets.py#L526)\n(named for historical reasons), which is the loader for a dataset that has been\nposed by COLMAP.\n\n#### Making your own loader by implementing `_load_renderings`\n\nTo make a new dataset, make a class inheriting from `Dataset` and overload the\n`_load_renderings` method:\n\n```\nclass MyNewDataset(Dataset):\n  def _load_renderings(self, config):\n    ...\n```\n\nIn this function, you **must** set the following public attributes:\n\n-   images\n-   camtoworlds\n-   pixtocams\n-   height, width\n\nMany of our dataset loaders also set other useful attributes, but these are the\ncritical ones for generating rays. You can see how they are used (along with a batch of pixel coordinates) to create rays in [`camera_utils.pixels_to_rays`](https://github.com/google-research/multinerf/blob/main/internal/camera_utils.py#L520).\n\n**Images**\n\n`images` = [N, height, width, 3] numpy array of RGB images. Currently we\nrequire all images to have the same resolution.\n\n**Extrinsic camera poses**\n\n`camtoworlds` = [N, 3, 4] numpy array of extrinsic pose matrices.\n`camtoworlds[i]` should be in **camera-to-world** format, such that we can run\n\n```\npose = camtoworlds[i]\nx_world = pose[:3, :3] @ x_camera + pose[:3, 3:4]\n```\n\nto convert a 3D camera space point `x_camera` into a world space point `x_world`.\n\nThese matrices must be stored in the **OpenGL** coordinate system convention for camera rotation:\nx-axis to the right, y-axis upward, and z-axis backward along the camera's focal\naxis.\n\nThe most common conventions are\n\n-   `[right, up, backwards]`: OpenGL, NeRF, most graphics code.\n-   `[right, down, forwards]`: OpenCV, COLMAP, most computer vision code.\n\nFortunately switching from OpenCV/COLMAP to NeRF is\n[simple](https://github.com/google-research/multinerf/blob/main/internal/datasets.py#L108):\nyou just need to right-multiply the OpenCV pose matrices by `np.diag([1, -1, -1, 1])`,\nwhich will flip the sign of the y-axis (from down to up) and z-axis (from\nforwards to backwards):\n```\ncamtoworlds_opengl = camtoworlds_opencv @ np.diag([1, -1, -1, 1])\n```\n\nYou may also want to **scale** your camera pose translations such that they all\nlie within the `[-1, 1]^3` cube for best performance with the default mipnerf360\nconfig files.\n\nWe provide a useful helper function [`camera_utils.transform_poses_pca`](https://github.com/google-research/multinerf/blob/main/internal/camera_utils.py#L191) that computes a translation/rotation/scaling transform for the input poses that aligns the world space x-y plane with the ground (based on PCA) and scales the scene so that all input pose positions lie within `[-1, 1]^3`. (This function is applied by default when loading mip-NeRF 360 scenes with the LLFF data loader.) For a scene where this transformation has been applied, [`camera_utils.generate_ellipse_path`](https://github.com/google-research/multinerf/blob/main/internal/camera_utils.py#L230) can be used to generate a nice elliptical camera path for rendering videos.\n\n**Intrinsic camera poses**\n\n`pixtocams`= [N, 3, 4] numpy array of inverse intrinsic matrices, OR [3, 4]\nnumpy array of a single shared inverse intrinsic matrix. These should be in\n**OpenCV** format, e.g.\n\n```\ncamtopix = np.array([\n  [focal,     0,  width/2],\n  [    0, focal, height/2],\n  [    0,     0,        1],\n])\npixtocam = np.linalg.inv(camtopix)\n```\n\nGiven a focal length and image size (and assuming a centered principal point,\nthis matrix can be created using\n[`camera_utils.get_pixtocam`](https://github.com/google-research/multinerf/blob/main/internal/camera_utils.py#L411).\n\nAlternatively, it can be created by using\n[`camera_utils.intrinsic_matrix`](https://github.com/google-research/multinerf/blob/main/internal/camera_utils.py#L398)\nand inverting the resulting matrix.\n\n**Resolution**\n\n`height` = int, height of images.\n\n`width` = int, width of images.\n\n**Distortion parameters (optional)**\n\n`distortion_params` = dict, camera lens distortion model parameters. This\ndictionary must map from strings -> floats, and the allowed keys are `['k1',\n'k2', 'k3', 'k4', 'p1', 'p2']` (up to four radial coefficients and up to two\ntangential coefficients). By default, this is set to the empty dictionary `{}`,\nin which case undistortion is not run.\n\n### Details of the inner workings of Dataset\n\nThe public interface mimics the behavior of a standard machine learning pipeline\ndataset provider that can provide infinite batches of data to the\ntraining/testing pipelines without exposing any details of how the batches are\nloaded/created or how this is parallelized. Therefore, the initializer runs all\nsetup, including data loading from disk using `_load_renderings`, and begins\nthe thread using its parent start() method. After the initializer returns, the\ncaller can request batches of data straight away.\n\nThe internal `self._queue` is initialized as `queue.Queue(3)`, so the infinite\nloop in `run()` will block on the call `self._queue.put(self._next_fn())` once\nthere are 3 elements. The main thread training job runs in a loop that pops 1\nelement at a time off the front of the queue. The Dataset thread's `run()` loop\nwill populate the queue with 3 elements, then wait until a batch has been\nremoved and push one more onto the end.\n\nThis repeats indefinitely until the main thread's training loop completes\n(typically hundreds of thousands of iterations), then the main thread will exit\nand the Dataset thread will automatically be killed since it is a daemon.\n\n\n## Citation\nIf you use this software package, please cite whichever constituent paper(s)\nyou build upon, or feel free to cite this entire codebase as:\n\n```\n@misc{multinerf2022,\n      title={{MultiNeRF}: {A} {Code} {Release} for {Mip-NeRF} 360, {Ref-NeRF}, and {RawNeRF}},\n      author={Ben Mildenhall and Dor Verbin and Pratul P. Srinivasan and Peter Hedman and Ricardo Martin-Brualla and Jonathan T. Barron},\n      year={2022},\n      url={https://github.com/google-research/multinerf},\n}\n```\n"
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "eval.py",
          "type": "blob",
          "size": 9.46875,
          "content": "# Copyright 2022 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Evaluation script.\"\"\"\n\nimport functools\nfrom os import path\nimport sys\nimport time\n\nfrom absl import app\nfrom flax.metrics import tensorboard\nfrom flax.training import checkpoints\nimport gin\nfrom internal import configs\nfrom internal import datasets\nfrom internal import image\nfrom internal import models\nfrom internal import raw_utils\nfrom internal import ref_utils\nfrom internal import train_utils\nfrom internal import utils\nfrom internal import vis\nimport jax\nfrom jax import random\nimport jax.numpy as jnp\nimport numpy as np\n\nconfigs.define_common_flags()\njax.config.parse_flags_with_absl()\n\n\ndef main(unused_argv):\n  config = configs.load_config(save_config=False)\n\n  dataset = datasets.load_dataset('test', config.data_dir, config)\n\n  key = random.PRNGKey(20200823)\n  _, state, render_eval_pfn, _, _ = train_utils.setup_model(config, key)\n\n  if config.rawnerf_mode:\n    postprocess_fn = dataset.metadata['postprocess_fn']\n  else:\n    postprocess_fn = lambda z: z\n\n  if config.eval_raw_affine_cc:\n    cc_fun = raw_utils.match_images_affine\n  else:\n    cc_fun = image.color_correct\n\n  metric_harness = image.MetricHarness()\n\n  last_step = 0\n  out_dir = path.join(config.checkpoint_dir,\n                      'path_renders' if config.render_path else 'test_preds')\n  path_fn = lambda x: path.join(out_dir, x)\n\n  if not config.eval_only_once:\n    summary_writer = tensorboard.SummaryWriter(\n        path.join(config.checkpoint_dir, 'eval'))\n  while True:\n    state = checkpoints.restore_checkpoint(config.checkpoint_dir, state)\n    step = int(state.step)\n    if step <= last_step:\n      print(f'Checkpoint step {step} <= last step {last_step}, sleeping.')\n      time.sleep(10)\n      continue\n    print(f'Evaluating checkpoint at step {step}.')\n    if config.eval_save_output and (not utils.isdir(out_dir)):\n      utils.makedirs(out_dir)\n\n    num_eval = min(dataset.size, config.eval_dataset_limit)\n    key = random.PRNGKey(0 if config.deterministic_showcase else step)\n    perm = random.permutation(key, num_eval)\n    showcase_indices = np.sort(perm[:config.num_showcase_images])\n\n    metrics = []\n    metrics_cc = []\n    showcases = []\n    render_times = []\n    for idx in range(dataset.size):\n      eval_start_time = time.time()\n      batch = next(dataset)\n      if idx >= num_eval:\n        print(f'Skipping image {idx+1}/{dataset.size}')\n        continue\n      print(f'Evaluating image {idx+1}/{dataset.size}')\n      rays = batch.rays\n      train_frac = state.step / config.max_steps\n      rendering = models.render_image(\n          functools.partial(\n              render_eval_pfn,\n              state.params,\n              train_frac,\n          ),\n          rays,\n          None,\n          config,\n      )\n\n      if jax.host_id() != 0:  # Only record via host 0.\n        continue\n\n      render_times.append((time.time() - eval_start_time))\n      print(f'Rendered in {render_times[-1]:0.3f}s')\n\n      # Cast to 64-bit to ensure high precision for color correction function.\n      gt_rgb = np.array(batch.rgb, dtype=np.float64)\n      rendering['rgb'] = np.array(rendering['rgb'], dtype=np.float64)\n\n      cc_start_time = time.time()\n      rendering['rgb_cc'] = cc_fun(rendering['rgb'], gt_rgb)\n      print(f'Color corrected in {(time.time() - cc_start_time):0.3f}s')\n\n      if not config.eval_only_once and idx in showcase_indices:\n        showcase_idx = idx if config.deterministic_showcase else len(showcases)\n        showcases.append((showcase_idx, rendering, batch))\n      if not config.render_path:\n        rgb = postprocess_fn(rendering['rgb'])\n        rgb_cc = postprocess_fn(rendering['rgb_cc'])\n        rgb_gt = postprocess_fn(gt_rgb)\n\n        if config.eval_quantize_metrics:\n          # Ensures that the images written to disk reproduce the metrics.\n          rgb = np.round(rgb * 255) / 255\n          rgb_cc = np.round(rgb_cc * 255) / 255\n\n        if config.eval_crop_borders > 0:\n          crop_fn = lambda x, c=config.eval_crop_borders: x[c:-c, c:-c]\n          rgb = crop_fn(rgb)\n          rgb_cc = crop_fn(rgb_cc)\n          rgb_gt = crop_fn(rgb_gt)\n\n        metric = metric_harness(rgb, rgb_gt)\n        metric_cc = metric_harness(rgb_cc, rgb_gt)\n\n        if config.compute_disp_metrics:\n          for tag in ['mean', 'median']:\n            key = f'distance_{tag}'\n            if key in rendering:\n              disparity = 1 / (1 + rendering[key])\n              metric[f'disparity_{tag}_mse'] = float(\n                  ((disparity - batch.disps)**2).mean())\n\n        if config.compute_normal_metrics:\n          weights = rendering['acc'] * batch.alphas\n          normalized_normals_gt = ref_utils.l2_normalize(batch.normals)\n          for key, val in rendering.items():\n            if key.startswith('normals') and val is not None:\n              normalized_normals = ref_utils.l2_normalize(val)\n              metric[key + '_mae'] = ref_utils.compute_weighted_mae(\n                  weights, normalized_normals, normalized_normals_gt)\n\n        for m, v in metric.items():\n          print(f'{m:30s} = {v:.4f}')\n\n        metrics.append(metric)\n        metrics_cc.append(metric_cc)\n\n      if config.eval_save_output and (config.eval_render_interval > 0):\n        if (idx % config.eval_render_interval) == 0:\n          utils.save_img_u8(postprocess_fn(rendering['rgb']),\n                            path_fn(f'color_{idx:03d}.png'))\n          utils.save_img_u8(postprocess_fn(rendering['rgb_cc']),\n                            path_fn(f'color_cc_{idx:03d}.png'))\n\n          for key in ['distance_mean', 'distance_median']:\n            if key in rendering:\n              utils.save_img_f32(rendering[key],\n                                 path_fn(f'{key}_{idx:03d}.tiff'))\n\n          for key in ['normals']:\n            if key in rendering:\n              utils.save_img_u8(rendering[key] / 2. + 0.5,\n                                path_fn(f'{key}_{idx:03d}.png'))\n\n          utils.save_img_f32(rendering['acc'], path_fn(f'acc_{idx:03d}.tiff'))\n\n    if (not config.eval_only_once) and (jax.host_id() == 0):\n      summary_writer.scalar('eval_median_render_time', np.median(render_times),\n                            step)\n      for name in metrics[0]:\n        scores = [m[name] for m in metrics]\n        summary_writer.scalar('eval_metrics/' + name, np.mean(scores), step)\n        summary_writer.histogram('eval_metrics/' + 'perimage_' + name, scores,\n                                 step)\n      for name in metrics_cc[0]:\n        scores = [m[name] for m in metrics_cc]\n        summary_writer.scalar('eval_metrics_cc/' + name, np.mean(scores), step)\n        summary_writer.histogram('eval_metrics_cc/' + 'perimage_' + name,\n                                 scores, step)\n\n      for i, r, b in showcases:\n        if config.vis_decimate > 1:\n          d = config.vis_decimate\n          decimate_fn = lambda x, d=d: None if x is None else x[::d, ::d]\n        else:\n          decimate_fn = lambda x: x\n        r = jax.tree_util.tree_map(decimate_fn, r)\n        b = jax.tree_util.tree_map(decimate_fn, b)\n        visualizations = vis.visualize_suite(r, b.rays)\n        for k, v in visualizations.items():\n          if k == 'color':\n            v = postprocess_fn(v)\n          summary_writer.image(f'output_{k}_{i}', v, step)\n        if not config.render_path:\n          target = postprocess_fn(b.rgb)\n          summary_writer.image(f'true_color_{i}', target, step)\n          pred = postprocess_fn(visualizations['color'])\n          residual = np.clip(pred - target + 0.5, 0, 1)\n          summary_writer.image(f'true_residual_{i}', residual, step)\n          if config.compute_normal_metrics:\n            summary_writer.image(f'true_normals_{i}', b.normals / 2. + 0.5,\n                                 step)\n\n    if (config.eval_save_output and (not config.render_path) and\n        (jax.host_id() == 0)):\n      with utils.open_file(path_fn(f'render_times_{step}.txt'), 'w') as f:\n        f.write(' '.join([str(r) for r in render_times]))\n      for name in metrics[0]:\n        with utils.open_file(path_fn(f'metric_{name}_{step}.txt'), 'w') as f:\n          f.write(' '.join([str(m[name]) for m in metrics]))\n      for name in metrics_cc[0]:\n        with utils.open_file(path_fn(f'metric_cc_{name}_{step}.txt'), 'w') as f:\n          f.write(' '.join([str(m[name]) for m in metrics_cc]))\n      if config.eval_save_ray_data:\n        for i, r, b in showcases:\n          rays = {k: v for k, v in r.items() if 'ray_' in k}\n          np.set_printoptions(threshold=sys.maxsize)\n          with utils.open_file(path_fn(f'ray_data_{step}_{i}.txt'), 'w') as f:\n            f.write(repr(rays))\n\n    # A hack that forces Jax to keep all TPUs alive until every TPU is finished.\n    x = jnp.ones([jax.local_device_count()])\n    x = jax.device_get(jax.pmap(lambda x: jax.lax.psum(x, 'i'), 'i')(x))\n    print(x)\n\n    if config.eval_only_once:\n      break\n    if config.early_exit_steps is not None:\n      num_steps = config.early_exit_steps\n    else:\n      num_steps = config.max_steps\n    if int(step) >= num_steps:\n      break\n    last_step = step\n\n\nif __name__ == '__main__':\n  with gin.config_scope('eval'):\n    app.run(main)\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "render.py",
          "type": "blob",
          "size": 7.01953125,
          "content": "# Copyright 2022 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Render script.\"\"\"\n\nimport concurrent.futures\nimport functools\nimport glob\nimport os\nimport time\n\nfrom absl import app\nfrom flax.training import checkpoints\nimport gin\nfrom internal import configs\nfrom internal import datasets\nfrom internal import models\nfrom internal import train_utils\nfrom internal import utils\nimport jax\nfrom jax import random\nfrom matplotlib import cm\nimport mediapy as media\nimport numpy as np\n\nconfigs.define_common_flags()\njax.config.parse_flags_with_absl()\n\n\ndef create_videos(config, base_dir, out_dir, out_name, num_frames):\n  \"\"\"Creates videos out of the images saved to disk.\"\"\"\n  names = [n for n in config.checkpoint_dir.split('/') if n]\n  # Last two parts of checkpoint path are experiment name and scene name.\n  exp_name, scene_name = names[-2:]\n  video_prefix = f'{scene_name}_{exp_name}_{out_name}'\n\n  zpad = max(3, len(str(num_frames - 1)))\n  idx_to_str = lambda idx: str(idx).zfill(zpad)\n\n  utils.makedirs(base_dir)\n\n  # Load one example frame to get image shape and depth range.\n  depth_file = os.path.join(out_dir, f'distance_mean_{idx_to_str(0)}.tiff')\n  depth_frame = utils.load_img(depth_file)\n  shape = depth_frame.shape\n  p = config.render_dist_percentile\n  distance_limits = np.percentile(depth_frame.flatten(), [p, 100 - p])\n  lo, hi = [config.render_dist_curve_fn(x) for x in distance_limits]\n  print(f'Video shape is {shape[:2]}')\n\n  video_kwargs = {\n      'shape': shape[:2],\n      'codec': 'h264',\n      'fps': config.render_video_fps,\n      'crf': config.render_video_crf,\n  }\n\n  for k in ['color', 'normals', 'acc', 'distance_mean', 'distance_median']:\n    video_file = os.path.join(base_dir, f'{video_prefix}_{k}.mp4')\n    input_format = 'gray' if k == 'acc' else 'rgb'\n    file_ext = 'png' if k in ['color', 'normals'] else 'tiff'\n    idx = 0\n    file0 = os.path.join(out_dir, f'{k}_{idx_to_str(0)}.{file_ext}')\n    if not utils.file_exists(file0):\n      print(f'Images missing for tag {k}')\n      continue\n    print(f'Making video {video_file}...')\n    with media.VideoWriter(\n        video_file, **video_kwargs, input_format=input_format) as writer:\n      for idx in range(num_frames):\n        img_file = os.path.join(out_dir, f'{k}_{idx_to_str(idx)}.{file_ext}')\n        if not utils.file_exists(img_file):\n          ValueError(f'Image file {img_file} does not exist.')\n        img = utils.load_img(img_file)\n        if k in ['color', 'normals']:\n          img = img / 255.\n        elif k.startswith('distance'):\n          img = config.render_dist_curve_fn(img)\n          img = np.clip((img - np.minimum(lo, hi)) / np.abs(hi - lo), 0, 1)\n          img = cm.get_cmap('turbo')(img)[..., :3]\n\n        frame = (np.clip(np.nan_to_num(img), 0., 1.) * 255.).astype(np.uint8)\n        writer.add_image(frame)\n        idx += 1\n\n\ndef main(unused_argv):\n\n  config = configs.load_config(save_config=False)\n\n  dataset = datasets.load_dataset('test', config.data_dir, config)\n\n  key = random.PRNGKey(20200823)\n  _, state, render_eval_pfn, _, _ = train_utils.setup_model(config, key)\n\n  if config.rawnerf_mode:\n    postprocess_fn = dataset.metadata['postprocess_fn']\n  else:\n    postprocess_fn = lambda z: z\n\n  state = checkpoints.restore_checkpoint(config.checkpoint_dir, state)\n  step = int(state.step)\n  print(f'Rendering checkpoint at step {step}.')\n\n  out_name = 'path_renders' if config.render_path else 'test_preds'\n  out_name = f'{out_name}_step_{step}'\n  base_dir = config.render_dir\n  if base_dir is None:\n    base_dir = os.path.join(config.checkpoint_dir, 'render')\n  out_dir = os.path.join(base_dir, out_name)\n  if not utils.isdir(out_dir):\n    utils.makedirs(out_dir)\n\n  path_fn = lambda x: os.path.join(out_dir, x)\n\n  # Ensure sufficient zero-padding of image indices in output filenames.\n  zpad = max(3, len(str(dataset.size - 1)))\n  idx_to_str = lambda idx: str(idx).zfill(zpad)\n\n  if config.render_save_async:\n    async_executor = concurrent.futures.ThreadPoolExecutor(max_workers=4)\n    async_futures = []\n    def save_fn(fn, *args, **kwargs):\n      async_futures.append(async_executor.submit(fn, *args, **kwargs))\n  else:\n    def save_fn(fn, *args, **kwargs):\n      fn(*args, **kwargs)\n\n  for idx in range(dataset.size):\n    if idx % config.render_num_jobs != config.render_job_id:\n      continue\n    # If current image and next image both already exist, skip ahead.\n    idx_str = idx_to_str(idx)\n    curr_file = path_fn(f'color_{idx_str}.png')\n    next_idx_str = idx_to_str(idx + config.render_num_jobs)\n    next_file = path_fn(f'color_{next_idx_str}.png')\n    if utils.file_exists(curr_file) and utils.file_exists(next_file):\n      print(f'Image {idx}/{dataset.size} already exists, skipping')\n      continue\n    print(f'Evaluating image {idx+1}/{dataset.size}')\n    eval_start_time = time.time()\n    rays = dataset.generate_ray_batch(idx).rays\n    train_frac = 1.\n    rendering = models.render_image(\n        functools.partial(render_eval_pfn, state.params, train_frac),\n        rays, None, config)\n    print(f'Rendered in {(time.time() - eval_start_time):0.3f}s')\n\n    if jax.host_id() != 0:  # Only record via host 0.\n      continue\n\n    rendering['rgb'] = postprocess_fn(rendering['rgb'])\n\n    save_fn(\n        utils.save_img_u8, rendering['rgb'], path_fn(f'color_{idx_str}.png'))\n    if 'normals' in rendering:\n      save_fn(\n          utils.save_img_u8, rendering['normals'] / 2. + 0.5,\n          path_fn(f'normals_{idx_str}.png'))\n    save_fn(\n        utils.save_img_f32, rendering['distance_mean'],\n        path_fn(f'distance_mean_{idx_str}.tiff'))\n    save_fn(\n        utils.save_img_f32, rendering['distance_median'],\n        path_fn(f'distance_median_{idx_str}.tiff'))\n    save_fn(\n        utils.save_img_f32, rendering['acc'], path_fn(f'acc_{idx_str}.tiff'))\n\n  if config.render_save_async:\n    # Wait until all worker threads finish.\n    async_executor.shutdown(wait=True)\n\n    # This will ensure that exceptions in child threads are raised to the\n    # main thread.\n    for future in async_futures:\n      future.result()\n\n  time.sleep(1)\n  num_files = len(glob.glob(path_fn('acc_*.tiff')))\n  time.sleep(10)\n  if jax.host_id() == 0 and num_files == dataset.size:\n    print(f'All files found, creating videos (job {config.render_job_id}).')\n    create_videos(config, base_dir, out_dir, out_name, dataset.size)\n\n  # A hack that forces Jax to keep all TPUs alive until every TPU is finished.\n  x = jax.numpy.ones([jax.local_device_count()])\n  x = jax.device_get(jax.pmap(lambda x: jax.lax.psum(x, 'i'), 'i')(x))\n  print(x)\n\n\nif __name__ == '__main__':\n  with gin.config_scope('eval'):  # Use the same scope as eval.py\n    app.run(main)\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.095703125,
          "content": "numpy\njax\njaxlib\nflax\nopencv-python\nPillow\ntensorboard\ntensorflow\ngin-config\ndm_pix\nrawpy\nmediapy\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "train.py",
          "type": "blob",
          "size": 11.6640625,
          "content": "# Copyright 2022 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Training script.\"\"\"\n\nimport functools\nimport gc\nimport time\n\nfrom absl import app\nimport flax\nfrom flax.metrics import tensorboard\nfrom flax.training import checkpoints\nimport gin\nfrom internal import configs\nfrom internal import datasets\nfrom internal import image\nfrom internal import models\nfrom internal import train_utils\nfrom internal import utils\nfrom internal import vis\nimport jax\nfrom jax import random\nimport jax.numpy as jnp\nimport numpy as np\n\nconfigs.define_common_flags()\njax.config.parse_flags_with_absl()\n\nTIME_PRECISION = 1000  # Internally represent integer times in milliseconds.\n\n\ndef main(unused_argv):\n  rng = random.PRNGKey(20200823)\n  # Shift the numpy random seed by host_id() to shuffle data loaded by different\n  # hosts.\n  np.random.seed(20201473 + jax.host_id())\n\n  config = configs.load_config()\n\n  if config.batch_size % jax.device_count() != 0:\n    raise ValueError('Batch size must be divisible by the number of devices.')\n\n  dataset = datasets.load_dataset('train', config.data_dir, config)\n  test_dataset = datasets.load_dataset('test', config.data_dir, config)\n\n  np_to_jax = lambda x: jnp.array(x) if isinstance(x, np.ndarray) else x\n  cameras = tuple(np_to_jax(x) for x in dataset.cameras)\n\n  if config.rawnerf_mode:\n    postprocess_fn = test_dataset.metadata['postprocess_fn']\n  else:\n    postprocess_fn = lambda z, _=None: z\n\n  rng, key = random.split(rng)\n  setup = train_utils.setup_model(config, key, dataset=dataset)\n  model, state, render_eval_pfn, train_pstep, lr_fn = setup\n\n  variables = state.params\n  num_params = jax.tree_util.tree_reduce(\n      lambda x, y: x + jnp.prod(jnp.array(y.shape)), variables, initializer=0)\n  print(f'Number of parameters being optimized: {num_params}')\n\n  if (dataset.size > model.num_glo_embeddings and model.num_glo_features > 0):\n    raise ValueError(f'Number of glo embeddings {model.num_glo_embeddings} '\n                     f'must be at least equal to number of train images '\n                     f'{dataset.size}')\n\n  metric_harness = image.MetricHarness()\n\n  if not utils.isdir(config.checkpoint_dir):\n    utils.makedirs(config.checkpoint_dir)\n  state = checkpoints.restore_checkpoint(config.checkpoint_dir, state)\n  # Resume training at the step of the last checkpoint.\n  init_step = state.step + 1\n  state = flax.jax_utils.replicate(state)\n\n  if jax.host_id() == 0:\n    summary_writer = tensorboard.SummaryWriter(config.checkpoint_dir)\n    if config.rawnerf_mode:\n      for name, data in zip(['train', 'test'], [dataset, test_dataset]):\n        # Log shutter speed metadata in TensorBoard for debug purposes.\n        for key in ['exposure_idx', 'exposure_values', 'unique_shutters']:\n          summary_writer.text(f'{name}_{key}', str(data.metadata[key]), 0)\n\n  # Prefetch_buffer_size = 3 x batch_size.\n  pdataset = flax.jax_utils.prefetch_to_device(dataset, 3)\n  rng = rng + jax.host_id()  # Make random seed separate across hosts.\n  rngs = random.split(rng, jax.local_device_count())  # For pmapping RNG keys.\n  gc.disable()  # Disable automatic garbage collection for efficiency.\n  total_time = 0\n  total_steps = 0\n  reset_stats = True\n  if config.early_exit_steps is not None:\n    num_steps = config.early_exit_steps\n  else:\n    num_steps = config.max_steps\n  loss_threshold = 1.0\n  for step, batch in zip(range(init_step, num_steps + 1), pdataset):\n\n    if reset_stats and (jax.host_id() == 0):\n      stats_buffer = []\n      train_start_time = time.time()\n      reset_stats = False\n\n    learning_rate = lr_fn(step)\n    train_frac = jnp.clip((step - 1) / (config.max_steps - 1), 0, 1)\n\n    state, stats, rngs = train_pstep(\n        rngs,\n        state,\n        batch,\n        cameras,\n        train_frac,\n        loss_threshold,\n    )\n    if config.enable_robustnerf_loss:\n        loss_threshold = jnp.mean(stats['loss_threshold'])\n\n    if step % config.gc_every == 0:\n      gc.collect()  # Disable automatic garbage collection for efficiency.\n\n    # Log training summaries. This is put behind a host_id check because in\n    # multi-host evaluation, all hosts need to run inference even though we\n    # only use host 0 to record results.\n    if jax.host_id() == 0:\n      stats = flax.jax_utils.unreplicate(stats)\n\n      stats_buffer.append(stats)\n\n      if step == init_step or step % config.print_every == 0:\n        elapsed_time = time.time() - train_start_time\n        steps_per_sec = config.print_every / elapsed_time\n        rays_per_sec = config.batch_size * steps_per_sec\n\n        # A robust approximation of total training time, in case of pre-emption.\n        total_time += int(round(TIME_PRECISION * elapsed_time))\n        total_steps += config.print_every\n        approx_total_time = int(round(step * total_time / total_steps))\n\n        # Transpose and stack stats_buffer along axis 0.\n        fs = [flax.traverse_util.flatten_dict(s, sep='/') for s in stats_buffer]\n        stats_stacked = {k: jnp.stack([f[k] for f in fs]) for k in fs[0].keys()}\n\n        # Split every statistic that isn't a vector into a set of statistics.\n        stats_split = {}\n        for k, v in stats_stacked.items():\n          if v.ndim not in [1, 2] and v.shape[0] != len(stats_buffer):\n            raise ValueError('statistics must be of size [n], or [n, k].')\n          if v.ndim == 1:\n            stats_split[k] = v\n          elif v.ndim == 2:\n            for i, vi in enumerate(tuple(v.T)):\n              stats_split[f'{k}/{i}'] = vi\n\n        # Summarize the entire histogram of each statistic.\n        for k, v in stats_split.items():\n          summary_writer.histogram('train_' + k, v, step)\n\n        # Take the mean and max of each statistic since the last summary.\n        avg_stats = {k: jnp.mean(v) for k, v in stats_split.items()}\n        max_stats = {k: jnp.max(v) for k, v in stats_split.items()}\n\n        summ_fn = lambda s, v: summary_writer.scalar(s, v, step)  # pylint:disable=cell-var-from-loop\n\n        # Summarize the mean and max of each statistic.\n        for k, v in avg_stats.items():\n          summ_fn(f'train_avg_{k}', v)\n        for k, v in max_stats.items():\n          summ_fn(f'train_max_{k}', v)\n\n        summ_fn('train_num_params', num_params)\n        summ_fn('train_learning_rate', learning_rate)\n        summ_fn('train_steps_per_sec', steps_per_sec)\n        summ_fn('train_rays_per_sec', rays_per_sec)\n\n        summary_writer.scalar('train_avg_psnr_timed', avg_stats['psnr'],\n                              total_time // TIME_PRECISION)\n        summary_writer.scalar('train_avg_psnr_timed_approx', avg_stats['psnr'],\n                              approx_total_time // TIME_PRECISION)\n\n        if dataset.metadata is not None and model.learned_exposure_scaling:\n          params = state.params['params']\n          scalings = params['exposure_scaling_offsets']['embedding'][0]\n          num_shutter_speeds = dataset.metadata['unique_shutters'].shape[0]\n          for i_s in range(num_shutter_speeds):\n            for j_s, value in enumerate(scalings[i_s]):\n              summary_name = f'exposure/scaling_{i_s}_{j_s}'\n              summary_writer.scalar(summary_name, value, step)\n\n        precision = int(np.ceil(np.log10(config.max_steps))) + 1\n        avg_loss = avg_stats['loss']\n        avg_psnr = avg_stats['psnr']\n        str_losses = {  # Grab each \"losses_{x}\" field and print it as \"x[:4]\".\n            k[7:11]: (f'{v:0.5f}' if v >= 1e-4 and v < 10 else f'{v:0.1e}')\n            for k, v in avg_stats.items()\n            if k.startswith('losses/')\n        }\n        print(f'{step:{precision}d}' + f'/{config.max_steps:d}: ' +\n              f'loss={avg_loss:0.5f}, ' + f'psnr={avg_psnr:6.3f}, ' +\n              f'lr={learning_rate:0.2e} | ' +\n              ', '.join([f'{k}={s}' for k, s in str_losses.items()]) +\n              f', {rays_per_sec:0.0f} r/s')\n\n        # Reset everything we are tracking between summarizations.\n        reset_stats = True\n\n      if step == 1 or step % config.checkpoint_every == 0:\n        state_to_save = jax.device_get(\n            flax.jax_utils.unreplicate(state))\n        checkpoints.save_checkpoint(\n            config.checkpoint_dir, state_to_save, int(step), keep=100)\n\n    # Test-set evaluation.\n    if config.train_render_every > 0 and step % config.train_render_every == 0:\n      # We reuse the same random number generator from the optimization step\n      # here on purpose so that the visualization matches what happened in\n      # training.\n      eval_start_time = time.time()\n      eval_variables = flax.jax_utils.unreplicate(state).params\n      test_case = next(test_dataset)\n      rendering = models.render_image(\n          functools.partial(render_eval_pfn, eval_variables, train_frac),\n          test_case.rays, rngs[0], config)\n\n      # Log eval summaries on host 0.\n      if jax.host_id() == 0:\n        eval_time = time.time() - eval_start_time\n        num_rays = jnp.prod(jnp.array(test_case.rays.directions.shape[:-1]))\n        rays_per_sec = num_rays / eval_time\n        summary_writer.scalar('test_rays_per_sec', rays_per_sec, step)\n        print(f'Eval {step}: {eval_time:0.3f}s., {rays_per_sec:0.0f} rays/sec')\n\n        metric_start_time = time.time()\n        metric = metric_harness(\n            postprocess_fn(rendering['rgb']), postprocess_fn(test_case.rgb))\n        print(f'Metrics computed in {(time.time() - metric_start_time):0.3f}s')\n        for name, val in metric.items():\n          if not np.isnan(val):\n            print(f'{name} = {val:.4f}')\n            summary_writer.scalar('train_metrics/' + name, val, step)\n\n        if config.vis_decimate > 1:\n          d = config.vis_decimate\n          decimate_fn = lambda x, d=d: None if x is None else x[::d, ::d]\n        else:\n          decimate_fn = lambda x: x\n        rendering = jax.tree_util.tree_map(decimate_fn, rendering)\n        test_case = jax.tree_util.tree_map(decimate_fn, test_case)\n        vis_start_time = time.time()\n        vis_suite = vis.visualize_suite(rendering, test_case.rays)\n        print(f'Visualized in {(time.time() - vis_start_time):0.3f}s')\n        if config.rawnerf_mode:\n          # Unprocess raw output.\n          vis_suite['color_raw'] = rendering['rgb']\n          # Autoexposed colors.\n          vis_suite['color_auto'] = postprocess_fn(rendering['rgb'], None)\n          summary_writer.image('test_true_auto',\n                               postprocess_fn(test_case.rgb, None), step)\n          # Exposure sweep colors.\n          exposures = test_dataset.metadata['exposure_levels']\n          for p, x in list(exposures.items()):\n            vis_suite[f'color/{p}'] = postprocess_fn(rendering['rgb'], x)\n            summary_writer.image(f'test_true_color/{p}',\n                                 postprocess_fn(test_case.rgb, x), step)\n        summary_writer.image('test_true_color', test_case.rgb, step)\n        if config.compute_normal_metrics:\n          summary_writer.image('test_true_normals',\n                               test_case.normals / 2. + 0.5, step)\n        for k, v in vis_suite.items():\n          summary_writer.image('test_output_' + k, v, step)\n\n  if jax.host_id() == 0 and config.max_steps % config.checkpoint_every != 0:\n    state = jax.device_get(flax.jax_utils.unreplicate(state))\n    checkpoints.save_checkpoint(\n        config.checkpoint_dir, state, int(config.max_steps), keep=100)\n\n\nif __name__ == '__main__':\n  with gin.config_scope('train'):\n    app.run(main)\n"
        }
      ]
    }
  ]
}