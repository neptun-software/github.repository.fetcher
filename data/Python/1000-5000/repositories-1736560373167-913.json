{
  "metadata": {
    "timestamp": 1736560373167,
    "page": 913,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jaymody/picoGPT",
      "stars": 3294,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.77734375,
          "content": "### Project ###\n/models/\n\n\n### Python ###\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintainted in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\n\n### macOS ###\n\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n\n### Linux ###\n\n*~\n\n# temporary files which can be created if a process still has a handle open of a deleted file\n.fuse_hidden*\n\n# KDE directory preferences\n.directory\n\n# Linux trash folder which might appear on any partition or disk\n.Trash-*\n\n# .nfs files are created when an open file is removed but is still being accessed\n.nfs*\n\n\n### Windows ###\n\n# Windows thumbnail cache files\nThumbs.db\nThumbs.db:encryptable\nehthumbs.db\nehthumbs_vista.db\n\n# Dump file\n*.stackdump\n\n# Folder config file\n[Dd]esktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msix\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2023 Jay Mody\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.3388671875,
          "content": "# PicoGPT\nAccompanying blog post: [GPT in 60 Lines of Numpy](https://jaykmody.com/blog/gpt-from-scratch/)\n\n---\n\nYou've seen [openai/gpt-2](https://github.com/openai/gpt-2).\n\nYou've seen [karpathy/minGPT](https://github.com/karpathy/mingpt).\n\nYou've even seen [karpathy/nanoGPT](https://github.com/karpathy/nanogpt)!\n\nBut have you seen [picoGPT](https://github.com/jaymody/picoGPT)??!?\n\n`picoGPT` is an unnecessarily tiny and minimal implementation of [GPT-2](https://d4mucfpksywv.cloudfront.net/better-language-models/language_models_are_unsupervised_multitask_learners.pdf) in plain [NumPy](https://numpy.org). The entire forward pass code is [40 lines of code](https://github.com/jaymody/picoGPT/blob/main/gpt2_pico.py#L3-L41).\n\npicoGPT features:\n* Fast? ‚ùå Nah, picoGPT is megaSLOW üêå\n* Training code? ‚ùå Error, 4Ô∏è‚É£0Ô∏è‚É£4Ô∏è‚É£ not found\n* Batch inference? ‚ùå picoGPT is civilized, single file line, one at a time only\n* top-p sampling? ‚ùå top-k? ‚ùå temperature? ‚ùå categorical sampling?! ‚ùå greedy? ‚úÖ\n* Readable? `gpt2.py` ‚úÖ `gpt2_pico.py` ‚ùå\n* Smol??? ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ YESS!!! TEENIE TINY in fact ü§è\n\nA quick breakdown of each of the files:\n\n* `encoder.py` contains the code for OpenAI's BPE Tokenizer, taken straight from their [gpt-2 repo](https://github.com/openai/gpt-2/blob/master/src/encoder.py).\n* `utils.py` contains the code to download and load the GPT-2 model weights, tokenizer, and hyper-parameters.\n* `gpt2.py` contains the actual GPT model and generation code which we can run as a python script.\n* `gpt2_pico.py` is the same as `gpt2.py`, but in even fewer lines of code. Why? Because why not üòéüëç.\n\n#### Dependencies\n```bash\npip install -r requirements.txt\n```\nTested on `Python 3.9.10`.\n\n#### Usage\n```bash\npython gpt2.py \"Alan Turing theorized that computers would one day become\"\n```\n\nWhich generates\n\n```\n the most powerful machines on the planet.\n\nThe computer is a machine that can perform complex calculations, and it can perform these calculations in a way that is very similar to the human brain.\n```\n\nYou can also control the number of tokens to generate, the model size (one of `[\"124M\", \"355M\", \"774M\", \"1558M\"]`), and the directory to save the models:\n\n```bash\npython gpt2.py \\\n    \"Alan Turing theorized that computers would one day become\" \\\n    --n_tokens_to_generate 40 \\\n    --model_size \"124M\" \\\n    --models_dir \"models\"\n```\n"
        },
        {
          "name": "encoder.py",
          "type": "blob",
          "size": 4.216796875,
          "content": "\"\"\"Byte pair encoding utilities.\n\nCopied from: https://github.com/openai/gpt-2/blob/master/src/encoder.py.\n\"\"\"\nimport json\nimport os\nfrom functools import lru_cache\n\nimport regex as re\n\n\n@lru_cache()\ndef bytes_to_unicode():\n    \"\"\"\n    Returns list of utf-8 byte and a corresponding list of unicode strings.\n    The reversible bpe codes work on unicode strings.\n    This means you need a large # of unicode characters in your vocab if you want to avoid UNKs.\n    When you're at something like a 10B token dataset you end up needing around 5K for decent coverage.\n    This is a significant percentage of your normal, say, 32K bpe vocab.\n    To avoid that, we want lookup tables between utf-8 bytes and unicode strings.\n    And avoids mapping to whitespace/control characters the bpe code barfs on.\n    \"\"\"\n    bs = list(range(ord(\"!\"), ord(\"~\") + 1)) + list(range(ord(\"¬°\"), ord(\"¬¨\") + 1)) + list(range(ord(\"¬Æ\"), ord(\"√ø\") + 1))\n    cs = bs[:]\n    n = 0\n    for b in range(2**8):\n        if b not in bs:\n            bs.append(b)\n            cs.append(2**8 + n)\n            n += 1\n    cs = [chr(n) for n in cs]\n    return dict(zip(bs, cs))\n\n\ndef get_pairs(word):\n    \"\"\"Return set of symbol pairs in a word.\n    Word is represented as tuple of symbols (symbols being variable-length strings).\n    \"\"\"\n    pairs = set()\n    prev_char = word[0]\n    for char in word[1:]:\n        pairs.add((prev_char, char))\n        prev_char = char\n    return pairs\n\n\nclass Encoder:\n    def __init__(self, encoder, bpe_merges, errors=\"replace\"):\n        self.encoder = encoder\n        self.decoder = {v: k for k, v in self.encoder.items()}\n        self.errors = errors  # how to handle errors in decoding\n        self.byte_encoder = bytes_to_unicode()\n        self.byte_decoder = {v: k for k, v in self.byte_encoder.items()}\n        self.bpe_ranks = dict(zip(bpe_merges, range(len(bpe_merges))))\n        self.cache = {}\n\n        # Should have added re.IGNORECASE so BPE merges can happen for capitalized versions of contractions\n        self.pat = re.compile(r\"\"\"'s|'t|'re|'ve|'m|'ll|'d| ?\\p{L}+| ?\\p{N}+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+\"\"\")\n\n    def bpe(self, token):\n        if token in self.cache:\n            return self.cache[token]\n        word = tuple(token)\n        pairs = get_pairs(word)\n\n        if not pairs:\n            return token\n\n        while True:\n            bigram = min(pairs, key=lambda pair: self.bpe_ranks.get(pair, float(\"inf\")))\n            if bigram not in self.bpe_ranks:\n                break\n            first, second = bigram\n            new_word = []\n            i = 0\n            while i < len(word):\n                try:\n                    j = word.index(first, i)\n                    new_word.extend(word[i:j])\n                    i = j\n                except:\n                    new_word.extend(word[i:])\n                    break\n\n                if word[i] == first and i < len(word) - 1 and word[i + 1] == second:\n                    new_word.append(first + second)\n                    i += 2\n                else:\n                    new_word.append(word[i])\n                    i += 1\n            new_word = tuple(new_word)\n            word = new_word\n            if len(word) == 1:\n                break\n            else:\n                pairs = get_pairs(word)\n        word = \" \".join(word)\n        self.cache[token] = word\n        return word\n\n    def encode(self, text):\n        bpe_tokens = []\n        for token in re.findall(self.pat, text):\n            token = \"\".join(self.byte_encoder[b] for b in token.encode(\"utf-8\"))\n            bpe_tokens.extend(self.encoder[bpe_token] for bpe_token in self.bpe(token).split(\" \"))\n        return bpe_tokens\n\n    def decode(self, tokens):\n        text = \"\".join([self.decoder[token] for token in tokens])\n        text = bytearray([self.byte_decoder[c] for c in text]).decode(\"utf-8\", errors=self.errors)\n        return text\n\n\ndef get_encoder(model_name, models_dir):\n    with open(os.path.join(models_dir, model_name, \"encoder.json\"), \"r\") as f:\n        encoder = json.load(f)\n    with open(os.path.join(models_dir, model_name, \"vocab.bpe\"), \"r\", encoding=\"utf-8\") as f:\n        bpe_data = f.read()\n    bpe_merges = [tuple(merge_str.split()) for merge_str in bpe_data.split(\"\\n\")[1:-1]]\n    return Encoder(encoder=encoder, bpe_merges=bpe_merges)\n"
        },
        {
          "name": "gpt2.py",
          "type": "blob",
          "size": 4.146484375,
          "content": "import numpy as np\n\n\ndef gelu(x):\n    return 0.5 * x * (1 + np.tanh(np.sqrt(2 / np.pi) * (x + 0.044715 * x**3)))\n\n\ndef softmax(x):\n    exp_x = np.exp(x - np.max(x, axis=-1, keepdims=True))\n    return exp_x / np.sum(exp_x, axis=-1, keepdims=True)\n\n\ndef layer_norm(x, g, b, eps: float = 1e-5):\n    mean = np.mean(x, axis=-1, keepdims=True)\n    variance = np.var(x, axis=-1, keepdims=True)\n    x = (x - mean) / np.sqrt(variance + eps)  # normalize x to have mean=0 and var=1 over last axis\n    return g * x + b  # scale and offset with gamma/beta params\n\n\ndef linear(x, w, b):  # [m, in], [in, out], [out] -> [m, out]\n    return x @ w + b\n\n\ndef ffn(x, c_fc, c_proj):  # [n_seq, n_embd] -> [n_seq, n_embd]\n    # project up\n    a = gelu(linear(x, **c_fc))  # [n_seq, n_embd] -> [n_seq, 4*n_embd]\n\n    # project back down\n    x = linear(a, **c_proj)  # [n_seq, 4*n_embd] -> [n_seq, n_embd]\n\n    return x\n\n\ndef attention(q, k, v, mask):  # [n_q, d_k], [n_k, d_k], [n_k, d_v], [n_q, n_k] -> [n_q, d_v]\n    return softmax(q @ k.T / np.sqrt(q.shape[-1]) + mask) @ v\n\n\ndef mha(x, c_attn, c_proj, n_head):  # [n_seq, n_embd] -> [n_seq, n_embd]\n    # qkv projection\n    x = linear(x, **c_attn)  # [n_seq, n_embd] -> [n_seq, 3*n_embd]\n\n    # split into qkv\n    qkv = np.split(x, 3, axis=-1)  # [n_seq, 3*n_embd] -> [3, n_seq, n_embd]\n\n    # split into heads\n    qkv_heads = list(map(lambda x: np.split(x, n_head, axis=-1), qkv))  # [3, n_seq, n_embd] -> [3, n_head, n_seq, n_embd/n_head]\n\n    # causal mask to hide future inputs from being attended to\n    causal_mask = (1 - np.tri(x.shape[0], dtype=x.dtype)) * -1e10  # [n_seq, n_seq]\n\n    # perform attention over each head\n    out_heads = [attention(q, k, v, causal_mask) for q, k, v in zip(*qkv_heads)]  # [3, n_head, n_seq, n_embd/n_head] -> [n_head, n_seq, n_embd/n_head]\n\n    # merge heads\n    x = np.hstack(out_heads)  # [n_head, n_seq, n_embd/n_head] -> [n_seq, n_embd]\n\n    # out projection\n    x = linear(x, **c_proj)  # [n_seq, n_embd] -> [n_seq, n_embd]\n\n    return x\n\n\ndef transformer_block(x, mlp, attn, ln_1, ln_2, n_head):  # [n_seq, n_embd] -> [n_seq, n_embd]\n    # multi-head causal self attention\n    x = x + mha(layer_norm(x, **ln_1), **attn, n_head=n_head)  # [n_seq, n_embd] -> [n_seq, n_embd]\n\n    # position-wise feed forward network\n    x = x + ffn(layer_norm(x, **ln_2), **mlp)  # [n_seq, n_embd] -> [n_seq, n_embd]\n\n    return x\n\n\ndef gpt2(inputs, wte, wpe, blocks, ln_f, n_head):  # [n_seq] -> [n_seq, n_vocab]\n    # token + positional embeddings\n    x = wte[inputs] + wpe[range(len(inputs))]  # [n_seq] -> [n_seq, n_embd]\n\n    # forward pass through n_layer transformer blocks\n    for block in blocks:\n        x = transformer_block(x, **block, n_head=n_head)  # [n_seq, n_embd] -> [n_seq, n_embd]\n\n    # projection to vocab\n    x = layer_norm(x, **ln_f)  # [n_seq, n_embd] -> [n_seq, n_embd]\n    return x @ wte.T  # [n_seq, n_embd] -> [n_seq, n_vocab]\n\n\ndef generate(inputs, params, n_head, n_tokens_to_generate):\n    from tqdm import tqdm\n\n    for _ in tqdm(range(n_tokens_to_generate), \"generating\"):  # auto-regressive decode loop\n        logits = gpt2(inputs, **params, n_head=n_head)  # model forward pass\n        next_id = np.argmax(logits[-1])  # greedy sampling\n        inputs.append(int(next_id))  # append prediction to input\n\n    return inputs[len(inputs) - n_tokens_to_generate :]  # only return generated ids\n\n\ndef main(prompt: str, n_tokens_to_generate: int = 40, model_size: str = \"124M\", models_dir: str = \"models\"):\n    from utils import load_encoder_hparams_and_params\n\n    # load encoder, hparams, and params from the released open-ai gpt-2 files\n    encoder, hparams, params = load_encoder_hparams_and_params(model_size, models_dir)\n\n    # encode the input string using the BPE tokenizer\n    input_ids = encoder.encode(prompt)\n\n    # make sure we are not surpassing the max sequence length of our model\n    assert len(input_ids) + n_tokens_to_generate < hparams[\"n_ctx\"]\n\n    # generate output ids\n    output_ids = generate(input_ids, params, hparams[\"n_head\"], n_tokens_to_generate)\n\n    # decode the ids back into a string\n    output_text = encoder.decode(output_ids)\n\n    return output_text\n\n\nif __name__ == \"__main__\":\n    import fire\n\n    fire.Fire(main)\n"
        },
        {
          "name": "gpt2_pico.py",
          "type": "blob",
          "size": 2.275390625,
          "content": "import numpy as np\n\ndef gelu(x):\n    return 0.5 * x * (1 + np.tanh(np.sqrt(2 / np.pi) * (x + 0.044715 * x**3)))\n\ndef softmax(x):\n    exp_x = np.exp(x - np.max(x, axis=-1, keepdims=True))\n    return exp_x / np.sum(exp_x, axis=-1, keepdims=True)\n\ndef layer_norm(x, g, b, eps: float = 1e-5):\n    mean = np.mean(x, axis=-1, keepdims=True)\n    variance = np.var(x, axis=-1, keepdims=True)\n    return g * (x - mean) / np.sqrt(variance + eps) + b\n\ndef linear(x, w, b):\n    return x @ w + b\n\ndef ffn(x, c_fc, c_proj):\n    return linear(gelu(linear(x, **c_fc)), **c_proj)\n\ndef attention(q, k, v, mask):\n    return softmax(q @ k.T / np.sqrt(q.shape[-1]) + mask) @ v\n\ndef mha(x, c_attn, c_proj, n_head):\n    x = linear(x, **c_attn)\n    qkv_heads = list(map(lambda x: np.split(x, n_head, axis=-1), np.split(x, 3, axis=-1)))\n    causal_mask = (1 - np.tri(x.shape[0], dtype=x.dtype)) * -1e10\n    out_heads = [attention(q, k, v, causal_mask) for q, k, v in zip(*qkv_heads)]\n    x = linear(np.hstack(out_heads), **c_proj)\n    return x\n\ndef transformer_block(x, mlp, attn, ln_1, ln_2, n_head):\n    x = x + mha(layer_norm(x, **ln_1), **attn, n_head=n_head)\n    x = x + ffn(layer_norm(x, **ln_2), **mlp)\n    return x\n\ndef gpt2(inputs, wte, wpe, blocks, ln_f, n_head):\n    x = wte[inputs] + wpe[range(len(inputs))]\n    for block in blocks:\n        x = transformer_block(x, **block, n_head=n_head)\n    return layer_norm(x, **ln_f) @ wte.T\n\ndef generate(inputs, params, n_head, n_tokens_to_generate):\n    from tqdm import tqdm\n    for _ in tqdm(range(n_tokens_to_generate), \"generating\"):\n        logits = gpt2(inputs, **params, n_head=n_head)\n        next_id = np.argmax(logits[-1])\n        inputs.append(int(next_id))\n    return inputs[len(inputs) - n_tokens_to_generate :]\n\ndef main(prompt: str, n_tokens_to_generate: int = 40, model_size: str = \"124M\", models_dir: str = \"models\"):\n    from utils import load_encoder_hparams_and_params\n    encoder, hparams, params = load_encoder_hparams_and_params(model_size, models_dir)\n    input_ids = encoder.encode(prompt)\n    assert len(input_ids) + n_tokens_to_generate < hparams[\"n_ctx\"]\n    output_ids = generate(input_ids, params, hparams[\"n_head\"], n_tokens_to_generate)\n    output_text = encoder.decode(output_ids)\n    return output_text\n\nif __name__ == \"__main__\":\n    import fire\n    fire.Fire(main)\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.490234375,
          "content": "numpy==1.24.1 # used for the actual model code/weights\nregex==2017.4.5 # used by the bpe tokenizer\nrequests==2.27.1 # used to download gpt-2 files from openai\ntqdm==4.64.0 # progress bar to keep your sanity\nfire==0.5.0 # easy CLI creation\n\n# used to load the gpt-2 weights from the open-ai tf checkpoint\n# M1 Macbooks require tensorflow-macos\ntensorflow==2.11.0; sys_platform != 'darwin' or platform_machine != 'arm64'\ntensorflow-macos==2.11.0; sys_platform == 'darwin' and platform_machine == 'arm64'\n"
        },
        {
          "name": "utils.py",
          "type": "blob",
          "size": 2.6806640625,
          "content": "import json\nimport os\nimport re\n\nimport numpy as np\nimport requests\nimport tensorflow as tf\nfrom tqdm import tqdm\n\nfrom encoder import get_encoder\n\n\ndef download_gpt2_files(model_size, model_dir):\n    assert model_size in [\"124M\", \"355M\", \"774M\", \"1558M\"]\n    for filename in [\n        \"checkpoint\",\n        \"encoder.json\",\n        \"hparams.json\",\n        \"model.ckpt.data-00000-of-00001\",\n        \"model.ckpt.index\",\n        \"model.ckpt.meta\",\n        \"vocab.bpe\",\n    ]:\n        url = \"https://openaipublic.blob.core.windows.net/gpt-2/models\"\n        r = requests.get(f\"{url}/{model_size}/{filename}\", stream=True)\n        r.raise_for_status()\n\n        with open(os.path.join(model_dir, filename), \"wb\") as f:\n            file_size = int(r.headers[\"content-length\"])\n            chunk_size = 1000\n            with tqdm(\n                ncols=100,\n                desc=\"Fetching \" + filename,\n                total=file_size,\n                unit_scale=True,\n                unit=\"b\",\n            ) as pbar:\n                # 1k for chunk_size, since Ethernet packet size is around 1500 bytes\n                for chunk in r.iter_content(chunk_size=chunk_size):\n                    f.write(chunk)\n                    pbar.update(chunk_size)\n\n\ndef load_gpt2_params_from_tf_ckpt(tf_ckpt_path, hparams):\n    def set_in_nested_dict(d, keys, val):\n        if not keys:\n            return val\n        if keys[0] not in d:\n            d[keys[0]] = {}\n        d[keys[0]] = set_in_nested_dict(d[keys[0]], keys[1:], val)\n        return d\n\n    params = {\"blocks\": [{} for _ in range(hparams[\"n_layer\"])]}\n    for name, _ in tf.train.list_variables(tf_ckpt_path):\n        array = np.squeeze(tf.train.load_variable(tf_ckpt_path, name))\n        name = name[len(\"model/\") :]\n        if name.startswith(\"h\"):\n            m = re.match(r\"h([0-9]+)/(.*)\", name)\n            n = int(m[1])\n            sub_name = m[2]\n            set_in_nested_dict(params[\"blocks\"][n], sub_name.split(\"/\"), array)\n        else:\n            set_in_nested_dict(params, name.split(\"/\"), array)\n\n    return params\n\n\ndef load_encoder_hparams_and_params(model_size, models_dir):\n    assert model_size in [\"124M\", \"355M\", \"774M\", \"1558M\"]\n\n    model_dir = os.path.join(models_dir, model_size)\n    tf_ckpt_path = tf.train.latest_checkpoint(model_dir)\n    if not tf_ckpt_path:  # download files if necessary\n        os.makedirs(model_dir, exist_ok=True)\n        download_gpt2_files(model_size, model_dir)\n        tf_ckpt_path = tf.train.latest_checkpoint(model_dir)\n\n    encoder = get_encoder(model_size, models_dir)\n    hparams = json.load(open(os.path.join(model_dir, \"hparams.json\")))\n    params = load_gpt2_params_from_tf_ckpt(tf_ckpt_path, hparams)\n\n    return encoder, hparams, params\n"
        }
      ]
    }
  ]
}