{
  "metadata": {
    "timestamp": 1736559530922,
    "page": 123,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Baekalfen/PyBoy",
      "stars": 4685,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.154296875,
          "content": "# macOS\n.DS_Store\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n*.lib\n*.exp\n*.dll\n\n# Distribution / packaging\n.Python\n.python-version\nenv/\nvenv/\n.venv/\nbuild/\ncython_debug/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\ncoverage.xml\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Don't want to see any ROMs being uploaded\n# This project is not for pirating games!\n*.gb\n*.gbc\n*.rom\nDMG_ROM.bin\nCGB_ROM.bin\nBlarggROMs/\nTestROMs/\nROMs/\ndiffDump.txt\nCore_Dump_*\n*.gb*.state\n*.gb*.ram\n*.gb*.rtc\n/test_roms/\ntest_data.encrypted\n*.lock\ntetris/\nPyBoy-RL/\n\n# Cython\n/pyboy/**/*.c\n/pyboy/**/*.h\n/pyboy/**/*.html\n/pyboy/**/*.so\n\n/recordings\n/screenshots\n\n/bin\n/include\n/lib-python\n/lib_pypy\n/pip-selfcheck.json\n/site-packages\n/share\n\n# Bootrom\nextras/bootrom/bootrom*.map\nextras/bootrom/bootrom*.obj\nextras/bootrom/bootrom*.gb\nextras/bootrom/logo.asm\n\nextras/default_rom/default_rom*.map\nextras/default_rom/default_rom*.obj\n!default_rom*.gb\nextras/default_rom/default_rom.gb\nextras/default_rom/default_rom_cgb.gb\n\ntest.replay\n\n/mooneye/\n/blargg/\n/GB Tests/\n/SameSuite/\n.vscode/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.392578125,
          "content": "exclude: (opcodes.py|manager.py|manager.pxd)\nrepos:\n- repo: https://github.com/myint/unify\n  rev: v0.5\n  hooks:\n    - id: unify\n      args: [--quote, '\"', --in-place]\n      language: python\n      types: [python]\n- repo: https://github.com/google/yapf\n  rev: 'v0.40.2'\n  hooks:\n  - id: yapf\n    additional_dependencies: [toml]\n- repo: https://github.com/PyCQA/isort\n  rev: 5.12.0\n  hooks:\n  - id: isort\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.4873046875,
          "content": "Any contribution is appreciated. The currently known errors are registered in the Issues tab. Feel free to take a swing at any one of them.\n\nFor the more major features, there are the following that you can give a try. They are also described in more detail in the [project list](https://github.com/Baekalfen/PyBoy/raw/master/extras/Projects/Projects.pdf):\n* Color\n* Link Cable\n* _(Experimental)_ AI - use the API or game wrappers to train a neural network\n* _(Experimental)_ Game Wrappers - make wrappers for popular games\n\nIf you want to implement something which is not on the list, feel free to do so anyway. If you want to merge it into our repo, then just send a pull request and we will have a look at it.\n\nChecklist for pull-requests\n---------------------------\n\n  1. The project is licensed under LGPL (see LICENSE.md). When merged, your code will be under the same license.\n     So make sure you have read and understand it.\n  2. Please coordinate with one of the core developers before making a big pull-request.\n     It's a shame to make something big that doesn't fit the project.\n  3. Remember to make a separate branch on your fork. This makes it a lot easier for the core developers to help\n     getting your pull-request ready.\n  4. Install `pip install pre-commit`. This takes care of the formatting rules when you commit your code.\n  5. Add tests. We need good pytests for your code. This will help us keep the project stable.\n  6. Please don't change the code style, unless it's specifically asked for.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 7.380859375,
          "content": "GNU Lesser General Public License\n=================================\n\n_Version 3, 29 June 2007_\n_Copyright © 2007 Free Software Foundation, Inc. &lt;<http://fsf.org/>&gt;_\n\nEveryone is permitted to copy and distribute verbatim copies\nof this license document, but changing it is not allowed.\n\n\nThis version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n### 0. Additional Definitions\n\nAs used herein, “this License” refers to version 3 of the GNU Lesser\nGeneral Public License, and the “GNU GPL” refers to version 3 of the GNU\nGeneral Public License.\n\n“The Library” refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\nAn “Application” is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\nA “Combined Work” is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the “Linked\nVersion”.\n\nThe “Minimal Corresponding Source” for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\nThe “Corresponding Application Code” for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n### 1. Exception to Section 3 of the GNU GPL\n\nYou may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n### 2. Conveying Modified Versions\n\nIf you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n* **a)** under this License, provided that you make a good faith effort to\nensure that, in the event an Application does not supply the\nfunction or data, the facility still operates, and performs\nwhatever part of its purpose remains meaningful, or\n\n* **b)** under the GNU GPL, with none of the additional permissions of\nthis License applicable to that copy.\n\n### 3. Object Code Incorporating Material from Library Header Files\n\nThe object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n* **a)** Give prominent notice with each copy of the object code that the\nLibrary is used in it and that the Library and its use are\ncovered by this License.\n* **b)** Accompany the object code with a copy of the GNU GPL and this license\ndocument.\n\n### 4. Combined Works\n\nYou may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n* **a)** Give prominent notice with each copy of the Combined Work that\nthe Library is used in it and that the Library and its use are\ncovered by this License.\n\n* **b)** Accompany the Combined Work with a copy of the GNU GPL and this license\ndocument.\n\n* **c)** For a Combined Work that displays copyright notices during\nexecution, include the copyright notice for the Library among\nthese notices, as well as a reference directing the user to the\ncopies of the GNU GPL and this license document.\n\n* **d)** Do one of the following:\n    - **0)** Convey the Minimal Corresponding Source under the terms of this\nLicense, and the Corresponding Application Code in a form\nsuitable for, and under terms that permit, the user to\nrecombine or relink the Application with a modified version of\nthe Linked Version to produce a modified Combined Work, in the\nmanner specified by section 6 of the GNU GPL for conveying\nCorresponding Source.\n    - **1)** Use a suitable shared library mechanism for linking with the\nLibrary.  A suitable mechanism is one that **(a)** uses at run time\na copy of the Library already present on the user's computer\nsystem, and **(b)** will operate properly with a modified version\nof the Library that is interface-compatible with the Linked\nVersion.\n\n* **e)** Provide Installation Information, but only if you would otherwise\nbe required to provide such information under section 6 of the\nGNU GPL, and only to the extent that such information is\nnecessary to install and execute a modified version of the\nCombined Work produced by recombining or relinking the\nApplication with a modified version of the Linked Version. (If\nyou use option **4d0**, the Installation Information must accompany\nthe Minimal Corresponding Source and Corresponding Application\nCode. If you use option **4d1**, you must provide the Installation\nInformation in the manner specified by section 6 of the GNU GPL\nfor conveying Corresponding Source.)\n\n### 5. Combined Libraries\n\nYou may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n* **a)** Accompany the combined library with a copy of the same work based\non the Library, uncombined with any other library facilities,\nconveyed under the terms of this License.\n* **b)** Give prominent notice with the combined library that part of it\nis a work based on the Library, and explaining where to find the\naccompanying uncombined form of the same work.\n\n### 6. Revised Versions of the GNU Lesser General Public License\n\nThe Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License “or any later version”\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\nIf the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0576171875,
          "content": "exclude **/*.c **/*.h tests/*\ninclude pyboy/default_rom.gb\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.306640625,
          "content": "\n.PHONY: build clean run install test\n\nall: build\n\nDEBUG ?= 1\nifeq ($(DEBUG), 1)\n    CFLAGS='-w'\nelse\n    CFLAGS='-w -DCYTHON_WITHOUT_ASSERTIONS'\nendif\n\nPY ?= python3\nPYPY ?= pypy3\nROOT_DIR := $(shell git rev-parse --show-toplevel)\nGITHUB_REF ?= \"refs/tags/v0.0.0\"\nPYBOY_VERSION ?= $(shell echo ${GITHUB_REF} | cut -d'/' -f3)\nPYTEST_ARGS ?= -n auto -v\n\ndist: clean build\n\t${PY} setup.py sdist bdist_wheel\n\t${PY} -m twine upload dist/pyboy-${version}*\n\ncodecov: clean\n\t@echo \"Finding code coverage...\"\n\tCFLAGS='-w -DCYTHON_TRACE=1' ${PY} setup.py build_ext --inplace --codecov-trace\n\t${PY} setup.py test --codecov-trace\n\tcodecov\n\nbuild:\n\t@echo \"Building...\"\n\tcd ${ROOT_DIR}/extras/default_rom && $(MAKE)\n\tcd ${ROOT_DIR}/extras/bootrom && $(MAKE)\n\tCFLAGS=$(CFLAGS) ${PY} setup.py build_ext -j $(shell getconf _NPROCESSORS_ONLN) --inplace\n\nclean:\n\t@echo \"Cleaning...\"\n\tcd ${ROOT_DIR}/extras/default_rom && $(MAKE) clean\n\tcd ${ROOT_DIR}/extras/bootrom && $(MAKE) clean\n\trm -rf PyBoy.egg-info\n\trm -rf build\n\trm -rf dist\n\tfind pyboy/ -type f -name \"*.pyo\" -delete\n\tfind pyboy/ -type f -name \"*.pyc\" -delete\n\tfind pyboy/ -type f -name \"*.pyd\" -delete\n\tfind pyboy/ -type f -name \"*.so\" -delete\n\tfind pyboy/ -type f -name \"*.c\" -delete\n\tfind pyboy/ -type f -name \"*.h\" -delete\n\tfind pyboy/ -type f -name \"*.dll\" -delete\n\tfind pyboy/ -type f -name \"*.lib\" -delete\n\tfind pyboy/ -type f -name \"*.exp\" -delete\n\tfind pyboy/ -type f -name \"*.html\" -delete\n\tfind pyboy/ -type d -name \"__pycache__\" -delete\n\nclean_tests:\n\t${SHELL} 'rm -rf blargg'\n\t${SHELL} 'rm -rf SameSuite'\n\t${SHELL} 'rm -rf mooneye'\n\t${SHELL} 'rm -rf \"GB Tests\"'\n\ninstall: build\n\t${PY} -m pip install .\n\nuninstall:\n\t${PY} -m pip uninstall pyboy\n\ntest: export DEBUG=1\ntest: clean test_pypy test_cpython_doctest build test_cython\n\ntest_cpython_doctest:\n\t${PY} -m pytest pyboy/ ${PYTEST_ARGS}\n\ntest_cython:\n\t${PY} -m pytest tests/ ${PYTEST_ARGS}\n\ntest_pypy:\n\t${PYPY} -m pytest tests/ pyboy/ ${PYTEST_ARGS}\n\ntest_all: test\n\ndocs: clean\n\tbash -O extglob -c 'rm -rf -- ${ROOT_DIR}/docs/!(templates|CNAME)'\n\tmkdir -p ${ROOT_DIR}/docs/templates\n\tpdoc --html --force -c latex_math=True -c sort_identifiers=False -c show_type_annotations=True --template-dir docs/templates pyboy\n\tcp -r html/pyboy/ ${ROOT_DIR}/docs/\n\trm -rf html\n\nrepackage_secrets:\n\tpython3 -c 'from tests.conftest import pack_secrets; pack_secrets()'\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.427734375,
          "content": "<p align=\"center\">\n<img src=\"extras/README/pyboy.svg\" width=\"480\">\n</p>\n\n__If you have any questions, or just want to chat, [join us on Discord](https://discord.gg/Zrf2nyH).__\n\n[![Discord](https://img.shields.io/discord/584149554132418570?style=for-the-badge&logo=Discord&label=PyBoy)](https://discord.gg/Zrf2nyH)\n\n<!---\nGenerate GIF with the layout and captions\n-->\n<table>\n  <tbody>\n    <tr>\n      <td colspan=2 align=\"center\"><a href=https://github.com/PWhiddy/PokemonRedExperiments>Train RL agents to play Pokemon Red</a>\n      </td>\n      <td align=\"center\"><a href=https://github.com/Baekalfen/PyBoy/wiki/Experimental-and-optional-features#rewind-time>Rewind any game</a><br>\n      </td>\n    </tr>\n    <tr>\n      <td colspan=2 align=\"center\">\n        <div align=\"center\">\n        <a href=\"http://www.youtube.com/watch?feature=player_embedded&v=DcYLT37ImBY\" target=\"_blank\">\n        <img src=\"http://img.youtube.com/vi/DcYLT37ImBY/maxresdefault.jpg\" alt=\"Watch the video\" width=\"500\" border=\"10\" />\n        <!-- <img src=\"http://img.youtube.com/vi/DcYLT37ImBY/hqdefault.jpg\" alt=\"Watch the video\" width=\"500\" border=\"10\" /> -->\n        </a>\n        <!-- https://www.youtube.com/watch?v=DcYLT37ImBY -->\n        <!-- <img src=\"extras/README/8.gif\" width=\"400\"><br> -->\n        </div>\n      </td>\n      <td align=\"center\">\n        <img src=\"extras/README/5.gif\" width=\"250\">\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\">Play the classics<br>\n      </td>\n      <td align=\"center\"><a href=https://github.com/lixado/PyBoy-RL>Create your own AI</a><br>\n      </td>\n      <td align=\"center\"><a href=https://github.com/uiucanh/tetris>Beat world records with AI</a><br>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\">\n        <img src=\"extras/README/1.gif\" width=\"250\">\n      </td>\n      <td align=\"center\">\n        <img src=\"extras/README/6.gif\" width=\"250\">\n      </td>\n      <td align=\"center\">\n        <img src=\"extras/README/7.gif\" width=\"250\">\n      </td>\n    </tr>\n  </tbody>\n</table>\n\nGetting Started\n===============\nThe instructions are simple:\n\n```sh\n$ pip install pyboy\n```\n\nFor details, see [installation instructions](https://github.com/Baekalfen/PyBoy/wiki/Installation).\n\nNow you're ready! Either use PyBoy directly from the terminal\n```sh\n$ pyboy game_rom.gb\n```\n\nOr use it in your Python scripts:\n```python\nfrom pyboy import PyBoy\npyboy = PyBoy('game_rom.gb')\nwhile pyboy.tick():\n    pass\npyboy.stop()\n```\n\n<!-- Or using the context manager:\n```python\nfrom pyboy import PyBoy\nwith PyBoy('game_rom.gb') as pyboy:\n    while pyboy.tick():\n        pass\n``` -->\n\n\nThe API\n=======\n\nIf you are looking to make a bot or AI, then these resources are a good place to start:\n * [PyBoy API Documentation](https://baekalfen.github.io/PyBoy/index.html)\n * [Wiki Pages](https://github.com/Baekalfen/PyBoy/wiki/)\n   * [Using PyBoy with Gym](https://github.com/Baekalfen/PyBoy/wiki/Using-PyBoy-with-Gym)\n   * [Example: Kirby](https://github.com/Baekalfen/PyBoy/wiki/Example-Kirby)\n   * [Example: Tetris](https://github.com/Baekalfen/PyBoy/wiki/Example-Tetris)\n   * [Example: Super Mario Land](https://github.com/Baekalfen/PyBoy/wiki/Example-Super-Mario-Land)\n   * [Code Examples](https://github.com/Baekalfen/PyBoy/tree/master/extras/examples)\n * [Discord](https://discord.gg/Zrf2nyH)\n\n\nWhen the emulator is running, you can easily access [PyBoy's API](https://baekalfen.github.io/PyBoy/index.html):\n```python\npyboy.set_emulation_speed(0) # No speed limit\npyboy.button('down')\npyboy.button('a')\npyboy.tick() # Process at least one frame to let the game register the input\nvalue_of_interest = pyboy.memory[0xC345]\n\npil_image = pyboy.screen.image\npil_image.save('screenshot.png')\n```\n\nThe [Wiki](https://github.com/Baekalfen/PyBoy/wiki) shows how to interface with PyBoy from your own project.\n\nPerformance\n===========\n\nPerformance is a priority for PyBoy, to make your AI training and scripts as fast as possible.\n\nThe easiest way to improve your performance, is to skip rendering of unnecessary frames. If you know your\ncharacter takes X frames to move, or the game doesn't take input every frame, you can skip those to potentially triple\nyour performance. All game logic etc. will still process.\n\nHere is a simple comparison of rendering every frame, rendering every 15th frame, and not rendering any frames (higher is better). See [`pyboy.tick`](https://docs.pyboy.dk/#pyboy.PyBoy.tick) for how it works. Your performance will depend on the game.\n\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\">\n        Full rendering\n      </td>\n      <td align=\"center\">\n        Frame-skip 15\n      </td>\n      <td align=\"center\">\n        No rendering\n      </td>\n    </tr>\n    <tr>\n      <td>\n      x124 realtime\n      </td>\n      <td>\n      x344 realtime\n      </td>\n      <td>\n      x395 realtime\n      </td>\n    </tr>\n<tr> <!-- Markdown/HTML broken after this -->\n<td>\n\n```python\nfor _ in range(target):\n    pyboy.tick()\n\n```\n</td>\n<td >\n\n```python\nfor _ in range(target//15):\n    pyboy.tick(15)\n\n```\n</td>\n<td >\n\n```python\npyboy.tick(target, False)\n\n```\n</td>\n</tr>\n  </tbody>\n</table>\n\nThe Game Boy was originally running at 60 frames per second, so a speed-up of 100x realtime is 6,000 frames per\nsecond. And trivially from the table above, simulating 395 hours of gameplay can be done in 1 hour with no rendering.\n\nIt's also recommended to be running multiple instances of PyBoy in parallel. On an 8-core machine, you could potentially\ndo 3160 hours of gameplay in 1 hour.\n\nContributing\n============\nAny contribution is appreciated. The currently known problems are tracked in [the Issues tab](https://github.com/Baekalfen/PyBoy/issues). Feel free to take a swing at any one of them. If you have something original in mind, come and [discuss it on on Discord](https://discord.gg/Zrf2nyH).\n\n[![Discord](https://img.shields.io/discord/584149554132418570?style=for-the-badge&logo=Discord&label=PyBoy)](https://discord.gg/Zrf2nyH)\n\nFor the more major features, there are the following that you can give a try. They are also described in more detail in the [project list in the Wiki](https://github.com/Baekalfen/PyBoy/wiki/Student-Projects):\n* Hacking games\n* Link Cable\n* Debugger (VSCode, GDB, terminal or otherwise)\n* AI - [use the `api`](https://baekalfen.github.io/PyBoy/index.html) or game wrappers to train a neural network\n* Game Wrappers - make wrappers for popular games\n\nIf you want to implement something which is not on the list, feel free to do so anyway. If you want to merge it into our repo, then just send a pull request and we will have a look at it.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyboy",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.970703125,
          "content": "[project]\nname = \"pyboy\"\nversion = \"2.4.1\"\nauthors = [\n    {name = \"Mads Ynddal\", email = \"mads@ynddal.dk\"}\n]\nkeywords = [\"gameboy\", \"game boy\", \"emulator\", \"cython\", \"pypy\"]\ndescription = \"Game Boy emulator written in Python\"\nreadme = \"README.md\"\nlicense = {file = \"LICENSE.md\"}\nclassifiers = [\n    \"License :: Free for non-commercial use\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Cython\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: Implementation :: PyPy\",\n    \"Topic :: System :: Emulators\",\n]\nrequires-python = \">=3.8\"\n\ndependencies = [\n    \"numpy\",\n    \"pysdl2\",\n    \"pysdl2-dll\",\n]\n\n[project.optional-dependencies]\nall = [\n    \"pyopengl\",\n    \"markdown\",\n    \"pdoc3\",\n    \"gym\",\n]\n\n[project.urls]\nHomepage = \"https://github.com/Baekalfen/PyBoy\"\nDocumentation = \"https://docs.pyboy.dk/index.html\"\nRepository = \"https://github.com/Baekalfen/PyBoy.git\"\n\n[project.scripts]\npyboy = \"pyboy.__main__:main\"\n\n[build-system]\nrequires = [\n    \"setuptools>=61.0.0\",\n    \"wheel\",\n    \"cython>=3.0.6,!=3.0.10; platform_python_implementation == 'CPython'\",\n    \"numpy\",\n]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.setuptools]\ninclude-package-data = true\nzip-safe = false\npackages = [\"pyboy\", \"pyboy.api\", \"pyboy.core\", \"pyboy.core.cartridge\", \"pyboy.logging\", \"pyboy.plugins\"]\n\n[tool.setuptools.package-data]\n\"*\" = [\n    \"**/*.pxi\",\n    \"**/*.pyx\",\n    \"**/*.pxd\",\n    \"**/bootrom*.bin\",\n    \"**/font.txt\"\n]\n\n[tool.isort]\nline_length = 120\n\n[tool.yapf]\nbased_on_style = \"facebook\"\nspaces_before_comment = 1\ncolumn_limit = 120\nalign_closing_bracket_with_visual_indent = false\ndedent_closing_brackets = true\ncoalesce_brackets = true\nindent_closing_brackets = false\nindent_dictionary_value = true\njoin_multiple_lines = false\nsplit_penalty_after_opening_bracket = 0\nsplit_penalty_before_if_expr = 30\nsplit_penalty_for_added_line_split = 30\nsplit_before_logical_operator = false\nsplit_before_bitwise_operator = false\narithmetic_precedence_indication = true\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.12890625,
          "content": "# Change in setup.py\nsetuptools>=61.0.0\ncython>=3.0.6,!=3.0.10; platform_python_implementation == 'CPython'\nnumpy\npysdl2\npysdl2-dll\n"
        },
        {
          "name": "requirements_tests.txt",
          "type": "blob",
          "size": 0.1201171875,
          "content": "-r requirements.txt\npillow>=9.1.0\npytest>=6.0.0\npytest-xdist\npytest-lazy-fixtures\npyopengl\nfilelock\ncryptography\nGitPython\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.685546875,
          "content": "import multiprocessing\nimport os\nimport platform\nimport sys\nfrom multiprocessing import cpu_count\n\nfrom setuptools import Extension, setup\n\nCYTHON = platform.python_implementation() == \"CPython\"\nROOT_DIR = \"pyboy\"\n\nif not CYTHON:\n    setup()\n    exit(0)\n\nimport numpy as np\nfrom Cython.Build import cythonize\nfrom Cython.Compiler import DebugFlags, Errors\nfrom Cython.Distutils import build_ext as _build_ext\n\n\ndef patched_error(position, message):\n    if message == \"Python object cannot be passed as a varargs parameter\":\n        # We ignore this error to pass PyObject* to logging\n        return\n    else:\n        #print(\"Errors.error:\", repr(position), repr(message)) ###\n        if position is None:\n            raise Errors.InternalError(message)\n        err = Errors.CompileError(position, message)\n        if DebugFlags.debug_exception_on_error:\n            raise Exception(err) # debug\n        Errors.report_error(err)\n        return err\n\n\nErrors.error = patched_error\n\n\nclass build_ext(_build_ext):\n    def initialize_options(self):\n        super().initialize_options()\n        self.parallel = cpu_count()\n\n        if sys.platform == \"win32\":\n            thread_count = 0 # Disables multiprocessing\n        else:\n            thread_count = cpu_count()\n\n        # Fixing issue with nthreads in Cython\n        if (3,\n            8) <= sys.version_info[:2] and sys.platform == \"darwin\" and multiprocessing.get_start_method() == \"spawn\":\n            multiprocessing.set_start_method(\"fork\", force=True)\n\n        cflags = [\"-O3\"]\n        # NOTE: For performance. Check if other platforms need an equivalent change.\n        if sys.platform == \"darwin\":\n            cflags.append(\"-DCYTHON_INLINE=inline __attribute__ ((__unused__)) __attribute__((always_inline))\")\n\n        py_pxd_files = prep_pxd_py_files()\n        cythonize_files = map(\n            lambda src: Extension(\n                src.split(\".\")[0].replace(os.sep, \".\"),\n                [src],\n                extra_compile_args=cflags,\n                extra_link_args=[\"-s\", \"-w\"],\n                include_dirs=[np.get_include()],\n            ), list(py_pxd_files)\n        )\n        self.distribution.ext_modules = cythonize(\n            [*cythonize_files],\n            nthreads=thread_count,\n            annotate=False,\n            gdb_debug=False,\n            language_level=3,\n            compiler_directives={\n                \"boundscheck\": False,\n                \"cdivision\": True,\n                \"cdivision_warnings\": False,\n                \"infer_types\": True,\n                \"initializedcheck\": False,\n                \"nonecheck\": False,\n                \"overflowcheck\": False,\n                # \"profile\" : True,\n                \"wraparound\": False,\n                \"legacy_implicit_noexcept\": True,\n            },\n        )\n\n\ndef prep_pxd_py_files():\n    ignore_py_files = [\"__main__.py\", \"manager_gen.py\", \"opcodes_gen.py\", \"conftest.py\"]\n    # Cython doesn't trigger a recompile on .py files, where only the .pxd file has changed. So we fix this here.\n    # We also yield the py_files that have a .pxd file, as we feed these into the cythonize call.\n    for root, dirs, files in os.walk(ROOT_DIR):\n        for f in files:\n            if os.path.splitext(f)[1] in [\".py\", \".pyx\"] and f not in ignore_py_files:\n                yield os.path.join(root, f)\n            if os.path.splitext(f)[1] == \".pxd\":\n                py_file = os.path.join(root, os.path.splitext(f)[0]) + \".py\"\n                if os.path.isfile(py_file):\n                    if os.path.getmtime(os.path.join(root, f)) > os.path.getmtime(py_file):\n                        os.utime(py_file)\n\n\nsetup(\n    cmdclass={\n        \"build_ext\": build_ext,\n    },\n    ext_modules=[Extension(\"\", [\"\"])], # Added to trigger a binary wheel\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}