{
  "metadata": {
    "timestamp": 1736559528102,
    "page": 119,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MechanicalSoup/MechanicalSoup",
      "stars": 4692,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.158203125,
          "content": "[run]\ninclude =\n    # The tested code will be located wherever the module was installed.\n    */mechanicalsoup/*.py\n\nomit =\n    */__version__.py\n    */__init__.py\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.57421875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbin/\nbuild/\ndevelop-eggs/\ndist/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n.eggs\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\n.pytest_cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n# Rope\n.ropeproject\n\n# Django stuff:\n*.log\n*.pot\n\n# Sphinx documentation\ndocs/_build/\n\n# virtualenv\n.virtual-*\n"
        },
        {
          "name": ".mention-bot",
          "type": "blob",
          "size": 0.0546875,
          "content": "{\n  \"userBlacklist\": [\"moy\", \"hemberger\", \"hickford\"]\n}\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.3896484375,
          "content": "# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/conf.py\n\npython:\n  install:\n  - requirements: requirements.txt\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 4.13671875,
          "content": "Overall Guidelines\n------------------\n\nBug reports, feature suggestions and pull requests welcome (on\nGitHub). Security issues should be reported by email to the core\ndevelopers (emails available in the \"Author\" field of commits in the\nGit history).\n\nWhen editing please don't reformat codeâ€”this makes diffs and pull\nrequests hard to read.\n\nCode should be flake8-clean and the test coverage is and should remain\n100%. Add new tests whenever you add new features.\n\nHints on Development\n--------------------\n\n|Build Status|\n|Coverage Status|\n|Documentation Status|\n|CII Best Practices|\n\nPython version support in the current main branch may differ from the\nlatest release in\n`PyPI <https://pypi.python.org/pypi/MechanicalSoup/>`__. Please inspect our\n`GitHub Actions workflows <https://github.com/MechanicalSoup/MechanicalSoup/actions>`__\nor run ``python setup.py --classifiers`` to see which versions of Python are\nsupported in the current main branch.\n\nInstalling dependencies and running tests can be done with:\n\n::\n\n    python setup.py test\n\nThe documentation can be generated and viewed with:\n\n::\n\n    pip install sphinx\n    python setup.py build_sphinx\n    firefox docs/_build/html/index.html\n\nThe documentation is generated from docstrings within ``*.py`` files,\nand ``*.rst`` documentation files in the ``docs/`` directory.\n\nYou can develop against multiple versions of Python using\n`virtualenv <https://packaging.python.org/tutorials/installing-packages/#creating-virtual-environments>`__:\n\n::\n\n    python3 -m venv .virtual-py3 && source .virtual-py3/bin/activate\n    pip install -r requirements.txt -r tests/requirements.txt\n\nAfter making changes, run pytest in all virtualenvs:\n\n::\n\n    source .virtual-py3/bin/activate\n    pytest\n\nInstallation should be as simple as:\n\n::\n\n    python setup.py install\n\nEditing the logo\n----------------\n\nThe logo is available as an SVG file in ``assets/``. You may need to\ninstall the `Open Sans\n<https://fonts.google.com/specimen/Open+Sans>`__ and `Zilla Slab\n<https://fonts.google.com/specimen/Zilla+Slab>`__ fonts (download and\nstore the ``*.ttf`` files in your ``~/.local/share/fonts`` directory)\nto view it properly. The file can then be opened in e.g. Inkscape.\n\nRelease Checklist\n-----------------\n\nReleases can be done only by people with sufficient privileges on\nGitHub and PyPI. Things to do are:\n\nAt each release:\n\n-  Make all final changes to the repository before release:\n\n   - Document all notable changes in ``docs/ChangeLog.rst``.\n   - Update the version number to X.Y.Z in ``mechanicalsoup/__version__.py``.\n   - Remove the ``(in development)`` mention in ``docs/ChangeLog.rst``.\n\n- Commit and push the release to GitHub (both branch and tag)::\n\n    git commit -m \"Release X.Y.Z\"\n    git branch vX.Y\n    git tag vX.Y.Z\n    git push origin main vX.Y vX.Y.Z\n\n- Visit the `release page on GitHub\n  <https://github.com/MechanicalSoup/MechanicalSoup/releases>`__, copy\n  the relevant section from ``docs/ChangeLog.rst`` to the release\n  page.\n\n- Wait for the \"Upload Python Package\" GitHub Action to complete, and then\n  check on https://pypi.org/project/MechanicalSoup/. Verify installation\n  from PyPI with ``pip install --no-cache-dir mechanicalsoup``.\n\nRight after the release:\n\n- Update the version number to a ``X.Y.Z-dev`` number in\n  ``mechanicalsoup/__version__.py``\n- Create a new ``(in development)`` section in ``docs/ChangeLog.rst``.\n- ``git commit -m \"Prepare for next release\" && git push``\n\n.. |Build Status| image:: https://github.com/MechanicalSoup/MechanicalSoup/actions/workflows/python-package.yml/badge.svg?branch=main\n   :target: https://github.com/MechanicalSoup/MechanicalSoup/actions/workflows/python-package.yml?query=branch%3Amain\n.. |Coverage Status| image:: https://codecov.io/gh/MechanicalSoup/MechanicalSoup/branch/main/graph/badge.svg\n   :target: https://codecov.io/gh/MechanicalSoup/MechanicalSoup\n.. |Documentation Status| image:: https://readthedocs.org/projects/mechanicalsoup/badge/?version=latest\n   :target: https://mechanicalsoup.readthedocs.io/en/latest/?badge=latest\n.. |CII Best Practices| image:: https://bestpractices.coreinfrastructure.org/projects/1334/badge\n   :target: https://bestpractices.coreinfrastructure.org/projects/1334\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.14453125,
          "content": "include LICENSE README.rst\nrecursive-include tests *.py\ninclude examples/example*.py\ninclude requirements.txt tests/requirements.txt\ninclude docs/*\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 4.625,
          "content": ".. image:: /assets/mechanical-soup-logo.png\n   :alt: MechanicalSoup. A Python library for automating website interaction.\n\nHome page\n---------\n\nhttps://mechanicalsoup.readthedocs.io/\n\nOverview\n--------\n\nA Python library for automating interaction with websites.\nMechanicalSoup automatically stores and sends cookies, follows\nredirects, and can follow links and submit forms. It doesn't do\nJavaScript.\n\nMechanicalSoup was created by `M Hickford\n<https://github.com/hickford/>`__, who was a fond user of the\n`Mechanize <https://github.com/jjlee/mechanize>`__ library.\nUnfortunately, Mechanize was `incompatible with Python 3 until 2019\n<https://github.com/python-mechanize/mechanize/issues/9>`__ and its development\nstalled for several years. MechanicalSoup provides a similar API, built on Python\ngiants `Requests <http://docs.python-requests.org/en/latest/>`__ (for\nHTTP sessions) and `BeautifulSoup\n<https://www.crummy.com/software/BeautifulSoup/>`__ (for document\nnavigation). Since 2017 it is a project actively maintained by a small\nteam including `@hemberger <https://github.com/hemberger>`__ and `@moy\n<https://github.com/moy/>`__.\n\n|Gitter Chat|\n\nInstallation\n------------\n\n|Latest Version| |Supported Versions|\n\nPyPy3 is also supported (and tested against).\n\nDownload and install the latest released version from `PyPI <https://pypi.python.org/pypi/MechanicalSoup/>`__::\n\n  pip install MechanicalSoup\n\nDownload and install the development version from `GitHub <https://github.com/MechanicalSoup/MechanicalSoup>`__::\n\n  pip install git+https://github.com/MechanicalSoup/MechanicalSoup\n\nInstalling from source (installs the version in the current working directory)::\n\n  python setup.py install\n\n(In all cases, add ``--user`` to the ``install`` command to\ninstall in the current user's home directory.)\n\nDocumentation\n-------------\n\nThe full documentation is available on\nhttps://mechanicalsoup.readthedocs.io/. You may want to jump directly to\nthe `automatically generated API\ndocumentation <https://mechanicalsoup.readthedocs.io/en/stable/mechanicalsoup.html>`__.\n\nExample\n-------\n\nFrom `<examples/expl_qwant.py>`__, code to get the results from\na Qwant search:\n\n.. code:: python\n\n    \"\"\"Example usage of MechanicalSoup to get the results from the Qwant\n    search engine.\n    \"\"\"\n\n    import re\n    import mechanicalsoup\n    import html\n    import urllib.parse\n\n    # Connect to Qwant\n    browser = mechanicalsoup.StatefulBrowser(user_agent='MechanicalSoup')\n    browser.open(\"https://lite.qwant.com/\")\n\n    # Fill-in the search form\n    browser.select_form('#search-form')\n    browser[\"q\"] = \"MechanicalSoup\"\n    browser.submit_selected()\n\n    # Display the results\n    for link in browser.page.select('.result a'):\n        # Qwant shows redirection links, not the actual URL, so extract\n        # the actual URL from the redirect link:\n        href = link.attrs['href']\n        m = re.match(r\"^/redirect/[^/]*/(.*)$\", href)\n        if m:\n            href = urllib.parse.unquote(m.group(1))\n        print(link.text, '->', href)\n\nMore examples are available in `<examples/>`__.\n\nFor an example with a more complex form (checkboxes, radio buttons and\ntextareas), read `<tests/test_browser.py>`__\nand `<tests/test_form.py>`__.\n\nDevelopment\n-----------\n\n|Build Status|\n|Coverage Status|\n|Documentation Status|\n|CII Best Practices|\n\nInstructions for building, testing and contributing to MechanicalSoup:\nsee `<CONTRIBUTING.rst>`__.\n\nCommon problems\n---------------\n\nRead the `FAQ\n<https://mechanicalsoup.readthedocs.io/en/stable/faq.html>`__.\n\n.. |Latest Version| image:: https://img.shields.io/pypi/v/MechanicalSoup.svg\n   :target: https://pypi.python.org/pypi/MechanicalSoup/\n.. |Supported Versions| image:: https://img.shields.io/pypi/pyversions/mechanicalsoup.svg\n   :target: https://pypi.python.org/pypi/MechanicalSoup/\n.. |Build Status| image:: https://github.com/MechanicalSoup/MechanicalSoup/actions/workflows/python-package.yml/badge.svg?branch=main\n   :target: https://github.com/MechanicalSoup/MechanicalSoup/actions/workflows/python-package.yml?query=branch%3Amain\n.. |Coverage Status| image:: https://codecov.io/gh/MechanicalSoup/MechanicalSoup/branch/main/graph/badge.svg\n   :target: https://codecov.io/gh/MechanicalSoup/MechanicalSoup\n.. |Documentation Status| image:: https://readthedocs.org/projects/mechanicalsoup/badge/?version=latest\n   :target: https://mechanicalsoup.readthedocs.io/en/latest/?badge=latest\n.. |CII Best Practices| image:: https://bestpractices.coreinfrastructure.org/projects/1334/badge\n   :target: https://bestpractices.coreinfrastructure.org/projects/1334\n.. |Gitter Chat| image:: https://badges.gitter.im/MechanicalSoup/MechanicalSoup.svg\n   :target: https://gitter.im/MechanicalSoup/Lobby\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "mechanicalsoup",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.2626953125,
          "content": "requests >= 2.22.0\nbeautifulsoup4 >= 4.7\nlxml\ncertifi>=2022.12.7  # not directly required (indirect dependency from requests),\n                    # pinned by Snyk to avoid a vulnerability\nurllib3>=2.2.2 # not directly required, pinned by Snyk to avoid a vulnerability\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.560546875,
          "content": "[aliases]\ntest=pytest\n\n[tool:pytest]\n# These options allow us to invoke an undecorated pytest to run tests.\naddopts = --cov --cov-config .coveragerc --flake8 -v\n\n# Specify which files to ignore for flake8 tests (note that there is no file\n# inclusion option, only exclusion).\nflake8-ignore =\n    docs/*.py ALL\n\n# Tell pytest to look for tests in all .py files in the tests subdirectory.\n# This will allow pytest to rewrite asserts in auxiliary test modules.\npython_files = tests/*.py\n\n[build_sphinx]\nsource-dir = docs/\nbuild-dir  = docs/_build\nall-files  = 1\nfresh-env  = 1\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.8779296875,
          "content": "import re\nimport sys\nfrom codecs import open  # To use a consistent encoding\nfrom os import path\n\nfrom setuptools import setup  # Always prefer setuptools over distutils\n\n\ndef strip(line):\n    \"\"\"Strip comments and whitespace from a line of text.\"\"\"\n    return line.split('#', 1)[0].strip()\n\n\ndef requirements_from_file(filename):\n    \"\"\"Parses a pip requirements file into a list.\"\"\"\n    with open(filename, 'r') as fd:\n        return [strip(line) for line in fd if strip(line)]\n\n\ndef read(fname, URL, URLImage):\n    \"\"\"Read the content of a file.\"\"\"\n    with open(path.join(path.dirname(__file__), fname)) as fd:\n        readme = fd.read()\n    if hasattr(readme, 'decode'):\n        # In Python 3, turn bytes into str.\n        readme = readme.decode('utf8')\n    # turn relative links into absolute ones\n    readme = re.sub(r'`<([^>]*)>`__',\n                    r'`\\1 <' + URL + r\"/blob/main/\\1>`__\",\n                    readme)\n    readme = re.sub(r\"\\.\\. image:: /\", \".. image:: \" + URLImage + \"/\", readme)\n\n    return readme\n\n\nhere = path.abspath(path.dirname(__file__))\n\nabout = {}\nwith open(path.join(here, 'mechanicalsoup', '__version__.py'),\n          'r', 'utf-8') as fd:\n    exec(fd.read(), about)\n\n# Don't install pytest-runner on every setup.py run, just for tests.\n# See https://pypi.org/project/pytest-runner/#conditional-requirement\nneeds_pytest = {'pytest', 'test', 'ptr'}.intersection(sys.argv)\npytest_runner = ['pytest-runner'] if needs_pytest else []\n\nsetup(\n    name=about['__title__'],\n\n    # useful: python setup.py sdist bdist_wheel upload\n    version=about['__version__'],\n\n    description=about['__description__'],\n    long_description=read('README.rst', about['__github_url__'], about[\n        '__github_assets_absoluteURL__']),\n    url=about['__url__'],\n    project_urls={\n        'Source': about['__github_url__'],\n    },\n\n    license=about['__license__'],\n\n    python_requires='>=3.9',\n\n    classifiers=[\n        'License :: OSI Approved :: MIT License',\n\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate whether you support Python 2, Python 3 or both.\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Programming Language :: Python :: 3.12',\n        'Programming Language :: Python :: 3.13',\n        'Programming Language :: Python :: 3 :: Only',\n    ],\n\n    packages=['mechanicalsoup'],\n\n    # List run-time dependencies here. These will be installed by pip\n    # when your project is installed. For an analysis of\n    # \"install_requires\" vs pip's requirements files see:\n    # https://packaging.python.org/en/latest/requirements.html\n    install_requires=requirements_from_file('requirements.txt'),\n    setup_requires=pytest_runner,\n    tests_require=requirements_from_file('tests/requirements.txt'),\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}