{
  "metadata": {
    "timestamp": 1736559851197,
    "page": 600,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "joxeankoret/diaphora",
      "stars": 3702,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.005859375,
          "content": "*.pyc\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 33.7138671875,
          "content": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.0302734375,
          "content": "# δiaphora\n\n<p align='center'>\n<img src=\"https://github.com/joxeankoret/diaphora/assets/2945834/3f1e9cf4-98d7-4d9a-b7d3-0a7354053b4e\" width=\"10%\">\n</p>\n\nDiaphora (διαφορά, Greek for 'difference') version 3.1.2 is the most advanced program diffing tool (working as an IDA plugin) available as of today (2024). It was released first during SyScan 2015 and has been actively maintained ever since: Diaphora has been ported to every single minor version of IDA since 6.8 to 8.4.\n\nDiaphora supports versions of IDA >= 7.4 because the code only runs in Python 3.X (Python 3.11 was the last version being tested).\n\n## Unique Features\n\nDiaphora has many of the most common program diffing (bindiffing) features you might expect, like:\n\n * Diffing assembler.\n * Diffing control flow graphs.\n * Porting symbol names and comments.\n * Adding manual matches.\n * Similarity ratio calculation.\n * Batch automation.\n * Call graph matching calculation.\n * Dozens of heuristics based on graph theory, assembler, bytes, functions' features, etc...\n\nHowever, Diaphora has also many features that are unique, not available in any other public tool. The following is a non extensive list of unique features:\n\n * Ability to port structs, enums, unions and typedefs.\n * Potentially fixed vulnerabilities detection for patch diffing sessions.\n * Support for compilation units (finding and diffing compilation units).\n * Microcode support.\n * Parallel diffing.\n * Pseudo-code based heuristics.\n * Pseudo-code patches generation.\n * Diffing pseudo-codes (with syntax highlighting!).\n * Scripting support (for both the exporting and diffing processes).\n * ...\n\n## Installation\n\nDiaphora requires no installation: just download the code and run the script `diaphora.py` from within IDA or on the command line (only for diffing already exported databases). However, it can be integrated as a [plugin](https://github.com/joxeankoret/diaphora/tree/master/plugin) into IDA by doing the following:\n\n * Copy `plugins/diaphora_plugin.py` and `plugins/diaphora_plugin.cfg` to the IDA's plugins directory.\n * Edit `diaphora_plugin.cfg` and set the path value to the Diaphora's directory.\n\n## Donations\n\nYou can help (or thank) the author of Diaphora by making a donation. If you feel like doing so you can use one of the following links:\n\n * [![Liberapay](https://img.shields.io/liberapay/receives/diaphora.svg?logo=liberapay)](https://liberapay.com/Diaphora/donate)\n * [![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=68Z4H8SE7N64L)\n\n## Support\n\nFeel free to open issues in Github if you have any problem or need help. If you prefer to chat interactivelly, you can use the following Discord channel: https://discord.gg/atg34w2xjV\n\n## Licensing\n\nVersions of Diaphora prior to 1.2.4, including version 1.2.4, were licensed under the [GNU GPL version 3](https://www.gnu.org/licenses/gpl-3.0.html). Since version 2.0, Diaphora is now licensed under the [GNU Affero GPL version 3 license](https://www.gnu.org/licenses/agpl-3.0.html). The license has been changed so companies wanting to modify and adapt Diaphora cannot offer web services based on these modified versions without contributing back the changes.\n\nFor 99.99% of users, the license change doesn't affect them at all. If your company needs a different licensing model, check the next section...\n\n## Commercial Support and Consultancy\n\nCommercial support and consultancy is offered for legal companies. If you need support or consultancy for problems you have with your target, to develop products based on Diaphora, to use Diaphora internally interacting with your own tools, for plagiarism detection projects, etc... you can contact me at admin@joxeankoret.com for more details.\n\n## Licensing problems\n\nIf your company does not allow using the AGPL license, you can get commercial licenses of Diaphora to use it in your company, or to use it as a particular in any company you work (similar concept as IDA's named licenses). For more details, please contact me at admin@joxeankoret.com.\n\n## Wiki\n\nIf you are looking to how to automate the export or diffing process, or you want to speed operations, etc... You might want to take a look to the [wiki](https://github.com/joxeankoret/diaphora/wiki) where such questions are answered.\n\n## Screenshots\n\nDiaphora finding the exact function where a vulnerability was patched in CVE-2020-1350:\n\n![CVE-2020-1350](https://files.mastodon.social/media_attachments/files/110/313/141/968/158/099/original/607189c509ec1cc4.png)\n\nDiaphora, again, finding the exact function where CVE-2023-28231 was fixed:\n\n![CVE-2023-28231](https://files.mastodon.social/media_attachments/files/110/313/148/945/529/051/original/28e032f21be414a3.png)\n\nCVE-2023-28231. As explained in a blog from ZDI, the vulnerability was fixed by checking that the number of relay forward messages in \"ProcessRelayForwardMessage()\" is not bigger or equal than 32 (0x20), as shown in the following pseudo-code diffing:\n\n![CVE-2023-28231](https://files.mastodon.social/media_attachments/files/110/300/368/934/189/808/original/fe3392db2b8234e9.png)\n\nDiaphora doing Hex-Ray's microcode diffing:\n\n![Diffing microcode in a graph](https://files.mastodon.social/media_attachments/files/110/157/157/910/926/533/original/6c5975e15c378cb5.png)\n\nDiffing assembly, pseudo-code and microcode:\n\n![Assembly, pseudo-code and microcode](https://files.mastodon.social/media_attachments/files/110/102/237/646/074/440/original/4a816df5069691c3.png)\n\nDiffing CVE-2023-21768 with Diaphora 3.0:\n\n![Diffing CVE-2023-21768 with #Diaphora 3.0](https://files.mastodon.social/media_attachments/files/110/066/930/153/215/408/original/86b06ae90d57d5a1.png)\n\nThis is a screenshot of Diaphora diffing the PEGASUS iOS kernel Vulnerability fixed in iOS 9.3.5:\n\n![Diffing iOS 9.3.5 diff](http://sektioneins.de/images/diaphora1.png)\n\nAnd this is an old screenshot of Diaphora diffing the [Microsoft bulletin MS15-034](https://technet.microsoft.com/en-us/library/security/ms15-034.aspx):\n\n![Diaphora diffing MS15-034](https://pbs.twimg.com/media/CCnruP_W0AA8ksc.png:large)\n\nThese are some screenshots of Diaphora diffing the [Microsoft bulletin MS15-050]( https://technet.microsoft.com/en-us/library/security/ms15-050.aspx), extracted from the blog post [Analyzing MS15-050 With Diaphora](http://www.alex-ionescu.com/?p=271) from Alex Ionescu.\n\n![Diaphora diffing MS15-050, best matches](http://www.alex-ionescu.com/wp-content/uploads/diaphora2.png)\n![Diaphora diffing MS15-050, partial matches](http://www.alex-ionescu.com/wp-content/uploads/diaphora3.png)\n![Diaphora diffing MS15-050, diffing pseudo-code](http://www.alex-ionescu.com/wp-content/uploads/diaphora1.png)\n\n![Diaphora diffing a LuaBot, matches and pseudo-code](https://1.bp.blogspot.com/-O5UjSOyjCgg/V5byA-ozXVI/AAAAAAAABaY/yRTMDTSD9zI0mSy4AsHN21ZYf_YvctnkwCLcB/s1600/evs-compile.png)\n\n\nHere is a screenshot of Diaphora diffing [iBoot from iOS 10.3.3 against iOS 11.0](https://blog.matteyeux.com/hacking/2018/04/04/diaphora-diff-and-ida.html):\n\n![Diaphora diffing iBoot from iOS 10.3.3 against iOS 11.0](https://blog.matteyeux.com/images/newgraph.PNG)\n"
        },
        {
          "name": "codecut",
          "type": "tree",
          "content": null
        },
        {
          "name": "db_support",
          "type": "tree",
          "content": null
        },
        {
          "name": "diaphora.py",
          "type": "blob",
          "size": 121.8916015625,
          "content": "#!/usr/bin/python3\n\n\"\"\"\nDiaphora, a binary diffing tool\nCopyright (c) 2015-2024, Joxean Koret\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n\"\"\"\n\nimport os\nimport re\nimport sys\nimport time\nimport json\nimport decimal\nimport sqlite3\nimport logging\nimport datetime\nimport importlib\nimport threading\nimport traceback\n\nfrom io import StringIO\nfrom threading import Lock\nfrom multiprocessing import cpu_count\n\nimport diaphora_config as config\nimport diaphora_heuristics\n\ntry:\n  from cdifflib import CSequenceMatcher as SequenceMatcher\n  HAS_CDIFFLIB = True\nexcept ImportError:\n  HAS_CDIFFLIB = False\n  if config.SHOW_IMPORT_WARNINGS:\n    print(\"WARNING: Python library 'cdifflib' not found. Installing it will significantly improve text diffing performance.\")\n    print(\"INFO: Alternatively, you can silence this warning by changing the value of SHOW_IMPORT_WARNINGS in diaphora_config.py.\")\n  from difflib import SequenceMatcher\n\nfrom difflib import unified_diff\n\nimport ml\nfrom ml.basic_engine import get_model_comparison_data, ML_AVAILABLE\n\nfrom diaphora_heuristics import (\n  HEURISTICS,\n  HEUR_TYPE_RATIO,\n  HEUR_TYPE_RATIO_MAX,\n  HEUR_TYPE_RATIO_MAX_TRUSTED,\n  HEUR_FLAG_UNRELIABLE,\n  HEUR_FLAG_SLOW,\n  HEUR_FLAG_SAME_CPU,\n  HEUR_TYPE_NO_FPS,\n  get_query_fields,\n)\n\nimport db_support\nfrom db_support import schema\n\nimport jkutils.threads as jk_threads\n\nfrom jkutils.threads import threads_apply\nfrom jkutils.kfuzzy import CKoretFuzzyHashing\nfrom jkutils.factor import (\n  FACTORS_CACHE,\n  difference,\n  difference_ratio,\n  primesbelow as primes,\n)\n\ntry:\n  # pylint: disable-next=unused-import\n  import idaapi\n\n  IS_IDA = True\nexcept ImportError:\n  IS_IDA = False\n\nimportlib.reload(ml.basic_engine)\nimportlib.reload(config)\nimportlib.reload(schema)\nimportlib.reload(jk_threads)\nimportlib.reload(db_support)\nimportlib.reload(diaphora_heuristics)\n\nif hasattr(sys, \"set_int_max_str_digits\"):\n  sys.set_int_max_str_digits(0)\n\n#-------------------------------------------------------------------------------\nVERSION_VALUE = \"3.2.1\"\nCOPYRIGHT_VALUE = \"Copyright(c) 2015-2024 Joxean Koret\"\n\nITEM_MAIN_EA = 0\nITEM_MAIN_NAME = 1\nITEM_DIFF_EA = 2\nITEM_DIFF_NAME = 3\nITEM_RATIO = 5\n\n# Yes, yes, I know, parsing C/C++ with regular expressions is wrong and cannot\n# be done, but we don't need to parse neither real nor complete C/C++, and we\n# just want to extract potential function names from matching lines of assembly\n# and pseudo-code that, also, can be partial or non C/C++ compliant but, for a\n# reason, in a format supported by IDA.\nCPP_NAMES_RE = \"([a-zA-Z_][a-zA-Z0-9_]{3,}((::){0,1}[a-zA-Z0-9_]+)*)\"\n\n\n#-------------------------------------------------------------------------------\nfmt = \"[Diaphora: %(asctime)s] %(levelname)s: %(message)s\"\nlogging.basicConfig(format=fmt, level=logging.INFO)\n\n#-------------------------------------------------------------------------------\ndef load_source(modname, filename):\n  # Copied from https://docs.python.org/3.12/whatsnew/3.12.html#imp as a\n  # replacement for the removed imp.load_source().\n  loader = importlib.machinery.SourceFileLoader(modname, filename)\n  spec = importlib.util.spec_from_file_location(modname, filename, loader=loader)\n  module = importlib.util.module_from_spec(spec)\n  # The module is always executed and not cached in sys.modules.\n  loader.exec_module(module)\n  return module\n\n#-------------------------------------------------------------------------------\ndef result_iter(cursor, arraysize=1000):\n  \"\"\"An iterator that uses fetchmany to keep memory usage down.\"\"\"\n  while True:\n    results = cursor.fetchmany(arraysize)\n    if not results:\n      break\n    for result in results:\n      yield result\n\n\n#-------------------------------------------------------------------------------\ndef quick_ratio(buf1, buf2):\n  \"\"\"\n  Call SequenceMatcher.quick_ratio() to get a comparison ratio.\n  \"\"\"\n  if buf1 is None or buf2 is None or buf1 == \"\" or buf1 == \"\":\n    return 0\n  seq = SequenceMatcher(None, buf1.split(\"\\n\"), buf2.split(\"\\n\"))\n  return seq.quick_ratio()\n\n\n#-------------------------------------------------------------------------------\ndef real_quick_ratio(buf1, buf2):\n  \"\"\"\n  Call SequenceMatcher.real_quick_ratio() to get a comparison ratio.\n  \"\"\"\n  if buf1 is None or buf2 is None or buf1 == \"\" or buf1 == \"\":\n    return 0\n  seq = SequenceMatcher(None, buf1.split(\"\\n\"), buf2.split(\"\\n\"))\n  return seq.real_quick_ratio()\n\n\n#-------------------------------------------------------------------------------\ndef ast_ratio(ast1, ast2):\n  \"\"\"\n  Quickly compare 2 fuzzy Abstract Syntax Trees and return a ratio.\n  \"\"\"\n  if ast1 is None or ast2 is None:\n    return 0\n\n  if ast1 == ast2:\n    return 1.0\n\n  return difference_ratio(decimal.Decimal(ast1), decimal.Decimal(ast2))\n\n\n#-------------------------------------------------------------------------------\ndef log(message):\n  \"\"\"\n  Print a message\n  \"\"\"\n  # pylint: disable=protected-access\n  if IS_IDA or os.getenv(\"DIAPHORA_LOG_PRINT\") is not None:\n    print(f\"[Diaphora: {time.asctime()}] {message}\")\n  else:\n    logging.info(message)\n  # pylint: enable=protected-access\n\n\n#-------------------------------------------------------------------------------\ndef log_refresh(msg, do_log=True):\n  \"\"\"\n  Print a message and refresh if required (not really used outside of IDA)\n  \"\"\"\n  if do_log:\n    log(msg)\n\n\n#-------------------------------------------------------------------------------\ndef is_debug_enabled():\n  return os.getenv(\"DIAPHORA_DEBUG\") is not None\n\n#-------------------------------------------------------------------------------\ndef debug_refresh(msg):\n  \"\"\"\n  Print a debugging message if debugging is enabled.\n  \"\"\"\n  if is_debug_enabled():\n    log(msg)\n\n\n#-------------------------------------------------------------------------------\n# pylint: disable=consider-using-f-string\nclass CChooser:\n  \"\"\"\n  Our own chooser for displaying diffing results.\n  \"\"\"\n\n  class Item:\n    \"\"\"\n    A single chooser item.\n    \"\"\"\n\n    def __init__(self, ea, name, ea2=None, name2=None, desc=None, ratio=0, nodes1=0, nodes2=0):\n      self.ea = ea\n      self.vfname = name\n      self.ea2 = ea2\n      self.vfname2 = name2\n      self.description = desc\n      self.ratio = ratio\n      self.nodes1 = int(nodes1)\n      self.nodes2 = int(nodes2)\n\n    def __str__(self):\n      return \"%08x\" % int(self.ea)\n\n  def __init__(self, title, bindiff, show_commands=True):\n    self.primary = True\n    if title == \"Unmatched in secondary\":\n      self.primary = False\n\n    self.title = title\n\n    self.n = 0\n    self.items = []\n    self.bindiff = bindiff\n    self.show_commands = show_commands\n\n    self.cmd_diff_asm = None\n    self.cmd_diff_graph = None\n    self.cmd_diff_c = None\n    self.cmd_import_selected = None\n    self.cmd_import_all = None\n    self.cmd_import_all_funcs = None\n    self.cmd_show_asm = None\n    self.cmd_show_pseudo = None\n    self.cmd_highlight_functions = None\n    self.cmd_unhighlight_functions = None\n\n    self.selected_items = []\n\n  def add_item(self, item):\n    \"\"\"\n    Add a single item\n    \"\"\"\n    if self.title.startswith(\"Unmatched in\"):\n      self.items.append([\"%05lu\" % self.n, \"%08x\" % int(item.ea), item.vfname])\n    else:\n      dec_vals = \"%.\" + config.DECIMAL_VALUES\n      self.items.append(\n        [\n          \"%05lu\" % self.n,\n          \"%08x\" % int(item.ea),\n          item.vfname,\n          \"%08x\" % int(item.ea2),\n          item.vfname2,\n          dec_vals % item.ratio,\n          \"%d\" % item.nodes1,\n          \"%d\" % item.nodes2,\n          item.description,\n        ]\n      )\n    self.n += 1\n\n  def get_color(self):\n    \"\"\"\n    Return the highlighting colour for the current chooser.\n    \"\"\"\n    if self.title.startswith(\"Best\"):\n      return config.HIGHLIGHT_FUNCTION_BEST\n    elif self.title.startswith(\"Partial\"):\n      return config.HIGHLIGHT_FUNCTION_PARTIAL\n    elif self.title.startswith(\"Unreliable\"):\n      return config.HIGHLIGHT_FUNCTION_UNRELIABLE\n\n  def show(self, force):\n    \"\"\"\n    Fake method, it is only used when running from within IDA.\n    \"\"\"\n\n\n# pylint: enable=consider-using-f-string\n\n\n#-------------------------------------------------------------------------------\nclass CBytesEncoder(json.JSONEncoder):\n  \"\"\"\n  Class used to JSON encode some Python types that aren't supported by default.\n  \"\"\"\n\n  def default(self, o):\n    if isinstance(o, bytes):\n      return o.decode(\"utf-8\")\n    return json.JSONEncoder.default(self, o)\n\n\n#-------------------------------------------------------------------------------\n# pylint: disable=used-before-assignment\n# pylint: disable=global-variable-not-assigned\n\nif \"_DATABASES\" not in globals():\n  _DATABASES = {}\n\nif len(_DATABASES) > 0:\n  for _key in dict(_DATABASES):\n    log(f\"Closing previously opened database {_key}\")\n    tmp_db = _DATABASES[_key]\n    tmp_db.close()\n    del _DATABASES[_key]\n\n\ndef sqlite3_connect(db_name):\n  \"\"\"\n  Return a SQL connection object.\n  \"\"\"\n  global _DATABASES\n  db = sqlite3.connect(db_name, check_same_thread=False)\n  db.text_factory = str\n  db.row_factory = sqlite3.Row\n  _DATABASES[db_name] = db\n  return db\n\n\n# pylint: enable=global-variable-not-assigned\n# pylint: enable=used-before-assignment\n\n\n#-------------------------------------------------------------------------------\nclass CBinDiff:\n  \"\"\"\n  The main binary diffing class.\n  \"\"\"\n\n  def __init__(self, db_name, chooser=CChooser):\n    self.names = dict()\n    self.primes = primes(2048 * 2048)\n    self.db_name = db_name\n    self.dbs_dict = {}\n    self.db = None  # Used exclusively by the exporter!\n    self.open_db()\n\n    self.all_matches = {\"best\": [], \"partial\": [], \"unreliable\": []}\n    self.matched_primary = {}\n    self.matched_secondary = {}\n\n    self.total_functions1 = None\n    self.total_functions2 = None\n    self.equal_callgraph = False\n\n    self.kfh = CKoretFuzzyHashing()\n    # With this block size we're sure it will only apply to \"big\" functions\n    self.kfh.bsize = config.FUZZY_HASHING_BLOCK_SIZE\n\n    self.pseudo = {}\n    self.pseudo_hash = {}\n    self.pseudo_comments = {}\n\n    self.microcode = {}\n\n    self.unreliable = self.get_value_for(\n      \"unreliable\", config.DIFFING_ENABLE_UNRELIABLE\n    )\n    self.relaxed_ratio = self.get_value_for(\n      \"relaxed_ratio\", config.DIFFING_ENABLE_RELAXED_RATIO\n    )\n    self.experimental = self.get_value_for(\n      \"experimental\", config.DIFFING_ENABLE_EXPERIMENTAL\n    )\n    self.slow_heuristics = self.get_value_for(\n      \"slow_heuristics\", config.DIFFING_ENABLE_SLOW_HEURISTICS\n    )\n    self.use_trained_model = self.get_value_for(\n      \"use_trained_model\", config.ML_USE_TRAINED_MODEL\n    )\n    self.exclude_library_thunk = self.get_value_for(\n      \"exclude_library_thunk\", config.EXPORTING_EXCLUDE_LIBRARY_THUNK\n    )\n    self.use_decompiler = self.get_value_for(\n      \"use_decompiler\", config.EXPORTING_USE_DECOMPILER\n    )\n    self.project_script = self.get_value_for(\"project_script\", None)\n    self.hooks = None\n\n    # Create the choosers\n    self.chooser = chooser\n    self.create_choosers()\n\n    self.last_diff_db = None\n    self.re_cache = {}\n    self._funcs_cache = {}\n    self.ratios_cache = {}\n    self.items_lock = Lock()\n\n    self.is_symbols_stripped = False\n    self.is_patch_diff = False\n    self.is_same_processor = False\n\n    self.unmatched_primary = None\n    self.unmatched_second = None\n    self.do_continue = None\n\n    # How much do call graphs from both binaries differ?\n    self.percent = 0\n\n    self.classifier = None\n\n    ####################################################################\n    # LIMITS\n    #\n    # Do not run heuristics for more than SQL_TIMEOUT_LIMIT seconds.\n    self.timeout = self.get_value_for(\"SQL_TIMEOUT_LIMIT\", config.SQL_TIMEOUT_LIMIT)\n    # It's typical in SQL queries to get a cartesian product of the results in\n    # the functions tables. Do not process more than this number of rows.\n    self.sql_max_processed_rows = self.get_value_for(\n      \"SQL_MAX_PROCESSED_ROWS\", config.SQL_MAX_PROCESSED_ROWS\n    )\n    # Limits to filter the functions to export\n    self.min_ea = 0\n    self.max_ea = 0\n    # Export only non IDA automatically generated function names? I.e.,\n    # excluding these starting with sub_*\n    self.ida_subs = config.EXPORTING_ONLY_NON_IDA_SUBS\n    # Export only function summaries instead of also exporting both the\n    # basic blocks and all instructions used by functions?\n    self.function_summaries_only = config.EXPORTING_FUNCTION_SUMMARIES_ONLY\n    # Ignore IDA's automatically generated sub_* names for heuristics\n    # like the 'Same name'?\n    self.ignore_sub_names = config.DIFFING_IGNORE_SUB_FUNCTION_NAMES\n    # Ignore any and all function names for the 'Same name' heuristic?\n    self.ignore_all_names = self.get_value_for(\n      \"ignore_all_names\", config.DIFFING_IGNORE_ALL_FUNCTION_NAMES\n    )\n    # Ignore small functions?\n    self.ignore_small_functions = self.get_value_for(\n      \"ignore_small_functions\", config.DIFFING_IGNORE_SMALL_FUNCTIONS\n    )\n\n    # Export microcode instructions?\n    self.export_microcode = self.get_value_for(\n      \"export_microcode\", config.EXPORTING_USE_MICROCODE\n    )\n\n    # Number of CPU threads/cores to use?\n    cpus = cpu_count() - 1\n    if cpus < 1:\n      cpus = 1\n    self.cpu_count = self.get_value_for(\"CPU_COUNT\", cpus)\n\n    # XXX: FIXME: Parallel diffing is broken outside of IDA due to parallelism problems\n    if not IS_IDA:\n      self.cpu_count = 1\n\n    ####################################################################\n\n  def __del__(self):\n    if self.db is not None:\n      try:\n        if self.last_diff_db is not None:\n          tid = threading.current_thread().ident\n          if tid in self.dbs_dict:\n            db = self.dbs_dict[tid]\n            with db.cursor() as cur:\n              cur.execute(f'detach \"{self.last_diff_db}\"')\n      except:\n        pass\n\n      self.db_close()\n\n  def log(self, message):\n    log(message)\n\n  def log_refresh(self, message):\n    log_refresh(message)\n\n  def refresh(self):\n    \"\"\"\n    Fake member, it is only useful (and implemented) when running from within IDA.\n    \"\"\"\n\n  def load_hooks(self):\n    \"\"\"\n    Load the project specific python script, if any was set.\n    \"\"\"\n    if self.project_script is None or self.project_script == \"\":\n      return True\n\n    try:\n      log(f\"Loading project specific Python script {self.project_script}\")\n      module = load_source(\"diaphora_hooks\", self.project_script)\n    except:\n      err = str(sys.exc_info()[1])\n      print(f\"Error loading project specific Python script: {err}\")\n      return False\n\n    keys = dir(module)\n    if \"HOOKS\" not in keys:\n      msg = \"Error: The project specific script doesn't export the HOOKS dictionary\"\n      log(msg)\n      return False\n\n    hooks = module.HOOKS\n    if \"DiaphoraHooks\" not in hooks:\n      msg = \"Error: The project specific script exports the HOOK dictionary but it doesn't contain a 'DiaphoraHooks' entry.\"\n      log(msg)\n      return False\n\n    hook_class = hooks[\"DiaphoraHooks\"]\n    self.hooks = hook_class(self)\n\n    return True\n\n  def get_value_for(self, value_name, default):\n    \"\"\"\n    Try to search for a DIAPHORA_<value_name> environment variable.\n    \"\"\"\n    value = os.getenv(f\"DIAPHORA_{value_name.upper()}\")\n    if value is not None:\n      if isinstance(value, type(default)):\n        value = type(default)(value)\n      return value\n    return default\n\n  # pylint: disable=protected-access\n  def open_db(self):\n    \"\"\"\n    Open the database @self.db_name.\n    \"\"\"\n    db = sqlite3_connect(self.db_name)\n\n    tid = threading.current_thread().ident\n    self.dbs_dict[tid] = db\n    if isinstance(threading.current_thread(), threading._MainThread):\n      self.db = db\n      self.create_schema()\n\n  # pylint: enable=protected-access\n\n  def get_db(self):\n    \"\"\"\n    Return the current thread's assigned database object.\n    \"\"\"\n    tid = threading.current_thread().ident\n    if tid not in self.dbs_dict:\n      self.open_db()\n      if self.last_diff_db is not None:\n        self.attach_database(self.last_diff_db)\n    return self.dbs_dict[tid]\n\n  def db_cursor(self):\n    \"\"\"\n    Get a database cursors. This is the preferred method to use instead of doing\n    db.cursor() every time one cursor is required somewhere.\n    \"\"\"\n    db = self.get_db()\n    return db.cursor()\n\n  # pylint: disable=protected-access\n  def db_close(self):\n    \"\"\"\n    Close the main database.\n    \"\"\"\n    tid = threading.current_thread().ident\n    if tid in self.dbs_dict:\n      self.dbs_dict[tid].close()\n      del self.dbs_dict[tid]\n    if isinstance(threading.current_thread(), threading._MainThread):\n      self.db.close()\n\n  # pylint: enable=protected-access\n\n  def create_schema(self):\n    \"\"\"\n    Create the database schema.\n    \"\"\"\n    cur = self.db_cursor()\n    try:\n      cur.execute(\"PRAGMA foreign_keys = ON\")\n\n      for sql in schema.TABLES:\n        cur.execute(sql)\n\n      cur.execute(\"select 1 from version\")\n      row = cur.fetchone()\n      if not row:\n        cur.execute(\"insert into main.version values (?)\", (VERSION_VALUE,))\n        cur.execute(\"commit\")\n    finally:\n      cur.close()\n\n  def create_indices(self):\n    \"\"\"\n    Create the required indices for the exported database.\n    \"\"\"\n    cur = self.db_cursor()\n    template = \"create index if not exists idx_{index} on {table}({fields})\"\n    try:\n      for i, index in enumerate(schema.INDICES):\n        table, fields = index\n        sql = template.format(index=i, table=table, fields=fields)\n        cur.execute(sql)\n\n      sql = \"analyze\"\n      cur.execute(sql)\n    finally:\n      cur.close()\n\n  def attach_database(self, diff_db):\n    \"\"\"\n    Attach @diff_db as the diffing database.\n    \"\"\"\n    cur = self.db_cursor()\n    try:\n      cur.execute(f'attach \"{diff_db}\" as diff')\n    finally:\n      cur.close()\n\n  def equal_db(self):\n    \"\"\"\n    Check if both opened databases (main and diff) are equal.\n    \"\"\"\n    cur = self.db_cursor()\n    ret = None\n    try:\n      sql = \"select count(*) total from program p, diff.program dp where p.md5sum = dp.md5sum\"\n      cur.execute(sql)\n      row = cur.fetchone()\n      ret = row[\"total\"] == 1\n      if not ret:\n        sql = \"\"\"select count(*) total\n                   from (select id, address, size, nodes, edges\n                           from functions\n                         except\n                         select id, address, size, nodes, edges\n                           from diff.functions) x\"\"\"\n        cur.execute(sql)\n        row = cur.fetchone()\n        ret = row[\"total\"] == 0\n      else:\n        log(\"Same MD5 in both databases\")\n    finally:\n      cur.close()\n\n    return ret\n\n  def add_program_data(self, type_name, key, value):\n    \"\"\"\n    Add a row of program data to the database.\n    \"\"\"\n    cur = self.db_cursor()\n    try:\n      sql = \"insert into main.program_data (name, type, value) values (?, ?, ?)\"\n      values = (key, type_name, value)\n      cur.execute(sql, values)\n    finally:\n      cur.close()\n\n  def get_bb_id(self, addr):\n    \"\"\"\n    Get the id of the given basic block at address @addr\n    \"\"\"\n    cur = self.db_cursor()\n    rowid = None\n    try:\n      sql = \"select id from basic_blocks where address = ?\"\n      cur.execute(sql, (str(addr),))\n      row = cur.fetchone()\n      rowid = None\n      if row is not None:\n        rowid = row[\"id\"]\n    finally:\n      cur.close()\n\n    return rowid\n\n  def get_valid_prop(self, prop):\n    \"\"\"\n    Get a valid property to insert into the SQLite database.\n    This is a hack for 64 bit architectures kernels.\n    \"\"\"\n    if isinstance(prop, int) and (prop > 0xFFFFFFFF or prop < -0xFFFFFFFF):\n      prop = str(prop)\n    elif isinstance(prop, bytes):\n      prop = prop.encode(\"utf-8\")\n    return prop\n\n  def save_instructions_to_database(self, cur, bb_data, func_id):\n    \"\"\"\n    Save all the native assembly instructions in the basic block @bb_data to the\n    database.\n    \"\"\"\n    instructions_ids = {}\n    sql = \"\"\"insert into main.instructions (address, mnemonic, disasm,\n                      comment1, comment2, operand_names, name,\n                      type, pseudocomment, pseudoitp, func_id,\n                      asm_type)\n                values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'native')\"\"\"\n    cur_execute = cur.execute\n    for key in bb_data:\n      for instruction in bb_data[key]:\n        instruction_properties = []\n        for instruction_property in instruction:\n          if isinstance(instruction_property, (list, set)):\n            instruction_properties.append(\n              json.dumps(\n                list(instruction_property),\n                ensure_ascii=False,\n                cls=CBytesEncoder,\n              )\n            )\n          elif isinstance(instruction_property, int):\n            if instruction_property > 0x8000000000000000:\n              instruction_property = str(instruction_property)\n            instruction_properties.append(instruction_property)\n          else:\n            instruction_properties.append(instruction_property)\n\n        addr = instruction[0]\n        pseudocomment = None\n        pseudoitp = None\n        if addr in self.pseudo_comments:\n          pseudocomment, pseudoitp = self.pseudo_comments[addr]\n\n        instruction_properties.append(pseudocomment)\n        instruction_properties.append(pseudoitp)\n        instruction_properties.append(func_id)\n        cur.execute(sql, instruction_properties)\n        db_id = cur.lastrowid\n        instructions_ids[addr] = db_id\n    return cur_execute, instructions_ids\n\n  def insert_basic_blocks_to_database(\n    self, bb_data, cur_execute, cur, instructions_ids, bb_relations, func_id\n  ):\n    \"\"\"\n    Insert basic blocks information as well as the relationship between assembly\n    instructions and basic blocks.\n    \"\"\"\n    num = 0\n    bb_ids = {}\n    sql1 = \"insert into main.basic_blocks (num, address, asm_type) values (?, ?, 'native')\"\n    sql2 = \"insert into main.bb_instructions (basic_block_id, instruction_id) values (?, ?)\"\n\n    self_get_bb_id = self.get_bb_id\n    for key in bb_data:\n      # Insert each basic block\n      num += 1\n      ins_ea = str(key)\n      last_bb_id = self_get_bb_id(ins_ea)\n      if last_bb_id is None:\n        cur_execute(sql1, (num, str(ins_ea)))\n        last_bb_id = cur.lastrowid\n      bb_ids[ins_ea] = last_bb_id\n\n      # Insert relations between basic blocks and instructions\n      insert_args = []\n      for instruction in bb_data[key]:\n        ins_id = instructions_ids[instruction[0]]\n        insert_args.append([last_bb_id, ins_id])\n      cur.executemany(sql2, insert_args)\n\n    # Insert relations between basic blocks\n    sql = \"insert into main.bb_relations (parent_id, child_id) values (?, ?)\"\n    insert_args = []\n    for key in bb_relations:\n      for bb in bb_relations[key]:\n        bb = str(bb)\n        key = str(key)\n        insert_args.append([bb_ids[key], bb_ids[bb]])\n    cur.executemany(sql, insert_args)\n\n    # And finally insert the functions to basic blocks relations\n    insert_args = []\n    sql = \"insert into main.function_bblocks (function_id, basic_block_id, asm_type) values (?, ?, 'native')\"\n    for key, bb_id in bb_ids.items():\n      insert_args.append([func_id, bb_id])\n    cur.executemany(sql, insert_args)\n\n  def save_microcode_instructions(\n    self, func_id, cur, cur_execute, microcode_bblocks, microcode_bbrelations\n  ):\n    \"\"\"\n    Save all the microcode instructions in the basic block @bb_data to the database.\n    \"\"\"\n    sql_inst = \"\"\"insert into main.instructions (address, mnemonic, disasm, comment1,\n                         pseudocomment, func_id, asm_type)\n                values (?, ?, ?, ?, ?, ?, 'microcode')\"\"\"\n    sql_bblock = \"insert into main.basic_blocks (num, address, asm_type) values (?, ?, 'microcode')\"\n    sql_bbinst = \"insert into main.bb_instructions (basic_block_id, instruction_id) values (?, ?)\"\n    sql_bbrelations = (\n      \"insert into main.bb_relations (parent_id, child_id) values (?, ?)\"\n    )\n    sql_func_blocks = \"insert into main.function_bblocks (function_id, basic_block_id, asm_type) values (?, ?, 'microcode')\"\n    num = 0\n    for key in microcode_bblocks:\n      # Create a new microcode basic block\n      start_ea = self.get_valid_prop(microcode_bblocks[key][\"start\"])\n      cur_execute(sql_bblock, [num, start_ea])\n      bblock_id = cur.lastrowid\n      microcode_bblocks[key][\"bblock_id\"] = bblock_id\n\n      # Add the function -> basic block relation\n      cur_execute(sql_func_blocks, (func_id, bblock_id))\n\n      insert_args = []\n      for line in microcode_bblocks[key][\"lines\"]:\n        if line[\"mnemonic\"] is not None:\n          address = self.get_valid_prop(line[\"address\"])\n          mnemonic = line[\"mnemonic\"]\n          disasm = line[\"line\"]\n          comment1 = line[\"color_line\"]\n          pseudocomment = line[\"comments\"]\n\n          # Insert the microcode instruction\n          arguments = [\n            address,\n            mnemonic,\n            disasm,\n            comment1,\n            pseudocomment,\n            func_id,\n          ]\n          cur_execute(sql_inst, arguments)\n\n          inst_id = cur.lastrowid\n          line[\"instruction_id\"] = inst_id\n\n          # Add the microcode instrution to the current basic block\n          insert_args.append([bblock_id, inst_id])\n      cur.executemany(sql_bbinst, insert_args)\n\n      # Incrase the current basic block number\n      num += 1\n\n    # And, finally, insert the relationships between basic blocks\n    insert_args = []\n    for node in microcode_bbrelations:\n      parent_id = microcode_bblocks[node][\"bblock_id\"]\n      for children in microcode_bbrelations[node]:\n        # Microcode generates empty basic blocks, we don't want to do anything\n        # with them, just ignore...\n        if children in microcode_bblocks:\n          child_id = microcode_bblocks[children][\"bblock_id\"]\n          insert_args.append([parent_id, child_id])\n    cur.executemany(sql_bbrelations, insert_args)\n\n  def get_function_from_dictionary(self, d):\n    \"\"\"\n    Get a list ready to be used to insert rows from a given dictionary.\n    \"\"\"\n    list_dict = (\n      d[\"name\"],\n      d[\"nodes\"],\n      d[\"edges\"],\n      d[\"indegree\"],\n      d[\"outdegree\"],\n      d[\"size\"],\n      d[\"instructions\"],\n      d[\"mnems\"],\n      d[\"names\"],\n      d[\"proto\"],\n      d[\"cc\"],\n      d[\"prime\"],\n      d[\"f\"],\n      d[\"comment\"],\n      d[\"true_name\"],\n      d[\"bytes_hash\"],\n      d[\"pseudo\"],\n      d[\"pseudo_lines\"],\n      d[\"pseudo_hash1\"],\n      d[\"pseudocode_primes\"],\n      d[\"function_flags\"],\n      d[\"asm\"],\n      d[\"proto2\"],\n      d[\"pseudo_hash2\"],\n      d[\"pseudo_hash3\"],\n      d[\"strongly_connected_size\"],\n      d[\"loops\"],\n      d[\"rva\"],\n      d[\"bb_topological\"],\n      d[\"strongly_connected_spp\"],\n      d[\"clean_assembly\"],\n      d[\"clean_pseudo\"],\n      d[\"mnemonics_spp\"],\n      d[\"switches\"],\n      d[\"function_hash\"],\n      d[\"bytes_sum\"],\n      d[\"md_index\"],\n      d[\"constants\"],\n      d[\"constants_size\"],\n      d[\"seg_rva\"],\n      d[\"assembly_addrs\"],\n      d[\"kgh_hash\"],\n      d[\"source_file\"],\n      d[\"userdata\"],\n      d[\"microcode\"],\n      d[\"clean_microcode\"],\n      d[\"microcode_spp\"],\n      d[\"microcode_bblocks\"],\n      d[\"microcode_bbrelations\"],\n      d[\"export_time\"],\n      d[\"callers\"],\n      d[\"callees\"],\n      d[\"basic_blocks_data\"],\n      d[\"bb_relations\"],\n    )\n    return list_dict\n\n  # pylint: disable=redefined-outer-name\n  def create_function_dictionary(self, list_dict):\n    \"\"\"\n    Create a dictionary to be used with project specific hooks from a given list.\n    \"\"\"\n    (\n      name,\n      nodes,\n      edges,\n      indegree,\n      outdegree,\n      size,\n      instructions,\n      mnems,\n      names,\n      proto,\n      cc,\n      prime,\n      f,\n      comment,\n      true_name,\n      bytes_hash,\n      pseudo,\n      pseudo_lines,\n      pseudo_hash1,\n      pseudocode_primes,\n      function_flags,\n      asm,\n      proto2,\n      pseudo_hash2,\n      pseudo_hash3,\n      strongly_connected_size,\n      loops,\n      rva,\n      bb_topological,\n      strongly_connected_spp,\n      clean_assembly,\n      clean_pseudo,\n      mnemonics_spp,\n      switches,\n      function_hash,\n      bytes_sum,\n      md_index,\n      constants,\n      constants_size,\n      seg_rva,\n      assembly_addrs,\n      kgh_hash,\n      source_file,\n      userdata,\n      microcode,\n      clean_microcode,\n      microcode_spp,\n      export_time,\n      microcode_bblocks,\n      microcode_bbrelations,\n      callers,\n      callees,\n      basic_blocks_data,\n      bb_relations,\n    ) = list_dict\n    d = dict(\n      name=name,\n      nodes=nodes,\n      edges=edges,\n      indegree=indegree,\n      outdegree=outdegree,\n      size=size,\n      instructions=instructions,\n      mnems=mnems,\n      names=names,\n      proto=proto,\n      cc=cc,\n      prime=prime,\n      f=f,\n      comment=comment,\n      true_name=true_name,\n      bytes_hash=bytes_hash,\n      pseudo=pseudo,\n      pseudo_lines=pseudo_lines,\n      pseudo_hash1=pseudo_hash1,\n      pseudocode_primes=pseudocode_primes,\n      function_flags=function_flags,\n      asm=asm,\n      proto2=proto2,\n      pseudo_hash2=pseudo_hash2,\n      pseudo_hash3=pseudo_hash3,\n      strongly_connected_size=strongly_connected_size,\n      loops=loops,\n      rva=rva,\n      bb_topological=bb_topological,\n      strongly_connected_spp=strongly_connected_spp,\n      clean_assembly=clean_assembly,\n      clean_pseudo=clean_pseudo,\n      mnemonics_spp=mnemonics_spp,\n      switches=switches,\n      function_hash=function_hash,\n      bytes_sum=bytes_sum,\n      md_index=md_index,\n      constants=constants,\n      constants_size=constants_size,\n      seg_rva=seg_rva,\n      assembly_addrs=assembly_addrs,\n      kgh_hash=kgh_hash,\n      source_file=source_file,\n      callers=callers,\n      callees=callees,\n      basic_blocks_data=basic_blocks_data,\n      bb_relations=bb_relations,\n      microcode=microcode,\n      clean_microcode=clean_microcode,\n      microcode_bblocks=microcode_bblocks,\n      microcode_bbrelations=microcode_bbrelations,\n      microcode_spp=microcode_spp,\n      export_time=export_time,\n      userdata=userdata,\n    )\n    return d\n  # pylint: enable=redefined-outer-name\n\n  def save_function_to_database(self, props, cur, func_id):\n    \"\"\"\n    Save a single function to the database.\n    \"\"\"\n    total_props = len(props)\n    # The last 2 fields are basic_blocks_data & bb_relations for native assembly\n    bb_data, bb_relations = props[total_props - 2:]\n    cur_execute, instructions_ids = self.save_instructions_to_database(\n      cur, bb_data, func_id\n    )\n    self.insert_basic_blocks_to_database(\n      bb_data, cur_execute, cur, instructions_ids, bb_relations, func_id\n    )\n\n    microcode_bblocks, microcode_bbrelations = props[total_props - 6:total_props - 4]\n    if len(microcode_bblocks) > 0 and len(microcode_bbrelations) > 0:\n      self.save_microcode_instructions(\n        func_id, cur, cur_execute, microcode_bblocks, microcode_bbrelations\n      )\n\n  def save_function(self, props):\n    \"\"\"\n    Save the function with the given properties @props to the database.\n    \"\"\"\n    if not props:\n      log(\"WARNING: Trying to save a non resolved function?\")\n      return\n\n    # Phase 1: Fix data types and insert the function row.\n    cur = self.db_cursor()\n    new_props = []\n    try:\n      # The last 6 fields are callers, callees, basic_blocks_data & bb_relations\n      for prop in props[: len(props) - 6]:\n        prop = self.get_valid_prop(prop)\n\n        if isinstance(prop, (list, set)):\n          new_props.append(\n            json.dumps(list(prop), ensure_ascii=False, cls=CBytesEncoder)\n          )\n        else:\n          new_props.append(prop)\n\n      sql = \"\"\"insert into main.functions (name, nodes, edges, indegree, outdegree, size,\n                    instructions, mnemonics, names, prototype,\n                    cyclomatic_complexity, primes_value, address,\n                    comment, mangled_function, bytes_hash, pseudocode,\n                    pseudocode_lines, pseudocode_hash1, pseudocode_primes,\n                    function_flags, assembly, prototype2, pseudocode_hash2,\n                    pseudocode_hash3, strongly_connected, loops, rva,\n                    tarjan_topological_sort, strongly_connected_spp,\n                    clean_assembly, clean_pseudo, mnemonics_spp, switches,\n                    function_hash, bytes_sum, md_index, constants,\n                    constants_count, segment_rva, assembly_addrs, kgh_hash,\n                    source_file, userdata, microcode, clean_microcode,\n                    microcode_spp, export_time)\n                  values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\n                      ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\n                      ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\"\"\"\n\n      try:\n        cur.execute(sql, new_props)\n      except:\n        logging.error(\n          \"Error handling props in save_function(): %s\", str(new_props)\n        )\n        traceback.print_exc()\n        raise\n\n      func_id = cur.lastrowid\n      # Save a list of [ id, primes_value, pseudocode_primes ]\n      self._funcs_cache[props[12]] = [func_id, props[11], props[19]]\n\n      # Phase 2: Save the callers and callees of the function\n      callers, callees = props[len(props) - 4:len(props) - 2]\n      sql = \"insert into callgraph (func_id, address, type) values (?, ?, ?)\"\n      insert_args = []\n      for caller in callers:\n        insert_args.append([func_id, str(caller), \"caller\"])\n\n      for callee in callees:\n        insert_args.append([func_id, str(callee), \"callee\"])\n      cur.executemany(sql, insert_args)\n\n      # Phase 3: Insert the constants of the function\n      sql = \"insert into constants (func_id, constant) values (?, ?)\"\n      insert_args = []\n      props_dict = self.create_function_dictionary(props)\n      for constant in props_dict[\"constants\"]:\n        should_add = False\n        if type(constant) in [str, bytes] and len(constant) > 4:\n          should_add = True\n        elif type(constant) in [int, float, decimal.Decimal]:\n          should_add = True\n          constant = str(constant)\n\n        if should_add:\n          insert_args.append([func_id, constant])\n      cur.executemany(sql, insert_args)\n\n      # Phase 4: Save the basic blocks relationships\n      if not self.function_summaries_only:\n        self.save_function_to_database(props, cur, func_id)\n    finally:\n      cur.close()\n\n  def get_valid_definition(self, defs):\n    \"\"\"\n    Try to get a valid structure definition by removing (yes) the\n    invalid characters typically found in IDA's generated structs.\n    \"\"\"\n    ret = defs.replace(\"?\", \"_\").replace(\"@\", \"_\")\n    ret = ret.replace(\"$\", \"_\")\n    return ret\n\n  def prettify_asm(self, asm_source):\n    \"\"\"\n    Get a prettified form of the given assembly source\n    \"\"\"\n    asm = []\n    for line in asm_source.split(\"\\n\"):\n      if not line.startswith(\"loc_\"):\n        asm.append(\"\\t\" + line)\n      else:\n        asm.append(line)\n    return \"\\n\".join(asm)\n\n  def re_sub(self, text, repl, string):\n    \"\"\"\n    Internal re.sub wrapper to replace things in pseudocodes and assembly\n    \"\"\"\n    if text not in self.re_cache:\n      self.re_cache[text] = re.compile(text, flags=re.IGNORECASE)\n\n    re_obj = self.re_cache[text]\n    return re_obj.sub(repl, string)\n\n  def get_cmp_asm_lines(self, asm):\n    \"\"\"\n    Convert the input assembly @asm to an easier format to text diff using lists\n    \"\"\"\n    sio = StringIO(asm)\n    lines = []\n    get_cmp_asm = self.get_cmp_asm\n    for line in sio.readlines():\n      line = line.strip(\"\\n\")\n      lines.append(get_cmp_asm(line))\n    return \"\\n\".join(lines)\n\n  def get_cmp_pseudo_lines(self, pseudo):\n    \"\"\"\n    Convert the input pseudocode @pseudo to an easier format to text diff using lists\n    \"\"\"\n    if pseudo is None:\n      return pseudo\n\n    # Remove all the comments\n    tmp = self.re_sub(\" // .*\", \"\", pseudo)\n\n    # Now, replace sub_, byte_, word_, dword_, loc_, etc...\n    for rep in config.CLEANING_CMP_REPS:\n      tmp = self.re_sub(rep + \"[a-f0-9A-F]+\", rep + \"XXXX\", tmp)\n    tmp = self.re_sub(\"v[0-9]+\", \"vXXX\", tmp)\n    tmp = self.re_sub(\"a[0-9]+\", \"aXXX\", tmp)\n    tmp = self.re_sub(\"arg_[0-9]+\", \"aXXX\", tmp)\n\n    return tmp\n\n  def get_cmp_asm(self, asm):\n    \"\"\"\n    Return a better string to diff assembly text for the given input @asm text\n    \"\"\"\n    if asm is None:\n      return asm\n\n    # Ignore the comments in the assembly dump\n    tmp = asm.split(\";\")[0]\n    tmp = tmp.split(\" # \")[0]\n    # Now, replace sub_, byte_, word_, dword_, loc_, etc...\n    for rep in config.CLEANING_CMP_REPS:\n      tmp = self.re_sub(rep + \"[a-f0-9A-F]+\", \"XXXX\", tmp)\n\n    # Remove dword ptr, byte ptr, etc...\n    for rep in config.CLEANING_CMP_REMS:\n      tmp = self.re_sub(rep + \"[a-f0-9A-F]+\", \"\", tmp)\n\n    reps = [r\"\\+[a-f0-9A-F]+h\\+\"]\n    for rep in reps:\n      tmp = self.re_sub(rep, \"+XXXX+\", tmp)\n    tmp = self.re_sub(r\"\\.\\.[a-f0-9A-F]{8}\", \"XXX\", tmp)\n\n    # Strip any possible remaining white-space character at the end of\n    # the cleaned-up instruction\n    tmp = self.re_sub(\"[ \\t\\n]+$\", \"\", tmp)\n\n    # Replace aName_XXX with aXXX, useful to ignore small changes in\n    # offsets created to strings\n    tmp = self.re_sub(\"a[A-Z]+[a-z0-9]+_[0-9]+\", \"aXXX\", tmp)\n\n    # Replace the common microcode format for \"mov #0xaddress.size, whatever\"\n    tmp = self.re_sub(r\"\\#0x[A-Z0-9]+\", \"0xXXX\", tmp)\n\n    return tmp\n\n  # XXX: FIXME: This function can be, surely, optimized\n  def compare_graphs_pass(\n    self, bblocks1, bblocks2, colours1, colours2, is_second=False\n  ):\n    \"\"\"\n    Compare the given basic blocks and calculate each basic block's colour. It's\n    used to, later on, create a nice looking graph view in IDA.\n    \"\"\"\n    dones1 = set()\n    dones2 = set()\n\n    # Now compare each basic block from the first function to all the\n    # basic blocks in the 2nd function\n    for key1 in bblocks1:\n      if key1 in dones1:\n        continue\n\n      for key2 in bblocks2:\n        if key2 in dones2:\n          continue\n\n        # Same number of instructions?\n        if len(bblocks1[key1]) == len(bblocks2[key2]):\n          mod = False\n          partial = True\n          i = 0\n          for ins1 in bblocks1[key1]:\n            ins2 = bblocks2[key2][i]\n            # Same mnemonic? The change can be only partial\n            if ins1[1] != ins2[1]:\n              partial = False\n\n            # Try to compare the assembly after doing some cleaning\n            cmp_asm1 = self.get_cmp_asm(ins1[2])\n            cmp_asm2 = self.get_cmp_asm(ins2[2])\n            if cmp_asm1 != cmp_asm2:\n              mod = True\n              if not partial:\n                continue\n            i += 1\n\n          if not mod:\n            # Perfect match, we discovered a basic block equal in both\n            # functions\n            colours1[key1] = config.GRAPH_BBLOCK_MATCH_PERFECT\n            colours2[key2] = config.GRAPH_BBLOCK_MATCH_PERFECT\n            dones1.add(key1)\n            dones2.add(key2)\n            break\n          elif not is_second and partial:\n            # Partial match, we discovered a basic block with the same\n            # mnemonics but something changed\n            #\n            # NOTE:\n            # Do not add the partial matches to the dones lists, as we\n            # can have complete matches after a partial match!\n            colours1[key1] = config.GRAPH_BBLOCK_MATCH_PARTIAL\n            colours2[key2] = config.GRAPH_BBLOCK_MATCH_PARTIAL\n            break\n    return colours1, colours2\n\n  def compare_graphs(self, g1, g2):\n    \"\"\"\n    Compare two graphs (check `graph_diff` in diaphora_ida.py)\n    \"\"\"\n    colours1 = {}\n    colours2 = {}\n    bblocks1 = g1[0]\n    bblocks2 = g2[0]\n\n    # Consider, by default, all blocks added, news\n    for key1 in bblocks1:\n      colours1[key1] = config.GRAPH_BBLOCK_MATCH_NONE\n    for key2 in bblocks2:\n      colours2[key2] = config.GRAPH_BBLOCK_MATCH_NONE\n\n    colours1, colours2 = self.compare_graphs_pass(\n      bblocks1, bblocks2, colours1, colours2, False\n    )\n    colours1, colours2 = self.compare_graphs_pass(\n      bblocks1, bblocks2, colours1, colours2, True\n    )\n    return colours1, colours2\n\n  def get_graph(self, ea1, primary=False, asm_type=\"native\"):\n    \"\"\"\n    Get the graph representation of the function at address @ea1\n    \"\"\"\n    db = \"diff\"\n    if primary:\n      db = \"main\"\n\n    cur = self.db_cursor()\n    dones = set()\n    bb_blocks = {}\n    bb_relations = {}\n\n    try:\n      sql = f\"\"\"\n       select bb.address bb_address, ins.address ins_address,\n              ins.mnemonic ins_mnem, ins.disasm ins_disasm\n         from {db}.function_bblocks fb,\n              {db}.bb_instructions bbins,\n              {db}.instructions ins,\n              {db}.basic_blocks bb,\n              {db}.functions f\n        where ins.id = bbins.instruction_id\n          and bbins.basic_block_id = bb.id\n          and bb.id = fb.basic_block_id\n          and f.id = fb.function_id\n          and fb.asm_type = bb.asm_type\n          and ins.asm_type = bb.asm_type\n          and f.address = ?\n          and bb.asm_type = ?\n          and ins.address is not null\n        order by bb.address asc\"\"\"\n      cur.execute(sql, (str(ea1), asm_type))\n      for row in result_iter(cur):\n        bb_ea = str(int(row[\"bb_address\"]))\n        ins_ea = str(int(row[\"ins_address\"]))\n        mnem = row[\"ins_mnem\"]\n        dis = row[\"ins_disasm\"]\n\n        if ins_ea in dones:\n          continue\n        dones.add(ins_ea)\n\n        try:\n          bb_blocks[bb_ea].append([ins_ea, mnem, dis])\n        except KeyError:\n          bb_blocks[bb_ea] = [[ins_ea, mnem, dis]]\n\n      sql = f\"\"\"\n         select (select address\n                   from {db}.basic_blocks\n                  where id = bbr.parent_id) ea1,\n                (select address\n                   from {db}.basic_blocks\n                  where id = bbr.child_id) ea2\n          from {db}.bb_relations bbr,\n               {db}.function_bblocks fbs,\n               {db}.basic_blocks bbs,\n               {db}.functions f\n         where f.id = fbs.function_id\n           and bbs.id = fbs.basic_block_id\n           and fbs.basic_block_id = bbr.child_id\n           and f.address = ?\n           and fbs.asm_type = ?\n           and bbs.asm_type = fbs.asm_type\n         order by 1 asc, 2 asc\"\"\"\n      cur.execute(sql, (str(ea1), asm_type))\n      rows = result_iter(cur)\n\n      for row in rows:\n        bb_ea1 = str(row[\"ea1\"])\n        bb_ea2 = str(row[\"ea2\"])\n        try:\n          bb_relations[bb_ea1].add(bb_ea2)\n        except KeyError:\n          bb_relations[bb_ea1] = set([bb_ea2])\n    finally:\n      cur.close()\n\n    return bb_blocks, bb_relations\n\n  def delete_function(self, ea):\n    \"\"\"\n    Delete the function at address @ea from the database\n    \"\"\"\n    cur = self.db_cursor()\n    try:\n      cur.execute(\"delete from functions where address = ?\", (str(ea),))\n    finally:\n      cur.close()\n\n  def is_auto_generated(self, name):\n    \"\"\"\n    Check if the function name looks like an IDA's auto-generated one\n    \"\"\"\n    for rep in config.CLEANING_CMP_REPS:\n      if name.startswith(rep):\n        return True\n    return False\n\n  def get_callgraph_difference(self):\n    \"\"\"\n    Get the percent of difference between the main and diff databases\n    \"\"\"\n    cur = self.db_cursor()\n    try:\n      sql = \"\"\"select callgraph_primes, callgraph_all_primes from program\n        union all\n        select callgraph_primes, callgraph_all_primes from diff.program\"\"\"\n      cur.execute(sql)\n      rows = cur.fetchall()\n      if len(rows) == 2:\n        cg1 = decimal.Decimal(rows[0][\"callgraph_primes\"])\n        cg_factors1 = json.loads(rows[0][\"callgraph_all_primes\"])\n        cg2 = decimal.Decimal(rows[1][\"callgraph_primes\"])\n        cg_factors2 = json.loads(rows[1][\"callgraph_all_primes\"])\n\n        if cg1 == cg2:\n          self.equal_callgraph = True\n          msg = \"Call graph signature for both databases is equal, the programs seem to be 100% equal structurally\"\n          log(msg)\n          Warning(msg)\n          return 0\n        else:\n          FACTORS_CACHE[cg1] = cg_factors1\n          FACTORS_CACHE[cg2] = cg_factors2\n          diff = difference(cg1, cg2)\n          total = sum(cg_factors1.values())\n          if total == 0 or diff == 0:\n            return 0\n\n          percent = diff * 100.0 / total\n          return percent\n      else:\n        raise Exception(f\"Not enough rows in databases! Size is {len(rows)}\")\n    finally:\n      cur.close()\n\n  def check_callgraph(self):\n    \"\"\"\n    Compare the call graphs of both databases and print out how different they are\n    \"\"\"\n    percent = self.get_callgraph_difference()\n    if percent == 0:\n      log(\"Call graphs are 100% equal\")\n    elif percent >= 100:\n      log(\"Call graphs are absolutely different\")\n    else:\n      log(f\"Call graphs from both programs differ in {percent}%\")\n\n    self.percent = percent\n\n  def add_match(self, name1, name2, ratio, item, chooser):\n    \"\"\"\n    Add a single match to the internal lists before really adding them to the\n    choosers list.\n\n    NOTE: Always call `add_match`, don't try to handle this manually at all ever!\n    \"\"\"\n    with self.items_lock:\n      # If the function names are the same, it's a best match, regardless of the\n      # ratio we got for the match, so fake the ratio as if it was 1.0.\n      if name1 == name2:\n        ratio = 1.0\n\n      if ratio != 1.0:\n        if self.has_better_match(name1, name2, ratio):\n          return\n\n        if name1 in self.matched_primary:\n          if self.matched_primary[name1][\"ratio\"] < ratio:\n            old_ratio = self.matched_primary[name1][\"ratio\"]\n            message = f\"Found a better match for function {name1} -> {name2}, {old_ratio} with {ratio}\"\n            debug_refresh(message)\n\n        if name2 in self.matched_secondary:\n          if self.matched_secondary[name2][\"ratio\"] < ratio:\n            old_ratio = self.matched_secondary[name2][\"ratio\"]\n            message = f\"Found a better match for function {name1} -> {name2}, {old_ratio} with {ratio}\"\n            debug_refresh(message)\n\n      if chooser is not None:\n        if item not in self.all_matches[chooser]:\n          self.all_matches[chooser].append(item)\n\n      self.matched_primary[name1] = {\"name\": name2, \"ratio\": ratio}\n      self.matched_secondary[name2] = {\"name\": name1, \"ratio\": ratio}\n\n  def has_best_match(self, name1, name2):\n    \"\"\"\n    Check if we have a best match for the given two functions (not for the pair).\n    \"\"\"\n    if name1 in self.matched_primary and self.matched_primary[name1][\"ratio\"] == 1.0:\n      return True\n    if name2 in self.matched_secondary and self.matched_secondary[name2][\"ratio\"] == 1.0:\n      return True\n    return False\n\n  def has_better_match(self, name1, name2, ratio):\n    \"\"\"\n    Check if there if we found a better match already for either @name1 or @name2.\n    \"\"\"\n\n    # If we have a match by name, that's the best match\n    if not name1.startswith(\"sub_\") and not name2.startswith(\"sub_\"):\n      if name1 in self.matched_primary:\n        return self.matched_primary[name1][\"name\"] == name1\n\n    ratio = float(ratio)\n    if name1 in self.matched_primary and self.matched_primary[name1][\"ratio\"] > ratio:\n      return True\n    if name2 in self.matched_secondary and self.matched_secondary[name2][\"ratio\"] > ratio:\n      return True\n\n    return False\n\n  def find_equal_matches(self):\n    \"\"\"\n    Find 100% equal matches in both databases\n    \"\"\"\n    cur = self.db_cursor()\n    try:\n      # Start by calculating the total number of functions in both databases\n      sql = \"\"\"select count(*) total from functions\n        union all\n        select count(*) total from diff.functions\"\"\"\n      cur.execute(sql)\n      rows = cur.fetchall()\n      if len(rows) != 2:\n        Warning(f\"Malformed database, only {len(rows)} rows!\")\n        cur.close()\n        raise Exception(\"Malformed database!\")\n\n      self.total_functions1 = rows[0][\"total\"]\n      self.total_functions2 = rows[1][\"total\"]\n\n      fields = \"id, address, mangled_function, nodes, edges, size, bytes_hash\"\n      sql = f\"\"\"select address ea, mangled_function, nodes, bytes_hash\n                 from (select {fields}\n                         from functions\n                    intersect\n                       select {fields}\n                         from diff.functions) x\"\"\"\n      cur.execute(sql)\n      rows = cur.fetchall()\n      if len(rows) > 0:\n        for row in rows:\n          name = row[\"mangled_function\"]\n          ea = row[\"ea\"]\n          nodes = int(row[\"nodes\"])\n\n          item = [ea, name, ea, name, \"100% equal\", 1, nodes, nodes]\n          self.add_match(name, name, 1.0, item, \"best\")\n    finally:\n      cur.close()\n\n  def get_threads_count(self):\n    \"\"\"\n    Return the maximum number of threads to run simultaneously\n    \"\"\"\n    return max(self.cpu_count, 1)\n\n  def call_hook(self, func_name, default_ret, args):\n    \"\"\"\n    Call the given event @func_name(@args) returning @default_ret if it doesn't\n    exist.\n    \"\"\"\n    if self.hooks is not None:\n      method = getattr(self.hooks, func_name, None)\n      if method is not None:\n        return method(*args)\n    return default_ret\n\n  def run_heuristics_for_category(self, arg_category):\n    \"\"\"\n    Run a total of @total_cpus threads running SQL heuristics for category @arg_category\n    \"\"\"\n    total_cpus = self.get_threads_count()\n\n    mode = \"[Parallel]\"\n    if total_cpus == 1:\n      mode = \"[Single thread]\"\n\n    postfix = \"\"\n    if self.ignore_small_functions:\n      postfix = config.SQL_DEFAULT_POSTFIX\n\n    self.call_hook(\"get_queries_postfix\", None, [arg_category, postfix])\n    heuristics = list(HEURISTICS)\n    heuristics = self.call_hook(\"get_heuristics\", heuristics, [arg_category, heuristics])\n\n    heuristic_functions = []\n    for heur in heuristics:\n      if len(self.matched_primary) == self.total_functions1 or\\\n         len(self.matched_secondary) == self.total_functions2:\n        log(\"All functions matched in at least one database, finishing.\")\n        break\n\n      category = heur[\"category\"]\n      if category != arg_category:\n        continue\n\n      name = heur[\"name\"]\n      sql = heur[\"sql\"]\n      ratio = heur[\"ratio\"]\n      min_value = 0.0\n      if ratio in [HEUR_TYPE_RATIO_MAX, HEUR_TYPE_RATIO_MAX_TRUSTED]:\n        min_value = heur[\"min\"]\n\n      flags = heur[\"flags\"]\n      if HEUR_FLAG_UNRELIABLE in flags and not self.unreliable:\n        log_refresh(f\"Skipping unreliable heuristic '{name}'\")\n        continue\n\n      if HEUR_FLAG_SLOW in flags and not self.slow_heuristics:\n        log_refresh(f\"Skipping slow heuristic '{name}'\")\n        continue\n\n      if HEUR_FLAG_SAME_CPU in flags and not self.is_same_processor:\n        log_refresh(f\"Skipping processor specific heuristic '{name}'\")\n        continue\n\n      if arg_category.lower() == \"unreliable\":\n        best = \"partial\"\n        partial = \"unreliable\"\n      else:\n        best = \"best\"\n        partial = \"partial\"\n\n      log_refresh(f\"{mode} Finding with heuristic '{name}'\")\n      sql = sql.replace(\"%POSTFIX%\", postfix)\n\n      sql = self.call_hook(\"on_launch_heuristic\", sql, [name, sql])\n      if sql is None:\n        continue\n\n      if ratio == HEUR_TYPE_NO_FPS:\n        function = self.add_matches_from_query\n        function_args = [sql, best]\n      elif ratio == HEUR_TYPE_RATIO:\n        function = self.add_matches_from_query_ratio\n        function_args = [sql, best, partial]\n      elif ratio == HEUR_TYPE_RATIO_MAX:\n        function = self.add_matches_from_query_ratio_max\n        function_args = [sql, best, partial, min_value]\n      elif ratio == HEUR_TYPE_RATIO_MAX_TRUSTED:\n        function = self.add_matches_from_query_ratio_max_trusted\n        function_args = [sql, min_value]\n      else:\n        traceback.print_exc()\n        raise Exception(\"Invalid heuristic ratio calculation value!\")\n\n      heur_item = {\"name\":name, \"target\": function, \"args\":function_args}\n      heuristic_functions.append(heur_item)\n\n    threads_apply(\n      threads     = total_cpus,\n      targets     = heuristic_functions,\n      wait_time   = config.THREADS_WAIT_TIME,\n      log_refresh = log_refresh,\n      timeout     = config.SQL_TIMEOUT_LIMIT\n    )\n\n    self.cleanup_matches()\n    self.show_summary()\n\n  def cleanup_matches(self):\n    \"\"\"\n    Check in all the matches for duplicates and bad matches and remove them.\n    \"\"\"\n    with self.items_lock:\n      dones = {}\n      d = {}\n      ea_ratios = {}\n      for key, items in self.all_matches.items():\n        d[key] = []\n\n        l_items = sorted(items, key=lambda x: float(x[5]), reverse=True)\n        for item in l_items:\n          # An example item:\n          # item = [ea1, name1, ea2, name2, \"100% equal\", 1, nodes1, nodes2]\n          ea = item[0]\n          name1 = item[1]\n          name2 = item[3]\n          ratio = item[5]\n\n          # Ignore duplicated matches (might happen due to parallelism)\n          match = f\"{name1}-{name2}\"\n          if match in dones:\n            continue\n\n          if name1 == name2:\n            debug_refresh(f\"Using a fake 1.0 ratio for match {name1} - {name2}\")\n            ratio = 1.0\n\n          dones[match] = ratio\n\n          # If the previous ratio for a match with function @ea is worst, ignore\n          # this match\n          if ea in ea_ratios and ea_ratios[ea] > ratio:\n            continue\n          else:\n            ea_ratios[ea] = ratio\n\n          d[key].append(item)\n\n      # Update now the dict of matched functions for both databases\n      self.matched_primary = {}\n      self.matched_secondary = {}\n      for key, l_items in d.items():\n        for item in l_items:\n          name1 = item[1]\n          name2 = item[3]\n          ratio = item[5]\n          self.matched_primary[name1] = {\"name\": name2, \"ratio\": ratio}\n          self.matched_secondary[name2] = {\"name\": name1, \"ratio\": ratio}\n\n      self.all_matches = d\n\n  def count_different_matches(self, items):\n    \"\"\"\n    Return the total number of different items using the first field.\n    \"\"\"\n    dones = set()\n    for item in items:\n      dones.add(item[0])\n    return len(dones)\n\n  def get_total_matches_for(self, category):\n    \"\"\"\n    Return the total number of matches found, so far, for the given category\n    \"\"\"\n    return self.count_different_matches(self.all_matches[category])\n\n  def show_summary(self):\n    \"\"\"\n    Show a summary of how many functions Diaphora found so far and how big the\n    main binary is\n    \"\"\"\n    best = self.get_total_matches_for(\"best\")\n    partial = self.get_total_matches_for(\"partial\")\n    unreliable = self.get_total_matches_for(\"unreliable\")\n    total = best + partial + unreliable\n    percent = (total * 100) / self.total_functions1\n    log(f\"Current results: Best {best}, Partial {partial}, Unreliable {unreliable}\")\n\n    # pylint: disable-next=consider-using-f-string\n    message = \"Matched %1.2f%% of main binary functions (%d out of %d)\" % (percent, total, self.total_functions1)\n    log(message)\n\n  def ast_ratio(self, ast1, ast2):\n    \"\"\"\n    Wrapper for comparing Abstract Syntax Trees\n    \"\"\"\n    if not self.relaxed_ratio:\n      return 0\n    return ast_ratio(ast1, ast2)\n\n  def check_ratio(self, main_d, diff_d):\n    \"\"\"\n    Compare two functions and generate a similarity ratio from 0.0 to 1.0 where\n    1.0 would be the best possible match and 0.0 would be the worst one.\n    \"\"\"\n\n    ea1 = main_d[\"ea\"]\n    ea2 = diff_d[\"ea\"]\n    key = f\"{ea1}-{ea2}\"\n    if key in self.ratios_cache:\n      return self.ratios_cache[key]\n\n    ast1 = main_d[\"pseudocode_primes\"]\n    ast2 = diff_d[\"pseudocode_primes\"]\n    pseudo1 = main_d[\"pseudo\"]\n    pseudo2 = diff_d[\"pseudo\"]\n    md1 = main_d[\"md_index\"]\n    md2 = diff_d[\"md_index\"]\n    clean_assembly1 = main_d[\"clean_assembly\"]\n    clean_assembly2 = diff_d[\"clean_assembly\"]\n    clean_pseudo1 = main_d[\"clean_pseudo\"]\n    clean_pseudo2 = diff_d[\"clean_pseudo\"]\n    clean_micro1 = main_d[\"clean_micro\"]\n    clean_micro2 = diff_d[\"clean_micro\"]\n    bytes_hash1 = main_d[\"bytes_hash\"]\n    bytes_hash2 = diff_d[\"bytes_hash\"]\n\n    md1 = float(md1)\n    md2 = float(md2)\n\n    fratio = quick_ratio\n    # pylint: disable-next=consider-using-f-string\n    decimal_values = \"{0:.%s}\" % config.DECIMAL_VALUES\n    if self.relaxed_ratio:\n      fratio = real_quick_ratio\n      decimal_values = \"{0:.1f}\"\n\n    if bytes_hash1 == bytes_hash2:\n      self.ratios_cache[key] = 1.0\n      return 1.0\n\n    v3 = 0\n    ast_done = False\n    if (\n      self.relaxed_ratio\n      and ast1 is not None\n      and ast2 is not None\n      and max(len(ast1), len(ast2)) < 16\n    ):\n      ast_done = True\n      v3 = self.ast_ratio(ast1, ast2)\n      if v3 == 1.0:\n        self.ratios_cache[key] = 1.0\n        return v3\n\n    v1 = 0\n    if (\n      pseudo1 is not None\n      and pseudo2 is not None\n      and pseudo1 != \"\"\n      and pseudo2 != \"\"\n    ):\n      if clean_pseudo1 == \"\" or clean_pseudo2 == \"\":\n        log(\"Error cleaning pseudo-code!\")\n      else:\n        v1 = fratio(clean_pseudo1, clean_pseudo2)\n        v1 = float(decimal_values.format(v1))\n        if v1 == 1.0:\n          # If real_quick_ratio returns 1 try again with quick_ratio\n          # because it can result in false positives. If real_quick_ratio\n          # says 'different', there is no point in continuing.\n          if fratio == real_quick_ratio:\n            v1 = quick_ratio(clean_pseudo1, clean_pseudo2)\n            if v1 == 1.0:\n              self.ratios_cache[key] = 1.0\n              return 1.0\n\n    v2 = fratio(clean_assembly1, clean_assembly2)\n    v2 = float(decimal_values.format(v2))\n    if v2 == 1:\n      # Actually, same as the quick_ratio/real_quick_ratio check done\n      # with the pseudo-code\n      if fratio == real_quick_ratio:\n        v2 = quick_ratio(clean_assembly1, clean_assembly2)\n        if v2 == 1.0:\n          self.ratios_cache[key] = 1.0\n          return 1.0\n\n    if self.relaxed_ratio and not ast_done:\n      v3 = fratio(ast1, ast2)\n      v3 = float(decimal_values.format(v3))\n      if v3 == 1:\n        self.ratios_cache[key] = 1.0\n        return 1.0\n\n    v4 = 0.0\n    if md1 == md2 and md1 > 0.0:\n      # A MD-Index >= 10.0 is somehow rare\n      if self.relaxed_ratio and md1 > config.MINIMUM_RARE_MD_INDEX:\n        self.ratios_cache[key] = 1.0\n        return 1.0\n      v4 = min((v1 + v2 + v3 + 3.0) / 5, 1.0)\n\n    v5 = 0.0\n    if clean_micro1 is not None and clean_micro2 is not None:\n      v5 = fratio(clean_micro1, clean_micro2)\n      v5 = float(decimal_values.format(v5))\n      if v5 == 1:\n        self.ratios_cache[key] = 1.0\n        return 1.0\n\n    values_set = set([v1, v2, v3, v4, v5])\n\n    r = max(values_set)\n    if r == 1.0 and md1 != md2:\n      # We cannot assign a 1.0 ratio if both MD indices are different, that's an\n      # error\n      r = 0\n      for v in values_set:\n        if v != 1.0 and v > r:\n          r = v\n\n    if r < 1.0:\n      score = self.deep_ratio(main_d, diff_d, r)\n      if r + score < 1.0:\n        r += score\n      else:\n        r = 0.99\n\n    debug_refresh(f\"self.ratios_cache[{main_d['name']}-{diff_d['name']}] = {r}\")\n    self.ratios_cache[key] = r\n    return r\n\n  def all_functions_matched(self):\n    \"\"\"\n    Did we match already all the functions?\n    \"\"\"\n    return (\n      len(self.matched_primary) == self.total_functions1\n      or len(self.matched_secondary) == self.total_functions2\n    )\n\n  def check_match(self, row, ratio=None, debug=False):\n    \"\"\"\n    Check a single SQL heuristic match and return whether it should be ignored\n    or not, and also the similarity ratio for this match.\n    \"\"\"\n\n    ea = row[\"ea\"]\n    ea2 = row[\"ea2\"]\n    name1 = row[\"name1\"]\n    name2 = row[\"name2\"]\n    desc = row[\"description\"]\n\n    main_d = {}\n    main_d[\"ea\"] = row[\"ea\"]\n    main_d[\"name\"] = row[\"name1\"]\n    main_d[\"pseudo\"] = row[\"pseudo1\"]\n    main_d[\"asm\"] = row[\"asm1\"]\n    main_d[\"pseudocode_primes\"] = row[\"pseudo_primes1\"]\n    main_d[\"nodes\"] = row[\"nodes1\"]\n    main_d[\"md_index\"] = row[\"md1\"]\n    main_d[\"clean_assembly\"] = row[\"clean_assembly1\"]\n    main_d[\"clean_pseudo\"] = row[\"clean_pseudo1\"]\n    main_d[\"clean_micro\"] = row[\"clean_micro1\"]\n    main_d[\"bytes_hash\"] = row[\"bytes_hash1\"]\n    main_d[\"edges\"] = row[\"edges1\"]\n    main_d[\"indegree\"] = row[\"indegree1\"]\n    main_d[\"outdegree\"] = row[\"outdegree1\"]\n    main_d[\"instructions\"] = row[\"instructions1\"]\n    main_d[\"cyclomatic_complexity\"] = row[\"cc1\"]\n    main_d[\"strongly_connected\"] = row[\"strongly_connected1\"]\n    main_d[\"loops\"] = row[\"loops1\"]\n    main_d[\"constants_count\"] = row[\"constants_count1\"]\n    main_d[\"size\"] = row[\"size1\"]\n    main_d[\"kgh_hash\"] = row[\"kgh_hash1\"]\n\n    diff_d = {}\n    diff_d[\"ea\"] = row[\"ea2\"]\n    diff_d[\"name\"] = row[\"name2\"]\n    diff_d[\"pseudo\"] = row[\"pseudo2\"]\n    diff_d[\"asm\"] = row[\"asm2\"]\n    diff_d[\"pseudocode_primes\"] = row[\"pseudo_primes2\"]\n    diff_d[\"nodes\"] = row[\"nodes2\"]\n    diff_d[\"md_index\"] = row[\"md2\"]\n    diff_d[\"clean_assembly\"] = row[\"clean_assembly2\"]\n    diff_d[\"clean_pseudo\"] = row[\"clean_pseudo2\"]\n    diff_d[\"clean_micro\"] = row[\"clean_micro2\"]\n    diff_d[\"bytes_hash\"] = row[\"bytes_hash2\"]\n    diff_d[\"edges\"] = row[\"edges2\"]\n    diff_d[\"indegree\"] = row[\"indegree2\"]\n    diff_d[\"outdegree\"] = row[\"outdegree2\"]\n    diff_d[\"instructions\"] = row[\"instructions2\"]\n    diff_d[\"cyclomatic_complexity\"] = row[\"cc2\"]\n    diff_d[\"strongly_connected\"] = row[\"strongly_connected2\"]\n    diff_d[\"loops\"] = row[\"loops2\"]\n    diff_d[\"constants_count\"] = row[\"constants_count2\"]\n    diff_d[\"size\"] = row[\"size2\"]\n    diff_d[\"kgh_hash\"] = row[\"kgh_hash2\"]\n\n    if ratio != 1.0:\n      nullsub = \"nullsub_\"\n      if name1.startswith(nullsub) or name2.startswith(nullsub):\n        debug_refresh(f\"Ignoring nullsub functions {name1}-{name2}\")\n        return False, 0.0\n\n      # Do we already have a 1.0 match for any of these functions?\n      if self.has_best_match(name1, name2):\n        debug_refresh(f\"Ignoring as we have a best match {name1}-{name2}\")\n        return False, 0.0\n\n      if ratio != 1.0:\n        if ratio is None:\n          r = self.check_ratio(main_d, diff_d)\n          if debug:\n            # pylint: disable-next=consider-using-f-string\n            msg = \"0x%x 0x%x %d\" % (int(ea), int(ea2), r)\n            logging.debug(msg)\n        else:\n          r = ratio\n\n        # Do we have a previous match with a better comparison ratio than this?\n        if self.has_better_match(name1, name2, r):\n          debug_refresh(f\"Ignoring as there is a better match than {r} for {name1}-{name2}\")\n          return False, 0.0\n\n    should_add = True\n    args = [main_d, diff_d, desc, r]\n    should_add, r = self.call_hook(\"on_match\", [should_add, r], args)\n    return should_add, r\n\n  def continue_getting_sql_rows(self, i):\n    \"\"\"\n    Determine if more rows should be read at the given stage\n    \"\"\"\n    if self.sql_max_processed_rows:\n      return True\n    if self.sql_max_processed_rows != 0 and i < self.sql_max_processed_rows:\n      return True\n    return False\n\n  def add_matches_internal(\n    self, cur, best, partial, val=None, unreliable=None, debug=False\n  ):\n    \"\"\"\n    Wrapper for various functions that find matches based on SQL queries. Always\n    use this function when issuing SQL heuristics (if it's possible).\n    \"\"\"\n    i = 0\n    matches = []\n    cur_thread = threading.current_thread()\n    t = time.monotonic()\n    while self.continue_getting_sql_rows(i):\n      if time.monotonic() - t > self.timeout or cur_thread.timeout:\n        log(f\"Timeout with heuristic '{cur_thread.name}'\")\n        raise SystemExit()\n\n      i += 1\n      if i % 50000 == 0:\n        log(f\"Processed {i} rows...\")\n      row = cur.fetchone()\n      if row is None:\n        break\n\n      # Check the row match\n      should_add, r = self.check_match(row, debug=debug)\n      if not should_add:\n        continue\n\n      ea = str(row[\"ea\"])\n      name1 = row[\"name1\"]\n      ea2 = row[\"ea2\"]\n      name2 = row[\"name2\"]\n      desc = row[\"description\"]\n      nodes1 = int(row[\"nodes1\"])\n      nodes2 = int(row[\"nodes2\"])\n\n      done = True\n      chooser = None\n      item = None\n\n      if val is None:\n        val = config.DEFAULT_PARTIAL_RATIO\n\n      if r == 1.0:\n        chooser = best\n        item = [ea, name1, ea2, name2, desc, r, nodes1, nodes2]\n      elif r >= val and partial is not None:\n        chooser = partial\n        item = [ea, name1, ea2, name2, desc, r, nodes1, nodes2]\n      else:\n        done = False\n\n      if done:\n        # pylint: disable-next=consider-using-f-string\n        matches.append([0, \"0x%x\" % int(ea), name1, ea2, name2])\n        self.add_match(name1, name2, r, item, chooser)\n      else:\n        chooser = None\n        item = None\n        if r < config.DEFAULT_PARTIAL_RATIO and r > val and unreliable is not None:\n          chooser = \"unreliable\"\n          item = [ea, name1, ea2, name2, desc, r, nodes1, nodes2]\n          # pylint: disable-next=consider-using-f-string\n          matches.append([0, \"0x%x\" % int(ea), name1, ea2, name2])\n\n        if chooser is not None:\n          self.add_match(name1, name2, r, item, chooser)\n\n    return matches\n\n  def add_matches_from_query_ratio(\n    self, sql, best, partial, unreliable=None, debug=False\n  ):\n    \"\"\"\n    Find matches using the query @sql and the usual rules.\n    \"\"\"\n    if self.all_functions_matched():\n      return\n\n    cur = self.db_cursor()\n    try:\n      cur.execute(sql)\n      self.add_matches_internal(\n        cur, best=best, partial=partial, unreliable=unreliable, debug=debug\n      )\n    except SystemExit:\n      pass\n    except:\n      log(f\"Error: {str(sys.exc_info()[1])}\")\n      print(\"*\" * 80)\n      print(sql)\n      print(\"*\" * 80)\n      traceback.print_exc()\n      raise\n    finally:\n      cur.close()\n\n  def add_matches_from_query_ratio_max(self, sql, best, partial, val):\n    \"\"\"\n    Find matches using the query @sql with a ratio >= @val.\n    \"\"\"\n    if self.all_functions_matched():\n      return\n\n    cur = self.db_cursor()\n    try:\n      cur.execute(sql)\n      self.add_matches_internal(\n        cur, best=best, partial=partial, val=val, unreliable=\"unreliable\"\n      )\n    except SystemExit:\n      pass\n    except:\n      log(f\"Error: {str(sys.exc_info()[1])}\")\n      print(\"*\" * 80)\n      print(sql)\n      print(\"*\" * 80)\n      traceback.print_exc()\n      raise\n    finally:\n      cur.close()\n\n  def add_matches_from_query_ratio_max_trusted(self, sql, val):\n    \"\"\"\n    Find matches using the query @sql with a ratio >= @val and assign those with\n    a bad ratio to the partial chooser, because they are reliable anyway.\n    \"\"\"\n    if self.all_functions_matched():\n      return\n\n    cur = self.db_cursor()\n    try:\n      cur.execute(sql)\n      self.add_matches_internal(\n        cur, best=\"best\", partial=\"partial\", val=val, unreliable=\"partial\"\n      )\n    except SystemExit:\n      pass\n    except:\n      log(f\"Error: {str(sys.exc_info()[1])}\")\n      print(\"*\" * 80)\n      print(sql)\n      print(\"*\" * 80)\n      traceback.print_exc()\n      raise\n    finally:\n      cur.close()\n\n  def add_matches_from_cursor_ratio_max(self, cur, best, partial, val):\n    \"\"\"\n    Find matches using the cursor @sql with a ratio >= @val and assign matches\n    to the corresponding lists.\n    \"\"\"\n    if self.all_functions_matched():\n      return\n\n    matches = self.add_matches_internal(cur, best=best, partial=partial, val=val)\n    return matches\n\n  def add_matches_from_query(self, sql, category):\n    \"\"\"\n    Add all matches from this SQL query without performing any check.\n\n    Warning: use this *only* if the ratio is known to be 1.00.\n    \"\"\"\n    if self.all_functions_matched():\n      return\n\n    cur_thread = threading.current_thread()\n    cur = self.db_cursor()\n    try:\n      cur.execute(sql)\n\n      i = 0\n      while not cur_thread.timeout:\n        i += 1\n        if i % 1000 == 0:\n          log(f\"Processed {i} rows...\")\n        row = cur.fetchone()\n        if row is None:\n          break\n\n        # Check the row match\n        should_add, r = self.check_match(row)\n        if not should_add:\n          continue\n\n        ea = str(row[\"ea\"])\n        name1 = row[\"name1\"]\n        ea2 = row[\"ea2\"]\n        name2 = row[\"name2\"]\n        nodes1 = int(row[\"nodes1\"])\n        nodes2 = int(row[\"nodes2\"])\n        desc = row[\"description\"]\n        item = [ea, name1, ea2, name2, desc, 1, nodes1, nodes2]\n        self.add_match(name1, name2, 1.0, item, category)\n        if r < config.DEFAULT_PARTIAL_RATIO:\n          debug_refresh(\n            f\"Warning: Best match 0x{ea}:{name1} -> 0x{ea2}x:{name2} have a bad ratio: {r}\"\n          )\n    except:\n      log(f\"Error: {str(sys.exc_info()[1])}\")\n    finally:\n      cur.close()\n\n  def search_small_differences(self, choose):\n    \"\"\"\n    Find matches where most used names are the same.\n    \"\"\"\n    cur = self.db_cursor()\n\n    # Same basic blocks, edges, mnemonics, etc... but different names\n    name = \"Nodes, edges, complexity and mnemonics with small differences\"\n    sql = (\n      \"\"\" select \"\"\"\n      + get_query_fields(name)\n      + \"\"\" ,\n           f.names  f_names,\n           df.names df_names\n        from functions f,\n           diff.functions df\n         where f.nodes = df.nodes\n         and f.edges = df.edges\n         and f.mnemonics = df.mnemonics\n         and f.cyclomatic_complexity = df.cyclomatic_complexity\n         and f.names != '[]' \"\"\"\n    )\n\n    try:\n      cur.execute(sql)\n      rows = result_iter(cur)\n      for row in rows:\n        ea = str(row[\"ea\"])\n        name1 = row[\"name1\"]\n        name2 = row[\"name2\"]\n\n        nodes1 = int(row[\"nodes1\"])\n        nodes2 = int(row[\"nodes2\"])\n\n        s1 = set(json.loads(row[\"f_names\"]))\n        s2 = set(json.loads(row[\"df_names\"]))\n        total = max(len(s1), len(s2))\n        commons = len(s1.intersection(s2))\n        ratio = (commons * 1.0) / total\n        if self.has_better_match(name1, name2, ratio):\n          continue\n\n        if ratio >= config.DEFAULT_PARTIAL_RATIO:\n          # Check the row match\n          should_add, ratio2 = self.check_match(row)\n          if not should_add:\n            continue\n\n          ratio = ratio2\n          ea = str(row[\"ea\"])\n          name1 = row[\"name1\"]\n          ea2 = row[\"ea2\"]\n          name2 = row[\"name2\"]\n          desc = row[\"description\"]\n          nodes1 = int(row[\"nodes1\"])\n          nodes2 = int(row[\"nodes2\"])\n\n          item = [ea, name1, ea2, name2, desc, ratio, nodes1, nodes2]\n          if ratio == 1.0:\n            the_chooser = \"best\"\n          else:\n            the_chooser = choose\n\n          self.add_match(name1, name2, ratio, item, the_chooser)\n    finally:\n      cur.close()\n\n  def find_same_name(self, choose):\n    \"\"\"\n    Find matches by searching for the same name using both mangled and unmangled names.\n    \"\"\"\n    cur = self.db_cursor()\n    desc = \"Perfect match, same name\"\n    sql = (\n      \"\"\"select distinct \"\"\"\n      + get_query_fields(desc)\n      + \"\"\"\n         from functions f,\n          diff.functions df\n        where (df.mangled_function = f.mangled_function\n         or df.name = f.name)\n        and f.name not like 'nullsub_%'\"\"\"\n    )\n\n    log_refresh(f\"Finding with heuristic '{desc}'\")\n    try:\n      cur.execute(sql)\n      rows = cur.fetchall()\n\n      if len(rows) > 0 and not self.all_functions_matched():\n        for row in rows:\n          name = row[\"mangled1\"]\n          name1 = row[\"name1\"]\n          name2 = row[\"name2\"]\n          if self.ignore_sub_names and name.startswith(\"sub_\"):\n            continue\n\n          # Check the row match\n          should_add, ratio = self.check_match(row)\n          if not should_add:\n            continue\n\n          ea = str(row[\"ea\"])\n          name1 = row[\"name1\"]\n          ea2 = row[\"ea2\"]\n          name2 = row[\"name2\"]\n          desc = row[\"description\"]\n          nodes1 = int(row[\"nodes1\"])\n          nodes2 = int(row[\"nodes2\"])\n          md1 = row[\"md1\"]\n          md2 = row[\"md2\"]\n          if float(ratio) == 1.0 or (\n            self.relaxed_ratio and md1 != 0 and md1 == md2\n          ):\n            the_chooser = \"best\"\n            item = [ea, name1, ea2, name2, desc, 1, nodes1, nodes2]\n          else:\n            the_chooser = choose\n            if ratio + config.MATCHES_BONUS_RATIO < 1.0:\n              ratio += config.MATCHES_BONUS_RATIO\n\n            item = [ea, name1, ea2, name2, desc, ratio, nodes1, nodes2]\n\n          self.add_match(name1, name2, ratio, item, the_chooser)\n    finally:\n      cur.close()\n\n  def find_partial_matches(self):\n    \"\"\"\n    Find matches using all heuristics assigned to the 'partial' category.\n    \"\"\"\n    self.run_heuristics_for_category(\"Partial\")\n\n    if self.slow_heuristics:\n      # Search using some of the previous criterias but calculating the edit distance\n      log_refresh(\"Finding with heuristic 'Small names difference'\")\n      self.search_small_differences(\"partial\")\n\n  def find_brute_force(self):\n    \"\"\"\n    Brute force the unmatched functions. This is unreliable at best.\n    \"\"\"\n    cur = self.db_cursor()\n    sql = \"create temporary table unmatched(id integer null primary key, address, main)\"\n    cur.execute(sql)\n\n    # Find functions not matched in the primary database\n    sql = \"select name, address from functions\"\n    cur.execute(sql)\n    rows = cur.fetchall()\n    if len(rows) > 0:\n      sql = \"insert into unmatched(address,main) values(?,?)\"\n      insert_args = []\n      for row in rows:\n        name = row[\"name\"]\n        if name not in self.matched_primary:\n          ea = row[1]\n          insert_args.append([ea, 1])\n      cur.executemany(sql, insert_args)\n\n    # Find functions not matched in the secondary database\n    sql = \"select name, address from diff.functions\"\n    cur.execute(sql)\n    rows = cur.fetchall()\n    if len(rows) > 0:\n      sql = \"insert into unmatched(address,main) values(?,?)\"\n      insert_args = []\n      for row in rows:\n        name = row[\"name\"]\n        if name not in self.matched_secondary:\n          ea = row[1]\n          insert_args.append([ea, 0])\n      cur.executemany(sql, insert_args)\n\n    if self.slow_heuristics:\n      heur = \"Brute forcing (MD-Index and KOKA hash)\"\n      sql = (\n        \"\"\"select \"\"\"\n        + get_query_fields(heur)\n        + \"\"\"\n        from functions f,\n            diff.functions df,\n            unmatched um\n        where ((f.address = um.address and um.main = 1)\n          or (df.address = um.address and um.main = 0))\n          and ((f.md_index = df.md_index\n          and f.md_index > 1 and df.md_index > 1)\n          or (f.kgh_hash = df.kgh_hash\n          and f.kgh_hash > 7 and df.kgh_hash > 7))\n          \"\"\"\n      )\n      cur.execute(sql)\n      log_refresh(\"Finding via brute-forcing (MD-Index and KOKA hash)...\")\n      self.add_matches_from_cursor_ratio_max(\n        cur, best=\"unreliable\", partial=None, val=config.DEFAULT_PARTIAL_RATIO\n      )\n\n    heur = \"Brute forcing (Compilation Unit)\"\n    sql = (\n      \"\"\"select \"\"\"\n      + get_query_fields(heur)\n      + \"\"\"\n         from functions f,\n          diff.functions df,\n          unmatched um\n        where ((f.address = um.address and um.main = 1)\n         or (df.address = um.address and um.main = 0))\n        and f.source_file = df.source_file\n        and f.source_file != ''\n        and df.source_file is not null\n        and f.kgh_hash > 7 and df.kgh_hash > 7 \"\"\"\n    )\n    cur.execute(sql)\n    log_refresh(\"Finding via brute-forcing (Compilation Unit)...\")\n    self.add_matches_from_cursor_ratio_max(\n      cur, best=\"unreliable\", partial=None, val=config.DEFAULT_PARTIAL_RATIO\n    )\n\n    if cur.connection.in_transaction:\n      cur.execute(\"commit\")\n    cur.close()\n\n  def find_experimental_matches(self):\n    \"\"\"\n    Run heuristics labeled as experimental.\n    \"\"\"\n    self.run_heuristics_for_category(\"Experimental\")\n\n  def find_unreliable_matches(self):\n    \"\"\"\n    Launch unreliable heuristics. Subject to be removed in the near future.\n    \"\"\"\n    self.run_heuristics_for_category(\"Unreliable\")\n    if self.slow_heuristics and self.unreliable:\n      # Find using brute-force\n      log_refresh(\"Brute-forcing...\")\n      self.find_brute_force()\n\n  def find_unmatched(self):\n    \"\"\"\n    Find the functions that weren't matched after running all the selected\n    heuristics.\n    \"\"\"\n    cur = self.db_cursor()\n    try:\n      sql = \"select name, address from functions\"\n      cur.execute(sql)\n      rows = cur.fetchall()\n      if len(rows) > 0:\n        choose = self.chooser(\"Unmatched in primary\", self, False)\n        for row in rows:\n          name = row[\"name\"]\n\n          if name not in self.matched_primary:\n            ea = row[1]\n            choose.add_item(CChooser.Item(ea, name))\n        self.unmatched_second = choose\n\n      sql = \"select name, address from diff.functions\"\n      cur.execute(sql)\n      rows = cur.fetchall()\n      if len(rows) > 0:\n        choose = self.chooser(\"Unmatched in secondary\", self, False)\n        for row in rows:\n          name = row[\"name\"]\n\n          if name not in self.matched_secondary:\n            ea = row[\"address\"]\n            choose.add_item(CChooser.Item(ea, name))\n        self.unmatched_primary = choose\n    finally:\n      cur.close()\n\n  def create_choosers(self):\n    \"\"\"\n    Create the IDA choosers that Diaphora will use to show the diffing results.\n    \"\"\"\n    self.unreliable_chooser = self.chooser(\"Unreliable matches\", self)\n    self.partial_chooser = self.chooser(\"Partial matches\", self)\n    self.best_chooser = self.chooser(\"Best matches\", self)\n    self.multimatch_chooser = self.chooser(\"Problematic matches\", self)\n\n    self.ml_chooser = self.chooser(\"ML matches\", self)\n\n    self.unmatched_second = self.chooser(\"Unmatched in secondary\", self, False)\n    self.unmatched_primary = self.chooser(\"Unmatched in primary\", self, False)\n\n    self.interesting_matches = None\n\n  def save_results(self, filename):\n    \"\"\"\n    Save all the results (best, partial, unreliable, multimatches and unmatched)\n    to the file @filename.\n    \"\"\"\n    if os.path.exists(filename):\n      os.remove(filename)\n      log(f\"Previous diff results '{filename}' removed.\")\n\n    results_db = sqlite3_connect(filename)\n\n    cur = results_db.cursor()\n    try:\n      sql = \"create table config (main_db text, diff_db text, version text, date text)\"\n      cur.execute(sql)\n\n      sql = \"insert into config values (?, ?, ?, ?)\"\n      cur.execute(\n        sql, (self.db_name, self.last_diff_db, VERSION_VALUE, time.asctime())\n      )\n\n      sql = \"\"\"create table results (type, line, address, name, address2, name2,\n                   ratio, nodes1, nodes2, description)\"\"\"\n      cur.execute(sql)\n\n      sql = \"create unique index uq_results on results(address, address2)\"\n      cur.execute(sql)\n\n      sql = \"create table unmatched (type, line, address, name)\"\n      cur.execute(sql)\n\n      with results_db:\n        results_sql = \"insert or ignore into results values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\"\n        unmatched_sql = \"insert into unmatched values (?, ?, ?, ?)\"\n\n        d = {\n          \"best\": [self.best_chooser, results_sql],\n          \"partial\": [self.partial_chooser, results_sql],\n          \"unreliable\": [self.unreliable_chooser, results_sql],\n          \"multimatch\": [self.multimatch_chooser, results_sql],\n          \"primary\": [self.unmatched_primary, unmatched_sql],\n          \"secondary\": [self.unmatched_second, unmatched_sql],\n        }\n\n        for category, fields in d.items():\n          chooser, sql_cmd = fields\n          if chooser is not None:\n            for item in chooser.items:\n              item_list = list(item)\n              item_list.insert(0, category)\n              cur.execute(sql_cmd, item_list)\n\n      log(f\"Diffing results saved in file '{filename}'.\")\n    finally:\n      cur.close()\n      results_db.close()\n\n  def try_attach(self, cur, db):\n    \"\"\"\n    Try attaching the diff database and ignore errors...\n\n    NOTE: Yes, this looks odd, it is yet another workaround for an old IDA bug.\n    See this issue for more details:\n\n    https://github.com/joxeankoret/diaphora/issues/151\n    \"\"\"\n    try:\n      cur.execute(f'attach \"{db}\" as diff')\n    except:\n      pass\n\n  def get_function_row(self, name, db_name=\"main\"):\n    \"\"\"\n    Get the full table row for the given function with name @name in the database\n    @db_name.\n    \"\"\"\n    row = None\n    cur = self.db_cursor()\n    try:\n      sql = f\"select * from {db_name}.functions where name = ?\"\n      cur.execute(sql, [name])\n      row = cur.fetchone()\n    except:\n      log(f\"ERROR at get_function_row: {str(sys.exc_info()[1])}\")\n    finally:\n      cur.close()\n    return row\n\n  def get_function_row_by_ea(self, ea, db_name=\"main\"):\n    \"\"\"\n    Get the full table row for the given function with name @name in the database\n    @db_name.\n    \"\"\"\n    row = None\n    cur = self.db_cursor()\n    try:\n      sql = f\"select * from {db_name}.functions where address = ?\"\n      cur.execute(sql, [str(ea)])\n      row = cur.fetchone()\n    except:\n      log(f\"ERROR at get_function_row_by_ea: {str(sys.exc_info()[1])}\")\n    finally:\n      cur.close()\n    return row\n\n  def compare_function_rows(self, main_row, diff_row):\n    \"\"\"\n    Compare the functions of one SQL match.\n    \"\"\"\n    fields = [\n      [\"ea\", \"address\"],   [\"name\", \"name\"], [\"pseudo\", \"pseudocode\"],\n      [\"asm\", \"assembly\"], [\"pseudocode_primes\", \"pseudocode_primes\"], [\"nodes\", \"nodes\"],\n      [\"md_index\", \"md_index\"],  [\"clean_assembly\", \"clean_assembly\"],\n      [\"clean_pseudo\", \"clean_pseudo\"], [\"clean_micro\", \"clean_microcode\"],\n      [\"bytes_hash\", \"bytes_hash\"], [\"edges\", \"edges\"]\n    ]\n\n    main_d = {}\n    main_d[\"ea\"] = main_row[\"address\"]\n    main_d[\"name\"] = main_row[\"name\"]\n    main_d[\"pseudo\"] = main_row[\"pseudocode\"]\n    main_d[\"asm\"] = main_row[\"assembly\"]\n    main_d[\"pseudocode_primes\"] = main_row[\"pseudocode_primes\"]\n    main_d[\"nodes\"] = main_row[\"nodes\"]\n    main_d[\"md_index\"] = main_row[\"md_index\"]\n    main_d[\"clean_assembly\"] = main_row[\"clean_assembly\"]\n    main_d[\"clean_pseudo\"] = main_row[\"clean_pseudo\"]\n    main_d[\"clean_micro\"] = main_row[\"clean_microcode\"]\n    main_d[\"bytes_hash\"] = main_row[\"bytes_hash\"]\n    main_d[\"edges\"] = main_row[\"edges\"]\n    main_d[\"indegree\"] = main_row[\"indegree\"]\n    main_d[\"outdegree\"] = main_row[\"outdegree\"]\n    main_d[\"instructions\"] = main_row[\"instructions\"]\n    main_d[\"cyclomatic_complexity\"] = main_row[\"cyclomatic_complexity\"]\n    main_d[\"strongly_connected\"] = main_row[\"strongly_connected\"]\n    main_d[\"loops\"] = main_row[\"loops\"]\n    main_d[\"constants_count\"] = main_row[\"constants_count\"]\n    main_d[\"size\"] = main_row[\"size\"]\n    main_d[\"kgh_hash\"] = main_row[\"kgh_hash\"]\n\n    diff_d = {}\n    diff_d[\"ea\"] = diff_row[\"address\"]\n    diff_d[\"name\"] = diff_row[\"name\"]\n    diff_d[\"pseudo\"] = diff_row[\"pseudocode\"]\n    diff_d[\"asm\"] = diff_row[\"assembly\"]\n    diff_d[\"pseudocode_primes\"] = diff_row[\"pseudocode_primes\"]\n    diff_d[\"nodes\"] = diff_row[\"nodes\"]\n    diff_d[\"md_index\"] = diff_row[\"md_index\"]\n    diff_d[\"clean_assembly\"] = diff_row[\"clean_assembly\"]\n    diff_d[\"clean_pseudo\"] = diff_row[\"clean_pseudo\"]\n    diff_d[\"clean_micro\"] = diff_row[\"clean_microcode\"]\n    diff_d[\"bytes_hash\"] = diff_row[\"bytes_hash\"]\n    diff_d[\"edges\"] = diff_row[\"edges\"]\n    diff_d[\"indegree\"] = diff_row[\"indegree\"]\n    diff_d[\"outdegree\"] = diff_row[\"outdegree\"]\n    diff_d[\"instructions\"] = diff_row[\"instructions\"]\n    diff_d[\"cyclomatic_complexity\"] = diff_row[\"cyclomatic_complexity\"]\n    diff_d[\"strongly_connected\"] = diff_row[\"strongly_connected\"]\n    diff_d[\"loops\"] = diff_row[\"loops\"]\n    diff_d[\"constants_count\"] = diff_row[\"constants_count\"]\n    diff_d[\"size\"] = diff_row[\"size\"]\n    diff_d[\"kgh_hash\"] = diff_row[\"kgh_hash\"]\n\n    ratio = self.check_ratio(main_d, diff_d)\n    return ratio\n\n  def search_just_stripped_binaries(self):\n    \"\"\"\n    Suppose we have a binary with symbols and the same binary with the symbols\n    stripped. This 'dirty' heuristic tries to find if it's such a binary and\n    then match functions with the same address.\n    \"\"\"\n    ret = False\n    total = self.total_functions1\n    cur = self.db_cursor()\n\n    try:\n      sql = \"\"\"select count(0)\n                 from main.functions f,\n                      diff.functions df\n                where f.address = df.address \"\"\"\n      cur.execute(sql)\n      row = cur.fetchone()\n      matches = row[0]\n\n      # If more than 99% of the best matches share the same exact address it is\n      # clear it's the same binary with very little changes like, probably, just\n      # symbols stripped.\n      percent = (matches * 100) / total\n      if percent >= config.SPEEDUP_STRIPPED_BINARIES_MIN_PERCENT:\n        self.is_symbols_stripped = True\n        message = f\"A total of {matches} matches out of {total}, {percent}% percent have the same address\"\n        log(f\"Symbols stripped detected: {message}\")\n\n        heur = \"Same binary with symbols stripped\"\n        sql = (\n          \"\"\"\n    select distinct \"\"\"\n          + get_query_fields(heur)\n          + \"\"\"\n      from functions f,\n           diff.functions df\n     where f.address = df.address\"\"\"\n        )\n        log_refresh(f\"Finding via {repr(heur)}\")\n\n        self.add_matches_from_query_ratio(sql, \"best\", \"partial\")\n        ret = True\n    finally:\n      cur.close()\n\n    return ret\n\n  def search_patchdiff_with_symbols(self):\n    \"\"\"\n    Suppose we are diffing 2 different versions of the exact same binary with\n    symbols and the number of functions with the same name is 99% or more. In\n    such a case we can just match by name all the functions that are the same\n    and then brute force the remaining functions that should be just a few.\n    \"\"\"\n    ret = False\n    total = self.total_functions1\n    cur = self.db_cursor()\n\n    try:\n      sql = \"\"\"select count(0)\n                 from main.functions f,\n                      diff.functions df\n                where f.mangled_function = df.mangled_function \"\"\"\n      cur.execute(sql)\n      row = cur.fetchone()\n      matches = row[0]\n\n      # If more than 90% of the best matches share the same exact mangled name\n      # it is clear where patch diffing 2 different versions of the same binary.\n      percent = (matches * 100) / total\n      if percent > config.SPEEDUP_PATCH_DIFF_SYMBOLS_MIN_PERCENT:\n        # We already have them matched, just instruct the heuristic engine to\n        # finish by doing brute forcing with the remaining functions and that's\n        # about it.\n        self.is_patch_diff = True\n        if self.project_script is None or self.project_script == \"\":\n          if config.RUN_DEFAULT_SCRIPTS:\n            log(\"Loading default script for patch diffing sessions...\")\n            self.project_script = config.DEFAULT_SCRIPT_PATCH_DIFF\n            self.load_hooks()\n\n        msg = f\"A total of {matches} matches out of {total}, {percent}% percent have the same name\"\n        log(f\"Patch diffing detected: {msg}\")\n        ret = True\n    finally:\n      cur.close()\n\n    return ret\n\n  def apply_dirty_heuristics(self):\n    \"\"\"\n    Apply what internally are called dirty heuristics (aka \"speed ups\").\n    \"\"\"\n    if self.search_just_stripped_binaries():\n      return True\n    if self.search_patchdiff_with_symbols():\n      return True\n    return False\n\n  def get_unmatched_functions(self):\n    \"\"\"\n    Get the list of unmatched functions in both databases.\n    \"\"\"\n    main = list()\n    diff = list()\n    cur = self.db_cursor()\n    try:\n      sql = \"\"\"select 'main' db_name, name, address from main.functions\n        union\n         select 'diff' db_name, name, address from diff.functions\n    \"\"\"\n      cur.execute(sql)\n      rows = cur.fetchall()\n      if len(rows) > 0:\n        for row in rows:\n          name = row[\"name\"]\n          d = self.matched_primary\n          l = list(main)\n          if row[\"db_name\"] == \"diff\":\n            d = self.matched_secondary\n            l = list(diff)\n\n          if name not in d:\n            ea = row[\"address\"]\n            key = [ea, name]\n            if key not in main:\n              l.append(key)\n    finally:\n      cur.close()\n    return main, diff\n\n  def search_remaining_functions(self, main_unmatched, diff_unmatched, values):\n    \"\"\"\n    Search potentially renamed functions in a usual patch diffing session.\n    \"\"\"\n    sql = (\n      \"\"\"select \"\"\"\n      + get_query_fields(\"?\", quote=False)\n      + \"\"\"\n         from main.functions f,\n          diff.functions df\n        where f.address = ?\n        and df.address = ?\"\"\"\n    )\n    if not values[\"small\"]:\n      sql += \" and f.nodes >= 3 and df.nodes >= 3 \"\n\n    cur = self.db_cursor()\n    try:\n      for ea1, name1 in main_unmatched:\n        if values[\"only_sub\"]:\n          if not name1.startswith(\"sub_\"):\n            continue\n\n        for ea2, _ in diff_unmatched:\n          cur.execute(sql, (values[\"heur\"], ea1, ea2))\n          self.add_matches_internal(\n            cur, best=\"best\", partial=\"partial\", val=values[\"val\"]\n          )\n    finally:\n      cur.close()\n\n  def find_remaining_functions(self):\n    \"\"\"\n    After using a dirty heuristic doing patch diffing try to find the remaining\n    functions, if any.\n    \"\"\"\n    main_unmatched, diff_unmatched = self.get_unmatched_functions()\n    if self.is_patch_diff:\n      heur = \"Renamed or anonymous function match in patch diffing session\"\n      values = {\n        \"only_sub\": True,\n        \"heur\": heur,\n        \"small\": False,\n        \"val\": config.SPEEDUP_PATCH_DIFF_RENAMED_FUNCTION_MIN_RATIO,\n      }\n      self.search_remaining_functions(main_unmatched, diff_unmatched, values)\n\n  def itemize_for_chooser(self, item):\n    \"\"\"\n    Get a CChoser.Item object from the given list @item.\n    \"\"\"\n    ea1 = item[0]\n    vfname1 = item[1]\n    ea2 = item[2]\n    vfname2 = item[3]\n    ratio = item[4]\n    nodes1 = item[5]\n    nodes2 = item[6]\n    desc = item[7]\n    return CChooser.Item(ea1, vfname1, ea2, vfname2, ratio, nodes1, nodes2, desc)\n\n  def add_multimatches_to_chooser(self, multi, ignore_list, dones):\n    \"\"\"\n    Add the multimatches found in the list @multi and build the list of functions\n    to be ignored (@ignore_list).\n    \"\"\"\n    for ea in multi:\n      if len(multi[ea]) > 1:\n        for multi_match in multi[ea]:\n          item = self.itemize_for_chooser(multi_match[2])\n          key = f\"{item.ea}-{item.ea2}\"\n          if key not in dones:\n            dones.add(key)\n            self.multimatch_chooser.add_item(item)\n            ignore_list.add(ea)\n\n    return ignore_list, dones\n\n  def deep_ratio(self, main_d, diff_d, ratio):\n    \"\"\"\n    Try to get a score to add to the value returned by `check_ratio()` so less\n    multimatches happen.\n\n    It's usually pretty hard to determine which is the right match when there is\n    a multimatch. However, in some cases it can be decided by simply taking a\n    look to things like the compilation unit it belongs to, or the AST primes,\n    or the numeric and string constants, etc... In this function I try to remove\n    decidable false positives causing multimatches by adding a very small value\n    to the calculated ratio so it doesn't cause false positives while removing,\n    at the same time, an acceptable number of multimatches (which are also kind\n    of false positives).\n    \"\"\"\n    ea1 = int(main_d[\"ea\"])\n    ea2 = int(diff_d[\"ea\"])\n\n    score = 0\n\n    # It isn't 100% clear if the required fields should be better added to the\n    # main_d/diff_d dicts instead of issuing SQL queries for every match. The\n    # logic says so, but I haven't seen any noticeable performance penalty.\n    cur = self.db_cursor()\n    sql = \"select * from {db}.functions where address = ?\"\n    try:\n      cur.execute(sql.format(db=\"main\"), (str(ea1),))\n      main_row = cur.fetchone()\n\n      cur.execute(sql.format(db=\"diff\"), (str(ea2),))\n      diff_row = cur.fetchone()\n\n      source1 = main_row[\"source_file\"]\n      source2 = diff_row[\"source_file\"]\n      if source1 is not None and source2 is not None:\n        if source1 == source2 and source1 != \"\":\n          score += 0.001\n\n      pseudocode_primes1 = main_row[\"pseudocode_primes\"]\n      pseudocode_primes2 = diff_row[\"pseudocode_primes\"]\n      if pseudocode_primes1 is not None and pseudocode_primes2 is not None:\n        if pseudocode_primes1 == pseudocode_primes2 and pseudocode_primes1 != \"\":\n          score += 0.001\n\n      in1 = main_row[\"indegree\"]\n      in2 = diff_row[\"indegree\"]\n      if in1 == in2 and in1 != 0:\n        score += 0.001\n\n      out1 = main_row[\"outdegree\"]\n      out2 = diff_row[\"outdegree\"]\n      if out1 == out2 and out1 != 0:\n        score += 0.001\n\n      switches1 = main_row[\"switches\"]\n      switches2 = diff_row[\"switches\"]\n      if switches1 == switches2 and switches1 != \"[]\":\n        score += 0.003\n\n      cc1 = main_row[\"cyclomatic_complexity\"]\n      cc2 = diff_row[\"cyclomatic_complexity\"]\n      if cc1 == cc2 and cc1 != 0:\n        score += 0.001\n\n      if main_row[\"constants\"] != \"[]\":\n        set1 = set(json.loads(main_row[\"constants\"]))\n        set2 = set(json.loads(diff_row[\"constants\"]))\n        set_result = set1.intersection(set2)\n        if len(set_result) > 0:\n          if self.is_same_processor:\n            tmp = config.INCREASE_RATIO_PER_CONSTANT_MATCH_SAME_CPU\n          else:\n            tmp = config.INCREASE_RATIO_PER_CONSTANT_MATCH\n          score += len(set_result) * tmp\n\n      if self.classifier is not None:\n        if self.get_model_ratio(main_d, diff_d) == 1:\n          score += config.ML_TRAINED_MODEL_MATCH_SCORE\n          vfname1 = main_d[\"name\"]\n          vfname2 = diff_d[\"name\"]\n          nodes1 = main_d[\"nodes\"]\n          nodes2 = diff_d[\"nodes\"]\n          desc = f\"ML {self.classifier}\"\n\n          tmp_item = CChooser.Item(ea1, vfname1, ea2, vfname2, desc, ratio + score, nodes1, nodes2)\n          self.ml_chooser.add_item(tmp_item)\n    finally:\n      cur.close()\n\n    return score\n\n  def find_unresolved_multimatches(self, max_main, multi_main, max_diff, multi_diff):\n    \"\"\"\n    Find unresolved multimatches.\n    \"\"\"\n    # First pass, group them\n    dones = set()\n    for key, items in self.all_matches.items():\n      l = sorted(items, key=lambda x: float(x[5]), reverse=True)\n      for match in l:\n        ea1 = match[0]\n        ea2 = match[2]\n        ratio = match[5]\n\n        key = f\"{ea1}-{ea2}\"\n        if key in dones:\n          continue\n        dones.add(key)\n\n        if ea1 not in max_main:\n          max_main[ea1] = ratio\n\n        # If the previous ratio we got is less than this one, ignore\n        if max_main[ea1] > ratio:\n          continue\n        max_main[ea1] = ratio\n\n        item = [ea2, ratio, match]\n        try:\n          multi_main[ea1].append(item)\n        except KeyError:\n          multi_main[ea1] = [item]\n\n        if ea2 not in max_diff:\n          max_diff[ea2] = ratio\n\n        # If the previous ratio we got is less than this one, ignore\n        if max_diff[ea2] > ratio:\n          continue\n        max_diff[ea2] = ratio\n\n        item = [ea1, ratio, match]\n        try:\n          multi_diff[ea2].append(item)\n        except KeyError:\n          multi_diff[ea2] = [item]\n\n    return max_main, multi_main, max_diff, multi_diff\n\n  def find_multimatches(self):\n    \"\"\"\n    Find all the multimatches that were not solved.\n    \"\"\"\n    max_main = {}\n    max_diff = {}\n    multi_main = {}\n    multi_diff = {}\n\n    # First, find all the unresolved multimatches\n    values = self.find_unresolved_multimatches(\n      max_main, multi_main, max_diff, multi_diff\n    )\n    max_main, multi_main, max_diff, multi_diff = values\n\n    # Now, add them to the corresponding chooser\n    ignore_main = set()\n    ignore_diff = set()\n    dones = set()\n\n    ignore_main, dones = self.add_multimatches_to_chooser(\n      multi_main, ignore_main, dones\n    )\n    ignore_diff, dones = self.add_multimatches_to_chooser(\n      multi_diff, ignore_diff, dones\n    )\n\n    return max_main, max_diff, ignore_main, ignore_diff\n\n  def add_final_chooser_items(self, ignore_main, ignore_diff, max_main, max_diff):\n    \"\"\"\n    Build the final matches list and add matches to the corresponding chooser.\n    \"\"\"\n    CHOOSERS = {\n      \"best\": self.best_chooser,\n      \"partial\": self.partial_chooser,\n      \"unreliable\": self.unreliable_chooser,\n    }\n    for key, l in self.all_matches.items():\n      l = sorted(l, key=lambda x: float(x[5]), reverse=True)\n      for match in l:\n        item = self.itemize_for_chooser(match)\n        if item.ea in ignore_main or item.ea2 in ignore_diff:\n          continue\n        if item.ratio < max_main[item.ea]:\n          continue\n        if item.ratio < max_diff[item.ea2]:\n          continue\n        CHOOSERS[key].add_item(item)\n\n  def final_pass(self):\n    \"\"\"\n    Do the last pass:\n\n    1. Remove duplicated or wrong matches.\n    2. Find multimatches.\n    3. Fill the choosers with the final cleaned up results.\n    \"\"\"\n    self.cleanup_matches()\n\n    max_main, max_diff, ignore_main, ignore_diff = self.find_multimatches()\n    self.add_final_chooser_items(ignore_main, ignore_diff, max_main, max_diff)\n\n  def same_processor_both_databases(self):\n    \"\"\"\n    Check if the processor of both databases is the same.\n    \"\"\"\n    ret = False\n    cur = self.db_cursor()\n    try:\n      sql = \"\"\" select 1\n          from main.program mp,\n             diff.program dp\n         where mp.processor = dp.processor\"\"\"\n      cur.execute(sql)\n      row = cur.fetchone()\n      if row is not None:\n        ret = True\n    finally:\n      cur.close()\n    return ret\n\n  def functions_exists(self, name1, name2):\n    \"\"\"\n    Check if the given functions exist and return their respective rows.\n    \"\"\"\n    l = []\n    cur = self.db_cursor()\n    try:\n      sql = \"\"\"select * from (\n         select 'main' db_name, * from main.functions where name = ?\n        union\n         select 'diff' db_name, * from diff.functions where name = ?\n         ) order by db_name desc\n      \"\"\"\n      cur.execute(sql, (name1, name2))\n      rows = cur.fetchall()\n      ret = False\n      if rows is not None:\n        size = len(rows)\n        ret = size == 2\n        l = rows\n    finally:\n      cur.close()\n    return ret, l\n\n  def get_row_for_items(self, item):\n    \"\"\"\n    Get the assembly source for the functions involved in a match\n    \"\"\"\n\n    main_asm = self.get_function_row(item.vfname)\n    diff_asm = self.get_function_row(item.vfname2, \"diff\")\n\n    return main_asm, diff_asm\n\n  def call_on_match_hook(self, r, main_row, diff_row):\n    \"\"\"\n    Call the \"on_match\" hook, if it exists.\n    \"\"\"\n    should_add = True\n    if self.hooks is not None and \"on_match\" in dir(self.hooks):\n      desc = heur\n      ea = main_row[\"address\"]\n      ea2 = diff_row[\"address\"]\n      name1 = main_row[\"name\"]\n      name2 = main_row[\"name\"]\n      pseudo1 = main_row[\"pseudocode\"]\n      pseudo2 = diff_row[\"pseudocode\"]\n      asm1 = main_row[\"assembly\"]\n      asm2 = diff_row[\"assembly\"]\n      ast1 = main_row[\"pseudocode_primes\"]\n      ast2 = diff_row[\"pseudocode_primes\"]\n      nodes1 = int(main_row[\"nodes\"])\n      nodes2 = int(diff_row[\"nodes\"])\n      md1 = main_row[\"md_index\"]\n      md2 = diff_row[\"md_index\"]\n\n      d1 = { \"ea\": ea,  \"nodes\": nodes1, \"name\": name1, \"pseudocode_primes\": ast1,\n              \"pseudo\": pseudo1, \"asm\": asm1, \"md_index\": md1 }\n      d2 = { \"ea\": ea2, \"nodes\": nodes2, \"name\": name2, \"pseudocode_primes\": ast2,\n              \"pseudo\": pseudo2, \"asm\": asm2, \"md_index\": md2 }\n      tmp = self.call_hook(\"on_match\", [should_add, r], [d1, d2, desc, r])\n      should_add, r = tmp\n    return should_add, r\n\n  def find_one_match_diffing(\n    self, input_main_row, input_diff_row, field_name, heur, iteration, dones\n  ):\n    \"\"\"\n    Diff the lines for the field @field_name and find matches of function names\n    (only function names for now) to find new matches candidates.\n    \"\"\"\n    main_lines = input_main_row[field_name].splitlines(keepends=False)\n    diff_lines = input_diff_row[field_name].splitlines(keepends=False)\n    df = unified_diff(main_lines, diff_lines, lineterm=\"\")\n\n    minus = []\n    plus = []\n\n    for row in df:\n      if len(row) == 0:\n        continue\n\n      c = row[0]\n      if c == \"-\":\n        minus.append(row)\n      elif c == \"+\":\n        plus.append(row)\n      elif c == \" \":\n        if len(minus) > 0 and len(plus) > 0:\n          matches1 = re.findall(CPP_NAMES_RE, \"\\n\".join(minus), re.IGNORECASE)\n          matches2 = re.findall(CPP_NAMES_RE, \"\\n\".join(plus), re.IGNORECASE)\n          minus = []\n          plus = []\n\n          size = min(len(matches1), len(matches2))\n          for i in range(size):\n            name1 = matches1[i][0]\n            name2 = matches2[i][0]\n            key = f\"{name1}-{name2}\"\n            if key in dones:\n              continue\n            dones.add(key)\n\n            if name1.startswith(\"nullsub\") or name2.startswith(\"nullsub\"):\n              # Ignore such functions\n              continue\n\n            size = len(dones)\n            if size > 0 and size % 10000 == 0:\n              log(f\"{size} callee matches processed so far...\")\n\n            exists, l = self.functions_exists(name1, name2)\n            if exists:\n              main_row = l[0]\n              diff_row = l[1]\n              min_nodes = min(main_row[\"nodes\"], diff_row[\"nodes\"])\n              max_nodes = max(main_row[\"nodes\"], diff_row[\"nodes\"])\n\n              # If the number of basic blocks differ in more than 75% ignore...\n              if (\n                (min_nodes * 100) / max_nodes\n              ) < config.DIFFING_MATCHES_MAX_DIFFERENT_BBLOCKS_PERCENT:\n                continue\n\n              # There is a high risk of false positives with small functions,\n              # therefore, it's preferred to miss functions than having false\n              # positives\n              if main_row[\"nodes\"] < config.DIFFING_MATCHES_MIN_BBLOCKS:\n                continue\n              if diff_row[\"nodes\"] < config.DIFFING_MATCHES_MIN_BBLOCKS:\n                continue\n\n              r = self.compare_function_rows(main_row, diff_row)\n              if r == 1.0:\n                chooser = \"best\"\n              elif r > config.DEFAULT_TRUSTED_PARTIAL_RATIO:\n                chooser = \"partial\"\n              else:\n                continue\n\n              if r + config.MATCHES_BONUS_RATIO < 1.0:\n                r += config.MATCHES_BONUS_RATIO\n\n              should_add, r = self.call_on_match_hook(r, main_row, diff_row)\n              if should_add:\n                heur_text = f\"{heur} (iteration #{iteration})\"\n                ea1 = main_row[\"address\"]\n                ea2 = diff_row[\"address\"]\n                nodes1 = int(main_row[\"nodes\"])\n                nodes2 = int(diff_row[\"nodes\"])\n                new_item = [\n                  ea1,\n                  name1,\n                  ea2,\n                  name2,\n                  heur_text,\n                  r,\n                  nodes1,\n                  nodes2,\n                ]\n                self.add_match(name1, name2, r, new_item, chooser)\n\n    return dones\n\n  def get_sorted_results(self, category):\n    \"\"\"\n    Get results for the given category sorted by ratio\n    \"\"\"\n    l = sorted(\n          self.all_matches[category], key=lambda x: float(x[5]), reverse=True\n        )\n    return l\n\n  def get_total_matched_functions(self):\n    \"\"\"\n    Return the total functions matched in the 'best' or 'partial' categories\n    \"\"\"\n    return len(self.all_matches[\"best\"]) + len(\n        self.all_matches[\"partial\"]\n      )\n\n  def find_matches_diffing_internal(self, heur, field_name):\n    \"\"\"\n    Find funtions by diffing matches assembly or pseudo-codes.\n\n    NOTE: Should this algorithm be parallelized?\n    \"\"\"\n    log_refresh(f\"Finding with heuristic '{heur}'\")\n\n    iteration = 1\n    dones = set()\n    # Should I let it run for some more iterations? There is a small chance of\n    # hitting an infinite loop, so I'm hardcoding an upper limit.\n    while iteration <= 3:\n      old_total = self.get_total_matched_functions()\n\n      for key in [\"best\", \"partial\"]:\n        l = self.get_sorted_results(key)\n        for match in l:\n          match_key = f\"{match[1]}-{match[3]}\"\n          if match_key in dones:\n            continue\n          dones.add(match_key)\n\n          item = self.itemize_for_chooser(match)\n          main_row, diff_row = self.get_row_for_items(item)\n          if main_row is not None and diff_row is not None:\n            if main_row[field_name] is None:\n              continue\n            if diff_row[field_name] is None:\n              continue\n\n            dones = self.find_one_match_diffing(\n              main_row, diff_row, field_name, heur, iteration, dones\n            )\n\n      self.cleanup_matches()\n      self.show_summary()\n\n      new_total = self.get_total_matched_functions()\n      if new_total == old_total:\n        break\n\n      log(f\"New iteration with heuristic '{heur}'...\")\n      iteration += 1\n\n  def find_matches_diffing_assembly(self):\n    \"\"\"\n    Try finding new matches by diffing assembly.\n    \"\"\"\n    heur = \"Callee found diffing matches assembly\"\n    field_name = \"assembly\"\n    self.find_matches_diffing_internal(heur, field_name)\n\n  def find_matches_diffing_pseudo(self):\n    \"\"\"\n    Try finding new matches by diffing pseudo-codes.\n    \"\"\"\n    heur = \"Callee found diffing matches pseudo-code\"\n    field_name = \"pseudocode\"\n    self.find_matches_diffing_internal(heur, field_name)\n\n  def find_matches_diffing(self, iteration):\n    \"\"\"\n    Find new matches by diffing the previously found matches.\n    \"\"\"\n\n    # First, remove duplicates, etc... just to be sure\n    self.cleanup_matches()\n\n    # Only if the processor is the same for both databases we diff assembly\n    if self.is_same_processor:\n      heur = \"Callee found diffing matches assembly\"\n      enabled = self.call_hook(\"on_special_heuristic\", True, [heur, iteration])\n      if enabled:\n        self.find_matches_diffing_assembly()\n\n    heur = \"Callee found diffing matches pseudo-code\"\n    enabled = self.call_hook(\"on_special_heuristic\", True, [heur, iteration])\n    if enabled:\n      self.find_matches_diffing_pseudo()\n\n  def find_functions_between(self, range1, range2):\n    \"\"\"\n    Find the 'bester' matches in the functions gap specified by the given ranges\n    \"\"\"\n    cur = self.db_cursor()\n    sql = \"\"\"select *\n         from {db}.functions\n        where address > ?\n          and address < ?\n        order by address desc\"\"\"\n    try:\n      heur_text = \"Local affinity\"\n\n      # First, retrieve the main database functions in that area...\n      cur.execute(sql.format(db=\"main\"), range1)\n      main_rows = list(cur.fetchall())\n      size = len(main_rows)\n      # If the number of functions in that gap is less than a hardcoded size, do\n      # continue...\n      if size > 0 and size <= config.MAX_FUNCTIONS_PER_GAP:\n        # Then retrieve the diff database functions in that area...\n        cur.execute(sql.format(db=\"diff\"), range2)\n        diff_rows = list(cur.fetchall())\n        size = len(diff_rows)\n        # Check again the same number of maximum hardcoded functions that we'll\n        # consider for this heuristic...\n        if size > 0 and size <= config.MAX_FUNCTIONS_PER_GAP:\n          local_main_matched = set()\n          main_score = {}\n          local_diff_matched = set()\n          diff_score = {}\n\n          # And then, brute force all of these functions to find good matches\n          # regardless of the position.\n          for main_row in main_rows:\n            for diff_row in diff_rows:\n              name1 = main_row[\"name\"]\n              name2 = diff_row[\"name\"]\n              if name1.startswith(\"nullsub_\") or name2.startswith(\"nullsub_\"):\n                continue\n              if not name1.startswith(\"sub_\") and not name2.startswith(\"sub_\"):\n                continue\n\n              pseudocode_lines1 = main_row[\"pseudocode_lines\"]\n              pseudocode_lines2 = diff_row[\"pseudocode_lines\"]\n              if pseudocode_lines1 + pseudocode_lines2 != 0:\n                if pseudocode_lines1 == 3 or pseudocode_lines2 == 3:\n                  continue\n\n              r = self.compare_function_rows(main_row, diff_row)\n              if r == 1.0:\n                chooser = \"best\"\n              elif r >= config.DEFAULT_PARTIAL_RATIO:\n                chooser = \"partial\"\n              else:\n                continue\n\n              # If we have a previous match with the same score we discard this\n              # second one, as this heuristics orders functions by address in\n              # both functions and due to how compilers/linkers work, the first\n              # matches are the best ones in this case.\n              if name1 in local_main_matched and main_score[name1] >= r:\n                continue\n              if name2 in local_diff_matched and diff_score[name2] >= r:\n                continue\n\n              should_add, r = self.call_on_match_hook(r, main_row, diff_row)\n              if should_add:\n                ea1 = main_row[\"address\"]\n                ea2 = diff_row[\"address\"]\n                name1 = main_row[\"name\"]\n                name2 = diff_row[\"name\"]\n                nodes1 = int(main_row[\"nodes\"])\n                nodes2 = int(diff_row[\"nodes\"])\n                new_item = [ ea1, name1, ea2, name2, heur_text, r, nodes1, nodes2 ]\n                self.add_match(name1, name2, r, new_item, chooser)\n\n                local_main_matched.add(name1)\n                main_score[name1] = r\n                local_diff_matched.add(name2)\n                diff_score[name2] = r\n    finally:\n      cur.close()\n\n  def find_locally_affine_functions(self, iteration):\n    \"\"\"\n    Try to find functions between the unmatched functions space inside two\n    previously matched functions.\n\n    So, let's suppose the following example:\n\n      Bin1  Bin2  Matched?\n      ---   ---   ---\n      F1    F1'   Yes\n      F2    F2'   No\n      F3    F3'   No\n      F4    F4'   Yes\n\n    Considering how compilers & linkers (in general) work, chances are very high\n    that functions F2 and F3 correspond to F2' and F3', so we try to find those\n    functions that should correspond to the gap between unmatched functions and\n    then brute force these subsets when they have a maximum hardcoded number of\n    MAX_FUNCTIONS_PER_GAP. We don't consider bigger gaps. For now.\n    \"\"\"\n    heur = \"Local affinity\"\n    enabled = self.call_hook(\"on_special_heuristic\", True, [heur, iteration])\n    if not enabled:\n      return\n\n    self.cleanup_matches()\n    log_refresh(\"Finding locally affine functions\")\n\n    tmp_matches = list(self.all_matches[\"best\"])\n    tmp_matches.extend(list(self.all_matches[\"partial\"]))\n    tmp_matches = sorted(tmp_matches, key=lambda x: [int(x[0]), int(x[2])])\n\n    size = len(tmp_matches)\n    for i, match in enumerate(tmp_matches):\n      if i == 0 or i == size:\n        continue\n\n      prev = tmp_matches[i - 1]\n      prev_ea1 = prev[0]\n      prev_ea2 = prev[2]\n      curr_ea1 = match[0]\n      curr_ea2 = match[2]\n\n      area1 = [prev_ea1, curr_ea1]\n      area2 = [prev_ea2, curr_ea2]\n      self.find_functions_between(area1, area2)\n\n  def find_related_constants(self, main_row, diff_row):\n    \"\"\"\n    Try to find matches finding cross references to constants from functions \n    that we already matched with a good ratio.\n    \"\"\"\n    heur = \"Same constants related matches\"\n    cur = self.db_cursor()\n    try:\n      main_consts = set(json.loads(main_row[\"constants\"]))\n      diff_consts = set(json.loads(diff_row[\"constants\"]))\n      \n      inter_consts = main_consts.intersection(diff_consts)\n      if len(inter_consts) > 0:\n        sql = (\n          \"\"\" select \"\"\"\n          + get_query_fields(heur)\n          + \"\"\"\n         from main.functions f,\n              diff.functions df,\n              main.constants mc,\n              diff.constants dc\n        where f.id = mc.func_id\n          and df.id = dc.func_id\n          and dc.constant = mc.constant\n          and mc.constant = ?\n          and abs(mc.constant) == 0 \"\"\"\n        )\n        for constant in inter_consts:\n          cur.execute(sql, (str(constant),))\n          self.add_matches_internal(cur, best=\"best\", partial=\"partial\")\n    finally:\n      cur.close()\n\n  def find_related_compilation_unit(self, iteration):\n    \"\"\"\n    Try to find new matches in potential, or existing, compilation units\n\n    The idea is the following: after we have a number of good matches, we find\n    the boundaries of the compilation units and the matched functions. If we've,\n    for example, a CU for binary A, no CU information for binary B, *BUT* we've\n    at least 2 matches from a single CU in binary A to 2 functions in binary B,\n    we can determine that everything between the matched functions in binary B\n    belong to the CU that we know about in binary A, therefore, we can try one\n    brute force approach of all functions in the CU from A to the functions in B\n    in that specific area.\n    \"\"\"\n    heur = \"Related compilation unit\"\n    enabled = self.call_hook(\"on_special_heuristic\", True, [heur, iteration])\n    if not enabled:\n      return\n\n    self.cleanup_matches()\n    log_refresh(f\"Finding with heuristic '{heur}'\")\n\n    l = self.get_sorted_results(\"best\")\n    l.extend(self.get_sorted_results(\"partial\"))\n\n    sql = \"\"\"SELECT distinct cus.id cu_id, cus.name cu_name, cus.start_ea start_ea, cus.end_ea end_ea\n               FROM {db}.compilation_unit_functions cuf,\n                    {db}.compilation_units cus,\n                    {db}.functions f\n              WHERE f.id = cuf.func_id\n                AND cus.id = cuf.cu_id\n                AND f.name = ?\"\"\"\n    sql_main = sql.replace(\"{db}\", \"main\")\n    sql_diff = sql.replace(\"{db}\", \"diff\")\n\n    sql = f\"\"\"select \"\"\" + get_query_fields(heur) + \"\"\"\n               from functions f,\n                    diff.functions df\n              where cast(f.address as real)  between ? and ?\n                and cast(df.address as real) between ? and ? \"\"\"\n\n    cur = self.db_cursor()\n    try:\n      for match in l:\n        ratio = match[5]\n        if ratio < config.RELATED_MATCHES_MIN_RATIO:\n          break\n\n        name1 = match[1]\n        name2 = match[3]\n        cur.execute(sql_main, (name1,))\n        main_row = cur.fetchone()\n\n        cur.execute(sql_diff, (name2,))\n        diff_row = cur.fetchone()\n\n        if main_row is None or diff_row is None:\n          continue\n\n        main_start_ea = float(main_row[\"start_ea\"])\n        main_end_ea   = float(main_row[\"start_ea\"])\n        diff_start_ea = float(diff_row[\"start_ea\"])\n        diff_end_ea   = float(diff_row[\"start_ea\"])\n        cur.execute(sql, (main_start_ea, main_end_ea, diff_start_ea, diff_end_ea))\n        self.add_matches_internal(cur, \"best\", \"partial\")\n    finally:\n      cur.close()\n\n  def find_related_matches(self, iteration):\n    \"\"\"\n    Find matches from previous good matches using a number of heuristics.\n    \"\"\"\n    heur = \"Same constants related matches\"\n    enabled = self.call_hook(\"on_special_heuristic\", True, [heur, iteration])\n    if not enabled:\n      return\n\n    self.cleanup_matches()\n\n    log_refresh(f\"Finding with heuristic '{heur}'\")\n    dones = set()\n\n    for key in [\"best\", \"partial\"]:\n      l = self.get_sorted_results(key)\n      for match in l:\n        match_key = f\"{match[1]}-{match[3]}\"\n        if match_key in dones:\n          continue\n        dones.add(match_key)\n\n        ratio = match[5]\n        if ratio < config.RELATED_MATCHES_MIN_RATIO:\n          break\n\n        item = self.itemize_for_chooser(match)\n        main_row, diff_row = self.get_row_for_items(item)\n        if main_row is None or diff_row is None:\n          continue\n\n        if main_row[\"constants_count\"] > 0 and diff_row[\"constants_count\"] > 0:\n          self.find_related_constants(main_row, diff_row)\n\n  def get_model_ratio(self, main_d, diff_d):\n    SELECT_FIELDS = \"\"\"f.name name1,\n       f.nodes nodes1,\n       f.edges edges1,\n       f.indegree indegree1,\n       f.outdegree outdegree1,\n       f.cyclomatic_complexity cc1,\n       f.primes_value primes_value1,\n       f.clean_pseudo clean_pseudo1,\n       f.pseudocode_primes pseudocode_primes1,\n       f.strongly_connected strongly_connected1,\n       f.strongly_connected_spp strongly_connected_spp1,\n       f.loops loops1,\n       f.constants constants1,\n       f.source_file source_file1,\n       df.name name2,\n       df.nodes nodes2,\n       df.edges edges2,\n       df.indegree indegree2,\n       df.outdegree outdegree2,\n       df.cyclomatic_complexity cc2,\n       df.primes_value primes_value2,\n       df.clean_pseudo clean_pseudo2,\n       df.pseudocode_primes pseudocode_primes2,\n       df.strongly_connected strongly_connected2,\n       df.strongly_connected_spp strongly_connected_spp2,\n       df.loops loops2,\n       df.constants constants2,\n       df.source_file source_file2,\n       f.id id1,\n       df.id id2,\n       f.address ea1,\n       df.address ea2 \"\"\"\n    \n    sql = f\"\"\"select {SELECT_FIELDS}\n                from main.functions f,\n                     diff.functions df\n               where f.address = ?\n                 and df.address = ? \"\"\"\n    cur = self.db_cursor()\n\n    ret = 0\n    try:\n      cur.execute(sql, (main_d[\"ea\"], diff_d[\"ea\"]))\n      row = cur.fetchone()\n      d = dict(row)\n      cmp_data = get_model_comparison_data(dict(row), self.is_same_processor)\n      ret = self.classifier.predict(cmp_data)[0]\n      if ret == 1:\n        debug_refresh(f\"ML model predicted {ret} for {main_d['name']} {diff_d['name']}\")\n    finally:\n      cur.close()\n\n    return ret\n\n  def apply_machine_learning(self):\n    if ML_AVAILABLE and self.use_trained_model:\n      import joblib\n      self.classifier = joblib.load(config.ML_TRAINED_MODEL)\n      log(f\"Using ML classifier {self.classifier}\")\n\n  def get_callers_callees(self, db_name, func_id):\n    cur = self.db_cursor()\n    rows = []\n    try:\n      sql = \"select * from {db}.callgraph where func_id = ?\"\n      cur.execute(sql.format(db=db_name), (func_id,))\n      rows = list(cur.fetchall())\n    finally:\n      cur.close()\n    return rows\n\n  def diff(self, db):\n    \"\"\"\n    Diff the current two databases (main and diff).\n    \"\"\"\n    self.ratios_cache = {}\n    self.last_diff_db = db\n    cur = self.db_cursor()\n    self.try_attach(cur, db)\n\n    try:\n      cur.execute(\"select value from diff.version\")\n    except:\n      log(f\"Error: {sys.exc_info()[1]}\")\n      log(\"The selected file does not look like a valid Diaphora exported database!\")\n      cur.close()\n      return False\n\n    row = cur.fetchone()\n    if not row:\n      log(\"Invalid database!\")\n      return False\n\n    if row[\"value\"] != VERSION_VALUE:\n      log(f\"WARNING: The database is from a different version (current {VERSION_VALUE}, database {row[0]})!\")\n\n    try:\n      t0 = time.monotonic()\n      cur_thread = threading.current_thread()\n      cur_thread.timeout = False\n      log_refresh(\"Diffing...\", True)\n\n      self.do_continue = True\n      if self.equal_db():\n        log(\"The databases seems to be 100% equal\")\n\n      if self.do_continue:\n        # Compare the call graphs\n        self.check_callgraph()\n\n        if self.project_script is not None:\n          log(\"Loading project specific Python script...\")\n          if not self.load_hooks():\n            return False\n\n        # Find the unmodified functions\n        log_refresh(\"Finding equal matches...\")\n        self.find_equal_matches()\n\n        skip_others = False\n        self.is_same_processor = self.same_processor_both_databases()\n        if self.experimental:\n          # Dirty magic. Might or might not work...\n          log_refresh(\"Checking 'dirty' heuristics...\")\n          skip_others = self.apply_dirty_heuristics()\n\n        if not self.ignore_all_names:\n          self.find_same_name(\"partial\")\n\n        if skip_others:\n          self.find_remaining_functions()\n        else:\n          log_refresh(\"Finding best matches...\")\n          self.run_heuristics_for_category(\"Best\")\n\n          # Find the modified functions\n          log_refresh(\"Finding partial matches\")\n          self.find_partial_matches()\n\n          self.apply_machine_learning()\n\n          if self.unreliable:\n            # Find using likely unreliable methods modified functions\n            log_refresh(\"Finding probably unreliable matches\")\n            self.find_unreliable_matches()\n\n            #\n            # Find using experimental methods modified functions.\n            #\n            # NOTES: While these are still called experimental, they aren't really\n            # that experimental, as most of the code but the brute forcing using\n            # compilation units has been tested since years ago.\n            #\n            log_refresh(\"Finding experimental matches\")\n            self.find_experimental_matches()\n\n          iteration = 0\n          while 1:\n            self.cleanup_matches()\n            old_total = self.get_total_matched_functions()\n\n            # Find new matches by diffing assembly and pseudo-code of previously\n            # found matches\n            self.find_matches_diffing(iteration)\n\n            if self.slow_heuristics:\n              # Find new matches by digging from previous very good matches\n              self.find_related_matches(iteration)\n\n            self.find_related_compilation_unit(iteration)\n\n            # Find new matches in the functions between matches\n            self.find_locally_affine_functions(iteration)\n\n            self.cleanup_matches()\n            new_total = self.get_total_matched_functions()\n            if new_total <= old_total:\n              break\n            iteration += 1\n\n        self.final_pass()\n\n        # Show the list of unmatched functions in both databases\n        log_refresh(\"Finding unmatched functions\")\n        self.find_unmatched()\n        self.call_hook(\"on_finish\", None, [])\n\n        best = len(self.best_chooser.items)\n        partial = len(self.partial_chooser.items)\n        unreliable = len(self.unreliable_chooser.items)\n        multi = len(self.multimatch_chooser.items)\n        total = best + partial + unreliable\n        percent = ((best + partial + unreliable) * 100) / self.total_functions1\n        log(\n          f\"Final results: Best {best}, Partial {partial}, Unreliable {unreliable}, Multimatches {multi}\"\n        )\n\n        # pylint: disable-next=consider-using-f-string\n        message = \"Matched %1.2f%% of main binary functions (%d out of %d)\" % (percent, total, self.total_functions1)\n        log(message)\n\n        final_t = time.monotonic() - t0\n        log(f\"Done, time taken: {datetime.timedelta(seconds=final_t)}.\")\n    finally:\n      cur.close()\n    return True\n\n\nif __name__ == \"__main__\":\n  version_info = sys.version_info\n  if version_info[0] == 2:\n    log(\n      \"WARNING: You are using Python 2 instead of Python 3. The main branch of Diaphora works exclusively with Python 3.\"\n    )\n    log(\n      \"TIP: There is a fork that contains backward compatibility, check the github's page.\"\n    )\n\n  do_diff = True\n  debug_refresh(f'DIAPHORA_AUTO_DIFF={os.getenv(\"DIAPHORA_AUTO_DIFF\")}')\n  debug_refresh(f'DIAPHORA_DB1={os.getenv(\"DIAPHORA_DB1\")}')\n  debug_refresh(f'DIAPHORA_DB2={os.getenv(\"DIAPHORA_DB2\")}')\n  debug_refresh(f'DIAPHORA_DIFF_OUT={os.getenv(\"DIAPHORA_DIFF_OUT\")}')\n  if os.getenv(\"DIAPHORA_AUTO_DIFF\") is not None:\n    db1 = os.getenv(\"DIAPHORA_DB1\")\n    if db1 is None:\n      raise Exception(\"No database file specified!\")\n\n    db2 = os.getenv(\"DIAPHORA_DB2\")\n    if db2 is None:\n      raise Exception(\"No database file to diff against specified!\")\n\n    diff_out = os.getenv(\"DIAPHORA_DIFF_OUT\")\n    if diff_out is None:\n      raise Exception(\"No output file for diff specified!\")\n  elif IS_IDA:\n    diaphora_dir = os.path.dirname(__file__)\n    script = os.path.join(diaphora_dir, \"diaphora_ida.py\")\n    buf = None\n    with open(script, \"rb\") as f:\n      buf = f.read()\n\n    # pylint: disable-next=exec-used\n    exec(compile(buf, script, \"exec\"))\n    do_diff = False\n  else:\n    import argparse\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"db1\")\n    parser.add_argument(\"db2\")\n    parser.add_argument(\"-o\", \"--outfile\", help=\"Write output to <outfile>\")\n    args = parser.parse_args()\n    db1 = args.db1\n    db2 = args.db2\n    if args.outfile:\n      diff_out = args.outfile\n    else:\n      path1 = os.path.basename(os.path.splitext(db1)[0])\n      path2 = os.path.basename(os.path.splitext(db2)[0])\n      diff_out = f\"{path1}_vs_{path2}.diaphora\"\n\n  if do_diff:\n    bd = CBinDiff(db1)\n    if not IS_IDA:\n      bd.ignore_all_names = False\n\n    bd.db = sqlite3_connect(db1)\n    if os.getenv(\"DIAPHORA_PROFILE\") is not None:\n      log(\"*** Profiling ***\")\n      import cProfile\n\n      profiler = cProfile.Profile()\n      profiler.runcall(bd.diff, db2)\n      exported = True\n      profiler.print_stats(sort=\"tottime\")\n    else:\n      bd.diff(db2)\n    bd.save_results(diff_out)\n"
        },
        {
          "name": "diaphora_config.py",
          "type": "blob",
          "size": 9.78125,
          "content": "\"\"\"\nBehold, Diaphora 3.X configuration options ahead!\n\nNOTES: This configuration file is a normal python script, therefore, you're free\nto add your own code here.\n\"\"\"\n\n################################################################################\n# Imports required by the configuration file\nimport os\n\nCONFIGURATION_FILE_PATH = os.path.realpath(__file__)\nCONFIGURATION_DIRECTORY = os.path.dirname(CONFIGURATION_FILE_PATH)\n\n################################################################################\n# Default colors related options\n\n# Colors for the call graph viewer nodes.\n# NOTE: Colors are specified in the format 0xBGR instead of RGB.\nCALLGRAPH_COLOR_TARGET = 0xEEFF00\nCALLGRAPH_COLOR_CALLER = 0xFFFFFF\nCALLGRAPH_COLOR_CALLEE = 0xFFFFFF\n\n# Colors for displaying differences.\n# NOTE: Colors in this case are in the format \"#RGB\" because they are used for\n# the CSS.\nDIFF_COLOR_ADDED      = \"#aaffaa\"\nDIFF_COLOR_CHANGED    = \"#ffff77\"\nDIFF_COLOR_SUBTRACTED = \"#ffaaaa\"\nDIFF_COLOR_LINE_NO    = \"#e0e0e0\"\n\n# Colors for highlighting functions when the appropriate popup menu option is\n# selected, in 0xBGR format.\nHIGHLIGHT_FUNCTION_BEST       = 0xffff99\nHIGHLIGHT_FUNCTION_PARTIAL    = 0x99ff99\nHIGHLIGHT_FUNCTION_UNRELIABLE = 0x9999ff\n\n# Colors for displaying control flow graph differences, in 0xBGR format.\nGRAPH_BBLOCK_MATCH_PARTIAL = 0xCCFFFF\nGRAPH_BBLOCK_MATCH_PERFECT = 0xFFFFFF\nGRAPH_BBLOCK_MATCH_NONE    = 0xCCCCFF\n\n################################################################################\n# Default export & diffing options\n\nDIFFING_ENABLE_UNRELIABLE = False\nDIFFING_ENABLE_RELAXED_RATIO = False\nDIFFING_ENABLE_EXPERIMENTAL = True\nDIFFING_ENABLE_SLOW_HEURISTICS = True\nDIFFING_IGNORE_SUB_FUNCTION_NAMES = True\nDIFFING_IGNORE_ALL_FUNCTION_NAMES = False\nDIFFING_IGNORE_SMALL_FUNCTIONS = False\n\nEXPORTING_USE_DECOMPILER = True\nEXPORTING_EXCLUDE_LIBRARY_THUNK = True\nEXPORTING_ONLY_NON_IDA_SUBS = True\nEXPORTING_FUNCTION_SUMMARIES_ONLY = False\nEXPORTING_USE_MICROCODE = True\n\n# Number of rows that must be inserted to commit the transaction\nEXPORTING_FUNCTIONS_TO_COMMIT = 5000\n\n# Every time the GUI export dialog is updated a commit is issued. This is useful\n# whenever we are facing long export times with known IDA bugs that might cause\n# it to fail at an unknown moment and we want to recover from errors. You might\n# want to set it to False if you're finding small little performance wins.\nCOMMIT_AFTER_EACH_GUI_UPDATE = True\n\n# The minimum number of functions in a database to, by default, disable running\n# slow queries.\nMIN_FUNCTIONS_TO_DISABLE_SLOW = 4001\n# The minimum number of functions to consider it of medium size and disable, for\n# example, exporting microcode.\nMIN_FUNCTIONS_TO_CONSIDER_MEDIUM = 8001\n# The minimum number of functions to consider it of huge size and recommend not\n# exporting everything.\nMIN_FUNCTIONS_TO_CONSIDER_HUGE = 100000\n\n# Block size to use to generate fuzzy hashes for pseudo-codes with DeepToad\nFUZZY_HASHING_BLOCK_SIZE = 512\n\n# Use it to disable finding compilation units. In some rare cases, there are too\n# many compilation units and Diaphora might take very long to find them.\nEXPORTING_COMPILATION_UNITS = True\n\n################################################################################\n# Default SQL and SQLite related configuration options\n\n# Diaphora won't process more than the given value of rows (per heuristic)\nSQL_MAX_PROCESSED_ROWS = 1000000\n# SQL queries will timeout after the given number of seconds\nSQL_TIMEOUT_LIMIT = 60 * 5\n# Set this to DELETE, TRUNCATE, PERSIST, MEMORY, WAL, OFF, or None to use the\n# default value.\nSQLITE_JOURNAL_MODE = \"MEMORY\"\n# Set this to 0/OFF,  1/NORMAL,  2/FULL, 3/EXTRA, or None to use the default\n# value.\nSQLITE_PRAGMA_SYNCHRONOUS = \"1\"\n\n################################################################################\n# Heuristics related configuration options\n\n# This is a value that we add when we found a match by diffing previous known\n# good matches assembly and pseudocode. The problem is that 2 functions can have\n# the same assembly or pseudo-code but be different functions. However, as we're\n# getting the match from previously known good matches, even if our internal\n# function to calculate similarity gives out the same ratio, we know for a fact\n# that the match found by diffing matches is *the* match. To prevent such little\n# problems, we just add this value to the calculated ratio and that's about it.\n#\n# Update: Initially, it was only used for matches found by diffing previous good\n# known matches. However, it's also used now for matches where the function name\n# is the same for both because, believe it or not, there can be another function\n# with the very same pseudo-code or assembly, but a different name, but that is\n# not the true match, because the true match is the one with that function name.\nMATCHES_BONUS_RATIO = 0.01\n\n# Number of decimal digits to use for calculations and displaying ratios in the\n# choosers.\nDECIMAL_VALUES = \"7f\"\n\n# The maximum number of functions that could be in a gap of unmatched functions\n# for the \"Local Affinity\" heuristic to be launched.\nMAX_FUNCTIONS_PER_GAP = 100\n\n# The default SQL's WHERE clause postfix used to determine when a function is\n# small.\nSQL_DEFAULT_POSTFIX = \" and f.instructions > 5 and df.instructions > 5 \"\n\n# Used as a speed up when \"relaxed ratio calculations\" is enabled, to consider\n# structurally equal two functions with the same MD-Index if its value is bigger\n# than the specified value.\nMINIMUM_RARE_MD_INDEX = 10.0\n\n# The minimum ratio needed to assign some heuristics to the partial matches tab\n# instead of dropping the result or putting it in the unreliable matches tab.\nDEFAULT_PARTIAL_RATIO = 0.5\n\n# Some heuristics generates much less false positives, if at all, therefore we\n# can relax the minimum ratio needed to consider a match good or bad.\nDEFAULT_TRUSTED_PARTIAL_RATIO = 0.3\n\n# Every single constant that is matched for a functions pair adds a small value\n# to the total generated ratio. A little hack here is that for different cpu\n# targets, if we increase the ratio a little, it will match better multiple\n# functions that were missed before (or generated a too low ratio).\nINCREASE_RATIO_PER_CONSTANT_MATCH_SAME_CPU = 0.006\nINCREASE_RATIO_PER_CONSTANT_MATCH = 0.008\n\n# Regular expressions used to clean-up the pseudo-code and assembly dumps in\n# order to get better comparison ratios.\nCLEANING_CMP_REPS = [\"loc_\", \"j_nullsub_\", \"nullsub_\", \"j_sub_\", \"sub_\",\n  \"qword_\", \"dword_\", \"byte_\", \"word_\", \"off_\", \"def_\", \"unk_\", \"asc_\",\n  \"stru_\", \"dbl_\", \"locret_\", \"flt_\", \"jpt_\"]\nCLEANING_CMP_REMS = [\"dword ptr \", \"byte ptr \", \"word ptr \", \"qword ptr \", \"short ptr\"]\n\n# When diffing the same binary with just symbol names stripped, usually around\n# 99% of the functions are matched by address. This value indicates what is that\n# percent that Diaphora will use to enable this speed up.\nSPEEDUP_STRIPPED_BINARIES_MIN_PERCENT = 99.0\n\n# There are some easy methods to speed up diffing when both databases have names\n# (symbols), specially when almost the whole binary matches. This value is used\n# to determine what is the minimum percent of matched functions to enable this\n# speed up.\nSPEEDUP_PATCH_DIFF_SYMBOLS_MIN_PERCENT = 90.0\n\n# Sometimes functions are just renamed but they are still in the binary, thus,\n# the patch diffing speed up could miss such changes. This is the minimum ratio\n# used to compare functions that differ in names and were not matched previously\n# by function name.\nSPEEDUP_PATCH_DIFF_RENAMED_FUNCTION_MIN_RATIO = 0.6\n\n# If the number of basic blocks differ in more than 75% we should ignore that \n# match that was discovered by diffing the assembly or pseudo-code of previous\n# matches. This value is a percent, not the number of different basic blocks.\nDIFFING_MATCHES_MAX_DIFFERENT_BBLOCKS_PERCENT = 25\n\n# Small functions cause a lot of false positives and different heuristics are\n# differently affected by what is a small function. This value configures the \n# minimum number of basic blocks a function must have for the heuristic that\n# finds new matches by diffing previous matches to consider or drop this match.\nDIFFING_MATCHES_MIN_BBLOCKS = 3\n\n# Run default scripts?\nRUN_DEFAULT_SCRIPTS = True\n\n# Where is the default patch diffing script?\nDEFAULT_SCRIPT_PATCH_DIFF = os.path.join(CONFIGURATION_DIRECTORY, \"scripts/patch_diff_vulns.py\")\n\n# When finding new matches in (potential) compilation units by diffing previous\n# results, which is the minimum similarity ratio that we must get in order to\n# consider a functions pair match good.\nRELATED_MATCHES_MIN_RATIO = 0.8\n\n# Multiple heuristics are launched in parallel in different threads. Threads are\n# joined for a fraction of seconds to wait for them to finish after each \n# iteration in a thread. This value indicates the number of seconds to join. It\n# basically translates to this: thread.join(THREADS_WAIT_TIME).\nTHREADS_WAIT_TIME = 1\n\n\n#-------------------------------------------------------------------------------\n# Diaphora can use a local mode, enable this configuration directive to use it.\nML_USE_TRAINED_MODEL = True\n# Model trained with a decision tree classifier: fast and accurate enough\nML_TRAINED_MODEL = os.path.join(CONFIGURATION_DIRECTORY, \"ml/diaphora-amalgamation-model.pkl\")\n# The value added to the similarity ratio for a positive match using the model.\nML_TRAINED_MODEL_MATCH_SCORE = 0.15\n\n# Show a chooser with all the matches that the classifier think are good ones?\nML_DEBUG_SHOW_MATCHES = True\n\n#-------------------------------------------------------------------------------\n# Some imports improve performance or add features to Diaphora but aren't 100%\n# required. Diaphora will warn the reverser when these libraries failed to be\n# imported. Change this directive to shutup this warning.\nSHOW_IMPORT_WARNINGS = True\n\n#-------------------------------------------------------------------------------\n# Workarounds for IDA bugs\nDIAPHORA_WORKAROUND_MAX_TINFO_T = False\n"
        },
        {
          "name": "diaphora_heuristics.py",
          "type": "blob",
          "size": 39.8837890625,
          "content": "#!/usr/bin/python3\n\n\"\"\"\nDiaphora, a diffing plugin for IDA\nCopyright (c) 2015-2024, Joxean Koret\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n\"\"\"\n\n#-------------------------------------------------------------------------------\n# Only used for the internal tests\nimport pprint\nfrom collections import Counter\n\n#-------------------------------------------------------------------------------\n# Use only for heuristics generating 1.0 ratios, results without false positives\nHEUR_TYPE_NO_FPS = 0\n\n# Use it for most heuristics; it will assign 1.0 ratios to the best chooser,\n# values between 0.5 and <1.0 to the specific partial chooser and <0.5 results\n# to the unreliable chooser, if specified.\nHEUR_TYPE_RATIO = 1\n\n# Similar as before, but partial results are only assigned for matches with a\n# min specified ratio.\nHEUR_TYPE_RATIO_MAX = 2\n\n# Similar as before, but 'unreliable' results are not unreliable, thus, they go\n# to the 'partial' tab instead.\nHEUR_TYPE_RATIO_MAX_TRUSTED = 3\n\n#-------------------------------------------------------------------------------\nHEUR_FLAG_NONE        = 0\nHEUR_FLAG_UNRELIABLE  = 1\nHEUR_FLAG_SLOW        = 2\n# The heuristic should only be launched when diffing the same architecture\nHEUR_FLAG_SAME_CPU    = 3\n\n#-------------------------------------------------------------------------------\nSELECT_FIELDS = \"\"\" f.address ea, f.name name1, df.address ea2, df.name name2,\n                  {heur} description,\n                  f.pseudocode pseudo1, df.pseudocode pseudo2,\n                  f.assembly asm1, df.assembly asm2,\n                  f.pseudocode_primes pseudo_primes1, df.pseudocode_primes pseudo_primes2,\n                  f.nodes nodes1, df.nodes nodes2,\n                  cast(f.md_index as real) md1, cast(df.md_index as real) md2,\n                  f.clean_assembly clean_assembly1, df.clean_assembly clean_assembly2,\n                  f.clean_pseudo clean_pseudo1, df.clean_pseudo clean_pseudo2,\n                  f.mangled_function mangled1, df.mangled_function mangled2,\n                  f.clean_microcode clean_micro1, df.clean_microcode clean_micro2,\n                  f.bytes_hash bytes_hash1, df.bytes_hash bytes_hash2,\n                  f.edges edges1, df.edges edges2,\n                  f.indegree indegree1, df.indegree indegree2,\n                  f.outdegree outdegree1, df.outdegree outdegree2,\n                  f.instructions instructions1, df.instructions instructions2,\n                  f.cyclomatic_complexity cc1, df.cyclomatic_complexity cc2,\n                  f.strongly_connected strongly_connected1,\n                  df.strongly_connected strongly_connected2,\n                  f.loops loops1, df.loops loops2,\n                  f.constants_count constants_count1,\n                  df.constants_count constants_count2,\n                  f.size size1, df.size size2,\n                  f.kgh_hash kgh_hash1, df.kgh_hash kgh_hash2\n\"\"\"\ndef get_query_fields(heur, quote=True):\n  \"\"\"\n  Get the list of fields used in any and all SQL heuristics queries.\n  \"\"\"\n  val = heur\n  if quote:\n    val = repr(val)\n  ret = SELECT_FIELDS.format(heur=val)\n  return ret\n\n#-------------------------------------------------------------------------------\nHEURISTICS = []\n\nNAME = \"Same RVA and hash\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Best\",\n  \"ratio\":HEUR_TYPE_NO_FPS,\n  \"sql\":\"\"\" select \"\"\" + get_query_fields(NAME) + \"\"\"\n              from functions f,\n                   diff.functions df\n             where (df.rva = f.rva\n                 or df.segment_rva = f.segment_rva)\n               and df.bytes_hash = f.bytes_hash\n               and df.instructions = f.instructions\n               and ((f.name = df.name and substr(f.name, 1, 4) != 'sub_')\n                 or (substr(f.name, 1, 4) = 'sub_' or substr(df.name, 1, 4) = 'sub_'))\n               and f.nodes >= 3\n               and df.nodes >= 3\n               %POSTFIX%\"\"\",\n  \"flags\":[HEUR_FLAG_SAME_CPU]\n})\n\nNAME = \"Same order and hash\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Best\",\n  \"ratio\":HEUR_TYPE_NO_FPS,\n  \"sql\":\"\"\" select \"\"\" + get_query_fields(NAME) + \"\"\"\n              from functions f,\n                   diff.functions df\n             where df.id = f.id\n               and df.bytes_hash = f.bytes_hash\n               and df.instructions = f.instructions\n               and ((f.name = df.name and substr(f.name, 1, 4) != 'sub_')\n                 or (substr(f.name, 1, 4) = 'sub_' or substr(df.name, 1, 4) = 'sub_'))\n               and ((f.nodes > 1 and df.nodes > 1\n                 and f.instructions > 5 and df.instructions > 5)\n                  or f.instructions > 10 and df.instructions > 10)\n               %POSTFIX%\"\"\",\n  \"flags\":[HEUR_FLAG_SAME_CPU]\n})\n\nNAME = \"Function Hash\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Best\",\n  \"ratio\":HEUR_TYPE_NO_FPS,\n  \"sql\":\"\"\" select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n              from functions f,\n                   diff.functions df\n             where f.function_hash = df.function_hash \n               and ((f.nodes > 1 and df.nodes > 1\n                 and f.instructions > 5 and df.instructions > 5)\n                  or f.instructions > 10 and df.instructions > 10)\n               %POSTFIX%\"\"\",\n  \"flags\":[HEUR_FLAG_SAME_CPU]\n})\n\nNAME = \"Bytes hash\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Best\",\n  \"ratio\":HEUR_TYPE_NO_FPS,\n  \"sql\":\"\"\" select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n              from functions f,\n                   diff.functions df\n             where f.bytes_hash = df.bytes_hash\n               and f.instructions > 5 and df.instructions > 5\n               %POSTFIX%\"\"\",\n  \"flags\":[HEUR_FLAG_SAME_CPU]\n})\n\nNAME = \"Same address and mnemonics\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Best\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\" select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n              from functions f,\n                   diff.functions df\n             where df.address = f.address\n               and df.mnemonics = f.mnemonics\n               and df.instructions = f.instructions\n               and df.instructions > 5\n               and ((f.name = df.name and substr(f.name, 1, 4) != 'sub_')\n                 or (substr(f.name, 1, 4) = 'sub_' or substr(df.name, 1, 4) = 'sub_'))\n               %POSTFIX%\n             order by f.source_file = df.source_file\"\"\",\n  \"flags\":[]\n})\n\nNAME = \"Same cleaned assembly\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Best\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\" select \"\"\" + get_query_fields(NAME) + \"\"\"\n        from functions f,\n             diff.functions df\n       where f.clean_assembly = df.clean_assembly\n         and f.nodes >= 3 and df.nodes >= 3\n         and f.name not like 'nullsub%'\n         and df.name not like 'nullsub%'\n         %POSTFIX%\n       order by f.source_file = df.source_file\"\"\",\n  \"flags\":[HEUR_FLAG_SAME_CPU]\n})\n\nNAME = \"Same cleaned microcode\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Best\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\" select \"\"\" + get_query_fields(NAME) + \"\"\"\n        from functions f,\n             diff.functions df\n       where f.clean_microcode = df.clean_microcode\n         and f.instructions > 3 and df.instructions > 3\n         and f.name not like 'nullsub%'\n         and df.name not like 'nullsub%'\n         %POSTFIX%\n       order by f.source_file = df.source_file\"\"\",\n  \"flags\":[HEUR_FLAG_SAME_CPU]\n})\n\nNAME = \"Same cleaned pseudo-code\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Best\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\" select \"\"\" + get_query_fields(NAME) + \"\"\"\n        from functions f,\n             diff.functions df\n       where f.clean_pseudo = df.clean_pseudo\n         and f.pseudocode_lines > 5 and df.pseudocode_lines > 5\n         and f.name not like 'nullsub%'\n         and df.name not like 'nullsub%'\n         %POSTFIX%\n       order by f.source_file = df.source_file\"\"\",\n  \"flags\":[]\n})\n\nNAME = \"Same address, nodes, edges and mnemonics\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Best\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\"select \"\"\" + get_query_fields(NAME) + \"\"\"\n       from functions f,\n            diff.functions df\n      where f.rva = df.rva\n        and f.instructions = df.instructions\n        and f.nodes = df.nodes\n        and f.edges = df.edges\n        and f.mnemonics = df.mnemonics\n        and f.instructions > 3\n        and df.instructions > 3\n        and f.nodes > 1\n        %POSTFIX%\n      order by f.source_file = df.source_file\"\"\",\n  \"flags\":[]\n})\n\nNAME = \"Same RVA\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Best\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\" select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n              from functions f,\n                   diff.functions df\n             where df.rva = f.rva\n               and ((f.name = df.name and substr(f.name, 1, 4) != 'sub_')\n                or (substr(f.name, 1, 4) = 'sub_' or substr(df.name, 1, 4) = 'sub_'))\n               and  f.nodes >= 3\n               and df.nodes >= 3\n               %POSTFIX%\n             order by f.source_file = df.source_file\"\"\",\n  \"min\":0.7,\n  \"flags\":[HEUR_FLAG_SAME_CPU]\n})\n\n#\n# Seems not to find anything?\n#\nNAME = \"Equal assembly or pseudo-code\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Best\",\n  \"ratio\":HEUR_TYPE_NO_FPS,\n  \"sql\":\"\"\"select \"\"\" + get_query_fields(\"Equal pseudo-code\") + \"\"\"\n       from functions f,\n            diff.functions df\n      where f.pseudocode = df.pseudocode\n        and df.pseudocode is not null\n        and f.pseudocode_lines >= 5\n        and f.name not like 'nullsub%'\n        and df.name not like 'nullsub%'\n        %POSTFIX%\n      union\n     select \"\"\" + get_query_fields(\"Equal assembly\") + \"\"\"\n       from functions f,\n            diff.functions df\n      where f.assembly = df.assembly\n        and df.assembly is not null\n        and f.instructions >= 4 and df.instructions >= 4\n        and f.name not like 'nullsub%'\n        and df.name not like 'nullsub%'\n        %POSTFIX% \"\"\",\n  \"flags\":[]\n})\n\nNAME = \"Microcode mnemonics small primes product\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Best\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\" select \"\"\" + get_query_fields(NAME) + \"\"\"\n        from functions f,\n             diff.functions df\n       where f.microcode_spp = df.microcode_spp\n         and f.microcode_spp != 1\n         and df.microcode_spp != 1\n         and f.instructions > 5 and df.instructions > 5\n         and f.nodes > 2 and df.nodes > 2\n         and f.name not like 'nullsub%'\n         and df.name not like 'nullsub%'\n         %POSTFIX%\n       order by f.source_file = df.source_file\"\"\",\n  \"flags\":[]\n})\n\n# It seems that SQLite is slowly executing this query due to the following:\n#\n#   BLOOM FILTER ON main_cu (id=?)\n#\n# I have seen bugs related to this fixed on February 2023, so I think I'll have\n# to take a look to see if bloom filters can be disabled...\nNAME = \"Same named compilation unit function match\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX_TRUSTED,\n  \"sql\":\"\"\"  select \"\"\" + get_query_fields(NAME) + \"\"\"\n               from main.compilation_units main_cu,\n                    main.compilation_unit_functions mcuf,\n                    main.functions f,\n                    diff.compilation_units diff_cu,\n                    diff.compilation_unit_functions dcuf,\n                    diff.functions df\n              where main_cu.name != ''\n                and diff_cu.name != ''\n                and main_cu.name = diff_cu.name\n                and f.id = mcuf.func_id\n                and df.id = dcuf.func_id\n                and mcuf.cu_id = main_cu.id\n                and dcuf.cu_id = diff_cu.id\n                and df.primes_value = f.primes_value\n                and df.nodes = f.nodes\n                and f.nodes >= 5\n                %POSTFIX% \n                \"\"\",\n  \"min\":0.44,\n  \"flags\":[]\n})\n\nNAME = \"Same anonymous compilation unit function match\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\"  select \"\"\" + get_query_fields(NAME) + \"\"\"\n               from main.compilation_units main_cu,\n                    main.compilation_unit_functions mcuf,\n                    main.functions f,\n                    diff.compilation_units diff_cu,\n                    diff.compilation_unit_functions dcuf,\n                    diff.functions df\n              where main_cu.name != ''\n                and diff_cu.name != ''\n                and main_cu.name = diff_cu.name\n                and f.id = mcuf.func_id\n                and df.id = dcuf.func_id\n                and mcuf.cu_id = main_cu.id\n                and dcuf.cu_id = diff_cu.id\n                and df.pseudocode_primes = f.pseudocode_primes\n                and df.nodes = f.nodes\n                and f.nodes >= 5\n                %POSTFIX% \n              order by f.source_file = df.source_file\"\"\",\n  \"min\":0.449,\n  \"flags\":[]\n})\n\n# An ORDER BY clause would be good to have here, but SQLite may generate huge\n# B-TREEs that might even cause errors after a long time running when dealing\n# with huge databases, therefore, I'm removing it.\n#\n# Also, it seems that a bloom filter is used here too:\n#\n# BLOOM FILTER ON df (id=?)\n#\n# And it might be slowing down our query...\nNAME = \"Same compilation unit\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\"select \"\"\" + get_query_fields(NAME) + \"\"\"\n                from main.compilation_units mcu,\n                  main.compilation_unit_functions mcuf,\n                  main.functions f,\n                  diff.compilation_units dcu,\n                  diff.compilation_unit_functions dcuf,\n                  diff.functions df\n              where dcu.pseudocode_primes = mcu.pseudocode_primes\n                and mcuf.cu_id = mcu.id\n                and dcuf.cu_id = dcu.id\n                and f.id = mcuf.func_id\n                and df.id = dcuf.func_id\n                and f.nodes > 4\n                and df.nodes > 4\n                and (substr(f.name, 1, 4) = 'sub_' or substr(df.name, 1, 4) == 'sub_')\n                %POSTFIX% \"\"\",\n  \"flags\":[HEUR_FLAG_SLOW]\n})\n\n# Adding a DISTINCT and an ORDER BY clause in this query causes SQLite to create\n# huge temporary B-TREEs that, depending on the size of the databases, might end\n# up triggering an error after a long time running.\nNAME = \"Same KOKA hash and constants\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\"select \"\"\" + get_query_fields(NAME) + \"\"\"\n       from main.constants mc,\n            diff.constants dc,\n            main.functions  f,\n            diff.functions df\n      where mc.constant = dc.constant\n        and  f.id = mc.func_id\n        and df.id = dc.func_id\n        and f.kgh_hash = df.kgh_hash\n        and f.nodes >= 3\n        %POSTFIX% \"\"\",\n  \"flags\":[]\n})\n\n# The same explained in the previous query happens here: for huge databases the\n# SQLite engine can generate huge B-TREEs for the ORDER BY clause. Removed it.\nNAME = \"Same KOKA hash and MD-Index\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\"\n     select \"\"\" + get_query_fields(NAME) + \"\"\"\n       from functions f,\n            diff.functions df\n      where f.kgh_hash = df.kgh_hash\n        and f.md_index = df.md_index\n        and f.nodes = df.nodes\n        and f.nodes >= 4\n        and f.outdegree = df.outdegree\n        and f.indegree  = df.indegree\n        and (substr(f.name, 1, 4) = 'sub_' or substr(df.name, 1, 4) = 'sub_')\n        %POSTFIX%\n        \"\"\",\n  \"flags\":[]\n})\n\nNAME = \"Same constants\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\"select \"\"\" + get_query_fields(NAME) + \"\"\"\n       from functions f,\n            diff.functions df\n      where f.constants = df.constants\n        and f.constants_count = df.constants_count\n        and f.constants_count > 1\n        %POSTFIX%\n      order by f.source_file = df.source_file\"\"\",\n  \"min\":0.5,\n  \"flags\":[]\n})\n\n# The ORDER BY clause is removed because it was causing serious slowness problems\n# with big and huge databases.\nNAME = \"Same rare KOKA hash\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\"\nwith shared_hashes as (\n select kgh_hash\n   from diff.functions\n  where kgh_hash != 0\n  group by kgh_hash\n having count(*) <= 2\n  union \n select kgh_hash\n   from main.functions\n  where kgh_hash != 0\n  group by kgh_hash\n having count(*) <= 2\n)\nselect \"\"\" + get_query_fields(NAME) + \"\"\"\n  from functions f,\n       diff.functions df,\n       shared_hashes\n where f.kgh_hash = df.kgh_hash\n   and df.kgh_hash = shared_hashes.kgh_hash\n   and f.nodes > 5\n   and (substr(f.name, 1, 4) = 'sub_'\n     or substr(df.name, 1, 4) = 'sub_')\n   %POSTFIX%\n        \"\"\",\n  \"min\":0.45,\n  \"flags\":[]\n})\n\nNAME = \"Same rare MD Index\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\"\n     with shared_mds as (\n      select md_index\n        from diff.functions\n       where md_index != 0\n       group by md_index\n      having count(*) <= 2\n      union \n      select md_index\n        from main.functions\n       where md_index != 0\n       group by md_index\n      having count(*) <= 2\n     )\n     select \"\"\" + get_query_fields(NAME) + \"\"\"\n       from functions f,\n            diff.functions df,\n            shared_mds\n      where f.md_index = df.md_index\n        and df.md_index = shared_mds.md_index\n        and f.nodes > 10\n        %POSTFIX%\n      order by f.source_file = df.source_file\"\"\",\n  \"flags\":[]\n})\n\n#\n# Seems not find anything???\n#\nNAME = \"Same address and rare constant\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\"select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n       from main.constants mc,\n            diff.constants dc,\n            main.functions  f,\n            diff.functions df\n      where mc.constant = dc.constant\n        and  f.id = mc.func_id\n        and df.id = dc.func_id\n        and df.address = f.address\n        %POSTFIX%\n      order by f.source_file = df.source_file\"\"\",\n  \"min\":0.5,\n  \"flags\":[]\n})\n\n# The DISTINCT and ORDER BY clause have been removed due to slowness problems\nNAME = \"Same rare constant\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\"select \"\"\" + get_query_fields(NAME) + \"\"\"\n       from main.constants mc,\n            diff.constants dc,\n            main.functions  f,\n            diff.functions df\n      where mc.constant = dc.constant\n        and  f.id = mc.func_id\n        and df.id = dc.func_id\n        and f.nodes >= 3 and df.nodes >= 3\n        and f.constants_count > 0\n        %POSTFIX% \"\"\",\n  \"min\":0.2,\n  \"flags\":[HEUR_FLAG_SLOW]\n})\n\nNAME = \"Same MD Index and constants\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\" select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n        from functions f,\n             diff.functions df\n       where f.md_index = df.md_index\n         and f.md_index > 0\n         and f.nodes >= 3 and df.nodes >= 3\n         and ((f.constants = df.constants\n         and f.constants_count > 0))\n        %POSTFIX%\n      order by f.source_file = df.source_file\"\"\",\n  \"flags\":[]\n})\n\nNAME = \"Import names hash\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\"select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n              from functions f,\n                  diff.functions df\n            where f.names = df.names\n              and f.names != '[]'\n              and f.md_index = df.md_index\n              and f.instructions = df.instructions\n              and f.nodes > 5 and df.nodes > 5\n              %POSTFIX%\n            order by f.source_file = df.source_file\"\"\",\n  \"flags\":[]\n})\n\nNAME = \"Mnemonics and names\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\" select \"\"\" + get_query_fields(NAME) + \"\"\"\n        from functions f,\n             diff.functions df\n       where f.mnemonics = df.mnemonics\n         and f.instructions = df.instructions\n         and f.names = df.names\n         and f.names != '[]'\n         and f.instructions > 5 and df.instructions > 5\n         %POSTFIX%\n       order by f.source_file = df.source_file\"\"\",\n  \"flags\":[]\n})\n\nNAME = \"Pseudo-code fuzzy hash\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\"select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n       from functions f,\n            diff.functions df\n      where df.pseudocode_hash1 = f.pseudocode_hash1\n        and df.pseudocode_hash2 = f.pseudocode_hash2\n        and df.pseudocode_hash3 = f.pseudocode_hash3\n        and df.pseudocode_hash1 is not null\n        and df.pseudocode_hash2 is not null\n        and df.pseudocode_hash3 is not null\n        and f.instructions > 5\n        and df.instructions > 5\n        %POSTFIX%\n      order by f.source_file = df.source_file\"\"\",\n  \"flags\":[]\n})\n\nNAME = \"Similar pseudo-code and names\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\"select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n       from functions f,\n            diff.functions df\n      where f.pseudocode_lines = df.pseudocode_lines\n        and f.names = df.names\n        and df.names != '[]'\n        and df.pseudocode_lines > 5\n        and df.pseudocode is not null \n        and f.pseudocode is not null\n        %POSTFIX%\n      order by f.source_file = df.source_file\"\"\",\n  \"min\": 0.579,\n  \"flags\":[]\n})\n\nNAME = \"Mnemonics small-primes-product\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\" select \"\"\" + get_query_fields(NAME) + \"\"\"\n        from functions f,\n             diff.functions df\n       where f.mnemonics_spp = df.mnemonics_spp\n         and f.instructions = df.instructions\n         and f.nodes > 1 and df.nodes > 1\n         and df.instructions > 5\n         %POSTFIX% \"\"\",\n  \"min\":0.6,\n  \"flags\":[]\n})\n\n# The ORDER BY clause is removed because it was causing serious slowness problems\n# with big and huge databases.\nNAME = \"Same nodes, edges, loops and strongly connected components\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\"select \"\"\" + get_query_fields(NAME) + \"\"\"\n       from functions f,\n            diff.functions df\n      where f.nodes = df.nodes\n        and f.edges = df.edges\n        and f.strongly_connected = df.strongly_connected\n        and f.loops = df.loops\n        and f.nodes > 5 and df.nodes > 5\n        and f.loops > 0\n        and (substr(f.name, 1, 4) = 'sub_' or substr(df.name, 1, 4) == 'sub_')\n        %POSTFIX% \"\"\",\n  \"min\":0.549,\n  \"flags\":[]\n})\n\n# The ORDER BY clause is removed because it was causing serious slowness problems\n# with big and huge databases.\nNAME = \"Same low complexity, prototype and names\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\"\n       select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n         from functions f,\n              diff.functions df\n        where f.names = df.names\n          and f.cyclomatic_complexity = df.cyclomatic_complexity\n          and f.cyclomatic_complexity < 20\n          and f.prototype2 = df.prototype2\n          and df.names != '[]'\n          %POSTFIX% \"\"\",\n  \"min\":0.5,\n  \"flags\":[]\n})\n\nNAME = \"Same low complexity and names\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\"select \"\"\" + get_query_fields(NAME) + \"\"\"\n       from functions f,\n            diff.functions df\n      where f.names = df.names\n        and f.cyclomatic_complexity = df.cyclomatic_complexity\n        and f.cyclomatic_complexity < 15\n        and df.names != '[]'\n        and (substr(f.name, 1, 4) = 'sub_' or substr(df.name, 1, 4) == 'sub_')\n        %POSTFIX% \"\"\",\n  \"min\":0.5,\n  \"flags\":[]\n})\n\nNAME = \"Switch structures\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\"select \"\"\" + get_query_fields(NAME) + \"\"\"\n       from functions f,\n            diff.functions df\n      where f.switches = df.switches\n        and df.switches != '[]'\n        and f.nodes > 5 and df.nodes > 5\n        %POSTFIX%\n      order by f.source_file = df.source_file\"\"\",\n  \"min\": 0.5,\n  \"flags\":[]\n})\n\nNAME = \"Pseudo-code fuzzy (normal)\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\"select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n       from functions f,\n            diff.functions df\n      where df.pseudocode_hash1 = f.pseudocode_hash1\n        and f.pseudocode_lines > 5 and df.pseudocode_lines > 5\n        %POSTFIX%\n      order by f.source_file = df.source_file\"\"\",\n  \"min\": 0.5,\n  \"flags\":[]\n})\n\nNAME = \"Pseudo-code fuzzy (mixed)\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\"select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n       from functions f,\n            diff.functions df\n      where df.pseudocode_hash3 = f.pseudocode_hash3\n        and f.pseudocode_lines > 5 and df.pseudocode_lines > 5\n        %POSTFIX%\n      order by f.source_file = df.source_file\"\"\",\n  \"flags\":[]\n})\n\nNAME = \"Pseudo-code fuzzy (reverse)\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\"select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n       from functions f,\n            diff.functions df\n      where df.pseudocode_hash2 = f.pseudocode_hash2\n        and f.pseudocode_lines > 5 and df.pseudocode_lines > 5\n        %POSTFIX%\n      order by f.source_file = df.source_file\"\"\",\n  \"flags\":[]\n})\n\nNAME = \"Pseudo-code fuzzy AST hash\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\"select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n       from functions f,\n            diff.functions df\n      where df.pseudocode_primes = f.pseudocode_primes\n        and f.pseudocode_lines >= 3\n        and length(f.pseudocode_primes) >= 35\n        %POSTFIX%\n      order by f.source_file = df.source_file\"\"\",\n  \"min\": 0.35,\n  \"flags\":[]\n})\n\nNAME = \"Partial pseudo-code fuzzy hash (normal)\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\"  select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n         from functions f,\n              diff.functions df\n        where substr(df.pseudocode_hash1, 1, 16) = substr(f.pseudocode_hash1, 1, 16)\n          and f.nodes > 5 and df.nodes > 5\n          %POSTFIX%\n        order by f.source_file = df.source_file\"\"\",\n  \"min\":0.5,\n  \"flags\":[HEUR_FLAG_SLOW, HEUR_FLAG_UNRELIABLE]\n})\n\nNAME = \"Partial pseudo-code fuzzy hash (reverse)\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\"  select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n         from functions f,\n              diff.functions df\n        where substr(df.pseudocode_hash2, 1, 16) = substr(f.pseudocode_hash2, 1, 16)\n          and f.nodes > 5 and df.nodes > 5\n          %POSTFIX%\n        order by f.source_file = df.source_file\"\"\",\n  \"min\":0.5,\n  \"flags\":[HEUR_FLAG_SLOW, HEUR_FLAG_UNRELIABLE]\n})\n\nNAME = \"Partial pseudo-code fuzzy hash (mixed)\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\"  select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n         from functions f,\n              diff.functions df\n        where substr(df.pseudocode_hash3, 1, 16) = substr(f.pseudocode_hash3, 1, 16)\n          and f.nodes > 5 and df.nodes > 5\n          %POSTFIX%\n        order by f.source_file = df.source_file\"\"\",\n  \"min\":0.5,\n  \"flags\":[HEUR_FLAG_SLOW, HEUR_FLAG_UNRELIABLE]\n})\n\nNAME = \"Same rare assembly instruction\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\"\nwith main_asm as (\n  select f.id, f.name, inst.disasm\n    from main.instructions inst,\n         main.functions f\n   where f.id = inst.func_id\n     and f.name not like 'nullsub%'\n     and inst.disasm is not null\n     and inst.disasm != ''\n   group by inst.disasm\n  having count(0) = 1\n),\ndiff_asm as (\n  select f.id, f.name, inst.disasm\n    from diff.instructions inst,\n         diff.functions f\n   where f.id = inst.func_id\n     and f.name not like 'nullsub%'\n     and inst.disasm is not null\n     and inst.disasm != ''\n   group by inst.disasm\n  having count(0) = 1\n),\nquery1 as (\n  select distinct main_asm.id main_func_id, diff_asm.id diff_func_id\n    from main_asm,\n         diff_asm\n   where main_asm.disasm = diff_asm.disasm\n)\nselect \"\"\" + get_query_fields(NAME) + \"\"\"\n  from main.functions f,\n       diff.functions df,\n       query1\n where f.id  = query1.main_func_id\n   and df.id = query1.diff_func_id\n   and f.name != df.name\n   and ((min(f.nodes, df.nodes) * 100) / max(f.nodes, df.nodes)) < 50\n   %POSTFIX%\n\"\"\",\n  \"min\":0.5,\n  \"flags\":[HEUR_FLAG_SAME_CPU]\n})\n\nNAME = \"Same rare basic block mnemonics list\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\"\nwith main_bblocks as (\nselect inst.func_id, bb.basic_block_id bb_id, GROUP_CONCAT(inst.mnemonic) as mnemonics_list, count(0) inst_total\n  from main.bb_instructions bb,\n       main.instructions inst\n where bb.instruction_id = inst.id\n group by bb_id\n),\ndiff_bblocks as (\nselect inst.func_id, bb.basic_block_id bb_id, GROUP_CONCAT(inst.mnemonic) as mnemonics_list, count(0) inst_total\n  from diff.bb_instructions bb,\n       diff.instructions inst\n where bb.instruction_id = inst.id\n group by bb_id\n),\nunique_main_bblocks as (\nselect func_id, mnemonics_list, count(0) total\n  from main_bblocks\n group by mnemonics_list\nhaving count(0) = 1\n order by total asc\n)\nselect \"\"\" + get_query_fields(NAME) + \"\"\"\n  from unique_main_bblocks main_query,\n       diff_bblocks diff_query,\n       main.functions f,\n       diff.functions df\n where main_query.mnemonics_list = diff_query.mnemonics_list\n   and f.id = main_query.func_id\n   and df.id = diff_query.func_id\n   and f.nodes > 3\n   and df.nodes > 3\n   and diff_query.inst_total >= 6\n   and ((min(f.nodes, df.nodes) * 100) / max(f.nodes, df.nodes)) < 50\n   %POSTFIX%\n\"\"\",\n  \"min\":0.5,\n  \"flags\":[]\n})\n\nNAME = \"Loop count\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Partial\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\"select \"\"\" + get_query_fields(NAME) + \"\"\"\n       from functions f,\n            diff.functions df\n      where f.loops = df.loops\n        and df.loops > 1\n        and f.nodes >= 3 and df.nodes >= 3\n        %POSTFIX%\n      order by f.source_file = df.source_file\"\"\",\n  \"min\":0.49,\n  \"flags\":[HEUR_FLAG_SLOW]\n})\n\nNAME = \"Same graph\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Unreliable\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\" select \"\"\" + get_query_fields(NAME) + \"\"\"\n        from functions f,\n             diff.functions df\n       where f.nodes = df.nodes \n         and f.edges = df.edges\n         and f.indegree = df.indegree\n         and f.outdegree = df.outdegree\n         and f.cyclomatic_complexity = df.cyclomatic_complexity\n         and f.strongly_connected = df.strongly_connected\n         and f.loops = df.loops\n         and f.tarjan_topological_sort = df.tarjan_topological_sort\n         and f.strongly_connected_spp = df.strongly_connected_spp\n         and f.nodes > 5 and df.nodes > 5\n         %POSTFIX%\n       order by\n             case when f.size = df.size then 1 else 0 end +\n             case when f.instructions = df.instructions then 1 else 0 end +\n             case when f.mnemonics = df.mnemonics then 1 else 0 end +\n             case when f.names = df.names then 1 else 0 end +\n             case when f.prototype2 = df.prototype2 then 1 else 0 end +\n             case when f.primes_value = df.primes_value then 1 else 0 end +\n             case when f.bytes_hash = df.bytes_hash then 1 else 0 end +\n             case when f.pseudocode_hash1 = df.pseudocode_hash1 then 1 else 0 end +\n             case when f.pseudocode_primes = df.pseudocode_primes then 1 else 0 end +\n             case when f.pseudocode_hash2 = df.pseudocode_hash2 then 1 else 0 end +\n             case when f.pseudocode_hash3 = df.pseudocode_hash3 then 1 else 0 end DESC\"\"\",\n  \"min\":0.5,\n  \"flags\":[]\n})\n\n#\n# Seems not to find anything?\n#\nNAME = \"Strongly connected components\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Unreliable\",\n  \"ratio\":HEUR_TYPE_RATIO_MAX,\n  \"sql\":\"\"\"\n     select \"\"\" + get_query_fields(NAME) + \"\"\"\n       from functions f,\n            diff.functions df\n      where f.strongly_connected = df.strongly_connected\n        and df.strongly_connected > 1\n        and f.nodes > 5 and df.nodes > 5\n        and f.strongly_connected_spp > 1\n        and df.strongly_connected_spp > 1\n        %POSTFIX%\n      order by f.source_file = df.source_file\"\"\",\n  \"min\":0.8,\n  \"flags\":[HEUR_FLAG_SLOW]\n})\n\n#\n# Seems not to find anything?\n#\nNAME = \"Nodes, edges, complexity and mnemonics\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Unreliable\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\" select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n        from functions f,\n             diff.functions df\n       where f.nodes = df.nodes\n         and f.edges = df.edges\n         and f.mnemonics = df.mnemonics\n         and f.cyclomatic_complexity = df.cyclomatic_complexity\n         and f.nodes > 1 and f.edges > 0\n         %POSTFIX%\n       order by f.source_file = df.source_file\"\"\",\n  \"flags\":[HEUR_FLAG_SLOW]\n})\n\n#\n# Seems not to find anything?\n# Duplicate?\n#\nNAME = \"Nodes, edges, complexity and prototype\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Unreliable\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\" select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n        from functions f,\n             diff.functions df\n       where f.nodes = df.nodes\n         and f.edges = df.edges\n         and f.prototype2 = df.prototype2\n         and f.cyclomatic_complexity = df.cyclomatic_complexity\n         and f.prototype2 != 'int()'\n         %POSTFIX%\n       order by f.source_file = df.source_file\"\"\",\n  \"flags\":[HEUR_FLAG_SLOW]\n})\n\n#\n# Seems not to find anything?\n#\nNAME = \"Nodes, edges, complexity, in-degree and out-degree\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Unreliable\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\" select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n        from functions f,\n             diff.functions df\n       where f.nodes = df.nodes\n         and f.edges = df.edges\n         and f.cyclomatic_complexity = df.cyclomatic_complexity\n         and f.nodes >= 3 and f.edges > 2\n         and f.indegree = df.indegree\n         and f.outdegree = df.outdegree\n         %POSTFIX%\n       order by f.source_file = df.source_file\"\"\",\n  \"flags\":[HEUR_FLAG_SLOW]\n})\n\n#\n# Seems not to find anything?\n#\nNAME = \"Nodes, edges and complexity\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Unreliable\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\" select distinct \"\"\" + get_query_fields(NAME) + \"\"\"\n        from functions f,\n             diff.functions df\n       where f.nodes = df.nodes\n         and f.edges = df.edges\n         and f.cyclomatic_complexity = df.cyclomatic_complexity\n         and f.nodes > 1 and f.edges > 0\n         %POSTFIX%\n       order by f.source_file = df.source_file\"\"\",\n  \"flags\":[HEUR_FLAG_SLOW]\n})\n\n#\n# Seems not to find anything?\n#\nNAME = \"Same high complexity\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Unreliable\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\"select \"\"\" + get_query_fields(NAME) + \"\"\"\n       from functions f,\n            diff.functions df\n      where f.cyclomatic_complexity = df.cyclomatic_complexity\n        and f.cyclomatic_complexity >= 50\n        %POSTFIX%\n      order by f.source_file = df.source_file\"\"\",\n  \"flags\":[HEUR_FLAG_SLOW]\n})\n\n#\n# Seems not to find anything?\n#\nNAME = \"Topological sort hash\"\nHEURISTICS.append({\n  \"name\":NAME,\n  \"category\":\"Unreliable\",\n  \"ratio\":HEUR_TYPE_RATIO,\n  \"sql\":\"\"\"select \"\"\" + get_query_fields(NAME) + \"\"\"\n       from functions f,\n            diff.functions df\n      where f.strongly_connected = df.strongly_connected\n        and f.tarjan_topological_sort = df.tarjan_topological_sort\n        and f.strongly_connected >= 3\n        and f.nodes > 10\n        %POSTFIX%\n      order by f.source_file = df.source_file\"\"\",\n  \"flags\":[]\n})\n\n#-------------------------------------------------------------------------------\ndef check_categories():\n  \"\"\"\n  Internal test, get all the internally set categories.\n  \"\"\"\n  categories = set()\n  for heur in HEURISTICS:\n    category = heur[\"category\"]\n    categories.add(category)\n\n  print(\"Categories:\")\n  pprint.pprint(categories)\n\n#-------------------------------------------------------------------------------\ndef check_dupes():\n  \"\"\"\n  Internal test, check for duplicated heuristics.\n  \"\"\"\n  heurs = Counter()\n  for heur in HEURISTICS:\n    if \"name\" not in heur:\n      print(\"No 'name' field in heuristic!\")\n      print(heur)\n      assert \"name\" in dir(heur)\n\n    tmp = heur[\"name\"]\n    heurs[tmp] += 1\n\n  dups = []\n  for key in heurs:\n    if heurs[key] > 1:\n      dups.append([key, heurs[key]])\n\n  print(\"Dups:\")\n  pprint.pprint(dups)\n\n#-------------------------------------------------------------------------------\ndef check_heuristic_in_sql():\n  \"\"\"\n  Internal test, verify that SQL heuristics look correct.\n  \"\"\"\n  heurs = set()\n  excluded = [\"Equal assembly or pseudo-code\", \"All or most attributes\"]\n  for heur in HEURISTICS:\n    tmp = heur[\"name\"]\n    if tmp in excluded:\n      continue\n\n    sql = heur[\"sql\"]\n    print(tmp)\n    if sql.lower().find(tmp.lower()) == -1:\n      print(f\"SQL command not correctly associated to ${NAME}\")\n      print(sql)\n      assert sql.find(tmp) != -1\n\n    if sql.find(\"%POSTFIX%\") == -1:\n      print(\"SQL command does not contain the %POSTFIX%\")\n      print(sql)\n\n    heurs.add(tmp)\n\n  print(\"Heuristics:\")\n  pprint.pprint(heurs)\n\n#-------------------------------------------------------------------------------\ndef check_heuristics_ratio():\n  \"\"\"\n  Internal test, verify the heuristics with ratios and count all heuristics for\n  each category.\n  \"\"\"\n  ratios = Counter()\n  for heur in HEURISTICS:\n    if \"ratio\" not in heur:\n      print(\"No 'ratio' in heuristic!\")\n      print(heur)\n      assert \"ratio\" in heur\n\n    ratio = heur[\"ratio\"]\n    ratios[ratio] += 1\n\n  print(\"Ratios:\")\n  pprint.pprint(ratios)\n\n  assert ratios == Counter({1: 22, 2: 22, 0: 5, 3: 1})\n\n#-------------------------------------------------------------------------------\ndef check_mandatory_fields():\n  \"\"\"\n  Internal test, verify that the mandatory fields are specified in any and all\n  the heuristics.\n  \"\"\"\n  mandatory = set([\"name\", \"ratio\", \"category\", \"sql\", \"flags\"])\n  for heur in HEURISTICS:\n    for field in mandatory:\n      if field not in list(heur.keys()):\n        print(f\"Field ${field} not found in heuristic!\")\n        print(heur)\n        assert field in list(heur.keys())\n\n#-------------------------------------------------------------------------------\ndef check_field_names():\n  \"\"\"\n  Internal test, verify that there isn't any unknown field set for any and all\n  the heuristics.\n  \"\"\"\n  expected = set([\"name\", \"ratio\", \"category\", \"min\", \"sql\", \"flags\"])\n  fields = set()\n  for heur in HEURISTICS:\n    for field in list(heur.keys()):\n      if field not in expected:\n        print(f\"Invalid field ${field} found for heuristic!\")\n        print(heur)\n        assert field in expected\n\n      if heur[\"ratio\"] == HEUR_TYPE_RATIO_MAX:\n        if \"min\" not in heur:\n          print(\"Heuristic of type HEUR_TYPE_RATIO_MAX without a minimum value set!\")\n          print(heur)\n          assert \"min\" in dir(heur)\n\n      fields.add(field)\n\n  pprint.pprint(fields)\n\n#-------------------------------------------------------------------------------\ndef run_tests():\n  \"\"\"\n  Run the internal tests to verify that the heuristics look correct.\n  \"\"\"\n  print(\"Running tests...\\n\")\n  check_categories()\n  print(\"\")\n  check_dupes()\n  print(\"\")\n  check_heuristic_in_sql()\n  print(\"\")\n  check_heuristics_ratio()\n  print(\"\")\n  check_field_names()\n  print(\"\")\n  check_mandatory_fields()\n  print(\"\\nAll tests run OK!\")\n\nif __name__ == \"__main__\":\n  run_tests()\n"
        },
        {
          "name": "diaphora_ida.py",
          "type": "blob",
          "size": 122.5185546875,
          "content": "\"\"\"\nDiaphora, a diffing plugin for IDA\nCopyright (c) 2015-2024, Joxean Koret\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n\"\"\"\n\nimport os\nimport sys\nimport time\nimport json\nimport decimal\nimport difflib\nimport sqlite3\nimport datetime\nimport traceback\n\nfrom hashlib import md5\n\n# pylint: disable=wildcard-import\n# pylint: disable=unused-wildcard-import\nfrom idc import *\nfrom idaapi import *\nfrom idautils import *\n# pylint: enable=unused-wildcard-import\n# pylint: enable=wildcard-import\n\nimport idaapi\n\nidaapi.require(\"diaphora\")\n\ntry:\n  import ida_hexrays as hr\n\n  HAS_HEXRAYS = True\nexcept ImportError:\n  HAS_HEXRAYS = False\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"codecut\"))\nfrom codecut import lfa\n\nfrom pygments import highlight\nfrom pygments.lexers import NasmLexer, CppLexer, DiffLexer\nfrom pygments.formatters import HtmlFormatter\n\nimport diaphora_config as config\n\nfrom others.tarjan_sort import strongly_connected_components, robust_topological_sort\n\nfrom jkutils.factor import primesbelow\nfrom jkutils.graph_hashes import CKoretKaramitasHash\n\ntry:\n  from jkutils.IDAMagicStrings import get_source_strings\n\n  HAS_GET_SOURCE_STRINGS = True\nexcept ImportError:\n  print(f\"Error loading IDAMagicStrings.py: {str(sys.exc_info()[1])}\")\n  HAS_GET_SOURCE_STRINGS = False\n\n# pylint: disable-next=wrong-import-order\nfrom PyQt5 import QtWidgets\n\n#-------------------------------------------------------------------------------\n# Chooser items indices. They do differ from the CChooser.item items that are\n# handled in diaphora.py.\nimport diaphora\n\nCHOOSER_ITEM_MAIN_EA = diaphora.ITEM_MAIN_EA + 1\nCHOOSER_ITEM_MAIN_NAME = diaphora.ITEM_MAIN_NAME + 1\nCHOOSER_ITEM_DIFF_EA = diaphora.ITEM_DIFF_EA + 1\nCHOOSER_ITEM_DIFF_NAME = diaphora.ITEM_DIFF_NAME + 1\nCHOOSER_ITEM_RATIO = diaphora.ITEM_RATIO\n\n# Constants unexported in IDA Python\nPRTYPE_SEMI = 0x0008\n\n# Messages\nMSG_RELAXED_RATIO_ENABLED = \"\"\"AUTOHIDE DATABASE\\n\nRelaxed ratio calculations can be enabled. It will ignore many small\nmodifications to functions and will match more functions with higher ratios.\nEnable this option if you're only interested in the new functionality. Disable\nit for patch diffing if you're interested in small modifications (like buffer\nsizes).\n\nYou can disable it by un-checking the 'Relaxed calculations of differences\nratios' option.\"\"\"\n\nMSG_FUNCTION_SUMMARIES_ONLY = \"\"\"AUTOHIDE DATABASE\\n\nDo not export basic blocks or instructions will be enabled. It will not export\nthe information relative to basic blocks or instructions and 'Diff assembly in a\ngraph' will not be available.\n\nThis is automatically done for exporting huge databases with more than 100,000\nfunctions. You can disable it by un-checking the 'Do not export basic blocks or\ninstructions' option.\"\"\"\n\nLITTLE_ORANGE = 0x026AFD\n\n\n#-------------------------------------------------------------------------------\n# Python linter specific things to disable (temporarily, I guess...)\n#\n# pylint: disable=missing-class-docstring\n# pylint: disable=missing-function-docstring\n# pylint: disable=protected-access\n\n#-------------------------------------------------------------------------------\ndef log(message):\n  \"\"\"\n  Print a message\n  \"\"\"\n  print(f\"[Diaphora: {time.asctime()}] {message}\")\n\n\n#-------------------------------------------------------------------------------\ndef log_refresh(message, show=False, do_log=True):\n  \"\"\"\n  Print a message and refresh the UI.\n  \"\"\"\n  if show:\n    show_wait_box(message)\n  else:\n    replace_wait_box(message)\n\n  if user_cancelled():\n    raise Exception(\"Cancelled\")\n\n  if do_log:\n    log(message)\n\n\n#-------------------------------------------------------------------------------\ndef debug_refresh(message):\n  \"\"\"\n  Print a debugging message if debugging is enabled.\n  \"\"\"\n  if os.getenv(\"DIAPHORA_DEBUG\"):\n    log(message)\n\n\n#-------------------------------------------------------------------------------\ndiaphora.log = log\ndiaphora.log_refresh = log_refresh\n\n#-------------------------------------------------------------------------------\n# pylint: disable=global-variable-not-assigned\ng_bindiff = None\n\n\ndef show_choosers():\n  \"\"\"\n  Show the non empty choosers.\n  \"\"\"\n  if g_bindiff is not None:\n    g_bindiff.show_choosers(False)\n\n\n#-------------------------------------------------------------------------------\ndef save_results():\n  \"\"\"\n  Show the dialogue to save the diffing results.\n  \"\"\"\n  if g_bindiff is not None:\n    filename = ask_file(1, \"*.diaphora\", \"Select the file to store diffing results\")\n    if filename is not None:\n      g_bindiff.save_results(filename)\n\n\n# pylint: enable=global-variable-not-assigned\n\n\n#-------------------------------------------------------------------------------\ndef load_and_import_all_results(filename, main_db, diff_db):\n  \"\"\"\n  Load the diffing results and import all matches.\n  \"\"\"\n  tmp_diff = CIDABinDiff(\":memory:\")\n\n  if os.path.exists(filename) and os.path.exists(main_db) and os.path.exists(diff_db):\n    tmp_diff.load_and_import_all_results(filename, main_db, diff_db)\n\n  idaapi.qexit(0)\n\n\n#-------------------------------------------------------------------------------\ndef load_results():\n  \"\"\"\n  Load previously saved diffing results.\n  \"\"\"\n  tmp_diff = CIDABinDiff(\":memory:\")\n  filename = ask_file(0, \"*.diaphora\", \"Select the file to load diffing results\")\n  if filename is not None:\n    tmp_diff.load_results(filename)\n\n\n#-------------------------------------------------------------------------------\ndef import_definitions():\n  \"\"\"\n  Import *only* the definitions (struct, enums and unions).\n  \"\"\"\n  tmp_diff = CIDABinDiff(\":memory:\")\n  message = \"Select the file to import structures, unions and enumerations from\"\n  filename = ask_file(0, \"*.sqlite\", message)\n  if filename is not None:\n    message = \"HIDECANCEL\\nDo you really want to import all structures, unions and enumerations?\"\n    if ask_yn(1, message) == 1:\n      tmp_diff.import_definitions_only(filename)\n\n\n#-------------------------------------------------------------------------------\ndef diaphora_decode(ea):\n  \"\"\"\n  Wrapper for IDA's decode_insn\n  \"\"\"\n  ins = idaapi.insn_t()\n  decoded_size = idaapi.decode_insn(ins, ea)\n  return decoded_size, ins\n\n\n#-------------------------------------------------------------------------------\ndef get_string_at(ea):\n  \"\"\"\n  Get the defined string at the given address.\n  \"\"\"\n  if ida_bytes.is_mapped(ea):\n    return get_strlit_contents(ea, -1, -1)\n  return None\n\n\n#-------------------------------------------------------------------------------\n# pylint: disable=redefined-outer-name\n# pylint: disable=arguments-renamed\n# pylint: disable=attribute-defined-outside-init\n# pylint: disable=c-extension-no-member\nclass CHtmlViewer(PluginForm):\n  \"\"\"\n  Class used to graphically show the differences.\n  \"\"\"\n\n  def OnCreate(self, form):\n    self.parent = self.FormToPyQtWidget(form)\n    self.PopulateForm()\n\n    self.browser = None\n    self.layout = None\n    return 1\n\n  def PopulateForm(self):\n    self.layout = QtWidgets.QVBoxLayout()\n    self.browser = QtWidgets.QTextBrowser()\n    self.browser.setLineWrapMode(QtWidgets.QTextEdit.FixedColumnWidth)\n    self.browser.setLineWrapColumnOrWidth(150)\n    self.browser.setHtml(self.text)\n    self.browser.setReadOnly(True)\n    self.layout.addWidget(self.browser)\n    self.parent.setLayout(self.layout)\n\n  def Show(self, text, title):\n    self.text = text\n    return PluginForm.Show(self, title)\n\n\n# pylint: enable=c-extension-no-member\n# pylint: enable=attribute-defined-outside-init\n# pylint: enable=arguments-renamed\n# pylint: enable=redefined-outer-name\n\n\n#-------------------------------------------------------------------------------\nclass CBasicChooser(Choose):\n  def __init__(self, title):\n    Choose.__init__(\n      self,\n      title,\n      [[\"Id\", 10 | Choose.CHCOL_PLAIN], [\"Name\", 30 | Choose.CHCOL_PLAIN]],\n    )\n    self.items = []\n\n  def OnGetSize(self):\n    return len(self.items)\n\n  def OnGetLine(self, n):\n    return self.items[n]\n\n\n#-------------------------------------------------------------------------------\n# Hex-Rays finally removed AddCommand(). Now, instead of a 1 line call, we need\n# 2 classes...\nclass command_handler_t(ida_kernwin.action_handler_t):\n  def __init__(self, obj, cmd_id, num_args=2):\n    self.obj = obj\n    self.cmd_id = cmd_id\n    self.num_args = num_args\n    ida_kernwin.action_handler_t.__init__(self)\n\n  def activate(self, ctx):\n    if self.num_args == 1:\n      return self.obj.OnCommand(self.cmd_id)\n    if len(self.obj.selected_items) == 0:\n      sel = 0\n    else:\n      sel = self.obj.selected_items[0]\n    return self.obj.OnCommand(sel, self.cmd_id)\n\n  def update(self, ctx):\n    return idaapi.AST_ENABLE_ALWAYS\n\n\n#-------------------------------------------------------------------------------\n# Support for the removed AddCommand() API\n\n\n# pylint: disable=super-init-not-called\n# pylint: disable=arguments-differ\nclass CDiaphoraChooser(diaphora.CChooser, Choose):\n  def __init__(self, title, bindiff, show_commands=True):\n    diaphora.CChooser.__init__(self, title, bindiff, show_commands)\n    self.actions = []\n\n  def AddCommand(self, menu_name, shortcut=None):\n    if menu_name is not None:\n      tmp = menu_name.replace(\" \", \"\")\n      action_name = f\"Diaphora:{tmp}\"\n    else:\n      action_name = None\n    self.actions.append([len(self.actions), action_name, menu_name, shortcut])\n    return len(self.actions) - 1\n\n  def OnPopup(self, widget, popup_handle):\n    for num, action_name, menu_name, shortcut in self.actions:\n      if menu_name is None:\n        ida_kernwin.attach_action_to_popup(widget, popup_handle, None)\n      else:\n        handler = command_handler_t(self, num, 2)\n        desc = ida_kernwin.action_desc_t(\n          action_name, menu_name, handler, shortcut\n        )\n        ida_kernwin.attach_dynamic_action_to_popup(widget, popup_handle, desc)\n\n\n# pylint: enable=arguments-differ\n# pylint: enable=super-init-not-called\n\n\n#-------------------------------------------------------------------------------\nclass CIDAChooser(CDiaphoraChooser):\n  \"\"\"\n  Wrapper class for IDA choosers\n  \"\"\"\n\n  # pylint: disable=non-parent-init-called\n  def __init__(self, title, bindiff, show_commands=True):\n    CDiaphoraChooser.__init__(self, title, bindiff, show_commands)\n    if title.startswith(\"Unmatched in\"):\n      Choose.__init__(\n        self,\n        title,\n        [[\"Line\", 8], [\"Address\", 10], [\"Name\", 20]],\n        Choose.CH_MULTI,\n      )\n    else:\n      columns = [\n        [\"Line\", 8],\n        [\"Address\", 10],\n        [\"Name\", 20],\n        [\"Address 2\", 10],\n        [\"Name 2\", 20],\n        [\"Ratio\", 8],\n        [\"BBlocks 1\", 5],\n        [\"BBlocks 2\", 5],\n        [\"Description\", 30],\n      ]\n      Choose.__init__(self, title, columns, Choose.CH_MULTI)\n\n  # pylint: enable=non-parent-init-called\n\n  def OnSelectLine(self, sel):\n    item = self.items[sel[0]]\n    if self.primary:\n      jump_ea = int(item[CHOOSER_ITEM_MAIN_EA], 16)\n      # Only jump for valid addresses\n      if is_mapped(jump_ea):\n        jumpto(jump_ea)\n    else:\n      self.bindiff.show_asm(self.items[sel[0]], self.primary)\n\n  def OnGetLine(self, n):\n    return self.items[n]\n\n  def OnGetSize(self):\n    return len(self.items)\n\n  def OnDeleteLine(self, sel):\n    for n in sorted(sel, reverse=True):\n      if n >= 0:\n\n        def get_item(n, index):\n          try:\n            return self.items[n][index]\n          except IndexError:\n            return None\n\n        name1 = get_item(n, CHOOSER_ITEM_MAIN_NAME)\n        name2 = get_item(n, CHOOSER_ITEM_DIFF_NAME)\n\n        del self.items[n]\n\n        if name1 in self.bindiff.matched_primary:\n          del self.bindiff.matched_primary[name1]\n        if name2 in self.bindiff.matched_secondary:\n          del self.bindiff.matched_secondary[name2]\n\n    return [Choose.ALL_CHANGED] + sel\n\n  def show(self, force=False):\n    \"\"\"\n    Sort items, add menu items and show the chooser.\n    \"\"\"\n    if self.show_commands:\n      self.items = sorted(\n        self.items,\n        key=lambda x: decimal.Decimal(x[CHOOSER_ITEM_RATIO]),\n        reverse=True,\n      )\n\n    t = self.Show()\n    if t < 0:\n      return False\n\n    # pylint: disable=attribute-defined-outside-init\n\n    if self.show_commands and (self.cmd_diff_asm is None or force):\n      # create aditional actions handlers\n      self.cmd_rediff = self.AddCommand(\"Diff again\")\n      self.cmd_save_results = self.AddCommand(\"Save results\")\n      self.cmd_add_manual_match = self.AddCommand(\"Add manual match\")\n      self.AddCommand(None)\n      self.cmd_diff_asm = self.AddCommand(\"Diff assembly\")\n      self.cmd_diff_microcode = self.AddCommand(\"Diff microcode\")\n      self.cmd_diff_c = self.AddCommand(\"Diff pseudo-code\")\n      self.cmd_diff_graph = self.AddCommand(\"Diff assembly in a graph\")\n      self.cmd_diff_graph_microcode = self.AddCommand(\"Diff microcode in a graph\")\n      self.cmd_diff_external = self.AddCommand(\"Diff using an external tool\")\n      self.cmd_diff_asm_patch = self.AddCommand(\"Show assembly patch\")\n      self.cmd_diff_c_patch = self.AddCommand(\"Show pseudo-code patch\")\n      self.cmd_view_callgraph_context = self.AddCommand(\n        \"Show callers and callees graph\"\n      )\n      self.AddCommand(None)\n      self.cmd_import_selected = self.AddCommand(\"Import selected\", \"Ctrl+Alt+i\")\n      self.cmd_import_selected_auto = self.AddCommand(\"Import selected sub_*\")\n      self.cmd_import_all = self.AddCommand(\"Import *all* functions\")\n      self.cmd_import_all_funcs = self.AddCommand(\n        \"Import *all* data for sub_* functions\"\n      )\n      self.AddCommand(None)\n      self.cmd_highlight_functions = self.AddCommand(\"Highlight matches\")\n      self.cmd_unhighlight_functions = self.AddCommand(\"Unhighlight matches\")\n    elif not self.show_commands and (self.cmd_show_asm is None or force):\n      self.cmd_show_asm = self.AddCommand(\"Show assembly\")\n      self.cmd_show_pseudo = self.AddCommand(\"Show pseudo-code\")\n\n    # pylint: enable=attribute-defined-outside-init\n\n    return True\n\n  def OnCommand(self, n, cmd_id):\n    \"\"\"\n    Aditional right-click-menu commands handles.\n    \"\"\"\n    if cmd_id == self.cmd_show_asm:\n      self.bindiff.show_asm(self.items[n], self.primary)\n    elif cmd_id == self.cmd_show_pseudo:\n      self.bindiff.show_pseudo(self.items[n], self.primary)\n    elif cmd_id == self.cmd_import_all:\n      text = \"HIDECANCEL\\n\"\n      text += \"Do you want to import all functions, comments, prototypes and definitions?\"\n      if ask_yn(1, text) == 1:\n        self.bindiff.import_all(self.items)\n    elif cmd_id == self.cmd_import_all_funcs:\n      if (\n        ask_yn(\n          1,\n          \"HIDECANCEL\\nDo you really want to import all IDA named matched functions, comments, prototypes and definitions?\",\n        )\n        == 1\n      ):\n        self.bindiff.import_all_auto(self.items)\n    elif (\n      cmd_id == self.cmd_import_selected\n      or cmd_id == self.cmd_import_selected_auto\n    ):\n      if len(self.selected_items) <= 1:\n        self.bindiff.import_one(self.items[n])\n      else:\n        if (\n          ask_yn(\n            1,\n            \"HIDECANCEL\\nDo you really want to import all selected IDA named matched functions, comments, prototypes and definitions?\",\n          )\n          == 1\n        ):\n          self.bindiff.import_selected(\n            self.items,\n            self.selected_items,\n            cmd_id == self.cmd_import_selected_auto,\n          )\n    elif cmd_id == self.cmd_diff_c:\n      self.bindiff.show_pseudo_diff(self.items[n])\n    elif cmd_id == self.cmd_diff_c_patch:\n      self.bindiff.show_pseudo_diff(self.items[n], html=False)\n    elif cmd_id == self.cmd_diff_asm_patch:\n      self.bindiff.show_asm_diff(self.items[n], html=False)\n    elif cmd_id == self.cmd_diff_asm:\n      self.bindiff.show_asm_diff(self.items[n])\n    elif cmd_id == self.cmd_diff_microcode:\n      self.bindiff.show_microcode_diff(self.items[n])\n    elif cmd_id == self.cmd_highlight_functions:\n      if (\n        ask_yn(\n          1,\n          \"HIDECANCEL\\nDo you want to change the background color of each matched function?\",\n        )\n        == 1\n      ):\n        color = self.get_color()\n        for item in self.items:\n          ea = int(item[CHOOSER_ITEM_MAIN_EA], 16)\n          if not set_color(ea, CIC_FUNC, color):\n            # pylint: disable-next=consider-using-f-string\n            print(\"Error setting color for %x\" % ea)\n        self.Refresh()\n    elif cmd_id == self.cmd_unhighlight_functions:\n      for item in self.items:\n        ea = int(item[CHOOSER_ITEM_MAIN_EA], 16)\n        if not set_color(ea, CIC_FUNC, 0xFFFFFF):\n          # pylint: disable-next=consider-using-f-string\n          print(\"Error setting color for %x\" % ea)\n      self.Refresh()\n    elif cmd_id == self.cmd_diff_graph:\n      item = self.items[n]\n      ea1 = int(item[CHOOSER_ITEM_MAIN_EA], 16)\n      name1 = item[CHOOSER_ITEM_MAIN_NAME]\n      ea2 = int(item[CHOOSER_ITEM_DIFF_EA], 16)\n      name2 = item[CHOOSER_ITEM_DIFF_NAME]\n      # pylint: disable-next=consider-using-f-string\n      log(\"Diff graph for 0x%x - 0x%x\" % (ea1, ea2))\n      self.bindiff.graph_diff(ea1, name1, ea2, name2)\n    elif cmd_id == self.cmd_diff_graph_microcode:\n      item = self.items[n]\n      ea1 = int(item[CHOOSER_ITEM_MAIN_EA], 16)\n      name1 = item[CHOOSER_ITEM_MAIN_NAME]\n      ea2 = int(item[CHOOSER_ITEM_DIFF_EA], 16)\n      name2 = item[CHOOSER_ITEM_DIFF_NAME]\n      # pylint: disable-next=consider-using-f-string\n      log(\"Diff microcode graph for 0x%x - 0x%x\" % (ea1, ea2))\n      self.bindiff.graph_diff_microcode(ea1, name1, ea2, name2)\n    elif cmd_id == self.cmd_view_callgraph_context:\n      item = self.items[n]\n      ea1 = int(item[CHOOSER_ITEM_MAIN_EA], 16)\n      name1 = item[CHOOSER_ITEM_MAIN_NAME]\n      ea2 = int(item[CHOOSER_ITEM_DIFF_EA], 16)\n      name2 = item[CHOOSER_ITEM_DIFF_NAME]\n      # pylint: disable-next=consider-using-f-string\n      log(\"Showing call graph context for 0x%x - 0x%x\" % (ea1, ea2))\n      self.bindiff.show_callgraph_context(name1, name2)\n    elif cmd_id == self.cmd_save_results:\n      filename = ask_file(\n        1, \"*.diaphora\", \"Select the file to store diffing results\"\n      )\n      if filename is not None:\n        self.bindiff.save_results(filename)\n    elif cmd_id == self.cmd_add_manual_match:\n      self.add_manual_match()\n    elif cmd_id == self.cmd_rediff:\n      self.bindiff.db.execute(\"detach diff\")\n      timeraction_t(self.bindiff.re_diff, None, 1000)\n    elif cmd_id == self.cmd_diff_external:\n      self.bindiff.diff_external(self.items[n])\n\n    return True\n\n  def get_diff_functions(self):\n    \"\"\"\n    Return the functions rows for the diff database\n    \"\"\"\n    cur = self.bindiff.db_cursor()\n    try:\n      cur.execute(\"select cast(id as text), name, address from diff.functions order by id\")\n      rows = list(cur.fetchall())\n      rows = list(map(list, rows))\n    finally:\n      cur.close()\n\n    return rows\n\n  def add_manual_match_internal(self, ea1, ea2):\n    \"\"\"\n    Internal function, add a manual match directly to the partial chooser.\n    \"\"\"\n    main_row = self.bindiff.get_function_row_by_ea(ea1)\n    if main_row is None:\n      warning(\"Can't find the local function!\")\n      return\n\n    diff_row = self.bindiff.get_function_row_by_ea(ea2, \"diff\")\n    if diff_row is None:\n      warning(\"Can't find the foreign function!\")\n      return\n\n    ratio = self.bindiff.compare_function_rows(main_row, diff_row)\n\n    ea1 = main_row[\"address\"]\n    name1 = main_row[\"name\"]\n    ea2 = diff_row[\"address\"]\n    name2 = diff_row[\"name\"]\n    desc = \"Manual match\"\n    nodes1 = main_row[\"nodes\"]\n    nodes2 = diff_row[\"nodes\"]\n\n    if name1 in self.bindiff.matched_primary or name2 in self.bindiff.matched_secondary:\n      line = (\n        \"Either the local function or the foreign function is already matched!\\n\"\n        + \"Please remove the previously assigned match before adding a manual match.\"\n      )\n      warning(line)\n      return\n\n    self.bindiff.partial_chooser.add_item(\n      diaphora.CChooser.Item(ea1, name1, ea2, name2, desc, ratio, nodes1, nodes2)\n    )\n    self.bindiff.matched_primary[name1] = {\"name\": name2, \"ratio\": ratio}\n    self.bindiff.matched_secondary[name2] = {\"name\": name1, \"ratio\": ratio}\n    self.bindiff.partial_chooser.Refresh()\n\n  def add_manual_match(self):\n    \"\"\"\n    Menu item handler for adding a manual match.\n    \"\"\"\n    f = choose_func(\"Select a function from the current database...\", 0)\n    if f is not None:\n      diff_chooser = CBasicChooser(\n        \"Select a function from the external database...\"\n      )\n      diff_funcs = self.get_diff_functions()\n      diff_chooser.items = diff_funcs\n      ret = diff_chooser.Show(modal=True)\n      if ret > -1:\n        ea1 = f.start_ea\n        ea2 = int(diff_funcs[ret][2])\n        # pylint: disable-next=consider-using-f-string\n        log(\"Adding manual match between 0x%08x and 0x%08x\" % (ea1, ea2))\n        self.add_manual_match_internal(ea1, ea2)\n\n  def OnSelectionChange(self, sel):\n    self.selected_items = sel\n\n  def seems_false_positive(self, item):\n    \"\"\"\n    Check if it looks like a false positive because the names are different.\n    \"\"\"\n    name1 = item[CHOOSER_ITEM_MAIN_NAME]\n    name2 = item[CHOOSER_ITEM_DIFF_NAME]\n\n    name1 = name1.rstrip(\"_0\")\n    name2 = name2.rstrip(\"_0\")\n    name1 = name1.strip(\".\")\n    name2 = name2.strip(\".\")\n\n    if not name1.startswith(\"sub_\") and not name2.startswith(\"sub_\"):\n      if name1 != name2:\n        if name2.find(name1) == -1 and not name1.find(name2) == -1:\n          return True\n\n    return False\n\n  def OnGetLineAttr(self, n):\n    if not self.title.startswith(\"Unmatched\"):\n      item = self.items[n]\n      ratio = float(item[CHOOSER_ITEM_RATIO])\n      if self.seems_false_positive(item):\n        return [LITTLE_ORANGE, 0]\n      else:\n        red = abs(int(164 * (1 - ratio)))\n        green = abs(int(128 * ratio))\n        blue = abs(int(255 * (1 - ratio)))\n        # pylint: disable-next=consider-using-f-string\n        color = int(\"0x%02x%02x%02x\" % (blue, green, red), 16)\n      return [color, 0]\n    return [0xFFFFFF, 0]\n\n\n#-------------------------------------------------------------------------------\n# pylint: disable=no-member\nclass CBinDiffExporterSetup(Form):\n  \"\"\"\n  IDA class to build the export dialogue.\n  \"\"\"\n\n  def __init__(self):\n    s = r\"\"\"Diaphora\n  Please select the path to the SQLite database to save the current IDA database and the path of the SQLite database to diff against.\n  If no SQLite diff database is selected, it will just export the current IDA database to SQLite format. Leave the 2nd field empty if you are exporting the first database.\n\n  SQLite databases:                                                                                                                                     Export filter limits:\n  <#Select a file to export the current IDA database to SQLite format#Export IDA database to SQLite  :{iFileSave}> <#Minimum address to find functions to export#From address:{iMinEA}>\n  <#Select the SQLite database to diff against                       #SQLite database to diff against:{iFileOpen}> <#Maximum address to find functions to export#To address  :{iMaxEA}>\n\n  Export options:\n  <Use the decompiler if available:{rUseDecompiler}>\n  <#Use this option to enable or disable exporting microcode#Export microcode instructions and basic blocks:{rExportMicrocode}>\n  <Do not export library and thunk functions:{rExcludeLibraryThunk}>\n  <#Enable if you want neither sub_* functions nor library functions to be exported#Export only non-IDA generated functions:{rNonIdaSubs}>\n  <#Export only function summaries, not all instructions. Showing differences in a graph between functions will not be available.#Do not export instructions and basic blocks:{rFuncSummariesOnly}>\n  <#Enable this option to ignore thunk functions, nullsubs, etc....#Ignore small functions:{rIgnoreSmallFunctions}>{cGroupExport}>|\n\n  Diffing options:\n  <Use probably unreliable methods:{rUnreliable}>\n  <Recommended to disable with databases with more than 5.000 functions#Use slow heuristics:{rSlowHeuristics}>\n  <#Enable this option if you aren't interested in small changes#Relaxed calculations of differences ratios:{rRelaxRatio}>\n  <Use speed ups:{rExperimental}##Use tricks to speed ups some of the most common diffing tasks>\n  <#Enable this option to ignore sub_* names for the 'Same name' heuristic.#Ignore automatically generated names:{rIgnoreSubNames}>\n  <#Enable this option to ignore all function names for the 'Same name' heuristic.#Ignore all function names:{rIgnoreAllNames}>\n  <#Enable this option to use the Machine Learning engine with an already trained model specified in diaphora_config.py!ML_TRAINED_MODEL.#Use an already trained model:{rUseTrainedModel}>{cGroup1}>\n\n  Project specific rules:\n  <#Select the project specific Python script rules#Python script:{iProjectSpecificRules}>\n\n  NOTE: Don't select IDA database files (.IDB, .I64) as only SQLite databases are considered.\n\"\"\"\n    args = {\n      \"iFileSave\": Form.FileInput(save=True, swidth=40, hlp=\"SQLite database (*.sqlite)\"),\n      \"iFileOpen\": Form.FileInput(open=True, swidth=40, hlp=\"SQLite database (*.sqlite)\"),\n      \"iMinEA\": Form.NumericInput(tp=Form.FT_HEX, swidth=22),\n      \"iMaxEA\": Form.NumericInput(tp=Form.FT_HEX, swidth=22),\n      \"cGroupExport\": Form.ChkGroupControl(\n        (\n          \"rUseDecompiler\",\n          \"rExcludeLibraryThunk\",\n          \"rIgnoreSmallFunctions\",\n          \"rExportMicrocode\",\n          \"rNonIdaSubs\",\n          \"rFuncSummariesOnly\",\n        )\n      ),\n      \"cGroup1\": Form.ChkGroupControl(\n        (\n          \"rUnreliable\",\n          \"rSlowHeuristics\",\n          \"rRelaxRatio\",\n          \"rExperimental\",\n          \"rIgnoreSubNames\",\n          \"rIgnoreAllNames\",\n          \"rUseTrainedModel\"\n        )\n      ),\n      \"iProjectSpecificRules\": Form.FileInput(\n        open=True, hlp=\"Python scripts (*.py)\"\n      ),\n    }\n\n    Form.__init__(self, s, args)\n\n  def set_options(self, opts):\n    \"\"\"\n    Set the configuration options from opts.\n    \"\"\"\n    if opts.file_out is not None:\n      self.iFileSave.value = opts.file_out\n    if opts.file_in is not None:\n      self.iFileOpen.value = opts.file_in\n    if opts.project_script is not None:\n      self.iProjectSpecificRules.value = opts.project_script\n\n    self.rUseDecompiler.checked = opts.use_decompiler\n    self.rExcludeLibraryThunk.checked = opts.exclude_library_thunk\n    self.rUnreliable.checked = opts.unreliable\n    self.rSlowHeuristics.checked = opts.slow\n    self.rUseTrainedModel.checked = opts.use_trained_model\n    self.rRelaxRatio.checked = opts.relax\n    self.rExperimental.checked = opts.experimental\n    self.iMinEA.value = opts.min_ea\n    self.iMaxEA.value = opts.max_ea\n    self.rNonIdaSubs.checked = not opts.ida_subs\n    self.rIgnoreSubNames.checked = opts.ignore_sub_names\n    self.rIgnoreAllNames.checked = opts.ignore_all_names\n    self.rIgnoreSmallFunctions.checked = opts.ignore_small_functions\n    self.rFuncSummariesOnly.checked = opts.func_summaries_only\n    self.rExportMicrocode.checked = opts.export_microcode\n\n  def get_options(self):\n    \"\"\"\n    Get a dictionary with the configuration options.\n    \"\"\"\n    opts = dict(\n      file_out=self.iFileSave.value,\n      file_in=self.iFileOpen.value,\n      use_decompiler=self.rUseDecompiler.checked,\n      exclude_library_thunk=self.rExcludeLibraryThunk.checked,\n      unreliable=self.rUnreliable.checked,\n      slow=self.rSlowHeuristics.checked,\n      use_trained_model=self.rUseTrainedModel.checked,\n      relax=self.rRelaxRatio.checked,\n      experimental=self.rExperimental.checked,\n      min_ea=self.iMinEA.value,\n      max_ea=self.iMaxEA.value,\n      ida_subs=self.rNonIdaSubs.checked is False,\n      ignore_sub_names=self.rIgnoreSubNames.checked,\n      ignore_all_names=self.rIgnoreAllNames.checked,\n      ignore_small_functions=self.rIgnoreSmallFunctions.checked,\n      func_summaries_only=self.rFuncSummariesOnly.checked,\n      project_script=self.iProjectSpecificRules.value,\n      export_microcode=self.rExportMicrocode.checked,\n    )\n    return BinDiffOptions(**opts)\n\n\n# pylint: enable=no-member\n\n\n#-------------------------------------------------------------------------------\nclass timeraction_t(object):\n  def __init__(self, func, args, interval):\n    self.func = func\n    self.args = args\n    self.interval = interval\n    self.obj = idaapi.register_timer(self.interval, self)\n    if self.obj is None:\n      raise RuntimeError(\"Failed to register timer\")\n\n  def __call__(self):\n    if self.args is not None:\n      self.func(self.args)\n    else:\n      self.func()\n    return -1\n\n\n#-------------------------------------------------------------------------------\nclass uitimercallback_t(object):\n  def __init__(self, g, interval):\n    self.interval = interval\n    self.obj = idaapi.register_timer(self.interval, self)\n    if self.obj is None:\n      raise RuntimeError(\"Failed to register timer\")\n    self.g = g\n\n  def __call__(self):\n    f = find_widget(self.g._title)\n    activate_widget(f, 1)\n    process_ui_action(\"GraphZoomFit\", 0)\n    return -1\n\n\n#-------------------------------------------------------------------------------\nclass CDiffGraphViewer(GraphViewer):\n  \"\"\"\n  Class used to show graphs.\n  \"\"\"\n\n  def __init__(self, title, g, colours):\n    try:\n      GraphViewer.__init__(self, title, False)\n      self.graph = g[0]\n      self.relations = g[1]\n      self.nodes = {}\n      self.colours = colours\n    except:\n      warning(\"CDiffGraphViewer: OnInit!!! \" + str(sys.exc_info()[1]))\n\n  def OnRefresh(self):\n    try:\n      self.Clear()\n      self.nodes = {}\n\n      for key in self.graph:\n        self.nodes[key] = self.AddNode([key, self.graph[key]])\n\n      for key in self.relations:\n        if key not in self.nodes:\n          self.nodes[key] = self.AddNode([key, [[0, 0, \"\"]]])\n        parent_node = self.nodes[key]\n        for child in self.relations[key]:\n          if child not in self.nodes:\n            self.nodes[child] = self.AddNode([child, [[0, 0, \"\"]]])\n          child_node = self.nodes[child]\n          self.AddEdge(parent_node, child_node)\n\n      return True\n    except:\n      print(\"GraphViewer Error:\", sys.exc_info()[1])\n      return True\n\n  def OnGetText(self, node_id):\n    try:\n      ea, rows = self[node_id]\n      if ea in self.colours:\n        colour = self.colours[ea]\n      else:\n        colour = 0xFFFFFF\n      ret = []\n      for row in rows:\n        ret.append(row[2])\n      label = \"\\n\".join(ret)\n      return (label, colour)\n    except:\n      print(\"GraphViewer.OnGetText:\", sys.exc_info()[1])\n      return (\"ERROR\", 0x000000)\n\n  def Show(self):\n    return GraphViewer.Show(self)\n\n\n#-------------------------------------------------------------------------------\nclass CCallGraphViewer(GraphViewer):\n  def __init__(self, title, callers, callees, target):\n    GraphViewer.__init__(self, title, False)\n    self.target = target\n    self.callers = callers\n    self.callees = callees\n\n    self.root = None\n    self.nodes = {}\n    self.node_types = {\n      \"target\": config.CALLGRAPH_COLOR_TARGET,\n      \"callee\": config.CALLGRAPH_COLOR_CALLEE,\n      \"caller\": config.CALLGRAPH_COLOR_CALLER,\n    }\n\n  def OnRefresh(self):\n    self.Clear()\n    self.root = self.AddNode(self.target)\n    self.nodes[self.root] = [self.target, \"target\"]\n\n    for caller in self.callers:\n      name = caller[\"name1\"]\n      node = self.AddNode(name)\n      self.AddEdge(node, self.root)\n      self.nodes[node] = [name, \"caller\"]\n\n    for callee in self.callees:\n      name = callee[\"name1\"]\n      node = self.AddNode(name)\n      self.AddEdge(self.root, node)\n      self.nodes[node] = [name, \"callee\"]\n\n    return True\n\n  def OnGetText(self, node_id):\n    node = self.nodes[node_id]\n    name, node_type = node\n    colour = self.node_types[node_type]\n    return name, colour\n\n  def OnHint(self, node_id):\n    node = self.nodes[node_id]\n    _, node_type = node\n    return node_type\n\n  def Show(self):\n    return GraphViewer.Show(self)\n\n\n#-------------------------------------------------------------------------------\nclass CIdaMenuHandlerShowChoosers(idaapi.action_handler_t):\n  def __init__(self):\n    idaapi.action_handler_t.__init__(self)\n\n  def activate(self, ctx):\n    show_choosers()\n    return 1\n\n  def update(self, ctx):\n    return idaapi.AST_ENABLE_ALWAYS\n\n\n#-------------------------------------------------------------------------------\nclass CIdaMenuHandlerSaveResults(idaapi.action_handler_t):\n  def __init__(self):\n    idaapi.action_handler_t.__init__(self)\n\n  def activate(self, ctx):\n    save_results()\n    return 1\n\n  def update(self, ctx):\n    return idaapi.AST_ENABLE_ALWAYS\n\n\n#-------------------------------------------------------------------------------\nclass CIdaMenuHandlerLoadResults(idaapi.action_handler_t):\n  def __init__(self):\n    idaapi.action_handler_t.__init__(self)\n\n  def activate(self, ctx):\n    load_results()\n    return 1\n\n  def update(self, ctx):\n    return idaapi.AST_ENABLE_ALWAYS\n\n\n#-------------------------------------------------------------------------------\nclass CExternalDiffingDialog(Form):\n  def __init__(self):\n    self.iStrCommand = None\n    Form.__init__(\n      self,\n      r\"\"\"STARTITEM 0\nBUTTON YES* Diff Pseudo-code\nBUTTON NO Diff Assembler\nExternal Diffing Tool\n<#Hint1#Enter command line:{iStrCommand}>\n\"\"\",\n      {\n        \"iStrCommand\": Form.StringInput(),\n      },\n    )\n\n\n#-------------------------------------------------------------------------------\nclass CPrinter_t(hr.vd_printer_t):\n  \"\"\"Converts microcode output to an array of strings.\"\"\"\n\n  def __init__(self, *args):\n    hr.vd_printer_t.__init__(self)\n    self.mc = []\n\n  def get_mc(self):\n    return self.mc\n\n  # pylint: disable-next=arguments-differ\n  # pylint: disable-next=unexpected-keyword-arg\n  def _print(self, _, line):\n    self.mc.append(line)\n    return 1\n\n#-------------------------------------------------------------------------------\nclass CIDABinDiff(diaphora.CBinDiff):\n  \"\"\"\n  The main binary diffing class.\n  \"\"\"\n\n  def __init__(self, db_name):\n    diaphora.CBinDiff.__init__(self, db_name, chooser=CIDAChooser)\n    self.decompiler_available = config.EXPORTING_USE_DECOMPILER\n    self.names = dict(Names())\n    self.min_ea = get_inf_attr(INF_MIN_EA)\n    self.max_ea = get_inf_attr(INF_MAX_EA)\n\n    self.microcode_ins_list = self.get_microcode_instructions()\n\n    self.project_script = None\n    self.hooks = None\n\n  def clear_pseudo_fields(self):\n    self.pseudo = {}\n    self.pseudo_hash = {}\n    self.pseudo_comments = {}\n    self.microcode = {}\n\n  def refresh(self):\n    idaapi.request_refresh(0xFFFFFFFF)\n\n  def show_choosers(self, force=False):\n    \"\"\"\n    Show all non empty choosers.\n    \"\"\"\n    CHOOSERS = [\n      self.best_chooser,\n      self.partial_chooser,\n      self.multimatch_chooser,\n      self.unreliable_chooser,\n      self.unmatched_primary,\n      self.unmatched_second,\n      self.interesting_matches\n    ]\n\n    if config.ML_DEBUG_SHOW_MATCHES:\n      CHOOSERS.append(self.ml_chooser)\n\n    for chooser in CHOOSERS:\n      if chooser is not None and len(chooser.items) > 0:\n        chooser.show(force)\n\n  def diff(self, db):\n    if user_cancelled():\n      return None\n\n    res = diaphora.CBinDiff.diff(self, db)\n    if res:\n      # And, finally, show the list of best and partial matches and\n      # register the hotkey for re-opening results\n      self.show_choosers()\n      self.register_menu()\n    hide_wait_box()\n    return res\n\n  def get_last_crash_func(self):\n    \"\"\"\n    Get the last inserted row before IDA or Diaphora crashed.\n    \"\"\"\n    sql = \"select address from functions order by id desc limit 1\"\n    cur = self.db_cursor()\n    try:\n      cur.execute(sql)\n\n      row = cur.fetchone()\n      if not row:\n        return None\n\n      address = int(row[0])\n    finally:\n      cur.close()\n\n    return address\n\n  def recalculate_primes(self):\n    \"\"\"\n    Recalculate the primes assigned to a function.\n    \"\"\"\n    sql = \"select primes_value from functions\"\n\n    callgraph_primes = 1\n    callgraph_all_primes = {}\n\n    cur = self.db_cursor()\n    try:\n      cur.execute(sql)\n      for row in cur.fetchall():\n        ret = row[0]\n        callgraph_primes *= decimal.Decimal(row[0])\n        try:\n          callgraph_all_primes[ret] += 1\n        except KeyError:\n          callgraph_all_primes[ret] = 1\n    finally:\n      cur.close()\n\n    return callgraph_primes, callgraph_all_primes\n\n  def commit_and_start_transaction(self):\n    try:\n      self.db.execute(\"commit\")\n    except sqlite3.OperationalError as e:\n      # Ignore the \"cannot commit - no transaction active\" error\n      pass\n\n    if config.SQLITE_PRAGMA_SYNCHRONOUS is not None:\n      self.db.execute(f\"PRAGMA synchronous = {config.SQLITE_PRAGMA_SYNCHRONOUS}\")\n    if config.SQLITE_JOURNAL_MODE is not None:\n      self.db.execute(f\"PRAGMA journal_mode = {config.SQLITE_JOURNAL_MODE}\")\n    self.db.execute(\"BEGIN transaction\")\n\n  def do_export(self, crashed_before=False):\n    \"\"\"\n    Internal use, export the database.\n    \"\"\"\n    callgraph_primes = 1\n    callgraph_all_primes = {}\n    # pylint: disable-next=consider-using-f-string\n    log(\"Exporting range 0x%08x - 0x%08x\" % (self.min_ea, self.max_ea))\n    func_list = list(Functions(self.min_ea, self.max_ea))\n    total_funcs = len(func_list)\n    t = time.monotonic()\n\n    if crashed_before:\n      start_func = self.get_last_crash_func()\n      if start_func is None:\n        warning(\n          \"Diaphora cannot resume the previous crashed session, the export process will start from scratch.\"\n        )\n        crashed_before = False\n      else:\n        callgraph_primes, callgraph_all_primes = self.recalculate_primes()\n\n    self.commit_and_start_transaction()\n\n    i = 0\n    self._funcs_cache = {}\n    for func in func_list:\n      if user_cancelled():\n        raise Exception(\"Cancelled.\")\n\n      i += 1\n      if (total_funcs >= 100) and i % (int(total_funcs / 100)) == 0 or i == 1:\n        if config.COMMIT_AFTER_EACH_GUI_UPDATE:\n          self.commit_and_start_transaction()\n        line = \"Exported %d function(s) out of %d total.\\nElapsed %d:%02d:%02d second(s), remaining time ~%d:%02d:%02d\"\n        elapsed = time.monotonic() - t\n        remaining = (elapsed / i) * (total_funcs - i)\n\n        m, s = divmod(remaining, 60)\n        h, m = divmod(m, 60)\n        m_elapsed, s_elapsed = divmod(elapsed, 60)\n        h_elapsed, m_elapsed = divmod(m_elapsed, 60)\n        replace_wait_box(\n          line % (i, total_funcs, h_elapsed, m_elapsed, s_elapsed, h, m, s)\n        )\n\n      if crashed_before:\n        rva = func - self.get_base_address()\n        if rva != start_func:\n          continue\n\n        # When we get to the last function that was previously exported, switch\n        # off the 'crash' flag and continue with the next row.\n        crashed_before = False\n        continue\n\n      props = self.read_function(func)\n      self.clear_pseudo_fields()\n      if props is False:\n        continue\n\n      ret = props[11]\n      callgraph_primes *= decimal.Decimal(ret)\n      try:\n        callgraph_all_primes[ret] += 1\n      except KeyError:\n        callgraph_all_primes[ret] = 1\n      \n      self.save_function(props)\n\n      # Try to fix bug #30 and, also, try to speed up operations as doing a\n      # commit every 10 functions, as before, is overkill.\n      if total_funcs > config.EXPORTING_FUNCTIONS_TO_COMMIT:\n        if i % (total_funcs / 10) == 0:\n          self.commit_and_start_transaction()\n\n    self.commit_and_start_transaction()\n    md5sum = GetInputFileMD5()\n    self.save_callgraph(\n      str(callgraph_primes), json.dumps(callgraph_all_primes), md5sum\n    )\n    self.export_structures()\n    try:\n      self.export_til()\n    except:\n      log(f\"Error reading type libraries: {str(sys.exc_info()[1])}\")\n    \n    if config.EXPORTING_COMPILATION_UNITS:\n      self.save_compilation_units()\n\n    log_refresh(\"Creating indices...\")\n    self.create_indices()\n\n  def export(self):\n    \"\"\"\n    Export the current database. Call script hooks if there is any.\n    \"\"\"\n    if self.project_script is not None:\n      if not self.load_hooks():\n        return False\n\n    crashed_before = False\n    crash_file = f\"{self.db_name}-crash\"\n    if os.path.exists(crash_file):\n      log(\"Resuming a previously crashed session...\")\n      crashed_before = True\n\n    log(f\"Creating crash file {crash_file}...\")\n    with open(crash_file, \"wb\") as f:\n      f.close()\n\n    try:\n      show_wait_box(\"Exporting database\")\n      try:\n        self.do_export(crashed_before)\n      except:\n        log(f\"Error: {str(sys.exc_info()[1])}\")\n        traceback.print_exc()\n        if self.hooks is not None:\n          if \"on_export_crash\" in dir(self.hooks):\n            ret = self.hooks.on_export_crash()\n            if not ret:\n              raise\n    finally:\n      hide_wait_box()\n\n    self.db.commit()\n    log(f\"Removing crash file {self.db_name}-crash...\")\n    os.remove(f\"{self.db_name}-crash\")\n\n    cur = self.db_cursor()\n    try:\n      cur.execute(\"analyze\")\n    finally:\n      cur.close()\n\n    self.db_close()\n\n  def import_til(self):\n    \"\"\"\n    Import IDA's Type Libraries.\n    \"\"\"\n    log(\"Importing type libraries...\")\n    cur = self.db_cursor()\n    try:\n      sql = \"select name from diff.program_data where type = 'til'\"\n      cur.execute(sql)\n      for row in cur.fetchall():\n        til = row[\"name\"]\n        if isinstance(til, bytes):\n          til = til.decode(\"utf-8\")\n\n        try:\n          add_default_til(til)\n        except:\n          log(f'Error loading TIL {row[\"name\"]}: {str(sys.exc_info()[1])}')\n    finally:\n      cur.close()\n\n    auto_wait()\n\n  def import_definitions(self):\n    \"\"\"\n    Import structs, enums and unions\n    \"\"\"\n    cur = self.db_cursor()\n    try:\n      sql = \"select type, name, value from diff.program_data where type in ('structure', 'struct', 'enum', 'union')\"\n      cur.execute(sql)\n      rows = diaphora.result_iter(cur)\n\n      new_rows = set()\n      for row in rows:\n        if row[\"name\"] is None:\n          continue\n\n        the_name = row[\"name\"].split(\" \")[0]\n        if get_struc_id(the_name) == BADADDR:\n          type_name = \"struct\"\n          if row[\"type\"] == \"enum\":\n            type_name = \"enum\"\n          elif row[\"type\"] == \"union\":\n            type_name = \"union\"\n\n          new_rows.add(row)\n          line = f\"{type_name} {row['name']};\"\n          try:\n            ret = idc.parse_decls(line)\n            if ret != 0:\n              pass\n          except:\n            log(f\"Error importing type: {str(sys.exc_info()[1])}\")\n\n      for _ in range(10):\n        for row in new_rows:\n          if row[\"name\"] is None:\n            continue\n\n          the_name = row[\"name\"].split(\" \")[0]\n          if (\n            get_struc_id(the_name) == BADADDR\n            and get_struc_id(row[\"name\"]) == BADADDR\n          ):\n            definition = self.get_valid_definition(row[\"value\"])\n            ret = idc.parse_decls(\n              definition\n            )  # Remove the \"idc.\" to reproduce some strange behaviour\n            if ret != 0:\n              pass\n    finally:\n      cur.close()\n\n    auto_wait()\n\n  def reinit(self, main_db, diff_db, create_choosers=True):\n    \"\"\"\n    Reinitialize databases.\n    \"\"\"\n    log(f\"Main database '{main_db}'.\")\n    log(f\"Diff database '{diff_db}'.\")\n\n    self.__init__(main_db)\n    self.attach_database(diff_db)\n    self.last_diff_db = diff_db\n\n    if create_choosers:\n      self.create_choosers()\n\n  def import_definitions_only(self, filename):\n    \"\"\"\n    Import only the definitions (TIL and structs/enums/unions).\n    \"\"\"\n    self.reinit(\":memory:\", filename)\n    self.import_til()\n    self.import_definitions()\n\n  def generate_asm_diff_internal(self, ea1, ea2, field, title_fmt, html=True, error_func=log):\n    \"\"\"\n    Internal use, generate a HTML table with the assembly differences.\n    \"\"\"\n    cur = self.db_cursor()\n    try:\n      sql = f\"\"\"select *\n         from (\n         select prototype, {field}, name, 1\n         from functions\n        where address = ?\n          and {field} is not null\n     union select prototype, {field}, name, 2\n         from diff.functions\n        where address = ?\n          and {field} is not null)\n        order by 4 asc\"\"\"\n      ea1 = str(int(ea1, 16))\n      ea2 = str(int(ea2, 16))\n      cur.execute(sql, (ea1, ea2))\n      rows = cur.fetchall()\n      res = None\n      if len(rows) != 2:\n        message = f\"Sorry, there is no {field} available for either the first or the second database.\"\n        error_func(message)\n      else:\n        row1 = rows[0]\n        row2 = rows[1]\n\n        html_diff = CHtmlDiff()\n        asm1 = self.prettify_asm(row1[field])\n        asm2 = self.prettify_asm(row2[field])\n        buf1 = f'{row1[\"name\"]} proc near\\n{asm1}\\n{row1[\"name\"]} endp'\n        buf2 = f'{row2[\"name\"]} proc near\\n{asm2}\\n{row2[\"name\"]} endp'\n\n        fmt = HtmlFormatter()\n        fmt.noclasses = True\n        fmt.linenos = False\n        fmt.nobackground = True\n        if not html:\n          uni_diff = difflib.unified_diff(buf1.split(\"\\n\"), buf2.split(\"\\n\"))\n          tmp = []\n          for line in uni_diff:\n            tmp.append(line.strip(\"\\n\"))\n          tmp = tmp[2:]\n          buf = \"\\n\".join(tmp)\n\n          src = highlight(buf, DiffLexer(), fmt)\n        else:\n          src = html_diff.make_file(\n            buf1.split(\"\\n\"), buf2.split(\"\\n\"), fmt, NasmLexer()\n          )\n\n        title = title_fmt % (row1[\"name\"], row2[\"name\"])\n        res = (src, title)\n    finally:\n      cur.close()\n\n    return res\n\n  def generate_asm_diff(self, ea1, ea2, html=True, error_func=log):\n    return self.generate_asm_diff_internal(\n      ea1, ea2, \"assembly\", \"Diff assembly %s - %s\", html, error_func\n    )\n\n  def generate_microcode_diff(self, ea1, ea2, error_func=log):\n    return self.generate_asm_diff_internal(\n      ea1, ea2, \"microcode\", \"Diff microcode %s - %s\", error_func\n    )\n\n  def show_asm_diff(self, item, html=True):\n    res = self.generate_asm_diff(item[1], item[3], html=html, error_func=warning)\n    if res:\n      (src, title) = res\n      cdiffer = CHtmlViewer()\n      cdiffer.Show(src, title)\n\n  def show_microcode_diff(self, item):\n    res = self.generate_microcode_diff(item[1], item[3], error_func=warning)\n    if res:\n      (src, title) = res\n      cdiffer = CHtmlViewer()\n      cdiffer.Show(src, title)\n\n  def save_asm_diff(self, ea1, ea2, filename):\n    res = self.generate_asm_diff(ea1, ea2)\n    if res:\n      (src, _) = res\n      with open(filename, \"w\", encoding=\"utf8\") as f:\n        f.write(src)\n\n  def import_one(self, item):\n    ret = ask_yn(\n      1,\n      \"AUTOHIDE DATABASE\\nDo you want to import all the type libraries, structs and enumerations?\",\n    )\n\n    if ret == 1:\n      # Import all the type libraries from the diff database\n      self.import_til()\n      # Import all the struct and enum definitions\n      self.import_definitions()\n    elif ret == -1:\n      return\n\n    # Import just the selected item\n    ea1 = str(int(item[1], 16))\n    ea2 = str(int(item[3], 16))\n    self.do_import_one(ea1, ea2, True)\n\n    new_func = self.read_function(str(ea1))\n    self.delete_function(ea1)\n    self.save_function(new_func)\n    self.db.commit()\n\n    self.update_choosers()\n\n  def show_asm(self, item, primary):\n    cur = self.db_cursor()\n    try:\n      if primary:\n        db = \"main\"\n      else:\n        db = \"diff\"\n      ea = str(int(item[1], 16))\n      sql = \"select prototype, assembly, name from %s.functions where address = ?\"\n      sql = sql % db\n      cur.execute(sql, (ea,))\n      row = cur.fetchone()\n      if row is None:\n        warning(\n          \"Sorry, there is no assembly available for the selected function.\"\n        )\n      else:\n        fmt = HtmlFormatter()\n        fmt.noclasses = True\n        fmt.linenos = True\n        asm = self.prettify_asm(row[\"assembly\"])\n        final_asm = f'; {row[\"prototype\"]}\\n{row[\"name\"]} proc near\\n{asm}\\n{row[\"name\"]} endp\\n'\n        src = highlight(final_asm, NasmLexer(), fmt)\n        title = f'Assembly for {row[\"name\"]}'\n        cdiffer = CHtmlViewer()\n        cdiffer.Show(src, title)\n    finally:\n      cur.close()\n\n  def show_pseudo(self, item, primary):\n    cur = self.db_cursor()\n    try:\n      if primary:\n        db = \"main\"\n      else:\n        db = \"diff\"\n      ea = str(int(item[1], 16))\n      sql = (\n        \"select prototype, pseudocode, name from %s.functions where address = ?\"\n      )\n      sql = sql % db\n      cur.execute(sql, (str(ea),))\n      row = cur.fetchone()\n      if row is None or row[\"prototype\"] is None or row[\"pseudocode\"] is None:\n        warning(\n          \"Sorry, there is no pseudo-code available for the selected function.\"\n        )\n      else:\n        fmt = HtmlFormatter()\n        fmt.noclasses = True\n        fmt.linenos = True\n        func = f'{row[\"prototype\"]}\\n{row[\"pseudocode\"]}'\n        src = highlight(func, CppLexer(), fmt)\n        title = f'Pseudo-code for {row[\"name\"]}'\n        cdiffer = CHtmlViewer()\n        cdiffer.Show(src, title)\n    finally:\n      cur.close()\n\n  def generate_pseudo_diff(self, ea1, ea2, html=True, error_func=log):\n    cur = self.db_cursor()\n    try:\n      sql = \"\"\"select *\n        from (\n        select prototype, pseudocode, name, 1\n         from functions\n        where address = ?\n          and pseudocode is not null\n    union\n       select prototype, pseudocode, name, 2\n         from diff.functions\n        where address = ?\n          and pseudocode is not null)\n        order by 4 asc\"\"\"\n      ea1 = str(int(ea1, 16))\n      ea2 = str(int(ea2, 16))\n      cur.execute(sql, (ea1, ea2))\n      rows = cur.fetchall()\n      res = None\n      if len(rows) != 2:\n        error_func(\n          \"Sorry, there is no pseudo-code available for either the first or the second database.\"\n        )\n      else:\n        row1 = rows[0]\n        row2 = rows[1]\n\n        html_diff = CHtmlDiff()\n        proto1 = self.decompile_and_get(int(ea1))\n        if proto1:\n          buf1 = proto1 + \"\\n\" + \"\\n\".join(self.pseudo[int(ea1)])\n        else:\n          log(\n            \"warning: cannot retrieve the current pseudo-code for the function, using the previously saved one...\"\n          )\n          buf1 = row1[\"prototype\"] + \"\\n\" + row1[\"pseudocode\"]\n        buf2 = row2[\"prototype\"] + \"\\n\" + row2[\"pseudocode\"]\n\n        if buf1 == buf2:\n          error_func(\"Both pseudo-codes are equal.\")\n\n        fmt = HtmlFormatter()\n        fmt.noclasses = True\n        fmt.linenos = False\n        fmt.nobackground = True\n        if not html:\n          uni_diff = difflib.unified_diff(buf1.split(\"\\n\"), buf2.split(\"\\n\"))\n          tmp = []\n          for line in uni_diff:\n            tmp.append(line.strip(\"\\n\"))\n          tmp = tmp[2:]\n          buf = \"\\n\".join(tmp)\n\n          src = highlight(buf, DiffLexer(), fmt)\n        else:\n          src = html_diff.make_file(\n            buf1.split(\"\\n\"), buf2.split(\"\\n\"), fmt, CppLexer()\n          )\n\n        title = f'Diff pseudo-code {row1[\"name\"]} - {row2[\"name\"]}'\n        res = (src, title)\n    finally:\n      cur.close()\n    return res\n\n  def show_pseudo_diff(self, item, html=True):\n    res = self.generate_pseudo_diff(item[1], item[3], html=html, error_func=warning)\n    if res:\n      (src, title) = res\n      cdiffer = CHtmlViewer()\n      cdiffer.Show(src, title)\n\n  def save_pseudo_diff(self, ea1, ea2, filename):\n    res = self.generate_pseudo_diff(ea1, ea2, html=True)\n    if res:\n      (src, _) = res\n      with open(filename, \"w\", encoding=\"utf8\") as f:\n        f.write(src)\n\n  def diff_external(self, item):\n    cmd_line = None\n    f = CExternalDiffingDialog()\n    f.Compile()\n    cmd = reg_read_string(\"diaphora_external_command\")\n    if cmd == \"\" or cmd is None:\n      cmd = \"your_command $1 $2\"\n    f.iStrCommand.value = cmd\n    ok = f.Execute()\n    if ok == 0:\n      cmd_line = f.iStrCommand.value\n      diff_asm = True\n    elif ok == 1:\n      cmd_line = f.iStrCommand.value\n      diff_asm = False\n\n    f.Free()\n    if cmd_line is None:\n      return\n\n    reg_write_string(\"diaphora_external_command\", cmd_line)\n    if diff_asm:\n      ret = self.diff_external_asm(item, cmd_line)\n    else:\n      ret = self.diff_external_pseudo(item, cmd_line)\n    print(\"External command returned\", ret)\n\n  def diff_external_asm(self, item, cmd_line):\n    ret = None\n    try:\n      cur = self.db_cursor()\n      sql = \"\"\"select *\n        from (\n        select prototype, assembly, name, 1\n          from functions\n         where address = ?\n           and assembly is not null\n    union\n        select prototype, assembly, name, 2\n          from diff.functions\n         where address = ?\n           and assembly is not null)\n         order by 4 asc\"\"\"\n      ea1 = str(int(item[1], 16))\n      ea2 = str(int(item[3], 16))\n      cur.execute(sql, (ea1, ea2))\n      rows = cur.fetchall()\n      if len(rows) != 2:\n        warning(\n          \"Sorry, there is no assembly available for either the first or the second database.\"\n        )\n      else:\n        row1 = rows[0]\n        row2 = rows[1]\n\n        asm1 = self.prettify_asm(row1[\"assembly\"])\n        asm2 = self.prettify_asm(row2[\"assembly\"])\n        buf1 = f'{row1[\"name\"]} proc near\\n{asm1}\\n{row1[\"name\"]} endp'\n        buf2 = f'{row2[\"name\"]} proc near\\n{asm2}\\n{row2[\"name\"]} endp'\n\n        filename1 = f\"main_{item[1]}.asm\"\n        filename2 = f\"diff_{item[3]}.asm\"\n\n        with open(filename1, \"w\", encoding=\"utf8\") as f_source:\n          with open(filename2, \"w\", encoding=\"utf8\") as f_dest:\n            f_source.writelines(buf1)\n            f_dest.writelines(buf2)\n\n        line = cmd_line.replace(\"$1\", filename1)\n        line = line.replace(\"$2\", filename2)\n        ret = os.system(line)\n    finally:\n      cur.close()\n\n    return ret\n\n  def diff_external_pseudo(self, item, cmd_line):\n    ret = None\n    cur = self.db_cursor()\n    try:\n      sql = \"\"\"select *\n        from (\n        select prototype, pseudocode, address, 1\n         from functions\n        where address = ?\n          and pseudocode is not null\n    union\n       select prototype, pseudocode, address, 2\n         from diff.functions\n        where address = ?\n          and pseudocode is not null)\n        order by 4 asc\"\"\"\n      ea1 = str(int(item[1], 16))\n      ea2 = str(int(item[3], 16))\n      cur.execute(sql, (ea1, ea2))\n      rows = cur.fetchall()\n      if len(rows) != 2:\n        warning(\n          \"Sorry, there is no pseudo-code available for either the first or the second database.\"\n        )\n      else:\n        row1 = rows[0]\n        row2 = rows[1]\n\n        filename1 = f\"main_{item[1]}.cpp\"\n        filename2 = f\"diff_{item[3]}.cpp\"\n\n        with open(filename1, \"w\", encoding=\"utf8\") as f_source:\n          with open(filename2, \"w\", encoding=\"utf8\") as f_dest:\n            f_source.writelines(f'{row1[\"prototype\"]}\\n{row1[\"pseudocode\"]}')\n            f_dest.writelines(f'{row2[\"prototype\"]}\\n{row2[\"pseudocode\"]}')\n\n        line = cmd_line.replace(\"$1\", filename1)\n        line = line.replace(\"$2\", filename2)\n        ret = os.system(line)\n    finally:\n      cur.close()\n    return ret\n\n  def graph_diff(self, ea1, name1, ea2, name2):\n    g1 = self.get_graph(str(ea1), True)\n    g2 = self.get_graph(str(ea2))\n\n    if g1 == ({}, {}) or g2 == ({}, {}):\n      warning(\n        \"Sorry, graph information is not available for one of the databases.\"\n      )\n      return False\n\n    colours = self.compare_graphs(g1, g2)\n\n    title1 = f\"Graph for {name1} (primary)\"\n    title2 = f\"Graph for {name2} (secondary)\"\n    graph1 = CDiffGraphViewer(title1, g1, colours[0])\n    graph2 = CDiffGraphViewer(title2, g2, colours[1])\n    graph1.Show()\n    graph2.Show()\n\n    set_dock_pos(title2, title1, DP_RIGHT)\n    uitimercallback_t(graph1, 100)\n    uitimercallback_t(graph2, 100)\n\n  def graph_diff_microcode(self, ea1, name1, ea2, name2):\n    g1 = self.get_graph(str(ea1), True, \"microcode\")\n    g2 = self.get_graph(str(ea2), False, \"microcode\")\n\n    if g1 == ({}, {}) or g2 == ({}, {}):\n      warning(\n        \"Sorry, graph information is not available for one of the databases.\"\n      )\n      return False\n\n    colours = self.compare_graphs(g1, g2)\n\n    title1 = f\"Microcode graph for {name1} (primary)\"\n    title2 = f\"Microcode graph for {name2} (secondary)\"\n    graph1 = CDiffGraphViewer(title1, g1, colours[0])\n    graph2 = CDiffGraphViewer(title2, g2, colours[1])\n    graph1.Show()\n    graph2.Show()\n\n    set_dock_pos(title2, title1, DP_RIGHT)\n    uitimercallback_t(graph1, 100)\n    uitimercallback_t(graph2, 100)\n\n  def get_calls_graph(self, name, mtype, db):\n    \"\"\"\n    Get the call graph for the given function.\n    \"\"\"\n    cur = self.db_cursor()\n    rows = []\n    try:\n      sql = f\"\"\"select cg.type type, f2.address ea1, f2.name name1,\n             f1.address ea2, f1.name name2\n          from {db}.callgraph cg,\n             {db}.functions f1,\n             {db}.functions f2\n         where f1.name = ?\n           and cg.func_id = f1.id\n           and cg.type = ?\n           and f2.address = cg.address \"\"\"\n      cur.execute(sql, (name, mtype))\n      rows = cur.fetchall()\n    finally:\n      cur.close()\n\n    return rows\n\n  def build_calls_graph(self, title, callers, callees, name):\n    \"\"\"\n    Build the CCallGraphViewer objects.\n    \"\"\"\n    g = CCallGraphViewer(title, callers, callees, name)\n    return g\n\n  def show_callgraph_context(self, name1, name2):\n    \"\"\"\n    Show the callers and the callees for the given functions.\n    \"\"\"\n    main_callers = self.get_calls_graph(name1, \"caller\", \"main\")\n    main_callees = self.get_calls_graph(name1, \"callee\", \"main\")\n    diff_callers = self.get_calls_graph(name2, \"caller\", \"diff\")\n    diff_callees = self.get_calls_graph(name2, \"callee\", \"diff\")\n\n    base_title = \"Call graph context for {name}\"\n    title1 = base_title.format(name=name1)\n    title2 = base_title.format(name=name2)\n    g1 = self.build_calls_graph(title1, main_callers, main_callees, name1)\n    g2 = self.build_calls_graph(title2, diff_callers, diff_callees, name2)\n    g1.Show()\n    g2.Show()\n\n    set_dock_pos(title2, title1, DP_RIGHT)\n    uitimercallback_t(g1, 100)\n    uitimercallback_t(g2, 100)\n\n  def import_instruction(self, ins_data1, ins_data2):\n    \"\"\"\n    Try to import an instruction.\n    \"\"\"\n    ea1 = self.get_base_address() + int(ins_data1[0])\n    _, cmt1, cmt2, operand_names, name, mtype, _, mcmt, mitp = ins_data2\n    if operand_names is None:\n      operand_names = []\n\n    # Set instruction level comments\n    if cmt1 is not None and get_cmt(ea1, 0) is None:\n      set_cmt(ea1, cmt1, 0)\n\n    if cmt2 is not None and get_cmt(ea1, 1) is None:\n      set_cmt(ea1, cmt2, 1)\n\n    for operand_name in operand_names:\n      index, name = operand_name\n      if name:\n        ida_bytes.set_forced_operand(ea1, index, name)\n\n    if mcmt is not None:\n      cfunc = decompile(ea1)\n      if cfunc is not None:\n        tl = idaapi.treeloc_t()\n        tl.ea = ea1\n        #\n        # We might have a pseudo-code comment without item_preciser_t information\n        # (it's None). In such cases, simply don't assign anything to the member\n        # treeloc_t.itp or it will trigger an error.\n        #\n        # Fix for issue #269.\n        #\n        if mitp is not None:\n          tl.itp = mitp\n\n        comment = mcmt\n        cfunc.set_user_cmt(tl, comment)\n        cfunc.del_orphan_cmts()\n        cfunc.save_user_cmts()\n\n    tmp_ea = None\n    the_type = False\n    data_refs = list(DataRefsFrom(ea1))\n    if len(data_refs) > 0:\n      # Global variables\n      tmp_ea = data_refs[0]\n      if tmp_ea in self.names:\n        curr_name = get_ea_name(tmp_ea)\n        if curr_name != name and self.is_auto_generated(curr_name):\n          set_name(tmp_ea, name, SN_CHECK)\n          the_type = False\n      else:\n        # If it's an object, we don't want to rename the offset, we want to\n        # rename the true global variable.\n        if is_off(get_full_flags(tmp_ea), OPND_ALL):\n          tmp_ea = next(DataRefsFrom(tmp_ea), tmp_ea)\n\n        set_name(tmp_ea, name, SN_CHECK)\n        the_type = True\n    else:\n      # Functions\n      code_refs = list(CodeRefsFrom(ea1, 0))\n      if len(code_refs) == 0:\n        code_refs = list(CodeRefsFrom(ea1, 1))\n\n      if len(code_refs) > 0:\n        curr_name = get_ea_name(code_refs[0])\n        if curr_name != name and self.is_auto_generated(curr_name):\n          set_name(code_refs[0], name, SN_CHECK)\n          tmp_ea = code_refs[0]\n          the_type = True\n\n    if tmp_ea is not None and the_type:\n      if mtype is not None and idc.get_type(tmp_ea) != mtype:\n        if isinstance(mtype, bytes):\n          mtype = mtype.decode(\"utf-8\")\n        SetType(tmp_ea, mtype)\n\n  def row_is_importable(self, ea2, import_syms):\n    \"\"\"\n    Check if the given row is importable.\n    \"\"\"\n    ea = str(ea2)\n    if ea not in import_syms:\n      return False\n\n    operand_names = import_syms[ea][3]\n\n    # Has cmt1\n    if import_syms[ea][1] is not None:\n      return True\n\n    # Has cmt2\n    if import_syms[ea][2] is not None:\n      return True\n\n    # Has operand names\n    operand_names = import_syms[ea][3]\n    if operand_names is not None:\n      for operand_name in operand_names:\n        if operand_name[1] != \"\":\n          return True\n\n    # Has a name\n    if import_syms[ea][4] is not None:\n      return True\n\n    # Has pseudocode comment\n    if import_syms[ea][6] is not None:\n      return True\n\n    return False\n\n  def do_import_instruction_level_item(self, diff_rows, import_syms, matched_syms):\n    \"\"\"\n    Internal use, import everything that can be imported at assembly instruction\n    level.\n    \"\"\"\n    lines1 = diff_rows[0][\"assembly\"]\n    lines2 = diff_rows[1][\"assembly\"]\n\n    address1 = json.loads(diff_rows[0][\"assembly_addrs\"])\n    address2 = json.loads(diff_rows[1][\"assembly_addrs\"])\n\n    diff_list = difflib._mdiff(lines1.splitlines(1), lines2.splitlines(1))\n    for x in diff_list:\n      left, right, _ = x\n      left_line = left[0]\n      right_line = right[0]\n\n      if right_line == \"\" or left_line == \"\":\n        continue\n\n      # At this point, we know which line number matches with\n      # which another line number in both databases.\n      ea1 = address1[int(left_line) - 1]\n      ea2 = address2[int(right_line) - 1]\n      changed = left[1].startswith(\"\\x00-\") and right[1].startswith(\"\\x00+\")\n      is_importable = self.row_is_importable(ea2, import_syms)\n      if changed or is_importable:\n        ea1 = str(ea1)\n        ea2 = str(ea2)\n        if ea1 in matched_syms and ea2 in import_syms:\n          self.import_instruction(matched_syms[ea1], import_syms[ea2])\n        if ea2 in matched_syms and ea1 in import_syms:\n          self.import_instruction(matched_syms[ea2], import_syms[ea1])\n\n  def import_instruction_level(self, ea1, ea2, cur):\n    cur = self.db_cursor()\n    try:\n      # Check first if we have any importable items\n      sql = \"\"\" select distinct ins.address ea, ins.disasm dis, ins.comment1 cmt1, ins.comment2 cmt2, ins.operand_names operand_names, ins.name name, ins.type type, ins.pseudocomment cmt, ins.pseudoitp itp\n          from diff.function_bblocks bb,\n             diff.functions f,\n             diff.bb_instructions bbi,\n             diff.instructions ins\n         where f.id = bb.function_id\n           and bbi.basic_block_id = bb.basic_block_id\n           and ins.id = bbi.instruction_id\n           and f.address = ?\n           and (ins.comment1 is not null\n           or ins.comment2 is not null\n           or ins.operand_names is not null\n           or ins.name is not null\n           or pseudocomment is not null) \"\"\"\n      cur.execute(sql, (str(ea2),))\n      import_rows = cur.fetchall()\n      if len(import_rows) > 0:\n        import_syms = {}\n        for row in import_rows:\n          operand_names = row[\"operand_names\"]\n          if operand_names is not None:\n            operand_names = json.loads(operand_names)\n          import_syms[row[\"ea\"]] = [\n            row[\"ea\"],\n            row[\"cmt1\"],\n            row[\"cmt2\"],\n            operand_names,\n            row[\"name\"],\n            row[\"type\"],\n            row[\"dis\"],\n            row[\"cmt\"],\n            row[\"itp\"],\n          ]\n\n        # Check in the current database\n        sql = \"\"\" select distinct ins.address ea, ins.disasm dis, ins.comment1 cmt1, ins.comment2 cmt2, ins.operand_names operand_names, ins.name name, ins.type type, ins.pseudocomment cmt, ins.pseudoitp itp\n          from function_bblocks bb,\n             functions f,\n             bb_instructions bbi,\n             instructions ins\n           where f.id = bb.function_id\n           and bbi.basic_block_id = bb.basic_block_id\n           and ins.id = bbi.instruction_id\n           and f.address = ?\"\"\"\n        cur.execute(sql, (str(ea1),))\n        match_rows = cur.fetchall()\n        if len(match_rows) > 0:\n          matched_syms = {}\n          for row in match_rows:\n            operand_names = row[\"operand_names\"]\n            if operand_names is not None:\n              operand_names = json.loads(operand_names)\n            matched_syms[row[\"ea\"]] = [\n              row[\"ea\"],\n              row[\"cmt1\"],\n              row[\"cmt2\"],\n              operand_names,\n              row[\"name\"],\n              row[\"type\"],\n              row[\"dis\"],\n              row[\"cmt\"],\n              row[\"itp\"],\n            ]\n\n          # We have 'something' to import, let's diff the assembly...\n          sql = \"\"\"select *\n           from (\n          select assembly, assembly_addrs, 1\n           from functions\n          where address = ?\n            and assembly is not null\n       union select assembly, assembly_addrs, 2\n           from diff.functions\n          where address = ?\n            and assembly is not null)\n          order by 2 asc\"\"\"\n          cur.execute(sql, (str(ea1), str(ea2)))\n          diff_rows = cur.fetchall()\n          if len(diff_rows) > 0:\n            try:\n              self.do_import_instruction_level_item(\n                diff_rows, import_syms, matched_syms\n              )\n            except:\n              log(f\"Error importing item: {str(sys.exc_info()[1])}\")\n              traceback.print_exc()\n    finally:\n      cur.close()\n\n  def do_import_one(self, ea1, ea2, force=False):\n    cur = self.db_cursor()\n    try:\n      sql = \"select prototype, comment, mangled_function, function_flags from diff.functions where address = ?\"\n      cur.execute(sql, (str(ea2),))\n      row = cur.fetchone()\n      if row is not None:\n        proto = row[\"prototype\"]\n        comment = row[\"comment\"]\n        name = row[\"mangled_function\"]\n        flags = row[\"function_flags\"]\n\n        ea1 = int(ea1)\n        if not name.startswith(\"sub_\") or force:\n          if not set_name(ea1, name, SN_NOWARN | SN_NOCHECK):\n            for i in range(10):\n              if set_name(ea1, f\"{name}_{i}\", SN_NOWARN | SN_NOCHECK):\n                break\n\n        if proto is not None and proto != \"int()\":\n          SetType(ea1, proto)\n\n        if comment is not None and comment != \"\":\n          func = get_func(ea1)\n          if func is not None:\n            set_func_cmt(func, comment, 1)\n\n        if flags is not None:\n          set_func_attr(ea1, FUNCATTR_FLAGS, flags)\n\n        self.import_instruction_level(ea1, ea2, cur)\n    finally:\n      cur.close()\n\n  def import_selected(self, items, selected, only_auto):\n    log_refresh(\"Importing selected row(s)...\")\n\n    # Import all the type libraries from the diff database\n    self.import_til()\n    # Import all the struct and enum definitions\n    self.import_definitions()\n\n    new_items = []\n    for index in selected:\n      item = items[index]\n      name1 = item[2]\n      if not only_auto or name1.startswith(\"sub_\"):\n        new_items.append(item)\n    self.import_items(new_items)\n\n  def import_items(self, items):\n    to_import = set()\n    # Import all the function names and comments\n    for item in items:\n      ea1 = str(int(item[1], 16))\n      ea2 = str(int(item[3], 16))\n      self.do_import_one(ea1, ea2)\n      to_import.add(ea1)\n\n    try:\n      show_wait_box(\"Updating primary database...\")\n      total = 0\n      for ea in to_import:\n        ea = str(ea)\n        new_func = self.read_function(ea)\n        self.delete_function(ea)\n        self.save_function(new_func)\n        total += 1\n\n      self.db.execute(\"analyze\")\n      self.db.commit()\n\n      # Update the choosers after importing\n      self.update_choosers()\n    finally:\n      hide_wait_box()\n\n  def update_choosers(self):\n    for chooser in [\n      self.best_chooser,\n      self.partial_chooser,\n      self.unreliable_chooser,\n      self.multimatch_chooser\n    ]:\n      for i, item in enumerate(chooser.items):\n        ea = int(item[1], 16)\n        name = item[2]\n        func_name = get_func_name(ea)\n        if func_name is not None and func_name != \"\" and func_name != name:\n          chooser.items[i][2] = func_name\n      chooser.Refresh()\n\n  def do_import_all(self, items):\n    # Import all the type libraries from the diff database\n    self.import_til()\n    # Import all the struct and enum definitions\n    self.import_definitions()\n    # Import all the items in the chooser\n    self.import_items(items)\n\n  def do_import_all_auto(self, items):\n    # Import all the type libraries from the diff database\n    self.import_til()\n    # Import all the struct and enum definitions\n    self.import_definitions()\n\n    # Import all the items in the chooser for sub_* functions\n    new_items = []\n    for item in items:\n      name1 = item[2]\n      if name1.startswith(\"sub_\"):\n        new_items.append(item)\n\n    self.import_items(new_items)\n\n  def import_all(self, items):\n    try:\n      self.do_import_all(items)\n    except:\n      log(f\"import_all(): {str(sys.exc_info()[1])}\")\n      traceback.print_exc()\n\n  def import_all_auto(self, items):\n    try:\n      self.do_import_all_auto(items)\n    except:\n      log(f\"import_all(): {str(sys.exc_info()[1])}\")\n      traceback.print_exc()\n\n  def do_decompile(self, f):\n    # pylint: disable-next=unexpected-keyword-arg\n    return decompile(f, flags=DECOMP_NO_WAIT)\n\n  def get_plain_microcode_line(self, color_line):\n    \"\"\"\n    Remove colors, trailing spaces and the basic block numbers from a microcode\n    line.\n    \"\"\"\n    plain_line = ida_lines.tag_remove(color_line)\n    plain_line = plain_line.strip(\" \")\n\n    mnem = None\n    tokens = plain_line.split(\" \")\n    for _, x in enumerate(tokens[1:]):\n      if not x.isdigit():\n        mnem = x\n        pos = plain_line.find(x)\n        plain_line = plain_line[pos:]\n        break\n    return plain_line, mnem\n\n  def get_microcode_bblocks(self, mba):\n    mba.build_graph()\n    total = mba.qty\n    bblocks = {}\n    for i in range(total):\n      if i == 0:\n        continue\n\n      block = mba.get_mblock(i)\n      if block.type == hr.BLT_STOP:\n        continue\n\n      vp = hr.qstring_printer_t(None, True)\n      block._print(vp)\n      src = vp.s\n      lines = src.splitlines()\n\n      new_lines = []\n      for line in lines:\n        color_line = line.strip(\"\\n\").strip(\" \")\n        pos = color_line.find(\";\")\n        line_ea = None\n        comments = None\n        if pos > -1:\n          comments = color_line[pos + 1:].strip(\" \")\n          line_ea = int(comments.split(\" \")[0], 16)\n          color_line = color_line[:pos]\n        plain_line, mnem = self.get_plain_microcode_line(color_line)\n        new_lines.append(\n          {\n            \"address\": line_ea,\n            \"line\": plain_line,\n            \"mnemonic\": mnem,\n            \"color_line\": color_line,\n            \"comments\": comments,\n          }\n        )\n\n      bblocks[i] = {\"start\": block.start, \"end\": block.end, \"lines\": new_lines}\n\n    bb_relations = {}\n    for i in range(total):\n      if i == 0 or i not in bblocks:\n        continue\n\n      block = mba.get_mblock(i)\n      for succ in block.succset:\n        try:\n          bb_relations[i].append(succ)\n        except KeyError:\n          bb_relations[i] = [succ]\n\n    return bblocks, bb_relations\n\n  def get_microcode(self, f, ea):\n    if not self.decompiler_available or not self.export_microcode:\n      return [], []\n\n    mbr = hr.mba_ranges_t(f)\n    hf = hr.hexrays_failure_t()\n    ml = hr.mlist_t()\n    vp = CPrinter_t()\n    mba = hr.gen_microcode(mbr, hf, ml, hr.DECOMP_WARNINGS, hr.MMAT_GENERATED)\n    if mba is None:\n      return [], []\n\n    mba._print(vp)\n    bblocks = []\n    bb_relations = []\n    bblocks, bb_relations = self.get_microcode_bblocks(mba)\n\n    self.microcode[ea] = []\n    for line in vp.mc:\n      line = ida_lines.tag_remove(line).strip(\"\\n\")\n      pos = line.find(\";\")\n      if pos > -1:\n        line = line[:pos]\n\n      tokens = re.split(r\"\\W+\", line)\n      tokens = list(filter(None, tokens))\n      if len(tokens) > 2:\n        self.microcode[ea].append(line.strip(\" \"))\n    return bblocks, bb_relations\n\n  def decompile_and_get(self, ea):\n    if not self.decompiler_available or is_spec_ea(ea):\n      return False\n\n    # Workaround for a bug in IDA that might trigger the following error:\n    #\n    # max non-trivial tinfo_t count has been reached\n    #\n    if config.DIAPHORA_WORKAROUND_MAX_TINFO_T:\n      if len(self._funcs_cache) % 10000 == 0:\n        idaapi.clear_cached_cfuncs()\n\n    decompiler_plugin = os.getenv(\"DIAPHORA_DECOMPILER_PLUGIN\")\n    if decompiler_plugin is None:\n      decompiler_plugin = \"hexrays\"\n    if not init_hexrays_plugin() and not (\n      load_plugin(decompiler_plugin) and init_hexrays_plugin()\n    ):\n      self.decompiler_available = False\n      return False\n\n    f = get_func(ea)\n    if f is None:\n      return False\n\n    cfunc = self.do_decompile(f)\n    if cfunc is None:\n      # Failed to decompile\n      return False\n\n    visitor = CAstVisitor(cfunc)\n    visitor.apply_to(cfunc.body, None)\n    self.pseudo_hash[ea] = visitor.primes_hash\n\n    cmts = idaapi.restore_user_cmts(cfunc.entry_ea)\n    if cmts is not None:\n      for tl, cmt in cmts.items():\n        self.pseudo_comments[tl.ea - self.get_base_address()] = [\n          str(cmt),\n          tl.itp,\n        ]\n\n    sv = cfunc.get_pseudocode()\n    self.pseudo[ea] = []\n    first_line = None\n    for sline in sv:\n      line = tag_remove(sline.line)\n      if line.startswith(\"//\"):\n        continue\n\n      if first_line is None:\n        first_line = line\n      else:\n        self.pseudo[ea].append(line)\n\n    self.microcode[ea] = []\n    self.get_microcode(f, ea)\n    return first_line\n\n  def guess_type(self, ea):\n    t = guess_type(ea)\n    if not self.use_decompiler:\n      return t\n    else:\n      try:\n        ret = self.decompile_and_get(ea)\n        if ret:\n          t = ret\n      except:\n        # pylint: disable-next=consider-using-f-string\n        log(\"Cannot decompile 0x%x: %s\" % (ea, str(sys.exc_info()[1])))\n    return t\n\n  def register_menu_action(self, action_name, action_desc, handler, hotkey=None):\n    show_choosers_action = idaapi.action_desc_t(\n      action_name, action_desc, handler, hotkey, None, -1\n    )\n    idaapi.register_action(show_choosers_action)\n    idaapi.attach_action_to_menu(\n      f\"Edit/Plugins/{action_desc}\", action_name, idaapi.SETMENU_APP\n    )\n\n  def register_menu(self):\n    # pylint: disable-next=global-statement\n    global g_bindiff\n    g_bindiff = self\n\n    menu_items = [\n      [\n        \"diaphora:show_results\",\n        \"Diaphora - Show results\",\n        CIdaMenuHandlerShowChoosers(),\n        \"F3\",\n      ],\n      [\n        \"diaphora:save_results\",\n        \"Diaphora - Save results\",\n        CIdaMenuHandlerSaveResults(),\n        None,\n      ],\n      [\n        \"diaphora:load_results\",\n        \"Diaphora - Load results\",\n        CIdaMenuHandlerLoadResults(),\n        None,\n      ],\n    ]\n    for item in menu_items:\n      action_name, action_desc, action_handler, hotkey = item\n      self.register_menu_action(action_name, action_desc, action_handler, hotkey)\n\n    warning(\n      \"\"\"AUTOHIDE REGISTRY\\nIf you close one tab you can always re-open it by pressing F3\nor selecting Edit -> Plugins -> Diaphora - Show results\"\"\"\n    )\n\n  # Ripped out from REgoogle (which is dead since long ago...)\n  def constant_filter(self, value):\n    \"\"\"Filter for certain constants/immediate values. Not all values should be\n    taken into account for searching. Especially not very small values that may\n    just contain the stack frame size.\n    \"\"\"\n    # no small values\n    if value < 0x1000:\n      return False\n\n    if (\n      value & 0xFFFFFF00 == 0xFFFFFF00\n      or value & 0xFFFF00 == 0xFFFF00\n      or value & 0xFFFFFFFFFFFFFF00 == 0xFFFFFFFFFFFFFF00\n      or value & 0xFFFFFFFFFFFF00 == 0xFFFFFFFFFFFF00\n    ):\n      return False\n\n    # no single bits sets - mostly defines / flags\n    for i in range(64):\n      if value == (1 << i):\n        return False\n\n    return True\n\n  def is_constant(self, oper, ea):\n    value = oper.value\n    # make sure, its not a reference but really constant\n    if value in DataRefsFrom(ea):\n      return False\n\n    return True\n\n  def get_disasm(self, ea):\n    mnem = print_insn_mnem(ea)\n    op1 = print_operand(ea, 0)\n    op2 = print_operand(ea, 1)\n    line = f\"{mnem.ljust(8)} {op1}\"\n    if op2 != \"\":\n      line += f\", {op2}\"\n    return line\n\n  def get_function_names(self, f):\n    name = get_func_name(int(f))\n    true_name = name\n    demangle_named_name = demangle_name(name, INF_SHORT_DN)\n    if demangle_named_name == \"\":\n      demangle_named_name = None\n\n    if demangle_named_name is not None:\n      name = demangle_named_name\n\n    return name, true_name, demangle_named_name\n\n  def extract_function_callers(self, f):\n    # Calculate the callers *but* considering data references to functions from\n    # functions as code references.\n    callers = list()\n    refs = list(CodeRefsTo(f, 0))\n    refs.extend(DataRefsTo(f))\n    for caller in refs:\n      caller_func = get_func(caller)\n      if caller_func and caller_func.start_ea not in callers:\n        callers.append(caller_func.start_ea)\n    return callers\n\n  def extract_function_constants(self, ins, x, constants):\n    for operand in ins.ops:\n      if operand.type == o_imm:\n        if self.is_constant(operand, x) and self.constant_filter(operand.value):\n          constants.append(operand.value)\n      elif operand.type == o_displ:\n        if self.constant_filter(operand.addr):\n          constants.append(operand.addr)\n\n      drefs = DataRefsFrom(x)\n      for dref in drefs:\n        if get_func(dref) is None:\n          str_constant = get_string_at(dref)\n          if str_constant is not None:\n            str_constant = str_constant.decode(\"utf-8\", \"backslashreplace\")\n            if str_constant not in constants:\n              constants.append(str_constant)\n    return constants\n\n  def extract_function_switches(self, x, switches):\n    switch = get_switch_info(x)\n    if switch:\n      switch_cases = switch.get_jtable_size()\n      results = calc_switch_cases(x, switch)\n\n      if results is not None:\n        # It seems that IDAPython for idaq64 has some bug when reading\n        # switch's cases. Do not attempt to read them if the 'cur_case'\n        # returned object is not iterable.\n        can_iter = False\n        switch_cases_values = set()\n        for cur_case in results.cases:\n          if \"__iter__\" not in dir(cur_case):\n            break\n\n          can_iter |= True\n          for case_id in cur_case:\n            switch_cases_values.add(case_id)\n\n        if can_iter:\n          switches.append([switch_cases, list(switch_cases_values)])\n\n    return switches\n\n  def extract_function_mdindex(\n    self, bb_topological, bb_topological_sorted, bb_edges, bb_topo_num, bb_degree\n  ):\n    md_index = 0\n    if bb_topological:\n      bb_topo_order = {}\n      for i, scc in enumerate(bb_topological_sorted):\n        for bb in scc:\n          bb_topo_order[bb] = i\n      tuples = []\n      for src, dst in bb_edges:\n        tuples.append(\n          (\n            bb_topo_order[bb_topo_num[src]],\n            bb_degree[src][0],\n            bb_degree[src][1],\n            bb_degree[dst][0],\n            bb_degree[dst][1],\n          )\n        )\n      rt2, rt3, rt5, rt7 = (decimal.Decimal(p).sqrt() for p in (2, 3, 5, 7))\n      emb_tuples = (\n        sum((z0, z1 * rt2, z2 * rt3, z3 * rt5, z4 * rt7))\n        for z0, z1, z2, z3, z4 in tuples\n      )\n      md_index = sum((1 / emb_t.sqrt() for emb_t in emb_tuples))\n      md_index = str(md_index)\n    return md_index\n\n  def extract_function_pseudocode_features(self, f):\n    pseudo = None\n    pseudo_hash1 = None\n    pseudo_hash2 = None\n    pseudo_hash3 = None\n    pseudo_lines = 0\n    pseudocode_primes = None\n    if f in self.pseudo:\n      pseudo = \"\\n\".join(self.pseudo[f])\n      pseudo_lines = len(self.pseudo[f])\n      pseudo_hash1, pseudo_hash2, pseudo_hash3 = self.kfh.hash_bytes(\n        pseudo\n      ).split(\";\")\n      if pseudo_hash1 == \"\":\n        pseudo_hash1 = None\n      if pseudo_hash2 == \"\":\n        pseudo_hash2 = None\n      if pseudo_hash3 == \"\":\n        pseudo_hash3 = None\n      pseudocode_primes = str(self.pseudo_hash[f])\n    return (\n      pseudo,\n      pseudo_lines,\n      pseudo_hash1,\n      pseudocode_primes,\n      pseudo_hash2,\n      pseudo_hash3,\n    )\n\n  def extract_function_assembly_features(self, assembly, f, image_base):\n    asm = []\n    keys = list(assembly.keys())\n    keys.sort()\n\n    # Collect the ordered list of addresses, as shown in the assembly\n    # viewer (when diffing). It will be extremely useful for importing\n    # stuff later on.\n    assembly_addrs = []\n\n    # After sorting out the addresses of basic blocks, be sure that the\n    # very first address is always the entry point, no matter at what\n    # address it is.\n    base = f - image_base\n    if base in keys:\n      keys.remove(base)\n    keys.insert(0, base)\n    for key in keys:\n      if key not in assembly:\n        log(f\"Key not in `assembly` list? Key {key} Assembly {assembly}\")\n        continue\n      for line in assembly[key]:\n        assembly_addrs.append(line[0])\n        asm.append(line[1])\n    asm = \"\\n\".join(asm)\n    return asm, assembly_addrs\n\n  def get_decoded_instruction(self, x):\n    decoded_size, ins = diaphora_decode(x)\n    if ins.ops[0].type in [o_mem, o_imm, o_far, o_near, o_displ]:\n      decoded_size -= ins.ops[0].offb\n    if ins.ops[1].type in [o_mem, o_imm, o_far, o_near, o_displ]:\n      decoded_size -= ins.ops[1].offb\n    if decoded_size <= 0:\n      decoded_size = 1\n\n    return ins, decoded_size\n\n  def extract_function_topological_information(self, bb_relations, bb_topological):\n    loops = 0\n    strongly_connected = None\n    strongly_connected_spp = 0\n    bb_topological_sorted = None\n    try:\n      strongly_connected = strongly_connected_components(bb_relations)\n      bb_topological_sorted = robust_topological_sort(bb_topological)\n      bb_topological = json.dumps(bb_topological_sorted)\n      strongly_connected_spp = 1\n      for item in strongly_connected:\n        val = len(item)\n        if val > 1:\n          strongly_connected_spp *= self.primes[val]\n    except RecursionError:\n      # XXX: FIXME: The original implementation that we're using is recursive\n      # and can fail. We really need to create our own non recursive version.\n      strongly_connected = []\n      bb_topological = None\n    except:\n      traceback.print_exc()\n      raise\n\n    loops = 0\n    for sc in strongly_connected:\n      if len(sc) > 1:\n        loops += 1\n      else:\n        if sc[0] in bb_relations and sc[0] in bb_relations[sc[0]]:\n          loops += 1\n\n    return (\n      bb_topological,\n      bb_topological_sorted,\n      strongly_connected,\n      loops,\n      strongly_connected_spp,\n    )\n\n  def extract_line_mnem_disasm(self, x):\n    mnem = print_insn_mnem(x)\n    try:\n      disasm = GetDisasm(x)\n    except UnicodeDecodeError:\n      # This is a workaround for a rare error getting the disassembly for a\n      # line with some UTF-8 characters that Python fails to handle properly\n      disasm = self.get_disasm(x)\n\n    return mnem, disasm\n\n  def extract_microcode(self, f):\n    micro = None\n    micro_spp = 1\n    clean_micro = None\n    mnemonics = set()\n    if self.export_microcode and f in self.microcode:\n      micro = \"\\n\".join(self.microcode[f])\n      ret = []\n      for line in self.microcode[f]:\n        tokens = line.split(\" \")\n        for x in tokens[1:]:\n          if not x.isdigit():\n            mnem = x\n            mnemonics.add(mnem)\n            pos = mnem.find(\".\")\n            if pos > -1:\n              mnem = mnem[:pos]\n            break\n\n        if mnem == \"\":\n          continue\n\n        line = line[line.find(mnem):]\n        ret.append(line)\n        if mnem in self.microcode_ins_list:\n          micro_spp *= self.primes[self.microcode_ins_list.index(mnem)]\n        else:\n          log(\n            f\"Warning: Mnemonic {repr(mnem)} not found in the list of microcode instructions!\"\n          )\n      clean_micro = self.get_cmp_asm_lines(\"\\n\".join(ret))\n    return micro, clean_micro, micro_spp\n\n  def get_microcode_instructions(self):\n    if HAS_HEXRAYS:\n      instructions = []\n      for x in dir(hr):\n        if x.startswith(\"m_\"):\n          mnem = x[2:]\n          if mnem not in instructions:\n            instructions.append(x[2:])\n\n      instructions.sort()\n      return instructions\n    return []\n\n  def read_function(self, ea):\n    \"\"\"\n    Extract anything and everything we (might) need from a function.\n\n    This is a horribly big (read: huge) function that, from time to time, I try\n    to make a bit smaller. Feel free to do the same...\n    \"\"\"\n    name, true_name, demangle_named_name = self.get_function_names(ea)\n    # Call hooks immediately after we have a proper function name\n    if self.hooks is not None:\n      if \"before_export_function\" in dir(self.hooks):\n        ret = self.hooks.before_export_function(ea, name)\n        if not ret:\n          return False\n\n    f = int(ea)\n    func = get_func(f)\n    if not func:\n      # pylint: disable-next=consider-using-f-string\n      log(\"Cannot get a function object for 0x%x\" % f)\n      return False\n\n    export_time = time.monotonic()\n    flow = FlowChart(func)\n    size = 0\n\n    if not self.ida_subs:\n      # Unnamed function, ignore it...\n      if (\n        name.startswith(\"sub_\")\n        or name.startswith(\"j_\")\n        or name.startswith(\"unknown\")\n        or name.startswith(\"nullsub_\")\n      ):\n        debug_refresh(f\"Skipping function {repr(name)}\")\n        return False\n\n      # Already recognized runtime's function?\n      flags = get_func_attr(f, FUNCATTR_FLAGS)\n      if flags & FUNC_LIB or flags == -1:\n        debug_refresh(f\"Skipping library function {repr(name)}\")\n        return False\n\n    if self.exclude_library_thunk:\n      # Skip library and thunk functions\n      flags = get_func_attr(f, FUNCATTR_FLAGS)\n      if flags & FUNC_LIB or flags & FUNC_THUNK or flags == -1:\n        debug_refresh(f\"Skipping thunk function {repr(name)}\")\n        return False\n\n      if name.startswith(\"nullsub_\"):\n        debug_refresh(f\"Skipping nullsub function {repr(name)}\")\n        return False\n\n    image_base = self.get_base_address()\n    nodes = 0\n    edges = 0\n    instructions = 0\n    mnems = []\n    dones = {}\n    names = set()\n    bytes_hash = []\n    bytes_sum = 0\n    function_hash = []\n    outdegree = 0\n    indegree = len(list(CodeRefsTo(f, 1)))\n    assembly = {}\n    basic_blocks_data = {}\n    bb_relations = {}\n    bb_topo_num = {}\n    bb_topological = {}\n    switches = []\n    bb_degree = {}\n    bb_edges = []\n    constants = []\n\n    # The callees will be calculated later\n    callees = []\n    callers = self.extract_function_callers(f)\n\n    mnemonics_spp = 1\n    cpu_ins_list = GetInstructionList()\n    cpu_ins_list.sort()\n\n    current_head = BADADDR\n    for block in flow:\n      if block.end_ea == 0 or block.end_ea == BADADDR:\n        # pylint: disable-next=consider-using-f-string\n        print(\"0x%08x: Skipping bad basic block\" % f)\n        continue\n\n      nodes += 1\n      instructions_data = []\n\n      block_ea = block.start_ea - image_base\n      idx = len(bb_topological)\n      bb_topological[idx] = []\n      bb_topo_num[block_ea] = idx\n\n      for current_head in list(Heads(block.start_ea, block.end_ea)):\n        mnem, disasm = self.extract_line_mnem_disasm(current_head)\n        size += get_item_size(current_head)\n        instructions += 1\n\n        if mnem in cpu_ins_list:\n          mnemonics_spp *= self.primes[cpu_ins_list.index(mnem)]\n\n        try:\n          assembly[block_ea].append([current_head - image_base, disasm])\n        except KeyError:\n          if nodes == 1:\n            assembly[block_ea] = [[current_head - image_base, disasm]]\n          else:\n            assembly[block_ea] = [\n              # pylint: disable-next=consider-using-f-string\n              [current_head - image_base, \"loc_%x:\" % current_head],\n              [current_head - image_base, disasm],\n            ]\n\n        ins, decoded_size = self.get_decoded_instruction(current_head)\n        constants = self.extract_function_constants(ins, current_head, constants)\n\n        curr_bytes = get_bytes(current_head, decoded_size, False)\n        if curr_bytes is None or len(curr_bytes) != decoded_size:\n          # pylint: disable-next=consider-using-f-string\n          log(\"Failed to read %d bytes at [%08x]\" % (decoded_size, current_head))\n          continue\n\n        bytes_hash.append(curr_bytes)\n        bytes_sum += sum(curr_bytes)\n\n        function_hash.append(get_bytes(current_head, get_item_size(current_head), False))\n        outdegree += len(list(CodeRefsFrom(current_head, 0)))\n        mnems.append(mnem)\n        op_value = get_operand_value(current_head, 1)\n        if op_value == -1:\n          op_value = get_operand_value(current_head, 0)\n\n        tmp_name = None\n        if op_value != BADADDR and op_value in self.names:\n          tmp_name = self.names[op_value]\n          demangle_named_name = demangle_name(tmp_name, INF_SHORT_DN)\n          if demangle_named_name is not None:\n            tmp_name = demangle_named_name\n            pos = tmp_name.find(\"(\")\n            if pos > -1:\n              tmp_name = tmp_name[:pos]\n\n          if not tmp_name.startswith(\"sub_\") and not tmp_name.startswith(\"nullsub_\"):\n            names.add(tmp_name)\n\n        # Calculate the callees\n        refs = list(CodeRefsFrom(current_head, 0))\n        for callee in refs:\n          callee_func = get_func(callee)\n          if callee_func and callee_func.start_ea != func.start_ea:\n            if callee_func.start_ea not in callees:\n              callees.append(callee_func.start_ea)\n\n        if len(refs) == 0:\n          refs = DataRefsFrom(current_head)\n\n        tmp_type = None\n        for ref in refs:\n          if ref in self.names:\n            tmp_name = self.names[ref]\n            tmp_type = idc.get_type(ref)\n\n        ins_cmt1 = GetCommentEx(current_head, 0)\n        ins_cmt2 = GetCommentEx(current_head, 1)\n\n        operands_names = []\n        # save operands_names\n        for index, _ in enumerate(ins.ops):\n          if ida_bytes.is_forced_operand(ins.ip, index):\n            operand_name = (\n              ida_bytes.get_forced_operand(ins.ip, index)\n              if ida_bytes.is_forced_operand(ins.ip, index)\n              else \"\"\n            )\n            operands_names.append([index, operand_name])\n\n        instructions_data.append(\n          [\n            current_head - image_base,\n            mnem,\n            disasm,\n            ins_cmt1,\n            ins_cmt2,\n            operands_names,\n            tmp_name,\n            tmp_type,\n          ]\n        )\n\n        switches = self.extract_function_switches(current_head, switches)\n\n      basic_blocks_data[block_ea] = instructions_data\n      bb_relations[block_ea] = []\n      if block_ea not in bb_degree:\n        # bb in degree, out degree\n        bb_degree[block_ea] = [0, 0]\n\n      for succ_block in block.succs():\n        if succ_block.end_ea == 0:\n          continue\n\n        succ_base = succ_block.start_ea - image_base\n        bb_relations[block_ea].append(succ_base)\n        bb_degree[block_ea][1] += 1\n        bb_edges.append((block_ea, succ_base))\n        if succ_base not in bb_degree:\n          bb_degree[succ_base] = [0, 0]\n        bb_degree[succ_base][0] += 1\n\n        edges += 1\n        indegree += 1\n        if succ_block.id not in dones:\n          dones[succ_block] = 1\n\n      for pred_block in block.preds():\n        if pred_block.end_ea == 0:\n          continue\n\n        try:\n          bb_relations[pred_block.start_ea - image_base].append(\n            block.start_ea - image_base\n          )\n        except KeyError:\n          bb_relations[pred_block.start_ea - image_base] = [\n            block.start_ea - image_base\n          ]\n\n        edges += 1\n        outdegree += 1\n        if pred_block.id not in dones:\n          dones[pred_block] = 1\n\n    for block in flow:\n      if block.end_ea == 0:\n        continue\n\n      block_ea = block.start_ea - image_base\n      for succ_block in block.succs():\n        if succ_block.end_ea == 0:\n          continue\n\n        succ_base = succ_block.start_ea - image_base\n        bb_topological[bb_topo_num[block_ea]].append(bb_topo_num[succ_base])\n\n    topological_data = self.extract_function_topological_information(\n      bb_relations, bb_topological\n    )\n    (\n      bb_topological,\n      bb_topological_sorted,\n      strongly_connected,\n      loops,\n      strongly_connected_spp,\n    ) = topological_data\n\n    asm, assembly_addrs = self.extract_function_assembly_features(\n      assembly, f, image_base\n    )\n    try:\n      clean_assembly = self.get_cmp_asm_lines(asm)\n    except:\n      clean_assembly = \"\"\n      # pylint: disable-next=consider-using-f-string\n      print(\"Error getting assembly for 0x%x\" % f)\n\n    cc = edges - nodes + 2\n    proto = self.guess_type(f)\n    proto2 = idc.get_type(f)\n    try:\n      prime = str(self.primes[cc])\n    except:\n      # pylint: disable-next=consider-using-f-string\n      log(\"Cyclomatic complexity too big: 0x%x -> %d\" % (f, cc))\n      prime = 0\n\n    comment = idc.get_func_cmt(f, 1)\n    bytes_hash = md5(b\"\".join(bytes_hash)).hexdigest()\n    function_hash = md5(b\"\".join(function_hash)).hexdigest()\n\n    function_flags = get_func_attr(f, FUNCATTR_FLAGS)\n    (\n      pseudo,\n      pseudo_lines,\n      pseudo_hash1,\n      pseudocode_primes,\n      pseudo_hash2,\n      pseudo_hash3,\n    ) = self.extract_function_pseudocode_features(f)\n    microcode, clean_microcode, microcode_spp = self.extract_microcode(f)\n    microcode_bblocks, microcode_bbrelations = self.get_microcode(func, ea)\n\n    clean_pseudo = self.get_cmp_pseudo_lines(pseudo)\n\n    md_index = self.extract_function_mdindex(\n      bb_topological, bb_topological_sorted, bb_edges, bb_topo_num, bb_degree\n    )\n    seg_rva = current_head - get_segm_start(current_head)\n\n    kgh = CKoretKaramitasHash()\n    kgh_hash = kgh.calculate(f)\n\n    rva = f - self.get_base_address()\n\n    # It's better to have names sorted\n    names = list(names)\n    names.sort()\n\n    export_time = time.monotonic() - export_time\n    export_time = str(export_time)\n\n    props_list = (\n      name,\n      nodes,\n      edges,\n      indegree,\n      outdegree,\n      size,\n      instructions,\n      mnems,\n      names,\n      proto,\n      cc,\n      prime,\n      f,\n      comment,\n      true_name,\n      bytes_hash,\n      pseudo,\n      pseudo_lines,\n      pseudo_hash1,\n      pseudocode_primes,\n      function_flags,\n      asm,\n      proto2,\n      pseudo_hash2,\n      pseudo_hash3,\n      len(strongly_connected),\n      loops,\n      rva,\n      bb_topological,\n      strongly_connected_spp,\n      clean_assembly,\n      clean_pseudo,\n      mnemonics_spp,\n      switches,\n      function_hash,\n      bytes_sum,\n      md_index,\n      constants,\n      len(constants),\n      seg_rva,\n      assembly_addrs,\n      kgh_hash,\n      None,\n      None,\n      microcode,\n      clean_microcode,\n      microcode_spp,\n      export_time,\n      microcode_bblocks,\n      microcode_bbrelations,\n      callers,\n      callees,\n      basic_blocks_data,\n      bb_relations,\n    )\n\n    if self.hooks is not None:\n      if \"after_export_function\" in dir(self.hooks):\n        d = self.create_function_dictionary(props_list)\n        d = self.hooks.after_export_function(d)\n        props_list = self.get_function_from_dictionary(d)\n\n    return props_list\n\n  def get_base_address(self):\n    return idaapi.get_imagebase()\n\n  def get_modules_using_lfa(self):\n    # First, try to guess modules areas\n    _, lfa_modules = lfa.analyze()\n\n    # Next, using IDAMagicStrings, try to guess file names using some heuristics\n    func_modules = {}\n    if HAS_GET_SOURCE_STRINGS:\n      d, _ = get_source_strings(4, [0, 1])\n\n      # First, put names found with IDAMagicStrings to anonymous modules found\n      # with LFA\n      for source_file in d:\n        for _, func_name, mod_name in d[source_file]:\n          func_ea = idc.get_name_ea_simple(func_name)\n          if func_ea not in func_modules:\n            # print(\"0x%08x:%s -> %s\" % (func_ea, func_name, mod_name))\n            func_modules[func_ea] = mod_name\n            for module in lfa_modules:\n              if func_ea >= module.start and func_ea <= module.end:\n                if module.name == \"\":\n                  module.name = mod_name\n                  break\n\n      #\n      # Next sub-step: find the limits of modules with the same name that appear\n      # multiple times and update the end address to the last found one.\n      #\n      new_modules = []\n      named_modules = {}\n      for module in lfa_modules:\n        if module.name != \"\":\n          if module.name not in named_modules:\n            named_modules[module.name] = {\n              \"start\": module.start,\n              \"end\": module.end,\n            }\n          else:\n            named_modules[module.name][\"end\"] = module.end\n\n      areas = []\n      for name, module in named_modules.items():\n        new_modules.append(\n          {\"name\": name, \"start\": module[\"start\"], \"end\": module[\"end\"]}\n        )\n        areas.append([module[\"start\"], module[\"end\"]])\n\n      #\n      # Next step: find all the modules, discard anonymous modules that fall in\n      # the area (start and end addres) of named modules and return a list with\n      # the proper modules, both anonymous and otherwise.\n      #\n      for module in lfa_modules:\n        if module.name != \"\":\n          continue\n\n        found = False\n        for start, end in areas:\n          if module.start >= start and module.end <= end:\n            found = True\n            break\n\n        if not found:\n          d = {\"name\": module.name, \"start\": module.start, \"end\": module.end}\n          new_modules.append(d)\n\n    for module in new_modules:\n      module[\"total\"] = 0\n      module[\"primes\"] = 1\n      module[\"pseudo_primes\"] = 1\n\n    iterations = 1\n    for func, item in self._funcs_cache.items():\n      if iterations % 1000 == 0:\n        log_refresh(\"Calculating modules weights...\")\n\n      for module in new_modules:\n        if module[\"start\"] <= func <= module[\"end\"]:\n          _, primes_value, pseudocode_primes = item\n          module[\"total\"] += 1\n          if primes_value is not None:\n            module[\"primes\"] *= int(primes_value)\n          if pseudocode_primes is not None:\n            module[\"pseudo_primes\"] *= int(pseudocode_primes)\n          break\n\n    for module in new_modules:\n      module[\"total\"] = str(module[\"total\"])\n      module[\"primes\"] = str(module[\"primes\"])\n      module[\"pseudo_primes\"] = str(module[\"pseudo_primes\"])\n\n    return new_modules\n\n  def save_compilation_units(self):\n    log_refresh(\"Finding compilation units...\")\n    msg(\"Finding compilation units...\")\n    lfa_modules = self.get_modules_using_lfa()\n    log_refresh(\"Saving compilation units...\")\n    msg(\"Saving compilation units...\")\n\n    sql1 = \"\"\"insert into compilation_units (name, start_ea, end_ea)\n                  values (?, ?, ?)\"\"\"\n    sql2 = \"\"\"insert or ignore into compilation_unit_functions(\n                    cu_id, func_id)\n                  values (?, ?)\"\"\"\n    sql3 = \"\"\" update compilation_units\n          set primes_value = ?,\n            pseudocode_primes = ?,\n            functions = ?\n        where id = ? \"\"\"\n    sql4 = \"\"\" update functions set source_file = ? where id = ? \"\"\"\n    cur = self.db_cursor()\n    try:\n      dones = set()\n      total = len(lfa_modules)\n      checkpoint = int(total / 100)\n      for i, module in enumerate(lfa_modules):\n        if i > 0 and checkpoint > 0 and i % checkpoint == 0:\n          log_refresh(f\"Processing compilation unit {i} out of {total}...\")\n\n        module_name = None\n        if module[\"name\"] != \"\":\n          module_name = module[\"name\"]\n\n        vals = (module[\"name\"], str(module[\"start\"]), str(module[\"end\"]))\n        cur.execute(sql1, vals)\n        cu_id = cur.lastrowid\n\n        for func in self._funcs_cache:\n          item = self._funcs_cache[func]\n          func = int(func)\n          if func >= module[\"start\"] and func <= module[\"end\"]:\n            func_id = item[0]\n            if func_id not in dones:\n              dones.add(func_id)\n              cur.execute(sql2, (cu_id, func_id))\n              cur.execute(sql4, (module_name, func_id))\n\n        cur.execute(\n          sql3,\n          [module[\"primes\"], module[\"pseudo_primes\"], module[\"total\"], cu_id],\n        )\n        if cur.rowcount == 0:\n          raise Exception(\n            \"Unable to UPDATE the primes for a compilation unit!\"\n          )\n    except:\n      print(f\"ERROR saving compilation unit: {str(sys.exc_info()[1])}\")\n      raise\n    finally:\n      cur.close()\n\n  def save_callgraph(self, primes, all_primes, md5sum):\n    cur = self.db_cursor()\n    try:\n      sql = \"insert into main.program (callgraph_primes, callgraph_all_primes, processor, md5sum) values (?, ?, ?, ?)\"\n      proc = idaapi.get_idp_name()\n      if BADADDR == 0xFFFFFFFFFFFFFFFF:\n        proc += \"64\"\n      cur.execute(sql, (primes, all_primes, proc, md5sum))\n    finally:\n      cur.close()\n\n  def GetOrdinalCount(self):\n    # The API get_ordinal_qty() has been removed in IDA 9.0 and now I have to do\n    # this mess to support new and old versions, as is common in Diaphora.\n    if hasattr(idaapi, \"get_ordinal_count\"):\n      return idaapi.get_ordinal_count()\n    return idc.get_ordinal_qty()\n\n  def GetLocalType(self, ordinal, flags):\n    ret = get_local_tinfo(ordinal)\n    if ret is not None:\n      (stype, fields) = ret\n      if stype:\n        name = idc.get_numbered_type_name(ordinal)\n        try:\n          return idc_print_type(stype, fields, name, flags)\n        except:\n          log(f\"Error: {str(sys.exc_info()[1])}\")\n          return \"\"\n    return \"\"\n\n  def export_structures(self):\n    # It seems that get_ordinal_qty, sometimes, can return negative\n    # numbers, according to one beta-tester. My guess is that it's a bug\n    # in IDA. However, as we cannot reproduce, at least handle this\n    # condition.\n    local_types = self.GetOrdinalCount()\n    if (local_types & 0x80000000) != 0:\n      # pylint: disable-next=consider-using-f-string\n      message = \"warning: get_ordinal_qty returned a negative number (0x%x)!\" % local_types\n      log(message)\n      return\n\n    for i in range(local_types):\n      name = idc.get_numbered_type_name(i + 1)\n      definition = self.GetLocalType(\n        i + 1, PRTYPE_MULTI | PRTYPE_TYPE | PRTYPE_SEMI | PRTYPE_PRAGMA\n      )\n      if definition is None:\n        continue\n\n      type_name = \"struct\"\n      if definition.startswith(\"enum\"):\n        type_name = \"enum\"\n      elif definition.startswith(\"union\"):\n        type_name = \"union\"\n\n      # For some reason, IDA may return types with the form \"__int128 unsigned\",\n      # we want it the right way \"unsigned __int128\".\n      if name and name.find(\" \") > -1:\n        names = name.split(\" \")\n        name = names[0]\n        if names[1] == \"unsigned\":\n          name = f\"unsigned {name}\"\n\n      self.add_program_data(type_name, name, definition)\n\n  def get_til_names(self):\n    idb_path = get_idb_path()\n    filename, _ = os.path.splitext(idb_path)\n    til_path = f\"{filename}.til\"\n\n    with open(til_path, \"rb\") as f:\n      line = f.readline()\n      pos = line.find(b\"Local type definitions\")\n      if pos > -1:\n        tmp = line[pos + len(b\"Local type definitions\") + 1:]\n        pos = tmp.find(b\"\\x00\")\n        if pos > -1:\n          defs = tmp[:pos].split(b\",\")\n          return defs\n    return None\n\n  def export_til(self):\n    til_names = self.get_til_names()\n    if til_names is not None:\n      for til in til_names:\n        self.add_program_data(\"til\", til, None)\n\n  def load_and_import_all_results(self, filename, main_db, diff_db):\n    results_db = diaphora.sqlite3_connect(filename)\n\n    cur = results_db.cursor()\n    try:\n      sql = \"select main_db, diff_db, version from config\"\n      cur.execute(sql)\n      rows = cur.fetchall()\n      if len(rows) != 1:\n        Warning(\"Malformed results database!\")\n        return False\n\n      row = rows[0]\n      version = row[\"version\"]\n      if version != diaphora.VERSION_VALUE:\n        message = f\"The version of the diff results is {version} and current version is {diaphora.VERSION_VALUE}, there can be some incompatibilities.\"\n        Warning(message)\n\n      self.reinit(main_db, diff_db)\n\n      min_ratio = float(self.get_value_for(\"MINIMUM_IMPORT_RATIO\", 0.5))\n      log(f\"Minimum import threshold {min_ratio}\")\n\n      sql = \"select * from results\"\n      cur.execute(sql)\n      for row in diaphora.result_iter(cur):\n        if row[\"type\"] == \"best\":\n          choose = self.best_chooser\n        elif row[\"type\"] == \"partial\":\n          choose = self.partial_chooser\n        else:\n          choose = self.unreliable_chooser\n\n        ea1 = int(row[\"address\"], 16)\n        name1 = row[\"name\"]\n        ea2 = int(row[\"address2\"], 16)\n        name2 = row[\"name2\"]\n        desc = row[\"description\"]\n        ratio = float(row[\"ratio\"])\n\n        if ratio < min_ratio:\n          log(f\"Match {name1}-{name2} is excluded\")\n          continue\n\n        nodes1 = int(row[\"nodes1\"])\n        nodes2 = int(row[\"nodes2\"])\n\n        choose.add_item(\n          diaphora.CChooser.Item(\n            ea1, name1, ea2, name2, desc, ratio, nodes1, nodes2\n          )\n        )\n\n      sql = \"select * from unmatched\"\n      cur.execute(sql)\n      for row in diaphora.result_iter(cur):\n        if row[\"type\"] == \"primary\":\n          choose = self.unmatched_primary\n        else:\n          choose = self.unmatched_second\n        choose.add_item(\n          diaphora.CChooser.Item(int(row[\"address\"], 16), row[\"name\"])\n        )\n\n      self.import_all_auto(self.best_chooser.items)\n      self.import_all_auto(self.partial_chooser.items)\n\n      return True\n    finally:\n      cur.close()\n      results_db.close()\n\n    return False\n\n  def load_results(self, filename):\n    results_db = diaphora.sqlite3_connect(filename)\n\n    ret = False\n    cur = results_db.cursor()\n    try:\n      sql = \"select main_db, diff_db, version from config\"\n      cur.execute(sql)\n      rows = cur.fetchall()\n      if len(rows) != 1:\n        warning(\"Malformed results database!\")\n        msg(\"Malformed results database!\")\n        return False\n\n      row = rows[0]\n      version = row[\"version\"]\n      if version != diaphora.VERSION_VALUE:\n        line = \"The version of the diff results is %s and current version is %s, there can be some incompatibilities.\"\n        warning(line % (version, diaphora.VERSION_VALUE))\n        msg(line)\n\n      main_db = row[\"main_db\"]\n      diff_db = row[\"diff_db\"]\n      if not os.path.exists(main_db):\n        log(f\"Primary database {main_db} not found.\")\n        main_db = ask_file(0, main_db, \"Select the primary database path\")\n        if main_db is None:\n          return False\n\n      if not os.path.exists(diff_db):\n        diff_db = ask_file(0, main_db, \"Select the secondary database path\")\n        if diff_db is None:\n          return False\n\n      self.reinit(main_db, diff_db)\n\n      sql = \"select * from results\"\n      cur.execute(sql)\n      for row in diaphora.result_iter(cur):\n        if row[\"type\"] == \"best\":\n          choose = self.best_chooser\n        elif row[\"type\"] == \"partial\":\n          choose = self.partial_chooser\n        elif row[\"type\"] == \"multimatch\":\n          choose = self.multimatch_chooser\n        else:\n          choose = self.unreliable_chooser\n\n        ea1 = int(row[\"address\"], 16)\n        name1 = row[\"name\"]\n        ea2 = int(row[\"address2\"], 16)\n        name2 = row[\"name2\"]\n        desc = row[\"description\"]\n        ratio = float(row[\"ratio\"])\n        nodes1 = int(row[\"nodes1\"])\n        nodes2 = int(row[\"nodes2\"])\n\n        choose.add_item(\n          diaphora.CChooser.Item(\n            ea1, name1, ea2, name2, desc, ratio, nodes1, nodes2\n          )\n        )\n\n      sql = \"select * from unmatched\"\n      cur.execute(sql)\n      for row in diaphora.result_iter(cur):\n        if row[\"type\"] == \"primary\":\n          choose = self.unmatched_primary\n        else:\n          choose = self.unmatched_second\n        choose.add_item(\n          diaphora.CChooser.Item(int(row[\"address\"], 16), row[\"name\"])\n        )\n\n      log(\"Showing diff results.\")\n      self.show_choosers()\n      ret = True\n    finally:\n      cur.close()\n      results_db.close()\n\n    return ret\n\n  def re_diff(self):\n    self.best_chooser.Close()\n    self.partial_chooser.Close()\n    self.multimatch_chooser.Close()\n    if self.unreliable_chooser is not None:\n      self.unreliable_chooser.Close()\n    if self.unmatched_primary is not None:\n      self.unmatched_primary.Close()\n    if self.unmatched_second is not None:\n      self.unmatched_second.Close()\n\n    _diff_or_export(\n      use_ui=True, file_in=self.last_diff_db, project_script=self.project_script\n    )\n\n  def equal_db(self):\n    are_equal = diaphora.CBinDiff.equal_db(self)\n    if are_equal:\n      if (\n        ask_yn(\n          0,\n          \"HIDECANCEL\\nThe databases seems to be 100% equal. Do you want to continue anyway?\",\n        )\n        != 1\n      ):\n        self.do_continue = False\n    return are_equal\n\n\n#-------------------------------------------------------------------------------\ndef _diff_or_export(use_ui, **options):\n  # pylint: disable-next=global-statement\n  global g_bindiff\n  total_functions = len(list(Functions()))\n  if get_idb_path() == \"\" or total_functions == 0:\n    warning(\n      \"No IDA database opened or no function in the database.\\nPlease open an IDA database and create some functions before running this script.\"\n    )\n    return None\n\n  opts = BinDiffOptions(**options)\n\n  if use_ui:\n    x = CBinDiffExporterSetup()\n    x.Compile()\n    x.set_options(opts)\n\n    if not x.Execute():\n      return None\n\n    opts = x.get_options()\n\n  if opts.file_out == opts.file_in:\n    warning(\"Both databases are the same file!\")\n    return None\n  elif opts.file_out == \"\" or len(opts.file_out) < 5:\n    warning(\n      \"No output database selected or invalid filename. Please select a database file.\"\n    )\n    return None\n  elif is_ida_file(opts.file_in) or is_ida_file(opts.file_out):\n    warning(\n      \"One of the selected databases is an IDA file. Please select only database files.\"\n    )\n    return None\n\n  export = True\n  if os.path.exists(opts.file_out):\n    crash_file = f\"{opts.file_out}-crash\"\n    resume_crashed = False\n    crashed_before = False\n    if os.path.exists(crash_file):\n      crashed_before = True\n      ret = ask_yn(\n        1,\n        \"The previous export session crashed. Do you want to resume the previous crashed session?\",\n      )\n      if ret == -1:\n        log(\"Cancelled\")\n        return None\n      elif ret == 1:\n        resume_crashed = True\n\n    if not resume_crashed and not crashed_before:\n      ret = ask_yn(\n        0, \"Export database already exists. Do you want to overwrite it?\"\n      )\n      if ret == -1:\n        log(\"Cancelled\")\n        return None\n\n      if ret == 0:\n        export = False\n\n    if export:\n      if g_bindiff is not None:\n        g_bindiff = None\n\n      if not resume_crashed:\n        remove_file(opts.file_out)\n        log(f\"Database {repr(opts.file_out)} removed\")\n        if os.path.exists(crash_file):\n          os.remove(crash_file)\n\n  t0 = time.monotonic()\n  try:\n    bd = CIDABinDiff(opts.file_out)\n    bd.use_decompiler = opts.use_decompiler\n    bd.exclude_library_thunk = opts.exclude_library_thunk\n    bd.unreliable = opts.unreliable\n    bd.slow_heuristics = opts.slow\n    bd.use_trained_model = opts.use_trained_model\n    bd.relaxed_ratio = opts.relax\n    bd.experimental = opts.experimental\n    bd.min_ea = opts.min_ea\n    bd.max_ea = opts.max_ea\n    bd.ida_subs = opts.ida_subs\n    bd.ignore_sub_names = opts.ignore_sub_names\n    bd.ignore_all_names = opts.ignore_all_names\n    bd.ignore_small_functions = opts.ignore_small_functions\n    bd.function_summaries_only = opts.func_summaries_only\n    bd.export_microcode = opts.export_microcode\n    bd.sql_max_processed_rows = config.SQL_MAX_PROCESSED_ROWS\n    bd.timeout = config.SQL_TIMEOUT_LIMIT * max(total_functions / 20000, 1)\n    bd.project_script = opts.project_script\n\n    if export:\n      exported = False\n      if os.getenv(\"DIAPHORA_PROFILE\") is not None:\n        log(\"*** Profiling export ***\")\n        # pylint: disable-next=import-outside-toplevel\n        import cProfile\n\n        profiler = cProfile.Profile()\n        profiler.runcall(bd.export)\n        exported = True\n        profiler.print_stats(sort=\"time\")\n      else:\n        try:\n          bd.export()\n          exported = True\n        except KeyboardInterrupt:\n          log(f\"Aborted by user, removing crash file {opts.file_out}-crash...\")\n          os.remove(f\"{opts.file_out}-crash\")\n\n      if exported:\n        final_t = time.monotonic() - t0\n        # pylint: disable-next=consider-using-f-string\n        log(f\"Database exported, time taken: {datetime.timedelta(seconds=final_t)}.\")\n        hide_wait_box()\n\n    if opts.file_in != \"\":\n      if os.getenv(\"DIAPHORA_PROFILE\") is not None:\n        log(\"*** Profiling diff ***\")\n        # pylint: disable-next=import-outside-toplevel\n        import cProfile\n\n        profiler = cProfile.Profile()\n        profiler.runcall(bd.diff, opts.file_in)\n        profiler.print_stats(sort=\"time\")\n      else:\n        bd.diff(opts.file_in)\n  except:\n    print((f\"Error: {sys.exc_info()[1]}\"))\n    traceback.print_exc()\n  finally:\n    hide_wait_box()\n\n  return bd\n\n\n#-------------------------------------------------------------------------------\ndef _generate_html(db1, diff_db, ea1, ea2, html_asm, html_pseudo):\n  bd = CIDABinDiff(db1)\n  bd.db = diaphora.sqlite3_connect(db1)\n  bd.load_results(diff_db)\n  bd.save_pseudo_diff(ea1, ea2, html_pseudo)\n  bd.save_asm_diff(ea1, ea2, html_asm)\n\n\n#-------------------------------------------------------------------------------\nclass BinDiffOptions:\n  def __init__(self, **kwargs):\n    total_functions = len(list(Functions()))\n    sqlite_db = os.path.splitext(get_idb_path())[0] + \".sqlite\"\n    self.file_out = kwargs.get(\"file_out\", sqlite_db)\n    self.file_in = kwargs.get(\"file_in\", \"\")\n    self.use_decompiler = kwargs.get(\n      \"use_decompiler\", config.EXPORTING_USE_DECOMPILER\n    )\n    self.exclude_library_thunk = kwargs.get(\n      \"exclude_library_thunk\", config.EXPORTING_EXCLUDE_LIBRARY_THUNK\n    )\n\n    self.relax = kwargs.get(\"relax\")\n    if self.relax:\n      warning(MSG_RELAXED_RATIO_ENABLED)\n\n    self.unreliable = kwargs.get(\"unreliable\", config.DIFFING_ENABLE_UNRELIABLE)\n    self.slow = kwargs.get(\n      \"slow\", total_functions <= config.MIN_FUNCTIONS_TO_DISABLE_SLOW\n    )\n    self.use_trained_model = kwargs.get(\n      \"use_trained_model\", config.ML_USE_TRAINED_MODEL\n    )\n    self.experimental = kwargs.get(\n      \"experimental\", config.DIFFING_ENABLE_EXPERIMENTAL\n    )\n    self.min_ea = kwargs.get(\"min_ea\", get_inf_attr(INF_MIN_EA))\n    self.max_ea = kwargs.get(\"max_ea\", get_inf_attr(INF_MAX_EA))\n    self.ida_subs = kwargs.get(\"ida_subs\", config.EXPORTING_ONLY_NON_IDA_SUBS)\n    self.ignore_sub_names = kwargs.get(\n      \"ignore_sub_names\", config.DIFFING_IGNORE_SUB_FUNCTION_NAMES\n    )\n    self.ignore_all_names = kwargs.get(\n      \"ignore_all_names\", config.DIFFING_IGNORE_ALL_FUNCTION_NAMES\n    )\n    self.ignore_small_functions = kwargs.get(\n      \"ignore_small_functions\", config.DIFFING_IGNORE_SMALL_FUNCTIONS\n    )\n\n    # Enable, by default, exporting only function summaries for huge dbs.\n    too_big_db = total_functions > config.MIN_FUNCTIONS_TO_CONSIDER_HUGE\n    self.func_summaries_only = kwargs.get(\"func_summaries_only\", too_big_db)\n    if too_big_db:\n      warning(MSG_FUNCTION_SUMMARIES_ONLY)\n\n    # Python script to run for both the export and diffing process\n    self.project_script = kwargs.get(\"project_script\")\n\n    # Microcode slows down the export process and might cause false positives\n    # with big to huge databases, disable it by default for 'big' databases\n    medium_db = total_functions <= config.MIN_FUNCTIONS_TO_CONSIDER_MEDIUM\n    self.export_microcode = kwargs.get(\"export_microcode\", medium_db)\n\n\n#-------------------------------------------------------------------------------\nclass CHtmlDiff:\n  \"\"\"A replacement for difflib.HtmlDiff that tries to enforce a max width\n\n  The main challenge is to do this given QTextBrowser's limitations. In\n  particular, QTextBrowser only implements a minimum of CSS.\n  \"\"\"\n\n  _html_template = \"\"\"\n  <html>\n  <head>\n  <style>%(style)s</style>\n  </head>\n  <body>\n  <table class=\"diff_tab\" cellspacing=0>\n  %(rows)s\n  </table>\n  </body>\n  </html>\n  \"\"\"\n\n  _style = (\n    \"\"\"\n  table.diff_tab {\n  font-family: Courier, monospace;\n  table-layout: fixed;\n  width: 100%;\n  }\n\n  .diff_add {\n  background-color: \"\"\"\n    + config.DIFF_COLOR_ADDED\n    + \"\"\";\n  }\n  .diff_chg {\n  background-color: \"\"\"\n    + config.DIFF_COLOR_CHANGED\n    + \"\"\";\n  }\n  .diff_sub {\n  background-color: \"\"\"\n    + config.DIFF_COLOR_SUBTRACTED\n    + \"\"\";\n  }\n  .diff_lineno {\n  text-align: right;\n  background-color: \"\"\"\n    + config.DIFF_COLOR_LINE_NO\n    + \"\"\";\n  }\n  \"\"\"\n  )\n\n  _row_template = \"\"\"\n  <tr>\n    <td class=\"diff_lineno\" width=\"auto\">%s</td>\n    <td class=\"diff_play\" nowrap width=\"45%%\">%s</td>\n    <td class=\"diff_lineno\" width=\"auto\">%s</td>\n    <td class=\"diff_play\" nowrap width=\"45%%\">%s</td>\n  </tr>\n  \"\"\"\n\n  _rexp_too_much_space = re.compile(\"^\\t[.\\\\w]+ {8}\")\n\n  def make_file(self, lhs, rhs, fmt, lex):\n    rows = []\n    for left, right, changed in difflib._mdiff(lhs, rhs):\n      lno, ltxt = left\n      rno, rtxt = right\n\n      if not changed:\n        ltxt = highlight(ltxt, lex, fmt)\n        rtxt = highlight(rtxt, lex, fmt)\n      else:\n        ltxt = self._stop_wasting_space(ltxt)\n        rtxt = self._stop_wasting_space(rtxt)\n\n        ltxt = ltxt.replace(\" \", \"&nbsp;\")\n        rtxt = rtxt.replace(\" \", \"&nbsp;\")\n        ltxt = ltxt.replace(\"<\", \"&lt;\")\n        ltxt = ltxt.replace(\">\", \"&gt;\")\n        rtxt = rtxt.replace(\"<\", \"&lt;\")\n        rtxt = rtxt.replace(\">\", \"&gt;\")\n\n      row = self._row_template % (str(lno), ltxt, str(rno), rtxt)\n      rows.append(row)\n\n    all_the_rows = \"\\n\".join(rows)\n    all_the_rows = (\n      all_the_rows.replace(\"\\x00+\", '<span class=\"diff_add\">')\n      .replace(\"\\x00-\", '<span class=\"diff_sub\">')\n      .replace(\"\\x00^\", '<span class=\"diff_chg\">')\n      .replace(\"\\x01\", \"</span>\")\n      .replace(\"\\t\", 4 * \"&nbsp;\")\n    )\n\n    res = self._html_template % {\"style\": self._style, \"rows\": all_the_rows}\n    return res\n\n  def _stop_wasting_space(self, s):\n    \"\"\"I never understood why you'd want to have 13 spaces between instruction and args'\"\"\"\n    m = self._rexp_too_much_space.search(s)\n    if m:\n      mlen = len(m.group(0))\n      return s[: mlen - 4] + s[mlen:]\n    else:\n      return s\n\n\n#-------------------------------------------------------------------------------\ntry:\n\n  class CAstVisitorInherits(ctree_visitor_t):\n    pass\n\nexcept:\n\n  class CAstVisitorInherits:\n    pass\n\n\n#-------------------------------------------------------------------------------\n# pylint: disable=super-init-not-called\n# pylint: disable=non-parent-init-called\n# pylint: disable=arguments-differ\nclass CAstVisitor(CAstVisitorInherits):\n  def __init__(self, cfunc):\n    self.primes = primesbelow(4096)\n    ctree_visitor_t.__init__(self, CV_FAST)\n    self.cfunc = cfunc\n    self.primes_hash = 1\n    return\n\n  def visit_expr(self, expr):\n    try:\n      self.primes_hash *= self.primes[expr.op]\n    except:\n      traceback.print_exc()\n    return 0\n\n  def visit_insn(self, ins):\n    try:\n      self.primes_hash *= self.primes[ins.op]\n    except:\n      traceback.print_exc()\n    return 0\n\n# pylint: enable=arguments-differ\n# pylint: enable=non-parent-init-called\n# pylint: enable=super-init-not-called\n\n#-------------------------------------------------------------------------------\ndef is_ida_file(filename):\n  filename = filename.lower()\n  return (\n    filename.endswith(\".idb\")\n    or filename.endswith(\".i64\")\n    or filename.endswith(\".til\")\n    or filename.endswith(\".id0\")\n    or filename.endswith(\".id1\")\n    or filename.endswith(\".nam\")\n  )\n\n\n#-------------------------------------------------------------------------------\ndef remove_file(filename):\n  try:\n    os.remove(filename)\n  except:\n    # Fix for Bug #5: https://github.com/joxeankoret/diaphora/issues/5\n    #\n    # For some reason, in Windows, the handle to the SQLite database is\n    # not closed, and I really try to be sure that all the databases are\n    # detached, no cursor is leaked, etc... So, in case we cannot remove\n    # the database file because it's still being used by IDA in Windows\n    # for some unknown reason, just drop the database's tables and after\n    # that continue normally.\n    with sqlite3.connect(filename, check_same_thread=False) as db:\n      cur = db.cursor()\n      try:\n        funcs = [\n          \"functions\",\n          \"program\",\n          \"program_data\",\n          \"version\",\n          \"instructions\",\n          \"basic_blocks\",\n          \"bb_relations\",\n          \"bb_instructions\",\n          \"function_bblocks\",\n          \"compilation_units\",\n          \"compilation_unit_functions\",\n        ]\n        for func in funcs:\n          db.execute(f\"drop table if exists {func}\")\n      finally:\n        cur.close()\n\n\n#-------------------------------------------------------------------------------\ndef main():\n  # pylint: disable-next=global-statement\n  global g_bindiff\n\n  # EXPORT\n  if os.getenv(\"DIAPHORA_AUTO\") is not None:\n    file_out = os.getenv(\"DIAPHORA_EXPORT_FILE\")\n    if file_out is None:\n      raise Exception(\"No export file specified!\")\n\n    use_decompiler = os.getenv(\"DIAPHORA_USE_DECOMPILER\")\n    if use_decompiler is None:\n      use_decompiler = False\n\n    auto_wait()\n\n    if os.path.exists(file_out):\n      if g_bindiff is not None:\n        g_bindiff = None\n\n      remove_file(file_out)\n      log(f\"Database {repr(file_out)} removed\")\n\n    bd = CIDABinDiff(file_out)\n    project_script = os.getenv(\"DIAPHORA_PROJECT_SCRIPT\")\n    if project_script is not None:\n      bd.project_script = project_script\n    bd.use_decompiler = use_decompiler\n\n    bd.exclude_library_thunk = bd.get_value_for(\n      \"exclude_library_thunk\", bd.exclude_library_thunk\n    )\n    bd.ida_subs = bd.get_value_for(\"ida_subs\", bd.ida_subs)\n    bd.ignore_sub_names = bd.get_value_for(\"ignore_sub_names\", bd.ignore_sub_names)\n    bd.function_summaries_only = bd.get_value_for(\n      \"function_summaries_only\", bd.function_summaries_only\n    )\n    bd.min_ea = int(bd.get_value_for(\"from_address\", \"0\"), 16)\n    bd.export_microcode = bd.get_value_for(\n      \"self.export_microcode\", bd.export_microcode\n    )\n\n    _to_ea = bd.get_value_for(\"to_address\", None)\n    if _to_ea is not None:\n      bd.max_ea = int(_to_ea, 16)\n\n    try:\n      bd.export()\n    except KeyboardInterrupt:\n      log(f\"Aborted by user, removing crash file {file_out}-crash...\")\n      os.remove(f\"{file_out}-crash\")\n\n    idaapi.qexit(0)\n\n  # DIFF-SHOW\n  elif os.getenv(\"DIAPHORA_AUTO_HTML\") is not None:\n    debug_refresh(\"Handling DIAPHORA_AUTO_HTML\")\n    debug_refresh(f'DIAPHORA_AUTO_HTML={os.getenv(\"DIAPHORA_AUTO_HTML\")}')\n    debug_refresh(f'DIAPHORA_DB1={os.getenv(\"DIAPHORA_DB1\")}')\n    debug_refresh(f'DIAPHORA_DB2={os.getenv(\"DIAPHORA_DB2\")}')\n    debug_refresh(f'DIAPHORA_DIFF={os.getenv(\"DIAPHORA_DIFF\")}')\n    debug_refresh(f'DIAPHORA_EA1={os.getenv(\"DIAPHORA_EA1\")}')\n    debug_refresh(f'DIAPHORA_EA2={os.getenv(\"DIAPHORA_EA2\")}')\n    debug_refresh(f'DIAPHORA_HTML_ASM={os.getenv(\"DIAPHORA_HTML_ASM\")}')\n    debug_refresh(f'DIAPHORA_HTML_PSEUDO={os.getenv(\"DIAPHORA_HTML_PSEUDO\")}')\n    db1 = os.getenv(\"DIAPHORA_DB1\")\n    if db1 is None:\n      raise Exception(\"No database file specified!\")\n    diff_db = os.getenv(\"DIAPHORA_DIFF\")\n    if diff_db is None:\n      raise Exception(\"No diff database file for diff specified!\")\n    ea1 = os.getenv(\"DIAPHORA_EA1\")\n    if ea1 is None:\n      raise Exception(\"No address 1 specified!\")\n    ea2 = os.getenv(\"DIAPHORA_EA2\")\n    if ea2 is None:\n      raise Exception(\"No address 2 specified!\")\n    html_asm = os.getenv(\"DIAPHORA_HTML_ASM\")\n    if html_asm is None:\n      raise Exception(\"No html output file for asm specified!\")\n    html_pseudo = os.getenv(\"DIAPHORA_HTML_PSEUDO\")\n    if html_pseudo is None:\n      raise Exception(\"No html output file for pseudo specified!\")\n    _generate_html(db1, diff_db, ea1, ea2, html_asm, html_pseudo)\n    idaapi.qexit(0)\n  else:\n    _diff_or_export(True)\n\n\nif __name__ == \"__main__\":\n  main()\n"
        },
        {
          "name": "diaphora_import.py",
          "type": "blob",
          "size": 0.9736328125,
          "content": "#!/usr/bin/python\n\n\"\"\"\nDiaphora, a diffing plugin for IDA\nCopyright (c) 2015-2021, Joxean Koret\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n\"\"\"\n\nimport importlib\nimport diaphora_ida\n\nfrom diaphora_ida import import_definitions\n\nimportlib.reload(diaphora_ida)\n\n#-----------------------------------------------------------------------\ndef main():\n  import_definitions()\n\nif __name__ == \"__main__\":\n  main()\n"
        },
        {
          "name": "diaphora_load.py",
          "type": "blob",
          "size": 0.9619140625,
          "content": "#!/usr/bin/python\n\n\"\"\"\nDiaphora, a diffing plugin for IDA\nCopyright (c) 2015-2021, Joxean Koret\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n\"\"\"\n\nimport importlib\nimport diaphora_ida\n\nfrom diaphora_ida import load_results\n\nimportlib.reload(diaphora_ida)\n\n#-----------------------------------------------------------------------\ndef main():\n  load_results()\n\nif __name__ == \"__main__\":\n  main()\n"
        },
        {
          "name": "diaphora_load_and_import.py",
          "type": "blob",
          "size": 0.998046875,
          "content": "#!/usr/bin/python\n\n\"\"\"\nDiaphora, a diffing plugin for IDA\nCopyright (c) 2015, Joxean Koret\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 2 of the License, or\n(at your option) any later version.\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\n\nimport idc\n\nfrom diaphora_ida import load_and_import_all_results\n\n#-----------------------------------------------------------------------\ndef main():\n\tfilename = idc.ARGV[1]\n\tmain_db = idc.ARGV[2]\n\tdiff_db = idc.ARGV[3]\n\n\tload_and_import_all_results(filename, main_db, diff_db)\n\nif __name__ == \"__main__\":\n  main()\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "jkutils",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo",
          "type": "tree",
          "content": null
        },
        {
          "name": "ml",
          "type": "tree",
          "content": null
        },
        {
          "name": "others",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "pygments",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tester",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}