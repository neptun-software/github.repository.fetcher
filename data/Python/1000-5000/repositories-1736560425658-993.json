{
  "metadata": {
    "timestamp": 1736560425658,
    "page": 993,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjEwMDA=",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jpadilla/django-rest-framework-jwt",
      "stars": 3189,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.052734375,
          "content": "[run]\nbranch = true\nsource = rest_framework_jwt,tests\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1396484375,
          "content": "*.pyc\n*.db\n*~\n.*\n\nhtml/\nhtmlcov/\ncoverage/\nbuild/\ndist/\n*.egg-info/\nMANIFEST\n\nbin/\ninclude/\nlib/\nlocal/\n\n!.coveragerc\n!.gitignore\n!.travis.yml\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 3.619140625,
          "content": "sudo: false\nlanguage: python\ncache: pip\n\nmatrix:\n  fast_finish: true\n  include:\n    - python: 2.7\n      env: TOXENV=py27-flake8\n    - python: 2.7\n      env: TOXENV=py27-docs\n\n    - python: 2.7\n      env: TOXENV=py27-dj18-drf31-codecov\n    - python: 2.7\n      env: TOXENV=py27-dj18-drf32-codecov\n    - python: 2.7\n      env: TOXENV=py27-dj18-drf33-codecov\n    - python: 2.7\n      env: TOXENV=py27-dj18-drf34-codecov\n    - python: 2.7\n      env: TOXENV=py27-dj18-drf35-codecov\n    - python: 2.7\n      env: TOXENV=py27-dj18-drf36-codecov\n\n    - python: 2.7\n      env: TOXENV=py27-dj19-drf31-codecov\n    - python: 2.7\n      env: TOXENV=py27-dj19-drf32-codecov\n    - python: 2.7\n      env: TOXENV=py27-dj19-drf33-codecov\n    - python: 2.7\n      env: TOXENV=py27-dj19-drf34-codecov\n    - python: 2.7\n      env: TOXENV=py27-dj19-drf35-codecov\n    - python: 2.7\n      env: TOXENV=py27-dj19-drf36-codecov\n\n    - python: 2.7\n      env: TOXENV=py27-dj110-drf34-codecov\n    - python: 2.7\n      env: TOXENV=py27-dj110-drf35-codecov\n    - python: 2.7\n      env: TOXENV=py27-dj110-drf36-codecov\n\n    - python: 2.7\n      env: TOXENV=py27-dj111-drf34-codecov\n    - python: 2.7\n      env: TOXENV=py27-dj111-drf35-codecov\n    - python: 2.7\n      env: TOXENV=py27-dj111-drf36-codecov\n\n    - python: 3.3\n      env: TOXENV=py33-dj18-drf31-codecov\n    - python: 3.3\n      env: TOXENV=py33-dj18-drf32-codecov\n    - python: 3.3\n      env: TOXENV=py33-dj18-drf33-codecov\n    - python: 3.3\n      env: TOXENV=py33-dj18-drf34-codecov\n    - python: 3.3\n      env: TOXENV=py33-dj18-drf35-codecov\n    - python: 3.3\n      env: TOXENV=py33-dj18-drf36-codecov\n\n    - python: 3.4\n      env: TOXENV=py34-dj18-drf31-codecov\n    - python: 3.4\n      env: TOXENV=py34-dj18-drf32-codecov\n    - python: 3.4\n      env: TOXENV=py34-dj18-drf33-codecov\n    - python: 3.4\n      env: TOXENV=py34-dj18-drf34-codecov\n    - python: 3.4\n      env: TOXENV=py34-dj18-drf35-codecov\n    - python: 3.4\n      env: TOXENV=py34-dj18-drf36-codecov\n\n    - python: 3.4\n      env: TOXENV=py34-dj19-drf31-codecov\n    - python: 3.4\n      env: TOXENV=py34-dj19-drf32-codecov\n    - python: 3.4\n      env: TOXENV=py34-dj19-drf33-codecov\n    - python: 3.4\n      env: TOXENV=py34-dj19-drf34-codecov\n    - python: 3.4\n      env: TOXENV=py34-dj19-drf35-codecov\n    - python: 3.4\n      env: TOXENV=py34-dj19-drf36-codecov\n\n    - python: 3.4\n      env: TOXENV=py34-dj110-drf34-codecov\n    - python: 3.4\n      env: TOXENV=py34-dj110-drf35-codecov\n    - python: 3.4\n      env: TOXENV=py34-dj110-drf36-codecov\n\n    - python: 3.4\n      env: TOXENV=py34-dj111-drf34-codecov\n    - python: 3.4\n      env: TOXENV=py34-dj111-drf35-codecov\n    - python: 3.4\n      env: TOXENV=py34-dj111-drf36-codecov\n\n    - python: 3.5\n      env: TOXENV=py35-dj110-drf34-codecov\n    - python: 3.5\n      env: TOXENV=py35-dj110-drf35-codecov\n    - python: 3.5\n      env: TOXENV=py35-dj110-drf36-codecov\n\n    - python: 3.5\n      env: TOXENV=py35-dj111-drf34-codecov\n    - python: 3.5\n      env: TOXENV=py35-dj111-drf35-codecov\n    - python: 3.5\n      env: TOXENV=py35-dj111-drf36-codecov\n\n    - python: 3.6\n      env: TOXENV=py36-dj110-drf34-codecov\n    - python: 3.6\n      env: TOXENV=py36-dj110-drf35-codecov\n    - python: 3.6\n      env: TOXENV=py36-dj110-drf36-codecov\n\n    - python: 3.6\n      env: TOXENV=py36-dj111-drf34-codecov\n    - python: 3.6\n      env: TOXENV=py36-dj111-drf35-codecov\n    - python: 3.6\n      env: TOXENV=py36-dj111-drf36-codecov\n\ninstall:\n  - pip install tox\n\nscript:\n  - tox\n\nafter_success:\n  - |\n    if [[ \"${TOXENV%-codecov}\" != \"$TOXENV\" ]]; then\n      pip install codecov\n      flags=\"${TOXENV//-/ }\"\n      flags=\"${flags//./}\"\n      codecov --name $TOXENV --flags $flags\n    fi\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014-2017 Blimp LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0859375,
          "content": "include README.rst LICENSE\nrecursive-exclude * __pycache__\nrecursive-exclude * *.py[co]\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 2.0068359375,
          "content": "REST framework JWT Auth\n=======================\n\n------------\n\nNotice\n------\n\nThis project is currently unmaintained. `Check #484 for more details and suggested alternatives`_.\n\n------------\n\n|build-status-image| |pypi-version|\n\n**JSON Web Token Authentication support for Django REST Framework**\n\nFull documentation for the project is available at `docs`_.\n\nOverview\n--------\n\nThis package provides `JSON Web Token Authentication`_ support for\n`Django REST framework`_.\n\nIf you want to know more about JWT, check out the following resources:\n\n-  DjangoCon 2014 - JSON Web Tokens `Video`_ \\| `Slides`_\n-  `Auth with JSON Web Tokens`_\n-  `JWT.io`_\n\nRequirements\n------------\n\n-  Python (2.7, 3.3, 3.4, 3.5, 3.6)\n-  Django (1.8, 1.9, 1.10, 1.11)\n-  Django REST Framework (3.1, 3.2, 3.3, 3.4, 3.5, 3.6)\n\nInstallation\n------------\n\nInstall using ``pip``\\ ...\n\n.. code:: bash\n\n    $ pip install djangorestframework-jwt\n\nDocumentation & Support\n-----------------------\n\nFull documentation for the project is available at `docs`_.\n\nYou may also want to follow the `author`_ on Twitter.\n\n.. _Check #484 for more details and suggested alternatives: https://github.com/jpadilla/django-rest-framework-jwt/issues/484\n.. _docs: https://jpadilla.github.io/django-rest-framework-jwt/\n.. _JSON Web Token Authentication: http://tools.ietf.org/html/draft-ietf-oauth-json-web-token\n.. _Django REST framework: http://django-rest-framework.org/\n.. _Video: https://www.youtube.com/watch?v=825hodQ61bg\n.. _Slides: https://speakerdeck.com/jpadilla/djangocon-json-web-tokens\n.. _Auth with JSON Web Tokens: http://jpadilla.com/post/73791304724/auth-with-json-web-tokens\n.. _JWT.io: http://jwt.io/\n.. _author: https://twitter.com/blimp\n\n.. |build-status-image| image:: https://secure.travis-ci.org/jpadilla/django-rest-framework-jwt.svg?branch=master\n   :target: http://travis-ci.org/jpadilla/django-rest-framework-jwt?branch=master\n.. |pypi-version| image:: https://img.shields.io/pypi/v/djangorestframework-jwt.svg\n   :target: https://pypi.python.org/pypi/djangorestframework-jwt\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 0.1943359375,
          "content": "site_name: Django REST framework JWT\nsite_description: JSON Web Token Authentication support for Django REST Framework\nsite_dir: html\n\nrepo_url: https://github.com/jpadilla/django-rest-framework-jwt\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.3330078125,
          "content": "# Laying these out as seperate requirements files, allows us to\n# only included the relevent sets when running tox, and ensures\n# we are only ever declaring out dependancies in one place.\n\n-r requirements/optionals.txt\n-r requirements/testing.txt\n-r requirements/documentation.txt\n-r requirements/codestyle.txt\n-r requirements/packaging.txt\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "rest_framework_jwt",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtests.py",
          "type": "blob",
          "size": 2.392578125,
          "content": "#! /usr/bin/env python\n\"\"\"\nFrom https://github.com/tomchristie/django-rest-framework/blob/bf09c32de8f9d528f83e9cb7a2773d1f4c9ab563/runtests.py\n\"\"\"\nfrom __future__ import print_function\n\nimport pytest\nimport sys\nimport os\nimport subprocess\n\n\nPYTEST_ARGS = {\n    'default': ['tests'],\n    'fast': ['tests', '-q'],\n}\n\nFLAKE8_ARGS = ['rest_framework_jwt', 'tests']\n\n\nsys.path.append(os.path.dirname(__file__))\n\ndef exit_on_failure(ret, message=None):\n    if ret:\n        sys.exit(ret)\n\ndef flake8_main(args):\n    print('Running flake8 code linting')\n    ret = subprocess.call(['flake8'] + args)\n    print('flake8 failed' if ret else 'flake8 passed')\n    return ret\n\ndef split_class_and_function(string):\n    class_string, function_string = string.split('.', 1)\n    return \"%s and %s\" % (class_string, function_string)\n\ndef is_function(string):\n    # `True` if it looks like a test function is included in the string.\n    return string.startswith('test_') or '.test_' in string\n\ndef is_class(string):\n    # `True` if first character is uppercase - assume it's a class name.\n    return string[0] == string[0].upper()\n\n\nif __name__ == \"__main__\":\n    try:\n        sys.argv.remove('--nolint')\n    except ValueError:\n        run_flake8 = True\n    else:\n        run_flake8 = False\n\n    try:\n        sys.argv.remove('--lintonly')\n    except ValueError:\n        run_tests = True\n    else:\n        run_tests = False\n\n    try:\n        sys.argv.remove('--fast')\n    except ValueError:\n        style = 'default'\n    else:\n        style = 'fast'\n        run_flake8 = False\n\n    if len(sys.argv) > 1:\n        pytest_args = sys.argv[1:]\n        first_arg = pytest_args[0]\n        if first_arg.startswith('-'):\n            # `runtests.py [flags]`\n            pytest_args = ['tests'] + pytest_args\n        elif is_class(first_arg) and is_function(first_arg):\n            # `runtests.py TestCase.test_function [flags]`\n            expression = split_class_and_function(first_arg)\n            pytest_args = ['tests', '-k', expression] + pytest_args[1:]\n        elif is_class(first_arg) or is_function(first_arg):\n            # `runtests.py TestCase [flags]`\n            # `runtests.py test_function [flags]`\n            pytest_args = ['tests', '-k', pytest_args[0]] + pytest_args[1:]\n    else:\n        pytest_args = PYTEST_ARGS[style]\n\n    if run_tests:\n        exit_on_failure(pytest.main(pytest_args))\n    if run_flake8:\n        exit_on_failure(flake8_main(FLAKE8_ARGS))\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.044921875,
          "content": "[wheel]\nuniversal = 1\n\n[flake8]\nignore = E501\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.2373046875,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport re\nimport shutil\nimport sys\n\nfrom setuptools import setup\n\n\ndef get_version(package):\n    \"\"\"\n    Return package version as listed in `__version__` in `init.py`.\n    \"\"\"\n    with open(os.path.join(package, '__init__.py'), 'rb') as init_py:\n        src = init_py.read().decode('utf-8')\n        return re.search(\"__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", src).group(1)\n\n\nname = 'djangorestframework-jwt'\nversion = get_version('rest_framework_jwt')\npackage = 'rest_framework_jwt'\ndescription = 'JSON Web Token based authentication for Django REST framework'\nurl = 'https://github.com/jpadilla/django-rest-framework-jwt'\nauthor = 'Jose Padilla'\nauthor_email = 'jpadilla@getblimp.com'\nlicense = 'MIT'\ninstall_requires = [\n    'PyJWT>=1.5.2,<2.0.0',\n]\n\n\ndef read(*paths):\n    \"\"\"\n    Build a file path from paths and return the contents.\n    \"\"\"\n    with open(os.path.join(*paths), 'r') as f:\n        return f.read()\n\n\ndef get_packages(package):\n    \"\"\"\n    Return root package and all sub-packages.\n    \"\"\"\n    return [dirpath\n            for dirpath, dirnames, filenames in os.walk(package)\n            if os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\n\ndef get_package_data(package):\n    \"\"\"\n    Return all files under the root package, that are not in a\n    package themselves.\n    \"\"\"\n    walk = [(dirpath.replace(package + os.sep, '', 1), filenames)\n            for dirpath, dirnames, filenames in os.walk(package)\n            if not os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\n    filepaths = []\n    for base, filenames in walk:\n        filepaths.extend([os.path.join(base, filename)\n                          for filename in filenames])\n    return {package: filepaths}\n\n\nif sys.argv[-1] == 'publish':\n    if os.system('pip freeze | grep twine'):\n        print('twine not installed.\\nUse `pip install twine`.\\nExiting.')\n        sys.exit()\n    os.system('python setup.py sdist bdist_wheel')\n    os.system('twine upload dist/*')\n    shutil.rmtree('dist')\n    shutil.rmtree('build')\n    shutil.rmtree('djangorestframework_jwt.egg-info')\n    print('You probably want to also tag the version now:')\n    print(\"  git tag -a {0} -m 'version {0}'\".format(version))\n    print('  git push --tags')\n    sys.exit()\n\n\nsetup(\n    name=name,\n    version=version,\n    url=url,\n    license=license,\n    description=description,\n    long_description=read('README.rst'),\n    author=author,\n    author_email=author_email,\n    packages=get_packages(package),\n    package_data=get_package_data(package),\n    install_requires=install_requires,\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Topic :: Internet :: WWW/HTTP',\n    ]\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.07421875,
          "content": "[tox]\nenvlist =\n       py27-{flake8,docs},\n       {py27,py33,py34,py35,py36}-dj{18,19,110,111}-drf{31,32,33,34,35,36}\n\n[testenv]\ncommands =\n       {env:COVERAGE_RUN:} ./runtests.py --fast {posargs} --verbose\n       coverage,codecov: coverage report -m\nsetenv =\n       PYTHONDONTWRITEBYTECODE=1\n       codecov,coverage: COVERAGE_RUN=coverage run\ndeps =\n       dj18: Django<1.9\n       dj19: Django<1.10\n       dj110: Django<1.11\n       dj111: Django<1.12\n       drf31: djangorestframework<3.2\n       drf32: djangorestframework<3.3\n       drf33: djangorestframework<3.4\n       drf34: djangorestframework<3.5\n       drf35: djangorestframework<3.6\n       drf36: djangorestframework<3.7\n       py27-dj{18,19}-drf{31,32,33,34}: djangorestframework-oauth==1.0.1\n       -rrequirements/testing.txt\n       coverage: coverage\n       codecov: codecov\n\n[testenv:py27-flake8]\ncommands = ./runtests.py --lintonly\ndeps =\n       -rrequirements/codestyle.txt\n       -rrequirements/testing.txt\n\n[testenv:py27-docs]\ncommands = mkdocs build\ndeps =\n       -rrequirements/testing.txt\n       -rrequirements/documentation.txt\n"
        }
      ]
    }
  ]
}