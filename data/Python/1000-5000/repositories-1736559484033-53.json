{
  "metadata": {
    "timestamp": 1736559484033,
    "page": 53,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebookresearch/moco",
      "stars": 4853,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0625,
          "content": "\nMIT License\n\nCopyright (c) Meta Platforms, Inc. and affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.46484375,
          "content": "## MoCo: Momentum Contrast for Unsupervised Visual Representation Learning\n\n<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/11435359/71603927-0ca98d00-2b14-11ea-9fd8-10d984a2de45.png\" width=\"300\">\n</p>\n\nThis is a PyTorch implementation of the [MoCo paper](https://arxiv.org/abs/1911.05722):\n```\n@Article{he2019moco,\n  author  = {Kaiming He and Haoqi Fan and Yuxin Wu and Saining Xie and Ross Girshick},\n  title   = {Momentum Contrast for Unsupervised Visual Representation Learning},\n  journal = {arXiv preprint arXiv:1911.05722},\n  year    = {2019},\n}\n```\nIt also includes the implementation of the [MoCo v2 paper](https://arxiv.org/abs/2003.04297):\n```\n@Article{chen2020mocov2,\n  author  = {Xinlei Chen and Haoqi Fan and Ross Girshick and Kaiming He},\n  title   = {Improved Baselines with Momentum Contrastive Learning},\n  journal = {arXiv preprint arXiv:2003.04297},\n  year    = {2020},\n}\n```\n\n\n### Preparation\n\nInstall PyTorch and ImageNet dataset following the [official PyTorch ImageNet training code](https://github.com/pytorch/examples/tree/master/imagenet).\n\nThis repo aims to be minimal modifications on that code. Check the modifications by:\n```\ndiff main_moco.py <(curl https://raw.githubusercontent.com/pytorch/examples/master/imagenet/main.py)\ndiff main_lincls.py <(curl https://raw.githubusercontent.com/pytorch/examples/master/imagenet/main.py)\n```\n\n\n### Unsupervised Training\n\nThis implementation only supports **multi-gpu**, **DistributedDataParallel** training, which is faster and simpler; single-gpu or DataParallel training is not supported.\n\nTo do unsupervised pre-training of a ResNet-50 model on ImageNet in an 8-gpu machine, run:\n```\npython main_moco.py \\\n  -a resnet50 \\\n  --lr 0.03 \\\n  --batch-size 256 \\\n  --dist-url 'tcp://localhost:10001' --multiprocessing-distributed --world-size 1 --rank 0 \\\n  [your imagenet-folder with train and val folders]\n```\nThis script uses all the default hyper-parameters as described in the MoCo v1 paper. To run MoCo v2, set `--mlp --moco-t 0.2 --aug-plus --cos`.\n\n***Note***: for 4-gpu training, we recommend following the [linear lr scaling recipe](https://arxiv.org/abs/1706.02677): `--lr 0.015 --batch-size 128` with 4 gpus. We got similar results using this setting.\n\n\n### Linear Classification\n\nWith a pre-trained model, to train a supervised linear classifier on frozen features/weights in an 8-gpu machine, run:\n```\npython main_lincls.py \\\n  -a resnet50 \\\n  --lr 30.0 \\\n  --batch-size 256 \\\n  --pretrained [your checkpoint path]/checkpoint_0199.pth.tar \\\n  --dist-url 'tcp://localhost:10001' --multiprocessing-distributed --world-size 1 --rank 0 \\\n  [your imagenet-folder with train and val folders]\n```\n\nLinear classification results on ImageNet using this repo with 8 NVIDIA V100 GPUs :\n<table><tbody>\n<!-- START TABLE -->\n<!-- TABLE HEADER -->\n<th valign=\"bottom\"></th>\n<th valign=\"bottom\">pre-train<br/>epochs</th>\n<th valign=\"bottom\">pre-train<br/>time</th>\n<th valign=\"bottom\">MoCo v1<br/>top-1 acc.</th>\n<th valign=\"bottom\">MoCo v2<br/>top-1 acc.</th>\n<!-- TABLE BODY -->\n<tr><td align=\"left\">ResNet-50</td>\n<td align=\"center\">200</td>\n<td align=\"center\">53 hours</td>\n<td align=\"center\">60.8&plusmn;0.2</td>\n<td align=\"center\">67.5&plusmn;0.1</td>\n</tr>\n</tbody></table>\n\nHere we run 5 trials (of pre-training and linear classification) and report mean&plusmn;std: the 5 results of MoCo v1 are {60.6, 60.6, 60.7, 60.9, 61.1}, and of MoCo v2 are {67.7, 67.6, 67.4, 67.6, 67.3}.\n\n\n### Models\n\nOur pre-trained ResNet-50 models can be downloaded as following:\n<table><tbody>\n<!-- START TABLE -->\n<!-- TABLE HEADER -->\n<th valign=\"bottom\"></th>\n<th valign=\"bottom\">epochs</th>\n<th valign=\"bottom\">mlp</th>\n<th valign=\"bottom\">aug+</th>\n<th valign=\"bottom\">cos</th>\n<th valign=\"bottom\">top-1 acc.</th>\n<th valign=\"bottom\">model</th>\n<th valign=\"bottom\">md5</th>\n<!-- TABLE BODY -->\n<tr><td align=\"left\"><a href=\"https://arxiv.org/abs/1911.05722\">MoCo v1</a></td>\n<td align=\"center\">200</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">60.6</td>\n<td align=\"center\"><a href=\"https://dl.fbaipublicfiles.com/moco/moco_checkpoints/moco_v1_200ep/moco_v1_200ep_pretrain.pth.tar\">download</a></td>\n<td align=\"center\"><tt>b251726a</tt></td>\n</tr>\n<tr><td align=\"left\"><a href=\"https://arxiv.org/abs/2003.04297\">MoCo v2</a></td>\n<td align=\"center\">200</td>\n<td align=\"center\">&#x2713</td>\n<td align=\"center\">&#x2713</td>\n<td align=\"center\">&#x2713</td>\n<td align=\"center\">67.7</td>\n<td align=\"center\"><a href=\"https://dl.fbaipublicfiles.com/moco/moco_checkpoints/moco_v2_200ep/moco_v2_200ep_pretrain.pth.tar\">download</a></td>\n<td align=\"center\"><tt>59fd9945</tt></td>\n</tr>\n<tr><td align=\"left\"><a href=\"https://arxiv.org/abs/2003.04297\">MoCo v2</a></td>\n<td align=\"center\">800</td>\n<td align=\"center\">&#x2713</td>\n<td align=\"center\">&#x2713</td>\n<td align=\"center\">&#x2713</td>\n<td align=\"center\">71.1</td>\n<td align=\"center\"><a href=\"https://dl.fbaipublicfiles.com/moco/moco_checkpoints/moco_v2_800ep/moco_v2_800ep_pretrain.pth.tar\">download</a></td>\n<td align=\"center\"><tt>a04e12f8</tt></td>\n</tr>\n</tbody></table>\n\n\n### Transferring to Object Detection\n\nSee [./detection](detection).\n\n\n### License\n\nThis project is under the CC-BY-NC 4.0 license. See [LICENSE](LICENSE) for details.\n\n### See Also\n* [moco.tensorflow](https://github.com/ppwwyyxx/moco.tensorflow): A TensorFlow re-implementation.\n* [Colab notebook](https://colab.research.google.com/github/facebookresearch/moco/blob/colab-notebook/colab/moco_cifar10_demo.ipynb): CIFAR demo on Colab GPU.\n"
        },
        {
          "name": "detection",
          "type": "tree",
          "content": null
        },
        {
          "name": "main_lincls.py",
          "type": "blob",
          "size": 19.3232421875,
          "content": "#!/usr/bin/env python\n# Copyright (c) Meta Platforms, Inc. and affiliates.\n\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\n\nimport argparse\nimport builtins\nimport os\nimport random\nimport shutil\nimport time\nimport warnings\n\nimport torch\nimport torch.backends.cudnn as cudnn\nimport torch.distributed as dist\nimport torch.multiprocessing as mp\nimport torch.nn as nn\nimport torch.nn.parallel\nimport torch.optim\nimport torch.utils.data\nimport torch.utils.data.distributed\nimport torchvision.datasets as datasets\nimport torchvision.models as models\nimport torchvision.transforms as transforms\n\n\nmodel_names = sorted(\n    name\n    for name in models.__dict__\n    if name.islower() and not name.startswith(\"__\") and callable(models.__dict__[name])\n)\n\nparser = argparse.ArgumentParser(description=\"PyTorch ImageNet Training\")\nparser.add_argument(\"data\", metavar=\"DIR\", help=\"path to dataset\")\nparser.add_argument(\n    \"-a\",\n    \"--arch\",\n    metavar=\"ARCH\",\n    default=\"resnet50\",\n    choices=model_names,\n    help=\"model architecture: \" + \" | \".join(model_names) + \" (default: resnet50)\",\n)\nparser.add_argument(\n    \"-j\",\n    \"--workers\",\n    default=32,\n    type=int,\n    metavar=\"N\",\n    help=\"number of data loading workers (default: 32)\",\n)\nparser.add_argument(\n    \"--epochs\", default=100, type=int, metavar=\"N\", help=\"number of total epochs to run\"\n)\nparser.add_argument(\n    \"--start-epoch\",\n    default=0,\n    type=int,\n    metavar=\"N\",\n    help=\"manual epoch number (useful on restarts)\",\n)\nparser.add_argument(\n    \"-b\",\n    \"--batch-size\",\n    default=256,\n    type=int,\n    metavar=\"N\",\n    help=\"mini-batch size (default: 256), this is the total \"\n    \"batch size of all GPUs on the current node when \"\n    \"using Data Parallel or Distributed Data Parallel\",\n)\nparser.add_argument(\n    \"--lr\",\n    \"--learning-rate\",\n    default=30.0,\n    type=float,\n    metavar=\"LR\",\n    help=\"initial learning rate\",\n    dest=\"lr\",\n)\nparser.add_argument(\n    \"--schedule\",\n    default=[60, 80],\n    nargs=\"*\",\n    type=int,\n    help=\"learning rate schedule (when to drop lr by a ratio)\",\n)\nparser.add_argument(\"--momentum\", default=0.9, type=float, metavar=\"M\", help=\"momentum\")\nparser.add_argument(\n    \"--wd\",\n    \"--weight-decay\",\n    default=0.0,\n    type=float,\n    metavar=\"W\",\n    help=\"weight decay (default: 0.)\",\n    dest=\"weight_decay\",\n)\nparser.add_argument(\n    \"-p\",\n    \"--print-freq\",\n    default=10,\n    type=int,\n    metavar=\"N\",\n    help=\"print frequency (default: 10)\",\n)\nparser.add_argument(\n    \"--resume\",\n    default=\"\",\n    type=str,\n    metavar=\"PATH\",\n    help=\"path to latest checkpoint (default: none)\",\n)\nparser.add_argument(\n    \"-e\",\n    \"--evaluate\",\n    dest=\"evaluate\",\n    action=\"store_true\",\n    help=\"evaluate model on validation set\",\n)\nparser.add_argument(\n    \"--world-size\",\n    default=-1,\n    type=int,\n    help=\"number of nodes for distributed training\",\n)\nparser.add_argument(\n    \"--rank\", default=-1, type=int, help=\"node rank for distributed training\"\n)\nparser.add_argument(\n    \"--dist-url\",\n    default=\"tcp://224.66.41.62:23456\",\n    type=str,\n    help=\"url used to set up distributed training\",\n)\nparser.add_argument(\n    \"--dist-backend\", default=\"nccl\", type=str, help=\"distributed backend\"\n)\nparser.add_argument(\n    \"--seed\", default=None, type=int, help=\"seed for initializing training. \"\n)\nparser.add_argument(\"--gpu\", default=None, type=int, help=\"GPU id to use.\")\nparser.add_argument(\n    \"--multiprocessing-distributed\",\n    action=\"store_true\",\n    help=\"Use multi-processing distributed training to launch \"\n    \"N processes per node, which has N GPUs. This is the \"\n    \"fastest way to use PyTorch for either single node or \"\n    \"multi node data parallel training\",\n)\n\nparser.add_argument(\n    \"--pretrained\", default=\"\", type=str, help=\"path to moco pretrained checkpoint\"\n)\n\nbest_acc1 = 0\n\n\ndef main():\n    args = parser.parse_args()\n\n    if args.seed is not None:\n        random.seed(args.seed)\n        torch.manual_seed(args.seed)\n        cudnn.deterministic = True\n        warnings.warn(\n            \"You have chosen to seed training. \"\n            \"This will turn on the CUDNN deterministic setting, \"\n            \"which can slow down your training considerably! \"\n            \"You may see unexpected behavior when restarting \"\n            \"from checkpoints.\"\n        )\n\n    if args.gpu is not None:\n        warnings.warn(\n            \"You have chosen a specific GPU. This will completely \"\n            \"disable data parallelism.\"\n        )\n\n    if args.dist_url == \"env://\" and args.world_size == -1:\n        args.world_size = int(os.environ[\"WORLD_SIZE\"])\n\n    args.distributed = args.world_size > 1 or args.multiprocessing_distributed\n\n    ngpus_per_node = torch.cuda.device_count()\n    if args.multiprocessing_distributed:\n        # Since we have ngpus_per_node processes per node, the total world_size\n        # needs to be adjusted accordingly\n        args.world_size = ngpus_per_node * args.world_size\n        # Use torch.multiprocessing.spawn to launch distributed processes: the\n        # main_worker process function\n        mp.spawn(main_worker, nprocs=ngpus_per_node, args=(ngpus_per_node, args))\n    else:\n        # Simply call main_worker function\n        main_worker(args.gpu, ngpus_per_node, args)\n\n\ndef main_worker(gpu, ngpus_per_node, args):\n    global best_acc1\n    args.gpu = gpu\n\n    # suppress printing if not master\n    if args.multiprocessing_distributed and args.gpu != 0:\n\n        def print_pass(*args):\n            pass\n\n        builtins.print = print_pass\n\n    if args.gpu is not None:\n        print(\"Use GPU: {} for training\".format(args.gpu))\n\n    if args.distributed:\n        if args.dist_url == \"env://\" and args.rank == -1:\n            args.rank = int(os.environ[\"RANK\"])\n        if args.multiprocessing_distributed:\n            # For multiprocessing distributed training, rank needs to be the\n            # global rank among all the processes\n            args.rank = args.rank * ngpus_per_node + gpu\n        dist.init_process_group(\n            backend=args.dist_backend,\n            init_method=args.dist_url,\n            world_size=args.world_size,\n            rank=args.rank,\n        )\n    # create model\n    print(\"=> creating model '{}'\".format(args.arch))\n    model = models.__dict__[args.arch]()\n\n    # freeze all layers but the last fc\n    for name, param in model.named_parameters():\n        if name not in [\"fc.weight\", \"fc.bias\"]:\n            param.requires_grad = False\n    # init the fc layer\n    model.fc.weight.data.normal_(mean=0.0, std=0.01)\n    model.fc.bias.data.zero_()\n\n    # load from pre-trained, before DistributedDataParallel constructor\n    if args.pretrained:\n        if os.path.isfile(args.pretrained):\n            print(\"=> loading checkpoint '{}'\".format(args.pretrained))\n            checkpoint = torch.load(args.pretrained, map_location=\"cpu\")\n\n            # rename moco pre-trained keys\n            state_dict = checkpoint[\"state_dict\"]\n            for k in list(state_dict.keys()):\n                # retain only encoder_q up to before the embedding layer\n                if k.startswith(\"module.encoder_q\") and not k.startswith(\n                    \"module.encoder_q.fc\"\n                ):\n                    # remove prefix\n                    state_dict[k[len(\"module.encoder_q.\") :]] = state_dict[k]\n                # delete renamed or unused k\n                del state_dict[k]\n\n            args.start_epoch = 0\n            msg = model.load_state_dict(state_dict, strict=False)\n            assert set(msg.missing_keys) == {\"fc.weight\", \"fc.bias\"}\n\n            print(\"=> loaded pre-trained model '{}'\".format(args.pretrained))\n        else:\n            print(\"=> no checkpoint found at '{}'\".format(args.pretrained))\n\n    if args.distributed:\n        # For multiprocessing distributed, DistributedDataParallel constructor\n        # should always set the single device scope, otherwise,\n        # DistributedDataParallel will use all available devices.\n        if args.gpu is not None:\n            torch.cuda.set_device(args.gpu)\n            model.cuda(args.gpu)\n            # When using a single GPU per process and per\n            # DistributedDataParallel, we need to divide the batch size\n            # ourselves based on the total number of GPUs we have\n            args.batch_size = int(args.batch_size / ngpus_per_node)\n            args.workers = int((args.workers + ngpus_per_node - 1) / ngpus_per_node)\n            model = torch.nn.parallel.DistributedDataParallel(\n                model, device_ids=[args.gpu]\n            )\n        else:\n            model.cuda()\n            # DistributedDataParallel will divide and allocate batch_size to all\n            # available GPUs if device_ids are not set\n            model = torch.nn.parallel.DistributedDataParallel(model)\n    elif args.gpu is not None:\n        torch.cuda.set_device(args.gpu)\n        model = model.cuda(args.gpu)\n    else:\n        # DataParallel will divide and allocate batch_size to all available GPUs\n        if args.arch.startswith(\"alexnet\") or args.arch.startswith(\"vgg\"):\n            model.features = torch.nn.DataParallel(model.features)\n            model.cuda()\n        else:\n            model = torch.nn.DataParallel(model).cuda()\n\n    # define loss function (criterion) and optimizer\n    criterion = nn.CrossEntropyLoss().cuda(args.gpu)\n\n    # optimize only the linear classifier\n    parameters = list(filter(lambda p: p.requires_grad, model.parameters()))\n    assert len(parameters) == 2  # fc.weight, fc.bias\n    optimizer = torch.optim.SGD(\n        parameters, args.lr, momentum=args.momentum, weight_decay=args.weight_decay\n    )\n\n    # optionally resume from a checkpoint\n    if args.resume:\n        if os.path.isfile(args.resume):\n            print(\"=> loading checkpoint '{}'\".format(args.resume))\n            if args.gpu is None:\n                checkpoint = torch.load(args.resume)\n            else:\n                # Map model to be loaded to specified single gpu.\n                loc = \"cuda:{}\".format(args.gpu)\n                checkpoint = torch.load(args.resume, map_location=loc)\n            args.start_epoch = checkpoint[\"epoch\"]\n            best_acc1 = checkpoint[\"best_acc1\"]\n            if args.gpu is not None:\n                # best_acc1 may be from a checkpoint from a different GPU\n                best_acc1 = best_acc1.to(args.gpu)\n            model.load_state_dict(checkpoint[\"state_dict\"])\n            optimizer.load_state_dict(checkpoint[\"optimizer\"])\n            print(\n                \"=> loaded checkpoint '{}' (epoch {})\".format(\n                    args.resume, checkpoint[\"epoch\"]\n                )\n            )\n        else:\n            print(\"=> no checkpoint found at '{}'\".format(args.resume))\n\n    cudnn.benchmark = True\n\n    # Data loading code\n    traindir = os.path.join(args.data, \"train\")\n    valdir = os.path.join(args.data, \"val\")\n    normalize = transforms.Normalize(\n        mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]\n    )\n\n    train_dataset = datasets.ImageFolder(\n        traindir,\n        transforms.Compose(\n            [\n                transforms.RandomResizedCrop(224),\n                transforms.RandomHorizontalFlip(),\n                transforms.ToTensor(),\n                normalize,\n            ]\n        ),\n    )\n\n    if args.distributed:\n        train_sampler = torch.utils.data.distributed.DistributedSampler(train_dataset)\n    else:\n        train_sampler = None\n\n    train_loader = torch.utils.data.DataLoader(\n        train_dataset,\n        batch_size=args.batch_size,\n        shuffle=(train_sampler is None),\n        num_workers=args.workers,\n        pin_memory=True,\n        sampler=train_sampler,\n    )\n\n    val_loader = torch.utils.data.DataLoader(\n        datasets.ImageFolder(\n            valdir,\n            transforms.Compose(\n                [\n                    transforms.Resize(256),\n                    transforms.CenterCrop(224),\n                    transforms.ToTensor(),\n                    normalize,\n                ]\n            ),\n        ),\n        batch_size=args.batch_size,\n        shuffle=False,\n        num_workers=args.workers,\n        pin_memory=True,\n    )\n\n    if args.evaluate:\n        validate(val_loader, model, criterion, args)\n        return\n\n    for epoch in range(args.start_epoch, args.epochs):\n        if args.distributed:\n            train_sampler.set_epoch(epoch)\n        adjust_learning_rate(optimizer, epoch, args)\n\n        # train for one epoch\n        train(train_loader, model, criterion, optimizer, epoch, args)\n\n        # evaluate on validation set\n        acc1 = validate(val_loader, model, criterion, args)\n\n        # remember best acc@1 and save checkpoint\n        is_best = acc1 > best_acc1\n        best_acc1 = max(acc1, best_acc1)\n\n        if not args.multiprocessing_distributed or (\n            args.multiprocessing_distributed and args.rank % ngpus_per_node == 0\n        ):\n            save_checkpoint(\n                {\n                    \"epoch\": epoch + 1,\n                    \"arch\": args.arch,\n                    \"state_dict\": model.state_dict(),\n                    \"best_acc1\": best_acc1,\n                    \"optimizer\": optimizer.state_dict(),\n                },\n                is_best,\n            )\n            if epoch == args.start_epoch:\n                sanity_check(model.state_dict(), args.pretrained)\n\n\ndef train(train_loader, model, criterion, optimizer, epoch, args):\n    batch_time = AverageMeter(\"Time\", \":6.3f\")\n    data_time = AverageMeter(\"Data\", \":6.3f\")\n    losses = AverageMeter(\"Loss\", \":.4e\")\n    top1 = AverageMeter(\"Acc@1\", \":6.2f\")\n    top5 = AverageMeter(\"Acc@5\", \":6.2f\")\n    progress = ProgressMeter(\n        len(train_loader),\n        [batch_time, data_time, losses, top1, top5],\n        prefix=\"Epoch: [{}]\".format(epoch),\n    )\n\n    \"\"\"\n    Switch to eval mode:\n    Under the protocol of linear classification on frozen features/models,\n    it is not legitimate to change any part of the pre-trained model.\n    BatchNorm in train mode may revise running mean/std (even if it receives\n    no gradient), which are part of the model parameters too.\n    \"\"\"\n    model.eval()\n\n    end = time.time()\n    for i, (images, target) in enumerate(train_loader):\n        # measure data loading time\n        data_time.update(time.time() - end)\n\n        if args.gpu is not None:\n            images = images.cuda(args.gpu, non_blocking=True)\n        target = target.cuda(args.gpu, non_blocking=True)\n\n        # compute output\n        output = model(images)\n        loss = criterion(output, target)\n\n        # measure accuracy and record loss\n        acc1, acc5 = accuracy(output, target, topk=(1, 5))\n        losses.update(loss.item(), images.size(0))\n        top1.update(acc1[0], images.size(0))\n        top5.update(acc5[0], images.size(0))\n\n        # compute gradient and do SGD step\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n        # measure elapsed time\n        batch_time.update(time.time() - end)\n        end = time.time()\n\n        if i % args.print_freq == 0:\n            progress.display(i)\n\n\ndef validate(val_loader, model, criterion, args):\n    batch_time = AverageMeter(\"Time\", \":6.3f\")\n    losses = AverageMeter(\"Loss\", \":.4e\")\n    top1 = AverageMeter(\"Acc@1\", \":6.2f\")\n    top5 = AverageMeter(\"Acc@5\", \":6.2f\")\n    progress = ProgressMeter(\n        len(val_loader), [batch_time, losses, top1, top5], prefix=\"Test: \"\n    )\n\n    # switch to evaluate mode\n    model.eval()\n\n    with torch.no_grad():\n        end = time.time()\n        for i, (images, target) in enumerate(val_loader):\n            if args.gpu is not None:\n                images = images.cuda(args.gpu, non_blocking=True)\n            target = target.cuda(args.gpu, non_blocking=True)\n\n            # compute output\n            output = model(images)\n            loss = criterion(output, target)\n\n            # measure accuracy and record loss\n            acc1, acc5 = accuracy(output, target, topk=(1, 5))\n            losses.update(loss.item(), images.size(0))\n            top1.update(acc1[0], images.size(0))\n            top5.update(acc5[0], images.size(0))\n\n            # measure elapsed time\n            batch_time.update(time.time() - end)\n            end = time.time()\n\n            if i % args.print_freq == 0:\n                progress.display(i)\n\n        # TODO: this should also be done with the ProgressMeter\n        print(\n            \" * Acc@1 {top1.avg:.3f} Acc@5 {top5.avg:.3f}\".format(top1=top1, top5=top5)\n        )\n\n    return top1.avg\n\n\ndef save_checkpoint(state, is_best, filename=\"checkpoint.pth.tar\"):\n    torch.save(state, filename)\n    if is_best:\n        shutil.copyfile(filename, \"model_best.pth.tar\")\n\n\ndef sanity_check(state_dict, pretrained_weights):\n    \"\"\"\n    Linear classifier should not change any weights other than the linear layer.\n    This sanity check asserts nothing wrong happens (e.g., BN stats updated).\n    \"\"\"\n    print(\"=> loading '{}' for sanity check\".format(pretrained_weights))\n    checkpoint = torch.load(pretrained_weights, map_location=\"cpu\")\n    state_dict_pre = checkpoint[\"state_dict\"]\n\n    for k in list(state_dict.keys()):\n        # only ignore fc layer\n        if \"fc.weight\" in k or \"fc.bias\" in k:\n            continue\n\n        # name in pretrained model\n        k_pre = (\n            \"module.encoder_q.\" + k[len(\"module.\") :]\n            if k.startswith(\"module.\")\n            else \"module.encoder_q.\" + k\n        )\n\n        assert (\n            state_dict[k].cpu() == state_dict_pre[k_pre]\n        ).all(), \"{} is changed in linear classifier training.\".format(k)\n\n    print(\"=> sanity check passed.\")\n\n\nclass AverageMeter:\n    \"\"\"Computes and stores the average and current value\"\"\"\n\n    def __init__(self, name, fmt=\":f\"):\n        self.name = name\n        self.fmt = fmt\n        self.reset()\n\n    def reset(self):\n        self.val = 0\n        self.avg = 0\n        self.sum = 0\n        self.count = 0\n\n    def update(self, val, n=1):\n        self.val = val\n        self.sum += val * n\n        self.count += n\n        self.avg = self.sum / self.count\n\n    def __str__(self):\n        fmtstr = \"{name} {val\" + self.fmt + \"} ({avg\" + self.fmt + \"})\"\n        return fmtstr.format(**self.__dict__)\n\n\nclass ProgressMeter:\n    def __init__(self, num_batches, meters, prefix=\"\"):\n        self.batch_fmtstr = self._get_batch_fmtstr(num_batches)\n        self.meters = meters\n        self.prefix = prefix\n\n    def display(self, batch):\n        entries = [self.prefix + self.batch_fmtstr.format(batch)]\n        entries += [str(meter) for meter in self.meters]\n        print(\"\\t\".join(entries))\n\n    def _get_batch_fmtstr(self, num_batches):\n        num_digits = len(str(num_batches // 1))\n        fmt = \"{:\" + str(num_digits) + \"d}\"\n        return \"[\" + fmt + \"/\" + fmt.format(num_batches) + \"]\"\n\n\ndef adjust_learning_rate(optimizer, epoch, args):\n    \"\"\"Decay the learning rate based on schedule\"\"\"\n    lr = args.lr\n    for milestone in args.schedule:\n        lr *= 0.1 if epoch >= milestone else 1.0\n    for param_group in optimizer.param_groups:\n        param_group[\"lr\"] = lr\n\n\ndef accuracy(output, target, topk=(1,)):\n    \"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"\n    with torch.no_grad():\n        maxk = max(topk)\n        batch_size = target.size(0)\n\n        _, pred = output.topk(maxk, 1, True, True)\n        pred = pred.t()\n        correct = pred.eq(target.view(1, -1).expand_as(pred))\n\n        res = []\n        for k in topk:\n            correct_k = correct[:k].view(-1).float().sum(0, keepdim=True)\n            res.append(correct_k.mul_(100.0 / batch_size))\n        return res\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "main_moco.py",
          "type": "blob",
          "size": 16.10546875,
          "content": "#!/usr/bin/env python\n\n# Copyright (c) Meta Platforms, Inc. and affiliates.\n\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\n\nimport argparse\nimport builtins\nimport math\nimport os\nimport random\nimport shutil\nimport time\nimport warnings\n\nimport deeplearning.cross_image_ssl.moco.builder\nimport deeplearning.cross_image_ssl.moco.loader\nimport torch\nimport torch.backends.cudnn as cudnn\nimport torch.distributed as dist\nimport torch.multiprocessing as mp\nimport torch.nn as nn\nimport torch.nn.parallel\nimport torch.optim\nimport torch.utils.data\nimport torch.utils.data.distributed\nimport torchvision.datasets as datasets\nimport torchvision.models as models\nimport torchvision.transforms as transforms\n\n\nmodel_names = sorted(\n    name\n    for name in models.__dict__\n    if name.islower() and not name.startswith(\"__\") and callable(models.__dict__[name])\n)\n\nparser = argparse.ArgumentParser(description=\"PyTorch ImageNet Training\")\nparser.add_argument(\"data\", metavar=\"DIR\", help=\"path to dataset\")\nparser.add_argument(\n    \"-a\",\n    \"--arch\",\n    metavar=\"ARCH\",\n    default=\"resnet50\",\n    choices=model_names,\n    help=\"model architecture: \" + \" | \".join(model_names) + \" (default: resnet50)\",\n)\nparser.add_argument(\n    \"-j\",\n    \"--workers\",\n    default=32,\n    type=int,\n    metavar=\"N\",\n    help=\"number of data loading workers (default: 32)\",\n)\nparser.add_argument(\n    \"--epochs\", default=200, type=int, metavar=\"N\", help=\"number of total epochs to run\"\n)\nparser.add_argument(\n    \"--start-epoch\",\n    default=0,\n    type=int,\n    metavar=\"N\",\n    help=\"manual epoch number (useful on restarts)\",\n)\nparser.add_argument(\n    \"-b\",\n    \"--batch-size\",\n    default=256,\n    type=int,\n    metavar=\"N\",\n    help=\"mini-batch size (default: 256), this is the total \"\n    \"batch size of all GPUs on the current node when \"\n    \"using Data Parallel or Distributed Data Parallel\",\n)\nparser.add_argument(\n    \"--lr\",\n    \"--learning-rate\",\n    default=0.03,\n    type=float,\n    metavar=\"LR\",\n    help=\"initial learning rate\",\n    dest=\"lr\",\n)\nparser.add_argument(\n    \"--schedule\",\n    default=[120, 160],\n    nargs=\"*\",\n    type=int,\n    help=\"learning rate schedule (when to drop lr by 10x)\",\n)\nparser.add_argument(\n    \"--momentum\", default=0.9, type=float, metavar=\"M\", help=\"momentum of SGD solver\"\n)\nparser.add_argument(\n    \"--wd\",\n    \"--weight-decay\",\n    default=1e-4,\n    type=float,\n    metavar=\"W\",\n    help=\"weight decay (default: 1e-4)\",\n    dest=\"weight_decay\",\n)\nparser.add_argument(\n    \"-p\",\n    \"--print-freq\",\n    default=10,\n    type=int,\n    metavar=\"N\",\n    help=\"print frequency (default: 10)\",\n)\nparser.add_argument(\n    \"--resume\",\n    default=\"\",\n    type=str,\n    metavar=\"PATH\",\n    help=\"path to latest checkpoint (default: none)\",\n)\nparser.add_argument(\n    \"--world-size\",\n    default=-1,\n    type=int,\n    help=\"number of nodes for distributed training\",\n)\nparser.add_argument(\n    \"--rank\", default=-1, type=int, help=\"node rank for distributed training\"\n)\nparser.add_argument(\n    \"--dist-url\",\n    default=\"tcp://224.66.41.62:23456\",\n    type=str,\n    help=\"url used to set up distributed training\",\n)\nparser.add_argument(\n    \"--dist-backend\", default=\"nccl\", type=str, help=\"distributed backend\"\n)\nparser.add_argument(\n    \"--seed\", default=None, type=int, help=\"seed for initializing training. \"\n)\nparser.add_argument(\"--gpu\", default=None, type=int, help=\"GPU id to use.\")\nparser.add_argument(\n    \"--multiprocessing-distributed\",\n    action=\"store_true\",\n    help=\"Use multi-processing distributed training to launch \"\n    \"N processes per node, which has N GPUs. This is the \"\n    \"fastest way to use PyTorch for either single node or \"\n    \"multi node data parallel training\",\n)\n\n# moco specific configs:\nparser.add_argument(\n    \"--moco-dim\", default=128, type=int, help=\"feature dimension (default: 128)\"\n)\nparser.add_argument(\n    \"--moco-k\",\n    default=65536,\n    type=int,\n    help=\"queue size; number of negative keys (default: 65536)\",\n)\nparser.add_argument(\n    \"--moco-m\",\n    default=0.999,\n    type=float,\n    help=\"moco momentum of updating key encoder (default: 0.999)\",\n)\nparser.add_argument(\n    \"--moco-t\", default=0.07, type=float, help=\"softmax temperature (default: 0.07)\"\n)\n\n# options for moco v2\nparser.add_argument(\"--mlp\", action=\"store_true\", help=\"use mlp head\")\nparser.add_argument(\n    \"--aug-plus\", action=\"store_true\", help=\"use moco v2 data augmentation\"\n)\nparser.add_argument(\"--cos\", action=\"store_true\", help=\"use cosine lr schedule\")\n\n\ndef main():\n    args = parser.parse_args()\n\n    if args.seed is not None:\n        random.seed(args.seed)\n        torch.manual_seed(args.seed)\n        cudnn.deterministic = True\n        warnings.warn(\n            \"You have chosen to seed training. \"\n            \"This will turn on the CUDNN deterministic setting, \"\n            \"which can slow down your training considerably! \"\n            \"You may see unexpected behavior when restarting \"\n            \"from checkpoints.\"\n        )\n\n    if args.gpu is not None:\n        warnings.warn(\n            \"You have chosen a specific GPU. This will completely \"\n            \"disable data parallelism.\"\n        )\n\n    if args.dist_url == \"env://\" and args.world_size == -1:\n        args.world_size = int(os.environ[\"WORLD_SIZE\"])\n\n    args.distributed = args.world_size > 1 or args.multiprocessing_distributed\n\n    ngpus_per_node = torch.cuda.device_count()\n    if args.multiprocessing_distributed:\n        # Since we have ngpus_per_node processes per node, the total world_size\n        # needs to be adjusted accordingly\n        args.world_size = ngpus_per_node * args.world_size\n        # Use torch.multiprocessing.spawn to launch distributed processes: the\n        # main_worker process function\n        mp.spawn(main_worker, nprocs=ngpus_per_node, args=(ngpus_per_node, args))\n    else:\n        # Simply call main_worker function\n        main_worker(args.gpu, ngpus_per_node, args)\n\n\ndef main_worker(gpu, ngpus_per_node, args):\n    args.gpu = gpu\n\n    # suppress printing if not master\n    if args.multiprocessing_distributed and args.gpu != 0:\n\n        def print_pass(*args):\n            pass\n\n        builtins.print = print_pass\n\n    if args.gpu is not None:\n        print(\"Use GPU: {} for training\".format(args.gpu))\n\n    if args.distributed:\n        if args.dist_url == \"env://\" and args.rank == -1:\n            args.rank = int(os.environ[\"RANK\"])\n        if args.multiprocessing_distributed:\n            # For multiprocessing distributed training, rank needs to be the\n            # global rank among all the processes\n            args.rank = args.rank * ngpus_per_node + gpu\n        dist.init_process_group(\n            backend=args.dist_backend,\n            init_method=args.dist_url,\n            world_size=args.world_size,\n            rank=args.rank,\n        )\n    # create model\n    print(\"=> creating model '{}'\".format(args.arch))\n    model = deeplearning.cross_image_ssl.moco.builder.MoCo(\n        models.__dict__[args.arch],\n        args.moco_dim,\n        args.moco_k,\n        args.moco_m,\n        args.moco_t,\n        args.mlp,\n    )\n    print(model)\n\n    if args.distributed:\n        # For multiprocessing distributed, DistributedDataParallel constructor\n        # should always set the single device scope, otherwise,\n        # DistributedDataParallel will use all available devices.\n        if args.gpu is not None:\n            torch.cuda.set_device(args.gpu)\n            model.cuda(args.gpu)\n            # When using a single GPU per process and per\n            # DistributedDataParallel, we need to divide the batch size\n            # ourselves based on the total number of GPUs we have\n            args.batch_size = int(args.batch_size / ngpus_per_node)\n            args.workers = int((args.workers + ngpus_per_node - 1) / ngpus_per_node)\n            model = torch.nn.parallel.DistributedDataParallel(\n                model, device_ids=[args.gpu]\n            )\n        else:\n            model.cuda()\n            # DistributedDataParallel will divide and allocate batch_size to all\n            # available GPUs if device_ids are not set\n            model = torch.nn.parallel.DistributedDataParallel(model)\n    elif args.gpu is not None:\n        torch.cuda.set_device(args.gpu)\n        model = model.cuda(args.gpu)\n        # comment out the following line for debugging\n        raise NotImplementedError(\"Only DistributedDataParallel is supported.\")\n    else:\n        # AllGather implementation (batch shuffle, queue update, etc.) in\n        # this code only supports DistributedDataParallel.\n        raise NotImplementedError(\"Only DistributedDataParallel is supported.\")\n\n    # define loss function (criterion) and optimizer\n    criterion = nn.CrossEntropyLoss().cuda(args.gpu)\n\n    optimizer = torch.optim.SGD(\n        model.parameters(),\n        args.lr,\n        momentum=args.momentum,\n        weight_decay=args.weight_decay,\n    )\n\n    # optionally resume from a checkpoint\n    if args.resume:\n        if os.path.isfile(args.resume):\n            print(\"=> loading checkpoint '{}'\".format(args.resume))\n            if args.gpu is None:\n                checkpoint = torch.load(args.resume)\n            else:\n                # Map model to be loaded to specified single gpu.\n                loc = \"cuda:{}\".format(args.gpu)\n                checkpoint = torch.load(args.resume, map_location=loc)\n            args.start_epoch = checkpoint[\"epoch\"]\n            model.load_state_dict(checkpoint[\"state_dict\"])\n            optimizer.load_state_dict(checkpoint[\"optimizer\"])\n            print(\n                \"=> loaded checkpoint '{}' (epoch {})\".format(\n                    args.resume, checkpoint[\"epoch\"]\n                )\n            )\n        else:\n            print(\"=> no checkpoint found at '{}'\".format(args.resume))\n\n    cudnn.benchmark = True\n\n    # Data loading code\n    traindir = os.path.join(args.data, \"train\")\n    normalize = transforms.Normalize(\n        mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]\n    )\n    if args.aug_plus:\n        # MoCo v2's aug: similar to SimCLR https://arxiv.org/abs/2002.05709\n        augmentation = [\n            transforms.RandomResizedCrop(224, scale=(0.2, 1.0)),\n            transforms.RandomApply(\n                [transforms.ColorJitter(0.4, 0.4, 0.4, 0.1)],\n                p=0.8,  # not strengthened\n            ),\n            transforms.RandomGrayscale(p=0.2),\n            transforms.RandomApply(\n                [deeplearning.cross_image_ssl.moco.loader.GaussianBlur([0.1, 2.0])],\n                p=0.5,\n            ),\n            transforms.RandomHorizontalFlip(),\n            transforms.ToTensor(),\n            normalize,\n        ]\n    else:\n        # MoCo v1's aug: the same as InstDisc https://arxiv.org/abs/1805.01978\n        augmentation = [\n            transforms.RandomResizedCrop(224, scale=(0.2, 1.0)),\n            transforms.RandomGrayscale(p=0.2),\n            transforms.ColorJitter(0.4, 0.4, 0.4, 0.4),\n            transforms.RandomHorizontalFlip(),\n            transforms.ToTensor(),\n            normalize,\n        ]\n\n    train_dataset = datasets.ImageFolder(\n        traindir,\n        deeplearning.cross_image_ssl.moco.loader.TwoCropsTransform(\n            transforms.Compose(augmentation)\n        ),\n    )\n\n    if args.distributed:\n        train_sampler = torch.utils.data.distributed.DistributedSampler(train_dataset)\n    else:\n        train_sampler = None\n\n    train_loader = torch.utils.data.DataLoader(\n        train_dataset,\n        batch_size=args.batch_size,\n        shuffle=(train_sampler is None),\n        num_workers=args.workers,\n        pin_memory=True,\n        sampler=train_sampler,\n        drop_last=True,\n    )\n\n    for epoch in range(args.start_epoch, args.epochs):\n        if args.distributed:\n            train_sampler.set_epoch(epoch)\n        adjust_learning_rate(optimizer, epoch, args)\n\n        # train for one epoch\n        train(train_loader, model, criterion, optimizer, epoch, args)\n\n        if not args.multiprocessing_distributed or (\n            args.multiprocessing_distributed and args.rank % ngpus_per_node == 0\n        ):\n            save_checkpoint(\n                {\n                    \"epoch\": epoch + 1,\n                    \"arch\": args.arch,\n                    \"state_dict\": model.state_dict(),\n                    \"optimizer\": optimizer.state_dict(),\n                },\n                is_best=False,\n                filename=\"checkpoint_{:04d}.pth.tar\".format(epoch),\n            )\n\n\ndef train(train_loader, model, criterion, optimizer, epoch, args):\n    batch_time = AverageMeter(\"Time\", \":6.3f\")\n    data_time = AverageMeter(\"Data\", \":6.3f\")\n    losses = AverageMeter(\"Loss\", \":.4e\")\n    top1 = AverageMeter(\"Acc@1\", \":6.2f\")\n    top5 = AverageMeter(\"Acc@5\", \":6.2f\")\n    progress = ProgressMeter(\n        len(train_loader),\n        [batch_time, data_time, losses, top1, top5],\n        prefix=\"Epoch: [{}]\".format(epoch),\n    )\n\n    # switch to train mode\n    model.train()\n\n    end = time.time()\n    for i, (images, _) in enumerate(train_loader):\n        # measure data loading time\n        data_time.update(time.time() - end)\n\n        if args.gpu is not None:\n            images[0] = images[0].cuda(args.gpu, non_blocking=True)\n            images[1] = images[1].cuda(args.gpu, non_blocking=True)\n\n        # compute output\n        output, target = model(im_q=images[0], im_k=images[1])\n        loss = criterion(output, target)\n\n        # acc1/acc5 are (K+1)-way contrast classifier accuracy\n        # measure accuracy and record loss\n        acc1, acc5 = accuracy(output, target, topk=(1, 5))\n        losses.update(loss.item(), images[0].size(0))\n        top1.update(acc1[0], images[0].size(0))\n        top5.update(acc5[0], images[0].size(0))\n\n        # compute gradient and do SGD step\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n        # measure elapsed time\n        batch_time.update(time.time() - end)\n        end = time.time()\n\n        if i % args.print_freq == 0:\n            progress.display(i)\n\n\ndef save_checkpoint(state, is_best, filename=\"checkpoint.pth.tar\"):\n    torch.save(state, filename)\n    if is_best:\n        shutil.copyfile(filename, \"model_best.pth.tar\")\n\n\nclass AverageMeter:\n    \"\"\"Computes and stores the average and current value\"\"\"\n\n    def __init__(self, name, fmt=\":f\"):\n        self.name = name\n        self.fmt = fmt\n        self.reset()\n\n    def reset(self):\n        self.val = 0\n        self.avg = 0\n        self.sum = 0\n        self.count = 0\n\n    def update(self, val, n=1):\n        self.val = val\n        self.sum += val * n\n        self.count += n\n        self.avg = self.sum / self.count\n\n    def __str__(self):\n        fmtstr = \"{name} {val\" + self.fmt + \"} ({avg\" + self.fmt + \"})\"\n        return fmtstr.format(**self.__dict__)\n\n\nclass ProgressMeter:\n    def __init__(self, num_batches, meters, prefix=\"\"):\n        self.batch_fmtstr = self._get_batch_fmtstr(num_batches)\n        self.meters = meters\n        self.prefix = prefix\n\n    def display(self, batch):\n        entries = [self.prefix + self.batch_fmtstr.format(batch)]\n        entries += [str(meter) for meter in self.meters]\n        print(\"\\t\".join(entries))\n\n    def _get_batch_fmtstr(self, num_batches):\n        num_digits = len(str(num_batches // 1))\n        fmt = \"{:\" + str(num_digits) + \"d}\"\n        return \"[\" + fmt + \"/\" + fmt.format(num_batches) + \"]\"\n\n\ndef adjust_learning_rate(optimizer, epoch, args):\n    \"\"\"Decay the learning rate based on schedule\"\"\"\n    lr = args.lr\n    if args.cos:  # cosine lr schedule\n        lr *= 0.5 * (1.0 + math.cos(math.pi * epoch / args.epochs))\n    else:  # stepwise lr schedule\n        for milestone in args.schedule:\n            lr *= 0.1 if epoch >= milestone else 1.0\n    for param_group in optimizer.param_groups:\n        param_group[\"lr\"] = lr\n\n\ndef accuracy(output, target, topk=(1,)):\n    \"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"\n    with torch.no_grad():\n        maxk = max(topk)\n        batch_size = target.size(0)\n\n        _, pred = output.topk(maxk, 1, True, True)\n        pred = pred.t()\n        correct = pred.eq(target.view(1, -1).expand_as(pred))\n\n        res = []\n        for k in topk:\n            correct_k = correct[:k].view(-1).float().sum(0, keepdim=True)\n            res.append(correct_k.mul_(100.0 / batch_size))\n        return res\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "moco",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}