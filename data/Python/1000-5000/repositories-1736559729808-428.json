{
  "metadata": {
    "timestamp": 1736559729808,
    "page": 428,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "WithSecureLabs/drozer",
      "stars": 4021,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2431640625,
          "content": "*~\n*.apk\n*.zip\n*.cache\n*.hg\n*.deb\ndebian/*\n*.rpm\nredhat/*\n*.pyc\n.mercury_history\n.profile\nbuild/*\ndist/*\ndrozer.egg-info\nlog/*.log\nobj\nsrc/drozer/modules/**/*.class\nsrc/drozer/modules/**/*.apk\nsrc/drozer.egg-info\nmercury.log\ndeb_dist/*\n*.tar.gz\n.vs/"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0869140625,
          "content": "[submodule \"common\"]\n\tpath = common\n\turl = https://github.com/mwrlabs/mercury-common.git\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.7041015625,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2024, WithSecure\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nThis licence does not apply to the following components:\n\n - apktool located at /src/drozer/lib/apktool.jar, released under an Apache2\n   License and is available at: https://github.com/iBotPeaches/Apktool\n - BusyBox located at /src/drozer/modules/tools/setup/\n   Released under a GPLv2 License, and available to download from: http://www.busybox.net/\n - BouncyCastle, located at /src/drozer/ssl/bcprov-ext-jdk15on-1.46.jar\n   Released under a modified MIT X11 License, and available to download\n   from: http://www.bouncycastle.org/\n - The Google Protocol Buffers support library for Java, located at:\n   /src/drozer/lib/protobuf-java-2.6.1.jar. Owned by Google and available to\n   download from: https://developers.google.com/protocol-buffers/\n - Parts of the Android SDK located at:\n     /src/drozer/lib/aapt\n     /src/drozer/lib/d8\n     /src/drozer/lib/d8.jar\n     /src/drozer/lib/d8.bat\n     /src/drozer/lib/find_java.exe\n     /src/drozer/lib/android.jar;\n     /src/drozer/lib/android-support-v4.jar;\n     /src/drozer/lib/signapk.jar\n    The following bits are part of the Android SDK but have been edited to be used by drozer\n     /src/drozer/lib/find_java.bat\n    Released under an Apache 2 License and is available to download from: http://developer.android.com/\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.322265625,
          "content": "# drozer\n\ndrozer is a security testing framework for Android.\n\ndrozer allows you to search for security vulnerabilities in apps and devices by assuming the role of an app and interacting with the Android Runtime, other apps' IPC endpoints and the underlying OS.\n\ndrozer provides tools to help you use, share and understand public Android exploits.\n\ndrozer is open source software, maintained by WithSecure, and can be downloaded from: [https://labs.withsecure.com/tools/drozer/](https://labs.withsecure.com/tools/drozer/)\n\n## NOTE\n\nThis is an BETA release of a rewritten drozer version; this version is updated to support python3.\n\nCurrently, the following known issues are present:\n\n- Building of custom agents functionality will crash the drozer client. This functionality is considered out of scope for the beta release of the revived drozer project.\n\n## Docker Container\n\nTo help with making sure drozer can be run on all systems, a Docker container was created that has a working build of drozer.\n\n* The Docker container and basic setup instructions can be found [here](https://hub.docker.com/r/withsecurelabs/drozer).\n* Instructions on building your own Docker container can be found [here](https://github.com/WithSecureLabs/drozer/tree/develop/docker).\n\n## Manual Building and Installation\n\n### Software pre-requisites\n\n1. [Python3.8](https://www.python.org/downloads/)\n2. [Protobuf](https://pypi.python.org/pypi/protobuf) 4.25.2 or greater\n3. [Pyopenssl](https://pypi.python.org/pypi/pyOpenSSL) 22.0.0 or greater\n4. [Twisted](https://pypi.python.org/pypi/Twisted) 18.9.0 or greater\n4. [Distro](https://pypi.org/project/distro/) 1.8.0 or greater\n5. [Java Development Kit](https://adoptopenjdk.net/releases.html) 11 or greater\n\n### Installing\n\nYou can use `pip` or `pipx` (preferably, if available) to install the latest release of drozer from PyPI:\n\n```shell\npipx install drozer\n```\n\nAlternatively, you can download individual [releases](https://github.com/WithSecureLabs/drozer/releases/) from GitHub and run:\n\n```shell\npipx install ./drozer-*.whl\n```\n\nIf you haven't already, consider running:\n```shell\npipx ensurepath\n```\n\nto ensure `pipx`-installed packages appear in your `PATH`\n\n## Building\n\nTo build drozer from source you can run.\n\n```shell\ngit clone https://github.com/WithSecureLabs/drozer.git\ncd drozer\npip install .\n```\n\nTo build the Android native components against a specific SDK you can set the `ANDROID_SDK` environment variable to the path. For example:\n\n**Linux/macOS:**\n```shell\nexport ANDROID_SDK=/home/drozerUser/Android/Sdk/platforms/android-34/android.jar\n```\n\n**Windows - PowerShell:**\n```powershell\nNew-Item -Path Env:\\ANDROID_SDK -Value 'C:\\Users\\drozerUser\\AppData\\Local\\Android\\sdk\\platforms\\android-34\\android.jar'\n```\n\n**Windows - cmd:**\n```cmd\nset ANDROID_SDK = \"C:\\Users\\drozerUser\\AppData\\Local\\Android\\sdk\\platforms\\android-34\\android.jar\"\n```\n\n The location of the `d8` tool used can also be changed by setting `D8`.\n\n## Usage\n\n### Installing the Agent\n\ndrozer can be installed using Android Debug Bridge (adb).\n\nDownload the latest drozer Agent [here](https://github.com/WithSecureLabs/drozer-agent/releases/latest).\n\n```shell\nadb install drozer-agent.apk\n```\n\n### Setup for session\n\nYou should now have the drozer Console installed on your PC, and the Agent running on your test device. Now, you need to connect the two and youâ€™re ready to start exploring.\n\nWe will use the server embedded in the drozer Agent to do this. First, launch the Agent, select the \"Embedded Server\" option and tap \"Enable\" to start the server. You should see a notification that the server has started. \n\nThen, follow one of the options below.\n\n#### Option 1: Connect to the phone via network\n\nBy default, the drozer Agent listens for incoming TCP connections on all interfaces on port 31415. In order to connect to the Agent, run the following command:\n\n```\ndrozer console connect --server <phone's IP address>\n```\n\nIf you are using the Docker container, the equivalent command would be:\n\n```\ndocker run --net host -it withsecurelabs/drozer console connect --server <phone's IP address>\n```\n\n#### Option 2: Connect to the phone via USB\n\nIn some scenarios, connecting to the device over the network may not be viable. In these scenarios, we can leverage `adb`'s port-forwarding capabilities to establish a connection over USB.\n\nFirst, you need to set up a suitable port forward so that your PC can connect to a TCP socket opened by the Agent inside the emulator, or on the device. By default, drozer uses port 31415\n\n```shell\nadb forward tcp:31415 tcp:31415\n```\n\nYou can now connect to the drozer Agent by connecting to `localhost` (or simply not specifying the target IP)\n\n```shell\ndrozer console connect\n```\n\n### Confirming a successful connection\n\nYou should be presented with a drozer command prompt:\n\n```\nSelecting ebe9fcc0c47b28da (Google sdk_gphone64_x86_64 12)\n\n            ..                    ..:.\n           ..o..                  .r..\n            ..a..  . ....... .  ..nd\n              ro..idsnemesisand..pr\n              .otectorandroidsneme.\n           .,sisandprotectorandroids+.\n         ..nemesisandprotectorandroidsn:.\n        .emesisandprotectorandroidsnemes..\n      ..isandp,..,rotecyayandro,..,idsnem.\n      .isisandp..rotectorandroid..snemisis.\n      ,andprotectorandroidsnemisisandprotec.\n     .torandroidsnemesisandprotectorandroid.\n     .snemisisandprotectorandroidsnemesisan:\n     .dprotectorandroidsnemesisandprotector.\n\ndrozer Console (v3.0.0)\ndz>\n```\nThe prompt confirms the Android ID of the device you have connected to, along with the manufacturer, model and Android software version.\n\nYou are now ready to start exploring the device.\n\n### Command Reference\n\n| Command        | Description           |\n| ------------- |:-------------|\n| run  | Executes a drozer module\n| list | Show a list of all drozer modules that can be executed in the current session. This hides modules that you do not have suitable permissions to run. | \n| shell | Start an interactive Linux shell on the device, in the context of the Agent process. | \n| cd | Mounts a particular namespace as the root of session, to avoid having to repeatedly type the full name of a module. | \n| clean | Remove temporary files stored by drozer on the Android device. | \n| contributors | Displays a list of people who have contributed to the drozer framework and modules in use on your system. | \n| echo | Print text to the console. | \n| exit | Terminate the drozer session. | \n| help | Display help about a particular command or module. | \n| load | Load a file containing drozer commands, and execute them in sequence. | \n| module | Find and install additional drozer modules from the Internet. | \n| permissions | Display a list of the permissions granted to the drozer Agent. | \n| set | Store a value in a variable that will be passed as an environment variable to any Linux shells spawned by drozer. | \n| unset | Remove a named variable that drozer passes to any Linux shells that it spawns. | \n\n## License\n\ndrozer is released under a 3-clause BSD License. See LICENSE for full details.\n\n## Contacting the Project\n\ndrozer is Open Source software, made great by contributions from the community.\n\nFor full source code, to report bugs, suggest features and contribute patches please see our Github project:\n\n  <https://github.com/WithSecureLabs/drozer>\n\nBug reports, feature requests, comments and questions can be submitted [here](https://github.com/WithSecureLabs/drozer/issues).\n"
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.2724609375,
          "content": "[build-system]\nrequires = [\"setuptools >= 61.0\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"drozer\"\ndynamic = [\"version\"]\ndependencies = [\"protobuf>=4.25.2\",\n    \"pyopenssl>=22.0.0\",\n    \"twisted>=18.9.0\",\n    \"service-identity\",\n    \"distro\",\n    \"pyyaml\",\n    \"requests\"]\nrequires-python = \">=3.8\"\nauthors = [\n    { name = \"WithSecure\", email = \"drozer@withsecure.com\" },\n]\ndescription = \"The Leading Android Security Testing Framework\"\nreadme = \"README.md\"\nlicense = { file = \"LICENSE\" }\nkeywords = ['drozer', 'android', 'security', 'framework']\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: BSD License\",\n    \"Operating System :: OS Independent\",\n    \"Topic :: Security\",\n]\n\n[project.urls]\nHomepage = \"https://labs.withsecure.com/tools/drozer/\"\nDocumentation = \"https://labs.withsecure.com/tools/drozer/\"\nRepository = \"https://github.com/WithSecureLabs/drozer.git\"\nIssues = \"https://github.com/WithSecureLabs/drozer/issues\"\n\n[project.scripts]\ndrozer = \"drozer.main:main\"\ndrozer-repository = \"drozer.repoman.main:main\"\ndrozer-complete = \"drozer.autocomplete:main\"\n\n[tool.setuptools.package-dir]\ndrozer = \"src/drozer\"\nWithSecure = \"src/WithSecure\"\npysolar = \"src/pysolar\"\n\n[tool.setuptools.dynamic]\nversion = { attr = \"drozer.__version__\" }"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.087890625,
          "content": "protobuf>=4.25.2\npyopenssl>=22.0.0\ntwisted>=18.9.0\nservice-identity\ndistro\npyyaml\nrequests"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.3076171875,
          "content": "import sys\nfrom fnmatch import fnmatch\nimport os\nfrom shutil import which\nimport setuptools\nfrom subprocess import run\n\n\ndef clear_apks():\n    pwd = os.path.join('src', 'drozer', 'modules')\n\n    for root, dirnames, filenames in os.walk(pwd):\n        for filename in filenames:\n            if fnmatch(filename, \"*.class\") or \\\n                    fnmatch(filename, \"*.apk\") or \\\n                    fnmatch(filename, \"*.zip\"):\n                os.remove(os.path.join(root, filename))\n\n\ndef make_apks():\n    pwd = os.path.join('src', 'drozer', 'modules')\n\n    if 'ANDROID_SDK' not in os.environ:\n        # raise Exception(\"ANDROID_SDK environment variable not set\")\n        sdk = os.path.join('src', 'drozer', 'lib', 'android.jar')\n        sdk = os.path.abspath(sdk)\n    else:\n        sdk = os.environ['ANDROID_SDK']\n\n    if 'D8' not in os.environ:\n        # raise Exception(\"D8 environment variable not set\")\n        d8 = os.path.join('src', 'drozer', 'lib', 'd8')\n        d8 += '.bat' if sys.platform == 'win32' else ''\n        d8 = os.path.abspath(d8)\n    else:\n        d8 = os.environ['D8']\n\n    if which('javac') is None:\n        raise Exception(\"javac not installed, unable to compile APKs\")\n\n    # If apks exist, delete them and generate new ones\n    clear_apks()\n\n    # Generate apks\n    for root, _, filenames in os.walk(pwd):\n        for filename in filenames:\n            if fnmatch(filename, \"*.java\"):\n                # Compile java\n                javac_cmd = ['javac', '-cp', sdk, filename]\n\n                # Build apk\n                basename, _ = filename.split('.')\n                d8_cmd = [d8, '--output', basename + '.zip', basename + '*.class', '--lib', sdk]\n\n                run(' '.join(javac_cmd), shell=True, cwd=root)\n                run(' '.join(d8_cmd), shell=True, cwd=root)\n\n                os.rename(os.path.join(root, basename + '.zip'), os.path.join(root, basename + '.apk'))\n\n\ndef get_package_data():\n    data = {\"\": []}\n    pwd = os.path.join('src', 'drozer')\n\n    # Make sure we build apks before generating a package\n    make_apks()\n\n    for root, _, filenames in os.walk(pwd):\n        for filename in filenames:\n            if not fnmatch(filename, \"*.class\") or fnmatch(filename, \"*.pyc\"):\n                data[\"\"].append(os.path.join(root, filename)[11:])\n    return data\n\n\nsetuptools.setup(package_data=get_package_data())\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}