{
  "metadata": {
    "timestamp": 1736559480128,
    "page": 47,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jorgebastida/awslogs",
      "stars": 4878,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.12890625,
          "content": "*.egg\n*.egg-info\n*.pyc\n.DS_Store\n.cache\n.coverage\n.eggs\n.ropeproject\n.tox\nbuild\ndist\nhtmlcov/\n__pychache__\n.vscode\n**/.pytest_cache\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.88671875,
          "content": "awslogs is mainly developed and maintained by Jorge Bastida <me@jorgebastida.com>\n\nA big thanks to all the contributors:\nAdam Johnson <me@adamj.eu>\nAngel Abad <angelabad@gmail.com>\nÁlex González <agonzalezro@gmail.com>\nEric Hayes <ejhayes@jacobianengineering.com>\nPhilip Neustrom <philip@localwiki.org>\nTim De Pauw <@tmdpw>\nJan Vlčinský <@vlcinsky>\nDaniel Hahler <github@thequod.de>\nNathan Leiby <@nathanleiby>\nThomas Grainger <website@graingert.co.uk>\nCharlie Chrisman <charlie@plivo.com>\nSamuel Cochran <sj26@sj26.com>\nrwolfson <rwolfson>\nAlex Pinkney <@apinkney97>\nLogan Hendricks <@loghen41>\nJuhani Hietikko <juhani.hietikko@gmail.com>\nClément MATHIEU <clement+github@unportant.info>\nOliver Bristow <@Code0x58>\nWahab Ali <@wahabmk>\nGalen Huntington <@galenhuntington>\nEduard <@eduard93>\nBranch Vincent <@branchvincent>\ntometzky <@tometzky>\nBryan Monsalvatge <@BMonsalvatge>\nTrey Valenta <@tvalenta>\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 3.9912109375,
          "content": "0.15.0\n======\n- Improve utf-8 support (Thanks and Eduard and Tristan-Lynass) #99 #121 #147 #156 #157 #165 #215 #273 #255 #299 #300 #339 #348 #364 #366 #376\n- Support Python 3.12 (Thanks Branch Vincent)\n- Drop support for old versions of Python\n- Allow to execute module with python3 -m (Thanks tometzky)\n- Add VSCode configuration for dev-containers to make development easier\n- Deprecate Travis\n- Run tests on Github actions (Linux, Windows and Macos)\n- Bump termcolor to fix related issues (Thanks Trey Valenta)\n\n0.14.0\n======\n- New --aws-endpoint-url option to configure awslogs to use services such localstack, fakes3, etc...\n\n0.13.0\n======\n\n- Use the configured region when using ``--profile``.\n- Drop support for Python 2\n- Test against Python 3.7 and 3.8.\n\n0.12.0\n======\n- Extra polish on issue markdown (Thanks Oliver Bristow)\n- Require at least boto3>=1.5.0 (Thanks Wahab Ali)\n- Handle AWS_PROFILE env variable (Thanks Galen Huntington)\n\n0.11.0\n======\n- Add finer-grained control over color output (Thanks Alex Pinkney)\n- Make watch interval configurable (Thanks Logan Hendricks)\n- Reuse aws-cli MFA sessions cache if present (Thanks Juhani Hietikko)\n- Use lastIngestionTime instead of lastEventTimestamp in order to correctly filter streams (Thanks Daniel Hahler and Clément MATHIEU)\n\n0.10.0\n======\n- Gracefully exit on SIGPIPE (Thanks rwolfson) #122 #93 #101\n\n0.9.0\n=====\n- New default start time for \"streams\"\n\n0.8.0\n=====\n- New: ``--log-group-prefix``, ``-p`` option to filter groups.\n- Fix: Remove extra newline after each line.\n\n0.7.0\n=====\n- Improve documentation (Thanks Pietro Di Bello)\n- Make it possible to use timezoned timestamps as input for ``-start`` and ``-end`` (Thanks Samuel Cochran)\n- New: ``--query`` will now accept a JMESPath query which will filter the response data (Thanks Samuel Cochran)\n\n0.6.0\n=====\n- Add wheels support (Thanks Thomas Grainger)\n- Improve core removing threading (Thanks Thomas Grainger)\n- Fix output when several newlines are present at the end onf the log line #73 (Thanks Charlie Chrisman)\n\n0.5.0\n=====\n- Start using tox (Thanks Jan Vlčinský)\n- If streams are filtered, and none are found, awslogs will complain #52 (Thanks Nathan Leiby)\n- Add shortcuts to --filter-pattern and --watch (Thanks spenthil)\n- Add python 3.5 support #70 (Thanks adamchainz)\n- Flush message output to stdout #67 (Thanks spenthil)\n\n0.4.0\n=====\n* Fix utf-8 issues\n* Add ``-S`` as shorthand for ``--no-stream`` and ``-G`` as shorthand for ``--no-group``. Thanks Adam Chainz\n\n0.3.0\n=====\n* Add ``--timestamp`` and ``--ingestion-time`` Thanks vlcinsky #36\n* Fix help texts. Thanks Daniel Hahler #46\n* Add flake8 to travis\n\n0.2.0\n=====\n* Add ``--filter-pattern`` option. #28\n* Fix issue with --end default value in  Windows 10 x64. #24\n* Added support for ``--profile`` #29\n* Fix argparse error in Python 3. #31\n* Fix some filtering stream issues #32\n* Default value for ``--start`` is now 5 minutes instead of 24h.\n\n0.1.2\n=====\n* Add some documentation about installing awslogs in \"El Capitan\"\n* Fix #21 - Problems to stop awslogs when pressing Ctrl+C.\n\n0.1.1\n=====\n* Fix dependecies so installing awslogs from pypi works again.\n\n0.1.0\n=====\n* awslogs now use ``boto3`` instead of ``boto2``.\n* awslogs don't longer require ``gevent``.\n* massive refactoring of the internals now that ``aws`` provides ``filter_log_events`` out the box.\n* awslogs don't longer support retrieving logs from several groups at the same time.\n* awslogs now support python: 2.7, 3.3 and 3.4\n\n0.0.3\n=====\n* Filter streams by ``start`` and ``end`` in order to reduce the initial volume of queries #9.\n* Fix next_token unbound after exception #8\n\n0.0.2\n=====\n* Deal with AccessDeniedException properly #3.\n* Return some helpful information if boto raises NoAuthHandlerFound #2.\n* Make --aws-access-key-id, --aws-secret-access-key and --aws-region available to all parsers (groups, streams, get).\n* Make it required to provide a valid region using --aws-region or AWS_REGION.\n* Improve error messages by providing some hints.\n* Add MANIFEST file #7.\n\n0.0.1\n=====\n* Initial release\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.4931640625,
          "content": "Copyright (c) 2015 Benito Jorge Bastida\nAll rights reserved.\n\nRevised BSD License\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n 1. Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above\n    copyright notice, this list of conditions and the following\n    disclaimer in the documentation and/or other materials provided\n    with the distribution.\n\n 3. Neither the name of the author nor the names of other\n    contributors may be used to endorse or promote products derived\n    from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.3291015625,
          "content": "FROM python:3.12\nENV PYTHONUNBUFFERED 1\nENV PYTHONDONTWRITEBYTECODE 1\nRUN apt-get update\nRUN apt-get install -y build-essential python3-dev\nRUN mkdir -p /usr/src\nWORKDIR /usr/src\nCOPY requirements.txt /usr/src/requirements.txt\nRUN pip install --upgrade pip\nRUN pip install -r requirements.txt\nCOPY . /usr/src\nRUN python setup.py develop\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0654296875,
          "content": "include AUTHORS\ninclude CHANGELOG\ninclude COPYING\ninclude tests.py\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 6.998046875,
          "content": "awslogs\n=======\n\n.. image:: https://badge.fury.io/py/awslogs.png\n  :target: http://badge.fury.io/py/awslogs\n\n.. image:: https://coveralls.io/repos/jorgebastida/awslogs/badge.svg\n  :target: https://coveralls.io/r/jorgebastida/awslogs\n\n\n``awslogs`` is a simple command line tool for querying groups, streams and events from `Amazon CloudWatch <http://aws.amazon.com/cloudwatch/>`_ logs.\n\nOne of the most powerful features is to query events from several streams and consume them (ordered) in pseudo-realtime using your favourite tools such as ``grep``::\n\n    $ awslogs get /var/log/syslog ip-10-1.* --start='2h ago' | grep ERROR\n\n\nFeatures\n--------\n\n* Aggregate logs from across streams.\n\n  - Aggregate all streams in a group.\n  - Aggregate streams matching a regular expression.\n\n* Colored output.\n* List existing groups\n\n  - ``$ awslogs groups``\n\n* List existing streams\n\n  - ``$ awslogs streams /var/log/syslog``\n\n* Watch logs as they are created\n\n  - ``$ awslogs get /var/log/syslog ALL --watch``\n\n* Human-friendly time filtering:\n\n  - ``--start='23/1/2015 14:23'``\n  - ``--start='2h ago'``\n  - ``--start='2d ago'``\n  - ``--start='2w ago'``\n  - ``--start='2d ago' --end='1h ago'``\n\n* Retrieve event metadata:\n\n  - ``--timestamp`` Prints the creation timestamp of each event.\n  - ``--ingestion-time`` Prints the ingestion time of each event.\n\n\nExample\n-------\n\nRunning: ``awslogs get /var/logs/syslog ALL -s1d`` will return you events from any ``stream`` in the ``/var/logs/syslog`` group generated in the last day.\n\n.. image:: https://github.com/jorgebastida/awslogs/raw/master/media/screenshot.png\n\n\nInstallation\n------------\n\nYou can easily install ``awslogs`` using ``pip``::\n\n  $ pip install awslogs\n\nIf you are on OSX El Capitan, use the following (Why? Check Donald Stufft's comment `here <https://github.com/pypa/pip/issues/3165#issuecomment-145856429>`_) ::\n\n  $ pip install awslogs --ignore-installed six\n\nYou can also install it with `brew <https://brew.sh/>`_::\n\n  $ brew install awslogs\n\n\nOptions\n-------\n\n* ``awslogs groups``: List existing groups\n* ``awslogs streams GROUP``: List existing streams within ``GROUP``\n* ``awslogs get GROUP [STREAM_EXPRESSION]``: Get logs matching ``STREAM_EXPRESSION`` in ``GROUP``.\n\n  - Expressions can be regular expressions or the wildcard ``ALL`` if you want any and don't want to type ``.*``.\n\n**Note:** You need to provide to all these options a valid AWS region using ``--aws-region`` or ``AWS_REGION`` env variable.\n\n\nTime options\n-------------\n\nWhile querying for logs you can filter events by ``--start`` ``-s`` and ``--end`` ``-e`` date.\n\n* By minute:\n\n  - ``--start='2m'`` Events generated two minutes ago.\n  - ``--start='1 minute'`` Events generated one minute ago.\n  - ``--start='5 minutes'`` Events generated five minutes ago.\n\n* By hours:\n\n  - ``--start='2h'`` Events generated two hours ago.\n  - ``--start='1 hour'`` Events generated one hour ago.\n  - ``--start='5 hours'`` Events generated five hours ago.\n\n* By days:\n\n  - ``--start='2d'`` Events generated two days ago.\n  - ``--start='1 day'`` Events generated one day ago.\n  - ``--start='5 days'`` Events generated five days ago.\n\n* By weeks:\n\n  - ``--start='2w'`` Events generated two week ago.\n  - ``--start='1 week'`` Events generated one weeks ago.\n  - ``--start='5 weeks'`` Events generated five week ago.\n\n* Using specific dates:\n\n  - ``--start='23/1/2015 12:00'`` Events generated after midday  on the 23th of January 2015.\n  - ``--start='1/1/2015'`` Events generated after midnight on the 1st of January 2015.\n  - ``--start='Sat Oct 11 17:13:46 UTC 2003'`` You can use detailed dates too.\n\n  Note, for time parsing awslogs uses `dateutil <https://dateutil.readthedocs.io/en/latest/>`_.\n\n* All previous examples are applicable for  ``--end`` ``-e`` too.\n\nFilter options\n----------------\n\nYou can use ``--filter-pattern`` if you want to only retrieve logs which match one CloudWatch Logs Filter pattern.\nThis is helpful if you know precisely what you are looking for, and don't want to download the entire stream.\n\nFor example, if you only want to download only the report events from a Lambda stream you can run::\n\n  $ awslogs get my_lambda_group --filter-pattern=\"[r=REPORT,...]\"\n\n\nFull documentation of how to write patterns: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/FilterAndPatternSyntax.html\n\nJSON logs\n------------\n\nIn a similar way than the `aws-cli <http://docs.aws.amazon.com/cli/latest/userguide/controlling-output.html#controlling-output-filter>`_ command, you can use  ``--query`` to\nfilter each of your json log lines and extract certain fields::\n\n  $ awslogs get my_lambda_group --query=message\n\nThis will only display the ``message`` field for each of the json log lines.\n\n\nUsing third-party endpoints\n-------------\n\nIf you use tools like localstack, fakes3 or other, consider to change boto3 endpoint using ``--aws-endpoint-url`` or ``AWS_REGION`` env variable.\n\n\nAWS IAM Permissions\n-------------------\n\nThe required permissions to run ``awslogs`` are contained within the `CloudWatchLogsReadOnlyAccess <https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-identity-based-access-control-cwl.html>`_ AWS managed permissions.\nAs of 2020-01-13, these are the permissions::\n\n    {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Action\": [\n                    \"logs:Describe*\",\n                    \"logs:Get*\",\n                    \"logs:List*\",\n                    \"logs:StartQuery\",\n                    \"logs:StopQuery\",\n                    \"logs:TestMetricFilter\",\n                    \"logs:FilterLogEvents\"\n                ],\n                \"Effect\": \"Allow\",\n                \"Resource\": \"*\"\n            }\n        ]\n    }\n\nContribute\n-----------\n\n* Fork the repository on GitHub.\n* Write a test which shows that the bug was fixed or that the feature works as expected.\n\n  - Use ``tox`` command to run all the tests in all locally available python version.\n\n* Send a pull request and bug the maintainer until it gets merged and published. :).\n\nFor more instructions see `TESTING.md`.\n\n\nHelpful Links\n-------------\n\n* http://aws.amazon.com/cloudwatch/\n* https://boto.readthedocs.io/en/latest/ref/logs.html\n* http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_limits.html\n\n\n\nHow to provide AWS credentials to awslogs\n------------------------------------------\n\nAlthough, the most straightforward thing to do might be use ``--aws-access-key-id`` and ``--aws-secret-access-key``, this will eventually become a pain in the ass.\n\n* If you only have one ``AWS`` account, my personal recommendation would be to configure `aws-cli <http://aws.amazon.com/cli/>`_. ``awslogs`` will use those credentials if available. If you have multiple ``AWS`` profiles managed by ``aws-cli``, just add ``--profile [PROFILE_NAME]`` at the end of every ``awslogs`` command to use those credentials, or set the ``AWS_PROFILE`` env variable.\n* If you don't want to setup ``aws-cli``, I would recommend you to use `envdir <https://pypi.python.org/pypi/envdir>`_ in order to make ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY`` available to ``awslogs``.\n"
        },
        {
          "name": "TESTING.md",
          "type": "blob",
          "size": 0.9775390625,
          "content": "# Testing\n\nThis document provides instructions and recipes for testing the code\nbefore submitting.\n\nThe only required procedure is as follows:\n\n1.  Make sure, you have `tox` installed::\n\n    $ pip install -U tox\n\n2.  Run all tests across all locally available python versions::\n\n    $ tox\n\nMake sure, all tests are passing.\n\nIf it runs in at least one python version, you may ignore the\n`ERROR: pyXY: InterpreterNotFound: pythonX.Y` errors.\n\n## Release a new version\n\nThis task is relevant to package maintainer only.\n\nWhen is all ready for release:\n\n1.  Commit all changes to git\n2.  Run the tests to be sure, all is really ready\n3.  Add “version” tag to git, e.g.: `$ git tag -a 9.10`\n4.  Build the distributable (more details below)\n5.  Upload the distributable to pypi as usually\n\nTo build the distributable, there are few options.\n\nRunning `tox` creates the package in `.tox/dist` directory.\n\nOr you may activate relevant virtualenv and run::\n\n    $ python setup.py <buld_command_you_prefer>\n"
        },
        {
          "name": "awslogs",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.1875,
          "content": "version: \"3\"\nservices:\n    dev:\n        command: /bin/sh -c \"while sleep 1000; do :; done\"\n        build: .\n        working_dir: \"/usr/src\"\n        volumes:\n            - .:/usr/src:delegated\n"
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.0634765625,
          "content": "[pytest]\npython_files = tests.py test_*.py tests_*.py *_tests.py\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1064453125,
          "content": "# Development\nmock==5.0.1\nipdb==0.13.9\ndebugpy==1.6.6\nblack==22.3.0\npylint==2.16.2\npytest==7.2.1\ntox==4.14.2\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.025390625,
          "content": "[bdist_wheel]\nuniversal=1\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.3564453125,
          "content": "from setuptools import setup, find_packages\n\n\ninstall_requires = [\n    \"boto3>=1.34.75\",\n    \"jmespath>=1.0.1\",\n    \"termcolor>=2.4.0\",\n    \"python-dateutil>=2.9.0\",\n]\n\n\nsetup(\n    name=\"awslogs\",\n    version=\"0.15.0\",\n    url=\"https://github.com/jorgebastida/awslogs\",\n    license=\"BSD\",\n    author=\"Jorge Bastida\",\n    author_email=\"me@jorgebastida.com\",\n    description=\"awslogs is a simple command line tool to read aws cloudwatch logs.\",\n    long_description=\"awslogs is a simple command line tool to read aws cloudwatch logs.\",\n    keywords=\"aws logs cloudwatch\",\n    packages=find_packages(exclude=['tests']),\n    platforms=\"any\",\n    python_requires=\">=3.8\",\n    install_requires=install_requires,\n    test_suite=\"tests\",\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n        \"Development Status :: 4 - Beta\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Utilities\",\n    ],\n    entry_points={\n        \"console_scripts\": [\n            \"awslogs = awslogs.bin:main\",\n        ]\n    },\n    zip_safe=False,\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.119140625,
          "content": "[tox]\nenvlist = py{38,39,310,311,312}\n\n[testenv]\nchangedir = tests\ncommands =\n    pytest\n    awslogs --help\ndeps = pytest\n"
        }
      ]
    }
  ]
}