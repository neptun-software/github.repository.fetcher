{
  "metadata": {
    "timestamp": 1736559659493,
    "page": 322,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "initialcommit-com/git-sim",
      "stars": 4218,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0869140625,
          "content": ".DS_Store\n__pycache__\n*.pyc\nmedia/\ngit-sim_media/\nbuild/\ndist/\ngit_sim.egg-info/\n\n.venv/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.462890625,
          "content": "# Contributing to Git-Sim\n\nThanks for checking out Git-Sim and for your interest in contributing! I hope\nthat we can work together to build an incredible tool for developers to\nvisualize Git commands.\n\n## Reporting bugs\n\nTo report a bug you found, please open a [GitHub issue](https://github.com/initialcommit-com/git-sim/issues/new)\nand describe the error or problem in detail. Please check [existing issues](https://github.com/initialcommit-com/git-sim/issues)\nto make sure it hasn't already been reported.\n\nWhen submitting a new issue, it helps to include:\n\n1) The steps you took that lead to the issue\n2) Any error message(s) that you received\n3) A description of any unexpected behavior\n4) The version of Git-Sim you're running\n5) The version of Python you're running and whether it's system-level or in a virtual environment\n6) The operating system and version you're running\n\n## Suggesting enhancements or new features\n\nIf you've got a cool idea for a feature that you'd like to see implemented in\nGit-Sim, we'd love to hear about it!\n\nTo suggest an enhancement or new feature, please open a [GitHub issue](https://github.com/initialcommit-com/git-sim/issues/new)\nand describe your proposed idea in detail. Please include why you think this\nidea would be beneficial to the Git-Sim user base.\n\n## Your first code contribution\n\nNote: Git-Sim is a new project so these steps are not fully optimized yet, but\nthey should get you going.\n\nTo start contributing code to Git-Sim, you'll need to perform the following\nsteps:\n\n1) Install [manim and manim dependencies for your OS](https://www.manim.community/)\n2) [Fork the Git-Sim codebase](https://github.com/initialcommit-com/git-sim/fork)\nso that you have a copy on GitHub that you can clone and work with\n3) Clone the codebase down to your local machine\n4) Checkout and commit new work to the `dev` branch\n5) If you previously installed Git-Sim normally using pip, uninstall it first using:\n\n```console\n$ pip uninstall git-sim\n```\n\n6) To run the code locally from source, install the development package by running:\n\n```console\n$ cd path/to/git-sim\n$ python -m pip install -e .[dev]\n```\n\n> Explanation: `python -m pip` uses the `pip` module of the currently active python interpreter.\n>\n> `install -e .[dev]` is the command that `pip` executes, where\n>\n> `-e` means to make it an [editable install](https://setuptools.pypa.io/en/latest/userguide/development_mode.html),\n>\n> the dot `.` refers to the current directory,\n>\n> and `[dev]` tells pip to install the \"`dev`\" [Extras](https://packaging.python.org/en/latest/tutorials/installing-packages/#installing-extras) (which are defined in the `project.optional-dependencies` section of [`pyproject.toml`](./pyproject.toml)).\n\nThis will install sources from your cloned repo such that you can edit the source and the changes are reflected instantly.\n\nIf you already have the dependencies, you can ignore those using the `--no-deps` flag:\n\n```console\n$ python -m pip install --no-deps -e .\n```\n\n7) You can run your local Git-Sim commands from within other local repos like this:\n\n```console\n$ git-sim [global options] <subcommand> [subcommand options]\n```\n\nFor example, you can simulate the `git add` command locally like this:\n\n```console\n$ cd path/to/any/local/git/repo\n$ git-sim --animate add newfile.txt\n```\n\n8) After pushing your code changes up to your fork, [submit a pull request to the `dev` branch](https://github.com/initialcommit-com/git-sim/compare) for me\nto review your code, provide feedback, and merge it into the codebase!\n\n## Code style guide\n\nSince Git-Sim is a new project, we don't have an official code style set in\nstone. For now just try and make your new code fit in with the existing style\nyou find in the codebase, and we'll update this section later if that changes.\n\n## Code Formatting\n\nThis project uses the [`black`](https://github.com/psf/black) code formatter to keep all code in a constistent format.\n\nPlease install it in your development environment and run `black path/to/changed/files` before committing any changes.\n\n## Commit conventions\n\nWe have a few simple rules for Git-Sim commit messages:\n\n1) Write commit messages in the [imperative mood](https://initialcommit.com/blog/Git-Commit-Message-Imperative-Mood)\n2) Add a signoff trailer to your commits by using the `-s` flag when you make\nyour commits, like this:\n\n```\n$ git commit -sm \"Fixed xyz...\"\n```\n\n## Questions\n\nIf you have any additional questions about contributing to Git-Sim, feel free\nto [send me an email at jacob@initialcommit.io](mailto:jacob@initialcommit.io).\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.2109375,
          "content": "FROM python:3\n\nWORKDIR /usr/src/git-sim\n\nRUN apt update\n\nRUN apt -y install build-essential python3-dev libcairo2-dev libpango1.0-dev ffmpeg\n\nRUN pip3 install manim\n\nRUN pip3 install git-sim\n\nENTRYPOINT [ \"git-sim\" ]"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0283203125,
          "content": "include src/git_sim/logo.png\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 25.0302734375,
          "content": "# git-sim\n![git-sim-logo-with-tagline-1440x376p45](https://user-images.githubusercontent.com/49353917/232990611-58d0693f-69c0-45c8-b51d-cd540793d18c.gif)\n\n[![GitHub license](https://img.shields.io/github/license/initialcommit-com/git-sim)](https://github.com/initialcommit-com/git-sim/blob/main/LICENSE)\n[![GitHub tag](https://img.shields.io/github/v/release/initialcommit-com/git-sim)](https://img.shields.io/github/v/release/initialcommit-com/git-sim)\n[![Downloads](https://static.pepy.tech/badge/git-sim)](https://pepy.tech/project/git-sim)\n[![Contributors](https://img.shields.io/github/contributors/initialcommit-com/git-sim)](https://github.com/initialcommit-com/git-sim/graphs/contributors)\n[![Share](https://img.shields.io/twitter/url?label=Share&url=https%3A%2F%2Ftwitter.com%2Finitcommit)](https://twitter.com/intent/tweet?text=Check%20out%20%23gitsim%20%2D%20a%20tool%20to%20visualize%20%23Git%20operations%20in%20your%20local%20repos%20with%20a%20single%20terminal%20command,%20by%20%40initcommit!%20https%3A%2F%2Fgithub%2Ecom%2Finitialcommit%2Dcom%2Fgit%2Dsim)\n\nVisually simulate Git operations in your own repos with a single terminal command.\n\nThis generates an image (default) or video visualization depicting the Git command's behavior.\n\nCommand syntax is based directly on Git's command-line syntax, so using git-sim is as familiar as possible.\n\nExample: `$ git-sim merge <branch>`\n<br/><br/>\n![git-sim-merge_04-22-23_21-04-32_cropped](https://user-images.githubusercontent.com/49353917/233821875-a7bb640d-10be-4433-a8fb-bd25646eeff4.jpg)\n\nCheck out the [git-sim release blog post](https://initialcommit.com/blog/git-sim) for the full scoop!\n\n## Support git-sim\nGit-Sim is Free and Open-Source Software (FOSS). Your support will help me work on it (and other Git projects) full time!\n- [Sponsor Git-Sim on GitHub](https://github.com/sponsors/initialcommit-com)\n- [Support Git-Sim via Patreon](https://patreon.com/user?u=92322459)\n\n## Use cases\n- Visualize Git commands to understand their effects on your repo before actually running them\n- Prevent unexpected working directory and repository states by simulating before running\n- Share visualizations (jpg/png image or mp4/webm video) of your Git commands with your team, or the world\n- Save visualizations as a part of your team documentation to document workflow and prevent recurring issues\n- Create static Git diagrams (jpg/png) or dynamic animated videos (mp4/webm) to speed up content creation\n- Help visual learners understand how Git commands work\n- Combine with bundled command [git-dummy](https://github.com/initialcommit-com/git-dummy) to generate a dummy Git repo and then simulate operations on it\n\n## Features\n- Run a one-liner git-sim command in the terminal to generate a custom Git command visualization (.jpg) from your repo\n- Supported commands: `add`, `branch`, `checkout`, `cherry-pick`, `clean`, `clone`, `commit`, `config`, `fetch`, `init`, `log`, `merge`, `mv`, `pull`, `push`, `rebase`, `remote`, `reset`, `restore`, `revert`, `rm`, `stash`, `status`, `switch`, `tag`\n- Generate an animated video (.mp4) instead of a static image using the `--animate` flag (note: significant performance slowdown, it is recommended to use `--low-quality` to speed up testing and remove when ready to generate presentation-quality video)\n- Color commits by parameter, such as author with the `--color-by=author` option\n- Choose between dark mode (default) and light mode\n- Specify output formats of either jpg, png, mp4, or webm\n- Combine with bundled command [git-dummy](https://github.com/initialcommit-com/git-dummy) to generate a dummy Git repo and then simulate operations on it\n- Animation only: Add custom branded intro/outro sequences if desired\n- Animation only: Speed up or slow down animation speed as desired\n\n## Quickstart\nNote: If you prefer to install git-sim with Docker, skip steps (1) and (2) here and jump to the [Docker installation](#docker-installation) section below, then come back here to step (3).\n\n1) **Install Manim and its dependencies for your OS / environment:**\n    - [Install Manim on Windows](https://docs.manim.community/en/stable/installation/windows.html)\n    - [Install Manim on MacOS](https://docs.manim.community/en/stable/installation/macos.html)\n    - [Install Manim on Linux](https://docs.manim.community/en/stable/installation/linux.html)\n    - [Install Manim in Conda](https://docs.manim.community/en/stable/installation/conda.html)\n\n2) Install `git-sim`:\n\n```console\n$ pip3 install git-sim\n```\n\nNote: For MacOS, it is recommended to **NOT** use the system Python to install Git-Sim, and instead use [Homebrew](https://brew.sh) to install a version of Python to work with Git-Sim. Virtual environments should work too.\n\n3) Browse to the Git repository you want to simulate Git commands in:\n\n```console\n$ cd path/to/git/repo\n```\n\n4) Run the program:\n\n```console\n$ git-sim [global options] <subcommand> [subcommand options]\n```\n\nOptional: If you don't have an existing Git repo to simulate commands on, use the bundled [git-dummy](https://github.com/initialcommit-com/git-dummy) command to generate a dummy Git repo with the desired number of branches and commits to simulate operations on with git-sim:\n\n```console\n$ git-dummy --name=\"dummy-repo\" --branches=3 --commits=10\n$ cd dummy-repo\n$ git-sim [global options] <subcommand> [subcommand options]\n```\n\nOr if you want to do it all in a single command:\n\n```console\n$ git-dummy --no-subdir --branches=3 --commits=10 && git-sim [global options] <subcommand> [subcommand options]\n```\n\n5) Simulated output will be created as a `.jpg` file. Output files are named using the subcommand executed combined with a timestamp, and by default are stored in a subdirectory called `git-sim_media/`. The location of this subdirectory is customizable using the command line flag `--media-dir=path/to/output`. Note that when the `--animate` global flag is used, render times will be much longer and a `.mp4` video output file will be produced.\n\n6) For convenience, environment variables can be set for any global command-line option available in git-sim. All environment variables start with `git_sim_` followed by the name of the option.\n\nFor example, the `--media-dir` option can be set as an environment variable like:\n\n```console\n$ export git_sim_media_dir=~/Desktop\n```\n\nSimilarly, the `--speed` option can be set like:\n\n```console\n$ export git_sim_speed=2\n```\n\nBoolean flags can be set like:\n\n```console\n$ export git_sim_light_mode=true\n```\n\nIn general:\n\n```console\n$ export git_sim_option_name=option_value\n```\n\nExplicitly specifying options at the command-line takes precedence over the corresponding environment variable values.\n\n7) See global help for list of global options/flags and subcommands:\n\n```console\n$ git-sim -h\n```\n\n8) See subcommand help for list of options/flags for a specific subcommand:\n\n```console\n$ git-sim <subcommand> -h\n```\n\n## Requirements\n* Python 3.7 or greater\n* Pip (Package manager for Python)\n* [Manim (Community version)](https://www.manim.community/)\n\n## Commands\nBasic usage is similar to Git itself - `git-sim` takes a familiar set of subcommands including \"add\", \"branch\", \"checkout\", \"cherry-pick\", \"clean\", \"clone\", \"commit\", \"config\", \"fetch\", \"init\", \"log\", \"merge\", \"mv\", \"pull\", \"push\", \"rebase\", \"remote\", \"reset\", \"restore\", \"revert\", \"rm\", \"stash\", \"status\", \"switch\", \"tag\" along with corresponding options.\n\n\n```console\n$ git-sim [global options] <subcommand> [subcommand options]\n```\n\nThe `[global options]` apply to the overarching `git-sim` simulation itself, including:\n\n`-n <number>`: Number of commits to display from each branch head.  \n`--all`: Display all local branches in the log output.  \n`--animate`: Instead of outputting a static image, animate the Git command behavior in a .mp4 video.  \n`--color-by author`: Color commits by parameter, such as author.  \n`--invert-branches`: Invert positioning of branches by reversing order of multiple parents where applicable.  \n`--hide-merged-branches`: Hide commits from merged branches, i.e. only display mainline commits.  \n`--media-dir`: The path at which to store the simulated output media files.  \n`-d`: Disable the automatic opening of the image/video file after generation. Useful to avoid errors in console mode with no GUI.  \n`--light-mode`: Use a light mode color scheme instead of default dark mode.  \n`--reverse, -r`: Display commit history in the reverse direction.  \n`--img-format`: Output format for the image file, i.e. `jpg` or `png`. Default output format is `jpg`.  \n`--stdout`: Write raw image data to stdout while suppressing all other program output.  \n`--output-only-path`: Only output the path to the generated media file to stdout. Useful for other programs to ingest.  \n`--quiet, -q`: Suppress all output except errors.  \n`--highlight-commit-messages`: Make commit message text bigger and bold, and hide commit ids.  \n`--style`: Graphical style of the output image or animated video, i.e. `clean` (default) or `thick`.\n\nAnimation-only global options (to be used in conjunction with `--animate`):\n\n`--video-format`: Output format for the video file, i.e. `mp4` or `webm`. Default output format is `mp4`.  \n`--speed=n`: Set the multiple of animation speed of the output simulation, `n` can be an integer or float, default is 1.5.  \n`--low-quality`: Render the animation in low quality to speed up creation time, recommended for non-presentation use.  \n`--show-intro`: Add an intro sequence with custom logo and title.  \n`--show-outro`: Add an outro sequence with custom logo and text.  \n`--title=title`: Custom title to display at the beginning of the animation.  \n`--logo=logo.png`: The path to a custom logo to use in the animation intro/outro.  \n`--outro-top-text`: Custom text to display above the logo during the outro.  \n`--outro-bottom-text`: Custom text to display below the logo during the outro.  \n`--font`: Font family used to display rendered text.\n\nThe `[subcommand options]` are like regular Git options specific to the specified subcommand (see below for a full list).\n\nThe following is a list of Git commands that can be simulated and their corresponding options/flags.\n\n### git add\nUsage: `git-sim add <file 1> <file 2> ... <file n>`\n\n- Specify one or more `<file>` as a *modified* working directory file, or an untracked file\n- Simulated output will show files being moved to the staging area\n- Note that simulated output will also show the most recent 5 commits on the active branch\n\n![git-sim-add_01-05-23_22-07-40](https://user-images.githubusercontent.com/49353917/210940814-7e8dc318-6116-4e56-b415-bc547401a56a.jpg)\n\n### git branch\nUsage: `git-sim branch <new branch name>`\n\n- Specify `<new branch name>` as the name of the new branch to simulate creation of\n- Simulated output will show the newly create branch ref along with most recent 5 commits on the active branch\n\n![git-sim-branch_01-05-23_22-13-17](https://user-images.githubusercontent.com/49353917/210941509-2a42a7a4-2168-4f62-913f-3f6fe74a0684.jpg)\n\n### git checkout\nUsage: `git-sim checkout [-b] <branch>`\n\n- Checks out `<branch>` into the working directory, i.e. moves `HEAD` to the specified `<branch>`\n- The `-b` flag creates a new branch with the specified name `<branch>` and checks it out, assuming it doesn't already exist\n\n![git-sim-checkout_04-09-23_21-46-04](https://user-images.githubusercontent.com/49353917/230827836-e9f23a0e-2576-4716-b2fb-6327d3cf9b22.jpg)\n\n### git cherry-pick\nUsage: `git-sim cherry-pick <commit>`\n\n- Specify `<commit>` as a ref (branch name/tag) or commit ID to cherry-pick onto the active branch\n- Supports editing the cherry-picked commit message with: `$ git-sim cherry-pick <commit> -e \"Edited commit message\"`\n\n![git-sim-cherry-pick_01-05-23_22-23-08](https://user-images.githubusercontent.com/49353917/210942811-fa5155b1-4c6f-4afc-bea2-d39b4cd594aa.jpg)\n\n### git clean\nUsage: `git-sim clean`\n\n- Simulated output will show untracked files being deleted\n- Since this is just a simulation, no need to specify `-i`, `-n`, `-f` as in regular Git\n- Note that simulated output will also show the most recent 5 commits on the active branch\n\n![git-sim-clean_04-09-23_22-05-54](https://user-images.githubusercontent.com/49353917/230830043-779e7230-f439-461a-a408-b19b263e86e4.jpg)\n\n### git clone\nUsage: `git-sim clone <url>`\n\n- Clone the remote repo from `<url>` (web URL or filesystem path) to a new folder in the current directory\n- Output will report if clone operation is successful and show log of local clone\n\n![git-sim-clone_04-09-23_21-51-53](https://user-images.githubusercontent.com/49353917/230828521-80c8d2d1-2a31-46bb-aeed-746f0441c86e.jpg)\n\n### git commit\nUsage: `git-sim commit -m \"Commit message\"`\n\n- Simulated output will show the new commit added to the tip of the active branch\n- Specify a commit message with the `-m` option\n- HEAD and the active branch will be moved to the new commit\n- Simulated output will show files in the staging area being included in the new commit\n- Supports amending the last commit with: `$ git-sim commit --amend -m \"Amended commit message\"`\n\n![git-sim-commit_01-05-23_22-10-21](https://user-images.githubusercontent.com/49353917/210941149-d83677a1-3ab7-4880-bc0f-871b1f150087.jpg)\n\n### git config\nUsage: `git-sim config [--list] <section.option> <value>`\n\n- Simulated output describes the specified configuration change\n- Use `--list` or `-l` to display all configuration\n\n![git-sim-config_04-16-24_08-34-34](https://github.com/initialcommit-com/git-sim/assets/49353917/c123e7a7-1fff-4f5c-b4a2-1e34ea2a4d80)\n\n### git fetch\nUsage: `git-sim fetch <remote> <branch>`\n\n- Fetches the specified `<branch>` from the specified `<remote>` to the local repo\n\n![git-sim-fetch_04-09-23_21-47-59](https://user-images.githubusercontent.com/49353917/230828090-acae8979-4097-43a8-96ea-525890e0e0a8.jpg)\n\n### git init\nUsage: `git-sim init`\n\n- Simulated output describes the initialized `.git/` directory and it's contents\n\n![git-sim-init_04-16-24_08-34-47](https://github.com/initialcommit-com/git-sim/assets/49353917/2abb1a4a-3022-4353-a828-2d337baa8383)\n\n### git log\nUsage: `git-sim log [-n <number>] [--all]`\n\n- Simulated output will show the most recent 5 commits on the active branch by default\n- Use `-n <number>` to set number of commits to display from each branch head\n- Set `--all` to display all local branches in the log output\n\n![git-sim-log_01-05-23_22-02-39](https://user-images.githubusercontent.com/49353917/210940300-aadd14c6-72ab-4529-a1be-b494ed5dd4c9.jpg)\n\n### git merge\nUsage: `git-sim merge <branch> [-m \"Commit message\"] [--no-ff]`\n\n- Specify `<branch>` as the branch name to merge into the active branch\n- If desired, specify a commit message with the `-m` option\n- Simulated output will depict a fast-forward merge if possible\n- Otherwise, a three-way merge will be depicted\n- To force a merge commit when a fast-forward is possible, use `--no-ff`\n- If merge fails due to merge conflicts, the conflicting files are displayed\n\n![git-sim-merge_01-05-23_09-44-46](https://user-images.githubusercontent.com/49353917/210942030-c7229488-571a-4943-a1f4-c6e4a0c8ccf3.jpg)\n\n### git mv\nUsage: `git-sim mv <file> <new file>`\n\n- Specify `<file>` as file to update name/path\n- Specify `<new file>` as new name/path of file \n- Simulated output will show the name/path of the file being updated \n- Note that simulated output will also show the most recent 5 commits on the active branch\n\n![git-sim-mv_04-09-23_22-05-13](https://user-images.githubusercontent.com/49353917/230829978-0a64dbe2-d974-4cef-9c6e-ed26e987342f.jpg)\n\n### git pull\nUsage: `git-sim pull [<remote> <branch>]`\n\n- Pulls the specified `<branch>` from the specified `<remote>` to the local repo\n- If `<remote>` and `<branch>` are not specified, the active branch is pulled from the default remote\n- If merge conflicts occur, they are displayed in a table\n\n![git-sim-pull_04-09-23_21-50-15](https://user-images.githubusercontent.com/49353917/230828298-455c0a9d-cf94-499e-9e35-623e7b218772.jpg)\n\n### git push\nUsage: `git-sim push [<remote> <branch>]`\n\n- Pushes the specified `<branch>` to the specified `<remote>` and displays the local result\n- If `<remote>` and `<branch>` are not specified, the active branch is pushed to the default remote\n- If the push fails due to remote changes that don't exist in the local repo, a message is included telling the user to pull first, along with color coding which commits need to be pulled\n\n![git-sim-push_04-21-23_13-41-57](https://user-images.githubusercontent.com/49353917/233731005-51fd7887-ae14-4ceb-a5d5-e5aed79e9fd8.jpg)\n\n### git rebase\nUsage: `git-sim rebase <new-base>`\n\n- Specify `<new-base>` as the branch name to rebase the active branch onto\n\n![git-sim-rebase_01-05-23_09-53-34](https://user-images.githubusercontent.com/49353917/210942598-4ff8d1e6-464d-48f3-afb9-f46f7ec4828c.jpg)\n\n### git remote\nUsage: `git-sim remote [add|rename|remove|get-url|set-url] [<remote>] [<url>]`\n\n- Simulated output will show remotes being added, renamed, removed, modified as indicated\n- Running `git-sim remote` with no options will list all existing remotes and their details  \n\n![git-sim-remote_04-16-24_08-40-37](https://github.com/initialcommit-com/git-sim/assets/49353917/ebaff04c-d5b6-4691-97b3-60bb502ba444)\n\n### git reset\nUsage: `git-sim reset <reset-to> [--mixed|--soft|--hard]`\n\n- Specify `<reset-to>` as any commit id, branch name, tag, or other ref to simulate reset to from the current HEAD (default: `HEAD`)\n- As with a normal git reset command, default reset mode is `--mixed`, but can be specified using `--soft`, `--hard`, or `--mixed`\n- Simulated output will show branch/HEAD resets and resulting state of the working directory, staging area, and whether any file changes would be deleted by running the actual command\n\n![git-sim-reset_01-05-23_22-15-49](https://user-images.githubusercontent.com/49353917/210941835-80f032d2-4f06-4032-8dd0-98c8a2569049.jpg)\n\n### git restore\nUsage: `git-sim restore <file 1> <file 2> ... <file n>`\n\n- Specify one or more `<file>` as a *modified* working directory file, or staged file\n- Simulated output will show files being moved back to the working directory or discarded changes\n- Note that simulated output will also show the most recent 5 commits on the active branch\n\n![git-sim-restore_01-05-23_22-09-14](https://user-images.githubusercontent.com/49353917/210941009-e6bf7271-ce9b-4e41-9a0b-24cc4b8d3b15.jpg)\n\n### git revert\nUsage: `git-sim revert <to-revert>`\n\n- Specify `<to-revert>` as any commit id, branch name, tag, or other ref to simulate revert for\n- Simulated output will show the new commit which reverts the changes from `<to-revert>`\n- Simulated output will include the next 4 most recent commits on the active branch\n\n![git-sim-revert_01-05-23_22-16-59](https://user-images.githubusercontent.com/49353917/210941979-6db8b55c-2881-41d8-9e2e-6263b1dece13.jpg)\n\n### git rm\nUsage: `git-sim rm <file 1> <file 2> ... <file n>`\n\n- Specify one or more `<file>` as a *tracked* file\n- Simulated output will show files being removed from Git tracking\n- Note that simulated output will also show the most recent 5 commits on the active branch\n\n![git-sim-rm_04-09-23_22-01-29](https://user-images.githubusercontent.com/49353917/230829899-f5d688ea-bc8e-46f9-a54a-55d251c8915d.jpg)\n\n### git stash\nUsage: `git-sim stash [push|pop|apply] <file>`\n\n- Specify one or more `<file>` as a *modified* working directory file, or staged file\n- If no `<file>` is specified, all available files will be included\n- Simulated output will show files being moved in/out of the Git stash\n- Note that simulated output will also show the most recent 5 commits on the active branch\n\n![git-sim-stash_01-05-23_22-11-18](https://user-images.githubusercontent.com/49353917/210941254-69c80b63-5c06-411a-a36a-1454b2906ee8.jpg)\n\n### git status\nUsage: `git-sim status`\n\n- Simulated output will show the state of the working directory, staging area, and untracked files\n- Note that simulated output will also show the most recent 5 commits on the active branch\n\n![git-sim-status_01-05-23_22-06-28](https://user-images.githubusercontent.com/49353917/210940685-735665e2-fa12-4043-979c-54c295b13800.jpg)\n\n### git switch\nUsage: `git-sim switch [-c] <branch>`\n\n- Switches the checked-out branch to `<branch>`, i.e. moves `HEAD` to the specified `<branch>`\n- The `-c` flag creates a new branch with the specified name `<branch>` and switches to it, assuming it doesn't already exist\n\n![git-sim-switch_04-09-23_21-42-43](https://user-images.githubusercontent.com/49353917/230827783-a8740ace-b66f-4cac-b94e-5d101d27e0b5.jpg)\n\n### git tag\nUsage: `git-sim tag <new tag name>`\n\n- Specify `<new tag name>` as the name of the new tag to simulate creation of\n- Simulated output will show the newly create tag ref along with most recent 5 commits on the active branch\n\n![git-sim-tag_01-05-23_22-14-18](https://user-images.githubusercontent.com/49353917/210941647-79376ff7-2941-42b3-964a-b1d3a404a4fe.jpg)\n\n## Video animation examples\n```console\n$ git-sim --animate reset HEAD^\n```\n\nhttps://user-images.githubusercontent.com/49353917/210943230-f38d879b-bb0d-4d42-a196-f24efb9e351a.mp4\n\n```console\n$ git checkout main\n$ git-sim --animate merge dev\n```\n\nhttps://user-images.githubusercontent.com/49353917/210943418-22c2cd11-be96-41bc-b621-7018eebc6bc0.mp4\n\n```console\n$ git checkout dev\n$ git-sim --animate rebase main\n```\n\nhttps://user-images.githubusercontent.com/49353917/210943815-4b8be2da-18da-4c42-927a-61cf9a22834e.mp4\n\n```console\n$ git checkout main\n$ git-sim --animate cherry-pick dev\n```\n\nhttps://user-images.githubusercontent.com/49353917/210944001-77bd0130-306b-40a8-ba0b-22e50172802b.mp4\n\n## Basic command examples\nSimulate the output of the git log command:\n\n```console\n$ cd path/to/git/repo\n$ git-sim log\n```\n\nSimulate the output of the git status command:\n\n```console\n$ git-sim status\n```\n\nSimulate adding a file to the Git staging area:\n\n```console\n$ git-sim add filename.ext\n```\n\nSimulate restoring a file from the Git staging area:\n\n```console\n$ git-sim restore filename.ext\n```\n\nSimulate creating a new commit based on currently staged changes:\n\n```console\n$ git-sim commit -m \"Commit message\"\n```\n\nSimulate stashing all working directory and staged changes:\n\n```console\n$ git-sim stash\n```\n\nSimulate creating a new Git branch:\n\n```console\n$ git-sim branch new-branch-name\n```\n\nSimulate creating a new Git tag:\n\n```console\n$ git-sim tag new-tag-name\n```\n\nSimulate a hard reset of the current branch HEAD to the previous commit:\n\n```console\n$ git-sim reset HEAD^ --hard\n```\n\nSimulate reverting the changes in an older commit:\n\n```console\n$ git-sim revert HEAD~7\n```\n\nSimulate merging a branch into the active branch:\n\n```console\n$ git-sim merge feature1\n```\n\nSimulate rebasing the active branch onto a new base:\n\n```console\n$ git-sim rebase main\n```\n\nSimulate cherry-picking a commit from another branch onto the active branch:\n\n```console\n$ git-sim cherry-pick 0ae641\n```\n\n## Command examples with extra options/flags\nUse light mode for white background and black text, instead of the default black background with white text:\n\n```console\n$ git-sim --light-mode status\n```\n\nAnimate the simulated output as a .mp4 video file:\n\n```console\n$ git-sim --animate add filename.ext\n```\n\nAdd an intro and outro with custom text and logo (must include `--animate`):\n\n```console\n$ git-sim --animate --show-intro --show-outro --outro-top-text=\"My Git Repo\" --outro-bottom-text=\"Thanks for watching!\" --logo=path/to/logo.png status\n```\n\nCustomize the output image/video directory location:\n\n```console\n$ git-sim --media-dir=path/to/output status\n```\n\nOptionally, set the environment variable `git_sim_media_dir` to set a global default media directory, to be used if no `--media-dir` is provided. Simulated output images/videos will be placed in this location, in subfolders named with the corresponding repo's name.\n\n```console\n$ export git_sim_media_dir=path/to/media/directory\n$ git-sim status\n```\nNote: `--media-dir` takes precedence over the environment variable. If you set the environment variable and still provide the argument, you'll find the media in the path provided by `--media-dir`.\n\nGenerate output video in low quality to speed up rendering time (useful for repeated testing, must include `--animate`):\n\n```console\n$ git-sim --animate --low-quality status\n```\n\n## Installation\nSee **Quickstart** section for details on installing manim and other dependencies. Then run:\n\n```console\n$ pip3 install git-sim\n```\n\n## Docker installation\n\n1) Clone down the git-sim repository:\n\n```console\n$ git clone https://github.com/initialcommit-com/git-sim.git\n```\n\n2) Browse into the `git-sim` folder and build the Docker image:\n\n```console\n$ docker build -t git-sim .\n```\n\n3) Run git-sim commands as follows:\n    - Windows: `docker run --rm -v %cd%:/usr/src/git-sim git-sim [global options] <subcommand> [subcommand options]`\n    - MacOS / Linux: `docker run --rm -v $(pwd):/usr/src/git-sim git-sim [global options] <subcommand> [subcommand options]`\n    \nOptional: On MacOS / Linux / or GitBash in Windows, create an alias for the long docker command so your can run it as a normal `git-sim` command. To do so add the following line to your `.bashrc` or equivalent, then restart your terminal:\n\n```bash\ngit-sim() { docker run --rm -v $(pwd):/usr/src/git-sim git-sim \"$@\"; }\n```\n\nThis will enable you to run git-sim subcommands as [described above](#commands).\n\n## Learn More\nLearn more about this tool on the [git-sim project page](https://initialcommit.com/tools/git-sim).\n\n## Authors\n**Jacob Stopak** - on behalf of [Initial Commit](https://initialcommit.com)\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.2802734375,
          "content": "[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"git-sim\"\nauthors = [{ name = \"Jacob Stopak\", email = \"jacob@initialcommit.io\" }]\ndescription = \"Simulate Git commands on your own repos by generating an image (default) or video visualization depicting the command's behavior.\"\nreadme = \"README.md\"\nrequires-python = \">=3.7\"\nkeywords = [\n    \"git\",\n    \"sim\",\n    \"simulation\",\n    \"simulate\",\n    \"git-simulate\",\n    \"git-simulation\",\n    \"git-sim\",\n    \"manim\",\n    \"animation\",\n    \"gitanimation\",\n    \"image\",\n    \"video\",\n    \"dryrun\",\n    \"dry-run\",\n]\nlicense = { text = \"GPL-2.0\" }\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: GNU General Public License v2 (GPLv2)\",\n    \"Operating System :: OS Independent\",\n]\ndependencies = [\n    \"git-dummy\",\n    \"gitpython\",\n    \"manim\",\n    \"opencv-python-headless\",\n    \"pydantic_settings\",\n    \"typer\",\n    \"fonttools\",\n]\ndynamic = [\"version\"]\n\n[tool.setuptools.dynamic]\nversion = { attr = \"git_sim.__version__\" }\n\n[project.optional-dependencies]\ndev = [\"black\", \"numpy\", \"pillow\", \"pytest\"]\n\n[project.scripts]\ngit-sim = \"git_sim.__main__:app\"\n\n[project.urls]\nHomepage = \"https://initialcommit.com/tools/git-sim\"\nSource = \"https://github.com/initialcommit-com/git-sim\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}