{
  "metadata": {
    "timestamp": 1736559644895,
    "page": 302,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "khast3x/h8mail",
      "stars": 4266,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.28515625,
          "content": "# http://editorconfig.org\n\nroot = true\n\n[*]\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\ninsert_final_newline = true\ncharset = utf-8\nend_of_line = lf\n\n[*.bat]\nindent_style = tab\nend_of_line = crlf\n\n[LICENSE]\ninsert_final_newline = false\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.2978515625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# h8mail\n\nmy_config*\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.vscode/settings.json\nh8mail_config.ini\nh8mail_keys.ini\nh8mail_config.ini\nkeysbackup.ini\n.vscode/launch.json\nfile1.bin\n*.txt\ntest.json\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.37890625,
          "content": "# Config file for automatic testing at travis-ci.org\n# This file will be regenerated if you run travis_pypi_setup.py\n\nlanguage: python\npython:\n  - 3.6\n\n\n# Command to install dependencies, e.g. pip install -r requirements.txt --use-mirrors\n# install: pip install -r requirements.txt\n\ninstall: pip install -e .\n\n# Command to run tests, e.g. python setup.py test\nscript: python setup.py test"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.5751953125,
          "content": "# How to contribute to h8mail\n\n*First of all, thank you for considering contributing :purple_heart:*  \n*h8mail is very much a script turned into a tool. As such, the project is still evolving in regards to contribution guidelines.*  \n\n*If this is your first contribution, I highly suggest you check [this repo](https://github.com/firstcontributions/first-contributions) first.*  \n\n----\n\n\n### The basics\n\n* h8mail should only depend on the `requests` package\n\n* If adding a new feature or refactoring, consider opening an issue or sending me an email beforehand to ensure things go smoothly\n\n* Comment your functions as docstrings\n\n* Pull requests should be merged into the latest development branch, not in the main branch\n  * If there is no on-going development branch, there should still be the current version's dev branch\n  * If unsure, open an issue and you'll be pointed to the right branch, or a seperate branch can be created for you\n\n* Make sure your code passes the included tests. You can run them by using `python3 -m unittest` in h8mail's top level directory\n\n* Code should be formatted using [Python Black](https://github.com/psf/black). Most IDE's can run `black` directly. You can also launch it [from CLI](https://github.com/psf/black#installation-and-usage)\n\n----\n\n### Ways to contribute\n\n* Bug reports using issues\n* Bug fixes *(please open issues for typos)*\n* Code refactoring *(please open issue beforehand if > 2 lines)*\n* Code optimisation\n* New features\n* New API integrations\n\n----\n\n### Code of conduct\n\nh8mail follows [Django's code of conduct](https://www.djangoproject.com/conduct/).\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.1796875,
          "content": "FROM python:3-alpine\n\nRUN apk add --update --no-cache git bash\nWORKDIR h8mail\nRUN pip3 install requests\nCOPY . .\nRUN [\"python\", \"setup.py\", \"install\"]\nENTRYPOINT [\"h8mail\"]\nCMD [\"-h\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4658203125,
          "content": "\n\nBSD License\n\nCopyright (c) 2019, khast3x\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this\n  list of conditions and the following disclaimer in the documentation and/or\n  other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from this\n  software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\nOF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\nOR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\nOF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.796875,
          "content": ".PHONY: clean clean-test clean-pyc clean-build docs help\n.DEFAULT_GOAL := help\n\ndefine BROWSER_PYSCRIPT\nimport os, webbrowser, sys\n\ntry:\n\tfrom urllib import pathname2url\nexcept:\n\tfrom urllib.request import pathname2url\n\nwebbrowser.open(\"file://\" + pathname2url(os.path.abspath(sys.argv[1])))\nendef\nexport BROWSER_PYSCRIPT\n\ndefine PRINT_HELP_PYSCRIPT\nimport re, sys\n\nfor line in sys.stdin:\n\tmatch = re.match(r'^([a-zA-Z_-]+):.*?## (.*)$$', line)\n\tif match:\n\t\ttarget, help = match.groups()\n\t\tprint(\"%-20s %s\" % (target, help))\nendef\nexport PRINT_HELP_PYSCRIPT\n\nBROWSER := 3 -c \"$$BROWSER_PYSCRIPT\"\n\nhelp:\n\t@python3 -c \"$$PRINT_HELP_PYSCRIPT\" < $(MAKEFILE_LIST)\n\nclean: clean-build clean-pyc clean-test ## remove all build, test, coverage and Python artifacts\n\nclean-build: ## remove build artifacts\n\trm -fr build/\n\trm -fr dist/\n\trm -fr .eggs/\n\tfind . -name '*.egg-info' -exec rm -fr {} +\n\tfind . -name '*.egg' -exec rm -f {} +\n\nclean-pyc: ## remove Python file artifacts\n\tfind . -name '*.pyc' -exec rm -f {} +\n\tfind . -name '*.pyo' -exec rm -f {} +\n\tfind . -name '*~' -exec rm -f {} +\n\tfind . -name '__pycache__' -exec rm -fr {} +\n\nclean-test: ## remove test and coverage artifacts\n\trm -fr .tox/\n\trm -f .coverage\n\trm -fr htmlcov/\n\trm -fr .pytest_cache\n\nlint: ## check style with flake8\n\tblack h8mail tests\n\ntest: ## run tests quickly with the default Python\n\tpython3 setup.py test\n\n\ncoverage: ## check code coverage quickly with the default Python\n\tcoverage run --source h8mail setup.py test\n\tcoverage report -m\n\tcoverage html\n\t$(BROWSER) htmlcov/index.html\n\nrelease: dist ## package and upload a release\n\ttwine upload dist/*\n\ndist: clean ## builds source and wheel package\n\tpython3 setup.py sdist\n\tpython3 setup.py bdist_wheel\n\tls -l dist\n\ninstall: clean ## install the package to the active Python's site-packages\n\tpython3 setup.py install\n"
        },
        {
          "name": "PyPi.rst",
          "type": "blob",
          "size": 1.4892578125,
          "content": "======\nh8mail\n======\n\n.. image:: https://i.postimg.cc/LXR6Jq8Y/logo-transparent.png\n        ::target: https://github.com/khast3x/h8mail\n\n.. image:: https://img.shields.io/pypi/v/h8mail.svg\n        :target: https://pypi.python.org/pypi/h8mail\n\n.. image:: https://img.shields.io/travis/khast3x/h8mail.svg\n        :target: https://travis-ci.org/khast3x/h8mail\n\n\n\n\n\n\nEmail OSINT and password breach hunting. Use h8mail to find passwords through different breach and reconnaissance services, or the infamous Breached Compilation torrent\n\n\n* Free software: BSD license\n\n\nFeatures\n--------\n\n* Email pattern matching (reg exp), useful for reading from other tool outputs\n* Loosey patterns for local searchs (\"john.smith\", \"evilcorp\") \n* Painless install. Available through `pip`, only requires `requests`\n* Small and fast Alpine Dockerfile available\n* CLI or Bulk file-reading for targeting\n* Output to CSV file\n* Compatible with the \"Breach Compilation\" torrent scripts\n* Search .txt and .gz files locally using multiprocessing\n  * Compatible with \"Collection#1\"\n* Get related emails\n* Chase and target related emails in ongoing search\n* Supports premium lookup services for advanced users\n* Regroup breach results for all targets and methods\n* Delicious colors\n\nCredits\n-------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.6455078125,
          "content": "<h1 align=\"center\">\n  <a href=\"https://github.com/khast3x/h8mail/releases/\"><img src=\"https://i.postimg.cc/LXR6Jq8Y/logo-transparent.png\" width=\"420\" title=\"h8maillogo\"></a>\n</h1>\n\n[![platforms](https://img.shields.io/badge/platforms-Windows%20%7C%20Linux%20%7C%20OSX-success.svg)](https://pypi.org/project/h8mail/) [![PyPI version](https://badge.fury.io/py/h8mail.svg)](https://badge.fury.io/py/h8mail)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/h8mail.svg)](https://pypi.org/project/h8mail/) [![Downloads](https://pepy.tech/badge/h8mail)](https://pepy.tech/project/h8mail)    [![travis](https://img.shields.io/travis/khast3x/h8mail.svg)](https://travis-ci.org/khast3x/h8mail)   \n[![Docker Pulls](https://img.shields.io/docker/pulls/kh4st3x00/h8mail.svg)](https://hub.docker.com/r/kh4st3x00/h8mail)    \n**h8mail** is an email OSINT and breach hunting tool using [different breach and reconnaissance services](#apis), or local breaches such as Troy Hunt's \"Collection1\" and the infamous \"Breach Compilation\" torrent.  \n\n----\n\n\n<h1 align=\"center\">\n  <a href=\"https://github.com/khast3x/h8mail/wiki?ref=readmebutton\"><img src=\"https://i.postimg.cc/htg6xGmm/button.png\" width=\"420\" title=\"To the Wiki!\"></a>\n</h1>\n\n\n\n----\n\n\n## :book: Table of Content\n\n- [Table of Content](#book-Table-of-Content)\n- [Features](#tangerine-Features)\n    - [APIs](#APIs)\n- [Usage](#tangerine-Usage)\n- [Usage examples](#tangerine-Usage-examples)\n- [Thanks & Credits](#tangerine-Thanks--Credits)\n- [Related open source projects](#tangerine-Related-open-source-projects)\n\n\n----\n\n\n##  :tangerine: Features\n\n* :mag_right: Email pattern matching (reg exp), useful for reading from other tool outputs\n* :earth_africa: Pass URLs to directly find and target emails in pages\n* :dizzy: Loosey patterns for local searchs (\"john.smith\", \"evilcorp\")\n* :package: Painless install. Available through `pip`, only requires `requests`\n* :white_check_mark: Bulk file-reading for targeting\n* :memo: Output to CSV file or JSON\n* :muscle: Compatible with the \"Breach Compilation\" torrent scripts\n* :house: Search cleartext and compressed .gz files locally using multiprocessing\n  * :cyclone: Compatible with \"Collection#1\"\n* :fire: Get related emails\n* :dragon_face: Chase related emails by adding them to the ongoing search\n* :crown: Supports premium lookup services for advanced users\n* :factory: Custom query premium APIs. Supports username, hash, ip, domain and password and more\n* :books: Regroup breach results for all targets and methods\n* :eyes: Includes option to hide passwords for demonstrations\n* :rainbow: Delicious colors\n\n---\n\n### :package: `pip3 install h8mail`\n\n-----\n\n\n####  APIs\n| Service | Functions | Status |\n|-|-|-|\n| [HaveIBeenPwned(v3)](https://haveibeenpwned.com/) | Number of email breaches | :white_check_mark: :key: |\n| [HaveIBeenPwned Pastes(v3)](https://haveibeenpwned.com/Pastes) | URLs of text files mentioning targets | :white_check_mark: :key: |\n| [Hunter.io](https://hunter.io/) - Public | Number of related emails | :white_check_mark: |\n| [Hunter.io](https://hunter.io/) - Service (free tier) | Cleartext related emails, Chasing | :white_check_mark: :key: |\n| [Snusbase](https://api.snusbase.com/admin/purchase) - Service | Cleartext passwords, hashs and salts, usernames, IPs - Fast :zap: | :white_check_mark: :key: |\n| [Leak-Lookup](https://leak-lookup.com/) - Public | Number of search-able breach results | :white_check_mark: (:key:) |\n| [Leak-Lookup](https://leak-lookup.com/) - Service | Cleartext passwords, hashs and salts, usernames, IPs, domain | :white_check_mark: :key: |\n| [Emailrep.io](https://emailrep.io/) - Service (free) | Last seen in breaches, social media profiles | :white_check_mark: :key: |\n| [scylla.so](https://scylla.so/) - Service (free) | Cleartext passwords, hashs and salts, usernames, IPs, domain | :construction: |\n| [Dehashed.com](https://dehashed.com/) - Service | Cleartext passwords, hashs and salts, usernames, IPs, domain | :white_check_mark: :key: |\n| [IntelX.io](https://intelx.io/signup) - Service (free trial) | Cleartext passwords, hashs and salts, usernames, IPs, domain, Bitcoin Wallets, IBAN | :white_check_mark: :key: |\n| :new: [Breachdirectory.org](https://breachdirectory.org) - Service (free) | Cleartext passwords, hashs and salts, usernames, domain | :construction: :key: |\n\n*:key: - API key required*  \n\n\n\n\n-----\n\n##  :tangerine: Usage\n\n```bash\nusage: h8mail [-h] [-t USER_TARGETS [USER_TARGETS ...]]\n              [-u USER_URLS [USER_URLS ...]] [-q USER_QUERY] [--loose]\n              [-c CONFIG_FILE [CONFIG_FILE ...]] [-o OUTPUT_FILE]\n              [-j OUTPUT_JSON] [-bc BC_PATH] [-sk]\n              [-k CLI_APIKEYS [CLI_APIKEYS ...]]\n              [-lb LOCAL_BREACH_SRC [LOCAL_BREACH_SRC ...]]\n              [-gz LOCAL_GZIP_SRC [LOCAL_GZIP_SRC ...]] [-sf]\n              [-ch [CHASE_LIMIT]] [--power-chase] [--hide] [--debug]\n              [--gen-config]\n\nEmail information and password lookup tool\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -t USER_TARGETS [USER_TARGETS ...], --targets USER_TARGETS [USER_TARGETS ...]\n                        Either string inputs or files. Supports email pattern\n                        matching from input or file, filepath globing and\n                        multiple arguments\n  -u USER_URLS [USER_URLS ...], --url USER_URLS [USER_URLS ...]\n                        Either string inputs or files. Supports URL pattern\n                        matching from input or file, filepath globing and\n                        multiple arguments. Parse URLs page for emails.\n                        Requires http:// or https:// in URL.\n  -q USER_QUERY, --custom-query USER_QUERY\n                        Perform a custom query. Supports username, password,\n                        ip, hash, domain. Performs an implicit \"loose\" search\n                        when searching locally\n  --loose               Allow loose search by disabling email pattern\n                        recognition. Use spaces as pattern seperators\n  -c CONFIG_FILE [CONFIG_FILE ...], --config CONFIG_FILE [CONFIG_FILE ...]\n                        Configuration file for API keys. Accepts keys from\n                        Snusbase, WeLeakInfo, Leak-Lookup, HaveIBeenPwned,\n                        Emailrep, Dehashed and hunterio\n  -o OUTPUT_FILE, --output OUTPUT_FILE\n                        File to write CSV output\n  -j OUTPUT_JSON, --json OUTPUT_JSON\n                        File to write JSON output\n  -bc BC_PATH, --breachcomp BC_PATH\n                        Path to the breachcompilation torrent folder. Uses the\n                        query.sh script included in the torrent\n  -sk, --skip-defaults  Skips Scylla and HunterIO check. Ideal for local scans\n  -k CLI_APIKEYS [CLI_APIKEYS ...], --apikey CLI_APIKEYS [CLI_APIKEYS ...]\n                        Pass config options. Supported format: \"K=V,K=V\"\n  -lb LOCAL_BREACH_SRC [LOCAL_BREACH_SRC ...], --local-breach LOCAL_BREACH_SRC [LOCAL_BREACH_SRC ...]\n                        Local cleartext breaches to scan for targets. Uses\n                        multiprocesses, one separate process per file, on\n                        separate worker pool by arguments. Supports file or\n                        folder as input, and filepath globing\n  -gz LOCAL_GZIP_SRC [LOCAL_GZIP_SRC ...], --gzip LOCAL_GZIP_SRC [LOCAL_GZIP_SRC ...]\n                        Local tar.gz (gzip) compressed breaches to scans for\n                        targets. Uses multiprocesses, one separate process per\n                        file. Supports file or folder as input, and filepath\n                        globing. Looks for 'gz' in filename\n  -sf, --single-file    If breach contains big cleartext or tar.gz files, set\n                        this flag to view the progress bar. Disables\n                        concurrent file searching for stability\n  -ch [CHASE_LIMIT], --chase [CHASE_LIMIT]\n                        Add related emails from hunter.io to ongoing target\n                        list. Define number of emails per target to chase.\n                        Requires hunter.io private API key if used without\n                        power-chase\n  --power-chase         Add related emails from ALL API services to ongoing\n                        target list. Use with --chase\n  --hide                Only shows the first 4 characters of found passwords\n                        to output. Ideal for demonstrations\n  --debug               Print request debug information\n  --gen-config, -g      Generates a configuration file template in the current\n                        working directory & exits. Will overwrite existing\n                        h8mail_config.ini file\n\n```\n\n-----\n\n## :tangerine: Usage examples\n\n###### Query for a single target\n\n```bash\n$ h8mail -t target@example.com\n```\n\n###### Query for list of targets, indicate config file for API keys, output to `pwned_targets.csv`\n```bash\n$ h8mail -t targets.txt -c config.ini -o pwned_targets.csv\n```\n\n###### Query a list of targets against local copy of the Breach Compilation, pass API key for [Snusbase](https://snusbase.com/) from the command line\n```bash\n$ h8mail -t targets.txt -bc ../Downloads/BreachCompilation/ -k \"snusbase_token=$snusbase_token\"\n```\n\n###### Query without making API calls against local copy of the Breach Compilation\n```bash\n$ h8mail -t targets.txt -bc ../Downloads/BreachCompilation/ -sk\n```\n\n###### Search every .gz file for targets found in targets.txt locally, skip default checks\n\n```bash\n$ h8mail -t targets.txt -gz /tmp/Collection1/ -sk\n```\n\n###### Check a cleartext dump for target. Add the next 10 related emails to targets to check. Read keys from CLI\n\n```bash\n$ h8mail -t admin@evilcorp.com -lb /tmp/4k_Combo.txt -ch 10 -k \"hunterio=ABCDE123\"\n```\n###### Query username. Read keys from CLI\n\n```bash\n$ h8mail -t JSmith89 -q username -k \"dehashed_email=user@email.com\" \"dehashed_key=ABCDE123\"\n```\n\n###### Query IP. Chase all related targets. Read keys from CLI\n\n\n```bash\n$ h8mail -t 42.202.0.42 -q ip -c h8mail_config_priv.ini -ch 2 --power-chase\n```\n\n###### Fetch URL content (CLI + file). Target all found emails\n\n\n```bash\n$ h8mail -u \"https://pastebin.com/raw/kQ6WNKqY\" \"list_of_urls.txt\"\n```\n\n\n-----\n\n## :tangerine: Thanks & Credits\n\n* [Snusbase](https://snusbase.com/) for being developer friendly\n* [kodykinzie](https://twitter.com/kodykinzie) for making a nice [introduction and walkthrough article](https://null-byte.wonderhowto.com/how-to/exploit-recycled-credentials-with-h8mail-break-into-user-accounts-0188600/) and [video](https://www.youtube.com/watch?v=z8G_vBBHtfA) on installing and using h8mail\n* [Leak-Lookup](https://leak-lookup.com/) for being developer friendly\n* [Dehashed](https://dehashed.com/) for being developer friendly  \n* h8mail's Pypi integration is strongly based on the work of audreyr's [CookieCutter PyPackage](https://github.com/audreyr/cookiecutter-pypackage)\n* Logo generated using Hatchful by Shopify\n* [Jake Creps](https://twitter.com/jakecreps) for his [h8mail v2 introduction](https://jakecreps.com/2019/06/21/h8mail/)  \n* [Alejandro Caceres](https://twitter.com/_hyp3ri0n) for making scylla.so available. Be sure to [support](https://www.buymeacoffee.com/Eiw47ImnT) him if you can\n* [IntelX](https://intelx.io) for being developer friendly\n* [Breachdirectory.tk](https://breachdirectory.tk) for being developer friendly\n\n:purple_heart: **h8mail can be found in:**\n* [BlackArch Linux](https://blackarch.org/recon.html)\n* [Tsurugi DFIR VM](https://tsurugi-linux.org/)\n* [CSI Linux](https://csilinux.com)  \n* [Trace Labs OSINT VM](https://www.tracelabs.org/trace-labs-osint-vm/)\n\n\n-----\n\n## :tangerine: Related open source projects\n* [WhatBreach](https://github.com/Ekultek/WhatBreach) by Ekultek\n* [HashBuster](https://github.com/s0md3v/Hash-Buster) by s0md3v\n* [BaseQuery](https://github.com/g666gle/BaseQuery) by g666gle\n* [LeakLooker](https://github.com/woj-ciech/LeakLooker) by woj-ciech\n* [buster](https://github.com/sham00n/buster) by sham00n\n* [Scavenger](https://github.com/rndinfosecguy/Scavenger) by ndinfosecguy\n* [pwndb](https://github.com/davidtavarez/pwndb) by davidtavarez\n\n\n-----\n\n## :tangerine: Notes\n\n* Service providers that wish being integrated can send me an email at `k at khast3x dot club` (PGP friendly)\n* h8mail is maintained on my free time. Feedback and war stories are welcomed.\n* Licence is BSD 3 clause\n* My code is [signed](https://help.github.com/en/articles/signing-commits) with my [Keybase](https://keybase.io/ktx) PGP key. You can get it using:  \n```bash\n# curl + gpg pro tip: import ktx's keys\ncurl https://keybase.io/ktx/pgp_keys.asc | gpg --import\n\n# the Keybase app can push to gpg keychain, too\nkeybase pgp pull ktx\n```\n___\n\n*If you wish to stay updated on this project:*\n\n\n<h1 align=\"center\">\n  <a href=\"https://twitter.com/kh4st3x\"><img src=\"https://i.imgur.com/S79Nimd.png\" width=\"420\" title=\"Twitter\"></a>\n</h1>\n\n"
        },
        {
          "name": "h8mail",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.5908203125,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"The setup script.\"\"\"\nfrom setuptools import setup, find_packages, Extension\nfrom distutils.util import convert_path\nimport os\n\nhere = os.path.abspath(os.path.dirname(__file__))\nexec(open(os.path.join(here, \"h8mail/utils/version.py\")).read())\n\nwith open(\"PyPi.rst\") as readme_file:\n    readme = readme_file.read()\n\n# with open(\"HISTORY.rst\") as history_file:\n#     history = history_file.read()\n\nrequirements = [\"requests\"]\n\nsetup_requirements = [\"requests\"]\n\ntest_requirements = [\"requests\"]\n\nsetup(\n    author=\"khast3x\",\n    author_email=\"k@khast3x.club\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Natural Language :: English\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Environment :: Console\",\n    ],\n    description=\"Email OSINT and password breach hunting. Use h8mail to find passwords through different breach and reconnaissance services, or using your local data\",\n    install_requires=requirements,\n    license=\"BSD license\",\n    # long_description_content_type=\"text/markdown\",\n    long_description=readme + \"\\n\\n\",\n    # long_description=readme + \"\\n\\n\" + history,\n    include_package_data=True,\n    keywords=\"h8mail\",\n    name=\"h8mail\",\n    packages=find_packages(),\n    entry_points={\"console_scripts\": [\"h8mail = h8mail.__main__:main\"]},\n    setup_requires=setup_requirements,\n    url=\"https://github.com/khast3x/h8mail\",\n    version=__version__,\n    zip_safe=False,\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}