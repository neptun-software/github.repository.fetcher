{
  "metadata": {
    "timestamp": 1736559831944,
    "page": 573,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "awslabs/multi-agent-orchestrator",
      "stars": 3766,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.14453125,
          "content": "# Include TypeScript and Python as detectable languages\n*.py linguist-detectable=true\n*.ts linguist-detectable=true\n\n*.js linguist-detectable=false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5458984375,
          "content": "\n!typescript/jest.config.js\ntypescript/*.d.ts\nnode_modules\ntypescript/.package-lock.json\n\nexamples/chat-demo-app/cdk.out\n\nexamples/chat-demo-app/lib/**/*.js\nexamples/chat-demo-app/bin/*.js\n\n!examples/lambda/url_rewrite/*.js\nexamples/resources/ui/public/aws-exports.json\nexamples/resources/ui/dist\nexamples/text-2-structured-output/venv\n\n\n.DS_Store\n\ntypescript/dist/**/*\n\ntypescript/*.tgz\n*aws-exports.json\n!download.js\n\nexamples/local-demo/.env\ntypescript/coverage/**/*\n\n.venv\nexamples/chat-chainlit-app/venv\n\n*.env\n*__pycache__\n\ngit-release-notes.genai.mjs\n\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.33984375,
          "content": "# Code of Conduct\n\nThis project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct).\nFor more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact\n[opensource-codeofconduct@amazon.com](opensource-codeofconduct@amazon.com) with any additional questions or comments.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.0830078125,
          "content": "# Contributing Guidelines\n\nThank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional\ndocumentation, we greatly value feedback and contributions from our community.\n\nPlease read through this document before submitting any issues or pull requests to ensure we have all the necessary\ninformation to effectively respond to your bug report or contribution.\n\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check existing open, or recently closed, issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n\n* A reproducible test case or series of steps\n* The version of our code being used\n* Any modifications you've made relevant to the bug\n* Anything unusual about your environment or deployment\n\n## Contributing via Pull Requests\n\nContributions via pull requests are much appreciated. Before sending us a pull request, please ensure that:\n\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n1. Fork the repository.\n2. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change.\n3. Ensure local tests pass.\n4. Commit to your fork using clear commit messages.\n5. Send us a pull request, answering any default questions in the pull request interface.\n6. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation.\n\nGitHub provides additional document on [forking a repository](https://help.github.com/articles/fork-a-repo/) and\n[creating a pull request](https://help.github.com/articles/creating-a-pull-request/).\n\n## Finding contributions to work on\n\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.\n\n## Code of Conduct\n\nThis project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct).\nFor more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact\nopensource-codeofconduct@amazon.com with any additional questions or comments.\n\n## Security issue notifications\n\nIf you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our [vulnerability reporting page](http://aws.amazon.com/security/vulnerability-reporting/). Please do **not** create a public github issue.\n\n## Licensing\n\nSee the [LICENSE](LICENSE) file for our project's licensing. We will ask you to confirm the licensing of your contribution."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.359375,
          "content": "<h2 align=\"center\">Multi-Agent Orchestrator&nbsp;</h2>\n<p align=\"center\">Flexible, lightweight open-source framework for orchestrating multiple AI agents to handle complex conversations.</p>\n\n\n<p align=\"center\">\n  <a href=\"https://github.com/awslabs/multi-agent-orchestrator\"><img alt=\"GitHub Repo\" src=\"https://img.shields.io/badge/GitHub-Repo-green.svg\" /></a>\n  <a href=\"https://www.npmjs.com/package/multi-agent-orchestrator\"><img alt=\"npm\" src=\"https://img.shields.io/npm/v/multi-agent-orchestrator.svg?style=flat-square\"></a>\n  <a href=\"https://pypi.org/project/multi-agent-orchestrator/\"><img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/multi-agent-orchestrator.svg?style=flat-square\"></a>\n</p>\n\n<p align=\"center\">\n  <!-- GitHub Stats -->\n  <img src=\"https://img.shields.io/github/stars/awslabs/multi-agent-orchestrator?style=social\" alt=\"GitHub stars\">\n  <img src=\"https://img.shields.io/github/forks/awslabs/multi-agent-orchestrator?style=social\" alt=\"GitHub forks\">\n  <img src=\"https://img.shields.io/github/watchers/awslabs/multi-agent-orchestrator?style=social\" alt=\"GitHub watchers\">\n</p>\n\n<p align=\"center\">\n  <!-- Repository Info -->\n  <img src=\"https://img.shields.io/github/last-commit/awslabs/multi-agent-orchestrator\" alt=\"Last Commit\">\n  <img src=\"https://img.shields.io/github/issues/awslabs/multi-agent-orchestrator\" alt=\"Issues\">\n  <img src=\"https://img.shields.io/github/issues-pr/awslabs/multi-agent-orchestrator\" alt=\"Pull Requests\">\n</p>\n\n\n<p align=\"center\">\n  <!-- Package Stats -->\n  <a href=\"https://pypi.org/project/multi-agent-orchestrator/\"><img src=\"https://img.shields.io/pypi/dm/multi-agent-orchestrator?label=pypi%20downloads\" alt=\"PyPI Monthly Downloads\"></a>\n  <a href=\"https://www.npmjs.com/package/multi-agent-orchestrator\"><img src=\"https://img.shields.io/npm/dm/multi-agent-orchestrator?label=npm%20downloads\" alt=\"npm Monthly Downloads\"></a>\n</p>\n\n\n<p align=\"center\">\n  <a href=\"https://awslabs.github.io/multi-agent-orchestrator/\" style=\"display: inline-block; background-color: #0066cc; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; font-weight: bold; font-size: 15px; transition: background-color 0.3s;\">\n    📚 Explore Full Documentation\n  </a>\n</p>\n\n\n\n## 🔖 Features\n\n- 🧠 **Intelligent intent classification** — Dynamically route queries to the most suitable agent based on context and content.\n- 🔤 **Dual language support** — Fully implemented in both **Python** and **TypeScript**.\n- 🌊 **Flexible agent responses** — Support for both streaming and non-streaming responses from different agents.\n- 📚 **Context management** — Maintain and utilize conversation context across multiple agents for coherent interactions.\n- 🔧 **Extensible architecture** — Easily integrate new agents or customize existing ones to fit your specific needs.\n- 🌐 **Universal deployment** — Run anywhere - from AWS Lambda to your local environment or any cloud platform.\n- 📦 **Pre-built agents and classifiers** — A variety of ready-to-use agents and multiple classifier implementations available.\n\n\n## What's the Multi-Agent Orchestrator ❓\n\nThe Multi-Agent Orchestrator is a flexible framework for managing multiple AI agents and handling complex conversations. It intelligently routes queries and maintains context across interactions.\n\nThe system offers pre-built components for quick deployment, while also allowing easy integration of custom agents and conversation messages storage solutions.\n\nThis adaptability makes it suitable for a wide range of applications, from simple chatbots to sophisticated AI systems, accommodating diverse requirements and scaling efficiently.\n\n## 🏗️ High-level architecture flow diagram\n\n<br /><br />\n\n![High-level architecture flow diagram](https://raw.githubusercontent.com/awslabs/multi-agent-orchestrator/main/img/flow.jpg)\n\n<br /><br />\n\n1. The process begins with user input, which is analyzed by a Classifier.\n2. The Classifier leverages both Agents' Characteristics and Agents' Conversation history to select the most appropriate agent for the task.\n3. Once an agent is selected, it processes the user input.\n4. The orchestrator then saves the conversation, updating the Agents' Conversation history, before delivering the response back to the user.\n\n\n## ![](https://raw.githubusercontent.com/awslabs/multi-agent-orchestrator/main/img/new.png) Introducing SupervisorAgent: Agents Coordination\n\nThe Multi-Agent Orchestrator now includes a powerful new SupervisorAgent that enables sophisticated team coordination between multiple specialized agents. This new component implements a \"agent-as-tools\" architecture, allowing a lead agent to coordinate a team of specialized agents in parallel, maintaining context and delivering coherent responses.\n\n![SupervisorAgent flow diagram](https://raw.githubusercontent.com/awslabs/multi-agent-orchestrator/main/img/flow-supervisor.jpg)\n\nKey capabilities:\n- 🤝 **Team Coordination** - Coordonate multiple specialized agents working together on complex tasks\n- ⚡ **Parallel Processing** - Execute multiple agent queries simultaneously\n- 🧠 **Smart Context Management** - Maintain conversation history across all team members\n- 🔄 **Dynamic Delegation** - Intelligently distribute subtasks to appropriate team members\n- 🤖 **Agent Compatibility** - Works with all agent types (Bedrock, Anthropic, Lex, etc.)\n\nThe SupervisorAgent can be used in two powerful ways:\n1. **Direct Usage** - Call it directly when you need dedicated team coordination for specific tasks\n2. **Classifier Integration** - Add it as an agent within the classifier to build complex hierarchical systems with multiple specialized teams\n\nHere are just a few examples where this agent can be used:\n- Customer Support Teams with specialized sub-teams\n- AI Movie Production Studios\n- Travel Planning Services\n- Product Development Teams\n- Healthcare Coordination Systems\n\n\n[Learn more about SupervisorAgent →](https://awslabs.github.io/multi-agent-orchestrator/agents/built-in/supervisor-agent)\n\n\n## 💬 Demo App\n\nIn the screen recording below, we demonstrate an extended version of the demo app that uses 6 specialized agents:\n- **Travel Agent**: Powered by an Amazon Lex Bot\n- **Weather Agent**: Utilizes a Bedrock LLM Agent with a tool to query the open-meteo API\n- **Restaurant Agent**: Implemented as an Amazon Bedrock Agent\n- **Math Agent**: Utilizes a Bedrock LLM Agent with two tools for executing mathematical operations\n- **Tech Agent**: A Bedrock LLM Agent designed to answer questions on technical topics\n- **Health Agent**: A Bedrock LLM Agent focused on addressing health-related queries\n\nWatch as the system seamlessly switches context between diverse topics, from booking flights to checking weather, solving math problems, and providing health information.\nNotice how the appropriate agent is selected for each query, maintaining coherence even with brief follow-up inputs.\n\nThe demo highlights the system's ability to handle complex, multi-turn conversations while preserving context and leveraging specialized agents across various domains.\n\n![](https://raw.githubusercontent.com/awslabs/multi-agent-orchestrator/main/img/demo-app.gif?raw=true)\n\n\n## 🎯 Examples & Quick Start\n\nGet hands-on experience with the Multi-Agent Orchestrator through our diverse set of examples:\n\n- **Demo Applications**:\n  - [Streamlit Global Demo](https://github.com/awslabs/multi-agent-orchestrator/tree/main/examples/python): A single Streamlit application showcasing multiple demos, including:\n    - AI Movie Production Studio\n    - AI Travel Planner\n  - [Chat Demo App](https://awslabs.github.io/multi-agent-orchestrator/cookbook/examples/chat-demo-app/):\n    - Explore multiple specialized agents handling various domains like travel, weather, math, and health\n  - [E-commerce Support Simulator](https://awslabs.github.io/multi-agent-orchestrator/cookbook/examples/ecommerce-support-simulator/): Experience AI-powered customer support with:\n    - Automated response generation for common queries\n    - Intelligent routing of complex issues to human support\n    - Real-time chat and email-style communication\n    - Human-in-the-loop interactions for complex cases\n- **Sample Projects**: Explore our example implementations in the `examples` folder:\n  - [`chat-demo-app`](https://github.com/awslabs/multi-agent-orchestrator/tree/main/examples/chat-demo-app): Web-based chat interface with multiple specialized agents\n  - [`ecommerce-support-simulator`](https://github.com/awslabs/multi-agent-orchestrator/tree/main/examples/ecommerce-support-simulator): AI-powered customer support system\n  - [`chat-chainlit-app`](https://github.com/awslabs/multi-agent-orchestrator/tree/main/examples/chat-chainlit-app): Chat application built with Chainlit\n  - [`fast-api-streaming`](https://github.com/awslabs/multi-agent-orchestrator/tree/main/examples/fast-api-streaming): FastAPI implementation with streaming support\n  - [`text-2-structured-output`](https://github.com/awslabs/multi-agent-orchestrator/tree/main/examples/text-2-structured-output): Natural Language to Structured Data\n  - [`bedrock-inline-agents`](https://github.com/awslabs/multi-agent-orchestrator/tree/main/examples/bedrock-inline-agents): Bedrock Inline Agents sample\n  - [`bedrock-prompt-routing`](https://github.com/awslabs/multi-agent-orchestrator/tree/main/examples/bedrock-prompt-routing): Bedrock Prompt Routing sample code\n\n\nExamples are available in both Python and TypeScript. Check out our [documentation](https://awslabs.github.io/multi-agent-orchestrator/) for comprehensive guides on setting up and using the Multi-Agent Orchestrator framework!\n\n\n## 🌟 Use cases and implementations\n\nDiscover creative implementations and diverse applications of the Multi-Agent Orchestrator:\n\n- **[From 'Bonjour' to 'Boarding Pass': Multilingual AI Chatbot for Flight Reservations](https://community.aws/content/2lCi8jEKydhDm8eE8QFIQ5K23pF/from-bonjour-to-boarding-pass-multilingual-ai-chatbot-for-flight-reservations)**\n\n  This article demonstrates how to build a multilingual chatbot using the Multi-Agent Orchestrator framework. The article explains how to use an **Amazon Lex** bot as an agent, along with 2 other new agents to make it work in many languages with just a few lines of code.\n\n- **[Beyond Auto-Replies: Building an AI-Powered E-commerce Support system](https://community.aws/content/2lq6cYYwTYGc7S3Zmz28xZoQNQj/beyond-auto-replies-building-an-ai-powered-e-commerce-support-system)**\n\n  This article demonstrates how to build an AI-driven multi-agent system for automated e-commerce customer email support. It covers the architecture and setup of specialized AI agents using the Multi-Agent Orchestrator framework, integrating automated processing with human-in-the-loop oversight. The guide explores email ingestion, intelligent routing, automated response generation, and human verification, providing a comprehensive approach to balancing AI efficiency with human expertise in customer support.\n\n\n- **[Speak Up, AI: Voicing Your Agents with Amazon Connect, Lex, and Bedrock](https://community.aws/content/2mt7CFG7xg4yw6GRHwH9akhg0oD/speak-up-ai-voicing-your-agents-with-amazon-connect-lex-and-bedrock)**\n\n  This article demonstrates how to build an AI customer call center. It covers the architecture and setup of specialized AI agents using the Multi-Agent Orchestrator framework interacting with voice via **Amazon Connect** and **Amazon Lex**.\n\n  Here's the section to add under \"Use cases and implementations\":\n\n- **[Unlock Bedrock InvokeInlineAgent API's Hidden Potential](https://community.aws/content/2pTsHrYPqvAbJBl9ht1XxPOSPjR/unlock-bedrock-invokeinlineagent-api-s-hidden-potential-with-multi-agent-orchestrator)**\n\n  Learn how to scale **Amazon Bedrock Agents** beyond knowledge base limitations using the Multi-Agent Orchestrator framework and **InvokeInlineAgent API**. This article demonstrates dynamic agent creation and knowledge base selection for enterprise-scale AI applications.\n\n- **[Supercharging Amazon Bedrock Flows](https://community.aws/content/2phMjQ0bqWMg4PBwejBs1uf4YQE/supercharging-amazon-bedrock-flows-with-aws-multi-agent-orchestrator)**\n\n  Learn how to enhance **Amazon Bedrock Flows** with conversation memory and multi-flow orchestration using the Multi-Agent Orchestrator framework. This guide shows how to overcome Bedrock Flows' limitations to build more sophisticated AI workflows with persistent memory and intelligent routing between flows.\n\n\n### TypeScript Version\n\n#### Installation\n\n```bash\nnpm install multi-agent-orchestrator\n```\n\n#### Usage\n\nThe following example demonstrates how to use the Multi-Agent Orchestrator with two different types of agents: a Bedrock LLM Agent with Converse API support and a Lex Bot Agent. This showcases the flexibility of the system in integrating various AI services.\n\n```typescript\nimport { MultiAgentOrchestrator, BedrockLLMAgent, LexBotAgent } from \"multi-agent-orchestrator\";\n\nconst orchestrator = new MultiAgentOrchestrator();\n\n// Add a Bedrock LLM Agent with Converse API support\norchestrator.addAgent(\n  new BedrockLLMAgent({\n      name: \"Tech Agent\",\n      description:\n        \"Specializes in technology areas including software development, hardware, AI, cybersecurity, blockchain, cloud computing, emerging tech innovations, and pricing/costs related to technology products and services.\",\n      streaming: true\n  })\n);\n\n// Add a Lex Bot Agent for handling travel-related queries\norchestrator.addAgent(\n  new LexBotAgent({\n    name: \"Travel Agent\",\n    description: \"Helps users book and manage their flight reservations\",\n    botId: process.env.LEX_BOT_ID,\n    botAliasId: process.env.LEX_BOT_ALIAS_ID,\n    localeId: \"en_US\",\n  })\n);\n\n// Example usage\nconst response = await orchestrator.routeRequest(\n  \"I want to book a flight\",\n  'user123',\n  'session456'\n);\n\n// Handle the response (streaming or non-streaming)\nif (response.streaming == true) {\n    console.log(\"\\n** RESPONSE STREAMING ** \\n\");\n    // Send metadata immediately\n    console.log(`> Agent ID: ${response.metadata.agentId}`);\n    console.log(`> Agent Name: ${response.metadata.agentName}`);\n    console.log(`> User Input: ${response.metadata.userInput}`);\n    console.log(`> User ID: ${response.metadata.userId}`);\n    console.log(`> Session ID: ${response.metadata.sessionId}`);\n    console.log(\n      `> Additional Parameters:`,\n      response.metadata.additionalParams\n    );\n    console.log(`\\n> Response: `);\n\n    // Stream the content\n    for await (const chunk of response.output) {\n      if (typeof chunk === \"string\") {\n        process.stdout.write(chunk);\n      } else {\n        console.error(\"Received unexpected chunk type:\", typeof chunk);\n      }\n    }\n\n} else {\n    // Handle non-streaming response (AgentProcessingResult)\n    console.log(\"\\n** RESPONSE ** \\n\");\n    console.log(`> Agent ID: ${response.metadata.agentId}`);\n    console.log(`> Agent Name: ${response.metadata.agentName}`);\n    console.log(`> User Input: ${response.metadata.userInput}`);\n    console.log(`> User ID: ${response.metadata.userId}`);\n    console.log(`> Session ID: ${response.metadata.sessionId}`);\n    console.log(\n      `> Additional Parameters:`,\n      response.metadata.additionalParams\n    );\n    console.log(`\\n> Response: ${response.output}`);\n}\n```\n\n### Python Version\n\n\n```bash\n# Optional: Set up a virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows use `venv\\Scripts\\activate`\npip install multi-agent-orchestrator[aws]\n```\n\n#### Default Usage\n\nHere's an equivalent Python example demonstrating the use of the Multi-Agent Orchestrator with a Bedrock LLM Agent and a Lex Bot Agent:\n\n```python\nimport os\nimport asyncio\nfrom multi_agent_orchestrator.orchestrator import MultiAgentOrchestrator\nfrom multi_agent_orchestrator.agents import BedrockLLMAgent, LexBotAgent, BedrockLLMAgentOptions, LexBotAgentOptions, AgentCallbacks\n\norchestrator = MultiAgentOrchestrator()\n\nclass BedrockLLMAgentCallbacks(AgentCallbacks):\n    def on_llm_new_token(self, token: str) -> None:\n        # handle response streaming here\n        print(token, end='', flush=True)\n\ntech_agent = BedrockLLMAgent(BedrockLLMAgentOptions(\n  name=\"Tech Agent\",\n  streaming=True,\n  description=\"Specializes in technology areas including software development, hardware, AI, \\\n  cybersecurity, blockchain, cloud computing, emerging tech innovations, and pricing/costs \\\n  related to technology products and services.\",\n  model_id=\"anthropic.claude-3-sonnet-20240229-v1:0\",\n  callbacks=BedrockLLMAgentCallbacks()\n))\norchestrator.add_agent(tech_agent)\n\n\n# Add a Lex Bot Agent for handling travel-related queries\norchestrator.add_agent(\n    LexBotAgent(LexBotAgentOptions(\n        name=\"Travel Agent\",\n        description=\"Helps users book and manage their flight reservations\",\n        bot_id=os.environ.get('LEX_BOT_ID'),\n        bot_alias_id=os.environ.get('LEX_BOT_ALIAS_ID'),\n        locale_id=\"en_US\",\n    ))\n)\n\nasync def main():\n    # Example usage\n    response = await orchestrator.route_request(\n        \"I want to book a flight\",\n        'user123',\n        'session456'\n    )\n\n    # Handle the response (streaming or non-streaming)\n    if response.streaming:\n        print(\"\\n** RESPONSE STREAMING ** \\n\")\n        # Send metadata immediately\n        print(f\"> Agent ID: {response.metadata.agent_id}\")\n        print(f\"> Agent Name: {response.metadata.agent_name}\")\n        print(f\"> User Input: {response.metadata.user_input}\")\n        print(f\"> User ID: {response.metadata.user_id}\")\n        print(f\"> Session ID: {response.metadata.session_id}\")\n        print(f\"> Additional Parameters: {response.metadata.additional_params}\")\n        print(\"\\n> Response: \")\n\n        # Stream the content\n        async for chunk in response.output:\n            if isinstance(chunk, str):\n                print(chunk, end='', flush=True)\n            else:\n                print(f\"Received unexpected chunk type: {type(chunk)}\", file=sys.stderr)\n\n    else:\n        # Handle non-streaming response (AgentProcessingResult)\n        print(\"\\n** RESPONSE ** \\n\")\n        print(f\"> Agent ID: {response.metadata.agent_id}\")\n        print(f\"> Agent Name: {response.metadata.agent_name}\")\n        print(f\"> User Input: {response.metadata.user_input}\")\n        print(f\"> User ID: {response.metadata.user_id}\")\n        print(f\"> Session ID: {response.metadata.session_id}\")\n        print(f\"> Additional Parameters: {response.metadata.additional_params}\")\n        print(f\"\\n> Response: {response.output.content}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\nThese examples showcase:\n1. The use of a Bedrock LLM Agent with Converse API support, allowing for multi-turn conversations.\n2. Integration of a Lex Bot Agent for specialized tasks (in this case, travel-related queries).\n3. The orchestrator's ability to route requests to the most appropriate agent based on the input.\n4. Handling of both streaming and non-streaming responses from different types of agents.\n\n\n### Modular Installation Options\n\nThe Multi-Agent Orchestrator is designed with a modular architecture, allowing you to install only the components you need while ensuring you always get the core functionality.\n\n#### Installation Options\n\n**1. AWS Integration**:\n\n  ```bash\n   pip install \"multi-agent-orchestrator[aws]\"\n  ```\nIncludes core orchestration functionality with comprehensive AWS service integrations (`BedrockLLMAgent`, `AmazonBedrockAgent`, `LambdaAgent`, etc.)\n\n**2. Anthropic Integration**:\n\n  ```bash\npip install \"multi-agent-orchestrator[anthropic]\"\n  ```\n\n**3. OpenAI Integration**:\n\n  ```bash\npip install \"multi-agent-orchestrator[openai]\"\n  ```\n\nAdds OpenAI's GPT models for agents and classification, along with core packages.\n\n**4. Full Installation**:\n\n  ```bash\npip install \"multi-agent-orchestrator[all]\"\n  ```\n\nIncludes all optional dependencies for maximum flexibility.\n\n\n### 🙌 **We Want to Hear From You!**\n\nHave something to share, discuss, or brainstorm? We’d love to connect with you and hear about your journey with the **Multi-Agent Orchestrator framework**. Here’s how you can get involved:\n\n- **🙌 Show & Tell**: Got a success story, cool project, or creative implementation? Share it with us in the [**Show and Tell**](https://github.com/awslabs/multi-agent-orchestrator/discussions/categories/show-and-tell) section. Your work might inspire the entire community! 🎉\n\n- **💬 General Discussion**: Have questions, feedback, or suggestions? Join the conversation in our [**General Discussions**](https://github.com/awslabs/multi-agent-orchestrator/discussions/categories/general) section. It’s the perfect place to connect with other users and contributors.\n\n- **💡 Ideas**: Thinking of a new feature or improvement? Share your thoughts in the [**Ideas**](https://github.com/awslabs/multi-agent-orchestrator/discussions/categories/ideas) section. We’re always open to exploring innovative ways to make the orchestrator even better!\n\nLet’s collaborate, learn from each other, and build something incredible together! 🚀\n\n## 🤝 Contributing\n\nWe welcome contributions! Here's how to get started:\n\n1. 📚 Review our [Contributing Guide](CONTRIBUTING.md)\n2. 💡 Create a [GitHub Issue](https://github.com/awslabs/multi-agent-orchestrator/issues)\n3. 🔨 Submit a pull request\n\n⚠️ For major changes, please open an issue first to discuss your proposal.\n\n✅ Follow existing project structure and include documentation for new features.\n\n\n### Thank You for Your Support! 🙏\n\n[![Star History Chart](https://api.star-history.com/svg?repos=awslabs/multi-agent-orchestrator&type=Date)](https://star-history.com/#awslabs/multi-agent-orchestrator&Date)\n\n🌟 **Stay Updated**: Star the repository to be notified about new features, improvements, and exciting developments in the Multi-Agent Orchestrator framework!\n\n# Authors\n\n- [Corneliu Croitoru](https://www.linkedin.com/in/corneliucroitoru/)\n- [Anthony Bernabeu](https://www.linkedin.com/in/anthonybernabeu/)\n\n# 👥 Contributors\n\nBig shout out to our awesome contributors! Thank you for making this project better! 🌟 ⭐ 🚀\n\n[![contributors](https://contrib.rocks/image?repo=awslabs/multi-agent-orchestrator&max=2000)](https://github.com/awslabs/multi-agent-orchestrator/graphs/contributors)\n\n\nPlease see our [contributing guide](./CONTRIBUTING.md) for guidelines on how to propose bugfixes and improvements.\n\n\n## 📄 LICENSE\n\nThis project is licensed under the Apache 2.0 licence - see the [LICENSE](https://raw.githubusercontent.com/awslabs/multi-agent-orchestrator/main/LICENSE) file for details.\n\n## 📄 Font License\nThis project uses the JetBrainsMono NF font, licensed under the SIL Open Font License 1.1.\nFor full license details, see [FONT-LICENSE.md](https://github.com/JetBrains/JetBrainsMono/blob/master/OFL.txt).\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "typescript",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}